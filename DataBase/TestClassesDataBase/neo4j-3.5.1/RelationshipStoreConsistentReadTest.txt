public static class RelationshipStoreConsistentReadTest extends RecordStoreConsistentReadTest<RelationshipRecord,RelationshipStore> {
  private static final int FIRST_NODE=2;
  private static final int SECOND_NODE=3;
  private static final int TYPE=4;
  private static final int FIRST_PREV_REL=5;
  private static final int FIRST_NEXT_REL=6;
  private static final int SECOND_PREV_REL=7;
  private static final int SECOND_NEXT_REL=8;
  @Override protected RelationshipRecord createNullRecord(  long id){
    RelationshipRecord record=new RelationshipRecord(id,false,0,0,0,0,0,0,0,false,false);
    record.setNextProp(0);
    return record;
  }
  @Override protected RelationshipRecord createExistingRecord(  boolean light){
    return new RelationshipRecord(ID,true,FIRST_NODE,SECOND_NODE,TYPE,FIRST_PREV_REL,FIRST_NEXT_REL,SECOND_PREV_REL,SECOND_NEXT_REL,true,true);
  }
  @Override protected RelationshipRecord getLight(  long id,  RelationshipStore store){
    return store.getRecord(id,store.newRecord(),NORMAL);
  }
  @Override protected void assertRecordsEqual(  RelationshipRecord actualRecord,  RelationshipRecord expectedRecord){
    assertNotNull("actualRecord",actualRecord);
    assertNotNull("expectedRecord",expectedRecord);
    assertThat("getFirstNextRel",actualRecord.getFirstNextRel(),is(expectedRecord.getFirstNextRel()));
    assertThat("getFirstNode",actualRecord.getFirstNode(),is(expectedRecord.getFirstNode()));
    assertThat("getFirstPrevRel",actualRecord.getFirstPrevRel(),is(expectedRecord.getFirstPrevRel()));
    assertThat("getSecondNextRel",actualRecord.getSecondNextRel(),is(expectedRecord.getSecondNextRel()));
    assertThat("getSecondNode",actualRecord.getSecondNode(),is(expectedRecord.getSecondNode()));
    assertThat("getSecondPrevRel",actualRecord.getSecondPrevRel(),is(expectedRecord.getSecondPrevRel()));
    assertThat("getType",actualRecord.getType(),is(expectedRecord.getType()));
    assertThat("isFirstInFirstChain",actualRecord.isFirstInFirstChain(),is(expectedRecord.isFirstInFirstChain()));
    assertThat("isFirstInSecondChain",actualRecord.isFirstInSecondChain(),is(expectedRecord.isFirstInSecondChain()));
    assertThat("getId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("getLongId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("getNextProp",actualRecord.getNextProp(),is(expectedRecord.getNextProp()));
    assertThat("inUse",actualRecord.inUse(),is(expectedRecord.inUse()));
  }
  @Override protected RelationshipStore getStore(  NeoStores neoStores){
    return neoStores.getRelationshipStore();
  }
}
