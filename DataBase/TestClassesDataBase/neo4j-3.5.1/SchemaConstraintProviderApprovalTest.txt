@RunWith(value=Parameterized.class) public abstract class SchemaConstraintProviderApprovalTest {
  public enum TestValue {  BOOLEAN_TRUE(true),   BOOLEAN_FALSE(false),   STRING_TRUE("true"),   STRING_FALSE("false"),   STRING_UPPER_A("A"),   STRING_LOWER_A("a"),   CHAR_UPPER_A('B'),   CHAR_LOWER_A('b'),   INT_42(42),   LONG_42((long)43),   LARGE_LONG_1(4611686018427387905L),   LARGE_LONG_2(4611686018427387907L),   BYTE_42((byte)44),   DOUBLE_42((double)41),   DOUBLE_42andAHalf(42.5d),   SHORT_42((short)45),   FLOAT_42((float)46),   FLOAT_42andAHalf(41.5f),   POINT_123456_GPS(Values.pointValue(CoordinateReferenceSystem.WGS84,12.3,45.6)),   POINT_123456_CAR(Values.pointValue(CoordinateReferenceSystem.Cartesian,123,456)),   POINT_123456_GPS_3D(Values.pointValue(CoordinateReferenceSystem.WGS84_3D,12.3,45.6,78.9)),   POINT_123456_CAR_3D(Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,123,456,789)),   ARRAY_OF_INTS(new int[]{1,2,3}),   ARRAY_OF_LONGS(new long[]{4,5,6}),   ARRAY_OF_LARGE_LONGS_1(new long[]{4611686018427387905L}),   ARRAY_OF_LARGE_LONGS_2(new long[]{4611686018427387906L}),   ARRAY_OF_LARGE_LONGS_3(new Long[]{4611686018425387907L}),   ARRAY_OF_LARGE_LONGS_4(new Long[]{4611686018425387908L}),   ARRAY_OF_BOOL_LIKE_STRING(new String[]{"true","false","true"}),   ARRAY_OF_BOOLS(new boolean[]{true,false,true}),   ARRAY_OF_DOUBLES(new double[]{7,8,9}),   ARRAY_OF_STRING(new String[]{"a","b","c"}),   EMPTY_ARRAY_OF_STRING(new String[0]),   ONE(new String[]{"","||"}),   OTHER(new String[]{"||",""}),   ANOTHER_ARRAY_OF_STRING(new String[]{"1|2|3"}),   ARRAY_OF_CHAR(new char[]{'d','e','f'}),   ARRAY_OF_POINTS_GPS(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.WGS84,12.3,45.6)}),   ARRAY_OF_POINTS_CAR(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.Cartesian,123,456)}),   ARRAY_OF_POINTS_GPS_3D(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.WGS84_3D,12.3,45.6,78.9)}),   ARRAY_OF_POINTS_CAR_3D(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,123,456,789)});   private final Object value;
  TestValue(  Object value){
    this.value=value;
  }
}
  private static Map<TestValue,Set<Object>> noIndexRun;
  private static Map<TestValue,Set<Object>> constraintRun;
  private final TestValue currentValue;
  public SchemaConstraintProviderApprovalTest(  TestValue value){
    currentValue=value;
  }
  @Parameters(name="{0}") public static Collection<TestValue> data(){
    return Arrays.asList(TestValue.values());
  }
  @BeforeClass public static void init(){
    GraphDatabaseService db=new TestGraphDatabaseFactory().newImpermanentDatabase();
    for (    TestValue value : TestValue.values()) {
      createNode(db,PROPERTY_KEY,value.value);
    }
    noIndexRun=runFindByLabelAndProperty(db);
    createConstraint(db,label(LABEL),PROPERTY_KEY);
    constraintRun=runFindByLabelAndProperty(db);
    db.shutdown();
  }
  public static final String LABEL="Person";
  public static final String PROPERTY_KEY="name";
  public static final Function<Node,Object> PROPERTY_EXTRACTOR=node -> {
    Object value=node.getProperty(PROPERTY_KEY);
    if (value.getClass().isArray()) {
      return new ArrayEqualityObject(value);
    }
    return value;
  }
;
  @Test public void test(){
    Set<Object> noIndexResult=Iterables.asSet(noIndexRun.get(currentValue));
    Set<Object> constraintResult=Iterables.asSet(constraintRun.get(currentValue));
    String errorMessage=currentValue.toString();
    assertEquals(errorMessage,noIndexResult,constraintResult);
  }
  private static Map<TestValue,Set<Object>> runFindByLabelAndProperty(  GraphDatabaseService db){
    HashMap<TestValue,Set<Object>> results=new HashMap<>();
    try (Transaction tx=db.beginTx()){
      for (      TestValue value : TestValue.values()) {
        addToResults(db,results,value);
      }
      tx.success();
    }
     return results;
  }
  private static Node createNode(  GraphDatabaseService db,  String propertyKey,  Object value){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label(LABEL));
      node.setProperty(propertyKey,value);
      tx.success();
      return node;
    }
   }
  private static void addToResults(  GraphDatabaseService db,  HashMap<TestValue,Set<Object>> results,  TestValue value){
    ResourceIterator<Node> foundNodes=db.findNodes(label(LABEL),PROPERTY_KEY,value.value);
    Set<Object> propertyValues=asSet(Iterators.map(PROPERTY_EXTRACTOR,foundNodes));
    results.put(value,propertyValues);
  }
private static class ArrayEqualityObject {
    private final Object array;
    ArrayEqualityObject(    Object array){
      this.array=array;
    }
    @Override public int hashCode(){
      return ArrayUtil.hashCode(array);
    }
    @Override public boolean equals(    Object obj){
      return obj instanceof ArrayEqualityObject && ArrayUtil.equals(array,((ArrayEqualityObject)obj).array);
    }
    @Override public String toString(){
      return Strings.prettyPrint(array);
    }
  }
}
