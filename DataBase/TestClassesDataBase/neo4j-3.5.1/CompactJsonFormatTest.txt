public class CompactJsonFormatTest {
  private OutputFormat json;
  @Before public void createOutputFormat() throws Exception {
    json=new OutputFormat(new CompactJsonFormat(),new URI("http://localhost/"),null);
  }
  @Test public void canFormatString(){
    String entity=json.assemble(ValueRepresentation.string("expected value"));
    assertEquals(entity,"\"expected value\"");
  }
  @Test public void canFormatListOfStrings(){
    String entity=json.assemble(ListRepresentation.strings("hello","world"));
    String expectedString=JsonHelper.createJsonFrom(Arrays.asList("hello","world"));
    assertEquals(expectedString,entity);
  }
  @Test public void canFormatInteger(){
    String entity=json.assemble(ValueRepresentation.number(10));
    assertEquals("10",entity);
  }
  @Test public void canFormatObjectWithStringField(){
    String entity=json.assemble(new MappingRepresentation("string"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putString("key","expected string");
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("key","expected string")),entity);
  }
}
