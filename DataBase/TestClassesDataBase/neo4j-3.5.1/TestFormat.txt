class TestFormat {
  @Test void dateTime() throws Exception {
    long timeWithDate=System.currentTimeMillis();
    String dateAsString=Format.date(timeWithDate);
    assertEquals(timeWithDate,new SimpleDateFormat(Format.DATE_FORMAT).parse(dateAsString).getTime());
    String timeAsString=Format.time(timeWithDate);
    assertEquals(timeWithDate,translateToDate(timeWithDate,new SimpleDateFormat(Format.TIME_FORMAT).parse(timeAsString).getTime(),Format.DEFAULT_TIME_ZONE));
  }
  @Test void dateTimeWithTimeZone() throws Exception {
    String zoneOffset="+03:00";
    TimeZone zone=TimeZone.getTimeZone("GMT" + zoneOffset);
    String asString=Format.date(zone);
    assertTrue(asString.endsWith(withoutColon(zoneOffset)));
    long timeWithDate=new SimpleDateFormat(Format.DATE_FORMAT).parse(asString).getTime();
    asString=Format.date(timeWithDate,zone);
    assertTrue(asString.endsWith(withoutColon(zoneOffset)));
    assertEquals(timeWithDate,new SimpleDateFormat(Format.DATE_FORMAT).parse(asString).getTime());
    asString=Format.date(new Date(timeWithDate),zone);
    assertTrue(asString.endsWith(withoutColon(zoneOffset)));
    assertEquals(timeWithDate,new SimpleDateFormat(Format.DATE_FORMAT).parse(asString).getTime());
    asString=Format.time(timeWithDate,zone);
    assertEquals(timeWithDate,translateToDate(timeWithDate,new SimpleDateFormat(Format.TIME_FORMAT).parse(asString).getTime(),zone));
    asString=Format.time(new Date(timeWithDate),zone);
    assertEquals(timeWithDate,translateToDate(timeWithDate,new SimpleDateFormat(Format.TIME_FORMAT).parse(asString).getTime(),zone));
  }
  private static long translateToDate(  long timeWithDate,  long time,  TimeZone timeIsGivenInThisTimeZone){
    Calendar calendar=Calendar.getInstance(timeIsGivenInThisTimeZone);
    calendar.setTimeInMillis(timeWithDate);
    Calendar timeCalendar=Calendar.getInstance();
    timeCalendar.setTimeInMillis(time);
    timeCalendar.setTimeZone(timeIsGivenInThisTimeZone);
    timeCalendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR));
    timeCalendar.set(Calendar.MONTH,calendar.get(Calendar.MONTH));
    boolean crossedDayBoundary=!timeIsGivenInThisTimeZone.equals(Format.DEFAULT_TIME_ZONE) && timeCalendar.get(Calendar.HOUR_OF_DAY) < calendar.get(Calendar.HOUR_OF_DAY);
    timeCalendar.set(Calendar.DAY_OF_MONTH,calendar.get(Calendar.DAY_OF_MONTH) + (crossedDayBoundary ? 1 : 0));
    return timeCalendar.getTimeInMillis();
  }
  private static String withoutColon(  String zoneOffset){
    return zoneOffset.replaceAll(":","");
  }
}
