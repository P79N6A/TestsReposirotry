/** 
 * This test ensures that lazy properties
 */
public class TestReferenceDangling {
  @Rule public ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule();
  @Test public void testPropertyStoreReferencesOnRead() throws Throwable {
    GraphDatabaseAPI db=dbRule.getGraphDatabaseAPI();
    long nId=ensurePropertyIsCachedLazyProperty(db,"some");
    restartNeoDataSource(db);
    try (Transaction tx=db.beginTx()){
      db.getNodeById(nId).getProperty("some");
      tx.success();
    }
   }
  @Test public void testPropertyStoreReferencesOnWrite() throws Throwable {
    GraphDatabaseAPI db=dbRule.getGraphDatabaseAPI();
    long nId=ensurePropertyIsCachedLazyProperty(db,"some");
    restartNeoDataSource(db);
    try (Transaction tx=db.beginTx()){
      db.getNodeById(nId).setProperty("some",new long[]{-1,2,2,3,4,5,5});
      tx.success();
    }
   }
  private long ensurePropertyIsCachedLazyProperty(  GraphDatabaseAPI slave,  String key){
    long nId;
    try (Transaction tx=slave.beginTx()){
      Node n=slave.createNode();
      nId=n.getId();
      n.setProperty(key,new long[]{-1,2,2,3,4,5,5});
      tx.success();
    }
     try (Transaction tx=slave.beginTx()){
      slave.getNodeById(nId).hasProperty(key);
      tx.success();
    }
     return nId;
  }
  private void restartNeoDataSource(  GraphDatabaseAPI slave) throws Throwable {
    slave.getDependencyResolver().resolveDependency(DataSourceManager.class).getDataSource().stop();
    slave.getDependencyResolver().resolveDependency(DataSourceManager.class).getDataSource().start();
  }
}
