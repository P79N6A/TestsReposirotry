public abstract class NodeLabelIndexCursorTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  private int labelOne=1;
  private int labelTwo=2;
  private int labelThree=3;
  private int labelFirst=4;
  @Test public void shouldFindNodesByLabel() throws Exception {
    long toDelete;
    try (Transaction tx=beginTransaction()){
      createNode(tx.dataWrite(),labelOne,labelFirst);
      createNode(tx.dataWrite(),labelTwo,labelFirst);
      createNode(tx.dataWrite(),labelThree,labelFirst);
      toDelete=createNode(tx.dataWrite(),labelOne);
      createNode(tx.dataWrite(),labelTwo);
      createNode(tx.dataWrite(),labelThree);
      createNode(tx.dataWrite(),labelThree);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      tx.dataWrite().nodeDelete(toDelete);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      Read read=tx.dataRead();
      try (NodeLabelIndexCursor cursor=tx.cursors().allocateNodeLabelIndexCursor()){
        MutableLongSet uniqueIds=new LongHashSet();
        read.nodeLabelScan(labelOne,cursor);
        assertNodeCount(cursor,1,uniqueIds);
        read.nodeLabelScan(labelTwo,cursor);
        assertNodeCount(cursor,2,uniqueIds);
        read.nodeLabelScan(labelThree,cursor);
        assertNodeCount(cursor,3,uniqueIds);
        uniqueIds.clear();
        read.nodeLabelScan(labelFirst,cursor);
        assertNodeCount(cursor,3,uniqueIds);
      }
     }
   }
  @Test public void shouldFindNodesByLabelInTx() throws Exception {
    long inStore;
    long deletedInTx;
    long createdInTx;
    try (Transaction tx=beginTransaction()){
      inStore=createNode(tx.dataWrite(),labelOne);
      createNode(tx.dataWrite(),labelTwo);
      deletedInTx=createNode(tx.dataWrite(),labelOne);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      tx.dataWrite().nodeDelete(deletedInTx);
      createdInTx=createNode(tx.dataWrite(),labelOne);
      createNode(tx.dataWrite(),labelTwo);
      Read read=tx.dataRead();
      try (NodeLabelIndexCursor cursor=tx.cursors().allocateNodeLabelIndexCursor()){
        MutableLongSet uniqueIds=new LongHashSet();
        read.nodeLabelScan(labelOne,cursor);
        assertNodes(cursor,uniqueIds,inStore,createdInTx);
      }
     }
   }
  private long createNode(  Write write,  int... labels) throws KernelException {
    long nodeId=write.nodeCreate();
    for (    int label : labels) {
      write.nodeAddLabel(nodeId,label);
    }
    return nodeId;
  }
}
