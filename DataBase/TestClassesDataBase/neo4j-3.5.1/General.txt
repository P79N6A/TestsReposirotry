@Ignore("Not a test. This is a compatibility suite") public static class General extends SimpleIndexAccessorCompatibility {
  public General(  IndexProviderCompatibilityTestSuite testSuite){
    super(testSuite,TestIndexDescriptorFactory.forLabel(1000,100));
  }
  @Test public void closingAnOnlineIndexUpdaterMustNotThrowEvenIfItHasBeenFedConflictingData() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"a"),add(2L,descriptor.schema(),"a")));
    assertThat(query(exact(1,"a")),equalTo(asList(1L,2L)));
  }
  @Test public void testIndexSeekAndScan() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"a"),add(2L,descriptor.schema(),"a"),add(3L,descriptor.schema(),"b")));
    assertThat(query(exact(1,"a")),equalTo(asList(1L,2L)));
    assertThat(query(exists(1)),equalTo(asList(1L,2L,3L)));
  }
  @Test public void testIndexRangeSeekByNumberWithDuplicates() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),-5),add(2L,descriptor.schema(),-5),add(3L,descriptor.schema(),0),add(4L,descriptor.schema(),5),add(5L,descriptor.schema(),5)));
    assertThat(query(range(1,-5,true,5,true)),equalTo(asList(1L,2L,3L,4L,5L)));
    assertThat(query(range(1,-3,true,-1,true)),equalTo(EMPTY_LIST));
    assertThat(query(range(1,-5,true,4,true)),equalTo(asList(1L,2L,3L)));
    assertThat(query(range(1,-4,true,5,true)),equalTo(asList(3L,4L,5L)));
    assertThat(query(range(1,-5,true,5,true)),equalTo(asList(1L,2L,3L,4L,5L)));
  }
  @Test public void testIndexRangeSeekByStringWithDuplicates() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"Anna"),add(2L,descriptor.schema(),"Anna"),add(3L,descriptor.schema(),"Bob"),add(4L,descriptor.schema(),"William"),add(5L,descriptor.schema(),"William")));
    assertThat(query(range(1,"Anna",false,"William",false)),equalTo(singletonList(3L)));
    assertThat(query(range(1,"Arabella",false,"Bob",false)),equalTo(EMPTY_LIST));
    assertThat(query(range(1,"Anna",true,"William",false)),equalTo(asList(1L,2L,3L)));
    assertThat(query(range(1,"Anna",false,"William",true)),equalTo(asList(3L,4L,5L)));
    assertThat(query(range(1,"Anna",true,"William",true)),equalTo(asList(1L,2L,3L,4L,5L)));
  }
  @Test public void testIndexRangeSeekByDateWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(epochDate(100),epochDate(101),epochDate(200),epochDate(300));
  }
  @Test public void testIndexRangeSeekByLocalDateTimeWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(localDateTime(1000,10),localDateTime(1000,11),localDateTime(2000,10),localDateTime(3000,10));
  }
  @Test public void testIndexRangeSeekByDateTimeWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(datetime(1000,10,UTC),datetime(1000,11,UTC),datetime(2000,10,UTC),datetime(3000,10,UTC));
  }
  @Test public void testIndexRangeSeekByLocalTimeWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(localTime(1000),localTime(1001),localTime(2000),localTime(3000));
  }
  @Test public void testIndexRangeSeekByTimeWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(time(1000,UTC),time(1001,UTC),time(2000,UTC),time(3000,UTC));
  }
  @Test public void testIndexRangeSeekByTimeWithZonesAndDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(time(20,31,53,4,ZoneOffset.of("+17:02")),time(20,31,54,3,ZoneOffset.of("+17:02")),time(19,31,54,2,UTC),time(18,23,27,1,ZoneOffset.of("-18:00")));
  }
  @Test public void testIndexRangeSeekByDurationWithDuplicates() throws Exception {
    testIndexRangeSeekWithDuplicates(duration(1,1,1,1),duration(1,1,1,2),duration(2,1,1,1),duration(3,1,1,1));
  }
  /** 
 * Helper for testing range seeks. Takes 4 ordered sample values.
 */
  private <VALUE extends Value>void testIndexRangeSeekWithDuplicates(  VALUE v1,  VALUE v2,  VALUE v3,  VALUE v4) throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),v1),add(2L,descriptor.schema(),v1),add(3L,descriptor.schema(),v3),add(4L,descriptor.schema(),v4),add(5L,descriptor.schema(),v4)));
    assertThat(query(range(1,v1,false,v4,false)),equalTo(singletonList(3L)));
    assertThat(query(range(1,v2,false,v3,false)),equalTo(EMPTY_LIST));
    assertThat(query(range(1,v1,true,v4,false)),equalTo(asList(1L,2L,3L)));
    assertThat(query(range(1,v1,false,v4,true)),equalTo(asList(3L,4L,5L)));
    assertThat(query(range(1,v1,true,v4,true)),equalTo(asList(1L,2L,3L,4L,5L)));
  }
  @Test public void testIndexRangeSeekByPrefixWithDuplicates() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"a"),add(2L,descriptor.schema(),"A"),add(3L,descriptor.schema(),"apa"),add(4L,descriptor.schema(),"apa"),add(5L,descriptor.schema(),"apa")));
    assertThat(query(stringPrefix(1,stringValue("a"))),equalTo(asList(1L,3L,4L,5L)));
    assertThat(query(stringPrefix(1,stringValue("apa"))),equalTo(asList(3L,4L,5L)));
  }
  @Test public void testIndexFullSearchWithDuplicates() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"a"),add(2L,descriptor.schema(),"A"),add(3L,descriptor.schema(),"apa"),add(4L,descriptor.schema(),"apa"),add(5L,descriptor.schema(),"apalong")));
    assertThat(query(stringContains(1,stringValue("a"))),equalTo(asList(1L,3L,4L,5L)));
    assertThat(query(stringContains(1,stringValue("apa"))),equalTo(asList(3L,4L,5L)));
    assertThat(query(stringContains(1,stringValue("apa*"))),equalTo(Collections.emptyList()));
  }
  @Test public void testIndexEndsWithWithDuplicated() throws Exception {
    updateAndCommit(asList(add(1L,descriptor.schema(),"a"),add(2L,descriptor.schema(),"A"),add(3L,descriptor.schema(),"apa"),add(4L,descriptor.schema(),"apa"),add(5L,descriptor.schema(),"longapa"),add(6L,descriptor.schema(),"apalong")));
    assertThat(query(stringSuffix(1,stringValue("a"))),equalTo(asList(1L,3L,4L,5L)));
    assertThat(query(stringSuffix(1,stringValue("apa"))),equalTo(asList(3L,4L,5L)));
    assertThat(query(stringSuffix(1,stringValue("apa*"))),equalTo(Collections.emptyList()));
    assertThat(query(stringSuffix(1,stringValue(""))),equalTo(asList(1L,2L,3L,4L,5L,6L)));
  }
  @Test public void testIndexShouldHandleLargeAmountOfDuplicatesString() throws Exception {
    doTestShouldHandleLargeAmountOfDuplicates("this is a semi-long string that will need to be split");
  }
  @Test public void testIndexShouldHandleLargeAmountOfDuplicatesStringArray() throws Exception {
    Value arrayValue=nextRandomValidArrayValue();
    doTestShouldHandleLargeAmountOfDuplicates(arrayValue);
  }
  private void doTestShouldHandleLargeAmountOfDuplicates(  Object value) throws Exception {
    List<IndexEntryUpdate<?>> updates=new ArrayList<>();
    List<Long> nodeIds=new ArrayList<>();
    for (long i=0; i < 1000; i++) {
      nodeIds.add(i);
      updates.add(add(i,descriptor.schema(),value));
    }
    updateAndCommit(updates);
    assertThat(query(exists(1)),equalTo(nodeIds));
  }
  private Value nextRandomValidArrayValue(){
    Value value;
    do {
      value=random.randomValues().nextArray();
    }
 while (!testSuite.supportsSpatial() && Values.isGeometryArray(value));
    return value;
  }
}
