public class TransactionIdTrackerTest {
  private static final Duration DEFAULT_DURATION=ofSeconds(10);
  private final TransactionIdStore transactionIdStore=mock(TransactionIdStore.class);
  private final AvailabilityGuard databaseAvailabilityGuard=mock(DatabaseAvailabilityGuard.class);
  private TransactionIdTracker transactionIdTracker;
  @Before public void setup(){
    when(databaseAvailabilityGuard.isAvailable()).thenReturn(true);
    transactionIdTracker=new TransactionIdTracker(() -> transactionIdStore,databaseAvailabilityGuard);
  }
  @Test public void shouldReturnImmediatelyForBaseTxIdOrLess() throws Exception {
    transactionIdTracker.awaitUpToDate(BASE_TX_ID,ofSeconds(5));
    verify(transactionIdStore,never()).awaitClosedTransactionId(anyLong(),anyLong());
  }
  @Test public void shouldWaitForRequestedVersion() throws Exception {
    long version=5L;
    transactionIdTracker.awaitUpToDate(version,DEFAULT_DURATION);
    verify(transactionIdStore).awaitClosedTransactionId(version,DEFAULT_DURATION.toMillis());
  }
  @Test public void shouldPropagateTimeoutException() throws Exception {
    long version=5L;
    TimeoutException timeoutException=new TimeoutException();
    doThrow(timeoutException).when(transactionIdStore).awaitClosedTransactionId(anyLong(),anyLong());
    try {
      transactionIdTracker.awaitUpToDate(version + 1,ofMillis(50));
      fail("should have thrown");
    }
 catch (    TransactionFailureException ex) {
      assertEquals(Status.Transaction.InstanceStateChanged,ex.status());
      assertEquals(timeoutException,ex.getCause());
    }
  }
  @Test public void shouldNotWaitIfTheDatabaseIsUnavailable() throws Exception {
    when(databaseAvailabilityGuard.isAvailable()).thenReturn(false);
    try {
      transactionIdTracker.awaitUpToDate(1000,ofMillis(60_000));
      fail("should have thrown");
    }
 catch (    TransactionFailureException ex) {
      assertEquals(Status.General.DatabaseUnavailable,ex.status());
    }
    verify(transactionIdStore,never()).awaitClosedTransactionId(anyLong(),anyLong());
  }
  @Test public void shouldReturnNewestTransactionId(){
    when(transactionIdStore.getLastClosedTransactionId()).thenReturn(42L);
    when(transactionIdStore.getLastCommittedTransactionId()).thenReturn(4242L);
    assertEquals(4242L,transactionIdTracker.newestEncounteredTxId());
  }
}
