public class LockingNodeUniqueIndexSeekTest {
  private final int labelId=1;
  private final int propertyKeyId=2;
  private IndexReference index=IndexDescriptorFactory.uniqueForSchema(SchemaDescriptorFactory.forLabel(labelId,propertyKeyId));
  private final Value value=Values.of("value");
  private final IndexQuery.ExactPredicate predicate=exact(propertyKeyId,value);
  private final long resourceId=indexEntryResourceId(labelId,predicate);
  private UniqueNodeIndexSeeker<NodeValueIndexCursor> uniqueNodeIndexSeeker=mock(UniqueNodeIndexSeeker.class);
  private Locks.Client locks;
  private InOrder order;
  @Before public void setup(){
    locks=mock(Locks.Client.class);
    order=inOrder(locks);
  }
  @Test public void shouldHoldSharedIndexLockIfNodeIsExists() throws Exception {
    NodeValueIndexCursor cursor=mock(NodeValueIndexCursor.class);
    when(cursor.next()).thenReturn(true);
    when(cursor.nodeReference()).thenReturn(42L);
    long nodeId=LockingNodeUniqueIndexSeek.apply(locks,LockTracer.NONE,() -> cursor,uniqueNodeIndexSeeker,index,predicate);
    assertEquals(42L,nodeId);
    verify(locks).acquireShared(LockTracer.NONE,INDEX_ENTRY,resourceId);
    verifyNoMoreInteractions(locks);
    verify(cursor).close();
  }
  @Test public void shouldHoldSharedIndexLockIfNodeIsConcurrentlyCreated() throws Exception {
    NodeValueIndexCursor cursor=mock(NodeValueIndexCursor.class);
    when(cursor.next()).thenReturn(false,true);
    when(cursor.nodeReference()).thenReturn(42L);
    long nodeId=LockingNodeUniqueIndexSeek.apply(locks,LockTracer.NONE,() -> cursor,uniqueNodeIndexSeeker,index,predicate);
    assertEquals(42L,nodeId);
    order.verify(locks).acquireShared(LockTracer.NONE,INDEX_ENTRY,resourceId);
    order.verify(locks).releaseShared(INDEX_ENTRY,resourceId);
    order.verify(locks).acquireExclusive(LockTracer.NONE,INDEX_ENTRY,resourceId);
    order.verify(locks).acquireShared(LockTracer.NONE,INDEX_ENTRY,resourceId);
    order.verify(locks).releaseExclusive(INDEX_ENTRY,resourceId);
    verifyNoMoreInteractions(locks);
    verify(cursor).close();
  }
  @Test public void shouldHoldExclusiveIndexLockIfNodeDoesNotExist() throws Exception {
    NodeValueIndexCursor cursor=mock(NodeValueIndexCursor.class);
    when(cursor.next()).thenReturn(false,false);
    when(cursor.nodeReference()).thenReturn(-1L);
    long nodeId=LockingNodeUniqueIndexSeek.apply(locks,LockTracer.NONE,() -> cursor,uniqueNodeIndexSeeker,index,predicate);
    assertEquals(-1L,nodeId);
    order.verify(locks).acquireShared(LockTracer.NONE,INDEX_ENTRY,resourceId);
    order.verify(locks).releaseShared(INDEX_ENTRY,resourceId);
    order.verify(locks).acquireExclusive(LockTracer.NONE,INDEX_ENTRY,resourceId);
    verifyNoMoreInteractions(locks);
    verify(cursor).close();
  }
}
