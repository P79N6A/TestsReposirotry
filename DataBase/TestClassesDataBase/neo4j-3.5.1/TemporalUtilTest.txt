class TemporalUtilTest {
  @Test void shouldDoNothingForOffsetWithoutSeconds(){
    OffsetTime time=OffsetTime.of(23,30,10,0,ZoneOffset.ofHoursMinutes(-5,-30));
    OffsetTime truncatedTime=TemporalUtil.truncateOffsetToMinutes(time);
    assertEquals(time,truncatedTime);
  }
  @Test void shouldTruncateOffsetSeconds(){
    OffsetTime time=OffsetTime.of(14,55,50,0,ZoneOffset.ofHoursMinutesSeconds(2,15,45));
    OffsetTime truncatedTime=TemporalUtil.truncateOffsetToMinutes(time);
    assertEquals(OffsetTime.of(14,55,5,0,ZoneOffset.ofHoursMinutes(2,15)),truncatedTime);
  }
  @Test void shouldConvertNanosOfDayToUTCWhenOffsetIsZero(){
    int nanosOfDayLocal=42;
    long nanosOfDayUTC=TemporalUtil.nanosOfDayToUTC(nanosOfDayLocal,0);
    assertEquals(nanosOfDayLocal,nanosOfDayUTC);
  }
  @Test void shouldConvertNanosOfDayToUTC(){
    int nanosOfDayLocal=42;
    Duration offsetDuration=Duration.ofMinutes(35);
    long nanosOfDayUTC=TemporalUtil.nanosOfDayToUTC(nanosOfDayLocal,(int)offsetDuration.getSeconds());
    assertEquals(nanosOfDayLocal - offsetDuration.toNanos(),nanosOfDayUTC);
  }
  @Test void shouldGetNanosOfDayUTC(){
    LocalTime localTime=LocalTime.of(14,19,18,123999);
    ZoneOffset offset=ZoneOffset.ofHours(-12);
    OffsetTime time=OffsetTime.of(localTime,offset);
    long nanosOfDayUTC=TemporalUtil.getNanosOfDayUTC(time);
    long expectedNanosOfDayUTC=Duration.ofSeconds(localTime.toSecondOfDay()).minus(offset.getTotalSeconds(),SECONDS).toNanos();
    assertEquals(expectedNanosOfDayUTC + localTime.getNano(),nanosOfDayUTC);
  }
}
