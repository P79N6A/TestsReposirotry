static class Assumptions {
  final QueryExecutionType type;
  final boolean convertToQuery;
  boolean isProfiled;
  boolean requestedExecutionPlanDescription;
  boolean isExplained;
  boolean canContainResults;
  boolean canUpdateData;
  boolean canUpdateSchema;
  Assumptions(  QueryExecutionType type,  boolean convertToQuery){
    this.type=type;
    this.convertToQuery=convertToQuery;
  }
  @Override public String toString(){
    StringBuilder result=new StringBuilder(type.toString());
    if (convertToQuery) {
      result.append(" (as query)");
    }
    String sep=": ";
    for (    Field field : getClass().getDeclaredFields()) {
      if (field.getType() == boolean.class) {
        boolean value;
        field.setAccessible(true);
        try {
          value=field.getBoolean(this);
        }
 catch (        IllegalAccessException e) {
          throw new RuntimeException(e);
        }
        result.append(sep).append('.').append(field.getName()).append("() == ").append(value);
        sep=", ";
      }
    }
    return result.toString();
  }
  public Assumptions isProfiled(){
    this.isProfiled=true;
    return this;
  }
  public Assumptions isExplained(){
    this.requestedExecutionPlanDescription=true;
    return this;
  }
  public Assumptions isOnlyExplained(){
    this.isExplained=true;
    return this;
  }
  public Assumptions canContainResults(){
    this.canContainResults=true;
    return this;
  }
  public Assumptions canUpdateData(){
    this.canUpdateData=true;
    return this;
  }
  public Assumptions canUpdateSchema(){
    this.canUpdateSchema=true;
    return this;
  }
  public QueryExecutionType type(){
    return convertToQuery ? query(type.queryType()) : type;
  }
}
