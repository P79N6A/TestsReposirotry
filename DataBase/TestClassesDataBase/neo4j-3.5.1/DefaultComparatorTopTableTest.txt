public class DefaultComparatorTopTableTest {
  private static Long[] testValues=new Long[]{7L,4L,5L,0L,3L,4L,8L,6L,1L,9L,2L};
  private static long[] expectedValues=new long[]{0L,1L,2L,3L,4L,4L,5L,6L,7L,8L,9L};
  private static final Comparator<Long> comparator=Long::compare;
  @Rule public final ExpectedException exception=ExpectedException.none();
  @Test public void shouldHandleAddingMoreValuesThanCapacity(){
    DefaultComparatorTopTable<Long> table=new DefaultComparatorTopTable<>(comparator,7);
    for (    Long i : testValues) {
      table.add(i);
    }
    table.sort();
    Iterator<Long> iterator=table.iterator();
    for (int i=0; i < 7; i++) {
      assertTrue(iterator.hasNext());
      long value=iterator.next();
      assertEquals(expectedValues[i],value);
    }
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldHandleWhenNotCompletelyFilledToCapacity(){
    DefaultComparatorTopTable<Long> table=new DefaultComparatorTopTable<>(comparator,20);
    for (    Long i : testValues) {
      table.add(i);
    }
    table.sort();
    Iterator<Long> iterator=table.iterator();
    for (int i=0; i < testValues.length; i++) {
      assertTrue(iterator.hasNext());
      long value=iterator.next();
      assertEquals(expectedValues[i],value);
    }
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldHandleWhenEmpty(){
    DefaultComparatorTopTable<Long> table=new DefaultComparatorTopTable<>(comparator,10);
    table.sort();
    Iterator<Long> iterator=table.iterator();
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldThrowOnInitializeToZeroCapacity(){
    exception.expect(IllegalArgumentException.class);
    new DefaultComparatorTopTable<>(comparator,0);
  }
  @Test public void shouldThrowOnInitializeToNegativeCapacity(){
    exception.expect(IllegalArgumentException.class);
    new DefaultComparatorTopTable<>(comparator,-1);
  }
  @Test public void shouldThrowOnSortNotCalledBeforeIterator(){
    DefaultComparatorTopTable<Long> table=new DefaultComparatorTopTable<>(comparator,5);
    for (    Long i : testValues) {
      table.add(i);
    }
    exception.expect(IllegalStateException.class);
    table.iterator();
  }
}
