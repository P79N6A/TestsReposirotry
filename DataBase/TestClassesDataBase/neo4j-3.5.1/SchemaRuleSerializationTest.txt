public class SchemaRuleSerializationTest extends SchemaRuleTestBase {
  StoreIndexDescriptor indexRegular=forLabel(LABEL_ID,PROPERTY_ID_1).withId(RULE_ID);
  StoreIndexDescriptor indexUnique=uniqueForLabel(LABEL_ID,PROPERTY_ID_1).withIds(RULE_ID_2,RULE_ID);
  StoreIndexDescriptor indexCompositeRegular=forLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withId(RULE_ID);
  StoreIndexDescriptor indexMultiTokenRegular=forSchema(multiToken(new int[]{LABEL_ID,LABEL_ID_2},EntityType.NODE,new int[]{PROPERTY_ID_1,PROPERTY_ID_2})).withId(RULE_ID);
  StoreIndexDescriptor indexCompositeUnique=uniqueForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withIds(RULE_ID_2,RULE_ID);
  StoreIndexDescriptor indexBigComposite=forLabel(LABEL_ID,IntStream.range(1,200).toArray()).withId(RULE_ID);
  StoreIndexDescriptor indexBigMultiToken=forSchema(multiToken(IntStream.range(1,200).toArray(),EntityType.RELATIONSHIP,IntStream.range(1,200).toArray())).withId(RULE_ID);
  ConstraintRule constraintExistsLabel=ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1));
  ConstraintRule constraintUniqueLabel=ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID);
  ConstraintRule constraintNodeKeyLabel=ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID);
  ConstraintRule constraintExistsRelType=ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1));
  ConstraintRule constraintCompositeLabel=ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2));
  ConstraintRule constraintCompositeRelType=ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1,PROPERTY_ID_2));
  @Test public void rulesCreatedWithoutNameMustHaveComputedName(){
    assertThat(indexRegular.getName(),is("index_1"));
    assertThat(indexUnique.getName(),is("index_2"));
    assertThat(indexCompositeRegular.getName(),is("index_1"));
    assertThat(indexCompositeUnique.getName(),is("index_2"));
    assertThat(indexBigComposite.getName(),is("index_1"));
    assertThat(constraintExistsLabel.getName(),is("constraint_1"));
    assertThat(constraintUniqueLabel.getName(),is("constraint_2"));
    assertThat(constraintNodeKeyLabel.getName(),is("constraint_2"));
    assertThat(constraintExistsRelType.getName(),is("constraint_2"));
    assertThat(constraintCompositeLabel.getName(),is("constraint_1"));
    assertThat(constraintCompositeRelType.getName(),is("constraint_2"));
  }
  @Test public void rulesCreatedWithoutNameMustRetainComputedNameAfterDeserialisation() throws Exception {
    assertThat(serialiseAndDeserialise(indexRegular).getName(),is("index_1"));
    assertThat(serialiseAndDeserialise(indexUnique).getName(),is("index_2"));
    assertThat(serialiseAndDeserialise(indexCompositeRegular).getName(),is("index_1"));
    assertThat(serialiseAndDeserialise(indexCompositeUnique).getName(),is("index_2"));
    assertThat(serialiseAndDeserialise(indexBigComposite).getName(),is("index_1"));
    assertThat(serialiseAndDeserialise(constraintExistsLabel).getName(),is("constraint_1"));
    assertThat(serialiseAndDeserialise(constraintUniqueLabel).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(constraintNodeKeyLabel).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(constraintExistsRelType).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(constraintCompositeLabel).getName(),is("constraint_1"));
    assertThat(serialiseAndDeserialise(constraintCompositeRelType).getName(),is("constraint_2"));
  }
  @Test public void rulesCreatedWithNameMustRetainGivenNameAfterDeserialisation() throws Exception {
    String name="custom_rule";
    assertThat(serialiseAndDeserialise(namedForLabel(name,LABEL_ID,PROPERTY_ID_1).withId(RULE_ID)).getName(),is(name));
    assertThat(serialiseAndDeserialise(namedUniqueForLabel(name,LABEL_ID,PROPERTY_ID_1).withIds(RULE_ID_2,RULE_ID)).getName(),is(name));
    assertThat(serialiseAndDeserialise(namedForLabel(name,LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withId(RULE_ID)).getName(),is(name));
    assertThat(serialiseAndDeserialise(namedUniqueForLabel(name,LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withIds(RULE_ID_2,RULE_ID)).getName(),is(name));
    assertThat(serialiseAndDeserialise(namedForLabel(name,LABEL_ID,IntStream.range(1,200).toArray()).withId(RULE_ID)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1),name)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID,name)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID,name)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1),name)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2),name)).getName(),is(name));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1,PROPERTY_ID_2),name)).getName(),is(name));
  }
  @Test public void rulesCreatedWithNullNameMustRetainComputedNameAfterDeserialisation() throws Exception {
    assertThat(serialiseAndDeserialise(forLabel(LABEL_ID,PROPERTY_ID_1).withId(RULE_ID)).getName(),is("index_1"));
    assertThat(serialiseAndDeserialise(uniqueForLabel(LABEL_ID,PROPERTY_ID_1).withIds(RULE_ID_2,RULE_ID)).getName(),is("index_2"));
    assertThat(serialiseAndDeserialise(forLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withId(RULE_ID)).getName(),is("index_1"));
    assertThat(serialiseAndDeserialise(uniqueForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2).withIds(RULE_ID_2,RULE_ID)).getName(),is("index_2"));
    assertThat(serialiseAndDeserialise(forLabel(LABEL_ID,IntStream.range(1,200).toArray()).withId(RULE_ID)).getName(),is("index_1"));
    String name=null;
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1),name)).getName(),is("constraint_1"));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID,name)).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID,name)).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1),name)).getName(),is("constraint_2"));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2),name)).getName(),is("constraint_1"));
    assertThat(serialiseAndDeserialise(ConstraintRule.constraintRule(RULE_ID_2,ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1,PROPERTY_ID_2),name)).getName(),is("constraint_2"));
  }
  @Test(expected=IllegalArgumentException.class) public void indexRuleNameMustNotContainNullCharacter(){
    String name="a\0b";
    namedForLabel(name,LABEL_ID,PROPERTY_ID_1).withId(RULE_ID);
  }
  @Test(expected=IllegalArgumentException.class) public void indexRuleNameMustNotBeTheEmptyString(){
    String name=new String("");
    namedForLabel(name,LABEL_ID,PROPERTY_ID_1).withId(RULE_ID);
  }
  @Test(expected=IllegalArgumentException.class) public void constraintIndexRuleNameMustNotContainNullCharacter(){
    String name="a\0b";
    namedUniqueForLabel(name,LABEL_ID,PROPERTY_ID_1).withIds(RULE_ID,RULE_ID_2);
  }
  @Test(expected=IllegalArgumentException.class) public void constraintIndexRuleNameMustNotBeTheEmptyString(){
    String name=new String("");
    namedUniqueForLabel(name,LABEL_ID,PROPERTY_ID_1).withIds(RULE_ID,RULE_ID_2);
  }
  @Test(expected=IllegalArgumentException.class) public void constraintRuleNameMustNotContainNullCharacter(){
    String name="a\0b";
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1),name);
  }
  @Test(expected=IllegalArgumentException.class) public void constraintRuleNameMustNotBeTheEmptyString(){
    String name=new String("");
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1),name);
  }
  @Test(expected=IllegalArgumentException.class) public void uniquenessConstraintRuleNameMustNotContainNullCharacter(){
    String name="a\0b";
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID_2,name);
  }
  @Test(expected=IllegalArgumentException.class) public void uniquenessConstraintRuleNameMustNotBeTheEmptyString(){
    String name=new String("");
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID_2,name);
  }
  @Test(expected=IllegalArgumentException.class) public void nodeKeyConstraintRuleNameMustNotContainNullCharacter(){
    String name="a\0b";
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID_2,name);
  }
  @Test(expected=IllegalArgumentException.class) public void nodeKeyConstraintRuleNameMustNotBeTheEmptyString(){
    String name=new String("");
    ConstraintRule.constraintRule(RULE_ID,ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1),RULE_ID_2,name);
  }
  @Test public void shouldSerializeAndDeserializeIndexRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeIndexRule(indexRegular);
    assertSerializeAndDeserializeIndexRule(indexUnique);
  }
  @Test public void shouldSerializeAndDeserializeCompositeIndexRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeIndexRule(indexCompositeRegular);
    assertSerializeAndDeserializeIndexRule(indexCompositeUnique);
  }
  @Test public void shouldSerializeAndDeserialize_Big_CompositeIndexRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeIndexRule(indexBigComposite);
  }
  @Test public void shouldSerializeAndDeserializeConstraintRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeConstraintRule(constraintExistsLabel);
    assertSerializeAndDeserializeConstraintRule(constraintUniqueLabel);
    assertSerializeAndDeserializeConstraintRule(constraintNodeKeyLabel);
    assertSerializeAndDeserializeConstraintRule(constraintExistsRelType);
  }
  @Test public void shouldSerializeAndDeserializeCompositeConstraintRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeConstraintRule(constraintCompositeLabel);
    assertSerializeAndDeserializeConstraintRule(constraintCompositeRelType);
  }
  @Test public void shouldSerializeAndDeserializeMultiTokenRules() throws MalformedSchemaRuleException {
    assertSerializeAndDeserializeIndexRule(indexMultiTokenRegular);
    assertSerializeAndDeserializeIndexRule(indexBigMultiToken);
  }
  @Test public void shouldReturnCorrectLengthForIndexRules(){
    assertCorrectLength(indexRegular);
    assertCorrectLength(indexUnique);
    assertCorrectLength(indexCompositeRegular);
    assertCorrectLength(indexCompositeUnique);
    assertCorrectLength(indexBigComposite);
  }
  @Test public void shouldReturnCorrectLengthForConstraintRules(){
    assertCorrectLength(constraintExistsLabel);
  }
  @Test public void shouldParseIndexRule() throws Exception {
    assertParseIndexRule("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA==","index_24");
    assertParseIndexRule("AAACAAEAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMAABAAAAAAAAAAQ=","index_24");
    assertParseIndexRule("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABAAAAAtjdXN0b21fbmFtZQ==","custom_name");
    assertParseIndexRule(addNullByte("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA=="),"index_24");
    assertParseIndexRule(addNullByte(2,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA=="),"index_24");
    assertParseIndexRule(addNullByte(3,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA=="),"index_24");
    assertParseIndexRule(addNullByte(4,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA=="),"index_24");
    assertParseIndexRule(addNullByte(5,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMB9bAAACAAABAAAABA=="),"index_24");
  }
  @Test public void shouldParseUniqueIndexRule() throws Exception {
    assertParseUniqueIndexRule("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc","index_33");
    assertParseUniqueIndexRule("AAAAPQIAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMAABAAAAAAAAA9wAAAAAAAAACw==","index_33");
    assertParseUniqueIndexRule("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPcAAAAC2N1c3RvbV9uYW1l","custom_name");
    assertParseUniqueIndexRule(addNullByte("/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc"),"index_33");
    assertParseUniqueIndexRule(addNullByte(2,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc"),"index_33");
    assertParseUniqueIndexRule(addNullByte(3,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc"),"index_33");
    assertParseUniqueIndexRule(addNullByte(4,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc"),"index_33");
    assertParseUniqueIndexRule(addNullByte(5,"/////wsAAAAOaW5kZXgtcHJvdmlkZXIAAAAEMjUuMCAAAAAAAAAAC1sAAAA9AAEAAAPc"),"index_33");
  }
  @Test public void shouldParseUniqueConstraintRule() throws Exception {
    assertParseUniqueConstraintRule("/////ww+AAAAAAAAAAJbAAAANwABAAAAAw==","constraint_1");
    assertParseUniqueConstraintRule("AAAANwMBAAAAAAAAAAMAAAAAAAAAAg==","constraint_1");
    assertParseUniqueConstraintRule("/////ww+AAAAAAAAAAJbAAAANwABAAAAAwAAAAtjdXN0b21fbmFtZQ==","custom_name");
    assertParseUniqueConstraintRule(addNullByte("/////ww+AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseUniqueConstraintRule(addNullByte(2,"/////ww+AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseUniqueConstraintRule(addNullByte(3,"/////ww+AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseUniqueConstraintRule(addNullByte(4,"/////ww+AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseUniqueConstraintRule(addNullByte(5,"/////ww+AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
  }
  @Test public void shouldParseNodeKeyConstraintRule() throws Exception {
    assertParseNodeKeyConstraintRule("/////ww/AAAAAAAAAAJbAAAANwABAAAAAw==","constraint_1");
    assertParseNodeKeyConstraintRule("/////ww/AAAAAAAAAAJbAAAANwABAAAAAwAAAAtjdXN0b21fbmFtZQ==","custom_name");
    assertParseNodeKeyConstraintRule(addNullByte("/////ww/AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseNodeKeyConstraintRule(addNullByte(2,"/////ww/AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseNodeKeyConstraintRule(addNullByte(3,"/////ww/AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseNodeKeyConstraintRule(addNullByte(4,"/////ww/AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
    assertParseNodeKeyConstraintRule(addNullByte(5,"/////ww/AAAAAAAAAAJbAAAANwABAAAAAw=="),"constraint_1");
  }
  @Test public void shouldParseNodePropertyExistsRule() throws Exception {
    assertParseNodePropertyExistsRule("/////ww9WwAAAC0AAQAAADM=","constraint_87");
    assertParseNodePropertyExistsRule("AAAALQQAAAAz","constraint_87");
    assertParseNodePropertyExistsRule("/////ww9WwAAAC0AAQAAADMAAAALY3VzdG9tX25hbWU=","custom_name");
    assertParseNodePropertyExistsRule(addNullByte("/////ww9WwAAAC0AAQAAADM="),"constraint_87");
    assertParseNodePropertyExistsRule(addNullByte(2,"/////ww9WwAAAC0AAQAAADM="),"constraint_87");
    assertParseNodePropertyExistsRule(addNullByte(3,"/////ww9WwAAAC0AAQAAADM="),"constraint_87");
    assertParseNodePropertyExistsRule(addNullByte(4,"/////ww9WwAAAC0AAQAAADM="),"constraint_87");
    assertParseNodePropertyExistsRule(addNullByte(5,"/////ww9WwAAAC0AAQAAADM="),"constraint_87");
  }
  @Test public void shouldParseRelationshipPropertyExistsRule() throws Exception {
    assertParseRelationshipPropertyExistsRule("/////ww9XAAAIUAAAQAAF+c=","constraint_51");
    assertParseRelationshipPropertyExistsRule("AAAhQAUAABfn","constraint_51");
    assertParseRelationshipPropertyExistsRule("/////ww9XAAAIUAAAQAAF+cAAAALY3VzdG9tX25hbWU=","custom_name");
    assertParseRelationshipPropertyExistsRule(addNullByte("/////ww9XAAAIUAAAQAAF+c="),"constraint_51");
    assertParseRelationshipPropertyExistsRule(addNullByte(2,"/////ww9XAAAIUAAAQAAF+c="),"constraint_51");
    assertParseRelationshipPropertyExistsRule(addNullByte(3,"/////ww9XAAAIUAAAQAAF+c="),"constraint_51");
    assertParseRelationshipPropertyExistsRule(addNullByte(4,"/////ww9XAAAIUAAAQAAF+c="),"constraint_51");
    assertParseRelationshipPropertyExistsRule(addNullByte(5,"/////ww9XAAAIUAAAQAAF+c="),"constraint_51");
  }
  private void assertParseIndexRule(  String serialized,  String name) throws Exception {
    long ruleId=24;
    IndexDescriptor index=forLabel(512,4);
    IndexProviderDescriptor indexProvider=new IndexProviderDescriptor("index-provider","25.0");
    byte[] bytes=decodeBase64(serialized);
    StoreIndexDescriptor deserialized=assertIndexRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized,equalTo(index));
    assertThat(deserialized.schema(),equalTo(index.schema()));
    assertThat(deserialized.providerDescriptor(),equalTo(indexProvider));
    assertThat(deserialized.getName(),is(name));
    assertException(deserialized::getOwningConstraint,IllegalStateException.class);
  }
  private void assertParseUniqueIndexRule(  String serialized,  String name) throws MalformedSchemaRuleException {
    long ruleId=33;
    long constraintId=11;
    IndexDescriptor index=TestIndexDescriptorFactory.uniqueForLabel(61,988);
    IndexProviderDescriptor indexProvider=new IndexProviderDescriptor("index-provider","25.0");
    byte[] bytes=decodeBase64(serialized);
    StoreIndexDescriptor deserialized=assertIndexRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized,equalTo(index));
    assertThat(deserialized.schema(),equalTo(index.schema()));
    assertThat(deserialized.providerDescriptor(),equalTo(indexProvider));
    assertThat(deserialized.getOwningConstraint(),equalTo(constraintId));
    assertThat(deserialized.getName(),is(name));
  }
  private void assertParseUniqueConstraintRule(  String serialized,  String name) throws MalformedSchemaRuleException {
    long ruleId=1;
    int propertyKey=3;
    int labelId=55;
    long ownedIndexId=2;
    UniquenessConstraintDescriptor constraint=ConstraintDescriptorFactory.uniqueForLabel(labelId,propertyKey);
    byte[] bytes=decodeBase64(serialized);
    ConstraintRule deserialized=assertConstraintRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized.getConstraintDescriptor(),equalTo(constraint));
    assertThat(deserialized.schema(),equalTo(constraint.schema()));
    assertThat(deserialized.getOwnedIndex(),equalTo(ownedIndexId));
    assertThat(deserialized.getName(),is(name));
  }
  private void assertParseNodeKeyConstraintRule(  String serialized,  String name) throws MalformedSchemaRuleException {
    long ruleId=1;
    int propertyKey=3;
    int labelId=55;
    long ownedIndexId=2;
    NodeKeyConstraintDescriptor constraint=ConstraintDescriptorFactory.nodeKeyForLabel(labelId,propertyKey);
    byte[] bytes=decodeBase64(serialized);
    ConstraintRule deserialized=assertConstraintRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized.getConstraintDescriptor(),equalTo(constraint));
    assertThat(deserialized.schema(),equalTo(constraint.schema()));
    assertThat(deserialized.getOwnedIndex(),equalTo(ownedIndexId));
    assertThat(deserialized.getName(),is(name));
  }
  private void assertParseNodePropertyExistsRule(  String serialized,  String name) throws Exception {
    long ruleId=87;
    int propertyKey=51;
    int labelId=45;
    ConstraintDescriptor constraint=ConstraintDescriptorFactory.existsForLabel(labelId,propertyKey);
    byte[] bytes=decodeBase64(serialized);
    ConstraintRule deserialized=assertConstraintRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized.getConstraintDescriptor(),equalTo(constraint));
    assertThat(deserialized.schema(),equalTo(constraint.schema()));
    assertException(deserialized::getOwnedIndex,IllegalStateException.class);
    assertThat(deserialized.getName(),is(name));
  }
  private void assertParseRelationshipPropertyExistsRule(  String serialized,  String name) throws Exception {
    long ruleId=51;
    int propertyKey=6119;
    int relTypeId=8512;
    ConstraintDescriptor constraint=ConstraintDescriptorFactory.existsForRelType(relTypeId,propertyKey);
    byte[] bytes=decodeBase64(serialized);
    ConstraintRule deserialized=assertConstraintRule(SchemaRuleSerialization.deserialize(ruleId,ByteBuffer.wrap(bytes)));
    assertThat(deserialized.getId(),equalTo(ruleId));
    assertThat(deserialized.getConstraintDescriptor(),equalTo(constraint));
    assertThat(deserialized.schema(),equalTo(constraint.schema()));
    assertException(deserialized::getOwnedIndex,IllegalStateException.class);
    assertThat(deserialized.getName(),is(name));
  }
  private void assertSerializeAndDeserializeIndexRule(  StoreIndexDescriptor indexRule) throws MalformedSchemaRuleException {
    StoreIndexDescriptor deserialized=assertIndexRule(serialiseAndDeserialise(indexRule));
    assertThat(deserialized.getId(),equalTo(indexRule.getId()));
    assertThat(deserialized,equalTo(indexRule));
    assertThat(deserialized.schema(),equalTo(indexRule.schema()));
    assertThat(deserialized.providerDescriptor(),equalTo(indexRule.providerDescriptor()));
  }
  private StoreIndexDescriptor assertIndexRule(  SchemaRule schemaRule){
    if (!(schemaRule instanceof StoreIndexDescriptor)) {
      fail("Expected IndexRule, but got " + schemaRule.getClass().getSimpleName());
    }
    return (StoreIndexDescriptor)schemaRule;
  }
  private void assertSerializeAndDeserializeConstraintRule(  ConstraintRule constraintRule) throws MalformedSchemaRuleException {
    ConstraintRule deserialized=assertConstraintRule(serialiseAndDeserialise(constraintRule));
    assertThat(deserialized.getId(),equalTo(constraintRule.getId()));
    assertThat(deserialized.getConstraintDescriptor(),equalTo(constraintRule.getConstraintDescriptor()));
    assertThat(deserialized.schema(),equalTo(constraintRule.schema()));
  }
  private SchemaRule serialiseAndDeserialise(  ConstraintRule constraintRule) throws MalformedSchemaRuleException {
    ByteBuffer buffer=ByteBuffer.wrap(SchemaRuleSerialization.serialize(constraintRule));
    return SchemaRuleSerialization.deserialize(constraintRule.getId(),buffer);
  }
  private SchemaRule serialiseAndDeserialise(  StoreIndexDescriptor indexRule) throws MalformedSchemaRuleException {
    ByteBuffer buffer=ByteBuffer.wrap(SchemaRuleSerialization.serialize(indexRule));
    return SchemaRuleSerialization.deserialize(indexRule.getId(),buffer);
  }
  private ConstraintRule assertConstraintRule(  SchemaRule schemaRule){
    if (!(schemaRule instanceof ConstraintRule)) {
      fail("Expected ConstraintRule, but got " + schemaRule.getClass().getSimpleName());
    }
    return (ConstraintRule)schemaRule;
  }
  private void assertCorrectLength(  StoreIndexDescriptor indexRule){
    ByteBuffer buffer=ByteBuffer.wrap(SchemaRuleSerialization.serialize(indexRule));
    assertThat(SchemaRuleSerialization.lengthOf(indexRule),equalTo(buffer.capacity()));
  }
  private void assertCorrectLength(  ConstraintRule constraintRule){
    ByteBuffer buffer=ByteBuffer.wrap(SchemaRuleSerialization.serialize(constraintRule));
    assertThat(SchemaRuleSerialization.lengthOf(constraintRule),equalTo(buffer.capacity()));
  }
  private byte[] decodeBase64(  String serialized){
    return Base64.getDecoder().decode(serialized);
  }
  private String encodeBase64(  byte[] bytes){
    return Base64.getEncoder().encodeToString(bytes);
  }
  /** 
 * Used to append a null-byte to the end of the base64 input and return the resulting base64 output. The reason we need this, is because the rule names are null-terminated strings at the end of the encoded schema rules. By appending a null-byte, we effectively an empty string as the rule name. However, this is not really an allowed rule name, so when we deserialise these rules, we should get the generated rule name back. This can potentially be used in the future in case we don't want to give a rule a name, but still want to put fields after where the name would be. In that case, a single null-byte would suffice to indicate that the name field is (almost) not there.
 */
  private String addNullByte(  String input){
    byte[] inputBytes=decodeBase64(input);
    byte[] outputBytes=Arrays.copyOf(inputBytes,inputBytes.length + 1);
    return encodeBase64(outputBytes);
  }
  private String addNullByte(  int nullByteCountToAdd,  String input){
    if (nullByteCountToAdd < 1) {
      return input;
    }
    if (nullByteCountToAdd == 1) {
      return addNullByte(input);
    }
    return addNullByte(addNullByte(nullByteCountToAdd - 1,input));
  }
}
