class DefaultIndexReaderTest {
  @Test void defaultQueryImplementationMustThrowForUnsupportedIndexOrder(){
    IndexReader indexReader=stubIndexReader();
    String expectedMessage=String.format("This reader only have support for index order %s. Provided index order was %s.",IndexOrder.NONE,IndexOrder.ASCENDING);
    UnsupportedOperationException operationException=assertThrows(UnsupportedOperationException.class,() -> indexReader.query(new SimpleNodeValueClient(),IndexOrder.ASCENDING,false,IndexQuery.exists(1)));
    assertEquals(expectedMessage,operationException.getMessage());
  }
  private static IndexReader stubIndexReader(){
    return new AbstractIndexReader(null){
      @Override public long countIndexedNodes(      long nodeId,      int[] propertyKeyIds,      Value... propertyValues){
        return 0;
      }
      @Override public IndexSampler createSampler(){
        return null;
      }
      @Override public PrimitiveLongResourceIterator query(      IndexQuery... predicates){
        return null;
      }
      @Override public boolean hasFullValuePrecision(      IndexQuery... predicates){
        return false;
      }
      @Override public void close(){
      }
    }
;
  }
}
