class FailedStateIT extends BoltStateMachineStateTestBase {
  @ParameterizedTest @MethodSource("ignoredMessages") void shouldIgnoreMessages(  RequestMessage message) throws Throwable {
    BoltStateMachineV3 machine=getBoltStateMachineInFailedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(message,recorder);
    assertThat(recorder.nextResponse(),wasIgnored());
    assertThat(machine.state(),instanceOf(FailedState.class));
  }
  @Test void shouldMoveToInterruptedOnInterruptSignal() throws Throwable {
    BoltStateMachineV3 machine=getBoltStateMachineInFailedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(InterruptSignal.INSTANCE,recorder);
    assertThat(recorder.nextResponse(),succeeded());
    assertThat(machine.state(),instanceOf(InterruptedState.class));
  }
  @ParameterizedTest @MethodSource("illegalV3Messages") void shouldCloseConnectionOnIllegalV3Messages(  RequestMessage message) throws Throwable {
    shouldCloseConnectionOnIllegalMessages(message);
  }
  private void shouldCloseConnectionOnIllegalMessages(  RequestMessage message) throws InterruptedException, BoltConnectionFatality {
    BoltStateMachineV3 machine=getBoltStateMachineInFailedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    verifyKillsConnection(() -> machine.process(message,recorder));
    assertThat(recorder.nextResponse(),failedWithStatus(Status.Request.Invalid));
    assertNull(machine.state());
  }
  private BoltStateMachineV3 getBoltStateMachineInFailedState() throws BoltConnectionFatality, InterruptedException {
    BoltStateMachineV3 machine=newStateMachine();
    machine.process(newHelloMessage(),nullResponseHandler());
    RunMessage runMessage=mock(RunMessage.class);
    when(runMessage.statement()).thenThrow(new RuntimeException("error here"));
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(runMessage,recorder);
    assertThat(recorder.nextResponse(),failedWithStatus(Status.General.UnknownError));
    assertThat(machine.state(),instanceOf(FailedState.class));
    return machine;
  }
  private static Stream<RequestMessage> ignoredMessages() throws BoltIOException {
    return Stream.of(DiscardAllMessage.INSTANCE,PullAllMessage.INSTANCE,new RunMessage("A cypher query"),COMMIT_MESSAGE,ROLLBACK_MESSAGE);
  }
  private static Stream<RequestMessage> illegalV3Messages() throws BoltIOException {
    return Stream.of(newHelloMessage(),new BeginMessage(),GOODBYE_MESSAGE);
  }
}
