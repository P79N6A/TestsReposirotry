public class SchemaProcedureIT extends KernelIntegrationTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void testEmptyGraph() throws Throwable {
    Procedures procs=procs();
    RawIterator<Object[],ProcedureException> stream=procs.procedureCallRead(procs.procedureGet(procedureName("db","schema")).id(),new Object[0]);
    assertThat(asList(stream),contains(equalTo(new Object[]{new ArrayList<>(),new ArrayList<>()})));
    commit();
  }
  @Test public void testLabelIndex() throws Throwable {
    Transaction transaction=newTransaction(AnonymousContext.writeToken());
    long nodeId=transaction.dataWrite().nodeCreate();
    int labelId=transaction.tokenWrite().labelGetOrCreateForName("Person");
    transaction.dataWrite().nodeAddLabel(nodeId,labelId);
    int propertyIdName=transaction.tokenWrite().propertyKeyGetOrCreateForName("name");
    int propertyIdAge=transaction.tokenWrite().propertyKeyGetOrCreateForName("age");
    transaction.dataWrite().nodeSetProperty(nodeId,propertyIdName,Values.of("Emil"));
    commit();
    SchemaWrite schemaOps=schemaWriteInNewTransaction();
    schemaOps.indexCreate(SchemaDescriptorFactory.forLabel(labelId,propertyIdName));
    schemaOps.uniquePropertyConstraintCreate(SchemaDescriptorFactory.forLabel(labelId,propertyIdAge));
    commit();
    RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName("db","schema")).id(),new Object[0]);
    while (stream.hasNext()) {
      Object[] next=stream.next();
      assertEquals(2,next.length);
      ArrayList<Node> nodes=(ArrayList<Node>)next[0];
      assertEquals(1,nodes.size());
      assertThat(nodes.get(0).getLabels(),contains(equalTo(Label.label("Person"))));
      assertEquals("Person",nodes.get(0).getAllProperties().get("name"));
      assertEquals(Collections.singletonList("name"),nodes.get(0).getAllProperties().get("indexes"));
      assertEquals(Collections.singletonList("CONSTRAINT ON ( person:Person ) ASSERT person.age IS UNIQUE"),nodes.get(0).getAllProperties().get("constraints"));
    }
    commit();
  }
  @Test public void testRelationShip() throws Throwable {
    Transaction transaction=newTransaction(AnonymousContext.writeToken());
    long nodeIdPerson=transaction.dataWrite().nodeCreate();
    int labelIdPerson=transaction.tokenWrite().labelGetOrCreateForName("Person");
    transaction.dataWrite().nodeAddLabel(nodeIdPerson,labelIdPerson);
    long nodeIdLocation=transaction.dataWrite().nodeCreate();
    int labelIdLocation=transaction.tokenWrite().labelGetOrCreateForName("Location");
    transaction.dataWrite().nodeAddLabel(nodeIdLocation,labelIdLocation);
    int relationshipTypeId=transaction.tokenWrite().relationshipTypeGetOrCreateForName("LIVES_IN");
    transaction.dataWrite().relationshipCreate(nodeIdPerson,relationshipTypeId,nodeIdLocation);
    commit();
    RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName("db","schema")).id(),new Object[0]);
    while (stream.hasNext()) {
      Object[] next=stream.next();
      assertEquals(2,next.length);
      LinkedList<Relationship> relationships=(LinkedList<Relationship>)next[1];
      assertEquals(1,relationships.size());
      assertEquals("LIVES_IN",relationships.get(0).getType().name());
      assertThat(relationships.get(0).getStartNode().getLabels(),contains(equalTo(Label.label("Person"))));
      assertThat(relationships.get(0).getEndNode().getLabels(),contains(equalTo(Label.label("Location"))));
    }
    commit();
  }
}
