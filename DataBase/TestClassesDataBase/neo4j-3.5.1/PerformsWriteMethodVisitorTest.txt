public class PerformsWriteMethodVisitorTest {
  @Rule public CompilationRule compilationRule=new CompilationRule();
  private ElementVisitor<Stream<CompilationMessage>,Void> visitor=new PerformsWriteMethodVisitor();
  private ElementTestUtils elementTestUtils;
  @Before public void prepare(){
    elementTestUtils=new ElementTestUtils(compilationRule);
  }
  @Test public void rejects_non_procedure_methods(){
    Element element=elementTestUtils.findMethodElement(PerformsWriteProcedures.class,"missingProcedureAnnotation");
    Stream<CompilationMessage> errors=visitor.visit(element);
    assertThat(errors).hasSize(1).extracting(CompilationMessage::getCategory,CompilationMessage::getElement,CompilationMessage::getContents).contains(tuple(Diagnostic.Kind.ERROR,element,"@PerformsWrites usage error: missing @Procedure annotation on method"));
  }
  @Test public void rejects_conflicted_mode_usage(){
    Element element=elementTestUtils.findMethodElement(PerformsWriteProcedures.class,"conflictingMode");
    Stream<CompilationMessage> errors=visitor.visit(element);
    assertThat(errors).hasSize(1).extracting(CompilationMessage::getCategory,CompilationMessage::getElement,CompilationMessage::getContents).contains(tuple(Diagnostic.Kind.ERROR,element,"@PerformsWrites usage error: cannot use mode other than Mode.DEFAULT"));
  }
  @Test public void validates_regular_procedure(){
    Element element=elementTestUtils.findMethodElement(PerformsWriteProcedures.class,"ok");
    Stream<CompilationMessage> errors=visitor.visit(element);
    assertThat(errors).isEmpty();
  }
}
