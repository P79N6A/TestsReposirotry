class ConfigValueTest {
  @Test void handlesEmptyValue(){
    ConfigValue value=new ConfigValue("name",Optional.empty(),Optional.empty(),Optional.empty(),"description",false,false,false,Optional.empty());
    assertEquals(Optional.empty(),value.value());
    assertEquals("null",value.toString());
    assertFalse(value.deprecated());
    assertEquals(Optional.empty(),value.replacement());
    assertFalse(value.internal());
  }
  @Test void handlesInternal(){
    ConfigValue value=new ConfigValue("name",Optional.empty(),Optional.empty(),Optional.empty(),"description",true,false,false,Optional.empty());
    assertTrue(value.internal());
  }
  @Test void handlesNonEmptyValue(){
    ConfigValue value=new ConfigValue("name",Optional.empty(),Optional.empty(),Optional.of(1),"description",false,false,false,Optional.empty());
    assertEquals(Optional.of(1),value.value());
    assertEquals("1",value.toString());
    assertFalse(value.deprecated());
    assertEquals(Optional.empty(),value.replacement());
    assertFalse(value.internal());
  }
  @Test void handlesDeprecationAndReplacement(){
    ConfigValue value=new ConfigValue("old_name",Optional.empty(),Optional.empty(),Optional.of(1),"description",false,false,true,Optional.of("new_name"));
    assertEquals(Optional.of(1),value.value());
    assertEquals("1",value.toString());
    assertTrue(value.deprecated());
    assertEquals("new_name",value.replacement().get());
    assertFalse(value.internal());
  }
  @Test void handlesValueDescription(){
    ConfigValue value=new ConfigValue("old_name",Optional.empty(),Optional.empty(),Optional.of(1),"a simple integer",false,false,true,Optional.of("new_name"));
    assertEquals(Optional.of(1),value.value());
    assertEquals("1",value.toString());
    assertTrue(value.deprecated());
    assertEquals("new_name",value.replacement().get());
    assertFalse(value.internal());
    assertEquals("a simple integer",value.valueDescription());
  }
  @Test void durationValueIsRepresentedWithUnit(){
    assertEquals("120000ms",valueToString(Duration.ofMinutes(2)));
  }
  @Test void stringValueIsRepresentedAsString(){
    assertEquals("bob",valueToString("bob"));
  }
  @Test void intValueIsRepresentedAsInt(){
    assertEquals("7",valueToString(7));
  }
  @Test void nullIsHandled(){
    assertEquals("null",valueToString(null));
  }
}
