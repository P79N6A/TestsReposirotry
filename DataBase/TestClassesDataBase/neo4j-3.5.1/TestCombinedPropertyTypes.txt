public class TestCombinedPropertyTypes extends AbstractNeo4jTestCase {
  private Node node1;
  @Before public void createInitialNode(){
    node1=getGraphDb().createNode();
  }
  @After public void deleteInitialNode(){
    node1.delete();
  }
  @Override protected boolean restartGraphDbBetweenTests(){
    return true;
  }
  @Test public void testDateTypeOrdinalDayWithPrecedingInLinedLong(){
    testDateTypeWithPrecedingInLinedLong(DateValue.ordinalDate(4800,1));
  }
  @Test public void testDateTypeOrdinalDayWithPrecedingNotInLinedLong(){
    testDateTypeWithPrecedingNotInLinedLong(DateValue.ordinalDate(4800,1));
  }
  @Test public void testLocalTimeWithPrecedingInLinedLong(){
    testDateTypeWithPrecedingInLinedLong(LocalTimeValue.parse("13:45:02"));
  }
  @Test public void testLocalTimeWithPrecedingNotInLinedLong(){
    testDateTypeWithPrecedingNotInLinedLong(LocalTimeValue.parse("13:45:02"));
  }
  @Test public void testDateTimeWithPrecedingInLinedLong(){
    testDateTypeWithPrecedingInLinedLong(DateTimeValue.datetime(DateValue.parse("2018-04-01"),LocalTimeValue.parse("01:02:03"),ZoneId.of("Europe/Stockholm")));
  }
  @Test public void testDateTimeWithPrecedingNotInLinedLong(){
    testDateTypeWithPrecedingNotInLinedLong(DateTimeValue.datetime(DateValue.parse("2018-04-01"),LocalTimeValue.parse("01:02:03"),ZoneId.of("Europe/Stockholm")));
  }
  private void testDateTypeWithPrecedingInLinedLong(  Value value){
    node1.setProperty("l1",255);
    String key="dt";
    node1.setProperty(key,value);
    newTransaction();
    Object property=node1.getProperty(key);
    assertEquals(value.asObjectCopy(),property);
  }
  private void testDateTypeWithPrecedingNotInLinedLong(  Value value){
    node1.setProperty("l1",Long.MAX_VALUE);
    String key="dt";
    node1.setProperty(key,value);
    newTransaction();
    Object property=node1.getProperty(key);
    assertEquals(value.asObjectCopy(),property);
  }
}
