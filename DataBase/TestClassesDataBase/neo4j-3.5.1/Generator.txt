private class Generator {
  private final int maxBatchSize;
  private final long seed;
  private final long startEntityId;
  private RandomValues randomValues;
  private long nextEntityId;
  Generator(  int maxBatchSize,  long seed,  long startEntityId){
    this.startEntityId=startEntityId;
    this.nextEntityId=startEntityId;
    this.maxBatchSize=maxBatchSize;
    this.seed=seed;
    reset();
  }
  private void reset(){
    randomValues=RandomValues.create(new Random(seed));
    nextEntityId=startEntityId;
  }
  List<? extends IndexEntryUpdate<?>> batch(){
    int n=randomValues.nextInt(maxBatchSize) + 1;
    List<IndexEntryUpdate<?>> updates=new ArrayList<>(n);
    for (int i=0; i < n; i++) {
      updates.add(add(nextEntityId++,descriptor,valueGenerator.apply(randomValues)));
    }
    return updates;
  }
}
