public class DatabaseHealthTest {
  @Test public void shouldGenerateDatabasePanicEvents(){
    DatabasePanicEventGenerator generator=mock(DatabasePanicEventGenerator.class);
    DatabaseHealth databaseHealth=new DatabaseHealth(generator,NullLogProvider.getInstance().getLog(DatabaseHealth.class));
    databaseHealth.healed();
    Exception cause=new Exception("My own fault");
    databaseHealth.panic(cause);
    databaseHealth.panic(cause);
    verify(generator,times(1)).generateEvent(TX_MANAGER_NOT_OK,cause);
  }
  @Test public void shouldLogDatabasePanicEvent(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    DatabaseHealth databaseHealth=new DatabaseHealth(mock(DatabasePanicEventGenerator.class),logProvider.getLog(DatabaseHealth.class));
    databaseHealth.healed();
    String message="Listen everybody... panic!";
    Exception exception=new Exception(message);
    databaseHealth.panic(exception);
    logProvider.assertAtLeastOnce(inLog(DatabaseHealth.class).error(is("Database panic: The database has encountered a critical error, " + "and needs to be restarted. Please see database logs for more details."),sameInstance(exception)));
  }
  @Test public void healDatabaseWithoutCriticalErrors(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    DatabaseHealth databaseHealth=new DatabaseHealth(mock(DatabasePanicEventGenerator.class),logProvider.getLog(DatabaseHealth.class));
    assertTrue(databaseHealth.isHealthy());
    databaseHealth.panic(new IOException("Space exception."));
    assertFalse(databaseHealth.isHealthy());
    assertTrue(databaseHealth.healed());
    logProvider.assertContainsLogCallContaining("Database health set to OK");
    logProvider.assertNoMessagesContaining("Database encountered a critical error and can't be healed. Restart required.");
  }
  @Test public void databaseWithCriticalErrorsCanNotBeHealed(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    DatabaseHealth databaseHealth=new DatabaseHealth(mock(DatabasePanicEventGenerator.class),logProvider.getLog(DatabaseHealth.class));
    assertTrue(databaseHealth.isHealthy());
    IOException criticalException=new IOException("Space exception.",new OutOfMemoryError("Out of memory."));
    databaseHealth.panic(criticalException);
    assertFalse(databaseHealth.isHealthy());
    assertFalse(databaseHealth.healed());
    logProvider.assertNoMessagesContaining("Database health set to OK");
    logProvider.assertContainsLogCallContaining("Database encountered a critical error and can't be healed. Restart required.");
  }
}
