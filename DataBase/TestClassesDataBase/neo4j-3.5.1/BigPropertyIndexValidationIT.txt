public class BigPropertyIndexValidationIT {
  @Rule public ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule();
  @Rule public final TestName testName=new TestName();
  @Rule public final ExpectedException expectedException=ExpectedException.none();
  private Label LABEL;
  private String longString;
  private String propertyKey;
  @Before public void setup(){
    LABEL=Label.label("LABEL");
    char[] chars=new char[1 << 15];
    Arrays.fill(chars,'c');
    longString=new String(chars);
    propertyKey="name";
  }
  @Test public void shouldFailTransactionThatIndexesLargePropertyDuringNodeCreation(){
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    IndexDefinition index=Neo4jMatchers.createIndex(db,LABEL,propertyKey);
    expectedException.expect(TransactionFailureException.class);
    try (Transaction tx=db.beginTx()){
      try {
        db.execute("CREATE (n:" + LABEL + " {name: \""+ longString+ "\"})");
        fail("Argument was illegal");
      }
 catch (      IllegalArgumentException e) {
      }
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      ResourceIterator<Node> nodes=db.getAllNodes().iterator();
      assertFalse(nodes.hasNext());
    }
     db.shutdown();
  }
  @Test public void shouldFailTransactionThatIndexesLargePropertyAfterNodeCreation(){
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    IndexDefinition index=Neo4jMatchers.createIndex(db,LABEL,propertyKey);
    expectedException.expect(TransactionFailureException.class);
    try (Transaction tx=db.beginTx()){
      db.execute("CREATE (n:" + LABEL + ")");
      try {
        db.execute("match (n:" + LABEL + ")set n.name= \""+ longString+ "\"");
        fail("Argument was illegal");
      }
 catch (      IllegalArgumentException e) {
      }
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      ResourceIterator<Node> nodes=db.getAllNodes().iterator();
      assertFalse(nodes.hasNext());
    }
     db.shutdown();
  }
  @Test public void shouldFailTransactionThatIndexesLargePropertyOnLabelAdd(){
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    IndexDefinition index=Neo4jMatchers.createIndex(db,LABEL,propertyKey);
    expectedException.expect(TransactionFailureException.class);
    try (Transaction tx=db.beginTx()){
      String otherLabel="SomethingElse";
      db.execute("CREATE (n:" + otherLabel + " {name: \""+ longString+ "\"})");
      try {
        db.execute("match (n:" + otherLabel + ")set n:"+ LABEL);
        fail("Argument was illegal");
      }
 catch (      IllegalArgumentException e) {
      }
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      ResourceIterator<Node> nodes=db.getAllNodes().iterator();
      assertFalse(nodes.hasNext());
    }
     db.shutdown();
  }
}
