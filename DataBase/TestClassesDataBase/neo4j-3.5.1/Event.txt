private abstract static class Event {
static class Initialize extends Event {
    final transient IndexProgressor progressor;
    final int[] keys;
    Initialize(    IndexProgressor progressor,    int[] keys){
      this.progressor=progressor;
      this.keys=keys;
    }
    @Override public String toString(){
      return "INITIALIZE(" + Arrays.toString(keys) + ")";
    }
  }
  static final Event CLOSE=new Event(){
    @Override public String toString(){
      return "CLOSE";
    }
  }
;
  static final Event NEXT=new Event(){
    @Override public String toString(){
      return "NEXT";
    }
  }
;
static class Node extends Event {
    final long reference;
    final Value[] values;
    Node(    long reference,    Value[] values){
      this.reference=reference;
      this.values=values;
    }
    @Override public String toString(){
      return "Node(" + reference + ","+ Arrays.toString(values)+ ")";
    }
  }
  @Override public final boolean equals(  Object other){
    return toString().equals(other.toString());
  }
  @Override public final int hashCode(){
    return toString().hashCode();
  }
}
