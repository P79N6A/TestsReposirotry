abstract class VisitationOrder extends TxStateVisitor.Adapter {
  private final Set<String> visitMethods=new HashSet<>();
  VisitationOrder(  int size){
    for (    Method method : getClass().getDeclaredMethods()) {
      if (method.getName().startsWith("visit")) {
        visitMethods.add(method.getName());
      }
    }
    assertEquals("should implement exactly two visit*(...) methods",2,visitMethods.size());
    do {
      if (random.nextBoolean()) {
        createEarlyState();
      }
 else {
        createLateState();
      }
    }
 while (size-- > 0);
  }
  abstract void createEarlyState();
  abstract void createLateState();
  private boolean late;
  final void visitEarly(){
    if (late) {
      String early="the early visit*-method";
      String late="the late visit*-method";
      for (      StackTraceElement trace : Thread.currentThread().getStackTrace()) {
        if (visitMethods.contains(trace.getMethodName())) {
          early=trace.getMethodName();
          for (          String method : visitMethods) {
            if (!method.equals(early)) {
              late=method;
            }
          }
          break;
        }
      }
      fail(early + "(...) should not be invoked after " + late+ "(...)");
    }
  }
  final void visitLate(){
    late=true;
  }
}
