class ArrayUtilTest {
  @Test void shouldProduceUnionOfTwoArrays(){
    String[] first={"one","three"};
    String[] other={"two","four","five"};
    String[] union=ArrayUtil.union(first,other);
    assertEquals(asSet("one","two","three","four","five"),asSet(union));
  }
  @Test void shouldProduceUnionWhereFirstIsNull(){
    String[] first=null;
    String[] other={"one","two"};
    String[] union=ArrayUtil.union(first,other);
    assertEquals(asSet("one","two"),asSet(union));
  }
  @Test void shouldProduceUnionWhereOtherIsNull(){
    String[] first={"one","two"};
    String[] other=null;
    String[] union=ArrayUtil.union(first,other);
    assertEquals(asSet("one","two"),asSet(union));
  }
  @Test void shouldCheckNullSafeEqual(){
    assertTrue(ArrayUtil.nullSafeEquals(null,null));
    assertFalse(ArrayUtil.nullSafeEquals("1",null));
    assertFalse(ArrayUtil.nullSafeEquals(null,"1"));
    assertTrue(ArrayUtil.nullSafeEquals("1","1"));
  }
  @Test void emptyArray(){
    assertTrue(ArrayUtil.isEmpty(null));
    assertTrue(ArrayUtil.isEmpty(new String[]{}));
    assertFalse(ArrayUtil.isEmpty(new Long[]{1L}));
  }
  @Test void shouldConcatOneAndMany(){
    Integer[] result=ArrayUtil.concat(0,1,2,3,4);
    for (int i=0; i < 5; i++) {
      assertEquals((Integer)i,result[i]);
    }
  }
  @Test void shouldConcatSeveralArrays(){
    Integer[] a={0,1,2};
    Integer[] b={3,4};
    Integer[] c={5,6,7,8};
    Integer[] result=ArrayUtil.concatArrays(a,b,c);
    assertEquals(a.length + b.length + c.length,result.length);
    for (int i=0; i < result.length; i++) {
      assertEquals((Integer)i,result[i]);
    }
  }
  @Test void shouldFindIndexOf(){
    Integer[] numbers=ArrayUtil.concat(0,1,2,3,4,5);
    for (int i=0; i < 6; i++) {
      assertEquals(i,ArrayUtil.indexOf(numbers,i));
    }
  }
  @Test void shouldFindLastOf(){
    Integer[] numbers=new Integer[]{0,100,4,5,6,3};
    assertEquals(3,(int)ArrayUtil.lastOf(numbers));
  }
  @Test void shouldRemoveItems(){
    Integer[] numbers=ArrayUtil.concat(0,1,2,3,4,5);
    Integer[] trimmed=ArrayUtil.without(numbers,2);
    trimmed=ArrayUtil.without(trimmed,5);
    trimmed=ArrayUtil.without(trimmed,0);
    assertEquals(3,trimmed.length);
    assertFalse(ArrayUtil.contains(trimmed,0));
    assertTrue(ArrayUtil.contains(trimmed,1));
    assertFalse(ArrayUtil.contains(trimmed,2));
    assertTrue(ArrayUtil.contains(trimmed,3));
    assertTrue(ArrayUtil.contains(trimmed,4));
    assertFalse(ArrayUtil.contains(trimmed,5));
  }
  @Test void shouldConcatArrays(){
    Integer[] initial=new Integer[]{0,1,2};
    Integer[] all=ArrayUtil.concat(initial,3,4,5);
    assertArrayEquals(new Integer[]{0,1,2,3,4,5},all);
  }
  @Test void shouldReverseEvenCount(){
    Integer[] array=new Integer[]{0,1,2,3,4,5};
    ArrayUtil.reverse(array);
    assertArrayEquals(new Integer[]{5,4,3,2,1,0},array);
  }
  @Test void shouldReverseUnevenCount(){
    Integer[] array=new Integer[]{0,1,2,3,4};
    ArrayUtil.reverse(array);
    assertArrayEquals(new Integer[]{4,3,2,1,0},array);
  }
  @Test void shouldReverseEmptyArray(){
    Integer[] array=new Integer[]{};
    ArrayUtil.reverse(array);
    assertArrayEquals(new Integer[]{},array);
  }
}
