public class UsersIT extends ExclusiveServerTestBase {
  @Rule public TestData<RESTRequestGenerator> gen=TestData.producedThrough(RESTRequestGenerator.PRODUCER);
  private CommunityNeoServer server;
  @Test @Documented("User status\n" + "\n" + "Given that you know the current password, you can ask the server for the user status.") public void user_status() throws JsonParseException, IOException {
    startServerWithConfiguredUser();
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).withHeader(HttpHeaders.AUTHORIZATION,HTTP.basicAuthHeader("neo4j","secret")).get(userURL("neo4j"));
    JsonNode data=JsonHelper.jsonNode(response.entity());
    assertThat(data.get("username").asText(),equalTo("neo4j"));
    assertThat(data.get("password_change_required").asBoolean(),equalTo(false));
    assertThat(data.get("password_change").asText(),equalTo(passwordURL("neo4j")));
  }
  @Test @Documented("User status on first access\n" + "\n" + "On first access, and using the default password, the user status will indicate "+ "that the users password requires changing.") public void user_status_first_access() throws JsonParseException, IOException {
    startServer(true);
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).withHeader(HttpHeaders.AUTHORIZATION,HTTP.basicAuthHeader("neo4j","neo4j")).get(userURL("neo4j"));
    JsonNode data=JsonHelper.jsonNode(response.entity());
    assertThat(data.get("username").asText(),equalTo("neo4j"));
    assertThat(data.get("password_change_required").asBoolean(),equalTo(true));
    assertThat(data.get("password_change").asText(),equalTo(passwordURL("neo4j")));
  }
  @Test @Documented("Changing the user password\n" + "\n" + "Given that you know the current password, you can ask the server to change a users password. "+ "You can choose any\n"+ "password you like, as long as it is different from the current password.") public void change_password() throws IOException {
    startServer(true);
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).withHeader(HttpHeaders.AUTHORIZATION,HTTP.basicAuthHeader("neo4j","neo4j")).payload(quotedJson("{'password':'secret'}")).post(server.baseUri().resolve("/user/neo4j/password").toString());
    assertEquals(200,HTTP.withBasicAuth("neo4j","secret").GET(dataURL()).status());
    assertEquals(401,HTTP.withBasicAuth("neo4j","neo4j").POST(dataURL()).status());
  }
  @Test public void cantChangeToCurrentPassword() throws Exception {
    startServer(true);
    HTTP.Response res=HTTP.withBasicAuth("neo4j","neo4j").POST(server.baseUri().resolve("/user/neo4j/password").toString(),HTTP.RawPayload.quotedJson("{'password':'neo4j'}"));
    assertThat(res.status(),equalTo(422));
  }
  @After public void cleanup(){
    if (server != null) {
      server.stop();
    }
  }
  public void startServer(  boolean authEnabled) throws IOException {
    server=CommunityServerBuilder.serverOnRandomPorts().withProperty(GraphDatabaseSettings.auth_enabled.name(),Boolean.toString(authEnabled)).build();
    server.start();
  }
  public void startServerWithConfiguredUser() throws IOException {
    startServer(true);
    HTTP.Response post=HTTP.withBasicAuth("neo4j","neo4j").POST(server.baseUri().resolve("/user/neo4j/password").toString(),HTTP.RawPayload.quotedJson("{'password':'secret'}"));
    assertEquals(200,post.status());
  }
  private String dataURL(){
    return server.baseUri().resolve("db/data/").toString();
  }
  private String userURL(  String username){
    return server.baseUri().resolve("user/" + username).toString();
  }
  private String passwordURL(  String username){
    return server.baseUri().resolve("user/" + username + "/password").toString();
  }
  private String quotedJson(  String singleQuoted){
    return singleQuoted.replaceAll("'","\"");
  }
}
