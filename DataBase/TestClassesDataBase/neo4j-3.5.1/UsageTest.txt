class UsageTest {
  @Mock private Consumer<String> out;
  @BeforeEach void setUp(){
    MockitoAnnotations.initMocks(this);
  }
  @Test void shouldPrintUsageForACommand(){
    AdminCommand.Provider commandProvider=mockCommand("bam","A summary",AdminCommandSection.general());
    AdminCommand.Provider[] commands=new AdminCommand.Provider[]{commandProvider};
    final Usage usage=new Usage("neo4j-admin",new CannedLocator(commands));
    usage.printUsageForCommand(commandProvider,out);
    InOrder ordered=inOrder(out);
    ordered.verify(out).accept("usage: neo4j-admin bam ");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("environment variables:");
    ordered.verify(out).accept("    NEO4J_CONF    Path to directory which contains neo4j.conf.");
    ordered.verify(out).accept("    NEO4J_DEBUG   Set to anything to enable debug output.");
    ordered.verify(out).accept("    NEO4J_HOME    Neo4j home directory.");
    ordered.verify(out).accept("    HEAP_SIZE     Set JVM maximum heap size during command execution.");
    ordered.verify(out).accept("                  Takes a number and a unit, for example 512m.");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("description");
  }
  @Test void shouldPrintUsageWithConfiguration(){
    AdminCommand.Provider[] commands=new AdminCommand.Provider[]{mockCommand("bam","A summary",AdminCommandSection.general())};
    final Usage usage=new Usage("neo4j-admin",new CannedLocator(commands));
    usage.print(out);
    InOrder ordered=inOrder(out);
    ordered.verify(out).accept("usage: neo4j-admin <command>");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("Manage your Neo4j instance.");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("environment variables:");
    ordered.verify(out).accept("    NEO4J_CONF    Path to directory which contains neo4j.conf.");
    ordered.verify(out).accept("    NEO4J_DEBUG   Set to anything to enable debug output.");
    ordered.verify(out).accept("    NEO4J_HOME    Neo4j home directory.");
    ordered.verify(out).accept("    HEAP_SIZE     Set JVM maximum heap size during command execution.");
    ordered.verify(out).accept("                  Takes a number and a unit, for example 512m.");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("available commands:");
    ordered.verify(out).accept("General");
    ordered.verify(out).accept("    bam");
    ordered.verify(out).accept("        A summary");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("Use neo4j-admin help <command> for more details.");
    ordered.verifyNoMoreInteractions();
  }
  @Test void commandsUnderSameAdminCommandSectionPrintableSectionShouldAppearTogether(){
    AdminCommand.Provider[] commands=new AdminCommand.Provider[]{mockCommand("first-command","first-command",AdminCommandSection.general()),mockCommand("second-command","second-command",new TestGeneralSection())};
    final Usage usage=new Usage("neo4j-admin",new CannedLocator(commands));
    usage.print(out);
    InOrder ordered=inOrder(out);
    ordered.verify(out).accept("usage: neo4j-admin <command>");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("Manage your Neo4j instance.");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("environment variables:");
    ordered.verify(out).accept("    NEO4J_CONF    Path to directory which contains neo4j.conf.");
    ordered.verify(out).accept("    NEO4J_DEBUG   Set to anything to enable debug output.");
    ordered.verify(out).accept("    NEO4J_HOME    Neo4j home directory.");
    ordered.verify(out).accept("    HEAP_SIZE     Set JVM maximum heap size during command execution.");
    ordered.verify(out).accept("                  Takes a number and a unit, for example 512m.");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("available commands:");
    ordered.verify(out).accept("General");
    ordered.verify(out).accept("    first-command");
    ordered.verify(out).accept("        first-command");
    ordered.verify(out).accept("    second-command");
    ordered.verify(out).accept("        second-command");
    ordered.verify(out).accept("");
    ordered.verify(out).accept("Use neo4j-admin help <command> for more details.");
    ordered.verifyNoMoreInteractions();
  }
private static class TestGeneralSection extends AdminCommandSection {
    @Override @Nonnull public String printable(){
      return "General";
    }
  }
  private static AdminCommand.Provider mockCommand(  String name,  String summary,  AdminCommandSection section){
    AdminCommand.Provider commandProvider=mock(AdminCommand.Provider.class);
    when(commandProvider.name()).thenReturn(name);
    when(commandProvider.summary()).thenReturn(summary);
    when(commandProvider.allArguments()).thenReturn(Arguments.NO_ARGS);
    when(commandProvider.possibleArguments()).thenReturn(Collections.singletonList(Arguments.NO_ARGS));
    when(commandProvider.description()).thenReturn("description");
    when(commandProvider.commandSection()).thenReturn(section);
    return commandProvider;
  }
}
