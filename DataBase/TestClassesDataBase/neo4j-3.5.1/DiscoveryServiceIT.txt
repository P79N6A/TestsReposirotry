public class DiscoveryServiceIT extends AbstractRestFunctionalTestBase {
  @Test public void shouldRespondWith200WhenRetrievingDiscoveryDocument(){
    JaxRsResponse response=getDiscoveryDocument();
    assertEquals(200,response.getStatus());
    response.close();
  }
  @Test public void shouldGetContentLengthHeaderWhenRetrievingDiscoveryDocument(){
    JaxRsResponse response=getDiscoveryDocument();
    assertNotNull(response.getHeaders().get("Content-Length"));
    response.close();
  }
  @Test public void shouldHaveJsonMediaTypeWhenRetrievingDiscoveryDocument(){
    JaxRsResponse response=getDiscoveryDocument();
    assertThat(response.getType().toString(),containsString(APPLICATION_JSON));
    response.close();
  }
  @Test public void shouldHaveJsonDataInResponse() throws Exception {
    JaxRsResponse response=getDiscoveryDocument();
    Map<String,Object> map=JsonHelper.jsonToMap(response.getEntity());
    String managementKey="management";
    assertTrue(map.containsKey(managementKey));
    assertNotNull(map.get(managementKey));
    String dataKey="data";
    assertTrue(map.containsKey(dataKey));
    assertNotNull(map.get(dataKey));
    response.close();
  }
  @Test public void shouldRedirectOnHtmlRequest(){
    Client nonRedirectingClient=Client.create();
    nonRedirectingClient.setFollowRedirects(false);
    JaxRsResponse clientResponse=new RestRequest(null,nonRedirectingClient).get(server().baseUri().toString(),TEXT_HTML_TYPE);
    assertEquals(303,clientResponse.getStatus());
  }
  private JaxRsResponse getDiscoveryDocument(){
    return new RestRequest(server().baseUri()).get();
  }
}
