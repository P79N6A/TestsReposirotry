static class DirectLog extends AbstractLog {
  final Log log;
  DirectLog(  Log log){
    this.log=log;
  }
  @Override public boolean isDebugEnabled(){
    throw new UnsupportedOperationException();
  }
  @Override public void bulk(  @Nonnull Consumer<Log> consumer){
    throw new UnsupportedOperationException();
  }
  @Nonnull @Override public Logger debugLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        log.debug(message);
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        log.debug(message,throwable);
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        log.debug(format,arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger infoLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        log.info(message);
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        log.info(message,throwable);
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        log.info(format,arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger warnLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        log.warn(message);
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        log.warn(message,throwable);
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        log.warn(format,arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger errorLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        log.error(message);
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        log.error(message,throwable);
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        log.error(format,arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
}
