public class ErrorReporterTest {
  @Test public void onlyDatabaseErrorsAreLogged(){
    AssertableLogProvider userLog=new AssertableLogProvider();
    AssertableLogProvider internalLog=new AssertableLogProvider();
    ErrorReporter reporter=newErrorReporter(userLog,internalLog);
    for (    Status.Classification classification : Status.Classification.values()) {
      if (classification != Status.Classification.DatabaseError) {
        Status.Code code=newStatusCode(classification);
        Neo4jError error=Neo4jError.from(() -> code,"Database error");
        reporter.report(error);
        userLog.assertNoLoggingOccurred();
        internalLog.assertNoLoggingOccurred();
      }
    }
  }
  @Test public void databaseErrorShouldLogFullMessageInDebugLogAndHelpfulPointerInUserLog(){
    AssertableLogProvider userLog=new AssertableLogProvider();
    AssertableLogProvider internalLog=new AssertableLogProvider();
    ErrorReporter reporter=newErrorReporter(userLog,internalLog);
    Neo4jError error=Neo4jError.fatalFrom(new TestDatabaseError());
    UUID reference=error.reference();
    reporter.report(error);
    userLog.assertContainsLogCallContaining("Client triggered an unexpected error");
    userLog.assertContainsLogCallContaining(reference.toString());
    userLog.assertContainsLogCallContaining("Database error");
    internalLog.assertContainsLogCallContaining(reference.toString());
    internalLog.assertContainsLogCallContaining("Database error");
  }
  private static ErrorReporter newErrorReporter(  LogProvider userLog,  LogProvider internalLog){
    return new ErrorReporter(userLog.getLog("userLog"),internalLog.getLog("internalLog"));
  }
  private static Status.Code newStatusCode(  Status.Classification classification){
    Status.Code code=mock(Status.Code.class);
    when(code.classification()).thenReturn(classification);
    return code;
  }
private static class TestDatabaseError extends RuntimeException implements Status.HasStatus {
    TestDatabaseError(){
      super("Database error");
    }
    @Override public Status status(){
      return () -> newStatusCode(Status.Classification.DatabaseError);
    }
  }
}
