public class DropBrokenUniquenessConstraintIT {
  private final Label label=Label.label("Label");
  private final String key="key";
  @Rule public final DatabaseRule db=new EmbeddedDatabaseRule();
  @Test public void shouldDropUniquenessConstraintWithBackingIndexNotInUse(){
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(label).assertPropertyIsUnique(key).create();
      tx.success();
    }
     RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    SchemaStore schemaStore=storageEngine.testAccessNeoStores().getSchemaStore();
    SchemaRule indexRule=single(filter(rule -> rule instanceof StoreIndexDescriptor,schemaStore.loadAllSchemaRules()));
    setSchemaRecordNotInUse(schemaStore,indexRule.getId());
    storageEngine.loadSchemaCache();
    try (Transaction tx=db.beginTx()){
      single(db.schema().getConstraints(label).iterator()).drop();
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      assertFalse(db.schema().getConstraints().iterator().hasNext());
      assertFalse(db.schema().getIndexes().iterator().hasNext());
    }
   }
  @Test public void shouldDropUniquenessConstraintWithBackingIndexHavingNoOwner() throws Exception {
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(label).assertPropertyIsUnique(key).create();
      tx.success();
    }
     RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    SchemaStore schemaStore=storageEngine.testAccessNeoStores().getSchemaStore();
    SchemaRule indexRule=single(filter(rule -> rule instanceof StoreIndexDescriptor,schemaStore.loadAllSchemaRules()));
    setOwnerNull(schemaStore,(StoreIndexDescriptor)indexRule);
    storageEngine.loadSchemaCache();
    try (Transaction tx=db.beginTx()){
      single(db.schema().getConstraints(label).iterator()).drop();
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      assertFalse(db.schema().getConstraints().iterator().hasNext());
      assertFalse(db.schema().getIndexes().iterator().hasNext());
    }
   }
  @Test public void shouldDropUniquenessConstraintWhereConstraintRecordIsMissing() throws Exception {
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(label).assertPropertyIsUnique(key).create();
      tx.success();
    }
     RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    SchemaStore schemaStore=storageEngine.testAccessNeoStores().getSchemaStore();
    SchemaRule indexRule=single(filter(rule -> rule instanceof ConstraintRule,schemaStore.loadAllSchemaRules()));
    setSchemaRecordNotInUse(schemaStore,indexRule.getId());
    storageEngine.loadSchemaCache();
    try (Transaction tx=db.beginTx()){
      db.schema().getConstraints(label).forEach(ConstraintDefinition::drop);
      db.schema().getIndexes(label).forEach(IndexDefinition::drop);
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      assertFalse(db.schema().getConstraints().iterator().hasNext());
      assertFalse(db.schema().getIndexes().iterator().hasNext());
    }
   }
  @Test public void shouldDropUniquenessConstraintWhereConstraintRecordIsMissingAndIndexHasNoOwner() throws Exception {
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(label).assertPropertyIsUnique(key).create();
      tx.success();
    }
     RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    SchemaStore schemaStore=storageEngine.testAccessNeoStores().getSchemaStore();
    SchemaRule constraintRule=single(filter(rule -> rule instanceof ConstraintRule,schemaStore.loadAllSchemaRules()));
    setSchemaRecordNotInUse(schemaStore,constraintRule.getId());
    SchemaRule indexRule=single(filter(rule -> rule instanceof StoreIndexDescriptor,schemaStore.loadAllSchemaRules()));
    setOwnerNull(schemaStore,(StoreIndexDescriptor)indexRule);
    storageEngine.loadSchemaCache();
    try (Transaction tx=db.beginTx()){
      db.schema().getConstraints(label).forEach(ConstraintDefinition::drop);
      db.schema().getIndexes(label).forEach(IndexDefinition::drop);
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      assertFalse(db.schema().getConstraints().iterator().hasNext());
      assertFalse(db.schema().getIndexes().iterator().hasNext());
    }
   }
  private void setOwnerNull(  SchemaStore schemaStore,  StoreIndexDescriptor rule){
    rule=rule.withOwningConstraint(null);
    List<DynamicRecord> dynamicRecords=schemaStore.allocateFrom(rule);
    for (    DynamicRecord record : dynamicRecords) {
      schemaStore.updateRecord(record);
    }
  }
  private void setSchemaRecordNotInUse(  SchemaStore schemaStore,  long id){
    DynamicRecord record=schemaStore.newRecord();
    record.setId(id);
    record.setInUse(false);
    schemaStore.updateRecord(record);
  }
}
