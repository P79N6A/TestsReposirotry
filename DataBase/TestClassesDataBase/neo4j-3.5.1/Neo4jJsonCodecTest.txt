public class Neo4jJsonCodecTest extends TxStateCheckerTestSupport {
  private Neo4jJsonCodec jsonCodec;
  private JsonGenerator jsonGenerator;
  @Before public void init(){
    jsonCodec=new Neo4jJsonCodec(TPTPMC);
    jsonGenerator=mock(JsonGenerator.class);
  }
  @Test public void testPropertyContainerWriting() throws IOException {
    PropertyContainer propertyContainer=mock(PropertyContainer.class);
    when(propertyContainer.getAllProperties()).thenThrow(RuntimeException.class);
    boolean exceptionThrown=false;
    try {
      jsonCodec.writeValue(jsonGenerator,propertyContainer);
    }
 catch (    IllegalArgumentException e) {
      verify(jsonGenerator,never()).writeEndObject();
      exceptionThrown=true;
    }
    assertTrue(exceptionThrown);
  }
  @Test public void testNodeWriting() throws IOException {
    PropertyContainer node=mock(Node.class);
    when(node.getAllProperties()).thenThrow(RuntimeException.class);
    try {
      jsonCodec.writeValue(jsonGenerator,node);
    }
 catch (    RuntimeException e) {
    }
    verify(jsonGenerator,times(1)).writeEndObject();
  }
  @Test public void testRelationshipWriting() throws IOException {
    PropertyContainer relationship=mock(Relationship.class);
    when(relationship.getAllProperties()).thenThrow(RuntimeException.class);
    try {
      jsonCodec.writeValue(jsonGenerator,relationship);
    }
 catch (    Exception e) {
    }
    verify(jsonGenerator,times(1)).writeEndObject();
  }
  @Test public void testPathWriting() throws IOException {
    Path path=mock(Path.class);
    PropertyContainer propertyContainer=mock(PropertyContainer.class);
    when(propertyContainer.getAllProperties()).thenThrow(RuntimeException.class);
    when(path.iterator()).thenReturn(Arrays.asList(propertyContainer).listIterator());
    try {
      jsonCodec.writeValue(jsonGenerator,path);
    }
 catch (    Exception ignored) {
    }
    verify(jsonGenerator,times(1)).writeEndArray();
  }
  @Test public void testIteratorWriting() throws IOException {
    PropertyContainer propertyContainer=mock(PropertyContainer.class);
    when(propertyContainer.getAllProperties()).thenThrow(RuntimeException.class);
    try {
      jsonCodec.writeValue(jsonGenerator,Arrays.asList(propertyContainer));
    }
 catch (    Exception ignored) {
    }
    verify(jsonGenerator,times(1)).writeEndArray();
  }
  @Test public void testByteArrayWriting() throws IOException {
    doThrow(new RuntimeException()).when(jsonGenerator).writeNumber(anyInt());
    byte[] byteArray=new byte[]{1,2,3};
    try {
      jsonCodec.writeValue(jsonGenerator,byteArray);
    }
 catch (    Exception ignored) {
    }
    verify(jsonGenerator,times(1)).writeEndArray();
  }
  @Test public void testMapWriting() throws IOException {
    doThrow(new RuntimeException()).when(jsonGenerator).writeFieldName(anyString());
    try {
      jsonCodec.writeValue(jsonGenerator,new HashMap<String,String>());
    }
 catch (    Exception ignored) {
    }
    verify(jsonGenerator,times(1)).writeEndObject();
  }
  @Test public void shouldWriteAMapContainingNullAsKeysAndValues() throws IOException {
    Map<String,String> map=new HashMap<>();
    map.put(null,null);
    jsonCodec.writeValue(jsonGenerator,map);
    verify(jsonGenerator,times(1)).writeFieldName("null");
  }
  @Test public void testGeographicPointWriting() throws IOException {
    Point value=SpatialMocks.mockPoint(12.3,45.6,mockWGS84());
    jsonCodec.writeValue(jsonGenerator,value);
    verify(jsonGenerator,times(3)).writeEndObject();
  }
  @Test public void testGeographic3DPointWriting() throws IOException {
    Point value=SpatialMocks.mockPoint(12.3,45.6,78.9,mockWGS84_3D());
    jsonCodec.writeValue(jsonGenerator,value);
    verify(jsonGenerator,times(3)).writeEndObject();
  }
  @Test public void testCartesianPointWriting() throws IOException {
    Point value=SpatialMocks.mockPoint(123.0,456.0,mockCartesian());
    jsonCodec.writeValue(jsonGenerator,value);
    verify(jsonGenerator,times(3)).writeEndObject();
  }
  @Test public void testCartesian3DPointWriting() throws IOException {
    Point value=SpatialMocks.mockPoint(123.0,456.0,789.0,mockCartesian_3D());
    jsonCodec.writeValue(jsonGenerator,value);
    verify(jsonGenerator,times(3)).writeEndObject();
  }
  @Test public void testGeometryWriting() throws IOException {
    List<Coordinate> points=new ArrayList<>();
    points.add(new Coordinate(1,2));
    points.add(new Coordinate(2,3));
    Geometry value=SpatialMocks.mockGeometry("LineString",points,mockCartesian());
    jsonCodec.writeValue(jsonGenerator,value);
    verify(jsonGenerator,times(3)).writeEndObject();
  }
  @Test public void testGeometryCrsStructureCartesian() throws IOException {
    verifyCRSStructure(mockCartesian());
  }
  @Test public void testGeometryCrsStructureCartesian_3D() throws IOException {
    verifyCRSStructure(mockCartesian_3D());
  }
  @Test public void testGeometryCrsStructureWGS84() throws IOException {
    verifyCRSStructure(mockWGS84());
  }
  @Test public void testGeometryCrsStructureWGS84_3D() throws IOException {
    verifyCRSStructure(mockWGS84_3D());
  }
  private void verifyCRSStructure(  CRS crs) throws IOException {
    jsonCodec.writeValue(jsonGenerator,crs);
    InOrder inOrder=Mockito.inOrder(jsonGenerator);
    inOrder.verify(jsonGenerator).writeStartObject();
    inOrder.verify(jsonGenerator).writeFieldName("srid");
    inOrder.verify(jsonGenerator).writeNumber(crs.getCode());
    inOrder.verify(jsonGenerator).writeFieldName("name");
    inOrder.verify(jsonGenerator).writeString(crs.getType());
    inOrder.verify(jsonGenerator).writeFieldName("type");
    inOrder.verify(jsonGenerator).writeString("link");
    inOrder.verify(jsonGenerator).writeFieldName("properties");
    inOrder.verify(jsonGenerator).writeStartObject();
    inOrder.verify(jsonGenerator).writeFieldName("href");
    inOrder.verify(jsonGenerator).writeString(startsWith(crs.getHref()));
    inOrder.verify(jsonGenerator).writeFieldName("type");
    inOrder.verify(jsonGenerator).writeString("ogcwkt");
    inOrder.verify(jsonGenerator,times(2)).writeEndObject();
  }
}
