public class KernelTransactionSecurityContextTest extends KernelTransactionTestBase {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void shouldNotAllowReadsInNoneMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.none());
    exception.expect(AuthorizationViolationException.class);
    tx.dataRead();
  }
  @Test public void shouldNotAllowTokenReadsInNoneMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.none());
    exception.expect(AuthorizationViolationException.class);
    tx.tokenRead();
  }
  @Test public void shouldNotAllowWritesInNoneMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.none());
    exception.expect(AuthorizationViolationException.class);
    tx.dataWrite();
  }
  @Test public void shouldNotAllowSchemaWritesInNoneMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.none());
    exception.expect(AuthorizationViolationException.class);
    tx.schemaWrite();
  }
  @Test public void shouldAllowReadsInReadMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.read());
    Read reads=tx.dataRead();
    assertNotNull(reads);
  }
  @Test public void shouldNotAllowWriteAccessInReadMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.read());
    exception.expect(AuthorizationViolationException.class);
    tx.dataWrite();
  }
  @Test public void shouldNotAllowSchemaWriteAccessInReadMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.read());
    exception.expect(AuthorizationViolationException.class);
    tx.schemaWrite();
  }
  @Test public void shouldNotAllowReadAccessInWriteOnlyMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.writeOnly());
    exception.expect(AuthorizationViolationException.class);
    tx.dataRead();
  }
  @Test public void shouldNotAllowTokenReadAccessInWriteOnlyMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.writeOnly());
    exception.expect(AuthorizationViolationException.class);
    tx.tokenRead();
  }
  @Test public void shouldAllowWriteAccessInWriteOnlyMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.writeOnly());
    Write writes=tx.dataWrite();
    assertNotNull(writes);
  }
  @Test public void shouldNotAllowSchemaWriteAccessInWriteOnlyMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.writeOnly());
    exception.expect(AuthorizationViolationException.class);
    tx.schemaWrite();
  }
  @Test public void shouldAllowReadsInWriteMode(){
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.write());
    Read reads=tx.dataRead();
    assertNotNull(reads);
  }
  @Test public void shouldAllowWritesInWriteMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.write());
    Write writes=tx.dataWrite();
    assertNotNull(writes);
  }
  @Test public void shouldNotAllowSchemaWriteAccessInWriteMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AnonymousContext.write());
    exception.expect(AuthorizationViolationException.class);
    tx.schemaWrite();
  }
  @Test public void shouldAllowReadsInFullMode(){
    KernelTransactionImplementation tx=newTransaction(AUTH_DISABLED);
    Read reads=tx.dataRead();
    assertNotNull(reads);
  }
  @Test public void shouldAllowWritesInFullMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AUTH_DISABLED);
    Write writes=tx.dataWrite();
    assertNotNull(writes);
  }
  @Test public void shouldAllowSchemaWriteAccessInFullMode() throws Throwable {
    KernelTransactionImplementation tx=newTransaction(AUTH_DISABLED);
    SchemaWrite writes=tx.schemaWrite();
    assertNotNull(writes);
  }
}
