class LargePageListIT {
  @Test void veryLargePageListsMustBeFullyAccessible(){
    int pageSize=(int)ByteUnit.kibiBytes(8);
    long pageCacheSize=ByteUnit.gibiBytes(513) + pageSize;
    int pages=Math.toIntExact(pageCacheSize / pageSize);
    MemoryAllocator mman=MemoryAllocator.createAllocator("2 GiB",GlobalMemoryTracker.INSTANCE);
    SwapperSet swappers=new SwapperSet();
    long victimPage=VictimPageReference.getVictimPage(pageSize,GlobalMemoryTracker.INSTANCE);
    PageList pageList=new PageList(pages,pageSize,mman,swappers,victimPage,Long.BYTES);
    assertThat(pageList.getPageCount(),is(pages));
    IntStream.range(0,pages / 32).parallel().forEach(id -> verifyPageMetaDataIsAccessible(pageList,id * 32));
    IntStream.range(pages - 2000,pages).parallel().forEach(id -> verifyPageMetaDataIsAccessible(pageList,id));
  }
  private static void verifyPageMetaDataIsAccessible(  PageList pageList,  int id){
    long ref=pageList.deref(id);
    pageList.incrementUsage(ref);
    pageList.incrementUsage(ref);
    assertFalse(pageList.decrementUsage(ref));
    assertTrue(pageList.decrementUsage(ref));
    assertEquals(id,pageList.toId(ref));
  }
}
