public class WritableIndexReferenceFactoryTest {
  private final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final CleanupRule cleanupRule=new CleanupRule();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(testDirectory).around(cleanupRule).around(fileSystemRule);
  private static final String INDEX_NAME="testIndex";
  private LuceneDataSource.LuceneFilesystemFacade filesystemFacade=LuceneDataSource.LuceneFilesystemFacade.MEMORY;
  private IndexIdentifier indexIdentifier=new IndexIdentifier(IndexEntityType.Node,INDEX_NAME);
  private IndexConfigStore indexStore;
  @Before public void setUp(){
    setupIndexInfrastructure();
  }
  @Test public void createWritableIndexReference() throws Exception {
    WritableIndexReferenceFactory indexReferenceFactory=createFactory();
    IndexReference indexReference=createIndexReference(indexReferenceFactory);
    assertNotNull("Index should have writer.",indexReference.getWriter());
  }
  @Test public void refreshNotChangedWritableIndexReference() throws Exception {
    WritableIndexReferenceFactory indexReferenceFactory=createFactory();
    IndexReference indexReference=createIndexReference(indexReferenceFactory);
    IndexReference refreshedInstance=indexReferenceFactory.refresh(indexReference);
    assertSame(indexReference,refreshedInstance);
  }
  @Test public void refreshChangedWritableIndexReference() throws Exception {
    WritableIndexReferenceFactory indexReferenceFactory=createFactory();
    IndexReference indexReference=createIndexReference(indexReferenceFactory);
    writeSomething(indexReference);
    IndexReference refreshedIndexReference=indexReferenceFactory.refresh(indexReference);
    cleanupRule.add(refreshedIndexReference);
    assertNotSame("Should return new refreshed index reference.",indexReference,refreshedIndexReference);
  }
  private static void writeSomething(  IndexReference indexReference) throws IOException {
    IndexWriter writer=indexReference.getWriter();
    writer.addDocument(new Document());
    writer.commit();
  }
  private IndexReference createIndexReference(  WritableIndexReferenceFactory indexReferenceFactory) throws Exception {
    IndexReference indexReference=indexReferenceFactory.createIndexReference(indexIdentifier);
    cleanupRule.add(indexReference);
    return indexReference;
  }
  private WritableIndexReferenceFactory createFactory(){
    return new WritableIndexReferenceFactory(filesystemFacade,testDirectory.databaseLayout().file("index"),new IndexTypeCache(indexStore));
  }
  private void setupIndexInfrastructure(){
    indexStore=new IndexConfigStore(testDirectory.databaseLayout(),fileSystemRule.get());
    indexStore.set(Node.class,INDEX_NAME,MapUtil.stringMap(IndexManager.PROVIDER,"lucene","type","fulltext"));
  }
}
