public class NeoServerPortConflictIT extends ExclusiveServerTestBase {
  @Test public void shouldComplainIfServerPortIsAlreadyTaken() throws IOException {
    try (ServerSocket socket=new ServerSocket(0,0,InetAddress.getLocalHost())){
      ListenSocketAddress contestedAddress=new ListenSocketAddress(socket.getInetAddress().getHostName(),socket.getLocalPort());
      AssertableLogProvider logProvider=new AssertableLogProvider();
      CommunityNeoServer server=CommunityServerBuilder.server(logProvider).onAddress(contestedAddress).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
      try {
        server.start();
        fail("Should have reported failure to start");
      }
 catch (      ServerStartupException e) {
        assertThat(e.getMessage(),containsString("Starting Neo4j failed"));
      }
      logProvider.assertAtLeastOnce(AssertableLogProvider.inLog(containsString("CommunityNeoServer")).error("Failed to start Neo4j on %s: %s",contestedAddress,format("Address %s is already in use, cannot bind to it.",contestedAddress)));
      server.stop();
    }
   }
  @Test public void shouldComplainIfServerHTTPSPortIsAlreadyTaken() throws IOException {
    try (ServerSocket httpsSocket=new ServerSocket(0,0,InetAddress.getLocalHost())){
      ListenSocketAddress unContestedAddress=new ListenSocketAddress(httpsSocket.getInetAddress().getHostName(),0);
      ListenSocketAddress httpsAddress=new ListenSocketAddress(httpsSocket.getInetAddress().getHostName(),httpsSocket.getLocalPort());
      AssertableLogProvider logProvider=new AssertableLogProvider();
      CommunityNeoServer server=CommunityServerBuilder.server(logProvider).onAddress(unContestedAddress).onHttpsAddress(httpsAddress).withHttpsEnabled().usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
      try {
        server.start();
        fail("Should have reported failure to start");
      }
 catch (      ServerStartupException e) {
        assertThat(e.getMessage(),containsString("Starting Neo4j failed"));
      }
      logProvider.assertAtLeastOnce(AssertableLogProvider.inLog(containsString("CommunityNeoServer")).error("Failed to start Neo4j on %s: %s",unContestedAddress,format("At least one of the addresses %s or %s is already in use, cannot bind to it.",unContestedAddress,httpsAddress)));
      server.stop();
    }
   }
}
