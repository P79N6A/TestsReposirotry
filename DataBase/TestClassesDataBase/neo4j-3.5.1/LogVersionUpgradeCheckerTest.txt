public class LogVersionUpgradeCheckerTest {
  private LogTailScanner tailScanner=mock(LogTailScanner.class);
  @Rule public ExpectedException expect=ExpectedException.none();
  @Test public void noThrowWhenLatestVersionAndUpgradeIsNotAllowed(){
    when(tailScanner.getTailInformation()).thenReturn(new OnlyVersionTailInformation(LogEntryVersion.CURRENT));
    LogVersionUpgradeChecker.check(tailScanner,Config.defaults(GraphDatabaseSettings.allow_upgrade,"false"));
  }
  @Test public void throwWhenVersionIsOlderAndUpgradeIsNotAllowed(){
    when(tailScanner.getTailInformation()).thenReturn(new OnlyVersionTailInformation(LogEntryVersion.V2_3));
    expect.expect(UpgradeNotAllowedByConfigurationException.class);
    LogVersionUpgradeChecker.check(tailScanner,Config.defaults(GraphDatabaseSettings.allow_upgrade,"false"));
  }
  @Test public void stillAcceptLatestVersionWhenUpgradeIsAllowed(){
    when(tailScanner.getTailInformation()).thenReturn(new OnlyVersionTailInformation(LogEntryVersion.CURRENT));
    LogVersionUpgradeChecker.check(tailScanner,Config.defaults(GraphDatabaseSettings.allow_upgrade,"true"));
  }
  @Test public void acceptOlderLogsWhenUpgradeIsAllowed(){
    when(tailScanner.getTailInformation()).thenReturn(new OnlyVersionTailInformation(LogEntryVersion.V2_3));
    LogVersionUpgradeChecker.check(tailScanner,Config.defaults(GraphDatabaseSettings.allow_upgrade,"true"));
  }
private static class OnlyVersionTailInformation extends LogTailScanner.LogTailInformation {
    OnlyVersionTailInformation(    LogEntryVersion logEntryVersion){
      super(false,0,0,0,logEntryVersion);
    }
  }
}
