@SuppressWarnings("Duplicates") public abstract class ExplicitIndexCursorWritesTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  private static final String INDEX_NAME="foo";
  private static final String KEY="bar";
  private static final String VALUE="this is it";
  @Test public void shouldCreateExplicitNodeIndexEagerly() throws Exception {
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      HashMap<String,String> config=new HashMap<>();
      config.put("type","exact");
      config.put("provider","lucene");
      indexWrite.nodeExplicitIndexCreate(INDEX_NAME,config);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      assertTrue(graphDb.index().existsForNodes(INDEX_NAME));
      ctx.success();
    }
   }
  @Test public void shouldCreateExplicitNodeIndexLazily() throws Exception {
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      HashMap<String,String> config=new HashMap<>();
      config.put("type","exact");
      config.put("provider","lucene");
      indexWrite.nodeExplicitIndexCreateLazily(INDEX_NAME,config);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      assertTrue(graphDb.index().existsForNodes(INDEX_NAME));
      ctx.success();
    }
   }
  @Test public void shouldAddNodeToExplicitIndex() throws Exception {
    long nodeId;
    try (Transaction tx=beginTransaction()){
      nodeId=tx.dataWrite().nodeCreate();
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeAddToExplicitIndex(INDEX_NAME,nodeId,KEY,VALUE);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Node> hits=graphDb.index().forNodes(INDEX_NAME).get(KEY,VALUE);
      assertThat(hits.next().getId(),equalTo(nodeId));
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldRemoveNodeFromExplicitIndex() throws Exception {
    long nodeId=addNodeToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeRemoveFromExplicitIndex(INDEX_NAME,nodeId);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Node> hits=graphDb.index().forNodes(INDEX_NAME).get(KEY,VALUE);
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldHandleRemoveNodeFromExplicitIndexTwice() throws Exception {
    long nodeId=addNodeToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeRemoveFromExplicitIndex(INDEX_NAME,nodeId);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeRemoveFromExplicitIndex(INDEX_NAME,nodeId);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Node> hits=graphDb.index().forNodes(INDEX_NAME).get(KEY,VALUE);
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldRemoveNonExistingNodeFromExplicitIndex() throws Exception {
    long nodeId=addNodeToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeRemoveFromExplicitIndex(INDEX_NAME,nodeId + 1);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Node> hits=graphDb.index().forNodes(INDEX_NAME).get(KEY,VALUE);
      assertThat(hits.next().getId(),equalTo(nodeId));
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldCreateExplicitRelationshipIndexEagerly() throws Exception {
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      HashMap<String,String> config=new HashMap<>();
      config.put("type","exact");
      config.put("provider","lucene");
      indexWrite.relationshipExplicitIndexCreate(INDEX_NAME,config);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      assertTrue(graphDb.index().existsForRelationships(INDEX_NAME));
      ctx.success();
    }
   }
  @Test public void shouldCreateExplicitRelationshipIndexLazily() throws Exception {
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      HashMap<String,String> config=new HashMap<>();
      config.put("type","exact");
      config.put("provider","lucene");
      indexWrite.relationshipExplicitIndexCreateLazily(INDEX_NAME,config);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      assertTrue(graphDb.index().existsForRelationships(INDEX_NAME));
      ctx.success();
    }
   }
  @Test public void shouldCreateExplicitIndexTwice() throws Exception {
    HashMap<String,String> config=new HashMap<>();
    config.put("type","exact");
    config.put("provider","lucene");
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeExplicitIndexCreateLazily(INDEX_NAME,config);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.nodeExplicitIndexCreateLazily(INDEX_NAME,config);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      assertTrue(graphDb.index().existsForNodes(INDEX_NAME));
      ctx.success();
    }
   }
  @Test public void shouldAddRelationshipToExplicitIndex() throws Exception {
    long relId;
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      relId=graphDb.createNode().createRelationshipTo(graphDb.createNode(),RelationshipType.withName("R")).getId();
      ctx.success();
    }
     try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.relationshipAddToExplicitIndex(INDEX_NAME,relId,KEY,VALUE);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Relationship> hits=graphDb.index().forRelationships(INDEX_NAME).get(KEY,VALUE);
      assertThat(hits.next().getId(),equalTo(relId));
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldRemoveRelationshipFromExplicitIndex() throws Exception {
    long relId=addRelationshipToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.relationshipRemoveFromExplicitIndex(INDEX_NAME,relId);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Node> hits=graphDb.index().forNodes(INDEX_NAME).get(KEY,VALUE);
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldHandleRemoveRelationshipFromExplicitIndexTwice() throws Exception {
    long relId=addRelationshipToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.relationshipRemoveFromExplicitIndex(INDEX_NAME,relId);
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.relationshipRemoveFromExplicitIndex(INDEX_NAME,relId);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Relationship> hits=graphDb.index().forRelationships(INDEX_NAME).get(KEY,VALUE);
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  @Test public void shouldRemoveNonExistingRelationshipFromExplicitIndex() throws Exception {
    long relId=addRelationshipToExplicitIndex();
    try (Transaction tx=beginTransaction()){
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      indexWrite.relationshipRemoveFromExplicitIndex(INDEX_NAME,relId + 1);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      IndexHits<Relationship> hits=graphDb.index().forRelationships(INDEX_NAME).get(KEY,VALUE);
      assertThat(hits.next().getId(),equalTo(relId));
      assertFalse(hits.hasNext());
      hits.close();
      ctx.success();
    }
   }
  private long addNodeToExplicitIndex() throws Exception {
    long nodeId;
    try (Transaction tx=beginTransaction()){
      nodeId=tx.dataWrite().nodeCreate();
      ExplicitIndexWrite indexWrite=tx.indexWrite();
      HashMap<String,String> config=new HashMap<>();
      config.put("type","exact");
      config.put("provider","lucene");
      indexWrite.nodeExplicitIndexCreateLazily(INDEX_NAME,config);
      indexWrite.nodeAddToExplicitIndex(INDEX_NAME,nodeId,KEY,VALUE);
      tx.success();
    }
     return nodeId;
  }
  private long addRelationshipToExplicitIndex(){
    long relId;
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      Relationship rel=graphDb.createNode().createRelationshipTo(graphDb.createNode(),RelationshipType.withName("R"));
      relId=rel.getId();
      graphDb.index().forRelationships(INDEX_NAME).add(rel,KEY,VALUE);
      ctx.success();
    }
     return relId;
  }
}
