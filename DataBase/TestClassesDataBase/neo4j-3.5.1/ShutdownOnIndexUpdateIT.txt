public class ShutdownOnIndexUpdateIT {
  @Rule public DatabaseRule database=new ImpermanentDatabaseRule();
  private static final String UNIQUE_PROPERTY_NAME="uniquePropertyName";
  private static final AtomicLong indexProvider=new AtomicLong();
  private static Label constraintIndexLabel=Label.label("ConstraintIndexLabel");
  @Test public void shutdownWhileFinishingTransactionWithIndexUpdates(){
    createConstraint(database);
    waitIndexesOnline(database);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(constraintIndexLabel);
      node.setProperty(UNIQUE_PROPERTY_NAME,indexProvider.getAndIncrement());
      DependencyResolver dependencyResolver=database.getDependencyResolver();
      NeoStoreDataSource dataSource=dependencyResolver.resolveDependency(NeoStoreDataSource.class);
      LifeSupport dataSourceLife=dataSource.getLife();
      TransactionCloseListener closeListener=new TransactionCloseListener(transaction);
      dataSourceLife.addLifecycleListener(closeListener);
      dataSource.stop();
      assertTrue("Transaction should be closed and no exception should be thrown.",closeListener.isTransactionClosed());
    }
   }
  private void waitIndexesOnline(  GraphDatabaseService database){
    try (Transaction ignored=database.beginTx()){
      database.schema().awaitIndexesOnline(5,TimeUnit.MINUTES);
    }
   }
  private void createConstraint(  GraphDatabaseService database){
    try (Transaction transaction=database.beginTx()){
      Schema schema=database.schema();
      schema.constraintFor(constraintIndexLabel).assertPropertyIsUnique(UNIQUE_PROPERTY_NAME).create();
      transaction.success();
    }
   }
private static class TransactionCloseListener implements LifecycleListener {
    private final Transaction transaction;
    private boolean transactionClosed;
    TransactionCloseListener(    Transaction transaction){
      this.transaction=transaction;
    }
    @Override public void notifyStatusChanged(    Object instance,    LifecycleStatus from,    LifecycleStatus to){
      if ((LifecycleStatus.STOPPED == to) && (instance instanceof RecordStorageEngine)) {
        transaction.success();
        transaction.close();
        transactionClosed=true;
      }
    }
    boolean isTransactionClosed(){
      return transactionClosed;
    }
  }
}
