@SuppressWarnings("Duplicates") public abstract class NodeWriteTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  @Rule public ExpectedException exception=ExpectedException.none();
  private static final String propertyKey="prop";
  private static final String labelName="Town";
  @Test public void shouldCreateNode() throws Exception {
    long node;
    try (Transaction tx=beginTransaction()){
      node=tx.dataWrite().nodeCreate();
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      assertEquals(node,graphDb.getNodeById(node).getId());
    }
   }
  @Test public void shouldRollbackOnFailure() throws Exception {
    long node;
    try (Transaction tx=beginTransaction()){
      node=tx.dataWrite().nodeCreate();
      tx.failure();
    }
     try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      graphDb.getNodeById(node);
      fail("There should be no node");
    }
 catch (    NotFoundException e) {
    }
  }
  @Test public void shouldRemoveNode() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      tx.dataWrite().nodeDelete(node);
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      try {
        graphDb.getNodeById(node);
        fail("Did not remove node");
      }
 catch (      NotFoundException e) {
      }
    }
   }
  @Test public void shouldNotRemoveNodeThatDoesNotExist() throws Exception {
    long node=0;
    try (Transaction tx=beginTransaction()){
      assertFalse(tx.dataWrite().nodeDelete(node));
      tx.failure();
    }
     try (Transaction tx=beginTransaction()){
      assertFalse(tx.dataWrite().nodeDelete(node));
      tx.success();
    }
   }
  @Test public void shouldAddLabelNode() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      int labelId=tx.token().labelGetOrCreateForName(labelName);
      assertTrue(tx.dataWrite().nodeAddLabel(node,labelId));
      tx.success();
    }
     assertLabels(node,labelName);
  }
  @Test public void shouldAddLabelNodeOnce() throws Exception {
    long node=createNodeWithLabel(labelName);
    try (Transaction tx=beginTransaction()){
      int labelId=tx.token().labelGetOrCreateForName(labelName);
      assertFalse(tx.dataWrite().nodeAddLabel(node,labelId));
      tx.success();
    }
     assertLabels(node,labelName);
  }
  @Test public void shouldRemoveLabel() throws Exception {
    long nodeId=createNodeWithLabel(labelName);
    try (Transaction tx=beginTransaction()){
      int labelId=tx.token().labelGetOrCreateForName(labelName);
      assertTrue(tx.dataWrite().nodeRemoveLabel(nodeId,labelId));
      tx.success();
    }
     assertNoLabels(nodeId);
  }
  @Test public void shouldNotAddLabelToNonExistingNode() throws Exception {
    long node=1337L;
    try (Transaction tx=beginTransaction()){
      int labelId=tx.token().labelGetOrCreateForName(labelName);
      exception.expect(KernelException.class);
      tx.dataWrite().nodeAddLabel(node,labelId);
    }
   }
  @Test public void shouldRemoveLabelOnce() throws Exception {
    int labelId;
    long nodeId=createNodeWithLabel(labelName);
    try (Transaction tx=beginTransaction()){
      labelId=tx.token().labelGetOrCreateForName(labelName);
      assertTrue(tx.dataWrite().nodeRemoveLabel(nodeId,labelId));
      tx.success();
    }
     try (Transaction tx=beginTransaction()){
      labelId=tx.token().labelGetOrCreateForName(labelName);
      assertFalse(tx.dataWrite().nodeRemoveLabel(nodeId,labelId));
      tx.success();
    }
     assertNoLabels(nodeId);
  }
  @Test public void shouldAddPropertyToNode() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeSetProperty(node,token,stringValue("hello")),equalTo(NO_VALUE));
      tx.success();
    }
     assertProperty(node,propertyKey,"hello");
  }
  @Test public void shouldRollbackSetNodeProperty() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeSetProperty(node,token,stringValue("hello")),equalTo(NO_VALUE));
      tx.failure();
    }
     assertNoProperty(node,propertyKey);
  }
  @Test public void shouldThrowWhenSettingPropertyOnDeletedNode() throws Exception {
    long node=createNode();
    deleteNode(node);
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      tx.dataWrite().nodeSetProperty(node,token,stringValue("hello"));
      fail("Expected EntityNotFoundException");
    }
 catch (    EntityNotFoundException e) {
    }
  }
  @Test public void shouldUpdatePropertyToNode() throws Exception {
    long node=createNodeWithProperty(propertyKey,42);
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeSetProperty(node,token,stringValue("hello")),equalTo(intValue(42)));
      tx.success();
    }
     assertProperty(node,propertyKey,"hello");
  }
  @Test public void shouldRemovePropertyFromNode() throws Exception {
    long node=createNodeWithProperty(propertyKey,42);
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeRemoveProperty(node,token),equalTo(intValue(42)));
      tx.success();
    }
     assertNoProperty(node,propertyKey);
  }
  @Test public void shouldRemoveNonExistingPropertyFromNode() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeRemoveProperty(node,token),equalTo(NO_VALUE));
      tx.success();
    }
     assertNoProperty(node,propertyKey);
  }
  @Test public void shouldRemovePropertyFromNodeTwice() throws Exception {
    long node=createNodeWithProperty(propertyKey,42);
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeRemoveProperty(node,token),equalTo(intValue(42)));
      assertThat(tx.dataWrite().nodeRemoveProperty(node,token),equalTo(NO_VALUE));
      tx.success();
    }
     assertNoProperty(node,propertyKey);
  }
  @Test public void shouldUpdatePropertyToNodeInTransaction() throws Exception {
    long node=createNode();
    try (Transaction tx=beginTransaction()){
      int token=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeSetProperty(node,token,stringValue("hello")),equalTo(NO_VALUE));
      assertThat(tx.dataWrite().nodeSetProperty(node,token,stringValue("world")),equalTo(stringValue("hello")));
      assertThat(tx.dataWrite().nodeSetProperty(node,token,intValue(1337)),equalTo(stringValue("world")));
      tx.success();
    }
     assertProperty(node,propertyKey,1337);
  }
  @Test public void shouldRemoveReSetAndTwiceRemovePropertyOnNode() throws Exception {
    long node=createNodeWithProperty(propertyKey,"bar");
    try (Transaction tx=beginTransaction()){
      int prop=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      tx.dataWrite().nodeRemoveProperty(node,prop);
      tx.dataWrite().nodeSetProperty(node,prop,Values.of("bar"));
      tx.dataWrite().nodeRemoveProperty(node,prop);
      tx.dataWrite().nodeRemoveProperty(node,prop);
      tx.success();
    }
     assertNoProperty(node,propertyKey);
  }
  @Test public void shouldNotWriteWhenSettingPropertyToSameValue() throws Exception {
    Value theValue=stringValue("The Value");
    long nodeId=createNodeWithProperty(propertyKey,theValue.asObject());
    Transaction tx=beginTransaction();
    int property=tx.token().propertyKeyGetOrCreateForName(propertyKey);
    assertThat(tx.dataWrite().nodeSetProperty(nodeId,property,theValue),equalTo(theValue));
    tx.success();
    assertThat(tx.closeTransaction(),equalTo(Transaction.READ_ONLY));
  }
  @Test public void shouldSetAndReadLargeByteArrayPropertyToNode() throws Exception {
    int prop;
    long node=createNode();
    Value largeByteArray=Values.of(new byte[100_000]);
    try (Transaction tx=beginTransaction()){
      prop=tx.token().propertyKeyGetOrCreateForName(propertyKey);
      assertThat(tx.dataWrite().nodeSetProperty(node,prop,largeByteArray),equalTo(NO_VALUE));
      tx.success();
    }
     try (Transaction tx=beginTransaction();NodeCursor nodeCursor=tx.cursors().allocateNodeCursor();PropertyCursor propertyCursor=tx.cursors().allocatePropertyCursor()){
      tx.dataRead().singleNode(node,nodeCursor);
      assertTrue(nodeCursor.next());
      nodeCursor.properties(propertyCursor);
      assertTrue(propertyCursor.next());
      assertEquals(propertyCursor.propertyKey(),prop);
      assertThat(propertyCursor.propertyValue(),equalTo(largeByteArray));
    }
   }
  private long createNode(){
    long node;
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      node=graphDb.createNode().getId();
      ctx.success();
    }
     return node;
  }
  private void deleteNode(  long node){
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      graphDb.getNodeById(node).delete();
      ctx.success();
    }
   }
  private long createNodeWithLabel(  String labelName){
    long node;
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      node=graphDb.createNode(label(labelName)).getId();
      ctx.success();
    }
     return node;
  }
  private long createNodeWithProperty(  String propertyKey,  Object value){
    Node node;
    try (org.neo4j.graphdb.Transaction ctx=graphDb.beginTx()){
      node=graphDb.createNode();
      node.setProperty(propertyKey,value);
      ctx.success();
    }
     return node.getId();
  }
  private void assertNoLabels(  long nodeId){
    try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      assertThat(graphDb.getNodeById(nodeId).getLabels(),equalTo(Iterables.empty()));
    }
   }
  private void assertLabels(  long nodeId,  String label){
    try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      assertThat(graphDb.getNodeById(nodeId).getLabels(),containsInAnyOrder(label(label)));
    }
   }
  private void assertNoProperty(  long node,  String propertyKey){
    try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      assertFalse(graphDb.getNodeById(node).hasProperty(propertyKey));
    }
   }
  private void assertProperty(  long node,  String propertyKey,  Object value){
    try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
      assertThat(graphDb.getNodeById(node).getProperty(propertyKey),equalTo(value));
    }
   }
}
