public class TestStoreAccess {
  @Rule public final EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  @Rule public final PageCacheRule pageCacheRule=new PageCacheRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final Monitors monitors=new Monitors();
  @Test public void openingThroughStoreAccessShouldNotTriggerRecovery() throws Throwable {
    try (EphemeralFileSystemAbstraction snapshot=produceUncleanStore()){
      assertTrue("Store should be unclean",isUnclean(snapshot));
      PageCache pageCache=pageCacheRule.getPageCache(snapshot);
      new StoreAccess(snapshot,pageCache,testDirectory.databaseLayout(),Config.defaults()).initialize().close();
      assertTrue("Store should be unclean",isUnclean(snapshot));
    }
   }
  private EphemeralFileSystemAbstraction produceUncleanStore(){
    GraphDatabaseService db=new TestGraphDatabaseFactory().setFileSystem(fs.get()).newImpermanentDatabase(testDirectory.databaseDir());
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     EphemeralFileSystemAbstraction snapshot=fs.get().snapshot();
    db.shutdown();
    return snapshot;
  }
  private boolean isUnclean(  FileSystemAbstraction fileSystem) throws IOException {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystem);
    RecoveryRequiredChecker requiredChecker=new RecoveryRequiredChecker(fileSystem,pageCache,Config.defaults(),monitors);
    return requiredChecker.isRecoveryRequiredAt(testDirectory.databaseLayout());
  }
}
