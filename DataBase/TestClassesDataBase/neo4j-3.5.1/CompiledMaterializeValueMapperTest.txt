public class CompiledMaterializeValueMapperTest {
  private EmbeddedProxySPI spi=new EmbeddedProxySPI(){
    @Override public RelationshipProxy newRelationshipProxy(    long id){
      return new RelationshipProxy(this,id);
    }
    @Override public NodeProxy newNodeProxy(    long nodeId){
      return new NodeProxy(this,nodeId);
    }
    @Override public Statement statement(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public KernelTransaction kernelTransaction(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public GraphDatabaseService getGraphDatabase(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public void assertInUnterminatedTransaction(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public void failTransaction(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public RelationshipProxy newRelationshipProxy(    long id,    long startNodeId,    int typeId,    long endNodeId){
      throw new IllegalStateException("Should not be used");
    }
    @Override public GraphPropertiesProxy newGraphPropertiesProxy(){
      throw new IllegalStateException("Should not be used");
    }
    @Override public RelationshipType getRelationshipTypeById(    int type){
      throw new IllegalStateException("Should not be used");
    }
  }
;
  NodeValue nodeProxyValue=ValueUtils.fromNodeProxy(new NodeProxy(spi,1L));
  NodeValue directNodeValue=VirtualValues.nodeValue(2L,Values.stringArray(),VirtualValues.emptyMap());
  NodeReference nodeReference=VirtualValues.node(1L);
  RelationshipValue relationshipProxyValue=ValueUtils.fromRelationshipProxy(new RelationshipProxy(spi,11L));
  RelationshipValue directRelationshipValue=VirtualValues.relationshipValue(12L,nodeProxyValue,directNodeValue,Values.stringValue("TYPE"),VirtualValues.emptyMap());
  RelationshipReference relationshipReference=VirtualValues.relationship(11L);
  @Test public void shouldNotTouchValuesThatDoNotNeedConversion(){
    ListValue nodeList=VirtualValues.list(nodeProxyValue,directNodeValue);
    ListValue relationshipList=VirtualValues.list(relationshipProxyValue,directRelationshipValue);
    MapValue nodeMap=VirtualValues.map(new String[]{"a","b"},new AnyValue[]{nodeProxyValue,directNodeValue});
    MapValue relationshipMap=VirtualValues.map(new String[]{"a","b"},new AnyValue[]{relationshipProxyValue,directRelationshipValue});
    verifyDoesNotTouchValue(nodeProxyValue);
    verifyDoesNotTouchValue(relationshipProxyValue);
    verifyDoesNotTouchValue(directNodeValue);
    verifyDoesNotTouchValue(directRelationshipValue);
    verifyDoesNotTouchValue(nodeList);
    verifyDoesNotTouchValue(relationshipList);
    verifyDoesNotTouchValue(nodeMap);
    verifyDoesNotTouchValue(relationshipMap);
    verifyDoesNotTouchValue(Values.booleanValue(false));
    verifyDoesNotTouchValue(Values.stringValue("Hello"));
    verifyDoesNotTouchValue(Values.longValue(42L));
  }
  @Test public void shouldConvertValuesWithVirtualEntities(){
    ListValue nodeList=VirtualValues.list(nodeProxyValue,directNodeValue,nodeReference);
    ListValue expectedNodeList=VirtualValues.list(nodeProxyValue,directNodeValue,nodeProxyValue);
    ListValue relationshipList=VirtualValues.list(relationshipProxyValue,directRelationshipValue,relationshipReference);
    ListValue expectedRelationshipList=VirtualValues.list(relationshipProxyValue,directRelationshipValue,relationshipProxyValue);
    MapValue nodeMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{nodeProxyValue,directNodeValue,nodeReference});
    MapValue expectedNodeMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{nodeProxyValue,directNodeValue,nodeProxyValue});
    MapValue relationshipMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{relationshipProxyValue,directRelationshipValue,relationshipReference});
    MapValue expectedRelationshipMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{relationshipProxyValue,directRelationshipValue,relationshipProxyValue});
    ListValue nestedNodeList=VirtualValues.list(nodeList,nodeMap,nodeReference);
    ListValue expectedNestedNodeList=VirtualValues.list(expectedNodeList,expectedNodeMap,nodeProxyValue);
    ListValue nestedRelationshipList=VirtualValues.list(relationshipList,relationshipMap,relationshipReference);
    ListValue expectedNestedRelationshipList=VirtualValues.list(expectedRelationshipList,expectedRelationshipMap,relationshipProxyValue);
    MapValue nestedNodeMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{nodeList,nodeMap,nestedNodeList});
    MapValue expectedNestedNodeMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{expectedNodeList,expectedNodeMap,expectedNestedNodeList});
    MapValue nestedRelationshipMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{relationshipList,relationshipMap,nestedRelationshipList});
    MapValue expectedNestedRelationshipMap=VirtualValues.map(new String[]{"a","b","c"},new AnyValue[]{expectedRelationshipList,expectedRelationshipMap,expectedNestedRelationshipList});
    verifyConvertsValue(expectedNodeList,nodeList);
    verifyConvertsValue(expectedRelationshipList,relationshipList);
    verifyConvertsValue(expectedNodeMap,nodeMap);
    verifyConvertsValue(expectedRelationshipMap,relationshipMap);
    verifyConvertsValue(expectedNestedNodeList,nestedNodeList);
    verifyConvertsValue(expectedNestedRelationshipList,nestedRelationshipList);
    verifyConvertsValue(expectedNestedNodeMap,nestedNodeMap);
    verifyConvertsValue(expectedNestedRelationshipMap,nestedRelationshipMap);
  }
  private void verifyConvertsValue(  AnyValue expected,  AnyValue valueToTest){
    AnyValue actual=CompiledMaterializeValueMapper.mapAnyValue(spi,valueToTest);
    assertEquals(expected,actual);
  }
  private void verifyDoesNotTouchValue(  AnyValue value){
    AnyValue mappedValue=CompiledMaterializeValueMapper.mapAnyValue(spi,value);
    assertSame(value,mappedValue);
  }
}
