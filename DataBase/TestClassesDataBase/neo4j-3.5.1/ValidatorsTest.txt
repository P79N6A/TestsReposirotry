public class ValidatorsTest {
  @Rule public final TestDirectory directory=TestDirectory.testDirectory();
  @Test public void shouldFindFilesByRegex() throws Exception {
    existenceOfFile("abc");
    existenceOfFile("bcd");
    assertValid("abc");
    assertValid("bcd");
    assertValid("ab.");
    assertValid(".*bc");
    assertNotValid("abcd");
    assertNotValid(".*de.*");
  }
  @Test public void shouldValidateInList(){
    try {
      Validators.inList(new String[]{"foo","bar","baz"}).validate("qux");
      fail("Should have failed to find item in list.");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),containsString("'qux' found but must be one of: [foo, bar, baz]."));
    }
    try {
      Validators.inList(new String[]{"foo","bar","baz"}).validate("bar");
    }
 catch (    IllegalArgumentException e) {
      fail("Should have found item in list.");
    }
  }
  private void assertNotValid(  String string){
    try {
      validate(string);
      fail("Should have failed");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  private void assertValid(  String fileByName){
    validate(fileByName);
  }
  private void validate(  String fileByName){
    Validators.REGEX_FILE_EXISTS.validate(directory.file(fileByName));
  }
  private void existenceOfFile(  String name) throws IOException {
    directory.file(name).createNewFile();
  }
}
