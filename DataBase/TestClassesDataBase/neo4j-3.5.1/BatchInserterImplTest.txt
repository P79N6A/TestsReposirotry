public class BatchInserterImplTest {
  private final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final ExpectedException expected=ExpectedException.none();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(testDirectory).around(expected).around(fileSystemRule);
  @Test public void testHonorsPassedInParams() throws Exception {
    BatchInserter inserter=BatchInserters.inserter(testDirectory.databaseDir(),fileSystemRule.get(),stringMap(GraphDatabaseSettings.pagecache_memory.name(),"280K"));
    NeoStores neoStores=ReflectionUtil.getPrivateField(inserter,"neoStores",NeoStores.class);
    PageCache pageCache=ReflectionUtil.getPrivateField(neoStores,"pageCache",PageCache.class);
    inserter.shutdown();
    long mappedMemoryTotalSize=MuninnPageCache.memoryRequiredForPages(pageCache.maxCachedPages());
    assertThat("memory mapped config is active",mappedMemoryTotalSize,is(allOf(greaterThan(kibiBytes(270)),lessThan(kibiBytes(290)))));
  }
  @Test public void testCreatesStoreLockFile() throws Exception {
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    BatchInserter inserter=BatchInserters.inserter(databaseLayout.databaseDirectory(),fileSystemRule.get());
    assertThat(databaseLayout.getStoreLayout().storeLockFile().exists(),equalTo(true));
    inserter.shutdown();
  }
  @Test public void testFailsOnExistingStoreLockFile() throws IOException {
    StoreLayout storeLayout=testDirectory.storeLayout();
    try (FileSystemAbstraction fileSystemAbstraction=new DefaultFileSystemAbstraction();StoreLocker lock=new StoreLocker(fileSystemAbstraction,storeLayout)){
      lock.checkLock();
      expected.expect(StoreLockException.class);
      expected.expectMessage("Unable to obtain lock on store lock file");
      BatchInserters.inserter(storeLayout.databaseLayout("any").databaseDirectory(),fileSystemAbstraction);
    }
   }
}
