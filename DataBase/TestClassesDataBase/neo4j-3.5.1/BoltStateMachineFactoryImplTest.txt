class BoltStateMachineFactoryImplTest {
  private static final String CUSTOM_DB_NAME="customDbName";
  private static final Clock CLOCK=Clock.systemUTC();
  private static final BoltChannel CHANNEL=BoltTestUtil.newTestBoltChannel();
  @ParameterizedTest(name="V{0}") @ValueSource(longs={BoltProtocolV1.VERSION,BoltProtocolV2.VERSION}) void shouldCreateBoltStateMachinesV1(  long protocolVersion){
    BoltStateMachineFactoryImpl factory=newBoltFactory();
    BoltStateMachine boltStateMachine=factory.newStateMachine(protocolVersion,CHANNEL);
    assertNotNull(boltStateMachine);
    assertThat(boltStateMachine,instanceOf(BoltStateMachineV1.class));
  }
  @Test void shouldCreateBoltStateMachinesV3(){
    BoltStateMachineFactoryImpl factory=newBoltFactory();
    BoltStateMachine boltStateMachine=factory.newStateMachine(3L,CHANNEL);
    assertNotNull(boltStateMachine);
    assertThat(boltStateMachine,instanceOf(BoltStateMachineV3.class));
  }
  @ParameterizedTest(name="V{0}") @ValueSource(longs={999,-1}) void shouldThrowExceptionIfVersionIsUnknown(  long protocolVersion){
    BoltStateMachineFactoryImpl factory=newBoltFactory();
    IllegalArgumentException error=assertThrows(IllegalArgumentException.class,() -> factory.newStateMachine(protocolVersion,CHANNEL));
    assertThat(error.getMessage(),startsWith("Failed to create a state machine for protocol version"));
  }
  private static BoltStateMachineFactoryImpl newBoltFactory(){
    return newBoltFactory(newDbMock());
  }
  private static BoltStateMachineFactoryImpl newBoltFactory(  DatabaseManager databaseManager){
    Config config=Config.defaults(GraphDatabaseSettings.active_database,CUSTOM_DB_NAME);
    return new BoltStateMachineFactoryImpl(databaseManager,new UsageData(new OnDemandJobScheduler()),mock(Authentication.class),CLOCK,config,NullLogService.getInstance());
  }
  private static DatabaseManager newDbMock(){
    GraphDatabaseFacade db=mock(GraphDatabaseFacade.class);
    DependencyResolver dependencyResolver=mock(DependencyResolver.class);
    when(db.getDependencyResolver()).thenReturn(dependencyResolver);
    GraphDatabaseQueryService queryService=mock(GraphDatabaseQueryService.class);
    when(queryService.getDependencyResolver()).thenReturn(dependencyResolver);
    when(dependencyResolver.resolveDependency(GraphDatabaseQueryService.class)).thenReturn(queryService);
    DatabaseManager databaseManager=mock(DatabaseManager.class);
    when(databaseManager.getDatabaseFacade(CUSTOM_DB_NAME)).thenReturn(Optional.of(db));
    return databaseManager;
  }
}
