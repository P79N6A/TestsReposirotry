public class BasicAuthManagerTest extends InitialUserTest {
  private BasicAuthManager manager;
  private AuthenticationStrategy authStrategy=mock(AuthenticationStrategy.class);
  @Before public void setup() throws Throwable {
    config=Config.defaults();
    users=CommunitySecurityModule.getUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    UserRepository initUserRepository=CommunitySecurityModule.getInitialUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    manager=new BasicAuthManager(users,mock(PasswordPolicy.class),authStrategy,initUserRepository);
    manager.init();
  }
  @After public void teardown() throws Throwable {
    manager.stop();
  }
  @Test public void shouldFindAndAuthenticateUserSuccessfully() throws Throwable {
    manager.start();
    User user1=newUser("jake","abc123",false);
    users.create(user1);
    final User user=user1;
    when(authStrategy.authenticate(user,password("abc123"))).thenReturn(SUCCESS);
    assertLoginGivesResult("jake","abc123",SUCCESS);
  }
  @Test public void shouldFindAndAuthenticateUserAndReturnAuthStrategyResult() throws Throwable {
    manager.start();
    User user1=newUser("jake","abc123",true);
    users.create(user1);
    final User user=user1;
    when(authStrategy.authenticate(user,password("abc123"))).thenReturn(TOO_MANY_ATTEMPTS);
    assertLoginGivesResult("jake","abc123",TOO_MANY_ATTEMPTS);
  }
  @Test public void shouldFindAndAuthenticateUserAndReturnPasswordChangeIfRequired() throws Throwable {
    manager.start();
    User user1=newUser("jake","abc123",true);
    users.create(user1);
    final User user=user1;
    when(authStrategy.authenticate(user,password("abc123"))).thenReturn(SUCCESS);
    assertLoginGivesResult("jake","abc123",PASSWORD_CHANGE_REQUIRED);
  }
  @Test public void shouldFailAuthenticationIfUserIsNotFound() throws Throwable {
    manager.start();
    User user=newUser("jake","abc123",true);
    users.create(user);
    assertLoginGivesResult("unknown","abc123",FAILURE);
  }
  @Test public void shouldCreateUser() throws Throwable {
    manager.start();
    manager.newUser("foo",password("bar"),true);
    User user=users.getUserByName("foo");
    assertNotNull(user);
    assertTrue(user.passwordChangeRequired());
    assertTrue(user.credentials().matchesPassword("bar"));
  }
  @Test public void shouldDeleteUser() throws Throwable {
    manager.start();
    manager.newUser("jake",password("abc123"),true);
    manager.deleteUser("jake");
    assertNull(users.getUserByName("jake"));
  }
  @Test public void shouldFailToDeleteUnknownUser() throws Throwable {
    manager.start();
    manager.newUser("jake",password("abc123"),true);
    try {
      manager.deleteUser("nonExistentUser");
      fail("User 'nonExistentUser' should no longer exist, expected exception.");
    }
 catch (    InvalidArgumentsException e) {
      assertThat(e.getMessage(),containsString("User 'nonExistentUser' does not exist."));
    }
catch (    Throwable t) {
      assertThat(t.getClass(),IsEqual.equalTo(InvalidArgumentsException.class));
    }
    assertNotNull(users.getUserByName("jake"));
  }
  @Test public void shouldSetPassword() throws Throwable {
    manager.start();
    manager.newUser("jake",password("abc123"),true);
    manager.setUserPassword("jake",password("hello, world!"),false);
    User user=manager.getUser("jake");
    assertTrue(user.credentials().matchesPassword("hello, world!"));
    assertThat(users.getUserByName("jake"),equalTo(user));
  }
  @Test public void shouldClearPasswordOnLogin() throws Throwable {
    when(authStrategy.authenticate(any(),any())).thenReturn(AuthenticationResult.SUCCESS);
    manager.start();
    manager.newUser("jake",password("abc123"),true);
    byte[] password=password("abc123");
    Map<String,Object> authToken=AuthToken.newBasicAuthToken("jake",password);
    manager.login(authToken);
    assertThat(password,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
    assertThat(authToken.get(AuthToken.CREDENTIALS),equalTo(clearedPasswordWithSameLenghtAs("abc123")));
  }
  @Test public void shouldClearPasswordOnInvalidAuthToken() throws Throwable {
    manager.start();
    byte[] password=password("abc123");
    Map<String,Object> authToken=AuthToken.newBasicAuthToken("jake",password);
    authToken.put(AuthToken.SCHEME_KEY,null);
    try {
      manager.login(authToken);
      fail("exception expected");
    }
 catch (    InvalidAuthTokenException e) {
    }
    assertThat(password,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
    assertThat(authToken.get(AuthToken.CREDENTIALS),equalTo(clearedPasswordWithSameLenghtAs("abc123")));
  }
  @Test public void shouldClearPasswordOnNewUser() throws Throwable {
    manager.start();
    byte[] password=password("abc123");
    manager.newUser("jake",password,true);
    assertThat(password,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
    User user=manager.getUser("jake");
    assertTrue(user.credentials().matchesPassword("abc123"));
  }
  @Test public void shouldClearPasswordOnNewUserAlreadyExists() throws Throwable {
    manager.start();
    manager.newUser("jake",password("abc123"),true);
    byte[] password=password("abc123");
    try {
      manager.newUser("jake",password,true);
      fail("exception expected");
    }
 catch (    InvalidArgumentsException e) {
    }
    assertThat(password,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
  }
  @Test public void shouldClearPasswordOnSetUserPassword() throws Throwable {
    manager.start();
    manager.newUser("jake",password("old"),false);
    byte[] newPassword=password("abc123");
    manager.setUserPassword("jake",newPassword,false);
    assertThat(newPassword,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
    User user=manager.getUser("jake");
    assertTrue(user.credentials().matchesPassword("abc123"));
  }
  @Test public void shouldClearPasswordOnSetUserPasswordWithInvalidPassword() throws Throwable {
    manager.start();
    manager.newUser("jake",password("abc123"),false);
    byte[] newPassword=password("abc123");
    try {
      manager.setUserPassword("jake",newPassword,false);
      fail("exception expected");
    }
 catch (    InvalidArgumentsException e) {
    }
    assertThat(newPassword,equalTo(clearedPasswordWithSameLenghtAs("abc123")));
  }
  @Test public void shouldReturnNullWhenSettingPasswordForUnknownUser() throws Throwable {
    manager.start();
    try {
      manager.setUserPassword("unknown",password("hello, world!"),false);
      fail("exception expected");
    }
 catch (    InvalidArgumentsException e) {
    }
  }
  @Test public void shouldFailWhenAuthTokenIsInvalid() throws Throwable {
    manager.start();
    assertException(() -> manager.login(map(AuthToken.SCHEME_KEY,"supercool",AuthToken.PRINCIPAL,"neo4j")),InvalidAuthTokenException.class,"Unsupported authentication token, scheme 'supercool' is not supported.");
    assertException(() -> manager.login(map(AuthToken.SCHEME_KEY,"none")),InvalidAuthTokenException.class,"Unsupported authentication token, scheme 'none' is only allowed when auth is disabled");
    assertException(() -> manager.login(map("key","value")),InvalidAuthTokenException.class,"Unsupported authentication token, missing key `scheme`");
    assertException(() -> manager.login(map(AuthToken.SCHEME_KEY,"basic",AuthToken.PRINCIPAL,"neo4j")),InvalidAuthTokenException.class,"Unsupported authentication token, missing key `credentials`");
    assertException(() -> manager.login(map(AuthToken.SCHEME_KEY,"basic",AuthToken.CREDENTIALS,"very-secret")),InvalidAuthTokenException.class,"Unsupported authentication token, missing key `principal`");
  }
  private void assertLoginGivesResult(  String username,  String password,  AuthenticationResult expectedResult) throws InvalidAuthTokenException {
    LoginContext securityContext=manager.login(authToken(username,password));
    assertThat(securityContext.subject().getAuthenticationResult(),equalTo(expectedResult));
  }
  @Override protected AuthManager authManager(){
    return manager;
  }
  public static byte[] password(  String passwordString){
    return passwordString != null ? passwordString.getBytes(StandardCharsets.UTF_8) : null;
  }
  public static byte[] clearedPasswordWithSameLenghtAs(  String passwordString){
    byte[] password=passwordString.getBytes(StandardCharsets.UTF_8);
    Arrays.fill(password,(byte)0);
    return password;
  }
}
