class TextUtilTest {
  @Test void shouldReplaceVariablesWithValuesInTemplateString(){
    String template="This is a $FIRST that $SECOND $THIRD!";
    Map<String,String> values=new HashMap<>();
    values.put("FIRST","String");
    values.put("SECOND","should");
    values.put("THIRD","act as a template!");
    String string=TextUtil.templateString(template,values);
    assertEquals("This is a String that should act as a template!!",string);
  }
  @Test void shouldTokenizeStringWithWithoutQuotes(){
    String untokenized="First Second Third";
    String[] tokenized=TextUtil.tokenizeStringWithQuotes(untokenized);
    assertArrayEquals(new String[]{"First","Second","Third"},tokenized);
  }
  @Test void shouldTokenizeStringWithQuotes(){
    String untokenized="First \"Second one\" Third \"And a fourth\"";
    String[] tokenized=TextUtil.tokenizeStringWithQuotes(untokenized);
    assertArrayEquals(new String[]{"First","Second one","Third","And a fourth"},tokenized);
  }
  @Test void shouldTokenStringWithWithQuotesAndEscapedSpaces(){
    String untokenized="First \"Second one\" Third And\\ a\\ fourth";
    String[] tokenized=TextUtil.tokenizeStringWithQuotes(untokenized);
    assertArrayEquals(new String[]{"First","Second one","Third","And a fourth"},tokenized);
  }
  @Test void shouldPreserveBackslashes(){
    String untokenized="First C:\\a\\b\\c";
    String[] tokenized=TextUtil.tokenizeStringWithQuotes(untokenized,true,true);
    assertArrayEquals(new String[]{"First","C:\\a\\b\\c"},tokenized);
  }
  @Test void preserveOnlyPathBackslashes(){
    String untokenized="First C:\\a\\ r\\b\\c";
    String[] tokenized=TextUtil.tokenizeStringWithQuotes(untokenized,true,true,false);
    assertArrayEquals(new String[]{"First","C:\\a r\\b\\c"},tokenized);
  }
}
