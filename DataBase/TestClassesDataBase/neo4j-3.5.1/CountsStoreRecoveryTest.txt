public class CountsStoreRecoveryTest {
  @Rule public final EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  private GraphDatabaseService db;
  @Before public void before(){
    db=databaseFactory(fsRule.get()).newImpermanentDatabase();
  }
  @After public void after(){
    db.shutdown();
  }
  @Test public void shouldRecoverTheCountsStoreEvenWhenIfNeoStoreDoesNotNeedRecovery() throws Exception {
    createNode("A");
    checkPoint();
    createNode("B");
    flushNeoStoreOnly();
    crashAndRestart();
    try (org.neo4j.internal.kernel.api.Transaction tx=((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(Kernel.class).beginTransaction(explicit,AUTH_DISABLED)){
      assertEquals(1,tx.dataRead().countsForNode(tx.tokenRead().nodeLabel("A")));
      assertEquals(1,tx.dataRead().countsForNode(tx.tokenRead().nodeLabel("B")));
      assertEquals(2,tx.dataRead().countsForNode(NO_TOKEN));
    }
   }
  private void flushNeoStoreOnly(){
    NeoStores neoStores=((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(RecordStorageEngine.class).testAccessNeoStores();
    MetaDataStore metaDataStore=neoStores.getMetaDataStore();
    metaDataStore.flush();
  }
  private void checkPoint() throws IOException {
    ((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(CheckPointer.class).forceCheckPoint(new SimpleTriggerInfo("test"));
  }
  private void crashAndRestart() throws Exception {
    final GraphDatabaseService db1=db;
    FileSystemAbstraction uncleanFs=fsRule.snapshot(db1::shutdown);
    db=databaseFactory(uncleanFs).newImpermanentDatabase();
  }
  private void createNode(  String label){
    try (Transaction tx=db.beginTx()){
      db.createNode(label(label));
      tx.success();
    }
   }
  private TestGraphDatabaseFactory databaseFactory(  FileSystemAbstraction fs){
    return new TestGraphDatabaseFactory().setFileSystem(fs);
  }
}
