public class TestExactDepthPathFinder extends Neo4jAlgoTestCase {
  public void createGraph(){
    graph.makeEdgeChain("SOURCE,SUPER,c,d");
    graph.makeEdgeChain("SUPER,e,f");
    graph.makeEdgeChain("SUPER,5,6");
    graph.makeEdgeChain("SUPER,7,8");
    graph.makeEdgeChain("SUPER,r,SPIDER");
    graph.makeEdgeChain("SUPER,g,h,i,j,SPIDER");
    graph.makeEdgeChain("SUPER,k,l,m,SPIDER");
    graph.makeEdgeChain("SUPER,s,t,u,SPIDER");
    graph.makeEdgeChain("SUPER,v,w,x,y,SPIDER");
    graph.makeEdgeChain("SPIDER,n,o");
    graph.makeEdgeChain("SPIDER,p,q");
    graph.makeEdgeChain("SPIDER,1,2");
    graph.makeEdgeChain("SPIDER,3,4");
    graph.makeEdgeChain("SPIDER,TARGET");
    graph.makeEdgeChain("SOURCE,a,b,TARGET");
    graph.makeEdgeChain("SOURCE,z,9,0,TARGET");
  }
  private PathFinder<Path> newFinder(){
    return new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),4,4,true);
  }
  @Test public void testSingle(){
    final Set<String> possiblePaths=new HashSet<>();
    possiblePaths.add("SOURCE,z,9,0,TARGET");
    possiblePaths.add("SOURCE,SUPER,r,SPIDER,TARGET");
    createGraph();
    PathFinder<Path> finder=newFinder();
    Path path=finder.findSinglePath(graph.getNode("SOURCE"),graph.getNode("TARGET"));
    assertNotNull(path);
    assertThat(getPathDef(path),isIn(possiblePaths));
    assertTrue(possiblePaths.contains(getPathDef(path)));
  }
  @Test public void testAll(){
    createGraph();
    assertPaths(newFinder().findAllPaths(graph.getNode("SOURCE"),graph.getNode("TARGET")),"SOURCE,z,9,0,TARGET","SOURCE,SUPER,r,SPIDER,TARGET");
  }
  @Test public void shouldHandleDirectionalGraph(){
    graph.makeEdgeChain("a,b,c,g");
    graph.makeEdgeChain("a,d,e,f,g");
    graph.makeEdgeChain("a,h,i,j,k,g");
    Node a=graph.getNode("a");
    Node g=graph.getNode("g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.forDirection(Direction.OUTGOING),3,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,b,c,g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.forDirection(Direction.OUTGOING),4,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,d,e,f,g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.forDirection(Direction.OUTGOING),5,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,h,i,j,k,g");
  }
  @Test public void shouldHandleNondirectedGraph(){
    graph.makeEdgeChain("a,b,c,g");
    graph.makeEdgeChain("a,d,e,f,g");
    graph.makeEdgeChain("a,h,i,j,k,g");
    Node a=graph.getNode("a");
    Node g=graph.getNode("g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),3,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,b,c,g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),4,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,d,e,f,g");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),5,Integer.MAX_VALUE,false).findAllPaths(a,g),"a,h,i,j,k,g");
  }
  @Test public void shouldHandleSimpleChainEvenDepth(){
    graph.makeEdgeChain("a,b,c");
    Node a=graph.getNode("a");
    Node c=graph.getNode("c");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),2,Integer.MAX_VALUE,false).findAllPaths(a,c),"a,b,c");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),2,Integer.MAX_VALUE,false).findAllPaths(a,c),"a,b,c");
  }
  @Test public void shouldHandleSimpleChainOddDepth(){
    graph.makeEdgeChain("a,b,c,d");
    Node a=graph.getNode("a");
    Node d=graph.getNode("d");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),3,Integer.MAX_VALUE,false).findAllPaths(a,d),"a,b,c,d");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),3,Integer.MAX_VALUE,false).findAllPaths(a,d),"a,b,c,d");
  }
  @Test public void shouldHandleNeighbouringNodes(){
    graph.makeEdgeChain("a,b");
    Node a=graph.getNode("a");
    Node b=graph.getNode("b");
    ExactDepthPathFinder pathFinder=new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false);
    Iterable<Path> allPaths=pathFinder.findAllPaths(a,b);
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b");
  }
  @Test public void shouldHandleNeighbouringNodesWhenNotAlone(){
    graph.makeEdge("a","b");
    graph.makeEdge("a","c");
    Node a=graph.getNode("a");
    Node b=graph.getNode("b");
    ExactDepthPathFinder pathFinder=new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false);
    Iterable<Path> allPaths=pathFinder.findAllPaths(a,b);
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b");
  }
  @Test public void shouldHandleNeighbouringNodesMultiplePaths(){
    graph.makeEdgeChain("a,b");
    graph.makeEdgeChain("a,b");
    graph.makeEdgeChain("a,c");
    Node a=graph.getNode("a");
    Node b=graph.getNode("b");
    ExactDepthPathFinder pathFinder=new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false);
    Iterable<Path> allPaths=pathFinder.findAllPaths(a,b);
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b","a,b");
    assertPaths(new ExactDepthPathFinder(PathExpanders.allTypesAndDirections(),1,Integer.MAX_VALUE,false).findAllPaths(a,b),"a,b","a,b");
  }
  @Test public void testExactDepthFinder(){
    graph.makeEdgeChain("a,c,g,k");
    graph.makeEdgeChain("a,b,d,j,k");
    graph.makeEdgeChain("b,e,f,h,i,j");
    graph.makeEdgeChain("d,h");
    PathExpander<Object> expander=PathExpanders.forTypeAndDirection(MyRelTypes.R1,Direction.OUTGOING);
    Node a=graph.getNode("a");
    Node k=graph.getNode("k");
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,3).findAllPaths(a,k),"a,c,g,k");
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,4).findAllPaths(a,k),"a,b,d,j,k");
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,5).findAllPaths(a,k));
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,6).findAllPaths(a,k),"a,b,d,h,i,j,k");
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,7).findAllPaths(a,k),"a,b,e,f,h,i,j,k");
    assertPaths(GraphAlgoFactory.pathsWithLength(expander,8).findAllPaths(a,k));
  }
  @Test public void testExactDepthPathsReturnsNoLoops(){
    graph.makeEdgeChain("a,b,c,d,b,c,e");
    Node a=graph.getNode("a");
    Node e=graph.getNode("e");
    assertPaths(GraphAlgoFactory.pathsWithLength(PathExpanders.forType(MyRelTypes.R1),3).findAllPaths(a,e),"a,b,c,e","a,b,c,e");
    assertPaths(GraphAlgoFactory.pathsWithLength(PathExpanders.forType(MyRelTypes.R1),4).findAllPaths(a,e),"a,b,d,c,e");
    assertPaths(GraphAlgoFactory.pathsWithLength(PathExpanders.forType(MyRelTypes.R1),6).findAllPaths(a,e));
  }
  @Test public void testExactDepthPathsLoopsAllowed(){
    graph.makeEdgeChain("a,b,c,d,b,c,e");
    Node a=graph.getNode("a");
    Node e=graph.getNode("e");
    assertPaths(new ExactDepthPathFinder(PathExpanders.forDirection(Direction.OUTGOING),6,Integer.MAX_VALUE,true).findAllPaths(a,e),"a,b,c,d,b,c,e");
  }
}
