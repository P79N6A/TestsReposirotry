private static class LockContestant implements Runnable {
  private final Runnable lockAction;
  private final AtomicBoolean lockAcquired=new AtomicBoolean();
  private final AtomicBoolean started=new AtomicBoolean();
  LockContestant(  Runnable lockAction){
    this.lockAction=lockAction;
  }
  @Override public void run(){
    started.set(true);
    lockAction.run();
    lockAcquired.set(true);
  }
  Pair<Boolean,Boolean> state(){
    return Pair.of(lockAcquired(),started());
  }
  boolean lockAcquired(){
    return lockAcquired.get();
  }
  boolean started(){
    return started.get();
  }
}
