public class DynamicProcessorAssignerTest {
  @Test public void shouldAssignAdditionalCPUToBottleNeckStep(){
    Configuration config=config(10,5);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    ControlledStep<?> slowStep=stepWithStats("slow",0,avg_processing_time,10L,done_batches,10L);
    ControlledStep<?> fastStep=stepWithStats("fast",0,avg_processing_time,2L,done_batches,10L);
    StageExecution execution=executionOf(config,slowStep,fastStep);
    assigner.start(execution);
    assigner.check(execution);
    assertEquals(5,slowStep.processors(0));
    assertEquals(1,fastStep.processors(0));
  }
  @Test public void shouldRemoveCPUsFromWayTooFastStep(){
    Configuration config=config(10,3);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    ControlledStep<?> slowStep=spy(stepWithStats("slow",1,avg_processing_time,6L,done_batches,10L).setProcessors(2));
    ControlledStep<?> fastStep=spy(stepWithStats("fast",0,avg_processing_time,2L,done_batches,10L).setProcessors(2));
    StageExecution execution=executionOf(config,slowStep,fastStep);
    assigner.start(execution);
    assigner.check(execution);
    verify(fastStep,times(1)).processors(-1);
  }
  @Test public void shouldRemoveCPUsButNotSoThatTheFastStepBecomesBottleneck(){
    Configuration config=config(10,3);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    ControlledStep<?> slowStep=spy(stepWithStats("slow",1,avg_processing_time,10L,done_batches,10L));
    ControlledStep<?> fastStep=spy(stepWithStats("fast",0,avg_processing_time,7L,done_batches,10L).setProcessors(3));
    StageExecution execution=executionOf(config,slowStep,fastStep);
    assigner.start(execution);
    assigner.check(execution);
    verify(fastStep,never()).processors(1);
    verify(fastStep,never()).processors(-1);
  }
  @Test public void shouldHandleZeroAverage(){
    Configuration config=config(10,5);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    ControlledStep<?> aStep=stepWithStats("slow",0,avg_processing_time,0L,done_batches,0L);
    ControlledStep<?> anotherStep=stepWithStats("fast",0,avg_processing_time,0L,done_batches,0L);
    StageExecution execution=executionOf(config,aStep,anotherStep);
    assigner.start(execution);
    assigner.check(execution);
    assertEquals(1,aStep.processors(0));
    assertEquals(1,anotherStep.processors(0));
  }
  @Test public void shouldRemoveCPUsFromTooFastStepEvenIfThereIsAWayFaster(){
    Configuration config=config(10,3);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    Step<?> wayFastest=stepWithStats("wayFastest",0,avg_processing_time,50L,done_batches,20L);
    Step<?> fast=spy(stepWithStats("fast",0,avg_processing_time,100L,done_batches,20L).setProcessors(3));
    Step<?> slow=stepWithStats("slow",1,avg_processing_time,220L,done_batches,20L);
    StageExecution execution=executionOf(config,slow,wayFastest,fast);
    assigner.start(execution);
    assigner.check(execution);
    verify(fast).processors(-1);
  }
  @Test public void shouldRemoveCPUsFromTooFastStepEvenIfNotAllPermitsAreUsed(){
    Configuration config=config(10,20);
    DynamicProcessorAssigner assigner=new DynamicProcessorAssigner(config);
    Step<?> wayFastest=spy(stepWithStats("wayFastest",0,avg_processing_time,50L,done_batches,20L).setProcessors(5));
    Step<?> fast=spy(stepWithStats("fast",0,avg_processing_time,100L,done_batches,20L).setProcessors(3));
    Step<?> slow=stepWithStats("slow",1,avg_processing_time,220L,done_batches,20L);
    StageExecution execution=executionOf(config,slow,wayFastest,fast);
    assigner.start(execution);
    assigner.check(execution);
    verify(wayFastest).processors(-1);
  }
  private Configuration config(  final int movingAverage,  int processors){
    return new Configuration(){
      @Override public int movingAverageSize(){
        return movingAverage;
      }
      @Override public int maxNumberOfProcessors(){
        return processors;
      }
    }
;
  }
  private StageExecution executionOf(  Configuration config,  Step<?>... steps){
    return new StageExecution("Test",null,config,Arrays.asList(steps),ORDER_SEND_DOWNSTREAM);
  }
}
