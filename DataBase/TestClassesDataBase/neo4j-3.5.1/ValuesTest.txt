class ValuesTest {
  @Test void shouldBeEqualToItself(){
    assertEqual(booleanValue(false),booleanValue(false));
    assertEqual(byteValue((byte)0),byteValue((byte)0));
    assertEqual(shortValue((short)0),shortValue((short)0));
    assertEqual(intValue(0),intValue(0));
    assertEqual(longValue(0),longValue(0));
    assertEqual(floatValue(0.0f),floatValue(0.0f));
    assertEqual(doubleValue(0.0),doubleValue(0.0));
    assertEqual(stringValue(""),stringValue(""));
    assertEqual(booleanValue(true),booleanValue(true));
    assertEqual(byteValue((byte)1),byteValue((byte)1));
    assertEqual(shortValue((short)1),shortValue((short)1));
    assertEqual(intValue(1),intValue(1));
    assertEqual(longValue(1),longValue(1));
    assertEqual(floatValue(1.0f),floatValue(1.0f));
    assertEqual(doubleValue(1.0),doubleValue(1.0));
    assertEqual(charValue('x'),charValue('x'));
    assertEqual(stringValue("hi"),stringValue("hi"));
    assertEqual(booleanArray(new boolean[]{}),booleanArray(new boolean[]{}));
    assertEqual(byteArray(new byte[]{}),byteArray(new byte[]{}));
    assertEqual(shortArray(new short[]{}),shortArray(new short[]{}));
    assertEqual(intArray(new int[]{}),intArray(new int[]{}));
    assertEqual(longArray(new long[]{}),longArray(new long[]{}));
    assertEqual(floatArray(new float[]{}),floatArray(new float[]{}));
    assertEqual(doubleArray(new double[]{}),doubleArray(new double[]{}));
    assertEqual(charArray(new char[]{}),charArray(new char[]{}));
    assertEqual(stringArray(),stringArray());
    assertEqual(booleanArray(new boolean[]{true}),booleanArray(new boolean[]{true}));
    assertEqual(byteArray(new byte[]{1}),byteArray(new byte[]{1}));
    assertEqual(shortArray(new short[]{1}),shortArray(new short[]{1}));
    assertEqual(intArray(new int[]{1}),intArray(new int[]{1}));
    assertEqual(longArray(new long[]{1}),longArray(new long[]{1}));
    assertEqual(floatArray(new float[]{1.0f}),floatArray(new float[]{1.0f}));
    assertEqual(doubleArray(new double[]{1.0}),doubleArray(new double[]{1.0}));
    assertEqual(charArray(new char[]{'x'}),charArray(new char[]{'x'}));
    assertEqual(stringArray("hi"),stringArray("hi"));
  }
  @Test void pointValueShouldRequireConsistentInput(){
    assertThrows(IllegalArgumentException.class,() -> Values.pointValue(CoordinateReferenceSystem.Cartesian,1,2,3));
    assertThrows(IllegalArgumentException.class,() -> Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,1,2));
    assertThrows(IllegalArgumentException.class,() -> Values.pointValue(CoordinateReferenceSystem.WGS84,1,2,3));
    assertThrows(IllegalArgumentException.class,() -> Values.pointValue(CoordinateReferenceSystem.WGS84_3D,1,2));
  }
}
