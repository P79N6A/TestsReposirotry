public class TestDatasourceCommitOrderDataVisibility {
  private static final String INDEX_NAME="foo";
  private static final String INDEX_KEY="bar";
  private static final String INDEX_VALUE="baz";
  private static final String PROPERTY_NAME="quux";
  private static final int PROPERTY_VALUE=42;
  private GraphDatabaseService graphDatabaseService;
  @Before public void setUp(){
    graphDatabaseService=new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @After public void tearDown(){
    graphDatabaseService.shutdown();
  }
  @Test public void shouldNotMakeIndexWritesVisibleUntilCommit() throws Exception {
    Node commonNode;
    try (Transaction tx=graphDatabaseService.beginTx()){
      commonNode=graphDatabaseService.createNode();
      tx.success();
    }
     try (Transaction transaction=graphDatabaseService.beginTx()){
      graphDatabaseService.index().forNodes(INDEX_NAME).add(commonNode,INDEX_KEY,INDEX_VALUE);
      commonNode.setProperty(PROPERTY_NAME,PROPERTY_VALUE);
      assertNodeIsNotIndexedOutsideThisTransaction();
      assertNodeIsUnchangedOutsideThisTransaction(commonNode);
      transaction.success();
      assertNodeIsNotIndexedOutsideThisTransaction();
      assertNodeIsUnchangedOutsideThisTransaction(commonNode);
    }
     assertNodeIsIndexed(commonNode);
    assertNodeHasBeenUpdated(commonNode);
  }
  private void assertNodeIsNotIndexedOutsideThisTransaction() throws Exception {
    final Collection<Exception> problems=new HashSet<>();
    Thread thread=new Thread(() -> {
      try (Transaction ignored=graphDatabaseService.beginTx();IndexHits<Node> indexHits=graphDatabaseService.index().forNodes(INDEX_NAME).get(INDEX_KEY,INDEX_VALUE)){
        assertThat(indexHits.size(),is(0));
      }
 catch (      Throwable t) {
        problems.add(new Exception(t));
      }
    }
);
    thread.start();
    thread.join();
    if (problems.size() > 0) {
      throw problems.iterator().next();
    }
  }
  private void assertNodeIsUnchangedOutsideThisTransaction(  final Node commonNode) throws Exception {
    final Collection<Exception> problems=new HashSet<>();
    Thread thread=new Thread(() -> {
      try (Transaction ignored=graphDatabaseService.beginTx()){
        assertThat(commonNode.hasProperty(PROPERTY_NAME),is(false));
      }
 catch (      Throwable t) {
        problems.add(new Exception(t));
      }
    }
);
    thread.start();
    thread.join();
    if (problems.size() > 0) {
      throw problems.iterator().next();
    }
  }
  private void assertNodeIsIndexed(  final Node commonNode) throws Exception {
    final Collection<Exception> problems=new HashSet<>();
    Thread thread=new Thread(() -> {
      try (Transaction ignored=graphDatabaseService.beginTx()){
        Node node=graphDatabaseService.index().forNodes(INDEX_NAME).get(INDEX_KEY,INDEX_VALUE).getSingle();
        assertThat(node,is(commonNode));
      }
 catch (      Throwable t) {
        problems.add(new Exception(t));
      }
    }
);
    thread.start();
    thread.join();
    if (problems.size() > 0) {
      throw problems.iterator().next();
    }
  }
  private void assertNodeHasBeenUpdated(  final Node commonNode) throws Exception {
    final Collection<Exception> problems=new HashSet<>();
    Thread thread=new Thread(() -> {
      try (Transaction ignored=graphDatabaseService.beginTx()){
        assertThat(commonNode.getProperty(PROPERTY_NAME),is(PROPERTY_VALUE));
      }
 catch (      Throwable t) {
        problems.add(new Exception(t));
      }
    }
);
    thread.start();
    thread.join();
    if (problems.size() > 0) {
      throw problems.iterator().next();
    }
  }
}
