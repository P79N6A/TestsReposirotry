public class SetRelationshipPropertiesIT extends AbstractRestFunctionalDocTestBase {
  private URI propertiesUri;
  private URI badUri;
  private static FunctionalTestHelper functionalTestHelper;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(server());
  }
  @Before public void setupTheDatabase() throws Exception {
    long relationshipId=new GraphDbHelper(server().getDatabase()).createRelationship("KNOWS");
    propertiesUri=new URI(functionalTestHelper.relationshipPropertiesUri(relationshipId));
    badUri=new URI(functionalTestHelper.relationshipPropertiesUri(relationshipId + 1 * 99999));
  }
  @Documented("Update relationship properties.") @Test @Graph public void shouldReturn204WhenPropertiesAreUpdated(){
    data.get();
    Map<String,Object> map=new HashMap<>();
    map.put("jim","tobias");
    gen.get().payload(JsonHelper.createJsonFrom(map)).expectedStatus(204).put(propertiesUri.toString());
    JaxRsResponse response=updatePropertiesOnServer(map);
    assertEquals(204,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn400WhenSendinIncompatibleJsonProperties(){
    Map<String,Object> map=new HashMap<>();
    map.put("jim",new HashMap<String,Object>());
    JaxRsResponse response=updatePropertiesOnServer(map);
    assertEquals(400,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn400WhenSendingCorruptJsonProperties(){
    JaxRsResponse response=RestRequest.req().put(propertiesUri.toString(),"this:::Is::notJSON}");
    assertEquals(400,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn404WhenPropertiesSentToANodeWhichDoesNotExist(){
    Map<String,Object> map=new HashMap<>();
    map.put("jim","tobias");
    JaxRsResponse response=RestRequest.req().put(badUri.toString(),JsonHelper.createJsonFrom(map));
    assertEquals(404,response.getStatus());
    response.close();
  }
  private JaxRsResponse updatePropertiesOnServer(  final Map<String,Object> map){
    return RestRequest.req().put(propertiesUri.toString(),JsonHelper.createJsonFrom(map));
  }
  private String getPropertyUri(  final String key){
    return propertiesUri.toString() + "/" + key;
  }
  @Test public void shouldReturn204WhenPropertyIsSet(){
    JaxRsResponse response=setPropertyOnServer("foo","bar");
    assertEquals(204,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn400WhenSendinIncompatibleJsonProperty(){
    JaxRsResponse response=setPropertyOnServer("jim",new HashMap<String,Object>());
    assertEquals(400,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn400WhenSendingCorruptJsonProperty(){
    JaxRsResponse response=RestRequest.req().put(getPropertyUri("foo"),"this:::Is::notJSON}");
    assertEquals(400,response.getStatus());
    response.close();
  }
  @Test public void shouldReturn404WhenPropertySentToANodeWhichDoesNotExist(){
    JaxRsResponse response=RestRequest.req().put(badUri.toString() + "/foo",JsonHelper.createJsonFrom("bar"));
    assertEquals(404,response.getStatus());
    response.close();
  }
  private JaxRsResponse setPropertyOnServer(  final String key,  final Object value){
    return RestRequest.req().put(getPropertyUri(key),JsonHelper.createJsonFrom(value));
  }
}
