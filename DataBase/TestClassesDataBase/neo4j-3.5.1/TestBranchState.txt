public class TestBranchState extends TraversalTestBase {
  @Test public void depthAsState(){
    createGraph("a to b","b to c","c to d","b to e","e to f","f to d","f to g","g to h");
    try (Transaction tx=beginTx()){
      DepthStateExpander expander=new DepthStateExpander();
      Iterables.count(getGraphDb().traversalDescription().expand(expander,new InitialBranchState.State<>(0,0)).traverse(getNodeWithName("a")));
      tx.success();
    }
   }
  @Test public void everyOtherDepthAsState(){
    createGraph("a to b","b to c","c to d","d to e");
    try (Transaction tx=beginTx()){
      IncrementEveryOtherDepthCountingExpander expander=new IncrementEveryOtherDepthCountingExpander();
      Iterables.count(getGraphDb().traversalDescription().expand(expander,new InitialBranchState.State<>(0,0)).traverse(getNodeWithName("a")));
      tx.success();
    }
   }
  @Test public void evaluateState(){
    createGraph("a TO b","b TO c","c TO d","a TO e","e TO f","f TO c");
    try (Transaction tx=beginTx()){
      PathEvaluator<Integer> evaluator=new PathEvaluator.Adapter<Integer>(){
        @Override public Evaluation evaluate(        Path path,        BranchState<Integer> state){
          return ofIncludes(path.endNode().getProperty("name").equals("c") && state.getState() == 3);
        }
      }
;
      expectPaths(getGraphDb().traversalDescription().uniqueness(Uniqueness.NODE_PATH).expand(new RelationshipWeightExpander(),new InitialBranchState.State<>(1,1)).evaluator(evaluator).traverse(getNodeWithName("a")),"a,b,c");
      tx.success();
    }
   }
private static class DepthStateExpander implements PathExpander<Integer> {
    @Override public Iterable<Relationship> expand(    Path path,    BranchState<Integer> state){
      assertEquals(path.length(),state.getState().intValue());
      state.setState(state.getState() + 1);
      return path.endNode().getRelationships(Direction.OUTGOING);
    }
    @Override public PathExpander<Integer> reverse(){
      return this;
    }
  }
private static class IncrementEveryOtherDepthCountingExpander implements PathExpander<Integer> {
    @Override public Iterable<Relationship> expand(    Path path,    BranchState<Integer> state){
      assertEquals(path.length() / 2,state.getState().intValue());
      if (path.length() % 2 == 1) {
        state.setState(state.getState() + 1);
      }
      return path.endNode().getRelationships(Direction.OUTGOING);
    }
    @Override public PathExpander<Integer> reverse(){
      return this;
    }
  }
private static class RelationshipWeightExpander implements PathExpander<Integer> {
    @Override public Iterable<Relationship> expand(    Path path,    BranchState<Integer> state){
      state.setState(state.getState() + 1);
      return path.endNode().getRelationships(OUTGOING);
    }
    @Override public PathExpander<Integer> reverse(){
      return this;
    }
  }
}
