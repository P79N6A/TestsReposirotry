public class ThreadingExtension extends StatefullFieldExtension<ThreadingRule> implements BeforeEachCallback, AfterEachCallback, AfterAllCallback {
  private static final String THREADING="threading";
  private static final ExtensionContext.Namespace THREADING_NAMESPACE=ExtensionContext.Namespace.create(THREADING);
  @Override public void afterEach(  ExtensionContext extensionContext) throws Exception {
    ThreadingRule threadingRule=getStoredValue(extensionContext);
    threadingRule.after();
  }
  @Override public void beforeEach(  ExtensionContext extensionContext) throws Exception {
    ThreadingRule threadingRule=getStoredValue(extensionContext);
    threadingRule.before();
  }
  @Override protected String getFieldKey(){
    return THREADING;
  }
  @Override protected Class<ThreadingRule> getFieldType(){
    return ThreadingRule.class;
  }
  @Override protected ThreadingRule createField(  ExtensionContext extensionContext){
    ThreadingRule threadingRule=new ThreadingRule();
    return threadingRule;
  }
  @Override protected ExtensionContext.Namespace getNameSpace(){
    return THREADING_NAMESPACE;
  }
}
