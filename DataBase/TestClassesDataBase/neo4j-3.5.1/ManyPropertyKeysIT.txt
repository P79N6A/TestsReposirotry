/** 
 * Tests for handling many property keys (even after restart of database) as well as concurrent creation of property keys.
 */
public class ManyPropertyKeysIT {
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(testDirectory).around(fileSystemRule).around(pageCacheRule);
  @Test public void creating_many_property_keys_should_have_all_loaded_the_next_restart() throws Exception {
    GraphDatabaseAPI db=databaseWithManyPropertyKeys(3000);
    int countBefore=propertyKeyCount(db);
    db.shutdown();
    db=database();
    createNodeWithProperty(db,key(2800),true);
    assertEquals(countBefore,propertyKeyCount(db));
    db.shutdown();
  }
  @Test public void concurrently_creating_same_property_key_in_different_transactions_should_end_up_with_same_key_id() throws Exception {
    GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
    OtherThreadExecutor<WorkerState> worker1=new OtherThreadExecutor<>("w1",new WorkerState(db));
    OtherThreadExecutor<WorkerState> worker2=new OtherThreadExecutor<>("w2",new WorkerState(db));
    worker1.execute(new BeginTx());
    worker2.execute(new BeginTx());
    String key="mykey";
    worker1.execute(new CreateNodeAndSetProperty(key));
    worker2.execute(new CreateNodeAndSetProperty(key));
    worker1.execute(new FinishTx());
    worker2.execute(new FinishTx());
    worker1.close();
    worker2.close();
    assertEquals(1,propertyKeyCount(db));
    db.shutdown();
  }
  private GraphDatabaseAPI database(){
    return (GraphDatabaseAPI)new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.databaseDir());
  }
  private GraphDatabaseAPI databaseWithManyPropertyKeys(  int propertyKeyCount){
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    StoreFactory storeFactory=new StoreFactory(testDirectory.databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(fileSystemRule.get()),pageCache,fileSystemRule.get(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
    NeoStores neoStores=storeFactory.openAllNeoStores(true);
    PropertyKeyTokenStore store=neoStores.getPropertyKeyTokenStore();
    for (int i=0; i < propertyKeyCount; i++) {
      PropertyKeyTokenRecord record=new PropertyKeyTokenRecord((int)store.nextId());
      record.setInUse(true);
      Collection<DynamicRecord> nameRecords=store.allocateNameRecords(PropertyStore.encodeString(key(i)));
      record.addNameRecords(nameRecords);
      record.setNameId((int)Iterables.first(nameRecords).getId());
      store.updateRecord(record);
    }
    neoStores.close();
    return database();
  }
  private String key(  int i){
    return "key" + i;
  }
  private static Node createNodeWithProperty(  GraphDatabaseService db,  String key,  Object value){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode();
      node.setProperty(key,value);
      tx.success();
      return node;
    }
   }
  private static int propertyKeyCount(  GraphDatabaseAPI db) throws TransactionFailureException {
    InwardKernel kernelAPI=db.getDependencyResolver().resolveDependency(InwardKernel.class);
    try (KernelTransaction tx=kernelAPI.beginTransaction(KernelTransaction.Type.implicit,AnonymousContext.read())){
      return tx.tokenRead().propertyKeyCount();
    }
   }
private static class WorkerState {
    protected final GraphDatabaseService db;
    protected Transaction tx;
    WorkerState(    GraphDatabaseService db){
      this.db=db;
    }
  }
private static class BeginTx implements WorkerCommand<WorkerState,Void> {
    @Override public Void doWork(    WorkerState state){
      state.tx=state.db.beginTx();
      return null;
    }
  }
private static class CreateNodeAndSetProperty implements WorkerCommand<WorkerState,Void> {
    private final String key;
    CreateNodeAndSetProperty(    String key){
      this.key=key;
    }
    @Override public Void doWork(    WorkerState state){
      Node node=state.db.createNode();
      node.setProperty(key,true);
      return null;
    }
  }
private static class FinishTx implements WorkerCommand<WorkerState,Void> {
    @Override public Void doWork(    WorkerState state){
      state.tx.success();
      state.tx.close();
      return null;
    }
  }
}
