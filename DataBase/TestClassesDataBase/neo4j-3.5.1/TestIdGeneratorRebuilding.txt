public class TestIdGeneratorRebuilding {
  @ClassRule public static final PageCacheRule pageCacheRule=new PageCacheRule();
  private EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  private TestDirectory testDirectory=TestDirectory.testDirectory(fsRule.get());
  @Rule public RuleChain ruleChain=RuleChain.outerRule(fsRule).around(testDirectory);
  private EphemeralFileSystemAbstraction fs;
  @Before public void doBefore(){
    fs=fsRule.get();
  }
  @Test public void verifyFixedSizeStoresCanRebuildIdGeneratorSlowly(){
    Config config=Config.defaults(GraphDatabaseSettings.rebuild_idgenerators_fast,"false");
    File storeFile=testDirectory.file("nodes");
    File idFile=testDirectory.file("idNodes");
    DynamicArrayStore labelStore=mock(DynamicArrayStore.class);
    NodeStore store=new NodeStore(storeFile,idFile,config,new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),NullLogProvider.getInstance(),labelStore,RecordFormatSelector.defaultFormat());
    store.initialise(true);
    store.makeStoreOk();
    NodeRecord record=new NodeRecord(0);
    record.setInUse(true);
    int highestId=50;
    for (int i=0; i < highestId; i++) {
      assertThat(store.nextId(),is((long)i));
      record.setId(i);
      store.updateRecord(record);
    }
    store.setHighestPossibleIdInUse(highestId);
    Long[] idsToFree={2L,3L,5L,7L};
    record.setInUse(false);
    for (    long toDelete : idsToFree) {
      record.setId(toDelete);
      store.updateRecord(record);
    }
    store.rebuildIdGenerator();
    store.closeIdGenerator();
    store.openIdGenerator();
    List<Long> nextIds=new ArrayList<>();
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    assertThat(nextIds,contains(2L,3L,5L,7L,50L));
    store.close();
  }
  @Test public void verifyDynamicSizedStoresCanRebuildIdGeneratorSlowly() throws Exception {
    Config config=Config.defaults(GraphDatabaseSettings.rebuild_idgenerators_fast,"false");
    StoreFactory storeFactory=new StoreFactory(testDirectory.databaseLayout(),config,new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),fs,NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
    NeoStores neoStores=storeFactory.openAllNeoStores(true);
    DynamicStringStore store=neoStores.getPropertyStore().getStringStore();
    DynamicRecord record=new DynamicRecord(1);
    record.setInUse(true,PropertyType.STRING.intValue());
    int highestId=50;
    for (int i=1; i <= highestId; i++) {
      assertThat(store.nextId(),is((long)i));
      record.setId(i);
      StringBuilder sb=new StringBuilder(i);
      for (int j=0; j < i; j++) {
        sb.append('a');
      }
      record.setData(sb.toString().getBytes(StandardCharsets.UTF_16));
      store.updateRecord(record);
    }
    store.setHighestPossibleIdInUse(highestId);
    Long[] idsToFree={2L,3L,5L,7L};
    record.setInUse(false);
    for (    long toDelete : idsToFree) {
      record.setId(toDelete);
      store.updateRecord(record);
    }
    store.rebuildIdGenerator();
    List<Long> nextIds=new ArrayList<>();
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    assertThat(nextIds,contains(2L,3L,5L,7L,51L));
    neoStores.close();
  }
  @Test public void rebuildingIdGeneratorMustNotMissOutOnFreeRecordsAtEndOfFilePage(){
    Config config=Config.defaults(GraphDatabaseSettings.rebuild_idgenerators_fast,"false");
    File storeFile=testDirectory.file("nodes");
    File idFile=testDirectory.file("idNodes");
    DynamicArrayStore labelStore=mock(DynamicArrayStore.class);
    NodeStore store=new NodeStore(storeFile,idFile,config,new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),NullLogProvider.getInstance(),labelStore,RecordFormatSelector.defaultFormat());
    store.initialise(true);
    store.makeStoreOk();
    int recordsPerPage=store.getRecordsPerPage();
    NodeRecord record=new NodeRecord(0);
    record.setInUse(true);
    int highestId=recordsPerPage * 3;
    for (int i=0; i < highestId; i++) {
      assertThat(store.nextId(),is((long)i));
      record.setId(i);
      store.updateRecord(record);
    }
    store.setHighestPossibleIdInUse(highestId);
    Long[] idsToFree={recordsPerPage - 2L,recordsPerPage - 1L};
    record.setInUse(false);
    for (    long toDelete : idsToFree) {
      record.setId(toDelete);
      store.updateRecord(record);
    }
    store.rebuildIdGenerator();
    store.closeIdGenerator();
    store.openIdGenerator();
    List<Long> nextIds=new ArrayList<>();
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    nextIds.add(store.nextId());
    assertThat(nextIds,contains(recordsPerPage - 2L,recordsPerPage - 1L,recordsPerPage * 3L));
    store.close();
  }
}
