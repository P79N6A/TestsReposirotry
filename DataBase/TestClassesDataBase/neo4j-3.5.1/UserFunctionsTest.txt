public class UserFunctionsTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  private final Procedures procs=new Procedures();
  private final UserFunctionSignature signature=functionSignature("org","myproc").out(Neo4jTypes.NTAny).build();
  private final CallableUserFunction function=function(signature);
  @Test public void shouldGetRegisteredFunction() throws Throwable {
    procs.register(function);
    assertThat(procs.function(signature.name()).signature(),equalTo(signature));
  }
  @Test public void shouldGetAllRegisteredFunctions() throws Throwable {
    procs.register(function(functionSignature("org","myproc1").out(Neo4jTypes.NTAny).build()));
    procs.register(function(functionSignature("org","myproc2").out(Neo4jTypes.NTAny).build()));
    procs.register(function(functionSignature("org","myproc3").out(Neo4jTypes.NTAny).build()));
    List<UserFunctionSignature> signatures=Iterables.asList(procs.getAllFunctions());
    assertThat(signatures,containsInAnyOrder(functionSignature("org","myproc1").out(Neo4jTypes.NTAny).build(),functionSignature("org","myproc2").out(Neo4jTypes.NTAny).build(),functionSignature("org","myproc3").out(Neo4jTypes.NTAny).build()));
  }
  @Test public void shouldGetRegisteredAggregationFunctions() throws Throwable {
    procs.register(function(functionSignature("org","myfunc1").out(Neo4jTypes.NTAny).build()));
    procs.register(function(functionSignature("org","myfunc2").out(Neo4jTypes.NTAny).build()));
    procs.register(aggregationFunction(functionSignature("org","myaggrfunc1").out(Neo4jTypes.NTAny).build()));
    List<UserFunctionSignature> signatures=Iterables.asList(procs.getAllFunctions());
    assertThat(signatures,containsInAnyOrder(functionSignature("org","myfunc1").out(Neo4jTypes.NTAny).build(),functionSignature("org","myfunc2").out(Neo4jTypes.NTAny).build(),functionSignature("org","myaggrfunc1").out(Neo4jTypes.NTAny).build()));
  }
  @Test public void shouldCallRegisteredFunction() throws Throwable {
    procs.register(function);
    Object result=procs.callFunction(new BasicContext(),signature.name(),new AnyValue[]{numberValue(1337)});
    assertThat(result,equalTo(Values.of(1337)));
  }
  @Test public void shouldNotAllowCallingNonExistingFunction() throws Throwable {
    exception.expect(ProcedureException.class);
    exception.expectMessage("There is no function with the name `org.myproc` registered for this " + "database instance. Please ensure you've spelled the " + "function name correctly and that the function is properly deployed.");
    procs.callFunction(new BasicContext(),signature.name(),new AnyValue[]{numberValue(1337)});
  }
  @Test public void shouldNotAllowRegisteringConflictingName() throws Throwable {
    procs.register(function);
    exception.expect(ProcedureException.class);
    exception.expectMessage("Unable to register function, because the name `org.myproc` is already in use.");
    procs.register(function);
  }
  @Test public void shouldSignalNonExistingFunction(){
    assertThat(procs.function(signature.name()),nullValue());
  }
  @Test public void shouldMakeContextAvailable() throws Throwable {
    Key<String> someKey=key("someKey",String.class);
    procs.register(new CallableUserFunction.BasicUserFunction(signature){
      @Override public AnyValue apply(      Context ctx,      AnyValue[] input) throws ProcedureException {
        return Values.stringValue(ctx.get(someKey));
      }
    }
);
    BasicContext ctx=new BasicContext();
    ctx.put(someKey,"hello, world");
    Object result=procs.callFunction(ctx,signature.name(),new AnyValue[0]);
    assertThat(result,equalTo(Values.of("hello, world")));
  }
  private CallableUserFunction function(  UserFunctionSignature signature){
    return new CallableUserFunction.BasicUserFunction(signature){
      @Override public AnyValue apply(      Context ctx,      AnyValue[] input){
        return input[0];
      }
    }
;
  }
  private CallableUserAggregationFunction aggregationFunction(  UserFunctionSignature signature){
    return new CallableUserAggregationFunction.BasicUserAggregationFunction(signature){
      @Override public UserAggregator create(      Context ctx){
        return null;
      }
    }
;
  }
}
