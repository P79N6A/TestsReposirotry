@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class TestDirectoryExtensionTest {
  @Inject TestDirectory testDirectory;
  @Inject DefaultFileSystemAbstraction fileSystem;
  @Test void testDirectoryInjectionWorks(){
    assertNotNull(testDirectory);
  }
  @Test void testDirectoryInitialisedForUsage(){
    File directory=testDirectory.directory();
    assertNotNull(directory);
    assertTrue(directory.exists());
    Path targetTestData=Paths.get("target","test data");
    assertTrue(directory.getAbsolutePath().contains(targetTestData.toString()));
  }
  @Test void testDirectoryUsesFileSystemFromExtension(){
    assertSame(fileSystem,testDirectory.getFileSystem());
  }
  @Test void createTestFile(){
    File file=testDirectory.createFile("a");
    assertEquals("a",file.getName());
    assertTrue(fileSystem.fileExists(file));
  }
  @Test void failedTestShouldKeepDirectory(){
    CONTEXT.clear();
    execute("failAndKeepDirectory");
    File failedFile=CONTEXT.getValue(FAILED_TEST_FILE_KEY);
    assertNotNull(failedFile);
    assertTrue(failedFile.exists());
  }
  @Test void successfulTestShouldCleanupDirectory(){
    CONTEXT.clear();
    execute("executeAndCleanupDirectory");
    File greenTestFail=CONTEXT.getValue(SUCCESSFUL_TEST_FILE_KEY);
    assertNotNull(greenTestFail);
    assertFalse(greenTestFail.exists());
  }
  @Test @EnabledOnOs(OS.LINUX) void exceptionOnDirectoryDeletionIncludeTestDisplayName() throws IOException {
    CONTEXT.clear();
    FailedTestExecutionListener failedTestListener=new FailedTestExecutionListener();
    execute("lockFileAndFailToDeleteDirectory",failedTestListener);
    File lockedFile=CONTEXT.getValue(LOCKED_TEST_FILE_KEY);
    assertNotNull(lockedFile);
    assertTrue(lockedFile.setReadable(true,true));
    FileUtils.deleteRecursively(lockedFile);
    failedTestListener.assertTestObserver();
  }
  private static void execute(  String testName,  TestExecutionListener... testExecutionListeners){
    LauncherDiscoveryRequest discoveryRequest=LauncherDiscoveryRequestBuilder.request().selectors(selectMethod(DirectoryExtensionLifecycleVerificationTest.class,testName)).configurationParameter(TEST_TOGGLE,"true").build();
    Launcher launcher=LauncherFactory.create();
    launcher.execute(discoveryRequest,testExecutionListeners);
  }
private static class FailedTestExecutionListener implements TestExecutionListener {
    private int resultsObserved;
    @Override public void executionFinished(    TestIdentifier testIdentifier,    TestExecutionResult testExecutionResult){
      if (testExecutionResult.getStatus() == FAILED) {
        resultsObserved++;
        String exceptionMessage=testExecutionResult.getThrowable().map(Throwable::getMessage).orElse(EMPTY);
        assertThat(exceptionMessage,containsString("Fail to cleanup test directory for lockFileAndFailToDeleteDirectory"));
      }
    }
    void assertTestObserver(){
      assertEquals(1,resultsObserved);
    }
  }
}
