@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class LuceneBatchInserterIndexProviderNewImplTest {
  @Inject private TestDirectory testDirectory;
  @Inject private DefaultFileSystemAbstraction fileSystem;
  @Test void createBatchIndexFromAnyIndexStoreProvider() throws Exception {
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir()));
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir(),fileSystem));
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir(),getConfig()));
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir(),getConfigWithProvider(),getExtensions()));
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir(),fileSystem,getConfig()));
    createEndCloseIndexProvider(BatchInserters.inserter(getStoreDir(),fileSystem,getConfigWithProvider(),getExtensions()));
  }
  private static void createEndCloseIndexProvider(  BatchInserter inserter){
    LuceneBatchInserterIndexProviderNewImpl provider=new LuceneBatchInserterIndexProviderNewImpl(inserter);
    provider.shutdown();
    inserter.shutdown();
  }
  private static Iterable<KernelExtensionFactory<?>> getExtensions(){
    return Iterables.asIterable(new LuceneIndexProviderFactory());
  }
  private static Map<String,String> getConfigWithProvider(){
    return getConfig(GraphDatabaseSettings.default_schema_provider.name(),LuceneIndexProviderFactory.PROVIDER_DESCRIPTOR.name());
  }
  private static Map<String,String> getConfig(  String... entries){
    return MapUtil.stringMap(entries);
  }
  private File getStoreDir(){
    return testDirectory.databaseDir();
  }
}
