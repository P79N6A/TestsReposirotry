class ReadyStateTest {
  private final ReadyState state=new ReadyState();
  private final BoltStateMachineState streamingState=mock(BoltStateMachineState.class);
  private final BoltStateMachineState interruptedState=mock(BoltStateMachineState.class);
  private final BoltStateMachineState failedState=mock(BoltStateMachineState.class);
  private final StatementProcessor statementProcessor=mock(StatementProcessor.class);
  private final StateMachineContext context=mock(StateMachineContext.class);
  private final MutableConnectionState connectionState=new MutableConnectionState();
  @BeforeEach void setUp(){
    state.setStreamingState(streamingState);
    state.setInterruptedState(interruptedState);
    state.setFailedState(failedState);
    when(context.connectionState()).thenReturn(connectionState);
    when(context.clock()).thenReturn(Clock.systemUTC());
    connectionState.setStatementProcessor(statementProcessor);
  }
  @Test void shouldThrowWhenNotInitialized() throws Exception {
    ReadyState state=new ReadyState();
    assertThrows(IllegalStateException.class,() -> state.process(PullAllMessage.INSTANCE,context));
    state.setStreamingState(streamingState);
    assertThrows(IllegalStateException.class,() -> state.process(PullAllMessage.INSTANCE,context));
    state.setStreamingState(null);
    state.setInterruptedState(interruptedState);
    assertThrows(IllegalStateException.class,() -> state.process(PullAllMessage.INSTANCE,context));
    state.setInterruptedState(null);
    state.setFailedState(failedState);
    assertThrows(IllegalStateException.class,() -> state.process(PullAllMessage.INSTANCE,context));
  }
  @Test void shouldProcessRunMessage() throws Exception {
    StatementMetadata statementMetadata=mock(StatementMetadata.class);
    when(statementMetadata.fieldNames()).thenReturn(new String[]{"foo","bar","baz"});
    when(statementProcessor.run(any(),any())).thenReturn(statementMetadata);
    BoltResponseHandler responseHandler=mock(BoltResponseHandler.class);
    connectionState.setResponseHandler(responseHandler);
    BoltStateMachineState nextState=state.process(new RunMessage("RETURN 1",EMPTY_MAP),context);
    assertEquals(streamingState,nextState);
    verify(statementProcessor).run("RETURN 1",EMPTY_MAP);
    verify(responseHandler).onMetadata("fields",stringArray("foo","bar","baz"));
    verify(responseHandler).onMetadata(eq("result_available_after"),any());
  }
  @Test void shouldHandleAuthFailureDuringRunMessageProcessing() throws Exception {
    AuthorizationExpiredException error=new AuthorizationExpiredException("Hello");
    when(statementProcessor.run(any(),any())).thenThrow(error);
    BoltStateMachineState nextState=state.process(new RunMessage("RETURN 1",EMPTY_MAP),context);
    assertEquals(failedState,nextState);
    verify(context).handleFailure(error,true);
  }
  @Test void shouldHandleFailureDuringRunMessageProcessing() throws Exception {
    RuntimeException error=new RuntimeException("Hello");
    when(statementProcessor.run(any(),any())).thenThrow(error);
    BoltStateMachineState nextState=state.process(new RunMessage("RETURN 1",EMPTY_MAP),context);
    assertEquals(failedState,nextState);
    verify(context).handleFailure(error,false);
  }
  @Test void shouldProcessResetMessage() throws Exception {
    when(context.resetMachine()).thenReturn(true);
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(state,newState);
  }
  @Test void shouldHandleFailureDuringResetMessageProcessing() throws Exception {
    when(context.resetMachine()).thenReturn(false);
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(failedState,newState);
  }
  @Test void shouldProcessInterruptMessage() throws Exception {
    BoltStateMachineState newState=state.process(InterruptSignal.INSTANCE,context);
    assertEquals(interruptedState,newState);
  }
  @Test void shouldNotProcessUnsupportedMessages() throws Exception {
    List<RequestMessage> unsupportedMessages=asList(PullAllMessage.INSTANCE,DiscardAllMessage.INSTANCE,AckFailureMessage.INSTANCE);
    for (    RequestMessage message : unsupportedMessages) {
      assertNull(state.process(message,context));
    }
  }
  @Test void shouldBeginTransactionWithoutBookmark() throws Exception {
    BoltStateMachineState newState=state.process(new RunMessage("BEGIN",EMPTY_MAP),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).beginTransaction(null);
  }
  @Test void shouldBeginTransactionWithSingleBookmark() throws Exception {
    Map<String,Object> params=map("bookmark","neo4j:bookmark:v1:tx15");
    BoltStateMachineState newState=state.process(new RunMessage("BEGIN",asMapValue(params)),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).beginTransaction(new Bookmark(15));
  }
  @Test void shouldBeginTransactionWithMultipleBookmarks() throws Exception {
    Map<String,Object> params=map("bookmarks",asList("neo4j:bookmark:v1:tx7","neo4j:bookmark:v1:tx1","neo4j:bookmark:v1:tx92","neo4j:bookmark:v1:tx39"));
    BoltStateMachineState newState=state.process(new RunMessage("BEGIN",asMapValue(params)),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).beginTransaction(new Bookmark(92));
  }
  @ParameterizedTest @ValueSource(strings={"begin","BEGIN","   begin   ","   BeGiN ;   "}) void shouldBeginTransaction(  String statement) throws Exception {
    BoltStateMachineState newState=state.process(new RunMessage(statement),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).beginTransaction(any());
  }
  @ParameterizedTest @ValueSource(strings={"commit","COMMIT","   commit   ","   CoMmIt ;   "}) void shouldCommitTransaction(  String statement) throws Exception {
    BoltStateMachineState newState=state.process(new RunMessage(statement),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).commitTransaction();
  }
  @ParameterizedTest @ValueSource(strings={"rollback","ROLLBACK","   rollback   ","   RoLlBaCk ;   "}) void shouldRollbackTransaction(  String statement) throws Exception {
    BoltStateMachineState newState=state.process(new RunMessage(statement),context);
    assertEquals(streamingState,newState);
    verify(statementProcessor).rollbackTransaction();
  }
}
