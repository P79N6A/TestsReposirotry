public class RelationshipExpanderBuilderTest {
  @ClassRule public static final DatabaseRule db=new ImpermanentDatabaseRule();
  @Test public void shouldInterpretNoSpecifiedRelationshipsAsAll(){
    Node node=createSomeData();
    PathExpander expander=RelationshipExpanderBuilder.describeRelationships(map());
    Set<Relationship> expanded;
    try (Transaction tx=db.beginTx()){
      expanded=asSet(expander.expand(singleNodePath(node),NO_STATE));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(asSet(node.getRelationships()),expanded);
      tx.success();
    }
   }
  @Test public void shouldInterpretSomeSpecifiedRelationships(){
    Node node=createSomeData();
    PathExpander expander=RelationshipExpanderBuilder.describeRelationships(map("relationships",map("type",MyRelTypes.TEST.name(),"direction",RelationshipDirection.out.name())));
    Set<Relationship> expanded;
    try (Transaction tx=db.beginTx()){
      expanded=asSet(expander.expand(singleNodePath(node),NO_STATE));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(asSet(node.getRelationships(MyRelTypes.TEST)),expanded);
      tx.success();
    }
   }
  private Node createSomeData(){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode();
      node.createRelationshipTo(db.createNode(),MyRelTypes.TEST);
      node.createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
      tx.success();
      return node;
    }
   }
}
