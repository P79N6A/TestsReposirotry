public class NumberFullScanNonUniqueIndexSamplerTest extends NativeIndexTestUtil<NumberIndexKey,NativeIndexValue> {
  @Test public void shouldIncludeAllValuesInTree() throws Exception {
    Value[] values=generateNumberValues();
    buildTree(values);
    IndexSample sample;
    try (GBPTree<NumberIndexKey,NativeIndexValue> gbpTree=getTree()){
      FullScanNonUniqueIndexSampler<NumberIndexKey,NativeIndexValue> sampler=new FullScanNonUniqueIndexSampler<>(gbpTree,layout);
      sample=sampler.result();
    }
     assertEquals(values.length,sample.sampleSize());
    assertEquals(countUniqueValues(values),sample.uniqueValues());
    assertEquals(values.length,sample.indexSize());
  }
  private Value[] generateNumberValues(){
    ValueType[] numberTypes=RandomValues.including(t -> t.valueGroup == NUMBER);
    int size=20;
    Value[] result=new NumberValue[size];
    for (int i=0; i < size; i++) {
      result[i]=random.randomValues().nextValueOfTypes(numberTypes);
    }
    return result;
  }
  private void buildTree(  Value[] values) throws IOException {
    try (GBPTree<NumberIndexKey,NativeIndexValue> gbpTree=getTree()){
      try (Writer<NumberIndexKey,NativeIndexValue> writer=gbpTree.writer()){
        NumberIndexKey key=layout.newKey();
        NativeIndexValue value=layout.newValue();
        long nodeId=0;
        for (        Value number : values) {
          key.initialize(nodeId);
          key.initFromValue(0,number,NEUTRAL);
          value.from(number);
          writer.put(key,value);
          nodeId++;
        }
      }
       gbpTree.checkpoint(IOLimiter.UNLIMITED);
    }
   }
  @Override protected ValueCreatorUtil<NumberIndexKey,NativeIndexValue> createValueCreatorUtil(){
    return new ValueCreatorUtil<>(forLabel(42,666).withId(0),typesOfGroup(NUMBER),FRACTION_DUPLICATE_NON_UNIQUE);
  }
  @Override IndexLayout<NumberIndexKey,NativeIndexValue> createLayout(){
    return new NumberLayoutNonUnique();
  }
}
