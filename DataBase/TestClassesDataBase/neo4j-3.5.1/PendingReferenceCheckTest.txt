class PendingReferenceCheckTest {
  private PendingReferenceCheck<PropertyRecord> referenceCheck;
  @SuppressWarnings("unchecked") @BeforeEach void setUp(){
    RecordAccess records=mock(RecordAccess.class);
    ReportHandler handler=new ReportHandler(mock(InconsistencyReport.class),mock(ConsistencyReporter.ProxyFactory.class),RecordType.PROPERTY,records,new PropertyRecord(0),NO_MONITOR);
    this.referenceCheck=new PendingReferenceCheck<>(handler,mock(ComparativeRecordChecker.class));
  }
  @Test void shouldAllowSkipAfterSkip(){
    referenceCheck.skip();
    referenceCheck.skip();
  }
  @Test void shouldAllowSkipAfterCheckReference(){
    referenceCheck.checkReference(new PropertyRecord(0),null);
    referenceCheck.skip();
  }
  @Test void shouldAllowSkipAfterCheckDiffReference(){
    referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null);
    referenceCheck.skip();
  }
  @Test void shouldNotAllowCheckReferenceAfterSkip(){
    referenceCheck.skip();
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkReference(new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
  @Test void shouldNotAllowCheckDiffReferenceAfterSkip(){
    referenceCheck.skip();
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
  @Test void shouldNotAllowCheckReferenceAfterCheckReference(){
    referenceCheck.checkReference(new PropertyRecord(0),null);
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkReference(new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
  @Test void shouldNotAllowCheckDiffReferenceAfterCheckReference(){
    referenceCheck.checkReference(new PropertyRecord(0),null);
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
  @Test void shouldNotAllowCheckReferenceAfterCheckDiffReference(){
    referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null);
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkReference(new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
  @Test void shouldNotAllowCheckDiffReferenceAfterCheckDiffReference(){
    referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null);
    IllegalStateException exception=assertThrows(IllegalStateException.class,() -> referenceCheck.checkDiffReference(new PropertyRecord(0),new PropertyRecord(0),null));
    assertEquals("Reference has already been checked.",exception.getMessage());
  }
}
