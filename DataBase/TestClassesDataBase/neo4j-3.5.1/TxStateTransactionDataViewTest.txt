public class TxStateTransactionDataViewTest {
  private static final long[] NO_LABELS=new long[0];
  private final ThreadToStatementContextBridge bridge=mock(ThreadToStatementContextBridge.class);
  private final Statement stmt=mock(Statement.class);
  private final StubStorageCursors ops=new StubStorageCursors();
  private final KernelTransaction transaction=mock(KernelTransaction.class);
  private final TokenRead tokenRead=mock(TokenRead.class);
  private final TransactionState state=new TxState();
  @Before public void setup() throws PropertyKeyIdNotFoundKernelException {
    when(transaction.tokenRead()).thenReturn(tokenRead);
    when(bridge.get()).thenReturn(stmt);
    when(tokenRead.propertyKeyName(anyInt())).thenAnswer(invocationOnMock -> {
      int id=invocationOnMock.getArgument(0);
      return ops.propertyKeyTokenHolder().getTokenById(id).name();
    }
);
  }
  @Test public void showsCreatedNodes(){
    state.nodeDoCreate(1);
    state.nodeDoCreate(2);
    assertThat(idList(snapshot().createdNodes()),equalTo(asList(1L,2L)));
  }
  @Test public void showsDeletedNodes() throws Exception {
    state.nodeDoDelete(1L);
    state.nodeDoDelete(2L);
    int labelId=15;
    when(tokenRead.nodeLabelName(labelId)).thenReturn("label");
    ops.withNode(1,new long[]{labelId},genericMap("key",Values.of("p")));
    ops.withNode(2,NO_LABELS);
    TxStateTransactionDataSnapshot snapshot=snapshot();
    assertThat(idList(snapshot.deletedNodes()),equalTo(asList(1L,2L)));
    assertThat(single(snapshot.removedLabels()).label().name(),equalTo("label"));
    assertThat(single(snapshot.removedNodeProperties()).key(),equalTo("key"));
  }
  @Test public void showsAddedRelationships(){
    state.relationshipDoCreate(1,1,1L,2L);
    state.relationshipDoCreate(2,1,1L,1L);
    assertThat(idList(snapshot().createdRelationships()),equalTo(asList(1L,2L)));
  }
  @Test public void showsRemovedRelationships() throws Exception {
    state.relationshipDoDelete(1L,1,1L,2L);
    state.relationshipDoDelete(2L,1,1L,1L);
    ops.withRelationship(1,1,1,2);
    ops.withRelationship(2,1,1,1,genericMap("key",Values.of("p")));
    TxStateTransactionDataSnapshot snapshot=snapshot();
    assertThat(idList(snapshot.deletedRelationships()),equalTo(asList(1L,2L)));
    assertThat(single(snapshot.removedRelationshipProperties()).key(),equalTo("key"));
  }
  @Test public void correctlySaysNodeIsDeleted(){
    state.nodeDoDelete(1L);
    Node node=mock(Node.class);
    when(node.getId()).thenReturn(1L);
    ops.withNode(1);
    assertThat(snapshot().isDeleted(node),equalTo(true));
  }
  @Test public void correctlySaysRelIsDeleted(){
    state.relationshipDoDelete(1L,1,1L,2L);
    Relationship rel=mock(Relationship.class);
    when(rel.getId()).thenReturn(1L);
    ops.withRelationship(1L,1L,1,2L);
    assertThat(snapshot().isDeleted(rel),equalTo(true));
  }
  @Test public void shouldListAddedNodePropertiesProperties() throws Exception {
    int propertyKeyId=ops.propertyKeyTokenHolder().getOrCreateId("theKey");
    Value prevValue=Values.of("prevValue");
    state.nodeDoChangeProperty(1L,propertyKeyId,Values.of("newValue"));
    ops.withNode(1,NO_LABELS,genericMap("theKey",prevValue));
    Iterable<PropertyEntry<Node>> propertyEntries=snapshot().assignedNodeProperties();
    PropertyEntry<Node> entry=single(propertyEntries);
    assertThat(entry.key(),equalTo("theKey"));
    assertThat(entry.value(),equalTo("newValue"));
    assertThat(entry.previouslyCommitedValue(),equalTo("prevValue"));
    assertThat(entry.entity().getId(),equalTo(1L));
  }
  @Test public void shouldListRemovedNodeProperties() throws Exception {
    int propertyKeyId=ops.propertyKeyTokenHolder().getOrCreateId("theKey");
    Value prevValue=Values.of("prevValue");
    state.nodeDoRemoveProperty(1L,propertyKeyId);
    ops.withNode(1,NO_LABELS,genericMap("theKey",prevValue));
    Iterable<PropertyEntry<Node>> propertyEntries=snapshot().removedNodeProperties();
    PropertyEntry<Node> entry=single(propertyEntries);
    assertThat(entry.key(),equalTo("theKey"));
    assertThat(entry.previouslyCommitedValue(),equalTo("prevValue"));
    assertThat(entry.entity().getId(),equalTo(1L));
  }
  @Test public void shouldListRemovedRelationshipProperties() throws Exception {
    int propertyKeyId=ops.propertyKeyTokenHolder().getOrCreateId("theKey");
    Value prevValue=Values.of("prevValue");
    state.relationshipDoRemoveProperty(1L,propertyKeyId);
    ops.withRelationship(1,0,0,0,genericMap("theKey",prevValue));
    Iterable<PropertyEntry<Relationship>> propertyEntries=snapshot().removedRelationshipProperties();
    PropertyEntry<Relationship> entry=single(propertyEntries);
    assertThat(entry.key(),equalTo("theKey"));
    assertThat(entry.previouslyCommitedValue(),equalTo("prevValue"));
    assertThat(entry.entity().getId(),equalTo(1L));
  }
  @Test public void shouldListAddedRelationshipProperties() throws Exception {
    Value prevValue=Values.of("prevValue");
    int propertyKeyId=ops.propertyKeyTokenHolder().getOrCreateId("theKey");
    state.relationshipDoReplaceProperty(1L,propertyKeyId,prevValue,Values.of("newValue"));
    ops.withRelationship(1,0,0,0,genericMap("theKey",prevValue));
    Iterable<PropertyEntry<Relationship>> propertyEntries=snapshot().assignedRelationshipProperties();
    PropertyEntry<Relationship> entry=single(propertyEntries);
    assertThat(entry.key(),equalTo("theKey"));
    assertThat(entry.value(),equalTo("newValue"));
    assertThat(entry.previouslyCommitedValue(),equalTo("prevValue"));
    assertThat(entry.entity().getId(),equalTo(1L));
  }
  @Test public void shouldListAddedLabels() throws Exception {
    int labelId=2;
    when(tokenRead.nodeLabelName(labelId)).thenReturn("theLabel");
    state.nodeDoAddLabel(labelId,1L);
    Iterable<LabelEntry> labelEntries=snapshot().assignedLabels();
    LabelEntry entry=single(labelEntries);
    assertThat(entry.label().name(),equalTo("theLabel"));
    assertThat(entry.node().getId(),equalTo(1L));
  }
  @Test public void shouldListRemovedLabels() throws Exception {
    int labelId=2;
    when(tokenRead.nodeLabelName(labelId)).thenReturn("theLabel");
    state.nodeDoRemoveLabel(labelId,1L);
    Iterable<LabelEntry> labelEntries=snapshot().removedLabels();
    LabelEntry entry=single(labelEntries);
    assertThat(entry.label().name(),equalTo("theLabel"));
    assertThat(entry.node().getId(),equalTo(1L));
  }
  @Test public void accessTransactionIdAndCommitTime(){
    long committedTransactionId=7L;
    long commitTime=10L;
    when(transaction.getTransactionId()).thenReturn(committedTransactionId);
    when(transaction.getCommitTime()).thenReturn(commitTime);
    TxStateTransactionDataSnapshot transactionDataSnapshot=snapshot();
    assertEquals(committedTransactionId,transactionDataSnapshot.getTransactionId());
    assertEquals(commitTime,transactionDataSnapshot.getCommitTime());
  }
  @Test public void shouldGetEmptyUsernameForAnonymousContext(){
    when(transaction.securityContext()).thenReturn(AnonymousContext.read().authorize(s -> -1,GraphDatabaseSettings.DEFAULT_DATABASE_NAME));
    TxStateTransactionDataSnapshot transactionDataSnapshot=snapshot();
    assertEquals("",transactionDataSnapshot.username());
  }
  @Test public void shouldAccessUsernameFromAuthSubject(){
    AuthSubject authSubject=mock(AuthSubject.class);
    when(authSubject.username()).thenReturn("Christof");
    when(transaction.securityContext()).thenReturn(new SecurityContext(authSubject,AccessMode.Static.FULL));
    TxStateTransactionDataSnapshot transactionDataSnapshot=snapshot();
    assertEquals("Christof",transactionDataSnapshot.username());
  }
  @Test public void shouldAccessEmptyMetaData(){
    TxStateTransactionDataSnapshot transactionDataSnapshot=snapshot();
    assertEquals(0,transactionDataSnapshot.metaData().size());
  }
  @Test public void shouldAccessExampleMetaData(){
    EmbeddedProxySPI spi=mock(EmbeddedProxySPI.class);
    final KernelTransactionImplementation transaction=mock(KernelTransactionImplementation.class);
    when(transaction.getMetaData()).thenReturn(genericMap("username","Igor"));
    TxStateTransactionDataSnapshot transactionDataSnapshot=new TxStateTransactionDataSnapshot(state,spi,ops,transaction);
    assertEquals(1,transactionDataSnapshot.metaData().size());
    assertThat("Expected metadata map to contain defined username",transactionDataSnapshot.metaData(),equalTo(genericMap("username","Igor")));
  }
  private List<Long> idList(  Iterable<? extends PropertyContainer> entities){
    List<Long> out=new ArrayList<>();
    for (    PropertyContainer entity : entities) {
      out.add(entity instanceof Node ? ((Node)entity).getId() : ((Relationship)entity).getId());
    }
    return out;
  }
  private TxStateTransactionDataSnapshot snapshot(){
    EmbeddedProxySPI spi=mock(EmbeddedProxySPI.class);
    when(spi.newNodeProxy(anyLong())).thenAnswer(invocation -> new NodeProxy(spi,invocation.getArgument(0)));
    when(spi.newRelationshipProxy(anyLong())).thenAnswer(invocation -> new RelationshipProxy(spi,invocation.getArgument(0)));
    when(spi.newRelationshipProxy(anyLong(),anyLong(),anyInt(),anyLong())).thenAnswer(invocation -> new RelationshipProxy(spi,invocation.getArgument(0),invocation.getArgument(1),invocation.getArgument(2),invocation.getArgument(3)));
    return new TxStateTransactionDataSnapshot(state,spi,ops,transaction);
  }
}
