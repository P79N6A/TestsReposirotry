/** 
 * Test the implementation of the  {@link org.neo4j.kernel.extension.KernelExtensionFactory} framework. Treats theframework as a black box and takes the perspective of the extension, making sure that the framework fulfills its part of the contract. The parent class ( {@link KernelExtensionFactoryContractTest}) takes the opposite approach, it treats the extension implementation as a black box to assert that it fulfills the requirements stipulated by the framework.
 */
public final class TestKernelExtension extends KernelExtensionFactoryContractTest {
  public TestKernelExtension(){
    super(DummyExtensionFactory.EXTENSION_ID,DummyExtensionFactory.class);
  }
  /** 
 * Check that lifecycle status of extension is STARTED
 */
  @Test public void shouldBeStarted(){
    GraphDatabaseAPI graphdb=graphDb(0);
    try {
      assertEquals(LifecycleStatus.STARTED,graphdb.getDependencyResolver().resolveDependency(GlobalKernelExtensions.class).resolveDependency(DummyExtension.class).getStatus());
    }
  finally {
      graphdb.shutdown();
    }
  }
  /** 
 * Check that dependencies can be accessed
 */
  @Test public void dependenciesCanBeRetrieved(){
    GraphDatabaseAPI graphdb=graphDb(0);
    try {
      assertEquals(graphdb.getDependencyResolver().resolveDependency(Config.class),graphdb.getDependencyResolver().resolveDependency(GlobalKernelExtensions.class).resolveDependency(DummyExtension.class).getDependencies().getConfig());
      assertEquals(graphdb.getDependencyResolver().resolveDependency(DatabaseManager.class),graphdb.getDependencyResolver().resolveDependency(GlobalKernelExtensions.class).resolveDependency(DummyExtension.class).getDependencies().getDatabaseManager());
    }
  finally {
      graphdb.shutdown();
    }
  }
  /** 
 * Check that lifecycle status of extension is SHUTDOWN
 */
  @Test public void shouldBeShutdown(){
    GraphDatabaseAPI graphdb=graphDb(0);
    graphdb.shutdown();
    assertEquals(LifecycleStatus.SHUTDOWN,graphdb.getDependencyResolver().resolveDependency(GlobalKernelExtensions.class).resolveDependency(DummyExtension.class).getStatus());
  }
}
