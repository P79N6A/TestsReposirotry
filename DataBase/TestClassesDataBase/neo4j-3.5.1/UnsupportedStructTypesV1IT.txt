@RunWith(Parameterized.class) public class UnsupportedStructTypesV1IT {
  private static final String USER_AGENT="TestClient/1.0";
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> settings.put(auth_enabled.name(),"false"));
  @Parameterized.Parameter public Class<? extends TransportConnection> connectionClass;
  private HostnamePort address;
  private TransportConnection connection;
  private TransportTestUtil util;
  @Parameterized.Parameters(name="{0}") public static List<Class<? extends TransportConnection>> transports(){
    return asList(SocketConnection.class,WebSocketConnection.class,SecureSocketConnection.class,SecureWebSocketConnection.class);
  }
  @Before public void setup() throws Exception {
    address=server.lookupDefaultConnector();
    connection=connectionClass.newInstance();
    util=new TransportTestUtil(new Neo4jPackV1());
  }
  @After public void cleanup() throws Exception {
    if (connection != null) {
      connection.disconnect();
    }
  }
  @Test public void shouldFailWhenPoint2DIsSentWithRun() throws Exception {
    testFailureWithV2Value(pointValue(CoordinateReferenceSystem.WGS84,1.2,3.4),"Point");
  }
  @Test public void shouldFailWhenPoint3DIsSentWithRun() throws Exception {
    testFailureWithV2Value(pointValue(CoordinateReferenceSystem.WGS84_3D,1.2,3.4,4.5),"Point");
  }
  @Test public void shouldFailWhenDurationIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(Duration.ofDays(10)),"Duration");
  }
  @Test public void shouldFailWhenDateIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(LocalDate.now()),"Date");
  }
  @Test public void shouldFailWhenLocalTimeIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(LocalTime.now()),"LocalTime");
  }
  @Test public void shouldFailWhenLocalDateTimeIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(LocalDateTime.now()),"LocalDateTime");
  }
  @Test public void shouldFailWhenOffsetTimeIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(OffsetTime.now()),"OffsetTime");
  }
  @Test public void shouldFailWhenOffsetDateTimeIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(OffsetDateTime.now()),"OffsetDateTime");
  }
  @Test public void shouldFailWhenZonedDateTimeIsSentWithRun() throws Exception {
    testFailureWithV2Value(ValueUtils.of(ZonedDateTime.now()),"ZonedDateTime");
  }
  private void testFailureWithV2Value(  AnyValue value,  String description) throws Exception {
    connection.connect(address).send(util.defaultAcceptedVersions());
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    connection.send(util.chunk(new InitMessage(USER_AGENT,Collections.emptyMap())));
    assertThat(connection,util.eventuallyReceives(msgSuccess()));
    connection.send(util.chunk(64,createRunWithV2Value(value)));
    assertThat(connection,util.eventuallyReceives(msgFailure(Status.Statement.TypeError,description + " values cannot be unpacked with this version of bolt.")));
    assertThat(connection,eventuallyDisconnects());
  }
  private byte[] createRunWithV2Value(  AnyValue value) throws IOException {
    PackedOutputArray out=new PackedOutputArray();
    Neo4jPack.Packer packer=new Neo4jPackV2().newPacker(out);
    packer.packStructHeader(2,RunMessage.SIGNATURE);
    packer.pack("RETURN $x");
    packer.packMapHeader(1);
    packer.pack("x");
    packer.pack(value);
    return out.bytes();
  }
}
