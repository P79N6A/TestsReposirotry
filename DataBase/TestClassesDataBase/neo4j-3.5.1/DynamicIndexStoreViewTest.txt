public class DynamicIndexStoreViewTest {
  private final LabelScanStore labelScanStore=mock(LabelScanStore.class);
  private final NeoStores neoStores=mock(NeoStores.class);
  private final NodeStore nodeStore=mock(NodeStore.class);
  private final CountsTracker countStore=mock(CountsTracker.class);
  private final Visitor<EntityUpdates,Exception> propertyUpdateVisitor=mock(Visitor.class);
  private final Visitor<NodeLabelUpdate,Exception> labelUpdateVisitor=mock(Visitor.class);
  private final IntPredicate propertyKeyIdFilter=mock(IntPredicate.class);
  private final AllEntriesLabelScanReader nodeLabelRanges=mock(AllEntriesLabelScanReader.class);
  @Before public void setUp(){
    NodeRecord nodeRecord=getNodeRecord();
    when(labelScanStore.allNodeLabelRanges()).thenReturn(nodeLabelRanges);
    when(neoStores.getCounts()).thenReturn(countStore);
    when(neoStores.getNodeStore()).thenReturn(nodeStore);
    when(nodeStore.newRecord()).thenReturn(nodeRecord);
    doAnswer(invocation -> {
      NodeRecord record=invocation.getArgument(1);
      record.initialize(true,1L,false,1L,0L);
      record.setId(invocation.getArgument(0));
      return null;
    }
).when(nodeStore).getRecordByCursor(anyLong(),any(NodeRecord.class),any(RecordLoad.class),any(PageCursor.class));
    doAnswer(invocation -> {
      NodeRecord record=invocation.getArgument(0);
      record.initialize(true,1L,false,1L,0L);
      record.setId(record.getId() + 1);
      return null;
    }
).when(nodeStore).nextRecordByCursor(any(NodeRecord.class),any(RecordLoad.class),any(PageCursor.class));
  }
  @Test public void visitOnlyLabeledNodes() throws Exception {
    LabelScanReader labelScanReader=mock(LabelScanReader.class);
    when(labelScanStore.newReader()).thenReturn(labelScanReader);
    when(nodeLabelRanges.maxCount()).thenReturn(1L);
    PrimitiveLongResourceIterator labeledNodesIterator=PrimitiveLongResourceCollections.iterator(null,1,2,3,4,5,6,7,8);
    when(nodeStore.getHighestPossibleIdInUse()).thenReturn(200L);
    when(nodeStore.getHighId()).thenReturn(20L);
    when(labelScanReader.nodesWithAnyOfLabels(new int[]{2,6})).thenReturn(labeledNodesIterator);
    when(nodeStore.openPageCursorForReading(anyLong())).thenReturn(mock(PageCursor.class));
    mockLabelNodeCount(countStore,2);
    mockLabelNodeCount(countStore,6);
    DynamicIndexStoreView storeView=dynamicIndexStoreView();
    StoreScan<Exception> storeScan=storeView.visitNodes(new int[]{2,6},propertyKeyIdFilter,propertyUpdateVisitor,labelUpdateVisitor,false);
    storeScan.run();
    Mockito.verify(nodeStore,times(8)).getRecordByCursor(anyLong(),any(NodeRecord.class),any(RecordLoad.class),any(PageCursor.class));
  }
  @Test public void shouldBeAbleToForceStoreScan() throws Exception {
    when(labelScanStore.newReader()).thenThrow(new RuntimeException("Should not be used"));
    when(nodeStore.getHighestPossibleIdInUse()).thenReturn(200L);
    when(nodeStore.getHighId()).thenReturn(20L);
    when(nodeStore.openPageCursorForReading(anyLong())).thenReturn(mock(PageCursor.class));
    mockLabelNodeCount(countStore,2);
    mockLabelNodeCount(countStore,6);
    DynamicIndexStoreView storeView=dynamicIndexStoreView();
    StoreScan<Exception> storeScan=storeView.visitNodes(new int[]{2,6},propertyKeyIdFilter,propertyUpdateVisitor,labelUpdateVisitor,true);
    storeScan.run();
    Mockito.verify(nodeStore,times(1)).getRecordByCursor(anyLong(),any(NodeRecord.class),any(RecordLoad.class),any(PageCursor.class));
    Mockito.verify(nodeStore,times(200)).nextRecordByCursor(any(NodeRecord.class),any(RecordLoad.class),any(PageCursor.class));
  }
  private DynamicIndexStoreView dynamicIndexStoreView(){
    LockService locks=LockService.NO_LOCK_SERVICE;
    return new DynamicIndexStoreView(new NeoStoreIndexStoreView(locks,neoStores),labelScanStore,locks,neoStores,NullLogProvider.getInstance());
  }
  private NodeRecord getNodeRecord(){
    NodeRecord nodeRecord=new NodeRecord(0L);
    nodeRecord.initialize(true,1L,false,1L,0L);
    return nodeRecord;
  }
  private void mockLabelNodeCount(  CountsTracker countStore,  int labelId){
    Register.DoubleLongRegister register=Registers.newDoubleLongRegister(labelId,labelId);
    when(countStore.nodeCount(eq(labelId),any(Register.DoubleLongRegister.class))).thenReturn(register);
  }
}
