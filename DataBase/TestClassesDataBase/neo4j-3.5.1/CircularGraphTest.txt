public class CircularGraphTest extends TraversalTestBase {
  @Before public void createTheGraph(){
    createGraph("1 TO 2","2 TO 3","3 TO 1");
  }
  @Test public void testCircularBug(){
    final long timestamp=3;
    try (Transaction tx=beginTx()){
      getNodeWithName("2").setProperty("timestamp",1L);
      getNodeWithName("3").setProperty("timestamp",2L);
      tx.success();
    }
     try (Transaction tx2=beginTx()){
      final RelationshipType type=RelationshipType.withName("TO");
      Iterator<Node> nodes=getGraphDb().traversalDescription().depthFirst().relationships(type,Direction.OUTGOING).evaluator(path -> {
        Relationship rel=path.lastRelationship();
        boolean relIsOfType=rel != null && rel.isType(type);
        boolean prune=relIsOfType && (Long)path.endNode().getProperty("timestamp") >= timestamp;
        return Evaluation.of(relIsOfType,!prune);
      }
).traverse(node("1")).nodes().iterator();
      assertEquals("2",nodes.next().getProperty("name"));
      assertEquals("3",nodes.next().getProperty("name"));
      assertFalse(nodes.hasNext());
    }
   }
}
