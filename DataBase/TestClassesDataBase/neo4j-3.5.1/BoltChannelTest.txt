class BoltChannelTest {
  private final Channel channel=mock(Channel.class);
  @Test void shouldCloseUnderlyingChannelWhenItIsOpen(){
    Channel channel=channelMock(true);
    BoltChannel boltChannel=new BoltChannel("bolt-1","bolt",channel);
    boltChannel.close();
    verify(channel).close();
  }
  @Test void shouldNotCloseUnderlyingChannelWhenItIsClosed(){
    Channel channel=channelMock(false);
    BoltChannel boltChannel=new BoltChannel("bolt-1","bolt",channel);
    boltChannel.close();
    verify(channel,never()).close();
  }
  @Test void shouldHaveId(){
    BoltChannel boltChannel=new BoltChannel("bolt-42","bolt",channel);
    assertEquals("bolt-42",boltChannel.id());
  }
  @Test void shouldHaveConnector(){
    BoltChannel boltChannel=new BoltChannel("bolt-1","my-bolt",channel);
    assertEquals("my-bolt",boltChannel.connector());
  }
  @Test void shouldHaveConnectTime(){
    BoltChannel boltChannel=new BoltChannel("bolt-1","my-bolt",channel);
    assertThat(boltChannel.connectTime(),greaterThan(0L));
  }
  @Test void shouldHaveUsernameAndUserAgent(){
    BoltChannel boltChannel=new BoltChannel("bolt-1","my-bolt",channel);
    assertNull(boltChannel.username());
    boltChannel.updateUser("hello","my-bolt-driver/1.2.3");
    assertEquals("hello",boltChannel.username());
    assertEquals("my-bolt-driver/1.2.3",boltChannel.userAgent());
  }
  @Test @SuppressWarnings("deprecation") void shouldExposeClientConnectionInfo(){
    EmbeddedChannel channel=new EmbeddedChannel();
    BoltChannel boltChannel=new BoltChannel("bolt-42","my-bolt",channel);
    ClientConnectionInfo info1=boltChannel.info();
    assertEquals("bolt-42",info1.connectionId());
    assertEquals("bolt",info1.protocol());
    assertEquals(SocketAddress.format(channel.remoteAddress()),info1.clientAddress());
    boltChannel.updateUser("Tom","my-driver");
    ClientConnectionInfo info2=boltChannel.info();
    assertEquals("bolt-42",info2.connectionId());
    assertEquals("bolt",info2.protocol());
    assertEquals(SocketAddress.format(channel.remoteAddress()),info2.clientAddress());
    assertThat(info2.asConnectionDetails(),containsString("Tom"));
    assertThat(info2.asConnectionDetails(),containsString("my-driver"));
  }
  private static Channel channelMock(  boolean open){
    Channel channel=mock(Channel.class);
    when(channel.isOpen()).thenReturn(open);
    ChannelFuture channelFuture=mock(ChannelFuture.class);
    when(channel.close()).thenReturn(channelFuture);
    return channel;
  }
}
