public class UnionIndexCapabilityTest {
  private static final IndexOrder[] ORDER_CAPABILITIES_ALL=new IndexOrder[]{IndexOrder.ASCENDING,IndexOrder.DESCENDING};
  private static final IndexOrder[] ORDER_CAPABILITIES_ONLY_ASC=new IndexOrder[]{IndexOrder.ASCENDING};
  private static final IndexOrder[] ORDER_CAPABILITIES_ONLY_DES=new IndexOrder[]{IndexOrder.DESCENDING};
  private static final IndexOrder[] ORDER_CAPABILITIES_NONE=new IndexOrder[0];
  @Test public void shouldCreateUnionOfOrderCapabilities(){
    UnionIndexCapability union;
    union=unionOfOrderCapabilities(ORDER_CAPABILITIES_NONE,ORDER_CAPABILITIES_ONLY_ASC);
    assertOrderCapability(union,ORDER_CAPABILITIES_ONLY_ASC);
    union=unionOfOrderCapabilities(ORDER_CAPABILITIES_NONE,ORDER_CAPABILITIES_ALL);
    assertOrderCapability(union,ORDER_CAPABILITIES_ALL);
    union=unionOfOrderCapabilities(ORDER_CAPABILITIES_ONLY_ASC,ORDER_CAPABILITIES_ONLY_DES);
    assertOrderCapability(union,ORDER_CAPABILITIES_ALL);
    union=unionOfOrderCapabilities(ORDER_CAPABILITIES_ONLY_ASC,ORDER_CAPABILITIES_ALL);
    assertOrderCapability(union,ORDER_CAPABILITIES_ALL);
    union=unionOfOrderCapabilities(ORDER_CAPABILITIES_ONLY_ASC,ORDER_CAPABILITIES_ONLY_ASC);
    assertOrderCapability(union,ORDER_CAPABILITIES_ONLY_ASC);
  }
  @Test public void shouldCreateUnionOfValueCapability(){
    UnionIndexCapability union;
    union=unionOfValueCapabilities(IndexValueCapability.NO,IndexValueCapability.NO);
    assertValueCapability(union,IndexValueCapability.NO);
    union=unionOfValueCapabilities(IndexValueCapability.NO,IndexValueCapability.PARTIAL);
    assertValueCapability(union,IndexValueCapability.PARTIAL);
    union=unionOfValueCapabilities(IndexValueCapability.NO,IndexValueCapability.YES);
    assertValueCapability(union,IndexValueCapability.YES);
    union=unionOfValueCapabilities(IndexValueCapability.PARTIAL,IndexValueCapability.PARTIAL);
    assertValueCapability(union,IndexValueCapability.PARTIAL);
    union=unionOfValueCapabilities(IndexValueCapability.PARTIAL,IndexValueCapability.YES);
    assertValueCapability(union,IndexValueCapability.YES);
    union=unionOfValueCapabilities(IndexValueCapability.YES,IndexValueCapability.YES);
    assertValueCapability(union,IndexValueCapability.YES);
  }
  @Test public void shouldCreateUnionOfIndexLimitations(){
    UnionIndexCapability union;
    union=unionOfIndexLimitations(IndexCapability.LIMITIATION_NONE,IndexCapability.LIMITIATION_NONE);
    assertEquals(Collections.emptySet(),asSet(union.limitations()));
    union=unionOfIndexLimitations(IndexCapability.LIMITIATION_NONE,array(IndexLimitation.SLOW_CONTAINS));
    assertEquals(asSet(IndexLimitation.SLOW_CONTAINS),asSet(union.limitations()));
    union=unionOfIndexLimitations(array(IndexLimitation.SLOW_CONTAINS),array(IndexLimitation.SLOW_CONTAINS));
    assertEquals(asSet(IndexLimitation.SLOW_CONTAINS),asSet(union.limitations()));
  }
  private UnionIndexCapability unionOfIndexLimitations(  IndexLimitation[]... limitations){
    List<IndexCapability> capabilities=new ArrayList<>();
    for (    IndexLimitation[] limitation : limitations) {
      capabilities.add(capabilityWithIndexLimitations(limitation));
    }
    return new UnionIndexCapability(capabilities);
  }
  private IndexCapability capabilityWithIndexLimitations(  IndexLimitation[] limitations){
    IndexCapability mock=mockedIndexCapability();
    when(mock.limitations()).thenReturn(limitations);
    return mock;
  }
  private UnionIndexCapability unionOfValueCapabilities(  IndexValueCapability... valueCapabilities){
    List<IndexCapability> capabilities=new ArrayList<>(valueCapabilities.length);
    for (    IndexValueCapability valueCapability : valueCapabilities) {
      capabilities.add(capabilityWithValue(valueCapability));
    }
    return new UnionIndexCapability(capabilities);
  }
  private UnionIndexCapability unionOfOrderCapabilities(  IndexOrder[]... indexOrders){
    List<IndexCapability> capabilities=new ArrayList<>(indexOrders.length);
    for (    IndexOrder[] indexOrder : indexOrders) {
      capabilities.add(capabilityWithOrder(indexOrder));
    }
    return new UnionIndexCapability(capabilities);
  }
  private IndexCapability capabilityWithValue(  IndexValueCapability valueCapability){
    IndexCapability mock=mockedIndexCapability();
    when(mock.valueCapability(any())).thenReturn(valueCapability);
    return mock;
  }
  private IndexCapability mockedIndexCapability(){
    IndexCapability mock=mock(IndexCapability.class);
    when(mock.limitations()).thenReturn(IndexCapability.LIMITIATION_NONE);
    return mock;
  }
  private IndexCapability capabilityWithOrder(  IndexOrder[] indexOrder){
    IndexCapability mock=mockedIndexCapability();
    when(mock.orderCapability(any())).thenReturn(indexOrder);
    return mock;
  }
  private void assertValueCapability(  UnionIndexCapability union,  IndexValueCapability expectedValueCapability){
    IndexValueCapability actual=union.valueCapability(someValueCategory());
    assertEquals(expectedValueCapability,actual);
  }
  private void assertOrderCapability(  UnionIndexCapability union,  IndexOrder... expected){
    IndexOrder[] actual=union.orderCapability(someValueCategory());
    assertTrue("Actual contains all expected",ArrayUtil.containsAll(expected,actual));
    assertTrue("Actual contains nothing else than expected",ArrayUtil.containsAll(actual,expected));
  }
  private ValueCategory someValueCategory(){
    return ValueCategory.TEXT;
  }
}
