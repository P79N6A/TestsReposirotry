private static class SingleIndicator implements TestRule {
  ProgressMonitorFactory mock(  Indicator indicatorMock,  int indicatorSteps){
    when(indicatorMock.reportResolution()).thenReturn(indicatorSteps);
    ProgressMonitorFactory factory=Mockito.mock(ProgressMonitorFactory.class);
    when(factory.newIndicator(any(String.class))).thenReturn(indicatorMock);
    factoryMocks.put(factory,false);
    return factory;
  }
  private final Map<ProgressMonitorFactory,Boolean> factoryMocks=new HashMap<>();
  @Override public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        base.evaluate();
        for (        Map.Entry<ProgressMonitorFactory,Boolean> factoryMock : factoryMocks.entrySet()) {
          verify(factoryMock.getKey(),times(1)).newIndicator(any(String.class));
        }
      }
    }
;
  }
}
