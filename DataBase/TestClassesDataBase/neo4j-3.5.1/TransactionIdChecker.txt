public static class TransactionIdChecker {
  private final File workingDirectory;
  public TransactionIdChecker(  File workingDirectory){
    this.workingDirectory=workingDirectory;
  }
  public long parseAllTxLogs() throws IOException {
    long txId=TransactionIdStore.BASE_TX_ID;
    try (FileSystemAbstraction fs=new DefaultFileSystemAbstraction();ReadableLogChannel channel=openLogFile(fs,0)){
      LogEntryReader<ReadableLogChannel> reader=new VersionAwareLogEntryReader<>();
      LogEntry logEntry=reader.readLogEntry(channel);
      for (; logEntry != null; logEntry=reader.readLogEntry(channel)) {
        if (logEntry.getType() == LogEntryByteCodes.TX_COMMIT) {
          txId=logEntry.<LogEntryCommit>as().getTxId();
        }
      }
    }
     return txId;
  }
  private ReadableLogChannel openLogFile(  FileSystemAbstraction fs,  int version) throws IOException {
    LogFiles logFiles=LogFilesBuilder.logFilesBasedOnlyBuilder(workingDirectory,fs).build();
    PhysicalLogVersionedStoreChannel channel=logFiles.openForVersion(version);
    return new ReadAheadLogChannel(channel,new ReaderLogVersionBridge(logFiles));
  }
}
