public class HexPrinterTest {
  @Test public void shouldPrintACoupleOfLines(){
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(outStream);
    HexPrinter printer=new HexPrinter(out);
    for (byte value=0; value < 40; value++) {
      printer.append(value);
    }
    out.flush();
    assertEquals(format("00 01 02 03 04 05 06 07    08 09 0A 0B 0C 0D 0E 0F    " + "10 11 12 13 14 15 16 17    18 19 1A 1B 1C 1D 1E 1F%n" + "20 21 22 23 24 25 26 27"),outStream.toString());
  }
  @Test public void shouldPrintUserSpecifiedBytesGroupingFormat(){
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(outStream);
    HexPrinter printer=new HexPrinter(out).withBytesGroupingFormat(12,4,", ");
    for (byte value=0; value < 30; value++) {
      printer.append(value);
    }
    out.flush();
    assertEquals(format("00 01 02 03, 04 05 06 07, 08 09 0A 0B%n" + "0C 0D 0E 0F, 10 11 12 13, 14 15 16 17%n" + "18 19 1A 1B, 1C 1D"),outStream.toString());
  }
  @Test public void shouldNotGroupingWhenBytesPerGroupIsGreaterThanBytesPerLine(){
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(outStream);
    HexPrinter printer=new HexPrinter(out).withBytesPerLine(12).withBytesPerGroup(100);
    for (byte value=0; value < 30; value++) {
      printer.append(value);
    }
    out.flush();
    assertEquals(format("00 01 02 03 04 05 06 07 08 09 0A 0B%n" + "0C 0D 0E 0F 10 11 12 13 14 15 16 17%n" + "18 19 1A 1B 1C 1D"),outStream.toString());
  }
  @Test public void shouldPrintUserSpecifiedLineNumberFormat(){
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(outStream);
    HexPrinter printer=new HexPrinter(out).withLineNumberFormat(5,"[","]");
    for (byte value=0; value < 40; value++) {
      printer.append(value);
    }
    out.flush();
    assertEquals(format("[0x00000]" + "00 01 02 03 04 05 06 07    08 09 0A 0B 0C 0D 0E 0F    " + "10 11 12 13 14 15 16 17    18 19 1A 1B 1C 1D 1E 1F%n"+ "[0x00001]"+ "20 21 22 23 24 25 26 27"),outStream.toString());
  }
  @Test public void shouldStartFromUserSpecifiedLineNumber(){
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream out=new PrintStream(outStream);
    HexPrinter printer=new HexPrinter(out).withLineNumberDigits(2).withLineNumberOffset(0xA8);
    for (byte value=0; value < 40; value++) {
      printer.append(value);
    }
    out.flush();
    assertEquals(format("@ 0xA8: " + "00 01 02 03 04 05 06 07    08 09 0A 0B 0C 0D 0E 0F    " + "10 11 12 13 14 15 16 17    18 19 1A 1B 1C 1D 1E 1F%n"+ "@ 0xA9: "+ "20 21 22 23 24 25 26 27"),outStream.toString());
  }
  @Test public void shouldPrintPartOfByteBuffer(){
    ByteBuffer bytes=ByteBuffer.allocate(1024);
    for (byte value=0; value < 33; value++) {
      bytes.put(value);
    }
    String hexString=HexPrinter.hex(bytes,3,8);
    assertEquals(format("03 04 05 06 07 08 09 0A"),hexString);
  }
  @Test public void shouldOnlyPrintBytesWrittenToBuffer(){
    ByteBuffer bytes=ByteBuffer.allocate(1024);
    for (byte value=0; value < 10; value++) {
      bytes.put(value);
    }
    bytes.flip();
    String hexString=HexPrinter.hex(bytes);
    assertEquals(format("00 01 02 03 04 05 06 07    08 09"),hexString);
  }
}
