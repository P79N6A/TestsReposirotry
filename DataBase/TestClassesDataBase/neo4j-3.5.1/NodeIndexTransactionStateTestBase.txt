@RunWith(Parameterized.class) public abstract class NodeIndexTransactionStateTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Parameterized.Parameters() public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[][]{{true},{false}});
  }
  @Parameterized.Parameter public boolean needsValues;
  @Test public void shouldPerformStringSuffixSearch() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"1suff"));
      nodeWithProp(tx,"pluff");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"2suff"));
      nodeWithPropId(tx,"skruff");
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"pasuff",IndexQuery.stringSuffix(prop,stringValue("suff")));
    }
   }
  @Test public void shouldPerformScan() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    long nodeToDelete;
    long nodeToChange;
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"suff1"));
      expected.add(nodeWithProp(tx,"supp"));
      nodeToDelete=nodeWithPropId(tx,"supp");
      nodeToChange=nodeWithPropId(tx,"supper");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"suff2"));
      tx.dataWrite().nodeDelete(nodeToDelete);
      tx.dataWrite().nodeRemoveProperty(nodeToChange,prop);
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForScan(expected,tx,index,false,"noff");
    }
   }
  @Test public void shouldPerformEqualitySeek() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"banana"));
      nodeWithProp(tx,"apple");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"banana"));
      nodeWithProp(tx,"dragonfruit");
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForSeek(expected,tx,index,false,"banana",IndexQuery.exact(prop,"banana"));
    }
   }
  @Test public void shouldPerformStringPrefixSearch() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"suff1"));
      nodeWithPropId(tx,"supp");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"suff2"));
      nodeWithPropId(tx,"skruff");
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"suffpa",IndexQuery.stringPrefix(prop,stringValue("suff")));
    }
   }
  @Test public void shouldPerformStringRangeSearch() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"banana"));
      nodeWithProp(tx,"apple");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"cherry"));
      nodeWithProp(tx,"dragonfruit");
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"berry",IndexQuery.range(prop,"b",true,"d",false));
    }
   }
  @Test public void shouldPerformStringRangeSearchWithAddedNodeInTxState() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    long nodeToChange;
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"banana"));
      nodeToChange=nodeWithPropId(tx,"apple");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"cherry"));
      nodeWithProp(tx,"dragonfruit");
      IndexReference index=tx.schemaRead().index(label,prop);
      TextValue newProperty=stringValue("blueberry");
      tx.dataWrite().nodeSetProperty(nodeToChange,prop,newProperty);
      expected.add(Pair.of(nodeToChange,newProperty));
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"berry",IndexQuery.range(prop,"b",true,"d",false));
    }
   }
  @Test public void shouldPerformStringRangeSearchWithRemovedNodeInTxState() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    long nodeToChange;
    try (Transaction tx=beginTransaction()){
      nodeToChange=nodeWithPropId(tx,"banana");
      nodeWithPropId(tx,"apple");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"cherry"));
      nodeWithProp(tx,"dragonfruit");
      IndexReference index=tx.schemaRead().index(label,prop);
      TextValue newProperty=stringValue("kiwi");
      tx.dataWrite().nodeSetProperty(nodeToChange,prop,newProperty);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"berry",IndexQuery.range(prop,"b",true,"d",false));
    }
   }
  @Test public void shouldPerformStringRangeSearchWithDeletedNodeInTxState() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    long nodeToChange;
    try (Transaction tx=beginTransaction()){
      nodeToChange=nodeWithPropId(tx,"banana");
      nodeWithPropId(tx,"apple");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"cherry"));
      nodeWithProp(tx,"dragonfruit");
      IndexReference index=tx.schemaRead().index(label,prop);
      tx.dataWrite().nodeDelete(nodeToChange);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"berry",IndexQuery.range(prop,"b",true,"d",false));
    }
   }
  @Test public void shouldPerformStringContainsSearch() throws Exception {
    Set<Pair<Long,Value>> expected=new HashSet<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"gnomebat"));
      nodeWithPropId(tx,"fishwombat");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      expected.add(nodeWithProp(tx,"homeopatic"));
      nodeWithPropId(tx,"telephonecompany");
      IndexReference index=tx.schemaRead().index(label,prop);
      assertNodeAndValueForSeek(expected,tx,index,needsValues,"immense",IndexQuery.stringContains(prop,stringValue("me")));
    }
   }
  @Test public void shouldThrowIfTransactionTerminated() throws Exception {
    try (Transaction tx=beginTransaction()){
      terminate(tx);
      exception.expect(TransactionTerminatedException.class);
      tx.dataRead().nodeExists(42);
    }
   }
  protected abstract void terminate(  Transaction transaction);
  private long nodeWithPropId(  Transaction tx,  Object value) throws Exception {
    return nodeWithProp(tx,value).first();
  }
  private Pair<Long,Value> nodeWithProp(  Transaction tx,  Object value) throws Exception {
    Write write=tx.dataWrite();
    long node=write.nodeCreate();
    write.nodeAddLabel(node,tx.tokenWrite().labelGetOrCreateForName("Node"));
    Value val=Values.of(value);
    write.nodeSetProperty(node,tx.tokenWrite().propertyKeyGetOrCreateForName("prop"),val);
    return Pair.of(node,val);
  }
  private void createIndex(){
    try (org.neo4j.graphdb.Transaction tx=graphDb.beginTx()){
      graphDb.schema().indexFor(Label.label("Node")).on("prop").create();
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction tx=graphDb.beginTx()){
      graphDb.schema().awaitIndexesOnline(1,TimeUnit.MINUTES);
    }
   }
  /** 
 * Perform an index seek and assert that the correct nodes and values were found. Since this method modifies TX state for the test it is not safe to call this method more than once in the same transaction.
 * @param expected the expected nodes and values
 * @param tx the transaction
 * @param index the index
 * @param needsValues if the index is expected to provide values
 * @param anotherValueFoundByQuery a values that would be found by the index queries, if a node with that value existed. This methodwill create a node with that value, after initializing the cursor and assert that the new node is not found.
 * @param queries the index queries
 */
  private void assertNodeAndValueForSeek(  Set<Pair<Long,Value>> expected,  Transaction tx,  IndexReference index,  boolean needsValues,  Object anotherValueFoundByQuery,  IndexQuery... queries) throws Exception {
    try (NodeValueIndexCursor nodes=tx.cursors().allocateNodeValueIndexCursor()){
      tx.dataRead().nodeIndexSeek(index,nodes,IndexOrder.NONE,needsValues,queries);
      assertNodeAndValue(expected,tx,needsValues,anotherValueFoundByQuery,nodes);
    }
   }
  /** 
 * Perform an index scan and assert that the correct nodes and values were found. Since this method modifies TX state for the test it is not safe to call this method more than once in the same transaction.
 * @param expected the expected nodes and values
 * @param tx the transaction
 * @param index the index
 * @param needsValues if the index is expected to provide values
 * @param anotherValueFoundByQuery a values that would be found by, if a node with that value existed. This methodwill create a node with that value, after initializing the cursor and assert that the new node is not found.
 */
  private void assertNodeAndValueForScan(  Set<Pair<Long,Value>> expected,  Transaction tx,  IndexReference index,  boolean needsValues,  Object anotherValueFoundByQuery) throws Exception {
    try (NodeValueIndexCursor nodes=tx.cursors().allocateNodeValueIndexCursor()){
      tx.dataRead().nodeIndexScan(index,nodes,IndexOrder.NONE,needsValues);
      assertNodeAndValue(expected,tx,needsValues,anotherValueFoundByQuery,nodes);
    }
   }
  private void assertNodeAndValue(  Set<Pair<Long,Value>> expected,  Transaction tx,  boolean needsValues,  Object anotherValueFoundByQuery,  NodeValueIndexCursor nodes) throws Exception {
    for (    Pair<Long,Value> pair : expected) {
      tx.dataWrite().nodeDelete(pair.first());
    }
    nodeWithPropId(tx,anotherValueFoundByQuery);
    if (needsValues) {
      Set<Pair<Long,Value>> found=new HashSet<>();
      while (nodes.next()) {
        found.add(Pair.of(nodes.nodeReference(),nodes.propertyValue(0)));
      }
      assertThat(found,equalTo(expected));
    }
 else {
      Set<Long> foundIds=new HashSet<>();
      while (nodes.next()) {
        foundIds.add(nodes.nodeReference());
      }
      ImmutableSet<Long> expectedIds=expected.stream().map(Pair::first).collect(Collectors2.toImmutableSet());
      assertThat(foundIds,equalTo(expectedIds));
    }
  }
}
