public class NativeLabelScanStoreTest extends LabelScanStoreTest {
  @Rule public PageCacheRule pageCacheRule=new PageCacheRule();
  @Override protected LabelScanStore createLabelScanStore(  FileSystemAbstraction fileSystemAbstraction,  DatabaseLayout databaseLayout,  FullStoreChangeStream fullStoreChangeStream,  boolean usePersistentStore,  boolean readOnly,  LabelScanStore.Monitor monitor){
    Monitors monitors=new Monitors();
    monitors.addMonitorListener(monitor);
    return getLabelScanStore(fileSystemAbstraction,databaseLayout,fullStoreChangeStream,readOnly,monitors);
  }
  private LabelScanStore getLabelScanStore(  FileSystemAbstraction fileSystemAbstraction,  DatabaseLayout databaseLayout,  FullStoreChangeStream fullStoreChangeStream,  boolean readOnly,  Monitors monitors){
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemAbstraction);
    return new NativeLabelScanStore(pageCache,databaseLayout,fileSystemAbstraction,fullStoreChangeStream,readOnly,monitors,RecoveryCleanupWorkCollector.immediate());
  }
  @Override protected Matcher<Iterable<? super File>> hasLabelScanStore(){
    return Matchers.hasItem(Matchers.equalTo(testDirectory.databaseLayout().labelScanStore()));
  }
  @Override protected void corruptIndex(  FileSystemAbstraction fileSystem,  DatabaseLayout databaseLayout) throws IOException {
    File lssFile=databaseLayout.labelScanStore();
    scrambleFile(lssFile);
  }
  @Test public void shutdownNonInitialisedNativeScanStoreWithoutException() throws IOException {
    String expectedMessage="Expected exception message";
    Monitors monitors=mock(Monitors.class);
    when(monitors.newMonitor(LabelScanStore.Monitor.class)).thenReturn(LabelScanStore.Monitor.EMPTY);
    doThrow(new RuntimeException(expectedMessage)).when(monitors).addMonitorListener(any());
    LabelScanStore scanStore=getLabelScanStore(fileSystemRule.get(),testDirectory.databaseLayout(),EMPTY,true,monitors);
    try {
      scanStore.init();
      fail("Initialisation of store should fail.");
    }
 catch (    RuntimeException e) {
      assertEquals(expectedMessage,e.getMessage());
    }
    scanStore.shutdown();
  }
  @Test public void shouldStartPopulationAgainIfNotCompletedFirstTime(){
    LifeSupport life=new LifeSupport();
    TrackingMonitor monitor=new TrackingMonitor();
    life.add(createLabelScanStore(fileSystemRule.get(),testDirectory.databaseLayout(),EMPTY,true,false,monitor));
    life.init();
    assertTrue(monitor.noIndexCalled);
    monitor.reset();
    life.shutdown();
    life=new LifeSupport();
    life.add(createLabelScanStore(fileSystemRule.get(),testDirectory.databaseLayout(),EMPTY,true,false,monitor));
    life.init();
    assertTrue(monitor.corruptedIndex);
    life.start();
    assertTrue(monitor.rebuildingCalled);
    assertTrue(monitor.rebuiltCalled);
    life.shutdown();
  }
  @Test public void shouldRestartPopulationIfIndexFileWasNeverFullyInitialized() throws IOException {
    File labelScanStoreFile=NativeLabelScanStore.getLabelScanStoreFile(testDirectory.databaseLayout());
    fileSystemRule.create(labelScanStoreFile).close();
    TrackingMonitor monitor=new TrackingMonitor();
    LifeSupport life=new LifeSupport();
    life.add(createLabelScanStore(fileSystemRule.get(),testDirectory.databaseLayout(),EMPTY,true,false,monitor));
    life.start();
    assertTrue(monitor.corruptedIndex);
    assertTrue(monitor.rebuildingCalled);
    life.shutdown();
  }
}
