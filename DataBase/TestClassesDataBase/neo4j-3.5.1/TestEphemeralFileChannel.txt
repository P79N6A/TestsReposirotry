@ExtendWith(EphemeralFileSystemExtension.class) class TestEphemeralFileChannel {
  @Inject private EphemeralFileSystemAbstraction fileSystem;
  @Test void smoke() throws Exception {
    StoreChannel channel=fileSystem.open(new File("yo"),OpenMode.READ_WRITE);
    ByteBuffer buffer=allocate(23);
    buffer.put(new byte[23]);
    buffer.flip();
    channel.write(buffer);
    channel=fileSystem.open(new File("yo"),OpenMode.READ_WRITE);
    long longValue=1234567890L;
    buffer.clear();
    buffer.limit(1);
    buffer.put((byte)1);
    buffer.flip();
    channel.write(buffer);
    buffer.clear();
    buffer.limit(1);
    buffer.put((byte)2);
    buffer.flip();
    channel.position(6);
    channel.write(buffer);
    buffer.clear();
    buffer.limit(8);
    buffer.putLong(longValue);
    buffer.flip();
    channel.position(15);
    channel.write(buffer);
    assertEquals(23,channel.size());
    buffer.clear();
    buffer.limit(1);
    channel.read(buffer,0);
    buffer.flip();
    assertEquals((byte)1,buffer.get());
    buffer.clear();
    buffer.limit(3);
    channel.read(buffer,5);
    buffer.flip();
    assertEquals((byte)0,buffer.get());
    assertEquals((byte)2,buffer.get());
    assertEquals((byte)0,buffer.get());
    buffer.clear();
    buffer.limit(8);
    channel.read(buffer,15);
    buffer.flip();
    assertEquals(longValue,buffer.getLong());
  }
  @Test void absoluteVersusRelative() throws Exception {
    File file=new File("myfile");
    StoreChannel channel=fileSystem.open(file,OpenMode.READ_WRITE);
    byte[] bytes="test".getBytes();
    channel.write(ByteBuffer.wrap(bytes));
    channel.close();
    channel=fileSystem.open(new File(file.getAbsolutePath()),OpenMode.READ);
    byte[] readBytes=new byte[bytes.length];
    channel.readAll(ByteBuffer.wrap(readBytes));
    assertTrue(Arrays.equals(bytes,readBytes));
  }
  @Test void listFiles() throws Exception {
    File root=new File("/root").getCanonicalFile();
    File dir1=new File(root,"dir1");
    File dir2=new File(root,"dir2");
    File subdir1=new File(dir1,"sub");
    File file1=new File(dir1,"file");
    File file2=new File(dir1,"file2");
    File file3=new File(dir2,"file");
    File file4=new File(subdir1,"file");
    fileSystem.mkdirs(dir2);
    fileSystem.mkdirs(dir1);
    fileSystem.mkdirs(subdir1);
    fileSystem.create(file1);
    fileSystem.create(file2);
    fileSystem.create(file3);
    fileSystem.create(file4);
    assertEquals(asSet(dir1,dir2),asSet(fileSystem.listFiles(root)));
    assertEquals(asSet(subdir1,file1,file2),asSet(fileSystem.listFiles(dir1)));
    assertEquals(asSet(file3),asSet(fileSystem.listFiles(dir2)));
    assertEquals(asSet(file4),asSet(fileSystem.listFiles(subdir1)));
  }
}
