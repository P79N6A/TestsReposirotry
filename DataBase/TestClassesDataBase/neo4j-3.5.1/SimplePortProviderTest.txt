class SimplePortProviderTest {
  @Test void shouldProvideUniquePorts(){
    PortProvider portProvider=new SimplePortProvider(port -> false,42);
    int port1=portProvider.getNextFreePort("foo");
    int port2=portProvider.getNextFreePort("foo");
    assertThat(port1,is(not(equalTo(port2))));
  }
  @Test void shouldSkipOccupiedPorts(){
    PortProbe portProbe=mock(PortProbe.class);
    PortProvider portProvider=new SimplePortProvider(portProbe,40);
    when(portProbe.isOccupied(40)).thenReturn(false);
    when(portProbe.isOccupied(41)).thenReturn(false);
    when(portProbe.isOccupied(42)).thenReturn(true);
    when(portProbe.isOccupied(43)).thenReturn(false);
    assertThat(portProvider.getNextFreePort("foo"),is(40));
    assertThat(portProvider.getNextFreePort("foo"),is(41));
    assertThat(portProvider.getNextFreePort("foo"),is(43));
  }
  @Test void shouldNotOverRun(){
    PortProvider portProvider=new SimplePortProvider(port -> false,65534);
    portProvider.getNextFreePort("foo");
    portProvider.getNextFreePort("foo");
    try {
      portProvider.getNextFreePort("foo");
      fail("Failure was expected");
    }
 catch (    IllegalStateException e) {
      assertThat(e.getMessage(),is("There are no more ports available"));
    }
  }
}
