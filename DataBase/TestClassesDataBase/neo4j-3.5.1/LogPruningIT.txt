public class LogPruningIT {
  @Rule public final DatabaseRule db=new EmbeddedDatabaseRule().withSetting(keep_logical_logs,"true");
  private static final SimpleTriggerInfo triggerInfo=new SimpleTriggerInfo("forced trigger");
  @Test public void pruningStrategyShouldBeDynamic() throws IOException {
    CheckPointer checkPointer=getInstanceFromDb(CheckPointer.class);
    Config config=getInstanceFromDb(Config.class);
    FileSystemAbstraction fs=getInstanceFromDb(FileSystemAbstraction.class);
    LogFiles logFiles=LogFilesBuilder.builder(db.databaseLayout(),fs).withLogVersionRepository(new SimpleLogVersionRepository()).withLastCommittedTransactionIdSupplier(() -> 1).withTransactionIdStore(new SimpleTransactionIdStore()).build();
    writeTransactionsAndRotateTwice();
    checkPointer.forceCheckPoint(triggerInfo);
    assertThat(countTransactionLogs(logFiles),is(3));
    config.updateDynamicSetting(keep_logical_logs.name(),"false","test");
    checkPointer.forceCheckPoint(triggerInfo);
    assertThat(countTransactionLogs(logFiles),is(2));
  }
  private void writeTransactionsAndRotateTwice() throws IOException {
    LogRotation logRotation=db.getDependencyResolver().resolveDependency(LogRotation.class);
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     logRotation.rotateLogFile();
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     logRotation.rotateLogFile();
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
   }
  private <T>T getInstanceFromDb(  Class<T> clazz){
    return db.getDependencyResolver().resolveDependency(clazz);
  }
  private int countTransactionLogs(  LogFiles logFiles){
    return logFiles.logFiles().length;
  }
}
