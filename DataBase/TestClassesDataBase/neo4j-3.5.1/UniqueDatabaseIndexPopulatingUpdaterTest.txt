class UniqueDatabaseIndexPopulatingUpdaterTest {
  private static final SchemaDescriptor descriptor=SchemaDescriptorFactory.forLabel(1,42);
  @Test void closeVerifiesUniquenessOfAddedValues() throws Exception {
    SchemaIndex index=mock(SchemaIndex.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(index);
    updater.process(add(1,descriptor,"foo"));
    updater.process(add(1,descriptor,"bar"));
    updater.process(add(1,descriptor,"baz"));
    verifyZeroInteractions(index);
    updater.close();
    verifyVerifyUniqueness(index,descriptor,"foo","bar","baz");
  }
  @Test void closeVerifiesUniquenessOfChangedValues() throws Exception {
    SchemaIndex index=mock(SchemaIndex.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(index);
    updater.process(change(1,descriptor,"foo1","foo2"));
    updater.process(change(1,descriptor,"bar1","bar2"));
    updater.process(change(1,descriptor,"baz1","baz2"));
    verifyZeroInteractions(index);
    updater.close();
    verifyVerifyUniqueness(index,descriptor,"foo2","bar2","baz2");
  }
  @Test void closeVerifiesUniquenessOfAddedAndChangedValues() throws Exception {
    SchemaIndex index=mock(SchemaIndex.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(index);
    updater.process(add(1,descriptor,"added1"));
    updater.process(add(2,descriptor,"added2"));
    updater.process(change(3,descriptor,"before1","after1"));
    updater.process(change(4,descriptor,"before2","after2"));
    updater.process(remove(5,descriptor,"removed1"));
    verifyZeroInteractions(index);
    updater.close();
    verifyVerifyUniqueness(index,descriptor,"added1","added2","after1","after2");
  }
  @Test void addedNodePropertiesIncludedInSample() throws Exception {
    UniqueIndexSampler sampler=new UniqueIndexSampler();
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(sampler);
    updater.process(add(1,descriptor,"foo"));
    updater.process(add(2,descriptor,"bar"));
    updater.process(add(3,descriptor,"baz"));
    updater.process(add(4,descriptor,"qux"));
    verifySamplingResult(sampler,4);
  }
  @Test void changedNodePropertiesDoNotInfluenceSample() throws Exception {
    UniqueIndexSampler sampler=new UniqueIndexSampler();
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(sampler);
    updater.process(change(1,descriptor,"before1","after1"));
    updater.process(change(2,descriptor,"before2","after2"));
    verifySamplingResult(sampler,0);
  }
  @Test void removedNodePropertyIncludedInSample() throws Exception {
    long initialValue=10;
    UniqueIndexSampler sampler=new UniqueIndexSampler();
    sampler.increment(initialValue);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(sampler);
    updater.process(remove(1,descriptor,"removed1"));
    updater.process(remove(2,descriptor,"removed2"));
    verifySamplingResult(sampler,initialValue - 2);
  }
  @Test void nodePropertyUpdatesIncludedInSample() throws Exception {
    UniqueIndexSampler sampler=new UniqueIndexSampler();
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(sampler);
    updater.process(add(1,descriptor,"foo"));
    updater.process(change(1,descriptor,"foo","bar"));
    updater.process(add(2,descriptor,"baz"));
    updater.process(add(3,descriptor,"qux"));
    updater.process(remove(4,descriptor,"qux"));
    verifySamplingResult(sampler,2);
  }
  @Test void additionsDeliveredToIndexWriter() throws Exception {
    LuceneIndexWriter writer=mock(LuceneIndexWriter.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(writer);
    updater.process(add(1,descriptor,"foo"));
    updater.process(add(2,descriptor,"bar"));
    updater.process(add(3,descriptor,"qux"));
    verify(writer).updateDocument(newTermForChangeOrRemove(1),documentRepresentingProperties((long)1,"foo"));
    verify(writer).updateDocument(newTermForChangeOrRemove(2),documentRepresentingProperties((long)2,"bar"));
    verify(writer).updateDocument(newTermForChangeOrRemove(3),documentRepresentingProperties((long)3,"qux"));
  }
  @Test void changesDeliveredToIndexWriter() throws Exception {
    LuceneIndexWriter writer=mock(LuceneIndexWriter.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(writer);
    updater.process(change(1,descriptor,"before1","after1"));
    updater.process(change(2,descriptor,"before2","after2"));
    verify(writer).updateDocument(newTermForChangeOrRemove(1),documentRepresentingProperties((long)1,"after1"));
    verify(writer).updateDocument(newTermForChangeOrRemove(2),documentRepresentingProperties((long)2,"after2"));
  }
  @Test void removalsDeliveredToIndexWriter() throws Exception {
    LuceneIndexWriter writer=mock(LuceneIndexWriter.class);
    UniqueLuceneIndexPopulatingUpdater updater=newUpdater(writer);
    updater.process(remove(1,descriptor,"foo"));
    updater.process(remove(2,descriptor,"bar"));
    updater.process(remove(3,descriptor,"baz"));
    verify(writer).deleteDocuments(newTermForChangeOrRemove(1));
    verify(writer).deleteDocuments(newTermForChangeOrRemove(2));
    verify(writer).deleteDocuments(newTermForChangeOrRemove(3));
  }
  private static void verifySamplingResult(  UniqueIndexSampler sampler,  long expectedValue){
    IndexSample sample=sampler.result();
    assertEquals(expectedValue,sample.indexSize());
    assertEquals(expectedValue,sample.uniqueValues());
    assertEquals(expectedValue,sample.sampleSize());
  }
  private static UniqueLuceneIndexPopulatingUpdater newUpdater(){
    return newUpdater(new UniqueIndexSampler());
  }
  private static UniqueLuceneIndexPopulatingUpdater newUpdater(  SchemaIndex index){
    return newUpdater(index,mock(LuceneIndexWriter.class),new UniqueIndexSampler());
  }
  private static UniqueLuceneIndexPopulatingUpdater newUpdater(  LuceneIndexWriter writer){
    return newUpdater(mock(SchemaIndex.class),writer,new UniqueIndexSampler());
  }
  private static UniqueLuceneIndexPopulatingUpdater newUpdater(  UniqueIndexSampler sampler){
    return newUpdater(mock(SchemaIndex.class),mock(LuceneIndexWriter.class),sampler);
  }
  private static UniqueLuceneIndexPopulatingUpdater newUpdater(  SchemaIndex index,  LuceneIndexWriter writer,  UniqueIndexSampler sampler){
    return new UniqueLuceneIndexPopulatingUpdater(writer,descriptor.getPropertyIds(),index,mock(NodePropertyAccessor.class),sampler);
  }
  private void verifyVerifyUniqueness(  SchemaIndex index,  SchemaDescriptor descriptor,  Object... values) throws IOException, IndexEntryConflictException {
    @SuppressWarnings("unchecked") ArgumentCaptor<List<Value[]>> captor=ArgumentCaptor.forClass(List.class);
    verify(index).verifyUniqueness(any(),eq(descriptor.getPropertyIds()),captor.capture());
    assertThat(captor.getValue(),containsInAnyOrder(valueTupleList(values).toArray()));
  }
}
