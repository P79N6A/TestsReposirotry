public class FreeIdsAfterRecoveryTest {
  private final TestDirectory directory=TestDirectory.testDirectory();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(directory).around(fileSystemRule).around(pageCacheRule);
  @Test public void shouldCompletelyRebuildIdGeneratorsAfterCrash(){
    DatabaseLayout databaseLayout=directory.databaseLayout();
    StoreFactory storeFactory=new StoreFactory(databaseLayout,Config.defaults(),new DefaultIdGeneratorFactory(fileSystemRule.get()),pageCacheRule.getPageCache(fileSystemRule.get()),fileSystemRule.get(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
    long highId;
    try (NeoStores stores=storeFactory.openAllNeoStores(true)){
      NodeStore nodeStore=stores.getNodeStore();
      nodeStore.setHighId(20);
      nodeStore.updateRecord(node(nodeStore.nextId()));
      highId=nodeStore.getHighId();
    }
     File nodeIdFile=databaseLayout.idNodeStore();
    try (IdGeneratorImpl idGenerator=new IdGeneratorImpl(fileSystemRule.get(),nodeIdFile,10,10_000,false,IdType.NODE,() -> highId)){
      for (long id=0; id < 15; id++) {
        idGenerator.freeId(id);
      }
      try (NeoStores stores=storeFactory.openAllNeoStores(true)){
        NodeStore nodeStore=stores.getNodeStore();
        assertFalse(nodeStore.getStoreOk());
        nodeStore.deleteIdGenerator();
        nodeStore.makeStoreOk();
        assertEquals(highId,nodeStore.nextId());
      }
     }
   }
  private static NodeRecord node(  long nextId){
    NodeRecord node=new NodeRecord(nextId);
    node.setInUse(true);
    return node;
  }
}
