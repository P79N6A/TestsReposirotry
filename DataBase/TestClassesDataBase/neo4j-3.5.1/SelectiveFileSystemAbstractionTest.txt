class SelectiveFileSystemAbstractionTest {
  @Test void shouldUseCorrectFileSystemForChosenFile() throws Exception {
    File specialFile=new File("special");
    FileSystemAbstraction normal=mock(FileSystemAbstraction.class);
    FileSystemAbstraction special=mock(FileSystemAbstraction.class);
    try (SelectiveFileSystemAbstraction systemAbstraction=new SelectiveFileSystemAbstraction(specialFile,special,normal)){
      systemAbstraction.open(specialFile,OpenMode.READ);
      verify(special).open(specialFile,OpenMode.READ);
      verifyNoMoreInteractions(special);
      verifyNoMoreInteractions(normal);
    }
   }
  @Test void shouldUseDefaultFileSystemForOtherFiles() throws Exception {
    File specialFile=new File("special");
    File otherFile=new File("other");
    FileSystemAbstraction normal=mock(FileSystemAbstraction.class);
    FileSystemAbstraction special=mock(FileSystemAbstraction.class);
    try (SelectiveFileSystemAbstraction fs=new SelectiveFileSystemAbstraction(specialFile,special,normal)){
      fs.create(otherFile);
      fs.open(otherFile,OpenMode.READ);
      verify(normal).create(otherFile);
      verify(normal).open(otherFile,OpenMode.READ);
      verifyNoMoreInteractions(special);
      verifyNoMoreInteractions(normal);
    }
   }
  @Test void provideSelectiveWatcher() throws IOException {
    File specialFile=new File("special");
    File otherFile=new File("other");
    FileSystemAbstraction normal=mock(FileSystemAbstraction.class);
    FileSystemAbstraction special=mock(FileSystemAbstraction.class);
    FileWatcher specialWatcher=mock(FileWatcher.class);
    FileWatcher normalWatcher=mock(FileWatcher.class);
    WatchedResource specialResource=mock(WatchedResource.class);
    WatchedResource normalResource=mock(WatchedResource.class);
    when(special.fileWatcher()).thenReturn(specialWatcher);
    when(normal.fileWatcher()).thenReturn(normalWatcher);
    when(specialWatcher.watch(specialFile)).thenReturn(specialResource);
    when(normalWatcher.watch(otherFile)).thenReturn(normalResource);
    try (SelectiveFileSystemAbstraction fs=new SelectiveFileSystemAbstraction(specialFile,special,normal)){
      FileWatcher fileWatcher=fs.fileWatcher();
      assertSame(specialResource,fileWatcher.watch(specialFile));
      assertSame(normalResource,fileWatcher.watch(otherFile));
    }
   }
}
