public class OnlineIndexSamplingJobTest {
  @Test public void shouldSampleTheIndexAndStoreTheValueWhenTheIndexIsOnline(){
    OnlineIndexSamplingJob job=new OnlineIndexSamplingJob(indexId,indexProxy,indexStoreView,"Foo",logProvider);
    when(indexProxy.getState()).thenReturn(ONLINE);
    job.run();
    verify(indexStoreView).replaceIndexCounts(indexId,indexUniqueValues,indexSize,indexSize);
    verifyNoMoreInteractions(indexStoreView);
  }
  @Test public void shouldSampleTheIndexButDoNotStoreTheValuesIfTheIndexIsNotOnline(){
    OnlineIndexSamplingJob job=new OnlineIndexSamplingJob(indexId,indexProxy,indexStoreView,"Foo",logProvider);
    when(indexProxy.getState()).thenReturn(FAILED);
    job.run();
    verifyNoMoreInteractions(indexStoreView);
  }
  private final LogProvider logProvider=NullLogProvider.getInstance();
  private final long indexId=1;
  private final IndexProxy indexProxy=mock(IndexProxy.class);
  private final IndexStoreView indexStoreView=mock(IndexStoreView.class);
  private final CapableIndexDescriptor indexDescriptor=forSchema(forLabel(1,2),IndexProviderDescriptor.UNDECIDED).withId(indexId).withoutCapabilities();
  private final IndexReader indexReader=mock(IndexReader.class);
  private final IndexSampler indexSampler=mock(IndexSampler.class);
  private final long indexUniqueValues=21L;
  private final long indexSize=23L;
  @Before public void setup() throws IndexNotFoundKernelException {
    when(indexProxy.getDescriptor()).thenReturn(indexDescriptor);
    when(indexProxy.newReader()).thenReturn(indexReader);
    when(indexReader.createSampler()).thenReturn(indexSampler);
    when(indexSampler.sampleIndex()).thenReturn(new IndexSample(indexSize,indexUniqueValues,indexSize));
  }
}
