/** 
 * Test read access to committed label data.
 */
public class RecordStorageReaderLabelTest extends RecordStorageReaderTestBase {
  @Test public void shouldBeAbleToListLabelsForNode() throws Exception {
    long nodeId;
    int labelId1;
    int labelId2;
    try (Transaction tx=db.beginTx()){
      nodeId=db.createNode(label1,label2).getId();
      String labelName1=label1.name();
      String labelName2=label2.name();
      labelId1=labelId(Label.label(labelName1));
      labelId2=labelId(Label.label(labelName2));
      tx.success();
    }
     StorageNodeCursor nodeCursor=storageReader.allocateNodeCursor();
    nodeCursor.single(nodeId);
    assertTrue(nodeCursor.next());
    assertEquals(newSetWith(labelId1,labelId2),newSetWith(nodeCursor.labels()));
  }
  @Test public void labelsShouldNotLeakOutAsProperties(){
    Node node=createLabeledNode(db,map("name","Node"),label1);
    assertThat(getPropertyKeys(db,node),containsOnly("name"));
  }
  @Test public void shouldReturnAllNodesWithLabel(){
    Node node1=createLabeledNode(db,map("name","First","age",1L),label1);
    Node node2=createLabeledNode(db,map("type","Node","count",10),label1,label2);
    int labelId1=labelId(label1);
    int labelId2=labelId(label2);
    LongIterator nodesForLabel1=storageReader.nodesGetForLabel(labelId1);
    LongIterator nodesForLabel2=storageReader.nodesGetForLabel(labelId2);
    assertEquals(asSet(node1.getId(),node2.getId()),PrimitiveLongCollections.toSet(nodesForLabel1));
    assertEquals(asSet(node2.getId()),PrimitiveLongCollections.toSet(nodesForLabel2));
  }
}
