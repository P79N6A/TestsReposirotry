public class RelationshipRepresentationTest {
  @Test public void shouldHaveSelfLink(){
    assertUriMatches(RELATIONSHIP_URI_PATTERN,relrep(1234).selfUri());
  }
  @Test public void shouldHaveType(){
    assertNotNull(relrep(1234).getType());
  }
  @Test public void shouldHaveStartNodeLink(){
    assertUriMatches(NODE_URI_PATTERN,relrep(1234).startNodeUri());
  }
  @Test public void shouldHaveEndNodeLink(){
    assertUriMatches(NODE_URI_PATTERN,relrep(1234).endNodeUri());
  }
  @Test public void shouldHavePropertiesLink(){
    assertUriMatches(RELATIONSHIP_URI_PATTERN + "/properties",relrep(1234).propertiesUri());
  }
  @Test public void shouldHavePropertyLinkTemplate(){
    assertUriMatches(RELATIONSHIP_URI_PATTERN + "/properties/\\{key\\}",relrep(1234).propertyUriTemplate());
  }
  @Test public void shouldSerialiseToMap(){
    Map<String,Object> repr=serialize(relrep(1234));
    assertNotNull(repr);
    verifySerialisation(repr);
  }
  private RelationshipRepresentation relrep(  long id){
    return new RelationshipRepresentation(relationship(id,node(0,properties()),"LOVES",node(1,properties())));
  }
  public static void verifySerialisation(  Map<String,Object> relrep){
    assertUriMatches(RELATIONSHIP_URI_PATTERN,relrep.get("self").toString());
    assertUriMatches(NODE_URI_PATTERN,relrep.get("start").toString());
    assertUriMatches(NODE_URI_PATTERN,relrep.get("end").toString());
    assertNotNull(relrep.get("type"));
    assertUriMatches(RELATIONSHIP_URI_PATTERN + "/properties",relrep.get("properties").toString());
    assertUriMatches(RELATIONSHIP_URI_PATTERN + "/properties/\\{key\\}",(String)relrep.get("property"));
    assertNotNull(relrep.get("data"));
    assertNotNull(relrep.get("metadata"));
    Map metadata=(Map)relrep.get("metadata");
    assertNotNull(metadata.get("type"));
    assertTrue(((Number)metadata.get("id")).longValue() >= 0);
  }
}
