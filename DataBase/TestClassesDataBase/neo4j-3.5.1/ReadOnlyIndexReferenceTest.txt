class ReadOnlyIndexReferenceTest {
  private IndexIdentifier identifier=mock(IndexIdentifier.class);
  private IndexSearcher searcher=mock(IndexSearcher.class);
  private CloseTrackingIndexReader reader=new CloseTrackingIndexReader();
  private ReadOnlyIndexReference indexReference=new ReadOnlyIndexReference(identifier,searcher);
  @BeforeEach void setUp(){
    when(searcher.getIndexReader()).thenReturn(reader);
  }
  @Test void obtainingWriterIsUnsupported(){
    UnsupportedOperationException uoe=assertThrows(UnsupportedOperationException.class,() -> indexReference.getWriter());
    assertEquals(uoe.getMessage(),"Read only indexes do not have index writers.");
  }
  @Test void markAsStaleIsUnsupported(){
    UnsupportedOperationException uoe=assertThrows(UnsupportedOperationException.class,() -> indexReference.setStale());
    assertEquals(uoe.getMessage(),"Read only indexes can't be marked as stale.");
  }
  @Test void checkAndClearStaleAlwaysFalse(){
    assertFalse(indexReference.checkAndClearStale());
  }
  @Test void disposeClosingSearcherAndMarkAsClosed() throws IOException {
    indexReference.dispose();
    assertTrue(reader.isClosed());
    assertTrue(indexReference.isClosed());
  }
  @Test void detachIndexReferenceWhenSomeReferencesExist() throws IOException {
    indexReference.incRef();
    indexReference.detachOrClose();
    assertTrue(indexReference.isDetached(),"Should leave index in detached state.");
  }
  @Test void closeIndexReferenceWhenNoReferenceExist() throws IOException {
    indexReference.detachOrClose();
    assertFalse(indexReference.isDetached(),"Should leave index in closed state.");
    assertTrue(reader.isClosed());
    assertTrue(indexReference.isClosed());
  }
  @Test void doNotCloseInstanceWhenSomeReferenceExist(){
    indexReference.incRef();
    assertFalse(indexReference.close());
    assertFalse(indexReference.isClosed());
  }
  @Test void closeDetachedIndexReferencedOnlyOnce() throws IOException {
    indexReference.incRef();
    indexReference.detachOrClose();
    assertTrue(indexReference.isDetached(),"Should leave index in detached state.");
    assertTrue(indexReference.close());
    assertTrue(reader.isClosed());
    assertTrue(indexReference.isClosed());
  }
  @Test void doNotCloseDetachedIndexReferencedMoreThenOnce() throws IOException {
    indexReference.incRef();
    indexReference.incRef();
    indexReference.detachOrClose();
    assertTrue(indexReference.isDetached(),"Should leave index in detached state.");
    assertFalse(indexReference.close());
  }
  @Test void doNotCloseReferencedIndex(){
    indexReference.incRef();
    assertFalse(indexReference.close());
    assertFalse(indexReference.isClosed());
  }
  @Test void closeNotReferencedIndex(){
    assertTrue(indexReference.close());
  }
}
