public class DefaultValueMapperTest {
  GraphDatabaseService db;
  private DefaultValueMapper mapper;
  @Before public void setup(){
    db=new TestGraphDatabaseFactory().newImpermanentDatabase();
    mapper=new DefaultValueMapper((EmbeddedProxySPI)db);
  }
  @Test public void shouldHandleSingleNodePath(){
    Node node;
    try (Transaction tx=db.beginTx()){
      node=db.createNode();
      tx.success();
    }
     Path mapped=mapper.mapPath(path(asNodeValues(node),asRelationshipsValues()));
    try (Transaction ignore=db.beginTx()){
      assertThat(mapped.length(),equalTo(0));
      assertThat(mapped.startNode(),equalTo(node));
      assertThat(mapped.endNode(),equalTo(node));
      assertThat(Iterables.asList(mapped.relationships()),hasSize(0));
      assertThat(Iterables.asList(mapped.reverseRelationships()),hasSize(0));
      assertThat(Iterables.asList(mapped.nodes()),equalTo(singletonList(node)));
      assertThat(Iterables.asList(mapped.reverseNodes()),equalTo(singletonList(node)));
      assertThat(mapped.lastRelationship(),nullValue());
      assertThat(Iterators.asList(mapped.iterator()),equalTo(singletonList(node)));
    }
   }
  @Test public void shouldHandleSingleRelationshipPath(){
    Node start, end;
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      start=db.createNode();
      end=db.createNode();
      relationship=start.createRelationshipTo(end,RelationshipType.withName("R"));
      tx.success();
    }
     Path mapped=mapper.mapPath(path(asNodeValues(start,end),asRelationshipsValues(relationship)));
    try (Transaction ignore=db.beginTx()){
      assertThat(mapped.length(),equalTo(1));
      assertThat(mapped.startNode(),equalTo(start));
      assertThat(mapped.endNode(),equalTo(end));
      assertThat(Iterables.asList(mapped.relationships()),equalTo(singletonList(relationship)));
      assertThat(Iterables.asList(mapped.reverseRelationships()),equalTo(singletonList(relationship)));
      assertThat(Iterables.asList(mapped.nodes()),equalTo(Arrays.asList(start,end)));
      assertThat(Iterables.asList(mapped.reverseNodes()),equalTo(Arrays.asList(end,start)));
      assertThat(mapped.lastRelationship(),equalTo(relationship));
      assertThat(Iterators.asList(mapped.iterator()),equalTo(Arrays.asList(start,relationship,end)));
    }
   }
  @Test public void shouldHandleLongPath(){
    Node a, b, c, d, e;
    Relationship r1, r2, r3, r4;
    try (Transaction tx=db.beginTx()){
      a=db.createNode();
      b=db.createNode();
      c=db.createNode();
      d=db.createNode();
      e=db.createNode();
      r1=a.createRelationshipTo(b,RelationshipType.withName("R"));
      r2=b.createRelationshipTo(c,RelationshipType.withName("R"));
      r3=c.createRelationshipTo(d,RelationshipType.withName("R"));
      r4=d.createRelationshipTo(e,RelationshipType.withName("R"));
      tx.success();
    }
     Path mapped=mapper.mapPath(path(asNodeValues(a,b,c,d,e),asRelationshipsValues(r1,r2,r3,r4)));
    try (Transaction ignore=db.beginTx()){
      assertThat(mapped.length(),equalTo(4));
      assertThat(mapped.startNode(),equalTo(a));
      assertThat(mapped.endNode(),equalTo(e));
      assertThat(Iterables.asList(mapped.relationships()),equalTo(Arrays.asList(r1,r2,r3,r4)));
      assertThat(Iterables.asList(mapped.reverseRelationships()),equalTo(Arrays.asList(r4,r3,r2,r1)));
      assertThat(Iterables.asList(mapped.nodes()),equalTo(Arrays.asList(a,b,c,d,e)));
      assertThat(Iterables.asList(mapped.reverseNodes()),equalTo(Arrays.asList(e,d,c,b,a)));
      assertThat(mapped.lastRelationship(),equalTo(r4));
      assertThat(Iterators.asList(mapped.iterator()),equalTo(Arrays.asList(a,r1,b,r2,c,r3,d,r4,e)));
    }
   }
  @Test public void shouldMapDirectRelationship(){
    Node start, end;
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      start=db.createNode();
      end=db.createNode();
      relationship=start.createRelationshipTo(end,RelationshipType.withName("R"));
      tx.success();
    }
     RelationshipValue relationshipValue=VirtualValues.relationshipValue(relationship.getId(),nodeValue(start.getId(),Values.EMPTY_TEXT_ARRAY,EMPTY_MAP),nodeValue(start.getId(),Values.EMPTY_TEXT_ARRAY,EMPTY_MAP),stringValue("R"),EMPTY_MAP);
    Relationship coreAPIRelationship=mapper.mapRelationship(relationshipValue);
    try (Transaction ignore=db.beginTx()){
      assertThat(coreAPIRelationship.getId(),equalTo(relationship.getId()));
      assertThat(coreAPIRelationship.getStartNode(),equalTo(start));
      assertThat(coreAPIRelationship.getEndNode(),equalTo(end));
    }
   }
  private NodeValue[] asNodeValues(  Node... nodes){
    return Arrays.stream(nodes).map(ValueUtils::fromNodeProxy).toArray(NodeValue[]::new);
  }
  private RelationshipValue[] asRelationshipsValues(  Relationship... relationships){
    return Arrays.stream(relationships).map(ValueUtils::fromRelationshipProxy).toArray(RelationshipValue[]::new);
  }
}
