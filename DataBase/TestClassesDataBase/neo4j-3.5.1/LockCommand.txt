public abstract class LockCommand implements WorkerCommand<Void,Object> {
  private final OtherThreadRule<Void> thread;
  private final Locks.Client client;
  protected LockCommand(  OtherThreadRule<Void> thread,  Locks.Client client){
    this.thread=thread;
    this.client=client;
  }
  public Future<Object> call(){
    return thread.execute(this);
  }
  public Future<Object> callAndAssertWaiting(){
    Future<Object> otherThreadLock=call();
    assertThat(thread,isWaiting());
    assertFalse("Should not have acquired lock.",otherThreadLock.isDone());
    return otherThreadLock;
  }
  public Future<Object> callAndAssertNotWaiting(){
    Future<Object> run=call();
    assertNotWaiting(client,run);
    return run;
  }
  @Override public Object doWork(  Void state){
    doWork(client);
    return null;
  }
  abstract void doWork(  Locks.Client client) throws AcquireLockTimeoutException ;
  public Locks.Client client(){
    return client;
  }
}
