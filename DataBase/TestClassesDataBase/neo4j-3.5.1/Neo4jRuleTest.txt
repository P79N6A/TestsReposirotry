class Neo4jRuleTest {
  @Test void shouldReturnHttpsUriWhenConfigured() throws Throwable {
    URI configuredHttpsUri=URI.create("https://localhost:7473");
    assertEquals(configuredHttpsUri,getHttpsUriFromNeo4jRule(configuredHttpsUri));
  }
  @Test void shouldThrowWhenHttpsUriNotConfigured() throws Throwable {
    assertThrows(IllegalStateException.class,() -> getHttpsUriFromNeo4jRule(null));
  }
  private static URI getHttpsUriFromNeo4jRule(  URI configuredHttpsUri) throws Throwable {
    ServerControls serverControls=mock(ServerControls.class);
    when(serverControls.httpsURI()).thenReturn(Optional.ofNullable(configuredHttpsUri));
    TestServerBuilder serverBuilder=mock(TestServerBuilder.class);
    when(serverBuilder.newServer()).thenReturn(serverControls);
    Neo4jRule rule=new Neo4jRule(serverBuilder);
    AtomicReference<URI> uriRef=new AtomicReference<>();
    Statement statement=rule.apply(new Statement(){
      @Override public void evaluate() throws Throwable {
        uriRef.set(rule.httpsURI());
      }
    }
,createTestDescription(Neo4jRuleTest.class,"test"));
    statement.evaluate();
    return uriRef.get();
  }
}
