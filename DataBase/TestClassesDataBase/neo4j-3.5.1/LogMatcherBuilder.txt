public static final class LogMatcherBuilder {
  private final Matcher<String> contextMatcher;
  private LogMatcherBuilder(  Matcher<String> contextMatcher){
    this.contextMatcher=contextMatcher;
  }
  public LogMatcher debug(  String message){
    return new LogMatcher(contextMatcher,DEBUG_LEVEL_MATCHER,equalTo(message),NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher debug(  Matcher<String> messageMatcher){
    return new LogMatcher(contextMatcher,DEBUG_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher debug(  Matcher<String> messageMatcher,  Matcher<Throwable> throwableMatcher){
    return new LogMatcher(contextMatcher,DEBUG_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,throwableMatcher);
  }
  public LogMatcher debug(  String format,  Object... arguments){
    return debug(equalTo(format),arguments);
  }
  public LogMatcher debug(  Matcher<String> format,  Object... arguments){
    return new LogMatcher(contextMatcher,DEBUG_LEVEL_MATCHER,format,arrayContaining(ensureMatchers(arguments)),NULL_THROWABLE_MATCHER);
  }
  public LogMatcher info(  String message){
    return new LogMatcher(contextMatcher,INFO_LEVEL_MATCHER,equalTo(message),NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher info(  Matcher<String> messageMatcher){
    return new LogMatcher(contextMatcher,INFO_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher info(  Matcher<String> messageMatcher,  Matcher<Throwable> throwableMatcher){
    return new LogMatcher(contextMatcher,INFO_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,throwableMatcher);
  }
  public LogMatcher info(  String format,  Object... arguments){
    return info(equalTo(format),arguments);
  }
  public LogMatcher info(  Matcher<String> format,  Object... arguments){
    return new LogMatcher(contextMatcher,INFO_LEVEL_MATCHER,format,arrayContaining(ensureMatchers(arguments)),NULL_THROWABLE_MATCHER);
  }
  public LogMatcher warn(  String message){
    return new LogMatcher(contextMatcher,WARN_LEVEL_MATCHER,equalTo(message),NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher warn(  Matcher<String> messageMatcher){
    return new LogMatcher(contextMatcher,WARN_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher warn(  Matcher<String> messageMatcher,  Matcher<Throwable> throwableMatcher){
    return new LogMatcher(contextMatcher,WARN_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,throwableMatcher);
  }
  public LogMatcher warn(  String format,  Object... arguments){
    return warn(equalTo(format),arguments);
  }
  public LogMatcher warn(  Matcher<String> format,  Object... arguments){
    return new LogMatcher(contextMatcher,WARN_LEVEL_MATCHER,format,arrayContaining(ensureMatchers(arguments)),NULL_THROWABLE_MATCHER);
  }
  public LogMatcher anyError(){
    return new LogMatcher(contextMatcher,ERROR_LEVEL_MATCHER,Matchers.any(String.class),ANY_ARGUMENTS_MATCHER,ANY_THROWABLE_MATCHER);
  }
  public LogMatcher error(  String message){
    return new LogMatcher(contextMatcher,ERROR_LEVEL_MATCHER,equalTo(message),NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher error(  Matcher<String> messageMatcher){
    return new LogMatcher(contextMatcher,ERROR_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,NULL_THROWABLE_MATCHER);
  }
  public LogMatcher error(  Matcher<String> messageMatcher,  Matcher<? extends Throwable> throwableMatcher){
    return new LogMatcher(contextMatcher,ERROR_LEVEL_MATCHER,messageMatcher,NULL_ARGUMENTS_MATCHER,throwableMatcher);
  }
  public LogMatcher error(  String format,  Object... arguments){
    return error(equalTo(format),arguments);
  }
  public LogMatcher error(  Matcher<String> format,  Object... arguments){
    return new LogMatcher(contextMatcher,ERROR_LEVEL_MATCHER,format,arrayContaining(ensureMatchers(arguments)),NULL_THROWABLE_MATCHER);
  }
  public LogMatcher any(){
    return new LogMatcher(contextMatcher,ANY_LEVEL_MATCHER,ANY_MESSAGE_MATCHER,anyOf(NULL_ARGUMENTS_MATCHER,ANY_ARGUMENTS_MATCHER),anyOf(NULL_THROWABLE_MATCHER,ANY_THROWABLE_MATCHER));
  }
  @SuppressWarnings("unchecked") private Matcher<Object>[] ensureMatchers(  Object... arguments){
    List<Matcher> matchers=new ArrayList<>();
    for (    Object arg : arguments) {
      if (arg instanceof Matcher) {
        matchers.add((Matcher)arg);
      }
 else {
        matchers.add(equalTo(arg));
      }
    }
    return matchers.toArray(new Matcher[arguments.length]);
  }
}
