public class HttpsAccessIT extends ExclusiveServerTestBase {
  private SSLSocketFactory originalSslSocketFactory;
  private CommunityNeoServer server;
  @Before public void setUp(){
    originalSslSocketFactory=HttpsURLConnection.getDefaultSSLSocketFactory();
  }
  @After public void tearDown(){
    HttpsURLConnection.setDefaultSSLSocketFactory(originalSslSocketFactory);
    server.stop();
  }
  @Test public void serverShouldSupportSsl() throws Exception {
    startServer();
    assertThat(GET(httpsUri()).status(),is(200));
    assertThat(GET(server.baseUri().toString()).status(),is(200));
  }
  @Test public void txEndpointShouldReplyWithHttpsWhenItReturnsURLs() throws Exception {
    startServer();
    String baseUri=server.baseUri().toString();
    HTTP.Response response=POST(baseUri + "db/data/transaction",quotedJson("{'statements':[]}"));
    assertThat(response.location(),startsWith(baseUri));
    assertThat(response.get("commit").asText(),startsWith(baseUri));
  }
  @Test public void shouldExposeBaseUriWhenHttpEnabledAndHttpsDisabled() throws Exception {
    startServer(true,false);
    URI uri=server.baseUri();
    assertEquals("http",uri.getScheme());
    HostnamePort expectedHostPort=addressForConnector("http");
    assertEquals(expectedHostPort.getHost(),uri.getHost());
    assertEquals(expectedHostPort.getPort(),uri.getPort());
  }
  @Test public void shouldExposeBaseUriWhenHttpDisabledAndHttpsEnabled() throws Exception {
    startServer(false,true);
    URI uri=server.baseUri();
    assertEquals("https",uri.getScheme());
    HostnamePort expectedHostPort=addressForConnector("https");
    assertEquals(expectedHostPort.getHost(),uri.getHost());
    assertEquals(expectedHostPort.getPort(),uri.getPort());
  }
  private void startServer() throws Exception {
    startServer(true,true);
  }
  private void startServer(  boolean httpEnabled,  boolean httpsEnabled) throws Exception {
    CommunityServerBuilder serverBuilder=serverOnRandomPorts().usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath());
    if (!httpEnabled) {
      serverBuilder.withHttpDisabled();
    }
    if (httpsEnabled) {
      serverBuilder.withHttpsEnabled();
    }
    server=serverBuilder.build();
    server.start();
    TrustManager[] trustAllCerts={new InsecureTrustManager()};
    SSLContext sc=SSLContext.getInstance("TLS");
    sc.init(null,trustAllCerts,new SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
  }
  private String httpsUri() throws Exception {
    HostnamePort hostPort=addressForConnector("https");
    assertNotNull(hostPort);
    return new URIBuilder().setScheme("https").setHost(hostPort.getHost()).setPort(hostPort.getPort()).build().toString();
  }
  private HostnamePort addressForConnector(  String name){
    DependencyResolver resolver=server.database.getGraph().getDependencyResolver();
    ConnectorPortRegister portRegister=resolver.resolveDependency(ConnectorPortRegister.class);
    return portRegister.getLocalAddress(name);
  }
}
