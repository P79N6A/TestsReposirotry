@RunWith(Parameterized.class) public class FileVisitorsDecoratorsTest {
  @Parameterized.Parameter(0) public String name;
  @Parameterized.Parameter(1) public Function<FileVisitor<Path>,FileVisitor<Path>> decoratorConstructor;
  @Parameterized.Parameter(2) public boolean throwsExceptions;
  @Parameterized.Parameters(name="{0}") public static List<Object[]> formats(){
    return asList(new Object[]{"decorator",(Function<FileVisitor<Path>,FileVisitor<Path>>)FileVisitors.Decorator::new,false},new Object[]{"onFile",(Function<FileVisitor<Path>,FileVisitor<Path>>)wrapped -> FileVisitors.onFile(noop(),wrapped),false},new Object[]{"onDirectory",(Function<FileVisitor<Path>,FileVisitor<Path>>)wrapped -> FileVisitors.onDirectory(noop(),wrapped),false},new Object[]{"throwExceptions",(Function<FileVisitor<Path>,FileVisitor<Path>>)FileVisitors::throwExceptions,true},new Object[]{"onlyMatching",(Function<FileVisitor<Path>,FileVisitor<Path>>)wrapped -> FileVisitors.onlyMatching(Predicates.alwaysTrue(),wrapped),false});
  }
  @SuppressWarnings("unchecked") public FileVisitor<Path> wrapped=mock(FileVisitor.class);
  public FileVisitor<Path> decorator;
  @Before public void setup(){
    decorator=decoratorConstructor.apply(wrapped);
  }
  @Test public void shouldDelegatePreVisitDirectory() throws IOException {
    Path dir=Paths.get("some-dir");
    BasicFileAttributes attrs=mock(BasicFileAttributes.class);
    decorator.preVisitDirectory(dir,attrs);
    verify(wrapped).preVisitDirectory(dir,attrs);
  }
  @Test public void shouldPropagateReturnValueFromPreVisitDirectory() throws IOException {
    for (    FileVisitResult result : FileVisitResult.values()) {
      when(wrapped.preVisitDirectory(any(),any())).thenReturn(result);
      assertThat(decorator.preVisitDirectory(null,null),is(result));
    }
  }
  @Test public void shouldPropagateExceptionsFromPreVisitDirectory() throws IOException {
    when(wrapped.preVisitDirectory(any(),any())).thenThrow(new IOException());
    try {
      decorator.preVisitDirectory(null,null);
      fail("expected exception");
    }
 catch (    IOException ignored) {
    }
  }
  @Test public void shouldDelegatePostVisitDirectory() throws IOException {
    Path dir=Paths.get("some-dir");
    IOException e=throwsExceptions ? null : new IOException();
    decorator.postVisitDirectory(dir,e);
    verify(wrapped).postVisitDirectory(dir,e);
  }
  @Test public void shouldPropagateReturnValueFromPostVisitDirectory() throws IOException {
    for (    FileVisitResult result : FileVisitResult.values()) {
      when(wrapped.postVisitDirectory(any(),any())).thenReturn(result);
      assertThat(decorator.postVisitDirectory(null,null),is(result));
    }
  }
  @Test public void shouldPropagateExceptionsFromPostVisitDirectory() throws IOException {
    when(wrapped.postVisitDirectory(any(),any())).thenThrow(new IOException());
    try {
      decorator.postVisitDirectory(null,null);
      fail("expected exception");
    }
 catch (    IOException ignored) {
    }
  }
  @Test public void shouldDelegateVisitFile() throws IOException {
    Path dir=Paths.get("some-dir");
    BasicFileAttributes attrs=mock(BasicFileAttributes.class);
    decorator.visitFile(dir,attrs);
    verify(wrapped).visitFile(dir,attrs);
  }
  @Test public void shouldPropagateReturnValueFromVisitFile() throws IOException {
    for (    FileVisitResult result : FileVisitResult.values()) {
      when(wrapped.visitFile(any(),any())).thenReturn(result);
      assertThat(decorator.visitFile(null,null),is(result));
    }
  }
  @Test public void shouldPropagateExceptionsFromVisitFile() throws IOException {
    when(wrapped.visitFile(any(),any())).thenThrow(new IOException());
    try {
      decorator.visitFile(null,null);
      fail("expected exception");
    }
 catch (    IOException ignored) {
    }
  }
  @Test public void shouldDelegateVisitFileFailed() throws IOException {
    Path dir=Paths.get("some-dir");
    IOException e=throwsExceptions ? null : new IOException();
    decorator.visitFileFailed(dir,e);
    verify(wrapped).visitFileFailed(dir,e);
  }
  @Test public void shouldPropagateReturnValueFromVisitFileFailed() throws IOException {
    for (    FileVisitResult result : FileVisitResult.values()) {
      when(wrapped.visitFileFailed(any(),any())).thenReturn(result);
      assertThat(decorator.visitFileFailed(null,null),is(result));
    }
  }
  @Test public void shouldPropagateExceptionsFromVisitFileFailed() throws IOException {
    when(wrapped.visitFileFailed(any(),any())).thenThrow(new IOException());
    try {
      decorator.visitFileFailed(null,null);
      fail("expected exception");
    }
 catch (    IOException ignored) {
    }
  }
}
