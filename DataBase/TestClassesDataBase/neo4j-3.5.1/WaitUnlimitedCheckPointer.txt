private static class WaitUnlimitedCheckPointer implements CheckPointer {
  private final CheckableIOLimiter ioLimiter;
  private final CountDownLatch latch;
  private volatile boolean checkpointCreated;
  WaitUnlimitedCheckPointer(  CheckableIOLimiter ioLimiter,  CountDownLatch latch){
    this.ioLimiter=ioLimiter;
    this.latch=latch;
    checkpointCreated=false;
  }
  @Override public long checkPointIfNeeded(  TriggerInfo triggerInfo){
    latch.countDown();
    while (ioLimiter.isLimited()) {
    }
    checkpointCreated=true;
    return 42;
  }
  @Override public long tryCheckPoint(  TriggerInfo triggerInfo){
    throw new UnsupportedOperationException("This should have not been called");
  }
  @Override public long forceCheckPoint(  TriggerInfo triggerInfo){
    throw new UnsupportedOperationException("This should have not been called");
  }
  @Override public long lastCheckPointedTransactionId(){
    return 0;
  }
  boolean isCheckpointCreated(){
    return checkpointCreated;
  }
}
