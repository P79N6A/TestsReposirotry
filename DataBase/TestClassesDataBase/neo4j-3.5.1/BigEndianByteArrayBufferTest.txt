public class BigEndianByteArrayBufferTest {
  BigEndianByteArrayBuffer buffer=new BigEndianByteArrayBuffer(new byte[8]);
  @Test public void shouldWriteLong(){
    buffer.putLong(0,0xABCDEF0123456789L);
    assertEquals(0xAB,0xFF & buffer.getByte(0));
    assertEquals(0xCD,0xFF & buffer.getByte(1));
    assertEquals(0xEF,0xFF & buffer.getByte(2));
    assertEquals(0x01,0xFF & buffer.getByte(3));
    assertEquals(0x23,0xFF & buffer.getByte(4));
    assertEquals(0x45,0xFF & buffer.getByte(5));
    assertEquals(0x67,0xFF & buffer.getByte(6));
    assertEquals(0x89,0xFF & buffer.getByte(7));
    assertEquals(0xABCDEF0123456789L,buffer.getLong(0));
  }
  @Test public void shouldWriteInt(){
    buffer.putInt(0,0x12345678);
    buffer.putInt(4,0x87654321);
    assertEquals(0x12345678,buffer.getInt(0));
    assertEquals(0x87654321,buffer.getInt(4));
    assertEquals(0x1234567887654321L,buffer.getLong(0));
  }
  @Test public void shouldWriteShort(){
    buffer.putShort(0,(short)0x1234);
    buffer.putShort(2,(short)0x4321);
    buffer.putShort(4,(short)0xABCD);
    buffer.putShort(6,(short)0xFEDC);
    assertEquals((short)0x1234,buffer.getShort(0));
    assertEquals((short)0x4321,buffer.getShort(2));
    assertEquals((short)0xABCD,buffer.getShort(4));
    assertEquals((short)0xFEDC,buffer.getShort(6));
  }
  @Test public void shouldWriteChar(){
    buffer.putChar(0,'H');
    buffer.putChar(2,'E');
    buffer.putChar(4,'L');
    buffer.putChar(6,'O');
    assertEquals('H',buffer.getChar(0));
    assertEquals('E',buffer.getChar(2));
    assertEquals('L',buffer.getChar(4));
    assertEquals('O',buffer.getChar(6));
  }
  @Test public void shouldWriteByte(){
    for (int i=0; i < buffer.size(); i++) {
      buffer.putByte(i,(byte)((1 << i) + i));
    }
    for (int i=0; i < buffer.size(); i++) {
      assertEquals((byte)((1 << i) + i),buffer.getByte(i));
    }
  }
  @Test public void shouldCompareByteArrays(){
    final Matcher<Integer> LESS_THAN=lessThan(0);
    final Matcher<Integer> GREATER_THAN=greaterThan(0);
    final Matcher<Integer> EQUAL_TO=equalTo(0);
    assertCompare(new byte[0],EQUAL_TO,new byte[0]);
    assertCompare(new byte[]{1,2,3},EQUAL_TO,new byte[]{1,2,3});
    assertCompare(new byte[]{1,2,3},LESS_THAN,new byte[]{1,2,4});
    assertCompare(new byte[]{1,2,3},LESS_THAN,new byte[]{2,2,3});
    assertCompare(new byte[]{1,2,3},GREATER_THAN,new byte[]{1,2,0});
    assertCompare(new byte[]{1,2,3},GREATER_THAN,new byte[]{0,2,3});
  }
  private static void assertCompare(  byte[] lhs,  Matcher<Integer> isAsExpected,  byte[] rhs){
    assertThat(BigEndianByteArrayBuffer.compare(lhs,rhs,0),isAsExpected);
  }
}
