@RunWith(Parameterized.class) public class UniqueIndexApplicationIT {
  @Rule public final DatabaseRule db=new ImpermanentDatabaseRule();
  private final Function<GraphDatabaseService,?> createIndex;
  @Parameterized.Parameters(name="{0}") public static List<Object[]> indexTypes(){
    return asList(createIndex(index(label("Label1"),"key1")),createIndex(uniquenessConstraint(label("Label1"),"key1")));
  }
  @After public void then(){
    assertThat("Matching nodes from index lookup",db.when(db.tx(listNodeIdsFromIndexLookup(label("Label1"),"key1","value1"))),hasSize(1));
  }
  @Before public void given(){
    db.executeAndCommit(createIndex);
    db.executeAndCommit(awaitIndexesOnline(5,SECONDS));
  }
  @Test public void tx_createNode_addLabel_setProperty(){
    db.when(db.tx(createNode().andThen(addLabel(label("Label1")).andThen(setProperty("key1","value1")))));
  }
  @Test public void tx_createNode_tx_addLabel_setProperty(){
    db.when(db.tx(createNode()).andThen(db.tx(addLabel(label("Label1")).andThen(setProperty("key1","value1")))));
  }
  @Test public void tx_createNode_addLabel_tx_setProperty(){
    db.when(db.tx(createNode().andThen(addLabel(label("Label1")))).andThen(db.tx(setProperty("key1","value1"))));
  }
  @Test public void tx_createNode_setProperty_tx_addLabel(){
    db.when(db.tx(createNode().andThen(setProperty("key1","value1"))).andThen(db.tx(addLabel(label("Label1")))));
  }
  @Test public void tx_createNode_tx_addLabel_tx_setProperty(){
    db.when(db.tx(createNode()).andThen(db.tx(addLabel(label("Label1"))).andThen(db.tx(setProperty("key1","value1")))));
  }
  @Test public void tx_createNode_tx_setProperty_tx_addLabel(){
    db.when(db.tx(createNode()).andThen(db.tx(setProperty("key1","value1")).andThen(db.tx(addLabel(label("Label1"))))));
  }
  private static Matcher<List<?>> hasSize(  final int size){
    return new TypeSafeMatcher<List<?>>(){
      @Override protected boolean matchesSafely(      List<?> item){
        return item.size() == size;
      }
      @Override public void describeTo(      Description description){
        description.appendText("List with size=").appendValue(size);
      }
    }
;
  }
  private Function<GraphDatabaseService,List<Long>> listNodeIdsFromIndexLookup(  final Label label,  final String propertyKey,  final Object value){
    return graphDb -> {
      ArrayList<Long> ids=new ArrayList<>();
      for (      Node node : loop(graphDb.findNodes(label,propertyKey,value))) {
        ids.add(node.getId());
      }
      return ids;
    }
;
  }
  public UniqueIndexApplicationIT(  Function<GraphDatabaseService,?> createIndex){
    this.createIndex=createIndex;
  }
  private static Object[] createIndex(  Function<GraphDatabaseService,Void> createIndex){
    return new Object[]{createIndex};
  }
}
