@RunWith(MockitoJUnitRunner.class) public class OnlyMatchingFileVisitorTest {
  @Mock public FileVisitor<Path> wrapped;
  @Test public void shouldNotDelegatePreVisitDirectoryIfPredicateDoesntMatch() throws IOException {
    onlyMatching(alwaysFalse(),wrapped).preVisitDirectory(null,null);
    verify(wrapped,never()).preVisitDirectory(any(),any());
  }
  @Test public void shouldNotDelegatePostVisitDirectoryIfPredicateDoesntMatch() throws IOException {
    onlyMatching(alwaysFalse(),wrapped).postVisitDirectory(null,null);
    verify(wrapped,never()).postVisitDirectory(any(),any());
  }
  @Test public void shouldNotDelegateVisitFileIfPredicateDoesntMatch() throws IOException {
    onlyMatching(alwaysFalse(),wrapped).visitFile(null,null);
    verify(wrapped,never()).visitFile(any(),any());
  }
  @Test public void shouldNotDelegateVisitFileFailedIfPredicateDoesntMatch() throws IOException {
    onlyMatching(alwaysFalse(),wrapped).visitFileFailed(null,null);
    verify(wrapped,never()).visitFileFailed(any(),any());
  }
  @Test public void shouldNotSkipSubtreeFromPreVisitDirectoryIfPredicateDoesntMatch() throws IOException {
    assertThat(onlyMatching(alwaysFalse(),wrapped).preVisitDirectory(null,null),is(FileVisitResult.SKIP_SUBTREE));
  }
  @Test public void shouldContinueAfterPostVisitDirectoryIfPredicateDoesntMatch() throws IOException {
    assertThat(onlyMatching(alwaysFalse(),wrapped).postVisitDirectory(null,null),is(FileVisitResult.CONTINUE));
  }
  @Test public void shouldContinueAfterVisitFileIfPredicateDoesntMatch() throws IOException {
    assertThat(onlyMatching(alwaysFalse(),wrapped).visitFile(null,null),is(FileVisitResult.CONTINUE));
  }
  @Test public void shouldContinueAfterVisitFileFailedIfPredicateDoesntMatch() throws IOException {
    assertThat(onlyMatching(alwaysFalse(),wrapped).visitFileFailed(null,null),is(FileVisitResult.CONTINUE));
  }
}
