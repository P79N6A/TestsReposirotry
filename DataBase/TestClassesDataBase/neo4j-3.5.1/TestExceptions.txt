class TestExceptions {
  @Test void canPeelExceptions(){
    Throwable expected;
    Throwable exception=new LevelOneException("",new LevelTwoException("",new LevelThreeException("",expected=new LevelThreeException("include",new LevelFourException("")))));
    Throwable peeled=Exceptions.peel(exception,item -> !(item instanceof LevelThreeException) || !item.getMessage().contains("include"));
    assertEquals(expected,peeled);
  }
  @Test void canPeelUsingConveniencePredicate(){
    Throwable expected;
    Throwable exception=new ARuntimeException(new AnotherRuntimeException(new LevelFourException("",expected=new LevelThreeException("",new LevelFourException("")))));
    Throwable peeled=Exceptions.peel(exception,Predicates.instanceOfAny(RuntimeException.class,LevelFourException.class));
    assertEquals(expected,peeled);
  }
  @Test void shouldDetectContainsOneOfSome(){
    Throwable cause=new ARuntimeException(new AnotherRuntimeException(new NullPointerException("Some words")));
    assertTrue(Exceptions.contains(cause,NullPointerException.class));
    assertTrue(Exceptions.contains(cause,"words",NullPointerException.class));
    assertFalse(Exceptions.contains(cause,"not",NullPointerException.class));
  }
  @Test void shouldSetMessage(){
    String initialMessage="Initial message";
    LevelOneException exception=new LevelOneException(initialMessage);
    String prependedMessage="Prepend this: " + exception.getMessage();
    Exceptions.withMessage(exception,prependedMessage);
    assertEquals(prependedMessage,exception.getMessage());
  }
private static class LevelOneException extends Exception {
    LevelOneException(    String message){
      super(message);
    }
    LevelOneException(    String message,    Throwable cause){
      super(message,cause);
    }
  }
private static class LevelTwoException extends LevelOneException {
    LevelTwoException(    String message){
      super(message);
    }
    LevelTwoException(    String message,    Throwable cause){
      super(message,cause);
    }
  }
private static class LevelThreeException extends LevelTwoException {
    LevelThreeException(    String message){
      super(message);
    }
    LevelThreeException(    String message,    Throwable cause){
      super(message,cause);
    }
  }
private static class LevelFourException extends LevelThreeException {
    LevelFourException(    String message){
      super(message);
    }
    LevelFourException(    String message,    Throwable cause){
      super(message,cause);
    }
  }
private static class ARuntimeException extends RuntimeException {
    ARuntimeException(    Throwable cause){
      super(cause);
    }
  }
private static class AnotherRuntimeException extends RuntimeException {
    AnotherRuntimeException(    Throwable cause){
      super(cause);
    }
  }
}
