public class BoltResponseMessageWriterV1Test {
  @Test public void shouldWriteRecordMessage() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    writer.write(new RecordMessage(() -> new AnyValue[]{longValue(42),stringValue("42")}));
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).pack(longValue(42));
    inOrder.verify(packer).pack(stringValue("42"));
    inOrder.verify(output).messageSucceeded();
  }
  @Test public void shouldWriteSuccessMessage() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    MapValue metadata=map(new String[]{"a","b","c"},new AnyValue[]{intValue(1),stringValue("2"),date(2010,02,02)});
    writer.write(new SuccessMessage(metadata));
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).pack(metadata);
    inOrder.verify(output).messageSucceeded();
  }
  @Test public void shouldWriteFailureMessage() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    Status.Transaction errorStatus=Status.Transaction.DeadlockDetected;
    String errorMessage="Hi Deadlock!";
    writer.write(new FailureMessage(errorStatus,errorMessage));
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).pack(errorStatus.code().serialize());
    inOrder.verify(packer).pack(errorMessage);
    inOrder.verify(output).messageSucceeded();
  }
  @Test public void shouldWriteIgnoredMessage() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    writer.write(IgnoredMessage.IGNORED_MESSAGE);
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).packStructHeader(0,IGNORED.signature());
    inOrder.verify(output).messageSucceeded();
  }
  @Test public void shouldFlush() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    writer.flush();
    verify(packer).flush();
  }
  @Test public void shouldNotifyOutputAboutFailedRecordMessage() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    IOException error=new IOException("Unable to pack 42");
    doThrow(error).when(packer).pack(longValue(42));
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    try {
      writer.write(new RecordMessage(() -> new AnyValue[]{stringValue("42"),longValue(42)}));
      fail("Exception expected");
    }
 catch (    IOException e) {
      assertEquals(error,e);
    }
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).pack(stringValue("42"));
    inOrder.verify(packer).pack(longValue(42));
    inOrder.verify(output).messageFailed();
  }
  @Test public void shouldNotNotifyOutputWhenOutputItselfFails() throws Exception {
    PackOutput output=mock(PackOutput.class);
    Neo4jPack.Packer packer=mock(Neo4jPack.Packer.class);
    IOException error=new IOException("Unable to flush");
    doThrow(error).when(output).messageSucceeded();
    BoltResponseMessageWriterV1 writer=newWriter(output,packer);
    try {
      writer.write(new RecordMessage(() -> new AnyValue[]{longValue(1),longValue(2)}));
      fail("Exception expected");
    }
 catch (    IOException e) {
      assertEquals(error,e);
    }
    InOrder inOrder=inOrder(output,packer);
    inOrder.verify(output).beginMessage();
    inOrder.verify(packer).pack(longValue(1));
    inOrder.verify(packer).pack(longValue(2));
    inOrder.verify(output).messageSucceeded();
    verify(output,never()).messageFailed();
  }
  private static BoltResponseMessageWriterV1 newWriter(  PackOutput output,  Neo4jPack.Packer packer){
    return new BoltResponseMessageWriterV1(out -> packer,output,NullLogService.getInstance());
  }
}
