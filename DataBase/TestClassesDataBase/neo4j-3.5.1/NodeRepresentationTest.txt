public class NodeRepresentationTest {
  @Test public void shouldHaveSelfLink(){
    assertUriMatches(uriPattern(""),noderep(1234).selfUri());
  }
  @Test public void shouldHaveAllRelationshipsLink(){
    assertUriMatches(uriPattern("/relationships/all"),noderep(1234).allRelationshipsUri());
  }
  @Test public void shouldHaveIncomingRelationshipsLink(){
    assertUriMatches(uriPattern("/relationships/in"),noderep(1234).incomingRelationshipsUri());
  }
  @Test public void shouldHaveOutgoingRelationshipsLink(){
    assertUriMatches(uriPattern("/relationships/out"),noderep(1234).outgoingRelationshipsUri());
  }
  @Test public void shouldHaveAllTypedRelationshipsLinkTemplate(){
    assertUriMatches(uriPattern("/relationships/all/\\{-list\\|&\\|types\\}"),noderep(1234).allTypedRelationshipsUriTemplate());
  }
  @Test public void shouldHaveIncomingTypedRelationshipsLinkTemplate(){
    assertUriMatches(uriPattern("/relationships/in/\\{-list\\|&\\|types\\}"),noderep(1234).incomingTypedRelationshipsUriTemplate());
  }
  @Test public void shouldHaveOutgoingTypedRelationshipsLinkTemplate(){
    assertUriMatches(uriPattern("/relationships/out/\\{-list\\|&\\|types\\}"),noderep(1234).outgoingTypedRelationshipsUriTemplate());
  }
  @Test public void shouldHaveRelationshipCreationLink(){
    assertUriMatches(uriPattern("/relationships"),noderep(1234).relationshipCreationUri());
  }
  @Test public void shouldHavePropertiesLink(){
    assertUriMatches(uriPattern("/properties"),noderep(1234).propertiesUri());
  }
  @Test public void shouldHavePropertyLinkTemplate(){
    assertUriMatches(uriPattern("/properties/\\{key\\}"),noderep(1234).propertyUriTemplate());
  }
  @Test public void shouldHaveTraverseLinkTemplate(){
    assertUriMatches(uriPattern("/traverse/\\{returnType\\}"),noderep(1234).traverseUriTemplate());
  }
  @Test public void shouldSerialiseToMap(){
    Map<String,Object> repr=serialize(noderep(1234));
    assertNotNull(repr);
    verifySerialisation(repr);
  }
  @Test public void shouldHaveLabelsLink(){
    assertUriMatches(uriPattern("/labels"),noderep(1234).labelsUriTemplate());
  }
  private NodeRepresentation noderep(  long id){
    return new NodeRepresentation(node(id,properties(),"Label"));
  }
  public static void verifySerialisation(  Map<String,Object> noderep){
    assertUriMatches(uriPattern(""),noderep.get("self").toString());
    assertUriMatches(uriPattern("/relationships"),noderep.get("create_relationship").toString());
    assertUriMatches(uriPattern("/relationships/all"),noderep.get("all_relationships").toString());
    assertUriMatches(uriPattern("/relationships/in"),noderep.get("incoming_relationships").toString());
    assertUriMatches(uriPattern("/relationships/out"),noderep.get("outgoing_relationships").toString());
    assertUriMatches(uriPattern("/relationships/all/\\{-list\\|&\\|types\\}"),(String)noderep.get("all_typed_relationships"));
    assertUriMatches(uriPattern("/relationships/in/\\{-list\\|&\\|types\\}"),(String)noderep.get("incoming_typed_relationships"));
    assertUriMatches(uriPattern("/relationships/out/\\{-list\\|&\\|types\\}"),(String)noderep.get("outgoing_typed_relationships"));
    assertUriMatches(uriPattern("/properties"),noderep.get("properties").toString());
    assertUriMatches(uriPattern("/properties/\\{key\\}"),(String)noderep.get("property"));
    assertUriMatches(uriPattern("/traverse/\\{returnType\\}"),(String)noderep.get("traverse"));
    assertUriMatches(uriPattern("/labels"),(String)noderep.get("labels"));
    assertNotNull(noderep.get("data"));
    Map metadata=(Map)noderep.get("metadata");
    List labels=(List)metadata.get("labels");
    assertTrue(labels.isEmpty() || labels.equals(asList("Label")));
    assertTrue(((Number)metadata.get("id")).longValue() >= 0);
  }
}
