public class FilteringIOCursorTest {
  @Test public void shouldNotFilterWhenNothingToFilter() throws IOException {
    String[] strings={"a","b","c"};
    IOCursor<String> delegate=new ArrayIOCursor<>(strings);
    FilteringIOCursor<String> cursor=new FilteringIOCursor<>(delegate,alwaysTrue());
    assertEquals(asList(strings),extractCursorContent(cursor));
  }
  @Test public void shouldFilterFirstObject() throws IOException {
    String[] strings={"a","b","c"};
    IOCursor<String> delegate=new ArrayIOCursor<>(strings);
    FilteringIOCursor<String> cursor=new FilteringIOCursor<>(delegate,not(in("a")));
    assertEquals(exclude(asList(strings),"a"),extractCursorContent(cursor));
  }
  @Test public void shouldFilterMiddleObject() throws IOException {
    String[] strings={"a","b","c"};
    IOCursor<String> delegate=new ArrayIOCursor<>(strings);
    FilteringIOCursor<String> cursor=new FilteringIOCursor<>(delegate,not(in("b")));
    assertEquals(exclude(asList(strings),"b"),extractCursorContent(cursor));
  }
  @Test public void shouldFilterLastObject() throws IOException {
    String[] strings={"a","b","c"};
    IOCursor<String> delegate=new ArrayIOCursor<>(strings);
    FilteringIOCursor<String> cursor=new FilteringIOCursor<>(delegate,not(in("c")));
    assertEquals(exclude(asList(strings),"c"),extractCursorContent(cursor));
  }
  private <T>List<T> exclude(  List<T> list,  T... toExclude){
    List<T> toReturn=new ArrayList<>(list);
    for (    T item : toExclude) {
      while (toReturn.remove(item)) {
      }
    }
    return toReturn;
  }
  private <T>List<T> extractCursorContent(  FilteringIOCursor<T> cursor) throws IOException {
    List<T> list=new ArrayList<>();
    while (cursor.next()) {
      list.add(cursor.get());
    }
    return list;
  }
}
