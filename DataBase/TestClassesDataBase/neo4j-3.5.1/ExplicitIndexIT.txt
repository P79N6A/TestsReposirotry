@RunWith(Theories.class) public class ExplicitIndexIT extends ExclusiveServerTestBase {
  private CommunityNeoServer server;
  @DataPoints @SuppressWarnings("unused") public static String[] candidates={"","get_or_create","create_or_fail"};
  @After public void stopTheServer(){
    server.stop();
  }
  @Before public void startServer() throws IOException {
    server=serverOnRandomPorts().withHttpsEnabled().withProperty("dbms.shell.enabled","false").withProperty("dbms.security.auth_enabled","false").withProperty(ServerSettings.maximum_response_header_size.name(),"5000").usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
  }
  @Theory public void shouldRejectIndexValueLargerThanConfiguredSize(  String uniqueness){
    server.start();
    String nodeURI=HTTP.POST(server.baseUri().toString() + "db/data/node").header("Location");
    Random r=new Random();
    String value="";
    for (int i=0; i < 6_000; i++) {
      value+=(char)(r.nextInt(26) + 'a');
    }
    HTTP.Response response=HTTP.POST(server.baseUri().toString() + "db/data/index/node/favorites?uniqueness=" + uniqueness,quotedJson("{ 'value': '" + value + " ', 'uri':'"+ nodeURI+ "', 'key': 'some-key' }"));
    assertThat(response.status(),is(413));
  }
  @Theory public void shouldNotRejectIndexValueThatIsJustSmallerThanConfiguredSize(  String uniqueness){
    server.start();
    String nodeURI=HTTP.POST(server.baseUri().toString() + "db/data/node").header("Location");
    Random r=new Random();
    String value="";
    for (int i=0; i < 4_000; i++) {
      value+=(char)(r.nextInt(26) + 'a');
    }
    HTTP.Response response=HTTP.POST(server.baseUri().toString() + "db/data/index/node/favorites?uniqueness=" + uniqueness,quotedJson("{ 'value': '" + value + " ', 'uri':'"+ nodeURI+ "', 'key': 'some-key' }"));
    assertThat(response.status(),is(201));
  }
}
