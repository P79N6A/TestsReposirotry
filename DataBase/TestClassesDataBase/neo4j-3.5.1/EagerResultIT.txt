public class EagerResultIT {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  private GraphDatabaseService database;
  private TestTransactionVersionContextSupplier testContextSupplier;
  private File storeDir;
  private TestVersionContext testCursorContext;
  @Before public void setUp(){
    storeDir=testDirectory.directory();
    testContextSupplier=new TestTransactionVersionContextSupplier();
    database=startRestartableDatabase();
    prepareData();
    TransactionIdStore transactionIdStore=getTransactionIdStore();
    testCursorContext=new TestVersionContext(transactionIdStore::getLastClosedTransactionId);
    testContextSupplier.setCursorContext(testCursorContext);
  }
  @After public void tearDown(){
    if (database != null) {
      database.shutdown();
    }
  }
  @Test public void eagerResultContainsAllData(){
    Result result=database.execute("MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    int rows=0;
    while (result.hasNext()) {
      result.next();
      rows++;
    }
    assertEquals(2,rows);
  }
  @Test public void eagerResultContainsExecutionType(){
    Result result=database.execute("MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertEquals(QueryExecutionType.query(QueryExecutionType.QueryType.READ_ONLY),result.getQueryExecutionType());
  }
  @Test public void eagerResultContainsColumns(){
    Result result=database.execute("MATCH (n) RETURN n.c as a, count(n) as b");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertEquals(Arrays.asList("a","b"),result.columns());
  }
  @Test public void useColumnAsOnEagerResult(){
    Result result=database.execute("MATCH (n) RETURN n.c as c, n.b as b");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    ResourceIterator<Object> cValues=result.columnAs("c");
    int rows=0;
    while (cValues.hasNext()) {
      cValues.next();
      rows++;
    }
    assertEquals(2,rows);
  }
  @Test public void eagerResultHaveQueryStatistic(){
    Result result=database.execute("MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertFalse(result.getQueryStatistics().containsUpdates());
  }
  @Test public void eagerResultHaveExecutionPlan(){
    Result result=database.execute("profile MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertEquals(2,result.getExecutionPlanDescription().getProfilerStatistics().getRows());
  }
  @Test public void eagerResultHaveNotifications(){
    Result result=database.execute(" CYPHER planner=rule MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertThat(Iterables.count(result.getNotifications()),greaterThan(0L));
  }
  @Test public void eagerResultToString(){
    Result result=database.execute("MATCH (n) RETURN n.c, n.d");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    String resultString=result.resultAsString();
    assertTrue(resultString.contains("n.c, n.d"));
    assertTrue(resultString.contains("d, a"));
    assertTrue(resultString.contains("y, k"));
  }
  @Test public void eagerResultWriteAsStringToStream(){
    Result result=database.execute("MATCH (n) RETURN n.c");
    assertEquals(1,testCursorContext.getAdditionalAttempts());
    assertEquals(result.resultAsString(),printToStream(result));
  }
  @Test public void eagerResultVisit() throws Exception {
    Result result=database.execute("MATCH (n) RETURN n.c");
    List<String> values=new ArrayList<>();
    result.accept((Result.ResultVisitor<Exception>)row -> {
      values.add(row.getString("n.c"));
      return false;
    }
);
    assertThat(values,hasSize(2));
    assertThat(values,containsInAnyOrder("d","y"));
  }
  @Test(expected=QueryExecutionException.class) public void dirtyContextDuringResultVisitResultInUnstableSnapshotException() throws Exception {
    Result result=database.execute("MATCH (n) RETURN n.c");
    List<String> values=new ArrayList<>();
    result.accept((Result.ResultVisitor<Exception>)row -> {
      testCursorContext.markAsDirty();
      values.add(row.getString("n.c"));
      return false;
    }
);
  }
  @Test(expected=QueryExecutionException.class) public void dirtyContextEntityNotFoundExceptionDuringResultVisitResultInUnstableSnapshotException() throws Exception {
    Result result=database.execute("MATCH (n) RETURN n.c");
    result.accept((Result.ResultVisitor<Exception>)row -> {
      testCursorContext.markAsDirty();
      throw new NotFoundException(new RuntimeException());
    }
);
  }
  private String printToStream(  Result result){
    StringWriter stringWriter=new StringWriter();
    PrintWriter printWriter=new PrintWriter(stringWriter);
    result.writeAsStringTo(printWriter);
    printWriter.flush();
    return stringWriter.toString();
  }
  private void prepareData(){
    Label label=Label.label("label");
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      node.setProperty("c","d");
      node.setProperty("d","a");
      transaction.success();
    }
     try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      node.setProperty("c","y");
      node.setProperty("d","k");
      transaction.success();
    }
   }
  private GraphDatabaseService startRestartableDatabase(){
    return new CustomGraphDatabaseFactory(new CustomFacadeFactory()).newEmbeddedDatabaseBuilder(storeDir).setConfig(GraphDatabaseSettings.snapshot_query,Settings.TRUE).newGraphDatabase();
  }
  private TransactionIdStore getTransactionIdStore(){
    DependencyResolver dependencyResolver=((GraphDatabaseAPI)database).getDependencyResolver();
    return dependencyResolver.resolveDependency(TransactionIdStore.class);
  }
private class CustomGraphDatabaseFactory extends TestGraphDatabaseFactory {
    private GraphDatabaseFacadeFactory customFacadeFactory;
    CustomGraphDatabaseFactory(    GraphDatabaseFacadeFactory customFacadeFactory){
      this.customFacadeFactory=customFacadeFactory;
    }
    @Override protected GraphDatabaseBuilder.DatabaseCreator createDatabaseCreator(    File storeDir,    GraphDatabaseFactoryState state){
      return new GraphDatabaseBuilder.DatabaseCreator(){
        @Override public GraphDatabaseService newDatabase(        Config config){
          return customFacadeFactory.newFacade(storeDir,config,GraphDatabaseDependencies.newDependencies(state.databaseDependencies()));
        }
      }
;
    }
  }
private class CustomFacadeFactory extends GraphDatabaseFacadeFactory {
    CustomFacadeFactory(){
      super(DatabaseInfo.COMMUNITY,CommunityEditionModule::new);
    }
    @Override protected PlatformModule createPlatform(    File storeDir,    Config config,    Dependencies dependencies){
      return new PlatformModule(storeDir,config,databaseInfo,dependencies){
        @Override protected VersionContextSupplier createCursorContextSupplier(        Config config){
          return testContextSupplier != null ? testContextSupplier : super.createCursorContextSupplier(config);
        }
      }
;
    }
  }
private class TestVersionContext extends TransactionVersionContext {
    private boolean useCorrectLastCommittedTxId;
    private int additionalAttempts;
    TestVersionContext(    LongSupplier transactionIdSupplier){
      super(transactionIdSupplier);
    }
    @Override public long lastClosedTransactionId(){
      return useCorrectLastCommittedTxId ? TransactionIdStore.BASE_TX_ID : super.lastClosedTransactionId();
    }
    @Override public void markAsDirty(){
      super.markAsDirty();
      useCorrectLastCommittedTxId=true;
    }
    @Override public boolean isDirty(){
      additionalAttempts++;
      return super.isDirty();
    }
    int getAdditionalAttempts(){
      return additionalAttempts;
    }
  }
private class TestTransactionVersionContextSupplier extends TransactionVersionContextSupplier {
    void setCursorContext(    VersionContext versionContext){
      this.cursorContext.set(versionContext);
    }
  }
}
