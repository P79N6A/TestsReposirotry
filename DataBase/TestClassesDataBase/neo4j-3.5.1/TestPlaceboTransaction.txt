public class TestPlaceboTransaction {
  private Transaction placeboTx;
  private Node resource;
  private KernelTransaction kernelTransaction;
  private Locks locks;
  @Before public void before(){
    ThreadToStatementContextBridge bridge=mock(ThreadToStatementContextBridge.class);
    Statement statement=mock(Statement.class);
    when(bridge.get()).thenReturn(statement);
    kernelTransaction=spy(KernelTransaction.class);
    locks=mock(Locks.class);
    when(kernelTransaction.locks()).thenReturn(locks);
    placeboTx=new PlaceboTransaction(kernelTransaction);
    resource=mock(Node.class);
    when(resource.getId()).thenReturn(1L);
  }
  @Test public void shouldRollbackParentByDefault(){
    placeboTx.close();
    verify(kernelTransaction).failure();
  }
  @Test public void shouldRollbackParentIfFailureCalled(){
    placeboTx.failure();
    placeboTx.close();
    verify(kernelTransaction,times(2)).failure();
  }
  @Test public void shouldNotRollbackParentIfSuccessCalled(){
    placeboTx.success();
    placeboTx.close();
    verify(kernelTransaction,never()).failure();
  }
  @Test public void successCannotOverrideFailure(){
    placeboTx.failure();
    placeboTx.success();
    placeboTx.close();
    verify(kernelTransaction).failure();
    verify(kernelTransaction,never()).success();
  }
  @Test public void canAcquireReadLock(){
    placeboTx.acquireReadLock(resource);
    verify(locks).acquireSharedNodeLock(resource.getId());
  }
  @Test public void canAcquireWriteLock(){
    placeboTx.acquireWriteLock(resource);
    verify(locks).acquireExclusiveNodeLock(resource.getId());
  }
  @Test public void shouldReturnTerminationReason(){
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    when(kernelTransaction.getReasonIfTerminated()).thenReturn(Optional.empty()).thenReturn(Optional.of(Status.Transaction.Interrupted));
    PlaceboTransaction tx=new PlaceboTransaction(kernelTransaction);
    Optional<Status> terminationReason1=tx.terminationReason();
    Optional<Status> terminationReason2=tx.terminationReason();
    assertFalse(terminationReason1.isPresent());
    assertTrue(terminationReason2.isPresent());
    assertEquals(Status.Transaction.Interrupted,terminationReason2.get());
  }
}
