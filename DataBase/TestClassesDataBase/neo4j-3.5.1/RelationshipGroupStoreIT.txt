public class RelationshipGroupStoreIT {
  private static final int RELATIONSHIP_COUNT=20;
  @Rule public final DatabaseRule db=new ImpermanentDatabaseRule().withSetting(GraphDatabaseSettings.dense_node_threshold,"1");
  @Test public void shouldCreateAllTheseRelationshipTypes(){
    shiftHighId(db);
    Node node;
    try (Transaction tx=db.beginTx()){
      node=db.createNode();
      for (int i=0; i < RELATIONSHIP_COUNT; i++) {
        node.createRelationshipTo(db.createNode(),type(i));
      }
      tx.success();
    }
     try (Transaction ignored=db.beginTx()){
      for (int i=0; i < RELATIONSHIP_COUNT; i++) {
        assertEquals("Should be possible to get relationships of type with id in unsigned short range.",1,count(node.getRelationships(type(i))));
      }
    }
   }
  private void shiftHighId(  GraphDatabaseAPI db){
    RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    NeoStores neoStores=storageEngine.testAccessNeoStores();
    neoStores.getRelationshipTypeTokenStore().setHighId(Short.MAX_VALUE - RELATIONSHIP_COUNT / 2);
  }
  private RelationshipType type(  int i){
    return RelationshipType.withName("TYPE_" + i);
  }
}
