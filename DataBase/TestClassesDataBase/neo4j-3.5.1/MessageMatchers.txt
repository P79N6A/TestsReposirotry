@SuppressWarnings("unchecked") public class MessageMatchers {
  private MessageMatchers(){
  }
  private static Map<String,Object> toRawMap(  MapValue mapValue){
    Deserializer deserializer=new Deserializer();
    HashMap<String,Object> map=new HashMap<>(mapValue.size());
    mapValue.foreach((key,value) -> {
      value.writeTo(deserializer);
      map.put(key,deserializer.value());
    }
);
    return map;
  }
private static class Deserializer extends BaseToObjectValueWriter<RuntimeException> {
    @Override protected Node newNodeProxyById(    long id){
      return null;
    }
    @Override protected Relationship newRelationshipProxyById(    long id){
      return null;
    }
    @Override protected Point newPoint(    CoordinateReferenceSystem crs,    double[] coordinate){
      return null;
    }
  }
  public static Matcher<List<ResponseMessage>> equalsMessages(  final Matcher<ResponseMessage>... messageMatchers){
    return new TypeSafeMatcher<List<ResponseMessage>>(){
      @Override protected boolean matchesSafely(      List<ResponseMessage> messages){
        if (messageMatchers.length != messages.size()) {
          return false;
        }
        for (int i=0; i < messageMatchers.length; i++) {
          if (!messageMatchers[i].matches(messages.get(i))) {
            return false;
          }
        }
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendList("MessageList[",", ","]",Arrays.asList(messageMatchers));
      }
    }
;
  }
  public static Matcher<ResponseMessage> hasNotification(  Notification notification){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(SuccessMessage.class));
        Map<String,Object> meta=toRawMap(((SuccessMessage)t).meta());
        assertThat(meta.containsKey("notifications"),is(true));
        Set<Notification> notifications=((List<Map<String,Object>>)meta.get("notifications")).stream().map(TestNotification::fromMap).collect(Collectors.toSet());
        assertThat(notifications,Matchers.contains(notification));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("SUCCESS");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgSuccess(  final Map<String,Object> metadata){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(SuccessMessage.class));
        assertThat(toRawMap(((SuccessMessage)t).meta()),equalTo(metadata));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("SUCCESS");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgSuccess(  final Matcher<Map<String,?>> matcher){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(SuccessMessage.class));
        Map<String,Object> actual=toRawMap(((SuccessMessage)t).meta());
        assertThat(actual,matcher);
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("SUCCESS");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgSuccess(){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(SuccessMessage.class));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("SUCCESS");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgIgnored(){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(IgnoredMessage.class));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("IGNORED");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgFailure(  final Status status,  final String message){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(FailureMessage.class));
        FailureMessage msg=(FailureMessage)t;
        assertThat(msg.status(),equalTo(status));
        assertThat(msg.message(),containsString(message));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("FAILURE");
      }
    }
;
  }
  public static Matcher<ResponseMessage> msgRecord(  final Matcher<QueryResult.Record> matcher){
    return new TypeSafeMatcher<ResponseMessage>(){
      @Override protected boolean matchesSafely(      ResponseMessage t){
        assertThat(t,instanceOf(RecordMessage.class));
        RecordMessage msg=(RecordMessage)t;
        assertThat(msg.record(),matcher);
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendText("RECORD ");
        description.appendDescriptionOf(matcher);
      }
    }
;
  }
  public static byte[] serialize(  Neo4jPack neo4jPack,  RequestMessage... messages) throws IOException {
    RecordingByteChannel rawData=new RecordingByteChannel();
    Neo4jPack.Packer packer=neo4jPack.newPacker(new BufferedChannelOutput(rawData));
    BoltRequestMessageWriter writer=new BoltRequestMessageWriter(packer);
    for (    RequestMessage message : messages) {
      writer.write(message);
    }
    writer.flush();
    return rawData.getBytes();
  }
  public static byte[] serialize(  Neo4jPack neo4jPack,  ResponseMessage... messages) throws IOException {
    RecordingByteChannel rawData=new RecordingByteChannel();
    BufferedChannelOutput output=new BufferedChannelOutput(rawData);
    BoltResponseMessageWriterV1 writer=new BoltResponseMessageWriterV1(neo4jPack::newPacker,output,NullLogService.getInstance());
    for (    ResponseMessage message : messages) {
      writer.write(message);
    }
    writer.flush();
    return rawData.getBytes();
  }
  public static ResponseMessage responseMessage(  Neo4jPack neo4jPack,  byte[] bytes) throws IOException {
    BoltResponseMessageReader unpacker=responseReader(neo4jPack,bytes);
    BoltResponseMessageRecorder consumer=new BoltResponseMessageRecorder();
    try {
      unpacker.read(consumer);
      return consumer.asList().get(0);
    }
 catch (    Throwable e) {
      throw new IOException("Failed to deserialize response, '" + e.getMessage() + "'.\n"+ "Raw data: \n"+ HexPrinter.hex(bytes),e);
    }
  }
  private static BoltResponseMessageReader responseReader(  Neo4jPack neo4jPack,  byte[] bytes){
    BufferedChannelInput input=new BufferedChannelInput(128);
    input.reset(new ArrayByteChannel(bytes));
    return new BoltResponseMessageReader(neo4jPack.newUnpacker(input));
  }
}
