public class BoltIT extends ExclusiveServerTestBase {
  @Rule public TemporaryFolder tmpDir=new TemporaryFolder();
  private CommunityNeoServer server;
  @After public void stopTheServer(){
    if (server != null) {
      server.stop();
    }
  }
  @Test public void shouldLaunchBolt() throws Throwable {
    server=serverOnRandomPorts().withProperty(new BoltConnector("bolt").type.name(),"BOLT").withProperty(new BoltConnector("bolt").enabled.name(),"true").withProperty(new BoltConnector("bolt").encryption_level.name(),"REQUIRED").withProperty(new BoltConnector("bolt").listen_address.name(),"localhost:0").usingDataDir(tmpDir.getRoot().getAbsolutePath()).build();
    server.start();
    ConnectorPortRegister connectorPortRegister=getDependency(ConnectorPortRegister.class);
    assertEventuallyServerResponds("localhost",connectorPortRegister.getLocalAddress("bolt").getPort());
  }
  @Test public void shouldBeAbleToSpecifyHostAndPort() throws Throwable {
    startServerWithBoltEnabled();
    ConnectorPortRegister connectorPortRegister=getDependency(ConnectorPortRegister.class);
    assertEventuallyServerResponds("localhost",connectorPortRegister.getLocalAddress("bolt").getPort());
  }
  @Test public void boltAddressShouldComeFromConnectorAdvertisedAddress() throws Throwable {
    String host="neo4j.com";
    startServerWithBoltEnabled(host,9999,"localhost",0);
    RestRequest request=new RestRequest(server.baseUri()).host(host);
    JaxRsResponse response=request.get();
    Map<String,Object> map=JsonHelper.jsonToMap(response.getEntity());
    assertThat(String.valueOf(map.get("bolt")),containsString("bolt://" + host + ":"+ 9999));
  }
  private void startServerWithBoltEnabled() throws IOException {
    startServerWithBoltEnabled("localhost",7687,"localhost",7687);
  }
  private void startServerWithBoltEnabled(  String advertisedHost,  int advertisedPort,  String listenHost,  int listenPort) throws IOException {
    server=serverOnRandomPorts().withProperty(new BoltConnector("bolt").type.name(),"BOLT").withProperty(new BoltConnector("bolt").enabled.name(),"true").withProperty(new BoltConnector("bolt").encryption_level.name(),"REQUIRED").withProperty(new BoltConnector("bolt").advertised_address.name(),advertisedHost + ":" + advertisedPort).withProperty(new BoltConnector("bolt").listen_address.name(),listenHost + ":" + listenPort).usingDataDir(tmpDir.getRoot().getAbsolutePath()).build();
    server.start();
  }
  private void assertEventuallyServerResponds(  String host,  int port) throws Exception {
    SecureSocketConnection conn=new SecureSocketConnection();
    conn.connect(new HostnamePort(host,port));
    conn.send(new byte[]{(byte)0x60,(byte)0x60,(byte)0xB0,(byte)0x17,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0});
    assertThat(conn.recv(4),equalTo(new byte[]{0,0,0,1}));
  }
  private <T>T getDependency(  Class<T> clazz){
    return server.getDatabase().getGraph().getDependencyResolver().resolveDependency(clazz);
  }
}
