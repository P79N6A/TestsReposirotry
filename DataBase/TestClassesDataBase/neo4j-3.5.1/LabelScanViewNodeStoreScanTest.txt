public class LabelScanViewNodeStoreScanTest {
  private NodeStore nodeStore=mock(NodeStore.class);
  private NeoStores neoStores=mock(NeoStores.class);
  private LabelScanStore labelScanStore=mock(LabelScanStore.class);
  private LabelScanReader labelScanReader=mock(LabelScanReader.class);
  private IntPredicate propertyKeyIdFilter=mock(IntPredicate.class);
  private Visitor<NodeLabelUpdate,Exception> labelUpdateVisitor=mock(Visitor.class);
  private Visitor<EntityUpdates,Exception> propertyUpdateVisitor=mock(Visitor.class);
  @Before public void setUp(){
    when(labelScanStore.newReader()).thenReturn(labelScanReader);
    when(neoStores.getNodeStore()).thenReturn(nodeStore);
  }
  @Test public void iterateOverLabeledNodeIds(){
    PrimitiveLongResourceIterator labeledNodes=PrimitiveLongResourceCollections.iterator(null,1,2,4,8);
    when(nodeStore.getHighId()).thenReturn(15L);
    int[] labelIds=new int[]{1,2};
    when(labelScanReader.nodesWithAnyOfLabels(labelIds)).thenReturn(labeledNodes);
    LabelScanViewNodeStoreScan<Exception> storeScan=getLabelScanViewStoreScan(labelIds);
    PrimitiveLongResourceIterator idIterator=storeScan.getEntityIdIterator();
    List<Long> visitedNodeIds=PrimitiveLongCollections.asList(idIterator);
    assertThat(visitedNodeIds,Matchers.hasSize(4));
    assertThat(visitedNodeIds,Matchers.hasItems(1L,2L,4L,8L));
  }
  private LabelScanViewNodeStoreScan<Exception> getLabelScanViewStoreScan(  int[] labelIds){
    return new LabelScanViewNodeStoreScan<>(new RecordStorageReader(neoStores),LockService.NO_LOCK_SERVICE,labelScanStore,labelUpdateVisitor,propertyUpdateVisitor,labelIds,propertyKeyIdFilter);
  }
}
