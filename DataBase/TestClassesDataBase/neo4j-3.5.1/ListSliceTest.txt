class ListSliceTest {
  @Test void shouldSliceList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue slice=inner.slice(2,4);
    ListValue expected=list(longValue(7L),longValue(8L));
    assertEquals(expected,slice);
    assertEquals(expected.hashCode(),slice.hashCode());
    assertArrayEquals(expected.asArray(),slice.asArray());
    assertTrue(iteratorsEqual(expected.iterator(),slice.iterator()));
  }
  @Test void shouldReturnEmptyListIfEmptyRange(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue slice=inner.slice(4,2);
    assertEquals(slice,EMPTY_LIST);
    assertTrue(iteratorsEqual(slice.iterator(),EMPTY_LIST.iterator()));
  }
  @Test void shouldHandleExceedingRange(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue slice=inner.slice(2,400000);
    ListValue expected=list(longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    assertEquals(expected,slice);
    assertEquals(expected.hashCode(),slice.hashCode());
    assertArrayEquals(expected.asArray(),slice.asArray());
    assertTrue(iteratorsEqual(expected.iterator(),slice.iterator()));
  }
  @Test void shouldHandleNegativeStart(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue slice=inner.slice(-2,400000);
    assertEquals(inner,slice);
    assertEquals(inner.hashCode(),slice.hashCode());
    assertArrayEquals(inner.asArray(),slice.asArray());
    assertTrue(iteratorsEqual(inner.iterator(),slice.iterator()));
  }
  @Test void shouldBeAbleToDropFromList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue drop=inner.drop(4);
    ListValue expected=list(longValue(9L),longValue(10L),longValue(11L));
    assertEquals(expected,drop);
    assertEquals(expected.hashCode(),drop.hashCode());
    assertArrayEquals(expected.asArray(),drop.asArray());
    assertTrue(iteratorsEqual(expected.iterator(),drop.iterator()));
  }
  @Test void shouldBeAbleToTakeFromList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue take=inner.take(3);
    ListValue expected=list(longValue(5L),longValue(6L),longValue(7L));
    assertEquals(expected,take);
    assertEquals(expected.hashCode(),take.hashCode());
    assertArrayEquals(expected.asArray(),take.asArray());
    assertTrue(iteratorsEqual(expected.iterator(),take.iterator()));
  }
}
