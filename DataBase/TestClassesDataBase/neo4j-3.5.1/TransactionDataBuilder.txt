public static final class TransactionDataBuilder {
  private final TransactionWriter writer;
  private final NodeStore nodes;
  TransactionDataBuilder(  TransactionWriter writer,  NodeStore nodes){
    this.writer=writer;
    this.nodes=nodes;
  }
  public void createSchema(  Collection<DynamicRecord> beforeRecords,  Collection<DynamicRecord> afterRecords,  SchemaRule rule){
    writer.createSchema(beforeRecords,afterRecords,rule);
  }
  public void propertyKey(  int id,  String key){
    writer.propertyKey(id,key,id + 1);
  }
  public void nodeLabel(  int id,  String name){
    writer.label(id,name,id + 1);
  }
  public void relationshipType(  int id,  String relationshipType){
    writer.relationshipType(id,relationshipType,id + 1);
  }
  public void update(  NeoStoreRecord before,  NeoStoreRecord after){
    writer.update(before,after);
  }
  public void create(  NodeRecord node){
    updateCounts(node,1);
    writer.create(node);
  }
  public void update(  NodeRecord before,  NodeRecord after){
    updateCounts(before,-1);
    updateCounts(after,1);
    writer.update(before,after);
  }
  public void delete(  NodeRecord node){
    updateCounts(node,-1);
    writer.delete(node);
  }
  public void create(  RelationshipRecord relationship){
    writer.create(relationship);
  }
  public void update(  RelationshipRecord before,  RelationshipRecord after){
    writer.update(before,after);
  }
  public void delete(  RelationshipRecord relationship){
    writer.delete(relationship);
  }
  public void create(  RelationshipGroupRecord group){
    writer.create(group);
  }
  public void update(  RelationshipGroupRecord before,  RelationshipGroupRecord after){
    writer.update(before,after);
  }
  public void delete(  RelationshipGroupRecord group){
    writer.delete(group);
  }
  public void create(  PropertyRecord property){
    writer.create(property);
  }
  public void update(  PropertyRecord before,  PropertyRecord property){
    writer.update(before,property);
  }
  public void delete(  PropertyRecord before,  PropertyRecord property){
    writer.delete(before,property);
  }
  private void updateCounts(  NodeRecord node,  int delta){
    writer.incrementNodeCount(StatementConstants.ANY_LABEL,delta);
    for (    long label : NodeLabelsField.parseLabelsField(node).get(nodes)) {
      writer.incrementNodeCount((int)label,delta);
    }
  }
  public void incrementNodeCount(  int labelId,  long delta){
    writer.incrementNodeCount(labelId,delta);
  }
  public void incrementRelationshipCount(  int startLabelId,  int typeId,  int endLabelId,  long delta){
    writer.incrementRelationshipCount(startLabelId,typeId,endLabelId,delta);
  }
}
