class UTF8StringValueBuilderTest {
  @Test void shouldHandleSingleByteCodePoints(){
    UTF8StringValueBuilder builder=new UTF8StringValueBuilder();
    int codepoint="$".codePointAt(0);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    TextValue textValue=builder.build();
    assertThat(textValue.stringValue(),equalTo("$$$"));
  }
  @Test void shouldHandleTwoByteCodePoints(){
    UTF8StringValueBuilder builder=new UTF8StringValueBuilder();
    int codepoint="¢".codePointAt(0);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    TextValue textValue=builder.build();
    assertThat(textValue.stringValue(),equalTo("¢¢¢"));
  }
  @Test void shouldHandleThreeByteCodePoints(){
    UTF8StringValueBuilder builder=new UTF8StringValueBuilder();
    int codepoint="€".codePointAt(0);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    TextValue textValue=builder.build();
    assertThat(textValue.stringValue(),equalTo("€€€"));
  }
  @Test void shouldHandleFourByteCodePoints(){
    UTF8StringValueBuilder builder=new UTF8StringValueBuilder();
    int codepoint="\uD800\uDF48".codePointAt(0);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    builder.addCodePoint(codepoint);
    TextValue textValue=builder.build();
    assertThat(textValue.stringValue(),equalTo("\uD800\uDF48\uD800\uDF48\uD800\uDF48"));
  }
}
