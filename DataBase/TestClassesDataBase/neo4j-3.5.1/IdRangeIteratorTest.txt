public class IdRangeIteratorTest {
  @Test public void shouldReturnValueRepresentingNullIfWeExhaustIdRange(){
    int rangeLength=1024;
    IdRangeIterator iterator=new IdRange(new long[]{},0,rangeLength).iterator();
    for (int i=0; i < rangeLength; i++) {
      iterator.nextId();
    }
    assertEquals(IdRangeIterator.VALUE_REPRESENTING_NULL,iterator.nextId());
  }
  @Test public void shouldNotHaveAnyGaps(){
    int rangeLength=1024;
    IdRangeIterator iterator=new IdRange(new long[]{},0,rangeLength).iterator();
    Set<Long> seenIds=new HashSet<>();
    for (int i=0; i < rangeLength; i++) {
      seenIds.add(iterator.nextId());
      if (i > 0) {
        assertTrue("Missing id " + (i - 1),seenIds.contains((long)i - 1));
      }
    }
  }
  @Test public void shouldUseDefragIdsFirst(){
    int rangeLength=1024;
    IdRangeIterator iterator=new IdRange(new long[]{7,8,9},1024,rangeLength).iterator();
    assertEquals(7,iterator.nextId());
    assertEquals(8,iterator.nextId());
    assertEquals(9,iterator.nextId());
    assertEquals(1024,iterator.nextId());
  }
  @Test public void shouldGetNextIdBatchFromOnlyDefragIds(){
    IdRangeIterator iterator=new IdRange(new long[]{1,2,3,4,5,6},7,0).iterator();
    IdRangeIterator subRange=iterator.nextIdBatch(5).iterator();
    assertEquals(6,iterator.nextId());
    for (long i=0; i < 5; i++) {
      assertEquals(1 + i,subRange.nextId());
    }
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
  }
  @Test public void shouldGetNextIdBatchFromOnlyDefragIdsWhenSomeDefragIdsHaveAlreadyBeenReturned(){
    IdRangeIterator iterator=new IdRange(new long[]{1,2,3,4,5,6},7,0).iterator();
    iterator.nextId();
    iterator.nextId();
    IdRangeIterator subRange=iterator.nextIdBatch(3).iterator();
    assertEquals(6,iterator.nextId());
    for (long i=0; i < 3; i++) {
      assertEquals(3 + i,subRange.nextId());
    }
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
  }
  @Test public void shouldGetNextIdBatchFromSomeDefragAndSomeRangeIds(){
    IdRangeIterator iterator=new IdRange(new long[]{1,2,3},10,5).iterator();
    iterator.nextId();
    IdRangeIterator subRange=iterator.nextIdBatch(5).iterator();
    assertEquals(13,iterator.nextId());
    assertEquals(2,subRange.nextId());
    assertEquals(3,subRange.nextId());
    assertEquals(10,subRange.nextId());
    assertEquals(11,subRange.nextId());
    assertEquals(12,subRange.nextId());
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
  }
  @Test public void shouldGetNextIdBatchFromSomeRangeIds(){
    IdRangeIterator iterator=new IdRange(EMPTY_LONG_ARRAY,0,20).iterator();
    iterator.nextId();
    IdRangeIterator subRange=iterator.nextIdBatch(5).iterator();
    assertEquals(6,iterator.nextId());
    assertEquals(1,subRange.nextId());
    assertEquals(2,subRange.nextId());
    assertEquals(3,subRange.nextId());
    assertEquals(4,subRange.nextId());
    assertEquals(5,subRange.nextId());
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
    subRange=iterator.nextIdBatch(2).iterator();
    assertEquals(9,iterator.nextId());
    assertEquals(7,subRange.nextId());
    assertEquals(8,subRange.nextId());
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
  }
  @Test public void shouldGetNextIdBatchFromSomeRangeIdsWhenThereAreUsedDefragIds(){
    IdRangeIterator iterator=new IdRange(new long[]{0,1,2},3,10).iterator();
    iterator.nextId();
    iterator.nextId();
    iterator.nextId();
    IdRangeIterator subRange=iterator.nextIdBatch(3).iterator();
    assertEquals(6,iterator.nextId());
    assertEquals(3,subRange.nextId());
    assertEquals(4,subRange.nextId());
    assertEquals(5,subRange.nextId());
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
    subRange=iterator.nextIdBatch(3).iterator();
    assertEquals(10,iterator.nextId());
    assertEquals(7,subRange.nextId());
    assertEquals(8,subRange.nextId());
    assertEquals(9,subRange.nextId());
    assertEquals(VALUE_REPRESENTING_NULL,subRange.nextId());
  }
}
