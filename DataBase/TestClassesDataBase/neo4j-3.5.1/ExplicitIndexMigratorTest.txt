public class ExplicitIndexMigratorTest {
  private final FileSystemAbstraction fs=mock(FileSystemAbstraction.class);
  private final LogProvider logProvider=mock(LogProvider.class);
  private final ProgressReporter progressMonitor=mock(ProgressReporter.class);
  private final DatabaseLayout storeLayout=DatabaseLayout.of(new File(GraphDatabaseSettings.DEFAULT_DATABASE_NAME));
  private final DatabaseLayout migrationLayout=DatabaseLayout.of(new File(StoreUpgrader.MIGRATION_DIRECTORY));
  private final File originalIndexStore=mock(File.class);
  private final File migratedIndexStore=new File(".");
  @Before public void setUp(){
    when(originalIndexStore.getParentFile()).thenReturn(storeLayout.databaseDirectory());
    when(fs.isDirectory(originalIndexStore)).thenReturn(true);
    when(fs.listFiles(originalIndexStore)).thenReturn(new File[]{mock(File.class)});
  }
  @Test public void skipEmptyIndexStorageMigration() throws IOException {
    when(fs.listFiles(originalIndexStore)).thenReturn(null);
    ExplicitIndexProvider indexProviders=getExplicitIndexProvider();
    ExplicitIndexMigrator indexMigrator=new TestExplicitIndexMigrator(fs,indexProviders,logProvider,true);
    indexMigrator.migrate(storeLayout,migrationLayout,progressMonitor,StandardV2_3.STORE_VERSION,StandardV3_0.STORE_VERSION);
    verify(fs,never()).deleteRecursively(originalIndexStore);
    verify(fs,never()).moveToDirectory(migratedIndexStore,storeLayout.databaseDirectory());
  }
  @Test public void transferOriginalDataToMigrationDirectory() throws IOException {
    ExplicitIndexProvider indexProviders=getExplicitIndexProvider();
    ExplicitIndexMigrator indexMigrator=new TestExplicitIndexMigrator(fs,indexProviders,logProvider,true);
    indexMigrator.migrate(storeLayout,migrationLayout,progressMonitor,StandardV2_3.STORE_VERSION,StandardV3_0.STORE_VERSION);
    verify(fs).copyRecursively(originalIndexStore,migratedIndexStore);
  }
  @Test public void transferMigratedIndexesToStoreDirectory() throws IOException {
    ExplicitIndexProvider indexProviders=getExplicitIndexProvider();
    ExplicitIndexMigrator indexMigrator=new TestExplicitIndexMigrator(fs,indexProviders,logProvider,true);
    indexMigrator.migrate(storeLayout,migrationLayout,progressMonitor,StandardV2_3.STORE_VERSION,StandardV3_0.STORE_VERSION);
    reset(fs);
    indexMigrator.moveMigratedFiles(migrationLayout,storeLayout,"any","any");
    verify(fs).deleteRecursively(originalIndexStore);
    verify(fs).moveToDirectory(migratedIndexStore,storeLayout.databaseDirectory());
  }
  @Test public void logErrorWithIndexNameOnIndexMigrationException(){
    Log log=mock(Log.class);
    when(logProvider.getLog(TestExplicitIndexMigrator.class)).thenReturn(log);
    ExplicitIndexProvider indexProviders=getExplicitIndexProvider();
    try {
      ExplicitIndexMigrator indexMigrator=new TestExplicitIndexMigrator(fs,indexProviders,logProvider,false);
      indexMigrator.migrate(storeLayout,migrationLayout,progressMonitor,StandardV2_3.STORE_VERSION,StandardV3_0.STORE_VERSION);
      fail("Index migration should fail");
    }
 catch (    IOException e) {
    }
    verify(log).error(eq("Migration of explicit indexes failed. Index: testIndex can't be migrated."),any(Throwable.class));
  }
  @Test public void cleanupMigrationDirectory() throws IOException {
    when(fs.fileExists(migratedIndexStore)).thenReturn(true);
    ExplicitIndexProvider indexProviders=getExplicitIndexProvider();
    ExplicitIndexMigrator indexMigrator=new TestExplicitIndexMigrator(fs,indexProviders,logProvider,true);
    indexMigrator.migrate(storeLayout,migrationLayout,progressMonitor,StandardV2_3.STORE_VERSION,StandardV3_0.STORE_VERSION);
    indexMigrator.cleanup(migrationLayout);
    verify(fs).deleteRecursively(migratedIndexStore);
  }
  private ExplicitIndexProvider getExplicitIndexProvider(){
    IndexImplementation indexImplementation=mock(IndexImplementation.class);
    when(indexImplementation.getIndexImplementationDirectory(storeLayout)).thenReturn(originalIndexStore);
    when(indexImplementation.getIndexImplementationDirectory(migrationLayout)).thenReturn(migratedIndexStore);
    ExplicitIndexProvider explicitIndexProvider=mock(ExplicitIndexProvider.class);
    when(explicitIndexProvider.getProviderByName("lucene")).thenReturn(indexImplementation);
    return explicitIndexProvider;
  }
private class TestExplicitIndexMigrator extends ExplicitIndexMigrator {
    private final boolean successfulMigration;
    TestExplicitIndexMigrator(    FileSystemAbstraction fileSystem,    ExplicitIndexProvider explicitIndexProvider,    LogProvider logProvider,    boolean successfulMigration){
      super(fileSystem,explicitIndexProvider,logProvider);
      this.successfulMigration=successfulMigration;
    }
    @Override LuceneExplicitIndexUpgrader createLuceneExplicitIndexUpgrader(    Path indexRootPath,    ProgressReporter progressReporter){
      return new HumbleExplicitIndexUpgrader(indexRootPath,successfulMigration);
    }
  }
private class HumbleExplicitIndexUpgrader extends LuceneExplicitIndexUpgrader {
    private final boolean successfulMigration;
    HumbleExplicitIndexUpgrader(    Path indexRootPath,    boolean successfulMigration){
      super(indexRootPath,NO_MONITOR);
      this.successfulMigration=successfulMigration;
    }
    @Override public void upgradeIndexes() throws ExplicitIndexMigrationException {
      if (!successfulMigration) {
        throw new ExplicitIndexMigrationException("testIndex","Index migration failed",null);
      }
    }
  }
}
