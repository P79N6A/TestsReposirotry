public class BatchTransactionApplierFacadeTest {
  private BatchTransactionApplierFacade facade;
  private BatchTransactionApplier applier1;
  private BatchTransactionApplier applier2;
  private BatchTransactionApplier applier3;
  private TransactionApplier txApplier1;
  private TransactionApplier txApplier2;
  private TransactionApplier txApplier3;
  @Before public void setUp() throws Exception {
    txApplier1=mock(TransactionApplier.class);
    applier1=mock(BatchTransactionApplier.class);
    when(applier1.startTx(any(TransactionToApply.class))).thenReturn(txApplier1);
    when(applier1.startTx(any(TransactionToApply.class),any(LockGroup.class))).thenReturn(txApplier1);
    txApplier2=mock(TransactionApplier.class);
    applier2=mock(BatchTransactionApplier.class);
    when(applier2.startTx(any(TransactionToApply.class))).thenReturn(txApplier2);
    when(applier2.startTx(any(TransactionToApply.class),any(LockGroup.class))).thenReturn(txApplier2);
    txApplier3=mock(TransactionApplier.class);
    applier3=mock(BatchTransactionApplier.class);
    when(applier3.startTx(any(TransactionToApply.class))).thenReturn(txApplier3);
    when(applier3.startTx(any(TransactionToApply.class),any(LockGroup.class))).thenReturn(txApplier3);
    facade=new BatchTransactionApplierFacade(applier1,applier2,applier3);
  }
  @Test public void testStartTxCorrectOrder() throws Exception {
    TransactionToApply tx=mock(TransactionToApply.class);
    TransactionApplierFacade result=(TransactionApplierFacade)facade.startTx(tx);
    InOrder inOrder=inOrder(applier1,applier2,applier3);
    inOrder.verify(applier1).startTx(tx);
    inOrder.verify(applier2).startTx(tx);
    inOrder.verify(applier3).startTx(tx);
    assertEquals(txApplier1,result.appliers[0]);
    assertEquals(txApplier2,result.appliers[1]);
    assertEquals(txApplier3,result.appliers[2]);
    assertEquals(3,result.appliers.length);
  }
  @Test public void testStartTxCorrectOrderWithLockGroup() throws Exception {
    TransactionToApply tx=mock(TransactionToApply.class);
    LockGroup lockGroup=mock(LockGroup.class);
    TransactionApplierFacade result=(TransactionApplierFacade)facade.startTx(tx,lockGroup);
    InOrder inOrder=inOrder(applier1,applier2,applier3);
    inOrder.verify(applier1).startTx(tx,lockGroup);
    inOrder.verify(applier2).startTx(tx,lockGroup);
    inOrder.verify(applier3).startTx(tx,lockGroup);
    assertEquals(txApplier1,result.appliers[0]);
    assertEquals(txApplier2,result.appliers[1]);
    assertEquals(txApplier3,result.appliers[2]);
    assertEquals(3,result.appliers.length);
  }
  @Test public void closeShouldBeDoneInReverseOrder() throws Exception {
    facade.close();
    InOrder inOrder=inOrder(applier1,applier2,applier3);
    inOrder.verify(applier3).close();
    inOrder.verify(applier2).close();
    inOrder.verify(applier1).close();
  }
}
