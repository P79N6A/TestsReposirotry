private static class VerifyingIdOrderingQueue implements IdOrderingQueue {
  private final IdOrderingQueue delegate;
  private final AtomicInteger removedCount=new AtomicInteger();
  private volatile long previousId=-1;
  VerifyingIdOrderingQueue(  IdOrderingQueue delegate){
    this.delegate=delegate;
  }
  @Override public void removeChecked(  long expectedValue){
    if (expectedValue < previousId) {
      assertTrue("Expected to remove head " + expectedValue + ", which should have been greater than previously seen id "+ previousId,expectedValue > previousId);
    }
    previousId=expectedValue;
    delegate.removeChecked(expectedValue);
    removedCount.incrementAndGet();
  }
  @Override public void offer(  long value){
    delegate.offer(value);
  }
  @Override public boolean isEmpty(){
    return delegate.isEmpty();
  }
  @Override public void waitFor(  long value) throws InterruptedException {
    delegate.waitFor(value);
  }
  public int getNumberOfOrderlyRemovedIds(){
    return removedCount.get();
  }
}
