public abstract class Neo4jTestCase {
  private static GraphDatabaseService graphDb;
  private Transaction tx;
  @BeforeClass public static void setUpDb(){
    graphDb=new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @AfterClass public static void tearDownDb(){
    graphDb.shutdown();
  }
  @Before public void setUpTest(){
    tx=graphDb.beginTx();
  }
  @After public void tearDownTest(){
    if (!manageMyOwnTxFinish()) {
      finishTx(true);
    }
  }
  protected boolean manageMyOwnTxFinish(){
    return false;
  }
  protected void finishTx(  boolean commit){
    if (tx == null) {
      return;
    }
    if (commit) {
      tx.success();
    }
    tx.close();
    tx=null;
  }
  protected Transaction beginTx(){
    if (tx == null) {
      tx=graphDb.beginTx();
    }
    return tx;
  }
  public static void deleteFileOrDirectory(  File file){
    if (!file.exists()) {
      return;
    }
    if (file.isDirectory()) {
      for (      File child : Objects.requireNonNull(file.listFiles())) {
        deleteFileOrDirectory(child);
      }
    }
    assertTrue("delete " + file,file.delete());
  }
  protected static GraphDatabaseService graphDb(){
    return graphDb;
  }
  public static <T>void assertContains(  Collection<T> collection,  T... expectedItems){
    String collectionString=join(", ",collection.toArray());
    assertEquals(collectionString,expectedItems.length,collection.size());
    for (    T item : expectedItems) {
      assertTrue(collection.contains(item));
    }
  }
  public static <T>void assertContains(  Iterable<T> items,  T... expectedItems){
    assertContains(asCollection(items),expectedItems);
  }
  public static <T>void assertContainsInOrder(  Collection<T> collection,  T... expectedItems){
    String collectionString=join(", ",collection.toArray());
    assertEquals(collectionString,expectedItems.length,collection.size());
    Iterator<T> itr=collection.iterator();
    for (int i=0; itr.hasNext(); i++) {
      assertEquals(expectedItems[i],itr.next());
    }
  }
  public static <T>void assertContainsInOrder(  Iterable<T> collection,  T... expectedItems){
    assertContainsInOrder(asCollection(collection),expectedItems);
  }
  public static <T>Collection<T> asCollection(  Iterable<T> iterable){
    List<T> list=new ArrayList<>();
    for (    T item : iterable) {
      list.add(item);
    }
    return list;
  }
  public static <T>String join(  String delimiter,  T... items){
    StringBuilder buffer=new StringBuilder();
    for (    T item : items) {
      if (buffer.length() > 0) {
        buffer.append(delimiter);
      }
      buffer.append(item.toString());
    }
    return buffer.toString();
  }
}
