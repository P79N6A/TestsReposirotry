@ExtendWith(RandomExtension.class) class CompositeGenericKeyTest {
  @Inject RandomRule random;
  /** 
 * This test verify that the documented formula for calculating size limit for string array actually calculate correctly.
 */
  @Test void testDocumentedStringArrayKeySizeFormulaIsCorrect(){
    CompositeGenericKey key=new CompositeGenericKey(1,mock(IndexSpecificSpaceFillingCurveSettingsCache.class));
    int maxArrayLength=random.nextInt(500);
    int maxStringLength=random.nextInt(100);
    for (int i=0; i < 100; i++) {
      String[] strings=random.randomValues().nextStringArrayRaw(0,maxArrayLength,0,maxStringLength);
      key.initialize(i);
      key.writeValue(0,Values.of(strings),NativeIndexKey.Inclusion.NEUTRAL);
      assertThat(includingEntityId(calculateKeySize(strings)),equalTo(key.size()));
    }
  }
  private int includingEntityId(  int keySize){
    return Long.BYTES + keySize;
  }
  private int calculateKeySize(  String[] strings){
    int arrayLength=strings.length;
    int totalStringLength=0;
    for (    String string : strings) {
      totalStringLength+=string.getBytes(StandardCharsets.UTF_8).length;
    }
    return 1 + 2 + 2 * arrayLength + totalStringLength;
  }
}
