public class StageExecutionTest {
  @Test public void shouldOrderStepsAscending(){
    Collection<Step<?>> steps=new ArrayList<>();
    steps.add(stepWithAverageOf("step1",0,10));
    steps.add(stepWithAverageOf("step2",0,5));
    steps.add(stepWithAverageOf("step3",0,30));
    StageExecution execution=new StageExecution("Test",null,DEFAULT,steps,ORDER_SEND_DOWNSTREAM);
    Iterator<Pair<Step<?>,Float>> ordered=execution.stepsOrderedBy(Keys.avg_processing_time,true).iterator();
    Pair<Step<?>,Float> fastest=ordered.next();
    assertEquals(1f / 2f,fastest.other().floatValue(),0f);
    Pair<Step<?>,Float> faster=ordered.next();
    assertEquals(1f / 3f,faster.other().floatValue(),0f);
    Pair<Step<?>,Float> fast=ordered.next();
    assertEquals(1f,fast.other().floatValue(),0f);
    assertFalse(ordered.hasNext());
  }
  @Test public void shouldOrderStepsDescending(){
    Collection<Step<?>> steps=new ArrayList<>();
    steps.add(stepWithAverageOf("step1",0,10));
    steps.add(stepWithAverageOf("step2",0,5));
    steps.add(stepWithAverageOf("step3",0,30));
    steps.add(stepWithAverageOf("step4",0,5));
    StageExecution execution=new StageExecution("Test",null,DEFAULT,steps,ORDER_SEND_DOWNSTREAM);
    Iterator<Pair<Step<?>,Float>> ordered=execution.stepsOrderedBy(Keys.avg_processing_time,false).iterator();
    Pair<Step<?>,Float> slowest=ordered.next();
    assertEquals(3f,slowest.other().floatValue(),0f);
    Pair<Step<?>,Float> slower=ordered.next();
    assertEquals(2f,slower.other().floatValue(),0f);
    Pair<Step<?>,Float> slow=ordered.next();
    assertEquals(1f,slow.other().floatValue(),0f);
    Pair<Step<?>,Float> alsoSlow=ordered.next();
    assertEquals(1f,alsoSlow.other().floatValue(),0f);
    assertFalse(ordered.hasNext());
  }
}
