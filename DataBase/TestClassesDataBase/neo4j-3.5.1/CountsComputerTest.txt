public class CountsComputerTest {
  private static final NullLogProvider LOG_PROVIDER=NullLogProvider.getInstance();
  private static final Config CONFIG=Config.defaults();
  private final EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  private final PageCacheRule pcRule=new PageCacheRule();
  private final TestDirectory testDir=TestDirectory.testDirectory(fsRule);
  @Rule public RuleChain ruleChain=RuleChain.outerRule(pcRule).around(fsRule).around(testDir);
  private FileSystemAbstraction fs;
  private GraphDatabaseBuilder dbBuilder;
  private PageCache pageCache;
  @Before public void setup(){
    fs=fsRule.get();
    dbBuilder=new TestGraphDatabaseFactory().setFileSystem(new UncloseableDelegatingFileSystemAbstraction(fs)).newImpermanentDatabaseBuilder(testDir.databaseDir());
    pageCache=pcRule.getPageCache(fs);
  }
  @Test public void skipPopulationWhenNodeAndRelationshipStoresAreEmpty(){
    GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    InvocationTrackingProgressReporter progressReporter=new InvocationTrackingProgressReporter();
    rebuildCounts(lastCommittedTransactionId,progressReporter);
    checkEmptyCountStore();
    assertTrue(progressReporter.isCompleteInvoked());
    assertFalse(progressReporter.isStartInvoked());
  }
  @Test public void shouldCreateAnEmptyCountsStoreFromAnEmptyDatabase(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    checkEmptyCountStore();
  }
  @Test public void shouldCreateACountsStoreWhenThereAreNodesInTheDB(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      db.createNode(Label.label("A"));
      db.createNode(Label.label("C"));
      db.createNode(Label.label("D"));
      db.createNode();
      tx.success();
    }
     long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1,store.txId());
      assertEquals(4,store.totalEntriesStored());
      assertEquals(4,get(store,nodeKey(-1)));
      assertEquals(1,get(store,nodeKey(0)));
      assertEquals(1,get(store,nodeKey(1)));
      assertEquals(1,get(store,nodeKey(2)));
      assertEquals(0,get(store,nodeKey(3)));
    }
   }
  @Test public void shouldCreateACountsStoreWhenThereAreUnusedNodeRecordsInTheDB(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      db.createNode(Label.label("A"));
      db.createNode(Label.label("C"));
      Node node=db.createNode(Label.label("D"));
      db.createNode();
      node.delete();
      tx.success();
    }
     long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1,store.txId());
      assertEquals(3,store.totalEntriesStored());
      assertEquals(3,get(store,nodeKey(-1)));
      assertEquals(1,get(store,nodeKey(0)));
      assertEquals(1,get(store,nodeKey(1)));
      assertEquals(0,get(store,nodeKey(2)));
      assertEquals(0,get(store,nodeKey(3)));
    }
   }
  @Test public void shouldCreateACountsStoreWhenThereAreUnusedRelationshipRecordsInTheDB(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      Node nodeA=db.createNode(Label.label("A"));
      Node nodeC=db.createNode(Label.label("C"));
      Relationship rel=nodeA.createRelationshipTo(nodeC,RelationshipType.withName("TYPE1"));
      nodeC.createRelationshipTo(nodeA,RelationshipType.withName("TYPE2"));
      rel.delete();
      tx.success();
    }
     long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1+ 1,store.txId());
      assertEquals(9,store.totalEntriesStored());
      assertEquals(2,get(store,nodeKey(-1)));
      assertEquals(1,get(store,nodeKey(0)));
      assertEquals(1,get(store,nodeKey(1)));
      assertEquals(0,get(store,nodeKey(2)));
      assertEquals(0,get(store,nodeKey(3)));
      assertEquals(0,get(store,relationshipKey(-1,0,-1)));
      assertEquals(1,get(store,relationshipKey(-1,1,-1)));
    }
   }
  @Test public void shouldCreateACountsStoreWhenThereAreNodesAndRelationshipsInTheDB(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      Node nodeA=db.createNode(Label.label("A"));
      Node nodeC=db.createNode(Label.label("C"));
      Node nodeD=db.createNode(Label.label("D"));
      Node node=db.createNode();
      nodeA.createRelationshipTo(nodeD,RelationshipType.withName("TYPE"));
      node.createRelationshipTo(nodeC,RelationshipType.withName("TYPE2"));
      tx.success();
    }
     long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1+ 1+ 1,store.txId());
      assertEquals(13,store.totalEntriesStored());
      assertEquals(4,get(store,nodeKey(-1)));
      assertEquals(1,get(store,nodeKey(0)));
      assertEquals(1,get(store,nodeKey(1)));
      assertEquals(1,get(store,nodeKey(2)));
      assertEquals(0,get(store,nodeKey(3)));
      assertEquals(2,get(store,relationshipKey(-1,-1,-1)));
      assertEquals(1,get(store,relationshipKey(-1,0,-1)));
      assertEquals(1,get(store,relationshipKey(-1,1,-1)));
      assertEquals(0,get(store,relationshipKey(-1,2,-1)));
      assertEquals(1,get(store,relationshipKey(-1,1,1)));
      assertEquals(0,get(store,relationshipKey(-1,0,1)));
    }
   }
  @Test public void shouldCreateACountStoreWhenDBContainsDenseNodes(){
    @SuppressWarnings("deprecation") final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.setConfig(GraphDatabaseSettings.dense_node_threshold,"2").newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      Node nodeA=db.createNode(Label.label("A"));
      Node nodeC=db.createNode(Label.label("C"));
      Node nodeD=db.createNode(Label.label("D"));
      nodeA.createRelationshipTo(nodeA,RelationshipType.withName("TYPE1"));
      nodeA.createRelationshipTo(nodeC,RelationshipType.withName("TYPE2"));
      nodeA.createRelationshipTo(nodeD,RelationshipType.withName("TYPE3"));
      nodeD.createRelationshipTo(nodeC,RelationshipType.withName("TYPE4"));
      tx.success();
    }
     long lastCommittedTransactionId=getLastTxId(db);
    db.shutdown();
    rebuildCounts(lastCommittedTransactionId);
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1+ 1+ 1+ 1+ 1,store.txId());
      assertEquals(22,store.totalEntriesStored());
      assertEquals(3,get(store,nodeKey(-1)));
      assertEquals(1,get(store,nodeKey(0)));
      assertEquals(1,get(store,nodeKey(1)));
      assertEquals(1,get(store,nodeKey(2)));
      assertEquals(0,get(store,nodeKey(3)));
      assertEquals(4,get(store,relationshipKey(-1,-1,-1)));
      assertEquals(1,get(store,relationshipKey(-1,0,-1)));
      assertEquals(1,get(store,relationshipKey(-1,1,-1)));
      assertEquals(1,get(store,relationshipKey(-1,2,-1)));
      assertEquals(1,get(store,relationshipKey(-1,3,-1)));
      assertEquals(0,get(store,relationshipKey(-1,4,-1)));
      assertEquals(1,get(store,relationshipKey(-1,1,1)));
      assertEquals(2,get(store,relationshipKey(-1,-1,1)));
      assertEquals(3,get(store,relationshipKey(0,-1,-1)));
    }
   }
  private File alphaStoreFile(){
    return testDir.databaseLayout().countStoreA();
  }
  private File betaStoreFile(){
    return testDir.databaseLayout().countStoreB();
  }
  private long getLastTxId(  @SuppressWarnings("deprecation") GraphDatabaseAPI db){
    return db.getDependencyResolver().resolveDependency(TransactionIdStore.class).getLastCommittedTransactionId();
  }
  private void checkEmptyCountStore(){
    try (Lifespan life=new Lifespan()){
      CountsTracker store=life.add(createCountsTracker());
      assertEquals(BASE_TX_ID,store.txId());
      assertEquals(0,store.totalEntriesStored());
    }
   }
  private void cleanupCountsForRebuilding(){
    fs.deleteFile(alphaStoreFile());
    fs.deleteFile(betaStoreFile());
  }
  private CountsTracker createCountsTracker(){
    return new CountsTracker(LOG_PROVIDER,fs,pageCache,CONFIG,testDir.databaseLayout(),EmptyVersionContextSupplier.EMPTY);
  }
  private void rebuildCounts(  long lastCommittedTransactionId){
    rebuildCounts(lastCommittedTransactionId,SilentProgressReporter.INSTANCE);
  }
  private void rebuildCounts(  long lastCommittedTransactionId,  ProgressReporter progressReporter){
    cleanupCountsForRebuilding();
    IdGeneratorFactory idGenFactory=new DefaultIdGeneratorFactory(fs);
    StoreFactory storeFactory=new StoreFactory(testDir.databaseLayout(),CONFIG,idGenFactory,pageCache,fs,LOG_PROVIDER,EmptyVersionContextSupplier.EMPTY);
    try (Lifespan life=new Lifespan();NeoStores neoStores=storeFactory.openAllNeoStores()){
      NodeStore nodeStore=neoStores.getNodeStore();
      RelationshipStore relationshipStore=neoStores.getRelationshipStore();
      int highLabelId=(int)neoStores.getLabelTokenStore().getHighId();
      int highRelationshipTypeId=(int)neoStores.getRelationshipTypeTokenStore().getHighId();
      CountsComputer countsComputer=new CountsComputer(lastCommittedTransactionId,nodeStore,relationshipStore,highLabelId,highRelationshipTypeId,NumberArrayFactory.AUTO_WITHOUT_PAGECACHE,progressReporter);
      CountsTracker countsTracker=createCountsTracker();
      life.add(countsTracker.setInitializer(countsComputer));
    }
   }
  private long get(  CountsTracker store,  CountsKey key){
    Register.DoubleLongRegister value=Registers.newDoubleLongRegister();
    store.get(key,value);
    return value.readSecond();
  }
private static class InvocationTrackingProgressReporter implements ProgressReporter {
    private boolean startInvoked;
    private boolean completeInvoked;
    @Override public void start(    long max){
      startInvoked=true;
    }
    @Override public void progress(    long add){
    }
    @Override public void completed(){
      completeInvoked=true;
    }
    boolean isStartInvoked(){
      return startInvoked;
    }
    boolean isCompleteInvoked(){
      return completeInvoked;
    }
  }
}
