private static class LabelGetter implements Runnable {
  private final NodeLabelsCache cache;
  private final int[][] expectedLabels;
  private final NodeLabelsCache.Client client;
  private final int numberOfNodes;
  private int[] scratch=new int[10];
  LabelGetter(  NodeLabelsCache cache,  int[][] expectedLabels,  int numberOfNodes){
    this.cache=cache;
    this.client=cache.newClient();
    this.expectedLabels=expectedLabels;
    this.numberOfNodes=numberOfNodes;
  }
  @Override public void run(){
    for (int i=0; i < 1_000; i++) {
      int nodeId=ThreadLocalRandom.current().nextInt(numberOfNodes);
      scratch=cache.get(client,nodeId,scratch);
      assertCorrectLabels(nodeId,scratch);
    }
  }
  private void assertCorrectLabels(  int nodeId,  int[] gotten){
    int[] expected=expectedLabels[nodeId];
    for (int i=0; i < expected.length; i++) {
      assertEquals(expected[i],gotten[i]);
    }
    if (gotten.length != expected.length) {
      assertEquals(-1,gotten[expected.length]);
    }
  }
}
