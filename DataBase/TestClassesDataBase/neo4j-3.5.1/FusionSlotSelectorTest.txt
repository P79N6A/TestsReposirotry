class FusionSlotSelectorTest {
  @Test void throwIfToFewInstances(){
    EnumMap<IndexSlot,IndexProvider> instances=new EnumMap<>(IndexSlot.class);
    for (    IndexSlot indexSlot : IndexSlot.values()) {
      instances.put(indexSlot,IndexProvider.EMPTY);
    }
    InstanceSelector<IndexProvider> instanceSelector=new InstanceSelector<>(instances);
    assertThrows(IllegalArgumentException.class,() -> validateSelectorInstances(instanceSelector,NUMBER));
  }
  @Test void throwIfToManyInstances(){
    EnumMap<IndexSlot,IndexProvider> instances=new EnumMap<>(IndexSlot.class);
    for (    IndexSlot indexSlot : IndexSlot.values()) {
      instances.put(indexSlot,IndexProvider.EMPTY);
    }
    IndexProvider mockedIndxProvider=mock(IndexProvider.class);
    instances.put(NUMBER,mockedIndxProvider);
    InstanceSelector<IndexProvider> instanceSelector=new InstanceSelector<>(instances);
    assertThrows(IllegalArgumentException.class,() -> validateSelectorInstances(instanceSelector));
  }
  @Test void shouldValidateSelectorInstances(){
    EnumMap<IndexSlot,IndexProvider> instances=new EnumMap<>(IndexSlot.class);
    for (    IndexSlot indexSlot : IndexSlot.values()) {
      instances.put(indexSlot,IndexProvider.EMPTY);
    }
    IndexProvider mockedIndxProvider=mock(IndexProvider.class);
    instances.put(NUMBER,mockedIndxProvider);
    InstanceSelector<IndexProvider> selector=new InstanceSelector<>(instances);
    validateSelectorInstances(selector,NUMBER);
  }
}
