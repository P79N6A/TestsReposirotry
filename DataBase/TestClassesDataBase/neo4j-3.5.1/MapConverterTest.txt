public class MapConverterTest {
  private final MapConverter converter=new MapConverter();
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void shouldHandleNullString(){
    String mapString="null";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(null)));
  }
  @Test public void shouldHandleEmptyMap(){
    String mapString="{}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(emptyMap())));
  }
  @Test public void shouldHandleEmptyMapWithSpaces(){
    String mapString=" {  }  ";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(emptyMap())));
  }
  @Test public void shouldHandleSingleQuotedValue(){
    String mapString="{key: 'value'}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","value"))));
  }
  @Test public void shouldHandleEscapedSingleQuotedInValue1(){
    String mapString="{key: 'va\'lue'}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","va\'lue"))));
  }
  @Test public void shouldHandleEscapedSingleQuotedInValue2(){
    String mapString="{key: \"va\'lue\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","va\'lue"))));
  }
  @Test public void shouldHandleEscapedDoubleQuotedInValue1(){
    String mapString="{key: \"va\"lue\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","va\"lue"))));
  }
  @Test public void shouldHandleEscapedDoubleQuotedInValue2(){
    String mapString="{key: 'va\"lue'}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","va\"lue"))));
  }
  @Test public void shouldHandleDoubleQuotedValue(){
    String mapString="{key: \"value\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","value"))));
  }
  @Test public void shouldHandleSingleQuotedKey(){
    String mapString="{'key;: 'value'}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","value"))));
  }
  @Test public void shouldHandleDoubleQuotedKey(){
    String mapString="{\"key\": \"value\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key","value"))));
  }
  @Test public void shouldHandleKeyWithEscapedSingleQuote(){
    String mapString="{\"k\'ey\": \"value\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("k\'ey","value"))));
  }
  @Test public void shouldHandleKeyWithEscapedDoubleQuote(){
    String mapString="{\"k\"ey\": \"value\"}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("k\"ey","value"))));
  }
  @Test public void shouldHandleIntegerValue(){
    String mapString="{key: 1337}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key",1337L))));
  }
  @Test public void shouldHandleFloatValue(){
    String mapString="{key: 2.718281828}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key",2.718281828))));
  }
  @Test public void shouldHandleNullValue(){
    String mapString="{key: null}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key",null))));
  }
  @Test public void shouldHandleFalseValue(){
    String mapString="{key: false}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key",false))));
  }
  @Test public void shouldHandleTrueValue(){
    String mapString="{key: true}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("key",true))));
  }
  @Test public void shouldHandleMultipleKeys(){
    String mapString="{k1: 2.718281828, k2: 'e'}";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntMap(map("k1",2.718281828,"k2","e"))));
  }
  @Test public void shouldFailWhenDuplicateKey(){
    String mapString="{k1: 2.718281828, k1: 'e'}";
    exception.expect(IllegalArgumentException.class);
    exception.expectMessage("Multiple occurrences of key 'k1'");
    converter.apply(mapString);
  }
  @SuppressWarnings("unchecked") @Test public void shouldHandleNestedMaps(){
    String mapString="{k1: 1337, k2: { k1 : 1337, k2: {k1: 1337}}}";
    DefaultParameterValue converted=converter.apply(mapString);
    Map<String,Object> map1=(Map<String,Object>)converted.value();
    Map<String,Object> map2=(Map<String,Object>)map1.get("k2");
    Map<String,Object> map3=(Map<String,Object>)map2.get("k2");
    assertThat(map1.get("k1"),equalTo(1337L));
    assertThat(map2.get("k1"),equalTo(1337L));
    assertThat(map3.get("k1"),equalTo(1337L));
  }
  @Test public void shouldFailOnMalformedMap(){
    String mapString="{k1: 2.718281828, k2: 'e'}}";
    exception.expect(IllegalArgumentException.class);
    exception.expectMessage("{k1: 2.718281828, k2: 'e'}} contains unbalanced '{', '}'.");
    converter.apply(mapString);
  }
  @SuppressWarnings("unchecked") @Test public void shouldHandleMapsWithLists(){
    String mapString="{k1: [1337, 42]}";
    DefaultParameterValue converted=converter.apply(mapString);
    Map<String,Object> map1=(Map<String,Object>)converted.value();
    assertThat(map1.get("k1"),equalTo(asList(1337L,42L)));
  }
}
