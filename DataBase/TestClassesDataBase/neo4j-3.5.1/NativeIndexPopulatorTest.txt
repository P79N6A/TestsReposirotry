public class NativeIndexPopulatorTest {
  private static Collection<Object[]> allPopulators(){
    return Arrays.asList(new Object[][]{{"Number",numberPopulatorFactory(),RandomValues.typesOfGroup(ValueGroup.NUMBER),(IndexLayoutFactory)NumberLayoutNonUnique::new},{"String",(PopulatorFactory)StringIndexPopulator::new,RandomValues.typesOfGroup(ValueGroup.TEXT),(IndexLayoutFactory)StringLayout::new},{"Date",temporalPopulatorFactory(ValueGroup.DATE),RandomValues.typesOfGroup(ValueGroup.DATE),(IndexLayoutFactory)DateLayout::new},{"DateTime",temporalPopulatorFactory(ValueGroup.ZONED_DATE_TIME),RandomValues.typesOfGroup(ValueGroup.ZONED_DATE_TIME),(IndexLayoutFactory)ZonedDateTimeLayout::new},{"Duration",temporalPopulatorFactory(ValueGroup.DURATION),RandomValues.typesOfGroup(ValueGroup.DURATION),(IndexLayoutFactory)DurationLayout::new},{"LocalDateTime",temporalPopulatorFactory(ValueGroup.LOCAL_DATE_TIME),RandomValues.typesOfGroup(ValueGroup.LOCAL_DATE_TIME),(IndexLayoutFactory)LocalDateTimeLayout::new},{"LocalTime",temporalPopulatorFactory(ValueGroup.LOCAL_TIME),RandomValues.typesOfGroup(ValueGroup.LOCAL_TIME),(IndexLayoutFactory)LocalTimeLayout::new},{"LocalDateTime",temporalPopulatorFactory(ValueGroup.LOCAL_DATE_TIME),RandomValues.typesOfGroup(ValueGroup.LOCAL_DATE_TIME),(IndexLayoutFactory)LocalDateTimeLayout::new},{"Time",temporalPopulatorFactory(ValueGroup.ZONED_TIME),RandomValues.typesOfGroup(ValueGroup.ZONED_TIME),(IndexLayoutFactory)ZonedTimeLayout::new},{"Generic",genericPopulatorFactory(),ValueType.values(),(IndexLayoutFactory)() -> new GenericLayout(1,spaceFillingCurveSettings)}});
  }
  private static final IndexSpecificSpaceFillingCurveSettingsCache spaceFillingCurveSettings=new IndexSpecificSpaceFillingCurveSettingsCache(new ConfiguredSpaceFillingCurveSettingsCache(Config.defaults()),new HashMap<>());
  private static final StandardConfiguration configuration=new StandardConfiguration();
  private static PopulatorFactory<NumberIndexKey,NativeIndexValue> numberPopulatorFactory(){
    return NumberIndexPopulator::new;
  }
  private static <TK extends NativeIndexSingleValueKey<TK>>PopulatorFactory<TK,NativeIndexValue> temporalPopulatorFactory(  ValueGroup temporalValueGroup){
    return (pageCache,fs,storeFile,layout,monitor,descriptor) -> {
      TemporalIndexFiles.FileLayout<TK> fileLayout=new TemporalIndexFiles.FileLayout<>(storeFile,layout,temporalValueGroup);
      return new TemporalIndexPopulator.PartPopulator<>(pageCache,fs,fileLayout,monitor,descriptor);
    }
;
  }
  private static PopulatorFactory<GenericKey,NativeIndexValue> genericPopulatorFactory(){
    return (pageCache,fs,storeFile,layout,monitor,descriptor) -> new GenericNativeIndexPopulator(pageCache,fs,storeFile,layout,monitor,descriptor,spaceFillingCurveSettings,SimpleIndexDirectoryStructures.onIndexFile(storeFile),configuration,false,false);
  }
@FunctionalInterface private interface PopulatorFactory<KEY extends NativeIndexKey<KEY>,VALUE extends NativeIndexValue> {
    NativeIndexPopulator<KEY,VALUE> create(    PageCache pageCache,    FileSystemAbstraction fs,    File storeFile,    IndexLayout<KEY,VALUE> layout,    IndexProvider.Monitor monitor,    StoreIndexDescriptor descriptor) throws IOException ;
  }
@RunWith(Parameterized.class) public static class UniqueTest<KEY extends NativeIndexKey<KEY>,VALUE extends NativeIndexValue> extends NativeIndexPopulatorTests.Unique<KEY,VALUE> {
    @Parameterized.Parameters(name="{index} {0}") public static Collection<Object[]> data(){
      return allPopulators();
    }
    @Parameterized.Parameter() public String name;
    @Parameterized.Parameter(1) public PopulatorFactory<KEY,VALUE> populatorFactory;
    @Parameterized.Parameter(2) public ValueType[] supportedTypes;
    @Parameterized.Parameter(3) public IndexLayoutFactory<KEY,VALUE> indexLayoutFactory;
    private static final StoreIndexDescriptor uniqueDescriptor=TestIndexDescriptorFactory.uniqueForLabel(42,666).withId(0);
    @Override NativeIndexPopulator<KEY,VALUE> createPopulator() throws IOException {
      return populatorFactory.create(pageCache,fs,getIndexFile(),layout,monitor,indexDescriptor);
    }
    @Override ValueCreatorUtil<KEY,VALUE> createValueCreatorUtil(){
      return new ValueCreatorUtil<>(uniqueDescriptor,supportedTypes,ValueCreatorUtil.FRACTION_DUPLICATE_UNIQUE);
    }
    @Override IndexLayout<KEY,VALUE> createLayout(){
      return indexLayoutFactory.create();
    }
  }
@RunWith(Parameterized.class) public static class NonUniqueTest<KEY extends NativeIndexKey<KEY>,VALUE extends NativeIndexValue> extends NativeIndexPopulatorTests.NonUnique<KEY,VALUE> {
    @Parameterized.Parameters(name="{index} {0}") public static Collection<Object[]> data(){
      return allPopulators();
    }
    @Parameterized.Parameter() public String name;
    @Parameterized.Parameter(1) public PopulatorFactory<KEY,VALUE> populatorFactory;
    @Parameterized.Parameter(2) public ValueType[] supportedTypes;
    @Parameterized.Parameter(3) public IndexLayoutFactory<KEY,VALUE> indexLayoutFactory;
    private static final StoreIndexDescriptor nonUniqueDescriptor=TestIndexDescriptorFactory.forLabel(42,666).withId(0);
    @Override NativeIndexPopulator<KEY,VALUE> createPopulator() throws IOException {
      return populatorFactory.create(pageCache,fs,getIndexFile(),layout,monitor,indexDescriptor);
    }
    @Override ValueCreatorUtil<KEY,VALUE> createValueCreatorUtil(){
      return new ValueCreatorUtil<>(nonUniqueDescriptor,supportedTypes,ValueCreatorUtil.FRACTION_DUPLICATE_NON_UNIQUE);
    }
    @Override IndexLayout<KEY,VALUE> createLayout(){
      return indexLayoutFactory.create();
    }
  }
}
