public class PageCacheFlusherTest {
  @Rule public final OtherThreadRule<Void> t2=new OtherThreadRule<>();
  @Test(timeout=10_000) public void shouldWaitForCompletionInHalt() throws Exception {
    PageCache pageCache=mock(PageCache.class);
    Barrier.Control barrier=new Barrier.Control();
    doAnswer(invocation -> {
      barrier.reached();
      return null;
    }
).when(pageCache).flushAndForce();
    PageCacheFlusher flusher=new PageCacheFlusher(pageCache);
    flusher.start();
    barrier.await();
    Future<Object> halt=t2.execute(state -> {
      flusher.halt();
      return null;
    }
);
    t2.get().waitUntilWaiting(details -> details.isAt(PageCacheFlusher.class,"halt"));
    barrier.release();
    halt.get();
  }
  @Test public void shouldExitOnErrorInHalt() throws Exception {
    PageCache pageCache=mock(PageCache.class);
    RuntimeException failure=new RuntimeException();
    doAnswer(invocation -> {
      throw failure;
    }
).when(pageCache).flushAndForce();
    PageCacheFlusher flusher=new PageCacheFlusher(pageCache);
    flusher.run();
    try {
      flusher.halt();
      fail();
    }
 catch (    RuntimeException e) {
      assertSame(failure,e);
    }
  }
}
