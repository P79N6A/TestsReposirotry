public class TestNeo4j extends AbstractNeo4jTestCase {
  @Test public void testBasicNodeRelationships(){
    Node firstNode;
    Node secondNode;
    Relationship rel;
    firstNode=getGraphDb().createNode();
    assertNotNull("Failure creating first node",firstNode);
    secondNode=getGraphDb().createNode();
    assertNotNull("Failure creating second node",secondNode);
    rel=firstNode.createRelationshipTo(secondNode,MyRelTypes.TEST);
    assertNotNull("Relationship is null",rel);
    RelationshipType relType=rel.getType();
    assertNotNull("Relationship's type is is null",relType);
    try (ResourceIterator<Relationship> iterator=asResourceIterator(firstNode.getRelationships(relType).iterator())){
      assertTrue(iterator.hasNext());
    }
     try (ResourceIterator<Relationship> iterator=asResourceIterator(secondNode.getRelationships(relType).iterator())){
      assertTrue(iterator.hasNext());
    }
     ResourceIterable<Relationship> allRels;
    allRels=(ResourceIterable<Relationship>)firstNode.getRelationships();
    assertTrue(this.objectExistsInIterable(rel,allRels));
    allRels=(ResourceIterable<Relationship>)firstNode.getRelationships(relType);
    assertTrue(this.objectExistsInIterable(rel,allRels));
    allRels=(ResourceIterable<Relationship>)secondNode.getRelationships();
    assertTrue(this.objectExistsInIterable(rel,allRels));
    allRels=(ResourceIterable<Relationship>)secondNode.getRelationships(relType);
    assertTrue(this.objectExistsInIterable(rel,allRels));
    Node[] relNodes=rel.getNodes();
    assertEquals("A relationship should always be connected to exactly " + "two nodes",relNodes.length,2);
    assertTrue("Relationship says that it isn't connected to firstNode",this.objectExistsInArray(firstNode,relNodes));
    assertTrue("Relationship says that it isn't connected to secondNode",this.objectExistsInArray(secondNode,relNodes));
    assertEquals("The other node should be secondNode but it isn't",rel.getOtherNode(firstNode),secondNode);
    assertEquals("The other node should be firstNode but it isn't",rel.getOtherNode(secondNode),firstNode);
    rel.delete();
    secondNode.delete();
    firstNode.delete();
  }
  private boolean objectExistsInIterable(  Relationship rel,  ResourceIterable<Relationship> allRels){
    try (ResourceIterator<Relationship> resourceIterator=allRels.iterator()){
      while (resourceIterator.hasNext()) {
        Relationship iteratedRel=resourceIterator.next();
{
          if (rel.equals(iteratedRel)) {
            return true;
          }
        }
      }
      return false;
    }
   }
  private boolean objectExistsInArray(  Object obj,  Object[] objArray){
    for (    Object o : objArray) {
      if (o.equals(obj)) {
        return true;
      }
    }
    return false;
  }
  @Test public void testRandomPropertyName(){
    Node node1=getGraphDb().createNode();
    String key="random_" + new Random(System.currentTimeMillis()).nextLong();
    node1.setProperty(key,"value");
    assertEquals("value",node1.getProperty(key));
    node1.delete();
  }
  @Test public void testNodeChangePropertyArray(){
    getTransaction().close();
    Node node;
    try (Transaction tx=getGraphDb().beginTx()){
      node=getGraphDb().createNode();
      tx.success();
    }
     try (Transaction tx=getGraphDb().beginTx()){
      node.setProperty("test",new String[]{"value1"});
      tx.success();
    }
     try (Transaction ignored=getGraphDb().beginTx()){
      node.setProperty("test",new String[]{"value1","value2"});
    }
     try (Transaction tx=getGraphDb().beginTx()){
      String[] value=(String[])node.getProperty("test");
      assertEquals(1,value.length);
      assertEquals("value1",value[0]);
      tx.success();
    }
     setTransaction(getGraphDb().beginTx());
  }
  @Test public void testGetAllNodes(){
    long highId=getIdGenerator(IdType.NODE).getHighestPossibleIdInUse();
    if (highId >= 0 && highId < 10000) {
      long count=Iterables.count(getGraphDb().getAllNodes());
      boolean found=false;
      Node newNode=getGraphDb().createNode();
      newTransaction();
      long oldCount=count;
      count=0;
      for (      Node node : getGraphDb().getAllNodes()) {
        count++;
        if (node.equals(newNode)) {
          found=true;
        }
      }
      assertTrue(found);
      assertEquals(count,oldCount + 1);
      ResourceIterator<Node> allNodesIterator=getGraphDb().getAllNodes().iterator();
      assertNotNull(allNodesIterator.next());
      allNodesIterator.close();
      newNode.delete();
      newTransaction();
      found=false;
      count=0;
      for (      Node node : getGraphDb().getAllNodes()) {
        count++;
        if (node.equals(newNode)) {
          found=true;
        }
      }
      assertTrue(!found);
      assertEquals(count,oldCount);
    }
  }
  @Test public void testMultipleShutdown(){
    commit();
    getGraphDb().shutdown();
    getGraphDb().shutdown();
  }
}
