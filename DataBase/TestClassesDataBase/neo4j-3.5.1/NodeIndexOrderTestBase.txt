@RunWith(Parameterized.class) public abstract class NodeIndexOrderTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Parameterized.Parameters(name="{0}") public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[][]{{IndexOrder.ASCENDING}});
  }
  @Parameterized.Parameter public IndexOrder indexOrder;
  @Test public void shouldRangeScanInOrder() throws Exception {
    List<Pair<Long,Value>> expected=new ArrayList<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"hello"));
      nodeWithProp(tx,"bellow");
      expected.add(nodeWithProp(tx,"schmello"));
      expected.add(nodeWithProp(tx,"low"));
      expected.add(nodeWithProp(tx,"trello"));
      nodeWithProp(tx,"yellow");
      expected.add(nodeWithProp(tx,"low"));
      nodeWithProp(tx,"below");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      IndexReference index=tx.schemaRead().index(label,prop);
      try (NodeValueIndexCursor cursor=tx.cursors().allocateNodeValueIndexCursor()){
        nodeWithProp(tx,"allow");
        expected.add(nodeWithProp(tx,"now"));
        expected.add(nodeWithProp(tx,"jello"));
        nodeWithProp(tx,"willow");
        IndexQuery query=IndexQuery.range(prop,"hello",true,"trello",true);
        tx.dataRead().nodeIndexSeek(index,cursor,indexOrder,true,query);
        assertResultsInOrder(expected,cursor);
      }
     }
   }
  @Test public void shouldPrefixScanInOrder() throws Exception {
    List<Pair<Long,Value>> expected=new ArrayList<>();
    try (Transaction tx=beginTransaction()){
      expected.add(nodeWithProp(tx,"bee hive"));
      nodeWithProp(tx,"a");
      expected.add(nodeWithProp(tx,"become"));
      expected.add(nodeWithProp(tx,"be"));
      expected.add(nodeWithProp(tx,"bachelor"));
      nodeWithProp(tx,"street smart");
      expected.add(nodeWithProp(tx,"builder"));
      nodeWithProp(tx,"ceasar");
      tx.success();
    }
     createIndex();
    try (Transaction tx=beginTransaction()){
      int label=tx.tokenRead().nodeLabel("Node");
      int prop=tx.tokenRead().propertyKey("prop");
      IndexReference index=tx.schemaRead().index(label,prop);
      try (NodeValueIndexCursor cursor=tx.cursors().allocateNodeValueIndexCursor()){
        nodeWithProp(tx,"allow");
        expected.add(nodeWithProp(tx,"bastard"));
        expected.add(nodeWithProp(tx,"bully"));
        nodeWithProp(tx,"willow");
        IndexQuery query=IndexQuery.stringPrefix(prop,stringValue("b"));
        tx.dataRead().nodeIndexSeek(index,cursor,indexOrder,true,query);
        assertResultsInOrder(expected,cursor);
      }
     }
   }
  private void assertResultsInOrder(  List<Pair<Long,Value>> expected,  NodeValueIndexCursor cursor){
    Comparator<Pair<Long,Value>> comparator=indexOrder == IndexOrder.ASCENDING ? (a,b) -> Values.COMPARATOR.compare(a.other(),b.other()) : (a,b) -> Values.COMPARATOR.compare(b.other(),a.other());
    expected.sort(comparator);
    Iterator<Pair<Long,Value>> expectedRows=expected.iterator();
    while (cursor.next() && expectedRows.hasNext()) {
      Pair<Long,Value> expectedRow=expectedRows.next();
      assertThat(cursor.nodeReference(),equalTo(expectedRow.first()));
      for (int i=0; i < cursor.numberOfProperties(); i++) {
        Value value=cursor.propertyValue(i);
        assertThat(value,equalTo(expectedRow.other()));
      }
    }
    assertFalse(expectedRows.hasNext());
    assertFalse(cursor.next());
  }
  private void createIndex(){
    try (org.neo4j.graphdb.Transaction tx=graphDb.beginTx()){
      graphDb.schema().indexFor(Label.label("Node")).on("prop").create();
      tx.success();
    }
     try (org.neo4j.graphdb.Transaction tx=graphDb.beginTx()){
      graphDb.schema().awaitIndexesOnline(1,TimeUnit.MINUTES);
    }
   }
  private Pair<Long,Value> nodeWithProp(  Transaction tx,  Object value) throws Exception {
    Write write=tx.dataWrite();
    long node=write.nodeCreate();
    write.nodeAddLabel(node,tx.tokenWrite().labelGetOrCreateForName("Node"));
    Value val=Values.of(value);
    write.nodeSetProperty(node,tx.tokenWrite().propertyKeyGetOrCreateForName("prop"),val);
    return Pair.of(node,val);
  }
}
