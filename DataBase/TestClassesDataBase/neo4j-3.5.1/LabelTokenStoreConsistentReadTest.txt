public static class LabelTokenStoreConsistentReadTest extends RecordStoreConsistentReadTest<LabelTokenRecord,LabelTokenStore> {
  private static final int NAME_RECORD_ID=2;
  private static final byte[] NAME_RECORD_DATA=UTF8.encode("TheLabel");
  @Override protected LabelTokenStore getStore(  NeoStores neoStores){
    return neoStores.getLabelTokenStore();
  }
  @Override protected LabelTokenStore initialiseStore(  NeoStores neoStores){
    LabelTokenStore store=getStore(neoStores);
    LabelTokenRecord record=createExistingRecord(false);
    DynamicRecord nameRecord=new DynamicRecord(NAME_RECORD_ID);
    record.getNameRecords().clear();
    nameRecord.setData(NAME_RECORD_DATA);
    nameRecord.setInUse(true);
    record.addNameRecord(nameRecord);
    store.updateRecord(record);
    return store;
  }
  @Override protected LabelTokenRecord createNullRecord(  long id){
    return new LabelTokenRecord((int)id).initialize(false,0);
  }
  @Override protected LabelTokenRecord createExistingRecord(  boolean light){
    LabelTokenRecord record=new LabelTokenRecord(ID);
    record.setNameId(NAME_RECORD_ID);
    record.setInUse(true);
    if (!light) {
      DynamicRecord nameRecord=new DynamicRecord(NAME_RECORD_ID);
      nameRecord.setInUse(true);
      nameRecord.setData(NAME_RECORD_DATA);
      record.addNameRecord(nameRecord);
    }
    return record;
  }
  @Override protected LabelTokenRecord getLight(  long id,  LabelTokenStore store){
    throw new AssumptionViolatedException("No light loading of LabelTokenRecords");
  }
  @Override protected void assertRecordsEqual(  LabelTokenRecord actualRecord,  LabelTokenRecord expectedRecord){
    assertNotNull("actualRecord",actualRecord);
    assertNotNull("expectedRecord",expectedRecord);
    assertThat("getNameId",actualRecord.getNameId(),is(expectedRecord.getNameId()));
    assertThat("getId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("getLongId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("isLight",actualRecord.isLight(),is(expectedRecord.isLight()));
    Collection<DynamicRecord> actualNameRecords=actualRecord.getNameRecords();
    Collection<DynamicRecord> expectedNameRecords=expectedRecord.getNameRecords();
    assertThat("getNameRecords.size",actualNameRecords.size(),is(expectedNameRecords.size()));
    Iterator<DynamicRecord> actualNRs=actualNameRecords.iterator();
    Iterator<DynamicRecord> expectedNRs=expectedNameRecords.iterator();
    int i=0;
    while (actualNRs.hasNext() && expectedNRs.hasNext()) {
      DynamicRecord actualNameRecord=actualNRs.next();
      DynamicRecord expectedNameRecord=expectedNRs.next();
      assertThat("[" + i + "]getData",actualNameRecord.getData(),is(expectedNameRecord.getData()));
      assertThat("[" + i + "]getLength",actualNameRecord.getLength(),is(expectedNameRecord.getLength()));
      assertThat("[" + i + "]getNextBlock",actualNameRecord.getNextBlock(),is(expectedNameRecord.getNextBlock()));
      assertThat("[" + i + "]getType",actualNameRecord.getType(),is(expectedNameRecord.getType()));
      assertThat("[" + i + "]getId",actualNameRecord.getId(),is(expectedNameRecord.getId()));
      assertThat("[" + i + "]getLongId",actualNameRecord.getId(),is(expectedNameRecord.getId()));
      assertThat("[" + i + "]isStartRecord",actualNameRecord.isStartRecord(),is(expectedNameRecord.isStartRecord()));
      assertThat("[" + i + "]inUse",actualNameRecord.inUse(),is(expectedNameRecord.inUse()));
      i++;
    }
  }
}
