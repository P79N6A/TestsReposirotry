public class SetInitialPasswordCommandIT {
  private FileSystemAbstraction fileSystem=new EphemeralFileSystemAbstraction();
  private File confDir;
  private File homeDir;
  private OutsideWorld out;
  private AdminTool tool;
  private static final String SET_PASSWORD="set-initial-password";
  @Before public void setup(){
    File graphDir=new File(GraphDatabaseSettings.DEFAULT_DATABASE_NAME);
    confDir=new File(graphDir,"conf");
    homeDir=new File(graphDir,"home");
    out=mock(OutsideWorld.class);
    resetOutsideWorldMock();
    tool=new AdminTool(CommandLocator.fromServiceLocator(),BlockerLocator.fromServiceLocator(),out,true);
  }
  @After public void tearDown() throws Exception {
    fileSystem.close();
  }
  @Test public void shouldSetPassword() throws Throwable {
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"abc");
    assertAuthIniFile("abc");
    verify(out).stdOutLine("Changed password for user 'neo4j'.");
  }
  @Test public void shouldOverwriteIfSetPasswordAgain() throws Throwable {
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"abc");
    assertAuthIniFile("abc");
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"muchBetter");
    assertAuthIniFile("muchBetter");
    verify(out,times(2)).stdOutLine("Changed password for user 'neo4j'.");
  }
  @Test public void shouldWorkWithSamePassword() throws Throwable {
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"neo4j");
    assertAuthIniFile("neo4j");
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"neo4j");
    assertAuthIniFile("neo4j");
    verify(out,times(2)).stdOutLine("Changed password for user 'neo4j'.");
  }
  @Test public void shouldGetUsageOnWrongArguments1(){
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD);
    assertNoAuthIniFile();
    verify(out).stdErrLine("not enough arguments");
    verify(out,times(3)).stdErrLine("");
    verify(out).stdErrLine("usage: neo4j-admin set-initial-password <password>");
    verify(out).stdErrLine(String.format("environment variables:"));
    verify(out).stdErrLine(String.format("    NEO4J_CONF    Path to directory which contains neo4j.conf."));
    verify(out).stdErrLine(String.format("    NEO4J_DEBUG   Set to anything to enable debug output."));
    verify(out).stdErrLine(String.format("    NEO4J_HOME    Neo4j home directory."));
    verify(out).stdErrLine(String.format("    HEAP_SIZE     Set JVM maximum heap size during command execution."));
    verify(out).stdErrLine(String.format("                  Takes a number and a unit, for example 512m."));
    verify(out).stdErrLine("Sets the initial password of the initial admin user ('neo4j').");
    verify(out).exit(1);
    verifyNoMoreInteractions(out);
    verify(out,never()).stdOutLine(anyString());
  }
  @Test public void shouldGetUsageOnWrongArguments2(){
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"foo","bar");
    assertNoAuthIniFile();
    verify(out).stdErrLine("unrecognized arguments: 'bar'");
    verify(out,times(3)).stdErrLine("");
    verify(out).stdErrLine("usage: neo4j-admin set-initial-password <password>");
    verify(out).stdErrLine(String.format("environment variables:"));
    verify(out).stdErrLine(String.format("    NEO4J_CONF    Path to directory which contains neo4j.conf."));
    verify(out).stdErrLine(String.format("    NEO4J_DEBUG   Set to anything to enable debug output."));
    verify(out).stdErrLine(String.format("    NEO4J_HOME    Neo4j home directory."));
    verify(out).stdErrLine(String.format("    HEAP_SIZE     Set JVM maximum heap size during command execution."));
    verify(out).stdErrLine(String.format("                  Takes a number and a unit, for example 512m."));
    verify(out).stdErrLine("Sets the initial password of the initial admin user ('neo4j').");
    verify(out).exit(1);
    verifyNoMoreInteractions(out);
    verify(out,never()).stdOutLine(anyString());
  }
  @Test public void shouldErrorIfRealUsersAlreadyExistCommunity() throws Throwable {
    File authFile=getAuthFile("auth");
    fileSystem.mkdirs(authFile.getParentFile());
    fileSystem.create(authFile);
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"will-be-ignored");
    assertNoAuthIniFile();
    verify(out,times(1)).stdErrLine("command failed: the provided initial password was not set because existing Neo4j users were " + "detected at `" + authFile.getAbsolutePath() + "`. Please remove the existing `auth` file if you "+ "want to reset your database to only have a default user with the provided password.");
    verify(out).exit(1);
    verify(out,times(0)).stdOutLine(anyString());
  }
  @Test public void shouldErrorIfRealUsersAlreadyExistEnterprise() throws Throwable {
    File authFile=getAuthFile("auth");
    File rolesFile=getAuthFile("roles");
    fileSystem.mkdirs(authFile.getParentFile());
    fileSystem.create(authFile);
    fileSystem.create(rolesFile);
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"will-be-ignored");
    assertNoAuthIniFile();
    verify(out,times(1)).stdErrLine("command failed: the provided initial password was not set because existing Neo4j users were " + "detected at `" + authFile.getAbsolutePath() + "`. Please remove the existing `auth` and `roles` files if you "+ "want to reset your database to only have a default user with the provided password.");
    verify(out).exit(1);
  }
  @Test public void shouldErrorIfRealUsersAlreadyExistV2() throws Throwable {
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"not-the-default-password");
    File authFile=getAuthFile("auth");
    fileSystem.mkdirs(authFile.getParentFile());
    fileSystem.renameFile(getAuthFile("auth.ini"),authFile);
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"will-be-ignored");
    assertNoAuthIniFile();
    verify(out,times(1)).stdErrLine("command failed: the provided initial password was not set because existing Neo4j users were " + "detected at `" + authFile.getAbsolutePath() + "`. Please remove the existing `auth` file if you "+ "want to reset your database to only have a default user with the provided password.");
    verify(out).exit(1);
    verify(out,times(1)).stdOutLine("Changed password for user 'neo4j'.");
  }
  @Test public void shouldNotErrorIfOnlyTheUnmodifiedDefaultNeo4jUserAlreadyExists() throws Throwable {
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,UserManager.INITIAL_PASSWORD);
    File authFile=getAuthFile("auth");
    fileSystem.mkdirs(authFile.getParentFile());
    fileSystem.renameFile(getAuthFile("auth.ini"),authFile);
    tool.execute(homeDir.toPath(),confDir.toPath(),SET_PASSWORD,"should-not-be-ignored");
    assertAuthIniFile("should-not-be-ignored");
    verify(out,times(2)).stdOutLine("Changed password for user 'neo4j'.");
  }
  private void assertAuthIniFile(  String password) throws Throwable {
    File authIniFile=getAuthFile("auth.ini");
    assertTrue(fileSystem.fileExists(authIniFile));
    FileUserRepository userRepository=new FileUserRepository(fileSystem,authIniFile,NullLogProvider.getInstance());
    userRepository.start();
    User neo4j=userRepository.getUserByName(UserManager.INITIAL_USER_NAME);
    assertNotNull(neo4j);
    assertTrue(neo4j.credentials().matchesPassword(password));
    assertFalse(neo4j.hasFlag(User.PASSWORD_CHANGE_REQUIRED));
  }
  private void assertNoAuthIniFile(){
    assertFalse(fileSystem.fileExists(getAuthFile("auth.ini")));
  }
  private File getAuthFile(  String name){
    return new File(new File(new File(homeDir,"data"),"dbms"),name);
  }
  private void resetOutsideWorldMock(){
    reset(out);
    when(out.fileSystem()).thenReturn(fileSystem);
  }
}
