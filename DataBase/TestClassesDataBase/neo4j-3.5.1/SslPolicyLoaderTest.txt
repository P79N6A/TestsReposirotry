public class SslPolicyLoaderTest {
  @Rule public TestDirectory testDirectory=TestDirectory.testDirectory();
  private File home;
  private File publicCertificateFile;
  private File privateKeyFile;
  @Before public void setup() throws Exception {
    home=testDirectory.directory("home");
    File baseDir=new File(home,"certificates/default");
    publicCertificateFile=new File(baseDir,"public.crt");
    privateKeyFile=new File(baseDir,"private.key");
    new PkiUtils().createSelfSignedCertificate(publicCertificateFile,privateKeyFile,"localhost");
    File trustedDir=new File(baseDir,"trusted");
    trustedDir.mkdir();
    FileUtils.copyFile(publicCertificateFile,new File(trustedDir,"public.crt"));
    new File(baseDir,"revoked").mkdir();
  }
  @Test public void shouldLoadBaseCryptographicObjects() throws Exception {
    Map<String,String> params=stringMap();
    SslPolicyConfig policyConfig=new SslPolicyConfig("default");
    params.put(neo4j_home.name(),home.getAbsolutePath());
    params.put(policyConfig.base_directory.name(),"certificates/default");
    Config config=Config.defaults(params);
    SslPolicyLoader sslPolicyLoader=SslPolicyLoader.create(config,NullLogProvider.getInstance());
    SslPolicy sslPolicy=sslPolicyLoader.getPolicy("default");
    assertNotNull(sslPolicy);
    assertNotNull(sslPolicy.privateKey());
    assertNotNull(sslPolicy.certificateChain());
    assertNotNull(sslPolicy.nettyClientContext());
    assertNotNull(sslPolicy.nettyServerContext());
  }
  @Test public void shouldComplainIfMissingPrivateKey(){
    shouldComplainIfMissingFile(privateKeyFile);
  }
  @Test public void shouldComplainIfMissingPublicCertificate(){
    shouldComplainIfMissingFile(publicCertificateFile);
  }
  private void shouldComplainIfMissingFile(  File file){
    FileUtils.deleteFile(file);
    Map<String,String> params=stringMap();
    SslPolicyConfig policyConfig=new SslPolicyConfig("default");
    params.put(neo4j_home.name(),home.getAbsolutePath());
    params.put(policyConfig.base_directory.name(),"certificates/default");
    Config config=Config.defaults(params);
    try {
      SslPolicyLoader.create(config,NullLogProvider.getInstance());
      fail();
    }
 catch (    Exception e) {
      assertTrue(e.getCause() instanceof FileNotFoundException);
    }
  }
  @Test public void shouldThrowIfPolicyNameDoesNotExist(){
    Map<String,String> params=stringMap();
    SslPolicyConfig policyConfig=new SslPolicyConfig("default");
    params.put(neo4j_home.name(),home.getAbsolutePath());
    params.put(policyConfig.base_directory.name(),"certificates/default");
    Config config=Config.defaults(params);
    SslPolicyLoader sslPolicyLoader=SslPolicyLoader.create(config,NullLogProvider.getInstance());
    try {
      sslPolicyLoader.getPolicy("unknown");
      fail();
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void shouldReturnNullPolicyIfNullRequested(){
    SslPolicyLoader sslPolicyLoader=SslPolicyLoader.create(Config.defaults(),NullLogProvider.getInstance());
    SslPolicy sslPolicy=sslPolicyLoader.getPolicy(null);
    assertNull(sslPolicy);
  }
  @Test public void shouldNotAllowLegacyPolicyToBeConfigured(){
    Map<String,String> params=stringMap();
    SslPolicyConfig policyConfig=new SslPolicyConfig(LegacySslPolicyConfig.LEGACY_POLICY_NAME);
    params.put(neo4j_home.name(),home.getAbsolutePath());
    params.put(policyConfig.base_directory.name(),"certificates/default");
    Config config=Config.defaults(params);
    try {
      SslPolicyLoader.create(config,NullLogProvider.getInstance());
      fail();
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
