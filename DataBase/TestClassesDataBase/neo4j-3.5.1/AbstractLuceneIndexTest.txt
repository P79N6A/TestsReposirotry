public abstract class AbstractLuceneIndexTest {
  @Rule public final TestName testname=new TestName();
  @ClassRule public static TestDirectory testDirectory=TestDirectory.testDirectory(AbstractLuceneIndexTest.class);
  protected static GraphDatabaseService graphDb;
  protected Transaction tx;
  @BeforeClass public static void setUpStuff(){
    graphDb=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
  }
  @AfterClass public static void tearDownStuff(){
    graphDb.shutdown();
  }
  @After public void commitTx(){
    finishTx(true);
  }
  public void rollbackTx(){
    finishTx(false);
  }
  public void finishTx(  boolean success){
    if (tx != null) {
      if (success) {
        tx.success();
      }
      tx.close();
      tx=null;
    }
  }
  @Before public void beginTx(){
    if (tx == null) {
      tx=graphDb.beginTx();
    }
  }
  void restartTx(){
    commitTx();
    beginTx();
  }
protected interface EntityCreator<T extends PropertyContainer> {
    T create(    Object... properties);
    void delete(    T entity);
  }
  private static final RelationshipType TEST_TYPE=RelationshipType.withName("TEST_TYPE");
  protected static final EntityCreator<Node> NODE_CREATOR=new EntityCreator<Node>(){
    @Override public Node create(    Object... properties){
      Node node=graphDb.createNode();
      setProperties(node,properties);
      return node;
    }
    @Override public void delete(    Node entity){
      entity.delete();
    }
  }
;
  protected static final EntityCreator<Relationship> RELATIONSHIP_CREATOR=new EntityCreator<Relationship>(){
    @Override public Relationship create(    Object... properties){
      Relationship rel=graphDb.createNode().createRelationshipTo(graphDb.createNode(),TEST_TYPE);
      setProperties(rel,properties);
      return rel;
    }
    @Override public void delete(    Relationship entity){
      entity.delete();
    }
  }
;
  private static void setProperties(  PropertyContainer entity,  Object... properties){
    for (    Map.Entry<String,Object> entry : MapUtil.map(properties).entrySet()) {
      entity.setProperty(entry.getKey(),entry.getValue());
    }
  }
  protected Index<Node> nodeIndex(){
    return nodeIndex(currentIndexName(),stringMap());
  }
  protected Index<Node> nodeIndex(  Map<String,String> config){
    return nodeIndex(currentIndexName(),config);
  }
  protected Index<Node> nodeIndex(  String name,  Map<String,String> config){
    return graphDb.index().forNodes(name,config);
  }
  protected RelationshipIndex relationshipIndex(  Map<String,String> config){
    return relationshipIndex(currentIndexName(),config);
  }
  protected RelationshipIndex relationshipIndex(  String name,  Map<String,String> config){
    return graphDb.index().forRelationships(name,config);
  }
  protected String currentIndexName(){
    return testname.getMethodName();
  }
}
