public class AbstractTraverserIteratorTest {
  @Test public void shouldCloseResourceOnce(){
    AbstractTraverserIterator iter=new AbstractTraverserIterator(new AssertOneClose()){
      @Override protected Path fetchNextOrNull(){
        return null;
      }
      @Override public boolean isUniqueFirst(      TraversalBranch branch){
        return false;
      }
      @Override public boolean isUnique(      TraversalBranch branch){
        return false;
      }
      @Override public <STATE>Evaluation evaluate(      TraversalBranch branch,      BranchState<STATE> state){
        return null;
      }
    }
;
    iter.close();
    iter.close();
  }
private static class AssertOneClose implements Resource {
    boolean isClosed;
    @Override public void close(){
      assertThat("resource is closed",isClosed,equalTo(false));
      isClosed=true;
    }
  }
}
