public class PageCacheLongArrayTest {
  private static final int COUNT=1_000_000;
  private final DefaultFileSystemRule fs=new DefaultFileSystemRule();
  private final TestDirectory dir=TestDirectory.testDirectory();
  private final RandomRule random=new RandomRule();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fs).around(dir).around(random).around(pageCacheRule);
  @Test public void verifyPageCacheLongArray() throws Exception {
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    PagedFile file=pageCache.map(dir.file("file"),pageCache.pageSize(),CREATE,DELETE_ON_CLOSE);
    try (LongArray array=new PageCacheLongArray(file,COUNT,0,0)){
      verifyBehaviour(array);
    }
   }
  @Test public void verifyChunkingArrayWithPageCacheLongArray(){
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    File directory=dir.directory();
    NumberArrayFactory numberArrayFactory=NumberArrayFactory.auto(pageCache,directory,false,NumberArrayFactory.NO_MONITOR);
    try (LongArray array=numberArrayFactory.newDynamicLongArray(COUNT / 1_000,0)){
      verifyBehaviour(array);
    }
   }
  private void verifyBehaviour(  LongArray array){
    for (int i=0; i < COUNT; i++) {
      array.set(i,i);
    }
    for (int i=0; i < COUNT; i++) {
      assertEquals(i,array.get(i));
    }
    int stride=12_345_678;
    int next=random.nextInt(COUNT);
    for (int i=0; i < COUNT; i++) {
      assertEquals(next,array.get(next));
      next=(next + stride) % COUNT;
    }
  }
}
