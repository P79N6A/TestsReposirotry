class HopScotchHashingAlgorithmTest {
  @Test void shouldSupportIteratingThroughResize(){
    int threshold=figureOutGrowthThreshold();
    TableGrowthAwareMonitor monitor=new TableGrowthAwareMonitor();
    PrimitiveLongSet set=new PrimitiveLongHashSet(new LongKeyTable<>(DEFAULT_H,VALUE_MARKER),VALUE_MARKER,monitor);
    Set<Long> added=new HashSet<>();
    for (long i=0; i < threshold - 1; i++) {
      long value=i * 3;
      set.add(value);
      added.add(value);
    }
    PrimitiveLongIterator iterator=set.iterator();
    Set<Long> iterated=new HashSet<>();
    for (int i=0; i < threshold / 2; i++) {
      iterated.add(iterator.next());
    }
    assertFalse(monitor.checkAndReset());
    set.add((threshold - 1) * 3);
    assertTrue(monitor.checkAndReset());
    while (iterator.hasNext()) {
      iterated.add(iterator.next());
    }
    assertEquals(added,iterated);
  }
private static class TableGrowthAwareMonitor extends Monitor.Adapter {
    private boolean grew;
    @Override public boolean tableGrew(    int fromCapacity,    int toCapacity,    int currentSize){
      return grew=true;
    }
    boolean checkAndReset(){
      try {
        return grew;
      }
  finally {
        grew=false;
      }
    }
  }
  private static int figureOutGrowthThreshold(){
    final AtomicBoolean grew=new AtomicBoolean();
    Monitor monitor=new Monitor.Adapter(){
      @Override public boolean tableGrew(      int fromCapacity,      int toCapacity,      int currentSize){
        grew.set(true);
        return true;
      }
    }
;
    try (PrimitiveLongSet set=new PrimitiveLongHashSet(new LongKeyTable<>(DEFAULT_H,VALUE_MARKER),VALUE_MARKER,monitor)){
      int i=0;
      for (i=0; !grew.get(); i++) {
        set.add(i * 3);
      }
      return i;
    }
   }
}
