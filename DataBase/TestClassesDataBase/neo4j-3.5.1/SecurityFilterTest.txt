public class SecurityFilterTest {
  @Test public void shouldPassThroughRequestToAnUnsecuredPath() throws Exception {
    SecurityRule rule=mock(SecurityRule.class);
    when(rule.forUriPath()).thenReturn("/some-path");
    FilterChain filterChain=mock(FilterChain.class);
    SecurityFilter securityFilter=new SecurityFilter(rule);
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getContextPath()).thenReturn("/some-other-path");
    securityFilter.doFilter(request,mock(HttpServletResponse.class),filterChain);
    verify(filterChain).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void shouldActivateRuleThatRejectsTheRequestForAMatchingPath() throws Exception {
    SecurityRule rule=mock(SecurityRule.class);
    when(rule.forUriPath()).thenReturn("/some-path");
    when(rule.isAuthorized(any(HttpServletRequest.class))).thenReturn(false);
    FilterChain filterChain=mock(FilterChain.class);
    SecurityFilter securityFilter=new SecurityFilter(rule);
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getContextPath()).thenReturn("/some-path");
    securityFilter.doFilter(request,mock(HttpServletResponse.class),filterChain);
    verify(filterChain,never()).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void shouldActivateRuleThatAcceptsTheRequestForAMatchingPath() throws Exception {
    SecurityRule rule=mock(SecurityRule.class);
    when(rule.forUriPath()).thenReturn("/some-path");
    when(rule.isAuthorized(any(HttpServletRequest.class))).thenReturn(true);
    FilterChain filterChain=mock(FilterChain.class);
    SecurityFilter securityFilter=new SecurityFilter(rule);
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getContextPath()).thenReturn("/some-path");
    HttpServletResponse response=mock(HttpServletResponse.class);
    securityFilter.doFilter(request,response,filterChain);
    verify(filterChain).doFilter(request,response);
  }
  @Test public void shouldRemoveRules() throws Exception {
    SecurityRule securityRule1=mock(SecurityRule.class);
    when(securityRule1.forUriPath()).thenReturn("/securityRule1");
    SecurityRule securityRule2=mock(SecurityRule.class);
    when(securityRule2.forUriPath()).thenReturn("/securityRule2");
    SecurityFilter securityFilter=new SecurityFilter(securityRule1,securityRule2);
    HttpServletRequest request=mock(HttpServletRequest.class);
    HttpServletResponse response=mock(HttpServletResponse.class);
    FilterChain filterChain=mock(FilterChain.class);
    securityFilter.destroy();
    securityFilter.doFilter(request,response,filterChain);
    verify(filterChain).doFilter(request,response);
  }
}
