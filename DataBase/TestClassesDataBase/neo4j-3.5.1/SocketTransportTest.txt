class SocketTransportTest {
  @Test void shouldManageChannelsInChannelInitializer(){
    NetworkConnectionTracker connectionTracker=mock(NetworkConnectionTracker.class);
    SocketTransport socketTransport=newSocketTransport(connectionTracker,NO_THROTTLE);
    EmbeddedChannel channel=new EmbeddedChannel(socketTransport.channelInitializer());
    ArgumentCaptor<TrackedNetworkConnection> captor=ArgumentCaptor.forClass(TrackedNetworkConnection.class);
    verify(connectionTracker).add(captor.capture());
    verify(connectionTracker,never()).remove(any());
    channel.close();
    verify(connectionTracker).remove(captor.getValue());
  }
  @Test void shouldManageThrottlersInChannelInitializer(){
    TransportThrottleGroup throttleGroup=mock(TransportThrottleGroup.class);
    SocketTransport socketTransport=newSocketTransport(NetworkConnectionTracker.NO_OP,throttleGroup);
    EmbeddedChannel channel=new EmbeddedChannel(socketTransport.channelInitializer());
    verify(throttleGroup).install(channel);
    verify(throttleGroup,never()).uninstall(channel);
    channel.close();
    verify(throttleGroup).uninstall(channel);
  }
  @Test void shouldInstallTransportSelectionHandler(){
    SocketTransport socketTransport=newSocketTransport(NetworkConnectionTracker.NO_OP,NO_THROTTLE);
    EmbeddedChannel channel=new EmbeddedChannel(socketTransport.channelInitializer());
    TransportSelectionHandler handler=channel.pipeline().get(TransportSelectionHandler.class);
    assertNotNull(handler);
  }
  private static SocketTransport newSocketTransport(  NetworkConnectionTracker connectionTracker,  TransportThrottleGroup throttleGroup){
    return new SocketTransport("bolt",new ListenSocketAddress("localhost",7687),null,false,NullLogProvider.getInstance(),throttleGroup,mock(BoltProtocolFactory.class),connectionTracker);
  }
}
