public class IndexUpdaterMapTest {
  private IndexMap indexMap;
  private IndexProxy indexProxy1;
  private CapableIndexDescriptor schemaIndexDescriptor1;
  private IndexUpdater indexUpdater1;
  private IndexProxy indexProxy2;
  private CapableIndexDescriptor schemaIndexDescriptor2;
  private IndexProxy indexProxy3;
  private CapableIndexDescriptor schemaIndexDescriptor3;
  private IndexUpdaterMap updaterMap;
  @Before public void before(){
    indexMap=new IndexMap();
    indexProxy1=mock(IndexProxy.class);
    schemaIndexDescriptor1=forSchema(forLabel(2,3),PROVIDER_DESCRIPTOR).withId(0).withoutCapabilities();
    indexUpdater1=mock(IndexUpdater.class);
    when(indexProxy1.getDescriptor()).thenReturn(schemaIndexDescriptor1);
    when(indexProxy1.newUpdater(any(IndexUpdateMode.class))).thenReturn(indexUpdater1);
    indexProxy2=mock(IndexProxy.class);
    schemaIndexDescriptor2=forSchema(forLabel(5,6),PROVIDER_DESCRIPTOR).withId(1).withoutCapabilities();
    IndexUpdater indexUpdater2=mock(IndexUpdater.class);
    when(indexProxy2.getDescriptor()).thenReturn(schemaIndexDescriptor2);
    when(indexProxy2.newUpdater(any(IndexUpdateMode.class))).thenReturn(indexUpdater2);
    indexProxy3=mock(IndexProxy.class);
    schemaIndexDescriptor3=forSchema(forLabel(5,7,8),PROVIDER_DESCRIPTOR).withId(2).withoutCapabilities();
    IndexUpdater indexUpdater3=mock(IndexUpdater.class);
    when(indexProxy3.getDescriptor()).thenReturn(schemaIndexDescriptor3);
    when(indexProxy3.newUpdater(any(IndexUpdateMode.class))).thenReturn(indexUpdater3);
    updaterMap=new IndexUpdaterMap(indexMap,IndexUpdateMode.ONLINE);
  }
  @Test public void shouldRetrieveUpdaterFromIndexMapForExistingIndex(){
    indexMap.putIndexProxy(indexProxy1);
    IndexUpdater updater=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    assertEquals(indexUpdater1,updater);
    assertEquals(1,updaterMap.size());
  }
  @Test public void shouldRetrieveUpdateUsingLabelAndProperty(){
    indexMap.putIndexProxy(indexProxy1);
    IndexUpdater updater=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    assertThat(updater,equalTo(indexUpdater1));
  }
  @Test public void shouldRetrieveSameUpdaterFromIndexMapForExistingIndexWhenCalledTwice(){
    indexMap.putIndexProxy(indexProxy1);
    IndexUpdater updater1=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    IndexUpdater updater2=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    assertEquals(updater1,updater2);
    assertEquals(1,updaterMap.size());
  }
  @Test public void shouldRetrieveNoUpdaterForNonExistingIndex(){
    IndexUpdater updater=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    assertNull(updater);
    assertTrue("updater map must be empty",updaterMap.isEmpty());
  }
  @Test public void shouldCloseAllUpdaters() throws Exception {
    indexMap.putIndexProxy(indexProxy1);
    indexMap.putIndexProxy(indexProxy2);
    IndexUpdater updater1=updaterMap.getUpdater(schemaIndexDescriptor1.schema());
    IndexUpdater updater2=updaterMap.getUpdater(schemaIndexDescriptor2.schema());
    updaterMap.close();
    verify(updater1).close();
    verify(updater2).close();
    assertTrue("updater map must be empty",updaterMap.isEmpty());
  }
}
