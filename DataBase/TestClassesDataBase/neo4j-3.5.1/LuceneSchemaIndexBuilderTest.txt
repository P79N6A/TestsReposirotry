@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class LuceneSchemaIndexBuilderTest {
  @Inject private TestDirectory testDir;
  @Inject private DefaultFileSystemAbstraction fileSystemRule;
  private final IndexDescriptor descriptor=TestIndexDescriptorFactory.forLabel(0,0);
  @Test void readOnlyIndexCreation() throws Exception {
    try (SchemaIndex schemaIndex=LuceneSchemaIndexBuilder.create(descriptor,getReadOnlyConfig()).withFileSystem(fileSystemRule).withOperationalMode(OperationalMode.single).withIndexRootFolder(testDir.directory("a")).build()){
      assertTrue(schemaIndex.isReadOnly(),"Builder should construct read only index.");
    }
   }
  @Test void writableIndexCreation() throws Exception {
    try (SchemaIndex schemaIndex=LuceneSchemaIndexBuilder.create(descriptor,getDefaultConfig()).withFileSystem(fileSystemRule).withOperationalMode(OperationalMode.single).withIndexRootFolder(testDir.directory("b")).build()){
      assertFalse(schemaIndex.isReadOnly(),"Builder should construct writable index.");
    }
   }
  private static Config getDefaultConfig(){
    return Config.defaults();
  }
  private static Config getReadOnlyConfig(){
    return Config.defaults(GraphDatabaseSettings.read_only,Settings.TRUE);
  }
}
