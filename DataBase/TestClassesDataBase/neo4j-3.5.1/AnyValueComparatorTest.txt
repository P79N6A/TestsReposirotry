class AnyValueComparatorTest {
  private static Comparator<AnyValue> comparator=AnyValues.COMPARATOR;
  private Object[] objs=new Object[]{map(),map("1",'a'),map("1",'b'),map("2",'a'),map("1",map("1",map("1",'a')),"2",'x'),map("1",map("1",map("1",'b')),"2",'x'),map("1",'a',"2",'b'),map("1",'b',"2",map()),map("1",'b',"2",map("10",'a')),map("1",'b',"2",map("10",'b')),map("1",'b',"2",map("20",'a')),map("1",'b',"2",'a'),node(1L),nodeValue(2L,stringArray("L"),emptyMap()),node(3L),relationship(1L),relationshipValue(2L,nodeValue(1L,stringArray("L"),emptyMap()),nodeValue(2L,stringArray("L"),emptyMap()),stringValue("type"),emptyMap()),relationship(3L),list(),new String[]{"a"},new boolean[]{false},list(1),list(1,2),list(1,3),list(2,1),new short[]{2,3},list(3),list(3,list(1)),list(3,list(1,2)),list(3,list(2)),list(3,1),new double[]{3.0,2.0},list(4,list(1,list(1))),list(4,list(1,list(2))),new int[]{4,1},path(nodes(1L),relationships()),path(nodes(1L,2L),relationships(1L)),path(nodes(1L,2L,3L),relationships(1L,2L)),path(nodes(1L,2L,3L),relationships(1L,3L)),path(nodes(1L,2L,3L,4L),relationships(1L,3L,4L)),path(nodes(1L,2L,3L,4L),relationships(1L,4L,2L)),path(nodes(1L,2L,3L),relationships(2L,3L)),path(nodes(1L,2L),relationships(3L)),path(nodes(2L),relationships()),path(nodes(2L,1L),relationships(1L)),path(nodes(3L),relationships()),path(nodes(4L,5L),relationships(2L)),path(nodes(5L,4L),relationships(2L)),pointValue(CoordinateReferenceSystem.Cartesian,1.0,1.0),datetime(2018,2,2,0,0,0,0,"+00:00"),localDateTime(2018,2,2,0,0,0,0),date(2018,2,1),time(12,0,0,0,"+00:00"),localTime(0,0,0,1),duration(0,0,0,0),"hello",true,1L,Math.PI,Short.MAX_VALUE,Double.NaN,null};
  @Test void shouldOrderValuesCorrectly(){
    List<AnyValue> values=Arrays.stream(objs).map(VirtualValueTestUtil::toAnyValue).collect(Collectors.toList());
    for (int i=0; i < values.size(); i++) {
      for (int j=0; j < values.size(); j++) {
        AnyValue left=values.get(i);
        AnyValue right=values.get(j);
        int cmpPos=signum(i - j);
        int cmpVal=signum(compare(comparator,left,right));
        assertEquals(cmpPos,cmpVal,format("Comparing %s against %s does not agree with their positions in the sorted list (%d and %d)",left,right,i,j));
      }
    }
  }
  private <T>int compare(  Comparator<T> comparator,  T left,  T right){
    int cmp1=comparator.compare(left,right);
    int cmp2=comparator.compare(right,left);
    assertEquals(signum(cmp1),-signum(cmp2),format("%s is not symmetric on %s and %s",comparator,left,right));
    return cmp1;
  }
}
