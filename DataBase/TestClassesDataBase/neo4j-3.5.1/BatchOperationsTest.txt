public class BatchOperationsTest {
  private final BatchOperations ops=new BatchOperations(null){
    @Override protected void invoke(    String method,    String path,    String body,    Integer id,    URI targetUri,    InternalJettyServletRequest req,    InternalJettyServletResponse res){
    }
  }
;
  @Test public void testReplaceLocations(){
    Map<Integer,String> map=new HashMap<>();
    map.put(100,"bar");
    assertEquals("foo",ops.replaceLocationPlaceholders("foo",map));
    assertEquals("foo bar",ops.replaceLocationPlaceholders("foo {100}",map));
    assertEquals("bar foo bar",ops.replaceLocationPlaceholders("{100} foo {100}",map));
    assertEquals("bar bar foo bar bar",ops.replaceLocationPlaceholders("bar {100} foo {100} bar",map));
  }
  @Test public void testSchemeInInternalJettyServletRequestForHttp() throws UnsupportedEncodingException {
    InternalJettyServletRequest req=new InternalJettyServletRequest("POST","http://localhost:7473/db/data/node","{'name':'node1'}",new InternalJettyServletResponse(),mock(RequestData.class));
    assertEquals("http",req.getScheme());
  }
  @Test public void testSchemeInInternalJettyServletRequestForHttps() throws UnsupportedEncodingException {
    InternalJettyServletRequest req=new InternalJettyServletRequest("POST","https://localhost:7473/db/data/node","{'name':'node1'}",new InternalJettyServletResponse(),mock(RequestData.class));
    assertEquals("https",req.getScheme());
  }
  @Test public void shouldForwardMetadataFromRequestData() throws Exception {
    RequestData mock=new RequestData("127.0.0.1",true,1,"TheLocalName","129.0.0.1",2,"authorization/auth");
    InternalJettyServletRequest req=new InternalJettyServletRequest("POST","https://localhost:7473/db/data/node","",new InternalJettyServletResponse(),mock);
    assertEquals("127.0.0.1",req.getRemoteAddr());
    assertException(req::getRemoteHost,UnsupportedOperationException.class,"Remote host-name lookup might prove expensive, this should be explicitly considered.");
    assertTrue(req.isSecure());
    assertEquals(1,req.getRemotePort());
    assertEquals("TheLocalName",req.getLocalName());
    assertEquals("129.0.0.1",req.getLocalAddr());
    assertEquals(2,req.getLocalPort());
    assertEquals("authorization/auth",req.getAuthType());
  }
  @Test public void shouldIgnoreUnknownAndUnparseablePlaceholders(){
    assertEquals("foo {00000000010001010001001100111000100101010111001101110111}",ops.replaceLocationPlaceholders("foo {00000000010001010001001100111000100101010111001101110111}",Collections.emptyMap()));
    assertEquals("foo {2147483648}",ops.replaceLocationPlaceholders("foo {2147483648}",Collections.emptyMap()));
  }
}
