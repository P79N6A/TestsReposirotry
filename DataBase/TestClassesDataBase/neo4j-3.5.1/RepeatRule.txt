/** 
 * Set a test to loop a number of times. If you find yourself using this in a production test, you are probably doing something wrong. However, as a temporary measure used locally, it serves as an excellent tool to trigger errors in flaky tests. If used together with other TestRules, usually you need to make sure that this is placed as the LAST field in the test class. This is to ensure that all other rules run inside of this rule, for example to start/stop databases and other resources.
 */
public class RepeatRule implements TestRule {
  @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Repeat {  int times();
}
  private final boolean printRepeats;
  private final int defaultTimes;
  private int count;
  public RepeatRule(){
    this(false,1);
  }
  public RepeatRule(  boolean printRepeats,  int defaultRepeats){
    this.printRepeats=printRepeats;
    this.defaultTimes=defaultRepeats;
  }
private class RepeatStatement extends Statement {
    private final int times;
    private final Statement statement;
    private final String testName;
    private RepeatStatement(    int times,    Statement statement,    Description testDescription){
      this.times=times;
      this.statement=statement;
      this.testName=testDescription.getDisplayName();
    }
    @Override public void evaluate() throws Throwable {
      for (count=0; count < times; count++) {
        if (printRepeats) {
          System.out.println(testName + " iteration " + (count + 1)+ "/"+ times);
        }
        statement.evaluate();
      }
    }
  }
  @Override public Statement apply(  Statement base,  Description description){
    Repeat repeat=description.getAnnotation(Repeat.class);
    if (repeat != null) {
      return new RepeatStatement(repeat.times(),base,description);
    }
    if (defaultTimes > 1) {
      return new RepeatStatement(defaultTimes,base,description);
    }
    return base;
  }
  /** 
 * Get the current count. This can be used (for example) in a non-suspending breakpoint at the beginning of a test to print out what iteration is currently running.
 * @return current count
 */
  public int getCount(){
    return count;
  }
}
