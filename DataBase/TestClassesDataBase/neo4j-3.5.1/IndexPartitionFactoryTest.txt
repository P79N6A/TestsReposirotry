@ExtendWith(TestDirectoryExtension.class) class IndexPartitionFactoryTest {
  @Inject private TestDirectory testDirectory;
  private Directory directory;
  @BeforeEach void setUp() throws IOException {
    directory=DirectoryFactory.PERSISTENT.open(testDirectory.directory());
  }
  @Test void createReadOnlyPartition() throws Exception {
    prepareIndex();
    try (AbstractIndexPartition indexPartition=new ReadOnlyIndexPartitionFactory().createPartition(testDirectory.directory(),directory)){
      assertThrows(UnsupportedOperationException.class,indexPartition::getIndexWriter);
    }
   }
  @Test void createWritablePartition() throws Exception {
    try (AbstractIndexPartition indexPartition=new WritableIndexPartitionFactory(IndexWriterConfigs::standard).createPartition(testDirectory.directory(),directory)){
      try (IndexWriter indexWriter=indexPartition.getIndexWriter()){
        indexWriter.addDocument(new Document());
        indexWriter.commit();
        indexPartition.maybeRefreshBlocking();
        try (PartitionSearcher searcher=indexPartition.acquireSearcher()){
          assertEquals(1,searcher.getIndexSearcher().getIndexReader().numDocs(),"We should be able to see newly added document ");
        }
       }
     }
   }
  private void prepareIndex() throws IOException {
    File location=testDirectory.directory();
    try (AbstractIndexPartition ignored=new WritableIndexPartitionFactory(IndexWriterConfigs::standard).createPartition(location,DirectoryFactory.PERSISTENT.open(location))){
    }
   }
}
