public class IndexSpecifierTest {
  @Test public void shouldFormatAsCanonicalRepresentation(){
    assertThat(new IndexSpecifier(":Person(name)").toString(),is(":Person(name)"));
  }
  @Test public void shouldParseASimpleLabel(){
    assertThat(new IndexSpecifier(":Person_23(name)").label(),is("Person_23"));
  }
  @Test public void shouldParseASimpleProperty(){
    assertThat(new IndexSpecifier(":Person(a_Name_123)").properties(),is(arrayContaining("a_Name_123")));
  }
  @Test public void shouldParseTwoProperties(){
    assertThat(new IndexSpecifier(":Person(name, lastName)").properties(),is(arrayContaining("name","lastName")));
  }
  @Test public void shouldParseManyProperties(){
    String[] properties=new IndexSpecifier(":Person(1, 2, 3, 4, 5, 6)").properties();
    assertThat(properties,is(arrayContaining("1","2","3","4","5","6")));
  }
  @Test public void shouldParseOddProperties(){
    String[] properties=new IndexSpecifier(": Person(1,    2lskgj_LKHGS, `3sdlkhs,   df``sas;g`, 4, `  5  `, 6)").properties();
    assertThat(properties,is(arrayContaining("1","2lskgj_LKHGS","3sdlkhs,   df``sas;g","4","  5  ","6")));
  }
  @Test public void shouldParseANastyLabel(){
    assertThat(new IndexSpecifier(":`:(!\"£$%^&*( )`(name)").label(),is(":(!\"£$%^&*( )"));
  }
  @Test public void shouldParseANastyProperty(){
    assertThat(new IndexSpecifier(":Person(`(:!\"£$%^&*( )`)").properties(),is(arrayContaining("(:!\"£$%^&*( )")));
  }
  @Test public void shouldProduceAReasonableErrorIfTheSpecificationCantBeParsed(){
    try {
      new IndexSpecifier("rubbish");
      fail("expected exception");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
