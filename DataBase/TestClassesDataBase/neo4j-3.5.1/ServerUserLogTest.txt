public class ServerUserLogTest {
  @Rule public final SuppressOutput suppress=SuppressOutput.suppress(SuppressOutput.System.out);
  @Rule public TestDirectory homeDir=TestDirectory.testDirectory();
  @Test public void shouldLogToStdOutByDefault() throws Exception {
    ServerBootstrapper serverBootstrapper=getServerBootstrapper();
    File dir=homeDir.directory();
    serverBootstrapper.start(dir,Optional.empty(),MapUtil.stringMap(database_path.name(),homeDir.absolutePath().getAbsolutePath()));
    assertThat(getStdOut(),not(empty()));
    assertTrue(!Files.exists(getUserLogFileLocation(dir)));
    serverBootstrapper.stop();
  }
  @Test public void shouldLogToFileWhenConfigured() throws Exception {
    ServerBootstrapper serverBootstrapper=getServerBootstrapper();
    File dir=homeDir.directory();
    serverBootstrapper.start(dir,Optional.empty(),MapUtil.stringMap(database_path.name(),homeDir.absolutePath().getAbsolutePath(),store_user_log_to_stdout.name(),"false"));
    assertThat(getStdOut(),empty());
    assertTrue(Files.exists(getUserLogFileLocation(dir)));
    assertThat(readUserLogFile(dir),not(empty()));
    serverBootstrapper.stop();
  }
  private List<String> getStdOut(){
    List<String> lines=suppress.getOutputVoice().lines();
    return lines.stream().filter(line -> !line.equals("")).collect(Collectors.toList());
  }
  private ServerBootstrapper getServerBootstrapper(){
    return new ServerBootstrapper(){
      @Override protected GraphFactory createGraphFactory(      Config config){
        return new CommunityGraphFactory();
      }
      @Override protected NeoServer createNeoServer(      GraphFactory graphFactory,      Config config,      GraphDatabaseDependencies dependencies){
        return new AbstractNeoServer(config,graphFactory,dependencies){
          @Override protected Iterable<ServerModule> createServerModules(){
            return new ArrayList<>(0);
          }
          @Override protected WebServer createWebServer(){
            return null;
          }
          @Override public Iterable<AdvertisableService> getServices(){
            return new ArrayList<>(0);
          }
        }
;
      }
    }
;
  }
  private List<String> readUserLogFile(  File homeDir) throws IOException {
    return Files.readAllLines(getUserLogFileLocation(homeDir)).stream().filter(line -> !line.equals("")).collect(Collectors.toList());
  }
  private Path getUserLogFileLocation(  File homeDir){
    return Paths.get(homeDir.getAbsolutePath(),"logs","neo4j.log");
  }
}
