public class LazyInstanceSelectorTest {
  @Test public void shouldInstantiateLazilyOnFirstSelect(){
    Function<IndexSlot,String> factory=slotToStringFunction();
    LazyInstanceSelector<String> selector=new LazyInstanceSelector<>(factory);
    for (    IndexSlot slot : values()) {
      for (      IndexSlot candidate : values()) {
        if (candidate.ordinal() < slot.ordinal()) {
          verify(factory,times(1)).apply(candidate);
          selector.select(candidate);
          verify(factory,times(1)).apply(candidate);
        }
 else         if (candidate == slot) {
          verify(factory,times(0)).apply(candidate);
          selector.select(candidate);
          verify(factory,times(1)).apply(candidate);
        }
 else {
          assertNull(selector.getIfInstantiated(candidate));
        }
      }
    }
  }
  @Test public void shouldPerformActionOnAll(){
    Function<IndexSlot,String> factory=slotToStringFunction();
    LazyInstanceSelector<String> selector=new LazyInstanceSelector<>(factory);
    selector.select(STRING);
    Consumer<String> consumer=mock(Consumer.class);
    selector.forAll(consumer);
    for (    IndexSlot slot : IndexSlot.values()) {
      verify(consumer,times(1)).accept(String.valueOf(slot));
    }
    verifyNoMoreInteractions(consumer);
  }
  @Test public void shouldCloseAllInstantiated(){
    Function<IndexSlot,String> factory=slotToStringFunction();
    LazyInstanceSelector<String> selector=new LazyInstanceSelector<>(factory);
    selector.select(NUMBER);
    selector.select(STRING);
    Consumer<String> consumer=mock(Consumer.class);
    selector.close(consumer);
    verify(consumer,times(1)).accept(String.valueOf(NUMBER));
    verify(consumer,times(1)).accept(String.valueOf(STRING));
    verifyNoMoreInteractions(consumer);
  }
  @Test public void shouldPreventInstantiationAfterClose(){
    Function<IndexSlot,String> factory=slotToStringFunction();
    LazyInstanceSelector<String> selector=new LazyInstanceSelector<>(factory);
    selector.select(NUMBER);
    selector.select(STRING);
    selector.close(mock(Consumer.class));
    try {
      selector.select(TEMPORAL);
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  private Function<IndexSlot,String> slotToStringFunction(){
    Function<IndexSlot,String> factory=mock(Function.class);
    when(factory.apply(any(IndexSlot.class))).then(invocationOnMock -> String.valueOf((IndexSlot)invocationOnMock.getArgument(0)));
    return factory;
  }
}
