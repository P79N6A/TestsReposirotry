public class TxStateVisitorTest {
  @Test public void shouldSeeAddedRelationshipProperties() throws Exception {
    long relId=1L;
    int propKey=2;
    GatheringVisitor visitor=new GatheringVisitor();
    Value value=Values.of("hello");
    state.relationshipDoReplaceProperty(relId,propKey,Values.of(""),value);
    state.accept(visitor);
    StorageProperty prop=new PropertyKeyValue(propKey,Values.of("hello"));
    assertThat(visitor.relPropertyChanges,contains(propChange(relId,noProperty,asList(prop),IntSets.immutable.empty())));
  }
  private Matcher<List<GatheringVisitor.PropertyChange>> contains(  GatheringVisitor.PropertyChange... change){
    return equalTo(asList(change));
  }
  private GatheringVisitor.PropertyChange propChange(  long relId,  Collection<StorageProperty> added,  List<StorageProperty> changed,  IntIterable removed){
    return new GatheringVisitor.PropertyChange(relId,added,changed,removed);
  }
  private TransactionState state;
  private final Collection<StorageProperty> noProperty=Collections.emptySet();
  @Before public void before(){
    state=new TxState();
  }
static class GatheringVisitor extends TxStateVisitor.Adapter {
static class PropertyChange {
      final long entityId;
      final List<StorageProperty> added;
      final List<StorageProperty> changed;
      final IntList removed;
      PropertyChange(      long entityId,      Collection<StorageProperty> added,      Collection<StorageProperty> changed,      IntIterable removed){
        this.entityId=entityId;
        this.added=Iterables.asList(added);
        this.changed=Iterables.asList(changed);
        this.removed=removed.toList();
      }
      PropertyChange(      long entityId,      Iterator<StorageProperty> added,      Iterator<StorageProperty> changed,      IntIterable removed){
        this.entityId=entityId;
        this.added=Iterators.asList(added);
        this.changed=Iterators.asList(changed);
        this.removed=removed.toList();
      }
      @Override public String toString(){
        return "PropertyChange{" + "entityId=" + entityId + ", added="+ added+ ", changed="+ changed+ ", removed="+ removed+ '}';
      }
      @Override public boolean equals(      Object o){
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        PropertyChange that=(PropertyChange)o;
        if (entityId != that.entityId) {
          return false;
        }
        if (!added.equals(that.added)) {
          return false;
        }
        if (!changed.equals(that.changed)) {
          return false;
        }
        return removed.equals(that.removed);
      }
      @Override public int hashCode(){
        int result=(int)(entityId ^ (entityId >>> 32));
        result=31 * result + added.hashCode();
        result=31 * result + changed.hashCode();
        result=31 * result + removed.hashCode();
        return result;
      }
    }
    public List<PropertyChange> nodePropertyChanges=new ArrayList<>();
    public List<PropertyChange> relPropertyChanges=new ArrayList<>();
    public List<PropertyChange> graphPropertyChanges=new ArrayList<>();
    @Override public void visitNodePropertyChanges(    long id,    Iterator<StorageProperty> added,    Iterator<StorageProperty> changed,    IntIterable removed){
      nodePropertyChanges.add(new PropertyChange(id,added,changed,removed));
    }
    @Override public void visitRelPropertyChanges(    long id,    Iterator<StorageProperty> added,    Iterator<StorageProperty> changed,    IntIterable removed){
      relPropertyChanges.add(new PropertyChange(id,added,changed,removed));
    }
    @Override public void visitGraphPropertyChanges(    Iterator<StorageProperty> added,    Iterator<StorageProperty> changed,    IntIterable removed){
      graphPropertyChanges.add(new PropertyChange(-1,added,changed,removed));
    }
  }
}
