public class RecordStorageReaderSchemaTest extends RecordStorageReaderTestBase {
  @Test public void shouldListAllConstraints(){
    createUniquenessConstraint(label1,propertyKey);
    createUniquenessConstraint(label2,propertyKey);
    Set<ConstraintDescriptor> constraints=asSet(storageReader.constraintsGetAll());
    Set<?> expectedConstraints=asSet(uniqueConstraintDescriptor(label1,propertyKey),uniqueConstraintDescriptor(label2,propertyKey));
    assertEquals(expectedConstraints,constraints);
  }
  @Test public void shouldListAllConstraintsForLabel(){
    createUniquenessConstraint(label1,propertyKey);
    createUniquenessConstraint(label2,propertyKey);
    Set<ConstraintDescriptor> constraints=asSet(storageReader.constraintsGetForLabel(labelId(label1)));
    Set<?> expectedConstraints=asSet(uniqueConstraintDescriptor(label1,propertyKey));
    assertEquals(expectedConstraints,constraints);
  }
  @Test public void shouldListAllConstraintsForLabelAndProperty(){
    createUniquenessConstraint(label1,propertyKey);
    createUniquenessConstraint(label1,otherPropertyKey);
    Set<ConstraintDescriptor> constraints=asSet(storageReader.constraintsGetForSchema(uniqueConstraintDescriptor(label1,propertyKey).schema()));
    Set<?> expectedConstraints=asSet(uniqueConstraintDescriptor(label1,propertyKey));
    assertEquals(expectedConstraints,constraints);
  }
  private void createUniquenessConstraint(  Label label,  String propertyKey){
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(label).assertPropertyIsUnique(propertyKey).create();
      tx.success();
    }
   }
  private ConstraintDescriptor uniqueConstraintDescriptor(  Label label,  String propertyKey){
    int labelId=labelId(label);
    int propKeyId=propertyKeyId(propertyKey);
    return ConstraintDescriptorFactory.uniqueForLabel(labelId,propKeyId);
  }
}
