public class WebSocketConnectionTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Rule public SuppressOutput suppressOutput=SuppressOutput.suppressAll();
  @Test public void shouldNotThrowAnyExceptionWhenDataReceivedBeforeClose() throws Throwable {
    WebSocketClient client=mock(WebSocketClient.class);
    WebSocketConnection conn=new WebSocketConnection(client);
    when(client.isStopped()).thenReturn(true);
    byte[] data={0,1,2,3,4,5,6,7,8,9};
    conn.onWebSocketBinary(data,0,10);
    conn.recv(10);
  }
  @Test public void shouldThrowIOExceptionWhenNotEnoughDataReceivedBeforeClose() throws Throwable {
    WebSocketClient client=mock(WebSocketClient.class);
    WebSocketConnection conn=new WebSocketConnection(client);
    when(client.isStopped()).thenReturn(true,true);
    byte[] data={0,1,2,3};
    conn.onWebSocketBinary(data,0,4);
    expectedException.expect(IOException.class);
    expectedException.expectMessage("Connection closed while waiting for data from the server.");
    conn.recv(10);
  }
}
