class AdminCommandSectionTest {
  @Mock private Consumer<String> out;
  @BeforeEach void setUp(){
    MockitoAnnotations.initMocks(this);
  }
  @Test void shouldPrintUsageForAllCommandsAlphabetically(){
    AdminCommandSection generalSection=AdminCommandSection.general();
    List<AdminCommand.Provider> providers=asList(mockCommand("restore","Restore"),mockCommand("bam","A summary"),mockCommand("zzzz-last-one","Another summary"));
    generalSection.printAllCommandsUnderSection(out,providers);
    InOrder ordered=inOrder(out);
    ordered.verify(out).accept("");
    ordered.verify(out).accept("General");
    ordered.verify(out).accept("    bam");
    ordered.verify(out).accept("        A summary");
    ordered.verify(out).accept("    restore");
    ordered.verify(out).accept("        Restore");
    ordered.verify(out).accept("    zzzz-last-one");
    ordered.verify(out).accept("        Another summary");
    ordered.verifyNoMoreInteractions();
  }
  @Test void equalsUsingReflection(){
    assertEquals(AdminCommandSection.general(),new TestGeneralSection());
    assertNotEquals(AdminCommandSection.general(),new TestAnotherGeneralSection());
  }
  @Test void hashCodeUsingReflection(){
    TestGeneralSection testGeneralSection=new TestGeneralSection();
    TestAnotherGeneralSection testAnotherGeneralSection=new TestAnotherGeneralSection();
    HashMap<AdminCommandSection,String> map=new HashMap<>();
    map.put(AdminCommandSection.general(),"General-Original");
    map.put(testGeneralSection,"General-Test");
    map.put(testAnotherGeneralSection,"General-AnotherTest");
    assertEquals(2,map.size());
    assertEquals("General-Test",map.get(AdminCommandSection.general()));
    assertEquals("General-Test",map.get(testGeneralSection));
    assertEquals("General-AnotherTest",map.get(testAnotherGeneralSection));
  }
private static class TestGeneralSection extends AdminCommandSection {
    @Override @Nonnull public String printable(){
      return "General";
    }
  }
private static class TestAnotherGeneralSection extends AdminCommandSection {
    @Override @Nonnull public String printable(){
      return "Another Section";
    }
  }
  private static AdminCommand.Provider mockCommand(  String name,  String summary){
    AdminCommand.Provider commandProvider=mock(AdminCommand.Provider.class);
    when(commandProvider.name()).thenReturn(name);
    when(commandProvider.summary()).thenReturn(summary);
    when(commandProvider.commandSection()).thenReturn(AdminCommandSection.general());
    return commandProvider;
  }
}
