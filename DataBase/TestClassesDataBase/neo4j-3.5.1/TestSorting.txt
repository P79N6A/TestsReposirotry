public class TestSorting extends TraversalTestBase {
  @Test public void sortFriendsByName(){
    String me="me";
    String abraham="Abraham";
    String george="George";
    String dan="Dan";
    String zack="Zack";
    String andreas="Andreas";
    String nicholas="Nicholas";
    String knows="KNOWS";
    createGraph(triplet(me,knows,abraham),triplet(me,knows,george),triplet(george,knows,dan),triplet(me,knows,zack),triplet(zack,knows,andreas),triplet(george,knows,andreas),triplet(andreas,knows,nicholas));
    try (Transaction tx=beginTx()){
      List<Node> nodes=asNodes(abraham,george,dan,zack,andreas,nicholas);
      assertEquals(nodes,Iterables.asCollection(getGraphDb().traversalDescription().evaluator(excludeStartPosition()).sort(endNodeProperty("name")).traverse(getNodeWithName(me)).nodes()));
      tx.success();
    }
   }
  private List<Node> asNodes(  String abraham,  String george,  String dan,  String zack,  String andreas,  String nicholas){
    List<String> allNames=new ArrayList<>(asList(abraham,george,dan,zack,andreas,nicholas));
    Collections.sort(allNames);
    List<Node> all=new ArrayList<>();
    for (    String name : allNames) {
      all.add(getNodeWithName(name));
    }
    return all;
  }
  private static String triplet(  String i,  String type,  String you){
    return i + " " + type+ " "+ you;
  }
}
