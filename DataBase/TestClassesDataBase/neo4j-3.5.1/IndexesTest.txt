public class IndexesTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  private final Register.DoubleLongRegister register=Registers.newDoubleLongRegister();
  @Test public void shouldNotTimeOutIfNoIndexes() throws Throwable {
    final SchemaRead schemaRead=schemaWithIndexes();
    Indexes.awaitResampling(schemaRead,0);
  }
  @Test public void shouldNotTimeOutIfNoUpdates() throws Throwable {
    IndexReference index=mock(IndexReference.class);
    final SchemaRead schemaRead=schemaWithIndexes(index);
    setUpdates(schemaRead,0);
    Indexes.awaitResampling(schemaRead,0);
  }
  @Test public void shouldAwaitIndexResampling() throws Throwable {
    IndexReference index=mock(IndexReference.class);
    final SchemaRead schemaRead=schemaWithIndexes(index);
    setUpdates(schemaRead,1,2,3,0);
    Indexes.awaitResampling(schemaRead,60);
  }
  @Test public void shouldAwaitIndexResamplingForHeavyLoad() throws Throwable {
    IndexReference index=mock(IndexReference.class);
    final SchemaRead schemaRead=schemaWithIndexes(index);
    setUpdates(schemaRead,1,2,3,2);
    Indexes.awaitResampling(schemaRead,60);
  }
  @Test public void shouldTimeout() throws Throwable {
    IndexReference index=mock(IndexReference.class);
    final SchemaRead schemaRead=schemaWithIndexes(index);
    setUpdates(schemaRead,1,1,1);
    exception.expect(TimeoutException.class);
    Indexes.awaitResampling(schemaRead,1);
  }
  private SchemaRead schemaWithIndexes(  IndexReference... indexes){
    final SchemaRead schemaRead=mock(SchemaRead.class);
    when(schemaRead.indexesGetAll()).thenReturn(Iterators.iterator(indexes));
    return schemaRead;
  }
  private void setUpdates(  SchemaRead schemaRead,  int... updates) throws IndexNotFoundKernelException {
    when(schemaRead.indexUpdatesAndSize(any(IndexReference.class),any(Register.DoubleLongRegister.class))).thenAnswer(new Answer<Register.DoubleLongRegister>(){
      private int i;
      @Override public Register.DoubleLongRegister answer(      InvocationOnMock invocationOnMock) throws Throwable {
        Register.DoubleLongRegister r=invocationOnMock.getArgument(1);
        r.write(updates[i],0);
        i=(i + 1) % updates.length;
        return r;
      }
    }
);
  }
}
