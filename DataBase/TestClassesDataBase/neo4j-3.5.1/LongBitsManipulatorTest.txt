public class LongBitsManipulatorTest {
  @Test public void shouldManageTwoSlots(){
    LongBitsManipulator manipulator=new LongBitsManipulator(64 - 29,29);
    long field=0;
    field=manipulator.set(field,0,10);
    field=manipulator.set(field,1,13);
    assertEquals(10,manipulator.get(field,0));
    assertEquals(13,manipulator.get(field,1));
  }
  @Test public void shouldInterpretAllOnesAsMinusOne(){
    LongBitsManipulator manipulator=new LongBitsManipulator(64 - 29,29);
    long field=manipulator.template(true,false);
    assertEquals(-1,manipulator.get(field,0));
  }
  @Test public void shouldHandleMinusOneValues(){
    LongBitsManipulator manipulator=new LongBitsManipulator(1,5,10,16,32);
    long field=0;
    for (int i=0; i < 5; i++) {
      for (int j=0; j < 5; j++) {
        if (j == i) {
          long valueAfterClearWouldHaveChangedIt=manipulator.clear(field,j,true);
          field=manipulator.set(field,j,-1);
          assertEquals("Clear(true) and set -1 produced different results for i:" + i + ", j:"+ j,field,valueAfterClearWouldHaveChangedIt);
        }
 else {
          long valueAfterClearWouldHaveChangedIt=manipulator.clear(field,j,false);
          field=manipulator.set(field,j,0);
          assertEquals("Clear(false) and set 0 produced different results for i:" + i + ", j:"+ j,field,valueAfterClearWouldHaveChangedIt);
        }
      }
      for (int j=0; j < 5; j++) {
        long value=manipulator.get(field,j);
        if (j == i) {
          assertEquals(-1L,value);
        }
 else {
          assertEquals(0L,value);
        }
      }
    }
  }
}
