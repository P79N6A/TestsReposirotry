public class IndexFreshDataReadIT {
  @Rule public EmbeddedDatabaseRule databaseRule=new EmbeddedDatabaseRule();
  private ExecutorService executor=Executors.newCachedThreadPool();
  @After public void tearDown(){
    executor.shutdown();
  }
  @Test public void readLatestIndexDataAfterUsingExhaustedNodeRelationshipIterator() throws Exception {
    try (Transaction transaction=databaseRule.beginTx()){
      addStaffMember("Fry");
      assertEquals(1,countStaff().intValue());
      Node fry=databaseRule.getNodeById(0);
      Iterable<Relationship> fryRelationships=fry.getRelationships();
      assertFalse(fryRelationships.iterator().hasNext());
      addStaffMember("Lila");
      assertEquals(2,countStaff().intValue());
      addStaffMember("Bender");
      assertEquals(3,countStaff().intValue());
    }
   }
  private void addStaffMember(  String name) throws InterruptedException, java.util.concurrent.ExecutionException {
    executor.submit(new CreateNamedNodeTask(name)).get();
  }
  private Number countStaff(){
    try (Result countResult=databaseRule.execute("MATCH (n:staff) return count(n.name) as count")){
      return (Number)countResult.columnAs("count").next();
    }
   }
private class CreateNamedNodeTask implements Runnable {
    private final String name;
    CreateNamedNodeTask(    String name){
      this.name=name;
    }
    @Override public void run(){
      try (Transaction transaction=databaseRule.beginTx()){
        databaseRule.execute("CREATE (n:staff {name:{name}})",map("name",name));
        transaction.success();
      }
     }
  }
}
