public class SchemaIndexWaitingAcceptanceTest {
  private final ControlledPopulationIndexProvider provider=new ControlledPopulationIndexProvider();
  @Rule public final DatabaseRule rule=new ImpermanentDatabaseRule(){
    @Override protected void configure(    GraphDatabaseFactory databaseFactory){
      super.configure(databaseFactory);
      List<KernelExtensionFactory<?>> extensions=Collections.singletonList(singleInstanceIndexProviderFactory("test",provider));
      ((TestGraphDatabaseFactory)databaseFactory).setKernelExtensions(extensions);
    }
  }
.withSetting(default_schema_provider,provider.getProviderDescriptor().name());
  @Test public void shouldTimeoutWaitingForIndexToComeOnline(){
    GraphDatabaseService db=rule.getGraphDatabaseAPI();
    DoubleLatch latch=provider.installPopulationJobCompletionLatch();
    IndexDefinition index;
    try (Transaction tx=db.beginTx()){
      index=db.schema().indexFor(Label.label("Person")).on("name").create();
      tx.success();
    }
     latch.waitForAllToStart();
    try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexOnline(index,1,TimeUnit.MILLISECONDS);
      fail("Expected IllegalStateException to be thrown");
    }
 catch (    IllegalStateException e) {
      assertThat(e.getMessage(),containsString("come online"));
    }
 finally {
      latch.finish();
    }
  }
  @Test public void shouldTimeoutWaitingForAllIndexesToComeOnline(){
    GraphDatabaseService db=rule.getGraphDatabaseAPI();
    DoubleLatch latch=provider.installPopulationJobCompletionLatch();
    try (Transaction tx=db.beginTx()){
      db.schema().indexFor(Label.label("Person")).on("name").create();
      tx.success();
    }
     latch.waitForAllToStart();
    try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(1,TimeUnit.MILLISECONDS);
      fail("Expected IllegalStateException to be thrown");
    }
 catch (    IllegalStateException e) {
      assertThat(e.getMessage(),containsString("come online"));
    }
 finally {
      latch.finish();
    }
  }
}
