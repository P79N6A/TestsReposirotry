private static class StringCompositeIndexCoordinator extends IndexCoordinator {
  StringCompositeIndexCoordinator(  Label indexLabel,  String numberProp1,  String numberProp2,  String stringProp1,  String stringProp2){
    super(indexLabel,numberProp1,numberProp2,stringProp1,stringProp2);
  }
  @Override protected IndexDescriptor extractIndexDescriptor(){
    return TestIndexDescriptorFactory.forLabel(indexedLabelId,stringPropId1,stringPropId2);
  }
  @Override boolean supportRangeQuery(){
    return false;
  }
  @Override NodeValueIndexCursor queryRange(  KernelTransaction ktx) throws IndexNotApplicableKernelException, IndexNotFoundKernelException {
    throw new UnsupportedOperationException();
  }
  @Override NodeValueIndexCursor queryExists(  KernelTransaction ktx) throws KernelException {
    return indexQuery(ktx,indexDescriptor,IndexQuery.exists(stringPropId1),IndexQuery.exists(stringPropId2));
  }
  @Override NodeValueIndexCursor queryExact(  KernelTransaction ktx) throws KernelException {
    return indexQuery(ktx,indexDescriptor,IndexQuery.exact(stringPropId1,stringProp1Values[0]),IndexQuery.exact(stringPropId2,stringProp2Values[0]));
  }
  @Override void assertRangeResult(  List<Long> result){
    throw new UnsupportedOperationException();
  }
  @Override void assertExactResult(  List<Long> actual){
    List<Long> expected=new ArrayList<>();
    expected.add(0L);
    assertSameContent(actual,expected);
  }
  @Override void doCreateIndex(  DatabaseRule db){
    db.schema().indexFor(indexLabel).on(stringProp1).on(stringProp2).create();
  }
}
