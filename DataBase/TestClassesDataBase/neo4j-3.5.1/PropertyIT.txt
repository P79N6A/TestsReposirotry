public class PropertyIT extends KernelIntegrationTest {
  @Test public void shouldListAllPropertyKeys() throws Exception {
    dbWithNoCache();
    Transaction transaction=newTransaction(AnonymousContext.writeToken());
    int prop1=transaction.tokenWrite().propertyKeyGetOrCreateForName("prop1");
    int prop2=transaction.tokenWrite().propertyKeyGetOrCreateForName("prop2");
    Iterator<NamedToken> propIdsBeforeCommit=transaction.tokenRead().propertyKeyGetAllTokens();
    assertThat(asCollection(propIdsBeforeCommit),hasItems(new NamedToken("prop1",prop1),new NamedToken("prop2",prop2)));
    commit();
    transaction=newTransaction();
    Iterator<NamedToken> propIdsAfterCommit=transaction.tokenRead().propertyKeyGetAllTokens();
    assertThat(asCollection(propIdsAfterCommit),hasItems(new NamedToken("prop1",prop1),new NamedToken("prop2",prop2)));
    commit();
  }
  @Test public void shouldNotAllowModifyingPropertiesOnDeletedRelationship() throws Exception {
    Transaction transaction=newTransaction(AnonymousContext.writeToken());
    int prop1=transaction.tokenWrite().propertyKeyGetOrCreateForName("prop1");
    int type=transaction.tokenWrite().relationshipTypeGetOrCreateForName("RELATED");
    long startNodeId=transaction.dataWrite().nodeCreate();
    long endNodeId=transaction.dataWrite().nodeCreate();
    long rel=transaction.dataWrite().relationshipCreate(startNodeId,type,endNodeId);
    transaction.dataWrite().relationshipSetProperty(rel,prop1,Values.stringValue("As"));
    transaction.dataWrite().relationshipDelete(rel);
    try {
      transaction.dataWrite().relationshipRemoveProperty(rel,prop1);
      fail("Should have failed.");
    }
 catch (    EntityNotFoundException e) {
      assertThat(e.getMessage(),equalTo("Unable to load RELATIONSHIP with id " + rel + "."));
    }
    commit();
  }
  @Test public void shouldBeAbleToRemoveResetAndTwiceRemovePropertyOnRelationship() throws Exception {
    Transaction transaction=newTransaction(AnonymousContext.writeToken());
    int prop=transaction.tokenWrite().propertyKeyGetOrCreateForName("foo");
    int type=transaction.tokenWrite().relationshipTypeGetOrCreateForName("RELATED");
    long startNodeId=transaction.dataWrite().nodeCreate();
    long endNodeId=transaction.dataWrite().nodeCreate();
    long rel=transaction.dataWrite().relationshipCreate(startNodeId,type,endNodeId);
    transaction.dataWrite().relationshipSetProperty(rel,prop,Values.of("bar"));
    commit();
    Write write=dataWriteInNewTransaction();
    write.relationshipRemoveProperty(rel,prop);
    write.relationshipSetProperty(rel,prop,Values.of("bar"));
    write.relationshipRemoveProperty(rel,prop);
    write.relationshipRemoveProperty(rel,prop);
    commit();
    transaction=newTransaction();
    assertThat(relationshipGetProperty(transaction,rel,prop),equalTo(Values.NO_VALUE));
    commit();
  }
}
