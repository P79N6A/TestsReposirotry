public class AccessExplicitIndexReadOnlyIT {
  @Rule public final DatabaseRule db=new EmbeddedDatabaseRule().startLazily();
  @Test public void shouldListAndReadExplicitIndexesForReadOnlyDb() throws Exception {
    db.ensureStarted();
    String key="key";
    try (Transaction tx=db.beginTx()){
      Index<Node> nodeIndex=db.index().forNodes("NODE");
      Index<Relationship> relationshipIndex=db.index().forRelationships("RELATIONSHIP");
      for (int i=0; i < 10; i++) {
        Node node=db.createNode();
        Relationship relationship=node.createRelationshipTo(node,MyRelTypes.TEST);
        nodeIndex.add(node,key,String.valueOf(i));
        relationshipIndex.add(relationship,key,String.valueOf(i));
      }
      tx.success();
    }
     db.restartDatabase(GraphDatabaseSettings.read_only.name(),TRUE.toString());
    try (Transaction tx=db.beginTx()){
      Index<Node> nodeIndex=db.index().forNodes(db.index().nodeIndexNames()[0]);
      Index<Relationship> relationshipIndex=db.index().forRelationships(db.index().relationshipIndexNames()[0]);
      for (int i=0; i < 10; i++) {
        assertNotNull(nodeIndex.get(key,String.valueOf(i)).getSingle());
        assertNotNull(relationshipIndex.get(key,String.valueOf(i)).getSingle());
      }
      tx.success();
    }
   }
  @Test public void shouldNotCreateIndexesForReadOnlyDb(){
    db.withSetting(GraphDatabaseSettings.read_only,TRUE.toString());
    try (Transaction tx=db.beginTx()){
      db.index().forNodes("NODE");
      fail("Should've failed");
    }
 catch (    WriteOperationsNotAllowedException e) {
    }
    try (Transaction tx=db.beginTx()){
      db.index().forRelationships("RELATIONSHIP");
      fail("Should've failed");
    }
 catch (    WriteOperationsNotAllowedException e) {
    }
  }
}
