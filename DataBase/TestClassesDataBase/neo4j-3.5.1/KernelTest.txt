public class KernelTest {
  @Test public void shouldNotAllowCreationOfConstraintsWhenInHA() throws Exception {
    GraphDatabaseAPI db=new FakeHaDatabase();
    ThreadToStatementContextBridge stmtBridge=db.getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class);
    try (Transaction ignored=db.beginTx()){
      KernelTransaction ktx=stmtBridge.getKernelTransactionBoundToThisThread(true);
      try {
        ktx.schemaWrite().uniquePropertyConstraintCreate(forLabel(1,1));
        fail("expected exception here");
      }
 catch (      InvalidTransactionTypeKernelException e) {
        assertThat(e.getMessage(),containsString("HA"));
      }
    }
     db.shutdown();
  }
@SuppressWarnings("deprecation") class FakeHaDatabase extends ImpermanentGraphDatabase {
    @Override protected void create(    File storeDir,    Map<String,String> params,    GraphDatabaseFacadeFactory.Dependencies dependencies){
      Function<PlatformModule,AbstractEditionModule> factory=platformModule -> new CommunityEditionModule(platformModule){
        @Override protected SchemaWriteGuard createSchemaWriteGuard(){
          return () -> {
            throw new InvalidTransactionTypeKernelException("Creation or deletion of constraints is not possible while running in a HA cluster. " + "In order to do that, please restart in non-HA mode and propagate the database copy" + "to all slaves");
          }
;
        }
      }
;
      new GraphDatabaseFacadeFactory(DatabaseInfo.COMMUNITY,factory){
        @Override protected PlatformModule createPlatform(        File storeDir,        Config config,        Dependencies dependencies){
          return new ImpermanentPlatformModule(storeDir,config,databaseInfo,dependencies);
        }
      }
.initFacade(storeDir,params,dependencies,this);
    }
  }
}
