public class FieldVisitorTest {
  @Rule public CompilationRule compilationRule=new CompilationRule();
  private ElementVisitor<Stream<CompilationMessage>,Void> fieldVisitor;
  private ElementTestUtils elementTestUtils;
  @Before public void prepare(){
    elementTestUtils=new ElementTestUtils(compilationRule);
    fieldVisitor=new FieldVisitor(compilationRule.getTypes(),compilationRule.getElements(),true);
  }
  @Test public void validates_visibility_of_fields(){
    Stream<VariableElement> fields=elementTestUtils.getFields(GoodContextUse.class);
    Stream<CompilationMessage> result=fields.flatMap(fieldVisitor::visit);
    assertThat(result).isEmpty();
  }
  @Test public void rejects_non_static_non_context_fields(){
    Stream<VariableElement> fields=elementTestUtils.getFields(StaticNonContextMisuse.class);
    Stream<CompilationMessage> result=fields.flatMap(fieldVisitor::visit);
    assertThat(result).extracting(CompilationMessage::getCategory,CompilationMessage::getContents).containsExactly(tuple(Diagnostic.Kind.ERROR,"Field StaticNonContextMisuse#value should be static"));
  }
}
