class FormattedLogTest {
  private static final Supplier<ZonedDateTime> DATE_TIME_SUPPLIER=() -> ZonedDateTime.of(1984,10,26,4,23,24,343000000,ZoneOffset.UTC);
  @Test void logShouldWriteMessage(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    log.info("Terminator 2");
    assertThat(writer.toString(),equalTo(format("1984-10-26 04:23:24.343+0000 INFO [test] Terminator 2%n")));
  }
  @Test void logShouldWriteMessageAndThrowable(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    log.info("Hasta la vista, baby",newThrowable("<message>","<stacktrace>"));
    assertThat(writer.toString(),equalTo(format("1984-10-26 04:23:24.343+0000 INFO [test] Hasta la vista, baby " + "<message>%n<stacktrace>")));
  }
  @Test void logShouldWriteMessageAndThrowableWithNullMessage(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    log.info("Hasta la vista, baby",newThrowable(null,"<stacktrace>"));
    assertThat(writer.toString(),equalTo(format("1984-10-26 04:23:24.343+0000 INFO [test] Hasta la vista, baby%n<stacktrace>")));
  }
  @Test void logShouldWriteMessageWithFormat(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    log.info("I need your %s, your %s and your %s","clothes","boots","motorcycle");
    assertThat(writer.toString(),equalTo(format("1984-10-26 04:23:24.343+0000 INFO [test] I need your clothes, your boots and your " + "motorcycle%n")));
  }
  @Test void logShouldWriteNotFormattedMessageWhenNoParametersGiven(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    log.info("Come with me if you %s to live!",new Object[]{});
    assertThat(writer.toString(),equalTo(format("1984-10-26 04:23:24.343+0000 INFO [test] Come with me if you %%s to live!%n")));
  }
  @Test void logShouldFailAndWriteNothingForInvalidParametersArray(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer);
    assertThrows(IllegalFormatException.class,() -> log.info("%s like me. A T-%d, advanced prototype.","Not","1000",1000));
    assertThat(writer.toString(),equalTo(""));
  }
  @Test void shouldNotWriteLogIfLevelIsHigherThanWritten(){
    StringWriter writer=new StringWriter();
    Log log=newFormattedLog(writer,Level.WARN);
    log.info("I know now why you cry. But it's something I can never do.");
    assertThat(writer.toString(),equalTo(""));
  }
  @Test void shouldAllowLevelToBeChanged(){
    StringWriter writer=new StringWriter();
    FormattedLog log=newFormattedLog(writer,Level.INFO);
    log.info("No, it's when there's nothing wrong with you, but you hurt anyway. You get it?");
    log.setLevel(Level.WARN);
    log.info("I know now why you cry. But it's something I can never do.");
    log.setLevel(Level.DEBUG);
    log.info("There's 215 bones in the human body. That's one.");
    assertThat(writer.toString(),equalTo(format("%s%n%s%n","1984-10-26 04:23:24.343+0000 INFO [test] No, it's when there's nothing wrong with you, but " + "you hurt anyway. You get it?","1984-10-26 04:23:24.343+0000 INFO [test] There's 215 bones in the human body. That's one.")));
  }
  private static FormattedLog newFormattedLog(  StringWriter writer){
    return newFormattedLog(writer,Level.DEBUG);
  }
  private static FormattedLog newFormattedLog(  StringWriter writer,  Level level){
    return FormattedLog.withUTCTimeZone().withCategory("test").withLogLevel(level).withTimeSupplier(DATE_TIME_SUPPLIER).toPrintWriter(Suppliers.singleton(new PrintWriter(writer)));
  }
  private static Throwable newThrowable(  final String message,  final String stackTrace){
    return new Throwable(){
      @Override public void printStackTrace(      PrintWriter s){
        s.append(stackTrace);
      }
      @Override public String getMessage(){
        return message;
      }
    }
;
  }
}
