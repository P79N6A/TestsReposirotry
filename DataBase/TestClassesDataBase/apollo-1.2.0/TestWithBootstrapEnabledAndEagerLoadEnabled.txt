@RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest(classes=ConfigurationWithoutConditionalOnProperty.class) @DirtiesContext public static class TestWithBootstrapEnabledAndEagerLoadEnabled extends AbstractSpringIntegrationTest {
  @BeforeClass public static void beforeClass(){
    doSetUp();
    System.setProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED,"true");
    System.setProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_EAGER_LOAD_ENABLED,"true");
    Config config=mock(Config.class);
    mockConfig(ConfigConsts.NAMESPACE_APPLICATION,config);
  }
  @AfterClass public static void afterClass(){
    System.clearProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
    System.clearProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_EAGER_LOAD_ENABLED);
    doTearDown();
  }
  @Test public void test(){
    List<EnvironmentPostProcessor> processorList=SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,getClass().getClassLoader());
    Boolean containsApollo=!Collections2.filter(processorList,new Predicate<EnvironmentPostProcessor>(){
      @Override public boolean apply(      EnvironmentPostProcessor input){
        return input instanceof ApolloApplicationContextInitializer;
      }
    }
).isEmpty();
    Assert.assertTrue(containsApollo);
  }
}
