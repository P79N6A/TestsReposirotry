/** 
 * @author Jason Song(song_s@ctrip.com)
 */
public class ReleaseKeyGeneratorTest {
  private static final Logger logger=LoggerFactory.getLogger(ReleaseKeyGeneratorTest.class);
  @Test public void testGenerateReleaseKey() throws Exception {
    String someAppId="someAppId";
    String someCluster="someCluster";
    String someNamespace="someNamespace";
    String anotherAppId="anotherAppId";
    Namespace namespace=MockBeanFactory.mockNamespace(someAppId,someCluster,someNamespace);
    Namespace anotherNamespace=MockBeanFactory.mockNamespace(anotherAppId,someCluster,someNamespace);
    int generateTimes=50000;
    Set<String> releaseKeys=Sets.newConcurrentHashSet();
    ExecutorService executorService=Executors.newFixedThreadPool(2);
    CountDownLatch latch=new CountDownLatch(1);
    executorService.submit(generateReleaseKeysTask(namespace,releaseKeys,generateTimes,latch));
    executorService.submit(generateReleaseKeysTask(anotherNamespace,releaseKeys,generateTimes,latch));
    latch.countDown();
    executorService.shutdown();
    executorService.awaitTermination(10,TimeUnit.SECONDS);
    assertEquals(generateTimes * 2,releaseKeys.size());
  }
  private Runnable generateReleaseKeysTask(  Namespace namespace,  Set<String> releaseKeys,  int generateTimes,  CountDownLatch latch){
    return () -> {
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
      }
      for (int i=0; i < generateTimes; i++) {
        releaseKeys.add(ReleaseKeyGenerator.generateReleaseKey(namespace));
      }
    }
;
  }
}
