/** 
 * @author Jason Song(song_s@ctrip.com)
 */
@RunWith(MockitoJUnitRunner.class) public class ConsumerAuditUtilTest {
  private ConsumerAuditUtil consumerAuditUtil;
  @Mock private ConsumerService consumerService;
  @Mock private HttpServletRequest request;
  private long batchTimeout=50;
  private TimeUnit batchTimeUnit=TimeUnit.MILLISECONDS;
  @Before public void setUp() throws Exception {
    consumerAuditUtil=new ConsumerAuditUtil();
    ReflectionTestUtils.setField(consumerAuditUtil,"consumerService",consumerService);
    ReflectionTestUtils.setField(consumerAuditUtil,"BATCH_TIMEOUT",batchTimeout);
    ReflectionTestUtils.setField(consumerAuditUtil,"BATCH_TIMEUNIT",batchTimeUnit);
    consumerAuditUtil.afterPropertiesSet();
  }
  @After public void tearDown() throws Exception {
    consumerAuditUtil.stopAudit();
  }
  @Test public void audit() throws Exception {
    long someConsumerId=1;
    String someUri="someUri";
    String someQuery="someQuery";
    String someMethod="someMethod";
    when(request.getRequestURI()).thenReturn(someUri);
    when(request.getQueryString()).thenReturn(someQuery);
    when(request.getMethod()).thenReturn(someMethod);
    SettableFuture<List<ConsumerAudit>> result=SettableFuture.create();
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        Object[] args=invocation.getArguments();
        result.set((List<ConsumerAudit>)args[0]);
        return null;
      }
    }
).when(consumerService).createConsumerAudits(anyCollectionOf(ConsumerAudit.class));
    consumerAuditUtil.audit(request,someConsumerId);
    List<ConsumerAudit> audits=result.get(batchTimeout * 5,batchTimeUnit);
    assertEquals(1,audits.size());
    ConsumerAudit audit=audits.get(0);
    assertEquals(String.format("%s?%s",someUri,someQuery),audit.getUri());
    assertEquals(someMethod,audit.getMethod());
    assertEquals(someConsumerId,audit.getConsumerId());
  }
}
