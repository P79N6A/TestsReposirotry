public class AdminServiceTransactionTest extends AbstractIntegrationTest {
  @Autowired AdminService adminService;
  @Autowired private AppRepository appRepository;
  @Autowired private AppNamespaceRepository appNamespaceRepository;
  @Autowired private NamespaceRepository namespaceRepository;
  @Autowired private ClusterRepository clusterRepository;
  @BeforeTransaction public void verifyInitialDatabaseState(){
    for (    App app : appRepository.findAll()) {
      System.out.println(app.getAppId());
    }
    Assert.assertEquals(0,appRepository.count());
    Assert.assertEquals(7,appNamespaceRepository.count());
    Assert.assertEquals(0,namespaceRepository.count());
    Assert.assertEquals(0,clusterRepository.count());
  }
  @Before public void setUpTestDataWithinTransaction(){
    Assert.assertEquals(0,appRepository.count());
    Assert.assertEquals(7,appNamespaceRepository.count());
    Assert.assertEquals(0,namespaceRepository.count());
    Assert.assertEquals(0,clusterRepository.count());
  }
  @Test @Rollback public void modifyDatabaseWithinTransaction(){
    String appId="someAppId";
    App app=new App();
    app.setAppId(appId);
    app.setName("someAppName");
    String owner="someOwnerName";
    app.setOwnerName(owner);
    app.setOwnerEmail("someOwnerName@ctrip.com");
    app.setDataChangeCreatedBy(owner);
    app.setDataChangeLastModifiedBy(owner);
    app.setDataChangeCreatedTime(new Date());
    adminService.createNewApp(app);
  }
  @After public void tearDownWithinTransaction(){
    Assert.assertEquals(1,appRepository.count());
    Assert.assertEquals(8,appNamespaceRepository.count());
    Assert.assertEquals(1,namespaceRepository.count());
    Assert.assertEquals(1,clusterRepository.count());
  }
  @AfterTransaction public void verifyFinalDatabaseState(){
    Assert.assertEquals(0,appRepository.count());
    Assert.assertEquals(7,appNamespaceRepository.count());
    Assert.assertEquals(0,namespaceRepository.count());
    Assert.assertEquals(0,clusterRepository.count());
  }
}
