@RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest(classes=ConfigurationWithConditionalOnProperty.class) @DirtiesContext public static class TestWithBootstrapEnabledAndNamespacesAndConditionalOn extends AbstractSpringIntegrationTest {
  @Autowired(required=false) private TestBean testBean;
  @BeforeClass public static void beforeClass() throws Exception {
    doSetUp();
    System.setProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED,"true");
    System.setProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_NAMESPACES,String.format("%s, %s",ConfigConsts.NAMESPACE_APPLICATION,FX_APOLLO_NAMESPACE));
    Config config=mock(Config.class);
    Config anotherConfig=mock(Config.class);
    when(config.getPropertyNames()).thenReturn(Sets.newHashSet(TEST_BEAN_CONDITIONAL_ON_KEY));
    when(config.getProperty(eq(TEST_BEAN_CONDITIONAL_ON_KEY),anyString())).thenReturn(Boolean.TRUE.toString());
    mockConfig(ConfigConsts.NAMESPACE_APPLICATION,anotherConfig);
    mockConfig(FX_APOLLO_NAMESPACE,config);
  }
  @AfterClass public static void afterClass() throws Exception {
    System.clearProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
    System.clearProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_NAMESPACES);
    doTearDown();
  }
  @Test public void test() throws Exception {
    Assert.assertNotNull(testBean);
    Assert.assertTrue(testBean.execute());
  }
}
