@RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest(classes=ConfigurationWithConditionalOnProperty.class) @DirtiesContext public static class TestWithBootstrapEnabledAndDefaultNamespacesAndConditionalOn extends AbstractSpringIntegrationTest {
  private static final String someProperty="someProperty";
  private static final String someValue="someValue";
  @Autowired(required=false) private TestBean testBean;
  @ApolloConfig private Config config;
  @Value("${" + someProperty + "}") private String someInjectedValue;
  private static Config mockedConfig;
  @BeforeClass public static void beforeClass() throws Exception {
    doSetUp();
    System.setProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED,"true");
    mockedConfig=mock(Config.class);
    when(mockedConfig.getPropertyNames()).thenReturn(Sets.newHashSet(TEST_BEAN_CONDITIONAL_ON_KEY,someProperty));
    when(mockedConfig.getProperty(eq(TEST_BEAN_CONDITIONAL_ON_KEY),anyString())).thenReturn(Boolean.TRUE.toString());
    when(mockedConfig.getProperty(eq(someProperty),anyString())).thenReturn(someValue);
    mockConfig(ConfigConsts.NAMESPACE_APPLICATION,mockedConfig);
  }
  @AfterClass public static void afterClass() throws Exception {
    System.clearProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
    doTearDown();
  }
  @Test public void test() throws Exception {
    Assert.assertNotNull(testBean);
    Assert.assertTrue(testBean.execute());
    Assert.assertEquals(mockedConfig,config);
    Assert.assertEquals(someValue,someInjectedValue);
  }
}
