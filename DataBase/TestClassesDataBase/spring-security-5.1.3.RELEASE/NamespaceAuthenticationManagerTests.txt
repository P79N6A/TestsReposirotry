/** 
 * @author Rob Winch
 */
public class NamespaceAuthenticationManagerTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void authenticationMangerWhenDefaultThenEraseCredentialsIsTrue() throws Exception {
    this.spring.register(EraseCredentialsTrueDefaultConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(a -> assertThat(a.getCredentials()).isNull()));
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(a -> assertThat(a.getCredentials()).isNull()));
  }
@EnableWebSecurity static class EraseCredentialsTrueDefaultConfig extends WebSecurityConfigurerAdapter {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
  }
  @Test public void authenticationMangerWhenEraseCredentialsIsFalseThenCredentialsNotNull() throws Exception {
    this.spring.register(EraseCredentialsFalseConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(a -> assertThat(a.getCredentials()).isNotNull()));
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(a -> assertThat(a.getCredentials()).isNotNull()));
  }
@EnableWebSecurity static class EraseCredentialsFalseConfig extends WebSecurityConfigurerAdapter {
    @Override public void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.eraseCredentials(false).inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
  }
  @Test public void authenticationManagerWhenGlobalAndEraseCredentialsIsFalseThenCredentialsNotNull() throws Exception {
    this.spring.register(GlobalEraseCredentialsFalseConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(a -> assertThat(a.getCredentials()).isNotNull()));
  }
@EnableWebSecurity static class GlobalEraseCredentialsFalseConfig extends WebSecurityConfigurerAdapter {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.eraseCredentials(false).inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
  }
}
