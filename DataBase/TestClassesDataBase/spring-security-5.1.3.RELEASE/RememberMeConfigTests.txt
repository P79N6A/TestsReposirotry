/** 
 * @author Luke Taylor
 * @author Rob Winch
 * @author Oliver Becker
 */
public class RememberMeConfigTests {
  private static final String CONFIG_LOCATION_PREFIX="classpath:org/springframework/security/config/http/RememberMeConfigTests";
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void requestWithRememberMeWhenUsingCustomTokenRepositoryThenAutomaticallyReauthenticates() throws Exception {
    this.spring.configLocations(this.xml("WithTokenRepository")).autowire();
    MvcResult result=this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,false)).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
    JdbcTemplate template=this.spring.getContext().getBean(JdbcTemplate.class);
    int count=template.queryForObject("select count(*) from persistent_logins",int.class);
    assertThat(count).isEqualTo(1);
  }
  @Test public void requestWithRememberMeWhenUsingCustomDataSourceThenAutomaticallyReauthenticates() throws Exception {
    this.spring.configLocations(this.xml("WithDataSource")).autowire();
    TestDataSource dataSource=this.spring.getContext().getBean(TestDataSource.class);
    JdbcTemplate template=new JdbcTemplate(dataSource);
    template.execute(CREATE_TABLE_SQL);
    MvcResult result=this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,false)).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
    int count=template.queryForObject("select count(*) from persistent_logins",int.class);
    assertThat(count).isEqualTo(1);
  }
  @Test public void requestWithRememberMeWhenUsingAuthenticationSuccessHandlerThenInvokesHandler() throws Exception {
    this.spring.configLocations(this.xml("WithAuthenticationSuccessHandler")).autowire();
    TestDataSource dataSource=this.spring.getContext().getBean(TestDataSource.class);
    JdbcTemplate template=new JdbcTemplate(dataSource);
    template.execute(CREATE_TABLE_SQL);
    MvcResult result=this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,false)).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(redirectedUrl("/target"));
    int count=template.queryForObject("select count(*) from persistent_logins",int.class);
    assertThat(count).isEqualTo(1);
  }
  @Test public void requestWithRememberMeWhenUsingCustomRememberMeServicesThenAuthenticates() throws Exception {
    this.spring.configLocations(this.xml("WithServicesRef")).autowire();
    MvcResult result=this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,false)).andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,5000)).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
    this.mvc.perform(post("/logout").cookie(cookie).with(csrf())).andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,0)).andReturn();
  }
  @Test public void logoutWhenUsingRememberMeDefaultsThenCookieIsCancelled() throws Exception {
    this.spring.configLocations(this.xml("DefaultConfig")).autowire();
    MvcResult result=this.rememberAuthentication("user","password").andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(post("/logout").cookie(cookie).with(csrf())).andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,0));
  }
  @Test public void requestWithRememberMeWhenTokenValidityIsConfiguredThenCookieReflectsCorrectExpiration() throws Exception {
    this.spring.configLocations(this.xml("TokenValidity")).autowire();
    MvcResult result=this.rememberAuthentication("user","password").andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,10000)).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
  }
  @Test public void requestWithRememberMeWhenTokenValidityIsNegativeThenCookieReflectsCorrectExpiration() throws Exception {
    this.spring.configLocations(this.xml("NegativeTokenValidity")).autowire();
    this.rememberAuthentication("user","password").andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,-1));
  }
  @Test public void configureWhenUsingDataSourceAndANegativeTokenValidityThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("NegativeTokenValidityWithDataSource")).autowire()).isInstanceOf(FatalBeanException.class);
  }
  @Test public void requestWithRememberMeWhenTokenValidityIsResolvedByPropertyPlaceholderThenCookieReflectsCorrectExpiration() throws Exception {
    this.spring.configLocations(this.xml("Sec2165")).autowire();
    this.rememberAuthentication("user","password").andExpect(cookie().maxAge(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,30));
  }
  @Test public void requestWithRememberMeWhenUseSecureCookieIsTrueThenCookieIsSecure() throws Exception {
    this.spring.configLocations(this.xml("SecureCookie")).autowire();
    this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,true));
  }
  /** 
 * SEC-1827
 */
  @Test public void requestWithRememberMeWhenUseSecureCookieIsFalseThenCookieIsNotSecure() throws Exception {
    this.spring.configLocations(this.xml("Sec1827")).autowire();
    this.rememberAuthentication("user","password").andExpect(cookie().secure(SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY,false));
  }
  @Test public void configureWhenUsingPersistentTokenRepositoryAndANegativeTokenValidityThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("NegativeTokenValidityWithPersistentRepository")).autowire()).isInstanceOf(BeanDefinitionParsingException.class);
  }
  @Test public void requestWithRememberMeWhenUsingCustomUserDetailsServiceThenInvokesThisUserDetailsService() throws Exception {
    this.spring.configLocations(this.xml("WithUserDetailsService")).autowire();
    UserDetailsService userDetailsService=this.spring.getContext().getBean(UserDetailsService.class);
    when(userDetailsService.loadUserByUsername("user")).thenAnswer((invocation) -> new User("user","{noop}password",Collections.emptyList()));
    MvcResult result=this.rememberAuthentication("user","password").andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
    verify(userDetailsService,atLeastOnce()).loadUserByUsername("user");
  }
  /** 
 * SEC-742
 */
  @Test public void requestWithRememberMeWhenExcludingBasicAuthenticationFilterThenStillReauthenticates() throws Exception {
    this.spring.configLocations(this.xml("Sec742")).autowire();
    MvcResult result=this.mvc.perform(login("user","password").param("remember-me","true").with(csrf())).andExpect(redirectedUrl("/messageList.html")).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
  }
  /** 
 * SEC-2119
 */
  @Test public void requestWithRememberMeWhenUsingCustomRememberMeParameterThenReauthenticates() throws Exception {
    this.spring.configLocations(this.xml("WithRememberMeParameter")).autowire();
    MvcResult result=this.mvc.perform(login("user","password").param("custom-remember-me-parameter","true").with(csrf())).andExpect(redirectedUrl("/")).andReturn();
    Cookie cookie=rememberMeCookie(result);
    this.mvc.perform(get("/authenticated").cookie(cookie)).andExpect(status().isOk());
  }
  @Test public void configureWhenUsingRememberMeParameterAndServicesRefThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("WithRememberMeParameterAndServicesRef")).autowire()).isInstanceOf(BeanDefinitionParsingException.class);
  }
  /** 
 * SEC-2826
 */
  @Test public void authenticateWhenUsingCustomRememberMeCookieNameThenIssuesCookieWithThatName() throws Exception {
    this.spring.configLocations(this.xml("WithRememberMeCookie")).autowire();
    this.rememberAuthentication("user","password").andExpect(cookie().exists("custom-remember-me-cookie"));
  }
  /** 
 * SEC-2826
 */
  @Test public void configureWhenUsingRememberMeCookieAndServicesRefThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("WithRememberMeCookieAndServicesRef")).autowire()).isInstanceOf(BeanDefinitionParsingException.class).hasMessageContaining("Configuration problem: services-ref can't be used in combination with attributes " + "token-repository-ref,data-source-ref, user-service-ref, token-validity-seconds, use-secure-cookie, " + "remember-me-parameter or remember-me-cookie");
  }
@RestController static class BasicController {
    @GetMapping("/authenticated") String ok(){
      return "ok";
    }
  }
  private ResultActions rememberAuthentication(  String username,  String password) throws Exception {
    return this.mvc.perform(login(username,password).param(DEFAULT_PARAMETER,"true").with(csrf())).andExpect(redirectedUrl("/"));
  }
  private static MockHttpServletRequestBuilder login(  String username,  String password){
    return post("/login").param("username",username).param("password",password);
  }
  private static Cookie rememberMeCookie(  MvcResult result){
    return result.getResponse().getCookie("remember-me");
  }
  private String xml(  String configName){
    return CONFIG_LOCATION_PREFIX + "-" + configName+ ".xml";
  }
}
