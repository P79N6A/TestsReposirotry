/** 
 * @author Josh Cummings
 */
@RunWith(SpringJUnit4ClassRunner.class) @SecurityTestExecutionListeners public class ExceptionHandlingConfigurerAccessDeniedHandlerTests {
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test @WithMockUser(roles="ANYTHING") public void getWhenAccessDeniedOverriddenThenCustomizesResponseByRequest() throws Exception {
    this.spring.register(RequestMatcherBasedAccessDeniedHandlerConfig.class).autowire();
    this.mvc.perform(get("/hello")).andExpect(status().isIAmATeapot());
    this.mvc.perform(get("/goodbye")).andExpect(status().isForbidden());
  }
@EnableWebSecurity static class RequestMatcherBasedAccessDeniedHandlerConfig extends WebSecurityConfigurerAdapter {
    AccessDeniedHandler teapotDeniedHandler=(request,response,exception) -> response.setStatus(HttpStatus.I_AM_A_TEAPOT.value());
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().denyAll().and().exceptionHandling().defaultAccessDeniedHandlerFor(this.teapotDeniedHandler,new AntPathRequestMatcher("/hello/**")).defaultAccessDeniedHandlerFor(new AccessDeniedHandlerImpl(),AnyRequestMatcher.INSTANCE);
    }
  }
  @Test @WithMockUser(roles="ANYTHING") public void getWhenAccessDeniedOverriddenByOnlyOneHandlerThenAllRequestsUseThatHandler() throws Exception {
    this.spring.register(SingleRequestMatcherAccessDeniedHandlerConfig.class).autowire();
    this.mvc.perform(get("/hello")).andExpect(status().isIAmATeapot());
    this.mvc.perform(get("/goodbye")).andExpect(status().isIAmATeapot());
  }
@EnableWebSecurity static class SingleRequestMatcherAccessDeniedHandlerConfig extends WebSecurityConfigurerAdapter {
    AccessDeniedHandler teapotDeniedHandler=(request,response,exception) -> response.setStatus(HttpStatus.I_AM_A_TEAPOT.value());
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().denyAll().and().exceptionHandling().defaultAccessDeniedHandlerFor(this.teapotDeniedHandler,new AntPathRequestMatcher("/hello/**"));
    }
  }
}
