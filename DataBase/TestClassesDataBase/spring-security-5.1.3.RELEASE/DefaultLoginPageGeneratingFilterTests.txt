/** 
 * @author Luke Taylor
 * @since 3.0
 */
public class DefaultLoginPageGeneratingFilterTests {
  private FilterChain chain=mock(FilterChain.class);
  @Test public void generatingPageWithAuthenticationProcessingFilterOnlyIsSuccessFul() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    filter.doFilter(new MockHttpServletRequest("GET","/login"),new MockHttpServletResponse(),chain);
    filter.doFilter(new MockHttpServletRequest("GET","/login;pathparam=unused"),new MockHttpServletResponse(),chain);
  }
  @Test public void generatesForGetLogin() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(new MockHttpServletRequest("GET","/login"),response,chain);
    assertThat(response.getContentAsString()).isNotEmpty();
  }
  @Test public void generatesForPostLogin() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/login");
    filter.doFilter(request,response,chain);
    assertThat(response.getContentAsString()).isEmpty();
  }
  @Test public void generatesForNotEmptyContextLogin() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/context/login");
    request.setContextPath("/context");
    filter.doFilter(request,response,chain);
    assertThat(response.getContentAsString()).isNotEmpty();
  }
  @Test public void generatesForGetApiLogin() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(new MockHttpServletRequest("GET","/api/login"),response,chain);
    assertThat(response.getContentAsString()).isEmpty();
  }
  @Test public void generatesForWithQueryMatch() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/login");
    request.setQueryString("error");
    filter.doFilter(request,response,chain);
    assertThat(response.getContentAsString()).isNotEmpty();
  }
  @Test public void generatesForWithContentLength() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    filter.setOauth2LoginEnabled(true);
    filter.setOauth2AuthenticationUrlToClientName(Collections.singletonMap("XYUU","\u8109\u640F\u7F51\u5E10\u6237\u767B\u5F55"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/login");
    filter.doFilter(request,response,chain);
    assertThat(response.getContentLength() == response.getContentAsString().getBytes(response.getCharacterEncoding()).length).isTrue();
  }
  @Test public void generatesForWithQueryNoMatch() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/login");
    request.setQueryString("not");
    filter.doFilter(request,response,chain);
    assertThat(response.getContentAsString()).isEmpty();
  }
  @Test public void generatingPageWithOpenIdFilterOnlyIsSuccessFul() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new MockProcessingFilter());
    filter.doFilter(new MockHttpServletRequest("GET","/login"),new MockHttpServletResponse(),chain);
  }
@SuppressWarnings("unused") private static class MockProcessingFilter extends AbstractAuthenticationProcessingFilter {
    MockProcessingFilter(){
      super("/someurl");
    }
    @Override public Authentication attemptAuthentication(    HttpServletRequest request,    HttpServletResponse response) throws AuthenticationException {
      return null;
    }
    public String getClaimedIdentityFieldName(){
      return "unused";
    }
  }
  @Test public void handlesNonIso8859CharsInErrorMessage() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter(new UsernamePasswordAuthenticationFilter());
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/login");
    request.addParameter("login_error","true");
    MessageSourceAccessor messages=SpringSecurityMessageSource.getAccessor();
    String message=messages.getMessage("AbstractUserDetailsAuthenticationProvider.badCredentials","Bad credentials",Locale.KOREA);
    request.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION,new BadCredentialsException(message));
    filter.doFilter(request,new MockHttpServletResponse(),chain);
  }
  @Test public void generatesForOAuth2LoginAndEscapesClientName() throws Exception {
    DefaultLoginPageGeneratingFilter filter=new DefaultLoginPageGeneratingFilter();
    filter.setLoginPageUrl(DefaultLoginPageGeneratingFilter.DEFAULT_LOGIN_PAGE_URL);
    filter.setOauth2LoginEnabled(true);
    String clientName="Google < > \" \' &";
    filter.setOauth2AuthenticationUrlToClientName(Collections.singletonMap("/oauth2/authorization/google",clientName));
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(new MockHttpServletRequest("GET","/login"),response,chain);
    assertThat(response.getContentAsString()).contains("<a href=\"/oauth2/authorization/google\">Google &lt; &gt; &quot; &#39; &amp;</a>");
  }
}
