@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @WebAppConfiguration public class SecurityMockMvcRequestPostProcessorsCsrfTests {
  @Autowired WebApplicationContext wac;
  @Autowired TheController controller;
  @Autowired FilterChainProxy springSecurityFilterChain;
  MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();
  }
  @Test public void csrfWithStandalone() throws Exception {
    this.mockMvc=MockMvcBuilders.standaloneSetup(this.controller).apply(springSecurity(this.springSecurityFilterChain)).build();
    this.mockMvc.perform(post("/").with(csrf())).andExpect(status().is2xxSuccessful()).andExpect(csrfAsParam());
  }
  @Test public void csrfWithParam() throws Exception {
    this.mockMvc.perform(post("/").with(csrf())).andExpect(status().is2xxSuccessful()).andExpect(csrfAsParam());
  }
  @Test public void csrfWithHeader() throws Exception {
    this.mockMvc.perform(post("/").with(csrf().asHeader())).andExpect(status().is2xxSuccessful()).andExpect(csrfAsHeader());
  }
  @Test public void csrfWithInvalidParam() throws Exception {
    this.mockMvc.perform(post("/").with(csrf().useInvalidToken())).andExpect(status().isForbidden()).andExpect(csrfAsParam());
  }
  @Test public void csrfWithInvalidHeader() throws Exception {
    this.mockMvc.perform(post("/").with(csrf().asHeader().useInvalidToken())).andExpect(status().isForbidden()).andExpect(csrfAsHeader());
  }
  @Test public void csrfWithWrappedRequest() throws Exception {
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).addFilter(new SessionRepositoryFilter()).apply(springSecurity()).build();
    this.mockMvc.perform(post("/").with(csrf())).andExpect(status().is2xxSuccessful()).andExpect(csrfAsParam());
  }
  @Test public void csrfWhenUsedThenDoesNotImpactOriginalRepository() throws Exception {
    this.mockMvc.perform(post("/").with(csrf()));
    MockHttpServletRequest request=new MockHttpServletRequest();
    HttpSessionCsrfTokenRepository repo=new HttpSessionCsrfTokenRepository();
    CsrfToken token=repo.generateToken(request);
    repo.saveToken(token,request,new MockHttpServletResponse());
    MockHttpServletRequestBuilder requestWithCsrf=post("/").param(token.getParameterName(),token.getToken()).session((MockHttpSession)request.getSession());
    this.mockMvc.perform(requestWithCsrf).andExpect(status().isOk());
  }
  public static ResultMatcher csrfAsParam(){
    return new CsrfParamResultMatcher();
  }
static class CsrfParamResultMatcher implements ResultMatcher {
    @Override public void match(    MvcResult result) throws Exception {
      MockHttpServletRequest request=result.getRequest();
      assertThat(request.getParameter("_csrf")).isNotNull();
      assertThat(request.getHeader("X-CSRF-TOKEN")).isNull();
    }
  }
  public static ResultMatcher csrfAsHeader(){
    return new CsrfHeaderResultMatcher();
  }
static class CsrfHeaderResultMatcher implements ResultMatcher {
    @Override public void match(    MvcResult result) throws Exception {
      MockHttpServletRequest request=result.getRequest();
      assertThat(request.getParameter("_csrf")).isNull();
      assertThat(request.getHeader("X-CSRF-TOKEN")).isNotNull();
    }
  }
static class SessionRepositoryFilter extends OncePerRequestFilter {
    @Override protected void doFilterInternal(    HttpServletRequest request,    HttpServletResponse response,    FilterChain filterChain) throws ServletException, IOException {
      filterChain.doFilter(new SessionRequestWrapper(request),response);
    }
static class SessionRequestWrapper extends HttpServletRequestWrapper {
      HttpSession session=new MockHttpSession();
      public SessionRequestWrapper(      HttpServletRequest request){
        super(request);
      }
      @Override public HttpSession getSession(      boolean create){
        return this.session;
      }
      @Override public HttpSession getSession(){
        return this.session;
      }
    }
  }
@EnableWebSecurity static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
@RestController static class TheController {
      @RequestMapping("/") String index(){
        return "Hi";
      }
    }
  }
}
