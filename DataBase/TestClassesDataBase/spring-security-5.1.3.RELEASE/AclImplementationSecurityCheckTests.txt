/** 
 * Test class for  {@link AclAuthorizationStrategyImpl} and {@link AclImpl} securitychecks.
 * @author Andrei Stefan
 */
public class AclImplementationSecurityCheckTests {
  private static final String TARGET_CLASS="org.springframework.security.acls.TargetObject";
  @Before public void setUp() throws Exception {
    SecurityContextHolder.clearContext();
  }
  @After public void tearDown() throws Exception {
    SecurityContextHolder.clearContext();
  }
  @Test public void testSecurityCheckNoACEs() throws Exception {
    Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL","ROLE_AUDITING","ROLE_OWNERSHIP");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,new Long(100));
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    Acl acl=new AclImpl(identity,new Long(1),aclAuthorizationStrategy,new ConsoleAuditLogger());
    aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_GENERAL);
    aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_AUDITING);
    aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    AclAuthorizationStrategy aclAuthorizationStrategy2=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_ONE"),new SimpleGrantedAuthority("ROLE_TWO"),new SimpleGrantedAuthority("ROLE_THREE"));
    Acl acl2=new AclImpl(identity,new Long(1),aclAuthorizationStrategy2,new ConsoleAuditLogger());
    try {
      aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_GENERAL);
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_AUDITING);
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
  }
  @Test public void testSecurityCheckWithMultipleACEs() throws Exception {
    Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,new Long(100));
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    MutableAcl aclFirstDeny=new AclImpl(identity,new Long(1),aclAuthorizationStrategy,new ConsoleAuditLogger());
    aclFirstDeny.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),false);
    aclAuthorizationStrategy.securityCheck(aclFirstDeny,AclAuthorizationStrategy.CHANGE_GENERAL);
    try {
      aclAuthorizationStrategy.securityCheck(aclFirstDeny,AclAuthorizationStrategy.CHANGE_AUDITING);
      fail("It should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
    try {
      aclAuthorizationStrategy.securityCheck(aclFirstDeny,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
      fail("It should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
    aclFirstDeny.insertAce(1,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
    try {
      aclAuthorizationStrategy.securityCheck(aclFirstDeny,AclAuthorizationStrategy.CHANGE_AUDITING);
      fail("It should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
    MutableAcl aclFirstAllow=new AclImpl(identity,new Long(1),aclAuthorizationStrategy,new ConsoleAuditLogger());
    aclFirstAllow.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
    aclAuthorizationStrategy.securityCheck(aclFirstAllow,AclAuthorizationStrategy.CHANGE_AUDITING);
    aclFirstAllow.insertAce(1,BasePermission.ADMINISTRATION,new PrincipalSid(auth),false);
    try {
      aclAuthorizationStrategy.securityCheck(aclFirstAllow,AclAuthorizationStrategy.CHANGE_AUDITING);
    }
 catch (    AccessDeniedException notExpected) {
      fail("It shouldn't have thrown AccessDeniedException");
    }
    MutableAcl aclNoACE=new AclImpl(identity,new Long(1),aclAuthorizationStrategy,new ConsoleAuditLogger());
    try {
      aclAuthorizationStrategy.securityCheck(aclNoACE,AclAuthorizationStrategy.CHANGE_AUDITING);
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      aclAuthorizationStrategy.securityCheck(aclNoACE,AclAuthorizationStrategy.CHANGE_GENERAL);
    }
 catch (    NotFoundException expected) {
      fail("It shouldn't have thrown NotFoundException");
    }
  }
  @Test public void testSecurityCheckWithInheritableACEs() throws Exception {
    Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,100);
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_ONE"),new SimpleGrantedAuthority("ROLE_TWO"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    MutableAcl parentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
    parentAcl.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
    MutableAcl childAcl=new AclImpl(identity,2,aclAuthorizationStrategy,new ConsoleAuditLogger());
    try {
      aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    childAcl.setParent(parentAcl);
    childAcl.setEntriesInheriting(true);
    try {
      aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    }
 catch (    NotFoundException expected) {
      fail("It shouldn't have thrown NotFoundException");
    }
    MutableAcl rootParentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
    parentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
    rootParentAcl.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
    parentAcl.setEntriesInheriting(true);
    parentAcl.setParent(rootParentAcl);
    childAcl.setParent(parentAcl);
    try {
      aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    }
 catch (    NotFoundException expected) {
      fail("It shouldn't have thrown NotFoundException");
    }
  }
  @Test public void testSecurityCheckPrincipalOwner() throws Exception {
    Authentication auth=new TestingAuthenticationToken("user","password","ROLE_ONE");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,100);
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    Acl acl=new AclImpl(identity,1,aclAuthorizationStrategy,new DefaultPermissionGrantingStrategy(new ConsoleAuditLogger()),null,null,false,new PrincipalSid(auth));
    try {
      aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_GENERAL);
    }
 catch (    AccessDeniedException notExpected) {
      fail("It shouldn't have thrown AccessDeniedException");
    }
    try {
      aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_AUDITING);
      fail("It shouldn't have thrown AccessDeniedException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    }
 catch (    AccessDeniedException notExpected) {
      fail("It shouldn't have thrown AccessDeniedException");
    }
  }
}
