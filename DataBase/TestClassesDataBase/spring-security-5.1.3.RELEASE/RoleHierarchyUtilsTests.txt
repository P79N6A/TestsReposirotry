/** 
 * Tests for  {@link RoleHierarchyUtils}.
 * @author Joe Grandja
 */
public class RoleHierarchyUtilsTests {
  private static final String EOL=System.lineSeparator();
  @Test public void roleHierarchyFromMapWhenMapValidThenConvertsCorrectly() throws Exception {
    String expectedRoleHierarchy="ROLE_A > ROLE_B" + EOL + "ROLE_A > ROLE_C"+ EOL+ "ROLE_B > ROLE_D"+ EOL+ "ROLE_C > ROLE_D"+ EOL;
    Map<String,List<String>> roleHierarchyMap=new TreeMap<String,List<String>>();
    roleHierarchyMap.put("ROLE_A",asList("ROLE_B","ROLE_C"));
    roleHierarchyMap.put("ROLE_B",asList("ROLE_D"));
    roleHierarchyMap.put("ROLE_C",asList("ROLE_D"));
    String roleHierarchy=RoleHierarchyUtils.roleHierarchyFromMap(roleHierarchyMap);
    assertThat(roleHierarchy).isEqualTo(expectedRoleHierarchy);
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenMapNullThenThrowsIllegalArgumentException() throws Exception {
    RoleHierarchyUtils.roleHierarchyFromMap(null);
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenMapEmptyThenThrowsIllegalArgumentException() throws Exception {
    RoleHierarchyUtils.roleHierarchyFromMap(Collections.<String,List<String>>emptyMap());
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenRoleNullThenThrowsIllegalArgumentException() throws Exception {
    Map<String,List<String>> roleHierarchyMap=new HashMap<String,List<String>>();
    roleHierarchyMap.put(null,asList("ROLE_B","ROLE_C"));
    RoleHierarchyUtils.roleHierarchyFromMap(roleHierarchyMap);
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenRoleEmptyThenThrowsIllegalArgumentException() throws Exception {
    Map<String,List<String>> roleHierarchyMap=new HashMap<String,List<String>>();
    roleHierarchyMap.put("",asList("ROLE_B","ROLE_C"));
    RoleHierarchyUtils.roleHierarchyFromMap(roleHierarchyMap);
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenImpliedRolesNullThenThrowsIllegalArgumentException() throws Exception {
    Map<String,List<String>> roleHierarchyMap=new HashMap<String,List<String>>();
    roleHierarchyMap.put("ROLE_A",null);
    RoleHierarchyUtils.roleHierarchyFromMap(roleHierarchyMap);
  }
  @Test(expected=IllegalArgumentException.class) public void roleHierarchyFromMapWhenImpliedRolesEmptyThenThrowsIllegalArgumentException() throws Exception {
    Map<String,List<String>> roleHierarchyMap=new HashMap<String,List<String>>();
    roleHierarchyMap.put("ROLE_A",Collections.<String>emptyList());
    RoleHierarchyUtils.roleHierarchyFromMap(roleHierarchyMap);
  }
}
