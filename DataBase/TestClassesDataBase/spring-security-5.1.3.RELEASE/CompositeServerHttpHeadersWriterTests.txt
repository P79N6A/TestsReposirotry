/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class CompositeServerHttpHeadersWriterTests {
  @Mock ServerHttpHeadersWriter writer1;
  @Mock ServerHttpHeadersWriter writer2;
  CompositeServerHttpHeadersWriter writer;
  ServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
  @Before public void setup(){
    writer=new CompositeServerHttpHeadersWriter(Arrays.asList(writer1,writer2));
  }
  @Test public void writeHttpHeadersWhenErrorNoErrorThenError(){
    when(writer1.writeHttpHeaders(exchange)).thenReturn(Mono.error(new RuntimeException()));
    when(writer2.writeHttpHeaders(exchange)).thenReturn(Mono.empty());
    Mono<Void> result=writer.writeHttpHeaders(exchange);
    StepVerifier.create(result).expectError().verify();
    verify(writer1).writeHttpHeaders(exchange);
    verify(writer2).writeHttpHeaders(exchange);
  }
  @Test public void writeHttpHeadersWhenErrorErrorThenError(){
    when(writer1.writeHttpHeaders(exchange)).thenReturn(Mono.error(new RuntimeException()));
    when(writer2.writeHttpHeaders(exchange)).thenReturn(Mono.error(new RuntimeException()));
    Mono<Void> result=writer.writeHttpHeaders(exchange);
    StepVerifier.create(result).expectError().verify();
    verify(writer1).writeHttpHeaders(exchange);
    verify(writer2).writeHttpHeaders(exchange);
  }
  @Test public void writeHttpHeadersWhenNoErrorThenNoError(){
    when(writer1.writeHttpHeaders(exchange)).thenReturn(Mono.empty());
    when(writer2.writeHttpHeaders(exchange)).thenReturn(Mono.empty());
    Mono<Void> result=writer.writeHttpHeaders(exchange);
    StepVerifier.create(result).expectComplete().verify();
    verify(writer1).writeHttpHeaders(exchange);
    verify(writer2).writeHttpHeaders(exchange);
  }
}
