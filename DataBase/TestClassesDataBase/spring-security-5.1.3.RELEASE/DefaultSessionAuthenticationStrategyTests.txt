/** 
 * @author Luke Taylor
 */
public class DefaultSessionAuthenticationStrategyTests {
  @Test public void newSessionShouldNotBeCreatedIfNoSessionExistsAndAlwaysCreateIsFalse() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    HttpServletRequest request=new MockHttpServletRequest();
    strategy.onAuthentication(mock(Authentication.class),request,new MockHttpServletResponse());
    assertThat(request.getSession(false)).isNull();
  }
  @Test public void newSessionIsCreatedIfSessionAlreadyExists() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    HttpServletRequest request=new MockHttpServletRequest();
    String sessionId=request.getSession().getId();
    strategy.onAuthentication(mock(Authentication.class),request,new MockHttpServletResponse());
    assertThat(sessionId.equals(request.getSession().getId())).isFalse();
  }
  @Test public void newSessionIsCreatedIfSessionAlreadyExistsWithEventPublisher() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    HttpServletRequest request=new MockHttpServletRequest();
    HttpSession session=request.getSession();
    session.setAttribute("blah","blah");
    session.setAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY","DefaultSavedRequest");
    String oldSessionId=session.getId();
    ApplicationEventPublisher eventPublisher=mock(ApplicationEventPublisher.class);
    strategy.setApplicationEventPublisher(eventPublisher);
    Authentication mockAuthentication=mock(Authentication.class);
    strategy.onAuthentication(mockAuthentication,request,new MockHttpServletResponse());
    ArgumentCaptor<ApplicationEvent> eventArgumentCaptor=ArgumentCaptor.forClass(ApplicationEvent.class);
    verify(eventPublisher).publishEvent(eventArgumentCaptor.capture());
    assertThat(oldSessionId.equals(request.getSession().getId())).isFalse();
    assertThat(request.getSession().getAttribute("blah")).isNotNull();
    assertThat(request.getSession().getAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY")).isNotNull();
    assertThat(eventArgumentCaptor.getValue()).isNotNull();
    assertThat(eventArgumentCaptor.getValue() instanceof SessionFixationProtectionEvent).isTrue();
    SessionFixationProtectionEvent event=(SessionFixationProtectionEvent)eventArgumentCaptor.getValue();
    assertThat(event.getOldSessionId()).isEqualTo(oldSessionId);
    assertThat(event.getNewSessionId()).isEqualTo(request.getSession().getId());
    assertThat(event.getAuthentication()).isSameAs(mockAuthentication);
  }
  @Test public void onlySavedRequestAttributeIsMigratedIfMigrateAttributesIsFalse() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    strategy.setMigrateSessionAttributes(false);
    HttpServletRequest request=new MockHttpServletRequest();
    HttpSession session=request.getSession();
    session.setAttribute("blah","blah");
    session.setAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY","DefaultSavedRequest");
    strategy.onAuthentication(mock(Authentication.class),request,new MockHttpServletResponse());
    assertThat(request.getSession().getAttribute("blah")).isNull();
    assertThat(request.getSession().getAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY")).isNotNull();
  }
  @Test public void onlySavedRequestAttributeIsMigratedIfMigrateAttributesIsFalseWithEventPublisher() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    strategy.setMigrateSessionAttributes(false);
    HttpServletRequest request=new MockHttpServletRequest();
    HttpSession session=request.getSession();
    session.setAttribute("blah","blah");
    session.setAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY","DefaultSavedRequest");
    String oldSessionId=session.getId();
    ApplicationEventPublisher eventPublisher=mock(ApplicationEventPublisher.class);
    strategy.setApplicationEventPublisher(eventPublisher);
    Authentication mockAuthentication=mock(Authentication.class);
    strategy.onAuthentication(mockAuthentication,request,new MockHttpServletResponse());
    ArgumentCaptor<ApplicationEvent> eventArgumentCaptor=ArgumentCaptor.forClass(ApplicationEvent.class);
    verify(eventPublisher).publishEvent(eventArgumentCaptor.capture());
    assertThat(request.getSession().getAttribute("blah")).isNull();
    assertThat(request.getSession().getAttribute("SPRING_SECURITY_SAVED_REQUEST_KEY")).isNotNull();
    assertThat(eventArgumentCaptor.getValue()).isNotNull();
    assertThat(eventArgumentCaptor.getValue() instanceof SessionFixationProtectionEvent).isTrue();
    SessionFixationProtectionEvent event=(SessionFixationProtectionEvent)eventArgumentCaptor.getValue();
    assertThat(event.getOldSessionId()).isEqualTo(oldSessionId);
    assertThat(event.getNewSessionId()).isEqualTo(request.getSession().getId());
    assertThat(event.getAuthentication()).isSameAs(mockAuthentication);
  }
  @Test public void sessionIsCreatedIfAlwaysCreateTrue() throws Exception {
    SessionFixationProtectionStrategy strategy=new SessionFixationProtectionStrategy();
    strategy.setAlwaysCreateSession(true);
    HttpServletRequest request=new MockHttpServletRequest();
    strategy.onAuthentication(mock(Authentication.class),request,new MockHttpServletResponse());
    assertThat(request.getSession(false)).isNotNull();
  }
}
