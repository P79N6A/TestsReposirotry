/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class ReactiveAuthenticationManagerAdapterTests {
  @Mock AuthenticationManager delegate;
  @Mock Authentication authentication;
  ReactiveAuthenticationManagerAdapter manager;
  @Before public void setup(){
    manager=new ReactiveAuthenticationManagerAdapter(delegate);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullAuthenticationManager(){
    new ReactiveAuthenticationManagerAdapter(null);
  }
  @Test public void authenticateWhenSuccessThenSucces(){
    when(delegate.authenticate(any())).thenReturn(authentication);
    when(authentication.isAuthenticated()).thenReturn(true);
    Authentication result=manager.authenticate(authentication).block();
    assertThat(result).isEqualTo(authentication);
  }
  @Test public void authenticateWhenReturnNotAuthenticatedThenError(){
    when(delegate.authenticate(any())).thenReturn(authentication);
    Authentication result=manager.authenticate(authentication).block();
    assertThat(result).isNull();
  }
  @Test public void authenticateWhenBadCredentialsThenError(){
    when(delegate.authenticate(any())).thenThrow(new BadCredentialsException("Failed"));
    Mono<Authentication> result=manager.authenticate(authentication);
    StepVerifier.create(result).expectError(BadCredentialsException.class).verify();
  }
}
