/** 
 * @author Rob Winch
 */
public class CsrfConfigurerNoWebMvcTests {
  ConfigurableApplicationContext context;
  @After public void teardown(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void missingDispatcherServletPreventsCsrfRequestDataValueProcessor(){
    loadContext(EnableWebConfig.class);
    assertThat(context.containsBeanDefinition("requestDataValueProcessor")).isTrue();
  }
  @Test public void findDispatcherServletPreventsCsrfRequestDataValueProcessor(){
    loadContext(EnableWebMvcConfig.class);
    assertThat(context.containsBeanDefinition("requestDataValueProcessor")).isTrue();
  }
  @Test public void overrideCsrfRequestDataValueProcessor(){
    loadContext(EnableWebOverrideRequestDataConfig.class);
    assertThat(context.getBean(RequestDataValueProcessor.class).getClass()).isNotEqualTo(CsrfRequestDataValueProcessor.class);
  }
@EnableWebSecurity static class EnableWebConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
@EnableWebSecurity static class EnableWebOverrideRequestDataConfig {
    @Bean @Primary public RequestDataValueProcessor requestDataValueProcessor(){
      return mock(RequestDataValueProcessor.class);
    }
  }
@EnableWebSecurity static class EnableWebMvcConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
  private void loadContext(  Class<?> configs){
    AnnotationConfigApplicationContext annotationConfigApplicationContext=new AnnotationConfigApplicationContext();
    annotationConfigApplicationContext.register(configs);
    annotationConfigApplicationContext.refresh();
    this.context=annotationConfigApplicationContext;
  }
}
