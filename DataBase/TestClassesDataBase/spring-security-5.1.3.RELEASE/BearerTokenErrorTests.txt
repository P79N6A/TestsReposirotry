/** 
 * Tests for  {@link BearerTokenError}
 * @author Vedran Pavic
 * @author Josh Cummings
 */
public class BearerTokenErrorTests {
  private static final String TEST_ERROR_CODE="test-code";
  private static final HttpStatus TEST_HTTP_STATUS=HttpStatus.UNAUTHORIZED;
  private static final String TEST_DESCRIPTION="test-description";
  private static final String TEST_URI="http://example.com";
  private static final String TEST_SCOPE="test-scope";
  @Test public void constructorWithErrorCodeWhenErrorCodeIsValidThenCreated(){
    BearerTokenError error=new BearerTokenError(TEST_ERROR_CODE,TEST_HTTP_STATUS,null,null);
    assertThat(error.getErrorCode()).isEqualTo(TEST_ERROR_CODE);
    assertThat(error.getHttpStatus()).isEqualTo(TEST_HTTP_STATUS);
    assertThat(error.getDescription()).isNull();
    assertThat(error.getUri()).isNull();
    assertThat(error.getScope()).isNull();
  }
  @Test public void constructorWithErrorCodeAndHttpStatusWhenErrorCodeIsNullThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(null,TEST_HTTP_STATUS,null,null)).isInstanceOf(IllegalArgumentException.class).hasMessage("errorCode cannot be empty");
  }
  @Test public void constructorWithErrorCodeAndHttpStatusWhenErrorCodeIsEmptyThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError("",TEST_HTTP_STATUS,null,null)).isInstanceOf(IllegalArgumentException.class).hasMessage("errorCode cannot be empty");
  }
  @Test public void constructorWithErrorCodeAndHttpStatusWhenHttpStatusIsNullThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE,null,null,null)).isInstanceOf(IllegalArgumentException.class).hasMessage("httpStatus cannot be null");
  }
  @Test public void constructorWithAllParametersWhenAllParametersAreValidThenCreated(){
    BearerTokenError error=new BearerTokenError(TEST_ERROR_CODE,TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE);
    assertThat(error.getErrorCode()).isEqualTo(TEST_ERROR_CODE);
    assertThat(error.getHttpStatus()).isEqualTo(TEST_HTTP_STATUS);
    assertThat(error.getDescription()).isEqualTo(TEST_DESCRIPTION);
    assertThat(error.getUri()).isEqualTo(TEST_URI);
    assertThat(error.getScope()).isEqualTo(TEST_SCOPE);
  }
  @Test public void constructorWithAllParametersWhenErrorCodeIsNullThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(null,TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessage("errorCode cannot be empty");
  }
  @Test public void constructorWithAllParametersWhenErrorCodeIsEmptyThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError("",TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessage("errorCode cannot be empty");
  }
  @Test public void constructorWithAllParametersWhenHttpStatusIsNullThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE,null,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessage("httpStatus cannot be null");
  }
  @Test public void constructorWithAllParametersWhenErrorCodeIsInvalidThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE + "\"",TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("errorCode").hasMessageContaining("RFC 6750");
  }
  @Test public void constructorWithAllParametersWhenDescriptionIsInvalidThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE,TEST_HTTP_STATUS,TEST_DESCRIPTION + "\"",TEST_URI,TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("description").hasMessageContaining("RFC 6750");
  }
  @Test public void constructorWithAllParametersWhenErrorUriIsInvalidThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE,TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI + "\"",TEST_SCOPE)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("errorUri").hasMessageContaining("RFC 6750");
  }
  @Test public void constructorWithAllParametersWhenScopeIsInvalidThenThrowIllegalArgumentException(){
    assertThatCode(() -> new BearerTokenError(TEST_ERROR_CODE,TEST_HTTP_STATUS,TEST_DESCRIPTION,TEST_URI,TEST_SCOPE + "\"")).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("scope").hasMessageContaining("RFC 6750");
  }
}
