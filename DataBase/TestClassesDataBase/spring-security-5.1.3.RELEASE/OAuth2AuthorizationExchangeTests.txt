/** 
 * Tests for  {@link OAuth2AuthorizationExchange}.
 * @author Joe Grandja
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({OAuth2AuthorizationExchange.class,OAuth2AuthorizationRequest.class,OAuth2AuthorizationResponse.class}) public class OAuth2AuthorizationExchangeTests {
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthorizationRequestIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizationExchange(null,mock(OAuth2AuthorizationResponse.class));
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthorizationResponseIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizationExchange(mock(OAuth2AuthorizationRequest.class),null);
  }
  @Test public void constructorWhenRequiredArgsProvidedThenCreated(){
    OAuth2AuthorizationRequest authorizationRequest=mock(OAuth2AuthorizationRequest.class);
    OAuth2AuthorizationResponse authorizationResponse=mock(OAuth2AuthorizationResponse.class);
    OAuth2AuthorizationExchange authorizationExchange=new OAuth2AuthorizationExchange(authorizationRequest,authorizationResponse);
    assertThat(authorizationExchange.getAuthorizationRequest()).isEqualTo(authorizationRequest);
    assertThat(authorizationExchange.getAuthorizationResponse()).isEqualTo(authorizationResponse);
  }
}
