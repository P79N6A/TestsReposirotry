/** 
 * @author Rob Winch
 */
@RunWith(MockitoJUnitRunner.class) public class ConcurrentSessionControlAuthenticationStrategyTests {
  @Mock private SessionRegistry sessionRegistry;
  private Authentication authentication;
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private SessionInformation sessionInformation;
  private ConcurrentSessionControlAuthenticationStrategy strategy;
  @Before public void setup() throws Exception {
    authentication=new TestingAuthenticationToken("user","password","ROLE_USER");
    request=new MockHttpServletRequest();
    response=new MockHttpServletResponse();
    sessionInformation=new SessionInformation(authentication.getPrincipal(),"unique",new Date(1374766134216L));
    strategy=new ConcurrentSessionControlAuthenticationStrategy(sessionRegistry);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullRegistry(){
    new ConcurrentSessionControlAuthenticationStrategy(null);
  }
  @Test public void noRegisteredSession(){
    when(sessionRegistry.getAllSessions(any(),anyBoolean())).thenReturn(Collections.<SessionInformation>emptyList());
    strategy.setMaximumSessions(1);
    strategy.setExceptionIfMaximumExceeded(true);
    strategy.onAuthentication(authentication,request,response);
  }
  @Test public void maxSessionsSameSessionId(){
    MockHttpSession session=new MockHttpSession(new MockServletContext(),sessionInformation.getSessionId());
    request.setSession(session);
    when(sessionRegistry.getAllSessions(any(),anyBoolean())).thenReturn(Collections.<SessionInformation>singletonList(sessionInformation));
    strategy.setMaximumSessions(1);
    strategy.setExceptionIfMaximumExceeded(true);
    strategy.onAuthentication(authentication,request,response);
  }
  @Test(expected=SessionAuthenticationException.class) public void maxSessionsWithException(){
    when(sessionRegistry.getAllSessions(any(),anyBoolean())).thenReturn(Collections.<SessionInformation>singletonList(sessionInformation));
    strategy.setMaximumSessions(1);
    strategy.setExceptionIfMaximumExceeded(true);
    strategy.onAuthentication(authentication,request,response);
  }
  @Test public void maxSessionsExpireExistingUser(){
    when(sessionRegistry.getAllSessions(any(),anyBoolean())).thenReturn(Collections.<SessionInformation>singletonList(sessionInformation));
    strategy.setMaximumSessions(1);
    strategy.onAuthentication(authentication,request,response);
    assertThat(sessionInformation.isExpired()).isTrue();
  }
  @Test public void maxSessionsExpireLeastRecentExistingUser(){
    SessionInformation moreRecentSessionInfo=new SessionInformation(authentication.getPrincipal(),"unique",new Date(1374766999999L));
    when(sessionRegistry.getAllSessions(any(),anyBoolean())).thenReturn(Arrays.<SessionInformation>asList(moreRecentSessionInfo,sessionInformation));
    strategy.setMaximumSessions(2);
    strategy.onAuthentication(authentication,request,response);
    assertThat(sessionInformation.isExpired()).isTrue();
  }
  @Test(expected=IllegalArgumentException.class) public void setMessageSourceNull(){
    strategy.setMessageSource(null);
  }
}
