/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(SpringRunner.class) @SecurityTestExecutionListeners public class SecurityMockServerConfigurersAnnotatedTests extends AbstractMockServerConfigurersTests {
  WebTestClient client=WebTestClient.bindToController(controller).webFilter(new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
  @Test @WithMockUser public void withMockUserWhenOnMethodThenSuccess(){
    client.get().exchange().expectStatus().isOk();
    Authentication authentication=TestSecurityContextHolder.getContext().getAuthentication();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test @WithMockUser public void withMockUserWhenGlobalMockPrincipalThenOverridesAnnotation(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    client=WebTestClient.bindToController(controller).webFilter(new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).apply(mockAuthentication(authentication)).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
    client.get().exchange().expectStatus().isOk();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test @WithMockUser public void withMockUserWhenMutateWithMockPrincipalThenOverridesAnnotation(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    client.mutateWith(mockAuthentication(authentication)).get().exchange().expectStatus().isOk();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test @WithMockUser public void withMockUserWhenMutateWithMockPrincipalAndNoMutateThenOverridesAnnotationAndUsesAnnotation(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    client.mutateWith(mockAuthentication(authentication)).get().exchange().expectStatus().isOk();
    controller.assertPrincipalIsEqualTo(authentication);
    client.get().exchange().expectStatus().isOk();
    assertPrincipalCreatedFromUserDetails(controller.removePrincipal(),userBuilder.build());
  }
  @Test @WithMockUser public void withMockUserWhenOnMethodAndRequestIsExecutedOnDifferentThreadThenSuccess(){
    Authentication authentication=TestSecurityContextHolder.getContext().getAuthentication();
    ForkJoinPool.commonPool().submit(() -> client.get().exchange().expectStatus().isOk()).join();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test @WithMockUser public void withMockUserAndWithCallOnSeparateThreadWhenMutateWithMockPrincipalAndNoMutateThenOverridesAnnotationAndUsesAnnotation(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    ForkJoinPool.commonPool().submit(() -> client.mutateWith(mockAuthentication(authentication)).get().exchange().expectStatus().isOk()).join();
    controller.assertPrincipalIsEqualTo(authentication);
    ForkJoinPool.commonPool().submit(() -> client.get().exchange().expectStatus().isOk()).join();
    assertPrincipalCreatedFromUserDetails(controller.removePrincipal(),userBuilder.build());
  }
}
