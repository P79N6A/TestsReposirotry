/** 
 * Tests for  {@link OAuth2AuthorizationCodeGrantRequest}.
 * @author Joe Grandja
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ClientRegistration.class,OAuth2AuthorizationExchange.class}) public class OAuth2AuthorizationCodeGrantRequestTests {
  private ClientRegistration clientRegistration;
  private OAuth2AuthorizationExchange authorizationExchange;
  @Before public void setUp(){
    this.clientRegistration=mock(ClientRegistration.class);
    this.authorizationExchange=mock(OAuth2AuthorizationExchange.class);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizationCodeGrantRequest(null,this.authorizationExchange);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthorizationExchangeIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizationCodeGrantRequest(this.clientRegistration,null);
  }
  @Test public void constructorWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest=new OAuth2AuthorizationCodeGrantRequest(this.clientRegistration,this.authorizationExchange);
    assertThat(authorizationCodeGrantRequest.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authorizationCodeGrantRequest.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authorizationCodeGrantRequest.getGrantType()).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);
  }
}
