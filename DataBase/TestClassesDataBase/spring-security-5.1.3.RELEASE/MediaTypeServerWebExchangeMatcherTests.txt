/** 
 * @author Rob Winch
 * @since 5.0
 */
public class MediaTypeServerWebExchangeMatcherTests {
  private MediaTypeServerWebExchangeMatcher matcher;
  @Test(expected=IllegalArgumentException.class) public void constructorMediaTypeArrayWhenNullThenThrowsIllegalArgumentException(){
    MediaType[] types=null;
    new MediaTypeServerWebExchangeMatcher(types);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorMediaTypeArrayWhenContainsNullThenThrowsIllegalArgumentException(){
    MediaType[] types={null};
    new MediaTypeServerWebExchangeMatcher(types);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorMediaTypeListWhenNullThenThrowsIllegalArgumentException(){
    List<MediaType> types=null;
    new MediaTypeServerWebExchangeMatcher(types);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorMediaTypeListWhenContainsNullThenThrowsIllegalArgumentException(){
    List<MediaType> types=Collections.singletonList(null);
    new MediaTypeServerWebExchangeMatcher(types);
  }
  @Test public void matchWhenDefaultResolverAndAcceptEqualThenMatch(){
    MediaType acceptType=MediaType.TEXT_HTML;
    MediaTypeServerWebExchangeMatcher matcher=new MediaTypeServerWebExchangeMatcher(acceptType);
    assertThat(matcher.matches(exchange(acceptType)).block().isMatch()).isTrue();
  }
  @Test public void matchWhenDefaultResolverAndAcceptEqualAndIgnoreThenMatch(){
    MediaType acceptType=MediaType.TEXT_HTML;
    MediaTypeServerWebExchangeMatcher matcher=new MediaTypeServerWebExchangeMatcher(acceptType);
    matcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));
    assertThat(matcher.matches(exchange(acceptType)).block().isMatch()).isTrue();
  }
  @Test public void matchWhenDefaultResolverAndAcceptEqualAndIgnoreThenNotMatch(){
    MediaType acceptType=MediaType.TEXT_HTML;
    MediaTypeServerWebExchangeMatcher matcher=new MediaTypeServerWebExchangeMatcher(acceptType);
    matcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));
    assertThat(matcher.matches(exchange(MediaType.ALL)).block().isMatch()).isFalse();
  }
  @Test public void matchWhenDefaultResolverAndAcceptImpliedThenMatch(){
    MediaTypeServerWebExchangeMatcher matcher=new MediaTypeServerWebExchangeMatcher(MediaType.parseMediaTypes("text/*"));
    assertThat(matcher.matches(exchange(MediaType.TEXT_HTML)).block().isMatch()).isTrue();
  }
  @Test public void matchWhenDefaultResolverAndAcceptImpliedAndUseEqualsThenNotMatch(){
    MediaTypeServerWebExchangeMatcher matcher=new MediaTypeServerWebExchangeMatcher(MediaType.ALL);
    matcher.setUseEquals(true);
    assertThat(matcher.matches(exchange(MediaType.TEXT_HTML)).block().isMatch()).isFalse();
  }
  private static ServerWebExchange exchange(  MediaType... accept){
    return MockServerWebExchange.from(MockServerHttpRequest.get("/").accept(accept).build());
  }
}
