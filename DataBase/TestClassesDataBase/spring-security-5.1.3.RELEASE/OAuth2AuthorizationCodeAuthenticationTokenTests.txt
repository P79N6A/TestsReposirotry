/** 
 * Tests for  {@link OAuth2AuthorizationCodeAuthenticationToken}.
 * @author Joe Grandja
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ClientRegistration.class,OAuth2AuthorizationExchange.class,OAuth2AuthorizationResponse.class}) public class OAuth2AuthorizationCodeAuthenticationTokenTests {
  private ClientRegistration clientRegistration;
  private OAuth2AuthorizationExchange authorizationExchange;
  private OAuth2AccessToken accessToken;
  @Before public void setUp(){
    this.clientRegistration=mock(ClientRegistration.class);
    this.authorizationExchange=mock(OAuth2AuthorizationExchange.class);
    this.accessToken=mock(OAuth2AccessToken.class);
  }
  @Test public void constructorAuthorizationRequestResponseWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationToken(null,this.authorizationExchange)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorAuthorizationRequestResponseWhenAuthorizationExchangeIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorAuthorizationRequestResponseWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2AuthorizationResponse authorizationResponse=mock(OAuth2AuthorizationResponse.class);
    when(authorizationResponse.getCode()).thenReturn("code");
    when(this.authorizationExchange.getAuthorizationResponse()).thenReturn(authorizationResponse);
    OAuth2AuthorizationCodeAuthenticationToken authentication=new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange);
    assertThat(authentication.getPrincipal()).isEqualTo(this.clientRegistration.getClientId());
    assertThat(authentication.getCredentials()).isEqualTo(this.authorizationExchange.getAuthorizationResponse().getCode());
    assertThat(authentication.getAuthorities()).isEqualTo(Collections.emptyList());
    assertThat(authentication.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authentication.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authentication.getAccessToken()).isNull();
    assertThat(authentication.isAuthenticated()).isEqualTo(false);
  }
  @Test public void constructorTokenRequestResponseWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationToken(null,this.authorizationExchange,this.accessToken)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorTokenRequestResponseWhenAuthorizationExchangeIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,null,this.accessToken)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorTokenRequestResponseWhenAccessTokenIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange,null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorTokenRequestResponseWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2AuthorizationCodeAuthenticationToken authentication=new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange,this.accessToken);
    assertThat(authentication.getPrincipal()).isEqualTo(this.clientRegistration.getClientId());
    assertThat(authentication.getCredentials()).isEqualTo(this.accessToken.getTokenValue());
    assertThat(authentication.getAuthorities()).isEqualTo(Collections.emptyList());
    assertThat(authentication.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authentication.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authentication.getAccessToken()).isEqualTo(this.accessToken);
    assertThat(authentication.isAuthenticated()).isEqualTo(true);
  }
}
