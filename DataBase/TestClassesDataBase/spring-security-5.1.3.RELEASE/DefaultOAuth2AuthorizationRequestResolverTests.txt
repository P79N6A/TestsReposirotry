/** 
 * Tests for  {@link DefaultOAuth2AuthorizationRequestResolver}.
 * @author Joe Grandja
 */
public class DefaultOAuth2AuthorizationRequestResolverTests {
  private ClientRegistration registration1;
  private ClientRegistration registration2;
  private ClientRegistrationRepository clientRegistrationRepository;
  private String authorizationRequestBaseUri="/oauth2/authorization";
  private DefaultOAuth2AuthorizationRequestResolver resolver;
  @Before public void setUp(){
    this.registration1=TestClientRegistrations.clientRegistration().build();
    this.registration2=TestClientRegistrations.clientRegistration2().build();
    this.clientRegistrationRepository=new InMemoryClientRegistrationRepository(this.registration1,this.registration2);
    this.resolver=new DefaultOAuth2AuthorizationRequestResolver(this.clientRegistrationRepository,this.authorizationRequestBaseUri);
  }
  @Test public void constructorWhenClientRegistrationRepositoryIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new DefaultOAuth2AuthorizationRequestResolver(null,this.authorizationRequestBaseUri)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenAuthorizationRequestBaseUriIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new DefaultOAuth2AuthorizationRequestResolver(this.clientRegistrationRepository,null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void resolveWhenNotAuthorizationRequestThenDoesNotResolve(){
    String requestUri="/path";
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest).isNull();
  }
  @Test public void resolveWhenAuthorizationRequestWithInvalidClientThenThrowIllegalArgumentException(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId()+ "-invalid";
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    assertThatThrownBy(() -> this.resolver.resolve(request)).isInstanceOf(IllegalArgumentException.class).hasMessage("Invalid Client Registration with Id: " + clientRegistration.getRegistrationId() + "-invalid");
  }
  @Test public void resolveWhenAuthorizationRequestWithValidClientThenResolves(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest).isNotNull();
    assertThat(authorizationRequest.getAuthorizationUri()).isEqualTo(clientRegistration.getProviderDetails().getAuthorizationUri());
    assertThat(authorizationRequest.getGrantType()).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);
    assertThat(authorizationRequest.getResponseType()).isEqualTo(OAuth2AuthorizationResponseType.CODE);
    assertThat(authorizationRequest.getClientId()).isEqualTo(clientRegistration.getClientId());
    assertThat(authorizationRequest.getRedirectUri()).isEqualTo("http://localhost/login/oauth2/code/" + clientRegistration.getRegistrationId());
    assertThat(authorizationRequest.getScopes()).isEqualTo(clientRegistration.getScopes());
    assertThat(authorizationRequest.getState()).isNotNull();
    assertThat(authorizationRequest.getAdditionalParameters()).containsExactly(entry(OAuth2ParameterNames.REGISTRATION_ID,clientRegistration.getRegistrationId()));
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Flogin%2Foauth2%2Fcode%2Fregistration-id");
  }
  @Test public void resolveWhenClientAuthorizationRequiredExceptionAvailableThenResolves(){
    ClientRegistration clientRegistration=this.registration2;
    String requestUri="/path";
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request,clientRegistration.getRegistrationId());
    assertThat(authorizationRequest).isNotNull();
    assertThat(authorizationRequest.getAdditionalParameters()).containsExactly(entry(OAuth2ParameterNames.REGISTRATION_ID,clientRegistration.getRegistrationId()));
  }
  @Test public void resolveWhenAuthorizationRequestRedirectUriTemplatedThenRedirectUriExpanded(){
    ClientRegistration clientRegistration=this.registration2;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getRedirectUri()).isNotEqualTo(clientRegistration.getRedirectUriTemplate());
    assertThat(authorizationRequest.getRedirectUri()).isEqualTo("http://localhost/login/oauth2/code/" + clientRegistration.getRegistrationId());
  }
  @Test public void resolveWhenAuthorizationRequestRedirectUriTemplatedThenRedirectUriExpandedExcludesQueryString(){
    ClientRegistration clientRegistration=this.registration2;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    request.setQueryString("foo=bar");
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getRedirectUri()).isNotEqualTo(clientRegistration.getRedirectUriTemplate());
    assertThat(authorizationRequest.getRedirectUri()).isEqualTo("http://localhost/login/oauth2/code/" + clientRegistration.getRegistrationId());
  }
  @Test public void resolveWhenAuthorizationRequestIncludesPort80ThenExpandedRedirectUriExcludesPort(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setScheme("http");
    request.setServerName("example.com");
    request.setServerPort(80);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Fexample.com%2Flogin%2Foauth2%2Fcode%2Fregistration-id");
  }
  @Test public void resolveWhenAuthorizationRequestIncludesPort443ThenExpandedRedirectUriExcludesPort(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setScheme("https");
    request.setServerName("example.com");
    request.setServerPort(443);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=https%3A%2F%2Fexample.com%2Flogin%2Foauth2%2Fcode%2Fregistration-id");
  }
  @Test public void resolveWhenClientAuthorizationRequiredExceptionAvailableThenRedirectUriIsAuthorize(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri="/path";
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request,clientRegistration.getRegistrationId());
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Fauthorize%2Foauth2%2Fcode%2Fregistration-id");
  }
  @Test public void resolveWhenAuthorizationRequestOAuth2LoginThenRedirectUriIsLogin(){
    ClientRegistration clientRegistration=this.registration2;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id-2&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Flogin%2Foauth2%2Fcode%2Fregistration-id-2");
  }
  @Test public void resolveWhenAuthorizationRequestHasActionParameterAuthorizeThenRedirectUriIsAuthorize(){
    ClientRegistration clientRegistration=this.registration1;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.addParameter("action","authorize");
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Fauthorize%2Foauth2%2Fcode%2Fregistration-id");
  }
  @Test public void resolveWhenAuthorizationRequestHasActionParameterLoginThenRedirectUriIsLogin(){
    ClientRegistration clientRegistration=this.registration2;
    String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
    MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
    request.addParameter("action","login");
    request.setServletPath(requestUri);
    OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
    assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id-2&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Flogin%2Foauth2%2Fcode%2Fregistration-id-2");
  }
}
