/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class OAuth2AuthorizationCodeReactiveAuthenticationManagerTests {
  @Mock private ReactiveOAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> accessTokenResponseClient;
  private OAuth2AuthorizationCodeReactiveAuthenticationManager manager;
  private ClientRegistration.Builder registration=TestClientRegistrations.clientRegistration();
  private OAuth2AuthorizationRequest.Builder authorizationRequest=TestOAuth2AuthorizationRequests.request();
  private OAuth2AuthorizationResponse.Builder authorizationResponse=TestOAuth2AuthorizationResponses.success();
  private OAuth2AccessTokenResponse.Builder tokenResponse=TestOAuth2AccessTokenResponses.accessTokenResponse();
  @Before public void setup(){
    this.manager=new OAuth2AuthorizationCodeReactiveAuthenticationManager(this.accessTokenResponseClient);
  }
  @Test public void authenticateWhenErrorThenOAuth2AuthorizationException(){
    this.authorizationResponse=TestOAuth2AuthorizationResponses.error();
    assertThatCode(() -> authenticate()).isInstanceOf(OAuth2AuthorizationException.class);
  }
  @Test public void authenticateWhenStateNotEqualThenOAuth2AuthorizationException(){
    this.authorizationRequest.state("notequal");
    assertThatCode(() -> authenticate()).isInstanceOf(OAuth2AuthorizationException.class);
  }
  @Test public void authenticateWhenRedirectUriNotEqualThenOAuth2AuthorizationException(){
    this.authorizationRequest.redirectUri("https://example.org/notequal");
    assertThatCode(() -> authenticate()).isInstanceOf(OAuth2AuthorizationException.class);
  }
  @Test public void authenticateWhenValidThenSuccess(){
    when(this.accessTokenResponseClient.getTokenResponse(any())).thenReturn(Mono.just(this.tokenResponse.build()));
    OAuth2AuthorizationCodeAuthenticationToken result=authenticate();
    assertThat(result).isNotNull();
  }
  @Test public void authenticateWhenEmptyThenEmpty(){
    when(this.accessTokenResponseClient.getTokenResponse(any())).thenReturn(Mono.empty());
    OAuth2AuthorizationCodeAuthenticationToken result=authenticate();
    assertThat(result).isNull();
  }
  @Test public void authenticateWhenOAuth2AuthorizationExceptionThenOAuth2AuthorizationException(){
    when(this.accessTokenResponseClient.getTokenResponse(any())).thenReturn(Mono.error(() -> new OAuth2AuthorizationException(new OAuth2Error("error"))));
    assertThatCode(() -> authenticate()).isInstanceOf(OAuth2AuthorizationException.class);
  }
  private OAuth2AuthorizationCodeAuthenticationToken authenticate(){
    OAuth2AuthorizationExchange exchange=new OAuth2AuthorizationExchange(this.authorizationRequest.build(),this.authorizationResponse.build());
    OAuth2AuthorizationCodeAuthenticationToken token=new OAuth2AuthorizationCodeAuthenticationToken(this.registration.build(),exchange);
    return (OAuth2AuthorizationCodeAuthenticationToken)this.manager.authenticate(token).block();
  }
}
