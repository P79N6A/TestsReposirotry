/** 
 * Tests for  {@link RequestCacheConfigurer}
 * @author Rob Winch
 * @author Josh Cummings
 */
public class RequestCacheConfigurerTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired MockMvc mvc;
  @Test public void configureWhenRegisteringObjectPostProcessorThenInvokedOnExceptionTranslationFilter(){
    this.spring.register(ObjectPostProcessorConfig.class,DefaultSecurityConfig.class).autowire();
    verify(ObjectPostProcessorConfig.objectPostProcessor).postProcess(any(RequestCacheAwareFilter.class));
  }
@EnableWebSecurity static class ObjectPostProcessorConfig extends WebSecurityConfigurerAdapter {
    static ObjectPostProcessor<Object> objectPostProcessor=spy(ReflectingObjectPostProcessor.class);
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.requestCache();
    }
    @Bean static ObjectPostProcessor<Object> objectPostProcessor(){
      return objectPostProcessor;
    }
  }
static class ReflectingObjectPostProcessor implements ObjectPostProcessor<Object> {
    @Override public <O>O postProcess(    O object){
      return object;
    }
  }
  @Test public void getWhenInvokingExceptionHandlingTwiceThenOriginalEntryPointUsed() throws Exception {
    this.spring.register(InvokeTwiceDoesNotOverrideConfig.class).autowire();
    this.mvc.perform(get("/"));
    verify(InvokeTwiceDoesNotOverrideConfig.requestCache).getMatchingRequest(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
@EnableWebSecurity static class InvokeTwiceDoesNotOverrideConfig extends WebSecurityConfigurerAdapter {
    static RequestCache requestCache=mock(RequestCache.class);
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.requestCache().requestCache(requestCache).and().requestCache();
    }
  }
  @Test public void getWhenBookmarkedUrlIsFaviconIcoThenPostAuthenticationRedirectsToRoot() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/favicon.ico")).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("/"));
  }
  @Test public void getWhenBookmarkedUrlIsFaviconPngThenPostAuthenticationRedirectsToRoot() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/favicon.png")).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("/"));
  }
  @Test public void getWhenBookmarkedRequestIsApplicationJsonThenPostAuthenticationRedirectsToRoot() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON)).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("/"));
  }
  @Test public void getWhenBookmarkedRequestIsXRequestedWithThenPostAuthenticationRedirectsToRoot() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header("X-Requested-With","XMLHttpRequest")).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("/"));
  }
  @Test public void getWhenBookmarkedRequestIsAllMediaTypeThenPostAuthenticationRemembers() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header(HttpHeaders.ACCEPT,MediaType.ALL)).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("http://localhost/messages"));
  }
  @Test public void getWhenBookmarkedRequestIsTextHtmlThenPostAuthenticationRemembers() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header(HttpHeaders.ACCEPT,MediaType.TEXT_HTML)).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("http://localhost/messages"));
  }
  @Test public void getWhenBookmarkedRequestIsChromeThenPostAuthenticationRemembers() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header(HttpHeaders.ACCEPT,"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("http://localhost/messages"));
  }
  @Test public void getWhenBookmarkedRequestIsRequestedWithAndroidThenPostAuthenticationRemembers() throws Exception {
    this.spring.register(RequestCacheDefaultsConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/messages").header("X-Requested-With","com.android")).andExpect(redirectedUrl("http://localhost/login")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("http://localhost/messages"));
  }
@EnableWebSecurity static class RequestCacheDefaultsConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().formLogin();
    }
  }
  @Test public void getWhenRequestCacheIsDisabledThenExceptionTranslationFilterDoesNotStoreRequest() throws Exception {
    this.spring.register(RequestCacheDisabledConfig.class,DefaultSecurityConfig.class).autowire();
    MockHttpSession session=(MockHttpSession)this.mvc.perform(get("/bob")).andReturn().getRequest().getSession();
    this.mvc.perform(formLogin(session)).andExpect(redirectedUrl("/"));
  }
@EnableWebSecurity static class RequestCacheDisabledConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      super.configure(http);
      http.requestCache().disable();
    }
  }
@EnableWebSecurity static class DefaultSecurityConfig {
    @Bean public InMemoryUserDetailsManager userDetailsManager(){
      return new InMemoryUserDetailsManager(User.withDefaultPasswordEncoder().username("user").password("password").roles("USER").build());
    }
  }
  private static RequestBuilder formLogin(  MockHttpSession session){
    return post("/login").param("username","user").param("password","password").session(session).with(csrf());
  }
}
