/** 
 * @author Rob Winch
 * @since 5.0
 */
public class WebSessionServerRequestCacheTests {
  private WebSessionServerRequestCache cache=new WebSessionServerRequestCache();
  @Test public void saveRequestGetRequestWhenGetThenFound(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/secured/").accept(MediaType.TEXT_HTML));
    this.cache.saveRequest(exchange).block();
    URI saved=this.cache.getRedirectUri(exchange).block();
    assertThat(saved).isEqualTo(exchange.getRequest().getURI());
  }
  @Test public void saveRequestGetRequestWhenFaviconThenNotFound(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/favicon.png").accept(MediaType.TEXT_HTML));
    this.cache.saveRequest(exchange).block();
    URI saved=this.cache.getRedirectUri(exchange).block();
    assertThat(saved).isNull();
  }
  @Test public void saveRequestGetRequestWhenPostThenNotFound(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.post("/secured/"));
    this.cache.saveRequest(exchange).block();
    assertThat(this.cache.getRedirectUri(exchange).block()).isNull();
  }
  @Test public void saveRequestGetRequestWhenPostAndCustomMatcherThenFound(){
    this.cache.setSaveRequestMatcher(e -> ServerWebExchangeMatcher.MatchResult.match());
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.post("/secured/"));
    this.cache.saveRequest(exchange).block();
    URI saved=this.cache.getRedirectUri(exchange).block();
    assertThat(saved).isEqualTo(exchange.getRequest().getURI());
  }
  @Test public void saveRequestRemoveRequestWhenThenFound(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/secured/").accept(MediaType.TEXT_HTML));
    this.cache.saveRequest(exchange).block();
    ServerHttpRequest saved=this.cache.removeMatchingRequest(exchange).block();
    assertThat(saved.getURI()).isEqualTo(exchange.getRequest().getURI());
  }
  @Test public void removeRequestGetRequestWhenDefaultThenNotFound(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/secured/"));
    this.cache.saveRequest(exchange).block();
    this.cache.removeMatchingRequest(exchange).block();
    assertThat(this.cache.getRedirectUri(exchange).block()).isNull();
  }
}
