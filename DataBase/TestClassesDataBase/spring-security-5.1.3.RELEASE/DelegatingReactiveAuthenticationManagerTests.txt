/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingReactiveAuthenticationManagerTests {
  @Mock ReactiveAuthenticationManager delegate1;
  @Mock ReactiveAuthenticationManager delegate2;
  @Mock Authentication authentication;
  @Test public void authenticateWhenEmptyAndNotThenReturnsNotEmpty(){
    when(this.delegate1.authenticate(any())).thenReturn(Mono.empty());
    when(this.delegate2.authenticate(any())).thenReturn(Mono.just(this.authentication));
    DelegatingReactiveAuthenticationManager manager=new DelegatingReactiveAuthenticationManager(this.delegate1,this.delegate2);
    assertThat(manager.authenticate(this.authentication).block()).isEqualTo(this.authentication);
  }
  @Test public void authenticateWhenNotEmptyThenOtherDelegatesNotSubscribed(){
    when(this.delegate1.authenticate(any())).thenReturn(Mono.just(this.authentication).delayElement(Duration.ofMillis(100)));
    DelegatingReactiveAuthenticationManager manager=new DelegatingReactiveAuthenticationManager(this.delegate1,this.delegate2);
    StepVerifier.create(manager.authenticate(this.authentication)).expectNext(this.authentication).verifyComplete();
  }
  @Test public void authenticateWhenBadCredentialsThenDelegate2NotInvokedAndError(){
    when(this.delegate1.authenticate(any())).thenReturn(Mono.error(new BadCredentialsException("Test")));
    DelegatingReactiveAuthenticationManager manager=new DelegatingReactiveAuthenticationManager(this.delegate1,this.delegate2);
    StepVerifier.create(manager.authenticate(this.authentication)).expectError(BadCredentialsException.class).verify();
  }
}
