@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=SecurityMockWithAuthoritiesMvcResultMatchersTests.Config.class) @WebAppConfiguration public class SecurityMockWithAuthoritiesMvcResultMatchersTests {
  @Autowired private WebApplicationContext context;
  private MockMvc mockMvc;
  @Before public void setup(){
    mockMvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
  }
  @Test public void withAuthoritiesNotOrderSensitive() throws Exception {
    List<SimpleGrantedAuthority> grantedAuthorities=new ArrayList<>();
    grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
    grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_SELLER"));
    mockMvc.perform(formLogin()).andExpect(authenticated().withAuthorities(grantedAuthorities));
  }
  @Test(expected=AssertionError.class) public void withAuthoritiesFailsIfNotAllRoles() throws Exception {
    List<SimpleGrantedAuthority> grantedAuthorities=new ArrayList<>();
    grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
    mockMvc.perform(formLogin()).andExpect(authenticated().withAuthorities(grantedAuthorities));
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Bean public UserDetailsService userDetailsService(){
      UserDetails user=User.withDefaultPasswordEncoder().username("user").password("password").roles("ADMIN","SELLER").build();
      return new InMemoryUserDetailsManager(user);
    }
@RestController static class Controller {
      @RequestMapping("/") public String ok(){
        return "ok";
      }
    }
  }
}
