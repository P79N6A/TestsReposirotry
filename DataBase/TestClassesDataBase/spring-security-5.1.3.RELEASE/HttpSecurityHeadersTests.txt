/** 
 * @author Rob Winch
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @WebAppConfiguration public class HttpSecurityHeadersTests {
  @Autowired WebApplicationContext wac;
  @Autowired Filter springSecurityFilterChain;
  MockMvc mockMvc;
  @Before public void setup() throws Exception {
    mockMvc=MockMvcBuilders.webAppContextSetup(wac).addFilters(springSecurityFilterChain).build();
  }
  @Test public void headerWhenSpringMvcResourceThenCacheRelatedHeadersReset() throws Exception {
    mockMvc.perform(get("/resources/file.js")).andExpect(status().isOk()).andExpect(header().string(HttpHeaders.CACHE_CONTROL,"max-age=12345")).andExpect(header().doesNotExist(HttpHeaders.PRAGMA)).andExpect(header().doesNotExist(HttpHeaders.EXPIRES));
  }
  @Test public void headerWhenNotSpringResourceThenCacheRelatedHeadersSet() throws Exception {
    mockMvc.perform(get("/notresource")).andExpect(header().string(HttpHeaders.CACHE_CONTROL,"no-cache, no-store, max-age=0, must-revalidate")).andExpect(header().string(HttpHeaders.PRAGMA,"no-cache")).andExpect(header().string(HttpHeaders.EXPIRES,"0"));
  }
@EnableWebSecurity static class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
@EnableWebMvc @Configuration static class WebMvcConfig implements WebMvcConfigurer {
    @Override public void addResourceHandlers(    ResourceHandlerRegistry registry){
      registry.addResourceHandler("/resources/**").addResourceLocations("classpath:/resources/").setCachePeriod(12345);
    }
  }
}
