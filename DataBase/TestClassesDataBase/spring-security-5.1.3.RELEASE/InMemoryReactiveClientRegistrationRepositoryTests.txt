/** 
 * @author Rob Winch
 * @since 5.1
 */
public class InMemoryReactiveClientRegistrationRepositoryTests {
  private ClientRegistration registration=TestClientRegistrations.clientRegistration().build();
  private InMemoryReactiveClientRegistrationRepository repository;
  @Before public void setup(){
    this.repository=new InMemoryReactiveClientRegistrationRepository(this.registration);
  }
  @Test public void constructorWhenZeroVarArgsThenIllegalArgumentException(){
    assertThatThrownBy(() -> new InMemoryReactiveClientRegistrationRepository()).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenClientRegistrationArrayThenIllegalArgumentException(){
    ClientRegistration[] registrations=null;
    assertThatThrownBy(() -> new InMemoryReactiveClientRegistrationRepository(registrations)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenClientRegistrationListThenIllegalArgumentException(){
    List<ClientRegistration> registrations=null;
    assertThatThrownBy(() -> new InMemoryReactiveClientRegistrationRepository(registrations)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenClientRegistrationListHasNullThenIllegalArgumentException(){
    List<ClientRegistration> registrations=Arrays.asList(null,registration);
    assertThatThrownBy(() -> new InMemoryReactiveClientRegistrationRepository(registrations)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenClientRegistrationIsNullThenIllegalArgumentException(){
    assertThatThrownBy(() -> new InMemoryReactiveClientRegistrationRepository(registration,null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void findByRegistrationIdWhenValidIdThenFound(){
    StepVerifier.create(this.repository.findByRegistrationId(this.registration.getRegistrationId())).expectNext(this.registration).verifyComplete();
  }
  @Test public void findByRegistrationIdWhenNotValidIdThenEmpty(){
    StepVerifier.create(this.repository.findByRegistrationId(this.registration.getRegistrationId() + "invalid")).verifyComplete();
  }
  @Test public void iteratorWhenContainsGithubThenContains(){
    assertThat(this.repository.iterator()).containsOnly(this.registration);
  }
}
