/** 
 * Tests for  {@link OAuth2ClientConfiguration}.
 * @author Joe Grandja
 */
public class OAuth2ClientConfigurationTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void requestWhenAuthorizedClientFoundThenMethodArgumentResolved() throws Exception {
    String clientRegistrationId="client1";
    String principalName="user1";
    TestingAuthenticationToken authentication=new TestingAuthenticationToken(principalName,"password");
    OAuth2AuthorizedClientRepository authorizedClientRepository=mock(OAuth2AuthorizedClientRepository.class);
    OAuth2AuthorizedClient authorizedClient=mock(OAuth2AuthorizedClient.class);
    when(authorizedClientRepository.loadAuthorizedClient(eq(clientRegistrationId),eq(authentication),any(HttpServletRequest.class))).thenReturn(authorizedClient);
    OAuth2AccessToken accessToken=mock(OAuth2AccessToken.class);
    when(authorizedClient.getAccessToken()).thenReturn(accessToken);
    OAuth2AuthorizedClientArgumentResolverConfig.AUTHORIZED_CLIENT_REPOSITORY=authorizedClientRepository;
    this.spring.register(OAuth2AuthorizedClientArgumentResolverConfig.class).autowire();
    this.mockMvc.perform(get("/authorized-client").with(authentication(authentication))).andExpect(status().isOk()).andExpect(content().string("resolved"));
  }
@EnableWebMvc @EnableWebSecurity static class OAuth2AuthorizedClientArgumentResolverConfig extends WebSecurityConfigurerAdapter {
    static OAuth2AuthorizedClientRepository AUTHORIZED_CLIENT_REPOSITORY;
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
@RestController public class Controller {
      @GetMapping("/authorized-client") public String authorizedClient(      @RegisteredOAuth2AuthorizedClient("client1") OAuth2AuthorizedClient authorizedClient){
        return authorizedClient != null ? "resolved" : "not-resolved";
      }
    }
    @Bean public ClientRegistrationRepository clientRegistrationRepository(){
      return mock(ClientRegistrationRepository.class);
    }
    @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository(){
      return AUTHORIZED_CLIENT_REPOSITORY;
    }
  }
  @Test public void loadContextWhenOAuth2AuthorizedClientRepositoryRegisteredTwiceThenThrowNoUniqueBeanDefinitionException(){
    assertThatThrownBy(() -> this.spring.register(OAuth2AuthorizedClientRepositoryRegisteredTwiceConfig.class).autowire()).hasRootCauseInstanceOf(NoUniqueBeanDefinitionException.class).hasMessageContaining("Expected single matching bean of type '" + OAuth2AuthorizedClientRepository.class.getName() + "' but found 2: authorizedClientRepository1,authorizedClientRepository2");
  }
@EnableWebMvc @EnableWebSecurity static class OAuth2AuthorizedClientRepositoryRegisteredTwiceConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().oauth2Login();
    }
    @Bean public ClientRegistrationRepository clientRegistrationRepository(){
      return mock(ClientRegistrationRepository.class);
    }
    @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository1(){
      return mock(OAuth2AuthorizedClientRepository.class);
    }
    @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository2(){
      return mock(OAuth2AuthorizedClientRepository.class);
    }
  }
  @Test public void loadContextWhenClientRegistrationRepositoryNotRegisteredThenThrowNoSuchBeanDefinitionException(){
    assertThatThrownBy(() -> this.spring.register(ClientRegistrationRepositoryNotRegisteredConfig.class).autowire()).hasRootCauseInstanceOf(NoSuchBeanDefinitionException.class).hasMessageContaining("No qualifying bean of type '" + ClientRegistrationRepository.class.getName() + "' available");
  }
@EnableWebMvc @EnableWebSecurity static class ClientRegistrationRepositoryNotRegisteredConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().oauth2Login();
    }
  }
  @Test public void loadContextWhenClientRegistrationRepositoryRegisteredTwiceThenThrowNoUniqueBeanDefinitionException(){
    assertThatThrownBy(() -> this.spring.register(ClientRegistrationRepositoryRegisteredTwiceConfig.class).autowire()).hasRootCauseInstanceOf(NoUniqueBeanDefinitionException.class).hasMessageContaining("expected single matching bean but found 2: clientRegistrationRepository1,clientRegistrationRepository2");
  }
@EnableWebMvc @EnableWebSecurity static class ClientRegistrationRepositoryRegisteredTwiceConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().oauth2Login();
    }
    @Bean public ClientRegistrationRepository clientRegistrationRepository1(){
      return mock(ClientRegistrationRepository.class);
    }
    @Bean public ClientRegistrationRepository clientRegistrationRepository2(){
      return mock(ClientRegistrationRepository.class);
    }
    @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository(){
      return mock(OAuth2AuthorizedClientRepository.class);
    }
  }
}
