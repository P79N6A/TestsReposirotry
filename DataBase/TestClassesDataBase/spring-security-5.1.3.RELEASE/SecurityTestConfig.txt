@EnableWebSecurity public static class SecurityTestConfig extends WebSecurityConfigurerAdapter {
  @Override protected void configure(  HttpSecurity http) throws Exception {
    http.authorizeRequests().anyRequest().authenticated().and().oauth2Login().tokenEndpoint().accessTokenResponseClient(this.mockAccessTokenResponseClient()).and().userInfoEndpoint().userService(this.mockUserService());
  }
  private OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> mockAccessTokenResponseClient(){
    OAuth2AccessTokenResponse accessTokenResponse=OAuth2AccessTokenResponse.withToken("access-token-1234").tokenType(OAuth2AccessToken.TokenType.BEARER).expiresIn(60 * 1000).build();
    OAuth2AccessTokenResponseClient tokenResponseClient=mock(OAuth2AccessTokenResponseClient.class);
    when(tokenResponseClient.getTokenResponse(any())).thenReturn(accessTokenResponse);
    return tokenResponseClient;
  }
  private OAuth2UserService<OAuth2UserRequest,OAuth2User> mockUserService(){
    Map<String,Object> attributes=new HashMap<>();
    attributes.put("id","joeg");
    attributes.put("first-name","Joe");
    attributes.put("last-name","Grandja");
    attributes.put("email","joeg@springsecurity.io");
    GrantedAuthority authority=new OAuth2UserAuthority(attributes);
    Set<GrantedAuthority> authorities=new HashSet<>();
    authorities.add(authority);
    DefaultOAuth2User user=new DefaultOAuth2User(authorities,attributes,"email");
    OAuth2UserService userService=mock(OAuth2UserService.class);
    when(userService.loadUser(any())).thenReturn(user);
    return userService;
  }
}
