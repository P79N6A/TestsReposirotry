/** 
 * @author Rob Winch
 */
public class HttpSecurityLogoutTests {
  AnnotationConfigWebApplicationContext context;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  MockFilterChain chain;
  @Autowired FilterChainProxy springSecurityFilterChain;
  @Before public void setup(){
    request=new MockHttpServletRequest("GET","");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
  }
  @After public void cleanup(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void clearAuthenticationFalse() throws Exception {
    loadConfig(ClearAuthenticationFalseConfig.class);
    SecurityContext currentContext=SecurityContextHolder.createEmptyContext();
    currentContext.setAuthentication(new TestingAuthenticationToken("user","password","ROLE_USER"));
    request.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,currentContext);
    request.setMethod("POST");
    request.setServletPath("/logout");
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(currentContext.getAuthentication()).isNotNull();
  }
@EnableWebSecurity @Configuration static class ClearAuthenticationFalseConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().disable().logout().clearAuthentication(false);
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication();
    }
  }
  public void loadConfig(  Class<?>... configs){
    context=new AnnotationConfigWebApplicationContext();
    context.register(configs);
    context.refresh();
    context.getAutowireCapableBeanFactory().autowireBean(this);
  }
}
