/** 
 * Tests the JaasApiIntegrationFilter.
 * @author Rob Winch
 */
public class JaasApiIntegrationFilterTests {
  private JaasApiIntegrationFilter filter;
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private Authentication token;
  private Subject authenticatedSubject;
  private Configuration testConfiguration;
  private CallbackHandler callbackHandler;
  @Before public void onBeforeTests() throws Exception {
    this.filter=new JaasApiIntegrationFilter();
    this.request=new MockHttpServletRequest();
    this.response=new MockHttpServletResponse();
    authenticatedSubject=new Subject();
    authenticatedSubject.getPrincipals().add(new Principal(){
      public String getName(){
        return "principal";
      }
    }
);
    authenticatedSubject.getPrivateCredentials().add("password");
    authenticatedSubject.getPublicCredentials().add("username");
    callbackHandler=new CallbackHandler(){
      public void handle(      Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        for (        Callback callback : callbacks) {
          if (callback instanceof NameCallback) {
            ((NameCallback)callback).setName("user");
          }
 else           if (callback instanceof PasswordCallback) {
            ((PasswordCallback)callback).setPassword("password".toCharArray());
          }
 else           if (callback instanceof TextInputCallback) {
          }
 else {
            throw new UnsupportedCallbackException(callback,"Unrecognized Callback " + callback);
          }
        }
      }
    }
;
    testConfiguration=new Configuration(){
      public void refresh(){
      }
      public AppConfigurationEntry[] getAppConfigurationEntry(      String name){
        return new AppConfigurationEntry[]{new AppConfigurationEntry(TestLoginModule.class.getName(),LoginModuleControlFlag.REQUIRED,new HashMap<>())};
      }
    }
;
    LoginContext ctx=new LoginContext("SubjectDoAsFilterTest",authenticatedSubject,callbackHandler,testConfiguration);
    ctx.login();
    token=new JaasAuthenticationToken("username","password",AuthorityUtils.createAuthorityList("ROLE_ADMIN"),ctx);
    SecurityContextHolder.clearContext();
  }
  @After public void onAfterTests(){
    SecurityContextHolder.clearContext();
  }
  /** 
 * Ensure a Subject was not setup in some other manner.
 */
  @Test public void currentSubjectNull(){
    assertThat(Subject.getSubject(AccessController.getContext())).isNull();
  }
  @Test public void obtainSubjectNullAuthentication(){
    assertNullSubject(filter.obtainSubject(request));
  }
  @Test public void obtainSubjectNonJaasAuthentication(){
    Authentication authentication=new TestingAuthenticationToken("un","pwd");
    authentication.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    assertNullSubject(filter.obtainSubject(request));
  }
  @Test public void obtainSubjectNullLoginContext(){
    token=new JaasAuthenticationToken("un","pwd",AuthorityUtils.createAuthorityList("ROLE_ADMIN"),null);
    SecurityContextHolder.getContext().setAuthentication(token);
    assertNullSubject(filter.obtainSubject(request));
  }
  @Test public void obtainSubjectNullSubject() throws Exception {
    LoginContext ctx=new LoginContext("obtainSubjectNullSubject",null,callbackHandler,testConfiguration);
    assertThat(ctx.getSubject()).isNull();
    token=new JaasAuthenticationToken("un","pwd",AuthorityUtils.createAuthorityList("ROLE_ADMIN"),ctx);
    SecurityContextHolder.getContext().setAuthentication(token);
    assertNullSubject(filter.obtainSubject(request));
  }
  @Test public void obtainSubject() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(token);
    assertThat(filter.obtainSubject(request)).isEqualTo(authenticatedSubject);
  }
  @Test public void doFilterCurrentSubjectPopulated() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(token);
    assertJaasSubjectEquals(authenticatedSubject);
  }
  @Test public void doFilterAuthenticationNotAuthenticated() throws Exception {
    token.setAuthenticated(false);
    SecurityContextHolder.getContext().setAuthentication(token);
    assertJaasSubjectEquals(null);
    filter.setCreateEmptySubject(true);
    assertJaasSubjectEquals(new Subject());
  }
  @Test public void doFilterAuthenticationNull() throws Exception {
    assertJaasSubjectEquals(null);
    filter.setCreateEmptySubject(true);
    assertJaasSubjectEquals(new Subject());
  }
  private void assertJaasSubjectEquals(  final Subject expectedValue) throws Exception {
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      ServletRequest request,      ServletResponse response) throws IOException, ServletException {
        Subject currentSubject=Subject.getSubject(AccessController.getContext());
        assertThat(currentSubject).isEqualTo(expectedValue);
        super.doFilter(request,response);
      }
    }
;
    filter.doFilter(request,response,chain);
    assertThat(chain.getRequest()).isNotNull();
  }
  private void assertNullSubject(  Subject subject){
    assertThat(subject).withFailMessage("Subject is expected to be null, but is not. Got " + subject).isNull();
  }
}
