/** 
 * Tests for  {@link OAuth2UserAuthority}.
 * @author Joe Grandja
 */
public class OAuth2UserAuthorityTests {
  private static final String AUTHORITY="ROLE_USER";
  private static final Map<String,Object> ATTRIBUTES=Collections.singletonMap("username","test");
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthorityIsNullThenThrowIllegalArgumentException(){
    new OAuth2UserAuthority(null,ATTRIBUTES);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAttributesIsNullThenThrowIllegalArgumentException(){
    new OAuth2UserAuthority(AUTHORITY,null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAttributesIsEmptyThenThrowIllegalArgumentException(){
    new OAuth2UserAuthority(AUTHORITY,Collections.emptyMap());
  }
  @Test public void constructorWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2UserAuthority userAuthority=new OAuth2UserAuthority(AUTHORITY,ATTRIBUTES);
    assertThat(userAuthority.getAuthority()).isEqualTo(AUTHORITY);
    assertThat(userAuthority.getAttributes()).isEqualTo(ATTRIBUTES);
  }
}
