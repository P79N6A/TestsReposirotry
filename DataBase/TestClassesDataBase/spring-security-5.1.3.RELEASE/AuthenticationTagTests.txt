/** 
 * Tests  {@link AuthenticationTag}.
 * @author Ben Alex
 */
public class AuthenticationTagTests {
  private final MyAuthenticationTag authenticationTag=new MyAuthenticationTag();
  private final Authentication auth=new TestingAuthenticationToken(new User("rodUserDetails","koala",true,true,true,true,AuthorityUtils.NO_AUTHORITIES),"koala",AuthorityUtils.NO_AUTHORITIES);
  @After public void tearDown(){
    SecurityContextHolder.clearContext();
  }
  @Test public void testOperationWhenPrincipalIsAUserDetailsInstance() throws JspException {
    SecurityContextHolder.getContext().setAuthentication(auth);
    authenticationTag.setProperty("name");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
    assertThat(authenticationTag.getLastMessage()).isEqualTo("rodUserDetails");
  }
  @Test public void testOperationWhenPrincipalIsAString() throws JspException {
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("rodAsString","koala",AuthorityUtils.NO_AUTHORITIES));
    authenticationTag.setProperty("principal");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
    assertThat(authenticationTag.getLastMessage()).isEqualTo("rodAsString");
  }
  @Test public void testNestedPropertyIsReadCorrectly() throws JspException {
    SecurityContextHolder.getContext().setAuthentication(auth);
    authenticationTag.setProperty("principal.username");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
    assertThat(authenticationTag.getLastMessage()).isEqualTo("rodUserDetails");
  }
  @Test public void testOperationWhenPrincipalIsNull() throws JspException {
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken(null,"koala",AuthorityUtils.NO_AUTHORITIES));
    authenticationTag.setProperty("principal");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
  }
  @Test public void testOperationWhenSecurityContextIsNull() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(null);
    authenticationTag.setProperty("principal");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
    assertThat(authenticationTag.getLastMessage()).isNull();
  }
  @Test public void testSkipsBodyIfNullOrEmptyOperation() throws Exception {
    authenticationTag.setProperty("");
    assertThat(authenticationTag.doStartTag()).isEqualTo(Tag.SKIP_BODY);
    assertThat(authenticationTag.doEndTag()).isEqualTo(Tag.EVAL_PAGE);
  }
  @Test public void testThrowsExceptionForUnrecognisedProperty(){
    SecurityContextHolder.getContext().setAuthentication(auth);
    authenticationTag.setProperty("qsq");
    try {
      authenticationTag.doStartTag();
      authenticationTag.doEndTag();
      fail("Should have throwns JspException");
    }
 catch (    JspException expected) {
    }
  }
  @Test public void htmlEscapingIsUsedByDefault() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("<>& ",""));
    authenticationTag.setProperty("name");
    authenticationTag.doStartTag();
    authenticationTag.doEndTag();
    assertThat(authenticationTag.getLastMessage()).isEqualTo("&lt;&gt;&amp;&#32;");
  }
  @Test public void settingHtmlEscapeToFalsePreventsEscaping() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("<>& ",""));
    authenticationTag.setProperty("name");
    authenticationTag.setHtmlEscape("false");
    authenticationTag.doStartTag();
    authenticationTag.doEndTag();
    assertThat(authenticationTag.getLastMessage()).isEqualTo("<>& ");
  }
private class MyAuthenticationTag extends AuthenticationTag {
    String lastMessage=null;
    public String getLastMessage(){
      return lastMessage;
    }
    protected void writeMessage(    String msg) throws JspException {
      lastMessage=msg;
    }
  }
}
