@EnableWebSecurity static class UseExpressionsConfig extends WebSecurityConfigurerAdapter {
  private Class<? extends FilterInvocationSecurityMetadataSource> filterInvocationSecurityMetadataSourceType;
  @Override protected void configure(  HttpSecurity http) throws Exception {
    http.authorizeRequests().antMatchers("/users**","/sessions/**").hasRole("USER").antMatchers("/signup").permitAll().anyRequest().hasRole("USER");
  }
  @Override public void init(  final WebSecurity web) throws Exception {
    super.init(web);
    final HttpSecurity http=this.getHttp();
    web.postBuildAction(() -> {
      FilterSecurityInterceptor securityInterceptor=http.getSharedObject(FilterSecurityInterceptor.class);
      UseExpressionsConfig.this.filterInvocationSecurityMetadataSourceType=securityInterceptor.getSecurityMetadataSource().getClass();
    }
);
  }
}
