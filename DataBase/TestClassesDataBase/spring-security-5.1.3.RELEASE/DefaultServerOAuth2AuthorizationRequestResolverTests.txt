/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class DefaultServerOAuth2AuthorizationRequestResolverTests {
  @Mock private ReactiveClientRegistrationRepository clientRegistrationRepository;
  private DefaultServerOAuth2AuthorizationRequestResolver resolver;
  private ClientRegistration registration=TestClientRegistrations.clientRegistration().build();
  @Before public void setup(){
    this.resolver=new DefaultServerOAuth2AuthorizationRequestResolver(this.clientRegistrationRepository);
  }
  @Test public void resolveWhenNotMatchThenNull(){
    assertThat(resolve("/")).isNull();
  }
  @Test public void resolveWhenClientRegistrationNotFoundMatchThenBadRequest(){
    when(this.clientRegistrationRepository.findByRegistrationId(any())).thenReturn(Mono.empty());
    ResponseStatusException expected=catchThrowableOfType(() -> resolve("/oauth2/authorization/not-found-id"),ResponseStatusException.class);
    assertThat(expected.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST);
  }
  @Test public void resolveWhenClientRegistrationFoundThenWorks(){
    when(this.clientRegistrationRepository.findByRegistrationId(any())).thenReturn(Mono.just(this.registration));
    OAuth2AuthorizationRequest request=resolve("/oauth2/authorization/not-found-id");
    assertThat(request.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.*?&redirect_uri=%2Flogin%2Foauth2%2Fcode%2Fregistration-id");
  }
  private OAuth2AuthorizationRequest resolve(  String path){
    ServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get(path));
    return this.resolver.resolve(exchange).block();
  }
}
