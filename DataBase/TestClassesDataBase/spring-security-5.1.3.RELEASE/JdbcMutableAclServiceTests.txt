/** 
 * Integration tests the ACL system using an in-memory database.
 * @author Ben Alex
 * @author Andrei Stefan
 */
@ContextConfiguration(locations={"/jdbcMutableAclServiceTests-context.xml"}) public class JdbcMutableAclServiceTests extends AbstractTransactionalJUnit4SpringContextTests {
  private static final String TARGET_CLASS=TargetObject.class.getName();
  private final Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_ADMINISTRATOR");
  public static final String SELECT_ALL_CLASSES="SELECT * FROM acl_class WHERE class = ?";
  private final ObjectIdentity topParentOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(100));
  private final ObjectIdentity middleParentOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(101));
  private final ObjectIdentity childOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(102));
  @Autowired private JdbcMutableAclService jdbcMutableAclService;
  @Autowired private AclCache aclCache;
  @Autowired private LookupStrategy lookupStrategy;
  @Autowired private DataSource dataSource;
  @Autowired private JdbcTemplate jdbcTemplate;
  protected String getSqlClassPathResource(){
    return "createAclSchema.sql";
  }
  protected ObjectIdentity getTopParentOid(){
    return topParentOid;
  }
  protected ObjectIdentity getMiddleParentOid(){
    return middleParentOid;
  }
  protected ObjectIdentity getChildOid(){
    return childOid;
  }
  protected String getTargetClass(){
    return TARGET_CLASS;
  }
  @BeforeTransaction public void createTables() throws Exception {
    try {
      new DatabaseSeeder(dataSource,new ClassPathResource(getSqlClassPathResource()));
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw e;
    }
  }
  @AfterTransaction public void clearContextAndData() throws Exception {
    SecurityContextHolder.clearContext();
    jdbcTemplate.execute("drop table acl_entry");
    jdbcTemplate.execute("drop table acl_object_identity");
    jdbcTemplate.execute("drop table acl_class");
    jdbcTemplate.execute("drop table acl_sid");
    aclCache.clearCache();
  }
  @Test @Transactional public void testLifecycle(){
    SecurityContextHolder.getContext().setAuthentication(auth);
    MutableAcl topParent=jdbcMutableAclService.createAcl(getTopParentOid());
    MutableAcl middleParent=jdbcMutableAclService.createAcl(getMiddleParentOid());
    MutableAcl child=jdbcMutableAclService.createAcl(getChildOid());
    middleParent.setParent(topParent);
    child.setParent(middleParent);
    topParent.insertAce(0,BasePermission.READ,new PrincipalSid(auth),true);
    topParent.insertAce(1,BasePermission.WRITE,new PrincipalSid(auth),false);
    middleParent.insertAce(0,BasePermission.DELETE,new PrincipalSid(auth),true);
    child.insertAce(0,BasePermission.DELETE,new PrincipalSid(auth),false);
    jdbcMutableAclService.updateAcl(topParent);
    jdbcMutableAclService.updateAcl(middleParent);
    jdbcMutableAclService.updateAcl(child);
    Map<ObjectIdentity,Acl> map=jdbcMutableAclService.readAclsById(Arrays.asList(getTopParentOid(),getMiddleParentOid(),getChildOid()));
    assertThat(map).hasSize(3);
    topParent=(MutableAcl)map.get(getTopParentOid());
    middleParent=(MutableAcl)map.get(getMiddleParentOid());
    child=(MutableAcl)map.get(getChildOid());
    assertThat(topParent.getId()).isNotNull();
    assertThat(middleParent.getId()).isNotNull();
    assertThat(child.getId()).isNotNull();
    assertThat(topParent.getParentAcl()).isNull();
    assertThat(middleParent.getParentAcl().getObjectIdentity()).isEqualTo(getTopParentOid());
    assertThat(child.getParentAcl().getObjectIdentity()).isEqualTo(getMiddleParentOid());
    assertThat(topParent.getEntries()).hasSize(2);
    assertThat(middleParent.getEntries()).hasSize(1);
    assertThat(child.getEntries()).hasSize(1);
    List<Permission> read=Arrays.asList(BasePermission.READ);
    List<Permission> write=Arrays.asList(BasePermission.WRITE);
    List<Permission> delete=Arrays.asList(BasePermission.DELETE);
    List<Sid> pSid=Arrays.asList((Sid)new PrincipalSid(auth));
    assertThat(topParent.isGranted(read,pSid,false)).isTrue();
    assertThat(topParent.isGranted(write,pSid,false)).isFalse();
    assertThat(middleParent.isGranted(delete,pSid,false)).isTrue();
    assertThat(child.isGranted(delete,pSid,false)).isFalse();
    try {
      child.isGranted(Arrays.asList(BasePermission.ADMINISTRATION),pSid,false);
      fail("Should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    assertThat(child.isGranted(read,pSid,false)).isTrue();
    assertThat(child.isGranted(write,pSid,false)).isFalse();
    assertThat(child.isGranted(delete,pSid,false)).isFalse();
    child.setEntriesInheriting(false);
    jdbcMutableAclService.updateAcl(child);
    child=(MutableAcl)jdbcMutableAclService.readAclById(getChildOid());
    assertThat(child.isEntriesInheriting()).isFalse();
    assertThat(child.isGranted(delete,pSid,true)).isFalse();
    try {
      child.isGranted(read,pSid,true);
      fail("Should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      child.isGranted(write,pSid,true);
      fail("Should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    child.insertAce(1,BasePermission.DELETE,new PrincipalSid(auth),true);
    child.insertAce(2,BasePermission.CREATE,new PrincipalSid(auth),true);
    jdbcMutableAclService.updateAcl(child);
    child=(MutableAcl)jdbcMutableAclService.readAclById(getChildOid());
    assertThat(child.getEntries()).hasSize(3);
    for (int i=0; i < child.getEntries().size(); i++) {
      System.out.println(child.getEntries().get(i));
    }
    assertThat(child.isGranted(delete,pSid,true)).isFalse();
    assertThat(child.isGranted(Arrays.asList(BasePermission.CREATE),pSid,true)).isTrue();
    AccessControlEntry entry=child.getEntries().get(0);
    assertThat(entry.getPermission().getMask()).isEqualTo(BasePermission.DELETE.getMask());
    assertThat(entry.getSid()).isEqualTo(new PrincipalSid(auth));
    assertThat(entry.isGranting()).isFalse();
    assertThat(entry.getId()).isNotNull();
    child.deleteAce(0);
    child=jdbcMutableAclService.updateAcl(child);
    assertThat(child.getEntries()).hasSize(2);
    assertThat(child.isGranted(delete,pSid,false)).isTrue();
    SecurityContextHolder.clearContext();
  }
  /** 
 * Test method that demonstrates eviction failure from cache - SEC-676
 */
  @Test @Transactional public void deleteAclAlsoDeletesChildren() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(auth);
    jdbcMutableAclService.createAcl(getTopParentOid());
    MutableAcl middleParent=jdbcMutableAclService.createAcl(getMiddleParentOid());
    MutableAcl child=jdbcMutableAclService.createAcl(getChildOid());
    child.setParent(middleParent);
    jdbcMutableAclService.updateAcl(middleParent);
    jdbcMutableAclService.updateAcl(child);
    Acl childAcl=jdbcMutableAclService.readAclById(getChildOid());
    assertThat(childAcl.getParentAcl().getObjectIdentity()).isEqualTo(getMiddleParentOid());
    jdbcMutableAclService.deleteAcl(getMiddleParentOid(),true);
    try {
      jdbcMutableAclService.readAclById(getMiddleParentOid());
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    try {
      jdbcMutableAclService.readAclById(getChildOid());
      fail("It should have thrown NotFoundException");
    }
 catch (    NotFoundException expected) {
    }
    Acl acl=jdbcMutableAclService.readAclById(getTopParentOid());
    assertThat(acl).isNotNull();
    assertThat(getTopParentOid()).isEqualTo(((MutableAcl)acl).getObjectIdentity());
  }
  @Test public void constructorRejectsNullParameters() throws Exception {
    try {
      new JdbcMutableAclService(null,lookupStrategy,aclCache);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      new JdbcMutableAclService(dataSource,null,aclCache);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      new JdbcMutableAclService(dataSource,lookupStrategy,null);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void createAclRejectsNullParameter() throws Exception {
    try {
      jdbcMutableAclService.createAcl(null);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test @Transactional public void createAclForADuplicateDomainObject() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity duplicateOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(100));
    jdbcMutableAclService.createAcl(duplicateOid);
    try {
      jdbcMutableAclService.createAcl(duplicateOid);
      fail("It should have thrown AlreadyExistsException");
    }
 catch (    AlreadyExistsException expected) {
    }
  }
  @Test @Transactional public void deleteAclRejectsNullParameters() throws Exception {
    try {
      jdbcMutableAclService.deleteAcl(null,true);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test @Transactional public void deleteAclWithChildrenThrowsException() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(auth);
    MutableAcl parent=jdbcMutableAclService.createAcl(getTopParentOid());
    MutableAcl child=jdbcMutableAclService.createAcl(getMiddleParentOid());
    child.setParent(parent);
    jdbcMutableAclService.updateAcl(child);
    try {
      jdbcMutableAclService.setForeignKeysInDatabase(false);
      jdbcMutableAclService.deleteAcl(getTopParentOid(),false);
      fail("It should have thrown ChildrenExistException");
    }
 catch (    ChildrenExistException expected) {
    }
 finally {
      jdbcMutableAclService.setForeignKeysInDatabase(true);
    }
  }
  @Test @Transactional public void deleteAclRemovesRowsFromDatabase() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(auth);
    MutableAcl child=jdbcMutableAclService.createAcl(getChildOid());
    child.insertAce(0,BasePermission.DELETE,new PrincipalSid(auth),false);
    jdbcMutableAclService.updateAcl(child);
    jdbcMutableAclService.deleteAcl(getChildOid(),false);
    assertThat(jdbcTemplate.queryForList(SELECT_ALL_CLASSES,new Object[]{getTargetClass()})).hasSize(1);
    assertThat(jdbcTemplate.queryForList("select * from acl_object_identity")).isEmpty();
    assertThat(jdbcTemplate.queryForList("select * from acl_entry")).isEmpty();
    assertThat(aclCache.getFromCache(getChildOid())).isNull();
    assertThat(aclCache.getFromCache(Long.valueOf(102))).isNull();
  }
  /** 
 * SEC-1107 
 */
  @Test @Transactional public void identityWithIntegerIdIsSupportedByCreateAcl() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity oid=new ObjectIdentityImpl(TARGET_CLASS,Integer.valueOf(101));
    jdbcMutableAclService.createAcl(oid);
    assertThat(jdbcMutableAclService.readAclById(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(101)))).isNotNull();
  }
  /** 
 * SEC-655
 */
  @Test @Transactional public void childrenAreClearedFromCacheWhenParentIsUpdated() throws Exception {
    Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_ADMINISTRATOR");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity parentOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(104));
    ObjectIdentity childOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(105));
    MutableAcl parent=jdbcMutableAclService.createAcl(parentOid);
    MutableAcl child=jdbcMutableAclService.createAcl(childOid);
    child.setParent(parent);
    jdbcMutableAclService.updateAcl(child);
    parent=(AclImpl)jdbcMutableAclService.readAclById(parentOid);
    parent.insertAce(0,BasePermission.READ,new PrincipalSid("ben"),true);
    jdbcMutableAclService.updateAcl(parent);
    parent=(AclImpl)jdbcMutableAclService.readAclById(parentOid);
    parent.insertAce(1,BasePermission.READ,new PrincipalSid("scott"),true);
    jdbcMutableAclService.updateAcl(parent);
    child=(MutableAcl)jdbcMutableAclService.readAclById(childOid);
    parent=(MutableAcl)child.getParentAcl();
    assertThat(parent.getEntries()).hasSize(2).withFailMessage("Fails because child has a stale reference to its parent");
    assertThat(parent.getEntries().get(0).getPermission().getMask()).isEqualTo(1);
    assertThat(parent.getEntries().get(0).getSid()).isEqualTo(new PrincipalSid("ben"));
    assertThat(parent.getEntries().get(1).getPermission().getMask()).isEqualTo(1);
    assertThat(parent.getEntries().get(1).getSid()).isEqualTo(new PrincipalSid("scott"));
  }
  /** 
 * SEC-655
 */
  @Test @Transactional public void childrenAreClearedFromCacheWhenParentisUpdated2() throws Exception {
    Authentication auth=new TestingAuthenticationToken("system","secret","ROLE_IGNORED");
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentityImpl rootObject=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(1));
    MutableAcl parent=jdbcMutableAclService.createAcl(rootObject);
    MutableAcl child=jdbcMutableAclService.createAcl(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(2)));
    child.setParent(parent);
    jdbcMutableAclService.updateAcl(child);
    parent.insertAce(0,BasePermission.ADMINISTRATION,new GrantedAuthoritySid("ROLE_ADMINISTRATOR"),true);
    jdbcMutableAclService.updateAcl(parent);
    parent.insertAce(1,BasePermission.DELETE,new PrincipalSid("terry"),true);
    jdbcMutableAclService.updateAcl(parent);
    child=(MutableAcl)jdbcMutableAclService.readAclById(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(2)));
    parent=(MutableAcl)child.getParentAcl();
    assertThat(parent.getEntries()).hasSize(2);
    assertThat(parent.getEntries().get(0).getPermission().getMask()).isEqualTo(16);
    assertThat(parent.getEntries().get(0).getSid()).isEqualTo(new GrantedAuthoritySid("ROLE_ADMINISTRATOR"));
    assertThat(parent.getEntries().get(1).getPermission().getMask()).isEqualTo(8);
    assertThat(parent.getEntries().get(1).getSid()).isEqualTo(new PrincipalSid("terry"));
  }
  @Test @Transactional public void cumulativePermissions(){
    Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_ADMINISTRATOR");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity topParentOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(110));
    MutableAcl topParent=jdbcMutableAclService.createAcl(topParentOid);
    Permission cm=new CumulativePermission().set(BasePermission.READ).set(BasePermission.ADMINISTRATION);
    assertThat(cm.getMask()).isEqualTo(17);
    Sid benSid=new PrincipalSid(auth);
    topParent.insertAce(0,cm,benSid,true);
    assertThat(topParent.getEntries()).hasSize(1);
    topParent=jdbcMutableAclService.updateAcl(topParent);
    assertThat(topParent.getEntries().get(0).getPermission().getMask()).isEqualTo(17);
    assertThat(topParent.isGranted(Arrays.asList(cm),Arrays.asList(benSid),true)).isTrue();
    SecurityContextHolder.clearContext();
  }
  @Test public void testProcessingCustomSid(){
    CustomJdbcMutableAclService customJdbcMutableAclService=spy(new CustomJdbcMutableAclService(dataSource,lookupStrategy,aclCache));
    CustomSid customSid=new CustomSid("Custom sid");
    when(customJdbcMutableAclService.createOrRetrieveSidPrimaryKey("Custom sid",false,false)).thenReturn(1L);
    Long result=customJdbcMutableAclService.createOrRetrieveSidPrimaryKey(customSid,false);
    assertThat(new Long(1L)).isEqualTo(result);
  }
  /** 
 * This class needed to show how to extend  {@link JdbcMutableAclService} forprocessing custom  {@link Sid} implementations
 */
private class CustomJdbcMutableAclService extends JdbcMutableAclService {
    private CustomJdbcMutableAclService(    DataSource dataSource,    LookupStrategy lookupStrategy,    AclCache aclCache){
      super(dataSource,lookupStrategy,aclCache);
    }
    @Override protected Long createOrRetrieveSidPrimaryKey(    Sid sid,    boolean allowCreate){
      String sidName;
      boolean isPrincipal=false;
      if (sid instanceof CustomSid) {
        sidName=((CustomSid)sid).getSid();
      }
 else       if (sid instanceof GrantedAuthoritySid) {
        sidName=((GrantedAuthoritySid)sid).getGrantedAuthority();
      }
 else {
        sidName=((PrincipalSid)sid).getPrincipal();
        isPrincipal=true;
      }
      return createOrRetrieveSidPrimaryKey(sidName,isPrincipal,allowCreate);
    }
  }
  protected Authentication getAuth(){
    return auth;
  }
  protected JdbcMutableAclService getJdbcMutableAclService(){
    return jdbcMutableAclService;
  }
}
