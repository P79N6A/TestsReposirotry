/** 
 * Tests  {@link AuthenticationSimpleHttpInvokerRequestExecutor}.
 * @author Ben Alex
 * @author Rob Winch
 */
public class AuthenticationSimpleHttpInvokerRequestExecutorTests {
  @After public void tearDown() throws Exception {
    SecurityContextHolder.clearContext();
  }
  @Test public void testNormalOperation() throws Exception {
    Authentication clientSideAuthentication=new UsernamePasswordAuthenticationToken("Aladdin","open sesame");
    SecurityContextHolder.getContext().setAuthentication(clientSideAuthentication);
    AuthenticationSimpleHttpInvokerRequestExecutor executor=new AuthenticationSimpleHttpInvokerRequestExecutor();
    HttpURLConnection conn=new MockHttpURLConnection(new URL("http://localhost/"));
    executor.prepareConnection(conn,10);
    assertThat(conn.getRequestProperty("Authorization")).isEqualTo("Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
  }
  @Test public void testNullContextHolderIsNull() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(null);
    AuthenticationSimpleHttpInvokerRequestExecutor executor=new AuthenticationSimpleHttpInvokerRequestExecutor();
    HttpURLConnection conn=new MockHttpURLConnection(new URL("http://localhost/"));
    executor.prepareConnection(conn,10);
    assertThat(conn.getRequestProperty("Authorization")).isNull();
  }
  @Test public void testNullContextHolderWhenAnonymous() throws Exception {
    AnonymousAuthenticationToken anonymous=new AnonymousAuthenticationToken("key","principal",AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS"));
    SecurityContextHolder.getContext().setAuthentication(anonymous);
    AuthenticationSimpleHttpInvokerRequestExecutor executor=new AuthenticationSimpleHttpInvokerRequestExecutor();
    HttpURLConnection conn=new MockHttpURLConnection(new URL("http://localhost/"));
    executor.prepareConnection(conn,10);
    assertThat(conn.getRequestProperty("Authorization")).isNull();
  }
private class MockHttpURLConnection extends HttpURLConnection {
    private Map<String,String> requestProperties=new HashMap<>();
    public MockHttpURLConnection(    URL u){
      super(u);
    }
    public void connect() throws IOException {
      throw new UnsupportedOperationException("mock not implemented");
    }
    public void disconnect(){
      throw new UnsupportedOperationException("mock not implemented");
    }
    public String getRequestProperty(    String key){
      return requestProperties.get(key);
    }
    public void setRequestProperty(    String key,    String value){
      requestProperties.put(key,value);
    }
    public boolean usingProxy(){
      throw new UnsupportedOperationException("mock not implemented");
    }
  }
}
