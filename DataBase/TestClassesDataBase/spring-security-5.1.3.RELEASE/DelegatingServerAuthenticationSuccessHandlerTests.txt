/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingServerAuthenticationSuccessHandlerTests {
  @Mock private ServerAuthenticationSuccessHandler delegate1;
  @Mock private ServerAuthenticationSuccessHandler delegate2;
  private PublisherProbe<Void> delegate1Result=PublisherProbe.empty();
  private PublisherProbe<Void> delegate2Result=PublisherProbe.empty();
  @Mock private WebFilterExchange exchange;
  @Mock private Authentication authentication;
  @Before public void setup(){
    when(this.delegate1.onAuthenticationSuccess(any(),any())).thenReturn(this.delegate1Result.mono());
    when(this.delegate2.onAuthenticationSuccess(any(),any())).thenReturn(this.delegate2Result.mono());
  }
  @Test public void constructorWhenNullThenIllegalArgumentException(){
    assertThatThrownBy(() -> new DelegatingServerAuthenticationSuccessHandler((ServerAuthenticationSuccessHandler[])null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenEmptyThenIllegalArgumentException(){
    assertThatThrownBy(() -> new DelegatingServerAuthenticationSuccessHandler(new ServerAuthenticationSuccessHandler[0])).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void onAuthenticationSuccessWhenSingleThenExecuted(){
    DelegatingServerAuthenticationSuccessHandler handler=new DelegatingServerAuthenticationSuccessHandler(this.delegate1);
    handler.onAuthenticationSuccess(this.exchange,this.authentication).block();
    this.delegate1Result.assertWasSubscribed();
  }
  @Test public void onAuthenticationSuccessWhenMultipleThenExecuted(){
    DelegatingServerAuthenticationSuccessHandler handler=new DelegatingServerAuthenticationSuccessHandler(this.delegate1,this.delegate2);
    handler.onAuthenticationSuccess(this.exchange,this.authentication).block();
    this.delegate1Result.assertWasSubscribed();
    this.delegate2Result.assertWasSubscribed();
  }
}
