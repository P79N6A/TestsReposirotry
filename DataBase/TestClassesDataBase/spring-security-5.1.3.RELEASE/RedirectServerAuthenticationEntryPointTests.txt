/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class RedirectServerAuthenticationEntryPointTests {
  @Mock private ServerWebExchange exchange;
  @Mock private ServerRedirectStrategy redirectStrategy;
  private String location="/login";
  private RedirectServerAuthenticationEntryPoint entryPoint=new RedirectServerAuthenticationEntryPoint(this.location);
  private AuthenticationException exception=new AuthenticationCredentialsNotFoundException("Authentication Required");
  @Test(expected=IllegalArgumentException.class) public void constructorStringWhenNullLocationThenException(){
    new RedirectServerAuthenticationEntryPoint((String)null);
  }
  @Test public void commenceWhenNoSubscribersThenNoActions(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.entryPoint.commence(this.exchange,this.exception);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).isNull();
    assertThat(this.exchange.getSession().block().isStarted()).isFalse();
  }
  @Test public void commenceWhenSubscribeThenStatusAndLocationSet(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.entryPoint.commence(this.exchange,this.exception).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath(this.location);
  }
  @Test public void commenceWhenCustomServerRedirectStrategyThenCustomServerRedirectStrategyUsed(){
    PublisherProbe<Void> redirectResult=PublisherProbe.empty();
    when(this.redirectStrategy.sendRedirect(any(),any())).thenReturn(redirectResult.mono());
    this.entryPoint.setRedirectStrategy(this.redirectStrategy);
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.entryPoint.commence(this.exchange,this.exception).block();
    redirectResult.assertWasSubscribed();
  }
  @Test(expected=IllegalArgumentException.class) public void setRedirectStrategyWhenNullThenException(){
    this.entryPoint.setRedirectStrategy(null);
  }
}
