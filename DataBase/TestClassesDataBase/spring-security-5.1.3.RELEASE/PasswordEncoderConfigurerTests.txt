/** 
 * @author Rob Winch
 */
public class PasswordEncoderConfigurerTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void passwordEncoderRefWhenNoAuthenticationManagerBeanThenNoExceptionThrown(){
    this.spring.register(PasswordEncoderConfig.class).autowire();
  }
@EnableWebSecurity static class PasswordEncoderConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      BCryptPasswordEncoder encoder=passwordEncoder();
      auth.inMemoryAuthentication().withUser("user").password(encoder.encode("password")).roles("USER").and().passwordEncoder(encoder);
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
    @Bean public BCryptPasswordEncoder passwordEncoder(){
      return new BCryptPasswordEncoder();
    }
  }
  @Test public void passwordEncoderRefWhenAuthenticationManagerBuilderThenAuthenticationSuccess() throws Exception {
    this.spring.register(PasswordEncoderNoAuthManagerLoadsConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated());
  }
@EnableWebSecurity static class PasswordEncoderNoAuthManagerLoadsConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      BCryptPasswordEncoder encoder=passwordEncoder();
      auth.inMemoryAuthentication().withUser("user").password(encoder.encode("password")).roles("USER").and().passwordEncoder(encoder);
    }
    @Bean public BCryptPasswordEncoder passwordEncoder(){
      return new BCryptPasswordEncoder();
    }
  }
}
