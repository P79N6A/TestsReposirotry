/** 
 * @author Josh Cummings
 */
public class SessionManagementConfigurerTransientAuthenticationTests {
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void postWhenTransientAuthenticationThenNoSessionCreated() throws Exception {
    this.spring.register(WithTransientAuthenticationConfig.class).autowire();
    MvcResult result=this.mvc.perform(post("/login")).andReturn();
    assertThat(result.getRequest().getSession(false)).isNull();
  }
  @Test public void postWhenTransientAuthenticationThenAlwaysSessionOverrides() throws Exception {
    this.spring.register(AlwaysCreateSessionConfig.class).autowire();
    MvcResult result=this.mvc.perform(post("/login")).andReturn();
    assertThat(result.getRequest().getSession(false)).isNotNull();
  }
@EnableWebSecurity static class WithTransientAuthenticationConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      super.configure(http);
      http.csrf().disable();
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.authenticationProvider(new TransientAuthenticationProvider());
    }
  }
@EnableWebSecurity static class AlwaysCreateSessionConfig extends WithTransientAuthenticationConfig {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.ALWAYS);
    }
  }
static class TransientAuthenticationProvider implements AuthenticationProvider {
    @Override public Authentication authenticate(    Authentication authentication) throws AuthenticationException {
      return new SomeTransientAuthentication();
    }
    @Override public boolean supports(    Class<?> authentication){
      return true;
    }
  }
@Transient static class SomeTransientAuthentication extends AbstractAuthenticationToken {
    SomeTransientAuthentication(){
      super(null);
    }
    @Override public Object getCredentials(){
      return null;
    }
    @Override public Object getPrincipal(){
      return null;
    }
  }
}
