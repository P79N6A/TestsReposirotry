/** 
 * @author Rob Winch
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=WithMockUserTests.Config.class) public class WithMockUserTests {
  @Autowired private MessageService messageService;
  @Test(expected=AuthenticationCredentialsNotFoundException.class) public void getMessageUnauthenticated(){
    messageService.getMessage();
  }
  @Test @WithMockUser public void getMessageWithMockUser(){
    String message=messageService.getMessage();
    assertThat(message).contains("user");
  }
  @Test @WithMockUser("customUsername") public void getMessageWithMockUserCustomUsername(){
    String message=messageService.getMessage();
    assertThat(message).contains("customUsername");
  }
  @Test @WithMockUser(username="admin",roles={"USER","ADMIN"}) public void getMessageWithMockUserCustomUser(){
    String message=messageService.getMessage();
    assertThat(message).contains("admin").contains("ROLE_USER").contains("ROLE_ADMIN");
  }
  @Test @WithMockUser(username="admin",authorities={"ADMIN","USER"}) public void getMessageWithMockUserCustomAuthorities(){
    String message=messageService.getMessage();
    assertThat(message).contains("admin").contains("ADMIN").contains("USER").doesNotContain("ROLE_");
  }
@EnableGlobalMethodSecurity(prePostEnabled=true) @ComponentScan(basePackageClasses=HelloMessageService.class) static class Config {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
    }
  }
}
