/** 
 * Tests for  {@link OidcUserRequest}.
 * @author Joe Grandja
 */
public class OidcUserRequestTests {
  private ClientRegistration clientRegistration;
  private OAuth2AccessToken accessToken;
  private OidcIdToken idToken;
  private Map<String,Object> additionalParameters;
  @Before public void setUp(){
    this.clientRegistration=ClientRegistration.withRegistrationId("registration-1").clientId("client-1").clientSecret("secret").clientAuthenticationMethod(ClientAuthenticationMethod.BASIC).authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).redirectUriTemplate("https://client.com").scope(new LinkedHashSet<>(Arrays.asList("openid","profile"))).authorizationUri("https://provider.com/oauth2/authorization").tokenUri("https://provider.com/oauth2/token").jwkSetUri("https://provider.com/keys").clientName("Client 1").build();
    this.accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,"access-token-1234",Instant.now(),Instant.now().plusSeconds(60),new LinkedHashSet<>(Arrays.asList("scope1","scope2")));
    Map<String,Object> claims=new HashMap<>();
    claims.put(IdTokenClaimNames.ISS,"https://provider.com");
    claims.put(IdTokenClaimNames.SUB,"subject1");
    claims.put(IdTokenClaimNames.AZP,"client-1");
    this.idToken=new OidcIdToken("id-token-1234",Instant.now(),Instant.now().plusSeconds(3600),claims);
    this.additionalParameters=new HashMap<>();
    this.additionalParameters.put("param1","value1");
    this.additionalParameters.put("param2","value2");
  }
  @Test public void constructorWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OidcUserRequest(null,this.accessToken,this.idToken)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenAccessTokenIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OidcUserRequest(this.clientRegistration,null,this.idToken)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenIdTokenIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OidcUserRequest(this.clientRegistration,this.accessToken,null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenAllParametersProvidedAndValidThenCreated(){
    OidcUserRequest userRequest=new OidcUserRequest(this.clientRegistration,this.accessToken,this.idToken,this.additionalParameters);
    assertThat(userRequest.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(userRequest.getAccessToken()).isEqualTo(this.accessToken);
    assertThat(userRequest.getIdToken()).isEqualTo(this.idToken);
    assertThat(userRequest.getAdditionalParameters()).containsAllEntriesOf(this.additionalParameters);
  }
}
