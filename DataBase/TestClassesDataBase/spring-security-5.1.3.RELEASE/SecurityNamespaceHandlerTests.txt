/** 
 * @author Luke Taylor
 * @author Rob Winch
 * @since 3.0
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ClassUtils.class}) @PowerMockIgnore({"org.w3c.dom.*","org.xml.sax.*","org.apache.xerces.*","javax.xml.parsers.*"}) public class SecurityNamespaceHandlerTests {
  @Rule public ExpectedException thrown=ExpectedException.none();
  private static final String XML_AUTHENTICATION_MANAGER="<authentication-manager>" + "  <authentication-provider>" + "    <user-service id='us'>"+ "      <user name='bob' password='bobspassword' authorities='ROLE_A' />"+ "    </user-service>"+ "  </authentication-provider>"+ "</authentication-manager>";
  private static final String XML_HTTP_BLOCK="<http auto-config='true'/>";
  private static final String FILTER_CHAIN_PROXY_CLASSNAME="org.springframework.security.web.FilterChainProxy";
  @Test public void constructionSucceeds(){
    new SecurityNamespaceHandler();
    new BeanIds(){
    }
;
    new Elements(){
    }
;
  }
  @Test public void pre32SchemaAreNotSupported() throws Exception {
    try {
      new InMemoryXmlApplicationContext("<user-service id='us'>" + "  <user name='bob' password='bobspassword' authorities='ROLE_A' />" + "</user-service>","3.0.3",null);
      fail("Expected BeanDefinitionParsingException");
    }
 catch (    BeanDefinitionParsingException expected) {
      assertThat(expected.getMessage().contains("You cannot use a spring-security-2.0.xsd"));
    }
  }
  @Test public void initDoesNotLogErrorWhenFilterChainProxyFailsToLoad() throws Exception {
    String className="javax.servlet.Filter";
    spy(ClassUtils.class);
    doThrow(new NoClassDefFoundError(className)).when(ClassUtils.class,"forName",eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    Log logger=mock(Log.class);
    SecurityNamespaceHandler handler=new SecurityNamespaceHandler();
    ReflectionTestUtils.setField(handler,"logger",logger);
    handler.init();
    verifyStatic(ClassUtils.class);
    ClassUtils.forName(eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    verifyZeroInteractions(logger);
  }
  @Test public void filterNoClassDefFoundError() throws Exception {
    String className="javax.servlet.Filter";
    thrown.expect(BeanDefinitionParsingException.class);
    thrown.expectMessage("NoClassDefFoundError: " + className);
    spy(ClassUtils.class);
    doThrow(new NoClassDefFoundError(className)).when(ClassUtils.class,"forName",eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    new InMemoryXmlApplicationContext(XML_AUTHENTICATION_MANAGER + XML_HTTP_BLOCK);
  }
  @Test public void filterNoClassDefFoundErrorNoHttpBlock() throws Exception {
    String className="javax.servlet.Filter";
    spy(ClassUtils.class);
    doThrow(new NoClassDefFoundError(className)).when(ClassUtils.class,"forName",eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    new InMemoryXmlApplicationContext(XML_AUTHENTICATION_MANAGER);
  }
  @Test public void filterChainProxyClassNotFoundException() throws Exception {
    String className=FILTER_CHAIN_PROXY_CLASSNAME;
    thrown.expect(BeanDefinitionParsingException.class);
    thrown.expectMessage("ClassNotFoundException: " + className);
    spy(ClassUtils.class);
    doThrow(new ClassNotFoundException(className)).when(ClassUtils.class,"forName",eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    new InMemoryXmlApplicationContext(XML_AUTHENTICATION_MANAGER + XML_HTTP_BLOCK);
  }
  @Test public void filterChainProxyClassNotFoundExceptionNoHttpBlock() throws Exception {
    String className=FILTER_CHAIN_PROXY_CLASSNAME;
    spy(ClassUtils.class);
    doThrow(new ClassNotFoundException(className)).when(ClassUtils.class,"forName",eq(FILTER_CHAIN_PROXY_CLASSNAME),any(ClassLoader.class));
    new InMemoryXmlApplicationContext(XML_AUTHENTICATION_MANAGER);
  }
  @Test public void websocketNotFoundExceptionNoMessageBlock() throws Exception {
    String className=FILTER_CHAIN_PROXY_CLASSNAME;
    spy(ClassUtils.class);
    doThrow(new ClassNotFoundException(className)).when(ClassUtils.class,"forName",eq(Message.class.getName()),any(ClassLoader.class));
    new InMemoryXmlApplicationContext(XML_AUTHENTICATION_MANAGER);
  }
}
