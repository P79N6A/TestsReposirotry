/** 
 * Checks that the embedded version information is up to date.
 * @author Luke Taylor
 * @author Rob Winch
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({SpringSecurityCoreVersion.class,SpringVersion.class}) public class SpringSecurityCoreVersionTests {
  @Mock private Log logger;
  @Before public void setup(){
    Whitebox.setInternalState(SpringSecurityCoreVersion.class,logger);
  }
  @After public void cleanup() throws Exception {
    System.clearProperty(getDisableChecksProperty());
  }
  @Test public void springVersionIsUpToDate() throws Exception {
    String springVersion=System.getProperty("springVersion");
    assertThat(SpringSecurityCoreVersion.MIN_SPRING_VERSION).isEqualTo(springVersion);
  }
  @Test public void serialVersionMajorAndMinorVersionMatchBuildVersion() throws Exception {
    String version=System.getProperty("springSecurityVersion");
    String serialVersion=String.valueOf(SpringSecurityCoreVersion.SERIAL_VERSION_UID).substring(0,2);
    assertThat(serialVersion.charAt(0)).isEqualTo(version.charAt(0));
    assertThat(serialVersion.charAt(1)).isEqualTo(version.charAt(2));
  }
  @Test public void noLoggingIfVersionsAreEqual() throws Exception {
    String version="1";
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn(version).when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn(version).when(SpringVersion.class,"getVersion");
    performChecks();
    verifyZeroInteractions(logger);
  }
  @Test public void noLoggingIfSpringVersionNull() throws Exception {
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn("1").when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn(null).when(SpringVersion.class,"getVersion");
    performChecks();
    verifyZeroInteractions(logger);
  }
  @Test public void warnIfSpringVersionTooSmall() throws Exception {
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn("3").when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn("2").when(SpringVersion.class,"getVersion");
    performChecks();
    verify(logger,times(1)).warn(any());
  }
  @Test public void noWarnIfSpringVersionLarger() throws Exception {
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn("4.0.0.RELEASE").when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn("4.0.0.RELEASE").when(SpringVersion.class,"getVersion");
    performChecks();
    verify(logger,never()).warn(any());
  }
  @Test public void noWarnIfSpringPatchVersionDoubleDigits() throws Exception {
    String minSpringVersion="3.2.8.RELEASE";
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn("3.2.0.RELEASE").when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn("3.2.10.RELEASE").when(SpringVersion.class,"getVersion");
    performChecks(minSpringVersion);
    verify(logger,never()).warn(any());
  }
  @Test public void noLoggingIfPropertySet() throws Exception {
    spy(SpringSecurityCoreVersion.class);
    spy(SpringVersion.class);
    doReturn("3").when(SpringSecurityCoreVersion.class,"getVersion");
    doReturn("2").when(SpringVersion.class,"getVersion");
    System.setProperty(getDisableChecksProperty(),Boolean.TRUE.toString());
    performChecks();
    verifyZeroInteractions(logger);
  }
  private String getDisableChecksProperty() throws Exception {
    return SpringSecurityCoreVersion.class.getName().concat(".DISABLE_CHECKS");
  }
  private void performChecks() throws Exception {
    Whitebox.invokeMethod(SpringSecurityCoreVersion.class,"performVersionChecks");
  }
  private void performChecks(  String minSpringVersion) throws Exception {
    Whitebox.invokeMethod(SpringSecurityCoreVersion.class,"performVersionChecks",minSpringVersion);
  }
}
