/** 
 * Tests for  {@link JwtAuthenticationProvider}
 * @author Josh Cummings
 */
@RunWith(MockitoJUnitRunner.class) public class JwtAuthenticationProviderTests {
  @Mock Converter<Jwt,JwtAuthenticationToken> jwtAuthenticationConverter;
  @Mock JwtDecoder jwtDecoder;
  JwtAuthenticationProvider provider;
  @Before public void setup(){
    this.provider=new JwtAuthenticationProvider(this.jwtDecoder);
    this.provider.setJwtAuthenticationConverter(jwtAuthenticationConverter);
  }
  @Test public void authenticateWhenJwtDecodesThenAuthenticationHasAttributesContainedInJwt(){
    BearerTokenAuthenticationToken token=this.authentication();
    Map<String,Object> claims=new HashMap<>();
    claims.put("name","value");
    Jwt jwt=this.jwt(claims);
    when(this.jwtDecoder.decode("token")).thenReturn(jwt);
    when(this.jwtAuthenticationConverter.convert(jwt)).thenReturn(new JwtAuthenticationToken(jwt));
    JwtAuthenticationToken authentication=(JwtAuthenticationToken)this.provider.authenticate(token);
    assertThat(authentication.getTokenAttributes()).isEqualTo(claims);
  }
  @Test public void authenticateWhenJwtDecodeFailsThenRespondsWithInvalidToken(){
    BearerTokenAuthenticationToken token=this.authentication();
    when(this.jwtDecoder.decode("token")).thenThrow(JwtException.class);
    assertThatCode(() -> this.provider.authenticate(token)).matches(failed -> failed instanceof OAuth2AuthenticationException).matches(errorCode(BearerTokenErrorCodes.INVALID_TOKEN));
  }
  @Test public void authenticateWhenDecoderThrowsIncompatibleErrorMessageThenWrapsWithGenericOne(){
    BearerTokenAuthenticationToken token=this.authentication();
    when(this.jwtDecoder.decode(token.getToken())).thenThrow(new JwtException("with \"invalid\" chars"));
    assertThatCode(() -> this.provider.authenticate(token)).isInstanceOf(OAuth2AuthenticationException.class).hasFieldOrPropertyWithValue("error.description","An error occurred while attempting to decode the Jwt: Invalid token");
  }
  @Test public void authenticateWhenConverterReturnsAuthenticationThenProviderPropagatesIt(){
    BearerTokenAuthenticationToken token=this.authentication();
    Object details=mock(Object.class);
    token.setDetails(details);
    Jwt jwt=this.jwt(Collections.singletonMap("some","value"));
    JwtAuthenticationToken authentication=new JwtAuthenticationToken(jwt);
    when(this.jwtDecoder.decode(token.getToken())).thenReturn(jwt);
    when(this.jwtAuthenticationConverter.convert(jwt)).thenReturn(authentication);
    assertThat(this.provider.authenticate(token)).isEqualTo(authentication).hasFieldOrPropertyWithValue("details",details);
  }
  @Test public void supportsWhenBearerTokenAuthenticationTokenThenReturnsTrue(){
    assertThat(this.provider.supports(BearerTokenAuthenticationToken.class)).isTrue();
  }
  private BearerTokenAuthenticationToken authentication(){
    return new BearerTokenAuthenticationToken("token");
  }
  private Jwt jwt(  Map<String,Object> claims){
    Map<String,Object> headers=new HashMap<>();
    headers.put("alg",JwsAlgorithms.RS256);
    return new Jwt("token",Instant.now(),Instant.now().plusSeconds(3600),headers,claims);
  }
  private Predicate<? super Throwable> errorCode(  String errorCode){
    return failed -> ((OAuth2AuthenticationException)failed).getError().getErrorCode() == errorCode;
  }
}
