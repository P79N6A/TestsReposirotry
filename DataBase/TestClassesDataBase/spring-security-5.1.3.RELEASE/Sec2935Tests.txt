/** 
 * @author Rob Winch
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @WebAppConfiguration public class Sec2935Tests {
  @Autowired WebApplicationContext context;
  MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
  }
  @Test public void postProcessorUserNoUser() throws Exception {
    mvc.perform(get("/admin/abc").with(user("user").roles("ADMIN","USER"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user"));
    mvc.perform(get("/admin/abc")).andExpect(status().isUnauthorized()).andExpect(unauthenticated());
  }
  @Test public void postProcessorUserOtherUser() throws Exception {
    mvc.perform(get("/admin/abc").with(user("user1").roles("ADMIN","USER"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user1"));
    mvc.perform(get("/admin/abc").with(user("user2").roles("USER"))).andExpect(status().isForbidden()).andExpect(authenticated().withUsername("user2"));
  }
  @WithMockUser @Test public void postProcessorUserWithMockUser() throws Exception {
    mvc.perform(get("/admin/abc").with(user("user1").roles("ADMIN","USER"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user1"));
    mvc.perform(get("/admin/abc")).andExpect(status().isForbidden()).andExpect(authenticated().withUsername("user"));
  }
  @Test public void defaultRequest() throws Exception {
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).defaultRequest(get("/").with(user("default"))).build();
    mvc.perform(get("/admin/abc").with(user("user1").roles("ADMIN","USER"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user1"));
    mvc.perform(get("/admin/abc")).andExpect(status().isForbidden()).andExpect(authenticated().withUsername("default"));
  }
  @Ignore @WithMockUser @Test public void defaultRequestOverridesWithMockUser() throws Exception {
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).defaultRequest(get("/").with(user("default"))).build();
    mvc.perform(get("/admin/abc").with(user("user1").roles("ADMIN","USER"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user1"));
    mvc.perform(get("/admin/abc")).andExpect(status().isForbidden()).andExpect(authenticated().withUsername("default"));
  }
@EnableWebSecurity @Configuration static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().antMatchers("/admin/**").hasRole("ADMIN").anyRequest().authenticated().and().httpBasic();
    }
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication();
    }
  }
}
