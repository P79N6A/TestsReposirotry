@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=CustomLoginRequestBuilderAuthenticationTests.Config.class) @WebAppConfiguration public class CustomLoginRequestBuilderAuthenticationTests {
  @Autowired private WebApplicationContext context;
  private MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
  }
  @Test public void authenticationSuccess() throws Exception {
    mvc.perform(login()).andExpect(status().isFound()).andExpect(redirectedUrl("/")).andExpect(authenticated().withUsername("user"));
  }
  @Test public void authenticationFailed() throws Exception {
    mvc.perform(login().user("notfound").password("invalid")).andExpect(status().isFound()).andExpect(redirectedUrl("/authenticate?error")).andExpect(unauthenticated());
  }
  static FormLoginRequestBuilder login(){
    return SecurityMockMvcRequestBuilders.formLogin("/authenticate").userParameter("user").passwordParam("pass");
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().formLogin().usernameParameter("user").passwordParameter("pass").loginPage("/authenticate");
    }
    @Bean public UserDetailsService userDetailsService(){
      UserDetails user=User.withDefaultPasswordEncoder().username("user").password("password").roles("USER").build();
      return new InMemoryUserDetailsManager(user);
    }
  }
}
