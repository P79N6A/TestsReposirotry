/** 
 * @author Rob Winch
 */
public class AbstractVariableEvaluationContextPostProcessorTests {
  static final String KEY="a";
  static final String VALUE="b";
  VariableEvaluationContextPostProcessor processor;
  FilterInvocation invocation;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  EvaluationContext context;
  @Before public void setup(){
    this.processor=new VariableEvaluationContextPostProcessor();
    this.request=new MockHttpServletRequest();
    this.request.setServletPath("/");
    this.response=new MockHttpServletResponse();
    this.invocation=new FilterInvocation(this.request,this.response,new MockFilterChain());
    this.context=new StandardEvaluationContext();
  }
  @Test public void extractVariables(){
    this.context=this.processor.postProcess(this.context,this.invocation);
    assertThat(this.context.lookupVariable(KEY)).isEqualTo(VALUE);
  }
  @Test public void extractVariablesOnlyUsedOnce(){
    this.context=this.processor.postProcess(this.context,this.invocation);
    assertThat(this.context.lookupVariable(KEY)).isEqualTo(VALUE);
    this.processor.results=Collections.emptyMap();
    assertThat(this.context.lookupVariable(KEY)).isEqualTo(VALUE);
  }
static class VariableEvaluationContextPostProcessor extends AbstractVariableEvaluationContextPostProcessor {
    Map<String,String> results=Collections.singletonMap(KEY,VALUE);
    @Override protected Map<String,String> extractVariables(    HttpServletRequest request){
      return this.results;
    }
  }
}
