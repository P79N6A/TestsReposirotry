/** 
 * @author Rob Winch
 * @since 5.0
 */
public class WebTestClientHtmlUnitDriverBuilderTests {
  @Test public void helloWorld(){
    WebTestClient webTestClient=WebTestClient.bindToController(new HelloWorldController()).build();
    WebDriver driver=WebTestClientHtmlUnitDriverBuilder.webTestClientSetup(webTestClient).build();
    driver.get("http://localhost/");
    assertThat(driver.getPageSource()).contains("Hello World");
  }
  /** 
 * @author Rob Winch
 * @since 5.0
 */
@Controller class HelloWorldController {
    @ResponseBody @GetMapping(produces=MediaType.TEXT_HTML_VALUE) public String index(){
      return "<html>\n" + "<head>\n" + "<title>Hello World</title>\n"+ "</head>\n"+ "<body>\n"+ "<h1>Hello World</h1>\n"+ "</body>\n"+ "</html>";
    }
  }
  @Test public void cookies(){
    WebTestClient webTestClient=WebTestClient.bindToController(new CookieController()).build();
    WebDriver driver=WebTestClientHtmlUnitDriverBuilder.webTestClientSetup(webTestClient).build();
    driver.get("http://localhost/cookie");
    assertThat(driver.getPageSource()).contains("theCookie");
    driver.get("http://localhost/cookie/delete");
    assertThat(driver.getPageSource()).contains("null");
  }
@Controller @ResponseBody class CookieController {
    @GetMapping(path="/",produces=MediaType.TEXT_HTML_VALUE) public String view(    @CookieValue(required=false) String cookieName){
      return "<html>\n" + "<head>\n" + "<title>Hello World</title>\n"+ "</head>\n"+ "<body>\n"+ "<h1>" + TextEscapeUtils.escapeEntities(cookieName) + "</h1>\n"+ "</body>\n"+ "</html>";
    }
    @GetMapping("/cookie") public Mono<Void> setCookie(    ServerHttpResponse response){
      response.addCookie(ResponseCookie.from("cookieName","theCookie").build());
      return redirect(response);
    }
    private Mono<Void> redirect(    ServerHttpResponse response){
      response.setStatusCode(HttpStatus.MOVED_PERMANENTLY);
      response.getHeaders().setLocation(URI.create("/"));
      return response.setComplete();
    }
    @GetMapping("/cookie/delete") public Mono<Void> deleteCookie(    ServerHttpResponse response){
      response.addCookie(ResponseCookie.from("cookieName","").maxAge(Duration.ofSeconds(0)).build());
      return redirect(response);
    }
  }
}
