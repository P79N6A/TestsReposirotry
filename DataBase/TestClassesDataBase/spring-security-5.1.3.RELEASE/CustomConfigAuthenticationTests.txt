@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=CustomConfigAuthenticationTests.Config.class) @WebAppConfiguration public class CustomConfigAuthenticationTests {
  @Autowired private WebApplicationContext context;
  @Autowired private SecurityContextRepository securityContextRepository;
  private MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
  }
  @Test public void authenticationSuccess() throws Exception {
    mvc.perform(formLogin("/authenticate").user("user","user").password("pass","password")).andExpect(status().isFound()).andExpect(redirectedUrl("/")).andExpect(authenticated().withUsername("user"));
  }
  @Test public void withUserSuccess() throws Exception {
    mvc.perform(get("/").with(user("user"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user"));
  }
  @Test public void authenticationFailed() throws Exception {
    mvc.perform(formLogin("/authenticate").user("user","notfound").password("pass","invalid")).andExpect(status().isFound()).andExpect(redirectedUrl("/authenticate?error")).andExpect(unauthenticated());
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().securityContext().securityContextRepository(securityContextRepository()).and().formLogin().usernameParameter("user").passwordParameter("pass").loginPage("/authenticate");
    }
    @Bean public UserDetailsService userDetailsService(){
      UserDetails user=User.withDefaultPasswordEncoder().username("user").password("password").roles("USER").build();
      return new InMemoryUserDetailsManager(user);
    }
    @Bean public SecurityContextRepository securityContextRepository(){
      HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
      repo.setSpringSecurityContextKey("CUSTOM");
      return repo;
    }
  }
}
