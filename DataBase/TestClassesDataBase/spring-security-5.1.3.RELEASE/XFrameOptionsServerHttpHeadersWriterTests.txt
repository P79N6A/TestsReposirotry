/** 
 * @author Rob Winch
 * @since 5.0
 */
public class XFrameOptionsServerHttpHeadersWriterTests {
  ServerWebExchange exchange=exchange(MockServerHttpRequest.get("/"));
  XFrameOptionsServerHttpHeadersWriter writer;
  @Before public void setup(){
    writer=new XFrameOptionsServerHttpHeadersWriter();
  }
  @Test public void writeHeadersWhenUsingDefaultsThenWritesDeny(){
    writer.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers.get(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS)).containsOnly("DENY");
  }
  @Test public void writeHeadersWhenUsingExplicitDenyThenWritesDeny(){
    writer.setMode(XFrameOptionsServerHttpHeadersWriter.Mode.DENY);
    writer.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers.get(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS)).containsOnly("DENY");
  }
  @Test public void writeHeadersWhenUsingSameOriginThenWritesSameOrigin(){
    writer.setMode(XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN);
    writer.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers.get(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS)).containsOnly("SAMEORIGIN");
  }
  @Test public void writeHeadersWhenAlreadyWrittenThenWritesHeader(){
    String headerValue="other";
    exchange.getResponse().getHeaders().set(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS,headerValue);
    writer.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers.get(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS)).containsOnly(headerValue);
  }
  private static MockServerWebExchange exchange(  MockServerHttpRequest.BaseBuilder<?> request){
    return MockServerWebExchange.from(request.build());
  }
}
