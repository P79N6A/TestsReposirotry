/** 
 * Tests for  {@link DefaultOAuth2User}.
 * @author Vedran Pavic
 * @author Joe Grandja
 */
public class DefaultOAuth2UserTests {
  private static final SimpleGrantedAuthority AUTHORITY=new SimpleGrantedAuthority("ROLE_USER");
  private static final Set<GrantedAuthority> AUTHORITIES=Collections.singleton(AUTHORITY);
  private static final String ATTRIBUTE_NAME_KEY="username";
  private static final String USERNAME="test";
  private static final Map<String,Object> ATTRIBUTES=Collections.singletonMap(ATTRIBUTE_NAME_KEY,USERNAME);
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthoritiesIsNullThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(null,ATTRIBUTES,ATTRIBUTE_NAME_KEY);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAuthoritiesIsEmptyThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(Collections.emptySet(),ATTRIBUTES,ATTRIBUTE_NAME_KEY);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAttributesIsNullThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(AUTHORITIES,null,ATTRIBUTE_NAME_KEY);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAttributesIsEmptyThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(AUTHORITIES,Collections.emptyMap(),ATTRIBUTE_NAME_KEY);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenNameAttributeKeyIsNullThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(AUTHORITIES,ATTRIBUTES,null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenNameAttributeKeyIsInvalidThenThrowIllegalArgumentException(){
    new DefaultOAuth2User(AUTHORITIES,ATTRIBUTES,"invalid");
  }
  @Test public void constructorWhenAllParametersProvidedAndValidThenCreated(){
    DefaultOAuth2User user=new DefaultOAuth2User(AUTHORITIES,ATTRIBUTES,ATTRIBUTE_NAME_KEY);
    assertThat(user.getName()).isEqualTo(USERNAME);
    assertThat(user.getAuthorities()).hasSize(1);
    assertThat(user.getAuthorities().iterator().next()).isEqualTo(AUTHORITY);
    assertThat(user.getAttributes()).containsOnlyKeys(ATTRIBUTE_NAME_KEY);
  }
  @Test public void constructorWhenCreatedThenIsSerializable(){
    DefaultOAuth2User user=new DefaultOAuth2User(AUTHORITIES,ATTRIBUTES,ATTRIBUTE_NAME_KEY);
    SerializationUtils.serialize(user);
  }
}
