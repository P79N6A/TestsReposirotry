/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class AndServerWebExchangeMatcherTests {
  @Mock ServerWebExchange exchange;
  @Mock ServerWebExchangeMatcher matcher1;
  @Mock ServerWebExchangeMatcher matcher2;
  AndServerWebExchangeMatcher matcher;
  @Before public void setUp() throws Exception {
    matcher=new AndServerWebExchangeMatcher(matcher1,matcher2);
  }
  @Test public void matchesWhenTrueTrueThenTrue() throws Exception {
    Map<String,Object> params1=Collections.singletonMap("foo","bar");
    Map<String,Object> params2=Collections.singletonMap("x","y");
    when(matcher1.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.match(params1));
    when(matcher2.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.match(params2));
    ServerWebExchangeMatcher.MatchResult matches=matcher.matches(exchange).block();
    assertThat(matches.isMatch()).isTrue();
    assertThat(matches.getVariables()).hasSize(2);
    assertThat(matches.getVariables()).containsAllEntriesOf(params1);
    assertThat(matches.getVariables()).containsAllEntriesOf(params2);
    verify(matcher1).matches(exchange);
    verify(matcher2).matches(exchange);
  }
  @Test public void matchesWhenFalseFalseThenFalseAndMatcher2NotInvoked() throws Exception {
    when(matcher1.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.notMatch());
    ServerWebExchangeMatcher.MatchResult matches=matcher.matches(exchange).block();
    assertThat(matches.isMatch()).isFalse();
    assertThat(matches.getVariables()).isEmpty();
    verify(matcher1).matches(exchange);
    verify(matcher2,never()).matches(exchange);
  }
  @Test public void matchesWhenTrueFalseThenFalse() throws Exception {
    Map<String,Object> params=Collections.singletonMap("foo","bar");
    when(matcher1.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.match(params));
    when(matcher2.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.notMatch());
    ServerWebExchangeMatcher.MatchResult matches=matcher.matches(exchange).block();
    assertThat(matches.isMatch()).isFalse();
    assertThat(matches.getVariables()).isEmpty();
    verify(matcher1).matches(exchange);
    verify(matcher2).matches(exchange);
  }
  @Test public void matchesWhenFalseTrueThenFalse() throws Exception {
    when(matcher1.matches(exchange)).thenReturn(ServerWebExchangeMatcher.MatchResult.notMatch());
    ServerWebExchangeMatcher.MatchResult matches=matcher.matches(exchange).block();
    assertThat(matches.isMatch()).isFalse();
    assertThat(matches.getVariables()).isEmpty();
    verify(matcher1).matches(exchange);
    verify(matcher2,never()).matches(exchange);
  }
}
