/** 
 * @author Rob Winch
 */
public class XXssProtectionHeaderWriterTests {
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private XXssProtectionHeaderWriter writer;
  @Before public void setup(){
    request=new MockHttpServletRequest();
    response=new MockHttpServletResponse();
    writer=new XXssProtectionHeaderWriter();
  }
  @Test public void writeHeaders(){
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeaderValues("X-XSS-Protection")).containsOnly("1; mode=block");
  }
  @Test public void writeHeadersNoBlock(){
    writer.setBlock(false);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeaderValues("X-XSS-Protection")).containsOnly("1");
  }
  @Test public void writeHeadersDisabled(){
    writer.setBlock(false);
    writer.setEnabled(false);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeaderValues("X-XSS-Protection")).containsOnly("0");
  }
  @Test public void setEnabledFalseWithBlockTrue(){
    writer.setEnabled(false);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeaderValues("X-XSS-Protection")).containsOnly("0");
  }
  @Test(expected=IllegalArgumentException.class) public void setBlockTrueWithEnabledFalse(){
    writer.setBlock(false);
    writer.setEnabled(false);
    writer.setBlock(true);
  }
}
