/** 
 * Tests  {@link ServiceProperties}.
 * @author Ben Alex
 */
public class ServicePropertiesTests {
  @Test(expected=IllegalArgumentException.class) public void detectsMissingService() throws Exception {
    ServiceProperties sp=new ServiceProperties();
    sp.afterPropertiesSet();
  }
  @Test public void nullServiceWhenAuthenticateAllTokens() throws Exception {
    ServiceProperties sp=new ServiceProperties();
    sp.setAuthenticateAllArtifacts(true);
    try {
      sp.afterPropertiesSet();
      fail("Expected Exception");
    }
 catch (    IllegalArgumentException success) {
    }
    sp.setAuthenticateAllArtifacts(false);
    try {
      sp.afterPropertiesSet();
      fail("Expected Exception");
    }
 catch (    IllegalArgumentException success) {
    }
  }
  @Test public void testGettersSetters() throws Exception {
    ServiceProperties[] sps={new ServiceProperties(),new SamlServiceProperties()};
    for (    ServiceProperties sp : sps) {
      sp.setSendRenew(false);
      assertThat(sp.isSendRenew()).isFalse();
      sp.setSendRenew(true);
      assertThat(sp.isSendRenew()).isTrue();
      sp.setArtifactParameter("notticket");
      assertThat(sp.getArtifactParameter()).isEqualTo("notticket");
      sp.setServiceParameter("notservice");
      assertThat(sp.getServiceParameter()).isEqualTo("notservice");
      sp.setService("https://mycompany.com/service");
      assertThat(sp.getService()).isEqualTo("https://mycompany.com/service");
      sp.afterPropertiesSet();
    }
  }
}
