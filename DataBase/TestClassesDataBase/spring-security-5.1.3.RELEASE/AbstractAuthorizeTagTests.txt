/** 
 * @author Rob Winch
 */
public class AbstractAuthorizeTagTests {
  private AbstractAuthorizeTag tag;
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private MockServletContext servletContext;
  @Before public void setup(){
    tag=new AuthzTag();
    request=new MockHttpServletRequest();
    response=new MockHttpServletResponse();
    servletContext=new MockServletContext();
  }
  @After public void teardown(){
    SecurityContextHolder.clearContext();
  }
  @Test public void privilegeEvaluatorFromRequest() throws IOException {
    String uri="/something";
    WebInvocationPrivilegeEvaluator expected=mock(WebInvocationPrivilegeEvaluator.class);
    tag.setUrl(uri);
    request.setAttribute(WebAttributes.WEB_INVOCATION_PRIVILEGE_EVALUATOR_ATTRIBUTE,expected);
    tag.authorizeUsingUrlCheck();
    verify(expected).isAllowed(eq(""),eq(uri),eq("GET"),any());
  }
  @Test public void privilegeEvaluatorFromChildContext() throws IOException {
    String uri="/something";
    WebInvocationPrivilegeEvaluator expected=mock(WebInvocationPrivilegeEvaluator.class);
    tag.setUrl(uri);
    WebApplicationContext wac=mock(WebApplicationContext.class);
    when(wac.getBeansOfType(WebInvocationPrivilegeEvaluator.class)).thenReturn(Collections.singletonMap("wipe",expected));
    servletContext.setAttribute("org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher",wac);
    tag.authorizeUsingUrlCheck();
    verify(expected).isAllowed(eq(""),eq(uri),eq("GET"),any());
  }
  @Test @SuppressWarnings("rawtypes") public void expressionFromChildContext() throws IOException {
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user","pass","USER"));
    DefaultWebSecurityExpressionHandler expected=new DefaultWebSecurityExpressionHandler();
    tag.setAccess("permitAll");
    WebApplicationContext wac=mock(WebApplicationContext.class);
    when(wac.getBeansOfType(SecurityExpressionHandler.class)).thenReturn(Collections.<String,SecurityExpressionHandler>singletonMap("wipe",expected));
    servletContext.setAttribute("org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher",wac);
    assertThat(tag.authorize()).isTrue();
  }
private class AuthzTag extends AbstractAuthorizeTag {
    @Override protected ServletRequest getRequest(){
      return request;
    }
    @Override protected ServletResponse getResponse(){
      return response;
    }
    @Override protected ServletContext getServletContext(){
      return servletContext;
    }
  }
}
