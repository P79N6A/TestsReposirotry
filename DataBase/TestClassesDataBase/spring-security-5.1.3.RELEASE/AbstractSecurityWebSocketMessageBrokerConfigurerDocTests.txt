public class AbstractSecurityWebSocketMessageBrokerConfigurerDocTests {
  AnnotationConfigWebApplicationContext context;
  TestingAuthenticationToken messageUser;
  CsrfToken token;
  String sessionAttr;
  @Before public void setup(){
    token=new DefaultCsrfToken("header","param","token");
    sessionAttr="sessionAttr";
    messageUser=new TestingAuthenticationToken("user","pass","ROLE_USER");
  }
  @After public void cleanup(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void securityMappings(){
    loadConfig(WebSocketSecurityConfig.class);
    clientInboundChannel().send(message("/user/queue/errors",SimpMessageType.SUBSCRIBE));
    try {
      clientInboundChannel().send(message("/denyAll",SimpMessageType.MESSAGE));
      fail("Expected Exception");
    }
 catch (    MessageDeliveryException expected) {
      assertThat(expected.getCause()).isInstanceOf(AccessDeniedException.class);
    }
  }
  private void loadConfig(  Class<?>... configs){
    context=new AnnotationConfigWebApplicationContext();
    context.register(configs);
    context.register(WebSocketConfig.class,SyncExecutorConfig.class);
    context.setServletConfig(new MockServletConfig());
    context.refresh();
  }
  private MessageChannel clientInboundChannel(){
    return context.getBean("clientInboundChannel",MessageChannel.class);
  }
  private Message<String> message(  String destination,  SimpMessageType type){
    SimpMessageHeaderAccessor headers=SimpMessageHeaderAccessor.create(type);
    return message(headers,destination);
  }
  private Message<String> message(  SimpMessageHeaderAccessor headers,  String destination){
    headers.setSessionId("123");
    headers.setSessionAttributes(new HashMap<>());
    if (destination != null) {
      headers.setDestination(destination);
    }
    if (messageUser != null) {
      headers.setUser(messageUser);
    }
    return new GenericMessage<>("hi",headers.getMessageHeaders());
  }
@Controller static class MyController {
    @MessageMapping("/authentication") public void authentication(    @AuthenticationPrincipal String un){
    }
  }
@Configuration static class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {
    @Override protected void configureInbound(    MessageSecurityMetadataSourceRegistry messages){
      messages.nullDestMatcher().authenticated().simpSubscribeDestMatchers("/user/queue/errors").permitAll().simpDestMatchers("/app/**").hasRole("USER").simpSubscribeDestMatchers("/user/**","/topic/friends/*").hasRole("USER").simpTypeMatchers(MESSAGE,SUBSCRIBE).denyAll().anyMessage().denyAll();
    }
  }
@Configuration @EnableWebSocketMessageBroker static class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {
    public void registerStompEndpoints(    StompEndpointRegistry registry){
      registry.addEndpoint("/chat").withSockJS();
    }
    @Override public void configureMessageBroker(    MessageBrokerRegistry registry){
      registry.enableSimpleBroker("/queue/","/topic/");
      registry.setApplicationDestinationPrefixes("/permitAll","/denyAll");
    }
    @Bean public MyController myController(){
      return new MyController();
    }
  }
@Configuration static class SyncExecutorConfig {
    @Bean public static SyncExecutorSubscribableChannelPostProcessor postProcessor(){
      return new SyncExecutorSubscribableChannelPostProcessor();
    }
  }
}
