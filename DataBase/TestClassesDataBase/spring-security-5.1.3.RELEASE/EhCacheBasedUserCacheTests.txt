/** 
 * Tests  {@link EhCacheBasedUserCache}.
 * @author Ben Alex
 */
public class EhCacheBasedUserCacheTests {
  private static CacheManager cacheManager;
  @BeforeClass public static void initCacheManaer(){
    cacheManager=CacheManager.create();
    cacheManager.addCache(new Cache("ehcacheusercachetests",500,false,false,30,30));
  }
  @AfterClass public static void shutdownCacheManager(){
    cacheManager.removalAll();
    cacheManager.shutdown();
  }
  private Ehcache getCache(){
    Ehcache cache=cacheManager.getCache("ehcacheusercachetests");
    cache.removeAll();
    return cache;
  }
  private User getUser(){
    return new User("john","password",true,true,true,true,AuthorityUtils.createAuthorityList("ROLE_ONE","ROLE_TWO"));
  }
  @Test public void cacheOperationsAreSuccessful() throws Exception {
    EhCacheBasedUserCache cache=new EhCacheBasedUserCache();
    cache.setCache(getCache());
    cache.afterPropertiesSet();
    cache.putUserInCache(getUser());
    assertThat(getUser().getPassword()).isEqualTo(cache.getUserFromCache(getUser().getUsername()).getPassword());
    cache.removeUserFromCache(getUser());
    assertThat(cache.getUserFromCache(getUser().getUsername())).isNull();
    assertThat(cache.getUserFromCache(null)).isNull();
    assertThat(cache.getUserFromCache("UNKNOWN_USER")).isNull();
  }
  @Test(expected=IllegalArgumentException.class) public void startupDetectsMissingCache() throws Exception {
    EhCacheBasedUserCache cache=new EhCacheBasedUserCache();
    cache.afterPropertiesSet();
    fail("Should have thrown IllegalArgumentException");
    Ehcache myCache=getCache();
    cache.setCache(myCache);
    assertThat(cache.getCache()).isEqualTo(myCache);
  }
}
