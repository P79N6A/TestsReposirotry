/** 
 * Tests  {@link RemoteAuthenticationProvider}.
 * @author Ben Alex
 */
public class RemoteAuthenticationProviderTests {
  @Test public void testExceptionsGetPassedBackToCaller(){
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    provider.setRemoteAuthenticationManager(new MockRemoteAuthenticationManager(false));
    try {
      provider.authenticate(new UsernamePasswordAuthenticationToken("rod","password"));
      fail("Should have thrown RemoteAuthenticationException");
    }
 catch (    RemoteAuthenticationException expected) {
    }
  }
  @Test public void testGettersSetters(){
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    provider.setRemoteAuthenticationManager(new MockRemoteAuthenticationManager(true));
    assertThat(provider.getRemoteAuthenticationManager()).isNotNull();
  }
  @Test public void testStartupChecksAuthenticationManagerSet() throws Exception {
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    try {
      provider.afterPropertiesSet();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    provider.setRemoteAuthenticationManager(new MockRemoteAuthenticationManager(true));
    provider.afterPropertiesSet();
  }
  @Test public void testSuccessfulAuthenticationCreatesObject(){
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    provider.setRemoteAuthenticationManager(new MockRemoteAuthenticationManager(true));
    Authentication result=provider.authenticate(new UsernamePasswordAuthenticationToken("rod","password"));
    assertThat(result.getPrincipal()).isEqualTo("rod");
    assertThat(result.getCredentials()).isEqualTo("password");
    assertThat(AuthorityUtils.authorityListToSet(result.getAuthorities())).contains("foo");
  }
  @Test public void testNullCredentialsDoesNotCauseNullPointerException(){
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    provider.setRemoteAuthenticationManager(new MockRemoteAuthenticationManager(false));
    try {
      provider.authenticate(new UsernamePasswordAuthenticationToken("rod",null));
      fail("Expected Exception");
    }
 catch (    RemoteAuthenticationException success) {
    }
  }
  @Test public void testSupports(){
    RemoteAuthenticationProvider provider=new RemoteAuthenticationProvider();
    assertThat(provider.supports(UsernamePasswordAuthenticationToken.class)).isTrue();
  }
private class MockRemoteAuthenticationManager implements RemoteAuthenticationManager {
    private boolean grantAccess;
    public MockRemoteAuthenticationManager(    boolean grantAccess){
      this.grantAccess=grantAccess;
    }
    public Collection<? extends GrantedAuthority> attemptAuthentication(    String username,    String password) throws RemoteAuthenticationException {
      if (this.grantAccess) {
        return AuthorityUtils.createAuthorityList("foo");
      }
 else {
        throw new RemoteAuthenticationException("as requested");
      }
    }
  }
}
