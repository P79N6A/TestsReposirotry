/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(SpringRunner.class) @SecurityTestExecutionListeners public class OAuth2ClientSpecTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  private WebTestClient client;
  private ClientRegistration registration=TestClientRegistrations.clientRegistration().build();
  @Autowired public void setApplicationContext(  ApplicationContext context){
    this.client=WebTestClient.bindToApplicationContext(context).build();
  }
  @Test @WithMockUser public void registeredOAuth2AuthorizedClientWhenAuthenticatedThenRedirects(){
    this.spring.register(Config.class,AuthorizedClientController.class).autowire();
    ReactiveClientRegistrationRepository repository=this.spring.getContext().getBean(ReactiveClientRegistrationRepository.class);
    ServerOAuth2AuthorizedClientRepository authorizedClientRepository=this.spring.getContext().getBean(ServerOAuth2AuthorizedClientRepository.class);
    when(repository.findByRegistrationId(any())).thenReturn(Mono.just(TestClientRegistrations.clientRegistration().build()));
    when(authorizedClientRepository.loadAuthorizedClient(any(),any(),any())).thenReturn(Mono.empty());
    this.client.get().uri("/").exchange().expectStatus().is3xxRedirection();
  }
  @Test public void registeredOAuth2AuthorizedClientWhenAnonymousThenRedirects(){
    this.spring.register(Config.class,AuthorizedClientController.class).autowire();
    ReactiveClientRegistrationRepository repository=this.spring.getContext().getBean(ReactiveClientRegistrationRepository.class);
    ServerOAuth2AuthorizedClientRepository authorizedClientRepository=this.spring.getContext().getBean(ServerOAuth2AuthorizedClientRepository.class);
    when(repository.findByRegistrationId(any())).thenReturn(Mono.just(TestClientRegistrations.clientRegistration().build()));
    when(authorizedClientRepository.loadAuthorizedClient(any(),any(),any())).thenReturn(Mono.empty());
    this.client.get().uri("/").exchange().expectStatus().is3xxRedirection();
  }
@EnableWebFlux @EnableWebFluxSecurity static class Config {
    @Bean SecurityWebFilterChain springSecurity(    ServerHttpSecurity http){
      http.oauth2Client();
      return http.build();
    }
    @Bean ReactiveClientRegistrationRepository clientRegistrationRepository(){
      return mock(ReactiveClientRegistrationRepository.class);
    }
    @Bean ServerOAuth2AuthorizedClientRepository authorizedClientRepository(){
      return mock(ServerOAuth2AuthorizedClientRepository.class);
    }
  }
@RestController static class AuthorizedClientController {
    @GetMapping("/") String home(    @RegisteredOAuth2AuthorizedClient("github") OAuth2AuthorizedClient authorizedClient){
      return "home";
    }
  }
  @Test public void oauth2ClientWhenCustomObjectsThenUsed(){
    this.spring.register(ClientRegistrationConfig.class,OAuth2ClientCustomConfig.class,AuthorizedClientController.class).autowire();
    OAuth2ClientCustomConfig config=this.spring.getContext().getBean(OAuth2ClientCustomConfig.class);
    ServerAuthenticationConverter converter=config.authenticationConverter;
    ReactiveAuthenticationManager manager=config.manager;
    OAuth2AuthorizationExchange exchange=TestOAuth2AuthorizationExchanges.success();
    OAuth2AccessToken accessToken=TestOAuth2AccessTokens.noScopes();
    OAuth2AuthorizationCodeAuthenticationToken result=new OAuth2AuthorizationCodeAuthenticationToken(this.registration,exchange,accessToken);
    when(converter.convert(any())).thenReturn(Mono.just(new TestingAuthenticationToken("a","b","c")));
    when(manager.authenticate(any())).thenReturn(Mono.just(result));
    this.client.get().uri("/authorize/oauth2/code/registration-id").exchange().expectStatus().is3xxRedirection();
    verify(converter).convert(any());
    verify(manager).authenticate(any());
  }
@EnableWebFlux @EnableWebFluxSecurity static class ClientRegistrationConfig {
    private ClientRegistration clientRegistration=TestClientRegistrations.clientRegistration().build();
    @Bean InMemoryReactiveClientRegistrationRepository clientRegistrationRepository(){
      return new InMemoryReactiveClientRegistrationRepository(this.clientRegistration);
    }
  }
@Configuration static class OAuth2ClientCustomConfig {
    ReactiveAuthenticationManager manager=mock(ReactiveAuthenticationManager.class);
    ServerAuthenticationConverter authenticationConverter=mock(ServerAuthenticationConverter.class);
    @Bean public SecurityWebFilterChain springSecurityFilter(    ServerHttpSecurity http){
      http.oauth2Client().authenticationConverter(this.authenticationConverter).authenticationManager(this.manager);
      return http.build();
    }
  }
}
