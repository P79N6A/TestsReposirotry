/** 
 * Tests for  {@link WebSecurityConfigurerAdapter}.
 * @author Rob Winch
 * @author Joe Grandja
 */
@PrepareForTest({WebAsyncManager.class}) @RunWith(PowerMockRunner.class) @PowerMockIgnore({"org.w3c.dom.*","org.xml.sax.*","org.apache.xerces.*","javax.xml.parsers.*","javax.xml.transform.*"}) public class WebSecurityConfigurerAdapterTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void loadConfigWhenRequestSecureThenDefaultSecurityHeadersReturned() throws Exception {
    this.spring.register(HeadersArePopulatedByDefaultConfig.class).autowire();
    this.mockMvc.perform(get("/").secure(true)).andExpect(header().string("X-Content-Type-Options","nosniff")).andExpect(header().string("X-Frame-Options","DENY")).andExpect(header().string("Strict-Transport-Security","max-age=31536000 ; includeSubDomains")).andExpect(header().string("Cache-Control","no-cache, no-store, max-age=0, must-revalidate")).andExpect(header().string("Pragma","no-cache")).andExpect(header().string("Expires","0")).andExpect(header().string("X-XSS-Protection","1; mode=block"));
  }
@EnableWebSecurity static class HeadersArePopulatedByDefaultConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
  @Test public void loadConfigWhenDefaultConfigThenWebAsyncManagerIntegrationFilterAdded() throws Exception {
    this.spring.register(WebAsyncPopulatedByDefaultConfig.class).autowire();
    WebAsyncManager webAsyncManager=mock(WebAsyncManager.class);
    this.mockMvc.perform(get("/").requestAttr(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE,webAsyncManager));
    ArgumentCaptor<CallableProcessingInterceptor> callableProcessingInterceptorArgCaptor=ArgumentCaptor.forClass(CallableProcessingInterceptor.class);
    verify(webAsyncManager,atLeastOnce()).registerCallableInterceptor(any(),callableProcessingInterceptorArgCaptor.capture());
    CallableProcessingInterceptor callableProcessingInterceptor=callableProcessingInterceptorArgCaptor.getAllValues().stream().filter(e -> SecurityContextCallableProcessingInterceptor.class.isAssignableFrom(e.getClass())).findFirst().orElse(null);
    assertThat(callableProcessingInterceptor).isNotNull();
  }
@EnableWebSecurity static class WebAsyncPopulatedByDefaultConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
  @Test public void loadConfigWhenRequestAuthenticateThenAuthenticationEventPublished() throws Exception {
    this.spring.register(InMemoryAuthWithWebSecurityConfigurerAdapter.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(status().is3xxRedirection());
    assertThat(InMemoryAuthWithWebSecurityConfigurerAdapter.EVENTS).isNotEmpty();
    assertThat(InMemoryAuthWithWebSecurityConfigurerAdapter.EVENTS).hasSize(1);
  }
@EnableWebSecurity static class InMemoryAuthWithWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter implements ApplicationListener<AuthenticationSuccessEvent> {
    static List<AuthenticationSuccessEvent> EVENTS=new ArrayList<>();
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Override public void onApplicationEvent(    AuthenticationSuccessEvent event){
      EVENTS.add(event);
    }
  }
  @Test public void loadConfigWhenInMemoryConfigureProtectedThenPasswordUpgraded() throws Exception {
    this.spring.register(InMemoryConfigureProtectedConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(status().is3xxRedirection());
    UserDetailsService uds=this.spring.getContext().getBean(UserDetailsService.class);
    assertThat(uds.loadUserByUsername("user").getPassword()).startsWith("{bcrypt}");
  }
@EnableWebSecurity static class InMemoryConfigureProtectedConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Override @Bean public UserDetailsService userDetailsServiceBean() throws Exception {
      return super.userDetailsServiceBean();
    }
  }
  @Test public void loadConfigWhenInMemoryConfigureGlobalThenPasswordUpgraded() throws Exception {
    this.spring.register(InMemoryConfigureGlobalConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(status().is3xxRedirection());
    UserDetailsService uds=this.spring.getContext().getBean(UserDetailsService.class);
    assertThat(uds.loadUserByUsername("user").getPassword()).startsWith("{bcrypt}");
  }
@EnableWebSecurity static class InMemoryConfigureGlobalConfig extends WebSecurityConfigurerAdapter {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Override @Bean public UserDetailsService userDetailsServiceBean() throws Exception {
      return super.userDetailsServiceBean();
    }
  }
  @Test public void loadConfigWhenCustomContentNegotiationStrategyBeanThenOverridesDefault() throws Exception {
    OverrideContentNegotiationStrategySharedObjectConfig.CONTENT_NEGOTIATION_STRATEGY_BEAN=mock(ContentNegotiationStrategy.class);
    this.spring.register(OverrideContentNegotiationStrategySharedObjectConfig.class).autowire();
    OverrideContentNegotiationStrategySharedObjectConfig securityConfig=this.spring.getContext().getBean(OverrideContentNegotiationStrategySharedObjectConfig.class);
    assertThat(securityConfig.contentNegotiationStrategySharedObject).isNotNull();
    assertThat(securityConfig.contentNegotiationStrategySharedObject).isSameAs(OverrideContentNegotiationStrategySharedObjectConfig.CONTENT_NEGOTIATION_STRATEGY_BEAN);
  }
@EnableWebSecurity static class OverrideContentNegotiationStrategySharedObjectConfig extends WebSecurityConfigurerAdapter {
    static ContentNegotiationStrategy CONTENT_NEGOTIATION_STRATEGY_BEAN;
    private ContentNegotiationStrategy contentNegotiationStrategySharedObject;
    @Bean public ContentNegotiationStrategy contentNegotiationStrategy(){
      return CONTENT_NEGOTIATION_STRATEGY_BEAN;
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      this.contentNegotiationStrategySharedObject=http.getSharedObject(ContentNegotiationStrategy.class);
      super.configure(http);
    }
  }
  @Test public void loadConfigWhenDefaultContentNegotiationStrategyThenHeaderContentNegotiationStrategy() throws Exception {
    this.spring.register(ContentNegotiationStrategyDefaultSharedObjectConfig.class).autowire();
    ContentNegotiationStrategyDefaultSharedObjectConfig securityConfig=this.spring.getContext().getBean(ContentNegotiationStrategyDefaultSharedObjectConfig.class);
    assertThat(securityConfig.contentNegotiationStrategySharedObject).isNotNull();
    assertThat(securityConfig.contentNegotiationStrategySharedObject).isInstanceOf(HeaderContentNegotiationStrategy.class);
  }
@EnableWebSecurity static class ContentNegotiationStrategyDefaultSharedObjectConfig extends WebSecurityConfigurerAdapter {
    private ContentNegotiationStrategy contentNegotiationStrategySharedObject;
    @Override protected void configure(    HttpSecurity http) throws Exception {
      this.contentNegotiationStrategySharedObject=http.getSharedObject(ContentNegotiationStrategy.class);
      super.configure(http);
    }
  }
  @Test public void loadConfigWhenUserDetailsServiceHasCircularReferenceThenStillLoads() throws Exception {
    this.spring.register(RequiresUserDetailsServiceConfig.class,UserDetailsServiceConfig.class).autowire();
    MyFilter myFilter=this.spring.getContext().getBean(MyFilter.class);
    Throwable thrown=catchThrowable(() -> myFilter.userDetailsService.loadUserByUsername("user"));
    assertThat(thrown).isNull();
    thrown=catchThrowable(() -> myFilter.userDetailsService.loadUserByUsername("admin"));
    assertThat(thrown).isInstanceOf(UsernameNotFoundException.class);
  }
@Configuration static class RequiresUserDetailsServiceConfig {
    @Bean public MyFilter myFilter(    UserDetailsService userDetailsService){
      return new MyFilter(userDetailsService);
    }
  }
@EnableWebSecurity static class UserDetailsServiceConfig extends WebSecurityConfigurerAdapter {
    @Autowired private MyFilter myFilter;
    @Bean @Override public UserDetailsService userDetailsServiceBean() throws Exception {
      return super.userDetailsServiceBean();
    }
    @Override public void configure(    HttpSecurity http){
      http.addFilterBefore(this.myFilter,UsernamePasswordAuthenticationFilter.class);
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
  }
static class MyFilter extends OncePerRequestFilter {
    private UserDetailsService userDetailsService;
    MyFilter(    UserDetailsService userDetailsService){
      this.userDetailsService=userDetailsService;
    }
    @Override protected void doFilterInternal(    HttpServletRequest request,    HttpServletResponse response,    FilterChain filterChain) throws ServletException, IOException {
      filterChain.doFilter(request,response);
    }
  }
  @Test public void loadConfigWhenSharedObjectsCreatedThenApplicationContextAdded() throws Exception {
    this.spring.register(ApplicationContextSharedObjectConfig.class).autowire();
    ApplicationContextSharedObjectConfig securityConfig=this.spring.getContext().getBean(ApplicationContextSharedObjectConfig.class);
    assertThat(securityConfig.applicationContextSharedObject).isNotNull();
    assertThat(securityConfig.applicationContextSharedObject).isSameAs(this.spring.getContext());
  }
@EnableWebSecurity static class ApplicationContextSharedObjectConfig extends WebSecurityConfigurerAdapter {
    private ApplicationContext applicationContextSharedObject;
    @Override protected void configure(    HttpSecurity http) throws Exception {
      this.applicationContextSharedObject=http.getSharedObject(ApplicationContext.class);
      super.configure(http);
    }
  }
  @Test public void loadConfigWhenCustomAuthenticationTrustResolverBeanThenOverridesDefault() throws Exception {
    CustomTrustResolverConfig.AUTHENTICATION_TRUST_RESOLVER_BEAN=mock(AuthenticationTrustResolver.class);
    this.spring.register(CustomTrustResolverConfig.class).autowire();
    CustomTrustResolverConfig securityConfig=this.spring.getContext().getBean(CustomTrustResolverConfig.class);
    assertThat(securityConfig.authenticationTrustResolverSharedObject).isNotNull();
    assertThat(securityConfig.authenticationTrustResolverSharedObject).isSameAs(CustomTrustResolverConfig.AUTHENTICATION_TRUST_RESOLVER_BEAN);
  }
@EnableWebSecurity static class CustomTrustResolverConfig extends WebSecurityConfigurerAdapter {
    static AuthenticationTrustResolver AUTHENTICATION_TRUST_RESOLVER_BEAN;
    private AuthenticationTrustResolver authenticationTrustResolverSharedObject;
    @Bean public AuthenticationTrustResolver authenticationTrustResolver(){
      return AUTHENTICATION_TRUST_RESOLVER_BEAN;
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      this.authenticationTrustResolverSharedObject=http.getSharedObject(AuthenticationTrustResolver.class);
      super.configure(http);
    }
  }
  @Test public void compareOrderWebSecurityConfigurerAdapterWhenLowestOrderToDefaultOrderThenGreaterThanZero() throws Exception {
    AnnotationAwareOrderComparator comparator=new AnnotationAwareOrderComparator();
    assertThat(comparator.compare(new LowestPriorityWebSecurityConfig(),new DefaultOrderWebSecurityConfig())).isGreaterThan(0);
  }
static class DefaultOrderWebSecurityConfig extends WebSecurityConfigurerAdapter {
  }
@Order static class LowestPriorityWebSecurityConfig extends WebSecurityConfigurerAdapter {
  }
}
