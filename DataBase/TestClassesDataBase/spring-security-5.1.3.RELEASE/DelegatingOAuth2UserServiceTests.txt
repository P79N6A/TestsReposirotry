/** 
 * Tests for  {@link DelegatingOAuth2UserService}.
 * @author Joe Grandja
 */
public class DelegatingOAuth2UserServiceTests {
  @Test(expected=IllegalArgumentException.class) public void constructorWhenUserServicesIsNullThenThrowIllegalArgumentException(){
    new DelegatingOAuth2UserService<>(null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenUserServicesIsEmptyThenThrowIllegalArgumentException(){
    new DelegatingOAuth2UserService<>(Collections.emptyList());
  }
  @Test(expected=IllegalArgumentException.class) @SuppressWarnings("unchecked") public void loadUserWhenUserRequestIsNullThenThrowIllegalArgumentException(){
    DelegatingOAuth2UserService<OAuth2UserRequest,OAuth2User> delegatingUserService=new DelegatingOAuth2UserService<>(Arrays.asList(mock(OAuth2UserService.class),mock(OAuth2UserService.class)));
    delegatingUserService.loadUser(null);
  }
  @Test @SuppressWarnings("unchecked") public void loadUserWhenUserServiceCanLoadThenReturnUser(){
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService1=mock(OAuth2UserService.class);
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService2=mock(OAuth2UserService.class);
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService3=mock(OAuth2UserService.class);
    OAuth2User mockUser=mock(OAuth2User.class);
    when(userService3.loadUser(any(OAuth2UserRequest.class))).thenReturn(mockUser);
    DelegatingOAuth2UserService<OAuth2UserRequest,OAuth2User> delegatingUserService=new DelegatingOAuth2UserService<>(Arrays.asList(userService1,userService2,userService3));
    OAuth2User loadedUser=delegatingUserService.loadUser(mock(OAuth2UserRequest.class));
    assertThat(loadedUser).isEqualTo(mockUser);
  }
  @Test @SuppressWarnings("unchecked") public void loadUserWhenUserServiceCannotLoadThenReturnNull(){
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService1=mock(OAuth2UserService.class);
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService2=mock(OAuth2UserService.class);
    OAuth2UserService<OAuth2UserRequest,OAuth2User> userService3=mock(OAuth2UserService.class);
    DelegatingOAuth2UserService<OAuth2UserRequest,OAuth2User> delegatingUserService=new DelegatingOAuth2UserService<>(Arrays.asList(userService1,userService2,userService3));
    OAuth2User loadedUser=delegatingUserService.loadUser(mock(OAuth2UserRequest.class));
    assertThat(loadedUser).isNull();
  }
}
