/** 
 * Tests which make sure invalid configurations are rejected by the namespace. In particular invalid top-level elements. These are likely to fail after the namespace has been updated using trang, but the spring-security.xsl transform has not been applied.
 * @author Luke Taylor
 */
public class InvalidConfigurationTests {
  private InMemoryXmlApplicationContext appContext;
  @After public void closeAppContext(){
    if (appContext != null) {
      appContext.close();
    }
  }
  @Test(expected=XmlBeanDefinitionStoreException.class) public void passwordEncoderCannotAppearAtTopLevel(){
    setContext("<password-encoder hash='md5'/>");
  }
  @Test(expected=XmlBeanDefinitionStoreException.class) public void authenticationProviderCannotAppearAtTopLevel(){
    setContext("<authentication-provider ref='blah'/>");
  }
  @Test public void missingAuthenticationManagerGivesSensibleErrorMessage(){
    try {
      setContext("<http auto-config='true' />");
    }
 catch (    BeanCreationException e) {
      Throwable cause=ultimateCause(e);
      assertThat(cause instanceof NoSuchBeanDefinitionException).isTrue();
      NoSuchBeanDefinitionException nsbe=(NoSuchBeanDefinitionException)cause;
      assertThat(nsbe.getBeanName()).isEqualTo(BeanIds.AUTHENTICATION_MANAGER);
      assertThat(nsbe.getMessage().endsWith(AuthenticationManagerFactoryBean.MISSING_BEAN_ERROR_MESSAGE));
    }
  }
  private Throwable ultimateCause(  Throwable e){
    if (e.getCause() == null) {
      return e;
    }
    return ultimateCause(e.getCause());
  }
  private void setContext(  String context){
    appContext=new InMemoryXmlApplicationContext(context);
  }
}
