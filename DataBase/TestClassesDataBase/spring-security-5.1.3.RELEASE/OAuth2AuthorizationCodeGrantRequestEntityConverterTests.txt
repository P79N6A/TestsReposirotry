/** 
 * Tests for  {@link OAuth2AuthorizationCodeGrantRequestEntityConverter}.
 * @author Joe Grandja
 */
public class OAuth2AuthorizationCodeGrantRequestEntityConverterTests {
  private OAuth2AuthorizationCodeGrantRequestEntityConverter converter=new OAuth2AuthorizationCodeGrantRequestEntityConverter();
  private OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest;
  @Before public void setup(){
    ClientRegistration clientRegistration=ClientRegistration.withRegistrationId("registration-1").clientId("client-1").clientSecret("secret").clientAuthenticationMethod(ClientAuthenticationMethod.BASIC).authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).redirectUriTemplate("https://client.com/callback/client-1").scope("read","write").authorizationUri("https://provider.com/oauth2/authorize").tokenUri("https://provider.com/oauth2/token").userInfoUri("https://provider.com/user").userNameAttributeName("id").clientName("client-1").build();
    OAuth2AuthorizationRequest authorizationRequest=OAuth2AuthorizationRequest.authorizationCode().clientId(clientRegistration.getClientId()).state("state-1234").authorizationUri(clientRegistration.getProviderDetails().getAuthorizationUri()).redirectUri(clientRegistration.getRedirectUriTemplate()).scopes(clientRegistration.getScopes()).build();
    OAuth2AuthorizationResponse authorizationResponse=OAuth2AuthorizationResponse.success("code-1234").state("state-1234").redirectUri(clientRegistration.getRedirectUriTemplate()).build();
    OAuth2AuthorizationExchange authorizationExchange=new OAuth2AuthorizationExchange(authorizationRequest,authorizationResponse);
    this.authorizationCodeGrantRequest=new OAuth2AuthorizationCodeGrantRequest(clientRegistration,authorizationExchange);
  }
  @SuppressWarnings("unchecked") @Test public void convertWhenGrantRequestValidThenConverts(){
    RequestEntity<?> requestEntity=this.converter.convert(this.authorizationCodeGrantRequest);
    ClientRegistration clientRegistration=this.authorizationCodeGrantRequest.getClientRegistration();
    assertThat(requestEntity.getMethod()).isEqualTo(HttpMethod.POST);
    assertThat(requestEntity.getUrl().toASCIIString()).isEqualTo(clientRegistration.getProviderDetails().getTokenUri());
    HttpHeaders headers=requestEntity.getHeaders();
    assertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON_UTF8);
    assertThat(headers.getContentType()).isEqualTo(MediaType.valueOf(APPLICATION_FORM_URLENCODED_VALUE + ";charset=UTF-8"));
    assertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith("Basic ");
    MultiValueMap<String,String> formParameters=(MultiValueMap<String,String>)requestEntity.getBody();
    assertThat(formParameters.getFirst(OAuth2ParameterNames.GRANT_TYPE)).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE.getValue());
    assertThat(formParameters.getFirst(OAuth2ParameterNames.CODE)).isEqualTo("code-1234");
    assertThat(formParameters.getFirst(OAuth2ParameterNames.REDIRECT_URI)).isEqualTo(clientRegistration.getRedirectUriTemplate());
  }
}
