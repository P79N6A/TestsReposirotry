/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class ServerFormLoginAuthenticationConverterTests {
  @Mock private ServerWebExchange exchange;
  private MultiValueMap<String,String> data=new LinkedMultiValueMap<>();
  private ServerFormLoginAuthenticationConverter converter=new ServerFormLoginAuthenticationConverter();
  @Before public void setup(){
    when(this.exchange.getFormData()).thenReturn(Mono.just(this.data));
  }
  @Test public void applyWhenUsernameAndPasswordThenCreatesTokenSuccess(){
    String username="username";
    String password="password";
    this.data.add("username",username);
    this.data.add("password",password);
    Authentication authentication=this.converter.convert(this.exchange).block();
    assertThat(authentication.getName()).isEqualTo(username);
    assertThat(authentication.getCredentials()).isEqualTo(password);
    assertThat(authentication.getAuthorities()).isEmpty();
  }
  @Test public void applyWhenCustomParametersAndUsernameAndPasswordThenCreatesTokenSuccess(){
    String usernameParameter="j_username";
    String passwordParameter="j_password";
    String username="username";
    String password="password";
    this.converter.setUsernameParameter(usernameParameter);
    this.converter.setPasswordParameter(passwordParameter);
    this.data.add(usernameParameter,username);
    this.data.add(passwordParameter,password);
    Authentication authentication=this.converter.convert(this.exchange).block();
    assertThat(authentication.getName()).isEqualTo(username);
    assertThat(authentication.getCredentials()).isEqualTo(password);
    assertThat(authentication.getAuthorities()).isEmpty();
  }
  @Test public void applyWhenNoDataThenCreatesTokenSuccess(){
    Authentication authentication=this.converter.convert(this.exchange).block();
    assertThat(authentication.getName()).isNullOrEmpty();
    assertThat(authentication.getCredentials()).isNull();
    assertThat(authentication.getAuthorities()).isEmpty();
  }
  @Test(expected=IllegalArgumentException.class) public void setUsernameParameterWhenNullThenIllegalArgumentException(){
    this.converter.setUsernameParameter(null);
  }
  @Test(expected=IllegalArgumentException.class) public void setPasswordParameterWhenNullThenIllegalArgumentException(){
    this.converter.setPasswordParameter(null);
  }
}
