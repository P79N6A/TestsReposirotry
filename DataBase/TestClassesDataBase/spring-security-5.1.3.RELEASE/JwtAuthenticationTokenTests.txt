/** 
 * Tests for  {@link JwtAuthenticationToken}
 * @author Josh Cummings
 */
@RunWith(MockitoJUnitRunner.class) public class JwtAuthenticationTokenTests {
  @Test public void getNameWhenJwtHasSubjectThenReturnsSubject(){
    Jwt jwt=this.jwt(Maps.newHashMap("sub","Carl"));
    JwtAuthenticationToken token=new JwtAuthenticationToken(jwt);
    assertThat(token.getName()).isEqualTo("Carl");
  }
  @Test public void getNameWhenJwtHasNoSubjectThenReturnsNull(){
    Jwt jwt=this.jwt(Maps.newHashMap("claim","value"));
    JwtAuthenticationToken token=new JwtAuthenticationToken(jwt);
    assertThat(token.getName()).isNull();
  }
  @Test public void constructorWhenJwtIsNullThenThrowsException(){
    assertThatCode(() -> new JwtAuthenticationToken(null)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("token cannot be null");
  }
  @Test public void constructorWhenUsingCorrectParametersThenConstructedCorrectly(){
    Collection authorities=Arrays.asList(new SimpleGrantedAuthority("test"));
    Map claims=Maps.newHashMap("claim","value");
    Jwt jwt=this.jwt(claims);
    JwtAuthenticationToken token=new JwtAuthenticationToken(jwt,authorities);
    assertThat(token.getAuthorities()).isEqualTo(authorities);
    assertThat(token.getPrincipal()).isEqualTo(jwt);
    assertThat(token.getCredentials()).isEqualTo(jwt);
    assertThat(token.getToken()).isEqualTo(jwt);
    assertThat(token.getTokenAttributes()).isEqualTo(claims);
    assertThat(token.isAuthenticated()).isTrue();
  }
  @Test public void constructorWhenUsingOnlyJwtThenConstructedCorrectly(){
    Map claims=Maps.newHashMap("claim","value");
    Jwt jwt=this.jwt(claims);
    JwtAuthenticationToken token=new JwtAuthenticationToken(jwt);
    assertThat(token.getAuthorities()).isEmpty();
    assertThat(token.getPrincipal()).isEqualTo(jwt);
    assertThat(token.getCredentials()).isEqualTo(jwt);
    assertThat(token.getToken()).isEqualTo(jwt);
    assertThat(token.getTokenAttributes()).isEqualTo(claims);
    assertThat(token.isAuthenticated()).isFalse();
  }
  private Jwt jwt(  Map<String,Object> claims){
    Map<String,Object> headers=new HashMap<>();
    headers.put("alg",JwsAlgorithms.RS256);
    return new Jwt("token",Instant.now(),Instant.now().plusSeconds(3600),headers,claims);
  }
}
