/** 
 * @author Rob Winch
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({SpringFactoriesLoader.class}) @PowerMockIgnore({"org.w3c.dom.*","org.xml.sax.*","org.apache.xerces.*","javax.xml.parsers.*"}) public class WebSecurityConfigurerAdapterPowermockTests {
  ConfigurableWebApplicationContext context;
  @After public void close(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void loadConfigWhenDefaultConfigurerAsSpringFactoryhenDefaultConfigurerApplied(){
    spy(SpringFactoriesLoader.class);
    DefaultConfigurer configurer=new DefaultConfigurer();
    when(SpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class,getClass().getClassLoader())).thenReturn(Arrays.<AbstractHttpConfigurer>asList(configurer));
    loadConfig(Config.class);
    assertThat(configurer.init).isTrue();
    assertThat(configurer.configure).isTrue();
  }
  private void loadConfig(  Class<?>... classes){
    AnnotationConfigWebApplicationContext context=new AnnotationConfigWebApplicationContext();
    context.setClassLoader(getClass().getClassLoader());
    context.register(classes);
    context.refresh();
    this.context=context;
  }
@EnableWebSecurity static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
  }
static class DefaultConfigurer extends AbstractHttpConfigurer<DefaultConfigurer,HttpSecurity> {
    boolean init;
    boolean configure;
    @Override public void init(    HttpSecurity builder) throws Exception {
      this.init=true;
    }
    @Override public void configure(    HttpSecurity builder) throws Exception {
      this.configure=true;
    }
  }
}
