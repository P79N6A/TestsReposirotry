/** 
 * Tests for  {@link InMemoryClientRegistrationRepository}.
 * @author Rob Winch
 * @since 5.0
 */
public class InMemoryClientRegistrationRepositoryTests {
  private ClientRegistration registration=TestClientRegistrations.clientRegistration().build();
  private InMemoryClientRegistrationRepository clients=new InMemoryClientRegistrationRepository(this.registration);
  @Test(expected=IllegalArgumentException.class) public void constructorVarArgsListClientRegistrationWhenNullThenIllegalArgumentException(){
    ClientRegistration nullRegistration=null;
    new InMemoryClientRegistrationRepository(nullRegistration);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorListClientRegistrationWhenNullThenIllegalArgumentException(){
    List<ClientRegistration> registrations=null;
    new InMemoryClientRegistrationRepository(registrations);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorListClientRegistrationWhenEmptyThenIllegalArgumentException(){
    List<ClientRegistration> registrations=Collections.emptyList();
    new InMemoryClientRegistrationRepository(registrations);
  }
  @Test(expected=IllegalStateException.class) public void constructorListClientRegistrationWhenDuplicateIdThenIllegalArgumentException(){
    List<ClientRegistration> registrations=Arrays.asList(this.registration,this.registration);
    new InMemoryClientRegistrationRepository(registrations);
  }
  @Test public void findByRegistrationIdWhenFoundThenFound(){
    String id=this.registration.getRegistrationId();
    assertThat(this.clients.findByRegistrationId(id)).isEqualTo(this.registration);
  }
  @Test public void findByRegistrationIdWhenNotFoundThenNull(){
    String id=this.registration.getRegistrationId() + "MISSING";
    assertThat(this.clients.findByRegistrationId(id)).isNull();
  }
  @Test(expected=IllegalArgumentException.class) public void findByRegistrationIdWhenNullIdThenIllegalArgumentException(){
    String id=null;
    assertThat(this.clients.findByRegistrationId(id));
  }
  @Test(expected=UnsupportedOperationException.class) public void iteratorWhenRemoveThenThrowsUnsupportedOperationException(){
    this.clients.iterator().remove();
  }
  @Test public void iteratorWhenGetThenContainsAll(){
    assertThat(this.clients.iterator()).containsOnly(this.registration);
  }
}
