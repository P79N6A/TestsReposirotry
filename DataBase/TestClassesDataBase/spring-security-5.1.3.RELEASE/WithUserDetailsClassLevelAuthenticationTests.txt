@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=WithUserDetailsClassLevelAuthenticationTests.Config.class) @WebAppConfiguration @WithUserDetails("admin") public class WithUserDetailsClassLevelAuthenticationTests {
  @Autowired private WebApplicationContext context;
  private MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
  }
  @Test public void requestRootUrlWithAdmin() throws Exception {
    mvc.perform(get("/")).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("admin").withRoles("ADMIN","USER"));
  }
  @Test public void requestProtectedUrlWithAdmin() throws Exception {
    mvc.perform(get("/admin")).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("admin").withRoles("ADMIN","USER"));
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().antMatchers("/admin/**").hasRole("ADMIN").anyRequest().authenticated().and().formLogin();
    }
    @Bean @Override public UserDetailsService userDetailsServiceBean() throws Exception {
      return super.userDetailsServiceBean();
    }
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER").and().withUser("admin").password("password").roles("USER","ADMIN");
    }
  }
}
