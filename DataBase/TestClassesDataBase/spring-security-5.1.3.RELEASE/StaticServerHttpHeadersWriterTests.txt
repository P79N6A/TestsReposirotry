/** 
 * @author Rob Winch
 * @since 5.0
 */
public class StaticServerHttpHeadersWriterTests {
  StaticServerHttpHeadersWriter writer=StaticServerHttpHeadersWriter.builder().header(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS,ContentTypeOptionsServerHttpHeadersWriter.NOSNIFF).build();
  ServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
  HttpHeaders headers=exchange.getResponse().getHeaders();
  @Test public void writeHeadersWhenSingleHeaderThenWritesHeader(){
    writer.writeHttpHeaders(exchange);
    assertThat(headers.get(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS)).containsOnly(ContentTypeOptionsServerHttpHeadersWriter.NOSNIFF);
  }
  @Test public void writeHeadersWhenSingleHeaderAndHeaderWrittenThenSuccess(){
    String headerValue="other";
    headers.set(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS,headerValue);
    writer.writeHttpHeaders(exchange);
    assertThat(headers.get(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS)).containsOnly(headerValue);
  }
  @Test public void writeHeadersWhenMultiHeaderThenWritesAllHeaders(){
    writer=StaticServerHttpHeadersWriter.builder().header(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE).header(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE).header(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE).build();
    writer.writeHttpHeaders(exchange);
    assertThat(headers.get(HttpHeaders.CACHE_CONTROL)).containsOnly(CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE);
    assertThat(headers.get(HttpHeaders.PRAGMA)).containsOnly(CacheControlServerHttpHeadersWriter.PRAGMA_VALUE);
    assertThat(headers.get(HttpHeaders.EXPIRES)).containsOnly(CacheControlServerHttpHeadersWriter.EXPIRES_VALUE);
  }
  @Test public void writeHeadersWhenMultiHeaderAndSingleWrittenThenNoHeadersOverridden(){
    String headerValue="other";
    headers.set(HttpHeaders.CACHE_CONTROL,headerValue);
    writer=StaticServerHttpHeadersWriter.builder().header(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE).header(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE).header(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE).build();
    writer.writeHttpHeaders(exchange);
    assertThat(headers).hasSize(1);
    assertThat(headers.get(HttpHeaders.CACHE_CONTROL)).containsOnly(headerValue);
  }
}
