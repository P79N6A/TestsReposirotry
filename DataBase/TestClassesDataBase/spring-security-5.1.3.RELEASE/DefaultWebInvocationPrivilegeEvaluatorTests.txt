/** 
 * Tests {@link org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator}.
 * @author Ben Alex
 */
public class DefaultWebInvocationPrivilegeEvaluatorTests {
  private AccessDecisionManager adm;
  private FilterInvocationSecurityMetadataSource ods;
  private RunAsManager ram;
  private FilterSecurityInterceptor interceptor;
  @Before public final void setUp(){
    interceptor=new FilterSecurityInterceptor();
    ods=mock(FilterInvocationSecurityMetadataSource.class);
    adm=mock(AccessDecisionManager.class);
    ram=mock(RunAsManager.class);
    interceptor.setAuthenticationManager(mock(AuthenticationManager.class));
    interceptor.setSecurityMetadataSource(ods);
    interceptor.setAccessDecisionManager(adm);
    interceptor.setRunAsManager(ram);
    interceptor.setApplicationEventPublisher(mock(ApplicationEventPublisher.class));
    SecurityContextHolder.clearContext();
  }
  @Test public void permitsAccessIfNoMatchingAttributesAndPublicInvocationsAllowed() throws Exception {
    DefaultWebInvocationPrivilegeEvaluator wipe=new DefaultWebInvocationPrivilegeEvaluator(interceptor);
    when(ods.getAttributes(anyObject())).thenReturn(null);
    assertThat(wipe.isAllowed("/context","/foo/index.jsp","GET",mock(Authentication.class))).isTrue();
  }
  @Test public void deniesAccessIfNoMatchingAttributesAndPublicInvocationsNotAllowed() throws Exception {
    DefaultWebInvocationPrivilegeEvaluator wipe=new DefaultWebInvocationPrivilegeEvaluator(interceptor);
    when(ods.getAttributes(anyObject())).thenReturn(null);
    interceptor.setRejectPublicInvocations(true);
    assertThat(wipe.isAllowed("/context","/foo/index.jsp","GET",mock(Authentication.class))).isFalse();
  }
  @Test public void deniesAccessIfAuthenticationIsNull() throws Exception {
    DefaultWebInvocationPrivilegeEvaluator wipe=new DefaultWebInvocationPrivilegeEvaluator(interceptor);
    assertThat(wipe.isAllowed("/foo/index.jsp",null)).isFalse();
  }
  @Test public void allowsAccessIfAccessDecisionManagerDoes() throws Exception {
    Authentication token=new TestingAuthenticationToken("test","Password","MOCK_INDEX");
    DefaultWebInvocationPrivilegeEvaluator wipe=new DefaultWebInvocationPrivilegeEvaluator(interceptor);
    assertThat(wipe.isAllowed("/foo/index.jsp",token)).isTrue();
  }
  @SuppressWarnings("unchecked") @Test public void deniesAccessIfAccessDecisionManagerDoes() throws Exception {
    Authentication token=new TestingAuthenticationToken("test","Password","MOCK_INDEX");
    DefaultWebInvocationPrivilegeEvaluator wipe=new DefaultWebInvocationPrivilegeEvaluator(interceptor);
    doThrow(new AccessDeniedException("")).when(adm).decide(any(Authentication.class),anyObject(),anyList());
    assertThat(wipe.isAllowed("/foo/index.jsp",token)).isFalse();
  }
}
