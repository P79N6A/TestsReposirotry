public class SavedRequestAwareWrapperTests {
  private SavedRequestAwareWrapper createWrapper(  MockHttpServletRequest requestToSave,  MockHttpServletRequest requestToWrap){
    DefaultSavedRequest saved=new DefaultSavedRequest(requestToSave,new PortResolverImpl());
    return new SavedRequestAwareWrapper(saved,requestToWrap);
  }
  @Test public void savedRequestCookiesAreIgnored() throws Exception {
    MockHttpServletRequest newRequest=new MockHttpServletRequest();
    newRequest.setCookies(new Cookie[]{new Cookie("cookie","fromnew")});
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.setCookies(new Cookie[]{new Cookie("cookie","fromsaved")});
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,newRequest);
    assertThat(wrapper.getCookies()).hasSize(1);
    assertThat(wrapper.getCookies()[0].getValue()).isEqualTo("fromnew");
  }
  @Test @SuppressWarnings("unchecked") public void savedRequesthHeaderIsReturnedIfSavedRequestIsSet() throws Exception {
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.addHeader("header","savedheader");
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,new MockHttpServletRequest());
    assertThat(wrapper.getHeader("nonexistent")).isNull();
    Enumeration headers=wrapper.getHeaders("nonexistent");
    assertThat(headers.hasMoreElements()).isFalse();
    assertThat(wrapper.getHeader("Header")).isEqualTo("savedheader");
    headers=wrapper.getHeaders("heaDer");
    assertThat(headers.hasMoreElements()).isTrue();
    assertThat(headers.nextElement()).isEqualTo("savedheader");
    assertThat(headers.hasMoreElements()).isFalse();
    assertThat(wrapper.getHeaderNames().hasMoreElements()).isTrue();
    assertThat(wrapper.getHeaderNames().nextElement()).isEqualTo("header");
  }
  @Test public void wrappedRequestParameterTakesPrecedenceOverSavedRequest(){
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.setParameter("action","foo");
    MockHttpServletRequest wrappedRequest=new MockHttpServletRequest();
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,wrappedRequest);
    assertThat(wrapper.getParameter("action")).isEqualTo("foo");
    wrappedRequest.setParameter("action","bar");
    assertThat(wrapper.getParameter("action")).isEqualTo("bar");
    assertThat(wrapper.getParameterValues("action")).hasSize(2);
    assertThat(wrapper.getParameterValues("action")[0]).isEqualTo("bar");
  }
  @Test public void savedRequestDoesntCreateDuplicateParams(){
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.setParameter("action","foo");
    MockHttpServletRequest wrappedRequest=new MockHttpServletRequest();
    wrappedRequest.setParameter("action","foo");
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,wrappedRequest);
    assertThat(wrapper.getParameterValues("action")).hasSize(1);
    assertThat(wrapper.getParameterMap()).hasSize(1);
    assertThat(((String[])wrapper.getParameterMap().get("action"))).hasSize(1);
  }
  @Test public void savedRequestHeadersTakePrecedence(){
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.addHeader("Authorization","foo");
    MockHttpServletRequest wrappedRequest=new MockHttpServletRequest();
    wrappedRequest.addHeader("Authorization","bar");
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,wrappedRequest);
    assertThat(wrapper.getHeader("Authorization")).isEqualTo("foo");
  }
  @Test public void getParameterValuesReturnsNullIfParameterIsntSet(){
    SavedRequestAwareWrapper wrapper=createWrapper(new MockHttpServletRequest(),new MockHttpServletRequest());
    assertThat(wrapper.getParameterValues("action")).isNull();
    assertThat(wrapper.getParameterMap().get("action")).isNull();
  }
  @Test public void getParameterValuesReturnsCombinedSavedAndWrappedRequestValues(){
    MockHttpServletRequest savedRequest=new MockHttpServletRequest();
    savedRequest.setParameter("action","foo");
    MockHttpServletRequest wrappedRequest=new MockHttpServletRequest();
    SavedRequestAwareWrapper wrapper=createWrapper(savedRequest,wrappedRequest);
    assertThat(wrapper.getParameterValues("action")).isEqualTo(new Object[]{"foo"});
    wrappedRequest.setParameter("action","bar");
    assertThat(wrapper.getParameterValues("action")).isEqualTo(new Object[]{"bar","foo"});
    String[] valuesFromMap=(String[])wrapper.getParameterMap().get("action");
    assertThat(valuesFromMap).hasSize(2);
    assertThat(valuesFromMap[0]).isEqualTo("bar");
  }
  @Test public void expecteDateHeaderIsReturnedFromSavedRequest() throws Exception {
    SimpleDateFormat formatter=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz",Locale.US);
    String nowString=FastHttpDateFormat.getCurrentDate();
    Date now=formatter.parse(nowString);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.addHeader("header",nowString);
    SavedRequestAwareWrapper wrapper=createWrapper(request,new MockHttpServletRequest());
    assertThat(wrapper.getDateHeader("header")).isEqualTo(now.getTime());
    assertThat(wrapper.getDateHeader("nonexistent")).isEqualTo(-1L);
  }
  @Test(expected=IllegalArgumentException.class) public void invalidDateHeaderIsRejected() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.addHeader("header","notadate");
    SavedRequestAwareWrapper wrapper=createWrapper(request,new MockHttpServletRequest());
    wrapper.getDateHeader("header");
  }
  @Test public void correctHttpMethodIsReturned() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest("PUT","/notused");
    SavedRequestAwareWrapper wrapper=createWrapper(request,new MockHttpServletRequest("GET","/notused"));
    assertThat(wrapper.getMethod()).isEqualTo("PUT");
  }
  @Test public void correctIntHeaderIsReturned() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.addHeader("header","999");
    request.addHeader("header","1000");
    SavedRequestAwareWrapper wrapper=createWrapper(request,new MockHttpServletRequest());
    assertThat(wrapper.getIntHeader("header")).isEqualTo(999);
    assertThat(wrapper.getIntHeader("nonexistent")).isEqualTo(-1);
  }
}
