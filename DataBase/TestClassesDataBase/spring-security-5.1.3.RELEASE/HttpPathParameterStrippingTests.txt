@ContextConfiguration(locations={"/http-path-param-stripping-app-context.xml"}) @RunWith(SpringJUnit4ClassRunner.class) public class HttpPathParameterStrippingTests {
  @Autowired private FilterChainProxy fcp;
  @Test(expected=RequestRejectedException.class) public void securedFilterChainCannotBeBypassedByAddingPathParameters() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setPathInfo("/secured;x=y/admin.html");
    request.setSession(createAuthenticatedSession("ROLE_USER"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    fcp.doFilter(request,response,new MockFilterChain());
  }
  @Test(expected=RequestRejectedException.class) public void adminFilePatternCannotBeBypassedByAddingPathParameters() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secured/admin.html;x=user.html");
    request.setSession(createAuthenticatedSession("ROLE_USER"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    fcp.doFilter(request,response,new MockFilterChain());
  }
  @Test(expected=RequestRejectedException.class) public void adminFilePatternCannotBeBypassedByAddingPathParametersWithPathInfo() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secured");
    request.setPathInfo("/admin.html;x=user.html");
    request.setSession(createAuthenticatedSession("ROLE_USER"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    fcp.doFilter(request,response,new MockFilterChain());
    assertThat(response.getStatus()).isEqualTo(403);
  }
  public HttpSession createAuthenticatedSession(  String... roles){
    MockHttpSession session=new MockHttpSession();
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("bob","bobspassword",roles));
    session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,SecurityContextHolder.getContext());
    SecurityContextHolder.clearContext();
    return session;
  }
}
