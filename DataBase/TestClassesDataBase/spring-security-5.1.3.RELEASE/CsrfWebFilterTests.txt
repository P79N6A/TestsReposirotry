/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class CsrfWebFilterTests {
  @Mock private WebFilterChain chain;
  @Mock private ServerCsrfTokenRepository repository;
  private CsrfToken token=new DefaultCsrfToken("csrf","CSRF","a");
  private CsrfWebFilter csrfFilter=new CsrfWebFilter();
  private MockServerWebExchange get=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
  private MockServerWebExchange post=MockServerWebExchange.from(MockServerHttpRequest.post("/"));
  @Test public void filterWhenGetThenSessionNotCreatedAndChainContinues(){
    PublisherProbe<Void> chainResult=PublisherProbe.empty();
    when(this.chain.filter(this.get)).thenReturn(chainResult.mono());
    Mono<Void> result=this.csrfFilter.filter(this.get,this.chain);
    StepVerifier.create(result).verifyComplete();
    Mono<Boolean> isSessionStarted=this.get.getSession().map(WebSession::isStarted);
    StepVerifier.create(isSessionStarted).expectNext(false).verifyComplete();
    chainResult.assertWasSubscribed();
  }
  @Test public void filterWhenPostAndNoTokenThenCsrfException(){
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    assertThat(this.post.getResponse().getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
  }
  @Test public void filterWhenPostAndEstablishedCsrfTokenAndRequestMissingTokenThenCsrfException(){
    this.csrfFilter.setCsrfTokenRepository(this.repository);
    when(this.repository.loadToken(any())).thenReturn(Mono.just(this.token));
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    assertThat(this.post.getResponse().getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
  }
  @Test public void filterWhenPostAndEstablishedCsrfTokenAndRequestParamInvalidTokenThenCsrfException(){
    this.csrfFilter.setCsrfTokenRepository(this.repository);
    when(this.repository.loadToken(any())).thenReturn(Mono.just(this.token));
    this.post=MockServerWebExchange.from(MockServerHttpRequest.post("/").body(this.token.getParameterName() + "=" + this.token.getToken()+ "INVALID"));
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    assertThat(this.post.getResponse().getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
  }
  @Test public void filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues(){
    PublisherProbe<Void> chainResult=PublisherProbe.empty();
    when(this.chain.filter(any())).thenReturn(chainResult.mono());
    this.csrfFilter.setCsrfTokenRepository(this.repository);
    when(this.repository.loadToken(any())).thenReturn(Mono.just(this.token));
    when(this.repository.generateToken(any())).thenReturn(Mono.just(this.token));
    this.post=MockServerWebExchange.from(MockServerHttpRequest.post("/").contentType(MediaType.APPLICATION_FORM_URLENCODED).body(this.token.getParameterName() + "=" + this.token.getToken()));
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    chainResult.assertWasSubscribed();
  }
  @Test public void filterWhenPostAndEstablishedCsrfTokenAndHeaderInvalidTokenThenCsrfException(){
    this.csrfFilter.setCsrfTokenRepository(this.repository);
    when(this.repository.loadToken(any())).thenReturn(Mono.just(this.token));
    this.post=MockServerWebExchange.from(MockServerHttpRequest.post("/").header(this.token.getHeaderName(),this.token.getToken() + "INVALID"));
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    assertThat(this.post.getResponse().getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
  }
  @Test public void filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues(){
    PublisherProbe<Void> chainResult=PublisherProbe.empty();
    when(this.chain.filter(any())).thenReturn(chainResult.mono());
    this.csrfFilter.setCsrfTokenRepository(this.repository);
    when(this.repository.loadToken(any())).thenReturn(Mono.just(this.token));
    when(this.repository.generateToken(any())).thenReturn(Mono.just(this.token));
    this.post=MockServerWebExchange.from(MockServerHttpRequest.post("/").header(this.token.getHeaderName(),this.token.getToken()));
    Mono<Void> result=this.csrfFilter.filter(this.post,this.chain);
    StepVerifier.create(result).verifyComplete();
    chainResult.assertWasSubscribed();
  }
}
