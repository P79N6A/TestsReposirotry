/** 
 * @author Rob Winch
 * @since 5.0
 */
public class RequestCacheTests {
  private ServerHttpSecurity http=ServerHttpSecurityConfigurationBuilder.httpWithDefaultAuthentication();
  @Test public void defaultFormLoginRequestCache(){
    SecurityWebFilterChain securityWebFilter=this.http.authorizeExchange().anyExchange().authenticated().and().formLogin().and().build();
    WebTestClient webTestClient=WebTestClient.bindToController(new SecuredPageController(),new WebTestClientBuilder.Http200RestController()).webFilter(new WebFilterChainProxy(securityWebFilter)).build();
    WebDriver driver=WebTestClientHtmlUnitDriverBuilder.webTestClientSetup(webTestClient).build();
    DefaultLoginPage loginPage=SecuredPage.to(driver,DefaultLoginPage.class).assertAt();
    SecuredPage securedPage=loginPage.loginForm().username("user").password("password").submit(SecuredPage.class);
    securedPage.assertAt();
  }
  @Test public void requestCacheNoOp(){
    SecurityWebFilterChain securityWebFilter=this.http.authorizeExchange().anyExchange().authenticated().and().formLogin().and().requestCache().requestCache(NoOpServerRequestCache.getInstance()).and().build();
    WebTestClient webTestClient=WebTestClient.bindToController(new SecuredPageController(),new WebTestClientBuilder.Http200RestController()).webFilter(new WebFilterChainProxy(securityWebFilter)).build();
    WebDriver driver=WebTestClientHtmlUnitDriverBuilder.webTestClientSetup(webTestClient).build();
    DefaultLoginPage loginPage=SecuredPage.to(driver,DefaultLoginPage.class).assertAt();
    HomePage securedPage=loginPage.loginForm().username("user").password("password").submit(HomePage.class);
    securedPage.assertAt();
  }
public static class SecuredPage {
    private WebDriver driver;
    public SecuredPage(    WebDriver driver){
      this.driver=driver;
    }
    public void assertAt(){
      assertThat(this.driver.getTitle()).isEqualTo("Secured");
    }
    static <T>T to(    WebDriver driver,    Class<T> page){
      driver.get("http://localhost/secured");
      return PageFactory.initElements(driver,page);
    }
  }
@Controller public static class SecuredPageController {
    @ResponseBody @GetMapping("/secured") public String login(    ServerWebExchange exchange){
      return "<!DOCTYPE html>\n" + "<html lang=\"en\">\n" + "  <head>\n"+ "    <title>Secured</title>\n"+ "  </head>\n"+ "  <body>\n"+ "    <h1>Secured</h1>\n"+ "  </body>\n"+ "</html>";
    }
  }
}
