/** 
 * @author Rob Winch
 * @since 5.0
 */
@WithMockUser @RunWith(SpringRunner.class) @SecurityTestExecutionListeners public class SecurityMockServerConfigurersClassAnnotatedTests extends AbstractMockServerConfigurersTests {
  WebTestClient client=WebTestClient.bindToController(controller).webFilter(new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
  @Test public void wheMockUserWhenClassAnnotatedThenSuccess(){
    client.get().exchange().expectStatus().isOk().expectBody(String.class).consumeWith(response -> assertThat(response.getResponseBody()).contains("\"username\":\"user\""));
    Authentication authentication=TestSecurityContextHolder.getContext().getAuthentication();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test @WithMockUser("method-user") public void withMockUserWhenClassAndMethodAnnotationThenMethodOverrides(){
    client.get().exchange().expectStatus().isOk().expectBody(String.class).consumeWith(response -> assertThat(response.getResponseBody()).contains("\"username\":\"method-user\""));
    Authentication authentication=TestSecurityContextHolder.getContext().getAuthentication();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test public void withMockUserWhenMutateWithThenMustateWithOverrides(){
    client.mutateWith(mockUser("mutateWith-mockUser")).get().exchange().expectStatus().isOk().expectBody(String.class).consumeWith(response -> assertThat(response.getResponseBody()).contains("\"username\":\"mutateWith-mockUser\""));
    Principal principal=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(principal,userBuilder.username("mutateWith-mockUser").build());
  }
}
