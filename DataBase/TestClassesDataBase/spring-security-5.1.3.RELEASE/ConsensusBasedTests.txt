/** 
 * Tests  {@link ConsensusBased}.
 * @author Ben Alex
 */
public class ConsensusBasedTests {
  @Test(expected=AccessDeniedException.class) public void testOneAffirmativeVoteOneDenyVoteOneAbstainVoteDeniesAccessWithoutDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    mgr.setAllowIfEqualGrantedDeniedDecisions(false);
    assertThat(!mgr.isAllowIfEqualGrantedDeniedDecisions()).isTrue();
    List<ConfigAttribute> config=SecurityConfig.createList("ROLE_1","DENY_FOR_SURE");
    mgr.decide(auth,new Object(),config);
  }
  @Test public void testOneAffirmativeVoteOneDenyVoteOneAbstainVoteGrantsAccessWithDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    assertThat(mgr.isAllowIfEqualGrantedDeniedDecisions()).isTrue();
    List<ConfigAttribute> config=SecurityConfig.createList("ROLE_1","DENY_FOR_SURE");
    mgr.decide(auth,new Object(),config);
  }
  @Test public void testOneAffirmativeVoteTwoAbstainVotesGrantsAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    mgr.decide(auth,new Object(),SecurityConfig.createList("ROLE_2"));
  }
  @Test(expected=AccessDeniedException.class) public void testOneDenyVoteTwoAbstainVotesDeniesAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    mgr.decide(auth,new Object(),SecurityConfig.createList("ROLE_WE_DO_NOT_HAVE"));
    fail("Should have thrown AccessDeniedException");
  }
  @Test(expected=AccessDeniedException.class) public void testThreeAbstainVotesDeniesAccessWithDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    assertThat(!mgr.isAllowIfAllAbstainDecisions()).isTrue();
    mgr.decide(auth,new Object(),SecurityConfig.createList("IGNORED_BY_ALL"));
  }
  @Test public void testThreeAbstainVotesGrantsAccessWithoutDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    mgr.setAllowIfAllAbstainDecisions(true);
    assertThat(mgr.isAllowIfAllAbstainDecisions()).isTrue();
    mgr.decide(auth,new Object(),SecurityConfig.createList("IGNORED_BY_ALL"));
  }
  @Test public void testTwoAffirmativeVotesTwoAbstainVotesGrantsAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    ConsensusBased mgr=makeDecisionManager();
    mgr.decide(auth,new Object(),SecurityConfig.createList("ROLE_1","ROLE_2"));
  }
  private ConsensusBased makeDecisionManager(){
    RoleVoter roleVoter=new RoleVoter();
    DenyVoter denyForSureVoter=new DenyVoter();
    DenyAgainVoter denyAgainForSureVoter=new DenyAgainVoter();
    List<AccessDecisionVoter<? extends Object>> voters=new Vector<AccessDecisionVoter<? extends Object>>();
    voters.add(roleVoter);
    voters.add(denyForSureVoter);
    voters.add(denyAgainForSureVoter);
    return new ConsensusBased(voters);
  }
  private TestingAuthenticationToken makeTestToken(){
    return new TestingAuthenticationToken("somebody","password","ROLE_1","ROLE_2");
  }
}
