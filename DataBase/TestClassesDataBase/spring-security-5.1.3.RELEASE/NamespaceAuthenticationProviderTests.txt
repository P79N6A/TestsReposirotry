/** 
 * @author Rob Winch
 */
public class NamespaceAuthenticationProviderTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void authenticationProviderRef() throws Exception {
    this.spring.register(AuthenticationProviderRefConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withUsername("user"));
  }
@EnableWebSecurity static class AuthenticationProviderRefConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.authenticationProvider(authenticationProvider());
    }
    @Bean public DaoAuthenticationProvider authenticationProvider(){
      DaoAuthenticationProvider result=new DaoAuthenticationProvider();
      result.setUserDetailsService(new InMemoryUserDetailsManager(PasswordEncodedUser.user()));
      return result;
    }
  }
  @Test public void authenticationProviderUserServiceRef() throws Exception {
    this.spring.register(AuthenticationProviderRefConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withUsername("user"));
  }
@EnableWebSecurity static class UserServiceRefConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.userDetailsService(userDetailsService());
    }
    @Bean public UserDetailsService userDetailsService(){
      return new InMemoryUserDetailsManager(PasswordEncodedUser.user());
    }
  }
}
