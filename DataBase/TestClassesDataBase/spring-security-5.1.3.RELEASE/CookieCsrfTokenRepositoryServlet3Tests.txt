/** 
 * @author Joe Grandja
 * @since 4.1
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ReflectionUtils.class,Method.class}) public class CookieCsrfTokenRepositoryServlet3Tests {
  @Mock private Method method;
  @Test public void httpOnlyServlet30() throws Exception {
    spy(ReflectionUtils.class);
    when(ReflectionUtils.findMethod(Cookie.class,"setHttpOnly",boolean.class)).thenReturn(this.method);
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getContextPath()).thenReturn("/contextpath");
    HttpServletResponse response=mock(HttpServletResponse.class);
    ArgumentCaptor<Cookie> cookie=ArgumentCaptor.forClass(Cookie.class);
    CookieCsrfTokenRepository repository=new CookieCsrfTokenRepository();
    CsrfToken token=repository.generateToken(request);
    repository.saveToken(token,request,response);
    verify(response).addCookie(cookie.capture());
    verifyStatic(ReflectionUtils.class);
    ReflectionUtils.invokeMethod(same(this.method),eq(cookie.getValue()),eq(true));
  }
  @Test public void httpOnlyPreServlet30() throws Exception {
    spy(ReflectionUtils.class);
    when(ReflectionUtils.findMethod(Cookie.class,"setHttpOnly",boolean.class)).thenReturn(null);
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getContextPath()).thenReturn("/contextpath");
    HttpServletResponse response=mock(HttpServletResponse.class);
    ArgumentCaptor<Cookie> cookie=ArgumentCaptor.forClass(Cookie.class);
    CookieCsrfTokenRepository repository=new CookieCsrfTokenRepository();
    CsrfToken token=repository.generateToken(request);
    repository.saveToken(token,request,response);
    verify(response).addCookie(cookie.capture());
    verifyStatic(ReflectionUtils.class,never());
    ReflectionUtils.invokeMethod(same(this.method),eq(cookie.getValue()),eq(true));
  }
}
