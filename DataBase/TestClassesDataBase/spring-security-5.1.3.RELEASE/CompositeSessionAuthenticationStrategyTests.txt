/** 
 * @author Rob Winch
 */
@RunWith(MockitoJUnitRunner.class) public class CompositeSessionAuthenticationStrategyTests {
  @Mock private SessionAuthenticationStrategy strategy1;
  @Mock private SessionAuthenticationStrategy strategy2;
  @Mock private Authentication authentication;
  @Mock private HttpServletRequest request;
  @Mock private HttpServletResponse response;
  @Test(expected=IllegalArgumentException.class) public void constructorNullDelegates(){
    new CompositeSessionAuthenticationStrategy(null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorEmptyDelegates(){
    new CompositeSessionAuthenticationStrategy(Collections.<SessionAuthenticationStrategy>emptyList());
  }
  @Test(expected=IllegalArgumentException.class) public void constructorDelegatesContainNull(){
    new CompositeSessionAuthenticationStrategy(Collections.<SessionAuthenticationStrategy>singletonList(null));
  }
  @Test public void delegatesToAll(){
    CompositeSessionAuthenticationStrategy strategy=new CompositeSessionAuthenticationStrategy(Arrays.asList(strategy1,strategy2));
    strategy.onAuthentication(authentication,request,response);
    verify(strategy1).onAuthentication(authentication,request,response);
    verify(strategy2).onAuthentication(authentication,request,response);
  }
  @Test public void delegateShortCircuits(){
    doThrow(new SessionAuthenticationException("oops")).when(strategy1).onAuthentication(authentication,request,response);
    CompositeSessionAuthenticationStrategy strategy=new CompositeSessionAuthenticationStrategy(Arrays.asList(strategy1,strategy2));
    try {
      strategy.onAuthentication(authentication,request,response);
      fail("Expected Exception");
    }
 catch (    SessionAuthenticationException success) {
    }
    verify(strategy1).onAuthentication(authentication,request,response);
    verify(strategy2,times(0)).onAuthentication(authentication,request,response);
  }
}
