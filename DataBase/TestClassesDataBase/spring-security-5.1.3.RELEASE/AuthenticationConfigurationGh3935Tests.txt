/** 
 * @author Rob Winch
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class AuthenticationConfigurationGh3935Tests {
  @Autowired FilterChainProxy springSecurityFilterChain;
  @Autowired UserDetailsService uds;
  @Autowired BootGlobalAuthenticationConfigurationAdapter adapter;
  @Test public void loads(){
    assertThat(this.springSecurityFilterChain).isNotNull();
  }
  @Test public void delegateUsesExisitingAuthentication(){
    String username="user";
    String password="password";
    when(this.uds.loadUserByUsername(username)).thenReturn(PasswordEncodedUser.user());
    AuthenticationManager authenticationManager=this.adapter.authenticationManager;
    assertThat(authenticationManager).isNotNull();
    Authentication auth=authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username,password));
    verify(this.uds).loadUserByUsername(username);
    assertThat(auth.getPrincipal()).isEqualTo(PasswordEncodedUser.user());
  }
@EnableWebSecurity static class WebSecurity extends WebSecurityConfigurerAdapter {
  }
static class BootGlobalAuthenticationConfigurationAdapter extends GlobalAuthenticationConfigurerAdapter {
    private final ApplicationContext context;
    private AuthenticationManager authenticationManager;
    @Autowired BootGlobalAuthenticationConfigurationAdapter(    ApplicationContext context){
      this.context=context;
    }
    @Override public void init(    AuthenticationManagerBuilder auth) throws Exception {
      AuthenticationConfiguration configuration=this.context.getBean(AuthenticationConfiguration.class);
      this.authenticationManager=configuration.getAuthenticationManager();
    }
  }
@Configuration static class AutoConfig {
    @Bean static BootGlobalAuthenticationConfigurationAdapter adapter(    ApplicationContext context){
      return new BootGlobalAuthenticationConfigurationAdapter(context);
    }
    @Bean public UserDetailsService userDetailsService(){
      return mock(UserDetailsService.class);
    }
  }
}
