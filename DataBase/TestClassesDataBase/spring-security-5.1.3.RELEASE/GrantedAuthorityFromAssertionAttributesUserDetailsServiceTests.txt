/** 
 * @author Luke Taylor
 */
public class GrantedAuthorityFromAssertionAttributesUserDetailsServiceTests {
  @Test public void correctlyExtractsNamedAttributesFromAssertionAndConvertsThemToAuthorities(){
    GrantedAuthorityFromAssertionAttributesUserDetailsService uds=new GrantedAuthorityFromAssertionAttributesUserDetailsService(new String[]{"a","b","c","d"});
    uds.setConvertToUpperCase(false);
    Assertion assertion=mock(Assertion.class);
    AttributePrincipal principal=mock(AttributePrincipal.class);
    Map<String,Object> attributes=new HashMap<>();
    attributes.put("a",Arrays.asList("role_a1","role_a2"));
    attributes.put("b","role_b");
    attributes.put("c","role_c");
    attributes.put("d",null);
    attributes.put("someother","unused");
    when(assertion.getPrincipal()).thenReturn(principal);
    when(principal.getAttributes()).thenReturn(attributes);
    when(principal.getName()).thenReturn("somebody");
    CasAssertionAuthenticationToken token=new CasAssertionAuthenticationToken(assertion,"ticket");
    UserDetails user=uds.loadUserDetails(token);
    Set<String> roles=AuthorityUtils.authorityListToSet(user.getAuthorities());
    assertThat(roles).containsExactlyInAnyOrder("role_a1","role_a2","role_b","role_c");
  }
}
