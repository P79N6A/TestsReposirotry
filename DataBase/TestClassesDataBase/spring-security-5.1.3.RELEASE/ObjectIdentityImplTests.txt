/** 
 * Tests for  {@link ObjectIdentityImpl}.
 * @author Andrei Stefan
 */
@SuppressWarnings("unused") public class ObjectIdentityImplTests {
  private static final String DOMAIN_CLASS="org.springframework.security.acls.domain.ObjectIdentityImplTests$MockIdDomainObject";
  @Test public void constructorsRespectRequiredFields() throws Exception {
    try {
      new ObjectIdentityImpl(null);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      new ObjectIdentityImpl("",Long.valueOf(1));
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      new ObjectIdentityImpl(DOMAIN_CLASS,null);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      new ObjectIdentityImpl(DOMAIN_CLASS,Long.valueOf(1));
    }
 catch (    IllegalArgumentException notExpected) {
      fail("It shouldn't have thrown IllegalArgumentException");
    }
    try {
      new ObjectIdentityImpl(MockIdDomainObject.class,null);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void gettersReturnExpectedValues() throws Exception {
    ObjectIdentity obj=new ObjectIdentityImpl(DOMAIN_CLASS,Long.valueOf(1));
    assertThat(obj.getIdentifier()).isEqualTo(Long.valueOf(1));
    assertThat(obj.getType()).isEqualTo(MockIdDomainObject.class.getName());
  }
  @Test public void testGetIdMethodConstraints() throws Exception {
    try {
      new ObjectIdentityImpl("A_STRING_OBJECT");
      fail("It should have thrown IdentityUnavailableException");
    }
 catch (    IdentityUnavailableException expected) {
    }
    MockIdDomainObject mockId=new MockIdDomainObject();
    try {
      new ObjectIdentityImpl(mockId);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    mockId.setId(new MockIdDomainObject());
    try {
      new ObjectIdentityImpl(mockId);
      fail("It should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    mockId.setId(new Long(100));
    try {
      new ObjectIdentityImpl(mockId);
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test(expected=IllegalArgumentException.class) public void constructorRejectsInvalidTypeParameter() throws Exception {
    new ObjectIdentityImpl("",Long.valueOf(1));
  }
  @Test public void testEquals() throws Exception {
    ObjectIdentity obj=new ObjectIdentityImpl(DOMAIN_CLASS,Long.valueOf(1));
    MockIdDomainObject mockObj=new MockIdDomainObject();
    mockObj.setId(Long.valueOf(1));
    String string="SOME_STRING";
    assertThat(string).isNotSameAs(obj);
    assertThat(obj).isNotNull();
    assertThat(obj).isNotEqualTo("DIFFERENT_OBJECT_TYPE");
    assertThat(obj).isNotEqualTo(new ObjectIdentityImpl(DOMAIN_CLASS,Long.valueOf(2)));
    assertThat(obj).isNotEqualTo(new ObjectIdentityImpl("org.springframework.security.acls.domain.ObjectIdentityImplTests$MockOtherIdDomainObject",Long.valueOf(1)));
    assertThat(new ObjectIdentityImpl(DOMAIN_CLASS,1L)).isEqualTo(obj);
    assertThat(new ObjectIdentityImpl(mockObj)).isEqualTo(obj);
  }
  @Test public void hashcodeIsDifferentForDifferentJavaTypes() throws Exception {
    ObjectIdentity obj=new ObjectIdentityImpl(Object.class,Long.valueOf(1));
    ObjectIdentity obj2=new ObjectIdentityImpl(String.class,Long.valueOf(1));
    assertThat(obj.hashCode()).isNotEqualTo(obj2.hashCode());
  }
  @Test public void longAndIntegerIdsWithSameValueAreEqualAndHaveSameHashcode(){
    ObjectIdentity obj=new ObjectIdentityImpl(Object.class,new Long(5));
    ObjectIdentity obj2=new ObjectIdentityImpl(Object.class,Integer.valueOf(5));
    assertThat(obj2).isEqualTo(obj);
    assertThat(obj2.hashCode()).isEqualTo(obj.hashCode());
  }
  @Test public void equalStringIdsAreEqualAndHaveSameHashcode() throws Exception {
    ObjectIdentity obj=new ObjectIdentityImpl(Object.class,"1000");
    ObjectIdentity obj2=new ObjectIdentityImpl(Object.class,"1000");
    assertThat(obj2).isEqualTo(obj);
    assertThat(obj2.hashCode()).isEqualTo(obj.hashCode());
  }
  @Test public void stringAndNumericIdsAreNotEqual() throws Exception {
    ObjectIdentity obj=new ObjectIdentityImpl(Object.class,"1000");
    ObjectIdentity obj2=new ObjectIdentityImpl(Object.class,Long.valueOf(1000));
    assertThat(obj).isNotEqualTo(obj2);
  }
private class MockIdDomainObject {
    private Object id;
    public Object getId(){
      return id;
    }
    public void setId(    Object id){
      this.id=id;
    }
  }
private class MockOtherIdDomainObject {
    private Object id;
    public Object getId(){
      return id;
    }
    public void setId(    Object id){
      this.id=id;
    }
  }
}
