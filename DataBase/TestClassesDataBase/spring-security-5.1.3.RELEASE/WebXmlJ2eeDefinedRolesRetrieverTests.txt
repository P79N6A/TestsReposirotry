public class WebXmlJ2eeDefinedRolesRetrieverTests {
  @Test public void testRole1To4Roles() throws Exception {
    List<String> ROLE1TO4_EXPECTED_ROLES=Arrays.asList("Role1","Role2","Role3","Role4");
    final Resource webXml=new ClassPathResource("webxml/Role1-4.web.xml");
    WebXmlMappableAttributesRetriever rolesRetriever=new WebXmlMappableAttributesRetriever();
    rolesRetriever.setResourceLoader(new ResourceLoader(){
      public ClassLoader getClassLoader(){
        return Thread.currentThread().getContextClassLoader();
      }
      public Resource getResource(      String location){
        return webXml;
      }
    }
);
    rolesRetriever.afterPropertiesSet();
    Set<String> j2eeRoles=rolesRetriever.getMappableAttributes();
    assertThat(j2eeRoles).containsAll(ROLE1TO4_EXPECTED_ROLES);
  }
  @Test public void testGetZeroJ2eeRoles() throws Exception {
    final Resource webXml=new ClassPathResource("webxml/NoRoles.web.xml");
    WebXmlMappableAttributesRetriever rolesRetriever=new WebXmlMappableAttributesRetriever();
    rolesRetriever.setResourceLoader(new ResourceLoader(){
      public ClassLoader getClassLoader(){
        return Thread.currentThread().getContextClassLoader();
      }
      public Resource getResource(      String location){
        return webXml;
      }
    }
);
    rolesRetriever.afterPropertiesSet();
    Set<String> j2eeRoles=rolesRetriever.getMappableAttributes();
    assertThat(j2eeRoles).isEmpty();
  }
}
