/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class HttpStatusServerAccessDeniedHandlerTests {
  @Mock private ServerWebExchange exchange;
  private HttpStatus httpStatus=HttpStatus.FORBIDDEN;
  private HttpStatusServerAccessDeniedHandler handler=new HttpStatusServerAccessDeniedHandler(this.httpStatus);
  private AccessDeniedException exception=new AccessDeniedException("Forbidden");
  @Test(expected=IllegalArgumentException.class) public void constructorHttpStatusWhenNullThenException(){
    new HttpStatusServerAccessDeniedHandler((HttpStatus)null);
  }
  @Test public void commenceWhenNoSubscribersThenNoActions(){
    this.handler.handle(this.exchange,this.exception);
    verifyZeroInteractions(this.exchange);
  }
  @Test public void commenceWhenSubscribeThenStatusSet(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.handler.handle(this.exchange,this.exception).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(this.httpStatus);
  }
  @Test public void commenceWhenCustomStatusSubscribeThenStatusSet(){
    this.httpStatus=HttpStatus.NOT_FOUND;
    this.handler=new HttpStatusServerAccessDeniedHandler(this.httpStatus);
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.handler.handle(this.exchange,this.exception).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(this.httpStatus);
  }
}
