/** 
 * @author Rob Winch
 * @since 5.0
 */
public class CacheControlServerHttpHeadersWriterTests {
  CacheControlServerHttpHeadersWriter writer=new CacheControlServerHttpHeadersWriter();
  ServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
  HttpHeaders headers=exchange.getResponse().getHeaders();
  @Test public void writeHeadersWhenCacheHeadersThenWritesAllCacheControl(){
    writer.writeHttpHeaders(exchange);
    assertThat(headers).hasSize(3);
    assertThat(headers.get(HttpHeaders.CACHE_CONTROL)).containsOnly(CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE);
    assertThat(headers.get(HttpHeaders.EXPIRES)).containsOnly(CacheControlServerHttpHeadersWriter.EXPIRES_VALUE);
    assertThat(headers.get(HttpHeaders.PRAGMA)).containsOnly(CacheControlServerHttpHeadersWriter.PRAGMA_VALUE);
  }
  @Test public void writeHeadersWhenCacheControlThenNoCacheControlHeaders(){
    String cacheControl="max-age=1234";
    headers.set(HttpHeaders.CACHE_CONTROL,cacheControl);
    writer.writeHttpHeaders(exchange);
    assertThat(headers.get(HttpHeaders.CACHE_CONTROL)).containsOnly(cacheControl);
  }
  @Test public void writeHeadersWhenPragmaThenNoCacheControlHeaders(){
    String pragma="1";
    headers.set(HttpHeaders.PRAGMA,pragma);
    writer.writeHttpHeaders(exchange);
    assertThat(headers).hasSize(1);
    assertThat(headers.get(HttpHeaders.PRAGMA)).containsOnly(pragma);
  }
  @Test public void writeHeadersWhenExpiresThenNoCacheControlHeaders(){
    String expires="1";
    headers.set(HttpHeaders.EXPIRES,expires);
    writer.writeHttpHeaders(exchange);
    assertThat(headers).hasSize(1);
    assertThat(headers.get(HttpHeaders.EXPIRES)).containsOnly(expires);
  }
  @Test public void writeHeadersWhenNotModifiedThenNoCacheControlHeaders(){
    exchange.getResponse().setStatusCode(HttpStatus.NOT_MODIFIED);
    writer.writeHttpHeaders(exchange);
    assertThat(headers).isEmpty();
  }
}
