/** 
 * @author Eric Deandrea
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class CsrfServerLogoutHandlerTests {
  @Mock private ServerCsrfTokenRepository csrfTokenRepository;
  @Mock private WebFilterChain filterChain;
  private MockServerWebExchange exchange;
  private WebFilterExchange filterExchange;
  private CsrfServerLogoutHandler handler;
  @Before public void setup(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.filterExchange=new WebFilterExchange(this.exchange,this.filterChain);
    this.handler=new CsrfServerLogoutHandler(this.csrfTokenRepository);
    when(this.csrfTokenRepository.saveToken(this.exchange,null)).thenReturn(Mono.empty());
  }
  @Test public void constructorNullCsrfTokenRepository(){
    assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> new CsrfServerLogoutHandler(null)).withMessage("csrfTokenRepository cannot be null").withNoCause();
  }
  @Test public void logoutRemovesCsrfToken(){
    this.handler.logout(this.filterExchange,new TestingAuthenticationToken("user","password","ROLE_USER")).block();
    verify(this.csrfTokenRepository).saveToken(this.exchange,null);
  }
}
