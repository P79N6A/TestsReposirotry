/** 
 * @author Gunnar Hillert
 */
public class HttpStatusReturningLogoutSuccessHandlerTests {
  @Test public void testDefaultHttpStatusBeingReturned() throws Exception {
    final HttpStatusReturningLogoutSuccessHandler lsh=new HttpStatusReturningLogoutSuccessHandler();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    lsh.onLogoutSuccess(request,response,mock(Authentication.class));
    assertThat(request.getSession(false)).isNull();
    assertThat(response.getRedirectedUrl()).isNull();
    assertThat(response.getForwardedUrl()).isNull();
    assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  }
  @Test public void testCustomHttpStatusBeingReturned() throws Exception {
    final HttpStatusReturningLogoutSuccessHandler lsh=new HttpStatusReturningLogoutSuccessHandler(HttpStatus.NO_CONTENT);
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    lsh.onLogoutSuccess(request,response,mock(Authentication.class));
    assertThat(request.getSession(false)).isNull();
    assertThat(response.getRedirectedUrl()).isNull();
    assertThat(response.getForwardedUrl()).isNull();
    assertThat(response.getStatus()).isEqualTo(HttpStatus.NO_CONTENT.value());
  }
  @Test public void testThatSettNullHttpStatusThrowsException() throws Exception {
    try {
      new HttpStatusReturningLogoutSuccessHandler(null);
    }
 catch (    IllegalArgumentException e) {
      assertThat(e).hasMessage("The provided HttpStatus must not be null.");
      return;
    }
    fail("Expected an IllegalArgumentException to be thrown.");
  }
}
