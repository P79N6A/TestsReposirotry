/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class OAuth2LoginAuthenticationWebFilterTests {
  @Mock private ReactiveAuthenticationManager authenticationManager;
  @Mock private ServerOAuth2AuthorizedClientRepository authorizedClientRepository;
  private OAuth2LoginAuthenticationWebFilter filter;
  private WebFilterExchange webFilterExchange;
  private ClientRegistration.Builder registration=TestClientRegistrations.clientRegistration();
  private OAuth2AuthorizationResponse.Builder authorizationResponseBldr=OAuth2AuthorizationResponse.success("code").state("state");
  @Before public void setup(){
    this.filter=new OAuth2LoginAuthenticationWebFilter(this.authenticationManager,this.authorizedClientRepository);
    this.webFilterExchange=new WebFilterExchange(MockServerWebExchange.from(MockServerHttpRequest.get("/")),new DefaultWebFilterChain(exchange -> exchange.getResponse().setComplete()));
    when(this.authorizedClientRepository.saveAuthorizedClient(any(),any(),any())).thenReturn(Mono.empty());
  }
  @Test public void onAuthenticationSuccessWhenOAuth2LoginAuthenticationTokenThenSavesAuthorizedClient(){
    this.filter.onAuthenticationSuccess(loginToken(),this.webFilterExchange).block();
    verify(this.authorizedClientRepository).saveAuthorizedClient(any(),any(),any());
  }
  private OAuth2LoginAuthenticationToken loginToken(){
    OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,"token",Instant.now(),Instant.now().plus(Duration.ofDays(1)),Collections.singleton("user"));
    DefaultOAuth2User user=new DefaultOAuth2User(AuthorityUtils.createAuthorityList("ROLE_USER"),Collections.singletonMap("user","rob"),"user");
    ClientRegistration clientRegistration=this.registration.build();
    OAuth2AuthorizationRequest authorizationRequest=OAuth2AuthorizationRequest.authorizationCode().state("state").clientId(clientRegistration.getClientId()).authorizationUri(clientRegistration.getProviderDetails().getAuthorizationUri()).redirectUri(clientRegistration.getRedirectUriTemplate()).scopes(clientRegistration.getScopes()).build();
    OAuth2AuthorizationResponse authorizationResponse=this.authorizationResponseBldr.redirectUri(clientRegistration.getRedirectUriTemplate()).build();
    OAuth2AuthorizationExchange authorizationExchange=new OAuth2AuthorizationExchange(authorizationRequest,authorizationResponse);
    return new OAuth2LoginAuthenticationToken(clientRegistration,authorizationExchange,user,user.getAuthorities(),accessToken);
  }
}
