/** 
 * Tests  {@link OpenIDAuthenticationProvider}
 * @author Robin Bramley, Opsera Ltd
 */
public class OpenIDAuthenticationProviderTests {
  private static final String USERNAME="user.acegiopenid.com";
  @Test public void testAuthenticateCancel(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    provider.setAuthoritiesMapper(new NullAuthoritiesMapper());
    Authentication preAuth=new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.CANCELLED,USERNAME,"",null);
    assertThat(preAuth.isAuthenticated()).isFalse();
    try {
      provider.authenticate(preAuth);
      fail("Should throw an AuthenticationException");
    }
 catch (    AuthenticationCancelledException expected) {
      assertThat(expected.getMessage()).isEqualTo("Log in cancelled");
    }
  }
  @Test public void testAuthenticateError(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    Authentication preAuth=new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.ERROR,USERNAME,"",null);
    assertThat(preAuth.isAuthenticated()).isFalse();
    try {
      provider.authenticate(preAuth);
      fail("Should throw an AuthenticationException");
    }
 catch (    AuthenticationServiceException expected) {
      assertThat(expected.getMessage()).isEqualTo("Error message from server: ");
    }
  }
  @Test public void testAuthenticateFailure(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setAuthenticationUserDetailsService(new UserDetailsByNameServiceWrapper<>(new MockUserDetailsService()));
    Authentication preAuth=new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.FAILURE,USERNAME,"",null);
    assertThat(preAuth.isAuthenticated()).isFalse();
    try {
      provider.authenticate(preAuth);
      fail("Should throw an AuthenticationException");
    }
 catch (    BadCredentialsException expected) {
      assertThat("Log in failed - identity could not be verified").isEqualTo(expected.getMessage());
    }
  }
  @Test public void testAuthenticateSetupNeeded(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    Authentication preAuth=new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.SETUP_NEEDED,USERNAME,"",null);
    assertThat(preAuth.isAuthenticated()).isFalse();
    try {
      provider.authenticate(preAuth);
      fail("Should throw an AuthenticationException");
    }
 catch (    AuthenticationServiceException expected) {
      assertThat("The server responded setup was needed, which shouldn't happen").isEqualTo(expected.getMessage());
    }
  }
  @Test public void testAuthenticateSuccess(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    Authentication preAuth=new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.SUCCESS,USERNAME,"",null);
    assertThat(preAuth.isAuthenticated()).isFalse();
    Authentication postAuth=provider.authenticate(preAuth);
    assertThat(postAuth).isNotNull();
    assertThat(postAuth instanceof OpenIDAuthenticationToken).isTrue();
    assertThat(postAuth.isAuthenticated()).isTrue();
    assertThat(postAuth.getPrincipal()).isNotNull();
    assertThat(postAuth.getPrincipal() instanceof UserDetails).isTrue();
    assertThat(postAuth.getAuthorities()).isNotNull();
    assertThat(postAuth.getAuthorities().size() > 0).isTrue();
    assertThat(((OpenIDAuthenticationToken)postAuth).getStatus() == OpenIDAuthenticationStatus.SUCCESS).isTrue();
    assertThat(((OpenIDAuthenticationToken)postAuth).getMessage() == null).isTrue();
  }
  @Test public void testDetectsMissingAuthoritiesPopulator() throws Exception {
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    try {
      provider.afterPropertiesSet();
      fail("Should have thrown Exception");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testDoesntSupport(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    assertThat(provider.supports(UsernamePasswordAuthenticationToken.class)).isFalse();
  }
  @Test public void testIgnoresUserPassAuthToken(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(USERNAME,"password");
    assertThat(provider.authenticate(token)).isNull();
  }
  @Test public void testSupports(){
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    assertThat(provider.supports(OpenIDAuthenticationToken.class)).isTrue();
  }
  @Test public void testValidation() throws Exception {
    OpenIDAuthenticationProvider provider=new OpenIDAuthenticationProvider();
    try {
      provider.afterPropertiesSet();
      fail("IllegalArgumentException expected, ssoAuthoritiesPopulator is null");
    }
 catch (    IllegalArgumentException e) {
    }
    provider=new OpenIDAuthenticationProvider();
    provider.setUserDetailsService(new MockUserDetailsService());
    provider.afterPropertiesSet();
  }
static class MockUserDetailsService implements UserDetailsService {
    public UserDetails loadUserByUsername(    String ssoUserId) throws AuthenticationException {
      return new User(ssoUserId,"password",true,true,true,true,AuthorityUtils.createAuthorityList("ROLE_A","ROLE_B"));
    }
  }
}
