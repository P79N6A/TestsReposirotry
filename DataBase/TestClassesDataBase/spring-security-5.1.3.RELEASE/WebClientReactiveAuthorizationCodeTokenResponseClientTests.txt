/** 
 * @author Rob Winch
 * @since 5.1
 */
public class WebClientReactiveAuthorizationCodeTokenResponseClientTests {
  private ClientRegistration.Builder clientRegistration;
  private WebClientReactiveAuthorizationCodeTokenResponseClient tokenResponseClient=new WebClientReactiveAuthorizationCodeTokenResponseClient();
  private MockWebServer server;
  @Before public void setup() throws Exception {
    this.server=new MockWebServer();
    this.server.start();
    String tokenUri=this.server.url("/oauth2/token").toString();
    this.clientRegistration=TestClientRegistrations.clientRegistration().tokenUri(tokenUri);
  }
  @After public void cleanup() throws Exception {
    this.server.shutdown();
  }
  @Test public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() throws Exception {
    String accessTokenSuccessResponse="{\n" + "	\"access_token\": \"access-token-1234\",\n" + "   \"token_type\": \"bearer\",\n"+ "   \"expires_in\": \"3600\",\n"+ "   \"scope\": \"openid profile\",\n"+ "	\"refresh_token\": \"refresh-token-1234\",\n"+ "   \"custom_parameter_1\": \"custom-value-1\",\n"+ "   \"custom_parameter_2\": \"custom-value-2\"\n"+ "}\n";
    this.server.enqueue(jsonResponse(accessTokenSuccessResponse));
    Instant expiresAtBefore=Instant.now().plusSeconds(3600);
    OAuth2AccessTokenResponse accessTokenResponse=this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block();
    Instant expiresAtAfter=Instant.now().plusSeconds(3600);
    assertThat(accessTokenResponse.getAccessToken().getTokenValue()).isEqualTo("access-token-1234");
    assertThat(accessTokenResponse.getAccessToken().getTokenType()).isEqualTo(OAuth2AccessToken.TokenType.BEARER);
    assertThat(accessTokenResponse.getAccessToken().getExpiresAt()).isBetween(expiresAtBefore,expiresAtAfter);
    assertThat(accessTokenResponse.getAccessToken().getScopes()).containsExactly("openid","profile");
    assertThat(accessTokenResponse.getRefreshToken().getTokenValue()).isEqualTo("refresh-token-1234");
    assertThat(accessTokenResponse.getAdditionalParameters().size()).isEqualTo(2);
    assertThat(accessTokenResponse.getAdditionalParameters()).containsEntry("custom_parameter_1","custom-value-1");
    assertThat(accessTokenResponse.getAdditionalParameters()).containsEntry("custom_parameter_2","custom-value-2");
  }
  @Test public void getTokenResponseWhenErrorResponseThenThrowOAuth2AuthorizationException() throws Exception {
    String accessTokenErrorResponse="{\n" + "   \"error\": \"unauthorized_client\"\n" + "}\n";
    this.server.enqueue(jsonResponse(accessTokenErrorResponse).setResponseCode(HttpStatus.INTERNAL_SERVER_ERROR.value()));
    assertThatThrownBy(() -> this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block()).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining("unauthorized_client");
  }
  @Test public void getTokenResponseWhenServerErrorResponseThenThrowOAuth2AuthorizationException() throws Exception {
    String accessTokenErrorResponse="{}";
    this.server.enqueue(jsonResponse(accessTokenErrorResponse).setResponseCode(HttpStatus.INTERNAL_SERVER_ERROR.value()));
    assertThatThrownBy(() -> this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block()).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining("server_error");
  }
  @Test public void getTokenResponseWhenSuccessResponseAndNotBearerTokenTypeThenThrowOAuth2AuthorizationException() throws Exception {
    String accessTokenSuccessResponse="{\n" + "	\"access_token\": \"access-token-1234\",\n" + "   \"token_type\": \"not-bearer\",\n"+ "   \"expires_in\": \"3600\"\n"+ "}\n";
    this.server.enqueue(jsonResponse(accessTokenSuccessResponse));
    assertThatThrownBy(() -> this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block()).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining("invalid_token_response");
  }
  @Test public void getTokenResponseWhenSuccessResponseIncludesScopeThenReturnAccessTokenResponseUsingResponseScope() throws Exception {
    String accessTokenSuccessResponse="{\n" + "	\"access_token\": \"access-token-1234\",\n" + "   \"token_type\": \"bearer\",\n"+ "   \"expires_in\": \"3600\",\n"+ "   \"scope\": \"openid profile\"\n"+ "}\n";
    this.server.enqueue(jsonResponse(accessTokenSuccessResponse));
    this.clientRegistration.scope("openid","profile","email","address");
    OAuth2AccessTokenResponse accessTokenResponse=this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block();
    assertThat(accessTokenResponse.getAccessToken().getScopes()).containsExactly("openid","profile");
  }
  @Test public void getTokenResponseWhenSuccessResponseDoesNotIncludeScopeThenReturnAccessTokenResponseUsingRequestedScope() throws Exception {
    String accessTokenSuccessResponse="{\n" + "	\"access_token\": \"access-token-1234\",\n" + "   \"token_type\": \"bearer\",\n"+ "   \"expires_in\": \"3600\"\n"+ "}\n";
    this.server.enqueue(jsonResponse(accessTokenSuccessResponse));
    this.clientRegistration.scope("openid","profile","email","address");
    OAuth2AccessTokenResponse accessTokenResponse=this.tokenResponseClient.getTokenResponse(authorizationCodeGrantRequest()).block();
    assertThat(accessTokenResponse.getAccessToken().getScopes()).containsExactly("openid","profile","email","address");
  }
  private OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest(){
    ClientRegistration registration=this.clientRegistration.build();
    OAuth2AuthorizationRequest authorizationRequest=OAuth2AuthorizationRequest.authorizationCode().clientId(registration.getClientId()).state("state").authorizationUri(registration.getProviderDetails().getAuthorizationUri()).redirectUri(registration.getRedirectUriTemplate()).scopes(registration.getScopes()).build();
    OAuth2AuthorizationResponse authorizationResponse=OAuth2AuthorizationResponse.success("code").state("state").redirectUri(registration.getRedirectUriTemplate()).build();
    OAuth2AuthorizationExchange authorizationExchange=new OAuth2AuthorizationExchange(authorizationRequest,authorizationResponse);
    return new OAuth2AuthorizationCodeGrantRequest(registration,authorizationExchange);
  }
  private MockResponse jsonResponse(  String json){
    return new MockResponse().setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON_VALUE).setBody(json);
  }
}
