@Configuration @EnableWebSocketMessageBroker @Import(SyncExecutorConfig.class) static class CustomExpressionConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {
  public void registerStompEndpoints(  StompEndpointRegistry registry){
    registry.addEndpoint("/other").setHandshakeHandler(testHandshakeHandler());
  }
  @Override protected void configureInbound(  MessageSecurityMetadataSourceRegistry messages){
    messages.anyMessage().access("denyRob()");
  }
  @Bean public static SecurityExpressionHandler<Message<Object>> messageSecurityExpressionHandler(){
    return new DefaultMessageSecurityExpressionHandler<Object>(){
      @Override protected SecurityExpressionOperations createSecurityExpressionRoot(      Authentication authentication,      Message<Object> invocation){
        return new MessageSecurityExpressionRoot(authentication,invocation){
          public boolean denyRob(){
            Authentication auth=getAuthentication();
            return auth != null && !"rob".equals(auth.getName());
          }
        }
;
      }
    }
;
  }
  @Override public void configureMessageBroker(  MessageBrokerRegistry registry){
    registry.enableSimpleBroker("/queue/","/topic/");
    registry.setApplicationDestinationPrefixes("/app");
  }
  @Bean public TestHandshakeHandler testHandshakeHandler(){
    return new TestHandshakeHandler();
  }
}
