/** 
 * @author Luke Taylor
 */
@SuppressWarnings({"unchecked"}) public class WebExpressionVoterTests {
  private Authentication user=new TestingAuthenticationToken("user","pass","X");
  @Test public void supportsWebConfigAttributeAndFilterInvocation() throws Exception {
    WebExpressionVoter voter=new WebExpressionVoter();
    assertThat(voter.supports(new WebExpressionConfigAttribute(mock(Expression.class),mock(EvaluationContextPostProcessor.class)))).isTrue();
    assertThat(voter.supports(FilterInvocation.class)).isTrue();
    assertThat(voter.supports(MethodInvocation.class)).isFalse();
  }
  @Test public void abstainsIfNoAttributeFound(){
    WebExpressionVoter voter=new WebExpressionVoter();
    assertThat(voter.vote(user,new FilterInvocation("/path","GET"),SecurityConfig.createList("A","B","C"))).isEqualTo(AccessDecisionVoter.ACCESS_ABSTAIN);
  }
  @Test public void grantsAccessIfExpressionIsTrueDeniesIfFalse(){
    WebExpressionVoter voter=new WebExpressionVoter();
    Expression ex=mock(Expression.class);
    EvaluationContextPostProcessor postProcessor=mock(EvaluationContextPostProcessor.class);
    when(postProcessor.postProcess(any(EvaluationContext.class),any(FilterInvocation.class))).thenAnswer(invocation -> invocation.getArgument(0));
    WebExpressionConfigAttribute weca=new WebExpressionConfigAttribute(ex,postProcessor);
    EvaluationContext ctx=mock(EvaluationContext.class);
    SecurityExpressionHandler eh=mock(SecurityExpressionHandler.class);
    FilterInvocation fi=new FilterInvocation("/path","GET");
    voter.setExpressionHandler(eh);
    when(eh.createEvaluationContext(user,fi)).thenReturn(ctx);
    when(ex.getValue(ctx,Boolean.class)).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    ArrayList attributes=new ArrayList();
    attributes.addAll(SecurityConfig.createList("A","B","C"));
    attributes.add(weca);
    assertThat(voter.vote(user,fi,attributes)).isEqualTo(AccessDecisionVoter.ACCESS_GRANTED);
    assertThat(voter.vote(user,fi,attributes)).isEqualTo(AccessDecisionVoter.ACCESS_DENIED);
  }
  @Test public void supportFilterInvocationSubClass(){
    WebExpressionVoter voter=new WebExpressionVoter();
    assertThat(voter.supports(FilterInvocationChild.class)).isTrue();
  }
private static class FilterInvocationChild extends FilterInvocation {
    public FilterInvocationChild(    ServletRequest request,    ServletResponse response,    FilterChain chain){
      super(request,response,chain);
    }
  }
  @Test public void supportFilterInvocation(){
    WebExpressionVoter voter=new WebExpressionVoter();
    assertThat(voter.supports(FilterInvocation.class)).isTrue();
  }
  @Test public void supportsObjectIsFalse(){
    WebExpressionVoter voter=new WebExpressionVoter();
    assertThat(voter.supports(Object.class)).isFalse();
  }
}
