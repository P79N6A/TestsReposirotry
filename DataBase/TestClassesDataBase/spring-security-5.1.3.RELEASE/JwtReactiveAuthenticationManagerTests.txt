/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class JwtReactiveAuthenticationManagerTests {
  @Mock private ReactiveJwtDecoder jwtDecoder;
  private JwtReactiveAuthenticationManager manager;
  private Jwt jwt;
  @Before public void setup(){
    this.manager=new JwtReactiveAuthenticationManager(this.jwtDecoder);
    Map<String,Object> claims=new HashMap<>();
    claims.put("scope","message:read message:write");
    Instant issuedAt=Instant.now();
    Instant expiresAt=Instant.from(issuedAt).plusSeconds(3600);
    this.jwt=new Jwt("jwt",issuedAt,expiresAt,claims,claims);
  }
  @Test public void constructorWhenJwtDecoderNullThenIllegalArgumentException(){
    this.jwtDecoder=null;
    assertThatCode(() -> new JwtReactiveAuthenticationManager(this.jwtDecoder)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void authenticateWhenWrongTypeThenEmpty(){
    TestingAuthenticationToken token=new TestingAuthenticationToken("foo","bar");
    assertThat(this.manager.authenticate(token).block()).isNull();
  }
  @Test public void authenticateWhenEmptyJwtThenEmpty(){
    BearerTokenAuthenticationToken token=new BearerTokenAuthenticationToken("token-1");
    when(this.jwtDecoder.decode(token.getToken())).thenReturn(Mono.empty());
    assertThat(this.manager.authenticate(token).block()).isNull();
  }
  @Test public void authenticateWhenJwtExceptionThenOAuth2AuthenticationException(){
    BearerTokenAuthenticationToken token=new BearerTokenAuthenticationToken("token-1");
    when(this.jwtDecoder.decode(any())).thenReturn(Mono.error(new JwtException("Oops")));
    assertThatCode(() -> this.manager.authenticate(token).block()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void authenticateWhenNotJwtExceptionThenPropagates(){
    BearerTokenAuthenticationToken token=new BearerTokenAuthenticationToken("token-1");
    when(this.jwtDecoder.decode(any())).thenReturn(Mono.error(new RuntimeException("Oops")));
    assertThatCode(() -> this.manager.authenticate(token).block()).isInstanceOf(RuntimeException.class);
  }
  @Test public void authenticateWhenJwtThenSuccess(){
    BearerTokenAuthenticationToken token=new BearerTokenAuthenticationToken("token-1");
    when(this.jwtDecoder.decode(token.getToken())).thenReturn(Mono.just(this.jwt));
    Authentication authentication=this.manager.authenticate(token).block();
    assertThat(authentication).isNotNull();
    assertThat(authentication.isAuthenticated()).isTrue();
    assertThat(authentication.getAuthorities()).extracting(GrantedAuthority::getAuthority).containsOnly("SCOPE_message:read","SCOPE_message:write");
  }
}
