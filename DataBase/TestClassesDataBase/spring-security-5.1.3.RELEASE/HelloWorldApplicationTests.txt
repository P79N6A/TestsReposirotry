/** 
 * @author Joe Grandja
 */
@RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest @AutoConfigureMockMvc public class HelloWorldApplicationTests {
  @Autowired private MockMvc mockMvc;
  @Test public void accessUnprotected() throws Exception {
    this.mockMvc.perform(get("/index")).andExpect(status().isOk());
  }
  @Test public void accessProtectedRedirectsToLogin() throws Exception {
    MvcResult mvcResult=this.mockMvc.perform(get("/user/index")).andExpect(status().is3xxRedirection()).andReturn();
    assertThat(mvcResult.getResponse().getRedirectedUrl()).endsWith("/login");
  }
  @Test public void loginUser() throws Exception {
    this.mockMvc.perform(formLogin().user("user").password("password")).andExpect(authenticated());
  }
  @Test public void loginInvalidUser() throws Exception {
    this.mockMvc.perform(formLogin().user("invalid").password("invalid")).andExpect(unauthenticated()).andExpect(status().is3xxRedirection());
  }
  @Test public void loginUserAccessProtected() throws Exception {
    MvcResult mvcResult=this.mockMvc.perform(formLogin().user("user").password("password")).andExpect(authenticated()).andReturn();
    MockHttpSession httpSession=(MockHttpSession)mvcResult.getRequest().getSession(false);
    this.mockMvc.perform(get("/user/index").session(httpSession)).andExpect(status().isOk());
  }
  @Test public void loginUserValidateLogout() throws Exception {
    MvcResult mvcResult=this.mockMvc.perform(formLogin().user("user").password("password")).andExpect(authenticated()).andReturn();
    MockHttpSession httpSession=(MockHttpSession)mvcResult.getRequest().getSession(false);
    this.mockMvc.perform(post("/logout").with(csrf()).session(httpSession)).andExpect(unauthenticated());
    this.mockMvc.perform(get("/user/index").session(httpSession)).andExpect(unauthenticated()).andExpect(status().is3xxRedirection());
  }
}
