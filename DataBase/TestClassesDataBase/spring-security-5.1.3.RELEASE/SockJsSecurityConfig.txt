@Configuration @EnableWebSocketMessageBroker @Import(SyncExecutorConfig.class) static class SockJsSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {
  public void registerStompEndpoints(  StompEndpointRegistry registry){
    registry.addEndpoint("/other").setHandshakeHandler(testHandshakeHandler()).withSockJS().setInterceptors(new HttpSessionHandshakeInterceptor());
    registry.addEndpoint("/chat").setHandshakeHandler(testHandshakeHandler()).withSockJS().setInterceptors(new HttpSessionHandshakeInterceptor());
  }
  @Override protected void configureInbound(  MessageSecurityMetadataSourceRegistry messages){
    messages.simpDestMatchers("/permitAll/**").permitAll().simpDestMatchers("/beanResolver/**").access("@security.check()").anyMessage().denyAll();
  }
  @Override public void configureMessageBroker(  MessageBrokerRegistry registry){
    registry.enableSimpleBroker("/queue/","/topic/");
    registry.setApplicationDestinationPrefixes("/permitAll","/denyAll");
  }
  @Bean public MyController myController(){
    return new MyController();
  }
  @Bean public TestHandshakeHandler testHandshakeHandler(){
    return new TestHandshakeHandler();
  }
  @Bean public SecurityCheck security(){
    return new SecurityCheck();
  }
static class SecurityCheck {
    private boolean check;
    public boolean check(){
      check=!check;
      return check;
    }
  }
}
