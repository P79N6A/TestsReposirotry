/** 
 * Tests  {@link AbstractAuthenticationEvent} and its subclasses.
 * @author Ben Alex
 */
public class AuthenticationEventTests {
  private Authentication getAuthentication(){
    UsernamePasswordAuthenticationToken authentication=new UsernamePasswordAuthenticationToken("Principal","Credentials");
    authentication.setDetails("127.0.0.1");
    return authentication;
  }
  @Test public void testAbstractAuthenticationEvent(){
    Authentication auth=getAuthentication();
    AbstractAuthenticationEvent event=new AuthenticationSuccessEvent(auth);
    assertThat(event.getAuthentication()).isEqualTo(auth);
  }
  @Test public void testAbstractAuthenticationFailureEvent(){
    Authentication auth=getAuthentication();
    AuthenticationException exception=new DisabledException("TEST");
    AbstractAuthenticationFailureEvent event=new AuthenticationFailureDisabledEvent(auth,exception);
    assertThat(event.getAuthentication()).isEqualTo(auth);
    assertThat(event.getException()).isEqualTo(exception);
  }
  @Test public void testRejectsNullAuthentication(){
    AuthenticationException exception=new DisabledException("TEST");
    try {
      new AuthenticationFailureDisabledEvent(null,exception);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testRejectsNullAuthenticationException(){
    try {
      new AuthenticationFailureDisabledEvent(getAuthentication(),null);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
}
