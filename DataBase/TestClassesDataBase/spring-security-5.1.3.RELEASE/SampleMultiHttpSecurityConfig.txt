/** 
 * <code> <http security="none" pattern="/resources/**"/> <http pattern="/api/**"> <intercept-url pattern="/api/admin/**" access="hasRole('ROLE_ADMIN')"/> <intercept-url pattern="/api/**" access="hasRole('ROLE_USER')"/> <http-basic /> </http> <http> <intercept-url pattern="/logout" access="permitAll"/> <intercept-url pattern="/login" access="permitAll"/> <intercept-url pattern="/signup" access="permitAll"/> <intercept-url pattern="/about" access="permitAll"/> <intercept-url pattern="/**" access="hasRole('ROLE_USER')"/> <logout logout-success-url="/login?logout" logout-url="/logout" <form-login authentication-failure-url="/login?error" login-page="/login" login-processing-url="/login" <!-- but only POST --> password-parameter="password" username-parameter="username" /> </http> <authentication-manager> <authentication-provider> <user-service> <user username="user" password="password" authorities="ROLE_USER"/> <user username="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN"/> </user-service> </authentication-provider> </authentication-manager> </code>
 * @author Rob Winch
 */
@EnableWebSecurity public static class SampleMultiHttpSecurityConfig {
  @Autowired protected void configure(  AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user()).withUser(PasswordEncodedUser.admin());
  }
@Configuration @Order(1) public static class ApiWebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter {
    protected void configure(    HttpSecurity http) throws Exception {
      http.antMatcher("/api/**").authorizeRequests().antMatchers("/api/admin/**").hasRole("ADMIN").antMatchers("/api/**").hasRole("USER").and().httpBasic();
    }
  }
@Configuration public static class FormLoginWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {
    @Override public void configure(    WebSecurity web) throws Exception {
      web.ignoring().antMatchers("/resources/**");
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().antMatchers("/signup","/about").permitAll().anyRequest().hasRole("USER").and().formLogin().loginPage("/login").permitAll();
    }
  }
}
