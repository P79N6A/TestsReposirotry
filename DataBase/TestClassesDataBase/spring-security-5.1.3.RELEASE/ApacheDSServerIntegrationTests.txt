/** 
 * @author Luke Taylor
 */
@RunWith(Suite.class) @Suite.SuiteClasses({BindAuthenticatorTests.class,PasswordComparisonAuthenticatorTests.class,FilterBasedLdapUserSearchTests.class,DefaultLdapAuthoritiesPopulatorTests.class,LdapUserDetailsManagerTests.class,DefaultSpringSecurityContextSourceTests.class,SpringSecurityLdapTemplateITests.class}) public final class ApacheDSServerIntegrationTests {
  private static ApacheDSContainer server;
  private static Integer serverPort;
  @BeforeClass public static void startServer() throws Exception {
    server=new ApacheDSContainer("dc=springframework,dc=org","classpath:test-server.ldif");
    int port=getAvailablePort();
    server.setPort(port);
    server.afterPropertiesSet();
    serverPort=port;
  }
  @AfterClass public static void stopServer() throws Exception {
    serverPort=null;
    if (server != null) {
      server.stop();
    }
  }
  /** 
 * Main class to allow server to be started from gradle script
 */
  public static void main(  String[] args) throws Exception {
    ApacheDSContainer server=new ApacheDSContainer("dc=springframework,dc=org","classpath:test-server.ldif");
    server.afterPropertiesSet();
  }
  public static int getServerPort(){
    if (serverPort == null) {
      throw new IllegalStateException("The ApacheDSContainer is not currently running");
    }
    return serverPort;
  }
  private static int getAvailablePort() throws IOException {
    ServerSocket serverSocket=null;
    try {
      serverSocket=new ServerSocket(0);
      return serverSocket.getLocalPort();
    }
  finally {
      if (serverSocket != null) {
        try {
          serverSocket.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
