/** 
 * Tests for  {@link OAuth2ErrorHttpMessageConverter}.
 * @author Joe Grandja
 */
public class OAuth2ErrorHttpMessageConverterTests {
  private OAuth2ErrorHttpMessageConverter messageConverter;
  @Before public void setup(){
    this.messageConverter=new OAuth2ErrorHttpMessageConverter();
  }
  @Test public void supportsWhenOAuth2ErrorThenTrue(){
    assertThat(this.messageConverter.supports(OAuth2Error.class)).isTrue();
  }
  @Test public void setErrorConverterWhenConverterIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> this.messageConverter.setErrorConverter(null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void setErrorParametersConverterWhenConverterIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> this.messageConverter.setErrorParametersConverter(null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void readInternalWhenErrorResponseThenReadOAuth2Error() throws Exception {
    String errorResponse="{\n" + "	\"error\": \"unauthorized_client\",\n" + "   \"error_description\": \"The client is not authorized\",\n"+ "   \"error_uri\": \"https://tools.ietf.org/html/rfc6749#section-5.2\"\n"+ "}\n";
    MockClientHttpResponse response=new MockClientHttpResponse(errorResponse.getBytes(),HttpStatus.BAD_REQUEST);
    OAuth2Error oauth2Error=this.messageConverter.readInternal(OAuth2Error.class,response);
    assertThat(oauth2Error.getErrorCode()).isEqualTo("unauthorized_client");
    assertThat(oauth2Error.getDescription()).isEqualTo("The client is not authorized");
    assertThat(oauth2Error.getUri()).isEqualTo("https://tools.ietf.org/html/rfc6749#section-5.2");
  }
  @Test public void readInternalWhenConversionFailsThenThrowHttpMessageNotReadableException(){
    Converter errorConverter=mock(Converter.class);
    when(errorConverter.convert(any())).thenThrow(RuntimeException.class);
    this.messageConverter.setErrorConverter(errorConverter);
    String errorResponse="{}";
    MockClientHttpResponse response=new MockClientHttpResponse(errorResponse.getBytes(),HttpStatus.BAD_REQUEST);
    assertThatThrownBy(() -> this.messageConverter.readInternal(OAuth2Error.class,response)).isInstanceOf(HttpMessageNotReadableException.class).hasMessageContaining("An error occurred reading the OAuth 2.0 Error");
  }
  @Test public void writeInternalWhenOAuth2ErrorThenWriteErrorResponse() throws Exception {
    OAuth2Error oauth2Error=new OAuth2Error("unauthorized_client","The client is not authorized","https://tools.ietf.org/html/rfc6749#section-5.2");
    MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();
    this.messageConverter.writeInternal(oauth2Error,outputMessage);
    String errorResponse=outputMessage.getBodyAsString();
    assertThat(errorResponse).contains("\"error\":\"unauthorized_client\"");
    assertThat(errorResponse).contains("\"error_description\":\"The client is not authorized\"");
    assertThat(errorResponse).contains("\"error_uri\":\"https://tools.ietf.org/html/rfc6749#section-5.2\"");
  }
  @Test public void writeInternalWhenConversionFailsThenThrowHttpMessageNotWritableException(){
    Converter errorParametersConverter=mock(Converter.class);
    when(errorParametersConverter.convert(any())).thenThrow(RuntimeException.class);
    this.messageConverter.setErrorParametersConverter(errorParametersConverter);
    OAuth2Error oauth2Error=new OAuth2Error("unauthorized_client","The client is not authorized","https://tools.ietf.org/html/rfc6749#section-5.2");
    MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();
    assertThatThrownBy(() -> this.messageConverter.writeInternal(oauth2Error,outputMessage)).isInstanceOf(HttpMessageNotWritableException.class).hasMessageContaining("An error occurred writing the OAuth 2.0 Error");
  }
}
