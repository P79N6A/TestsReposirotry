/** 
 * @author Rob Winch
 * @since 3.2
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingSecurityContextCallableTests {
  @Mock private Callable<Object> delegate;
  @Mock private SecurityContext securityContext;
  @Mock private Object callableResult;
  private Callable<Object> callable;
  private ExecutorService executor;
  private SecurityContext originalSecurityContext;
  @Before @SuppressWarnings("serial") public void setUp() throws Exception {
    originalSecurityContext=SecurityContextHolder.createEmptyContext();
    when(delegate.call()).thenAnswer(new Returns(callableResult){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        assertThat(SecurityContextHolder.getContext()).isEqualTo(securityContext);
        return super.answer(invocation);
      }
    }
);
    executor=Executors.newFixedThreadPool(1);
  }
  @After public void tearDown(){
    SecurityContextHolder.clearContext();
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullDelegate(){
    new DelegatingSecurityContextCallable<>(null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullDelegateNonNullSecurityContext(){
    new DelegatingSecurityContextCallable<>(null,securityContext);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullDelegateAndSecurityContext(){
    new DelegatingSecurityContextCallable<>(null,null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullSecurityContext(){
    new DelegatingSecurityContextCallable<>(delegate,null);
  }
  @Test public void call() throws Exception {
    callable=new DelegatingSecurityContextCallable<>(delegate,securityContext);
    assertWrapped(callable);
  }
  @Test public void callDefaultSecurityContext() throws Exception {
    SecurityContextHolder.setContext(securityContext);
    callable=new DelegatingSecurityContextCallable<>(delegate);
    SecurityContextHolder.clearContext();
    assertWrapped(callable);
  }
  @Test public void callOnSameThread() throws Exception {
    originalSecurityContext=securityContext;
    SecurityContextHolder.setContext(originalSecurityContext);
    callable=new DelegatingSecurityContextCallable<>(delegate,securityContext);
    assertWrapped(callable.call());
  }
  @Test(expected=IllegalArgumentException.class) public void createNullDelegate(){
    DelegatingSecurityContextCallable.create(null,securityContext);
  }
  @Test(expected=IllegalArgumentException.class) public void createNullDelegateAndSecurityContext(){
    DelegatingSecurityContextRunnable.create(null,null);
  }
  @Test public void createNullSecurityContext() throws Exception {
    SecurityContextHolder.setContext(securityContext);
    callable=DelegatingSecurityContextCallable.create(delegate,null);
    SecurityContextHolder.clearContext();
    assertWrapped(callable);
  }
  @Test public void create() throws Exception {
    callable=DelegatingSecurityContextCallable.create(delegate,securityContext);
    assertWrapped(callable);
  }
  @Test public void toStringDelegates(){
    callable=new DelegatingSecurityContextCallable<>(delegate,securityContext);
    assertThat(callable.toString()).isEqualTo(delegate.toString());
  }
  private void assertWrapped(  Callable<Object> callable) throws Exception {
    Future<Object> submit=executor.submit(callable);
    assertWrapped(submit.get());
  }
  private void assertWrapped(  Object callableResult) throws Exception {
    verify(delegate).call();
    assertThat(SecurityContextHolder.getContext()).isEqualTo(originalSecurityContext);
  }
}
