/** 
 * Tests for  {@link OAuth2AuthorizedClient}.
 * @author Joe Grandja
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(ClientRegistration.class) public class OAuth2AuthorizedClientTests {
  private ClientRegistration clientRegistration;
  private String principalName;
  private OAuth2AccessToken accessToken;
  @Before public void setUp(){
    this.clientRegistration=mock(ClientRegistration.class);
    this.principalName="principal";
    this.accessToken=mock(OAuth2AccessToken.class);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizedClient(null,this.principalName,this.accessToken);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenPrincipalNameIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizedClient(this.clientRegistration,null,this.accessToken);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorWhenAccessTokenIsNullThenThrowIllegalArgumentException(){
    new OAuth2AuthorizedClient(this.clientRegistration,this.principalName,null);
  }
  @Test public void constructorWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2AuthorizedClient authorizedClient=new OAuth2AuthorizedClient(this.clientRegistration,this.principalName,this.accessToken);
    assertThat(authorizedClient.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authorizedClient.getPrincipalName()).isEqualTo(this.principalName);
    assertThat(authorizedClient.getAccessToken()).isEqualTo(this.accessToken);
  }
}
