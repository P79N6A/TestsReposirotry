/** 
 * Tests for  {@link PasswordComparisonAuthenticator}.
 * @author Luke Taylor
 */
public class PasswordComparisonAuthenticatorTests extends AbstractLdapIntegrationTests {
  private PasswordComparisonAuthenticator authenticator;
  private Authentication bob;
  private Authentication ben;
  @Before public void setUp() throws Exception {
    authenticator=new PasswordComparisonAuthenticator(getContextSource());
    authenticator.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
    authenticator.setUserDnPatterns(new String[]{"uid={0},ou=people"});
    bob=new UsernamePasswordAuthenticationToken("bob","bobspassword");
    ben=new UsernamePasswordAuthenticationToken("ben","benspassword");
  }
  @Test public void testAllAttributesAreRetrievedByDefault(){
    DirContextAdapter user=(DirContextAdapter)authenticator.authenticate(bob);
    assertThat(user.getAttributes().size()).withFailMessage("User should have 5 attributes").isEqualTo(5);
  }
  @Test public void testFailedSearchGivesUserNotFoundException() throws Exception {
    authenticator=new PasswordComparisonAuthenticator(getContextSource());
    assertThat(authenticator.getUserDns("Bob")).withFailMessage("User DN matches shouldn't be available").isEmpty();
    authenticator.setUserSearch(new MockUserSearch(null));
    authenticator.afterPropertiesSet();
    try {
      authenticator.authenticate(new UsernamePasswordAuthenticationToken("Joe","pass"));
      fail("Expected exception on failed user search");
    }
 catch (    UsernameNotFoundException expected) {
    }
  }
  @Test(expected=BadCredentialsException.class) public void testLdapPasswordCompareFailsWithWrongPassword(){
    authenticator.setUserAttributes(new String[]{"uid","cn","sn"});
    authenticator.authenticate(new UsernamePasswordAuthenticationToken("bob","wrongpass"));
  }
  @Test public void testMultipleDnPatternsWorkOk(){
    authenticator.setUserDnPatterns(new String[]{"uid={0},ou=nonexistent","uid={0},ou=people"});
    authenticator.authenticate(bob);
  }
  @Test public void testOnlySpecifiedAttributesAreRetrieved() throws Exception {
    authenticator.setUserAttributes(new String[]{"uid","userPassword"});
    DirContextAdapter user=(DirContextAdapter)authenticator.authenticate(bob);
    assertThat(user.getAttributes().size()).withFailMessage("Should have retrieved 2 attribute (uid)").isEqualTo(2);
  }
  @Test public void testLdapCompareSucceedsWithCorrectPassword(){
    authenticator.setUserAttributes(new String[]{"uid"});
    authenticator.authenticate(bob);
  }
  @Test public void testLdapCompareSucceedsWithShaEncodedPassword(){
    authenticator.setUserAttributes(new String[]{"uid"});
    authenticator.setPasswordEncoder(new LdapShaPasswordEncoder(KeyGenerators.shared(0)));
    authenticator.setUsePasswordAttrCompare(false);
    authenticator.authenticate(ben);
  }
  @Test(expected=IllegalArgumentException.class) public void testPasswordEncoderCantBeNull(){
    authenticator.setPasswordEncoder((PasswordEncoder)null);
  }
  @Test public void testUseOfDifferentPasswordAttributeSucceeds(){
    authenticator.setPasswordAttributeName("uid");
    authenticator.authenticate(new UsernamePasswordAuthenticationToken("bob","bob"));
  }
  @Test public void testLdapCompareWithDifferentPasswordAttributeSucceeds(){
    authenticator.setUserAttributes(new String[]{"uid"});
    authenticator.setPasswordAttributeName("cn");
    authenticator.authenticate(new UsernamePasswordAuthenticationToken("ben","Ben Alex"));
  }
  @Test public void testWithUserSearch(){
    authenticator=new PasswordComparisonAuthenticator(getContextSource());
    authenticator.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
    assertThat(authenticator.getUserDns("Bob")).withFailMessage("User DN matches shouldn't be available").isEmpty();
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("uid=Bob,ou=people"));
    ctx.setAttributeValue("userPassword","bobspassword");
    authenticator.setUserSearch(new MockUserSearch(ctx));
    authenticator.authenticate(new UsernamePasswordAuthenticationToken("shouldntbeused","bobspassword"));
  }
}
