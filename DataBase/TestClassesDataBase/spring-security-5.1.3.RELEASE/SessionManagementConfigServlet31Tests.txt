/** 
 * @author Rob Winch
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ReflectionUtils.class,Method.class}) @PowerMockIgnore({"org.w3c.dom.*","org.xml.sax.*","org.apache.xerces.*","javax.xml.parsers.*"}) public class SessionManagementConfigServlet31Tests {
  private static final String XML_AUTHENTICATION_MANAGER="<authentication-manager>" + "  <authentication-provider>" + "    <user-service>"+ "      <user name='user' password='{noop}password' authorities='ROLE_USER' />"+ "    </user-service>"+ "  </authentication-provider>"+ "</authentication-manager>";
  @Mock Method method;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  MockFilterChain chain;
  ConfigurableApplicationContext context;
  Filter springSecurityFilterChain;
  @Before public void setup(){
    request=new MockHttpServletRequest("GET","");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
  }
  @After public void teardown(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void changeSessionIdDefaultsInServlet31Plus() throws Exception {
    spy(ReflectionUtils.class);
    Method method=mock(Method.class);
    MockHttpServletRequest request=new MockHttpServletRequest("GET","");
    request.getSession();
    request.setServletPath("/login");
    request.setMethod("POST");
    request.setParameter("username","user");
    request.setParameter("password","password");
    when(ReflectionUtils.findMethod(HttpServletRequest.class,"changeSessionId")).thenReturn(method);
    loadContext("<http>\n" + "        <form-login/>\n" + "        <session-management/>\n"+ "        <csrf disabled='true'/>\n"+ "    </http>"+ XML_AUTHENTICATION_MANAGER);
    springSecurityFilterChain.doFilter(request,response,chain);
    verifyStatic(ReflectionUtils.class);
    ReflectionUtils.invokeMethod(same(method),any(HttpServletRequest.class));
  }
  @Test public void changeSessionId() throws Exception {
    spy(ReflectionUtils.class);
    Method method=mock(Method.class);
    MockHttpServletRequest request=new MockHttpServletRequest("GET","");
    request.getSession();
    request.setServletPath("/login");
    request.setMethod("POST");
    request.setParameter("username","user");
    request.setParameter("password","password");
    when(ReflectionUtils.findMethod(HttpServletRequest.class,"changeSessionId")).thenReturn(method);
    loadContext("<http>\n" + "        <form-login/>\n" + "        <session-management session-fixation-protection='changeSessionId'/>\n"+ "        <csrf disabled='true'/>\n"+ "    </http>"+ XML_AUTHENTICATION_MANAGER);
    springSecurityFilterChain.doFilter(request,response,chain);
    verifyStatic(ReflectionUtils.class);
    ReflectionUtils.invokeMethod(same(method),any(HttpServletRequest.class));
  }
  private void loadContext(  String context){
    this.context=new InMemoryXmlApplicationContext(context);
    this.springSecurityFilterChain=this.context.getBean("springSecurityFilterChain",Filter.class);
  }
  private void login(  Authentication auth){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    HttpRequestResponseHolder requestResponseHolder=new HttpRequestResponseHolder(request,response);
    repo.loadContext(requestResponseHolder);
    SecurityContextImpl securityContextImpl=new SecurityContextImpl();
    securityContextImpl.setAuthentication(auth);
    repo.saveContext(securityContextImpl,requestResponseHolder.getRequest(),requestResponseHolder.getResponse());
  }
}
