/** 
 * Tests  {@link PortMapperImpl}.
 * @author Ben Alex
 */
public class PortMapperImplTests {
  @Test public void testDefaultMappingsAreKnown() throws Exception {
    PortMapperImpl portMapper=new PortMapperImpl();
    assertThat(portMapper.lookupHttpPort(Integer.valueOf(443))).isEqualTo(Integer.valueOf(80));
    assertThat(Integer.valueOf(8080)).isEqualTo(portMapper.lookupHttpPort(Integer.valueOf(8443)));
    assertThat(Integer.valueOf(443)).isEqualTo(portMapper.lookupHttpsPort(Integer.valueOf(80)));
    assertThat(Integer.valueOf(8443)).isEqualTo(portMapper.lookupHttpsPort(Integer.valueOf(8080)));
  }
  @Test public void testDetectsEmptyMap() throws Exception {
    PortMapperImpl portMapper=new PortMapperImpl();
    try {
      portMapper.setPortMappings(new HashMap<>());
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testDetectsNullMap() throws Exception {
    PortMapperImpl portMapper=new PortMapperImpl();
    try {
      portMapper.setPortMappings(null);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testGetTranslatedPortMappings(){
    PortMapperImpl portMapper=new PortMapperImpl();
    assertThat(portMapper.getTranslatedPortMappings()).hasSize(2);
  }
  @Test public void testRejectsOutOfRangeMappings(){
    PortMapperImpl portMapper=new PortMapperImpl();
    Map<String,String> map=new HashMap<>();
    map.put("79","80559");
    try {
      portMapper.setPortMappings(map);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testReturnsNullIfHttpPortCannotBeFound(){
    PortMapperImpl portMapper=new PortMapperImpl();
    assertThat(portMapper.lookupHttpPort(Integer.valueOf("34343")) == null).isTrue();
  }
  @Test public void testSupportsCustomMappings(){
    PortMapperImpl portMapper=new PortMapperImpl();
    Map<String,String> map=new HashMap<>();
    map.put("79","442");
    portMapper.setPortMappings(map);
    assertThat(portMapper.lookupHttpPort(Integer.valueOf(442))).isEqualTo(Integer.valueOf(79));
    assertThat(Integer.valueOf(442)).isEqualTo(portMapper.lookupHttpsPort(Integer.valueOf(79)));
  }
}
