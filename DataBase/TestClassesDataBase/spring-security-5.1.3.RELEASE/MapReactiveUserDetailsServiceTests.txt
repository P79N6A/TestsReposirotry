public class MapReactiveUserDetailsServiceTests {
  private static final UserDetails USER_DETAILS=User.withUsername("user").password("password").roles("USER").build();
  private MapReactiveUserDetailsService users=new MapReactiveUserDetailsService(Arrays.asList(USER_DETAILS));
  @Test(expected=IllegalArgumentException.class) public void constructorNullUsers(){
    Collection<UserDetails> users=null;
    new MapReactiveUserDetailsService(users);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorEmptyUsers(){
    Collection<UserDetails> users=Collections.emptyList();
    new MapReactiveUserDetailsService(users);
  }
  @Test public void findByUsernameWhenFoundThenReturns(){
    assertThat((users.findByUsername(USER_DETAILS.getUsername()).block())).isEqualTo(USER_DETAILS);
  }
  @Test public void findByUsernameWhenDifferentCaseThenReturns(){
    assertThat((users.findByUsername("uSeR").block())).isEqualTo(USER_DETAILS);
  }
  @Test public void findByUsernameWhenClearCredentialsThenFindByUsernameStillHasCredentials(){
    User foundUser=users.findByUsername(USER_DETAILS.getUsername()).cast(User.class).block();
    assertThat(foundUser.getPassword()).isNotEmpty();
    foundUser.eraseCredentials();
    assertThat(foundUser.getPassword()).isNull();
    foundUser=users.findByUsername(USER_DETAILS.getUsername()).cast(User.class).block();
    assertThat(foundUser.getPassword()).isNotEmpty();
  }
  @Test public void findByUsernameWhenNotFoundThenEmpty(){
    assertThat((users.findByUsername("notfound"))).isEqualTo(Mono.empty());
  }
  @Test public void updatePassword(){
    users.updatePassword(USER_DETAILS,"new").block();
    assertThat(users.findByUsername(USER_DETAILS.getUsername()).block().getPassword()).isEqualTo("new");
  }
}
