/** 
 * Tests usage of the &lt;openid-login&gt; element
 * @author Luke Taylor
 */
public class OpenIDConfigTests {
  private static final String CONFIG_LOCATION_PREFIX="classpath:org/springframework/security/config/http/OpenIDConfigTests";
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void requestWhenOpenIDAndFormLoginBothConfiguredThenRedirectsToGeneratedLoginPage() throws Exception {
    this.spring.configLocations(this.xml("WithFormLogin")).autowire();
    this.mvc.perform(get("/")).andExpect(status().isFound()).andExpect(redirectedUrl("http://localhost/login"));
    assertThat(getFilter(DefaultLoginPageGeneratingFilter.class)).isNotNull();
  }
  @Test public void requestWhenOpenIDAndFormLoginWithFormLoginPageConfiguredThenFormLoginPageWins() throws Exception {
    this.spring.configLocations(this.xml("WithFormLoginPage")).autowire();
    this.mvc.perform(get("/")).andExpect(status().isFound()).andExpect(redirectedUrl("http://localhost/form-page"));
  }
  @Test public void requestWhenOpenIDAndFormLoginWithOpenIDLoginPageConfiguredThenOpenIDLoginPageWins() throws Exception {
    this.spring.configLocations(this.xml("WithOpenIDLoginPageAndFormLogin")).autowire();
    this.mvc.perform(get("/")).andExpect(status().isFound()).andExpect(redirectedUrl("http://localhost/openid-page"));
  }
  @Test public void configureWhenOpenIDAndFormLoginBothConfigureLoginPagesThenWiringException() throws Exception {
    assertThatCode(() -> this.spring.configLocations(this.xml("WithFormLoginAndOpenIDLoginPages")).autowire()).isInstanceOf(BeanDefinitionParsingException.class);
  }
  @Test public void requestWhenOpenIDAndRememberMeConfiguredThenRememberMePassedToIdp() throws Exception {
    this.spring.configLocations(this.xml("WithRememberMe")).autowire();
    OpenIDAuthenticationFilter openIDFilter=getFilter(OpenIDAuthenticationFilter.class);
    String openIdEndpointUrl="http://testopenid.com?openid.return_to=";
    Set<String> returnToUrlParameters=new HashSet<>();
    returnToUrlParameters.add(AbstractRememberMeServices.DEFAULT_PARAMETER);
    openIDFilter.setReturnToUrlParameters(returnToUrlParameters);
    OpenIDConsumer consumer=mock(OpenIDConsumer.class);
    when(consumer.beginConsumption(any(HttpServletRequest.class),anyString(),anyString(),anyString())).then(invocation -> openIdEndpointUrl + invocation.getArgument(2));
    openIDFilter.setConsumer(consumer);
    String expectedReturnTo=new StringBuilder("http://localhost/login/openid").append("?").append(AbstractRememberMeServices.DEFAULT_PARAMETER).append("=").append("on").toString();
    this.mvc.perform(get("/")).andExpect(status().isFound()).andExpect(redirectedUrl("http://localhost/login"));
    this.mvc.perform(get("/login")).andExpect(status().isOk()).andExpect(content().string(containsString(AbstractRememberMeServices.DEFAULT_PARAMETER)));
    this.mvc.perform(get("/login/openid").param(OpenIDAuthenticationFilter.DEFAULT_CLAIMED_IDENTITY_FIELD,"http://hey.openid.com/").param(AbstractRememberMeServices.DEFAULT_PARAMETER,"on")).andExpect(status().isFound()).andExpect(redirectedUrl(openIdEndpointUrl + expectedReturnTo));
  }
  @Test public void requestWhenAttributeExchangeConfiguredThenFetchAttributesPassedToIdp() throws Exception {
    this.spring.configLocations(this.xml("WithOpenIDAttributes")).autowire();
    OpenIDAuthenticationFilter openIDFilter=getFilter(OpenIDAuthenticationFilter.class);
    OpenID4JavaConsumer consumer=getFieldValue(openIDFilter,"consumer");
    ConsumerManager manager=getFieldValue(consumer,"consumerManager");
    manager.setMaxAssocAttempts(0);
    try (MockWebServer server=new MockWebServer()){
      String endpoint=server.url("/").toString();
      server.enqueue(new MockResponse().addHeader(YADIS_XRDS_LOCATION,endpoint));
      server.enqueue(new MockResponse().setBody(String.format("<XRDS><XRD><Service><URI>%s</URI></Service></XRD></XRDS>",endpoint)));
      this.mvc.perform(get("/login/openid").param(OpenIDAuthenticationFilter.DEFAULT_CLAIMED_IDENTITY_FIELD,endpoint)).andExpect(status().isFound()).andExpect(result -> result.getResponse().getRedirectedUrl().endsWith("openid.ext1.type.nickname=http%3A%2F%2Fschema.openid.net%2FnamePerson%2Ffriendly&" + "openid.ext1.if_available=nickname&" + "openid.ext1.type.email=http%3A%2F%2Fschema.openid.net%2Fcontact%2Femail&"+ "openid.ext1.required=email&"+ "openid.ext1.count.email=2"));
    }
   }
  /** 
 * SEC-2919
 */
  @Test public void requestWhenLoginPageConfiguredWithPhraseLoginThenRedirectsOnlyToUserGeneratedLoginPage() throws Exception {
    this.spring.configLocations(this.xml("Sec2919")).autowire();
    assertThat(getFilter(DefaultLoginPageGeneratingFilter.class)).isNull();
    this.mvc.perform(get("/login")).andExpect(status().isOk()).andExpect(content().string("a custom login page"));
  }
@RestController static class CustomLoginController {
    @GetMapping("/login") public String custom(){
      return "a custom login page";
    }
  }
  private <T extends Filter>T getFilter(  Class<T> clazz){
    FilterChainProxy filterChain=this.spring.getContext().getBean(FilterChainProxy.class);
    return (T)filterChain.getFilters("/").stream().filter(clazz::isInstance).findFirst().orElse(null);
  }
  private String xml(  String configName){
    return CONFIG_LOCATION_PREFIX + "-" + configName+ ".xml";
  }
  private static <T>T getFieldValue(  Object bean,  String fieldName) throws IllegalAccessException {
    return (T)FieldUtils.getFieldValue(bean,fieldName);
  }
}
