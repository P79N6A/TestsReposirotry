/** 
 * <code> <http security="none" pattern="/resources/**"/> <http> <intercept-url pattern="/logout" access="permitAll"/> <intercept-url pattern="/login" access="permitAll"/> <intercept-url pattern="/signup" access="permitAll"/> <intercept-url pattern="/about" access="permitAll"/> <intercept-url pattern="/**" access="hasRole('ROLE_USER')"/> <logout logout-success-url="/login?logout" logout-url="/logout" <form-login authentication-failure-url="/login?error" login-page="/login" login-processing-url="/login" <!-- but only POST --> password-parameter="password" username-parameter="username" /> </http> <authentication-manager> <authentication-provider> <user-service> <user username="user" password="password" authorities="ROLE_USER"/> <user username="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN"/> </user-service> </authentication-provider> </authentication-manager> </code>
 * @author Rob Winch
 */
@EnableWebSecurity public static class SampleWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {
  @Override public void configure(  WebSecurity web) throws Exception {
    web.ignoring().antMatchers("/resources/**");
  }
  @Override protected void configure(  HttpSecurity http) throws Exception {
    http.authorizeRequests().antMatchers("/signup","/about").permitAll().anyRequest().hasRole("USER").and().formLogin().loginPage("/login").permitAll();
  }
  @Override protected void configure(  AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user()).withUser(PasswordEncodedUser.admin());
  }
}
