/** 
 * @author Jitendra Singh
 * @since 4.2
 */
public class DefaultCsrfTokenMixinTests extends AbstractMixinTests {
  public static final String CSRF_JSON="{" + "\"@class\": \"org.springframework.security.web.csrf.DefaultCsrfToken\", " + "\"headerName\": \"csrf-header\", "+ "\"parameterName\": \"_csrf\", "+ "\"token\": \"1\""+ "}";
  @Test public void defaultCsrfTokenSerializedTest() throws JsonProcessingException, JSONException {
    DefaultCsrfToken token=new DefaultCsrfToken("csrf-header","_csrf","1");
    String serializedJson=mapper.writeValueAsString(token);
    JSONAssert.assertEquals(CSRF_JSON,serializedJson,true);
  }
  @Test public void defaultCsrfTokenDeserializeTest() throws IOException {
    DefaultCsrfToken token=mapper.readValue(CSRF_JSON,DefaultCsrfToken.class);
    assertThat(token).isNotNull();
    assertThat(token.getHeaderName()).isEqualTo("csrf-header");
    assertThat(token.getParameterName()).isEqualTo("_csrf");
    assertThat(token.getToken()).isEqualTo("1");
  }
  @Test(expected=JsonMappingException.class) public void defaultCsrfTokenDeserializeWithoutClassTest() throws IOException {
    String tokenJson="{\"headerName\": \"csrf-header\", \"parameterName\": \"_csrf\", \"token\": \"1\"}";
    mapper.readValue(tokenJson,DefaultCsrfToken.class);
  }
  @Test(expected=JsonMappingException.class) public void defaultCsrfTokenDeserializeNullValuesTest() throws IOException {
    String tokenJson="{\"@class\": \"org.springframework.security.web.csrf.DefaultCsrfToken\", \"headerName\": \"\", \"parameterName\": null, \"token\": \"1\"}";
    mapper.readValue(tokenJson,DefaultCsrfToken.class);
  }
}
