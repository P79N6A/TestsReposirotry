@RunWith(MockitoJUnitRunner.class) public class AndMessageMatcherTest {
  @Mock private MessageMatcher<Object> delegate;
  @Mock private MessageMatcher<Object> delegate2;
  @Mock private Message<Object> message;
  private MessageMatcher<Object> matcher;
  @Test(expected=NullPointerException.class) public void constructorNullArray(){
    new AndMessageMatcher<>((MessageMatcher<Object>[])null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorArrayContainsNull(){
    new AndMessageMatcher<>((MessageMatcher<Object>)null);
  }
  @SuppressWarnings("unchecked") @Test(expected=IllegalArgumentException.class) public void constructorEmptyArray(){
    new AndMessageMatcher<>((MessageMatcher<Object>[])new MessageMatcher[0]);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullList(){
    new AndMessageMatcher<>((List<MessageMatcher<Object>>)null);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorListContainsNull(){
    new AndMessageMatcher<>(Arrays.asList((MessageMatcher<Object>)null));
  }
  @Test(expected=IllegalArgumentException.class) public void constructorEmptyList(){
    new AndMessageMatcher<>(Collections.emptyList());
  }
  @Test public void matchesSingleTrue(){
    when(delegate.matches(message)).thenReturn(true);
    matcher=new AndMessageMatcher<>(delegate);
    assertThat(matcher.matches(message)).isTrue();
  }
  @Test public void matchesMultiTrue(){
    when(delegate.matches(message)).thenReturn(true);
    when(delegate2.matches(message)).thenReturn(true);
    matcher=new AndMessageMatcher<>(delegate,delegate2);
    assertThat(matcher.matches(message)).isTrue();
  }
  @Test public void matchesSingleFalse(){
    when(delegate.matches(message)).thenReturn(false);
    matcher=new AndMessageMatcher<>(delegate);
    assertThat(matcher.matches(message)).isFalse();
  }
  @Test public void matchesMultiBothFalse(){
    when(delegate.matches(message)).thenReturn(false);
    matcher=new AndMessageMatcher<>(delegate,delegate2);
    assertThat(matcher.matches(message)).isFalse();
  }
  @Test public void matchesMultiSingleFalse(){
    when(delegate.matches(message)).thenReturn(true);
    when(delegate2.matches(message)).thenReturn(false);
    matcher=new AndMessageMatcher<>(delegate,delegate2);
    assertThat(matcher.matches(message)).isFalse();
  }
}
