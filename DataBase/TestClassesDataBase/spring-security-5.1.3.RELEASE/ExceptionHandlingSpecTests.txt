/** 
 * @author Denys Ivano
 * @since 5.0.5
 */
public class ExceptionHandlingSpecTests {
  private ServerHttpSecurity http=ServerHttpSecurityConfigurationBuilder.httpWithDefaultAuthentication();
  @Test public void defaultAuthenticationEntryPoint(){
    SecurityWebFilterChain securityWebFilter=this.http.csrf().disable().authorizeExchange().anyExchange().authenticated().and().exceptionHandling().and().build();
    WebTestClient client=WebTestClientBuilder.bindToWebFilters(securityWebFilter).build();
    client.get().uri("/test").exchange().expectStatus().isUnauthorized().expectHeader().valueMatches("WWW-Authenticate","Basic.*");
  }
  @Test public void customAuthenticationEntryPoint(){
    SecurityWebFilterChain securityWebFilter=this.http.csrf().disable().authorizeExchange().anyExchange().authenticated().and().exceptionHandling().authenticationEntryPoint(redirectServerAuthenticationEntryPoint("/auth")).and().build();
    WebTestClient client=WebTestClientBuilder.bindToWebFilters(securityWebFilter).build();
    client.get().uri("/test").exchange().expectStatus().isFound().expectHeader().valueMatches("Location",".*");
  }
  @Test public void defaultAccessDeniedHandler(){
    SecurityWebFilterChain securityWebFilter=this.http.csrf().disable().httpBasic().and().authorizeExchange().anyExchange().hasRole("ADMIN").and().exceptionHandling().and().build();
    WebTestClient client=WebTestClientBuilder.bindToWebFilters(securityWebFilter).build();
    client.get().uri("/admin").headers(headers -> headers.setBasicAuth("user","password")).exchange().expectStatus().isForbidden();
  }
  @Test public void customAccessDeniedHandler(){
    SecurityWebFilterChain securityWebFilter=this.http.csrf().disable().httpBasic().and().authorizeExchange().anyExchange().hasRole("ADMIN").and().exceptionHandling().accessDeniedHandler(httpStatusServerAccessDeniedHandler(HttpStatus.BAD_REQUEST)).and().build();
    WebTestClient client=WebTestClientBuilder.bindToWebFilters(securityWebFilter).build();
    client.get().uri("/admin").headers(headers -> headers.setBasicAuth("user","password")).exchange().expectStatus().isBadRequest();
  }
  private ServerAuthenticationEntryPoint redirectServerAuthenticationEntryPoint(  String location){
    return new RedirectServerAuthenticationEntryPoint(location);
  }
  private ServerAccessDeniedHandler httpStatusServerAccessDeniedHandler(  HttpStatus httpStatus){
    return new HttpStatusServerAccessDeniedHandler(httpStatus);
  }
}
