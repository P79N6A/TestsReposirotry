/** 
 * @author Josh Cummings
 */
public class RequestMatcherDelegatingAccessDeniedHandlerTests {
  private RequestMatcherDelegatingAccessDeniedHandler delegator;
  private LinkedHashMap<RequestMatcher,AccessDeniedHandler> deniedHandlers;
  private AccessDeniedHandler accessDeniedHandler;
  private HttpServletRequest request;
  @Before public void setup(){
    this.accessDeniedHandler=mock(AccessDeniedHandler.class);
    this.deniedHandlers=new LinkedHashMap<>();
    this.request=new MockHttpServletRequest();
  }
  @Test public void handleWhenNothingMatchesThenOnlyDefaultHandlerInvoked() throws Exception {
    AccessDeniedHandler handler=mock(AccessDeniedHandler.class);
    RequestMatcher matcher=mock(RequestMatcher.class);
    when(matcher.matches(this.request)).thenReturn(false);
    this.deniedHandlers.put(matcher,handler);
    this.delegator=new RequestMatcherDelegatingAccessDeniedHandler(this.deniedHandlers,this.accessDeniedHandler);
    this.delegator.handle(this.request,null,null);
    verify(this.accessDeniedHandler).handle(this.request,null,null);
    verify(handler,never()).handle(this.request,null,null);
  }
  @Test public void handleWhenFirstMatchesThenOnlyFirstInvoked() throws Exception {
    AccessDeniedHandler firstHandler=mock(AccessDeniedHandler.class);
    RequestMatcher firstMatcher=mock(RequestMatcher.class);
    AccessDeniedHandler secondHandler=mock(AccessDeniedHandler.class);
    RequestMatcher secondMatcher=mock(RequestMatcher.class);
    when(firstMatcher.matches(this.request)).thenReturn(true);
    this.deniedHandlers.put(firstMatcher,firstHandler);
    this.deniedHandlers.put(secondMatcher,secondHandler);
    this.delegator=new RequestMatcherDelegatingAccessDeniedHandler(this.deniedHandlers,this.accessDeniedHandler);
    this.delegator.handle(this.request,null,null);
    verify(firstHandler).handle(this.request,null,null);
    verify(secondHandler,never()).handle(this.request,null,null);
    verify(this.accessDeniedHandler,never()).handle(this.request,null,null);
    verify(secondMatcher,never()).matches(this.request);
  }
  @Test public void handleWhenSecondMatchesThenOnlySecondInvoked() throws Exception {
    AccessDeniedHandler firstHandler=mock(AccessDeniedHandler.class);
    RequestMatcher firstMatcher=mock(RequestMatcher.class);
    AccessDeniedHandler secondHandler=mock(AccessDeniedHandler.class);
    RequestMatcher secondMatcher=mock(RequestMatcher.class);
    when(firstMatcher.matches(this.request)).thenReturn(false);
    when(secondMatcher.matches(this.request)).thenReturn(true);
    this.deniedHandlers.put(firstMatcher,firstHandler);
    this.deniedHandlers.put(secondMatcher,secondHandler);
    this.delegator=new RequestMatcherDelegatingAccessDeniedHandler(this.deniedHandlers,this.accessDeniedHandler);
    this.delegator.handle(this.request,null,null);
    verify(secondHandler).handle(this.request,null,null);
    verify(firstHandler,never()).handle(this.request,null,null);
    verify(this.accessDeniedHandler,never()).handle(this.request,null,null);
  }
}
