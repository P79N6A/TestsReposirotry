/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class HttpBasicServerAuthenticationEntryPointTests {
  @Mock private ServerWebExchange exchange;
  private HttpBasicServerAuthenticationEntryPoint entryPoint=new HttpBasicServerAuthenticationEntryPoint();
  private AuthenticationException exception=new AuthenticationCredentialsNotFoundException("Authenticate");
  @Test public void commenceWhenNoSubscribersThenNoActions(){
    this.entryPoint.commence(this.exchange,this.exception);
    verifyZeroInteractions(this.exchange);
  }
  @Test public void commenceWhenSubscribeThenStatusAndHeaderSet(){
    this.exchange=exchange(MockServerHttpRequest.get("/"));
    this.entryPoint.commence(this.exchange,this.exception).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    assertThat(this.exchange.getResponse().getHeaders().get("WWW-Authenticate")).containsOnly("Basic realm=\"Realm\"");
  }
  @Test public void commenceWhenCustomRealmThenStatusAndHeaderSet(){
    this.entryPoint.setRealm("Custom");
    this.exchange=exchange(MockServerHttpRequest.get("/"));
    this.entryPoint.commence(this.exchange,this.exception).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    assertThat(this.exchange.getResponse().getHeaders().get("WWW-Authenticate")).containsOnly("Basic realm=\"Custom\"");
  }
  @Test(expected=IllegalArgumentException.class) public void setRealmWhenNullThenException(){
    this.entryPoint.setRealm(null);
  }
  private static MockServerWebExchange exchange(  MockServerHttpRequest.BaseBuilder<?> request){
    return MockServerWebExchange.from(request.build());
  }
}
