public class SecurityMockMvcRequestBuildersFormLoginTests {
  private MockServletContext servletContext;
  @Before public void setup() throws Exception {
    this.servletContext=new MockServletContext();
  }
  @Test public void defaults() throws Exception {
    MockHttpServletRequest request=formLogin().buildRequest(this.servletContext);
    CsrfToken token=(CsrfToken)request.getAttribute(CsrfRequestPostProcessor.TestCsrfTokenRepository.TOKEN_ATTR_NAME);
    assertThat(request.getParameter("username")).isEqualTo("user");
    assertThat(request.getParameter("password")).isEqualTo("password");
    assertThat(request.getMethod()).isEqualTo("POST");
    assertThat(request.getParameter(token.getParameterName())).isEqualTo(token.getToken());
    assertThat(request.getRequestURI()).isEqualTo("/login");
    assertThat(request.getParameter("_csrf")).isNotNull();
  }
  @Test public void custom() throws Exception {
    MockHttpServletRequest request=formLogin("/login").user("username","admin").password("password","secret").buildRequest(this.servletContext);
    CsrfToken token=(CsrfToken)request.getAttribute(CsrfRequestPostProcessor.TestCsrfTokenRepository.TOKEN_ATTR_NAME);
    assertThat(request.getParameter("username")).isEqualTo("admin");
    assertThat(request.getParameter("password")).isEqualTo("secret");
    assertThat(request.getMethod()).isEqualTo("POST");
    assertThat(request.getParameter(token.getParameterName())).isEqualTo(token.getToken());
    assertThat(request.getRequestURI()).isEqualTo("/login");
  }
  @Test public void usesAcceptMediaForContentNegotiation() throws Exception {
    MockHttpServletRequest request=formLogin("/login").user("username","admin").password("password","secret").buildRequest(this.servletContext);
    assertThat(request.getHeader("Accept")).isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE);
  }
}
