public class BouncyCastleAesBytesEncryptorTest {
  private byte[] testData;
  private String password;
  private String salt;
  @Before public void setup(){
    SecureRandom secureRandom=new SecureRandom();
    password=UUID.randomUUID().toString();
    byte[] saltBytes=new byte[16];
    secureRandom.nextBytes(saltBytes);
    salt=new String(Hex.encode(saltBytes));
    testData=new byte[1024 * 1024];
    secureRandom.nextBytes(testData);
  }
  @Test public void bcCbcWithSecureIvGeneratesDifferentMessages() throws Exception {
    BytesEncryptor bcEncryptor=new BouncyCastleAesCbcBytesEncryptor(password,salt);
    generatesDifferentCipherTexts(bcEncryptor);
  }
  @Test public void bcGcmWithSecureIvGeneratesDifferentMessages() throws Exception {
    BytesEncryptor bcEncryptor=new BouncyCastleAesGcmBytesEncryptor(password,salt);
    generatesDifferentCipherTexts(bcEncryptor);
  }
  private void generatesDifferentCipherTexts(  BytesEncryptor bcEncryptor){
    byte[] encrypted1=bcEncryptor.encrypt(testData);
    byte[] encrypted2=bcEncryptor.encrypt(testData);
    Assert.assertFalse(Arrays.areEqual(encrypted1,encrypted2));
    byte[] decrypted1=bcEncryptor.decrypt(encrypted1);
    byte[] decrypted2=bcEncryptor.decrypt(encrypted2);
    Assert.assertArrayEquals(testData,decrypted1);
    Assert.assertArrayEquals(testData,decrypted2);
  }
  @Test(expected=IllegalArgumentException.class) public void bcCbcWithWrongLengthIv() throws Exception {
    new BouncyCastleAesCbcBytesEncryptor(password,salt,KeyGenerators.secureRandom(8));
  }
  @Test(expected=IllegalArgumentException.class) public void bcGcmWithWrongLengthIv() throws Exception {
    new BouncyCastleAesGcmBytesEncryptor(password,salt,KeyGenerators.secureRandom(8));
  }
}
