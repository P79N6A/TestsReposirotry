/** 
 * @author Eric Deandrea
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingServerLogoutHandlerTests {
  @Mock private ServerLogoutHandler delegate1;
  @Mock private ServerLogoutHandler delegate2;
  private PublisherProbe<Void> delegate1Result=PublisherProbe.empty();
  private PublisherProbe<Void> delegate2Result=PublisherProbe.empty();
  @Mock private WebFilterExchange exchange;
  @Mock private Authentication authentication;
  @Before public void setup(){
    when(this.delegate1.logout(any(WebFilterExchange.class),any(Authentication.class))).thenReturn(this.delegate1Result.mono());
    when(this.delegate2.logout(any(WebFilterExchange.class),any(Authentication.class))).thenReturn(this.delegate2Result.mono());
  }
  @Test public void constructorWhenNullVargsThenIllegalArgumentException(){
    assertThatThrownBy(() -> new DelegatingServerLogoutHandler((ServerLogoutHandler[])null)).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage("delegates cannot be null or empty").hasNoCause();
  }
  @Test public void constructorWhenNullListThenIllegalArgumentException(){
    assertThatThrownBy(() -> new DelegatingServerLogoutHandler((List<ServerLogoutHandler>)null)).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage("delegates cannot be null or empty").hasNoCause();
  }
  @Test public void constructorWhenEmptyThenIllegalArgumentException(){
    assertThatThrownBy(() -> new DelegatingServerLogoutHandler(new ServerLogoutHandler[0])).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage("delegates cannot be null or empty").hasNoCause();
  }
  @Test public void logoutWhenSingleThenExecuted(){
    DelegatingServerLogoutHandler handler=new DelegatingServerLogoutHandler(this.delegate1);
    handler.logout(this.exchange,this.authentication).block();
    this.delegate1Result.assertWasSubscribed();
  }
  @Test public void logoutWhenMultipleThenExecuted(){
    DelegatingServerLogoutHandler handler=new DelegatingServerLogoutHandler(this.delegate1,this.delegate2);
    handler.logout(this.exchange,this.authentication).block();
    this.delegate1Result.assertWasSubscribed();
    this.delegate2Result.assertWasSubscribed();
  }
}
