@ContextConfiguration(locations={"/http-extra-fsi-app-context.xml"}) @RunWith(SpringJUnit4ClassRunner.class) public class HttpNamespaceWithMultipleInterceptorsTests {
  @Autowired private FilterChainProxy fcp;
  @Test public void requestThatIsMatchedByDefaultInterceptorIsAllowed() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setMethod("GET");
    request.setServletPath("/somefile.html");
    request.setSession(createAuthenticatedSession("ROLE_0","ROLE_1","ROLE_2"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    fcp.doFilter(request,response,new MockFilterChain());
    assertThat(response.getStatus()).isEqualTo(200);
  }
  @Test public void securedUrlAccessIsRejectedWithoutRequiredRole() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setMethod("GET");
    request.setServletPath("/secure/somefile.html");
    request.setSession(createAuthenticatedSession("ROLE_0"));
    MockHttpServletResponse response=new MockHttpServletResponse();
    fcp.doFilter(request,response,new MockFilterChain());
    assertThat(response.getStatus()).isEqualTo(403);
  }
  public HttpSession createAuthenticatedSession(  String... roles){
    MockHttpSession session=new MockHttpSession();
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("bob","bobspassword",roles));
    session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,SecurityContextHolder.getContext());
    SecurityContextHolder.clearContext();
    return session;
  }
}
