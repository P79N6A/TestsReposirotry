/** 
 * Test cases for  {@link Hex}.
 * @author Kazuki Shimizu
 */
public class HexTests {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void encode(){
    assertThat(Hex.encode(new byte[]{(byte)'A',(byte)'B',(byte)'C',(byte)'D'})).isEqualTo(new char[]{'4','1','4','2','4','3','4','4'});
  }
  @Test public void encodeEmptyByteArray(){
    assertThat(Hex.encode(new byte[]{})).isEmpty();
  }
  @Test public void decode(){
    assertThat(Hex.decode("41424344")).isEqualTo(new byte[]{(byte)'A',(byte)'B',(byte)'C',(byte)'D'});
  }
  @Test public void decodeEmptyString(){
    assertThat(Hex.decode("")).isEmpty();
  }
  @Test public void decodeNotEven(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("Hex-encoded string must have an even number of characters");
    Hex.decode("414243444");
  }
  @Test public void decodeExistNonHexCharAtFirst(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("Detected a Non-hex character at 1 or 2 position");
    Hex.decode("G0");
  }
  @Test public void decodeExistNonHexCharAtSecond(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("Detected a Non-hex character at 3 or 4 position");
    Hex.decode("410G");
  }
  @Test public void decodeExistNonHexCharAtBoth(){
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("Detected a Non-hex character at 5 or 6 position");
    Hex.decode("4142GG");
  }
}
