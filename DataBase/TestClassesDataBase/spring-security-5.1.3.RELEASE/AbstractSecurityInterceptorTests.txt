/** 
 * Tests some  {@link AbstractSecurityInterceptor} methods. Most of the testing for thisclass is found in the  {@code MethodSecurityInterceptorTests} class.
 * @author Ben Alex
 */
public class AbstractSecurityInterceptorTests {
  @Test(expected=IllegalArgumentException.class) public void detectsIfInvocationPassedIncompatibleSecureObject() throws Exception {
    MockSecurityInterceptorWhichOnlySupportsStrings si=new MockSecurityInterceptorWhichOnlySupportsStrings();
    si.setRunAsManager(mock(RunAsManager.class));
    si.setAuthenticationManager(mock(AuthenticationManager.class));
    si.setAfterInvocationManager(mock(AfterInvocationManager.class));
    si.setAccessDecisionManager(mock(AccessDecisionManager.class));
    si.setSecurityMetadataSource(mock(SecurityMetadataSource.class));
    si.beforeInvocation(new SimpleMethodInvocation());
  }
  @Test(expected=IllegalArgumentException.class) public void detectsViolationOfGetSecureObjectClassMethod() throws Exception {
    MockSecurityInterceptorReturnsNull si=new MockSecurityInterceptorReturnsNull();
    si.setRunAsManager(mock(RunAsManager.class));
    si.setAuthenticationManager(mock(AuthenticationManager.class));
    si.setAfterInvocationManager(mock(AfterInvocationManager.class));
    si.setAccessDecisionManager(mock(AccessDecisionManager.class));
    si.setSecurityMetadataSource(mock(SecurityMetadataSource.class));
    si.afterPropertiesSet();
  }
private class MockSecurityInterceptorReturnsNull extends AbstractSecurityInterceptor {
    private SecurityMetadataSource securityMetadataSource;
    public Class<?> getSecureObjectClass(){
      return null;
    }
    public SecurityMetadataSource obtainSecurityMetadataSource(){
      return securityMetadataSource;
    }
    public void setSecurityMetadataSource(    SecurityMetadataSource securityMetadataSource){
      this.securityMetadataSource=securityMetadataSource;
    }
  }
private class MockSecurityInterceptorWhichOnlySupportsStrings extends AbstractSecurityInterceptor {
    private SecurityMetadataSource securityMetadataSource;
    public Class<?> getSecureObjectClass(){
      return String.class;
    }
    public SecurityMetadataSource obtainSecurityMetadataSource(){
      return securityMetadataSource;
    }
    public void setSecurityMetadataSource(    SecurityMetadataSource securityMetadataSource){
      this.securityMetadataSource=securityMetadataSource;
    }
  }
}
