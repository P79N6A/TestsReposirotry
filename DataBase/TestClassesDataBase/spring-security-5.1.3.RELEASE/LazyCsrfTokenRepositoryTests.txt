/** 
 * @author Rob Winch
 */
@RunWith(MockitoJUnitRunner.class) public class LazyCsrfTokenRepositoryTests {
  @Mock CsrfTokenRepository delegate;
  @Mock HttpServletRequest request;
  @Mock HttpServletResponse response;
  @InjectMocks LazyCsrfTokenRepository repository;
  DefaultCsrfToken token;
  @Before public void setup(){
    this.token=new DefaultCsrfToken("header","param","token");
    when(this.delegate.generateToken(this.request)).thenReturn(this.token);
    when(this.request.getAttribute(HttpServletResponse.class.getName())).thenReturn(this.response);
  }
  @Test(expected=IllegalArgumentException.class) public void constructNullDelegateThrowsIllegalArgumentException(){
    new LazyCsrfTokenRepository(null);
  }
  @Test(expected=IllegalArgumentException.class) public void generateTokenNullResponseAttribute(){
    this.repository.generateToken(mock(HttpServletRequest.class));
  }
  @Test public void generateTokenGetTokenSavesToken(){
    CsrfToken newToken=this.repository.generateToken(this.request);
    newToken.getToken();
    verify(this.delegate).saveToken(this.token,this.request,this.response);
  }
  @Test public void saveNonNullDoesNothing(){
    this.repository.saveToken(this.token,this.request,this.response);
    verifyZeroInteractions(this.delegate);
  }
  @Test public void saveNullDelegates(){
    this.repository.saveToken(null,this.request,this.response);
    verify(this.delegate).saveToken(null,this.request,this.response);
  }
  @Test public void loadTokenDelegates(){
    when(this.delegate.loadToken(this.request)).thenReturn(this.token);
    CsrfToken loadToken=this.repository.loadToken(this.request);
    assertThat(loadToken).isSameAs(this.token);
    verify(this.delegate).loadToken(this.request);
  }
}
