/** 
 * @author Rob Winch
 * @since 5.1
 */
public class OidcUserRequestUtilsTests {
  private ClientRegistration.Builder registration=TestClientRegistrations.clientRegistration();
  OidcIdToken idToken=new OidcIdToken("token123",Instant.now(),Instant.now().plusSeconds(3600),Collections.singletonMap(IdTokenClaimNames.SUB,"sub123"));
  OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,"token",Instant.now(),Instant.now().plus(Duration.ofDays(1)),Collections.singleton("read:user"));
  @Test public void shouldRetrieveUserInfoWhenEndpointDefinedAndScopesOverlapThenTrue(){
    assertThat(OidcUserRequestUtils.shouldRetrieveUserInfo(userRequest())).isTrue();
  }
  @Test public void shouldRetrieveUserInfoWhenNoUserInfoUriThenFalse(){
    this.registration.userInfoUri(null);
    assertThat(OidcUserRequestUtils.shouldRetrieveUserInfo(userRequest())).isFalse();
  }
  @Test public void shouldRetrieveUserInfoWhenDifferentScopesThenFalse(){
    this.registration.scope("notintoken");
    assertThat(OidcUserRequestUtils.shouldRetrieveUserInfo(userRequest())).isFalse();
  }
  @Test public void shouldRetrieveUserInfoWhenNotAuthorizationCodeThenFalse(){
    this.registration.authorizationGrantType(AuthorizationGrantType.IMPLICIT);
    assertThat(OidcUserRequestUtils.shouldRetrieveUserInfo(userRequest())).isFalse();
  }
  private OidcUserRequest userRequest(){
    return new OidcUserRequest(this.registration.build(),this.accessToken,this.idToken);
  }
}
