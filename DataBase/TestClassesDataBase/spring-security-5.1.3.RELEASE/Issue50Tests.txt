/** 
 * @author Rob Winch
 */
@Transactional @RunWith(SpringRunner.class) @ContextConfiguration(classes={ApplicationConfig.class,SecurityConfig.class}) public class Issue50Tests {
  @Autowired private AuthenticationManager authenticationManager;
  @Autowired private UserRepository userRepo;
  @Before public void setup(){
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("test",null,"ROLE_ADMIN"));
  }
  @After public void cleanup(){
    SecurityContextHolder.clearContext();
  }
  @Test public void loadWhenGlobalMethodSecurityConfigurationThenAuthenticationManagerLazy(){
  }
  @Test(expected=UsernameNotFoundException.class) public void authenticateWhenMissingUserThenUsernameNotFoundException(){
    this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken("test","password"));
  }
  @Test(expected=BadCredentialsException.class) public void authenticateWhenInvalidPasswordThenBadCredentialsException(){
    this.userRepo.save(User.withUsernameAndPassword("test","password"));
    this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken("test","invalid"));
  }
  @Test public void authenticateWhenValidUserThenAuthenticates(){
    this.userRepo.save(User.withUsernameAndPassword("test","password"));
    Authentication result=this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken("test","password"));
    assertThat(result.getName()).isEqualTo("test");
  }
  @Test(expected=AccessDeniedException.class) public void globalMethodSecurityIsEnabledWhenNotAllowedThenAccessDenied(){
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("test",null,"ROLE_USER"));
    this.userRepo.save(User.withUsernameAndPassword("denied","password"));
    Authentication result=this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken("test","password"));
  }
}
