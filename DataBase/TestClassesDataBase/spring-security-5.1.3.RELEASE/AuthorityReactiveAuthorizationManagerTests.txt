/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class AuthorityReactiveAuthorizationManagerTests {
  @Mock Authentication authentication;
  AuthorityReactiveAuthorizationManager<Object> manager=AuthorityReactiveAuthorizationManager.hasAuthority("ADMIN");
  @Test public void checkWhenHasAuthorityAndNotAuthenticatedThenReturnFalse(){
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenHasAuthorityAndEmptyThenReturnFalse(){
    boolean granted=manager.check(Mono.empty(),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenHasAuthorityAndErrorThenError(){
    Mono<AuthorizationDecision> result=manager.check(Mono.error(new RuntimeException("ooops")),null);
    StepVerifier.create(result).expectError().verify();
  }
  @Test public void checkWhenHasAuthorityAndAuthenticatedAndNoAuthoritiesThenReturnFalse(){
    when(authentication.isAuthenticated()).thenReturn(true);
    when(authentication.getAuthorities()).thenReturn(Collections.emptyList());
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenHasAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse(){
    authentication=new TestingAuthenticationToken("rob","secret","ROLE_ADMIN");
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenHasAuthorityAndAuthorizedThenReturnTrue(){
    authentication=new TestingAuthenticationToken("rob","secret","ADMIN");
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isTrue();
  }
  @Test public void checkWhenHasRoleAndAuthorizedThenReturnTrue(){
    manager=AuthorityReactiveAuthorizationManager.hasRole("ADMIN");
    authentication=new TestingAuthenticationToken("rob","secret","ROLE_ADMIN");
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isTrue();
  }
  @Test public void checkWhenHasRoleAndNotAuthorizedThenReturnTrue(){
    manager=AuthorityReactiveAuthorizationManager.hasRole("ADMIN");
    authentication=new TestingAuthenticationToken("rob","secret","ADMIN");
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test(expected=IllegalArgumentException.class) public void hasRoleWhenNullThenException(){
    String role=null;
    AuthorityReactiveAuthorizationManager.hasRole(role);
  }
  @Test(expected=IllegalArgumentException.class) public void hasAuthorityWhenNullThenException(){
    String authority=null;
    AuthorityReactiveAuthorizationManager.hasAuthority(authority);
  }
}
