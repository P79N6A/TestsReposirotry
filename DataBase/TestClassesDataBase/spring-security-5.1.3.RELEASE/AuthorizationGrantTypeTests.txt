/** 
 * Tests for  {@link AuthorizationGrantType}.
 * @author Joe Grandja
 */
public class AuthorizationGrantTypeTests {
  @Test(expected=IllegalArgumentException.class) public void constructorWhenValueIsNullThenThrowIllegalArgumentException(){
    new AuthorizationGrantType(null);
  }
  @Test public void getValueWhenAuthorizationCodeGrantTypeThenReturnAuthorizationCode(){
    assertThat(AuthorizationGrantType.AUTHORIZATION_CODE.getValue()).isEqualTo("authorization_code");
  }
  @Test public void getValueWhenImplicitGrantTypeThenReturnImplicit(){
    assertThat(AuthorizationGrantType.IMPLICIT.getValue()).isEqualTo("implicit");
  }
  @Test public void getValueWhenRefreshTokenGrantTypeThenReturnRefreshToken(){
    assertThat(AuthorizationGrantType.REFRESH_TOKEN.getValue()).isEqualTo("refresh_token");
  }
}
