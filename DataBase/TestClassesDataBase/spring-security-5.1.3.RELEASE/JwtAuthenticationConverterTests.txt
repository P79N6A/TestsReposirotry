/** 
 * Tests for  {@link JwtAuthenticationConverter}
 * @author Josh Cummings
 */
public class JwtAuthenticationConverterTests {
  JwtAuthenticationConverter jwtAuthenticationConverter=new JwtAuthenticationConverter();
  @Test public void convertWhenTokenHasScopeAttributeThenTranslatedToAuthorities(){
    Jwt jwt=this.jwt(Collections.singletonMap("scope","message:read message:write"));
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly(new SimpleGrantedAuthority("SCOPE_message:read"),new SimpleGrantedAuthority("SCOPE_message:write"));
  }
  @Test public void convertWhenTokenHasEmptyScopeAttributeThenTranslatedToNoAuthorities(){
    Jwt jwt=this.jwt(Collections.singletonMap("scope",""));
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly();
  }
  @Test public void convertWhenTokenHasScpAttributeThenTranslatedToAuthorities(){
    Jwt jwt=this.jwt(Collections.singletonMap("scp",Arrays.asList("message:read","message:write")));
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly(new SimpleGrantedAuthority("SCOPE_message:read"),new SimpleGrantedAuthority("SCOPE_message:write"));
  }
  @Test public void convertWhenTokenHasEmptyScpAttributeThenTranslatedToNoAuthorities(){
    Jwt jwt=this.jwt(Maps.newHashMap("scp",Arrays.asList()));
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly();
  }
  @Test public void convertWhenTokenHasBothScopeAndScpThenScopeAttributeIsTranslatedToAuthorities(){
    Map<String,Object> claims=new HashMap<>();
    claims.put("scp",Arrays.asList("message:read","message:write"));
    claims.put("scope","missive:read missive:write");
    Jwt jwt=this.jwt(claims);
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly(new SimpleGrantedAuthority("SCOPE_missive:read"),new SimpleGrantedAuthority("SCOPE_missive:write"));
  }
  @Test public void convertWhenTokenHasEmptyScopeAndNonEmptyScpThenScopeAttributeIsTranslatedToNoAuthorities(){
    Map<String,Object> claims=new HashMap<>();
    claims.put("scp",Arrays.asList("message:read","message:write"));
    claims.put("scope","");
    Jwt jwt=this.jwt(claims);
    AbstractAuthenticationToken authentication=this.jwtAuthenticationConverter.convert(jwt);
    Collection<GrantedAuthority> authorities=authentication.getAuthorities();
    assertThat(authorities).containsExactly();
  }
  private Jwt jwt(  Map<String,Object> claims){
    Map<String,Object> headers=new HashMap<>();
    headers.put("alg",JwsAlgorithms.RS256);
    return new Jwt("token",Instant.now(),Instant.now().plusSeconds(3600),headers,claims);
  }
}
