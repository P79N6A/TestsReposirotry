/** 
 * @author Rob Winch
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingEvaluationContextTests {
  @Mock DelegatingEvaluationContext delegate;
  @InjectMocks DelegatingEvaluationContext context;
  @Test public void getRootObject(){
    TypedValue expected=mock(TypedValue.class);
    when(this.delegate.getRootObject()).thenReturn(expected);
    assertThat(this.context.getRootObject()).isEqualTo(expected);
  }
  @Test public void getConstructorResolvers(){
    List<ConstructorResolver> expected=new ArrayList<>();
    when(this.delegate.getConstructorResolvers()).thenReturn(expected);
    assertThat(this.context.getConstructorResolvers()).isEqualTo(expected);
  }
  @Test public void getMethodResolvers(){
    List<MethodResolver> expected=new ArrayList<>();
    when(this.delegate.getMethodResolvers()).thenReturn(expected);
    assertThat(this.context.getMethodResolvers()).isEqualTo(expected);
  }
  @Test public void getPropertyAccessors(){
    List<PropertyAccessor> expected=new ArrayList<>();
    when(this.delegate.getPropertyAccessors()).thenReturn(expected);
    assertThat(this.context.getPropertyAccessors()).isEqualTo(expected);
  }
  @Test public void getTypeLocator(){
    TypeLocator expected=mock(TypeLocator.class);
    when(this.delegate.getTypeLocator()).thenReturn(expected);
    assertThat(this.context.getTypeLocator()).isEqualTo(expected);
  }
  @Test public void getTypeConverter(){
    TypeConverter expected=mock(TypeConverter.class);
    when(this.delegate.getTypeConverter()).thenReturn(expected);
    assertThat(this.context.getTypeConverter()).isEqualTo(expected);
  }
  @Test public void getTypeComparator(){
    TypeComparator expected=mock(TypeComparator.class);
    when(this.delegate.getTypeComparator()).thenReturn(expected);
    assertThat(this.context.getTypeComparator()).isEqualTo(expected);
  }
  @Test public void getOperatorOverloader(){
    OperatorOverloader expected=mock(OperatorOverloader.class);
    when(this.delegate.getOperatorOverloader()).thenReturn(expected);
    assertThat(this.context.getOperatorOverloader()).isEqualTo(expected);
  }
  @Test public void getBeanResolver(){
    BeanResolver expected=mock(BeanResolver.class);
    when(this.delegate.getBeanResolver()).thenReturn(expected);
    assertThat(this.context.getBeanResolver()).isEqualTo(expected);
  }
  @Test public void setVariable(){
    String name="name";
    String value="value";
    this.context.setVariable(name,value);
    verify(this.delegate).setVariable(name,value);
  }
  @Test public void lookupVariable(){
    String name="name";
    String expected="expected";
    when(this.delegate.lookupVariable(name)).thenReturn(expected);
    assertThat(this.context.lookupVariable(name)).isEqualTo(expected);
  }
}
