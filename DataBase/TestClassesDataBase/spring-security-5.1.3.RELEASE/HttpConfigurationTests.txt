/** 
 * Tests for  {@link HttpSecurity}.
 * @author Rob Winch
 * @author Joe Grandja
 */
public class HttpConfigurationTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void configureWhenAddFilterUnregisteredThenThrowsBeanCreationException() throws Exception {
    Throwable thrown=catchThrowable(() -> this.spring.register(UnregisteredFilterConfig.class).autowire());
    assertThat(thrown).isInstanceOf(BeanCreationException.class);
    assertThat(thrown.getMessage()).contains("The Filter class " + UnregisteredFilter.class.getName() + " does not have a registered order and cannot be added without a specified order."+ " Consider using addFilterBefore or addFilterAfter instead.");
  }
@EnableWebSecurity static class UnregisteredFilterConfig extends WebSecurityConfigurerAdapter {
    protected void configure(    HttpSecurity http) throws Exception {
      http.addFilter(new UnregisteredFilter());
    }
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
  }
static class UnregisteredFilter extends OncePerRequestFilter {
    @Override protected void doFilterInternal(    HttpServletRequest request,    HttpServletResponse response,    FilterChain filterChain) throws ServletException, IOException {
      filterChain.doFilter(request,response);
    }
  }
  @Test public void configureWhenAddFilterCasAuthenticationFilterThenFilterAdded() throws Exception {
    CasAuthenticationFilterConfig.CAS_AUTHENTICATION_FILTER=spy(new CasAuthenticationFilter());
    this.spring.register(CasAuthenticationFilterConfig.class).autowire();
    this.mockMvc.perform(get("/"));
    verify(CasAuthenticationFilterConfig.CAS_AUTHENTICATION_FILTER).doFilter(any(ServletRequest.class),any(ServletResponse.class),any(FilterChain.class));
  }
@EnableWebSecurity static class CasAuthenticationFilterConfig extends WebSecurityConfigurerAdapter {
    static CasAuthenticationFilter CAS_AUTHENTICATION_FILTER;
    protected void configure(    HttpSecurity http) throws Exception {
      http.addFilter(CAS_AUTHENTICATION_FILTER);
    }
  }
  @Test public void configureWhenConfigIsRequestMatchersJavadocThenAuthorizationApplied() throws Exception {
    this.spring.register(RequestMatcherRegistryConfigs.class).autowire();
    this.mockMvc.perform(get("/oauth/a")).andExpect(status().isUnauthorized());
    this.mockMvc.perform(get("/oauth/b")).andExpect(status().isUnauthorized());
    this.mockMvc.perform(get("/api/a")).andExpect(status().isUnauthorized());
    this.mockMvc.perform(get("/api/b")).andExpect(status().isUnauthorized());
  }
@EnableWebSecurity static class RequestMatcherRegistryConfigs extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.requestMatchers().antMatchers("/api/**").antMatchers("/oauth/**").and().authorizeRequests().antMatchers("/**").hasRole("USER").and().httpBasic();
    }
  }
}
