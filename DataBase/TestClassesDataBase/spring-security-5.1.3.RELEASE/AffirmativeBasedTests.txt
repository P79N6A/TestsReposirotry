/** 
 * Tests  {@link AffirmativeBased}.
 * @author Ben Alex
 */
public class AffirmativeBasedTests {
  private final List<ConfigAttribute> attrs=new ArrayList<>();
  private final Authentication user=new TestingAuthenticationToken("somebody","password","ROLE_1","ROLE_2");
  private AffirmativeBased mgr;
  private AccessDecisionVoter grant;
  private AccessDecisionVoter abstain;
  private AccessDecisionVoter deny;
  @Before @SuppressWarnings("unchecked") public void setup(){
    grant=mock(AccessDecisionVoter.class);
    abstain=mock(AccessDecisionVoter.class);
    deny=mock(AccessDecisionVoter.class);
    when(grant.vote(any(Authentication.class),any(Object.class),any(List.class))).thenReturn(AccessDecisionVoter.ACCESS_GRANTED);
    when(abstain.vote(any(Authentication.class),any(Object.class),any(List.class))).thenReturn(AccessDecisionVoter.ACCESS_ABSTAIN);
    when(deny.vote(any(Authentication.class),any(Object.class),any(List.class))).thenReturn(AccessDecisionVoter.ACCESS_DENIED);
  }
  @Test public void oneAffirmativeVoteOneDenyVoteOneAbstainVoteGrantsAccess() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(grant,deny,abstain));
    mgr.afterPropertiesSet();
    mgr.decide(user,new Object(),attrs);
  }
  @Test public void oneDenyVoteOneAbstainVoteOneAffirmativeVoteGrantsAccess() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(deny,abstain,grant));
    mgr.decide(user,new Object(),attrs);
  }
  @Test public void oneAffirmativeVoteTwoAbstainVotesGrantsAccess() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(grant,abstain,abstain));
    mgr.decide(user,new Object(),attrs);
  }
  @Test(expected=AccessDeniedException.class) public void oneDenyVoteTwoAbstainVotesDeniesAccess() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(deny,abstain,abstain));
    mgr.decide(user,new Object(),attrs);
  }
  @Test(expected=AccessDeniedException.class) public void onlyAbstainVotesDeniesAccessWithDefault() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(abstain,abstain,abstain));
    assertThat(!mgr.isAllowIfAllAbstainDecisions()).isTrue();
    mgr.decide(user,new Object(),attrs);
  }
  @Test public void testThreeAbstainVotesGrantsAccessIfAllowIfAllAbstainDecisionsIsSet() throws Exception {
    mgr=new AffirmativeBased(Arrays.<AccessDecisionVoter<? extends Object>>asList(abstain,abstain,abstain));
    mgr.setAllowIfAllAbstainDecisions(true);
    assertThat(mgr.isAllowIfAllAbstainDecisions()).isTrue();
    mgr.decide(user,new Object(),attrs);
  }
}
