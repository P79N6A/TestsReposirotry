/** 
 * Tests  {@link EhCacheBasedTicketCache}.
 * @author Ben Alex
 */
public class EhCacheBasedTicketCacheTests extends AbstractStatelessTicketCacheTests {
  private static CacheManager cacheManager;
  @BeforeClass public static void initCacheManaer(){
    cacheManager=CacheManager.create();
    cacheManager.addCache(new Cache("castickets",500,false,false,30,30));
  }
  @AfterClass public static void shutdownCacheManager(){
    cacheManager.removalAll();
    cacheManager.shutdown();
  }
  @Test public void testCacheOperation() throws Exception {
    EhCacheBasedTicketCache cache=new EhCacheBasedTicketCache();
    cache.setCache(cacheManager.getCache("castickets"));
    cache.afterPropertiesSet();
    final CasAuthenticationToken token=getToken();
    cache.putTicketInCache(token);
    assertThat(cache.getByTicketId("ST-0-ER94xMJmn6pha35CQRoZ")).isEqualTo(token);
    cache.removeTicketFromCache(getToken());
    assertThat(cache.getByTicketId("ST-0-ER94xMJmn6pha35CQRoZ")).isNull();
    assertThat(cache.getByTicketId(null)).isNull();
    assertThat(cache.getByTicketId("UNKNOWN_SERVICE_TICKET")).isNull();
  }
  @Test public void testStartupDetectsMissingCache() throws Exception {
    EhCacheBasedTicketCache cache=new EhCacheBasedTicketCache();
    try {
      cache.afterPropertiesSet();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    Ehcache myCache=cacheManager.getCache("castickets");
    cache.setCache(myCache);
    assertThat(cache.getCache()).isEqualTo(myCache);
  }
}
