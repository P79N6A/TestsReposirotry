/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class RedirectServerAuthenticationSuccessHandlerTests {
  @Mock private ServerWebExchange exchange;
  @Mock private WebFilterChain chain;
  @Mock private ServerRedirectStrategy redirectStrategy;
  @Mock private Authentication authentication;
  private URI location=URI.create("/");
  private RedirectServerAuthenticationSuccessHandler handler=new RedirectServerAuthenticationSuccessHandler();
  @Test(expected=IllegalArgumentException.class) public void constructorStringWhenNullLocationThenException(){
    new RedirectServerAuthenticationEntryPoint(null);
  }
  @Test public void successWhenNoSubscribersThenNoActions(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.handler.onAuthenticationSuccess(new WebFilterExchange(this.exchange,this.chain),this.authentication);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).isNull();
    assertThat(this.exchange.getSession().block().isStarted()).isFalse();
  }
  @Test public void successWhenSubscribeThenStatusAndLocationSet(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.handler.onAuthenticationSuccess(new WebFilterExchange(this.exchange,this.chain),this.authentication).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).isEqualTo(this.location);
  }
  @Test public void successWhenCustomLocationThenCustomLocationUsed(){
    PublisherProbe<Void> redirectResult=PublisherProbe.empty();
    when(this.redirectStrategy.sendRedirect(any(),any())).thenReturn(redirectResult.mono());
    this.handler.setRedirectStrategy(this.redirectStrategy);
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
    this.handler.onAuthenticationSuccess(new WebFilterExchange(this.exchange,this.chain),this.authentication).block();
    redirectResult.assertWasSubscribed();
    verify(this.redirectStrategy).sendRedirect(any(),eq(this.location));
  }
  @Test(expected=IllegalArgumentException.class) public void setRedirectStrategyWhenNullThenException(){
    this.handler.setRedirectStrategy(null);
  }
  @Test(expected=IllegalArgumentException.class) public void setLocationWhenNullThenException(){
    this.handler.setLocation(null);
  }
}
