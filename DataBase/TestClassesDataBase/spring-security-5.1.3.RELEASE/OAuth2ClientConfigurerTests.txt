/** 
 * Tests for  {@link OAuth2ClientConfigurer}.
 * @author Joe Grandja
 */
public class OAuth2ClientConfigurerTests {
  private static ClientRegistrationRepository clientRegistrationRepository;
  private static OAuth2AuthorizedClientService authorizedClientService;
  private static OAuth2AuthorizedClientRepository authorizedClientRepository;
  private static OAuth2AuthorizationRequestResolver authorizationRequestResolver;
  private static OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> accessTokenResponseClient;
  private static RequestCache requestCache;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  private ClientRegistration registration1;
  @Before public void setup(){
    this.registration1=TestClientRegistrations.clientRegistration().registrationId("registration-1").clientId("client-1").clientSecret("secret").clientAuthenticationMethod(ClientAuthenticationMethod.BASIC).authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).redirectUriTemplate("{baseUrl}/client-1").scope("user").authorizationUri("https://provider.com/oauth2/authorize").tokenUri("https://provider.com/oauth2/token").userInfoUri("https://provider.com/oauth2/user").userNameAttributeName("id").clientName("client-1").build();
    clientRegistrationRepository=new InMemoryClientRegistrationRepository(this.registration1);
    authorizedClientService=new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);
    authorizedClientRepository=new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);
    authorizationRequestResolver=new DefaultOAuth2AuthorizationRequestResolver(clientRegistrationRepository,"/oauth2/authorization");
    OAuth2AccessTokenResponse accessTokenResponse=OAuth2AccessTokenResponse.withToken("access-token-1234").tokenType(OAuth2AccessToken.TokenType.BEARER).expiresIn(300).build();
    accessTokenResponseClient=mock(OAuth2AccessTokenResponseClient.class);
    when(accessTokenResponseClient.getTokenResponse(any(OAuth2AuthorizationCodeGrantRequest.class))).thenReturn(accessTokenResponse);
    requestCache=mock(RequestCache.class);
  }
  @Test public void configureWhenAuthorizationCodeRequestThenRedirectForAuthorization() throws Exception {
    this.spring.register(OAuth2ClientConfig.class).autowire();
    MvcResult mvcResult=this.mockMvc.perform(get("/oauth2/authorization/registration-1")).andExpect(status().is3xxRedirection()).andReturn();
    assertThat(mvcResult.getResponse().getRedirectedUrl()).matches("https://provider.com/oauth2/authorize\\?response_type=code&client_id=client-1&scope=user&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Fclient-1");
  }
  @Test public void configureWhenAuthorizationCodeResponseSuccessThenAuthorizedClientSaved() throws Exception {
    this.spring.register(OAuth2ClientConfig.class).autowire();
    Map<String,Object> additionalParameters=new HashMap<>();
    additionalParameters.put(OAuth2ParameterNames.REGISTRATION_ID,this.registration1.getRegistrationId());
    OAuth2AuthorizationRequest authorizationRequest=OAuth2AuthorizationRequest.authorizationCode().authorizationUri(this.registration1.getProviderDetails().getAuthorizationUri()).clientId(this.registration1.getClientId()).redirectUri("http://localhost/client-1").state("state").additionalParameters(additionalParameters).build();
    AuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository=new HttpSessionOAuth2AuthorizationRequestRepository();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","");
    MockHttpServletResponse response=new MockHttpServletResponse();
    authorizationRequestRepository.saveAuthorizationRequest(authorizationRequest,request,response);
    MockHttpSession session=(MockHttpSession)request.getSession();
    String principalName="user1";
    TestingAuthenticationToken authentication=new TestingAuthenticationToken(principalName,"password");
    this.mockMvc.perform(get("/client-1").param(OAuth2ParameterNames.CODE,"code").param(OAuth2ParameterNames.STATE,"state").with(authentication(authentication)).session(session)).andExpect(status().is3xxRedirection()).andExpect(redirectedUrl("http://localhost/client-1"));
    OAuth2AuthorizedClient authorizedClient=authorizedClientRepository.loadAuthorizedClient(this.registration1.getRegistrationId(),authentication,request);
    assertThat(authorizedClient).isNotNull();
  }
  @Test public void configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed() throws Exception {
    this.spring.register(OAuth2ClientConfig.class).autowire();
    MvcResult mvcResult=this.mockMvc.perform(get("/resource1").with(user("user1"))).andExpect(status().is3xxRedirection()).andReturn();
    assertThat(mvcResult.getResponse().getRedirectedUrl()).matches("https://provider.com/oauth2/authorize\\?response_type=code&client_id=client-1&scope=user&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Fclient-1");
    verify(requestCache).saveRequest(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void configureWhenCustomAuthorizationRequestResolverSetThenAuthorizationRequestIncludesCustomParameters() throws Exception {
    OAuth2AuthorizationRequestResolver defaultAuthorizationRequestResolver=authorizationRequestResolver;
    authorizationRequestResolver=mock(OAuth2AuthorizationRequestResolver.class);
    when(authorizationRequestResolver.resolve(any())).thenAnswer(invocation -> defaultAuthorizationRequestResolver.resolve(invocation.getArgument(0)));
    this.spring.register(OAuth2ClientConfig.class).autowire();
    this.mockMvc.perform(get("/oauth2/authorization/registration-1")).andExpect(status().is3xxRedirection()).andReturn();
    verify(authorizationRequestResolver).resolve(any());
  }
@EnableWebSecurity @EnableWebMvc static class OAuth2ClientConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().authenticated().and().requestCache().requestCache(requestCache).and().oauth2Client().authorizationCodeGrant().authorizationRequestResolver(authorizationRequestResolver).accessTokenResponseClient(accessTokenResponseClient);
    }
    @Bean public ClientRegistrationRepository clientRegistrationRepository(){
      return clientRegistrationRepository;
    }
    @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository(){
      return authorizedClientRepository;
    }
@RestController public class ResourceController {
      @GetMapping("/resource1") public String resource1(      @RegisteredOAuth2AuthorizedClient("registration-1") OAuth2AuthorizedClient authorizedClient){
        return "resource1";
      }
    }
  }
}
