/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class ReactorContextWebFilterTests {
  @Mock private Authentication principal;
  @Mock private ServerSecurityContextRepository repository;
  private MockServerHttpRequest.BaseBuilder<?> exchange=MockServerHttpRequest.get("/");
  private TestPublisher<SecurityContext> securityContext=TestPublisher.create();
  private ReactorContextWebFilter filter;
  private WebTestHandler handler;
  @Before public void setup(){
    this.filter=new ReactorContextWebFilter(this.repository);
    this.handler=WebTestHandler.bindToWebFilters(this.filter);
    when(this.repository.load(any())).thenReturn(this.securityContext.mono());
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullSecurityContextRepository(){
    ServerSecurityContextRepository repository=null;
    new ReactorContextWebFilter(repository);
  }
  @Test public void filterWhenNoPrincipalAccessThenNoInteractions(){
    this.handler.exchange(this.exchange);
    this.securityContext.assertWasNotSubscribed();
  }
  @Test public void filterWhenGetPrincipalMonoThenNoInteractions(){
    this.handler=WebTestHandler.bindToWebFilters(this.filter,(e,c) -> {
      ReactiveSecurityContextHolder.getContext();
      return c.filter(e);
    }
);
    this.handler.exchange(this.exchange);
    this.securityContext.assertWasNotSubscribed();
  }
  @Test public void filterWhenPrincipalAndGetPrincipalThenInteractAndUseOriginalPrincipal(){
    SecurityContextImpl context=new SecurityContextImpl(this.principal);
    when(this.repository.load(any())).thenReturn(Mono.just(context));
    this.handler=WebTestHandler.bindToWebFilters(this.filter,(e,c) -> ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication).doOnSuccess(p -> assertThat(p).isSameAs(this.principal)).flatMap(p -> c.filter(e)));
    WebTestHandler.WebHandlerResult result=this.handler.exchange(this.exchange);
    this.securityContext.assertWasNotSubscribed();
  }
  @Test public void filterWhenMainContextThenDoesNotOverride(){
    String contextKey="main";
    WebFilter mainContextWebFilter=(e,c) -> c.filter(e).subscriberContext(Context.of(contextKey,true));
    WebFilterChain chain=new DefaultWebFilterChain(e -> Mono.empty(),mainContextWebFilter,this.filter);
    Mono<Void> filter=chain.filter(MockServerWebExchange.from(this.exchange.build()));
    StepVerifier.create(filter).expectAccessibleContext().hasKey(contextKey).then().verifyComplete();
  }
}
