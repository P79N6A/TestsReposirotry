@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=AuthenticationTests.Config.class) @WebAppConfiguration public class AuthenticationTests {
  @Autowired private WebApplicationContext context;
  private MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).defaultRequest(get("/").accept(MediaType.TEXT_HTML)).build();
  }
  @Test public void requiresAuthentication() throws Exception {
    mvc.perform(get("/")).andExpect(status().isFound());
  }
  @Test public void httpBasicAuthenticationSuccess() throws Exception {
    mvc.perform(get("/secured/butnotfound").with(httpBasic("user","password"))).andExpect(status().isNotFound()).andExpect(authenticated().withUsername("user"));
  }
  @Test public void authenticationSuccess() throws Exception {
    mvc.perform(formLogin()).andExpect(status().isFound()).andExpect(redirectedUrl("/")).andExpect(authenticated().withUsername("user"));
  }
  @Test public void authenticationFailed() throws Exception {
    mvc.perform(formLogin().user("user").password("invalid")).andExpect(status().isFound()).andExpect(redirectedUrl("/login?error")).andExpect(unauthenticated());
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Bean public UserDetailsService userDetailsService(){
      UserDetails user=User.withDefaultPasswordEncoder().username("user").password("password").roles("USER").build();
      return new InMemoryUserDetailsManager(user);
    }
  }
}
