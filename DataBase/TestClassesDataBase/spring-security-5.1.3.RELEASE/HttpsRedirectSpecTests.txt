/** 
 * Tests for  {@link HttpsRedirectSpecTests}
 * @author Josh Cummings
 */
public class HttpsRedirectSpecTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  WebTestClient client;
  @Autowired public void setApplicationContext(  ApplicationContext context){
    this.client=WebTestClient.bindToApplicationContext(context).build();
  }
  @Test public void getWhenSecureThenDoesNotRedirect(){
    this.spring.register(RedirectToHttpConfig.class).autowire();
    this.client.get().uri("https://localhost").exchange().expectStatus().isNotFound();
  }
  @Test public void getWhenInsecureThenRespondsWithRedirectToSecure(){
    this.spring.register(RedirectToHttpConfig.class).autowire();
    this.client.get().uri("http://localhost").exchange().expectStatus().isFound().expectHeader().valueEquals(HttpHeaders.LOCATION,"https://localhost");
  }
  @Test public void getWhenInsecureAndPathRequiresTransportSecurityThenRedirects(){
    this.spring.register(SometimesRedirectToHttpsConfig.class).autowire();
    this.client.get().uri("http://localhost:8080").exchange().expectStatus().isNotFound();
    this.client.get().uri("http://localhost:8080/secure").exchange().expectStatus().isFound().expectHeader().valueEquals(HttpHeaders.LOCATION,"https://localhost:8443/secure");
  }
  @Test public void getWhenInsecureAndUsingCustomPortMapperThenRespondsWithRedirectToSecurePort(){
    this.spring.register(RedirectToHttpsViaCustomPortsConfig.class).autowire();
    PortMapper portMapper=this.spring.getContext().getBean(PortMapper.class);
    when(portMapper.lookupHttpsPort(4080)).thenReturn(4443);
    this.client.get().uri("http://localhost:4080").exchange().expectStatus().isFound().expectHeader().valueEquals(HttpHeaders.LOCATION,"https://localhost:4443");
  }
@EnableWebFlux @EnableWebFluxSecurity static class RedirectToHttpConfig {
    @Bean SecurityWebFilterChain springSecurity(    ServerHttpSecurity http){
      http.redirectToHttps();
      return http.build();
    }
  }
@EnableWebFlux @EnableWebFluxSecurity static class SometimesRedirectToHttpsConfig {
    @Bean SecurityWebFilterChain springSecurity(    ServerHttpSecurity http){
      http.redirectToHttps().httpsRedirectWhen(new PathPatternParserServerWebExchangeMatcher("/secure"));
      return http.build();
    }
  }
@EnableWebFlux @EnableWebFluxSecurity static class RedirectToHttpsViaCustomPortsConfig {
    @Bean SecurityWebFilterChain springSecurity(    ServerHttpSecurity http){
      http.redirectToHttps().portMapper(portMapper());
      return http.build();
    }
    @Bean public PortMapper portMapper(){
      return mock(PortMapper.class);
    }
  }
}
