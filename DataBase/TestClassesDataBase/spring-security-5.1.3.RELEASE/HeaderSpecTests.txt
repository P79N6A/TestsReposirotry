/** 
 * Tests for  {@link ServerHttpSecurity.HeaderSpec}.
 * @author Rob Winch
 * @author Vedran Pavic
 * @since 5.0
 */
public class HeaderSpecTests {
  private ServerHttpSecurity.HeaderSpec headers=ServerHttpSecurity.http().headers();
  private HttpHeaders expectedHeaders=new HttpHeaders();
  private Set<String> headerNamesNotPresent=new HashSet<>();
  @Before public void setup(){
    this.expectedHeaders.add(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY,"max-age=31536000 ; includeSubDomains");
    this.expectedHeaders.add(HttpHeaders.CACHE_CONTROL,"no-cache, no-store, max-age=0, must-revalidate");
    this.expectedHeaders.add(HttpHeaders.PRAGMA,"no-cache");
    this.expectedHeaders.add(HttpHeaders.EXPIRES,"0");
    this.expectedHeaders.add(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS,"nosniff");
    this.expectedHeaders.add(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS,"DENY");
    this.expectedHeaders.add(XXssProtectionServerHttpHeadersWriter.X_XSS_PROTECTION,"1 ; mode=block");
  }
  @Test public void headersWhenDisableThenNoSecurityHeaders(){
    new HashSet<>(this.expectedHeaders.keySet()).forEach(this::expectHeaderNamesNotPresent);
    this.headers.disable();
    assertHeaders();
  }
  @Test public void headersWhenDisableAndInvokedExplicitlyThenDefautsUsed(){
    this.headers.disable().headers();
    assertHeaders();
  }
  @Test public void headersWhenDefaultsThenAllDefaultsWritten(){
    assertHeaders();
  }
  @Test public void headersWhenCacheDisableThenCacheNotWritten(){
    expectHeaderNamesNotPresent(HttpHeaders.CACHE_CONTROL,HttpHeaders.PRAGMA,HttpHeaders.EXPIRES);
    this.headers.cache().disable();
    assertHeaders();
  }
  @Test public void headersWhenContentOptionsDisableThenContentTypeOptionsNotWritten(){
    expectHeaderNamesNotPresent(ContentTypeOptionsServerHttpHeadersWriter.X_CONTENT_OPTIONS);
    this.headers.contentTypeOptions().disable();
    assertHeaders();
  }
  @Test public void headersWhenHstsDisableThenHstsNotWritten(){
    expectHeaderNamesNotPresent(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY);
    this.headers.hsts().disable();
    assertHeaders();
  }
  @Test public void headersWhenHstsCustomThenCustomHstsWritten(){
    this.expectedHeaders.remove(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY);
    this.expectedHeaders.add(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY,"max-age=60");
    this.headers.hsts().maxAge(Duration.ofSeconds(60)).includeSubdomains(false);
    assertHeaders();
  }
  @Test public void headersWhenFrameOptionsDisableThenFrameOptionsNotWritten(){
    expectHeaderNamesNotPresent(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS);
    this.headers.frameOptions().disable();
    assertHeaders();
  }
  @Test public void headersWhenFrameOptionsModeThenFrameOptionsCustomMode(){
    this.expectedHeaders.set(XFrameOptionsServerHttpHeadersWriter.X_FRAME_OPTIONS,"SAMEORIGIN");
    this.headers.frameOptions().mode(XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN);
    assertHeaders();
  }
  @Test public void headersWhenXssProtectionDisableThenXssProtectionNotWritten(){
    expectHeaderNamesNotPresent("X-Xss-Protection");
    this.headers.xssProtection().disable();
    assertHeaders();
  }
  @Test public void headersWhenFeaturePolicyEnabledThenFeaturePolicyWritten(){
    String policyDirectives="Feature-Policy";
    this.expectedHeaders.add(FeaturePolicyServerHttpHeadersWriter.FEATURE_POLICY,policyDirectives);
    this.headers.featurePolicy(policyDirectives);
    assertHeaders();
  }
  @Test public void headersWhenContentSecurityPolicyEnabledThenFeaturePolicyWritten(){
    String policyDirectives="default-src 'self'";
    this.expectedHeaders.add(ContentSecurityPolicyServerHttpHeadersWriter.CONTENT_SECURITY_POLICY,policyDirectives);
    this.headers.contentSecurityPolicy(policyDirectives);
    assertHeaders();
  }
  @Test public void headersWhenReferrerPolicyEnabledThenFeaturePolicyWritten(){
    this.expectedHeaders.add(ReferrerPolicyServerHttpHeadersWriter.REFERRER_POLICY,ReferrerPolicy.NO_REFERRER.getPolicy());
    this.headers.referrerPolicy();
    assertHeaders();
  }
  @Test public void headersWhenReferrerPolicyCustomEnabledThenFeaturePolicyCustomWritten(){
    this.expectedHeaders.add(ReferrerPolicyServerHttpHeadersWriter.REFERRER_POLICY,ReferrerPolicy.NO_REFERRER_WHEN_DOWNGRADE.getPolicy());
    this.headers.referrerPolicy(ReferrerPolicy.NO_REFERRER_WHEN_DOWNGRADE);
    assertHeaders();
  }
  private void expectHeaderNamesNotPresent(  String... headerNames){
    for (    String headerName : headerNames) {
      this.expectedHeaders.remove(headerName);
      this.headerNamesNotPresent.add(headerName);
    }
  }
  private void assertHeaders(){
    WebTestClient client=buildClient();
    FluxExchangeResult<String> response=client.get().uri("https://example.com/").exchange().returnResult(String.class);
    Map<String,List<String>> responseHeaders=response.getResponseHeaders();
    if (!this.expectedHeaders.isEmpty()) {
      assertThat(responseHeaders).describedAs(response.toString()).containsAllEntriesOf(this.expectedHeaders);
    }
    if (!this.headerNamesNotPresent.isEmpty()) {
      assertThat(responseHeaders.keySet()).doesNotContainAnyElementsOf(this.headerNamesNotPresent);
    }
  }
  private WebTestClient buildClient(){
    return WebTestClientBuilder.bindToWebFilters(this.headers.and().build()).build();
  }
}
