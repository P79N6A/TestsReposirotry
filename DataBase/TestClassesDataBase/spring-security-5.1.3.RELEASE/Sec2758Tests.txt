/** 
 * @author Josh Cummings
 */
@RunWith(SpringJUnit4ClassRunner.class) @SecurityTestExecutionListeners public class Sec2758Tests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired MockMvc mvc;
  @Autowired(required=false) Service service;
  @WithMockUser(authorities="CUSTOM") @Test public void requestWhenNullifyingRolePrefixThenPassivityRestored() throws Exception {
    this.spring.register(SecurityConfig.class).autowire();
    this.mvc.perform(get("/")).andExpect(status().isOk());
  }
  @WithMockUser(authorities="CUSTOM") @Test public void methodSecurityWhenNullifyingRolePrefixThenPassivityRestored(){
    this.spring.register(SecurityConfig.class).autowire();
    assertThatCode(() -> service.doJsr250()).doesNotThrowAnyException();
    assertThatCode(() -> service.doPreAuthorize()).doesNotThrowAnyException();
  }
@EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled=true,jsr250Enabled=true) static class SecurityConfig extends WebSecurityConfigurerAdapter {
@RestController static class RootController {
      @GetMapping("/") public String ok(){
        return "ok";
      }
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().access("hasAnyRole('CUSTOM')");
    }
    @Bean public Service service(){
      return new Service();
    }
    @Bean static DefaultRolesPrefixPostProcessor defaultRolesPrefixPostProcessor(){
      return new DefaultRolesPrefixPostProcessor();
    }
  }
static class Service {
    @PreAuthorize("hasRole('CUSTOM')") public void doPreAuthorize(){
    }
    @RolesAllowed("CUSTOM") public void doJsr250(){
    }
  }
static class DefaultRolesPrefixPostProcessor implements BeanPostProcessor, PriorityOrdered {
    @Override public Object postProcessAfterInitialization(    Object bean,    String beanName) throws BeansException {
      if (bean instanceof Jsr250MethodSecurityMetadataSource) {
        ((Jsr250MethodSecurityMetadataSource)bean).setDefaultRolePrefix(null);
      }
      if (bean instanceof DefaultMethodSecurityExpressionHandler) {
        ((DefaultMethodSecurityExpressionHandler)bean).setDefaultRolePrefix(null);
      }
      if (bean instanceof DefaultWebSecurityExpressionHandler) {
        ((DefaultWebSecurityExpressionHandler)bean).setDefaultRolePrefix(null);
      }
      return bean;
    }
    @Override public Object postProcessBeforeInitialization(    Object bean,    String beanName) throws BeansException {
      return bean;
    }
    @Override public int getOrder(){
      return PriorityOrdered.HIGHEST_PRECEDENCE;
    }
  }
}
