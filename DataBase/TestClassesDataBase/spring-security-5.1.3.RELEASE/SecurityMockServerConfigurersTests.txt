/** 
 * @author Rob Winch
 * @since 5.0
 */
public class SecurityMockServerConfigurersTests extends AbstractMockServerConfigurersTests {
  WebTestClient client=WebTestClient.bindToController(controller).webFilter(new CsrfWebFilter(),new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
  @Test public void mockAuthenticationWhenLocalThenSuccess(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    client.mutateWith(mockAuthentication(authentication)).get().exchange().expectStatus().isOk();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test public void mockAuthenticationWhenGlobalThenSuccess(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("authentication","secret","ROLE_USER");
    client=WebTestClient.bindToController(controller).webFilter(new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).apply(mockAuthentication(authentication)).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
    client.get().exchange().expectStatus().isOk();
    controller.assertPrincipalIsEqualTo(authentication);
  }
  @Test public void mockUserWhenDefaultsThenSuccess(){
    client.mutateWith(mockUser()).get().exchange().expectStatus().isOk();
    Principal actual=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(actual,userBuilder.build());
  }
  @Test public void mockUserWhenGlobalThenSuccess(){
    client=WebTestClient.bindToController(controller).webFilter(new SecurityContextServerWebExchangeWebFilter()).apply(springSecurity()).apply(mockUser()).configureClient().defaultHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON_VALUE).build();
    client.get().exchange().expectStatus().isOk();
    Principal actual=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(actual,userBuilder.build());
  }
  @Test public void mockUserStringWhenLocalThenSuccess(){
    client.mutateWith(mockUser(userBuilder.build().getUsername())).get().exchange().expectStatus().isOk();
    Principal actual=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(actual,userBuilder.build());
  }
  @Test public void mockUserStringWhenCustomThenSuccess(){
    this.userBuilder=User.withUsername("admin").password("secret").roles("USER","ADMIN");
    client.mutateWith(mockUser("admin").password("secret").roles("USER","ADMIN")).get().exchange().expectStatus().isOk();
    Principal actual=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(actual,userBuilder.build());
  }
  @Test public void mockUserUserDetailsLocalThenSuccess(){
    UserDetails userDetails=this.userBuilder.build();
    client.mutateWith(mockUser(userDetails)).get().exchange().expectStatus().isOk();
    Principal actual=controller.removePrincipal();
    assertPrincipalCreatedFromUserDetails(actual,userBuilder.build());
  }
  @Test public void csrfWhenMutateWithThenDisablesCsrf(){
    this.client.post().exchange().expectStatus().isEqualTo(HttpStatus.FORBIDDEN).expectBody().consumeWith(b -> assertThat(new String(b.getResponseBody())).contains("CSRF"));
    this.client.mutateWith(csrf()).post().exchange().expectStatus().isOk();
  }
  @Test public void csrfWhenGlobalThenDisablesCsrf(){
    this.client=WebTestClient.bindToController(this.controller).webFilter(new CsrfWebFilter()).apply(springSecurity()).apply(csrf()).configureClient().build();
    this.client.get().exchange().expectStatus().isOk();
  }
}
