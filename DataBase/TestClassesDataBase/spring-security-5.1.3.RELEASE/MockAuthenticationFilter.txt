private class MockAuthenticationFilter extends AbstractAuthenticationProcessingFilter {
  private AuthenticationException exceptionToThrow;
  private boolean grantAccess;
  public MockAuthenticationFilter(  boolean grantAccess){
    this();
    setRememberMeServices(new NullRememberMeServices());
    this.grantAccess=grantAccess;
    this.exceptionToThrow=new BadCredentialsException("Mock requested to do so");
  }
  private MockAuthenticationFilter(){
    super("/j_mock_post");
  }
  public Authentication attemptAuthentication(  HttpServletRequest request,  HttpServletResponse response) throws AuthenticationException {
    if (grantAccess) {
      return new UsernamePasswordAuthenticationToken("test","test",AuthorityUtils.createAuthorityList("TEST"));
    }
 else {
      throw exceptionToThrow;
    }
  }
}
