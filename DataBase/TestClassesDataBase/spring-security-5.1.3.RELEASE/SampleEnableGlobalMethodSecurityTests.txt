/** 
 * Demonstrate the samples
 * @author Rob Winch
 */
public class SampleEnableGlobalMethodSecurityTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MethodSecurityService methodSecurityService;
  @Before public void setup(){
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user","password","ROLE_USER"));
  }
  @Test public void preAuthorize(){
    this.spring.register(SampleWebSecurityConfig.class).autowire();
    assertThat(this.methodSecurityService.secured()).isNull();
    assertThat(this.methodSecurityService.jsr250()).isNull();
    assertThatThrownBy(() -> this.methodSecurityService.preAuthorize()).isInstanceOf(AccessDeniedException.class);
  }
@EnableGlobalMethodSecurity(prePostEnabled=true) static class SampleWebSecurityConfig {
    @Bean public MethodSecurityService methodSecurityService(){
      return new MethodSecurityServiceImpl();
    }
    @Autowired protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER").and().withUser("admin").password("password").roles("USER","ADMIN");
    }
  }
  @Test public void customPermissionHandler(){
    this.spring.register(CustomPermissionEvaluatorWebSecurityConfig.class).autowire();
    assertThat(this.methodSecurityService.hasPermission("allowed")).isNull();
    assertThatThrownBy(() -> this.methodSecurityService.hasPermission("denied")).isInstanceOf(AccessDeniedException.class);
  }
@EnableGlobalMethodSecurity(prePostEnabled=true) public static class CustomPermissionEvaluatorWebSecurityConfig extends GlobalMethodSecurityConfiguration {
    @Bean public MethodSecurityService methodSecurityService(){
      return new MethodSecurityServiceImpl();
    }
    @Override protected MethodSecurityExpressionHandler createExpressionHandler(){
      DefaultMethodSecurityExpressionHandler expressionHandler=new DefaultMethodSecurityExpressionHandler();
      expressionHandler.setPermissionEvaluator(new CustomPermissionEvaluator());
      return expressionHandler;
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER").and().withUser("admin").password("password").roles("USER","ADMIN");
    }
  }
static class CustomPermissionEvaluator implements PermissionEvaluator {
    public boolean hasPermission(    Authentication authentication,    Object targetDomainObject,    Object permission){
      return !"denied".equals(targetDomainObject);
    }
    public boolean hasPermission(    Authentication authentication,    Serializable targetId,    String targetType,    Object permission){
      return !"denied".equals(targetId);
    }
  }
}
