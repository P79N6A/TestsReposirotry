/** 
 * Tests  {@link RememberMeAuthenticationProvider}.
 * @author Ben Alex
 */
public class RememberMeAuthenticationProviderTests {
  @Test public void testDetectsAnInvalidKey() throws Exception {
    RememberMeAuthenticationProvider aap=new RememberMeAuthenticationProvider("qwerty");
    RememberMeAuthenticationToken token=new RememberMeAuthenticationToken("WRONG_KEY","Test",AuthorityUtils.createAuthorityList("ROLE_ONE","ROLE_TWO"));
    try {
      aap.authenticate(token);
      fail("Should have thrown BadCredentialsException");
    }
 catch (    BadCredentialsException expected) {
    }
  }
  @Test public void testDetectsMissingKey() throws Exception {
    try {
      new RememberMeAuthenticationProvider(null);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testGettersSetters() throws Exception {
    RememberMeAuthenticationProvider aap=new RememberMeAuthenticationProvider("qwerty");
    aap.afterPropertiesSet();
    assertThat(aap.getKey()).isEqualTo("qwerty");
  }
  @Test public void testIgnoresClassesItDoesNotSupport() throws Exception {
    RememberMeAuthenticationProvider aap=new RememberMeAuthenticationProvider("qwerty");
    TestingAuthenticationToken token=new TestingAuthenticationToken("user","password","ROLE_A");
    assertThat(aap.supports(TestingAuthenticationToken.class)).isFalse();
    assertThat(aap.authenticate(token)).isNull();
  }
  @Test public void testNormalOperation() throws Exception {
    RememberMeAuthenticationProvider aap=new RememberMeAuthenticationProvider("qwerty");
    RememberMeAuthenticationToken token=new RememberMeAuthenticationToken("qwerty","Test",AuthorityUtils.createAuthorityList("ROLE_ONE","ROLE_TWO"));
    Authentication result=aap.authenticate(token);
    assertThat(token).isEqualTo(result);
  }
  @Test public void testSupports(){
    RememberMeAuthenticationProvider aap=new RememberMeAuthenticationProvider("qwerty");
    assertThat(aap.supports(RememberMeAuthenticationToken.class)).isTrue();
    assertThat(aap.supports(TestingAuthenticationToken.class)).isFalse();
  }
}
