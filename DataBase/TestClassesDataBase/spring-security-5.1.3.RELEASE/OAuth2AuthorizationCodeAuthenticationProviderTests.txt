/** 
 * Tests for  {@link OAuth2AuthorizationCodeAuthenticationProvider}.
 * @author Joe Grandja
 */
@PrepareForTest({ClientRegistration.class,OAuth2AuthorizationRequest.class,OAuth2AuthorizationResponse.class,OAuth2AccessTokenResponse.class}) @RunWith(PowerMockRunner.class) public class OAuth2AuthorizationCodeAuthenticationProviderTests {
  private ClientRegistration clientRegistration;
  private OAuth2AuthorizationRequest authorizationRequest;
  private OAuth2AuthorizationResponse authorizationResponse;
  private OAuth2AuthorizationExchange authorizationExchange;
  private OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> accessTokenResponseClient;
  private OAuth2AuthorizationCodeAuthenticationProvider authenticationProvider;
  @Before @SuppressWarnings("unchecked") public void setUp() throws Exception {
    this.clientRegistration=mock(ClientRegistration.class);
    this.authorizationRequest=mock(OAuth2AuthorizationRequest.class);
    this.authorizationResponse=mock(OAuth2AuthorizationResponse.class);
    this.authorizationExchange=new OAuth2AuthorizationExchange(this.authorizationRequest,this.authorizationResponse);
    this.accessTokenResponseClient=mock(OAuth2AccessTokenResponseClient.class);
    this.authenticationProvider=new OAuth2AuthorizationCodeAuthenticationProvider(this.accessTokenResponseClient);
    when(this.authorizationRequest.getState()).thenReturn("12345");
    when(this.authorizationResponse.getState()).thenReturn("12345");
    when(this.authorizationRequest.getRedirectUri()).thenReturn("http://example.com");
    when(this.authorizationResponse.getRedirectUri()).thenReturn("http://example.com");
  }
  @Test public void constructorWhenAccessTokenResponseClientIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2AuthorizationCodeAuthenticationProvider(null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void supportsWhenTypeOAuth2AuthorizationCodeAuthenticationTokenThenReturnTrue(){
    assertThat(this.authenticationProvider.supports(OAuth2AuthorizationCodeAuthenticationToken.class)).isTrue();
  }
  @Test public void authenticateWhenAuthorizationErrorResponseThenThrowOAuth2AuthorizationException(){
    when(this.authorizationResponse.statusError()).thenReturn(true);
    when(this.authorizationResponse.getError()).thenReturn(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST));
    assertThatThrownBy(() -> {
      this.authenticationProvider.authenticate(new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange));
    }
).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  @Test public void authenticateWhenAuthorizationResponseStateNotEqualAuthorizationRequestStateThenThrowOAuth2AuthorizationException(){
    when(this.authorizationRequest.getState()).thenReturn("12345");
    when(this.authorizationResponse.getState()).thenReturn("67890");
    assertThatThrownBy(() -> {
      this.authenticationProvider.authenticate(new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange));
    }
).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining("invalid_state_parameter");
  }
  @Test public void authenticateWhenAuthorizationResponseRedirectUriNotEqualAuthorizationRequestRedirectUriThenThrowOAuth2AuthorizationException(){
    when(this.authorizationRequest.getRedirectUri()).thenReturn("http://example.com");
    when(this.authorizationResponse.getRedirectUri()).thenReturn("http://example2.com");
    assertThatThrownBy(() -> {
      this.authenticationProvider.authenticate(new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange));
    }
).isInstanceOf(OAuth2AuthorizationException.class).hasMessageContaining("invalid_redirect_uri_parameter");
  }
  @Test public void authenticateWhenAuthorizationSuccessResponseThenExchangedForAccessToken(){
    OAuth2AccessToken accessToken=mock(OAuth2AccessToken.class);
    OAuth2RefreshToken refreshToken=mock(OAuth2RefreshToken.class);
    OAuth2AccessTokenResponse accessTokenResponse=mock(OAuth2AccessTokenResponse.class);
    when(accessTokenResponse.getAccessToken()).thenReturn(accessToken);
    when(accessTokenResponse.getRefreshToken()).thenReturn(refreshToken);
    when(this.accessTokenResponseClient.getTokenResponse(any())).thenReturn(accessTokenResponse);
    OAuth2AuthorizationCodeAuthenticationToken authenticationResult=(OAuth2AuthorizationCodeAuthenticationToken)this.authenticationProvider.authenticate(new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange));
    assertThat(authenticationResult.isAuthenticated()).isTrue();
    assertThat(authenticationResult.getPrincipal()).isEqualTo(this.clientRegistration.getClientId());
    assertThat(authenticationResult.getCredentials()).isEqualTo(accessToken.getTokenValue());
    assertThat(authenticationResult.getAuthorities()).isEqualTo(Collections.emptyList());
    assertThat(authenticationResult.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authenticationResult.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authenticationResult.getAccessToken()).isEqualTo(accessToken);
    assertThat(authenticationResult.getRefreshToken()).isEqualTo(refreshToken);
  }
}
