/** 
 * @author Josh Cummings
 */
public class SessionManagementConfigurerSessionCreationPolicyTests {
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void getWhenSharedObjectSessionCreationPolicyConfigurationThenOverrides() throws Exception {
    this.spring.register(StatelessCreateSessionSharedObjectConfig.class).autowire();
    MvcResult result=this.mvc.perform(get("/")).andReturn();
    assertThat(result.getRequest().getSession(false)).isNull();
  }
@EnableWebSecurity static class StatelessCreateSessionSharedObjectConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      super.configure(http);
      http.setSharedObject(SessionCreationPolicy.class,SessionCreationPolicy.STATELESS);
    }
  }
  @Test public void getWhenUserSessionCreationPolicyConfigurationThenOverrides() throws Exception {
    this.spring.register(StatelessCreateSessionUserConfig.class).autowire();
    MvcResult result=this.mvc.perform(get("/")).andReturn();
    assertThat(result.getRequest().getSession(false)).isNull();
  }
@EnableWebSecurity static class StatelessCreateSessionUserConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      super.configure(http);
      http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
      http.setSharedObject(SessionCreationPolicy.class,SessionCreationPolicy.ALWAYS);
    }
  }
  @Test public void getWhenDefaultsThenLoginChallengeCreatesSession() throws Exception {
    this.spring.register(DefaultConfig.class,BasicController.class).autowire();
    MvcResult result=this.mvc.perform(get("/")).andExpect(status().isUnauthorized()).andReturn();
    assertThat(result.getRequest().getSession(false)).isNotNull();
  }
@EnableWebSecurity static class DefaultConfig extends WebSecurityConfigurerAdapter {
  }
@RestController static class BasicController {
    @GetMapping("/") public String root(){
      return "ok";
    }
  }
}
