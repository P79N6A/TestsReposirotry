/** 
 * Tests for <tt>PasswordPolicyResponse</tt>.
 * @author Luke Taylor
 */
public class PasswordPolicyResponseControlTests {
  /** 
 * Useful method for obtaining data from a server for use in tests
 */
  @Test public void openLDAP33SecondsTillPasswordExpiryCtrlIsParsedCorrectly(){
    byte[] ctrlBytes={0x30,0x05,(byte)0xA0,0x03,(byte)0xA0,0x1,0x21};
    PasswordPolicyResponseControl ctrl=new PasswordPolicyResponseControl(ctrlBytes);
    assertThat(ctrl.hasWarning()).isTrue();
    assertThat(ctrl.getTimeBeforeExpiration()).isEqualTo(33);
  }
  @Test public void openLDAP496GraceLoginsRemainingCtrlIsParsedCorrectly(){
    byte[] ctrlBytes={0x30,0x06,(byte)0xA0,0x04,(byte)0xA1,0x02,0x01,(byte)0xF0};
    PasswordPolicyResponseControl ctrl=new PasswordPolicyResponseControl(ctrlBytes);
    assertThat(ctrl.hasWarning()).isTrue();
    assertThat(ctrl.getGraceLoginsRemaining()).isEqualTo(496);
  }
  static final byte[] OPENLDAP_5_LOGINS_REMAINING_CTRL={0x30,0x05,(byte)0xA0,0x03,(byte)0xA1,0x01,0x05};
  @Test public void openLDAP5GraceLoginsRemainingCtrlIsParsedCorrectly(){
    PasswordPolicyResponseControl ctrl=new PasswordPolicyResponseControl(OPENLDAP_5_LOGINS_REMAINING_CTRL);
    assertThat(ctrl.hasWarning()).isTrue();
    assertThat(ctrl.getGraceLoginsRemaining()).isEqualTo(5);
  }
  static final byte[] OPENLDAP_LOCKED_CTRL={0x30,0x03,(byte)0xA1,0x01,0x01};
  @Test public void openLDAPAccountLockedCtrlIsParsedCorrectly(){
    PasswordPolicyResponseControl ctrl=new PasswordPolicyResponseControl(OPENLDAP_LOCKED_CTRL);
    assertThat(ctrl.hasError() && ctrl.isLocked()).isTrue();
    assertThat(ctrl.hasWarning()).isFalse();
  }
  @Test public void openLDAPPasswordExpiredCtrlIsParsedCorrectly(){
    byte[] ctrlBytes={0x30,0x03,(byte)0xA1,0x01,0x00};
    PasswordPolicyResponseControl ctrl=new PasswordPolicyResponseControl(ctrlBytes);
    assertThat(ctrl.hasError() && ctrl.isExpired()).isTrue();
    assertThat(ctrl.hasWarning()).isFalse();
  }
}
