/** 
 * @author Rob Winch
 * @since 5.1
 */
@RunWith(MockitoJUnitRunner.class) public class OidcReactiveOAuth2UserServiceTests {
  @Mock private ReactiveOAuth2UserService<OAuth2UserRequest,OAuth2User> oauth2UserService;
  private ClientRegistration.Builder registration=TestClientRegistrations.clientRegistration().userNameAttributeName(IdTokenClaimNames.SUB);
  private OidcIdToken idToken=new OidcIdToken("token123",Instant.now(),Instant.now().plusSeconds(3600),Collections.singletonMap(IdTokenClaimNames.SUB,"sub123"));
  private OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,"token",Instant.now(),Instant.now().plus(Duration.ofDays(1)),Collections.singleton("read:user"));
  private OidcReactiveOAuth2UserService userService=new OidcReactiveOAuth2UserService();
  @Before public void setup(){
    this.userService.setOauth2UserService(this.oauth2UserService);
  }
  @Test public void loadUserWhenUserInfoUriNullThenUserInfoNotRetrieved(){
    this.registration.userInfoUri(null);
    OidcUser user=this.userService.loadUser(userRequest()).block();
    assertThat(user.getUserInfo()).isNull();
  }
  @Test public void loadUserWhenOAuth2UserEmptyThenNullUserInfo(){
    when(this.oauth2UserService.loadUser(any())).thenReturn(Mono.empty());
    OidcUser user=this.userService.loadUser(userRequest()).block();
    assertThat(user.getUserInfo()).isNull();
  }
  @Test public void loadUserWhenOAuth2UserSubjectNullThenOAuth2AuthenticationException(){
    OAuth2User oauth2User=new DefaultOAuth2User(AuthorityUtils.createAuthorityList("ROLE_USER"),Collections.singletonMap("user","rob"),"user");
    when(this.oauth2UserService.loadUser(any())).thenReturn(Mono.just(oauth2User));
    assertThatCode(() -> this.userService.loadUser(userRequest()).block()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void loadUserWhenOAuth2UserSubjectNotEqualThenOAuth2AuthenticationException(){
    Map<String,Object> attributes=new HashMap<>();
    attributes.put(StandardClaimNames.SUB,"not-equal");
    attributes.put("user","rob");
    OAuth2User oauth2User=new DefaultOAuth2User(AuthorityUtils.createAuthorityList("ROLE_USER"),attributes,"user");
    when(this.oauth2UserService.loadUser(any())).thenReturn(Mono.just(oauth2User));
    assertThatCode(() -> this.userService.loadUser(userRequest()).block()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void loadUserWhenOAuth2UserThenUserInfoNotNull(){
    Map<String,Object> attributes=new HashMap<>();
    attributes.put(StandardClaimNames.SUB,"sub123");
    attributes.put("user","rob");
    OAuth2User oauth2User=new DefaultOAuth2User(AuthorityUtils.createAuthorityList("ROLE_USER"),attributes,"user");
    when(this.oauth2UserService.loadUser(any())).thenReturn(Mono.just(oauth2User));
    assertThat(this.userService.loadUser(userRequest()).block().getUserInfo()).isNotNull();
  }
  @Test public void loadUserWhenOAuth2UserAndUser(){
    this.registration.userNameAttributeName("user");
    Map<String,Object> attributes=new HashMap<>();
    attributes.put(StandardClaimNames.SUB,"sub123");
    attributes.put("user","rob");
    OAuth2User oauth2User=new DefaultOAuth2User(AuthorityUtils.createAuthorityList("ROLE_USER"),attributes,"user");
    when(this.oauth2UserService.loadUser(any())).thenReturn(Mono.just(oauth2User));
    assertThat(this.userService.loadUser(userRequest()).block().getName()).isEqualTo("rob");
  }
  private OidcUserRequest userRequest(){
    return new OidcUserRequest(this.registration.build(),this.accessToken,this.idToken);
  }
}
