/** 
 * Basic integration test for DMS sample.
 * @author Ben Alex
 */
@ContextConfiguration(locations={"classpath:applicationContext-dms-shared.xml","classpath:applicationContext-dms-insecure.xml"}) public class DmsIntegrationTests extends AbstractTransactionalJUnit4SpringContextTests {
  @Autowired protected JdbcTemplate jdbcTemplate;
  @Autowired protected DocumentDao documentDao;
  @After public void clearContext(){
    SecurityContextHolder.clearContext();
  }
  public void setDocumentDao(  DocumentDao documentDao){
    this.documentDao=documentDao;
  }
  @Test public void testBasePopulation(){
    assertThat(this.jdbcTemplate.queryForObject("select count(id) from DIRECTORY",Integer.class)).isEqualTo(9);
    assertThat((int)this.jdbcTemplate.queryForObject("select count(id) from FILE",Integer.class)).isEqualTo(90);
    assertThat(this.documentDao.findElements(Directory.ROOT_DIRECTORY).length).isEqualTo(3);
  }
  @Test public void testMarissaRetrieval(){
    process("rod","koala",false);
  }
  @Test public void testScottRetrieval(){
    process("scott","wombat",false);
  }
  @Test public void testDianneRetrieval(){
    process("dianne","emu",false);
  }
  protected void process(  String username,  String password,  boolean shouldBeFiltered){
    SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(username,password));
    System.out.println("------ Test for username: " + username + " ------");
    AbstractElement[] rootElements=this.documentDao.findElements(Directory.ROOT_DIRECTORY);
    assertThat(rootElements).hasSize(3);
    Directory homeDir=null;
    Directory nonHomeDir=null;
    for (int i=0; i < rootElements.length; i++) {
      if (rootElements[i].getName().equals(username)) {
        homeDir=(Directory)rootElements[i];
      }
 else {
        nonHomeDir=(Directory)rootElements[i];
      }
    }
    System.out.println("Home directory......: " + homeDir.getFullName());
    System.out.println("Non-home directory..: " + nonHomeDir.getFullName());
    AbstractElement[] homeElements=this.documentDao.findElements(homeDir);
    assertThat(homeElements).hasSize(12);
    AbstractElement[] nonHomeElements=this.documentDao.findElements(nonHomeDir);
    assertThat(nonHomeElements).hasSize(shouldBeFiltered ? 11 : 12);
    Directory nonHomeConfidentialDir=null;
    for (int i=0; i < nonHomeElements.length; i++) {
      if (nonHomeElements[i].getName().equals("confidential")) {
        nonHomeConfidentialDir=(Directory)nonHomeElements[i];
      }
    }
    if (shouldBeFiltered) {
      assertThat(nonHomeConfidentialDir).withFailMessage("Found confidential directory when we should not have").isNull();
    }
 else {
      System.out.println("Inaccessible dir....: " + nonHomeConfidentialDir.getFullName());
      assertThat(this.documentDao.findElements(nonHomeConfidentialDir).length).isEqualTo(10);
    }
    SecurityContextHolder.clearContext();
  }
}
