/** 
 * @author Rob Winch
 * @since 5.0
 */
public class StrictTransportSecurityServerHttpHeadersWriterTests {
  StrictTransportSecurityServerHttpHeadersWriter hsts=new StrictTransportSecurityServerHttpHeadersWriter();
  ServerWebExchange exchange;
  @Test public void writeHttpHeadersWhenHttpsThenWrites(){
    exchange=exchange(MockServerHttpRequest.get("https://example.com/"));
    hsts.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers).containsEntry(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY,Arrays.asList("max-age=31536000 ; includeSubDomains"));
  }
  @Test public void writeHttpHeadersWhenCustomMaxAgeThenWrites(){
    Duration maxAge=Duration.ofDays(1);
    hsts.setMaxAge(maxAge);
    exchange=exchange(MockServerHttpRequest.get("https://example.com/"));
    hsts.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers).containsEntry(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY,Arrays.asList("max-age=" + maxAge.getSeconds() + " ; includeSubDomains"));
  }
  @Test public void writeHttpHeadersWhenCustomIncludeSubDomainsThenWrites(){
    hsts.setIncludeSubDomains(false);
    exchange=exchange(MockServerHttpRequest.get("https://example.com/"));
    hsts.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).hasSize(1);
    assertThat(headers).containsEntry(StrictTransportSecurityServerHttpHeadersWriter.STRICT_TRANSPORT_SECURITY,Arrays.asList("max-age=31536000"));
  }
  @Test public void writeHttpHeadersWhenNullSchemeThenNoHeaders(){
    exchange=exchange(MockServerHttpRequest.get("/"));
    hsts.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).isEmpty();
  }
  @Test public void writeHttpHeadersWhenHttpThenNoHeaders(){
    exchange=exchange(MockServerHttpRequest.get("http://example.com/"));
    hsts.writeHttpHeaders(exchange);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertThat(headers).isEmpty();
  }
  private static MockServerWebExchange exchange(  MockServerHttpRequest.BaseBuilder<?> request){
    return MockServerWebExchange.from(request.build());
  }
}
