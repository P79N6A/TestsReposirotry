/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) @ContextConfiguration(classes=WithSecurityContextTestExecutionListenerTests.NoOpConfiguration.class) public class WithSecurityContextTestExecutionListenerTests {
  @ClassRule public static final SpringClassRule spring=new SpringClassRule();
  @Rule public final SpringMethodRule springMethod=new SpringMethodRule();
  @Autowired private ApplicationContext applicationContext;
  @Mock private TestContext testContext;
  private WithSecurityContextTestExecutionListener listener=new WithSecurityContextTestExecutionListener();
  @After public void cleanup(){
    TestSecurityContextHolder.clearContext();
  }
  @Test public void beforeTestMethodWhenWithMockUserTestExecutionDefaultThenSecurityContextSet() throws Exception {
    Method testMethod=TheTest.class.getMethod("withMockUserDefault");
    when(this.testContext.getApplicationContext()).thenReturn(this.applicationContext);
    when(this.testContext.getTestMethod()).thenReturn(testMethod);
    this.listener.beforeTestMethod(this.testContext);
    assertThat(TestSecurityContextHolder.getContext().getAuthentication()).isNotNull();
    verify(this.testContext,never()).setAttribute(eq(WithSecurityContextTestExecutionListener.SECURITY_CONTEXT_ATTR_NAME),any(SecurityContext.class));
  }
  @Test public void beforeTestMethodWhenWithMockUserTestMethodThenSecurityContextSet() throws Exception {
    Method testMethod=TheTest.class.getMethod("withMockUserTestMethod");
    when(this.testContext.getApplicationContext()).thenReturn(this.applicationContext);
    when(this.testContext.getTestMethod()).thenReturn(testMethod);
    this.listener.beforeTestMethod(this.testContext);
    assertThat(TestSecurityContextHolder.getContext().getAuthentication()).isNotNull();
    verify(this.testContext,never()).setAttribute(eq(WithSecurityContextTestExecutionListener.SECURITY_CONTEXT_ATTR_NAME),any(SecurityContext.class));
  }
  @Test public void beforeTestMethodWhenWithMockUserTestExecutionThenTestContextSet() throws Exception {
    Method testMethod=TheTest.class.getMethod("withMockUserTestExecution");
    when(this.testContext.getApplicationContext()).thenReturn(this.applicationContext);
    when(this.testContext.getTestMethod()).thenReturn(testMethod);
    this.listener.beforeTestMethod(this.testContext);
    assertThat(TestSecurityContextHolder.getContext().getAuthentication()).isNull();
    verify(this.testContext).setAttribute(eq(WithSecurityContextTestExecutionListener.SECURITY_CONTEXT_ATTR_NAME),any(SecurityContext.class));
  }
  @Test public void beforeTestExecutionWhenTestContextNullThenSecurityContextNotSet() throws Exception {
    this.listener.beforeTestExecution(this.testContext);
    assertThat(TestSecurityContextHolder.getContext().getAuthentication()).isNull();
  }
  @Test public void beforeTestExecutionWhenTestContextNotNullThenSecurityContextSet() throws Exception {
    SecurityContextImpl securityContext=new SecurityContextImpl();
    securityContext.setAuthentication(new TestingAuthenticationToken("user","passsword","ROLE_USER"));
    when(this.testContext.removeAttribute(WithSecurityContextTestExecutionListener.SECURITY_CONTEXT_ATTR_NAME)).thenReturn(securityContext);
    this.listener.beforeTestExecution(this.testContext);
    assertThat(TestSecurityContextHolder.getContext().getAuthentication()).isEqualTo(securityContext.getAuthentication());
  }
@Configuration static class NoOpConfiguration {
  }
static class TheTest {
    @WithMockUser(setupBefore=TestExecutionEvent.TEST_EXECUTION) public void withMockUserTestExecution(){
    }
    @WithMockUser(setupBefore=TestExecutionEvent.TEST_METHOD) public void withMockUserTestMethod(){
    }
    @WithMockUser public void withMockUserDefault(){
    }
  }
}
