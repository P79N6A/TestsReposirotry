public class HttpInterceptUrlTests {
  ConfigurableWebApplicationContext context;
  MockMvc mockMvc;
  @After public void close(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void interceptUrlWhenRequestMatcherRefThenWorks() throws Exception {
    loadConfig("interceptUrlWhenRequestMatcherRefThenWorks.xml");
    mockMvc.perform(get("/foo")).andExpect(status().isUnauthorized());
    mockMvc.perform(get("/FOO")).andExpect(status().isUnauthorized());
    mockMvc.perform(get("/other")).andExpect(status().isOk());
  }
  private void loadConfig(  String... configLocations){
    for (int i=0; i < configLocations.length; i++) {
      configLocations[i]=getClass().getName().replaceAll("\\.","/") + "-" + configLocations[i];
    }
    XmlWebApplicationContext context=new XmlWebApplicationContext();
    context.setConfigLocations(configLocations);
    context.setServletContext(new MockServletContext());
    context.refresh();
    this.context=context;
    context.getAutowireCapableBeanFactory().autowireBean(this);
    Filter springSecurityFilterChain=context.getBean("springSecurityFilterChain",Filter.class);
    mockMvc=MockMvcBuilders.standaloneSetup(new FooController()).addFilters(springSecurityFilterChain).build();
  }
@RestController static class FooController {
    @GetMapping("/*") String foo(){
      return "foo";
    }
  }
}
