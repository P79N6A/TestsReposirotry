/** 
 * Tests  {@link UsernamePasswordAuthenticationFilter}.
 * @author Ben Alex
 */
public class UsernamePasswordAuthenticationFilterTests {
  @Test public void testNormalOperation() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_USERNAME_KEY,"rod");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_PASSWORD_KEY,"koala");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAuthenticationManager(createAuthenticationManager());
    Authentication result=filter.attemptAuthentication(request,new MockHttpServletResponse());
    assertThat(result != null).isTrue();
    assertThat(((WebAuthenticationDetails)result.getDetails()).getRemoteAddress()).isEqualTo("127.0.0.1");
  }
  @Test public void testNullPasswordHandledGracefully() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_USERNAME_KEY,"rod");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAuthenticationManager(createAuthenticationManager());
    assertThat(filter.attemptAuthentication(request,new MockHttpServletResponse())).isNotNull();
  }
  @Test public void testNullUsernameHandledGracefully() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_PASSWORD_KEY,"koala");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAuthenticationManager(createAuthenticationManager());
    assertThat(filter.attemptAuthentication(request,new MockHttpServletResponse())).isNotNull();
  }
  @Test public void testUsingDifferentParameterNamesWorksAsExpected() throws ServletException {
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAuthenticationManager(createAuthenticationManager());
    filter.setUsernameParameter("x");
    filter.setPasswordParameter("y");
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter("x","rod");
    request.addParameter("y","koala");
    Authentication result=filter.attemptAuthentication(request,new MockHttpServletResponse());
    assertThat(result).isNotNull();
    assertThat(((WebAuthenticationDetails)result.getDetails()).getRemoteAddress()).isEqualTo("127.0.0.1");
  }
  @Test public void testSpacesAreTrimmedCorrectlyFromUsername() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_USERNAME_KEY," rod ");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_PASSWORD_KEY,"koala");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAuthenticationManager(createAuthenticationManager());
    Authentication result=filter.attemptAuthentication(request,new MockHttpServletResponse());
    assertThat(result.getName()).isEqualTo("rod");
  }
  @Test public void testFailedAuthenticationThrowsException(){
    MockHttpServletRequest request=new MockHttpServletRequest("POST","/");
    request.addParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_USERNAME_KEY,"rod");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    AuthenticationManager am=mock(AuthenticationManager.class);
    when(am.authenticate(any(Authentication.class))).thenThrow(new BadCredentialsException(""));
    filter.setAuthenticationManager(am);
    try {
      filter.attemptAuthentication(request,new MockHttpServletResponse());
      fail("Expected AuthenticationException");
    }
 catch (    AuthenticationException e) {
    }
  }
  /** 
 * SEC-571
 */
  @Test public void noSessionIsCreatedIfAllowSessionCreationIsFalse() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setMethod("POST");
    UsernamePasswordAuthenticationFilter filter=new UsernamePasswordAuthenticationFilter();
    filter.setAllowSessionCreation(false);
    filter.setAuthenticationManager(createAuthenticationManager());
    filter.attemptAuthentication(request,new MockHttpServletResponse());
    assertThat(request.getSession(false)).isNull();
  }
  private AuthenticationManager createAuthenticationManager(){
    AuthenticationManager am=mock(AuthenticationManager.class);
    when(am.authenticate(any(Authentication.class))).thenAnswer(new Answer<Authentication>(){
      public Authentication answer(      InvocationOnMock invocation) throws Throwable {
        return (Authentication)invocation.getArguments()[0];
      }
    }
);
    return am;
  }
}
