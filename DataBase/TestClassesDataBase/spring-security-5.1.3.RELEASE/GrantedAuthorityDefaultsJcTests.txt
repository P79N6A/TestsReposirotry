@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class GrantedAuthorityDefaultsJcTests {
  @Autowired FilterChainProxy springSecurityFilterChain;
  @Autowired MessageService messageService;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  MockFilterChain chain;
  @Before public void setup(){
    setup("USER");
    request=new MockHttpServletRequest("GET","");
    request.setMethod("GET");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
  }
  @After public void cleanup(){
    SecurityContextHolder.clearContext();
  }
  @Test public void doFilter() throws Exception {
    SecurityContext context=SecurityContextHolder.getContext();
    request.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,context);
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
  }
  @Test public void doFilterDenied() throws Exception {
    setup("DENIED");
    SecurityContext context=SecurityContextHolder.getContext();
    request.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,context);
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_FORBIDDEN);
  }
  @Test public void message(){
    messageService.getMessage();
  }
  @Test public void jsrMessage(){
    messageService.getJsrMessage();
  }
  @Test(expected=AccessDeniedException.class) public void messageDenied(){
    setup("DENIED");
    messageService.getMessage();
  }
  @Test(expected=AccessDeniedException.class) public void jsrMessageDenied(){
    setup("DENIED");
    messageService.getJsrMessage();
  }
  @Test public void doFilterIsUserInRole() throws Exception {
    SecurityContext context=SecurityContextHolder.getContext();
    request.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,context);
    chain=new MockFilterChain(){
      @Override public void doFilter(      ServletRequest request,      ServletResponse response) throws IOException, ServletException {
        HttpServletRequest httpRequest=(HttpServletRequest)request;
        assertThat(httpRequest.isUserInRole("USER")).isTrue();
        assertThat(httpRequest.isUserInRole("INVALID")).isFalse();
        super.doFilter(request,response);
      }
    }
;
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(chain.getRequest()).isNotNull();
  }
  private void setup(  String role){
    TestingAuthenticationToken user=new TestingAuthenticationToken("user","password",role);
    SecurityContextHolder.getContext().setAuthentication(user);
  }
@Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled=true,jsr250Enabled=true) static class Config extends WebSecurityConfigurerAdapter {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().anyRequest().access("hasRole('USER')");
    }
    @Bean public MessageService messageService(){
      return new HelloWorldMessageService();
    }
    @Bean public static GrantedAuthorityDefaults grantedAuthorityDefaults(){
      return new GrantedAuthorityDefaults("");
    }
  }
}
