public class SecurityEvaluationContextExtensionTests {
  SecurityEvaluationContextExtension securityExtension;
  @Before public void setup(){
    securityExtension=new SecurityEvaluationContextExtension();
  }
  @After public void cleanup(){
    SecurityContextHolder.clearContext();
  }
  @Test(expected=IllegalArgumentException.class) public void getRootObjectSecurityContextHolderAuthenticationNull(){
    getRoot().getAuthentication();
  }
  @Test public void getRootObjectSecurityContextHolderAuthentication(){
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("user","password","ROLE_USER");
    SecurityContextHolder.getContext().setAuthentication(authentication);
    assertThat(getRoot().getAuthentication()).isSameAs(authentication);
  }
  @Test public void getRootObjectExplicitAuthenticationOverridesSecurityContextHolder(){
    TestingAuthenticationToken explicit=new TestingAuthenticationToken("explicit","password","ROLE_EXPLICIT");
    securityExtension=new SecurityEvaluationContextExtension(explicit);
    TestingAuthenticationToken authentication=new TestingAuthenticationToken("user","password","ROLE_USER");
    SecurityContextHolder.getContext().setAuthentication(authentication);
    assertThat(getRoot().getAuthentication()).isSameAs(explicit);
  }
  @Test public void getRootObjectExplicitAuthentication(){
    TestingAuthenticationToken explicit=new TestingAuthenticationToken("explicit","password","ROLE_EXPLICIT");
    securityExtension=new SecurityEvaluationContextExtension(explicit);
    assertThat(getRoot().getAuthentication()).isSameAs(explicit);
  }
  private SecurityExpressionRoot getRoot(){
    return (SecurityExpressionRoot)securityExtension.getRootObject();
  }
}
