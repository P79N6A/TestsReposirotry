/** 
 * Tests for  {@link AclClassIdUtils}.
 * @author paulwheeler
 */
@RunWith(MockitoJUnitRunner.class) public class AclClassIdUtilsTest {
  private static final Long DEFAULT_IDENTIFIER=999L;
  private static final String DEFAULT_IDENTIFIER_AS_STRING=DEFAULT_IDENTIFIER.toString();
  @Mock private ResultSet resultSet;
  @Mock private ConversionService conversionService;
  @InjectMocks private AclClassIdUtils aclClassIdUtils;
  @Before public void setUp() throws Exception {
    given(conversionService.canConvert(String.class,Long.class)).willReturn(true);
    given(conversionService.convert(DEFAULT_IDENTIFIER,Long.class)).willReturn(new Long(DEFAULT_IDENTIFIER));
    given(conversionService.convert(DEFAULT_IDENTIFIER_AS_STRING,Long.class)).willReturn(new Long(DEFAULT_IDENTIFIER));
  }
  @Test public void shouldReturnLongIfIdentifierIsNotStringAndNoConversionService() throws SQLException {
    AclClassIdUtils aclClassIdUtilsWithoutConversionSvc=new AclClassIdUtils();
    Serializable newIdentifier=aclClassIdUtilsWithoutConversionSvc.identifierFrom(DEFAULT_IDENTIFIER,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnLongIfIdentifierIsNotString() throws SQLException {
    Long prevIdentifier=999L;
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(prevIdentifier,resultSet);
    assertThat(newIdentifier).isEqualTo(prevIdentifier);
  }
  @Test public void shouldReturnLongIfClassIdTypeIsNull() throws SQLException {
    given(resultSet.getString("class_id_type")).willReturn(null);
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(DEFAULT_IDENTIFIER_AS_STRING,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnLongIfNoClassIdTypeColumn() throws SQLException {
    given(resultSet.getString("class_id_type")).willThrow(SQLException.class);
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(DEFAULT_IDENTIFIER_AS_STRING,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnLongIfTypeClassNotFound() throws SQLException {
    given(resultSet.getString("class_id_type")).willReturn("com.example.UnknownType");
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(DEFAULT_IDENTIFIER_AS_STRING,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnLongIfTypeClassCannotBeConverted() throws SQLException {
    given(resultSet.getString("class_id_type")).willReturn("java.lang.Long");
    given(conversionService.canConvert(String.class,Long.class)).willReturn(false);
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(DEFAULT_IDENTIFIER_AS_STRING,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnLongWhenLongClassIdType() throws SQLException {
    given(resultSet.getString("class_id_type")).willReturn("java.lang.Long");
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(DEFAULT_IDENTIFIER_AS_STRING,resultSet);
    assertThat(newIdentifier).isEqualTo(DEFAULT_IDENTIFIER);
  }
  @Test public void shouldReturnUUIDWhenUUIDClassIdType() throws SQLException {
    UUID identifier=UUID.randomUUID();
    String identifierAsString=identifier.toString();
    given(resultSet.getString("class_id_type")).willReturn("java.util.UUID");
    given(conversionService.canConvert(String.class,UUID.class)).willReturn(true);
    given(conversionService.convert(identifierAsString,UUID.class)).willReturn(UUID.fromString(identifierAsString));
    Serializable newIdentifier=aclClassIdUtils.identifierFrom(identifier.toString(),resultSet);
    assertThat(newIdentifier).isEqualTo(identifier);
  }
}
