/** 
 * @author Rob Winch
 * @since 5.0
 */
public class ServerWebExchangeMatchersTests {
  ServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/").build());
  @Test public void pathMatchersWhenSingleAndSamePatternThenMatches() throws Exception {
    assertThat(pathMatchers("/").matches(exchange).block().isMatch()).isTrue();
  }
  @Test public void pathMatchersWhenSingleAndSamePatternAndMethodThenMatches() throws Exception {
    assertThat(ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET,"/").matches(exchange).block().isMatch()).isTrue();
  }
  @Test public void pathMatchersWhenSingleAndSamePatternAndDiffMethodThenDoesNotMatch() throws Exception {
    assertThat(ServerWebExchangeMatchers.pathMatchers(HttpMethod.POST,"/").matches(exchange).block().isMatch()).isFalse();
  }
  @Test public void pathMatchersWhenSingleAndDifferentPatternThenDoesNotMatch() throws Exception {
    assertThat(pathMatchers("/foobar").matches(exchange).block().isMatch()).isFalse();
  }
  @Test public void pathMatchersWhenMultiThenMatches() throws Exception {
    assertThat(pathMatchers("/foobar","/").matches(exchange).block().isMatch()).isTrue();
  }
  @Test public void anyExchangeWhenMockThenMatches(){
    ServerWebExchange mockExchange=mock(ServerWebExchange.class);
    assertThat(anyExchange().matches(mockExchange).block().isMatch()).isTrue();
    verifyZeroInteractions(mockExchange);
  }
  /** 
 * If a LinkedMap is used and anyRequest equals anyRequest then the following is added: anyRequest() -> authenticated() pathMatchers("/admin/**") -> hasRole("ADMIN") anyRequest() -> permitAll will result in the first entry being overridden
 */
  @Test public void anyExchangeWhenTwoCreatedThenDifferentToPreventIssuesInMap(){
    assertThat(anyExchange()).isNotEqualTo(anyExchange());
  }
}
