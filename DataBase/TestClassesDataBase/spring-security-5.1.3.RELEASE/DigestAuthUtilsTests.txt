/** 
 * Tests  {@link org.springframework.security.util.StringSplitUtils}.
 * @author Ben Alex
 */
public class DigestAuthUtilsTests {
  @Test public void testSplitEachArrayElementAndCreateMapNormalOperation(){
    String unsplit="username=\"rod\", invalidEntryThatHasNoEqualsSign, realm=\"Contacts Realm\", nonce=\"MTEwOTAyMzU1MTQ4NDo1YzY3OWViYWM5NDNmZWUwM2UwY2NmMDBiNDQzMTQ0OQ==\", uri=\"/spring-security-sample-contacts-filter/secure/adminPermission.htm?contactId=4\", response=\"38644211cf9ac3da63ab639807e2baff\", qop=auth, nc=00000004, cnonce=\"2b8d329a8571b99a\"";
    String[] headerEntries=StringUtils.commaDelimitedListToStringArray(unsplit);
    Map<String,String> headerMap=DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries,"=","\"");
    assertThat(headerMap.get("username")).isEqualTo("rod");
    assertThat(headerMap.get("realm")).isEqualTo("Contacts Realm");
    assertThat(headerMap.get("nonce")).isEqualTo("MTEwOTAyMzU1MTQ4NDo1YzY3OWViYWM5NDNmZWUwM2UwY2NmMDBiNDQzMTQ0OQ==");
    assertThat(headerMap.get("uri")).isEqualTo("/spring-security-sample-contacts-filter/secure/adminPermission.htm?contactId=4");
    assertThat(headerMap.get("response")).isEqualTo("38644211cf9ac3da63ab639807e2baff");
    assertThat(headerMap.get("qop")).isEqualTo("auth");
    assertThat(headerMap.get("nc")).isEqualTo("00000004");
    assertThat(headerMap.get("cnonce")).isEqualTo("2b8d329a8571b99a");
    assertThat(headerMap).hasSize(8);
  }
  @Test public void testSplitEachArrayElementAndCreateMapRespectsInstructionNotToRemoveCharacters(){
    String unsplit="username=\"rod\", realm=\"Contacts Realm\", nonce=\"MTEwOTAyMzU1MTQ4NDo1YzY3OWViYWM5NDNmZWUwM2UwY2NmMDBiNDQzMTQ0OQ==\", uri=\"/spring-security-sample-contacts-filter/secure/adminPermission.htm?contactId=4\", response=\"38644211cf9ac3da63ab639807e2baff\", qop=auth, nc=00000004, cnonce=\"2b8d329a8571b99a\"";
    String[] headerEntries=StringUtils.commaDelimitedListToStringArray(unsplit);
    Map<String,String> headerMap=DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries,"=",null);
    assertThat(headerMap.get("username")).isEqualTo("\"rod\"");
    assertThat(headerMap.get("realm")).isEqualTo("\"Contacts Realm\"");
    assertThat(headerMap.get("nonce")).isEqualTo("\"MTEwOTAyMzU1MTQ4NDo1YzY3OWViYWM5NDNmZWUwM2UwY2NmMDBiNDQzMTQ0OQ==\"");
    assertThat(headerMap.get("uri")).isEqualTo("\"/spring-security-sample-contacts-filter/secure/adminPermission.htm?contactId=4\"");
    assertThat(headerMap.get("response")).isEqualTo("\"38644211cf9ac3da63ab639807e2baff\"");
    assertThat(headerMap.get("qop")).isEqualTo("auth");
    assertThat(headerMap.get("nc")).isEqualTo("00000004");
    assertThat(headerMap.get("cnonce")).isEqualTo("\"2b8d329a8571b99a\"");
    assertThat(headerMap).hasSize(8);
  }
  @Test public void testSplitEachArrayElementAndCreateMapReturnsNullIfArrayEmptyOrNull(){
    assertThat(DigestAuthUtils.splitEachArrayElementAndCreateMap(null,"=","\"")).isNull();
    assertThat(DigestAuthUtils.splitEachArrayElementAndCreateMap(new String[]{},"=","\"")).isNull();
  }
  @Test public void testSplitNormalOperation(){
    String unsplit="username=\"rod==\"";
    assertThat(DigestAuthUtils.split(unsplit,"=")[0]).isEqualTo("username");
    assertThat(DigestAuthUtils.split(unsplit,"=")[1]).isEqualTo("\"rod==\"");
  }
  @Test public void testSplitRejectsNullsAndIncorrectLengthStrings(){
    try {
      DigestAuthUtils.split(null,"=");
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      DigestAuthUtils.split("","=");
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      DigestAuthUtils.split("sdch=dfgf",null);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      DigestAuthUtils.split("fvfv=dcdc","");
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
    try {
      DigestAuthUtils.split("dfdc=dcdc","BIGGER_THAN_ONE_CHARACTER");
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void testSplitWorksWithDifferentDelimiters(){
    assertThat(DigestAuthUtils.split("18/rod","/")).hasSize(2);
    assertThat(DigestAuthUtils.split("18/rod","!")).isNull();
    assertThat(DigestAuthUtils.split("18|rod|foo|bar","|")).hasSize(2);
  }
  public void testAuthorizationHeaderWithCommasIsSplitCorrectly(){
    String header="Digest username=\"hamilton,bob\", realm=\"bobs,ok,realm\", nonce=\"the,nonce\", " + "uri=\"the,Uri\", response=\"the,response,Digest\", qop=theqop, nc=thenc, cnonce=\"the,cnonce\"";
    String[] parts=DigestAuthUtils.splitIgnoringQuotes(header,',');
    assertThat(parts).hasSize(8);
  }
}
