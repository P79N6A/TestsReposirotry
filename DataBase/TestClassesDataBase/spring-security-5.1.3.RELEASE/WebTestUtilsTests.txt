@RunWith(MockitoJUnitRunner.class) public class WebTestUtilsTests {
  @Mock private SecurityContextRepository contextRepo;
  @Mock private CsrfTokenRepository csrfRepo;
  private MockHttpServletRequest request;
  private ConfigurableApplicationContext context;
  @Before public void setup(){
    this.request=new MockHttpServletRequest();
  }
  @After public void cleanup(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void getCsrfTokenRepositorytNoWac(){
    assertThat(getCsrfTokenRepository(this.request)).isInstanceOf(HttpSessionCsrfTokenRepository.class);
  }
  @Test public void getCsrfTokenRepositorytNoSecurity(){
    loadConfig(Config.class);
    assertThat(getCsrfTokenRepository(this.request)).isInstanceOf(HttpSessionCsrfTokenRepository.class);
  }
  @Test public void getCsrfTokenRepositorytSecurityNoCsrf(){
    loadConfig(SecurityNoCsrfConfig.class);
    assertThat(getCsrfTokenRepository(this.request)).isInstanceOf(HttpSessionCsrfTokenRepository.class);
  }
  @Test public void getCsrfTokenRepositorytSecurityCustomRepo(){
    CustomSecurityConfig.CONTEXT_REPO=this.contextRepo;
    CustomSecurityConfig.CSRF_REPO=this.csrfRepo;
    loadConfig(CustomSecurityConfig.class);
    assertThat(getCsrfTokenRepository(this.request)).isSameAs(this.csrfRepo);
  }
  @Test public void getSecurityContextRepositoryNoWac(){
    assertThat(getSecurityContextRepository(this.request)).isInstanceOf(HttpSessionSecurityContextRepository.class);
  }
  @Test public void getSecurityContextRepositoryNoSecurity(){
    loadConfig(Config.class);
    assertThat(getSecurityContextRepository(this.request)).isInstanceOf(HttpSessionSecurityContextRepository.class);
  }
  @Test public void getSecurityContextRepositorySecurityNoCsrf(){
    loadConfig(SecurityNoCsrfConfig.class);
    assertThat(getSecurityContextRepository(this.request)).isInstanceOf(HttpSessionSecurityContextRepository.class);
  }
  @Test public void getSecurityContextRepositorySecurityCustomRepo(){
    CustomSecurityConfig.CONTEXT_REPO=this.contextRepo;
    CustomSecurityConfig.CSRF_REPO=this.csrfRepo;
    loadConfig(CustomSecurityConfig.class);
    assertThat(getSecurityContextRepository(this.request)).isSameAs(this.contextRepo);
  }
  @Test public void findFilterNoMatchingFilters(){
    loadConfig(PartialSecurityConfig.class);
    assertThat(WebTestUtils.findFilter(this.request,SecurityContextPersistenceFilter.class)).isNull();
  }
  @Test public void findFilterNoSpringSecurityFilterChainInContext(){
    loadConfig(NoSecurityConfig.class);
    CsrfFilter toFind=new CsrfFilter(new HttpSessionCsrfTokenRepository());
    FilterChainProxy springSecurityFilterChain=new FilterChainProxy(new DefaultSecurityFilterChain(AnyRequestMatcher.INSTANCE,toFind));
    this.request.getServletContext().setAttribute(BeanIds.SPRING_SECURITY_FILTER_CHAIN,springSecurityFilterChain);
    assertThat(WebTestUtils.findFilter(this.request,toFind.getClass())).isEqualTo(toFind);
  }
  @Test public void findFilterExplicitWithSecurityFilterInContext(){
    loadConfig(SecurityConfigWithDefaults.class);
    CsrfFilter toFind=new CsrfFilter(new HttpSessionCsrfTokenRepository());
    FilterChainProxy springSecurityFilterChain=new FilterChainProxy(new DefaultSecurityFilterChain(AnyRequestMatcher.INSTANCE,toFind));
    this.request.getServletContext().setAttribute(BeanIds.SPRING_SECURITY_FILTER_CHAIN,springSecurityFilterChain);
    assertThat(WebTestUtils.findFilter(this.request,toFind.getClass())).isSameAs(toFind);
  }
  private void loadConfig(  Class<?> config){
    AnnotationConfigWebApplicationContext context=new AnnotationConfigWebApplicationContext();
    context.register(config);
    context.refresh();
    this.context=context;
    this.request.getServletContext().setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,context);
  }
@Configuration static class Config {
  }
@EnableWebSecurity static class SecurityNoCsrfConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().disable();
    }
  }
@EnableWebSecurity static class CustomSecurityConfig extends WebSecurityConfigurerAdapter {
    static CsrfTokenRepository CSRF_REPO;
    static SecurityContextRepository CONTEXT_REPO;
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().csrfTokenRepository(CSRF_REPO).and().securityContext().securityContextRepository(CONTEXT_REPO);
    }
  }
@EnableWebSecurity static class PartialSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override public void configure(    HttpSecurity http) throws Exception {
      http.antMatcher("/willnotmatchthis");
    }
  }
@Configuration static class NoSecurityConfig {
  }
@EnableWebSecurity static class SecurityConfigWithDefaults extends WebSecurityConfigurerAdapter {
  }
}
