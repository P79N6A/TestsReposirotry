/** 
 * @author Rob Winch
 */
public class NamespaceJdbcUserServiceTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void jdbcUserService() throws Exception {
    this.spring.register(DataSourceConfig.class,JdbcUserServiceConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withUsername("user"));
  }
@EnableWebSecurity static class JdbcUserServiceConfig extends WebSecurityConfigurerAdapter {
    @Autowired private DataSource dataSource;
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.jdbcAuthentication().withDefaultSchema().withUser(PasswordEncodedUser.user()).dataSource(this.dataSource);
    }
  }
@Configuration static class DataSourceConfig {
    @Bean public DataSource dataSource(){
      EmbeddedDatabaseBuilder builder=new EmbeddedDatabaseBuilder();
      return builder.setType(EmbeddedDatabaseType.HSQL).build();
    }
  }
  @Test public void jdbcUserServiceCustom() throws Exception {
    this.spring.register(CustomDataSourceConfig.class,CustomJdbcUserServiceSampleConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withUsername("user").withRoles("DBA","USER"));
  }
@EnableWebSecurity static class CustomJdbcUserServiceSampleConfig extends WebSecurityConfigurerAdapter {
    @Autowired private DataSource dataSource;
    protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.jdbcAuthentication().dataSource(this.dataSource).userCache(new CustomUserCache()).usersByUsernameQuery("select principal,credentials,true from users where principal = ?").authoritiesByUsernameQuery("select principal,role from roles where principal = ?").groupAuthoritiesByUsername(JdbcUserDetailsManager.DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY).rolePrefix("ROLE_");
    }
static class CustomUserCache implements UserCache {
      @Override public UserDetails getUserFromCache(      String username){
        return null;
      }
      @Override public void putUserInCache(      UserDetails user){
      }
      @Override public void removeUserFromCache(      String username){
      }
    }
  }
@Configuration static class CustomDataSourceConfig {
    @Bean public DataSource dataSource(){
      EmbeddedDatabaseBuilder builder=new EmbeddedDatabaseBuilder().addScript("CustomJdbcUserServiceSampleConfig.sql");
      return builder.setType(EmbeddedDatabaseType.HSQL).build();
    }
  }
}
