/** 
 * @author Rob Winch
 */
public class NamespacePasswordEncoderTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void passwordEncoderRefWithInMemory() throws Exception {
    this.spring.register(PasswordEncoderWithInMemoryConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated());
  }
@EnableWebSecurity static class PasswordEncoderWithInMemoryConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      BCryptPasswordEncoder encoder=new BCryptPasswordEncoder();
      auth.inMemoryAuthentication().withUser("user").password(encoder.encode("password")).roles("USER").and().passwordEncoder(encoder);
    }
  }
  @Test public void passwordEncoderRefWithJdbc() throws Exception {
    this.spring.register(PasswordEncoderWithJdbcConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated());
  }
@EnableWebSecurity static class PasswordEncoderWithJdbcConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      BCryptPasswordEncoder encoder=new BCryptPasswordEncoder();
      auth.jdbcAuthentication().withDefaultSchema().dataSource(dataSource()).withUser("user").password(encoder.encode("password")).roles("USER").and().passwordEncoder(encoder);
    }
    @Bean public DataSource dataSource(){
      EmbeddedDatabaseBuilder builder=new EmbeddedDatabaseBuilder();
      return builder.setType(EmbeddedDatabaseType.HSQL).build();
    }
  }
  @Test public void passwordEncoderRefWithUserDetailsService() throws Exception {
    this.spring.register(PasswordEncoderWithUserDetailsServiceConfig.class).autowire();
    this.mockMvc.perform(formLogin()).andExpect(authenticated());
  }
@EnableWebSecurity static class PasswordEncoderWithUserDetailsServiceConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      BCryptPasswordEncoder encoder=new BCryptPasswordEncoder();
      UserDetails user=User.withUsername("user").passwordEncoder(encoder::encode).password("password").roles("USER").build();
      InMemoryUserDetailsManager uds=new InMemoryUserDetailsManager(user);
      auth.userDetailsService(uds).passwordEncoder(encoder);
    }
    @Bean public DataSource dataSource(){
      EmbeddedDatabaseBuilder builder=new EmbeddedDatabaseBuilder();
      return builder.setType(EmbeddedDatabaseType.HSQL).build();
    }
  }
}
