/** 
 * @author Luke Taylor
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations="classpath:org/springframework/security/config/method-security.xml") public class InterceptMethodsBeanDefinitionDecoratorTests implements ApplicationContextAware {
  @Autowired @Qualifier("target") private TestBusinessBean target;
  @Autowired @Qualifier("transactionalTarget") private TestBusinessBean transactionalTarget;
  private ApplicationContext appContext;
  @BeforeClass public static void loadContext(){
    System.setProperty("admin.role","ROLE_ADMIN");
  }
  @After public void clearContext(){
    SecurityContextHolder.clearContext();
  }
  @Test public void targetDoesntLoseApplicationListenerInterface(){
    assertThat(appContext.getBeansOfType(ApplicationListener.class)).hasSize(1);
    assertThat(appContext.getBeanNamesForType(ApplicationListener.class)).hasSize(1);
    appContext.publishEvent(new AuthenticationSuccessEvent(new TestingAuthenticationToken("user","")));
    assertThat(target).isInstanceOf(ApplicationListener.class);
  }
  @Test public void targetShouldAllowUnprotectedMethodInvocationWithNoContext(){
    target.unprotected();
  }
  @Test(expected=AuthenticationCredentialsNotFoundException.class) public void targetShouldPreventProtectedMethodInvocationWithNoContext(){
    target.doSomething();
  }
  @Test public void targetShouldAllowProtectedMethodInvocationWithCorrectRole(){
    UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken("Test","Password",AuthorityUtils.createAuthorityList("ROLE_USER"));
    SecurityContextHolder.getContext().setAuthentication(token);
    target.doSomething();
  }
  @Test(expected=AccessDeniedException.class) public void targetShouldPreventProtectedMethodInvocationWithIncorrectRole(){
    UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken("Test","Password",AuthorityUtils.createAuthorityList("ROLE_SOMEOTHERROLE"));
    SecurityContextHolder.getContext().setAuthentication(token);
    target.doSomething();
  }
  @Test(expected=AuthenticationException.class) public void transactionalMethodsShouldBeSecured() throws Exception {
    transactionalTarget.doSomething();
  }
  public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.appContext=applicationContext;
  }
}
