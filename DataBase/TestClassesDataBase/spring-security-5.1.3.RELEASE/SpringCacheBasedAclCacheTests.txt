/** 
 * Tests  {@link org.springframework.security.acls.domain.SpringCacheBasedAclCache}
 * @author Marten Deinum
 */
public class SpringCacheBasedAclCacheTests {
  private static final String TARGET_CLASS="org.springframework.security.acls.TargetObject";
  private static CacheManager cacheManager;
  @BeforeClass public static void initCacheManaer(){
    cacheManager=new ConcurrentMapCacheManager();
    cacheManager.getCache("springcasebasedacltests");
  }
  @After public void clearContext(){
    SecurityContextHolder.clearContext();
  }
  private Cache getCache(){
    Cache cache=cacheManager.getCache("springcasebasedacltests");
    cache.clear();
    return cache;
  }
  @Test(expected=IllegalArgumentException.class) public void constructorRejectsNullParameters() throws Exception {
    new SpringCacheBasedAclCache(null,null,null);
  }
  @SuppressWarnings("rawtypes") @Test public void cacheOperationsAclWithoutParent() throws Exception {
    Cache cache=getCache();
    Map realCache=(Map)cache.getNativeCache();
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(100));
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    AuditLogger auditLogger=new ConsoleAuditLogger();
    PermissionGrantingStrategy permissionGrantingStrategy=new DefaultPermissionGrantingStrategy(auditLogger);
    SpringCacheBasedAclCache myCache=new SpringCacheBasedAclCache(cache,permissionGrantingStrategy,aclAuthorizationStrategy);
    MutableAcl acl=new AclImpl(identity,Long.valueOf(1),aclAuthorizationStrategy,auditLogger);
    assertThat(realCache).isEmpty();
    myCache.putInCache(acl);
    assertThat(acl).isEqualTo(myCache.getFromCache(Long.valueOf(1)));
    assertThat(acl).isEqualTo(myCache.getFromCache(identity));
    ObjectIdentity identity2=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(101));
    MutableAcl acl2=new AclImpl(identity2,Long.valueOf(2),aclAuthorizationStrategy,new ConsoleAuditLogger());
    myCache.putInCache(acl2);
    myCache.evictFromCache(Long.valueOf(3));
    myCache.evictFromCache(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(102)));
    assertThat(realCache).hasSize(4);
    myCache.evictFromCache(Long.valueOf(1));
    assertThat(realCache).hasSize(2);
    assertThat(acl2).isEqualTo(myCache.getFromCache(Long.valueOf(2)));
    assertThat(acl2).isEqualTo(myCache.getFromCache(identity2));
    myCache.evictFromCache(identity2);
    assertThat(realCache).isEmpty();
  }
  @SuppressWarnings("rawtypes") @Test public void cacheOperationsAclWithParent() throws Exception {
    Cache cache=getCache();
    Map realCache=(Map)cache.getNativeCache();
    Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL");
    auth.setAuthenticated(true);
    SecurityContextHolder.getContext().setAuthentication(auth);
    ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(1));
    ObjectIdentity identityParent=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(2));
    AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
    AuditLogger auditLogger=new ConsoleAuditLogger();
    PermissionGrantingStrategy permissionGrantingStrategy=new DefaultPermissionGrantingStrategy(auditLogger);
    SpringCacheBasedAclCache myCache=new SpringCacheBasedAclCache(cache,permissionGrantingStrategy,aclAuthorizationStrategy);
    MutableAcl acl=new AclImpl(identity,Long.valueOf(1),aclAuthorizationStrategy,auditLogger);
    MutableAcl parentAcl=new AclImpl(identityParent,Long.valueOf(2),aclAuthorizationStrategy,auditLogger);
    acl.setParent(parentAcl);
    assertThat(realCache).isEmpty();
    myCache.putInCache(acl);
    assertThat(4).isEqualTo(realCache.size());
    AclImpl aclFromCache=(AclImpl)myCache.getFromCache(Long.valueOf(1));
    assertThat(aclFromCache).isEqualTo(acl);
    assertThat(FieldUtils.getFieldValue(aclFromCache.getParentAcl(),"aclAuthorizationStrategy")).isNotNull();
    assertThat(FieldUtils.getFieldValue(aclFromCache.getParentAcl(),"permissionGrantingStrategy")).isNotNull();
    assertThat(myCache.getFromCache(identity)).isEqualTo(acl);
    assertThat(FieldUtils.getFieldValue(aclFromCache,"aclAuthorizationStrategy")).isNotNull();
    AclImpl parentAclFromCache=(AclImpl)myCache.getFromCache(Long.valueOf(2));
    assertThat(parentAclFromCache).isEqualTo(parentAcl);
    assertThat(FieldUtils.getFieldValue(parentAclFromCache,"aclAuthorizationStrategy")).isNotNull();
    assertThat(myCache.getFromCache(identityParent)).isEqualTo(parentAcl);
  }
}
