/** 
 * @author Luke Taylor
 * @author Rob Winch
 */
public class SessionManagementFilterTests {
  @After public void clearContext(){
    SecurityContextHolder.clearContext();
  }
  @Test public void newSessionShouldNotBeCreatedIfSessionExistsAndUserIsNotAuthenticated() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo);
    HttpServletRequest request=new MockHttpServletRequest();
    String sessionId=request.getSession().getId();
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    assertThat(request.getSession().getId()).isEqualTo(sessionId);
  }
  @Test public void strategyIsNotInvokedIfSecurityContextAlreadyExistsForRequest() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionAuthenticationStrategy strategy=mock(SessionAuthenticationStrategy.class);
    when(repo.containsContext(any(HttpServletRequest.class))).thenReturn(true);
    SessionManagementFilter filter=new SessionManagementFilter(repo,strategy);
    HttpServletRequest request=new MockHttpServletRequest();
    authenticateUser();
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    verifyZeroInteractions(strategy);
  }
  @Test public void strategyIsNotInvokedIfAuthenticationIsNull() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionAuthenticationStrategy strategy=mock(SessionAuthenticationStrategy.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo,strategy);
    HttpServletRequest request=new MockHttpServletRequest();
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    verifyZeroInteractions(strategy);
  }
  @Test public void strategyIsInvokedIfUserIsNewlyAuthenticated() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionAuthenticationStrategy strategy=mock(SessionAuthenticationStrategy.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo,strategy);
    HttpServletRequest request=new MockHttpServletRequest();
    authenticateUser();
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    verify(strategy).onAuthentication(any(Authentication.class),any(HttpServletRequest.class),any(HttpServletResponse.class));
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    verifyNoMoreInteractions(strategy);
  }
  @Test public void strategyFailureInvokesFailureHandler() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionAuthenticationStrategy strategy=mock(SessionAuthenticationStrategy.class);
    AuthenticationFailureHandler failureHandler=mock(AuthenticationFailureHandler.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo,strategy);
    filter.setAuthenticationFailureHandler(failureHandler);
    HttpServletRequest request=new MockHttpServletRequest();
    HttpServletResponse response=new MockHttpServletResponse();
    FilterChain fc=mock(FilterChain.class);
    authenticateUser();
    SessionAuthenticationException exception=new SessionAuthenticationException("Failure");
    doThrow(exception).when(strategy).onAuthentication(SecurityContextHolder.getContext().getAuthentication(),request,response);
    filter.doFilter(request,response,fc);
    verifyZeroInteractions(fc);
    verify(failureHandler).onAuthenticationFailure(request,response,exception);
  }
  @Test public void responseIsRedirectedToTimeoutUrlIfSetAndSessionIsInvalid() throws Exception {
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionAuthenticationStrategy strategy=mock(SessionAuthenticationStrategy.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo,strategy);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestedSessionId("xxx");
    request.setRequestedSessionIdValid(false);
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,new MockFilterChain());
    assertThat(response.getRedirectedUrl()).isNull();
    request=new MockHttpServletRequest();
    request.setRequestedSessionId("xxx");
    request.setRequestedSessionIdValid(false);
    SimpleRedirectInvalidSessionStrategy iss=new SimpleRedirectInvalidSessionStrategy("/timedOut");
    iss.setCreateNewSession(true);
    filter.setInvalidSessionStrategy(iss);
    FilterChain fc=mock(FilterChain.class);
    filter.doFilter(request,response,fc);
    verifyZeroInteractions(fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/timedOut");
  }
  @Test public void customAuthenticationTrustResolver() throws Exception {
    AuthenticationTrustResolver trustResolver=mock(AuthenticationTrustResolver.class);
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo);
    filter.setTrustResolver(trustResolver);
    HttpServletRequest request=new MockHttpServletRequest();
    authenticateUser();
    filter.doFilter(request,new MockHttpServletResponse(),new MockFilterChain());
    verify(trustResolver).isAnonymous(any(Authentication.class));
  }
  @Test(expected=IllegalArgumentException.class) public void setTrustResolverNull(){
    SecurityContextRepository repo=mock(SecurityContextRepository.class);
    SessionManagementFilter filter=new SessionManagementFilter(repo);
    filter.setTrustResolver(null);
  }
  private void authenticateUser(){
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user","pass"));
  }
}
