@EnableWebFlux @EnableWebFluxSecurity static class CustomJwtAuthenticationConverterConfig {
  @Bean SecurityWebFilterChain springSecurity(  ServerHttpSecurity http) throws Exception {
    http.authorizeExchange().anyExchange().hasAuthority("message:read").and().oauth2ResourceServer().jwt().jwtAuthenticationConverter(jwtAuthenticationConverter()).publicKey(publicKey());
    return http.build();
  }
  @Bean Converter<Jwt,Mono<AbstractAuthenticationToken>> jwtAuthenticationConverter(){
    JwtAuthenticationConverter converter=new JwtAuthenticationConverter(){
      @Override protected Collection<GrantedAuthority> extractAuthorities(      Jwt jwt){
        String[] claims=((String)jwt.getClaims().get("scope")).split(" ");
        return Stream.of(claims).map(SimpleGrantedAuthority::new).collect(Collectors.toList());
      }
    }
;
    return new ReactiveJwtAuthenticationConverterAdapter(converter);
  }
}
