/** 
 * @author Rob Winch
 * @since 5.1
 */
public class OidcTokenValidatorTests {
  private ClientRegistration.Builder registration=TestClientRegistrations.clientRegistration();
  private Map<String,Object> claims=new HashMap<>();
  private Instant issuedAt=Instant.now();
  private Instant expiresAt=Instant.now().plusSeconds(3600);
  @Before public void setup(){
    this.claims.put(IdTokenClaimNames.ISS,"https://issuer.example.com");
    this.claims.put(IdTokenClaimNames.SUB,"rob");
    this.claims.put(IdTokenClaimNames.AUD,Arrays.asList("client-id"));
  }
  @Test public void validateIdTokenWhenValidThenNoException(){
    assertThatCode(() -> validateIdToken()).doesNotThrowAnyException();
  }
  @Test public void validateIdTokenWhenIssuerNullThenException(){
    this.claims.remove(IdTokenClaimNames.ISS);
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenSubNullThenException(){
    this.claims.remove(IdTokenClaimNames.SUB);
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenAudNullThenException(){
    this.claims.remove(IdTokenClaimNames.AUD);
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenIssuedAtNullThenException(){
    this.issuedAt=null;
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenExpiresAtNullThenException(){
    this.expiresAt=null;
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenAudMultipleAndAzpNullThenException(){
    this.claims.put(IdTokenClaimNames.AUD,Arrays.asList("client-id","other"));
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenAzpNotClientIdThenException(){
    this.claims.put(IdTokenClaimNames.AZP,"other");
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenMulitpleAudAzpClientIdThenNoException(){
    this.claims.put(IdTokenClaimNames.AUD,Arrays.asList("client-id","other"));
    this.claims.put(IdTokenClaimNames.AZP,"client-id");
    assertThatCode(() -> validateIdToken()).doesNotThrowAnyException();
  }
  @Test public void validateIdTokenWhenExpiredThenException(){
    this.issuedAt=Instant.now().minus(Duration.ofMinutes(1));
    this.expiresAt=this.issuedAt.plus(Duration.ofSeconds(1));
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  @Test public void validateIdTokenWhenIssuedAtWayInFutureThenException(){
    this.issuedAt=Instant.now().plus(Duration.ofMinutes(5));
    this.expiresAt=this.issuedAt.plus(Duration.ofSeconds(1));
    assertThatCode(() -> validateIdToken()).isInstanceOf(OAuth2AuthenticationException.class);
  }
  private void validateIdToken(){
    OidcIdToken token=new OidcIdToken("token123",this.issuedAt,this.expiresAt,this.claims);
    OidcTokenValidator.validateIdToken(token,this.registration.build());
  }
}
