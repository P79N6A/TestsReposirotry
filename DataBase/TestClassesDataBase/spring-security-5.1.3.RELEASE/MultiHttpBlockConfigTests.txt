/** 
 * Tests scenarios with multiple &lt;http&gt; elements.
 * @author Luke Taylor
 */
public class MultiHttpBlockConfigTests {
  private static final String CONFIG_LOCATION_PREFIX="classpath:org/springframework/security/config/http/MultiHttpBlockConfigTests";
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void requestWhenUsingMutuallyExclusiveHttpElementsThenIsRoutedAccordingly() throws Exception {
    this.spring.configLocations(this.xml("DistinctHttpElements")).autowire();
    this.mvc.perform(MockMvcRequestBuilders.get("/first").with(httpBasic("user","password"))).andExpect(status().isOk());
    this.mvc.perform(post("/second/login").param("username","user").param("password","password").with(csrf())).andExpect(status().isFound()).andExpect(redirectedUrl("/"));
  }
  @Test public void configureWhenUsingDuplicateHttpElementsThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("IdenticalHttpElements")).autowire()).isInstanceOf(BeanCreationException.class).hasCauseInstanceOf(IllegalArgumentException.class);
  }
  @Test public void configureWhenUsingIndenticallyPatternedHttpElementsThenThrowsWiringException(){
    assertThatCode(() -> this.spring.configLocations(this.xml("IdenticallyPatternedHttpElements")).autowire()).isInstanceOf(BeanCreationException.class).hasCauseInstanceOf(IllegalArgumentException.class);
  }
  /** 
 * SEC-1937
 */
  @Test public void requestWhenTargettingAuthenticationManagersToCorrespondingHttpElementsThenAuthenticationProceeds() throws Exception {
    this.spring.configLocations(this.xml("Sec1937")).autowire();
    this.mvc.perform(get("/first").with(httpBasic("first","password")).with(csrf())).andExpect(status().isOk());
    this.mvc.perform(post("/second/login").param("username","second").param("password","password").with(csrf())).andExpect(redirectedUrl("/"));
  }
@Controller static class BasicController {
    @GetMapping("/first") public String first(){
      return "ok";
    }
  }
  private String xml(  String configName){
    return CONFIG_LOCATION_PREFIX + "-" + configName+ ".xml";
  }
}
