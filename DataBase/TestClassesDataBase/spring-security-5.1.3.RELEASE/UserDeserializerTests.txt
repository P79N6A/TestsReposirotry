/** 
 * @author Jitendra Singh
 * @since 4.2
 */
public class UserDeserializerTests extends AbstractMixinTests {
  public static final String USER_PASSWORD="\"1234\"";
  public static final String USER_JSON="{" + "\"@class\": \"org.springframework.security.core.userdetails.User\", " + "\"username\": \"admin\","+ " \"password\": " + USER_PASSWORD + ", "+ "\"accountNonExpired\": true, "+ "\"accountNonLocked\": true, "+ "\"credentialsNonExpired\": true, "+ "\"enabled\": true, "+ "\"authorities\": "+ SimpleGrantedAuthorityMixinTests.AUTHORITIES_SET_JSON+ "}";
  @Test public void serializeUserTest() throws JsonProcessingException, JSONException {
    User user=createDefaultUser();
    String userJson=mapper.writeValueAsString(user);
    JSONAssert.assertEquals(userWithPasswordJson(user.getPassword()),userJson,true);
  }
  @Test public void serializeUserWithoutAuthority() throws JsonProcessingException, JSONException {
    User user=new User("admin","1234",Collections.<GrantedAuthority>emptyList());
    String userJson=mapper.writeValueAsString(user);
    JSONAssert.assertEquals(userWithNoAuthoritiesJson(),userJson,true);
  }
  @Test(expected=IllegalArgumentException.class) public void deserializeUserWithNullPasswordEmptyAuthorityTest() throws IOException {
    String userJsonWithoutPasswordString=USER_JSON.replace(SimpleGrantedAuthorityMixinTests.AUTHORITIES_SET_JSON,"[]");
    mapper.readValue(userJsonWithoutPasswordString,User.class);
  }
  @Test public void deserializeUserWithNullPasswordNoAuthorityTest() throws Exception {
    String userJsonWithoutPasswordString=removeNode(userWithNoAuthoritiesJson(),mapper,"password");
    User user=mapper.readValue(userJsonWithoutPasswordString,User.class);
    assertThat(user).isNotNull();
    assertThat(user.getUsername()).isEqualTo("admin");
    assertThat(user.getPassword()).isNull();
    assertThat(user.getAuthorities()).isEmpty();
    assertThat(user.isEnabled()).isEqualTo(true);
  }
  @Test(expected=IllegalArgumentException.class) public void deserializeUserWithNoClassIdInAuthoritiesTest() throws Exception {
    String userJson=USER_JSON.replace(SimpleGrantedAuthorityMixinTests.AUTHORITIES_SET_JSON,"[{\"authority\": \"ROLE_USER\"}]");
    mapper.readValue(userJson,User.class);
  }
  @Test public void deserializeUserWithClassIdInAuthoritiesTest() throws IOException {
    User user=mapper.readValue(userJson(),User.class);
    assertThat(user).isNotNull();
    assertThat(user.getUsername()).isEqualTo("admin");
    assertThat(user.getPassword()).isEqualTo("1234");
    assertThat(user.getAuthorities()).hasSize(1).contains(new SimpleGrantedAuthority("ROLE_USER"));
  }
  private String removeNode(  String json,  ObjectMapper mapper,  String toRemove) throws Exception {
    ObjectNode node=mapper.getFactory().createParser(json).readValueAsTree();
    node.remove(toRemove);
    String result=mapper.writeValueAsString(node);
    JSONAssert.assertNotEquals(json,result,false);
    return result;
  }
  public static String userJson(){
    return USER_JSON;
  }
  public static String userWithPasswordJson(  String password){
    return userJson().replaceAll(Pattern.quote(USER_PASSWORD),"\"" + password + "\"");
  }
  public static String userWithNoAuthoritiesJson(){
    return userJson().replace(SimpleGrantedAuthorityMixinTests.AUTHORITIES_SET_JSON,SimpleGrantedAuthorityMixinTests.NO_AUTHORITIES_SET_JSON);
  }
}
