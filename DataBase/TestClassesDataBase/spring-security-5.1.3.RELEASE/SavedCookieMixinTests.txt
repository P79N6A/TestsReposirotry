/** 
 * @author Jitendra Singh.
 */
public class SavedCookieMixinTests extends AbstractMixinTests {
  private static final String COOKIE_JSON="{" + "\"@class\": \"org.springframework.security.web.savedrequest.SavedCookie\", " + "\"name\": \"SESSION\", "+ "\"value\": \"123456789\", "+ "\"comment\": null, "+ "\"maxAge\": -1, "+ "\"path\": null, "+ "\"secure\":false, "+ "\"version\": 0, "+ "\"domain\": null"+ "}";
  private static final String COOKIES_JSON="[\"java.util.ArrayList\", [" + COOKIE_JSON + "]]";
  @Test public void serializeWithDefaultConfigurationTest() throws JsonProcessingException, JSONException {
    SavedCookie savedCookie=new SavedCookie(new Cookie("SESSION","123456789"));
    String actualJson=mapper.writeValueAsString(savedCookie);
    JSONAssert.assertEquals(COOKIE_JSON,actualJson,true);
  }
  @Test public void serializeWithOverrideConfigurationTest() throws JsonProcessingException, JSONException {
    SavedCookie savedCookie=new SavedCookie(new Cookie("SESSION","123456789"));
    mapper.setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.PUBLIC_ONLY).setVisibility(PropertyAccessor.GETTER,JsonAutoDetect.Visibility.ANY);
    String actualJson=mapper.writeValueAsString(savedCookie);
    JSONAssert.assertEquals(COOKIE_JSON,actualJson,true);
  }
  @Test public void serializeSavedCookieWithList() throws JsonProcessingException, JSONException {
    List<SavedCookie> savedCookies=new ArrayList<>();
    savedCookies.add(new SavedCookie(new Cookie("SESSION","123456789")));
    String actualJson=mapper.writeValueAsString(savedCookies);
    JSONAssert.assertEquals(COOKIES_JSON,actualJson,true);
  }
  @Test @SuppressWarnings("unchecked") public void deserializeSavedCookieWithList() throws IOException, JSONException {
    List<SavedCookie> savedCookies=(List<SavedCookie>)mapper.readValue(COOKIES_JSON,Object.class);
    assertThat(savedCookies).isNotNull().hasSize(1);
    assertThat(savedCookies.get(0).getName()).isEqualTo("SESSION");
    assertThat(savedCookies.get(0).getValue()).isEqualTo("123456789");
  }
  @Test public void deserializeSavedCookieJsonTest() throws IOException {
    SavedCookie savedCookie=(SavedCookie)mapper.readValue(COOKIE_JSON,Object.class);
    assertThat(savedCookie).isNotNull();
    assertThat(savedCookie.getName()).isEqualTo("SESSION");
    assertThat(savedCookie.getValue()).isEqualTo("123456789");
    assertThat(savedCookie.isSecure()).isEqualTo(false);
    assertThat(savedCookie.getVersion()).isZero();
    assertThat(savedCookie.getComment()).isNull();
  }
}
