/** 
 * Tests  {@link DigestAuthenticationEntryPoint}.
 * @author Ben Alex
 */
public class DigestAuthenticationEntryPointTests {
  private void checkNonceValid(  String nonce){
    assertThat(Base64.isArrayByteBase64(nonce.getBytes())).isTrue();
    String decodedNonce=new String(Base64.decodeBase64(nonce.getBytes()));
    String[] nonceTokens=StringUtils.delimitedListToStringArray(decodedNonce,":");
    assertThat(nonceTokens).hasSize(2);
    String expectedNonceSignature=DigestUtils.md5Hex(nonceTokens[0] + ":" + "key");
    assertThat(nonceTokens[1]).isEqualTo(expectedNonceSignature);
  }
  @Test public void testDetectsMissingKey() throws Exception {
    DigestAuthenticationEntryPoint ep=new DigestAuthenticationEntryPoint();
    ep.setRealmName("realm");
    try {
      ep.afterPropertiesSet();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
      assertThat(expected.getMessage()).isEqualTo("key must be specified");
    }
  }
  @Test public void testDetectsMissingRealmName() throws Exception {
    DigestAuthenticationEntryPoint ep=new DigestAuthenticationEntryPoint();
    ep.setKey("dcdc");
    ep.setNonceValiditySeconds(12);
    try {
      ep.afterPropertiesSet();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
      assertThat(expected.getMessage()).isEqualTo("realmName must be specified");
    }
  }
  @Test public void testGettersSetters(){
    DigestAuthenticationEntryPoint ep=new DigestAuthenticationEntryPoint();
    assertThat(ep.getNonceValiditySeconds()).isEqualTo(300);
    ep.setRealmName("realm");
    assertThat(ep.getRealmName()).isEqualTo("realm");
    ep.setKey("dcdc");
    assertThat(ep.getKey()).isEqualTo("dcdc");
    ep.setNonceValiditySeconds(12);
    assertThat(ep.getNonceValiditySeconds()).isEqualTo(12);
  }
  @Test public void testNormalOperation() throws Exception {
    DigestAuthenticationEntryPoint ep=new DigestAuthenticationEntryPoint();
    ep.setRealmName("hello");
    ep.setKey("key");
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/some_path");
    MockHttpServletResponse response=new MockHttpServletResponse();
    ep.afterPropertiesSet();
    ep.commence(request,response,new DisabledException("foobar"));
    assertThat(response.getStatus()).isEqualTo(401);
    assertThat(response.getHeader("WWW-Authenticate").toString()).startsWith("Digest ");
    String header=response.getHeader("WWW-Authenticate").toString().substring(7);
    String[] headerEntries=StringUtils.commaDelimitedListToStringArray(header);
    Map<String,String> headerMap=DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries,"=","\"");
    assertThat(headerMap.get("realm")).isEqualTo("hello");
    assertThat(headerMap.get("qop")).isEqualTo("auth");
    assertThat(headerMap.get("stale")).isNull();
    checkNonceValid(headerMap.get("nonce"));
  }
  @Test public void testOperationIfDueToStaleNonce() throws Exception {
    DigestAuthenticationEntryPoint ep=new DigestAuthenticationEntryPoint();
    ep.setRealmName("hello");
    ep.setKey("key");
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/some_path");
    MockHttpServletResponse response=new MockHttpServletResponse();
    ep.afterPropertiesSet();
    ep.commence(request,response,new NonceExpiredException("expired nonce"));
    assertThat(response.getStatus()).isEqualTo(401);
    assertThat(response.getHeader("WWW-Authenticate").toString()).startsWith("Digest ");
    String header=response.getHeader("WWW-Authenticate").toString().substring(7);
    String[] headerEntries=StringUtils.commaDelimitedListToStringArray(header);
    Map<String,String> headerMap=DigestAuthUtils.splitEachArrayElementAndCreateMap(headerEntries,"=","\"");
    assertThat(headerMap.get("realm")).isEqualTo("hello");
    assertThat(headerMap.get("qop")).isEqualTo("auth");
    assertThat(headerMap.get("stale")).isEqualTo("true");
    checkNonceValid(headerMap.get("nonce"));
  }
}
