/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class AuthenticatedReactiveAuthorizationManagerTests {
  @Mock Authentication authentication;
  AuthenticatedReactiveAuthorizationManager<Object> manager=AuthenticatedReactiveAuthorizationManager.authenticated();
  @Test public void checkWhenAuthenticatedThenReturnTrue(){
    when(authentication.isAuthenticated()).thenReturn(true);
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isTrue();
  }
  @Test public void checkWhenNotAuthenticatedThenReturnFalse(){
    boolean granted=manager.check(Mono.just(authentication),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenEmptyThenReturnFalse(){
    boolean granted=manager.check(Mono.empty(),null).block().isGranted();
    assertThat(granted).isFalse();
  }
  @Test public void checkWhenErrorThenError(){
    Mono<AuthorizationDecision> result=manager.check(Mono.error(new RuntimeException("ooops")),null);
    StepVerifier.create(result).expectError().verify();
  }
}
