/** 
 * @author Josh Cummings
 */
public class CsrfConfigurerIgnoringRequestMatchersTests {
  @Autowired MockMvc mvc;
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test public void requestWhenIgnoringRequestMatchersThenAugmentedByConfiguredRequestMatcher() throws Exception {
    this.spring.register(IgnoringRequestMatchers.class,BasicController.class).autowire();
    this.mvc.perform(get("/path")).andExpect(status().isForbidden());
    this.mvc.perform(post("/path")).andExpect(status().isOk());
  }
@EnableWebSecurity static class IgnoringRequestMatchers extends WebSecurityConfigurerAdapter {
    RequestMatcher requestMatcher=request -> HttpMethod.POST.name().equals(request.getMethod());
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().requireCsrfProtectionMatcher(new AntPathRequestMatcher("/path")).ignoringRequestMatchers(this.requestMatcher);
    }
  }
  @Test public void requestWhenIgnoringRequestMatcherThenUnionsWithConfiguredIgnoringAntMatchers() throws Exception {
    this.spring.register(IgnoringPathsAndMatchers.class,BasicController.class).autowire();
    this.mvc.perform(put("/csrf")).andExpect(status().isForbidden());
    this.mvc.perform(post("/csrf")).andExpect(status().isOk());
    this.mvc.perform(put("/no-csrf")).andExpect(status().isOk());
  }
@EnableWebSecurity static class IgnoringPathsAndMatchers extends WebSecurityConfigurerAdapter {
    RequestMatcher requestMatcher=request -> HttpMethod.POST.name().equals(request.getMethod());
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().ignoringAntMatchers("/no-csrf").ignoringRequestMatchers(this.requestMatcher);
    }
  }
@RestController public static class BasicController {
    @RequestMapping("/path") public String path(){
      return "path";
    }
    @RequestMapping("/csrf") public String csrf(){
      return "csrf";
    }
    @RequestMapping("/no-csrf") public String noCsrf(){
      return "no-csrf";
    }
  }
}
