/** 
 * The HttpSessionEventPublisher tests
 * @author Ray Krueger
 */
public class HttpSessionEventPublisherTests {
  /** 
 * It's not that complicated so we'll just run it straight through here.
 */
  @Test public void publishedEventIsReceivedbyListener(){
    HttpSessionEventPublisher publisher=new HttpSessionEventPublisher();
    StaticWebApplicationContext context=new StaticWebApplicationContext();
    MockServletContext servletContext=new MockServletContext();
    servletContext.setAttribute(StaticWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,context);
    context.setServletContext(servletContext);
    context.registerSingleton("listener",MockApplicationListener.class,null);
    context.refresh();
    MockHttpSession session=new MockHttpSession(servletContext);
    MockApplicationListener listener=(MockApplicationListener)context.getBean("listener");
    HttpSessionEvent event=new HttpSessionEvent(session);
    publisher.sessionCreated(event);
    assertThat(listener.getCreatedEvent()).isNotNull();
    assertThat(listener.getDestroyedEvent()).isNull();
    assertThat(listener.getCreatedEvent().getSession()).isEqualTo(session);
    listener.setCreatedEvent(null);
    listener.setDestroyedEvent(null);
    publisher.sessionDestroyed(event);
    assertThat(listener.getDestroyedEvent()).isNotNull();
    assertThat(listener.getCreatedEvent()).isNull();
    assertThat(listener.getDestroyedEvent().getSession()).isEqualTo(session);
  }
  @Test public void publishedEventIsReceivedbyListenerChildContext(){
    HttpSessionEventPublisher publisher=new HttpSessionEventPublisher();
    StaticWebApplicationContext context=new StaticWebApplicationContext();
    MockServletContext servletContext=new MockServletContext();
    servletContext.setAttribute("org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher",context);
    context.setServletContext(servletContext);
    context.registerSingleton("listener",MockApplicationListener.class,null);
    context.refresh();
    MockHttpSession session=new MockHttpSession(servletContext);
    MockApplicationListener listener=(MockApplicationListener)context.getBean("listener");
    HttpSessionEvent event=new HttpSessionEvent(session);
    publisher.sessionCreated(event);
    assertThat(listener.getCreatedEvent()).isNotNull();
    assertThat(listener.getDestroyedEvent()).isNull();
    assertThat(listener.getCreatedEvent().getSession()).isEqualTo(session);
    listener.setCreatedEvent(null);
    listener.setDestroyedEvent(null);
    publisher.sessionDestroyed(event);
    assertThat(listener.getDestroyedEvent()).isNotNull();
    assertThat(listener.getCreatedEvent()).isNull();
    assertThat(listener.getDestroyedEvent().getSession()).isEqualTo(session);
  }
  @Test(expected=IllegalStateException.class) public void sessionCreatedNullApplicationContext(){
    HttpSessionEventPublisher publisher=new HttpSessionEventPublisher();
    MockServletContext servletContext=new MockServletContext();
    MockHttpSession session=new MockHttpSession(servletContext);
    HttpSessionEvent event=new HttpSessionEvent(session);
    publisher.sessionCreated(event);
  }
  @Test(expected=IllegalStateException.class) public void sessionDestroyedNullApplicationContext(){
    HttpSessionEventPublisher publisher=new HttpSessionEventPublisher();
    MockServletContext servletContext=new MockServletContext();
    MockHttpSession session=new MockHttpSession(servletContext);
    HttpSessionEvent event=new HttpSessionEvent(session);
    publisher.sessionDestroyed(event);
  }
}
