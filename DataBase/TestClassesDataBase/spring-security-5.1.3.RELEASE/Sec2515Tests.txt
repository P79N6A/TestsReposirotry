/** 
 * @author Joe Grandja
 */
public class Sec2515Tests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Test(expected=FatalBeanException.class) public void loadConfigWhenAuthenticationManagerNotConfiguredAndRegisterBeanThenThrowFatalBeanException() throws Exception {
    this.spring.register(StackOverflowSecurityConfig.class).autowire();
  }
@EnableWebSecurity static class StackOverflowSecurityConfig extends WebSecurityConfigurerAdapter {
    @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception {
      return super.authenticationManagerBean();
    }
  }
  @Test(expected=FatalBeanException.class) public void loadConfigWhenAuthenticationManagerNotConfiguredAndRegisterBeanCustomNameThenThrowFatalBeanException() throws Exception {
    this.spring.register(CustomBeanNameStackOverflowSecurityConfig.class).autowire();
  }
@EnableWebSecurity static class CustomBeanNameStackOverflowSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override @Bean(name="custom") public AuthenticationManager authenticationManagerBean() throws Exception {
      return super.authenticationManagerBean();
    }
  }
  @Test public void loadConfigWhenChildClassLoaderSetThenContextLoads() throws Exception {
    CanLoadWithChildConfig.AUTHENTICATION_MANAGER=mock(AuthenticationManager.class);
    this.spring.register(CanLoadWithChildConfig.class);
    AnnotationConfigWebApplicationContext context=(AnnotationConfigWebApplicationContext)this.spring.getContext();
    context.setClassLoader(new URLClassLoader(new URL[0],context.getClassLoader()));
    this.spring.autowire();
    assertThat(this.spring.getContext().getBean(AuthenticationManager.class)).isNotNull();
  }
@EnableWebSecurity static class CanLoadWithChildConfig extends WebSecurityConfigurerAdapter {
    static AuthenticationManager AUTHENTICATION_MANAGER;
    @Bean public AuthenticationManager authenticationManager(){
      return AUTHENTICATION_MANAGER;
    }
  }
  @Test public void loadConfigWhenAuthenticationManagerConfiguredAndRegisterBeanThenContextLoads() throws Exception {
    this.spring.register(SecurityConfig.class).autowire();
  }
@EnableWebSecurity static class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception {
      return super.authenticationManagerBean();
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication();
    }
  }
}
