/** 
 * @author Luke Taylor
 * @author Rob Winch
 */
public class HttpSessionSecurityContextRepositoryTests {
  private final TestingAuthenticationToken testToken=new TestingAuthenticationToken("someone","passwd","ROLE_A");
  @After public void tearDown(){
    SecurityContextHolder.clearContext();
  }
  @Test public void startAsyncDisablesSaveOnCommit() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    HttpServletRequest request=mock(HttpServletRequest.class);
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    repo.loadContext(holder);
    reset(request);
    holder.getRequest().startAsync();
    holder.getResponse().sendError(HttpServletResponse.SC_BAD_REQUEST);
    verify(request,never()).getSession(anyBoolean());
    verify(request,never()).getSession();
  }
  @Test public void startAsyncRequestResponseDisablesSaveOnCommit() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    HttpServletRequest request=mock(HttpServletRequest.class);
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    repo.loadContext(holder);
    reset(request);
    holder.getRequest().startAsync(request,response);
    holder.getResponse().sendError(HttpServletResponse.SC_BAD_REQUEST);
    verify(request,never()).getSession(anyBoolean());
    verify(request,never()).getSession();
  }
  @Test public void sessionIsntCreatedIfContextDoesntChange() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    assertThat(request.getSession(false)).isNull();
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    assertThat(request.getSession(false)).isNull();
  }
  @Test public void sessionIsntCreatedIfAllowSessionCreationIsFalse() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setAllowSessionCreation(false);
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    context.setAuthentication(testToken);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    assertThat(request.getSession(false)).isNull();
  }
  @Test public void existingContextIsSuccessFullyLoadedFromSessionAndSavedBack() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContextHolder.getContext().setAuthentication(testToken);
    request.getSession().setAttribute("imTheContext",SecurityContextHolder.getContext());
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    assertThat(context).isNotNull();
    assertThat(context.getAuthentication()).isEqualTo(testToken);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(context);
  }
  @Test public void saveContextCallsSetAttributeIfContextIsModifiedDirectlyDuringRequest() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContext ctx=SecurityContextHolder.getContext();
    ctx.setAuthentication(testToken);
    HttpSession session=mock(HttpSession.class);
    when(session.getAttribute(SPRING_SECURITY_CONTEXT_KEY)).thenReturn(ctx);
    request.setSession(session);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    assertThat(repo.loadContext(holder)).isSameAs(ctx);
    SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("someone","passwd","ROLE_B"));
    repo.saveContext(ctx,holder.getRequest(),holder.getResponse());
    verify(session).setAttribute(SPRING_SECURITY_CONTEXT_KEY,ctx);
  }
  @Test public void nonSecurityContextInSessionIsIgnored() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContextHolder.getContext().setAuthentication(testToken);
    request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,"NotASecurityContextInstance");
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    assertThat(context).isNotNull();
    assertThat(context.getAuthentication()).isNull();
  }
  @Test public void sessionIsCreatedAndContextStoredWhenContextChanges() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    assertThat(request.getSession(false)).isNull();
    context.setAuthentication(testToken);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    assertThat(request.getSession(false)).isNotNull();
    assertThat(request.getSession().getAttribute(SPRING_SECURITY_CONTEXT_KEY)).isEqualTo(context);
  }
  @Test public void redirectCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().sendRedirect("/doesntmatter");
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void sendErrorCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().sendError(404);
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void flushBufferCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().flushBuffer();
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void writerFlushCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getWriter().flush();
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void writerCloseCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getWriter().close();
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void outputStreamFlushCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getOutputStream().flush();
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void outputStreamCloseCausesEarlySaveOfContext() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getOutputStream().close();
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
    assertThat(((SaveContextOnUpdateOrErrorResponseWrapper)holder.getResponse()).isContextSaved()).isTrue();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isEqualTo(SecurityContextHolder.getContext());
  }
  @Test public void outputStreamCloseDelegate() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    HttpServletResponse response=mock(HttpServletResponse.class);
    ServletOutputStream outputstream=mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputstream);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getOutputStream().close();
    verify(outputstream).close();
  }
  @Test public void outputStreamFlushesDelegate() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    HttpServletResponse response=mock(HttpServletResponse.class);
    ServletOutputStream outputstream=mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputstream);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    holder.getResponse().getOutputStream().flush();
    verify(outputstream).flush();
  }
  @Test public void noSessionIsCreatedIfSessionWasInvalidatedDuringTheRequest() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.getSession();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(testToken);
    request.getSession().invalidate();
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession(false)).isNull();
  }
  @Test public void noSessionIsCreatedIfAnonymousTokenIsUsed() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContextHolder.setContext(repo.loadContext(holder));
    SecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken("key","anon",AuthorityUtils.createAuthorityList("ANON")));
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession(false)).isNull();
  }
  @Test public void contextIsRemovedFromSessionIfCurrentContextIsAnonymous() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContext ctxInSession=SecurityContextHolder.createEmptyContext();
    ctxInSession.setAuthentication(testToken);
    request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,ctxInSession);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    repo.loadContext(holder);
    SecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken("x","x",testToken.getAuthorities()));
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute(SPRING_SECURITY_CONTEXT_KEY)).isNull();
  }
  @Test public void contextIsRemovedFromSessionIfCurrentContextIsEmpty() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setSpringSecurityContextKey("imTheContext");
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContext ctxInSession=SecurityContextHolder.createEmptyContext();
    ctxInSession.setAuthentication(testToken);
    request.getSession().setAttribute("imTheContext",ctxInSession);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    repo.loadContext(holder);
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute("imTheContext")).isNull();
  }
  @Test public void contextIsNotRemovedFromSessionIfContextBeforeExecutionDefault() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    repo.loadContext(holder);
    SecurityContext ctxInSession=SecurityContextHolder.createEmptyContext();
    ctxInSession.setAuthentication(testToken);
    request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,ctxInSession);
    SecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken("x","x",AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS")));
    repo.saveContext(SecurityContextHolder.getContext(),holder.getRequest(),holder.getResponse());
    assertThat(ctxInSession).isSameAs(request.getSession().getAttribute(SPRING_SECURITY_CONTEXT_KEY));
  }
  @Test public void logoutInvalidateSessionFalseFails() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContext ctxInSession=SecurityContextHolder.createEmptyContext();
    ctxInSession.setAuthentication(testToken);
    request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,ctxInSession);
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    repo.loadContext(holder);
    ctxInSession.setAuthentication(null);
    repo.saveContext(ctxInSession,holder.getRequest(),holder.getResponse());
    assertThat(request.getSession().getAttribute(SPRING_SECURITY_CONTEXT_KEY)).isNull();
  }
  @Test @SuppressWarnings("deprecation") public void sessionDisableUrlRewritingPreventsSessionIdBeingWrittenToUrl() throws Exception {
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    final String sessionId=";jsessionid=id";
    MockHttpServletResponse response=new MockHttpServletResponse(){
      @Override public String encodeRedirectUrl(      String url){
        return url + sessionId;
      }
      @Override public String encodeRedirectURL(      String url){
        return url + sessionId;
      }
      @Override public String encodeUrl(      String url){
        return url + sessionId;
      }
      @Override public String encodeURL(      String url){
        return url + sessionId;
      }
    }
;
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    repo.loadContext(holder);
    String url="/aUrl";
    assertThat(holder.getResponse().encodeRedirectUrl(url)).isEqualTo(url + sessionId);
    assertThat(holder.getResponse().encodeRedirectURL(url)).isEqualTo(url + sessionId);
    assertThat(holder.getResponse().encodeUrl(url)).isEqualTo(url + sessionId);
    assertThat(holder.getResponse().encodeURL(url)).isEqualTo(url + sessionId);
    repo.setDisableUrlRewriting(true);
    holder=new HttpRequestResponseHolder(request,response);
    repo.loadContext(holder);
    assertThat(holder.getResponse().encodeRedirectUrl(url)).isEqualTo(url);
    assertThat(holder.getResponse().encodeRedirectURL(url)).isEqualTo(url);
    assertThat(holder.getResponse().encodeUrl(url)).isEqualTo(url);
    assertThat(holder.getResponse().encodeURL(url)).isEqualTo(url);
  }
  @Test public void saveContextCustomTrustResolver(){
    SecurityContext contextToSave=SecurityContextHolder.createEmptyContext();
    contextToSave.setAuthentication(testToken);
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,new MockHttpServletResponse());
    repo.loadContext(holder);
    AuthenticationTrustResolver trustResolver=mock(AuthenticationTrustResolver.class);
    repo.setTrustResolver(trustResolver);
    repo.saveContext(contextToSave,holder.getRequest(),holder.getResponse());
    verify(trustResolver).isAnonymous(contextToSave.getAuthentication());
  }
  @Test(expected=IllegalArgumentException.class) public void setTrustResolverNull(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    repo.setTrustResolver(null);
  }
  @Test public void traverseWrappedRequests(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    assertThat(request.getSession(false)).isNull();
    context.setAuthentication(testToken);
    repo.saveContext(context,new HttpServletRequestWrapper(holder.getRequest()),new HttpServletResponseWrapper(holder.getResponse()));
    assertThat(request.getSession(false)).isNotNull();
    assertThat(request.getSession().getAttribute(SPRING_SECURITY_CONTEXT_KEY)).isEqualTo(context);
  }
  @Test(expected=IllegalStateException.class) public void failsWithStandardResponse(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    SecurityContext context=SecurityContextHolder.createEmptyContext();
    context.setAuthentication(testToken);
    repo.saveContext(context,request,response);
  }
  @Test public void saveContextWhenTransientAuthenticationThenSkipped(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    SomeTransientAuthentication authentication=new SomeTransientAuthentication();
    context.setAuthentication(authentication);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    MockHttpSession session=(MockHttpSession)request.getSession(false);
    assertThat(session).isNull();
  }
  @Test public void saveContextWhenTransientAuthenticationSubclassThenSkipped(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    SomeTransientAuthenticationSubclass authentication=new SomeTransientAuthenticationSubclass();
    context.setAuthentication(authentication);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    MockHttpSession session=(MockHttpSession)request.getSession(false);
    assertThat(session).isNull();
  }
  @Test public void saveContextWhenTransientAuthenticationWithCustomAnnotationThenSkipped(){
    HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
    SecurityContext context=repo.loadContext(holder);
    SomeOtherTransientAuthentication authentication=new SomeOtherTransientAuthentication();
    context.setAuthentication(authentication);
    repo.saveContext(context,holder.getRequest(),holder.getResponse());
    MockHttpSession session=(MockHttpSession)request.getSession(false);
    assertThat(session).isNull();
  }
@Transient private static class SomeTransientAuthentication extends AbstractAuthenticationToken {
    public SomeTransientAuthentication(){
      super(null);
    }
    @Override public Object getCredentials(){
      return null;
    }
    @Override public Object getPrincipal(){
      return null;
    }
  }
private static class SomeTransientAuthenticationSubclass extends SomeTransientAuthentication {
  }
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Transient public @interface TestTransientAuthentication {}
@TestTransientAuthentication private static class SomeOtherTransientAuthentication extends AbstractAuthenticationToken {
    public SomeOtherTransientAuthentication(){
      super(null);
    }
    @Override public Object getCredentials(){
      return null;
    }
    @Override public Object getPrincipal(){
      return null;
    }
  }
}
