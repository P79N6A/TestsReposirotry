/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class DelegatingReactiveAuthorizationManagerTests {
  @Mock ServerWebExchangeMatcher match1;
  @Mock ServerWebExchangeMatcher match2;
  @Mock AuthorityReactiveAuthorizationManager<AuthorizationContext> delegate1;
  @Mock AuthorityReactiveAuthorizationManager<AuthorizationContext> delegate2;
  @Mock ServerWebExchange exchange;
  @Mock Mono<Authentication> authentication;
  @Mock AuthorizationDecision decision;
  DelegatingReactiveAuthorizationManager manager;
  @Before public void setup(){
    manager=DelegatingReactiveAuthorizationManager.builder().add(new ServerWebExchangeMatcherEntry<>(match1,delegate1)).add(new ServerWebExchangeMatcherEntry<>(match2,delegate2)).build();
  }
  @Test public void checkWhenFirstMatchesThenNoMoreMatchersAndNoMoreDelegatesInvoked(){
    when(match1.matches(any())).thenReturn(ServerWebExchangeMatcher.MatchResult.match());
    when(delegate1.check(eq(authentication),any(AuthorizationContext.class))).thenReturn(Mono.just(decision));
    assertThat(manager.check(authentication,exchange).block()).isEqualTo(decision);
    verifyZeroInteractions(match2,delegate2);
  }
  @Test public void checkWhenSecondMatchesThenNoMoreMatchersAndNoMoreDelegatesInvoked(){
    when(match1.matches(any())).thenReturn(ServerWebExchangeMatcher.MatchResult.notMatch());
    when(match2.matches(any())).thenReturn(ServerWebExchangeMatcher.MatchResult.match());
    when(delegate2.check(eq(authentication),any(AuthorizationContext.class))).thenReturn(Mono.just(decision));
    assertThat(manager.check(authentication,exchange).block()).isEqualTo(decision);
    verifyZeroInteractions(delegate1);
  }
}
