/** 
 * Tests for  {@link OAuth2LoginAuthenticationToken}.
 * @author Joe Grandja
 */
@RunWith(PowerMockRunner.class) @PrepareForTest({ClientRegistration.class,OAuth2AuthorizationExchange.class}) public class OAuth2LoginAuthenticationTokenTests {
  private OAuth2User principal;
  private Collection<? extends GrantedAuthority> authorities;
  private ClientRegistration clientRegistration;
  private OAuth2AuthorizationExchange authorizationExchange;
  private OAuth2AccessToken accessToken;
  @Before public void setUp(){
    this.principal=mock(OAuth2User.class);
    this.authorities=Collections.emptyList();
    this.clientRegistration=mock(ClientRegistration.class);
    this.authorizationExchange=mock(OAuth2AuthorizationExchange.class);
    this.accessToken=mock(OAuth2AccessToken.class);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorAuthorizationRequestResponseWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(null,this.authorizationExchange);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorAuthorizationRequestResponseWhenAuthorizationExchangeIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,null);
  }
  @Test public void constructorAuthorizationRequestResponseWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2LoginAuthenticationToken authentication=new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange);
    assertThat(authentication.getPrincipal()).isNull();
    assertThat(authentication.getCredentials()).isEqualTo("");
    assertThat(authentication.getAuthorities()).isEqualTo(Collections.emptyList());
    assertThat(authentication.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authentication.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authentication.getAccessToken()).isNull();
    assertThat(authentication.isAuthenticated()).isEqualTo(false);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorTokenRequestResponseWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(null,this.authorizationExchange,this.principal,this.authorities,this.accessToken);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorTokenRequestResponseWhenAuthorizationExchangeIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,null,this.principal,this.authorities,this.accessToken);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorTokenRequestResponseWhenPrincipalIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange,null,this.authorities,this.accessToken);
  }
  @Test public void constructorTokenRequestResponseWhenAuthoritiesIsNullThenCreated(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange,this.principal,null,this.accessToken);
  }
  @Test public void constructorTokenRequestResponseWhenAuthoritiesIsEmptyThenCreated(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange,this.principal,Collections.emptyList(),this.accessToken);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorTokenRequestResponseWhenAccessTokenIsNullThenThrowIllegalArgumentException(){
    new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange,this.principal,this.authorities,null);
  }
  @Test public void constructorTokenRequestResponseWhenAllParametersProvidedAndValidThenCreated(){
    OAuth2LoginAuthenticationToken authentication=new OAuth2LoginAuthenticationToken(this.clientRegistration,this.authorizationExchange,this.principal,this.authorities,this.accessToken);
    assertThat(authentication.getPrincipal()).isEqualTo(this.principal);
    assertThat(authentication.getCredentials()).isEqualTo("");
    assertThat(authentication.getAuthorities()).isEqualTo(this.authorities);
    assertThat(authentication.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(authentication.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
    assertThat(authentication.getAccessToken()).isEqualTo(this.accessToken);
    assertThat(authentication.isAuthenticated()).isEqualTo(true);
  }
}
