/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureWebTestClient public class HelloWebfluxFnApplicationTests {
  WebTestClient rest;
  @Autowired public void setup(  ApplicationContext context){
    this.rest=WebTestClient.bindToApplicationContext(context).apply(springSecurity()).configureClient().build();
  }
  @Test public void basicWhenNoCredentialsThenUnauthorized() throws Exception {
    this.rest.get().uri("/").exchange().expectStatus().isUnauthorized();
  }
  @Test public void basicWhenValidCredentialsThenOk() throws Exception {
    this.rest.get().uri("/").headers(userCredentials()).exchange().expectStatus().isOk().expectBody().json("{\"message\":\"Hello user!\"}");
  }
  @Test public void basicWhenInvalidCredentialsThenUnauthorized() throws Exception {
    this.rest.get().uri("/").headers(invalidCredentials()).exchange().expectStatus().isUnauthorized().expectBody().isEmpty();
  }
  @Test public void mockSupportWhenMutateWithMockUserThenOk() throws Exception {
    this.rest.mutateWith(mockUser()).get().uri("/").exchange().expectStatus().isOk().expectBody().json("{\"message\":\"Hello user!\"}");
  }
  @Test @WithMockUser public void mockSupportWhenWithMockUserThenOk() throws Exception {
    this.rest.get().uri("/").exchange().expectStatus().isOk().expectBody().json("{\"message\":\"Hello user!\"}");
  }
  private Consumer<HttpHeaders> userCredentials(){
    return httpHeaders -> httpHeaders.setBasicAuth("user","user");
  }
  private Consumer<HttpHeaders> invalidCredentials(){
    return httpHeaders -> httpHeaders.setBasicAuth("user","INVALID");
  }
}
