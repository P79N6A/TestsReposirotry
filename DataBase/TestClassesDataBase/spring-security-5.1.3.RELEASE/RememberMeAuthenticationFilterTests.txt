/** 
 * Tests  {@link RememberMeAuthenticationFilter}.
 * @author Ben Alex
 */
public class RememberMeAuthenticationFilterTests {
  Authentication remembered=new TestingAuthenticationToken("remembered","password","ROLE_REMEMBERED");
  @Before public void setUp(){
    SecurityContextHolder.clearContext();
  }
  @After public void tearDown(){
    SecurityContextHolder.clearContext();
  }
  @Test(expected=IllegalArgumentException.class) public void testDetectsAuthenticationManagerProperty(){
    new RememberMeAuthenticationFilter(null,new NullRememberMeServices());
  }
  @Test(expected=IllegalArgumentException.class) public void testDetectsRememberMeServicesProperty(){
    new RememberMeAuthenticationFilter(mock(AuthenticationManager.class),null);
  }
  @Test public void testOperationWhenAuthenticationExistsInContextHolder() throws Exception {
    Authentication originalAuth=new TestingAuthenticationToken("user","password","ROLE_A");
    SecurityContextHolder.getContext().setAuthentication(originalAuth);
    RememberMeAuthenticationFilter filter=new RememberMeAuthenticationFilter(mock(AuthenticationManager.class),new MockRememberMeServices(remembered));
    filter.afterPropertiesSet();
    MockHttpServletRequest request=new MockHttpServletRequest();
    FilterChain fc=mock(FilterChain.class);
    request.setRequestURI("x");
    filter.doFilter(request,new MockHttpServletResponse(),fc);
    assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(originalAuth);
    verify(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void testOperationWhenNoAuthenticationInContextHolder() throws Exception {
    AuthenticationManager am=mock(AuthenticationManager.class);
    when(am.authenticate(remembered)).thenReturn(remembered);
    RememberMeAuthenticationFilter filter=new RememberMeAuthenticationFilter(am,new MockRememberMeServices(remembered));
    filter.afterPropertiesSet();
    MockHttpServletRequest request=new MockHttpServletRequest();
    FilterChain fc=mock(FilterChain.class);
    request.setRequestURI("x");
    filter.doFilter(request,new MockHttpServletResponse(),fc);
    assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(remembered);
    verify(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void onUnsuccessfulLoginIsCalledWhenProviderRejectsAuth() throws Exception {
    final Authentication failedAuth=new TestingAuthenticationToken("failed","");
    AuthenticationManager am=mock(AuthenticationManager.class);
    when(am.authenticate(any(Authentication.class))).thenThrow(new BadCredentialsException(""));
    RememberMeAuthenticationFilter filter=new RememberMeAuthenticationFilter(am,new MockRememberMeServices(remembered)){
      protected void onUnsuccessfulAuthentication(      HttpServletRequest request,      HttpServletResponse response,      AuthenticationException failed){
        super.onUnsuccessfulAuthentication(request,response,failed);
        SecurityContextHolder.getContext().setAuthentication(failedAuth);
      }
    }
;
    filter.setApplicationEventPublisher(mock(ApplicationEventPublisher.class));
    filter.afterPropertiesSet();
    MockHttpServletRequest request=new MockHttpServletRequest();
    FilterChain fc=mock(FilterChain.class);
    request.setRequestURI("x");
    filter.doFilter(request,new MockHttpServletResponse(),fc);
    assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(failedAuth);
    verify(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void authenticationSuccessHandlerIsInvokedOnSuccessfulAuthenticationIfSet() throws Exception {
    AuthenticationManager am=mock(AuthenticationManager.class);
    when(am.authenticate(remembered)).thenReturn(remembered);
    RememberMeAuthenticationFilter filter=new RememberMeAuthenticationFilter(am,new MockRememberMeServices(remembered));
    filter.setAuthenticationSuccessHandler(new SimpleUrlAuthenticationSuccessHandler("/target"));
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    FilterChain fc=mock(FilterChain.class);
    request.setRequestURI("x");
    filter.doFilter(request,response,fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/target");
    verifyZeroInteractions(fc);
  }
private class MockRememberMeServices implements RememberMeServices {
    private Authentication authToReturn;
    public MockRememberMeServices(    Authentication authToReturn){
      this.authToReturn=authToReturn;
    }
    public Authentication autoLogin(    HttpServletRequest request,    HttpServletResponse response){
      return authToReturn;
    }
    public void loginFail(    HttpServletRequest request,    HttpServletResponse response){
    }
    public void loginSuccess(    HttpServletRequest request,    HttpServletResponse response,    Authentication successfulAuthentication){
    }
  }
}
