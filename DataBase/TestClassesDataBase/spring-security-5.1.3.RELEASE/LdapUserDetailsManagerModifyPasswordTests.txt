/** 
 * Tests for  {@link LdapUserDetailsManager#changePassword}, specifically relating to the use of the Modify Password Extended Operation.
 * @author Josh Cummings
 */
@RunWith(SpringJUnit4ClassRunner.class) @SecurityTestExecutionListeners public class LdapUserDetailsManagerModifyPasswordTests {
  ConfigurableApplicationContext context;
  LdapUserDetailsManager userDetailsManager;
  ContextSource contextSource;
  @Before public void setup(){
    this.context=new AnnotationConfigApplicationContext(ContainerConfiguration.class,LdapConfiguration.class);
    this.contextSource=this.context.getBean(ContextSource.class);
    this.userDetailsManager=new LdapUserDetailsManager(this.contextSource);
    this.userDetailsManager.setUsePasswordModifyExtensionOperation(true);
    this.userDetailsManager.setUsernameMapper(new DefaultLdapUsernameToDnMapper("ou=people","uid"));
  }
  @After public void teardown(){
    this.context.close();
  }
  @Test @WithMockUser(username="bob",password="bobspassword",authorities="ROLE_USER") public void changePasswordWhenOldPasswordIsIncorrectThenThrowsException(){
    assertThatCode(() -> this.userDetailsManager.changePassword("wrongoldpassword","bobsnewpassword")).isInstanceOf(BadCredentialsException.class);
  }
  @Test @WithMockUser(username="bob",password="bobspassword",authorities="ROLE_USER") public void changePasswordWhenOldPasswordIsCorrectThenPasses(){
    SpringSecurityLdapTemplate template=new SpringSecurityLdapTemplate(this.contextSource);
    this.userDetailsManager.changePassword("bobspassword","bobsshinynewandformidablylongandnearlyimpossibletorememberthoughdemonstrablyhardtocrackduetoitshighlevelofentropypasswordofjustice");
    assertThat(template.compare("uid=bob,ou=people","userPassword","bobsshinynewandformidablylongandnearlyimpossibletorememberthoughdemonstrablyhardtocrackduetoitshighlevelofentropypasswordofjustice")).isTrue();
  }
@Configuration static class LdapConfiguration {
    @Autowired UnboundIdContainer container;
    @Bean ContextSource contextSource() throws Exception {
      return new DefaultSpringSecurityContextSource("ldap://127.0.0.1:" + this.container.getPort() + "/dc=springframework,dc=org");
    }
  }
@Configuration static class ContainerConfiguration {
    UnboundIdContainer container=new UnboundIdContainer("dc=springframework,dc=org","classpath:test-server.ldif");
    @Bean UnboundIdContainer ldapContainer(){
      this.container.setPort(0);
      return this.container;
    }
    @PreDestroy void shutdown(){
      this.container.stop();
    }
  }
}
