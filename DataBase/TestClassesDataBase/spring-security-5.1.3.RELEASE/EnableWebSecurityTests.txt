/** 
 * @author Joe Grandja
 */
public class EnableWebSecurityTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private MockMvc mockMvc;
  @Test public void configureWhenOverrideAuthenticationManagerBeanThenAuthenticationManagerBeanRegistered() throws Exception {
    this.spring.register(SecurityConfig.class).autowire();
    AuthenticationManager authenticationManager=this.spring.getContext().getBean(AuthenticationManager.class);
    Authentication authentication=authenticationManager.authenticate(new UsernamePasswordAuthenticationToken("user","password"));
    assertThat(authentication.isAuthenticated()).isTrue();
  }
@EnableWebSecurity static class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser(PasswordEncodedUser.user());
    }
    @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception {
      return super.authenticationManagerBean();
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().antMatchers("/*").hasRole("USER").and().formLogin();
    }
  }
  @Test public void loadConfigWhenChildConfigExtendsSecurityConfigThenSecurityConfigInherited() throws Exception {
    this.spring.register(ChildSecurityConfig.class).autowire();
    this.spring.getContext().getBean("springSecurityFilterChain",DebugFilter.class);
  }
@Configuration static class ChildSecurityConfig extends DebugSecurityConfig {
  }
@EnableWebSecurity(debug=true) static class DebugSecurityConfig extends WebSecurityConfigurerAdapter {
  }
  @Test public void configureWhenEnableWebMvcThenAuthenticationPrincipalResolvable() throws Exception {
    this.spring.register(AuthenticationPrincipalConfig.class).autowire();
    this.mockMvc.perform(get("/").with(authentication(new TestingAuthenticationToken("user1","password")))).andExpect(content().string("user1"));
  }
@EnableWebSecurity @EnableWebMvc static class AuthenticationPrincipalConfig extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
    }
@RestController static class AuthController {
      @GetMapping("/") String principal(      @AuthenticationPrincipal String principal){
        return principal;
      }
    }
  }
}
