/** 
 * Tests  {@link SecurityContextHolderAwareRequestWrapper}.
 * @author Ben Alex
 */
public class SecurityContextHolderAwareRequestWrapperTests {
  @Before public void tearDown() throws Exception {
    SecurityContextHolder.clearContext();
  }
  @Test public void testCorrectOperationWithStringBasedPrincipal() throws Exception {
    Authentication auth=new TestingAuthenticationToken("rod","koala","ROLE_FOO");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/");
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"");
    assertThat(wrapper.getRemoteUser()).isEqualTo("rod");
    assertThat(wrapper.isUserInRole("ROLE_FOO")).isTrue();
    assertThat(wrapper.isUserInRole("ROLE_NOT_GRANTED")).isFalse();
    assertThat(wrapper.getUserPrincipal()).isEqualTo(auth);
  }
  @Test public void testUseOfRolePrefixMeansItIsntNeededWhenCallngIsUserInRole(){
    Authentication auth=new TestingAuthenticationToken("rod","koala","ROLE_FOO");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/");
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"ROLE_");
    assertThat(wrapper.isUserInRole("FOO")).isTrue();
  }
  @Test public void testCorrectOperationWithUserDetailsBasedPrincipal() throws Exception {
    Authentication auth=new TestingAuthenticationToken(new User("rodAsUserDetails","koala",true,true,true,true,AuthorityUtils.NO_AUTHORITIES),"koala","ROLE_HELLO","ROLE_FOOBAR");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/");
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"");
    assertThat(wrapper.getRemoteUser()).isEqualTo("rodAsUserDetails");
    assertThat(wrapper.isUserInRole("ROLE_FOO")).isFalse();
    assertThat(wrapper.isUserInRole("ROLE_NOT_GRANTED")).isFalse();
    assertThat(wrapper.isUserInRole("ROLE_FOOBAR")).isTrue();
    assertThat(wrapper.isUserInRole("ROLE_HELLO")).isTrue();
    assertThat(wrapper.getUserPrincipal()).isEqualTo(auth);
  }
  @Test public void testRoleIsntHeldIfAuthenticationIsNull() throws Exception {
    SecurityContextHolder.getContext().setAuthentication(null);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/");
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"");
    assertThat(wrapper.getRemoteUser()).isNull();
    assertThat(wrapper.isUserInRole("ROLE_ANY")).isFalse();
    assertThat(wrapper.getUserPrincipal()).isNull();
  }
  @Test public void testRolesArentHeldIfAuthenticationPrincipalIsNull() throws Exception {
    Authentication auth=new TestingAuthenticationToken(null,"koala","ROLE_HELLO","ROLE_FOOBAR");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/");
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"");
    assertThat(wrapper.getRemoteUser()).isNull();
    assertThat(wrapper.isUserInRole("ROLE_HELLO")).isFalse();
    assertThat(wrapper.isUserInRole("ROLE_FOOBAR")).isFalse();
    assertThat(wrapper.getUserPrincipal()).isNull();
  }
  @Test public void testRolePrefix(){
    Authentication auth=new TestingAuthenticationToken("user","koala","ROLE_HELLO","ROLE_FOOBAR");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"ROLE_");
    assertThat(wrapper.isUserInRole("HELLO")).isTrue();
    assertThat(wrapper.isUserInRole("FOOBAR")).isTrue();
  }
  @Test public void testRolePrefixNotAppliedIfRoleStartsWith(){
    Authentication auth=new TestingAuthenticationToken("user","koala","ROLE_HELLO","ROLE_FOOBAR");
    SecurityContextHolder.getContext().setAuthentication(auth);
    MockHttpServletRequest request=new MockHttpServletRequest();
    SecurityContextHolderAwareRequestWrapper wrapper=new SecurityContextHolderAwareRequestWrapper(request,"ROLE_");
    assertThat(wrapper.isUserInRole("ROLE_HELLO")).isTrue();
    assertThat(wrapper.isUserInRole("ROLE_FOOBAR")).isTrue();
  }
}
