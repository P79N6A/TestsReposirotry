/** 
 * Tests for  {@link OAuth2ClientCredentialsGrantRequest}.
 * @author Joe Grandja
 */
public class OAuth2ClientCredentialsGrantRequestTests {
  private ClientRegistration clientRegistration;
  @Before public void setup(){
    this.clientRegistration=ClientRegistration.withRegistrationId("registration-1").clientId("client-1").clientSecret("secret").clientAuthenticationMethod(ClientAuthenticationMethod.BASIC).authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS).scope("read","write").tokenUri("https://provider.com/oauth2/token").build();
  }
  @Test public void constructorWhenClientRegistrationIsNullThenThrowIllegalArgumentException(){
    assertThatThrownBy(() -> new OAuth2ClientCredentialsGrantRequest(null)).isInstanceOf(IllegalArgumentException.class);
  }
  @Test public void constructorWhenClientRegistrationInvalidGrantTypeThenThrowIllegalArgumentException(){
    ClientRegistration clientRegistration=ClientRegistration.withRegistrationId("registration-1").clientId("client-1").authorizationGrantType(AuthorizationGrantType.IMPLICIT).redirectUriTemplate("https://localhost:8080/redirect-uri").authorizationUri("https://provider.com/oauth2/auth").clientName("Client 1").build();
    assertThatThrownBy(() -> new OAuth2ClientCredentialsGrantRequest(clientRegistration)).isInstanceOf(IllegalArgumentException.class).hasMessage("clientRegistration.authorizationGrantType must be AuthorizationGrantType.CLIENT_CREDENTIALS");
  }
  @Test public void constructorWhenValidParametersProvidedThenCreated(){
    OAuth2ClientCredentialsGrantRequest clientCredentialsGrantRequest=new OAuth2ClientCredentialsGrantRequest(this.clientRegistration);
    assertThat(clientCredentialsGrantRequest.getClientRegistration()).isEqualTo(this.clientRegistration);
    assertThat(clientCredentialsGrantRequest.getGrantType()).isEqualTo(AuthorizationGrantType.CLIENT_CREDENTIALS);
  }
}
