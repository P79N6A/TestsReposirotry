/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class UserDetailsResourceFactoryBeanTest {
  @Mock ResourceLoader resourceLoader;
  UserDetailsResourceFactoryBean factory=new UserDetailsResourceFactoryBean();
  @Test public void setResourceLoaderWhenNullThenThrowsException() throws Exception {
    assertThatThrownBy(() -> factory.setResourceLoader(null)).isInstanceOf(IllegalArgumentException.class).hasStackTraceContaining("resourceLoader cannot be null");
  }
  @Test public void getObjectWhenPropertiesResourceLocationNullThenThrowsIllegalStateException() throws Exception {
    factory.setResourceLoader(resourceLoader);
    assertThatThrownBy(() -> factory.getObject()).isInstanceOf(IllegalArgumentException.class).hasStackTraceContaining("resource cannot be null if resourceLocation is null");
  }
  @Test public void getObjectWhenPropertiesResourceLocationSingleUserThenThrowsGetsSingleUser() throws Exception {
    factory.setResourceLocation("classpath:users.properties");
    Collection<UserDetails> users=factory.getObject();
    assertLoaded();
  }
  @Test public void getObjectWhenPropertiesResourceSingleUserThenThrowsGetsSingleUser() throws Exception {
    factory.setResource(new InMemoryResource("user=password,ROLE_USER"));
    assertLoaded();
  }
  @Test public void getObjectWhenInvalidUserThenThrowsMeaningfulException() throws Exception {
    factory.setResource(new InMemoryResource("user=invalidFormatHere"));
    assertThatThrownBy(() -> factory.getObject()).isInstanceOf(IllegalStateException.class).hasStackTraceContaining("user").hasStackTraceContaining("invalidFormatHere");
  }
  @Test public void getObjectWhenStringSingleUserThenGetsSingleUser() throws Exception {
    this.factory=UserDetailsResourceFactoryBean.fromString("user=password,ROLE_USER");
    assertLoaded();
  }
  private void assertLoaded() throws Exception {
    Collection<UserDetails> users=factory.getObject();
    UserDetails expectedUser=User.withUsername("user").password("password").authorities("ROLE_USER").build();
    assertThat(users).containsExactly(expectedUser);
  }
}
