/** 
 * @author Rob Winch
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=WithUserDetailsTests.Config.class) public class WithUserDetailsTests {
  @Autowired private MessageService messageService;
  @Test(expected=AuthenticationCredentialsNotFoundException.class) public void getMessageUnauthenticated(){
    messageService.getMessage();
  }
  @Test @WithUserDetails public void getMessageWithUserDetails(){
    String message=messageService.getMessage();
    assertThat(message).contains("user");
    assertThat(getPrincipal()).isInstanceOf(CustomUserDetails.class);
  }
  @Test @WithUserDetails("customUsername") public void getMessageWithUserDetailsCustomUsername(){
    String message=messageService.getMessage();
    assertThat(message).contains("customUsername");
    assertThat(getPrincipal()).isInstanceOf(CustomUserDetails.class);
  }
  @Test @WithUserDetails(value="customUsername",userDetailsServiceBeanName="myUserDetailsService") public void getMessageWithUserDetailsServiceBeanName(){
    String message=messageService.getMessage();
    assertThat(message).contains("customUsername");
    assertThat(getPrincipal()).isInstanceOf(CustomUserDetails.class);
  }
@EnableGlobalMethodSecurity(prePostEnabled=true) @ComponentScan(basePackageClasses=HelloMessageService.class) static class Config {
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.userDetailsService(myUserDetailsService());
    }
    @Bean public UserDetailsService myUserDetailsService(){
      return new CustomUserDetailsService();
    }
  }
  private Object getPrincipal(){
    return SecurityContextHolder.getContext().getAuthentication().getPrincipal();
  }
static class CustomUserDetailsService implements UserDetailsService {
    public UserDetails loadUserByUsername(    final String username) throws UsernameNotFoundException {
      return new CustomUserDetails("name",username);
    }
  }
}
