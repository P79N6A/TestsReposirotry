/** 
 * Tests  {@link UnanimousBased}.
 * @author Ben Alex
 */
public class UnanimousBasedTests {
  private UnanimousBased makeDecisionManager(){
    RoleVoter roleVoter=new RoleVoter();
    DenyVoter denyForSureVoter=new DenyVoter();
    DenyAgainVoter denyAgainForSureVoter=new DenyAgainVoter();
    List<AccessDecisionVoter<? extends Object>> voters=new Vector<AccessDecisionVoter<? extends Object>>();
    voters.add(roleVoter);
    voters.add(denyForSureVoter);
    voters.add(denyAgainForSureVoter);
    return new UnanimousBased(voters);
  }
  private UnanimousBased makeDecisionManagerWithFooBarPrefix(){
    RoleVoter roleVoter=new RoleVoter();
    roleVoter.setRolePrefix("FOOBAR_");
    DenyVoter denyForSureVoter=new DenyVoter();
    DenyAgainVoter denyAgainForSureVoter=new DenyAgainVoter();
    List<AccessDecisionVoter<? extends Object>> voters=new Vector<AccessDecisionVoter<? extends Object>>();
    voters.add(roleVoter);
    voters.add(denyForSureVoter);
    voters.add(denyAgainForSureVoter);
    return new UnanimousBased(voters);
  }
  private TestingAuthenticationToken makeTestToken(){
    return new TestingAuthenticationToken("somebody","password","ROLE_1","ROLE_2");
  }
  private TestingAuthenticationToken makeTestTokenWithFooBarPrefix(){
    return new TestingAuthenticationToken("somebody","password","FOOBAR_1","FOOBAR_2");
  }
  @Test public void testOneAffirmativeVoteOneDenyVoteOneAbstainVoteDeniesAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    List<ConfigAttribute> config=SecurityConfig.createList(new String[]{"ROLE_1","DENY_FOR_SURE"});
    try {
      mgr.decide(auth,new Object(),config);
      fail("Should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
  }
  @Test public void testOneAffirmativeVoteTwoAbstainVotesGrantsAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    List<ConfigAttribute> config=SecurityConfig.createList("ROLE_2");
    mgr.decide(auth,new Object(),config);
  }
  @Test public void testOneDenyVoteTwoAbstainVotesDeniesAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    List<ConfigAttribute> config=SecurityConfig.createList("ROLE_WE_DO_NOT_HAVE");
    try {
      mgr.decide(auth,new Object(),config);
      fail("Should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
  }
  @Test public void testRoleVoterPrefixObserved() throws Exception {
    TestingAuthenticationToken auth=makeTestTokenWithFooBarPrefix();
    UnanimousBased mgr=makeDecisionManagerWithFooBarPrefix();
    List<ConfigAttribute> config=SecurityConfig.createList(new String[]{"FOOBAR_1","FOOBAR_2"});
    mgr.decide(auth,new Object(),config);
  }
  @Test public void testThreeAbstainVotesDeniesAccessWithDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    assertThat(!mgr.isAllowIfAllAbstainDecisions()).isTrue();
    List<ConfigAttribute> config=SecurityConfig.createList("IGNORED_BY_ALL");
    try {
      mgr.decide(auth,new Object(),config);
      fail("Should have thrown AccessDeniedException");
    }
 catch (    AccessDeniedException expected) {
    }
  }
  @Test public void testThreeAbstainVotesGrantsAccessWithoutDefault() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    mgr.setAllowIfAllAbstainDecisions(true);
    assertThat(mgr.isAllowIfAllAbstainDecisions()).isTrue();
    List<ConfigAttribute> config=SecurityConfig.createList("IGNORED_BY_ALL");
    mgr.decide(auth,new Object(),config);
  }
  @Test public void testTwoAffirmativeVotesTwoAbstainVotesGrantsAccess() throws Exception {
    TestingAuthenticationToken auth=makeTestToken();
    UnanimousBased mgr=makeDecisionManager();
    List<ConfigAttribute> config=SecurityConfig.createList(new String[]{"ROLE_1","ROLE_2"});
    mgr.decide(auth,new Object(),config);
  }
}
