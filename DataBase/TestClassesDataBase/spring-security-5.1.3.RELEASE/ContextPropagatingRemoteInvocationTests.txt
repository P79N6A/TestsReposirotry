/** 
 * Tests  {@link ContextPropagatingRemoteInvocation} and{@link ContextPropagatingRemoteInvocationFactory}.
 * @author Ben Alex
 */
public class ContextPropagatingRemoteInvocationTests {
  @After public void tearDown() throws Exception {
    SecurityContextHolder.clearContext();
  }
  private ContextPropagatingRemoteInvocation getRemoteInvocation() throws Exception {
    Class<TargetObject> clazz=TargetObject.class;
    Method method=clazz.getMethod("makeLowerCase",new Class[]{String.class});
    MethodInvocation mi=new SimpleMethodInvocation(new TargetObject(),method,"SOME_STRING");
    ContextPropagatingRemoteInvocationFactory factory=new ContextPropagatingRemoteInvocationFactory();
    return (ContextPropagatingRemoteInvocation)factory.createRemoteInvocation(mi);
  }
  @Test public void testContextIsResetEvenIfExceptionOccurs() throws Exception {
    Authentication clientSideAuthentication=new UsernamePasswordAuthenticationToken("rod","koala");
    SecurityContextHolder.getContext().setAuthentication(clientSideAuthentication);
    ContextPropagatingRemoteInvocation remoteInvocation=getRemoteInvocation();
    try {
      remoteInvocation.setArguments(new Object[]{});
      remoteInvocation.invoke(TargetObject.class.newInstance());
      fail("Expected IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
    assertThat(SecurityContextHolder.getContext().getAuthentication()).withFailMessage("Authentication must be null").isNull();
  }
  @Test public void testNormalOperation() throws Exception {
    Authentication clientSideAuthentication=new UsernamePasswordAuthenticationToken("rod","koala");
    SecurityContextHolder.getContext().setAuthentication(clientSideAuthentication);
    ContextPropagatingRemoteInvocation remoteInvocation=getRemoteInvocation();
    SecurityContextHolder.clearContext();
    assertThat(remoteInvocation.invoke(new TargetObject())).isEqualTo("some_string org.springframework.security.authentication.UsernamePasswordAuthenticationToken false");
  }
  @Test public void testNullContextHolderDoesNotCauseInvocationProblems() throws Exception {
    SecurityContextHolder.clearContext();
    ContextPropagatingRemoteInvocation remoteInvocation=getRemoteInvocation();
    SecurityContextHolder.clearContext();
    assertThat(remoteInvocation.invoke(new TargetObject())).isEqualTo("some_string Authentication empty");
  }
  @Test public void testNullCredentials() throws Exception {
    Authentication clientSideAuthentication=new UsernamePasswordAuthenticationToken("rod",null);
    SecurityContextHolder.getContext().setAuthentication(clientSideAuthentication);
    ContextPropagatingRemoteInvocation remoteInvocation=getRemoteInvocation();
    assertThat(ReflectionTestUtils.getField(remoteInvocation,"credentials")).isNull();
  }
}
