/** 
 * @author Rob Winch
 * @since 5.0
 */
@RunWith(MockitoJUnitRunner.class) public class DefaultServerRedirectStrategyTests {
  @Mock private ServerWebExchange exchange;
  private URI location=URI.create("/login");
  private DefaultServerRedirectStrategy strategy=new DefaultServerRedirectStrategy();
  @Test(expected=IllegalArgumentException.class) public void sendRedirectWhenLocationNullThenException(){
    this.strategy.sendRedirect(this.exchange,(URI)null);
  }
  @Test(expected=IllegalArgumentException.class) public void sendRedirectWhenExchangeNullThenException(){
    this.strategy.sendRedirect((ServerWebExchange)null,this.location);
  }
  @Test public void sendRedirectWhenNoSubscribersThenNoActions(){
    this.strategy.sendRedirect(this.exchange,this.location);
    verifyZeroInteractions(this.exchange);
  }
  @Test public void sendRedirectWhenNoContextPathThenStatusAndLocationSet(){
    this.exchange=exchange(MockServerHttpRequest.get("/"));
    this.strategy.sendRedirect(this.exchange,this.location).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath(this.location.getPath());
  }
  @Test public void sendRedirectWhenContextPathSetThenStatusAndLocationSet(){
    this.exchange=exchange(MockServerHttpRequest.get("/context/foo").contextPath("/context"));
    this.strategy.sendRedirect(this.exchange,this.location).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath("/context" + this.location.getPath());
  }
  @Test public void sendRedirectWhenContextPathSetAndAbsoluteURLThenStatusAndLocationSet(){
    this.location=URI.create("https://example.com/foo/bar");
    this.exchange=exchange(MockServerHttpRequest.get("/context/foo").contextPath("/context"));
    this.strategy.sendRedirect(this.exchange,this.location).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath(this.location.getPath());
  }
  @Test public void sendRedirectWhenContextPathSetAndDisabledThenStatusAndLocationSet(){
    this.strategy.setContextRelative(false);
    this.exchange=exchange(MockServerHttpRequest.get("/context/foo").contextPath("/context"));
    this.strategy.sendRedirect(this.exchange,this.location).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(HttpStatus.FOUND);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath(this.location.getPath());
  }
  @Test public void sendRedirectWhenCustomStatusThenStatusSet(){
    HttpStatus status=HttpStatus.MOVED_PERMANENTLY;
    this.strategy.setHttpStatus(status);
    this.exchange=exchange(MockServerHttpRequest.get("/"));
    this.strategy.sendRedirect(this.exchange,this.location).block();
    assertThat(this.exchange.getResponse().getStatusCode()).isEqualTo(status);
    assertThat(this.exchange.getResponse().getHeaders().getLocation()).hasPath(this.location.getPath());
  }
  @Test(expected=IllegalArgumentException.class) public void setHttpStatusWhenNullThenException(){
    this.strategy.setHttpStatus(null);
  }
  private static MockServerWebExchange exchange(  MockServerHttpRequest.BaseBuilder<?> request){
    return MockServerWebExchange.from(request.build());
  }
}
