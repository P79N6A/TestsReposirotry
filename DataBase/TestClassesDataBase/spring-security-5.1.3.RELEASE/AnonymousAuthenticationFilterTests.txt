/** 
 * Tests  {@link AnonymousAuthenticationFilter}.
 * @author Ben Alex
 * @author Eddú Meléndez
 */
public class AnonymousAuthenticationFilterTests {
  private void executeFilterInContainerSimulator(  FilterConfig filterConfig,  Filter filter,  ServletRequest request,  ServletResponse response,  FilterChain filterChain) throws ServletException, IOException {
    filter.doFilter(request,response,filterChain);
  }
  @Before @After public void clearContext() throws Exception {
    SecurityContextHolder.clearContext();
  }
  @Test(expected=IllegalArgumentException.class) public void testDetectsMissingKey() throws Exception {
    new AnonymousAuthenticationFilter(null);
  }
  @Test(expected=IllegalArgumentException.class) public void testDetectsUserAttribute() throws Exception {
    new AnonymousAuthenticationFilter("qwerty",null,null);
  }
  @Test public void testOperationWhenAuthenticationExistsInContextHolder() throws Exception {
    Authentication originalAuth=new TestingAuthenticationToken("user","password","ROLE_A");
    SecurityContextHolder.getContext().setAuthentication(originalAuth);
    AnonymousAuthenticationFilter filter=new AnonymousAuthenticationFilter("qwerty","anonymousUsername",AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS"));
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("x");
    executeFilterInContainerSimulator(mock(FilterConfig.class),filter,request,new MockHttpServletResponse(),new MockFilterChain(true));
    assertThat(SecurityContextHolder.getContext().getAuthentication()).isEqualTo(originalAuth);
  }
  @Test public void testOperationWhenNoAuthenticationInSecurityContextHolder() throws Exception {
    AnonymousAuthenticationFilter filter=new AnonymousAuthenticationFilter("qwerty","anonymousUsername",AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS"));
    filter.afterPropertiesSet();
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("x");
    executeFilterInContainerSimulator(mock(FilterConfig.class),filter,request,new MockHttpServletResponse(),new MockFilterChain(true));
    Authentication auth=SecurityContextHolder.getContext().getAuthentication();
    assertThat(auth.getPrincipal()).isEqualTo("anonymousUsername");
    assertThat(AuthorityUtils.authorityListToSet(auth.getAuthorities())).contains("ROLE_ANONYMOUS");
    SecurityContextHolder.getContext().setAuthentication(null);
  }
private class MockFilterChain implements FilterChain {
    private boolean expectToProceed;
    public MockFilterChain(    boolean expectToProceed){
      this.expectToProceed=expectToProceed;
    }
    public void doFilter(    ServletRequest request,    ServletResponse response) throws IOException, ServletException {
      if (!expectToProceed) {
        fail("Did not expect filter chain to proceed");
      }
    }
  }
}
