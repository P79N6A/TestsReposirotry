/** 
 * @author Rob Winch
 * @author Tim Ysewyn
 * @author Josh Cummings
 */
public class HttpCorsConfigTests {
  private static final String CONFIG_LOCATION_PREFIX="classpath:org/springframework/security/config/http/HttpCorsConfigTests";
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired MockMvc mvc;
  @Test public void autowireWhenMissingMvcThenGivesInformativeError(){
    assertThatThrownBy(() -> this.spring.configLocations(this.xml("RequiresMvc")).autowire()).isInstanceOf(BeanCreationException.class).hasMessageContaining("Please ensure Spring Security & Spring MVC are configured in a shared ApplicationContext");
  }
  @Test public void getWhenUsingCorsThenDoesSpringSecurityCorsHandshake() throws Exception {
    this.spring.configLocations(this.xml("WithCors")).autowire();
    this.mvc.perform(get("/").with(this.approved())).andExpect(corsResponseHeaders()).andExpect((status().isIAmATeapot()));
    this.mvc.perform(options("/").with(this.preflight())).andExpect(corsResponseHeaders()).andExpect(status().isOk());
  }
  @Test public void getWhenUsingCustomCorsConfigurationSourceThenDoesSpringSecurityCorsHandshake() throws Exception {
    this.spring.configLocations(this.xml("WithCorsConfigurationSource")).autowire();
    this.mvc.perform(get("/").with(this.approved())).andExpect(corsResponseHeaders()).andExpect((status().isIAmATeapot()));
    this.mvc.perform(options("/").with(this.preflight())).andExpect(corsResponseHeaders()).andExpect(status().isOk());
  }
  @Test public void getWhenUsingCustomCorsFilterThenDoesSPringSecurityCorsHandshake() throws Exception {
    this.spring.configLocations(this.xml("WithCorsFilter")).autowire();
    this.mvc.perform(get("/").with(this.approved())).andExpect(corsResponseHeaders()).andExpect((status().isIAmATeapot()));
    this.mvc.perform(options("/").with(this.preflight())).andExpect(corsResponseHeaders()).andExpect(status().isOk());
  }
@RestController @CrossOrigin(methods={RequestMethod.GET,RequestMethod.POST}) static class CorsController {
    @RequestMapping("/") String hello(){
      return "Hello";
    }
  }
static class MyCorsConfigurationSource extends UrlBasedCorsConfigurationSource {
    MyCorsConfigurationSource(){
      CorsConfiguration configuration=new CorsConfiguration();
      configuration.setAllowedOrigins(Arrays.asList("*"));
      configuration.setAllowedMethods(Arrays.asList(RequestMethod.GET.name(),RequestMethod.POST.name()));
      super.registerCorsConfiguration("/**",configuration);
    }
  }
  private String xml(  String configName){
    return CONFIG_LOCATION_PREFIX + "-" + configName+ ".xml";
  }
  private RequestPostProcessor preflight(){
    return cors(true);
  }
  private RequestPostProcessor approved(){
    return cors(false);
  }
  private RequestPostProcessor cors(  boolean preflight){
    return (request) -> {
      request.addHeader(HttpHeaders.ORIGIN,"https://example.com");
      if (preflight) {
        request.setMethod(HttpMethod.OPTIONS.name());
        request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD,HttpMethod.POST.name());
      }
      return request;
    }
;
  }
  private ResultMatcher corsResponseHeaders(){
    return result -> {
      header().exists("Access-Control-Allow-Origin").match(result);
      header().exists("X-Content-Type-Options").match(result);
    }
;
  }
}
