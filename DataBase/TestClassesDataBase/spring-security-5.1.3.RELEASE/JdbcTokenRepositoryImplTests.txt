/** 
 * @author Luke Taylor
 */
@RunWith(MockitoJUnitRunner.class) public class JdbcTokenRepositoryImplTests {
  @Mock private Log logger;
  private static SingleConnectionDataSource dataSource;
  private JdbcTokenRepositoryImpl repo;
  private JdbcTemplate template;
  @BeforeClass public static void createDataSource(){
    dataSource=new SingleConnectionDataSource("jdbc:hsqldb:mem:tokenrepotest","sa","",true);
    dataSource.setDriverClassName("org.hsqldb.jdbc.JDBCDriver");
  }
  @AfterClass public static void clearDataSource() throws Exception {
    dataSource.destroy();
    dataSource=null;
  }
  @Before public void populateDatabase(){
    repo=new JdbcTokenRepositoryImpl();
    ReflectionTestUtils.setField(repo,"logger",logger);
    repo.setDataSource(dataSource);
    repo.initDao();
    template=repo.getJdbcTemplate();
    template.execute("create table persistent_logins (username varchar(100) not null, " + "series varchar(100) not null, token varchar(500) not null, last_used timestamp not null)");
  }
  @After public void clearData(){
    template.execute("drop table persistent_logins");
  }
  @Test public void createNewTokenInsertsCorrectData(){
    Timestamp currentDate=new Timestamp(Calendar.getInstance().getTimeInMillis());
    PersistentRememberMeToken token=new PersistentRememberMeToken("joeuser","joesseries","atoken",currentDate);
    repo.createNewToken(token);
    Map<String,Object> results=template.queryForMap("select * from persistent_logins");
    assertThat(results.get("last_used")).isEqualTo(currentDate);
    assertThat(results.get("username")).isEqualTo("joeuser");
    assertThat(results.get("series")).isEqualTo("joesseries");
    assertThat(results.get("token")).isEqualTo("atoken");
  }
  @Test public void retrievingTokenReturnsCorrectData(){
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries', 'joeuser', 'atoken', '2007-10-09 18:19:25.000000000')");
    PersistentRememberMeToken token=repo.getTokenForSeries("joesseries");
    assertThat(token.getUsername()).isEqualTo("joeuser");
    assertThat(token.getSeries()).isEqualTo("joesseries");
    assertThat(token.getTokenValue()).isEqualTo("atoken");
    assertThat(token.getDate()).isEqualTo(Timestamp.valueOf("2007-10-09 18:19:25.000000000"));
  }
  @Test public void retrievingTokenWithDuplicateSeriesReturnsNull(){
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries', 'joeuser', 'atoken2', '2007-10-19 18:19:25.000000000')");
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries', 'joeuser', 'atoken', '2007-10-09 18:19:25.000000000')");
    assertThat(repo.getTokenForSeries("joesseries")).isNull();
  }
  @Test public void retrievingTokenWithNoSeriesReturnsNull(){
    when(logger.isDebugEnabled()).thenReturn(true);
    assertThat(repo.getTokenForSeries("missingSeries")).isNull();
    verify(logger).isDebugEnabled();
    verify(logger).debug(eq("Querying token for series 'missingSeries' returned no results."),any(EmptyResultDataAccessException.class));
    verifyNoMoreInteractions(logger);
  }
  @Test public void removingUserTokensDeletesData(){
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries2', 'joeuser', 'atoken2', '2007-10-19 18:19:25.000000000')");
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries', 'joeuser', 'atoken', '2007-10-09 18:19:25.000000000')");
    repo.removeUserTokens("joeuser");
    List<Map<String,Object>> results=template.queryForList("select * from persistent_logins where username = 'joeuser'");
    assertThat(results).isEmpty();
  }
  @Test public void updatingTokenModifiesTokenValueAndLastUsed(){
    Timestamp ts=new Timestamp(System.currentTimeMillis() - 1);
    template.execute("insert into persistent_logins (series, username, token, last_used) values " + "('joesseries', 'joeuser', 'atoken', '" + ts.toString() + "')");
    repo.updateToken("joesseries","newtoken",new Date());
    Map<String,Object> results=template.queryForMap("select * from persistent_logins where series = 'joesseries'");
    assertThat(results.get("username")).isEqualTo("joeuser");
    assertThat(results.get("series")).isEqualTo("joesseries");
    assertThat(results.get("token")).isEqualTo("newtoken");
    Date lastUsed=(Date)results.get("last_used");
    assertThat(lastUsed.getTime() > ts.getTime()).isTrue();
  }
  @Test public void createTableOnStartupCreatesCorrectTable(){
    template.execute("drop table persistent_logins");
    repo=new JdbcTokenRepositoryImpl();
    repo.setDataSource(dataSource);
    repo.setCreateTableOnStartup(true);
    repo.initDao();
    template.queryForList("select username,series,token,last_used from persistent_logins");
  }
  @Test public void updateUsesLastUsed(){
    JdbcTemplate template=mock(JdbcTemplate.class);
    Date lastUsed=new Date(1424841314059L);
    JdbcTokenRepositoryImpl repository=new JdbcTokenRepositoryImpl();
    repository.setJdbcTemplate(template);
    repository.updateToken("series","token",lastUsed);
    verify(template).update(anyString(),anyString(),eq(lastUsed),anyString());
  }
}
