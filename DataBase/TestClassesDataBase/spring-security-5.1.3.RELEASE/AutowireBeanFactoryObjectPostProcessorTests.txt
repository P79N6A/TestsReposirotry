/** 
 * @author Rob Winch
 */
public class AutowireBeanFactoryObjectPostProcessorTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired private ObjectPostProcessor<Object> objectObjectPostProcessor;
  @Test public void postProcessWhenApplicationContextAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    ApplicationContextAware toPostProcess=mock(ApplicationContextAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setApplicationContext(isNotNull());
  }
  @Test public void postProcessWhenApplicationEventPublisherAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    ApplicationEventPublisherAware toPostProcess=mock(ApplicationEventPublisherAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setApplicationEventPublisher(isNotNull());
  }
  @Test public void postProcessWhenBeanClassLoaderAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    BeanClassLoaderAware toPostProcess=mock(BeanClassLoaderAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setBeanClassLoader(isNotNull());
  }
  @Test public void postProcessWhenBeanFactoryAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    BeanFactoryAware toPostProcess=mock(BeanFactoryAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setBeanFactory(isNotNull());
  }
  @Test public void postProcessWhenEnvironmentAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    EnvironmentAware toPostProcess=mock(EnvironmentAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setEnvironment(isNotNull());
  }
  @Test public void postProcessWhenMessageSourceAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    MessageSourceAware toPostProcess=mock(MessageSourceAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setMessageSource(isNotNull());
  }
  @Test public void postProcessWhenServletContextAwareThenAwareInvoked(){
    this.spring.register(Config.class).autowire();
    ServletContextAware toPostProcess=mock(ServletContextAware.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    verify(toPostProcess).setServletContext(isNotNull());
  }
  @Test public void postProcessWhenDisposableBeanThenAwareInvoked() throws Exception {
    this.spring.register(Config.class).autowire();
    DisposableBean toPostProcess=mock(DisposableBean.class);
    this.objectObjectPostProcessor.postProcess(toPostProcess);
    this.spring.getContext().close();
    verify(toPostProcess).destroy();
  }
@Configuration static class Config {
    @Bean public ObjectPostProcessor objectPostProcessor(    AutowireCapableBeanFactory beanFactory){
      return new AutowireBeanFactoryObjectPostProcessor(beanFactory);
    }
  }
  @Test public void postProcessWhenSmartInitializingSingletonThenAwareInvoked(){
    this.spring.register(Config.class,SmartConfig.class).autowire();
    SmartConfig config=this.spring.getContext().getBean(SmartConfig.class);
    verify(config.toTest).afterSingletonsInstantiated();
  }
@Configuration static class SmartConfig {
    SmartInitializingSingleton toTest=mock(SmartInitializingSingleton.class);
    @Autowired public void configure(    ObjectPostProcessor<Object> p){
      p.postProcess(this.toTest);
    }
  }
  @Test public void autowireBeanFactoryWhenBeanNameAutoProxyCreatorThenWorks() throws Exception {
    this.spring.testConfigLocations("AutowireBeanFactoryObjectPostProcessorTests-aopconfig.xml").autowire();
    MyAdvisedBean bean=this.spring.getContext().getBean(MyAdvisedBean.class);
    assertThat(bean.doStuff()).isEqualTo("null");
  }
@Configuration static class WithBeanNameAutoProxyCreatorConfig {
    @Bean public ObjectPostProcessor objectPostProcessor(    AutowireCapableBeanFactory beanFactory){
      return new AutowireBeanFactoryObjectPostProcessor(beanFactory);
    }
    @Autowired public void configure(    ObjectPostProcessor<Object> p){
      p.postProcess(new Object());
    }
  }
}
