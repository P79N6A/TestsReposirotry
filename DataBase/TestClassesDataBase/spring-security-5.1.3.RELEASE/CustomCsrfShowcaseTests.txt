@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=CustomCsrfShowcaseTests.Config.class) @WebAppConfiguration public class CustomCsrfShowcaseTests {
  @Autowired private WebApplicationContext context;
  @Autowired private CsrfTokenRepository repository;
  private MockMvc mvc;
  @Before public void setup(){
    mvc=MockMvcBuilders.webAppContextSetup(context).defaultRequest(get("/").with(csrf())).apply(springSecurity()).build();
  }
  @Test public void postWithCsrfWorks() throws Exception {
    mvc.perform(post("/").with(csrf())).andExpect(status().isNotFound());
  }
  @Test public void postWithCsrfWorksWithPut() throws Exception {
    mvc.perform(put("/").with(csrf())).andExpect(status().isNotFound());
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.csrf().csrfTokenRepository(repo());
    }
    @Autowired public void configureGlobal(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
    }
    @Bean public CsrfTokenRepository repo(){
      HttpSessionCsrfTokenRepository repo=new HttpSessionCsrfTokenRepository();
      repo.setParameterName("custom_csrf");
      return repo;
    }
  }
}
