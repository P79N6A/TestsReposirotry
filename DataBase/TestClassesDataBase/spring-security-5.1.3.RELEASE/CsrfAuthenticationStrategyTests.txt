/** 
 * @author Rob Winch
 */
@RunWith(MockitoJUnitRunner.class) public class CsrfAuthenticationStrategyTests {
  @Mock private CsrfTokenRepository csrfTokenRepository;
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private CsrfAuthenticationStrategy strategy;
  private CsrfToken existingToken;
  private CsrfToken generatedToken;
  @Before public void setup(){
    this.response=new MockHttpServletResponse();
    this.request=new MockHttpServletRequest();
    this.request.setAttribute(HttpServletResponse.class.getName(),this.response);
    this.strategy=new CsrfAuthenticationStrategy(this.csrfTokenRepository);
    this.existingToken=new DefaultCsrfToken("_csrf","_csrf","1");
    this.generatedToken=new DefaultCsrfToken("_csrf","_csrf","2");
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullCsrfTokenRepository(){
    new CsrfAuthenticationStrategy(null);
  }
  @Test public void logoutRemovesCsrfTokenAndSavesNew(){
    when(this.csrfTokenRepository.loadToken(this.request)).thenReturn(this.existingToken);
    when(this.csrfTokenRepository.generateToken(this.request)).thenReturn(this.generatedToken);
    this.strategy.onAuthentication(new TestingAuthenticationToken("user","password","ROLE_USER"),this.request,this.response);
    verify(this.csrfTokenRepository).saveToken(null,this.request,this.response);
    verify(this.csrfTokenRepository).saveToken(eq(this.generatedToken),any(HttpServletRequest.class),any(HttpServletResponse.class));
    CsrfToken tokenInRequest=(CsrfToken)this.request.getAttribute(CsrfToken.class.getName());
    assertThat(tokenInRequest.getToken()).isSameAs(this.generatedToken.getToken());
    assertThat(tokenInRequest.getHeaderName()).isSameAs(this.generatedToken.getHeaderName());
    assertThat(tokenInRequest.getParameterName()).isSameAs(this.generatedToken.getParameterName());
    assertThat(this.request.getAttribute(this.generatedToken.getParameterName())).isSameAs(tokenInRequest);
  }
  @Test public void delaySavingCsrf(){
    this.strategy=new CsrfAuthenticationStrategy(new LazyCsrfTokenRepository(this.csrfTokenRepository));
    when(this.csrfTokenRepository.loadToken(this.request)).thenReturn(this.existingToken);
    when(this.csrfTokenRepository.generateToken(this.request)).thenReturn(this.generatedToken);
    this.strategy.onAuthentication(new TestingAuthenticationToken("user","password","ROLE_USER"),this.request,this.response);
    verify(this.csrfTokenRepository).saveToken(null,this.request,this.response);
    verify(this.csrfTokenRepository,never()).saveToken(eq(this.generatedToken),any(HttpServletRequest.class),any(HttpServletResponse.class));
    CsrfToken tokenInRequest=(CsrfToken)this.request.getAttribute(CsrfToken.class.getName());
    tokenInRequest.getToken();
    verify(this.csrfTokenRepository).saveToken(eq(this.generatedToken),any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
  @Test public void logoutRemovesNoActionIfNullToken(){
    this.strategy.onAuthentication(new TestingAuthenticationToken("user","password","ROLE_USER"),this.request,this.response);
    verify(this.csrfTokenRepository,never()).saveToken(any(CsrfToken.class),any(HttpServletRequest.class),any(HttpServletResponse.class));
  }
}
