/** 
 * Tests for  {@link BindAuthenticator}.
 * @author Luke Taylor
 */
public class BindAuthenticatorTests extends AbstractLdapIntegrationTests {
  private BindAuthenticator authenticator;
  private Authentication bob;
  @Before public void setUp(){
    this.authenticator=new BindAuthenticator(getContextSource());
    this.authenticator.setMessageSource(new SpringSecurityMessageSource());
    this.bob=new UsernamePasswordAuthenticationToken("bob","bobspassword");
  }
  @Test(expected=BadCredentialsException.class) public void emptyPasswordIsRejected(){
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("jen",""));
  }
  @Test public void testAuthenticationWithCorrectPasswordSucceeds(){
    this.authenticator.setUserDnPatterns(new String[]{"uid={0},ou=people","cn={0},ou=people"});
    DirContextOperations user=this.authenticator.authenticate(this.bob);
    assertThat(user.getStringAttribute("uid")).isEqualTo("bob");
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("mouse, jerry","jerryspassword"));
  }
  @Test public void testAuthenticationWithInvalidUserNameFails(){
    this.authenticator.setUserDnPatterns(new String[]{"uid={0},ou=people"});
    try {
      this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("nonexistentsuser","password"));
      fail("Shouldn't be able to bind with invalid username");
    }
 catch (    BadCredentialsException expected) {
    }
  }
  @Test public void testAuthenticationWithUserSearch() throws Exception {
    this.authenticator.setUserSearch(new FilterBasedLdapUserSearch("ou=people","(uid={0})",getContextSource()));
    this.authenticator.afterPropertiesSet();
    DirContextOperations result=this.authenticator.authenticate(this.bob);
    assertThat(result.getStringAttribute("cn")).isEqualTo("Bob Hamilton");
    this.authenticator.setUserSearch(new FilterBasedLdapUserSearch("ou=people","(cn={0})",getContextSource()));
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("mouse, jerry","jerryspassword"));
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("slash/guy","slashguyspassword"));
    this.authenticator.setUserSearch(new FilterBasedLdapUserSearch("ou=\\\"quoted people\\\"","(cn={0})",getContextSource()));
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("quote\"guy","quoteguyspassword"));
    this.authenticator.setUserSearch(new FilterBasedLdapUserSearch("","(cn={0})",getContextSource()));
    this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("quote\"guy","quoteguyspassword"));
  }
  @Test public void testAuthenticationWithWrongPasswordFails(){
    this.authenticator.setUserDnPatterns(new String[]{"uid={0},ou=people"});
    try {
      this.authenticator.authenticate(new UsernamePasswordAuthenticationToken("bob","wrongpassword"));
      fail("Shouldn't be able to bind with wrong password");
    }
 catch (    BadCredentialsException expected) {
    }
  }
  @Test public void testUserDnPatternReturnsCorrectDn(){
    this.authenticator.setUserDnPatterns(new String[]{"cn={0},ou=people"});
    assertThat(this.authenticator.getUserDns("Joe").get(0)).isEqualTo("cn=Joe,ou=people");
  }
}
