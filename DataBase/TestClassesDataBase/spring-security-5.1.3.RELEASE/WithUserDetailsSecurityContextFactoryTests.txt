@RunWith(MockitoJUnitRunner.class) public class WithUserDetailsSecurityContextFactoryTests {
  @Mock private ReactiveUserDetailsService reactiveUserDetailsService;
  @Mock private UserDetailsService userDetailsService;
  @Mock private UserDetails userDetails;
  @Mock private BeanFactory beans;
  @Mock private WithUserDetails withUserDetails;
  private WithUserDetailsSecurityContextFactory factory;
  @Before public void setup(){
    factory=new WithUserDetailsSecurityContextFactory(beans);
  }
  @Test(expected=IllegalArgumentException.class) public void createSecurityContextNullValue(){
    factory.createSecurityContext(withUserDetails);
  }
  @Test(expected=IllegalArgumentException.class) public void createSecurityContextEmptyValue(){
    when(withUserDetails.value()).thenReturn("");
    factory.createSecurityContext(withUserDetails);
  }
  @Test public void createSecurityContextWithExistingUser(){
    String username="user";
    when(this.beans.getBean(ReactiveUserDetailsService.class)).thenThrow(new NoSuchBeanDefinitionException(""));
    when(beans.getBean(UserDetailsService.class)).thenReturn(userDetailsService);
    when(withUserDetails.value()).thenReturn(username);
    when(userDetailsService.loadUserByUsername(username)).thenReturn(userDetails);
    SecurityContext context=factory.createSecurityContext(withUserDetails);
    assertThat(context.getAuthentication()).isInstanceOf(UsernamePasswordAuthenticationToken.class);
    assertThat(context.getAuthentication().getPrincipal()).isEqualTo(userDetails);
    verify(beans).getBean(UserDetailsService.class);
  }
  @Test public void createSecurityContextWithUserDetailsServiceName(){
    String beanName="secondUserDetailsServiceBean";
    String username="user";
    when(this.beans.getBean(beanName,ReactiveUserDetailsService.class)).thenThrow(new BeanNotOfRequiredTypeException("",ReactiveUserDetailsService.class,UserDetailsService.class));
    when(withUserDetails.value()).thenReturn(username);
    when(withUserDetails.userDetailsServiceBeanName()).thenReturn(beanName);
    when(userDetailsService.loadUserByUsername(username)).thenReturn(userDetails);
    when(beans.getBean(beanName,UserDetailsService.class)).thenReturn(userDetailsService);
    SecurityContext context=factory.createSecurityContext(withUserDetails);
    assertThat(context.getAuthentication()).isInstanceOf(UsernamePasswordAuthenticationToken.class);
    assertThat(context.getAuthentication().getPrincipal()).isEqualTo(userDetails);
    verify(beans).getBean(beanName,UserDetailsService.class);
  }
  @Test public void createSecurityContextWithReactiveUserDetailsService(){
    String username="user";
    when(withUserDetails.value()).thenReturn(username);
    when(this.beans.getBean(ReactiveUserDetailsService.class)).thenReturn(this.reactiveUserDetailsService);
    when(this.reactiveUserDetailsService.findByUsername(username)).thenReturn(Mono.just(userDetails));
    SecurityContext context=factory.createSecurityContext(withUserDetails);
    assertThat(context.getAuthentication()).isInstanceOf(UsernamePasswordAuthenticationToken.class);
    assertThat(context.getAuthentication().getPrincipal()).isEqualTo(userDetails);
    verify(this.beans).getBean(ReactiveUserDetailsService.class);
  }
  @Test public void createSecurityContextWithReactiveUserDetailsServiceAndBeanName(){
    String beanName="secondUserDetailsServiceBean";
    String username="user";
    when(withUserDetails.value()).thenReturn(username);
    when(withUserDetails.userDetailsServiceBeanName()).thenReturn(beanName);
    when(this.beans.getBean(beanName,ReactiveUserDetailsService.class)).thenReturn(this.reactiveUserDetailsService);
    when(this.reactiveUserDetailsService.findByUsername(username)).thenReturn(Mono.just(userDetails));
    SecurityContext context=factory.createSecurityContext(withUserDetails);
    assertThat(context.getAuthentication()).isInstanceOf(UsernamePasswordAuthenticationToken.class);
    assertThat(context.getAuthentication().getPrincipal()).isEqualTo(userDetails);
    verify(this.beans).getBean(beanName,ReactiveUserDetailsService.class);
  }
}
