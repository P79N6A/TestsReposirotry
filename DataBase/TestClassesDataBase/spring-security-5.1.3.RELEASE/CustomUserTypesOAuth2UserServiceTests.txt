/** 
 * Tests for  {@link CustomUserTypesOAuth2UserService}.
 * @author Joe Grandja
 */
@PowerMockIgnore("okhttp3.*") @PrepareForTest(ClientRegistration.class) @RunWith(PowerMockRunner.class) public class CustomUserTypesOAuth2UserServiceTests {
  private ClientRegistration clientRegistration;
  private ClientRegistration.ProviderDetails providerDetails;
  private ClientRegistration.ProviderDetails.UserInfoEndpoint userInfoEndpoint;
  private OAuth2AccessToken accessToken;
  private CustomUserTypesOAuth2UserService userService;
  private MockWebServer server;
  @Rule public ExpectedException exception=ExpectedException.none();
  @Before public void setUp() throws Exception {
    this.server=new MockWebServer();
    this.server.start();
    this.clientRegistration=mock(ClientRegistration.class);
    this.providerDetails=mock(ClientRegistration.ProviderDetails.class);
    this.userInfoEndpoint=mock(ClientRegistration.ProviderDetails.UserInfoEndpoint.class);
    when(this.clientRegistration.getProviderDetails()).thenReturn(this.providerDetails);
    when(this.providerDetails.getUserInfoEndpoint()).thenReturn(this.userInfoEndpoint);
    String registrationId="client-registration-id-1";
    when(this.clientRegistration.getRegistrationId()).thenReturn(registrationId);
    this.accessToken=mock(OAuth2AccessToken.class);
    Map<String,Class<? extends OAuth2User>> customUserTypes=new HashMap<>();
    customUserTypes.put(registrationId,CustomOAuth2User.class);
    this.userService=new CustomUserTypesOAuth2UserService(customUserTypes);
  }
  @After public void cleanup() throws Exception {
    this.server.shutdown();
  }
  @Test public void constructorWhenCustomUserTypesIsNullThenThrowIllegalArgumentException(){
    this.exception.expect(IllegalArgumentException.class);
    new CustomUserTypesOAuth2UserService(null);
  }
  @Test public void constructorWhenCustomUserTypesIsEmptyThenThrowIllegalArgumentException(){
    this.exception.expect(IllegalArgumentException.class);
    new CustomUserTypesOAuth2UserService(Collections.emptyMap());
  }
  @Test public void setRequestEntityConverterWhenNullThenThrowIllegalArgumentException(){
    this.exception.expect(IllegalArgumentException.class);
    this.userService.setRequestEntityConverter(null);
  }
  @Test public void setRestOperationsWhenNullThenThrowIllegalArgumentException(){
    this.exception.expect(IllegalArgumentException.class);
    this.userService.setRestOperations(null);
  }
  @Test public void loadUserWhenUserRequestIsNullThenThrowIllegalArgumentException(){
    this.exception.expect(IllegalArgumentException.class);
    this.userService.loadUser(null);
  }
  @Test public void loadUserWhenCustomUserTypeNotFoundThenReturnNull(){
    when(this.clientRegistration.getRegistrationId()).thenReturn("other-client-registration-id-1");
    OAuth2User user=this.userService.loadUser(new OAuth2UserRequest(this.clientRegistration,this.accessToken));
    assertThat(user).isNull();
  }
  @Test public void loadUserWhenUserInfoSuccessResponseThenReturnUser(){
    String userInfoResponse="{\n" + "	\"id\": \"12345\",\n" + "   \"name\": \"first last\",\n"+ "   \"login\": \"user1\",\n"+ "   \"email\": \"user1@example.com\"\n"+ "}\n";
    this.server.enqueue(jsonResponse(userInfoResponse));
    String userInfoUri=this.server.url("/user").toString();
    when(this.userInfoEndpoint.getUri()).thenReturn(userInfoUri);
    when(this.accessToken.getTokenValue()).thenReturn("access-token");
    OAuth2User user=this.userService.loadUser(new OAuth2UserRequest(this.clientRegistration,this.accessToken));
    assertThat(user.getName()).isEqualTo("first last");
    assertThat(user.getAttributes().size()).isEqualTo(4);
    assertThat(user.getAttributes().get("id")).isEqualTo("12345");
    assertThat(user.getAttributes().get("name")).isEqualTo("first last");
    assertThat(user.getAttributes().get("login")).isEqualTo("user1");
    assertThat(user.getAttributes().get("email")).isEqualTo("user1@example.com");
    assertThat(user.getAuthorities().size()).isEqualTo(1);
    assertThat(user.getAuthorities().iterator().next().getAuthority()).isEqualTo("ROLE_USER");
  }
  @Test public void loadUserWhenUserInfoSuccessResponseInvalidThenThrowOAuth2AuthenticationException(){
    this.exception.expect(OAuth2AuthenticationException.class);
    this.exception.expectMessage(containsString("[invalid_user_info_response] An error occurred while attempting to retrieve the UserInfo Resource"));
    String userInfoResponse="{\n" + "	\"id\": \"12345\",\n" + "   \"name\": \"first last\",\n"+ "   \"login\": \"user1\",\n"+ "   \"email\": \"user1@example.com\"\n";
    this.server.enqueue(jsonResponse(userInfoResponse));
    String userInfoUri=this.server.url("/user").toString();
    when(this.userInfoEndpoint.getUri()).thenReturn(userInfoUri);
    when(this.accessToken.getTokenValue()).thenReturn("access-token");
    this.userService.loadUser(new OAuth2UserRequest(this.clientRegistration,this.accessToken));
  }
  @Test public void loadUserWhenServerErrorThenThrowOAuth2AuthenticationException(){
    this.exception.expect(OAuth2AuthenticationException.class);
    this.exception.expectMessage(containsString("[invalid_user_info_response] An error occurred while attempting to retrieve the UserInfo Resource: 500 Server Error"));
    this.server.enqueue(new MockResponse().setResponseCode(500));
    String userInfoUri=this.server.url("/user").toString();
    when(this.userInfoEndpoint.getUri()).thenReturn(userInfoUri);
    when(this.accessToken.getTokenValue()).thenReturn("access-token");
    this.userService.loadUser(new OAuth2UserRequest(this.clientRegistration,this.accessToken));
  }
  @Test public void loadUserWhenUserInfoUriInvalidThenThrowOAuth2AuthenticationException(){
    this.exception.expect(OAuth2AuthenticationException.class);
    this.exception.expectMessage(containsString("[invalid_user_info_response] An error occurred while attempting to retrieve the UserInfo Resource"));
    String userInfoUri="http://invalid-provider.com/user";
    when(this.userInfoEndpoint.getUri()).thenReturn(userInfoUri);
    when(this.accessToken.getTokenValue()).thenReturn("access-token");
    this.userService.loadUser(new OAuth2UserRequest(this.clientRegistration,this.accessToken));
  }
  private MockResponse jsonResponse(  String json){
    return new MockResponse().setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON_VALUE).setBody(json);
  }
public static class CustomOAuth2User implements OAuth2User {
    private List<GrantedAuthority> authorities=AuthorityUtils.createAuthorityList("ROLE_USER");
    private String id;
    private String name;
    private String login;
    private String email;
    public CustomOAuth2User(){
    }
    @Override public Collection<? extends GrantedAuthority> getAuthorities(){
      return this.authorities;
    }
    @Override public Map<String,Object> getAttributes(){
      Map<String,Object> attributes=new HashMap<>();
      attributes.put("id",this.getId());
      attributes.put("name",this.getName());
      attributes.put("login",this.getLogin());
      attributes.put("email",this.getEmail());
      return attributes;
    }
    public String getId(){
      return this.id;
    }
    public void setId(    String id){
      this.id=id;
    }
    @Override public String getName(){
      return this.name;
    }
    public void setName(    String name){
      this.name=name;
    }
    public String getLogin(){
      return this.login;
    }
    public void setLogin(    String login){
      this.login=login;
    }
    public String getEmail(){
      return this.email;
    }
    public void setEmail(    String email){
      this.email=email;
    }
  }
}
