/** 
 * Test class for  {@link ConsoleAuditLogger}.
 * @author Andrei Stefan
 */
public class AuditLoggerTests {
  private PrintStream console;
  private ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  private ConsoleAuditLogger logger;
  private AuditableAccessControlEntry ace;
  @Before public void setUp() throws Exception {
    logger=new ConsoleAuditLogger();
    ace=mock(AuditableAccessControlEntry.class);
    console=System.out;
    System.setOut(new PrintStream(bytes));
  }
  @After public void tearDown() throws Exception {
    System.setOut(console);
    bytes.reset();
  }
  @Test public void nonAuditableAceIsIgnored(){
    AccessControlEntry ace=mock(AccessControlEntry.class);
    logger.logIfNeeded(true,ace);
    assertThat(bytes.size()).isZero();
  }
  @Test public void successIsNotLoggedIfAceDoesntRequireSuccessAudit() throws Exception {
    when(ace.isAuditSuccess()).thenReturn(false);
    logger.logIfNeeded(true,ace);
    assertThat(bytes.size()).isZero();
  }
  @Test public void successIsLoggedIfAceRequiresSuccessAudit() throws Exception {
    when(ace.isAuditSuccess()).thenReturn(true);
    logger.logIfNeeded(true,ace);
    assertThat(bytes.toString()).startsWith("GRANTED due to ACE");
  }
  @Test public void failureIsntLoggedIfAceDoesntRequireFailureAudit() throws Exception {
    when(ace.isAuditFailure()).thenReturn(false);
    logger.logIfNeeded(false,ace);
    assertThat(bytes.size()).isZero();
  }
  @Test public void failureIsLoggedIfAceRequiresFailureAudit() throws Exception {
    when(ace.isAuditFailure()).thenReturn(true);
    logger.logIfNeeded(false,ace);
    assertThat(bytes.toString()).startsWith("DENIED due to ACE");
  }
}
