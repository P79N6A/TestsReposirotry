/** 
 * Tests for  {@link FeaturePolicyHeaderWriter}.
 * @author Vedran Pavic
 */
public class FeaturePolicyHeaderWriterTests {
  private static final String DEFAULT_POLICY_DIRECTIVES="geolocation 'self'";
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private FeaturePolicyHeaderWriter writer;
  @Before public void setUp(){
    this.request=new MockHttpServletRequest();
    this.response=new MockHttpServletResponse();
    this.writer=new FeaturePolicyHeaderWriter(DEFAULT_POLICY_DIRECTIVES);
  }
  @Test public void writeHeadersFeaturePolicyDefault(){
    writer.writeHeaders(this.request,this.response);
    assertThat(this.response.getHeaderNames()).hasSize(1);
    assertThat(this.response.getHeader("Feature-Policy")).isEqualTo(DEFAULT_POLICY_DIRECTIVES);
  }
  @Test public void createWriterWithNullDirectivesShouldThrowException(){
    assertThatThrownBy(() -> new FeaturePolicyHeaderWriter(null)).isInstanceOf(IllegalArgumentException.class).hasMessage("policyDirectives must not be null or empty");
  }
  @Test public void createWriterWithEmptyDirectivesShouldThrowException(){
    assertThatThrownBy(() -> new FeaturePolicyHeaderWriter("")).isInstanceOf(IllegalArgumentException.class).hasMessage("policyDirectives must not be null or empty");
  }
}
