@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=SecurityMockMvcResultMatchersTests.Config.class) @WebAppConfiguration public class SecurityMockMvcResultMatchersTests {
  @Autowired private WebApplicationContext context;
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.context).apply(springSecurity()).build();
  }
  @Test public void withAuthenticationWhenMatchesThenSuccess() throws Exception {
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(auth -> assertThat(auth).isInstanceOf(UsernamePasswordAuthenticationToken.class)));
  }
  @Test(expected=AssertionError.class) public void withAuthenticationWhenNotMatchesThenFails() throws Exception {
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withAuthentication(auth -> assertThat(auth.getName()).isEqualTo("notmatch")));
  }
  @Test public void withRolesNotOrderSensitive() throws Exception {
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withRoles("USER","SELLER")).andExpect(authenticated().withRoles("SELLER","USER"));
  }
  @Test(expected=AssertionError.class) public void withRolesFailsIfNotAllRoles() throws Exception {
    this.mockMvc.perform(formLogin()).andExpect(authenticated().withRoles("USER"));
  }
@EnableWebSecurity @EnableWebMvc static class Config extends WebSecurityConfigurerAdapter {
    @Bean public UserDetailsService userDetailsService(){
      UserDetails user=User.withDefaultPasswordEncoder().username("user").password("password").roles("USER","SELLER").build();
      return new InMemoryUserDetailsManager(user);
    }
@RestController static class Controller {
      @RequestMapping("/") public String ok(){
        return "ok";
      }
    }
  }
}
