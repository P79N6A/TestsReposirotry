/** 
 * @author Rob Winch
 * @author Josh Cummings
 */
public class HttpConfigTests {
  private static final String CONFIG_LOCATION_PREFIX="classpath:org/springframework/security/config/http/HttpConfigTests";
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired MockMvc mvc;
  @Test public void getWhenUsingMinimalConfigurationThenRedirectsToLogin() throws Exception {
    this.spring.configLocations(this.xml("Minimal")).autowire();
    this.mvc.perform(get("/")).andExpect(status().isFound()).andExpect(redirectedUrl("http://localhost/login"));
  }
  @Test public void getWhenUsingMinimalConfigurationThenPreventsSessionAsUrlParameter() throws Exception {
    this.spring.configLocations(this.xml("Minimal")).autowire();
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/");
    MockHttpServletResponse response=new MockHttpServletResponse();
    FilterChainProxy proxy=this.spring.getContext().getBean(FilterChainProxy.class);
    proxy.doFilter(request,new EncodeUrlDenyingHttpServletResponseWrapper(response),(req,resp) -> {
    }
);
    assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_MOVED_TEMPORARILY);
    assertThat(response.getRedirectedUrl()).isEqualTo("http://localhost/login");
  }
private static class EncodeUrlDenyingHttpServletResponseWrapper extends HttpServletResponseWrapper {
    public EncodeUrlDenyingHttpServletResponseWrapper(    HttpServletResponse response){
      super(response);
    }
    @Override public String encodeURL(    String url){
      throw new RuntimeException("Unexpected invocation of encodeURL");
    }
    @Override public String encodeRedirectURL(    String url){
      throw new RuntimeException("Unexpected invocation of encodeURL");
    }
    @Override public String encodeUrl(    String url){
      throw new RuntimeException("Unexpected invocation of encodeURL");
    }
    @Override public String encodeRedirectUrl(    String url){
      throw new RuntimeException("Unexpected invocation of encodeURL");
    }
  }
  private String xml(  String configName){
    return CONFIG_LOCATION_PREFIX + "-" + configName+ ".xml";
  }
}
