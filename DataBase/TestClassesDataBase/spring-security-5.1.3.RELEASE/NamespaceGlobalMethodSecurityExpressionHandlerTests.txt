/** 
 * @author Rob Winch
 * @author Josh Cummings
 */
@RunWith(SpringJUnit4ClassRunner.class) @SecurityTestExecutionListeners public class NamespaceGlobalMethodSecurityExpressionHandlerTests {
  @Rule public final SpringTestRule spring=new SpringTestRule();
  @Autowired(required=false) private MethodSecurityService service;
  @Test @WithMockUser public void methodSecurityWhenUsingCustomPermissionEvaluatorThenPreAuthorizesAccordingly(){
    this.spring.register(CustomAccessDecisionManagerConfig.class,MethodSecurityServiceConfig.class).autowire();
    assertThatCode(() -> this.service.hasPermission("granted")).doesNotThrowAnyException();
    assertThatThrownBy(() -> this.service.hasPermission("denied")).isInstanceOf(AccessDeniedException.class);
  }
  @Test @WithMockUser public void methodSecurityWhenUsingCustomPermissionEvaluatorThenPostAuthorizesAccordingly(){
    this.spring.register(CustomAccessDecisionManagerConfig.class,MethodSecurityServiceConfig.class).autowire();
    assertThatCode(() -> this.service.postHasPermission("granted")).doesNotThrowAnyException();
    assertThatThrownBy(() -> this.service.postHasPermission("denied")).isInstanceOf(AccessDeniedException.class);
  }
@EnableGlobalMethodSecurity(prePostEnabled=true) public static class CustomAccessDecisionManagerConfig extends GlobalMethodSecurityConfiguration {
    @Override protected MethodSecurityExpressionHandler createExpressionHandler(){
      DefaultMethodSecurityExpressionHandler expressionHandler=new DefaultMethodSecurityExpressionHandler();
      expressionHandler.setPermissionEvaluator(new PermissionEvaluator(){
        public boolean hasPermission(        Authentication authentication,        Object targetDomainObject,        Object permission){
          return "granted".equals(targetDomainObject);
        }
        public boolean hasPermission(        Authentication authentication,        Serializable targetId,        String targetType,        Object permission){
          throw new UnsupportedOperationException();
        }
      }
);
      return expressionHandler;
    }
  }
}
