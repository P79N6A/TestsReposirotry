/** 
 * Tests for the  {@code HeadersFilter}
 * @author Marten Deinum
 * @author Rob Winch
 * @since 3.2
 */
@RunWith(MockitoJUnitRunner.class) public class HeaderWriterFilterTests {
  @Mock private HeaderWriter writer1;
  @Mock private HeaderWriter writer2;
  @Test(expected=IllegalArgumentException.class) public void noHeadersConfigured() throws Exception {
    List<HeaderWriter> headerWriters=new ArrayList<>();
    new HeaderWriterFilter(headerWriters);
  }
  @Test(expected=IllegalArgumentException.class) public void constructorNullWriters() throws Exception {
    new HeaderWriterFilter(null);
  }
  @Test public void additionalHeadersShouldBeAddedToTheResponse() throws Exception {
    List<HeaderWriter> headerWriters=new ArrayList<>();
    headerWriters.add(this.writer1);
    headerWriters.add(this.writer2);
    HeaderWriterFilter filter=new HeaderWriterFilter(headerWriters);
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain filterChain=new MockFilterChain();
    filter.doFilter(request,response,filterChain);
    verify(this.writer1).writeHeaders(request,response);
    verify(this.writer2).writeHeaders(request,response);
    HeaderWriterFilter.HeaderWriterRequest wrappedRequest=(HeaderWriterFilter.HeaderWriterRequest)filterChain.getRequest();
    assertThat(wrappedRequest.getRequest()).isEqualTo(request);
  }
  @Test public void headersDelayed() throws Exception {
    HeaderWriterFilter filter=new HeaderWriterFilter(Arrays.<HeaderWriter>asList(this.writer1));
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,new FilterChain(){
      @Override public void doFilter(      ServletRequest request,      ServletResponse response) throws IOException, ServletException {
        verifyZeroInteractions(HeaderWriterFilterTests.this.writer1);
        response.flushBuffer();
        verify(HeaderWriterFilterTests.this.writer1).writeHeaders(any(HttpServletRequest.class),any(HttpServletResponse.class));
      }
    }
);
    verifyNoMoreInteractions(this.writer1);
  }
  @Test public void doFilterWhenRequestContainsIncludeThenHeadersStillWritten() throws Exception {
    HeaderWriterFilter filter=new HeaderWriterFilter(Collections.singletonList(this.writer1));
    MockHttpServletRequest mockRequest=new MockHttpServletRequest();
    MockHttpServletResponse mockResponse=new MockHttpServletResponse();
    filter.doFilter(mockRequest,mockResponse,(request,response) -> {
      verifyZeroInteractions(HeaderWriterFilterTests.this.writer1);
      request.getRequestDispatcher("/").include(request,response);
      verify(HeaderWriterFilterTests.this.writer1).writeHeaders(any(HttpServletRequest.class),any(HttpServletResponse.class));
    }
);
    verifyNoMoreInteractions(this.writer1);
  }
}
