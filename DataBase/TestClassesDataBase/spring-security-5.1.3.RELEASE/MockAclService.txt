private class MockAclService implements MutableAclService {
  public MutableAcl createAcl(  ObjectIdentity objectIdentity) throws AlreadyExistsException {
    return null;
  }
  public void deleteAcl(  ObjectIdentity objectIdentity,  boolean deleteChildren) throws ChildrenExistException {
  }
  @SuppressWarnings("unchecked") public MutableAcl updateAcl(  MutableAcl acl) throws NotFoundException {
    List<AccessControlEntry> oldAces=acl.getEntries();
    Field acesField=FieldUtils.getField(AclImpl.class,"aces");
    acesField.setAccessible(true);
    List newAces;
    try {
      newAces=(List)acesField.get(acl);
      newAces.clear();
      for (int i=0; i < oldAces.size(); i++) {
        AccessControlEntry ac=oldAces.get(i);
        newAces.add(new AccessControlEntryImpl((i + 1),ac.getAcl(),ac.getSid(),ac.getPermission(),ac.isGranting(),((AuditableAccessControlEntry)ac).isAuditSuccess(),((AuditableAccessControlEntry)ac).isAuditFailure()));
      }
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
    return acl;
  }
  public List<ObjectIdentity> findChildren(  ObjectIdentity parentIdentity){
    return null;
  }
  public Acl readAclById(  ObjectIdentity object) throws NotFoundException {
    return null;
  }
  public Acl readAclById(  ObjectIdentity object,  List<Sid> sids) throws NotFoundException {
    return null;
  }
  public Map<ObjectIdentity,Acl> readAclsById(  List<ObjectIdentity> objects) throws NotFoundException {
    return null;
  }
  public Map<ObjectIdentity,Acl> readAclsById(  List<ObjectIdentity> objects,  List<Sid> sids) throws NotFoundException {
    return null;
  }
}
