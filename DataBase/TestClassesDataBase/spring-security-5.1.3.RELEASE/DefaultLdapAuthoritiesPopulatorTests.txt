/** 
 * @author Luke Taylor
 */
@SuppressWarnings({"deprecation"}) public class DefaultLdapAuthoritiesPopulatorTests extends AbstractLdapIntegrationTests {
  private DefaultLdapAuthoritiesPopulator populator;
  @Before public void setUp() throws Exception {
    populator=new DefaultLdapAuthoritiesPopulator(getContextSource(),"ou=groups");
    populator.setIgnorePartialResultException(false);
  }
  @Test public void defaultRoleIsAssignedWhenSet(){
    populator.setDefaultRole("ROLE_USER");
    assertThat(populator.getContextSource()).isSameAs(getContextSource());
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("cn=notfound"));
    Collection<GrantedAuthority> authorities=populator.getGrantedAuthorities(ctx,"notfound");
    assertThat(authorities).hasSize(1);
    assertThat(AuthorityUtils.authorityListToSet(authorities).contains("ROLE_USER")).isTrue();
  }
  @Test public void nullSearchBaseIsAccepted() throws Exception {
    populator=new DefaultLdapAuthoritiesPopulator(getContextSource(),null);
    populator.setDefaultRole("ROLE_USER");
    Collection<GrantedAuthority> authorities=populator.getGrantedAuthorities(new DirContextAdapter(new DistinguishedName("cn=notused")),"notused");
    assertThat(authorities).hasSize(1);
    assertThat(AuthorityUtils.authorityListToSet(authorities).contains("ROLE_USER")).isTrue();
  }
  @Test public void groupSearchReturnsExpectedRoles(){
    populator.setRolePrefix("ROLE_");
    populator.setGroupRoleAttribute("ou");
    populator.setSearchSubtree(true);
    populator.setSearchSubtree(false);
    populator.setConvertToUpperCase(true);
    populator.setGroupSearchFilter("(member={0})");
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("uid=ben,ou=people,dc=springframework,dc=org"));
    Set<String> authorities=AuthorityUtils.authorityListToSet(populator.getGrantedAuthorities(ctx,"ben"));
    assertThat(authorities).as("Should have 2 roles").hasSize(2);
    assertThat(authorities.contains("ROLE_DEVELOPER")).isTrue();
    assertThat(authorities.contains("ROLE_MANAGER")).isTrue();
  }
  @Test public void useOfUsernameParameterReturnsExpectedRoles(){
    populator.setGroupRoleAttribute("ou");
    populator.setConvertToUpperCase(true);
    populator.setGroupSearchFilter("(ou={1})");
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("uid=ben,ou=people,dc=springframework,dc=org"));
    Set<String> authorities=AuthorityUtils.authorityListToSet(populator.getGrantedAuthorities(ctx,"manager"));
    assertThat(authorities).as("Should have 1 role").hasSize(1);
    assertThat(authorities.contains("ROLE_MANAGER")).isTrue();
  }
  @Test public void subGroupRolesAreNotFoundByDefault(){
    populator.setGroupRoleAttribute("ou");
    populator.setConvertToUpperCase(true);
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("uid=ben,ou=people,dc=springframework,dc=org"));
    Set<String> authorities=AuthorityUtils.authorityListToSet(populator.getGrantedAuthorities(ctx,"manager"));
    assertThat(authorities).as("Should have 2 roles").hasSize(2);
    assertThat(authorities.contains("ROLE_MANAGER")).isTrue();
    assertThat(authorities.contains("ROLE_DEVELOPER")).isTrue();
  }
  @Test public void subGroupRolesAreFoundWhenSubtreeSearchIsEnabled(){
    populator.setGroupRoleAttribute("ou");
    populator.setConvertToUpperCase(true);
    populator.setSearchSubtree(true);
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("uid=ben,ou=people,dc=springframework,dc=org"));
    Set<String> authorities=AuthorityUtils.authorityListToSet(populator.getGrantedAuthorities(ctx,"manager"));
    assertThat(authorities).as("Should have 3 roles").hasSize(3);
    assertThat(authorities.contains("ROLE_MANAGER")).isTrue();
    assertThat(authorities.contains("ROLE_SUBMANAGER")).isTrue();
    assertThat(authorities.contains("ROLE_DEVELOPER")).isTrue();
  }
  @Test public void extraRolesAreAdded() throws Exception {
    populator=new DefaultLdapAuthoritiesPopulator(getContextSource(),null){
      @Override protected Set<GrantedAuthority> getAdditionalRoles(      DirContextOperations user,      String username){
        return new HashSet<>(AuthorityUtils.createAuthorityList("ROLE_EXTRA"));
      }
    }
;
    Collection<GrantedAuthority> authorities=populator.getGrantedAuthorities(new DirContextAdapter(new DistinguishedName("cn=notused")),"notused");
    assertThat(authorities).hasSize(1);
    assertThat(AuthorityUtils.authorityListToSet(authorities).contains("ROLE_EXTRA")).isTrue();
  }
  @Test public void userDnWithEscapedCharacterParameterReturnsExpectedRoles(){
    populator.setGroupRoleAttribute("ou");
    populator.setConvertToUpperCase(true);
    populator.setGroupSearchFilter("(member={0})");
    DirContextAdapter ctx=new DirContextAdapter(new DistinguishedName("cn=mouse\\, jerry,ou=people,dc=springframework,dc=org"));
    Set<String> authorities=AuthorityUtils.authorityListToSet(populator.getGrantedAuthorities(ctx,"notused"));
    assertThat(authorities).as("Should have 1 role").hasSize(1);
    assertThat(authorities.contains("ROLE_MANAGER")).isTrue();
  }
}
