/** 
 * Tests  {@link UsernamePasswordAuthenticationToken}.
 * @author Ben Alex
 */
public class UsernamePasswordAuthenticationTokenTests {
  @Test public void authenticatedPropertyContractIsSatisfied(){
    UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken("Test","Password",AuthorityUtils.NO_AUTHORITIES);
    assertThat(token.isAuthenticated()).isTrue();
    token.setAuthenticated(false);
    assertThat(!token.isAuthenticated()).isTrue();
    token=new UsernamePasswordAuthenticationToken("Test","Password");
    assertThat(!token.isAuthenticated()).isTrue();
    token.setAuthenticated(false);
    assertThat(!token.isAuthenticated()).isTrue();
    try {
      token.setAuthenticated(true);
      fail("Should have prohibited setAuthenticated(true)");
    }
 catch (    IllegalArgumentException expected) {
    }
  }
  @Test public void gettersReturnCorrectData(){
    UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken("Test","Password",AuthorityUtils.createAuthorityList("ROLE_ONE","ROLE_TWO"));
    assertThat(token.getPrincipal()).isEqualTo("Test");
    assertThat(token.getCredentials()).isEqualTo("Password");
    assertThat(AuthorityUtils.authorityListToSet(token.getAuthorities())).contains("ROLE_ONE");
    assertThat(AuthorityUtils.authorityListToSet(token.getAuthorities())).contains("ROLE_TWO");
  }
  @Test(expected=NoSuchMethodException.class) public void testNoArgConstructorDoesntExist() throws Exception {
    Class<?> clazz=UsernamePasswordAuthenticationToken.class;
    clazz.getDeclaredConstructor((Class[])null);
  }
}
