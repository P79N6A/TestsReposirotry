/** 
 * @author Joe Grandja
 */
public class ContentSecurityPolicyHeaderWriterTests {
  private static final String DEFAULT_POLICY_DIRECTIVES="default-src 'self'";
  private MockHttpServletRequest request;
  private MockHttpServletResponse response;
  private ContentSecurityPolicyHeaderWriter writer;
  @Before public void setup(){
    request=new MockHttpServletRequest();
    request.setSecure(true);
    response=new MockHttpServletResponse();
    writer=new ContentSecurityPolicyHeaderWriter(DEFAULT_POLICY_DIRECTIVES);
  }
  @Test public void writeHeadersContentSecurityPolicyDefault(){
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeader("Content-Security-Policy")).isEqualTo(DEFAULT_POLICY_DIRECTIVES);
  }
  @Test public void writeHeadersContentSecurityPolicyCustom(){
    String policyDirectives="default-src 'self'; " + "object-src plugins1.example.com plugins2.example.com; " + "script-src trustedscripts.example.com";
    writer=new ContentSecurityPolicyHeaderWriter(policyDirectives);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeader("Content-Security-Policy")).isEqualTo(policyDirectives);
  }
  @Test public void writeHeadersContentSecurityPolicyReportOnlyDefault(){
    writer.setReportOnly(true);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeader("Content-Security-Policy-Report-Only")).isEqualTo(DEFAULT_POLICY_DIRECTIVES);
  }
  @Test public void writeHeadersContentSecurityPolicyReportOnlyCustom(){
    String policyDirectives="default-src https:; report-uri https://example.com/";
    writer=new ContentSecurityPolicyHeaderWriter(policyDirectives);
    writer.setReportOnly(true);
    writer.writeHeaders(request,response);
    assertThat(response.getHeaderNames()).hasSize(1);
    assertThat(response.getHeader("Content-Security-Policy-Report-Only")).isEqualTo(policyDirectives);
  }
  @Test(expected=IllegalArgumentException.class) public void writeHeadersContentSecurityPolicyInvalid(){
    writer=new ContentSecurityPolicyHeaderWriter("");
    writer=new ContentSecurityPolicyHeaderWriter(null);
  }
}
