/** 
 * @author Luke Taylor
 * @author Rob Winch
 */
public class LdapServerBeanDefinitionParserTests {
  InMemoryXmlApplicationContext appCtx;
  @After public void closeAppContext(){
    if (appCtx != null) {
      appCtx.close();
      appCtx=null;
    }
  }
  @Test public void embeddedServerCreationContainsExpectedContextSourceAndData(){
    appCtx=new InMemoryXmlApplicationContext("<ldap-server ldif='classpath:test-server.ldif'/>");
    DefaultSpringSecurityContextSource contextSource=(DefaultSpringSecurityContextSource)appCtx.getBean(BeanIds.CONTEXT_SOURCE);
    LdapTemplate template=new LdapTemplate(contextSource);
    template.lookup("uid=ben,ou=people");
  }
  @Test public void useOfUrlAttributeCreatesCorrectContextSource() throws Exception {
    int port=getDefaultPort();
    appCtx=new InMemoryXmlApplicationContext("<ldap-server ldif='classpath:test-server.ldif' port='" + port + "'/>"+ "<ldap-server ldif='classpath:test-server.ldif' id='blah' url='ldap://127.0.0.1:"+ port+ "/dc=springframework,dc=org' />");
    appCtx.getBean(BeanIds.CONTEXT_SOURCE);
    DefaultSpringSecurityContextSource contextSource=(DefaultSpringSecurityContextSource)appCtx.getBean("blah");
    LdapTemplate template=new LdapTemplate(contextSource);
    template.lookup("uid=ben,ou=people");
  }
  @Test public void loadingSpecificLdifFileIsSuccessful(){
    appCtx=new InMemoryXmlApplicationContext("<ldap-server ldif='classpath*:test-server2.xldif' root='dc=monkeymachine,dc=co,dc=uk' />");
    DefaultSpringSecurityContextSource contextSource=(DefaultSpringSecurityContextSource)appCtx.getBean(BeanIds.CONTEXT_SOURCE);
    LdapTemplate template=new LdapTemplate(contextSource);
    template.lookup("uid=pg,ou=gorillas");
  }
  @Test public void defaultLdifFileIsSuccessful(){
    appCtx=new InMemoryXmlApplicationContext("<ldap-server/>");
    ApacheDSContainer dsContainer=appCtx.getBean(ApacheDSContainer.class);
    assertThat(ReflectionTestUtils.getField(dsContainer,"ldifResources")).isEqualTo("classpath*:*.ldif");
  }
  private int getDefaultPort() throws IOException {
    ServerSocket server=null;
    try {
      server=new ServerSocket(0);
      return server.getLocalPort();
    }
  finally {
      try {
        server.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
