/** 
 * @author Rob Winch
 */
public class CustomHttpSecurityConfigurerTests {
  @Autowired ConfigurableApplicationContext context;
  @Autowired FilterChainProxy springSecurityFilterChain;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  MockFilterChain chain;
  @Before public void setup(){
    request=new MockHttpServletRequest("GET","");
    response=new MockHttpServletResponse();
    chain=new MockFilterChain();
    request.setMethod("GET");
  }
  @After public void cleanup(){
    if (context != null) {
      context.close();
    }
  }
  @Test public void customConfiguerPermitAll() throws Exception {
    loadContext(Config.class);
    request.setPathInfo("/public/something");
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
  }
  @Test public void customConfiguerFormLogin() throws Exception {
    loadContext(Config.class);
    request.setPathInfo("/requires-authentication");
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getRedirectedUrl()).endsWith("/custom");
  }
  @Test public void customConfiguerCustomizeDisablesCsrf() throws Exception {
    loadContext(ConfigCustomize.class);
    request.setPathInfo("/public/something");
    request.setMethod("POST");
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
  }
  @Test public void customConfiguerCustomizeFormLogin() throws Exception {
    loadContext(ConfigCustomize.class);
    request.setPathInfo("/requires-authentication");
    springSecurityFilterChain.doFilter(request,response,chain);
    assertThat(response.getRedirectedUrl()).endsWith("/other");
  }
  private void loadContext(  Class<?> clazz){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(clazz);
    context.getAutowireCapableBeanFactory().autowireBean(this);
  }
@EnableWebSecurity static class Config extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.apply(customConfigurer()).loginPage("/custom");
    }
    @Bean public static PropertyPlaceholderConfigurer propertyPlaceholderConfigurer(){
      Properties properties=new Properties();
      properties.setProperty("permitAllPattern","/public/**");
      PropertyPlaceholderConfigurer propertyPlaceholderConfigurer=new PropertyPlaceholderConfigurer();
      propertyPlaceholderConfigurer.setProperties(properties);
      return propertyPlaceholderConfigurer;
    }
  }
@EnableWebSecurity static class ConfigCustomize extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.apply(customConfigurer()).and().csrf().disable().formLogin().loginPage("/other");
    }
    @Bean public static PropertyPlaceholderConfigurer propertyPlaceholderConfigurer(){
      Properties properties=new Properties();
      properties.setProperty("permitAllPattern","/public/**");
      PropertyPlaceholderConfigurer propertyPlaceholderConfigurer=new PropertyPlaceholderConfigurer();
      propertyPlaceholderConfigurer.setProperties(properties);
      return propertyPlaceholderConfigurer;
    }
  }
}
