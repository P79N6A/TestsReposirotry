/** 
 * Tests  {@link ExceptionTranslationFilter}.
 * @author Ben Alex
 */
public class ExceptionTranslationFilterTests {
  @After @Before public void clearContext() throws Exception {
    SecurityContextHolder.clearContext();
  }
  private static String getSavedRequestUrl(  HttpServletRequest request){
    HttpSession session=request.getSession(false);
    if (session == null) {
      return null;
    }
    HttpSessionRequestCache rc=new HttpSessionRequestCache();
    SavedRequest sr=rc.getRequest(request,new MockHttpServletResponse());
    return sr.getRedirectUrl();
  }
  @Test public void testAccessDeniedWhenAnonymous() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    request.setServerPort(80);
    request.setScheme("http");
    request.setServerName("www.example.com");
    request.setContextPath("/mycontext");
    request.setRequestURI("/mycontext/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new AccessDeniedException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    SecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken("ignored","ignored",AuthorityUtils.createAuthorityList("IGNORED")));
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    filter.setAuthenticationTrustResolver(new AuthenticationTrustResolverImpl());
    assertThat(filter.getAuthenticationTrustResolver()).isNotNull();
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/mycontext/login.jsp");
    assertThat(getSavedRequestUrl(request)).isEqualTo("http://www.example.com/mycontext/secure/page.html");
  }
  @Test public void testAccessDeniedWithRememberMe() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    request.setServerPort(80);
    request.setScheme("http");
    request.setServerName("www.example.com");
    request.setContextPath("/mycontext");
    request.setRequestURI("/mycontext/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new AccessDeniedException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    SecurityContext securityContext=SecurityContextHolder.createEmptyContext();
    securityContext.setAuthentication(new RememberMeAuthenticationToken("ignored","ignored",AuthorityUtils.createAuthorityList("IGNORED")));
    SecurityContextHolder.setContext(securityContext);
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/mycontext/login.jsp");
    assertThat(getSavedRequestUrl(request)).isEqualTo("http://www.example.com/mycontext/secure/page.html");
  }
  @Test public void testAccessDeniedWhenNonAnonymous() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new AccessDeniedException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    SecurityContextHolder.clearContext();
    AccessDeniedHandlerImpl adh=new AccessDeniedHandlerImpl();
    adh.setErrorPage("/error.jsp");
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    filter.setAccessDeniedHandler(adh);
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getStatus()).isEqualTo(403);
    assertThat(request.getAttribute(WebAttributes.ACCESS_DENIED_403)).isExactlyInstanceOf(AccessDeniedException.class);
  }
  @Test public void testLocalizedErrorMessages() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new AccessDeniedException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    SecurityContextHolder.getContext().setAuthentication(new AnonymousAuthenticationToken("ignored","ignored",AuthorityUtils.createAuthorityList("IGNORED")));
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter((req,res,ae) -> res.sendError(403,ae.getMessage()));
    filter.setAuthenticationTrustResolver(new AuthenticationTrustResolverImpl());
    assertThat(filter.getAuthenticationTrustResolver()).isNotNull();
    LocaleContextHolder.setDefaultLocale(Locale.GERMAN);
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getErrorMessage()).isEqualTo("Vollst\u00e4ndige Authentifikation wird ben\u00f6tigt um auf diese Resource zuzugreifen");
  }
  @Test public void redirectedToLoginFormAndSessionShowsOriginalTargetWhenAuthenticationException() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    request.setServerPort(80);
    request.setScheme("http");
    request.setServerName("www.example.com");
    request.setContextPath("/mycontext");
    request.setRequestURI("/mycontext/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new BadCredentialsException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    filter.afterPropertiesSet();
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/mycontext/login.jsp");
    assertThat(getSavedRequestUrl(request)).isEqualTo("http://www.example.com/mycontext/secure/page.html");
  }
  @Test public void redirectedToLoginFormAndSessionShowsOriginalTargetWithExoticPortWhenAuthenticationException() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    request.setServerPort(8080);
    request.setScheme("http");
    request.setServerName("www.example.com");
    request.setContextPath("/mycontext");
    request.setRequestURI("/mycontext/secure/page.html");
    FilterChain fc=mock(FilterChain.class);
    doThrow(new BadCredentialsException("")).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
    HttpSessionRequestCache requestCache=new HttpSessionRequestCache();
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint,requestCache);
    requestCache.setPortResolver(new MockPortResolver(8080,8443));
    filter.afterPropertiesSet();
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,fc);
    assertThat(response.getRedirectedUrl()).isEqualTo("/mycontext/login.jsp");
    assertThat(getSavedRequestUrl(request)).isEqualTo("http://www.example.com:8080/mycontext/secure/page.html");
  }
  @Test(expected=IllegalArgumentException.class) public void startupDetectsMissingAuthenticationEntryPoint() throws Exception {
    new ExceptionTranslationFilter(null);
  }
  @Test(expected=IllegalArgumentException.class) public void startupDetectsMissingRequestCache() throws Exception {
    new ExceptionTranslationFilter(mockEntryPoint,null);
  }
  @Test public void successfulAccessGrant() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath("/secure/page.html");
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    assertThat(filter.getAuthenticationEntryPoint()).isSameAs(mockEntryPoint);
    MockHttpServletResponse response=new MockHttpServletResponse();
    filter.doFilter(request,response,mock(FilterChain.class));
  }
  @Test public void thrownIOExceptionServletExceptionAndRuntimeExceptionsAreRethrown() throws Exception {
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    filter.afterPropertiesSet();
    Exception[] exceptions={new IOException(),new ServletException(),new RuntimeException()};
    for (    Exception e : exceptions) {
      FilterChain fc=mock(FilterChain.class);
      doThrow(e).when(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
      try {
        filter.doFilter(new MockHttpServletRequest(),new MockHttpServletResponse(),fc);
        fail("Should have thrown Exception");
      }
 catch (      Exception expected) {
        assertThat(expected).isSameAs(e);
      }
    }
  }
  @Test public void doFilterWhenResponseCommittedThenRethrowsException() throws Exception {
    this.mockEntryPoint=mock(AuthenticationEntryPoint.class);
    FilterChain chain=(request,response) -> {
      HttpServletResponse httpResponse=(HttpServletResponse)response;
      httpResponse.sendError(HttpServletResponse.SC_BAD_REQUEST);
      throw new AccessDeniedException("Denied");
    }
;
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
    assertThatThrownBy(() -> filter.doFilter(request,response,chain)).isInstanceOf(ServletException.class).hasCauseInstanceOf(AccessDeniedException.class);
    verifyZeroInteractions(mockEntryPoint);
  }
  private AuthenticationEntryPoint mockEntryPoint=new AuthenticationEntryPoint(){
    public void commence(    HttpServletRequest request,    HttpServletResponse response,    AuthenticationException authException) throws IOException, ServletException {
      response.sendRedirect(request.getContextPath() + "/login.jsp");
    }
  }
;
}
