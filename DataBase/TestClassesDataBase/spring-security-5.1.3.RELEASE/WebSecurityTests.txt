/** 
 * @author Rob Winch
 */
public class WebSecurityTests {
  AnnotationConfigWebApplicationContext context;
  MockHttpServletRequest request;
  MockHttpServletResponse response;
  MockFilterChain chain;
  @Autowired FilterChainProxy springSecurityFilterChain;
  @Before public void setup(){
    this.request=new MockHttpServletRequest("GET","");
    this.request.setMethod("GET");
    this.response=new MockHttpServletResponse();
    this.chain=new MockFilterChain();
  }
  @After public void cleanup(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void ignoringMvcMatcher() throws Exception {
    loadConfig(MvcMatcherConfig.class);
    this.request.setRequestURI("/path");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setRequestURI("/path.html");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setRequestURI("/path/");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setRequestURI("/other");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);
  }
@EnableWebSecurity @Configuration @EnableWebMvc static class MvcMatcherConfig extends WebSecurityConfigurerAdapter {
    @Override public void configure(    WebSecurity web) throws Exception {
      web.ignoring().mvcMatchers("/path");
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.httpBasic().and().authorizeRequests().anyRequest().denyAll();
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication();
    }
@RestController static class PathController {
      @RequestMapping("/path") public String path(){
        return "path";
      }
    }
  }
  @Test public void ignoringMvcMatcherServletPath() throws Exception {
    loadConfig(MvcMatcherServletPathConfig.class);
    this.request.setServletPath("/spring");
    this.request.setRequestURI("/spring/path");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setServletPath("/spring");
    this.request.setRequestURI("/spring/path.html");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setServletPath("/spring");
    this.request.setRequestURI("/spring/path/");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
    setup();
    this.request.setServletPath("/other");
    this.request.setRequestURI("/other/path");
    this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
    assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);
  }
@EnableWebSecurity @Configuration @EnableWebMvc static class MvcMatcherServletPathConfig extends WebSecurityConfigurerAdapter {
    @Override public void configure(    WebSecurity web) throws Exception {
      web.ignoring().mvcMatchers("/path").servletPath("/spring").mvcMatchers("/notused");
    }
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.httpBasic().and().authorizeRequests().anyRequest().denyAll();
    }
    @Override protected void configure(    AuthenticationManagerBuilder auth) throws Exception {
      auth.inMemoryAuthentication();
    }
@RestController static class PathController {
      @RequestMapping("/path") public String path(){
        return "path";
      }
    }
  }
  public void loadConfig(  Class<?>... configs){
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(configs);
    this.context.setServletContext(new MockServletContext());
    this.context.refresh();
    this.context.getAutowireCapableBeanFactory().autowireBean(this);
  }
}
