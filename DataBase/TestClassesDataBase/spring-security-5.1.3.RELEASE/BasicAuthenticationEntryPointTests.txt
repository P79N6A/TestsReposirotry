/** 
 * Tests  {@link BasicAuthenticationEntryPoint}.
 * @author Ben Alex
 */
public class BasicAuthenticationEntryPointTests {
  @Test public void testDetectsMissingRealmName() throws Exception {
    BasicAuthenticationEntryPoint ep=new BasicAuthenticationEntryPoint();
    try {
      ep.afterPropertiesSet();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException expected) {
      assertThat(expected.getMessage()).isEqualTo("realmName must be specified");
    }
  }
  @Test public void testGettersSetters(){
    BasicAuthenticationEntryPoint ep=new BasicAuthenticationEntryPoint();
    ep.setRealmName("realm");
    assertThat(ep.getRealmName()).isEqualTo("realm");
  }
  @Test public void testNormalOperation() throws Exception {
    BasicAuthenticationEntryPoint ep=new BasicAuthenticationEntryPoint();
    ep.setRealmName("hello");
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setRequestURI("/some_path");
    MockHttpServletResponse response=new MockHttpServletResponse();
    ep.commence(request,response,new DisabledException("These are the jokes kid"));
    assertThat(response.getStatus()).isEqualTo(401);
    assertThat(response.getErrorMessage()).isEqualTo(HttpStatus.UNAUTHORIZED.getReasonPhrase());
    assertThat(response.getHeader("WWW-Authenticate")).isEqualTo("Basic realm=\"hello\"");
  }
}
