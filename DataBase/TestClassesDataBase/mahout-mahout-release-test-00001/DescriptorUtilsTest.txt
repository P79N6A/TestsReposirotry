@Deprecated public final class DescriptorUtilsTest extends MahoutTestCase {
  /** 
 * Test method for {@link org.apache.mahout.classifier.df.data.DescriptorUtils#parseDescriptor(java.lang.CharSequence)}.
 */
  @Test public void testParseDescriptor() throws Exception {
    int n=10;
    int maxnbAttributes=100;
    Random rng=RandomUtils.getRandom();
    for (int nloop=0; nloop < n; nloop++) {
      int nbAttributes=rng.nextInt(maxnbAttributes) + 1;
      char[] tokens=Utils.randomTokens(rng,nbAttributes);
      Attribute[] attrs=DescriptorUtils.parseDescriptor(Utils.generateDescriptor(tokens));
      assertEquals("attributes size",nbAttributes,attrs.length);
      for (int attr=0; attr < nbAttributes; attr++) {
switch (tokens[attr]) {
case 'I':
          assertTrue(attrs[attr].isIgnored());
        break;
case 'N':
      assertTrue(attrs[attr].isNumerical());
    break;
case 'C':
  assertTrue(attrs[attr].isCategorical());
break;
case 'L':
assertTrue(attrs[attr].isLabel());
break;
}
}
}
}
@Test public void testGenerateDescription() throws Exception {
validate("","");
validate("I L C C N N N C","I L C C N N N C");
validate("I L C C N N N C","I L 2 C 3 N C");
validate("I L C C N N N C"," I L  2 C 3 N C ");
try {
validate("","I L 2 2 C 2 N C");
fail("2 consecutive multiplicators");
}
 catch (DescriptorException e) {
}
try {
validate("","I L 2 C -2 N C");
fail("negative multiplicator");
}
 catch (DescriptorException e) {
}
}
private static void validate(String descriptor,CharSequence description) throws DescriptorException {
assertEquals(descriptor,DescriptorUtils.generateDescriptor(description));
}
}
