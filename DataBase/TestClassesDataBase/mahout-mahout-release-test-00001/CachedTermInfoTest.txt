public class CachedTermInfoTest extends MahoutTestCase {
  private RAMDirectory directory;
  private static final String[] DOCS={"a a b b c c","a b a b a b a b","a b a","a","b","a","a"};
  private static final String[] DOCS2={"d d d d","e e e e","d e d e","d","e","d","e"};
  @Before public void before() throws IOException {
    directory=new RAMDirectory();
    FieldType fieldType=new FieldType();
    fieldType.setStored(false);
    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
    fieldType.setTokenized(true);
    fieldType.setStoreTermVectors(false);
    fieldType.setStoreTermVectorPositions(false);
    fieldType.setStoreTermVectorOffsets(false);
    fieldType.freeze();
    directory=createTestIndex(fieldType,directory,0);
  }
  @Test public void test() throws Exception {
    IndexReader reader=DirectoryReader.open(directory);
    CachedTermInfo cti=new CachedTermInfo(reader,"content",0,100);
    assertEquals(3,cti.totalTerms("content"));
    assertNotNull(cti.getTermEntry("content","a"));
    assertNull(cti.getTermEntry("content","e"));
    cti=new CachedTermInfo(reader,"content",3,100);
    assertEquals(2,cti.totalTerms("content"));
    assertNotNull(cti.getTermEntry("content","a"));
    assertNull(cti.getTermEntry("content","c"));
    cti=new CachedTermInfo(reader,"content",0,85);
    assertEquals(2,cti.totalTerms("content"));
    assertNotNull(cti.getTermEntry("content","b"));
    assertNotNull(cti.getTermEntry("content","c"));
    assertNull(cti.getTermEntry("content","a"));
  }
  static RAMDirectory createTestIndex(  FieldType fieldType,  RAMDirectory directory,  int startingId) throws IOException {
    IndexWriter writer=new IndexWriter(directory,new IndexWriterConfig(new WhitespaceAnalyzer()));
    try {
      for (int i=0; i < DOCS.length; i++) {
        Document doc=new Document();
        Field id=new StringField("id","doc_" + (i + startingId),Field.Store.YES);
        doc.add(id);
        Field text=new Field("content",DOCS[i],fieldType);
        doc.add(text);
        Field text2=new Field("content2",DOCS2[i],fieldType);
        doc.add(text2);
        writer.addDocument(doc);
      }
    }
  finally {
      Closeables.close(writer,false);
    }
    return directory;
  }
}
