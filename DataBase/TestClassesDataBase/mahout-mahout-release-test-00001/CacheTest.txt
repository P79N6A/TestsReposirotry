public final class CacheTest extends TasteTestCase {
  @Test public void testLotsOfGets() throws TasteException {
    Retriever<Object,Object> retriever=new IdentityRetriever();
    Cache<Object,Object> cache=new Cache<>(retriever,1000);
    for (int i=0; i < 1000000; i++) {
      assertEquals(i,cache.get(i));
    }
  }
  @Test public void testMixedUsage() throws TasteException {
    Random random=RandomUtils.getRandom();
    Retriever<Object,Object> retriever=new IdentityRetriever();
    Cache<Object,Object> cache=new Cache<>(retriever,1000);
    for (int i=0; i < 1000000; i++) {
      double r=random.nextDouble();
      if (r < 0.01) {
        cache.clear();
      }
 else       if (r < 0.1) {
        cache.remove(r - 100);
      }
 else {
        assertEquals(i,cache.get(i));
      }
    }
  }
private static class IdentityRetriever implements Retriever<Object,Object> {
    @Override public Object get(    Object key) throws TasteException {
      return key;
    }
  }
}
