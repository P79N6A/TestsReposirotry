public class TestVectorCache extends MahoutTestCase {
  private static final double[] VECTOR={1,2,3,4};
  @Test public void testSave() throws Exception {
    Configuration conf=getConfiguration();
    Writable key=new IntWritable(0);
    Vector value=new DenseVector(VECTOR);
    Path path=getTestTempDirPath("output");
    VectorCache.save(key,value,path,conf,true,true);
    SequenceFileValueIterator<VectorWritable> iterator=new SequenceFileValueIterator<>(path,true,conf);
    try {
      VectorWritable old=iterator.next();
      assertEquals("Saved vector is identical to original",old.get(),value);
    }
  finally {
      Closeables.close(iterator,true);
    }
  }
  @Test public void testLoad() throws Exception {
    Configuration conf=getConfiguration();
    Writable key=new IntWritable(0);
    Vector value=new DenseVector(VECTOR);
    Path path=getTestTempDirPath("output");
    FileSystem fs=FileSystem.get(path.toUri(),conf);
    path=fs.makeQualified(path);
    fs.deleteOnExit(path);
    HadoopUtil.delete(conf,path);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,path,IntWritable.class,VectorWritable.class);
    try {
      writer.append(key,new VectorWritable(value));
    }
  finally {
      Closeables.close(writer,false);
    }
    DistributedCache.setCacheFiles(new URI[]{path.toUri()},conf);
    Vector result=VectorCache.load(conf);
    assertNotNull("Vector is null",result);
    assertEquals("Loaded vector is not identical to original",result,value);
  }
  @Test public void testAll() throws Exception {
    Configuration conf=getConfiguration();
    Vector v=new DenseVector(VECTOR);
    Path toSave=getTestTempDirPath("output");
    Writable key=new IntWritable(0);
    VectorCache.save(key,v,toSave,conf);
    Vector v2=VectorCache.load(conf);
    assertNotNull("Vector is null",v2);
    assertEquals("Vectors are not identical",v2,v);
  }
}
