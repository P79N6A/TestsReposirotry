public final class TestEigenSeedGenerator extends MahoutTestCase {
  private static final double[][] RAW={{1,0,0},{1,0,0},{0,1,0},{0,1,0},{0,1,0},{0,0,1},{0,0,1}};
  private FileSystem fs;
  private static List<VectorWritable> getPoints(){
    List<VectorWritable> points=Lists.newArrayList();
    for (    double[] fr : RAW) {
      Vector vec=new RandomAccessSparseVector(fr.length);
      vec.assign(fr);
      points.add(new VectorWritable(vec));
    }
    return points;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    Configuration conf=getConfiguration();
    fs=FileSystem.get(conf);
  }
  @Test public void testEigenSeedGenerator() throws Exception {
    List<VectorWritable> points=getPoints();
    Job job=new Job();
    Configuration conf=job.getConfiguration();
    job.setMapOutputValueClass(VectorWritable.class);
    Path input=getTestTempFilePath("eigen-input");
    Path output=getTestTempDirPath("eigen-output");
    ClusteringTestUtils.writePointsToFile(points,input,fs,conf);
    EigenSeedGenerator.buildFromEigens(conf,input,output,3,new ManhattanDistanceMeasure());
    int clusterCount=0;
    Collection<Integer> set=new HashSet<>();
    Vector v[]=new Vector[3];
    for (    ClusterWritable clusterWritable : new SequenceFileValueIterable<ClusterWritable>(new Path(output,"part-eigenSeed"),true,conf)) {
      Cluster cluster=clusterWritable.getValue();
      int id=cluster.getId();
      assertTrue(set.add(id));
      v[id]=cluster.getCenter();
      clusterCount++;
    }
    assertEquals(3,clusterCount);
    assertEquals(0,v[0].dot(v[1]),1E-10);
    assertEquals(0,v[1].dot(v[2]),1E-10);
    assertEquals(0,v[0].dot(v[2]),1E-10);
  }
}
