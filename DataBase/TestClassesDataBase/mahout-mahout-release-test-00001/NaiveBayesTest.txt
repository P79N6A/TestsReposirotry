public class NaiveBayesTest extends MahoutTestCase {
  private Configuration conf;
  private File inputFile;
  private File outputDir;
  private File tempDir;
  static final Text LABEL_STOLEN=new Text("/stolen/");
  static final Text LABEL_NOT_STOLEN=new Text("/not_stolen/");
  static final Vector.Element COLOR_RED=MathHelper.elem(0,1);
  static final Vector.Element COLOR_YELLOW=MathHelper.elem(1,1);
  static final Vector.Element TYPE_SPORTS=MathHelper.elem(2,1);
  static final Vector.Element TYPE_SUV=MathHelper.elem(3,1);
  static final Vector.Element ORIGIN_DOMESTIC=MathHelper.elem(4,1);
  static final Vector.Element ORIGIN_IMPORTED=MathHelper.elem(5,1);
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    conf=getConfiguration();
    inputFile=getTestTempFile("trainingInstances.seq");
    outputDir=getTestTempDir("output");
    outputDir.delete();
    tempDir=getTestTempDir("tmp");
    SequenceFile.Writer writer=new SequenceFile.Writer(FileSystem.get(conf),conf,new Path(inputFile.getAbsolutePath()),Text.class,VectorWritable.class);
    try {
      writer.append(LABEL_STOLEN,trainingInstance(COLOR_RED,TYPE_SPORTS,ORIGIN_DOMESTIC));
      writer.append(LABEL_NOT_STOLEN,trainingInstance(COLOR_RED,TYPE_SPORTS,ORIGIN_DOMESTIC));
      writer.append(LABEL_STOLEN,trainingInstance(COLOR_RED,TYPE_SPORTS,ORIGIN_DOMESTIC));
      writer.append(LABEL_NOT_STOLEN,trainingInstance(COLOR_YELLOW,TYPE_SPORTS,ORIGIN_DOMESTIC));
      writer.append(LABEL_STOLEN,trainingInstance(COLOR_YELLOW,TYPE_SPORTS,ORIGIN_IMPORTED));
      writer.append(LABEL_NOT_STOLEN,trainingInstance(COLOR_YELLOW,TYPE_SUV,ORIGIN_IMPORTED));
      writer.append(LABEL_STOLEN,trainingInstance(COLOR_YELLOW,TYPE_SUV,ORIGIN_IMPORTED));
      writer.append(LABEL_NOT_STOLEN,trainingInstance(COLOR_YELLOW,TYPE_SUV,ORIGIN_DOMESTIC));
      writer.append(LABEL_NOT_STOLEN,trainingInstance(COLOR_RED,TYPE_SUV,ORIGIN_IMPORTED));
      writer.append(LABEL_STOLEN,trainingInstance(COLOR_RED,TYPE_SPORTS,ORIGIN_IMPORTED));
    }
  finally {
      Closeables.close(writer,false);
    }
  }
  @Test public void toyData() throws Exception {
    TrainNaiveBayesJob trainNaiveBayes=new TrainNaiveBayesJob();
    trainNaiveBayes.setConf(conf);
    trainNaiveBayes.run(new String[]{"--input",inputFile.getAbsolutePath(),"--output",outputDir.getAbsolutePath(),"--tempDir",tempDir.getAbsolutePath()});
    NaiveBayesModel naiveBayesModel=NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()),conf);
    AbstractVectorClassifier classifier=new StandardNaiveBayesClassifier(naiveBayesModel);
    assertEquals(2,classifier.numCategories());
    Vector prediction=classifier.classifyFull(trainingInstance(COLOR_RED,TYPE_SUV,ORIGIN_DOMESTIC).get());
    assertTrue(prediction.get(0) < prediction.get(1));
  }
  @Test public void toyDataComplementary() throws Exception {
    TrainNaiveBayesJob trainNaiveBayes=new TrainNaiveBayesJob();
    trainNaiveBayes.setConf(conf);
    trainNaiveBayes.run(new String[]{"--input",inputFile.getAbsolutePath(),"--output",outputDir.getAbsolutePath(),"--trainComplementary","--tempDir",tempDir.getAbsolutePath()});
    NaiveBayesModel naiveBayesModel=NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()),conf);
    AbstractVectorClassifier classifier=new ComplementaryNaiveBayesClassifier(naiveBayesModel);
    assertEquals(2,classifier.numCategories());
    Vector prediction=classifier.classifyFull(trainingInstance(COLOR_RED,TYPE_SUV,ORIGIN_DOMESTIC).get());
    assertTrue(prediction.get(0) < prediction.get(1));
  }
  static VectorWritable trainingInstance(  Vector.Element... elems){
    DenseVector trainingInstance=new DenseVector(6);
    for (    Vector.Element elem : elems) {
      trainingInstance.set(elem.index(),elem.get());
    }
    return new VectorWritable(trainingInstance);
  }
}
