public final class TextValueEncoderTest extends MahoutTestCase {
  @Test public void testAddToVector(){
    TextValueEncoder enc=new TextValueEncoder("text");
    Vector v1=new DenseVector(200);
    enc.addToVector("test1 and more",v1);
    enc.flush(1,v1);
    assertEquals(6.0,v1.norm(1),0);
    assertEquals(1.0,v1.maxValue(),0);
    StaticWordValueEncoder w=new StaticWordValueEncoder("text");
    w.setDictionary(ImmutableMap.<String,Double>of("word1",3.0,"word2",1.5));
    enc.setWordEncoder(w);
    Vector v2=new DenseVector(200);
    enc.addToVector("test1 and more",v2);
    enc.flush(1,v2);
    Vector v3=new DenseVector(200);
    w.addToVector("test1",v3);
    w.addToVector("and",v3);
    w.addToVector("more",v3);
    assertEquals(0,v3.minus(v2).norm(1),0);
    assertEquals(v3.zSum(),v3.dot(v1),0);
  }
  @Test public void testAsString(){
    Locale.setDefault(Locale.ENGLISH);
    FeatureVectorEncoder enc=new TextValueEncoder("text");
    assertEquals("[text:test1:1.0000, text:and:1.0000, text:more:1.0000]",enc.asString("test1 and more"));
  }
  @Test public void testLuceneEncoding() throws Exception {
    LuceneTextValueEncoder enc=new LuceneTextValueEncoder("text");
    enc.setAnalyzer(new WhitespaceAnalyzer());
    Vector v1=new DenseVector(200);
    enc.addToVector("test1 and more",v1);
    enc.flush(1,v1);
    assertEquals(6.0,v1.norm(1),0);
    assertEquals(1.0,v1.maxValue(),0);
    v1=new DenseVector(200);
    enc.addToVector("",v1);
    enc.flush(1,v1);
    assertEquals(0.0,v1.norm(1),0);
    assertEquals(0.0,v1.maxValue(),0);
    v1=new DenseVector(200);
    StringBuilder builder=new StringBuilder(5000);
    for (int i=0; i < 1000; i++) {
      builder.append("token_").append(i).append(' ');
    }
    enc.addToVector(builder.toString(),v1);
    enc.flush(1,v1);
    assertEquals(2000.0,v1.norm(1),0);
    assertEquals(19.0,v1.maxValue(),0);
  }
}
