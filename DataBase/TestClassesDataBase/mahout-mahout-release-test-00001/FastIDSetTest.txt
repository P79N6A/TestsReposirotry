/** 
 * <p>Tests  {@link FastIDSet}.</p> 
 */
public final class FastIDSetTest extends TasteTestCase {
  @Test public void testContainsAndAdd(){
    FastIDSet set=new FastIDSet();
    assertFalse(set.contains(1));
    set.add(1);
    assertTrue(set.contains(1));
  }
  @Test public void testRemove(){
    FastIDSet set=new FastIDSet();
    set.add(1);
    set.remove(1);
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    assertFalse(set.contains(1));
  }
  @Test public void testClear(){
    FastIDSet set=new FastIDSet();
    set.add(1);
    set.clear();
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    assertFalse(set.contains(1));
  }
  @Test public void testSizeEmpty(){
    FastIDSet set=new FastIDSet();
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    set.add(1);
    assertEquals(1,set.size());
    assertFalse(set.isEmpty());
    set.remove(1);
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
  }
  @Test public void testContains(){
    FastIDSet set=buildTestFastSet();
    assertTrue(set.contains(1));
    assertTrue(set.contains(2));
    assertTrue(set.contains(3));
    assertFalse(set.contains(4));
  }
  @Test public void testReservedValues(){
    FastIDSet set=new FastIDSet();
    try {
      set.add(Long.MIN_VALUE);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException iae) {
    }
    assertFalse(set.contains(Long.MIN_VALUE));
    try {
      set.add(Long.MAX_VALUE);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException iae) {
    }
    assertFalse(set.contains(Long.MAX_VALUE));
  }
  @Test public void testRehash(){
    FastIDSet set=buildTestFastSet();
    set.remove(1);
    set.rehash();
    assertFalse(set.contains(1));
  }
  @Test public void testGrow(){
    FastIDSet set=new FastIDSet(1);
    set.add(1);
    set.add(2);
    assertTrue(set.contains(1));
    assertTrue(set.contains(2));
  }
  @Test public void testIterator(){
    FastIDSet set=buildTestFastSet();
    Collection<Long> expected=Sets.newHashSetWithExpectedSize(3);
    expected.add(1L);
    expected.add(2L);
    expected.add(3L);
    LongPrimitiveIterator it=set.iterator();
    while (it.hasNext()) {
      expected.remove(it.nextLong());
    }
    assertTrue(expected.isEmpty());
  }
  @Test public void testVersusHashSet(){
    FastIDSet actual=new FastIDSet(1);
    Collection<Integer> expected=Sets.newHashSetWithExpectedSize(1000000);
    Random r=RandomUtils.getRandom();
    for (int i=0; i < 1000000; i++) {
      double d=r.nextDouble();
      Integer key=r.nextInt(100);
      if (d < 0.4) {
        assertEquals(expected.contains(key),actual.contains(key));
      }
 else {
        if (d < 0.7) {
          assertEquals(expected.add(key),actual.add(key));
        }
 else {
          assertEquals(expected.remove(key),actual.remove(key));
        }
        assertEquals(expected.size(),actual.size());
        assertEquals(expected.isEmpty(),actual.isEmpty());
      }
    }
  }
  private static FastIDSet buildTestFastSet(){
    FastIDSet set=new FastIDSet();
    set.add(1);
    set.add(2);
    set.add(3);
    return set;
  }
}
