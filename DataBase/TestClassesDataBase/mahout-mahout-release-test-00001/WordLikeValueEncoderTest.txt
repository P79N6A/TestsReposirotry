public final class WordLikeValueEncoderTest extends MahoutTestCase {
  @Test public void testAddToVector(){
    FeatureVectorEncoder enc=new StaticWordValueEncoder("word");
    Vector v=new DenseVector(200);
    enc.addToVector("word1",v);
    enc.addToVector("word2",v);
    Iterator<Vector.Element> i=v.nonZeroes().iterator();
    Iterator<Integer> j=ImmutableList.of(7,118,119,199).iterator();
    while (i.hasNext()) {
      Vector.Element element=i.next();
      assertEquals(j.next().intValue(),element.index());
      assertEquals(1,element.get(),0);
    }
    assertFalse(j.hasNext());
  }
  @Test public void testAsString(){
    Locale.setDefault(Locale.ENGLISH);
    FeatureVectorEncoder enc=new StaticWordValueEncoder("word");
    assertEquals("word:w1:1.0000",enc.asString("w1"));
  }
  @Test public void testStaticWeights(){
    StaticWordValueEncoder enc=new StaticWordValueEncoder("word");
    enc.setDictionary(ImmutableMap.<String,Double>of("word1",3.0,"word2",1.5));
    Vector v=new DenseVector(200);
    enc.addToVector("word1",v);
    enc.addToVector("word2",v);
    enc.addToVector("word3",v);
    Iterator<Vector.Element> i=v.nonZeroes().iterator();
    Iterator<Integer> j=ImmutableList.of(7,101,118,119,152,199).iterator();
    Iterator<Double> k=ImmutableList.of(3.0,0.75,1.5,1.5,0.75,3.0).iterator();
    while (i.hasNext()) {
      Vector.Element element=i.next();
      assertEquals(j.next().intValue(),element.index());
    }
    i=v.nonZeroes().iterator();
    while (i.hasNext()) {
      Vector.Element element=i.next();
      assertEquals(String.format("checking v[%d]",element.index()),k.next(),element.get(),0);
    }
    assertFalse(j.hasNext());
  }
  @Test public void testDynamicWeights(){
    FeatureVectorEncoder enc=new AdaptiveWordValueEncoder("word");
    Vector v=new DenseVector(200);
    enc.addToVector("word1",v);
    enc.addToVector("word2",v);
    enc.addToVector("word1",v);
    enc.addToVector("word3",v);
    Iterator<Vector.Element> i=v.nonZeroes().iterator();
    Iterator<Integer> j=ImmutableList.of(7,101,118,119,152,199).iterator();
    Iterator<Double> k=ImmutableList.of(Math.log(2 / 1.5) + Math.log(4.5 / 2.5),Math.log(6 / 1.5),Math.log(3.5 / 1.5),Math.log(3.5 / 1.5),Math.log(6 / 1.5),Math.log(2 / 1.5) + Math.log(4.5 / 2.5)).iterator();
    while (i.hasNext()) {
      Vector.Element element=i.next();
      assertEquals(j.next().intValue(),element.index());
      assertEquals(k.next(),element.get(),1.0e-6);
    }
    assertFalse(j.hasNext());
  }
}
