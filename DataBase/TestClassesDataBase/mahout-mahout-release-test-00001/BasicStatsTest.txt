public final class BasicStatsTest extends MahoutTestCase {
  private Configuration conf;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    conf=getConfiguration();
  }
  @Test public void testVar() throws Exception {
    Path input=getTestTempFilePath("stdDev/counts.file");
    Path output=getTestTempFilePath("stdDev/output.file");
    produceTestData(input);
    double v=BasicStats.variance(input,output,conf);
    assertEquals(2.44,v,0.01);
  }
  @Test public void testStdDev() throws Exception {
    Path input=getTestTempFilePath("stdDev/counts.file");
    Path output=getTestTempFilePath("stdDev/output.file");
    produceTestData(input);
    double v=BasicStats.stdDev(input,output,conf);
    assertEquals(1.56,v,0.01);
  }
  @Test public void testStdDevForGivenMean() throws Exception {
    Path input=getTestTempFilePath("stdDev/counts.file");
    Path output=getTestTempFilePath("stdDev/output.file");
    produceTestData(input);
    double v=BasicStats.stdDevForGivenMean(input,output,0.0D,conf);
    assertEquals(10.65,v,0.01);
  }
  private void produceTestData(  Path input) throws Exception {
    FileSystem fs=FileSystem.get(input.toUri(),conf);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,input,IntWritable.class,DoubleWritable.class);
    int i=0;
    writer.append(new IntWritable(i++),new DoubleWritable(7));
    writer.append(new IntWritable(i++),new DoubleWritable(9));
    writer.append(new IntWritable(i++),new DoubleWritable(9));
    writer.append(new IntWritable(i++),new DoubleWritable(10));
    writer.append(new IntWritable(i++),new DoubleWritable(10));
    writer.append(new IntWritable(i++),new DoubleWritable(10));
    writer.append(new IntWritable(i++),new DoubleWritable(10));
    writer.append(new IntWritable(i++),new DoubleWritable(11));
    writer.append(new IntWritable(i++),new DoubleWritable(11));
    writer.append(new IntWritable(i++),new DoubleWritable(13));
    writer.close();
  }
  @Test public void testStdDev2() throws Exception {
    Path input=getTestTempFilePath("stdDev/counts.file");
    Path output=getTestTempFilePath("stdDev/output.file");
    FileSystem fs=FileSystem.get(input.toUri(),conf);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,input,IntWritable.class,DoubleWritable.class);
    Random random=RandomUtils.getRandom();
    Normal normal=new Normal(5,3,random);
    for (int i=0; i < 1000000; i++) {
      writer.append(new IntWritable(i),new DoubleWritable((long)normal.nextInt()));
    }
    writer.close();
    double v=BasicStats.stdDev(input,output,conf);
    assertEquals(3,v,0.02);
  }
}
