public final class GenericRecommenderIRStatsEvaluatorImplTest extends TasteTestCase {
  @Test public void testBoolean() throws Exception {
    DataModel model=getBooleanDataModel();
    RecommenderBuilder builder=new RecommenderBuilder(){
      @Override public Recommender buildRecommender(      DataModel dataModel){
        return new GenericBooleanPrefItemBasedRecommender(dataModel,new LogLikelihoodSimilarity(dataModel));
      }
    }
;
    DataModelBuilder dataModelBuilder=new DataModelBuilder(){
      @Override public DataModel buildDataModel(      FastByIDMap<PreferenceArray> trainingData){
        return new GenericBooleanPrefDataModel(GenericBooleanPrefDataModel.toDataMap(trainingData));
      }
    }
;
    RecommenderIRStatsEvaluator evaluator=new GenericRecommenderIRStatsEvaluator();
    IRStatistics stats=evaluator.evaluate(builder,dataModelBuilder,model,null,1,GenericRecommenderIRStatsEvaluator.CHOOSE_THRESHOLD,1.0);
    assertNotNull(stats);
    assertEquals(0.666666666,stats.getPrecision(),EPSILON);
    assertEquals(0.666666666,stats.getRecall(),EPSILON);
    assertEquals(0.666666666,stats.getF1Measure(),EPSILON);
    assertEquals(0.666666666,stats.getFNMeasure(2.0),EPSILON);
    assertEquals(0.666666666,stats.getNormalizedDiscountedCumulativeGain(),EPSILON);
  }
  @Test public void testIRStats(){
    IRStatistics stats=new IRStatisticsImpl(0.3,0.1,0.2,0.05,0.15);
    assertEquals(0.3,stats.getPrecision(),EPSILON);
    assertEquals(0.1,stats.getRecall(),EPSILON);
    assertEquals(0.15,stats.getF1Measure(),EPSILON);
    assertEquals(0.11538461538462,stats.getFNMeasure(2.0),EPSILON);
    assertEquals(0.05,stats.getNormalizedDiscountedCumulativeGain(),EPSILON);
  }
}
