public class TestConjugateGradientSolver extends MahoutTestCase {
  @Test public void testConjugateGradientSolver(){
    Matrix a=getA();
    Vector b=getB();
    ConjugateGradientSolver solver=new ConjugateGradientSolver();
    Vector x=solver.solve(a,b);
    assertEquals(0.0,Math.sqrt(a.times(x).getDistanceSquared(b)),EPSILON);
    assertEquals(0.0,solver.getResidualNorm(),ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    assertEquals(10,solver.getIterations());
  }
  @Test public void testConditionedConjugateGradientSolver(){
    Matrix a=getIllConditionedMatrix();
    Vector b=getB();
    Preconditioner conditioner=new JacobiConditioner(a);
    ConjugateGradientSolver solver=new ConjugateGradientSolver();
    Vector x=solver.solve(a,b,null,100,ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    double distance=Math.sqrt(a.times(x).getDistanceSquared(b));
    assertEquals(0.0,distance,EPSILON);
    assertEquals(0.0,solver.getResidualNorm(),ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    assertEquals(16,solver.getIterations());
    Vector x2=solver.solve(a,b,conditioner,100,ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    distance=Math.sqrt(a.times(x2).getDistanceSquared(b));
    assertEquals(0.0,distance,EPSILON);
    assertEquals(0.0,solver.getResidualNorm(),ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    assertEquals(15,solver.getIterations());
  }
  @Test public void testEarlyStop(){
    Matrix a=getA();
    Vector b=getB();
    ConjugateGradientSolver solver=new ConjugateGradientSolver();
    Vector x=solver.solve(a,b,null,10,0.1);
    double distance=Math.sqrt(a.times(x).getDistanceSquared(b));
    assertTrue(distance > EPSILON);
    assertEquals(0.0,distance,0.1);
    assertEquals(7,solver.getIterations());
    x=solver.solve(a,b,null,7,ConjugateGradientSolver.DEFAULT_MAX_ERROR);
    distance=Math.sqrt(a.times(x).getDistanceSquared(b));
    assertTrue(distance > EPSILON);
    assertEquals(0.0,distance,0.1);
    assertEquals(7,solver.getIterations());
  }
  private static Matrix getA(){
    return reshape(new double[]{11.7155649822793997,-0.7125253363083646,4.6473613961860183,1.6020939468348456,-4.6789817799137134,-0.8140416763434970,-4.5995617505618345,-1.1749070042775340,-1.6747995811678336,3.1922255171058342,-0.7125253363083646,12.3400579683994867,-2.6498099427000645,0.5264507222630669,0.3783428369189767,-2.1170186159188811,2.3695134252190528,3.8182131490333013,6.5285942298270347,2.8564814419366353,4.6473613961860183,-2.6498099427000645,16.1317933921668484,-0.0409475448061225,1.4805687075608227,-2.9958076484628950,-2.5288893025027264,-0.9614557539842487,-2.2974738351519077,-1.5516184284572598,1.6020939468348456,0.5264507222630669,-0.0409475448061225,4.1946802122694482,-2.5210038046912198,0.6634899962909317,0.4036187419205338,-0.2829211393003727,-0.2283091172980954,1.1253516563552464,-4.6789817799137134,0.3783428369189767,1.4805687075608227,-2.5210038046912198,19.4307361862733430,-2.5200132222091787,2.3748511971444510,11.6426598443305522,-0.1508136510863874,4.3471343888063512,-0.8140416763434970,-2.1170186159188811,-2.9958076484628950,0.6634899962909317,-2.5200132222091787,7.6712334419700747,-3.8687773629502851,-3.0453418711591529,-0.1155580876143619,-2.4025459467422121,-4.5995617505618345,2.3695134252190528,-2.5288893025027264,0.4036187419205338,2.3748511971444510,-3.8687773629502851,10.4681666057470082,1.6527180866171229,2.9341795819365384,-2.1708176372763099,-1.1749070042775340,3.8182131490333013,-0.9614557539842487,-0.2829211393003727,11.6426598443305522,-3.0453418711591529,1.6527180866171229,16.0050616934176233,1.1689747208793086,1.6665090945954870,-1.6747995811678336,6.5285942298270347,-2.2974738351519077,-0.2283091172980954,-0.1508136510863874,-0.1155580876143619,2.9341795819365384,1.1689747208793086,6.4794329751637481,-1.9197339981871877,3.1922255171058342,2.8564814419366353,-1.5516184284572598,1.1253516563552464,4.3471343888063512,-2.4025459467422121,-2.1708176372763099,1.6665090945954870,-1.9197339981871877,18.9149021356344598},10,10);
  }
  private static Vector getB(){
    return new DenseVector(new double[]{-0.552252,0.038430,0.058392,-1.234496,1.240369,0.373649,0.505113,0.503723,1.215340,-0.391908});
  }
  private static Matrix getIllConditionedMatrix(){
    return reshape(new double[]{0.00695278043678842,0.09911830022078683,0.01309584636255063,0.00652917453032394,0.04337631487735064,0.14232165273321387,0.05808722912361313,-0.06591965049732287,0.06055771542862332,0.00577423310349649,0.09911830022078683,1.50071402418061428,0.14988743575884242,0.07195514527480981,0.63747362341752722,1.30711819020414688,0.82151609385115953,-0.72616125524587938,1.03490136002022948,0.12800239664439328,0.01309584636255063,0.14988743575884242,0.04068462583124965,0.02147022047006482,0.07388113580146650,0.58070223915076002,0.11280336266257514,-0.21690068430020618,0.04065087561300068,-0.00876895259593769,0.00652917453032394,0.07195514527480981,0.02147022047006482,0.01140105250542524,0.03624164348693958,0.31291554581393255,0.05648457235205666,-0.11507583016077780,0.01475756130709823,-0.00584453679519805,0.04337631487735064,0.63747362341752722,0.07388113580146649,0.03624164348693959,0.27491543200760571,0.73410543168748121,0.36120630002843257,-0.36583546331208316,0.41472509341940017,0.04581458758255480,0.14232165273321387,1.30711819020414666,0.58070223915076002,0.31291554581393255,0.73410543168748121,9.02536073121807014,1.25426385582883104,-3.16186335125594642,-0.19740140818905436,-0.26613760880058035,0.05808722912361314,0.82151609385115953,0.11280336266257514,0.05648457235205667,0.36120630002843257,1.25426385582883126,0.48661058451606820,-0.57030511336562195,0.49151280464818098,0.04428280690189127,-0.06591965049732286,-0.72616125524587938,-0.21690068430020618,-0.11507583016077781,-0.36583546331208316,-3.16186335125594642,-0.57030511336562195,1.16270815038078945,-0.14837898963724327,0.05917203395002889,0.06055771542862331,1.03490136002022926,0.04065087561300068,0.01475756130709823,0.41472509341940023,-0.19740140818905436,0.49151280464818103,-0.14837898963724327,0.86693820682049716,0.14089688752570340,0.00577423310349649,0.12800239664439328,-0.00876895259593769,-0.00584453679519805,0.04581458758255480,-0.26613760880058035,0.04428280690189126,0.05917203395002889,0.14089688752570340,0.02901858439788401},10,10);
  }
  private static Matrix reshape(  double[] values,  int rows,  int columns){
    Matrix m=new DenseMatrix(rows,columns);
    int i=0;
    for (    double v : values) {
      m.set(i % rows,i / rows,v);
      i++;
    }
    return m;
  }
}
