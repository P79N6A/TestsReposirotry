public final class LuceneIterableTest extends MahoutTestCase {
  private static final String[] DOCS={"The quick red fox jumped over the lazy brown dogs.","Mary had a little lamb whose fleece was white as snow.","Moby Dick is a story of a whale and a man obsessed.","The robber wore a black fleece jacket and a baseball cap.","The English Springer Spaniel is the best of all dogs."};
  private RAMDirectory directory;
  private final FieldType TYPE_NO_TERM_VECTORS=new FieldType();
  private final FieldType TYPE_TERM_VECTORS=new FieldType();
  @Before public void before() throws IOException {
    TYPE_NO_TERM_VECTORS.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
    TYPE_NO_TERM_VECTORS.setTokenized(true);
    TYPE_NO_TERM_VECTORS.setStoreTermVectors(false);
    TYPE_NO_TERM_VECTORS.setStoreTermVectorPositions(false);
    TYPE_NO_TERM_VECTORS.setStoreTermVectorOffsets(false);
    TYPE_NO_TERM_VECTORS.freeze();
    TYPE_TERM_VECTORS.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
    TYPE_TERM_VECTORS.setTokenized(true);
    TYPE_TERM_VECTORS.setStored(true);
    TYPE_TERM_VECTORS.setStoreTermVectors(true);
    TYPE_TERM_VECTORS.setStoreTermVectorPositions(true);
    TYPE_TERM_VECTORS.setStoreTermVectorOffsets(true);
    TYPE_TERM_VECTORS.freeze();
    directory=createTestIndex(TYPE_TERM_VECTORS);
  }
  @Test public void testIterable() throws Exception {
    IndexReader reader=DirectoryReader.open(directory);
    Weight weight=new TFIDF();
    TermInfo termInfo=new CachedTermInfo(reader,"content",1,100);
    LuceneIterable iterable=new LuceneIterable(reader,"id","content",termInfo,weight);
    for (    Vector vector : iterable) {
      assertNotNull(vector);
      assertTrue("vector is not an instanceof " + NamedVector.class,vector instanceof NamedVector);
      assertTrue("vector Size: " + vector.size() + " is not greater than: "+ 0,vector.size() > 0);
      assertTrue(((NamedVector)vector).getName().startsWith("doc_"));
    }
    iterable=new LuceneIterable(reader,"id","content",termInfo,weight,3);
    for (    Vector vector : iterable) {
      assertNotNull(vector);
      assertTrue("vector is not an instanceof " + NamedVector.class,vector instanceof NamedVector);
      assertTrue("vector Size: " + vector.size() + " is not greater than: "+ 0,vector.size() > 0);
      assertTrue(((NamedVector)vector).getName().startsWith("doc_"));
    }
  }
  @Test(expected=IllegalStateException.class) public void testIterableNoTermVectors() throws IOException {
    RAMDirectory directory=createTestIndex(TYPE_NO_TERM_VECTORS);
    IndexReader reader=DirectoryReader.open(directory);
    Weight weight=new TFIDF();
    TermInfo termInfo=new CachedTermInfo(reader,"content",1,100);
    LuceneIterable iterable=new LuceneIterable(reader,"id","content",termInfo,weight);
    Iterator<Vector> iterator=iterable.iterator();
    Iterators.advance(iterator,1);
  }
  @Test public void testIterableSomeNoiseTermVectors() throws IOException {
    RAMDirectory directory=createTestIndex(TYPE_TERM_VECTORS,new RAMDirectory(),0);
    createTestIndex(TYPE_NO_TERM_VECTORS,directory,5);
    IndexReader reader=DirectoryReader.open(directory);
    Weight weight=new TFIDF();
    TermInfo termInfo=new CachedTermInfo(reader,"content",1,100);
    boolean exceptionThrown;
    LuceneIterable iterable=new LuceneIterable(reader,"id","content",termInfo,weight);
    try {
      Iterables.skip(iterable,Iterables.size(iterable));
      exceptionThrown=false;
    }
 catch (    IllegalStateException ise) {
      exceptionThrown=true;
    }
    assertTrue(exceptionThrown);
    iterable=new LuceneIterable(reader,"id","content",termInfo,weight,-1,1.0);
    try {
      Iterables.skip(iterable,Iterables.size(iterable));
      exceptionThrown=false;
    }
 catch (    IllegalStateException ise) {
      exceptionThrown=true;
    }
    assertFalse(exceptionThrown);
    iterable=new LuceneIterable(reader,"id","content",termInfo,weight,-1,0.5);
    Iterator<Vector> iterator=iterable.iterator();
    Iterators.advance(iterator,5);
    try {
      Iterators.advance(iterator,Iterators.size(iterator));
      exceptionThrown=false;
    }
 catch (    IllegalStateException ise) {
      exceptionThrown=true;
    }
    assertTrue(exceptionThrown);
  }
  static RAMDirectory createTestIndex(  FieldType fieldType) throws IOException {
    return createTestIndex(fieldType,new RAMDirectory(),0);
  }
  static RAMDirectory createTestIndex(  FieldType fieldType,  RAMDirectory directory,  int startingId) throws IOException {
    try (IndexWriter writer=new IndexWriter(directory,new IndexWriterConfig(new StandardAnalyzer()))){
      for (int i=0; i < DOCS.length; i++) {
        Document doc=new Document();
        Field id=new StringField("id","doc_" + (i + startingId),Field.Store.YES);
        doc.add(id);
        Field text=new Field("content",DOCS[i],fieldType);
        doc.add(text);
        Field text2=new Field("content2",DOCS[i],fieldType);
        doc.add(text2);
        writer.addDocument(doc);
      }
    }
     return directory;
  }
}
