public final class GramKeyTest extends MahoutTestCase {
  @Test public void testGramKeySort(){
    byte[] foo={1};
    byte[] empty=new byte[0];
    GramKey[] input={new GramKey(new Gram("bar",1,Gram.Type.UNIGRAM),empty),new GramKey(new Gram("bar",1,Gram.Type.UNIGRAM),empty),new GramKey(new Gram("bar",1,Gram.Type.UNIGRAM),foo),new GramKey(new Gram("bar",8,Gram.Type.NGRAM),foo),new GramKey(new Gram("bar",8,Gram.Type.NGRAM),empty),new GramKey(new Gram("foo",2,Gram.Type.HEAD),foo),new GramKey(new Gram("foo",3,Gram.Type.HEAD),empty),new GramKey(new Gram("foo",4,Gram.Type.TAIL),foo),new GramKey(new Gram("foo",5,Gram.Type.TAIL),foo),new GramKey(new Gram("bar",6,Gram.Type.HEAD),foo),new GramKey(new Gram("bar",7,Gram.Type.TAIL),empty)};
    int[] expect={9,6,5,10,7,8,0,1,2,4,3};
    GramKey[] sorted=new GramKey[input.length];
    System.arraycopy(input,0,sorted,0,input.length);
    Arrays.sort(sorted);
    for (int i=0; i < input.length; i++) {
      assertSame(input[expect[i]],sorted[i]);
    }
  }
  @Test public void testWritable() throws Exception {
    byte[] foo=new byte[0];
    byte[] bar={2};
    GramKey one=new GramKey(new Gram("foo",2,Gram.Type.HEAD),foo);
    GramKey two=new GramKey(new Gram("foobar",3,Gram.Type.UNIGRAM),bar);
    assertEquals("foo",one.getPrimaryString());
    assertEquals("foobar",two.getPrimaryString());
    assertEquals(Gram.Type.UNIGRAM,two.getType());
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    DataOutputStream out=new DataOutputStream(bout);
    try {
      two.write(out);
    }
  finally {
      Closeables.close(out,false);
    }
    byte[] b=bout.toByteArray();
    ByteArrayInputStream bin=new ByteArrayInputStream(b);
    DataInputStream din=new DataInputStream(bin);
    try {
      one.readFields(din);
    }
  finally {
      Closeables.close(din,true);
    }
    assertTrue(Arrays.equals(two.getBytes(),one.getBytes()));
    assertEquals(Gram.Type.UNIGRAM,one.getType());
  }
}
