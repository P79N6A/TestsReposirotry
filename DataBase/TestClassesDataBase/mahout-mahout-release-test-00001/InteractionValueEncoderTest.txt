public class InteractionValueEncoderTest extends MahoutTestCase {
  @Test public void testAddToVector(){
    WordValueEncoder wv=new StaticWordValueEncoder("word");
    ContinuousValueEncoder cv=new ContinuousValueEncoder("cont");
    InteractionValueEncoder enc=new InteractionValueEncoder("interactions",wv,cv);
    Vector v1=new DenseVector(200);
    enc.addInteractionToVector("a","1.0",1.0,v1);
    int k=enc.getProbes();
    assertEquals((float)k,v1.norm(1),0);
    assertEquals(1.0,v1.maxValue(),0);
    enc.addInteractionToVector("a","1.0",1.0,v1);
    assertEquals((float)k * 2,v1.norm(1),0);
    assertEquals(2.0,v1.maxValue(),0);
    Vector v2=new DenseVector(20000);
    enc.addInteractionToVector("a","1.0",1.0,v2);
    wv.addToVector("a",v2);
    cv.addToVector("1.0",v2);
    k=enc.getProbes();
    assertEquals((float)(k + wv.getProbes() + cv.getProbes()),v2.norm(1),1.0e-3);
  }
  @Test public void testAddToVectorUsesProductOfWeights(){
    WordValueEncoder wv=new StaticWordValueEncoder("word");
    ContinuousValueEncoder cv=new ContinuousValueEncoder("cont");
    InteractionValueEncoder enc=new InteractionValueEncoder("interactions",wv,cv);
    Vector v1=new DenseVector(200);
    enc.addInteractionToVector("a","0.9",0.5,v1);
    int k=enc.getProbes();
    assertEquals((float)k * 0.5 * 0.9,v1.norm(1),0);
    assertEquals(0.5 * 0.9,v1.maxValue(),0);
  }
  @Test public void testAddToVectorWithTextValueEncoder(){
    WordValueEncoder wv=new StaticWordValueEncoder("word");
    TextValueEncoder tv=new TextValueEncoder("text");
    InteractionValueEncoder enc=new InteractionValueEncoder("interactions",wv,tv);
    Vector v1=new DenseVector(200);
    enc.addInteractionToVector("a","some text here",1.0,v1);
    int k=enc.getProbes();
    assertEquals((float)k * 3,v1.norm(1),0);
  }
  @Test public void testTraceDictionary(){
    StaticWordValueEncoder encoder1=new StaticWordValueEncoder("first");
    StaticWordValueEncoder encoder2=new StaticWordValueEncoder("second");
    Map<String,Set<Integer>> traceDictionary=Maps.newHashMap();
    InteractionValueEncoder interactions=new InteractionValueEncoder("interactions",encoder1,encoder2);
    interactions.setProbes(1);
    interactions.setTraceDictionary(traceDictionary);
    Vector v=new DenseVector(10);
    interactions.addInteractionToVector("a","b",1,v);
    assertEquals(1,v.getNumNonZeroElements());
    assertEquals(1,traceDictionary.size());
    assertEquals("interactions=a:b",getFirst(traceDictionary.keySet(),null));
  }
}
