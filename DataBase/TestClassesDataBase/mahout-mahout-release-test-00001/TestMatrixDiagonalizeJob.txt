/** 
 * <p>The MatrixDiagonalize task is pretty simple: given a matrix, it sums the elements of the row, and sticks the sum in position (i, i)  of a new matrix of identical dimensions to the original.</p>
 */
public class TestMatrixDiagonalizeJob extends MahoutTestCase {
  private static final double[][] RAW={{1,2,3},{4,5,6},{7,8,9}};
  private static final int RAW_DIMENSIONS=3;
  private static double rowSum(  double[] row){
    double sum=0;
    for (    double r : row) {
      sum+=r;
    }
    return sum;
  }
  @Test public void testMatrixDiagonalizeMapper() throws Exception {
    MatrixDiagonalizeMapper mapper=new MatrixDiagonalizeMapper();
    Configuration conf=getConfiguration();
    conf.setInt(Keys.AFFINITY_DIMENSIONS,RAW_DIMENSIONS);
    DummyRecordWriter<NullWritable,IntDoublePairWritable> writer=new DummyRecordWriter<>();
    Mapper<IntWritable,VectorWritable,NullWritable,IntDoublePairWritable>.Context context=DummyRecordWriter.build(mapper,conf,writer);
    for (int i=0; i < RAW_DIMENSIONS; i++) {
      RandomAccessSparseVector toAdd=new RandomAccessSparseVector(RAW_DIMENSIONS);
      toAdd.assign(RAW[i]);
      mapper.map(new IntWritable(i),new VectorWritable(toAdd),context);
    }
    assertEquals("Number of map results",RAW_DIMENSIONS,writer.getValue(NullWritable.get()).size());
  }
  @Test public void testMatrixDiagonalizeReducer() throws Exception {
    MatrixDiagonalizeMapper mapper=new MatrixDiagonalizeMapper();
    Configuration conf=getConfiguration();
    conf.setInt(Keys.AFFINITY_DIMENSIONS,RAW_DIMENSIONS);
    DummyRecordWriter<NullWritable,IntDoublePairWritable> mapWriter=new DummyRecordWriter<>();
    Mapper<IntWritable,VectorWritable,NullWritable,IntDoublePairWritable>.Context mapContext=DummyRecordWriter.build(mapper,conf,mapWriter);
    for (int i=0; i < RAW_DIMENSIONS; i++) {
      RandomAccessSparseVector toAdd=new RandomAccessSparseVector(RAW_DIMENSIONS);
      toAdd.assign(RAW[i]);
      mapper.map(new IntWritable(i),new VectorWritable(toAdd),mapContext);
    }
    MatrixDiagonalizeReducer reducer=new MatrixDiagonalizeReducer();
    DummyRecordWriter<NullWritable,VectorWritable> redWriter=new DummyRecordWriter<>();
    Reducer<NullWritable,IntDoublePairWritable,NullWritable,VectorWritable>.Context redContext=DummyRecordWriter.build(reducer,conf,redWriter,NullWritable.class,IntDoublePairWritable.class);
    reducer.reduce(NullWritable.get(),mapWriter.getValue(NullWritable.get()),redContext);
    List<VectorWritable> list=redWriter.getValue(NullWritable.get());
    assertEquals("Only a single resulting vector",1,list.size());
    Vector v=list.get(0).get();
    for (int i=0; i < v.size(); i++) {
      assertEquals("Element sum is correct",rowSum(RAW[i]),v.get(i),0.01);
    }
  }
}
