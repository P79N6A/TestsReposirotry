public class MultithreadedBatchItemSimilaritiesTest {
  @Test public void lessItemsThanBatchSize() throws Exception {
    FastByIDMap<PreferenceArray> userData=new FastByIDMap<>();
    userData.put(1,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1,1,1),new GenericPreference(1,2,1),new GenericPreference(1,3,1))));
    userData.put(2,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2,1,1),new GenericPreference(2,2,1),new GenericPreference(2,4,1))));
    DataModel dataModel=new GenericDataModel(userData);
    ItemBasedRecommender recommender=new GenericItemBasedRecommender(dataModel,new TanimotoCoefficientSimilarity(dataModel));
    BatchItemSimilarities batchSimilarities=new MultithreadedBatchItemSimilarities(recommender,10);
    batchSimilarities.computeItemSimilarities(1,1,mock(SimilarItemsWriter.class));
  }
  @Test(expected=IOException.class) public void higherDegreeOfParallelismThanBatches() throws Exception {
    FastByIDMap<PreferenceArray> userData=new FastByIDMap<>();
    userData.put(1,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1,1,1),new GenericPreference(1,2,1),new GenericPreference(1,3,1))));
    userData.put(2,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2,1,1),new GenericPreference(2,2,1),new GenericPreference(2,4,1))));
    DataModel dataModel=new GenericDataModel(userData);
    ItemBasedRecommender recommender=new GenericItemBasedRecommender(dataModel,new TanimotoCoefficientSimilarity(dataModel));
    BatchItemSimilarities batchSimilarities=new MultithreadedBatchItemSimilarities(recommender,10);
    batchSimilarities.computeItemSimilarities(2,1,mock(SimilarItemsWriter.class));
    fail();
  }
  @Test public void testCorrectNumberOfOutputSimilarities() throws Exception {
    FastByIDMap<PreferenceArray> userData=new FastByIDMap<>();
    userData.put(1,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1,1,1),new GenericPreference(1,2,1),new GenericPreference(1,3,1))));
    userData.put(2,new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2,1,1),new GenericPreference(2,2,1),new GenericPreference(2,4,1))));
    DataModel dataModel=new GenericDataModel(userData);
    ItemBasedRecommender recommender=new GenericItemBasedRecommender(dataModel,new TanimotoCoefficientSimilarity(dataModel));
    BatchItemSimilarities batchSimilarities=new MultithreadedBatchItemSimilarities(recommender,10,2);
    int numOutputSimilarities=batchSimilarities.computeItemSimilarities(2,1,mock(SimilarItemsWriter.class));
    assertEquals(numOutputSimilarities,10);
  }
}
