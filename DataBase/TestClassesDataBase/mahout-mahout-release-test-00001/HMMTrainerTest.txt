public class HMMTrainerTest extends HMMTestBase {
  @Test public void testViterbiTraining(){
    double[][] transitionE={{0.3125,0.0625,0.3125,0.3125},{0.25,0.25,0.25,0.25},{0.5,0.071429,0.357143,0.071429},{0.5,0.1,0.1,0.3}};
    double[][] emissionE={{0.882353,0.058824,0.058824},{0.333333,0.333333,0.3333333},{0.076923,0.846154,0.076923},{0.111111,0.111111,0.777778}};
    int[] observed={1,0,2,2,0,0,1,1,1,0,2,0,1,0,0};
    HmmModel trained=HmmTrainer.trainViterbi(getModel(),observed,0.5,0.1,10,false);
    Matrix emissionMatrix=trained.getEmissionMatrix();
    Matrix transitionMatrix=trained.getTransitionMatrix();
    for (int i=0; i < trained.getNrOfHiddenStates(); ++i) {
      for (int j=0; j < trained.getNrOfHiddenStates(); ++j) {
        assertEquals(transitionMatrix.getQuick(i,j),transitionE[i][j],EPSILON);
      }
      for (int j=0; j < trained.getNrOfOutputStates(); ++j) {
        assertEquals(emissionMatrix.getQuick(i,j),emissionE[i][j],EPSILON);
      }
    }
  }
  @Test public void testScaledViterbiTraining(){
    double[][] transitionE={{0.3125,0.0625,0.3125,0.3125},{0.25,0.25,0.25,0.25},{0.5,0.071429,0.357143,0.071429},{0.5,0.1,0.1,0.3}};
    double[][] emissionE={{0.882353,0.058824,0.058824},{0.333333,0.333333,0.3333333},{0.076923,0.846154,0.076923},{0.111111,0.111111,0.777778}};
    int[] observed={1,0,2,2,0,0,1,1,1,0,2,0,1,0,0};
    HmmModel trained=HmmTrainer.trainViterbi(getModel(),observed,0.5,0.1,10,true);
    Matrix emissionMatrix=trained.getEmissionMatrix();
    Matrix transitionMatrix=trained.getTransitionMatrix();
    for (int i=0; i < trained.getNrOfHiddenStates(); ++i) {
      for (int j=0; j < trained.getNrOfHiddenStates(); ++j) {
        assertEquals(transitionMatrix.getQuick(i,j),transitionE[i][j],EPSILON);
      }
      for (int j=0; j < trained.getNrOfOutputStates(); ++j) {
        assertEquals(emissionMatrix.getQuick(i,j),emissionE[i][j],EPSILON);
      }
    }
  }
  @Test public void testBaumWelchTraining(){
    int[] observed={1,0,2,2,0,0,1,1,1,0,2,0,1,0,0};
    double[] initialExpected={0,0,1.0,0};
    double[][] transitionExpected={{0.2319,0.0993,0.0005,0.6683},{0.0001,0.3345,0.6654,0},{0.5975,0,0.4025,0},{0.0024,0.6657,0,0.3319}};
    double[][] emissionExpected={{0.9995,0.0004,0.0001},{0.9943,0.0036,0.0021},{0.0059,0.9941,0},{0,0,1}};
    HmmModel trained=HmmTrainer.trainBaumWelch(getModel(),observed,0.1,10,false);
    Vector initialProbabilities=trained.getInitialProbabilities();
    Matrix emissionMatrix=trained.getEmissionMatrix();
    Matrix transitionMatrix=trained.getTransitionMatrix();
    for (int i=0; i < trained.getNrOfHiddenStates(); ++i) {
      assertEquals(initialProbabilities.get(i),initialExpected[i],0.0001);
      for (int j=0; j < trained.getNrOfHiddenStates(); ++j) {
        assertEquals(transitionMatrix.getQuick(i,j),transitionExpected[i][j],0.0001);
      }
      for (int j=0; j < trained.getNrOfOutputStates(); ++j) {
        assertEquals(emissionMatrix.getQuick(i,j),emissionExpected[i][j],0.0001);
      }
    }
  }
  @Test public void testScaledBaumWelchTraining(){
    int[] observed={1,0,2,2,0,0,1,1,1,0,2,0,1,0,0};
    double[] initialExpected={0,0,1.0,0};
    double[][] transitionExpected={{0.2319,0.0993,0.0005,0.6683},{0.0001,0.3345,0.6654,0},{0.5975,0,0.4025,0},{0.0024,0.6657,0,0.3319}};
    double[][] emissionExpected={{0.9995,0.0004,0.0001},{0.9943,0.0036,0.0021},{0.0059,0.9941,0},{0,0,1}};
    HmmModel trained=HmmTrainer.trainBaumWelch(getModel(),observed,0.1,10,true);
    Vector initialProbabilities=trained.getInitialProbabilities();
    Matrix emissionMatrix=trained.getEmissionMatrix();
    Matrix transitionMatrix=trained.getTransitionMatrix();
    for (int i=0; i < trained.getNrOfHiddenStates(); ++i) {
      assertEquals(initialProbabilities.get(i),initialExpected[i],0.0001);
      for (int j=0; j < trained.getNrOfHiddenStates(); ++j) {
        assertEquals(transitionMatrix.getQuick(i,j),transitionExpected[i][j],0.0001);
      }
      for (int j=0; j < trained.getNrOfOutputStates(); ++j) {
        assertEquals(emissionMatrix.getQuick(i,j),emissionExpected[i][j],0.0001);
      }
    }
  }
}
