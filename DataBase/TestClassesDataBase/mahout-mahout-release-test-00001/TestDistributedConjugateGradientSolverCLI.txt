public final class TestDistributedConjugateGradientSolverCLI extends MahoutTestCase {
  private static Vector randomVector(  int size,  double entryMean){
    Vector v=new DenseVector(size);
    Random r=RandomUtils.getRandom();
    for (int i=0; i < size; ++i) {
      v.setQuick(i,r.nextGaussian() * entryMean);
    }
    return v;
  }
  private static Path saveVector(  Configuration conf,  Path path,  Vector v) throws IOException {
    FileSystem fs=path.getFileSystem(conf);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,path,IntWritable.class,VectorWritable.class);
    try {
      writer.append(new IntWritable(0),new VectorWritable(v));
    }
  finally {
      writer.close();
    }
    return path;
  }
  private static Vector loadVector(  Configuration conf,  Path path) throws IOException {
    FileSystem fs=path.getFileSystem(conf);
    SequenceFile.Reader reader=new SequenceFile.Reader(fs,path,conf);
    Writable key=new IntWritable();
    VectorWritable value=new VectorWritable();
    try {
      if (!reader.next(key,value)) {
        throw new IOException("Input vector file is empty.");
      }
      return value.get();
    }
  finally {
      reader.close();
    }
  }
  @Test public void testSolver() throws Exception {
    Configuration conf=getConfiguration();
    Path testData=getTestTempDirPath("testdata");
    DistributedRowMatrix matrix=new TestDistributedRowMatrix().randomDistributedMatrix(10,10,10,10,10.0,true,testData.toString());
    matrix.setConf(conf);
    Path output=getTestTempFilePath("output");
    Path vectorPath=getTestTempFilePath("vector");
    Path tempPath=getTestTempDirPath("tmp");
    Vector vector=randomVector(matrix.numCols(),10.0);
    saveVector(conf,vectorPath,vector);
    String[] args={"-i",matrix.getRowPath().toString(),"-o",output.toString(),"--tempDir",tempPath.toString(),"--vector",vectorPath.toString(),"--numRows","10","--numCols","10","--symmetric","true"};
    DistributedConjugateGradientSolver solver=new DistributedConjugateGradientSolver();
    ToolRunner.run(getConfiguration(),solver.job(),args);
    Vector x=loadVector(conf,output);
    Vector solvedVector=matrix.times(x);
    double distance=Math.sqrt(vector.getDistanceSquared(solvedVector));
    assertEquals(0.0,distance,EPSILON);
  }
}
