public final class TestClusterInterface extends MahoutTestCase {
  private static final DistanceMeasure measure=new ManhattanDistanceMeasure();
  @Test public void testClusterAsFormatString(){
    double[] d={1.1,2.2,3.3};
    Vector m=new DenseVector(d);
    Cluster cluster=new org.apache.mahout.clustering.kmeans.Kluster(m,123,measure);
    String formatString=cluster.asFormatString(null);
    assertTrue(formatString.contains("\"r\":[]"));
    assertTrue(formatString.contains("\"c\":[1.1,2.2,3.3]"));
    assertTrue(formatString.contains("\"n\":0"));
    assertTrue(formatString.contains("\"identifier\":\"CL-123\""));
  }
  @Test public void testClusterAsFormatStringSparse(){
    double[] d={1.1,0.0,3.3};
    Vector m=new SequentialAccessSparseVector(3);
    m.assign(d);
    Cluster cluster=new org.apache.mahout.clustering.kmeans.Kluster(m,123,measure);
    String formatString=cluster.asFormatString(null);
    assertTrue(formatString.contains("\"r\":[]"));
    assertTrue(formatString.contains("\"c\":[{\"0\":1.1},{\"2\":3.3}]"));
    assertTrue(formatString.contains("\"n\":0"));
    assertTrue(formatString.contains("\"identifier\":\"CL-123\""));
  }
  @Test public void testClusterAsFormatStringWithBindings(){
    double[] d={1.1,2.2,3.3};
    Vector m=new DenseVector(d);
    Cluster cluster=new org.apache.mahout.clustering.kmeans.Kluster(m,123,measure);
    String[] bindings={"fee",null,"foo"};
    String formatString=cluster.asFormatString(bindings);
    assertTrue(formatString.contains("\"r\":[]"));
    assertTrue(formatString.contains("\"c\":[{\"fee\":1.1},{\"1\":2.2},{\"foo\":3.3}]"));
    assertTrue(formatString.contains("\"n\":0"));
    assertTrue(formatString.contains("\"identifier\":\"CL-123\""));
  }
  @Test public void testClusterAsFormatStringSparseWithBindings(){
    double[] d={1.1,0.0,3.3};
    Vector m=new SequentialAccessSparseVector(3);
    m.assign(d);
    Cluster cluster=new org.apache.mahout.clustering.kmeans.Kluster(m,123,measure);
    String formatString=cluster.asFormatString(null);
    assertTrue(formatString.contains("\"r\":[]"));
    assertTrue(formatString.contains("\"c\":[{\"0\":1.1},{\"2\":3.3}]"));
    assertTrue(formatString.contains("\"n\":0"));
    assertTrue(formatString.contains("\"identifier\":\"CL-123\""));
  }
}
