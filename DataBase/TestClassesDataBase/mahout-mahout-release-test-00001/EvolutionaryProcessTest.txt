public final class EvolutionaryProcessTest extends MahoutTestCase {
  @Test public void testConverges() throws Exception {
    State<Foo,Double> s0=new State<>(new double[5],1);
    s0.setPayload(new Foo());
    EvolutionaryProcess<Foo,Double> ep=new EvolutionaryProcess<>(10,100,s0);
    State<Foo,Double> best=null;
    for (int i=0; i < 20; i++) {
      best=ep.parallelDo(new EvolutionaryProcess.Function<Payload<Double>>(){
        @Override public double apply(        Payload<Double> payload,        double[] params){
          int i=1;
          double sum=0;
          for (          double x : params) {
            sum+=i * (x - i) * (x - i);
            i++;
          }
          return -sum;
        }
      }
);
      ep.mutatePopulation(3);
      System.out.printf("%10.3f %.3f\n",best.getValue(),best.getOmni());
    }
    ep.close();
    assertNotNull(best);
    assertEquals(0.0,best.getValue(),0.02);
  }
private static class Foo implements Payload<Double> {
    @Override public Foo copy(){
      return this;
    }
    @Override public void update(    double[] params){
    }
    @Override public void write(    DataOutput dataOutput) throws IOException {
    }
    @Override public void readFields(    DataInput dataInput) throws IOException {
    }
  }
}
