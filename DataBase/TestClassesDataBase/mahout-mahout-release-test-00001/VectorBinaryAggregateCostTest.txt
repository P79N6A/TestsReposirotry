@RunWith(JUnit4.class) public final class VectorBinaryAggregateCostTest {
  RandomAccessSparseVector realRasv=new RandomAccessSparseVector(1000000);
  SequentialAccessSparseVector realSasv=new SequentialAccessSparseVector(1000000);
  DenseVector realDense=new DenseVector(1000000);
  Vector rasv=EasyMock.createMock(Vector.class);
  Vector sasv=EasyMock.createMock(Vector.class);
  Vector dense=EasyMock.createMock(Vector.class);
  private static void createStubs(  Vector v,  Vector realV){
    expect(v.getLookupCost()).andStubReturn(realV instanceof SequentialAccessSparseVector ? Math.round(Math.log(1000)) : realV.getLookupCost());
    expect(v.getIteratorAdvanceCost()).andStubReturn(realV.getIteratorAdvanceCost());
    expect(v.isAddConstantTime()).andStubReturn(realV.isAddConstantTime());
    expect(v.isSequentialAccess()).andStubReturn(realV.isSequentialAccess());
    expect(v.isDense()).andStubReturn(realV.isDense());
    expect(v.getNumNondefaultElements()).andStubReturn(realV.isDense() ? realV.size() : 1000);
    expect(v.size()).andStubReturn(realV.size());
  }
  @Before public void setUpStubs(){
    createStubs(dense,realDense);
    createStubs(sasv,realSasv);
    createStubs(rasv,realRasv);
  }
  @Test public void denseInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(dense,dense,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void sasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,VectorBinaryAggregate.getBestOperation(sasv,sasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void rasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(rasv,rasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void sasvDenseInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(sasv,dense,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void denseSasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(dense,sasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void denseRasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(dense,rasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void rasvDenseInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(rasv,dense,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void sasvRasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,VectorBinaryAggregate.getBestOperation(sasv,rasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  @Test public void rasvSasvInteractions(){
    replayAll();
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.PLUS,Functions.MULT).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.MAX_ABS,Functions.MINUS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.PLUS,Functions.MINUS_SQUARED).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.PLUS,Functions.MINUS_ABS).getClass());
    assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.PLUS,Functions.minusAbsPow(1.2)).getClass());
    assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,VectorBinaryAggregate.getBestOperation(rasv,sasv,Functions.PLUS,Functions.MULT_SQUARE_LEFT).getClass());
  }
  private void replayAll(){
    replay(dense,sasv,rasv);
  }
}
