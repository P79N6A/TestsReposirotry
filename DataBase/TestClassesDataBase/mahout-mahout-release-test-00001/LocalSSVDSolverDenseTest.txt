/** 
 * Tests SSVD solver with a made-up data running hadoop solver in a local mode. It requests full-rank SSVD and then compares singular values to that of Colt's SVD asserting epsilon(precision) 1e-10 or whatever most recent value configured.
 */
public class LocalSSVDSolverDenseTest extends MahoutTestCase {
  private static final double s_epsilon=1.0E-10d;
  private static final double s_precisionPct=10;
  @Test public void testSSVDSolverDense() throws IOException {
    runSSVDSolver(0);
  }
  @Test public void testSSVDSolverPowerIterations1() throws IOException {
    runSSVDSolver(1);
  }
  public void runSSVDSolver(  int q) throws IOException {
    Configuration conf=getConfiguration();
    conf.set("mapred.job.tracker","local");
    conf.set("fs.default.name","file:///");
    File tmpDir=getTestTempDir("svdtmp");
    conf.set("hadoop.tmp.dir",tmpDir.getAbsolutePath());
    Path aLocPath=new Path(getTestTempDirPath("svdtmp/A"),"A.seq");
    int n=100;
    int m=2000;
    Vector singularValues=new DenseVector(new double[]{10,4,1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1});
    SSVDTestsHelper.generateDenseInput(aLocPath,FileSystem.getLocal(conf),singularValues,m,n);
    FileSystem fs=FileSystem.get(aLocPath.toUri(),conf);
    Path tempDirPath=getTestTempDirPath("svd-proc");
    Path aPath=new Path(tempDirPath,"A/A.seq");
    fs.copyFromLocalFile(aLocPath,aPath);
    Path svdOutPath=new Path(tempDirPath,"SSVD-out");
    System.out.println("Input prepared, starting solver...");
    int ablockRows=867;
    int p=10;
    int k=3;
    SSVDSolver ssvd=new SSVDSolver(conf,new Path[]{aPath},svdOutPath,ablockRows,k,p,3);
    ssvd.setOuterBlockHeight(500);
    ssvd.setAbtBlockHeight(400);
    ssvd.setOverwrite(true);
    ssvd.setQ(q);
    ssvd.setBroadcast(false);
    ssvd.run();
    Vector stochasticSValues=ssvd.getSingularValues();
    System.out.println("--SSVD solver singular values:");
    dumpSv(stochasticSValues);
    for (int i=0; i < k; i++) {
      assertTrue(Math.abs((singularValues.getQuick(i) - stochasticSValues.getQuick(i)) / singularValues.getQuick(i)) <= s_precisionPct / 100);
    }
    DenseMatrix mQ=SSVDHelper.drmLoadAsDense(fs,new Path(svdOutPath,"Bt-job/" + BtJob.OUTPUT_Q + "-*"),conf);
    SSVDCommonTest.assertOrthonormality(mQ,false,s_epsilon);
    DenseMatrix u=SSVDHelper.drmLoadAsDense(fs,new Path(svdOutPath,"U/*"),conf);
    SSVDCommonTest.assertOrthonormality(u,false,s_epsilon);
    DenseMatrix v=SSVDHelper.drmLoadAsDense(fs,new Path(svdOutPath,"V/*"),conf);
    SSVDCommonTest.assertOrthonormality(v,false,s_epsilon);
  }
  static void dumpSv(  Vector s){
    System.out.printf("svs: ");
    for (    Vector.Element el : s.all()) {
      System.out.printf("%f  ",el.get());
    }
    System.out.println();
  }
}
