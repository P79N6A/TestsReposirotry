/** 
 * <p>Tests  {@link FileItemSimilarity}.</p> 
 */
public final class FileItemSimilarityTest extends TasteTestCase {
  private static final String[] data={"1,5,0.125","1,7,0.5"};
  private static final String[] changedData={"1,5,0.125","1,7,0.9","7,8,0.112"};
  private File testFile;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    testFile=getTestTempFile("test.txt");
    writeLines(testFile,data);
  }
  @Test public void testLoadFromFile() throws Exception {
    ItemSimilarity similarity=new FileItemSimilarity(testFile);
    assertEquals(0.125,similarity.itemSimilarity(1L,5L),EPSILON);
    assertEquals(0.125,similarity.itemSimilarity(5L,1L),EPSILON);
    assertEquals(0.5,similarity.itemSimilarity(1L,7L),EPSILON);
    assertEquals(0.5,similarity.itemSimilarity(7L,1L),EPSILON);
    assertTrue(Double.isNaN(similarity.itemSimilarity(7L,8L)));
    double[] valuesForOne=similarity.itemSimilarities(1L,new long[]{5L,7L});
    assertNotNull(valuesForOne);
    assertEquals(2,valuesForOne.length);
    assertEquals(0.125,valuesForOne[0],EPSILON);
    assertEquals(0.5,valuesForOne[1],EPSILON);
  }
  @Test public void testNoRefreshAfterFileUpdate() throws Exception {
    ItemSimilarity similarity=new FileItemSimilarity(testFile,0L);
    similarity.itemSimilarity(1L,5L);
    Thread.sleep(2000L);
    writeLines(testFile,changedData);
    assertEquals(0.5,similarity.itemSimilarity(1L,7L),EPSILON);
    assertEquals(0.5,similarity.itemSimilarity(7L,1L),EPSILON);
    assertTrue(Double.isNaN(similarity.itemSimilarity(7L,8L)));
  }
  @Test public void testRefreshAfterFileUpdate() throws Exception {
    ItemSimilarity similarity=new FileItemSimilarity(testFile,0L);
    similarity.itemSimilarity(1L,5L);
    Thread.sleep(2000L);
    writeLines(testFile,changedData);
    similarity.refresh(null);
    assertEquals(0.9,similarity.itemSimilarity(1L,7L),EPSILON);
    assertEquals(0.9,similarity.itemSimilarity(7L,1L),EPSILON);
    assertEquals(0.125,similarity.itemSimilarity(1L,5L),EPSILON);
    assertEquals(0.125,similarity.itemSimilarity(5L,1L),EPSILON);
    assertFalse(Double.isNaN(similarity.itemSimilarity(7L,8L)));
    assertEquals(0.112,similarity.itemSimilarity(7L,8L),EPSILON);
    assertEquals(0.112,similarity.itemSimilarity(8L,7L),EPSILON);
  }
  @Test(expected=IllegalArgumentException.class) public void testFileNotFoundExceptionForNonExistingFile() throws Exception {
    new FileItemSimilarity(new File("xKsdfksdfsdf"));
  }
  @Test public void testFileItemItemSimilarityIterable() throws Exception {
    Iterable<ItemItemSimilarity> similarityIterable=new FileItemItemSimilarityIterable(testFile);
    GenericItemSimilarity similarity=new GenericItemSimilarity(similarityIterable);
    assertEquals(0.125,similarity.itemSimilarity(1L,5L),EPSILON);
    assertEquals(0.125,similarity.itemSimilarity(5L,1L),EPSILON);
    assertEquals(0.5,similarity.itemSimilarity(1L,7L),EPSILON);
    assertEquals(0.5,similarity.itemSimilarity(7L,1L),EPSILON);
    assertTrue(Double.isNaN(similarity.itemSimilarity(7L,8L)));
    double[] valuesForOne=similarity.itemSimilarities(1L,new long[]{5L,7L});
    assertNotNull(valuesForOne);
    assertEquals(2,valuesForOne.length);
    assertEquals(0.125,valuesForOne[0],EPSILON);
    assertEquals(0.5,valuesForOne[1],EPSILON);
  }
  @Test public void testToString() throws Exception {
    ItemSimilarity similarity=new FileItemSimilarity(testFile);
    assertTrue(!similarity.toString().isEmpty());
  }
}
