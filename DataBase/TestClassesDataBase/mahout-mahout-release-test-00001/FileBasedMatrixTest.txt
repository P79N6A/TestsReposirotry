public class FileBasedMatrixTest extends MahoutTestCase {
  private static final int ROWS=10 * 1000 * 1000;
  private static final int COLUMNS=40;
  @Test public void testBigMatrix() throws IOException {
    Assume.assumeNotNull(System.getProperty("runSlowTests"));
    Matrix m0=new SparseRowMatrix(ROWS,COLUMNS);
    Random gen=RandomUtils.getRandom();
    for (int i=0; i < 1000; i++) {
      m0.set(gen.nextInt(ROWS),gen.nextInt(COLUMNS),matrixValue(i));
    }
    File f=File.createTempFile("foo",".m",getTestTempDir());
    f.deleteOnExit();
    System.out.printf("Starting to write to %s\n",f.getAbsolutePath());
    FileBasedMatrix.writeMatrix(f,m0);
    System.out.printf("done\n");
    System.out.printf("File is %.1f MB\n",f.length() / 1.0e6);
    FileBasedMatrix m1=new FileBasedMatrix(ROWS,COLUMNS);
    System.out.printf("Starting read\n");
    m1.setData(f,false);
    gen=RandomUtils.getRandom();
    for (int i=0; i < 1000; i++) {
      assertEquals(matrixValue(i),m1.get(gen.nextInt(ROWS),gen.nextInt(COLUMNS)),0.0);
    }
    System.out.printf("done\n");
  }
  private static int matrixValue(  int i){
    return (i * 88513) % 10000;
  }
  @Test public void testSetData() throws IOException {
    File f=File.createTempFile("matrix",".m",getTestTempDir());
    f.deleteOnExit();
    Matrix m0=new DenseMatrix(100000,30);
    MultiNormal gen=new MultiNormal(30);
    for (    MatrixSlice row : m0) {
      row.vector().assign(gen.sample());
    }
    FileBasedMatrix.writeMatrix(f,m0);
    FileBasedMatrix m=new FileBasedMatrix(100000,30);
    m.setData(f,true);
    assertEquals(0,m0.minus(m).aggregate(Functions.MAX,Functions.ABS),1.0e-8);
    int i=0;
    for (    MatrixSlice row : m) {
      assertEquals(0,row.vector().minus(m0.viewRow(i++)).norm(1),1.0e-8);
    }
  }
}
