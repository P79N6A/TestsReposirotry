public abstract class SamplerCase extends MahoutTestCase {
  protected abstract Iterator<Integer> createSampler(  int n,  Iterator<Integer> source);
  protected abstract boolean isSorted();
  @Test public void testEmptyCase(){
    assertFalse(createSampler(100,new CountingIterator(0)).hasNext());
  }
  @Test public void testSmallInput(){
    Iterator<Integer> t=createSampler(10,new CountingIterator(1));
    assertTrue(t.hasNext());
    assertEquals(0,t.next().intValue());
    assertFalse(t.hasNext());
    t=createSampler(10,new CountingIterator(1));
    assertTrue(t.hasNext());
    assertEquals(0,t.next().intValue());
    assertFalse(t.hasNext());
  }
  @Test public void testAbsurdSize(){
    Iterator<Integer> t=createSampler(0,new CountingIterator(2));
    assertFalse(t.hasNext());
  }
  @Test public void testExactSizeMatch(){
    Iterator<Integer> t=createSampler(10,new CountingIterator(10));
    for (int i=0; i < 10; i++) {
      assertTrue(t.hasNext());
      assertEquals(i,t.next().intValue());
    }
    assertFalse(t.hasNext());
  }
  @Test public void testSample(){
    Iterator<Integer> source=new CountingIterator(100);
    Iterator<Integer> t=createSampler(15,source);
    List<Integer> expectedValues=Arrays.asList(52,28,2,60,50,32,65,79,78,9,40,33,96,25,48);
    if (isSorted()) {
      Collections.sort(expectedValues);
    }
    Iterator<Integer> expected=expectedValues.iterator();
    int last=Integer.MIN_VALUE;
    for (int i=0; i < 15; i++) {
      assertTrue(t.hasNext());
      int actual=t.next();
      if (isSorted()) {
        assertTrue(actual >= last);
        last=actual;
      }
 else {
        if (actual < 15) {
          assertEquals(i,actual);
        }
      }
      assertTrue(actual >= 0 && actual < 100);
      assertEquals(expected.next().intValue(),actual);
      assertFalse(source.hasNext());
    }
    assertFalse(t.hasNext());
  }
}
