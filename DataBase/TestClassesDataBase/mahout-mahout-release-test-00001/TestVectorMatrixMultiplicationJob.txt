/** 
 * <p>This test ensures that a Vector can be successfully multiplied with a matrix.</p>
 */
public class TestVectorMatrixMultiplicationJob extends MahoutTestCase {
  private static final double[][] MATRIX={{1,1},{2,3}};
  private static final double[] VECTOR={9,16};
  @Test public void testVectorMatrixMultiplicationMapper() throws Exception {
    VectorMatrixMultiplicationMapper mapper=new VectorMatrixMultiplicationMapper();
    Configuration conf=getConfiguration();
    Vector toSave=new DenseVector(VECTOR);
    DummyRecordWriter<IntWritable,VectorWritable> writer=new DummyRecordWriter<>();
    Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable>.Context context=DummyRecordWriter.build(mapper,conf,writer);
    mapper.setup(toSave);
    for (int i=0; i < MATRIX.length; i++) {
      Vector v=new RandomAccessSparseVector(MATRIX[i].length);
      v.assign(MATRIX[i]);
      mapper.map(new IntWritable(i),new VectorWritable(v),context);
    }
    assertEquals("Number of map results",MATRIX.length,writer.getData().size());
    for (int i=0; i < MATRIX.length; i++) {
      List<VectorWritable> list=writer.getValue(new IntWritable(i));
      assertEquals("Only one vector per key",1,list.size());
      Vector v=list.get(0).get();
      for (int j=0; j < MATRIX[i].length; j++) {
        double total=Math.sqrt(VECTOR[i]) * Math.sqrt(VECTOR[j]) * MATRIX[i][j];
        assertEquals("Product matrix elements",total,v.get(j),EPSILON);
      }
    }
  }
}
