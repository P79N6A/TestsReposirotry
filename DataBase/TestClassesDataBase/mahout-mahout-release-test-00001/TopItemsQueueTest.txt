public class TopItemsQueueTest extends TasteTestCase {
  @Test public void topK(){
    float[] ratings={0.5f,0.6f,0.7f,2.0f,0.0f};
    List<RecommendedItem> topItems=findTop(ratings,2);
    assertEquals(2,topItems.size());
    assertEquals(3L,topItems.get(0).getItemID());
    assertEquals(2.0f,topItems.get(0).getValue(),MahoutTestCase.EPSILON);
    assertEquals(2L,topItems.get(1).getItemID());
    assertEquals(0.7f,topItems.get(1).getValue(),MahoutTestCase.EPSILON);
  }
  @Test public void topKInputSmallerThanK(){
    float[] ratings={0.7f,2.0f};
    List<RecommendedItem> topItems=findTop(ratings,3);
    assertEquals(2,topItems.size());
    assertEquals(1L,topItems.get(0).getItemID());
    assertEquals(2.0f,topItems.get(0).getValue(),MahoutTestCase.EPSILON);
    assertEquals(0L,topItems.get(1).getItemID());
    assertEquals(0.7f,topItems.get(1).getValue(),MahoutTestCase.EPSILON);
  }
  private static List<RecommendedItem> findTop(  float[] ratings,  int k){
    TopItemsQueue queue=new TopItemsQueue(k);
    for (int item=0; item < ratings.length; item++) {
      MutableRecommendedItem top=queue.top();
      if (ratings[item] > top.getValue()) {
        top.set(item,ratings[item]);
        queue.updateTop();
      }
    }
    return queue.getTopItems();
  }
}
