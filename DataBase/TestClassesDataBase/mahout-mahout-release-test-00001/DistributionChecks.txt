/** 
 * Provides a consistency check for continuous distributions that relates the pdf, cdf and samples.  The pdf is checked against the cdf by quadrature.  The sampling is checked against the cdf using a G^2 (similar to chi^2) test.
 */
public final class DistributionChecks {
  private DistributionChecks(){
  }
  public static void checkDistribution(  final AbstractContinousDistribution dist,  double[] x,  double offset,  double scale,  int n){
    double[] xs=Arrays.copyOf(x,x.length);
    for (int i=0; i < xs.length; i++) {
      xs[i]=xs[i] * scale + offset;
    }
    Arrays.sort(xs);
    double[] y=new double[n];
    for (int i=0; i < n; i++) {
      y[i]=dist.nextDouble();
    }
    Arrays.sort(y);
    double[] p=new double[xs.length + 1];
    double lastP=0;
    for (int i=0; i < xs.length; i++) {
      double thisP=dist.cdf(xs[i]);
      p[i]=thisP - lastP;
      lastP=thisP;
    }
    p[p.length - 1]=1 - lastP;
    int[] k=new int[xs.length + 1];
    int lastJ=0;
    for (int i=0; i < k.length - 1; i++) {
      int j=0;
      while (j < n && y[j] < xs[i]) {
        j++;
      }
      k[i]=j - lastJ;
      lastJ=j;
    }
    k[k.length - 1]=n - lastJ;
    UnivariateIntegrator integrator=new RombergIntegrator();
    for (int i=0; i < xs.length - 1; i++) {
      double delta=integrator.integrate(1000000,new UnivariateFunction(){
        @Override public double value(        double v){
          return dist.pdf(v);
        }
      }
,xs[i],xs[i + 1]);
      Assert.assertEquals(delta,p[i + 1],1.0e-6);
    }
    double sum=0;
    for (int i=0; i < k.length; i++) {
      if (k[i] != 0) {
        sum+=k[i] * Math.log(k[i] / p[i] / n);
      }
    }
    sum*=2;
    int dof=k.length - 1;
    double z=Math.sqrt(2 * sum) - Math.sqrt(2 * dof - 1);
    Assert.assertTrue(String.format("offset=%.3f scale=%.3f Z = %.1f",offset,scale,z),Math.abs(z) < 3);
  }
  static void checkCdf(  double offset,  double scale,  AbstractContinousDistribution dist,  double[] breaks,  double[] quantiles){
    int i=0;
    for (    double x : breaks) {
      Assert.assertEquals(String.format("m=%.3f sd=%.3f x=%.3f",offset,scale,x),quantiles[i],dist.cdf(x * scale + offset),1.0e-6);
      i++;
    }
  }
}
