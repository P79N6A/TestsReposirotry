/** 
 * Tests for  {@link TopItems}.
 */
public final class TopItemsTest extends TasteTestCase {
  @Test public void testTopItems() throws Exception {
    long[] ids=new long[100];
    for (int i=0; i < 100; i++) {
      ids[i]=i;
    }
    LongPrimitiveIterator possibleItemIds=new LongPrimitiveArrayIterator(ids);
    TopItems.Estimator<Long> estimator=new TopItems.Estimator<Long>(){
      @Override public double estimate(      Long thing){
        return thing;
      }
    }
;
    List<RecommendedItem> topItems=TopItems.getTopItems(10,possibleItemIds,null,estimator);
    int gold=99;
    for (    RecommendedItem topItem : topItems) {
      assertEquals(gold,topItem.getItemID());
      assertEquals(gold--,topItem.getValue(),0.01);
    }
  }
  @Test public void testTopItemsRandom() throws Exception {
    long[] ids=new long[100];
    for (int i=0; i < 100; i++) {
      ids[i]=i;
    }
    LongPrimitiveIterator possibleItemIds=new LongPrimitiveArrayIterator(ids);
    final Random random=RandomUtils.getRandom();
    TopItems.Estimator<Long> estimator=new TopItems.Estimator<Long>(){
      @Override public double estimate(      Long thing){
        return random.nextDouble();
      }
    }
;
    List<RecommendedItem> topItems=TopItems.getTopItems(10,possibleItemIds,null,estimator);
    assertEquals(10,topItems.size());
    double last=2.0;
    for (    RecommendedItem topItem : topItems) {
      assertTrue(topItem.getValue() <= last);
      last=topItem.getItemID();
    }
  }
  @Test public void testTopUsers() throws Exception {
    long[] ids=new long[100];
    for (int i=0; i < 100; i++) {
      ids[i]=i;
    }
    LongPrimitiveIterator possibleItemIds=new LongPrimitiveArrayIterator(ids);
    TopItems.Estimator<Long> estimator=new TopItems.Estimator<Long>(){
      @Override public double estimate(      Long thing){
        return thing;
      }
    }
;
    long[] topItems=TopItems.getTopUsers(10,possibleItemIds,null,estimator);
    int gold=99;
    for (    long topItem : topItems) {
      assertEquals(gold--,topItem);
    }
  }
  @Test public void testTopItemItem() throws Exception {
    List<GenericItemSimilarity.ItemItemSimilarity> sims=Lists.newArrayList();
    for (int i=0; i < 99; i++) {
      sims.add(new GenericItemSimilarity.ItemItemSimilarity(i,i + 1,i / 99.0));
    }
    List<GenericItemSimilarity.ItemItemSimilarity> res=TopItems.getTopItemItemSimilarities(10,sims.iterator());
    int gold=99;
    for (    GenericItemSimilarity.ItemItemSimilarity re : res) {
      assertEquals(gold--,re.getItemID2());
    }
  }
  @Test public void testTopItemItemAlt() throws Exception {
    List<GenericItemSimilarity.ItemItemSimilarity> sims=Lists.newArrayList();
    for (int i=0; i < 99; i++) {
      sims.add(new GenericItemSimilarity.ItemItemSimilarity(i,i + 1,1 - (i / 99.0)));
    }
    List<GenericItemSimilarity.ItemItemSimilarity> res=TopItems.getTopItemItemSimilarities(10,sims.iterator());
    int gold=0;
    for (    GenericItemSimilarity.ItemItemSimilarity re : res) {
      assertEquals(gold++,re.getItemID1());
    }
  }
  @Test public void testTopUserUser() throws Exception {
    List<GenericUserSimilarity.UserUserSimilarity> sims=Lists.newArrayList();
    for (int i=0; i < 99; i++) {
      sims.add(new GenericUserSimilarity.UserUserSimilarity(i,i + 1,i / 99.0));
    }
    List<GenericUserSimilarity.UserUserSimilarity> res=TopItems.getTopUserUserSimilarities(10,sims.iterator());
    int gold=99;
    for (    GenericUserSimilarity.UserUserSimilarity re : res) {
      assertEquals(gold--,re.getUserID2());
    }
  }
  @Test public void testTopUserUserAlt() throws Exception {
    List<GenericUserSimilarity.UserUserSimilarity> sims=Lists.newArrayList();
    for (int i=0; i < 99; i++) {
      sims.add(new GenericUserSimilarity.UserUserSimilarity(i,i + 1,1 - (i / 99.0)));
    }
    List<GenericUserSimilarity.UserUserSimilarity> res=TopItems.getTopUserUserSimilarities(10,sims.iterator());
    int gold=0;
    for (    GenericUserSimilarity.UserUserSimilarity re : res) {
      assertEquals(gold++,re.getUserID1());
    }
  }
}
