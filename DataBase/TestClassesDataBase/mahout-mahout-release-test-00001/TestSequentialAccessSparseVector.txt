public final class TestSequentialAccessSparseVector extends AbstractVectorTest<SequentialAccessSparseVector> {
  @Override Vector generateTestVector(  int cardinality){
    return new SequentialAccessSparseVector(cardinality);
  }
  @Test public void testDotSuperBig(){
    Vector w=new SequentialAccessSparseVector(Integer.MAX_VALUE,12);
    w.set(1,0.4);
    w.set(2,0.4);
    w.set(3,-0.666666667);
    Vector v=new SequentialAccessSparseVector(Integer.MAX_VALUE,12);
    v.set(3,1);
    assertEquals("super-big",-0.666666667,v.dot(w),EPSILON);
  }
  @Override public SequentialAccessSparseVector vectorToTest(  int size){
    SequentialAccessSparseVector r=new SequentialAccessSparseVector(size);
    Random gen=RandomUtils.getRandom();
    for (int i=0; i < 3; i++) {
      r.set(gen.nextInt(r.size()),gen.nextGaussian());
    }
    return r;
  }
  @Override @Test public void testToString(){
    super.testToString();
  }
}
