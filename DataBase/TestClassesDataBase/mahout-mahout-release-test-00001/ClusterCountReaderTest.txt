public final class ClusterCountReaderTest extends MahoutTestCase {
  public static final double[][] REFERENCE={{1,1},{2,1},{1,2},{4,4},{5,4},{4,5},{5,5}};
  private FileSystem fs;
  private Path outputPathForCanopy;
  private Path outputPathForKMeans;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    Configuration conf=getConfiguration();
    fs=FileSystem.get(conf);
  }
  public static List<VectorWritable> getPointsWritable(  double[][] raw){
    List<VectorWritable> points=Lists.newArrayList();
    for (    double[] fr : raw) {
      Vector vec=new RandomAccessSparseVector(fr.length);
      vec.assign(fr);
      points.add(new VectorWritable(vec));
    }
    return points;
  }
  /** 
 * Story: User wants to use cluster post processor after canopy clustering and then run clustering on the output clusters
 */
  @Test public void testGetNumberOfClusters() throws Exception {
    List<VectorWritable> points=getPointsWritable(REFERENCE);
    Path pointsPath=getTestTempDirPath("points");
    Configuration conf=getConfiguration();
    ClusteringTestUtils.writePointsToFile(points,new Path(pointsPath,"file1"),fs,conf);
    ClusteringTestUtils.writePointsToFile(points,new Path(pointsPath,"file2"),fs,conf);
    outputPathForCanopy=getTestTempDirPath("canopy");
    outputPathForKMeans=getTestTempDirPath("kmeans");
    topLevelClustering(pointsPath,conf);
    int numberOfClusters=ClusterCountReader.getNumberOfClusters(outputPathForKMeans,conf);
    Assert.assertEquals(2,numberOfClusters);
    verifyThatNumberOfClustersIsCorrect(conf,new Path(outputPathForKMeans,new Path("clusteredPoints")));
  }
  private void topLevelClustering(  Path pointsPath,  Configuration conf) throws IOException, InterruptedException, ClassNotFoundException {
    DistanceMeasure measure=new ManhattanDistanceMeasure();
    CanopyDriver.run(conf,pointsPath,outputPathForCanopy,measure,4.0,3.0,true,0.0,true);
    Path clustersIn=new Path(outputPathForCanopy,new Path(Cluster.CLUSTERS_DIR + '0' + Cluster.FINAL_ITERATION_SUFFIX));
    KMeansDriver.run(conf,pointsPath,clustersIn,outputPathForKMeans,1,1,true,0.0,true);
  }
  private static void verifyThatNumberOfClustersIsCorrect(  Configuration conf,  Path clusteredPointsPath){
    DummyOutputCollector<IntWritable,WeightedVectorWritable> collector=new DummyOutputCollector<>();
    for (    Pair<IntWritable,WeightedVectorWritable> record : new SequenceFileIterable<IntWritable,WeightedVectorWritable>(new Path(clusteredPointsPath,"part-m-0"),conf)) {
      collector.collect(record.getFirst(),record.getSecond());
    }
    int clusterSize=collector.getKeys().size();
    assertEquals(2,clusterSize);
  }
}
