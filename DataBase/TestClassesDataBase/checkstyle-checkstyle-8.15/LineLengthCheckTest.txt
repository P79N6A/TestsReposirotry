public class LineLengthCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/sizes/linelength";
  }
  @Test public void testGetRequiredTokens(){
    final LineLengthCheck checkObj=new LineLengthCheck();
    assertArrayEquals("LineLengthCheck#getRequiredTokens should return empty array by default",CommonUtil.EMPTY_INT_ARRAY,checkObj.getRequiredTokens());
  }
  @Test public void testGetAcceptableTokens(){
    final LineLengthCheck checkObj=new LineLengthCheck();
    assertArrayEquals("LineLengthCheck#getAcceptabletokens should return empty array by default",CommonUtil.EMPTY_INT_ARRAY,checkObj.getAcceptableTokens());
  }
  @Test public void testSimple() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LineLengthCheck.class);
    checkConfig.addAttribute("max","80");
    checkConfig.addAttribute("ignorePattern","^.*is OK.*regexp.*$");
    final String[] expected={"18: " + getCheckMessage(MSG_KEY,80,81),"145: " + getCheckMessage(MSG_KEY,80,83)};
    verify(checkConfig,getPath("InputLineLengthSimple.java"),expected);
  }
  @Test public void shouldLogActualLineLength() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LineLengthCheck.class);
    checkConfig.addAttribute("max","80");
    checkConfig.addAttribute("ignorePattern","^.*is OK.*regexp.*$");
    checkConfig.addMessage("maxLineLen","{0},{1}");
    final String[] expected={"18: 80,81","145: 80,83"};
    verify(checkConfig,getPath("InputLineLengthSimple.java"),expected);
  }
  @Test public void shouldNotLogLongImportStatements() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LineLengthCheck.class);
    checkConfig.addAttribute("max","80");
    final String[] expected={"9: " + getCheckMessage(MSG_KEY,80,87)};
    verify(checkConfig,getPath("InputLineLengthLongImportStatements.java"),expected);
  }
  @Test public void shouldNotLogLongPackageStatements() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LineLengthCheck.class);
    checkConfig.addAttribute("max","80");
    final String[] expected={"7: " + getCheckMessage(MSG_KEY,80,88)};
    verify(checkConfig,getNonCompilablePath("InputLineLengthLongPackageStatement.java"),expected);
  }
}
