public class LeftCurlyTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks";
  }
  @Test public void testLeftCurlyBraces() throws Exception {
    final String[] expected={"4:1: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",1),"7:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"13:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"26:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"43:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"61:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"97:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5)};
    final Configuration checkConfig=getModuleConfig("LeftCurly");
    final String filePath=getPath("InputLeftCurlyBraces.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testLeftCurlyAnnotations() throws Exception {
    final String[] expected={"10:1: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",1),"14:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"21:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"27:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"50:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5)};
    final Configuration checkConfig=getModuleConfig("LeftCurly");
    final String filePath=getPath("InputLeftCurlyAnnotations.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testLeftCurlyMethods() throws Exception {
    final String[] expected={"4:1: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",1),"9:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"16:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"19:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"23:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"31:1: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",1),"33:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"38:9: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",9),"41:9: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",9),"45:9: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",9),"57:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"61:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"69:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"72:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5),"76:5: " + getCheckMessage(LeftCurlyCheck.class,MSG_KEY_LINE_PREVIOUS,"{",5)};
    final Configuration checkConfig=getModuleConfig("LeftCurly");
    final String filePath=getPath("InputLeftCurlyMethod.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
}
