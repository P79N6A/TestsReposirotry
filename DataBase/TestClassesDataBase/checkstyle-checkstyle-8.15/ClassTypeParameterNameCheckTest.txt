public class ClassTypeParameterNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/classtypeparametername";
  }
  @Test public void testGetClassRequiredTokens(){
    final ClassTypeParameterNameCheck checkObj=new ClassTypeParameterNameCheck();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testClassDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ClassTypeParameterNameCheck.class);
    final String pattern="^[A-Z]$";
    final String[] expected={"5:42: " + getCheckMessage(MSG_INVALID_PATTERN,"t",pattern),"13:14: " + getCheckMessage(MSG_INVALID_PATTERN,"foo",pattern),"27:24: " + getCheckMessage(MSG_INVALID_PATTERN,"foo",pattern)};
    verify(checkConfig,getPath("InputClassTypeParameterName.java"),expected);
  }
  @Test public void testClassFooName() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ClassTypeParameterNameCheck.class);
    checkConfig.addAttribute("format","^foo$");
    final String pattern="^foo$";
    final String[] expected={"5:42: " + getCheckMessage(MSG_INVALID_PATTERN,"t",pattern),"33:18: " + getCheckMessage(MSG_INVALID_PATTERN,"T",pattern)};
    verify(checkConfig,getPath("InputClassTypeParameterName.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final ClassTypeParameterNameCheck typeParameterNameCheckObj=new ClassTypeParameterNameCheck();
    final int[] actual=typeParameterNameCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
}
