public class FinalClassCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/design/finalclass";
  }
  @Test public void testGetRequiredTokens(){
    final FinalClassCheck checkObj=new FinalClassCheck();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.CTOR_DEF,TokenTypes.PACKAGE_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testFinalClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FinalClassCheck.class);
    final String[] expected={"7: " + getCheckMessage(MSG_KEY,"InputFinalClass"),"15: " + getCheckMessage(MSG_KEY,"test4"),"113: " + getCheckMessage(MSG_KEY,"someinnerClass")};
    verify(checkConfig,getPath("InputFinalClass.java"),expected);
  }
  @Test public void testClassWithPrivateCtorAndNestedExtendingSubclass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FinalClassCheck.class);
    final String[] expected={"16: " + getCheckMessage(MSG_KEY,"C")};
    verify(checkConfig,getNonCompilablePath("InputFinalClassClassWithPrivateCtorWithNestedExtendingClass.java"),expected);
  }
  @Test public void testClassWithPrivateCtorAndNestedExtendingSubclassWithoutPackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FinalClassCheck.class);
    final String[] expected={"8: " + getCheckMessage(MSG_KEY,"C")};
    verify(checkConfig,getNonCompilablePath("InputFinalClassClassWithPrivateCtorWithNestedExtendingClassWithoutPackage.java"),expected);
  }
  @Test public void testImproperToken(){
    final FinalClassCheck finalClassCheck=new FinalClassCheck();
    final DetailAST badAst=new DetailAST();
    final int unsupportedTokenByCheck=TokenTypes.EOF;
    badAst.setType(unsupportedTokenByCheck);
    try {
      finalClassCheck.visitToken(badAst);
      Assert.fail("IllegalStateException is expected");
    }
 catch (    IllegalStateException ex) {
    }
  }
  @Test public void testGetAcceptableTokens(){
    final FinalClassCheck obj=new FinalClassCheck();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.CTOR_DEF,TokenTypes.PACKAGE_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,obj.getAcceptableTokens());
  }
}
