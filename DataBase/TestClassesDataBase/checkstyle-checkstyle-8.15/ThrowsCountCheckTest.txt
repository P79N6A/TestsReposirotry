public class ThrowsCountCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/design/throwscount";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ThrowsCountCheck.class);
    final String[] expected={"17:20: " + getCheckMessage(MSG_KEY,5,4),"22:20: " + getCheckMessage(MSG_KEY,5,4),"27:20: " + getCheckMessage(MSG_KEY,6,4),"55:43: " + getCheckMessage(MSG_KEY,5,4)};
    verify(checkConfig,getPath("InputThrowsCount.java"),expected);
  }
  @Test public void testMax() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ThrowsCountCheck.class);
    checkConfig.addAttribute("max","5");
    final String[] expected={"27:20: " + getCheckMessage(MSG_KEY,6,5)};
    verify(checkConfig,getPath("InputThrowsCount.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final ThrowsCountCheck obj=new ThrowsCountCheck();
    final int[] expected={TokenTypes.LITERAL_THROWS};
    assertArrayEquals("Default acceptable tokens are invalid",expected,obj.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final ThrowsCountCheck obj=new ThrowsCountCheck();
    final int[] expected={TokenTypes.LITERAL_THROWS};
    assertArrayEquals("Default required tokens are invalid",expected,obj.getRequiredTokens());
  }
  @Test public void testWrongTokenType(){
    final ThrowsCountCheck obj=new ThrowsCountCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.CLASS_DEF,"class"));
    try {
      obj.visitToken(ast);
      fail("IllegalStateException is expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Invalid exception message",ast.toString(),ex.getMessage());
    }
  }
  @Test public void testNotIgnorePrivateMethod() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ThrowsCountCheck.class);
    checkConfig.addAttribute("ignorePrivateMethods","false");
    final String[] expected={"17:20: " + getCheckMessage(MSG_KEY,5,4),"22:20: " + getCheckMessage(MSG_KEY,5,4),"27:20: " + getCheckMessage(MSG_KEY,6,4),"35:28: " + getCheckMessage(MSG_KEY,5,4),"55:43: " + getCheckMessage(MSG_KEY,5,4)};
    verify(checkConfig,getPath("InputThrowsCount.java"),expected);
  }
  @Test public void testMethodWithAnnotation() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ThrowsCountCheck.class);
    final String[] expected={"18:26: " + getCheckMessage(MSG_KEY,5,4)};
    verify(checkConfig,getPath("InputThrowsCountMethodWithAnnotation.java"),expected);
  }
}
