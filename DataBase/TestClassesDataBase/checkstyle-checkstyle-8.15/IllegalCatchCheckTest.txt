public class IllegalCatchCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/illegalcatch";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalCatchCheck.class);
    final String[] expected={"6:11: " + getCheckMessage(MSG_KEY,"RuntimeException"),"7:11: " + getCheckMessage(MSG_KEY,"Exception"),"8:11: " + getCheckMessage(MSG_KEY,"Throwable"),"14:11: " + getCheckMessage(MSG_KEY,"java.lang.RuntimeException"),"15:11: " + getCheckMessage(MSG_KEY,"java.lang.Exception"),"16:11: " + getCheckMessage(MSG_KEY,"java.lang.Throwable")};
    verify(checkConfig,getPath("InputIllegalCatch.java"),expected);
  }
  @Test public void testIllegalClassNames() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalCatchCheck.class);
    checkConfig.addAttribute("illegalClassNames","java.lang.Error, java.lang.Exception, java.lang.Throwable");
    final String[] expected={"7:11: " + getCheckMessage(MSG_KEY,"Exception"),"8:11: " + getCheckMessage(MSG_KEY,"Throwable"),"15:11: " + getCheckMessage(MSG_KEY,"java.lang.Exception"),"16:11: " + getCheckMessage(MSG_KEY,"java.lang.Throwable")};
    verify(checkConfig,getPath("InputIllegalCatch.java"),expected);
  }
  @Test public void testIllegalClassNamesBad() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalCatchCheck.class);
    checkConfig.addAttribute("illegalClassNames","java.lang.Error, java.lang.Exception, NullPointerException");
    checkConfig.addAttribute("illegalClassNames","java.lang.IOException.");
    final String[] expected={"7:11: " + getCheckMessage(MSG_KEY,"Exception"),"15:11: " + getCheckMessage(MSG_KEY,"java.lang.Exception")};
    verify(checkConfig,getPath("InputIllegalCatch.java"),expected);
  }
  @Test public void testMultipleTypes() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalCatchCheck.class);
    final String[] expected={"7:11: " + getCheckMessage(MSG_KEY,"RuntimeException"),"10:11: " + getCheckMessage(MSG_KEY,"RuntimeException"),"13:11: " + getCheckMessage(MSG_KEY,"RuntimeException"),"16:11: " + getCheckMessage(MSG_KEY,"RuntimeException")};
    verify(checkConfig,getPath("InputIllegalCatch2.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final IllegalCatchCheck check=new IllegalCatchCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
}
