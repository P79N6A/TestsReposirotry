public class MutableExceptionCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/design/mutableexception";
  }
  @Test public void testClassExtendsGenericClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MutableExceptionCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputMutableExceptionClassExtendsGenericClass.java"),expected);
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MutableExceptionCheck.class);
    final String[] expected={"6:9: " + getCheckMessage(MSG_KEY,"errorCode"),"23:9: " + getCheckMessage(MSG_KEY,"errorCode"),"46:9: " + getCheckMessage(MSG_KEY,"errorCode")};
    verify(checkConfig,getPath("InputMutableException.java"),expected);
  }
  @Test public void testMultipleInputs() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MutableExceptionCheck.class);
    final String filePath1=getPath("InputMutableException.java");
    final String filePath2=getPath("InputMutableExceptionMultipleInputs.java");
    final List<String> expected1=Arrays.asList("6:9: " + getCheckMessage(MSG_KEY,"errorCode"),"23:9: " + getCheckMessage(MSG_KEY,"errorCode"),"46:9: " + getCheckMessage(MSG_KEY,"errorCode"));
    final List<String> expected2=Arrays.asList("6:9: " + getCheckMessage(MSG_KEY,"errorCode"),"10:9: " + getCheckMessage(MSG_KEY,"errorCode"));
    final File[] inputs={new File(filePath1),new File(filePath2)};
    verify(createChecker(checkConfig),inputs,ImmutableMap.of(filePath1,expected1,filePath2,expected2));
  }
  @Test public void testFormat() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MutableExceptionCheck.class);
    checkConfig.addAttribute("format","^.*Failure$");
    checkConfig.addAttribute("extendedClassNameFormat","^.*ThreadDeath$");
    final String[] expected={"34:13: " + getCheckMessage(MSG_KEY,"errorCode")};
    verify(checkConfig,getPath("InputMutableException.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final MutableExceptionCheck obj=new MutableExceptionCheck();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.VARIABLE_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,obj.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final MutableExceptionCheck obj=new MutableExceptionCheck();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.VARIABLE_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,obj.getRequiredTokens());
  }
  @Test public void testWrongTokenType(){
    final MutableExceptionCheck obj=new MutableExceptionCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.INTERFACE_DEF,"interface"));
    try {
      obj.visitToken(ast);
      fail("IllegalStateException is expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Invalid exception message","interface[0x-1]",ex.getMessage());
    }
  }
}
