public class EmptyForInitializerPadCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/whitespace/emptyforinitializerpad";
  }
  @Test public void testGetRequiredTokens(){
    final EmptyForInitializerPadCheck checkObj=new EmptyForInitializerPadCheck();
    final int[] expected={TokenTypes.FOR_INIT};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForInitializerPadCheck.class);
    final String[] expected={"48:14: " + getCheckMessage(MSG_PRECEDED,";")};
    verify(checkConfig,getPath("InputEmptyForInitializerPadDefaultConfig.java"),expected);
  }
  @Test public void testSpaceOption() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForInitializerPadCheck.class);
    checkConfig.addAttribute("option",PadOption.SPACE.toString());
    final String[] expected={"51:13: " + getCheckMessage(MSG_NOT_PRECEDED,";")};
    verify(checkConfig,getPath("InputEmptyForInitializerPad.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final EmptyForInitializerPadCheck emptyForInitializerPadCheckObj=new EmptyForInitializerPadCheck();
    final int[] actual=emptyForInitializerPadCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.FOR_INIT};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testPadOptionValueOf(){
    final PadOption option=PadOption.valueOf("NOSPACE");
    assertEquals("Result of valueOf is invalid",PadOption.NOSPACE,option);
  }
  @Test public void testWrapOptionValueOf(){
    final WrapOption option=WrapOption.valueOf("EOL");
    assertEquals("Result of valueOf is invalid",WrapOption.EOL,option);
  }
  @Test public void testInvalidOption() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForInitializerPadCheck.class);
    checkConfig.addAttribute("option","invalid_option");
    try {
      final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
      verify(checkConfig,getPath("InputEmptyForInitializerPad.java"),expected);
      fail("exception expected");
    }
 catch (    CheckstyleException ex) {
      final String messageStart="cannot initialize module " + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to " + "'invalid_option' in module";
      assertTrue("Invalid exception message, should start with: ",ex.getMessage().startsWith(messageStart));
    }
  }
}
