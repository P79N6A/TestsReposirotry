public class NestedForDepthCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/nestedfordepth";
  }
  /** 
 * Call the check allowing 2 layers of nested for-statements. This means the top-level for can contain up to 2 levels of nested for statements. As the test input has 4 layers of for-statements below the top-level for statement, this must cause 2 error-messages.
 * @throws Exception necessary to fulfill JUnit'sinterface-requirements for test-methods.
 */
  @Test public void testNestedTooDeep() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(NestedForDepthCheck.class);
    checkConfig.addAttribute("max","2");
    final String[] expected={"43:11: " + getCheckMessage(MSG_KEY,3,2),"44:13: " + getCheckMessage(MSG_KEY,4,2),"47:13: " + getCheckMessage(MSG_KEY,4,2)};
    verify(checkConfig,getPath("InputNestedForDepth.java"),expected);
  }
  /** 
 * Call the check allowing 4 layers of nested for-statements. This means the top-level for can contain up to 4 levels of nested for statements. As the test input has 4 layers of for-statements below the top-level for statement, this must not cause an error-message.
 * @throws Exception necessary to fulfill JUnit'sinterface-requirements for test-methods.
 */
  @Test public void testNestedOk() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(NestedForDepthCheck.class);
    checkConfig.addAttribute("max","4");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputNestedForDepth.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final NestedForDepthCheck check=new NestedForDepthCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
}
