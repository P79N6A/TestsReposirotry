public class FileLengthCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/sizes/filelength";
  }
  @Test public void testAlarm() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FileLengthCheck.class);
    checkConfig.addAttribute("max","20");
    final String[] expected={"1: " + getCheckMessage(MSG_KEY,225,20)};
    verify(createChecker(checkConfig),getPath("InputFileLength.java"),getPath("InputFileLength.java"),expected);
  }
  @Test public void testFileLengthEqualToMaxLength() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FileLengthCheck.class);
    checkConfig.addAttribute("max","225");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(createChecker(checkConfig),getPath("InputFileLength.java"),getPath("InputFileLength.java"),expected);
  }
  @Test public void testOk() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FileLengthCheck.class);
    checkConfig.addAttribute("max","1000");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(createChecker(checkConfig),getPath("InputFileLength.java"),getPath("InputFileLength.java"),expected);
  }
  @Test public void testArgs() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FileLengthCheck.class);
    try {
      checkConfig.addAttribute("max","abc");
      createChecker(checkConfig);
      fail("Should indicate illegal args");
    }
 catch (    CheckstyleException ex) {
      assertEquals("Invalid exception message","cannot initialize module" + " com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck" + " - illegal value 'abc' for property 'max' of module"+ " com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck",ex.getMessage());
    }
  }
  @Test public void testNoAlarmByExtension() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(FileLengthCheck.class);
    checkConfig.addAttribute("fileExtensions","txt");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(createChecker(checkConfig),getPath("InputFileLength.java"),getPath("InputFileLength.java"),expected);
  }
  @Test public void testExtensions(){
    final FileLengthCheck check=new FileLengthCheck();
    check.setFileExtensions("java");
    assertEquals("extension should be the same",".java",check.getFileExtensions()[0]);
    check.setFileExtensions(".java");
    assertEquals("extension should be the same",".java",check.getFileExtensions()[0]);
    try {
      check.setFileExtensions((String[])null);
      fail("IllegalArgumentException is expected");
    }
 catch (    IllegalArgumentException ex) {
      assertEquals("Invalid exception message","Extensions array can not be null",ex.getMessage());
    }
  }
}
