public class ParameterNumberCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/sizes/parameternumber";
  }
  @Test public void testGetRequiredTokens(){
    final ParameterNumberCheck checkObj=new ParameterNumberCheck();
    assertArrayEquals("ParameterNumberCheck#getRequiredTokens should return empty array by default",CommonUtil.EMPTY_INT_ARRAY,checkObj.getRequiredTokens());
  }
  @Test public void testGetAcceptableTokens(){
    final ParameterNumberCheck paramNumberCheckObj=new ParameterNumberCheck();
    final int[] actual=paramNumberCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.METHOD_DEF,TokenTypes.CTOR_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ParameterNumberCheck.class);
    final String[] expected={"194:10: " + getCheckMessage(MSG_KEY,7,9)};
    verify(checkConfig,getPath("InputParameterNumberSimple.java"),expected);
  }
  @Test public void testNum() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ParameterNumberCheck.class);
    checkConfig.addAttribute("max","2");
    final String[] expected={"71:9: " + getCheckMessage(MSG_KEY,2,3),"194:10: " + getCheckMessage(MSG_KEY,2,9)};
    verify(checkConfig,getPath("InputParameterNumberSimple.java"),expected);
  }
  @Test public void testMaxParam() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ParameterNumberCheck.class);
    checkConfig.addAttribute("max","9");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputParameterNumberSimple.java"),expected);
  }
  @Test public void shouldLogActualParameterNumber() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ParameterNumberCheck.class);
    checkConfig.addMessage("maxParam","{0},{1}");
    final String[] expected={"194:10: 7,9"};
    verify(checkConfig,getPath("InputParameterNumberSimple.java"),expected);
  }
  @Test public void shouldIgnoreMethodsWithOverrideAnnotation() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ParameterNumberCheck.class);
    checkConfig.addAttribute("ignoreOverriddenMethods","true");
    final String[] expected={"6:10: " + getCheckMessage(MSG_KEY,7,8),"11:10: " + getCheckMessage(MSG_KEY,7,8)};
    verify(checkConfig,getPath("InputParameterNumber.java"),expected);
  }
}
