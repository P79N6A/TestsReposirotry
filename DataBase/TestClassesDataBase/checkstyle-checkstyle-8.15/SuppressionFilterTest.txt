public class SuppressionFilterTest extends AbstractModuleTestSupport {
  @Rule public final TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/filters/suppressionfilter";
  }
  @Test public void testEqualsAndHashCode(){
    final EqualsVerifierReport ev=EqualsVerifier.forClass(SuppressionFilter.class).usingGetClass().withIgnoredFields("file","optional","configuration").suppress(Warning.NONFINAL_FIELDS).report();
    assertEquals("Error: " + ev.getMessage(),EqualsVerifierReport.SUCCESS,ev);
  }
  @Test public void testAccept() throws Exception {
    final String fileName=getPath("InputSuppressionFilterNone.xml");
    final boolean optional=false;
    final SuppressionFilter filter=createSuppressionFilter(fileName,optional);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",null);
    assertTrue("Audit event should be excepted when there are no suppressions",filter.accept(ev));
  }
  @Test public void testAcceptOnNullFile() throws CheckstyleException {
    final String fileName=null;
    final boolean optional=false;
    final SuppressionFilter filter=createSuppressionFilter(fileName,optional);
    final AuditEvent ev=new AuditEvent(this,"AnyJava.java",null);
    assertTrue("Audit event on null file should be excepted, but was not",filter.accept(ev));
  }
  @Test public void testNonExistentSuppressionFileWithFalseOptional(){
    final String fileName="non_existent_suppression_file.xml";
    try {
      final boolean optional=false;
      createSuppressionFilter(fileName,optional);
      fail("Exception is expected");
    }
 catch (    CheckstyleException ex) {
      assertEquals("Invalid error message","Unable to find: " + fileName,ex.getMessage());
    }
  }
  @Test public void testExistingInvalidSuppressionFileWithTrueOptional() throws IOException {
    final String fileName=getPath("InputSuppressionFilterInvalidFile.xml");
    try {
      final boolean optional=true;
      createSuppressionFilter(fileName,optional);
      fail("Exception is expected");
    }
 catch (    CheckstyleException ex) {
      assertEquals("Invalid error message","Unable to parse " + fileName + " - invalid files or checks or message format",ex.getMessage());
    }
  }
  @Test public void testExistingSuppressionFileWithTrueOptional() throws Exception {
    final String fileName=getPath("InputSuppressionFilterNone.xml");
    final boolean optional=true;
    final SuppressionFilter filter=createSuppressionFilter(fileName,optional);
    final AuditEvent ev=new AuditEvent(this,"AnyFile.java",null);
    assertTrue("Suppression file with true optional was not accepted",filter.accept(ev));
  }
  @Test public void testNonExistentSuppressionFileWithTrueOptional() throws Exception {
    final String fileName="non_existent_suppression_file.xml";
    final boolean optional=true;
    final SuppressionFilter filter=createSuppressionFilter(fileName,optional);
    final AuditEvent ev=new AuditEvent(this,"AnyFile.java",null);
    assertTrue("Should except event when suppression file does not exist",filter.accept(ev));
  }
  @Test public void testNonExistentSuppressionUrlWithTrueOptional() throws Exception {
    final String fileName="https://checkstyle.org/non_existent_suppression.xml";
    final boolean optional=true;
    final SuppressionFilter filter=createSuppressionFilter(fileName,optional);
    final AuditEvent ev=new AuditEvent(this,"AnyFile.java",null);
    assertTrue("Should except event when suppression file url does not exist",filter.accept(ev));
  }
  @Test public void testLocalFileExternalResourceContentDoesNotChange() throws Exception {
    final DefaultConfiguration filterConfig=createModuleConfig(SuppressionFilter.class);
    filterConfig.addAttribute("file",getPath("InputSuppressionFilterNone.xml"));
    final DefaultConfiguration checkerConfig=createRootConfig(filterConfig);
    final File cacheFile=temporaryFolder.newFile();
    checkerConfig.addAttribute("cacheFile",cacheFile.getPath());
    final String filePath=temporaryFolder.newFile("file.java").getPath();
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkerConfig,filePath,expected);
    verify(checkerConfig,filePath,expected);
  }
  @Test public void testRemoteFileExternalResourceContentDoesNotChange() throws Exception {
    final String[] urlCandidates={"https://checkstyle.org/files/suppressions_none.xml","https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/site/resources/" + "files/suppressions_none.xml"};
    String urlForTest=null;
    for (    String url : urlCandidates) {
      if (isConnectionAvailableAndStable(url)) {
        urlForTest=url;
        break;
      }
    }
    if (urlForTest != null) {
      final DefaultConfiguration firstFilterConfig=createModuleConfig(SuppressionFilter.class);
      firstFilterConfig.addAttribute("file",urlForTest);
      final DefaultConfiguration firstCheckerConfig=createRootConfig(firstFilterConfig);
      final File cacheFile=temporaryFolder.newFile();
      firstCheckerConfig.addAttribute("cacheFile",cacheFile.getPath());
      final String pathToEmptyFile=temporaryFolder.newFile("file.java").getPath();
      final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
      verify(firstCheckerConfig,pathToEmptyFile,expected);
      final DefaultConfiguration secondFilterConfig=createModuleConfig(SuppressionFilter.class);
      secondFilterConfig.addAttribute("file",urlForTest);
      final DefaultConfiguration secondCheckerConfig=createRootConfig(secondFilterConfig);
      secondCheckerConfig.addAttribute("cacheFile",cacheFile.getPath());
      verify(secondCheckerConfig,pathToEmptyFile,expected);
    }
  }
  private static boolean isConnectionAvailableAndStable(  String url) throws Exception {
    boolean available=false;
    if (isUrlReachable(url)) {
      final int attemptLimit=5;
      int attemptCount=0;
      while (attemptCount <= attemptLimit) {
        try (InputStream stream=new URL(url).openStream()){
          available=stream.read() != -1;
          break;
        }
 catch (        IOException ex) {
          if (attemptCount < attemptLimit && ex.getMessage().contains("Unable to read")) {
            attemptCount++;
            available=false;
            Thread.sleep(1000);
          }
 else {
            throw ex;
          }
        }
      }
    }
    return available;
  }
  private static boolean isUrlReachable(  String url){
    boolean result=true;
    try {
      final URL verifiableUrl=new URL(url);
      final HttpURLConnection urlConnect=(HttpURLConnection)verifiableUrl.openConnection();
      urlConnect.getContent();
    }
 catch (    IOException ignored) {
      result=false;
    }
    return result;
  }
  private static SuppressionFilter createSuppressionFilter(  String fileName,  boolean optional) throws CheckstyleException {
    final SuppressionFilter suppressionFilter=new SuppressionFilter();
    suppressionFilter.setFile(fileName);
    suppressionFilter.setOptional(optional);
    suppressionFilter.finishLocalSetup();
    return suppressionFilter;
  }
}
