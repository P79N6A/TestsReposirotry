public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {
  private final String checkName=IllegalThrowsCheck.class.getSimpleName();
  @Override protected String getCheckName(){
    return checkName;
  }
  @Test public void testOne() throws Exception {
    final File fileToProcess=new File(getPath("SuppressionXpathRegressionIllegalThrowsOne.java"));
    final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);
    final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};
    final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");
    runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);
  }
  @Test public void testTwo() throws Exception {
    final File fileToProcess=new File(getPath("SuppressionXpathRegressionIllegalThrowsTwo.java"));
    final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);
    final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};
    final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");
    runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);
  }
}
