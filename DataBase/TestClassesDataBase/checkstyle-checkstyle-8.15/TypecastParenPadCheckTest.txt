public class TypecastParenPadCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/whitespace/typecastparenpad";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TypecastParenPadCheck.class);
    final String[] expected={"89:14: " + getCheckMessage(MSG_WS_FOLLOWED,"("),"89:21: " + getCheckMessage(MSG_WS_PRECEDED,")")};
    verify(checkConfig,getPath("InputTypecastParenPadWhitespace.java"),expected);
  }
  @Test public void testSpace() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TypecastParenPadCheck.class);
    checkConfig.addAttribute("option",PadOption.SPACE.toString());
    final String[] expected={"87:21: " + getCheckMessage(MSG_WS_NOT_FOLLOWED,"("),"87:27: " + getCheckMessage(MSG_WS_NOT_PRECEDED,")"),"88:14: " + getCheckMessage(MSG_WS_NOT_FOLLOWED,"("),"88:20: " + getCheckMessage(MSG_WS_NOT_PRECEDED,")"),"90:14: " + getCheckMessage(MSG_WS_NOT_FOLLOWED,"("),"90:20: " + getCheckMessage(MSG_WS_NOT_PRECEDED,")"),"241:18: " + getCheckMessage(MSG_WS_NOT_FOLLOWED,"("),"241:21: " + getCheckMessage(MSG_WS_NOT_PRECEDED,")")};
    verify(checkConfig,getPath("InputTypecastParenPadWhitespace.java"),expected);
  }
  @Test public void test1322879() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TypecastParenPadCheck.class);
    checkConfig.addAttribute("option",PadOption.SPACE.toString());
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputTypecastParenPadWhitespaceAround.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final TypecastParenPadCheck typecastParenPadCheckObj=new TypecastParenPadCheck();
    final int[] actual=typecastParenPadCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.RPAREN,TokenTypes.TYPECAST};
    Assert.assertArrayEquals("Invalid acceptable tokens",expected,actual);
  }
}
