@RunWith(PowerMockRunner.class) @PrepareForTest({ImportControlLoader.class,URI.class}) public class ImportControlLoaderTest {
  private static String getPath(  String filename){
    return "src/test/resources/com/puppycrawl/tools/" + "checkstyle/checks/imports/importcontrolloader/" + filename;
  }
  @Test public void testLoad() throws CheckstyleException {
    final AbstractImportControl root=ImportControlLoader.load(new File(getPath("InputImportControlLoaderComplete.xml")).toURI());
    assertNotNull("Import root should not be null",root);
  }
  @Test public void testWrongFormatUri() throws Exception {
    try {
      ImportControlLoader.load(new URI("aaa://" + getPath("InputImportControlLoaderComplete.xml")));
      fail("exception expected");
    }
 catch (    CheckstyleException ex) {
      assertSame("Invalid exception class",MalformedURLException.class,ex.getCause().getClass());
      assertEquals("Invalid exception message","unknown protocol: aaa",ex.getCause().getMessage());
    }
  }
  @Test public void testExtraElementInConfig() throws Exception {
    final AbstractImportControl root=ImportControlLoader.load(new File(getPath("InputImportControlLoaderWithNewElement.xml")).toURI());
    assertNotNull("Import root should not be null",root);
  }
  @Test public void testSafeGetThrowsException() throws Exception {
    final AttributesImpl attr=new AttributesImpl(){
      @Override public String getValue(      int index){
        return null;
      }
    }
;
    try {
      final Class<?> clazz=ImportControlLoader.class;
      final Method privateMethod=clazz.getDeclaredMethod("safeGet",Attributes.class,String.class);
      privateMethod.setAccessible(true);
      privateMethod.invoke(null,attr,"you_cannot_find_me");
      fail("exception expected");
    }
 catch (    InvocationTargetException ex) {
      assertSame("Invalid exception class",SAXException.class,ex.getCause().getClass());
      assertEquals("Invalid exception message","missing attribute you_cannot_find_me",ex.getCause().getMessage());
    }
  }
  @Test public void testLoadThrowsException() throws Exception {
    final InputSource source=new InputSource();
    try {
      final Class<?> clazz=ImportControlLoader.class;
      final Method privateMethod=clazz.getDeclaredMethod("load",InputSource.class,URI.class);
      privateMethod.setAccessible(true);
      privateMethod.invoke(null,source,new File(getPath("InputImportControlLoaderComplete.xml")).toURI());
      fail("exception expected");
    }
 catch (    InvocationTargetException ex) {
      assertSame("Invalid exception class",CheckstyleException.class,ex.getCause().getClass());
      assertTrue("Invalid exception message: " + ex.getCause().getMessage(),ex.getCause().getMessage().startsWith("unable to read"));
    }
  }
  @Test public void testInputStreamThatFailsOnClose() throws Exception {
    final InputStream inputStream=PowerMockito.mock(InputStream.class);
    Mockito.doThrow(IOException.class).when(inputStream).close();
    final int available=Mockito.doThrow(IOException.class).when(inputStream).available();
    final URL url=PowerMockito.mock(URL.class);
    BDDMockito.given(url.openStream()).willReturn(inputStream);
    final URI uri=PowerMockito.mock(URI.class);
    BDDMockito.given(uri.toURL()).willReturn(url);
    try {
      ImportControlLoader.load(uri);
      fail("exception expected " + available);
    }
 catch (    CheckstyleException ex) {
      final Throwable[] suppressed=ex.getSuppressed();
      assertEquals("Expected one suppressed exception",1,suppressed.length);
      assertSame("Invalid exception class",IOException.class,suppressed[0].getClass());
    }
    Mockito.verify(inputStream).close();
  }
  @Test public void testInputStreamFailsOnRead() throws Exception {
    final InputStream inputStream=PowerMockito.mock(InputStream.class);
    final int available=Mockito.doThrow(IOException.class).when(inputStream).available();
    final URL url=PowerMockito.mock(URL.class);
    BDDMockito.given(url.openStream()).willReturn(inputStream);
    final URI uri=PowerMockito.mock(URI.class);
    BDDMockito.given(uri.toURL()).willReturn(url);
    try {
      ImportControlLoader.load(uri);
      fail("exception expected " + available);
    }
 catch (    CheckstyleException ex) {
      assertSame("Invalid exception class",SAXParseException.class,ex.getCause().getClass());
    }
  }
}
