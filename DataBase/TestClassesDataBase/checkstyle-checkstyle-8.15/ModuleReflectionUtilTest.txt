public class ModuleReflectionUtilTest {
  @Test public void testIsProperUtilsClass() throws ReflectiveOperationException {
    assertTrue("Constructor is not private",isUtilsClassHasPrivateConstructor(ModuleReflectionUtil.class,true));
  }
  @Test public void testIsCheckstyleModule(){
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(CheckClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(FileSetModuleClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(FilterClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(TreeWalkerFilterClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(FileFilterModuleClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(AuditListenerClass.class));
    assertTrue("Should return true when checkstyle module is passed",ModuleReflectionUtil.isCheckstyleModule(RootModuleClass.class));
  }
  @Test public void testIsValidCheckstyleClass(){
    assertTrue("Should return true when valid checkstyle class is passed",ModuleReflectionUtil.isValidCheckstyleClass(ValidCheckstyleClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isValidCheckstyleClass(InvalidNonAutomaticBeanClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isValidCheckstyleClass(AbstractInvalidClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isValidCheckstyleClass(InvalidNonDefaultConstructorClass.class));
  }
  @Test public void testIsCheckstyleCheck(){
    assertTrue("Should return true when valid checkstyle check is passed",ModuleReflectionUtil.isCheckstyleTreeWalkerCheck(CheckClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isCheckstyleTreeWalkerCheck(NotCheckstyleCheck.class));
  }
  @Test public void testIsFileSetModule(){
    assertTrue("Should return true when valid checkstyle file set module is passed",ModuleReflectionUtil.isFileSetModule(FileSetModuleClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isFileSetModule(NotCheckstyleCheck.class));
  }
  @Test public void testIsFilterModule(){
    assertTrue("Should return true when valid checkstyle filter module is passed",ModuleReflectionUtil.isFilterModule(FilterClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isFilterModule(NotCheckstyleCheck.class));
  }
  @Test public void testIsFileFilterModule(){
    assertTrue("Should return true when valid checkstyle file filter module is passed",ModuleReflectionUtil.isFileFilterModule(FileFilterModuleClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isFileFilterModule(NotCheckstyleCheck.class));
  }
  @Test public void testIsTreeWalkerFilterModule(){
    assertTrue("Should return true when valid checkstyle TreeWalker filter module is passed",ModuleReflectionUtil.isTreeWalkerFilterModule(TreeWalkerFilterClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isTreeWalkerFilterModule(NotCheckstyleCheck.class));
  }
  @Test public void testIsAuditListener(){
    assertTrue("Should return true when valid checkstyle AuditListener module is passed",ModuleReflectionUtil.isAuditListener(DefaultLogger.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isAuditListener(NotCheckstyleCheck.class));
  }
  @Test public void testIsRootModule(){
    assertTrue("Should return true when valid checkstyle root module is passed",ModuleReflectionUtil.isRootModule(RootModuleClass.class));
    assertFalse("Should return false when invalid class is passed",ModuleReflectionUtil.isRootModule(NotCheckstyleCheck.class));
  }
  @Test public void testKeepEclipseHappy(){
    final InvalidNonDefaultConstructorClass test=new InvalidNonDefaultConstructorClass(0);
    assertNotNull("should use constructor",test);
    assertEquals("should use field",1,test.getField());
  }
private static class ValidCheckstyleClass extends AutomaticBean {
    @Override protected void finishLocalSetup(){
    }
  }
private static class InvalidNonAutomaticBeanClass {
  }
  /** 
 * AbstractInvalidClass.
 * @noinspection AbstractClassNeverImplemented
 */
private abstract static class AbstractInvalidClass extends AutomaticBean {
    public abstract void method();
  }
private static class CheckClass extends AbstractCheck {
    @Override public int[] getDefaultTokens(){
      return new int[]{0};
    }
    @Override public int[] getAcceptableTokens(){
      return getDefaultTokens();
    }
    @Override public int[] getRequiredTokens(){
      return getDefaultTokens();
    }
  }
private static class FileSetModuleClass extends AbstractFileSetCheck {
    @Override protected void processFiltered(    File file,    FileText fileText){
    }
  }
private static class FilterClass extends AutomaticBean implements Filter {
    @Override protected void finishLocalSetup(){
    }
    @Override public boolean accept(    AuditEvent event){
      return false;
    }
  }
private static class FileFilterModuleClass extends AutomaticBean implements BeforeExecutionFileFilter {
    @Override protected void finishLocalSetup(){
    }
    @Override public boolean accept(    String uri){
      return false;
    }
  }
private static class RootModuleClass extends AutomaticBean implements RootModule {
    @Override protected void finishLocalSetup(){
    }
    @Override public void addListener(    AuditListener listener){
    }
    @Override public int process(    List<File> files){
      return 0;
    }
    @Override public void destroy(){
    }
    @Override public void setModuleClassLoader(    ClassLoader moduleClassLoader){
    }
  }
private static class TreeWalkerFilterClass extends AutomaticBean implements TreeWalkerFilter {
    @Override protected void finishLocalSetup(){
    }
    @Override public boolean accept(    TreeWalkerAuditEvent treeWalkerAuditEvent){
      return false;
    }
  }
private static class AuditListenerClass extends AutomaticBean implements AuditListener {
    @Override protected void finishLocalSetup(){
    }
    @Override public void auditStarted(    AuditEvent event){
    }
    @Override public void auditFinished(    AuditEvent event){
    }
    @Override public void fileStarted(    AuditEvent event){
    }
    @Override public void fileFinished(    AuditEvent event){
    }
    @Override public void addError(    AuditEvent event){
    }
    @Override public void addException(    AuditEvent event,    Throwable throwable){
    }
  }
private static class NotCheckstyleCheck {
  }
private static class InvalidNonDefaultConstructorClass extends AutomaticBean {
    private int field;
    protected InvalidNonDefaultConstructorClass(    int data){
      field=0;
      method(data);
    }
    public final void method(    int data){
      field++;
      if (data > 0) {
        method(data - 1);
      }
    }
    public int getField(){
      return field;
    }
    @Override protected void finishLocalSetup(){
    }
  }
}
