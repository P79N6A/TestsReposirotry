public class TokenTypesTest {
  @Test public void testAllTokenTypesHasDescription(){
    final String tokenTypes="com.puppycrawl.tools.checkstyle.api.tokentypes";
    final ResourceBundle bundle=ResourceBundle.getBundle(tokenTypes,Locale.ROOT);
    final Set<String> expected=Arrays.stream(TokenUtil.getAllTokenIds()).mapToObj(TokenUtil::getTokenName).collect(Collectors.toSet());
    final Set<String> actual=bundle.keySet();
    assertEquals("TokenTypes without description",expected,actual);
  }
  @Test public void testAllDescriptionsEndsWithPeriod(){
    final Set<String> badDescriptions=Arrays.stream(TokenUtil.getAllTokenIds()).mapToObj(TokenUtil::getTokenName).map(TokenUtil::getShortDescription).filter(desc -> desc.charAt(desc.length() - 1) != '.').collect(Collectors.toSet());
    assertEquals("Malformed TokenType descriptions",Collections.emptySet(),badDescriptions);
  }
  @Test public void testGetShortDescription(){
    assertEquals("short description for EQUAL","The <code>==</code> (equal) operator.",TokenUtil.getShortDescription("EQUAL"));
    assertEquals("short description for LAND","The <code>&&</code> (conditional AND) operator.",TokenUtil.getShortDescription("LAND"));
    assertEquals("short description for LCURLY","A left curly brace (<code>{</code>).",TokenUtil.getShortDescription("LCURLY"));
    assertEquals("short description for SR_ASSIGN","The <code>>>=</code> (signed right shift assignment) operator.",TokenUtil.getShortDescription("SR_ASSIGN"));
    assertEquals("short description for SL","The <code><<</code> (shift left) operator.",TokenUtil.getShortDescription("SL"));
    assertEquals("short description for BSR","The <code>>>></code> (unsigned shift right) operator.",TokenUtil.getShortDescription("BSR"));
  }
  @Test public void testIsProperUtilsClass() throws ReflectiveOperationException {
    assertTrue("Constructor is not private",isUtilsClassHasPrivateConstructor(TokenTypes.class,true));
  }
}
