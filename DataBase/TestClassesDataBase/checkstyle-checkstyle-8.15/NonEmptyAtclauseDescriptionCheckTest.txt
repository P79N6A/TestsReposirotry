public class NonEmptyAtclauseDescriptionCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/javadoc/nonemptyatclausedescription";
  }
  @Test public void testGetAcceptableTokens(){
    final NonEmptyAtclauseDescriptionCheck checkObj=new NonEmptyAtclauseDescriptionCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default acceptable tokens are invalid",expected,checkObj.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final NonEmptyAtclauseDescriptionCheck checkObj=new NonEmptyAtclauseDescriptionCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testCheck() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(NonEmptyAtclauseDescriptionCheck.class);
    final String[] expected={"26: " + getCheckMessage(MSG_KEY),"27: " + getCheckMessage(MSG_KEY),"28: " + getCheckMessage(MSG_KEY),"37: " + getCheckMessage(MSG_KEY),"38: " + getCheckMessage(MSG_KEY),"39: " + getCheckMessage(MSG_KEY),"75: " + getCheckMessage(MSG_KEY),"76: " + getCheckMessage(MSG_KEY),"77: " + getCheckMessage(MSG_KEY),"78: " + getCheckMessage(MSG_KEY),"79: " + getCheckMessage(MSG_KEY),"80: " + getCheckMessage(MSG_KEY),"89: " + getCheckMessage(MSG_KEY),"90: " + getCheckMessage(MSG_KEY),"91: " + getCheckMessage(MSG_KEY),"92: " + getCheckMessage(MSG_KEY),"93: " + getCheckMessage(MSG_KEY),"120: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputNonEmptyAtclauseDescription.java"),expected);
  }
}
