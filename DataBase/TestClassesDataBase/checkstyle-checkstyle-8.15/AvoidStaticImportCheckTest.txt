public class AvoidStaticImportCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/imports/avoidstaticimport";
  }
  @Test public void testGetRequiredTokens(){
    final AvoidStaticImportCheck checkObj=new AvoidStaticImportCheck();
    final int[] expected={TokenTypes.STATIC_IMPORT};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testDefaultOperation() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidStaticImportCheck.class);
    final String[] expected={"23: " + getCheckMessage(MSG_KEY,"java.io.File.listRoots"),"25: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"26: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"27: " + getCheckMessage(MSG_KEY,"java.io.File.createTempFile"),"28: " + getCheckMessage(MSG_KEY,"java.io.File.pathSeparator"),"29: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass"),"30: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass.one")};
    verify(checkConfig,getPath("InputAvoidStaticImportDefault.java"),expected);
  }
  @Test public void testStarExcludes() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidStaticImportCheck.class);
    checkConfig.addAttribute("excludes","java.io.File.*,sun.net.ftpclient.FtpClient.*");
    final String[] expected={"25: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"26: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"29: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass"),"30: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass.one")};
    verify(checkConfig,getPath("InputAvoidStaticImportDefault.java"),expected);
  }
  @Test public void testMemberExcludes() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidStaticImportCheck.class);
    checkConfig.addAttribute("excludes","java.io.File.listRoots");
    final String[] expected={"25: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"26: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"27: " + getCheckMessage(MSG_KEY,"java.io.File.createTempFile"),"28: " + getCheckMessage(MSG_KEY,"java.io.File.pathSeparator"),"29: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass"),"30: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass.one")};
    verify(checkConfig,getPath("InputAvoidStaticImportDefault.java"),expected);
  }
  @Test public void testBogusMemberExcludes() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidStaticImportCheck.class);
    checkConfig.addAttribute("excludes","java.io.File.listRoots.listRoots, javax.swing.WindowConstants, javax.swing.*," + "sun.net.ftpclient.FtpClient.*FtpClient, sun.net.ftpclient.FtpClientjunk," + " java.io.File.listRootsmorejunk");
    final String[] expected={"23: " + getCheckMessage(MSG_KEY,"java.io.File.listRoots"),"25: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"26: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"27: " + getCheckMessage(MSG_KEY,"java.io.File.createTempFile"),"28: " + getCheckMessage(MSG_KEY,"java.io.File.pathSeparator"),"29: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass"),"30: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass.one")};
    verify(checkConfig,getPath("InputAvoidStaticImportDefault.java"),expected);
  }
  @Test public void testInnerClassMemberExcludesStar() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidStaticImportCheck.class);
    checkConfig.addAttribute("excludes","com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass.*");
    final String[] expected={"23: " + getCheckMessage(MSG_KEY,"java.io.File.listRoots"),"25: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"26: " + getCheckMessage(MSG_KEY,"javax.swing.WindowConstants.*"),"27: " + getCheckMessage(MSG_KEY,"java.io.File.createTempFile"),"28: " + getCheckMessage(MSG_KEY,"java.io.File.pathSeparator"),"29: " + getCheckMessage(MSG_KEY,"com.puppycrawl.tools.checkstyle.checks.imports." + "avoidstaticimport.InputAvoidStaticImportNestedClass.InnerClass")};
    verify(checkConfig,getPath("InputAvoidStaticImportDefault.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final AvoidStaticImportCheck testCheckObject=new AvoidStaticImportCheck();
    final int[] actual=testCheckObject.getAcceptableTokens();
    final int[] expected={TokenTypes.STATIC_IMPORT};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
}
