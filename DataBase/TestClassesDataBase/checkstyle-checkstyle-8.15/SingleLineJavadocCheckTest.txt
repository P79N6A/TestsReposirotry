public class SingleLineJavadocCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/javadoc/singlelinejavadoc";
  }
  @Test public void testAcceptableTokens(){
    final SingleLineJavadocCheck checkObj=new SingleLineJavadocCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default acceptable tokens are invalid",expected,checkObj.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final SingleLineJavadocCheck checkObj=new SingleLineJavadocCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void simpleTest() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(SingleLineJavadocCheck.class);
    final String[] expected={"12: " + getCheckMessage(MSG_KEY),"28: " + getCheckMessage(MSG_KEY),"40: " + getCheckMessage(MSG_KEY),"43: " + getCheckMessage(MSG_KEY),"49: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputSingleLineJavadoc.java"),expected);
  }
  @Test public void testIgnoredTags() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(SingleLineJavadocCheck.class);
    checkConfig.addAttribute("ignoredTags","@inheritDoc, @throws,  " + "@ignoredCustomTag");
    checkConfig.addAttribute("ignoreInlineTags","false");
    final String[] expected={"4: " + getCheckMessage(MSG_KEY),"34: " + getCheckMessage(MSG_KEY),"37: " + getCheckMessage(MSG_KEY),"40: " + getCheckMessage(MSG_KEY),"46: " + getCheckMessage(MSG_KEY),"49: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputSingleLineJavadoc.java"),expected);
  }
}
