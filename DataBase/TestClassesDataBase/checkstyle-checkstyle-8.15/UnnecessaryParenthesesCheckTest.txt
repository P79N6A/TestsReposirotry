/** 
 * Test fixture for the UnnecessaryParenthesesCheck.
 */
public class UnnecessaryParenthesesCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/unnecessaryparentheses";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UnnecessaryParenthesesCheck.class);
    final String[] expected={"5:22: " + getCheckMessage(MSG_ASSIGN),"5:29: " + getCheckMessage(MSG_EXPR),"5:31: " + getCheckMessage(MSG_IDENT,"i"),"5:46: " + getCheckMessage(MSG_ASSIGN),"6:15: " + getCheckMessage(MSG_ASSIGN),"7:14: " + getCheckMessage(MSG_IDENT,"x"),"7:17: " + getCheckMessage(MSG_ASSIGN),"8:15: " + getCheckMessage(MSG_ASSIGN),"9:14: " + getCheckMessage(MSG_IDENT,"x"),"9:17: " + getCheckMessage(MSG_ASSIGN),"12:22: " + getCheckMessage(MSG_ASSIGN),"12:30: " + getCheckMessage(MSG_IDENT,"i"),"12:46: " + getCheckMessage(MSG_ASSIGN),"16:17: " + getCheckMessage(MSG_LITERAL,"0"),"26:11: " + getCheckMessage(MSG_ASSIGN),"30:11: " + getCheckMessage(MSG_ASSIGN),"32:11: " + getCheckMessage(MSG_ASSIGN),"34:11: " + getCheckMessage(MSG_ASSIGN),"35:16: " + getCheckMessage(MSG_IDENT,"a"),"36:14: " + getCheckMessage(MSG_IDENT,"a"),"36:20: " + getCheckMessage(MSG_IDENT,"b"),"36:26: " + getCheckMessage(MSG_LITERAL,"600"),"36:40: " + getCheckMessage(MSG_LITERAL,"12.5f"),"36:56: " + getCheckMessage(MSG_IDENT,"arg2"),"37:14: " + getCheckMessage(MSG_STRING,"\"this\""),"37:25: " + getCheckMessage(MSG_STRING,"\"that\""),"38:11: " + getCheckMessage(MSG_ASSIGN),"38:14: " + getCheckMessage(MSG_STRING,"\"this is a really, really...\""),"40:16: " + getCheckMessage(MSG_RETURN),"44:21: " + getCheckMessage(MSG_LITERAL,"1"),"44:26: " + getCheckMessage(MSG_LITERAL,"13.5"),"45:22: " + getCheckMessage(MSG_LITERAL,"true"),"46:17: " + getCheckMessage(MSG_IDENT,"b"),"50:17: " + getCheckMessage(MSG_ASSIGN),"52:11: " + getCheckMessage(MSG_ASSIGN),"54:16: " + getCheckMessage(MSG_RETURN),"64:13: " + getCheckMessage(MSG_EXPR),"68:16: " + getCheckMessage(MSG_EXPR),"73:19: " + getCheckMessage(MSG_EXPR),"74:23: " + getCheckMessage(MSG_LITERAL,"4000"),"79:19: " + getCheckMessage(MSG_ASSIGN),"81:11: " + getCheckMessage(MSG_ASSIGN),"81:16: " + getCheckMessage(MSG_LITERAL,"3"),"82:39: " + getCheckMessage(MSG_ASSIGN),"93:11: " + getCheckMessage(MSG_ASSIGN),"93:14: " + getCheckMessage(MSG_STRING,"\"12345678901234567890123\"")};
    verify(checkConfig,getPath("InputUnnecessaryParenthesesOperatorsAndCasts.java"),expected);
  }
  @Test public void test15Extensions() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UnnecessaryParenthesesCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputUnnecessaryParentheses15Extensions.java"),expected);
  }
  @Test public void testLambdas() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UnnecessaryParenthesesCheck.class);
    checkConfig.addAttribute("tokens","LAMBDA");
    final String[] expected={"10:35: " + getCheckMessage(MSG_LAMBDA),"11:35: " + getCheckMessage(MSG_LAMBDA),"18:18: " + getCheckMessage(MSG_LAMBDA),"19:57: " + getCheckMessage(MSG_LAMBDA),"38:25: " + getCheckMessage(MSG_LAMBDA),"38:33: " + getCheckMessage(MSG_LAMBDA),"41:25: " + getCheckMessage(MSG_LAMBDA),"44:31: " + getCheckMessage(MSG_LAMBDA)};
    verify(checkConfig,getPath("InputUnnecessaryParenthesesLambdas.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final UnnecessaryParenthesesCheck check=new UnnecessaryParenthesesCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
}
