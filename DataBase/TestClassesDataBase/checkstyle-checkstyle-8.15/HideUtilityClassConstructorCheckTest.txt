public class HideUtilityClassConstructorCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/design/hideutilityclassconstructor";
  }
  @Test public void testGetRequiredTokens(){
    final HideUtilityClassConstructorCheck checkObj=new HideUtilityClassConstructorCheck();
    final int[] expected={TokenTypes.CLASS_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testUtilClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected={"3:1: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputHideUtilityClassConstructorInnerStaticClasses.java"),expected);
  }
  @Test public void testUtilClassPublicCtor() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected={"3:1: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputHideUtilityClassConstructorPublic.java"),expected);
  }
  @Test public void testUtilClassPrivateCtor() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorPrivate.java"),expected);
  }
  /** 
 * Non-static methods - always OK. 
 */
  @Test public void testNonUtilClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorDesignForExtension.java"),expected);
  }
  @Test public void testDerivedNonUtilClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorNonUtilityClass.java"),expected);
  }
  @Test public void testOnlyNonStaticFieldNonUtilClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorRegression.java"),expected);
  }
  @Test public void testEmptyAbstractClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorAbstractSerializable.java"),expected);
  }
  @Test public void testEmptyClassWithOnlyPrivateFields() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorSerializable.java"),expected);
  }
  @Test public void testClassWithStaticInnerClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructorSerializableInnerStatic.java"),expected);
  }
  @Test public void testProtectedCtor() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(HideUtilityClassConstructorCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputHideUtilityClassConstructor.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final HideUtilityClassConstructorCheck obj=new HideUtilityClassConstructorCheck();
    final int[] expected={TokenTypes.CLASS_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,obj.getAcceptableTokens());
  }
}
