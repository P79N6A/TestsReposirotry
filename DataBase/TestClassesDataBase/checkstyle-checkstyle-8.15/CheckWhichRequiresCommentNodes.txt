private static class CheckWhichRequiresCommentNodes extends AbstractCheck {
  /** 
 * Number of children of method definition token. 
 */
  private static final int METHOD_DEF_CHILD_COUNT=7;
  @Override public boolean isCommentNodesRequired(){
    return true;
  }
  @Override public int[] getDefaultTokens(){
    return new int[]{TokenTypes.METHOD_DEF};
  }
  @Override public int[] getAcceptableTokens(){
    return new int[]{TokenTypes.METHOD_DEF};
  }
  @Override public int[] getRequiredTokens(){
    return new int[]{TokenTypes.METHOD_DEF};
  }
  @Override public void visitToken(  DetailAST ast){
    if (ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.BLOCK_COMMENT_BEGIN) == null) {
      log(ast,"Incorrect AST structure.");
    }
    final int childCount=ast.getChildCount();
    if (childCount != METHOD_DEF_CHILD_COUNT) {
      final String msg=String.format(Locale.getDefault(),"AST node in comment tree has wrong number of children. " + "Expected is %d but was %d",METHOD_DEF_CHILD_COUNT,childCount);
      log(ast,msg);
    }
    int actualChildCount=0;
    for (DetailAST child=ast.getFirstChild().getFirstChild(); child != null; child=child.getNextSibling()) {
      actualChildCount++;
    }
    final int cacheChildCount=ast.getFirstChild().getChildCount();
    if (cacheChildCount != actualChildCount) {
      final String msg=String.format(Locale.getDefault(),"AST node with comment has wrong number of children. " + "Expected is %d but was %d",cacheChildCount,actualChildCount);
      log(ast,msg);
    }
  }
}
