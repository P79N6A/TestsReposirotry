public class SuppressElementTest {
  private SuppressElement filter;
  @Before public void setUp(){
    filter=new SuppressElement("Test","Test",null,null,null,null);
  }
  @Test public void testDecideDefault(){
    final AuditEvent ev=new AuditEvent(this,"Test.java");
    assertTrue(ev.getFileName(),filter.accept(ev));
  }
  @Test public void testDecideLocalizedMessage(){
    final LocalizedMessage message=new LocalizedMessage(1,0,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    assertFalse("Names match",filter.accept(ev));
  }
  @Test public void testDecideByMessage(){
    final LocalizedMessage message=new LocalizedMessage(1,0,"","",null,null,getClass(),"Test");
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement filter1=new SuppressElement(null,null,"Test",null,null,null);
    final SuppressElement filter2=new SuppressElement(null,null,"Bad",null,null,null);
    assertFalse("Message match",filter1.accept(ev));
    assertTrue("Message not match",filter2.accept(ev));
  }
  @Test public void testDecideByLine(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement filter1=new SuppressElement("Test","Test",null,null,"1-10",null);
    final SuppressElement filter2=new SuppressElement("Test","Test",null,null,"1-9, 11",null);
    final SuppressElement filter3=new SuppressElement("Test","Test",null,null,null,null);
    assertFalse("In range 1-10",filter1.accept(ev));
    assertTrue("Not in 1-9, 11",filter2.accept(ev));
    assertFalse("none",filter3.accept(ev));
  }
  @Test public void testDecideByColumn(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement filter1=new SuppressElement("Test","Test",null,null,null,"1-10");
    final SuppressElement filter2=new SuppressElement("Test","Test",null,null,null,"1-9, 11");
    assertFalse("In range 1-10",filter1.accept(ev));
    assertTrue("Not in 1-9, 1)",filter2.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingFileNameNull(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,null,message);
    assertTrue("Filter should accept valid event",filter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingMessageNull(){
    final AuditEvent ev=new AuditEvent(this,"ATest.java",null);
    assertTrue("Filter should accept valid event",filter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingModuleNull(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,"MyModule",getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    assertFalse("Filter should not accept invalid event",filter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingModuleEqual(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,"MyModule",getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement myFilter=new SuppressElement("Test","Test",null,"MyModule",null,null);
    assertFalse("Filter should not accept invalid event",myFilter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingModuleNotEqual(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,"TheirModule",getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement myFilter=new SuppressElement("Test","Test",null,"MyModule",null,null);
    assertTrue("Filter should accept valid event",myFilter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingRegExpNotMatch(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"T1est",message);
    assertTrue("Filter should accept valid event",filter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingRegExpMatch(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"TestSUFFIX",message);
    final SuppressElement myFilter=new SuppressElement("Test",null,null,null,null,null);
    assertFalse("Filter should not accept invalid event",myFilter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingCheckRegExpNotMatch(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement myFilter=new SuppressElement("Test","NON_EXISTENT_CHECK",null,"MyModule",null,null);
    assertTrue("Filter should accept valid event",myFilter.accept(ev));
  }
  @Test public void testDecideByFileNameAndModuleMatchingCheckRegExpMatch(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement myFilter=new SuppressElement("Test",getClass().getCanonicalName(),null,null,null,null);
    assertFalse("Filter should not accept invalid event",myFilter.accept(ev));
  }
  @Test public void testDecideByFileNameAndSourceNameCheckRegExpNotMatch(){
    final LocalizedMessage message=new LocalizedMessage(10,10,"","",null,null,getClass(),null);
    final AuditEvent ev=new AuditEvent(this,"ATest.java",message);
    final SuppressElement myFilter=new SuppressElement("Test",TreeWalkerTest.class.getCanonicalName(),null,null,null,null);
    assertTrue("Filter should not accept invalid event",myFilter.accept(ev));
  }
  @Test public void testEquals(){
    final SuppressElement filterBased=new SuppressElement("Test","Test",null,null,null,null);
    final SuppressElement filter2=new SuppressElement("Test","Test",null,null,null,null);
    assertEquals("filter, filter2",filterBased,filter2);
    final SuppressElement filter3=new SuppressElement("Test","Test3",null,null,null,null);
    assertNotEquals("filter, filter3",filterBased,filter3);
    final SuppressElement filterBased1=new SuppressElement("Test","Test",null,null,null,"1-10");
    assertNotEquals("filter, filter2",filterBased1,filter2);
    final SuppressElement filter22=new SuppressElement("Test","Test",null,null,null,"1-10");
    assertEquals("filter, filter2",filterBased1,filter22);
    assertNotEquals("filter, filter2",filterBased1,filter2);
    final SuppressElement filterBased2=new SuppressElement("Test","Test",null,null,"3,4",null);
    assertNotEquals("filter, filter2",filterBased2,filter2);
    final SuppressElement filter23=new SuppressElement("Test","Test",null,null,"3,4",null);
    assertEquals("filter, filter2",filterBased2,filter23);
    assertNotEquals("filter, filter2",filterBased2,filter2);
    assertEquals("filter, filter2",filterBased2,filter23);
  }
  @Test public void testEqualsAndHashCode(){
    final EqualsVerifierReport ev=EqualsVerifier.forClass(SuppressElement.class).usingGetClass().withIgnoredFields("fileRegexp","checkRegexp","messageRegexp","columnFilter","lineFilter").suppress(Warning.NONFINAL_FIELDS).report();
    assertEquals("Error: " + ev.getMessage(),EqualsVerifierReport.SUCCESS,ev);
  }
}
