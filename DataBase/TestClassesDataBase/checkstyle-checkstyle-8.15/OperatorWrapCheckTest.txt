public class OperatorWrapCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/whitespace/operatorwrap";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    final String[] expected={"17:19: " + getCheckMessage(MSG_LINE_NEW,"+"),"18:15: " + getCheckMessage(MSG_LINE_NEW,"-"),"26:18: " + getCheckMessage(MSG_LINE_NEW,"&&"),"48:30: " + getCheckMessage(MSG_LINE_NEW,"&"),"61:30: " + getCheckMessage(MSG_LINE_NEW,"&")};
    verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
  }
  @Test public void testOpWrapEol() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    checkConfig.addAttribute("option",WrapOption.EOL.toString());
    final String[] expected={"20:13: " + getCheckMessage(MSG_LINE_PREVIOUS,"-"),"24:13: " + getCheckMessage(MSG_LINE_PREVIOUS,"&&"),"29:13: " + getCheckMessage(MSG_LINE_PREVIOUS,"&&")};
    verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
  }
  @Test public void testNonDefOpsDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    checkConfig.addAttribute("tokens","METHOD_REF");
    final String[] expected={"33:33: " + getCheckMessage(MSG_LINE_NEW,"::")};
    verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
  }
  @Test public void testNonDefOpsWrapEol() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    checkConfig.addAttribute("tokens","METHOD_REF");
    checkConfig.addAttribute("option",WrapOption.EOL.toString());
    final String[] expected={"31:21: " + getCheckMessage(MSG_LINE_PREVIOUS,"::"),"36:21: " + getCheckMessage(MSG_LINE_PREVIOUS,"::")};
    verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
  }
  @Test public void testAssignEol() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    checkConfig.addAttribute("tokens","ASSIGN");
    checkConfig.addAttribute("option",WrapOption.EOL.toString());
    final String[] expected={"42:13: " + getCheckMessage(MSG_LINE_PREVIOUS,"=")};
    verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
  }
  @Test public void testInvalidOption() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OperatorWrapCheck.class);
    checkConfig.addAttribute("option","invalid_option");
    try {
      final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
      verify(checkConfig,getPath("InputOperatorWrap.java"),expected);
      fail("exception expected");
    }
 catch (    CheckstyleException ex) {
      final String messageStart="cannot initialize module " + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to " + "'invalid_option' in module";
      assertTrue("Invalid exception message, should start with: " + messageStart,ex.getMessage().startsWith(messageStart));
    }
  }
}
