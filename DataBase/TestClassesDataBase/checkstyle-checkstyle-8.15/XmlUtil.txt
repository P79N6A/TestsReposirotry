/** 
 * XmlUtil.
 * @noinspection ClassOnlyUsedInOnePackage
 */
public final class XmlUtil {
  private XmlUtil(){
  }
  public static Document getRawXml(  String fileName,  String code,  String unserializedSource) throws ParserConfigurationException {
    Document rawXml=null;
    try {
      final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      factory.setValidating(false);
      factory.setNamespaceAware(true);
      final DocumentBuilder builder=factory.newDocumentBuilder();
      rawXml=builder.parse(new InputSource(new StringReader(code)));
    }
 catch (    IOException|SAXException ex) {
      Assert.fail(fileName + " has invalid xml (" + ex.getMessage()+ "): "+ unserializedSource);
    }
    return rawXml;
  }
  public static Set<Node> getChildrenElements(  Node node){
    final Set<Node> result=new LinkedHashSet<>();
    for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
      if (child.getNodeType() != Node.TEXT_NODE) {
        result.add(child);
      }
    }
    return result;
  }
  public static Node getFirstChildElement(  Node node){
    Node firstChildElement=null;
    for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
      if (child.getNodeType() != Node.TEXT_NODE) {
        firstChildElement=child;
        break;
      }
    }
    return firstChildElement;
  }
  public static Set<Node> findChildElementsByTag(  Node node,  String tag){
    final Set<Node> result=new LinkedHashSet<>();
    for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
      if (tag.equals(child.getNodeName())) {
        result.add(child);
      }
 else       if (child.hasChildNodes()) {
        result.addAll(findChildElementsByTag(child,tag));
      }
    }
    return result;
  }
}
