/** 
 * Tests to ensure that default message bundle is determined correctly.
 */
public class AbstractViolationReporterTest {
  private final AbstractCheck emptyCheck=new EmptyCheck();
  private static Method getGetMessageBundleMethod() throws Exception {
    final Class<AbstractViolationReporter> abstractViolationReporterClass=AbstractViolationReporter.class;
    final Method getMessageBundleMethod=abstractViolationReporterClass.getDeclaredMethod("getMessageBundle",String.class);
    getMessageBundleMethod.setAccessible(true);
    return getMessageBundleMethod;
  }
  protected static DefaultConfiguration createModuleConfig(  Class<?> clazz){
    return new DefaultConfiguration(clazz.getName());
  }
  @Test public void testGetMessageBundleWithPackage() throws Exception {
    assertEquals("Message bundle differs from expected","com.mycompany.checks.messages",getGetMessageBundleMethod().invoke(null,"com.mycompany.checks.MyCoolCheck"));
  }
  @Test public void testGetMessageBundleWithoutPackage() throws Exception {
    assertEquals("Message bundle differs from expected","messages",getGetMessageBundleMethod().invoke(null,"MyCoolCheck"));
  }
  @Test public void testCustomId(){
    emptyCheck.setId("MyId");
    assertEquals("Id differs from expected","MyId",emptyCheck.getId());
  }
  @Test public void testCustomMessage() throws Exception {
    final DefaultConfiguration config=createModuleConfig(emptyCheck.getClass());
    config.addMessage("msgKey","This is a custom message.");
    emptyCheck.configure(config);
    emptyCheck.log(1,"msgKey");
    final SortedSet<LocalizedMessage> messages=emptyCheck.getMessages();
    assertEquals("Amount of messages differs from expected",1,messages.size());
    assertEquals("Message differs from expected","This is a custom message.",messages.first().getMessage());
  }
  @Test public void testCustomMessageWithParameters() throws Exception {
    final DefaultConfiguration config=createModuleConfig(emptyCheck.getClass());
    config.addMessage("msgKey","This is a custom message with {0}.");
    emptyCheck.configure(config);
    emptyCheck.log(1,"msgKey","TestParam");
    final SortedSet<LocalizedMessage> messages=emptyCheck.getMessages();
    assertEquals("Amount of messages differs from expected",1,messages.size());
    assertEquals("Message differs from expected","This is a custom message with TestParam.",messages.first().getMessage());
  }
  @Test public void testCustomMessageWithParametersNegative() throws Exception {
    final DefaultConfiguration config=createModuleConfig(emptyCheck.getClass());
    config.addMessage("msgKey","This is a custom message {0.");
    emptyCheck.configure(config);
    try {
      emptyCheck.log(1,"msgKey","TestParam");
      fail("exception expected");
    }
 catch (    IllegalArgumentException ex) {
      assertEquals("Error message is unexpected","Unmatched braces in the pattern.",ex.getMessage());
    }
  }
private static class EmptyCheck extends AbstractCheck {
    @Override public int[] getDefaultTokens(){
      return CommonUtil.EMPTY_INT_ARRAY;
    }
    @Override public int[] getAcceptableTokens(){
      return CommonUtil.EMPTY_INT_ARRAY;
    }
    @Override public int[] getRequiredTokens(){
      return CommonUtil.EMPTY_INT_ARRAY;
    }
  }
}
