/** 
 * Test case for the JavaNCSS-Check.
 */
public class JavaNCSSCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/metrics/javancss";
  }
  @Test public void test() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavaNCSSCheck.class);
    checkConfig.addAttribute("methodMaximum","0");
    checkConfig.addAttribute("classMaximum","1");
    checkConfig.addAttribute("fileMaximum","2");
    final String[] expected={"2:1: " + getCheckMessage(MSG_FILE,39,2),"9:1: " + getCheckMessage(MSG_CLASS,22,1),"14:5: " + getCheckMessage(MSG_METHOD,2,0),"21:5: " + getCheckMessage(MSG_METHOD,4,0),"30:5: " + getCheckMessage(MSG_METHOD,12,0),"42:13: " + getCheckMessage(MSG_METHOD,2,0),"49:5: " + getCheckMessage(MSG_CLASS,2,1),"56:1: " + getCheckMessage(MSG_CLASS,10,1),"61:5: " + getCheckMessage(MSG_METHOD,8,0),"80:1: " + getCheckMessage(MSG_CLASS,4,1),"81:5: " + getCheckMessage(MSG_METHOD,1,0),"82:5: " + getCheckMessage(MSG_METHOD,1,0),"83:5: " + getCheckMessage(MSG_METHOD,1,0)};
    verify(checkConfig,getPath("InputJavaNCSS.java"),expected);
  }
  @Test public void testEqualToMax() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavaNCSSCheck.class);
    checkConfig.addAttribute("methodMaximum","12");
    checkConfig.addAttribute("classMaximum","22");
    checkConfig.addAttribute("fileMaximum","39");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputJavaNCSS.java"),expected);
  }
  @Test public void testDefaultConfiguration() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavaNCSSCheck.class);
    createChecker(checkConfig);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputJavaNCSS.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final JavaNCSSCheck javaNcssCheckObj=new JavaNCSSCheck();
    final int[] actual=javaNcssCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.METHOD_DEF,TokenTypes.CTOR_DEF,TokenTypes.INSTANCE_INIT,TokenTypes.STATIC_INIT,TokenTypes.PACKAGE_DEF,TokenTypes.IMPORT,TokenTypes.VARIABLE_DEF,TokenTypes.CTOR_CALL,TokenTypes.SUPER_CTOR_CALL,TokenTypes.LITERAL_IF,TokenTypes.LITERAL_ELSE,TokenTypes.LITERAL_WHILE,TokenTypes.LITERAL_DO,TokenTypes.LITERAL_FOR,TokenTypes.LITERAL_SWITCH,TokenTypes.LITERAL_BREAK,TokenTypes.LITERAL_CONTINUE,TokenTypes.LITERAL_RETURN,TokenTypes.LITERAL_THROW,TokenTypes.LITERAL_SYNCHRONIZED,TokenTypes.LITERAL_CATCH,TokenTypes.LITERAL_FINALLY,TokenTypes.EXPR,TokenTypes.LABELED_STAT,TokenTypes.LITERAL_CASE,TokenTypes.LITERAL_DEFAULT};
    Assert.assertNotNull("Acceptable tokens should not be null",actual);
    Assert.assertArrayEquals("Invalid acceptable tokens",expected,actual);
  }
  @Test public void testGetRequiredTokens(){
    final JavaNCSSCheck javaNcssCheckObj=new JavaNCSSCheck();
    final int[] actual=javaNcssCheckObj.getRequiredTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.METHOD_DEF,TokenTypes.CTOR_DEF,TokenTypes.INSTANCE_INIT,TokenTypes.STATIC_INIT,TokenTypes.PACKAGE_DEF,TokenTypes.IMPORT,TokenTypes.VARIABLE_DEF,TokenTypes.CTOR_CALL,TokenTypes.SUPER_CTOR_CALL,TokenTypes.LITERAL_IF,TokenTypes.LITERAL_ELSE,TokenTypes.LITERAL_WHILE,TokenTypes.LITERAL_DO,TokenTypes.LITERAL_FOR,TokenTypes.LITERAL_SWITCH,TokenTypes.LITERAL_BREAK,TokenTypes.LITERAL_CONTINUE,TokenTypes.LITERAL_RETURN,TokenTypes.LITERAL_THROW,TokenTypes.LITERAL_SYNCHRONIZED,TokenTypes.LITERAL_CATCH,TokenTypes.LITERAL_FINALLY,TokenTypes.EXPR,TokenTypes.LABELED_STAT,TokenTypes.LITERAL_CASE,TokenTypes.LITERAL_DEFAULT};
    Assert.assertNotNull("Required tokens should not be null",actual);
    Assert.assertArrayEquals("Invalid required tokens",expected,actual);
  }
}
