public class CodeSelectorPresentationTest extends AbstractPathTestSupport {
  private MainFrameModel model;
  private DetailAST tree;
  private ImmutableList<Integer> linesToPosition;
  @Before public void loadFile() throws Exception {
    model=new MainFrameModel();
    model.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
    model.openFile(new File(getPath("InputCodeSelectorPresentation.java")));
    tree=((DetailAST)model.getParseTreeTableModel().getRoot()).getFirstChild().getNextSibling();
    linesToPosition=ImmutableList.copyOf(convertLinesToPosition(model.getLinesToPosition()));
  }
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/gui/codeselectorpresentation";
  }
  /** 
 * Converts lineToPosition from multicharacter to one character line separator needs to support crossplatform line separators.
 * @param systemLinesToPosition lines to position mapping for current system
 * @return lines to position mapping with one character line separator
 */
  private static List<Integer> convertLinesToPosition(  List<Integer> systemLinesToPosition){
    final List<Integer> convertedLinesToPosition=new ArrayList<>();
    final int lineSeparationCorrection=System.lineSeparator().length() - 1;
    convertedLinesToPosition.add(0,systemLinesToPosition.get(0));
    for (int i=1; i < systemLinesToPosition.size(); i++) {
      convertedLinesToPosition.add(i,systemLinesToPosition.get(i) - lineSeparationCorrection * (i - 1));
    }
    return convertedLinesToPosition;
  }
  @Test public void testDetailASTSelection(){
    final CodeSelectorPresentation selector=new CodeSelectorPresentation(tree,linesToPosition);
    selector.findSelectionPositions();
    Assert.assertEquals("Invalid selection start",94,selector.getSelectionStart());
    Assert.assertEquals("Invalid selection end",280,selector.getSelectionEnd());
  }
  @Test public void testDetailASTLeafSelection(){
    final DetailAST leaf=tree.getLastChild().getFirstChild();
    final CodeSelectorPresentation selector=new CodeSelectorPresentation(leaf,linesToPosition);
    selector.findSelectionPositions();
    Assert.assertEquals("Invalid selection start",130,selector.getSelectionStart());
    Assert.assertEquals("Invalid selection end",131,selector.getSelectionEnd());
  }
  @Test public void testDetailASTNoSelection(){
    final DetailAST leaf=tree.getFirstChild();
    final CodeSelectorPresentation selector=new CodeSelectorPresentation(leaf,linesToPosition);
    selector.findSelectionPositions();
    Assert.assertEquals("Invalid selection start",94,selector.getSelectionStart());
    Assert.assertEquals("Invalid selection end",94,selector.getSelectionEnd());
  }
  @Test public void testDetailNodeSelection(){
    final DetailNode javadoc=(DetailNode)model.getParseTreeTableModel().getChild(tree.getFirstChild().getNextSibling().getFirstChild(),0);
    final CodeSelectorPresentation selector=new CodeSelectorPresentation(javadoc,linesToPosition);
    selector.findSelectionPositions();
    Assert.assertEquals("Invalid selection start",74,selector.getSelectionStart());
    Assert.assertEquals("Invalid selection end",96,selector.getSelectionEnd());
  }
  @Test public void testDetailNodeLeafSelection(){
    final DetailNode javadoc=(DetailNode)model.getParseTreeTableModel().getChild(tree.getFirstChild().getNextSibling().getFirstChild(),0);
    final DetailNode javadocLeaf=javadoc.getChildren()[2];
    final CodeSelectorPresentation selector=new CodeSelectorPresentation(javadocLeaf,linesToPosition);
    selector.findSelectionPositions();
    Assert.assertEquals("Invalid selection start",76,selector.getSelectionStart());
    Assert.assertEquals("Invalid selection end",90,selector.getSelectionEnd());
  }
}
