public class AllSinglelineCommentsTest extends AbstractModuleTestSupport {
  private static final Set<String> ALL_COMMENTS=new LinkedHashSet<>();
  private static final String LINE_SEPARATOR=System.getProperty("line.separator");
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/grammar/comments";
  }
  @Test public void testAllBlockComments() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(SinglelineCommentListenerCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputFullOfSinglelineComments.java"),expected);
    Assert.assertTrue("All comments should be empty",ALL_COMMENTS.isEmpty());
  }
private static class SinglelineCommentListenerCheck extends AbstractCheck {
    @Override public boolean isCommentNodesRequired(){
      return true;
    }
    @Override public int[] getDefaultTokens(){
      return getAcceptableTokens();
    }
    @Override public int[] getAcceptableTokens(){
      return new int[]{TokenTypes.SINGLE_LINE_COMMENT};
    }
    @Override public int[] getRequiredTokens(){
      return getAcceptableTokens();
    }
    @Override public void init(){
      final int lines=63;
      for (int i=0; i < lines; i++) {
        ALL_COMMENTS.add(i + LINE_SEPARATOR);
      }
      ALL_COMMENTS.add(String.valueOf(lines));
    }
    @Override public void visitToken(    DetailAST ast){
      final String commentContent=ast.getFirstChild().getText();
      if (!ALL_COMMENTS.remove(commentContent)) {
        Assert.fail("Unexpected comment: " + commentContent);
      }
    }
  }
}
