public class AnnotationLocationCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/annotation/annotationlocation";
  }
  @Test public void testGetRequiredTokens(){
    final AnnotationLocationCheck checkObj=new AnnotationLocationCheck();
    assertArrayEquals("AnnotationLocationCheck#getRequiredTokens should return empty array by default",CommonUtil.EMPTY_INT_ARRAY,checkObj.getRequiredTokens());
  }
  @Test public void testCorrect() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputAnnotationLocationCorrect.java"),expected);
  }
  @Test public void testIncorrect() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    final String[] expected={"6: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnn"),"11: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation1"),"17: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",8,4),"25: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",8,4),"29: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation1"),"29: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation2"),"32: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",7,4),"36: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",8,4),"37: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation3",6,4),"38: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation4",10,4),"41: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation1"),"48: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",12,8),"61: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",12,8),"65: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",12,8),"70: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",7,4),"73: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation1"),"85: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",11,8),"88: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",10,8),"98: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",0,3)};
    verify(checkConfig,getPath("InputAnnotationLocationIncorrect.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final AnnotationLocationCheck constantNameCheckObj=new AnnotationLocationCheck();
    final int[] actual=constantNameCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.ENUM_DEF,TokenTypes.METHOD_DEF,TokenTypes.CTOR_DEF,TokenTypes.VARIABLE_DEF,TokenTypes.PARAMETER_DEF,TokenTypes.ANNOTATION_DEF,TokenTypes.TYPECAST,TokenTypes.LITERAL_THROWS,TokenTypes.IMPLEMENTS_CLAUSE,TokenTypes.TYPE_ARGUMENT,TokenTypes.LITERAL_NEW,TokenTypes.DOT,TokenTypes.ANNOTATION_FIELD_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testWithoutAnnotations() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputAnnotationLocationEmpty.java"),expected);
  }
  @Test public void testWithParameters() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    checkConfig.addAttribute("allowSamelineSingleParameterlessAnnotation","true");
    checkConfig.addAttribute("allowSamelineParameterizedAnnotation","true");
    checkConfig.addAttribute("allowSamelineMultipleAnnotations","true");
    final String[] expected={"17: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",8,4),"25: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",8,4),"32: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",7,4),"36: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",8,4),"37: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation3",6,4),"38: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation4",10,4),"48: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation1",12,8),"61: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",12,8),"65: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",12,8),"70: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",7,4),"85: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",11,8),"88: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",10,8),"98: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION,"MyAnnotation2",0,3)};
    verify(checkConfig,getPath("InputAnnotationLocationIncorrect.java"),expected);
  }
  @Test public void testWithMultipleAnnotations() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    checkConfig.addAttribute("allowSamelineSingleParameterlessAnnotation","false");
    final String[] expected={"3: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation11"),"3: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation12"),"3: " + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE,"MyAnnotation13")};
    verify(checkConfig,getPath("InputAnnotationLocationCustomAnnotationsDeclared.java"),expected);
  }
  @Test public void testAllTokens() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    checkConfig.addAttribute("tokens","CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, " + "CTOR_DEF, VARIABLE_DEF, PARAMETER_DEF, ANNOTATION_DEF, TYPECAST, " + "LITERAL_THROWS, IMPLEMENTS_CLAUSE, TYPE_ARGUMENT, LITERAL_NEW, DOT, "+ "ANNOTATION_FIELD_DEF");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputAnnotationLocationWithoutAnnotations.java"),expected);
  }
  @Test public void testAnnotationInForEachLoopParameterAndVariableDef() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AnnotationLocationCheck.class);
    checkConfig.addAttribute("tokens","CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF," + " CTOR_DEF, VARIABLE_DEF, PARAMETER_DEF, ANNOTATION_DEF, TYPECAST, LITERAL_THROWS," + " IMPLEMENTS_CLAUSE, TYPE_ARGUMENT, LITERAL_NEW, DOT, ANNOTATION_FIELD_DEF,"+ " TYPE_ARGUMENT");
    checkConfig.addAttribute("allowSamelineMultipleAnnotations","false");
    checkConfig.addAttribute("allowSamelineSingleParameterlessAnnotation","false");
    checkConfig.addAttribute("allowSamelineParameterizedAnnotation","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputAnnotationLocationDeprecatedAndCustom.java"),expected);
  }
}
