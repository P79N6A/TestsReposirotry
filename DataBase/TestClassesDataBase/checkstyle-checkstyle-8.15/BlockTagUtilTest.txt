public class BlockTagUtilTest {
  @Test public void testHasPrivateConstructor() throws Exception {
    assertTrue("Constructor is not private",TestUtil.isUtilsClassHasPrivateConstructor(BlockTagUtil.class,true));
  }
  @Test public void testExtractBlockTags(){
    final String[] text={"/** @foo abc "," * @bar def  ","   @baz ghi  "," * @qux jkl"," */"};
    final List<TagInfo> tags=BlockTagUtil.extractBlockTags(text);
    assertEquals("Invalid tags size",4,tags.size());
    final TagInfo tag1=tags.get(0);
    assertTagEquals(tag1,"foo","abc",1,4);
    final TagInfo tag2=tags.get(1);
    assertTagEquals(tag2,"bar","def",2,3);
    final TagInfo tag3=tags.get(2);
    assertTagEquals(tag3,"baz","ghi",3,3);
    final TagInfo tag4=tags.get(3);
    assertTagEquals(tag4,"qux","jkl",4,3);
  }
  @Test public void testVersionStringFormat(){
    final String[] text={"/** "," * @version 1.0"," */"};
    final List<TagInfo> tags=BlockTagUtil.extractBlockTags(text);
    assertEquals("Invalid tags size",1,tags.size());
    assertEquals("Invalid tag name","version",tags.get(0).getName());
    assertEquals("Invalid tag value","1.0",tags.get(0).getValue());
  }
  @Test public void testOddVersionString(){
    final String[] text={"/**"," * Foo"," * @version 1.0 */"};
    final List<TagInfo> tags=BlockTagUtil.extractBlockTags(text);
    assertEquals("Invalid tags size",1,tags.size());
    assertEquals("Invalid tag name","version",tags.get(0).getName());
    assertEquals("Invalid tag value","1.0",tags.get(0).getValue());
  }
  private static void assertTagEquals(  TagInfo tag,  String name,  String value,  int line,  int column){
    assertEquals("Invalid tag name",name,tag.getName());
    assertEquals("Invalid tag value",value,tag.getValue());
    assertEquals("Invalid tag line",line,tag.getPosition().getLine());
    assertEquals("Invalid tag column",column,tag.getPosition().getColumn());
  }
}
