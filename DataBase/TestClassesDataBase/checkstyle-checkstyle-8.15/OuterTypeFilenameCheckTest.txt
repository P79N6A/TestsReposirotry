public class OuterTypeFilenameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/outertypefilename";
  }
  @Test public void testGetRequiredTokens(){
    final OuterTypeFilenameCheck checkObj=new OuterTypeFilenameCheck();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.ENUM_DEF,TokenTypes.ANNOTATION_DEF};
    assertArrayEquals("Required tokens array differs from expected",expected,checkObj.getRequiredTokens());
  }
  @Test public void testGood1() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilenameIllegalTokens.java"),expected);
  }
  @Test public void testGood2() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilename15Extensions.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final OuterTypeFilenameCheck check=new OuterTypeFilenameCheck();
    final int[] actual=check.getAcceptableTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.ENUM_DEF,TokenTypes.ANNOTATION_DEF};
    assertArrayEquals("Acceptable tokens array differs from expected",expected,actual);
  }
  @Test public void testNestedClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilename1.java"),expected);
  }
  @Test public void testFinePublic() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilename2.java"),expected);
  }
  @Test public void testPublicClassIsNotFirst() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilenameCheckPublic.java"),expected);
  }
  @Test public void testFineDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputOuterTypeFilename3.java"),expected);
  }
  @Test public void testWrongDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected={"4: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputOuterTypeFilename5.java"),expected);
  }
  @Test public void testPackageAnnotation() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(OuterTypeFilenameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getNonCompilablePath("package-info.java"),expected);
  }
}
