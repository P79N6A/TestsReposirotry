public class EmptyForIteratorPadCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/whitespace/emptyforiteratorpad";
  }
  @Test public void testGetRequiredTokens(){
    final EmptyForIteratorPadCheck checkObj=new EmptyForIteratorPadCheck();
    final int[] expected={TokenTypes.FOR_ITERATOR};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForIteratorPadCheck.class);
    final String[] expected={"27:31: " + getCheckMessage(MSG_WS_FOLLOWED,";"),"43:32: " + getCheckMessage(MSG_WS_FOLLOWED,";"),"55:11: " + getCheckMessage(MSG_WS_FOLLOWED,";")};
    verify(checkConfig,getPath("InputEmptyForIteratorPad.java"),expected);
  }
  @Test public void testSpaceOption() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForIteratorPadCheck.class);
    checkConfig.addAttribute("option",PadOption.SPACE.toString());
    final String[] expected={"23:31: " + getCheckMessage(MSG_WS_NOT_FOLLOWED,";")};
    verify(checkConfig,getPath("InputEmptyForIteratorPad.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final EmptyForIteratorPadCheck emptyForIteratorPadCheckObj=new EmptyForIteratorPadCheck();
    final int[] actual=emptyForIteratorPadCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.FOR_ITERATOR};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testInvalidOption() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(EmptyForIteratorPadCheck.class);
    checkConfig.addAttribute("option","invalid_option");
    try {
      final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
      verify(checkConfig,getPath("InputEmptyForIteratorPad.java"),expected);
      fail("exception expected");
    }
 catch (    CheckstyleException ex) {
      final String messageStart="cannot initialize module " + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to " + "'invalid_option' in module";
      assertTrue("Invalid exception message, should start with: ",ex.getMessage().startsWith(messageStart));
    }
  }
}
