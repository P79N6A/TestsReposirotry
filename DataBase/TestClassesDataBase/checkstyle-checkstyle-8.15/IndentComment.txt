private static final class IndentComment {
  /** 
 * Used to locate the index of argument zero of error messages. 
 */
  private static final String FAKE_ARGUMENT_ZERO="##0##";
  private final int lineNumber;
  private final int indent;
  /** 
 * Used for when violations report nodes not first on the line. 
 */
  private final int indentOffset;
  private final boolean expectedNonStrict;
  private final String expectedWarning;
  private final boolean warning;
  IndentComment(  Matcher match,  int lineNumber){
    this.lineNumber=lineNumber;
    indent=Integer.parseInt(match.group(1));
    if (match.group(2) == null) {
      indentOffset=0;
    }
 else {
      indentOffset=Integer.parseInt(match.group(2));
    }
    expectedNonStrict=match.group(3) != null;
    expectedWarning=match.group(4).replace(",",", ");
    warning=match.group(5) != null;
  }
  public String[] getExpectedMessages(){
    final String[] expectedMessages;
    if (expectedWarning.contains(",")) {
      expectedMessages=new String[]{getExpectedMessagePostfix(MSG_ERROR_MULTI),getExpectedMessagePostfix(MSG_CHILD_ERROR_MULTI)};
    }
 else {
      expectedMessages=new String[]{getExpectedMessagePostfix(MSG_ERROR),getExpectedMessagePostfix(MSG_CHILD_ERROR)};
    }
    return expectedMessages;
  }
  private String getExpectedMessagePostfix(  final String messageKey){
    final String msg=getCheckMessage(IndentationCheck.class,messageKey,FAKE_ARGUMENT_ZERO,indent + indentOffset,expectedWarning);
    final int indexOfMsgPostfix=msg.indexOf(FAKE_ARGUMENT_ZERO) + FAKE_ARGUMENT_ZERO.length();
    return msg.substring(indexOfMsgPostfix);
  }
  public int getLineNumber(){
    return lineNumber;
  }
  public int getIndent(){
    return indent;
  }
  public int getIndentOffset(){
    return indentOffset;
  }
  public boolean isExpectedNonStrict(){
    return expectedNonStrict;
  }
  public String getExpectedWarning(){
    return expectedWarning;
  }
  public boolean isWarning(){
    return warning;
  }
}
