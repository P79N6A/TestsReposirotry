public class MethodCountCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/sizes/methodcount";
  }
  @Test public void testGetRequiredTokens(){
    final MethodCountCheck checkObj=new MethodCountCheck();
    final int[] expected={TokenTypes.METHOD_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testGetAcceptableTokens(){
    final MethodCountCheck methodCountCheckObj=new MethodCountCheck();
    final int[] actual=methodCountCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.ENUM_CONSTANT_DEF,TokenTypes.ENUM_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.ANNOTATION_DEF,TokenTypes.METHOD_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testDefaults() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputMethodCount.java"),expected);
  }
  @Test public void testThrees() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxPrivate","3");
    checkConfig.addAttribute("maxPackage","3");
    checkConfig.addAttribute("maxProtected","3");
    checkConfig.addAttribute("maxPublic","3");
    checkConfig.addAttribute("maxTotal","3");
    final String[] expected={"3: " + getCheckMessage(MSG_PACKAGE_METHODS,5,3),"3: " + getCheckMessage(MSG_PRIVATE_METHODS,5,3),"3: " + getCheckMessage(MSG_PROTECTED_METHODS,5,3),"3: " + getCheckMessage(MSG_PUBLIC_METHODS,5,3),"3: " + getCheckMessage(MSG_MANY_METHODS,20,3),"9: " + getCheckMessage(MSG_PUBLIC_METHODS,5,3),"9: " + getCheckMessage(MSG_MANY_METHODS,5,3),"45: " + getCheckMessage(MSG_PUBLIC_METHODS,5,3),"45: " + getCheckMessage(MSG_MANY_METHODS,5,3)};
    verify(checkConfig,getPath("InputMethodCount.java"),expected);
  }
  @Test public void testEnum() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxPrivate","0");
    checkConfig.addAttribute("maxTotal","2");
    final String[] expected={"9: " + getCheckMessage(MSG_PRIVATE_METHODS,1,0),"9: " + getCheckMessage(MSG_MANY_METHODS,3,2)};
    verify(checkConfig,getPath("InputMethodCount2.java"),expected);
  }
  @Test public void testWithPackageModifier() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxPrivate","0");
    checkConfig.addAttribute("maxTotal","2");
    final String[] expected={"3: " + getCheckMessage(MSG_MANY_METHODS,5,2)};
    verify(checkConfig,getPath("InputMethodCount3.java"),expected);
  }
  @Test public void testOnInterfaceDefinitionWithField() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputMethodCount4.java"),expected);
  }
  @Test public void testWithInterfaceDefinitionInClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxTotal","1");
    final String[] expected={"3: " + getCheckMessage(MSG_MANY_METHODS,2,1)};
    verify(checkConfig,getPath("InputMethodCount5.java"),expected);
  }
  @Test public void testPartialTokens() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxTotal","1");
    checkConfig.addAttribute("tokens","ENUM_DEF");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputMethodCount6.java"),expected);
  }
  @Test public void testCountMethodToCorrectDefinition() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodCountCheck.class);
    checkConfig.addAttribute("maxTotal","1");
    checkConfig.addAttribute("tokens","ENUM_DEF");
    final String[] expected={"10: " + getCheckMessage(MSG_MANY_METHODS,2,1)};
    verify(checkConfig,getPath("InputMethodCount7.java"),expected);
  }
}
