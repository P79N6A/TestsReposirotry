public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/filefilters/beforeexecutionexclusionfilefilter";
  }
  @Test public void testAccept(){
    final String fileName="BAD";
    final BeforeExecutionExclusionFileFilter filter=createExclusionBeforeExecutionFileFilter(fileName);
    assertTrue("Should accept if file does not exist",filter.accept("ATest.java"));
  }
  @Test public void testAcceptOnNullFile(){
    final String fileName=null;
    final BeforeExecutionExclusionFileFilter filter=createExclusionBeforeExecutionFileFilter(fileName);
    assertTrue("Should accept if file is null",filter.accept("AnyJava.java"));
  }
  @Test public void testReject(){
    final String fileName="Test";
    final BeforeExecutionExclusionFileFilter filter=createExclusionBeforeExecutionFileFilter(fileName);
    assertFalse("Should reject file, but did not",filter.accept("ATest.java"));
  }
  @Test public void testRejectBadFile() throws Exception {
    final DefaultConfiguration filterConfig=createModuleConfig(BeforeExecutionExclusionFileFilter.class);
    filterConfig.addAttribute("fileNamePattern","IncorrectClass\\.java");
    final String[] violations=CommonUtil.EMPTY_STRING_ARRAY;
    verify(createChecker(filterConfig),getNonCompilablePath("InputBeforeExecutionExclusionFileFilterIncorrectClass.java"),violations);
  }
  private static BeforeExecutionExclusionFileFilter createExclusionBeforeExecutionFileFilter(  String fileName){
    final BeforeExecutionExclusionFileFilter exclusionBeforeExecutionFileFilter=new BeforeExecutionExclusionFileFilter();
    if (fileName != null) {
      exclusionBeforeExecutionFileFilter.setFileNamePattern(Pattern.compile(fileName));
    }
    return exclusionBeforeExecutionFileFilter;
  }
}
