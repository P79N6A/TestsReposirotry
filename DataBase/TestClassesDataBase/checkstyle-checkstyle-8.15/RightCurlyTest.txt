public class RightCurlyTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks";
  }
  @Test public void testRightCurlyAlone() throws Exception {
    final String[] expected={"20:17: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_SAME,"}",17),"32:13: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_SAME,"}",13),"79:27: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_BREAK_BEFORE,"}",27)};
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlySame");
    final String filePath=getPath("InputRightCurlyOther.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testRightCurlySame() throws Exception {
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlySame");
    final String filePath=getPath("InputRightCurlySame.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testRightCurlySameAndLiteralDoDefault() throws Exception {
    final String[] expected={"62:9: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_SAME,"}",9),"67:13: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_SAME,"}",13),"83:9: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_SAME,"}",9)};
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlySame");
    final String filePath=getPath("InputRightCurlyDoWhile.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testRightCurlyAloneOther() throws Exception {
    final String[] expected={"97:5: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_ALONE,"}",5),"97:6: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_NEW,"}",6),"108:5: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_ALONE,"}",5),"108:6: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_NEW,"}",6),"122:6: " + getCheckMessage(RightCurlyCheck.class,MSG_KEY_LINE_NEW,"}",6)};
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlyAlone");
    final String filePath=getPath("InputRightCurlyOtherAlone.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testRightCurlyAloneSame() throws Exception {
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlyAlone");
    final String filePath=getPath("InputRightCurlySame.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
  @Test public void testRightCurlyAloneSameAndLiteralDo() throws Exception {
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    final Configuration checkConfig=getModuleConfig("RightCurly","RightCurlyAlone");
    final String filePath=getPath("InputRightCurlyDoWhileAlone.java");
    final Integer[] warnList=getLinesWithWarn(filePath);
    verify(checkConfig,filePath,expected,warnList);
  }
}
