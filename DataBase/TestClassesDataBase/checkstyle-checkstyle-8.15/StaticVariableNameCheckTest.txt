public class StaticVariableNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/staticvariablename";
  }
  @Test public void testGetRequiredTokens(){
    final StaticVariableNameCheck checkObj=new StaticVariableNameCheck();
    final int[] expected={TokenTypes.VARIABLE_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testSpecified() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(StaticVariableNameCheck.class);
    checkConfig.addAttribute("format","^s[A-Z][a-zA-Z0-9]*$");
    final String pattern="^s[A-Z][a-zA-Z0-9]*$";
    final String[] expected={"30:24: " + getCheckMessage(MSG_INVALID_PATTERN,"badStatic",pattern)};
    verify(checkConfig,getPath("InputStaticVariableName1.java"),expected);
  }
  @Test public void testAccessTuning() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(StaticVariableNameCheck.class);
    checkConfig.addAttribute("format","^s[A-Z][a-zA-Z0-9]*$");
    checkConfig.addAttribute("applyToPrivate","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputStaticVariableName1.java"),expected);
  }
  @Test public void testInterfaceOrAnnotationBlock() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(StaticVariableNameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputStaticVariableName.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final StaticVariableNameCheck staticVariableNameCheckObj=new StaticVariableNameCheck();
    final int[] actual=staticVariableNameCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.VARIABLE_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
}
