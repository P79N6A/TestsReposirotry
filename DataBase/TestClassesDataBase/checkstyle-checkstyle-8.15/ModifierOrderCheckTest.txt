public class ModifierOrderCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/modifier/modifierorder";
  }
  @Test public void testGetRequiredTokens(){
    final ModifierOrderCheck checkObj=new ModifierOrderCheck();
    final int[] expected={TokenTypes.MODIFIERS};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testIt() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ModifierOrderCheck.class);
    final String[] expected={"14:10: " + getCheckMessage(MSG_MODIFIER_ORDER,"final"),"18:12: " + getCheckMessage(MSG_MODIFIER_ORDER,"private"),"24:14: " + getCheckMessage(MSG_MODIFIER_ORDER,"private"),"34:13: " + getCheckMessage(MSG_ANNOTATION_ORDER,"@MyAnnotation2"),"39:13: " + getCheckMessage(MSG_ANNOTATION_ORDER,"@MyAnnotation2"),"49:35: " + getCheckMessage(MSG_ANNOTATION_ORDER,"@MyAnnotation4"),"157:14: " + getCheckMessage(MSG_MODIFIER_ORDER,"default")};
    verify(checkConfig,getPath("InputModifierOrderIt.java"),expected);
  }
  @Test public void testDefaultMethods() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ModifierOrderCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputModifierOrderDefaultMethods.java"),expected);
  }
  @Test public void testGetDefaultTokens(){
    final ModifierOrderCheck modifierOrderCheckObj=new ModifierOrderCheck();
    final int[] actual=modifierOrderCheckObj.getDefaultTokens();
    final int[] expected={TokenTypes.MODIFIERS};
    final int[] unexpectedArray={TokenTypes.MODIFIERS,TokenTypes.OBJBLOCK};
    assertArrayEquals("Default tokens are invalid",expected,actual);
    final int[] unexpectedEmptyArray=CommonUtil.EMPTY_INT_ARRAY;
    Assert.assertNotSame("Default tokens should not be empty array",unexpectedEmptyArray,actual);
    Assert.assertNotSame("Invalid default tokens",unexpectedArray,actual);
    Assert.assertNotNull("Default tokens should not be null",actual);
  }
  @Test public void testGetAcceptableTokens(){
    final ModifierOrderCheck modifierOrderCheckObj=new ModifierOrderCheck();
    final int[] actual=modifierOrderCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.MODIFIERS};
    final int[] unexpectedArray={TokenTypes.MODIFIERS,TokenTypes.OBJBLOCK};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
    final int[] unexpectedEmptyArray=CommonUtil.EMPTY_INT_ARRAY;
    Assert.assertNotSame("Default tokens should not be empty array",unexpectedEmptyArray,actual);
    Assert.assertNotSame("Invalid acceptable tokens",unexpectedArray,actual);
    Assert.assertNotNull("Acceptable tokens should not be null",actual);
  }
  @Test public void testSkipTypeAnnotations() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ModifierOrderCheck.class);
    final String[] expected={"104:13: " + getCheckMessage(MSG_ANNOTATION_ORDER,"@MethodAnnotation")};
    verify(checkConfig,getPath("InputModifierOrderTypeAnnotations.java"),expected);
  }
  @Test public void testAnnotationOnAnnotationDeclaration() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ModifierOrderCheck.class);
    final String[] expected={"3:8: " + getCheckMessage(MSG_ANNOTATION_ORDER,"@InterfaceAnnotation")};
    verify(checkConfig,getPath("InputModifierOrderAnnotationDeclaration.java"),expected);
  }
}
