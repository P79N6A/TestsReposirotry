public class RedundantImportCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/imports/redundantimport";
  }
  @Test public void testGetRequiredTokens(){
    final RedundantImportCheck checkObj=new RedundantImportCheck();
    final int[] expected={TokenTypes.IMPORT,TokenTypes.STATIC_IMPORT,TokenTypes.PACKAGE_DEF};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testStateIsClearedOnBeginTree1() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RedundantImportCheck.class);
    final String inputWithWarnings=getPath("InputRedundantImportCheckClearState.java");
    final String inputWithoutWarnings=getPath("InputRedundantImportWithoutWarnings.java");
    final List<String> expectedFirstInput=Arrays.asList("4:1: " + getCheckMessage(MSG_DUPLICATE,3,"java.util.Arrays.asList"),"7:1: " + getCheckMessage(MSG_DUPLICATE,6,"java.util.List"));
    final List<String> expectedSecondInput=Arrays.asList(CommonUtil.EMPTY_STRING_ARRAY);
    final File[] inputs={new File(inputWithWarnings),new File(inputWithoutWarnings)};
    verify(createChecker(checkConfig),inputs,ImmutableMap.of(inputWithWarnings,expectedFirstInput,inputWithoutWarnings,expectedSecondInput));
  }
  @Test public void testWithChecker() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RedundantImportCheck.class);
    final String[] expected={"7:1: " + getCheckMessage(MSG_SAME,"com.puppycrawl.tools.checkstyle.checks.imports.redundantimport.*"),"8:1: " + getCheckMessage(MSG_SAME,"com.puppycrawl.tools.checkstyle.checks.imports.redundantimport." + "InputRedundantImportBug"),"10:1: " + getCheckMessage(MSG_LANG,"java.lang.*"),"11:1: " + getCheckMessage(MSG_LANG,"java.lang.String"),"14:1: " + getCheckMessage(MSG_DUPLICATE,13,"java.util.List"),"26:1: " + getCheckMessage(MSG_DUPLICATE,25,"javax.swing.WindowConstants.*")};
    verify(checkConfig,getPath("InputRedundantImportWithChecker.java"),expected);
  }
  @Test public void testUnnamedPackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RedundantImportCheck.class);
    final String[] expected={"4:1: " + getCheckMessage(MSG_DUPLICATE,3,"java.util.List"),"6:1: " + getCheckMessage(MSG_LANG,"java.lang.String")};
    verify(checkConfig,getNonCompilablePath("InputRedundantImport_UnnamedPackage.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final RedundantImportCheck testCheckObject=new RedundantImportCheck();
    final int[] actual=testCheckObject.getAcceptableTokens();
    final int[] expected={TokenTypes.IMPORT,TokenTypes.STATIC_IMPORT,TokenTypes.PACKAGE_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
}
