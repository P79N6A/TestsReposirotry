public class JavadocParagraphCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph";
  }
  @Test public void testGetRequiredTokens(){
    final JavadocParagraphCheck checkObj=new JavadocParagraphCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testCorrect() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavadocParagraphCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputJavadocParagraphCorrect.java"),expected);
  }
  @Test public void testIncorrect() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavadocParagraphCheck.class);
    final String[] expected={"7: " + getCheckMessage(MSG_MISPLACED_TAG),"7: " + getCheckMessage(MSG_LINE_BEFORE),"8: " + getCheckMessage(MSG_MISPLACED_TAG),"8: " + getCheckMessage(MSG_LINE_BEFORE),"14: " + getCheckMessage(MSG_MISPLACED_TAG),"14: " + getCheckMessage(MSG_LINE_BEFORE),"16: " + getCheckMessage(MSG_MISPLACED_TAG),"23: " + getCheckMessage(MSG_LINE_BEFORE),"25: " + getCheckMessage(MSG_MISPLACED_TAG),"32: " + getCheckMessage(MSG_MISPLACED_TAG),"32: " + getCheckMessage(MSG_LINE_BEFORE),"32: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"33: " + getCheckMessage(MSG_MISPLACED_TAG),"33: " + getCheckMessage(MSG_LINE_BEFORE),"34: " + getCheckMessage(MSG_MISPLACED_TAG),"34: " + getCheckMessage(MSG_LINE_BEFORE),"35: " + getCheckMessage(MSG_MISPLACED_TAG),"35: " + getCheckMessage(MSG_LINE_BEFORE),"39: " + getCheckMessage(MSG_MISPLACED_TAG),"39: " + getCheckMessage(MSG_LINE_BEFORE),"45: " + getCheckMessage(MSG_MISPLACED_TAG),"45: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"48: " + getCheckMessage(MSG_MISPLACED_TAG),"50: " + getCheckMessage(MSG_MISPLACED_TAG),"50: " + getCheckMessage(MSG_LINE_BEFORE),"51: " + getCheckMessage(MSG_MISPLACED_TAG),"51: " + getCheckMessage(MSG_LINE_BEFORE),"61: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"62: " + getCheckMessage(MSG_TAG_AFTER),"70: " + getCheckMessage(MSG_MISPLACED_TAG),"70: " + getCheckMessage(MSG_LINE_BEFORE),"72: " + getCheckMessage(MSG_MISPLACED_TAG),"75: " + getCheckMessage(MSG_MISPLACED_TAG),"75: " + getCheckMessage(MSG_LINE_BEFORE),"81: " + getCheckMessage(MSG_TAG_AFTER),"82: " + getCheckMessage(MSG_TAG_AFTER)};
    verify(checkConfig,getPath("InputJavadocParagraphIncorrect.java"),expected);
  }
  @Test public void testAllowNewlineParagraph() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(JavadocParagraphCheck.class);
    checkConfig.addAttribute("allowNewlineParagraph","false");
    final String[] expected={"7: " + getCheckMessage(MSG_LINE_BEFORE),"8: " + getCheckMessage(MSG_LINE_BEFORE),"14: " + getCheckMessage(MSG_LINE_BEFORE),"23: " + getCheckMessage(MSG_LINE_BEFORE),"32: " + getCheckMessage(MSG_LINE_BEFORE),"32: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"33: " + getCheckMessage(MSG_LINE_BEFORE),"34: " + getCheckMessage(MSG_LINE_BEFORE),"35: " + getCheckMessage(MSG_LINE_BEFORE),"39: " + getCheckMessage(MSG_LINE_BEFORE),"45: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"50: " + getCheckMessage(MSG_LINE_BEFORE),"51: " + getCheckMessage(MSG_LINE_BEFORE),"61: " + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),"62: " + getCheckMessage(MSG_TAG_AFTER),"70: " + getCheckMessage(MSG_LINE_BEFORE),"75: " + getCheckMessage(MSG_LINE_BEFORE),"81: " + getCheckMessage(MSG_TAG_AFTER),"82: " + getCheckMessage(MSG_TAG_AFTER)};
    verify(checkConfig,getPath("InputJavadocParagraphIncorrect.java"),expected);
  }
}
