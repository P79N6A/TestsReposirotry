public class IllegalThrowsCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/illegalthrows";
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    final String[] expected={"9:51: " + getCheckMessage(MSG_KEY,"RuntimeException"),"14:45: " + getCheckMessage(MSG_KEY,"java.lang.RuntimeException"),"14:73: " + getCheckMessage(MSG_KEY,"java.lang.Error")};
    verify(checkConfig,getPath("InputIllegalThrows.java"),expected);
  }
  @Test public void testIllegalClassNames() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    checkConfig.addAttribute("illegalClassNames","java.lang.Error, java.lang.Exception, NullPointerException");
    checkConfig.addAttribute("illegalClassNames","java.lang.IOException.");
    final String[] expected={"5:33: " + getCheckMessage(MSG_KEY,"NullPointerException"),"14:73: " + getCheckMessage(MSG_KEY,"java.lang.Error")};
    verify(checkConfig,getPath("InputIllegalThrows.java"),expected);
  }
  /** 
 * Test to validate the IllegalThrowsCheck with ignoredMethodNames attribute.
 */
  @Test public void testIgnoreMethodNames() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    checkConfig.addAttribute("ignoredMethodNames","methodTwo");
    final String[] expected={"9:51: " + getCheckMessage(MSG_KEY,"RuntimeException"),"18:35: " + getCheckMessage(MSG_KEY,"Throwable")};
    verify(checkConfig,getPath("InputIllegalThrows.java"),expected);
  }
  /** 
 * Test to validate the IllegalThrowsCheck with both the attributes specified.
 */
  @Test public void testIllegalClassNamesWithIgnoreMethodNames() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    checkConfig.addAttribute("illegalClassNames","java.lang.Error, java.lang.Exception, NullPointerException, Throwable");
    checkConfig.addAttribute("ignoredMethodNames","methodTwo");
    final String[] expected={"5:33: " + getCheckMessage(MSG_KEY,"NullPointerException"),"18:35: " + getCheckMessage(MSG_KEY,"Throwable")};
    verify(checkConfig,getPath("InputIllegalThrows.java"),expected);
  }
  /** 
 * Test to validate the IllegalThrowsCheck with <b>ignoreOverriddenMethods</b> property.
 */
  @Test public void testIgnoreOverriddenMethods() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    checkConfig.addAttribute("ignoreOverriddenMethods","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputIllegalThrowsIgnoreOverriddenMethods.java"),expected);
  }
  /** 
 * Test to validate the IllegalThrowsCheck without <b>ignoreOverriddenMethods</b> property.
 */
  @Test public void testNotIgnoreOverriddenMethods() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(IllegalThrowsCheck.class);
    checkConfig.addAttribute("ignoreOverriddenMethods","false");
    final String[] expected={"7:36: " + getCheckMessage(MSG_KEY,"RuntimeException"),"12:51: " + getCheckMessage(MSG_KEY,"RuntimeException")};
    verify(checkConfig,getPath("InputIllegalThrowsIgnoreOverriddenMethods.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final IllegalThrowsCheck check=new IllegalThrowsCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
}
