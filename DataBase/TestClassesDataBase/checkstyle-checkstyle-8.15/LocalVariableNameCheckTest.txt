public class LocalVariableNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/localvariablename";
  }
  @Test public void testGetAcceptableTokens(){
    final LocalVariableNameCheck localVariableNameCheck=new LocalVariableNameCheck();
    final int[] expected={TokenTypes.VARIABLE_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,localVariableNameCheck.getAcceptableTokens());
  }
  @Test public void testDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LocalVariableNameCheck.class);
    final String pattern="^[a-z][a-zA-Z0-9]*$";
    final String[] expected={"119:13: " + getCheckMessage(MSG_INVALID_PATTERN,"ABC",pattern),"130:18: " + getCheckMessage(MSG_INVALID_PATTERN,"I",pattern),"132:20: " + getCheckMessage(MSG_INVALID_PATTERN,"InnerBlockVariable",pattern),"207:21: " + getCheckMessage(MSG_INVALID_PATTERN,"O",pattern)};
    verify(checkConfig,getPath("InputLocalVariableName.java"),expected);
  }
  @Test public void testInnerClass() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LocalVariableNameCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputLocalVariableNameInnerClass.java"),expected);
  }
  @Test public void testLoopVariables() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LocalVariableNameCheck.class);
    checkConfig.addAttribute("format","^[a-z]{2,}[a-zA-Z0-9]*$");
    checkConfig.addAttribute("allowOneCharVarInForLoop","true");
    final String pattern="^[a-z]{2,}[a-zA-Z0-9]*$";
    final String[] expected={"19:21: " + getCheckMessage(MSG_INVALID_PATTERN,"i",pattern),"25:17: " + getCheckMessage(MSG_INVALID_PATTERN,"Index",pattern)};
    verify(checkConfig,getPath("InputLocalVariableNameOneCharInitVarName.java"),expected);
  }
}
