public class InlineTagUtilTest {
  @Test public void testHasPrivateConstructor() throws Exception {
    assertTrue("Constructor is not private",TestUtil.isUtilsClassHasPrivateConstructor(InlineTagUtil.class,true));
  }
  @Test public void testExtractInlineTags(){
    final String[] text={"/** @see elsewhere "," * {@link List }, {@link List link text }","   {@link List#add(Object) link text}"," * {@link Class link text}"," */"};
    final List<TagInfo> tags=InlineTagUtil.extractInlineTags(text);
    assertEquals("Unexpected tags size",4,tags.size());
    assertTag(tags.get(0),"link","List",2,4);
    assertTag(tags.get(1),"link","List link text",2,19);
    assertTag(tags.get(2),"link","List#add(Object) link text",3,4);
    assertTag(tags.get(3),"link","Class link text",4,4);
  }
  @Test public void testMultiLineLinkTag(){
    final String[] text={"/**"," * {@link foo"," *        bar baz}"," */"};
    final List<TagInfo> tags=InlineTagUtil.extractInlineTags(text);
    assertEquals("Unexpected tags size",1,tags.size());
    assertTag(tags.get(0),"link","foo bar baz",2,4);
  }
  @Test public void testCollapseWhitespace(){
    final String[] text={"/**"," * {@code     foo\t\t   bar   baz\t    }"," */"};
    final List<TagInfo> tags=InlineTagUtil.extractInlineTags(text);
    assertEquals("Unexpected tags size",1,tags.size());
    assertTag(tags.get(0),"code","foo bar baz",2,4);
  }
  @Test public void extractInlineTags(){
    final String[] source={"  {@link foo}"};
    final List<TagInfo> tags=InlineTagUtil.extractInlineTags(source);
    assertEquals("Unexpected tags size",1,tags.size());
    final TagInfo tag=tags.get(0);
    assertTag(tag,"link","foo",1,3);
  }
  @Test public void testBadInputExtractInlineTagsLineFeed(){
    try {
      InlineTagUtil.extractInlineTags("abc\ndef");
      fail("IllegalArgumentException expected");
    }
 catch (    IllegalArgumentException ex) {
      assertTrue("Unexpected error message",ex.getMessage().contains("newline"));
    }
  }
  @Test public void testBadInputExtractInlineTagsCarriageReturn(){
    try {
      InlineTagUtil.extractInlineTags("abc\rdef");
      fail("IllegalArgumentException expected");
    }
 catch (    IllegalArgumentException ex) {
      assertTrue("Invalid error message",ex.getMessage().contains("newline"));
    }
  }
  private static void assertTag(  TagInfo tag,  String name,  String value,  int line,  int col){
    assertEquals("Unexpected tags name",name,tag.getName());
    assertEquals("Unexpected tags value",value,tag.getValue());
    assertEquals("Unexpected tags position",line,tag.getPosition().getLine());
    assertEquals("Unexpected tags position",col,tag.getPosition().getColumn());
  }
}
