public class AttributeNodeTest {
  private static AttributeNode attributeNode;
  @Before public void init(){
    attributeNode=new AttributeNode("name","value");
  }
  @Test public void testGetAttributeValue(){
    try {
      attributeNode.getAttributeValue("","");
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetParent(){
    try {
      attributeNode.getParent();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetRoot(){
    try {
      attributeNode.getRoot();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetStringValue(){
    assertEquals("Invalid string value","value",attributeNode.getStringValue());
  }
  @Test public void testIterate(){
    try (AxisIterator ignored=attributeNode.iterateAxis(AxisInfo.SELF)){
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetLineNumber(){
    try {
      attributeNode.getLineNumber();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetColumnNumber(){
    try {
      attributeNode.getColumnNumber();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetTokenType(){
    try {
      attributeNode.getTokenType();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
  @Test public void testGetUnderlyingNode(){
    try {
      attributeNode.getUnderlyingNode();
      fail("Exception is excepted");
    }
 catch (    UnsupportedOperationException ex) {
      assertEquals("Invalid exception message","Operation is not supported",ex.getMessage());
    }
  }
}
