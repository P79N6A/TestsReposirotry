public class UncommentedMainCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/uncommentedmain";
  }
  @Test public void testDefaults() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    final String[] expected={"14: " + getCheckMessage(MSG_KEY),"23: " + getCheckMessage(MSG_KEY),"32: " + getCheckMessage(MSG_KEY),"96: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputUncommentedMain.java"),expected);
  }
  @Test public void testExcludedClasses() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    checkConfig.addAttribute("excludedClasses","\\.Main.*$");
    final String[] expected={"14: " + getCheckMessage(MSG_KEY),"32: " + getCheckMessage(MSG_KEY),"96: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputUncommentedMain.java"),expected);
  }
  @Test public void testTokens(){
    final UncommentedMainCheck check=new UncommentedMainCheck();
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertArrayEquals("Invalid default tokens",check.getDefaultTokens(),check.getAcceptableTokens());
    Assert.assertArrayEquals("Invalid acceptable tokens",check.getDefaultTokens(),check.getRequiredTokens());
  }
  @Test public void testDeepDepth() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputUncommentedMain2.java"),expected);
  }
  @Test public void testVisitPackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    checkConfig.addAttribute("excludedClasses","uncommentedmain\\.InputUncommentedMain5");
    final String[] expected={"14: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputUncommentedMain5.java"),expected);
  }
  @Test public void testWrongName() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputUncommentedMain3.java"),expected);
  }
  @Test public void testWrongArrayType() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(UncommentedMainCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputUncommentedMain4.java"),expected);
  }
  @Test public void testIllegalStateException(){
    final UncommentedMainCheck check=new UncommentedMainCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.CTOR_DEF,"ctor"));
    try {
      check.visitToken(ast);
      Assert.fail("IllegalStateException is expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Error message is unexpected",ast.toString(),ex.getMessage());
    }
  }
}
