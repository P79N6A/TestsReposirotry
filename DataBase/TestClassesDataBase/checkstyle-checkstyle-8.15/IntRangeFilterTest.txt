public class IntRangeFilterTest {
  @Test public void testDecide(){
    final IntFilter filter=new IntRangeFilter(0,10);
    assertFalse("less than",filter.accept(-1));
    assertTrue("in range",filter.accept(0));
    assertTrue("in range",filter.accept(5));
    assertTrue("in range",filter.accept(10));
    assertFalse("greater than",filter.accept(11));
  }
  @Test public void testDecideSingle(){
    final IntFilter filter=new IntRangeFilter(0,0);
    assertFalse("less than",filter.accept(-1));
    assertTrue("in range",filter.accept(0));
    assertFalse("greater than",filter.accept(1));
  }
  @Test public void testDecideEmpty(){
    final IntFilter filter=new IntRangeFilter(10,0);
    assertFalse("out",filter.accept(-1));
    assertFalse("out",filter.accept(0));
    assertFalse("out",filter.accept(5));
    assertFalse("out",filter.accept(10));
    assertFalse("out",filter.accept(11));
  }
  @Test public void testEqualsAndHashCode(){
    final EqualsVerifierReport ev=EqualsVerifier.forClass(IntRangeFilter.class).usingGetClass().report();
    assertEquals("Error: " + ev.getMessage(),EqualsVerifierReport.SUCCESS,ev);
  }
}
