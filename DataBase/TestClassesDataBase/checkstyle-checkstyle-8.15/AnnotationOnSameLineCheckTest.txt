public class AnnotationOnSameLineCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/annotation/annotationonsameline";
  }
  @Test public void testGetRequiredTokens(){
    final AnnotationOnSameLineCheck check=new AnnotationOnSameLineCheck();
    assertArrayEquals("AnnotationOnSameLineCheck#getRequiredTokens should return empty array by default",CommonUtil.EMPTY_INT_ARRAY,check.getRequiredTokens());
  }
  @Test public void testGetAcceptableTokens(){
    final AnnotationOnSameLineCheck constantNameCheckObj=new AnnotationOnSameLineCheck();
    final int[] actual=constantNameCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.CLASS_DEF,TokenTypes.INTERFACE_DEF,TokenTypes.ENUM_DEF,TokenTypes.METHOD_DEF,TokenTypes.CTOR_DEF,TokenTypes.VARIABLE_DEF,TokenTypes.PARAMETER_DEF,TokenTypes.ANNOTATION_DEF,TokenTypes.TYPECAST,TokenTypes.LITERAL_THROWS,TokenTypes.IMPLEMENTS_CLAUSE,TokenTypes.TYPE_ARGUMENT,TokenTypes.LITERAL_NEW,TokenTypes.DOT,TokenTypes.ANNOTATION_FIELD_DEF};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
  @Test public void testCheck() throws Exception {
    final DefaultConfiguration config=createModuleConfig(AnnotationOnSameLineCheck.class);
    final String[] expected={"9: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Annotation"),"10: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Annotation"),"11: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Deprecated")};
    verify(config,getPath("InputAnnotationOnSameLineCheck.java"),expected);
  }
  @Test public void testCheckAcceptableTokens() throws Exception {
    final DefaultConfiguration config=createModuleConfig(AnnotationOnSameLineCheck.class);
    config.addAttribute("tokens","CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, " + "CTOR_DEF, VARIABLE_DEF, PARAMETER_DEF, ANNOTATION_DEF, TYPECAST, " + "LITERAL_THROWS, IMPLEMENTS_CLAUSE, TYPE_ARGUMENT, LITERAL_NEW, DOT, "+ "ANNOTATION_FIELD_DEF");
    final String[] expected={"9: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Annotation"),"10: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Annotation"),"11: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Deprecated")};
    verify(config,getPath("InputAnnotationOnSameLineCheck.java"),expected);
  }
  @Test public void testCheck2() throws Exception {
    final DefaultConfiguration config=createModuleConfig(AnnotationOnSameLineCheck.class);
    final String[] expected={"11: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"16: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"SuppressWarnings"),"19: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"SuppressWarnings"),"20: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann")};
    verify(config,getPath("InputAnnotationOnSameLineCheck2.java"),expected);
  }
  @Test public void testCheckOnDifferentTokens() throws Exception {
    final DefaultConfiguration config=createModuleConfig(AnnotationOnSameLineCheck.class);
    config.addAttribute("tokens","CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, " + "CTOR_DEF, VARIABLE_DEF, PARAMETER_DEF, ANNOTATION_DEF, TYPECAST, " + "LITERAL_THROWS, IMPLEMENTS_CLAUSE, TYPE_ARGUMENT, LITERAL_NEW, DOT, "+ "ANNOTATION_FIELD_DEF");
    final String[] expected={"5: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"8: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"13: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"14: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"17: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"18: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"21: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"24: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"29: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"33: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"34: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"35: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"37: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"43: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"53: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann"),"56: " + getCheckMessage(MSG_KEY_ANNOTATION_ON_SAME_LINE,"Ann")};
    verify(config,getPath("InputAnnotationOnSameLineCheckOnDifferentTokens.java"),expected);
  }
}
