/** 
 * Enter a description of class PackageNamesLoaderTest.java.
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(PackageNamesLoader.class) public class PackageNamesLoaderTest extends AbstractPathTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/packagenamesloader";
  }
  @Test public void testDefault() throws CheckstyleException {
    final Set<String> packageNames=PackageNamesLoader.getPackageNames(Thread.currentThread().getContextClassLoader());
    assertEquals("pkgNames.length.",0,packageNames.size());
  }
  /** 
 * Tests the loading of package names. This test needs mocking, because the package names would have to be placed in  {@literal checkstyle_packages.xml}, but this will affect every test, which is undesired.
 * @throws Exception if error occurs
 */
  @Test @SuppressWarnings("unchecked") public void testPackagesFile() throws Exception {
    final URLConnection mockConnection=Mockito.mock(URLConnection.class);
    when(mockConnection.getInputStream()).thenReturn(Files.newInputStream(Paths.get(getPath("InputPackageNamesLoaderFile.xml"))));
    final URL url=getMockUrl(mockConnection);
    final Enumeration<URL> enumeration=mock(Enumeration.class);
    when(enumeration.hasMoreElements()).thenReturn(true).thenReturn(false);
    when(enumeration.nextElement()).thenReturn(url);
    final ClassLoader classLoader=mock(ClassLoader.class);
    when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumeration);
    final Set<String> actualPackageNames=PackageNamesLoader.getPackageNames(classLoader);
    final String[] expectedPackageNames={"com.puppycrawl.tools.checkstyle","com.puppycrawl.tools.checkstyle.checks","com.puppycrawl.tools.checkstyle.checks.annotation","com.puppycrawl.tools.checkstyle.checks.blocks","com.puppycrawl.tools.checkstyle.checks.coding","com.puppycrawl.tools.checkstyle.checks.design","com.puppycrawl.tools.checkstyle.checks.header","com.puppycrawl.tools.checkstyle.checks.imports","com.puppycrawl.tools.checkstyle.checks.indentation","com.puppycrawl.tools.checkstyle.checks.javadoc","com.puppycrawl.tools.checkstyle.checks.metrics","com.puppycrawl.tools.checkstyle.checks.modifier","com.puppycrawl.tools.checkstyle.checks.naming","com.puppycrawl.tools.checkstyle.checks.regexp","com.puppycrawl.tools.checkstyle.checks.sizes","com.puppycrawl.tools.checkstyle.checks.whitespace","com.puppycrawl.tools.checkstyle.filefilters","com.puppycrawl.tools.checkstyle.filters"};
    assertEquals("Invalid package names length.",expectedPackageNames.length,actualPackageNames.size());
    final Set<String> checkstylePackagesSet=new HashSet<>(Arrays.asList(expectedPackageNames));
    assertEquals("Invalid names set.",checkstylePackagesSet,actualPackageNames);
  }
  @Test @SuppressWarnings("unchecked") public void testPackagesWithDots() throws Exception {
    final Constructor<PackageNamesLoader> constructor=PackageNamesLoader.class.getDeclaredConstructor();
    constructor.setAccessible(true);
    final PackageNamesLoader loader=constructor.newInstance();
    final Attributes attributes=mock(Attributes.class);
    when(attributes.getValue("name")).thenReturn("coding.");
    loader.startElement("","","package",attributes);
    loader.endElement("","","package");
    final Field field=PackageNamesLoader.class.getDeclaredField("packageNames");
    field.setAccessible(true);
    final Set<String> list=(Set<String>)field.get(loader);
    assertEquals("Invalid package name","coding.",list.iterator().next());
  }
  @Test @SuppressWarnings("unchecked") public void testPackagesWithSaxException() throws Exception {
    final URLConnection mockConnection=Mockito.mock(URLConnection.class);
    when(mockConnection.getInputStream()).thenReturn(new ByteArrayInputStream(EMPTY_BYTE_ARRAY));
    final URL url=getMockUrl(mockConnection);
    final Enumeration<URL> enumeration=mock(Enumeration.class);
    when(enumeration.hasMoreElements()).thenReturn(true);
    when(enumeration.nextElement()).thenReturn(url);
    final ClassLoader classLoader=mock(ClassLoader.class);
    when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumeration);
    try {
      PackageNamesLoader.getPackageNames(classLoader);
      fail("CheckstyleException is expected");
    }
 catch (    CheckstyleException ex) {
      assertTrue("Invalid exception cause class",ex.getCause() instanceof SAXException);
    }
  }
  @Test @SuppressWarnings("unchecked") public void testPackagesWithIoException() throws Exception {
    final URLConnection mockConnection=Mockito.mock(URLConnection.class);
    when(mockConnection.getInputStream()).thenReturn(null);
    final URL url=getMockUrl(mockConnection);
    final Enumeration<URL> enumer=mock(Enumeration.class);
    when(enumer.hasMoreElements()).thenReturn(true);
    when(enumer.nextElement()).thenReturn(url);
    final ClassLoader classLoader=mock(ClassLoader.class);
    when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumer);
    try {
      PackageNamesLoader.getPackageNames(classLoader);
      fail("CheckstyleException is expected");
    }
 catch (    CheckstyleException ex) {
      assertTrue("Invalid exception cause class",ex.getCause() instanceof IOException);
      assertNotEquals("Invalid exception message","unable to get package file resources",ex.getMessage());
    }
  }
  @Test public void testPackagesWithIoExceptionGetResources() throws Exception {
    final ClassLoader classLoader=mock(ClassLoader.class);
    when(classLoader.getResources("checkstyle_packages.xml")).thenThrow(IOException.class);
    try {
      PackageNamesLoader.getPackageNames(classLoader);
      fail("CheckstyleException is expected");
    }
 catch (    CheckstyleException ex) {
      assertTrue("Invalid exception cause class",ex.getCause() instanceof IOException);
      assertEquals("Invalid exception message","unable to get package file resources",ex.getMessage());
    }
  }
  private static URL getMockUrl(  final URLConnection connection) throws IOException {
    final URLStreamHandler handler=new URLStreamHandler(){
      @Override protected URLConnection openConnection(      final URL url){
        return connection;
      }
    }
;
    return new URL("http://foo.bar","foo.bar",80,"",handler);
  }
}
