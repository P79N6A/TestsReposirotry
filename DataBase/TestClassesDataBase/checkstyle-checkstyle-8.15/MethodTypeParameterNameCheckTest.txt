public class MethodTypeParameterNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/methodtypeparametername";
  }
  @Test public void testGetAcceptableTokens(){
    final MethodTypeParameterNameCheck methodTypeParameterNameCheck=new MethodTypeParameterNameCheck();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default acceptable tokens are invalid",expected,methodTypeParameterNameCheck.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final MethodTypeParameterNameCheck checkObj=new MethodTypeParameterNameCheck();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testMethodDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodTypeParameterNameCheck.class);
    final String pattern="^[A-Z]$";
    final String[] expected={"7:13: " + getCheckMessage(MSG_INVALID_PATTERN,"TT",pattern),"9:6: " + getCheckMessage(MSG_INVALID_PATTERN,"e_e",pattern),"19:6: " + getCheckMessage(MSG_INVALID_PATTERN,"Tfo$o2T",pattern),"23:6: " + getCheckMessage(MSG_INVALID_PATTERN,"foo",pattern),"28:10: " + getCheckMessage(MSG_INVALID_PATTERN,"_fo",pattern)};
    verify(checkConfig,getPath("InputMethodTypeParameterName.java"),expected);
  }
  @Test public void testMethodFooName() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MethodTypeParameterNameCheck.class);
    checkConfig.addAttribute("format","^foo$");
    final String pattern="^foo$";
    final String[] expected={"7:13: " + getCheckMessage(MSG_INVALID_PATTERN,"TT",pattern),"9:6: " + getCheckMessage(MSG_INVALID_PATTERN,"e_e",pattern),"19:6: " + getCheckMessage(MSG_INVALID_PATTERN,"Tfo$o2T",pattern),"28:10: " + getCheckMessage(MSG_INVALID_PATTERN,"_fo",pattern),"35:6: " + getCheckMessage(MSG_INVALID_PATTERN,"E",pattern),"37:14: " + getCheckMessage(MSG_INVALID_PATTERN,"T",pattern)};
    verify(checkConfig,getPath("InputMethodTypeParameterName.java"),expected);
  }
}
