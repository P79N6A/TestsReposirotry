public class PackageDeclarationCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/packagedeclaration";
  }
  @Test public void testDefaultNoPackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected={"2: " + getCheckMessage(MSG_KEY_MISSING)};
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationNoPackage.java"),expected);
  }
  @Test public void testDefaultWithPackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputPackageDeclarationPlain.java"),expected);
  }
  @Test public void testOnFileWithCommentOnly() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected={"1: " + getCheckMessage(MSG_KEY_MISSING)};
    verify(checkConfig,getPath("InputPackageDeclarationWithCommentOnly.java"),expected);
  }
  @Test public void testFileForDiffDirectoryMismatch() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected={"1: " + getCheckMessage(MSG_KEY_MISMATCH)};
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"),expected);
  }
  @Test public void testFileForDirectoryMismatchAtParent() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected={"1: " + getCheckMessage(MSG_KEY_MISMATCH)};
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java"),expected);
  }
  @Test public void testFileForDirectoryMismatchAtSubpackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    final String[] expected={"1: " + getCheckMessage(MSG_KEY_MISMATCH)};
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),expected);
  }
  @Test public void testFileIgnoreDiffDirectoryMismatch() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    checkConfig.addAttribute("matchDirectoryStructure","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"),expected);
  }
  @Test public void testFileIgnoreDirectoryMismatchAtParent() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    checkConfig.addAttribute("matchDirectoryStructure","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java"),expected);
  }
  @Test public void testFileIgnoreDirectoryMismatchAtSubpackage() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(PackageDeclarationCheck.class);
    checkConfig.addAttribute("matchDirectoryStructure","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final PackageDeclarationCheck check=new PackageDeclarationCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
}
