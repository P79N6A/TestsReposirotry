public class InterfaceTypeParameterNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/interfacetypeparametername";
  }
  @Test public void testGetAcceptableTokens(){
    final InterfaceTypeParameterNameCheck interfaceTypeParameterNameCheck=new InterfaceTypeParameterNameCheck();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default acceptable tokens are invalid",expected,interfaceTypeParameterNameCheck.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final InterfaceTypeParameterNameCheck checkObj=new InterfaceTypeParameterNameCheck();
    final int[] expected={TokenTypes.TYPE_PARAMETER};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testInterfaceDefault() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(InterfaceTypeParameterNameCheck.class);
    final String pattern="^[A-Z]$";
    final String[] expected={"48:15: " + getCheckMessage(MSG_INVALID_PATTERN,"Input",pattern)};
    verify(checkConfig,getPath("InputInterfaceTypeParameterName.java"),expected);
  }
  @Test public void testInterfaceFooName() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(InterfaceTypeParameterNameCheck.class);
    checkConfig.addAttribute("format","^foo$");
    final String pattern="^foo$";
    final String[] expected={"48:15: " + getCheckMessage(MSG_INVALID_PATTERN,"Input",pattern),"52:24: " + getCheckMessage(MSG_INVALID_PATTERN,"T",pattern)};
    verify(checkConfig,getPath("InputInterfaceTypeParameterName.java"),expected);
  }
}
