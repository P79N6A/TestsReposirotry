public class CyclomaticComplexityCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/metrics/cyclomaticcomplexity";
  }
  @Test public void testSwitchBlockAsSingleDecisionPointSetToTrue() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(CyclomaticComplexityCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("switchBlockAsSingleDecisionPoint","true");
    final String[] expected={"4:5: " + getCheckMessage(MSG_KEY,2,0)};
    verify(checkConfig,getPath("InputCyclomaticComplexitySwitchBlocks.java"),expected);
  }
  @Test public void testSwitchBlockAsSingleDecisionPointSetToFalse() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(CyclomaticComplexityCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("switchBlockAsSingleDecisionPoint","false");
    final String[] expected={"4:5: " + getCheckMessage(MSG_KEY,5,0)};
    verify(checkConfig,getPath("InputCyclomaticComplexitySwitchBlocks.java"),expected);
  }
  @Test public void testEqualsMaxComplexity() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(CyclomaticComplexityCheck.class);
    checkConfig.addAttribute("max","5");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputCyclomaticComplexitySwitchBlocks.java"),expected);
  }
  @Test public void test() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(CyclomaticComplexityCheck.class);
    checkConfig.addAttribute("max","0");
    final String[] expected={"5:5: " + getCheckMessage(MSG_KEY,2,0),"10:17: " + getCheckMessage(MSG_KEY,2,0),"22:5: " + getCheckMessage(MSG_KEY,6,0),"35:5: " + getCheckMessage(MSG_KEY,3,0),"45:5: " + getCheckMessage(MSG_KEY,5,0),"63:5: " + getCheckMessage(MSG_KEY,3,0),"76:5: " + getCheckMessage(MSG_KEY,3,0),"88:5: " + getCheckMessage(MSG_KEY,3,0),"100:5: " + getCheckMessage(MSG_KEY,1,0),"104:13: " + getCheckMessage(MSG_KEY,2,0)};
    verify(checkConfig,getPath("InputCyclomaticComplexity.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final CyclomaticComplexityCheck cyclomaticComplexityCheckObj=new CyclomaticComplexityCheck();
    final int[] actual=cyclomaticComplexityCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.CTOR_DEF,TokenTypes.METHOD_DEF,TokenTypes.INSTANCE_INIT,TokenTypes.STATIC_INIT,TokenTypes.LITERAL_WHILE,TokenTypes.LITERAL_DO,TokenTypes.LITERAL_FOR,TokenTypes.LITERAL_IF,TokenTypes.LITERAL_SWITCH,TokenTypes.LITERAL_CASE,TokenTypes.LITERAL_CATCH,TokenTypes.QUESTION,TokenTypes.LAND,TokenTypes.LOR};
    Assert.assertArrayEquals("Invalid acceptable tokens",expected,actual);
  }
  @Test public void testHighMax() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(CyclomaticComplexityCheck.class);
    checkConfig.addAttribute("max","100");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputCyclomaticComplexitySwitchBlocks.java"),expected);
  }
}
