public class RegexpSinglelineJavaCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/regexp/regexpsinglelinejava";
  }
  @Test public void testGetAcceptableTokens(){
    final RegexpSinglelineJavaCheck regexpSinglelineJavaCheck=new RegexpSinglelineJavaCheck();
    assertArrayEquals("Default acceptable tokens are invalid",CommonUtil.EMPTY_INT_ARRAY,regexpSinglelineJavaCheck.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final RegexpSinglelineJavaCheck checkObj=new RegexpSinglelineJavaCheck();
    assertArrayEquals("Default required tokens are invalid",CommonUtil.EMPTY_INT_ARRAY,checkObj.getRequiredTokens());
  }
  @Test public void testIt() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","System\\.(out)|(err)\\.print(ln)?\\(");
    final String[] expected={"69: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"System\\.(out)|(err)\\.print(ln)?\\(")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testMessageProperty() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","System\\.(out)|(err)\\.print(ln)?\\(");
    checkConfig.addAttribute("message","Bad line :(");
    final String[] expected={"69: " + "Bad line :("};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testIgnoreCaseTrue() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","SYSTEM\\.(OUT)|(ERR)\\.PRINT(LN)?\\(");
    checkConfig.addAttribute("ignoreCase","true");
    final String[] expected={"69: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"SYSTEM\\.(OUT)|(ERR)\\.PRINT(LN)?\\(")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testIgnoreCaseFalse() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","SYSTEM\\.(OUT)|(ERR)\\.PRINT(LN)?\\(");
    checkConfig.addAttribute("ignoreCase","false");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testIgnoreCommentsCppStyle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","don't use trailing comments");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsFalseCppStyle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","don't use trailing comments");
    checkConfig.addAttribute("ignoreComments","false");
    final String[] expected={"4: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"don't use trailing comments")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsBlockStyle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","c-style 1");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsFalseBlockStyle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","c-style 1");
    checkConfig.addAttribute("ignoreComments","false");
    final String[] expected={"19: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"c-style 1")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsMultipleBlockStyle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","c-style 2");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsMultiLine() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","Let's check multi-line comments");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsInlineStart() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","long ms /");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsInlineEnd() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","int z");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected={"22: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"int z")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsInlineMiddle() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","int y");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected={"23: " + getCheckMessage(MSG_REGEXP_EXCEEDED,"int y")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testIgnoreCommentsNoSpaces() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","long ms  ");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void test1371588() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","\\s+$");
    checkConfig.addAttribute("ignoreComments","true");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaTrailingComment.java"),expected);
  }
  @Test public void testExistingInDoc() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","Test case file");
    checkConfig.addAttribute("minimum","1");
    checkConfig.addAttribute("maximum","1000");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testExistingInCode() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","package");
    checkConfig.addAttribute("minimum","1");
    checkConfig.addAttribute("maximum","1000");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
  @Test public void testMissing() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(RegexpSinglelineJavaCheck.class);
    checkConfig.addAttribute("format","This text is not in the file");
    checkConfig.addAttribute("minimum","1");
    checkConfig.addAttribute("maximum","1000");
    final String[] expected={"1: " + getCheckMessage(MSG_REGEXP_MINIMUM,1,"This text is not in the file")};
    verify(checkConfig,getPath("InputRegexpSinglelineJavaSemantic.java"),expected);
  }
}
