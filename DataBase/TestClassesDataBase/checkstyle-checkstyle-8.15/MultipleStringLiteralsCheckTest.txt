public class MultipleStringLiteralsCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/multiplestringliterals";
  }
  @Test public void testIt() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("allowedDuplicates","2");
    checkConfig.addAttribute("ignoreStringsRegexp","");
    final String[] expected={"5:16: " + getCheckMessage(MSG_KEY,"\"StringContents\"",3),"8:17: " + getCheckMessage(MSG_KEY,"\"\"",4),"10:23: " + getCheckMessage(MSG_KEY,"\", \"",3)};
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
  @Test public void testItIgnoreEmpty() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("allowedDuplicates","2");
    final String[] expected={"5:16: " + getCheckMessage(MSG_KEY,"\"StringContents\"",3),"10:23: " + getCheckMessage(MSG_KEY,"\", \"",3)};
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
  @Test public void testMultipleInputs() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("allowedDuplicates","2");
    final String firstInput=getPath("InputMultipleStringLiterals.java");
    final String secondInput=getPath("InputMultipleStringLiteralsNoWarnings.java");
    final File[] inputs={new File(firstInput),new File(secondInput)};
    final List<String> expectedFirstInput=Arrays.asList("5:16: " + getCheckMessage(MSG_KEY,"\"StringContents\"",3),"10:23: " + getCheckMessage(MSG_KEY,"\", \"",3));
    final List<String> expectedSecondInput=Arrays.asList(CommonUtil.EMPTY_STRING_ARRAY);
    verify(createChecker(checkConfig),inputs,ImmutableMap.of(firstInput,expectedFirstInput,secondInput,expectedSecondInput));
  }
  @Test public void testItIgnoreEmptyAndComspace() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("allowedDuplicates","2");
    checkConfig.addAttribute("ignoreStringsRegexp","^((\"\")|(\", \"))$");
    final String[] expected={"5:16: " + getCheckMessage(MSG_KEY,"\"StringContents\"",3)};
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
  @Test public void testItWithoutIgnoringAnnotations() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("allowedDuplicates","3");
    checkConfig.addAttribute("ignoreOccurrenceContext","");
    final String[] expected={"19:23: " + getCheckMessage(MSG_KEY,"\"unchecked\"",4)};
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final MultipleStringLiteralsCheck check=new MultipleStringLiteralsCheck();
    Assert.assertNotNull("Acceptable tokens should not be null",check.getAcceptableTokens());
    Assert.assertNotNull("Default tokens should not be null",check.getDefaultTokens());
    Assert.assertNotNull("Required tokens should not be null",check.getRequiredTokens());
  }
  @Test public void testDefaultConfiguration() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    final String[] expected={"5:16: " + getCheckMessage(MSG_KEY,"\"StringContents\"",3),"7:17: " + getCheckMessage(MSG_KEY,"\"DoubleString\"",2),"10:23: " + getCheckMessage(MSG_KEY,"\", \"",3)};
    createChecker(checkConfig);
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
  @Test public void testIgnores() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(MultipleStringLiteralsCheck.class);
    checkConfig.addAttribute("ignoreStringsRegexp",null);
    checkConfig.addAttribute("ignoreOccurrenceContext","VARIABLE_DEF");
    final String[] expected={"19:23: " + getCheckMessage(MSG_KEY,"\"unchecked\"",4)};
    createChecker(checkConfig);
    verify(checkConfig,getPath("InputMultipleStringLiterals.java"),expected);
  }
}
