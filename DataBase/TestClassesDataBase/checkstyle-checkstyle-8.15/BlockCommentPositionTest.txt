public class BlockCommentPositionTest extends AbstractPathTestSupport {
  @Test public void testPrivateConstr() throws Exception {
    assertTrue("Constructor is not private",TestUtil.isUtilsClassHasPrivateConstructor(BlockCommentPosition.class,true));
  }
  @Test public void testJavaDocsRecognition() throws Exception {
    final List<BlockCommentPositionTestMetadata> metadataList=Arrays.asList(new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnClass.java",BlockCommentPosition::isOnClass,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnMethod.java",BlockCommentPosition::isOnMethod,4),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnField.java",BlockCommentPosition::isOnField,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnEnum.java",BlockCommentPosition::isOnEnum,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnConstructor.java",BlockCommentPosition::isOnConstructor,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnInterface.java",BlockCommentPosition::isOnInterface,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnAnnotation.java",BlockCommentPosition::isOnAnnotationDef,3),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnEnumMember.java",BlockCommentPosition::isOnEnumConstant,2),new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnAnnotationField.java",BlockCommentPosition::isOnAnnotationField,4));
    for (    BlockCommentPositionTestMetadata metadata : metadataList) {
      final DetailAST ast=JavaParser.parseFile(new File(getPath(metadata.getFileName())),JavaParser.Options.WITH_COMMENTS);
      final int matches=getJavadocsCount(ast,metadata.getAssertion());
      assertEquals("Invalid javadoc count",metadata.getMatchesNum(),matches);
    }
  }
  private static int getJavadocsCount(  DetailAST detailAST,  Function<DetailAST,Boolean> assertion){
    int matchFound=0;
    DetailAST node=detailAST;
    while (node != null) {
      if (node.getType() == TokenTypes.BLOCK_COMMENT_BEGIN && JavadocUtil.isJavadocComment(node)) {
        if (!assertion.apply(node)) {
          throw new IllegalStateException("Position of comment is defined correctly");
        }
        matchFound++;
      }
      matchFound+=getJavadocsCount(node.getFirstChild(),assertion);
      node=node.getNextSibling();
    }
    return matchFound;
  }
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/utils/blockcommentposition";
  }
private static final class BlockCommentPositionTestMetadata {
    private final String fileName;
    private final Function<DetailAST,Boolean> assertion;
    private final int matchesNum;
    BlockCommentPositionTestMetadata(    String fileName,    Function<DetailAST,Boolean> assertion,    int matchesNum){
      this.fileName=fileName;
      this.assertion=assertion;
      this.matchesNum=matchesNum;
    }
    public String getFileName(){
      return fileName;
    }
    public Function<DetailAST,Boolean> getAssertion(){
      return assertion;
    }
    public int getMatchesNum(){
      return matchesNum;
    }
  }
}
