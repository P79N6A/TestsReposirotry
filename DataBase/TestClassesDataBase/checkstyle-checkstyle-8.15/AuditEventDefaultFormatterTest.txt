@RunWith(PowerMockRunner.class) @PrepareForTest(AuditEvent.class) public class AuditEventDefaultFormatterTest {
  @Test public void testFormatFullyQualifiedModuleNameContainsCheckSuffix(){
    final LocalizedMessage message=new LocalizedMessage(1,1,null,null,null,SeverityLevel.WARNING,null,TestModuleCheck.class,"Mocked message.");
    final AuditEvent event=new AuditEvent("","InputMockFile.java",message);
    final AuditEventFormatter formatter=new AuditEventDefaultFormatter();
    final String expected="[WARN] InputMockFile.java:1:1: Mocked message. " + "[AuditEventDefaultFormatterTest$TestModule]";
    assertEquals("Invalid format",expected,formatter.format(event));
  }
  @Test public void testFormatFullyQualifiedModuleNameDoesNotContainCheckSuffix(){
    final LocalizedMessage message=new LocalizedMessage(1,1,null,null,null,SeverityLevel.WARNING,null,TestModule.class,"Mocked message.");
    final AuditEvent event=new AuditEvent("","InputMockFile.java",message);
    final AuditEventFormatter formatter=new AuditEventDefaultFormatter();
    final String expected="[WARN] InputMockFile.java:1:1: Mocked message. " + "[AuditEventDefaultFormatterTest$TestModule]";
    assertEquals("Invalid format",expected,formatter.format(event));
  }
  @Test public void testFormatModuleNameContainsCheckSuffix(){
    final AuditEvent mock=PowerMockito.mock(AuditEvent.class);
    when(mock.getSourceName()).thenReturn("TestModuleCheck");
    when(mock.getSeverityLevel()).thenReturn(SeverityLevel.WARNING);
    when(mock.getLine()).thenReturn(1);
    when(mock.getColumn()).thenReturn(1);
    when(mock.getMessage()).thenReturn("Mocked message.");
    when(mock.getFileName()).thenReturn("InputMockFile.java");
    final AuditEventFormatter formatter=new AuditEventDefaultFormatter();
    final String expected="[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
    assertEquals("Invalid format",expected,formatter.format(mock));
  }
  @Test public void testFormatModuleNameDoesNotContainCheckSuffix(){
    final AuditEvent mock=PowerMockito.mock(AuditEvent.class);
    when(mock.getSourceName()).thenReturn("TestModule");
    when(mock.getSeverityLevel()).thenReturn(SeverityLevel.WARNING);
    when(mock.getLine()).thenReturn(1);
    when(mock.getColumn()).thenReturn(1);
    when(mock.getMessage()).thenReturn("Mocked message.");
    when(mock.getFileName()).thenReturn("InputMockFile.java");
    final AuditEventFormatter formatter=new AuditEventDefaultFormatter();
    final String expected="[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
    assertEquals("Invalid format",expected,formatter.format(mock));
  }
  @Test public void testFormatModuleWithModuleId(){
    final LocalizedMessage message=new LocalizedMessage(1,1,null,null,null,SeverityLevel.WARNING,"ModuleId",TestModule.class,"Mocked message.");
    final AuditEvent event=new AuditEvent("","InputMockFile.java",message);
    final AuditEventFormatter formatter=new AuditEventDefaultFormatter();
    final String expected="[WARN] InputMockFile.java:1:1: Mocked message. [ModuleId]";
    assertEquals("Invalid format",expected,formatter.format(event));
  }
  @Test public void testCalculateBufferLength() throws Exception {
    final Method calculateBufferLengthMethod=Whitebox.getMethod(AuditEventDefaultFormatter.class,"calculateBufferLength",AuditEvent.class,int.class);
    final LocalizedMessage localizedMessage=new LocalizedMessage(1,1,"messages.properties","key",null,SeverityLevel.ERROR,null,getClass(),null);
    final AuditEvent auditEvent=new AuditEvent(new Object(),"fileName",localizedMessage);
    final int result=(int)calculateBufferLengthMethod.invoke(null,auditEvent,SeverityLevel.ERROR.ordinal());
    assertEquals("Buffer length is not expected",54,result);
  }
  /** 
 * Non meaningful javadoc just to contain "noinspection" tag. Till https://youtrack.jetbrains.com/issue/IDEA-187210
 * @noinspection JUnitTestCaseWithNoTests
 */
private static class TestModuleCheck {
  }
  /** 
 * Non meaningful javadoc just to contain "noinspection" tag. Till https://youtrack.jetbrains.com/issue/IDEA-187210
 * @noinspection JUnitTestCaseWithNoTests
 */
private static class TestModule {
  }
}
