public class InnerAssignmentCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/coding/innerassignment";
  }
  @Test public void testIt() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(InnerAssignmentCheck.class);
    final String[] expected={"16:15: " + getCheckMessage(MSG_KEY),"16:19: " + getCheckMessage(MSG_KEY),"18:39: " + getCheckMessage(MSG_KEY),"20:35: " + getCheckMessage(MSG_KEY),"38:16: " + getCheckMessage(MSG_KEY),"39:24: " + getCheckMessage(MSG_KEY),"40:19: " + getCheckMessage(MSG_KEY),"41:17: " + getCheckMessage(MSG_KEY),"42:29: " + getCheckMessage(MSG_KEY),"43:20: " + getCheckMessage(MSG_KEY),"44:17: " + getCheckMessage(MSG_KEY),"44:31: " + getCheckMessage(MSG_KEY),"44:41: " + getCheckMessage(MSG_KEY),"45:16: " + getCheckMessage(MSG_KEY),"45:27: " + getCheckMessage(MSG_KEY),"46:32: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputInnerAssignment.java"),expected);
  }
  @Test public void testLambdaExpression() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(InnerAssignmentCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputInnerAssignmentLambdaExpressions.java"),expected);
  }
  @Test public void testTokensNotNull(){
    final InnerAssignmentCheck check=new InnerAssignmentCheck();
    Assert.assertNotNull("Unexpected acceptable tokenks",check.getAcceptableTokens());
    Assert.assertNotNull("Unexpected default tokens",check.getDefaultTokens());
    Assert.assertNotNull("Unexpected required tokens",check.getRequiredTokens());
  }
}
