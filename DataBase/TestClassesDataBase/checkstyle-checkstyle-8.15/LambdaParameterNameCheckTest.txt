public class LambdaParameterNameCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/naming/lambdaparametername";
  }
  @Test public void testGetRequiredTokens(){
    final int[] expected={TokenTypes.LAMBDA};
    final LambdaParameterNameCheck check=new LambdaParameterNameCheck();
    final int[] requiredTokens=check.getRequiredTokens();
    Assert.assertArrayEquals("Invalid required tokens",expected,requiredTokens);
  }
  @Test public void testAcceptableTokens(){
    final int[] expected={TokenTypes.LAMBDA};
    final LambdaParameterNameCheck check=new LambdaParameterNameCheck();
    final int[] acceptableTokens=check.getAcceptableTokens();
    Assert.assertArrayEquals("Invalid acceptable tokens",expected,acceptableTokens);
  }
  @Test public void testParametersInLambda() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(LambdaParameterNameCheck.class);
    checkConfig.addAttribute("format","^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$");
    final String pattern="^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$";
    final String[] expected={"8:68: " + getCheckMessage(MSG_INVALID_PATTERN,"s",pattern),"10:66: " + getCheckMessage(MSG_INVALID_PATTERN,"st",pattern),"12:65: " + getCheckMessage(MSG_INVALID_PATTERN,"s1",pattern),"12:69: " + getCheckMessage(MSG_INVALID_PATTERN,"s2",pattern),"14:80: " + getCheckMessage(MSG_INVALID_PATTERN,"s",pattern)};
    verify(checkConfig,getPath("InputLambdaParameterName.java"),expected);
  }
}
