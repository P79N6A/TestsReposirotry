public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {
  private final String checkName=NPathComplexityCheck.class.getSimpleName();
  @Override protected String getCheckName(){
    return checkName;
  }
  @Test public void testOne() throws Exception {
    final File fileToProcess=new File(getPath("SuppressionXpathRegressionNPathComplexityOne.java"));
    final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);
    moduleConfig.addAttribute("max","0");
    final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};
    final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");
    runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);
  }
  @Test public void testTwo() throws Exception {
    final File fileToProcess=new File(getPath("SuppressionXpathRegressionNPathComplexityTwo.java"));
    final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);
    moduleConfig.addAttribute("max","0");
    final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};
    final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");
    runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);
  }
}
