public class AvoidNestedBlocksCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/blocks/avoidnestedblocks";
  }
  @Test public void testGetRequiredTokens(){
    final AvoidNestedBlocksCheck checkObj=new AvoidNestedBlocksCheck();
    final int[] expected={TokenTypes.SLIST};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testStrictSettings() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidNestedBlocksCheck.class);
    final String[] expected={"22:9: " + getCheckMessage(MSG_KEY_BLOCK_NESTED),"44:17: " + getCheckMessage(MSG_KEY_BLOCK_NESTED),"50:17: " + getCheckMessage(MSG_KEY_BLOCK_NESTED),"58:17: " + getCheckMessage(MSG_KEY_BLOCK_NESTED)};
    verify(checkConfig,getPath("InputAvoidNestedBlocksDefault.java"),expected);
  }
  @Test public void testAllowSwitchInCase() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AvoidNestedBlocksCheck.class);
    checkConfig.addAttribute("allowInSwitchCase","true");
    final String[] expected={"22:9: " + getCheckMessage(MSG_KEY_BLOCK_NESTED),"44:17: " + getCheckMessage(MSG_KEY_BLOCK_NESTED),"58:17: " + getCheckMessage(MSG_KEY_BLOCK_NESTED)};
    verify(checkConfig,getPath("InputAvoidNestedBlocksDefault.java"),expected);
  }
  @Test public void testGetAcceptableTokens(){
    final AvoidNestedBlocksCheck constantNameCheckObj=new AvoidNestedBlocksCheck();
    final int[] actual=constantNameCheckObj.getAcceptableTokens();
    final int[] expected={TokenTypes.SLIST};
    assertArrayEquals("Default acceptable tokens are invalid",expected,actual);
  }
}
