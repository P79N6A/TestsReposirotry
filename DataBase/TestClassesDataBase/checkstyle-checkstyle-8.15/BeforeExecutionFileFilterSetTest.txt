public class BeforeExecutionFileFilterSetTest {
  @Test public void testAccept(){
    final String fileName="BAD";
    final BeforeExecutionExclusionFileFilter filter=new BeforeExecutionExclusionFileFilter();
    filter.setFileNamePattern(Pattern.compile(fileName));
    final BeforeExecutionFileFilterSet set=new BeforeExecutionFileFilterSet();
    set.addBeforeExecutionFileFilter(filter);
    assertTrue("Invalid accept state, should accept",set.accept("ATest.java"));
  }
  @Test public void testReject(){
    final String fileName="Test";
    final BeforeExecutionExclusionFileFilter filter=new BeforeExecutionExclusionFileFilter();
    filter.setFileNamePattern(Pattern.compile(fileName));
    final BeforeExecutionFileFilterSet set=new BeforeExecutionFileFilterSet();
    set.addBeforeExecutionFileFilter(filter);
    assertFalse("Invalid accept state, should not accept",set.accept("ATest.java"));
  }
  @Test public void testGetFilters2(){
    final BeforeExecutionFileFilterSet filterSet=new BeforeExecutionFileFilterSet();
    filterSet.addBeforeExecutionFileFilter(new BeforeExecutionExclusionFileFilter());
    assertEquals("size is the same",1,filterSet.getBeforeExecutionFileFilters().size());
  }
  @Test public void testToString2(){
    final BeforeExecutionFileFilterSet filterSet=new BeforeExecutionFileFilterSet();
    filterSet.addBeforeExecutionFileFilter(new BeforeExecutionExclusionFileFilter());
    assertNotNull("size is the same",filterSet.toString());
  }
  @Test public void testClear(){
    final BeforeExecutionFileFilterSet filterSet=new BeforeExecutionFileFilterSet();
    filterSet.addBeforeExecutionFileFilter(new BeforeExecutionExclusionFileFilter());
    assertEquals("Invalid filter set size",1,filterSet.getBeforeExecutionFileFilters().size());
    filterSet.clear();
    assertEquals("Invalid filter set size",0,filterSet.getBeforeExecutionFileFilters().size());
  }
}
