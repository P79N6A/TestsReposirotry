public class AtclauseOrderCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/javadoc/atclauseorder";
  }
  @Test public void testGetAcceptableTokens(){
    final AtclauseOrderCheck checkObj=new AtclauseOrderCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default acceptable tokens are invalid",expected,checkObj.getAcceptableTokens());
  }
  @Test public void testGetRequiredTokens(){
    final AtclauseOrderCheck checkObj=new AtclauseOrderCheck();
    final int[] expected={TokenTypes.BLOCK_COMMENT_BEGIN};
    assertArrayEquals("Default required tokens are invalid",expected,checkObj.getRequiredTokens());
  }
  @Test public void testCorrect() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AtclauseOrderCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputAtclauseOrderCorrect.java"),expected);
  }
  @Test public void testIncorrect() throws Exception {
    final String tagOrder="[@author, @version, @param, @return, @throws, @exception, @see," + " @since, @serial, @serialField, @serialData, @deprecated]";
    final DefaultConfiguration checkConfig=createModuleConfig(AtclauseOrderCheck.class);
    final String[] expected={"9: " + getCheckMessage(MSG_KEY,tagOrder),"11: " + getCheckMessage(MSG_KEY,tagOrder),"12: " + getCheckMessage(MSG_KEY,tagOrder),"40: " + getCheckMessage(MSG_KEY,tagOrder),"50: " + getCheckMessage(MSG_KEY,tagOrder),"51: " + getCheckMessage(MSG_KEY,tagOrder),"52: " + getCheckMessage(MSG_KEY,tagOrder),"62: " + getCheckMessage(MSG_KEY,tagOrder),"69: " + getCheckMessage(MSG_KEY,tagOrder),"86: " + getCheckMessage(MSG_KEY,tagOrder),"87: " + getCheckMessage(MSG_KEY,tagOrder),"99: " + getCheckMessage(MSG_KEY,tagOrder),"100: " + getCheckMessage(MSG_KEY,tagOrder),"101: " + getCheckMessage(MSG_KEY,tagOrder),"115: " + getCheckMessage(MSG_KEY,tagOrder),"123: " + getCheckMessage(MSG_KEY,tagOrder),"124: " + getCheckMessage(MSG_KEY,tagOrder),"134: " + getCheckMessage(MSG_KEY,tagOrder),"135: " + getCheckMessage(MSG_KEY,tagOrder),"145: " + getCheckMessage(MSG_KEY,tagOrder),"146: " + getCheckMessage(MSG_KEY,tagOrder),"153: " + getCheckMessage(MSG_KEY,tagOrder),"161: " + getCheckMessage(MSG_KEY,tagOrder),"172: " + getCheckMessage(MSG_KEY,tagOrder),"183: " + getCheckMessage(MSG_KEY,tagOrder),"185: " + getCheckMessage(MSG_KEY,tagOrder),"199: " + getCheckMessage(MSG_KEY,tagOrder),"202: " + getCheckMessage(MSG_KEY,tagOrder),"213: " + getCheckMessage(MSG_KEY,tagOrder),"223: " + getCheckMessage(MSG_KEY,tagOrder),"230: " + getCheckMessage(MSG_KEY,tagOrder),"237: " + getCheckMessage(MSG_KEY,tagOrder),"247: " + getCheckMessage(MSG_KEY,tagOrder),"248: " + getCheckMessage(MSG_KEY,tagOrder),"259: " + getCheckMessage(MSG_KEY,tagOrder),"261: " + getCheckMessage(MSG_KEY,tagOrder),"275: " + getCheckMessage(MSG_KEY,tagOrder),"277: " + getCheckMessage(MSG_KEY,tagOrder),"278: " + getCheckMessage(MSG_KEY,tagOrder),"288: " + getCheckMessage(MSG_KEY,tagOrder)};
    verify(checkConfig,getPath("InputAtclauseOrderIncorrect.java"),expected);
  }
  @Test public void testIncorrectCustom() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(AtclauseOrderCheck.class);
    checkConfig.addAttribute("target","CLASS_DEF");
    checkConfig.addAttribute("tagOrder"," @since,  @version, @param,@return,@throws, " + "@exception,@deprecated, @see,@serial,   @serialField,  @serialData,@author");
    final String tagOrder="[@since, @version, @param, @return, @throws, @exception," + " @deprecated, @see, @serial, @serialField, @serialData, @author]";
    final String[] expected={"113: " + getCheckMessage(MSG_KEY,tagOrder)};
    verify(checkConfig,getPath("InputAtclauseOrderIncorrect.java"),expected);
  }
}
