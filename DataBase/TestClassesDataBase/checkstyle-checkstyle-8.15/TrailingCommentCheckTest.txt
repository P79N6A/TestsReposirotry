public class TrailingCommentCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/trailingcomment";
  }
  @Test public void testGetRequiredTokens(){
    final TrailingCommentCheck checkObj=new TrailingCommentCheck();
    assertArrayEquals("Required tokens array is not empty",CommonUtil.EMPTY_INT_ARRAY,checkObj.getRequiredTokens());
  }
  @Test public void testGetAcceptableTokens(){
    final TrailingCommentCheck checkObj=new TrailingCommentCheck();
    assertArrayEquals("Acceptable tokens array is not empty",CommonUtil.EMPTY_INT_ARRAY,checkObj.getAcceptableTokens());
  }
  @Test public void testDefaults() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TrailingCommentCheck.class);
    final String[] expected={"4: " + getCheckMessage(MSG_KEY),"7: " + getCheckMessage(MSG_KEY),"8: " + getCheckMessage(MSG_KEY),"18: " + getCheckMessage(MSG_KEY),"19: " + getCheckMessage(MSG_KEY),"29: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputTrailingComment.java"),expected);
  }
  @Test public void testLegalComment() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TrailingCommentCheck.class);
    checkConfig.addAttribute("legalComment","^NOI18N$");
    final String[] expected={"4: " + getCheckMessage(MSG_KEY),"7: " + getCheckMessage(MSG_KEY),"8: " + getCheckMessage(MSG_KEY),"18: " + getCheckMessage(MSG_KEY),"19: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputTrailingComment.java"),expected);
  }
  @Test public void testFormat() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(TrailingCommentCheck.class);
    checkConfig.addAttribute("format","NOT MATCH");
    final String[] expected={"4: " + getCheckMessage(MSG_KEY),"5: " + getCheckMessage(MSG_KEY),"6: " + getCheckMessage(MSG_KEY),"7: " + getCheckMessage(MSG_KEY),"8: " + getCheckMessage(MSG_KEY),"13: " + getCheckMessage(MSG_KEY),"14: " + getCheckMessage(MSG_KEY),"15: " + getCheckMessage(MSG_KEY),"18: " + getCheckMessage(MSG_KEY),"19: " + getCheckMessage(MSG_KEY),"26: " + getCheckMessage(MSG_KEY),"29: " + getCheckMessage(MSG_KEY)};
    verify(checkConfig,getPath("InputTrailingComment.java"),expected);
  }
  @Test public void testCallVisitToken(){
    final TrailingCommentCheck check=new TrailingCommentCheck();
    try {
      check.visitToken(new DetailAST());
      Assert.fail("IllegalStateException is expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Error message is unexpected","visitToken() shouldn't be called.",ex.getMessage());
    }
  }
}
