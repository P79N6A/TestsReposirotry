public class BooleanExpressionComplexityCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/metrics/booleanexpressioncomplexity";
  }
  @Test public void test() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(BooleanExpressionComplexityCheck.class);
    final String[] expected={"13:9: " + getCheckMessage(MSG_KEY,4,3),"29:87: " + getCheckMessage(MSG_KEY,4,3),"39:9: " + getCheckMessage(MSG_KEY,6,3),"45:34: " + getCheckMessage(MSG_KEY,4,3),"47:34: " + getCheckMessage(MSG_KEY,4,3)};
    verify(checkConfig,getPath("InputBooleanExpressionComplexity.java"),expected);
  }
  @Test public void testNoBitwise() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(BooleanExpressionComplexityCheck.class);
    checkConfig.addAttribute("max","5");
    checkConfig.addAttribute("tokens","BXOR,LAND,LOR");
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputBooleanExpressionComplexity.java"),expected);
  }
  @Test public void testNullPointerException() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(BooleanExpressionComplexityCheck.class);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputBooleanExpressionComplexityNPE.java"),expected);
  }
  @Test public void testWrongToken(){
    final BooleanExpressionComplexityCheck booleanExpressionComplexityCheckObj=new BooleanExpressionComplexityCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.INTERFACE_DEF,"interface"));
    try {
      booleanExpressionComplexityCheckObj.visitToken(ast);
      fail("exception expected");
    }
 catch (    IllegalArgumentException ex) {
      assertEquals("Invalid exception message","Unknown type: interface[0x-1]",ex.getMessage());
    }
  }
}
