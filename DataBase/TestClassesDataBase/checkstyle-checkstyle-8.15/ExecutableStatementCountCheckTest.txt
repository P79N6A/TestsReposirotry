public class ExecutableStatementCountCheckTest extends AbstractModuleTestSupport {
  @Override protected String getPackageLocation(){
    return "com/puppycrawl/tools/checkstyle/checks/sizes/executablestatementcount";
  }
  @Test @SuppressWarnings("unchecked") public void testStatefulFieldsClearedOnBeginTree() throws Exception {
    final DetailAST ast=new DetailAST();
    ast.setType(TokenTypes.STATIC_INIT);
    final ExecutableStatementCountCheck check=new ExecutableStatementCountCheck();
    Assert.assertTrue("Stateful field is not cleared after beginTree",TestUtil.isStatefulFieldClearedDuringBeginTree(check,ast,"contextStack",contextStack -> ((Collection<Context>)contextStack).isEmpty()));
  }
  @Test public void testMaxZero() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    checkConfig.addAttribute("max","0");
    final String[] expected={"4:5: " + getCheckMessage(MSG_KEY,3,0),"7:17: " + getCheckMessage(MSG_KEY,1,0),"17:5: " + getCheckMessage(MSG_KEY,2,0),"27:5: " + getCheckMessage(MSG_KEY,1,0),"34:5: " + getCheckMessage(MSG_KEY,3,0),"48:5: " + getCheckMessage(MSG_KEY,2,0),"58:5: " + getCheckMessage(MSG_KEY,2,0),"67:5: " + getCheckMessage(MSG_KEY,2,0),"76:5: " + getCheckMessage(MSG_KEY,2,0),"79:13: " + getCheckMessage(MSG_KEY,1,0)};
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
  @Test public void testMethodDef() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("tokens","METHOD_DEF");
    final String[] expected={"4:5: " + getCheckMessage(MSG_KEY,3,0),"7:17: " + getCheckMessage(MSG_KEY,1,0),"17:5: " + getCheckMessage(MSG_KEY,2,0),"27:5: " + getCheckMessage(MSG_KEY,1,0),"34:5: " + getCheckMessage(MSG_KEY,3,0),"79:13: " + getCheckMessage(MSG_KEY,1,0)};
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
  @Test public void testCtorDef() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("tokens","CTOR_DEF");
    final String[] expected={"48:5: " + getCheckMessage(MSG_KEY,2,0),"76:5: " + getCheckMessage(MSG_KEY,2,0)};
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
  @Test public void testStaticInit() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("tokens","STATIC_INIT");
    final String[] expected={"58:5: " + getCheckMessage(MSG_KEY,2,0)};
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
  @Test public void testInstanceInit() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    checkConfig.addAttribute("max","0");
    checkConfig.addAttribute("tokens","INSTANCE_INIT");
    final String[] expected={"67:5: " + getCheckMessage(MSG_KEY,2,0)};
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
  @Test public void testVisitTokenWithWrongTokenType(){
    final ExecutableStatementCountCheck checkObj=new ExecutableStatementCountCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.ENUM,"ENUM"));
    try {
      checkObj.visitToken(ast);
      fail("exception expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Invalid exception message","ENUM[0x-1]",ex.getMessage());
    }
  }
  @Test public void testLeaveTokenWithWrongTokenType(){
    final ExecutableStatementCountCheck checkObj=new ExecutableStatementCountCheck();
    final DetailAST ast=new DetailAST();
    ast.initialize(new CommonHiddenStreamToken(TokenTypes.ENUM,"ENUM"));
    try {
      checkObj.leaveToken(ast);
      fail("exception expected");
    }
 catch (    IllegalStateException ex) {
      assertEquals("Invalid exception message","ENUM[0x-1]",ex.getMessage());
    }
  }
  @Test public void testDefaultConfiguration() throws Exception {
    final DefaultConfiguration checkConfig=createModuleConfig(ExecutableStatementCountCheck.class);
    createChecker(checkConfig);
    final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;
    verify(checkConfig,getPath("InputExecutableStatementCount.java"),expected);
  }
}
