static class ParcelableTest implements Parcelable {
  String author;
  String className;
  public String getAuthor(){
    return author;
  }
  public void setAuthor(  String author){
    this.author=author;
  }
  public String getClassName(){
    return className;
  }
  public void setClassName(  String className){
    this.className=className;
  }
  ParcelableTest(  String author,  String className){
    this.author=author;
    this.className=className;
  }
  ParcelableTest(  Parcel in){
    author=in.readString();
    className=in.readString();
  }
  @Override public void writeToParcel(  Parcel dest,  int flags){
    dest.writeString(author);
    dest.writeString(className);
  }
  @Override public int describeContents(){
    return 0;
  }
  public static final Creator<ParcelableTest> CREATOR=new Creator<ParcelableTest>(){
    @Override public ParcelableTest createFromParcel(    Parcel in){
      return new ParcelableTest(in);
    }
    @Override public ParcelableTest[] newArray(    int size){
      return new ParcelableTest[size];
    }
  }
;
  @Override public boolean equals(  Object obj){
    return obj instanceof ParcelableTest && ((ParcelableTest)obj).author.equals(author) && ((ParcelableTest)obj).className.equals(className);
  }
}
