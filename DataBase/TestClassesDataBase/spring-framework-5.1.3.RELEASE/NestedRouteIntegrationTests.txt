/** 
 * @author Arjen Poutsma
 */
public class NestedRouteIntegrationTests extends AbstractRouterFunctionIntegrationTests {
  private final RestTemplate restTemplate=new RestTemplate();
  @Override protected RouterFunction<?> routerFunction(){
    NestedHandler nestedHandler=new NestedHandler();
    return nest(path("/foo/"),route(GET("/bar"),nestedHandler::pattern).andRoute(GET("/baz"),nestedHandler::pattern)).andNest(GET("/{foo}"),route(GET("/bar"),nestedHandler::variables).and(nest(GET("/{bar}"),route(GET("/{baz}"),nestedHandler::variables)))).andRoute(path("/{qux}/quux").and(method(HttpMethod.GET)),nestedHandler::variables).andRoute(all(),nestedHandler::variables);
  }
  @Test public void bar(){
    ResponseEntity<String> result=restTemplate.getForEntity("http://localhost:" + port + "/foo/bar",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("/foo/bar",result.getBody());
  }
  @Test public void baz(){
    ResponseEntity<String> result=restTemplate.getForEntity("http://localhost:" + port + "/foo/baz",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("/foo/baz",result.getBody());
  }
  @Test public void variables(){
    ResponseEntity<String> result=restTemplate.getForEntity("http://localhost:" + port + "/1/2/3",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("/{foo}/{bar}/{baz}\n{foo=1, bar=2, baz=3}",result.getBody());
  }
  @Test public void parentVariables(){
    ResponseEntity<String> result=restTemplate.getForEntity("http://localhost:" + port + "/1/bar",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("/{foo}/bar\n{foo=1}",result.getBody());
  }
  @Test public void removeFailedNestedPathVariables(){
    ResponseEntity<String> result=restTemplate.getForEntity("http://localhost:" + port + "/qux/quux",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("/{qux}/quux\n{qux=qux}",result.getBody());
  }
  @Test public void removeFailedPathVariablesAnd(){
    ResponseEntity<String> result=restTemplate.postForEntity("http://localhost:" + port + "/qux/quux","",String.class);
    assertEquals(HttpStatus.OK,result.getStatusCode());
    assertEquals("{}",result.getBody());
  }
private static class NestedHandler {
    public Mono<ServerResponse> pattern(    ServerRequest request){
      String pattern=matchingPattern(request).getPatternString();
      return ServerResponse.ok().syncBody(pattern);
    }
    @SuppressWarnings("unchecked") public Mono<ServerResponse> variables(    ServerRequest request){
      Map<String,String> pathVariables=request.pathVariables();
      Map<String,String> attributePathVariables=(Map<String,String>)request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
      assertTrue((pathVariables.equals(attributePathVariables)) || (pathVariables.isEmpty() && (attributePathVariables == null)));
      PathPattern pathPattern=matchingPattern(request);
      String pattern=pathPattern != null ? pathPattern.getPatternString() : "";
      Flux<String> responseBody;
      if (!pattern.isEmpty()) {
        responseBody=Flux.just(pattern,"\n",pathVariables.toString());
      }
 else {
        responseBody=Flux.just(pathVariables.toString());
      }
      return ServerResponse.ok().body(responseBody,String.class);
    }
    @Nullable private PathPattern matchingPattern(    ServerRequest request){
      return (PathPattern)request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);
    }
  }
}
