@Aspect public static class Counter {
  int thisAsClassCounter;
  int thisAsInterfaceCounter;
  int targetAsClassCounter;
  int targetAsInterfaceCounter;
  int thisAsClassAndTargetAsClassCounter;
  int thisAsInterfaceAndTargetAsInterfaceCounter;
  int thisAsInterfaceAndTargetAsClassCounter;
  int atTargetClassAnnotationCounter;
  int atAnnotationMethodAnnotationCounter;
  public void reset(){
    thisAsClassCounter=0;
    thisAsInterfaceCounter=0;
    targetAsClassCounter=0;
    targetAsInterfaceCounter=0;
    thisAsClassAndTargetAsClassCounter=0;
    thisAsInterfaceAndTargetAsInterfaceCounter=0;
    thisAsInterfaceAndTargetAsClassCounter=0;
    atTargetClassAnnotationCounter=0;
    atAnnotationMethodAnnotationCounter=0;
  }
  @Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsClassCounter(){
    thisAsClassCounter++;
  }
  @Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementThisAsInterfaceCounter(){
    thisAsInterfaceCounter++;
  }
  @Before("target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementTargetAsClassCounter(){
    targetAsClassCounter++;
  }
  @Before("target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementTargetAsInterfaceCounter(){
    targetAsInterfaceCounter++;
  }
  @Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsClassAndTargetAsClassCounter(){
    thisAsClassAndTargetAsClassCounter++;
  }
  @Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementThisAsInterfaceAndTargetAsInterfaceCounter(){
    thisAsInterfaceAndTargetAsInterfaceCounter++;
  }
  @Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsInterfaceAndTargetAsClassCounter(){
    thisAsInterfaceAndTargetAsClassCounter++;
  }
  @Before("@target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestAnnotation)") public void incrementAtTargetClassAnnotationCounter(){
    atTargetClassAnnotationCounter++;
  }
  @Before("@annotation(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestAnnotation)") public void incrementAtAnnotationMethodAnnotationCounter(){
    atAnnotationMethodAnnotationCounter++;
  }
}
