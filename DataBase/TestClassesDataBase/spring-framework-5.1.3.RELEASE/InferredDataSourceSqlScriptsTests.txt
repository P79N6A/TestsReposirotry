/** 
 * Integration tests for  {@link Sql @Sql} that verify support for inferring{@link DataSource}s from  {@link PlatformTransactionManager}s.
 * @author Sam Brannen
 * @since 4.1
 * @see InferredDataSourceTransactionalSqlScriptsTests
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @DirtiesContext public class InferredDataSourceSqlScriptsTests {
  @Autowired private DataSource dataSource1;
  @Autowired private DataSource dataSource2;
  @Test @Sql(scripts="data-add-dogbert.sql",config=@SqlConfig(transactionManager="txMgr1")) public void database1(){
    assertInTransaction(false);
    assertUsers(new JdbcTemplate(dataSource1),"Dilbert","Dogbert");
  }
  @Test @Sql(scripts="data-add-catbert.sql",config=@SqlConfig(transactionManager="txMgr2")) public void database2(){
    assertInTransaction(false);
    assertUsers(new JdbcTemplate(dataSource2),"Dilbert","Catbert");
  }
  private void assertUsers(  JdbcTemplate jdbcTemplate,  String... users){
    List<String> expected=Arrays.asList(users);
    Collections.sort(expected);
    List<String> actual=jdbcTemplate.queryForList("select name from user",String.class);
    Collections.sort(actual);
    assertEquals("Users in database;",expected,actual);
  }
@Configuration static class Config {
    @Bean public PlatformTransactionManager txMgr1(){
      return new DataSourceTransactionManager(dataSource1());
    }
    @Bean public PlatformTransactionManager txMgr2(){
      return new DataSourceTransactionManager(dataSource2());
    }
    @Bean public DataSource dataSource1(){
      return new EmbeddedDatabaseBuilder().setName("database1").addScript("classpath:/org/springframework/test/context/jdbc/schema.sql").addScript("classpath:/org/springframework/test/context/jdbc/data.sql").build();
    }
    @Bean public DataSource dataSource2(){
      return new EmbeddedDatabaseBuilder().setName("database2").addScript("classpath:/org/springframework/test/context/jdbc/schema.sql").addScript("classpath:/org/springframework/test/context/jdbc/data.sql").build();
    }
  }
}
