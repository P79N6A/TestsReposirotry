/** 
 * This class is a copy of the JUnit-based  {@link ProgrammaticTxMgmtTests} classthat has been modified to run with TestNG.
 * @author Sam Brannen
 * @since 4.1
 */
@ContextConfiguration public class ProgrammaticTxMgmtTestNGTests extends AbstractTransactionalTestNGSpringContextTests {
  private String method;
  @Override public void run(  IHookCallBack callBack,  ITestResult testResult){
    this.method=testResult.getMethod().getMethodName();
    super.run(callBack,testResult);
  }
  @BeforeTransaction public void beforeTransaction(){
    deleteFromTables("user");
    executeSqlScript("classpath:/org/springframework/test/context/jdbc/data.sql",false);
  }
  @AfterTransaction public void afterTransaction(){
switch (method) {
case "commitTxAndStartNewTx":
case "commitTxButDoNotStartNewTx":
{
        assertUsers("Dogbert");
        break;
      }
case "rollbackTxAndStartNewTx":
case "rollbackTxButDoNotStartNewTx":
case "startTxWithExistingTransaction":
{
      assertUsers("Dilbert");
      break;
    }
case "rollbackTxAndStartNewTxWithDefaultCommitSemantics":
{
    assertUsers("Dilbert","Dogbert");
    break;
  }
default :
{
  fail("missing 'after transaction' assertion for test method: " + method);
}
}
}
@Test @Transactional(propagation=Propagation.NOT_SUPPORTED) public void isActiveWithNonExistentTransactionContext(){
assertFalse(TestTransaction.isActive());
}
@Test(expectedExceptions=IllegalStateException.class) @Transactional(propagation=Propagation.NOT_SUPPORTED) public void flagForRollbackWithNonExistentTransactionContext(){
TestTransaction.flagForRollback();
}
@Test(expectedExceptions=IllegalStateException.class) @Transactional(propagation=Propagation.NOT_SUPPORTED) public void flagForCommitWithNonExistentTransactionContext(){
TestTransaction.flagForCommit();
}
@Test(expectedExceptions=IllegalStateException.class) @Transactional(propagation=Propagation.NOT_SUPPORTED) public void isFlaggedForRollbackWithNonExistentTransactionContext(){
TestTransaction.isFlaggedForRollback();
}
@Test(expectedExceptions=IllegalStateException.class) @Transactional(propagation=Propagation.NOT_SUPPORTED) public void startTxWithNonExistentTransactionContext(){
TestTransaction.start();
}
@Test(expectedExceptions=IllegalStateException.class) public void startTxWithExistingTransaction(){
TestTransaction.start();
}
@Test(expectedExceptions=IllegalStateException.class) @Transactional(propagation=Propagation.NOT_SUPPORTED) public void endTxWithNonExistentTransactionContext(){
TestTransaction.end();
}
@Test public void commitTxAndStartNewTx(){
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
assertUsers("Dilbert");
deleteFromTables("user");
assertUsers();
TestTransaction.flagForCommit();
assertFalse(TestTransaction.isFlaggedForRollback());
TestTransaction.end();
assertInTransaction(false);
assertFalse(TestTransaction.isActive());
assertUsers();
executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql",false);
assertUsers("Dogbert");
TestTransaction.start();
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
}
@Test public void commitTxButDoNotStartNewTx(){
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
assertUsers("Dilbert");
deleteFromTables("user");
assertUsers();
TestTransaction.flagForCommit();
assertFalse(TestTransaction.isFlaggedForRollback());
TestTransaction.end();
assertFalse(TestTransaction.isActive());
assertInTransaction(false);
assertUsers();
executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql",false);
assertUsers("Dogbert");
}
@Test public void rollbackTxAndStartNewTx(){
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
assertUsers("Dilbert");
deleteFromTables("user");
assertUsers();
assertTrue(TestTransaction.isFlaggedForRollback());
TestTransaction.end();
assertFalse(TestTransaction.isActive());
assertInTransaction(false);
assertUsers("Dilbert");
TestTransaction.start();
assertInTransaction(true);
assertTrue(TestTransaction.isFlaggedForRollback());
assertTrue(TestTransaction.isActive());
executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql",false);
assertUsers("Dilbert","Dogbert");
}
@Test public void rollbackTxButDoNotStartNewTx(){
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
assertUsers("Dilbert");
deleteFromTables("user");
assertUsers();
assertTrue(TestTransaction.isFlaggedForRollback());
TestTransaction.end();
assertFalse(TestTransaction.isActive());
assertInTransaction(false);
assertUsers("Dilbert");
}
@Test @Commit public void rollbackTxAndStartNewTxWithDefaultCommitSemantics(){
assertInTransaction(true);
assertTrue(TestTransaction.isActive());
assertUsers("Dilbert");
deleteFromTables("user");
assertUsers();
TestTransaction.flagForRollback();
assertTrue(TestTransaction.isFlaggedForRollback());
TestTransaction.end();
assertFalse(TestTransaction.isActive());
assertInTransaction(false);
assertUsers("Dilbert");
TestTransaction.start();
assertInTransaction(true);
assertFalse(TestTransaction.isFlaggedForRollback());
assertTrue(TestTransaction.isActive());
executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql",false);
assertUsers("Dilbert","Dogbert");
}
private void assertUsers(String... users){
List<String> expected=Arrays.asList(users);
Collections.sort(expected);
List<String> actual=jdbcTemplate.queryForList("select name from user",String.class);
Collections.sort(actual);
assertEquals("Users in database;",expected,actual);
}
@Configuration static class Config {
@Bean public PlatformTransactionManager transactionManager(){
return new DataSourceTransactionManager(dataSource());
}
@Bean public DataSource dataSource(){
return new EmbeddedDatabaseBuilder().setName("programmatic-tx-mgmt-test-db").addScript("classpath:/org/springframework/test/context/jdbc/schema.sql").build();
}
}
}
