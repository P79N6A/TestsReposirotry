/** 
 * @author Sebastien Deleuze
 */
public class FormHttpMessageWriterTests extends AbstractLeakCheckingTestCase {
  private final FormHttpMessageWriter writer=new FormHttpMessageWriter();
  @Test public void canWrite(){
    assertTrue(this.writer.canWrite(ResolvableType.forClassWithGenerics(MultiValueMap.class,String.class,String.class),MediaType.APPLICATION_FORM_URLENCODED));
    assertTrue(this.writer.canWrite(ResolvableType.forInstance(new LinkedMultiValueMap<String,String>()),MediaType.APPLICATION_FORM_URLENCODED));
    assertFalse(this.writer.canWrite(ResolvableType.forClassWithGenerics(MultiValueMap.class,String.class,Object.class),null));
    assertFalse(this.writer.canWrite(ResolvableType.forClassWithGenerics(MultiValueMap.class,Object.class,String.class),null));
    assertFalse(this.writer.canWrite(ResolvableType.forClassWithGenerics(Map.class,String.class,String.class),MediaType.APPLICATION_FORM_URLENCODED));
    assertFalse(this.writer.canWrite(ResolvableType.forClassWithGenerics(MultiValueMap.class,String.class,String.class),MediaType.MULTIPART_FORM_DATA));
  }
  @Test public void writeForm(){
    MultiValueMap<String,String> body=new LinkedMultiValueMap<>();
    body.set("name 1","value 1");
    body.add("name 2","value 2+1");
    body.add("name 2","value 2+2");
    body.add("name 3",null);
    MockServerHttpResponse response=new MockServerHttpResponse(this.bufferFactory);
    this.writer.write(Mono.just(body),null,MediaType.APPLICATION_FORM_URLENCODED,response,null).block();
    String expected="name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3";
    StepVerifier.create(response.getBody()).consumeNextWith(stringConsumer(expected)).expectComplete().verify();
    HttpHeaders headers=response.getHeaders();
    assertEquals("application/x-www-form-urlencoded;charset=UTF-8",headers.getContentType().toString());
    assertEquals(expected.length(),headers.getContentLength());
  }
  private Consumer<DataBuffer> stringConsumer(  String expected){
    return dataBuffer -> {
      String value=DataBufferTestUtils.dumpString(dataBuffer,StandardCharsets.UTF_8);
      DataBufferUtils.release(dataBuffer);
      assertEquals(expected,value);
    }
;
  }
}
