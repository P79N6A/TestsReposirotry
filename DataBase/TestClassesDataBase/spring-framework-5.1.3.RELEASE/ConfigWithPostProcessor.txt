static class ConfigWithPostProcessor extends ConfigWithPrototypeBean {
  @Value("${myProp}") private String myProp;
  @Bean public POBPP beanPostProcessor(){
    return new POBPP(){
      String nameSuffix="-processed-" + myProp;
      public void setNameSuffix(      String nameSuffix){
        this.nameSuffix=nameSuffix;
      }
      @Override public Object postProcessBeforeInitialization(      Object bean,      String beanName){
        if (bean instanceof ITestBean) {
          ((ITestBean)bean).setName(((ITestBean)bean).getName() + nameSuffix);
        }
        return bean;
      }
      @Override public Object postProcessAfterInitialization(      Object bean,      String beanName){
        return bean;
      }
      public int getOrder(){
        return 0;
      }
    }
;
  }
  public BeanFactoryPostProcessor beanFactoryPostProcessor(){
    return new BeanFactoryPostProcessor(){
      @Override public void postProcessBeanFactory(      ConfigurableListableBeanFactory beanFactory){
        BeanDefinition bd=beanFactory.getBeanDefinition("beanPostProcessor");
        bd.getPropertyValues().addPropertyValue("nameSuffix","-processed-" + myProp);
      }
    }
;
  }
  @Bean public ITestBean listenerTestBean(){
    return new SpousyTestBean("listener");
  }
}
