@SuppressWarnings("unused") private static class GrowingList<E> extends AbstractList<E> {
  private List<E> list;
  public GrowingList(){
    this.list=new ArrayList<>();
  }
  public List<E> getWrappedList(){
    return list;
  }
  @Override public E get(  int index){
    if (index >= list.size()) {
      for (int i=list.size(); i < index; i++) {
        list.add(null);
      }
      list.add(null);
      return null;
    }
 else {
      return list.get(index);
    }
  }
  @Override public int size(){
    return list.size();
  }
  @Override public boolean add(  E o){
    return list.add(o);
  }
  @Override public void add(  int index,  E element){
    list.add(index,element);
  }
  @Override public boolean addAll(  int index,  Collection<? extends E> c){
    return list.addAll(index,c);
  }
  @Override public void clear(){
    list.clear();
  }
  @Override public int indexOf(  Object o){
    return list.indexOf(o);
  }
  @Override public Iterator<E> iterator(){
    return list.iterator();
  }
  @Override public int lastIndexOf(  Object o){
    return list.lastIndexOf(o);
  }
  @Override public ListIterator<E> listIterator(){
    return list.listIterator();
  }
  @Override public ListIterator<E> listIterator(  int index){
    return list.listIterator(index);
  }
  @Override public E remove(  int index){
    return list.remove(index);
  }
  @Override public E set(  int index,  E element){
    return list.set(index,element);
  }
}
