private static class StringToMyEnumBaseInterfaceConverterFactory implements ConverterFactory<String,MyEnumBaseInterface> {
  @SuppressWarnings({"unchecked","rawtypes"}) public <T extends MyEnumBaseInterface>Converter<String,T> getConverter(  Class<T> targetType){
    return new StringToMyEnumBaseInterfaceConverter(targetType);
  }
private static class StringToMyEnumBaseInterfaceConverter<T extends Enum<?> & MyEnumBaseInterface> implements Converter<String,T> {
    private final Class<T> enumType;
    public StringToMyEnumBaseInterfaceConverter(    Class<T> enumType){
      this.enumType=enumType;
    }
    public T convert(    String source){
      for (      T value : enumType.getEnumConstants()) {
        if (value.getBaseCode().equals(source)) {
          return value;
        }
      }
      return null;
    }
  }
}
