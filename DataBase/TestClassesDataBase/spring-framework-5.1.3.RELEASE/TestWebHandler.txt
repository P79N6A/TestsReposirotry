private static class TestWebHandler implements WebHandler {
  private AtomicInteger currentValue=new AtomicInteger();
  public int getSessionRequestCount(){
    return this.currentValue.get();
  }
  @Override public Mono<Void> handle(  ServerWebExchange exchange){
    if (exchange.getRequest().getQueryParams().containsKey("expire")) {
      return exchange.getSession().doOnNext(session -> {
      }
).then();
    }
 else     if (exchange.getRequest().getQueryParams().containsKey("changeId")) {
      return exchange.getSession().flatMap(session -> session.changeSessionId().doOnSuccess(aVoid -> updateSessionAttribute(session)));
    }
 else     if (exchange.getRequest().getQueryParams().containsKey("invalidate")) {
      return exchange.getSession().doOnNext(WebSession::invalidate).then();
    }
 else {
      return exchange.getSession().doOnSuccess(this::updateSessionAttribute).then();
    }
  }
  private void updateSessionAttribute(  WebSession session){
    int value=session.getAttributeOrDefault("counter",0);
    session.getAttributes().put("counter",++value);
    this.currentValue.set(value);
  }
}
