/** 
 * Integration tests for the @EnableCaching annotation.
 * @author Chris Beams
 * @since 3.1
 */
@SuppressWarnings("resource") public class EnableCachingIntegrationTests {
  @Test public void repositoryIsClassBasedCacheProxy(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(Config.class,ProxyTargetClassCachingConfig.class);
    ctx.refresh();
    assertCacheProxying(ctx);
    assertThat(AopUtils.isCglibProxy(ctx.getBean(FooRepository.class)),is(true));
  }
  @Test public void repositoryUsesAspectJAdviceMode(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(Config.class,AspectJCacheConfig.class);
    try {
      ctx.refresh();
    }
 catch (    Exception ex) {
      assertTrue(ex.getMessage().contains("AspectJCachingConfiguration"));
    }
  }
  private void assertCacheProxying(  AnnotationConfigApplicationContext ctx){
    FooRepository repo=ctx.getBean(FooRepository.class);
    boolean isCacheProxy=false;
    if (AopUtils.isAopProxy(repo)) {
      for (      Advisor advisor : ((Advised)repo).getAdvisors()) {
        if (advisor instanceof BeanFactoryCacheOperationSourceAdvisor) {
          isCacheProxy=true;
          break;
        }
      }
    }
    assertTrue("FooRepository is not a cache proxy",isCacheProxy);
  }
@Configuration @EnableCaching(proxyTargetClass=true) static class ProxyTargetClassCachingConfig {
    @Bean CacheManager mgr(){
      return new NoOpCacheManager();
    }
  }
@Configuration static class Config {
    @Bean FooRepository fooRepository(){
      return new DummyFooRepository();
    }
  }
@Configuration @EnableCaching(mode=AdviceMode.ASPECTJ) static class AspectJCacheConfig {
    @Bean CacheManager cacheManager(){
      return new NoOpCacheManager();
    }
  }
interface FooRepository {
    List<Object> findAll();
  }
@Repository static class DummyFooRepository implements FooRepository {
    @Override @Cacheable("primary") public List<Object> findAll(){
      return Collections.emptyList();
    }
  }
}
