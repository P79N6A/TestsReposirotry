/** 
 * Integration tests which demonstrate how to set up a  {@link MockMvc}instance in an  {@link BeforeEach @BeforeEach} method with the{@link SpringExtension} (registered via a custom{@link SpringJUnitWebConfig @SpringJUnitWebConfig} composed annotation).<p>To run these tests in an IDE that does not have built-in support for the JUnit Platform, simply run  {@link SpringJUnitJupiterTestSuite} as a JUnit 4 test.
 * @author Sam Brannen
 * @since 5.0
 * @see SpringExtension
 * @see SpringJUnitWebConfig
 * @see org.springframework.test.context.junit.jupiter.web.WebSpringExtensionTests
 */
@SpringJUnitWebConfig(WebConfig.class) class MultipleWebRequestsSpringExtensionTests {
  MockMvc mockMvc;
  @BeforeEach void setUpMockMvc(  WebApplicationContext wac){
    this.mockMvc=webAppContextSetup(wac).alwaysExpect(status().isOk()).alwaysExpect(content().contentTypeCompatibleWith(APPLICATION_JSON)).build();
  }
  @Test void getPerson42() throws Exception {
    this.mockMvc.perform(get("/person/42").accept(MediaType.APPLICATION_JSON)).andExpect(jsonPath("$.name",is("Dilbert")));
  }
  @Test void getPerson99() throws Exception {
    this.mockMvc.perform(get("/person/99").accept(MediaType.APPLICATION_JSON)).andExpect(jsonPath("$.name",is("Wally")));
  }
}
