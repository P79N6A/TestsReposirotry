private static class TestTransactionSynchronization implements TransactionSynchronization {
  private DataSource dataSource;
  private int status;
  public boolean beforeCommitCalled;
  public boolean beforeCompletionCalled;
  public boolean afterCommitCalled;
  public boolean afterCompletionCalled;
  public Throwable afterCompletionException;
  public TestTransactionSynchronization(  DataSource dataSource,  int status){
    this.dataSource=dataSource;
    this.status=status;
  }
  @Override public void suspend(){
  }
  @Override public void resume(){
  }
  @Override public void flush(){
  }
  @Override public void beforeCommit(  boolean readOnly){
    if (this.status != TransactionSynchronization.STATUS_COMMITTED) {
      fail("Should never be called");
    }
    assertFalse(this.beforeCommitCalled);
    this.beforeCommitCalled=true;
  }
  @Override public void beforeCompletion(){
    assertFalse(this.beforeCompletionCalled);
    this.beforeCompletionCalled=true;
  }
  @Override public void afterCommit(){
    if (this.status != TransactionSynchronization.STATUS_COMMITTED) {
      fail("Should never be called");
    }
    assertFalse(this.afterCommitCalled);
    this.afterCommitCalled=true;
  }
  @Override public void afterCompletion(  int status){
    try {
      doAfterCompletion(status);
    }
 catch (    Throwable ex) {
      this.afterCompletionException=ex;
    }
  }
  protected void doAfterCompletion(  int status){
    assertFalse(this.afterCompletionCalled);
    this.afterCompletionCalled=true;
    assertTrue(status == this.status);
    assertTrue(TransactionSynchronizationManager.hasResource(this.dataSource));
  }
}
