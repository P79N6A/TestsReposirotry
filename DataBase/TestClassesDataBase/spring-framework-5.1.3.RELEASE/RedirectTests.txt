/** 
 * Redirect scenarios including saving and retrieving flash attributes.
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 */
public class RedirectTests {
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=standaloneSetup(new PersonController()).build();
  }
  @Test public void save() throws Exception {
    this.mockMvc.perform(post("/persons").param("name","Andy")).andExpect(status().isFound()).andExpect(redirectedUrl("/persons/Joe")).andExpect(model().size(1)).andExpect(model().attributeExists("name")).andExpect(flash().attributeCount(1)).andExpect(flash().attribute("message","success!"));
  }
  @Test public void saveSpecial() throws Exception {
    this.mockMvc.perform(post("/people").param("name","Andy")).andExpect(status().isFound()).andExpect(redirectedUrl("/persons/Joe")).andExpect(model().size(1)).andExpect(model().attributeExists("name")).andExpect(flash().attributeCount(1)).andExpect(flash().attribute("message","success!"));
  }
  @Test public void saveWithErrors() throws Exception {
    this.mockMvc.perform(post("/persons")).andExpect(status().isOk()).andExpect(forwardedUrl("persons/add")).andExpect(model().size(1)).andExpect(model().attributeExists("person")).andExpect(flash().attributeCount(0));
  }
  @Test public void saveSpecialWithErrors() throws Exception {
    this.mockMvc.perform(post("/people")).andExpect(status().isOk()).andExpect(forwardedUrl("persons/add")).andExpect(model().size(1)).andExpect(model().attributeExists("person")).andExpect(flash().attributeCount(0));
  }
  @Test public void getPerson() throws Exception {
    this.mockMvc.perform(get("/persons/Joe").flashAttr("message","success!")).andExpect(status().isOk()).andExpect(forwardedUrl("persons/index")).andExpect(model().size(2)).andExpect(model().attribute("person",new Person("Joe"))).andExpect(model().attribute("message","success!")).andExpect(flash().attributeCount(0));
  }
@Controller private static class PersonController {
    @GetMapping("/persons/{name}") public String getPerson(    @PathVariable String name,    Model model){
      model.addAttribute(new Person(name));
      return "persons/index";
    }
    @PostMapping public String save(    @Valid Person person,    Errors errors,    RedirectAttributes redirectAttrs){
      if (errors.hasErrors()) {
        return "persons/add";
      }
      redirectAttrs.addAttribute("name","Joe");
      redirectAttrs.addFlashAttribute("message","success!");
      return "redirect:/persons/{name}";
    }
    @PostMapping("/people") public Object saveSpecial(    @Valid Person person,    Errors errors,    RedirectAttributes redirectAttrs){
      if (errors.hasErrors()) {
        return "persons/add";
      }
      redirectAttrs.addAttribute("name","Joe");
      redirectAttrs.addFlashAttribute("message","success!");
      return new StringBuilder("redirect:").append("/persons").append("/{name}");
    }
  }
}
