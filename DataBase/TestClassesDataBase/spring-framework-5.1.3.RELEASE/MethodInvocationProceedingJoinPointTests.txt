/** 
 * @author Rod Johnson
 * @author Chris Beams
 * @author Ramnivas Laddad
 * @since 2.0
 */
public class MethodInvocationProceedingJoinPointTests {
  @Test public void testingBindingWithJoinPoint(){
    try {
      AbstractAspectJAdvice.currentJoinPoint();
      fail("Needs to be bound by interceptor action");
    }
 catch (    IllegalStateException ex) {
    }
  }
  @Test public void testingBindingWithProceedingJoinPoint(){
    try {
      AbstractAspectJAdvice.currentJoinPoint();
      fail("Needs to be bound by interceptor action");
    }
 catch (    IllegalStateException ex) {
    }
  }
  @Test public void testCanGetMethodSignatureFromJoinPoint(){
    final Object raw=new TestBean();
    final int newAge=23;
    ProxyFactory pf=new ProxyFactory(raw);
    pf.setExposeProxy(true);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvice(new MethodBeforeAdvice(){
      private int depth;
      @Override public void before(      Method method,      Object[] args,      @Nullable Object target) throws Throwable {
        JoinPoint jp=AbstractAspectJAdvice.currentJoinPoint();
        assertTrue("Method named in toString",jp.toString().contains(method.getName()));
        jp.toShortString();
        jp.toLongString();
        assertSame(target,AbstractAspectJAdvice.currentJoinPoint().getTarget());
        assertFalse(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getTarget()));
        ITestBean thisProxy=(ITestBean)AbstractAspectJAdvice.currentJoinPoint().getThis();
        assertTrue(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getThis()));
        assertNotSame(target,thisProxy);
        assertSame(thisProxy,AbstractAspectJAdvice.currentJoinPoint().getThis());
        if (depth++ == 0) {
          thisProxy.toString();
          thisProxy.setAge(newAge);
          assertEquals(newAge,thisProxy.getAge());
        }
        assertSame(AopContext.currentProxy(),thisProxy);
        assertSame(target,raw);
        assertSame(method.getName(),AbstractAspectJAdvice.currentJoinPoint().getSignature().getName());
        assertEquals(method.getModifiers(),AbstractAspectJAdvice.currentJoinPoint().getSignature().getModifiers());
        MethodSignature msig=(MethodSignature)AbstractAspectJAdvice.currentJoinPoint().getSignature();
        assertSame("Return same MethodSignature repeatedly",msig,AbstractAspectJAdvice.currentJoinPoint().getSignature());
        assertSame("Return same JoinPoint repeatedly",AbstractAspectJAdvice.currentJoinPoint(),AbstractAspectJAdvice.currentJoinPoint());
        assertEquals(method.getDeclaringClass(),msig.getDeclaringType());
        assertTrue(Arrays.equals(method.getParameterTypes(),msig.getParameterTypes()));
        assertEquals(method.getReturnType(),msig.getReturnType());
        assertTrue(Arrays.equals(method.getExceptionTypes(),msig.getExceptionTypes()));
        msig.toLongString();
        msig.toShortString();
      }
    }
);
    ITestBean itb=(ITestBean)pf.getProxy();
    assertEquals("Advice reentrantly set age",newAge,itb.getAge());
  }
  @Test public void testCanGetSourceLocationFromJoinPoint(){
    final Object raw=new TestBean();
    ProxyFactory pf=new ProxyFactory(raw);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvice(new MethodBeforeAdvice(){
      @Override public void before(      Method method,      Object[] args,      @Nullable Object target) throws Throwable {
        SourceLocation sloc=AbstractAspectJAdvice.currentJoinPoint().getSourceLocation();
        assertEquals("Same source location must be returned on subsequent requests",sloc,AbstractAspectJAdvice.currentJoinPoint().getSourceLocation());
        assertEquals(TestBean.class,sloc.getWithinType());
        try {
          sloc.getLine();
          fail("Can't get line number");
        }
 catch (        UnsupportedOperationException ex) {
        }
        try {
          sloc.getFileName();
          fail("Can't get file name");
        }
 catch (        UnsupportedOperationException ex) {
        }
      }
    }
);
    ITestBean itb=(ITestBean)pf.getProxy();
    itb.getAge();
  }
  @Test public void testCanGetStaticPartFromJoinPoint(){
    final Object raw=new TestBean();
    ProxyFactory pf=new ProxyFactory(raw);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvice(new MethodBeforeAdvice(){
      @Override public void before(      Method method,      Object[] args,      @Nullable Object target) throws Throwable {
        StaticPart staticPart=AbstractAspectJAdvice.currentJoinPoint().getStaticPart();
        assertEquals("Same static part must be returned on subsequent requests",staticPart,AbstractAspectJAdvice.currentJoinPoint().getStaticPart());
        assertEquals(ProceedingJoinPoint.METHOD_EXECUTION,staticPart.getKind());
        assertSame(AbstractAspectJAdvice.currentJoinPoint().getSignature(),staticPart.getSignature());
        assertEquals(AbstractAspectJAdvice.currentJoinPoint().getSourceLocation(),staticPart.getSourceLocation());
      }
    }
);
    ITestBean itb=(ITestBean)pf.getProxy();
    itb.getAge();
  }
  @Test public void toShortAndLongStringFormedCorrectly() throws Exception {
    final Object raw=new TestBean();
    ProxyFactory pf=new ProxyFactory(raw);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvice(new MethodBeforeAdvice(){
      @Override public void before(      Method method,      Object[] args,      @Nullable Object target) throws Throwable {
        JoinPoint.StaticPart aspectJVersionJp=Factory.makeEncSJP(method);
        JoinPoint jp=AbstractAspectJAdvice.currentJoinPoint();
        assertEquals(aspectJVersionJp.getSignature().toLongString(),jp.getSignature().toLongString());
        assertEquals(aspectJVersionJp.getSignature().toShortString(),jp.getSignature().toShortString());
        assertEquals(aspectJVersionJp.getSignature().toString(),jp.getSignature().toString());
        assertEquals(aspectJVersionJp.toLongString(),jp.toLongString());
        assertEquals(aspectJVersionJp.toShortString(),jp.toShortString());
        assertEquals(aspectJVersionJp.toString(),jp.toString());
      }
    }
);
    ITestBean itb=(ITestBean)pf.getProxy();
    itb.getAge();
    itb.setName("foo");
    itb.getDoctor();
    itb.getStringArray();
    itb.getSpouse();
    itb.setSpouse(new TestBean());
    try {
      itb.unreliableFileOperation();
    }
 catch (    IOException ex) {
    }
  }
}
