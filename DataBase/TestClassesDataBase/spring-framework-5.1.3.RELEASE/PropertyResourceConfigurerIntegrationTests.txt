/** 
 * Integration tests for  {@link PropertyResourceConfigurer} implementations requiringinteraction with an  {@link ApplicationContext}.  For example, a  {@link PropertyPlaceholderConfigurer}that contains ${..} tokens in its 'location' property requires being tested through an ApplicationContext as opposed to using only a BeanFactory during testing.
 * @author Chris Beams
 * @see org.springframework.beans.factory.config.PropertyResourceConfigurerTests
 */
public class PropertyResourceConfigurerIntegrationTests {
  @Test public void testPropertyPlaceholderConfigurerWithSystemPropertyInLocation(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("spouse",new RuntimeBeanReference("${ref}"));
    ac.registerSingleton("tb",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("location","${user.dir}/test");
    ac.registerSingleton("configurer",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanInitializationException");
    }
 catch (    BeanInitializationException ex) {
      assertTrue(ex.getCause() instanceof FileNotFoundException);
      String userDir=StringUtils.cleanPath(System.getProperty("user.dir"));
      if (userDir.startsWith("/")) {
        userDir=userDir.substring(1);
      }
      assertTrue(ex.getMessage().indexOf(userDir) != -1);
    }
  }
  @Test public void testPropertyPlaceholderConfigurerWithSystemPropertiesInLocation(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("spouse",new RuntimeBeanReference("${ref}"));
    ac.registerSingleton("tb",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("location","${user.dir}/test/${user.dir}");
    ac.registerSingleton("configurer",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanInitializationException");
    }
 catch (    BeanInitializationException ex) {
      assertTrue(ex.getCause() instanceof FileNotFoundException);
      String userDir=StringUtils.cleanPath(System.getProperty("user.dir"));
      if (userDir.startsWith("/")) {
        userDir=userDir.substring(1);
      }
      assertTrue(ex.getMessage().contains(userDir + "/test/" + userDir) || ex.getMessage().contains(userDir + "/test//" + userDir));
    }
  }
  @Test public void testPropertyPlaceholderConfigurerWithUnresolvableSystemPropertiesInLocation(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("spouse",new RuntimeBeanReference("${ref}"));
    ac.registerSingleton("tb",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("location","${myprop}/test/${myprop}");
    ac.registerSingleton("configurer",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanInitializationException");
    }
 catch (    BeanInitializationException ex) {
      assertTrue(ex.getMessage().contains("myprop"));
    }
  }
  @Test public void testPropertyPlaceholderConfigurerWithMultiLevelCircularReference(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("name","name${var}");
    ac.registerSingleton("tb1",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("properties","var=${m}var\nm=${var2}\nvar2=${var}");
    ac.registerSingleton("configurer1",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanDefinitionStoreException");
    }
 catch (    BeanDefinitionStoreException ex) {
    }
  }
  @Test public void testPropertyPlaceholderConfigurerWithNestedCircularReference(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("name","name${var}");
    ac.registerSingleton("tb1",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("properties","var=${m}var\nm=${var2}\nvar2=${m}");
    ac.registerSingleton("configurer1",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanDefinitionStoreException");
    }
 catch (    BeanDefinitionStoreException ex) {
    }
  }
  @Test public void testPropertyPlaceholderConfigurerWithNestedUnresolvableReference(){
    StaticApplicationContext ac=new StaticApplicationContext();
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.add("name","name${var}");
    ac.registerSingleton("tb1",TestBean.class,pvs);
    pvs=new MutablePropertyValues();
    pvs.add("properties","var=${m}var\nm=${var2}\nvar2=${m2}");
    ac.registerSingleton("configurer1",PropertyPlaceholderConfigurer.class,pvs);
    try {
      ac.refresh();
      fail("Should have thrown BeanDefinitionStoreException");
    }
 catch (    BeanDefinitionStoreException ex) {
      ex.printStackTrace();
    }
  }
  @Ignore @Test public void testPropertyPlaceholderConfigurerWithAutowireByType(){
  }
}
