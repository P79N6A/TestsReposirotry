/** 
 * Mock object based tests for SimpleJdbcInsert.
 * @author Thomas Risberg
 */
public class SimpleJdbcInsertTests {
  private Connection connection;
  private DatabaseMetaData databaseMetaData;
  private DataSource dataSource;
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Before public void setUp() throws Exception {
    connection=mock(Connection.class);
    databaseMetaData=mock(DatabaseMetaData.class);
    dataSource=mock(DataSource.class);
    given(connection.getMetaData()).willReturn(databaseMetaData);
    given(dataSource.getConnection()).willReturn(connection);
  }
  @After public void verifyClosed() throws Exception {
    verify(connection).close();
  }
  @Test public void testNoSuchTable() throws Exception {
    ResultSet resultSet=mock(ResultSet.class);
    given(resultSet.next()).willReturn(false);
    given(databaseMetaData.getDatabaseProductName()).willReturn("MyDB");
    given(databaseMetaData.getDatabaseProductName()).willReturn("MyDB");
    given(databaseMetaData.getDatabaseProductVersion()).willReturn("1.0");
    given(databaseMetaData.getUserName()).willReturn("me");
    given(databaseMetaData.storesLowerCaseIdentifiers()).willReturn(true);
    given(databaseMetaData.getTables(null,null,"x",null)).willReturn(resultSet);
    SimpleJdbcInsert insert=new SimpleJdbcInsert(dataSource).withTableName("x");
    thrown.expect(InvalidDataAccessApiUsageException.class);
    try {
      insert.execute(new HashMap<>());
    }
  finally {
      verify(resultSet).close();
    }
  }
}
