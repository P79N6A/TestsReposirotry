/** 
 * @author Ramnivas Laddad
 * @author Juergen Hoeller
 * @author Oliver Gierke
 */
public class AnnotationTypeFilterTests {
  @Test public void testDirectAnnotationMatch() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeComponent";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(InheritedAnnotation.class);
    assertTrue(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Test public void testInheritedAnnotationFromInterfaceDoesNotMatch() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(InheritedAnnotation.class);
    assertFalse(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Test public void testInheritedAnnotationFromBaseClassDoesMatch() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeSubclassOfSomeComponent";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(InheritedAnnotation.class);
    assertTrue(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Test public void testNonInheritedAnnotationDoesNotMatch() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeSubclassOfSomeClassMarkedWithNonInheritedAnnotation";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(NonInheritedAnnotation.class);
    assertFalse(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Test public void testNonAnnotatedClassDoesntMatch() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeNonCandidateClass";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(Component.class);
    assertFalse(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Test public void testMatchesInterfacesIfConfigured() throws Exception {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    String classUnderTest="org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface";
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(classUnderTest);
    AnnotationTypeFilter filter=new AnnotationTypeFilter(InheritedAnnotation.class,false,true);
    assertTrue(filter.match(metadataReader,metadataReaderFactory));
    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);
  }
  @Inherited private @interface InheritedAnnotation {}
@InheritedAnnotation private static class SomeComponent {
  }
@InheritedAnnotation private interface SomeComponentInterface {
  }
@SuppressWarnings("unused") private static class SomeClassWithSomeComponentInterface implements Cloneable, SomeComponentInterface {
  }
@SuppressWarnings("unused") private static class SomeSubclassOfSomeComponent extends SomeComponent {
  }
  private @interface NonInheritedAnnotation {}
@NonInheritedAnnotation private static class SomeClassMarkedWithNonInheritedAnnotation {
  }
@SuppressWarnings("unused") private static class SomeSubclassOfSomeClassMarkedWithNonInheritedAnnotation extends SomeClassMarkedWithNonInheritedAnnotation {
  }
@SuppressWarnings("unused") private static class SomeNonCandidateClass {
  }
}
