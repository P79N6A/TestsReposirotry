/** 
 * Tests integration between Environment and SecurityManagers. See SPR-9970.
 * @author Chris Beams
 */
public class EnvironmentSecurityManagerIntegrationTests {
  private SecurityManager originalSecurityManager;
  private Map<String,String> env;
  @Before public void setUp(){
    originalSecurityManager=System.getSecurityManager();
    env=StandardEnvironmentTests.getModifiableSystemEnvironment();
    env.put(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME,"p1");
  }
  @After public void tearDown(){
    env.remove(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME);
    System.setSecurityManager(originalSecurityManager);
  }
  @Test public void securityManagerDisallowsAccessToSystemEnvironmentButAllowsAccessToIndividualKeys(){
    SecurityManager securityManager=new SecurityManager(){
      @Override public void checkPermission(      Permission perm){
        if ("getenv.*".equals(perm.getName())) {
          throw new AccessControlException("Accessing the system environment is disallowed");
        }
      }
    }
;
    System.setSecurityManager(securityManager);
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    AnnotatedBeanDefinitionReader reader=new AnnotatedBeanDefinitionReader(bf);
    reader.register(C1.class);
    assertThat(bf.containsBean("c1"),is(true));
  }
  @Test public void securityManagerDisallowsAccessToSystemEnvironmentAndDisallowsAccessToIndividualKey(){
    SecurityManager securityManager=new SecurityManager(){
      @Override public void checkPermission(      Permission perm){
        if ("getenv.*".equals(perm.getName())) {
          throw new AccessControlException("Accessing the system environment is disallowed");
        }
        if (("getenv." + AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME).equals(perm.getName())) {
          throw new AccessControlException(format("Accessing system environment variable [%s] is disallowed",AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME));
        }
      }
    }
;
    System.setSecurityManager(securityManager);
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    AnnotatedBeanDefinitionReader reader=new AnnotatedBeanDefinitionReader(bf);
    reader.register(C1.class);
    assertThat(bf.containsBean("c1"),is(false));
  }
@Component("c1") @Profile("p1") static class C1 {
  }
}
