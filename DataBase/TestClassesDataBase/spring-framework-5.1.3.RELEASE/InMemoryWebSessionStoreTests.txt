/** 
 * Unit tests for  {@link InMemoryWebSessionStore}.
 * @author Rob Winch
 */
public class InMemoryWebSessionStoreTests {
  private InMemoryWebSessionStore store=new InMemoryWebSessionStore();
  @Test public void startsSessionExplicitly(){
    WebSession session=this.store.createWebSession().block();
    assertNotNull(session);
    session.start();
    assertTrue(session.isStarted());
  }
  @Test public void startsSessionImplicitly(){
    WebSession session=this.store.createWebSession().block();
    assertNotNull(session);
    session.start();
    session.getAttributes().put("foo","bar");
    assertTrue(session.isStarted());
  }
  @Test public void retrieveExpiredSession(){
    WebSession session=this.store.createWebSession().block();
    assertNotNull(session);
    session.getAttributes().put("foo","bar");
    session.save().block();
    String id=session.getId();
    WebSession retrieved=this.store.retrieveSession(id).block();
    assertNotNull(retrieved);
    assertSame(session,retrieved);
    this.store.setClock(Clock.offset(this.store.getClock(),Duration.ofMinutes(31)));
    WebSession retrievedAgain=this.store.retrieveSession(id).block();
    assertNull(retrievedAgain);
  }
  @Test public void lastAccessTimeIsUpdatedOnRetrieve(){
    WebSession session1=this.store.createWebSession().block();
    assertNotNull(session1);
    String id=session1.getId();
    Instant time1=session1.getLastAccessTime();
    session1.start();
    session1.save().block();
    this.store.setClock(Clock.offset(this.store.getClock(),Duration.ofSeconds(5)));
    WebSession session2=this.store.retrieveSession(id).block();
    assertNotNull(session2);
    assertSame(session1,session2);
    Instant time2=session2.getLastAccessTime();
    assertTrue(time1.isBefore(time2));
  }
  @Test public void sessionInvalidatedBeforeSave(){
    WebSession session1=this.store.createWebSession().block();
    assertNotNull(session1);
    String id=session1.getId();
    session1.start();
    session1.save().block();
    WebSession session2=this.store.retrieveSession(id).block();
    assertNotNull(session2);
    assertSame(session1,session2);
    WebSession session3=this.store.retrieveSession(id).block();
    assertNotNull(session3);
    assertSame(session1,session3);
    session3.invalidate().block();
    session2.save().block();
    WebSession session4=this.store.retrieveSession(id).block();
    assertNull(session4);
  }
  @Test public void expirationCheckPeriod(){
    DirectFieldAccessor accessor=new DirectFieldAccessor(this.store);
    Map<?,?> sessions=(Map<?,?>)accessor.getPropertyValue("sessions");
    assertNotNull(sessions);
    IntStream.range(0,100).forEach(i -> insertSession());
    assertEquals(100,sessions.size());
    accessor.setPropertyValue("clock",Clock.offset(this.store.getClock(),Duration.ofMinutes(31)));
    assertEquals(100,sessions.size());
    insertSession();
    assertEquals(1,sessions.size());
  }
  @Test public void maxSessions(){
    IntStream.range(0,10000).forEach(i -> insertSession());
    try {
      insertSession();
      fail();
    }
 catch (    IllegalStateException ex) {
      assertEquals("Max sessions limit reached: 10000",ex.getMessage());
    }
  }
  private WebSession insertSession(){
    WebSession session=this.store.createWebSession().block();
    assertNotNull(session);
    session.start();
    session.save().block();
    return session;
  }
}
