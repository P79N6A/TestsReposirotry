/** 
 * @author Adrian Colyer
 * @author Chris Beams
 */
public class DeclarationOrderIndependenceTests {
  private TopsyTurvyAspect aspect;
  private TopsyTurvyTarget target;
  @Before public void setup(){
    ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml",getClass());
    aspect=(TopsyTurvyAspect)ctx.getBean("topsyTurvyAspect");
    target=(TopsyTurvyTarget)ctx.getBean("topsyTurvyTarget");
  }
  @Test public void testTargetIsSerializable(){
    assertTrue("target bean is serializable",this.target instanceof Serializable);
  }
  @Test public void testTargetIsBeanNameAware(){
    assertTrue("target bean is bean name aware",this.target instanceof BeanNameAware);
  }
  @Test public void testBeforeAdviceFiringOk(){
    AspectCollaborator collab=new AspectCollaborator();
    this.aspect.setCollaborator(collab);
    this.target.doSomething();
    assertTrue("before advice fired",collab.beforeFired);
  }
  @Test public void testAroundAdviceFiringOk(){
    AspectCollaborator collab=new AspectCollaborator();
    this.aspect.setCollaborator(collab);
    this.target.getX();
    assertTrue("around advice fired",collab.aroundFired);
  }
  @Test public void testAfterReturningFiringOk(){
    AspectCollaborator collab=new AspectCollaborator();
    this.aspect.setCollaborator(collab);
    this.target.getX();
    assertTrue("after returning advice fired",collab.afterReturningFired);
  }
  /** 
 * public visibility is required 
 */
public static class BeanNameAwareMixin implements BeanNameAware {
    @SuppressWarnings("unused") private String beanName;
    @Override public void setBeanName(    String name){
      this.beanName=name;
    }
  }
  /** 
 * public visibility is required 
 */
@SuppressWarnings("serial") public static class SerializableMixin implements Serializable {
  }
}
