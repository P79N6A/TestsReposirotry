/** 
 * @author Rob Harrop
 * @author Adrian Colyer
 */
public class TxNamespaceHandlerTests {
  private ApplicationContext context;
  private Method getAgeMethod;
  private Method setAgeMethod;
  @Before public void setup() throws Exception {
    this.context=new ClassPathXmlApplicationContext("txNamespaceHandlerTests.xml",getClass());
    this.getAgeMethod=ITestBean.class.getMethod("getAge");
    this.setAgeMethod=ITestBean.class.getMethod("setAge",int.class);
  }
  @Test public void isProxy(){
    ITestBean bean=getTestBean();
    assertTrue("testBean is not a proxy",AopUtils.isAopProxy(bean));
  }
  @Test public void invokeTransactional(){
    ITestBean testBean=getTestBean();
    CallCountingTransactionManager ptm=(CallCountingTransactionManager)context.getBean("transactionManager");
    assertEquals("Should not have any started transactions",0,ptm.begun);
    testBean.getName();
    assertTrue(ptm.lastDefinition.isReadOnly());
    assertEquals("Should have 1 started transaction",1,ptm.begun);
    assertEquals("Should have 1 committed transaction",1,ptm.commits);
    testBean.haveBirthday();
    assertEquals("Should not have started another transaction",1,ptm.begun);
    try {
      testBean.exceptional(new IllegalArgumentException("foo"));
      fail("Should NEVER get here");
    }
 catch (    Throwable throwable) {
      assertEquals("Should have another started transaction",2,ptm.begun);
      assertEquals("Should have 1 rolled back transaction",1,ptm.rollbacks);
    }
  }
  @Test public void rollbackRules(){
    TransactionInterceptor txInterceptor=(TransactionInterceptor)context.getBean("txRollbackAdvice");
    TransactionAttributeSource txAttrSource=txInterceptor.getTransactionAttributeSource();
    TransactionAttribute txAttr=txAttrSource.getTransactionAttribute(getAgeMethod,ITestBean.class);
    assertTrue("should be configured to rollback on Exception",txAttr.rollbackOn(new Exception()));
    txAttr=txAttrSource.getTransactionAttribute(setAgeMethod,ITestBean.class);
    assertFalse("should not rollback on RuntimeException",txAttr.rollbackOn(new RuntimeException()));
  }
  private ITestBean getTestBean(){
    return (ITestBean)context.getBean("testBean");
  }
}
