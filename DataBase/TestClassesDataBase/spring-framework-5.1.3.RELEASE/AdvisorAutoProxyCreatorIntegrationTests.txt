/** 
 * Integration tests for auto proxy creation by advisor recognition working in conjunction with transaction management resources.
 * @see org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorTests
 * @author Rod Johnson
 * @author Chris Beams
 */
public class AdvisorAutoProxyCreatorIntegrationTests {
  private static final Class<?> CLASS=AdvisorAutoProxyCreatorIntegrationTests.class;
  private static final String CLASSNAME=CLASS.getSimpleName();
  private static final String DEFAULT_CONTEXT=CLASSNAME + "-context.xml";
  private static final String ADVISOR_APC_BEAN_NAME="aapc";
  private static final String TXMANAGER_BEAN_NAME="txManager";
  /** 
 * Return a bean factory with attributes and EnterpriseServices configured.
 */
  protected BeanFactory getBeanFactory() throws IOException {
    return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT,CLASS);
  }
  @Test public void testDefaultExclusionPrefix() throws Exception {
    DefaultAdvisorAutoProxyCreator aapc=(DefaultAdvisorAutoProxyCreator)getBeanFactory().getBean(ADVISOR_APC_BEAN_NAME);
    assertEquals(ADVISOR_APC_BEAN_NAME + DefaultAdvisorAutoProxyCreator.SEPARATOR,aapc.getAdvisorBeanNamePrefix());
    assertFalse(aapc.isUsePrefix());
  }
  /** 
 * If no pointcuts match (no attrs) there should be proxying.
 */
  @Test public void testNoProxy() throws Exception {
    BeanFactory bf=getBeanFactory();
    Object o=bf.getBean("noSetters");
    assertFalse(AopUtils.isAopProxy(o));
  }
  @Test public void testTxIsProxied() throws Exception {
    BeanFactory bf=getBeanFactory();
    ITestBean test=(ITestBean)bf.getBean("test");
    assertTrue(AopUtils.isAopProxy(test));
  }
  @Test public void testRegexpApplied() throws Exception {
    BeanFactory bf=getBeanFactory();
    ITestBean test=(ITestBean)bf.getBean("test");
    MethodCounter counter=(MethodCounter)bf.getBean("countingAdvice");
    assertEquals(0,counter.getCalls());
    test.getName();
    assertEquals(1,counter.getCalls());
  }
  @Test public void testTransactionAttributeOnMethod() throws Exception {
    BeanFactory bf=getBeanFactory();
    ITestBean test=(ITestBean)bf.getBean("test");
    CallCountingTransactionManager txMan=(CallCountingTransactionManager)bf.getBean(TXMANAGER_BEAN_NAME);
    OrderedTxCheckAdvisor txc=(OrderedTxCheckAdvisor)bf.getBean("orderedBeforeTransaction");
    assertEquals(0,txc.getCountingBeforeAdvice().getCalls());
    assertEquals(0,txMan.commits);
    assertEquals("Initial value was correct",4,test.getAge());
    int newAge=5;
    test.setAge(newAge);
    assertEquals(1,txc.getCountingBeforeAdvice().getCalls());
    assertEquals("New value set correctly",newAge,test.getAge());
    assertEquals("Transaction counts match",1,txMan.commits);
  }
  /** 
 * Should not roll back on servlet exception.
 */
  @Test public void testRollbackRulesOnMethodCauseRollback() throws Exception {
    BeanFactory bf=getBeanFactory();
    Rollback rb=(Rollback)bf.getBean("rollback");
    CallCountingTransactionManager txMan=(CallCountingTransactionManager)bf.getBean(TXMANAGER_BEAN_NAME);
    OrderedTxCheckAdvisor txc=(OrderedTxCheckAdvisor)bf.getBean("orderedBeforeTransaction");
    assertEquals(0,txc.getCountingBeforeAdvice().getCalls());
    assertEquals(0,txMan.commits);
    rb.echoException(null);
    assertEquals(0,txc.getCountingBeforeAdvice().getCalls());
    assertEquals("Transaction counts match",1,txMan.commits);
    assertEquals(0,txMan.rollbacks);
    Exception ex=new Exception();
    try {
      rb.echoException(ex);
    }
 catch (    Exception actual) {
      assertEquals(ex,actual);
    }
    assertEquals("Transaction counts match",1,txMan.rollbacks);
  }
  @Test public void testRollbackRulesOnMethodPreventRollback() throws Exception {
    BeanFactory bf=getBeanFactory();
    Rollback rb=(Rollback)bf.getBean("rollback");
    CallCountingTransactionManager txMan=(CallCountingTransactionManager)bf.getBean(TXMANAGER_BEAN_NAME);
    assertEquals(0,txMan.commits);
    try {
      rb.echoException(new ServletException());
    }
 catch (    ServletException ex) {
    }
    assertEquals("Transaction counts match",1,txMan.commits);
  }
  @Test public void testProgrammaticRollback() throws Exception {
    BeanFactory bf=getBeanFactory();
    Object bean=bf.getBean(TXMANAGER_BEAN_NAME);
    assertTrue(bean instanceof CallCountingTransactionManager);
    CallCountingTransactionManager txMan=(CallCountingTransactionManager)bf.getBean(TXMANAGER_BEAN_NAME);
    Rollback rb=(Rollback)bf.getBean("rollback");
    assertEquals(0,txMan.commits);
    rb.rollbackOnly(false);
    assertEquals("Transaction counts match",1,txMan.commits);
    assertEquals(0,txMan.rollbacks);
    rb.rollbackOnly(true);
    assertEquals(1,txMan.rollbacks);
  }
}
