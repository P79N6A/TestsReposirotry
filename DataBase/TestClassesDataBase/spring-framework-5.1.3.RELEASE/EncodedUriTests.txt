/** 
 * Tests for SPR-11441 (MockMvc accepts an already encoded URI).
 * @author Sebastien Deleuze
 */
@RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration public class EncodedUriTests {
  @Autowired private WebApplicationContext wac;
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=webAppContextSetup(this.wac).build();
  }
  @Test public void test() throws Exception {
    String id="a/b";
    URI url=UriComponentsBuilder.fromUriString("/circuit").pathSegment(id).build().encode().toUri();
    ResultActions result=mockMvc.perform(get(url));
    result.andExpect(status().isOk()).andExpect(model().attribute("receivedId",is(id)));
  }
@Configuration @EnableWebMvc static class WebConfig implements WebMvcConfigurer {
    @Bean public MyController myController(){
      return new MyController();
    }
    @Bean public HandlerMappingConfigurer myHandlerMappingConfigurer(){
      return new HandlerMappingConfigurer();
    }
    @Override public void configureViewResolvers(    ViewResolverRegistry registry){
      registry.jsp("","");
    }
  }
@Controller private static class MyController {
    @RequestMapping(value="/circuit/{id}",method=RequestMethod.GET) public String getCircuit(    @PathVariable String id,    Model model){
      model.addAttribute("receivedId",id);
      return "result";
    }
  }
@Component private static class HandlerMappingConfigurer implements BeanPostProcessor, PriorityOrdered {
    public Object postProcessBeforeInitialization(    Object bean,    String beanName) throws BeansException {
      if (bean instanceof RequestMappingHandlerMapping) {
        RequestMappingHandlerMapping requestMappingHandlerMapping=(RequestMappingHandlerMapping)bean;
        requestMappingHandlerMapping.setUrlDecode(false);
      }
      return bean;
    }
    public Object postProcessAfterInitialization(    Object bean,    String beanName) throws BeansException {
      return bean;
    }
    public int getOrder(){
      return PriorityOrdered.HIGHEST_PRECEDENCE;
    }
  }
}
