/** 
 * @author Rod Johnson
 * @author Phillip Webb
 */
@SuppressWarnings("rawtypes") public class LocalEntityManagerFactoryBeanTests extends AbstractEntityManagerFactoryBeanTests {
  private static String actualName;
  private static Map actualProps;
  @After public void verifyClosed() throws Exception {
    verify(mockEmf).close();
  }
  @Test public void testValidUsageWithDefaultProperties() throws Exception {
    testValidUsage(null);
  }
  @Test public void testValidUsageWithExplicitProperties() throws Exception {
    testValidUsage(new Properties());
  }
  protected void testValidUsage(  Properties props) throws Exception {
    actualName=null;
    actualProps=null;
    LocalEntityManagerFactoryBean lemfb=new LocalEntityManagerFactoryBean();
    String entityManagerName="call me Bob";
    lemfb.setPersistenceUnitName(entityManagerName);
    lemfb.setPersistenceProviderClass(DummyPersistenceProvider.class);
    if (props != null) {
      lemfb.setJpaProperties(props);
    }
    lemfb.afterPropertiesSet();
    assertSame(entityManagerName,actualName);
    if (props != null) {
      assertEquals(props,actualProps);
    }
    checkInvariants(lemfb);
    lemfb.destroy();
  }
protected static class DummyPersistenceProvider implements PersistenceProvider {
    @Override public EntityManagerFactory createContainerEntityManagerFactory(    PersistenceUnitInfo pui,    Map map){
      throw new UnsupportedOperationException();
    }
    @Override public EntityManagerFactory createEntityManagerFactory(    String emfName,    Map properties){
      actualName=emfName;
      actualProps=properties;
      return mockEmf;
    }
    @Override public ProviderUtil getProviderUtil(){
      throw new UnsupportedOperationException();
    }
    public void generateSchema(    PersistenceUnitInfo persistenceUnitInfo,    Map map){
      throw new UnsupportedOperationException();
    }
    public boolean generateSchema(    String persistenceUnitName,    Map map){
      throw new UnsupportedOperationException();
    }
  }
}
