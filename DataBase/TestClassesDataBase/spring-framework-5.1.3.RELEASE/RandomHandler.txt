private class RandomHandler implements HttpHandler {
  public static final int CHUNKS=16;
  @Override public Mono<Void> handle(  ServerHttpRequest request,  ServerHttpResponse response){
    Mono<Integer> requestSizeMono=request.getBody().reduce(0,(integer,dataBuffer) -> integer + dataBuffer.readableByteCount()).doOnSuccessOrError((size,throwable) -> {
      assertNull(throwable);
      assertEquals(REQUEST_SIZE,(long)size);
    }
);
    response.getHeaders().setContentLength(RESPONSE_SIZE);
    return requestSizeMono.then(response.writeWith(multipleChunks()));
  }
  private Publisher<DataBuffer> multipleChunks(){
    int chunkSize=RESPONSE_SIZE / CHUNKS;
    return Flux.range(1,CHUNKS).map(integer -> randomBuffer(chunkSize));
  }
  private DataBuffer randomBuffer(  int size){
    byte[] bytes=new byte[size];
    rnd.nextBytes(bytes);
    DataBuffer buffer=dataBufferFactory.allocateBuffer(size);
    buffer.write(bytes);
    return buffer;
  }
}
