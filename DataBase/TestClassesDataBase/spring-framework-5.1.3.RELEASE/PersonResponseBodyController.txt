@RestController @RequestMapping("/person-response") @SuppressWarnings("unused") private static class PersonResponseBodyController {
  @GetMapping("/person") public Person getPerson(){
    return new Person("Robert");
  }
  @GetMapping("/completable-future") public CompletableFuture<Person> getCompletableFuture(){
    return CompletableFuture.completedFuture(new Person("Robert"));
  }
  @GetMapping("/mono") public Mono<Person> getMono(){
    return Mono.just(new Person("Robert"));
  }
  @GetMapping("/mono-empty") public Mono<Person> getMonoEmpty(){
    return Mono.empty();
  }
  @GetMapping("/mono-declared-as-object") public Object getMonoDeclaredAsObject(){
    return Mono.just(new Person("Robert"));
  }
  @GetMapping("/single") public Single<Person> getSingle(){
    return Single.just(new Person("Robert"));
  }
  @GetMapping("/mono-response-entity") public ResponseEntity<Mono<Person>> getMonoResponseEntity(){
    Mono<Person> body=Mono.just(new Person("Robert"));
    return ResponseEntity.ok(body);
  }
  @GetMapping("/mono-response-entity-xml") public ResponseEntity<Mono<Person>> getMonoResponseEntityXml(){
    Mono<Person> body=Mono.just(new Person("Robert"));
    return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(body);
  }
  @GetMapping("/list") public List<Person> getList(){
    return asList(new Person("Robert"),new Person("Marie"));
  }
  @GetMapping("/publisher") public Publisher<Person> getPublisher(){
    return Flux.just(new Person("Robert"),new Person("Marie"));
  }
  @GetMapping("/flux") public Flux<Person> getFlux(){
    return Flux.just(new Person("Robert"),new Person("Marie"));
  }
  @GetMapping("/observable") public Observable<Person> getObservable(){
    return Observable.just(new Person("Robert"),new Person("Marie"));
  }
}
