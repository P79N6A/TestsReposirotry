/** 
 * Unit tests for expressions accessing beans and factory beans.
 * @author Andy Clement
 */
public class FactoryBeanAccessTests {
  @Test public void factoryBeanAccess(){
    StandardEvaluationContext context=new StandardEvaluationContext();
    context.setBeanResolver(new SimpleBeanResolver());
    Expression expr=new SpelExpressionParser().parseRaw("@car.colour");
    assertEquals("red",expr.getValue(context));
    expr=new SpelExpressionParser().parseRaw("&car.class.name");
    assertEquals(CarFactoryBean.class.getName(),expr.getValue(context));
    expr=new SpelExpressionParser().parseRaw("@boat.colour");
    assertEquals("blue",expr.getValue(context));
    expr=new SpelExpressionParser().parseRaw("&boat.class.name");
    try {
      assertEquals(Boat.class.getName(),expr.getValue(context));
      fail("Expected BeanIsNotAFactoryException");
    }
 catch (    BeanIsNotAFactoryException binafe) {
    }
    try {
      expr=new SpelExpressionParser().parseRaw("@truck");
      assertEquals("red",expr.getValue(context));
      fail("Expected NoSuchBeanDefinitionException");
    }
 catch (    NoSuchBeanDefinitionException nsbde) {
    }
    try {
      expr=new SpelExpressionParser().parseRaw("&truck");
      assertEquals(CarFactoryBean.class.getName(),expr.getValue(context));
      fail("Expected NoSuchBeanDefinitionException");
    }
 catch (    NoSuchBeanDefinitionException nsbde) {
    }
  }
static class SimpleBeanResolver implements org.springframework.expression.BeanResolver {
static class Car {
      public String getColour(){
        return "red";
      }
    }
static class CarFactoryBean implements FactoryBean<Car> {
      public Car getObject(){
        return new Car();
      }
      public Class<Car> getObjectType(){
        return Car.class;
      }
      public boolean isSingleton(){
        return false;
      }
    }
static class Boat {
      public String getColour(){
        return "blue";
      }
    }
    StaticApplicationContext ac=new StaticApplicationContext();
    public SimpleBeanResolver(){
      ac.registerSingleton("car",CarFactoryBean.class);
      ac.registerSingleton("boat",Boat.class);
    }
    @Override public Object resolve(    EvaluationContext context,    String beanName) throws AccessException {
      return ac.getBean(beanName);
    }
  }
}
