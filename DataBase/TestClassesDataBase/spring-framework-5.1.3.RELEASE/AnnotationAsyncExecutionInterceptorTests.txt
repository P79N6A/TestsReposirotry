/** 
 * Unit tests for  {@link AnnotationAsyncExecutionInterceptor}.
 * @author Chris Beams
 * @since 3.1.2
 */
public class AnnotationAsyncExecutionInterceptorTests {
  @Test @SuppressWarnings("unused") public void testGetExecutorQualifier() throws SecurityException, NoSuchMethodException {
    AnnotationAsyncExecutionInterceptor i=new AnnotationAsyncExecutionInterceptor(null);
{
class C {
        @Async("qMethod") void m(){
        }
      }
      assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMethod"));
    }
{
@Async("qClass") class C {
        void m(){
        }
      }
      assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qClass"));
    }
{
@Async("qClass") class C {
        @Async("qMethod") void m(){
        }
      }
      assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMethod"));
    }
{
@Async("qClass") class C {
        @Async void m(){
        }
      }
      assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is(""));
    }
{
@MyAsync class C {
        void m(){
        }
      }
      assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMeta"));
    }
  }
  @Async("qMeta") @Retention(RetentionPolicy.RUNTIME) @interface MyAsync {}
}
