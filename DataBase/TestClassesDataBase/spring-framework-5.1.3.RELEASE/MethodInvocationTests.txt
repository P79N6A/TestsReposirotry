/** 
 * @author Rod Johnson
 * @author Chris Beams
 * @since 14.03.2003
 */
public class MethodInvocationTests {
  @Test public void testValidInvocation() throws Throwable {
    Method m=Object.class.getMethod("hashCode");
    Object proxy=new Object();
    final Object returnValue=new Object();
    List<Object> is=new LinkedList<>();
    is.add(new MethodInterceptor(){
      @Override public Object invoke(      MethodInvocation invocation) throws Throwable {
        return returnValue;
      }
    }
);
    ReflectiveMethodInvocation invocation=new ReflectiveMethodInvocation(proxy,null,m,null,null,is);
    Object rv=invocation.proceed();
    assertTrue("correct response",rv == returnValue);
  }
  /** 
 * toString on target can cause failure.
 */
  @Test public void testToStringDoesntHitTarget() throws Throwable {
    Object target=new TestBean(){
      @Override public String toString(){
        throw new UnsupportedOperationException("toString");
      }
    }
;
    List<Object> is=new LinkedList<>();
    Method m=Object.class.getMethod("hashCode");
    Object proxy=new Object();
    ReflectiveMethodInvocation invocation=new ReflectiveMethodInvocation(proxy,target,m,null,null,is);
    invocation.toString();
  }
}
