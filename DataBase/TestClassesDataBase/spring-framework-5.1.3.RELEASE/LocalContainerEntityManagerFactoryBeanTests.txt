/** 
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Phillip Webb
 */
@SuppressWarnings("rawtypes") public class LocalContainerEntityManagerFactoryBeanTests extends AbstractEntityManagerFactoryBeanTests {
  private static Map actualProps;
  private static PersistenceUnitInfo actualPui;
  @Test public void testValidPersistenceUnit() throws Exception {
    parseValidPersistenceUnit();
  }
  @Test public void testExceptionTranslationWithNoDialect() throws Exception {
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    cefb.getObject();
    assertNull("No dialect set",cefb.getJpaDialect());
    RuntimeException in1=new RuntimeException("in1");
    PersistenceException in2=new PersistenceException();
    assertNull("No translation here",cefb.translateExceptionIfPossible(in1));
    DataAccessException dex=cefb.translateExceptionIfPossible(in2);
    assertNotNull(dex);
    assertSame(in2,dex.getCause());
  }
  @Test public void testEntityManagerFactoryIsProxied() throws Exception {
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    EntityManagerFactory emf=cefb.getObject();
    assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
    assertNotSame("EMF must be proxied",mockEmf,emf);
    assertTrue(emf.equals(emf));
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    bf.setSerializationId("emf-bf");
    bf.registerSingleton("emf",cefb);
    cefb.setBeanFactory(bf);
    cefb.setBeanName("emf");
    assertNotNull(SerializationTestUtils.serializeAndDeserialize(emf));
  }
  @Test public void testApplicationManagedEntityManagerWithoutTransaction() throws Exception {
    Object testEntity=new Object();
    EntityManager mockEm=mock(EntityManager.class);
    given(mockEmf.createEntityManager()).willReturn(mockEm);
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    EntityManagerFactory emf=cefb.getObject();
    assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
    assertNotSame("EMF must be proxied",mockEmf,emf);
    EntityManager em=emf.createEntityManager();
    assertFalse(em.contains(testEntity));
    cefb.destroy();
    verify(mockEmf).close();
  }
  @Test public void testApplicationManagedEntityManagerWithTransaction() throws Exception {
    Object testEntity=new Object();
    EntityTransaction mockTx=mock(EntityTransaction.class);
    EntityManager sharedEm=mock(EntityManager.class);
    given(sharedEm.getTransaction()).willReturn(new NoOpEntityTransaction());
    EntityManager mockEm=mock(EntityManager.class);
    given(mockEm.getTransaction()).willReturn(mockTx);
    given(mockEmf.createEntityManager()).willReturn(sharedEm,mockEm);
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    JpaTransactionManager jpatm=new JpaTransactionManager();
    jpatm.setEntityManagerFactory(cefb.getObject());
    TransactionStatus txStatus=jpatm.getTransaction(new DefaultTransactionAttribute());
    EntityManagerFactory emf=cefb.getObject();
    assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
    assertNotSame("EMF must be proxied",mockEmf,emf);
    EntityManager em=emf.createEntityManager();
    em.joinTransaction();
    assertFalse(em.contains(testEntity));
    jpatm.commit(txStatus);
    cefb.destroy();
    verify(mockTx).begin();
    verify(mockTx).commit();
    verify(mockEm).contains(testEntity);
    verify(mockEmf).close();
  }
  @Test public void testApplicationManagedEntityManagerWithTransactionAndCommitException() throws Exception {
    Object testEntity=new Object();
    EntityTransaction mockTx=mock(EntityTransaction.class);
    willThrow(new OptimisticLockException()).given(mockTx).commit();
    EntityManager sharedEm=mock(EntityManager.class);
    given(sharedEm.getTransaction()).willReturn(new NoOpEntityTransaction());
    EntityManager mockEm=mock(EntityManager.class);
    given(mockEm.getTransaction()).willReturn(mockTx);
    given(mockEmf.createEntityManager()).willReturn(sharedEm,mockEm);
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    JpaTransactionManager jpatm=new JpaTransactionManager();
    jpatm.setEntityManagerFactory(cefb.getObject());
    TransactionStatus txStatus=jpatm.getTransaction(new DefaultTransactionAttribute());
    EntityManagerFactory emf=cefb.getObject();
    assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
    assertNotSame("EMF must be proxied",mockEmf,emf);
    EntityManager em=emf.createEntityManager();
    em.joinTransaction();
    assertFalse(em.contains(testEntity));
    try {
      jpatm.commit(txStatus);
      fail("Should have thrown OptimisticLockingFailureException");
    }
 catch (    OptimisticLockingFailureException ex) {
    }
    cefb.destroy();
    verify(mockTx).begin();
    verify(mockEm).contains(testEntity);
    verify(mockEmf).close();
  }
  @Test public void testApplicationManagedEntityManagerWithJtaTransaction() throws Exception {
    Object testEntity=new Object();
    EntityManager sharedEm=mock(EntityManager.class);
    given(sharedEm.getTransaction()).willReturn(new NoOpEntityTransaction());
    EntityManager mockEm=mock(EntityManager.class);
    given(mockEmf.createEntityManager()).willReturn(sharedEm,mockEm);
    LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
    MutablePersistenceUnitInfo pui=((MutablePersistenceUnitInfo)cefb.getPersistenceUnitInfo());
    pui.setTransactionType(PersistenceUnitTransactionType.JTA);
    JpaTransactionManager jpatm=new JpaTransactionManager();
    jpatm.setEntityManagerFactory(cefb.getObject());
    TransactionStatus txStatus=jpatm.getTransaction(new DefaultTransactionAttribute());
    EntityManagerFactory emf=cefb.getObject();
    assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
    assertNotSame("EMF must be proxied",mockEmf,emf);
    EntityManager em=emf.createEntityManager();
    em.joinTransaction();
    assertFalse(em.contains(testEntity));
    jpatm.commit(txStatus);
    cefb.destroy();
    verify(mockEm).joinTransaction();
    verify(mockEm).contains(testEntity);
    verify(mockEmf).close();
  }
  public LocalContainerEntityManagerFactoryBean parseValidPersistenceUnit() throws Exception {
    LocalContainerEntityManagerFactoryBean emfb=createEntityManagerFactoryBean("org/springframework/orm/jpa/domain/persistence.xml",null,"Person");
    return emfb;
  }
  @Test public void testInvalidPersistenceUnitName() throws Exception {
    try {
      createEntityManagerFactoryBean("org/springframework/orm/jpa/domain/persistence.xml",null,"call me Bob");
      fail("Should not create factory with this name");
    }
 catch (    IllegalArgumentException ex) {
    }
  }
  protected LocalContainerEntityManagerFactoryBean createEntityManagerFactoryBean(  String persistenceXml,  Properties props,  String entityManagerName) throws Exception {
    actualPui=null;
    actualProps=null;
    LocalContainerEntityManagerFactoryBean containerEmfb=new LocalContainerEntityManagerFactoryBean();
    containerEmfb.setPersistenceUnitName(entityManagerName);
    containerEmfb.setPersistenceProviderClass(DummyContainerPersistenceProvider.class);
    if (props != null) {
      containerEmfb.setJpaProperties(props);
    }
    containerEmfb.setLoadTimeWeaver(new InstrumentationLoadTimeWeaver());
    containerEmfb.setPersistenceXmlLocation(persistenceXml);
    containerEmfb.afterPropertiesSet();
    assertEquals(entityManagerName,actualPui.getPersistenceUnitName());
    if (props != null) {
      assertEquals(props,actualProps);
    }
    return containerEmfb;
  }
  @Test public void testRejectsMissingPersistenceUnitInfo() throws Exception {
    LocalContainerEntityManagerFactoryBean containerEmfb=new LocalContainerEntityManagerFactoryBean();
    String entityManagerName="call me Bob";
    containerEmfb.setPersistenceUnitName(entityManagerName);
    containerEmfb.setPersistenceProviderClass(DummyContainerPersistenceProvider.class);
    try {
      containerEmfb.afterPropertiesSet();
      fail();
    }
 catch (    IllegalArgumentException ex) {
    }
  }
private static class DummyContainerPersistenceProvider implements PersistenceProvider {
    @Override public EntityManagerFactory createContainerEntityManagerFactory(    PersistenceUnitInfo pui,    Map map){
      actualPui=pui;
      actualProps=map;
      return mockEmf;
    }
    @Override public EntityManagerFactory createEntityManagerFactory(    String emfName,    Map properties){
      throw new UnsupportedOperationException();
    }
    @Override public ProviderUtil getProviderUtil(){
      throw new UnsupportedOperationException();
    }
    public void generateSchema(    PersistenceUnitInfo persistenceUnitInfo,    Map map){
      throw new UnsupportedOperationException();
    }
    public boolean generateSchema(    String persistenceUnitName,    Map map){
      throw new UnsupportedOperationException();
    }
  }
private static class NoOpEntityTransaction implements EntityTransaction {
    @Override public void begin(){
    }
    @Override public void commit(){
    }
    @Override public void rollback(){
    }
    @Override public void setRollbackOnly(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean getRollbackOnly(){
      return false;
    }
    @Override public boolean isActive(){
      return false;
    }
  }
}
