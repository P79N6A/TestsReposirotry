/** 
 * Integration tests that verify proper concurrency support between a {@link TestContextManager} and the {@link TestContext} it manageswhen a registered  {@link TestExecutionListener} updates the mutablestate and attributes of the context from concurrently executing threads. <p>In other words, these tests verify that mutated state and attributes are only be visible to the thread in which the mutation occurred.
 * @author Sam Brannen
 * @since 5.0
 * @see org.springframework.test.context.junit4.concurrency.SpringJUnit4ConcurrencyTests
 */
public class TestContextConcurrencyTests {
  private static Set<String> expectedMethods=stream(TestCase.class.getDeclaredMethods()).map(Method::getName).collect(toCollection(TreeSet::new));
  private static final Set<String> actualMethods=Collections.synchronizedSet(new TreeSet<>());
  private static final TestCase testInstance=new TestCase();
  @Test public void invokeTestContextManagerFromConcurrentThreads(){
    TestContextManager tcm=new TestContextManager(TestCase.class);
    IntStream.range(1,20).forEach(i -> {
      actualMethods.clear();
      stream(TestCase.class.getDeclaredMethods()).parallel().forEach(testMethod -> {
        try {
          tcm.beforeTestClass();
          tcm.beforeTestMethod(testInstance,testMethod);
          tcm.afterTestMethod(testInstance,testMethod,null);
          tcm.afterTestClass();
        }
 catch (        Exception ex) {
          throw new RuntimeException(ex);
        }
      }
);
      assertThat(actualMethods,equalTo(expectedMethods));
    }
);
    assertEquals(0,tcm.getTestContext().attributeNames().length);
  }
@TestExecutionListeners(TrackingListener.class) @SuppressWarnings("unused") private static class TestCase {
    void test_001(){
    }
    void test_002(){
    }
    void test_003(){
    }
    void test_004(){
    }
    void test_005(){
    }
    void test_006(){
    }
    void test_007(){
    }
    void test_008(){
    }
    void test_009(){
    }
    void test_010(){
    }
  }
private static class TrackingListener implements TestExecutionListener {
    private ThreadLocal<String> methodName=new ThreadLocal<>();
    @Override public void beforeTestMethod(    TestContext testContext) throws Exception {
      String name=testContext.getTestMethod().getName();
      actualMethods.add(name);
      testContext.setAttribute("method",name);
      this.methodName.set(name);
    }
    @Override public void afterTestMethod(    TestContext testContext) throws Exception {
      assertEquals(this.methodName.get(),testContext.getAttribute("method"));
    }
  }
}
