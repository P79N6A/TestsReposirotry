/** 
 * Internal extension that registers a  {@link ReaderEventListener} to storeregistered  {@link ComponentDefinition}s.
 */
private static class ToolingTestApplicationContext extends ClassPathXmlApplicationContext {
  private Set<ComponentDefinition> registeredComponents;
  public ToolingTestApplicationContext(  String path,  Class<?> clazz){
    super(path,clazz);
  }
  @Override protected void initBeanDefinitionReader(  XmlBeanDefinitionReader beanDefinitionReader){
    this.registeredComponents=new HashSet<>();
    beanDefinitionReader.setEventListener(new StoringReaderEventListener(this.registeredComponents));
    beanDefinitionReader.setSourceExtractor(new PassThroughSourceExtractor());
  }
  public boolean containsComponentDefinition(  String name){
    for (    ComponentDefinition cd : this.registeredComponents) {
      if (cd instanceof CompositeComponentDefinition) {
        ComponentDefinition[] innerCds=((CompositeComponentDefinition)cd).getNestedComponents();
        for (        ComponentDefinition innerCd : innerCds) {
          if (innerCd.getName().equals(name)) {
            return true;
          }
        }
      }
 else {
        if (cd.getName().equals(name)) {
          return true;
        }
      }
    }
    return false;
  }
  public Iterator<ComponentDefinition> getRegisteredComponents(){
    return this.registeredComponents.iterator();
  }
}
