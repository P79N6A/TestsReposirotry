private static class AsyncContextWrapper implements AsyncContext {
  private final AsyncContext delegate;
  public AsyncContextWrapper(  AsyncContext delegate){
    this.delegate=delegate;
  }
  @Override public ServletRequest getRequest(){
    return this.delegate.getRequest();
  }
  @Override public ServletResponse getResponse(){
    return this.delegate.getResponse();
  }
  @Override public boolean hasOriginalRequestAndResponse(){
    return this.delegate.hasOriginalRequestAndResponse();
  }
  @Override public void dispatch(){
    this.delegate.dispatch();
  }
  @Override public void dispatch(  String path){
    this.delegate.dispatch(path);
  }
  @Override public void dispatch(  ServletContext context,  String path){
    this.delegate.dispatch(context,path);
  }
  @Override public void complete(){
    this.delegate.complete();
  }
  @Override public void start(  Runnable run){
    this.delegate.start(run);
  }
  @Override public void addListener(  AsyncListener listener){
    this.delegate.addListener(listener);
  }
  @Override public void addListener(  AsyncListener listener,  ServletRequest req,  ServletResponse res){
    this.delegate.addListener(listener,req,res);
  }
  @Override public <T extends AsyncListener>T createListener(  Class<T> clazz) throws ServletException {
    return this.delegate.createListener(clazz);
  }
  @Override public void setTimeout(  long timeout){
    this.delegate.setTimeout(timeout);
  }
  @Override public long getTimeout(){
    return this.delegate.getTimeout();
  }
}
