/** 
 * @author Arjen Poutsma
 */
public class ResourceDecoderTests extends AbstractDecoderTestCase<ResourceDecoder> {
  private final byte[] fooBytes="foo".getBytes(StandardCharsets.UTF_8);
  private final byte[] barBytes="bar".getBytes(StandardCharsets.UTF_8);
  public ResourceDecoderTests(){
    super(new ResourceDecoder());
  }
  @Override @Test public void canDecode(){
    assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class),MimeTypeUtils.TEXT_PLAIN));
    assertTrue(this.decoder.canDecode(forClass(ByteArrayResource.class),MimeTypeUtils.TEXT_PLAIN));
    assertTrue(this.decoder.canDecode(forClass(Resource.class),MimeTypeUtils.TEXT_PLAIN));
    assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class),MimeTypeUtils.APPLICATION_JSON));
    assertFalse(this.decoder.canDecode(forClass(Object.class),MimeTypeUtils.APPLICATION_JSON));
  }
  @Override @Test public void decode(){
    Flux<DataBuffer> input=Flux.concat(dataBuffer(this.fooBytes),dataBuffer(this.barBytes));
    testDecodeAll(input,Resource.class,step -> step.consumeNextWith(resource -> {
      try {
        byte[] bytes=StreamUtils.copyToByteArray(resource.getInputStream());
        assertEquals("foobar",new String(bytes));
      }
 catch (      IOException e) {
        fail(e.getMessage());
      }
    }
).expectComplete().verify());
  }
  @Override protected void testDecodeError(  Publisher<DataBuffer> input,  ResolvableType outputType,  @Nullable MimeType mimeType,  @Nullable Map<String,Object> hints){
    input=Flux.concat(Flux.from(input).take(1),Flux.error(new InputException()));
    Flux<Resource> result=this.decoder.decode(input,outputType,mimeType,hints);
    StepVerifier.create(result).expectError(InputException.class).verify();
  }
  @Override public void decodeToMono() throws Exception {
    Flux<DataBuffer> input=Flux.concat(dataBuffer(this.fooBytes),dataBuffer(this.barBytes));
    testDecodeToMonoAll(input,Resource.class,step -> step.consumeNextWith(resource -> {
      try {
        byte[] bytes=StreamUtils.copyToByteArray(resource.getInputStream());
        assertEquals("foobar",new String(bytes));
      }
 catch (      IOException e) {
        fail(e.getMessage());
      }
    }
).expectComplete().verify());
  }
}
