private static class TestClientHandler extends TextWebSocketHandler {
  private final BlockingQueue<TextMessage> receivedMessages=new LinkedBlockingQueue<>();
  private volatile WebSocketSession session;
  private volatile Throwable transportError;
  @Override public void afterConnectionEstablished(  WebSocketSession session) throws Exception {
    this.session=session;
  }
  @Override protected void handleTextMessage(  WebSocketSession session,  TextMessage message) throws Exception {
    this.receivedMessages.add(message);
  }
  @Override public void handleTransportError(  WebSocketSession session,  Throwable exception) throws Exception {
    this.transportError=exception;
  }
  public void awaitMessageCount(  final int count,  long timeToWait) throws Exception {
    awaitEvent(() -> receivedMessages.size() >= count,timeToWait,count + " number of messages. Received so far: " + this.receivedMessages);
  }
  public void awaitMessage(  TextMessage expected,  long timeToWait) throws InterruptedException {
    TextMessage actual=this.receivedMessages.poll(timeToWait,TimeUnit.MILLISECONDS);
    if (actual != null) {
      assertEquals(expected,actual);
    }
 else     if (this.transportError != null) {
      throw new AssertionError("Transport error",this.transportError);
    }
 else {
      fail("Timed out waiting for [" + expected + "]");
    }
  }
}
