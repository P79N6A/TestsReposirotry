/** 
 * Integration tests that ensure that <em>primary</em> transaction managers are supported.
 * @author Sam Brannen
 * @since 4.3
 * @see org.springframework.test.context.jdbc.PrimaryDataSourceTests
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @DirtiesContext public final class PrimaryTransactionManagerTests {
  private JdbcTemplate jdbcTemplate;
  @Autowired public void setDataSource(  DataSource dataSource1){
    this.jdbcTemplate=new JdbcTemplate(dataSource1);
  }
  @BeforeTransaction public void beforeTransaction(){
    assertNumUsers(0);
  }
  @AfterTransaction public void afterTransaction(){
    assertNumUsers(0);
  }
  @Test @Transactional public void transactionalTest(){
    TransactionTestUtils.assertInTransaction(true);
    ClassPathResource resource=new ClassPathResource("/org/springframework/test/context/jdbc/data.sql");
    new ResourceDatabasePopulator(resource).execute(jdbcTemplate.getDataSource());
    assertNumUsers(1);
  }
  private void assertNumUsers(  int expected){
    assertEquals("Number of rows in the 'user' table",expected,JdbcTestUtils.countRowsInTable(this.jdbcTemplate,"user"));
  }
@Configuration @EnableTransactionManagement static class Config {
    @Primary @Bean public PlatformTransactionManager primaryTransactionManager(){
      return new DataSourceTransactionManager(dataSource1());
    }
    @Bean public PlatformTransactionManager additionalTransactionManager(){
      return new DataSourceTransactionManager(dataSource2());
    }
    @Bean public DataSource dataSource1(){
      return new EmbeddedDatabaseBuilder().generateUniqueName(true).addScript("classpath:/org/springframework/test/context/jdbc/schema.sql").build();
    }
    @Bean public DataSource dataSource2(){
      return new EmbeddedDatabaseBuilder().generateUniqueName(true).build();
    }
  }
}
