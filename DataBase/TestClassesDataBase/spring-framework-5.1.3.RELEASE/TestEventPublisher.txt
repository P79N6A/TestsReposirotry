private static class TestEventPublisher implements ApplicationEventPublisher {
  private final BlockingQueue<BrokerAvailabilityEvent> eventQueue=new LinkedBlockingQueue<>();
  @Override public void publishEvent(  ApplicationEvent event){
    publishEvent((Object)event);
  }
  @Override public void publishEvent(  Object event){
    logger.debug("Processing ApplicationEvent " + event);
    if (event instanceof BrokerAvailabilityEvent) {
      this.eventQueue.add((BrokerAvailabilityEvent)event);
    }
  }
  public void expectBrokerAvailabilityEvent(  boolean isBrokerAvailable) throws InterruptedException {
    BrokerAvailabilityEvent event=this.eventQueue.poll(20000,TimeUnit.MILLISECONDS);
    assertNotNull("Times out waiting for BrokerAvailabilityEvent[" + isBrokerAvailable + "]",event);
    assertEquals(isBrokerAvailable,event.isBrokerAvailable());
  }
}
