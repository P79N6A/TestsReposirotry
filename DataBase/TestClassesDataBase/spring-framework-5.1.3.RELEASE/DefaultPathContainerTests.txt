/** 
 * Unit tests for  {@link DefaultPathContainer}.
 * @author Rossen Stoyanchev
 */
public class DefaultPathContainerTests {
  @Test public void pathSegment() throws Exception {
    testPathSegment("cars","cars",new LinkedMultiValueMap<>());
    testPathSegment("","",new LinkedMultiValueMap<>());
    testPathSegment("%20%20","  ",new LinkedMultiValueMap<>());
    testPathSegment("%20a%20"," a ",new LinkedMultiValueMap<>());
  }
  @Test public void pathSegmentParams() throws Exception {
    LinkedMultiValueMap<String,String> params=new LinkedMultiValueMap<>();
    params.add("colors","red");
    params.add("colors","blue");
    params.add("colors","green");
    params.add("year","2012");
    testPathSegment("cars;colors=red,blue,green;year=2012","cars",params);
    params=new LinkedMultiValueMap<>();
    params.add("p","1");
    testPathSegment("path;p=1;","path",params);
    params=new LinkedMultiValueMap<>();
    params.add("param name","param value");
    testPathSegment("path;param%20name=param%20value;%20","path",params);
    params=new LinkedMultiValueMap<>();
    params.add("p","1");
    testPathSegment("path;;;%20;%20;p=1;%20","path",params);
  }
  private void testPathSegment(  String rawValue,  String valueToMatch,  MultiValueMap<String,String> params){
    PathContainer container=PathContainer.parsePath(rawValue);
    if ("".equals(rawValue)) {
      assertEquals(0,container.elements().size());
      return;
    }
    assertEquals(1,container.elements().size());
    PathSegment segment=(PathSegment)container.elements().get(0);
    assertEquals("value: '" + rawValue + "'",rawValue,segment.value());
    assertEquals("valueToMatch: '" + rawValue + "'",valueToMatch,segment.valueToMatch());
    assertEquals("params: '" + rawValue + "'",params,segment.parameters());
  }
  @Test public void path() throws Exception {
    testPath("/a/b/c","/a/b/c",Arrays.asList("/","a","/","b","/","c"));
    testPath("/","/",Collections.singletonList("/"));
    testPath("","",Collections.emptyList());
    testPath("%20%20","%20%20",Collections.singletonList("%20%20"));
    testPath("/a/b/","/a/b/",Arrays.asList("/","a","/","b","/"));
    testPath("/a/b//","/a/b//",Arrays.asList("/","a","/","b","/","/"));
    testPath("/%20","/%20",Arrays.asList("/","%20"));
    testPath("//%20/%20","//%20/%20",Arrays.asList("/","/","%20","/","%20"));
  }
  private void testPath(  String input,  String value,  List<String> expectedElements){
    PathContainer path=PathContainer.parsePath(input);
    assertEquals("value: '" + input + "'",value,path.value());
    assertEquals("elements: " + input,expectedElements,path.elements().stream().map(PathContainer.Element::value).collect(Collectors.toList()));
  }
  @Test public void subPath() throws Exception {
    PathContainer path=PathContainer.parsePath("/a/b/c");
    assertSame(path,path.subPath(0));
    assertEquals("/b/c",path.subPath(2).value());
    assertEquals("/c",path.subPath(4).value());
    path=PathContainer.parsePath("/");
    assertEquals("/",path.subPath(0).value());
    path=PathContainer.parsePath("/a/b/");
    assertEquals("/b/",path.subPath(2).value());
  }
}
