/** 
 * Tests with Java configuration.
 * @author Rossen Stoyanchev
 * @author Sam Brannen
 */
@RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextHierarchy(@ContextConfiguration(classes=AsyncControllerJavaConfigTests.WebConfig.class)) public class AsyncControllerJavaConfigTests {
  @Autowired private WebApplicationContext wac;
  @Autowired private CallableProcessingInterceptor callableInterceptor;
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).build();
  }
  @Test public void callableInterceptor() throws Exception {
    MvcResult mvcResult=this.mockMvc.perform(get("/callable").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(request().asyncStarted()).andExpect(request().asyncResult(Collections.singletonMap("key","value"))).andReturn();
    Mockito.verify(this.callableInterceptor).beforeConcurrentHandling(any(),any());
    Mockito.verify(this.callableInterceptor).preProcess(any(),any());
    Mockito.verify(this.callableInterceptor).postProcess(any(),any(),any());
    Mockito.verifyNoMoreInteractions(this.callableInterceptor);
    this.mockMvc.perform(asyncDispatch(mvcResult)).andExpect(status().isOk()).andExpect(content().string("{\"key\":\"value\"}"));
    Mockito.verify(this.callableInterceptor).afterCompletion(any(),any());
    Mockito.verifyNoMoreInteractions(this.callableInterceptor);
  }
@Configuration @EnableWebMvc static class WebConfig implements WebMvcConfigurer {
    @Override public void configureAsyncSupport(    AsyncSupportConfigurer configurer){
      configurer.registerCallableInterceptors(callableInterceptor());
    }
    @Bean public CallableProcessingInterceptor callableInterceptor(){
      return Mockito.mock(CallableProcessingInterceptor.class);
    }
    @Bean public AsyncController asyncController(){
      return new AsyncController();
    }
  }
@RestController static class AsyncController {
    @GetMapping("/callable") public Callable<Map<String,String>> getCallable(){
      return () -> Collections.singletonMap("key","value");
    }
  }
}
