private static class BlockingSession extends TestWebSocketSession {
  private AtomicReference<CountDownLatch> nextMessageLatch=new AtomicReference<>();
  private AtomicReference<CountDownLatch> releaseLatch=new AtomicReference<>();
  public CountDownLatch getSentMessageLatch(){
    this.nextMessageLatch.set(new CountDownLatch(1));
    return this.nextMessageLatch.get();
  }
  @Override public void sendMessage(  WebSocketMessage<?> message) throws IOException {
    super.sendMessage(message);
    if (this.nextMessageLatch != null) {
      this.nextMessageLatch.get().countDown();
    }
    block();
  }
  private void block(){
    try {
      this.releaseLatch.set(new CountDownLatch(1));
      this.releaseLatch.get().await();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}
