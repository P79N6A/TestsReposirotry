/** 
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @author Arjen Poutsma
 */
public class SimplePropertyNamespaceHandlerTests {
  @Test public void simpleBeanConfigured() throws Exception {
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(beanFactory).loadBeanDefinitions(new ClassPathResource("simplePropertyNamespaceHandlerTests.xml",getClass()));
    ITestBean rob=(TestBean)beanFactory.getBean("rob");
    ITestBean sally=(TestBean)beanFactory.getBean("sally");
    assertEquals("Rob Harrop",rob.getName());
    assertEquals(24,rob.getAge());
    assertEquals(rob.getSpouse(),sally);
  }
  @Test public void innerBeanConfigured() throws Exception {
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(beanFactory).loadBeanDefinitions(new ClassPathResource("simplePropertyNamespaceHandlerTests.xml",getClass()));
    TestBean sally=(TestBean)beanFactory.getBean("sally2");
    ITestBean rob=sally.getSpouse();
    assertEquals("Rob Harrop",rob.getName());
    assertEquals(24,rob.getAge());
    assertEquals(rob.getSpouse(),sally);
  }
  @Test(expected=BeanDefinitionStoreException.class) public void withPropertyDefinedTwice() throws Exception {
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(beanFactory).loadBeanDefinitions(new ClassPathResource("simplePropertyNamespaceHandlerTestsWithErrors.xml",getClass()));
  }
  @Test public void propertyWithNameEndingInRef() throws Exception {
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(beanFactory).loadBeanDefinitions(new ClassPathResource("simplePropertyNamespaceHandlerTests.xml",getClass()));
    ITestBean sally=(TestBean)beanFactory.getBean("derivedSally");
    assertEquals("r",sally.getSpouse().getName());
  }
}
