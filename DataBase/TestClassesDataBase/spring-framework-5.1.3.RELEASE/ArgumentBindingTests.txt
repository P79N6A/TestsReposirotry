/** 
 * @author Adrian Colyer
 * @author Juergen Hoeller
 * @author Chris Beams
 */
public class ArgumentBindingTests {
  @Test(expected=IllegalArgumentException.class) public void testBindingInPointcutUsedByAdvice(){
    TestBean tb=new TestBean();
    AspectJProxyFactory proxyFactory=new AspectJProxyFactory(tb);
    proxyFactory.addAspect(NamedPointcutWithArgs.class);
    ITestBean proxiedTestBean=proxyFactory.getProxy();
    proxiedTestBean.setName("Supercalifragalisticexpialidocious");
  }
  @Test(expected=IllegalStateException.class) public void testAnnotationArgumentNameBinding(){
    TransactionalBean tb=new TransactionalBean();
    AspectJProxyFactory proxyFactory=new AspectJProxyFactory(tb);
    proxyFactory.addAspect(PointcutWithAnnotationArgument.class);
    ITransactionalBean proxiedTestBean=proxyFactory.getProxy();
    proxiedTestBean.doInTransaction();
  }
  @Test public void testParameterNameDiscoverWithReferencePointcut() throws Exception {
    AspectJAdviceParameterNameDiscoverer discoverer=new AspectJAdviceParameterNameDiscoverer("somepc(formal) && set(* *)");
    discoverer.setRaiseExceptions(true);
    Method methodUsedForParameterTypeDiscovery=getClass().getMethod("methodWithOneParam",String.class);
    String[] pnames=discoverer.getParameterNames(methodUsedForParameterTypeDiscovery);
    assertEquals("one parameter name",1,pnames.length);
    assertEquals("formal",pnames[0]);
  }
  public void methodWithOneParam(  String aParam){
  }
public interface ITransactionalBean {
    @Transactional void doInTransaction();
  }
public static class TransactionalBean implements ITransactionalBean {
    @Override @Transactional public void doInTransaction(){
    }
  }
}
