/** 
 * Integration tests for  {@link MockMvcWebClientBuilder}.
 * @author Rob Winch
 * @author Sam Brannen
 * @author Rossen Stoyanchev
 * @since 4.2
 */
@RunWith(SpringRunner.class) @ContextConfiguration @WebAppConfiguration public class MockMvcWebClientBuilderTests {
  @Autowired private WebApplicationContext wac;
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).build();
  }
  @Test(expected=IllegalArgumentException.class) public void mockMvcSetupNull(){
    MockMvcWebClientBuilder.mockMvcSetup(null);
  }
  @Test(expected=IllegalArgumentException.class) public void webAppContextSetupNull(){
    MockMvcWebClientBuilder.webAppContextSetup(null);
  }
  @Test public void mockMvcSetupWithDefaultWebClientDelegate() throws Exception {
    WebClient client=MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build();
    assertMockMvcUsed(client,"http://localhost/test");
    Assume.group(TestGroup.PERFORMANCE,() -> assertMockMvcNotUsed(client,"http://example.com/"));
  }
  @Test public void mockMvcSetupWithCustomWebClientDelegate() throws Exception {
    WebClient otherClient=new WebClient();
    WebClient client=MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherClient).build();
    assertMockMvcUsed(client,"http://localhost/test");
    Assume.group(TestGroup.PERFORMANCE,() -> assertMockMvcNotUsed(client,"http://example.com/"));
  }
  @Test public void cookieManagerShared() throws Exception {
    this.mockMvc=MockMvcBuilders.standaloneSetup(new CookieController()).build();
    WebClient client=MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build();
    assertThat(getResponse(client,"http://localhost/").getContentAsString(),equalTo("NA"));
    client.getCookieManager().addCookie(new Cookie("localhost","cookie","cookieManagerShared"));
    assertThat(getResponse(client,"http://localhost/").getContentAsString(),equalTo("cookieManagerShared"));
  }
  @Test public void cookiesAreManaged() throws Exception {
    this.mockMvc=MockMvcBuilders.standaloneSetup(new CookieController()).build();
    WebClient client=MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build();
    assertThat(getResponse(client,"http://localhost/").getContentAsString(),equalTo("NA"));
    assertThat(postResponse(client,"http://localhost/?cookie=foo").getContentAsString(),equalTo("Set"));
    assertThat(getResponse(client,"http://localhost/").getContentAsString(),equalTo("foo"));
    assertThat(deleteResponse(client,"http://localhost/").getContentAsString(),equalTo("Delete"));
    assertThat(getResponse(client,"http://localhost/").getContentAsString(),equalTo("NA"));
  }
  private void assertMockMvcUsed(  WebClient client,  String url) throws Exception {
    assertThat(getResponse(client,url).getContentAsString(),equalTo("mvc"));
  }
  private void assertMockMvcNotUsed(  WebClient client,  String url) throws Exception {
    assertThat(getResponse(client,url).getContentAsString(),not(equalTo("mvc")));
  }
  private WebResponse getResponse(  WebClient client,  String url) throws IOException {
    return createResponse(client,new WebRequest(new URL(url)));
  }
  private WebResponse postResponse(  WebClient client,  String url) throws IOException {
    return createResponse(client,new WebRequest(new URL(url),HttpMethod.POST));
  }
  private WebResponse deleteResponse(  WebClient client,  String url) throws IOException {
    return createResponse(client,new WebRequest(new URL(url),HttpMethod.DELETE));
  }
  private WebResponse createResponse(  WebClient client,  WebRequest request) throws IOException {
    return client.getWebConnection().getResponse(request);
  }
@Configuration @EnableWebMvc static class Config {
@RestController static class ContextPathController {
      @RequestMapping public String contextPath(      HttpServletRequest request){
        return "mvc";
      }
    }
  }
@RestController static class CookieController {
    static final String COOKIE_NAME="cookie";
    @RequestMapping(path="/",produces="text/plain") String cookie(    @CookieValue(name=COOKIE_NAME,defaultValue="NA") String cookie){
      return cookie;
    }
    @PostMapping(path="/",produces="text/plain") String setCookie(    @RequestParam String cookie,    HttpServletResponse response){
      response.addCookie(new javax.servlet.http.Cookie(COOKIE_NAME,cookie));
      return "Set";
    }
    @DeleteMapping(path="/",produces="text/plain") String deleteCookie(    HttpServletResponse response){
      javax.servlet.http.Cookie cookie=new javax.servlet.http.Cookie(COOKIE_NAME,"");
      cookie.setMaxAge(0);
      response.addCookie(cookie);
      return "Delete";
    }
  }
}
