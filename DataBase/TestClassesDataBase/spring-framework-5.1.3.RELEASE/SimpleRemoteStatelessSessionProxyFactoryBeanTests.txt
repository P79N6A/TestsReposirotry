/** 
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 21.05.2003
 */
public class SimpleRemoteStatelessSessionProxyFactoryBeanTests extends SimpleRemoteSlsbInvokerInterceptorTests {
  @Override protected SimpleRemoteSlsbInvokerInterceptor createInterceptor(){
    return new SimpleRemoteStatelessSessionProxyFactoryBean();
  }
  @Override protected Object configuredProxy(  SimpleRemoteSlsbInvokerInterceptor si,  Class<?> ifc) throws NamingException {
    SimpleRemoteStatelessSessionProxyFactoryBean fb=(SimpleRemoteStatelessSessionProxyFactoryBean)si;
    fb.setBusinessInterface(ifc);
    fb.afterPropertiesSet();
    return fb.getObject();
  }
  @Test public void testInvokesMethod() throws Exception {
    final int value=11;
    final String jndiName="foo";
    MyEjb myEjb=mock(MyEjb.class);
    given(myEjb.getValue()).willReturn(value);
    final MyHome home=mock(MyHome.class);
    given(home.create()).willReturn(myEjb);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name){
        assertTrue(name.equals("java:comp/env/" + jndiName));
        return home;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setResourceRef(true);
    fb.setBusinessInterface(MyBusinessMethods.class);
    fb.setJndiTemplate(jt);
    fb.afterPropertiesSet();
    MyBusinessMethods mbm=(MyBusinessMethods)fb.getObject();
    assertTrue(Proxy.isProxyClass(mbm.getClass()));
    assertEquals("Returns expected value",value,mbm.getValue());
    verify(myEjb).remove();
  }
  @Test public void testInvokesMethodOnEjb3StyleBean() throws Exception {
    final int value=11;
    final String jndiName="foo";
    final MyEjb myEjb=mock(MyEjb.class);
    given(myEjb.getValue()).willReturn(value);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name){
        assertTrue(name.equals("java:comp/env/" + jndiName));
        return myEjb;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setResourceRef(true);
    fb.setBusinessInterface(MyBusinessMethods.class);
    fb.setJndiTemplate(jt);
    fb.afterPropertiesSet();
    MyBusinessMethods mbm=(MyBusinessMethods)fb.getObject();
    assertTrue(Proxy.isProxyClass(mbm.getClass()));
    assertEquals("Returns expected value",value,mbm.getValue());
  }
  @Override @Test public void testRemoteException() throws Exception {
    final RemoteException rex=new RemoteException();
    final String jndiName="foo";
    MyEjb myEjb=mock(MyEjb.class);
    given(myEjb.getValue()).willThrow(rex);
    final MyHome home=mock(MyHome.class);
    given(home.create()).willReturn(myEjb);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name){
        assertTrue(name.equals("java:comp/env/" + jndiName));
        return home;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setResourceRef(true);
    fb.setBusinessInterface(MyBusinessMethods.class);
    fb.setJndiTemplate(jt);
    fb.afterPropertiesSet();
    MyBusinessMethods mbm=(MyBusinessMethods)fb.getObject();
    assertTrue(Proxy.isProxyClass(mbm.getClass()));
    try {
      mbm.getValue();
      fail("Should've thrown remote exception");
    }
 catch (    RemoteException ex) {
      assertSame("Threw expected RemoteException",rex,ex);
    }
    verify(myEjb).remove();
  }
  @Test public void testCreateException() throws Exception {
    final String jndiName="foo";
    final CreateException cex=new CreateException();
    final MyHome home=mock(MyHome.class);
    given(home.create()).willThrow(cex);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name){
        assertTrue(name.equals(jndiName));
        return home;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setBusinessInterface(MyBusinessMethods.class);
    assertEquals(fb.getBusinessInterface(),MyBusinessMethods.class);
    fb.setJndiTemplate(jt);
    fb.afterPropertiesSet();
    MyBusinessMethods mbm=(MyBusinessMethods)fb.getObject();
    assertTrue(Proxy.isProxyClass(mbm.getClass()));
    try {
      mbm.getValue();
      fail("Should have failed to create EJB");
    }
 catch (    RemoteException ex) {
    }
  }
  @Test public void testCreateExceptionWithLocalBusinessInterface() throws Exception {
    final String jndiName="foo";
    final CreateException cex=new CreateException();
    final MyHome home=mock(MyHome.class);
    given(home.create()).willThrow(cex);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name){
        assertTrue(name.equals(jndiName));
        return home;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setBusinessInterface(MyLocalBusinessMethods.class);
    assertEquals(fb.getBusinessInterface(),MyLocalBusinessMethods.class);
    fb.setJndiTemplate(jt);
    fb.afterPropertiesSet();
    MyLocalBusinessMethods mbm=(MyLocalBusinessMethods)fb.getObject();
    assertTrue(Proxy.isProxyClass(mbm.getClass()));
    try {
      mbm.getValue();
      fail("Should have failed to create EJB");
    }
 catch (    RemoteAccessException ex) {
      assertTrue(ex.getCause() == cex);
    }
  }
  @Test public void testNoBusinessInterfaceSpecified() throws Exception {
    final String jndiName="foo";
    final MyHome home=mock(MyHome.class);
    JndiTemplate jt=new JndiTemplate(){
      @Override public Object lookup(      String name) throws NamingException {
        assertTrue(name.equals(jndiName));
        return home;
      }
    }
;
    SimpleRemoteStatelessSessionProxyFactoryBean fb=new SimpleRemoteStatelessSessionProxyFactoryBean();
    fb.setJndiName(jndiName);
    fb.setJndiTemplate(jt);
    assertTrue(fb.isSingleton());
    try {
      fb.afterPropertiesSet();
      fail("Should have failed to create EJB");
    }
 catch (    IllegalArgumentException ex) {
      assertTrue(ex.getMessage().indexOf("businessInterface") != 1);
    }
    verifyZeroInteractions(home);
  }
protected interface MyHome extends EJBHome {
    MyBusinessMethods create() throws CreateException, RemoteException ;
  }
protected interface MyBusinessMethods {
    int getValue() throws RemoteException ;
  }
protected interface MyLocalBusinessMethods {
    int getValue();
  }
protected interface MyEjb extends EJBObject, MyBusinessMethods {
  }
}
