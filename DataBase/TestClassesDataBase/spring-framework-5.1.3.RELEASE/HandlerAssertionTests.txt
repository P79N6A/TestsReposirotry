/** 
 * Examples of expectations on the controller type and controller method.
 * @author Rossen Stoyanchev
 * @author Sam Brannen
 */
public class HandlerAssertionTests {
  private final MockMvc mockMvc=standaloneSetup(new SimpleController()).alwaysExpect(status().isOk()).build();
  @Rule public final ExpectedException exception=ExpectedException.none();
  @Test public void handlerType() throws Exception {
    this.mockMvc.perform(get("/")).andExpect(handler().handlerType(SimpleController.class));
  }
  @Test public void methodCallOnNonMock() throws Exception {
    exception.expect(AssertionError.class);
    exception.expectMessage("The supplied object [bogus] is not an instance of");
    exception.expectMessage(MvcUriComponentsBuilder.MethodInvocationInfo.class.getName());
    exception.expectMessage("Ensure that you invoke the handler method via MvcUriComponentsBuilder.on()");
    this.mockMvc.perform(get("/")).andExpect(handler().methodCall("bogus"));
  }
  @Test public void methodCall() throws Exception {
    this.mockMvc.perform(get("/")).andExpect(handler().methodCall(on(SimpleController.class).handle()));
  }
  @Test public void methodName() throws Exception {
    this.mockMvc.perform(get("/")).andExpect(handler().methodName("handle"));
  }
  @Test public void methodNameMatchers() throws Exception {
    this.mockMvc.perform(get("/")).andExpect(handler().methodName(equalTo("handle")));
    this.mockMvc.perform(get("/")).andExpect(handler().methodName(is(not("save"))));
  }
  @Test public void method() throws Exception {
    Method method=SimpleController.class.getMethod("handle");
    this.mockMvc.perform(get("/")).andExpect(handler().method(method));
  }
@RestController static class SimpleController {
    @RequestMapping("/") public ResponseEntity<Void> handle(){
      return ResponseEntity.ok().build();
    }
  }
}
