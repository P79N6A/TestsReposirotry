/** 
 * Tests for various parameter binding scenarios with before advice.
 * @author Adrian Colyer
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Chris Beams
 */
public class AfterReturningAdviceBindingTests {
  private AfterReturningAdviceBindingTestAspect afterAdviceAspect;
  private ITestBean testBeanProxy;
  private TestBean testBeanTarget;
  private AfterReturningAdviceBindingCollaborator mockCollaborator;
  @Before public void setup() throws Exception {
    ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml",getClass());
    afterAdviceAspect=(AfterReturningAdviceBindingTestAspect)ctx.getBean("testAspect");
    mockCollaborator=mock(AfterReturningAdviceBindingCollaborator.class);
    afterAdviceAspect.setCollaborator(mockCollaborator);
    testBeanProxy=(ITestBean)ctx.getBean("testBean");
    assertTrue(AopUtils.isAopProxy(testBeanProxy));
    this.testBeanTarget=(TestBean)((Advised)testBeanProxy).getTargetSource().getTarget();
  }
  @Test public void testOneIntArg(){
    testBeanProxy.setAge(5);
    verify(mockCollaborator).oneIntArg(5);
  }
  @Test public void testOneObjectArg(){
    testBeanProxy.getAge();
    verify(mockCollaborator).oneObjectArg(this.testBeanProxy);
  }
  @Test public void testOneIntAndOneObjectArgs(){
    testBeanProxy.setAge(5);
    verify(mockCollaborator).oneIntAndOneObject(5,this.testBeanProxy);
  }
  @Test public void testNeedsJoinPoint(){
    testBeanProxy.getAge();
    verify(mockCollaborator).needsJoinPoint("getAge");
  }
  @Test public void testNeedsJoinPointStaticPart(){
    testBeanProxy.getAge();
    verify(mockCollaborator).needsJoinPointStaticPart("getAge");
  }
  @Test public void testReturningString(){
    testBeanProxy.setName("adrian");
    testBeanProxy.getName();
    verify(mockCollaborator).oneString("adrian");
  }
  @Test public void testReturningObject(){
    testBeanProxy.returnsThis();
    verify(mockCollaborator).oneObjectArg(this.testBeanTarget);
  }
  @Test public void testReturningBean(){
    testBeanProxy.returnsThis();
    verify(mockCollaborator).oneTestBeanArg(this.testBeanTarget);
  }
  @Test public void testReturningBeanArray(){
    this.testBeanTarget.setSpouse(new TestBean());
    ITestBean[] spouses=this.testBeanTarget.getSpouses();
    testBeanProxy.getSpouses();
    verify(mockCollaborator).testBeanArrayArg(spouses);
  }
  @Test public void testNoInvokeWhenReturningParameterTypeDoesNotMatch(){
    testBeanProxy.setSpouse(this.testBeanProxy);
    testBeanProxy.getSpouse();
    verifyZeroInteractions(mockCollaborator);
  }
  @Test public void testReturningByType(){
    testBeanProxy.returnsThis();
    verify(mockCollaborator).objectMatchNoArgs();
  }
  @Test public void testReturningPrimitive(){
    testBeanProxy.setAge(20);
    testBeanProxy.haveBirthday();
    verify(mockCollaborator).oneInt(20);
  }
}
