private static class MyHandlerMethodMapping extends AbstractHandlerMethodMapping<String> {
  private UrlPathHelper pathHelper=new UrlPathHelper();
  private PathMatcher pathMatcher=new AntPathMatcher();
  public MyHandlerMethodMapping(){
    setHandlerMethodMappingNamingStrategy(new SimpleMappingNamingStrategy());
  }
  @Override protected boolean isHandler(  Class<?> beanType){
    return true;
  }
  @Override protected String getMappingForMethod(  Method method,  Class<?> handlerType){
    String methodName=method.getName();
    return methodName.startsWith("handler") ? methodName : null;
  }
  @Override protected Set<String> getMappingPathPatterns(  String key){
    return (this.pathMatcher.isPattern(key) ? Collections.<String>emptySet() : Collections.singleton(key));
  }
  @Override protected CorsConfiguration initCorsConfiguration(  Object handler,  Method method,  String mapping){
    CorsConfiguration corsConfig=new CorsConfiguration();
    corsConfig.setAllowedOrigins(Collections.singletonList("http://" + handler.hashCode() + method.getName()));
    return corsConfig;
  }
  @Override protected String getMatchingMapping(  String pattern,  HttpServletRequest request){
    String lookupPath=this.pathHelper.getLookupPathForRequest(request);
    return this.pathMatcher.match(pattern,lookupPath) ? pattern : null;
  }
  @Override protected Comparator<String> getMappingComparator(  HttpServletRequest request){
    String lookupPath=this.pathHelper.getLookupPathForRequest(request);
    return this.pathMatcher.getPatternComparator(lookupPath);
  }
}
