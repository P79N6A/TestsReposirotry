/** 
 * Unit tests for  {@link InitBinderBindingContext}.
 * @author Rossen Stoyanchev
 */
public class InitBinderBindingContextTests {
  private final ConfigurableWebBindingInitializer bindingInitializer=new ConfigurableWebBindingInitializer();
  private final List<SyncHandlerMethodArgumentResolver> argumentResolvers=new ArrayList<>();
  @Test public void createBinder() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinder",WebDataBinder.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,null);
    assertNotNull(dataBinder.getDisallowedFields());
    assertEquals("id",dataBinder.getDisallowedFields()[0]);
  }
  @Test public void createBinderWithGlobalInitialization() throws Exception {
    ConversionService conversionService=new DefaultFormattingConversionService();
    bindingInitializer.setConversionService(conversionService);
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinder",WebDataBinder.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,null);
    assertSame(conversionService,dataBinder.getConversionService());
  }
  @Test public void createBinderWithAttrName() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinderWithAttributeName",WebDataBinder.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,"foo");
    assertNotNull(dataBinder.getDisallowedFields());
    assertEquals("id",dataBinder.getDisallowedFields()[0]);
  }
  @Test public void createBinderWithAttrNameNoMatch() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinderWithAttributeName",WebDataBinder.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,"invalidName");
    assertNull(dataBinder.getDisallowedFields());
  }
  @Test public void createBinderNullAttrName() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinderWithAttributeName",WebDataBinder.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,null);
    assertNull(dataBinder.getDisallowedFields());
  }
  @Test(expected=IllegalStateException.class) public void returnValueNotExpected() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
    BindingContext context=createBindingContext("initBinderReturnValue",WebDataBinder.class);
    context.createDataBinder(exchange,null,"invalidName");
  }
  @Test public void createBinderTypeConversion() throws Exception {
    MockServerHttpRequest request=MockServerHttpRequest.get("/path?requestParam=22").build();
    MockServerWebExchange exchange=MockServerWebExchange.from(request);
    ReactiveAdapterRegistry adapterRegistry=ReactiveAdapterRegistry.getSharedInstance();
    this.argumentResolvers.add(new RequestParamMethodArgumentResolver(null,adapterRegistry,false));
    BindingContext context=createBindingContext("initBinderTypeConversion",WebDataBinder.class,int.class);
    WebDataBinder dataBinder=context.createDataBinder(exchange,null,"foo");
    assertNotNull(dataBinder.getDisallowedFields());
    assertEquals("requestParam-22",dataBinder.getDisallowedFields()[0]);
  }
  private BindingContext createBindingContext(  String methodName,  Class<?>... parameterTypes) throws Exception {
    Object handler=new InitBinderHandler();
    Method method=handler.getClass().getMethod(methodName,parameterTypes);
    SyncInvocableHandlerMethod handlerMethod=new SyncInvocableHandlerMethod(handler,method);
    handlerMethod.setArgumentResolvers(new ArrayList<>(this.argumentResolvers));
    handlerMethod.setParameterNameDiscoverer(new LocalVariableTableParameterNameDiscoverer());
    return new InitBinderBindingContext(this.bindingInitializer,Collections.singletonList(handlerMethod));
  }
private static class InitBinderHandler {
    @InitBinder public void initBinder(    WebDataBinder dataBinder){
      dataBinder.setDisallowedFields("id");
    }
    @InitBinder(value="foo") public void initBinderWithAttributeName(    WebDataBinder dataBinder){
      dataBinder.setDisallowedFields("id");
    }
    @InitBinder public String initBinderReturnValue(    WebDataBinder dataBinder){
      return "invalid";
    }
    @InitBinder public void initBinderTypeConversion(    WebDataBinder dataBinder,    @RequestParam int requestParam){
      dataBinder.setDisallowedFields("requestParam-" + requestParam);
    }
  }
}
