private static class TestServerHttpResponse extends AbstractServerHttpResponse {
  private boolean statusCodeWritten;
  private boolean headersWritten;
  private boolean cookiesWritten;
  private final List<DataBuffer> body=new ArrayList<>();
  public TestServerHttpResponse(){
    super(new DefaultDataBufferFactory());
  }
  @Override public <T>T getNativeResponse(){
    throw new IllegalStateException("This is a mock. No running server, no native response.");
  }
  @Override public void applyStatusCode(){
    assertFalse(this.statusCodeWritten);
    this.statusCodeWritten=true;
  }
  @Override protected void applyHeaders(){
    assertFalse(this.headersWritten);
    this.headersWritten=true;
  }
  @Override protected void applyCookies(){
    assertFalse(this.cookiesWritten);
    this.cookiesWritten=true;
  }
  @Override protected Mono<Void> writeWithInternal(  Publisher<? extends DataBuffer> body){
    return Flux.from(body).map(b -> {
      this.body.add(b);
      return b;
    }
).then();
  }
  @Override protected Mono<Void> writeAndFlushWithInternal(  Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlush){
    return Flux.from(bodyWithFlush).flatMap(body -> Flux.from(body).map(b -> {
      this.body.add(b);
      return b;
    }
)).then();
  }
}
