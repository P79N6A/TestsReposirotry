@Controller public static class RequestHeaderMapController {
  @RequestMapping("/map") public void map(  @RequestHeader Map<String,String> headers,  Writer writer) throws IOException {
    for (Iterator<Map.Entry<String,String>> it=headers.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,String> entry=it.next();
      writer.write(entry.getKey() + "=" + entry.getValue());
      if (it.hasNext()) {
        writer.write(',');
      }
    }
  }
  @RequestMapping("/multiValueMap") public void multiValueMap(  @RequestHeader MultiValueMap<String,String> headers,  Writer writer) throws IOException {
    for (Iterator<Map.Entry<String,List<String>>> it1=headers.entrySet().iterator(); it1.hasNext(); ) {
      Map.Entry<String,List<String>> entry=it1.next();
      writer.write(entry.getKey() + "=[");
      for (Iterator<String> it2=entry.getValue().iterator(); it2.hasNext(); ) {
        String value=it2.next();
        writer.write(value);
        if (it2.hasNext()) {
          writer.write(',');
        }
      }
      writer.write(']');
      if (it1.hasNext()) {
        writer.write(',');
      }
    }
  }
  @RequestMapping("/httpHeaders") public void httpHeaders(  @RequestHeader HttpHeaders headers,  Writer writer) throws IOException {
    assertEquals("Invalid Content-Type",new MediaType("text","html"),headers.getContentType());
    multiValueMap(headers,writer);
  }
}
