/** 
 * @author Rob Harrop
 * @author Rick Evans
 * @author Chris Beams
 */
public class MethodExclusionMBeanInfoAssemblerTests extends AbstractJmxAssemblerTests {
  private static final String OBJECT_NAME="bean:name=testBean5";
  @Override protected String getObjectName(){
    return OBJECT_NAME;
  }
  @Override protected int getExpectedOperationCount(){
    return 9;
  }
  @Override protected int getExpectedAttributeCount(){
    return 4;
  }
  @Override protected String getApplicationContextPath(){
    return "org/springframework/jmx/export/assembler/methodExclusionAssembler.xml";
  }
  @Override protected MBeanInfoAssembler getAssembler(){
    MethodExclusionMBeanInfoAssembler assembler=new MethodExclusionMBeanInfoAssembler();
    assembler.setIgnoredMethods(new String[]{"dontExposeMe","setSuperman"});
    return assembler;
  }
  @Test public void testSupermanIsReadOnly() throws Exception {
    ModelMBeanInfo info=getMBeanInfoFromAssembler();
    ModelMBeanAttributeInfo attr=info.getAttribute("Superman");
    assertTrue(attr.isReadable());
    assertFalse(attr.isWritable());
  }
  @Test public void testIsNotIgnoredDoesntIgnoreUnspecifiedBeanMethods() throws Exception {
    final String beanKey="myTestBean";
    MethodExclusionMBeanInfoAssembler assembler=new MethodExclusionMBeanInfoAssembler();
    Properties ignored=new Properties();
    ignored.setProperty(beanKey,"dontExposeMe,setSuperman");
    assembler.setIgnoredMethodMappings(ignored);
    Method method=JmxTestBean.class.getMethod("dontExposeMe");
    assertFalse(assembler.isNotIgnored(method,beanKey));
    assertTrue(assembler.isNotIgnored(method,"someOtherBeanKey"));
  }
}
