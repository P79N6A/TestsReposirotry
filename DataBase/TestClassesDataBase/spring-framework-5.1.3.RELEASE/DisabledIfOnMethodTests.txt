@SpringJUnitConfig(Config.class) @TestPropertySource(properties="foo = true") @Nested class DisabledIfOnMethodTests {
  @Test @DisabledIf("true") void disabledIfWithStringTrue(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("   true   ") void disabledIfWithStringTrueWithSurroundingWhitespace(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("TrUe") void disabledIfWithStringTrueIgnoreCase(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("${__EnigmaPropertyShouldNotExist__:true}") void disabledIfWithPropertyPlaceholderForNonexistentPropertyWithDefaultValue(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf(expression="${foo}",loadContext=true) void disabledIfWithPropertyPlaceholder(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf(expression="\t${foo}   ",loadContext=true) void disabledIfWithPropertyPlaceholderWithSurroundingWhitespace(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("#{T(Boolean).TRUE}") void disabledIfWithSpelBoolean(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("   #{T(Boolean).TRUE}   ") void disabledIfWithSpelBooleanWithSurroundingWhitespace(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("#{'tr' + 'ue'}") void disabledIfWithSpelStringConcatenation(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf("#{6 * 7 == 42}") void disabledIfWithSpelArithmeticComparison(){
    fail("This test must be disabled");
  }
  @Test @DisabledOnMac void disabledIfWithSpelOsCheckInCustomComposedAnnotation(){
    assertFalse(System.getProperty("os.name").contains("Mac"),"This test must be disabled on Mac OS");
  }
  @Test @DisabledIf(expression="#{@booleanTrueBean}",loadContext=true) void disabledIfWithSpelBooleanTrueBean(){
    fail("This test must be disabled");
  }
  @Test @DisabledIf(expression="#{@stringTrueBean}",loadContext=true) void disabledIfWithSpelStringTrueBean(){
    fail("This test must be disabled");
  }
}
