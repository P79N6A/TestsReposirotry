/** 
 * Unit tests for  {@link Jackson2SmileDecoder}.
 * @author Sebastien Deleuze
 */
public class Jackson2SmileDecoderTests extends AbstractDecoderTestCase<Jackson2SmileDecoder> {
  private final static MimeType SMILE_MIME_TYPE=new MimeType("application","x-jackson-smile");
  private final static MimeType STREAM_SMILE_MIME_TYPE=new MimeType("application","stream+x-jackson-smile");
  private Pojo pojo1=new Pojo("f1","b1");
  private Pojo pojo2=new Pojo("f2","b2");
  private ObjectMapper mapper=Jackson2ObjectMapperBuilder.smile().build();
  public Jackson2SmileDecoderTests(){
    super(new Jackson2SmileDecoder());
  }
  @Override @Test public void canDecode(){
    assertTrue(decoder.canDecode(forClass(Pojo.class),SMILE_MIME_TYPE));
    assertTrue(decoder.canDecode(forClass(Pojo.class),STREAM_SMILE_MIME_TYPE));
    assertTrue(decoder.canDecode(forClass(Pojo.class),null));
    assertFalse(decoder.canDecode(forClass(String.class),null));
    assertFalse(decoder.canDecode(forClass(Pojo.class),APPLICATION_JSON));
  }
  @Override public void decode(){
    Flux<DataBuffer> input=Flux.just(this.pojo1,this.pojo2).map(this::writeObject).flatMap(this::dataBuffer);
    testDecodeAll(input,Pojo.class,step -> step.expectNext(pojo1).expectNext(pojo2).verifyComplete());
  }
  private byte[] writeObject(  Object o){
    try {
      return this.mapper.writer().writeValueAsBytes(o);
    }
 catch (    JsonProcessingException e) {
      throw new AssertionError(e);
    }
  }
  @Override public void decodeToMono(){
    List<Pojo> expected=Arrays.asList(pojo1,pojo2);
    Flux<DataBuffer> input=Flux.just(expected).map(this::writeObject).flatMap(this::dataBuffer);
    ResolvableType elementType=ResolvableType.forClassWithGenerics(List.class,Pojo.class);
    testDecodeToMono(input,elementType,step -> step.expectNext(expected).expectComplete().verify(),null,null);
  }
}
