private static class TestExceptionHandlerMethodResolver extends AbstractExceptionHandlerMethodResolver {
  public TestExceptionHandlerMethodResolver(  Class<?> handlerType){
    super(initExceptionMappings(handlerType));
  }
  private static Map<Class<? extends Throwable>,Method> initExceptionMappings(  Class<?> handlerType){
    Map<Class<? extends Throwable>,Method> result=new HashMap<>();
    for (    Method method : MethodIntrospector.selectMethods(handlerType,EXCEPTION_HANDLER_METHOD_FILTER)) {
      for (      Class<? extends Throwable> exception : getExceptionsFromMethodSignature(method)) {
        result.put(exception,method);
      }
    }
    return result;
  }
  public final static MethodFilter EXCEPTION_HANDLER_METHOD_FILTER=new MethodFilter(){
    @Override public boolean matches(    Method method){
      return method.getName().contains("Exception");
    }
  }
;
}
