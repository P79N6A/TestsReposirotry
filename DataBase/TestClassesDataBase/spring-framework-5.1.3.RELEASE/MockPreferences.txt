/** 
 * Mock implementation of  {@link Preferences} that behaves the same regardless of theunderlying operating system and will never throw security exceptions.
 */
public static class MockPreferences extends AbstractPreferences {
  private static Map<String,String> values=new HashMap<>();
  private static Map<String,AbstractPreferences> children=new HashMap<>();
  public MockPreferences(){
    super(null,"");
  }
  protected MockPreferences(  AbstractPreferences parent,  String name){
    super(parent,name);
  }
  @Override protected void putSpi(  String key,  String value){
    values.put(key,value);
  }
  @Override protected String getSpi(  String key){
    return values.get(key);
  }
  @Override protected void removeSpi(  String key){
    values.remove(key);
  }
  @Override protected void removeNodeSpi() throws BackingStoreException {
  }
  @Override protected String[] keysSpi() throws BackingStoreException {
    return StringUtils.toStringArray(values.keySet());
  }
  @Override protected String[] childrenNamesSpi() throws BackingStoreException {
    return StringUtils.toStringArray(children.keySet());
  }
  @Override protected AbstractPreferences childSpi(  String name){
    AbstractPreferences child=children.get(name);
    if (child == null) {
      child=new MockPreferences(this,name);
      children.put(name,child);
    }
    return child;
  }
  @Override protected void syncSpi() throws BackingStoreException {
  }
  @Override protected void flushSpi() throws BackingStoreException {
  }
}
