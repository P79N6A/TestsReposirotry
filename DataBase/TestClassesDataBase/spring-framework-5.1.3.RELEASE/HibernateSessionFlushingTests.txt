/** 
 * Transactional integration tests regarding <i>manual</i> session flushing with Hibernate.
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @author Vlad Mihalcea
 * @since 3.0
 */
@ContextConfiguration public class HibernateSessionFlushingTests extends AbstractTransactionalJUnit4SpringContextTests {
  private static final String SAM="Sam";
  private static final String JUERGEN="Juergen";
  @Autowired private PersonService personService;
  @Autowired private SessionFactory sessionFactory;
  @Before public void setup(){
    assertInTransaction(true);
    assertNotNull("PersonService should have been autowired.",personService);
    assertNotNull("SessionFactory should have been autowired.",sessionFactory);
  }
  @Test public void findSam(){
    Person sam=personService.findByName(SAM);
    assertNotNull("Should be able to find Sam",sam);
    DriversLicense driversLicense=sam.getDriversLicense();
    assertNotNull("Sam's driver's license should not be null",driversLicense);
    assertEquals("Verifying Sam's driver's license number",Long.valueOf(1234),driversLicense.getNumber());
  }
  @Test @Transactional(readOnly=true) public void findSamWithReadOnlySession(){
    Person sam=personService.findByName(SAM);
    sam.setName("Vlad");
    Session session=sessionFactory.getCurrentSession();
    session.flush();
    session.refresh(sam);
    assertEquals("Sam",sam.getName());
  }
  @Test public void saveJuergenWithDriversLicense(){
    DriversLicense driversLicense=new DriversLicense(2L,2222L);
    Person juergen=new Person(JUERGEN,driversLicense);
    int numRows=countRowsInTable("person");
    personService.save(juergen);
    assertEquals("Verifying number of rows in the 'person' table.",numRows + 1,countRowsInTable("person"));
    assertNotNull("Should be able to save and retrieve Juergen",personService.findByName(JUERGEN));
    assertNotNull("Juergen's ID should have been set",juergen.getId());
  }
  @Test(expected=ConstraintViolationException.class) public void saveJuergenWithNullDriversLicense(){
    personService.save(new Person(JUERGEN));
  }
  @Test public void updateSamWithNullDriversLicenseWithoutSessionFlush(){
    updateSamWithNullDriversLicense();
  }
  @Test(expected=ConstraintViolationException.class) public void updateSamWithNullDriversLicenseWithSessionFlush() throws Throwable {
    updateSamWithNullDriversLicense();
    try {
      sessionFactory.getCurrentSession().flush();
    }
 catch (    PersistenceException ex) {
      throw ex.getCause();
    }
  }
  private void updateSamWithNullDriversLicense(){
    Person sam=personService.findByName(SAM);
    assertNotNull("Should be able to find Sam",sam);
    sam.setDriversLicense(null);
    personService.save(sam);
  }
}
