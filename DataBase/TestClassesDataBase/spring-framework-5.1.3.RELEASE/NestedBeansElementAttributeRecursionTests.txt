/** 
 * Tests for propagating enclosing beans element defaults to nested beans elements.
 * @author Chris Beams
 */
public class NestedBeansElementAttributeRecursionTests {
  @Test public void defaultLazyInit(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-lazy-context.xml",this.getClass()));
    BeanDefinition foo=bf.getBeanDefinition("foo");
    BeanDefinition bar=bf.getBeanDefinition("bar");
    BeanDefinition baz=bf.getBeanDefinition("baz");
    BeanDefinition biz=bf.getBeanDefinition("biz");
    BeanDefinition buz=bf.getBeanDefinition("buz");
    assertThat(foo.isLazyInit(),is(false));
    assertThat(bar.isLazyInit(),is(true));
    assertThat(baz.isLazyInit(),is(false));
    assertThat(biz.isLazyInit(),is(true));
    assertThat(buz.isLazyInit(),is(true));
  }
  @Test @SuppressWarnings("unchecked") public void defaultMerge(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-merge-context.xml",this.getClass()));
    TestBean topLevel=bf.getBean("topLevelConcreteTestBean",TestBean.class);
    assertThat((Iterable<String>)topLevel.getSomeList(),hasItems("charlie","delta"));
    assertThat((Iterable<String>)topLevel.getSomeList(),not(hasItems("alpha","bravo")));
    TestBean firstLevel=bf.getBean("firstLevelNestedTestBean",TestBean.class);
    assertThat((Iterable<String>)firstLevel.getSomeList(),hasItems("charlie","delta","echo","foxtrot"));
    TestBean secondLevel=bf.getBean("secondLevelNestedTestBean",TestBean.class);
    assertThat((Iterable<String>)secondLevel.getSomeList(),hasItems("charlie","delta","echo","foxtrot","golf","hotel"));
  }
  @Test public void defaultAutowireCandidates(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-autowire-candidates-context.xml",this.getClass()));
    assertThat(bf.getBeanDefinition("fooService").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("fooRepository").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("other").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("barService").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("fooController").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("bizRepository").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("bizService").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("bazService").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("random").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("fooComponent").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("fRepository").isAutowireCandidate(),is(false));
    assertThat(bf.getBeanDefinition("aComponent").isAutowireCandidate(),is(true));
    assertThat(bf.getBeanDefinition("someService").isAutowireCandidate(),is(false));
  }
  @Test public void initMethod(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-init-destroy-context.xml",this.getClass()));
    InitDestroyBean beanA=bf.getBean("beanA",InitDestroyBean.class);
    InitDestroyBean beanB=bf.getBean("beanB",InitDestroyBean.class);
    InitDestroyBean beanC=bf.getBean("beanC",InitDestroyBean.class);
    InitDestroyBean beanD=bf.getBean("beanD",InitDestroyBean.class);
    assertThat(beanA.initMethod1Called,is(true));
    assertThat(beanB.initMethod2Called,is(true));
    assertThat(beanC.initMethod3Called,is(true));
    assertThat(beanD.initMethod2Called,is(true));
    bf.destroySingletons();
    assertThat(beanA.destroyMethod1Called,is(true));
    assertThat(beanB.destroyMethod2Called,is(true));
    assertThat(beanC.destroyMethod3Called,is(true));
    assertThat(beanD.destroyMethod2Called,is(true));
  }
}
