private static class NestedHandler {
  public Mono<ServerResponse> pattern(  ServerRequest request){
    String pattern=matchingPattern(request).getPatternString();
    return ServerResponse.ok().syncBody(pattern);
  }
  @SuppressWarnings("unchecked") public Mono<ServerResponse> variables(  ServerRequest request){
    Map<String,String> pathVariables=request.pathVariables();
    Map<String,String> attributePathVariables=(Map<String,String>)request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
    assertTrue((pathVariables.equals(attributePathVariables)) || (pathVariables.isEmpty() && (attributePathVariables == null)));
    PathPattern pathPattern=matchingPattern(request);
    String pattern=pathPattern != null ? pathPattern.getPatternString() : "";
    Flux<String> responseBody;
    if (!pattern.isEmpty()) {
      responseBody=Flux.just(pattern,"\n",pathVariables.toString());
    }
 else {
      responseBody=Flux.just(pathVariables.toString());
    }
    return ServerResponse.ok().body(responseBody,String.class);
  }
  @Nullable private PathPattern matchingPattern(  ServerRequest request){
    return (PathPattern)request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);
  }
}
