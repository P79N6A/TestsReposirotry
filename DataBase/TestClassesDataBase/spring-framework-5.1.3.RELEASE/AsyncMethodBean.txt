public static class AsyncMethodBean {
  public void doNothing(  int i){
    assertTrue(Thread.currentThread().getName().equals(originalThreadName));
  }
  @Async public void doSomething(  int i){
    assertTrue(!Thread.currentThread().getName().equals(originalThreadName));
  }
  @Async public Future<String> returnSomething(  int i){
    assertTrue(!Thread.currentThread().getName().equals(originalThreadName));
    if (i == 0) {
      throw new IllegalArgumentException();
    }
 else     if (i < 0) {
      return AsyncResult.forExecutionException(new IOException());
    }
    return AsyncResult.forValue(Integer.toString(i));
  }
  @Async public ListenableFuture<String> returnSomethingListenable(  int i){
    assertTrue(!Thread.currentThread().getName().equals(originalThreadName));
    if (i == 0) {
      throw new IllegalArgumentException();
    }
 else     if (i < 0) {
      return AsyncResult.forExecutionException(new IOException());
    }
    return new AsyncResult<>(Integer.toString(i));
  }
  @Async public CompletableFuture<String> returnSomethingCompletable(  int i){
    assertTrue(!Thread.currentThread().getName().equals(originalThreadName));
    if (i == 0) {
      throw new IllegalArgumentException();
    }
    return CompletableFuture.completedFuture(Integer.toString(i));
  }
}
