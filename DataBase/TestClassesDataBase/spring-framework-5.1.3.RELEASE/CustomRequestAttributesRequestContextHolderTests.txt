/** 
 * Integration tests for SPR-13211 which verify that a custom mock request is not reused by MockMvc.
 * @author Sam Brannen
 * @since 4.2
 * @see RequestContextHolderTests
 */
public class CustomRequestAttributesRequestContextHolderTests {
  private static final String FROM_CUSTOM_MOCK="fromCustomMock";
  private static final String FROM_MVC_TEST_DEFAULT="fromSpringMvcTestDefault";
  private static final String FROM_MVC_TEST_MOCK="fromSpringMvcTestMock";
  private final GenericWebApplicationContext wac=new GenericWebApplicationContext();
  private MockMvc mockMvc;
  @Before public void setUp(){
    ServletContext servletContext=new MockServletContext();
    MockHttpServletRequest mockRequest=new MockHttpServletRequest(servletContext);
    mockRequest.setAttribute(FROM_CUSTOM_MOCK,FROM_CUSTOM_MOCK);
    RequestContextHolder.setRequestAttributes(new ServletWebRequest(mockRequest,new MockHttpServletResponse()));
    this.wac.setServletContext(servletContext);
    new AnnotatedBeanDefinitionReader(this.wac).register(WebConfig.class);
    this.wac.refresh();
    this.mockMvc=webAppContextSetup(this.wac).defaultRequest(get("/").requestAttr(FROM_MVC_TEST_DEFAULT,FROM_MVC_TEST_DEFAULT)).alwaysExpect(status().isOk()).build();
  }
  @Test public void singletonController() throws Exception {
    this.mockMvc.perform(get("/singletonController").requestAttr(FROM_MVC_TEST_MOCK,FROM_MVC_TEST_MOCK));
  }
  @After public void verifyCustomRequestAttributesAreRestored(){
    RequestAttributes requestAttributes=RequestContextHolder.getRequestAttributes();
    assertThat(requestAttributes,instanceOf(ServletRequestAttributes.class));
    HttpServletRequest request=((ServletRequestAttributes)requestAttributes).getRequest();
    assertThat(request.getAttribute(FROM_CUSTOM_MOCK),is(FROM_CUSTOM_MOCK));
    assertThat(request.getAttribute(FROM_MVC_TEST_DEFAULT),is(nullValue()));
    assertThat(request.getAttribute(FROM_MVC_TEST_MOCK),is(nullValue()));
    RequestContextHolder.resetRequestAttributes();
    this.wac.close();
  }
@Configuration @EnableWebMvc static class WebConfig implements WebMvcConfigurer {
    @Bean public SingletonController singletonController(){
      return new SingletonController();
    }
  }
@RestController private static class SingletonController {
    @RequestMapping("/singletonController") public void handle(){
      assertRequestAttributes();
    }
  }
  private static void assertRequestAttributes(){
    RequestAttributes requestAttributes=RequestContextHolder.getRequestAttributes();
    assertThat(requestAttributes,instanceOf(ServletRequestAttributes.class));
    assertRequestAttributes(((ServletRequestAttributes)requestAttributes).getRequest());
  }
  private static void assertRequestAttributes(  ServletRequest request){
    assertThat(request.getAttribute(FROM_CUSTOM_MOCK),is(nullValue()));
    assertThat(request.getAttribute(FROM_MVC_TEST_DEFAULT),is(FROM_MVC_TEST_DEFAULT));
    assertThat(request.getAttribute(FROM_MVC_TEST_MOCK),is(FROM_MVC_TEST_MOCK));
  }
}
