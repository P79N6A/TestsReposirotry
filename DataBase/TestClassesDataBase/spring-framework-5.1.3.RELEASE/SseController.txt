@RestController @SuppressWarnings("unused") @RequestMapping("/sse") static class SseController {
  private static final Flux<Long> INTERVAL=testInterval(Duration.ofMillis(100),50);
  private MonoProcessor<Void> cancellation=MonoProcessor.create();
  @GetMapping("/string") Flux<String> string(){
    return INTERVAL.map(l -> "foo " + l);
  }
  @GetMapping("/person") Flux<Person> person(){
    return INTERVAL.map(l -> new Person("foo " + l));
  }
  @GetMapping("/event") Flux<ServerSentEvent<Person>> sse(){
    return INTERVAL.take(2).map(l -> ServerSentEvent.builder(new Person("foo " + l)).id(Long.toString(l)).comment("bar " + l).build());
  }
  @GetMapping("/infinite") Flux<String> infinite(){
    return Flux.just(0,1).map(l -> "foo " + l).mergeWith(Flux.never()).doOnCancel(() -> cancellation.onComplete());
  }
}
