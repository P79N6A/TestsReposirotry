private static class TestMethodMessageHandler extends AbstractMethodMessageHandler<String> {
  private PathMatcher pathMatcher=new AntPathMatcher();
  public void registerHandler(  Object handler){
    super.detectHandlerMethods(handler);
  }
  public void registerHandlerMethod(  Object handler,  Method method,  String mapping){
    super.registerHandlerMethod(handler,method,mapping);
  }
  @Override protected List<? extends HandlerMethodArgumentResolver> initArgumentResolvers(){
    List<HandlerMethodArgumentResolver> resolvers=new ArrayList<>();
    resolvers.add(new MessageMethodArgumentResolver(new SimpleMessageConverter()));
    resolvers.addAll(getCustomArgumentResolvers());
    return resolvers;
  }
  @Override protected List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers(){
    List<HandlerMethodReturnValueHandler> handlers=new ArrayList<>();
    handlers.addAll(getCustomReturnValueHandlers());
    return handlers;
  }
  @Override protected boolean isHandler(  Class<?> beanType){
    return beanType.getName().contains("Controller");
  }
  @Override protected String getMappingForMethod(  Method method,  Class<?> handlerType){
    String methodName=method.getName();
    if (methodName.startsWith("handler")) {
      return "/" + methodName;
    }
    return null;
  }
  @Override protected Set<String> getDirectLookupDestinations(  String mapping){
    Set<String> result=new LinkedHashSet<>();
    if (!this.pathMatcher.isPattern(mapping)) {
      result.add(mapping);
    }
    return result;
  }
  @Override protected String getDestination(  Message<?> message){
    return (String)message.getHeaders().get(DESTINATION_HEADER);
  }
  @Override protected String getMatchingMapping(  String mapping,  Message<?> message){
    String destination=getLookupDestination(getDestination(message));
    if (mapping.equals(destination) || this.pathMatcher.match(mapping,destination)) {
      return mapping;
    }
    return null;
  }
  @Override protected Comparator<String> getMappingComparator(  final Message<?> message){
    return new Comparator<String>(){
      @Override public int compare(      String info1,      String info2){
        DestinationPatternsMessageCondition cond1=new DestinationPatternsMessageCondition(info1);
        DestinationPatternsMessageCondition cond2=new DestinationPatternsMessageCondition(info2);
        return cond1.compareTo(cond2,message);
      }
    }
;
  }
  @Override protected AbstractExceptionHandlerMethodResolver createExceptionHandlerMethodResolverFor(  Class<?> beanType){
    return new TestExceptionHandlerMethodResolver(beanType);
  }
}
