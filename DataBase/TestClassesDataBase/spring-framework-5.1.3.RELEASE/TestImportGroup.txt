public static class TestImportGroup implements DeferredImportSelector.Group, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {
  static ClassLoader classLoader;
  static ResourceLoader resourceLoader;
  static BeanFactory beanFactory;
  static Environment environment;
  static AtomicInteger instancesCount=new AtomicInteger();
  static MultiValueMap<AnnotationMetadata,String> imports=new LinkedMultiValueMap<>();
  public TestImportGroup(){
    TestImportGroup.instancesCount.incrementAndGet();
  }
  static void cleanup(){
    TestImportGroup.classLoader=null;
    TestImportGroup.beanFactory=null;
    TestImportGroup.resourceLoader=null;
    TestImportGroup.environment=null;
    TestImportGroup.instancesCount=new AtomicInteger();
    TestImportGroup.imports.clear();
  }
  static Map<String,List<String>> allImports(){
    return TestImportGroup.imports.entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getClassName(),Map.Entry::getValue));
  }
  private final List<Entry> instanceImports=new ArrayList<>();
  @Override public void process(  AnnotationMetadata metadata,  DeferredImportSelector selector){
    for (    String importClassName : selector.selectImports(metadata)) {
      this.instanceImports.add(new Entry(metadata,importClassName));
    }
    TestImportGroup.imports.addAll(metadata,Arrays.asList(selector.selectImports(metadata)));
  }
  @Override public Iterable<Entry> selectImports(){
    LinkedList<Entry> content=new LinkedList<>(this.instanceImports);
    Collections.reverse(content);
    return content;
  }
  @Override public void setBeanClassLoader(  ClassLoader classLoader){
    TestImportGroup.classLoader=classLoader;
  }
  @Override public void setBeanFactory(  BeanFactory beanFactory) throws BeansException {
    TestImportGroup.beanFactory=beanFactory;
  }
  @Override public void setResourceLoader(  ResourceLoader resourceLoader){
    TestImportGroup.resourceLoader=resourceLoader;
  }
  @Override public void setEnvironment(  Environment environment){
    TestImportGroup.environment=environment;
  }
}
