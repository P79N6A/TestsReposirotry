/** 
 * Tests for  {@link Profiles}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 * @author Sam Brannen
 * @since 5.1
 */
public class ProfilesTests {
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Test public void ofWhenNullThrowsException(){
    this.thrown.expect(IllegalArgumentException.class);
    this.thrown.expectMessage("Must specify at least one profile");
    Profiles.of((String[])null);
  }
  @Test public void ofWhenEmptyThrowsException(){
    this.thrown.expect(IllegalArgumentException.class);
    this.thrown.expectMessage("Must specify at least one profile");
    Profiles.of();
  }
  @Test public void ofNullElement(){
    this.thrown.expect(IllegalArgumentException.class);
    this.thrown.expectMessage("must contain text");
    Profiles.of((String)null);
  }
  @Test public void ofEmptyElement(){
    this.thrown.expect(IllegalArgumentException.class);
    this.thrown.expectMessage("must contain text");
    Profiles.of("  ");
  }
  @Test public void ofSingleElement(){
    Profiles profiles=Profiles.of("spring");
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertFalse(profiles.matches(activeProfiles("framework")));
  }
  @Test public void ofSingleInvertedElement(){
    Profiles profiles=Profiles.of("!spring");
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
  }
  @Test public void ofMultipleElements(){
    Profiles profiles=Profiles.of("spring","framework");
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
    assertFalse(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofMultipleElementsWithInverted(){
    Profiles profiles=Profiles.of("!spring","framework");
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("spring","framework")));
    assertTrue(profiles.matches(activeProfiles("framework")));
    assertTrue(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofMultipleElementsAllInverted(){
    Profiles profiles=Profiles.of("!spring","!framework");
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
    assertTrue(profiles.matches(activeProfiles("java")));
    assertFalse(profiles.matches(activeProfiles("spring","framework")));
    assertFalse(profiles.matches(activeProfiles("spring","framework","java")));
  }
  @Test public void ofSingleExpression(){
    Profiles profiles=Profiles.of("(spring)");
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertFalse(profiles.matches(activeProfiles("framework")));
  }
  @Test public void ofSingleExpressionInverted(){
    Profiles profiles=Profiles.of("!(spring)");
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
  }
  @Test public void ofSingleInvertedExpression(){
    Profiles profiles=Profiles.of("(!spring)");
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
  }
  @Test public void ofOrExpression(){
    Profiles profiles=Profiles.of("(spring | framework)");
    assertOrExpression(profiles);
  }
  @Test public void ofOrExpressionWithoutSpaces(){
    Profiles profiles=Profiles.of("(spring|framework)");
    assertOrExpression(profiles);
  }
  private void assertOrExpression(  Profiles profiles){
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
    assertTrue(profiles.matches(activeProfiles("spring","framework")));
    assertFalse(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofAndExpression(){
    Profiles profiles=Profiles.of("(spring & framework)");
    assertAndExpression(profiles);
  }
  @Test public void ofAndExpressionWithoutSpaces(){
    Profiles profiles=Profiles.of("spring&framework)");
    assertAndExpression(profiles);
  }
  @Test public void ofAndExpressionWithoutParentheses(){
    Profiles profiles=Profiles.of("spring & framework");
    assertAndExpression(profiles);
  }
  private void assertAndExpression(  Profiles profiles){
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertFalse(profiles.matches(activeProfiles("framework")));
    assertTrue(profiles.matches(activeProfiles("spring","framework")));
    assertFalse(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofNotAndExpression(){
    Profiles profiles=Profiles.of("!(spring & framework)");
    assertOfNotAndExpression(profiles);
  }
  @Test public void ofNotAndExpressionWithoutSpaces(){
    Profiles profiles=Profiles.of("!(spring&framework)");
    assertOfNotAndExpression(profiles);
  }
  private void assertOfNotAndExpression(  Profiles profiles){
    assertTrue(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("framework")));
    assertFalse(profiles.matches(activeProfiles("spring","framework")));
    assertTrue(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofNotOrExpression(){
    Profiles profiles=Profiles.of("!(spring | framework)");
    assertOfNotOrExpression(profiles);
  }
  @Test public void ofNotOrExpressionWithoutSpaces(){
    Profiles profiles=Profiles.of("!(spring|framework)");
    assertOfNotOrExpression(profiles);
  }
  private void assertOfNotOrExpression(  Profiles profiles){
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertFalse(profiles.matches(activeProfiles("framework")));
    assertFalse(profiles.matches(activeProfiles("spring","framework")));
    assertTrue(profiles.matches(activeProfiles("java")));
  }
  @Test public void ofComplexExpression(){
    Profiles profiles=Profiles.of("(spring & framework) | (spring & java)");
    assertComplexExpression(profiles);
  }
  @Test public void ofComplexExpressionWithoutSpaces(){
    Profiles profiles=Profiles.of("(spring&framework)|(spring&java)");
    assertComplexExpression(profiles);
  }
  private void assertComplexExpression(  Profiles profiles){
    assertFalse(profiles.matches(activeProfiles("spring")));
    assertTrue(profiles.matches(activeProfiles("spring","framework")));
    assertTrue(profiles.matches(activeProfiles("spring","java")));
    assertFalse(profiles.matches(activeProfiles("java","framework")));
  }
  @Test public void malformedExpressions(){
    assertMalformed(() -> Profiles.of("("));
    assertMalformed(() -> Profiles.of(")"));
    assertMalformed(() -> Profiles.of("a & b | c"));
  }
  @Test public void sensibleToString(){
    assertEquals("spring & framework or java | kotlin",Profiles.of("spring & framework","java | kotlin").toString());
  }
  private void assertMalformed(  Supplier<Profiles> supplier){
    try {
      supplier.get();
      fail("Not malformed");
    }
 catch (    IllegalArgumentException ex) {
      assertTrue(ex.getMessage().contains("Malformed"));
    }
  }
  private static Predicate<String> activeProfiles(  String... profiles){
    return new MockActiveProfiles(profiles);
  }
private static class MockActiveProfiles implements Predicate<String> {
    private final List<String> activeProfiles;
    MockActiveProfiles(    String[] activeProfiles){
      this.activeProfiles=Arrays.asList(activeProfiles);
    }
    @Override public boolean test(    String profile){
      if (!StringUtils.hasText(profile) || profile.charAt(0) == '!') {
        throw new IllegalArgumentException("Invalid profile [" + profile + "]");
      }
      return this.activeProfiles.contains(profile);
    }
  }
}
