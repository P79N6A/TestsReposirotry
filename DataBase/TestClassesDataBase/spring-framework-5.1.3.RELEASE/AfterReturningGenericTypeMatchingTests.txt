/** 
 * Tests ensuring that after-returning advice for generic parameters bound to the advice and the return type follow AspectJ semantics. <p>See SPR-3628 for more details.
 * @author Ramnivas Laddad
 * @author Chris Beams
 */
public class AfterReturningGenericTypeMatchingTests {
  private GenericReturnTypeVariationClass testBean;
  private CounterAspect counterAspect;
  @Before public void setup(){
    ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(getClass().getSimpleName() + "-context.xml",getClass());
    counterAspect=(CounterAspect)ctx.getBean("counterAspect");
    counterAspect.reset();
    testBean=(GenericReturnTypeVariationClass)ctx.getBean("testBean");
  }
  @Test public void testReturnTypeExactMatching(){
    testBean.getStrings();
    assertEquals(1,counterAspect.getStringsInvocationsCount);
    assertEquals(0,counterAspect.getIntegersInvocationsCount);
    counterAspect.reset();
    testBean.getIntegers();
    assertEquals(0,counterAspect.getStringsInvocationsCount);
    assertEquals(1,counterAspect.getIntegersInvocationsCount);
  }
  @Test public void testReturnTypeRawMatching(){
    testBean.getStrings();
    assertEquals(1,counterAspect.getRawsInvocationsCount);
    counterAspect.reset();
    testBean.getIntegers();
    assertEquals(1,counterAspect.getRawsInvocationsCount);
  }
  @Test public void testReturnTypeUpperBoundMatching(){
    testBean.getIntegers();
    assertEquals(1,counterAspect.getNumbersInvocationsCount);
  }
  @Test public void testReturnTypeLowerBoundMatching(){
    testBean.getTestBeans();
    assertEquals(1,counterAspect.getTestBeanInvocationsCount);
    counterAspect.reset();
    testBean.getEmployees();
    assertEquals(0,counterAspect.getTestBeanInvocationsCount);
  }
}
