@SuppressWarnings("serial") private static class MockFileItem implements FileItem {
  private String fieldName;
  private String contentType;
  private String name;
  private String value;
  private File writtenFile;
  private boolean deleted;
  public MockFileItem(  String fieldName,  String contentType,  String name,  String value){
    this.fieldName=fieldName;
    this.contentType=contentType;
    this.name=name;
    this.value=value;
  }
  @Override public InputStream getInputStream() throws IOException {
    return new ByteArrayInputStream(value.getBytes());
  }
  @Override public String getContentType(){
    return contentType;
  }
  @Override public String getName(){
    return name;
  }
  @Override public boolean isInMemory(){
    return true;
  }
  @Override public long getSize(){
    return value.length();
  }
  @Override public byte[] get(){
    return value.getBytes();
  }
  @Override public String getString(  String encoding) throws UnsupportedEncodingException {
    return new String(get(),encoding);
  }
  @Override public String getString(){
    return value;
  }
  @Override public void write(  File file) throws Exception {
    this.writtenFile=file;
  }
  @Override public void delete(){
    this.deleted=true;
  }
  @Override public String getFieldName(){
    return fieldName;
  }
  @Override public void setFieldName(  String s){
    this.fieldName=s;
  }
  @Override public boolean isFormField(){
    return (this.name == null);
  }
  @Override public void setFormField(  boolean b){
    throw new UnsupportedOperationException();
  }
  @Override public OutputStream getOutputStream() throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public FileItemHeaders getHeaders(){
    throw new UnsupportedOperationException();
  }
  @Override public void setHeaders(  FileItemHeaders headers){
    throw new UnsupportedOperationException();
  }
}
