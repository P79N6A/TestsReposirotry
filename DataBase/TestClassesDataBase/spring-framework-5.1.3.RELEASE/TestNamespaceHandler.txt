/** 
 * Custom namespace handler implementation.
 * @author Rob Harrop
 */
final class TestNamespaceHandler extends NamespaceHandlerSupport {
  @Override public void init(){
    registerBeanDefinitionParser("testBean",new TestBeanDefinitionParser());
    registerBeanDefinitionParser("person",new PersonDefinitionParser());
    registerBeanDefinitionDecorator("set",new PropertyModifyingBeanDefinitionDecorator());
    registerBeanDefinitionDecorator("debug",new DebugBeanDefinitionDecorator());
    registerBeanDefinitionDecorator("nop",new NopInterceptorBeanDefinitionDecorator());
    registerBeanDefinitionDecoratorForAttribute("object-name",new ObjectNameBeanDefinitionDecorator());
  }
private static class TestBeanDefinitionParser implements BeanDefinitionParser {
    @Override public BeanDefinition parse(    Element element,    ParserContext parserContext){
      RootBeanDefinition definition=new RootBeanDefinition();
      definition.setBeanClass(TestBean.class);
      MutablePropertyValues mpvs=new MutablePropertyValues();
      mpvs.add("name",element.getAttribute("name"));
      mpvs.add("age",element.getAttribute("age"));
      definition.setPropertyValues(mpvs);
      parserContext.getRegistry().registerBeanDefinition(element.getAttribute("id"),definition);
      return null;
    }
  }
private static final class PersonDefinitionParser extends AbstractSingleBeanDefinitionParser {
    @Override protected Class<?> getBeanClass(    Element element){
      return TestBean.class;
    }
    @Override protected void doParse(    Element element,    BeanDefinitionBuilder builder){
      builder.addPropertyValue("name",element.getAttribute("name"));
      builder.addPropertyValue("age",element.getAttribute("age"));
    }
  }
private static class PropertyModifyingBeanDefinitionDecorator implements BeanDefinitionDecorator {
    @Override public BeanDefinitionHolder decorate(    Node node,    BeanDefinitionHolder definition,    ParserContext parserContext){
      Element element=(Element)node;
      BeanDefinition def=definition.getBeanDefinition();
      MutablePropertyValues mpvs=(def.getPropertyValues() == null) ? new MutablePropertyValues() : def.getPropertyValues();
      mpvs.add("name",element.getAttribute("name"));
      mpvs.add("age",element.getAttribute("age"));
      ((AbstractBeanDefinition)def).setPropertyValues(mpvs);
      return definition;
    }
  }
private static class DebugBeanDefinitionDecorator extends AbstractInterceptorDrivenBeanDefinitionDecorator {
    @Override protected BeanDefinition createInterceptorDefinition(    Node node){
      return new RootBeanDefinition(DebugInterceptor.class);
    }
  }
private static class NopInterceptorBeanDefinitionDecorator extends AbstractInterceptorDrivenBeanDefinitionDecorator {
    @Override protected BeanDefinition createInterceptorDefinition(    Node node){
      return new RootBeanDefinition(NopInterceptor.class);
    }
  }
private static class ObjectNameBeanDefinitionDecorator implements BeanDefinitionDecorator {
    @Override public BeanDefinitionHolder decorate(    Node node,    BeanDefinitionHolder definition,    ParserContext parserContext){
      Attr objectNameAttribute=(Attr)node;
      definition.getBeanDefinition().setAttribute("objectName",objectNameAttribute.getValue());
      return definition;
    }
  }
}
