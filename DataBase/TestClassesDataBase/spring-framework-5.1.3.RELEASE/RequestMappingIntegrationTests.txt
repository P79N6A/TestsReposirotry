/** 
 * Integration tests with  {@code @RequestMapping} handler methods.<p>Before adding tests here consider if they are a better fit for any of the other  {@code RequestMapping*IntegrationTests}.
 * @author Rossen Stoyanchev
 * @author Stephane Maldini
 * @since 5.0
 */
public class RequestMappingIntegrationTests extends AbstractRequestMappingIntegrationTests {
  @Override protected ApplicationContext initApplicationContext(){
    AnnotationConfigApplicationContext wac=new AnnotationConfigApplicationContext();
    wac.register(WebConfig.class,TestRestController.class,LocalConfig.class);
    wac.refresh();
    return wac;
  }
  @Test public void httpHead(){
    String url="http://localhost:" + this.port + "/text";
    HttpHeaders headers=getRestTemplate().headForHeaders(url);
    String contentType=headers.getFirst("Content-Type");
    assertNotNull(contentType);
    assertEquals("text/html;charset=utf-8",contentType.toLowerCase());
    assertEquals(3,headers.getContentLength());
  }
  @Test public void forwardedHeaders(){
    RequestEntity<Void> request=RequestEntity.get(URI.create("http://localhost:" + this.port + "/uri")).header("Forwarded","host=84.198.58.199;proto=https").build();
    ResponseEntity<String> entity=getRestTemplate().exchange(request,String.class);
    assertEquals("https://84.198.58.199/uri",entity.getBody());
  }
  @Test public void stream() throws Exception {
    String[] expected={"0","1","2","3","4"};
    assertArrayEquals(expected,performGet("/stream",new HttpHeaders(),String[].class).getBody());
  }
@Configuration @EnableWebFlux static class WebConfig {
  }
@RestController @SuppressWarnings("unused") private static class TestRestController {
    @GetMapping("/text") public String text(){
      return "Foo";
    }
    @GetMapping("/uri") public String uri(    ServerHttpRequest request){
      return request.getURI().toString();
    }
    @GetMapping("/stream") public Publisher<Long> stream(){
      return testInterval(Duration.ofMillis(50),5);
    }
  }
@Configuration static class LocalConfig {
    @Bean public ForwardedHeaderTransformer forwardedHeaderTransformer(){
      return new ForwardedHeaderTransformer();
    }
  }
}
