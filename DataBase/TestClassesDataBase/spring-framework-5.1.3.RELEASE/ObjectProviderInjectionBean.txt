public static class ObjectProviderInjectionBean {
  @Autowired private ObjectProvider<TestBean> testBeanProvider;
  private TestBean consumedTestBean;
  public TestBean getTestBean(){
    return this.testBeanProvider.getObject();
  }
  public TestBean getTestBean(  String name){
    return this.testBeanProvider.getObject(name);
  }
  public TestBean getOptionalTestBean(){
    return this.testBeanProvider.getIfAvailable();
  }
  public TestBean getOptionalTestBeanWithDefault(){
    return this.testBeanProvider.getIfAvailable(() -> new TestBean("default"));
  }
  public TestBean consumeOptionalTestBean(){
    this.testBeanProvider.ifAvailable(tb -> consumedTestBean=tb);
    return consumedTestBean;
  }
  public TestBean getUniqueTestBean(){
    return this.testBeanProvider.getIfUnique();
  }
  public TestBean getUniqueTestBeanWithDefault(){
    return this.testBeanProvider.getIfUnique(() -> new TestBean("default"));
  }
  public TestBean consumeUniqueTestBean(){
    this.testBeanProvider.ifUnique(tb -> consumedTestBean=tb);
    return consumedTestBean;
  }
  public List<TestBean> iterateTestBeans(){
    List<TestBean> resolved=new LinkedList<>();
    for (    TestBean tb : this.testBeanProvider) {
      resolved.add(tb);
    }
    return resolved;
  }
  public List<TestBean> forEachTestBeans(){
    List<TestBean> resolved=new LinkedList<>();
    this.testBeanProvider.forEach(resolved::add);
    return resolved;
  }
  public List<TestBean> streamTestBeans(){
    return this.testBeanProvider.stream().collect(Collectors.toList());
  }
  public List<TestBean> sortedTestBeans(){
    return this.testBeanProvider.orderedStream().collect(Collectors.toList());
  }
}
