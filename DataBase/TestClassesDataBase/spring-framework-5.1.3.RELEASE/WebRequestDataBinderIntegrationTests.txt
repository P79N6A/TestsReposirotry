/** 
 * @author Brian Clozel
 * @author Sam Brannen
 */
public class WebRequestDataBinderIntegrationTests {
  private static Server jettyServer;
  private static final PartsServlet partsServlet=new PartsServlet();
  private static final PartListServlet partListServlet=new PartListServlet();
  private final RestTemplate template=new RestTemplate(new HttpComponentsClientHttpRequestFactory());
  protected static String baseUrl;
  protected static MediaType contentType;
  @BeforeClass public static void startJettyServer() throws Exception {
    jettyServer=new Server(0);
    ServletContextHandler handler=new ServletContextHandler();
    MultipartConfigElement multipartConfig=new MultipartConfigElement("");
    ServletHolder holder=new ServletHolder(partsServlet);
    holder.getRegistration().setMultipartConfig(multipartConfig);
    handler.addServlet(holder,"/parts");
    holder=new ServletHolder(partListServlet);
    holder.getRegistration().setMultipartConfig(multipartConfig);
    handler.addServlet(holder,"/partlist");
    jettyServer.setHandler(handler);
    jettyServer.start();
    Connector[] connectors=jettyServer.getConnectors();
    NetworkConnector connector=(NetworkConnector)connectors[0];
    baseUrl="http://localhost:" + connector.getLocalPort();
  }
  @AfterClass public static void stopJettyServer() throws Exception {
    if (jettyServer != null) {
      jettyServer.stop();
    }
  }
  @Test public void partsBinding(){
    PartsBean bean=new PartsBean();
    partsServlet.setBean(bean);
    MultiValueMap<String,Object> parts=new LinkedMultiValueMap<>();
    Resource firstPart=new ClassPathResource("/org/springframework/http/converter/logo.jpg");
    parts.add("firstPart",firstPart);
    parts.add("secondPart","secondValue");
    template.postForLocation(baseUrl + "/parts",parts);
    assertNotNull(bean.getFirstPart());
    assertNotNull(bean.getSecondPart());
  }
  @Test public void partListBinding(){
    PartListBean bean=new PartListBean();
    partListServlet.setBean(bean);
    MultiValueMap<String,Object> parts=new LinkedMultiValueMap<>();
    parts.add("partList","first value");
    parts.add("partList","second value");
    Resource logo=new ClassPathResource("/org/springframework/http/converter/logo.jpg");
    parts.add("partList",logo);
    template.postForLocation(baseUrl + "/partlist",parts);
    assertNotNull(bean.getPartList());
    assertEquals(parts.get("partList").size(),bean.getPartList().size());
  }
@SuppressWarnings("serial") private abstract static class AbstractStandardMultipartServlet<T> extends HttpServlet {
    private T bean;
    @Override public void service(    HttpServletRequest request,    HttpServletResponse response){
      WebRequestDataBinder binder=new WebRequestDataBinder(bean);
      ServletWebRequest webRequest=new ServletWebRequest(request,response);
      binder.bind(webRequest);
      response.setStatus(HttpServletResponse.SC_OK);
    }
    public void setBean(    T bean){
      this.bean=bean;
    }
  }
private static class PartsBean {
    public Part firstPart;
    public Part secondPart;
    public Part getFirstPart(){
      return firstPart;
    }
    @SuppressWarnings("unused") public void setFirstPart(    Part firstPart){
      this.firstPart=firstPart;
    }
    public Part getSecondPart(){
      return secondPart;
    }
    @SuppressWarnings("unused") public void setSecondPart(    Part secondPart){
      this.secondPart=secondPart;
    }
  }
@SuppressWarnings("serial") private static class PartsServlet extends AbstractStandardMultipartServlet<PartsBean> {
  }
private static class PartListBean {
    public List<Part> partList;
    public List<Part> getPartList(){
      return partList;
    }
    @SuppressWarnings("unused") public void setPartList(    List<Part> partList){
      this.partList=partList;
    }
  }
@SuppressWarnings("serial") private static class PartListServlet extends AbstractStandardMultipartServlet<PartListBean> {
  }
}
