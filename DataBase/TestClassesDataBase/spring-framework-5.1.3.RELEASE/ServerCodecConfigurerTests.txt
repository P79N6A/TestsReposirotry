/** 
 * Unit tests for  {@link ServerCodecConfigurer}.
 * @author Rossen Stoyanchev
 */
public class ServerCodecConfigurerTests {
  private final ServerCodecConfigurer configurer=new DefaultServerCodecConfigurer();
  private final AtomicInteger index=new AtomicInteger(0);
  @Test public void defaultReaders(){
    List<HttpMessageReader<?>> readers=this.configurer.getReaders();
    assertEquals(13,readers.size());
    assertEquals(ByteArrayDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(ByteBufferDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(DataBufferDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(ResourceDecoder.class,getNextDecoder(readers).getClass());
    assertStringDecoder(getNextDecoder(readers),true);
    assertEquals(ProtobufDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(FormHttpMessageReader.class,readers.get(this.index.getAndIncrement()).getClass());
    assertEquals(SynchronossPartHttpMessageReader.class,readers.get(this.index.getAndIncrement()).getClass());
    assertEquals(MultipartHttpMessageReader.class,readers.get(this.index.getAndIncrement()).getClass());
    assertEquals(Jackson2JsonDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(Jackson2SmileDecoder.class,getNextDecoder(readers).getClass());
    assertEquals(Jaxb2XmlDecoder.class,getNextDecoder(readers).getClass());
    assertStringDecoder(getNextDecoder(readers),false);
  }
  @Test public void defaultWriters(){
    List<HttpMessageWriter<?>> writers=this.configurer.getWriters();
    assertEquals(11,writers.size());
    assertEquals(ByteArrayEncoder.class,getNextEncoder(writers).getClass());
    assertEquals(ByteBufferEncoder.class,getNextEncoder(writers).getClass());
    assertEquals(DataBufferEncoder.class,getNextEncoder(writers).getClass());
    assertEquals(ResourceHttpMessageWriter.class,writers.get(index.getAndIncrement()).getClass());
    assertStringEncoder(getNextEncoder(writers),true);
    assertEquals(ProtobufHttpMessageWriter.class,writers.get(index.getAndIncrement()).getClass());
    assertEquals(Jackson2JsonEncoder.class,getNextEncoder(writers).getClass());
    assertEquals(Jackson2SmileEncoder.class,getNextEncoder(writers).getClass());
    assertEquals(Jaxb2XmlEncoder.class,getNextEncoder(writers).getClass());
    assertSseWriter(writers);
    assertStringEncoder(getNextEncoder(writers),false);
  }
  @Test public void jackson2EncoderOverride(){
    Jackson2JsonEncoder encoder=new Jackson2JsonEncoder();
    this.configurer.defaultCodecs().jackson2JsonEncoder(encoder);
    assertSame(encoder,this.configurer.getWriters().stream().filter(writer -> ServerSentEventHttpMessageWriter.class.equals(writer.getClass())).map(writer -> (ServerSentEventHttpMessageWriter)writer).findFirst().map(ServerSentEventHttpMessageWriter::getEncoder).filter(e -> e == encoder).orElse(null));
  }
  private Decoder<?> getNextDecoder(  List<HttpMessageReader<?>> readers){
    HttpMessageReader<?> reader=readers.get(this.index.getAndIncrement());
    assertEquals(DecoderHttpMessageReader.class,reader.getClass());
    return ((DecoderHttpMessageReader<?>)reader).getDecoder();
  }
  private Encoder<?> getNextEncoder(  List<HttpMessageWriter<?>> writers){
    HttpMessageWriter<?> writer=writers.get(this.index.getAndIncrement());
    assertEquals(EncoderHttpMessageWriter.class,writer.getClass());
    return ((EncoderHttpMessageWriter<?>)writer).getEncoder();
  }
  @SuppressWarnings("unchecked") private void assertStringDecoder(  Decoder<?> decoder,  boolean textOnly){
    assertEquals(StringDecoder.class,decoder.getClass());
    assertTrue(decoder.canDecode(forClass(String.class),MimeTypeUtils.TEXT_PLAIN));
    assertEquals(!textOnly,decoder.canDecode(forClass(String.class),MediaType.TEXT_EVENT_STREAM));
    Flux<String> flux=(Flux<String>)decoder.decode(Flux.just(new DefaultDataBufferFactory().wrap("line1\nline2".getBytes(StandardCharsets.UTF_8))),ResolvableType.forClass(String.class),MimeTypeUtils.TEXT_PLAIN,Collections.emptyMap());
    assertEquals(Arrays.asList("line1","line2"),flux.collectList().block(Duration.ZERO));
  }
  private void assertStringEncoder(  Encoder<?> encoder,  boolean textOnly){
    assertEquals(CharSequenceEncoder.class,encoder.getClass());
    assertTrue(encoder.canEncode(forClass(String.class),MimeTypeUtils.TEXT_PLAIN));
    assertEquals(!textOnly,encoder.canEncode(forClass(String.class),MediaType.TEXT_EVENT_STREAM));
  }
  private void assertSseWriter(  List<HttpMessageWriter<?>> writers){
    HttpMessageWriter<?> writer=writers.get(this.index.getAndIncrement());
    assertEquals(ServerSentEventHttpMessageWriter.class,writer.getClass());
    Encoder<?> encoder=((ServerSentEventHttpMessageWriter)writer).getEncoder();
    assertNotNull(encoder);
    assertEquals(Jackson2JsonEncoder.class,encoder.getClass());
  }
}
