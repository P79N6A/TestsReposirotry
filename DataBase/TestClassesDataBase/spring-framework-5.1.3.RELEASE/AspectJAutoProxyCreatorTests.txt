/** 
 * Integration tests for AspectJ auto-proxying. Includes mixing with Spring AOP Advisors to demonstrate that existing autoproxying contract is honoured.
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Chris Beams
 * @author Sam Brannen
 */
public class AspectJAutoProxyCreatorTests {
  private static final Log factoryLog=LogFactory.getLog(DefaultListableBeanFactory.class);
  @Test public void testAspectsAreApplied(){
    ClassPathXmlApplicationContext bf=newContext("aspects.xml");
    ITestBean tb=(ITestBean)bf.getBean("adrian");
    assertEquals(68,tb.getAge());
    MethodInvokingFactoryBean factoryBean=(MethodInvokingFactoryBean)bf.getBean("&factoryBean");
    assertTrue(AopUtils.isAopProxy(factoryBean.getTargetObject()));
    assertEquals(68,((ITestBean)factoryBean.getTargetObject()).getAge());
  }
  @Test public void testMultipleAspectsWithParameterApplied(){
    ClassPathXmlApplicationContext bf=newContext("aspects.xml");
    ITestBean tb=(ITestBean)bf.getBean("adrian");
    tb.setAge(10);
    assertEquals(20,tb.getAge());
  }
  @Test public void testAspectsAreAppliedInDefinedOrder(){
    ClassPathXmlApplicationContext bf=newContext("aspectsWithOrdering.xml");
    ITestBean tb=(ITestBean)bf.getBean("adrian");
    assertEquals(71,tb.getAge());
  }
  @Test public void testAspectsAndAdvisorAreApplied(){
    ClassPathXmlApplicationContext ac=newContext("aspectsPlusAdvisor.xml");
    ITestBean shouldBeWeaved=(ITestBean)ac.getBean("adrian");
    doTestAspectsAndAdvisorAreApplied(ac,shouldBeWeaved);
  }
  @Test public void testAspectsAndAdvisorAppliedToPrototypeIsFastEnough(){
    Assume.group(TestGroup.PERFORMANCE);
    Assume.notLogging(factoryLog);
    ClassPathXmlApplicationContext ac=newContext("aspectsPlusAdvisor.xml");
    StopWatch sw=new StopWatch();
    sw.start("Prototype Creation");
    for (int i=0; i < 10000; i++) {
      ITestBean shouldBeWeaved=(ITestBean)ac.getBean("adrian2");
      if (i < 10) {
        doTestAspectsAndAdvisorAreApplied(ac,shouldBeWeaved);
      }
    }
    sw.stop();
    assertStopWatchTimeLimit(sw,9000);
  }
  @Test public void testAspectsAndAdvisorNotAppliedToPrototypeIsFastEnough(){
    Assume.group(TestGroup.PERFORMANCE);
    Assume.notLogging(factoryLog);
    ClassPathXmlApplicationContext ac=newContext("aspectsPlusAdvisor.xml");
    StopWatch sw=new StopWatch();
    sw.start("Prototype Creation");
    for (int i=0; i < 100000; i++) {
      INestedTestBean shouldNotBeWeaved=(INestedTestBean)ac.getBean("i21");
      if (i < 10) {
        assertFalse(AopUtils.isAopProxy(shouldNotBeWeaved));
      }
    }
    sw.stop();
    assertStopWatchTimeLimit(sw,6000);
  }
  @Test public void testAspectsAndAdvisorNotAppliedToManySingletonsIsFastEnough(){
    Assume.group(TestGroup.PERFORMANCE);
    Assume.notLogging(factoryLog);
    GenericApplicationContext ac=new GenericApplicationContext();
    new XmlBeanDefinitionReader(ac).loadBeanDefinitions(new ClassPathResource(qName("aspectsPlusAdvisor.xml"),getClass()));
    for (int i=0; i < 10000; i++) {
      ac.registerBeanDefinition("singleton" + i,new RootBeanDefinition(NestedTestBean.class));
    }
    StopWatch sw=new StopWatch();
    sw.start("Singleton Creation");
    ac.refresh();
    sw.stop();
    assertStopWatchTimeLimit(sw,8000);
  }
  @Test public void testAspectsAndAdvisorAreAppliedEvenIfComingFromParentFactory(){
    ClassPathXmlApplicationContext ac=newContext("aspectsPlusAdvisor.xml");
    GenericApplicationContext childAc=new GenericApplicationContext(ac);
    RootBeanDefinition bd=new RootBeanDefinition(TestBean.class);
    bd.getPropertyValues().addPropertyValue(new PropertyValue("name","Adrian")).addPropertyValue(new PropertyValue("age",34));
    childAc.registerBeanDefinition("adrian2",bd);
    childAc.registerBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class.getName(),new RootBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class));
    childAc.refresh();
    ITestBean beanFromChildContextThatShouldBeWeaved=(ITestBean)childAc.getBean("adrian2");
    doTestAspectsAndAdvisorAreApplied(childAc,beanFromChildContextThatShouldBeWeaved);
  }
  protected void doTestAspectsAndAdvisorAreApplied(  ApplicationContext ac,  ITestBean shouldBeWeaved){
    TestBeanAdvisor tba=(TestBeanAdvisor)ac.getBean("advisor");
    MultiplyReturnValue mrv=(MultiplyReturnValue)ac.getBean("aspect");
    assertEquals(3,mrv.getMultiple());
    tba.count=0;
    mrv.invocations=0;
    assertTrue("Autoproxying must apply from @AspectJ aspect",AopUtils.isAopProxy(shouldBeWeaved));
    assertEquals("Adrian",shouldBeWeaved.getName());
    assertEquals(0,mrv.invocations);
    assertEquals(34 * mrv.getMultiple(),shouldBeWeaved.getAge());
    assertEquals("Spring advisor must be invoked",2,tba.count);
    assertEquals("Must be able to hold state in aspect",1,mrv.invocations);
  }
  @Test public void testPerThisAspect(){
    ClassPathXmlApplicationContext bf=newContext("perthis.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian1));
    assertEquals(0,adrian1.getAge());
    assertEquals(1,adrian1.getAge());
    ITestBean adrian2=(ITestBean)bf.getBean("adrian");
    assertNotSame(adrian1,adrian2);
    assertTrue(AopUtils.isAopProxy(adrian1));
    assertEquals(0,adrian2.getAge());
    assertEquals(1,adrian2.getAge());
    assertEquals(2,adrian2.getAge());
    assertEquals(3,adrian2.getAge());
    assertEquals(2,adrian1.getAge());
  }
  @Test public void testPerTargetAspect() throws SecurityException, NoSuchMethodException {
    ClassPathXmlApplicationContext bf=newContext("pertarget.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian1));
    int explicitlySetAge=25;
    adrian1.setAge(explicitlySetAge);
    assertEquals("Setter does not initiate advice",explicitlySetAge,adrian1.getAge());
    AspectMetadata am=new AspectMetadata(PerTargetAspect.class,"someBean");
    assertTrue(am.getPerClausePointcut().getMethodMatcher().matches(TestBean.class.getMethod("getSpouse"),null));
    adrian1.getSpouse();
    assertEquals("Advice has now been instantiated",0,adrian1.getAge());
    adrian1.setAge(11);
    assertEquals("Any int setter increments",2,adrian1.getAge());
    adrian1.setName("Adrian");
    ITestBean adrian2=(ITestBean)bf.getBean("adrian");
    assertNotSame(adrian1,adrian2);
    assertTrue(AopUtils.isAopProxy(adrian1));
    assertEquals(34,adrian2.getAge());
    adrian2.getSpouse();
    assertEquals("Aspect now fired",0,adrian2.getAge());
    assertEquals(1,adrian2.getAge());
    assertEquals(2,adrian2.getAge());
    assertEquals(3,adrian1.getAge());
  }
  @Test public void testTwoAdviceAspect(){
    ClassPathXmlApplicationContext bf=newContext("twoAdviceAspect.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    testAgeAspect(adrian1,0,2);
  }
  @Test public void testTwoAdviceAspectSingleton(){
    ClassPathXmlApplicationContext bf=newContext("twoAdviceAspectSingleton.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    testAgeAspect(adrian1,0,1);
    ITestBean adrian2=(ITestBean)bf.getBean("adrian");
    assertNotSame(adrian1,adrian2);
    testAgeAspect(adrian2,2,1);
  }
  @Test public void testTwoAdviceAspectPrototype(){
    ClassPathXmlApplicationContext bf=newContext("twoAdviceAspectPrototype.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    testAgeAspect(adrian1,0,1);
    ITestBean adrian2=(ITestBean)bf.getBean("adrian");
    assertNotSame(adrian1,adrian2);
    testAgeAspect(adrian2,0,1);
  }
  private void testAgeAspect(  ITestBean adrian,  int start,  int increment){
    assertTrue(AopUtils.isAopProxy(adrian));
    adrian.setName("");
    assertEquals(start,adrian.age());
    int newAge=32;
    adrian.setAge(newAge);
    assertEquals(start + increment,adrian.age());
    adrian.setAge(0);
    assertEquals(start + increment * 2,adrian.age());
  }
  @Test public void testAdviceUsingJoinPoint(){
    ClassPathXmlApplicationContext bf=newContext("usesJoinPointAspect.xml");
    ITestBean adrian1=(ITestBean)bf.getBean("adrian");
    adrian1.getAge();
    AdviceUsingThisJoinPoint aspectInstance=(AdviceUsingThisJoinPoint)bf.getBean("aspect");
    assertTrue(aspectInstance.getLastMethodEntered().indexOf("TestBean.getAge())") != 0);
  }
  @Test public void testIncludeMechanism(){
    ClassPathXmlApplicationContext bf=newContext("usesInclude.xml");
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    assertEquals(68,adrian.getAge());
  }
  @Test public void testForceProxyTargetClass(){
    ClassPathXmlApplicationContext bf=newContext("aspectsWithCGLIB.xml");
    ProxyConfig pc=(ProxyConfig)bf.getBean(AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME);
    assertTrue("should be proxying classes",pc.isProxyTargetClass());
    assertTrue("should expose proxy",pc.isExposeProxy());
  }
  @Test public void testWithAbstractFactoryBeanAreApplied(){
    ClassPathXmlApplicationContext bf=newContext("aspectsWithAbstractBean.xml");
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    assertEquals(68,adrian.getAge());
  }
  @Test public void testRetryAspect(){
    ClassPathXmlApplicationContext bf=newContext("retryAspect.xml");
    UnreliableBean bean=(UnreliableBean)bf.getBean("unreliableBean");
    RetryAspect aspect=(RetryAspect)bf.getBean("retryAspect");
    int attempts=bean.unreliable();
    assertEquals(2,attempts);
    assertEquals(2,aspect.getBeginCalls());
    assertEquals(1,aspect.getRollbackCalls());
    assertEquals(1,aspect.getCommitCalls());
  }
  @Test public void testWithBeanNameAutoProxyCreator(){
    ClassPathXmlApplicationContext bf=newContext("withBeanNameAutoProxyCreator.xml");
    ITestBean tb=(ITestBean)bf.getBean("adrian");
    assertEquals(68,tb.getAge());
  }
  /** 
 * Returns a new  {@link ClassPathXmlApplicationContext} for the file ending in <var>fileSuffix</var>.
 */
  private ClassPathXmlApplicationContext newContext(  String fileSuffix){
    return new ClassPathXmlApplicationContext(qName(fileSuffix),getClass());
  }
  /** 
 * Returns the relatively qualified name for <var>fileSuffix</var>. e.g. for a fileSuffix='foo.xml', this method will return 'AspectJAutoProxyCreatorTests-foo.xml'
 */
  private String qName(  String fileSuffix){
    return String.format("%s-%s",getClass().getSimpleName(),fileSuffix);
  }
  private void assertStopWatchTimeLimit(  final StopWatch sw,  final long maxTimeMillis){
    long totalTimeMillis=sw.getTotalTimeMillis();
    assertTrue("'" + sw.getLastTaskName() + "' took too long: expected less than<"+ maxTimeMillis+ "> ms, actual<"+ totalTimeMillis+ "> ms.",totalTimeMillis < maxTimeMillis);
  }
}
