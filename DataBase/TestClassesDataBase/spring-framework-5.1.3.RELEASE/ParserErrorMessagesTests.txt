/** 
 * Tests the messages and exceptions that come out for badly formed expressions
 * @author Andy Clement
 */
public class ParserErrorMessagesTests extends AbstractExpressionTests {
  @Test public void testBrokenExpression01(){
    parseAndCheckError("0xCAFEBABE",SpelMessage.NOT_AN_INTEGER);
    evaluate("0xCAFEBABEL",0xCAFEBABEL,Long.class);
    parseAndCheckError("0xCAFEBABECAFEBABEL",SpelMessage.NOT_A_LONG);
  }
  @Test public void testBrokenExpression02(){
    parseAndCheckError("0xB0BG",SpelMessage.MORE_INPUT,5,"G");
  }
  @Test public void testBrokenExpression04(){
    parseAndCheckError("true or ",SpelMessage.RIGHT_OPERAND_PROBLEM,5);
  }
  @Test public void testBrokenExpression05(){
    parseAndCheckError("1 + ",SpelMessage.RIGHT_OPERAND_PROBLEM,2);
  }
  @Test public void testBrokenExpression07(){
    parseAndCheckError("null instanceof T('a')",SpelMessage.NOT_EXPECTED_TOKEN,18,"qualified ID","literal_string");
  }
}
