/** 
 * Integration tests for verifying proper behavior of the  {@link ContextCache} inconjunction with cache keys used in  {@link TestContext}.
 * @author Sam Brannen
 * @author Michail Nikolaev
 * @since 3.1
 * @see LruContextCacheTests
 * @see SpringRunnerContextCacheTests
 */
public class ContextCacheTests {
  private ContextCache contextCache=new DefaultContextCache();
  @Before public void initialCacheState(){
    assertContextCacheStatistics(contextCache,"initial state",0,0,0);
    assertParentContextCount(0);
  }
  private void assertParentContextCount(  int expected){
    assertEquals("parent context count",expected,contextCache.getParentContextCount());
  }
  private MergedContextConfiguration getMergedContextConfiguration(  TestContext testContext){
    return (MergedContextConfiguration)ReflectionTestUtils.getField(testContext,"mergedContextConfiguration");
  }
  private ApplicationContext loadContext(  Class<?> testClass){
    TestContext testContext=TestContextTestUtils.buildTestContext(testClass,contextCache);
    return testContext.getApplicationContext();
  }
  private void loadCtxAndAssertStats(  Class<?> testClass,  int expectedSize,  int expectedHitCount,  int expectedMissCount){
    assertNotNull(loadContext(testClass));
    assertContextCacheStatistics(contextCache,testClass.getName(),expectedSize,expectedHitCount,expectedMissCount);
  }
  @Test public void verifyCacheKeyIsBasedOnContextLoader(){
    loadCtxAndAssertStats(AnnotationConfigContextLoaderTestCase.class,1,0,1);
    loadCtxAndAssertStats(AnnotationConfigContextLoaderTestCase.class,1,1,1);
    loadCtxAndAssertStats(CustomAnnotationConfigContextLoaderTestCase.class,2,1,2);
    loadCtxAndAssertStats(CustomAnnotationConfigContextLoaderTestCase.class,2,2,2);
    loadCtxAndAssertStats(AnnotationConfigContextLoaderTestCase.class,2,3,2);
    loadCtxAndAssertStats(CustomAnnotationConfigContextLoaderTestCase.class,2,4,2);
  }
  @Test public void verifyCacheKeyIsBasedOnActiveProfiles(){
    int size=0, hit=0, miss=0;
    loadCtxAndAssertStats(FooBarProfilesTestCase.class,++size,hit,++miss);
    loadCtxAndAssertStats(FooBarProfilesTestCase.class,size,++hit,miss);
    loadCtxAndAssertStats(BarFooProfilesTestCase.class,++size,hit,++miss);
    loadCtxAndAssertStats(FooBarProfilesTestCase.class,size,++hit,miss);
    loadCtxAndAssertStats(FooBarProfilesTestCase.class,size,++hit,miss);
    loadCtxAndAssertStats(BarFooProfilesTestCase.class,size,++hit,miss);
    loadCtxAndAssertStats(FooBarActiveProfilesResolverTestCase.class,size,++hit,miss);
  }
  @Test public void verifyCacheBehaviorForContextHierarchies(){
    int size=0;
    int hits=0;
    int misses=0;
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel1TestCase.class,++size,hits,++misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel1TestCase.class,size,++hits,misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel2TestCase.class,++size,++hits,++misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel2TestCase.class,size,++hits,misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel2TestCase.class,size,++hits,misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel3aTestCase.class,++size,++hits,++misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel3aTestCase.class,size,++hits,misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel3bTestCase.class,++size,++hits,++misses);
    loadCtxAndAssertStats(ClassHierarchyContextHierarchyLevel3bTestCase.class,size,++hits,misses);
  }
  @Test public void removeContextHierarchyCacheLevel1(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a).getParent().getParent(),HierarchyMode.CURRENT_LEVEL);
    assertContextCacheStatistics(contextCache,"removed level 1",0,1,4);
    assertParentContextCount(0);
  }
  @Test public void removeContextHierarchyCacheLevel1WithExhaustiveMode(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a).getParent().getParent(),HierarchyMode.EXHAUSTIVE);
    assertContextCacheStatistics(contextCache,"removed level 1",0,1,4);
    assertParentContextCount(0);
  }
  @Test public void removeContextHierarchyCacheLevel2(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a).getParent(),HierarchyMode.CURRENT_LEVEL);
    assertContextCacheStatistics(contextCache,"removed level 2",1,1,4);
    assertParentContextCount(0);
  }
  @Test public void removeContextHierarchyCacheLevel2WithExhaustiveMode(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a).getParent(),HierarchyMode.EXHAUSTIVE);
    assertContextCacheStatistics(contextCache,"removed level 2",0,1,4);
    assertParentContextCount(0);
  }
  @Test public void removeContextHierarchyCacheLevel3Then2(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a),HierarchyMode.CURRENT_LEVEL);
    assertContextCacheStatistics(contextCache,"removed level 3-A",3,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3b).getParent(),HierarchyMode.CURRENT_LEVEL);
    assertContextCacheStatistics(contextCache,"removed level 2",1,1,4);
    assertParentContextCount(0);
  }
  @Test public void removeContextHierarchyCacheLevel3Then2WithExhaustiveMode(){
    TestContext testContext3a=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3aTestCase.class,contextCache);
    testContext3a.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A",3,0,3);
    assertParentContextCount(2);
    TestContext testContext3b=TestContextTestUtils.buildTestContext(ClassHierarchyContextHierarchyLevel3bTestCase.class,contextCache);
    testContext3b.getApplicationContext();
    assertContextCacheStatistics(contextCache,"level 3, A and B",4,1,4);
    assertParentContextCount(2);
    contextCache.remove(getMergedContextConfiguration(testContext3a),HierarchyMode.EXHAUSTIVE);
    assertContextCacheStatistics(contextCache,"removed level 3-A",0,1,4);
    assertParentContextCount(0);
    contextCache.remove(getMergedContextConfiguration(testContext3b).getParent(),HierarchyMode.EXHAUSTIVE);
    assertContextCacheStatistics(contextCache,"removed level 2",0,1,4);
    assertParentContextCount(0);
  }
@Configuration static class Config {
  }
@ContextConfiguration(classes=Config.class,loader=AnnotationConfigContextLoader.class) private static class AnnotationConfigContextLoaderTestCase {
  }
@ContextConfiguration(classes=Config.class,loader=CustomAnnotationConfigContextLoader.class) private static class CustomAnnotationConfigContextLoaderTestCase {
  }
private static class CustomAnnotationConfigContextLoader extends AnnotationConfigContextLoader {
  }
@ActiveProfiles({"foo","bar"}) @ContextConfiguration(classes=Config.class,loader=AnnotationConfigContextLoader.class) private static class FooBarProfilesTestCase {
  }
@ActiveProfiles({"bar","foo"}) @ContextConfiguration(classes=Config.class,loader=AnnotationConfigContextLoader.class) private static class BarFooProfilesTestCase {
  }
private static class FooBarActiveProfilesResolver implements ActiveProfilesResolver {
    @Override public String[] resolve(    Class<?> testClass){
      return new String[]{"foo","bar"};
    }
  }
@ActiveProfiles(resolver=FooBarActiveProfilesResolver.class) @ContextConfiguration(classes=Config.class,loader=AnnotationConfigContextLoader.class) private static class FooBarActiveProfilesResolverTestCase {
  }
@ContextHierarchy({@ContextConfiguration}) private static class ClassHierarchyContextHierarchyLevel1TestCase {
@Configuration static class Level1Config {
    }
  }
@ContextHierarchy({@ContextConfiguration}) private static class ClassHierarchyContextHierarchyLevel2TestCase extends ClassHierarchyContextHierarchyLevel1TestCase {
@Configuration static class Level2Config {
    }
  }
@ContextHierarchy({@ContextConfiguration}) private static class ClassHierarchyContextHierarchyLevel3aTestCase extends ClassHierarchyContextHierarchyLevel2TestCase {
@Configuration static class Level3aConfig {
    }
  }
@ContextHierarchy({@ContextConfiguration}) private static class ClassHierarchyContextHierarchyLevel3bTestCase extends ClassHierarchyContextHierarchyLevel2TestCase {
@Configuration static class Level3bConfig {
    }
  }
}
