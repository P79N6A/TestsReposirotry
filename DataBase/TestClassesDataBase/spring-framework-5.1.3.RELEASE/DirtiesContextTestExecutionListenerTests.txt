/** 
 * Unit tests for  {@link DirtiesContextBeforeModesTestExecutionListener}. and  {@link DirtiesContextTestExecutionListener}
 * @author Sam Brannen
 * @since 4.0
 */
public class DirtiesContextTestExecutionListenerTests {
  private final TestExecutionListener beforeListener=new DirtiesContextBeforeModesTestExecutionListener();
  private final TestExecutionListener afterListener=new DirtiesContextTestExecutionListener();
  private final TestContext testContext=mock(TestContext.class);
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnMethodWithBeforeMethodMode() throws Exception {
    Class<?> clazz=getClass();
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredLocallyWithBeforeMethodMode"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnMethodWithAfterMethodMode() throws Exception {
    Class<?> clazz=getClass();
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredLocallyWithAfterMethodMode"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredOnMethodViaMetaAnnotationWithAfterMethodMode() throws Exception {
    Class<?> clazz=getClass();
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredViaMetaAnnotationWithAfterMethodMode"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassBeforeEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyBeforeEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassAfterEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyAfterEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassBeforeClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyBeforeClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassAfterClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyAfterClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredViaMetaAnnotationAfterClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestMethodForDirtiesContextViaMetaAnnotationWithOverrides() throws Exception {
    Class<?> clazz=DirtiesContextViaMetaAnnotationWithOverrides.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean"));
    beforeListener.beforeTestMethod(testContext);
    afterListener.beforeTestMethod(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestMethod(testContext);
    beforeListener.afterTestMethod(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(CURRENT_LEVEL);
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnMethod() throws Exception {
    Class<?> clazz=getClass();
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassBeforeEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyBeforeEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassAfterEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyAfterEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterEachTestMethod() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassBeforeClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyBeforeClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassAfterClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredLocallyAfterClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterClass() throws Exception {
    Class<?> clazz=DirtiesContextDeclaredViaMetaAnnotationAfterClass.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationWithOverrides() throws Exception {
    Class<?> clazz=DirtiesContextViaMetaAnnotationWithOverrides.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
  }
  @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationWithOverridenAttributes() throws Exception {
    Class<?> clazz=DirtiesContextViaMetaAnnotationWithOverridenAttributes.class;
    BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz);
    beforeListener.beforeTestClass(testContext);
    afterListener.beforeTestClass(testContext);
    verify(testContext,times(0)).markApplicationContextDirty(any(HierarchyMode.class));
    afterListener.afterTestClass(testContext);
    beforeListener.afterTestClass(testContext);
    verify(testContext,times(1)).markApplicationContextDirty(EXHAUSTIVE);
  }
  @DirtiesContext(methodMode=BEFORE_METHOD) void dirtiesContextDeclaredLocallyWithBeforeMethodMode(){
  }
  @DirtiesContext void dirtiesContextDeclaredLocallyWithAfterMethodMode(){
  }
  @MetaDirtyAfterMethod void dirtiesContextDeclaredViaMetaAnnotationWithAfterMethodMode(){
  }
  @DirtiesContext @Retention(RetentionPolicy.RUNTIME) static @interface MetaDirtyAfterMethod {}
  @DirtiesContext(classMode=AFTER_EACH_TEST_METHOD) @Retention(RetentionPolicy.RUNTIME) static @interface MetaDirtyAfterEachTestMethod {}
  @DirtiesContext(classMode=AFTER_CLASS) @Retention(RetentionPolicy.RUNTIME) static @interface MetaDirtyAfterClass {}
@DirtiesContext(classMode=BEFORE_EACH_TEST_METHOD) static class DirtiesContextDeclaredLocallyBeforeEachTestMethod {
    void clean(){
    }
  }
@DirtiesContext(classMode=AFTER_EACH_TEST_METHOD) static class DirtiesContextDeclaredLocallyAfterEachTestMethod {
    void clean(){
    }
  }
  @DirtiesContext @Retention(RetentionPolicy.RUNTIME) static @interface MetaDirtyWithOverrides {  ClassMode classMode() default AFTER_EACH_TEST_METHOD;
  HierarchyMode hierarchyMode() default HierarchyMode.CURRENT_LEVEL;
}
@MetaDirtyAfterEachTestMethod static class DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod {
    void clean(){
    }
  }
@DirtiesContext(classMode=BEFORE_CLASS) static class DirtiesContextDeclaredLocallyBeforeClass {
    void clean(){
    }
  }
@DirtiesContext(classMode=AFTER_CLASS) static class DirtiesContextDeclaredLocallyAfterClass {
    void clean(){
    }
  }
@MetaDirtyAfterClass static class DirtiesContextDeclaredViaMetaAnnotationAfterClass {
    void clean(){
    }
  }
@MetaDirtyWithOverrides static class DirtiesContextViaMetaAnnotationWithOverrides {
    void clean(){
    }
  }
@MetaDirtyWithOverrides(classMode=AFTER_CLASS,hierarchyMode=EXHAUSTIVE) static class DirtiesContextViaMetaAnnotationWithOverridenAttributes {
    void clean(){
    }
  }
}
