public static class ReflectionUtil<T extends Number> {
  public Object methodToCall(  T param){
    System.out.println(param + " " + param.getClass());
    return "Object methodToCall(T param)";
  }
  public void foo(  int... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  float... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  double... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  short... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  long... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  boolean... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  char... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void foo(  byte... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
  public void bar(  int... array){
    if (array.length == 0) {
      throw new RuntimeException();
    }
  }
}
