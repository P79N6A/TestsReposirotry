/** 
 * Tests proving that regardless the proxy strategy used (JDK interface-based vs. CGLIB subclass-based), discovery of advice-oriented annotations is consistent. For example, Spring's @Transactional may be declared at the interface or class level, and whether interface or subclass proxies are used, the @Transactional annotation must be discovered in a consistent fashion.
 * @author Chris Beams
 */
@SuppressWarnings("resource") public class ProxyAnnotationDiscoveryTests {
  @Test public void annotatedServiceWithoutInterface_PTC_true(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCTrue.class,AnnotatedServiceWithoutInterface.class);
    ctx.refresh();
    AnnotatedServiceWithoutInterface s=ctx.getBean(AnnotatedServiceWithoutInterface.class);
    assertTrue("expected a subclass proxy",AopUtils.isCglibProxy(s));
    assertThat(s,instanceOf(AnnotatedServiceWithoutInterface.class));
  }
  @Test public void annotatedServiceWithoutInterface_PTC_false(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCFalse.class,AnnotatedServiceWithoutInterface.class);
    ctx.refresh();
    AnnotatedServiceWithoutInterface s=ctx.getBean(AnnotatedServiceWithoutInterface.class);
    assertTrue("expected a subclass proxy",AopUtils.isCglibProxy(s));
    assertThat(s,instanceOf(AnnotatedServiceWithoutInterface.class));
  }
  @Test public void nonAnnotatedService_PTC_true(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCTrue.class,AnnotatedServiceImpl.class);
    ctx.refresh();
    NonAnnotatedService s=ctx.getBean(NonAnnotatedService.class);
    assertTrue("expected a subclass proxy",AopUtils.isCglibProxy(s));
    assertThat(s,instanceOf(AnnotatedServiceImpl.class));
  }
  @Test public void nonAnnotatedService_PTC_false(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCFalse.class,AnnotatedServiceImpl.class);
    ctx.refresh();
    NonAnnotatedService s=ctx.getBean(NonAnnotatedService.class);
    assertTrue("expected a jdk proxy",AopUtils.isJdkDynamicProxy(s));
    assertThat(s,not(instanceOf(AnnotatedServiceImpl.class)));
  }
  @Test public void annotatedService_PTC_true(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCTrue.class,NonAnnotatedServiceImpl.class);
    ctx.refresh();
    AnnotatedService s=ctx.getBean(AnnotatedService.class);
    assertTrue("expected a subclass proxy",AopUtils.isCglibProxy(s));
    assertThat(s,instanceOf(NonAnnotatedServiceImpl.class));
  }
  @Test public void annotatedService_PTC_false(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(PTCFalse.class,NonAnnotatedServiceImpl.class);
    ctx.refresh();
    AnnotatedService s=ctx.getBean(AnnotatedService.class);
    assertTrue("expected a jdk proxy",AopUtils.isJdkDynamicProxy(s));
    assertThat(s,not(instanceOf(NonAnnotatedServiceImpl.class)));
  }
}
