/** 
 * Unit tests for  {@link ReactorResourceFactory}.
 * @author Rossen Stoyanchev
 */
public class ReactorResourceFactoryTests {
  private final ReactorResourceFactory resourceFactory=new ReactorResourceFactory();
  private final ConnectionProvider connectionProvider=mock(ConnectionProvider.class);
  private final LoopResources loopResources=mock(LoopResources.class);
  @Test public void globalResources() throws Exception {
    this.resourceFactory.setUseGlobalResources(true);
    this.resourceFactory.afterPropertiesSet();
    HttpResources globalResources=HttpResources.get();
    assertSame(globalResources,this.resourceFactory.getConnectionProvider());
    assertSame(globalResources,this.resourceFactory.getLoopResources());
    assertFalse(globalResources.isDisposed());
    this.resourceFactory.destroy();
    assertTrue(globalResources.isDisposed());
  }
  @Test public void globalResourcesWithConsumer() throws Exception {
    AtomicBoolean invoked=new AtomicBoolean(false);
    this.resourceFactory.addGlobalResourcesConsumer(httpResources -> invoked.set(true));
    this.resourceFactory.afterPropertiesSet();
    assertTrue(invoked.get());
    this.resourceFactory.destroy();
  }
  @Test public void localResources() throws Exception {
    this.resourceFactory.setUseGlobalResources(false);
    this.resourceFactory.afterPropertiesSet();
    ConnectionProvider connectionProvider=this.resourceFactory.getConnectionProvider();
    LoopResources loopResources=this.resourceFactory.getLoopResources();
    assertNotSame(HttpResources.get(),connectionProvider);
    assertNotSame(HttpResources.get(),loopResources);
    assertFalse(loopResources.isDisposed());
    this.resourceFactory.destroy();
    assertTrue(connectionProvider.isDisposed());
    assertTrue(loopResources.isDisposed());
  }
  @Test public void localResourcesViaSupplier() throws Exception {
    this.resourceFactory.setUseGlobalResources(false);
    this.resourceFactory.setConnectionProviderSupplier(() -> this.connectionProvider);
    this.resourceFactory.setLoopResourcesSupplier(() -> this.loopResources);
    this.resourceFactory.afterPropertiesSet();
    ConnectionProvider connectionProvider=this.resourceFactory.getConnectionProvider();
    LoopResources loopResources=this.resourceFactory.getLoopResources();
    assertSame(this.connectionProvider,connectionProvider);
    assertSame(this.loopResources,loopResources);
    verifyNoMoreInteractions(this.connectionProvider,this.loopResources);
    this.resourceFactory.destroy();
    verify(this.connectionProvider).dispose();
    verify(this.loopResources).dispose();
    verifyNoMoreInteractions(this.connectionProvider,this.loopResources);
  }
  @Test public void externalResources() throws Exception {
    this.resourceFactory.setUseGlobalResources(false);
    this.resourceFactory.setConnectionProvider(this.connectionProvider);
    this.resourceFactory.setLoopResources(this.loopResources);
    this.resourceFactory.afterPropertiesSet();
    ConnectionProvider connectionProvider=this.resourceFactory.getConnectionProvider();
    LoopResources loopResources=this.resourceFactory.getLoopResources();
    assertSame(this.connectionProvider,connectionProvider);
    assertSame(this.loopResources,loopResources);
    verifyNoMoreInteractions(this.connectionProvider,this.loopResources);
    this.resourceFactory.destroy();
    verifyNoMoreInteractions(this.connectionProvider,this.loopResources);
  }
}
