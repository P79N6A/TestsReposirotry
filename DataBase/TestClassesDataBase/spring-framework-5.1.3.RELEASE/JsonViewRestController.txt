@RestController @SuppressWarnings("unused") private static class JsonViewRestController {
  @GetMapping("/response/raw") @JsonView(MyJacksonView1.class) public JacksonViewBean rawResponse(){
    return new JacksonViewBean("with","with","without");
  }
  @GetMapping("/response/mono") @JsonView(MyJacksonView1.class) public Mono<JacksonViewBean> monoResponse(){
    return Mono.just(new JacksonViewBean("with","with","without"));
  }
  @GetMapping("/response/entity") @JsonView(MyJacksonView1.class) public Mono<ResponseEntity<JacksonViewBean>> monoResponseEntity(){
    return Mono.just(ResponseEntity.ok(new JacksonViewBean("with","with","without")));
  }
  @GetMapping("/response/flux") @JsonView(MyJacksonView1.class) public Flux<JacksonViewBean> fluxResponse(){
    return Flux.just(new JacksonViewBean("with","with","without"),new JacksonViewBean("with","with","without"));
  }
  @PostMapping("/request/raw") public JacksonViewBean rawRequest(  @JsonView(MyJacksonView1.class) @RequestBody JacksonViewBean bean){
    return bean;
  }
  @PostMapping("/request/mono") public Mono<JacksonViewBean> monoRequest(  @JsonView(MyJacksonView1.class) @RequestBody Mono<JacksonViewBean> mono){
    return mono;
  }
  @PostMapping("/request/entity/mono") public Mono<JacksonViewBean> entityMonoRequest(  @JsonView(MyJacksonView1.class) HttpEntity<Mono<JacksonViewBean>> entityMono){
    return entityMono.getBody();
  }
  @PostMapping("/request/entity/flux") public Flux<JacksonViewBean> entityFluxRequest(  @JsonView(MyJacksonView1.class) HttpEntity<Flux<JacksonViewBean>> entityFlux){
    return entityFlux.getBody();
  }
  @PostMapping("/request/flux") public Flux<JacksonViewBean> fluxRequest(  @JsonView(MyJacksonView1.class) @RequestBody Flux<JacksonViewBean> flux){
    return flux;
  }
}
