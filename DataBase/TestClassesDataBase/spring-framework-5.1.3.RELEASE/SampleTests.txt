/** 
 * Examples to demonstrate writing client-side REST tests with Spring MVC Test. While the tests in this class invoke the RestTemplate directly, in actual tests the RestTemplate may likely be invoked indirectly, i.e. through client code.
 * @author Rossen Stoyanchev
 */
public class SampleTests {
  private MockRestServiceServer mockServer;
  private RestTemplate restTemplate;
  @Before public void setup(){
    this.restTemplate=new RestTemplate();
    this.mockServer=MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder(true).build();
  }
  @Test public void performGet(){
    String responseBody="{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";
    this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    @SuppressWarnings("unused") Person ludwig=this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.mockServer.verify();
  }
  @Test public void performGetManyTimes(){
    String responseBody="{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";
    this.mockServer.expect(manyTimes(),requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    @SuppressWarnings("unused") Person ludwig=this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.mockServer.verify();
  }
  @Test public void expectNever(){
    String responseBody="{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";
    this.mockServer.expect(once(),requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    this.mockServer.expect(never(),requestTo("/composers/43")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.mockServer.verify();
  }
  @Test(expected=AssertionError.class) public void expectNeverViolated(){
    String responseBody="{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";
    this.mockServer.expect(once(),requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    this.mockServer.expect(never(),requestTo("/composers/43")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.restTemplate.getForObject("/composers/{id}",Person.class,43);
  }
  @Test public void performGetWithResponseBodyFromFile(){
    Resource responseBody=new ClassPathResource("ludwig.json",this.getClass());
    this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody,MediaType.APPLICATION_JSON));
    @SuppressWarnings("unused") Person ludwig=this.restTemplate.getForObject("/composers/{id}",Person.class,42);
    this.mockServer.verify();
  }
  @Test public void verify(){
    this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("1",MediaType.TEXT_PLAIN));
    this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("2",MediaType.TEXT_PLAIN));
    this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("4",MediaType.TEXT_PLAIN));
    this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("8",MediaType.TEXT_PLAIN));
    @SuppressWarnings("unused") String result1=this.restTemplate.getForObject("/number",String.class);
    @SuppressWarnings("unused") String result2=this.restTemplate.getForObject("/number",String.class);
    try {
      this.mockServer.verify();
    }
 catch (    AssertionError error) {
      assertTrue(error.getMessage(),error.getMessage().contains("2 unsatisfied expectation(s)"));
    }
  }
  @Test public void repeatedAccessToResponseViaResource(){
    Resource resource=new ClassPathResource("ludwig.json",this.getClass());
    RestTemplate restTemplate=new RestTemplate();
    restTemplate.setInterceptors(Collections.singletonList(new ContentInterceptor(resource)));
    MockRestServiceServer mockServer=MockRestServiceServer.bindTo(restTemplate).ignoreExpectOrder(true).bufferContent().build();
    mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(resource,MediaType.APPLICATION_JSON));
    restTemplate.getForObject("/composers/{id}",Person.class,42);
    mockServer.verify();
  }
private static class ContentInterceptor implements ClientHttpRequestInterceptor {
    private final Resource resource;
    private ContentInterceptor(    Resource resource){
      this.resource=resource;
    }
    @Override public ClientHttpResponse intercept(    HttpRequest request,    byte[] body,    ClientHttpRequestExecution execution) throws IOException {
      ClientHttpResponse response=execution.execute(request,body);
      byte[] expected=FileCopyUtils.copyToByteArray(this.resource.getInputStream());
      byte[] actual=FileCopyUtils.copyToByteArray(response.getBody());
      assertEquals(new String(expected),new String(actual));
      return response;
    }
  }
}
