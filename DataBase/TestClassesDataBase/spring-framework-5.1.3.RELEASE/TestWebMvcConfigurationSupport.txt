/** 
 * Since WebMvcConfigurationSupport does not implement WebMvcConfigurer, the purpose of this test class is also to ensure the two are in sync with each other. Effectively that ensures that application config classes that use the combo  {@code @EnableWebMvc}plus WebMvcConfigurer can switch to extending WebMvcConfigurationSupport directly for more advanced configuration needs.
 */
private class TestWebMvcConfigurationSupport extends WebMvcConfigurationSupport implements WebMvcConfigurer {
  @Override public void addFormatters(  FormatterRegistry registry){
    registry.addConverter(new Converter<TestBean,String>(){
      @Override public String convert(      TestBean source){
        return "converted";
      }
    }
);
  }
  @Override public void configureMessageConverters(  List<HttpMessageConverter<?>> converters){
    converters.add(new MappingJackson2HttpMessageConverter());
  }
  @Override public void extendMessageConverters(  List<HttpMessageConverter<?>> converters){
    converters.add(0,new StringHttpMessageConverter());
  }
  @Override public Validator getValidator(){
    return new Validator(){
      @Override public void validate(      @Nullable Object target,      Errors errors){
        errors.reject("invalid");
      }
      @Override public boolean supports(      Class<?> clazz){
        return true;
      }
    }
;
  }
  @Override public void configureContentNegotiation(  ContentNegotiationConfigurer configurer){
    configurer.favorParameter(true).parameterName("f");
  }
  @Override public void configureAsyncSupport(  AsyncSupportConfigurer configurer){
    configurer.setDefaultTimeout(2500).setTaskExecutor(new ConcurrentTaskExecutor()).registerCallableInterceptors(new CallableProcessingInterceptor(){
    }
).registerDeferredResultInterceptors(new DeferredResultProcessingInterceptor(){
    }
);
  }
  @Override public void addArgumentResolvers(  List<HandlerMethodArgumentResolver> argumentResolvers){
    argumentResolvers.add(new ModelAttributeMethodProcessor(true));
  }
  @Override public void addReturnValueHandlers(  List<HandlerMethodReturnValueHandler> returnValueHandlers){
    returnValueHandlers.add(new ModelAttributeMethodProcessor(true));
  }
  @Override public void configureHandlerExceptionResolvers(  List<HandlerExceptionResolver> exceptionResolvers){
    exceptionResolvers.add(new SimpleMappingExceptionResolver());
  }
  @Override public void extendHandlerExceptionResolvers(  List<HandlerExceptionResolver> exceptionResolvers){
    exceptionResolvers.add(0,new ResponseStatusExceptionResolver());
  }
  @Override public void configurePathMatch(  PathMatchConfigurer configurer){
    configurer.setPathMatcher(new TestPathMatcher());
    configurer.setUrlPathHelper(new TestPathHelper());
    configurer.addPathPrefix("/api",HandlerTypePredicate.forAnnotation(RestController.class));
  }
  @Override public void addInterceptors(  InterceptorRegistry registry){
    registry.addInterceptor(new LocaleChangeInterceptor());
  }
  @SuppressWarnings("serial") @Override public MessageCodesResolver getMessageCodesResolver(){
    return new DefaultMessageCodesResolver(){
      @Override public String[] resolveMessageCodes(      String errorCode,      String objectName){
        return new String[]{"custom." + errorCode};
      }
    }
;
  }
  @Override public void addViewControllers(  ViewControllerRegistry registry){
    registry.addViewController("/path").setViewName("view");
    registry.addRedirectViewController("/old","/new").setStatusCode(HttpStatus.PERMANENT_REDIRECT);
    registry.addStatusController("/bad",HttpStatus.NOT_FOUND);
  }
  @Override public void configureViewResolvers(  ViewResolverRegistry registry){
    registry.enableContentNegotiation(new MappingJackson2JsonView());
    registry.jsp("/",".jsp");
  }
  @Override public void addResourceHandlers(  ResourceHandlerRegistry registry){
    registry.addResourceHandler("/resources/**").addResourceLocations("src/test/java");
  }
  @Override public void configureDefaultServletHandling(  DefaultServletHandlerConfigurer configurer){
    configurer.enable("default");
  }
  @Override public void addCorsMappings(  CorsRegistry registry){
    registry.addMapping("/resources/**");
  }
}
