private static class SampleEvents {
  @EventListener @Order(42) public void handleRaw(  ApplicationEvent event){
  }
  @EventListener public void handleGenericString(  GenericTestEvent<String> event){
  }
  @EventListener public void handleString(  String payload){
  }
  @EventListener(String.class) public void handleStringAnnotationValue(){
  }
  @EventListener(classes=String.class) public void handleStringAnnotationClasses(){
  }
  @EventListener(String.class) public void handleStringAnnotationValueAndParameter(  String payload){
  }
  @EventListener({String.class,Integer.class}) public void handleStringOrInteger(){
  }
  @EventListener({String.class,Integer.class}) public void handleStringOrIntegerWithParam(  String invalid){
  }
  @EventListener public void handleGenericStringPayload(  EntityWrapper<String> event){
  }
  @EventListener public void handleGenericAnyPayload(  EntityWrapper<?> event){
  }
  @EventListener public void tooManyParameters(  String event,  String whatIsThis){
  }
  @EventListener public void noParameter(){
  }
  @EventListener public void moreThanOneParameter(  String foo,  Integer bar){
  }
  @EventListener public void generateRuntimeException(  GenericTestEvent<String> event){
    if ("fail".equals(event.getPayload())) {
      throw new IllegalStateException("Test exception");
    }
  }
  @EventListener public void generateCheckedException(  GenericTestEvent<String> event) throws IOException {
    if ("fail".equals(event.getPayload())) {
      throw new IOException("Test exception");
    }
  }
}
