/** 
 * Tests with view resolution.
 * @author Rossen Stoyanchev
 */
public class ViewResolutionTests {
  @Test public void testJspOnly() throws Exception {
    InternalResourceViewResolver viewResolver=new InternalResourceViewResolver("/WEB-INF/",".jsp");
    standaloneSetup(new PersonController()).setViewResolvers(viewResolver).build().perform(get("/person/Corea")).andExpect(status().isOk()).andExpect(model().size(1)).andExpect(model().attributeExists("person")).andExpect(forwardedUrl("/WEB-INF/person/show.jsp"));
  }
  @Test public void testJsonOnly() throws Exception {
    standaloneSetup(new PersonController()).setSingleView(new MappingJackson2JsonView()).build().perform(get("/person/Corea")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(jsonPath("$.person.name").value("Corea"));
  }
  @Test public void testXmlOnly() throws Exception {
    Jaxb2Marshaller marshaller=new Jaxb2Marshaller();
    marshaller.setClassesToBeBound(Person.class);
    standaloneSetup(new PersonController()).setSingleView(new MarshallingView(marshaller)).build().perform(get("/person/Corea")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_XML)).andExpect(xpath("/person/name/text()").string(equalTo("Corea")));
  }
  @Test public void testContentNegotiation() throws Exception {
    Jaxb2Marshaller marshaller=new Jaxb2Marshaller();
    marshaller.setClassesToBeBound(Person.class);
    List<View> viewList=new ArrayList<>();
    viewList.add(new MappingJackson2JsonView());
    viewList.add(new MarshallingView(marshaller));
    ContentNegotiationManager manager=new ContentNegotiationManager(new HeaderContentNegotiationStrategy(),new FixedContentNegotiationStrategy(MediaType.TEXT_HTML));
    ContentNegotiatingViewResolver cnViewResolver=new ContentNegotiatingViewResolver();
    cnViewResolver.setDefaultViews(viewList);
    cnViewResolver.setContentNegotiationManager(manager);
    cnViewResolver.afterPropertiesSet();
    MockMvc mockMvc=standaloneSetup(new PersonController()).setViewResolvers(cnViewResolver,new InternalResourceViewResolver()).build();
    mockMvc.perform(get("/person/Corea")).andExpect(status().isOk()).andExpect(model().size(1)).andExpect(model().attributeExists("person")).andExpect(forwardedUrl("person/show"));
    mockMvc.perform(get("/person/Corea").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(jsonPath("$.person.name").value("Corea"));
    mockMvc.perform(get("/person/Corea").accept(MediaType.APPLICATION_XML)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_XML)).andExpect(xpath("/person/name/text()").string(equalTo("Corea")));
  }
  @Test public void defaultViewResolver() throws Exception {
    standaloneSetup(new PersonController()).build().perform(get("/person/Corea")).andExpect(model().attribute("person",hasProperty("name",equalTo("Corea")))).andExpect(status().isOk()).andExpect(forwardedUrl("person/show"));
  }
@Controller private static class PersonController {
    @GetMapping("/person/{name}") public String show(    @PathVariable String name,    Model model){
      Person person=new Person(name);
      model.addAttribute(person);
      return "person/show";
    }
  }
}
