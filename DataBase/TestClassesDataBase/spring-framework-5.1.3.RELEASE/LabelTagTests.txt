/** 
 * @author Rob Harrop
 * @author Rick Evans
 * @author Juergen Hoeller
 * @author Jeremy Grelle
 */
public class LabelTagTests extends AbstractFormTagTests {
  private LabelTag tag;
  @Override @SuppressWarnings("serial") protected void onSetUp(){
    this.tag=new LabelTag(){
      @Override protected TagWriter createTagWriter(){
        return new TagWriter(getWriter());
      }
    }
;
    this.tag.setPageContext(getPageContext());
  }
  @Override protected void extendPageContext(  MockPageContext pageContext) throws JspException {
    super.extendPageContext(pageContext);
    NestedPathTag nestedPathTag=new NestedPathTag();
    nestedPathTag.setPath("spouse.");
    nestedPathTag.setPageContext(pageContext);
    nestedPathTag.doStartTag();
  }
  @Test public void simpleRender() throws Exception {
    this.tag.setPath("name");
    int startResult=this.tag.doStartTag();
    int endResult=this.tag.doEndTag();
    assertEquals(Tag.EVAL_BODY_INCLUDE,startResult);
    assertEquals(Tag.EVAL_PAGE,endResult);
    String output=getOutput();
    assertContainsAttribute(output,"for","spouse.name");
    assertAttributeNotPresent(output,"name");
    assertAttributeNotPresent(output,"id");
    assertTrue(output.startsWith("<label "));
    assertTrue(output.endsWith("</label>"));
  }
  @Test public void simpleRenderWithDynamicAttributes() throws Exception {
    String dynamicAttribute1="attr1";
    String dynamicAttribute2="attr2";
    this.tag.setPath("name");
    this.tag.setDynamicAttribute(null,dynamicAttribute1,dynamicAttribute1);
    this.tag.setDynamicAttribute(null,dynamicAttribute2,dynamicAttribute2);
    int startResult=this.tag.doStartTag();
    int endResult=this.tag.doEndTag();
    assertEquals(Tag.EVAL_BODY_INCLUDE,startResult);
    assertEquals(Tag.EVAL_PAGE,endResult);
    String output=getOutput();
    assertContainsAttribute(output,"for","spouse.name");
    assertContainsAttribute(output,dynamicAttribute1,dynamicAttribute1);
    assertContainsAttribute(output,dynamicAttribute2,dynamicAttribute2);
    assertAttributeNotPresent(output,"name");
    assertAttributeNotPresent(output,"id");
    assertTrue(output.startsWith("<label "));
    assertTrue(output.endsWith("</label>"));
  }
  @Test public void simpleRenderWithMapElement() throws Exception {
    this.tag.setPath("someMap[1]");
    int startResult=this.tag.doStartTag();
    int endResult=this.tag.doEndTag();
    assertEquals(Tag.EVAL_BODY_INCLUDE,startResult);
    assertEquals(Tag.EVAL_PAGE,endResult);
    String output=getOutput();
    assertContainsAttribute(output,"for","spouse.someMap1");
    assertAttributeNotPresent(output,"name");
    assertAttributeNotPresent(output,"id");
    assertTrue(output.startsWith("<label "));
    assertTrue(output.endsWith("</label>"));
  }
  @Test public void overrideFor() throws Exception {
    this.tag.setPath("name");
    this.tag.setFor("myElement");
    int startResult=this.tag.doStartTag();
    int endResult=this.tag.doEndTag();
    assertEquals(Tag.EVAL_BODY_INCLUDE,startResult);
    assertEquals(Tag.EVAL_PAGE,endResult);
    String output=getOutput();
    assertContainsAttribute(output,"for","myElement");
    assertAttributeNotPresent(output,"name");
    assertAttributeNotPresent(output,"id");
    assertTrue(output.startsWith("<label "));
    assertTrue(output.endsWith("</label>"));
  }
  @Override protected TestBean createTestBean(){
    TestBean bean=new TestBean();
    bean.setSpouse(new TestBean("Hoopy"));
    return bean;
  }
}
