/** 
 * Integration tests for processing ComponentScan-annotated Configuration classes.
 * @author Chris Beams
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 3.1
 */
@SuppressWarnings("resource") public class ComponentScanAnnotationIntegrationTests {
  @Test public void controlScan(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.scan(example.scannable._package.class.getPackage().getName());
    ctx.refresh();
    assertThat("control scan for example.scannable package failed to register FooServiceImpl bean",ctx.containsBean("fooServiceImpl"),is(true));
  }
  @Test public void viaContextRegistration(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanAnnotatedConfig.class);
    ctx.refresh();
    ctx.getBean(ComponentScanAnnotatedConfig.class);
    ctx.getBean(TestBean.class);
    assertThat("config class bean not found",ctx.containsBeanDefinition("componentScanAnnotatedConfig"),is(true));
    assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected",ctx.containsBean("fooServiceImpl"),is(true));
  }
  @Test public void viaContextRegistration_WithValueAttribute(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanAnnotatedConfig_WithValueAttribute.class);
    ctx.refresh();
    ctx.getBean(ComponentScanAnnotatedConfig_WithValueAttribute.class);
    ctx.getBean(TestBean.class);
    assertThat("config class bean not found",ctx.containsBeanDefinition("componentScanAnnotatedConfig_WithValueAttribute"),is(true));
    assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected",ctx.containsBean("fooServiceImpl"),is(true));
  }
  @Test public void viaContextRegistration_FromPackageOfConfigClass(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanAnnotatedConfigWithImplicitBasePackage.class);
    ctx.refresh();
    ctx.getBean(ComponentScanAnnotatedConfigWithImplicitBasePackage.class);
    assertThat("config class bean not found",ctx.containsBeanDefinition("componentScanAnnotatedConfigWithImplicitBasePackage"),is(true));
    assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected",ctx.containsBean("scannedComponent"),is(true));
    assertThat("@Bean method overrides scanned class",ctx.getBean(ConfigurableComponent.class).isFlag(),is(true));
  }
  @Test public void viaContextRegistration_WithComposedAnnotation(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComposedAnnotationConfig.class);
    ctx.refresh();
    ctx.getBean(ComposedAnnotationConfig.class);
    ctx.getBean(SimpleComponent.class);
    ctx.getBean(ClassWithNestedComponents.NestedComponent.class);
    ctx.getBean(ClassWithNestedComponents.OtherNestedComponent.class);
    assertThat("config class bean not found",ctx.containsBeanDefinition("componentScanAnnotationIntegrationTests.ComposedAnnotationConfig"),is(true));
    assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected",ctx.containsBean("simpleComponent"),is(true));
  }
  @Test public void viaBeanRegistration(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    bf.registerBeanDefinition("componentScanAnnotatedConfig",genericBeanDefinition(ComponentScanAnnotatedConfig.class).getBeanDefinition());
    bf.registerBeanDefinition("configurationClassPostProcessor",genericBeanDefinition(ConfigurationClassPostProcessor.class).getBeanDefinition());
    GenericApplicationContext ctx=new GenericApplicationContext(bf);
    ctx.refresh();
    ctx.getBean(ComponentScanAnnotatedConfig.class);
    ctx.getBean(TestBean.class);
    assertThat("config class bean not found",ctx.containsBeanDefinition("componentScanAnnotatedConfig"),is(true));
    assertThat("@ComponentScan annotated @Configuration class registered " + "as bean definition did not trigger component scanning as expected",ctx.containsBean("fooServiceImpl"),is(true));
  }
  @Test public void withCustomBeanNameGenerator(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithBeanNameGenerator.class);
    ctx.refresh();
    assertThat(ctx.containsBean("custom_fooServiceImpl"),is(true));
    assertThat(ctx.containsBean("fooServiceImpl"),is(false));
  }
  @Test public void withScopeResolver(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(ComponentScanWithScopeResolver.class);
    assertThat(ctx.getBean(CustomScopeAnnotationBean.class),not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class))));
    assertThat(ctx.containsBean("scannedComponent"),is(false));
  }
  @Test public void multiComponentScan(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(MultiComponentScan.class);
    assertThat(ctx.getBean(CustomScopeAnnotationBean.class),not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class))));
    assertThat(ctx.containsBean("scannedComponent"),is(true));
  }
  @Test public void withCustomTypeFilter(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(ComponentScanWithCustomTypeFilter.class);
    assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("componentScanParserTests.KustomAnnotationAutowiredBean"));
    KustomAnnotationAutowiredBean testBean=ctx.getBean("componentScanParserTests.KustomAnnotationAutowiredBean",KustomAnnotationAutowiredBean.class);
    assertThat(testBean.getDependency(),notNullValue());
  }
  @Test public void withAwareTypeFilter(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(ComponentScanWithAwareTypeFilter.class);
    assertTrue(ctx.getEnvironment().acceptsProfiles(Profiles.of("the-filter-ran")));
  }
  @Test public void withScopedProxy() throws IOException, ClassNotFoundException {
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithScopedProxy.class);
    ctx.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ctx.refresh();
    FooService bean=(FooService)ctx.getBean("scopedProxyTestBean");
    assertThat(AopUtils.isJdkDynamicProxy(bean),is(true));
    assertThat(bean.foo(1),equalTo("bar"));
    FooService deserialized=(FooService)SerializationTestUtils.serializeAndDeserialize(bean);
    assertThat(deserialized,notNullValue());
    assertThat(deserialized.foo(1),equalTo("bar"));
  }
  @Test public void withScopedProxyThroughRegex() throws IOException, ClassNotFoundException {
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithScopedProxyThroughRegex.class);
    ctx.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ctx.refresh();
    FooService bean=(FooService)ctx.getBean("scopedProxyTestBean");
    assertThat(AopUtils.isJdkDynamicProxy(bean),is(true));
  }
  @Test public void withScopedProxyThroughAspectJPattern() throws IOException, ClassNotFoundException {
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithScopedProxyThroughAspectJPattern.class);
    ctx.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ctx.refresh();
    FooService bean=(FooService)ctx.getBean("scopedProxyTestBean");
    assertThat(AopUtils.isJdkDynamicProxy(bean),is(true));
  }
  @Test public void withMultipleAnnotationIncludeFilters1() throws IOException, ClassNotFoundException {
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters1.class);
    ctx.refresh();
    ctx.getBean(DefaultNamedComponent.class);
    ctx.getBean(MessageBean.class);
  }
  @Test public void withMultipleAnnotationIncludeFilters2() throws IOException, ClassNotFoundException {
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters2.class);
    ctx.refresh();
    ctx.getBean(DefaultNamedComponent.class);
    ctx.getBean(MessageBean.class);
  }
  @Test public void withBasePackagesAndValueAlias(){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    ctx.register(ComponentScanWithBasePackagesAndValueAlias.class);
    ctx.refresh();
    assertThat(ctx.containsBean("fooServiceImpl"),is(true));
  }
  @Configuration @ComponentScan @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface ComposedConfiguration {  String[] basePackages() default {};
}
@ComposedConfiguration(basePackages="org.springframework.context.annotation.componentscan.simple") public static class ComposedAnnotationConfig {
  }
public static class AwareTypeFilter implements TypeFilter, EnvironmentAware, ResourceLoaderAware, BeanClassLoaderAware, BeanFactoryAware {
    private BeanFactory beanFactory;
    private ClassLoader classLoader;
    private ResourceLoader resourceLoader;
    private Environment environment;
    @Override public void setBeanFactory(    BeanFactory beanFactory) throws BeansException {
      this.beanFactory=beanFactory;
    }
    @Override public void setBeanClassLoader(    ClassLoader classLoader){
      this.classLoader=classLoader;
    }
    @Override public void setResourceLoader(    ResourceLoader resourceLoader){
      this.resourceLoader=resourceLoader;
    }
    @Override public void setEnvironment(    Environment environment){
      this.environment=environment;
    }
    @Override public boolean match(    MetadataReader metadataReader,    MetadataReaderFactory metadataReaderFactory){
      ((ConfigurableEnvironment)this.environment).addActiveProfile("the-filter-ran");
      assertNotNull(this.beanFactory);
      assertNotNull(this.classLoader);
      assertNotNull(this.resourceLoader);
      assertNotNull(this.environment);
      return false;
    }
  }
}
