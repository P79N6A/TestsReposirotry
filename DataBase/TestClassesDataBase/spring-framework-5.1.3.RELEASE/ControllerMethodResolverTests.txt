/** 
 * Unit tests for  {@link ControllerMethodResolver}.
 * @author Rossen Stoyanchev
 */
public class ControllerMethodResolverTests {
  private ControllerMethodResolver methodResolver;
  private HandlerMethod handlerMethod;
  @Before public void setup(){
    ArgumentResolverConfigurer resolvers=new ArgumentResolverConfigurer();
    resolvers.addCustomResolver(new CustomArgumentResolver());
    resolvers.addCustomResolver(new CustomSyncArgumentResolver());
    ServerCodecConfigurer codecs=ServerCodecConfigurer.create();
    codecs.customCodecs().decoder(new ByteArrayDecoder());
    codecs.customCodecs().decoder(new ByteBufferDecoder());
    AnnotationConfigApplicationContext applicationContext=new AnnotationConfigApplicationContext();
    applicationContext.registerBean(TestControllerAdvice.class);
    applicationContext.refresh();
    this.methodResolver=new ControllerMethodResolver(resolvers,ReactiveAdapterRegistry.getSharedInstance(),applicationContext,codecs.getReaders());
    Method method=ResolvableMethod.on(TestController.class).mockCall(TestController::handle).method();
    this.handlerMethod=new HandlerMethod(new TestController(),method);
  }
  @Test public void requestMappingArgumentResolvers(){
    InvocableHandlerMethod invocable=this.methodResolver.getRequestMappingMethod(this.handlerMethod);
    List<HandlerMethodArgumentResolver> resolvers=invocable.getResolvers();
    AtomicInteger index=new AtomicInteger(-1);
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestBodyArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestPartMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CookieValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ExpressionValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(SessionAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(HttpEntityArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ErrorsMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ServerWebExchangeArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PrincipalArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(SessionStatusMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(WebSessionArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomSyncArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
  }
  @Test public void modelAttributeArgumentResolvers(){
    List<InvocableHandlerMethod> methods=this.methodResolver.getModelAttributeMethods(this.handlerMethod);
    assertEquals("Expected one each from Controller + ControllerAdvice",2,methods.size());
    InvocableHandlerMethod invocable=methods.get(0);
    List<HandlerMethodArgumentResolver> resolvers=invocable.getResolvers();
    AtomicInteger index=new AtomicInteger(-1);
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CookieValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ExpressionValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(SessionAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ErrorsMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ServerWebExchangeArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PrincipalArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(WebSessionArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomSyncArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
  }
  @Test public void initBinderArgumentResolvers(){
    List<SyncInvocableHandlerMethod> methods=this.methodResolver.getInitBinderMethods(this.handlerMethod);
    assertEquals("Expected one each from Controller + ControllerAdvice",2,methods.size());
    SyncInvocableHandlerMethod invocable=methods.get(0);
    List<SyncHandlerMethodArgumentResolver> resolvers=invocable.getResolvers();
    AtomicInteger index=new AtomicInteger(-1);
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CookieValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ExpressionValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ServerWebExchangeArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomSyncArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
  }
  @Test public void exceptionHandlerArgumentResolvers(){
    InvocableHandlerMethod invocable=this.methodResolver.getExceptionHandlerMethod(new ResponseStatusException(HttpStatus.BAD_REQUEST,"reason"),this.handlerMethod);
    assertNotNull("No match",invocable);
    assertEquals(TestController.class,invocable.getBeanType());
    List<HandlerMethodArgumentResolver> resolvers=invocable.getResolvers();
    AtomicInteger index=new AtomicInteger(-1);
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PathVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(MatrixVariableMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestHeaderMapMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CookieValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ExpressionValueMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(SessionAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestAttributeMethodArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ModelArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(ServerWebExchangeArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(PrincipalArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(WebSessionArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(CustomSyncArgumentResolver.class,next(resolvers,index).getClass());
    assertEquals(RequestParamMethodArgumentResolver.class,next(resolvers,index).getClass());
  }
  @Test public void exceptionHandlerFromControllerAdvice(){
    InvocableHandlerMethod invocable=this.methodResolver.getExceptionHandlerMethod(new IllegalStateException("reason"),this.handlerMethod);
    assertNotNull(invocable);
    assertEquals(TestControllerAdvice.class,invocable.getBeanType());
  }
  private static HandlerMethodArgumentResolver next(  List<? extends HandlerMethodArgumentResolver> resolvers,  AtomicInteger index){
    return resolvers.get(index.incrementAndGet());
  }
@Controller static class TestController {
    @InitBinder void initDataBinder(){
    }
    @ModelAttribute void initModel(){
    }
    @GetMapping void handle(){
    }
    @ExceptionHandler void handleException(    ResponseStatusException ex){
    }
  }
@ControllerAdvice static class TestControllerAdvice {
    @InitBinder void initDataBinder(){
    }
    @ModelAttribute void initModel(){
    }
    @ExceptionHandler void handleException(    IllegalStateException ex){
    }
  }
static class CustomArgumentResolver implements HandlerMethodArgumentResolver {
    @Override public boolean supportsParameter(    MethodParameter p){
      return false;
    }
    @Override public Mono<Object> resolveArgument(    MethodParameter p,    BindingContext c,    ServerWebExchange e){
      return null;
    }
  }
static class CustomSyncArgumentResolver extends CustomArgumentResolver implements SyncHandlerMethodArgumentResolver {
    @Override public Object resolveArgumentValue(    MethodParameter p,    BindingContext c,    ServerWebExchange e){
      return null;
    }
  }
}
