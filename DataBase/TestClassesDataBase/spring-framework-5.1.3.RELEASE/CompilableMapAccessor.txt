static class CompilableMapAccessor implements CompilablePropertyAccessor {
  @Override public boolean canRead(  EvaluationContext context,  Object target,  String name) throws AccessException {
    Map<?,?> map=(Map<?,?>)target;
    return map.containsKey(name);
  }
  @Override public TypedValue read(  EvaluationContext context,  Object target,  String name) throws AccessException {
    Map<?,?> map=(Map<?,?>)target;
    Object value=map.get(name);
    if (value == null && !map.containsKey(name)) {
      throw new MapAccessException(name);
    }
    return new TypedValue(value);
  }
  @Override public boolean canWrite(  EvaluationContext context,  Object target,  String name) throws AccessException {
    return true;
  }
  @Override @SuppressWarnings("unchecked") public void write(  EvaluationContext context,  Object target,  String name,  Object newValue) throws AccessException {
    Map<String,Object> map=(Map<String,Object>)target;
    map.put(name,newValue);
  }
  @Override public Class<?>[] getSpecificTargetClasses(){
    return new Class<?>[]{Map.class};
  }
  @Override public boolean isCompilable(){
    return true;
  }
  @Override public Class<?> getPropertyType(){
    return Object.class;
  }
  @Override public void generateCode(  String propertyName,  MethodVisitor mv,  CodeFlow cf){
    String descriptor=cf.lastDescriptor();
    if (descriptor == null) {
      cf.loadTarget(mv);
    }
    mv.visitLdcInsn(propertyName);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","get","(Ljava/lang/Object;)Ljava/lang/Object;",true);
  }
}
