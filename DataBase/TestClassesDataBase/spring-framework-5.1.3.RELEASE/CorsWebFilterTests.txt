/** 
 * Unit tests for  {@link CorsWebFilter}.
 * @author Sebastien Deleuze
 */
public class CorsWebFilterTests {
  private CorsWebFilter filter;
  private final CorsConfiguration config=new CorsConfiguration();
  @Before public void setup() throws Exception {
    config.setAllowedOrigins(Arrays.asList("http://domain1.com","http://domain2.com"));
    config.setAllowedMethods(Arrays.asList("GET","POST"));
    config.setAllowedHeaders(Arrays.asList("header1","header2"));
    config.setExposedHeaders(Arrays.asList("header3","header4"));
    config.setMaxAge(123L);
    config.setAllowCredentials(false);
    filter=new CorsWebFilter(r -> config);
  }
  @Test public void validActualRequest(){
    WebFilterChain filterChain=(filterExchange) -> {
      try {
        HttpHeaders headers=filterExchange.getResponse().getHeaders();
        assertEquals("http://domain2.com",headers.getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));
        assertEquals("header3, header4",headers.getFirst(ACCESS_CONTROL_EXPOSE_HEADERS));
      }
 catch (      AssertionError ex) {
        return Mono.error(ex);
      }
      return Mono.empty();
    }
;
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("http://domain1.com/test.html").header(HOST,"domain1.com").header(ORIGIN,"http://domain2.com").header("header2","foo"));
    this.filter.filter(exchange,filterChain);
  }
  @Test public void invalidActualRequest() throws ServletException, IOException {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.delete("http://domain1.com/test.html").header(HOST,"domain1.com").header(ORIGIN,"http://domain2.com").header("header2","foo"));
    WebFilterChain filterChain=(filterExchange) -> Mono.error(new AssertionError("Invalid requests must not be forwarded to the filter chain"));
    filter.filter(exchange,filterChain);
    assertNull(exchange.getResponse().getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));
  }
  @Test public void validPreFlightRequest() throws ServletException, IOException {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.options("http://domain1.com/test.html").header(HOST,"domain1.com").header(ORIGIN,"http://domain2.com").header(ACCESS_CONTROL_REQUEST_METHOD,HttpMethod.GET.name()).header(ACCESS_CONTROL_REQUEST_HEADERS,"header1, header2"));
    WebFilterChain filterChain=(filterExchange) -> Mono.error(new AssertionError("Preflight requests must not be forwarded to the filter chain"));
    filter.filter(exchange,filterChain);
    HttpHeaders headers=exchange.getResponse().getHeaders();
    assertEquals("http://domain2.com",headers.getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));
    assertEquals("header1, header2",headers.getFirst(ACCESS_CONTROL_ALLOW_HEADERS));
    assertEquals("header3, header4",headers.getFirst(ACCESS_CONTROL_EXPOSE_HEADERS));
    assertEquals(123L,Long.parseLong(headers.getFirst(ACCESS_CONTROL_MAX_AGE)));
  }
  @Test public void invalidPreFlightRequest() throws ServletException, IOException {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.options("http://domain1.com/test.html").header(HOST,"domain1.com").header(ORIGIN,"http://domain2.com").header(ACCESS_CONTROL_REQUEST_METHOD,HttpMethod.DELETE.name()).header(ACCESS_CONTROL_REQUEST_HEADERS,"header1, header2"));
    WebFilterChain filterChain=(filterExchange) -> Mono.error(new AssertionError("Preflight requests must not be forwarded to the filter chain"));
    filter.filter(exchange,filterChain);
    assertNull(exchange.getResponse().getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));
  }
}
