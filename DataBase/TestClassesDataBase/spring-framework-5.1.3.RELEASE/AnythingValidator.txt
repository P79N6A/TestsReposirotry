public static class AnythingValidator implements ConstraintValidator<AnythingValid,Object> {
  private static final String ID="id";
  @Override public void initialize(  AnythingValid constraintAnnotation){
  }
  @Override public boolean isValid(  Object value,  ConstraintValidatorContext context){
    List<Field> fieldsErros=new ArrayList<>();
    Arrays.asList(value.getClass().getDeclaredFields()).forEach(f -> {
      f.setAccessible(true);
      try {
        if (!f.getName().equals(ID) && f.get(value) == null) {
          fieldsErros.add(f);
          context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addPropertyNode(f.getName()).addConstraintViolation();
        }
      }
 catch (      IllegalAccessException ex) {
        throw new IllegalStateException(ex);
      }
    }
);
    return fieldsErros.isEmpty();
  }
}
