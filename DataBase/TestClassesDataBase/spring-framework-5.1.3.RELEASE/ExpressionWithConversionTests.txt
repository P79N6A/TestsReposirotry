/** 
 * Expression evaluation where the TypeConverter plugged in is the {@link org.springframework.core.convert.support.GenericConversionService}.
 * @author Andy Clement
 * @author Dave Syer
 */
public class ExpressionWithConversionTests extends AbstractExpressionTests {
  private static List<String> listOfString=new ArrayList<>();
  private static TypeDescriptor typeDescriptorForListOfString=null;
  private static List<Integer> listOfInteger=new ArrayList<>();
  private static TypeDescriptor typeDescriptorForListOfInteger=null;
static {
    listOfString.add("1");
    listOfString.add("2");
    listOfString.add("3");
    listOfInteger.add(4);
    listOfInteger.add(5);
    listOfInteger.add(6);
  }
  @Before public void setUp() throws Exception {
    ExpressionWithConversionTests.typeDescriptorForListOfString=new TypeDescriptor(ExpressionWithConversionTests.class.getDeclaredField("listOfString"));
    ExpressionWithConversionTests.typeDescriptorForListOfInteger=new TypeDescriptor(ExpressionWithConversionTests.class.getDeclaredField("listOfInteger"));
  }
  /** 
 * Test the service can convert what we are about to use in the expression evaluation tests.
 */
  @Test public void testConversionsAvailable() throws Exception {
    TypeConvertorUsingConversionService tcs=new TypeConvertorUsingConversionService();
    Class<?> clazz=typeDescriptorForListOfString.getElementTypeDescriptor().getType();
    assertEquals(String.class,clazz);
    List<?> l=(List<?>)tcs.convertValue(listOfInteger,TypeDescriptor.forObject(listOfInteger),typeDescriptorForListOfString);
    assertNotNull(l);
    clazz=typeDescriptorForListOfInteger.getElementTypeDescriptor().getType();
    assertEquals(Integer.class,clazz);
    l=(List<?>)tcs.convertValue(listOfString,TypeDescriptor.forObject(listOfString),typeDescriptorForListOfString);
    assertNotNull(l);
  }
  @Test public void testSetParameterizedList() throws Exception {
    StandardEvaluationContext context=TestScenarioCreator.getTestEvaluationContext();
    Expression e=parser.parseExpression("listOfInteger.size()");
    assertEquals(0,e.getValue(context,Integer.class).intValue());
    context.setTypeConverter(new TypeConvertorUsingConversionService());
    parser.parseExpression("listOfInteger").setValue(context,listOfString);
    assertEquals(3,e.getValue(context,Integer.class).intValue());
    Class<?> clazz=parser.parseExpression("listOfInteger[1].getClass()").getValue(context,Class.class);
    assertEquals(Integer.class,clazz);
  }
  @Test public void testCoercionToCollectionOfPrimitive() throws Exception {
class TestTarget {
      @SuppressWarnings("unused") public int sum(      Collection<Integer> numbers){
        int total=0;
        for (        int i : numbers) {
          total+=i;
        }
        return total;
      }
    }
    StandardEvaluationContext evaluationContext=new StandardEvaluationContext();
    TypeDescriptor collectionType=new TypeDescriptor(new MethodParameter(TestTarget.class.getDeclaredMethod("sum",Collection.class),0));
    assertTrue(evaluationContext.getTypeConverter().canConvert(TypeDescriptor.valueOf(String.class),collectionType));
    assertEquals("[1, 2, 3, 4]",evaluationContext.getTypeConverter().convertValue("1,2,3,4",TypeDescriptor.valueOf(String.class),collectionType).toString());
    evaluationContext.setVariable("target",new TestTarget());
    int result=(Integer)parser.parseExpression("#target.sum(#root)").getValue(evaluationContext,"1,2,3,4");
    assertEquals("Wrong result: " + result,10,result);
  }
  @Test public void testConvert(){
    Foo root=new Foo("bar");
    Collection<String> foos=Collections.singletonList("baz");
    StandardEvaluationContext context=new StandardEvaluationContext(root);
    Expression expression=parser.parseExpression("foos");
    expression.setValue(context,foos);
    Foo baz=root.getFoos().iterator().next();
    assertEquals("baz",baz.value);
    expression=parser.parseExpression("setFoos(#foos)");
    context.setVariable("foos",foos);
    expression.getValue(context);
    baz=root.getFoos().iterator().next();
    assertEquals("baz",baz.value);
    expression=parser.parseExpression("setFoos(getFoosAsStrings())");
    expression.getValue(context);
    baz=root.getFoos().iterator().next();
    assertEquals("baz",baz.value);
    expression=parser.parseExpression("setFoos(getFoosAsObjects())");
    expression.getValue(context);
    baz=root.getFoos().iterator().next();
    assertEquals("baz",baz.value);
  }
  /** 
 * Type converter that uses the core conversion service.
 */
private static class TypeConvertorUsingConversionService implements TypeConverter {
    private final ConversionService service=new DefaultConversionService();
    @Override public boolean canConvert(    TypeDescriptor sourceType,    TypeDescriptor targetType){
      return this.service.canConvert(sourceType,targetType);
    }
    @Override public Object convertValue(    Object value,    TypeDescriptor sourceType,    TypeDescriptor targetType) throws EvaluationException {
      return this.service.convert(value,sourceType,targetType);
    }
  }
public static class Foo {
    public final String value;
    private Collection<Foo> foos;
    public Foo(    String value){
      this.value=value;
    }
    public void setFoos(    Collection<Foo> foos){
      this.foos=foos;
    }
    public Collection<Foo> getFoos(){
      return this.foos;
    }
    public Collection<String> getFoosAsStrings(){
      return Collections.singletonList("baz");
    }
    public Collection<?> getFoosAsObjects(){
      return Collections.singletonList("baz");
    }
  }
}
