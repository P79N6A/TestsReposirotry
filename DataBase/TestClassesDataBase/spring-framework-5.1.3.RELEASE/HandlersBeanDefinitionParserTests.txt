/** 
 * Test fixture for HandlersBeanDefinitionParser. See test configuration files websocket-config-handlers-*.xml.
 * @author Brian Clozel
 * @author Rossen Stoyanchev
 */
public class HandlersBeanDefinitionParserTests {
  private final GenericWebApplicationContext appContext=new GenericWebApplicationContext();
  @Test public void webSocketHandlers(){
    loadBeanDefinitions("websocket-config-handlers.xml");
    Map<String,HandlerMapping> handlersMap=this.appContext.getBeansOfType(HandlerMapping.class);
    assertNotNull(handlersMap);
    assertThat(handlersMap.values(),hasSize(2));
    for (    HandlerMapping hm : handlersMap.values()) {
      assertTrue(hm instanceof SimpleUrlHandlerMapping);
      SimpleUrlHandlerMapping shm=(SimpleUrlHandlerMapping)hm;
      if (shm.getUrlMap().keySet().contains("/foo")) {
        assertThat(shm.getUrlMap().keySet(),contains("/foo","/bar"));
        WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)shm.getUrlMap().get("/foo");
        assertNotNull(handler);
        unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);
        HandshakeHandler handshakeHandler=handler.getHandshakeHandler();
        assertNotNull(handshakeHandler);
        assertTrue(handshakeHandler instanceof DefaultHandshakeHandler);
        assertFalse(handler.getHandshakeInterceptors().isEmpty());
        assertTrue(handler.getHandshakeInterceptors().get(0) instanceof OriginHandshakeInterceptor);
      }
 else {
        assertThat(shm.getUrlMap().keySet(),contains("/test"));
        WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)shm.getUrlMap().get("/test");
        assertNotNull(handler);
        unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);
        HandshakeHandler handshakeHandler=handler.getHandshakeHandler();
        assertNotNull(handshakeHandler);
        assertTrue(handshakeHandler instanceof DefaultHandshakeHandler);
        assertFalse(handler.getHandshakeInterceptors().isEmpty());
        assertTrue(handler.getHandshakeInterceptors().get(0) instanceof OriginHandshakeInterceptor);
      }
    }
  }
  @Test @SuppressWarnings("unchecked") public void webSocketHandlersAttributes(){
    loadBeanDefinitions("websocket-config-handlers-attributes.xml");
    HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);
    assertNotNull(handlerMapping);
    assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);
    SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;
    assertEquals(2,urlHandlerMapping.getOrder());
    WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get("/foo");
    assertNotNull(handler);
    unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);
    HandshakeHandler handshakeHandler=handler.getHandshakeHandler();
    assertNotNull(handshakeHandler);
    assertTrue(handshakeHandler instanceof TestHandshakeHandler);
    List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();
    assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));
    handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get("/test");
    assertNotNull(handler);
    unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);
    handshakeHandler=handler.getHandshakeHandler();
    assertNotNull(handshakeHandler);
    assertTrue(handshakeHandler instanceof TestHandshakeHandler);
    interceptors=handler.getHandshakeInterceptors();
    assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));
  }
  @Test @SuppressWarnings("unchecked") public void sockJs(){
    loadBeanDefinitions("websocket-config-handlers-sockjs.xml");
    SimpleUrlHandlerMapping handlerMapping=this.appContext.getBean(SimpleUrlHandlerMapping.class);
    assertNotNull(handlerMapping);
    SockJsHttpRequestHandler testHandler=(SockJsHttpRequestHandler)handlerMapping.getUrlMap().get("/test/**");
    assertNotNull(testHandler);
    unwrapAndCheckDecoratedHandlerType(testHandler.getWebSocketHandler(),TestWebSocketHandler.class);
    SockJsService testSockJsService=testHandler.getSockJsService();
    SockJsHttpRequestHandler fooHandler=(SockJsHttpRequestHandler)handlerMapping.getUrlMap().get("/foo/**");
    assertNotNull(fooHandler);
    unwrapAndCheckDecoratedHandlerType(fooHandler.getWebSocketHandler(),FooWebSocketHandler.class);
    SockJsService sockJsService=fooHandler.getSockJsService();
    assertNotNull(sockJsService);
    assertSame(testSockJsService,sockJsService);
    assertThat(sockJsService,instanceOf(DefaultSockJsService.class));
    DefaultSockJsService defaultSockJsService=(DefaultSockJsService)sockJsService;
    assertThat(defaultSockJsService.getTaskScheduler(),instanceOf(ThreadPoolTaskScheduler.class));
    assertFalse(defaultSockJsService.shouldSuppressCors());
    Map<TransportType,TransportHandler> handlerMap=defaultSockJsService.getTransportHandlers();
    assertThat(handlerMap.values(),containsInAnyOrder(instanceOf(XhrPollingTransportHandler.class),instanceOf(XhrReceivingTransportHandler.class),instanceOf(XhrStreamingTransportHandler.class),instanceOf(EventSourceTransportHandler.class),instanceOf(HtmlFileTransportHandler.class),instanceOf(WebSocketTransportHandler.class)));
    WebSocketTransportHandler handler=(WebSocketTransportHandler)handlerMap.get(TransportType.WEBSOCKET);
    assertEquals(TestHandshakeHandler.class,handler.getHandshakeHandler().getClass());
    List<HandshakeInterceptor> interceptors=defaultSockJsService.getHandshakeInterceptors();
    assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));
  }
  @Test @SuppressWarnings("unchecked") public void sockJsAttributes(){
    loadBeanDefinitions("websocket-config-handlers-sockjs-attributes.xml");
    SimpleUrlHandlerMapping handlerMapping=appContext.getBean(SimpleUrlHandlerMapping.class);
    assertNotNull(handlerMapping);
    SockJsHttpRequestHandler handler=(SockJsHttpRequestHandler)handlerMapping.getUrlMap().get("/test/**");
    assertNotNull(handler);
    unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);
    SockJsService sockJsService=handler.getSockJsService();
    assertNotNull(sockJsService);
    assertThat(sockJsService,instanceOf(TransportHandlingSockJsService.class));
    TransportHandlingSockJsService transportService=(TransportHandlingSockJsService)sockJsService;
    assertThat(transportService.getTaskScheduler(),instanceOf(TestTaskScheduler.class));
    assertThat(transportService.getTransportHandlers().values(),containsInAnyOrder(instanceOf(XhrPollingTransportHandler.class),instanceOf(XhrStreamingTransportHandler.class)));
    assertEquals("testSockJsService",transportService.getName());
    assertFalse(transportService.isWebSocketEnabled());
    assertFalse(transportService.isSessionCookieNeeded());
    assertEquals(2048,transportService.getStreamBytesLimit());
    assertEquals(256,transportService.getDisconnectDelay());
    assertEquals(1024,transportService.getHttpMessageCacheSize());
    assertEquals(20,transportService.getHeartbeatTime());
    assertEquals("/js/sockjs.min.js",transportService.getSockJsClientLibraryUrl());
    assertEquals(TestMessageCodec.class,transportService.getMessageCodec().getClass());
    List<HandshakeInterceptor> interceptors=transportService.getHandshakeInterceptors();
    assertThat(interceptors,contains(instanceOf(OriginHandshakeInterceptor.class)));
    assertTrue(transportService.shouldSuppressCors());
    assertTrue(transportService.getAllowedOrigins().contains("http://mydomain1.com"));
    assertTrue(transportService.getAllowedOrigins().contains("http://mydomain2.com"));
  }
  private void loadBeanDefinitions(  String fileName){
    XmlBeanDefinitionReader reader=new XmlBeanDefinitionReader(this.appContext);
    ClassPathResource resource=new ClassPathResource(fileName,HandlersBeanDefinitionParserTests.class);
    reader.loadBeanDefinitions(resource);
    this.appContext.refresh();
  }
  private static void unwrapAndCheckDecoratedHandlerType(  WebSocketHandler handler,  Class<?> handlerClass){
    if (handler instanceof WebSocketHandlerDecorator) {
      handler=((WebSocketHandlerDecorator)handler).getLastHandler();
    }
    assertTrue(handlerClass.isInstance(handler));
  }
}
