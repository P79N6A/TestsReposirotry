/** 
 * {@code @ControllerAdvice} related tests for {@link RequestMappingHandlerAdapter}.
 * @author Rossen Stoyanchev
 */
public class ControllerAdviceTests {
  private final MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/"));
  @Test public void resolveExceptionGlobalHandler() throws Exception {
    testException(new IllegalAccessException(),"SecondControllerAdvice: IllegalAccessException");
  }
  @Test public void resolveExceptionGlobalHandlerOrdered() throws Exception {
    testException(new IllegalStateException(),"OneControllerAdvice: IllegalStateException");
  }
  @Test public void resolveExceptionWithHandlerMethodArg() throws Exception {
    testException(new ArrayIndexOutOfBoundsException(),"HandlerMethod: handle");
  }
  @Test public void resolveExceptionWithAssertionError() throws Exception {
    AssertionError error=new AssertionError("argh");
    testException(error,error.toString());
  }
  @Test public void resolveExceptionWithAssertionErrorAsRootCause() throws Exception {
    AssertionError cause=new AssertionError("argh");
    FatalBeanException exception=new FatalBeanException("wrapped",cause);
    testException(exception,cause.toString());
  }
  private void testException(  Throwable exception,  String expected) throws Exception {
    ApplicationContext context=new AnnotationConfigApplicationContext(TestConfig.class);
    RequestMappingHandlerAdapter adapter=createAdapter(context);
    TestController controller=context.getBean(TestController.class);
    controller.setException(exception);
    Object actual=handle(adapter,controller,"handle").getReturnValue();
    assertEquals(expected,actual);
  }
  @Test public void modelAttributeAdvice() throws Exception {
    ApplicationContext context=new AnnotationConfigApplicationContext(TestConfig.class);
    RequestMappingHandlerAdapter adapter=createAdapter(context);
    TestController controller=context.getBean(TestController.class);
    Model model=handle(adapter,controller,"handle").getModel();
    assertEquals(2,model.asMap().size());
    assertEquals("lAttr1",model.asMap().get("attr1"));
    assertEquals("gAttr2",model.asMap().get("attr2"));
  }
  @Test public void initBinderAdvice() throws Exception {
    ApplicationContext context=new AnnotationConfigApplicationContext(TestConfig.class);
    RequestMappingHandlerAdapter adapter=createAdapter(context);
    TestController controller=context.getBean(TestController.class);
    Validator validator=mock(Validator.class);
    controller.setValidator(validator);
    BindingContext bindingContext=handle(adapter,controller,"handle").getBindingContext();
    WebExchangeDataBinder binder=bindingContext.createDataBinder(this.exchange,"name");
    assertEquals(Collections.singletonList(validator),binder.getValidators());
  }
  private RequestMappingHandlerAdapter createAdapter(  ApplicationContext context) throws Exception {
    RequestMappingHandlerAdapter adapter=new RequestMappingHandlerAdapter();
    adapter.setApplicationContext(context);
    adapter.afterPropertiesSet();
    return adapter;
  }
  private HandlerResult handle(  RequestMappingHandlerAdapter adapter,  Object controller,  String methodName) throws Exception {
    Method method=controller.getClass().getMethod(methodName);
    HandlerMethod handlerMethod=new HandlerMethod(controller,method);
    return adapter.handle(this.exchange,handlerMethod).block(Duration.ZERO);
  }
@Configuration static class TestConfig {
    @Bean public TestController testController(){
      return new TestController();
    }
    @Bean public OneControllerAdvice testExceptionResolver(){
      return new OneControllerAdvice();
    }
    @Bean public SecondControllerAdvice anotherTestExceptionResolver(){
      return new SecondControllerAdvice();
    }
  }
@Controller static class TestController {
    private Validator validator;
    private Throwable exception;
    void setValidator(    Validator validator){
      this.validator=validator;
    }
    void setException(    Throwable exception){
      this.exception=exception;
    }
    @InitBinder public void initDataBinder(    WebDataBinder dataBinder){
      if (this.validator != null) {
        dataBinder.addValidators(this.validator);
      }
    }
    @ModelAttribute public void addAttributes(    Model model){
      model.addAttribute("attr1","lAttr1");
    }
    @GetMapping public void handle() throws Throwable {
      if (this.exception != null) {
        throw this.exception;
      }
    }
  }
@ControllerAdvice @Order(1) static class OneControllerAdvice {
    @ModelAttribute public void addAttributes(    Model model){
      model.addAttribute("attr1","gAttr1");
      model.addAttribute("attr2","gAttr2");
    }
    @ExceptionHandler public String handleException(    IllegalStateException ex){
      return "OneControllerAdvice: " + ClassUtils.getShortName(ex.getClass());
    }
    @ExceptionHandler(ArrayIndexOutOfBoundsException.class) public String handleWithHandlerMethod(    HandlerMethod handlerMethod){
      return "HandlerMethod: " + handlerMethod.getMethod().getName();
    }
    @ExceptionHandler(AssertionError.class) public String handleAssertionError(    Error err){
      return err.toString();
    }
  }
@ControllerAdvice @Order(2) static class SecondControllerAdvice {
    @ExceptionHandler({IllegalStateException.class,IllegalAccessException.class}) public String handleException(    Exception ex){
      return "SecondControllerAdvice: " + ClassUtils.getShortName(ex.getClass());
    }
  }
}
