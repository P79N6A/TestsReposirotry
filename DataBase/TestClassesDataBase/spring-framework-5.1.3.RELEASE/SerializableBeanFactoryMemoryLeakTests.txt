/** 
 * Unit tests cornering SPR-7502.
 * @author Chris Beams
 */
public class SerializableBeanFactoryMemoryLeakTests {
  /** 
 * Defensively zero-out static factory count - other tests may have misbehaved before us.
 */
  @BeforeClass @AfterClass public static void zeroOutFactoryCount() throws Exception {
    getSerializableFactoryMap().clear();
  }
  @Test public void genericContext() throws Exception {
    assertFactoryCountThroughoutLifecycle(new GenericApplicationContext());
  }
  @Test public void abstractRefreshableContext() throws Exception {
    assertFactoryCountThroughoutLifecycle(new ClassPathXmlApplicationContext());
  }
  @Test public void genericContextWithMisconfiguredBean() throws Exception {
    GenericApplicationContext ctx=new GenericApplicationContext();
    registerMisconfiguredBeanDefinition(ctx);
    assertFactoryCountThroughoutLifecycle(ctx);
  }
  @Test public void abstractRefreshableContextWithMisconfiguredBean() throws Exception {
    ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(){
      @Override protected void customizeBeanFactory(      DefaultListableBeanFactory beanFactory){
        super.customizeBeanFactory(beanFactory);
        registerMisconfiguredBeanDefinition(beanFactory);
      }
    }
;
    assertFactoryCountThroughoutLifecycle(ctx);
  }
  private void assertFactoryCountThroughoutLifecycle(  ConfigurableApplicationContext ctx) throws Exception {
    assertThat(serializableFactoryCount(),equalTo(0));
    try {
      ctx.refresh();
      assertThat(serializableFactoryCount(),equalTo(1));
      ctx.close();
    }
 catch (    BeanCreationException ex) {
    }
 finally {
      assertThat(serializableFactoryCount(),equalTo(0));
    }
  }
  private void registerMisconfiguredBeanDefinition(  BeanDefinitionRegistry registry){
    registry.registerBeanDefinition("misconfigured",rootBeanDefinition(Object.class).addPropertyValue("nonexistent","bogus").getBeanDefinition());
  }
  private int serializableFactoryCount() throws Exception {
    Map<?,?> map=getSerializableFactoryMap();
    return map.size();
  }
  private static Map<?,?> getSerializableFactoryMap() throws Exception {
    Field field=DefaultListableBeanFactory.class.getDeclaredField("serializableFactories");
    field.setAccessible(true);
    return (Map<?,?>)field.get(DefaultListableBeanFactory.class);
  }
}
