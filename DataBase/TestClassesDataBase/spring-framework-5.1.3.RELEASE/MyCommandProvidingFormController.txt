@Controller static class MyCommandProvidingFormController<T,TB,TB2> extends MyFormController {
  @ModelAttribute("myCommand") public ValidTestBean createTestBean(  @RequestParam T defaultName,  Map<String,Object> model,  @RequestParam Date date){
    model.put("myKey","myOriginalValue");
    ValidTestBean tb=new ValidTestBean();
    tb.setName(defaultName.getClass().getSimpleName() + ":" + defaultName.toString());
    return tb;
  }
  @Override @RequestMapping("/myPath.do") public String myHandle(  @ModelAttribute("myCommand") @Valid TestBean tb,  BindingResult errors,  ModelMap model){
    if (!errors.hasFieldErrors("validCountry")) {
      throw new IllegalStateException("Declarative validation not applied");
    }
    return super.myHandle(tb,errors,model);
  }
  @RequestMapping("/myOtherPath.do") public String myOtherHandle(  TB tb,  BindingResult errors,  ExtendedModelMap model,  MySpecialArg arg){
    TestBean tbReal=(TestBean)tb;
    tbReal.setName("myName");
    assertTrue(model.get("ITestBean") instanceof DerivedTestBean);
    assertNotNull(arg);
    return super.myHandle(tbReal,errors,model);
  }
  @RequestMapping("/myThirdPath.do") public String myThirdHandle(  TB tb,  Model model){
    model.addAttribute("testBean",new TestBean("special",99));
    return "myView";
  }
  @SuppressWarnings("unchecked") @ModelAttribute protected TB2 getModelAttr(){
    return (TB2)new DerivedTestBean();
  }
}
