/** 
 * @author Sebastien Deleuze
 */
public class JacksonStreamingIntegrationTests extends AbstractHttpHandlerIntegrationTests {
  private AnnotationConfigApplicationContext wac;
  private WebClient webClient;
  @Override @Before public void setup() throws Exception {
    super.setup();
    this.webClient=WebClient.create("http://localhost:" + this.port);
  }
  @Override protected HttpHandler createHttpHandler(){
    this.wac=new AnnotationConfigApplicationContext();
    this.wac.register(TestConfiguration.class);
    this.wac.refresh();
    return WebHttpHandlerBuilder.webHandler(new DispatcherHandler(this.wac)).build();
  }
  @Test public void jsonStreaming(){
    Flux<Person> result=this.webClient.get().uri("/stream").accept(APPLICATION_STREAM_JSON).retrieve().bodyToFlux(Person.class);
    StepVerifier.create(result).expectNext(new Person("foo 0")).expectNext(new Person("foo 1")).thenCancel().verify();
  }
  @Test public void smileStreaming(){
    Flux<Person> result=this.webClient.get().uri("/stream").accept(new MediaType("application","stream+x-jackson-smile")).retrieve().bodyToFlux(Person.class);
    StepVerifier.create(result).expectNext(new Person("foo 0")).expectNext(new Person("foo 1")).thenCancel().verify();
  }
@RestController @SuppressWarnings("unused") static class JacksonStreamingController {
    @GetMapping(value="/stream",produces={APPLICATION_STREAM_JSON_VALUE,"application/stream+x-jackson-smile"}) Flux<Person> person(){
      return testInterval(Duration.ofMillis(100),50).map(l -> new Person("foo " + l));
    }
  }
@Configuration @EnableWebFlux @SuppressWarnings("unused") static class TestConfiguration {
    @Bean public JacksonStreamingController jsonStreamingController(){
      return new JacksonStreamingController();
    }
  }
@SuppressWarnings("unused") private static class Person {
    private String name;
    public Person(){
    }
    public Person(    String name){
      this.name=name;
    }
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
    @Override public boolean equals(    Object o){
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      Person person=(Person)o;
      return !(this.name != null ? !this.name.equals(person.name) : person.name != null);
    }
    @Override public int hashCode(){
      return this.name != null ? this.name.hashCode() : 0;
    }
    @Override public String toString(){
      return "Person{" + "name='" + name + '\''+ '}';
    }
  }
}
