/** 
 * Tests for various parameter binding scenarios with before advice.
 * @author Adrian Colyer
 * @author Chris Beams
 */
public class AroundAdviceBindingTests {
  private AroundAdviceBindingCollaborator mockCollaborator;
  private ITestBean testBeanProxy;
  private TestBean testBeanTarget;
  protected ApplicationContext ctx;
  @Before public void onSetUp() throws Exception {
    ctx=new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml",getClass());
    AroundAdviceBindingTestAspect aroundAdviceAspect=((AroundAdviceBindingTestAspect)ctx.getBean("testAspect"));
    ITestBean injectedTestBean=(ITestBean)ctx.getBean("testBean");
    assertTrue(AopUtils.isAopProxy(injectedTestBean));
    this.testBeanProxy=injectedTestBean;
    this.testBeanTarget=(TestBean)((Advised)testBeanProxy).getTargetSource().getTarget();
    mockCollaborator=mock(AroundAdviceBindingCollaborator.class);
    aroundAdviceAspect.setCollaborator(mockCollaborator);
  }
  @Test public void testOneIntArg(){
    testBeanProxy.setAge(5);
    verify(mockCollaborator).oneIntArg(5);
  }
  @Test public void testOneObjectArgBoundToTarget(){
    testBeanProxy.getAge();
    verify(mockCollaborator).oneObjectArg(this.testBeanTarget);
  }
  @Test public void testOneIntAndOneObjectArgs(){
    testBeanProxy.setAge(5);
    verify(mockCollaborator).oneIntAndOneObject(5,this.testBeanProxy);
  }
  @Test public void testJustJoinPoint(){
    testBeanProxy.getAge();
    verify(mockCollaborator).justJoinPoint("getAge");
  }
}
