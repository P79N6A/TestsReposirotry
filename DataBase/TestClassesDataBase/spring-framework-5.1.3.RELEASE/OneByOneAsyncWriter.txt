private static class OneByOneAsyncWriter {
  private List<String> items=new ArrayList<>();
  private boolean completed=false;
  private Throwable error;
  public Publisher<Void> send(  Publisher<String> publisher){
    return subscriber -> Executors.newSingleThreadScheduledExecutor().schedule(() -> publisher.subscribe(new WriteSubscriber(subscriber)),50,TimeUnit.MILLISECONDS);
  }
private class WriteSubscriber implements Subscriber<String> {
    private Subscription subscription;
    private final Subscriber<? super Void> subscriber;
    public WriteSubscriber(    Subscriber<? super Void> subscriber){
      this.subscriber=subscriber;
    }
    @Override public void onSubscribe(    Subscription subscription){
      this.subscription=subscription;
      this.subscription.request(1);
    }
    @Override public void onNext(    String item){
      items.add(item);
      this.subscription.request(1);
    }
    @Override public void onError(    Throwable ex){
      error=ex;
      this.subscriber.onError(ex);
    }
    @Override public void onComplete(){
      completed=true;
      this.subscriber.onComplete();
    }
  }
}
