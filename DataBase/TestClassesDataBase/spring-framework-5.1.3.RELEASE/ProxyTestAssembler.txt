private static class ProxyTestAssembler extends AbstractReflectiveMBeanInfoAssembler {
  @Override protected boolean includeReadAttribute(  Method method,  String beanKey){
    return true;
  }
  @Override protected boolean includeWriteAttribute(  Method method,  String beanKey){
    if ("setAge".equals(method.getName())) {
      return false;
    }
    return true;
  }
  @Override protected boolean includeOperation(  Method method,  String beanKey){
    if ("dontExposeMe".equals(method.getName())) {
      return false;
    }
    return true;
  }
  @SuppressWarnings("unused") protected String getOperationDescription(  Method method){
    return method.getName();
  }
  @SuppressWarnings("unused") protected String getAttributeDescription(  PropertyDescriptor propertyDescriptor){
    return propertyDescriptor.getDisplayName();
  }
  @SuppressWarnings("unused") protected void populateAttributeDescriptor(  Descriptor descriptor,  Method getter,  Method setter){
  }
  @SuppressWarnings("unused") protected void populateOperationDescriptor(  Descriptor descriptor,  Method method){
  }
  @SuppressWarnings({"unused","rawtypes"}) protected String getDescription(  String beanKey,  Class beanClass){
    return "";
  }
  @SuppressWarnings({"unused","rawtypes"}) protected void populateMBeanDescriptor(  Descriptor mbeanDescriptor,  String beanKey,  Class beanClass){
  }
}
