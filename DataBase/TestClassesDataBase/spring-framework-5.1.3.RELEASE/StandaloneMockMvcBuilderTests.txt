/** 
 * Tests for  {@link StandaloneMockMvcBuilder}
 * @author Rossen Stoyanchev
 * @author Rob Winch
 * @author Sebastien Deleuze
 */
public class StandaloneMockMvcBuilderTests {
  @Test public void placeHoldersInRequestMapping() throws Exception {
    TestStandaloneMockMvcBuilder builder=new TestStandaloneMockMvcBuilder(new PlaceholderController());
    builder.addPlaceholderValue("sys.login.ajax","/foo");
    builder.build();
    RequestMappingHandlerMapping hm=builder.wac.getBean(RequestMappingHandlerMapping.class);
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/foo");
    HandlerExecutionChain chain=hm.getHandler(request);
    assertNotNull(chain);
    assertEquals("handleWithPlaceholders",((HandlerMethod)chain.getHandler()).getMethod().getName());
  }
  @Test public void suffixPatternMatch() throws Exception {
    TestStandaloneMockMvcBuilder builder=new TestStandaloneMockMvcBuilder(new PersonController());
    builder.setUseSuffixPatternMatch(false);
    builder.build();
    RequestMappingHandlerMapping hm=builder.wac.getBean(RequestMappingHandlerMapping.class);
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/persons");
    HandlerExecutionChain chain=hm.getHandler(request);
    assertNotNull(chain);
    assertEquals("persons",((HandlerMethod)chain.getHandler()).getMethod().getName());
    request=new MockHttpServletRequest("GET","/persons.xml");
    chain=hm.getHandler(request);
    assertNull(chain);
  }
  @Test public void applicationContextAttribute(){
    TestStandaloneMockMvcBuilder builder=new TestStandaloneMockMvcBuilder(new PlaceholderController());
    builder.addPlaceholderValue("sys.login.ajax","/foo");
    WebApplicationContext wac=builder.initWebAppContext();
    assertEquals(wac,WebApplicationContextUtils.getRequiredWebApplicationContext(wac.getServletContext()));
  }
  @Test(expected=IllegalArgumentException.class) public void addFiltersFiltersNull(){
    StandaloneMockMvcBuilder builder=MockMvcBuilders.standaloneSetup(new PersonController());
    builder.addFilters((Filter[])null);
  }
  @Test(expected=IllegalArgumentException.class) public void addFiltersFiltersContainsNull(){
    StandaloneMockMvcBuilder builder=MockMvcBuilders.standaloneSetup(new PersonController());
    builder.addFilters(new ContinueFilter(),(Filter)null);
  }
  @Test(expected=IllegalArgumentException.class) public void addFilterPatternsNull(){
    StandaloneMockMvcBuilder builder=MockMvcBuilders.standaloneSetup(new PersonController());
    builder.addFilter(new ContinueFilter(),(String[])null);
  }
  @Test(expected=IllegalArgumentException.class) public void addFilterPatternContainsNull(){
    StandaloneMockMvcBuilder builder=MockMvcBuilders.standaloneSetup(new PersonController());
    builder.addFilter(new ContinueFilter(),(String)null);
  }
  @Test @SuppressWarnings("rawtypes") public void springHandlerInstantiator(){
    TestStandaloneMockMvcBuilder builder=new TestStandaloneMockMvcBuilder(new PersonController());
    builder.build();
    SpringHandlerInstantiator instantiator=new SpringHandlerInstantiator(builder.wac.getAutowireCapableBeanFactory());
    JsonSerializer serializer=instantiator.serializerInstance(null,null,UnknownSerializer.class);
    assertNotNull(serializer);
  }
@Controller private static class PlaceholderController {
    @RequestMapping(value="${sys.login.ajax}") private void handleWithPlaceholders(){
    }
  }
private static class TestStandaloneMockMvcBuilder extends StandaloneMockMvcBuilder {
    private WebApplicationContext wac;
    private TestStandaloneMockMvcBuilder(    Object... controllers){
      super(controllers);
    }
    @Override protected WebApplicationContext initWebAppContext(){
      this.wac=super.initWebAppContext();
      return this.wac;
    }
  }
@Controller private static class PersonController {
    @RequestMapping(value="/persons") public String persons(){
      return null;
    }
    @RequestMapping(value="/forward") public String forward(){
      return "forward:/persons";
    }
  }
private class ContinueFilter extends OncePerRequestFilter {
    @Override protected void doFilterInternal(    HttpServletRequest request,    HttpServletResponse response,    FilterChain filterChain) throws ServletException, IOException {
      filterChain.doFilter(request,response);
    }
  }
}
