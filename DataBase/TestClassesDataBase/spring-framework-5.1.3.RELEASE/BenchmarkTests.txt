/** 
 * Integration tests for AspectJ auto proxying. Includes mixing with Spring AOP Advisors to demonstrate that existing autoproxying contract is honoured.
 * @author Rod Johnson
 * @author Chris Beams
 */
public class BenchmarkTests {
  private static final Class<?> CLASS=BenchmarkTests.class;
  private static final String ASPECTJ_CONTEXT=CLASS.getSimpleName() + "-aspectj.xml";
  private static final String SPRING_AOP_CONTEXT=CLASS.getSimpleName() + "-springAop.xml";
  @Test public void testRepeatedAroundAdviceInvocationsWithAspectJ(){
    testRepeatedAroundAdviceInvocations(ASPECTJ_CONTEXT,getCount(),"AspectJ");
  }
  @Test public void testRepeatedAroundAdviceInvocationsWithSpringAop(){
    testRepeatedAroundAdviceInvocations(SPRING_AOP_CONTEXT,getCount(),"Spring AOP");
  }
  @Test public void testRepeatedBeforeAdviceInvocationsWithAspectJ(){
    testBeforeAdviceWithoutJoinPoint(ASPECTJ_CONTEXT,getCount(),"AspectJ");
  }
  @Test public void testRepeatedBeforeAdviceInvocationsWithSpringAop(){
    testBeforeAdviceWithoutJoinPoint(SPRING_AOP_CONTEXT,getCount(),"Spring AOP");
  }
  @Test public void testRepeatedAfterReturningAdviceInvocationsWithAspectJ(){
    testAfterReturningAdviceWithoutJoinPoint(ASPECTJ_CONTEXT,getCount(),"AspectJ");
  }
  @Test public void testRepeatedAfterReturningAdviceInvocationsWithSpringAop(){
    testAfterReturningAdviceWithoutJoinPoint(SPRING_AOP_CONTEXT,getCount(),"Spring AOP");
  }
  @Test public void testRepeatedMixWithAspectJ(){
    testMix(ASPECTJ_CONTEXT,getCount(),"AspectJ");
  }
  @Test public void testRepeatedMixWithSpringAop(){
    testMix(SPRING_AOP_CONTEXT,getCount(),"Spring AOP");
  }
  /** 
 * Change the return number to a higher number to make this test useful.
 */
  protected int getCount(){
    return 10;
  }
  private long testRepeatedAroundAdviceInvocations(  String file,  int howmany,  String technology){
    ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(file,CLASS);
    StopWatch sw=new StopWatch();
    sw.start(howmany + " repeated around advice invocations with " + technology);
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    assertEquals(68,adrian.getAge());
    for (int i=0; i < howmany; i++) {
      adrian.getAge();
    }
    sw.stop();
    System.out.println(sw.prettyPrint());
    return sw.getLastTaskTimeMillis();
  }
  private long testBeforeAdviceWithoutJoinPoint(  String file,  int howmany,  String technology){
    ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(file,CLASS);
    StopWatch sw=new StopWatch();
    sw.start(howmany + " repeated before advice invocations with " + technology);
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    Advised a=(Advised)adrian;
    assertTrue(a.getAdvisors().length >= 3);
    assertEquals("adrian",adrian.getName());
    for (int i=0; i < howmany; i++) {
      adrian.getName();
    }
    sw.stop();
    System.out.println(sw.prettyPrint());
    return sw.getLastTaskTimeMillis();
  }
  private long testAfterReturningAdviceWithoutJoinPoint(  String file,  int howmany,  String technology){
    ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(file,CLASS);
    StopWatch sw=new StopWatch();
    sw.start(howmany + " repeated after returning advice invocations with " + technology);
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    Advised a=(Advised)adrian;
    assertTrue(a.getAdvisors().length >= 3);
    adrian.setAge(25);
    for (int i=0; i < howmany; i++) {
      adrian.setAge(i);
    }
    sw.stop();
    System.out.println(sw.prettyPrint());
    return sw.getLastTaskTimeMillis();
  }
  private long testMix(  String file,  int howmany,  String technology){
    ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(file,CLASS);
    StopWatch sw=new StopWatch();
    sw.start(howmany + " repeated mixed invocations with " + technology);
    ITestBean adrian=(ITestBean)bf.getBean("adrian");
    assertTrue(AopUtils.isAopProxy(adrian));
    Advised a=(Advised)adrian;
    assertTrue(a.getAdvisors().length >= 3);
    for (int i=0; i < howmany; i++) {
      adrian.getAge();
      adrian.getName();
      adrian.setAge(i);
      adrian.getDoctor();
      adrian.getLawyer();
      adrian.getSpouse();
    }
    sw.stop();
    System.out.println(sw.prettyPrint());
    return sw.getLastTaskTimeMillis();
  }
}
