@RestController @RequestMapping("/person-create") @SuppressWarnings("unused") private static class PersonCreateController {
  final List<Person> persons=new ArrayList<>();
  @PostMapping("/publisher") public Publisher<Void> createWithPublisher(  @RequestBody Publisher<Person> publisher){
    return Flux.from(publisher).doOnNext(persons::add).then();
  }
  @PostMapping("/mono") public Mono<Void> createWithMono(  @RequestBody Mono<Person> mono){
    return mono.doOnNext(persons::add).then();
  }
  @PostMapping("/single") public Completable createWithSingle(  @RequestBody Single<Person> single){
    return single.map(persons::add).toCompletable();
  }
  @PostMapping("/rxjava2-single") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithRxJava2Single(  @RequestBody io.reactivex.Single<Person> single){
    return single.map(persons::add).toCompletable();
  }
  @PostMapping("/flux") public Mono<Void> createWithFlux(  @RequestBody Flux<Person> flux){
    return flux.doOnNext(persons::add).then();
  }
  @PostMapping("/observable") public Observable<Void> createWithObservable(  @RequestBody Observable<Person> observable){
    return observable.toList().doOnNext(persons::addAll).flatMap(document -> Observable.empty());
  }
  @PostMapping("/rxjava2-observable") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithRxJava2Observable(  @RequestBody io.reactivex.Observable<Person> observable){
    return observable.toList().doOnSuccess(persons::addAll).toCompletable();
  }
  @PostMapping("/flowable") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithFlowable(  @RequestBody Flowable<Person> flowable){
    return flowable.toList().doOnSuccess(persons::addAll).toCompletable();
  }
}
