@SuppressWarnings("serial") class OrderedTxCheckAdvisor extends StaticMethodMatcherPointcutAdvisor implements InitializingBean {
  /** 
 * Should we insist on the presence of a transaction attribute or refuse to accept one?
 */
  private boolean requireTransactionContext=false;
  public void setRequireTransactionContext(  boolean requireTransactionContext){
    this.requireTransactionContext=requireTransactionContext;
  }
  public boolean isRequireTransactionContext(){
    return requireTransactionContext;
  }
  public CountingBeforeAdvice getCountingBeforeAdvice(){
    return (CountingBeforeAdvice)getAdvice();
  }
  @Override public void afterPropertiesSet() throws Exception {
    setAdvice(new TxCountingBeforeAdvice());
  }
  @Override public boolean matches(  Method method,  @Nullable Class<?> targetClass){
    return method.getName().startsWith("setAge");
  }
private class TxCountingBeforeAdvice extends CountingBeforeAdvice {
    @Override public void before(    Method method,    Object[] args,    Object target) throws Throwable {
      if (requireTransactionContext) {
        TransactionInterceptor.currentTransactionStatus();
      }
 else {
        try {
          TransactionInterceptor.currentTransactionStatus();
          throw new RuntimeException("Shouldn't have a transaction");
        }
 catch (        NoTransactionException ex) {
        }
      }
      super.before(method,args,target);
    }
  }
}
