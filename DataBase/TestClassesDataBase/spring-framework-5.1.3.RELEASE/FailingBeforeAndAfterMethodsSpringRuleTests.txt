/** 
 * This class is an extension of  {@link FailingBeforeAndAfterMethodsSpringRunnerTests}that has been modified to use  {@link SpringClassRule} and{@link SpringMethodRule}.
 * @author Sam Brannen
 * @since 4.2
 */
public class FailingBeforeAndAfterMethodsSpringRuleTests extends FailingBeforeAndAfterMethodsSpringRunnerTests {
  @Parameters(name="{0}") public static Object[] testData(){
    return new Object[]{AlwaysFailingBeforeTestClassSpringRuleTestCase.class.getSimpleName(),AlwaysFailingAfterTestClassSpringRuleTestCase.class.getSimpleName(),AlwaysFailingPrepareTestInstanceSpringRuleTestCase.class.getSimpleName(),AlwaysFailingBeforeTestMethodSpringRuleTestCase.class.getSimpleName(),AlwaysFailingAfterTestMethodSpringRuleTestCase.class.getSimpleName(),FailingBeforeTransactionSpringRuleTestCase.class.getSimpleName(),FailingAfterTransactionSpringRuleTestCase.class.getSimpleName()};
  }
  public FailingBeforeAndAfterMethodsSpringRuleTests(  String testClassName) throws Exception {
    super(testClassName);
  }
  @Override protected Class<? extends Runner> getRunnerClass(){
    return JUnit4.class;
  }
@RunWith(JUnit4.class) public static abstract class BaseSpringRuleTestCase {
    @ClassRule public static final SpringClassRule springClassRule=new SpringClassRule();
    @Rule public final SpringMethodRule springMethodRule=new SpringMethodRule();
    @Test public void testNothing(){
    }
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners(AlwaysFailingBeforeTestClassTestExecutionListener.class) public static class AlwaysFailingBeforeTestClassSpringRuleTestCase extends BaseSpringRuleTestCase {
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners(AlwaysFailingAfterTestClassTestExecutionListener.class) public static class AlwaysFailingAfterTestClassSpringRuleTestCase extends BaseSpringRuleTestCase {
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners(AlwaysFailingPrepareTestInstanceTestExecutionListener.class) public static class AlwaysFailingPrepareTestInstanceSpringRuleTestCase extends BaseSpringRuleTestCase {
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners(AlwaysFailingBeforeTestMethodTestExecutionListener.class) public static class AlwaysFailingBeforeTestMethodSpringRuleTestCase extends BaseSpringRuleTestCase {
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners(AlwaysFailingAfterTestMethodTestExecutionListener.class) public static class AlwaysFailingAfterTestMethodSpringRuleTestCase extends BaseSpringRuleTestCase {
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @RunWith(JUnit4.class) @ContextConfiguration("../FailingBeforeAndAfterMethodsTests-context.xml") @Transactional public static class FailingBeforeTransactionSpringRuleTestCase {
    @ClassRule public static final SpringClassRule springClassRule=new SpringClassRule();
    @Rule public final SpringMethodRule springMethodRule=new SpringMethodRule();
    @Test public void testNothing(){
    }
    @BeforeTransaction public void beforeTransaction(){
      fail("always failing beforeTransaction()");
    }
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @RunWith(JUnit4.class) @ContextConfiguration("../FailingBeforeAndAfterMethodsTests-context.xml") @Transactional public static class FailingAfterTransactionSpringRuleTestCase {
    @ClassRule public static final SpringClassRule springClassRule=new SpringClassRule();
    @Rule public final SpringMethodRule springMethodRule=new SpringMethodRule();
    @Test public void testNothing(){
    }
    @AfterTransaction public void afterTransaction(){
      fail("always failing afterTransaction()");
    }
  }
}
