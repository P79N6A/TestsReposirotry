/** 
 * Unit tests for  {@link org.springframework.web.socket.adapter.standard.StandardWebSocketSession}.
 * @author Rossen Stoyanchev
 */
public class StandardWebSocketSessionTests {
  private final HttpHeaders headers=new HttpHeaders();
  private final Map<String,Object> attributes=new HashMap<>();
  @Test @SuppressWarnings("resource") public void getPrincipalWithConstructorArg(){
    TestPrincipal user=new TestPrincipal("joe");
    StandardWebSocketSession session=new StandardWebSocketSession(this.headers,this.attributes,null,null,user);
    assertSame(user,session.getPrincipal());
  }
  @Test @SuppressWarnings("resource") public void getPrincipalWithNativeSession(){
    TestPrincipal user=new TestPrincipal("joe");
    Session nativeSession=Mockito.mock(Session.class);
    given(nativeSession.getUserPrincipal()).willReturn(user);
    StandardWebSocketSession session=new StandardWebSocketSession(this.headers,this.attributes,null,null);
    session.initializeNativeSession(nativeSession);
    assertSame(user,session.getPrincipal());
  }
  @Test @SuppressWarnings("resource") public void getPrincipalNone(){
    Session nativeSession=Mockito.mock(Session.class);
    given(nativeSession.getUserPrincipal()).willReturn(null);
    StandardWebSocketSession session=new StandardWebSocketSession(this.headers,this.attributes,null,null);
    session.initializeNativeSession(nativeSession);
    reset(nativeSession);
    assertNull(session.getPrincipal());
    verifyNoMoreInteractions(nativeSession);
  }
  @Test @SuppressWarnings("resource") public void getAcceptedProtocol(){
    String protocol="foo";
    Session nativeSession=Mockito.mock(Session.class);
    given(nativeSession.getNegotiatedSubprotocol()).willReturn(protocol);
    StandardWebSocketSession session=new StandardWebSocketSession(this.headers,this.attributes,null,null);
    session.initializeNativeSession(nativeSession);
    reset(nativeSession);
    assertEquals(protocol,session.getAcceptedProtocol());
    verifyNoMoreInteractions(nativeSession);
  }
}
