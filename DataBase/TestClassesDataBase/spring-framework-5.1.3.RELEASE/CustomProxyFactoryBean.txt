public static class CustomProxyFactoryBean implements FactoryBean<ITestBean> {
  private final TestBean tb=new TestBean();
  @Override public ITestBean getObject(){
    return (ITestBean)Proxy.newProxyInstance(CustomProxyFactoryBean.class.getClassLoader(),new Class<?>[]{ITestBean.class},new InvocationHandler(){
      @Override public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        return ReflectionUtils.invokeMethod(method,tb,args);
      }
    }
);
  }
  @Override public Class<?> getObjectType(){
    return ITestBean.class;
  }
  @Override public boolean isSingleton(){
    return false;
  }
}
