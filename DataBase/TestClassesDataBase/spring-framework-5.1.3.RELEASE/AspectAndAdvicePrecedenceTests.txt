/** 
 * @author Adrian Colyer
 * @author Chris Beams
 */
public class AspectAndAdvicePrecedenceTests {
  private PrecedenceTestAspect highPrecedenceAspect;
  private PrecedenceTestAspect lowPrecedenceAspect;
  private SimpleSpringBeforeAdvice highPrecedenceSpringAdvice;
  private SimpleSpringBeforeAdvice lowPrecedenceSpringAdvice;
  private ITestBean testBean;
  @Before public void setup(){
    ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml",getClass());
    highPrecedenceAspect=(PrecedenceTestAspect)ctx.getBean("highPrecedenceAspect");
    lowPrecedenceAspect=(PrecedenceTestAspect)ctx.getBean("lowPrecedenceAspect");
    highPrecedenceSpringAdvice=(SimpleSpringBeforeAdvice)ctx.getBean("highPrecedenceSpringAdvice");
    lowPrecedenceSpringAdvice=(SimpleSpringBeforeAdvice)ctx.getBean("lowPrecedenceSpringAdvice");
    testBean=(ITestBean)ctx.getBean("testBean");
  }
  @Test public void testAdviceOrder(){
    PrecedenceTestAspect.Collaborator collaborator=new PrecedenceVerifyingCollaborator();
    this.highPrecedenceAspect.setCollaborator(collaborator);
    this.lowPrecedenceAspect.setCollaborator(collaborator);
    this.highPrecedenceSpringAdvice.setCollaborator(collaborator);
    this.lowPrecedenceSpringAdvice.setCollaborator(collaborator);
    this.testBean.getAge();
  }
private static class PrecedenceVerifyingCollaborator implements PrecedenceTestAspect.Collaborator {
    private static final String[] EXPECTED={"beforeAdviceOne(highPrecedenceAspect)","beforeAdviceTwo(highPrecedenceAspect)","aroundAdviceOne(highPrecedenceAspect)","aroundAdviceTwo(highPrecedenceAspect)","beforeAdviceOne(highPrecedenceSpringAdvice)","beforeAdviceOne(lowPrecedenceSpringAdvice)","beforeAdviceOne(lowPrecedenceAspect)","beforeAdviceTwo(lowPrecedenceAspect)","aroundAdviceOne(lowPrecedenceAspect)","aroundAdviceTwo(lowPrecedenceAspect)","aroundAdviceTwo(lowPrecedenceAspect)","aroundAdviceOne(lowPrecedenceAspect)","afterAdviceOne(lowPrecedenceAspect)","afterAdviceTwo(lowPrecedenceAspect)","aroundAdviceTwo(highPrecedenceAspect)","aroundAdviceOne(highPrecedenceAspect)","afterAdviceOne(highPrecedenceAspect)","afterAdviceTwo(highPrecedenceAspect)"};
    private int adviceInvocationNumber=0;
    private void checkAdvice(    String whatJustHappened){
      if (adviceInvocationNumber > (EXPECTED.length - 1)) {
        fail("Too many advice invocations, expecting " + EXPECTED.length + " but had "+ adviceInvocationNumber);
      }
      String expecting=EXPECTED[adviceInvocationNumber++];
      if (!whatJustHappened.equals(expecting)) {
        fail("Expecting '" + expecting + "' on advice invocation "+ adviceInvocationNumber+ " but got '"+ whatJustHappened+ "'");
      }
    }
    @Override public void beforeAdviceOne(    String beanName){
      checkAdvice("beforeAdviceOne(" + beanName + ")");
    }
    @Override public void beforeAdviceTwo(    String beanName){
      checkAdvice("beforeAdviceTwo(" + beanName + ")");
    }
    @Override public void aroundAdviceOne(    String beanName){
      checkAdvice("aroundAdviceOne(" + beanName + ")");
    }
    @Override public void aroundAdviceTwo(    String beanName){
      checkAdvice("aroundAdviceTwo(" + beanName + ")");
    }
    @Override public void afterAdviceOne(    String beanName){
      checkAdvice("afterAdviceOne(" + beanName + ")");
    }
    @Override public void afterAdviceTwo(    String beanName){
      checkAdvice("afterAdviceTwo(" + beanName + ")");
    }
  }
}
