/** 
 * Add a DeclareParents field in concrete subclasses, to identify the type pattern to apply the introduction to.
 * @author Rod Johnson
 * @since 2.0
 */
@Aspect abstract class AbstractMakeModifiable {
public interface MutableModifiable extends Modifiable {
    void markDirty();
  }
public static class ModifiableImpl implements MutableModifiable {
    private boolean modified;
    @Override public void acceptChanges(){
      modified=false;
    }
    @Override public boolean isModified(){
      return modified;
    }
    @Override public void markDirty(){
      this.modified=true;
    }
  }
  @Before(value="execution(void set*(*)) && this(modifiable) && args(newValue)",argNames="modifiable,newValue") public void recordModificationIfSetterArgumentDiffersFromOldValue(  JoinPoint jp,  MutableModifiable mixin,  Object newValue){
    if (mixin.isModified()) {
      return;
    }
    Method correspondingGetter=getGetterFromSetter(((MethodSignature)jp.getSignature()).getMethod());
    boolean modified=true;
    if (correspondingGetter != null) {
      try {
        Object oldValue=correspondingGetter.invoke(jp.getTarget());
        modified=!ObjectUtils.nullSafeEquals(oldValue,newValue);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
    }
    if (modified) {
      mixin.markDirty();
    }
  }
  private Method getGetterFromSetter(  Method setter){
    String getterName=setter.getName().replaceFirst("set","get");
    try {
      return setter.getDeclaringClass().getMethod(getterName);
    }
 catch (    NoSuchMethodException ex) {
      return null;
    }
  }
}
