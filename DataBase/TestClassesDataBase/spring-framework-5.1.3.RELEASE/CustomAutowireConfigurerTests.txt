/** 
 * Unit tests for  {@link CustomAutowireConfigurer}.
 * @author Mark Fisher
 * @author Juergen Hoeller
 * @author Chris Beams
 */
public class CustomAutowireConfigurerTests {
  private static final Resource CONTEXT=qualifiedResource(CustomAutowireConfigurerTests.class,"context.xml");
  @Test public void testCustomResolver(){
    DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
    BeanDefinitionReader reader=new XmlBeanDefinitionReader(bf);
    reader.loadBeanDefinitions(CONTEXT);
    CustomAutowireConfigurer cac=new CustomAutowireConfigurer();
    CustomResolver customResolver=new CustomResolver();
    bf.setAutowireCandidateResolver(customResolver);
    cac.postProcessBeanFactory(bf);
    TestBean testBean=(TestBean)bf.getBean("testBean");
    assertEquals("#1!",testBean.getName());
  }
public static class TestBean {
    private String name;
    public TestBean(    String name){
      this.name=name;
    }
    public String getName(){
      return this.name;
    }
  }
public static class CustomResolver implements AutowireCandidateResolver {
    @Override public boolean isAutowireCandidate(    BeanDefinitionHolder bdHolder,    DependencyDescriptor descriptor){
      if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {
        return false;
      }
      if (!bdHolder.getBeanName().matches("[a-z-]+")) {
        return false;
      }
      if (bdHolder.getBeanDefinition().getAttribute("priority").equals("1")) {
        return true;
      }
      return false;
    }
    @Override public Object getSuggestedValue(    DependencyDescriptor descriptor){
      return null;
    }
    @Override public Object getLazyResolutionProxyIfNecessary(    DependencyDescriptor descriptor,    String beanName){
      return null;
    }
  }
}
