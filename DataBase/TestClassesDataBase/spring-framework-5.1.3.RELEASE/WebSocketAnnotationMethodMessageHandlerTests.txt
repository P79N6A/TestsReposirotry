/** 
 * Unit tests for  {@link WebSocketAnnotationMethodMessageHandler}.
 * @author Rossen Stoyanchev
 */
public class WebSocketAnnotationMethodMessageHandlerTests {
  private TestWebSocketAnnotationMethodMessageHandler messageHandler;
  private StaticApplicationContext applicationContext;
  @Before public void setUp() throws Exception {
    this.applicationContext=new StaticApplicationContext();
    this.applicationContext.registerSingleton("controller",TestController.class);
    this.applicationContext.registerSingleton("controllerAdvice",TestControllerAdvice.class);
    this.applicationContext.refresh();
    SubscribableChannel channel=Mockito.mock(SubscribableChannel.class);
    SimpMessageSendingOperations brokerTemplate=new SimpMessagingTemplate(channel);
    this.messageHandler=new TestWebSocketAnnotationMethodMessageHandler(brokerTemplate,channel,channel);
    this.messageHandler.setApplicationContext(this.applicationContext);
    this.messageHandler.afterPropertiesSet();
  }
  @Test public void globalException() throws Exception {
    SimpMessageHeaderAccessor headers=SimpMessageHeaderAccessor.create();
    headers.setSessionId("session1");
    headers.setSessionAttributes(new ConcurrentHashMap<>());
    headers.setDestination("/exception");
    Message<?> message=MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build();
    this.messageHandler.handleMessage(message);
    TestControllerAdvice controllerAdvice=this.applicationContext.getBean(TestControllerAdvice.class);
    assertTrue(controllerAdvice.isExceptionHandled());
  }
@Controller private static class TestController {
    @MessageMapping("/exception") public void handleWithSimulatedException(){
      throw new IllegalStateException("simulated exception");
    }
  }
@ControllerAdvice private static class TestControllerAdvice {
    private boolean exceptionHandled;
    public boolean isExceptionHandled(){
      return this.exceptionHandled;
    }
    @MessageExceptionHandler public void handleException(    IllegalStateException ex){
      this.exceptionHandled=true;
    }
  }
private static class TestWebSocketAnnotationMethodMessageHandler extends WebSocketAnnotationMethodMessageHandler {
    public TestWebSocketAnnotationMethodMessageHandler(    SimpMessageSendingOperations brokerTemplate,    SubscribableChannel clientInboundChannel,    MessageChannel clientOutboundChannel){
      super(clientInboundChannel,clientOutboundChannel,brokerTemplate);
    }
  }
}
