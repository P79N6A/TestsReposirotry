private static class MessageExchangeBuilder {
  private final Message<?> message;
  private final StompHeaderAccessor headers;
  private final List<MessageMatcher> expected=new ArrayList<>();
  public MessageExchangeBuilder(  Message<?> message){
    this.message=message;
    this.headers=StompHeaderAccessor.wrap(message);
  }
  public static MessageExchangeBuilder error(  String sessionId){
    return new MessageExchangeBuilder(null).andExpectError(sessionId);
  }
  public static MessageExchangeBuilder connect(  String sessionId){
    StompHeaderAccessor headers=StompHeaderAccessor.create(StompCommand.CONNECT);
    headers.setSessionId(sessionId);
    headers.setAcceptVersion("1.1,1.2");
    headers.setHeartbeat(0,0);
    Message<?> message=MessageBuilder.createMessage(new byte[0],headers.getMessageHeaders());
    MessageExchangeBuilder builder=new MessageExchangeBuilder(message);
    builder.expected.add(new StompConnectedFrameMessageMatcher(sessionId));
    return builder;
  }
  @SuppressWarnings("unused") public static MessageExchangeBuilder connectWithError(  String sessionId){
    StompHeaderAccessor headers=StompHeaderAccessor.create(StompCommand.CONNECT);
    headers.setSessionId(sessionId);
    headers.setAcceptVersion("1.1,1.2");
    Message<?> message=MessageBuilder.createMessage(new byte[0],headers.getMessageHeaders());
    MessageExchangeBuilder builder=new MessageExchangeBuilder(message);
    return builder.andExpectError();
  }
  public static MessageExchangeBuilder subscribeWithReceipt(  String sessionId,  String subscriptionId,  String destination,  String receiptId){
    StompHeaderAccessor headers=StompHeaderAccessor.create(StompCommand.SUBSCRIBE);
    headers.setSessionId(sessionId);
    headers.setSubscriptionId(subscriptionId);
    headers.setDestination(destination);
    headers.setReceipt(receiptId);
    Message<?> message=MessageBuilder.createMessage(new byte[0],headers.getMessageHeaders());
    MessageExchangeBuilder builder=new MessageExchangeBuilder(message);
    builder.expected.add(new StompReceiptFrameMessageMatcher(sessionId,receiptId));
    return builder;
  }
  public static MessageExchangeBuilder send(  String destination,  String payload){
    SimpMessageHeaderAccessor headers=SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE);
    headers.setDestination(destination);
    Message<?> message=MessageBuilder.createMessage(payload.getBytes(StandardCharsets.UTF_8),headers.getMessageHeaders());
    return new MessageExchangeBuilder(message);
  }
  public static MessageExchangeBuilder disconnectWithReceipt(  String sessionId,  String receiptId){
    StompHeaderAccessor headers=StompHeaderAccessor.create(StompCommand.DISCONNECT);
    headers.setSessionId(sessionId);
    headers.setReceipt(receiptId);
    Message<?> message=MessageBuilder.createMessage(new byte[0],headers.getMessageHeaders());
    MessageExchangeBuilder builder=new MessageExchangeBuilder(message);
    builder.expected.add(new StompReceiptFrameMessageMatcher(sessionId,receiptId));
    return builder;
  }
  public MessageExchangeBuilder andExpectMessage(  String sessionId,  String subscriptionId){
    Assert.state(SimpMessageType.MESSAGE.equals(this.headers.getMessageType()),"MESSAGE type expected");
    String destination=this.headers.getDestination();
    Object payload=this.message.getPayload();
    this.expected.add(new StompMessageFrameMessageMatcher(sessionId,subscriptionId,destination,payload));
    return this;
  }
  public MessageExchangeBuilder andExpectError(){
    String sessionId=this.headers.getSessionId();
    Assert.state(sessionId != null,"No sessionId to match the ERROR frame to");
    return andExpectError(sessionId);
  }
  public MessageExchangeBuilder andExpectError(  String sessionId){
    this.expected.add(new StompFrameMessageMatcher(StompCommand.ERROR,sessionId));
    return this;
  }
  public MessageExchange build(){
    return new MessageExchange(this.message,this.expected.toArray(new MessageMatcher[this.expected.size()]));
  }
}
