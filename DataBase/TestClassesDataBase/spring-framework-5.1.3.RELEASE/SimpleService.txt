static class SimpleService {
  private final AtomicLong counter=new AtomicLong();
  @Cacheable(cacheNames="testCache",sync=true,unless="#result > 10") public Object unlessSync(  Object arg1){
    return this.counter.getAndIncrement();
  }
  @Cacheable(cacheNames={"testCache","anotherTestCache"},sync=true) public Object severalCachesSync(  Object arg1){
    return this.counter.getAndIncrement();
  }
  @Cacheable(cacheResolver="testCacheResolver",sync=true) public Object severalCachesWithResolvedSync(  Object arg1){
    return this.counter.getAndIncrement();
  }
  @Cacheable(cacheNames="testCache",sync=true) @CacheEvict(cacheNames="anotherTestCache",key="#arg1") public Object syncWithAnotherOperation(  Object arg1){
    return this.counter.getAndIncrement();
  }
  @Caching(cacheable={@Cacheable(cacheNames="testCache",sync=true),@Cacheable(cacheNames="anotherTestCache",sync=true)}) public Object syncWithTwoGetOperations(  Object arg1){
    return this.counter.getAndIncrement();
  }
}
