/** 
 * Tests invocation of constructors.
 * @author Andy Clement
 */
public class ConstructorInvocationTests extends AbstractExpressionTests {
  @Test public void testTypeConstructors(){
    evaluate("new String('hello world')","hello world",String.class);
  }
  @Test public void testNonExistentType(){
    evaluateAndCheckError("new FooBar()",SpelMessage.CONSTRUCTOR_INVOCATION_PROBLEM);
  }
@SuppressWarnings("serial") static class TestException extends Exception {
  }
static class Tester {
    public static int counter;
    public int i;
    public Tester(){
    }
    public Tester(    int i) throws Exception {
      counter++;
      if (i == 1) {
        throw new IllegalArgumentException("IllegalArgumentException for 1");
      }
      if (i == 2) {
        throw new RuntimeException("RuntimeException for 2");
      }
      if (i == 4) {
        throw new TestException();
      }
      this.i=i;
    }
    public Tester(    PlaceOfBirth pob){
    }
  }
  @Test public void testConstructorThrowingException_SPR6760(){
    SpelExpressionParser parser=new SpelExpressionParser();
    Expression expr=parser.parseExpression("new org.springframework.expression.spel.ConstructorInvocationTests$Tester(#bar).i");
    StandardEvaluationContext eContext=TestScenarioCreator.getTestEvaluationContext();
    eContext.setRootObject(new Tester());
    eContext.setVariable("bar",3);
    Object o=expr.getValue(eContext);
    assertEquals(3,o);
    assertEquals(1,parser.parseExpression("counter").getValue(eContext));
    eContext.setVariable("bar",new PlaceOfBirth("London"));
    o=expr.getValue(eContext);
    assertEquals(0,o);
    eContext.setVariable("bar",3);
    o=expr.getValue(eContext);
    assertEquals(3,o);
    assertEquals(2,parser.parseExpression("counter").getValue(eContext));
    eContext.setVariable("bar",4);
    try {
      o=expr.getValue(eContext);
      fail("Should have failed");
    }
 catch (    Exception e) {
      int idx=e.getMessage().indexOf("Tester");
      if (idx == -1) {
        fail("Expected reference to Tester in :" + e.getMessage());
      }
    }
    assertEquals(3,parser.parseExpression("counter").getValue(eContext));
    eContext.setVariable("bar",1);
    try {
      o=expr.getValue(eContext);
      fail("Should have failed");
    }
 catch (    Exception e) {
      if (e instanceof SpelEvaluationException) {
        e.printStackTrace();
        fail("Should not have been wrapped");
      }
    }
    assertEquals(4,parser.parseExpression("counter").getValue(eContext));
  }
  @Test public void testAddingConstructorResolvers(){
    StandardEvaluationContext ctx=new StandardEvaluationContext();
    List<ConstructorResolver> constructorResolvers=ctx.getConstructorResolvers();
    assertEquals(1,constructorResolvers.size());
    ConstructorResolver dummy=new DummyConstructorResolver();
    ctx.addConstructorResolver(dummy);
    assertEquals(2,ctx.getConstructorResolvers().size());
    List<ConstructorResolver> copy=new ArrayList<>();
    copy.addAll(ctx.getConstructorResolvers());
    assertTrue(ctx.removeConstructorResolver(dummy));
    assertFalse(ctx.removeConstructorResolver(dummy));
    assertEquals(1,ctx.getConstructorResolvers().size());
    ctx.setConstructorResolvers(copy);
    assertEquals(2,ctx.getConstructorResolvers().size());
  }
static class DummyConstructorResolver implements ConstructorResolver {
    @Override public ConstructorExecutor resolve(    EvaluationContext context,    String typeName,    List<TypeDescriptor> argumentTypes) throws AccessException {
      throw new UnsupportedOperationException("Auto-generated method stub");
    }
  }
  @Test public void testVarargsInvocation01(){
    evaluate("new org.springframework.expression.spel.testresources.Fruit('a','b','c').stringscount()",3,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit('a').stringscount()",1,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit().stringscount()",0,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(1,2,3).stringscount()",3,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(1).stringscount()",1,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(1,'a',3.0d).stringscount()",3,Integer.class);
  }
  @Test public void testVarargsInvocation02(){
    evaluate("new org.springframework.expression.spel.testresources.Fruit(5,'a','b','c').stringscount()",8,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(2,'a').stringscount()",3,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(4).stringscount()",4,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(8,2,3).stringscount()",10,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(9).stringscount()",9,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(2,'a',3.0d).stringscount()",4,Integer.class);
    evaluate("new org.springframework.expression.spel.testresources.Fruit(8,stringArrayOfThreeItems).stringscount()",11,Integer.class);
  }
  @Test public void testWidening01(){
    evaluate("new Double(3)",3.0d,Double.class);
    evaluate("new Long(3)",3L,Long.class);
  }
  @Test @Ignore public void testArgumentConversion01(){
    evaluate("new String(3.0d)","3.0",String.class);
  }
}
