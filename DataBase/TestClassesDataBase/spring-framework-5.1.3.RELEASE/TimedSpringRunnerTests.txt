/** 
 * Verifies proper handling of the following in conjunction with the {@link SpringRunner}: <ul> <li>JUnit's  {@link Test#timeout() @Test(timeout=...)}</li> <li>Spring's  {@link Timed @Timed}</li> </ul>
 * @author Sam Brannen
 * @since 3.0
 */
@RunWith(JUnit4.class) public class TimedSpringRunnerTests {
  protected Class<?> getTestCase(){
    return TimedSpringRunnerTestCase.class;
  }
  protected Class<? extends Runner> getRunnerClass(){
    return SpringRunner.class;
  }
  @Test public void timedTests() throws Exception {
    runTestsAndAssertCounters(getRunnerClass(),getTestCase(),7,5,7,0,0);
  }
@Ignore("TestCase classes are run manually by the enclosing test class") @TestExecutionListeners({}) public static class TimedSpringRunnerTestCase {
    @Test(timeout=2000) public void jUnitTimeoutWithNoOp(){
    }
    @Test @Timed(millis=2000) public void springTimeoutWithNoOp(){
    }
    @Test(timeout=100) public void jUnitTimeoutWithSleep() throws Exception {
      Thread.sleep(200);
    }
    @Test @Timed(millis=100) public void springTimeoutWithSleep() throws Exception {
      Thread.sleep(200);
    }
    @Test @MetaTimed public void springTimeoutWithSleepAndMetaAnnotation() throws Exception {
      Thread.sleep(200);
    }
    @Test @MetaTimedWithOverride(millis=100) public void springTimeoutWithSleepAndMetaAnnotationAndOverride() throws Exception {
      Thread.sleep(200);
    }
    @Test(timeout=200) @Timed(millis=200) public void springAndJUnitTimeouts(){
    }
  }
  @Timed(millis=100) @Retention(RetentionPolicy.RUNTIME) private static @interface MetaTimed {}
  @Timed(millis=1000) @Retention(RetentionPolicy.RUNTIME) private static @interface MetaTimedWithOverride {  long millis() default 1000;
}
}
