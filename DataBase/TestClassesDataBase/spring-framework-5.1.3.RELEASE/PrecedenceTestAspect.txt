class PrecedenceTestAspect implements BeanNameAware, Ordered {
  private String name;
  private int order=Ordered.LOWEST_PRECEDENCE;
  private Collaborator collaborator;
  @Override public void setBeanName(  String name){
    this.name=name;
  }
  public void setOrder(  int order){
    this.order=order;
  }
  @Override public int getOrder(){
    return order;
  }
  public void setCollaborator(  Collaborator collaborator){
    this.collaborator=collaborator;
  }
  public void beforeAdviceOne(){
    this.collaborator.beforeAdviceOne(this.name);
  }
  public void beforeAdviceTwo(){
    this.collaborator.beforeAdviceTwo(this.name);
  }
  public int aroundAdviceOne(  ProceedingJoinPoint pjp){
    int ret=-1;
    this.collaborator.aroundAdviceOne(this.name);
    try {
      ret=((Integer)pjp.proceed()).intValue();
    }
 catch (    Throwable t) {
      throw new RuntimeException(t);
    }
    this.collaborator.aroundAdviceOne(this.name);
    return ret;
  }
  public int aroundAdviceTwo(  ProceedingJoinPoint pjp){
    int ret=-1;
    this.collaborator.aroundAdviceTwo(this.name);
    try {
      ret=((Integer)pjp.proceed()).intValue();
    }
 catch (    Throwable t) {
      throw new RuntimeException(t);
    }
    this.collaborator.aroundAdviceTwo(this.name);
    return ret;
  }
  public void afterAdviceOne(){
    this.collaborator.afterAdviceOne(this.name);
  }
  public void afterAdviceTwo(){
    this.collaborator.afterAdviceTwo(this.name);
  }
public interface Collaborator {
    void beforeAdviceOne(    String beanName);
    void beforeAdviceTwo(    String beanName);
    void aroundAdviceOne(    String beanName);
    void aroundAdviceTwo(    String beanName);
    void afterAdviceOne(    String beanName);
    void afterAdviceTwo(    String beanName);
  }
}
