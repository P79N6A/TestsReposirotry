/** 
 * Examples of expectations on the content of the model prepared by the controller.
 * @author Rossen Stoyanchev
 */
public class ModelAssertionTests {
  private MockMvc mockMvc;
  @Before public void setup(){
    SampleController controller=new SampleController("a string value",3,new Person("a name"));
    this.mockMvc=standaloneSetup(controller).defaultRequest(get("/")).alwaysExpect(status().isOk()).setControllerAdvice(new ModelAttributeAdvice()).build();
  }
  @Test public void testAttributeEqualTo() throws Exception {
    mockMvc.perform(get("/")).andExpect(model().attribute("integer",3)).andExpect(model().attribute("string","a string value")).andExpect(model().attribute("integer",equalTo(3))).andExpect(model().attribute("string",equalTo("a string value"))).andExpect(model().attribute("globalAttrName",equalTo("Global Attribute Value")));
  }
  @Test public void testAttributeExists() throws Exception {
    mockMvc.perform(get("/")).andExpect(model().attributeExists("integer","string","person")).andExpect(model().attribute("integer",notNullValue())).andExpect(model().attribute("INTEGER",nullValue()));
  }
  @Test public void testAttributeHamcrestMatchers() throws Exception {
    mockMvc.perform(get("/")).andExpect(model().attribute("integer",equalTo(3))).andExpect(model().attribute("string",allOf(startsWith("a string"),endsWith("value")))).andExpect(model().attribute("person",hasProperty("name",equalTo("a name"))));
  }
  @Test public void testHasErrors() throws Exception {
    mockMvc.perform(post("/persons")).andExpect(model().attributeHasErrors("person"));
  }
  @Test public void testHasNoErrors() throws Exception {
    mockMvc.perform(get("/")).andExpect(model().hasNoErrors());
  }
@Controller private static class SampleController {
    private final Object[] values;
    public SampleController(    Object... values){
      this.values=values;
    }
    @RequestMapping("/") public String handle(    Model model){
      for (      Object value : this.values) {
        model.addAttribute(value);
      }
      return "view";
    }
    @PostMapping("/persons") public String create(    @Valid Person person,    BindingResult result,    Model model){
      return "view";
    }
  }
@ControllerAdvice private static class ModelAttributeAdvice {
    @ModelAttribute("globalAttrName") public String getAttribute(){
      return "Global Attribute Value";
    }
  }
}
