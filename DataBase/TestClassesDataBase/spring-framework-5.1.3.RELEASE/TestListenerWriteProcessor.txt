private static final class TestListenerWriteProcessor extends AbstractListenerWriteProcessor<DataBuffer> {
  private final List<DataBuffer> discardedBuffers=new ArrayList<>();
  private boolean writePossible;
  private boolean failOnWrite;
  public List<DataBuffer> getDiscardedBuffers(){
    return this.discardedBuffers;
  }
  public void setWritePossible(  boolean writePossible){
    this.writePossible=writePossible;
  }
  public void setFailOnWrite(  boolean failOnWrite){
    this.failOnWrite=failOnWrite;
  }
  @Override protected boolean isDataEmpty(  DataBuffer dataBuffer){
    return false;
  }
  @Override protected boolean isWritePossible(){
    return this.writePossible;
  }
  @Override protected boolean write(  DataBuffer dataBuffer) throws IOException {
    if (this.failOnWrite) {
      throw new IOException("write failed");
    }
    return true;
  }
  @Override protected void writingFailed(  Throwable ex){
    cancel();
    onError(ex);
  }
  @Override protected void discardData(  DataBuffer dataBuffer){
    this.discardedBuffers.add(dataBuffer);
  }
}
