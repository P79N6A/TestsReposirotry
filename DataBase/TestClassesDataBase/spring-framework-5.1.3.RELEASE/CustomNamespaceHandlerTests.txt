/** 
 * Unit tests for custom XML namespace handler implementations.
 * @author Rob Harrop
 * @author Rick Evans
 * @author Chris Beams
 * @author Juergen Hoeller
 */
public class CustomNamespaceHandlerTests {
  private static final Class<?> CLASS=CustomNamespaceHandlerTests.class;
  private static final String CLASSNAME=CLASS.getSimpleName();
  private static final String FQ_PATH="org/springframework/beans/factory/xml/support";
  private static final String NS_PROPS=format("%s/%s.properties",FQ_PATH,CLASSNAME);
  private static final String NS_XML=format("%s/%s-context.xml",FQ_PATH,CLASSNAME);
  private static final String TEST_XSD=format("%s/%s.xsd",FQ_PATH,CLASSNAME);
  private GenericApplicationContext beanFactory;
  @Before public void setUp() throws Exception {
    NamespaceHandlerResolver resolver=new DefaultNamespaceHandlerResolver(CLASS.getClassLoader(),NS_PROPS);
    this.beanFactory=new GenericApplicationContext();
    XmlBeanDefinitionReader reader=new XmlBeanDefinitionReader(this.beanFactory);
    reader.setNamespaceHandlerResolver(resolver);
    reader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_XSD);
    reader.setEntityResolver(new DummySchemaResolver());
    reader.loadBeanDefinitions(getResource());
    this.beanFactory.refresh();
  }
  @Test public void testSimpleParser() throws Exception {
    TestBean bean=(TestBean)this.beanFactory.getBean("testBean");
    assertTestBean(bean);
  }
  @Test public void testSimpleDecorator() throws Exception {
    TestBean bean=(TestBean)this.beanFactory.getBean("customisedTestBean");
    assertTestBean(bean);
  }
  @Test public void testProxyingDecorator() throws Exception {
    ITestBean bean=(ITestBean)this.beanFactory.getBean("debuggingTestBean");
    assertTestBean(bean);
    assertTrue(AopUtils.isAopProxy(bean));
    Advisor[] advisors=((Advised)bean).getAdvisors();
    assertEquals("Incorrect number of advisors",1,advisors.length);
    assertEquals("Incorrect advice class",DebugInterceptor.class,advisors[0].getAdvice().getClass());
  }
  @Test public void testProxyingDecoratorNoInstance() throws Exception {
    String[] beanNames=this.beanFactory.getBeanNamesForType(ApplicationListener.class);
    assertTrue(Arrays.asList(beanNames).contains("debuggingTestBeanNoInstance"));
    assertEquals(ApplicationListener.class,this.beanFactory.getType("debuggingTestBeanNoInstance"));
    try {
      this.beanFactory.getBean("debuggingTestBeanNoInstance");
      fail("Should have thrown BeanCreationException");
    }
 catch (    BeanCreationException ex) {
      assertTrue(ex.getRootCause() instanceof BeanInstantiationException);
    }
  }
  @Test public void testChainedDecorators() throws Exception {
    ITestBean bean=(ITestBean)this.beanFactory.getBean("chainedTestBean");
    assertTestBean(bean);
    assertTrue(AopUtils.isAopProxy(bean));
    Advisor[] advisors=((Advised)bean).getAdvisors();
    assertEquals("Incorrect number of advisors",2,advisors.length);
    assertEquals("Incorrect advice class",DebugInterceptor.class,advisors[0].getAdvice().getClass());
    assertEquals("Incorrect advice class",NopInterceptor.class,advisors[1].getAdvice().getClass());
  }
  @Test public void testDecorationViaAttribute() throws Exception {
    BeanDefinition beanDefinition=this.beanFactory.getBeanDefinition("decorateWithAttribute");
    assertEquals("foo",beanDefinition.getAttribute("objectName"));
  }
  @Test public void testCustomElementNestedWithinUtilList() throws Exception {
    List<?> things=(List<?>)this.beanFactory.getBean("list.of.things");
    assertNotNull(things);
    assertEquals(2,things.size());
  }
  @Test public void testCustomElementNestedWithinUtilSet() throws Exception {
    Set<?> things=(Set<?>)this.beanFactory.getBean("set.of.things");
    assertNotNull(things);
    assertEquals(2,things.size());
  }
  @Test public void testCustomElementNestedWithinUtilMap() throws Exception {
    Map<?,?> things=(Map<?,?>)this.beanFactory.getBean("map.of.things");
    assertNotNull(things);
    assertEquals(2,things.size());
  }
  private void assertTestBean(  ITestBean bean){
    assertEquals("Invalid name","Rob Harrop",bean.getName());
    assertEquals("Invalid age",23,bean.getAge());
  }
  private Resource getResource(){
    return new ClassPathResource(NS_XML);
  }
private final class DummySchemaResolver extends PluggableSchemaResolver {
    public DummySchemaResolver(){
      super(CLASS.getClassLoader());
    }
    @Override public InputSource resolveEntity(    String publicId,    String systemId) throws IOException {
      InputSource source=super.resolveEntity(publicId,systemId);
      if (source == null) {
        Resource resource=new ClassPathResource(TEST_XSD);
        source=new InputSource(resource.getInputStream());
        source.setPublicId(publicId);
        source.setSystemId(systemId);
      }
      return source;
    }
  }
}
