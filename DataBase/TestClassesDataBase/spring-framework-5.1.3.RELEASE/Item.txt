public static class Item implements List<Item> {
  private String name;
  private List<Item> children=new ArrayList<>();
  public void setName(  String name){
    this.name=name;
  }
  public String getName(){
    return this.name;
  }
  @Override public int size(){
    return this.children.size();
  }
  @Override public boolean isEmpty(){
    return this.children.isEmpty();
  }
  @Override public boolean contains(  Object o){
    return this.children.contains(o);
  }
  @Override public Iterator<Item> iterator(){
    return this.children.iterator();
  }
  @Override public Object[] toArray(){
    return this.children.toArray();
  }
  @Override public <T>T[] toArray(  T[] a){
    return this.children.toArray(a);
  }
  @Override public boolean add(  Item e){
    return this.children.add(e);
  }
  @Override public boolean remove(  Object o){
    return this.children.remove(o);
  }
  @Override public boolean containsAll(  Collection<?> c){
    return this.children.containsAll(c);
  }
  @Override public boolean addAll(  Collection<? extends Item> c){
    return this.children.addAll(c);
  }
  @Override public boolean addAll(  int index,  Collection<? extends Item> c){
    return this.children.addAll(index,c);
  }
  @Override public boolean removeAll(  Collection<?> c){
    return this.children.removeAll(c);
  }
  @Override public boolean retainAll(  Collection<?> c){
    return this.children.retainAll(c);
  }
  @Override public void clear(){
    this.children.clear();
  }
  @Override public Item get(  int index){
    return this.children.get(index);
  }
  @Override public Item set(  int index,  Item element){
    return this.children.set(index,element);
  }
  @Override public void add(  int index,  Item element){
    this.children.add(index,element);
  }
  @Override public Item remove(  int index){
    return this.children.remove(index);
  }
  @Override public int indexOf(  Object o){
    return this.children.indexOf(o);
  }
  @Override public int lastIndexOf(  Object o){
    return this.children.lastIndexOf(o);
  }
  @Override public ListIterator<Item> listIterator(){
    return this.children.listIterator();
  }
  @Override public ListIterator<Item> listIterator(  int index){
    return this.children.listIterator(index);
  }
  @Override public List<Item> subList(  int fromIndex,  int toIndex){
    return this.children.subList(fromIndex,toIndex);
  }
}
