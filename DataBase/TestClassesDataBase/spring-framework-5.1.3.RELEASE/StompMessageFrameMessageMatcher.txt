private static class StompMessageFrameMessageMatcher extends StompFrameMessageMatcher {
  private final String subscriptionId;
  private final String destination;
  private final Object payload;
  public StompMessageFrameMessageMatcher(  String sessionId,  String subscriptionId,  String destination,  Object payload){
    super(StompCommand.MESSAGE,sessionId);
    this.subscriptionId=subscriptionId;
    this.destination=destination;
    this.payload=payload;
  }
  @Override protected boolean matchInternal(  StompHeaderAccessor headers,  Object payload){
    if (!this.subscriptionId.equals(headers.getSubscriptionId()) || !this.destination.equals(headers.getDestination())) {
      return false;
    }
    if (payload instanceof byte[] && this.payload instanceof byte[]) {
      return Arrays.equals((byte[])payload,(byte[])this.payload);
    }
 else {
      return this.payload.equals(payload);
    }
  }
  @Override public String toString(){
    return super.toString() + ", subscriptionId=\"" + this.subscriptionId+ "\", destination=\""+ this.destination+ "\", payload=\""+ getPayloadAsText()+ "\"";
  }
  protected String getPayloadAsText(){
    return (this.payload instanceof byte[]) ? new String((byte[])this.payload,StandardCharsets.UTF_8) : this.payload.toString();
  }
}
