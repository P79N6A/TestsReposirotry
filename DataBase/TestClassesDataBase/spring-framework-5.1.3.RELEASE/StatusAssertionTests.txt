/** 
 * Unit tests for  {@link StatusAssertions}.
 * @author Rossen Stoyanchev
 */
public class StatusAssertionTests {
  @Test public void isEqualTo(){
    StatusAssertions assertions=statusAssertions(HttpStatus.CONFLICT);
    assertions.isEqualTo(HttpStatus.CONFLICT);
    assertions.isEqualTo(409);
    try {
      assertions.isEqualTo(HttpStatus.REQUEST_TIMEOUT);
      fail("Wrong status expected");
    }
 catch (    AssertionError error) {
    }
    try {
      assertions.isEqualTo(408);
      fail("Wrong status value expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void reasonEquals(){
    StatusAssertions assertions=statusAssertions(HttpStatus.CONFLICT);
    assertions.reasonEquals("Conflict");
    try {
      assertions.reasonEquals("Request Timeout");
      fail("Wrong reason expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void statusSerius1xx(){
    StatusAssertions assertions=statusAssertions(HttpStatus.CONTINUE);
    assertions.is1xxInformational();
    try {
      assertions.is2xxSuccessful();
      fail("Wrong series expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void statusSerius2xx(){
    StatusAssertions assertions=statusAssertions(HttpStatus.OK);
    assertions.is2xxSuccessful();
    try {
      assertions.is5xxServerError();
      fail("Wrong series expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void statusSerius3xx(){
    StatusAssertions assertions=statusAssertions(HttpStatus.PERMANENT_REDIRECT);
    assertions.is3xxRedirection();
    try {
      assertions.is2xxSuccessful();
      fail("Wrong series expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void statusSerius4xx(){
    StatusAssertions assertions=statusAssertions(HttpStatus.BAD_REQUEST);
    assertions.is4xxClientError();
    try {
      assertions.is2xxSuccessful();
      fail("Wrong series expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void statusSerius5xx(){
    StatusAssertions assertions=statusAssertions(HttpStatus.INTERNAL_SERVER_ERROR);
    assertions.is5xxServerError();
    try {
      assertions.is2xxSuccessful();
      fail("Wrong series expected");
    }
 catch (    AssertionError error) {
    }
  }
  @Test public void matches(){
    StatusAssertions assertions=statusAssertions(HttpStatus.CONFLICT);
    assertions.value(equalTo(409));
    assertions.value(greaterThan(400));
    try {
      assertions.value(equalTo(200));
      fail("Wrong status expected");
    }
 catch (    AssertionError error) {
    }
  }
  private StatusAssertions statusAssertions(  HttpStatus status){
    MockClientHttpRequest request=new MockClientHttpRequest(HttpMethod.GET,URI.create("/"));
    MockClientHttpResponse response=new MockClientHttpResponse(status);
    MonoProcessor<byte[]> emptyContent=MonoProcessor.create();
    emptyContent.onComplete();
    ExchangeResult result=new ExchangeResult(request,response,emptyContent,emptyContent,Duration.ZERO,null);
    return new StatusAssertions(result,mock(WebTestClient.ResponseSpec.class));
  }
}
