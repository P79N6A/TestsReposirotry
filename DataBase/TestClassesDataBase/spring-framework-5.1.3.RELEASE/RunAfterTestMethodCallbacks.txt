/** 
 * {@code RunAfterTestMethodCallbacks} is a custom JUnit {@link Statement} which allowsthe <em>Spring TestContext Framework</em> to be plugged into the JUnit execution chain by calling  {@link TestContextManager#afterTestMethod afterTestMethod()} on the supplied{@link TestContextManager}. <p><strong>NOTE:</strong> This class requires JUnit 4.9 or higher.
 * @author Sam Brannen
 * @since 3.0
 * @see #evaluate()
 * @see RunBeforeTestMethodCallbacks
 */
public class RunAfterTestMethodCallbacks extends Statement {
  private final Statement next;
  private final Object testInstance;
  private final Method testMethod;
  private final TestContextManager testContextManager;
  /** 
 * Construct a new  {@code RunAfterTestMethodCallbacks} statement.
 * @param next the next {@code Statement} in the execution chain
 * @param testInstance the current test instance (never {@code null})
 * @param testMethod the test method which has just been executed on thetest instance
 * @param testContextManager the TestContextManager upon which to call{@code afterTestMethod()}
 */
  public RunAfterTestMethodCallbacks(  Statement next,  Object testInstance,  Method testMethod,  TestContextManager testContextManager){
    this.next=next;
    this.testInstance=testInstance;
    this.testMethod=testMethod;
    this.testContextManager=testContextManager;
  }
  /** 
 * Evaluate the next  {@link Statement} in the execution chain (typically an instance of{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any exceptions thrown, and then invoke {@link TestContextManager#afterTestMethod(Object,Method,Throwable)} supplying thefirst caught exception (if any). <p>If the invocation of  {@code afterTestMethod()} throws an exception, thatexception will also be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.
 */
  @Override public void evaluate() throws Throwable {
    Throwable testException=null;
    List<Throwable> errors=new ArrayList<>();
    try {
      this.next.evaluate();
    }
 catch (    Throwable ex) {
      testException=ex;
      errors.add(ex);
    }
    try {
      this.testContextManager.afterTestMethod(this.testInstance,this.testMethod,testException);
    }
 catch (    Throwable ex) {
      errors.add(ex);
    }
    MultipleFailureException.assertEmpty(errors);
  }
}
