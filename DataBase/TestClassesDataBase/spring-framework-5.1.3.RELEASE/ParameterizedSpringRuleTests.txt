/** 
 * Integration test which demonstrates how to use JUnit's  {@link Parameterized}runner in conjunction with  {@link SpringClassRule} and {@link SpringMethodRule}to provide dependency injection to a <em>parameterized test instance</em>.
 * @author Sam Brannen
 * @since 4.2
 * @see org.springframework.test.context.junit4.ParameterizedDependencyInjectionTests
 */
@RunWith(Parameterized.class) @ContextConfiguration("/org/springframework/test/context/junit4/ParameterizedDependencyInjectionTests-context.xml") public class ParameterizedSpringRuleTests {
  private static final AtomicInteger invocationCount=new AtomicInteger();
  @ClassRule public static final SpringClassRule springClassRule=new SpringClassRule();
  @Rule public final SpringMethodRule springMethodRule=new SpringMethodRule();
  @Autowired private ApplicationContext applicationContext;
  @Autowired private Pet pet;
  @Parameter(0) public String employeeBeanName;
  @Parameter(1) public String employeeName;
  @Parameters(name="bean [{0}], employee [{1}]") public static String[][] employeeData(){
    return new String[][]{{"employee1","John Smith"},{"employee2","Jane Smith"}};
  }
  @BeforeClass public static void BeforeClass(){
    invocationCount.set(0);
  }
  @Test public final void verifyPetAndEmployee(){
    invocationCount.incrementAndGet();
    assertNotNull("The pet field should have been autowired.",this.pet);
    Employee employee=this.applicationContext.getBean(this.employeeBeanName,Employee.class);
    assertEquals("Name of the employee configured as bean [" + this.employeeBeanName + "].",this.employeeName,employee.getName());
  }
  @AfterClass public static void verifyNumParameterizedRuns(){
    assertEquals("Number of times the parameterized test method was executed.",employeeData().length,invocationCount.get());
  }
}
