/** 
 * Integration tests for  {@link MockMvcHtmlUnitDriverBuilder}.
 * @author Rob Winch
 * @author Sam Brannen
 * @since 4.2
 */
@RunWith(SpringRunner.class) @ContextConfiguration @WebAppConfiguration public class MockMvcHtmlUnitDriverBuilderTests {
  private static final String EXPECTED_BODY="MockMvcHtmlUnitDriverBuilderTests mvc";
  @Autowired private WebApplicationContext wac;
  private MockMvc mockMvc;
  private HtmlUnitDriver driver;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).build();
  }
  @Test(expected=IllegalArgumentException.class) public void webAppContextSetupNull(){
    MockMvcHtmlUnitDriverBuilder.webAppContextSetup(null);
  }
  @Test(expected=IllegalArgumentException.class) public void mockMvcSetupNull(){
    MockMvcHtmlUnitDriverBuilder.mockMvcSetup(null);
  }
  @Test public void mockMvcSetupWithCustomDriverDelegate() throws Exception {
    WebConnectionHtmlUnitDriver otherDriver=new WebConnectionHtmlUnitDriver();
    this.driver=MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherDriver).build();
    assertMockMvcUsed("http://localhost/test");
    Assume.group(TestGroup.PERFORMANCE,() -> assertMockMvcNotUsed("http://example.com/"));
  }
  @Test public void mockMvcSetupWithDefaultDriverDelegate() throws Exception {
    this.driver=MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).build();
    assertMockMvcUsed("http://localhost/test");
    Assume.group(TestGroup.PERFORMANCE,() -> assertMockMvcNotUsed("http://example.com/"));
  }
  @Test public void javaScriptEnabledByDefault(){
    this.driver=MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).build();
    assertTrue(this.driver.isJavascriptEnabled());
  }
  @Test public void javaScriptDisabled(){
    this.driver=MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).javascriptEnabled(false).build();
    assertFalse(this.driver.isJavascriptEnabled());
  }
  @Test public void cookieManagerShared() throws Exception {
    WebConnectionHtmlUnitDriver otherDriver=new WebConnectionHtmlUnitDriver();
    this.mockMvc=MockMvcBuilders.standaloneSetup(new CookieController()).build();
    this.driver=MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherDriver).build();
    assertThat(get("http://localhost/"),equalTo(""));
    Cookie cookie=new Cookie("localhost","cookie","cookieManagerShared");
    otherDriver.getWebClient().getCookieManager().addCookie(cookie);
    assertThat(get("http://localhost/"),equalTo("cookieManagerShared"));
  }
  private void assertMockMvcUsed(  String url) throws Exception {
    assertThat(get(url),containsString(EXPECTED_BODY));
  }
  private void assertMockMvcNotUsed(  String url) throws Exception {
    assertThat(get(url),not(containsString(EXPECTED_BODY)));
  }
  private String get(  String url) throws IOException {
    this.driver.get(url);
    return this.driver.getPageSource();
  }
@Configuration @EnableWebMvc static class Config {
@RestController static class ContextPathController {
      @RequestMapping public String contextPath(      HttpServletRequest request){
        return EXPECTED_BODY;
      }
    }
  }
@RestController static class CookieController {
    @RequestMapping(path="/",produces="text/plain") String cookie(    @CookieValue("cookie") String cookie){
      return cookie;
    }
  }
}
