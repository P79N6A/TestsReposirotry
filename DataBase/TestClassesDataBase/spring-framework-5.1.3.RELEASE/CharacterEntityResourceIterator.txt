private static class CharacterEntityResourceIterator {
  private final StreamTokenizer tokenizer;
  private String currentEntityName=null;
  private int referredCharacter=-1;
  public CharacterEntityResourceIterator(){
    try {
      InputStream inputStream=getClass().getResourceAsStream(DTD_FILE);
      if (inputStream == null) {
        throw new IOException("Cannot find definition resource [" + DTD_FILE + "]");
      }
      tokenizer=new StreamTokenizer(new BufferedReader(new InputStreamReader(inputStream,"UTF-8")));
    }
 catch (    IOException ex) {
      throw new IllegalStateException("Failed to open definition resource [" + DTD_FILE + "]");
    }
  }
  public boolean hasNext(){
    return (currentEntityName != null || readNextEntity());
  }
  public String nextEntry(){
    if (hasNext()) {
      String entityName=currentEntityName;
      currentEntityName=null;
      return entityName;
    }
    return null;
  }
  public int getReferredCharacter(){
    return referredCharacter;
  }
  private boolean readNextEntity(){
    try {
      while (navigateToNextEntity()) {
        String entityName=nextWordToken();
        if ("CDATA".equals(nextWordToken())) {
          int referredCharacter=nextReferredCharacterId();
          if (entityName != null && referredCharacter != -1) {
            this.currentEntityName=entityName;
            this.referredCharacter=referredCharacter;
            return true;
          }
        }
      }
      return false;
    }
 catch (    IOException ex) {
      throw new IllegalStateException("Could not parse definition resource: " + ex.getMessage());
    }
  }
  private boolean navigateToNextEntity() throws IOException {
    while (tokenizer.nextToken() != StreamTokenizer.TT_WORD || !"ENTITY".equals(tokenizer.sval)) {
      if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
        return false;
      }
    }
    return true;
  }
  private int nextReferredCharacterId() throws IOException {
    String reference=nextWordToken();
    if (reference != null && reference.startsWith("&#") && reference.endsWith(";")) {
      return Integer.parseInt(reference.substring(2,reference.length() - 1));
    }
    return -1;
  }
  private String nextWordToken() throws IOException {
    tokenizer.nextToken();
    return tokenizer.sval;
  }
}
