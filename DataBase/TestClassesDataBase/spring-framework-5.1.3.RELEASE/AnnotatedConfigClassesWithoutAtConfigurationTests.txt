/** 
 * This set of tests refutes the claims made in <a href="https://jira.spring.io/browse/SPR-9051" target="_blank">SPR-9051</a>. <p><b>The Claims</b>: <blockquote> When a  {@code @ContextConfiguration} test class references a config classmissing an  {@code @Configuration} annotation, {@code @Bean} dependencies arewired successfully but the bean lifecycle is not applied (no init methods are invoked, for example). Adding the missing  {@code @Configuration} annotationsolves the problem, however the problem and solution isn't obvious since wiring/injection appeared to work. </blockquote>
 * @author Sam Brannen
 * @author Phillip Webb
 * @since 3.2
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes=AnnotatedConfigClassesWithoutAtConfigurationTests.AnnotatedFactoryBeans.class) public class AnnotatedConfigClassesWithoutAtConfigurationTests {
  /** 
 * This is intentionally <b>not</b> annotated with  {@code @Configuration}. Consequently, this class contains what we call <i>annotated factory bean methods</i> instead of standard bean definition methods.
 */
static class AnnotatedFactoryBeans {
    static final AtomicInteger enigmaCallCount=new AtomicInteger();
    @Bean public String enigma(){
      return "enigma #" + enigmaCallCount.incrementAndGet();
    }
    @Bean public LifecycleBean lifecycleBean(){
      LifecycleBean bean=new LifecycleBean(enigma());
      assertFalse(bean.isInitialized());
      return bean;
    }
  }
  @Autowired private String enigma;
  @Autowired private LifecycleBean lifecycleBean;
  @Test public void testSPR_9051() throws Exception {
    assertNotNull(enigma);
    assertNotNull(lifecycleBean);
    assertTrue(lifecycleBean.isInitialized());
    Set<String> names=new HashSet<>();
    names.add(enigma.toString());
    names.add(lifecycleBean.getName());
    assertEquals(names,new HashSet<>(Arrays.asList("enigma #1","enigma #2")));
  }
}
