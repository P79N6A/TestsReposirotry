private static class TestLifecycleBean implements Lifecycle {
  private final CopyOnWriteArrayList<Lifecycle> startedBeans;
  private final CopyOnWriteArrayList<Lifecycle> stoppedBeans;
  private volatile boolean running;
  static TestLifecycleBean forStartupTests(  CopyOnWriteArrayList<Lifecycle> startedBeans){
    return new TestLifecycleBean(startedBeans,null);
  }
  static TestLifecycleBean forShutdownTests(  CopyOnWriteArrayList<Lifecycle> stoppedBeans){
    return new TestLifecycleBean(null,stoppedBeans);
  }
  private TestLifecycleBean(  CopyOnWriteArrayList<Lifecycle> startedBeans,  CopyOnWriteArrayList<Lifecycle> stoppedBeans){
    this.startedBeans=startedBeans;
    this.stoppedBeans=stoppedBeans;
  }
  @Override public boolean isRunning(){
    return this.running;
  }
  @Override public void start(){
    if (this.startedBeans != null) {
      this.startedBeans.add(this);
    }
    this.running=true;
  }
  @Override public void stop(){
    if (this.stoppedBeans != null) {
      this.stoppedBeans.add(this);
    }
    this.running=false;
  }
}
