class ProceedTestingAspect implements Ordered {
  private String lastBeforeStringValue;
  private String lastAroundStringValue;
  private float lastBeforeFloatValue;
  private int order;
  public void setOrder(  int order){
    this.order=order;
  }
  @Override public int getOrder(){
    return this.order;
  }
  public Object capitalize(  ProceedingJoinPoint pjp,  String value) throws Throwable {
    return pjp.proceed(new Object[]{value.toUpperCase()});
  }
  public Object doubleOrQuits(  ProceedingJoinPoint pjp) throws Throwable {
    int value=((Integer)pjp.getArgs()[0]).intValue();
    pjp.getArgs()[0]=new Integer(value * 2);
    return pjp.proceed();
  }
  public Object addOne(  ProceedingJoinPoint pjp,  Float value) throws Throwable {
    float fv=value.floatValue();
    return pjp.proceed(new Object[]{new Float(fv + 1.0F)});
  }
  public void captureStringArgument(  JoinPoint tjp,  String arg){
    if (!tjp.getArgs()[0].equals(arg)) {
      throw new IllegalStateException("argument is '" + arg + "', "+ "but args array has '"+ tjp.getArgs()[0]+ "'");
    }
    this.lastBeforeStringValue=arg;
  }
  public Object captureStringArgumentInAround(  ProceedingJoinPoint pjp,  String arg) throws Throwable {
    if (!pjp.getArgs()[0].equals(arg)) {
      throw new IllegalStateException("argument is '" + arg + "', "+ "but args array has '"+ pjp.getArgs()[0]+ "'");
    }
    this.lastAroundStringValue=arg;
    return pjp.proceed();
  }
  public void captureFloatArgument(  JoinPoint tjp,  float arg){
    float tjpArg=((Float)tjp.getArgs()[0]).floatValue();
    if (Math.abs(tjpArg - arg) > 0.000001) {
      throw new IllegalStateException("argument is '" + arg + "', "+ "but args array has '"+ tjpArg+ "'");
    }
    this.lastBeforeFloatValue=arg;
  }
  public String getLastBeforeStringValue(){
    return this.lastBeforeStringValue;
  }
  public String getLastAroundStringValue(){
    return this.lastAroundStringValue;
  }
  public float getLastBeforeFloatValue(){
    return this.lastBeforeFloatValue;
  }
}
