public static class MyTypeWithMethods<T> {
  public MyInterfaceType<Integer> integer(){
    return null;
  }
  public MySimpleInterfaceType string(){
    return null;
  }
  public Object object(){
    return null;
  }
  public MyInterfaceType raw(){
    return null;
  }
  public String notParameterized(){
    return null;
  }
  public String notParameterizedWithArguments(  Integer x,  Boolean b){
    return null;
  }
  /** 
 * Simulates a factory method that wraps the supplied object in a proxy of the same type.
 */
  public static <T>T createProxy(  T object){
    return null;
  }
  /** 
 * Similar to  {@link #createProxy(Object)} but adds an additional argument beforethe argument of type  {@code T}. Note that they may potentially be of the same time when invoked!
 */
  public static <T>T createNamedProxy(  String name,  T object){
    return null;
  }
  /** 
 * Simulates factory methods found in libraries such as Mockito and EasyMock.
 */
  public static <MOCK>MOCK createMock(  Class<MOCK> toMock){
    return null;
  }
  /** 
 * Similar to  {@link #createMock(Class)} but adds an additional method argumentbefore the parameterized argument.
 */
  public static <T>T createNamedMock(  String name,  Class<T> toMock){
    return null;
  }
  /** 
 * Similar to  {@link #createNamedMock(String,Class)} but adds an additionalparameterized type.
 */
  public static <V extends Object,T>T createVMock(  V name,  Class<T> toMock){
    return null;
  }
  /** 
 * Extract some value of the type supported by the interface (i.e., by a concrete, non-generic implementation of the interface).
 */
  public static <T>T extractValueFrom(  MyInterfaceType<T> myInterfaceType){
    return null;
  }
  /** 
 * Extract some magic value from the supplied map.
 */
  public static <K,V>V extractMagicValue(  Map<K,V> map){
    return null;
  }
  public void readIntegerInputMessage(  MyInterfaceType<Integer> message){
  }
  public void readIntegerArrayInputMessage(  MyInterfaceType<Integer>[] message){
  }
  public void readGenericArrayInputMessage(  T[] message){
  }
}
