class TestPropertyAccessor implements PropertyAccessor {
  private String mapName;
  public TestPropertyAccessor(  String mapName){
    this.mapName=mapName;
  }
  @SuppressWarnings("unchecked") public Map<String,String> getMap(  Object target){
    try {
      Field f=target.getClass().getDeclaredField(mapName);
      return (Map<String,String>)f.get(target);
    }
 catch (    Exception ex) {
    }
    return null;
  }
  @Override public boolean canRead(  EvaluationContext context,  Object target,  String name) throws AccessException {
    return getMap(target).containsKey(name);
  }
  @Override public boolean canWrite(  EvaluationContext context,  Object target,  String name) throws AccessException {
    return getMap(target).containsKey(name);
  }
  @Override public Class<?>[] getSpecificTargetClasses(){
    return new Class<?>[]{ContextObject.class};
  }
  @Override public TypedValue read(  EvaluationContext context,  Object target,  String name) throws AccessException {
    return new TypedValue(getMap(target).get(name));
  }
  @Override public void write(  EvaluationContext context,  Object target,  String name,  Object newValue) throws AccessException {
    getMap(target).put(name,(String)newValue);
  }
}
