/** 
 * @author Rod Johnson
 * @author Juergen Hoeller
 */
@SuppressWarnings("serial") public class NestedExceptionTests {
  @Test public void nestedRuntimeExceptionWithNoRootCause(){
    String mesg="mesg of mine";
    NestedRuntimeException nex=new NestedRuntimeException(mesg){
    }
;
    assertNull(nex.getCause());
    assertEquals(nex.getMessage(),mesg);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(baos);
    nex.printStackTrace(pw);
    pw.flush();
    String stackTrace=new String(baos.toByteArray());
    assertTrue(stackTrace.contains(mesg));
  }
  @Test public void nestedRuntimeExceptionWithRootCause(){
    String myMessage="mesg for this exception";
    String rootCauseMsg="this is the obscure message of the root cause";
    Exception rootCause=new Exception(rootCauseMsg);
    NestedRuntimeException nex=new NestedRuntimeException(myMessage,rootCause){
    }
;
    assertEquals(nex.getCause(),rootCause);
    assertTrue(nex.getMessage().contains(myMessage));
    assertTrue(nex.getMessage().endsWith(rootCauseMsg));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(baos);
    nex.printStackTrace(pw);
    pw.flush();
    String stackTrace=new String(baos.toByteArray());
    assertTrue(stackTrace.contains(rootCause.getClass().getName()));
    assertTrue(stackTrace.contains(rootCauseMsg));
  }
  @Test public void nestedCheckedExceptionWithNoRootCause(){
    String mesg="mesg of mine";
    NestedCheckedException nex=new NestedCheckedException(mesg){
    }
;
    assertNull(nex.getCause());
    assertEquals(nex.getMessage(),mesg);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(baos);
    nex.printStackTrace(pw);
    pw.flush();
    String stackTrace=new String(baos.toByteArray());
    assertTrue(stackTrace.contains(mesg));
  }
  @Test public void nestedCheckedExceptionWithRootCause(){
    String myMessage="mesg for this exception";
    String rootCauseMsg="this is the obscure message of the root cause";
    Exception rootCause=new Exception(rootCauseMsg);
    NestedCheckedException nex=new NestedCheckedException(myMessage,rootCause){
    }
;
    assertEquals(nex.getCause(),rootCause);
    assertTrue(nex.getMessage().contains(myMessage));
    assertTrue(nex.getMessage().endsWith(rootCauseMsg));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(baos);
    nex.printStackTrace(pw);
    pw.flush();
    String stackTrace=new String(baos.toByteArray());
    assertTrue(stackTrace.contains(rootCause.getClass().getName()));
    assertTrue(stackTrace.contains(rootCauseMsg));
  }
}
