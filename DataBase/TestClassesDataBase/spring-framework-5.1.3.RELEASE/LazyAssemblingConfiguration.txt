@Configuration @EnableMBeanExport(server="server",registration=RegistrationPolicy.REPLACE_EXISTING) static class LazyAssemblingConfiguration {
  @Bean public PropertyPlaceholderConfigurer ppc(){
    return new PropertyPlaceholderConfigurer();
  }
  @Bean public MBeanServerFactoryBean server() throws Exception {
    return new MBeanServerFactoryBean();
  }
  @Bean("bean:name=testBean4") @Lazy public AnnotationTestBean testBean4(){
    AnnotationTestBean bean=new AnnotationTestBean();
    bean.setName("TEST");
    bean.setAge(100);
    return bean;
  }
  @Bean("bean:name=testBean5") public AnnotationTestBeanFactory testBean5() throws Exception {
    return new AnnotationTestBeanFactory();
  }
  @Bean(name="spring:mbean=true") @Lazy public TestDynamicMBean dynamic(){
    return new TestDynamicMBean();
  }
  @Bean(name="spring:mbean=another") @Lazy public MBeanExporterTests.Person person(){
    MBeanExporterTests.Person person=new MBeanExporterTests.Person();
    person.setName("Juergen Hoeller");
    return person;
  }
  @Bean @Lazy public Object notLoadable() throws Exception {
    return Class.forName("does.not.exist").newInstance();
  }
}
