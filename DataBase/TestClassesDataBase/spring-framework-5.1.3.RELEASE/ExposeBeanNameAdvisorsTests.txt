/** 
 * @author Rod Johnson
 * @author Chris Beams
 */
public class ExposeBeanNameAdvisorsTests {
private class RequiresBeanNameBoundTestBean extends TestBean {
    private final String beanName;
    public RequiresBeanNameBoundTestBean(    String beanName){
      this.beanName=beanName;
    }
    @Override public int getAge(){
      assertEquals(beanName,ExposeBeanNameAdvisors.getBeanName());
      return super.getAge();
    }
  }
  @Test public void testNoIntroduction(){
    String beanName="foo";
    TestBean target=new RequiresBeanNameBoundTestBean(beanName);
    ProxyFactory pf=new ProxyFactory(target);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvisor(ExposeBeanNameAdvisors.createAdvisorWithoutIntroduction(beanName));
    ITestBean proxy=(ITestBean)pf.getProxy();
    assertFalse("No introduction",proxy instanceof NamedBean);
    proxy.getAge();
  }
  @Test public void testWithIntroduction(){
    String beanName="foo";
    TestBean target=new RequiresBeanNameBoundTestBean(beanName);
    ProxyFactory pf=new ProxyFactory(target);
    pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
    pf.addAdvisor(ExposeBeanNameAdvisors.createAdvisorIntroducingNamedBean(beanName));
    ITestBean proxy=(ITestBean)pf.getProxy();
    assertTrue("Introduction was made",proxy instanceof NamedBean);
    proxy.getAge();
    NamedBean nb=(NamedBean)proxy;
    assertEquals("Name returned correctly",beanName,nb.getBeanName());
  }
}
