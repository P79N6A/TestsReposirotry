/** 
 * Unit tests for  {@link HandlerResultHandlerSupport}.
 * @author Rossen Stoyanchev
 */
public class HandlerResultHandlerTests {
  private final TestResultHandler resultHandler=new TestResultHandler();
  @Test public void usesContentTypeResolver() throws Exception {
    TestResultHandler resultHandler=new TestResultHandler(new FixedContentTypeResolver(IMAGE_GIF));
    List<MediaType> mediaTypes=Arrays.asList(IMAGE_JPEG,IMAGE_GIF,IMAGE_PNG);
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path"));
    MediaType actual=resultHandler.selectMediaType(exchange,() -> mediaTypes);
    assertEquals(IMAGE_GIF,actual);
  }
  @Test public void producibleMediaTypesRequestAttribute() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path"));
    exchange.getAttributes().put(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE,Collections.singleton(IMAGE_GIF));
    List<MediaType> mediaTypes=Arrays.asList(IMAGE_JPEG,IMAGE_GIF,IMAGE_PNG);
    MediaType actual=resultHandler.selectMediaType(exchange,() -> mediaTypes);
    assertEquals(IMAGE_GIF,actual);
  }
  @Test public void sortsByQuality() throws Exception {
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path").header("Accept","text/plain; q=0.5, application/json"));
    List<MediaType> mediaTypes=Arrays.asList(TEXT_PLAIN,APPLICATION_JSON_UTF8);
    MediaType actual=this.resultHandler.selectMediaType(exchange,() -> mediaTypes);
    assertEquals(APPLICATION_JSON_UTF8,actual);
  }
  @Test public void charsetFromAcceptHeader() throws Exception {
    MediaType text8859=MediaType.parseMediaType("text/plain;charset=ISO-8859-1");
    MediaType textUtf8=MediaType.parseMediaType("text/plain;charset=UTF-8");
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path").accept(text8859));
    MediaType actual=this.resultHandler.selectMediaType(exchange,() -> Collections.singletonList(textUtf8));
    assertEquals(text8859,actual);
  }
  @Test public void noConcreteMediaType() throws Exception {
    List<MediaType> producible=Collections.singletonList(ALL);
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path"));
    MediaType actual=this.resultHandler.selectMediaType(exchange,() -> producible);
    assertEquals(APPLICATION_OCTET_STREAM,actual);
  }
@SuppressWarnings("WeakerAccess") private static class TestResultHandler extends HandlerResultHandlerSupport {
    protected TestResultHandler(){
      this(new HeaderContentTypeResolver());
    }
    public TestResultHandler(    RequestedContentTypeResolver contentTypeResolver){
      super(contentTypeResolver,ReactiveAdapterRegistry.getSharedInstance());
    }
  }
}
