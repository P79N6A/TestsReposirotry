/** 
 * Simple JUnit 4 based integration test which demonstrates how to use JUnit's {@link Parameterized} Runner in conjunction with{@link ContextConfiguration @ContextConfiguration}, the {@link DependencyInjectionTestExecutionListener}, and a {@link TestContextManager} to provide dependency injection to a<em>parameterized test instance</em>.
 * @author Sam Brannen
 * @since 2.5
 * @see org.springframework.test.context.junit4.rules.ParameterizedSpringRuleTests
 */
@RunWith(Parameterized.class) @ContextConfiguration @TestExecutionListeners({DependencyInjectionTestExecutionListener.class}) public class ParameterizedDependencyInjectionTests {
  private static final AtomicInteger invocationCount=new AtomicInteger();
  private static final TestContextManager testContextManager=new TestContextManager(ParameterizedDependencyInjectionTests.class);
  @Autowired private ApplicationContext applicationContext;
  @Autowired private Pet pet;
  @Parameter(0) public String employeeBeanName;
  @Parameter(1) public String employeeName;
  @Parameters(name="bean [{0}], employee [{1}]") public static String[][] employeeData(){
    return new String[][]{{"employee1","John Smith"},{"employee2","Jane Smith"}};
  }
  @BeforeClass public static void BeforeClass(){
    invocationCount.set(0);
  }
  @Before public void injectDependencies() throws Exception {
    testContextManager.prepareTestInstance(this);
  }
  @Test public final void verifyPetAndEmployee(){
    invocationCount.incrementAndGet();
    assertNotNull("The pet field should have been autowired.",this.pet);
    Employee employee=this.applicationContext.getBean(this.employeeBeanName,Employee.class);
    assertEquals("Name of the employee configured as bean [" + this.employeeBeanName + "].",this.employeeName,employee.getName());
  }
  @AfterClass public static void verifyNumParameterizedRuns(){
    assertEquals("Number of times the parameterized test method was executed.",employeeData().length,invocationCount.get());
  }
}
