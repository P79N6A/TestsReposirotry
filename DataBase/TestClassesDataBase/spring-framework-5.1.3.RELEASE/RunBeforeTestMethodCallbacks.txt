/** 
 * {@code RunBeforeTestMethodCallbacks} is a custom JUnit {@link Statement} which allowsthe <em>Spring TestContext Framework</em> to be plugged into the JUnit execution chain by calling  {@link TestContextManager#beforeTestMethod(Object,Method) beforeTestMethod()} on the supplied {@link TestContextManager}.
 * @author Sam Brannen
 * @since 3.0
 * @see #evaluate()
 * @see RunAfterTestMethodCallbacks
 */
public class RunBeforeTestMethodCallbacks extends Statement {
  private final Statement next;
  private final Object testInstance;
  private final Method testMethod;
  private final TestContextManager testContextManager;
  /** 
 * Construct a new  {@code RunBeforeTestMethodCallbacks} statement.
 * @param next the next {@code Statement} in the execution chain
 * @param testInstance the current test instance (never {@code null})
 * @param testMethod the test method which is about to be executed on thetest instance
 * @param testContextManager the TestContextManager upon which to call{@code beforeTestMethod()}
 */
  public RunBeforeTestMethodCallbacks(  Statement next,  Object testInstance,  Method testMethod,  TestContextManager testContextManager){
    this.next=next;
    this.testInstance=testInstance;
    this.testMethod=testMethod;
    this.testContextManager=testContextManager;
  }
  /** 
 * Invoke  {@link TestContextManager#beforeTestMethod(Object,Method)}and then evaluate the next  {@link Statement} in the execution chain(typically an instance of {@link org.junit.internal.runners.statements.RunBefores RunBefores}).
 */
  @Override public void evaluate() throws Throwable {
    this.testContextManager.beforeTestMethod(this.testInstance,this.testMethod);
    this.next.evaluate();
  }
}
