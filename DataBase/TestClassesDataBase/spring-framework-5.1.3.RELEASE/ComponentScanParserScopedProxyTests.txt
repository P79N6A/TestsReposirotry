/** 
 * @author Mark Fisher
 * @author Juergen Hoeller
 * @author Sam Brannen
 */
public class ComponentScanParserScopedProxyTests {
  @Rule public final ExpectedException exception=ExpectedException.none();
  @Test public void testDefaultScopedProxy(){
    ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("org/springframework/context/annotation/scopedProxyDefaultTests.xml");
    context.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ScopedProxyTestBean bean=(ScopedProxyTestBean)context.getBean("scopedProxyTestBean");
    assertFalse(AopUtils.isAopProxy(bean));
    context.close();
  }
  @Test public void testNoScopedProxy(){
    ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("org/springframework/context/annotation/scopedProxyNoTests.xml");
    context.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ScopedProxyTestBean bean=(ScopedProxyTestBean)context.getBean("scopedProxyTestBean");
    assertFalse(AopUtils.isAopProxy(bean));
    context.close();
  }
  @Test public void testInterfacesScopedProxy() throws Exception {
    ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("org/springframework/context/annotation/scopedProxyInterfacesTests.xml");
    context.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    FooService bean=(FooService)context.getBean("scopedProxyTestBean");
    assertTrue(AopUtils.isJdkDynamicProxy(bean));
    assertEquals("bar",bean.foo(1));
    FooService deserialized=(FooService)SerializationTestUtils.serializeAndDeserialize(bean);
    assertNotNull(deserialized);
    assertEquals("bar",deserialized.foo(1));
    context.close();
  }
  @Test public void testTargetClassScopedProxy() throws Exception {
    ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("org/springframework/context/annotation/scopedProxyTargetClassTests.xml");
    context.getBeanFactory().registerScope("myScope",new SimpleMapScope());
    ScopedProxyTestBean bean=(ScopedProxyTestBean)context.getBean("scopedProxyTestBean");
    assertTrue(AopUtils.isCglibProxy(bean));
    assertEquals("bar",bean.foo(1));
    ScopedProxyTestBean deserialized=(ScopedProxyTestBean)SerializationTestUtils.serializeAndDeserialize(bean);
    assertNotNull(deserialized);
    assertEquals("bar",deserialized.foo(1));
    context.close();
  }
  @Test @SuppressWarnings("resource") public void testInvalidConfigScopedProxy() throws Exception {
    exception.expect(BeanDefinitionParsingException.class);
    exception.expectMessage(containsString("Cannot define both 'scope-resolver' and 'scoped-proxy' on <component-scan> tag"));
    exception.expectMessage(containsString("Offending resource: class path resource [org/springframework/context/annotation/scopedProxyInvalidConfigTests.xml]"));
    new ClassPathXmlApplicationContext("org/springframework/context/annotation/scopedProxyInvalidConfigTests.xml");
  }
}
