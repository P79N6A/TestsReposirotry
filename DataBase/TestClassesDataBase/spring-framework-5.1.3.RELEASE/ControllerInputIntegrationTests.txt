/** 
 * {@code @RequestMapping} integration focusing on controller method parameters.Also see: <ul> <li> {@link RequestMappingDataBindingIntegrationTests}<li> {@link RequestMappingMessageConversionIntegrationTests}</ul>
 * @author Rossen Stoyanchev
 */
public class ControllerInputIntegrationTests extends AbstractRequestMappingIntegrationTests {
  @Override protected ApplicationContext initApplicationContext(){
    AnnotationConfigApplicationContext wac=new AnnotationConfigApplicationContext();
    wac.register(WebConfig.class,TestRestController.class);
    wac.refresh();
    return wac;
  }
  @Test public void handleWithParam() throws Exception {
    String expected="Hello George!";
    assertEquals(expected,performGet("/param?name=George",new HttpHeaders(),String.class).getBody());
  }
  @Test public void handleWithEncodedParam() throws Exception {
    String expected="Hello  + \u00e0!";
    assertEquals(expected,performGet("/param?name=%20%2B+%C3%A0",new HttpHeaders(),String.class).getBody());
  }
  @Test public void matrixVariable() throws Exception {
    String expected="p=11, q2=22, q4=44";
    String url="/first;p=11/second;q=22/third-fourth;q=44";
    assertEquals(expected,performGet(url,new HttpHeaders(),String.class).getBody());
  }
@Configuration @EnableWebFlux static class WebConfig {
  }
@RestController @SuppressWarnings("unused") private static class TestRestController {
    @GetMapping("/param") public Publisher<String> param(    @RequestParam String name){
      return Flux.just("Hello ",name,"!");
    }
    @GetMapping("/{one}/{two}/{three}-{four}") public String matrixVar(    @MatrixVariable int p,    @MatrixVariable(name="q",pathVar="two") int q2,    @MatrixVariable(name="q",pathVar="four") int q4){
      return "p=" + p + ", q2="+ q2+ ", q4="+ q4;
    }
  }
}
