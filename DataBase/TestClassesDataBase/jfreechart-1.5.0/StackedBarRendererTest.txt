/** 
 * Tests for the  {@link StackedBarRenderer} class.
 */
public class StackedBarRendererTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    StackedBarRenderer r1=new StackedBarRenderer();
    StackedBarRenderer r2=new StackedBarRenderer();
    assertTrue(r1.equals(r2));
    assertTrue(r2.equals(r1));
    r1.setRenderAsPercentages(true);
    assertFalse(r1.equals(r2));
    r2.setRenderAsPercentages(true);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    StackedBarRenderer r1=new StackedBarRenderer();
    StackedBarRenderer r2=new StackedBarRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StackedBarRenderer r1=new StackedBarRenderer();
    StackedBarRenderer r2=(StackedBarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Check that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    StackedBarRenderer r1=new StackedBarRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StackedBarRenderer r1=new StackedBarRenderer();
    StackedBarRenderer r2=(StackedBarRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Some checks for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    StackedBarRenderer r=new StackedBarRenderer();
    assertNull(r.findRangeBounds(null));
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    assertNull(r.findRangeBounds(dataset));
    dataset.addValue(1.0,"R1","C1");
    assertEquals(new Range(0.0,1.0),r.findRangeBounds(dataset));
    dataset.addValue(-2.0,"R1","C2");
    assertEquals(new Range(-2.0,1.0),r.findRangeBounds(dataset));
    dataset.addValue(null,"R1","C3");
    assertEquals(new Range(-2.0,1.0),r.findRangeBounds(dataset));
    dataset.addValue(2.0,"R2","C1");
    assertEquals(new Range(-2.0,3.0),r.findRangeBounds(dataset));
    dataset.addValue(null,"R2","C2");
    assertEquals(new Range(-2.0,3.0),r.findRangeBounds(dataset));
  }
}
