/** 
 * Tests for the  {@link DefaultKeyedValue} class.
 */
public class DefaultKeyedValueTest {
  /** 
 * Simple checks for the constructor.
 */
  @Test public void testConstructor(){
    DefaultKeyedValue v=new DefaultKeyedValue("A",new Integer(1));
    assertEquals("A",v.getKey());
    assertEquals(new Integer(1),v.getValue());
    boolean pass=false;
    try {
      new DefaultKeyedValue(null,new Integer(1));
    }
 catch (    IllegalArgumentException e) {
      pass=true;
    }
    assertTrue(pass);
    v=new DefaultKeyedValue("A",null);
    assertNull(v.getValue());
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    DefaultKeyedValue v1=new DefaultKeyedValue("Test",new Double(45.5));
    DefaultKeyedValue v2=new DefaultKeyedValue("Test",new Double(45.5));
    assertTrue(v1.equals(v2));
    assertTrue(v2.equals(v1));
    v1=new DefaultKeyedValue("Test 1",new Double(45.5));
    v2=new DefaultKeyedValue("Test 2",new Double(45.5));
    assertFalse(v1.equals(v2));
    v1=new DefaultKeyedValue("Test",new Double(45.5));
    v2=new DefaultKeyedValue("Test",new Double(45.6));
    assertFalse(v1.equals(v2));
  }
  /** 
 * Some checks for the clone() method.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    DefaultKeyedValue v1=new DefaultKeyedValue("Test",new Double(45.5));
    DefaultKeyedValue v2=(DefaultKeyedValue)v1.clone();
    assertTrue(v1 != v2);
    assertTrue(v1.getClass() == v2.getClass());
    assertTrue(v1.equals(v2));
    v2.setValue(new Double(12.3));
    assertFalse(v1.equals(v2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DefaultKeyedValue v1=new DefaultKeyedValue("Test",new Double(25.3));
    DefaultKeyedValue v2=(DefaultKeyedValue)TestUtils.serialised(v1);
    assertEquals(v1,v2);
  }
}
