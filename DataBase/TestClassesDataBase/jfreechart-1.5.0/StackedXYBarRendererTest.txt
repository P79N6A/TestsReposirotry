/** 
 * Tests for the  {@link StackedXYBarRenderer} class.
 */
public class StackedXYBarRendererTest {
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    StackedXYBarRenderer r1=new StackedXYBarRenderer();
    StackedXYBarRenderer r2=new StackedXYBarRenderer();
    assertTrue(r1.equals(r2));
    assertTrue(r2.equals(r1));
    r1.setRenderAsPercentages(true);
    assertFalse(r1.equals(r2));
    r2.setRenderAsPercentages(true);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    StackedXYBarRenderer r1=new StackedXYBarRenderer();
    StackedXYBarRenderer r2=new StackedXYBarRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
    r1.setRenderAsPercentages(true);
    h1=r1.hashCode();
    h2=r2.hashCode();
    assertFalse(h1 == h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StackedXYBarRenderer r1=new StackedXYBarRenderer();
    StackedXYBarRenderer r2=(StackedXYBarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    StackedXYBarRenderer r1=new StackedXYBarRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StackedXYBarRenderer r1=new StackedXYBarRenderer();
    r1.setSeriesPaint(0,new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.YELLOW));
    StackedXYBarRenderer r2=(StackedXYBarRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Check that the renderer is calculating the domain bounds correctly.
 */
  @Test public void testFindDomainBounds(){
    TableXYDataset dataset=RendererXYPackageUtils.createTestTableXYDataset();
    JFreeChart chart=ChartFactory.createStackedXYAreaChart("Test Chart","X","Y",dataset,PlotOrientation.VERTICAL,false,false,false);
    XYPlot plot=(XYPlot)chart.getPlot();
    plot.setRenderer(new StackedXYBarRenderer());
    NumberAxis domainAxis=(NumberAxis)plot.getDomainAxis();
    domainAxis.setAutoRangeIncludesZero(false);
    Range bounds=domainAxis.getRange();
    assertFalse(bounds.contains(0.3));
    assertTrue(bounds.contains(0.5));
    assertTrue(bounds.contains(2.5));
    assertFalse(bounds.contains(2.8));
  }
  /** 
 * Check that the renderer is calculating the range bounds correctly.
 */
  @Test public void testFindRangeBounds(){
    TableXYDataset dataset=RendererXYPackageUtils.createTestTableXYDataset();
    JFreeChart chart=ChartFactory.createStackedXYAreaChart("Test Chart","X","Y",dataset,PlotOrientation.VERTICAL,false,false,false);
    XYPlot plot=(XYPlot)chart.getPlot();
    plot.setRenderer(new StackedXYBarRenderer());
    NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
    Range bounds=rangeAxis.getRange();
    assertTrue(bounds.contains(6.0));
    assertTrue(bounds.contains(8.0));
  }
}
