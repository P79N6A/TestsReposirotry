/** 
 * Tests for the  {@link StandardPieToolTipGenerator} class.
 */
public class StandardPieToolTipGeneratorTest {
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();
    StandardPieToolTipGenerator g2=new StandardPieToolTipGenerator();
    assertTrue(g1.equals(g2));
    assertTrue(g2.equals(g1));
    g1=new StandardPieToolTipGenerator("{0}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieToolTipGenerator("{0}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0"),new DecimalFormat("0.000%"));
    assertFalse(g1.equals(g2));
    g2=new StandardPieToolTipGenerator("{0} {1}",new DecimalFormat("#,##0"),new DecimalFormat("0.000%"));
    assertTrue(g1.equals(g2));
  }
  /** 
 * Simple check that hashCode is implemented.
 */
  @Test public void testHashCode(){
    StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();
    StandardPieToolTipGenerator g2=new StandardPieToolTipGenerator();
    assertTrue(g1.equals(g2));
    assertTrue(g1.hashCode() == g2.hashCode());
  }
  /** 
 * Some checks for cloning.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();
    StandardPieToolTipGenerator g2=(StandardPieToolTipGenerator)g1.clone();
    assertTrue(g1 != g2);
    assertTrue(g1.getClass() == g2.getClass());
    assertTrue(g1.equals(g2));
    assertTrue(g1.getNumberFormat() != g2.getNumberFormat());
    assertTrue(g1.getPercentFormat() != g2.getPercentFormat());
  }
  /** 
 * Check to ensure that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();
    assertTrue(g1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();
    StandardPieToolTipGenerator g2=(StandardPieToolTipGenerator)TestUtils.serialised(g1);
    assertEquals(g1,g2);
  }
}
