/** 
 * Tests for the  {@link StandardPieSectionLabelGenerator} class.
 */
public class StandardPieSectionLabelGeneratorTest {
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();
    StandardPieSectionLabelGenerator g2=new StandardPieSectionLabelGenerator();
    assertTrue(g1.equals(g2));
    assertTrue(g2.equals(g1));
    g1=new StandardPieSectionLabelGenerator("{0}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieSectionLabelGenerator("{0}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0.00"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0"),NumberFormat.getPercentInstance());
    assertFalse(g1.equals(g2));
    g2=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0"),NumberFormat.getPercentInstance());
    assertTrue(g1.equals(g2));
    g1=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0"),new DecimalFormat("0.000%"));
    assertFalse(g1.equals(g2));
    g2=new StandardPieSectionLabelGenerator("{0} {1}",new DecimalFormat("#,##0"),new DecimalFormat("0.000%"));
    assertTrue(g1.equals(g2));
    AttributedString as=new AttributedString("XYZ");
    g1.setAttributedLabel(0,as);
    assertFalse(g1.equals(g2));
    g2.setAttributedLabel(0,as);
    assertTrue(g1.equals(g2));
  }
  /** 
 * Simple check that hashCode is implemented.
 */
  @Test public void testHashCode(){
    StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();
    StandardPieSectionLabelGenerator g2=new StandardPieSectionLabelGenerator();
    assertTrue(g1.equals(g2));
    assertTrue(g1.hashCode() == g2.hashCode());
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();
    StandardPieSectionLabelGenerator g2=(StandardPieSectionLabelGenerator)g1.clone();
    assertTrue(g1 != g2);
    assertTrue(g1.getClass() == g2.getClass());
    assertTrue(g1.equals(g2));
  }
  /** 
 * Check to ensure that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();
    assertTrue(g1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();
    StandardPieSectionLabelGenerator g2=(StandardPieSectionLabelGenerator)TestUtils.serialised(g1);
    assertEquals(g1,g2);
  }
}
