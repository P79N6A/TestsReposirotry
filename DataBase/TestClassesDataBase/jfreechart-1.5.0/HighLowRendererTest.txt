/** 
 * Tests for the  {@link HighLowRenderer} class.
 */
public class HighLowRendererTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    HighLowRenderer r1=new HighLowRenderer();
    HighLowRenderer r2=new HighLowRenderer();
    assertEquals(r1,r2);
    r1.setDrawOpenTicks(false);
    assertFalse(r1.equals(r2));
    r2.setDrawOpenTicks(false);
    assertTrue(r1.equals(r2));
    r1.setDrawCloseTicks(false);
    assertFalse(r1.equals(r2));
    r2.setDrawCloseTicks(false);
    assertTrue(r1.equals(r2));
    r1.setOpenTickPaint(Color.RED);
    assertFalse(r1.equals(r2));
    r2.setOpenTickPaint(Color.RED);
    assertTrue(r1.equals(r2));
    r1.setCloseTickPaint(Color.BLUE);
    assertFalse(r1.equals(r2));
    r2.setCloseTickPaint(Color.BLUE);
    assertTrue(r1.equals(r2));
    r1.setTickLength(99.9);
    assertFalse(r1.equals(r2));
    r2.setTickLength(99.9);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    HighLowRenderer r1=new HighLowRenderer();
    HighLowRenderer r2=new HighLowRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    HighLowRenderer r1=new HighLowRenderer();
    r1.setCloseTickPaint(Color.green);
    HighLowRenderer r2=(HighLowRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    HighLowRenderer r1=new HighLowRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    HighLowRenderer r1=new HighLowRenderer();
    r1.setCloseTickPaint(Color.green);
    HighLowRenderer r2=(HighLowRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Some checks for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    HighLowRenderer renderer=new HighLowRenderer();
    OHLCDataItem item1=new OHLCDataItem(new Date(1L),2.0,4.0,1.0,3.0,100);
    OHLCDataset dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{item1});
    Range range=renderer.findRangeBounds(dataset);
    assertEquals(new Range(1.0,4.0),range);
    OHLCDataItem item2=new OHLCDataItem(new Date(1L),-1.0,3.0,-1.0,3.0,100);
    dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{item1,item2});
    range=renderer.findRangeBounds(dataset);
    assertEquals(new Range(-1.0,4.0),range);
    dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{});
    range=renderer.findRangeBounds(dataset);
    assertNull(range);
    range=renderer.findRangeBounds(null);
    assertNull(range);
  }
}
