/** 
 * Tests for the  {@link XYAreaRenderer} class.
 */
public class XYAreaRendererTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    XYAreaRenderer r1=new XYAreaRenderer();
    XYAreaRenderer r2=new XYAreaRenderer();
    assertEquals(r1,r2);
    r1=new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);
    assertFalse(r1.equals(r2));
    r2=new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);
    assertTrue(r1.equals(r2));
    r1=new XYAreaRenderer(XYAreaRenderer.AREA);
    assertFalse(r1.equals(r2));
    r2=new XYAreaRenderer(XYAreaRenderer.AREA);
    assertTrue(r1.equals(r2));
    r1=new XYAreaRenderer(XYAreaRenderer.LINES);
    assertFalse(r1.equals(r2));
    r2=new XYAreaRenderer(XYAreaRenderer.LINES);
    assertTrue(r1.equals(r2));
    r1=new XYAreaRenderer(XYAreaRenderer.SHAPES);
    assertFalse(r1.equals(r2));
    r2=new XYAreaRenderer(XYAreaRenderer.SHAPES);
    assertTrue(r1.equals(r2));
    r1=new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);
    assertFalse(r1.equals(r2));
    r2=new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);
    assertTrue(r1.equals(r2));
    r1.setOutline(true);
    assertFalse(r1.equals(r2));
    r2.setOutline(true);
    assertTrue(r1.equals(r2));
    r1.setLegendArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));
    assertFalse(r1.equals(r2));
    r2.setLegendArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));
    assertTrue(r1.equals(r2));
    r1.setUseFillPaint(true);
    assertFalse(r1.equals(r2));
    r2.setUseFillPaint(true);
    assertTrue(r1.equals(r2));
    r1.setGradientTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));
    assertFalse(r1.equals(r2));
    r2.setGradientTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    XYAreaRenderer r1=new XYAreaRenderer();
    XYAreaRenderer r2=new XYAreaRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
    r2.setUseFillPaint(true);
    assertFalse(r1.hashCode() == r2.hashCode());
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYAreaRenderer r1=new XYAreaRenderer();
    Rectangle2D rect1=new Rectangle2D.Double(1.0,2.0,3.0,4.0);
    r1.setLegendArea(rect1);
    XYAreaRenderer r2=(XYAreaRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    rect1.setRect(4.0,3.0,2.0,1.0);
    assertFalse(r1.equals(r2));
    r2.setLegendArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    XYAreaRenderer r1=new XYAreaRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYAreaRenderer r1=new XYAreaRenderer();
    XYAreaRenderer r2=(XYAreaRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Draws the chart with a  {@code null} info object to make sure thatno exceptions are thrown (particularly by code in the renderer).
 */
  @Test public void testDrawWithNullInfo(){
    try {
      DefaultTableXYDataset dataset=new DefaultTableXYDataset();
      XYSeries s1=new XYSeries("Series 1",true,false);
      s1.add(5.0,5.0);
      s1.add(10.0,15.5);
      s1.add(15.0,9.5);
      s1.add(20.0,7.5);
      dataset.addSeries(s1);
      XYSeries s2=new XYSeries("Series 2",true,false);
      s2.add(5.0,5.0);
      s2.add(10.0,15.5);
      s2.add(15.0,9.5);
      s2.add(20.0,3.5);
      dataset.addSeries(s2);
      XYPlot plot=new XYPlot(dataset,new NumberAxis("X"),new NumberAxis("Y"),new XYAreaRenderer());
      JFreeChart chart=new JFreeChart(plot);
      chart.createBufferedImage(300,200,null);
    }
 catch (    NullPointerException e) {
      fail("No exception should be thrown.");
    }
  }
  /** 
 * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem() method.
 */
  @Test public void testGetLegendItemSeriesIndex(){
    XYSeriesCollection d1=new XYSeriesCollection();
    XYSeries s1=new XYSeries("S1");
    s1.add(1.0,1.1);
    XYSeries s2=new XYSeries("S2");
    s2.add(1.0,1.1);
    d1.addSeries(s1);
    d1.addSeries(s2);
    XYSeriesCollection d2=new XYSeriesCollection();
    XYSeries s3=new XYSeries("S3");
    s3.add(1.0,1.1);
    XYSeries s4=new XYSeries("S4");
    s4.add(1.0,1.1);
    XYSeries s5=new XYSeries("S5");
    s5.add(1.0,1.1);
    d2.addSeries(s3);
    d2.addSeries(s4);
    d2.addSeries(s5);
    XYAreaRenderer r=new XYAreaRenderer();
    XYPlot plot=new XYPlot(d1,new NumberAxis("x"),new NumberAxis("y"),r);
    plot.setDataset(1,d2);
    new JFreeChart(plot);
    LegendItem li=r.getLegendItem(1,2);
    assertEquals("S5",li.getLabel());
    assertEquals(1,li.getDatasetIndex());
    assertEquals(2,li.getSeriesIndex());
  }
}
