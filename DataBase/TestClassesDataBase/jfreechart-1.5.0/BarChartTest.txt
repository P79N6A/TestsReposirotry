/** 
 * Tests for a bar chart.
 */
public class BarChartTest {
  /** 
 * A chart. 
 */
  private JFreeChart chart;
  /** 
 * Common test setup.
 */
  @Before public void setUp(){
    this.chart=createBarChart();
  }
  /** 
 * Draws the chart with a null info object to make sure that no exceptions are thrown (a problem that was occurring at one point).
 */
  @Test public void testDrawWithNullInfo(){
    try {
      BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);
      Graphics2D g2=image.createGraphics();
      this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);
      g2.dispose();
    }
 catch (    Exception e) {
      fail("There should be no exception.");
    }
  }
  /** 
 * Replaces the chart's dataset and then checks that the new dataset is OK.
 */
  @Test public void testReplaceDataset(){
    Number[][] data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};
    CategoryDataset newData=DatasetUtils.createCategoryDataset("S","C",data);
    LocalListener l=new LocalListener();
    this.chart.addChangeListener(l);
    CategoryPlot plot=(CategoryPlot)this.chart.getPlot();
    plot.setDataset(newData);
    assertEquals(true,l.flag);
    ValueAxis axis=plot.getRangeAxis();
    Range range=axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around -30: " + range.getLowerBound(),range.getLowerBound() <= -30);
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(),range.getUpperBound() >= 30);
  }
  /** 
 * Check that setting a tool tip generator for a series does override the default generator.
 */
  @Test public void testSetSeriesToolTipGenerator(){
    CategoryPlot plot=(CategoryPlot)this.chart.getPlot();
    CategoryItemRenderer renderer=plot.getRenderer();
    StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();
    renderer.setSeriesToolTipGenerator(0,tt);
    CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);
    assertTrue(tt2 == tt);
  }
  /** 
 * Check that setting a URL generator for a series does override the default generator.
 */
  @Test public void testSetSeriesURLGenerator(){
    CategoryPlot plot=(CategoryPlot)this.chart.getPlot();
    CategoryItemRenderer renderer=plot.getRenderer();
    StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();
    renderer.setSeriesItemURLGenerator(0,url1);
    CategoryURLGenerator url2=renderer.getItemURLGenerator(0,0);
    assertTrue(url2 == url1);
  }
  /** 
 * Create a bar chart with sample data in the range -3 to +3.
 * @return The chart.
 */
  private static JFreeChart createBarChart(){
    Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};
    CategoryDataset dataset=DatasetUtils.createCategoryDataset("S","C",data);
    return ChartFactory.createBarChart("Bar Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);
  }
  /** 
 * A chart change listener.
 */
static class LocalListener implements ChartChangeListener {
    /** 
 * A flag. 
 */
    private boolean flag=false;
    /** 
 * Event handler.
 * @param event  the event.
 */
    @Override public void chartChanged(    ChartChangeEvent event){
      this.flag=true;
    }
  }
}
