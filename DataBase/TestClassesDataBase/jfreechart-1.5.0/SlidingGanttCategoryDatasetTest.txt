/** 
 * Tests for the  {@link SlidingGanttCategoryDataset} class.
 */
public class SlidingGanttCategoryDatasetTest {
  /** 
 * Some checks for the equals() method.
 */
  @Test public void testEquals(){
    TaskSeries s1=new TaskSeries("Series");
    s1.add(new Task("Task 1",new Date(0L),new Date(1L)));
    s1.add(new Task("Task 2",new Date(10L),new Date(11L)));
    s1.add(new Task("Task 3",new Date(20L),new Date(21L)));
    TaskSeriesCollection u1=new TaskSeriesCollection();
    u1.add(s1);
    SlidingGanttCategoryDataset d1=new SlidingGanttCategoryDataset(u1,0,5);
    TaskSeries s2=new TaskSeries("Series");
    s2.add(new Task("Task 1",new Date(0L),new Date(1L)));
    s2.add(new Task("Task 2",new Date(10L),new Date(11L)));
    s2.add(new Task("Task 3",new Date(20L),new Date(21L)));
    TaskSeriesCollection u2=new TaskSeriesCollection();
    u2.add(s2);
    SlidingGanttCategoryDataset d2=new SlidingGanttCategoryDataset(u2,0,5);
    assertTrue(d1.equals(d2));
    d1.setFirstCategoryIndex(1);
    assertFalse(d1.equals(d2));
    d2.setFirstCategoryIndex(1);
    assertTrue(d1.equals(d2));
    d1.setMaximumCategoryCount(99);
    assertFalse(d1.equals(d2));
    d2.setMaximumCategoryCount(99);
    assertTrue(d1.equals(d2));
    s1.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertFalse(d1.equals(d2));
    s2.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertTrue(d1.equals(d2));
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    TaskSeries s1=new TaskSeries("Series");
    s1.add(new Task("Task 1",new Date(0L),new Date(1L)));
    TaskSeriesCollection u1=new TaskSeriesCollection();
    u1.add(s1);
    SlidingGanttCategoryDataset d1=new SlidingGanttCategoryDataset(u1,0,5);
    SlidingGanttCategoryDataset d2=(SlidingGanttCategoryDataset)d1.clone();
    assertTrue(d1 != d2);
    assertTrue(d1.getClass() == d2.getClass());
    assertTrue(d1.equals(d2));
    s1.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertFalse(d1.equals(d2));
    TaskSeriesCollection u2=(TaskSeriesCollection)d2.getUnderlyingDataset();
    TaskSeries s2=u2.getSeries("Series");
    s2.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertTrue(d1.equals(d2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    TaskSeries s1=new TaskSeries("Series");
    s1.add(new Task("Task 1",new Date(0L),new Date(1L)));
    TaskSeriesCollection u1=new TaskSeriesCollection();
    u1.add(s1);
    SlidingGanttCategoryDataset d1=new SlidingGanttCategoryDataset(u1,0,5);
    SlidingGanttCategoryDataset d2=(SlidingGanttCategoryDataset)TestUtils.serialised(d1);
    assertEquals(d1,d2);
    s1.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertFalse(d1.equals(d2));
    TaskSeriesCollection u2=(TaskSeriesCollection)d2.getUnderlyingDataset();
    TaskSeries s2=u2.getSeries("Series");
    s2.add(new Task("Task 2",new Date(10L),new Date(11L)));
    assertTrue(d1.equals(d2));
  }
}
