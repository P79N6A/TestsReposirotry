/** 
 * Tests for the  {@link ColumnArrangement} class.
 */
public class ColumnArrangementTest {
  /** 
 * Confirm that the equals() method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    ColumnArrangement c1=new ColumnArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);
    ColumnArrangement c2=new ColumnArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);
    assertTrue(c1.equals(c2));
    assertTrue(c2.equals(c1));
    c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);
    assertFalse(c1.equals(c2));
    c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);
    assertTrue(c1.equals(c2));
    c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);
    assertFalse(c1.equals(c2));
    c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);
    assertTrue(c1.equals(c2));
    c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);
    assertFalse(c1.equals(c2));
    c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);
    assertTrue(c1.equals(c2));
    c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);
    assertFalse(c1.equals(c2));
    c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);
    assertTrue(c1.equals(c2));
  }
  /** 
 * Immutable - cloning is not necessary.
 */
  @Test public void testCloning(){
    FlowArrangement f1=new FlowArrangement();
    assertFalse(f1 instanceof Cloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    FlowArrangement f1=new FlowArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);
    FlowArrangement f2=(FlowArrangement)TestUtils.serialised(f1);
    assertEquals(f1,f2);
  }
}
