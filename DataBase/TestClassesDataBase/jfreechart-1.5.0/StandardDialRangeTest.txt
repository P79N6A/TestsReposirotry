/** 
 * Tests for the  {@link StandardDialRange} class.
 */
public class StandardDialRangeTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    StandardDialRange r1=new StandardDialRange();
    StandardDialRange r2=new StandardDialRange();
    assertTrue(r1.equals(r2));
    r1.setLowerBound(1.1);
    assertFalse(r1.equals(r2));
    r2.setLowerBound(1.1);
    assertTrue(r1.equals(r2));
    r1.setUpperBound(11.1);
    assertFalse(r1.equals(r2));
    r2.setUpperBound(11.1);
    assertTrue(r1.equals(r2));
    r1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertFalse(r1.equals(r2));
    r2.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertTrue(r1.equals(r2));
    r1.setVisible(false);
    assertFalse(r1.equals(r2));
    r2.setVisible(false);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    StandardDialRange r1=new StandardDialRange();
    StandardDialRange r2=new StandardDialRange();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StandardDialRange r1=new StandardDialRange();
    StandardDialRange r2=(StandardDialRange)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    MyDialLayerChangeListener l1=new MyDialLayerChangeListener();
    r1.addChangeListener(l1);
    assertTrue(r1.hasListener(l1));
    assertFalse(r2.hasListener(l1));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StandardDialRange r1=new StandardDialRange();
    StandardDialRange r2=(StandardDialRange)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
}
