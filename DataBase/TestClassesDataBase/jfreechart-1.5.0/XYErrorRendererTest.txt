/** 
 * Tests for the  {@link XYErrorRenderer} class.
 */
public class XYErrorRendererTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    XYErrorRenderer r1=new XYErrorRenderer();
    XYErrorRenderer r2=new XYErrorRenderer();
    assertEquals(r1,r2);
    r1.setDrawXError(false);
    assertFalse(r1.equals(r2));
    r2.setDrawXError(false);
    assertTrue(r1.equals(r2));
    r1.setDrawYError(false);
    assertFalse(r1.equals(r2));
    r2.setDrawYError(false);
    assertTrue(r1.equals(r2));
    r1.setCapLength(9.0);
    assertFalse(r1.equals(r2));
    r2.setCapLength(9.0);
    assertTrue(r1.equals(r2));
    r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.GREEN));
    assertFalse(r1.equals(r2));
    r2.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.GREEN));
    assertTrue(r1.equals(r2));
    r1.setErrorStroke(new BasicStroke(1.5f));
    assertFalse(r1.equals(r2));
    r2.setErrorStroke(new BasicStroke(1.5f));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    XYErrorRenderer r1=new XYErrorRenderer();
    XYErrorRenderer r2=new XYErrorRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYErrorRenderer r1=new XYErrorRenderer();
    r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    XYErrorRenderer r2=(XYErrorRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * A test for cloning.
 */
  @Test public void testCloning2() throws CloneNotSupportedException {
    XYErrorRenderer r1=new XYErrorRenderer();
    r1.setErrorStroke(new BasicStroke(1.5f));
    XYErrorRenderer r2=(XYErrorRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    XYErrorRenderer r1=new XYErrorRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYErrorRenderer r1=new XYErrorRenderer();
    r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    XYErrorRenderer r2=(XYErrorRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization2(){
    XYErrorRenderer r1=new XYErrorRenderer();
    r1.setErrorStroke(new BasicStroke(1.5f));
    XYErrorRenderer r2=(XYErrorRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Some checks for the findDomainBounds() method.
 */
  @Test public void testFindDomainBounds(){
    XYErrorRenderer r=new XYErrorRenderer();
    assertNull(r.findDomainBounds(null));
  }
  /** 
 * Some checks for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    XYErrorRenderer r=new XYErrorRenderer();
    assertNull(r.findRangeBounds(null));
  }
}
