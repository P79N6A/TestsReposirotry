/** 
 * Tests for the  {@link YIntervalDataItem} class.
 */
public class YIntervalDataItemTest {
  private static final double EPSILON=0.00000000001;
  /** 
 * Some checks for the constructor.
 */
  @Test public void testConstructor1(){
    YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,3.0,4.0);
    assertEquals(new Double(1.0),item1.getX());
    assertEquals(2.0,item1.getYValue(),EPSILON);
    assertEquals(3.0,item1.getYLowValue(),EPSILON);
    assertEquals(4.0,item1.getYHighValue(),EPSILON);
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);
    YIntervalDataItem item2=new YIntervalDataItem(1.0,2.0,1.5,2.5);
    assertTrue(item1.equals(item2));
    assertTrue(item2.equals(item1));
    item1=new YIntervalDataItem(1.1,2.0,1.5,2.5);
    assertFalse(item1.equals(item2));
    item2=new YIntervalDataItem(1.1,2.0,1.5,2.5);
    assertTrue(item1.equals(item2));
    item1=new YIntervalDataItem(1.1,2.2,1.5,2.5);
    assertFalse(item1.equals(item2));
    item2=new YIntervalDataItem(1.1,2.2,1.5,2.5);
    assertTrue(item1.equals(item2));
    item1=new YIntervalDataItem(1.1,2.2,1.55,2.5);
    assertFalse(item1.equals(item2));
    item2=new YIntervalDataItem(1.1,2.2,1.55,2.5);
    assertTrue(item1.equals(item2));
    item1=new YIntervalDataItem(1.1,2.2,1.55,2.55);
    assertFalse(item1.equals(item2));
    item2=new YIntervalDataItem(1.1,2.2,1.55,2.55);
    assertTrue(item1.equals(item2));
  }
  /** 
 * Some checks for the clone() method.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);
    YIntervalDataItem item2=(YIntervalDataItem)item1.clone();
    assertTrue(item1 != item2);
    assertTrue(item1.getClass() == item2.getClass());
    assertTrue(item1.equals(item2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);
    YIntervalDataItem item2=(YIntervalDataItem)TestUtils.serialised(item1);
    assertEquals(item1,item2);
  }
}
