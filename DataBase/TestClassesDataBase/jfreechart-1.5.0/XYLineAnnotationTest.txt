/** 
 * Tests for the  {@link XYLineAnnotation} class.
 */
public class XYLineAnnotationTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    Stroke stroke=new BasicStroke(2.0f);
    XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    XYLineAnnotation a2=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    assertTrue(a2.equals(a1));
    a1=new XYLineAnnotation(11.0,20.0,100.0,200.0,stroke,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,20.0,100.0,200.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    a1=new XYLineAnnotation(11.0,21.0,100.0,200.0,stroke,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,21.0,100.0,200.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    a1=new XYLineAnnotation(11.0,21.0,101.0,201.0,stroke,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,21.0,101.0,201.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    Stroke stroke2=new BasicStroke(0.99f);
    a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,Color.BLUE);
    assertTrue(a1.equals(a2));
    GradientPaint g1=new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE);
    GradientPaint g2=new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE);
    a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,g1);
    assertFalse(a1.equals(a2));
    a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,g2);
    assertTrue(a1.equals(a2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    Stroke stroke=new BasicStroke(2.0f);
    XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    XYLineAnnotation a2=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    Stroke stroke=new BasicStroke(2.0f);
    XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    XYLineAnnotation a2=(XYLineAnnotation)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Checks that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    Stroke stroke=new BasicStroke(2.0f);
    XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    assertTrue(a1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    Stroke stroke=new BasicStroke(2.0f);
    XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.BLUE);
    XYLineAnnotation a2=(XYLineAnnotation)TestUtils.serialised(a1);
    assertEquals(a1,a2);
  }
}
