/** 
 * Tests for the  {@link DialValueIndicator} class.
 */
public class DialValueIndicatorTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    DialValueIndicator i1=new DialValueIndicator(0);
    DialValueIndicator i2=new DialValueIndicator(0);
    assertTrue(i1.equals(i2));
    i1.setDatasetIndex(99);
    assertFalse(i1.equals(i2));
    i2.setDatasetIndex(99);
    assertTrue(i1.equals(i2));
    i1.setAngle(43);
    assertFalse(i1.equals(i2));
    i2.setAngle(43);
    assertTrue(i1.equals(i2));
    i1.setRadius(0.77);
    assertFalse(i1.equals(i2));
    i2.setRadius(0.77);
    assertTrue(i1.equals(i2));
    i1.setFrameAnchor(RectangleAnchor.TOP_LEFT);
    assertFalse(i1.equals(i2));
    i2.setFrameAnchor(RectangleAnchor.TOP_LEFT);
    assertTrue(i1.equals(i2));
    i1.setTemplateValue(new Double(1.23));
    assertFalse(i1.equals(i2));
    i2.setTemplateValue(new Double(1.23));
    assertTrue(i1.equals(i2));
    i1.setFont(new Font("Dialog",Font.PLAIN,7));
    assertFalse(i1.equals(i2));
    i2.setFont(new Font("Dialog",Font.PLAIN,7));
    assertTrue(i1.equals(i2));
    i1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertFalse(i1.equals(i2));
    i2.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertTrue(i1.equals(i2));
    i1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertFalse(i1.equals(i2));
    i2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertTrue(i1.equals(i2));
    i1.setOutlineStroke(new BasicStroke(1.1f));
    assertFalse(i1.equals(i2));
    i2.setOutlineStroke(new BasicStroke(1.1f));
    assertTrue(i1.equals(i2));
    i1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertFalse(i1.equals(i2));
    i2.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green));
    assertTrue(i1.equals(i2));
    i1.setInsets(new RectangleInsets(1,2,3,4));
    assertFalse(i1.equals(i2));
    i2.setInsets(new RectangleInsets(1,2,3,4));
    assertTrue(i1.equals(i2));
    i1.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);
    assertFalse(i1.equals(i2));
    i2.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);
    assertTrue(i1.equals(i2));
    i1.setTextAnchor(TextAnchor.TOP_LEFT);
    assertFalse(i1.equals(i2));
    i2.setTextAnchor(TextAnchor.TOP_LEFT);
    assertTrue(i1.equals(i2));
    i1.setVisible(false);
    assertFalse(i1.equals(i2));
    i2.setVisible(false);
    assertTrue(i1.equals(i2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    DialValueIndicator i1=new DialValueIndicator(0);
    DialValueIndicator i2=new DialValueIndicator(0);
    assertTrue(i1.equals(i2));
    int h1=i1.hashCode();
    int h2=i2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    DialValueIndicator i1=new DialValueIndicator(0);
    DialValueIndicator i2=(DialValueIndicator)i1.clone();
    assertTrue(i1 != i2);
    assertTrue(i1.getClass() == i2.getClass());
    assertTrue(i1.equals(i2));
    MyDialLayerChangeListener l1=new MyDialLayerChangeListener();
    i1.addChangeListener(l1);
    assertTrue(i1.hasListener(l1));
    assertFalse(i2.hasListener(l1));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DialValueIndicator i1=new DialValueIndicator(0);
    DialValueIndicator i2=(DialValueIndicator)TestUtils.serialised(i1);
    assertEquals(i1,i2);
  }
}
