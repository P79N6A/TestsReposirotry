/** 
 * Some tests for the  {@link DateRange} class.
 */
public class DateRangeTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    DateRange r1=new DateRange(new Date(1000L),new Date(2000L));
    DateRange r2=new DateRange(new Date(1000L),new Date(2000L));
    assertTrue(r1.equals(r2));
    assertTrue(r2.equals(r1));
    r1=new DateRange(new Date(1111L),new Date(2000L));
    assertFalse(r1.equals(r2));
    r2=new DateRange(new Date(1111L),new Date(2000L));
    assertTrue(r1.equals(r2));
    r1=new DateRange(new Date(1111L),new Date(2222L));
    assertFalse(r1.equals(r2));
    r2=new DateRange(new Date(1111L),new Date(2222L));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DateRange r1=new DateRange(new Date(1000L),new Date(2000L));
    DateRange r2=(DateRange)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * The  {@link DateRange} class is immutable, so it doesn't need tobe cloneable.
 */
  @Test public void testClone(){
    DateRange r1=new DateRange(new Date(1000L),new Date(2000L));
    assertFalse(r1 instanceof Cloneable);
  }
  /** 
 * Confirm that a DateRange is immutable.
 */
  @Test public void testImmutable(){
    Date d1=new Date(10L);
    Date d2=new Date(20L);
    DateRange r=new DateRange(d1,d2);
    d1.setTime(11L);
    assertEquals(new Date(10L),r.getLowerDate());
    r.getUpperDate().setTime(22L);
    assertEquals(new Date(20L),r.getUpperDate());
  }
}
