/** 
 * Tests for the  {@link VectorDataItem} class.
 */
public class VectorDataItemTest {
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);
    VectorDataItem v2=new VectorDataItem(1.0,2.0,3.0,4.0);
    assertTrue(v1.equals(v2));
    assertTrue(v2.equals(v1));
    v1=new VectorDataItem(1.1,2.0,3.0,4.0);
    assertFalse(v1.equals(v2));
    v2=new VectorDataItem(1.1,2.0,3.0,4.0);
    assertTrue(v1.equals(v2));
    v1=new VectorDataItem(1.1,2.2,3.0,4.0);
    assertFalse(v1.equals(v2));
    v2=new VectorDataItem(1.1,2.2,3.0,4.0);
    assertTrue(v1.equals(v2));
    v1=new VectorDataItem(1.1,2.2,3.3,4.0);
    assertFalse(v1.equals(v2));
    v2=new VectorDataItem(1.1,2.2,3.3,4.0);
    assertTrue(v1.equals(v2));
    v1=new VectorDataItem(1.1,2.2,3.3,4.4);
    assertFalse(v1.equals(v2));
    v2=new VectorDataItem(1.1,2.2,3.3,4.4);
    assertTrue(v1.equals(v2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);
    VectorDataItem v2=new VectorDataItem(1.0,2.0,3.0,4.0);
    assertTrue(v1.equals(v2));
    int h1=v1.hashCode();
    int h2=v2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Check cloning.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);
    VectorDataItem v2=(VectorDataItem)v1.clone();
    assertTrue(v1 != v2);
    assertTrue(v1.getClass() == v2.getClass());
    assertTrue(v1.equals(v2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);
    VectorDataItem v2=(VectorDataItem)TestUtils.serialised(v1);
    assertEquals(v1,v2);
  }
}
