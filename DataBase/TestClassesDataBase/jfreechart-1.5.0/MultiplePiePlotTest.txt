/** 
 * Some tests for the  {@link MultiplePiePlot} class.
 */
public class MultiplePiePlotTest implements PlotChangeListener {
  /** 
 * The last event received. 
 */
  PlotChangeEvent lastEvent;
  /** 
 * Receives a plot change event and records it.  Some tests will use this to check that events have been generated (or not) when required.
 * @param event  the event.
 */
  @Override public void plotChanged(  PlotChangeEvent event){
    this.lastEvent=event;
  }
  /** 
 * Some checks for the constructors.
 */
  @Test public void testConstructor(){
    MultiplePiePlot plot=new MultiplePiePlot();
    assertNull(plot.getDataset());
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    plot=new MultiplePiePlot(dataset);
    assertTrue(dataset.hasListener(plot));
  }
  /** 
 * Check that the equals() method distinguishes the required fields.
 */
  @Test public void testEquals(){
    MultiplePiePlot p1=new MultiplePiePlot();
    MultiplePiePlot p2=new MultiplePiePlot();
    assertTrue(p1.equals(p2));
    assertTrue(p2.equals(p1));
    p1.setDataExtractOrder(TableOrder.BY_ROW);
    assertFalse(p1.equals(p2));
    p2.setDataExtractOrder(TableOrder.BY_ROW);
    assertTrue(p1.equals(p2));
    p1.setLimit(1.23);
    assertFalse(p1.equals(p2));
    p2.setLimit(1.23);
    assertTrue(p1.equals(p2));
    p1.setAggregatedItemsKey("Aggregated Items");
    assertFalse(p1.equals(p2));
    p2.setAggregatedItemsKey("Aggregated Items");
    assertTrue(p1.equals(p2));
    p1.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.YELLOW));
    assertFalse(p1.equals(p2));
    p2.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.YELLOW));
    assertTrue(p1.equals(p2));
    p1.setPieChart(ChartFactory.createPieChart("Title",null,true,true,true));
    assertFalse(p1.equals(p2));
    p2.setPieChart(ChartFactory.createPieChart("Title",null,true,true,true));
    assertTrue(p1.equals(p2));
    p1.setLegendItemShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));
    assertFalse(p1.equals(p2));
    p2.setLegendItemShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));
    assertTrue(p1.equals(p2));
  }
  /** 
 * Some basic checks for the clone() method.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    MultiplePiePlot p1=new MultiplePiePlot();
    Rectangle2D rect=new Rectangle2D.Double(1.0,2.0,3.0,4.0);
    p1.setLegendItemShape(rect);
    MultiplePiePlot p2=(MultiplePiePlot)p1.clone();
    assertTrue(p1 != p2);
    assertTrue(p1.getClass() == p2.getClass());
    assertTrue(p1.equals(p2));
    rect.setRect(2.0,3.0,4.0,5.0);
    assertFalse(p1.equals(p2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    MultiplePiePlot p1=new MultiplePiePlot(null);
    p1.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.YELLOW,3.0f,4.0f,Color.RED));
    MultiplePiePlot p2=(MultiplePiePlot)TestUtils.serialised(p1);
    assertEquals(p1,p2);
  }
  /** 
 * Fetches the legend items and checks the values.
 */
  @Test public void testGetLegendItems(){
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    dataset.addValue(35.0,"S1","C1");
    dataset.addValue(45.0,"S1","C2");
    dataset.addValue(55.0,"S2","C1");
    dataset.addValue(15.0,"S2","C2");
    MultiplePiePlot plot=new MultiplePiePlot(dataset);
    JFreeChart chart=new JFreeChart(plot);
    LegendItemCollection legendItems=plot.getLegendItems();
    assertEquals(2,legendItems.getItemCount());
    LegendItem item1=legendItems.get(0);
    assertEquals("S1",item1.getLabel());
    assertEquals("S1",item1.getSeriesKey());
    assertEquals(0,item1.getSeriesIndex());
    assertEquals(dataset,item1.getDataset());
    assertEquals(0,item1.getDatasetIndex());
    LegendItem item2=legendItems.get(1);
    assertEquals("S2",item2.getLabel());
    assertEquals("S2",item2.getSeriesKey());
    assertEquals(1,item2.getSeriesIndex());
    assertEquals(dataset,item2.getDataset());
    assertEquals(0,item2.getDatasetIndex());
  }
}
