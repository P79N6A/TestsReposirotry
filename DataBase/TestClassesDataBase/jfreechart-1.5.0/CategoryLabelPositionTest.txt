/** 
 * Tests for the  {@link CategoryLabelPosition} class.
 */
public class CategoryLabelPositionTest {
  /** 
 * Check that the equals() method can distinguish all fields.
 */
  @Test public void testEquals(){
    CategoryLabelPosition p1=new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    CategoryLabelPosition p2=new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertTrue(p1.equals(p2));
    assertTrue(p2.equals(p1));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertTrue(p1.equals(p2));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertTrue(p1.equals(p2));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);
    assertTrue(p1.equals(p2));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.RANGE,0.44f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.RANGE,0.44f);
    assertTrue(p1.equals(p2));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.44f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.44f);
    assertTrue(p1.equals(p2));
    p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.55f);
    assertFalse(p1.equals(p2));
    p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.55f);
    assertTrue(p1.equals(p2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    CategoryLabelPosition a1=new CategoryLabelPosition();
    CategoryLabelPosition a2=new CategoryLabelPosition();
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    CategoryLabelPosition p1=new CategoryLabelPosition();
    CategoryLabelPosition p2=(CategoryLabelPosition)TestUtils.serialised(p1);
    assertEquals(p1,p2);
  }
}
