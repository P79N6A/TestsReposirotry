/** 
 * Tests for the  {@link XYShapeRenderer} class.
 */
public class XYShapeRendererTest {
  /** 
 * Some checks for the equals() method.
 */
  @Test public void testEquals(){
    XYShapeRenderer r1=new XYShapeRenderer();
    XYShapeRenderer r2=new XYShapeRenderer();
    assertTrue(r1.equals(r2));
    assertTrue(r2.equals(r1));
    r1.setPaintScale(new LookupPaintScale(1.0,2.0,Color.WHITE));
    assertFalse(r1.equals(r2));
    r2.setPaintScale(new LookupPaintScale(1.0,2.0,Color.WHITE));
    assertTrue(r1.equals(r2));
    r1.setDrawOutlines(true);
    assertFalse(r1.equals(r2));
    r2.setDrawOutlines(true);
    assertTrue(r1.equals(r2));
    r1.setUseOutlinePaint(false);
    assertFalse(r1.equals(r2));
    r2.setUseOutlinePaint(false);
    assertTrue(r1.equals(r2));
    r1.setUseFillPaint(true);
    assertFalse(r1.equals(r2));
    r2.setUseFillPaint(true);
    assertTrue(r1.equals(r2));
    r1.setGuideLinesVisible(true);
    assertFalse(r1.equals(r2));
    r2.setGuideLinesVisible(true);
    assertTrue(r1.equals(r2));
    r1.setGuideLinePaint(Color.RED);
    assertFalse(r1.equals(r2));
    r2.setGuideLinePaint(Color.RED);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYShapeRenderer r1=new XYShapeRenderer();
    XYShapeRenderer r2=(XYShapeRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYShapeRenderer r1=new XYShapeRenderer();
    XYShapeRenderer r2=(XYShapeRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  private static final double EPSILON=0.0000000001;
  /** 
 * Check if finding the bounds in z-dimension of an XYZDataset works. 
 */
  @Test public void testFindZBounds(){
    XYShapeRenderer r=new XYShapeRenderer();
    assertNull(r.findZBounds(null));
    DefaultXYZDataset dataset=new DefaultXYZDataset();
    Range range;
    double data1[][]={{1,1,1},{1,1,1},{1,2,3}};
    dataset.addSeries("series1",data1);
    range=r.findZBounds(dataset);
    assertNotNull(range);
    assertEquals(1d,range.getLowerBound(),EPSILON);
    assertEquals(3d,range.getUpperBound(),EPSILON);
    double data2[][]={{1,1,1},{1,1,1},{-1,-2,-3}};
    dataset.removeSeries("series1");
    dataset.addSeries("series2",data2);
    range=r.findZBounds(dataset);
    assertNotNull(range);
    assertEquals(-3d,range.getLowerBound(),EPSILON);
    assertEquals(-1d,range.getUpperBound(),EPSILON);
    double data3[][]={{1,1,1},{1,1,1},{-1.2,2.9,3.8}};
    dataset.removeSeries("series2");
    dataset.addSeries("series3",data3);
    range=r.findZBounds(dataset);
    assertNotNull(range);
    assertEquals(-1.2d,range.getLowerBound(),EPSILON);
    assertEquals(3.8d,range.getUpperBound(),EPSILON);
  }
  /** 
 * Test for bug 3026341.
 */
  @Test public void test3026341(){
    XYShapeRenderer renderer=new XYShapeRenderer();
    assertNull(renderer.findRangeBounds(null));
    XYSeriesCollection dataset=new XYSeriesCollection();
    XYSeries series=new XYSeries("S1");
    series.add(1.0,null);
    dataset.addSeries(series);
    Range r=renderer.findRangeBounds(dataset);
    assertNull(r);
    r=renderer.findDomainBounds(dataset);
    assertEquals(r.getLowerBound(),1.0,EPSILON);
    assertEquals(r.getUpperBound(),1.0,EPSILON);
    dataset.removeAllSeries();
    r=renderer.findDomainBounds(dataset);
    assertNull(r);
  }
}
