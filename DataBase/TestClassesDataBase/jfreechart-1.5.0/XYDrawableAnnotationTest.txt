/** 
 * Tests for the  {@link XYDrawableAnnotation} class.
 */
public class XYDrawableAnnotationTest {
static class TestDrawable implements Drawable, Cloneable, Serializable {
    /** 
 * Default constructor.
 */
    public TestDrawable(){
    }
    /** 
 * Draws something.
 * @param g2  the graphics device.
 * @param area  the area in which to draw.
 */
    @Override public void draw(    Graphics2D g2,    Rectangle2D area){
    }
    /** 
 * Tests this object for equality with an arbitrary object.
 * @param obj  the object to test against ({@code null} permitted).
 * @return A boolean.
 */
    @Override public boolean equals(    Object obj){
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof TestDrawable)) {
        return false;
      }
      return true;
    }
    /** 
 * Returns a clone.
 * @return A clone.
 * @throws CloneNotSupportedException if there is a problem cloning.
 */
    @Override public Object clone() throws CloneNotSupportedException {
      return super.clone();
    }
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    XYDrawableAnnotation a2=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    a1=new XYDrawableAnnotation(11.0,20.0,100.0,200.0,new TestDrawable());
    assertFalse(a1.equals(a2));
    a2=new XYDrawableAnnotation(11.0,20.0,100.0,200.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    a1=new XYDrawableAnnotation(11.0,22.0,100.0,200.0,new TestDrawable());
    assertFalse(a1.equals(a2));
    a2=new XYDrawableAnnotation(11.0,22.0,100.0,200.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    a1=new XYDrawableAnnotation(11.0,22.0,101.0,200.0,new TestDrawable());
    assertFalse(a1.equals(a2));
    a2=new XYDrawableAnnotation(11.0,22.0,101.0,200.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    a1=new XYDrawableAnnotation(11.0,22.0,101.0,202.0,new TestDrawable());
    assertFalse(a1.equals(a2));
    a2=new XYDrawableAnnotation(11.0,22.0,101.0,202.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    a1=new XYDrawableAnnotation(11.0,22.0,101.0,202.0,2.0,new TestDrawable());
    assertFalse(a1.equals(a2));
    a2=new XYDrawableAnnotation(11.0,22.0,101.0,202.0,2.0,new TestDrawable());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    XYDrawableAnnotation a2=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    XYDrawableAnnotation a2=(XYDrawableAnnotation)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Checks that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    assertTrue(a1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());
    XYDrawableAnnotation a2=(XYDrawableAnnotation)TestUtils.serialised(a1);
    assertEquals(a1,a2);
  }
}
