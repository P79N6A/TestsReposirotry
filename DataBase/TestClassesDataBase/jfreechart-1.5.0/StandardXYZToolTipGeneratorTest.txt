/** 
 * Tests for the  {@link StandardXYZToolTipGenerator} class.
 */
public class StandardXYZToolTipGeneratorTest {
  /** 
 * Tests that the equals() method can distinguish all fields.
 */
  @Test public void testEquals(){
    String f1="{1}";
    String f2="{2}";
    NumberFormat xnf1=new DecimalFormat("0.00");
    NumberFormat xnf2=new DecimalFormat("0.000");
    NumberFormat ynf1=new DecimalFormat("0.00");
    NumberFormat ynf2=new DecimalFormat("0.000");
    NumberFormat znf1=new DecimalFormat("0.00");
    NumberFormat znf2=new DecimalFormat("0.000");
    DateFormat xdf1=new SimpleDateFormat("d-MMM");
    DateFormat xdf2=new SimpleDateFormat("d-MMM-yyyy");
    DateFormat ydf1=new SimpleDateFormat("d-MMM");
    DateFormat ydf2=new SimpleDateFormat("d-MMM-yyyy");
    DateFormat zdf1=new SimpleDateFormat("d-MMM");
    DateFormat zdf2=new SimpleDateFormat("d-MMM-yyyy");
    StandardXYZToolTipGenerator g1=null;
    StandardXYZToolTipGenerator g2=null;
    g1=new StandardXYZToolTipGenerator(f1,xnf1,ynf1,znf1);
    g2=new StandardXYZToolTipGenerator(f1,xnf1,ynf1,znf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xnf1,ynf1,znf1);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xnf1,ynf1,znf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf1,znf1);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf1,znf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf1);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf2);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf2);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xdf1,ydf1,zdf1);
    g2=new StandardXYZToolTipGenerator(f2,xdf1,ydf1,zdf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf1,zdf1);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf1,zdf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf1);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf1);
    assertTrue(g1.equals(g2));
    g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf2);
    assertFalse(g1.equals(g2));
    g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf2);
    assertTrue(g1.equals(g2));
  }
  /** 
 * Simple check that hashCode is implemented.
 */
  @Test public void testHashCode(){
    StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();
    StandardXYZToolTipGenerator g2=new StandardXYZToolTipGenerator();
    assertTrue(g1.equals(g2));
    assertTrue(g1.hashCode() == g2.hashCode());
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();
    StandardXYZToolTipGenerator g2=(StandardXYZToolTipGenerator)g1.clone();
    assertTrue(g1 != g2);
    assertTrue(g1.getClass() == g2.getClass());
    assertTrue(g1.equals(g2));
  }
  /** 
 * Check to ensure that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();
    assertTrue(g1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();
    StandardXYZToolTipGenerator g2=(StandardXYZToolTipGenerator)TestUtils.serialised(g1);
    assertEquals(g1,g2);
  }
}
