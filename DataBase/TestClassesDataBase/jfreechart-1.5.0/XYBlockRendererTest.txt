/** 
 * Tests for the  {@link XYBlockRenderer} class.
 */
public class XYBlockRendererTest {
  private static final double EPSILON=0.0000000001;
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    XYBlockRenderer r1=new XYBlockRenderer();
    XYBlockRenderer r2=new XYBlockRenderer();
    assertTrue(r1.equals(r2));
    assertTrue(r2.equals(r1));
    r1.setBlockHeight(2.0);
    assertFalse(r1.equals(r2));
    r2.setBlockHeight(2.0);
    assertTrue(r1.equals(r2));
    r1.setBlockWidth(2.0);
    assertFalse(r1.equals(r2));
    r2.setBlockWidth(2.0);
    assertTrue(r1.equals(r2));
    r1.setPaintScale(new GrayPaintScale(0.0,1.0));
    assertFalse(r1.equals(r2));
    r2.setPaintScale(new GrayPaintScale(0.0,1.0));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    XYBlockRenderer r1=new XYBlockRenderer();
    XYBlockRenderer r2=new XYBlockRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYBlockRenderer r1=new XYBlockRenderer();
    LookupPaintScale scale1=new LookupPaintScale();
    r1.setPaintScale(scale1);
    XYBlockRenderer r2=(XYBlockRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    scale1.add(0.5,Color.RED);
    assertFalse(r1.equals(r2));
    LookupPaintScale scale2=(LookupPaintScale)r2.getPaintScale();
    scale2.add(0.5,Color.RED);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    XYBlockRenderer r1=new XYBlockRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYBlockRenderer r1=new XYBlockRenderer();
    XYBlockRenderer r2=(XYBlockRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * A simple test for bug 1766646.
 */
  @Test public void testBug1766646A(){
    XYBlockRenderer r=new XYBlockRenderer();
    Range range=r.findDomainBounds(null);
    assertTrue(range == null);
    DefaultXYZDataset emptyDataset=new DefaultXYZDataset();
    range=r.findDomainBounds(emptyDataset);
    assertTrue(range == null);
  }
  /** 
 * A simple test for bug 1766646.
 */
  @Test public void testBug1766646B(){
    XYBlockRenderer r=new XYBlockRenderer();
    Range range=r.findRangeBounds(null);
    assertTrue(range == null);
    DefaultXYZDataset emptyDataset=new DefaultXYZDataset();
    range=r.findRangeBounds(emptyDataset);
    assertTrue(range == null);
  }
  /** 
 * Some tests for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    XYBlockRenderer renderer=new XYBlockRenderer();
    assertNull(renderer.findRangeBounds(null));
    XYSeriesCollection dataset=new XYSeriesCollection();
    XYSeries series=new XYSeries("S1");
    series.add(1.0,null);
    dataset.addSeries(series);
    Range r=renderer.findRangeBounds(dataset);
    assertNull(r);
  }
  /** 
 * Some tests for the findDomainBounds() method.
 */
  @Test public void testFindDomainBounds(){
    XYBlockRenderer renderer=new XYBlockRenderer();
    assertNull(renderer.findRangeBounds(null));
    XYSeriesCollection dataset=new XYSeriesCollection();
    XYSeries series=new XYSeries("S1");
    series.add(1.0,null);
    dataset.addSeries(series);
    Range r=renderer.findDomainBounds(dataset);
    assertEquals(0.5,r.getLowerBound(),EPSILON);
    assertEquals(1.5,r.getUpperBound(),EPSILON);
    dataset.removeAllSeries();
    r=renderer.findDomainBounds(dataset);
    assertNull(r);
  }
}
