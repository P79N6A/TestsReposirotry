/** 
 * Tests for the  {@link XYAreaRenderer2} class.
 */
public class XYAreaRenderer2Test {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    XYAreaRenderer2 r1=new XYAreaRenderer2();
    XYAreaRenderer2 r2=new XYAreaRenderer2();
    assertEquals(r1,r2);
    r1.setOutline(!r1.isOutline());
    assertFalse(r1.equals(r2));
    r2.setOutline(r1.isOutline());
    assertTrue(r1.equals(r2));
    r1.setLegendArea(new Rectangle(1,2,3,4));
    assertFalse(r1.equals(r2));
    r2.setLegendArea(new Rectangle(1,2,3,4));
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    XYAreaRenderer2 r1=new XYAreaRenderer2();
    XYAreaRenderer2 r2=new XYAreaRenderer2();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYAreaRenderer2 r1=new XYAreaRenderer2();
    Rectangle rect=new Rectangle(1,2,3,4);
    r1.setLegendArea(rect);
    XYAreaRenderer2 r2=(XYAreaRenderer2)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    rect.setBounds(99,99,99,99);
    assertFalse(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    XYAreaRenderer2 r1=new XYAreaRenderer2();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYAreaRenderer2 r1=new XYAreaRenderer2();
    XYAreaRenderer2 r2=(XYAreaRenderer2)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Draws the chart with a  {@code null} info object to make sure thatno exceptions are thrown (particularly by code in the renderer).
 */
  @Test public void testDrawWithNullInfo(){
    try {
      DefaultTableXYDataset dataset=new DefaultTableXYDataset();
      XYSeries s1=new XYSeries("Series 1",true,false);
      s1.add(5.0,5.0);
      s1.add(10.0,15.5);
      s1.add(15.0,9.5);
      s1.add(20.0,7.5);
      dataset.addSeries(s1);
      XYSeries s2=new XYSeries("Series 2",true,false);
      s2.add(5.0,5.0);
      s2.add(10.0,15.5);
      s2.add(15.0,9.5);
      s2.add(20.0,3.5);
      dataset.addSeries(s2);
      XYPlot plot=new XYPlot(dataset,new NumberAxis("X"),new NumberAxis("Y"),new XYAreaRenderer2());
      JFreeChart chart=new JFreeChart(plot);
      chart.createBufferedImage(300,200,null);
    }
 catch (    NullPointerException e) {
      fail("No exception should be thrown.");
    }
  }
  /** 
 * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem() method.
 */
  @Test public void testGetLegendItemSeriesIndex(){
    XYSeriesCollection d1=new XYSeriesCollection();
    XYSeries s1=new XYSeries("S1");
    s1.add(1.0,1.1);
    XYSeries s2=new XYSeries("S2");
    s2.add(1.0,1.1);
    d1.addSeries(s1);
    d1.addSeries(s2);
    XYSeriesCollection d2=new XYSeriesCollection();
    XYSeries s3=new XYSeries("S3");
    s3.add(1.0,1.1);
    XYSeries s4=new XYSeries("S4");
    s4.add(1.0,1.1);
    XYSeries s5=new XYSeries("S5");
    s5.add(1.0,1.1);
    d2.addSeries(s3);
    d2.addSeries(s4);
    d2.addSeries(s5);
    XYAreaRenderer2 r=new XYAreaRenderer2();
    XYPlot plot=new XYPlot(d1,new NumberAxis("x"),new NumberAxis("y"),r);
    plot.setDataset(1,d2);
    new JFreeChart(plot);
    LegendItem li=r.getLegendItem(1,2);
    assertEquals("S5",li.getLabel());
    assertEquals(1,li.getDatasetIndex());
    assertEquals(2,li.getSeriesIndex());
  }
}
