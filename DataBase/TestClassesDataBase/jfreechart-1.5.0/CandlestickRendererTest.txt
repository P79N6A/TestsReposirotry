/** 
 * Tests for the  {@link CandlestickRenderer} class.
 */
public class CandlestickRendererTest {
  private static final double EPSILON=0.0000000001;
  /** 
 * Some checks for the constructor.
 */
  @Test public void testConstructor(){
    CandlestickRenderer r1=new CandlestickRenderer();
    assertEquals(Color.GREEN,r1.getUpPaint());
    assertEquals(Color.RED,r1.getDownPaint());
    assertFalse(r1.getUseOutlinePaint());
    assertTrue(r1.getDrawVolume());
    assertEquals(Color.GRAY,r1.getVolumePaint());
    assertEquals(-1.0,r1.getCandleWidth(),EPSILON);
  }
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    CandlestickRenderer r1=new CandlestickRenderer();
    CandlestickRenderer r2=new CandlestickRenderer();
    assertEquals(r1,r2);
    r1.setUpPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    assertFalse(r1.equals(r2));
    r2.setUpPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    assertTrue(r1.equals(r2));
    r1.setDownPaint(new GradientPaint(5.0f,6.0f,Color.GREEN,7.0f,8.0f,Color.YELLOW));
    assertFalse(r1.equals(r2));
    r2.setDownPaint(new GradientPaint(5.0f,6.0f,Color.GREEN,7.0f,8.0f,Color.YELLOW));
    assertTrue(r1.equals(r2));
    r1.setDrawVolume(false);
    assertFalse(r1.equals(r2));
    r2.setDrawVolume(false);
    assertTrue(r1.equals(r2));
    r1.setCandleWidth(3.3);
    assertFalse(r1.equals(r2));
    r2.setCandleWidth(3.3);
    assertTrue(r1.equals(r2));
    r1.setMaxCandleWidthInMilliseconds(123);
    assertFalse(r1.equals(r2));
    r2.setMaxCandleWidthInMilliseconds(123);
    assertTrue(r1.equals(r2));
    r1.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);
    assertFalse(r1.equals(r2));
    r2.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);
    assertTrue(r1.equals(r2));
    r1.setAutoWidthFactor(0.22);
    assertFalse(r1.equals(r2));
    r2.setAutoWidthFactor(0.22);
    assertTrue(r1.equals(r2));
    r1.setAutoWidthGap(1.1);
    assertFalse(r1.equals(r2));
    r2.setAutoWidthGap(1.1);
    assertTrue(r1.equals(r2));
    r1.setUseOutlinePaint(true);
    assertFalse(r1.equals(r2));
    r2.setUseOutlinePaint(true);
    assertTrue(r1.equals(r2));
    r1.setVolumePaint(Color.BLUE);
    assertFalse(r1.equals(r2));
    r2.setVolumePaint(Color.BLUE);
    assertTrue(r1.equals(r2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    CandlestickRenderer r1=new CandlestickRenderer();
    CandlestickRenderer r2=new CandlestickRenderer();
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    CandlestickRenderer r1=new CandlestickRenderer();
    CandlestickRenderer r2=(CandlestickRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    CandlestickRenderer r1=new CandlestickRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    CandlestickRenderer r1=new CandlestickRenderer();
    CandlestickRenderer r2=(CandlestickRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * Some checks for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    CandlestickRenderer renderer=new CandlestickRenderer();
    OHLCDataItem item1=new OHLCDataItem(new Date(1L),2.0,4.0,1.0,3.0,100);
    OHLCDataset dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{item1});
    Range range=renderer.findRangeBounds(dataset);
    assertEquals(new Range(1.0,4.0),range);
    OHLCDataItem item2=new OHLCDataItem(new Date(1L),-1.0,3.0,-1.0,3.0,100);
    dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{item1,item2});
    range=renderer.findRangeBounds(dataset);
    assertEquals(new Range(-1.0,4.0),range);
    dataset=new DefaultOHLCDataset("S1",new OHLCDataItem[]{});
    range=renderer.findRangeBounds(dataset);
    assertNull(range);
    range=renderer.findRangeBounds(null);
    assertNull(range);
  }
}
