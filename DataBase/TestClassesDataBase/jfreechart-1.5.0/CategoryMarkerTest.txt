/** 
 * Some tests for the  {@link CategoryMarker} class.
 */
public class CategoryMarkerTest implements MarkerChangeListener {
  MarkerChangeEvent lastEvent;
  /** 
 * Records the last event.
 * @param event  the last event.
 */
  @Override public void markerChanged(  MarkerChangeEvent event){
    this.lastEvent=event;
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    CategoryMarker m1=new CategoryMarker("A");
    CategoryMarker m2=new CategoryMarker("A");
    assertTrue(m1.equals(m2));
    assertTrue(m2.equals(m1));
    m1=new CategoryMarker("B");
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("B");
    assertTrue(m1.equals(m2));
    m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(1.1f));
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(1.1f));
    assertTrue(m1.equals(m2));
    m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f));
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f));
    assertTrue(m1.equals(m2));
    m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(1.0f),1.0f);
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(1.0f),1.0f);
    assertTrue(m1.equals(m2));
    m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(3.3f),1.0f);
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(3.3f),1.0f);
    assertTrue(m1.equals(m2));
    m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(1.0f),0.5f);
    assertFalse(m1.equals(m2));
    m2=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(2.2f),Color.RED,new BasicStroke(1.0f),0.5f);
    assertTrue(m1.equals(m2));
  }
  /** 
 * Check cloning.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    CategoryMarker m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(1.1f));
    CategoryMarker m2=(CategoryMarker)m1.clone();
    assertTrue(m1 != m2);
    assertTrue(m1.getClass() == m2.getClass());
    assertTrue(m1.equals(m2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    CategoryMarker m1=new CategoryMarker("A",new GradientPaint(1.0f,2.0f,Color.WHITE,3.0f,4.0f,Color.YELLOW),new BasicStroke(1.1f));
    CategoryMarker m2=(CategoryMarker)TestUtils.serialised(m1);
    assertEquals(m1,m2);
  }
  /** 
 * Some checks for the getKey() and setKey() methods.
 */
  @Test public void testGetSetKey(){
    CategoryMarker m=new CategoryMarker("X");
    m.addChangeListener(this);
    this.lastEvent=null;
    assertEquals("X",m.getKey());
    m.setKey("Y");
    assertEquals("Y",m.getKey());
    assertEquals(m,this.lastEvent.getMarker());
    try {
      m.setKey(null);
      fail("Expected an IllegalArgumentException for null.");
    }
 catch (    IllegalArgumentException e) {
      assertTrue(true);
    }
  }
  /** 
 * Some checks for the getDrawAsLine() and setDrawAsLine() methods.
 */
  @Test public void testGetSetDrawAsLine(){
    CategoryMarker m=new CategoryMarker("X");
    m.addChangeListener(this);
    this.lastEvent=null;
    assertEquals(false,m.getDrawAsLine());
    m.setDrawAsLine(true);
    assertEquals(true,m.getDrawAsLine());
    assertEquals(m,this.lastEvent.getMarker());
  }
}
