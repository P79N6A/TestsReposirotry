/** 
 * Tests for the  {@link KeyedObject} class.
 */
public class KeyedObjectTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    KeyedObject ko1=new KeyedObject("Test","Object");
    KeyedObject ko2=new KeyedObject("Test","Object");
    assertTrue(ko1.equals(ko2));
    assertTrue(ko2.equals(ko1));
    ko1=new KeyedObject("Test 1","Object");
    ko2=new KeyedObject("Test 2","Object");
    assertFalse(ko1.equals(ko2));
    ko1=new KeyedObject("Test","Object 1");
    ko2=new KeyedObject("Test","Object 2");
    assertFalse(ko1.equals(ko2));
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    KeyedObject ko1=new KeyedObject("Test","Object");
    KeyedObject ko2=(KeyedObject)ko1.clone();
    assertTrue(ko1 != ko2);
    assertTrue(ko1.getClass() == ko2.getClass());
    assertTrue(ko1.equals(ko2));
  }
  /** 
 * Confirm special features of cloning.
 */
  @Test public void testCloning2() throws CloneNotSupportedException {
    Object obj1=new ArrayList();
    KeyedObject ko1=new KeyedObject("Test",obj1);
    KeyedObject ko2=(KeyedObject)ko1.clone();
    assertTrue(ko1 != ko2);
    assertTrue(ko1.getClass() == ko2.getClass());
    assertTrue(ko1.equals(ko2));
    assertTrue(ko2.getObject() == obj1);
    obj1=new DefaultPieDataset();
    ko1=new KeyedObject("Test",obj1);
    ko2=(KeyedObject)ko1.clone();
    assertTrue(ko1 != ko2);
    assertTrue(ko1.getClass() == ko2.getClass());
    assertTrue(ko1.equals(ko2));
    assertTrue(ko2.getObject() != obj1);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    KeyedObject ko1=new KeyedObject("Test","Object");
    KeyedObject ko2=(KeyedObject)TestUtils.serialised(ko1);
    assertEquals(ko1,ko2);
  }
}
