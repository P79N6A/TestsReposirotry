/** 
 * Tests for the  {@link PaintScaleLegend} class.
 */
public class PaintScaleLegendTest {
  /** 
 * Test that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    PaintScaleLegend l2=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    assertTrue(l1.equals(l2));
    assertTrue(l2.equals(l1));
    l1.setScale(new LookupPaintScale());
    assertFalse(l1.equals(l2));
    l2.setScale(new LookupPaintScale());
    assertTrue(l1.equals(l2));
    l1.setAxis(new NumberAxis("Axis 2"));
    assertFalse(l1.equals(l2));
    l2.setAxis(new NumberAxis("Axis 2"));
    assertTrue(l1.equals(l2));
    l1.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
    assertFalse(l1.equals(l2));
    l2.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
    assertTrue(l1.equals(l2));
    l1.setAxisOffset(99.0);
    assertFalse(l1.equals(l2));
    l2.setAxisOffset(99.0);
    assertTrue(l1.equals(l2));
    l1.setStripWidth(99.0);
    assertFalse(l1.equals(l2));
    l2.setStripWidth(99.0);
    assertTrue(l1.equals(l2));
    l1.setStripOutlineVisible(!l1.isStripOutlineVisible());
    assertFalse(l1.equals(l2));
    l2.setStripOutlineVisible(l1.isStripOutlineVisible());
    assertTrue(l1.equals(l2));
    l1.setStripOutlinePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertFalse(l1.equals(l2));
    l2.setStripOutlinePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertTrue(l1.equals(l2));
    l1.setStripOutlineStroke(new BasicStroke(1.1f));
    assertFalse(l1.equals(l2));
    l2.setStripOutlineStroke(new BasicStroke(1.1f));
    assertTrue(l1.equals(l2));
    l1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertFalse(l1.equals(l2));
    l2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertTrue(l1.equals(l2));
    l1.setSubdivisionCount(99);
    assertFalse(l1.equals(l2));
    l2.setSubdivisionCount(99);
    assertTrue(l1.equals(l2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    PaintScaleLegend l2=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    assertTrue(l1.equals(l2));
    int h1=l1.hashCode();
    int h2=l2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    PaintScaleLegend l2=(PaintScaleLegend)l1.clone();
    assertTrue(l1 != l2);
    assertTrue(l1.getClass() == l2.getClass());
    assertTrue(l1.equals(l2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis("X"));
    PaintScaleLegend l2=(PaintScaleLegend)TestUtils.serialised(l1);
    assertEquals(l1,l2);
  }
}
