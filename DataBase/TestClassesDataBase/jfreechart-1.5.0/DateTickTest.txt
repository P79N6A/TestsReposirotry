/** 
 * Tests for the  {@link DateTick} class.
 */
public class DateTickTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    Date d1=new Date(0L);
    Date d2=new Date(1L);
    String l1="Label 1";
    String l2="Label 2";
    TextAnchor ta1=TextAnchor.CENTER;
    TextAnchor ta2=TextAnchor.BASELINE_LEFT;
    DateTick t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);
    DateTick t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(d2,l1,ta1,ta1,Math.PI / 2.0);
    assertFalse(t1.equals(t2));
    t2=new DateTick(d2,l1,ta1,ta1,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(d1,l2,ta1,ta1,Math.PI / 2.0);
    assertFalse(t1.equals(t2));
    t2=new DateTick(d1,l2,ta1,ta1,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(d1,l1,ta2,ta1,Math.PI / 2.0);
    assertFalse(t1.equals(t2));
    t2=new DateTick(d1,l1,ta2,ta1,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(d1,l1,ta1,ta2,Math.PI / 2.0);
    assertFalse(t1.equals(t2));
    t2=new DateTick(d1,l1,ta1,ta2,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 3.0);
    assertFalse(t1.equals(t2));
    t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 3.0);
    assertTrue(t1.equals(t2));
    t1=new DateTick(TickType.MINOR,d1,l1,ta1,ta1,Math.PI);
    t2=new DateTick(TickType.MAJOR,d1,l1,ta1,ta1,Math.PI);
    assertFalse(t1.equals(t2));
    t2=new DateTick(TickType.MINOR,d1,l1,ta1,ta1,Math.PI);
    assertTrue(t1.equals(t2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    Date d1=new Date(0L);
    String l1="Label 1";
    TextAnchor ta1=TextAnchor.CENTER;
    DateTick t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);
    DateTick t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);
    assertTrue(t1.equals(t2));
    int h1=t1.hashCode();
    int h2=t2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    DateTick t1=new DateTick(new Date(0L),"Label",TextAnchor.CENTER,TextAnchor.CENTER,10.0);
    DateTick t2=(DateTick)t1.clone();
    assertTrue(t1 != t2);
    assertTrue(t1.getClass() == t2.getClass());
    assertTrue(t1.equals(t2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DateTick t1=new DateTick(new Date(0L),"Label",TextAnchor.CENTER,TextAnchor.CENTER,10.0);
    DateTick t2=(DateTick)TestUtils.serialised(t1);
    assertEquals(t1,t2);
  }
}
