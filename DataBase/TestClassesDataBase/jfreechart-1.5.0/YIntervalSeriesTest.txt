/** 
 * Tests for the  {@link YIntervalSeries} class.
 */
public class YIntervalSeriesTest implements SeriesChangeListener {
  SeriesChangeEvent lastEvent;
  /** 
 * Records the last event.
 * @param event  the event.
 */
  public void seriesChanged(  SeriesChangeEvent event){
    this.lastEvent=event;
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    YIntervalSeries s1=new YIntervalSeries("s1");
    YIntervalSeries s2=new YIntervalSeries("s1");
    assertTrue(s1.equals(s2));
    s1=new YIntervalSeries("s2");
    assertFalse(s1.equals(s2));
    s2=new YIntervalSeries("s2");
    assertTrue(s1.equals(s2));
    s1=new YIntervalSeries("s2",false,true);
    assertFalse(s1.equals(s2));
    s2=new YIntervalSeries("s2",false,true);
    assertTrue(s1.equals(s2));
    s1=new YIntervalSeries("s2",false,false);
    assertFalse(s1.equals(s2));
    s2=new YIntervalSeries("s2",false,false);
    assertTrue(s1.equals(s2));
    s1.add(1.0,0.5,1.5,2.0);
    assertFalse(s1.equals(s2));
    s2.add(1.0,0.5,1.5,2.0);
    assertTrue(s2.equals(s1));
    s1.add(2.0,0.5,1.5,2.0);
    assertFalse(s1.equals(s2));
    s2.add(2.0,0.5,1.5,2.0);
    assertTrue(s2.equals(s1));
    s1.remove(new Double(1.0));
    assertFalse(s1.equals(s2));
    s2.remove(new Double(1.0));
    assertTrue(s2.equals(s1));
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    YIntervalSeries s1=new YIntervalSeries("s1");
    s1.add(1.0,0.5,1.5,2.0);
    YIntervalSeries s2=(YIntervalSeries)s1.clone();
    assertTrue(s1 != s2);
    assertTrue(s1.getClass() == s2.getClass());
    assertTrue(s1.equals(s2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    YIntervalSeries s1=new YIntervalSeries("s1");
    s1.add(1.0,0.5,1.5,2.0);
    YIntervalSeries s2=(YIntervalSeries)TestUtils.serialised(s1);
    assertEquals(s1,s2);
  }
  /** 
 * Simple test for the indexOf() method.
 */
  @Test public void testIndexOf(){
    YIntervalSeries s1=new YIntervalSeries("Series 1");
    s1.add(1.0,1.0,1.0,2.0);
    s1.add(2.0,2.0,2.0,3.0);
    s1.add(3.0,3.0,3.0,4.0);
    assertEquals(0,s1.indexOf(new Double(1.0)));
  }
  /** 
 * A check for the indexOf() method for an unsorted series.
 */
  @Test public void testIndexOf2(){
    YIntervalSeries s1=new YIntervalSeries("Series 1",false,true);
    s1.add(1.0,1.0,1.0,2.0);
    s1.add(3.0,3.0,3.0,3.0);
    s1.add(2.0,2.0,2.0,2.0);
    assertEquals(0,s1.indexOf(new Double(1.0)));
    assertEquals(1,s1.indexOf(new Double(3.0)));
    assertEquals(2,s1.indexOf(new Double(2.0)));
  }
  /** 
 * Simple test for the remove() method.
 */
  @Test public void testRemove(){
    YIntervalSeries s1=new YIntervalSeries("Series 1");
    s1.add(1.0,1.0,1.0,2.0);
    s1.add(2.0,2.0,2.0,2.0);
    s1.add(3.0,3.0,3.0,3.0);
    assertEquals(3,s1.getItemCount());
    s1.remove(new Double(2.0));
    assertEquals(new Double(3.0),s1.getX(1));
    s1.remove(new Double(1.0));
    assertEquals(new Double(3.0),s1.getX(0));
  }
  private static final double EPSILON=0.0000000001;
  /** 
 * When items are added with duplicate x-values, we expect them to remain in the order they were added.
 */
  @Test public void testAdditionOfDuplicateXValues(){
    YIntervalSeries s1=new YIntervalSeries("Series 1");
    s1.add(1.0,1.0,1.0,1.0);
    s1.add(2.0,2.0,2.0,2.0);
    s1.add(2.0,3.0,3.0,3.0);
    s1.add(2.0,4.0,4.0,4.0);
    s1.add(3.0,5.0,5.0,5.0);
    assertEquals(1.0,s1.getYValue(0),EPSILON);
    assertEquals(2.0,s1.getYValue(1),EPSILON);
    assertEquals(3.0,s1.getYValue(2),EPSILON);
    assertEquals(4.0,s1.getYValue(3),EPSILON);
    assertEquals(5.0,s1.getYValue(4),EPSILON);
  }
  /** 
 * Some checks for the add() method for an UNSORTED series.
 */
  @Test public void testAdd(){
    YIntervalSeries series=new YIntervalSeries("Series",false,true);
    series.add(5.0,5.50,5.50,5.50);
    series.add(5.1,5.51,5.51,5.51);
    series.add(6.0,6.6,6.6,6.6);
    series.add(3.0,3.3,3.3,3.3);
    series.add(4.0,4.4,4.4,4.4);
    series.add(2.0,2.2,2.2,2.2);
    series.add(1.0,1.1,1.1,1.1);
    assertEquals(5.5,series.getYValue(0),EPSILON);
    assertEquals(5.51,series.getYValue(1),EPSILON);
    assertEquals(6.6,series.getYValue(2),EPSILON);
    assertEquals(3.3,series.getYValue(3),EPSILON);
    assertEquals(4.4,series.getYValue(4),EPSILON);
    assertEquals(2.2,series.getYValue(5),EPSILON);
    assertEquals(1.1,series.getYValue(6),EPSILON);
  }
  /** 
 * A simple check that the maximumItemCount attribute is working.
 */
  @Test public void testSetMaximumItemCount(){
    YIntervalSeries s1=new YIntervalSeries("S1");
    assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());
    s1.setMaximumItemCount(2);
    assertEquals(2,s1.getMaximumItemCount());
    s1.add(1.0,1.1,1.1,1.1);
    s1.add(2.0,2.2,2.2,2.2);
    s1.add(3.0,3.3,3.3,3.3);
    assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);
    assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);
  }
  /** 
 * Check that the maximum item count can be applied retrospectively.
 */
  @Test public void testSetMaximumItemCount2(){
    YIntervalSeries s1=new YIntervalSeries("S1");
    s1.add(1.0,1.1,1.1,1.1);
    s1.add(2.0,2.2,2.2,2.2);
    s1.add(3.0,3.3,3.3,3.3);
    s1.setMaximumItemCount(2);
    assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);
    assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);
  }
  /** 
 * Some checks for the clear() method.
 */
  @Test public void testClear(){
    YIntervalSeries s1=new YIntervalSeries("S1");
    s1.addChangeListener(this);
    s1.clear();
    assertNull(this.lastEvent);
    assertTrue(s1.isEmpty());
    s1.add(1.0,2.0,3.0,4.0);
    assertFalse(s1.isEmpty());
    s1.clear();
    assertNotNull(this.lastEvent);
    assertTrue(s1.isEmpty());
  }
}
