/** 
 * Tests for the  {@link CategoryLineAnnotation} class.
 */
public class CategoryLineAnnotationTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    BasicStroke s1=new BasicStroke(1.0f);
    BasicStroke s2=new BasicStroke(2.0f);
    CategoryLineAnnotation a1=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,s1);
    CategoryLineAnnotation a2=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,s1);
    assertTrue(a1.equals(a2));
    assertTrue(a2.equals(a1));
    a1.setCategory1("Category A");
    assertFalse(a1.equals(a2));
    a2.setCategory1("Category A");
    assertTrue(a1.equals(a2));
    a1.setValue1(0.15);
    assertFalse(a1.equals(a2));
    a2.setValue1(0.15);
    assertTrue(a1.equals(a2));
    a1.setCategory2("Category B");
    assertFalse(a1.equals(a2));
    a2.setCategory2("Category B");
    assertTrue(a1.equals(a2));
    a1.setValue2(0.25);
    assertFalse(a1.equals(a2));
    a2.setValue2(0.25);
    assertTrue(a1.equals(a2));
    a1.setPaint(Color.YELLOW);
    assertFalse(a1.equals(a2));
    a2.setPaint(Color.YELLOW);
    assertTrue(a1.equals(a2));
    a1.setStroke(s2);
    assertFalse(a1.equals(a2));
    a2.setStroke(s2);
    assertTrue(a1.equals(a2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    CategoryLineAnnotation a1=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,new BasicStroke(1.0f));
    CategoryLineAnnotation a2=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,new BasicStroke(1.0f));
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    CategoryLineAnnotation a1=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,new BasicStroke(1.0f));
    CategoryLineAnnotation a2=(CategoryLineAnnotation)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Checks that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    CategoryLineAnnotation a1=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,new BasicStroke(1.0f));
    assertTrue(a1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    CategoryLineAnnotation a1=new CategoryLineAnnotation("Category 1",1.0,"Category 2",2.0,Color.RED,new BasicStroke(1.0f));
    CategoryLineAnnotation a2=(CategoryLineAnnotation)TestUtils.serialised(a1);
    assertEquals(a1,a2);
  }
}
