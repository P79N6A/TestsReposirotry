/** 
 * Tests for the  {@link DateTitle} class.
 */
public class DateTitleTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    DateTitle t1=new DateTitle();
    DateTitle t2=new DateTitle();
    assertEquals(t1,t2);
    t1.setText("Test 1");
    assertFalse(t1.equals(t2));
    t2.setText("Test 1");
    assertTrue(t1.equals(t2));
    Font f=new Font("SansSerif",Font.PLAIN,15);
    t1.setFont(f);
    assertFalse(t1.equals(t2));
    t2.setFont(f);
    assertTrue(t1.equals(t2));
    t1.setPaint(Color.BLUE);
    assertFalse(t1.equals(t2));
    t2.setPaint(Color.BLUE);
    assertTrue(t1.equals(t2));
    t1.setBackgroundPaint(Color.BLUE);
    assertFalse(t1.equals(t2));
    t2.setBackgroundPaint(Color.BLUE);
    assertTrue(t1.equals(t2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    DateTitle t1=new DateTitle();
    DateTitle t2=new DateTitle();
    assertTrue(t1.equals(t2));
    int h1=t1.hashCode();
    int h2=t2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    DateTitle t1=new DateTitle();
    DateTitle t2=(DateTitle)t1.clone();
    assertTrue(t1 != t2);
    assertTrue(t1.getClass() == t2.getClass());
    assertTrue(t1.equals(t2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DateTitle t1=new DateTitle();
    DateTitle t2=(DateTitle)TestUtils.serialised(t1);
    assertEquals(t1,t2);
  }
}
