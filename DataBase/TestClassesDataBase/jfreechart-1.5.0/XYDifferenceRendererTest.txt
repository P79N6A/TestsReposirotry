/** 
 * Tests for the  {@link XYDifferenceRenderer} class.
 */
public class XYDifferenceRendererTest {
  /** 
 * Check that the equals() method distinguishes all fields.
 */
  @Test public void testEquals(){
    XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    XYDifferenceRenderer r2=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    assertEquals(r1,r2);
    r1.setPositivePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertFalse(r1.equals(r2));
    r2.setPositivePaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.BLUE));
    assertTrue(r1.equals(r2));
    r1.setNegativePaint(new GradientPaint(1.0f,2.0f,Color.YELLOW,3.0f,4.0f,Color.BLUE));
    assertFalse(r1.equals(r2));
    r2.setNegativePaint(new GradientPaint(1.0f,2.0f,Color.YELLOW,3.0f,4.0f,Color.BLUE));
    assertTrue(r1.equals(r2));
    r1=new XYDifferenceRenderer(Color.green,Color.YELLOW,true);
    assertFalse(r1.equals(r2));
    r2=new XYDifferenceRenderer(Color.green,Color.YELLOW,true);
    assertTrue(r1.equals(r2));
    r1.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));
    assertFalse(r1.equals(r2));
    r2.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));
    assertTrue(r1.equals(r2));
    r1.setRoundXCoordinates(true);
    assertFalse(r1.equals(r2));
    r2.setRoundXCoordinates(true);
    assertTrue(r1.equals(r2));
    assertFalse(r1.equals(null));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    XYDifferenceRenderer r2=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    assertTrue(r1.equals(r2));
    int h1=r1.hashCode();
    int h2=r2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    XYDifferenceRenderer r2=(XYDifferenceRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    Shape s=r1.getLegendLine();
    if (s instanceof Line2D) {
      Line2D l=(Line2D)s;
      l.setLine(1.0,2.0,3.0,4.0);
      assertFalse(r1.equals(r2));
    }
  }
  /** 
 * Verify that this class implements  {@link PublicCloneable}.
 */
  @Test public void testPublicCloneable(){
    XYDifferenceRenderer r1=new XYDifferenceRenderer();
    assertTrue(r1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.RED,Color.BLUE,false);
    XYDifferenceRenderer r2=(XYDifferenceRenderer)TestUtils.serialised(r1);
    assertEquals(r1,r2);
  }
  /** 
 * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem() method.
 */
  @Test public void testGetLegendItemSeriesIndex(){
    XYSeriesCollection d1=new XYSeriesCollection();
    XYSeries s1=new XYSeries("S1");
    s1.add(1.0,1.1);
    XYSeries s2=new XYSeries("S2");
    s2.add(1.0,1.1);
    d1.addSeries(s1);
    d1.addSeries(s2);
    XYSeriesCollection d2=new XYSeriesCollection();
    XYSeries s3=new XYSeries("S3");
    s3.add(1.0,1.1);
    XYSeries s4=new XYSeries("S4");
    s4.add(1.0,1.1);
    XYSeries s5=new XYSeries("S5");
    s5.add(1.0,1.1);
    d2.addSeries(s3);
    d2.addSeries(s4);
    d2.addSeries(s5);
    XYDifferenceRenderer r=new XYDifferenceRenderer();
    XYPlot plot=new XYPlot(d1,new NumberAxis("x"),new NumberAxis("y"),r);
    plot.setDataset(1,d2);
    new JFreeChart(plot);
    LegendItem li=r.getLegendItem(1,2);
    assertEquals("S5",li.getLabel());
    assertEquals(1,li.getDatasetIndex());
    assertEquals(2,li.getSeriesIndex());
  }
}
