/** 
 * Tests for the  {@link TimeSeriesURLGenerator} class.
 */
public class TimeSeriesURLGeneratorTest {
  /** 
 * A basic check for the generateURL() method.
 */
  @Test public void testGenerateURL(){
    TimeSeriesURLGenerator g=new TimeSeriesURLGenerator();
    DefaultXYDataset dataset=new DefaultXYDataset();
    dataset.addSeries("Series '1'",new double[][]{{1.0,2.0},{3.0,4.0}});
    String s=g.generateURL(dataset,0,0);
    assertTrue(s.startsWith("index.html?series=Series+%271%27&amp;item="));
  }
  /** 
 * Check that the equals() method can distinguish all fields.
 */
  @Test public void testEquals(){
    TimeSeriesURLGenerator g1=new TimeSeriesURLGenerator();
    TimeSeriesURLGenerator g2=new TimeSeriesURLGenerator();
    assertTrue(g1.equals(g2));
    g1=new TimeSeriesURLGenerator(new SimpleDateFormat("yyyy"),"prefix","series","item");
    assertFalse(g1.equals(g2));
    g2=new TimeSeriesURLGenerator(new SimpleDateFormat("yyyy"),"prefix","series","item");
    assertTrue(g1.equals(g2));
    g1=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix","series","item");
    assertFalse(g1.equals(g2));
    g2=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix","series","item");
    assertTrue(g1.equals(g2));
    g1=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series","item");
    assertFalse(g1.equals(g2));
    g2=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series","item");
    assertTrue(g1.equals(g2));
    g1=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series1","item");
    assertFalse(g1.equals(g2));
    g2=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series1","item");
    assertTrue(g1.equals(g2));
    g1=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series1","item1");
    assertFalse(g1.equals(g2));
    g2=new TimeSeriesURLGenerator(new SimpleDateFormat("yy"),"prefix1","series1","item1");
    assertTrue(g1.equals(g2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    TimeSeriesURLGenerator g1=new TimeSeriesURLGenerator();
    TimeSeriesURLGenerator g2=(TimeSeriesURLGenerator)TestUtils.serialised(g1);
    assertEquals(g1,g2);
  }
  /** 
 * Checks that the class does not implement PublicCloneable (the generator is immutable).
 */
  @Test public void testPublicCloneable(){
    TimeSeriesURLGenerator g1=new TimeSeriesURLGenerator();
    assertFalse(g1 instanceof PublicCloneable);
  }
}
