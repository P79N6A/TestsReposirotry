/** 
 * Tests for the  {@link CategoryAxis} class.
 */
public class CategoryAxisTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    CategoryAxis a1=new CategoryAxis("Test");
    CategoryAxis a2=new CategoryAxis("Test");
    assertTrue(a1.equals(a2));
    a1.setLowerMargin(0.15);
    assertFalse(a1.equals(a2));
    a2.setLowerMargin(0.15);
    assertTrue(a1.equals(a2));
    a1.setUpperMargin(0.15);
    assertFalse(a1.equals(a2));
    a2.setUpperMargin(0.15);
    assertTrue(a1.equals(a2));
    a1.setCategoryMargin(0.15);
    assertFalse(a1.equals(a2));
    a2.setCategoryMargin(0.15);
    assertTrue(a1.equals(a2));
    a1.setMaximumCategoryLabelWidthRatio(0.98f);
    assertFalse(a1.equals(a2));
    a2.setMaximumCategoryLabelWidthRatio(0.98f);
    assertTrue(a1.equals(a2));
    a1.setCategoryLabelPositionOffset(11);
    assertFalse(a1.equals(a2));
    a2.setCategoryLabelPositionOffset(11);
    assertTrue(a1.equals(a2));
    a1.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
    assertFalse(a1.equals(a2));
    a2.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
    assertTrue(a1.equals(a2));
    a1.addCategoryLabelToolTip("Test","Check");
    assertFalse(a1.equals(a2));
    a2.addCategoryLabelToolTip("Test","Check");
    assertTrue(a1.equals(a2));
    a1.addCategoryLabelURL("Test","http://www.jfree.org/");
    assertFalse(a1.equals(a2));
    a2.addCategoryLabelURL("Test","http://www.jfree.org/");
    assertTrue(a1.equals(a2));
    a1.setTickLabelFont("C1",new Font("Dialog",Font.PLAIN,21));
    assertFalse(a1.equals(a2));
    a2.setTickLabelFont("C1",new Font("Dialog",Font.PLAIN,21));
    assertTrue(a1.equals(a2));
    a1.setTickLabelPaint("C1",Color.RED);
    assertFalse(a1.equals(a2));
    a2.setTickLabelPaint("C1",Color.RED);
    assertTrue(a1.equals(a2));
    a1.setTickLabelPaint("C1",new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.YELLOW));
    assertFalse(a1.equals(a2));
    a2.setTickLabelPaint("C1",new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.YELLOW));
    assertTrue(a1.equals(a2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    CategoryAxis a1=new CategoryAxis("Test");
    CategoryAxis a2=new CategoryAxis("Test");
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    CategoryAxis a1=new CategoryAxis("Test");
    CategoryAxis a2=(CategoryAxis)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Confirm that cloning works.  This test customises the font and paint per category label.
 */
  @Test public void testCloning2() throws CloneNotSupportedException {
    CategoryAxis a1=new CategoryAxis("Test");
    a1.setTickLabelFont("C1",new Font("Dialog",Font.PLAIN,15));
    a1.setTickLabelPaint("C1",new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    CategoryAxis a2=(CategoryAxis)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
    a1.setTickLabelFont("C1",null);
    assertFalse(a1.equals(a2));
    a2.setTickLabelFont("C1",null);
    assertTrue(a1.equals(a2));
    a1.setTickLabelPaint("C1",Color.YELLOW);
    assertFalse(a1.equals(a2));
    a2.setTickLabelPaint("C1",Color.YELLOW);
    assertTrue(a1.equals(a2));
    a1.addCategoryLabelToolTip("C1","XYZ");
    assertFalse(a1.equals(a2));
    a2.addCategoryLabelToolTip("C1","XYZ");
    assertTrue(a1.equals(a2));
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    CategoryAxis a1=new CategoryAxis("Test Axis");
    a1.setTickLabelPaint("C1",new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.WHITE));
    CategoryAxis a2=(CategoryAxis)TestUtils.serialised(a1);
    assertEquals(a1,a2);
  }
}
