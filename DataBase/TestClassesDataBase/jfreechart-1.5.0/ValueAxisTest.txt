/** 
 * Tests for the  {@link ValueAxis} class.
 */
public class ValueAxisTest {
  private static final double EPSILON=0.000000001;
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    ValueAxis a1=new NumberAxis("Test");
    ValueAxis a2=(NumberAxis)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    NumberAxis a1=new NumberAxis("Test");
    NumberAxis a2=new NumberAxis("Test");
    assertTrue(a1.equals(a2));
    a1.setAxisLineVisible(false);
    assertFalse(a1.equals(a2));
    a2.setAxisLineVisible(false);
    assertTrue(a1.equals(a2));
    a1.setPositiveArrowVisible(true);
    assertFalse(a1.equals(a2));
    a2.setPositiveArrowVisible(true);
    assertTrue(a1.equals(a2));
    a1.setNegativeArrowVisible(true);
    assertFalse(a1.equals(a2));
    a2.setNegativeArrowVisible(true);
    assertTrue(a1.equals(a2));
    a1.setAxisLinePaint(Color.BLUE);
    assertFalse(a1.equals(a2));
    a2.setAxisLinePaint(Color.BLUE);
    assertTrue(a1.equals(a2));
    Stroke stroke=new BasicStroke(2.0f);
    a1.setAxisLineStroke(stroke);
    assertFalse(a1.equals(a2));
    a2.setAxisLineStroke(stroke);
    assertTrue(a1.equals(a2));
    a1.setInverted(true);
    assertFalse(a1.equals(a2));
    a2.setInverted(true);
    assertTrue(a1.equals(a2));
    a1.setRange(new Range(50.0,75.0));
    assertFalse(a1.equals(a2));
    a2.setRange(new Range(50.0,75.0));
    assertTrue(a1.equals(a2));
    a1.setAutoRange(true);
    assertFalse(a1.equals(a2));
    a2.setAutoRange(true);
    assertTrue(a1.equals(a2));
    a1.setAutoRangeMinimumSize(3.33);
    assertFalse(a1.equals(a2));
    a2.setAutoRangeMinimumSize(3.33);
    assertTrue(a1.equals(a2));
    a1.setDefaultAutoRange(new Range(1.2,3.4));
    assertFalse(a1.equals(a2));
    a2.setDefaultAutoRange(new Range(1.2,3.4));
    assertTrue(a1.equals(a2));
    a1.setUpperMargin(0.09);
    assertFalse(a1.equals(a2));
    a2.setUpperMargin(0.09);
    assertTrue(a1.equals(a2));
    a1.setLowerMargin(0.09);
    assertFalse(a1.equals(a2));
    a2.setLowerMargin(0.09);
    assertTrue(a1.equals(a2));
    a1.setFixedAutoRange(50.0);
    assertFalse(a1.equals(a2));
    a2.setFixedAutoRange(50.0);
    assertTrue(a1.equals(a2));
    a1.setAutoTickUnitSelection(false);
    assertFalse(a1.equals(a2));
    a2.setAutoTickUnitSelection(false);
    assertTrue(a1.equals(a2));
    a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    assertFalse(a1.equals(a2));
    a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    assertTrue(a1.equals(a2));
    a1.setVerticalTickLabels(true);
    assertFalse(a1.equals(a2));
    a2.setVerticalTickLabels(true);
    assertTrue(a1.equals(a2));
  }
  /** 
 * Tests the the lower and upper margin settings produce the expected results.
 */
  @Test public void testAxisMargins(){
    XYSeries series=new XYSeries("S1");
    series.add(100.0,1.1);
    series.add(200.0,2.2);
    XYSeriesCollection dataset=new XYSeriesCollection(series);
    dataset.setIntervalWidth(0.0);
    JFreeChart chart=ChartFactory.createScatterPlot("Title","X","Y",dataset);
    ValueAxis domainAxis=((XYPlot)chart.getPlot()).getDomainAxis();
    Range r=domainAxis.getRange();
    assertEquals(110.0,r.getLength(),EPSILON);
    domainAxis.setLowerMargin(0.10);
    domainAxis.setUpperMargin(0.10);
    r=domainAxis.getRange();
    assertEquals(120.0,r.getLength(),EPSILON);
  }
  /** 
 * A test for bug 3555275 (where the fixed axis space is calculated  incorrectly).
 */
  @Test public void test3555275(){
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    JFreeChart chart=ChartFactory.createLineChart("Title","X","Y",dataset,PlotOrientation.VERTICAL,true,false,false);
    CategoryPlot plot=(CategoryPlot)chart.getPlot();
    plot.setInsets(RectangleInsets.ZERO_INSETS);
    plot.setAxisOffset(RectangleInsets.ZERO_INSETS);
    ValueAxis yAxis=plot.getRangeAxis();
    yAxis.setFixedDimension(100.0);
    BufferedImage image=new BufferedImage(500,300,BufferedImage.TYPE_INT_RGB);
    Graphics2D g2=image.createGraphics();
    ChartRenderingInfo info=new ChartRenderingInfo();
    chart.draw(g2,new Rectangle2D.Double(0,0,500,300),info);
    g2.dispose();
    Rectangle2D rect=info.getPlotInfo().getDataArea();
    double x=rect.getMinX();
    assertEquals(100.0,x,1.0);
  }
}
