/** 
 * Tests for the  {@link DomainOrder} class.
 */
public class DomainOrderTest {
  /** 
 * Some checks for the equals() method.
 */
  @Test public void testEquals(){
    assertEquals(DomainOrder.NONE,DomainOrder.NONE);
    assertEquals(DomainOrder.ASCENDING,DomainOrder.ASCENDING);
    assertEquals(DomainOrder.DESCENDING,DomainOrder.DESCENDING);
    assertFalse(DomainOrder.NONE.equals(DomainOrder.ASCENDING));
    assertFalse(DomainOrder.NONE.equals(DomainOrder.DESCENDING));
    assertFalse(DomainOrder.NONE.equals(null));
    assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.NONE));
    assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.DESCENDING));
    assertFalse(DomainOrder.ASCENDING.equals(null));
    assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.NONE));
    assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.ASCENDING));
    assertFalse(DomainOrder.DESCENDING.equals(null));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    DomainOrder d1=DomainOrder.ASCENDING;
    DomainOrder d2=DomainOrder.ASCENDING;
    assertTrue(d1.equals(d2));
    int h1=d1.hashCode();
    int h2=d2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    DomainOrder d1=DomainOrder.ASCENDING;
    DomainOrder d2=(DomainOrder)TestUtils.serialised(d1);
    assertSame(d1,d2);
  }
}
