/** 
 * Some tests for the  {@link XYBoxAnnotation} class.
 */
public class XYBoxAnnotationTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    XYBoxAnnotation a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    assertTrue(a1.equals(a2));
    assertTrue(a2.equals(a1));
    a1=new XYBoxAnnotation(2.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYBoxAnnotation(2.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    assertTrue(a1.equals(a2));
    a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),Color.RED,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),Color.RED,Color.BLUE);
    assertTrue(a1.equals(a2));
    GradientPaint gp1a=new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.RED);
    GradientPaint gp1b=new GradientPaint(1.0f,2.0f,Color.BLUE,3.0f,4.0f,Color.RED);
    GradientPaint gp2a=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.WHITE);
    GradientPaint gp2b=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.WHITE);
    a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1a,Color.BLUE);
    assertFalse(a1.equals(a2));
    a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1b,Color.BLUE);
    assertTrue(a1.equals(a2));
    a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1a,gp2a);
    assertFalse(a1.equals(a2));
    a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1b,gp2b);
    assertTrue(a1.equals(a2));
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashCode(){
    XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    XYBoxAnnotation a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    assertTrue(a1.equals(a2));
    int h1=a1.hashCode();
    int h2=a2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning() throws CloneNotSupportedException {
    XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    XYBoxAnnotation a2=(XYBoxAnnotation)a1.clone();
    assertTrue(a1 != a2);
    assertTrue(a1.getClass() == a2.getClass());
    assertTrue(a1.equals(a2));
  }
  /** 
 * Checks that this class implements PublicCloneable.
 */
  @Test public void testPublicCloneable(){
    XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    assertTrue(a1 instanceof PublicCloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE);
    XYBoxAnnotation a2=(XYBoxAnnotation)TestUtils.serialised(a1);
    assertEquals(a1,a2);
  }
  /** 
 * Draws the chart with a  {@code null} info object to make sure thatno exceptions are thrown.
 */
  @Test public void testDrawWithNullInfo(){
    try {
      DefaultTableXYDataset dataset=new DefaultTableXYDataset();
      XYSeries s1=new XYSeries("Series 1",true,false);
      s1.add(5.0,5.0);
      s1.add(10.0,15.5);
      s1.add(15.0,9.5);
      s1.add(20.0,7.5);
      dataset.addSeries(s1);
      XYSeries s2=new XYSeries("Series 2",true,false);
      s2.add(5.0,5.0);
      s2.add(10.0,15.5);
      s2.add(15.0,9.5);
      s2.add(20.0,3.5);
      dataset.addSeries(s2);
      XYPlot plot=new XYPlot(dataset,new NumberAxis("X"),new NumberAxis("Y"),new XYLineAndShapeRenderer());
      plot.addAnnotation(new XYBoxAnnotation(10.0,12.0,3.0,4.0,new BasicStroke(1.2f),Color.RED,Color.BLUE));
      JFreeChart chart=new JFreeChart(plot);
      chart.createBufferedImage(300,200,null);
    }
 catch (    NullPointerException e) {
      fail("No exception should be triggered.");
    }
  }
}
