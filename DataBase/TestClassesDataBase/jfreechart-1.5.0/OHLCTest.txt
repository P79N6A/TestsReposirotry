/** 
 * Tests for the  {@link OHLC} class.
 */
public class OHLCTest {
  /** 
 * Confirm that the equals method can distinguish all the required fields.
 */
  @Test public void testEquals(){
    OHLC i1=new OHLC(2.0,4.0,1.0,3.0);
    OHLC i2=new OHLC(2.0,4.0,1.0,3.0);
    assertEquals(i1,i2);
    i1=new OHLC(2.2,4.0,1.0,3.0);
    assertFalse(i1.equals(i2));
    i2=new OHLC(2.2,4.0,1.0,3.0);
    assertTrue(i1.equals(i2));
    i1=new OHLC(2.2,4.4,1.0,3.0);
    assertFalse(i1.equals(i2));
    i2=new OHLC(2.2,4.4,1.0,3.0);
    assertTrue(i1.equals(i2));
    i1=new OHLC(2.2,4.4,1.1,3.0);
    assertFalse(i1.equals(i2));
    i2=new OHLC(2.2,4.4,1.1,3.0);
    assertTrue(i1.equals(i2));
    i1=new OHLC(2.2,4.4,1.1,3.3);
    assertFalse(i1.equals(i2));
    i2=new OHLC(2.2,4.4,1.1,3.3);
    assertTrue(i1.equals(i2));
  }
  /** 
 * This class is immutable.
 */
  @Test public void testCloning(){
    OHLC i1=new OHLC(2.0,4.0,1.0,3.0);
    assertFalse(i1 instanceof Cloneable);
  }
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    OHLC i1=new OHLC(2.0,4.0,1.0,3.0);
    OHLC i2=(OHLC)TestUtils.serialised(i1);
    assertEquals(i1,i2);
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    OHLC i1=new OHLC(2.0,4.0,1.0,3.0);
    OHLC i2=new OHLC(2.0,4.0,1.0,3.0);
    assertTrue(i1.equals(i2));
    int h1=i1.hashCode();
    int h2=i2.hashCode();
    assertEquals(h1,h2);
  }
}
