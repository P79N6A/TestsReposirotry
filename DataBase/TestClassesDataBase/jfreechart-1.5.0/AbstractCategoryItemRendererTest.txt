/** 
 * Tests for the  {@link AbstractCategoryItemRenderer} class.
 */
public class AbstractCategoryItemRendererTest {
  /** 
 * Checks that all fields are distinguished.
 */
  @Test public void testEquals(){
    BarRenderer r1=new BarRenderer();
    BarRenderer r2=new BarRenderer();
    assertEquals(r1,r2);
    r1.setSeriesToolTipGenerator(1,new StandardCategoryToolTipGenerator());
    assertFalse(r1.equals(r2));
    r2.setSeriesToolTipGenerator(1,new StandardCategoryToolTipGenerator());
    assertTrue(r1.equals(r2));
    r1.setDefaultToolTipGenerator(new StandardCategoryToolTipGenerator("{2}",NumberFormat.getInstance()));
    assertFalse(r1.equals(r2));
    r2.setDefaultToolTipGenerator(new StandardCategoryToolTipGenerator("{2}",NumberFormat.getInstance()));
    assertTrue(r1.equals(r2));
    r1.setSeriesItemLabelGenerator(1,new StandardCategoryItemLabelGenerator());
    assertFalse(r1.equals(r2));
    r2.setSeriesItemLabelGenerator(1,new StandardCategoryItemLabelGenerator());
    assertTrue(r1.equals(r2));
    r1.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}",NumberFormat.getInstance()));
    assertFalse(r1.equals(r2));
    r2.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}",NumberFormat.getInstance()));
    assertTrue(r1.equals(r2));
    r1.setSeriesItemURLGenerator(1,new StandardCategoryURLGenerator());
    assertFalse(r1.equals(r2));
    r2.setSeriesItemURLGenerator(1,new StandardCategoryURLGenerator());
    assertTrue(r1.equals(r2));
    r1.setDefaultItemURLGenerator(new StandardCategoryURLGenerator("abc.html"));
    assertFalse(r1.equals(r2));
    r2.setDefaultItemURLGenerator(new StandardCategoryURLGenerator("abc.html"));
    assertTrue(r1.equals(r2));
    r1.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator("XYZ"));
    assertFalse(r1.equals(r2));
    r2.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator("XYZ"));
    assertTrue(r1.equals(r2));
    r1.setLegendItemToolTipGenerator(new StandardCategorySeriesLabelGenerator("ToolTip"));
    assertFalse(r1.equals(r2));
    r2.setLegendItemToolTipGenerator(new StandardCategorySeriesLabelGenerator("ToolTip"));
    assertTrue(r1.equals(r2));
    r1.setLegendItemURLGenerator(new StandardCategorySeriesLabelGenerator("URL"));
    assertFalse(r1.equals(r2));
    r2.setLegendItemURLGenerator(new StandardCategorySeriesLabelGenerator("URL"));
    assertTrue(r1.equals(r2));
  }
  @Test public void testEquals_ObjectList(){
    BarRenderer r1=new BarRenderer();
    r1.setSeriesItemLabelGenerator(0,new StandardCategoryItemLabelGenerator());
    BarRenderer r2=new BarRenderer();
    r2.setSeriesItemLabelGenerator(0,new StandardCategoryItemLabelGenerator());
    assertEquals(r1,r2);
    r2.setSeriesItemLabelGenerator(1,new StandardCategoryItemLabelGenerator("X",new DecimalFormat("0.0")));
    assertNotEquals(r1,r2);
  }
  @Test public void testEquals_ObjectList2(){
    BarRenderer r1=new BarRenderer();
    r1.setSeriesToolTipGenerator(0,new StandardCategoryToolTipGenerator());
    BarRenderer r2=new BarRenderer();
    r2.setSeriesToolTipGenerator(0,new StandardCategoryToolTipGenerator());
    assertEquals(r1,r2);
    r2.setSeriesToolTipGenerator(1,new StandardCategoryToolTipGenerator("X",new DecimalFormat("0.0")));
    assertNotEquals(r1,r2);
  }
  @Test public void testEquals_ObjectList3(){
    BarRenderer r1=new BarRenderer();
    r1.setSeriesItemURLGenerator(0,new StandardCategoryURLGenerator());
    BarRenderer r2=new BarRenderer();
    r2.setSeriesItemURLGenerator(0,new StandardCategoryURLGenerator());
    assertEquals(r1,r2);
    r2.setSeriesItemURLGenerator(1,new StandardCategoryURLGenerator());
    assertNotEquals(r1,r2);
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning1() throws CloneNotSupportedException {
    AbstractCategoryItemRenderer r1=new BarRenderer();
    AbstractCategoryItemRenderer r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    r1=new BarRenderer();
    r1.setSeriesItemLabelGenerator(0,new StandardCategoryItemLabelGenerator());
    r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    r1=new BarRenderer();
    r1.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
    r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Confirm that cloning works.
 */
  @Test public void testCloning2() throws CloneNotSupportedException {
    BarRenderer r1=new BarRenderer();
    r1.setDefaultItemLabelGenerator(new IntervalCategoryItemLabelGenerator());
    BarRenderer r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    r1=new BarRenderer();
    r1.setSeriesItemLabelGenerator(0,new IntervalCategoryItemLabelGenerator());
    r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    r1=new BarRenderer();
    r1.setDefaultItemLabelGenerator(new IntervalCategoryItemLabelGenerator());
    r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
  }
  /** 
 * Check that the legendItemLabelGenerator is cloned.
 */
  @Test public void testCloning_LegendItemLabelGenerator() throws CloneNotSupportedException {
    StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator("Series {0}");
    BarRenderer r1=new BarRenderer();
    r1.setLegendItemLabelGenerator(generator);
    BarRenderer r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    assertTrue(r1.getLegendItemLabelGenerator() != r2.getLegendItemLabelGenerator());
  }
  /** 
 * Check that the legendItemToolTipGenerator is cloned.
 */
  @Test public void testCloning_LegendItemToolTipGenerator() throws CloneNotSupportedException {
    StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator("Series {0}");
    BarRenderer r1=new BarRenderer();
    r1.setLegendItemToolTipGenerator(generator);
    BarRenderer r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    assertTrue(r1.getLegendItemToolTipGenerator() != r2.getLegendItemToolTipGenerator());
  }
  /** 
 * Check that the legendItemURLGenerator is cloned.
 */
  @Test public void testCloning_LegendItemURLGenerator() throws CloneNotSupportedException {
    StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator("Series {0}");
    BarRenderer r1=new BarRenderer();
    r1.setLegendItemURLGenerator(generator);
    BarRenderer r2=(BarRenderer)r1.clone();
    assertTrue(r1 != r2);
    assertTrue(r1.getClass() == r2.getClass());
    assertTrue(r1.equals(r2));
    assertTrue(r1.getLegendItemURLGenerator() != r2.getLegendItemURLGenerator());
  }
  /** 
 * Some checks for the findRangeBounds() method.
 */
  @Test public void testFindRangeBounds(){
    AbstractCategoryItemRenderer r=new LineAndShapeRenderer();
    assertNull(r.findRangeBounds(null));
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    assertNull(r.findRangeBounds(dataset));
    dataset.addValue(1.0,"R1","C1");
    assertEquals(new Range(1.0,1.0),r.findRangeBounds(dataset));
    dataset.addValue(-2.0,"R1","C2");
    assertEquals(new Range(-2.0,1.0),r.findRangeBounds(dataset));
    dataset.addValue(null,"R1","C3");
    assertEquals(new Range(-2.0,1.0),r.findRangeBounds(dataset));
  }
  /** 
 * A test that reproduces the problem reported in bug 2947660.
 */
  @Test public void test2947660(){
    AbstractCategoryItemRenderer r=new LineAndShapeRenderer();
    assertNotNull(r.getLegendItems());
    assertEquals(0,r.getLegendItems().getItemCount());
    DefaultCategoryDataset dataset=new DefaultCategoryDataset();
    CategoryPlot plot=new CategoryPlot();
    plot.setDataset(dataset);
    plot.setRenderer(r);
    assertEquals(0,r.getLegendItems().getItemCount());
    dataset.addValue(1.0,"S1","C1");
    LegendItemCollection lic=r.getLegendItems();
    assertEquals(1,lic.getItemCount());
    assertEquals("S1",lic.get(0).getLabel());
  }
}
