/** 
 * Tests for the  {@link FixedMillisecond} class.
 */
public class FixedMillisecondTest {
  /** 
 * Serialize an instance, restore it, and check for equality.
 */
  @Test public void testSerialization(){
    FixedMillisecond m1=new FixedMillisecond();
    FixedMillisecond m2=(FixedMillisecond)TestUtils.serialised(m1);
    assertEquals(m1,m2);
  }
  /** 
 * Two objects that are equal are required to return the same hashCode.
 */
  @Test public void testHashcode(){
    FixedMillisecond m1=new FixedMillisecond(500000L);
    FixedMillisecond m2=new FixedMillisecond(500000L);
    assertTrue(m1.equals(m2));
    int h1=m1.hashCode();
    int h2=m2.hashCode();
    assertEquals(h1,h2);
  }
  /** 
 * The  {@link FixedMillisecond} class is immutable, so should not be{@link Cloneable}.
 */
  @Test public void testNotCloneable(){
    FixedMillisecond m=new FixedMillisecond(500000L);
    assertFalse(m instanceof Cloneable);
  }
  /** 
 * A check for immutability.
 */
  @Test public void testImmutability(){
    Date d=new Date(20L);
    FixedMillisecond fm=new FixedMillisecond(d);
    d.setTime(22L);
    assertEquals(20L,fm.getFirstMillisecond());
  }
}
