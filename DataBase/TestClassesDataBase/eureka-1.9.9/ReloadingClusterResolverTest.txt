/** 
 * @author Tomasz Bak
 */
public class ReloadingClusterResolverTest {
  private final InjectableFactory factory=new InjectableFactory();
  private ReloadingClusterResolver<AwsEndpoint> resolver;
  @Test(timeout=30000) public void testDataAreReloadedPeriodically() throws Exception {
    List<AwsEndpoint> firstEndpointList=SampleCluster.UsEast1a.build();
    factory.setEndpoints(firstEndpointList);
    resolver=new ReloadingClusterResolver<>(factory,1);
    assertThat(resolver.getClusterEndpoints(),is(equalTo(firstEndpointList)));
    List<AwsEndpoint> secondEndpointList=SampleCluster.UsEast1b.build();
    factory.setEndpoints(secondEndpointList);
    assertThat(awaitUpdate(resolver,secondEndpointList),is(true));
  }
  @Test(timeout=30000) public void testIdenticalListsDoNotCauseReload() throws Exception {
    List<AwsEndpoint> firstEndpointList=SampleCluster.UsEast1a.build();
    factory.setEndpoints(firstEndpointList);
    resolver=new ReloadingClusterResolver(factory,1);
    assertThat(resolver.getClusterEndpoints(),is(equalTo(firstEndpointList)));
    List<AwsEndpoint> snapshot=resolver.getClusterEndpoints();
    factory.setEndpoints(ResolverUtils.randomize(firstEndpointList));
    Thread.sleep(5);
    assertThat(resolver.getClusterEndpoints(),is(equalTo(snapshot)));
    List<AwsEndpoint> secondEndpointList=SampleCluster.UsEast1b.build();
    factory.setEndpoints(secondEndpointList);
    assertThat(awaitUpdate(resolver,secondEndpointList),is(true));
  }
  private static boolean awaitUpdate(  ReloadingClusterResolver<AwsEndpoint> resolver,  List<AwsEndpoint> expected) throws Exception {
    long deadline=System.currentTimeMillis() + 5 * 1000;
    do {
      List<AwsEndpoint> current=resolver.getClusterEndpoints();
      if (ResolverUtils.identical(current,expected)) {
        return true;
      }
      Thread.sleep(1);
    }
 while (System.currentTimeMillis() < deadline);
    throw new TimeoutException("Endpoint list not reloaded on time");
  }
static class InjectableFactory implements ClusterResolverFactory<AwsEndpoint> {
    private final AtomicReference<List<AwsEndpoint>> currentEndpointsRef=new AtomicReference<>();
    @Override public ClusterResolver<AwsEndpoint> createClusterResolver(){
      return new StaticClusterResolver<>("regionA",currentEndpointsRef.get());
    }
    void setEndpoints(    List<AwsEndpoint> endpoints){
      currentEndpointsRef.set(endpoints);
    }
  }
}
