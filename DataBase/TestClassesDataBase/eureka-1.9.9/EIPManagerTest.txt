/** 
 * @author Joseph Witthuhn
 */
public class EIPManagerTest {
  private EurekaClientConfig config=mock(EurekaClientConfig.class);
  private EIPManager eipManager;
  @Before public void setUp(){
    when(config.shouldUseDnsForFetchingServiceUrls()).thenReturn(Boolean.FALSE);
    eipManager=new EIPManager(null,config,null,null);
  }
  @Test public void shouldFilterNonElasticNames(){
    when(config.getRegion()).thenReturn("us-east-1");
    List<String> hosts=Lists.newArrayList("example.com","ec2-1-2-3-4.compute.amazonaws.com","5.6.7.8","ec2-101-202-33-44.compute.amazonaws.com");
    when(config.getEurekaServerServiceUrls(any(String.class))).thenReturn(hosts);
    Collection<String> returnValue=eipManager.getCandidateEIPs("i-123","us-east-1d");
    assertEquals(2,returnValue.size());
    assertTrue(returnValue.contains("1.2.3.4"));
    assertTrue(returnValue.contains("101.202.33.44"));
  }
  @Test public void shouldFilterNonElasticNamesInOtherRegion(){
    when(config.getRegion()).thenReturn("eu-west-1");
    List<String> hosts=Lists.newArrayList("example.com","ec2-1-2-3-4.eu-west-1.compute.amazonaws.com","5.6.7.8","ec2-101-202-33-44.eu-west-1.compute.amazonaws.com");
    when(config.getEurekaServerServiceUrls(any(String.class))).thenReturn(hosts);
    Collection<String> returnValue=eipManager.getCandidateEIPs("i-123","eu-west-1a");
    assertEquals(2,returnValue.size());
    assertTrue(returnValue.contains("1.2.3.4"));
    assertTrue(returnValue.contains("101.202.33.44"));
  }
  @Test(expected=RuntimeException.class) public void shouldThrowExceptionWhenNoElasticNames(){
    when(config.getRegion()).thenReturn("eu-west-1");
    List<String> hosts=Lists.newArrayList("example.com","5.6.7.8");
    when(config.getEurekaServerServiceUrls(any(String.class))).thenReturn(hosts);
    eipManager.getCandidateEIPs("i-123","eu-west-1a");
  }
}
