/** 
 * @author Tomasz Bak
 */
public class PeerEurekaNodesTest {
  private static final String PEER_EUREKA_URL_A="http://a.eureka.test";
  private static final String PEER_EUREKA_URL_B="http://b.eureka.test";
  private static final String PEER_EUREKA_URL_C="http://c.eureka.test";
  private final PeerAwareInstanceRegistry registry=mock(PeerAwareInstanceRegistry.class);
  private final TestablePeerEurekaNodes peerEurekaNodes=new TestablePeerEurekaNodes(registry,ClusterSampleData.newEurekaServerConfig());
  @Test public void testInitialStartupShutdown() throws Exception {
    peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A);
    peerEurekaNodes.start();
    PeerEurekaNode peerNode=getPeerNode(PEER_EUREKA_URL_A);
    assertThat(peerNode,is(notNullValue()));
    peerEurekaNodes.shutdown();
    verify(peerNode,times(1)).shutDown();
  }
  @Test public void testReloadWithNoPeerChange() throws Exception {
    peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A);
    peerEurekaNodes.start();
    PeerEurekaNode peerNode=getPeerNode(PEER_EUREKA_URL_A);
    assertThat(peerEurekaNodes.awaitNextReload(60,TimeUnit.SECONDS),is(true));
    assertThat(getPeerNode(PEER_EUREKA_URL_A),is(equalTo(peerNode)));
  }
  @Test public void testReloadWithPeerUpdates() throws Exception {
    peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A);
    peerEurekaNodes.start();
    PeerEurekaNode peerNodeA=getPeerNode(PEER_EUREKA_URL_A);
    peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A,PEER_EUREKA_URL_B);
    assertThat(peerEurekaNodes.awaitNextReload(60,TimeUnit.SECONDS),is(true));
    assertThat(getPeerNode(PEER_EUREKA_URL_A),is(notNullValue()));
    assertThat(getPeerNode(PEER_EUREKA_URL_B),is(notNullValue()));
    peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_B,PEER_EUREKA_URL_C);
    assertThat(peerEurekaNodes.awaitNextReload(60,TimeUnit.SECONDS),is(true));
    assertThat(getPeerNode(PEER_EUREKA_URL_A),is(nullValue()));
    assertThat(getPeerNode(PEER_EUREKA_URL_B),is(notNullValue()));
    assertThat(getPeerNode(PEER_EUREKA_URL_C),is(notNullValue()));
    verify(peerNodeA,times(1)).shutDown();
  }
  private PeerEurekaNode getPeerNode(  String peerEurekaUrl){
    for (    PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
      if (node.getServiceUrl().equals(peerEurekaUrl)) {
        return node;
      }
    }
    return null;
  }
static class TestablePeerEurekaNodes extends PeerEurekaNodes {
    private AtomicReference<List<String>> peerUrlsRef=new AtomicReference<>(Collections.<String>emptyList());
    private final ConcurrentHashMap<String,PeerEurekaNode> peerEurekaNodeByUrl=new ConcurrentHashMap<>();
    private final AtomicInteger reloadCounter=new AtomicInteger();
    TestablePeerEurekaNodes(    PeerAwareInstanceRegistry registry,    EurekaServerConfig serverConfig){
      super(registry,serverConfig,new DefaultEurekaClientConfig(),new DefaultServerCodecs(serverConfig),mock(ApplicationInfoManager.class));
    }
    void withPeerUrls(    String... peerUrls){
      this.peerUrlsRef.set(Arrays.asList(peerUrls));
    }
    boolean awaitNextReload(    long timeout,    TimeUnit timeUnit) throws InterruptedException {
      int lastReloadCounter=reloadCounter.get();
      long endTime=System.currentTimeMillis() + timeUnit.toMillis(timeout);
      while (endTime > System.currentTimeMillis() && lastReloadCounter == reloadCounter.get()) {
        Thread.sleep(10);
      }
      return lastReloadCounter != reloadCounter.get();
    }
    @Override protected void updatePeerEurekaNodes(    List<String> newPeerUrls){
      super.updatePeerEurekaNodes(newPeerUrls);
      reloadCounter.incrementAndGet();
    }
    @Override protected List<String> resolvePeerUrls(){
      return peerUrlsRef.get();
    }
    @Override protected PeerEurekaNode createPeerEurekaNode(    String peerEurekaNodeUrl){
      if (peerEurekaNodeByUrl.containsKey(peerEurekaNodeUrl)) {
        throw new IllegalStateException("PeerEurekaNode for URL " + peerEurekaNodeUrl + " is already created");
      }
      PeerEurekaNode peerEurekaNode=mock(PeerEurekaNode.class);
      when(peerEurekaNode.getServiceUrl()).thenReturn(peerEurekaNodeUrl);
      return peerEurekaNode;
    }
  }
}
