/** 
 */
public class DiscoveryJerseyProviderTest {
  private static final InstanceInfo INSTANCE=InstanceInfoGenerator.takeOne();
  private final DiscoveryJerseyProvider jerseyProvider=new DiscoveryJerseyProvider(CodecWrappers.getEncoder(CodecWrappers.JacksonJson.class),CodecWrappers.getDecoder(CodecWrappers.JacksonJson.class));
  @Test public void testJsonEncodingDecoding() throws Exception {
    testEncodingDecoding(MediaType.APPLICATION_JSON_TYPE);
  }
  @Test public void testXmlEncodingDecoding() throws Exception {
    testEncodingDecoding(MediaType.APPLICATION_XML_TYPE);
  }
  @Test public void testDecodingWithUtf8CharsetExplicitlySet() throws Exception {
    Map<String,String> params=new HashMap<>();
    params.put("charset","UTF-8");
    testEncodingDecoding(new MediaType("application","json",params));
  }
  private void testEncodingDecoding(  MediaType mediaType) throws IOException {
    assertThat(jerseyProvider.isWriteable(InstanceInfo.class,InstanceInfo.class,null,mediaType),is(true));
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    jerseyProvider.writeTo(INSTANCE,InstanceInfo.class,InstanceInfo.class,null,mediaType,null,out);
    assertThat(jerseyProvider.isReadable(InstanceInfo.class,InstanceInfo.class,null,mediaType),is(true));
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    InstanceInfo decodedInstance=(InstanceInfo)jerseyProvider.readFrom(InstanceInfo.class,InstanceInfo.class,null,mediaType,null,in);
    assertThat(decodedInstance,is(equalTo(INSTANCE)));
  }
  @Test public void testNonUtf8CharsetIsNotAccepted() throws Exception {
    Map<String,String> params=new HashMap<>();
    params.put("charset","ISO-8859");
    MediaType mediaTypeWithNonSupportedCharset=new MediaType("application","json",params);
    assertThat(jerseyProvider.isReadable(InstanceInfo.class,InstanceInfo.class,null,mediaTypeWithNonSupportedCharset),is(false));
  }
}
