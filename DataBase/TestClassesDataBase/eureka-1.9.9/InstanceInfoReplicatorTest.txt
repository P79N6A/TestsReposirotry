/** 
 * @author David Liu
 */
public class InstanceInfoReplicatorTest {
  private final int burstSize=2;
  private final int refreshRateSeconds=2;
  private DiscoveryClient discoveryClient;
  private InstanceInfoReplicator replicator;
  @Before public void setUp() throws Exception {
    discoveryClient=mock(DiscoveryClient.class);
    HealthCheckHandler healthCheckHandler=mock(HealthCheckHandler.class);
    when(discoveryClient.getHealthCheckHandler()).thenReturn(healthCheckHandler);
    when(healthCheckHandler.getStatus(any(InstanceInfo.InstanceStatus.class))).thenReturn(null);
    InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder().setIPAddr("10.10.101.00").setHostName("Hosttt").setAppName("EurekaTestApp-" + UUID.randomUUID()).setDataCenterInfo(new DataCenterInfo(){
      @Override public Name getName(){
        return Name.MyOwn;
      }
    }
).setLeaseInfo(LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(30).build());
    InstanceInfo instanceInfo=builder.build();
    instanceInfo.setStatus(InstanceInfo.InstanceStatus.DOWN);
    this.replicator=new InstanceInfoReplicator(discoveryClient,instanceInfo,refreshRateSeconds,burstSize);
  }
  @After public void tearDown() throws Exception {
    replicator.stop();
  }
  @Test public void testOnDemandUpdate() throws Throwable {
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(10);
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(1000 * refreshRateSeconds / 2);
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(10);
    verify(discoveryClient,times(3)).refreshInstanceInfo();
    verify(discoveryClient,times(1)).register();
  }
  @Test public void testOnDemandUpdateRateLimiting() throws Throwable {
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(10);
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(10);
    assertFalse(replicator.onDemandUpdate());
    Thread.sleep(10);
    verify(discoveryClient,times(2)).refreshInstanceInfo();
    verify(discoveryClient,times(1)).register();
  }
  @Test public void testOnDemandUpdateResetAutomaticRefresh() throws Throwable {
    replicator.start(0);
    Thread.sleep(1000 * refreshRateSeconds / 2);
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(1000 * refreshRateSeconds + 50);
    verify(discoveryClient,times(3)).refreshInstanceInfo();
    verify(discoveryClient,times(1)).register();
  }
  @Test public void testOnDemandUpdateResetAutomaticRefreshWithInitialDelay() throws Throwable {
    replicator.start(1000 * refreshRateSeconds);
    assertTrue(replicator.onDemandUpdate());
    Thread.sleep(1000 * refreshRateSeconds + 100);
    verify(discoveryClient,times(2)).refreshInstanceInfo();
    verify(discoveryClient,times(1)).register();
  }
}
