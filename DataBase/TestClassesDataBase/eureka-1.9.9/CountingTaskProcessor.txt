static class CountingTaskProcessor implements TaskProcessor<Boolean> {
  final ConcurrentMap<Thread,Integer> threadHits=new ConcurrentHashMap<>();
  volatile Semaphore completionGuard;
  @Override public ProcessingResult process(  Boolean task){
    throw new IllegalStateException("unexpected");
  }
  @Override public ProcessingResult process(  List<Boolean> tasks){
    Thread currentThread=Thread.currentThread();
    Integer current=threadHits.get(currentThread);
    if (current == null) {
      threadHits.put(currentThread,tasks.size());
    }
 else {
      threadHits.put(currentThread,tasks.size() + current);
    }
    completionGuard.release(tasks.size());
    return ProcessingResult.Success;
  }
  void resetTo(  int expectedTasks){
    completionGuard=new Semaphore(-expectedTasks + 1);
  }
  void awaitCompletion() throws InterruptedException {
    assertThat(completionGuard.tryAcquire(5,TimeUnit.SECONDS),is(true));
  }
  int lowestHit(){
    return Collections.min(threadHits.values());
  }
}
