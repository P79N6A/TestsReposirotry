public static class DiscoveryClientRuleBuilder {
  private boolean registrationEnabled;
  private boolean registryFetchEnabled;
  private Callable<Integer> portResolverCallable;
  private InstanceInfo instance;
  private SimpleEurekaHttpServer eurekaHttpServer;
  private List<String> remoteRegions;
  private String vipFetch;
  private String userName;
  private String password;
  public DiscoveryClientRuleBuilder withInstanceInfo(  InstanceInfo instance){
    this.instance=instance;
    return this;
  }
  public DiscoveryClientRuleBuilder withRegistration(  boolean enabled){
    this.registrationEnabled=enabled;
    return this;
  }
  public DiscoveryClientRuleBuilder withRegistryFetch(  boolean enabled){
    this.registryFetchEnabled=enabled;
    return this;
  }
  public DiscoveryClientRuleBuilder withPortResolver(  Callable<Integer> portResolverCallable){
    this.portResolverCallable=portResolverCallable;
    return this;
  }
  public DiscoveryClientRuleBuilder connectWith(  SimpleEurekaHttpServer eurekaHttpServer){
    this.eurekaHttpServer=eurekaHttpServer;
    return this;
  }
  public DiscoveryClientRuleBuilder withRemoteRegions(  String... remoteRegions){
    if (this.remoteRegions == null) {
      this.remoteRegions=new ArrayList<>();
    }
    Collections.addAll(this.remoteRegions,remoteRegions);
    return this;
  }
  public DiscoveryClientRuleBuilder withVipFetch(  String vipFetch){
    this.vipFetch=vipFetch;
    return this;
  }
  public DiscoveryClientRuleBuilder basicAuthentication(  String userName,  String password){
    Preconditions.checkNotNull(userName,"HTTP basic authentication user name is null");
    Preconditions.checkNotNull(password,"HTTP basic authentication password is null");
    this.userName=userName;
    this.password=password;
    return this;
  }
  public DiscoveryClientResource build(){
    return new DiscoveryClientResource(this);
  }
}
