private class AppsResourceHandler extends ServletHandler {
  @Override public void handle(  String target,  HttpServletRequest request,  HttpServletResponse response,  int dispatch) throws IOException, ServletException {
    if (simulateNotReady) {
      response.setStatus(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
    String authName=request.getHeader(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY);
    String authVersion=request.getHeader(AbstractEurekaIdentity.AUTH_VERSION_HEADER_KEY);
    String authId=request.getHeader(AbstractEurekaIdentity.AUTH_ID_HEADER_KEY);
    Assert.assertNotNull(authName);
    Assert.assertNotNull(authVersion);
    Assert.assertNotNull(authId);
    Assert.assertTrue(!authName.equals(ServerRequestAuthFilter.UNKNOWN));
    Assert.assertTrue(!authVersion.equals(ServerRequestAuthFilter.UNKNOWN));
    Assert.assertTrue(!authId.equals(ServerRequestAuthFilter.UNKNOWN));
    for (    FilterHolder filterHolder : this.getFilters()) {
      filterHolder.getFilter().doFilter(request,response,new FilterChain(){
        @Override public void doFilter(        ServletRequest request,        ServletResponse response) throws IOException, ServletException {
        }
      }
);
    }
    String pathInfo=request.getPathInfo();
    System.out.println("Eureka resource mock, received request on path: " + pathInfo + ". HTTP method: |"+ request.getMethod()+ '|');
    boolean handled=false;
    if (null != pathInfo && pathInfo.startsWith("")) {
      pathInfo=pathInfo.substring(EUREKA_API_BASE_PATH.length());
      if (pathInfo.startsWith("apps/delta")) {
        Applications apps=new Applications();
        for (        Application application : applicationDeltaMap.values()) {
          apps.addApplication(application);
        }
        apps.setAppsHashCode(apps.getReconcileHashCode());
        sendOkResponseWithContent((Request)request,response,toJson(apps));
        handled=true;
        sentDelta=true;
      }
 else       if (request.getMethod().equals("PUT") && pathInfo.startsWith("apps")) {
        InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName("TEST-APP").build();
        sendOkResponseWithContent((Request)request,response,new EurekaJsonJacksonCodec().getObjectMapper(Applications.class).writeValueAsString(instanceInfo));
        handled=true;
      }
 else       if (pathInfo.startsWith("apps")) {
        Applications apps=new Applications();
        for (        Application application : applicationMap.values()) {
          apps.addApplication(application);
        }
        apps.setAppsHashCode(apps.getReconcileHashCode());
        sendOkResponseWithContent((Request)request,response,toJson(apps));
        handled=true;
      }
    }
    if (!handled) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND,"Request path: " + pathInfo + " not supported by eureka resource mock.");
    }
  }
  private void sendOkResponseWithContent(  Request request,  HttpServletResponse response,  String content) throws IOException {
    response.setContentType("application/json; charset=UTF-8");
    response.setStatus(HttpServletResponse.SC_OK);
    response.getOutputStream().write(content.getBytes("UTF-8"));
    response.getOutputStream().flush();
    request.setHandled(true);
    System.out.println("Eureka resource mock, sent response for request path: " + request.getPathInfo() + " with content"+ content);
  }
}
