/** 
 * @author David Liu
 */
public class ApplicationsResourceTest extends AbstractTester {
  private ApplicationsResource applicationsResource;
  private Applications testApplications;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    InstanceInfoGenerator instanceInfos=InstanceInfoGenerator.newBuilder(20,6).build();
    testApplications=instanceInfos.toApplications();
    applicationsResource=new ApplicationsResource(serverContext);
    for (    Application application : testApplications.getRegisteredApplications()) {
      for (      InstanceInfo instanceInfo : application.getInstances()) {
        registry.register(instanceInfo,false);
      }
    }
  }
  @Test public void testFullAppsGetJson() throws Exception {
    Response response=applicationsResource.getContainers(Version.V2.name(),MediaType.APPLICATION_JSON,null,EurekaAccept.full.name(),null,null);
    String json=String.valueOf(response.getEntity());
    DecoderWrapper decoder=CodecWrappers.getDecoder(CodecWrappers.LegacyJacksonJson.class);
    Applications decoded=decoder.decode(json,Applications.class);
    for (    Application application : testApplications.getRegisteredApplications()) {
      Application decodedApp=decoded.getRegisteredApplications(application.getName());
      assertThat(EurekaEntityComparators.equal(application,decodedApp),is(true));
    }
  }
  @Test public void testFullAppsGetGzipJsonHeaderType() throws Exception {
    Response response=applicationsResource.getContainers(Version.V2.name(),MediaType.APPLICATION_JSON,"gzip",EurekaAccept.full.name(),null,null);
    assertThat(response.getMetadata().getFirst("Content-Encoding").toString(),is("gzip"));
    assertThat(response.getMetadata().getFirst("Content-Type").toString(),is(MediaType.APPLICATION_JSON));
  }
  @Test public void testFullAppsGetGzipXmlHeaderType() throws Exception {
    Response response=applicationsResource.getContainers(Version.V2.name(),MediaType.APPLICATION_XML,"gzip",EurekaAccept.full.name(),null,null);
    assertThat(response.getMetadata().getFirst("Content-Encoding").toString(),is("gzip"));
    assertThat(response.getMetadata().getFirst("Content-Type").toString(),is(MediaType.APPLICATION_XML));
  }
  @Test public void testMiniAppsGet() throws Exception {
    Response response=applicationsResource.getContainers(Version.V2.name(),MediaType.APPLICATION_JSON,null,EurekaAccept.compact.name(),null,null);
    String json=String.valueOf(response.getEntity());
    DecoderWrapper decoder=CodecWrappers.getDecoder(CodecWrappers.LegacyJacksonJson.class);
    Applications decoded=decoder.decode(json,Applications.class);
    for (    Application application : testApplications.getRegisteredApplications()) {
      Application decodedApp=decoded.getRegisteredApplications(application.getName());
      assertThat(EurekaEntityComparators.equal(application,decodedApp),is(false));
    }
    for (    Application application : testApplications.getRegisteredApplications()) {
      Application decodedApp=decoded.getRegisteredApplications(application.getName());
      assertThat(application.getName(),is(decodedApp.getName()));
      for (      InstanceInfo instanceInfo : application.getInstances()) {
        InstanceInfo decodedInfo=decodedApp.getByInstanceId(instanceInfo.getId());
        assertThat(EurekaEntityComparators.equalMini(instanceInfo,decodedInfo),is(true));
      }
    }
  }
}
