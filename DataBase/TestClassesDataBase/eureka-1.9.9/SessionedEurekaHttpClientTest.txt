/** 
 * @author Tomasz Bak
 */
public class SessionedEurekaHttpClientTest {
  private final EurekaHttpClient firstClient=mock(EurekaHttpClient.class);
  private final EurekaHttpClient secondClient=mock(EurekaHttpClient.class);
  private final EurekaHttpClientFactory factory=mock(EurekaHttpClientFactory.class);
  @Test public void testReconnectIsEnforcedAtConfiguredInterval() throws Exception {
    final AtomicReference<EurekaHttpClient> clientRef=new AtomicReference<>(firstClient);
    when(factory.newClient()).thenAnswer(new Answer<EurekaHttpClient>(){
      @Override public EurekaHttpClient answer(      InvocationOnMock invocation) throws Throwable {
        return clientRef.get();
      }
    }
);
    SessionedEurekaHttpClient httpClient=null;
    try {
      httpClient=new SessionedEurekaHttpClient("test",factory,1);
      httpClient.getApplications();
      verify(firstClient,times(1)).getApplications();
      clientRef.set(secondClient);
      Thread.sleep(2);
      httpClient.getApplications();
      verify(secondClient,times(1)).getApplications();
    }
  finally {
      if (httpClient != null) {
        httpClient.shutdown();
      }
    }
  }
}
