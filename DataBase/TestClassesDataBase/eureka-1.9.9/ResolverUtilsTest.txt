/** 
 * @author Tomasz Bak
 */
public class ResolverUtilsTest {
  @Test public void testSplitByZone() throws Exception {
    List<AwsEndpoint> endpoints=SampleCluster.merge(SampleCluster.UsEast1a,SampleCluster.UsEast1b,SampleCluster.UsEast1c);
    List<AwsEndpoint>[] parts=ResolverUtils.splitByZone(endpoints,"us-east-1b");
    List<AwsEndpoint> myZoneServers=parts[0];
    List<AwsEndpoint> remainingServers=parts[1];
    assertThat(myZoneServers,is(equalTo(SampleCluster.UsEast1b.build())));
    assertThat(remainingServers,is(equalTo(SampleCluster.merge(SampleCluster.UsEast1a,SampleCluster.UsEast1c))));
  }
  @Test public void testExtractZoneFromHostName() throws Exception {
    assertThat(ResolverUtils.extractZoneFromHostName("us-east-1c.myservice.net"),is(equalTo("us-east-1c")));
    assertThat(ResolverUtils.extractZoneFromHostName("txt.us-east-1c.myservice.net"),is(equalTo("us-east-1c")));
  }
  @Test public void testIdentical() throws Exception {
    List<AwsEndpoint> firstList=SampleCluster.UsEast1a.builder().withServerPool(10).build();
    List<AwsEndpoint> secondList=ResolverUtils.randomize(firstList);
    assertThat(ResolverUtils.identical(firstList,secondList),is(true));
    secondList.set(0,SampleCluster.UsEast1b.build().get(0));
    assertThat(ResolverUtils.identical(firstList,secondList),is(false));
  }
}
