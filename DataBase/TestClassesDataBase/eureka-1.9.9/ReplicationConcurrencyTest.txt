/** 
 * A pseudo mock test to test concurrent scenarios to do with registration and replication of cluster setups with 1+ eureka servers
 * @author David Liu
 */
public class ReplicationConcurrencyTest {
  private String id;
  private String appName;
  private InstanceInfo instance1;
  private InstanceInfo instance2;
  private MockServer server1;
  private MockServer server2;
  private InstanceInfo server1Sees;
  private InstanceInfo server2Sees;
  @Before public void setUp() throws Exception {
    InstanceInfo seed=InstanceInfoGenerator.takeOne();
    id=seed.getId();
    appName=seed.getAppName();
    instance1=InstanceInfo.Builder.newBuilder().setInstanceId(id).setAppName(appName).setHostName(seed.getHostName()).setIPAddr(seed.getIPAddr()).setDataCenterInfo(seed.getDataCenterInfo()).setStatus(InstanceInfo.InstanceStatus.STARTING).setLastDirtyTimestamp(11111l).build();
    instance2=new InstanceInfo.Builder(seed).setInstanceId(id).setAppName(appName).setHostName(seed.getHostName()).setIPAddr(seed.getIPAddr()).setDataCenterInfo(seed.getDataCenterInfo()).setStatus(InstanceInfo.InstanceStatus.UP).setLastDirtyTimestamp(22222l).build();
    assertThat(instance1.getStatus(),not(equalTo(instance2.getStatus())));
    PeerEurekaNodes server1Peers=Mockito.mock(PeerEurekaNodes.class);
    Mockito.when(server1Peers.getPeerEurekaNodes()).thenReturn(Collections.<PeerEurekaNode>emptyList());
    server1=new MockServer(appName,server1Peers);
    PeerEurekaNodes server2Peers=Mockito.mock(PeerEurekaNodes.class);
    Mockito.when(server2Peers.getPeerEurekaNodes()).thenReturn(Collections.<PeerEurekaNode>emptyList());
    server2=new MockServer(appName,server2Peers);
    server1.applicationResource.addInstance(instance1,"false");
    server1Sees=server1.registry.getInstanceByAppAndId(appName,id);
    assertThat(server1Sees,equalTo(instance1));
    server2.applicationResource.addInstance(instance2,"false");
    server2Sees=server2.registry.getInstanceByAppAndId(appName,id);
    assertThat(server2Sees,equalTo(instance2));
    assertThat(server2Sees.getLastDirtyTimestamp() > server1Sees.getLastDirtyTimestamp(),is(true));
  }
  /** 
 * this test tests a scenario where multiple registration and update requests for a single client is sent to different eureka servers before replication can occur between them
 */
  @Test public void testReplicationWithRegistrationAndUpdateOnDifferentServers() throws Exception {
    server2.applicationResource.addInstance(instance1,"true");
    InstanceInfo newServer2Sees=server2.registry.getInstanceByAppAndId(appName,id);
    assertThat(newServer2Sees.getStatus(),equalTo(instance2.getStatus()));
    server1.applicationResource.addInstance(newServer2Sees,"true");
    InstanceInfo newServer1Sees=server1.registry.getInstanceByAppAndId(appName,id);
    assertThat(newServer1Sees.getStatus(),equalTo(instance2.getStatus()));
  }
private static class MockServer {
    public final ApplicationResource applicationResource;
    public final PeerReplicationResource replicationResource;
    public final PeerAwareInstanceRegistry registry;
    public MockServer(    String appName,    PeerEurekaNodes peerEurekaNodes) throws Exception {
      ApplicationInfoManager infoManager=new ApplicationInfoManager(new MyDataCenterInstanceConfig());
      DefaultEurekaServerConfig serverConfig=Mockito.spy(new DefaultEurekaServerConfig());
      DefaultEurekaClientConfig clientConfig=new DefaultEurekaClientConfig();
      ServerCodecs serverCodecs=new DefaultServerCodecs(serverConfig);
      EurekaClient eurekaClient=Mockito.mock(EurekaClient.class);
      Mockito.doReturn("true").when(serverConfig).getExperimental("registry.registration.ignoreIfDirtyTimestampIsOlder");
      this.registry=new PeerAwareInstanceRegistryImpl(serverConfig,clientConfig,serverCodecs,eurekaClient);
      this.registry.init(peerEurekaNodes);
      this.applicationResource=new ApplicationResource(appName,serverConfig,registry);
      EurekaServerContext serverContext=Mockito.mock(EurekaServerContext.class);
      Mockito.when(serverContext.getServerConfig()).thenReturn(serverConfig);
      Mockito.when(serverContext.getRegistry()).thenReturn(registry);
      this.replicationResource=new PeerReplicationResource(serverContext);
    }
  }
}
