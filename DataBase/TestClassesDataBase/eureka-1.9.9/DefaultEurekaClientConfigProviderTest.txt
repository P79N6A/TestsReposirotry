/** 
 * @author Tomasz Bak
 */
public class DefaultEurekaClientConfigProviderTest {
  private static final String SERVICE_URI="http://my.eureka.server:8080/";
  @Test public void testNameSpaceInjection() throws Exception {
    ConfigurationManager.getConfigInstance().setProperty("testnamespace.serviceUrl.default",SERVICE_URI);
    Injector injector=LifecycleInjector.builder().withBootstrapModule(new BootstrapModule(){
      @Override public void configure(      BootstrapBinder binder){
        binder.bind(String.class).annotatedWith(EurekaNamespace.class).toInstance("testnamespace.");
      }
    }
).build().createInjector();
    DefaultEurekaClientConfig clientConfig=injector.getInstance(DefaultEurekaClientConfig.class);
    List<String> serviceUrls=clientConfig.getEurekaServerServiceUrls("default");
    assertThat(serviceUrls.get(0),is(equalTo(SERVICE_URI)));
  }
  @Test public void testURLSeparator() throws Exception {
    testURLSeparator(",");
    testURLSeparator(" ,");
    testURLSeparator(", ");
    testURLSeparator(" , ");
    testURLSeparator(" ,  ");
  }
  private void testURLSeparator(  String separator){
    ConfigurationManager.getConfigInstance().setProperty(CommonConstants.DEFAULT_CONFIG_NAMESPACE + ".serviceUrl.default",SERVICE_URI + separator + SERVICE_URI);
    DefaultEurekaClientConfig clientConfig=new DefaultEurekaClientConfig();
    List<String> serviceUrls=clientConfig.getEurekaServerServiceUrls("default");
    assertThat(serviceUrls.get(0),is(equalTo(SERVICE_URI)));
    assertThat(serviceUrls.get(1),is(equalTo(SERVICE_URI)));
  }
}
