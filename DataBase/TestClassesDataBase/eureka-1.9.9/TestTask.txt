private class TestTask implements Runnable {
  private final int runTimeSecs;
  private final boolean blockInterrupt;
  public TestTask(  int runTimeSecs,  boolean blockInterrupt){
    this.runTimeSecs=runTimeSecs;
    this.blockInterrupt=blockInterrupt;
  }
  public void run(){
    testTaskStartCounter.incrementAndGet();
    try {
      testTaskCounter.incrementAndGet();
synchronized (maxConcurrentTestTasks) {
        int activeCount=executor.getActiveCount();
        if (maxConcurrentTestTasks.get() < activeCount) {
          maxConcurrentTestTasks.set(activeCount);
        }
      }
      long endTime=System.currentTimeMillis() + runTimeSecs * 1000;
      while (endTime >= System.currentTimeMillis()) {
        try {
          Thread.sleep(runTimeSecs * 1000);
        }
 catch (        InterruptedException e) {
          if (!blockInterrupt) {
            throw e;
          }
        }
      }
      testTaskCounter.decrementAndGet();
      testTaskSuccessfulCounter.incrementAndGet();
    }
 catch (    InterruptedException e) {
      testTaskInterruptedCounter.incrementAndGet();
    }
  }
}
