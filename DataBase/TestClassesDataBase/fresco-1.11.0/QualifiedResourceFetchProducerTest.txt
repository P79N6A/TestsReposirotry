/** 
 * Basic tests for QualifiedResourceFetchProducer
 */
@RunWith(RobolectricTestRunner.class) @Config(manifest=Config.NONE) public class QualifiedResourceFetchProducerTest {
  private static final String PRODUCER_NAME=QualifiedResourceFetchProducer.PRODUCER_NAME;
  private static final String PACKAGE_NAME="com.myapp.myplugin";
  private static final int RESOURCE_ID=42;
  private static final String REQUEST_ID="requestId";
  private static final String CALLER_CONTEXT="callerContext";
  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public ContentResolver mContentResolver;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener mProducerListener;
  @Mock public Exception mException;
  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private Uri mContentUri;
  private QualifiedResourceFetchProducer mQualifiedResourceFetchProducer;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    mExecutor=new TestExecutorService(new FakeClock());
    mQualifiedResourceFetchProducer=new QualifiedResourceFetchProducer(mExecutor,mPooledByteBufferFactory,mContentResolver);
    mContentUri=UriUtil.getUriForQualifiedResource(PACKAGE_NAME,RESOURCE_ID);
    mProducerContext=new SettableProducerContext(mImageRequest,REQUEST_ID,mProducerListener,CALLER_CONTEXT,ImageRequest.RequestLevel.FULL_FETCH,false,true,Priority.MEDIUM);
    when(mImageRequest.getSourceUri()).thenReturn(mContentUri);
  }
  @Test public void testQualifiedResourceUri() throws Exception {
    PooledByteBuffer pooledByteBuffer=mock(PooledByteBuffer.class);
    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenReturn(pooledByteBuffer);
    when(mContentResolver.openInputStream(mContentUri)).thenReturn(mock(InputStream.class));
    mQualifiedResourceFetchProducer.produceResults(mConsumer,mProducerContext);
    mExecutor.runUntilIdle();
    verify(mPooledByteBufferFactory,times(1)).newByteBuffer(any(InputStream.class));
    verify(mContentResolver,times(1)).openInputStream(mContentUri);
    verify(mProducerListener).onProducerStart(REQUEST_ID,PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(REQUEST_ID,PRODUCER_NAME,null);
  }
}
