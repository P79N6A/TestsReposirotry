/** 
 * Tests  {@link AnimatedDrawableBackendFrameRenderer}
 */
@RunWith(RobolectricTestRunner.class) public class AnimatedDrawableBackendFrameRendererTest {
  private AnimatedDrawableBackendFrameRenderer mAnimatedDrawableBackendFrameRenderer;
  private AnimatedDrawableBackend mAnimatedDrawableBackend;
  private BitmapFrameCache mBitmapFrameCache;
  @Before public void setup(){
    mAnimatedDrawableBackend=mock(AnimatedDrawableBackend.class);
    mBitmapFrameCache=mock(BitmapFrameCache.class);
    mAnimatedDrawableBackendFrameRenderer=new AnimatedDrawableBackendFrameRenderer(mBitmapFrameCache,mAnimatedDrawableBackend);
  }
  @Test public void testSetBounds(){
    when(mAnimatedDrawableBackend.forNewBounds(any(Rect.class))).thenReturn(mAnimatedDrawableBackend);
    Rect bounds=mock(Rect.class);
    mAnimatedDrawableBackendFrameRenderer.setBounds(bounds);
    verify(mAnimatedDrawableBackend).forNewBounds(bounds);
  }
  @Test public void testGetIntrinsicWidth(){
    when(mAnimatedDrawableBackend.getWidth()).thenReturn(123);
    assertThat(mAnimatedDrawableBackendFrameRenderer.getIntrinsicWidth()).isEqualTo(123);
    assertThat(mAnimatedDrawableBackendFrameRenderer.getIntrinsicHeight()).isNotEqualTo(123);
  }
  @Test public void testGetIntrinsicHeight(){
    when(mAnimatedDrawableBackend.getHeight()).thenReturn(1200);
    assertThat(mAnimatedDrawableBackendFrameRenderer.getIntrinsicHeight()).isEqualTo(1200);
    assertThat(mAnimatedDrawableBackendFrameRenderer.getIntrinsicWidth()).isNotEqualTo(1200);
  }
  @Test public void testRenderFrame(){
    when(mAnimatedDrawableBackend.getHeight()).thenReturn(1200);
    Bitmap bitmap=mock(Bitmap.class);
    AnimatedDrawableFrameInfo animatedDrawableFrameInfo=mock(AnimatedDrawableFrameInfo.class);
    when(mAnimatedDrawableBackend.getFrameInfo(anyInt())).thenReturn(animatedDrawableFrameInfo);
    boolean rendered=mAnimatedDrawableBackendFrameRenderer.renderFrame(0,bitmap);
    assertThat(rendered).isTrue();
  }
  @Test public void testRenderFrameUnsuccessful(){
    int frameNumber=0;
    when(mAnimatedDrawableBackend.getHeight()).thenReturn(1200);
    Bitmap bitmap=mock(Bitmap.class);
    AnimatedDrawableFrameInfo animatedDrawableFrameInfo=mock(AnimatedDrawableFrameInfo.class);
    when(mAnimatedDrawableBackend.getFrameInfo(anyInt())).thenReturn(animatedDrawableFrameInfo);
    doThrow(new IllegalStateException()).when(mAnimatedDrawableBackend).renderFrame(eq(frameNumber),any(Canvas.class));
    boolean rendered=mAnimatedDrawableBackendFrameRenderer.renderFrame(frameNumber,bitmap);
    assertThat(rendered).isFalse();
  }
}
