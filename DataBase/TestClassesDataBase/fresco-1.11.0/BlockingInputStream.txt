private class BlockingInputStream extends InputStream {
  @GuardedBy("BlockingInputStream.this") private int mBytesLeft=0;
  @GuardedBy("BlockingInputStream.this") private boolean mFinished=false;
  @GuardedBy("BlockingInputStream.this") private boolean mReaderBlocked=false;
  @Override public int read() throws IOException {
    fail();
    return 0;
  }
  @Override public synchronized int read(  byte[] buffer,  int offset,  int length) throws IOException {
    while (true) {
      if (mBytesLeft > 0) {
        final int bytesToRead=Math.min(mBytesLeft,length);
        mBytesLeft-=bytesToRead;
        return bytesToRead;
      }
 else       if (mFinished) {
        return -1;
      }
 else {
        mReaderBlocked=true;
        try {
          notify();
          wait();
        }
 catch (        InterruptedException ie) {
          throw Throwables.propagate(ie);
        }
 finally {
          mReaderBlocked=false;
        }
      }
    }
  }
  public synchronized void increaseBytesToRead(  int n){
    mBytesLeft+=n;
    notify();
  }
  public synchronized void waitUntilReadingThreadBlocked(){
    while (mBytesLeft > 0 || !mReaderBlocked) {
      try {
        wait();
      }
 catch (      InterruptedException ie) {
        throw Throwables.propagate(ie);
      }
    }
  }
  public synchronized void signalEof(){
    mFinished=true;
    notify();
  }
}
