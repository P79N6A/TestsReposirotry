@RunWith(RobolectricTestRunner.class) public class CloseableStaticBitmapTest {
  private static final int WIDTH=10;
  private static final int HEIGHT=5;
  private Bitmap mBitmap;
  private CloseableStaticBitmap mCloseableStaticBitmap;
  @Before public void setUp(){
    mBitmap=Bitmap.createBitmap(WIDTH,HEIGHT,Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser=SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap=new CloseableStaticBitmap(mBitmap,releaser,ImmutableQualityInfo.FULL_QUALITY,0,ExifInterface.ORIENTATION_NORMAL);
  }
  @Test public void testWidthAndHeight(){
    assertThat(mCloseableStaticBitmap.getWidth()).isEqualTo(WIDTH);
    assertThat(mCloseableStaticBitmap.getHeight()).isEqualTo(HEIGHT);
  }
  @Test public void testWidthAndHeightWithRotatedImage(){
    mBitmap=Bitmap.createBitmap(HEIGHT,WIDTH,Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser=SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap=new CloseableStaticBitmap(mBitmap,releaser,ImmutableQualityInfo.FULL_QUALITY,90,ExifInterface.ORIENTATION_ROTATE_90);
    assertThat(mCloseableStaticBitmap.getWidth()).isEqualTo(WIDTH);
    assertThat(mCloseableStaticBitmap.getHeight()).isEqualTo(HEIGHT);
  }
  @Test public void testWidthAndHeightWithInvertedOrientationImage(){
    mBitmap=Bitmap.createBitmap(HEIGHT,WIDTH,Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser=SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap=new CloseableStaticBitmap(mBitmap,releaser,ImmutableQualityInfo.FULL_QUALITY,0,ExifInterface.ORIENTATION_TRANSPOSE);
    assertThat(mCloseableStaticBitmap.getWidth()).isEqualTo(WIDTH);
    assertThat(mCloseableStaticBitmap.getHeight()).isEqualTo(HEIGHT);
  }
  @Test public void testClose(){
    mCloseableStaticBitmap.close();
    assertThat(mCloseableStaticBitmap.isClosed()).isTrue();
    assertThat(mBitmap.isRecycled()).isTrue();
  }
  @Test public void testConvert(){
    CloseableReference<Bitmap> ref=mCloseableStaticBitmap.convertToBitmapReference();
    assertThat(ref.get()).isSameAs(mBitmap);
    assertThat(mCloseableStaticBitmap.isClosed()).isTrue();
  }
  @Test public void testCloneUnderlyingBitmapReference(){
    CloseableReference<Bitmap> clonedBitmapReference=mCloseableStaticBitmap.cloneUnderlyingBitmapReference();
    assertThat(clonedBitmapReference).isNotNull();
    assertThat(clonedBitmapReference.get()).isEqualTo(mBitmap);
  }
  @Test public void testCloneUnderlyingBitmapReference_whenBitmapClosed_thenReturnNull(){
    mCloseableStaticBitmap.close();
    CloseableReference<Bitmap> clonedBitmapReference=mCloseableStaticBitmap.cloneUnderlyingBitmapReference();
    assertThat(clonedBitmapReference).isNull();
  }
}
