@RunWith(RobolectricTestRunner.class) public class DraweeHolderTest {
  private DraweeHolder mDraweeHolder;
  private Drawable mTopLevelDrawable;
  private DraweeHierarchy mDraweeHierarchy;
  private DraweeController mController;
  private InOrder mInOrderVerifier;
  @Before public void setUp(){
    mTopLevelDrawable=DrawableTestUtils.mockDrawable();
    mDraweeHierarchy=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    mController=DraweeMocks.mockController();
    mDraweeHolder=new DraweeHolder(mDraweeHierarchy);
    mInOrderVerifier=inOrder(mController);
  }
  @Test public void testOverrideControllerHierarchy(){
    DraweeHierarchy otherHierarchy=mock(DraweeHierarchy.class);
    mController.setHierarchy(otherHierarchy);
    assertSame(otherHierarchy,mController.getHierarchy());
    mDraweeHolder.setController(mController);
    assertSame(mController,mDraweeHolder.getController());
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    assertSame(mDraweeHierarchy,mController.getHierarchy());
  }
  @Test public void testSetControllerWithoutHierarchy(){
    mDraweeHolder.setController(mController);
    assertSame(mController,mDraweeHolder.getController());
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    assertSame(mDraweeHierarchy,mController.getHierarchy());
  }
  @Test public void testSetControllerBeforeHierarchy(){
    mDraweeHolder=new DraweeHolder(null);
    mDraweeHolder.setController(mController);
    mDraweeHolder.setHierarchy(mDraweeHierarchy);
    assertSame(mController,mDraweeHolder.getController());
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    assertSame(mDraweeHierarchy,mController.getHierarchy());
  }
  @Test public void testClearControllerKeepsHierarchy(){
    mDraweeHolder.setController(mController);
    mDraweeHolder.setController(null);
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    assertNull(mDraweeHolder.getController());
    assertNull(mController.getHierarchy());
  }
  @Test public void testNewControllerKeepsHierarchy(){
    mDraweeHolder.setController(mController);
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    DraweeController another=DraweeMocks.mockController();
    mDraweeHolder.setController(another);
    assertSame(mDraweeHierarchy,mDraweeHolder.getHierarchy());
    assertSame(another,mDraweeHolder.getController());
    assertNull(mController.getHierarchy());
    assertSame(mDraweeHierarchy,another.getHierarchy());
  }
  @Test public void testLifecycle(){
    mDraweeHolder.setController(mController);
    assertFalse(mDraweeHolder.isAttached());
    mDraweeHolder.onAttach();
    assertTrue(mDraweeHolder.isAttached());
    mDraweeHolder.onDetach();
    assertFalse(mDraweeHolder.isAttached());
    verify(mController).onAttach();
    verify(mController).onDetach();
  }
  @Test public void testSetControllerWhenAlreadyAttached(){
    mDraweeHolder.onAttach();
    mDraweeHolder.setController(mController);
    mDraweeHolder.onDetach();
    verify(mController).onAttach();
    verify(mController).onDetach();
  }
  @Test public void testSetNullController(){
    mDraweeHolder.setController(null);
    mDraweeHolder.onAttach();
    mDraweeHolder.onDetach();
    mDraweeHolder.onAttach();
  }
  @Test public void testSetNewControllerWithInvalidController(){
    final DraweeHierarchy draweeHierarchy2=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2=new DraweeHolder(draweeHierarchy2);
    mDraweeHolder.onAttach();
    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);
    mDraweeHolder.setController(null);
    verify(mController,never()).onDetach();
    assertEquals(draweeHierarchy2,mController.getHierarchy());
  }
  @Test public void testSetNewHierarchyWithInvalidController(){
    final DraweeHierarchy draweeHierarchy2=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2=new DraweeHolder(draweeHierarchy2);
    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);
    final DraweeHierarchy draweeHierarchy3=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    mDraweeHolder.setHierarchy(draweeHierarchy3);
    assertEquals(draweeHierarchy2,mController.getHierarchy());
  }
  @Test public void testOnDetachWithInvalidController(){
    final DraweeHierarchy draweeHierarchy2=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2=new DraweeHolder(draweeHierarchy2);
    mDraweeHolder.onAttach();
    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);
    mDraweeHolder.onDetach();
    verify(mController,never()).onDetach();
  }
  @Test public void testTouchEventWithInvalidController(){
    final DraweeHierarchy draweeHierarchy2=DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2=new DraweeHolder(draweeHierarchy2);
    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);
    mDraweeHolder.onTouchEvent(mock(MotionEvent.class));
    verify(mController,never()).onTouchEvent(any(MotionEvent.class));
  }
  /** 
 * There are 8 possible state transitions with two variables 1. (visible, unattached)   -> (visible, attached) 2. (visible, attached)     -> (invisible, attached) 3. (invisible, attached)   -> (invisible, unattached) 4. (invisible, unattached) -> (visible, unattached) 5. (visible, unattached)   -> (invisible, unattached) 6. (invisible, unattached) -> (invisible, attached) 7. (invisible, attached)   -> (visible, attached) 8. (visible, attached)     -> (visible, unattached)
 */
  @Test public void testVisibilityStateTransitions(){
    boolean restart=true;
    mDraweeHolder.setController(mController);
    verifyControllerLifecycleCalls(0,0);
    mDraweeHolder.onAttach();
    verifyControllerLifecycleCalls(1,0);
    mTopLevelDrawable.setVisible(false,restart);
    verifyControllerLifecycleCalls(0,1);
    mDraweeHolder.onDetach();
    verifyControllerLifecycleCalls(0,0);
    mTopLevelDrawable.setVisible(true,restart);
    verifyControllerLifecycleCalls(0,0);
    mTopLevelDrawable.setVisible(false,restart);
    verifyControllerLifecycleCalls(0,0);
    mDraweeHolder.onAttach();
    verifyControllerLifecycleCalls(0,0);
    mTopLevelDrawable.setVisible(true,restart);
    verifyControllerLifecycleCalls(1,0);
    mDraweeHolder.onDetach();
    verifyControllerLifecycleCalls(0,1);
  }
  private void verifyControllerLifecycleCalls(  int numOnAttach,  int numOnDetach){
    mInOrderVerifier.verify(mController,times(numOnAttach)).onAttach();
    mInOrderVerifier.verify(mController,times(numOnDetach)).onDetach();
  }
}
