/** 
 * A simple test pool that allocates byte arrays, and always allocates buffers of double the size requested
 */
public static class TestPool extends BasePool<byte[]> {
  public boolean mIsReusable;
  public TestPool(  int maxPoolSizeSoftCap,  int maxPoolSizeHardCap){
    this(maxPoolSizeSoftCap,maxPoolSizeHardCap,null);
  }
  public TestPool(  int maxPoolSizeSoftCap,  int maxPoolSizeHardCap,  SparseIntArray bucketSizes){
    super(mock(MemoryTrimmableRegistry.class),new PoolParams(maxPoolSizeSoftCap,maxPoolSizeHardCap,bucketSizes),mock(PoolStatsTracker.class));
    mIsReusable=true;
    initialize();
  }
  @Override protected byte[] alloc(  int bucketedSize){
    return new byte[bucketedSize];
  }
  @Override protected void free(  byte[] value){
  }
  @Override protected boolean isReusable(  byte[] value){
    return mIsReusable;
  }
  /** 
 * Allocate the smallest even number than is greater than or equal to the requested size
 * @param requestSize the logical request size
 * @return the slightly higher size
 */
  @Override protected int getBucketedSize(  int requestSize){
    if (requestSize <= 0) {
      throw new InvalidSizeException(requestSize);
    }
    return (requestSize % 2 == 0) ? requestSize : requestSize + 1;
  }
  @Override protected int getBucketedSizeForValue(  byte[] value){
    return value.length;
  }
  @Override protected int getSizeInBytes(  int bucketedSize){
    return bucketedSize;
  }
}
