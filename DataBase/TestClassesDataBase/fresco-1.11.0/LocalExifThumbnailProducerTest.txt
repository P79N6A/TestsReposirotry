@RunWith(RobolectricTestRunner.class) @PowerMockIgnore({"org.mockito.*","org.robolectric.*","android.*"}) @Config(manifest=Config.NONE) @PrepareForTest({JfifUtil.class,BitmapUtil.class}) public class LocalExifThumbnailProducerTest {
  private static final int WIDTH=10;
  private static final int HEIGHT=20;
  private static final int ORIENTATION=8;
  private static final int ANGLE=270;
  @Mock public ExifInterface mExifInterface;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener mProducerListener;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ProducerContext mProducerContext;
  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public PooledByteBuffer mThumbnailByteBuffer;
  @Mock public File mFile;
  @Mock public ContentResolver mContentResolver;
  @Rule public PowerMockRule rule=new PowerMockRule();
  private final Uri mUri=Uri.parse("/dummy/path");
  private byte[] mThumbnailBytes;
  private TestExecutorService mTestExecutorService;
  private TestLocalExifThumbnailProducer mTestLocalExifThumbnailProducer;
  private EncodedImage mCapturedEncodedImage;
  @Before public void setUp() throws IOException {
    MockitoAnnotations.initMocks(this);
    PowerMockito.mockStatic(JfifUtil.class,BitmapUtil.class);
    mTestExecutorService=new TestExecutorService(new FakeClock());
    mTestLocalExifThumbnailProducer=new TestLocalExifThumbnailProducer(mTestExecutorService,mPooledByteBufferFactory,mContentResolver);
    when(mProducerContext.getImageRequest()).thenReturn(mImageRequest);
    when(mImageRequest.getSourceUri()).thenReturn(mUri);
    when(mProducerContext.getListener()).thenReturn(mProducerListener);
    mThumbnailBytes=new byte[100];
    when(mExifInterface.hasThumbnail()).thenReturn(true);
    when(mExifInterface.getThumbnail()).thenReturn(mThumbnailBytes);
    when(mPooledByteBufferFactory.newByteBuffer(mThumbnailBytes)).thenReturn(mThumbnailByteBuffer);
    when(mExifInterface.getAttribute(ExifInterface.TAG_ORIENTATION)).thenReturn(Integer.toString(ORIENTATION));
    when(JfifUtil.getAutoRotateAngleFromOrientation(ORIENTATION)).thenReturn(ANGLE);
    when(BitmapUtil.decodeDimensions(any(InputStream.class))).thenReturn(new Pair(WIDTH,HEIGHT));
    doAnswer(new Answer(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        mCapturedEncodedImage=EncodedImage.cloneOrNull((EncodedImage)invocation.getArguments()[0]);
        return null;
      }
    }
).when(mConsumer).onNewResult(notNull(EncodedImage.class),anyInt());
  }
  @Test public void testFindExifThumbnail(){
    mTestLocalExifThumbnailProducer.produceResults(mConsumer,mProducerContext);
    mTestExecutorService.runUntilIdle();
    assertEquals(2,mCapturedEncodedImage.getByteBufferRef().getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    assertSame(mThumbnailByteBuffer,mCapturedEncodedImage.getByteBufferRef().get());
    assertEquals(DefaultImageFormats.JPEG,mCapturedEncodedImage.getImageFormat());
    assertEquals(WIDTH,mCapturedEncodedImage.getWidth());
    assertEquals(HEIGHT,mCapturedEncodedImage.getHeight());
    assertEquals(ANGLE,mCapturedEncodedImage.getRotationAngle());
  }
  @Test public void testNoExifThumbnail(){
    when(mExifInterface.hasThumbnail()).thenReturn(false);
    mTestLocalExifThumbnailProducer.produceResults(mConsumer,mProducerContext);
    mTestExecutorService.runUntilIdle();
    verify(mConsumer).onNewResult(null,Consumer.IS_LAST);
  }
private class TestLocalExifThumbnailProducer extends LocalExifThumbnailProducer {
    private TestLocalExifThumbnailProducer(    Executor executor,    PooledByteBufferFactory pooledByteBufferFactory,    ContentResolver contentResolver){
      super(executor,pooledByteBufferFactory,contentResolver);
    }
    @Override ExifInterface getExifInterface(    Uri uri){
      if (uri.equals(mUri)) {
        return mExifInterface;
      }
      return null;
    }
  }
}
