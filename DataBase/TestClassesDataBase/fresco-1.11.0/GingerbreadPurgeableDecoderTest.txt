/** 
 * Tests for  {@link GingerbreadPurgeableDecoder}. 
 */
@RunWith(RobolectricTestRunner.class) @PrepareOnlyThisForTest({BitmapCounterProvider.class,BitmapFactory.class,DalvikPurgeableDecoder.class,Bitmaps.class}) @PowerMockIgnore({"org.mockito.*","org.robolectric.*","android.*"}) public class GingerbreadPurgeableDecoderTest {
  protected static final Bitmap.Config DEFAULT_BITMAP_CONFIG=Bitmap.Config.ARGB_8888;
  @Rule public PowerMockRule rule=new PowerMockRule();
static {
    SoLoader.setInTestMode();
  }
  protected static final int IMAGE_SIZE=5;
  protected static final int LENGTH=10;
  protected static final long POINTER=1000L;
  protected static final int MAX_BITMAP_COUNT=2;
  protected static final int MAX_BITMAP_SIZE=MAX_BITMAP_COUNT * MockBitmapFactory.DEFAULT_BITMAP_SIZE;
  protected GingerbreadPurgeableDecoder mGingerbreadPurgeableDecoder;
  protected CloseableReference<PooledByteBuffer> mByteBufferRef;
  protected EncodedImage mEncodedImage;
  protected byte[] mInputBuf;
  protected byte[] mDecodeBuf;
  protected CloseableReference<byte[]> mDecodeBufRef;
  protected Bitmap mBitmap;
  protected BitmapCounter mBitmapCounter;
  @Before public void setUp(){
    mBitmap=MockBitmapFactory.create();
    mBitmapCounter=new BitmapCounter(MAX_BITMAP_COUNT,MAX_BITMAP_SIZE);
    mockStatic(DalvikPurgeableDecoder.class);
    when(DalvikPurgeableDecoder.getBitmapFactoryOptions(anyInt(),any(Bitmap.Config.class))).thenCallRealMethod();
    when(DalvikPurgeableDecoder.endsWithEOI(any(CloseableReference.class),anyInt())).thenCallRealMethod();
    mockStatic(BitmapCounterProvider.class);
    when(BitmapCounterProvider.get()).thenReturn(mBitmapCounter);
    mockStatic(BitmapFactory.class);
    when(BitmapFactory.decodeFileDescriptor(any(FileDescriptor.class),any(Rect.class),any(BitmapFactory.Options.class))).thenReturn(mBitmap);
    mInputBuf=new byte[LENGTH];
    PooledByteBuffer input=new TrivialPooledByteBuffer(mInputBuf,POINTER);
    mByteBufferRef=CloseableReference.of(input);
    mEncodedImage=new EncodedImage(mByteBufferRef);
    mDecodeBuf=new byte[LENGTH + 2];
    mDecodeBufRef=CloseableReference.of(mDecodeBuf,mock(ResourceReleaser.class));
    mockStatic(Bitmaps.class);
    mGingerbreadPurgeableDecoder=new GingerbreadPurgeableDecoder();
  }
  @Test(expected=ConcurrentModificationException.class) public void testPinBitmapFailure(){
    GingerbreadPurgeableDecoder decoder=mock(GingerbreadPurgeableDecoder.class);
    PowerMockito.doThrow(new ConcurrentModificationException()).when(decoder).pinBitmap(any(Bitmap.class));
    decoder.pinBitmap(any(Bitmap.class));
    try {
      decoder.decodeFromEncodedImage(mEncodedImage,DEFAULT_BITMAP_CONFIG,null);
    }
  finally {
      verify(mBitmap).recycle();
      assertEquals(0,mBitmapCounter.getCount());
      assertEquals(0,mBitmapCounter.getSize());
    }
  }
  @Test public void testDecode_Jpeg_Detailed(){
    assumeNotNull(mGingerbreadPurgeableDecoder);
  }
  @Test public void testDecodeJpeg_incomplete(){
    assumeNotNull(mGingerbreadPurgeableDecoder);
  }
}
