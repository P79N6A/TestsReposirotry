/** 
 * Test out methods in DynamicDefaultDiskStorage
 */
@RunWith(RobolectricTestRunner.class) public class DynamicDefaultDiskStorageTest {
  private int mVersion;
  private String mBaseDirectoryName;
  private CacheErrorLogger mCacheErrorLogger;
  private Context mContext;
  @Before public void setUp(){
    mContext=RuntimeEnvironment.application.getApplicationContext();
    mVersion=1;
    mBaseDirectoryName="base";
    mCacheErrorLogger=mock(CacheErrorLogger.class);
  }
  private DynamicDefaultDiskStorage createStorage(  boolean useFilesDirInsteadOfCacheDir){
    return new DynamicDefaultDiskStorage(mVersion,useFilesDirInsteadOfCacheDir ? Suppliers.of(mContext.getFilesDir()) : Suppliers.of(mContext.getCacheDir()),mBaseDirectoryName,mCacheErrorLogger);
  }
  private DynamicDefaultDiskStorage createInternalCacheDirStorage(){
    return createStorage(false);
  }
  private DynamicDefaultDiskStorage createInternalFilesDirStorage(){
    return createStorage(true);
  }
  private static File getStorageSubdirectory(  File rootDir,  int version){
    return new File(rootDir,DefaultDiskStorage.getVersionSubdirectoryName(version));
  }
  @Test public void testGet_InternalCacheDir() throws Exception {
    File cacheDir=mContext.getCacheDir();
    DynamicDefaultDiskStorage storage=createInternalCacheDirStorage();
    Assert.assertNull(storage.mCurrentState.delegate);
    DiskStorage delegate=storage.get();
    Assert.assertEquals(delegate,storage.mCurrentState.delegate);
    Assert.assertTrue(delegate instanceof DefaultDiskStorage);
    File baseDir=new File(cacheDir,mBaseDirectoryName);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir,1).exists());
    DiskStorage storage2=storage.get();
    Assert.assertEquals(delegate,storage2);
    File baseDirOrig=baseDir.getAbsoluteFile();
    Assert.assertTrue(baseDirOrig.renameTo(new File(cacheDir,"dummydir")));
    DiskStorage storage3=storage.get();
    Assert.assertNotSame(delegate,storage3);
    Assert.assertTrue(storage3 instanceof DefaultDiskStorage);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir,1).exists());
  }
  @Test public void testGet_InternalFilesDir() throws Exception {
    File dir=mContext.getFilesDir();
    DynamicDefaultDiskStorage supplier=createInternalFilesDirStorage();
    Assert.assertNull(supplier.mCurrentState.delegate);
    DiskStorage storage=supplier.get();
    Assert.assertEquals(storage,supplier.mCurrentState.delegate);
    Assert.assertTrue(storage instanceof DefaultDiskStorage);
    File baseDir=new File(dir,mBaseDirectoryName);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir,1).exists());
    DiskStorage storage2=supplier.get();
    Assert.assertEquals(storage,storage2);
    File baseDirOrig=baseDir.getAbsoluteFile();
    Assert.assertTrue(baseDirOrig.renameTo(new File(dir,"dummydir")));
    DiskStorage storage3=supplier.get();
    Assert.assertNotSame(storage,storage3);
    Assert.assertTrue(storage3 instanceof DefaultDiskStorage);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir,1).exists());
  }
  @Test public void testCreateRootDirectoryIfNecessary() throws Exception {
    DynamicDefaultDiskStorage supplier=createInternalCacheDirStorage();
    Assert.assertNull(supplier.mCurrentState.delegate);
    File baseDir=new File(mContext.getCacheDir(),mBaseDirectoryName);
    supplier.createRootDirectoryIfNecessary(baseDir);
    Assert.assertTrue(baseDir.exists());
    FileTree.deleteRecursively(baseDir);
    File dummyFile=new File(mContext.getCacheDir(),mBaseDirectoryName);
    Assert.assertTrue(dummyFile.createNewFile());
    Assert.assertTrue(dummyFile.exists());
    supplier.createRootDirectoryIfNecessary(baseDir);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(baseDir.isDirectory());
    FileTree.deleteRecursively(baseDir);
    Assert.assertTrue(baseDir.mkdirs());
    File dummyFile2=new File(baseDir,"dummy1");
    Assert.assertTrue(dummyFile2.createNewFile());
    Assert.assertTrue(dummyFile2.exists());
    supplier.createRootDirectoryIfNecessary(baseDir);
    Assert.assertTrue(dummyFile2.exists());
  }
  @Test public void testDeleteStorage() throws Exception {
    DynamicDefaultDiskStorage storage=createInternalCacheDirStorage();
    Assert.assertNull(storage.mCurrentState.delegate);
    storage.deleteOldStorageIfNecessary();
    storage.get();
    File versionDir=getStorageSubdirectory(new File(mContext.getCacheDir(),mBaseDirectoryName),mVersion);
    Assert.assertTrue(versionDir.exists());
    File dummyFile=new File(versionDir,"dummy");
    Assert.assertTrue(dummyFile.createNewFile());
    Assert.assertTrue(dummyFile.exists());
    storage.deleteOldStorageIfNecessary();
    Assert.assertFalse(dummyFile.exists());
    Assert.assertFalse(versionDir.exists());
    Assert.assertFalse(versionDir.getParentFile().exists());
  }
  @Test public void testCreateStorage() throws Exception {
    DynamicDefaultDiskStorage storage=createInternalCacheDirStorage();
    File baseDir=new File(mContext.getCacheDir(),mBaseDirectoryName);
    File versionDir=getStorageSubdirectory(baseDir,mVersion);
    Assert.assertFalse(versionDir.exists());
    Assert.assertFalse(baseDir.exists());
    storage.get();
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(versionDir.exists());
  }
}
