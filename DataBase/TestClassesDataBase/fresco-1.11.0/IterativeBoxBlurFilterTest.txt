@RunWith(RobolectricTestRunner.class) @Config(manifest=Config.NONE) public class IterativeBoxBlurFilterTest {
  private final int BITMAP_SIZE=(int)BitmapUtil.MAX_BITMAP_SIZE;
  private final Bitmap mBitmap=Bitmap.createBitmap(BITMAP_SIZE,BITMAP_SIZE,Bitmap.Config.ARGB_8888);
  @Test public void testBitmapBlurInPlace(){
    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap,1,4);
    assertNotNull(mBitmap);
    assertEquals(mBitmap.getWidth(),BITMAP_SIZE);
    assertEquals(mBitmap.getHeight(),BITMAP_SIZE);
    assertEquals(mBitmap.getConfig(),Bitmap.Config.ARGB_8888);
  }
  @Test public void maxRadiusBitmapBlurInPlace(){
    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap,1,RenderScriptBlurFilter.BLUR_MAX_RADIUS);
    assertNotNull(mBitmap);
    assertEquals(mBitmap.getWidth(),BITMAP_SIZE);
    assertEquals(mBitmap.getHeight(),BITMAP_SIZE);
    assertEquals(mBitmap.getConfig(),Bitmap.Config.ARGB_8888);
  }
  @Test(expected=IllegalArgumentException.class) public void invalidNegativeRadiusBlurInPlace(){
    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap,1,-1);
  }
  @Test(expected=IllegalArgumentException.class) public void invalidZeroRadiusBlurInPlace(){
    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap,1,0);
  }
  @Test(expected=IllegalArgumentException.class) public void invalidBigRadiusBlurInPlace(){
    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap,1,RenderScriptBlurFilter.BLUR_MAX_RADIUS + 1);
  }
}
