/** 
 * Tests  {@link ImagePerfMonitor} 
 */
public class ImagePerfMonitorTest {
  private static final String CONTROLLER_ID="abc";
  private MonotonicClock mMonotonicClock;
  private PipelineDraweeController mController;
  private ImagePerfMonitor mImagePerfMonitor;
  @Before public void setUp(){
    mMonotonicClock=mock(MonotonicClock.class);
    mController=mock(PipelineDraweeController.class);
    when(mController.getId()).thenReturn(CONTROLLER_ID);
    mImagePerfMonitor=new ImagePerfMonitor(mMonotonicClock,mController);
  }
  @Test public void testSetEnabled(){
    mImagePerfMonitor.setEnabled(true);
    verify(mController).addImageOriginListener(any(ImagePerfImageOriginListener.class));
    verify(mController).addControllerListener(any(ImagePerfControllerListener.class));
    verify(mController).addRequestListener(any(RequestListener.class));
    verify(mController).getId();
    verifyNoMoreInteractions(mController);
  }
  @Test public void testEnableDisable(){
    mImagePerfMonitor.setEnabled(true);
    mImagePerfMonitor.setEnabled(false);
    verify(mController).addImageOriginListener(any(ImagePerfImageOriginListener.class));
    verify(mController).addControllerListener(any(ImagePerfControllerListener.class));
    verify(mController).addRequestListener(any(RequestListener.class));
    verify(mController).getId();
    verify(mController).removeImageOriginListener(any(ImagePerfImageOriginListener.class));
    verify(mController).removeControllerListener(any(ImagePerfControllerListener.class));
    verify(mController).removeRequestListener(any(RequestListener.class));
    verifyNoMoreInteractions(mController);
  }
  @Test public void testNotifyListeners_whenNoListener_thenDoNothing(){
    ImagePerfState state=mock(ImagePerfState.class);
    mImagePerfMonitor.setEnabled(true);
    mImagePerfMonitor.notifyStatusUpdated(state,ImageLoadStatus.SUCCESS);
    verify(state).setImageLoadStatus(eq(ImageLoadStatus.SUCCESS));
    verifyNoMoreInteractions(state);
  }
  @Test public void testNotifyListeners_whenListenerSet_thenNotifyListener(){
    ImagePerfState state=mock(ImagePerfState.class);
    ImagePerfDataListener listener=mock(ImagePerfDataListener.class);
    mImagePerfMonitor.setEnabled(true);
    mImagePerfMonitor.addImagePerfDataListener(listener);
    mImagePerfMonitor.notifyStatusUpdated(state,ImageLoadStatus.SUCCESS);
    verify(state).setImageLoadStatus(eq(ImageLoadStatus.SUCCESS));
    verify(listener).onImageLoadStatusUpdated(any(ImagePerfData.class),eq(ImageLoadStatus.SUCCESS));
  }
  @Test public void testNotifyListeners_whenDisabled_thenDoNothing(){
    ImagePerfState state=mock(ImagePerfState.class);
    ImagePerfDataListener listener=mock(ImagePerfDataListener.class);
    mImagePerfMonitor.setEnabled(false);
    mImagePerfMonitor.addImagePerfDataListener(listener);
    mImagePerfMonitor.notifyStatusUpdated(state,ImageLoadStatus.SUCCESS);
    verify(state).setImageLoadStatus(eq(ImageLoadStatus.SUCCESS));
    verifyNoMoreInteractions(listener);
  }
}
