@RunWith(RobolectricTestRunner.class) public class FadeDrawableTest {
  private Drawable[] mLayers=new Drawable[]{DrawableTestUtils.mockDrawable(),DrawableTestUtils.mockDrawable(),DrawableTestUtils.mockDrawable()};
  private FakeFadeDrawable mFadeDrawable;
  private Canvas mCanvas=mock(Canvas.class);
  private Drawable.Callback mCallback=mock(Drawable.Callback.class);
  @Before public void setUp(){
    mFadeDrawable=new FakeFadeDrawable(mLayers);
    mFadeDrawable.setCallback(mCallback);
  }
  private void resetInteractions(){
    reset(mCallback,mLayers[0],mLayers[1],mLayers[2]);
    when(mLayers[0].mutate()).thenReturn(mLayers[0]);
    when(mLayers[1].mutate()).thenReturn(mLayers[1]);
    when(mLayers[2].mutate()).thenReturn(mLayers[2]);
  }
  @Test public void testIntrinsicDimensions(){
    when(mLayers[0].getIntrinsicWidth()).thenReturn(100);
    when(mLayers[1].getIntrinsicWidth()).thenReturn(200);
    when(mLayers[2].getIntrinsicWidth()).thenReturn(150);
    when(mLayers[0].getIntrinsicHeight()).thenReturn(400);
    when(mLayers[1].getIntrinsicHeight()).thenReturn(350);
    when(mLayers[2].getIntrinsicHeight()).thenReturn(300);
    Assert.assertEquals(200,mFadeDrawable.getIntrinsicWidth());
    Assert.assertEquals(400,mFadeDrawable.getIntrinsicHeight());
  }
  @Test public void testInitialState(){
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE,mFadeDrawable.mTransitionState);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
  }
  @Test public void testFadeToLayer(){
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeToLayer(1);
    Assert.assertEquals(100,mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING,mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
  }
  @Test public void testFadeUpToLayer(){
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeUpToLayer(1);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100,mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING,mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
  }
  @Test public void testFadeInLayer(){
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeInLayer(2);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100,mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING,mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
  }
  @Test public void testFadeOutLayer(){
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeOutLayer(0);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100,mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING,mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
  }
  @Test public void testFadeOutAllLayers(){
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.mIsLayerOn[1]=true;
    mFadeDrawable.mIsLayerOn[2]=true;
    mFadeDrawable.fadeOutAllLayers();
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100,mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING,mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
  }
  @Test public void testImmediateTransition(){
    testImmediateTransition(true);
    testImmediateTransition(false);
  }
  private void testImmediateTransition(  boolean fadeUpToLayer){
    resetInteractions();
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    }
 else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.finishTransitionImmediately();
    verify(mCallback,times(2)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE,mFadeDrawable.mTransitionState);
  }
  @Test public void testZeroTransition(){
    testZeroTransition(true);
    testZeroTransition(false);
  }
  private void testZeroTransition(  boolean fadeUpToLayer){
    resetInteractions();
    mFadeDrawable.setTransitionDuration(0);
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    }
 else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE,mFadeDrawable.mTransitionState);
    if (fadeUpToLayer) {
      verify(mLayers[0]).draw(mCanvas);
    }
    verify(mLayers[1]).draw(mCanvas);
  }
  @Test public void testTransition(){
    testTransition(true);
    testTransition(false);
  }
  private void testTransition(  boolean fadeUpToLayer){
    mFadeDrawable.reset();
    resetInteractions();
    mFadeDrawable.setTransitionDuration(85);
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    }
 else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback,mLayers[0],mLayers[1],mLayers[2]);
    resetInteractions();
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING,mFadeDrawable.mTransitionState);
    verify(mLayers[0]).mutate();
    verify(mLayers[0]).setAlpha(255);
    verify(mLayers[0]).draw(mCanvas);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback,mLayers[0],mLayers[1],mLayers[2]);
    for (int i=1; i < 5; i++) {
      resetInteractions();
      mFadeDrawable.incrementCurrentTimeMs(17);
      mFadeDrawable.draw(mCanvas);
      Assert.assertEquals(fadeUpToLayer ? 255 : 255 - 51 * i,mFadeDrawable.mAlphas[0]);
      Assert.assertEquals(51 * i,mFadeDrawable.mAlphas[1]);
      Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
      Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING,mFadeDrawable.mTransitionState);
      if (fadeUpToLayer) {
        verify(mLayers[0]).mutate();
        verify(mLayers[0]).setAlpha(255);
        verify(mLayers[0]).draw(mCanvas);
      }
 else {
        verify(mLayers[0]).mutate();
        verify(mLayers[0]).setAlpha(255 - 51 * i);
        verify(mLayers[0]).draw(mCanvas);
      }
      verify(mLayers[1]).mutate();
      verify(mLayers[1]).setAlpha(51 * i);
      verify(mLayers[1]).draw(mCanvas);
      verify(mCallback).invalidateDrawable(mFadeDrawable);
      verifyNoMoreInteractions(mCallback,mLayers[0],mLayers[1],mLayers[2]);
    }
    resetInteractions();
    mFadeDrawable.incrementCurrentTimeMs(17);
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE,mFadeDrawable.mTransitionState);
    if (fadeUpToLayer) {
      verify(mLayers[0]).mutate();
      verify(mLayers[0]).setAlpha(255);
      verify(mLayers[0]).draw(mCanvas);
    }
    verify(mLayers[1]).mutate();
    verify(mLayers[1]).setAlpha(255);
    verify(mLayers[1]).draw(mCanvas);
    verifyNoMoreInteractions(mCallback,mLayers[0],mLayers[1],mLayers[2]);
  }
  @Test public void testSetAlpha(){
    InOrder inOrder=inOrder(mLayers[0],mLayers[1],mLayers[2],mCallback);
    mFadeDrawable.reset();
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.setTransitionDuration(85);
    mFadeDrawable.fadeUpToLayer(1);
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.draw(mCanvas);
    inOrder.verify(mCallback,atLeastOnce()).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.setAlpha(128);
    Assert.assertEquals(128,mFadeDrawable.getAlpha());
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    mFadeDrawable.incrementCurrentTimeMs(17);
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(128,mFadeDrawable.getAlpha());
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(51,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING,mFadeDrawable.mTransitionState);
    inOrder.verify(mLayers[0]).mutate();
    inOrder.verify(mLayers[0]).setAlpha(128);
    inOrder.verify(mLayers[0]).draw(mCanvas);
    inOrder.verify(mLayers[1]).mutate();
    inOrder.verify(mLayers[1]).setAlpha(25);
    inOrder.verify(mLayers[1]).draw(mCanvas);
    inOrder.verify(mCallback,atLeastOnce()).invalidateDrawable(mFadeDrawable);
    inOrder.verifyNoMoreInteractions();
    mFadeDrawable.incrementCurrentTimeMs(1000);
    mFadeDrawable.draw(mCanvas);
    inOrder.verify(mCallback,never()).invalidateDrawable(mFadeDrawable);
  }
  @Test public void testReset(){
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.finishTransitionImmediately();
    resetInteractions();
    mFadeDrawable.reset();
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE,mFadeDrawable.mTransitionState);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
  }
  @Test public void testBatchMode(){
    mFadeDrawable.beginBatchMode();
    mFadeDrawable.reset();
    mFadeDrawable.fadeInLayer(1);
    mFadeDrawable.fadeOutLayer(0);
    mFadeDrawable.fadeOutAllLayers();
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.fadeUpToLayer(1);
    mFadeDrawable.finishTransitionImmediately();
    mFadeDrawable.endBatchMode();
    verify(mCallback,times(1)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
  }
  @Test public void testNoBatchMode(){
    mFadeDrawable.reset();
    mFadeDrawable.fadeInLayer(1);
    mFadeDrawable.fadeOutLayer(0);
    mFadeDrawable.fadeOutAllLayers();
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.fadeUpToLayer(1);
    mFadeDrawable.finishTransitionImmediately();
    verify(mCallback,times(7)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255,mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0,mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true,mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false,mFadeDrawable.mIsLayerOn[2]);
  }
private static class FakeFadeDrawable extends FadeDrawable {
    private long mCurrentTimeMs;
    public FakeFadeDrawable(    Drawable[] layers){
      super(layers);
      mCurrentTimeMs=0;
    }
    @Override protected long getCurrentTimeMs(){
      return mCurrentTimeMs;
    }
    void incrementCurrentTimeMs(    long increment){
      mCurrentTimeMs+=increment;
    }
  }
}
