/** 
 * Tests for  {@link PropertySourceOrigin}.
 * @author Phillip Webb
 */
public class PropertySourceOriginTests {
  @Test public void createWhenPropertySourceIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(null,"name")).withMessageContaining("PropertySource must not be null");
  }
  @Test public void createWhenPropertyNameIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(mock(PropertySource.class),null)).withMessageContaining("PropertyName must not be empty");
  }
  @Test public void createWhenPropertyNameIsEmptyShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(mock(PropertySource.class),"")).withMessageContaining("PropertyName must not be empty");
  }
  @Test public void getPropertySourceShouldReturnPropertySource(){
    MapPropertySource propertySource=new MapPropertySource("test",new HashMap<>());
    PropertySourceOrigin origin=new PropertySourceOrigin(propertySource,"foo");
    assertThat(origin.getPropertySource()).isEqualTo(propertySource);
  }
  @Test public void getPropertyNameShouldReturnPropertyName(){
    MapPropertySource propertySource=new MapPropertySource("test",new HashMap<>());
    PropertySourceOrigin origin=new PropertySourceOrigin(propertySource,"foo");
    assertThat(origin.getPropertyName()).isEqualTo("foo");
  }
  @Test public void toStringShouldShowDetails(){
    MapPropertySource propertySource=new MapPropertySource("test",new HashMap<>());
    PropertySourceOrigin origin=new PropertySourceOrigin(propertySource,"foo");
    assertThat(origin.toString()).isEqualTo("\"foo\" from property source \"test\"");
  }
  @Test @SuppressWarnings("unchecked") public void getWhenPropertySourceSupportsOriginLookupShouldReturnOrigin(){
    Origin origin=mock(Origin.class);
    PropertySource<?> propertySource=mock(PropertySource.class,withSettings().extraInterfaces(OriginLookup.class));
    OriginLookup<String> originCapablePropertySource=(OriginLookup<String>)propertySource;
    given(originCapablePropertySource.getOrigin("foo")).willReturn(origin);
    assertThat(PropertySourceOrigin.get(propertySource,"foo")).isSameAs(origin);
  }
  @Test public void getWhenPropertySourceSupportsOriginLookupButNoOriginShouldWrap(){
    PropertySource<?> propertySource=mock(PropertySource.class,withSettings().extraInterfaces(OriginLookup.class));
    assertThat(PropertySourceOrigin.get(propertySource,"foo")).isInstanceOf(PropertySourceOrigin.class);
  }
  @Test public void getWhenPropertySourceIsNotOriginAwareShouldWrap(){
    MapPropertySource propertySource=new MapPropertySource("test",new HashMap<>());
    PropertySourceOrigin origin=new PropertySourceOrigin(propertySource,"foo");
    assertThat(origin.getPropertySource()).isEqualTo(propertySource);
    assertThat(origin.getPropertyName()).isEqualTo("foo");
  }
}
