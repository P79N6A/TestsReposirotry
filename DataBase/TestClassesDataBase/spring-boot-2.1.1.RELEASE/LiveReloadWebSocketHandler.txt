private static class LiveReloadWebSocketHandler extends TextWebSocketHandler {
  private WebSocketSession session;
  private final CountDownLatch helloLatch=new CountDownLatch(2);
  private final List<String> messages=new ArrayList<>();
  private int pongCount;
  private CloseStatus closeStatus;
  @Override public void afterConnectionEstablished(  WebSocketSession session) throws Exception {
    this.session=session;
    session.sendMessage(new TextMessage(HANDSHAKE));
    this.helloLatch.countDown();
  }
  public void awaitHello() throws InterruptedException {
    this.helloLatch.await(1,TimeUnit.MINUTES);
    Thread.sleep(200);
  }
  @Override protected void handleTextMessage(  WebSocketSession session,  TextMessage message){
    if (message.getPayload().contains("hello")) {
      this.helloLatch.countDown();
    }
    this.messages.add(message.getPayload());
  }
  @Override protected void handlePongMessage(  WebSocketSession session,  PongMessage message){
    this.pongCount++;
  }
  @Override public void afterConnectionClosed(  WebSocketSession session,  CloseStatus status){
    this.closeStatus=status;
  }
  public void sendMessage(  WebSocketMessage<?> message) throws IOException {
    this.session.sendMessage(message);
  }
  public void close() throws IOException {
    this.session.close();
  }
  public List<String> getMessages(){
    return this.messages;
  }
  public int getPongCount(){
    return this.pongCount;
  }
  public CloseStatus getCloseStatus(){
    return this.closeStatus;
  }
}
