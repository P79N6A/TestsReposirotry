/** 
 * Tests for  {@link JpaRepositoriesAutoConfiguration}.
 * @author Dave Syer
 * @author Oliver Gierke
 */
public class JpaRepositoriesAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(HibernateJpaAutoConfiguration.class,JpaRepositoriesAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,TaskExecutionAutoConfiguration.class)).withUserConfiguration(EmbeddedDataSourceConfiguration.class);
  @Test public void testDefaultRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(CityRepository.class);
      assertThat(context).hasSingleBean(PlatformTransactionManager.class);
      assertThat(context).hasSingleBean(EntityManagerFactory.class);
      assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNull();
    }
);
  }
  @Test public void testOverrideRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(CustomConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(CityJpaRepository.class);
      assertThat(context).hasSingleBean(PlatformTransactionManager.class);
      assertThat(context).hasSingleBean(EntityManagerFactory.class);
    }
);
  }
  @Test public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories(){
    this.contextRunner.withUserConfiguration(SortOfInvalidCustomConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(CityRepository.class));
  }
  @Test public void whenBootstrappingModeIsLazyBootstrapExecutorIsConfigured(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=lazy").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNotNull());
  }
  @Test public void whenBootstrappingModeIsDeferredBootstrapExecutorIsConfigured(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=deferred").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNotNull());
  }
  @Test public void whenBootstrappingModeIsDefaultBootstrapExecutorIsNotConfigured(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=default").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNull());
  }
@Configuration @TestAutoConfigurationPackage(City.class) protected static class TestConfiguration {
  }
@Configuration @EnableJpaRepositories(basePackageClasses=org.springframework.boot.autoconfigure.data.alt.jpa.CityJpaRepository.class,excludeFilters={@Filter(type=FilterType.ASSIGNABLE_TYPE,value=CityMongoDbRepository.class),@Filter(type=FilterType.ASSIGNABLE_TYPE,value=CitySolrRepository.class)}) @TestAutoConfigurationPackage(City.class) protected static class CustomConfiguration {
  }
@Configuration @EnableJpaRepositories("foo.bar") @TestAutoConfigurationPackage(City.class) protected static class SortOfInvalidCustomConfiguration {
  }
}
