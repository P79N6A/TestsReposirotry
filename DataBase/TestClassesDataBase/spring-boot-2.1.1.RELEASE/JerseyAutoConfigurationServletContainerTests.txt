/** 
 * Tests that verify the behavior when deployed to a Servlet container where Jersey may have already initialized itself.
 * @author Andy Wilkinson
 */
@RunWith(SpringRunner.class) @SpringBootTest(classes=Application.class,webEnvironment=WebEnvironment.RANDOM_PORT) @DirtiesContext public class JerseyAutoConfigurationServletContainerTests {
  @ClassRule public static OutputCapture output=new OutputCapture();
  @Test public void existingJerseyServletIsAmended(){
    assertThat(output.toString()).contains("Configuring existing registration for Jersey servlet");
    assertThat(output.toString()).contains("Servlet " + Application.class.getName() + " was not registered");
  }
@ImportAutoConfiguration({ServletWebServerFactoryAutoConfiguration.class,JerseyAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) @Import(ContainerConfiguration.class) @Path("/hello") public static class Application extends ResourceConfig {
    @Value("${message:World}") private String msg;
    public Application(){
      register(Application.class);
    }
    @GET public String message(){
      return "Hello " + this.msg;
    }
  }
@Configuration public static class ContainerConfiguration {
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(){
        @Override protected void postProcessContext(        Context context){
          Wrapper jerseyServlet=context.createWrapper();
          String servletName=Application.class.getName();
          jerseyServlet.setName(servletName);
          jerseyServlet.setServletClass(ServletContainer.class.getName());
          jerseyServlet.setServlet(new ServletContainer());
          jerseyServlet.setOverridable(false);
          context.addChild(jerseyServlet);
          String pattern=UDecoder.URLDecode("/*",StandardCharsets.UTF_8);
          context.addServletMappingDecoded(pattern,servletName);
        }
      }
;
    }
  }
}
