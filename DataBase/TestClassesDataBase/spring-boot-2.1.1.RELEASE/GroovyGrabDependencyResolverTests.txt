/** 
 * Tests for  {@link GroovyGrabDependencyResolver}.
 * @author Andy Wilkinson
 */
public class GroovyGrabDependencyResolverTests {
  private DependencyResolver resolver;
  @Before public void setupResolver(){
    GroovyCompilerConfiguration configuration=new GroovyCompilerConfiguration(){
      @Override public boolean isGuessImports(){
        return true;
      }
      @Override public boolean isGuessDependencies(){
        return true;
      }
      @Override public boolean isAutoconfigure(){
        return false;
      }
      @Override public GroovyCompilerScope getScope(){
        return GroovyCompilerScope.DEFAULT;
      }
      @Override public List<RepositoryConfiguration> getRepositoryConfiguration(){
        return RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      }
      @Override public String[] getClasspath(){
        return new String[]{"."};
      }
      @Override public boolean isQuiet(){
        return false;
      }
    }
;
    this.resolver=new GroovyGrabDependencyResolver(configuration);
  }
  @Test public void resolveArtifactWithNoDependencies() throws Exception {
    List<File> resolved=this.resolver.resolve(Arrays.asList("commons-logging:commons-logging:1.1.3"));
    assertThat(resolved).hasSize(1);
    assertThat(getNames(resolved)).containsOnly("commons-logging-1.1.3.jar");
  }
  @Test public void resolveArtifactWithDependencies() throws Exception {
    List<File> resolved=this.resolver.resolve(Arrays.asList("org.springframework:spring-core:4.1.1.RELEASE"));
    assertThat(resolved).hasSize(2);
    assertThat(getNames(resolved)).containsOnly("commons-logging-1.1.3.jar","spring-core-4.1.1.RELEASE.jar");
  }
  @Test @SuppressWarnings({"unchecked","rawtypes"}) public void resolveShorthandArtifactWithDependencies() throws Exception {
    List<File> resolved=this.resolver.resolve(Arrays.asList("spring-beans"));
    assertThat(resolved).hasSize(3);
    assertThat(getNames(resolved)).has((Condition)Matched.by(hasItems(startsWith("spring-core-"),startsWith("spring-beans-"),startsWith("spring-jcl-"))));
  }
  @Test public void resolveMultipleArtifacts() throws Exception {
    List<File> resolved=this.resolver.resolve(Arrays.asList("junit:junit:4.11","commons-logging:commons-logging:1.1.3"));
    assertThat(resolved).hasSize(3);
    assertThat(getNames(resolved)).containsOnly("junit-4.11.jar","commons-logging-1.1.3.jar","hamcrest-core-1.3.jar");
  }
  public Set<String> getNames(  Collection<File> files){
    Set<String> names=new HashSet<>(files.size());
    for (    File file : files) {
      names.add(file.getName());
    }
    return names;
  }
}
