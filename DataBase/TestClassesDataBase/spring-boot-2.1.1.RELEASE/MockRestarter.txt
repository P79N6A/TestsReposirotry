/** 
 * Mocked version of  {@link Restarter}.
 * @author Phillip Webb
 */
public class MockRestarter implements TestRule {
  private Map<String,Object> attributes=new HashMap<>();
  private Restarter mock=mock(Restarter.class);
  @Override public Statement apply(  Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        setup();
        base.evaluate();
        cleanup();
      }
    }
;
  }
  @SuppressWarnings("rawtypes") private void setup(){
    Restarter.setInstance(this.mock);
    given(this.mock.getInitialUrls()).willReturn(new URL[]{});
    given(this.mock.getOrAddAttribute(anyString(),any(ObjectFactory.class))).willAnswer((invocation) -> {
      String name=invocation.getArgument(0);
      ObjectFactory factory=invocation.getArgument(1);
      Object attribute=MockRestarter.this.attributes.get(name);
      if (attribute == null) {
        attribute=factory.getObject();
        MockRestarter.this.attributes.put(name,attribute);
      }
      return attribute;
    }
);
    given(this.mock.getThreadFactory()).willReturn(Thread::new);
  }
  private void cleanup(){
    this.attributes.clear();
    Restarter.clearInstance();
  }
  public Restarter getMock(){
    return this.mock;
  }
}
