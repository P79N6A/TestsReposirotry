/** 
 * Tests for  {@link RabbitHealthIndicator}.
 * @author Phillip Webb
 */
public class RabbitHealthIndicatorTests {
  @Mock private RabbitTemplate rabbitTemplate;
  @Mock private Channel channel;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    given(this.rabbitTemplate.execute(any())).willAnswer((invocation) -> {
      ChannelCallback<?> callback=invocation.getArgument(0);
      return callback.doInRabbit(this.channel);
    }
);
  }
  @Test public void createWhenRabbitTemplateIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new RabbitHealthIndicator(null)).withMessageContaining("RabbitTemplate must not be null");
  }
  @Test public void healthWhenConnectionSucceedsShouldReturnUpWithVersion(){
    Connection connection=mock(Connection.class);
    given(this.channel.getConnection()).willReturn(connection);
    given(connection.getServerProperties()).willReturn(Collections.singletonMap("version","123"));
    Health health=new RabbitHealthIndicator(this.rabbitTemplate).health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails()).containsEntry("version","123");
  }
  @Test public void healthWhenConnectionFailsShouldReturnDown(){
    given(this.channel.getConnection()).willThrow(new RuntimeException());
    Health health=new RabbitHealthIndicator(this.rabbitTemplate).health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
  }
}
