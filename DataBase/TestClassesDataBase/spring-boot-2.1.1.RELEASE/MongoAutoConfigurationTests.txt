/** 
 * Tests for  {@link MongoAutoConfiguration}.
 * @author Dave Syer
 * @author Stephane Nicoll
 */
public class MongoAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class));
  @Test public void clientExists(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(MongoClient.class));
  }
  @Test public void optionsAdded(){
    this.contextRunner.withUserConfiguration(OptionsConfig.class).run((context) -> assertThat(context.getBean(MongoClient.class).getMongoClientOptions().getSocketTimeout()).isEqualTo(300));
  }
  @Test public void optionsAddedButNoHost(){
    this.contextRunner.withUserConfiguration(OptionsConfig.class).run((context) -> assertThat(context.getBean(MongoClient.class).getMongoClientOptions().getSocketTimeout()).isEqualTo(300));
  }
  @Test public void optionsSslConfig(){
    this.contextRunner.withUserConfiguration(SslOptionsConfig.class).run((context) -> {
      assertThat(context).hasSingleBean(MongoClient.class);
      MongoClient mongo=context.getBean(MongoClient.class);
      MongoClientOptions options=mongo.getMongoClientOptions();
      assertThat(options.isSslEnabled()).isTrue();
      assertThat(options.getSocketFactory()).isSameAs(context.getBean("mySocketFactory"));
    }
);
  }
  @Test public void doesNotCreateMongoClientWhenAlreadyDefined(){
    this.contextRunner.withUserConfiguration(FallbackMongoClientConfig.class).run((context) -> {
      assertThat(context).doesNotHaveBean(MongoClient.class);
      assertThat(context).hasSingleBean(com.mongodb.client.MongoClient.class);
    }
);
  }
@Configuration static class OptionsConfig {
    @Bean public MongoClientOptions mongoOptions(){
      return MongoClientOptions.builder().socketTimeout(300).build();
    }
  }
@Configuration static class SslOptionsConfig {
    @Bean public MongoClientOptions mongoClientOptions(){
      return MongoClientOptions.builder().sslEnabled(true).socketFactory(mySocketFactory()).build();
    }
    @Bean public SocketFactory mySocketFactory(){
      return mock(SocketFactory.class);
    }
  }
static class FallbackMongoClientConfig {
    @Bean com.mongodb.client.MongoClient fallbackMongoClient(){
      return MongoClients.create();
    }
  }
}
