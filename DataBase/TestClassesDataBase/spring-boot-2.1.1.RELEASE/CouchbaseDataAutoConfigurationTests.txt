/** 
 * Tests for  {@link CouchbaseDataAutoConfiguration}.
 * @author Stephane Nicoll
 */
public class CouchbaseDataAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void disabledIfCouchbaseIsNotConfigured(){
    load(null);
    assertThat(this.context.getBeansOfType(IndexManager.class)).isEmpty();
  }
  @Test public void customConfiguration(){
    load(CustomCouchbaseConfiguration.class);
    CouchbaseTemplate couchbaseTemplate=this.context.getBean(CouchbaseTemplate.class);
    assertThat(couchbaseTemplate.getDefaultConsistency()).isEqualTo(Consistency.STRONGLY_CONSISTENT);
  }
  @Test public void validatorIsPresent(){
    load(CouchbaseTestConfigurer.class);
    assertThat(this.context.getBeansOfType(ValidatingCouchbaseEventListener.class)).hasSize(1);
  }
  @Test public void autoIndexIsDisabledByDefault(){
    load(CouchbaseTestConfigurer.class);
    IndexManager indexManager=this.context.getBean(IndexManager.class);
    assertThat(indexManager.isIgnoreViews()).isTrue();
    assertThat(indexManager.isIgnoreN1qlPrimary()).isTrue();
    assertThat(indexManager.isIgnoreN1qlSecondary()).isTrue();
  }
  @Test public void enableAutoIndex(){
    load(CouchbaseTestConfigurer.class,"spring.data.couchbase.auto-index=true");
    IndexManager indexManager=this.context.getBean(IndexManager.class);
    assertThat(indexManager.isIgnoreViews()).isFalse();
    assertThat(indexManager.isIgnoreN1qlPrimary()).isFalse();
    assertThat(indexManager.isIgnoreN1qlSecondary()).isFalse();
  }
  @Test public void changeConsistency(){
    load(CouchbaseTestConfigurer.class,"spring.data.couchbase.consistency=eventually-consistent");
    SpringBootCouchbaseDataConfiguration configuration=this.context.getBean(SpringBootCouchbaseDataConfiguration.class);
    assertThat(configuration.getDefaultConsistency()).isEqualTo(Consistency.EVENTUALLY_CONSISTENT);
  }
  @Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet(){
    load(EntityScanConfig.class);
    CouchbaseMappingContext mappingContext=this.context.getBean(CouchbaseMappingContext.class);
    Set<Class<?>> initialEntitySet=(Set<Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
    assertThat(initialEntitySet).containsOnly(City.class);
  }
  @Test public void customConversions(){
    load(CustomConversionsConfig.class);
    CouchbaseTemplate template=this.context.getBean(CouchbaseTemplate.class);
    assertThat(template.getConverter().getConversionService().canConvert(CouchbaseProperties.class,Boolean.class)).isTrue();
  }
  private void load(  Class<?> config,  String... environment){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of(environment).applyTo(context);
    if (config != null) {
      context.register(config);
    }
    context.register(PropertyPlaceholderAutoConfiguration.class,ValidationAutoConfiguration.class,CouchbaseAutoConfiguration.class,CouchbaseDataAutoConfiguration.class);
    context.refresh();
    this.context=context;
  }
@Configuration static class CustomCouchbaseConfiguration extends AbstractCouchbaseDataConfiguration {
    @Override protected CouchbaseConfigurer couchbaseConfigurer(){
      return new CouchbaseTestConfigurer();
    }
    @Override protected Consistency getDefaultConsistency(){
      return Consistency.STRONGLY_CONSISTENT;
    }
  }
@Configuration @Import(CouchbaseTestConfigurer.class) static class CustomConversionsConfig {
    @Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS) public CouchbaseCustomConversions myCustomConversions(){
      return new CouchbaseCustomConversions(Collections.singletonList(new MyConverter()));
    }
  }
@Configuration @EntityScan("org.springframework.boot.autoconfigure.data.couchbase.city") @Import(CustomCouchbaseConfiguration.class) static class EntityScanConfig {
  }
static class MyConverter implements Converter<CouchbaseProperties,Boolean> {
    @Override public Boolean convert(    CouchbaseProperties value){
      return true;
    }
  }
}
