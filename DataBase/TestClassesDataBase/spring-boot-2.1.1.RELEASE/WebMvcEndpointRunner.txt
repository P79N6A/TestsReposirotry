/** 
 * {@link BlockJUnit4ClassRunner} for Spring MVC.
 * @author Andy Wilkinson
 * @author Phillip Webb
 */
class WebMvcEndpointRunner extends AbstractWebEndpointRunner {
  WebMvcEndpointRunner(  Class<?> testClass) throws InitializationError {
    super(testClass,"Spring MVC",WebMvcEndpointRunner::createContext);
  }
  private static ConfigurableApplicationContext createContext(  List<Class<?>> classes){
    AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext();
    classes.add(WebMvcEndpointConfiguration.class);
    context.register(ClassUtils.toClassArray(classes));
    context.refresh();
    return context;
  }
@Configuration @ImportAutoConfiguration({JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,WebMvcAutoConfiguration.class,DispatcherServletAutoConfiguration.class}) static class WebMvcEndpointConfiguration {
    private final ApplicationContext applicationContext;
    WebMvcEndpointConfiguration(    ApplicationContext applicationContext){
      this.applicationContext=applicationContext;
    }
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public WebMvcEndpointHandlerMapping webEndpointServletHandlerMapping(){
      List<String> mediaTypes=Arrays.asList(MediaType.APPLICATION_JSON_VALUE,ActuatorMediaType.V2_JSON);
      EndpointMediaTypes endpointMediaTypes=new EndpointMediaTypes(mediaTypes,mediaTypes);
      WebEndpointDiscoverer discoverer=new WebEndpointDiscoverer(this.applicationContext,new ConversionServiceParameterValueMapper(),endpointMediaTypes,null,Collections.emptyList(),Collections.emptyList());
      return new WebMvcEndpointHandlerMapping(new EndpointMapping("/actuator"),discoverer.getEndpoints(),endpointMediaTypes,new CorsConfiguration(),new EndpointLinksResolver(discoverer.getEndpoints()));
    }
  }
}
