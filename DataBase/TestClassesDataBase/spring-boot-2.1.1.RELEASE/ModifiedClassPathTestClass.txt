/** 
 * Custom  {@link TestClass} that uses a modified class path.
 */
private static final class ModifiedClassPathTestClass extends TestClass {
  private final ClassLoader classLoader;
  ModifiedClassPathTestClass(  ClassLoader classLoader,  String testClassName) throws ClassNotFoundException {
    super(classLoader.loadClass(testClassName));
    this.classLoader=classLoader;
  }
  @Override public List<FrameworkMethod> getAnnotatedMethods(  Class<? extends Annotation> annotationClass){
    try {
      return getAnnotatedMethods(annotationClass.getName());
    }
 catch (    ClassNotFoundException ex) {
      throw new RuntimeException(ex);
    }
  }
  @SuppressWarnings("unchecked") private List<FrameworkMethod> getAnnotatedMethods(  String annotationClassName) throws ClassNotFoundException {
    Class<? extends Annotation> annotationClass=(Class<? extends Annotation>)this.classLoader.loadClass(annotationClassName);
    List<FrameworkMethod> methods=super.getAnnotatedMethods(annotationClass);
    return wrapFrameworkMethods(methods);
  }
  private List<FrameworkMethod> wrapFrameworkMethods(  List<FrameworkMethod> methods){
    List<FrameworkMethod> wrapped=new ArrayList<>(methods.size());
    for (    FrameworkMethod frameworkMethod : methods) {
      wrapped.add(new ModifiedClassPathFrameworkMethod(frameworkMethod.getMethod()));
    }
    return wrapped;
  }
  private <T,E extends Throwable>T doWithModifiedClassPathThreadContextClassLoader(  ModifiedClassPathTcclAction<T,E> action) throws E {
    ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(this.classLoader);
    try {
      return action.perform();
    }
  finally {
      Thread.currentThread().setContextClassLoader(originalClassLoader);
    }
  }
  /** 
 * An action to be performed with the  {@link ModifiedClassPathClassLoader} set asthe thread context class loader.
 */
private interface ModifiedClassPathTcclAction<T,E extends Throwable> {
    T perform() throws E ;
  }
  /** 
 * Custom  {@link FrameworkMethod} that runs methods with{@link ModifiedClassPathClassLoader} as the thread context class loader.
 */
private final class ModifiedClassPathFrameworkMethod extends FrameworkMethod {
    private ModifiedClassPathFrameworkMethod(    Method method){
      super(method);
    }
    @Override public Object invokeExplosively(    Object target,    Object... params) throws Throwable {
      return doWithModifiedClassPathThreadContextClassLoader(() -> ModifiedClassPathFrameworkMethod.super.invokeExplosively(target,params));
    }
  }
}
