/** 
 * Tests for  {@link JolokiaEndpointAutoConfiguration}.
 * @author Christian Dupuis
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class JolokiaEndpointAutoConfigurationTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(DispatcherServletAutoConfiguration.class,ManagementContextAutoConfiguration.class,ServletManagementContextAutoConfiguration.class,ServletEndpointManagementContextConfiguration.class,JolokiaEndpointAutoConfiguration.class,TestConfiguration.class));
  @Test public void jolokiaServletShouldBeEnabledByDefault(){
    this.contextRunner.run((context) -> {
      ExposableServletEndpoint endpoint=getEndpoint(context);
      assertThat(endpoint.getRootPath()).isEqualTo("jolokia");
      Object servlet=ReflectionTestUtils.getField(endpoint.getEndpointServlet(),"servlet");
      assertThat(servlet).isInstanceOf(AgentServlet.class);
    }
);
  }
  @Test public void jolokiaServletWhenDisabledShouldNotBeDiscovered(){
    this.contextRunner.withPropertyValues("management.endpoint.jolokia.enabled=false").run((context) -> {
      Collection<ExposableServletEndpoint> endpoints=context.getBean(ServletEndpointsSupplier.class).getEndpoints();
      assertThat(endpoints).isEmpty();
    }
);
  }
  @Test public void jolokiaServletWhenHasCustomConfigShouldApplyInitParams(){
    this.contextRunner.withPropertyValues("management.endpoint.jolokia.config.debug=true").run((context) -> {
      ExposableServletEndpoint endpoint=getEndpoint(context);
      assertThat(endpoint.getEndpointServlet()).extracting("initParameters").containsOnly(Collections.singletonMap("debug","true"));
    }
);
  }
  private ExposableServletEndpoint getEndpoint(  AssertableWebApplicationContext context){
    Collection<ExposableServletEndpoint> endpoints=context.getBean(ServletEndpointsSupplier.class).getEndpoints();
    return endpoints.iterator().next();
  }
@Configuration static class TestConfiguration {
    @Bean public ServletEndpointDiscoverer servletEndpointDiscoverer(    ApplicationContext applicationContext){
      return new ServletEndpointDiscoverer(applicationContext,null,Collections.emptyList());
    }
  }
}
