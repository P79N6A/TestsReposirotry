/** 
 * Tests for  {@link WebClientAutoConfiguration}
 * @author Brian Clozel
 */
public class WebClientAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(ClientHttpConnectorAutoConfiguration.class,WebClientAutoConfiguration.class));
  @Test public void shouldCreateBuilder(){
    this.contextRunner.run((context) -> {
      WebClient.Builder builder=context.getBean(WebClient.Builder.class);
      WebClient webClient=builder.build();
      assertThat(webClient).isNotNull();
    }
);
  }
  @Test public void shouldCustomizeClientCodecs(){
    this.contextRunner.withUserConfiguration(CodecConfiguration.class).run((context) -> {
      WebClient.Builder builder=context.getBean(WebClient.Builder.class);
      CodecCustomizer codecCustomizer=context.getBean(CodecCustomizer.class);
      WebClientCodecCustomizer clientCustomizer=context.getBean(WebClientCodecCustomizer.class);
      builder.build();
      assertThat(clientCustomizer).isNotNull();
      verify(codecCustomizer).customize(any(CodecConfigurer.class));
    }
);
  }
  @Test public void webClientShouldApplyCustomizers(){
    this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class).run((context) -> {
      WebClient.Builder builder=context.getBean(WebClient.Builder.class);
      WebClientCustomizer customizer=context.getBean("webClientCustomizer",WebClientCustomizer.class);
      builder.build();
      verify(customizer).customize(any(WebClient.Builder.class));
    }
);
  }
  @Test public void shouldGetPrototypeScopedBean(){
    this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class).run((context) -> {
      ClientHttpResponse response=mock(ClientHttpResponse.class);
      ClientHttpConnector firstConnector=mock(ClientHttpConnector.class);
      given(firstConnector.connect(any(),any(),any())).willReturn(Mono.just(response));
      WebClient.Builder firstBuilder=context.getBean(WebClient.Builder.class);
      firstBuilder.clientConnector(firstConnector).baseUrl("http://first.example.org");
      ClientHttpConnector secondConnector=mock(ClientHttpConnector.class);
      given(secondConnector.connect(any(),any(),any())).willReturn(Mono.just(response));
      WebClient.Builder secondBuilder=context.getBean(WebClient.Builder.class);
      secondBuilder.clientConnector(secondConnector).baseUrl("http://second.example.org");
      assertThat(firstBuilder).isNotEqualTo(secondBuilder);
      firstBuilder.build().get().uri("/foo").exchange().block();
      secondBuilder.build().get().uri("/foo").exchange().block();
      verify(firstConnector).connect(eq(HttpMethod.GET),eq(URI.create("http://first.example.org/foo")),any());
      verify(secondConnector).connect(eq(HttpMethod.GET),eq(URI.create("http://second.example.org/foo")),any());
      WebClientCustomizer customizer=context.getBean("webClientCustomizer",WebClientCustomizer.class);
      verify(customizer,times(1)).customize(any(WebClient.Builder.class));
    }
);
  }
  @Test public void shouldNotCreateClientBuilderIfAlreadyPresent(){
    this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class,CustomWebClientBuilderConfig.class).run((context) -> {
      WebClient.Builder builder=context.getBean(WebClient.Builder.class);
      assertThat(builder).isInstanceOf(MyWebClientBuilder.class);
    }
);
  }
@Configuration static class CodecConfiguration {
    @Bean public CodecCustomizer myCodecCustomizer(){
      return mock(CodecCustomizer.class);
    }
  }
@Configuration static class WebClientCustomizerConfig {
    @Bean public WebClientCustomizer webClientCustomizer(){
      return mock(WebClientCustomizer.class);
    }
  }
@Configuration static class CustomWebClientBuilderConfig {
    @Bean public MyWebClientBuilder myWebClientBuilder(){
      return mock(MyWebClientBuilder.class);
    }
  }
interface MyWebClientBuilder extends WebClient.Builder {
  }
}
