/** 
 * Tests for  {@link WebEndpointAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Yunkun Huang
 * @author Phillip Webb
 */
public class WebEndpointAutoConfigurationTests {
  private static final AutoConfigurations CONFIGURATIONS=AutoConfigurations.of(EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class);
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(CONFIGURATIONS);
  @Test public void webApplicationConfiguresEndpointMediaTypes(){
    this.contextRunner.run((context) -> {
      EndpointMediaTypes endpointMediaTypes=context.getBean(EndpointMediaTypes.class);
      assertThat(endpointMediaTypes.getConsumed()).containsExactly(ActuatorMediaType.V2_JSON,"application/json");
    }
);
  }
  @Test public void webApplicationConfiguresPathMapper(){
    this.contextRunner.withPropertyValues("management.endpoints.web.path-mapping.health=healthcheck").run((context) -> {
      assertThat(context).hasSingleBean(PathMapper.class);
      String pathMapping=context.getBean(PathMapper.class).getRootPath(EndpointId.of("health"));
      assertThat(pathMapping).isEqualTo("healthcheck");
    }
);
  }
  @Test public void webApplicationSupportCustomPathMatcher(){
    this.contextRunner.withPropertyValues("management.endpoints.web.exposure.include=*","management.endpoints.web.path-mapping.testanotherone=foo").withUserConfiguration(TestPathMatcher.class,TestOneEndpoint.class,TestAnotherOneEndpoint.class,TestTwoEndpoint.class).run((context) -> {
      WebEndpointDiscoverer discoverer=context.getBean(WebEndpointDiscoverer.class);
      Collection<ExposableWebEndpoint> endpoints=discoverer.getEndpoints();
      ExposableWebEndpoint[] webEndpoints=endpoints.toArray(new ExposableWebEndpoint[0]);
      List<String> paths=Arrays.stream(webEndpoints).map(PathMappedEndpoint::getRootPath).collect(Collectors.toList());
      assertThat(paths).containsOnly("1/testone","foo","testtwo");
    }
);
  }
  @Test public void webApplicationConfiguresEndpointDiscoverer(){
    this.contextRunner.run((context) -> {
      assertThat(context).hasSingleBean(ControllerEndpointDiscoverer.class);
      assertThat(context).hasSingleBean(WebEndpointDiscoverer.class);
    }
);
  }
  @Test public void webApplicationConfiguresExposeExcludePropertyEndpointFilter(){
    this.contextRunner.run((context) -> assertThat(context).getBeans(ExposeExcludePropertyEndpointFilter.class).containsKeys("webExposeExcludePropertyEndpointFilter","controllerExposeExcludePropertyEndpointFilter"));
  }
  @Test public void contextShouldConfigureServletEndpointDiscoverer(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(ServletEndpointDiscoverer.class));
  }
  @Test public void contextWhenNotServletShouldNotConfigureServletEndpointDiscoverer(){
    new ApplicationContextRunner().withConfiguration(CONFIGURATIONS).run((context) -> assertThat(context).doesNotHaveBean(ServletEndpointDiscoverer.class));
  }
@Component private static class TestPathMatcher implements PathMapper {
    @Override public String getRootPath(    EndpointId endpointId){
      if (endpointId.toString().endsWith("one")) {
        return "1/" + endpointId.toString();
      }
      return null;
    }
  }
@Component @Endpoint(id="testone") private static class TestOneEndpoint {
  }
@Component @Endpoint(id="testanotherone") private static class TestAnotherOneEndpoint {
  }
@Component @Endpoint(id="testtwo") private static class TestTwoEndpoint {
  }
}
