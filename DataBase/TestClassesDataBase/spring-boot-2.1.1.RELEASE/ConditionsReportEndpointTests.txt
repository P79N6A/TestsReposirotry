/** 
 * Tests for  {@link ConditionsReportEndpoint}.
 * @author Greg Turnquist
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class ConditionsReportEndpointTests {
  @Test public void invoke(){
    new ApplicationContextRunner().withUserConfiguration(Config.class).run((context) -> {
      ContextConditionEvaluation report=context.getBean(ConditionsReportEndpoint.class).applicationConditionEvaluation().getContexts().get(context.getId());
      assertThat(report.getPositiveMatches()).isEmpty();
      assertThat(report.getNegativeMatches()).containsKey("a");
      assertThat(report.getUnconditionalClasses()).contains("b");
      assertThat(report.getExclusions()).contains("com.foo.Bar");
    }
);
  }
@Configuration @EnableConfigurationProperties public static class Config {
    private final ConfigurableApplicationContext context;
    public Config(    ConfigurableApplicationContext context){
      this.context=context;
    }
    @PostConstruct public void setupAutoConfigurationReport(){
      ConditionEvaluationReport report=ConditionEvaluationReport.get(this.context.getBeanFactory());
      report.recordEvaluationCandidates(Arrays.asList("a","b"));
      report.recordConditionEvaluation("a",mock(Condition.class),mock(ConditionOutcome.class));
      report.recordExclusions(Collections.singletonList("com.foo.Bar"));
    }
    @Bean public ConditionsReportEndpoint endpoint(){
      return new ConditionsReportEndpoint(this.context);
    }
  }
}
