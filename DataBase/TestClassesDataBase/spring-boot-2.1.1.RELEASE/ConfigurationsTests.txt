/** 
 * Tests for  {@link Configurations}.
 * @author Phillip Webb
 */
public class ConfigurationsTests {
  @Test public void createWhenClassesIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new TestConfigurations(null)).withMessageContaining("Classes must not be null");
  }
  @Test public void createShouldSortClasses(){
    TestSortedConfigurations configurations=new TestSortedConfigurations(Arrays.asList(OutputStream.class,InputStream.class));
    assertThat(configurations.getClasses()).containsExactly(InputStream.class,OutputStream.class);
  }
  @Test public void getClassesShouldMergeByClassAndSort(){
    Configurations c1=new TestSortedConfigurations(Arrays.asList(OutputStream.class,InputStream.class));
    Configurations c2=new TestConfigurations(Arrays.asList(Short.class));
    Configurations c3=new TestSortedConfigurations(Arrays.asList(String.class,Integer.class));
    Configurations c4=new TestConfigurations(Arrays.asList(Long.class,Byte.class));
    Class<?>[] classes=Configurations.getClasses(c1,c2,c3,c4);
    assertThat(classes).containsExactly(Short.class,Long.class,Byte.class,InputStream.class,Integer.class,OutputStream.class,String.class);
  }
@Order(Ordered.HIGHEST_PRECEDENCE) static class TestConfigurations extends Configurations {
    protected TestConfigurations(    Collection<Class<?>> classes){
      super(classes);
    }
    @Override protected Configurations merge(    Set<Class<?>> mergedClasses){
      return new TestConfigurations(mergedClasses);
    }
  }
@Order(Ordered.LOWEST_PRECEDENCE) static class TestSortedConfigurations extends Configurations {
    protected TestSortedConfigurations(    Collection<Class<?>> classes){
      super(classes);
    }
    @Override protected Collection<Class<?>> sort(    Collection<Class<?>> classes){
      ArrayList<Class<?>> sorted=new ArrayList<>(classes);
      sorted.sort(Comparator.comparing(ClassUtils::getShortName));
      return sorted;
    }
    @Override protected Configurations merge(    Set<Class<?>> mergedClasses){
      return new TestSortedConfigurations(mergedClasses);
    }
  }
}
