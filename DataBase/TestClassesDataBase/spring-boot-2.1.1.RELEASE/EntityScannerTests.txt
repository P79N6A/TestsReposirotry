/** 
 * Tests for  {@link EntityScanner}.
 * @author Phillip Webb
 */
public class EntityScannerTests {
  @Test public void createWhenContextIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new EntityScanner(null)).withMessageContaining("Context must not be null");
  }
  @Test public void scanShouldScanFromSinglePackage() throws Exception {
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(ScanConfig.class);
    EntityScanner scanner=new EntityScanner(context);
    Set<Class<?>> scanned=scanner.scan(Entity.class);
    assertThat(scanned).containsOnly(EntityA.class,EntityB.class,EntityC.class);
    context.close();
  }
  @Test public void scanShouldScanFromMultiplePackages() throws Exception {
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(ScanAConfig.class,ScanBConfig.class);
    EntityScanner scanner=new EntityScanner(context);
    Set<Class<?>> scanned=scanner.scan(Entity.class);
    assertThat(scanned).containsOnly(EntityA.class,EntityB.class);
    context.close();
  }
  @Test public void scanShouldFilterOnAnnotation() throws Exception {
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(ScanConfig.class);
    EntityScanner scanner=new EntityScanner(context);
    assertThat(scanner.scan(Entity.class)).containsOnly(EntityA.class,EntityB.class,EntityC.class);
    assertThat(scanner.scan(Embeddable.class)).containsOnly(EmbeddableA.class,EmbeddableB.class,EmbeddableC.class);
    assertThat(scanner.scan(Entity.class,Embeddable.class)).containsOnly(EntityA.class,EntityB.class,EntityC.class,EmbeddableA.class,EmbeddableB.class,EmbeddableC.class);
    context.close();
  }
@Configuration @EntityScan("org.springframework.boot.autoconfigure.domain.scan") static class ScanConfig {
  }
@Configuration @EntityScan(basePackageClasses=EntityA.class) static class ScanAConfig {
  }
@Configuration @EntityScan(basePackageClasses=EntityB.class) static class ScanBConfig {
  }
}
