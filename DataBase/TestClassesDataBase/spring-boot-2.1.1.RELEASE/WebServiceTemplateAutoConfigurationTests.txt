/** 
 * Tests for  {@link WebServiceTemplateAutoConfiguration}.
 * @author Stephane Nicoll
 * @author Dmytro Nosan
 */
public class WebServiceTemplateAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(WebServiceTemplateAutoConfiguration.class));
  @Test public void autoConfiguredBuilderShouldNotHaveMarshallerAndUnmarshaller(){
    this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {
      WebServiceTemplate webServiceTemplate=builder.build();
      assertThat(webServiceTemplate.getUnmarshaller()).isNull();
      assertThat(webServiceTemplate.getMarshaller()).isNull();
    }
));
  }
  @Test public void autoConfiguredBuilderShouldHaveHttpMessageSenderByDefault(){
    this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {
      WebServiceTemplate webServiceTemplate=builder.build();
      assertThat(webServiceTemplate.getMessageSenders()).hasSize(1);
      WebServiceMessageSender messageSender=webServiceTemplate.getMessageSenders()[0];
      assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class);
    }
));
  }
  @Test public void webServiceTemplateWhenHasCustomBuilderShouldUseCustomBuilder(){
    this.contextRunner.withUserConfiguration(CustomWebServiceTemplateBuilderConfig.class).run(assertWebServiceTemplateBuilder((builder) -> {
      WebServiceTemplate webServiceTemplate=builder.build();
      assertThat(webServiceTemplate.getMarshaller()).isSameAs(CustomWebServiceTemplateBuilderConfig.marshaller);
    }
));
  }
  @Test public void webServiceTemplateShouldApplyCustomizer(){
    this.contextRunner.withUserConfiguration(WebServiceTemplateCustomizerConfig.class).run(assertWebServiceTemplateBuilder((builder) -> {
      WebServiceTemplate webServiceTemplate=builder.build();
      assertThat(webServiceTemplate.getUnmarshaller()).isSameAs(WebServiceTemplateCustomizerConfig.unmarshaller);
    }
));
  }
  @Test public void builderShouldBeFreshForEachUse(){
    this.contextRunner.withUserConfiguration(DirtyWebServiceTemplateConfig.class).run((context) -> assertThat(context).hasNotFailed());
  }
  private ContextConsumer<AssertableApplicationContext> assertWebServiceTemplateBuilder(  Consumer<WebServiceTemplateBuilder> builder){
    return (context) -> {
      assertThat(context).hasSingleBean(WebServiceTemplateBuilder.class);
      builder.accept(context.getBean(WebServiceTemplateBuilder.class));
    }
;
  }
@Configuration static class DirtyWebServiceTemplateConfig {
    @Bean public WebServiceTemplate webServiceTemplateOne(    WebServiceTemplateBuilder builder){
      try {
        return builder.build();
      }
  finally {
        breakBuilderOnNextCall(builder);
      }
    }
    @Bean public WebServiceTemplate webServiceTemplateTwo(    WebServiceTemplateBuilder builder){
      try {
        return builder.build();
      }
  finally {
        breakBuilderOnNextCall(builder);
      }
    }
    private void breakBuilderOnNextCall(    WebServiceTemplateBuilder builder){
      builder.additionalCustomizers((webServiceTemplate) -> {
        throw new IllegalStateException();
      }
);
    }
  }
@Configuration static class CustomWebServiceTemplateBuilderConfig {
    private static final Marshaller marshaller=new Jaxb2Marshaller();
    @Bean public WebServiceTemplateBuilder webServiceTemplateBuilder(){
      return new WebServiceTemplateBuilder().setMarshaller(marshaller);
    }
  }
@Configuration static class WebServiceTemplateCustomizerConfig {
    private static final Unmarshaller unmarshaller=new Jaxb2Marshaller();
    @Bean public WebServiceTemplateCustomizer webServiceTemplateCustomizer(){
      return (ws) -> ws.setUnmarshaller(unmarshaller);
    }
  }
}
