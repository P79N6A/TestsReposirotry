/** 
 * Test  {@link SpyBean} when mixed with Spring AOP.
 * @author Phillip Webb
 * @see <a href="https://github.com/spring-projects/spring-boot/issues/5837">5837</a>
 */
@RunWith(SpringRunner.class) public class SpyBeanWithAopProxyTests {
  @SpyBean private DateService dateService;
  @Test public void verifyShouldUseProxyTarget() throws Exception {
    Long d1=this.dateService.getDate(false);
    Thread.sleep(200);
    Long d2=this.dateService.getDate(false);
    assertThat(d1).isEqualTo(d2);
    verify(this.dateService,times(1)).getDate(false);
    verify(this.dateService,times(1)).getDate(matchesFalse());
    verify(this.dateService,times(1)).getDate(matchesAnyBoolean());
  }
  private boolean matchesFalse(){
    if (isTestingMockito1()) {
      Method method=ReflectionUtils.findMethod(ClassUtils.resolveClassName("org.mockito.Matchers",null),"eq",Boolean.TYPE);
      return (boolean)ReflectionUtils.invokeMethod(method,null,false);
    }
    return ArgumentMatchers.eq(false);
  }
  private boolean matchesAnyBoolean(){
    if (isTestingMockito1()) {
      Method method=ReflectionUtils.findMethod(ClassUtils.resolveClassName("org.mockito.Matchers",null),"anyBoolean");
      return (boolean)ReflectionUtils.invokeMethod(method,null);
    }
    return ArgumentMatchers.anyBoolean();
  }
  private boolean isTestingMockito1(){
    return ClassUtils.isPresent("org.mockito.ReturnValues",null);
  }
@Configuration @EnableCaching(proxyTargetClass=true) @Import(DateService.class) static class Config {
    @Bean public CacheResolver cacheResolver(    CacheManager cacheManager){
      SimpleCacheResolver resolver=new SimpleCacheResolver();
      resolver.setCacheManager(cacheManager);
      return resolver;
    }
    @Bean public ConcurrentMapCacheManager cacheManager(){
      ConcurrentMapCacheManager cacheManager=new ConcurrentMapCacheManager();
      cacheManager.setCacheNames(Arrays.asList("test"));
      return cacheManager;
    }
  }
@Service static class DateService {
    @Cacheable(cacheNames="test") public Long getDate(    boolean arg){
      return System.nanoTime();
    }
  }
}
