/** 
 * Tests for  {@link CodecsAutoConfiguration}.
 * @author Madhura Bhave
 * @author Andy Wilkinson
 */
public class CodecsAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(CodecsAutoConfiguration.class));
  @Test public void autoConfigShouldProvideALoggingRequestDetailsCustomizer(){
    this.contextRunner.run((context) -> {
      CodecCustomizer customizer=context.getBean(CodecCustomizer.class);
      CodecConfigurer configurer=new DefaultClientCodecConfigurer();
      customizer.customize(configurer);
      assertThat(configurer.defaultCodecs()).hasFieldOrPropertyWithValue("enableLoggingRequestDetails",false);
    }
);
  }
  @Test public void loggingRequestDetailsCustomizerShouldUseHttpProperties(){
    this.contextRunner.withPropertyValues("spring.http.log-request-details=true").run((context) -> {
      CodecCustomizer customizer=context.getBean(CodecCustomizer.class);
      CodecConfigurer configurer=new DefaultClientCodecConfigurer();
      customizer.customize(configurer);
      assertThat(configurer.defaultCodecs()).hasFieldOrPropertyWithValue("enableLoggingRequestDetails",true);
    }
);
  }
  @Test public void loggingRequestDetailsBeanShouldHaveOrderZero(){
    this.contextRunner.run((context) -> {
      Method customizerMethod=ReflectionUtils.findMethod(CodecsAutoConfiguration.LoggingCodecConfiguration.class,"loggingCodecCustomizer",HttpProperties.class);
      Integer order=new TestAnnotationAwareOrderComparator().findOrder(customizerMethod);
      assertThat(order).isEqualTo(0);
    }
);
  }
  @Test public void jacksonCodecCustomizerBacksOffWhenThereIsNoObjectMapper(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean("jacksonCodecCustomizer"));
  }
  @Test public void jacksonCodecCustomizerIsAutoConfiguredWhenObjectMapperIsPresent(){
    this.contextRunner.withUserConfiguration(ObjectMapperConfiguration.class).run((context) -> assertThat(context).hasBean("jacksonCodecCustomizer"));
  }
  @Test public void userProvidedCustomizerCanOverrideJacksonCodecCustomizer(){
    this.contextRunner.withUserConfiguration(ObjectMapperConfiguration.class,CodecCustomizerConfiguration.class).run((context) -> {
      List<CodecCustomizer> codecCustomizers=context.getBean(CodecCustomizers.class).codecCustomizers;
      assertThat(codecCustomizers).hasSize(3);
      assertThat(codecCustomizers.get(2)).isInstanceOf(TestCodecCustomizer.class);
    }
);
  }
static class TestAnnotationAwareOrderComparator extends AnnotationAwareOrderComparator {
    @Override public Integer findOrder(    Object obj){
      return super.findOrder(obj);
    }
  }
@Configuration static class ObjectMapperConfiguration {
    @Bean ObjectMapper objectMapper(){
      return new ObjectMapper();
    }
  }
@Configuration static class CodecCustomizerConfiguration {
    @Bean CodecCustomizer codecCustomizer(){
      return new TestCodecCustomizer();
    }
    @Bean CodecCustomizers codecCustomizers(    List<CodecCustomizer> customizers){
      return new CodecCustomizers(customizers);
    }
  }
private static final class TestCodecCustomizer implements CodecCustomizer {
    @Override public void customize(    CodecConfigurer configurer){
    }
  }
private static final class CodecCustomizers {
    private final List<CodecCustomizer> codecCustomizers;
    private CodecCustomizers(    List<CodecCustomizer> codecCustomizers){
      this.codecCustomizers=codecCustomizers;
    }
  }
}
