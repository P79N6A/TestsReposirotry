/** 
 * Tests for  {@link SpringApplicationAdminMXBeanRegistrar}.
 * @author Stephane Nicoll
 * @author Andy Wilkinson
 */
public class SpringApplicationAdminMXBeanRegistrarTests {
  private static final String OBJECT_NAME="org.springframework.boot:type=Test,name=SpringApplication";
  private MBeanServer mBeanServer;
  private ConfigurableApplicationContext context;
  @Before public void setup(){
    this.mBeanServer=ManagementFactory.getPlatformMBeanServer();
  }
  @After public void closeContext(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void validateReadyFlag(){
    final ObjectName objectName=createObjectName(OBJECT_NAME);
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    application.addListeners((    ContextRefreshedEvent event) -> {
      try {
        assertThat(isApplicationReady(objectName)).isFalse();
      }
 catch (      Exception ex) {
        throw new IllegalStateException("Could not contact spring application admin bean",ex);
      }
    }
);
    this.context=application.run();
    assertThat(isApplicationReady(objectName)).isTrue();
  }
  @Test public void eventsFromOtherContextsAreIgnored() throws MalformedObjectNameException {
    SpringApplicationAdminMXBeanRegistrar registrar=new SpringApplicationAdminMXBeanRegistrar(OBJECT_NAME);
    ConfigurableApplicationContext context=mock(ConfigurableApplicationContext.class);
    registrar.setApplicationContext(context);
    registrar.onApplicationReadyEvent(new ApplicationReadyEvent(new SpringApplication(),null,mock(ConfigurableApplicationContext.class)));
    assertThat(isApplicationReady(registrar)).isFalse();
    registrar.onApplicationReadyEvent(new ApplicationReadyEvent(new SpringApplication(),null,context));
    assertThat(isApplicationReady(registrar)).isTrue();
  }
  private boolean isApplicationReady(  SpringApplicationAdminMXBeanRegistrar registrar){
    return (Boolean)ReflectionTestUtils.getField(registrar,"ready");
  }
  @Test public void environmentIsExposed(){
    final ObjectName objectName=createObjectName(OBJECT_NAME);
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run("--foo.bar=blam");
    assertThat(isApplicationReady(objectName)).isTrue();
    assertThat(isApplicationEmbeddedWebApplication(objectName)).isFalse();
    assertThat(getProperty(objectName,"foo.bar")).isEqualTo("blam");
    assertThat(getProperty(objectName,"does.not.exist.test")).isNull();
  }
  @Test public void shutdownApp() throws InstanceNotFoundException {
    final ObjectName objectName=createObjectName(OBJECT_NAME);
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run();
    assertThat(this.context.isRunning()).isTrue();
    invokeShutdown(objectName);
    assertThat(this.context.isRunning()).isFalse();
    assertThatExceptionOfType(InstanceNotFoundException.class).isThrownBy(() -> this.mBeanServer.getObjectInstance(objectName));
  }
  private Boolean isApplicationReady(  ObjectName objectName){
    return getAttribute(objectName,Boolean.class,"Ready");
  }
  private Boolean isApplicationEmbeddedWebApplication(  ObjectName objectName){
    return getAttribute(objectName,Boolean.class,"EmbeddedWebApplication");
  }
  private String getProperty(  ObjectName objectName,  String key){
    try {
      return (String)this.mBeanServer.invoke(objectName,"getProperty",new Object[]{key},new String[]{String.class.getName()});
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex.getMessage(),ex);
    }
  }
  private <T>T getAttribute(  ObjectName objectName,  Class<T> type,  String attribute){
    try {
      Object value=this.mBeanServer.getAttribute(objectName,attribute);
      assertThat(value == null || type.isInstance(value)).isTrue();
      return type.cast(value);
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex.getMessage(),ex);
    }
  }
  private void invokeShutdown(  ObjectName objectName){
    try {
      this.mBeanServer.invoke(objectName,"shutdown",null,null);
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex.getMessage(),ex);
    }
  }
  private ObjectName createObjectName(  String jmxName){
    try {
      return new ObjectName(jmxName);
    }
 catch (    MalformedObjectNameException ex) {
      throw new IllegalStateException("Invalid jmx name " + jmxName,ex);
    }
  }
@Configuration static class Config {
    @Bean public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar() throws MalformedObjectNameException {
      return new SpringApplicationAdminMXBeanRegistrar(OBJECT_NAME);
    }
  }
}
