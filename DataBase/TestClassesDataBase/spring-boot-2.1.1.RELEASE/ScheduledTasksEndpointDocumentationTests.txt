/** 
 * Tests for generating documentation describing the  {@link ScheduledTasksEndpoint}.
 * @author Andy Wilkinson
 */
public class ScheduledTasksEndpointDocumentationTests extends MockMvcEndpointDocumentationTests {
  @Test public void scheduledTasks() throws Exception {
    this.mockMvc.perform(get("/actuator/scheduledtasks")).andExpect(status().isOk()).andDo(document("scheduled-tasks",preprocessResponse(replacePattern(Pattern.compile("org.*\\.ScheduledTasksEndpointDocumentationTests\\$" + "TestConfiguration"),"com.example.Processor")),responseFields(fieldWithPath("cron").description("Cron tasks, if any."),targetFieldWithPrefix("cron.[]"),fieldWithPath("cron.[].expression").description("Cron expression."),fieldWithPath("fixedDelay").description("Fixed delay tasks, if any."),targetFieldWithPrefix("fixedDelay.[]"),initialDelayWithPrefix("fixedDelay.[]."),fieldWithPath("fixedDelay.[].interval").description("Interval, in milliseconds, between the end of the last" + " execution and the start of the next."),fieldWithPath("fixedRate").description("Fixed rate tasks, if any."),targetFieldWithPrefix("fixedRate.[]."),fieldWithPath("fixedRate.[].interval").description("Interval, in milliseconds, between the start of each execution."),initialDelayWithPrefix("fixedRate.[]."))));
  }
  private FieldDescriptor targetFieldWithPrefix(  String prefix){
    return fieldWithPath(prefix + "runnable.target").description("Target that will be executed.");
  }
  private FieldDescriptor initialDelayWithPrefix(  String prefix){
    return fieldWithPath(prefix + "initialDelay").description("Delay, in milliseconds, before first execution.");
  }
@Configuration @EnableScheduling @Import(BaseDocumentationConfiguration.class) static class TestConfiguration {
    @Bean public ScheduledTasksEndpoint endpoint(    Collection<ScheduledTaskHolder> holders){
      return new ScheduledTasksEndpoint(holders);
    }
    @Scheduled(cron="0 0 0/3 1/1 * ?") public void processOrders(){
    }
    @Scheduled(fixedDelay=5000,initialDelay=5000) public void purge(){
    }
    @Scheduled(fixedRate=3000,initialDelay=10000) public void retrieveIssues(){
    }
  }
}
