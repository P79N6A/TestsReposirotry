/** 
 * {@link BlockJUnit4ClassRunner} for Spring WebFlux.
 * @author Andy Wilkinson
 * @author Phillip Webb
 */
class WebFluxEndpointsRunner extends AbstractWebEndpointRunner {
  WebFluxEndpointsRunner(  Class<?> testClass) throws InitializationError {
    super(testClass,"Reactive",WebFluxEndpointsRunner::createContext);
  }
  private static ConfigurableApplicationContext createContext(  List<Class<?>> classes){
    AnnotationConfigReactiveWebServerApplicationContext context=new AnnotationConfigReactiveWebServerApplicationContext();
    classes.add(WebFluxEndpointConfiguration.class);
    context.register(ClassUtils.toClassArray(classes));
    context.refresh();
    return context;
  }
@Configuration @ImportAutoConfiguration({JacksonAutoConfiguration.class,WebFluxAutoConfiguration.class}) static class WebFluxEndpointConfiguration implements ApplicationListener<WebServerInitializedEvent> {
    private final ApplicationContext applicationContext;
    WebFluxEndpointConfiguration(    ApplicationContext applicationContext){
      this.applicationContext=applicationContext;
    }
    @Bean public NettyReactiveWebServerFactory netty(){
      return new NettyReactiveWebServerFactory(0);
    }
    @Bean public PortHolder portHolder(){
      return new PortHolder();
    }
    @Override public void onApplicationEvent(    WebServerInitializedEvent event){
      portHolder().setPort(event.getWebServer().getPort());
    }
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return WebHttpHandlerBuilder.applicationContext(applicationContext).build();
    }
    @Bean public WebFluxEndpointHandlerMapping webEndpointReactiveHandlerMapping(){
      List<String> mediaTypes=Arrays.asList(MediaType.APPLICATION_JSON_VALUE,ActuatorMediaType.V2_JSON);
      EndpointMediaTypes endpointMediaTypes=new EndpointMediaTypes(mediaTypes,mediaTypes);
      WebEndpointDiscoverer discoverer=new WebEndpointDiscoverer(this.applicationContext,new ConversionServiceParameterValueMapper(),endpointMediaTypes,null,Collections.emptyList(),Collections.emptyList());
      return new WebFluxEndpointHandlerMapping(new EndpointMapping("/actuator"),discoverer.getEndpoints(),endpointMediaTypes,new CorsConfiguration(),new EndpointLinksResolver(discoverer.getEndpoints()));
    }
  }
}
