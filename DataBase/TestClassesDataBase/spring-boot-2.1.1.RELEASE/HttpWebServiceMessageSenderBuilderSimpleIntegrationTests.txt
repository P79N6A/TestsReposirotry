/** 
 * Tests for  {@link HttpWebServiceMessageSenderBuilder} when no preferred HTTP clients areavailable
 * @author Stephane Nicoll
 */
@RunWith(ModifiedClassPathRunner.class) @ClassPathExclusions({"httpclient-*.jar","okhttp*.jar"}) public class HttpWebServiceMessageSenderBuilderSimpleIntegrationTests {
  private final HttpWebServiceMessageSenderBuilder builder=new HttpWebServiceMessageSenderBuilder();
  @Test public void buildUseUseSimpleClientByDefault(){
    WebServiceMessageSender messageSender=this.builder.build();
    assertSimpleClientRequestFactory(messageSender);
  }
  @Test public void buildWithCustomTimeouts(){
    WebServiceMessageSender messageSender=this.builder.setConnectTimeout(Duration.ofSeconds(5)).setReadTimeout(Duration.ofSeconds(2)).build();
    SimpleClientHttpRequestFactory requestFactory=assertSimpleClientRequestFactory(messageSender);
    assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout",5000);
    assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout",2000);
  }
  private SimpleClientHttpRequestFactory assertSimpleClientRequestFactory(  WebServiceMessageSender messageSender){
    assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class);
    ClientHttpRequestMessageSender sender=(ClientHttpRequestMessageSender)messageSender;
    ClientHttpRequestFactory requestFactory=sender.getRequestFactory();
    assertThat(requestFactory).isInstanceOf(SimpleClientHttpRequestFactory.class);
    return (SimpleClientHttpRequestFactory)requestFactory;
  }
}
