/** 
 * Tests for  {@link SpringBootTestRandomPortEnvironmentPostProcessor}.
 * @author Madhura Bhave
 * @author Andy Wilkinson
 */
public class SpringBootTestRandomPortEnvironmentPostProcessorTests {
  private SpringBootTestRandomPortEnvironmentPostProcessor postProcessor=new SpringBootTestRandomPortEnvironmentPostProcessor();
  private MockEnvironment environment;
  private MutablePropertySources propertySources;
  @Before public void setup(){
    this.environment=new MockEnvironment();
    this.propertySources=this.environment.getPropertySources();
  }
  @Test public void postProcessWhenServerAndManagementPortIsZeroInTestPropertySource(){
    addTestPropertySource("0","0");
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("0");
  }
  @Test public void postProcessWhenTestServerAndTestManagementPortAreNonZero(){
    addTestPropertySource("8080","8081");
    this.environment.setProperty("server.port","8080");
    this.environment.setProperty("management.server.port","8081");
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("8080");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("8081");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndTestManagementPortIsNotNull(){
    addTestPropertySource("0","8080");
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("8080");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortIsNull(){
    addTestPropertySource("0",null);
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isNull();
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndSameInProduction(){
    addTestPropertySource("0",null);
    Map<String,Object> other=new HashMap<>();
    other.put("server.port","8081");
    other.put("management.server.port","8081");
    MapPropertySource otherSource=new MapPropertySource("other",other);
    this.propertySources.addLast(otherSource);
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndDefaultSameInProduction(){
    addTestPropertySource("0",null);
    this.propertySources.addLast(new MapPropertySource("other",Collections.singletonMap("management.server.port","8080")));
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndDifferentInProduction(){
    addTestPropertySource("0",null);
    this.propertySources.addLast(new MapPropertySource("other",Collections.singletonMap("management.server.port","8081")));
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("0");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortMinusOne(){
    addTestPropertySource("0",null);
    this.propertySources.addLast(new MapPropertySource("other",Collections.singletonMap("management.server.port","-1")));
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("-1");
  }
  @Test public void postProcessWhenTestServerPortIsZeroAndManagementPortIsAnInteger(){
    addTestPropertySource("0",null);
    this.propertySources.addLast(new MapPropertySource("other",Collections.singletonMap("management.server.port",8081)));
    this.postProcessor.postProcessEnvironment(this.environment,null);
    assertThat(this.environment.getProperty("server.port")).isEqualTo("0");
    assertThat(this.environment.getProperty("management.server.port")).isEqualTo("0");
  }
  private void addTestPropertySource(  String serverPort,  String managementPort){
    Map<String,Object> source=new HashMap<>();
    source.put("server.port",serverPort);
    source.put("management.server.port",managementPort);
    MapPropertySource inlineTestSource=new MapPropertySource(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,source);
    this.propertySources.addFirst(inlineTestSource);
  }
}
