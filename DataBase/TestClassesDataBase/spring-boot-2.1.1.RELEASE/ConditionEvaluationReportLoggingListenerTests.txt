/** 
 * Tests for  {@link ConditionEvaluationReportLoggingListener}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 * @author Madhura Bhave
 */
public class ConditionEvaluationReportLoggingListenerTests {
  @Rule public OutputCapture outputCapture=new OutputCapture();
  private ConditionEvaluationReportLoggingListener initializer=new ConditionEvaluationReportLoggingListener();
  @Test public void logsDebugOnContextRefresh(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    this.initializer.initialize(context);
    context.register(Config.class);
    context.refresh();
    withDebugLogging(() -> this.initializer.onApplicationEvent(new ContextRefreshedEvent(context)));
    assertThat(this.outputCapture.toString()).contains("CONDITIONS EVALUATION REPORT");
  }
  @Test public void logsDebugOnError(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    this.initializer.initialize(context);
    context.register(ErrorConfig.class);
    try {
      context.refresh();
      fail("Did not error");
    }
 catch (    Exception ex) {
      withDebugLogging(() -> this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(),new String[0],context,ex)));
    }
    assertThat(this.outputCapture.toString()).contains("CONDITIONS EVALUATION REPORT");
  }
  @Test public void logsInfoOnErrorIfDebugDisabled(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    this.initializer.initialize(context);
    context.register(ErrorConfig.class);
    try {
      context.refresh();
      fail("Did not error");
    }
 catch (    Exception ex) {
      this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(),new String[0],context,ex));
    }
    assertThat(this.outputCapture.toString()).contains("Error starting" + " ApplicationContext. To display the conditions report re-run" + " your application with 'debug' enabled.");
  }
  @Test public void logsOutput(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    this.initializer.initialize(context);
    context.register(Config.class);
    ConditionEvaluationReport.get(context.getBeanFactory()).recordExclusions(Arrays.asList("com.foo.Bar"));
    context.refresh();
    withDebugLogging(() -> this.initializer.onApplicationEvent(new ContextRefreshedEvent(context)));
    assertThat(this.outputCapture.toString()).contains("not a servlet web application (OnWebApplicationCondition)");
  }
  @Test public void canBeUsedInApplicationContext(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    context.register(Config.class);
    new ConditionEvaluationReportLoggingListener().initialize(context);
    context.refresh();
    assertThat(context.getBean(ConditionEvaluationReport.class)).isNotNull();
  }
  @Test public void canBeUsedInNonGenericApplicationContext(){
    AnnotationConfigWebApplicationContext context=new AnnotationConfigWebApplicationContext();
    context.setServletContext(new MockServletContext());
    context.register(Config.class);
    new ConditionEvaluationReportLoggingListener().initialize(context);
    context.refresh();
    assertThat(context.getBean(ConditionEvaluationReport.class)).isNotNull();
  }
  @Test public void listenerWithInfoLevelShouldLogAtInfo(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    ConditionEvaluationReportLoggingListener initializer=new ConditionEvaluationReportLoggingListener(LogLevel.INFO);
    initializer.initialize(context);
    context.register(Config.class);
    context.refresh();
    initializer.onApplicationEvent(new ContextRefreshedEvent(context));
    assertThat(this.outputCapture.toString()).contains("CONDITIONS EVALUATION REPORT");
  }
  @Test public void listenerSupportsOnlyInfoAndDebug(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ConditionEvaluationReportLoggingListener(LogLevel.TRACE)).withMessageContaining("LogLevel must be INFO or DEBUG");
  }
  @Test public void noErrorIfNotInitialized(){
    this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(),new String[0],null,new RuntimeException("Planned")));
    assertThat(this.outputCapture.toString()).contains("Unable to provide the conditions report");
  }
  private void withDebugLogging(  Runnable runnable){
    LoggerContext context=(LoggerContext)StaticLoggerBinder.getSingleton().getLoggerFactory();
    Logger logger=context.getLogger(ConditionEvaluationReportLoggingListener.class);
    Level currentLevel=logger.getLevel();
    logger.setLevel(Level.DEBUG);
    try {
      runnable.run();
    }
  finally {
      logger.setLevel(currentLevel);
    }
  }
@Configuration @Import({WebMvcAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) static class Config {
  }
@Configuration @Import(WebMvcAutoConfiguration.class) static class ErrorConfig {
    @Bean public String iBreak(){
      throw new RuntimeException();
    }
  }
}
