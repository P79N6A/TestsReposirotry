/** 
 * Tests for  {@link OAuth2ResourceServerAutoConfiguration}.
 * @author Madhura Bhave
 * @author Artsiom Yudovin
 */
public class OAuth2ResourceServerAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(OAuth2ResourceServerAutoConfiguration.class)).withUserConfiguration(TestConfig.class);
  private MockWebServer server;
  @After public void cleanup() throws Exception {
    if (this.server != null) {
      this.server.shutdown();
    }
  }
  @Test public void autoConfigurationShouldConfigureResourceServer(){
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").run((context) -> {
      assertThat(context.getBean(JwtDecoder.class)).isInstanceOf(NimbusJwtDecoderJwkSupport.class);
      assertThat(getBearerTokenFilter(context)).isNotNull();
    }
);
  }
  @Test public void autoConfigurationShouldConfigureResourceServerUsingOidcIssuerUri() throws Exception {
    this.server=new MockWebServer();
    this.server.start();
    String issuer=this.server.url("").toString();
    String cleanIssuerPath=cleanIssuerPath(issuer);
    setupMockResponse(cleanIssuerPath);
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.issuer-uri=http://" + this.server.getHostName() + ":"+ this.server.getPort()).run((context) -> {
      assertThat(context.getBean(JwtDecoder.class)).isInstanceOf(NimbusJwtDecoderJwkSupport.class);
      assertThat(getBearerTokenFilter(context)).isNotNull();
    }
);
  }
  @Test public void autoConfigurationWhenBothSetUriAndIssuerUriPresentShouldUseSetUri(){
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.issuer-uri=http://issuer-uri.com","spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").run((context) -> {
      assertThat(context.getBean(JwtDecoder.class)).isInstanceOf(NimbusJwtDecoderJwkSupport.class);
      assertThat(getBearerTokenFilter(context)).isNotNull();
      assertThat(context.containsBean("jwtDecoderByJwkKeySetUri")).isTrue();
      assertThat(context.containsBean("jwtDecoderByOidcIssuerUri")).isFalse();
    }
);
  }
  @Test public void autoConfigurationWhenJwkSetUriNullShouldNotFail(){
    this.contextRunner.run((context) -> assertThat(getBearerTokenFilter(context)).isNull());
  }
  @Test public void jwtDecoderByJwkSetUriIsConditionalOnMissingBean(){
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(JwtDecoderConfig.class).run((context) -> assertThat(getBearerTokenFilter(context)).isNotNull());
  }
  @Test public void jwtDecoderByOidcIssuerUriIsConditionalOnMissingBean(){
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com").withUserConfiguration(JwtDecoderConfig.class).run((context) -> assertThat(getBearerTokenFilter(context)).isNotNull());
  }
  @Test public void autoConfigurationShouldBeConditionalOnJwtAuthenticationTokenClass(){
    this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(JwtDecoderConfig.class).withClassLoader(new FilteredClassLoader(JwtAuthenticationToken.class)).run((context) -> assertThat(getBearerTokenFilter(context)).isNull());
  }
  @SuppressWarnings("unchecked") private Filter getBearerTokenFilter(  AssertableWebApplicationContext context){
    FilterChainProxy filterChain=(FilterChainProxy)context.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);
    List<SecurityFilterChain> filterChains=filterChain.getFilterChains();
    List<Filter> filters=(List<Filter>)ReflectionTestUtils.getField(filterChains.get(0),"filters");
    return filters.stream().filter((f) -> f instanceof BearerTokenAuthenticationFilter).findFirst().orElse(null);
  }
  private String cleanIssuerPath(  String issuer){
    if (issuer.endsWith("/")) {
      return issuer.substring(0,issuer.length() - 1);
    }
    return issuer;
  }
  private void setupMockResponse(  String issuer) throws JsonProcessingException {
    MockResponse mockResponse=new MockResponse().setResponseCode(HttpStatus.OK.value()).setBody(new ObjectMapper().writeValueAsString(getResponse(issuer))).setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON_VALUE);
    this.server.enqueue(mockResponse);
  }
  private Map<String,Object> getResponse(  String issuer){
    Map<String,Object> response=new HashMap<>();
    response.put("authorization_endpoint","https://example.com/o/oauth2/v2/auth");
    response.put("claims_supported",Collections.emptyList());
    response.put("code_challenge_methods_supported",Collections.emptyList());
    response.put("id_token_signing_alg_values_supported",Collections.emptyList());
    response.put("issuer",issuer);
    response.put("jwks_uri","https://example.com/oauth2/v3/certs");
    response.put("response_types_supported",Collections.emptyList());
    response.put("revocation_endpoint","https://example.com/o/oauth2/revoke");
    response.put("scopes_supported",Collections.singletonList("openid"));
    response.put("subject_types_supported",Collections.singletonList("public"));
    response.put("grant_types_supported",Collections.singletonList("authorization_code"));
    response.put("token_endpoint","https://example.com/oauth2/v4/token");
    response.put("token_endpoint_auth_methods_supported",Collections.singletonList("client_secret_basic"));
    response.put("userinfo_endpoint","https://example.com/oauth2/v3/userinfo");
    return response;
  }
@Configuration @EnableWebSecurity static class TestConfig {
  }
@Configuration @EnableWebSecurity static class JwtDecoderConfig {
    @Bean public JwtDecoder decoder(){
      return mock(JwtDecoder.class);
    }
  }
}
