/** 
 * Tests for  {@link WebMvcProperties}.
 * @author Stephane Nicoll
 */
public class WebMvcPropertiesTests {
  private final WebMvcProperties properties=new WebMvcProperties();
  @Test public void servletPathWhenEndsWithSlashHasValidMappingAndPrefix(){
    bind("spring.mvc.servlet.path","/foo/");
    assertThat(this.properties.getServlet().getServletMapping()).isEqualTo("/foo/*");
    assertThat(this.properties.getServlet().getServletPrefix()).isEqualTo("/foo");
  }
  @Test public void servletPathWhenDoesNotEndWithSlashHasValidMappingAndPrefix(){
    bind("spring.mvc.servlet.path","/foo");
    assertThat(this.properties.getServlet().getServletMapping()).isEqualTo("/foo/*");
    assertThat(this.properties.getServlet().getServletPrefix()).isEqualTo("/foo");
  }
  @Test public void servletPathWhenHasWildcardThrowsException(){
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> bind("spring.mvc.servlet.path","/*")).withRootCauseInstanceOf(IllegalArgumentException.class).satisfies((ex) -> assertThat(Throwables.getRootCause(ex)).hasMessage("Path must not contain wildcards"));
  }
  private void bind(  String name,  String value){
    bind(Collections.singletonMap(name,value));
  }
  private void bind(  Map<String,String> map){
    ConfigurationPropertySource source=new MapConfigurationPropertySource(map);
    new Binder(source).bind("spring.mvc",Bindable.ofInstance(this.properties));
  }
}
