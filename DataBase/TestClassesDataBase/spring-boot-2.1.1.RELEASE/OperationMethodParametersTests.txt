/** 
 * Tests for  {@link OperationMethodParameters}.
 * @author Phillip Webb
 */
public class OperationMethodParametersTests {
  private Method exampleMethod=ReflectionUtils.findMethod(getClass(),"example",String.class);
  private Method exampleNoParamsMethod=ReflectionUtils.findMethod(getClass(),"exampleNoParams");
  @Test public void createWhenMethodIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new OperationMethodParameters(null,mock(ParameterNameDiscoverer.class))).withMessageContaining("Method must not be null");
  }
  @Test public void createWhenParameterNameDiscovererIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new OperationMethodParameters(this.exampleMethod,null)).withMessageContaining("ParameterNameDiscoverer must not be null");
  }
  @Test public void createWhenParameterNameDiscovererReturnsNullShouldThrowException(){
    assertThatIllegalStateException().isThrownBy(() -> new OperationMethodParameters(this.exampleMethod,mock(ParameterNameDiscoverer.class))).withMessageContaining("Failed to extract parameter names");
  }
  @Test public void hasParametersWhenHasParametersShouldReturnTrue(){
    OperationMethodParameters parameters=new OperationMethodParameters(this.exampleMethod,new DefaultParameterNameDiscoverer());
    assertThat(parameters.hasParameters()).isTrue();
  }
  @Test public void hasParametersWhenHasNoParametersShouldReturnFalse(){
    OperationMethodParameters parameters=new OperationMethodParameters(this.exampleNoParamsMethod,new DefaultParameterNameDiscoverer());
    assertThat(parameters.hasParameters()).isFalse();
  }
  @Test public void getParameterCountShouldReturnParameterCount(){
    OperationMethodParameters parameters=new OperationMethodParameters(this.exampleMethod,new DefaultParameterNameDiscoverer());
    assertThat(parameters.getParameterCount()).isEqualTo(1);
  }
  @Test public void iteratorShouldIterateOperationParameters(){
    OperationMethodParameters parameters=new OperationMethodParameters(this.exampleMethod,new DefaultParameterNameDiscoverer());
    Iterator<OperationParameter> iterator=parameters.iterator();
    assertParameters(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator,Spliterator.ORDERED),false));
  }
  @Test public void streamShouldStreamOperationParameters(){
    OperationMethodParameters parameters=new OperationMethodParameters(this.exampleMethod,new DefaultParameterNameDiscoverer());
    assertParameters(parameters.stream());
  }
  private void assertParameters(  Stream<OperationParameter> stream){
    List<OperationParameter> parameters=stream.collect(Collectors.toList());
    assertThat(parameters).hasSize(1);
    OperationParameter parameter=parameters.get(0);
    assertThat(parameter.getName()).isEqualTo("name");
    assertThat(parameter.getType()).isEqualTo(String.class);
  }
  String example(  String name){
    return name;
  }
  String exampleNoParams(){
    return "example";
  }
}
