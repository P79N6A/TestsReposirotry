/** 
 * Tests for  {@link MissingRequiredConfigurationFailureAnalyzer}.
 * @author Andy Wilkinson
 */
public class MissingRequiredConfigurationFailureAnalyzerTests {
  @Test public void analyzesMissingRequiredConfiguration(){
    FailureAnalysis analysis=new MissingRequiredConfigurationFailureAnalyzer().analyze(createFailure(MissingAccountIdConfiguration.class));
    assertThat(analysis).isNotNull();
    assertThat(analysis.getDescription()).isEqualTo("accountId must be set to report metrics to New Relic.");
    assertThat(analysis.getAction()).isEqualTo("Update your application to provide the missing configuration.");
  }
  private Exception createFailure(  Class<?> configuration){
    try (ConfigurableApplicationContext context=new AnnotationConfigApplicationContext(configuration)){
      fail("Expected failure did not occur");
      return null;
    }
 catch (    Exception ex) {
      return ex;
    }
  }
@Configuration static class MissingAccountIdConfiguration {
    @Bean public NewRelicMeterRegistry meterRegistry(){
      return new NewRelicMeterRegistry(new NewRelicConfig(){
        @Override public String get(        String key){
          return null;
        }
      }
,Clock.SYSTEM);
    }
  }
}
