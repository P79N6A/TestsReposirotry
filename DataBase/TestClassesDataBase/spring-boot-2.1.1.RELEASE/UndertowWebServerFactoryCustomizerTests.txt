/** 
 * Tests for  {@link UndertowWebServerFactoryCustomizer}.
 * @author Brian Clozel
 * @author Phillip Webb
 */
public class UndertowWebServerFactoryCustomizerTests {
  private MockEnvironment environment;
  private ServerProperties serverProperties;
  private UndertowWebServerFactoryCustomizer customizer;
  @Before public void setup(){
    this.environment=new MockEnvironment();
    this.serverProperties=new ServerProperties();
    ConfigurationPropertySources.attach(this.environment);
    this.customizer=new UndertowWebServerFactoryCustomizer(this.environment,this.serverProperties);
  }
  @Test public void customizeUndertowAccessLog(){
    bind("server.undertow.accesslog.enabled=true","server.undertow.accesslog.pattern=foo","server.undertow.accesslog.prefix=test_log","server.undertow.accesslog.suffix=txt","server.undertow.accesslog.dir=test-logs","server.undertow.accesslog.rotate=false");
    ConfigurableUndertowWebServerFactory factory=mock(ConfigurableUndertowWebServerFactory.class);
    this.customizer.customize(factory);
    verify(factory).setAccessLogEnabled(true);
    verify(factory).setAccessLogPattern("foo");
    verify(factory).setAccessLogPrefix("test_log");
    verify(factory).setAccessLogSuffix("txt");
    verify(factory).setAccessLogDirectory(new File("test-logs"));
    verify(factory).setAccessLogRotate(false);
  }
  @Test public void deduceUseForwardHeaders(){
    this.environment.setProperty("DYNO","-");
    ConfigurableUndertowWebServerFactory factory=mock(ConfigurableUndertowWebServerFactory.class);
    this.customizer.customize(factory);
    verify(factory).setUseForwardHeaders(true);
  }
  @Test public void defaultUseForwardHeaders(){
    ConfigurableUndertowWebServerFactory factory=mock(ConfigurableUndertowWebServerFactory.class);
    this.customizer.customize(factory);
    verify(factory).setUseForwardHeaders(false);
  }
  @Test public void setUseForwardHeaders(){
    this.serverProperties.setUseForwardHeaders(true);
    ConfigurableUndertowWebServerFactory factory=mock(ConfigurableUndertowWebServerFactory.class);
    this.customizer.customize(factory);
    verify(factory).setUseForwardHeaders(true);
  }
  @Test public void customizeMaxHttpHeaderSize(){
    bind("server.max-http-header-size=2048");
    Builder builder=Undertow.builder();
    ConfigurableUndertowWebServerFactory factory=mockFactory(builder);
    this.customizer.customize(factory);
    OptionMap map=((OptionMap.Builder)ReflectionTestUtils.getField(builder,"serverOptions")).getMap();
    assertThat(map.get(UndertowOptions.MAX_HEADER_SIZE).intValue()).isEqualTo(2048);
  }
  @Test public void customMaxHttpHeaderSizeIgnoredIfNegative(){
    bind("server.max-http-header-size=-1");
    Builder builder=Undertow.builder();
    ConfigurableUndertowWebServerFactory factory=mockFactory(builder);
    this.customizer.customize(factory);
    OptionMap map=((OptionMap.Builder)ReflectionTestUtils.getField(builder,"serverOptions")).getMap();
    assertThat(map.contains(UndertowOptions.MAX_HEADER_SIZE)).isFalse();
  }
  @Test public void customMaxHttpHeaderSizeIgnoredIfZero(){
    bind("server.max-http-header-size=0");
    Builder builder=Undertow.builder();
    ConfigurableUndertowWebServerFactory factory=mockFactory(builder);
    this.customizer.customize(factory);
    OptionMap map=((OptionMap.Builder)ReflectionTestUtils.getField(builder,"serverOptions")).getMap();
    assertThat(map.contains(UndertowOptions.MAX_HEADER_SIZE)).isFalse();
  }
  private ConfigurableUndertowWebServerFactory mockFactory(  Builder builder){
    ConfigurableUndertowWebServerFactory factory=mock(ConfigurableUndertowWebServerFactory.class);
    willAnswer((invocation) -> {
      Object argument=invocation.getArgument(0);
      Arrays.stream((argument instanceof UndertowBuilderCustomizer) ? new UndertowBuilderCustomizer[]{(UndertowBuilderCustomizer)argument} : (UndertowBuilderCustomizer[])argument).forEach((customizer) -> customizer.customize(builder));
      return null;
    }
).given(factory).addBuilderCustomizers(any());
    return factory;
  }
  private void bind(  String... inlinedProperties){
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,inlinedProperties);
    new Binder(ConfigurationPropertySources.get(this.environment)).bind("server",Bindable.ofInstance(this.serverProperties));
  }
}
