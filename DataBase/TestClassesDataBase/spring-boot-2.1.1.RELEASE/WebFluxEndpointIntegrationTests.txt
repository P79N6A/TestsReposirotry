/** 
 * Integration tests for web endpoints exposed using WebFlux.
 * @author Andy Wilkinson
 * @see WebFluxEndpointHandlerMapping
 */
public class WebFluxEndpointIntegrationTests extends AbstractWebEndpointIntegrationTests<AnnotationConfigReactiveWebServerApplicationContext> {
  public WebFluxEndpointIntegrationTests(){
    super(WebFluxEndpointIntegrationTests::createApplicationContext,WebFluxEndpointIntegrationTests::applyAuthenticatedConfiguration);
  }
  private static AnnotationConfigReactiveWebServerApplicationContext createApplicationContext(){
    AnnotationConfigReactiveWebServerApplicationContext context=new AnnotationConfigReactiveWebServerApplicationContext();
    context.register(ReactiveConfiguration.class);
    return context;
  }
  private static void applyAuthenticatedConfiguration(  AnnotationConfigReactiveWebServerApplicationContext context){
    context.register(AuthenticatedConfiguration.class);
  }
  @Test public void responseToOptionsRequestIncludesCorsHeaders(){
    load(TestEndpointConfiguration.class,(client) -> client.options().uri("/test").accept(MediaType.APPLICATION_JSON).header("Access-Control-Request-Method","POST").header("Origin","http://example.com").exchange().expectStatus().isOk().expectHeader().valueEquals("Access-Control-Allow-Origin","http://example.com").expectHeader().valueEquals("Access-Control-Allow-Methods","GET,POST"));
  }
  @Test public void readOperationsThatReturnAResourceSupportRangeRequests(){
    load(ResourceEndpointConfiguration.class,(client) -> {
      byte[] responseBody=client.get().uri("/resource").header("Range","bytes=0-3").exchange().expectStatus().isEqualTo(HttpStatus.PARTIAL_CONTENT).expectHeader().contentType(MediaType.APPLICATION_OCTET_STREAM).returnResult(byte[].class).getResponseBodyContent();
      assertThat(responseBody).containsExactly(0,1,2,3);
    }
);
  }
  @Override protected int getPort(  AnnotationConfigReactiveWebServerApplicationContext context){
    return context.getBean(ReactiveConfiguration.class).port;
  }
@Configuration @EnableWebFlux @ImportAutoConfiguration(ErrorWebFluxAutoConfiguration.class) static class ReactiveConfiguration {
    private int port;
    @Bean public NettyReactiveWebServerFactory netty(){
      return new NettyReactiveWebServerFactory(0);
    }
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return WebHttpHandlerBuilder.applicationContext(applicationContext).build();
    }
    @Bean public WebFluxEndpointHandlerMapping webEndpointHandlerMapping(    Environment environment,    WebEndpointDiscoverer endpointDiscoverer,    EndpointMediaTypes endpointMediaTypes){
      CorsConfiguration corsConfiguration=new CorsConfiguration();
      corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com"));
      corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST"));
      return new WebFluxEndpointHandlerMapping(new EndpointMapping(environment.getProperty("endpointPath")),endpointDiscoverer.getEndpoints(),endpointMediaTypes,corsConfiguration,new EndpointLinksResolver(endpointDiscoverer.getEndpoints()));
    }
    @Bean public ApplicationListener<ReactiveWebServerInitializedEvent> serverInitializedListener(){
      return (event) -> this.port=event.getWebServer().getPort();
    }
  }
@Configuration static class AuthenticatedConfiguration {
    @Bean public WebFilter webFilter(){
      return new WebFilter(){
        @Override public Mono<Void> filter(        ServerWebExchange exchange,        WebFilterChain chain){
          return chain.filter(exchange).subscriberContext(ReactiveSecurityContextHolder.withAuthentication(new UsernamePasswordAuthenticationToken("Alice","secret",Arrays.asList(new SimpleGrantedAuthority("ROLE_ACTUATOR")))));
        }
      }
;
    }
  }
}
