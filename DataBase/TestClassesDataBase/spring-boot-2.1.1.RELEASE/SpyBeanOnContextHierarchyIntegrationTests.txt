/** 
 * Test  {@link SpyBean} can be used with a {@link ContextHierarchy}.
 * @author Phillip Webb
 */
@RunWith(SpringRunner.class) @ContextHierarchy({@ContextConfiguration(classes=ParentConfig.class),@ContextConfiguration(classes=ChildConfig.class)}) public class SpyBeanOnContextHierarchyIntegrationTests {
  @Autowired private ChildConfig childConfig;
  @Test public void testSpying(){
    ApplicationContext context=this.childConfig.getContext();
    ApplicationContext parentContext=context.getParent();
    assertThat(parentContext.getBeanNamesForType(ExampleService.class)).hasSize(1);
    assertThat(parentContext.getBeanNamesForType(ExampleServiceCaller.class)).hasSize(0);
    assertThat(context.getBeanNamesForType(ExampleService.class)).hasSize(0);
    assertThat(context.getBeanNamesForType(ExampleServiceCaller.class)).hasSize(1);
    assertThat(context.getBean(ExampleService.class)).isNotNull();
    assertThat(context.getBean(ExampleServiceCaller.class)).isNotNull();
  }
@Configuration @SpyBean(SimpleExampleService.class) static class ParentConfig {
  }
@Configuration @SpyBean(ExampleServiceCaller.class) static class ChildConfig implements ApplicationContextAware {
    private ApplicationContext context;
    @Override public void setApplicationContext(    ApplicationContext applicationContext) throws BeansException {
      this.context=applicationContext;
    }
    public ApplicationContext getContext(){
      return this.context;
    }
  }
}
