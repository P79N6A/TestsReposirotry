/** 
 * Tests for  {@link HealthEndpoint}.
 * @author Phillip Webb
 * @author Christian Dupuis
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class HealthEndpointTests {
  private static final HealthIndicator one=() -> new Health.Builder().status(Status.UP).withDetail("first","1").build();
  private static final HealthIndicator two=() -> new Health.Builder().status(Status.UP).withDetail("second","2").build();
  @Test public void statusAndFullDetailsAreExposed(){
    Map<String,HealthIndicator> healthIndicators=new HashMap<>();
    healthIndicators.put("up",one);
    healthIndicators.put("upAgain",two);
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(healthIndicators));
    Health health=endpoint.health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails()).containsOnlyKeys("up","upAgain");
    Health upHealth=(Health)health.getDetails().get("up");
    assertThat(upHealth.getDetails()).containsOnly(entry("first","1"));
    Health upAgainHealth=(Health)health.getDetails().get("upAgain");
    assertThat(upAgainHealth.getDetails()).containsOnly(entry("second","2"));
  }
  @Test public void statusForComponentIsExposed(){
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(Collections.singletonMap("test",one)));
    Health health=endpoint.healthForComponent("test");
    assertThat(health).isNotNull();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails()).containsOnly(entry("first","1"));
  }
  @Test public void statusForUnknownComponentReturnNull(){
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(Collections.emptyMap()));
    Health health=endpoint.healthForComponent("does-not-exist");
    assertThat(health).isNull();
  }
  @Test public void statusForComponentInstanceIsExposed(){
    CompositeHealthIndicator compositeIndicator=new CompositeHealthIndicator(new OrderedHealthAggregator(),Collections.singletonMap("sub",() -> Health.down().build()));
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(Collections.singletonMap("test",compositeIndicator)));
    Health health=endpoint.healthForComponentInstance("test","sub");
    assertThat(health).isNotNull();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
    assertThat(health.getDetails()).isEmpty();
  }
  @Test public void statusForUnknownComponentInstanceReturnNull(){
    CompositeHealthIndicator compositeIndicator=new CompositeHealthIndicator(new OrderedHealthAggregator(),Collections.singletonMap("sub",() -> Health.down().build()));
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(Collections.singletonMap("test",compositeIndicator)));
    Health health=endpoint.healthForComponentInstance("test","does-not-exist");
    assertThat(health).isNull();
  }
  @Test public void statusForComponentInstanceThatIsNotACompositeReturnNull(){
    HealthEndpoint endpoint=new HealthEndpoint(createHealthIndicator(Collections.singletonMap("test",() -> Health.up().build())));
    Health health=endpoint.healthForComponentInstance("test","does-not-exist");
    assertThat(health).isNull();
  }
  private HealthIndicator createHealthIndicator(  Map<String,HealthIndicator> healthIndicators){
    return new CompositeHealthIndicator(new OrderedHealthAggregator(),healthIndicators);
  }
}
