/** 
 * Tests for  {@link ExitCodeGenerators}.
 * @author Phillip Webb
 */
public class ExitCodeGeneratorsTests {
  @Test public void addAllWhenGeneratorsIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> {
      List<ExitCodeGenerator> generators=null;
      new ExitCodeGenerators().addAll(generators);
    }
).withMessageContaining("Generators must not be null");
  }
  @Test public void addWhenGeneratorIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ExitCodeGenerators().add(null)).withMessageContaining("Generator must not be null");
  }
  @Test public void getExitCodeWhenNoGeneratorsShouldReturnZero(){
    assertThat(new ExitCodeGenerators().getExitCode()).isEqualTo(0);
  }
  @Test public void getExitCodeWhenGeneratorThrowsShouldReturnOne(){
    ExitCodeGenerator generator=mock(ExitCodeGenerator.class);
    given(generator.getExitCode()).willThrow(new IllegalStateException());
    ExitCodeGenerators generators=new ExitCodeGenerators();
    generators.add(generator);
    assertThat(generators.getExitCode()).isEqualTo(1);
  }
  @Test public void getExitCodeWhenAllNegativeShouldReturnLowestValue(){
    ExitCodeGenerators generators=new ExitCodeGenerators();
    generators.add(mockGenerator(-1));
    generators.add(mockGenerator(-3));
    generators.add(mockGenerator(-2));
    assertThat(generators.getExitCode()).isEqualTo(-3);
  }
  @Test public void getExitCodeWhenAllPositiveShouldReturnHighestValue(){
    ExitCodeGenerators generators=new ExitCodeGenerators();
    generators.add(mockGenerator(1));
    generators.add(mockGenerator(3));
    generators.add(mockGenerator(2));
    assertThat(generators.getExitCode()).isEqualTo(3);
  }
  @Test public void getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper(){
    ExitCodeGenerators generators=new ExitCodeGenerators();
    Exception e=new IOException();
    generators.add(e,mockMapper(IllegalStateException.class,1));
    generators.add(e,mockMapper(IOException.class,2));
    generators.add(e,mockMapper(UnsupportedOperationException.class,3));
    assertThat(generators.getExitCode()).isEqualTo(2);
  }
  private ExitCodeGenerator mockGenerator(  int exitCode){
    ExitCodeGenerator generator=mock(ExitCodeGenerator.class);
    given(generator.getExitCode()).willReturn(exitCode);
    return generator;
  }
  private ExitCodeExceptionMapper mockMapper(  Class<?> exceptionType,  int exitCode){
    return (exception) -> {
      if (exceptionType.isInstance(exception)) {
        return exitCode;
      }
      return 0;
    }
;
  }
}
