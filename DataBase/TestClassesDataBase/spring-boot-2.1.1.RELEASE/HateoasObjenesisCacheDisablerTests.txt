/** 
 * Tests for  {@link HateoasObjenesisCacheDisabler}.
 * @author Andy Wilkinson
 */
public class HateoasObjenesisCacheDisablerTests {
  private ObjenesisStd objenesis;
  @Before @After public void resetCacheField(){
    ReflectionTestUtils.setField(HateoasObjenesisCacheDisabler.class,"cacheDisabled",false);
    this.objenesis=(ObjenesisStd)ReflectionTestUtils.getField(DummyInvocationUtils.class,"OBJENESIS");
    ReflectionTestUtils.setField(this.objenesis,"cache",new ConcurrentHashMap<String,ObjectInstantiator<?>>());
  }
  @Test public void cacheIsEnabledByDefault(){
    assertThat(this.objenesis.getInstantiatorOf(TestObject.class)).isSameAs(this.objenesis.getInstantiatorOf(TestObject.class));
  }
  @Test public void cacheIsDisabled(){
    new HateoasObjenesisCacheDisabler().afterPropertiesSet();
    assertThat(this.objenesis.getInstantiatorOf(TestObject.class)).isNotSameAs(this.objenesis.getInstantiatorOf(TestObject.class));
  }
private static class TestObject {
  }
}
