/** 
 * Tests for  {@link LocalHostUriTemplateHandler}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 * @author Eddú Meléndez
 */
public class LocalHostUriTemplateHandlerTests {
  @Test public void createWhenEnvironmentIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostUriTemplateHandler(null)).withMessageContaining("Environment must not be null");
  }
  @Test public void createWhenSchemeIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostUriTemplateHandler(new MockEnvironment(),null)).withMessageContaining("Scheme must not be null");
  }
  @Test public void createWhenHandlerIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostUriTemplateHandler(new MockEnvironment(),"http",null)).withMessageContaining("Handler must not be null");
  }
  @Test public void getRootUriShouldUseLocalServerPort(){
    MockEnvironment environment=new MockEnvironment();
    environment.setProperty("local.server.port","1234");
    LocalHostUriTemplateHandler handler=new LocalHostUriTemplateHandler(environment);
    assertThat(handler.getRootUri()).isEqualTo("http://localhost:1234");
  }
  @Test public void getRootUriWhenLocalServerPortMissingShouldUsePort8080(){
    MockEnvironment environment=new MockEnvironment();
    LocalHostUriTemplateHandler handler=new LocalHostUriTemplateHandler(environment);
    assertThat(handler.getRootUri()).isEqualTo("http://localhost:8080");
  }
  @Test public void getRootUriUsesCustomScheme(){
    MockEnvironment environment=new MockEnvironment();
    LocalHostUriTemplateHandler handler=new LocalHostUriTemplateHandler(environment,"https");
    assertThat(handler.getRootUri()).isEqualTo("https://localhost:8080");
  }
  @Test public void getRootUriShouldUseContextPath(){
    MockEnvironment environment=new MockEnvironment();
    environment.setProperty("server.servlet.context-path","/foo");
    LocalHostUriTemplateHandler handler=new LocalHostUriTemplateHandler(environment);
    assertThat(handler.getRootUri()).isEqualTo("http://localhost:8080/foo");
  }
  @Test public void expandShouldUseCustomHandler(){
    MockEnvironment environment=new MockEnvironment();
    UriTemplateHandler uriTemplateHandler=mock(UriTemplateHandler.class);
    Map<String,?> uriVariables=new HashMap<>();
    URI uri=URI.create("http://www.example.com");
    given(uriTemplateHandler.expand("https://localhost:8080/",uriVariables)).willReturn(uri);
    LocalHostUriTemplateHandler handler=new LocalHostUriTemplateHandler(environment,"https",uriTemplateHandler);
    assertThat(handler.expand("/",uriVariables)).isEqualTo(uri);
    verify(uriTemplateHandler).expand("https://localhost:8080/",uriVariables);
  }
}
