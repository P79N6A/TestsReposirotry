/** 
 * Integration test to ensure  {@link SecurityFilterAutoConfiguration} doesn't cause earlyinitialization.
 * @author Phillip Webb
 */
public class SecurityFilterAutoConfigurationEarlyInitializationTests {
  @Rule public OutputCapture outputCapture=new OutputCapture();
  @Test public void testSecurityFilterDoesNotCauseEarlyInitialization(){
    try (AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext()){
      TestPropertyValues.of("server.port:0").applyTo(context);
      context.register(Config.class);
      context.refresh();
      int port=context.getWebServer().getPort();
      String password=this.outputCapture.toString().split("Using generated security password: ")[1].split("\n")[0].trim();
      new TestRestTemplate("user",password).getForEntity("http://localhost:" + port,Object.class);
    }
   }
@Configuration @Import({DeserializerBean.class,JacksonModuleBean.class,ExampleController.class,ConverterBean.class}) @ImportAutoConfiguration({WebMvcAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,DispatcherServletAutoConfiguration.class,SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class,SecurityFilterAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) static class Config {
    @Bean public TomcatServletWebServerFactory webServerFactory(){
      TomcatServletWebServerFactory factory=new TomcatServletWebServerFactory();
      factory.setPort(0);
      return factory;
    }
  }
public static class SourceType {
    public String foo;
  }
public static class DestinationType {
    public String bar;
  }
@Component public static class JacksonModuleBean extends SimpleModule {
    private static final long serialVersionUID=1L;
    public JacksonModuleBean(    DeserializerBean myDeser){
      addDeserializer(SourceType.class,myDeser);
    }
  }
@Component public static class DeserializerBean extends StdDeserializer<SourceType> {
    @Autowired ConversionService conversionService;
    public DeserializerBean(){
      super(SourceType.class);
    }
    @Override public SourceType deserialize(    JsonParser p,    DeserializationContext ctxt){
      return new SourceType();
    }
  }
@RestController public static class ExampleController {
    @Autowired private ConversionService conversionService;
    @RequestMapping("/") public void convert(){
      this.conversionService.convert(new SourceType(),DestinationType.class);
    }
  }
@Component public static class ConverterBean implements Converter<SourceType,DestinationType> {
    @Override public DestinationType convert(    SourceType source){
      return new DestinationType();
    }
  }
}
