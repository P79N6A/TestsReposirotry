/** 
 * Tests for  {@link FreeMarkerAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Kazuki Shimizu
 */
public class FreeMarkerAutoConfigurationTests {
  @Rule public OutputCapture output=new OutputCapture();
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(FreeMarkerAutoConfiguration.class));
  @Test public void renderNonWebAppTemplate(){
    this.contextRunner.run((context) -> {
      freemarker.template.Configuration freemarker=context.getBean(freemarker.template.Configuration.class);
      StringWriter writer=new StringWriter();
      freemarker.getTemplate("message.ftl").process(this,writer);
      assertThat(writer.toString()).contains("Hello World");
    }
);
  }
  public String getGreeting(){
    return "Hello World";
  }
  @Test public void nonExistentTemplateLocation(){
    this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:" + "classpath:/does-not-exist/,classpath:/also-does-not-exist").run((context) -> this.output.expect(containsString("Cannot find template location")));
  }
  @Test public void emptyTemplateLocation(){
    new File("target/test-classes/templates/empty-directory").mkdir();
    this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:" + "classpath:/templates/empty-directory/").run((context) -> {
    }
);
  }
  @Test public void nonExistentLocationAndEmptyLocation(){
    new File("target/test-classes/templates/empty-directory").mkdir();
    this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:" + "classpath:/does-not-exist/,classpath:/templates/empty-directory/").run((context) -> {
    }
);
  }
}
