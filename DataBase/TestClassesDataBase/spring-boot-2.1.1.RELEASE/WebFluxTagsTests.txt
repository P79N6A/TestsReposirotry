/** 
 * Tests for  {@link WebFluxTags}.
 * @author Brian Clozel
 * @author Michael McFadyen
 */
public class WebFluxTagsTests {
  private MockServerWebExchange exchange;
  private PathPatternParser parser=new PathPatternParser();
  @Before public void setup(){
    this.exchange=MockServerWebExchange.from(MockServerHttpRequest.get(""));
  }
  @Test public void uriTagValueIsBestMatchingPatternWhenAvailable(){
    this.exchange.getAttributes().put(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE,this.parser.parse("/spring"));
    this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY);
    Tag tag=WebFluxTags.uri(this.exchange);
    assertThat(tag.getValue()).isEqualTo("/spring");
  }
  @Test public void uriTagValueIsRedirectionWhenResponseStatusIs3xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY);
    Tag tag=WebFluxTags.uri(this.exchange);
    assertThat(tag.getValue()).isEqualTo("REDIRECTION");
  }
  @Test public void uriTagValueIsNotFoundWhenResponseStatusIs404(){
    this.exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);
    Tag tag=WebFluxTags.uri(this.exchange);
    assertThat(tag.getValue()).isEqualTo("NOT_FOUND");
  }
  @Test public void uriTagToleratesCustomResponseStatus(){
    this.exchange.getResponse().setStatusCodeValue(601);
    Tag tag=WebFluxTags.uri(this.exchange);
    assertThat(tag.getValue()).isEqualTo("root");
  }
  @Test public void methodTagToleratesNonStandardHttpMethods(){
    ServerWebExchange exchange=mock(ServerWebExchange.class);
    ServerHttpRequest request=mock(ServerHttpRequest.class);
    given(exchange.getRequest()).willReturn(request);
    given(request.getMethodValue()).willReturn("CUSTOM");
    Tag tag=WebFluxTags.method(exchange);
    assertThat(tag.getValue()).isEqualTo("CUSTOM");
  }
  @Test public void outcomeTagIsUnknownWhenResponseStatusIsNull(){
    this.exchange.getResponse().setStatusCode(null);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("UNKNOWN");
  }
  @Test public void outcomeTagIsInformationalWhenResponseIs1xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.CONTINUE);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("INFORMATIONAL");
  }
  @Test public void outcomeTagIsSuccessWhenResponseIs2xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.OK);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("SUCCESS");
  }
  @Test public void outcomeTagIsRedirectionWhenResponseIs3xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("REDIRECTION");
  }
  @Test public void outcomeTagIsClientErrorWhenResponseIs4xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("CLIENT_ERROR");
  }
  @Test public void outcomeTagIsServerErrorWhenResponseIs5xx(){
    this.exchange.getResponse().setStatusCode(HttpStatus.BAD_GATEWAY);
    Tag tag=WebFluxTags.outcome(this.exchange);
    assertThat(tag.getValue()).isEqualTo("SERVER_ERROR");
  }
}
