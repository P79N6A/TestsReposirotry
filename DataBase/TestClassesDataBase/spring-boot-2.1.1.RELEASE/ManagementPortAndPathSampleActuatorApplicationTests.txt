/** 
 * Integration tests for separate management and main service ports.
 * @author Dave Syer
 */
@RunWith(SpringRunner.class) @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT,properties={"management.server.port=0","management.endpoints.web.base-path=/admin","management.endpoint.health.show-details=never"}) public class ManagementPortAndPathSampleActuatorApplicationTests {
  @LocalServerPort private int port=9010;
  @LocalManagementPort private int managementPort=9011;
  @Autowired private Environment environment;
  @Test public void testHome(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=new TestRestTemplate("user",getPassword()).getForEntity("http://localhost:" + this.port,Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("message")).isEqualTo("Hello Phil");
  }
  @Test public void testMetrics(){
    testHome();
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=new TestRestTemplate().getForEntity("http://localhost:" + this.managementPort + "/admin/metrics",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
  }
  @Test public void testHealth(){
    ResponseEntity<String> entity=new TestRestTemplate().withBasicAuth("user",getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/health",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");
  }
  @Test public void testEnvNotFound(){
    String unknownProperty="test-does-not-exist";
    assertThat(this.environment.containsProperty(unknownProperty)).isFalse();
    ResponseEntity<String> entity=new TestRestTemplate().withBasicAuth("user",getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/env/"+ unknownProperty,String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
  }
  @Test public void testMissing(){
    ResponseEntity<String> entity=new TestRestTemplate("user",getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/missing",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    assertThat(entity.getBody()).contains("\"status\":404");
  }
  @Test public void testErrorPage(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=new TestRestTemplate("user",getPassword()).getForEntity("http://localhost:" + this.port + "/error",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("status")).isEqualTo(999);
  }
  @Test public void testManagementErrorPage(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=new TestRestTemplate("user",getPassword()).getForEntity("http://localhost:" + this.managementPort + "/error",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("status")).isEqualTo(999);
  }
  private String getPassword(){
    return "password";
  }
}
