/** 
 * Tests for  {@link BasicErrorController} using {@link MockMvc} but not{@link SpringRunner}.
 * @author Dave Syer
 * @author Sebastien Deleuze
 */
public class BasicErrorControllerDirectMockMvcTests {
  private ConfigurableWebApplicationContext wac;
  private MockMvc mockMvc;
  @After public void close(){
    ApplicationContextTestUtils.closeAll(this.wac);
  }
  public void setup(  ConfigurableWebApplicationContext context){
    this.wac=context;
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).build();
  }
  @Test public void errorPageAvailableWithParentContext() throws Exception {
    setup((ConfigurableWebApplicationContext)new SpringApplicationBuilder(ParentConfiguration.class).child(ChildConfiguration.class).run("--server.port=0"));
    MvcResult response=this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).contains("status=999");
  }
  @Test public void errorPageAvailableWithMvcIncluded() throws Exception {
    setup((ConfigurableWebApplicationContext)new SpringApplication(WebMvcIncludedConfiguration.class).run("--server.port=0"));
    MvcResult response=this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).contains("status=999");
  }
  @Test public void errorPageNotAvailableWithWhitelabelDisabled() throws Exception {
    setup((ConfigurableWebApplicationContext)new SpringApplication(WebMvcIncludedConfiguration.class).run("--server.port=0","--server.error.whitelabel.enabled=false"));
    assertThatExceptionOfType(ServletException.class).isThrownBy(() -> this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)));
  }
  @Test public void errorControllerWithAop() throws Exception {
    setup((ConfigurableWebApplicationContext)new SpringApplication(WithAopConfiguration.class).run("--server.port=0"));
    MvcResult response=this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).contains("status=999");
  }
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import({ServletWebServerFactoryAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,ErrorMvcAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) protected @interface MinimalWebConfiguration {}
@Configuration @MinimalWebConfiguration protected static class ParentConfiguration {
  }
@Configuration @MinimalWebConfiguration @EnableWebMvc protected static class WebMvcIncludedConfiguration {
    public static void main(    String[] args){
      SpringApplication.run(WebMvcIncludedConfiguration.class,args);
    }
  }
@Configuration @MinimalWebConfiguration protected static class VanillaConfiguration {
    public static void main(    String[] args){
      SpringApplication.run(VanillaConfiguration.class,args);
    }
  }
@Configuration @MinimalWebConfiguration protected static class ChildConfiguration {
    public static void main(    String[] args){
      new SpringApplicationBuilder(ParentConfiguration.class).child(ChildConfiguration.class).run(args);
    }
  }
@Configuration @EnableAspectJAutoProxy(proxyTargetClass=false) @MinimalWebConfiguration @Aspect protected static class WithAopConfiguration {
    @Pointcut("within(@org.springframework.stereotype.Controller *)") private void controllerPointCut(){
    }
    @Around("controllerPointCut()") public Object mvcAdvice(    ProceedingJoinPoint pjp) throws Throwable {
      return pjp.proceed();
    }
  }
}
