/** 
 * Tests for  {@link UserVehicleService}.
 * @author Phillip Webb
 */
public class UserVehicleServiceTests {
  private static final VehicleIdentificationNumber VIN=new VehicleIdentificationNumber("00000000000000000");
  @Mock private VehicleDetailsService vehicleDetailsService;
  @Mock private UserRepository userRepository;
  private UserVehicleService service;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.service=new UserVehicleService(this.userRepository,this.vehicleDetailsService);
  }
  @Test public void getVehicleDetailsWhenUsernameIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.service.getVehicleDetails(null)).withMessage("Username must not be null");
  }
  @Test public void getVehicleDetailsWhenUsernameNotFoundShouldThrowException(){
    given(this.userRepository.findByUsername(anyString())).willReturn(null);
    assertThatExceptionOfType(UserNameNotFoundException.class).isThrownBy(() -> this.service.getVehicleDetails("sboot"));
  }
  @Test public void getVehicleDetailsShouldReturnMakeAndModel(){
    given(this.userRepository.findByUsername(anyString())).willReturn(new User("sboot",VIN));
    VehicleDetails details=new VehicleDetails("Honda","Civic");
    given(this.vehicleDetailsService.getVehicleDetails(VIN)).willReturn(details);
    VehicleDetails actual=this.service.getVehicleDetails("sboot");
    assertThat(actual).isEqualTo(details);
  }
}
