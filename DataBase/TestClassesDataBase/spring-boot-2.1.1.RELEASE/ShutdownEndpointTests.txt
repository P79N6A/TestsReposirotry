/** 
 * Tests for  {@link ShutdownEndpoint}.
 * @author Phillip Webb
 * @author Dave Syer
 * @author Andy Wilkinson
 */
public class ShutdownEndpointTests {
  @Test public void shutdown(){
    ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(EndpointConfig.class);
    contextRunner.run((context) -> {
      EndpointConfig config=context.getBean(EndpointConfig.class);
      ClassLoader previousTccl=Thread.currentThread().getContextClassLoader();
      Map<String,String> result;
      Thread.currentThread().setContextClassLoader(new URLClassLoader(new URL[0],getClass().getClassLoader()));
      try {
        result=context.getBean(ShutdownEndpoint.class).shutdown();
      }
  finally {
        Thread.currentThread().setContextClassLoader(previousTccl);
      }
      assertThat(result.get("message")).startsWith("Shutting down");
      assertThat(((ConfigurableApplicationContext)context).isActive()).isTrue();
      assertThat(config.latch.await(10,TimeUnit.SECONDS)).isTrue();
      assertThat(config.threadContextClassLoader).isEqualTo(getClass().getClassLoader());
    }
);
  }
  @Test public void shutdownChild() throws Exception {
    ConfigurableApplicationContext context=new SpringApplicationBuilder(EmptyConfig.class).child(EndpointConfig.class).web(WebApplicationType.NONE).run();
    CountDownLatch latch=context.getBean(EndpointConfig.class).latch;
    assertThat(context.getBean(ShutdownEndpoint.class).shutdown().get("message")).startsWith("Shutting down");
    assertThat(context.isActive()).isTrue();
    assertThat(latch.await(10,TimeUnit.SECONDS)).isTrue();
  }
  @Test public void shutdownParent() throws Exception {
    ConfigurableApplicationContext context=new SpringApplicationBuilder(EndpointConfig.class).child(EmptyConfig.class).web(WebApplicationType.NONE).run();
    CountDownLatch parentLatch=context.getBean(EndpointConfig.class).latch;
    CountDownLatch childLatch=context.getBean(EmptyConfig.class).latch;
    assertThat(context.getBean(ShutdownEndpoint.class).shutdown().get("message")).startsWith("Shutting down");
    assertThat(context.isActive()).isTrue();
    assertThat(parentLatch.await(10,TimeUnit.SECONDS)).isTrue();
    assertThat(childLatch.await(10,TimeUnit.SECONDS)).isTrue();
  }
@Configuration public static class EndpointConfig {
    private final CountDownLatch latch=new CountDownLatch(1);
    private volatile ClassLoader threadContextClassLoader;
    @Bean public ShutdownEndpoint endpoint(){
      ShutdownEndpoint endpoint=new ShutdownEndpoint();
      return endpoint;
    }
    @Bean public ApplicationListener<ContextClosedEvent> listener(){
      return (event) -> {
        EndpointConfig.this.threadContextClassLoader=Thread.currentThread().getContextClassLoader();
        EndpointConfig.this.latch.countDown();
      }
;
    }
  }
@Configuration public static class EmptyConfig {
    private final CountDownLatch latch=new CountDownLatch(1);
    @Bean public ApplicationListener<ContextClosedEvent> listener(){
      return (event) -> EmptyConfig.this.latch.countDown();
    }
  }
}
