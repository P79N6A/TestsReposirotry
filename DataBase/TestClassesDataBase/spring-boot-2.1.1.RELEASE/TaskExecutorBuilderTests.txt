/** 
 * Tests for  {@link TaskExecutorBuilder}.
 * @author Stephane Nicoll
 */
public class TaskExecutorBuilderTests {
  private TaskExecutorBuilder builder=new TaskExecutorBuilder();
  @Test public void poolSettingsShouldApply(){
    ThreadPoolTaskExecutor executor=this.builder.queueCapacity(10).corePoolSize(4).maxPoolSize(8).allowCoreThreadTimeOut(true).keepAlive(Duration.ofMinutes(1)).build();
    assertThat(executor).hasFieldOrPropertyWithValue("queueCapacity",10);
    assertThat(executor.getCorePoolSize()).isEqualTo(4);
    assertThat(executor.getMaxPoolSize()).isEqualTo(8);
    assertThat(executor).hasFieldOrPropertyWithValue("allowCoreThreadTimeOut",true);
    assertThat(executor.getKeepAliveSeconds()).isEqualTo(60);
  }
  @Test public void threadNamePrefixShouldApply(){
    ThreadPoolTaskExecutor executor=this.builder.threadNamePrefix("test-").build();
    assertThat(executor.getThreadNamePrefix()).isEqualTo("test-");
  }
  @Test public void taskDecoratorShouldApply(){
    TaskDecorator taskDecorator=mock(TaskDecorator.class);
    ThreadPoolTaskExecutor executor=this.builder.taskDecorator(taskDecorator).build();
    assertThat(ReflectionTestUtils.getField(executor,"taskDecorator")).isSameAs(taskDecorator);
  }
  @Test public void customizersWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((TaskExecutorCustomizer[])null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void customizersCollectionWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((Set<TaskExecutorCustomizer>)null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void customizersShouldApply(){
    TaskExecutorCustomizer customizer=mock(TaskExecutorCustomizer.class);
    ThreadPoolTaskExecutor executor=this.builder.customizers(customizer).build();
    verify(customizer).customize(executor);
  }
  @Test public void customizersShouldBeAppliedLast(){
    TaskDecorator taskDecorator=mock(TaskDecorator.class);
    ThreadPoolTaskExecutor executor=spy(new ThreadPoolTaskExecutor());
    this.builder.queueCapacity(10).corePoolSize(4).maxPoolSize(8).allowCoreThreadTimeOut(true).keepAlive(Duration.ofMinutes(1)).threadNamePrefix("test-").taskDecorator(taskDecorator).additionalCustomizers((taskExecutor) -> {
      verify(taskExecutor).setQueueCapacity(10);
      verify(taskExecutor).setCorePoolSize(4);
      verify(taskExecutor).setMaxPoolSize(8);
      verify(taskExecutor).setAllowCoreThreadTimeOut(true);
      verify(taskExecutor).setKeepAliveSeconds(60);
      verify(taskExecutor).setThreadNamePrefix("test-");
      verify(taskExecutor).setTaskDecorator(taskDecorator);
    }
);
    this.builder.configure(executor);
  }
  @Test public void customizersShouldReplaceExisting(){
    TaskExecutorCustomizer customizer1=mock(TaskExecutorCustomizer.class);
    TaskExecutorCustomizer customizer2=mock(TaskExecutorCustomizer.class);
    ThreadPoolTaskExecutor executor=this.builder.customizers(customizer1).customizers(Collections.singleton(customizer2)).build();
    verifyZeroInteractions(customizer1);
    verify(customizer2).customize(executor);
  }
  @Test public void additionalCustomizersWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((TaskExecutorCustomizer[])null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((Set<TaskExecutorCustomizer>)null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void additionalCustomizersShouldAddToExisting(){
    TaskExecutorCustomizer customizer1=mock(TaskExecutorCustomizer.class);
    TaskExecutorCustomizer customizer2=mock(TaskExecutorCustomizer.class);
    ThreadPoolTaskExecutor executor=this.builder.customizers(customizer1).additionalCustomizers(customizer2).build();
    verify(customizer1).customize(executor);
    verify(customizer2).customize(executor);
  }
}
