/** 
 * Tests for  {@link HibernateDefaultDdlAutoProvider}.
 * @author Stephane Nicoll
 */
public class HibernateDefaultDdlAutoProviderTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class)).withPropertyValues("spring.datasource.initialization-mode:never");
  @Test public void defaultDdlAutoForMysql(){
    this.contextRunner.withPropertyValues("spring.datasource.type:" + org.apache.tomcat.jdbc.pool.DataSource.class.getName(),"spring.datasource.database:mysql","spring.datasource.url:jdbc:mysql://localhost/nonexistent","spring.jpa.database:MYSQL").run((context) -> {
      HibernateDefaultDdlAutoProvider ddlAutoProvider=new HibernateDefaultDdlAutoProvider(Collections.emptyList());
      assertThat(ddlAutoProvider.getDefaultDdlAuto(context.getBean(DataSource.class))).isEqualTo("none");
    }
);
  }
  @Test public void defaultDDlAutoForEmbedded(){
    this.contextRunner.run((context) -> {
      HibernateDefaultDdlAutoProvider ddlAutoProvider=new HibernateDefaultDdlAutoProvider(Collections.emptyList());
      assertThat(ddlAutoProvider.getDefaultDdlAuto(context.getBean(DataSource.class))).isEqualTo("create-drop");
    }
);
  }
  @Test public void defaultDDlAutoForEmbeddedWithPositiveContributor(){
    this.contextRunner.run((context) -> {
      DataSource dataSource=context.getBean(DataSource.class);
      SchemaManagementProvider provider=mock(SchemaManagementProvider.class);
      given(provider.getSchemaManagement(dataSource)).willReturn(SchemaManagement.MANAGED);
      HibernateDefaultDdlAutoProvider ddlAutoProvider=new HibernateDefaultDdlAutoProvider(Collections.singletonList(provider));
      assertThat(ddlAutoProvider.getDefaultDdlAuto(dataSource)).isEqualTo("none");
    }
);
  }
  @Test public void defaultDDlAutoForEmbeddedWithNegativeContributor(){
    this.contextRunner.run((context) -> {
      DataSource dataSource=context.getBean(DataSource.class);
      SchemaManagementProvider provider=mock(SchemaManagementProvider.class);
      given(provider.getSchemaManagement(dataSource)).willReturn(SchemaManagement.UNMANAGED);
      HibernateDefaultDdlAutoProvider ddlAutoProvider=new HibernateDefaultDdlAutoProvider(Collections.singletonList(provider));
      assertThat(ddlAutoProvider.getDefaultDdlAuto(dataSource)).isEqualTo("create-drop");
    }
);
  }
}
