/** 
 * Tests for  {@link HttpRestartServer}.
 * @author Phillip Webb
 */
public class HttpRestartServerTests {
  @Mock private RestartServer delegate;
  private HttpRestartServer server;
  @Captor private ArgumentCaptor<ClassLoaderFiles> filesCaptor;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.server=new HttpRestartServer(this.delegate);
  }
  @Test public void sourceFolderUrlFilterMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpRestartServer((SourceFolderUrlFilter)null)).withMessageContaining("SourceFolderUrlFilter must not be null");
  }
  @Test public void restartServerMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpRestartServer((RestartServer)null)).withMessageContaining("RestartServer must not be null");
  }
  @Test public void sendClassLoaderFiles() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    ClassLoaderFiles files=new ClassLoaderFiles();
    files.addFile("name",new ClassLoaderFile(Kind.ADDED,new byte[0]));
    byte[] bytes=serialize(files);
    request.setContent(bytes);
    this.server.handle(new ServletServerHttpRequest(request),new ServletServerHttpResponse(response));
    verify(this.delegate).updateAndRestart(this.filesCaptor.capture());
    assertThat(this.filesCaptor.getValue().getFile("name")).isNotNull();
    assertThat(response.getStatus()).isEqualTo(200);
  }
  @Test public void sendNoContent() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    this.server.handle(new ServletServerHttpRequest(request),new ServletServerHttpResponse(response));
    verifyZeroInteractions(this.delegate);
    assertThat(response.getStatus()).isEqualTo(500);
  }
  @Test public void sendBadData() throws Exception {
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    request.setContent(new byte[]{0,0,0});
    this.server.handle(new ServletServerHttpRequest(request),new ServletServerHttpResponse(response));
    verifyZeroInteractions(this.delegate);
    assertThat(response.getStatus()).isEqualTo(500);
  }
  private byte[] serialize(  Object object) throws IOException {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    oos.writeObject(object);
    oos.close();
    return bos.toByteArray();
  }
}
