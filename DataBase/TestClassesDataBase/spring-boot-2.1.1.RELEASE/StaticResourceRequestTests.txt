/** 
 * Tests for  {@link StaticResourceRequest}.
 * @author Madhura Bhave
 */
public class StaticResourceRequestTests {
  private StaticResourceRequest resourceRequest=StaticResourceRequest.INSTANCE;
  @Test public void atCommonLocationsShouldMatchCommonLocations(){
    ServerWebExchangeMatcher matcher=this.resourceRequest.atCommonLocations();
    assertMatcher(matcher).matches("/css/file.css");
    assertMatcher(matcher).matches("/js/file.js");
    assertMatcher(matcher).matches("/images/file.css");
    assertMatcher(matcher).matches("/webjars/file.css");
    assertMatcher(matcher).matches("/foo/favicon.ico");
    assertMatcher(matcher).doesNotMatch("/bar");
  }
  @Test public void atCommonLocationsWithExcludeShouldNotMatchExcluded(){
    ServerWebExchangeMatcher matcher=this.resourceRequest.atCommonLocations().excluding(StaticResourceLocation.CSS);
    assertMatcher(matcher).doesNotMatch("/css/file.css");
    assertMatcher(matcher).matches("/js/file.js");
  }
  @Test public void atLocationShouldMatchLocation(){
    ServerWebExchangeMatcher matcher=this.resourceRequest.at(StaticResourceLocation.CSS);
    assertMatcher(matcher).matches("/css/file.css");
    assertMatcher(matcher).doesNotMatch("/js/file.js");
  }
  @Test public void atLocationsFromSetWhenSetIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.at(null)).withMessageContaining("Locations must not be null");
  }
  @Test public void excludeFromSetWhenSetIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.atCommonLocations().excluding(null)).withMessageContaining("Locations must not be null");
  }
  private RequestMatcherAssert assertMatcher(  ServerWebExchangeMatcher matcher){
    StaticWebApplicationContext context=new StaticWebApplicationContext();
    context.registerBean(ServerProperties.class);
    return assertThat(new RequestMatcherAssert(context,matcher));
  }
private static class RequestMatcherAssert implements AssertDelegateTarget {
    private final StaticApplicationContext context;
    private final ServerWebExchangeMatcher matcher;
    RequestMatcherAssert(    StaticApplicationContext context,    ServerWebExchangeMatcher matcher){
      this.context=context;
      this.matcher=matcher;
    }
    void matches(    String path){
      ServerWebExchange exchange=webHandler().createExchange(MockServerHttpRequest.get(path).build(),new MockServerHttpResponse());
      matches(exchange);
    }
    private void matches(    ServerWebExchange exchange){
      assertThat(this.matcher.matches(exchange).block().isMatch()).as("Matches " + getRequestPath(exchange)).isTrue();
    }
    void doesNotMatch(    String path){
      ServerWebExchange exchange=webHandler().createExchange(MockServerHttpRequest.get(path).build(),new MockServerHttpResponse());
      doesNotMatch(exchange);
    }
    private void doesNotMatch(    ServerWebExchange exchange){
      assertThat(this.matcher.matches(exchange).block().isMatch()).as("Does not match " + getRequestPath(exchange)).isFalse();
    }
    private TestHttpWebHandlerAdapter webHandler(){
      TestHttpWebHandlerAdapter adapter=new TestHttpWebHandlerAdapter(mock(WebHandler.class));
      adapter.setApplicationContext(this.context);
      return adapter;
    }
    private String getRequestPath(    ServerWebExchange exchange){
      return exchange.getRequest().getPath().toString();
    }
  }
private static class TestHttpWebHandlerAdapter extends HttpWebHandlerAdapter {
    TestHttpWebHandlerAdapter(    WebHandler delegate){
      super(delegate);
    }
    @Override protected ServerWebExchange createExchange(    ServerHttpRequest request,    ServerHttpResponse response){
      return super.createExchange(request,response);
    }
  }
}
