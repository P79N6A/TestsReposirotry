/** 
 * Tests for  {@link HttpHeaderAccessManager}.
 * @author Rob Winch
 * @author Phillip Webb
 */
public class HttpHeaderAccessManagerTests {
  private static final String HEADER="X-AUTH_TOKEN";
  private static final String SECRET="password";
  private MockHttpServletRequest request;
  private ServerHttpRequest serverRequest;
  private HttpHeaderAccessManager manager;
  @Before public void setup(){
    this.request=new MockHttpServletRequest("GET","/");
    this.serverRequest=new ServletServerHttpRequest(this.request);
    this.manager=new HttpHeaderAccessManager(HEADER,SECRET);
  }
  @Test public void headerNameMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(null,SECRET)).withMessageContaining("HeaderName must not be empty");
  }
  @Test public void headerNameMustNotBeEmpty(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager("",SECRET)).withMessageContaining("HeaderName must not be empty");
  }
  @Test public void expectedSecretMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(HEADER,null)).withMessageContaining("ExpectedSecret must not be empty");
  }
  @Test public void expectedSecretMustNotBeEmpty(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(HEADER,"")).withMessageContaining("ExpectedSecret must not be empty");
  }
  @Test public void allowsMatching(){
    this.request.addHeader(HEADER,SECRET);
    assertThat(this.manager.isAllowed(this.serverRequest)).isTrue();
  }
  @Test public void disallowsWrongSecret(){
    this.request.addHeader(HEADER,"wrong");
    assertThat(this.manager.isAllowed(this.serverRequest)).isFalse();
  }
  @Test public void disallowsNoSecret(){
    assertThat(this.manager.isAllowed(this.serverRequest)).isFalse();
  }
  @Test public void disallowsWrongHeader(){
    this.request.addHeader("X-WRONG",SECRET);
    assertThat(this.manager.isAllowed(this.serverRequest)).isFalse();
  }
}
