/** 
 * Tests for  {@link HttpWebServiceMessageSenderBuilder}.
 * @author Stephane Nicoll
 */
public class HttpWebServiceMessageSenderBuilderTests {
  @Test public void buildWithRequestFactorySupplier(){
    ClientHttpRequestFactory requestFactory=mock(ClientHttpRequestFactory.class);
    ClientHttpRequestMessageSender messageSender=build(new HttpWebServiceMessageSenderBuilder().requestFactory(() -> requestFactory));
    assertThat(messageSender.getRequestFactory()).isSameAs(requestFactory);
  }
  @Test public void buildWithReadAndConnectTimeout(){
    ClientHttpRequestMessageSender messageSender=build(new HttpWebServiceMessageSenderBuilder().requestFactory(SimpleClientHttpRequestFactory::new).setConnectTimeout(Duration.ofSeconds(5)).setReadTimeout(Duration.ofSeconds(2)));
    SimpleClientHttpRequestFactory requestFactory=(SimpleClientHttpRequestFactory)messageSender.getRequestFactory();
    assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout",5000);
    assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout",2000);
  }
  @Test public void buildUsesHttpComponentsByDefault(){
    ClientHttpRequestMessageSender messageSender=build(new HttpWebServiceMessageSenderBuilder().setConnectTimeout(Duration.ofSeconds(5)).setReadTimeout(Duration.ofSeconds(2)));
    ClientHttpRequestFactory requestFactory=messageSender.getRequestFactory();
    assertThat(requestFactory).isInstanceOf(HttpComponentsClientHttpRequestFactory.class);
    RequestConfig requestConfig=(RequestConfig)ReflectionTestUtils.getField(requestFactory,"requestConfig");
    assertThat(requestConfig).isNotNull();
    assertThat(requestConfig.getConnectTimeout()).isEqualTo(5000);
    assertThat(requestConfig.getSocketTimeout()).isEqualTo(2000);
  }
  private ClientHttpRequestMessageSender build(  HttpWebServiceMessageSenderBuilder builder){
    WebServiceMessageSender messageSender=builder.build();
    assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class);
    return ((ClientHttpRequestMessageSender)messageSender);
  }
}
