/** 
 * Tests for  {@link WebServer}s driving  {@link ServletContextListener}s correctly
 * @author Andy Wilkinson
 */
public class ServletWebServerServletContextListenerTests {
  @Test public void registeredServletContextListenerBeanIsCalledByJetty(){
    registeredServletContextListenerBeanIsCalled(JettyConfiguration.class);
  }
  @Test public void registeredServletContextListenerBeanIsCalledByTomcat(){
    registeredServletContextListenerBeanIsCalled(TomcatConfiguration.class);
  }
  @Test public void registeredServletContextListenerBeanIsCalledByUndertow(){
    registeredServletContextListenerBeanIsCalled(UndertowConfiguration.class);
  }
  @Test public void servletContextListenerBeanIsCalledByJetty(){
    servletContextListenerBeanIsCalled(JettyConfiguration.class);
  }
  @Test public void servletContextListenerBeanIsCalledByTomcat(){
    servletContextListenerBeanIsCalled(TomcatConfiguration.class);
  }
  @Test public void servletContextListenerBeanIsCalledByUndertow(){
    servletContextListenerBeanIsCalled(UndertowConfiguration.class);
  }
  private void servletContextListenerBeanIsCalled(  Class<?> configuration){
    AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext(ServletContextListenerBeanConfiguration.class,configuration);
    ServletContextListener servletContextListener=context.getBean("servletContextListener",ServletContextListener.class);
    verify(servletContextListener).contextInitialized(any(ServletContextEvent.class));
    context.close();
  }
  private void registeredServletContextListenerBeanIsCalled(  Class<?> configuration){
    AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext(ServletListenerRegistrationBeanConfiguration.class,configuration);
    ServletContextListener servletContextListener=(ServletContextListener)context.getBean("registration",ServletListenerRegistrationBean.class).getListener();
    verify(servletContextListener).contextInitialized(any(ServletContextEvent.class));
    context.close();
  }
@Configuration static class TomcatConfiguration {
    @Bean public ServletWebServerFactory webServerFactory(){
      return new TomcatServletWebServerFactory(0);
    }
  }
@Configuration static class JettyConfiguration {
    @Bean public ServletWebServerFactory webServerFactory(){
      return new JettyServletWebServerFactory(0);
    }
  }
@Configuration static class UndertowConfiguration {
    @Bean public ServletWebServerFactory webServerFactory(){
      return new UndertowServletWebServerFactory(0);
    }
  }
@Configuration static class ServletContextListenerBeanConfiguration {
    @Bean public ServletContextListener servletContextListener(){
      return mock(ServletContextListener.class);
    }
  }
@Configuration static class ServletListenerRegistrationBeanConfiguration {
    @Bean public ServletListenerRegistrationBean<ServletContextListener> registration(){
      return new ServletListenerRegistrationBean<>(mock(ServletContextListener.class));
    }
  }
}
