/** 
 * Tests for  {@link ErrorMvcAutoConfiguration}.
 * @author Brian Clozel
 */
public class ErrorMvcAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(DispatcherServletAutoConfiguration.class,ErrorMvcAutoConfiguration.class));
  @Rule public OutputCapture outputCapture=new OutputCapture();
  @Test public void renderContainsViewWithExceptionDetails() throws Exception {
    this.contextRunner.run((context) -> {
      View errorView=context.getBean("error",View.class);
      ErrorAttributes errorAttributes=context.getBean(ErrorAttributes.class);
      DispatcherServletWebRequest webRequest=createWebRequest(new IllegalStateException("Exception message"),false);
      errorView.render(errorAttributes.getErrorAttributes(webRequest,true),webRequest.getRequest(),webRequest.getResponse());
      String responseString=((MockHttpServletResponse)webRequest.getResponse()).getContentAsString();
      assertThat(responseString).contains("<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>").contains("<div>Exception message</div>").contains("<div style='white-space:pre-wrap;'>java.lang.IllegalStateException");
    }
);
  }
  @Test public void renderWhenAlreadyCommittedLogsMessage(){
    this.contextRunner.run((context) -> {
      View errorView=context.getBean("error",View.class);
      ErrorAttributes errorAttributes=context.getBean(ErrorAttributes.class);
      DispatcherServletWebRequest webRequest=createWebRequest(new IllegalStateException("Exception message"),true);
      errorView.render(errorAttributes.getErrorAttributes(webRequest,true),webRequest.getRequest(),webRequest.getResponse());
      assertThat(this.outputCapture.toString()).contains("Cannot render error page for request [/path] " + "and exception [Exception message] as the response has " + "already been committed. As a result, the response may "+ "have the wrong status code.");
    }
);
  }
  private DispatcherServletWebRequest createWebRequest(  Exception ex,  boolean committed){
    MockHttpServletRequest request=new MockHttpServletRequest("GET","/path");
    MockHttpServletResponse response=new MockHttpServletResponse();
    DispatcherServletWebRequest webRequest=new DispatcherServletWebRequest(request,response);
    webRequest.setAttribute("javax.servlet.error.exception",ex,RequestAttributes.SCOPE_REQUEST);
    webRequest.setAttribute("javax.servlet.error.request_uri","/path",RequestAttributes.SCOPE_REQUEST);
    response.setCommitted(committed);
    response.setOutputStreamAccessAllowed(!committed);
    response.setWriterAccessAllowed(!committed);
    return webRequest;
  }
}
