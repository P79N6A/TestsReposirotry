/** 
 * Tests for  {@link SpringDataWebAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Vedran Pavic
 * @author Stephane Nicoll
 */
public class SpringDataWebAutoConfigurationTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SpringDataWebAutoConfiguration.class));
  @Test public void webSupportIsAutoConfiguredInWebApplicationContexts(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(PageableHandlerMethodArgumentResolver.class));
  }
  @Test public void autoConfigurationBacksOffInNonWebApplicationContexts(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(SpringDataWebAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(PageableHandlerMethodArgumentResolver.class));
  }
  @Test public void customizePageable(){
    this.contextRunner.withPropertyValues("spring.data.web.pageable.page-parameter=p","spring.data.web.pageable.size-parameter=s","spring.data.web.pageable.default-page-size=10","spring.data.web.pageable.prefix=abc","spring.data.web.pageable.qualifier-delimiter=__","spring.data.web.pageable.max-page-size=100","spring.data.web.pageable.one-indexed-parameters=true").run((context) -> {
      PageableHandlerMethodArgumentResolver argumentResolver=context.getBean(PageableHandlerMethodArgumentResolver.class);
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("pageParameterName","p");
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("sizeParameterName","s");
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("oneIndexedParameters",true);
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("prefix","abc");
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("qualifierDelimiter","__");
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("fallbackPageable",PageRequest.of(0,10));
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("maxPageSize",100);
    }
);
  }
  @Test public void defaultPageable(){
    this.contextRunner.run((context) -> {
      SpringDataWebProperties.Pageable properties=new SpringDataWebProperties().getPageable();
      PageableHandlerMethodArgumentResolver argumentResolver=context.getBean(PageableHandlerMethodArgumentResolver.class);
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("pageParameterName",properties.getPageParameter());
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("sizeParameterName",properties.getSizeParameter());
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("oneIndexedParameters",properties.isOneIndexedParameters());
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("prefix",properties.getPrefix());
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("qualifierDelimiter",properties.getQualifierDelimiter());
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("fallbackPageable",PageRequest.of(0,properties.getDefaultPageSize()));
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("maxPageSize",properties.getMaxPageSize());
    }
);
  }
  @Test public void customizeSort(){
    this.contextRunner.withPropertyValues("spring.data.web.sort.sort-parameter=s").run((context) -> {
      SortHandlerMethodArgumentResolver argumentResolver=context.getBean(SortHandlerMethodArgumentResolver.class);
      assertThat(argumentResolver).hasFieldOrPropertyWithValue("sortParameter","s");
    }
);
  }
}
