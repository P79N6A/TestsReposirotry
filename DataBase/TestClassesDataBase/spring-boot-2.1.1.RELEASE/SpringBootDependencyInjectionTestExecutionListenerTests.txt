/** 
 * Tests for  {@link SpringBootDependencyInjectionTestExecutionListener}.
 * @author Phillip Webb
 */
public class SpringBootDependencyInjectionTestExecutionListenerTests {
  @Rule public OutputCapture out=new OutputCapture();
  private SpringBootDependencyInjectionTestExecutionListener reportListener=new SpringBootDependencyInjectionTestExecutionListener();
  @Test public void orderShouldBeSameAsDependencyInjectionTestExecutionListener(){
    Ordered injectionListener=new DependencyInjectionTestExecutionListener();
    assertThat(this.reportListener.getOrder()).isEqualTo(injectionListener.getOrder());
  }
  @Test public void prepareFailingTestInstanceShouldPrintReport() throws Exception {
    TestContext testContext=mock(TestContext.class);
    given(testContext.getTestInstance()).willThrow(new IllegalStateException());
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    ConfigurableApplicationContext applicationContext=application.run();
    given(testContext.getApplicationContext()).willReturn(applicationContext);
    try {
      this.reportListener.prepareTestInstance(testContext);
    }
 catch (    IllegalStateException ex) {
    }
    this.out.expect(containsString("CONDITIONS EVALUATION REPORT"));
    this.out.expect(containsString("Positive matches"));
    this.out.expect(containsString("Negative matches"));
  }
  @Test public void originalFailureIsThrownWhenReportGenerationFails() throws Exception {
    TestContext testContext=mock(TestContext.class);
    IllegalStateException originalFailure=new IllegalStateException();
    given(testContext.getTestInstance()).willThrow(originalFailure);
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    given(testContext.getApplicationContext()).willThrow(new RuntimeException());
    assertThatIllegalStateException().isThrownBy(() -> this.reportListener.prepareTestInstance(testContext)).isEqualTo(originalFailure);
  }
@Configuration @ImportAutoConfiguration(JacksonAutoConfiguration.class) static class Config {
  }
}
