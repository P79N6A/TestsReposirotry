/** 
 * Integration test for  {@link DataRedisTest}.
 * @author Jayaram Pradhan
 */
@RunWith(SpringRunner.class) @ContextConfiguration(initializers=DataRedisTestIntegrationTests.Initializer.class) @DataRedisTest public class DataRedisTestIntegrationTests {
  @ClassRule public static RedisContainer redis=new RedisContainer();
  @Autowired private RedisOperations<Object,Object> operations;
  @Autowired private ExampleRepository exampleRepository;
  @Autowired private ApplicationContext applicationContext;
  private static final Charset CHARSET=StandardCharsets.UTF_8;
  @Test public void testRepository(){
    PersonHash personHash=new PersonHash();
    personHash.setDescription("Look, new @DataRedisTest!");
    assertThat(personHash.getId()).isNull();
    PersonHash savedEntity=this.exampleRepository.save(personHash);
    assertThat(savedEntity.getId()).isNotNull();
    assertThat(this.operations.execute((    RedisConnection connection) -> connection.exists(("persons:" + savedEntity.getId()).getBytes(CHARSET)))).isTrue();
    this.exampleRepository.deleteAll();
  }
  @Test public void didNotInjectExampleService(){
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.applicationContext.getBean(ExampleService.class));
  }
static class Initializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {
    @Override public void initialize(    ConfigurableApplicationContext configurableApplicationContext){
      TestPropertyValues.of("spring.redis.port=" + redis.getMappedPort()).applyTo(configurableApplicationContext.getEnvironment());
    }
  }
}
