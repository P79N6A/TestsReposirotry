/** 
 * Integration tests that verify the ordering of various filters that are auto-configured.
 * @author Andy Wilkinson
 * @author Eddú Meléndez
 */
public class FilterOrderingIntegrationTests {
  private AnnotationConfigServletWebServerApplicationContext context;
  @After public void cleanup(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void testFilterOrdering(){
    load();
    List<RegisteredFilter> registeredFilters=this.context.getBean(MockServletWebServerFactory.class).getWebServer().getRegisteredFilters();
    List<Filter> filters=new ArrayList<>(registeredFilters.size());
    for (    RegisteredFilter registeredFilter : registeredFilters) {
      filters.add(registeredFilter.getFilter());
    }
    Iterator<Filter> iterator=filters.iterator();
    assertThat(iterator.next()).isInstanceOf(OrderedCharacterEncodingFilter.class);
    assertThat(iterator.next()).isInstanceOf(SessionRepositoryFilter.class);
    assertThat(iterator.next()).isInstanceOf(Filter.class);
    assertThat(iterator.next()).isInstanceOf(Filter.class);
    assertThat(iterator.next()).isInstanceOf(OrderedRequestContextFilter.class);
    assertThat(iterator.next()).isInstanceOf(FilterChainProxy.class);
  }
  private void load(){
    this.context=new AnnotationConfigServletWebServerApplicationContext();
    this.context.register(MockWebServerConfiguration.class,TestSessionConfiguration.class,TestRedisConfiguration.class,WebMvcAutoConfiguration.class,SecurityAutoConfiguration.class,SessionAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,HttpEncodingAutoConfiguration.class);
    this.context.refresh();
  }
@Configuration static class MockWebServerConfiguration {
    @Bean public MockServletWebServerFactory webServerFactory(){
      return new MockServletWebServerFactory();
    }
    @Bean public WebServerFactoryCustomizerBeanPostProcessor ServletWebServerCustomizerBeanPostProcessor(){
      return new WebServerFactoryCustomizerBeanPostProcessor();
    }
  }
@Configuration @EnableSpringHttpSession static class TestSessionConfiguration {
    @Bean public MapSessionRepository mapSessionRepository(){
      return new MapSessionRepository(new ConcurrentHashMap<>());
    }
  }
@Configuration static class TestRedisConfiguration {
    @Bean public RedisConnectionFactory redisConnectionFactory(){
      RedisConnectionFactory connectionFactory=mock(RedisConnectionFactory.class);
      RedisConnection connection=mock(RedisConnection.class);
      given(connectionFactory.getConnection()).willReturn(connection);
      return connectionFactory;
    }
  }
}
