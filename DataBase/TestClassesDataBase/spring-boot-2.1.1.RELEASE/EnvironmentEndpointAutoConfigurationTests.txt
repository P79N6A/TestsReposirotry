/** 
 * Tests for  {@link EnvironmentEndpointAutoConfiguration}.
 * @author Phillip Webb
 */
public class EnvironmentEndpointAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(EnvironmentEndpointAutoConfiguration.class));
  @Test public void runShouldHaveEndpointBean(){
    this.contextRunner.withSystemProperties("dbPassword=123456","apiKey=123456").run(validateSystemProperties("******","******"));
  }
  @Test public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(){
    this.contextRunner.withPropertyValues("management.endpoint.env.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(EnvironmentEndpoint.class));
  }
  @Test public void keysToSanitizeCanBeConfiguredViaTheEnvironment(){
    this.contextRunner.withSystemProperties("dbPassword=123456","apiKey=123456").withPropertyValues("management.endpoint.env.keys-to-sanitize=.*pass.*").run(validateSystemProperties("******","123456"));
  }
  private ContextConsumer<AssertableApplicationContext> validateSystemProperties(  String dbPassword,  String apiKey){
    return (context) -> {
      assertThat(context).hasSingleBean(EnvironmentEndpoint.class);
      EnvironmentEndpoint endpoint=context.getBean(EnvironmentEndpoint.class);
      EnvironmentDescriptor env=endpoint.environment(null);
      Map<String,PropertyValueDescriptor> systemProperties=getSource("systemProperties",env).getProperties();
      assertThat(systemProperties.get("dbPassword").getValue()).isEqualTo(dbPassword);
      assertThat(systemProperties.get("apiKey").getValue()).isEqualTo(apiKey);
    }
;
  }
  private PropertySourceDescriptor getSource(  String name,  EnvironmentDescriptor descriptor){
    return descriptor.getPropertySources().stream().filter((source) -> name.equals(source.getName())).findFirst().get();
  }
}
