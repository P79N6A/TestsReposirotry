/** 
 * Tests for  {@link SpringBootJoranConfigurator}.
 * @author Phillip Webb
 * @author Eddú Meléndez
 * @author Stephane Nicoll
 */
public class SpringBootJoranConfiguratorTests {
  @Rule public OutputCapture out=new OutputCapture();
  private MockEnvironment environment;
  private LoggingInitializationContext initializationContext;
  private JoranConfigurator configurator;
  private LoggerContext context;
  private Logger logger;
  @Before public void setup(){
    this.environment=new MockEnvironment();
    this.initializationContext=new LoggingInitializationContext(this.environment);
    this.configurator=new SpringBootJoranConfigurator(this.initializationContext);
    StaticLoggerBinder binder=StaticLoggerBinder.getSingleton();
    this.context=(LoggerContext)binder.getLoggerFactory();
    this.logger=this.context.getLogger(getClass());
  }
  @After public void reset(){
    this.context.stop();
    new BasicConfigurator().configure((LoggerContext)LoggerFactory.getILoggerFactory());
  }
  @Test public void profileActive() throws Exception {
    this.environment.setActiveProfiles("production");
    initialize("production-profile.xml");
    this.logger.trace("Hello");
    this.out.expect(containsString("Hello"));
  }
  @Test public void multipleNamesFirstProfileActive() throws Exception {
    this.environment.setActiveProfiles("production");
    initialize("multi-profile-names.xml");
    this.logger.trace("Hello");
    this.out.expect(containsString("Hello"));
  }
  @Test public void multipleNamesSecondProfileActive() throws Exception {
    this.environment.setActiveProfiles("test");
    initialize("multi-profile-names.xml");
    this.logger.trace("Hello");
    this.out.expect(containsString("Hello"));
  }
  @Test public void profileNotActive() throws Exception {
    initialize("production-profile.xml");
    this.logger.trace("Hello");
    this.out.expect(not(containsString("Hello")));
  }
  @Test public void profileExpressionMatchFirst() throws Exception {
    this.environment.setActiveProfiles("production");
    initialize("profile-expression.xml");
    this.logger.trace("Hello");
    this.out.expect(containsString("Hello"));
  }
  @Test public void profileExpressionMatchSecond() throws Exception {
    this.environment.setActiveProfiles("test");
    initialize("profile-expression.xml");
    this.logger.trace("Hello");
    this.out.expect(containsString("Hello"));
  }
  @Test public void profileExpressionNoMatch() throws Exception {
    this.environment.setActiveProfiles("development");
    initialize("profile-expression.xml");
    this.logger.trace("Hello");
    this.out.expect(not(containsString("Hello")));
  }
  @Test public void profileNestedActiveActive() throws Exception {
    doTestNestedProfile(true,"outer","inner");
  }
  @Test public void profileNestedActiveNotActive() throws Exception {
    doTestNestedProfile(false,"outer");
  }
  @Test public void profileNestedNotActiveActive() throws Exception {
    doTestNestedProfile(false,"inner");
  }
  @Test public void profileNestedNotActiveNotActive() throws Exception {
    doTestNestedProfile(false);
  }
  @Test public void springProperty() throws Exception {
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,"my.example-property=test");
    initialize("property.xml");
    assertThat(this.context.getProperty("MINE")).isEqualTo("test");
  }
  @Test public void relaxedSpringProperty() throws Exception {
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,"my.EXAMPLE_PROPERTY=test");
    ConfigurationPropertySources.attach(this.environment);
    initialize("property.xml");
    assertThat(this.context.getProperty("MINE")).isEqualTo("test");
  }
  @Test public void springPropertyNoValue() throws Exception {
    initialize("property.xml");
    assertThat(this.context.getProperty("SIMPLE")).isNull();
  }
  @Test public void relaxedSpringPropertyNoValue() throws Exception {
    initialize("property.xml");
    assertThat(this.context.getProperty("MINE")).isNull();
  }
  @Test public void springPropertyWithDefaultValue() throws Exception {
    initialize("property-default-value.xml");
    assertThat(this.context.getProperty("SIMPLE")).isEqualTo("foo");
  }
  @Test public void relaxedSpringPropertyWithDefaultValue() throws Exception {
    initialize("property-default-value.xml");
    assertThat(this.context.getProperty("MINE")).isEqualTo("bar");
  }
  private void doTestNestedProfile(  boolean expected,  String... profiles) throws JoranException {
    this.environment.setActiveProfiles(profiles);
    initialize("nested.xml");
    this.logger.trace("Hello");
    if (expected) {
      this.out.expect(containsString("Hello"));
    }
 else {
      this.out.expect(not(containsString("Hello")));
    }
  }
  private void initialize(  String config) throws JoranException {
    this.configurator.setContext(this.context);
    this.configurator.doConfigure(getClass().getResourceAsStream(config));
  }
}
