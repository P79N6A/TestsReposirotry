/** 
 * Tests for  {@link SpringBootServletInitializer}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class SpringBootServletInitializerTests {
  @Rule public OutputCapture output=new OutputCapture();
  private ServletContext servletContext=new MockServletContext();
  private SpringApplication application;
  @After public void verifyLoggingOutput(){
    assertThat(this.output.toString()).doesNotContain(StandardServletEnvironment.class.getSimpleName());
  }
  @Test public void failsWithoutConfigure(){
    assertThatIllegalStateException().isThrownBy(() -> new MockSpringBootServletInitializer().createRootApplicationContext(this.servletContext)).withMessageContaining("No SpringApplication sources have been defined");
  }
  @Test public void withConfigurationAnnotation(){
    new WithConfigurationAnnotation().createRootApplicationContext(this.servletContext);
    assertThat(this.application.getAllSources()).containsOnly(WithConfigurationAnnotation.class,ErrorPageFilterConfiguration.class);
  }
  @Test public void withConfiguredSource(){
    new WithConfiguredSource().createRootApplicationContext(this.servletContext);
    assertThat(this.application.getAllSources()).containsOnly(Config.class,ErrorPageFilterConfiguration.class);
  }
  @Test public void applicationBuilderCanBeCustomized(){
    CustomSpringBootServletInitializer servletInitializer=new CustomSpringBootServletInitializer();
    servletInitializer.createRootApplicationContext(this.servletContext);
    assertThat(servletInitializer.applicationBuilder.built).isTrue();
  }
  @Test public void mainClassHasSensibleDefault(){
    new WithConfigurationAnnotation().createRootApplicationContext(this.servletContext);
    assertThat(this.application).hasFieldOrPropertyWithValue("mainApplicationClass",WithConfigurationAnnotation.class);
  }
  @Test public void errorPageFilterRegistrationCanBeDisabled(){
    WebServer webServer=new UndertowServletWebServerFactory(0).getWebServer((servletContext) -> {
      try (AbstractApplicationContext context=(AbstractApplicationContext)new WithErrorPageFilterNotRegistered().createRootApplicationContext(servletContext)){
        assertThat(context.getBeansOfType(ErrorPageFilter.class)).hasSize(0);
      }
     }
);
    try {
      webServer.start();
    }
  finally {
      webServer.stop();
    }
  }
  @Test public void executableWarThatUsesServletInitializerDoesNotHaveErrorPageFilterConfigured(){
    try (ConfigurableApplicationContext context=new SpringApplication(ExecutableWar.class).run()){
      assertThat(context.getBeansOfType(ErrorPageFilter.class)).hasSize(0);
    }
   }
  @Test public void servletContextPropertySourceIsAvailablePriorToRefresh(){
    ServletContext servletContext=mock(ServletContext.class);
    given(servletContext.getInitParameterNames()).willReturn(Collections.enumeration(Arrays.asList("spring.profiles.active")));
    given(servletContext.getInitParameter("spring.profiles.active")).willReturn("from-servlet-context");
    given(servletContext.getAttributeNames()).willReturn(Collections.enumeration(Collections.emptyList()));
    try (ConfigurableApplicationContext context=(ConfigurableApplicationContext)new PropertySourceVerifyingSpringBootServletInitializer().createRootApplicationContext(servletContext)){
      assertThat(context.getEnvironment().getActiveProfiles()).containsExactly("from-servlet-context");
    }
   }
private static class PropertySourceVerifyingSpringBootServletInitializer extends SpringBootServletInitializer {
    @Override protected SpringApplicationBuilder configure(    SpringApplicationBuilder builder){
      return builder.sources(TestApp.class).listeners(new PropertySourceVerifyingApplicationListener());
    }
  }
@Configuration static class TestApp {
  }
private class MockSpringBootServletInitializer extends SpringBootServletInitializer {
    @Override protected WebApplicationContext run(    SpringApplication application){
      SpringBootServletInitializerTests.this.application=application;
      return null;
    }
  }
private class CustomSpringBootServletInitializer extends MockSpringBootServletInitializer {
    private final CustomSpringApplicationBuilder applicationBuilder=new CustomSpringApplicationBuilder();
    @Override protected SpringApplicationBuilder createSpringApplicationBuilder(){
      return this.applicationBuilder;
    }
    @Override protected SpringApplicationBuilder configure(    SpringApplicationBuilder application){
      return application.sources(Config.class);
    }
  }
@Configuration public class WithConfigurationAnnotation extends MockSpringBootServletInitializer {
  }
public class WithConfiguredSource extends MockSpringBootServletInitializer {
    @Override protected SpringApplicationBuilder configure(    SpringApplicationBuilder application){
      return application.sources(Config.class);
    }
  }
@Configuration public static class WithErrorPageFilterNotRegistered extends SpringBootServletInitializer {
    public WithErrorPageFilterNotRegistered(){
      setRegisterErrorPageFilter(false);
    }
  }
@Configuration public static class ExecutableWar extends SpringBootServletInitializer {
    @Bean public ServletWebServerFactory webServerFactory(){
      return new UndertowServletWebServerFactory(0);
    }
  }
@Configuration public static class Config {
  }
private static class CustomSpringApplicationBuilder extends SpringApplicationBuilder {
    private boolean built;
    @Override public SpringApplication build(){
      this.built=true;
      return super.build();
    }
  }
private static final class PropertySourceVerifyingApplicationListener implements ApplicationListener<ApplicationEnvironmentPreparedEvent> {
    @Override public void onApplicationEvent(    ApplicationEnvironmentPreparedEvent event){
      PropertySource<?> propertySource=event.getEnvironment().getPropertySources().get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME);
      assertThat(propertySource.getProperty("spring.profiles.active")).isEqualTo("from-servlet-context");
    }
  }
}
