/** 
 * Tests for  {@link PropertySourcesPlaceholdersResolver}.
 * @author Phillip Webb
 * @author Madhura Bhave
 */
public class PropertySourcesPlaceholdersResolverTests {
  private PropertySourcesPlaceholdersResolver resolver;
  @Test public void placeholderResolverIfEnvironmentNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourcesPlaceholdersResolver((Environment)null)).withMessageContaining("Environment must not be null");
  }
  @Test public void resolveIfPlaceholderPresentResolvesProperty(){
    MutablePropertySources sources=getPropertySources();
    this.resolver=new PropertySourcesPlaceholdersResolver(sources);
    Object resolved=this.resolver.resolvePlaceholders("${FOO}");
    assertThat(resolved).isEqualTo("hello world");
  }
  @Test public void resolveIfPlaceholderAbsentUsesDefault(){
    this.resolver=new PropertySourcesPlaceholdersResolver((PropertySources)null);
    Object resolved=this.resolver.resolvePlaceholders("${FOO:bar}");
    assertThat(resolved).isEqualTo("bar");
  }
  @Test public void resolveIfPlaceholderAbsentAndNoDefaultUsesPlaceholder(){
    this.resolver=new PropertySourcesPlaceholdersResolver((PropertySources)null);
    Object resolved=this.resolver.resolvePlaceholders("${FOO}");
    assertThat(resolved).isEqualTo("${FOO}");
  }
  @Test public void resolveIfHelperPresentShouldUseIt(){
    MutablePropertySources sources=getPropertySources();
    TestPropertyPlaceholderHelper helper=new TestPropertyPlaceholderHelper("$<",">");
    this.resolver=new PropertySourcesPlaceholdersResolver(sources,helper);
    Object resolved=this.resolver.resolvePlaceholders("$<FOO>");
    assertThat(resolved).isEqualTo("hello world");
  }
  private MutablePropertySources getPropertySources(){
    MutablePropertySources sources=new MutablePropertySources();
    Map<String,Object> source=new HashMap<>();
    source.put("FOO","hello world");
    sources.addFirst(new MapPropertySource("test",source));
    return sources;
  }
static class TestPropertyPlaceholderHelper extends PropertyPlaceholderHelper {
    TestPropertyPlaceholderHelper(    String placeholderPrefix,    String placeholderSuffix){
      super(placeholderPrefix,placeholderSuffix);
    }
  }
}
