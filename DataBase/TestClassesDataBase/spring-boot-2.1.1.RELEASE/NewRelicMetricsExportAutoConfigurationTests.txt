/** 
 * Tests for  {@link NewRelicMetricsExportAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class NewRelicMetricsExportAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(NewRelicMetricsExportAutoConfiguration.class));
  @Test public void backsOffWithoutAClock(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(NewRelicMeterRegistry.class));
  }
  @Test public void failsWithoutAnApiKey(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasFailed());
  }
  @Test public void failsWithoutAnAccountId(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde").run((context) -> assertThat(context).hasFailed());
  }
  @Test public void autoConfiguresWithAccountIdAndApiKey(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde","management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicMeterRegistry.class).hasSingleBean(Clock.class).hasSingleBean(NewRelicConfig.class));
  }
  @Test public void autoConfigurationCanBeDisabled(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(NewRelicMeterRegistry.class).doesNotHaveBean(NewRelicConfig.class));
  }
  @Test public void allowsConfigToBeCustomized(){
    this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde","management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicConfig.class).hasBean("customConfig"));
  }
  @Test public void allowsRegistryToBeCustomized(){
    this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde","management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicMeterRegistry.class).hasBean("customRegistry"));
  }
  @Test public void stopsMeterRegistryWhenContextIsClosed(){
    this.contextRunner.withPropertyValues("management.metrics.export.newrelic.api-key=abcde","management.metrics.export.newrelic.account-id=abcde").withUserConfiguration(BaseConfiguration.class).run((context) -> {
      NewRelicMeterRegistry registry=context.getBean(NewRelicMeterRegistry.class);
      assertThat(registry.isClosed()).isFalse();
      context.close();
      assertThat(registry.isClosed()).isTrue();
    }
);
  }
@Configuration static class BaseConfiguration {
    @Bean public Clock customClock(){
      return Clock.SYSTEM;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomConfigConfiguration {
    @Bean public NewRelicConfig customConfig(){
      return new NewRelicConfig(){
        @Override public String get(        String k){
          if ("newrelic.accountId".equals(k)) {
            return "abcde";
          }
          if ("newrelic.apiKey".equals(k)) {
            return "12345";
          }
          return null;
        }
      }
;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomRegistryConfiguration {
    @Bean public NewRelicMeterRegistry customRegistry(    NewRelicConfig config,    Clock clock){
      return new NewRelicMeterRegistry(config,clock);
    }
  }
}
