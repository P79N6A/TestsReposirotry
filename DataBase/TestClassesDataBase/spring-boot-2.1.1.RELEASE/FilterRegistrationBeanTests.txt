/** 
 * Tests for  {@link FilterRegistrationBean}.
 * @author Phillip Webb
 */
public class FilterRegistrationBeanTests extends AbstractFilterRegistrationBeanTests {
  private final MockFilter filter=new MockFilter();
  @Test public void setFilter() throws Exception {
    FilterRegistrationBean<Filter> bean=new FilterRegistrationBean<>();
    bean.setFilter(this.filter);
    bean.onStartup(this.servletContext);
    verify(this.servletContext).addFilter("mockFilter",this.filter);
  }
  @Test public void setFilterMustNotBeNull() throws Exception {
    FilterRegistrationBean<Filter> bean=new FilterRegistrationBean<>();
    assertThatIllegalArgumentException().isThrownBy(() -> bean.onStartup(this.servletContext)).withMessageContaining("Filter must not be null");
  }
  @Test public void constructFilterMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new FilterRegistrationBean<>(null)).withMessageContaining("Filter must not be null");
  }
  @Test public void createServletRegistrationBeanMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new FilterRegistrationBean<>(this.filter,(ServletRegistrationBean[])null)).withMessageContaining("ServletRegistrationBeans must not be null");
  }
  @Override protected AbstractFilterRegistrationBean<MockFilter> createFilterRegistrationBean(  ServletRegistrationBean<?>... servletRegistrationBeans){
    return new FilterRegistrationBean<>(this.filter,servletRegistrationBeans);
  }
  @Override protected Filter getExpectedFilter(){
    return eq(this.filter);
  }
}
