/** 
 * Tests for  {@link ClientHttpConnectorAutoConfiguration}
 * @author Brian Clozel
 */
public class ClientHttpConnectorAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(ClientHttpConnectorAutoConfiguration.class));
  @Test public void shouldCreateHttpClientBeans(){
    this.contextRunner.run((context) -> {
      assertThat(context).hasSingleBean(ReactorResourceFactory.class);
      assertThat(context).hasSingleBean(ReactorClientHttpConnector.class);
      WebClientCustomizer clientCustomizer=context.getBean(WebClientCustomizer.class);
      WebClient.Builder builder=mock(WebClient.Builder.class);
      clientCustomizer.customize(builder);
      verify(builder,times(1)).clientConnector(any(ReactorClientHttpConnector.class));
    }
);
  }
  @Test public void shouldNotOverrideCustomClientConnector(){
    this.contextRunner.withUserConfiguration(CustomClientHttpConnectorConfig.class).run((context) -> {
      assertThat(context).hasSingleBean(ClientHttpConnector.class).hasBean("customConnector").doesNotHaveBean(ReactorResourceFactory.class);
      WebClientCustomizer clientCustomizer=context.getBean(WebClientCustomizer.class);
      WebClient.Builder builder=mock(WebClient.Builder.class);
      clientCustomizer.customize(builder);
      verify(builder,times(1)).clientConnector(any(ClientHttpConnector.class));
    }
);
  }
  @Test public void shouldUseCustomReactorResourceFactory(){
    this.contextRunner.withUserConfiguration(CustomReactorResourceConfig.class).run((context) -> assertThat(context).hasSingleBean(ReactorClientHttpConnector.class).hasSingleBean(ReactorResourceFactory.class).hasBean("customReactorResourceFactory"));
  }
@Configuration static class CustomClientHttpConnectorConfig {
    @Bean public ClientHttpConnector customConnector(){
      return mock(ClientHttpConnector.class);
    }
  }
@Configuration static class CustomReactorResourceConfig {
    @Bean public ReactorResourceFactory customReactorResourceFactory(){
      return new ReactorResourceFactory();
    }
  }
}
