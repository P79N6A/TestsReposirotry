/** 
 * Tests for  {@link DiskSpaceHealthIndicator}.
 * @author Mattias Severson
 * @author Stephane Nicoll
 */
public class DiskSpaceHealthIndicatorTests {
  private static final DataSize THRESHOLD=DataSize.ofKilobytes(1);
  private static final DataSize TOTAL_SPACE=DataSize.ofKilobytes(10);
  @Mock private File fileMock;
  private HealthIndicator healthIndicator;
  @Before public void setUp(){
    MockitoAnnotations.initMocks(this);
    given(this.fileMock.exists()).willReturn(true);
    given(this.fileMock.canRead()).willReturn(true);
    this.healthIndicator=new DiskSpaceHealthIndicator(this.fileMock,THRESHOLD);
  }
  @Test public void diskSpaceIsUp(){
    long freeSpace=THRESHOLD.toBytes() + 10;
    given(this.fileMock.getUsableSpace()).willReturn(freeSpace);
    given(this.fileMock.getTotalSpace()).willReturn(TOTAL_SPACE.toBytes());
    Health health=this.healthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails().get("threshold")).isEqualTo(THRESHOLD.toBytes());
    assertThat(health.getDetails().get("free")).isEqualTo(freeSpace);
    assertThat(health.getDetails().get("total")).isEqualTo(TOTAL_SPACE.toBytes());
  }
  @Test public void diskSpaceIsDown(){
    long freeSpace=THRESHOLD.toBytes() - 10;
    given(this.fileMock.getUsableSpace()).willReturn(freeSpace);
    given(this.fileMock.getTotalSpace()).willReturn(TOTAL_SPACE.toBytes());
    Health health=this.healthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
    assertThat(health.getDetails().get("threshold")).isEqualTo(THRESHOLD.toBytes());
    assertThat(health.getDetails().get("free")).isEqualTo(freeSpace);
    assertThat(health.getDetails().get("total")).isEqualTo(TOTAL_SPACE.toBytes());
  }
}
