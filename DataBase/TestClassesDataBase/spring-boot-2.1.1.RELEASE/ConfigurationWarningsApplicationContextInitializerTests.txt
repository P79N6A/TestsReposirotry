/** 
 * Tests for  {@link ConfigurationWarningsApplicationContextInitializer}.
 * @author Phillip Webb
 */
public class ConfigurationWarningsApplicationContextInitializerTests {
  private static final String DEFAULT_SCAN_WARNING="Your ApplicationContext is unlikely to " + "start due to a @ComponentScan of the default package.";
  private static final String ORGSPRING_SCAN_WARNING="Your ApplicationContext is unlikely to " + "start due to a @ComponentScan of 'org.springframework'.";
  @Rule public OutputCapture output=new OutputCapture();
  @Test public void logWarningInDefaultPackage(){
    load(InDefaultPackageConfiguration.class);
    assertThat(this.output.toString()).contains(DEFAULT_SCAN_WARNING);
  }
  @Test public void logWarningInDefaultPackageAndMetaAnnotation(){
    load(InDefaultPackageWithMetaAnnotationConfiguration.class);
    assertThat(this.output.toString()).contains(DEFAULT_SCAN_WARNING);
  }
  @Test public void noLogIfInRealPackage(){
    load(InRealPackageConfiguration.class);
    assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING);
  }
  @Test public void noLogWithoutComponentScanAnnotation(){
    load(InDefaultPackageWithoutScanConfiguration.class);
    assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING);
  }
  @Test public void noLogIfHasValue(){
    load(InDefaultPackageWithValueConfiguration.class);
    assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING);
  }
  @Test public void noLogIfHasBasePackages(){
    load(InDefaultPackageWithBasePackagesConfiguration.class);
    assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING);
  }
  @Test public void noLogIfHasBasePackageClasses(){
    load(InDefaultPackageWithBasePackageClassesConfiguration.class);
    assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING);
  }
  @Test public void logWarningInOrgSpringPackage(){
    load(InOrgSpringPackageConfiguration.class);
    assertThat(this.output.toString()).contains(ORGSPRING_SCAN_WARNING);
  }
  @Test public void logWarningIfScanningProblemPackages(){
    load(InRealButScanningProblemPackages.class);
    assertThat(this.output.toString()).contains("Your ApplicationContext is unlikely to start due to a " + "@ComponentScan of the default package, 'org.springframework'.");
  }
  private void load(  Class<?> configClass){
    try (AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext()){
      new TestConfigurationWarningsApplicationContextInitializer().initialize(context);
      context.register(configClass);
      context.refresh();
    }
   }
  /** 
 * Testable version of  {@link ConfigurationWarningsApplicationContextInitializer}.
 */
public static class TestConfigurationWarningsApplicationContextInitializer extends ConfigurationWarningsApplicationContextInitializer {
    @Override protected Check[] getChecks(){
      return new Check[]{new TestComponentScanPackageCheck()};
    }
  }
  /** 
 * Testable ComponentScanPackageCheck that doesn't need to use the default or {@code org.springframework} package.
 */
static class TestComponentScanPackageCheck extends ComponentScanPackageCheck {
    @Override protected Set<String> getComponentScanningPackages(    BeanDefinitionRegistry registry){
      Set<String> scannedPackages=super.getComponentScanningPackages(registry);
      Set<String> result=new LinkedHashSet<>();
      for (      String scannedPackage : scannedPackages) {
        if (scannedPackage.endsWith("dflt")) {
          result.add("");
        }
 else         if (scannedPackage.endsWith("orgspring")) {
          result.add("org.springframework");
        }
 else {
          result.add(scannedPackage);
        }
      }
      return result;
    }
  }
}
