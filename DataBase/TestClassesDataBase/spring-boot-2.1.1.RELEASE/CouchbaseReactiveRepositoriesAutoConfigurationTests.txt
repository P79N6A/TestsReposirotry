/** 
 * Tests for  {@link CouchbaseReactiveRepositoriesAutoConfiguration}.
 * @author Alex Derkach
 */
public class CouchbaseReactiveRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void couchbaseNotAvailable(){
    load(null);
    assertThat(this.context.getBeansOfType(ReactiveCityRepository.class)).hasSize(0);
  }
  @Test public void defaultRepository(){
    load(DefaultConfiguration.class);
    assertThat(this.context.getBeansOfType(ReactiveCityRepository.class)).hasSize(1);
  }
  @Test public void imperativeRepositories(){
    load(DefaultConfiguration.class,"spring.data.couchbase.repositories.type=imperative");
    assertThat(this.context.getBeansOfType(ReactiveCityRepository.class)).hasSize(0);
  }
  @Test public void disabledRepositories(){
    load(DefaultConfiguration.class,"spring.data.couchbase.repositories.type=none");
    assertThat(this.context.getBeansOfType(ReactiveCityRepository.class)).hasSize(0);
  }
  @Test public void noRepositoryAvailable(){
    load(NoRepositoryConfiguration.class);
    assertThat(this.context.getBeansOfType(ReactiveCityRepository.class)).hasSize(0);
  }
  @Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized(){
    load(CustomizedConfiguration.class);
    assertThat(this.context.getBeansOfType(ReactiveCityCouchbaseRepository.class)).isEmpty();
  }
  private void load(  Class<?> config,  String... environment){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of(environment).applyTo(context);
    if (config != null) {
      context.register(config);
    }
    context.register(PropertyPlaceholderAutoConfiguration.class,CouchbaseAutoConfiguration.class,CouchbaseDataAutoConfiguration.class,CouchbaseRepositoriesAutoConfiguration.class,CouchbaseReactiveDataAutoConfiguration.class,CouchbaseReactiveRepositoriesAutoConfiguration.class);
    context.refresh();
    this.context=context;
  }
@Configuration @TestAutoConfigurationPackage(City.class) @Import(CouchbaseTestConfigurer.class) static class DefaultConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) @Import(CouchbaseTestConfigurer.class) protected static class NoRepositoryConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(CouchbaseReactiveRepositoriesAutoConfigurationTests.class) @EnableCouchbaseRepositories(basePackageClasses=CityCouchbaseRepository.class) @Import(CouchbaseDataAutoConfigurationTests.CustomCouchbaseConfiguration.class) protected static class CustomizedConfiguration {
  }
}
