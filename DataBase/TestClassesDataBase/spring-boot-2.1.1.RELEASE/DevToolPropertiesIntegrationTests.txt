/** 
 * Integration tests for the configuration of development-time properties
 * @author Andy Wilkinson
 */
public class DevToolPropertiesIntegrationTests {
  private ConfigurableApplicationContext context;
  @Before public void setup(){
    Restarter.initialize(new String[]{},false,new MockInitializer(),false);
  }
  @After public void cleanup(){
    if (this.context != null) {
      this.context.close();
    }
    Restarter.clearInstance();
  }
  @Test public void classPropertyConditionIsAffectedByDevToolProperties(){
    SpringApplication application=new SpringApplication(ClassConditionConfiguration.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run();
    this.context.getBean(ClassConditionConfiguration.class);
  }
  @Test public void beanMethodPropertyConditionIsAffectedByDevToolProperties(){
    SpringApplication application=new SpringApplication(BeanConditionConfiguration.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run();
    this.context.getBean(MyBean.class);
  }
  @Test public void postProcessWhenRestarterDisabledAndRemoteSecretNotSetShouldNotAddPropertySource(){
    Restarter.clearInstance();
    Restarter.disable();
    SpringApplication application=new SpringApplication(BeanConditionConfiguration.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run();
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(MyBean.class));
  }
  @Test public void postProcessWhenRestarterDisabledAndRemoteSecretSetShouldAddPropertySource(){
    Restarter.clearInstance();
    Restarter.disable();
    SpringApplication application=new SpringApplication(BeanConditionConfiguration.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    application.setDefaultProperties(Collections.singletonMap("spring.devtools.remote.secret","donttell"));
    this.context=application.run();
    this.context.getBean(MyBean.class);
  }
  @Test public void postProcessEnablesIncludeStackTraceProperty(){
    SpringApplication application=new SpringApplication(TestConfiguration.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run();
    ConfigurableEnvironment environment=this.context.getEnvironment();
    String property=environment.getProperty("server.error.include-stacktrace");
    assertThat(property).isEqualTo(ErrorProperties.IncludeStacktrace.ALWAYS.toString());
  }
@Configuration static class TestConfiguration {
  }
@Configuration @ConditionalOnProperty("spring.h2.console.enabled") static class ClassConditionConfiguration {
  }
@Configuration static class BeanConditionConfiguration {
    @Bean @ConditionalOnProperty("spring.h2.console.enabled") public MyBean myBean(){
      return new MyBean();
    }
  }
static class MyBean {
  }
static class MockInitializer implements RestartInitializer {
    @Override public URL[] getInitialUrls(    Thread thread){
      return new URL[]{};
    }
  }
}
