/** 
 * Tests for generating documentation describing the  {@link HealthEndpoint}.
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class HealthEndpointDocumentationTests extends MockMvcEndpointDocumentationTests {
  private static final List<FieldDescriptor> componentFields=Arrays.asList(fieldWithPath("status").description("Status of a specific part of the application"),subsectionWithPath("details").description("Details of the health of a specific part of the" + " application."));
  @Test public void health() throws Exception {
    this.mockMvc.perform(get("/actuator/health")).andExpect(status().isOk()).andDo(document("health",responseFields(fieldWithPath("status").description("Overall status of the application."),fieldWithPath("details").description("Details of the health of the application. Presence is controlled by " + "`management.endpoint.health.show-details`)."),fieldWithPath("details.*.status").description("Status of a specific part of the application."),subsectionWithPath("details.*.details").description("Details of the health of a specific part of the" + " application."))));
  }
  @Test public void healthComponent() throws Exception {
    this.mockMvc.perform(get("/actuator/health/db")).andExpect(status().isOk()).andDo(document("health/component",responseFields(componentFields)));
  }
  @Test public void healthComponentInstance() throws Exception {
    this.mockMvc.perform(get("/actuator/health/broker/us1")).andExpect(status().isOk()).andDo(document("health/instance",responseFields(componentFields)));
  }
@Configuration @Import(BaseDocumentationConfiguration.class) @ImportAutoConfiguration(DataSourceAutoConfiguration.class) static class TestConfiguration {
    @Bean public HealthEndpoint endpoint(    Map<String,HealthIndicator> healthIndicators){
      return new HealthEndpoint(new CompositeHealthIndicator(new OrderedHealthAggregator(),new HealthIndicatorRegistryFactory().createHealthIndicatorRegistry(healthIndicators)));
    }
    @Bean public DiskSpaceHealthIndicator diskSpaceHealthIndicator(){
      return new DiskSpaceHealthIndicator(new File("."),DataSize.ofMegabytes(10));
    }
    @Bean public DataSourceHealthIndicator dbHealthIndicator(    DataSource dataSource){
      return new DataSourceHealthIndicator(dataSource);
    }
    @Bean public CompositeHealthIndicator brokerHealthIndicator(){
      Map<String,HealthIndicator> indicators=new LinkedHashMap<>();
      indicators.put("us1",() -> Health.up().withDetail("version","1.0.2").build());
      indicators.put("us2",() -> Health.up().withDetail("version","1.0.4").build());
      return new CompositeHealthIndicator(new OrderedHealthAggregator(),indicators);
    }
  }
}
