/** 
 * Tests for  {@link UrlHandlerMapper}.
 * @author Rob Winch
 * @author Phillip Webb
 */
public class UrlHandlerMapperTests {
  private Handler handler=mock(Handler.class);
  @Test public void requestUriMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper(null,this.handler)).withMessageContaining("URL must not be empty");
  }
  @Test public void requestUriMustNotBeEmpty(){
    assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper("",this.handler)).withMessageContaining("URL must not be empty");
  }
  @Test public void requestUrlMustStartWithSlash(){
    assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper("tunnel",this.handler)).withMessageContaining("URL must start with '/'");
  }
  @Test public void handlesMatchedUrl(){
    UrlHandlerMapper mapper=new UrlHandlerMapper("/tunnel",this.handler);
    HttpServletRequest servletRequest=new MockHttpServletRequest("GET","/tunnel");
    ServerHttpRequest request=new ServletServerHttpRequest(servletRequest);
    assertThat(mapper.getHandler(request)).isEqualTo(this.handler);
  }
  @Test public void ignoresDifferentUrl(){
    UrlHandlerMapper mapper=new UrlHandlerMapper("/tunnel",this.handler);
    HttpServletRequest servletRequest=new MockHttpServletRequest("GET","/tunnel/other");
    ServerHttpRequest request=new ServletServerHttpRequest(servletRequest);
    assertThat(mapper.getHandler(request)).isNull();
  }
}
