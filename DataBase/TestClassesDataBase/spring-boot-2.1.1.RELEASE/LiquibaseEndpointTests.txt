/** 
 * Tests for  {@link LiquibaseEndpoint}.
 * @author Eddú Meléndez
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class LiquibaseEndpointTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,LiquibaseAutoConfiguration.class)).withPropertyValues("spring.datasource.generate-unique-name=true");
  @Test public void liquibaseReportIsReturned(){
    this.contextRunner.withUserConfiguration(Config.class).run((context) -> assertThat(context.getBean(LiquibaseEndpoint.class).liquibaseBeans().getContexts().get(context.getId()).getLiquibaseBeans()).hasSize(1));
  }
  @Test public void invokeWithCustomSchema(){
    this.contextRunner.withUserConfiguration(Config.class).withPropertyValues("spring.liquibase.default-schema=CUSTOMSCHEMA","spring.datasource.schema=classpath:/db/create-custom-schema.sql").run((context) -> assertThat(context.getBean(LiquibaseEndpoint.class).liquibaseBeans().getContexts().get(context.getId()).getLiquibaseBeans()).hasSize(1));
  }
  @Test public void connectionAutoCommitPropertyIsReset(){
    this.contextRunner.withUserConfiguration(Config.class).run((context) -> {
      DataSource dataSource=context.getBean(DataSource.class);
      assertThat(getAutoCommit(dataSource)).isTrue();
      context.getBean(LiquibaseEndpoint.class).liquibaseBeans();
      assertThat(getAutoCommit(dataSource)).isTrue();
    }
);
  }
  private boolean getAutoCommit(  DataSource dataSource) throws SQLException {
    try (Connection connection=dataSource.getConnection()){
      return connection.getAutoCommit();
    }
   }
@Configuration public static class Config {
    @Bean public LiquibaseEndpoint endpoint(    ApplicationContext context){
      return new LiquibaseEndpoint(context);
    }
  }
}
