/** 
 * Tests for  {@link RemoteUrlPropertyExtractor}.
 * @author Phillip Webb
 */
public class RemoteUrlPropertyExtractorTests {
  @After public void preventRunFailuresFromPollutingLoggerContext(){
    ((Logger)LoggerFactory.getLogger(RemoteUrlPropertyExtractorTests.class)).getLoggerContext().getTurboFilterList().clear();
  }
  @Test public void missingUrl(){
    assertThatIllegalStateException().isThrownBy(() -> doTest()).withMessageContaining("No remote URL specified");
  }
  @Test public void malformedUrl(){
    assertThatIllegalStateException().isThrownBy(() -> doTest("::://wibble")).withMessageContaining("Malformed URL '::://wibble'");
  }
  @Test public void multipleUrls(){
    assertThatIllegalStateException().isThrownBy(() -> doTest("http://localhost:8080","http://localhost:9090")).withMessageContaining("Multiple URLs specified");
  }
  @Test public void validUrl(){
    ApplicationContext context=doTest("http://localhost:8080");
    assertThat(context.getEnvironment().getProperty("remoteUrl")).isEqualTo("http://localhost:8080");
    assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")).isNull();
  }
  @Test public void cleanValidUrl(){
    ApplicationContext context=doTest("http://localhost:8080/");
    assertThat(context.getEnvironment().getProperty("remoteUrl")).isEqualTo("http://localhost:8080");
  }
  private ApplicationContext doTest(  String... args){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    application.addListeners(new RemoteUrlPropertyExtractor());
    return application.run(args);
  }
@Configuration static class Config {
  }
}
