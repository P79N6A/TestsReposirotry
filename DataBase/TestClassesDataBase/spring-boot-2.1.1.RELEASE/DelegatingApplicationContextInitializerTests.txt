/** 
 * Tests for  {@link DelegatingApplicationContextInitializer}.
 * @author Phillip Webb
 */
public class DelegatingApplicationContextInitializerTests {
  private final DelegatingApplicationContextInitializer initializer=new DelegatingApplicationContextInitializer();
  @Test public void orderedInitialize(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,"context.initializer.classes=" + MockInitB.class.getName() + ","+ MockInitA.class.getName());
    this.initializer.initialize(context);
    assertThat(context.getBeanFactory().getSingleton("a")).isEqualTo("a");
    assertThat(context.getBeanFactory().getSingleton("b")).isEqualTo("b");
  }
  @Test public void noInitializers(){
    StaticApplicationContext context=new StaticApplicationContext();
    this.initializer.initialize(context);
  }
  @Test public void emptyInitializers(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,"context.initializer.classes:");
    this.initializer.initialize(context);
  }
  @Test public void noSuchInitializerClass(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,"context.initializer.classes=missing.madeup.class");
    assertThatExceptionOfType(ApplicationContextException.class).isThrownBy(() -> this.initializer.initialize(context));
  }
  @Test public void notAnInitializerClass(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,"context.initializer.classes=" + Object.class.getName());
    assertThatIllegalArgumentException().isThrownBy(() -> this.initializer.initialize(context));
  }
  @Test public void genericNotSuitable(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context,"context.initializer.classes=" + NotSuitableInit.class.getName());
    assertThatIllegalArgumentException().isThrownBy(() -> this.initializer.initialize(context)).withMessageContaining("generic parameter");
  }
@Order(Ordered.HIGHEST_PRECEDENCE) private static class MockInitA implements ApplicationContextInitializer<ConfigurableApplicationContext> {
    @Override public void initialize(    ConfigurableApplicationContext applicationContext){
      applicationContext.getBeanFactory().registerSingleton("a","a");
    }
  }
@Order(Ordered.LOWEST_PRECEDENCE) private static class MockInitB implements ApplicationContextInitializer<ConfigurableApplicationContext> {
    @Override public void initialize(    ConfigurableApplicationContext applicationContext){
      assertThat(applicationContext.getBeanFactory().getSingleton("a")).isEqualTo("a");
      applicationContext.getBeanFactory().registerSingleton("b","b");
    }
  }
private static class NotSuitableInit implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {
    @Override public void initialize(    ConfigurableWebApplicationContext applicationContext){
    }
  }
}
