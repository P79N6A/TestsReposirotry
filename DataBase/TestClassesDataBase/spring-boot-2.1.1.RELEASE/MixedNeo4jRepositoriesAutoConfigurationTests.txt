/** 
 * Tests for  {@link Neo4jRepositoriesAutoConfiguration}.
 * @author Dave Syer
 * @author Oliver Gierke
 * @author Michael Hunger
 * @author Vince Bickers
 * @author Stephane Nicoll
 */
public class MixedNeo4jRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void testDefaultRepositoryConfiguration(){
    load(TestConfiguration.class);
    assertThat(this.context.getBean(CountryRepository.class)).isNotNull();
  }
  @Test public void testMixedRepositoryConfiguration(){
    load(MixedConfiguration.class);
    assertThat(this.context.getBean(CountryRepository.class)).isNotNull();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test public void testJpaRepositoryConfigurationWithNeo4jTemplate(){
    load(JpaConfiguration.class);
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test @Ignore public void testJpaRepositoryConfigurationWithNeo4jOverlap(){
    load(OverlapConfiguration.class);
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test public void testJpaRepositoryConfigurationWithNeo4jOverlapDisabled(){
    load(OverlapConfiguration.class,"spring.data.neo4j.repositories.enabled:false");
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  private void load(  Class<?> config,  String... environment){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    context.setClassLoader(new FilteredClassLoader(EmbeddedDriver.class));
    TestPropertyValues.of(environment).and("spring.datasource.initialization-mode=never").applyTo(context);
    context.register(config);
    context.register(DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class,JpaRepositoriesAutoConfiguration.class,Neo4jDataAutoConfiguration.class,Neo4jRepositoriesAutoConfiguration.class);
    context.refresh();
    this.context=context;
  }
@Configuration @TestAutoConfigurationPackage(EmptyMarker.class) @EnableNeo4jRepositories(basePackageClasses=Country.class) protected static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyMarker.class) @EnableNeo4jRepositories(basePackageClasses=Country.class) @EntityScan(basePackageClasses=City.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class MixedConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyMarker.class) @EntityScan(basePackageClasses=City.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class JpaConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(CityRepository.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class OverlapConfiguration {
  }
}
