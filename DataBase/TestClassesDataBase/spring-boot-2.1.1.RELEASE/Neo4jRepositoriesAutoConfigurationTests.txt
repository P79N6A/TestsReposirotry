/** 
 * Tests for  {@link Neo4jRepositoriesAutoConfiguration}.
 * @author Dave Syer
 * @author Oliver Gierke
 * @author Michael Hunger
 * @author Vince Bickers
 * @author Stephane Nicoll
 */
public class Neo4jRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    this.context.close();
  }
  @Test public void testDefaultRepositoryConfiguration(){
    prepareApplicationContext(TestConfiguration.class);
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
    Neo4jMappingContext mappingContext=this.context.getBean(Neo4jMappingContext.class);
    assertThat(mappingContext.getPersistentEntity(City.class)).isNotNull();
  }
  @Test public void testNoRepositoryConfiguration(){
    prepareApplicationContext(EmptyConfiguration.class);
    assertThat(this.context.getBean(SessionFactory.class)).isNotNull();
  }
  @Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized(){
    prepareApplicationContext(CustomizedConfiguration.class);
    assertThat(this.context.getBean(CityNeo4jRepository.class)).isNotNull();
  }
  @Test(expected=NoSuchBeanDefinitionException.class) public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories(){
    prepareApplicationContext(SortOfInvalidCustomConfiguration.class);
    this.context.getBean(CityRepository.class);
  }
  private void prepareApplicationContext(  Class<?>... configurationClasses){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.data.neo4j.uri=http://localhost:9797").applyTo(this.context);
    this.context.register(configurationClasses);
    this.context.register(Neo4jDataAutoConfiguration.class,Neo4jRepositoriesAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class);
    this.context.refresh();
  }
@Configuration @TestAutoConfigurationPackage(City.class) protected static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) protected static class EmptyConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(Neo4jRepositoriesAutoConfigurationTests.class) @EnableNeo4jRepositories(basePackageClasses=CityNeo4jRepository.class) protected static class CustomizedConfiguration {
  }
@Configuration @EnableNeo4jRepositories("foo.bar") @TestAutoConfigurationPackage(Neo4jRepositoriesAutoConfigurationTests.class) protected static class SortOfInvalidCustomConfiguration {
  }
}
