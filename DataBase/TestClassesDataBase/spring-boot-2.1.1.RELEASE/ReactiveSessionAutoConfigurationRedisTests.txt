/** 
 * Reactive Redis-specific tests for  {@link SessionAutoConfiguration}.
 * @author Stephane Nicoll
 * @author Andy Wilkinson
 * @author Vedran Pavic
 */
public class ReactiveSessionAutoConfigurationRedisTests extends AbstractSessionAutoConfigurationTests {
  protected final ReactiveWebApplicationContextRunner contextRunner=new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SessionAutoConfiguration.class));
  @Test public void defaultConfig(){
    this.contextRunner.withPropertyValues("spring.session.store-type=redis").withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class)).run(validateSpringSessionUsesRedis("spring:session:",RedisFlushMode.ON_SAVE));
  }
  @Test public void defaultConfigWithUniqueStoreImplementation(){
    this.contextRunner.withClassLoader(new FilteredClassLoader(ReactiveMongoOperationsSessionRepository.class)).withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class)).run(validateSpringSessionUsesRedis("spring:session:",RedisFlushMode.ON_SAVE));
  }
  @Test public void redisSessionStoreWithCustomizations(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class)).withPropertyValues("spring.session.store-type=redis","spring.session.redis.namespace=foo","spring.session.redis.flush-mode=immediate").run(validateSpringSessionUsesRedis("foo:",RedisFlushMode.IMMEDIATE));
  }
  private ContextConsumer<AssertableReactiveWebApplicationContext> validateSpringSessionUsesRedis(  String namespace,  RedisFlushMode flushMode){
    return (context) -> {
      ReactiveRedisOperationsSessionRepository repository=validateSessionRepository(context,ReactiveRedisOperationsSessionRepository.class);
      assertThat(repository).hasFieldOrPropertyWithValue("namespace",namespace);
      assertThat(repository).hasFieldOrPropertyWithValue("redisFlushMode",flushMode);
    }
;
  }
}
