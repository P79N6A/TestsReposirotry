/** 
 * Tests for  {@link CloudFoundryWebEndpointDiscoverer}.
 * @author Madhura Bhave
 */
public class CloudFoundryWebEndpointDiscovererTests {
  @Test public void getEndpointsShouldAddCloudFoundryHealthExtension(){
    load(TestConfiguration.class,(discoverer) -> {
      Collection<ExposableWebEndpoint> endpoints=discoverer.getEndpoints();
      assertThat(endpoints.size()).isEqualTo(2);
      for (      ExposableWebEndpoint endpoint : endpoints) {
        if (endpoint.getEndpointId().equals(EndpointId.of("health"))) {
          WebOperation operation=findMainReadOperation(endpoint);
          assertThat(operation.invoke(new InvocationContext(mock(SecurityContext.class),Collections.emptyMap()))).isEqualTo("cf");
        }
      }
    }
);
  }
  private WebOperation findMainReadOperation(  ExposableWebEndpoint endpoint){
    for (    WebOperation operation : endpoint.getOperations()) {
      if (operation.getRequestPredicate().getPath().equals("health")) {
        return operation;
      }
    }
    throw new IllegalStateException("No main read operation found from " + endpoint.getOperations());
  }
  private void load(  Class<?> configuration,  Consumer<CloudFoundryWebEndpointDiscoverer> consumer){
    this.load((id) -> null,(id) -> id.toString(),configuration,consumer);
  }
  private void load(  Function<EndpointId,Long> timeToLive,  PathMapper endpointPathMapper,  Class<?> configuration,  Consumer<CloudFoundryWebEndpointDiscoverer> consumer){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(configuration);
    try {
      ConversionServiceParameterValueMapper parameterMapper=new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance());
      EndpointMediaTypes mediaTypes=new EndpointMediaTypes(Collections.singletonList("application/json"),Collections.singletonList("application/json"));
      CloudFoundryWebEndpointDiscoverer discoverer=new CloudFoundryWebEndpointDiscoverer(context,parameterMapper,mediaTypes,Collections.singletonList(endpointPathMapper),Collections.singleton(new CachingOperationInvokerAdvisor(timeToLive)),Collections.emptyList());
      consumer.accept(discoverer);
    }
  finally {
      context.close();
    }
  }
@Configuration static class TestConfiguration {
    @Bean public TestEndpoint testEndpoint(){
      return new TestEndpoint();
    }
    @Bean public TestEndpointWebExtension testEndpointWebExtension(){
      return new TestEndpointWebExtension();
    }
    @Bean public HealthEndpoint healthEndpoint(){
      return new HealthEndpoint(mock(HealthIndicator.class));
    }
    @Bean public HealthEndpointWebExtension healthEndpointWebExtension(){
      return new HealthEndpointWebExtension();
    }
    @Bean public TestHealthEndpointCloudFoundryExtension testHealthEndpointCloudFoundryExtension(){
      return new TestHealthEndpointCloudFoundryExtension();
    }
  }
@Endpoint(id="test") static class TestEndpoint {
    @ReadOperation public Object getAll(){
      return null;
    }
  }
@EndpointWebExtension(endpoint=TestEndpoint.class) static class TestEndpointWebExtension {
    @ReadOperation public Object getAll(){
      return null;
    }
  }
@EndpointWebExtension(endpoint=HealthEndpoint.class) static class HealthEndpointWebExtension {
    @ReadOperation public Object getAll(){
      return null;
    }
  }
@HealthEndpointCloudFoundryExtension static class TestHealthEndpointCloudFoundryExtension {
    @ReadOperation public Object getAll(){
      return "cf";
    }
  }
}
