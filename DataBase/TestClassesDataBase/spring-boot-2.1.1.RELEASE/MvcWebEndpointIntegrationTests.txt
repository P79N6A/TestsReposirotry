/** 
 * Integration tests for web endpoints exposed using Spring MVC.
 * @author Andy Wilkinson
 * @see WebMvcEndpointHandlerMapping
 */
public class MvcWebEndpointIntegrationTests extends AbstractWebEndpointIntegrationTests<AnnotationConfigServletWebServerApplicationContext> {
  public MvcWebEndpointIntegrationTests(){
    super(MvcWebEndpointIntegrationTests::createApplicationContext,MvcWebEndpointIntegrationTests::applyAuthenticatedConfiguration);
  }
  private static AnnotationConfigServletWebServerApplicationContext createApplicationContext(){
    AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext();
    context.register(WebMvcConfiguration.class);
    return context;
  }
  private static void applyAuthenticatedConfiguration(  AnnotationConfigServletWebServerApplicationContext context){
    context.register(AuthenticatedConfiguration.class);
  }
  @Test public void responseToOptionsRequestIncludesCorsHeaders(){
    load(TestEndpointConfiguration.class,(client) -> client.options().uri("/test").accept(MediaType.APPLICATION_JSON).header("Access-Control-Request-Method","POST").header("Origin","http://example.com").exchange().expectStatus().isOk().expectHeader().valueEquals("Access-Control-Allow-Origin","http://example.com").expectHeader().valueEquals("Access-Control-Allow-Methods","GET,POST"));
  }
  @Test public void readOperationsThatReturnAResourceSupportRangeRequests(){
    load(ResourceEndpointConfiguration.class,(client) -> {
      byte[] responseBody=client.get().uri("/resource").header("Range","bytes=0-3").exchange().expectStatus().isEqualTo(HttpStatus.PARTIAL_CONTENT).expectHeader().contentType(MediaType.APPLICATION_OCTET_STREAM).returnResult(byte[].class).getResponseBodyContent();
      assertThat(responseBody).containsExactly(0,1,2,3);
    }
);
  }
  @Test public void matchWhenRequestHasTrailingSlashShouldNotBeNull(){
    assertThat(getMatchResult("/spring/")).isNotNull();
  }
  @Test public void matchWhenRequestHasSuffixShouldBeNull(){
    assertThat(getMatchResult("/spring.do")).isNull();
  }
  private RequestMatchResult getMatchResult(  String servletPath){
    MockHttpServletRequest request=new MockHttpServletRequest();
    request.setServletPath(servletPath);
    AnnotationConfigServletWebServerApplicationContext context=createApplicationContext();
    context.register(TestEndpointConfiguration.class);
    context.refresh();
    WebMvcEndpointHandlerMapping bean=context.getBean(WebMvcEndpointHandlerMapping.class);
    return bean.match(request,"/spring");
  }
  @Override protected int getPort(  AnnotationConfigServletWebServerApplicationContext context){
    return context.getWebServer().getPort();
  }
@Configuration @ImportAutoConfiguration({JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,ServletWebServerFactoryAutoConfiguration.class,WebMvcAutoConfiguration.class,DispatcherServletAutoConfiguration.class,ErrorMvcAutoConfiguration.class}) static class WebMvcConfiguration {
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public WebMvcEndpointHandlerMapping webEndpointHandlerMapping(    Environment environment,    WebEndpointDiscoverer endpointDiscoverer,    EndpointMediaTypes endpointMediaTypes){
      CorsConfiguration corsConfiguration=new CorsConfiguration();
      corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com"));
      corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST"));
      return new WebMvcEndpointHandlerMapping(new EndpointMapping(environment.getProperty("endpointPath")),endpointDiscoverer.getEndpoints(),endpointMediaTypes,corsConfiguration,new EndpointLinksResolver(endpointDiscoverer.getEndpoints()));
    }
  }
@Configuration static class AuthenticatedConfiguration {
    @Bean public Filter securityFilter(){
      return new OncePerRequestFilter(){
        @Override protected void doFilterInternal(        HttpServletRequest request,        HttpServletResponse response,        FilterChain filterChain) throws ServletException, IOException {
          SecurityContext context=SecurityContextHolder.createEmptyContext();
          context.setAuthentication(new UsernamePasswordAuthenticationToken("Alice","secret",Arrays.asList(new SimpleGrantedAuthority("ROLE_ACTUATOR"))));
          SecurityContextHolder.setContext(context);
          try {
            filterChain.doFilter(new SecurityContextHolderAwareRequestWrapper(request,"ROLE_"),response);
          }
  finally {
            SecurityContextHolder.clearContext();
          }
        }
      }
;
    }
  }
}
