/** 
 * Tests for  {@link CassandraReactiveRepositoriesAutoConfiguration}.
 * @author Eddú Meléndez
 * @author Stephane Nicoll
 * @author Mark Paluch
 * @author Andy Wilkinson
 */
public class CassandraReactiveRepositoriesAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CassandraAutoConfiguration.class,CassandraRepositoriesAutoConfiguration.class,CassandraDataAutoConfiguration.class,CassandraReactiveDataAutoConfiguration.class,CassandraReactiveRepositoriesAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class));
  @Test public void testDefaultRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(ReactiveCityRepository.class);
      assertThat(context).hasSingleBean(Cluster.class);
      assertThat(getInitialEntitySet(context)).hasSize(1);
    }
);
  }
  @Test public void testNoRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(TestExcludeConfiguration.class,EmptyConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(Cluster.class);
      assertThat(getInitialEntitySet(context)).hasSize(1).containsOnly(City.class);
    }
);
  }
  @Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized(){
    this.contextRunner.withUserConfiguration(TestExcludeConfiguration.class,CustomizedConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(ReactiveCityCassandraRepository.class);
      assertThat(getInitialEntitySet(context)).hasSize(1).containsOnly(City.class);
    }
);
  }
  @Test public void enablingImperativeRepositoriesDisablesReactiveRepositories(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.cassandra.repositories.type=imperative").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class));
  }
  @Test public void enablingNoRepositoriesDisablesReactiveRepositories(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.cassandra.repositories.type=none").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class));
  }
  @SuppressWarnings("unchecked") private Set<Class<?>> getInitialEntitySet(  ApplicationContext context){
    CassandraMappingContext mappingContext=context.getBean(CassandraMappingContext.class);
    return (Set<Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
  }
@Configuration @TestAutoConfigurationPackage(City.class) static class TestConfiguration {
    @Bean public Session Session(){
      return mock(Session.class);
    }
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) static class EmptyConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(CassandraReactiveRepositoriesAutoConfigurationTests.class) @EnableReactiveCassandraRepositories(basePackageClasses=ReactiveCityCassandraRepository.class) static class CustomizedConfiguration {
  }
@Configuration @ComponentScan(excludeFilters=@Filter(classes={ReactiveSession.class},type=FilterType.ASSIGNABLE_TYPE)) static class TestExcludeConfiguration {
  }
}
