/** 
 * Tests for  {@link RootUriRequestExpectationManager}.
 * @author Phillip Webb
 */
public class RootUriRequestExpectationManagerTests {
  private String uri="http://example.com";
  @Mock private RequestExpectationManager delegate;
  private RootUriRequestExpectationManager manager;
  @Captor private ArgumentCaptor<ClientHttpRequest> requestCaptor;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.manager=new RootUriRequestExpectationManager(this.uri,this.delegate);
  }
  @Test public void createWhenRootUriIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new RootUriRequestExpectationManager(null,this.delegate)).withMessageContaining("RootUri must not be null");
  }
  @Test public void createWhenExpectationManagerIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new RootUriRequestExpectationManager(this.uri,null)).withMessageContaining("ExpectationManager must not be null");
  }
  @Test public void expectRequestShouldDelegateToExpectationManager(){
    ExpectedCount count=ExpectedCount.once();
    RequestMatcher requestMatcher=mock(RequestMatcher.class);
    this.manager.expectRequest(count,requestMatcher);
    verify(this.delegate).expectRequest(count,requestMatcher);
  }
  @Test public void validateRequestWhenUriDoesNotStartWithRootUriShouldDelegateToExpectationManager() throws Exception {
    ClientHttpRequest request=mock(ClientHttpRequest.class);
    given(request.getURI()).willReturn(new URI("http://spring.io/test"));
    this.manager.validateRequest(request);
    verify(this.delegate).validateRequest(request);
  }
  @Test public void validateRequestWhenUriStartsWithRootUriShouldReplaceUri() throws Exception {
    ClientHttpRequest request=mock(ClientHttpRequest.class);
    given(request.getURI()).willReturn(new URI(this.uri + "/hello"));
    this.manager.validateRequest(request);
    verify(this.delegate).validateRequest(this.requestCaptor.capture());
    HttpRequestWrapper actual=(HttpRequestWrapper)this.requestCaptor.getValue();
    assertThat(actual.getRequest()).isSameAs(request);
    assertThat(actual.getURI()).isEqualTo(new URI("/hello"));
  }
  @Test public void validateRequestWhenRequestUriAssertionIsThrownShouldReplaceUriInMessage() throws Exception {
    ClientHttpRequest request=mock(ClientHttpRequest.class);
    given(request.getURI()).willReturn(new URI(this.uri + "/hello"));
    given(this.delegate.validateRequest(any(ClientHttpRequest.class))).willThrow(new AssertionError("Request URI expected:</hello> was:<http://example.com/bad>"));
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> this.manager.validateRequest(request)).withMessageContaining("Request URI expected:<http://example.com/hello>");
  }
  @Test public void resetRequestShouldDelegateToExpectationManager(){
    this.manager.reset();
    verify(this.delegate).reset();
  }
  @Test public void bindToShouldReturnMockRestServiceServer(){
    RestTemplate restTemplate=new RestTemplateBuilder().build();
    MockRestServiceServer bound=RootUriRequestExpectationManager.bindTo(restTemplate);
    assertThat(bound).isNotNull();
  }
  @Test public void bindToWithExpectationManagerShouldReturnMockRestServiceServer(){
    RestTemplate restTemplate=new RestTemplateBuilder().build();
    MockRestServiceServer bound=RootUriRequestExpectationManager.bindTo(restTemplate,this.delegate);
    assertThat(bound).isNotNull();
  }
  @Test public void forRestTemplateWhenUsingRootUriTemplateHandlerShouldReturnRootUriRequestExpectationManager(){
    RestTemplate restTemplate=new RestTemplateBuilder().rootUri(this.uri).build();
    RequestExpectationManager actual=RootUriRequestExpectationManager.forRestTemplate(restTemplate,this.delegate);
    assertThat(actual).isInstanceOf(RootUriRequestExpectationManager.class);
    assertThat(actual).extracting("rootUri").containsExactly(this.uri);
  }
  @Test public void forRestTemplateWhenNotUsingRootUriTemplateHandlerShouldReturnOriginalRequestExpectationManager(){
    RestTemplate restTemplate=new RestTemplateBuilder().build();
    RequestExpectationManager actual=RootUriRequestExpectationManager.forRestTemplate(restTemplate,this.delegate);
    assertThat(actual).isSameAs(this.delegate);
  }
  @Test public void boundRestTemplateShouldPrefixRootUri(){
    RestTemplate restTemplate=new RestTemplateBuilder().rootUri("http://example.com").build();
    MockRestServiceServer server=RootUriRequestExpectationManager.bindTo(restTemplate);
    server.expect(requestTo("/hello")).andRespond(withSuccess());
    restTemplate.getForEntity("/hello",String.class);
  }
  @Test public void boundRestTemplateWhenUrlIncludesDomainShouldNotPrefixRootUri(){
    RestTemplate restTemplate=new RestTemplateBuilder().rootUri("http://example.com").build();
    MockRestServiceServer server=RootUriRequestExpectationManager.bindTo(restTemplate);
    server.expect(requestTo("/hello")).andRespond(withSuccess());
    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> restTemplate.getForEntity("http://spring.io/hello",String.class)).withMessageContaining("expected:<http://example.com/hello> but was:<http://spring.io/hello>");
  }
}
