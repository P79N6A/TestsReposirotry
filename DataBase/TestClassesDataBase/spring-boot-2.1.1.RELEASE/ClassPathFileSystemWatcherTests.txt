/** 
 * Tests for  {@link ClassPathFileSystemWatcher}.
 * @author Phillip Webb
 */
public class ClassPathFileSystemWatcherTests {
  @Rule public TemporaryFolder temp=new TemporaryFolder();
  @Test public void urlsMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathFileSystemWatcher(mock(FileSystemWatcherFactory.class),mock(ClassPathRestartStrategy.class),(URL[])null)).withMessageContaining("Urls must not be null");
  }
  @Test public void configuredWithRestartStrategy() throws Exception {
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    Map<String,Object> properties=new HashMap<>();
    File folder=this.temp.newFolder();
    List<URL> urls=new ArrayList<>();
    urls.add(new URL("https://spring.io"));
    urls.add(folder.toURI().toURL());
    properties.put("urls",urls);
    MapPropertySource propertySource=new MapPropertySource("test",properties);
    context.getEnvironment().getPropertySources().addLast(propertySource);
    context.register(Config.class);
    context.refresh();
    Thread.sleep(200);
    File classFile=new File(folder,"Example.class");
    FileCopyUtils.copy("file".getBytes(),classFile);
    Thread.sleep(1000);
    List<ClassPathChangedEvent> events=context.getBean(Listener.class).getEvents();
    for (int i=0; i < 20; i++) {
      if (!events.isEmpty()) {
        break;
      }
      Thread.sleep(500);
    }
    assertThat(events.size()).isEqualTo(1);
    assertThat(events.get(0).getChangeSet().iterator().next().getFiles().iterator().next().getFile()).isEqualTo(classFile);
    context.close();
  }
@Configuration public static class Config {
    public final Environment environment;
    public Config(    Environment environment){
      this.environment=environment;
    }
    @Bean public ClassPathFileSystemWatcher watcher(){
      FileSystemWatcher watcher=new FileSystemWatcher(false,Duration.ofMillis(100),Duration.ofMillis(10));
      URL[] urls=this.environment.getProperty("urls",URL[].class);
      return new ClassPathFileSystemWatcher(new MockFileSystemWatcherFactory(watcher),restartStrategy(),urls);
    }
    @Bean public ClassPathRestartStrategy restartStrategy(){
      return (file) -> false;
    }
    @Bean public Listener listener(){
      return new Listener();
    }
  }
public static class Listener implements ApplicationListener<ClassPathChangedEvent> {
    private List<ClassPathChangedEvent> events=new ArrayList<>();
    @Override public void onApplicationEvent(    ClassPathChangedEvent event){
      this.events.add(event);
    }
    public List<ClassPathChangedEvent> getEvents(){
      return this.events;
    }
  }
private static class MockFileSystemWatcherFactory implements FileSystemWatcherFactory {
    private final FileSystemWatcher watcher;
    MockFileSystemWatcherFactory(    FileSystemWatcher watcher){
      this.watcher=watcher;
    }
    @Override public FileSystemWatcher getFileSystemWatcher(){
      return this.watcher;
    }
  }
}
