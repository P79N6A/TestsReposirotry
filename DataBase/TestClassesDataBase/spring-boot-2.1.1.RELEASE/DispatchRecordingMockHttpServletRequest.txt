private static final class DispatchRecordingMockHttpServletRequest extends MockHttpServletRequest {
  private final Map<String,AttributeCapturingRequestDispatcher> dispatchers=new HashMap<>();
  private DispatchRecordingMockHttpServletRequest(){
    super("GET","/test/path");
  }
  @Override public RequestDispatcher getRequestDispatcher(  String path){
    AttributeCapturingRequestDispatcher dispatcher=new AttributeCapturingRequestDispatcher(path);
    this.dispatchers.put(path,dispatcher);
    return dispatcher;
  }
  private AttributeCapturingRequestDispatcher getDispatcher(  String path){
    return this.dispatchers.get(path);
  }
private static final class AttributeCapturingRequestDispatcher extends MockRequestDispatcher {
    private final Map<String,Object> requestAttributes=new HashMap<>();
    private AttributeCapturingRequestDispatcher(    String resource){
      super(resource);
    }
    @Override public void forward(    ServletRequest request,    ServletResponse response){
      captureAttributes(request);
      super.forward(request,response);
    }
    private void captureAttributes(    ServletRequest request){
      Enumeration<String> names=request.getAttributeNames();
      while (names.hasMoreElements()) {
        String name=names.nextElement();
        this.requestAttributes.put(name,request.getAttribute(name));
      }
    }
    private Map<String,Object> getRequestAttributes(){
      return this.requestAttributes;
    }
  }
}
