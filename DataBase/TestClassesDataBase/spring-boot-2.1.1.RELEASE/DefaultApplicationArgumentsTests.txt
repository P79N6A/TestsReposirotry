/** 
 * Tests for  {@link DefaultApplicationArguments}.
 * @author Phillip Webb
 */
public class DefaultApplicationArgumentsTests {
  private static final String[] ARGS=new String[]{"--foo=bar","--foo=baz","--debug","spring","boot"};
  @Test public void argumentsMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultApplicationArguments(null)).withMessageContaining("Args must not be null");
  }
  @Test public void getArgs(){
    ApplicationArguments arguments=new DefaultApplicationArguments(ARGS);
    assertThat(arguments.getSourceArgs()).isEqualTo(ARGS);
  }
  @Test public void optionNames(){
    ApplicationArguments arguments=new DefaultApplicationArguments(ARGS);
    Set<String> expected=new HashSet<>(Arrays.asList("foo","debug"));
    assertThat(arguments.getOptionNames()).isEqualTo(expected);
  }
  @Test public void containsOption(){
    ApplicationArguments arguments=new DefaultApplicationArguments(ARGS);
    assertThat(arguments.containsOption("foo")).isTrue();
    assertThat(arguments.containsOption("debug")).isTrue();
    assertThat(arguments.containsOption("spring")).isFalse();
  }
  @Test public void getOptionValues(){
    ApplicationArguments arguments=new DefaultApplicationArguments(ARGS);
    assertThat(arguments.getOptionValues("foo")).isEqualTo(Arrays.asList("bar","baz"));
    assertThat(arguments.getOptionValues("debug")).isEmpty();
    assertThat(arguments.getOptionValues("spring")).isNull();
  }
  @Test public void getNonOptionArgs(){
    ApplicationArguments arguments=new DefaultApplicationArguments(ARGS);
    assertThat(arguments.getNonOptionArgs()).containsExactly("spring","boot");
  }
  @Test public void getNoNonOptionArgs(){
    ApplicationArguments arguments=new DefaultApplicationArguments(new String[]{"--debug"});
    assertThat(arguments.getNonOptionArgs()).isEmpty();
  }
}
