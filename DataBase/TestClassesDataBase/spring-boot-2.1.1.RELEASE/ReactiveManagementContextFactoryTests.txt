/** 
 * Tests for  {@link ReactiveManagementContextFactory}.
 * @author Madhura Bhave
 */
public class ReactiveManagementContextFactoryTests {
  private ReactiveManagementContextFactory factory=new ReactiveManagementContextFactory();
  private AnnotationConfigReactiveWebServerApplicationContext parent=new AnnotationConfigReactiveWebServerApplicationContext();
  @Test public void createManagementContextShouldCreateChildContextWithConfigClasses(){
    this.parent.register(ParentConfiguration.class);
    this.parent.refresh();
    AnnotationConfigReactiveWebServerApplicationContext childContext=(AnnotationConfigReactiveWebServerApplicationContext)this.factory.createManagementContext(this.parent,TestConfiguration1.class,TestConfiguration2.class);
    childContext.refresh();
    assertThat(childContext.getBean(TestConfiguration1.class)).isNotNull();
    assertThat(childContext.getBean(TestConfiguration2.class)).isNotNull();
    assertThat(childContext.getBean(ReactiveWebServerFactoryAutoConfiguration.class)).isNotNull();
    childContext.close();
    this.parent.close();
  }
@Configuration static class ParentConfiguration {
    @Bean public ReactiveWebServerFactory reactiveWebServerFactory(){
      return mock(ReactiveWebServerFactory.class);
    }
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return mock(HttpHandler.class);
    }
  }
@Configuration static class TestConfiguration1 {
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return mock(HttpHandler.class);
    }
  }
@Configuration static class TestConfiguration2 {
  }
}
