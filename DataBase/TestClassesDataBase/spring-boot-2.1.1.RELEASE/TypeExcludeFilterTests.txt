/** 
 * Tests for  {@link TypeExcludeFilter}.
 * @author Phillip Webb
 */
public class TypeExcludeFilterTests {
  private AnnotationConfigApplicationContext context;
  @After public void cleanUp(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void loadsTypeExcludeFilters(){
    this.context=new AnnotationConfigApplicationContext();
    this.context.getBeanFactory().registerSingleton("filter1",new WithoutMatchOverrideFilter());
    this.context.getBeanFactory().registerSingleton("filter2",new SampleTypeExcludeFilter());
    this.context.register(Config.class);
    this.context.refresh();
    assertThat(this.context.getBean(ExampleComponent.class)).isNotNull();
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(ExampleFilteredComponent.class));
  }
@Configuration @ComponentScan(basePackageClasses=SampleTypeExcludeFilter.class,excludeFilters=@Filter(type=FilterType.CUSTOM,classes=SampleTypeExcludeFilter.class)) static class Config {
  }
static class WithoutMatchOverrideFilter extends TypeExcludeFilter {
  }
}
