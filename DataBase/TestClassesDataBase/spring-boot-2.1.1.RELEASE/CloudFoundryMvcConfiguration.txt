@Configuration @EnableWebMvc static class CloudFoundryMvcConfiguration {
  @Bean public CloudFoundrySecurityInterceptor interceptor(){
    return new CloudFoundrySecurityInterceptor(tokenValidator,securityService,"app-id");
  }
  @Bean public EndpointMediaTypes EndpointMediaTypes(){
    return new EndpointMediaTypes(Collections.singletonList("application/json"),Collections.singletonList("application/json"));
  }
  @Bean public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(  WebEndpointDiscoverer webEndpointDiscoverer,  EndpointMediaTypes endpointMediaTypes,  CloudFoundrySecurityInterceptor interceptor){
    CorsConfiguration corsConfiguration=new CorsConfiguration();
    corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com"));
    corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST"));
    return new CloudFoundryWebEndpointServletHandlerMapping(new EndpointMapping("/cfApplication"),webEndpointDiscoverer.getEndpoints(),endpointMediaTypes,corsConfiguration,interceptor,new EndpointLinksResolver(webEndpointDiscoverer.getEndpoints()));
  }
  @Bean public WebEndpointDiscoverer webEndpointDiscoverer(  ApplicationContext applicationContext,  EndpointMediaTypes endpointMediaTypes){
    ParameterValueMapper parameterMapper=new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance());
    return new WebEndpointDiscoverer(applicationContext,parameterMapper,endpointMediaTypes,null,Collections.emptyList(),Collections.emptyList());
  }
  @Bean public EndpointDelegate endpointDelegate(){
    return mock(EndpointDelegate.class);
  }
  @Bean public TomcatServletWebServerFactory tomcat(){
    return new TomcatServletWebServerFactory(0);
  }
  @Bean public DispatcherServlet dispatcherServlet(){
    return new DispatcherServlet();
  }
}
