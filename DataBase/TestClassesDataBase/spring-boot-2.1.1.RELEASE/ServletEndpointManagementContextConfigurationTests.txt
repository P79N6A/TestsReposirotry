/** 
 * Tests for  {@link ServletEndpointManagementContextConfiguration}.
 * @author Phillip Webb
 * @author Madhura Bhave
 */
public class ServletEndpointManagementContextConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withUserConfiguration(TestConfig.class);
  @Test public void contextShouldContainServletEndpointRegistrar(){
    FilteredClassLoader classLoader=new FilteredClassLoader(ResourceConfig.class);
    this.contextRunner.withClassLoader(classLoader).run((context) -> {
      assertThat(context).hasSingleBean(ServletEndpointRegistrar.class);
      ServletEndpointRegistrar bean=context.getBean(ServletEndpointRegistrar.class);
      assertThat(bean).hasFieldOrPropertyWithValue("basePath","/test/actuator");
    }
);
  }
  @Test public void contextWhenJerseyShouldContainServletEndpointRegistrar(){
    FilteredClassLoader classLoader=new FilteredClassLoader(DispatcherServlet.class);
    this.contextRunner.withClassLoader(classLoader).run((context) -> {
      assertThat(context).hasSingleBean(ServletEndpointRegistrar.class);
      ServletEndpointRegistrar bean=context.getBean(ServletEndpointRegistrar.class);
      assertThat(bean).hasFieldOrPropertyWithValue("basePath","/jersey/actuator");
    }
);
  }
  @Test public void contextWhenNoServletBasedShouldNotContainServletEndpointRegistrar(){
    new ApplicationContextRunner().withUserConfiguration(TestConfig.class).run((context) -> assertThat(context).doesNotHaveBean(ServletEndpointRegistrar.class));
  }
@Configuration @Import(ServletEndpointManagementContextConfiguration.class) @EnableConfigurationProperties(WebEndpointProperties.class) static class TestConfig {
    @Bean public ServletEndpointsSupplier servletEndpointsSupplier(){
      return () -> Collections.emptyList();
    }
    @Bean public DispatcherServletPath dispatcherServletPath(){
      return () -> "/test";
    }
    @Bean public JerseyApplicationPath jerseyApplicationPath(){
      return () -> "/jersey";
    }
  }
}
