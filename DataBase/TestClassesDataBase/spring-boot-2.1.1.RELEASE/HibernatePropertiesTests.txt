/** 
 * Tests for  {@link HibernateProperties}.
 * @author Stephane Nicoll
 */
public class HibernatePropertiesTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(TestConfiguration.class);
  @Mock private Supplier<String> ddlAutoSupplier;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
  }
  @Test public void noCustomNamingStrategy(){
    this.contextRunner.run(assertHibernateProperties((hibernateProperties) -> {
      assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy");
      assertThat(hibernateProperties).containsEntry(AvailableSettings.PHYSICAL_NAMING_STRATEGY,SpringPhysicalNamingStrategy.class.getName());
      assertThat(hibernateProperties).containsEntry(AvailableSettings.IMPLICIT_NAMING_STRATEGY,SpringImplicitNamingStrategy.class.getName());
    }
));
  }
  @Test public void hibernate5CustomNamingStrategies(){
    this.contextRunner.withPropertyValues("spring.jpa.hibernate.naming.implicit-strategy:com.example.Implicit","spring.jpa.hibernate.naming.physical-strategy:com.example.Physical").run(assertHibernateProperties((hibernateProperties) -> {
      assertThat(hibernateProperties).contains(entry(AvailableSettings.IMPLICIT_NAMING_STRATEGY,"com.example.Implicit"),entry(AvailableSettings.PHYSICAL_NAMING_STRATEGY,"com.example.Physical"));
      assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy");
    }
));
  }
  @Test public void hibernate5CustomNamingStrategiesViaJpaProperties(){
    this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.implicit_naming_strategy:com.example.Implicit","spring.jpa.properties.hibernate.physical_naming_strategy:com.example.Physical").run(assertHibernateProperties((hibernateProperties) -> {
      assertThat(hibernateProperties).contains(entry(AvailableSettings.IMPLICIT_NAMING_STRATEGY,"com.example.Implicit"),entry(AvailableSettings.PHYSICAL_NAMING_STRATEGY,"com.example.Physical"));
      assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy");
    }
));
  }
  @Test public void useNewIdGeneratorMappingsDefault(){
    this.contextRunner.run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS,"true")));
  }
  @Test public void useNewIdGeneratorMappingsFalse(){
    this.contextRunner.withPropertyValues("spring.jpa.hibernate.use-new-id-generator-mappings:false").run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS,"false")));
  }
  @Test public void defaultDdlAutoIsNotInvokedIfPropertyIsSet(){
    this.contextRunner.withPropertyValues("spring.jpa.hibernate.ddl-auto=validate").run(assertDefaultDdlAutoNotInvoked("validate"));
  }
  @Test public void defaultDdlAutoIsNotInvokedIfHibernateSpecificPropertyIsSet(){
    this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.hbm2ddl.auto=create").run(assertDefaultDdlAutoNotInvoked("create"));
  }
  private ContextConsumer<AssertableApplicationContext> assertDefaultDdlAutoNotInvoked(  String expectedDdlAuto){
    return assertHibernateProperties((hibernateProperties) -> {
      assertThat(hibernateProperties).containsEntry(AvailableSettings.HBM2DDL_AUTO,expectedDdlAuto);
      verify(this.ddlAutoSupplier,never()).get();
    }
);
  }
  private ContextConsumer<AssertableApplicationContext> assertHibernateProperties(  Consumer<Map<String,Object>> consumer){
    return (context) -> {
      assertThat(context).hasSingleBean(JpaProperties.class);
      assertThat(context).hasSingleBean(HibernateProperties.class);
      Map<String,Object> hibernateProperties=context.getBean(HibernateProperties.class).determineHibernateProperties(context.getBean(JpaProperties.class).getProperties(),new HibernateSettings().ddlAuto(this.ddlAutoSupplier));
      consumer.accept(hibernateProperties);
    }
;
  }
@Configuration @EnableConfigurationProperties({JpaProperties.class,HibernateProperties.class}) static class TestConfiguration {
  }
}
