/** 
 * Tests for  {@link ServletEndpointRegistrar}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class ServletEndpointRegistrarTests {
  @Mock private ServletContext servletContext;
  @Mock private Dynamic dynamic;
  @Captor private ArgumentCaptor<Servlet> servlet;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    given(this.servletContext.addServlet(any(String.class),any(Servlet.class))).willReturn(this.dynamic);
  }
  @Test public void createWhenServletEndpointsIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ServletEndpointRegistrar(null,null)).withMessageContaining("ServletEndpoints must not be null");
  }
  @Test public void onStartupShouldRegisterServlets() throws ServletException {
    assertBasePath(null,"/test/*");
  }
  @Test public void onStartupWhenHasBasePathShouldIncludeBasePath() throws ServletException {
    assertBasePath("/actuator","/actuator/test/*");
  }
  @Test public void onStartupWhenHasEmptyBasePathShouldPrefixWithSlash() throws ServletException {
    assertBasePath("","/test/*");
  }
  @Test public void onStartupWhenHasRootBasePathShouldNotAddDuplicateSlash() throws ServletException {
    assertBasePath("/","/test/*");
  }
  private void assertBasePath(  String basePath,  String expectedMapping) throws ServletException {
    ExposableServletEndpoint endpoint=mockEndpoint(new EndpointServlet(TestServlet.class));
    ServletEndpointRegistrar registrar=new ServletEndpointRegistrar(basePath,Collections.singleton(endpoint));
    registrar.onStartup(this.servletContext);
    verify(this.servletContext).addServlet(eq("test-actuator-endpoint"),this.servlet.capture());
    assertThat(this.servlet.getValue()).isInstanceOf(TestServlet.class);
    verify(this.dynamic).addMapping(expectedMapping);
  }
  @Test public void onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {
    ExposableServletEndpoint endpoint=mockEndpoint(new EndpointServlet(TestServlet.class).withInitParameter("a","b"));
    ServletEndpointRegistrar registrar=new ServletEndpointRegistrar("/actuator",Collections.singleton(endpoint));
    registrar.onStartup(this.servletContext);
    verify(this.dynamic).setInitParameters(Collections.singletonMap("a","b"));
  }
  private ExposableServletEndpoint mockEndpoint(  EndpointServlet endpointServlet){
    ExposableServletEndpoint endpoint=mock(ExposableServletEndpoint.class);
    given(endpoint.getEndpointId()).willReturn(EndpointId.of("test"));
    given(endpoint.getEndpointServlet()).willReturn(endpointServlet);
    given(endpoint.getRootPath()).willReturn("test");
    return endpoint;
  }
public static class TestServlet extends GenericServlet {
    @Override public void service(    ServletRequest req,    ServletResponse res){
    }
  }
}
