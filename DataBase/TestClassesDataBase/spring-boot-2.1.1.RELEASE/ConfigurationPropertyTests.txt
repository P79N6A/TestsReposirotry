/** 
 * Tests for  {@link ConfigurationProperty}.
 * @author Phillip Webb
 * @author Madhura Bhave
 */
public class ConfigurationPropertyTests {
  private static final ConfigurationPropertyName NAME=ConfigurationPropertyName.of("foo");
  @Test public void createWhenNameIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ConfigurationProperty(null,"bar",null)).withMessageContaining("Name must not be null");
  }
  @Test public void createWhenValueIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ConfigurationProperty(NAME,null,null)).withMessageContaining("Value must not be null");
  }
  @Test public void getNameShouldReturnName(){
    ConfigurationProperty property=ConfigurationProperty.of(NAME,"foo",null);
    assertThat((Object)property.getName()).isEqualTo(NAME);
  }
  @Test public void getValueShouldReturnValue(){
    ConfigurationProperty property=ConfigurationProperty.of(NAME,"foo",null);
    assertThat(property.getValue()).isEqualTo("foo");
  }
  @Test public void getPropertyOriginShouldReturnValuePropertyOrigin(){
    Origin origin=mock(Origin.class);
    OriginProvider property=ConfigurationProperty.of(NAME,"foo",origin);
    assertThat(property.getOrigin()).isEqualTo(origin);
  }
  @Test public void equalsAndHashCode(){
    ConfigurationProperty property1=new ConfigurationProperty(ConfigurationPropertyName.of("foo"),"bar",null);
    ConfigurationProperty property2=new ConfigurationProperty(ConfigurationPropertyName.of("foo"),"bar",null);
    ConfigurationProperty property3=new ConfigurationProperty(ConfigurationPropertyName.of("foo"),"baz",null);
    ConfigurationProperty property4=new ConfigurationProperty(ConfigurationPropertyName.of("baz"),"bar",null);
    assertThat(property1.hashCode()).isEqualTo(property2.hashCode());
    assertThat(property1).isEqualTo(property2).isNotEqualTo(property3).isNotEqualTo(property4);
  }
  @Test public void toStringShouldReturnValue(){
    ConfigurationProperty property=ConfigurationProperty.of(NAME,"foo",null);
    assertThat(property.toString()).contains("name").contains("value");
  }
}
