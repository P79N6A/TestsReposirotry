/** 
 * Tests for  {@link StatsdMetricsExportAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class StatsdMetricsExportAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(StatsdMetricsExportAutoConfiguration.class));
  @Test public void backsOffWithoutAClock(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(StatsdMeterRegistry.class));
  }
  @Test public void autoConfiguresItsConfigMeterRegistryAndMetrics(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(StatsdMeterRegistry.class).hasSingleBean(StatsdConfig.class).hasSingleBean(StatsdMetrics.class));
  }
  @Test public void autoConfigurationCanBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.export.statsd.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(StatsdMeterRegistry.class).doesNotHaveBean(StatsdConfig.class));
  }
  @Test public void allowsCustomConfigToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(StatsdMeterRegistry.class).hasSingleBean(StatsdConfig.class).hasBean("customConfig"));
  }
  @Test public void allowsCustomRegistryToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(StatsdMeterRegistry.class).hasBean("customRegistry").hasSingleBean(StatsdConfig.class));
  }
  @Test public void stopsMeterRegistryWhenContextIsClosed(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {
      StatsdMeterRegistry registry=context.getBean(StatsdMeterRegistry.class);
      assertThat(registry.isClosed()).isFalse();
      context.close();
      assertThat(registry.isClosed()).isTrue();
    }
);
  }
@Configuration static class BaseConfiguration {
    @Bean public Clock clock(){
      return Clock.SYSTEM;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomConfigConfiguration {
    @Bean public StatsdConfig customConfig(){
      return (key) -> null;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomRegistryConfiguration {
    @Bean public StatsdMeterRegistry customRegistry(    StatsdConfig config,    Clock clock){
      return new StatsdMeterRegistry(config,clock);
    }
  }
}
