/** 
 * Tests for  {@link LongTaskTimingHandlerInterceptor}.
 * @author Andy Wilkinson
 */
@RunWith(SpringRunner.class) @WebAppConfiguration public class LongTaskTimingHandlerInterceptorTests {
  @Autowired private SimpleMeterRegistry registry;
  @Autowired private WebApplicationContext context;
  @Autowired private CyclicBarrier callableBarrier;
  private MockMvc mvc;
  @Before public void setUpMockMvc(){
    this.mvc=MockMvcBuilders.webAppContextSetup(this.context).build();
  }
  @Test public void asyncRequestThatThrowsUncheckedException() throws Exception {
    MvcResult result=this.mvc.perform(get("/api/c1/completableFutureException")).andExpect(request().asyncStarted()).andReturn();
    assertThat(this.registry.get("my.long.request.exception").longTaskTimer().activeTasks()).isEqualTo(1);
    assertThatExceptionOfType(NestedServletException.class).isThrownBy(() -> this.mvc.perform(asyncDispatch(result))).withRootCauseInstanceOf(RuntimeException.class);
    assertThat(this.registry.get("my.long.request.exception").longTaskTimer().activeTasks()).isEqualTo(0);
  }
  @Test public void asyncCallableRequest() throws Exception {
    AtomicReference<MvcResult> result=new AtomicReference<>();
    Thread backgroundRequest=new Thread(() -> {
      try {
        result.set(this.mvc.perform(get("/api/c1/callable/10")).andExpect(request().asyncStarted()).andReturn());
      }
 catch (      Exception ex) {
        fail("Failed to execute async request",ex);
      }
    }
);
    backgroundRequest.start();
    this.callableBarrier.await();
    assertThat(this.registry.get("my.long.request").tags("region","test").longTaskTimer().activeTasks()).isEqualTo(1);
    this.callableBarrier.await();
    backgroundRequest.join();
    this.mvc.perform(asyncDispatch(result.get())).andExpect(status().isOk());
    assertThat(this.registry.get("my.long.request").tags("region","test").longTaskTimer().activeTasks()).isEqualTo(0);
  }
@Configuration @EnableWebMvc @Import(Controller1.class) static class MetricsInterceptorConfiguration {
    @Bean Clock micrometerClock(){
      return new MockClock();
    }
    @Bean SimpleMeterRegistry simple(    Clock clock){
      return new SimpleMeterRegistry(SimpleConfig.DEFAULT,clock);
    }
    @Bean CyclicBarrier callableBarrier(){
      return new CyclicBarrier(2);
    }
    @Bean WebMvcConfigurer handlerInterceptorConfigurer(    MeterRegistry meterRegistry){
      return new WebMvcConfigurer(){
        @Override public void addInterceptors(        InterceptorRegistry registry){
          registry.addInterceptor(new LongTaskTimingHandlerInterceptor(meterRegistry,new DefaultWebMvcTagsProvider()));
        }
      }
;
    }
  }
@RestController @RequestMapping("/api/c1") static class Controller1 {
    @Autowired private CyclicBarrier callableBarrier;
    @Timed @Timed(value="my.long.request",extraTags={"region","test"},longTask=true) @GetMapping("/callable/{id}") public Callable<String> asyncCallable(    @PathVariable Long id) throws Exception {
      this.callableBarrier.await();
      return () -> {
        try {
          this.callableBarrier.await();
        }
 catch (        InterruptedException ex) {
          throw new RuntimeException(ex);
        }
        return id.toString();
      }
;
    }
    @Timed @Timed(value="my.long.request.exception",longTask=true) @GetMapping("/completableFutureException") CompletableFuture<String> asyncCompletableFutureException(){
      return CompletableFuture.supplyAsync(() -> {
        throw new RuntimeException("boom");
      }
);
    }
  }
}
