/** 
 * Tests for  {@link StringToDataSizeConverter}.
 * @author Stephane Nicoll
 */
@RunWith(Parameterized.class) public class StringToDataSizeConverterTests {
  private final ConversionService conversionService;
  public StringToDataSizeConverterTests(  String name,  ConversionService conversionService){
    this.conversionService=conversionService;
  }
  @Test public void convertWhenSimpleBytesShouldReturnDataSize(){
    assertThat(convert("10B")).isEqualTo(DataSize.ofBytes(10));
    assertThat(convert("+10B")).isEqualTo(DataSize.ofBytes(10));
    assertThat(convert("-10B")).isEqualTo(DataSize.ofBytes(-10));
  }
  @Test public void convertWhenSimpleKilobytesShouldReturnDataSize(){
    assertThat(convert("10KB")).isEqualTo(DataSize.ofKilobytes(10));
    assertThat(convert("+10KB")).isEqualTo(DataSize.ofKilobytes(10));
    assertThat(convert("-10KB")).isEqualTo(DataSize.ofKilobytes(-10));
  }
  @Test public void convertWhenSimpleMegabytesShouldReturnDataSize(){
    assertThat(convert("10MB")).isEqualTo(DataSize.ofMegabytes(10));
    assertThat(convert("+10MB")).isEqualTo(DataSize.ofMegabytes(10));
    assertThat(convert("-10MB")).isEqualTo(DataSize.ofMegabytes(-10));
  }
  @Test public void convertWhenSimpleGigabytesShouldReturnDataSize(){
    assertThat(convert("10GB")).isEqualTo(DataSize.ofGigabytes(10));
    assertThat(convert("+10GB")).isEqualTo(DataSize.ofGigabytes(10));
    assertThat(convert("-10GB")).isEqualTo(DataSize.ofGigabytes(-10));
  }
  @Test public void convertWhenSimpleTerabytesShouldReturnDataSize(){
    assertThat(convert("10TB")).isEqualTo(DataSize.ofTerabytes(10));
    assertThat(convert("+10TB")).isEqualTo(DataSize.ofTerabytes(10));
    assertThat(convert("-10TB")).isEqualTo(DataSize.ofTerabytes(-10));
  }
  @Test public void convertWhenSimpleWithoutSuffixShouldReturnDataSize(){
    assertThat(convert("10")).isEqualTo(DataSize.ofBytes(10));
    assertThat(convert("+10")).isEqualTo(DataSize.ofBytes(10));
    assertThat(convert("-10")).isEqualTo(DataSize.ofBytes(-10));
  }
  @Test public void convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDataSize(){
    assertThat(convert("10",DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10));
    assertThat(convert("+10",DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10));
    assertThat(convert("-10",DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(-10));
  }
  @Test public void convertWhenBadFormatShouldThrowException(){
    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> convert("10WB")).withMessageContaining("'10WB' is not a valid data size");
  }
  @Test public void convertWhenEmptyShouldReturnNull(){
    assertThat(convert("")).isNull();
  }
  private DataSize convert(  String source){
    return this.conversionService.convert(source,DataSize.class);
  }
  private DataSize convert(  String source,  DataUnit unit){
    return (DataSize)this.conversionService.convert(source,TypeDescriptor.forObject(source),MockDataSizeTypeDescriptor.get(unit));
  }
  @Parameters(name="{0}") public static Iterable<Object[]> conversionServices(){
    return new ConversionServiceParameters(new StringToDataSizeConverter());
  }
}
