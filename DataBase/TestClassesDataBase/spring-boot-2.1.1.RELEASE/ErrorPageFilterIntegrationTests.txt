/** 
 * Integration tests for  {@link ErrorPageFilter}.
 * @author Dave Syer
 * @author Phillip Webb
 */
@RunWith(SpringRunner.class) @DirtiesContext @ContextConfiguration(classes=ErrorPageFilterIntegrationTests.TomcatConfig.class,loader=EmbeddedWebContextLoader.class) public class ErrorPageFilterIntegrationTests {
  @Autowired private HelloWorldController controller;
  @Autowired private AnnotationConfigServletWebServerApplicationContext context;
  @After public void init(){
    this.controller.reset();
  }
  @Test public void created() throws Exception {
    doTest(this.context,"/create",HttpStatus.CREATED);
    assertThat(this.controller.getStatus()).isEqualTo(201);
  }
  @Test public void ok() throws Exception {
    doTest(this.context,"/hello",HttpStatus.OK);
    assertThat(this.controller.getStatus()).isEqualTo(200);
  }
  private void doTest(  AnnotationConfigServletWebServerApplicationContext context,  String resourcePath,  HttpStatus status) throws Exception {
    int port=context.getWebServer().getPort();
    RestTemplate template=new RestTemplate();
    ResponseEntity<String> entity=template.getForEntity(new URI("http://localhost:" + port + resourcePath),String.class);
    assertThat(entity.getBody()).isEqualTo("Hello World");
    assertThat(entity.getStatusCode()).isEqualTo(status);
  }
@Configuration @EnableWebMvc public static class TomcatConfig {
    @Bean public ServletWebServerFactory webServerFactory(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public ErrorPageFilter errorPageFilter(){
      return new ErrorPageFilter();
    }
    @Bean public DispatcherServlet dispatcherServlet(){
      return new DispatcherServlet();
    }
    @Bean public HelloWorldController helloWorldController(){
      return new HelloWorldController();
    }
  }
@Controller public static class HelloWorldController implements WebMvcConfigurer {
    private int status;
    private CountDownLatch latch=new CountDownLatch(1);
    public int getStatus() throws InterruptedException {
      assertThat(this.latch.await(1,TimeUnit.SECONDS)).as("Timed out waiting for latch").isTrue();
      return this.status;
    }
    public void setStatus(    int status){
      this.status=status;
    }
    public void reset(){
      this.status=0;
      this.latch=new CountDownLatch(1);
    }
    @Override public void addInterceptors(    InterceptorRegistry registry){
      registry.addInterceptor(new HandlerInterceptorAdapter(){
        @Override public void postHandle(        HttpServletRequest request,        HttpServletResponse response,        Object handler,        ModelAndView modelAndView){
          HelloWorldController.this.setStatus(response.getStatus());
          HelloWorldController.this.latch.countDown();
        }
      }
);
    }
    @RequestMapping("/hello") @ResponseBody public String sayHello(){
      return "Hello World";
    }
    @RequestMapping("/create") @ResponseBody @ResponseStatus(HttpStatus.CREATED) public String created(){
      return "Hello World";
    }
  }
static class EmbeddedWebContextLoader extends AbstractContextLoader {
    private static final String[] EMPTY_RESOURCE_SUFFIXES={};
    @Override public ApplicationContext loadContext(    MergedContextConfiguration config){
      AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext(config.getClasses());
      context.registerShutdownHook();
      return context;
    }
    @Override public ApplicationContext loadContext(    String... locations){
      throw new UnsupportedOptionException();
    }
    @Override protected String[] getResourceSuffixes(){
      return EMPTY_RESOURCE_SUFFIXES;
    }
    @Override protected String getResourceSuffix(){
      throw new UnsupportedOptionException();
    }
  }
}
