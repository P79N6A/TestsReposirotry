/** 
 * Tests for  {@link ConditionalOnNotWebApplication}.
 * @author Dave Syer
 * @author Stephane Nicoll
 */
public class ConditionalOnNotWebApplicationTests {
  @Test public void testNotWebApplicationWithServletContext(){
    new WebApplicationContextRunner().withUserConfiguration(NotWebApplicationConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(String.class));
  }
  @Test public void testNotWebApplicationWithReactiveContext(){
    new ReactiveWebApplicationContextRunner().withUserConfiguration(ReactiveApplicationConfig.class,NotWebApplicationConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(String.class));
  }
  @Test public void testNotWebApplication(){
    new ApplicationContextRunner().withUserConfiguration(NotWebApplicationConfiguration.class).run((context) -> assertThat(context).getBeans(String.class).containsExactly(entry("none","none")));
  }
@Configuration protected static class ReactiveApplicationConfig {
    @Bean public ReactiveWebServerFactory reactiveWebServerFactory(){
      return new MockReactiveWebServerFactory();
    }
    @Bean public HttpHandler httpHandler(){
      return (request,response) -> Mono.empty();
    }
  }
@Configuration @ConditionalOnNotWebApplication protected static class NotWebApplicationConfiguration {
    @Bean public String none(){
      return "none";
    }
  }
}
