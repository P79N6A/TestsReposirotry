/** 
 * Tests for  {@link AnnotationConfigReactiveWebServerApplicationContext}.
 * @author Phillip Webb
 */
public class AnnotationConfigReactiveWebServerApplicationContextTests {
  private AnnotationConfigReactiveWebServerApplicationContext context;
  @Test public void createFromScan(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext(ExampleReactiveWebServerApplicationConfiguration.class.getPackage().getName());
    verifyContext();
  }
  @Test public void createFromConfigClass(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext(ExampleReactiveWebServerApplicationConfiguration.class);
    verifyContext();
  }
  @Test public void registerAndRefresh(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext();
    this.context.register(ExampleReactiveWebServerApplicationConfiguration.class);
    this.context.refresh();
    verifyContext();
  }
  @Test public void multipleRegistersAndRefresh(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext();
    this.context.register(WebServerConfiguration.class);
    this.context.register(HttpHandlerConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBeansOfType(WebServerConfiguration.class)).hasSize(1);
    assertThat(this.context.getBeansOfType(HttpHandlerConfiguration.class)).hasSize(1);
  }
  @Test public void scanAndRefresh(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext();
    this.context.scan(ExampleReactiveWebServerApplicationConfiguration.class.getPackage().getName());
    this.context.refresh();
    verifyContext();
  }
  @Test public void httpHandlerInitialization(){
    this.context=new AnnotationConfigReactiveWebServerApplicationContext(InitializationTestConfig.class);
    verifyContext();
  }
  private void verifyContext(){
    MockReactiveWebServerFactory factory=this.context.getBean(MockReactiveWebServerFactory.class);
    HttpHandler expectedHandler=this.context.getBean(HttpHandler.class);
    HttpHandler actualHandler=factory.getWebServer().getHttpHandler();
    if (actualHandler instanceof ServerManager) {
      actualHandler=((ServerManager)actualHandler).getHandler();
    }
    assertThat(actualHandler).isEqualTo(expectedHandler);
  }
@Configuration public static class WebServerConfiguration {
    @Bean public ReactiveWebServerFactory webServerFactory(){
      return new MockReactiveWebServerFactory();
    }
  }
@Configuration public static class HttpHandlerConfiguration {
    @Bean public HttpHandler httpHandler(){
      return mock(HttpHandler.class);
    }
  }
@Configuration public static class InitializationTestConfig {
    private static boolean addedListener;
    @Bean public ReactiveWebServerFactory webServerFactory(){
      return new MockReactiveWebServerFactory();
    }
    @Bean public HttpHandler httpHandler(){
      if (!addedListener) {
        throw new RuntimeException("Handlers should be added after listeners, we're being initialized too early!");
      }
      return mock(HttpHandler.class);
    }
    @Bean public Listener listener(){
      return new Listener();
    }
    @Bean public ApplicationEventMulticaster applicationEventMulticaster(){
      return new SimpleApplicationEventMulticaster(){
        @Override public void addApplicationListenerBean(        String listenerBeanName){
          super.addApplicationListenerBean(listenerBeanName);
          if ("listener".equals(listenerBeanName)) {
            addedListener=true;
          }
        }
      }
;
    }
private static class Listener implements ApplicationListener<ContextRefreshedEvent> {
      @Override public void onApplicationEvent(      ContextRefreshedEvent event){
      }
    }
  }
}
