/** 
 * Base class for  {@link SpringBootTest} tests configured to start an embedded reactivecontainer.
 * @author Stephane Nicoll
 */
public abstract class AbstractSpringBootTestEmbeddedReactiveWebEnvironmentTests {
  @LocalServerPort private int port=0;
  @Value("${value}") private int value=0;
  @Autowired private ReactiveWebApplicationContext context;
  @Autowired private WebTestClient webClient;
  @Autowired private TestRestTemplate restTemplate;
  public ReactiveWebApplicationContext getContext(){
    return this.context;
  }
  @Test public void runAndTestHttpEndpoint(){
    assertThat(this.port).isNotEqualTo(8080).isNotEqualTo(0);
    WebTestClient.bindToServer().baseUrl("http://localhost:" + this.port).build().get().uri("/").exchange().expectBody(String.class).isEqualTo("Hello World");
  }
  @Test public void injectWebTestClient(){
    this.webClient.get().uri("/").exchange().expectBody(String.class).isEqualTo("Hello World");
  }
  @Test public void injectTestRestTemplate(){
    String body=this.restTemplate.getForObject("/",String.class);
    assertThat(body).isEqualTo("Hello World");
  }
  @Test public void annotationAttributesOverridePropertiesFile(){
    assertThat(this.value).isEqualTo(123);
  }
protected abstract static class AbstractConfig {
    @Value("${server.port:8080}") private int port=8080;
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return WebHttpHandlerBuilder.applicationContext(applicationContext).build();
    }
    @Bean public ReactiveWebServerFactory webServerFactory(){
      TomcatReactiveWebServerFactory factory=new TomcatReactiveWebServerFactory();
      factory.setPort(this.port);
      return factory;
    }
    @Bean public static PropertySourcesPlaceholderConfigurer propertyPlaceholder(){
      return new PropertySourcesPlaceholderConfigurer();
    }
    @RequestMapping("/") public Mono<String> home(){
      return Mono.just("Hello World");
    }
  }
}
