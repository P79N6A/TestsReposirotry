/** 
 * Tests for  {@link JpaProperties}.
 * @author Stephane Nicoll
 */
public class JpaPropertiesTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(TestConfiguration.class);
  @Test public void determineDatabaseNoCheckIfDatabaseIsSet(){
    this.contextRunner.withPropertyValues("spring.jpa.database=postgresql").run(assertJpaProperties((properties) -> {
      DataSource dataSource=mockStandaloneDataSource();
      Database database=properties.determineDatabase(dataSource);
      assertThat(database).isEqualTo(Database.POSTGRESQL);
      try {
        verify(dataSource,never()).getConnection();
      }
 catch (      SQLException ex) {
        throw new IllegalStateException("Should not happen",ex);
      }
    }
));
  }
  @Test public void determineDatabaseWithKnownUrl(){
    this.contextRunner.run(assertJpaProperties((properties) -> {
      Database database=properties.determineDatabase(mockDataSource("jdbc:h2:mem:testdb"));
      assertThat(database).isEqualTo(Database.H2);
    }
));
  }
  @Test public void determineDatabaseWithKnownUrlAndUserConfig(){
    this.contextRunner.withPropertyValues("spring.jpa.database=mysql").run(assertJpaProperties((properties) -> {
      Database database=properties.determineDatabase(mockDataSource("jdbc:h2:mem:testdb"));
      assertThat(database).isEqualTo(Database.MYSQL);
    }
));
  }
  @Test public void determineDatabaseWithUnknownUrl(){
    this.contextRunner.run(assertJpaProperties((properties) -> {
      Database database=properties.determineDatabase(mockDataSource("jdbc:unknown://localhost"));
      assertThat(database).isEqualTo(Database.DEFAULT);
    }
));
  }
  private DataSource mockStandaloneDataSource(){
    try {
      DataSource ds=mock(DataSource.class);
      given(ds.getConnection()).willThrow(SQLException.class);
      return ds;
    }
 catch (    SQLException ex) {
      throw new IllegalStateException("Should not happen",ex);
    }
  }
  private DataSource mockDataSource(  String jdbcUrl){
    DataSource ds=mock(DataSource.class);
    try {
      DatabaseMetaData metadata=mock(DatabaseMetaData.class);
      given(metadata.getURL()).willReturn(jdbcUrl);
      Connection connection=mock(Connection.class);
      given(connection.getMetaData()).willReturn(metadata);
      given(ds.getConnection()).willReturn(connection);
    }
 catch (    SQLException ex) {
    }
    return ds;
  }
  private ContextConsumer<AssertableApplicationContext> assertJpaProperties(  Consumer<JpaProperties> consumer){
    return (context) -> {
      assertThat(context).hasSingleBean(JpaProperties.class);
      consumer.accept(context.getBean(JpaProperties.class));
    }
;
  }
@Configuration @EnableConfigurationProperties(JpaProperties.class) static class TestConfiguration {
  }
}
