/** 
 * Tests for  {@link CassandraReactiveHealthIndicator}.
 * @author Artsiom Yudovin
 */
public class CassandraReactiveHealthIndicatorTests {
  @Test public void testCassandraIsUp(){
    ReactiveCqlOperations reactiveCqlOperations=mock(ReactiveCqlOperations.class);
    given(reactiveCqlOperations.queryForObject(any(Select.class),eq(String.class))).willReturn(Mono.just("6.0.0"));
    ReactiveCassandraOperations reactiveCassandraOperations=mock(ReactiveCassandraOperations.class);
    given(reactiveCassandraOperations.getReactiveCqlOperations()).willReturn(reactiveCqlOperations);
    CassandraReactiveHealthIndicator cassandraReactiveHealthIndicator=new CassandraReactiveHealthIndicator(reactiveCassandraOperations);
    Mono<Health> health=cassandraReactiveHealthIndicator.health();
    StepVerifier.create(health).consumeNextWith((h) -> {
      assertThat(h.getStatus()).isEqualTo(Status.UP);
      assertThat(h.getDetails()).containsOnlyKeys("version");
      assertThat(h.getDetails().get("version")).isEqualTo("6.0.0");
    }
).verifyComplete();
  }
  @Test public void testCassandraIsDown(){
    ReactiveCassandraOperations reactiveCassandraOperations=mock(ReactiveCassandraOperations.class);
    given(reactiveCassandraOperations.getReactiveCqlOperations()).willThrow(new CassandraInternalException("Connection failed"));
    CassandraReactiveHealthIndicator cassandraReactiveHealthIndicator=new CassandraReactiveHealthIndicator(reactiveCassandraOperations);
    Mono<Health> health=cassandraReactiveHealthIndicator.health();
    StepVerifier.create(health).consumeNextWith((h) -> {
      assertThat(h.getStatus()).isEqualTo(Status.DOWN);
      assertThat(h.getDetails()).containsOnlyKeys("error");
      assertThat(h.getDetails().get("error")).isEqualTo(CassandraInternalException.class.getName() + ": Connection failed");
    }
).verifyComplete();
  }
}
