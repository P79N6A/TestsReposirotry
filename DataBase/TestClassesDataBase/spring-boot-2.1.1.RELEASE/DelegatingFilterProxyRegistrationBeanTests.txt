/** 
 * Tests for  {@link DelegatingFilterProxyRegistrationBean}.
 * @author Phillip Webb
 */
public class DelegatingFilterProxyRegistrationBeanTests extends AbstractFilterRegistrationBeanTests {
  private static ThreadLocal<Boolean> mockFilterInitialized=new ThreadLocal<>();
  private GenericWebApplicationContext applicationContext=new GenericWebApplicationContext(new MockServletContext());
  @Test public void targetBeanNameMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean(null)).withMessageContaining("TargetBeanName must not be null or empty");
  }
  @Test public void targetBeanNameMustNotBeEmpty(){
    assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean("")).withMessageContaining("TargetBeanName must not be null or empty");
  }
  @Test public void nameDefaultsToTargetBeanName(){
    assertThat(new DelegatingFilterProxyRegistrationBean("myFilter").getOrDeduceName(null)).isEqualTo("myFilter");
  }
  @Test public void getFilterUsesDelegatingFilterProxy(){
    DelegatingFilterProxyRegistrationBean registrationBean=createFilterRegistrationBean();
    Filter filter=registrationBean.getFilter();
    assertThat(filter).isInstanceOf(DelegatingFilterProxy.class);
    assertThat(ReflectionTestUtils.getField(filter,"webApplicationContext")).isEqualTo(this.applicationContext);
    assertThat(ReflectionTestUtils.getField(filter,"targetBeanName")).isEqualTo("mockFilter");
  }
  @Test public void initShouldNotCauseEarlyInitialization() throws Exception {
    this.applicationContext.registerBeanDefinition("mockFilter",new RootBeanDefinition(MockFilter.class));
    DelegatingFilterProxyRegistrationBean registrationBean=createFilterRegistrationBean();
    Filter filter=registrationBean.getFilter();
    filter.init(new MockFilterConfig());
    assertThat(mockFilterInitialized.get()).isNull();
    filter.doFilter(new MockHttpServletRequest(),new MockHttpServletResponse(),new MockFilterChain());
    assertThat(mockFilterInitialized.get()).isTrue();
  }
  @Test public void createServletRegistrationBeanMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean("mockFilter",(ServletRegistrationBean[])null)).withMessageContaining("ServletRegistrationBeans must not be null");
  }
  @Override protected DelegatingFilterProxyRegistrationBean createFilterRegistrationBean(  ServletRegistrationBean<?>... servletRegistrationBeans){
    DelegatingFilterProxyRegistrationBean bean=new DelegatingFilterProxyRegistrationBean("mockFilter",servletRegistrationBeans);
    bean.setApplicationContext(this.applicationContext);
    return bean;
  }
  @Override protected Filter getExpectedFilter(){
    return isA(DelegatingFilterProxy.class);
  }
static class MockFilter extends GenericFilterBean {
    MockFilter(){
      mockFilterInitialized.set(true);
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain){
    }
  }
}
