/** 
 * Integration tests for  {@link BootJar}.
 * @author Andy Wilkinson
 */
@RunWith(GradleCompatibilitySuite.class) public abstract class AbstractBootArchiveIntegrationTests {
  @Rule public GradleBuild gradleBuild;
  private final String taskName;
  protected AbstractBootArchiveIntegrationTests(  String taskName){
    this.taskName=taskName;
  }
  @Test public void basicBuild() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
  }
  @Test public void reproducibleArchive() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException, InterruptedException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    File jar=new File(this.gradleBuild.getProjectDir(),"build/libs").listFiles()[0];
    String firstHash=FileUtils.sha1Hash(jar);
    Thread.sleep(1500);
    assertThat(this.gradleBuild.build("clean",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    String secondHash=FileUtils.sha1Hash(jar);
    assertThat(firstHash).isEqualTo(secondHash);
  }
  @Test public void upToDateWhenBuiltTwice() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE);
  }
  @Test public void upToDateWhenBuiltTwiceWithLaunchScriptIncluded() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE);
  }
  @Test public void notUpToDateWhenLaunchScriptWasNotIncludedAndThenIsIncluded(){
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
  }
  @Test public void notUpToDateWhenLaunchScriptWasIncludedAndThenIsNotIncluded(){
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
  }
  @Test public void notUpToDateWhenLaunchScriptPropertyChanges(){
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true","-PlaunchScriptProperty=foo",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(this.gradleBuild.build("-PincludeLaunchScript=true","-PlaunchScriptProperty=bar",this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
  }
  @Test public void applicationPluginMainClassNameIsUsed() throws IOException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    try (JarFile jarFile=new JarFile(new File(this.gradleBuild.getProjectDir(),"build/libs").listFiles()[0])){
      assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.CustomMain");
    }
   }
  @Test public void springBootExtensionMainClassNameIsUsed() throws IOException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    try (JarFile jarFile=new JarFile(new File(this.gradleBuild.getProjectDir(),"build/libs").listFiles()[0])){
      assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.CustomMain");
    }
   }
  @Test public void duplicatesAreHandledGracefully() throws IOException {
    assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
  }
}
