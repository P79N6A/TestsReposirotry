/** 
 * Tests for  {@link RemoteVehicleDetailsService}.
 * @author Phillip Webb
 */
@RunWith(SpringRunner.class) @RestClientTest({RemoteVehicleDetailsService.class,ServiceProperties.class}) public class RemoteVehicleDetailsServiceTests {
  private static final String VIN="00000000000000000";
  @Autowired private RemoteVehicleDetailsService service;
  @Autowired private MockRestServiceServer server;
  @Test public void getVehicleDetailsWhenVinIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.service.getVehicleDetails(null)).withMessage("VIN must not be null");
  }
  @Test public void getVehicleDetailsWhenResultIsSuccessShouldReturnDetails(){
    this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withSuccess(getClassPathResource("vehicledetails.json"),MediaType.APPLICATION_JSON));
    VehicleDetails details=this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN));
    assertThat(details.getMake()).isEqualTo("Honda");
    assertThat(details.getModel()).isEqualTo("Civic");
  }
  @Test public void getVehicleDetailsWhenResultIsNotFoundShouldThrowException(){
    this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withStatus(HttpStatus.NOT_FOUND));
    assertThatExceptionOfType(VehicleIdentificationNumberNotFoundException.class).isThrownBy(() -> this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN)));
  }
  @Test public void getVehicleDetailsWhenResultIServerErrorShouldThrowException(){
    this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withServerError());
    assertThatExceptionOfType(HttpServerErrorException.class).isThrownBy(() -> this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN)));
  }
  private ClassPathResource getClassPathResource(  String path){
    return new ClassPathResource(path,getClass());
  }
}
