/** 
 * Tests for  {@link SpringBootMockMvcBuilderCustomizer}.
 * @author Madhura Bhave
 */
public class SpringBootMockMvcBuilderCustomizerTests {
  private SpringBootMockMvcBuilderCustomizer customizer;
  @Test @SuppressWarnings("unchecked") public void customizeShouldAddFilters(){
    AnnotationConfigWebApplicationContext context=new AnnotationConfigWebApplicationContext();
    MockServletContext servletContext=new MockServletContext();
    context.setServletContext(servletContext);
    context.register(ServletConfiguration.class,FilterConfiguration.class);
    context.refresh();
    DefaultMockMvcBuilder builder=MockMvcBuilders.webAppContextSetup(context);
    this.customizer=new SpringBootMockMvcBuilderCustomizer(context);
    this.customizer.customize(builder);
    FilterRegistrationBean<?> registrationBean=(FilterRegistrationBean<?>)context.getBean("filterRegistrationBean");
    Filter testFilter=(Filter)context.getBean("testFilter");
    Filter otherTestFilter=registrationBean.getFilter();
    List<Filter> filters=(List<Filter>)ReflectionTestUtils.getField(builder,"filters");
    assertThat(filters).containsExactlyInAnyOrder(testFilter,otherTestFilter);
  }
static class ServletConfiguration {
    @Bean public TestServlet testServlet(){
      return new TestServlet();
    }
  }
static class FilterConfiguration {
    @Bean public FilterRegistrationBean<OtherTestFilter> filterRegistrationBean(){
      return new FilterRegistrationBean<>(new OtherTestFilter());
    }
    @Bean public TestFilter testFilter(){
      return new TestFilter();
    }
  }
static class TestServlet extends HttpServlet {
  }
static class TestFilter implements Filter {
    @Override public void init(    FilterConfig filterConfig){
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain){
    }
    @Override public void destroy(){
    }
  }
static class OtherTestFilter implements Filter {
    @Override public void init(    FilterConfig filterConfig){
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain){
    }
    @Override public void destroy(){
    }
  }
}
