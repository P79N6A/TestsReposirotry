/** 
 * Tests for  {@link MeterRegistryConfigurer}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class MeterRegistryConfigurerTests {
  private List<MeterBinder> binders=new ArrayList<>();
  private List<MeterFilter> filters=new ArrayList<>();
  private List<MeterRegistryCustomizer<?>> customizers=new ArrayList<>();
  @Mock private MeterBinder mockBinder;
  @Mock private MeterFilter mockFilter;
  @Mock private MeterRegistryCustomizer<MeterRegistry> mockCustomizer;
  @Mock private MeterRegistry mockRegistry;
  @Mock private Config mockConfig;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    given(this.mockRegistry.config()).willReturn(this.mockConfig);
  }
  @Test public void configureWhenCompositeShouldApplyCustomizer(){
    this.customizers.add(this.mockCustomizer);
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    CompositeMeterRegistry composite=new CompositeMeterRegistry();
    configurer.configure(composite);
    verify(this.mockCustomizer).customize(composite);
  }
  @Test public void configureShouldApplyCustomizer(){
    this.customizers.add(this.mockCustomizer);
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    configurer.configure(this.mockRegistry);
    verify(this.mockCustomizer).customize(this.mockRegistry);
  }
  @Test public void configureShouldApplyFilter(){
    this.filters.add(this.mockFilter);
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    configurer.configure(this.mockRegistry);
    verify(this.mockConfig).meterFilter(this.mockFilter);
  }
  @Test public void configureShouldApplyBinder(){
    this.binders.add(this.mockBinder);
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    configurer.configure(this.mockRegistry);
    verify(this.mockBinder).bindTo(this.mockRegistry);
  }
  @Test public void configureShouldBeCalledInOrderCustomizerFilterBinder(){
    this.customizers.add(this.mockCustomizer);
    this.filters.add(this.mockFilter);
    this.binders.add(this.mockBinder);
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    configurer.configure(this.mockRegistry);
    InOrder ordered=inOrder(this.mockBinder,this.mockConfig,this.mockCustomizer);
    ordered.verify(this.mockCustomizer).customize(this.mockRegistry);
    ordered.verify(this.mockConfig).meterFilter(this.mockFilter);
    ordered.verify(this.mockBinder).bindTo(this.mockRegistry);
  }
  @Test public void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry(){
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,true);
    try {
      configurer.configure(this.mockRegistry);
      assertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);
    }
  finally {
      Metrics.removeRegistry(this.mockRegistry);
    }
  }
  @Test public void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry(){
    MeterRegistryConfigurer configurer=new MeterRegistryConfigurer(this.binders,this.filters,this.customizers,false);
    configurer.configure(this.mockRegistry);
    assertThat(Metrics.globalRegistry.getRegistries()).doesNotContain(this.mockRegistry);
  }
}
