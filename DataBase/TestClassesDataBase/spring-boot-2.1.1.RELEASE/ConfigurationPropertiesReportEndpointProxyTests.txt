/** 
 * Tests for  {@link ConfigurationPropertiesReportEndpoint} when used against a proxyclass.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class ConfigurationPropertiesReportEndpointProxyTests {
  @Test public void testWithProxyClass(){
    ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(Config.class,SqlExecutor.class);
    contextRunner.run((context) -> {
      ApplicationConfigurationProperties applicationProperties=context.getBean(ConfigurationPropertiesReportEndpoint.class).configurationProperties();
      assertThat(applicationProperties.getContexts().get(context.getId()).getBeans().values().stream().map(ConfigurationPropertiesBeanDescriptor::getPrefix).filter("executor.sql"::equals).findFirst()).isNotEmpty();
    }
);
  }
@Configuration @EnableTransactionManagement(proxyTargetClass=false) @EnableConfigurationProperties public static class Config {
    @Bean public ConfigurationPropertiesReportEndpoint endpoint(){
      return new ConfigurationPropertiesReportEndpoint();
    }
    @Bean public PlatformTransactionManager transactionManager(){
      return new DataSourceTransactionManager(dataSource());
    }
    @Bean public DataSource dataSource(){
      return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.HSQL).build();
    }
  }
public interface Executor {
    void execute();
  }
public abstract static class AbstractExecutor implements Executor {
  }
@Component @ConfigurationProperties("executor.sql") public static class SqlExecutor extends AbstractExecutor {
    @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public void execute(){
    }
  }
}
