/** 
 * Integration tests for  {@link ControllerEndpointHandlerMapping}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class ControllerEndpointHandlerMappingIntegrationTests {
  private final ReactiveWebApplicationContextRunner contextRunner=new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new).withUserConfiguration(EndpointConfiguration.class,ExampleWebFluxEndpoint.class);
  @Test public void get(){
    this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get().uri("/actuator/example/one").accept(MediaType.TEXT_PLAIN).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(MediaType.TEXT_PLAIN).expectBody(String.class).isEqualTo("One")));
  }
  @Test public void getWithUnacceptableContentType(){
    this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get().uri("/actuator/example/one").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isEqualTo(HttpStatus.NOT_ACCEPTABLE)));
  }
  @Test public void post(){
    this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.post().uri("/actuator/example/two").syncBody(Collections.singletonMap("id","test")).exchange().expectStatus().isCreated().expectHeader().valueEquals(HttpHeaders.LOCATION,"/example/test")));
  }
  private ContextConsumer<AssertableReactiveWebApplicationContext> withWebTestClient(  Consumer<WebTestClient> webClient){
    return (context) -> {
      int port=((AnnotationConfigReactiveWebServerApplicationContext)context.getSourceApplicationContext()).getWebServer().getPort();
      WebTestClient webTestClient=createWebTestClient(port);
      webClient.accept(webTestClient);
    }
;
  }
  private WebTestClient createWebTestClient(  int port){
    DefaultUriBuilderFactory uriBuilderFactory=new DefaultUriBuilderFactory("http://localhost:" + port);
    uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE);
    return WebTestClient.bindToServer().uriBuilderFactory(uriBuilderFactory).responseTimeout(Duration.ofMinutes(2)).build();
  }
@Configuration @ImportAutoConfiguration({JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,WebFluxAutoConfiguration.class}) static class EndpointConfiguration {
    @Bean public NettyReactiveWebServerFactory netty(){
      return new NettyReactiveWebServerFactory(0);
    }
    @Bean public HttpHandler httpHandler(    ApplicationContext applicationContext){
      return WebHttpHandlerBuilder.applicationContext(applicationContext).build();
    }
    @Bean public ControllerEndpointDiscoverer webEndpointDiscoverer(    ApplicationContext applicationContext){
      return new ControllerEndpointDiscoverer(applicationContext,null,Collections.emptyList());
    }
    @Bean public ControllerEndpointHandlerMapping webEndpointHandlerMapping(    ControllerEndpointsSupplier endpointsSupplier){
      return new ControllerEndpointHandlerMapping(new EndpointMapping("actuator"),endpointsSupplier.getEndpoints(),null);
    }
  }
@RestControllerEndpoint(id="example") public static class ExampleWebFluxEndpoint {
    @GetMapping(path="one",produces=MediaType.TEXT_PLAIN_VALUE) public String one(){
      return "One";
    }
    @PostMapping("/two") public ResponseEntity<String> two(    @RequestBody Map<String,Object> content){
      return ResponseEntity.created(URI.create("/example/" + content.get("id"))).build();
    }
  }
}
