/** 
 * Tests for  {@link JettyReactiveWebServerFactory} and {@link JettyWebServer}.
 * @author Brian Clozel
 * @author Madhura Bhave
 */
public class JettyReactiveWebServerFactoryTests extends AbstractReactiveWebServerFactoryTests {
  @Override protected JettyReactiveWebServerFactory getFactory(){
    return new JettyReactiveWebServerFactory(0);
  }
  @Test public void setNullServerCustomizersShouldThrowException(){
    JettyReactiveWebServerFactory factory=getFactory();
    assertThatIllegalArgumentException().isThrownBy(() -> factory.setServerCustomizers(null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void addNullServerCustomizersShouldThrowException(){
    JettyReactiveWebServerFactory factory=getFactory();
    assertThatIllegalArgumentException().isThrownBy(() -> factory.addServerCustomizers((JettyServerCustomizer[])null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void jettyCustomizersShouldBeInvoked(){
    HttpHandler handler=mock(HttpHandler.class);
    JettyReactiveWebServerFactory factory=getFactory();
    JettyServerCustomizer[] configurations=new JettyServerCustomizer[4];
    Arrays.setAll(configurations,(i) -> mock(JettyServerCustomizer.class));
    factory.setServerCustomizers(Arrays.asList(configurations[0],configurations[1]));
    factory.addServerCustomizers(configurations[2],configurations[3]);
    this.webServer=factory.getWebServer(handler);
    InOrder ordered=inOrder((Object[])configurations);
    for (    JettyServerCustomizer configuration : configurations) {
      ordered.verify(configuration).customize(any(Server.class));
    }
  }
  @Test public void specificIPAddressNotReverseResolved() throws Exception {
    JettyReactiveWebServerFactory factory=getFactory();
    InetAddress localhost=InetAddress.getLocalHost();
    factory.setAddress(InetAddress.getByAddress(localhost.getAddress()));
    this.webServer=factory.getWebServer(mock(HttpHandler.class));
    this.webServer.start();
    Connector connector=((JettyWebServer)this.webServer).getServer().getConnectors()[0];
    assertThat(((ServerConnector)connector).getHost()).isEqualTo(localhost.getHostAddress());
  }
  @Test public void useForwardedHeaders(){
    JettyReactiveWebServerFactory factory=getFactory();
    factory.setUseForwardHeaders(true);
    assertForwardHeaderIsUsed(factory);
  }
  @Test public void useServerResources() throws Exception {
    JettyResourceFactory resourceFactory=new JettyResourceFactory();
    resourceFactory.afterPropertiesSet();
    JettyReactiveWebServerFactory factory=getFactory();
    factory.setResourceFactory(resourceFactory);
    JettyWebServer webServer=(JettyWebServer)factory.getWebServer(new EchoHandler());
    webServer.start();
    Connector connector=webServer.getServer().getConnectors()[0];
    assertThat(connector.getByteBufferPool()).isEqualTo(resourceFactory.getByteBufferPool());
    assertThat(connector.getExecutor()).isEqualTo(resourceFactory.getExecutor());
    assertThat(connector.getScheduler()).isEqualTo(resourceFactory.getScheduler());
  }
}
