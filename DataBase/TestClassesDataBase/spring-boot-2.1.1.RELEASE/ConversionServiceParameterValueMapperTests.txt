/** 
 * Tests for  {@link ConversionServiceParameterValueMapper}.
 * @author Phillip Webb
 */
public class ConversionServiceParameterValueMapperTests {
  @Test public void mapParameterShouldDelegateToConversionService(){
    DefaultFormattingConversionService conversionService=spy(new DefaultFormattingConversionService());
    ConversionServiceParameterValueMapper mapper=new ConversionServiceParameterValueMapper(conversionService);
    Object mapped=mapper.mapParameterValue(new TestOperationParameter(Integer.class),"123");
    assertThat(mapped).isEqualTo(123);
    verify(conversionService).convert("123",Integer.class);
  }
  @Test public void mapParameterWhenConversionServiceFailsShouldThrowParameterMappingException(){
    ConversionService conversionService=mock(ConversionService.class);
    RuntimeException error=new RuntimeException();
    given(conversionService.convert(any(),any())).willThrow(error);
    ConversionServiceParameterValueMapper mapper=new ConversionServiceParameterValueMapper(conversionService);
    try {
      mapper.mapParameterValue(new TestOperationParameter(Integer.class),"123");
      fail("Did not throw");
    }
 catch (    ParameterMappingException ex) {
      assertThat(ex.getValue()).isEqualTo("123");
      assertThat(ex.getParameter().getType()).isEqualTo(Integer.class);
      assertThat(ex.getCause()).isEqualTo(error);
    }
  }
  @Test public void createShouldRegisterIsoOffsetDateTimeConverter(){
    ConversionServiceParameterValueMapper mapper=new ConversionServiceParameterValueMapper();
    Object mapped=mapper.mapParameterValue(new TestOperationParameter(OffsetDateTime.class),"2011-12-03T10:15:30+01:00");
    assertThat(mapped).isNotNull();
  }
  @Test public void createWithConversionServiceShouldNotRegisterIsoOffsetDateTimeConverter(){
    ConversionService conversionService=new DefaultConversionService();
    ConversionServiceParameterValueMapper mapper=new ConversionServiceParameterValueMapper(conversionService);
    assertThatExceptionOfType(ParameterMappingException.class).isThrownBy(() -> mapper.mapParameterValue(new TestOperationParameter(OffsetDateTime.class),"2011-12-03T10:15:30+01:00"));
  }
private static class TestOperationParameter implements OperationParameter {
    private final Class<?> type;
    TestOperationParameter(    Class<?> type){
      this.type=type;
    }
    @Override public String getName(){
      return "test";
    }
    @Override public Class<?> getType(){
      return this.type;
    }
    @Override public boolean isMandatory(){
      return false;
    }
  }
}
