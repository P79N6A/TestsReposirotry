/** 
 * Tests for  {@link HttpTraceAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class HttpTraceAutoConfigurationTests {
  @Test public void configuresRepository(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(InMemoryHttpTraceRepository.class));
  }
  @Test public void usesUserProvidedRepository(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomRepositoryConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(HttpTraceRepository.class);
      assertThat(context.getBean(HttpTraceRepository.class)).isInstanceOf(CustomHttpTraceRepository.class);
    }
);
  }
  @Test public void configuresTracer(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpExchangeTracer.class));
  }
  @Test public void usesUserProvidedTracer(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomTracerConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(HttpExchangeTracer.class);
      assertThat(context.getBean(HttpExchangeTracer.class)).isInstanceOf(CustomHttpExchangeTracer.class);
    }
);
  }
  @Test public void configuresWebFilter(){
    new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpTraceWebFilter.class));
  }
  @Test public void usesUserProvidedWebFilter(){
    new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomWebFilterConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(HttpTraceWebFilter.class);
      assertThat(context.getBean(HttpTraceWebFilter.class)).isInstanceOf(CustomHttpTraceWebFilter.class);
    }
);
  }
  @Test public void configuresServletFilter(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpTraceFilter.class));
  }
  @Test public void usesUserProvidedServletFilter(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomFilterConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(HttpTraceFilter.class);
      assertThat(context.getBean(HttpTraceFilter.class)).isInstanceOf(CustomHttpTraceFilter.class);
    }
);
  }
  @Test public void backsOffWhenDisabled(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withPropertyValues("management.trace.http.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(InMemoryHttpTraceRepository.class).doesNotHaveBean(HttpExchangeTracer.class).doesNotHaveBean(HttpTraceFilter.class));
  }
private static class CustomHttpTraceRepository implements HttpTraceRepository {
    @Override public List<HttpTrace> findAll(){
      return null;
    }
    @Override public void add(    HttpTrace trace){
    }
  }
@Configuration static class CustomRepositoryConfiguration {
    @Bean public CustomHttpTraceRepository customRepository(){
      return new CustomHttpTraceRepository();
    }
  }
private static final class CustomHttpExchangeTracer extends HttpExchangeTracer {
    private CustomHttpExchangeTracer(    Set<Include> includes){
      super(includes);
    }
  }
@Configuration static class CustomTracerConfiguration {
    @Bean public CustomHttpExchangeTracer customTracer(    HttpTraceProperties properties){
      return new CustomHttpExchangeTracer(properties.getInclude());
    }
  }
private static final class CustomHttpTraceWebFilter extends HttpTraceWebFilter {
    private CustomHttpTraceWebFilter(    HttpTraceRepository repository,    HttpExchangeTracer tracer,    Set<Include> includes){
      super(repository,tracer,includes);
    }
  }
@Configuration static class CustomWebFilterConfiguration {
    @Bean public CustomHttpTraceWebFilter customWebFilter(    HttpTraceRepository repository,    HttpExchangeTracer tracer,    HttpTraceProperties properties){
      return new CustomHttpTraceWebFilter(repository,tracer,properties.getInclude());
    }
  }
private static final class CustomHttpTraceFilter extends HttpTraceFilter {
    private CustomHttpTraceFilter(    HttpTraceRepository repository,    HttpExchangeTracer tracer){
      super(repository,tracer);
    }
  }
@Configuration static class CustomFilterConfiguration {
    @Bean public CustomHttpTraceFilter customWebFilter(    HttpTraceRepository repository,    HttpExchangeTracer tracer){
      return new CustomHttpTraceFilter(repository,tracer);
    }
  }
}
