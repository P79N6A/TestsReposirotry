/** 
 * Tests for  {@link SpringBootTest} configured with {@link WebEnvironment#MOCK}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
@RunWith(SpringRunner.class) @SpringBootTest("value=123") @DirtiesContext public class SpringBootTestWebEnvironmentMockTests {
  @Value("${value}") private int value=0;
  @Autowired private WebApplicationContext context;
  @Autowired private ServletContext servletContext;
  @Test public void annotationAttributesOverridePropertiesFile(){
    assertThat(this.value).isEqualTo(123);
  }
  @Test public void validateWebApplicationContextIsSet(){
    WebApplicationContext fromServletContext=WebApplicationContextUtils.getWebApplicationContext(this.servletContext);
    assertThat(fromServletContext).isSameAs(this.context);
  }
  @Test public void setsRequestContextHolder(){
    RequestAttributes attributes=RequestContextHolder.getRequestAttributes();
    assertThat(attributes).isNotNull();
  }
  @Test public void resourcePath(){
    assertThat(this.servletContext).hasFieldOrPropertyWithValue("resourceBasePath","src/main/webapp");
  }
@Configuration @EnableWebMvc protected static class Config {
    @Bean public static PropertySourcesPlaceholderConfigurer propertyPlaceholder(){
      return new PropertySourcesPlaceholderConfigurer();
    }
  }
}
