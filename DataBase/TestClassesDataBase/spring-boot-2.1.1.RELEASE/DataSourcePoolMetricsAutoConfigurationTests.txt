/** 
 * Tests for  {@link DataSourcePoolMetricsAutoConfiguration}.
 * @author Stephane Nicoll
 * @author Andy Wilkinson
 * @author Tommy Ludwig
 */
public class DataSourcePoolMetricsAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true").with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(DataSourcePoolMetricsAutoConfiguration.class)).withUserConfiguration(BaseConfiguration.class);
  @Test public void autoConfiguredDataSourceIsInstrumented(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean(DataSource.class).getConnection().getMetaData();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("jdbc.connections.max").tags("name","dataSource").meter();
    }
);
  }
  @Test public void dataSourceInstrumentationCanBeDisabled(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withPropertyValues("management.metrics.enable.jdbc=false").run((context) -> {
      context.getBean(DataSource.class).getConnection().getMetaData();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.find("jdbc.connections.max").tags("name","dataSource").meter()).isNull();
    }
);
  }
  @Test public void allDataSourcesCanBeInstrumented(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withUserConfiguration(TwoDataSourcesConfiguration.class).run((context) -> {
      context.getBean("firstDataSource",DataSource.class).getConnection().getMetaData();
      context.getBean("secondOne",DataSource.class).getConnection().getMetaData();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("jdbc.connections.max").tags("name","first").meter();
      registry.get("jdbc.connections.max").tags("name","secondOne").meter();
    }
);
  }
  @Test public void autoConfiguredHikariDataSourceIsInstrumented(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean(DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("hikaricp.connections").meter();
    }
);
  }
  @Test public void autoConfiguredHikariDataSourceIsInstrumentedWhenUsingDataSourceInitialization(){
    this.contextRunner.withPropertyValues("spring.datasource.schema:db/create-custom-schema.sql").withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean(DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("hikaricp.connections").meter();
    }
);
  }
  @Test public void hikariCanBeInstrumentedAfterThePoolHasBeenSealed(){
    this.contextRunner.withUserConfiguration(HikariSealingConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      assertThat(context).hasNotFailed();
      context.getBean(DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.find("hikaricp.connections").meter()).isNotNull();
    }
);
  }
  @Test public void hikariDataSourceInstrumentationCanBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false").withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean(DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.find("hikaricp.connections").meter()).isNull();
    }
);
  }
  @Test public void allHikariDataSourcesCanBeInstrumented(){
    this.contextRunner.withUserConfiguration(TwoHikariDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean("firstDataSource",DataSource.class).getConnection();
      context.getBean("secondOne",DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("hikaricp.connections").tags("pool","firstDataSource").meter();
      registry.get("hikaricp.connections").tags("pool","secondOne").meter();
    }
);
  }
  @Test public void someHikariDataSourcesCanBeInstrumented(){
    this.contextRunner.withUserConfiguration(MixedDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean("firstDataSource",DataSource.class).getConnection();
      context.getBean("secondOne",DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.get("hikaricp.connections").meter().getId().getTags()).containsExactly(Tag.of("pool","firstDataSource"));
    }
);
  }
  @Test public void hikariProxiedDataSourceCanBeInstrumented(){
    this.contextRunner.withUserConfiguration(ProxiedHikariDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {
      context.getBean("proxiedDataSource",DataSource.class).getConnection();
      context.getBean("delegateDataSource",DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("hikaricp.connections").tags("pool","firstDataSource").meter();
      registry.get("hikaricp.connections").tags("pool","secondOne").meter();
    }
);
  }
  @Test public void hikariDataSourceIsInstrumentedWithoutMetadataProvider(){
    this.contextRunner.withUserConfiguration(OneHikariDataSourceConfiguration.class).run((context) -> {
      assertThat(context).doesNotHaveBean(DataSourcePoolMetadataProvider.class);
      context.getBean("hikariDataSource",DataSource.class).getConnection();
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.get("hikaricp.connections").meter().getId().getTags()).containsExactly(Tag.of("pool","hikariDataSource"));
    }
);
  }
  private static HikariDataSource createHikariDataSource(  String poolName){
    String url="jdbc:hsqldb:mem:test-" + UUID.randomUUID();
    HikariDataSource hikariDataSource=DataSourceBuilder.create().url(url).type(HikariDataSource.class).build();
    hikariDataSource.setPoolName(poolName);
    return hikariDataSource;
  }
@Configuration static class BaseConfiguration {
    @Bean public SimpleMeterRegistry simpleMeterRegistry(){
      return new SimpleMeterRegistry();
    }
  }
@Configuration static class TwoDataSourcesConfiguration {
    @Bean public DataSource firstDataSource(){
      return createDataSource();
    }
    @Bean public DataSource secondOne(){
      return createDataSource();
    }
    private DataSource createDataSource(){
      String url="jdbc:hsqldb:mem:test-" + UUID.randomUUID();
      return DataSourceBuilder.create().url(url).build();
    }
  }
@Configuration static class TwoHikariDataSourcesConfiguration {
    @Bean public DataSource firstDataSource(){
      return createHikariDataSource("firstDataSource");
    }
    @Bean public DataSource secondOne(){
      return createHikariDataSource("secondOne");
    }
  }
@Configuration static class ProxiedHikariDataSourcesConfiguration {
    @Bean public DataSource proxiedDataSource(){
      return (DataSource)new ProxyFactory(createHikariDataSource("firstDataSource")).getProxy();
    }
    @Bean public DataSource delegateDataSource(){
      return new DelegatingDataSource(createHikariDataSource("secondOne"));
    }
  }
@Configuration static class OneHikariDataSourceConfiguration {
    @Bean public DataSource hikariDataSource(){
      return createHikariDataSource("hikariDataSource");
    }
  }
@Configuration static class MixedDataSourcesConfiguration {
    @Bean public DataSource firstDataSource(){
      return createHikariDataSource("firstDataSource");
    }
    @Bean public DataSource secondOne(){
      return createTomcatDataSource();
    }
    private HikariDataSource createHikariDataSource(    String poolName){
      String url="jdbc:hsqldb:mem:test-" + UUID.randomUUID();
      HikariDataSource hikariDataSource=DataSourceBuilder.create().url(url).type(HikariDataSource.class).build();
      hikariDataSource.setPoolName(poolName);
      return hikariDataSource;
    }
    private org.apache.tomcat.jdbc.pool.DataSource createTomcatDataSource(){
      String url="jdbc:hsqldb:mem:test-" + UUID.randomUUID();
      return DataSourceBuilder.create().url(url).type(org.apache.tomcat.jdbc.pool.DataSource.class).build();
    }
  }
@Configuration static class HikariSealingConfiguration {
    @Bean public static HikariSealer hikariSealer(){
      return new HikariSealer();
    }
static class HikariSealer implements BeanPostProcessor, PriorityOrdered {
      @Override public int getOrder(){
        return Ordered.HIGHEST_PRECEDENCE;
      }
      @Override public Object postProcessAfterInitialization(      Object bean,      String beanName) throws BeansException {
        if (bean instanceof HikariDataSource) {
          try {
            ((HikariDataSource)bean).getConnection().close();
          }
 catch (          SQLException ex) {
            throw new IllegalStateException(ex);
          }
        }
        return bean;
      }
    }
  }
}
