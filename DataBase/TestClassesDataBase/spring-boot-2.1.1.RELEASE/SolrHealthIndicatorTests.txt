/** 
 * Tests for  {@link SolrHealthIndicator}
 * @author Andy Wilkinson
 */
public class SolrHealthIndicatorTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void solrIsUp() throws Exception {
    SolrClient solrClient=mock(SolrClient.class);
    given(solrClient.request(any(CoreAdminRequest.class),isNull())).willReturn(mockResponse(0));
    SolrHealthIndicator healthIndicator=new SolrHealthIndicator(solrClient);
    Health health=healthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails().get("status")).isEqualTo(0);
  }
  @Test public void solrIsUpAndRequestFailed() throws Exception {
    SolrClient solrClient=mock(SolrClient.class);
    given(solrClient.request(any(CoreAdminRequest.class),isNull())).willReturn(mockResponse(400));
    SolrHealthIndicator healthIndicator=new SolrHealthIndicator(solrClient);
    Health health=healthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
    assertThat(health.getDetails().get("status")).isEqualTo(400);
  }
  @Test public void solrIsDown() throws Exception {
    SolrClient solrClient=mock(SolrClient.class);
    given(solrClient.request(any(CoreAdminRequest.class),isNull())).willThrow(new IOException("Connection failed"));
    SolrHealthIndicator healthIndicator=new SolrHealthIndicator(solrClient);
    Health health=healthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
    assertThat((String)health.getDetails().get("error")).contains("Connection failed");
  }
  private NamedList<Object> mockResponse(  int status){
    NamedList<Object> response=new NamedList<>();
    NamedList<Object> headers=new NamedList<>();
    headers.add("status",status);
    response.add("responseHeader",headers);
    return response;
  }
}
