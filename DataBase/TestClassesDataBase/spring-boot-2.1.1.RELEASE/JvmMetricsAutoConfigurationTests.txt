/** 
 * Tests for  {@link JvmMetricsAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class JvmMetricsAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(JvmMetricsAutoConfiguration.class));
  @Test public void autoConfiguresJvmMetrics(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class).hasSingleBean(JvmMemoryMetrics.class).hasSingleBean(JvmThreadMetrics.class).hasSingleBean(ClassLoaderMetrics.class));
  }
  @Test @Deprecated public void allowsJvmMetricsToBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.binders.jvm.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(JvmGcMetrics.class).doesNotHaveBean(JvmMemoryMetrics.class).doesNotHaveBean(JvmThreadMetrics.class).doesNotHaveBean(ClassLoaderMetrics.class));
  }
  @Test public void allowsCustomJvmGcMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomJvmGcMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class).hasBean("customJvmGcMetrics").hasSingleBean(JvmMemoryMetrics.class).hasSingleBean(JvmThreadMetrics.class).hasSingleBean(ClassLoaderMetrics.class));
  }
  @Test public void allowsCustomJvmMemoryMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomJvmMemoryMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class).hasSingleBean(JvmMemoryMetrics.class).hasBean("customJvmMemoryMetrics").hasSingleBean(JvmThreadMetrics.class).hasSingleBean(ClassLoaderMetrics.class));
  }
  @Test public void allowsCustomJvmThreadMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomJvmThreadMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class).hasSingleBean(JvmMemoryMetrics.class).hasSingleBean(JvmThreadMetrics.class).hasSingleBean(ClassLoaderMetrics.class).hasBean("customJvmThreadMetrics"));
  }
  @Test public void allowsCustomClassLoaderMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomClassLoaderMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class).hasSingleBean(JvmMemoryMetrics.class).hasSingleBean(JvmThreadMetrics.class).hasSingleBean(ClassLoaderMetrics.class).hasBean("customClassLoaderMetrics"));
  }
@Configuration static class CustomJvmGcMetricsConfiguration {
    @Bean public JvmGcMetrics customJvmGcMetrics(){
      return new JvmGcMetrics();
    }
  }
@Configuration static class CustomJvmMemoryMetricsConfiguration {
    @Bean public JvmMemoryMetrics customJvmMemoryMetrics(){
      return new JvmMemoryMetrics();
    }
  }
@Configuration static class CustomJvmThreadMetricsConfiguration {
    @Bean public JvmThreadMetrics customJvmThreadMetrics(){
      return new JvmThreadMetrics();
    }
  }
@Configuration static class CustomClassLoaderMetricsConfiguration {
    @Bean public ClassLoaderMetrics customClassLoaderMetrics(){
      return new ClassLoaderMetrics();
    }
  }
}
