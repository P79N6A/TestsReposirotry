/** 
 * Tests for  {@link SystemEnvironmentPropertySourceEnvironmentPostProcessor}.
 * @author Madhura Bhave
 */
public class SystemEnvironmentPropertySourceEnvironmentPostProcessorTests {
  private ConfigurableEnvironment environment;
  @Before public void setUp(){
    this.environment=new StandardEnvironment();
  }
  @Test public void postProcessShouldReplaceSystemEnvironmentPropertySource(){
    SystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor=new SystemEnvironmentPropertySourceEnvironmentPostProcessor();
    postProcessor.postProcessEnvironment(this.environment,null);
    PropertySource<?> replaced=this.environment.getPropertySources().get("systemEnvironment");
    assertThat(replaced).isInstanceOf(OriginAwareSystemEnvironmentPropertySource.class);
  }
  @Test @SuppressWarnings("unchecked") public void replacedPropertySourceShouldBeOriginAware(){
    SystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor=new SystemEnvironmentPropertySourceEnvironmentPostProcessor();
    PropertySource<?> original=this.environment.getPropertySources().get("systemEnvironment");
    postProcessor.postProcessEnvironment(this.environment,null);
    OriginAwareSystemEnvironmentPropertySource replaced=(OriginAwareSystemEnvironmentPropertySource)this.environment.getPropertySources().get("systemEnvironment");
    Map<String,Object> originalMap=(Map<String,Object>)original.getSource();
    Map<String,Object> replacedMap=replaced.getSource();
    originalMap.forEach((key,value) -> {
      Object actual=replacedMap.get(key);
      assertThat(actual).isEqualTo(value);
      assertThat(replaced.getOrigin(key)).isInstanceOf(SystemEnvironmentOrigin.class);
    }
);
  }
  @Test public void replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin(){
    SystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor=new SystemEnvironmentPropertySourceEnvironmentPostProcessor();
    postProcessor.postProcessEnvironment(this.environment,null);
    OriginAwareSystemEnvironmentPropertySource replaced=(OriginAwareSystemEnvironmentPropertySource)this.environment.getPropertySources().get("systemEnvironment");
    assertThat(replaced.getOrigin("NON_EXISTENT")).isNull();
  }
  @Test public void replacedPropertySourceShouldResolveProperty(){
    SystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor=new SystemEnvironmentPropertySourceEnvironmentPostProcessor();
    Map<String,Object> source=Collections.singletonMap("FOO_BAR_BAZ","hello");
    this.environment.getPropertySources().replace("systemEnvironment",new SystemEnvironmentPropertySource("systemEnvironment",source));
    postProcessor.postProcessEnvironment(this.environment,null);
    OriginAwareSystemEnvironmentPropertySource replaced=(OriginAwareSystemEnvironmentPropertySource)this.environment.getPropertySources().get("systemEnvironment");
    SystemEnvironmentOrigin origin=(SystemEnvironmentOrigin)replaced.getOrigin("foo.bar.baz");
    assertThat(origin.getProperty()).isEqualTo("FOO_BAR_BAZ");
    assertThat(replaced.getProperty("foo.bar.baz")).isEqualTo("hello");
  }
}
