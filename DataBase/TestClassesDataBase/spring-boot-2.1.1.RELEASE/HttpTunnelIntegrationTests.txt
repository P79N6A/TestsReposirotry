/** 
 * Simple integration tests for HTTP tunneling.
 * @author Phillip Webb
 */
public class HttpTunnelIntegrationTests {
  @Test public void httpServerDirect(){
    AnnotationConfigServletWebServerApplicationContext context=new AnnotationConfigServletWebServerApplicationContext();
    context.register(ServerConfiguration.class);
    context.refresh();
    String url="http://localhost:" + context.getWebServer().getPort() + "/hello";
    ResponseEntity<String> entity=new TestRestTemplate().getForEntity(url,String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).isEqualTo("Hello World");
    context.close();
  }
  @Test public void viaTunnel(){
    AnnotationConfigServletWebServerApplicationContext serverContext=new AnnotationConfigServletWebServerApplicationContext();
    serverContext.register(ServerConfiguration.class);
    serverContext.refresh();
    AnnotationConfigApplicationContext tunnelContext=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("server.port:" + serverContext.getWebServer().getPort()).applyTo(tunnelContext);
    tunnelContext.register(TunnelConfiguration.class);
    tunnelContext.refresh();
    String url="http://localhost:" + tunnelContext.getBean(TestTunnelClient.class).port + "/hello";
    ResponseEntity<String> entity=new TestRestTemplate().getForEntity(url,String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).isEqualTo("Hello World");
    serverContext.close();
    tunnelContext.close();
  }
@Configuration @EnableWebMvc static class ServerConfiguration {
    @Bean public ServletWebServerFactory container(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public DispatcherServlet dispatcherServlet(){
      return new DispatcherServlet();
    }
    @Bean public MyController myController(){
      return new MyController();
    }
    @Bean public DispatcherFilter filter(    AnnotationConfigServletWebServerApplicationContext context){
      TargetServerConnection connection=new SocketTargetServerConnection(() -> context.getWebServer().getPort());
      HttpTunnelServer server=new HttpTunnelServer(connection);
      HandlerMapper mapper=new UrlHandlerMapper("/httptunnel",new HttpTunnelServerHandler(server));
      Collection<HandlerMapper> mappers=Collections.singleton(mapper);
      Dispatcher dispatcher=new Dispatcher(AccessManager.PERMIT_ALL,mappers);
      return new DispatcherFilter(dispatcher);
    }
  }
static class TunnelConfiguration {
    @Bean public TunnelClient tunnelClient(    @Value("${server.port}") int serverPort){
      String url="http://localhost:" + serverPort + "/httptunnel";
      TunnelConnection connection=new HttpTunnelConnection(url,new SimpleClientHttpRequestFactory());
      return new TestTunnelClient(0,connection);
    }
static class TestTunnelClient extends TunnelClient {
      private int port;
      TestTunnelClient(      int listenPort,      TunnelConnection tunnelConnection){
        super(listenPort,tunnelConnection);
      }
      @Override public int start() throws IOException {
        this.port=super.start();
        return this.port;
      }
    }
  }
@RestController static class MyController {
    @RequestMapping("/hello") public String hello(){
      return "Hello World";
    }
  }
}
