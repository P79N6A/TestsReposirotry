/** 
 * Tests for  {@link LocalHostWebConnectionHtmlUnitDriver}.
 * @author Phillip Webb
 */
public class LocalHostWebConnectionHtmlUnitDriverTests {
  @Mock private WebClient webClient;
  public LocalHostWebConnectionHtmlUnitDriverTests(){
    MockitoAnnotations.initMocks(this);
    given(this.webClient.getOptions()).willReturn(new WebClientOptions());
  }
  @Test public void createWhenEnvironmentIsNullWillThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostWebConnectionHtmlUnitDriver(null)).withMessageContaining("Environment must not be null");
  }
  @Test public void createWithJavascriptFlagWhenEnvironmentIsNullWillThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostWebConnectionHtmlUnitDriver(null,true)).withMessageContaining("Environment must not be null");
  }
  @Test public void createWithBrowserVersionWhenEnvironmentIsNullWillThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostWebConnectionHtmlUnitDriver(null,BrowserVersion.CHROME)).withMessageContaining("Environment must not be null");
  }
  @Test public void createWithCapabilitiesWhenEnvironmentIsNullWillThrowException(){
    Capabilities capabilities=mock(Capabilities.class);
    given(capabilities.getBrowserName()).willReturn("htmlunit");
    given(capabilities.getVersion()).willReturn("chrome");
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostWebConnectionHtmlUnitDriver(null,capabilities)).withMessageContaining("Environment must not be null");
  }
  @Test public void getWhenUrlIsRelativeAndNoPortWillUseLocalhost8080() throws Exception {
    MockEnvironment environment=new MockEnvironment();
    LocalHostWebConnectionHtmlUnitDriver driver=new TestLocalHostWebConnectionHtmlUnitDriver(environment);
    driver.get("/test");
    verify(this.webClient).getPage(any(WebWindow.class),requestToUrl(new URL("http://localhost:8080/test")));
  }
  @Test public void getWhenUrlIsRelativeAndHasPortWillUseLocalhostPort() throws Exception {
    MockEnvironment environment=new MockEnvironment();
    environment.setProperty("local.server.port","8181");
    LocalHostWebConnectionHtmlUnitDriver driver=new TestLocalHostWebConnectionHtmlUnitDriver(environment);
    driver.get("/test");
    verify(this.webClient).getPage(any(WebWindow.class),requestToUrl(new URL("http://localhost:8181/test")));
  }
  private WebRequest requestToUrl(  URL url){
    return argThat(new WebRequestUrlArgumentMatcher(url));
  }
public class TestLocalHostWebConnectionHtmlUnitDriver extends LocalHostWebConnectionHtmlUnitDriver {
    public TestLocalHostWebConnectionHtmlUnitDriver(    Environment environment){
      super(environment);
    }
    @Override public WebClient getWebClient(){
      return LocalHostWebConnectionHtmlUnitDriverTests.this.webClient;
    }
  }
private static final class WebRequestUrlArgumentMatcher implements ArgumentMatcher<WebRequest> {
    private final URL expectedUrl;
    private WebRequestUrlArgumentMatcher(    URL expectedUrl){
      this.expectedUrl=expectedUrl;
    }
    @Override public boolean matches(    WebRequest argument){
      return argument.getUrl().equals(this.expectedUrl);
    }
  }
}
