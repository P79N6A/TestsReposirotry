/** 
 * Tests for  {@link ApplicationPid}.
 * @author Phillip Webb
 */
public class ApplicationPidTests {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Test public void toStringWithPid(){
    assertThat(new ApplicationPid("123").toString()).isEqualTo("123");
  }
  @Test public void toStringWithoutPid(){
    assertThat(new ApplicationPid(null).toString()).isEqualTo("???");
  }
  @Test public void throwIllegalStateWritingMissingPid() throws Exception {
    ApplicationPid pid=new ApplicationPid(null);
    assertThatIllegalStateException().isThrownBy(() -> pid.write(this.temporaryFolder.newFile())).withMessageContaining("No PID available");
  }
  @Test public void writePid() throws Exception {
    ApplicationPid pid=new ApplicationPid("123");
    File file=this.temporaryFolder.newFile();
    pid.write(file);
    String actual=FileCopyUtils.copyToString(new FileReader(file));
    assertThat(actual).isEqualTo("123");
  }
  @Test public void writeNewPid() throws Exception {
    ApplicationPid pid=new ApplicationPid("123");
    File file=this.temporaryFolder.newFile();
    file.delete();
    pid.write(file);
    String actual=FileCopyUtils.copyToString(new FileReader(file));
    assertThat(actual).isEqualTo("123");
  }
  @Test public void getPidFromJvm(){
    assertThat(new ApplicationPid().toString()).isNotEmpty();
  }
}
