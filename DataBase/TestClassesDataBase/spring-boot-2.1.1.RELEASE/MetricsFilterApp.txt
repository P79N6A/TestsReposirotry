@Configuration @EnableWebMvc @Import({Controller1.class,Controller2.class}) static class MetricsFilterApp {
  @Bean Clock micrometerClock(){
    return new MockClock();
  }
  @Primary @Bean MeterRegistry meterRegistry(  Collection<MeterRegistry> registries,  Clock clock){
    CompositeMeterRegistry composite=new CompositeMeterRegistry(clock);
    registries.forEach(composite::add);
    return composite;
  }
  @Bean SimpleMeterRegistry simple(  Clock clock){
    return new SimpleMeterRegistry(SimpleConfig.DEFAULT,clock);
  }
  @Bean PrometheusMeterRegistry prometheus(  Clock clock){
    PrometheusMeterRegistry r=new PrometheusMeterRegistry(PrometheusConfig.DEFAULT,new CollectorRegistry(),clock);
    r.config().meterFilter(new MeterFilter(){
      @Override @NonNull public MeterFilterReply accept(      @NonNull Meter.Id id){
        for (        Tag tag : id.getTags()) {
          if (tag.getKey().equals("uri") && (tag.getValue().contains("histogram") || tag.getValue().contains("percentiles"))) {
            return MeterFilterReply.ACCEPT;
          }
        }
        return MeterFilterReply.DENY;
      }
    }
);
    return r;
  }
  @Bean RedirectAndNotFoundFilter redirectAndNotFoundFilter(){
    return new RedirectAndNotFoundFilter();
  }
  @Bean(name="callableBarrier") CyclicBarrier callableBarrier(){
    return new CyclicBarrier(2);
  }
  @Bean(name="completableFutureBarrier") CyclicBarrier completableFutureBarrier(){
    return new CyclicBarrier(2);
  }
  @Bean WebMvcMetricsFilter webMetricsFilter(  MeterRegistry registry,  WebApplicationContext ctx){
    return new WebMvcMetricsFilter(registry,new DefaultWebMvcTagsProvider(),"http.server.requests",true);
  }
}
