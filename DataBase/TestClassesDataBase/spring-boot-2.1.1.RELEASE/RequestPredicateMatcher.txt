private static final class RequestPredicateMatcher {
  private final String path;
  private List<String> produces;
  private List<String> consumes;
  private WebEndpointHttpMethod httpMethod;
  private RequestPredicateMatcher(  String path){
    this.path=path;
  }
  public RequestPredicateMatcher produces(  String... mediaTypes){
    this.produces=Arrays.asList(mediaTypes);
    return this;
  }
  public RequestPredicateMatcher consumes(  String... mediaTypes){
    this.consumes=Arrays.asList(mediaTypes);
    return this;
  }
  private RequestPredicateMatcher httpMethod(  WebEndpointHttpMethod httpMethod){
    this.httpMethod=httpMethod;
    return this;
  }
  private boolean matches(  WebOperationRequestPredicate predicate){
    return (this.path == null || this.path.equals(predicate.getPath())) && (this.httpMethod == null || this.httpMethod == predicate.getHttpMethod()) && (this.produces == null || this.produces.equals(new ArrayList<>(predicate.getProduces())))&& (this.consumes == null || this.consumes.equals(new ArrayList<>(predicate.getConsumes())));
  }
  @Override public String toString(){
    return "Request predicate with path = '" + this.path + "', httpMethod = '"+ this.httpMethod+ "', produces = '"+ this.produces+ "'";
  }
}
