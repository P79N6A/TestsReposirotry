/** 
 * Tests for  {@link TomcatMetricsAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class TomcatMetricsAutoConfigurationTests {
  @Test public void autoConfiguresTomcatMetricsWithEmbeddedServletTomcat(){
    new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,ServletWebServerFactoryAutoConfiguration.class)).withUserConfiguration(ServletWebServerConfiguration.class,MeterRegistryConfiguration.class).run((context) -> {
      context.publishEvent(new ApplicationStartedEvent(new SpringApplication(),null,context.getSourceApplicationContext()));
      assertThat(context).hasSingleBean(TomcatMetricsBinder.class);
      SimpleMeterRegistry registry=context.getBean(SimpleMeterRegistry.class);
      assertThat(registry.find("tomcat.sessions.active.max").meter()).isNotNull();
      assertThat(registry.find("tomcat.threads.current").meter()).isNotNull();
    }
);
  }
  @Test public void autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat(){
    new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,ReactiveWebServerFactoryAutoConfiguration.class)).withUserConfiguration(ReactiveWebServerConfiguration.class,MeterRegistryConfiguration.class).run((context) -> {
      context.publishEvent(new ApplicationStartedEvent(new SpringApplication(),null,context.getSourceApplicationContext()));
      SimpleMeterRegistry registry=context.getBean(SimpleMeterRegistry.class);
      assertThat(registry.find("tomcat.sessions.active.max").meter()).isNotNull();
      assertThat(registry.find("tomcat.threads.current").meter()).isNotNull();
    }
);
  }
  @Test public void autoConfiguresTomcatMetricsWithStandaloneTomcat(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(TomcatMetricsBinder.class));
  }
  @Test public void allowsCustomTomcatMetricsBinderToBeUsed(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class,CustomTomcatMetricsBinder.class).run((context) -> assertThat(context).hasSingleBean(TomcatMetricsBinder.class).hasBean("customTomcatMetricsBinder"));
  }
  @Test public void allowsCustomTomcatMetricsToBeUsed(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class,CustomTomcatMetrics.class).run((context) -> assertThat(context).doesNotHaveBean(TomcatMetricsBinder.class).hasBean("customTomcatMetrics"));
  }
@Configuration static class MeterRegistryConfiguration {
    @Bean public SimpleMeterRegistry meterRegistry(){
      return new SimpleMeterRegistry();
    }
  }
@Configuration static class ServletWebServerConfiguration {
    @Bean public TomcatServletWebServerFactory tomcatFactory(){
      return new TomcatServletWebServerFactory(0);
    }
  }
@Configuration static class ReactiveWebServerConfiguration {
    @Bean public TomcatReactiveWebServerFactory tomcatFactory(){
      return new TomcatReactiveWebServerFactory(0);
    }
    @Bean public HttpHandler httpHandler(){
      return mock(HttpHandler.class);
    }
  }
@Configuration static class CustomTomcatMetrics {
    @Bean public TomcatMetrics customTomcatMetrics(){
      return new TomcatMetrics(null,Collections.emptyList());
    }
  }
@Configuration static class CustomTomcatMetricsBinder {
    @Bean public TomcatMetricsBinder customTomcatMetricsBinder(    MeterRegistry meterRegistry){
      return new TomcatMetricsBinder(meterRegistry);
    }
  }
}
