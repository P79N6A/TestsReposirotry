/** 
 * A  {@link TestRule} for running a Gradle build using {@link GradleRunner}.
 * @author Andy Wilkinson
 */
public class GradleBuild implements TestRule {
  private static final Pattern GRADLE_VERSION_PATTERN=Pattern.compile("\\[Gradle .+\\]");
  private final TemporaryFolder temp=new TemporaryFolder();
  private final Dsl dsl;
  private File projectDir;
  private String script;
  private String gradleVersion;
  public GradleBuild(){
    this(Dsl.GROOVY);
  }
  public GradleBuild(  Dsl dsl){
    this.dsl=dsl;
  }
  public Dsl getDsl(){
    return this.dsl;
  }
  @Override public Statement apply(  Statement base,  Description description){
    URL scriptUrl=findDefaultScript(description);
    if (scriptUrl != null) {
      script(scriptUrl.getFile());
    }
    return this.temp.apply(new Statement(){
      @Override public void evaluate() throws Throwable {
        before();
        try {
          base.evaluate();
        }
  finally {
          after();
        }
      }
    }
,description);
  }
  private URL findDefaultScript(  Description description){
    URL scriptUrl=getScriptForTestMethod(description);
    if (scriptUrl != null) {
      return scriptUrl;
    }
    return getScriptForTestClass(description.getTestClass());
  }
  private URL getScriptForTestMethod(  Description description){
    String name=description.getTestClass().getSimpleName() + "-" + removeGradleVersion(description.getMethodName())+ this.dsl.getExtension();
    return description.getTestClass().getResource(name);
  }
  private String removeGradleVersion(  String methodName){
    return GRADLE_VERSION_PATTERN.matcher(methodName).replaceAll("").trim();
  }
  private URL getScriptForTestClass(  Class<?> testClass){
    return testClass.getResource(testClass.getSimpleName() + this.dsl.getExtension());
  }
  private void before() throws IOException {
    this.projectDir=this.temp.newFolder();
  }
  private void after(){
    GradleBuild.this.script=null;
  }
  private List<File> pluginClasspath(){
    return Arrays.asList(new File("bin"),new File("build/classes/java/main"),new File("build/resources/main"),new File(pathOfJarContaining(LaunchScript.class)),new File(pathOfJarContaining(ClassVisitor.class)),new File(pathOfJarContaining(DependencyManagementPlugin.class)),new File(pathOfJarContaining(PropertiesKt.class)),new File(pathOfJarContaining(KotlinCompilerRunner.class)),new File(pathOfJarContaining(KotlinPlugin.class)),new File(pathOfJarContaining(KotlinGradleSubplugin.class)),new File(pathOfJarContaining(ArchiveEntry.class)));
  }
  private String pathOfJarContaining(  Class<?> type){
    return type.getProtectionDomain().getCodeSource().getLocation().getPath();
  }
  public GradleBuild script(  String script){
    this.script=script.endsWith(this.dsl.getExtension()) ? script : script + this.dsl.getExtension();
    return this;
  }
  public BuildResult build(  String... arguments){
    try {
      return prepareRunner(arguments).build();
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
  }
  public BuildResult buildAndFail(  String... arguments){
    try {
      return prepareRunner(arguments).buildAndFail();
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
  }
  public GradleRunner prepareRunner(  String... arguments) throws IOException {
    String scriptContent=FileCopyUtils.copyToString(new FileReader(this.script)).replace("{version}",getBootVersion()).replace("{dependency-management-plugin-version}",getDependencyManagementPluginVersion());
    FileCopyUtils.copy(scriptContent,new FileWriter(new File(this.projectDir,"build" + this.dsl.getExtension())));
    GradleRunner gradleRunner=GradleRunner.create().withProjectDir(this.projectDir).withPluginClasspath(pluginClasspath());
    if (this.dsl != Dsl.KOTLIN) {
      gradleRunner.withDebug(true);
    }
    if (this.gradleVersion != null) {
      gradleRunner.withGradleVersion(this.gradleVersion);
    }
 else     if (this.dsl == Dsl.KOTLIN) {
      gradleRunner.withGradleVersion("4.10.2");
    }
    List<String> allArguments=new ArrayList<>();
    allArguments.add("-PbootVersion=" + getBootVersion());
    allArguments.add("--stacktrace");
    allArguments.addAll(Arrays.asList(arguments));
    return gradleRunner.withArguments(allArguments);
  }
  public File getProjectDir(){
    return this.projectDir;
  }
  public void setProjectDir(  File projectDir){
    this.projectDir=projectDir;
  }
  public GradleBuild gradleVersion(  String version){
    this.gradleVersion=version;
    return this;
  }
  public String getGradleVersion(){
    return this.gradleVersion;
  }
  private static String getBootVersion(){
    return evaluateExpression("/*[local-name()='project']/*[local-name()='parent']/*[local-name()='version']" + "/text()");
  }
  private static String getDependencyManagementPluginVersion(){
    try (FileReader pomReader=new FileReader(".flattened-pom.xml")){
      Document pom=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(pomReader));
      NodeList dependencyElements=pom.getElementsByTagName("dependency");
      for (int i=0; i < dependencyElements.getLength(); i++) {
        Element dependency=(Element)dependencyElements.item(i);
        if (dependency.getElementsByTagName("artifactId").item(0).getTextContent().equals("dependency-management-plugin")) {
          return dependency.getElementsByTagName("version").item(0).getTextContent();
        }
      }
      throw new IllegalStateException("dependency management plugin version not found");
    }
 catch (    Exception ex) {
      throw new IllegalStateException("Failed to find dependency management plugin version",ex);
    }
  }
  private static String evaluateExpression(  String expression){
    try (FileReader pomReader=new FileReader(".flattened-pom.xml")){
      XPathFactory xPathFactory=XPathFactory.newInstance();
      XPath xpath=xPathFactory.newXPath();
      XPathExpression expr=xpath.compile(expression);
      String version=expr.evaluate(new InputSource(pomReader));
      return version;
    }
 catch (    Exception ex) {
      throw new IllegalStateException("Failed to evaluate expression",ex);
    }
  }
}
