/** 
 * Tests for  {@link ManagementWebSecurityAutoConfiguration}.
 * @author Madhura Bhave
 */
public class ManagementWebSecurityAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,EnvironmentEndpointAutoConfiguration.class,EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,SecurityAutoConfiguration.class,ManagementWebSecurityAutoConfiguration.class));
  @Test public void permitAllForHealth(){
    this.contextRunner.run((context) -> {
      int status=getResponseStatus(context,"/actuator/health");
      assertThat(status).isEqualTo(HttpStatus.SC_OK);
    }
);
  }
  @Test public void permitAllForInfo(){
    this.contextRunner.run((context) -> {
      int status=getResponseStatus(context,"/actuator/info");
      assertThat(status).isEqualTo(HttpStatus.SC_OK);
    }
);
  }
  @Test public void securesEverythingElse(){
    this.contextRunner.run((context) -> {
      int status=getResponseStatus(context,"/actuator");
      assertThat(status).isEqualTo(HttpStatus.SC_UNAUTHORIZED);
      status=getResponseStatus(context,"/foo");
      assertThat(status).isEqualTo(HttpStatus.SC_UNAUTHORIZED);
    }
);
  }
  @Test public void usesMatchersBasedOffConfiguredActuatorBasePath(){
    this.contextRunner.withPropertyValues("management.endpoints.web.base-path=/").run((context) -> {
      int status=getResponseStatus(context,"/health");
      assertThat(status).isEqualTo(HttpStatus.SC_OK);
    }
);
  }
  @Test public void backOffIfCustomSecurityIsAdded(){
    this.contextRunner.withUserConfiguration(CustomSecurityConfiguration.class).run((context) -> {
      int status=getResponseStatus(context,"/actuator/health");
      assertThat(status).isEqualTo(HttpStatus.SC_UNAUTHORIZED);
      status=getResponseStatus(context,"/foo");
      assertThat(status).isEqualTo(HttpStatus.SC_OK);
    }
);
  }
  private int getResponseStatus(  AssertableWebApplicationContext context,  String path) throws IOException, javax.servlet.ServletException {
    FilterChainProxy filterChainProxy=context.getBean(FilterChainProxy.class);
    MockServletContext servletContext=new MockServletContext();
    MockHttpServletResponse response=new MockHttpServletResponse();
    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,context);
    MockHttpServletRequest request=new MockHttpServletRequest(servletContext);
    request.setServletPath(path);
    request.setMethod("GET");
    filterChainProxy.doFilter(request,response,new MockFilterChain());
    return response.getStatus();
  }
@Configuration static class CustomSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override protected void configure(    HttpSecurity http) throws Exception {
      http.authorizeRequests().antMatchers("/foo").permitAll().anyRequest().authenticated().and().formLogin().and().httpBasic();
    }
  }
}
