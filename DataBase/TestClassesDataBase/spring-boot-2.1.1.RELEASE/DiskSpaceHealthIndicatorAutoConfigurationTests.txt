/** 
 * Tests for  {@link DiskSpaceHealthIndicatorAutoConfiguration}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class DiskSpaceHealthIndicatorAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(DiskSpaceHealthIndicatorAutoConfiguration.class,HealthIndicatorAutoConfiguration.class));
  @Test public void runShouldCreateIndicator(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class).doesNotHaveBean(ApplicationHealthIndicator.class));
  }
  @Test public void thresholdMustBePositive(){
    this.contextRunner.withPropertyValues("management.health.diskspace.threshold=-10MB").run((context) -> assertThat(context).hasFailed().getFailure().hasMessageContaining("Failed to bind properties under 'management.health.diskspace'"));
  }
  @Test public void thresholdCanBeCustomized(){
    this.contextRunner.withPropertyValues("management.health.diskspace.threshold=20MB").run((context) -> {
      assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class);
      assertThat(context.getBean(DiskSpaceHealthIndicator.class)).hasFieldOrPropertyWithValue("threshold",DataSize.ofMegabytes(20));
    }
);
  }
  @Test public void runWhenDisabledShouldNotCreateIndicator(){
    this.contextRunner.withPropertyValues("management.health.diskspace.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(DiskSpaceHealthIndicator.class).hasSingleBean(ApplicationHealthIndicator.class));
  }
}
