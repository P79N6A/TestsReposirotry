/** 
 * Integration tests for advanced configuration of  {@link AutoConfigureRestDocs} with MockMVC.
 * @author Andy Wilkinson
 * @author Eddú Meléndez
 */
@RunWith(SpringRunner.class) @WebMvcTest(controllers=RestDocsTestController.class) @WithMockUser @AutoConfigureRestDocs public class MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests {
  @Before public void deleteSnippets(){
    FileSystemUtils.deleteRecursively(new File("target/generated-snippets"));
  }
  @Autowired private MockMvc mvc;
  @Autowired private RestDocumentationResultHandler documentationHandler;
  @Test public void snippetGeneration() throws Exception {
    this.mvc.perform(get("/")).andDo(this.documentationHandler.document(links(linkWithRel("self").description("Canonical location of this resource"))));
    File defaultSnippetsDir=new File("target/generated-snippets/snippet-generation");
    assertThat(defaultSnippetsDir).exists();
    assertThat(new File(defaultSnippetsDir,"curl-request.md")).has(contentContaining("'http://localhost:8080/'"));
    assertThat(new File(defaultSnippetsDir,"links.md")).isFile();
    assertThat(new File(defaultSnippetsDir,"response-fields.md")).isFile();
  }
  private Condition<File> contentContaining(  String toContain){
    return new ContentContainingCondition(toContain);
  }
@TestConfiguration public static class CustomizationConfiguration {
    @Bean public RestDocumentationResultHandler restDocumentation(){
      return MockMvcRestDocumentation.document("{method-name}");
    }
    @Bean public RestDocsMockMvcConfigurationCustomizer templateFormatCustomizer(){
      return (configurer) -> configurer.snippets().withTemplateFormat(TemplateFormats.markdown());
    }
    @Bean public RestDocsMockMvcConfigurationCustomizer defaultSnippetsCustomizer(){
      return (configurer) -> configurer.snippets().withAdditionalDefaults(responseFields(fieldWithPath("_links.self").description("Main URL")));
    }
  }
}
