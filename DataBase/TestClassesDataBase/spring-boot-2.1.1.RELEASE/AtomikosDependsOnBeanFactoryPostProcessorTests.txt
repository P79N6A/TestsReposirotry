/** 
 * Tests for  {@link AtomikosDependsOnBeanFactoryPostProcessor}.
 * @author Phillip Webb
 */
public class AtomikosDependsOnBeanFactoryPostProcessorTests {
  private AnnotationConfigApplicationContext context;
  @Test public void setsDependsOn(){
    this.context=new AnnotationConfigApplicationContext(Config.class);
    assertDependsOn("dataSource");
    assertDependsOn("connectionFactory");
    assertDependsOn("userTransactionManager","dataSource","connectionFactory");
    assertDependsOn("messageDrivenContainer","userTransactionManager");
    this.context.close();
  }
  private void assertDependsOn(  String bean,  String... expected){
    BeanDefinition definition=this.context.getBeanDefinition(bean);
    if (definition.getDependsOn() == null) {
      assertThat(expected).as("No dependsOn expected for " + bean).isEmpty();
      return;
    }
    HashSet<String> dependsOn=new HashSet<>(Arrays.asList(definition.getDependsOn()));
    assertThat(dependsOn).isEqualTo(new HashSet<>(Arrays.asList(expected)));
  }
@Configuration static class Config {
    @Bean public DataSource dataSource(){
      return mock(DataSource.class);
    }
    @Bean public ConnectionFactory connectionFactory(){
      return mock(ConnectionFactory.class);
    }
    @Bean public UserTransactionManager userTransactionManager(){
      return mock(UserTransactionManager.class);
    }
    @Bean public MessageDrivenContainer messageDrivenContainer(){
      return mock(MessageDrivenContainer.class);
    }
    @Bean public static AtomikosDependsOnBeanFactoryPostProcessor atomikosPostProcessor(){
      return new AtomikosDependsOnBeanFactoryPostProcessor();
    }
  }
}
