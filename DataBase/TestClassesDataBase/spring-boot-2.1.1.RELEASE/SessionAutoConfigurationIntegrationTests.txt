/** 
 * Integration tests for  {@link SessionAutoConfiguration}.
 * @author Stephane Nicoll
 */
public class SessionAutoConfigurationIntegrationTests extends AbstractSessionAutoConfigurationTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,SessionAutoConfiguration.class)).withPropertyValues("spring.datasource.generate-unique-name=true");
  @Test public void severalCandidatesWithNoSessionStore(){
    this.contextRunner.withUserConfiguration(HazelcastConfiguration.class).run((context) -> {
      assertThat(context).hasFailed();
      assertThat(context).getFailure().hasCauseInstanceOf(NonUniqueSessionRepositoryException.class);
      assertThat(context).getFailure().hasMessageContaining("Multiple session repository candidates are available");
      assertThat(context).getFailure().hasMessageContaining("set the 'spring.session.store-type' property accordingly");
    }
);
  }
  @Test public void severalCandidatesWithWrongSessionStore(){
    this.contextRunner.withUserConfiguration(HazelcastConfiguration.class).withPropertyValues("spring.session.store-type=redis").run((context) -> {
      assertThat(context).hasFailed();
      assertThat(context).getFailure().hasCauseInstanceOf(SessionRepositoryUnavailableException.class);
      assertThat(context).getFailure().hasMessageContaining("No session repository could be auto-configured");
      assertThat(context).getFailure().hasMessageContaining("session store type is 'redis'");
    }
);
  }
  @Test public void severalCandidatesWithValidSessionStore(){
    this.contextRunner.withUserConfiguration(HazelcastConfiguration.class).withPropertyValues("spring.session.store-type=jdbc").run((context) -> validateSessionRepository(context,JdbcOperationsSessionRepository.class));
  }
@Configuration static class HazelcastConfiguration {
    @Bean @SuppressWarnings("unchecked") public HazelcastInstance hazelcastInstance(){
      IMap<Object,Object> map=mock(IMap.class);
      HazelcastInstance mock=mock(HazelcastInstance.class);
      given(mock.getMap("spring:session:sessions")).willReturn(map);
      given(mock.getMap("foo:bar:biz")).willReturn(map);
      return mock;
    }
  }
}
