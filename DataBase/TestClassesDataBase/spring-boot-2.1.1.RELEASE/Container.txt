/** 
 * {@link TestRule} for working with an optional Docker environment. Spins up a{@link GenericContainer} if a valid docker environment is found.
 * @author Madhura Bhave
 * @author Phillip Webb
 */
class Container implements TestRule {
  private final int port;
  private final Supplier<GenericContainer<?>> containerFactory;
  private GenericContainer<?> container;
  <T extends GenericContainer<T>>Container(  String dockerImageName,  int port){
    this(dockerImageName,port,null);
  }
  @SuppressWarnings({"unchecked","resource"}) <T extends GenericContainer<T>>Container(  String dockerImageName,  int port,  Consumer<T> customizer){
    this.port=port;
    this.containerFactory=() -> {
      T container=(T)new GenericContainer<>(dockerImageName).withExposedPorts(port);
      if (customizer != null) {
        customizer.accept(container);
      }
      return container;
    }
;
  }
  @Override public Statement apply(  Statement base,  Description description){
    try {
      DockerClientFactory.instance().client();
    }
 catch (    Throwable ex) {
      return new SkipStatement();
    }
    this.container=this.containerFactory.get();
    return ((FailureDetectingExternalResource)this.container).apply(base,description);
  }
  public int getMappedPort(){
    return this.container.getMappedPort(this.port);
  }
private static class SkipStatement extends Statement {
    @Override public void evaluate(){
      throw new AssumptionViolatedException("Could not find a valid Docker environment.");
    }
  }
}
