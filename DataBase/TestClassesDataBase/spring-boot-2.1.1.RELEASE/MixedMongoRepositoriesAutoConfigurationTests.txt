/** 
 * Tests for  {@link MongoRepositoriesAutoConfiguration}.
 * @author Dave Syer
 * @author Oliver Gierke
 */
public class MixedMongoRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    this.context.close();
  }
  @Test public void testDefaultRepositoryConfiguration(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context);
    this.context.register(TestConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CountryRepository.class)).isNotNull();
  }
  @Test public void testMixedRepositoryConfiguration(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context);
    this.context.register(MixedConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CountryRepository.class)).isNotNull();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test public void testJpaRepositoryConfigurationWithMongoTemplate(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context);
    this.context.register(JpaConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test public void testJpaRepositoryConfigurationWithMongoOverlap(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context);
    this.context.register(OverlapConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
  @Test public void testJpaRepositoryConfigurationWithMongoOverlapDisabled(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never","spring.data.mongodb.repositories.type:none").applyTo(this.context);
    this.context.register(OverlapConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
  }
@Configuration @TestAutoConfigurationPackage(MongoAutoConfigurationTests.class) @EnableMongoRepositories(basePackageClasses=Country.class) protected static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(MongoAutoConfigurationTests.class) @EnableMongoRepositories(basePackageClasses=Country.class) @EntityScan(basePackageClasses=City.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class MixedConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(MongoAutoConfigurationTests.class) @EntityScan(basePackageClasses=City.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class JpaConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(CityRepository.class) @EnableJpaRepositories(basePackageClasses=CityRepository.class) protected static class OverlapConfiguration {
  }
@Configuration @Import(Registrar.class) protected static class BaseConfiguration {
  }
protected static class Registrar implements ImportSelector {
    @Override public String[] selectImports(    AnnotationMetadata importingClassMetadata){
      List<String> names=new ArrayList<>();
      for (      Class<?> type : new Class<?>[]{DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class,JpaRepositoriesAutoConfiguration.class,MongoAutoConfiguration.class,MongoDataAutoConfiguration.class,MongoRepositoriesAutoConfiguration.class}) {
        names.add(type.getName());
      }
      return StringUtils.toStringArray(names);
    }
  }
}
