/** 
 * Tests for  {@link WelcomePageHandlerMapping}.
 * @author Andy Wilkinson
 */
public class WelcomePageHandlerMappingTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withUserConfiguration(HandlerMappingConfiguration.class).withConfiguration(AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class));
  @Test public void isOrderedAtLowPriority(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> {
      WelcomePageHandlerMapping handler=context.getBean(WelcomePageHandlerMapping.class);
      assertThat(handler.getOrder()).isEqualTo(2);
    }
);
  }
  @Test public void handlesRequestForStaticPageThatAcceptsTextHtml(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html")));
  }
  @Test public void handlesRequestForStaticPageThatAcceptsAll(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html")));
  }
  @Test public void doesNotHandleRequestThatDoesNotAcceptTextHtml(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.APPLICATION_JSON)).andExpect(status().isNotFound()));
  }
  @Test public void handlesRequestWithNoAcceptHeader(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/")).andExpect(status().isOk()).andExpect(forwardedUrl("index.html")));
  }
  @Test public void handlesRequestWithEmptyAcceptHeader(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").header(HttpHeaders.ACCEPT,"")).andExpect(status().isOk()).andExpect(forwardedUrl("index.html")));
  }
  @Test public void rootHandlerIsNotRegisteredWhenStaticPathPatternIsNotSlashStarStar(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).withPropertyValues("static-path-pattern=/foo/**").run((context) -> assertThat(context.getBean(WelcomePageHandlerMapping.class).getRootHandler()).isNull());
  }
  @Test public void producesNotFoundResponseWhenThereIsNoWelcomePage(){
    this.contextRunner.run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isNotFound()));
  }
  @Test public void handlesRequestForTemplateThatAcceptsTextHtml(){
    this.contextRunner.withUserConfiguration(TemplateConfiguration.class).run((context) -> {
      MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(context).build();
      mockMvc.perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(content().string("index template"));
    }
);
  }
  @Test public void handlesRequestForTemplateThatAcceptsAll(){
    this.contextRunner.withUserConfiguration(TemplateConfiguration.class).run((context) -> {
      MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(context).build();
      mockMvc.perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(content().string("index template"));
    }
);
  }
  @Test public void prefersAStaticResourceToATemplate(){
    this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class,TemplateConfiguration.class).run((context) -> {
      MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(context).build();
      mockMvc.perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html"));
    }
);
  }
@Configuration static class HandlerMappingConfiguration {
    @Bean public WelcomePageHandlerMapping handlerMapping(    ApplicationContext applicationContext,    ObjectProvider<TemplateAvailabilityProviders> templateAvailabilityProviders,    ObjectProvider<Resource> staticIndexPage,    @Value("${static-path-pattern:/**}") String staticPathPattern){
      return new WelcomePageHandlerMapping(templateAvailabilityProviders.getIfAvailable(() -> new TemplateAvailabilityProviders(applicationContext)),applicationContext,Optional.ofNullable(staticIndexPage.getIfAvailable()),staticPathPattern);
    }
  }
@Configuration static class StaticResourceConfiguration {
    @Bean public Resource staticIndexPage(){
      return new FileSystemResource("src/test/resources/welcome-page/index.html");
    }
  }
@Configuration static class TemplateConfiguration {
    @Bean public TemplateAvailabilityProviders templateAvailabilityProviders(){
      return new TestTemplateAvailabilityProviders((view,environment,classLoader,resourceLoader) -> view.equals("index"));
    }
    @Bean public ViewResolver viewResolver(){
      return (name,locale) -> {
        if (name.startsWith("forward:")) {
          return new InternalResourceView(name.substring("forward:".length()));
        }
        return new AbstractView(){
          @Override protected void renderMergedOutputModel(          Map<String,Object> model,          HttpServletRequest request,          HttpServletResponse response) throws Exception {
            response.getWriter().print(name + " template");
          }
        }
;
      }
;
    }
  }
private static class TestTemplateAvailabilityProviders extends TemplateAvailabilityProviders {
    TestTemplateAvailabilityProviders(    TemplateAvailabilityProvider provider){
      super(Collections.singletonList(provider));
    }
  }
}
