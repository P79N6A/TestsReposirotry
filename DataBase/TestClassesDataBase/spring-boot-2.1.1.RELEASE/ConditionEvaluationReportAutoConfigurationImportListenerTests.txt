/** 
 * Tests for  {@link ConditionEvaluationReportAutoConfigurationImportListener}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class ConditionEvaluationReportAutoConfigurationImportListenerTests {
  private ConditionEvaluationReportAutoConfigurationImportListener listener;
  private final ConfigurableListableBeanFactory beanFactory=new DefaultListableBeanFactory();
  @Before public void setup(){
    this.listener=new ConditionEvaluationReportAutoConfigurationImportListener();
    this.listener.setBeanFactory(this.beanFactory);
  }
  @Test public void shouldBeInSpringFactories(){
    List<AutoConfigurationImportListener> factories=SpringFactoriesLoader.loadFactories(AutoConfigurationImportListener.class,null);
    assertThat(factories).hasAtLeastOneElementOfType(ConditionEvaluationReportAutoConfigurationImportListener.class);
  }
  @Test public void onAutoConfigurationImportEventShouldRecordCandidates(){
    List<String> candidateConfigurations=Collections.singletonList("Test");
    Set<String> exclusions=Collections.emptySet();
    AutoConfigurationImportEvent event=new AutoConfigurationImportEvent(this,candidateConfigurations,exclusions);
    this.listener.onAutoConfigurationImportEvent(event);
    ConditionEvaluationReport report=ConditionEvaluationReport.get(this.beanFactory);
    assertThat(report.getUnconditionalClasses()).containsExactlyElementsOf(candidateConfigurations);
  }
  @Test public void onAutoConfigurationImportEventShouldRecordExclusions(){
    List<String> candidateConfigurations=Collections.emptyList();
    Set<String> exclusions=Collections.singleton("Test");
    AutoConfigurationImportEvent event=new AutoConfigurationImportEvent(this,candidateConfigurations,exclusions);
    this.listener.onAutoConfigurationImportEvent(event);
    ConditionEvaluationReport report=ConditionEvaluationReport.get(this.beanFactory);
    assertThat(report.getExclusions()).containsExactlyElementsOf(exclusions);
  }
  @Test public void onAutoConfigurationImportEventShouldApplyExclusionsGlobally(){
    AutoConfigurationImportEvent event=new AutoConfigurationImportEvent(this,Arrays.asList("First","Second"),Collections.emptySet());
    this.listener.onAutoConfigurationImportEvent(event);
    AutoConfigurationImportEvent anotherEvent=new AutoConfigurationImportEvent(this,Collections.emptyList(),Collections.singleton("First"));
    this.listener.onAutoConfigurationImportEvent(anotherEvent);
    ConditionEvaluationReport report=ConditionEvaluationReport.get(this.beanFactory);
    assertThat(report.getUnconditionalClasses()).containsExactly("Second");
    assertThat(report.getExclusions()).containsExactly("First");
  }
  @Test public void onAutoConfigurationImportEventShouldApplyExclusionsGloballyWhenExclusionIsAlreadyApplied(){
    AutoConfigurationImportEvent excludeEvent=new AutoConfigurationImportEvent(this,Collections.emptyList(),Collections.singleton("First"));
    this.listener.onAutoConfigurationImportEvent(excludeEvent);
    AutoConfigurationImportEvent event=new AutoConfigurationImportEvent(this,Arrays.asList("First","Second"),Collections.emptySet());
    this.listener.onAutoConfigurationImportEvent(event);
    ConditionEvaluationReport report=ConditionEvaluationReport.get(this.beanFactory);
    assertThat(report.getUnconditionalClasses()).containsExactly("Second");
    assertThat(report.getExclusions()).containsExactly("First");
  }
}
