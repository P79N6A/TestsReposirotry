/** 
 * Tests for  {@link ServletContextInitializerBeans}.
 * @author Andy Wilkinson
 */
public class ServletContextInitializerBeansTests {
  private ConfigurableApplicationContext context;
  @Test public void servletThatImplementsServletContextInitializerIsOnlyRegisteredOnce(){
    load(ServletConfiguration.class);
    ServletContextInitializerBeans initializerBeans=new ServletContextInitializerBeans(this.context.getBeanFactory());
    assertThat(initializerBeans.size()).isEqualTo(1);
    assertThat(initializerBeans.iterator()).hasOnlyElementsOfType(TestServlet.class);
  }
  @Test public void filterThatImplementsServletContextInitializerIsOnlyRegisteredOnce(){
    load(FilterConfiguration.class);
    ServletContextInitializerBeans initializerBeans=new ServletContextInitializerBeans(this.context.getBeanFactory());
    assertThat(initializerBeans.size()).isEqualTo(1);
    assertThat(initializerBeans.iterator()).hasOnlyElementsOfType(TestFilter.class);
  }
  @Test public void looksForInitializerBeansOfSpecifiedType(){
    load(TestConfiguration.class);
    ServletContextInitializerBeans initializerBeans=new ServletContextInitializerBeans(this.context.getBeanFactory(),TestServletContextInitializer.class);
    assertThat(initializerBeans.size()).isEqualTo(1);
    assertThat(initializerBeans.iterator()).hasOnlyElementsOfType(TestServletContextInitializer.class);
  }
  private void load(  Class<?>... configuration){
    this.context=new AnnotationConfigApplicationContext(configuration);
  }
static class ServletConfiguration {
    @Bean public TestServlet testServlet(){
      return new TestServlet();
    }
  }
static class FilterConfiguration {
    @Bean public TestFilter testFilter(){
      return new TestFilter();
    }
  }
static class TestConfiguration {
    @Bean public TestServletContextInitializer testServletContextInitializer(){
      return new TestServletContextInitializer();
    }
    @Bean public OtherTestServletContextInitializer otherTestServletContextInitializer(){
      return new OtherTestServletContextInitializer();
    }
  }
static class TestServlet extends HttpServlet implements ServletContextInitializer {
    @Override public void onStartup(    ServletContext servletContext){
    }
  }
static class TestFilter implements Filter, ServletContextInitializer {
    @Override public void onStartup(    ServletContext servletContext){
    }
    @Override public void init(    FilterConfig filterConfig){
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain){
    }
    @Override public void destroy(){
    }
  }
static class TestServletContextInitializer implements ServletContextInitializer {
    @Override public void onStartup(    ServletContext servletContext) throws ServletException {
    }
  }
static class OtherTestServletContextInitializer implements ServletContextInitializer {
    @Override public void onStartup(    ServletContext servletContext) throws ServletException {
    }
  }
}
