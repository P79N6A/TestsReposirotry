/** 
 * Base test for  {@link StepRegistryPropertiesConfigAdapter} implementations.
 * @param < P > properties used by the tests
 * @param < A > adapter used by the tests
 * @author Stephane Nicoll
 * @author Artsiom Yudovin
 */
public abstract class StepRegistryPropertiesConfigAdapterTests<P extends StepRegistryProperties,A extends StepRegistryPropertiesConfigAdapter<P>> {
  protected abstract P createProperties();
  protected abstract A createConfigAdapter(  P properties);
  @Test public void whenPropertiesStepIsSetAdapterStepReturnsIt(){
    P properties=createProperties();
    properties.setStep(Duration.ofSeconds(42));
    assertThat(createConfigAdapter(properties).step()).isEqualTo(Duration.ofSeconds(42));
  }
  @Test public void whenPropertiesEnabledIsSetAdapterEnabledReturnsIt(){
    P properties=createProperties();
    properties.setEnabled(false);
    assertThat(createConfigAdapter(properties).enabled()).isFalse();
  }
  @Test public void whenPropertiesNumThreadsIsSetAdapterNumThreadsReturnsIt(){
    P properties=createProperties();
    properties.setNumThreads(42);
    assertThat(createConfigAdapter(properties).numThreads()).isEqualTo(42);
  }
  @Test public void whenPropertiesBatchSizeIsSetAdapterBatchSizeReturnsIt(){
    P properties=createProperties();
    properties.setBatchSize(10042);
    assertThat(createConfigAdapter(properties).batchSize()).isEqualTo(10042);
  }
}
