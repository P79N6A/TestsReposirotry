/** 
 * Tests for  {@link BeansEndpoint}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class BeansEndpointTests {
  @Test public void beansAreFound(){
    ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class);
    contextRunner.run((context) -> {
      ApplicationBeans result=context.getBean(BeansEndpoint.class).beans();
      ContextBeans descriptor=result.getContexts().get(context.getId());
      assertThat(descriptor.getParentId()).isNull();
      Map<String,BeanDescriptor> beans=descriptor.getBeans();
      assertThat(beans.size()).isLessThanOrEqualTo(context.getBeanDefinitionCount());
      assertThat(beans).containsKey("endpoint");
    }
);
  }
  @Test public void infrastructureBeansAreOmitted(){
    ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class);
    contextRunner.run((context) -> {
      ConfigurableListableBeanFactory factory=(ConfigurableListableBeanFactory)context.getAutowireCapableBeanFactory();
      List<String> infrastructureBeans=Stream.of(context.getBeanDefinitionNames()).filter((name) -> BeanDefinition.ROLE_INFRASTRUCTURE == factory.getBeanDefinition(name).getRole()).collect(Collectors.toList());
      ApplicationBeans result=context.getBean(BeansEndpoint.class).beans();
      ContextBeans contextDescriptor=result.getContexts().get(context.getId());
      Map<String,BeanDescriptor> beans=contextDescriptor.getBeans();
      for (      String infrastructureBean : infrastructureBeans) {
        assertThat(beans).doesNotContainKey(infrastructureBean);
      }
    }
);
  }
  @Test public void lazyBeansAreOmitted(){
    ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class,LazyBeanConfiguration.class);
    contextRunner.run((context) -> {
      ApplicationBeans result=context.getBean(BeansEndpoint.class).beans();
      ContextBeans contextDescriptor=result.getContexts().get(context.getId());
      assertThat(context).hasBean("lazyBean");
      assertThat(contextDescriptor.getBeans()).doesNotContainKey("lazyBean");
    }
);
  }
  @Test public void beansInParentContextAreFound(){
    ApplicationContextRunner parentRunner=new ApplicationContextRunner().withUserConfiguration(BeanConfiguration.class);
    parentRunner.run((parent) -> {
      new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class).withParent(parent).run((child) -> {
        ApplicationBeans result=child.getBean(BeansEndpoint.class).beans();
        assertThat(result.getContexts().get(parent.getId()).getBeans()).containsKey("bean");
        assertThat(result.getContexts().get(child.getId()).getBeans()).containsKey("endpoint");
      }
);
    }
);
  }
@Configuration public static class EndpointConfiguration {
    @Bean public BeansEndpoint endpoint(    ConfigurableApplicationContext context){
      return new BeansEndpoint(context);
    }
  }
@Configuration static class BeanConfiguration {
    @Bean public String bean(){
      return "bean";
    }
  }
@Configuration static class LazyBeanConfiguration {
    @Lazy @Bean public String lazyBean(){
      return "lazyBean";
    }
  }
}
