/** 
 * Tests for  {@link EncodePasswordCommand}.
 * @author Phillip Webb
 */
public class EncodePasswordCommandTests {
  private MockLog log;
  @Captor private ArgumentCaptor<String> message;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.log=MockLog.attach();
  }
  @After public void cleanup(){
    MockLog.clear();
  }
  @Test public void encodeWithNoAlgorithmShouldUseBcrypt() throws Exception {
    EncodePasswordCommand command=new EncodePasswordCommand();
    ExitStatus status=command.run("boot");
    verify(this.log).info(this.message.capture());
    assertThat(this.message.getValue()).startsWith("{bcrypt}");
    assertThat(PasswordEncoderFactories.createDelegatingPasswordEncoder().matches("boot",this.message.getValue())).isTrue();
    assertThat(status).isEqualTo(ExitStatus.OK);
  }
  @Test public void encodeWithBCryptShouldUseBCrypt() throws Exception {
    EncodePasswordCommand command=new EncodePasswordCommand();
    ExitStatus status=command.run("-a","bcrypt","boot");
    verify(this.log).info(this.message.capture());
    assertThat(this.message.getValue()).doesNotStartWith("{");
    assertThat(new BCryptPasswordEncoder().matches("boot",this.message.getValue())).isTrue();
    assertThat(status).isEqualTo(ExitStatus.OK);
  }
  @Test public void encodeWithPbkdf2ShouldUsePbkdf2() throws Exception {
    EncodePasswordCommand command=new EncodePasswordCommand();
    ExitStatus status=command.run("-a","pbkdf2","boot");
    verify(this.log).info(this.message.capture());
    assertThat(this.message.getValue()).doesNotStartWith("{");
    assertThat(new Pbkdf2PasswordEncoder().matches("boot",this.message.getValue())).isTrue();
    assertThat(status).isEqualTo(ExitStatus.OK);
  }
  @Test public void encodeWithUnknownAlgorithmShouldExitWithError() throws Exception {
    EncodePasswordCommand command=new EncodePasswordCommand();
    ExitStatus status=command.run("--algorithm","bad","boot");
    verify(this.log).error("Unknown algorithm, valid options are: default,bcrypt,pbkdf2");
    assertThat(status).isEqualTo(ExitStatus.ERROR);
  }
}
