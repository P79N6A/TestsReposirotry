/** 
 * Tests for  {@link CouchbaseRepositoriesAutoConfiguration} and{@link CouchbaseReactiveRepositoriesAutoConfiguration}.
 * @author Stephane Nicoll
 */
public class CouchbaseReactiveAndImperativeRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    this.context.close();
  }
  @Test public void shouldCreateInstancesForReactiveAndImperativeRepositories(){
    this.context=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context);
    this.context.register(ImperativeAndReactiveConfiguration.class,BaseConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
    assertThat(this.context.getBean(ReactiveCityRepository.class)).isNotNull();
  }
@Configuration @TestAutoConfigurationPackage(CouchbaseAutoConfigurationTests.class) @EnableCouchbaseRepositories(basePackageClasses=CityRepository.class) @EnableReactiveCouchbaseRepositories(basePackageClasses=ReactiveCityRepository.class) protected static class ImperativeAndReactiveConfiguration {
  }
@Configuration @Import({CouchbaseTestConfigurer.class,Registrar.class}) protected static class BaseConfiguration {
  }
protected static class Registrar implements ImportSelector {
    @Override public String[] selectImports(    AnnotationMetadata importingClassMetadata){
      List<String> names=new ArrayList<>();
      for (      Class<?> type : new Class<?>[]{CouchbaseAutoConfiguration.class,CouchbaseDataAutoConfiguration.class,CouchbaseRepositoriesAutoConfiguration.class,CouchbaseReactiveDataAutoConfiguration.class,CouchbaseReactiveRepositoriesAutoConfiguration.class}) {
        names.add(type.getName());
      }
      return StringUtils.toStringArray(names);
    }
  }
}
