/** 
 * Tests for  {@link MongoReactiveHealthIndicator}.
 * @author Yulin Qin
 */
public class MongoReactiveHealthIndicatorTests {
  @Test public void testMongoIsUp(){
    Document buildInfo=mock(Document.class);
    given(buildInfo.getString("version")).willReturn("2.6.4");
    ReactiveMongoTemplate reactiveMongoTemplate=mock(ReactiveMongoTemplate.class);
    given(reactiveMongoTemplate.executeCommand("{ buildInfo: 1 }")).willReturn(Mono.just(buildInfo));
    MongoReactiveHealthIndicator mongoReactiveHealthIndicator=new MongoReactiveHealthIndicator(reactiveMongoTemplate);
    Mono<Health> health=mongoReactiveHealthIndicator.health();
    StepVerifier.create(health).consumeNextWith((h) -> {
      assertThat(h.getStatus()).isEqualTo(Status.UP);
      assertThat(h.getDetails()).containsOnlyKeys("version");
      assertThat(h.getDetails().get("version")).isEqualTo("2.6.4");
    }
).verifyComplete();
  }
  @Test public void testMongoIsDown(){
    ReactiveMongoTemplate reactiveMongoTemplate=mock(ReactiveMongoTemplate.class);
    given(reactiveMongoTemplate.executeCommand("{ buildInfo: 1 }")).willThrow(new MongoException("Connection failed"));
    MongoReactiveHealthIndicator mongoReactiveHealthIndicator=new MongoReactiveHealthIndicator(reactiveMongoTemplate);
    Mono<Health> health=mongoReactiveHealthIndicator.health();
    StepVerifier.create(health).consumeNextWith((h) -> {
      assertThat(h.getStatus()).isEqualTo(Status.DOWN);
      assertThat(h.getDetails()).containsOnlyKeys("error");
      assertThat(h.getDetails().get("error")).isEqualTo(MongoException.class.getName() + ": Connection failed");
    }
).verifyComplete();
  }
}
