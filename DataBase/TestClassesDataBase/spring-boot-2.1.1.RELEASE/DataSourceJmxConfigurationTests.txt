/** 
 * Tests for  {@link DataSourceJmxConfiguration}.
 * @author Stephane Nicoll
 * @author Tadaya Tsuyukubo
 */
public class DataSourceJmxConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withPropertyValues("spring.datasource.url=" + "jdbc:hsqldb:mem:test-" + UUID.randomUUID()).withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,DataSourceAutoConfiguration.class));
  @Test public void hikariAutoConfiguredCanUseRegisterMBeans(){
    String poolName=UUID.randomUUID().toString();
    this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(),"spring.datasource.name=" + poolName,"spring.datasource.hikari.register-mbeans=true").run((context) -> {
      assertThat(context).hasSingleBean(HikariDataSource.class);
      assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue();
      MBeanServer mBeanServer=context.getBean(MBeanServer.class);
      validateHikariMBeansRegistration(mBeanServer,poolName,true);
    }
);
  }
  @Test public void hikariAutoConfiguredWithoutDataSourceName() throws MalformedObjectNameException {
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    Set<ObjectInstance> existingInstances=mBeanServer.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"),null);
    this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(),"spring.datasource.hikari.register-mbeans=true").run((context) -> {
      assertThat(context).hasSingleBean(HikariDataSource.class);
      assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue();
      assertThat(mBeanServer.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"),null).size()).isEqualTo(existingInstances.size() + 2);
    }
);
  }
  @Test public void hikariAutoConfiguredUsesJmsFlag(){
    String poolName=UUID.randomUUID().toString();
    this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(),"spring.jmx.enabled=false","spring.datasource.name=" + poolName,"spring.datasource.hikari.register-mbeans=true").run((context) -> {
      assertThat(context).hasSingleBean(HikariDataSource.class);
      assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue();
      validateHikariMBeansRegistration(ManagementFactory.getPlatformMBeanServer(),poolName,true);
    }
);
  }
  @Test public void hikariProxiedCanUseRegisterMBeans(){
    String poolName=UUID.randomUUID().toString();
    this.contextRunner.withUserConfiguration(DataSourceProxyConfiguration.class).withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(),"spring.datasource.name=" + poolName,"spring.datasource.hikari.register-mbeans=true").run((context) -> {
      assertThat(context).hasSingleBean(javax.sql.DataSource.class);
      HikariDataSource hikariDataSource=context.getBean(javax.sql.DataSource.class).unwrap(HikariDataSource.class);
      assertThat(hikariDataSource.isRegisterMbeans()).isTrue();
      MBeanServer mBeanServer=context.getBean(MBeanServer.class);
      validateHikariMBeansRegistration(mBeanServer,poolName,true);
    }
);
  }
  private void validateHikariMBeansRegistration(  MBeanServer mBeanServer,  String poolName,  boolean expected) throws MalformedObjectNameException {
    assertThat(mBeanServer.isRegistered(new ObjectName("com.zaxxer.hikari:type=Pool (" + poolName + ")"))).isEqualTo(expected);
    assertThat(mBeanServer.isRegistered(new ObjectName("com.zaxxer.hikari:type=PoolConfig (" + poolName + ")"))).isEqualTo(expected);
  }
  @Test public void tomcatDoesNotExposeMBeanPoolByDefault(){
    this.contextRunner.withPropertyValues("spring.datasource.type=" + DataSource.class.getName()).run((context) -> assertThat(context).doesNotHaveBean(ConnectionPool.class));
  }
  @Test public void tomcatAutoConfiguredCanExposeMBeanPool(){
    this.contextRunner.withPropertyValues("spring.datasource.type=" + DataSource.class.getName(),"spring.datasource.jmx-enabled=true").run((context) -> {
      assertThat(context).hasBean("dataSourceMBean");
      assertThat(context).hasSingleBean(ConnectionPool.class);
      assertThat(context.getBean(DataSourceProxy.class).createPool().getJmxPool()).isSameAs(context.getBean(ConnectionPool.class));
    }
);
  }
  @Test public void tomcatProxiedCanExposeMBeanPool(){
    this.contextRunner.withUserConfiguration(DataSourceProxyConfiguration.class).withPropertyValues("spring.datasource.type=" + DataSource.class.getName(),"spring.datasource.jmx-enabled=true").run((context) -> {
      assertThat(context).hasBean("dataSourceMBean");
      assertThat(context).getBean("dataSourceMBean").isInstanceOf(ConnectionPool.class);
    }
);
  }
  @Test public void tomcatDelegateCanExposeMBeanPool(){
    this.contextRunner.withUserConfiguration(DataSourceDelegateConfiguration.class).withPropertyValues("spring.datasource.type=" + DataSource.class.getName(),"spring.datasource.jmx-enabled=true").run((context) -> {
      assertThat(context).hasBean("dataSourceMBean");
      assertThat(context).getBean("dataSourceMBean").isInstanceOf(ConnectionPool.class);
    }
);
  }
@Configuration static class DataSourceProxyConfiguration {
    @Bean public static DataSourceBeanPostProcessor dataSourceBeanPostProcessor(){
      return new DataSourceBeanPostProcessor();
    }
  }
private static class DataSourceBeanPostProcessor implements BeanPostProcessor {
    @Override public Object postProcessAfterInitialization(    Object bean,    String beanName){
      if (bean instanceof javax.sql.DataSource) {
        return new ProxyFactory(bean).getProxy();
      }
      return bean;
    }
  }
@Configuration static class DataSourceDelegateConfiguration {
    @Bean public static DataSourceBeanPostProcessor dataSourceBeanPostProcessor(){
      return new DataSourceBeanPostProcessor(){
        @Override public Object postProcessAfterInitialization(        Object bean,        String beanName){
          if (bean instanceof javax.sql.DataSource) {
            return new DelegatingDataSource((javax.sql.DataSource)bean);
          }
          return bean;
        }
      }
;
    }
  }
}
