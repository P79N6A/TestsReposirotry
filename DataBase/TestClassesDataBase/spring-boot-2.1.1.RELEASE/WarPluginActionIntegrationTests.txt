/** 
 * Integration tests for  {@link JavaPluginAction}.
 * @author Andy Wilkinson
 */
@RunWith(GradleCompatibilitySuite.class) public class WarPluginActionIntegrationTests {
  @Rule public GradleBuild gradleBuild;
  @Test public void noBootWarTaskWithoutWarPluginApplied(){
    assertThat(this.gradleBuild.build("taskExists","-PtaskName=bootWar").getOutput()).contains("bootWar exists = false");
  }
  @Test public void applyingWarPluginCreatesBootWarTask(){
    assertThat(this.gradleBuild.build("taskExists","-PtaskName=bootWar","-PapplyWarPlugin").getOutput()).contains("bootWar exists = true");
  }
  @Test public void assembleRunsBootWarAndWarIsSkipped(){
    BuildResult result=this.gradleBuild.build("assemble");
    assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(result.task(":war").getOutcome()).isEqualTo(TaskOutcome.SKIPPED);
  }
  @Test public void warAndBootWarCanBothBeBuilt(){
    BuildResult result=this.gradleBuild.build("assemble");
    assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    assertThat(result.task(":war").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);
    File buildLibs=new File(this.gradleBuild.getProjectDir(),"build/libs");
    assertThat(buildLibs.listFiles()).containsExactlyInAnyOrder(new File(buildLibs,this.gradleBuild.getProjectDir().getName() + ".war"),new File(buildLibs,this.gradleBuild.getProjectDir().getName() + "-boot.war"));
  }
  @Test public void errorMessageIsHelpfulWhenMainClassCannotBeResolved(){
    BuildResult result=this.gradleBuild.buildAndFail("build","-PapplyWarPlugin");
    assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.FAILED);
    assertThat(result.getOutput()).contains("Main class name has not been configured and it could not be resolved");
  }
}
