/** 
 * Tests for  {@link CassandraDataAutoConfiguration}.
 * @author Eddú Meléndez
 * @author Mark Paluch
 * @author Stephane Nicoll
 */
public class CassandraDataAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void templateExists(){
    load(TestExcludeConfiguration.class);
    assertThat(this.context.getBeanNamesForType(CassandraTemplate.class).length).isEqualTo(1);
  }
  @Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet(){
    load(EntityScanConfig.class);
    CassandraMappingContext mappingContext=this.context.getBean(CassandraMappingContext.class);
    Set<Class<?>> initialEntitySet=(Set<Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
    assertThat(initialEntitySet).containsOnly(City.class);
  }
  @Test public void userTypeResolverShouldBeSet(){
    load();
    CassandraMappingContext mappingContext=this.context.getBean(CassandraMappingContext.class);
    assertThat(ReflectionTestUtils.getField(mappingContext,"userTypeResolver")).isInstanceOf(SimpleUserTypeResolver.class);
  }
  @Test public void defaultConversions(){
    load();
    CassandraTemplate template=this.context.getBean(CassandraTemplate.class);
    assertThat(template.getConverter().getConversionService().canConvert(Person.class,String.class)).isFalse();
  }
  @Test public void customConversions(){
    load(CustomConversionConfig.class);
    CassandraTemplate template=this.context.getBean(CassandraTemplate.class);
    assertThat(template.getConverter().getConversionService().canConvert(Person.class,String.class)).isTrue();
  }
  public void load(  Class<?>... config){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    TestPropertyValues.of("spring.data.cassandra.keyspaceName:boot_test").applyTo(ctx);
    if (!ObjectUtils.isEmpty(config)) {
      ctx.register(config);
    }
    ctx.register(TestConfiguration.class,CassandraAutoConfiguration.class,CassandraDataAutoConfiguration.class);
    ctx.refresh();
    this.context=ctx;
  }
@Configuration @ComponentScan(excludeFilters=@ComponentScan.Filter(classes={Session.class},type=FilterType.ASSIGNABLE_TYPE)) static class TestExcludeConfiguration {
  }
@Configuration static class TestConfiguration {
    @Bean public Session getObject(){
      return mock(Session.class);
    }
  }
@Configuration @EntityScan("org.springframework.boot.autoconfigure.data.cassandra.city") static class EntityScanConfig {
  }
@Configuration static class CustomConversionConfig {
    @Bean public CassandraCustomConversions myCassandraCustomConversions(){
      return new CassandraCustomConversions(Collections.singletonList(new MyConverter()));
    }
  }
private static class MyConverter implements Converter<Person,String> {
    @Override public String convert(    Person o){
      return null;
    }
  }
private static class Person {
  }
}
