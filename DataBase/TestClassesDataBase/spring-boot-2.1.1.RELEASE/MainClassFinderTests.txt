/** 
 * Tests for  {@link MainClassFinder}.
 * @author Phillip Webb
 */
public class MainClassFinderTests {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  private TestJarFile testJarFile;
  @Before public void setup() throws IOException {
    this.testJarFile=new TestJarFile(this.temporaryFolder);
  }
  @Test public void findMainClassInJar() throws Exception {
    this.testJarFile.addClass("B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("A.class",ClassWithoutMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarFile(),"");
    assertThat(actual).isEqualTo("B");
  }
  @Test public void findMainClassInJarSubFolder() throws Exception {
    this.testJarFile.addClass("a/b/c/D.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/F.class",ClassWithoutMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarFile(),"");
    assertThat(actual).isEqualTo("a.b.c.D");
  }
  @Test public void usesBreadthFirstJarSearch() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarFile(),"");
    assertThat(actual).isEqualTo("a.B");
  }
  @Test public void findSingleJarSearch() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithMainMethod.class);
    assertThatIllegalStateException().isThrownBy(() -> MainClassFinder.findSingleMainClass(this.testJarFile.getJarFile(),"")).withMessageContaining("Unable to find a single main class " + "from the following candidates [a.B, a.b.c.E]");
  }
  @Test public void findSingleJarSearchPrefersAnnotatedMainClass() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",AnnotatedClassWithMainMethod.class);
    String mainClass=MainClassFinder.findSingleMainClass(this.testJarFile.getJarFile(),"","org.springframework.boot.loader.tools.sample.SomeApplication");
    assertThat(mainClass).isEqualTo("a.b.c.E");
  }
  @Test public void findMainClassInJarSubLocation() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarFile(),"a/");
    assertThat(actual).isEqualTo("B");
  }
  @Test public void findMainClassInFolder() throws Exception {
    this.testJarFile.addClass("B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("A.class",ClassWithoutMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarSource());
    assertThat(actual).isEqualTo("B");
  }
  @Test public void findMainClassInSubFolder() throws Exception {
    this.testJarFile.addClass("a/b/c/D.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/F.class",ClassWithoutMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarSource());
    assertThat(actual).isEqualTo("a.b.c.D");
  }
  @Test public void usesBreadthFirstFolderSearch() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithMainMethod.class);
    String actual=MainClassFinder.findMainClass(this.testJarFile.getJarSource());
    assertThat(actual).isEqualTo("a.B");
  }
  @Test public void findSingleFolderSearch() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithMainMethod.class);
    assertThatIllegalStateException().isThrownBy(() -> MainClassFinder.findSingleMainClass(this.testJarFile.getJarSource())).withMessageContaining("Unable to find a single main class " + "from the following candidates [a.B, a.b.c.E]");
  }
  @Test public void findSingleFolderSearchPrefersAnnotatedMainClass() throws Exception {
    this.testJarFile.addClass("a/B.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",AnnotatedClassWithMainMethod.class);
    String mainClass=MainClassFinder.findSingleMainClass(this.testJarFile.getJarSource(),"org.springframework.boot.loader.tools.sample.SomeApplication");
    assertThat(mainClass).isEqualTo("a.b.c.E");
  }
  @Test public void doWithFolderMainMethods() throws Exception {
    this.testJarFile.addClass("a/b/c/D.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/F.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/G.class",ClassWithMainMethod.class);
    ClassNameCollector callback=new ClassNameCollector();
    MainClassFinder.doWithMainClasses(this.testJarFile.getJarSource(),callback);
    assertThat(callback.getClassNames().toString()).isEqualTo("[a.b.G, a.b.c.D]");
  }
  @Test public void doWithJarMainMethods() throws Exception {
    this.testJarFile.addClass("a/b/c/D.class",ClassWithMainMethod.class);
    this.testJarFile.addClass("a/b/c/E.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/F.class",ClassWithoutMainMethod.class);
    this.testJarFile.addClass("a/b/G.class",ClassWithMainMethod.class);
    ClassNameCollector callback=new ClassNameCollector();
    MainClassFinder.doWithMainClasses(this.testJarFile.getJarFile(),null,callback);
    assertThat(callback.getClassNames().toString()).isEqualTo("[a.b.G, a.b.c.D]");
  }
private static class ClassNameCollector implements MainClassCallback<Object> {
    private final List<String> classNames=new ArrayList<>();
    @Override public Object doWith(    MainClass mainClass){
      this.classNames.add(mainClass.getName());
      return null;
    }
    public List<String> getClassNames(){
      return this.classNames;
    }
  }
}
