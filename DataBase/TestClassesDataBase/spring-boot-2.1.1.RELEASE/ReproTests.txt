/** 
 * Tests to reproduce reported issues.
 * @author Phillip Webb
 * @author Dave Syer
 */
public class ReproTests {
  private ConfigurableApplicationContext context;
  @After public void cleanUp(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void enableProfileViaApplicationProperties(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    this.context=application.run("--spring.config.name=enableprofileviaapplicationproperties","--spring.profiles.active=dev");
    assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("dev"))).isTrue();
    assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("a"))).isTrue();
  }
  @Test public void activeProfilesWithYamlAndCommandLine(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro";
    this.context=application.run(configName,"--spring.profiles.active=B");
    assertVersionProperty(this.context,"B","B");
  }
  @Test public void activeProfilesWithYamlOnly(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro";
    this.context=application.run(configName);
    assertVersionProperty(this.context,"B","B");
  }
  @Test public void orderActiveProfilesWithYamlOnly(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-ordered";
    this.context=application.run(configName);
    assertVersionProperty(this.context,"B","A","B");
  }
  @Test public void commandLineBeatsProfilesWithYaml(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro";
    this.context=application.run(configName,"--spring.profiles.active=C");
    assertVersionProperty(this.context,"C","C");
  }
  @Test public void orderProfilesWithYaml(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro";
    this.context=application.run(configName,"--spring.profiles.active=A,C");
    assertVersionProperty(this.context,"C","A","C");
  }
  @Test public void reverseOrderOfProfilesWithYaml(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro";
    this.context=application.run(configName,"--spring.profiles.active=C,A");
    assertVersionProperty(this.context,"A","C","A");
  }
  @Test public void activeProfilesWithYamlAndCommandLineAndNoOverride(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-without-override";
    this.context=application.run(configName,"--spring.profiles.active=B");
    assertVersionProperty(this.context,"B","B");
  }
  @Test public void activeProfilesWithYamlOnlyAndNoOverride(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-without-override";
    this.context=application.run(configName);
    assertVersionProperty(this.context,null);
  }
  @Test public void commandLineBeatsProfilesWithYamlAndNoOverride(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-without-override";
    this.context=application.run(configName,"--spring.profiles.active=C");
    assertVersionProperty(this.context,"C","C");
  }
  @Test public void orderProfilesWithYamlAndNoOverride(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-without-override";
    this.context=application.run(configName,"--spring.profiles.active=A,C");
    assertVersionProperty(this.context,"C","A","C");
  }
  @Test public void reverseOrderOfProfilesWithYamlAndNoOverride(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    String configName="--spring.config.name=activeprofilerepro-without-override";
    this.context=application.run(configName,"--spring.profiles.active=C,A");
    assertVersionProperty(this.context,"A","C","A");
  }
  private void assertVersionProperty(  ConfigurableApplicationContext context,  String expectedVersion,  String... expectedActiveProfiles){
    assertThat(context.getEnvironment().getActiveProfiles()).isEqualTo(expectedActiveProfiles);
    assertThat(context.getEnvironment().getProperty("version")).as("version mismatch").isEqualTo(expectedVersion);
  }
@Configuration public static class Config {
  }
}
