/** 
 * Tests for  {@link SslBuilderCustomizer}
 * @author Brian Clozel
 */
public class SslBuilderCustomizerTests {
  @Test public void getKeyManagersWhenAliasIsNullShouldNotDecorate() throws Exception {
    Ssl ssl=new Ssl();
    ssl.setKeyPassword("password");
    ssl.setKeyStore("src/test/resources/test.jks");
    SslBuilderCustomizer customizer=new SslBuilderCustomizer(8080,InetAddress.getLocalHost(),ssl,null);
    KeyManager[] keyManagers=ReflectionTestUtils.invokeMethod(customizer,"getKeyManagers",ssl,null);
    Class<?> name=Class.forName("org.springframework.boot.web.embedded.undertow" + ".SslBuilderCustomizer$ConfigurableAliasKeyManager");
    assertThat(keyManagers[0]).isNotInstanceOf(name);
  }
  @Test public void keyStoreProviderIsUsedWhenCreatingKeyStore() throws Exception {
    Ssl ssl=new Ssl();
    ssl.setKeyPassword("password");
    ssl.setKeyStore("src/test/resources/test.jks");
    ssl.setKeyStoreProvider("com.example.KeyStoreProvider");
    SslBuilderCustomizer customizer=new SslBuilderCustomizer(8080,InetAddress.getLocalHost(),ssl,null);
    try {
      ReflectionTestUtils.invokeMethod(customizer,"getKeyManagers",ssl,null);
      fail();
    }
 catch (    IllegalStateException ex) {
      Throwable cause=ex.getCause();
      assertThat(cause).isInstanceOf(NoSuchProviderException.class);
      assertThat(cause).hasMessageContaining("com.example.KeyStoreProvider");
    }
  }
  @Test public void trustStoreProviderIsUsedWhenCreatingTrustStore() throws Exception {
    Ssl ssl=new Ssl();
    ssl.setTrustStorePassword("password");
    ssl.setTrustStore("src/test/resources/test.jks");
    ssl.setTrustStoreProvider("com.example.TrustStoreProvider");
    SslBuilderCustomizer customizer=new SslBuilderCustomizer(8080,InetAddress.getLocalHost(),ssl,null);
    try {
      ReflectionTestUtils.invokeMethod(customizer,"getTrustManagers",ssl,null);
      fail();
    }
 catch (    IllegalStateException ex) {
      Throwable cause=ex.getCause();
      assertThat(cause).isInstanceOf(NoSuchProviderException.class);
      assertThat(cause).hasMessageContaining("com.example.TrustStoreProvider");
    }
  }
}
