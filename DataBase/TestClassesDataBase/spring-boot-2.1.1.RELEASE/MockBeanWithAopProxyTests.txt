/** 
 * Test  {@link MockBean} when mixed with Spring AOP.
 * @author Phillip Webb
 * @see <a href="https://github.com/spring-projects/spring-boot/issues/5837">5837</a>
 */
@RunWith(SpringRunner.class) public class MockBeanWithAopProxyTests {
  @MockBean private DateService dateService;
  @Test public void verifyShouldUseProxyTarget(){
    given(this.dateService.getDate(false)).willReturn(1L);
    Long d1=this.dateService.getDate(false);
    assertThat(d1).isEqualTo(1L);
    given(this.dateService.getDate(false)).willReturn(2L);
    Long d2=this.dateService.getDate(false);
    assertThat(d2).isEqualTo(2L);
    verify(this.dateService,times(2)).getDate(false);
    verify(this.dateService,times(2)).getDate(eq(false));
    verify(this.dateService,times(2)).getDate(anyBoolean());
  }
@Configuration @EnableCaching(proxyTargetClass=true) @Import(DateService.class) static class Config {
    @Bean public CacheResolver cacheResolver(    CacheManager cacheManager){
      SimpleCacheResolver resolver=new SimpleCacheResolver();
      resolver.setCacheManager(cacheManager);
      return resolver;
    }
    @Bean public ConcurrentMapCacheManager cacheManager(){
      ConcurrentMapCacheManager cacheManager=new ConcurrentMapCacheManager();
      cacheManager.setCacheNames(Arrays.asList("test"));
      return cacheManager;
    }
  }
@Service static class DateService {
    @Cacheable(cacheNames="test") public Long getDate(    boolean argument){
      return System.nanoTime();
    }
  }
}
