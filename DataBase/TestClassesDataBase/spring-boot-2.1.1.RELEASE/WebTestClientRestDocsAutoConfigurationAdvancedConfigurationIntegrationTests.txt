/** 
 * Integration tests for  {@link RestDocsAutoConfiguration} with {@link WebTestClient}.
 * @author Eddú Meléndez
 */
@RunWith(SpringRunner.class) @WebFluxTest @WithMockUser @AutoConfigureRestDocs(uriScheme="https",uriHost="api.example.com",uriPort=443) public class WebTestClientRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests {
  @Before public void deleteSnippets(){
    FileSystemUtils.deleteRecursively(new File("target/generated-snippets"));
  }
  @Autowired private WebTestClient webTestClient;
  @Test public void defaultSnippetsAreWritten() throws Exception {
    this.webTestClient.get().uri("/").exchange().expectStatus().is2xxSuccessful().expectBody().consumeWith(document("default-snippets"));
    File defaultSnippetsDir=new File("target/generated-snippets/default-snippets");
    assertThat(defaultSnippetsDir).exists();
    assertThat(new File(defaultSnippetsDir,"curl-request.md")).has(contentContaining("'https://api.example.com/'"));
    assertThat(new File(defaultSnippetsDir,"http-request.md")).has(contentContaining("api.example.com"));
    assertThat(new File(defaultSnippetsDir,"http-response.md")).isFile();
    assertThat(new File(defaultSnippetsDir,"response-fields.md")).isFile();
  }
  private Condition<File> contentContaining(  String toContain){
    return new ContentContainingCondition(toContain);
  }
@TestConfiguration public static class CustomizationConfiguration {
    @Bean public RestDocumentationResultHandler restDocumentation(){
      return MockMvcRestDocumentation.document("{method-name}");
    }
    @Bean public RestDocsWebTestClientConfigurationCustomizer templateFormatCustomizer(){
      return (configurer) -> configurer.snippets().withTemplateFormat(TemplateFormats.markdown());
    }
    @Bean public RestDocsWebTestClientConfigurationCustomizer defaultSnippetsCustomizer(){
      return (configurer) -> configurer.snippets().withAdditionalDefaults(responseFields(fieldWithPath("_links.self").description("Main URL")));
    }
  }
}
