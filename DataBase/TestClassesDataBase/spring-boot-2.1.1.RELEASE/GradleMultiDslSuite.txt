/** 
 * Custom  {@link Suite} that runs tests against the Groovy and the Kotlin DSLs. Testclasses using the suite must have a public  {@link GradleBuild} field named{@code gradleBuild} and annotated with {@link Rule}.
 * @author Jean-Baptiste Nizet
 * @author Andy Wilkinson
 */
public final class GradleMultiDslSuite extends Suite {
  public GradleMultiDslSuite(  Class<?> clazz) throws InitializationError {
    super(clazz,createRunners(clazz));
  }
  private static List<Runner> createRunners(  Class<?> clazz) throws InitializationError {
    List<Runner> runners=new ArrayList<>();
    runners.add(new GradleDslClassRunner(clazz,new GradleBuild(Dsl.GROOVY)));
    runners.add(new GradleDslClassRunner(clazz,new GradleBuild(Dsl.KOTLIN)));
    return runners;
  }
private static final class GradleDslClassRunner extends BlockJUnit4ClassRunner {
    private final GradleBuild gradleBuild;
    private GradleDslClassRunner(    Class<?> klass,    GradleBuild gradleBuild) throws InitializationError {
      super(klass);
      this.gradleBuild=gradleBuild;
    }
    @Override protected Object createTest() throws Exception {
      Object test=super.createTest();
      configureTest(test);
      return test;
    }
    private void configureTest(    Object test) throws Exception {
      test.getClass().getField("gradleBuild").set(test,this.gradleBuild);
    }
    @Override protected String getName(){
      return this.gradleBuild.getDsl().getName() + " DSL";
    }
    @Override protected String testName(    FrameworkMethod method){
      return method.getName() + " [" + getName()+ "]";
    }
  }
}
