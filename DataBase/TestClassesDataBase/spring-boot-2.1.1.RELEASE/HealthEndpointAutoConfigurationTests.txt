/** 
 * Tests for  {@link HealthEndpointAutoConfiguration}.
 * @author Stephane Nicoll
 * @author Phillip Webb
 */
public class HealthEndpointAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,HealthEndpointAutoConfiguration.class));
  @Test public void healthEndpointShowDetailsDefault(){
    this.contextRunner.withUserConfiguration(ReactiveHealthIndicatorConfiguration.class).run((context) -> {
      ReactiveHealthIndicator indicator=context.getBean("reactiveHealthIndicator",ReactiveHealthIndicator.class);
      verify(indicator,never()).health();
      Health health=context.getBean(HealthEndpoint.class).health();
      assertThat(health.getStatus()).isEqualTo(Status.UP);
      assertThat(health.getDetails()).isNotEmpty();
      verify(indicator,times(1)).health();
    }
);
  }
  @Test public void healthEndpointAdaptReactiveHealthIndicator(){
    this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").withUserConfiguration(ReactiveHealthIndicatorConfiguration.class).run((context) -> {
      ReactiveHealthIndicator indicator=context.getBean("reactiveHealthIndicator",ReactiveHealthIndicator.class);
      verify(indicator,never()).health();
      Health health=context.getBean(HealthEndpoint.class).health();
      assertThat(health.getStatus()).isEqualTo(Status.UP);
      assertThat(health.getDetails()).containsOnlyKeys("reactive");
      verify(indicator,times(1)).health();
    }
);
  }
  @Test public void healthEndpointMergeRegularAndReactive(){
    this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").withUserConfiguration(HealthIndicatorConfiguration.class,ReactiveHealthIndicatorConfiguration.class).run((context) -> {
      HealthIndicator indicator=context.getBean("simpleHealthIndicator",HealthIndicator.class);
      ReactiveHealthIndicator reactiveHealthIndicator=context.getBean("reactiveHealthIndicator",ReactiveHealthIndicator.class);
      verify(indicator,never()).health();
      verify(reactiveHealthIndicator,never()).health();
      Health health=context.getBean(HealthEndpoint.class).health();
      assertThat(health.getStatus()).isEqualTo(Status.UP);
      assertThat(health.getDetails()).containsOnlyKeys("simple","reactive");
      verify(indicator,times(1)).health();
      verify(reactiveHealthIndicator,times(1)).health();
    }
);
  }
@Configuration static class HealthIndicatorConfiguration {
    @Bean public HealthIndicator simpleHealthIndicator(){
      HealthIndicator mock=mock(HealthIndicator.class);
      given(mock.health()).willReturn(Health.status(Status.UP).build());
      return mock;
    }
  }
@Configuration static class ReactiveHealthIndicatorConfiguration {
    @Bean public ReactiveHealthIndicator reactiveHealthIndicator(){
      ReactiveHealthIndicator mock=mock(ReactiveHealthIndicator.class);
      given(mock.health()).willReturn(Mono.just(Health.status(Status.UP).build()));
      return mock;
    }
  }
}
