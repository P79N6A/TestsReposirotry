@Configuration static class WebFilterChainProxyConfiguration {
  @Bean public ReactiveAuthenticationManager authenticationManager(){
    return mock(ReactiveAuthenticationManager.class);
  }
  @Bean public WebFilterChainProxy webFilterChainProxy(  ServerHttpSecurity http){
    return new WebFilterChainProxy(getFilterChains(http));
  }
  @Bean public TestServerHttpSecurity http(  ReactiveAuthenticationManager authenticationManager){
    TestServerHttpSecurity httpSecurity=new TestServerHttpSecurity();
    httpSecurity.authenticationManager(authenticationManager);
    return httpSecurity;
  }
  private List<SecurityWebFilterChain> getFilterChains(  ServerHttpSecurity http){
    return Collections.singletonList(http.authorizeExchange().anyExchange().authenticated().and().formLogin().and().build());
  }
private static class TestServerHttpSecurity extends ServerHttpSecurity implements ApplicationContextAware {
    @Override public void setApplicationContext(    ApplicationContext applicationContext) throws BeansException {
      super.setApplicationContext(applicationContext);
    }
  }
}
