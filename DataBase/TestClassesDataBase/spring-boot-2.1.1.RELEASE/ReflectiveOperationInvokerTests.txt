/** 
 * Tests for  {@link ReflectiveOperationInvoker}.
 * @author Phillip Webb
 */
public class ReflectiveOperationInvokerTests {
  private Example target;
  private OperationMethod operationMethod;
  private ParameterValueMapper parameterValueMapper;
  @Before public void setup(){
    this.target=new Example();
    this.operationMethod=new OperationMethod(ReflectionUtils.findMethod(Example.class,"reverse",String.class),OperationType.READ);
    this.parameterValueMapper=(parameter,value) -> (value != null) ? value.toString() : null;
  }
  @Test public void createWhenTargetIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(null,this.operationMethod,this.parameterValueMapper)).withMessageContaining("Target must not be null");
  }
  @Test public void createWhenOperationMethodIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(this.target,null,this.parameterValueMapper)).withMessageContaining("OperationMethod must not be null");
  }
  @Test public void createWhenParameterValueMapperIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(this.target,this.operationMethod,null)).withMessageContaining("ParameterValueMapper must not be null");
  }
  @Test public void invokeShouldInvokeMethod(){
    ReflectiveOperationInvoker invoker=new ReflectiveOperationInvoker(this.target,this.operationMethod,this.parameterValueMapper);
    Object result=invoker.invoke(new InvocationContext(mock(SecurityContext.class),Collections.singletonMap("name","boot")));
    assertThat(result).isEqualTo("toob");
  }
  @Test public void invokeWhenMissingNonNullableArgumentShouldThrowException(){
    ReflectiveOperationInvoker invoker=new ReflectiveOperationInvoker(this.target,this.operationMethod,this.parameterValueMapper);
    assertThatExceptionOfType(MissingParametersException.class).isThrownBy(() -> invoker.invoke(new InvocationContext(mock(SecurityContext.class),Collections.singletonMap("name",null))));
  }
  @Test public void invokeWhenMissingNullableArgumentShouldInvoke(){
    OperationMethod operationMethod=new OperationMethod(ReflectionUtils.findMethod(Example.class,"reverseNullable",String.class),OperationType.READ);
    ReflectiveOperationInvoker invoker=new ReflectiveOperationInvoker(this.target,operationMethod,this.parameterValueMapper);
    Object result=invoker.invoke(new InvocationContext(mock(SecurityContext.class),Collections.singletonMap("name",null)));
    assertThat(result).isEqualTo("llun");
  }
  @Test public void invokeShouldResolveParameters(){
    ReflectiveOperationInvoker invoker=new ReflectiveOperationInvoker(this.target,this.operationMethod,this.parameterValueMapper);
    Object result=invoker.invoke(new InvocationContext(mock(SecurityContext.class),Collections.singletonMap("name",1234)));
    assertThat(result).isEqualTo("4321");
  }
static class Example {
    String reverse(    String name){
      return new StringBuilder(name).reverse().toString();
    }
    String reverseNullable(    @Nullable String name){
      return new StringBuilder(String.valueOf(name)).reverse().toString();
    }
  }
}
