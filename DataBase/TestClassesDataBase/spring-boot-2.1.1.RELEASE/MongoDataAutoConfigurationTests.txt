/** 
 * Tests for  {@link MongoDataAutoConfiguration}.
 * @author Josh Long
 * @author Oliver Gierke
 */
public class MongoDataAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,MongoAutoConfiguration.class,MongoDataAutoConfiguration.class));
  @Test public void templateExists(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(MongoTemplate.class));
  }
  @Test public void gridFsTemplateExists(){
    this.contextRunner.withPropertyValues("spring.data.mongodb.gridFsDatabase:grid").run((context) -> assertThat(context).hasSingleBean(GridFsTemplate.class));
  }
  @Test public void customConversions(){
    this.contextRunner.withUserConfiguration(CustomConversionsConfig.class).run((context) -> {
      MongoTemplate template=context.getBean(MongoTemplate.class);
      assertThat(template.getConverter().getConversionService().canConvert(MongoClient.class,Boolean.class)).isTrue();
    }
);
  }
  @Test public void usesAutoConfigurationPackageToPickUpDocumentTypes(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
    String cityPackage=City.class.getPackage().getName();
    AutoConfigurationPackages.register(context,cityPackage);
    context.register(MongoAutoConfiguration.class,MongoDataAutoConfiguration.class);
    try {
      context.refresh();
      assertDomainTypesDiscovered(context.getBean(MongoMappingContext.class),City.class);
    }
  finally {
      context.close();
    }
  }
  @Test public void defaultFieldNamingStrategy(){
    this.contextRunner.run((context) -> {
      MongoMappingContext mappingContext=context.getBean(MongoMappingContext.class);
      FieldNamingStrategy fieldNamingStrategy=(FieldNamingStrategy)ReflectionTestUtils.getField(mappingContext,"fieldNamingStrategy");
      assertThat(fieldNamingStrategy.getClass()).isEqualTo(PropertyNameFieldNamingStrategy.class);
    }
);
  }
  @Test public void customFieldNamingStrategy(){
    this.contextRunner.withPropertyValues("spring.data.mongodb.field-naming-strategy:" + CamelCaseAbbreviatingFieldNamingStrategy.class.getName()).run((context) -> {
      MongoMappingContext mappingContext=context.getBean(MongoMappingContext.class);
      FieldNamingStrategy fieldNamingStrategy=(FieldNamingStrategy)ReflectionTestUtils.getField(mappingContext,"fieldNamingStrategy");
      assertThat(fieldNamingStrategy.getClass()).isEqualTo(CamelCaseAbbreviatingFieldNamingStrategy.class);
    }
);
  }
  @Test public void interfaceFieldNamingStrategy(){
    this.contextRunner.withPropertyValues("spring.data.mongodb.field-naming-strategy:" + FieldNamingStrategy.class.getName()).run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class));
  }
  @Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet(){
    this.contextRunner.withUserConfiguration(EntityScanConfig.class).run((context) -> {
      MongoMappingContext mappingContext=context.getBean(MongoMappingContext.class);
      Set<Class<?>> initialEntitySet=(Set<Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
      assertThat(initialEntitySet).containsOnly(City.class,Country.class);
    }
);
  }
  @Test public void registersDefaultSimpleTypesWithMappingContext(){
    this.contextRunner.run((context) -> {
      MongoMappingContext mappingContext=context.getBean(MongoMappingContext.class);
      BasicMongoPersistentEntity<?> entity=mappingContext.getPersistentEntity(Sample.class);
      MongoPersistentProperty dateProperty=entity.getPersistentProperty("date");
      assertThat(dateProperty.isEntity()).isFalse();
    }
);
  }
  @Test public void backsOffIfMongoClientBeanIsNotPresent(){
    ApplicationContextRunner runner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(MongoDataAutoConfiguration.class));
    runner.run((context) -> assertThat(context).doesNotHaveBean(MongoDataAutoConfiguration.class));
  }
  @Test public void createsMongoDbFactoryForPreferredMongoClient(){
    this.contextRunner.run((context) -> {
      MongoDbFactory dbFactory=context.getBean(MongoDbFactory.class);
      assertThat(dbFactory).isInstanceOf(SimpleMongoDbFactory.class);
    }
);
  }
  @Test public void createsMongoDbFactoryForFallbackMongoClient(){
    this.contextRunner.withUserConfiguration(FallbackMongoClientConfiguration.class).run((context) -> {
      MongoDbFactory dbFactory=context.getBean(MongoDbFactory.class);
      assertThat(dbFactory).isInstanceOf(SimpleMongoClientDbFactory.class);
    }
);
  }
  @SuppressWarnings({"unchecked","rawtypes"}) private static void assertDomainTypesDiscovered(  MongoMappingContext mappingContext,  Class<?>... types){
    Set<Class> initialEntitySet=(Set<Class>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
    assertThat(initialEntitySet).containsOnly(types);
  }
@Configuration static class CustomConversionsConfig {
    @Bean public MongoCustomConversions customConversions(){
      return new MongoCustomConversions(Arrays.asList(new MyConverter()));
    }
  }
@Configuration @EntityScan("org.springframework.boot.autoconfigure.data.mongo") static class EntityScanConfig {
  }
@Configuration static class FallbackMongoClientConfiguration {
    @Bean com.mongodb.client.MongoClient fallbackMongoClient(){
      return MongoClients.create();
    }
  }
private static class MyConverter implements Converter<MongoClient,Boolean> {
    @Override public Boolean convert(    MongoClient source){
      return null;
    }
  }
static class Sample {
    LocalDateTime date;
  }
}
