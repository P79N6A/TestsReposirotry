@RestController protected static class Errors {
  public String getFoo(){
    return "foo";
  }
  @RequestMapping("/") public String home(){
    throw new IllegalStateException("Expected!");
  }
  @RequestMapping("/annotated") public String annotated(){
    throw new ExpectedException();
  }
  @RequestMapping("/annotatedNoReason") public String annotatedNoReason(){
    throw new NoReasonExpectedException("Expected message");
  }
  @RequestMapping("/bind") public String bind() throws Exception {
    BindException error=new BindException(this,"test");
    error.rejectValue("foo","bar.error");
    throw error;
  }
  @PostMapping(path="/bodyValidation",produces="application/json") public String bodyValidation(  @Valid @RequestBody DummyBody body){
    return body.content;
  }
  @RequestMapping(path="/noStorage") public String noStorage(){
    throw new InsufficientStorageException();
  }
@ResponseStatus(value=HttpStatus.BAD_REQUEST,reason="Expected!") @SuppressWarnings("serial") private static class ExpectedException extends RuntimeException {
  }
@ResponseStatus(HttpStatus.INSUFFICIENT_STORAGE) private static class InsufficientStorageException extends RuntimeException {
  }
@ResponseStatus(HttpStatus.NOT_ACCEPTABLE) @SuppressWarnings("serial") private static class NoReasonExpectedException extends RuntimeException {
    NoReasonExpectedException(    String message){
      super(message);
    }
  }
static class DummyBody {
    @NotNull private String content;
    public String getContent(){
      return this.content;
    }
    public void setContent(    String content){
      this.content=content;
    }
  }
}
