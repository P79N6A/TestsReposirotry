/** 
 * Integration tests for  {@link EndpointRequest} with Spring MVC.
 * @author Madhura Bhave
 */
public class MvcEndpointRequestIntegrationTests extends AbstractEndpointRequestIntegrationTests {
  @Test public void toLinksWhenServletPathSetShouldMatch(){
    getContextRunner().withPropertyValues("spring.mvc.servlet.path=/admin").run((context) -> {
      WebTestClient webTestClient=getWebTestClient(context);
      webTestClient.get().uri("/admin/actuator/").exchange().expectStatus().isOk();
      webTestClient.get().uri("/admin/actuator").exchange().expectStatus().isOk();
    }
);
  }
  @Test public void toEndpointWhenServletPathSetShouldMatch(){
    getContextRunner().withPropertyValues("spring.mvc.servlet.path=/admin").run((context) -> {
      WebTestClient webTestClient=getWebTestClient(context);
      webTestClient.get().uri("/admin/actuator/e1").exchange().expectStatus().isOk();
    }
);
  }
  @Test public void toAnyEndpointWhenServletPathSetShouldMatch(){
    getContextRunner().withPropertyValues("spring.mvc.servlet.path=/admin","spring.security.user.password=password").run((context) -> {
      WebTestClient webTestClient=getWebTestClient(context);
      webTestClient.get().uri("/admin/actuator/e2").exchange().expectStatus().isUnauthorized();
      webTestClient.get().uri("/admin/actuator/e2").header("Authorization",getBasicAuth()).exchange().expectStatus().isOk();
    }
);
  }
  @Override protected WebApplicationContextRunner getContextRunner(){
    return new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withUserConfiguration(WebMvcEndpointConfiguration.class,SecurityConfiguration.class,BaseConfiguration.class).withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class,WebMvcAutoConfiguration.class,SecurityRequestMatcherProviderAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,DispatcherServletAutoConfiguration.class));
  }
@Configuration @EnableConfigurationProperties(WebEndpointProperties.class) static class WebMvcEndpointConfiguration {
    private final ApplicationContext applicationContext;
    WebMvcEndpointConfiguration(    ApplicationContext applicationContext){
      this.applicationContext=applicationContext;
    }
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public WebMvcEndpointHandlerMapping webEndpointServletHandlerMapping(){
      List<String> mediaTypes=Arrays.asList(MediaType.APPLICATION_JSON_VALUE,ActuatorMediaType.V2_JSON);
      EndpointMediaTypes endpointMediaTypes=new EndpointMediaTypes(mediaTypes,mediaTypes);
      WebEndpointDiscoverer discoverer=new WebEndpointDiscoverer(this.applicationContext,new ConversionServiceParameterValueMapper(),endpointMediaTypes,Arrays.asList((id) -> id.toString()),Collections.emptyList(),Collections.emptyList());
      return new WebMvcEndpointHandlerMapping(new EndpointMapping("/actuator"),discoverer.getEndpoints(),endpointMediaTypes,new CorsConfiguration(),new EndpointLinksResolver(discoverer.getEndpoints()));
    }
  }
}
