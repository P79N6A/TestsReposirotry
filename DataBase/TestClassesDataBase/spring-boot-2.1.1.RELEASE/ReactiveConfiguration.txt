@Configuration @EnableWebFlux @ImportAutoConfiguration(ErrorWebFluxAutoConfiguration.class) static class ReactiveConfiguration {
  private int port;
  @Bean public NettyReactiveWebServerFactory netty(){
    return new NettyReactiveWebServerFactory(0);
  }
  @Bean public HttpHandler httpHandler(  ApplicationContext applicationContext){
    return WebHttpHandlerBuilder.applicationContext(applicationContext).build();
  }
  @Bean public WebFluxEndpointHandlerMapping webEndpointHandlerMapping(  Environment environment,  WebEndpointDiscoverer endpointDiscoverer,  EndpointMediaTypes endpointMediaTypes){
    CorsConfiguration corsConfiguration=new CorsConfiguration();
    corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com"));
    corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST"));
    return new WebFluxEndpointHandlerMapping(new EndpointMapping(environment.getProperty("endpointPath")),endpointDiscoverer.getEndpoints(),endpointMediaTypes,corsConfiguration,new EndpointLinksResolver(endpointDiscoverer.getEndpoints()));
  }
  @Bean public ApplicationListener<ReactiveWebServerInitializedEvent> serverInitializedListener(){
    return (event) -> this.port=event.getWebServer().getPort();
  }
}
