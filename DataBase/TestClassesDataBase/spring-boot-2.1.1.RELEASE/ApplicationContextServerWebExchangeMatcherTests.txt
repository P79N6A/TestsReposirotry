/** 
 * Tests for  {@link ApplicationContextServerWebExchangeMatcher}.
 * @author Madhura Bhave
 */
public class ApplicationContextServerWebExchangeMatcherTests {
  @Test public void createWhenContextClassIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new TestApplicationContextServerWebExchangeMatcher<>(null)).withMessageContaining("Context class must not be null");
  }
  @Test public void matchesWhenContextClassIsApplicationContextShouldProvideContext(){
    ServerWebExchange exchange=createExchange();
    StaticApplicationContext context=(StaticApplicationContext)exchange.getApplicationContext();
    assertThat(new TestApplicationContextServerWebExchangeMatcher<>(ApplicationContext.class).callMatchesAndReturnProvidedContext(exchange).get()).isEqualTo(context);
  }
  @Test public void matchesWhenContextClassIsExistingBeanShouldProvideBean(){
    ServerWebExchange exchange=createExchange();
    StaticApplicationContext context=(StaticApplicationContext)exchange.getApplicationContext();
    context.registerSingleton("existingBean",ExistingBean.class);
    assertThat(new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange).get()).isEqualTo(context.getBean(ExistingBean.class));
  }
  @Test public void matchesWhenContextClassIsMissingBeanShouldProvideException(){
    ServerWebExchange exchange=createExchange();
    Supplier<ExistingBean> supplier=new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange);
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(supplier::get);
  }
  @Test public void matchesWhenContextIsNull(){
    MockServerWebExchange exchange=MockServerWebExchange.from(MockServerHttpRequest.get("/path").build());
    assertThatIllegalStateException().isThrownBy(() -> new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange)).withMessageContaining("No ApplicationContext found on ServerWebExchange.");
  }
  private ServerWebExchange createExchange(){
    StaticApplicationContext context=new StaticApplicationContext();
    TestHttpWebHandlerAdapter adapter=new TestHttpWebHandlerAdapter(mock(WebHandler.class));
    adapter.setApplicationContext(context);
    return adapter.createExchange(MockServerHttpRequest.get("/path").build(),new MockServerHttpResponse());
  }
static class TestHttpWebHandlerAdapter extends HttpWebHandlerAdapter {
    TestHttpWebHandlerAdapter(    WebHandler delegate){
      super(delegate);
    }
    @Override protected ServerWebExchange createExchange(    ServerHttpRequest request,    ServerHttpResponse response){
      return super.createExchange(request,response);
    }
  }
static class ExistingBean {
  }
static class NewBean {
    private final ExistingBean bean;
    NewBean(    ExistingBean bean){
      this.bean=bean;
    }
    public ExistingBean getBean(){
      return this.bean;
    }
  }
static class TestApplicationContextServerWebExchangeMatcher<C> extends ApplicationContextServerWebExchangeMatcher<C> {
    private Supplier<C> providedContext;
    TestApplicationContextServerWebExchangeMatcher(    Class<? extends C> context){
      super(context);
    }
    Supplier<C> callMatchesAndReturnProvidedContext(    ServerWebExchange exchange){
      matches(exchange);
      return getProvidedContext();
    }
    @Override protected Mono<MatchResult> matches(    ServerWebExchange exchange,    Supplier<C> context){
      this.providedContext=context;
      return MatchResult.match();
    }
    Supplier<C> getProvidedContext(){
      return this.providedContext;
    }
  }
}
