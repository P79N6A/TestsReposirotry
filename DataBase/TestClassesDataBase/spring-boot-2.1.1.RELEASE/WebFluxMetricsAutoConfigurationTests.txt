/** 
 * Tests for  {@link WebFluxMetricsAutoConfiguration}
 * @author Brian Clozel
 * @author Dmytro Nosan
 */
public class WebFluxMetricsAutoConfigurationTests {
  private ReactiveWebApplicationContextRunner contextRunner=new ReactiveWebApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(WebFluxMetricsAutoConfiguration.class));
  @Rule public OutputCapture output=new OutputCapture();
  @Test public void shouldProvideWebFluxMetricsBeans(){
    this.contextRunner.run((context) -> {
      assertThat(context).getBeans(MetricsWebFilter.class).hasSize(1);
      assertThat(context).getBeans(DefaultWebFluxTagsProvider.class).hasSize(1);
    }
);
  }
  @Test public void shouldNotOverrideCustomTagsProvider(){
    this.contextRunner.withUserConfiguration(CustomWebFluxTagsProviderConfig.class).run((context) -> assertThat(context).getBeans(WebFluxTagsProvider.class).hasSize(1).containsKey("customWebFluxTagsProvider"));
  }
  @Test public void afterMaxUrisReachedFurtherUrisAreDenied(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.max-uri-tags=2").run((context) -> {
      MeterRegistry registry=getInitializedMeterRegistry(context);
      assertThat(registry.get("http.server.requests").meters()).hasSize(2);
      assertThat(this.output.toString()).contains("Reached the maximum number of URI tags " + "for 'http.server.requests'");
    }
);
  }
  @Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.max-uri-tags=5").run((context) -> {
      MeterRegistry registry=getInitializedMeterRegistry(context);
      assertThat(registry.get("http.server.requests").meters()).hasSize(3);
      assertThat(this.output.toString()).doesNotContain("Reached the maximum number of URI tags for 'http.server.requests'");
    }
);
  }
  @Test public void metricsAreNotRecordedIfAutoTimeRequestsIsDisabled(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.auto-time-requests=false").run((context) -> {
      MeterRegistry registry=getInitializedMeterRegistry(context);
      assertThat(registry.find("http.server.requests").meter()).isNull();
    }
);
  }
  private MeterRegistry getInitializedMeterRegistry(  AssertableReactiveWebApplicationContext context){
    WebTestClient webTestClient=WebTestClient.bindToApplicationContext(context).build();
    for (int i=0; i < 3; i++) {
      webTestClient.get().uri("/test" + i).exchange().expectStatus().isOk();
    }
    return context.getBean(MeterRegistry.class);
  }
@Configuration protected static class CustomWebFluxTagsProviderConfig {
    @Bean public WebFluxTagsProvider customWebFluxTagsProvider(){
      return mock(WebFluxTagsProvider.class);
    }
  }
}
