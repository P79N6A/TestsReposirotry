/** 
 * Tests for  {@link AutoConfigurationPackages}.
 * @author Phillip Webb
 * @author Oliver Gierke
 */
@SuppressWarnings("resource") public class AutoConfigurationPackagesTests {
  @Test public void setAndGet(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(ConfigWithRegistrar.class);
    assertThat(AutoConfigurationPackages.get(context.getBeanFactory())).containsExactly(getClass().getPackage().getName());
  }
  @Test public void getWithoutSet(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(EmptyConfig.class);
    assertThatIllegalStateException().isThrownBy(() -> AutoConfigurationPackages.get(context.getBeanFactory())).withMessageContaining("Unable to retrieve @EnableAutoConfiguration base packages");
  }
  @Test public void detectsMultipleAutoConfigurationPackages(){
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(FirstConfiguration.class,SecondConfiguration.class);
    List<String> packages=AutoConfigurationPackages.get(context.getBeanFactory());
    Package package1=FirstConfiguration.class.getPackage();
    Package package2=SecondConfiguration.class.getPackage();
    assertThat(packages).containsOnly(package1.getName(),package2.getName());
  }
@Configuration @Import(AutoConfigurationPackages.Registrar.class) static class ConfigWithRegistrar {
  }
@Configuration static class EmptyConfig {
  }
  /** 
 * Test helper to allow  {@link Registrar} to be referenced from other packages.
 */
public static class TestRegistrar extends Registrar {
  }
}
