/** 
 * Tests for the class names in the  {@link DatabaseDriver} enumeration.
 * @author Andy Wilkinson
 */
@RunWith(Parameterized.class) public class DatabaseDriverClassNameTests {
  private static final Set<DatabaseDriver> EXCLUDED_DRIVERS=Collections.unmodifiableSet(EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.HANA,DatabaseDriver.TERADATA));
  private final String className;
  private final Class<?> requiredType;
  @Parameters(name="{0} {2}") public static List<Object[]> parameters(){
    DatabaseDriver[] databaseDrivers=DatabaseDriver.values();
    List<Object[]> parameters=new ArrayList<>();
    for (    DatabaseDriver databaseDriver : databaseDrivers) {
      if (EXCLUDED_DRIVERS.contains(databaseDriver)) {
        continue;
      }
      parameters.add(new Object[]{databaseDriver,databaseDriver.getDriverClassName(),Driver.class});
      if (databaseDriver.getXaDataSourceClassName() != null) {
        parameters.add(new Object[]{databaseDriver,databaseDriver.getXaDataSourceClassName(),XADataSource.class});
      }
    }
    return parameters;
  }
  public DatabaseDriverClassNameTests(  DatabaseDriver driver,  String className,  Class<?> requiredType){
    this.className=className;
    this.requiredType=requiredType;
  }
  @Test public void databaseClassIsOfRequiredType() throws Exception {
    assertThat(getInterfaceNames(this.className.replace('.','/'))).contains(this.requiredType.getName().replace('.','/'));
  }
  private List<String> getInterfaceNames(  String className) throws IOException {
    ClassReader classReader=new ClassReader(getClass().getResourceAsStream("/" + className + ".class"));
    List<String> interfaceNames=new ArrayList<>();
    for (    String name : classReader.getInterfaces()) {
      interfaceNames.add(name);
      interfaceNames.addAll(getInterfaceNames(name));
    }
    return interfaceNames;
  }
}
