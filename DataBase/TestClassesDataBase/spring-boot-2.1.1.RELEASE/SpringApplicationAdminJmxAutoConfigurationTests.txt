/** 
 * Tests for  {@link SpringApplicationAdminJmxAutoConfiguration}.
 * @author Stephane Nicoll
 * @author Andy Wilkinson
 */
public class SpringApplicationAdminJmxAutoConfigurationTests {
  private static final String ENABLE_ADMIN_PROP="spring.application.admin.enabled=true";
  private static final String DEFAULT_JMX_NAME="org.springframework.boot:type=Admin,name=SpringApplication";
  private final MBeanServer server=ManagementFactory.getPlatformMBeanServer();
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(MultipleMBeanExportersConfiguration.class,SpringApplicationAdminJmxAutoConfiguration.class));
  @Test public void notRegisteredByDefault(){
    this.contextRunner.run((context) -> assertThatExceptionOfType(InstanceNotFoundException.class).isThrownBy(() -> this.server.getObjectInstance(createDefaultObjectName())));
  }
  @Test public void registeredWithProperty(){
    this.contextRunner.withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {
      ObjectName objectName=createDefaultObjectName();
      ObjectInstance objectInstance=this.server.getObjectInstance(objectName);
      assertThat(objectInstance).as("Lifecycle bean should have been registered").isNotNull();
    }
);
  }
  @Test public void registerWithCustomJmxName(){
    String customJmxName="org.acme:name=FooBar";
    this.contextRunner.withSystemProperties("spring.application.admin.jmx-name=" + customJmxName).withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {
      try {
        this.server.getObjectInstance(createObjectName(customJmxName));
      }
 catch (      InstanceNotFoundException ex) {
        fail("Admin MBean should have been exposed with custom name");
      }
      assertThatExceptionOfType(InstanceNotFoundException.class).isThrownBy(() -> this.server.getObjectInstance(createDefaultObjectName()));
    }
);
  }
  @Test public void registerWithSimpleWebApp() throws Exception {
    try (ConfigurableApplicationContext context=new SpringApplicationBuilder().sources(ServletWebServerFactoryAutoConfiguration.class,DispatcherServletAutoConfiguration.class,MultipleMBeanExportersConfiguration.class,SpringApplicationAdminJmxAutoConfiguration.class).run("--" + ENABLE_ADMIN_PROP,"--server.port=0")){
      assertThat(context).isInstanceOf(ServletWebServerApplicationContext.class);
      assertThat(this.server.getAttribute(createDefaultObjectName(),"EmbeddedWebApplication")).isEqualTo(Boolean.TRUE);
      int expected=((ServletWebServerApplicationContext)context).getWebServer().getPort();
      String actual=getProperty(createDefaultObjectName(),"local.server.port");
      assertThat(actual).isEqualTo(String.valueOf(expected));
    }
   }
  @Test public void onlyRegisteredOnceWhenThereIsAChildContext(){
    SpringApplicationBuilder parentBuilder=new SpringApplicationBuilder().web(WebApplicationType.NONE).sources(MultipleMBeanExportersConfiguration.class,SpringApplicationAdminJmxAutoConfiguration.class);
    SpringApplicationBuilder childBuilder=parentBuilder.child(MultipleMBeanExportersConfiguration.class,SpringApplicationAdminJmxAutoConfiguration.class).web(WebApplicationType.NONE);
    try (ConfigurableApplicationContext parent=parentBuilder.run("--" + ENABLE_ADMIN_PROP);ConfigurableApplicationContext child=childBuilder.run("--" + ENABLE_ADMIN_PROP)){
      BeanFactoryUtils.beanOfType(parent.getBeanFactory(),SpringApplicationAdminMXBeanRegistrar.class);
      assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> BeanFactoryUtils.beanOfType(child.getBeanFactory(),SpringApplicationAdminMXBeanRegistrar.class));
    }
   }
  private ObjectName createDefaultObjectName(){
    return createObjectName(DEFAULT_JMX_NAME);
  }
  private ObjectName createObjectName(  String jmxName){
    try {
      return new ObjectName(jmxName);
    }
 catch (    MalformedObjectNameException ex) {
      throw new IllegalStateException("Invalid jmx name " + jmxName,ex);
    }
  }
  private String getProperty(  ObjectName objectName,  String key) throws Exception {
    return (String)this.server.invoke(objectName,"getProperty",new Object[]{key},new String[]{String.class.getName()});
  }
@Configuration static class MultipleMBeanExportersConfiguration {
    @Bean public MBeanExporter firstMBeanExporter(){
      return new MBeanExporter();
    }
    @Bean public MBeanExporter secondMBeanExporter(){
      return new MBeanExporter();
    }
  }
}
