/** 
 * Tests for  {@link MailHealthIndicator}.
 * @author Johannes Edmeier
 * @author Stephane Nicoll
 */
public class MailHealthIndicatorTests {
  private JavaMailSenderImpl mailSender;
  private MailHealthIndicator indicator;
  @Before public void setup(){
    Session session=Session.getDefaultInstance(new Properties());
    session.addProvider(new Provider(Type.TRANSPORT,"success",SuccessTransport.class.getName(),"Test","1.0.0"));
    this.mailSender=mock(JavaMailSenderImpl.class);
    given(this.mailSender.getHost()).willReturn("smtp.acme.org");
    given(this.mailSender.getPort()).willReturn(25);
    given(this.mailSender.getSession()).willReturn(session);
    this.indicator=new MailHealthIndicator(this.mailSender);
  }
  @Test public void smtpIsUp(){
    given(this.mailSender.getProtocol()).willReturn("success");
    Health health=this.indicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails().get("location")).isEqualTo("smtp.acme.org:25");
  }
  @Test public void smtpIsDown() throws MessagingException {
    willThrow(new MessagingException("A test exception")).given(this.mailSender).testConnection();
    Health health=this.indicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
    assertThat(health.getDetails().get("location")).isEqualTo("smtp.acme.org:25");
    Object errorMessage=health.getDetails().get("error");
    assertThat(errorMessage).isNotNull();
    assertThat(errorMessage.toString().contains("A test exception")).isTrue();
  }
public static class SuccessTransport extends Transport {
    public SuccessTransport(    Session session,    URLName urlName){
      super(session,urlName);
    }
    @Override public void connect(    String host,    int port,    String user,    String password){
    }
    @Override public void sendMessage(    Message msg,    Address[] addresses){
    }
  }
}
