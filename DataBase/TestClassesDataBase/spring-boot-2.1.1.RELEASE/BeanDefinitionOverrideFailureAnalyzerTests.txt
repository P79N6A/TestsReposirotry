/** 
 * Tests for  {@link BeanDefinitionOverrideFailureAnalyzer}.
 * @author Andy Wilkinson
 */
public class BeanDefinitionOverrideFailureAnalyzerTests {
  @Test public void analyzeBeanDefinitionOverrideException(){
    FailureAnalysis analysis=performAnalysis(BeanOverrideConfiguration.class);
    String description=analysis.getDescription();
    assertThat(description).contains("The bean 'testBean', defined in " + SecondConfiguration.class.getName() + ", could not be registered.");
    assertThat(description).contains(FirstConfiguration.class.getName());
  }
  private FailureAnalysis performAnalysis(  Class<?> configuration){
    BeanDefinitionOverrideException failure=createFailure(configuration);
    assertThat(failure).isNotNull();
    return new BeanDefinitionOverrideFailureAnalyzer().analyze(failure);
  }
  private BeanDefinitionOverrideException createFailure(  Class<?> configuration){
    try {
      AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
      context.setAllowBeanDefinitionOverriding(false);
      context.register(configuration);
      context.refresh();
      context.close();
      return null;
    }
 catch (    BeanDefinitionOverrideException ex) {
      return ex;
    }
  }
@Configuration @Import({FirstConfiguration.class,SecondConfiguration.class}) static class BeanOverrideConfiguration {
  }
@Configuration static class FirstConfiguration {
    @Bean public String testBean(){
      return "test";
    }
  }
@Configuration static class SecondConfiguration {
    @Bean public String testBean(){
      return "test";
    }
  }
}
