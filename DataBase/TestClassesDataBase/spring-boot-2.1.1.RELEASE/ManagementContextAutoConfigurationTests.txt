/** 
 * Tests for  {@link ManagementContextAutoConfiguration}.
 * @author Madhura Bhave
 */
public class ManagementContextAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class,ServletManagementContextAutoConfiguration.class));
  @Rule public OutputCapture output=new OutputCapture();
  @Test public void managementServerPortShouldBeIgnoredForNonEmbeddedServer(){
    this.contextRunner.withPropertyValues("management.server.port=8081").run((context) -> {
      assertThat(context.getStartupFailure()).isNull();
      assertThat(this.output.toString()).contains("Could not start embedded management container on " + "different port (management endpoints are still available through JMX)");
    }
);
  }
  @Test public void childManagementContextShouldStartForEmbeddedServer(){
    WebApplicationContextRunner contextRunner=new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class,ServletWebServerFactoryAutoConfiguration.class,ServletManagementContextAutoConfiguration.class,WebEndpointAutoConfiguration.class,EndpointAutoConfiguration.class));
    contextRunner.withPropertyValues("management.server.port=8081").run((context) -> assertThat(this.output.toString()).doesNotContain("Could not start embedded management container on " + "different port (management endpoints are still available through JMX)"));
  }
}
