/** 
 * Tests for  {@link MongoReactiveRepositoriesAutoConfiguration}.
 * @author Mark Paluch
 * @author Andy Wilkinson
 */
public class MongoReactiveRepositoriesAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,MongoDataAutoConfiguration.class,MongoReactiveAutoConfiguration.class,MongoReactiveDataAutoConfiguration.class,MongoReactiveRepositoriesAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class));
  @Test public void testDefaultRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(ReactiveCityRepository.class);
      assertThat(context).hasSingleBean(MongoClient.class);
      MongoMappingContext mappingContext=context.getBean(MongoMappingContext.class);
      @SuppressWarnings("unchecked") Set<? extends Class<?>> entities=(Set<? extends Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
      assertThat(entities).hasSize(1);
    }
);
  }
  @Test public void testNoRepositoryConfiguration(){
    this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run((context) -> assertThat(context).hasSingleBean(MongoClient.class));
  }
  @Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized(){
    this.contextRunner.withUserConfiguration(CustomizedConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityMongoDbRepository.class));
  }
  @Test public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories(){
    this.contextRunner.withUserConfiguration(SortOfInvalidCustomConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class));
  }
  @Test public void enablingImperativeRepositoriesDisablesReactiveRepositories(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.mongodb.repositories.type=imperative").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class));
  }
  @Test public void enablingNoRepositoriesDisablesReactiveRepositories(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.mongodb.repositories.type=none").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class));
  }
@Configuration @TestAutoConfigurationPackage(City.class) protected static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) protected static class EmptyConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(MongoReactiveRepositoriesAutoConfigurationTests.class) @EnableMongoRepositories(basePackageClasses=CityMongoDbRepository.class) protected static class CustomizedConfiguration {
  }
@Configuration @EnableReactiveMongoRepositories("foo.bar") @TestAutoConfigurationPackage(MongoReactiveRepositoriesAutoConfigurationTests.class) protected static class SortOfInvalidCustomConfiguration {
  }
}
