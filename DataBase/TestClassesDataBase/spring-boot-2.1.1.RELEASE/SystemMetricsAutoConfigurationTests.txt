/** 
 * Tests for  {@link SystemMetricsAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class SystemMetricsAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(SystemMetricsAutoConfiguration.class));
  @Test public void autoConfiguresUptimeMetrics(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(UptimeMetrics.class));
  }
  @Test @Deprecated public void allowsUptimeMetricsToBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.binders.uptime.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(UptimeMetrics.class));
  }
  @Test public void allowsCustomUptimeMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomUptimeMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(UptimeMetrics.class).hasBean("customUptimeMetrics"));
  }
  @Test public void autoConfiguresProcessorMetrics(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(ProcessorMetrics.class));
  }
  @Test @Deprecated public void allowsProcessorMetricsToBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.binders.processor.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(ProcessorMetrics.class));
  }
  @Test public void allowsCustomProcessorMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomProcessorMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(ProcessorMetrics.class).hasBean("customProcessorMetrics"));
  }
  @Test public void autoConfiguresFileDescriptorMetrics(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(FileDescriptorMetrics.class));
  }
  @Test @Deprecated public void allowsFileDescriptorMetricsToBeDisabled(){
    this.contextRunner.withPropertyValues("management.metrics.binders.files.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(FileDescriptorMetrics.class));
  }
  @Test public void allowsCustomFileDescriptorMetricsToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomFileDescriptorMetricsConfiguration.class).run((context) -> assertThat(context).hasSingleBean(FileDescriptorMetrics.class).hasBean("customFileDescriptorMetrics"));
  }
@Configuration static class CustomUptimeMetricsConfiguration {
    @Bean public UptimeMetrics customUptimeMetrics(){
      return new UptimeMetrics();
    }
  }
@Configuration static class CustomProcessorMetricsConfiguration {
    @Bean public ProcessorMetrics customProcessorMetrics(){
      return new ProcessorMetrics();
    }
  }
@Configuration static class CustomFileDescriptorMetricsConfiguration {
    @Bean public FileDescriptorMetrics customFileDescriptorMetrics(){
      return new FileDescriptorMetrics();
    }
  }
}
