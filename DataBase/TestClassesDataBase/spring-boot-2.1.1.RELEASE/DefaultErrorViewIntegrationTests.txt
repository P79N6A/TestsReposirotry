/** 
 * Integration tests for the default error view.
 * @author Dave Syer
 */
@RunWith(SpringRunner.class) @SpringBootTest @DirtiesContext public class DefaultErrorViewIntegrationTests {
  @Autowired private WebApplicationContext wac;
  private MockMvc mockMvc;
  @Before public void setup(){
    this.mockMvc=MockMvcBuilders.webAppContextSetup(this.wac).build();
  }
  @Test public void testErrorForBrowserClient() throws Exception {
    MvcResult response=this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).contains("<html>");
    assertThat(content).contains("999");
  }
  @Test public void testErrorWithHtmlEscape() throws Exception {
    MvcResult response=this.mockMvc.perform(get("/error").requestAttr("javax.servlet.error.exception",new RuntimeException("<script>alert('Hello World')</script>")).accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).contains("&lt;script&gt;");
    assertThat(content).contains("Hello World");
    assertThat(content).contains("999");
  }
  @Test public void testErrorWithSpelEscape() throws Exception {
    String spel="${T(" + getClass().getName() + ").injectCall()}";
    MvcResult response=this.mockMvc.perform(get("/error").requestAttr("javax.servlet.error.exception",new RuntimeException(spel)).accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn();
    String content=response.getResponse().getContentAsString();
    assertThat(content).doesNotContain("injection");
  }
  public static String injectCall(){
    return "injection";
  }
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import({ServletWebServerFactoryAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,ErrorMvcAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) protected @interface MinimalWebConfiguration {}
@Configuration @MinimalWebConfiguration public static class TestConfiguration {
    public static void main(    String[] args){
      SpringApplication.run(TestConfiguration.class,args);
    }
  }
}
