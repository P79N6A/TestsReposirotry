/** 
 * Tests for  {@link Neo4jHealthIndicator}.
 * @author Eric Spiegelberg
 * @author Stephane Nicoll
 */
public class Neo4jHealthIndicatorTests {
  private Session session;
  private Neo4jHealthIndicator neo4jHealthIndicator;
  @Before public void before(){
    this.session=mock(Session.class);
    SessionFactory sessionFactory=mock(SessionFactory.class);
    given(sessionFactory.openSession()).willReturn(this.session);
    this.neo4jHealthIndicator=new Neo4jHealthIndicator(sessionFactory);
  }
  @Test public void neo4jUp(){
    Result result=mock(Result.class);
    given(this.session.query(Neo4jHealthIndicator.CYPHER,Collections.emptyMap())).willReturn(result);
    int nodeCount=500;
    Map<String,Object> expectedCypherDetails=new HashMap<>();
    expectedCypherDetails.put("nodes",nodeCount);
    List<Map<String,Object>> queryResults=new ArrayList<>();
    queryResults.add(expectedCypherDetails);
    given(result.queryResults()).willReturn(queryResults);
    Health health=this.neo4jHealthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    Map<String,Object> details=health.getDetails();
    int nodeCountFromDetails=(int)details.get("nodes");
    Assert.assertEquals(nodeCount,nodeCountFromDetails);
  }
  @Test public void neo4jDown(){
    CypherException cypherException=new CypherException("Error executing Cypher","Neo.ClientError.Statement.SyntaxError","Unable to execute invalid Cypher");
    given(this.session.query(Neo4jHealthIndicator.CYPHER,Collections.emptyMap())).willThrow(cypherException);
    Health health=this.neo4jHealthIndicator.health();
    assertThat(health.getStatus()).isEqualTo(Status.DOWN);
  }
}
