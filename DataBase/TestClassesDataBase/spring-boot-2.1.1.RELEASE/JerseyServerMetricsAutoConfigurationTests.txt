/** 
 * Tests for  {@link JerseyServerMetricsAutoConfiguration}.
 * @author Michael Weirauch
 * @author Michael Simons
 */
public class JerseyServerMetricsAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(JerseyServerMetricsAutoConfiguration.class));
  private final WebApplicationContextRunner webContextRunner=new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(JerseyAutoConfiguration.class,JerseyServerMetricsAutoConfiguration.class,ServletWebServerFactoryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,MetricsAutoConfiguration.class)).withUserConfiguration(ResourceConfiguration.class).withPropertyValues("server.port:0");
  @Test public void shouldOnlyBeActiveInWebApplicationContext(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ResourceConfigCustomizer.class));
  }
  @Test public void shouldProvideAllNecessaryBeans(){
    this.webContextRunner.run((context) -> assertThat(context).hasSingleBean(DefaultJerseyTagsProvider.class).hasSingleBean(ResourceConfigCustomizer.class));
  }
  @Test public void shouldHonorExistingTagProvider(){
    this.webContextRunner.withUserConfiguration(CustomJerseyTagsProviderConfiguration.class).run((context) -> assertThat(context).hasSingleBean(CustomJerseyTagsProvider.class));
  }
  @Test public void httpRequestsAreTimed(){
    this.webContextRunner.run((context) -> {
      doRequest(context);
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      Timer timer=registry.get("http.server.requests").tag("uri","/users/{id}").timer();
      assertThat(timer.count()).isEqualTo(1);
    }
);
  }
  @Test public void noHttpRequestsTimedWhenJerseyInstrumentationMissingFromClasspath(){
    this.webContextRunner.withClassLoader(new FilteredClassLoader(MetricsApplicationEventListener.class)).run((context) -> {
      doRequest(context);
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry.find("http.server.requests").timer()).isNull();
    }
);
  }
  private static void doRequest(  AssertableWebApplicationContext context){
    int port=context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class).getWebServer().getPort();
    RestTemplate restTemplate=new RestTemplate();
    restTemplate.getForEntity(URI.create("http://localhost:" + port + "/users/3"),String.class);
  }
static class ResourceConfiguration {
    @Bean ResourceConfig resourceConfig(){
      return new ResourceConfig().register(new TestResource());
    }
@Path("/users") public class TestResource {
      @GET @Path("/{id}") public String getUser(      @PathParam("id") String id){
        return id;
      }
    }
  }
static class CustomJerseyTagsProviderConfiguration {
    @Bean JerseyTagsProvider customJerseyTagsProvider(){
      return new CustomJerseyTagsProvider();
    }
  }
static class CustomJerseyTagsProvider implements JerseyTagsProvider {
    @Override public Iterable<Tag> httpRequestTags(    RequestEvent event){
      return null;
    }
    @Override public Iterable<Tag> httpLongRequestTags(    RequestEvent event){
      return null;
    }
  }
}
