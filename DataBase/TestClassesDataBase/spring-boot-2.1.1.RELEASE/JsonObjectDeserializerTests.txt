/** 
 * Tests for  {@link JsonObjectDeserializer}.
 * @author Phillip Webb
 */
public class JsonObjectDeserializerTests {
  private TestJsonObjectDeserializer<Object> testDeserializer=new TestJsonObjectDeserializer<>();
  @Test public void deserializeObjectShouldReadJson() throws Exception {
    Deserializer deserializer=new NameAndAgeJsonComponent.Deserializer();
    SimpleModule module=new SimpleModule();
    module.addDeserializer(NameAndAge.class,deserializer);
    ObjectMapper mapper=new ObjectMapper();
    mapper.registerModule(module);
    NameAndAge nameAndAge=mapper.readValue("{\"name\":\"spring\",\"age\":100}",NameAndAge.class);
    assertThat(nameAndAge.getName()).isEqualTo("spring");
    assertThat(nameAndAge.getAge()).isEqualTo(100);
  }
  @Test public void nullSafeValueWhenValueIsNullShouldReturnNull(){
    String value=this.testDeserializer.testNullSafeValue(null,String.class);
    assertThat(value).isNull();
  }
  @Test public void nullSafeValueWhenClassIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.testDeserializer.testNullSafeValue(mock(JsonNode.class),null)).withMessageContaining("Type must not be null");
  }
  @Test public void nullSafeValueWhenClassIsStringShouldReturnString(){
    JsonNode node=mock(JsonNode.class);
    given(node.textValue()).willReturn("abc");
    String value=this.testDeserializer.testNullSafeValue(node,String.class);
    assertThat(value).isEqualTo("abc");
  }
  @Test public void nullSafeValueWhenClassIsBooleanShouldReturnBoolean(){
    JsonNode node=mock(JsonNode.class);
    given(node.booleanValue()).willReturn(true);
    Boolean value=this.testDeserializer.testNullSafeValue(node,Boolean.class);
    assertThat(value).isTrue();
  }
  @Test public void nullSafeValueWhenClassIsLongShouldReturnLong(){
    JsonNode node=mock(JsonNode.class);
    given(node.longValue()).willReturn(10L);
    Long value=this.testDeserializer.testNullSafeValue(node,Long.class);
    assertThat(value).isEqualTo(10L);
  }
  @Test public void nullSafeValueWhenClassIsIntegerShouldReturnInteger(){
    JsonNode node=mock(JsonNode.class);
    given(node.intValue()).willReturn(10);
    Integer value=this.testDeserializer.testNullSafeValue(node,Integer.class);
    assertThat(value).isEqualTo(10);
  }
  @Test public void nullSafeValueWhenClassIsShortShouldReturnShort(){
    JsonNode node=mock(JsonNode.class);
    given(node.shortValue()).willReturn((short)10);
    Short value=this.testDeserializer.testNullSafeValue(node,Short.class);
    assertThat(value).isEqualTo((short)10);
  }
  @Test public void nullSafeValueWhenClassIsDoubleShouldReturnDouble(){
    JsonNode node=mock(JsonNode.class);
    given(node.doubleValue()).willReturn(1.1D);
    Double value=this.testDeserializer.testNullSafeValue(node,Double.class);
    assertThat(value).isEqualTo(1.1D);
  }
  @Test public void nullSafeValueWhenClassIsFloatShouldReturnFloat(){
    JsonNode node=mock(JsonNode.class);
    given(node.floatValue()).willReturn(1.1F);
    Float value=this.testDeserializer.testNullSafeValue(node,Float.class);
    assertThat(value).isEqualTo(1.1F);
  }
  @Test public void nullSafeValueWhenClassIsBigDecimalShouldReturnBigDecimal(){
    JsonNode node=mock(JsonNode.class);
    given(node.decimalValue()).willReturn(BigDecimal.TEN);
    BigDecimal value=this.testDeserializer.testNullSafeValue(node,BigDecimal.class);
    assertThat(value).isEqualTo(BigDecimal.TEN);
  }
  @Test public void nullSafeValueWhenClassIsBigIntegerShouldReturnBigInteger(){
    JsonNode node=mock(JsonNode.class);
    given(node.bigIntegerValue()).willReturn(BigInteger.TEN);
    BigInteger value=this.testDeserializer.testNullSafeValue(node,BigInteger.class);
    assertThat(value).isEqualTo(BigInteger.TEN);
  }
  @Test public void nullSafeValueWhenClassIsUnknownShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.testDeserializer.testNullSafeValue(mock(JsonNode.class),InputStream.class)).withMessageContaining("Unsupported value type java.io.InputStream");
  }
  @Test public void getRequiredNodeWhenTreeIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.testDeserializer.testGetRequiredNode(null,"test")).withMessageContaining("Tree must not be null");
  }
  @Test public void getRequiredNodeWhenNodeIsNullShouldThrowException(){
    JsonNode tree=mock(JsonNode.class);
    given(tree.get("test")).willReturn(null);
    assertThatIllegalStateException().isThrownBy(() -> this.testDeserializer.testGetRequiredNode(tree,"test")).withMessageContaining("Missing JSON field 'test'");
  }
  @Test public void getRequiredNodeWhenNodeIsNullNodeShouldThrowException(){
    JsonNode tree=mock(JsonNode.class);
    given(tree.get("test")).willReturn(NullNode.instance);
    assertThatIllegalStateException().isThrownBy(() -> this.testDeserializer.testGetRequiredNode(tree,"test")).withMessageContaining("Missing JSON field 'test'");
  }
  @Test public void getRequiredNodeWhenNodeIsFoundShouldReturnNode(){
    JsonNode node=mock(JsonNode.class);
    JsonNode tree=node;
    given(tree.get("test")).willReturn(node);
    assertThat(this.testDeserializer.testGetRequiredNode(tree,"test")).isEqualTo(node);
  }
static class TestJsonObjectDeserializer<T> extends JsonObjectDeserializer<T> {
    @Override protected T deserializeObject(    JsonParser jsonParser,    DeserializationContext context,    ObjectCodec codec,    JsonNode tree){
      return null;
    }
    public <D>D testNullSafeValue(    JsonNode jsonNode,    Class<D> type){
      return nullSafeValue(jsonNode,type);
    }
    public JsonNode testGetRequiredNode(    JsonNode tree,    String fieldName){
      return getRequiredNode(tree,fieldName);
    }
  }
}
