/** 
 * Integration tests for  {@link CachesEndpoint} exposed by Jersey, Spring MVC, andWebFlux.
 * @author Stephane Nicoll
 */
@RunWith(WebEndpointRunners.class) public class CachesEndpointWebIntegrationTests {
  private static WebTestClient client;
  private static ConfigurableApplicationContext context;
  @Test public void allCaches(){
    client.get().uri("/actuator/caches").exchange().expectStatus().isOk().expectBody().jsonPath("cacheManagers.one.caches.a.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.one.caches.b.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.two.caches.a.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.two.caches.c.target").isEqualTo(ConcurrentHashMap.class.getName());
  }
  @Test public void namedCache(){
    client.get().uri("/actuator/caches/b").exchange().expectStatus().isOk().expectBody().jsonPath("name").isEqualTo("b").jsonPath("cacheManager").isEqualTo("one").jsonPath("target").isEqualTo(ConcurrentHashMap.class.getName());
  }
  @Test public void namedCacheWithUnknownName(){
    client.get().uri("/actuator/caches/does-not-exist").exchange().expectStatus().isNotFound();
  }
  @Test public void namedCacheWithNonUniqueName(){
    client.get().uri("/actuator/caches/a").exchange().expectStatus().isBadRequest();
  }
  @Test public void clearNamedCache(){
    Cache b=context.getBean("one",CacheManager.class).getCache("b");
    b.put("test","value");
    client.delete().uri("/actuator/caches/b").exchange().expectStatus().isNoContent();
    assertThat(b.get("test")).isNull();
  }
  @Test public void cleanNamedCacheWithUnknownName(){
    client.delete().uri("/actuator/caches/does-not-exist").exchange().expectStatus().isNotFound();
  }
  @Test public void clearNamedCacheWithNonUniqueName(){
    client.get().uri("/actuator/caches/a").exchange().expectStatus().isBadRequest();
  }
@Configuration static class TestConfiguration {
    @Bean public CacheManager one(){
      return new ConcurrentMapCacheManager("a","b");
    }
    @Bean public CacheManager two(){
      return new ConcurrentMapCacheManager("a","c");
    }
    @Bean public CachesEndpoint endpoint(    Map<String,CacheManager> cacheManagers){
      return new CachesEndpoint(cacheManagers);
    }
    @Bean public CachesEndpointWebExtension cachesEndpointWebExtension(    CachesEndpoint endpoint){
      return new CachesEndpointWebExtension(endpoint);
    }
  }
}
