/** 
 * Tests for  {@link FilteredClassLoader}.
 * @author Phillip Webb
 * @author Roy Jacobs
 */
public class FilteredClassLoaderTests {
  private static ClassPathResource TEST_RESOURCE=new ClassPathResource("org/springframework/boot/test/context/FilteredClassLoaderTestsResource.txt");
  @Test public void loadClassWhenFilteredOnPackageShouldThrowClassNotFound() throws Exception {
    try (FilteredClassLoader classLoader=new FilteredClassLoader(FilteredClassLoaderTests.class.getPackage().getName())){
      assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> classLoader.loadClass(getClass().getName()));
    }
   }
  @Test public void loadClassWhenFilteredOnClassShouldThrowClassNotFound() throws Exception {
    try (FilteredClassLoader classLoader=new FilteredClassLoader(FilteredClassLoaderTests.class)){
      assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> classLoader.loadClass(getClass().getName()));
    }
   }
  @Test public void loadClassWhenNotFilteredShouldLoadClass() throws Exception {
    FilteredClassLoader classLoader=new FilteredClassLoader((className) -> false);
    Class<?> loaded=classLoader.loadClass(getClass().getName());
    assertThat(loaded.getName()).isEqualTo(getClass().getName());
    classLoader.close();
  }
  @Test public void loadResourceWhenFilteredOnResourceShouldReturnNotFound() throws Exception {
    try (FilteredClassLoader classLoader=new FilteredClassLoader(TEST_RESOURCE)){
      final URL loaded=classLoader.getResource(TEST_RESOURCE.getPath());
      assertThat(loaded).isNull();
    }
   }
  @Test public void loadResourceWhenNotFilteredShouldLoadResource() throws Exception {
    try (FilteredClassLoader classLoader=new FilteredClassLoader((resourceName) -> false)){
      final URL loaded=classLoader.getResource(TEST_RESOURCE.getPath());
      assertThat(loaded).isNotNull();
    }
   }
}
