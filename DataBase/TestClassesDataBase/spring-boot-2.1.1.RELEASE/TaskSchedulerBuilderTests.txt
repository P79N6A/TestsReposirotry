/** 
 * Tests for  {@link TaskSchedulerBuilder}.
 * @author Stephane Nicoll
 */
public class TaskSchedulerBuilderTests {
  private TaskSchedulerBuilder builder=new TaskSchedulerBuilder();
  @Test public void poolSettingsShouldApply(){
    ThreadPoolTaskScheduler scheduler=this.builder.poolSize(4).build();
    assertThat(scheduler.getPoolSize()).isEqualTo(4);
  }
  @Test public void threadNamePrefixShouldApply(){
    ThreadPoolTaskScheduler scheduler=this.builder.threadNamePrefix("test-").build();
    assertThat(scheduler.getThreadNamePrefix()).isEqualTo("test-");
  }
  @Test public void customizersWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((TaskSchedulerCustomizer[])null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void customizersCollectionWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((Set<TaskSchedulerCustomizer>)null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void customizersShouldApply(){
    TaskSchedulerCustomizer customizer=mock(TaskSchedulerCustomizer.class);
    ThreadPoolTaskScheduler scheduler=this.builder.customizers(customizer).build();
    verify(customizer).customize(scheduler);
  }
  @Test public void customizersShouldBeAppliedLast(){
    ThreadPoolTaskScheduler scheduler=spy(new ThreadPoolTaskScheduler());
    this.builder.poolSize(4).threadNamePrefix("test-").additionalCustomizers((taskScheduler) -> {
      verify(taskScheduler).setPoolSize(4);
      verify(taskScheduler).setThreadNamePrefix("test-");
    }
);
    this.builder.configure(scheduler);
  }
  @Test public void customizersShouldReplaceExisting(){
    TaskSchedulerCustomizer customizer1=mock(TaskSchedulerCustomizer.class);
    TaskSchedulerCustomizer customizer2=mock(TaskSchedulerCustomizer.class);
    ThreadPoolTaskScheduler scheduler=this.builder.customizers(customizer1).customizers(Collections.singleton(customizer2)).build();
    verifyZeroInteractions(customizer1);
    verify(customizer2).customize(scheduler);
  }
  @Test public void additionalCustomizersWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((TaskSchedulerCustomizer[])null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((Set<TaskSchedulerCustomizer>)null)).withMessageContaining("Customizers must not be null");
  }
  @Test public void additionalCustomizersShouldAddToExisting(){
    TaskSchedulerCustomizer customizer1=mock(TaskSchedulerCustomizer.class);
    TaskSchedulerCustomizer customizer2=mock(TaskSchedulerCustomizer.class);
    ThreadPoolTaskScheduler scheduler=this.builder.customizers(customizer1).additionalCustomizers(customizer2).build();
    verify(customizer1).customize(scheduler);
    verify(customizer2).customize(scheduler);
  }
}
