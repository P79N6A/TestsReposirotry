/** 
 * Tests for  {@link LdapAutoConfiguration}.
 * @author Eddú Meléndez
 * @author Stephane Nicoll
 * @author Vedran Pavic
 */
public class LdapAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(LdapAutoConfiguration.class));
  @Test public void contextSourceWithDefaultUrl(){
    this.contextRunner.run((context) -> {
      LdapContextSource contextSource=context.getBean(LdapContextSource.class);
      String[] urls=getUrls(contextSource);
      assertThat(urls).containsExactly("ldap://localhost:389");
      assertThat(contextSource.isAnonymousReadOnly()).isFalse();
    }
);
  }
  @Test public void contextSourceWithSingleUrl(){
    this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123").run((context) -> {
      ContextSource contextSource=context.getBean(LdapContextSource.class);
      String[] urls=getUrls(contextSource);
      assertThat(urls).containsExactly("ldap://localhost:123");
    }
);
  }
  @Test public void contextSourceWithSeveralUrls(){
    this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123,ldap://mycompany:123").run((context) -> {
      ContextSource contextSource=context.getBean(LdapContextSource.class);
      LdapProperties ldapProperties=context.getBean(LdapProperties.class);
      String[] urls=getUrls(contextSource);
      assertThat(urls).containsExactly("ldap://localhost:123","ldap://mycompany:123");
      assertThat(ldapProperties.getUrls()).hasSize(2);
    }
);
  }
  @Test public void contextSourceWithExtraCustomization(){
    this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123","spring.ldap.username:root","spring.ldap.password:secret","spring.ldap.anonymous-read-only:true","spring.ldap.base:cn=SpringDevelopers","spring.ldap.baseEnvironment.java.naming.security.authentication:DIGEST-MD5").run((context) -> {
      LdapContextSource contextSource=context.getBean(LdapContextSource.class);
      assertThat(contextSource.getUserDn()).isEqualTo("root");
      assertThat(contextSource.getPassword()).isEqualTo("secret");
      assertThat(contextSource.isAnonymousReadOnly()).isTrue();
      assertThat(contextSource.getBaseLdapPathAsString()).isEqualTo("cn=SpringDevelopers");
      LdapProperties ldapProperties=context.getBean(LdapProperties.class);
      assertThat(ldapProperties.getBaseEnvironment()).containsEntry("java.naming.security.authentication","DIGEST-MD5");
    }
);
  }
  @Test public void templateExists(){
    this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:389").run((context) -> assertThat(context).hasSingleBean(LdapTemplate.class));
  }
  @Test public void contextSourceWithUserProvidedPooledContextSource(){
    this.contextRunner.withUserConfiguration(PooledContextSourceConfig.class).run((context) -> {
      LdapContextSource contextSource=context.getBean(LdapContextSource.class);
      String[] urls=getUrls(contextSource);
      assertThat(urls).containsExactly("ldap://localhost:389");
      assertThat(contextSource.isAnonymousReadOnly()).isFalse();
    }
);
  }
  private String[] getUrls(  ContextSource contextSource){
    return (String[])ReflectionTestUtils.getField(contextSource,"urls");
  }
@Configuration static class PooledContextSourceConfig {
    @Bean @Primary public PooledContextSource pooledContextSource(    LdapContextSource ldapContextSource){
      PooledContextSource pooledContextSource=new PooledContextSource(new PoolConfig());
      pooledContextSource.setContextSource(ldapContextSource);
      return pooledContextSource;
    }
  }
}
