/** 
 * Tests for  {@link Banner} and its usage by {@link SpringApplication}.
 * @author Phillip Webb
 * @author Michael Stummvoll
 * @author Michael Simons
 */
public class BannerTests {
  private ConfigurableApplicationContext context;
  @After public void cleanUp(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Rule public OutputCapture out=new OutputCapture();
  @Captor private ArgumentCaptor<Class<?>> sourceClassCaptor;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
  }
  @Test public void testDefaultBanner(){
    SpringApplication application=createSpringApplication();
    this.context=application.run();
    assertThat(this.out.toString()).contains(":: Spring Boot ::");
  }
  @Test public void testDefaultBannerInLog(){
    SpringApplication application=createSpringApplication();
    this.context=application.run();
    assertThat(this.out.toString()).contains(":: Spring Boot ::");
  }
  @Test public void testCustomBanner(){
    SpringApplication application=createSpringApplication();
    application.setBanner(new DummyBanner());
    this.context=application.run();
    assertThat(this.out.toString()).contains("My Banner");
  }
  @Test public void testBannerInContext(){
    SpringApplication application=createSpringApplication();
    this.context=application.run();
    assertThat(this.context.containsBean("springBootBanner")).isTrue();
  }
  @Test public void testCustomBannerInContext(){
    SpringApplication application=createSpringApplication();
    Banner banner=mock(Banner.class);
    application.setBanner(banner);
    this.context=application.run();
    Banner printedBanner=(Banner)this.context.getBean("springBootBanner");
    assertThat(printedBanner).hasFieldOrPropertyWithValue("banner",banner);
    verify(banner).printBanner(any(Environment.class),this.sourceClassCaptor.capture(),any(PrintStream.class));
    reset(banner);
    printedBanner.printBanner(this.context.getEnvironment(),null,System.out);
    verify(banner).printBanner(any(Environment.class),eq(this.sourceClassCaptor.getValue()),any(PrintStream.class));
  }
  @Test public void testDisableBannerInContext(){
    SpringApplication application=createSpringApplication();
    application.setBannerMode(Mode.OFF);
    this.context=application.run();
    assertThat(this.context.containsBean("springBootBanner")).isFalse();
  }
  private SpringApplication createSpringApplication(){
    SpringApplication application=new SpringApplication(Config.class);
    application.setWebApplicationType(WebApplicationType.NONE);
    return application;
  }
static class DummyBanner implements Banner {
    @Override public void printBanner(    Environment environment,    Class<?> sourceClass,    PrintStream out){
      out.println("My Banner");
    }
  }
@Configuration public static class Config {
  }
}
