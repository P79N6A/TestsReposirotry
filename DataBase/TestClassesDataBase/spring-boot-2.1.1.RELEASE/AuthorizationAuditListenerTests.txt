/** 
 * Tests for  {@link AuthorizationAuditListener}.
 */
public class AuthorizationAuditListenerTests {
  private final AuthorizationAuditListener listener=new AuthorizationAuditListener();
  private final ApplicationEventPublisher publisher=mock(ApplicationEventPublisher.class);
  @Before public void init(){
    this.listener.setApplicationEventPublisher(this.publisher);
  }
  @Test public void testAuthenticationCredentialsNotFound(){
    AuditApplicationEvent event=handleAuthorizationEvent(new AuthenticationCredentialsNotFoundEvent(this,Collections.singletonList(new SecurityConfig("USER")),new AuthenticationCredentialsNotFoundException("Bad user")));
    assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_FAILURE);
  }
  @Test public void testAuthorizationFailure(){
    AuditApplicationEvent event=handleAuthorizationEvent(new AuthorizationFailureEvent(this,Collections.singletonList(new SecurityConfig("USER")),new UsernamePasswordAuthenticationToken("user","password"),new AccessDeniedException("Bad user")));
    assertThat(event.getAuditEvent().getType()).isEqualTo(AuthorizationAuditListener.AUTHORIZATION_FAILURE);
  }
  @Test public void testDetailsAreIncludedInAuditEvent(){
    Object details=new Object();
    UsernamePasswordAuthenticationToken authentication=new UsernamePasswordAuthenticationToken("user","password");
    authentication.setDetails(details);
    AuditApplicationEvent event=handleAuthorizationEvent(new AuthorizationFailureEvent(this,Collections.singletonList(new SecurityConfig("USER")),authentication,new AccessDeniedException("Bad user")));
    assertThat(event.getAuditEvent().getType()).isEqualTo(AuthorizationAuditListener.AUTHORIZATION_FAILURE);
    assertThat(event.getAuditEvent().getData()).containsEntry("details",details);
  }
  private AuditApplicationEvent handleAuthorizationEvent(  AbstractAuthorizationEvent event){
    ArgumentCaptor<AuditApplicationEvent> eventCaptor=ArgumentCaptor.forClass(AuditApplicationEvent.class);
    this.listener.onApplicationEvent(event);
    verify(this.publisher).publishEvent(eventCaptor.capture());
    return eventCaptor.getValue();
  }
}
