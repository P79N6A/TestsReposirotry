private static class MockServer {
  private ServerSocketChannel serverSocket;
  private byte[] send;
  private byte[] expect;
  private int delay;
  private ByteBuffer actualRead;
  private ServerThread thread;
  MockServer() throws IOException {
    this.serverSocket=ServerSocketChannel.open();
    this.serverSocket.bind(new InetSocketAddress(0));
  }
  int getPort(){
    return this.serverSocket.socket().getLocalPort();
  }
  public void delay(  int delay){
    this.delay=delay;
  }
  public void willSend(  byte[] send){
    this.send=send;
  }
  public void expect(  byte[] expect){
    this.expect=expect;
  }
  public void start(){
    this.thread=new ServerThread();
    this.thread.start();
  }
  public void closeAndVerify() throws InterruptedException {
    close();
    assertThat(this.actualRead.array()).isEqualTo(this.expect);
  }
  public void close() throws InterruptedException {
    while (this.thread.isAlive()) {
      Thread.sleep(10);
    }
  }
private class ServerThread extends Thread {
    @Override public void run(){
      try {
        SocketChannel channel=MockServer.this.serverSocket.accept();
        Thread.sleep(MockServer.this.delay);
        if (MockServer.this.send != null) {
          ByteBuffer buffer=ByteBuffer.wrap(MockServer.this.send);
          while (buffer.hasRemaining()) {
            channel.write(buffer);
          }
        }
        if (MockServer.this.expect != null) {
          ByteBuffer buffer=ByteBuffer.allocate(MockServer.this.expect.length);
          while (buffer.hasRemaining()) {
            channel.read(buffer);
          }
          MockServer.this.actualRead=buffer;
        }
        channel.close();
      }
 catch (      Exception ex) {
        fail();
      }
    }
  }
}
