/** 
 * Tests for  {@link RestartApplicationListener}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class RestartApplicationListenerTests {
  private static final String ENABLED_PROPERTY="spring.devtools.restart.enabled";
  private static final String[] ARGS=new String[]{"a","b","c"};
  @Rule public final OutputCapture output=new OutputCapture();
  @Before @After public void cleanup(){
    Restarter.clearInstance();
    System.clearProperty(ENABLED_PROPERTY);
  }
  @Test public void isHighestPriority(){
    assertThat(new RestartApplicationListener().getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE);
  }
  @Test public void initializeWithReady(){
    testInitialize(false);
    assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("args",ARGS);
    assertThat(Restarter.getInstance().isFinished()).isTrue();
    assertThat((List<?>)ReflectionTestUtils.getField(Restarter.getInstance(),"rootContexts")).isNotEmpty();
  }
  @Test public void initializeWithFail(){
    testInitialize(true);
    assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("args",ARGS);
    assertThat(Restarter.getInstance().isFinished()).isTrue();
    assertThat((List<?>)ReflectionTestUtils.getField(Restarter.getInstance(),"rootContexts")).isEmpty();
  }
  @Test public void disableWithSystemProperty(){
    System.setProperty(ENABLED_PROPERTY,"false");
    this.output.reset();
    testInitialize(false);
    assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("enabled",false);
    assertThat(this.output.toString()).contains("Restart disabled due to System property");
  }
  private void testInitialize(  boolean failed){
    Restarter.clearInstance();
    RestartApplicationListener listener=new RestartApplicationListener();
    SpringApplication application=new SpringApplication();
    ConfigurableApplicationContext context=mock(ConfigurableApplicationContext.class);
    listener.onApplicationEvent(new ApplicationStartingEvent(application,ARGS));
    assertThat(Restarter.getInstance()).isNotEqualTo(nullValue());
    assertThat(Restarter.getInstance().isFinished()).isFalse();
    listener.onApplicationEvent(new ApplicationPreparedEvent(application,ARGS,context));
    if (failed) {
      listener.onApplicationEvent(new ApplicationFailedEvent(application,ARGS,context,new RuntimeException()));
    }
 else {
      listener.onApplicationEvent(new ApplicationReadyEvent(application,ARGS,context));
    }
  }
}
