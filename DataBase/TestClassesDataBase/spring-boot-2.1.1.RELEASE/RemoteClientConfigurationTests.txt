/** 
 * Tests for  {@link RemoteClientConfiguration}.
 * @author Phillip Webb
 */
public class RemoteClientConfigurationTests {
  @Rule public MockRestarter restarter=new MockRestarter();
  @Rule public OutputCapture output=new OutputCapture();
  private AnnotationConfigServletWebServerApplicationContext context;
  private AnnotationConfigApplicationContext clientContext;
  @After public void cleanup(){
    if (this.context != null) {
      this.context.close();
    }
    if (this.clientContext != null) {
      this.clientContext.close();
    }
  }
  @Test public void warnIfRestartDisabled(){
    configure("spring.devtools.remote.restart.enabled:false");
    assertThat(this.output.toString()).contains("Remote restart is disabled");
  }
  @Test public void warnIfNotHttps(){
    configure("http://localhost",true);
    assertThat(this.output.toString()).contains("is insecure");
  }
  @Test public void doesntWarnIfUsingHttps(){
    configure("https://localhost",true);
    assertThat(this.output.toString()).doesNotContain("is insecure");
  }
  @Test public void failIfNoSecret(){
    assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> configure("http://localhost",false)).withMessageContaining("required to secure your connection");
  }
  @Test public void liveReloadOnClassPathChanged() throws Exception {
    configure();
    Set<ChangedFiles> changeSet=new HashSet<>();
    ClassPathChangedEvent event=new ClassPathChangedEvent(this,changeSet,false);
    this.clientContext.publishEvent(event);
    LiveReloadConfiguration configuration=this.clientContext.getBean(LiveReloadConfiguration.class);
    configuration.getExecutor().shutdown();
    configuration.getExecutor().awaitTermination(2,TimeUnit.SECONDS);
    LiveReloadServer server=this.clientContext.getBean(LiveReloadServer.class);
    verify(server).triggerReload();
  }
  @Test public void liveReloadDisabled(){
    configure("spring.devtools.livereload.enabled:false");
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class));
  }
  @Test public void remoteRestartDisabled(){
    configure("spring.devtools.remote.restart.enabled:false");
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(ClassPathFileSystemWatcher.class));
  }
  private void configure(  String... pairs){
    configure("http://localhost",true,pairs);
  }
  private void configure(  String remoteUrl,  boolean setSecret,  String... pairs){
    this.context=new AnnotationConfigServletWebServerApplicationContext();
    this.context.register(Config.class);
    if (setSecret) {
      TestPropertyValues.of("spring.devtools.remote.secret:secret").applyTo(this.context);
    }
    this.context.refresh();
    this.clientContext=new AnnotationConfigApplicationContext();
    TestPropertyValues.of(pairs).applyTo(this.clientContext);
    new RestartScopeInitializer().initialize(this.clientContext);
    this.clientContext.register(ClientConfig.class,RemoteClientConfiguration.class);
    if (setSecret) {
      TestPropertyValues.of("spring.devtools.remote.secret:secret").applyTo(this.clientContext);
    }
    String remoteUrlProperty="remoteUrl:" + remoteUrl + ":"+ this.context.getWebServer().getPort();
    TestPropertyValues.of(remoteUrlProperty).applyTo(this.clientContext);
    this.clientContext.refresh();
  }
@Configuration static class Config {
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public DispatcherFilter dispatcherFilter() throws IOException {
      return new DispatcherFilter(dispatcher());
    }
    public Dispatcher dispatcher() throws IOException {
      Dispatcher dispatcher=mock(Dispatcher.class);
      ServerHttpRequest anyRequest=any(ServerHttpRequest.class);
      ServerHttpResponse anyResponse=any(ServerHttpResponse.class);
      given(dispatcher.handle(anyRequest,anyResponse)).willReturn(true);
      return dispatcher;
    }
  }
@Configuration static class ClientConfig {
    @Bean public LiveReloadServer liveReloadServer(){
      return mock(LiveReloadServer.class);
    }
  }
}
