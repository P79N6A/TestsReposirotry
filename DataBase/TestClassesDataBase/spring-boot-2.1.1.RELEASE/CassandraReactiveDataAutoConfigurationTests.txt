/** 
 * Tests for  {@link CassandraReactiveDataAutoConfiguration}.
 * @author Eddú Meléndez
 * @author Stephane Nicoll
 * @author Mark Paluch
 */
public class CassandraReactiveDataAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void templateExists(){
    load("spring.data.cassandra.keyspaceName:boot_test");
    assertThat(this.context.getBeanNamesForType(ReactiveCassandraTemplate.class)).hasSize(1);
  }
  @Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet(){
    load(EntityScanConfig.class,"spring.data.cassandra.keyspaceName:boot_test");
    CassandraMappingContext mappingContext=this.context.getBean(CassandraMappingContext.class);
    Set<Class<?>> initialEntitySet=(Set<Class<?>>)ReflectionTestUtils.getField(mappingContext,"initialEntitySet");
    assertThat(initialEntitySet).containsOnly(City.class);
  }
  @Test public void userTypeResolverShouldBeSet(){
    load("spring.data.cassandra.keyspaceName:boot_test");
    CassandraMappingContext mappingContext=this.context.getBean(CassandraMappingContext.class);
    assertThat(ReflectionTestUtils.getField(mappingContext,"userTypeResolver")).isInstanceOf(SimpleUserTypeResolver.class);
  }
  private void load(  String... environment){
    load(null,environment);
  }
  private void load(  Class<?> config,  String... environment){
    AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
    TestPropertyValues.of(environment).applyTo(ctx);
    if (config != null) {
      ctx.register(config);
    }
    ctx.register(TestConfiguration.class,CassandraAutoConfiguration.class,CassandraDataAutoConfiguration.class,CassandraReactiveDataAutoConfiguration.class);
    ctx.refresh();
    this.context=ctx;
  }
@Configuration static class TestConfiguration {
    @Bean public Session session(){
      return mock(Session.class);
    }
  }
@Configuration @EntityScan("org.springframework.boot.autoconfigure.data.cassandra.city") static class EntityScanConfig {
  }
}
