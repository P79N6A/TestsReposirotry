/** 
 * Tests for  {@link ElasticsearchRestHealthIndicator}.
 * @author Artsiom Yudovin
 */
public class ElasticsearchRestHealthIndicatorTest {
  private final RestClient restClient=mock(RestClient.class);
  private final ElasticsearchRestHealthIndicator elasticsearchRestHealthIndicator=new ElasticsearchRestHealthIndicator(this.restClient);
  @Test public void elasticsearchIsUp() throws IOException {
    BasicHttpEntity httpEntity=new BasicHttpEntity();
    httpEntity.setContent(new ByteArrayInputStream(createJsonResult(200,"green").getBytes()));
    Response response=mock(Response.class);
    StatusLine statusLine=mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(response.getStatusLine()).thenReturn(statusLine);
    when(response.getEntity()).thenReturn(httpEntity);
    when(this.restClient.performRequest(any(Request.class))).thenReturn(response);
    assertThat(this.elasticsearchRestHealthIndicator.health().getStatus()).isEqualTo(Status.UP);
  }
  @Test public void elasticsearchIsDown() throws IOException {
    when(this.restClient.performRequest(any(Request.class))).thenThrow(new IOException("Couldn't connect"));
    assertThat(this.elasticsearchRestHealthIndicator.health().getStatus()).isEqualTo(Status.DOWN);
  }
  @Test public void elasticsearchIsDownByResponseCode() throws IOException {
    Response response=mock(Response.class);
    StatusLine statusLine=mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(500);
    when(response.getStatusLine()).thenReturn(statusLine);
    when(this.restClient.performRequest(any(Request.class))).thenReturn(response);
    assertThat(this.elasticsearchRestHealthIndicator.health().getStatus()).isEqualTo(Status.DOWN);
  }
  @Test public void elasticsearchIsOutOfServiceByStatus() throws IOException {
    BasicHttpEntity httpEntity=new BasicHttpEntity();
    httpEntity.setContent(new ByteArrayInputStream(createJsonResult(200,"red").getBytes()));
    Response response=mock(Response.class);
    StatusLine statusLine=mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(response.getStatusLine()).thenReturn(statusLine);
    when(response.getEntity()).thenReturn(httpEntity);
    when(this.restClient.performRequest(any(Request.class))).thenReturn(response);
    assertThat(this.elasticsearchRestHealthIndicator.health().getStatus()).isEqualTo(Status.OUT_OF_SERVICE);
  }
  private String createJsonResult(  int responseCode,  String status){
    String json;
    if (responseCode == 200) {
      json=String.format("{\"cluster_name\":\"elasticsearch\"," + "\"status\":\"%s\",\"timed_out\":false,\"number_of_nodes\":1," + "\"number_of_data_nodes\":1,\"active_primary_shards\":0,"+ "\"active_shards\":0,\"relocating_shards\":0,\"initializing_shards\":0,"+ "\"unassigned_shards\":0,\"delayed_unassigned_shards\":0,"+ "\"number_of_pending_tasks\":0,\"number_of_in_flight_fetch\":0,"+ "\"task_max_waiting_in_queue_millis\":0,\"active_shards_percent_as_number\":100.0}",status);
    }
 else {
      json="{\n" + "  \"error\": \"Server Error\",\n" + "  \"status\": " + responseCode + "\n"+ "}";
    }
    return json;
  }
}
