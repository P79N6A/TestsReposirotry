/** 
 * Test for  {@link WebMvcMetricsFilter} with auto-timed enabled.
 * @author Jon Schneider
 */
@RunWith(SpringRunner.class) @WebAppConfiguration public class WebMvcMetricsFilterAutoTimedTests {
  @Autowired private MeterRegistry registry;
  @Autowired private WebApplicationContext context;
  private MockMvc mvc;
  @Autowired private WebMvcMetricsFilter filter;
  @Before public void setupMockMvc(){
    this.mvc=MockMvcBuilders.webAppContextSetup(this.context).addFilters(this.filter).build();
  }
  @Test public void metricsCanBeAutoTimed() throws Exception {
    this.mvc.perform(get("/api/10")).andExpect(status().isOk());
    assertThat(this.registry.get("http.server.requests").tags("status","200").timer().count()).isEqualTo(1L);
  }
@Configuration @EnableWebMvc @Import({Controller.class}) static class TestConfiguration {
    @Bean MockClock clock(){
      return new MockClock();
    }
    @Bean MeterRegistry meterRegistry(    Clock clock){
      return new SimpleMeterRegistry(SimpleConfig.DEFAULT,clock);
    }
    @Bean public WebMvcMetricsFilter webMetricsFilter(    WebApplicationContext context,    MeterRegistry registry){
      return new WebMvcMetricsFilter(registry,new DefaultWebMvcTagsProvider(),"http.server.requests",true);
    }
  }
@RestController @RequestMapping("/api") static class Controller {
    @GetMapping("/{id}") public String successful(    @PathVariable Long id){
      return id.toString();
    }
  }
}
