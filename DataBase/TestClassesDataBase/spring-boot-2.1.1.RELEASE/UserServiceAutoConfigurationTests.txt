/** 
 * Tests for  {@link UserServiceAutoConfiguration}.
 * @author Stephane Nicoll
 */
public class UserServiceAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(UserServiceAutoConfiguration.class));
  @Test public void serviceNameCanBeConfigured(){
    this.contextRunner.withPropertyValues("user.name=test123").run((context) -> {
      assertThat(context).hasSingleBean(UserService.class);
      assertThat(context.getBean(UserService.class).getName()).isEqualTo("test123");
    }
);
  }
  @Test public void serviceIsIgnoredIfLibraryIsNotPresent(){
    this.contextRunner.withClassLoader(new FilteredClassLoader(UserService.class)).run((context) -> assertThat(context).doesNotHaveBean("userService"));
  }
  @Test public void defaultServiceBacksOff(){
    this.contextRunner.withUserConfiguration(UserConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(UserService.class);
      assertThat(context.getBean(UserService.class)).isSameAs(context.getBean(UserConfiguration.class).myUserService());
    }
);
  }
@Configuration static class UserConfiguration {
    @Bean public UserService myUserService(){
      return new UserService("mine");
    }
  }
}
