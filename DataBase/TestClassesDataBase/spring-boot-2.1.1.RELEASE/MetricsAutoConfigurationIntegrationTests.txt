/** 
 * Integration tests for metrics auto-configuration.
 * @author Stephane Nicoll
 */
public class MetricsAutoConfigurationIntegrationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.simple());
  @Test public void propertyBasedMeterFilteringIsAutoConfigured(){
    this.contextRunner.withPropertyValues("management.metrics.enable.my.org=false").run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.timer("my.org.timer");
      assertThat(registry.find("my.org.timer").timer()).isNull();
    }
);
  }
  @Test public void propertyBasedCommonTagsIsAutoConfigured(){
    this.contextRunner.withPropertyValues("management.metrics.tags.region=test","management.metrics.tags.origin=local").run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.counter("my.counter","env","qa");
      assertThat(registry.find("my.counter").tags("env","qa").tags("region","test").tags("origin","local").counter()).isNotNull();
    }
);
  }
  @Test public void simpleMeterRegistryIsUsedAsAFallback(){
    this.contextRunner.run((context) -> assertThat(context.getBean(MeterRegistry.class)).isInstanceOf(SimpleMeterRegistry.class));
  }
  @Test public void emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured(){
    new ApplicationContextRunner().with(MetricsRun.limitedTo()).run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry).isInstanceOf(CompositeMeterRegistry.class);
      assertThat(((CompositeMeterRegistry)registry).getRegistries()).isEmpty();
    }
);
  }
  @Test public void noCompositeIsCreatedWhenASingleMeterRegistryIsAutoConfigured(){
    new ApplicationContextRunner().with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class)).run((context) -> assertThat(context.getBean(MeterRegistry.class)).isInstanceOf(GraphiteMeterRegistry.class));
  }
  @Test public void noCompositeIsCreatedWithMultipleRegistriesAndOneThatIsPrimary(){
    new ApplicationContextRunner().with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,JmxMetricsExportAutoConfiguration.class)).withUserConfiguration(PrimaryMeterRegistryConfiguration.class).run((context) -> assertThat(context.getBean(MeterRegistry.class)).isInstanceOf(SimpleMeterRegistry.class));
  }
  @Test public void compositeCreatedWithMultipleRegistries(){
    new ApplicationContextRunner().with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,JmxMetricsExportAutoConfiguration.class)).run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry).isInstanceOf(CompositeMeterRegistry.class);
      assertThat(((CompositeMeterRegistry)registry).getRegistries()).hasAtLeastOneElementOfType(GraphiteMeterRegistry.class).hasAtLeastOneElementOfType(JmxMeterRegistry.class);
    }
);
  }
@Configuration static class PrimaryMeterRegistryConfiguration {
    @Primary @Bean public MeterRegistry simpleMeterRegistry(){
      return new SimpleMeterRegistry(SimpleConfig.DEFAULT,new MockClock());
    }
  }
}
