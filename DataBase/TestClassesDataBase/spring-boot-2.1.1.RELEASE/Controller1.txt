@RestController @RequestMapping("/api/c1") static class Controller1 {
  @Autowired @Qualifier("callableBarrier") private CyclicBarrier callableBarrier;
  @Autowired @Qualifier("completableFutureBarrier") private CyclicBarrier completableFutureBarrier;
  @Timed(extraTags={"public","true"}) @GetMapping("/{id}") public String successfulWithExtraTags(  @PathVariable Long id){
    return id.toString();
  }
  @Timed @Timed(value="my.long.request",extraTags={"region","test"},longTask=true) @GetMapping("/callable/{id}") public Callable<String> asyncCallable(  @PathVariable Long id) throws Exception {
    this.callableBarrier.await();
    return () -> {
      try {
        this.callableBarrier.await();
      }
 catch (      InterruptedException ex) {
        throw new RuntimeException(ex);
      }
      return id.toString();
    }
;
  }
  @Timed @GetMapping("/completableFuture/{id}") CompletableFuture<String> asyncCompletableFuture(  @PathVariable Long id) throws Exception {
    this.completableFutureBarrier.await();
    return CompletableFuture.supplyAsync(() -> {
      try {
        this.completableFutureBarrier.await();
      }
 catch (      InterruptedException|BrokenBarrierException ex) {
        throw new RuntimeException(ex);
      }
      return id.toString();
    }
);
  }
  @Timed @Timed(value="my.long.request.exception",longTask=true) @GetMapping("/completableFutureException") CompletableFuture<String> asyncCompletableFutureException(){
    return CompletableFuture.supplyAsync(() -> {
      throw new RuntimeException("boom");
    }
);
  }
  @GetMapping("/untimed/{id}") public String successfulButUntimed(  @PathVariable Long id){
    return id.toString();
  }
  @Timed @GetMapping("/error/{id}") public String alwaysThrowsException(  @PathVariable Long id){
    throw new IllegalStateException("Boom on " + id + "!");
  }
  @Timed @GetMapping("/anonymousError/{id}") public String alwaysThrowsAnonymousException(  @PathVariable Long id) throws Exception {
    throw new Exception("this exception won't have a simple class name"){
    }
;
  }
  @Timed @GetMapping("/unhandledError/{id}") public String alwaysThrowsUnhandledException(  @PathVariable Long id){
    throw new RuntimeException("Boom on " + id + "!");
  }
  @Timed @GetMapping("/regex/{id:\\.[a-z]+}") public String successfulRegex(  @PathVariable String id){
    return id;
  }
  @Timed(percentiles={0.50,0.95}) @GetMapping("/percentiles/{id}") public String percentiles(  @PathVariable String id){
    return id;
  }
  @Timed(histogram=true) @GetMapping("/histogram/{id}") public String histogram(  @PathVariable String id){
    return id;
  }
  @Timed95 @GetMapping("/metaTimed/{id}") public String meta(  @PathVariable String id){
    return id;
  }
  @ExceptionHandler(IllegalStateException.class) @ResponseStatus(HttpStatus.UNPROCESSABLE_ENTITY) ModelAndView defaultErrorHandler(  HttpServletRequest request,  Exception e){
    return new ModelAndView("myerror");
  }
}
