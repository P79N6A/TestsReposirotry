/** 
 * Tests for  {@link LocalHostWebClient}.
 * @author Phillip Webb
 */
@SuppressWarnings("resource") public class LocalHostWebClientTests {
  @Captor private ArgumentCaptor<WebRequest> requestCaptor;
  public LocalHostWebClientTests(){
    MockitoAnnotations.initMocks(this);
  }
  @Test public void createWhenEnvironmentIsNullWillThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new LocalHostWebClient(null)).withMessageContaining("Environment must not be null");
  }
  @Test public void getPageWhenUrlIsRelativeAndNoPortWillUseLocalhost8080() throws Exception {
    MockEnvironment environment=new MockEnvironment();
    WebClient client=new LocalHostWebClient(environment);
    WebConnection connection=mockConnection();
    client.setWebConnection(connection);
    client.getPage("/test");
    verify(connection).getResponse(this.requestCaptor.capture());
    assertThat(this.requestCaptor.getValue().getUrl()).isEqualTo(new URL("http://localhost:8080/test"));
  }
  @Test public void getPageWhenUrlIsRelativeAndHasPortWillUseLocalhostPort() throws Exception {
    MockEnvironment environment=new MockEnvironment();
    environment.setProperty("local.server.port","8181");
    WebClient client=new LocalHostWebClient(environment);
    WebConnection connection=mockConnection();
    client.setWebConnection(connection);
    client.getPage("/test");
    verify(connection).getResponse(this.requestCaptor.capture());
    assertThat(this.requestCaptor.getValue().getUrl()).isEqualTo(new URL("http://localhost:8181/test"));
  }
  private WebConnection mockConnection() throws IOException {
    WebConnection connection=mock(WebConnection.class);
    WebResponse response=new StringWebResponse("test",new URL("http://localhost"));
    given(connection.getResponse(any())).willReturn(response);
    return connection;
  }
}
