final class TestContext {
  private final Class<?> testClass;
  private final ContextFactory contextFactory;
  private ConfigurableApplicationContext applicationContext;
  private List<PropertySource<?>> propertySources;
  TestContext(  Class<?> testClass,  ContextFactory contextFactory){
    this.testClass=testClass;
    this.contextFactory=contextFactory;
  }
  void beforeClass(){
    this.applicationContext=createApplicationContext();
    WebTestClient webTestClient=createWebTestClient();
    injectIfPossible(this.testClass,webTestClient);
    injectIfPossible(this.testClass,this.applicationContext);
  }
  void beforeTest(){
    capturePropertySources();
  }
  void afterTest(){
    restorePropertySources();
  }
  void afterClass(){
    if (this.applicationContext != null) {
      this.applicationContext.close();
    }
  }
  private ConfigurableApplicationContext createApplicationContext(){
    Class<?>[] members=this.testClass.getDeclaredClasses();
    List<Class<?>> configurationClasses=Stream.of(members).filter(this::isConfiguration).collect(Collectors.toList());
    return this.contextFactory.createContext(new ArrayList<>(configurationClasses));
  }
  private boolean isConfiguration(  Class<?> candidate){
    return AnnotationUtils.findAnnotation(candidate,Configuration.class) != null;
  }
  private WebTestClient createWebTestClient(){
    DefaultUriBuilderFactory uriBuilderFactory=new DefaultUriBuilderFactory("http://localhost:" + determinePort());
    uriBuilderFactory.setEncodingMode(EncodingMode.NONE);
    return WebTestClient.bindToServer().uriBuilderFactory(uriBuilderFactory).responseTimeout(TIMEOUT).build();
  }
  private int determinePort(){
    if (this.applicationContext instanceof AnnotationConfigServletWebServerApplicationContext) {
      return ((AnnotationConfigServletWebServerApplicationContext)this.applicationContext).getWebServer().getPort();
    }
    return this.applicationContext.getBean(PortHolder.class).getPort();
  }
  private void injectIfPossible(  Class<?> target,  Object value){
    ReflectionUtils.doWithFields(target,(field) -> {
      if (Modifier.isStatic(field.getModifiers()) && field.getType().isInstance(value)) {
        ReflectionUtils.makeAccessible(field);
        ReflectionUtils.setField(field,null,value);
      }
    }
);
  }
  private void capturePropertySources(){
    this.propertySources=new ArrayList<>();
    this.applicationContext.getEnvironment().getPropertySources().forEach(this.propertySources::add);
  }
  private void restorePropertySources(){
    List<String> names=new ArrayList<>();
    MutablePropertySources propertySources=this.applicationContext.getEnvironment().getPropertySources();
    propertySources.forEach((propertySource) -> names.add(propertySource.getName()));
    names.forEach(propertySources::remove);
    this.propertySources.forEach(propertySources::addLast);
  }
}
