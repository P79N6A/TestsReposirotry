/** 
 * Tests for  {@link RepositoryConfigurationFactory}
 * @author Andy Wilkinson
 */
public class RepositoryConfigurationFactoryTests {
  @Test public void defaultRepositories(){
    TestPropertyValues.of("user.home:src/test/resources/maven-settings/basic").applyToSystemProperties(() -> {
      List<RepositoryConfiguration> repositoryConfiguration=RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      assertRepositoryConfiguration(repositoryConfiguration,"central","local","spring-snapshot","spring-milestone");
      return null;
    }
);
  }
  @Test public void snapshotRepositoriesDisabled(){
    TestPropertyValues.of("user.home:src/test/resources/maven-settings/basic","disableSpringSnapshotRepos:true").applyToSystemProperties(() -> {
      List<RepositoryConfiguration> repositoryConfiguration=RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      assertRepositoryConfiguration(repositoryConfiguration,"central","local");
      return null;
    }
);
  }
  @Test public void activeByDefaultProfileRepositories(){
    TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories").applyToSystemProperties(() -> {
      List<RepositoryConfiguration> repositoryConfiguration=RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      assertRepositoryConfiguration(repositoryConfiguration,"central","local","spring-snapshot","spring-milestone","active-by-default");
      return null;
    }
);
  }
  @Test public void activeByPropertyProfileRepositories(){
    TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories","foo:bar").applyToSystemProperties(() -> {
      List<RepositoryConfiguration> repositoryConfiguration=RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      assertRepositoryConfiguration(repositoryConfiguration,"central","local","spring-snapshot","spring-milestone","active-by-property");
      return null;
    }
);
  }
  @Test public void interpolationProfileRepositories(){
    TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories","interpolate:true").applyToSystemProperties(() -> {
      List<RepositoryConfiguration> repositoryConfiguration=RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();
      assertRepositoryConfiguration(repositoryConfiguration,"central","local","spring-snapshot","spring-milestone","interpolate-releases","interpolate-snapshots");
      return null;
    }
);
  }
  private void assertRepositoryConfiguration(  List<RepositoryConfiguration> configurations,  String... expectedNames){
    assertThat(configurations).hasSize(expectedNames.length);
    Set<String> actualNames=new HashSet<>();
    for (    RepositoryConfiguration configuration : configurations) {
      actualNames.add(configuration.getName());
    }
    assertThat(actualNames).containsOnly(expectedNames);
  }
}
