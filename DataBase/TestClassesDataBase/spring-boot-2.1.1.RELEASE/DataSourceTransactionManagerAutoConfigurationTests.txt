/** 
 * Tests for  {@link DataSourceTransactionManagerAutoConfiguration}.
 * @author Dave Syer
 * @author Stephane Nicoll
 * @author Kazuki Shimizu
 */
public class DataSourceTransactionManagerAutoConfigurationTests {
  private final AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
  @Test public void testDataSourceExists(){
    this.context.register(EmbeddedDataSourceConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(DataSource.class)).isNotNull();
    assertThat(this.context.getBean(DataSourceTransactionManager.class)).isNotNull();
  }
  @Test public void testNoDataSourceExists(){
    this.context.register(DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBeanNamesForType(DataSource.class)).isEmpty();
    assertThat(this.context.getBeanNamesForType(DataSourceTransactionManager.class)).isEmpty();
  }
  @Test public void testManualConfiguration(){
    this.context.register(EmbeddedDataSourceConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(DataSource.class)).isNotNull();
    assertThat(this.context.getBean(DataSourceTransactionManager.class)).isNotNull();
  }
  @Test public void testExistingTransactionManager(){
    this.context.register(TransactionManagerConfiguration.class,EmbeddedDataSourceConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBeansOfType(PlatformTransactionManager.class)).hasSize(1);
    assertThat(this.context.getBean(PlatformTransactionManager.class)).isEqualTo(this.context.getBean("myTransactionManager"));
  }
  @Test public void testMultiDataSource(){
    this.context.register(MultiDataSourceConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBeansOfType(PlatformTransactionManager.class)).isEmpty();
  }
  @Test public void testMultiDataSourceUsingPrimary(){
    this.context.register(MultiDataSourceUsingPrimaryConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    assertThat(this.context.getBean(DataSourceTransactionManager.class)).isNotNull();
    assertThat(this.context.getBean(AbstractTransactionManagementConfiguration.class)).isNotNull();
  }
  @Test public void testCustomizeDataSourceTransactionManagerUsingProperties(){
    TestPropertyValues.of("spring.transaction.default-timeout:30","spring.transaction.rollback-on-commit-failure:true").applyTo(this.context);
    this.context.register(EmbeddedDataSourceConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class,TransactionAutoConfiguration.class);
    this.context.refresh();
    DataSourceTransactionManager transactionManager=this.context.getBean(DataSourceTransactionManager.class);
    assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30);
    assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue();
  }
@Configuration protected static class TransactionManagerConfiguration {
    @Bean public PlatformTransactionManager myTransactionManager(){
      return mock(PlatformTransactionManager.class);
    }
  }
}
