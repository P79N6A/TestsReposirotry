/** 
 * Basic integration tests for service demo application.
 * @author Dave Syer
 * @author Stephane Nicoll
 */
@RunWith(SpringRunner.class) @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT) public class SampleActuatorApplicationTests {
  @Autowired private TestRestTemplate restTemplate;
  @Autowired private ApplicationContext applicationContext;
  @Test public void testHomeIsSecure(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.getForEntity("/",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("error")).isEqualTo("Unauthorized");
    assertThat(entity.getHeaders()).doesNotContainKey("Set-Cookie");
  }
  @Test public void testMetricsIsSecure(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.getForEntity("/actuator/metrics",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    entity=this.restTemplate.getForEntity("/actuator/metrics/",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    entity=this.restTemplate.getForEntity("/actuator/metrics/foo",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
    entity=this.restTemplate.getForEntity("/actuator/metrics.json",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
  }
  @Test public void testHome(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("message")).isEqualTo("Hello Phil");
  }
  @SuppressWarnings("unchecked") @Test public void testMetrics(){
    testHome();
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/actuator/metrics",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    Map<String,Object> body=entity.getBody();
    assertThat(body).containsKey("names");
    assertThat((List<String>)body.get("names")).contains("jvm.buffer.count");
  }
  @Test public void testEnv(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/actuator/env",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body).containsKey("propertySources");
  }
  @Test public void healthInsecureByDefault(){
    ResponseEntity<String> entity=this.restTemplate.getForEntity("/actuator/health",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).contains("\"status\":\"UP\"");
    assertThat(entity.getBody()).doesNotContain("\"hello\":\"1\"");
  }
  @Test public void infoInsecureByDefault(){
    ResponseEntity<String> entity=this.restTemplate.getForEntity("/actuator/info",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).contains("\"artifact\":\"spring-boot-sample-actuator\"");
    assertThat(entity.getBody()).contains("\"someKey\":\"someValue\"");
    assertThat(entity.getBody()).contains("\"java\":{","\"source\":\"1.8\"","\"target\":\"1.8\"");
    assertThat(entity.getBody()).contains("\"encoding\":{","\"source\":\"UTF-8\"","\"reporting\":\"UTF-8\"");
  }
  @Test public void testErrorPage(){
    ResponseEntity<String> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/foo",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    String body=entity.getBody();
    assertThat(body).contains("\"error\":");
  }
  @Test public void testHtmlErrorPage(){
    HttpHeaders headers=new HttpHeaders();
    headers.setAccept(Arrays.asList(MediaType.TEXT_HTML));
    HttpEntity<?> request=new HttpEntity<Void>(headers);
    ResponseEntity<String> entity=this.restTemplate.withBasicAuth("user",getPassword()).exchange("/foo",HttpMethod.GET,request,String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    String body=entity.getBody();
    assertThat(body).as("Body was null").isNotNull();
    assertThat(body).contains("This application has no explicit mapping for /error");
  }
  @Test public void testErrorPageDirectAccess(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/error",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    @SuppressWarnings("unchecked") Map<String,Object> body=entity.getBody();
    assertThat(body.get("error")).isEqualTo("None");
    assertThat(body.get("status")).isEqualTo(999);
  }
  @Test @SuppressWarnings("unchecked") public void testBeans(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/actuator/beans",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(entity.getBody()).containsOnlyKeys("contexts");
  }
  @SuppressWarnings("unchecked") @Test public void testConfigProps(){
    @SuppressWarnings("rawtypes") ResponseEntity<Map> entity=this.restTemplate.withBasicAuth("user",getPassword()).getForEntity("/actuator/configprops",Map.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    Map<String,Object> body=entity.getBody();
    Map<String,Object> contexts=(Map<String,Object>)body.get("contexts");
    Map<String,Object> context=(Map<String,Object>)contexts.get(this.applicationContext.getId());
    Map<String,Object> beans=(Map<String,Object>)context.get("beans");
    assertThat(beans).containsKey("spring.datasource-" + DataSourceProperties.class.getName());
  }
  private String getPassword(){
    return "password";
  }
}
