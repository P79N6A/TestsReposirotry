/** 
 * Tests for  {@link ConfigurationPropertiesAutoConfiguration}.
 * @author Stephane Nicoll
 */
public class ConfigurationPropertiesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void tearDown(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void processAnnotatedBean(){
    load(new Class[]{AutoConfig.class,SampleBean.class},"foo.name:test");
    assertThat(this.context.getBean(SampleBean.class).getName()).isEqualTo("test");
  }
  @Test public void processAnnotatedBeanNoAutoConfig(){
    load(new Class[]{SampleBean.class},"foo.name:test");
    assertThat(this.context.getBean(SampleBean.class).getName()).isEqualTo("default");
  }
  private void load(  Class<?>[] configs,  String... environment){
    this.context=new AnnotationConfigApplicationContext();
    this.context.register(configs);
    TestPropertyValues.of(environment).applyTo(this.context);
    this.context.refresh();
  }
@Configuration @ImportAutoConfiguration(ConfigurationPropertiesAutoConfiguration.class) static class AutoConfig {
  }
@Component @ConfigurationProperties("foo") static class SampleBean {
    private String name="default";
    public String getName(){
      return this.name;
    }
    public void setName(    String name){
      this.name=name;
    }
  }
}
