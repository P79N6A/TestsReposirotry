/** 
 * Mock  {@link HttpConnection}.
 */
private static class MockHttpConnection extends HttpConnection {
  MockHttpConnection(){
    super(new ServletServerHttpRequest(new MockHttpServletRequest()),new ServletServerHttpResponse(new MockHttpServletResponse()));
  }
  MockHttpConnection(  String content,  int seq){
    this();
    MockHttpServletRequest request=getServletRequest();
    request.setContent(content.getBytes());
    request.addHeader(SEQ_HEADER,String.valueOf(seq));
  }
  @Override protected ServerHttpAsyncRequestControl startAsync(){
    getServletRequest().setAsyncSupported(true);
    return super.startAsync();
  }
  @Override protected void complete(){
    super.complete();
    getServletResponse().setCommitted(true);
  }
  public MockHttpServletRequest getServletRequest(){
    return (MockHttpServletRequest)((ServletServerHttpRequest)getRequest()).getServletRequest();
  }
  public MockHttpServletResponse getServletResponse(){
    return (MockHttpServletResponse)((ServletServerHttpResponse)getResponse()).getServletResponse();
  }
  public void verifyReceived(  String expectedContent,  int expectedSeq) throws Exception {
    waitForServletResponse();
    MockHttpServletResponse resp=getServletResponse();
    assertThat(resp.getContentAsString()).isEqualTo(expectedContent);
    assertThat(resp.getHeader(SEQ_HEADER)).isEqualTo(String.valueOf(expectedSeq));
  }
  public void waitForServletResponse() throws InterruptedException {
    while (!getServletResponse().isCommitted()) {
      Thread.sleep(10);
    }
  }
}
