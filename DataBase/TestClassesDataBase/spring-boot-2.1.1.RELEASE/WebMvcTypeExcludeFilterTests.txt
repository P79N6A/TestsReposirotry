/** 
 * Tests for  {@link WebMvcTypeExcludeFilter}.
 * @author Phillip Webb
 */
public class WebMvcTypeExcludeFilterTests {
  private MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
  @Test public void matchWhenHasNoControllers() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(WithNoControllers.class);
    assertThat(excludes(filter,Controller1.class)).isFalse();
    assertThat(excludes(filter,Controller2.class)).isFalse();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isFalse();
    assertThat(excludes(filter,ExampleWeb.class)).isFalse();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isFalse();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isTrue();
    assertThat(excludes(filter,ExampleWebSecurityConfigurer.class)).isFalse();
  }
  @Test public void matchWhenHasController() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(WithController.class);
    assertThat(excludes(filter,Controller1.class)).isFalse();
    assertThat(excludes(filter,Controller2.class)).isTrue();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isFalse();
    assertThat(excludes(filter,ExampleWeb.class)).isFalse();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isFalse();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isTrue();
    assertThat(excludes(filter,ExampleWebSecurityConfigurer.class)).isFalse();
  }
  @Test public void matchNotUsingDefaultFilters() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(NotUsingDefaultFilters.class);
    assertThat(excludes(filter,Controller1.class)).isTrue();
    assertThat(excludes(filter,Controller2.class)).isTrue();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isTrue();
    assertThat(excludes(filter,ExampleWeb.class)).isTrue();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isTrue();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isTrue();
    assertThat(excludes(filter,ExampleWebSecurityConfigurer.class)).isTrue();
  }
  @Test public void matchWithIncludeFilter() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(WithIncludeFilter.class);
    assertThat(excludes(filter,Controller1.class)).isFalse();
    assertThat(excludes(filter,Controller2.class)).isFalse();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isFalse();
    assertThat(excludes(filter,ExampleWeb.class)).isFalse();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isFalse();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isFalse();
  }
  @Test public void matchWithExcludeFilter() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(WithExcludeFilter.class);
    assertThat(excludes(filter,Controller1.class)).isTrue();
    assertThat(excludes(filter,Controller2.class)).isFalse();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isFalse();
    assertThat(excludes(filter,ExampleWeb.class)).isFalse();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isFalse();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isTrue();
    assertThat(excludes(filter,ExampleWebSecurityConfigurer.class)).isFalse();
  }
  @Test public void matchWhenSecureFalse() throws Exception {
    WebMvcTypeExcludeFilter filter=new WebMvcTypeExcludeFilter(WithSecureFalse.class);
    assertThat(excludes(filter,Controller1.class)).isFalse();
    assertThat(excludes(filter,Controller2.class)).isFalse();
    assertThat(excludes(filter,ExampleControllerAdvice.class)).isFalse();
    assertThat(excludes(filter,ExampleWeb.class)).isFalse();
    assertThat(excludes(filter,ExampleMessageConverter.class)).isFalse();
    assertThat(excludes(filter,ExampleService.class)).isTrue();
    assertThat(excludes(filter,ExampleRepository.class)).isTrue();
    assertThat(excludes(filter,ExampleWebSecurityConfigurer.class)).isTrue();
  }
  private boolean excludes(  WebMvcTypeExcludeFilter filter,  Class<?> type) throws IOException {
    MetadataReader metadataReader=this.metadataReaderFactory.getMetadataReader(type.getName());
    return filter.match(metadataReader,this.metadataReaderFactory);
  }
@WebMvcTest static class WithNoControllers {
  }
@WebMvcTest(Controller1.class) static class WithController {
  }
@WebMvcTest(useDefaultFilters=false) static class NotUsingDefaultFilters {
  }
@WebMvcTest(includeFilters=@Filter(Repository.class)) static class WithIncludeFilter {
  }
@WebMvcTest(excludeFilters=@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=Controller1.class)) static class WithExcludeFilter {
  }
@WebMvcTest(secure=false) static class WithSecureFalse {
  }
@Controller static class Controller1 {
  }
@Controller static class Controller2 {
  }
@ControllerAdvice static class ExampleControllerAdvice {
  }
static class ExampleWeb implements WebMvcConfigurer {
  }
static class ExampleMessageConverter extends MappingJackson2HttpMessageConverter {
  }
@Service static class ExampleService {
  }
@Repository static class ExampleRepository {
  }
static class ExampleWebSecurityConfigurer extends WebSecurityConfigurerAdapter {
  }
}
