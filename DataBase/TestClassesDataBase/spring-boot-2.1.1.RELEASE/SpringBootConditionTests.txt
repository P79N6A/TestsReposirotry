/** 
 * Tests for  {@link SpringBootCondition}.
 * @author Phillip Webb
 */
@SuppressWarnings("resource") public class SpringBootConditionTests {
  @Test public void sensibleClassException(){
    assertThatIllegalStateException().isThrownBy(() -> new AnnotationConfigApplicationContext(ErrorOnClass.class)).withMessageContaining("Error processing condition on " + ErrorOnClass.class.getName());
  }
  @Test public void sensibleMethodException(){
    assertThatIllegalStateException().isThrownBy(() -> new AnnotationConfigApplicationContext(ErrorOnMethod.class)).withMessageContaining("Error processing condition on " + ErrorOnMethod.class.getName() + ".myBean");
  }
@Configuration @Conditional(AlwaysThrowsCondition.class) public static class ErrorOnClass {
  }
@Configuration public static class ErrorOnMethod {
    @Bean @Conditional(AlwaysThrowsCondition.class) public String myBean(){
      return "bean";
    }
  }
public static class AlwaysThrowsCondition extends SpringBootCondition {
    @Override public ConditionOutcome getMatchOutcome(    ConditionContext context,    AnnotatedTypeMetadata metadata){
      throw new RuntimeException("Oh no!");
    }
  }
}
