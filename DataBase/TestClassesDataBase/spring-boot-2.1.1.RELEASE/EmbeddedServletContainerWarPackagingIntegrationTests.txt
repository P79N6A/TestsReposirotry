/** 
 * Integration tests for Spring Boot's embedded servlet container support using war packaging.
 * @author Andy Wilkinson
 */
@RunWith(Parameterized.class) public class EmbeddedServletContainerWarPackagingIntegrationTests extends AbstractEmbeddedServletContainerIntegrationTests {
  @Parameters(name="{0}") public static Object[] parameters(){
    return AbstractEmbeddedServletContainerIntegrationTests.parameters("war",Arrays.asList(PackagedApplicationLauncher.class,ExplodedApplicationLauncher.class));
  }
  public EmbeddedServletContainerWarPackagingIntegrationTests(  String name,  AbstractApplicationLauncher launcher){
    super(name,launcher);
  }
  @Test public void nestedMetaInfResourceIsAvailableViaHttp(){
    ResponseEntity<String> entity=this.rest.getForEntity("/nested-meta-inf-resource.txt",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
  }
  @Test public void nestedMetaInfResourceIsAvailableViaServletContext(){
    ResponseEntity<String> entity=this.rest.getForEntity("/servletContext?/nested-meta-inf-resource.txt",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
  }
  @Test public void nestedJarIsNotAvailableViaHttp(){
    ResponseEntity<String> entity=this.rest.getForEntity("/WEB-INF/lib/resources-1.0.jar",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
  }
  @Test public void applicationClassesAreNotAvailableViaHttp(){
    ResponseEntity<String> entity=this.rest.getForEntity("/WEB-INF/classes/com/example/ResourceHandlingApplication.class",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
  }
  @Test public void webappResourcesAreAvailableViaHttp(){
    ResponseEntity<String> entity=this.rest.getForEntity("/webapp-resource.txt",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
  }
  @Test public void loaderClassesAreNotAvailableViaHttp(){
    ResponseEntity<String> entity=this.rest.getForEntity("/org/springframework/boot/loader/Launcher.class",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    entity=this.rest.getForEntity("/org/springframework/../springframework/boot/loader/Launcher.class",String.class);
    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
  }
}
