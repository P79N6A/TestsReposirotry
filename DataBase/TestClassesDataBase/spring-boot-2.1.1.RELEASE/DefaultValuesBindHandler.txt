static class DefaultValuesBindHandler extends AbstractBindHandler {
  private final Map<ConfigurationPropertyName,ConfigurationPropertyName> mappings;
  DefaultValuesBindHandler(  BindHandler bindHandler){
    super(bindHandler);
    this.mappings=new LinkedHashMap<>();
    this.mappings.put(ConfigurationPropertyName.of("foo.bar.bindings"),ConfigurationPropertyName.of("foo.bar.default"));
  }
  @Override public <T>Bindable<T> onStart(  ConfigurationPropertyName name,  Bindable<T> target,  BindContext context){
    ConfigurationPropertyName defaultName=getDefaultName(name);
    if (defaultName != null) {
      BindResult<T> result=context.getBinder().bind(defaultName,target);
      if (result.isBound()) {
        return target.withExistingValue(result.get());
      }
    }
    return super.onStart(name,target,context);
  }
  private ConfigurationPropertyName getDefaultName(  ConfigurationPropertyName name){
    for (    Map.Entry<ConfigurationPropertyName,ConfigurationPropertyName> mapping : this.mappings.entrySet()) {
      ConfigurationPropertyName from=mapping.getKey();
      ConfigurationPropertyName to=mapping.getValue();
      if (name.getNumberOfElements() == from.getNumberOfElements() + 1 && from.isParentOf(name)) {
        return to;
      }
    }
    return null;
  }
}
