/** 
 * Tests for  {@link WebClientExchangeTags}
 * @author Brian Clozel
 */
public class WebClientExchangeTagsTests {
  private static final String URI_TEMPLATE_ATTRIBUTE=WebClient.class.getName() + ".uriTemplate";
  private ClientRequest request;
  private ClientResponse response;
  @Before public void setup(){
    this.request=ClientRequest.create(HttpMethod.GET,URI.create("http://example.org/projects/spring-boot")).attribute(URI_TEMPLATE_ATTRIBUTE,"http://example.org/projects/{project}").build();
    this.response=mock(ClientResponse.class);
    given(this.response.statusCode()).willReturn(HttpStatus.OK);
  }
  @Test public void method(){
    assertThat(WebClientExchangeTags.method(this.request)).isEqualTo(Tag.of("method","GET"));
  }
  @Test public void uriWhenAbsoluteTemplateIsAvailableShouldReturnTemplate(){
    assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri","/projects/{project}"));
  }
  @Test public void uriWhenRelativeTemplateIsAvailableShouldReturnTemplate(){
    this.request=ClientRequest.create(HttpMethod.GET,URI.create("http://example.org/projects/spring-boot")).attribute(URI_TEMPLATE_ATTRIBUTE,"/projects/{project}").build();
    assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri","/projects/{project}"));
  }
  @Test public void uriWhenTemplateIsMissingShouldReturnPath(){
    this.request=ClientRequest.create(HttpMethod.GET,URI.create("http://example.org/projects/spring-boot")).build();
    assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri","/projects/spring-boot"));
  }
  @Test public void clientName(){
    assertThat(WebClientExchangeTags.clientName(this.request)).isEqualTo(Tag.of("clientName","example.org"));
  }
  @Test public void status(){
    assertThat(WebClientExchangeTags.status(this.response)).isEqualTo(Tag.of("status","200"));
  }
  @Test public void statusWhenIOException(){
    assertThat(WebClientExchangeTags.status(new IOException())).isEqualTo(Tag.of("status","IO_ERROR"));
  }
  @Test public void statusWhenClientException(){
    assertThat(WebClientExchangeTags.status(new IllegalArgumentException())).isEqualTo(Tag.of("status","CLIENT_ERROR"));
  }
}
