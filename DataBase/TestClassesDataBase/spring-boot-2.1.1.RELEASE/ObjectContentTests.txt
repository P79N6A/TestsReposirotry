/** 
 * Tests for  {@link ObjectContent}.
 * @author Phillip Webb
 */
public class ObjectContentTests {
  private static final ExampleObject OBJECT=new ExampleObject();
  private static final ResolvableType TYPE=ResolvableType.forClass(ExampleObject.class);
  @Test public void createWhenObjectIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new ObjectContent<ExampleObject>(TYPE,null)).withMessageContaining("Object must not be null");
  }
  @Test public void createWhenTypeIsNullShouldCreateContent(){
    ObjectContent<ExampleObject> content=new ObjectContent<>(null,OBJECT);
    assertThat(content).isNotNull();
  }
  @Test public void assertThatShouldReturnObjectContentAssert(){
    ObjectContent<ExampleObject> content=new ObjectContent<>(TYPE,OBJECT);
    assertThat(content.assertThat()).isInstanceOf(ObjectContentAssert.class);
  }
  @Test public void getObjectShouldReturnObject(){
    ObjectContent<ExampleObject> content=new ObjectContent<>(TYPE,OBJECT);
    assertThat(content.getObject()).isEqualTo(OBJECT);
  }
  @Test public void toStringWhenHasTypeShouldReturnString(){
    ObjectContent<ExampleObject> content=new ObjectContent<>(TYPE,OBJECT);
    assertThat(content.toString()).isEqualTo("ObjectContent " + OBJECT + " created from "+ TYPE);
  }
  @Test public void toStringWhenHasNoTypeShouldReturnString(){
    ObjectContent<ExampleObject> content=new ObjectContent<>(null,OBJECT);
    assertThat(content.toString()).isEqualTo("ObjectContent " + OBJECT);
  }
}
