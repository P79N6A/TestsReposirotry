/** 
 * Tests for  {@link ConfigurationPropertiesBindHandlerAdvisor}.
 * @author Phillip Webb
 */
public class ConfigurationPropertiesBindHandlerAdvisorTests {
  private AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
  @After public void cleanup(){
    this.context.close();
  }
  @Test public void loadWithoutConfigurationPropertiesBindHandlerAdvisor(){
    load(WithoutConfigurationPropertiesBindHandlerAdvisor.class,"foo.bar.default.content-type=text/plain","foo.bar.bindings.input.destination=d1","foo.bar.bindings.input.content-type=text/xml","foo.bar.bindings.output.destination=d2");
    BindingServiceProperties properties=this.context.getBean(BindingServiceProperties.class);
    BindingProperties input=properties.getBindings().get("input");
    assertThat(input.getDestination()).isEqualTo("d1");
    assertThat(input.getContentType()).isEqualTo("text/xml");
    BindingProperties output=properties.getBindings().get("output");
    assertThat(output.getDestination()).isEqualTo("d2");
    assertThat(output.getContentType()).isEqualTo("application/json");
  }
  @Test public void loadWithConfigurationPropertiesBindHandlerAdvisor(){
    load(WithConfigurationPropertiesBindHandlerAdvisor.class,"foo.bar.default.content-type=text/plain","foo.bar.bindings.input.destination=d1","foo.bar.bindings.input.content-type=text/xml","foo.bar.bindings.output.destination=d2");
    BindingServiceProperties properties=this.context.getBean(BindingServiceProperties.class);
    BindingProperties input=properties.getBindings().get("input");
    assertThat(input.getDestination()).isEqualTo("d1");
    assertThat(input.getContentType()).isEqualTo("text/xml");
    BindingProperties output=properties.getBindings().get("output");
    assertThat(output.getDestination()).isEqualTo("d2");
    assertThat(output.getContentType()).isEqualTo("text/plain");
  }
  private AnnotationConfigApplicationContext load(  Class<?> configuration,  String... inlinedProperties){
    return load(new Class<?>[]{configuration},inlinedProperties);
  }
  private AnnotationConfigApplicationContext load(  Class<?>[] configuration,  String... inlinedProperties){
    this.context.register(configuration);
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context,inlinedProperties);
    this.context.refresh();
    return this.context;
  }
@Configuration @EnableConfigurationProperties(BindingServiceProperties.class) static class WithoutConfigurationPropertiesBindHandlerAdvisor {
  }
@Configuration @EnableConfigurationProperties(BindingServiceProperties.class) @Import(DefaultValuesConfigurationPropertiesBindHandlerAdvisor.class) static class WithConfigurationPropertiesBindHandlerAdvisor {
  }
static class DefaultValuesConfigurationPropertiesBindHandlerAdvisor implements ConfigurationPropertiesBindHandlerAdvisor {
    @Override public BindHandler apply(    BindHandler bindHandler){
      return new DefaultValuesBindHandler(bindHandler);
    }
  }
static class DefaultValuesBindHandler extends AbstractBindHandler {
    private final Map<ConfigurationPropertyName,ConfigurationPropertyName> mappings;
    DefaultValuesBindHandler(    BindHandler bindHandler){
      super(bindHandler);
      this.mappings=new LinkedHashMap<>();
      this.mappings.put(ConfigurationPropertyName.of("foo.bar.bindings"),ConfigurationPropertyName.of("foo.bar.default"));
    }
    @Override public <T>Bindable<T> onStart(    ConfigurationPropertyName name,    Bindable<T> target,    BindContext context){
      ConfigurationPropertyName defaultName=getDefaultName(name);
      if (defaultName != null) {
        BindResult<T> result=context.getBinder().bind(defaultName,target);
        if (result.isBound()) {
          return target.withExistingValue(result.get());
        }
      }
      return super.onStart(name,target,context);
    }
    private ConfigurationPropertyName getDefaultName(    ConfigurationPropertyName name){
      for (      Map.Entry<ConfigurationPropertyName,ConfigurationPropertyName> mapping : this.mappings.entrySet()) {
        ConfigurationPropertyName from=mapping.getKey();
        ConfigurationPropertyName to=mapping.getValue();
        if (name.getNumberOfElements() == from.getNumberOfElements() + 1 && from.isParentOf(name)) {
          return to;
        }
      }
      return null;
    }
  }
@ConfigurationProperties("foo.bar") static class BindingServiceProperties {
    private Map<String,BindingProperties> bindings=new TreeMap<>();
    public Map<String,BindingProperties> getBindings(){
      return this.bindings;
    }
  }
static class BindingProperties {
    private String destination;
    private String contentType="application/json";
    public String getDestination(){
      return this.destination;
    }
    public void setDestination(    String destination){
      this.destination=destination;
    }
    public String getContentType(){
      return this.contentType;
    }
    public void setContentType(    String contentType){
      this.contentType=contentType;
    }
  }
}
