/** 
 * Tests for  {@link LaunchScriptConfiguration}.
 * @author Andy Wilkinson
 */
public class LaunchScriptConfigurationTests {
  private final AbstractArchiveTask task=mock(AbstractArchiveTask.class);
  private final Project project=mock(Project.class);
  @Before public void setUp(){
    given(this.task.getProject()).willReturn(this.project);
  }
  @Test public void initInfoProvidesUsesArchiveBaseNameByDefault(){
    given(this.task.getBaseName()).willReturn("base-name");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoProvides","base-name");
  }
  @Test public void initInfoShortDescriptionUsesDescriptionByDefault(){
    given(this.project.getDescription()).willReturn("Project description");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoShortDescription","Project description");
  }
  @Test public void initInfoShortDescriptionUsesArchiveBaseNameWhenDescriptionIsNull(){
    given(this.task.getBaseName()).willReturn("base-name");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoShortDescription","base-name");
  }
  @Test public void initInfoShortDescriptionUsesSingleLineVersionOfMultiLineProjectDescription(){
    given(this.project.getDescription()).willReturn("Project\ndescription");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoShortDescription","Project description");
  }
  @Test public void initInfoDescriptionUsesArchiveBaseNameWhenDescriptionIsNull(){
    given(this.task.getBaseName()).willReturn("base-name");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoDescription","base-name");
  }
  @Test public void initInfoDescriptionUsesProjectDescriptionByDefault(){
    given(this.project.getDescription()).willReturn("Project description");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoDescription","Project description");
  }
  @Test public void initInfoDescriptionUsesCorrectlyFormattedMultiLineProjectDescription(){
    given(this.project.getDescription()).willReturn("The\nproject\ndescription");
    assertThat(new LaunchScriptConfiguration(this.task).getProperties()).containsEntry("initInfoDescription","The\n#  project\n#  description");
  }
}
