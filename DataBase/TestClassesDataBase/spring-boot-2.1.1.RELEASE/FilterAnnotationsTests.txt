/** 
 * Tests for  {@link FilterAnnotations}.
 * @author Phillip Webb
 */
public class FilterAnnotationsTests {
  @Test public void filterAnnotation() throws Exception {
    FilterAnnotations filterAnnotations=get(FilterByAnnotation.class);
    assertThat(match(filterAnnotations,ExampleWithAnnotation.class)).isTrue();
    assertThat(match(filterAnnotations,ExampleWithoutAnnotation.class)).isFalse();
  }
  @Test public void filterAssignableType() throws Exception {
    FilterAnnotations filterAnnotations=get(FilterByType.class);
    assertThat(match(filterAnnotations,ExampleWithAnnotation.class)).isFalse();
    assertThat(match(filterAnnotations,ExampleWithoutAnnotation.class)).isTrue();
  }
  @Test public void filterCustom() throws Exception {
    FilterAnnotations filterAnnotations=get(FilterByCustom.class);
    assertThat(match(filterAnnotations,ExampleWithAnnotation.class)).isFalse();
    assertThat(match(filterAnnotations,ExampleWithoutAnnotation.class)).isTrue();
  }
  @Test public void filterAspectJ() throws Exception {
    FilterAnnotations filterAnnotations=get(FilterByAspectJ.class);
    assertThat(match(filterAnnotations,ExampleWithAnnotation.class)).isFalse();
    assertThat(match(filterAnnotations,ExampleWithoutAnnotation.class)).isTrue();
  }
  @Test public void filterRegex() throws Exception {
    FilterAnnotations filterAnnotations=get(FilterByRegex.class);
    assertThat(match(filterAnnotations,ExampleWithAnnotation.class)).isFalse();
    assertThat(match(filterAnnotations,ExampleWithoutAnnotation.class)).isTrue();
  }
  private FilterAnnotations get(  Class<?> type){
    Filters filters=AnnotatedElementUtils.getMergedAnnotation(type,Filters.class);
    return new FilterAnnotations(getClass().getClassLoader(),filters.value());
  }
  private boolean match(  FilterAnnotations filterAnnotations,  Class<?> type) throws IOException {
    MetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(type.getName());
    return filterAnnotations.anyMatches(metadataReader,metadataReaderFactory);
  }
@Filters(@Filter(Service.class)) static class FilterByAnnotation {
  }
@Filters(@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=ExampleWithoutAnnotation.class)) static class FilterByType {
  }
@Filters(@Filter(type=FilterType.CUSTOM,classes=ExampleCustomFilter.class)) static class FilterByCustom {
  }
@Filters(@Filter(type=FilterType.ASPECTJ,pattern="(*..*ExampleWithoutAnnotation)")) static class FilterByAspectJ {
  }
@Filters(@Filter(type=FilterType.REGEX,pattern=".*ExampleWithoutAnnotation")) static class FilterByRegex {
  }
  @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented static @interface Filters {  Filter[] value();
}
static class ExampleCustomFilter implements TypeFilter {
    @Override public boolean match(    MetadataReader metadataReader,    MetadataReaderFactory metadataReaderFactory){
      return metadataReader.getClassMetadata().getClassName().equals(ExampleWithoutAnnotation.class.getName());
    }
  }
@Service static class ExampleWithAnnotation {
  }
static class ExampleWithoutAnnotation {
  }
}
