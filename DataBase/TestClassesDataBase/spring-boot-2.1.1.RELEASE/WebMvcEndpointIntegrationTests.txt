/** 
 * Integration tests for the Actuator's MVC endpoints.
 * @author Andy Wilkinson
 */
public class WebMvcEndpointIntegrationTests {
  private AnnotationConfigWebApplicationContext context;
  @After public void close(){
    TestSecurityContextHolder.clearContext();
    this.context.close();
  }
  @Test public void endpointsAreSecureByDefault() throws Exception {
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(SecureConfiguration.class);
    MockMvc mockMvc=createSecureMockMvc();
    mockMvc.perform(get("/actuator/beans").accept(MediaType.APPLICATION_JSON)).andExpect(status().isUnauthorized());
  }
  @Test public void endpointsAreSecureByDefaultWithCustomBasePath() throws Exception {
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(SecureConfiguration.class);
    TestPropertyValues.of("management.endpoints.web.base-path:/management").applyTo(this.context);
    MockMvc mockMvc=createSecureMockMvc();
    mockMvc.perform(get("/management/beans").accept(MediaType.APPLICATION_JSON)).andExpect(status().isUnauthorized());
  }
  @Test public void endpointsAreSecureWithActuatorRoleWithCustomBasePath() throws Exception {
    TestSecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user","N/A","ROLE_ACTUATOR"));
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(SecureConfiguration.class);
    TestPropertyValues.of("management.endpoints.web.base-path:/management","management.endpoints.web.exposure.include=*").applyTo(this.context);
    MockMvc mockMvc=createSecureMockMvc();
    mockMvc.perform(get("/management/beans")).andExpect(status().isOk());
  }
  @Test public void linksAreProvidedToAllEndpointTypes() throws Exception {
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(DefaultConfiguration.class,EndpointsConfiguration.class);
    TestPropertyValues.of("management.endpoints.web.exposure.include=*").applyTo(this.context);
    MockMvc mockMvc=doCreateMockMvc();
    mockMvc.perform(get("/actuator").accept("*/*")).andExpect(status().isOk()).andExpect(jsonPath("_links",both(hasKey("beans")).and(hasKey("servlet")).and(hasKey("restcontroller")).and(hasKey("controller"))));
  }
  private MockMvc createSecureMockMvc(){
    return doCreateMockMvc(springSecurity());
  }
  private MockMvc doCreateMockMvc(  MockMvcConfigurer... configurers){
    this.context.setServletContext(new MockServletContext());
    this.context.refresh();
    DefaultMockMvcBuilder builder=MockMvcBuilders.webAppContextSetup(this.context);
    for (    MockMvcConfigurer configurer : configurers) {
      builder.apply(configurer);
    }
    return builder.build();
  }
@ImportAutoConfiguration({JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,ServletManagementContextAutoConfiguration.class,AuditAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementContextAutoConfiguration.class,AuditAutoConfiguration.class,DispatcherServletAutoConfiguration.class,BeansEndpointAutoConfiguration.class}) static class DefaultConfiguration {
  }
@Import(SecureConfiguration.class) @ImportAutoConfiguration({HypermediaAutoConfiguration.class}) static class SpringHateoasConfiguration {
  }
@Import(SecureConfiguration.class) @ImportAutoConfiguration({HypermediaAutoConfiguration.class,RepositoryRestMvcAutoConfiguration.class}) static class SpringDataRestConfiguration {
  }
@Import(DefaultConfiguration.class) @ImportAutoConfiguration({SecurityAutoConfiguration.class}) static class SecureConfiguration {
  }
@ServletEndpoint(id="servlet") static class TestServletEndpoint implements Supplier<EndpointServlet> {
    @Override public EndpointServlet get(){
      return new EndpointServlet(new HttpServlet(){
      }
);
    }
  }
@ControllerEndpoint(id="controller") static class TestControllerEndpoint {
  }
@RestControllerEndpoint(id="restcontroller") static class TestRestControllerEndpoint {
  }
@Configuration static class EndpointsConfiguration {
    @Bean TestServletEndpoint testServletEndpoint(){
      return new TestServletEndpoint();
    }
    @Bean TestControllerEndpoint testControllerEndpoint(){
      return new TestControllerEndpoint();
    }
    @Bean TestRestControllerEndpoint testRestControllerEndpoint(){
      return new TestRestControllerEndpoint();
    }
  }
}
