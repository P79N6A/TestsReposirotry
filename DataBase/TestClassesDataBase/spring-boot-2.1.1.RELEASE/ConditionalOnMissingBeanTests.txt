/** 
 * Tests for  {@link ConditionalOnMissingBean}.
 * @author Dave Syer
 * @author Phillip Webb
 * @author Jakub Kubrynski
 * @author Andy Wilkinson
 */
@SuppressWarnings("resource") public class ConditionalOnMissingBeanTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner();
  @Test public void testNameOnMissingBeanCondition(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class,OnBeanNameConfiguration.class).run((context) -> {
      assertThat(context).doesNotHaveBean("bar");
      assertThat(context.getBean("foo")).isEqualTo("foo");
    }
);
  }
  @Test public void testNameOnMissingBeanConditionReverseOrder(){
    this.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class,FooConfiguration.class).run((context) -> {
      assertThat(context).hasBean("bar");
      assertThat(context.getBean("foo")).isEqualTo("foo");
    }
);
  }
  @Test public void testNameAndTypeOnMissingBeanCondition(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class,OnBeanNameAndTypeConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("bar"));
  }
  @Test public void hierarchyConsidered(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(HierarchyConsidered.class).run((context) -> assertThat(context.containsLocalBean("bar")).isFalse()));
  }
  @Test public void hierarchyNotConsidered(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(HierarchyNotConsidered.class).run((context) -> assertThat(context.containsLocalBean("bar")).isTrue()));
  }
  @Test public void impliedOnBeanMethod(){
    this.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class,ImpliedOnBeanMethod.class).run((context) -> assertThat(context).hasSingleBean(ExampleBean.class));
  }
  @Test public void testAnnotationOnMissingBeanCondition(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class,OnAnnotationConfiguration.class).run((context) -> {
      assertThat(context).doesNotHaveBean("bar");
      assertThat(context.getBean("foo")).isEqualTo("foo");
    }
);
  }
  @Test public void testAnnotationOnMissingBeanConditionWithEagerFactoryBean(){
    this.contextRunner.withUserConfiguration(FooConfiguration.class,OnAnnotationConfiguration.class,FactoryBeanXmlConfiguration.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> {
      assertThat(context).doesNotHaveBean("bar");
      assertThat(context).hasBean("example");
      assertThat(context.getBean("foo")).isEqualTo("foo");
    }
);
  }
  @Test public void testOnMissingBeanConditionWithFactoryBean(){
    this.contextRunner.withUserConfiguration(FactoryBeanConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithComponentScannedFactoryBean(){
    this.contextRunner.withUserConfiguration(ComponentScannedFactoryBeanBeanMethodConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments(){
    this.contextRunner.withUserConfiguration(ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments(){
    this.contextRunner.withUserConfiguration(FactoryBeanWithBeanMethodArgumentsConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).withPropertyValues("theValue=foo").run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithConcreteFactoryBean(){
    this.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithUnhelpfulFactoryBean(){
    this.contextRunner.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(2));
  }
  @Test public void testOnMissingBeanConditionWithRegisteredFactoryBean(){
    this.contextRunner.withUserConfiguration(RegisteredFactoryBeanConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute(){
    this.contextRunner.withUserConfiguration(NonspecificFactoryBeanClassAttributeConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute(){
    this.contextRunner.withUserConfiguration(NonspecificFactoryBeanStringAttributeConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithFactoryBeanInXml(){
    this.contextRunner.withUserConfiguration(FactoryBeanXmlConfiguration.class,ConditionalOnFactoryBean.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory"));
  }
  @Test public void testOnMissingBeanConditionWithIgnoredSubclass(){
    this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,ConditionalOnIgnoredSubclass.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> {
      assertThat(context).getBeans(ExampleBean.class).hasSize(2);
      assertThat(context).getBeans(CustomExampleBean.class).hasSize(1);
    }
);
  }
  @Test public void testOnMissingBeanConditionWithIgnoredSubclassByName(){
    this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class,ConditionalOnIgnoredSubclassByName.class,PropertyPlaceholderAutoConfiguration.class).run((context) -> {
      assertThat(context).getBeans(ExampleBean.class).hasSize(2);
      assertThat(context).getBeans(CustomExampleBean.class).hasSize(1);
    }
);
  }
  @Test public void grandparentIsConsideredWhenUsingAncestorsStrategy(){
    this.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class).run((grandparent) -> new ApplicationContextRunner().withParent(grandparent).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(ExampleBeanConfiguration.class,OnBeanInAncestorsConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(1))));
  }
  @Test public void currentContextIsIgnoredWhenUsingAncestorsStrategy(){
    this.contextRunner.run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(ExampleBeanConfiguration.class,OnBeanInAncestorsConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(2)));
  }
  @Test public void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation(){
    this.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,OnAnnotationWithFactoryBeanConfiguration.class).run((context) -> {
      assertThat(context).doesNotHaveBean("bar");
      assertThat(context).hasSingleBean(ExampleBean.class);
    }
);
  }
  @Test public void parameterizedContainerWhenValueIsOfMissingBeanMatches(){
    this.contextRunner.withUserConfiguration(ParameterizedWithoutCustomConfig.class,ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("otherExampleBean","conditionalCustomExampleBean")));
  }
  @Test public void parameterizedContainerWhenValueIsOfExistingBeanDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class,ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  @Test public void parameterizedContainerWhenValueIsOfMissingBeanRegistrationMatches(){
    this.contextRunner.withUserConfiguration(ParameterizedWithoutCustomContainerConfig.class,ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("otherExampleBean","conditionalCustomExampleBean")));
  }
  @Test public void parameterizedContainerWhenValueIsOfExistingBeanRegistrationDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class,ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  @Test public void parameterizedContainerWhenReturnTypeIsOfExistingBeanDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class,ParameterizedConditionWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  @Test public void parameterizedContainerWhenReturnTypeIsOfExistingBeanRegistrationDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class,ParameterizedConditionWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  @Test public void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class,ParameterizedConditionWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  @Test public void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanRegistrationDoesNotMatch(){
    this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class,ParameterizedConditionWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean")));
  }
  private Consumer<ConfigurableApplicationContext> exampleBeanRequirement(  String... names){
    return (context) -> {
      String[] beans=context.getBeanNamesForType(ExampleBean.class);
      String[] containers=context.getBeanNamesForType(TestParameterizedContainer.class);
      assertThat(StringUtils.concatenateStringArrays(beans,containers)).containsOnly(names);
    }
;
  }
@Configuration protected static class OnBeanInAncestorsConfiguration {
    @Bean @ConditionalOnMissingBean(search=SearchStrategy.ANCESTORS) public ExampleBean exampleBean2(){
      return new ExampleBean("test");
    }
  }
@Configuration @ConditionalOnMissingBean(name="foo") protected static class OnBeanNameConfiguration {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration @ConditionalOnMissingBean(name="foo",value=Date.class) @ConditionalOnBean(name="foo",value=Date.class) protected static class OnBeanNameAndTypeConfiguration {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration protected static class FactoryBeanConfiguration {
    @Bean public FactoryBean<ExampleBean> exampleBeanFactoryBean(){
      return new ExampleFactoryBean("foo");
    }
  }
@Configuration @ComponentScan(basePackages="org.springframework.boot.autoconfigure.condition.scan",includeFilters=@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=ScannedFactoryBeanConfiguration.class)) protected static class ComponentScannedFactoryBeanBeanMethodConfiguration {
  }
@Configuration @ComponentScan(basePackages="org.springframework.boot.autoconfigure.condition.scan",includeFilters=@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=ScannedFactoryBeanWithBeanMethodArgumentsConfiguration.class)) protected static class ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration {
  }
@Configuration protected static class FactoryBeanWithBeanMethodArgumentsConfiguration {
    @Bean public FactoryBean<ExampleBean> exampleBeanFactoryBean(    @Value("${theValue}") String value){
      return new ExampleFactoryBean(value);
    }
  }
@Configuration protected static class ConcreteFactoryBeanConfiguration {
    @Bean public ExampleFactoryBean exampleBeanFactoryBean(){
      return new ExampleFactoryBean("foo");
    }
  }
@Configuration protected static class UnhelpfulFactoryBeanConfiguration {
    @Bean @SuppressWarnings("rawtypes") public FactoryBean exampleBeanFactoryBean(){
      return new ExampleFactoryBean("foo");
    }
  }
@Configuration @Import(NonspecificFactoryBeanClassAttributeRegistrar.class) protected static class NonspecificFactoryBeanClassAttributeConfiguration {
  }
protected static class NonspecificFactoryBeanClassAttributeRegistrar implements ImportBeanDefinitionRegistrar {
    @Override public void registerBeanDefinitions(    AnnotationMetadata meta,    BeanDefinitionRegistry registry){
      BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(NonspecificFactoryBean.class);
      builder.addConstructorArgValue("foo");
      builder.getBeanDefinition().setAttribute(OnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,ExampleBean.class);
      registry.registerBeanDefinition("exampleBeanFactoryBean",builder.getBeanDefinition());
    }
  }
@Configuration @Import(NonspecificFactoryBeanClassAttributeRegistrar.class) protected static class NonspecificFactoryBeanStringAttributeConfiguration {
  }
protected static class NonspecificFactoryBeanStringAttributeRegistrar implements ImportBeanDefinitionRegistrar {
    @Override public void registerBeanDefinitions(    AnnotationMetadata meta,    BeanDefinitionRegistry registry){
      BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(NonspecificFactoryBean.class);
      builder.addConstructorArgValue("foo");
      builder.getBeanDefinition().setAttribute(OnBeanCondition.FACTORY_BEAN_OBJECT_TYPE,ExampleBean.class.getName());
      registry.registerBeanDefinition("exampleBeanFactoryBean",builder.getBeanDefinition());
    }
  }
@Configuration @Import(FactoryBeanRegistrar.class) protected static class RegisteredFactoryBeanConfiguration {
  }
protected static class FactoryBeanRegistrar implements ImportBeanDefinitionRegistrar {
    @Override public void registerBeanDefinitions(    AnnotationMetadata meta,    BeanDefinitionRegistry registry){
      BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(ExampleFactoryBean.class);
      builder.addConstructorArgValue("foo");
      registry.registerBeanDefinition("exampleBeanFactoryBean",builder.getBeanDefinition());
    }
  }
@Configuration @ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml") protected static class FactoryBeanXmlConfiguration {
  }
@Configuration protected static class ConditionalOnFactoryBean {
    @Bean @ConditionalOnMissingBean(ExampleBean.class) public ExampleBean createExampleBean(){
      return new ExampleBean("direct");
    }
  }
@Configuration protected static class ConditionalOnIgnoredSubclass {
    @Bean @ConditionalOnMissingBean(value=ExampleBean.class,ignored=CustomExampleBean.class) public ExampleBean exampleBean(){
      return new ExampleBean("test");
    }
  }
@Configuration protected static class ConditionalOnIgnoredSubclassByName {
    @Bean @ConditionalOnMissingBean(value=ExampleBean.class,ignoredType="org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean") public ExampleBean exampleBean(){
      return new ExampleBean("test");
    }
  }
@Configuration protected static class CustomExampleBeanConfiguration {
    @Bean public CustomExampleBean customExampleBean(){
      return new CustomExampleBean();
    }
  }
@Configuration @ConditionalOnMissingBean(annotation=EnableScheduling.class) protected static class OnAnnotationConfiguration {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration @ConditionalOnMissingBean(annotation=TestAnnotation.class) protected static class OnAnnotationWithFactoryBeanConfiguration {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration @EnableScheduling protected static class FooConfiguration {
    @Bean public String foo(){
      return "foo";
    }
  }
@Configuration @ConditionalOnMissingBean(name="foo") protected static class HierarchyConsidered {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration @ConditionalOnMissingBean(name="foo",search=SearchStrategy.CURRENT) protected static class HierarchyNotConsidered {
    @Bean public String bar(){
      return "bar";
    }
  }
@Configuration protected static class ExampleBeanConfiguration {
    @Bean public ExampleBean exampleBean(){
      return new ExampleBean("test");
    }
  }
@Configuration protected static class ImpliedOnBeanMethod {
    @Bean @ConditionalOnMissingBean public ExampleBean exampleBean2(){
      return new ExampleBean("test");
    }
  }
public static class ExampleFactoryBean implements FactoryBean<ExampleBean> {
    public ExampleFactoryBean(    String value){
      Assert.state(!value.contains("$"),"value should not contain '$'");
    }
    @Override public ExampleBean getObject(){
      return new ExampleBean("fromFactory");
    }
    @Override public Class<?> getObjectType(){
      return ExampleBean.class;
    }
    @Override public boolean isSingleton(){
      return false;
    }
  }
public static class NonspecificFactoryBean implements FactoryBean<Object> {
    public NonspecificFactoryBean(    String value){
      Assert.state(!value.contains("$"),"value should not contain '$'");
    }
    @Override public ExampleBean getObject(){
      return new ExampleBean("fromFactory");
    }
    @Override public Class<?> getObjectType(){
      return ExampleBean.class;
    }
    @Override public boolean isSingleton(){
      return false;
    }
  }
@Configuration static class ParameterizedWithCustomConfig {
    @Bean public CustomExampleBean customExampleBean(){
      return new CustomExampleBean();
    }
  }
@Configuration static class ParameterizedWithoutCustomConfig {
    @Bean public OtherExampleBean otherExampleBean(){
      return new OtherExampleBean();
    }
  }
@Configuration static class ParameterizedWithoutCustomContainerConfig {
    @Bean public TestParameterizedContainer<OtherExampleBean> otherExampleBean(){
      return new TestParameterizedContainer<OtherExampleBean>();
    }
  }
@Configuration static class ParameterizedWithCustomContainerConfig {
    @Bean public TestParameterizedContainer<CustomExampleBean> customExampleBean(){
      return new TestParameterizedContainer<CustomExampleBean>();
    }
  }
@Configuration static class ParameterizedConditionWithValueConfig {
    @Bean @ConditionalOnMissingBean(value=CustomExampleBean.class,parameterizedContainer=TestParameterizedContainer.class) public CustomExampleBean conditionalCustomExampleBean(){
      return new CustomExampleBean();
    }
  }
@Configuration static class ParameterizedConditionWithReturnTypeConfig {
    @Bean @ConditionalOnMissingBean(parameterizedContainer=TestParameterizedContainer.class) public CustomExampleBean conditionalCustomExampleBean(){
      return new CustomExampleBean();
    }
  }
@Configuration static class ParameterizedConditionWithReturnRegistrationTypeConfig {
    @Bean @ConditionalOnMissingBean(parameterizedContainer=TestParameterizedContainer.class) public TestParameterizedContainer<CustomExampleBean> conditionalCustomExampleBean(){
      return new TestParameterizedContainer<CustomExampleBean>();
    }
  }
@TestAnnotation public static class ExampleBean {
    private String value;
    public ExampleBean(    String value){
      this.value=value;
    }
    @Override public String toString(){
      return this.value;
    }
  }
public static class CustomExampleBean extends ExampleBean {
    public CustomExampleBean(){
      super("custom subclass");
    }
  }
public static class OtherExampleBean extends ExampleBean {
    public OtherExampleBean(){
      super("other subclass");
    }
  }
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface TestAnnotation {}
}
