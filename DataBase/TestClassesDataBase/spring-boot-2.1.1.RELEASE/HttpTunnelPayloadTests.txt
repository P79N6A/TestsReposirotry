/** 
 * Tests for  {@link HttpTunnelPayload}.
 * @author Phillip Webb
 */
public class HttpTunnelPayloadTests {
  @Test public void sequenceMustBePositive(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpTunnelPayload(0,ByteBuffer.allocate(1))).withMessageContaining("Sequence must be positive");
  }
  @Test public void dataMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpTunnelPayload(1,null)).withMessageContaining("Data must not be null");
  }
  @Test public void getSequence(){
    HttpTunnelPayload payload=new HttpTunnelPayload(1,ByteBuffer.allocate(1));
    assertThat(payload.getSequence()).isEqualTo(1L);
  }
  @Test public void getData() throws Exception {
    ByteBuffer data=ByteBuffer.wrap("hello".getBytes());
    HttpTunnelPayload payload=new HttpTunnelPayload(1,data);
    assertThat(getData(payload)).isEqualTo(data.array());
  }
  @Test public void assignTo() throws Exception {
    ByteBuffer data=ByteBuffer.wrap("hello".getBytes());
    HttpTunnelPayload payload=new HttpTunnelPayload(2,data);
    MockHttpServletResponse servletResponse=new MockHttpServletResponse();
    HttpOutputMessage response=new ServletServerHttpResponse(servletResponse);
    payload.assignTo(response);
    assertThat(servletResponse.getHeader("x-seq")).isEqualTo("2");
    assertThat(servletResponse.getContentAsString()).isEqualTo("hello");
  }
  @Test public void getNoData() throws Exception {
    MockHttpServletRequest servletRequest=new MockHttpServletRequest();
    HttpInputMessage request=new ServletServerHttpRequest(servletRequest);
    HttpTunnelPayload payload=HttpTunnelPayload.get(request);
    assertThat(payload).isNull();
  }
  @Test public void getWithMissingHeader() throws Exception {
    MockHttpServletRequest servletRequest=new MockHttpServletRequest();
    servletRequest.setContent("hello".getBytes());
    HttpInputMessage request=new ServletServerHttpRequest(servletRequest);
    assertThatIllegalStateException().isThrownBy(() -> HttpTunnelPayload.get(request)).withMessageContaining("Missing sequence header");
  }
  @Test public void getWithData() throws Exception {
    MockHttpServletRequest servletRequest=new MockHttpServletRequest();
    servletRequest.setContent("hello".getBytes());
    servletRequest.addHeader("x-seq",123);
    HttpInputMessage request=new ServletServerHttpRequest(servletRequest);
    HttpTunnelPayload payload=HttpTunnelPayload.get(request);
    assertThat(payload.getSequence()).isEqualTo(123L);
    assertThat(getData(payload)).isEqualTo("hello".getBytes());
  }
  @Test public void getPayloadData() throws Exception {
    ReadableByteChannel channel=Channels.newChannel(new ByteArrayInputStream("hello".getBytes()));
    ByteBuffer payloadData=HttpTunnelPayload.getPayloadData(channel);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    WritableByteChannel writeChannel=Channels.newChannel(out);
    while (payloadData.hasRemaining()) {
      writeChannel.write(payloadData);
    }
    assertThat(out.toByteArray()).isEqualTo("hello".getBytes());
  }
  @Test public void getPayloadDataWithTimeout() throws Exception {
    ReadableByteChannel channel=mock(ReadableByteChannel.class);
    given(channel.read(any(ByteBuffer.class))).willThrow(new SocketTimeoutException());
    ByteBuffer payload=HttpTunnelPayload.getPayloadData(channel);
    assertThat(payload).isNull();
  }
  private byte[] getData(  HttpTunnelPayload payload) throws IOException {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    WritableByteChannel channel=Channels.newChannel(out);
    payload.writeTo(channel);
    return out.toByteArray();
  }
}
