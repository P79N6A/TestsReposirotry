/** 
 * Tests for  {@link ConfigurationPropertiesReportEndpointAutoConfiguration}.
 * @author Phillip Webb
 */
public class ConfigurationPropertiesReportEndpointAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(ConfigurationPropertiesReportEndpointAutoConfiguration.class));
  @Test public void runShouldHaveEndpointBean(){
    this.contextRunner.withUserConfiguration(Config.class).run(validateTestProperties("******","654321"));
  }
  @Test public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(){
    this.contextRunner.withPropertyValues("management.endpoint.configprops.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(ConfigurationPropertiesReportEndpoint.class));
  }
  @Test public void keysToSanitizeCanBeConfiguredViaTheEnvironment(){
    this.contextRunner.withUserConfiguration(Config.class).withPropertyValues("management.endpoint.configprops.keys-to-sanitize: .*pass.*, property").run(validateTestProperties("******","******"));
  }
  private ContextConsumer<AssertableApplicationContext> validateTestProperties(  String dbPassword,  String myTestProperty){
    return (context) -> {
      assertThat(context).hasSingleBean(ConfigurationPropertiesReportEndpoint.class);
      ConfigurationPropertiesReportEndpoint endpoint=context.getBean(ConfigurationPropertiesReportEndpoint.class);
      ApplicationConfigurationProperties properties=endpoint.configurationProperties();
      Map<String,Object> nestedProperties=properties.getContexts().get(context.getId()).getBeans().get("testProperties").getProperties();
      assertThat(nestedProperties).isNotNull();
      assertThat(nestedProperties.get("dbPassword")).isEqualTo(dbPassword);
      assertThat(nestedProperties.get("myTestProperty")).isEqualTo(myTestProperty);
    }
;
  }
@Configuration @EnableConfigurationProperties public static class Config {
    @Bean public TestProperties testProperties(){
      return new TestProperties();
    }
  }
@ConfigurationProperties("test") static class TestProperties {
    private String dbPassword="123456";
    private String myTestProperty="654321";
    public String getDbPassword(){
      return this.dbPassword;
    }
    public void setDbPassword(    String dbPassword){
      this.dbPassword=dbPassword;
    }
    public String getMyTestProperty(){
      return this.myTestProperty;
    }
    public void setMyTestProperty(    String myTestProperty){
      this.myTestProperty=myTestProperty;
    }
  }
}
