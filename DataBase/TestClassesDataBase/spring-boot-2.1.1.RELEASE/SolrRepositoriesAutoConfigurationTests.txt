/** 
 * Tests for  {@link SolrRepositoriesAutoConfiguration}.
 * @author Christoph Strobl
 * @author Oliver Gierke
 */
public class SolrRepositoriesAutoConfigurationTests {
  private AnnotationConfigApplicationContext context;
  @After public void close(){
    this.context.close();
  }
  @Test public void testDefaultRepositoryConfiguration(){
    initContext(TestConfiguration.class);
    assertThat(this.context.getBean(CityRepository.class)).isNotNull();
    assertThat(this.context.getBean(SolrClient.class)).isInstanceOf(HttpSolrClient.class);
  }
  @Test public void testNoRepositoryConfiguration(){
    initContext(EmptyConfiguration.class);
    assertThat(this.context.getBean(SolrClient.class)).isInstanceOf(HttpSolrClient.class);
  }
  @Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized(){
    initContext(CustomizedConfiguration.class);
    assertThat(this.context.getBean(CitySolrRepository.class)).isNotNull();
  }
  @Test(expected=NoSuchBeanDefinitionException.class) public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories(){
    initContext(SortOfInvalidCustomConfiguration.class);
    this.context.getBean(CityRepository.class);
  }
  private void initContext(  Class<?> configClass){
    this.context=new AnnotationConfigApplicationContext();
    this.context.register(configClass,SolrAutoConfiguration.class,SolrRepositoriesAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class);
    this.context.refresh();
  }
@Configuration @TestAutoConfigurationPackage(City.class) static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) static class EmptyConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(SolrRepositoriesAutoConfigurationTests.class) @EnableSolrRepositories(basePackageClasses=CitySolrRepository.class) protected static class CustomizedConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(SolrRepositoriesAutoConfigurationTests.class) @EnableSolrRepositories("foo.bar") protected static class SortOfInvalidCustomConfiguration {
  }
}
