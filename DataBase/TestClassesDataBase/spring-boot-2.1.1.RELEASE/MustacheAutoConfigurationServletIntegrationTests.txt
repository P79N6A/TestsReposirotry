/** 
 * Integration Tests for  {@link MustacheAutoConfiguration},  {@link MustacheViewResolver}and  {@link MustacheView}.
 * @author Dave Syer
 */
@RunWith(SpringRunner.class) @DirtiesContext @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT) public class MustacheAutoConfigurationServletIntegrationTests {
  @Autowired private ServletWebServerApplicationContext context;
  private int port;
  @Before public void init(){
    this.port=this.context.getWebServer().getPort();
  }
  @Test public void contextLoads(){
    String source="Hello {{arg}}!";
    Template tmpl=Mustache.compiler().compile(source);
    Map<String,String> context=new HashMap<>();
    context.put("arg","world");
    assertThat(tmpl.execute(context)).isEqualTo("Hello world!");
  }
  @Test public void testHomePage(){
    String body=new TestRestTemplate().getForObject("http://localhost:" + this.port,String.class);
    assertThat(body.contains("Hello World")).isTrue();
  }
  @Test public void testPartialPage(){
    String body=new TestRestTemplate().getForObject("http://localhost:" + this.port + "/partial",String.class);
    assertThat(body.contains("Hello World")).isTrue();
  }
@Configuration @MinimalWebConfiguration @Controller public static class Application {
    @RequestMapping("/") public String home(    Map<String,Object> model){
      model.put("time",new Date());
      model.put("message","Hello World");
      model.put("title","Hello App");
      return "home";
    }
    @RequestMapping("/partial") public String layout(    Map<String,Object> model){
      model.put("time",new Date());
      model.put("message","Hello World");
      model.put("title","Hello App");
      return "partial";
    }
    @Bean public MustacheViewResolver viewResolver(){
      Mustache.Compiler compiler=Mustache.compiler().withLoader(new MustacheResourceTemplateLoader("classpath:/mustache-templates/",".html"));
      MustacheViewResolver resolver=new MustacheViewResolver(compiler);
      resolver.setPrefix("classpath:/mustache-templates/");
      resolver.setSuffix(".html");
      return resolver;
    }
    public static void main(    String[] args){
      SpringApplication.run(Application.class,args);
    }
  }
  @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import({ServletWebServerFactoryAutoConfiguration.class,DispatcherServletAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class}) protected @interface MinimalWebConfiguration {}
}
