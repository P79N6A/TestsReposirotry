private static final class ControllerBuilder {
  private final List<String> mappings=new ArrayList<>();
  private final String name;
  private final File classesDirectory;
  private ControllerBuilder(  String name,  File classesDirectory){
    this.name=name;
    this.classesDirectory=classesDirectory;
  }
  public ControllerBuilder withRequestMapping(  String mapping){
    this.mappings.add(mapping);
    return this;
  }
  public void build() throws Exception {
    Builder<Object> builder=new ByteBuddy().subclass(Object.class).name(this.name).annotateType(AnnotationDescription.Builder.ofType(RestController.class).build());
    for (    String mapping : this.mappings) {
      builder=builder.defineMethod(mapping,String.class,Visibility.PUBLIC).intercept(FixedValue.value(mapping)).annotateMethod(AnnotationDescription.Builder.ofType(RequestMapping.class).defineArray("value",mapping).build());
    }
    builder.make().saveIn(this.classesDirectory);
  }
}
