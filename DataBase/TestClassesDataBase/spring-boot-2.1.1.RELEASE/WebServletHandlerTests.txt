/** 
 * Tests for  {@link WebServletHandler}.
 * @author Andy Wilkinson
 */
public class WebServletHandlerTests {
  private final WebServletHandler handler=new WebServletHandler();
  private final SimpleBeanDefinitionRegistry registry=new SimpleBeanDefinitionRegistry();
  @SuppressWarnings("unchecked") @Test public void defaultServletConfiguration() throws IOException {
    ScannedGenericBeanDefinition scanned=new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationServlet.class.getName()));
    this.handler.handle(scanned,this.registry);
    BeanDefinition servletRegistrationBean=this.registry.getBeanDefinition(DefaultConfigurationServlet.class.getName());
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat(propertyValues.get("asyncSupported")).isEqualTo(false);
    assertThat(((Map<String,String>)propertyValues.get("initParameters"))).isEmpty();
    assertThat((Integer)propertyValues.get("loadOnStartup")).isEqualTo(-1);
    assertThat(propertyValues.get("name")).isEqualTo(DefaultConfigurationServlet.class.getName());
    assertThat((String[])propertyValues.get("urlMappings")).isEmpty();
    assertThat(propertyValues.get("servlet")).isEqualTo(scanned);
  }
  @Test public void servletWithCustomName() throws IOException {
    ScannedGenericBeanDefinition scanned=new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(CustomNameServlet.class.getName()));
    this.handler.handle(scanned,this.registry);
    BeanDefinition servletRegistrationBean=this.registry.getBeanDefinition("custom");
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat(propertyValues.get("name")).isEqualTo("custom");
  }
  @Test public void asyncSupported() throws IOException {
    BeanDefinition servletRegistrationBean=getBeanDefinition(AsyncSupportedServlet.class);
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat(propertyValues.get("asyncSupported")).isEqualTo(true);
  }
  @SuppressWarnings("unchecked") @Test public void initParameters() throws IOException {
    BeanDefinition servletRegistrationBean=getBeanDefinition(InitParametersServlet.class);
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat((Map<String,String>)propertyValues.get("initParameters")).containsEntry("a","alpha").containsEntry("b","bravo");
  }
  @Test public void urlMappings() throws IOException {
    BeanDefinition servletRegistrationBean=getBeanDefinition(UrlPatternsServlet.class);
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat((String[])propertyValues.get("urlMappings")).contains("alpha","bravo");
  }
  @Test public void urlMappingsFromValue() throws IOException {
    BeanDefinition servletRegistrationBean=getBeanDefinition(UrlPatternsFromValueServlet.class);
    MutablePropertyValues propertyValues=servletRegistrationBean.getPropertyValues();
    assertThat((String[])propertyValues.get("urlMappings")).contains("alpha","bravo");
  }
  @Test public void urlPatternsDeclaredTwice() throws IOException {
    assertThatIllegalStateException().isThrownBy(() -> getBeanDefinition(UrlPatternsDeclaredTwiceServlet.class)).withMessageContaining("The urlPatterns and value attributes are mutually exclusive.");
  }
  private BeanDefinition getBeanDefinition(  Class<?> filterClass) throws IOException {
    ScannedGenericBeanDefinition scanned=new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(filterClass.getName()));
    this.handler.handle(scanned,this.registry);
    return this.registry.getBeanDefinition(filterClass.getName());
  }
@WebServlet class DefaultConfigurationServlet extends HttpServlet {
  }
@WebServlet(asyncSupported=true) class AsyncSupportedServlet extends HttpServlet {
  }
@WebServlet(initParams={@WebInitParam(name="a",value="alpha"),@WebInitParam(name="b",value="bravo")}) class InitParametersServlet extends HttpServlet {
  }
@WebServlet(urlPatterns={"alpha","bravo"}) class UrlPatternsServlet extends HttpServlet {
  }
@WebServlet({"alpha","bravo"}) class UrlPatternsFromValueServlet extends HttpServlet {
  }
@WebServlet(value={"alpha","bravo"},urlPatterns={"alpha","bravo"}) class UrlPatternsDeclaredTwiceServlet extends HttpServlet {
  }
@WebServlet(name="custom") class CustomNameServlet extends HttpServlet {
  }
}
