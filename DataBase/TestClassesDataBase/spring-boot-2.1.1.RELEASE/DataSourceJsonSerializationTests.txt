/** 
 * Test that a  {@link DataSource} can be exposed as JSON for actuator endpoints.
 * @author Dave Syer
 */
public class DataSourceJsonSerializationTests {
  @Test public void serializerFactory() throws Exception {
    DataSource dataSource=new DataSource();
    SerializerFactory factory=BeanSerializerFactory.instance.withSerializerModifier(new GenericSerializerModifier());
    ObjectMapper mapper=new ObjectMapper();
    mapper.setSerializerFactory(factory);
    String value=mapper.writeValueAsString(dataSource);
    assertThat(value.contains("\"url\":")).isTrue();
  }
  @Test public void serializerWithMixin() throws Exception {
    DataSource dataSource=new DataSource();
    ObjectMapper mapper=new ObjectMapper();
    mapper.addMixIn(DataSource.class,DataSourceJson.class);
    String value=mapper.writeValueAsString(dataSource);
    assertThat(value.contains("\"url\":")).isTrue();
    assertThat(StringUtils.countOccurrencesOf(value,"\"url\"")).isEqualTo(1);
  }
@JsonSerialize(using=TomcatDataSourceSerializer.class) protected interface DataSourceJson {
  }
protected static class TomcatDataSourceSerializer extends JsonSerializer<DataSource> {
    private ConversionService conversionService=new DefaultConversionService();
    @Override public void serialize(    DataSource value,    JsonGenerator jgen,    SerializerProvider provider) throws IOException {
      jgen.writeStartObject();
      for (      PropertyDescriptor property : BeanUtils.getPropertyDescriptors(DataSource.class)) {
        Method reader=property.getReadMethod();
        if (reader != null && property.getWriteMethod() != null && this.conversionService.canConvert(String.class,property.getPropertyType())) {
          jgen.writeObjectField(property.getName(),ReflectionUtils.invokeMethod(reader,value));
        }
      }
      jgen.writeEndObject();
    }
  }
protected static class GenericSerializerModifier extends BeanSerializerModifier {
    private ConversionService conversionService=new DefaultConversionService();
    @Override public List<BeanPropertyWriter> changeProperties(    SerializationConfig config,    BeanDescription beanDesc,    List<BeanPropertyWriter> beanProperties){
      List<BeanPropertyWriter> result=new ArrayList<>();
      for (      BeanPropertyWriter writer : beanProperties) {
        AnnotatedMethod setter=beanDesc.findMethod("set" + StringUtils.capitalize(writer.getName()),new Class<?>[]{writer.getType().getRawClass()});
        if (setter != null && this.conversionService.canConvert(String.class,writer.getType().getRawClass())) {
          result.add(writer);
        }
      }
      return result;
    }
  }
}
