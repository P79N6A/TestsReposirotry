/** 
 * Tests for  {@link JdbcRepositoriesAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class JdbcRepositoriesAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(JdbcRepositoriesAutoConfiguration.class));
  @Test public void backsOffWithNoDataSource(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(JdbcRepositoryConfigExtension.class));
  }
  @Test public void backsOffWithNoJdbcOperations(){
    this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class,TestConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(DataSource.class);
      assertThat(context).doesNotHaveBean(JdbcRepositoryConfigExtension.class);
    }
);
  }
  @Test public void basicAutoConfiguration(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class,DataSourceAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class,EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.schema=classpath:data-jdbc-schema.sql","spring.datasource.data=classpath:city.sql").run((context) -> {
      assertThat(context).hasSingleBean(JdbcConfiguration.class);
      assertThat(context).hasSingleBean(CityRepository.class);
      assertThat(context.getBean(CityRepository.class).findById(2000L)).isPresent();
    }
);
  }
  @Test public void autoConfigurationWithNoRepositories(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class)).withUserConfiguration(EmbeddedDataSourceConfiguration.class,EmptyConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(JdbcConfiguration.class);
      assertThat(context).doesNotHaveBean(Repository.class);
    }
);
  }
  @Test public void honoursUsersEnableJdbcRepositoriesConfiguration(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class,DataSourceAutoConfiguration.class)).withUserConfiguration(EnableRepositoriesConfiguration.class,EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.schema=classpath:data-jdbc-schema.sql","spring.datasource.data=classpath:city.sql").run((context) -> {
      assertThat(context).hasSingleBean(JdbcConfiguration.class);
      assertThat(context).hasSingleBean(CityRepository.class);
      assertThat(context.getBean(CityRepository.class).findById(2000L)).isPresent();
    }
);
  }
@TestAutoConfigurationPackage(City.class) private static class TestConfiguration {
  }
@Configuration @TestAutoConfigurationPackage(EmptyDataPackage.class) protected static class EmptyConfiguration {
  }
@TestAutoConfigurationPackage(EmptyDataPackage.class) @EnableJdbcRepositories(basePackageClasses=City.class) private static class EnableRepositoriesConfiguration {
  }
}
