/** 
 * Integration tests for the Actuator's MVC  {@link ControllerEndpoint controllerendpoints}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class ControllerEndpointWebMvcIntegrationTests {
  private AnnotationConfigWebApplicationContext context;
  @After public void close(){
    TestSecurityContextHolder.clearContext();
    this.context.close();
  }
  @Test public void endpointsAreSecureByDefault() throws Exception {
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(SecureConfiguration.class,ExampleController.class);
    MockMvc mockMvc=createSecureMockMvc();
    mockMvc.perform(get("/actuator/example").accept(MediaType.APPLICATION_JSON)).andExpect(status().isUnauthorized());
  }
  @Test public void endpointsCanBeAccessed() throws Exception {
    TestSecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user","N/A","ROLE_ACTUATOR"));
    this.context=new AnnotationConfigWebApplicationContext();
    this.context.register(SecureConfiguration.class,ExampleController.class);
    TestPropertyValues.of("management.endpoints.web.base-path:/management","management.endpoints.web.exposure.include=*").applyTo(this.context);
    MockMvc mockMvc=createSecureMockMvc();
    mockMvc.perform(get("/management/example")).andExpect(status().isOk());
  }
  private MockMvc createSecureMockMvc(){
    return doCreateMockMvc(springSecurity());
  }
  private MockMvc doCreateMockMvc(  MockMvcConfigurer... configurers){
    this.context.setServletContext(new MockServletContext());
    this.context.refresh();
    DefaultMockMvcBuilder builder=MockMvcBuilders.webAppContextSetup(this.context);
    for (    MockMvcConfigurer configurer : configurers) {
      builder.apply(configurer);
    }
    return builder.build();
  }
@ImportAutoConfiguration({JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,ServletManagementContextAutoConfiguration.class,AuditAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementContextAutoConfiguration.class,DispatcherServletAutoConfiguration.class,BeansEndpointAutoConfiguration.class}) static class DefaultConfiguration {
  }
@Import(DefaultConfiguration.class) @ImportAutoConfiguration({SecurityAutoConfiguration.class}) static class SecureConfiguration {
  }
@RestControllerEndpoint(id="example") static class ExampleController {
    @GetMapping("/") public String example(){
      return "Example";
    }
  }
}
