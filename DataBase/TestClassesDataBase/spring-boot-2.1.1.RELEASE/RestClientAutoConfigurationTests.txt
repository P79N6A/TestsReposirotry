/** 
 * Tests for  {@link RestClientAutoConfiguration}
 * @author Brian Clozel
 */
public class RestClientAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class));
  @Test public void configureShouldCreateBothRestClientVariants(){
    this.contextRunner.run((context) -> assertThat(context).hasSingleBean(RestClient.class).hasSingleBean(RestHighLevelClient.class));
  }
  @Test public void configureWhenCustomClientShouldBackOff(){
    this.contextRunner.withUserConfiguration(CustomRestClientConfiguration.class).run((context) -> assertThat(context).hasSingleBean(RestClient.class).hasBean("customRestClient"));
  }
  @Test public void configureWhenBuilderCustomizerShouldApply(){
    this.contextRunner.withUserConfiguration(BuilderCustomizerConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(RestClient.class);
      RestClient restClient=context.getBean(RestClient.class);
      Field field=ReflectionUtils.findField(RestClient.class,"maxRetryTimeoutMillis");
      ReflectionUtils.makeAccessible(field);
      assertThat(ReflectionUtils.getField(field,restClient)).isEqualTo(42L);
    }
);
  }
  @Test public void restClientCanQueryElasticsearchNode(){
    new ElasticsearchNodeTemplate().doWithNode((node) -> this.contextRunner.withPropertyValues("spring.elasticsearch.rest.uris=http://localhost:" + node.getHttpPort()).run((context) -> {
      RestHighLevelClient client=context.getBean(RestHighLevelClient.class);
      Map<String,String> source=new HashMap<>();
      source.put("a","alpha");
      source.put("b","bravo");
      IndexRequest index=new IndexRequest("foo","bar","1").source(source);
      client.index(index,RequestOptions.DEFAULT);
      GetRequest getRequest=new GetRequest("foo","bar","1");
      assertThat(client.get(getRequest,RequestOptions.DEFAULT).isExists()).isTrue();
    }
));
  }
@Configuration static class CustomRestClientConfiguration {
    @Bean public RestClient customRestClient(){
      return mock(RestClient.class);
    }
  }
@Configuration static class BuilderCustomizerConfiguration {
    @Bean public RestClientBuilderCustomizer myCustomizer(){
      return (builder) -> builder.setMaxRetryTimeoutMillis(42);
    }
  }
}
