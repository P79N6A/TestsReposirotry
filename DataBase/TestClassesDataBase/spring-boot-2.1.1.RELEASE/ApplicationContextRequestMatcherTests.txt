/** 
 * Tests for  {@link ApplicationContextRequestMatcher}.
 * @author Phillip Webb
 */
public class ApplicationContextRequestMatcherTests {
  @Test public void createWhenContextClassIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new TestApplicationContextRequestMatcher<>(null)).withMessageContaining("Context class must not be null");
  }
  @Test public void matchesWhenContextClassIsApplicationContextShouldProvideContext(){
    StaticWebApplicationContext context=createWebApplicationContext();
    assertThat(new TestApplicationContextRequestMatcher<>(ApplicationContext.class).callMatchesAndReturnProvidedContext(context).get()).isEqualTo(context);
  }
  @Test public void matchesWhenContextClassIsExistingBeanShouldProvideBean(){
    StaticWebApplicationContext context=createWebApplicationContext();
    context.registerSingleton("existingBean",ExistingBean.class);
    assertThat(new TestApplicationContextRequestMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(context).get()).isEqualTo(context.getBean(ExistingBean.class));
  }
  @Test public void matchesWhenContextClassIsBeanThatDoesNotExistShouldSupplyException(){
    StaticWebApplicationContext context=createWebApplicationContext();
    Supplier<ExistingBean> supplier=new TestApplicationContextRequestMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(context);
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(supplier::get);
  }
  private StaticWebApplicationContext createWebApplicationContext(){
    StaticWebApplicationContext context=new StaticWebApplicationContext();
    MockServletContext servletContext=new MockServletContext();
    context.setServletContext(servletContext);
    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,context);
    return context;
  }
static class ExistingBean {
  }
static class NewBean {
    private final ExistingBean bean;
    NewBean(    ExistingBean bean){
      this.bean=bean;
    }
    public ExistingBean getBean(){
      return this.bean;
    }
  }
static class TestApplicationContextRequestMatcher<C> extends ApplicationContextRequestMatcher<C> {
    private Supplier<C> providedContext;
    TestApplicationContextRequestMatcher(    Class<? extends C> context){
      super(context);
    }
    public Supplier<C> callMatchesAndReturnProvidedContext(    WebApplicationContext context){
      return callMatchesAndReturnProvidedContext(new MockHttpServletRequest(context.getServletContext()));
    }
    public Supplier<C> callMatchesAndReturnProvidedContext(    HttpServletRequest request){
      matches(request);
      return getProvidedContext();
    }
    @Override protected boolean matches(    HttpServletRequest request,    Supplier<C> context){
      this.providedContext=context;
      return false;
    }
    public Supplier<C> getProvidedContext(){
      return this.providedContext;
    }
  }
}
