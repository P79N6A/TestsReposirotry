/** 
 * Tests for  {@link ReactiveCloudFoundryActuatorAutoConfiguration}.
 * @author Madhura Bhave
 */
public class ReactiveCloudFoundryActuatorAutoConfigurationTests {
  private final ReactiveWebApplicationContextRunner contextRunner=new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(ReactiveSecurityAutoConfiguration.class,ReactiveUserDetailsServiceAutoConfiguration.class,WebFluxAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,WebClientCustomizerConfig.class,WebClientAutoConfiguration.class,ManagementContextAutoConfiguration.class,EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,HealthIndicatorAutoConfiguration.class,HealthEndpointAutoConfiguration.class,ReactiveCloudFoundryActuatorAutoConfiguration.class));
  @After public void close(){
    HttpResources.reset();
  }
  @Test public void cloudFoundryPlatformActive(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      EndpointMapping endpointMapping=(EndpointMapping)ReflectionTestUtils.getField(handlerMapping,"endpointMapping");
      assertThat(endpointMapping.getPath()).isEqualTo("/cloudfoundryapplication");
      CorsConfiguration corsConfiguration=(CorsConfiguration)ReflectionTestUtils.getField(handlerMapping,"corsConfiguration");
      assertThat(corsConfiguration.getAllowedOrigins()).contains("*");
      assertThat(corsConfiguration.getAllowedMethods()).containsAll(Arrays.asList(HttpMethod.GET.name(),HttpMethod.POST.name()));
      assertThat(corsConfiguration.getAllowedHeaders()).containsAll(Arrays.asList("Authorization","X-Cf-App-Instance","Content-Type"));
    }
);
  }
  @Test public void cloudfoundryapplicationProducesActuatorMediaType(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      WebTestClient webTestClient=WebTestClient.bindToApplicationContext(context).build();
      webTestClient.get().uri("/cloudfoundryapplication").header("Content-Type",ActuatorMediaType.V2_JSON + ";charset=UTF-8");
    }
);
  }
  @Test public void cloudFoundryPlatformActiveSetsApplicationId(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      String applicationId=(String)ReflectionTestUtils.getField(interceptor,"applicationId");
      assertThat(applicationId).isEqualTo("my-app-id");
    }
);
  }
  @Test public void cloudFoundryPlatformActiveSetsCloudControllerUrl(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(interceptor,"cloudFoundrySecurityService");
      String cloudControllerUrl=(String)ReflectionTestUtils.getField(interceptorSecurityService,"cloudControllerUrl");
      assertThat(cloudControllerUrl).isEqualTo("http://my-cloud-controller.com");
    }
);
  }
  @Test public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=context.getBean("cloudFoundryWebFluxEndpointHandlerMapping",CloudFoundryWebFluxEndpointHandlerMapping.class);
      Object securityInterceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(securityInterceptor,"cloudFoundrySecurityService");
      assertThat(interceptorSecurityService).isNull();
    }
);
  }
  @Test @SuppressWarnings("unchecked") public void cloudFoundryPathsIgnoredBySpringSecurity(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      WebFilterChainProxy chainProxy=context.getBean(WebFilterChainProxy.class);
      List<SecurityWebFilterChain> filters=(List<SecurityWebFilterChain>)ReflectionTestUtils.getField(chainProxy,"filters");
      Boolean cfRequestMatches=filters.get(0).matches(MockServerWebExchange.from(MockServerHttpRequest.get("/cloudfoundryapplication/my-path").build())).block();
      Boolean otherRequestMatches=filters.get(0).matches(MockServerWebExchange.from(MockServerHttpRequest.get("/some-other-path").build())).block();
      assertThat(cfRequestMatches).isTrue();
      assertThat(otherRequestMatches).isFalse();
      otherRequestMatches=filters.get(1).matches(MockServerWebExchange.from(MockServerHttpRequest.get("/some-other-path").build())).block();
      assertThat(otherRequestMatches).isTrue();
    }
);
  }
  @Test public void cloudFoundryPlatformInactive(){
    this.contextRunner.run((context) -> assertThat(context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")).isFalse());
  }
  @Test public void cloudFoundryManagementEndpointsDisabled(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION=---","management.cloudfoundry.enabled:false").run((context) -> assertThat(context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")).isFalse());
  }
  @Test public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Collection<ExposableWebEndpoint> endpoints=handlerMapping.getEndpoints();
      List<EndpointId> endpointIds=endpoints.stream().map(ExposableEndpoint::getEndpointId).collect(Collectors.toList());
      assertThat(endpointIds).contains(EndpointId.of("test"));
    }
);
  }
  @Test public void endpointPathCustomizationIsNotApplied(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Collection<ExposableWebEndpoint> endpoints=handlerMapping.getEndpoints();
      ExposableWebEndpoint endpoint=endpoints.stream().filter((candidate) -> EndpointId.of("test").equals(candidate.getEndpointId())).findFirst().get();
      assertThat(endpoint.getOperations()).hasSize(1);
      WebOperation operation=endpoint.getOperations().iterator().next();
      assertThat(operation.getRequestPredicate().getPath()).isEqualTo("test");
    }
);
  }
  @Test public void healthEndpointInvokerShouldBeCloudFoundryWebExtension(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      Collection<ExposableWebEndpoint> endpoints=getHandlerMapping(context).getEndpoints();
      ExposableWebEndpoint endpoint=endpoints.iterator().next();
      assertThat(endpoint.getOperations()).hasSize(3);
      WebOperation webOperation=findOperationWithRequestPath(endpoint,"health");
      Object invoker=ReflectionTestUtils.getField(webOperation,"invoker");
      assertThat(ReflectionTestUtils.getField(invoker,"target")).isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);
    }
);
  }
  @Test public void skipSslValidation(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com","management.cloudfoundry.skip-ssl-validation:true").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(interceptor,"cloudFoundrySecurityService");
      WebClient webClient=(WebClient)ReflectionTestUtils.getField(interceptorSecurityService,"webClient");
      webClient.get().uri("https://self-signed.badssl.com/").exchange().block();
    }
);
  }
  @Test public void sslValidationNotSkippedByDefault(){
    this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebFluxEndpointHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(interceptor,"cloudFoundrySecurityService");
      WebClient webClient=(WebClient)ReflectionTestUtils.getField(interceptorSecurityService,"webClient");
      assertThatExceptionOfType(RuntimeException.class).isThrownBy(webClient.get().uri("https://self-signed.badssl.com/").exchange()::block).withCauseInstanceOf(SSLException.class);
    }
);
  }
  private CloudFoundryWebFluxEndpointHandlerMapping getHandlerMapping(  ApplicationContext context){
    return context.getBean("cloudFoundryWebFluxEndpointHandlerMapping",CloudFoundryWebFluxEndpointHandlerMapping.class);
  }
  private WebOperation findOperationWithRequestPath(  ExposableWebEndpoint endpoint,  String requestPath){
    for (    WebOperation operation : endpoint.getOperations()) {
      if (operation.getRequestPredicate().getPath().equals(requestPath)) {
        return operation;
      }
    }
    throw new IllegalStateException("No operation found with request path " + requestPath + " from "+ endpoint.getOperations());
  }
@Configuration static class TestConfiguration {
    @Bean public TestEndpoint testEndpoint(){
      return new TestEndpoint();
    }
  }
@Endpoint(id="test") static class TestEndpoint {
    @ReadOperation public String hello(){
      return "hello world";
    }
  }
@Configuration static class WebClientCustomizerConfig {
    @Bean public WebClientCustomizer webClientCustomizer(){
      return mock(WebClientCustomizer.class);
    }
  }
}
