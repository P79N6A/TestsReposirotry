/** 
 * Tests for  {@link WebClientMetricsConfiguration}
 * @author Brian Clozel
 * @author Stephane Nicoll
 */
public class WebClientMetricsConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(WebClientAutoConfiguration.class,HttpClientMetricsAutoConfiguration.class));
  @Rule public OutputCapture out=new OutputCapture();
  @Test public void webClientCreatedWithBuilderIsInstrumented(){
    this.contextRunner.run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      WebClient.Builder builder=context.getBean(WebClient.Builder.class);
      validateWebClient(builder,registry);
    }
);
  }
  @Test public void shouldNotOverrideCustomTagsProvider(){
    this.contextRunner.withUserConfiguration(CustomTagsProviderConfig.class).run((context) -> assertThat(context).getBeans(WebClientExchangeTagsProvider.class).hasSize(1).containsKey("customTagsProvider"));
  }
  @Test public void afterMaxUrisReachedFurtherUrisAreDenied(){
    this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=2").run((context) -> {
      MeterRegistry registry=getInitializedMeterRegistry(context);
      assertThat(registry.get("http.client.requests").meters()).hasSize(2);
      assertThat(this.out.toString()).contains("Reached the maximum number of URI tags for 'http.client.requests'.");
      assertThat(this.out.toString()).contains("Are you using 'uriVariables'?");
    }
);
  }
  @Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached(){
    this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=5").run((context) -> {
      MeterRegistry registry=getInitializedMeterRegistry(context);
      assertThat(registry.get("http.client.requests").meters()).hasSize(3);
      assertThat(this.out.toString()).doesNotContain("Reached the maximum number of URI tags for 'http.client.requests'.");
      assertThat(this.out.toString()).doesNotContain("Are you using 'uriVariables'?");
    }
);
  }
  private MeterRegistry getInitializedMeterRegistry(  AssertableApplicationContext context){
    WebClient webClient=mockWebClient(context.getBean(WebClient.Builder.class));
    MeterRegistry registry=context.getBean(MeterRegistry.class);
    for (int i=0; i < 3; i++) {
      webClient.get().uri("http://example.org/projects/" + i).exchange().block();
    }
    return registry;
  }
  private void validateWebClient(  WebClient.Builder builder,  MeterRegistry registry){
    WebClient webClient=mockWebClient(builder);
    assertThat(registry.find("http.client.requests").meter()).isNull();
    webClient.get().uri("http://example.org/projects/{project}","spring-boot").exchange().block();
    assertThat(registry.find("http.client.requests").tags("uri","/projects/{project}").meter()).isNotNull();
  }
  private WebClient mockWebClient(  WebClient.Builder builder){
    ClientHttpConnector connector=mock(ClientHttpConnector.class);
    given(connector.connect(any(),any(),any())).willReturn(Mono.just(new MockClientHttpResponse(HttpStatus.OK)));
    return builder.clientConnector(connector).build();
  }
@Configuration static class CustomTagsProviderConfig {
    @Bean public WebClientExchangeTagsProvider customTagsProvider(){
      return mock(WebClientExchangeTagsProvider.class);
    }
  }
}
