/** 
 * Tests for  {@link BasicJsonTester}.
 * @author Phillip Webb
 */
public class BasicJsonTesterTests {
  private static final String JSON="{\"spring\":[\"boot\",\"framework\"]}";
  @Rule public TemporaryFolder tempFolder=new TemporaryFolder();
  private BasicJsonTester json=new BasicJsonTester(getClass());
  @Test public void createWhenResourceLoadClassIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new BasicJsonTester(null)).withMessageContaining("ResourceLoadClass must not be null");
  }
  @Test public void fromJsonStringShouldReturnJsonContent(){
    assertThat(this.json.from(JSON)).isEqualToJson("source.json");
  }
  @Test public void fromResourceStringShouldReturnJsonContent(){
    assertThat(this.json.from("source.json")).isEqualToJson(JSON);
  }
  @Test public void fromResourceStringWithClassShouldReturnJsonContent(){
    assertThat(this.json.from("source.json",getClass())).isEqualToJson(JSON);
  }
  @Test public void fromByteArrayShouldReturnJsonContent(){
    assertThat(this.json.from(JSON.getBytes())).isEqualToJson("source.json");
  }
  @Test public void fromFileShouldReturnJsonContent() throws Exception {
    File file=this.tempFolder.newFile("file.json");
    FileCopyUtils.copy(JSON.getBytes(),file);
    assertThat(this.json.from(file)).isEqualToJson("source.json");
  }
  @Test public void fromInputStreamShouldReturnJsonContent(){
    InputStream inputStream=new ByteArrayInputStream(JSON.getBytes());
    assertThat(this.json.from(inputStream)).isEqualToJson("source.json");
  }
  @Test public void fromResourceShouldReturnJsonContent(){
    Resource resource=new ByteArrayResource(JSON.getBytes());
    assertThat(this.json.from(resource)).isEqualToJson("source.json");
  }
}
