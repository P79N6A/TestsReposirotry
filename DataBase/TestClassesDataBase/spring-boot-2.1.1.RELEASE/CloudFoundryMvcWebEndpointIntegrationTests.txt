/** 
 * Integration tests for web endpoints exposed using Spring MVC on CloudFoundry.
 * @author Madhura Bhave
 */
public class CloudFoundryMvcWebEndpointIntegrationTests {
  private static TokenValidator tokenValidator=mock(TokenValidator.class);
  private static CloudFoundrySecurityService securityService=mock(CloudFoundrySecurityService.class);
  @Test public void operationWithSecurityInterceptorForbidden(){
    given(securityService.getAccessLevel(any(),eq("app-id"))).willReturn(AccessLevel.RESTRICTED);
    load(TestEndpointConfiguration.class,(client) -> client.get().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Authorization","bearer " + mockAccessToken()).exchange().expectStatus().isEqualTo(HttpStatus.FORBIDDEN));
  }
  @Test public void operationWithSecurityInterceptorSuccess(){
    given(securityService.getAccessLevel(any(),eq("app-id"))).willReturn(AccessLevel.FULL);
    load(TestEndpointConfiguration.class,(client) -> client.get().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Authorization","bearer " + mockAccessToken()).exchange().expectStatus().isEqualTo(HttpStatus.OK));
  }
  @Test public void responseToOptionsRequestIncludesCorsHeaders(){
    load(TestEndpointConfiguration.class,(client) -> client.options().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Access-Control-Request-Method","POST").header("Origin","http://example.com").exchange().expectStatus().isOk().expectHeader().valueEquals("Access-Control-Allow-Origin","http://example.com").expectHeader().valueEquals("Access-Control-Allow-Methods","GET,POST"));
  }
  @Test public void linksToOtherEndpointsWithFullAccess(){
    given(securityService.getAccessLevel(any(),eq("app-id"))).willReturn(AccessLevel.FULL);
    load(TestEndpointConfiguration.class,(client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization","bearer " + mockAccessToken()).exchange().expectStatus().isOk().expectBody().jsonPath("_links.length()").isEqualTo(5).jsonPath("_links.self.href").isNotEmpty().jsonPath("_links.self.templated").isEqualTo(false).jsonPath("_links.info.href").isNotEmpty().jsonPath("_links.info.templated").isEqualTo(false).jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated").isEqualTo(false).jsonPath("_links.test.href").isNotEmpty().jsonPath("_links.test.templated").isEqualTo(false).jsonPath("_links.test-part.href").isNotEmpty().jsonPath("_links.test-part.templated").isEqualTo(true));
  }
  @Test public void linksToOtherEndpointsForbidden(){
    CloudFoundryAuthorizationException exception=new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,"invalid-token");
    willThrow(exception).given(tokenValidator).validate(any());
    load(TestEndpointConfiguration.class,(client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization","bearer " + mockAccessToken()).exchange().expectStatus().isUnauthorized());
  }
  @Test public void linksToOtherEndpointsWithRestrictedAccess(){
    given(securityService.getAccessLevel(any(),eq("app-id"))).willReturn(AccessLevel.RESTRICTED);
    load(TestEndpointConfiguration.class,(client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization","bearer " + mockAccessToken()).exchange().expectStatus().isOk().expectBody().jsonPath("_links.length()").isEqualTo(2).jsonPath("_links.self.href").isNotEmpty().jsonPath("_links.self.templated").isEqualTo(false).jsonPath("_links.info.href").isNotEmpty().jsonPath("_links.info.templated").isEqualTo(false).jsonPath("_links.env").doesNotExist().jsonPath("_links.test").doesNotExist().jsonPath("_links.test-part").doesNotExist());
  }
  private AnnotationConfigServletWebServerApplicationContext createApplicationContext(  Class<?>... config){
    return new AnnotationConfigServletWebServerApplicationContext(config);
  }
  private int getPort(  AnnotationConfigServletWebServerApplicationContext context){
    return context.getWebServer().getPort();
  }
  private void load(  Class<?> configuration,  Consumer<WebTestClient> clientConsumer){
    BiConsumer<ApplicationContext,WebTestClient> consumer=(context,client) -> clientConsumer.accept(client);
    AnnotationConfigServletWebServerApplicationContext context=createApplicationContext(configuration,CloudFoundryMvcConfiguration.class);
    try {
      consumer.accept(context,WebTestClient.bindToServer().baseUrl("http://localhost:" + getPort(context)).build());
    }
  finally {
      context.close();
    }
  }
  private String mockAccessToken(){
    return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwu" + "Y29tIiwiZXhwIjoxNDI2NDIwODAwLCJhd2Vzb21lIjp0cnVlfQ." + Base64Utils.encodeToString("signature".getBytes());
  }
@Configuration @EnableWebMvc static class CloudFoundryMvcConfiguration {
    @Bean public CloudFoundrySecurityInterceptor interceptor(){
      return new CloudFoundrySecurityInterceptor(tokenValidator,securityService,"app-id");
    }
    @Bean public EndpointMediaTypes EndpointMediaTypes(){
      return new EndpointMediaTypes(Collections.singletonList("application/json"),Collections.singletonList("application/json"));
    }
    @Bean public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(    WebEndpointDiscoverer webEndpointDiscoverer,    EndpointMediaTypes endpointMediaTypes,    CloudFoundrySecurityInterceptor interceptor){
      CorsConfiguration corsConfiguration=new CorsConfiguration();
      corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com"));
      corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST"));
      return new CloudFoundryWebEndpointServletHandlerMapping(new EndpointMapping("/cfApplication"),webEndpointDiscoverer.getEndpoints(),endpointMediaTypes,corsConfiguration,interceptor,new EndpointLinksResolver(webEndpointDiscoverer.getEndpoints()));
    }
    @Bean public WebEndpointDiscoverer webEndpointDiscoverer(    ApplicationContext applicationContext,    EndpointMediaTypes endpointMediaTypes){
      ParameterValueMapper parameterMapper=new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance());
      return new WebEndpointDiscoverer(applicationContext,parameterMapper,endpointMediaTypes,null,Collections.emptyList(),Collections.emptyList());
    }
    @Bean public EndpointDelegate endpointDelegate(){
      return mock(EndpointDelegate.class);
    }
    @Bean public TomcatServletWebServerFactory tomcat(){
      return new TomcatServletWebServerFactory(0);
    }
    @Bean public DispatcherServlet dispatcherServlet(){
      return new DispatcherServlet();
    }
  }
@Endpoint(id="test") static class TestEndpoint {
    private final EndpointDelegate endpointDelegate;
    TestEndpoint(    EndpointDelegate endpointDelegate){
      this.endpointDelegate=endpointDelegate;
    }
    @ReadOperation public Map<String,Object> readAll(){
      return Collections.singletonMap("All",true);
    }
    @ReadOperation public Map<String,Object> readPart(    @Selector String part){
      return Collections.singletonMap("part",part);
    }
    @WriteOperation public void write(    String foo,    String bar){
      this.endpointDelegate.write(foo,bar);
    }
  }
@Endpoint(id="env") static class TestEnvEndpoint {
    @ReadOperation public Map<String,Object> readAll(){
      return Collections.singletonMap("All",true);
    }
  }
@Endpoint(id="info") static class TestInfoEndpoint {
    @ReadOperation public Map<String,Object> readAll(){
      return Collections.singletonMap("All",true);
    }
  }
@Configuration @Import(CloudFoundryMvcConfiguration.class) protected static class TestEndpointConfiguration {
    @Bean public TestEndpoint testEndpoint(    EndpointDelegate endpointDelegate){
      return new TestEndpoint(endpointDelegate);
    }
    @Bean public TestInfoEndpoint testInfoEnvEndpoint(){
      return new TestInfoEndpoint();
    }
    @Bean public TestEnvEndpoint testEnvEndpoint(){
      return new TestEnvEndpoint();
    }
  }
public interface EndpointDelegate {
    void write();
    void write(    String foo,    String bar);
  }
}
