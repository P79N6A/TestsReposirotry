/** 
 * Tests for  {@link HttpHeaderInterceptor}.
 * @author Rob Winch
 * @since 1.3.0
 */
public class HttpHeaderInterceptorTests {
  private String name;
  private String value;
  private HttpHeaderInterceptor interceptor;
  private HttpRequest request;
  private byte[] body;
  @Mock private ClientHttpRequestExecution execution;
  @Mock private ClientHttpResponse response;
  private MockHttpServletRequest httpRequest;
  @Before public void setup() throws Exception {
    MockitoAnnotations.initMocks(this);
    this.body=new byte[]{};
    this.httpRequest=new MockHttpServletRequest();
    this.request=new ServletServerHttpRequest(this.httpRequest);
    this.name="X-AUTH-TOKEN";
    this.value="secret";
    given(this.execution.execute(this.request,this.body)).willReturn(this.response);
    this.interceptor=new HttpHeaderInterceptor(this.name,this.value);
  }
  @Test public void constructorNullHeaderName(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(null,this.value)).withMessageContaining("Name must not be empty");
  }
  @Test public void constructorEmptyHeaderName(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor("",this.value)).withMessageContaining("Name must not be empty");
  }
  @Test public void constructorNullHeaderValue(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(this.name,null)).withMessageContaining("Value must not be empty");
  }
  @Test public void constructorEmptyHeaderValue(){
    assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(this.name,"")).withMessageContaining("Value must not be empty");
  }
  @Test public void intercept() throws IOException {
    ClientHttpResponse result=this.interceptor.intercept(this.request,this.body,this.execution);
    assertThat(this.request.getHeaders().getFirst(this.name)).isEqualTo(this.value);
    assertThat(result).isEqualTo(this.response);
  }
}
