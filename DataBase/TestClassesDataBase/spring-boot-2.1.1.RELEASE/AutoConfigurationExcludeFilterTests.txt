/** 
 * Tests for  {@link AutoConfigurationExcludeFilter}.
 * @author Stephane Nicoll
 */
public class AutoConfigurationExcludeFilterTests {
  private static final Class<?> FILTERED=ExampleFilteredAutoConfiguration.class;
  private AnnotationConfigApplicationContext context;
  @After public void cleanUp(){
    if (this.context != null) {
      this.context.close();
    }
  }
  @Test public void filterExcludeAutoConfiguration(){
    this.context=new AnnotationConfigApplicationContext(Config.class);
    assertThat(this.context.getBeansOfType(String.class)).hasSize(1);
    assertThat(this.context.getBean(String.class)).isEqualTo("test");
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(FILTERED));
  }
@Configuration @ComponentScan(basePackageClasses=ExampleConfiguration.class,excludeFilters=@ComponentScan.Filter(type=FilterType.CUSTOM,classes=TestAutoConfigurationExcludeFilter.class)) static class Config {
  }
static class TestAutoConfigurationExcludeFilter extends AutoConfigurationExcludeFilter {
    @Override protected List<String> getAutoConfigurations(){
      return Collections.singletonList(FILTERED.getName());
    }
  }
}
