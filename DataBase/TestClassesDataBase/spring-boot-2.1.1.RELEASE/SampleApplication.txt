@Component @EnableScheduling public static class SampleApplication {
  private int count=0;
  private static volatile boolean quit=false;
  @Scheduled(fixedDelay=200) public void tickBean(){
    System.out.println("Tick " + this.count++ + " "+ Thread.currentThread());
  }
  @Scheduled(initialDelay=500,fixedDelay=500) public void restart(){
    System.out.println("Restart " + Thread.currentThread());
    if (!SampleApplication.quit) {
      Restarter.getInstance().restart();
    }
  }
  public static void main(  String... args){
    Restarter.initialize(args,false,new MockRestartInitializer(),true);
    AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(SampleApplication.class);
    context.addApplicationListener(new CloseCountingApplicationListener());
    Restarter.getInstance().prepare(context);
    System.out.println("Sleep " + Thread.currentThread());
    sleep();
    quit=true;
  }
  private static void sleep(){
    try {
      Thread.sleep(1200);
    }
 catch (    InterruptedException ex) {
    }
  }
}
