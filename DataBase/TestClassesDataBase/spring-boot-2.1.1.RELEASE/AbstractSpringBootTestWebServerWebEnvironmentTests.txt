/** 
 * Base class for  {@link SpringBootTest} tests configured to start an embedded web server.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public abstract class AbstractSpringBootTestWebServerWebEnvironmentTests {
  @LocalServerPort private int port=0;
  @Value("${value}") private int value=0;
  @Autowired private WebApplicationContext context;
  @Autowired private ServletContext servletContext;
  @Autowired private TestRestTemplate restTemplate;
  public WebApplicationContext getContext(){
    return this.context;
  }
  public TestRestTemplate getRestTemplate(){
    return this.restTemplate;
  }
  @Test public void runAndTestHttpEndpoint(){
    assertThat(this.port).isNotEqualTo(8080).isNotEqualTo(0);
    String body=new RestTemplate().getForObject("http://localhost:" + this.port + "/",String.class);
    assertThat(body).isEqualTo("Hello World");
  }
  @Test public void injectTestRestTemplate(){
    String body=this.restTemplate.getForObject("/",String.class);
    assertThat(body).isEqualTo("Hello World");
  }
  @Test public void annotationAttributesOverridePropertiesFile(){
    assertThat(this.value).isEqualTo(123);
  }
  @Test public void validateWebApplicationContextIsSet(){
    assertThat(this.context).isSameAs(WebApplicationContextUtils.getWebApplicationContext(this.servletContext));
  }
protected abstract static class AbstractConfig {
    @Value("${server.port:8080}") private int port=8080;
    @Bean public DispatcherServlet dispatcherServlet(){
      return new DispatcherServlet();
    }
    @Bean public ServletWebServerFactory webServerFactory(){
      TomcatServletWebServerFactory factory=new TomcatServletWebServerFactory();
      factory.setPort(this.port);
      return factory;
    }
    @Bean public static PropertySourcesPlaceholderConfigurer propertyPlaceholder(){
      return new PropertySourcesPlaceholderConfigurer();
    }
    @RequestMapping("/") public String home(){
      return "Hello World";
    }
  }
}
