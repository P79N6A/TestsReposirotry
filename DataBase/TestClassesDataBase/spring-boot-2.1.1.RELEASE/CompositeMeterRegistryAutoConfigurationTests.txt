/** 
 * Tests for  {@link CompositeMeterRegistryAutoConfiguration}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
public class CompositeMeterRegistryAutoConfigurationTests {
  private static final String COMPOSITE_NAME="compositeMeterRegistry";
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(BaseConfig.class).withConfiguration(AutoConfigurations.of(CompositeMeterRegistryAutoConfiguration.class));
  @Test public void registerWhenHasNoMeterRegistryShouldRegisterEmptyNoOpComposite(){
    this.contextRunner.withUserConfiguration(NoMeterRegistryConfig.class).run((context) -> {
      assertThat(context).hasSingleBean(MeterRegistry.class);
      CompositeMeterRegistry registry=context.getBean("noOpMeterRegistry",CompositeMeterRegistry.class);
      assertThat(registry.getRegistries()).isEmpty();
    }
);
  }
  @Test public void registerWhenHasSingleMeterRegistryShouldDoNothing(){
    this.contextRunner.withUserConfiguration(SingleMeterRegistryConfig.class).run((context) -> {
      assertThat(context).hasSingleBean(MeterRegistry.class);
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      assertThat(registry).isInstanceOf(TestMeterRegistry.class);
    }
);
  }
  @Test public void registerWhenHasMultipleMeterRegistriesShouldAddPrimaryComposite(){
    this.contextRunner.withUserConfiguration(MultipleMeterRegistriesConfig.class).run((context) -> {
      assertThat(context.getBeansOfType(MeterRegistry.class)).hasSize(3).containsKeys("meterRegistryOne","meterRegistryTwo",COMPOSITE_NAME);
      MeterRegistry primary=context.getBean(MeterRegistry.class);
      assertThat(primary).isInstanceOf(CompositeMeterRegistry.class);
      assertThat(((CompositeMeterRegistry)primary).getRegistries()).hasSize(2);
      assertThat(primary.config().clock()).isNotNull();
    }
);
  }
  @Test public void registerWhenHasMultipleRegistriesAndOneIsPrimaryShouldDoNothing(){
    this.contextRunner.withUserConfiguration(MultipleMeterRegistriesWithOnePrimaryConfig.class).run((context) -> {
      assertThat(context.getBeansOfType(MeterRegistry.class)).hasSize(2).containsKeys("meterRegistryOne","meterRegistryTwo");
      MeterRegistry primary=context.getBean(MeterRegistry.class);
      assertThat(primary).isInstanceOf(TestMeterRegistry.class);
    }
);
  }
@Configuration static class BaseConfig {
    @Bean @ConditionalOnMissingBean public Clock micrometerClock(){
      return Clock.SYSTEM;
    }
  }
@Configuration static class NoMeterRegistryConfig {
  }
@Configuration static class SingleMeterRegistryConfig {
    @Bean public MeterRegistry meterRegistry(){
      return new TestMeterRegistry();
    }
  }
@Configuration static class MultipleMeterRegistriesConfig {
    @Bean public MeterRegistry meterRegistryOne(){
      return new TestMeterRegistry();
    }
    @Bean public MeterRegistry meterRegistryTwo(){
      return new SimpleMeterRegistry();
    }
  }
@Configuration static class MultipleMeterRegistriesWithOnePrimaryConfig {
    @Bean @Primary public MeterRegistry meterRegistryOne(){
      return new TestMeterRegistry();
    }
    @Bean public MeterRegistry meterRegistryTwo(){
      return new SimpleMeterRegistry();
    }
  }
static class TestMeterRegistry extends SimpleMeterRegistry {
  }
}
