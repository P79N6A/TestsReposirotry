/** 
 * Tests for  {@link GraphiteMetricsExportAutoConfiguration}.
 * @author Andy Wilkinson
 * @author Stephane Nicoll
 */
public class GraphiteMetricsExportAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(GraphiteMetricsExportAutoConfiguration.class));
  @Test public void backsOffWithoutAClock(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(GraphiteMeterRegistry.class));
  }
  @Test public void autoConfiguresUseTagsAsPrefix(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.graphite.tags-as-prefix=app").run((context) -> {
      assertThat(context).hasSingleBean(GraphiteMeterRegistry.class);
      GraphiteMeterRegistry registry=context.getBean(GraphiteMeterRegistry.class);
      registry.counter("test.count",Tags.of("app","myapp"));
      assertThat(registry.getDropwizardRegistry().getMeters()).containsOnlyKeys("myapp.testCount");
    }
);
  }
  @Test public void autoConfiguresItsConfigAndMeterRegistry(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasSingleBean(GraphiteConfig.class));
  }
  @Test public void autoConfigurationCanBeDisabled(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.graphite.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(GraphiteMeterRegistry.class).doesNotHaveBean(GraphiteConfig.class));
  }
  @Test public void allowsCustomConfigToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasSingleBean(GraphiteConfig.class).hasBean("customConfig"));
  }
  @Test public void allowsCustomRegistryToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasBean("customRegistry").hasSingleBean(GraphiteConfig.class));
  }
  @Test public void stopsMeterRegistryWhenContextIsClosed(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {
      GraphiteMeterRegistry registry=context.getBean(GraphiteMeterRegistry.class);
      assertThat(registry.isClosed()).isFalse();
      context.close();
      assertThat(registry.isClosed()).isTrue();
    }
);
  }
@Configuration static class BaseConfiguration {
    @Bean public Clock clock(){
      return Clock.SYSTEM;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomConfigConfiguration {
    @Bean public GraphiteConfig customConfig(){
      return new GraphiteConfig(){
        @Override public String get(        String k){
          if ("Graphite.apiKey".equals(k)) {
            return "12345";
          }
          return null;
        }
      }
;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomRegistryConfiguration {
    @Bean public GraphiteMeterRegistry customRegistry(    GraphiteConfig config,    Clock clock){
      return new GraphiteMeterRegistry(config,clock);
    }
  }
}
