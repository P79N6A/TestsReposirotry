/** 
 * Tests for  {@link SimpleMetricsExportAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class SimpleMetricsExportAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(SimpleMetricsExportAutoConfiguration.class));
  @Test public void autoConfiguresConfigAndMeterRegistry(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(SimpleMeterRegistry.class).hasSingleBean(Clock.class).hasSingleBean(SimpleConfig.class));
  }
  @Test public void backsOffWhenSpecificallyDisabled(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.simple.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(SimpleMeterRegistry.class).doesNotHaveBean(SimpleConfig.class));
  }
  @Test public void allowsConfigToBeCustomized(){
    this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(SimpleConfig.class).hasBean("customConfig"));
  }
  @Test public void backsOffEntirelyWithCustomMeterRegistry(){
    this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(MeterRegistry.class).hasBean("customRegistry").doesNotHaveBean(SimpleConfig.class));
  }
@Configuration static class BaseConfiguration {
    @Bean public Clock clock(){
      return Clock.SYSTEM;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomConfigConfiguration {
    @Bean public SimpleConfig customConfig(){
      return new SimpleConfig(){
        @Override public String get(        String k){
          return null;
        }
      }
;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomRegistryConfiguration {
    @Bean public MeterRegistry customRegistry(){
      return mock(MeterRegistry.class);
    }
  }
}
