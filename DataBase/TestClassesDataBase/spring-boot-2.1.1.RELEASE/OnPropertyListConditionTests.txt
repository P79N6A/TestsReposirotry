/** 
 * Tests for  {@link OnPropertyListCondition}.
 * @author Stephane Nicoll
 */
public class OnPropertyListConditionTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withUserConfiguration(TestConfig.class);
  @Test public void propertyNotDefined(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean("foo"));
  }
  @Test public void propertyDefinedAsCommaSeparated(){
    this.contextRunner.withPropertyValues("spring.test.my-list=value1").run((context) -> assertThat(context).hasBean("foo"));
  }
  @Test public void propertyDefinedAsList(){
    this.contextRunner.withPropertyValues("spring.test.my-list[0]=value1").run((context) -> assertThat(context).hasBean("foo"));
  }
  @Test public void propertyDefinedAsCommaSeparatedRelaxed(){
    this.contextRunner.withPropertyValues("spring.test.myList=value1").run((context) -> assertThat(context).hasBean("foo"));
  }
  @Test public void propertyDefinedAsListRelaxed(){
    this.contextRunner.withPropertyValues("spring.test.myList[0]=value1").run((context) -> assertThat(context).hasBean("foo"));
  }
@Configuration @Conditional(TestPropertyListCondition.class) protected static class TestConfig {
    @Bean public String foo(){
      return "foo";
    }
  }
static class TestPropertyListCondition extends OnPropertyListCondition {
    TestPropertyListCondition(){
      super("spring.test.my-list",() -> ConditionMessage.forCondition("test"));
    }
  }
}
