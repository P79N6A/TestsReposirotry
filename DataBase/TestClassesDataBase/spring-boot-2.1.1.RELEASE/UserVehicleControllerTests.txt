/** 
 * {@code @WebMvcTest} based tests for {@link UserVehicleController}.
 * @author Phillip Webb
 */
@RunWith(SpringRunner.class) @WebMvcTest(UserVehicleController.class) public class UserVehicleControllerTests {
  private static final VehicleIdentificationNumber VIN=new VehicleIdentificationNumber("00000000000000000");
  @Autowired private MockMvc mvc;
  @Autowired private ApplicationContext applicationContext;
  @MockBean private UserVehicleService userVehicleService;
  @Test public void getVehicleWhenRequestingTextShouldReturnMakeAndModel() throws Exception {
    given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda","Civic"));
    this.mvc.perform(get("/sboot/vehicle").accept(MediaType.TEXT_PLAIN)).andExpect(status().isOk()).andExpect(content().string("Honda Civic"));
  }
  @Test public void getVehicleWhenRequestingJsonShouldReturnMakeAndModel() throws Exception {
    given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda","Civic"));
    this.mvc.perform(get("/sboot/vehicle").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(content().json("{'make':'Honda','model':'Civic'}"));
  }
  @Test public void getVehicleWhenRequestingHtmlShouldReturnMakeAndModel() throws Exception {
    given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda","Civic"));
    this.mvc.perform(get("/sboot/vehicle.html").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(content().string(containsString("<h1>Honda Civic</h1>")));
  }
  @Test public void getVehicleWhenUserNotFoundShouldReturnNotFound() throws Exception {
    given(this.userVehicleService.getVehicleDetails("sboot")).willThrow(new UserNameNotFoundException("sboot"));
    this.mvc.perform(get("/sboot/vehicle")).andExpect(status().isNotFound());
  }
  @Test public void getVehicleWhenVinNotFoundShouldReturnNotFound() throws Exception {
    given(this.userVehicleService.getVehicleDetails("sboot")).willThrow(new VehicleIdentificationNumberNotFoundException(VIN));
    this.mvc.perform(get("/sboot/vehicle")).andExpect(status().isNotFound());
  }
  @Test(expected=NoSuchBeanDefinitionException.class) public void welcomeCommandLineRunnerShouldBeAvailable(){
    this.applicationContext.getBean(WelcomeCommandLineRunner.class);
  }
}
