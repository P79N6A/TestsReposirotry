/** 
 * Tests for  {@link LiquibaseEndpointAutoConfiguration}.
 * @author Phillip Webb
 */
public class LiquibaseEndpointAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(LiquibaseEndpointAutoConfiguration.class));
  @Test public void runShouldHaveEndpointBean(){
    this.contextRunner.withUserConfiguration(LiquibaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(LiquibaseEndpoint.class));
  }
  @Test public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(){
    this.contextRunner.withUserConfiguration(LiquibaseConfiguration.class).withPropertyValues("management.endpoint.liquibase.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(LiquibaseEndpoint.class));
  }
  @Test public void disablesCloseOfDataSourceWhenEndpointIsEnabled(){
    this.contextRunner.withUserConfiguration(DataSourceClosingLiquibaseConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(LiquibaseEndpoint.class);
      assertThat(context.getBean(DataSourceClosingSpringLiquibase.class)).hasFieldOrPropertyWithValue("closeDataSourceOnceMigrated",false);
    }
);
  }
  @Test public void doesNotDisableCloseOfDataSourceWhenEndpointIsDisabled(){
    this.contextRunner.withUserConfiguration(DataSourceClosingLiquibaseConfiguration.class).withPropertyValues("management.endpoint.liquibase.enabled:false").run((context) -> {
      assertThat(context).doesNotHaveBean(LiquibaseEndpoint.class);
      DataSourceClosingSpringLiquibase bean=context.getBean(DataSourceClosingSpringLiquibase.class);
      assertThat(bean).hasFieldOrPropertyWithValue("closeDataSourceOnceMigrated",true);
    }
);
  }
@Configuration static class LiquibaseConfiguration {
    @Bean public SpringLiquibase liquibase(){
      return mock(SpringLiquibase.class);
    }
  }
@Configuration static class DataSourceClosingLiquibaseConfiguration {
    @Bean public SpringLiquibase liquibase(){
      return new DataSourceClosingSpringLiquibase(){
        private boolean propertiesSet=false;
        @Override public void setCloseDataSourceOnceMigrated(        boolean closeDataSourceOnceMigrated){
          if (this.propertiesSet) {
            throw new IllegalStateException("setCloseDataSourceOnceMigrated " + "invoked after afterPropertiesSet");
          }
          super.setCloseDataSourceOnceMigrated(closeDataSourceOnceMigrated);
        }
        @Override public void afterPropertiesSet() throws LiquibaseException {
          this.propertiesSet=true;
        }
      }
;
    }
  }
}
