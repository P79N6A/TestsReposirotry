/** 
 * Tests for  {@link SecurityRequestMatcherProviderAutoConfiguration}.
 * @author Madhura Bhave
 */
public class SecurityRequestMatcherProviderAutoConfigurationTests {
  private WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class));
  @Test public void configurationConditionalOnWebApplication(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).withUserConfiguration(TestMvcConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(RequestMatcherProvider.class));
  }
  @Test public void configurationConditionalOnRequestMatcherClass(){
    this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.security.web.util.matcher.RequestMatcher")).run((context) -> assertThat(context).doesNotHaveBean(RequestMatcherProvider.class));
  }
  @Test public void registersMvcRequestMatcherProviderIfMvcPresent(){
    this.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> assertThat(context).getBean(RequestMatcherProvider.class).isInstanceOf(MvcRequestMatcherProvider.class));
  }
  @Test public void registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent(){
    this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).withUserConfiguration(TestJerseyConfiguration.class).run((context) -> assertThat(context).getBean(RequestMatcherProvider.class).isInstanceOf(JerseyRequestMatcherProvider.class));
  }
  @Test public void mvcRequestMatcherProviderConditionalOnDispatcherServletClass(){
    this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).run((context) -> assertThat(context).doesNotHaveBean(MvcRequestMatcherProvider.class));
  }
  @Test public void jerseyRequestMatcherProviderConditionalOnResourceConfigClass(){
    this.contextRunner.withClassLoader(new FilteredClassLoader("org.glassfish.jersey.server.ResourceConfig")).run((context) -> assertThat(context).doesNotHaveBean(JerseyRequestMatcherProvider.class));
  }
  @Test public void mvcRequestMatcherProviderConditionalOnHandlerMappingIntrospectorBean(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(MvcRequestMatcherProvider.class));
  }
  @Test public void jerseyRequestMatcherProviderConditionalOnJerseyApplicationPathBean(){
    new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).run((context) -> assertThat(context).doesNotHaveBean(JerseyRequestMatcherProvider.class));
  }
@Configuration static class TestMvcConfiguration {
    @Bean public HandlerMappingIntrospector introspector(){
      return new HandlerMappingIntrospector();
    }
  }
@Configuration static class TestJerseyConfiguration {
    @Bean public JerseyApplicationPath jerseyApplicationPath(){
      return () -> "/admin";
    }
  }
}
