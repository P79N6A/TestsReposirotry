/** 
 * Tests for  {@link ValidationBindHandler}.
 * @author Phillip Webb
 * @author Madhura Bhave
 */
public class ValidationBindHandlerTests {
  private List<ConfigurationPropertySource> sources=new ArrayList<>();
  private ValidationBindHandler handler;
  private Binder binder;
  @Before public void setup(){
    this.binder=new Binder(this.sources);
    LocalValidatorFactoryBean validator=new LocalValidatorFactoryBean();
    validator.afterPropertiesSet();
    this.handler=new ValidationBindHandler(validator);
  }
  @Test public void bindShouldBindWithoutHandler(){
    this.sources.add(new MockConfigurationPropertySource("foo.age",4));
    ExampleValidatedBean bean=this.binder.bind("foo",Bindable.of(ExampleValidatedBean.class)).get();
    assertThat(bean.getAge()).isEqualTo(4);
  }
  @Test public void bindShouldFailWithHandler(){
    this.sources.add(new MockConfigurationPropertySource("foo.age",4));
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo",Bindable.of(ExampleValidatedBean.class),this.handler)).withCauseInstanceOf(BindValidationException.class);
  }
  @Test public void bindShouldValidateNestedProperties(){
    this.sources.add(new MockConfigurationPropertySource("foo.nested.age",4));
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo",Bindable.of(ExampleValidatedWithNestedBean.class),this.handler)).withCauseInstanceOf(BindValidationException.class);
  }
  @Test public void bindShouldFailWithAccessToOrigin(){
    this.sources.add(new MockConfigurationPropertySource("foo.age",4,"file"));
    BindValidationException cause=bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleValidatedBean.class),this.handler));
    ObjectError objectError=cause.getValidationErrors().getAllErrors().get(0);
    assertThat(Origin.from(objectError).toString()).isEqualTo("file");
  }
  @Test public void bindShouldFailWithAccessToBoundProperties(){
    MockConfigurationPropertySource source=new MockConfigurationPropertySource();
    source.put("foo.nested.name","baz");
    source.put("foo.nested.age","4");
    source.put("faf.bar","baz");
    this.sources.add(source);
    BindValidationException cause=bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleValidatedWithNestedBean.class),this.handler));
    Set<ConfigurationProperty> boundProperties=cause.getValidationErrors().getBoundProperties();
    assertThat(boundProperties).extracting((p) -> p.getName().toString()).contains("foo.nested.age","foo.nested.name");
  }
  @Test public void bindShouldFailWithAccessToName(){
    this.sources.add(new MockConfigurationPropertySource("foo.nested.age","4"));
    BindValidationException cause=bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleValidatedWithNestedBean.class),this.handler));
    assertThat(cause.getValidationErrors().getName().toString()).isEqualTo("foo");
    assertThat(cause.getMessage()).contains("nested.age");
  }
  @Test public void bindShouldFailIfExistingValueIsInvalid(){
    ExampleValidatedBean existingValue=new ExampleValidatedBean();
    BindValidationException cause=bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleValidatedBean.class).withExistingValue(existingValue),this.handler));
    FieldError fieldError=(FieldError)cause.getValidationErrors().getAllErrors().get(0);
    assertThat(fieldError.getField()).isEqualTo("age");
  }
  @Test public void bindShouldValidateWithoutAnnotation(){
    ExampleNonValidatedBean existingValue=new ExampleNonValidatedBean();
    bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleNonValidatedBean.class).withExistingValue(existingValue),this.handler));
  }
  @Test public void bindShouldNotValidateDepthGreaterThanZero(){
    MockConfigurationPropertySource source=new MockConfigurationPropertySource();
    source.put("foo.bar","baz");
    this.sources.add(source);
    ExampleValidatedBeanWithGetterException existingValue=new ExampleValidatedBeanWithGetterException();
    this.binder.bind(ConfigurationPropertyName.of("foo"),Bindable.of(ExampleValidatedBeanWithGetterException.class).withExistingValue(existingValue),this.handler);
  }
  private BindValidationException bindAndExpectValidationError(  Runnable action){
    try {
      action.run();
    }
 catch (    BindException ex) {
      BindValidationException cause=(BindValidationException)ex.getCause();
      return cause;
    }
    throw new IllegalStateException("Did not throw");
  }
public static class ExampleNonValidatedBean {
    @Min(5) private int age;
    public int getAge(){
      return this.age;
    }
    public void setAge(    int age){
      this.age=age;
    }
  }
@Validated public static class ExampleValidatedBean {
    @Min(5) private int age;
    public int getAge(){
      return this.age;
    }
    public void setAge(    int age){
      this.age=age;
    }
  }
@Validated public static class ExampleValidatedWithNestedBean {
    @Valid private ExampleNested nested=new ExampleNested();
    public ExampleNested getNested(){
      return this.nested;
    }
    public void setNested(    ExampleNested nested){
      this.nested=nested;
    }
  }
public static class ExampleNested {
    private String name;
    @Min(5) private int age;
    @NotNull private String address;
    public String getName(){
      return this.name;
    }
    public void setName(    String name){
      this.name=name;
    }
    public int getAge(){
      return this.age;
    }
    public void setAge(    int age){
      this.age=age;
    }
    public String getAddress(){
      return this.address;
    }
    public void setAddress(    String address){
      this.address=address;
    }
  }
@Validated public static class ExampleValidatedBeanWithGetterException {
    public int getAge(){
      throw new RuntimeException();
    }
  }
}
