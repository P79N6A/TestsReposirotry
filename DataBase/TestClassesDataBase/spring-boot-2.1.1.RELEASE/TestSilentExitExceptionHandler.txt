private static class TestSilentExitExceptionHandler extends SilentExitExceptionHandler {
  private boolean nonZeroExitCodePrevented;
  private final Object monitor=new Object();
  TestSilentExitExceptionHandler(){
    super(null);
  }
  @Override protected void preventNonZeroExitCode(){
    this.nonZeroExitCodePrevented=true;
  }
  @Override protected Thread[] getAllThreads(){
    final CountDownLatch threadRunning=new CountDownLatch(1);
    Thread daemonThread=new Thread(() -> {
synchronized (TestSilentExitExceptionHandler.this.monitor) {
        threadRunning.countDown();
        try {
          TestSilentExitExceptionHandler.this.monitor.wait();
        }
 catch (        InterruptedException ex) {
          Thread.currentThread().interrupt();
        }
      }
    }
);
    daemonThread.setDaemon(true);
    daemonThread.start();
    try {
      threadRunning.await();
    }
 catch (    InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
    return new Thread[]{Thread.currentThread(),daemonThread};
  }
  private void cleanUp(){
synchronized (this.monitor) {
      this.monitor.notifyAll();
    }
  }
}
