/** 
 * Tests for applying  {@link MeterRegistryCustomizer} beans.
 * @author Jon Schneider
 * @author Andy Wilkinson
 */
public class MeterRegistryCustomizerTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().with(MetricsRun.limitedTo(AtlasMetricsExportAutoConfiguration.class,PrometheusMetricsExportAutoConfiguration.class)).withConfiguration(AutoConfigurations.of(JvmMetricsAutoConfiguration.class));
  @Test public void commonTagsAreAppliedToAutoConfiguredBinders(){
    this.contextRunner.withUserConfiguration(MeterRegistryCustomizerConfiguration.class).run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("jvm.memory.used").tags("region","us-east-1").gauge();
    }
);
  }
  @Test public void commonTagsAreAppliedBeforeRegistryIsInjectableElsewhere(){
    this.contextRunner.withUserConfiguration(MeterRegistryCustomizerConfiguration.class).run((context) -> {
      MeterRegistry registry=context.getBean(MeterRegistry.class);
      registry.get("my.thing").tags("region","us-east-1").gauge();
    }
);
  }
  @Test public void customizersCanBeAppliedToSpecificRegistryTypes(){
    this.contextRunner.withUserConfiguration(MeterRegistryCustomizerConfiguration.class).run((context) -> {
      MeterRegistry prometheus=context.getBean(PrometheusMeterRegistry.class);
      prometheus.get("jvm.memory.used").tags("job","myjob").gauge();
      MeterRegistry atlas=context.getBean(AtlasMeterRegistry.class);
      assertThat(atlas.find("jvm.memory.used").tags("job","myjob").gauge()).isNull();
    }
);
  }
@Configuration static class MeterRegistryCustomizerConfiguration {
    @Bean public MeterRegistryCustomizer<MeterRegistry> commonTags(){
      return (registry) -> registry.config().commonTags("region","us-east-1");
    }
    @Bean public MeterRegistryCustomizer<PrometheusMeterRegistry> prometheusOnlyCommonTags(){
      return (registry) -> registry.config().commonTags("job","myjob");
    }
    @Bean public MyThing myThing(    MeterRegistry registry){
      registry.gauge("my.thing",0);
      return new MyThing();
    }
class MyThing {
    }
  }
}
