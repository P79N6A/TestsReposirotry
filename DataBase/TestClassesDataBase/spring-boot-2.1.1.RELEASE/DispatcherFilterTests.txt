/** 
 * Tests for  {@link DispatcherFilter}.
 * @author Phillip Webb
 */
public class DispatcherFilterTests {
  @Mock private Dispatcher dispatcher;
  @Mock private FilterChain chain;
  @Captor private ArgumentCaptor<ServerHttpResponse> serverResponseCaptor;
  @Captor private ArgumentCaptor<ServerHttpRequest> serverRequestCaptor;
  private DispatcherFilter filter;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.filter=new DispatcherFilter(this.dispatcher);
  }
  @Test public void dispatcherMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new DispatcherFilter(null)).withMessageContaining("Dispatcher must not be null");
  }
  @Test public void ignoresNotServletRequests() throws Exception {
    ServletRequest request=mock(ServletRequest.class);
    ServletResponse response=mock(ServletResponse.class);
    this.filter.doFilter(request,response,this.chain);
    verifyZeroInteractions(this.dispatcher);
    verify(this.chain).doFilter(request,response);
  }
  @Test public void ignoredByDispatcher() throws Exception {
    HttpServletRequest request=new MockHttpServletRequest("GET","/hello");
    HttpServletResponse response=new MockHttpServletResponse();
    this.filter.doFilter(request,response,this.chain);
    verify(this.chain).doFilter(request,response);
  }
  @Test public void handledByDispatcher() throws Exception {
    HttpServletRequest request=new MockHttpServletRequest("GET","/hello");
    HttpServletResponse response=new MockHttpServletResponse();
    willReturn(true).given(this.dispatcher).handle(any(ServerHttpRequest.class),any(ServerHttpResponse.class));
    this.filter.doFilter(request,response,this.chain);
    verifyZeroInteractions(this.chain);
    verify(this.dispatcher).handle(this.serverRequestCaptor.capture(),this.serverResponseCaptor.capture());
    ServerHttpRequest dispatcherRequest=this.serverRequestCaptor.getValue();
    ServletServerHttpRequest actualRequest=(ServletServerHttpRequest)dispatcherRequest;
    ServerHttpResponse dispatcherResponse=this.serverResponseCaptor.getValue();
    ServletServerHttpResponse actualResponse=(ServletServerHttpResponse)dispatcherResponse;
    assertThat(actualRequest.getServletRequest()).isEqualTo(request);
    assertThat(actualResponse.getServletResponse()).isEqualTo(response);
  }
}
