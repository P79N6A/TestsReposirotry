/** 
 * Tests for  {@link ServletEndpointDiscoverer}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class ServletEndpointDiscovererTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner();
  @Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection(){
    this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run(assertDiscoverer((discoverer) -> assertThat(discoverer.getEndpoints()).isEmpty()));
  }
  @Test public void getEndpointsShouldIncludeServletEndpoints(){
    this.contextRunner.withUserConfiguration(TestServletEndpoint.class).run(assertDiscoverer((discoverer) -> {
      Collection<ExposableServletEndpoint> endpoints=discoverer.getEndpoints();
      assertThat(endpoints).hasSize(1);
      ExposableServletEndpoint endpoint=endpoints.iterator().next();
      assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testservlet"));
      assertThat(endpoint.getEndpointServlet()).isNotNull();
      assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);
    }
));
  }
  @Test public void getEndpointsShouldDiscoverProxyServletEndpoints(){
    this.contextRunner.withUserConfiguration(TestProxyServletEndpoint.class).withConfiguration(AutoConfigurations.of(ValidationAutoConfiguration.class)).run(assertDiscoverer((discoverer) -> {
      Collection<ExposableServletEndpoint> endpoints=discoverer.getEndpoints();
      assertThat(endpoints).hasSize(1);
      ExposableServletEndpoint endpoint=endpoints.iterator().next();
      assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testservlet"));
      assertThat(endpoint.getEndpointServlet()).isNotNull();
      assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);
    }
));
  }
  @Test public void getEndpointsShouldNotDiscoverRegularEndpoints(){
    this.contextRunner.withUserConfiguration(WithRegularEndpointConfiguration.class).run(assertDiscoverer((discoverer) -> {
      Collection<ExposableServletEndpoint> endpoints=discoverer.getEndpoints();
      List<EndpointId> ids=endpoints.stream().map(ExposableEndpoint::getEndpointId).collect(Collectors.toList());
      assertThat(ids).containsOnly(EndpointId.of("testservlet"));
    }
));
  }
  @Test public void getEndpointWhenEndpointHasOperationsShouldThrowException(){
    this.contextRunner.withUserConfiguration(TestServletEndpointWithOperation.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("ServletEndpoints must not declare operations")));
  }
  @Test public void getEndpointWhenEndpointNotASupplierShouldThrowException(){
    this.contextRunner.withUserConfiguration(TestServletEndpointNotASupplier.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must be a supplier")));
  }
  @Test public void getEndpointWhenEndpointSuppliesWrongTypeShouldThrowException(){
    this.contextRunner.withUserConfiguration(TestServletEndpointSupplierOfWrongType.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must supply an EndpointServlet")));
  }
  @Test public void getEndpointWhenEndpointSuppliesNullShouldThrowException(){
    this.contextRunner.withUserConfiguration(TestServletEndpointSupplierOfNull.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must not supply null")));
  }
  private ContextConsumer<AssertableApplicationContext> assertDiscoverer(  Consumer<ServletEndpointDiscoverer> consumer){
    return (context) -> {
      ServletEndpointDiscoverer discoverer=new ServletEndpointDiscoverer(context,null,Collections.emptyList());
      consumer.accept(discoverer);
    }
;
  }
@Configuration static class EmptyConfiguration {
  }
@Configuration @Import({TestEndpoint.class,TestServletEndpoint.class}) static class WithRegularEndpointConfiguration {
  }
@ServletEndpoint(id="testservlet") static class TestServletEndpoint implements Supplier<EndpointServlet> {
    @Override public EndpointServlet get(){
      return new EndpointServlet(TestServlet.class);
    }
  }
@ServletEndpoint(id="testservlet") @Validated static class TestProxyServletEndpoint implements Supplier<EndpointServlet> {
    @Override public EndpointServlet get(){
      return new EndpointServlet(TestServlet.class);
    }
  }
@Endpoint(id="test") static class TestEndpoint {
  }
@ServletEndpoint(id="testservlet") static class TestServletEndpointWithOperation implements Supplier<EndpointServlet> {
    @Override public EndpointServlet get(){
      return new EndpointServlet(TestServlet.class);
    }
    @ReadOperation public String read(){
      return "error";
    }
  }
private static class TestServlet extends GenericServlet {
    @Override public void service(    ServletRequest req,    ServletResponse res) throws ServletException, IOException {
    }
  }
@ServletEndpoint(id="testservlet") static class TestServletEndpointNotASupplier {
  }
@ServletEndpoint(id="testservlet") static class TestServletEndpointSupplierOfWrongType implements Supplier<String> {
    @Override public String get(){
      return "error";
    }
  }
@ServletEndpoint(id="testservlet") static class TestServletEndpointSupplierOfNull implements Supplier<EndpointServlet> {
    @Override public EndpointServlet get(){
      return null;
    }
  }
}
