/** 
 * Tests for  {@link FlywayEndpoint}.
 * @author Eddú Meléndez
 * @author Andy Wilkinson
 * @author Phillip Webb
 */
public class FlywayEndpointTests {
  @Test public void flywayReportIsProduced(){
    new ApplicationContextRunner().withUserConfiguration(Config.class).run((context) -> {
      Map<String,FlywayDescriptor> flywayBeans=context.getBean(FlywayEndpoint.class).flywayBeans().getContexts().get(context.getId()).getFlywayBeans();
      assertThat(flywayBeans).hasSize(1);
      assertThat(flywayBeans.values().iterator().next().getMigrations()).hasSize(3);
    }
);
  }
  @Test public void whenFlywayHasBeenBaselinedFlywayReportIsProduced(){
    new ApplicationContextRunner().withUserConfiguration(BaselinedFlywayConfig.class,Config.class).run((context) -> {
      Map<String,FlywayDescriptor> flywayBeans=context.getBean(FlywayEndpoint.class).flywayBeans().getContexts().get(context.getId()).getFlywayBeans();
      assertThat(flywayBeans).hasSize(1);
      assertThat(flywayBeans.values().iterator().next().getMigrations()).hasSize(3);
    }
);
  }
@Configuration @Import({EmbeddedDataSourceConfiguration.class,FlywayAutoConfiguration.class}) public static class Config {
    @Bean public FlywayEndpoint endpoint(    ApplicationContext context){
      return new FlywayEndpoint(context);
    }
  }
@Configuration public static class BaselinedFlywayConfig {
    @SuppressWarnings("deprecation") @Bean public FlywayMigrationStrategy baseliningMigrationStrategy(){
      return (flyway) -> {
        flyway.setBaselineVersionAsString("2");
        flyway.baseline();
        flyway.migrate();
      }
;
    }
  }
}
