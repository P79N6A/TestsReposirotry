/** 
 * Tests for  {@link WebTestClientAutoConfiguration}
 * @author Brian Clozel
 * @author Stephane Nicoll
 */
public class WebTestClientAutoConfigurationTests {
  private ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(WebTestClientAutoConfiguration.class));
  @Test public void shouldNotBeConfiguredWithoutWebHandler(){
    this.contextRunner.run((context) -> {
      assertThat(context).hasNotFailed();
      assertThat(context).doesNotHaveBean(WebTestClient.class);
    }
);
  }
  @Test public void shouldCustomizeClientCodecs(){
    this.contextRunner.withUserConfiguration(CodecConfiguration.class).run((context) -> {
      assertThat(context).hasSingleBean(WebTestClient.class);
      assertThat(context).hasSingleBean(CodecCustomizer.class);
      verify(context.getBean(CodecCustomizer.class)).customize(any(CodecConfigurer.class));
    }
);
  }
  @Test public void shouldCustomizeTimeout(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("spring.test.webtestclient.timeout=15m").run((context) -> {
      WebTestClient webTestClient=context.getBean(WebTestClient.class);
      Object duration=ReflectionTestUtils.getField(webTestClient,"timeout");
      assertThat(duration).isEqualTo(Duration.of(15,ChronoUnit.MINUTES));
    }
);
  }
  @Test @SuppressWarnings("unchecked") public void shouldApplySpringSecurityConfigurer(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {
      WebTestClient webTestClient=context.getBean(WebTestClient.class);
      WebTestClient.Builder builder=(WebTestClient.Builder)ReflectionTestUtils.getField(webTestClient,"builder");
      WebHttpHandlerBuilder httpHandlerBuilder=(WebHttpHandlerBuilder)ReflectionTestUtils.getField(builder,"httpHandlerBuilder");
      List<WebFilter> filters=(List<WebFilter>)ReflectionTestUtils.getField(httpHandlerBuilder,"filters");
      assertThat(filters.get(0).getClass().getName()).isEqualTo("org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter");
    }
);
  }
  @Test @SuppressWarnings("unchecked") public void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath(){
    FilteredClassLoader classLoader=new FilteredClassLoader(SecurityMockServerConfigurers.class);
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withClassLoader(classLoader).run((context) -> {
      WebTestClient webTestClient=context.getBean(WebTestClient.class);
      WebTestClient.Builder builder=(WebTestClient.Builder)ReflectionTestUtils.getField(webTestClient,"builder");
      WebHttpHandlerBuilder httpHandlerBuilder=(WebHttpHandlerBuilder)ReflectionTestUtils.getField(builder,"httpHandlerBuilder");
      List<WebFilter> filters=(List<WebFilter>)ReflectionTestUtils.getField(httpHandlerBuilder,"filters");
      assertThat(filters).isEmpty();
    }
);
  }
@Configuration static class BaseConfiguration {
    @Bean public WebHandler webHandler(){
      return mock(WebHandler.class);
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CodecConfiguration {
    @Bean public CodecCustomizer myCodecCustomizer(){
      return mock(CodecCustomizer.class);
    }
  }
}
