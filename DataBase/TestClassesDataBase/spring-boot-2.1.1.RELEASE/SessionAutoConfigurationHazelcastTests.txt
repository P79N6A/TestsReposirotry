/** 
 * Hazelcast specific tests for  {@link SessionAutoConfiguration}.
 * @author Vedran Pavic
 */
public class SessionAutoConfigurationHazelcastTests extends AbstractSessionAutoConfigurationTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SessionAutoConfiguration.class)).withUserConfiguration(HazelcastConfiguration.class);
  @Test public void defaultConfig(){
    this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast").run(this::validateDefaultConfig);
  }
  @Test public void defaultConfigWithUniqueStoreImplementation(){
    this.contextRunner.withClassLoader(new FilteredClassLoader(JdbcOperationsSessionRepository.class,RedisOperationsSessionRepository.class,MongoOperationsSessionRepository.class)).run(this::validateDefaultConfig);
  }
  private void validateDefaultConfig(  AssertableWebApplicationContext context){
    validateSessionRepository(context,HazelcastSessionRepository.class);
    HazelcastInstance hazelcastInstance=context.getBean(HazelcastInstance.class);
    verify(hazelcastInstance,times(1)).getMap("spring:session:sessions");
  }
  @Test public void customMapName(){
    this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast","spring.session.hazelcast.map-name=foo:bar:biz").run((context) -> {
      validateSessionRepository(context,HazelcastSessionRepository.class);
      HazelcastInstance hazelcastInstance=context.getBean(HazelcastInstance.class);
      verify(hazelcastInstance,times(1)).getMap("foo:bar:biz");
    }
);
  }
  @Test public void customFlushMode(){
    this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast","spring.session.hazelcast.flush-mode=immediate").run((context) -> {
      HazelcastSessionRepository repository=validateSessionRepository(context,HazelcastSessionRepository.class);
      assertThat(repository).hasFieldOrPropertyWithValue("hazelcastFlushMode",HazelcastFlushMode.IMMEDIATE);
    }
);
  }
@Configuration static class HazelcastConfiguration {
    @Bean @SuppressWarnings("unchecked") public HazelcastInstance hazelcastInstance(){
      IMap<Object,Object> map=mock(IMap.class);
      HazelcastInstance mock=mock(HazelcastInstance.class);
      given(mock.getMap("spring:session:sessions")).willReturn(map);
      given(mock.getMap("foo:bar:biz")).willReturn(map);
      return mock;
    }
  }
}
