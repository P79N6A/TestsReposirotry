/** 
 * Tests for  {@link MainMethod}.
 * @author Phillip Webb
 */
public class MainMethodTests {
  private static ThreadLocal<MainMethod> mainMethod=new ThreadLocal<>();
  private Method actualMain;
  @Before public void setup() throws Exception {
    this.actualMain=Valid.class.getMethod("main",String[].class);
  }
  @Test public void threadMustNotBeNull(){
    assertThatIllegalArgumentException().isThrownBy(() -> new MainMethod(null)).withMessageContaining("Thread must not be null");
  }
  @Test public void validMainMethod() throws Exception {
    MainMethod method=new TestThread(Valid::main).test();
    assertThat(method.getMethod()).isEqualTo(this.actualMain);
    assertThat(method.getDeclaringClassName()).isEqualTo(this.actualMain.getDeclaringClass().getName());
  }
  @Test public void missingArgsMainMethod() throws Exception {
    assertThatIllegalStateException().isThrownBy(() -> new TestThread(MissingArgs::main).test()).withMessageContaining("Unable to find main method");
  }
  @Test public void nonStatic() throws Exception {
    assertThatIllegalStateException().isThrownBy(() -> new TestThread(() -> new NonStaticMain().main()).test()).withMessageContaining("Unable to find main method");
  }
private static class TestThread extends Thread {
    private final Runnable runnable;
    private Exception exception;
    private MainMethod mainMethod;
    TestThread(    Runnable runnable){
      this.runnable=runnable;
    }
    public MainMethod test() throws InterruptedException {
      start();
      join();
      if (this.exception != null) {
        ReflectionUtils.rethrowRuntimeException(this.exception);
      }
      return this.mainMethod;
    }
    @Override public void run(){
      try {
        this.runnable.run();
        this.mainMethod=MainMethodTests.mainMethod.get();
      }
 catch (      Exception ex) {
        this.exception=ex;
      }
    }
  }
public static class Valid {
    public static void main(    String... args){
      someOtherMethod();
    }
    private static void someOtherMethod(){
      mainMethod.set(new MainMethod());
    }
  }
public static class MissingArgs {
    public static void main(){
      mainMethod.set(new MainMethod());
    }
  }
private static class NonStaticMain {
    public void main(    String... args){
      mainMethod.set(new MainMethod());
    }
  }
}
