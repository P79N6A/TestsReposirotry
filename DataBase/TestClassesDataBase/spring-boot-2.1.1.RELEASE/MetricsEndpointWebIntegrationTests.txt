/** 
 * Web integration tests for  {@link MetricsEndpoint}.
 * @author Jon Schneider
 * @author Andy Wilkinson
 */
@RunWith(WebEndpointRunners.class) public class MetricsEndpointWebIntegrationTests {
  private static MeterRegistry registry=new SimpleMeterRegistry(SimpleConfig.DEFAULT,new MockClock());
  private static WebTestClient client;
  private final ObjectMapper mapper=new ObjectMapper();
  @Test @SuppressWarnings("unchecked") public void listNames() throws IOException {
    String responseBody=client.get().uri("/actuator/metrics").exchange().expectStatus().isOk().expectBody(String.class).returnResult().getResponseBody();
    Map<String,List<String>> names=this.mapper.readValue(responseBody,Map.class);
    assertThat(names.get("names")).containsOnlyOnce("jvm.memory.used");
  }
  @Test public void selectByName(){
    client.get().uri("/actuator/metrics/jvm.memory.used").exchange().expectStatus().isOk().expectBody().jsonPath("$.name").isEqualTo("jvm.memory.used");
  }
  @Test public void selectByTag(){
    client.get().uri("/actuator/metrics/jvm.memory.used?tag=id:Compressed%20Class%20Space").exchange().expectStatus().isOk().expectBody().jsonPath("$.name").isEqualTo("jvm.memory.used");
  }
@Configuration static class TestConfiguration {
    @Bean public MeterRegistry registry(){
      return registry;
    }
    @Bean public MetricsEndpoint metricsEndpoint(    MeterRegistry meterRegistry){
      return new MetricsEndpoint(meterRegistry);
    }
    @Bean public JvmMemoryMetrics jvmMemoryMetrics(    MeterRegistry meterRegistry){
      JvmMemoryMetrics memoryMetrics=new JvmMemoryMetrics();
      memoryMetrics.bindTo(meterRegistry);
      return memoryMetrics;
    }
  }
}
