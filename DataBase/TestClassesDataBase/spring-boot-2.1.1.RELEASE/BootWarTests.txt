/** 
 * Tests for  {@link BootWar}.
 * @author Andy Wilkinson
 */
public class BootWarTests extends AbstractBootArchiveTests<BootWar> {
  public BootWarTests(){
    super(BootWar.class,"org.springframework.boot.loader.WarLauncher","WEB-INF/lib","WEB-INF/classes");
  }
  @Test public void providedClasspathJarsArePackagedInWebInfLibProvided() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().providedClasspath(this.temp.newFile("one.jar"),this.temp.newFile("two.jar"));
    getTask().execute();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNotNull();
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull();
    }
   }
  @Test public void providedClasspathCanBeSetUsingAFileCollection() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().providedClasspath(this.temp.newFile("one.jar"));
    getTask().setProvidedClasspath(getTask().getProject().files(this.temp.newFile("two.jar")));
    getTask().execute();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNull();
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull();
    }
   }
  @Test public void providedClasspathCanBeSetUsingAnObject() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().providedClasspath(this.temp.newFile("one.jar"));
    getTask().setProvidedClasspath(this.temp.newFile("two.jar"));
    getTask().execute();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNull();
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull();
    }
   }
  @Test public void devtoolsJarIsExcludedByDefaultWhenItsOnTheProvidedClasspath() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().providedClasspath(this.temp.newFile("spring-boot-devtools-0.1.2.jar"));
    getTask().execute();
    assertThat(getTask().getArchivePath()).exists();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/spring-boot-devtools-0.1.2.jar")).isNull();
    }
   }
  @Test public void devtoolsJarCanBeIncludedWhenItsOnTheProvidedClasspath() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().providedClasspath(this.temp.newFile("spring-boot-devtools-0.1.2.jar"));
    getTask().setExcludeDevtools(false);
    getTask().execute();
    assertThat(getTask().getArchivePath()).exists();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("WEB-INF/lib-provided/spring-boot-devtools-0.1.2.jar")).isNotNull();
    }
   }
  @Test public void webappResourcesInDirectoriesThatOverlapWithLoaderCanBePackaged() throws IOException {
    File webappFolder=this.temp.newFolder("src","main","webapp");
    File orgFolder=new File(webappFolder,"org");
    orgFolder.mkdir();
    new File(orgFolder,"foo.txt").createNewFile();
    getTask().from(webappFolder);
    getTask().setMainClassName("com.example.Main");
    getTask().execute();
    assertThat(getTask().getArchivePath()).exists();
    try (JarFile jarFile=new JarFile(getTask().getArchivePath())){
      assertThat(jarFile.getEntry("org/")).isNotNull();
      assertThat(jarFile.getEntry("org/foo.txt")).isNotNull();
    }
   }
  @Test public void libProvidedEntriesAreWrittenAfterLibEntries() throws IOException {
    getTask().setMainClassName("com.example.Main");
    getTask().classpath(this.temp.newFile("library.jar"));
    getTask().providedClasspath(this.temp.newFile("provided-library.jar"));
    getTask().execute();
    assertThat(getEntryNames(getTask().getArchivePath())).containsSubsequence("WEB-INF/lib/library.jar","WEB-INF/lib-provided/provided-library.jar");
  }
}
