/** 
 * Tests for  {@link DiscovererEndpointFilter}.
 * @author Phillip Webb
 */
public class DiscovererEndpointFilterTests {
  @Test public void createWhenDiscovererIsNullShouldThrowException(){
    assertThatIllegalArgumentException().isThrownBy(() -> new TestDiscovererEndpointFilter(null)).withMessageContaining("Discoverer must not be null");
  }
  @Test public void matchWhenDiscoveredByDiscovererShouldReturnTrue(){
    DiscovererEndpointFilter filter=new TestDiscovererEndpointFilter(TestDiscovererA.class);
    DiscoveredEndpoint<?> endpoint=mockDiscoveredEndpoint(TestDiscovererA.class);
    assertThat(filter.match(endpoint)).isTrue();
  }
  @Test public void matchWhenNotDiscoveredByDiscovererShouldReturnFalse(){
    DiscovererEndpointFilter filter=new TestDiscovererEndpointFilter(TestDiscovererA.class);
    DiscoveredEndpoint<?> endpoint=mockDiscoveredEndpoint(TestDiscovererB.class);
    assertThat(filter.match(endpoint)).isFalse();
  }
  @SuppressWarnings({"rawtypes","unchecked"}) private DiscoveredEndpoint<?> mockDiscoveredEndpoint(  Class<?> discoverer){
    DiscoveredEndpoint endpoint=mock(DiscoveredEndpoint.class);
    given(endpoint.wasDiscoveredBy(discoverer)).willReturn(true);
    return endpoint;
  }
static class TestDiscovererEndpointFilter extends DiscovererEndpointFilter {
    TestDiscovererEndpointFilter(    Class<? extends EndpointDiscoverer<?,?>> discoverer){
      super(discoverer);
    }
  }
abstract static class TestDiscovererA extends EndpointDiscoverer<ExposableEndpoint<Operation>,Operation> {
    TestDiscovererA(    ApplicationContext applicationContext,    ParameterValueMapper parameterValueMapper,    Collection<OperationInvokerAdvisor> invokerAdvisors,    Collection<EndpointFilter<ExposableEndpoint<Operation>>> filters){
      super(applicationContext,parameterValueMapper,invokerAdvisors,filters);
    }
  }
abstract static class TestDiscovererB extends EndpointDiscoverer<ExposableEndpoint<Operation>,Operation> {
    TestDiscovererB(    ApplicationContext applicationContext,    ParameterValueMapper parameterValueMapper,    Collection<OperationInvokerAdvisor> invokerAdvisors,    Collection<EndpointFilter<ExposableEndpoint<Operation>>> filters){
      super(applicationContext,parameterValueMapper,invokerAdvisors,filters);
    }
  }
}
