/** 
 * Tests for  {@link IgnoreTopLevelConverterNotFoundBindHandler}.
 * @author Madhura Bhave
 */
public class IgnoreTopLevelConverterNotFoundBindHandlerTests {
  private List<ConfigurationPropertySource> sources=new ArrayList<>();
  private Binder binder;
  @Before public void setup(){
    MockConfigurationPropertySource source=new MockConfigurationPropertySource();
    source.put("example","bar");
    this.sources.add(source);
    this.binder=new Binder(this.sources);
  }
  @Test public void bindWhenHandlerNotPresentShouldFail(){
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("example",Bindable.of(Example.class))).withCauseInstanceOf(ConverterNotFoundException.class);
  }
  @Test public void bindWhenTopLevelContextAndExceptionIgnorableShouldNotFail(){
    this.binder.bind("example",Bindable.of(Example.class),new IgnoreTopLevelConverterNotFoundBindHandler());
  }
  @Test public void bindWhenExceptionNotIgnorableShouldFail(){
    MockConfigurationPropertySource source=new MockConfigurationPropertySource();
    source.put("example.foo","1");
    this.sources.add(source);
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("example",Bindable.of(Example.class),new IgnoreTopLevelConverterNotFoundBindHandler())).withCauseInstanceOf(IllegalStateException.class);
  }
  @Test public void bindWhenExceptionInNestedContextShouldFail(){
    MockConfigurationPropertySource source=new MockConfigurationPropertySource();
    source.put("example.map","hello");
    this.sources.add(source);
    assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("example",Bindable.of(Example.class),new IgnoreTopLevelConverterNotFoundBindHandler())).withCauseInstanceOf(ConverterNotFoundException.class);
  }
public static class Example {
    private int foo;
    private Map<String,String> map;
    public int getFoo(){
      return this.foo;
    }
    public void setFoo(    int foo){
      throw new IllegalStateException();
    }
    public Map<String,String> getMap(){
      return this.map;
    }
    public void setMap(    Map<String,String> map){
      this.map=map;
    }
  }
}
