/** 
 * Tests for  {@link CloudFoundryActuatorAutoConfiguration}.
 * @author Madhura Bhave
 */
public class CloudFoundryActuatorAutoConfigurationTests {
  private final WebApplicationContextRunner contextRunner=new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,WebMvcAutoConfiguration.class,JacksonAutoConfiguration.class,DispatcherServletAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,PropertyPlaceholderAutoConfiguration.class,RestTemplateAutoConfiguration.class,ManagementContextAutoConfiguration.class,ServletManagementContextAutoConfiguration.class,EndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,CloudFoundryActuatorAutoConfiguration.class));
  @Test public void cloudFoundryPlatformActive(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      EndpointMapping endpointMapping=(EndpointMapping)ReflectionTestUtils.getField(handlerMapping,"endpointMapping");
      assertThat(endpointMapping.getPath()).isEqualTo("/cloudfoundryapplication");
      CorsConfiguration corsConfiguration=(CorsConfiguration)ReflectionTestUtils.getField(handlerMapping,"corsConfiguration");
      assertThat(corsConfiguration.getAllowedOrigins()).contains("*");
      assertThat(corsConfiguration.getAllowedMethods()).containsAll(Arrays.asList(HttpMethod.GET.name(),HttpMethod.POST.name()));
      assertThat(corsConfiguration.getAllowedHeaders()).containsAll(Arrays.asList("Authorization","X-Cf-App-Instance","Content-Type"));
    }
);
  }
  @Test public void cloudfoundryapplicationProducesActuatorMediaType() throws Exception {
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      MockMvc mockMvc=MockMvcBuilders.webAppContextSetup(context).build();
      mockMvc.perform(get("/cloudfoundryapplication")).andExpect(header().string("Content-Type",ActuatorMediaType.V2_JSON + ";charset=UTF-8"));
    }
);
  }
  @Test public void cloudFoundryPlatformActiveSetsApplicationId(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      String applicationId=(String)ReflectionTestUtils.getField(interceptor,"applicationId");
      assertThat(applicationId).isEqualTo("my-app-id");
    }
);
  }
  @Test public void cloudFoundryPlatformActiveSetsCloudControllerUrl(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(interceptor,"cloudFoundrySecurityService");
      String cloudControllerUrl=(String)ReflectionTestUtils.getField(interceptorSecurityService,"cloudControllerUrl");
      assertThat(cloudControllerUrl).isEqualTo("http://my-cloud-controller.com");
    }
);
  }
  @Test public void skipSslValidation(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com","management.cloudfoundry.skip-ssl-validation:true").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Object interceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(interceptor,"cloudFoundrySecurityService");
      RestTemplate restTemplate=(RestTemplate)ReflectionTestUtils.getField(interceptorSecurityService,"restTemplate");
      assertThat(restTemplate.getRequestFactory()).isInstanceOf(SkipSslVerificationHttpRequestFactory.class);
    }
);
  }
  @Test public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Object securityInterceptor=ReflectionTestUtils.getField(handlerMapping,"securityInterceptor");
      Object interceptorSecurityService=ReflectionTestUtils.getField(securityInterceptor,"cloudFoundrySecurityService");
      assertThat(interceptorSecurityService).isNull();
    }
);
  }
  @Test public void cloudFoundryPathsIgnoredBySpringSecurity(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id").run((context) -> {
      FilterChainProxy securityFilterChain=(FilterChainProxy)context.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);
      SecurityFilterChain chain=securityFilterChain.getFilterChains().get(0);
      MockHttpServletRequest request=new MockHttpServletRequest();
      request.setServletPath("/cloudfoundryapplication/my-path");
      assertThat(chain.getFilters()).isEmpty();
      assertThat(chain.matches(request)).isTrue();
      request.setServletPath("/some-other-path");
      assertThat(chain.matches(request)).isFalse();
    }
);
  }
  @Test public void cloudFoundryPlatformInactive(){
    this.contextRunner.withPropertyValues().run((context) -> assertThat(context.containsBean("cloudFoundryWebEndpointServletHandlerMapping")).isFalse());
  }
  @Test public void cloudFoundryManagementEndpointsDisabled(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION=---","management.cloudfoundry.enabled:false").run((context) -> assertThat(context.containsBean("cloudFoundryEndpointHandlerMapping")).isFalse());
  }
  @Test public void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb(){
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Collection<ExposableWebEndpoint> endpoints=handlerMapping.getEndpoints();
      assertThat(endpoints.stream().filter((candidate) -> EndpointId.of("test").equals(candidate.getEndpointId())).findFirst()).isNotEmpty();
    }
);
  }
  @Test public void endpointPathCustomizationIsNotApplied(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com","management.endpoints.web.path-mapping.test=custom").withUserConfiguration(TestConfiguration.class).run((context) -> {
      CloudFoundryWebEndpointServletHandlerMapping handlerMapping=getHandlerMapping(context);
      Collection<ExposableWebEndpoint> endpoints=handlerMapping.getEndpoints();
      ExposableWebEndpoint endpoint=endpoints.stream().filter((candidate) -> EndpointId.of("test").equals(candidate.getEndpointId())).findFirst().get();
      Collection<WebOperation> operations=endpoint.getOperations();
      assertThat(operations).hasSize(1);
      assertThat(operations.iterator().next().getRequestPredicate().getPath()).isEqualTo("test");
    }
);
  }
  @Test public void healthEndpointInvokerShouldBeCloudFoundryWebExtension(){
    this.contextRunner.withPropertyValues("VCAP_APPLICATION:---","vcap.application.application_id:my-app-id","vcap.application.cf_api:http://my-cloud-controller.com").withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,HealthEndpointAutoConfiguration.class)).run((context) -> {
      Collection<ExposableWebEndpoint> endpoints=context.getBean("cloudFoundryWebEndpointServletHandlerMapping",CloudFoundryWebEndpointServletHandlerMapping.class).getEndpoints();
      ExposableWebEndpoint endpoint=endpoints.iterator().next();
      assertThat(endpoint.getOperations()).hasSize(3);
      WebOperation webOperation=findOperationWithRequestPath(endpoint,"health");
      Object invoker=ReflectionTestUtils.getField(webOperation,"invoker");
      assertThat(ReflectionTestUtils.getField(invoker,"target")).isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);
    }
);
  }
  private CloudFoundryWebEndpointServletHandlerMapping getHandlerMapping(  ApplicationContext context){
    return context.getBean("cloudFoundryWebEndpointServletHandlerMapping",CloudFoundryWebEndpointServletHandlerMapping.class);
  }
  private WebOperation findOperationWithRequestPath(  ExposableWebEndpoint endpoint,  String requestPath){
    for (    WebOperation operation : endpoint.getOperations()) {
      if (operation.getRequestPredicate().getPath().equals(requestPath)) {
        return operation;
      }
    }
    throw new IllegalStateException("No operation found with request path " + requestPath + " from "+ endpoint.getOperations());
  }
@Configuration static class TestConfiguration {
    @Bean public TestEndpoint testEndpoint(){
      return new TestEndpoint();
    }
  }
@Endpoint(id="test") static class TestEndpoint {
    @ReadOperation public String hello(){
      return "hello world";
    }
  }
}
