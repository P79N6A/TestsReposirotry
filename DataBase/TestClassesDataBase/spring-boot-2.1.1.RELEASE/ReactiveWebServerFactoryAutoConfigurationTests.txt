/** 
 * Tests for  {@link ReactiveWebServerFactoryAutoConfiguration}.
 * @author Brian Clozel
 */
public class ReactiveWebServerFactoryAutoConfigurationTests {
  private ReactiveWebApplicationContextRunner contextRunner=new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(ReactiveWebServerFactoryAutoConfiguration.class));
  @Test public void createFromConfigClass(){
    this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class,HttpHandlerConfiguration.class).run((context) -> {
      assertThat(context.getBeansOfType(ReactiveWebServerFactory.class)).hasSize(1);
      assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(1);
      assertThat(context.getBeansOfType(ReactiveWebServerFactoryCustomizer.class)).hasSize(1);
    }
);
  }
  @Test public void missingHttpHandler(){
    this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class).run((context) -> assertThat(context.getStartupFailure()).isInstanceOf(ApplicationContextException.class).hasMessageContaining("missing HttpHandler bean"));
  }
  @Test public void multipleHttpHandler(){
    this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class,HttpHandlerConfiguration.class,TooManyHttpHandlers.class).run((context) -> assertThat(context.getStartupFailure()).isInstanceOf(ApplicationContextException.class).hasMessageContaining("multiple HttpHandler beans : " + "httpHandler,additionalHttpHandler"));
  }
  @Test public void customizeReactiveWebServer(){
    this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class,HttpHandlerConfiguration.class,ReactiveWebServerCustomization.class).run((context) -> assertThat(context.getBean(MockReactiveWebServerFactory.class).getPort()).isEqualTo(9000));
  }
  @Test public void defaultWebServerIsTomcat(){
    this.contextRunner.withUserConfiguration(HttpHandlerConfiguration.class).withPropertyValues("server.port=0").run((context) -> assertThat(context.getBean(ReactiveWebServerFactory.class)).isInstanceOf(TomcatReactiveWebServerFactory.class));
  }
@Configuration protected static class HttpHandlerConfiguration {
    @Bean public HttpHandler httpHandler(){
      return Mockito.mock(HttpHandler.class);
    }
  }
@Configuration protected static class TooManyHttpHandlers {
    @Bean public HttpHandler additionalHttpHandler(){
      return Mockito.mock(HttpHandler.class);
    }
  }
@Configuration protected static class ReactiveWebServerCustomization {
    @Bean public WebServerFactoryCustomizer<ConfigurableReactiveWebServerFactory> reactiveWebServerCustomizer(){
      return (factory) -> factory.setPort(9000);
    }
  }
@Configuration public static class MockWebServerConfiguration {
    @Bean public MockReactiveWebServerFactory mockReactiveWebServerFactory(){
      return new MockReactiveWebServerFactory();
    }
  }
}
