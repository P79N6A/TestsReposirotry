/** 
 * Tests for  {@link DatadogMetricsExportAutoConfiguration}.
 * @author Andy Wilkinson
 */
public class DatadogMetricsExportAutoConfigurationTests {
  private final ApplicationContextRunner contextRunner=new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(DatadogMetricsExportAutoConfiguration.class));
  @Test public void backsOffWithoutAClock(){
    this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(DatadogMeterRegistry.class));
  }
  @Test public void failsWithoutAnApiKey(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasFailed());
  }
  @Test public void autoConfiguresConfigAndMeterRegistry(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.datadog.api-key=abcde").run((context) -> assertThat(context).hasSingleBean(DatadogMeterRegistry.class).hasSingleBean(DatadogConfig.class));
  }
  @Test public void autoConfigurationCanBeDisabled(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.datadog.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(DatadogMeterRegistry.class).doesNotHaveBean(DatadogConfig.class));
  }
  @Test public void allowsCustomConfigToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(DatadogMeterRegistry.class).hasSingleBean(DatadogConfig.class).hasBean("customConfig"));
  }
  @Test public void allowsCustomRegistryToBeUsed(){
    this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).withPropertyValues("management.metrics.export.datadog.api-key=abcde").run((context) -> assertThat(context).hasSingleBean(DatadogMeterRegistry.class).hasBean("customRegistry").hasSingleBean(DatadogConfig.class));
  }
  @Test public void stopsMeterRegistryWhenContextIsClosed(){
    this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.datadog.api-key=abcde").run((context) -> {
      DatadogMeterRegistry registry=context.getBean(DatadogMeterRegistry.class);
      assertThat(registry.isClosed()).isFalse();
      context.close();
      assertThat(registry.isClosed()).isTrue();
    }
);
  }
@Configuration static class BaseConfiguration {
    @Bean public Clock clock(){
      return Clock.SYSTEM;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomConfigConfiguration {
    @Bean public DatadogConfig customConfig(){
      return new DatadogConfig(){
        @Override public String get(        String k){
          if ("datadog.apiKey".equals(k)) {
            return "12345";
          }
          return null;
        }
      }
;
    }
  }
@Configuration @Import(BaseConfiguration.class) static class CustomRegistryConfiguration {
    @Bean public DatadogMeterRegistry customRegistry(    DatadogConfig config,    Clock clock){
      return new DatadogMeterRegistry(config,clock);
    }
  }
}
