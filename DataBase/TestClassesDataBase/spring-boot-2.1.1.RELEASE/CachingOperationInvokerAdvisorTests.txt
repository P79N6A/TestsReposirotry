/** 
 * Tests for  {@link CachingOperationInvokerAdvisor}.
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
public class CachingOperationInvokerAdvisorTests {
  @Mock private OperationInvoker invoker;
  @Mock private Function<EndpointId,Long> timeToLive;
  private CachingOperationInvokerAdvisor advisor;
  @Before public void setup(){
    MockitoAnnotations.initMocks(this);
    this.advisor=new CachingOperationInvokerAdvisor(this.timeToLive);
  }
  @Test public void applyWhenOperationIsNotReadShouldNotAddAdvise(){
    OperationParameters parameters=getParameters("get");
    OperationInvoker advised=this.advisor.apply(EndpointId.of("foo"),OperationType.WRITE,parameters,this.invoker);
    assertThat(advised).isSameAs(this.invoker);
  }
  @Test public void applyWhenHasAtLeaseOneMandatoryParameterShouldNotAddAdvise(){
    OperationParameters parameters=getParameters("getWithParameters",String.class,String.class);
    OperationInvoker advised=this.advisor.apply(EndpointId.of("foo"),OperationType.READ,parameters,this.invoker);
    assertThat(advised).isSameAs(this.invoker);
  }
  @Test public void applyWhenTimeToLiveReturnsNullShouldNotAddAdvise(){
    OperationParameters parameters=getParameters("get");
    given(this.timeToLive.apply(any())).willReturn(null);
    OperationInvoker advised=this.advisor.apply(EndpointId.of("foo"),OperationType.READ,parameters,this.invoker);
    assertThat(advised).isSameAs(this.invoker);
    verify(this.timeToLive).apply(EndpointId.of("foo"));
  }
  @Test public void applyWhenTimeToLiveIsZeroShouldNotAddAdvise(){
    OperationParameters parameters=getParameters("get");
    given(this.timeToLive.apply(any())).willReturn(0L);
    OperationInvoker advised=this.advisor.apply(EndpointId.of("foo"),OperationType.READ,parameters,this.invoker);
    assertThat(advised).isSameAs(this.invoker);
    verify(this.timeToLive).apply(EndpointId.of("foo"));
  }
  @Test public void applyShouldAddCacheAdvise(){
    OperationParameters parameters=getParameters("get");
    given(this.timeToLive.apply(any())).willReturn(100L);
    assertAdviseIsApplied(parameters);
  }
  @Test public void applyWithAllOptionalParametersShouldAddAdvise(){
    OperationParameters parameters=getParameters("getWithAllOptionalParameters",String.class,String.class);
    given(this.timeToLive.apply(any())).willReturn(100L);
    assertAdviseIsApplied(parameters);
  }
  @Test public void applyWithSecurityContextShouldAddAdvise(){
    OperationParameters parameters=getParameters("getWithSecurityContext",SecurityContext.class,String.class);
    given(this.timeToLive.apply(any())).willReturn(100L);
    assertAdviseIsApplied(parameters);
  }
  private void assertAdviseIsApplied(  OperationParameters parameters){
    OperationInvoker advised=this.advisor.apply(EndpointId.of("foo"),OperationType.READ,parameters,this.invoker);
    assertThat(advised).isInstanceOf(CachingOperationInvoker.class);
    assertThat(advised).hasFieldOrPropertyWithValue("invoker",this.invoker);
    assertThat(advised).hasFieldOrPropertyWithValue("timeToLive",100L);
  }
  private OperationParameters getParameters(  String methodName,  Class<?>... parameterTypes){
    return getOperationMethod(methodName,parameterTypes).getParameters();
  }
  private OperationMethod getOperationMethod(  String methodName,  Class<?>... parameterTypes){
    Method method=ReflectionUtils.findMethod(TestOperations.class,methodName,parameterTypes);
    return new OperationMethod(method,OperationType.READ);
  }
public static class TestOperations {
    public String get(){
      return "";
    }
    public String getWithParameters(    @Nullable String foo,    String bar){
      return "";
    }
    public String getWithAllOptionalParameters(    @Nullable String foo,    @Nullable String bar){
      return "";
    }
    public String getWithSecurityContext(    SecurityContext securityContext,    @Nullable String bar){
      return "";
    }
  }
}
