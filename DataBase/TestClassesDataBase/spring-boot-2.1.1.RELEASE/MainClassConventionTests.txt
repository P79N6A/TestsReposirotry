public class MainClassConventionTests {
  @Rule public final TemporaryFolder temp=new TemporaryFolder();
  private Project project;
  private MainClassConvention convention;
  @Before public void createConvention() throws IOException {
    this.project=ProjectBuilder.builder().withProjectDir(this.temp.newFolder()).build();
    this.convention=new MainClassConvention(this.project,() -> null);
  }
  @Test public void mainClassNameProjectPropertyIsUsed() throws Exception {
    this.project.getExtensions().getByType(ExtraPropertiesExtension.class).set("mainClassName","com.example.MainClass");
    assertThat(this.convention.call()).isEqualTo("com.example.MainClass");
  }
  @Test public void springBootExtensionMainClassNameIsUsed() throws Exception {
    SpringBootExtension extension=this.project.getExtensions().create("springBoot",SpringBootExtension.class,this.project);
    extension.setMainClassName("com.example.MainClass");
    assertThat(this.convention.call()).isEqualTo("com.example.MainClass");
  }
  @Test public void springBootExtensionMainClassNameIsUsedInPreferenceToMainClassNameProjectProperty() throws Exception {
    this.project.getExtensions().getByType(ExtraPropertiesExtension.class).set("mainClassName","com.example.ProjectPropertyMainClass");
    SpringBootExtension extension=this.project.getExtensions().create("springBoot",SpringBootExtension.class,this.project);
    extension.setMainClassName("com.example.SpringBootExtensionMainClass");
    assertThat(this.convention.call()).isEqualTo("com.example.SpringBootExtensionMainClass");
  }
}
