/** 
 * Integration tests for  {@link DataJpaTest}.
 * @author Phillip Webb
 * @author Andy Wilkinson
 */
@RunWith(SpringRunner.class) @DataJpaTest @TestPropertySource(properties="spring.jpa.hibernate.use-new-id-generator-mappings=false") public class DataJpaTestIntegrationTests {
  @Autowired private TestEntityManager entities;
  @Autowired private JdbcTemplate jdbcTemplate;
  @Autowired private ExampleRepository repository;
  @Autowired private DataSource dataSource;
  @Autowired private ApplicationContext applicationContext;
  @Test public void testEntityManager(){
    ExampleEntity entity=this.entities.persist(new ExampleEntity("spring","123"));
    this.entities.flush();
    Object id=this.entities.getId(entity);
    ExampleEntity found=this.entities.find(ExampleEntity.class,id);
    assertThat(found.getName()).isEqualTo("spring");
  }
  @Test public void testEntityManagerPersistAndGetId(){
    Long id=this.entities.persistAndGetId(new ExampleEntity("spring","123"),Long.class);
    assertThat(id).isNotNull();
    String reference=this.jdbcTemplate.queryForObject("SELECT REFERENCE FROM EXAMPLE_ENTITY WHERE ID = ?",new Object[]{id},String.class);
    assertThat(reference).isEqualTo("123");
  }
  @Test public void testRepository(){
    this.entities.persist(new ExampleEntity("spring","123"));
    this.entities.persist(new ExampleEntity("boot","124"));
    this.entities.flush();
    ExampleEntity found=this.repository.findByReference("124");
    assertThat(found.getName()).isEqualTo("boot");
  }
  @Test public void replacesDefinedDataSourceWithEmbeddedDefault() throws Exception {
    String product=this.dataSource.getConnection().getMetaData().getDatabaseProductName();
    assertThat(product).isEqualTo("H2");
  }
  @Test public void didNotInjectExampleComponent(){
    assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.applicationContext.getBean(ExampleComponent.class));
  }
  @Test public void flywayAutoConfigurationWasImported(){
    assertThat(this.applicationContext).has(importedAutoConfiguration(FlywayAutoConfiguration.class));
  }
  @Test public void liquibaseAutoConfigurationWasImported(){
    assertThat(this.applicationContext).has(importedAutoConfiguration(LiquibaseAutoConfiguration.class));
  }
}
