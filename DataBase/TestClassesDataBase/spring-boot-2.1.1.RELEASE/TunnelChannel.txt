private class TunnelChannel implements WritableByteChannel {
  private final WritableByteChannel incomingChannel;
  private final Closeable closeable;
  TunnelChannel(  WritableByteChannel incomingChannel,  Closeable closeable){
    this.incomingChannel=incomingChannel;
    this.closeable=closeable;
  }
  @Override public boolean isOpen(){
    return MockTunnelConnection.this.open;
  }
  @Override public void close() throws IOException {
    MockTunnelConnection.this.open=false;
    this.closeable.close();
  }
  @Override public int write(  ByteBuffer src) throws IOException {
    int remaining=src.remaining();
    ByteArrayOutputStream stream=new ByteArrayOutputStream();
    Channels.newChannel(stream).write(src);
    byte[] bytes=stream.toByteArray();
synchronized (MockTunnelConnection.this.written) {
      MockTunnelConnection.this.written.write(bytes);
    }
    byte[] reversed=new byte[bytes.length];
    for (int i=0; i < reversed.length; i++) {
      reversed[i]=bytes[bytes.length - 1 - i];
    }
    this.incomingChannel.write(ByteBuffer.wrap(reversed));
    return remaining;
  }
}
