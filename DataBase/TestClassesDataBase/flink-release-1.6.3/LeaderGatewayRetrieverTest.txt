/** 
 * Test cases for the  {@link LeaderGatewayRetriever}.
 */
public class LeaderGatewayRetrieverTest extends TestLogger {
  /** 
 * Tests that the gateway retrieval is retried in case of a failure.
 */
  @Test public void testGatewayRetrievalFailures() throws Exception {
    final String address="localhost";
    final UUID leaderId=UUID.randomUUID();
    RpcGateway rpcGateway=mock(RpcGateway.class);
    TestingLeaderGatewayRetriever leaderGatewayRetriever=new TestingLeaderGatewayRetriever(rpcGateway);
    SettableLeaderRetrievalService settableLeaderRetrievalService=new SettableLeaderRetrievalService();
    settableLeaderRetrievalService.start(leaderGatewayRetriever);
    CompletableFuture<RpcGateway> gatewayFuture=leaderGatewayRetriever.getFuture();
    settableLeaderRetrievalService.notifyListener(address,leaderId);
    try {
      gatewayFuture.get();
      fail("The first future should have been failed.");
    }
 catch (    ExecutionException ignored) {
    }
    assertFalse((leaderGatewayRetriever.getNow().isPresent()));
    assertEquals(rpcGateway,leaderGatewayRetriever.getNow().get());
  }
private static class TestingLeaderGatewayRetriever extends LeaderGatewayRetriever<RpcGateway> {
    private final RpcGateway rpcGateway;
    private int retrievalAttempt=0;
    private TestingLeaderGatewayRetriever(    RpcGateway rpcGateway){
      this.rpcGateway=rpcGateway;
    }
    @Override protected CompletableFuture<RpcGateway> createGateway(    CompletableFuture<Tuple2<String,UUID>> leaderFuture){
      CompletableFuture<RpcGateway> result;
      if (retrievalAttempt < 2) {
        result=FutureUtils.completedExceptionally(new FlinkException("Could not resolve the leader gateway."));
      }
 else {
        result=CompletableFuture.completedFuture(rpcGateway);
      }
      retrievalAttempt++;
      return result;
    }
  }
}
