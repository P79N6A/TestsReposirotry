private static class TestSourceContext implements SourceFunction.SourceContext<Integer> {
  private final InputFormatSourceFunction<Integer> reader;
  private final LifeCycleTestInputFormat format;
  private final boolean shouldCancel;
  private final int cancelAt;
  int splitIdx=0;
  private TestSourceContext(  InputFormatSourceFunction<Integer> reader,  LifeCycleTestInputFormat format,  boolean shouldCancel,  int cancelAt){
    this.reader=reader;
    this.format=format;
    this.shouldCancel=shouldCancel;
    this.cancelAt=cancelAt;
  }
  @Override public void collect(  Integer element){
    Assert.assertTrue(format.isSplitOpen);
    Assert.assertTrue(splitIdx == element);
    if (shouldCancel && splitIdx == cancelAt) {
      reader.cancel();
    }
 else {
      splitIdx++;
    }
  }
  @Override public void collectWithTimestamp(  Integer element,  long timestamp){
    throw new UnsupportedOperationException();
  }
  @Override public void emitWatermark(  Watermark mark){
    throw new UnsupportedOperationException();
  }
  @Override public void markAsTemporarilyIdle(){
    throw new UnsupportedOperationException();
  }
  @Override public Object getCheckpointLock(){
    return null;
  }
  @Override public void close(){
    throw new UnsupportedOperationException();
  }
  public int getSplitsSeen(){
    return this.splitIdx;
  }
}
