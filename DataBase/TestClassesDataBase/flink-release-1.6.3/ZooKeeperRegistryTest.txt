public class ZooKeeperRegistryTest extends TestLogger {
  private TestingServer testingServer;
  @Before public void before() throws Exception {
    testingServer=new TestingServer();
  }
  @After public void after() throws Exception {
    testingServer.stop();
    testingServer=null;
  }
  /** 
 * Tests that the function of ZookeeperRegistry, setJobRunning(), setJobFinished(), isJobRunning()
 */
  @Test public void testZooKeeperRegistry() throws Exception {
    Configuration configuration=new Configuration();
    configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM,testingServer.getConnectString());
    configuration.setString(HighAvailabilityOptions.HA_MODE,"zookeeper");
    final HighAvailabilityServices zkHaService=new ZooKeeperHaServices(ZooKeeperUtils.startCuratorFramework(configuration),Executors.directExecutor(),configuration,new VoidBlobStore());
    final RunningJobsRegistry zkRegistry=zkHaService.getRunningJobsRegistry();
    try {
      JobID jobID=JobID.generate();
      assertEquals(JobSchedulingStatus.PENDING,zkRegistry.getJobSchedulingStatus(jobID));
      zkRegistry.setJobRunning(jobID);
      assertEquals(JobSchedulingStatus.RUNNING,zkRegistry.getJobSchedulingStatus(jobID));
      zkRegistry.setJobFinished(jobID);
      assertEquals(JobSchedulingStatus.DONE,zkRegistry.getJobSchedulingStatus(jobID));
      zkRegistry.clearJob(jobID);
      assertEquals(JobSchedulingStatus.PENDING,zkRegistry.getJobSchedulingStatus(jobID));
    }
  finally {
      zkHaService.close();
    }
  }
}
