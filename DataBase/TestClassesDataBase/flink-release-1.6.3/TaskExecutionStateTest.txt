/** 
 * Correctness tests for hash/equals and serialization for the {@link org.apache.flink.runtime.taskmanager.TaskExecutionState}.
 */
public class TaskExecutionStateTest {
  @Test public void testEqualsHashCode(){
    try {
      final JobID jid=new JobID();
      final ExecutionAttemptID executionId=new ExecutionAttemptID();
      final ExecutionState state=ExecutionState.RUNNING;
      final Throwable error=new RuntimeException("some test error message");
      TaskExecutionState s1=new TaskExecutionState(jid,executionId,state,error);
      TaskExecutionState s2=new TaskExecutionState(jid,executionId,state,error);
      assertEquals(s1.hashCode(),s2.hashCode());
      assertEquals(s1,s2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testSerialization(){
    try {
      final JobID jid=new JobID();
      final ExecutionAttemptID executionId=new ExecutionAttemptID();
      final ExecutionState state=ExecutionState.DEPLOYING;
      final Throwable error=new IOException("fubar");
      TaskExecutionState original1=new TaskExecutionState(jid,executionId,state,error);
      TaskExecutionState original2=new TaskExecutionState(jid,executionId,state);
      TaskExecutionState javaSerCopy1=CommonTestUtils.createCopySerializable(original1);
      TaskExecutionState javaSerCopy2=CommonTestUtils.createCopySerializable(original2);
      assertEquals(original1,javaSerCopy1);
      assertEquals(javaSerCopy1,original1);
      assertEquals(original2,javaSerCopy2);
      assertEquals(javaSerCopy2,original2);
      assertEquals(original1.hashCode(),javaSerCopy1.hashCode());
      assertEquals(original2.hashCode(),javaSerCopy2.hashCode());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void handleNonSerializableException(){
    try {
      @SuppressWarnings({"ThrowableInstanceNeverThrown","serial"}) Exception hostile=new Exception(){
        @Override public String getMessage(){
          throw new RuntimeException("Cannot get Message");
        }
        @Override public void printStackTrace(        PrintStream s){
          throw new RuntimeException("Cannot print");
        }
        @Override public void printStackTrace(        PrintWriter s){
          throw new RuntimeException("Cannot print");
        }
      }
;
      new TaskExecutionState(new JobID(),new ExecutionAttemptID(),ExecutionState.FAILED,hostile);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
