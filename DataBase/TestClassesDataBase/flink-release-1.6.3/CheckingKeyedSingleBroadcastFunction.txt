/** 
 * A simple  {@link KeyedBroadcastProcessFunction} that verifies the contents of the broadcast state after recovery.
 */
private static class CheckingKeyedSingleBroadcastFunction extends KeyedBroadcastProcessFunction<Long,Tuple2<Long,Long>,Tuple2<Long,Long>,Tuple2<Long,Long>> {
  private static final long serialVersionUID=1333992081671604521L;
  private final Map<Long,String> expectedState;
  private MapStateDescriptor<Long,String> stateDesc;
  CheckingKeyedSingleBroadcastFunction(  Map<Long,String> state){
    this.expectedState=state;
  }
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    stateDesc=new MapStateDescriptor<>("broadcast-state-3",BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  }
  @Override public void processElement(  Tuple2<Long,Long> value,  ReadOnlyContext ctx,  Collector<Tuple2<Long,Long>> out) throws Exception {
    final Map<Long,String> actualState=new HashMap<>();
    for (    Map.Entry<Long,String> entry : ctx.getBroadcastState(stateDesc).immutableEntries()) {
      actualState.put(entry.getKey(),entry.getValue());
    }
    Assert.assertEquals(expectedState,actualState);
    out.collect(value);
  }
  @Override public void processBroadcastElement(  Tuple2<Long,Long> value,  Context ctx,  Collector<Tuple2<Long,Long>> out) throws Exception {
  }
}
