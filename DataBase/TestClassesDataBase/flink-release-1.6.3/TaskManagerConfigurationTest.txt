/** 
 * Validates that the TaskManager startup properly obeys the configuration values. NOTE: at least  {@link #testDefaultFsParameterLoading()} should not be run in parallel to othertests in the same JVM as it modifies a static (private) member of the  {@link FileSystem} classand verifies its content.
 */
@NotThreadSafe public class TaskManagerConfigurationTest {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Test public void testUsePreconfiguredNetworkInterface() throws Exception {
    final String TEST_HOST_NAME="testhostname";
    Configuration config=new Configuration();
    config.setString(TaskManagerOptions.HOST,TEST_HOST_NAME);
    config.setString(JobManagerOptions.ADDRESS,"localhost");
    config.setInteger(JobManagerOptions.PORT,7891);
    HighAvailabilityServices highAvailabilityServices=HighAvailabilityServicesUtils.createHighAvailabilityServices(config,Executors.directExecutor(),HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
    try {
      Tuple2<String,Iterator<Integer>> address=TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices);
      assertEquals(TEST_HOST_NAME,address._1());
    }
  finally {
      highAvailabilityServices.closeAndCleanupAllData();
    }
  }
  @Test public void testActorSystemPortConfig() throws Exception {
    Configuration config=new Configuration();
    config.setString(TaskManagerOptions.HOST,"localhost");
    config.setString(JobManagerOptions.ADDRESS,"localhost");
    config.setInteger(JobManagerOptions.PORT,7891);
    HighAvailabilityServices highAvailabilityServices=HighAvailabilityServicesUtils.createHighAvailabilityServices(config,Executors.directExecutor(),HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
    try {
      Iterator<Integer> portsIter=TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices)._2();
      assertTrue(portsIter.hasNext());
      assertEquals(0,(int)portsIter.next());
      final int testPort=22551;
      config.setString(TaskManagerOptions.RPC_PORT,String.valueOf(testPort));
      portsIter=TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices)._2();
      assertTrue(portsIter.hasNext());
      assertEquals(testPort,(int)portsIter.next());
      config.setString(TaskManagerOptions.RPC_PORT,"8000-8001");
      portsIter=TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices)._2();
      assertTrue(portsIter.hasNext());
      assertEquals(8000,(int)portsIter.next());
      assertEquals(8001,(int)portsIter.next());
      try {
        config.setString(TaskManagerOptions.RPC_PORT,"-1");
        TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices);
        fail("should fail with an exception");
      }
 catch (      IllegalConfigurationException e) {
      }
      try {
        config.setString(TaskManagerOptions.RPC_PORT,"100000");
        TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices);
        fail("should fail with an exception");
      }
 catch (      IllegalConfigurationException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
 finally {
      highAvailabilityServices.closeAndCleanupAllData();
    }
  }
  @Test public void testDefaultFsParameterLoading() throws Exception {
    try {
      final File tmpDir=temporaryFolder.newFolder();
      final File confFile=new File(tmpDir,GlobalConfiguration.FLINK_CONF_FILENAME);
      final URI defaultFS=new URI("otherFS",null,"localhost",1234,null,null,null);
      final PrintWriter pw1=new PrintWriter(confFile);
      pw1.println("fs.default-scheme: " + defaultFS);
      pw1.close();
      String[] args=new String[]{"--configDir:" + tmpDir};
      TaskManager.parseArgsAndLoadConfig(args);
      assertEquals(defaultFS,FileSystem.getDefaultFsUri());
    }
  finally {
      FileSystem.initialize(new Configuration());
    }
  }
  @Test public void testNetworkInterfaceSelection() throws Exception {
    ServerSocket server;
    String hostname="localhost";
    try {
      InetAddress localhostAddress=InetAddress.getByName(hostname);
      server=new ServerSocket(0,50,localhostAddress);
    }
 catch (    IOException e) {
      System.err.println("Skipping 'testNetworkInterfaceSelection' test.");
      return;
    }
    Configuration config=new Configuration();
    config.setString(JobManagerOptions.ADDRESS,hostname);
    config.setInteger(JobManagerOptions.PORT,server.getLocalPort());
    HighAvailabilityServices highAvailabilityServices=HighAvailabilityServicesUtils.createHighAvailabilityServices(config,Executors.directExecutor(),HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
    try {
      assertNotNull(TaskManager.selectNetworkInterfaceAndPortRange(config,highAvailabilityServices)._1());
    }
  finally {
      highAvailabilityServices.closeAndCleanupAllData();
      IOUtils.closeQuietly(server);
    }
  }
}
