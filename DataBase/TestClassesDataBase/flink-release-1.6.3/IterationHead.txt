class IterationHead implements Runnable {
  private final BlockingBackChannel backChannel;
  private final BlockingQueue<Integer> dataChannel;
  private final Random random;
  private final List<String> actionLog;
  IterationHead(  BlockingBackChannel backChannel,  BlockingQueue<Integer> dataChannel,  List<String> actionLog){
    this.backChannel=backChannel;
    this.dataChannel=dataChannel;
    this.actionLog=actionLog;
    random=new Random();
  }
  @Override public void run(){
    processInputAndSendMessageThroughDataChannel();
    for (int n=0; n < NUM_ITERATIONS; n++) {
      try {
        backChannel.getReadEndAfterSuperstepEnded();
        actionLog.add("head reads in iteration " + n);
        Thread.sleep(random.nextInt(100));
        if (n != NUM_ITERATIONS - 1) {
          processInputAndSendMessageThroughDataChannel();
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
  void processInputAndSendMessageThroughDataChannel(){
    actionLog.add("head sends data");
    dataChannel.offer(INPUT_COMPLETELY_PROCESSED_MESSAGE);
  }
}
