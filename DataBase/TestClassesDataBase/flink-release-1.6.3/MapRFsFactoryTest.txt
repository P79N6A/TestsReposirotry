/** 
 * Tests for the MapRFsFactory.
 */
public class MapRFsFactoryTest extends TestLogger {
  /** 
 * This test validates that the factory can be instantiated and configured even when MapR and Hadoop classes are missing from the classpath.
 */
  @Test public void testInstantiationWithoutMapRClasses() throws Exception {
    final String testClassName="org.apache.flink.runtime.fs.maprfs.MapRFreeTests";
    URLClassLoader parent=(URLClassLoader)getClass().getClassLoader();
    ClassLoader maprFreeClassLoader=new MapRFreeClassLoader(parent);
    Class<?> testClass=Class.forName(testClassName,false,maprFreeClassLoader);
    Method m=testClass.getDeclaredMethod("test");
    try {
      m.invoke(null);
    }
 catch (    InvocationTargetException e) {
      ExceptionUtils.rethrowException(e.getTargetException(),"exception in method");
    }
  }
  @Test public void testCreateFsWithAuthority() throws Exception {
    final URI uri=URI.create("maprfs://localhost:12345/");
    MapRFsFactory factory=new MapRFsFactory();
    try {
      factory.create(uri);
      fail("should have failed with an exception");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testCreateFsWithMissingAuthority() throws Exception {
    final URI uri=URI.create("maprfs:///my/path");
    MapRFsFactory factory=new MapRFsFactory();
    factory.configure(new Configuration());
    FileSystem fs=factory.create(uri);
    assertEquals("maprfs",fs.getUri().getScheme());
  }
private static final class MapRFreeClassLoader extends URLClassLoader {
    private final ClassLoader properParent;
    MapRFreeClassLoader(    URLClassLoader parent){
      super(parent.getURLs(),null);
      properParent=parent;
    }
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      if (name.startsWith("com.mapr") || name.startsWith("org.apache.hadoop")) {
        throw new ClassNotFoundException(name);
      }
 else       if (name.startsWith("org.apache.log4j")) {
        return properParent.loadClass(name);
      }
 else {
        return super.loadClass(name);
      }
    }
  }
}
