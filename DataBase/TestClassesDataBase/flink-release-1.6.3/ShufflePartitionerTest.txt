/** 
 * Tests for  {@link ShufflePartitioner}.
 */
public class ShufflePartitionerTest {
  private ShufflePartitioner<Tuple> shufflePartitioner;
  private StreamRecord<Tuple> streamRecord=new StreamRecord<Tuple>(null);
  private SerializationDelegate<StreamRecord<Tuple>> sd=new SerializationDelegate<StreamRecord<Tuple>>(null);
  @Before public void setPartitioner(){
    shufflePartitioner=new ShufflePartitioner<Tuple>();
  }
  @Test public void testSelectChannelsLength(){
    sd.setInstance(streamRecord);
    assertEquals(1,shufflePartitioner.selectChannels(sd,1).length);
    assertEquals(1,shufflePartitioner.selectChannels(sd,2).length);
    assertEquals(1,shufflePartitioner.selectChannels(sd,1024).length);
  }
  @Test public void testSelectChannelsInterval(){
    sd.setInstance(streamRecord);
    assertEquals(0,shufflePartitioner.selectChannels(sd,1)[0]);
    assertTrue(0 <= shufflePartitioner.selectChannels(sd,2)[0]);
    assertTrue(2 > shufflePartitioner.selectChannels(sd,2)[0]);
    assertTrue(0 <= shufflePartitioner.selectChannels(sd,1024)[0]);
    assertTrue(1024 > shufflePartitioner.selectChannels(sd,1024)[0]);
  }
}
