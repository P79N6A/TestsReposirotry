public class JsonGeneratorTest {
  @Test public void testGeneratorWithoutAnyAttachements(){
    try {
      JobVertex source1=new JobVertex("source 1");
      JobVertex source2=new JobVertex("source 2");
      source2.setInvokableClass(DummyInvokable.class);
      JobVertex source3=new JobVertex("source 3");
      JobVertex intermediate1=new JobVertex("intermediate 1");
      JobVertex intermediate2=new JobVertex("intermediate 2");
      JobVertex join1=new JobVertex("join 1");
      JobVertex join2=new JobVertex("join 2");
      JobVertex sink1=new JobVertex("sink 1");
      JobVertex sink2=new JobVertex("sink 2");
      intermediate1.connectNewDataSetAsInput(source1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
      intermediate2.connectNewDataSetAsInput(source2,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
      join1.connectNewDataSetAsInput(intermediate1,DistributionPattern.POINTWISE,ResultPartitionType.BLOCKING);
      join1.connectNewDataSetAsInput(intermediate2,DistributionPattern.ALL_TO_ALL,ResultPartitionType.BLOCKING);
      join2.connectNewDataSetAsInput(join1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
      join2.connectNewDataSetAsInput(source3,DistributionPattern.POINTWISE,ResultPartitionType.BLOCKING);
      sink1.connectNewDataSetAsInput(join2,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
      sink2.connectNewDataSetAsInput(join1,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
      JobGraph jg=new JobGraph("my job",source1,source2,source3,intermediate1,intermediate2,join1,join2,sink1,sink2);
      String plan=JsonPlanGenerator.generatePlan(jg);
      assertNotNull(plan);
      ObjectMapper m=new ObjectMapper();
      JsonNode rootNode=m.readTree(plan);
      assertEquals(new TextNode(jg.getJobID().toString()),rootNode.get("jid"));
      assertEquals(new TextNode(jg.getName()),rootNode.get("name"));
      assertTrue(rootNode.path("nodes").isArray());
      for (Iterator<JsonNode> iter=rootNode.path("nodes").elements(); iter.hasNext(); ) {
        JsonNode next=iter.next();
        JsonNode idNode=next.get("id");
        assertNotNull(idNode);
        assertTrue(idNode.isTextual());
        checkVertexExists(idNode.asText(),jg);
        String description=next.get("description").asText();
        assertTrue(description.startsWith("source") || description.startsWith("sink") || description.startsWith("intermediate")|| description.startsWith("join"));
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  private void checkVertexExists(  String vertexId,  JobGraph graph){
    JobVertexID id=JobVertexID.fromHexString(vertexId);
    for (    JobVertex vertex : graph.getVertices()) {
      if (vertex.getID().equals(id)) {
        return;
      }
    }
    fail("could not find vertex with id " + vertexId + " in JobGraph");
  }
}
