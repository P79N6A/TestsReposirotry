/** 
 * Tests for the behavior of the  {@link BarrierBuffer} with {@link BufferSpiller}.
 */
public class SpillingBarrierBufferTest extends BarrierBufferTestBase {
  private static IOManager ioManager;
  @BeforeClass public static void setup(){
    ioManager=new IOManagerAsync();
  }
  @AfterClass public static void shutdownIOManager(){
    ioManager.shutdown();
  }
  @After public void checkNoTempFilesRemain(){
    for (    File dir : ioManager.getSpillingDirectories()) {
      for (      String file : dir.list()) {
        if (file != null && !(file.equals(".") || file.equals(".."))) {
          fail("barrier buffer did not clean up temp files. remaining file: " + file);
        }
      }
    }
  }
  @Override public BarrierBuffer createBarrierHandler(  InputGate gate) throws IOException {
    return new BarrierBuffer(gate,new BufferSpiller(ioManager,PAGE_SIZE));
  }
  @Override public void validateAlignmentBuffered(  long actualBytesBuffered,  BufferOrEvent... sequence){
    long expectedBuffered=0;
    for (    BufferOrEvent boe : sequence) {
      if (boe.isBuffer()) {
        expectedBuffered+=BufferSpiller.HEADER_SIZE + boe.getBuffer().getSize();
      }
    }
    assertEquals("Wrong alignment buffered bytes",actualBytesBuffered,expectedBuffered);
  }
}
