/** 
 * Payload for usage in the test.
 */
protected static class TestElement implements HeapPriorityQueueElement, Keyed<Long>, PriorityComparable<TestElement> {
  private final long key;
  private final long priority;
  private int internalIndex;
  public TestElement(  long key,  long priority){
    this.key=key;
    this.priority=priority;
    this.internalIndex=NOT_CONTAINED;
  }
  @Override public int comparePriorityTo(  @Nonnull TestElement other){
    return Long.compare(priority,other.priority);
  }
  public Long getKey(){
    return key;
  }
  public long getPriority(){
    return priority;
  }
  @Override public int getInternalIndex(){
    return internalIndex;
  }
  @Override public void setInternalIndex(  int newIndex){
    internalIndex=newIndex;
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestElement that=(TestElement)o;
    return key == that.key && priority == that.priority;
  }
  @Override public int hashCode(){
    return Objects.hash(getKey(),getPriority());
  }
  public TestElement deepCopy(){
    return new TestElement(key,priority);
  }
  @Override public String toString(){
    return "TestElement{" + "key=" + key + ", priority="+ priority+ '}';
  }
}
