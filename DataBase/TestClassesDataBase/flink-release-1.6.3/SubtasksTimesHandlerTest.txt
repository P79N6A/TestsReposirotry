/** 
 * Tests for the SubtasksTimesHandler.
 */
public class SubtasksTimesHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new SubtasksTimesHandler.SubtasksTimesJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    AccessExecution originalAttempt=ArchivedJobGenerationUtils.getTestAttempt();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/vertices/"+ originalTask.getJobVertexId()+ "/subtasktimes",archive.getPath());
    compareSubtaskTimes(originalTask,originalAttempt,archive.getJson());
  }
  @Test public void testGetPaths(){
    SubtasksTimesHandler handler=new SubtasksTimesHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/vertices/:vertexid/subtasktimes",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    AccessExecution originalAttempt=ArchivedJobGenerationUtils.getTestAttempt();
    String json=SubtasksTimesHandler.createSubtaskTimesJson(originalTask);
    compareSubtaskTimes(originalTask,originalAttempt,json);
  }
  private static void compareSubtaskTimes(  AccessExecutionJobVertex originalTask,  AccessExecution originalAttempt,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    Assert.assertEquals(originalTask.getJobVertexId().toString(),result.get("id").asText());
    Assert.assertEquals(originalTask.getName(),result.get("name").asText());
    Assert.assertTrue(result.get("now").asLong() > 0L);
    ArrayNode subtasks=(ArrayNode)result.get("subtasks");
    JsonNode subtask=subtasks.get(0);
    Assert.assertEquals(0,subtask.get("subtask").asInt());
    Assert.assertEquals(originalAttempt.getAssignedResourceLocation().getHostname(),subtask.get("host").asText());
    Assert.assertEquals(originalAttempt.getStateTimestamp(originalAttempt.getState()) - originalAttempt.getStateTimestamp(ExecutionState.SCHEDULED),subtask.get("duration").asLong());
    JsonNode timestamps=subtask.get("timestamps");
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.CREATED),timestamps.get(ExecutionState.CREATED.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.SCHEDULED),timestamps.get(ExecutionState.SCHEDULED.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.DEPLOYING),timestamps.get(ExecutionState.DEPLOYING.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.RUNNING),timestamps.get(ExecutionState.RUNNING.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.FINISHED),timestamps.get(ExecutionState.FINISHED.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.CANCELING),timestamps.get(ExecutionState.CANCELING.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.CANCELED),timestamps.get(ExecutionState.CANCELED.name()).asLong());
    Assert.assertEquals(originalAttempt.getStateTimestamp(ExecutionState.FAILED),timestamps.get(ExecutionState.FAILED.name()).asLong());
  }
}
