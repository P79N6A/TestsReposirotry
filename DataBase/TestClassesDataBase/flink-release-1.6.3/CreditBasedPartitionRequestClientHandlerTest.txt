public class CreditBasedPartitionRequestClientHandlerTest {
  /** 
 * Tests a fix for FLINK-1627. <p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a receiver was cancelled during a certain time of decoding a message. The test reproduces the input, which lead to the infinite loop: when the handler gets a reference to the buffer provider of the receiving input channel, but the respective input channel is released (and the corresponding buffer provider destroyed), the handler did not notice this.
 * @see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>
 */
  @Test(timeout=60000) @SuppressWarnings("unchecked") public void testReleaseInputChannelDuringDecode() throws Exception {
    final BufferProvider bufferProvider=mock(BufferProvider.class);
    when(bufferProvider.requestBuffer()).thenReturn(null);
    when(bufferProvider.isDestroyed()).thenReturn(true);
    when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false);
    final RemoteInputChannel inputChannel=mock(RemoteInputChannel.class);
    when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID());
    when(inputChannel.getBufferProvider()).thenReturn(bufferProvider);
    final BufferResponse receivedBuffer=createBufferResponse(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE),0,inputChannel.getInputChannelId(),2);
    final CreditBasedPartitionRequestClientHandler client=new CreditBasedPartitionRequestClientHandler();
    client.addInputChannel(inputChannel);
    client.channelRead(mock(ChannelHandlerContext.class),receivedBuffer);
  }
  /** 
 * Tests a fix for FLINK-1761. <p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.
 */
  @Test public void testReceiveEmptyBuffer() throws Exception {
    final BufferProvider bufferProvider=mock(BufferProvider.class);
    when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0));
    final RemoteInputChannel inputChannel=mock(RemoteInputChannel.class);
    when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID());
    when(inputChannel.getBufferProvider()).thenReturn(bufferProvider);
    final Buffer emptyBuffer=TestBufferFactory.createBuffer(0);
    final int backlog=2;
    final BufferResponse receivedBuffer=createBufferResponse(emptyBuffer,0,inputChannel.getInputChannelId(),backlog);
    final CreditBasedPartitionRequestClientHandler client=new CreditBasedPartitionRequestClientHandler();
    client.addInputChannel(inputChannel);
    client.channelRead(mock(ChannelHandlerContext.class),receivedBuffer);
    verify(inputChannel,never()).onError(any(Throwable.class));
    verify(inputChannel,times(1)).onEmptyBuffer(0,backlog);
  }
  /** 
 * Verifies that  {@link RemoteInputChannel#onBuffer(Buffer,int,int)} is called when a{@link BufferResponse} is received.
 */
  @Test public void testReceiveBuffer() throws Exception {
    final NetworkBufferPool networkBufferPool=new NetworkBufferPool(10,32);
    final SingleInputGate inputGate=createSingleInputGate();
    final RemoteInputChannel inputChannel=createRemoteInputChannel(inputGate);
    try {
      final BufferPool bufferPool=networkBufferPool.createBufferPool(8,8);
      inputGate.setBufferPool(bufferPool);
      final int numExclusiveBuffers=2;
      inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
      final CreditBasedPartitionRequestClientHandler handler=new CreditBasedPartitionRequestClientHandler();
      handler.addInputChannel(inputChannel);
      final int backlog=2;
      final BufferResponse bufferResponse=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel.getInputChannelId(),backlog);
      handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse);
      assertEquals(1,inputChannel.getNumberOfQueuedBuffers());
      assertEquals(2,inputChannel.getSenderBacklog());
    }
  finally {
      inputGate.releaseAllResources();
      networkBufferPool.destroyAllBufferPools();
      networkBufferPool.destroy();
    }
  }
  /** 
 * Verifies that  {@link RemoteInputChannel#onError(Throwable)} is called when a{@link BufferResponse} is received but no available buffer in input channel.
 */
  @Test public void testThrowExceptionForNoAvailableBuffer() throws Exception {
    final SingleInputGate inputGate=createSingleInputGate();
    final RemoteInputChannel inputChannel=spy(createRemoteInputChannel(inputGate));
    final CreditBasedPartitionRequestClientHandler handler=new CreditBasedPartitionRequestClientHandler();
    handler.addInputChannel(inputChannel);
    assertEquals("There should be no buffers available in the channel.",0,inputChannel.getNumberOfAvailableBuffers());
    final BufferResponse bufferResponse=createBufferResponse(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE),0,inputChannel.getInputChannelId(),2);
    handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse);
    verify(inputChannel,times(1)).onError(any(IllegalStateException.class));
  }
  /** 
 * Verifies that  {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a{@link PartitionNotFoundException} is received.
 */
  @Test public void testReceivePartitionNotFoundException() throws Exception {
    final BufferProvider bufferProvider=mock(BufferProvider.class);
    when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0));
    final RemoteInputChannel inputChannel=mock(RemoteInputChannel.class);
    when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID());
    when(inputChannel.getBufferProvider()).thenReturn(bufferProvider);
    final ErrorResponse partitionNotFound=new ErrorResponse(new PartitionNotFoundException(new ResultPartitionID()),inputChannel.getInputChannelId());
    final CreditBasedPartitionRequestClientHandler client=new CreditBasedPartitionRequestClientHandler();
    client.addInputChannel(inputChannel);
    ChannelHandlerContext ctx=mock(ChannelHandlerContext.class);
    when(ctx.channel()).thenReturn(mock(Channel.class));
    client.channelActive(ctx);
    client.channelRead(ctx,partitionNotFound);
    verify(inputChannel,times(1)).onFailedPartitionRequest();
  }
  @Test public void testCancelBeforeActive() throws Exception {
    final RemoteInputChannel inputChannel=mock(RemoteInputChannel.class);
    when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID());
    final CreditBasedPartitionRequestClientHandler client=new CreditBasedPartitionRequestClientHandler();
    client.addInputChannel(inputChannel);
    client.cancelRequestFor(null);
    client.cancelRequestFor(inputChannel.getInputChannelId());
  }
  /** 
 * Verifies that  {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,and verifies the behaviour of credit notification by triggering channel's writability changed.
 */
  @Test public void testNotifyCreditAvailable() throws Exception {
    final CreditBasedPartitionRequestClientHandler handler=new CreditBasedPartitionRequestClientHandler();
    final EmbeddedChannel channel=new EmbeddedChannel(handler);
    final PartitionRequestClient client=new PartitionRequestClient(channel,handler,mock(ConnectionID.class),mock(PartitionRequestClientFactory.class));
    final NetworkBufferPool networkBufferPool=new NetworkBufferPool(10,32);
    final SingleInputGate inputGate=createSingleInputGate();
    final RemoteInputChannel inputChannel1=createRemoteInputChannel(inputGate,client);
    final RemoteInputChannel inputChannel2=createRemoteInputChannel(inputGate,client);
    try {
      final BufferPool bufferPool=networkBufferPool.createBufferPool(6,6);
      inputGate.setBufferPool(bufferPool);
      final int numExclusiveBuffers=2;
      inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
      inputChannel1.requestSubpartition(0);
      inputChannel2.requestSubpartition(0);
      assertTrue(channel.isWritable());
      Object readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(PartitionRequest.class));
      assertEquals(inputChannel1.getInputChannelId(),((PartitionRequest)readFromOutbound).receiverId);
      assertEquals(2,((PartitionRequest)readFromOutbound).credit);
      readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(PartitionRequest.class));
      assertEquals(inputChannel2.getInputChannelId(),((PartitionRequest)readFromOutbound).receiverId);
      assertEquals(2,((PartitionRequest)readFromOutbound).credit);
      final BufferResponse bufferResponse1=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel1.getInputChannelId(),1);
      final BufferResponse bufferResponse2=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel2.getInputChannelId(),1);
      handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse1);
      handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse2);
      assertEquals(2,inputChannel1.getUnannouncedCredit());
      assertEquals(2,inputChannel2.getUnannouncedCredit());
      channel.runPendingTasks();
      readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(AddCredit.class));
      assertEquals(inputChannel1.getInputChannelId(),((AddCredit)readFromOutbound).receiverId);
      assertEquals(2,((AddCredit)readFromOutbound).credit);
      readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(AddCredit.class));
      assertEquals(inputChannel2.getInputChannelId(),((AddCredit)readFromOutbound).receiverId);
      assertEquals(2,((AddCredit)readFromOutbound).credit);
      assertNull(channel.readOutbound());
      ByteBuf channelBlockingBuffer=blockChannel(channel);
      final BufferResponse bufferResponse3=createBufferResponse(TestBufferFactory.createBuffer(32),1,inputChannel1.getInputChannelId(),1);
      handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse3);
      assertEquals(1,inputChannel1.getUnannouncedCredit());
      assertEquals(0,inputChannel2.getUnannouncedCredit());
      channel.runPendingTasks();
      assertFalse(channel.isWritable());
      assertNull(channel.readOutbound());
      channel.flush();
      assertSame(channelBlockingBuffer,channel.readOutbound());
      assertTrue(channel.isWritable());
      readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(AddCredit.class));
      assertEquals(1,((AddCredit)readFromOutbound).credit);
      assertEquals(0,inputChannel1.getUnannouncedCredit());
      assertEquals(0,inputChannel2.getUnannouncedCredit());
      assertNull(channel.readOutbound());
    }
  finally {
      inputGate.releaseAllResources();
      networkBufferPool.destroyAllBufferPools();
      networkBufferPool.destroy();
    }
  }
  /** 
 * Verifies that  {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}message is not sent actually when this input channel is released.
 */
  @Test public void testNotifyCreditAvailableAfterReleased() throws Exception {
    final CreditBasedPartitionRequestClientHandler handler=new CreditBasedPartitionRequestClientHandler();
    final EmbeddedChannel channel=new EmbeddedChannel(handler);
    final PartitionRequestClient client=new PartitionRequestClient(channel,handler,mock(ConnectionID.class),mock(PartitionRequestClientFactory.class));
    final NetworkBufferPool networkBufferPool=new NetworkBufferPool(10,32);
    final SingleInputGate inputGate=createSingleInputGate();
    final RemoteInputChannel inputChannel=createRemoteInputChannel(inputGate,client);
    try {
      final BufferPool bufferPool=networkBufferPool.createBufferPool(6,6);
      inputGate.setBufferPool(bufferPool);
      final int numExclusiveBuffers=2;
      inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
      inputChannel.requestSubpartition(0);
      Object readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(PartitionRequest.class));
      assertEquals(2,((PartitionRequest)readFromOutbound).credit);
      final BufferResponse bufferResponse=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel.getInputChannelId(),1);
      handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse);
      assertEquals(2,inputChannel.getUnannouncedCredit());
      inputGate.releaseAllResources();
      readFromOutbound=channel.readOutbound();
      assertThat(readFromOutbound,instanceOf(CloseRequest.class));
      channel.runPendingTasks();
      assertNull(channel.readOutbound());
    }
  finally {
      inputGate.releaseAllResources();
      networkBufferPool.destroyAllBufferPools();
      networkBufferPool.destroy();
    }
  }
}
