/** 
 * Tests for the  {@link StreamingFileSink} with {@link BulkWriter}.
 */
public class BulkWriterTest extends TestLogger {
  @ClassRule public static final TemporaryFolder TEMP_FOLDER=new TemporaryFolder();
  @Test public void testCustomBulkWriter() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createTestSinkWithBulkEncoder(outDir,1,0,10L,new TestUtils.TupleToStringBucketer(),new TestBulkWriterFactory(),new DefaultBucketFactoryImpl<>())){
      testHarness.setup();
      testHarness.open();
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      TestUtils.checkLocalFs(outDir,1,0);
      testHarness.snapshot(1L,1L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",2),2L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",3),3L));
      testHarness.snapshot(2L,2L);
      TestUtils.checkLocalFs(outDir,2,0);
      Map<File,String> contents=TestUtils.getFileContentByPath(outDir);
      int fileCounter=0;
      for (      Map.Entry<File,String> fileContents : contents.entrySet()) {
        if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@2\ntest1@3\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(2L,fileCounter);
      testHarness.notifyOfCompletedCheckpoint(2L);
      TestUtils.checkLocalFs(outDir,0,2);
    }
   }
  /** 
 * A  {@link BulkWriter} used for the tests.
 */
private static class TestBulkWriter implements BulkWriter<Tuple2<String,Integer>> {
    private static final Charset CHARSET=StandardCharsets.UTF_8;
    private final FSDataOutputStream stream;
    TestBulkWriter(    final FSDataOutputStream stream){
      this.stream=Preconditions.checkNotNull(stream);
    }
    @Override public void addElement(    Tuple2<String,Integer> element) throws IOException {
      stream.write((element.f0 + '@' + element.f1+ '\n').getBytes(CHARSET));
    }
    @Override public void flush() throws IOException {
      stream.flush();
    }
    @Override public void finish() throws IOException {
      flush();
    }
  }
  /** 
 * A  {@link BulkWriter.Factory} used for the tests.
 */
private static class TestBulkWriterFactory implements BulkWriter.Factory<Tuple2<String,Integer>> {
    private static final long serialVersionUID=1L;
    @Override public BulkWriter<Tuple2<String,Integer>> create(    FSDataOutputStream out){
      return new TestBulkWriter(out);
    }
  }
}
