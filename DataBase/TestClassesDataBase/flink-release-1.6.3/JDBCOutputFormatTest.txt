/** 
 * Tests for the  {@link JDBCOutputFormat}.
 */
public class JDBCOutputFormatTest extends JDBCTestBase {
  private JDBCOutputFormat jdbcOutputFormat;
  @After public void tearDown() throws IOException {
    if (jdbcOutputFormat != null) {
      jdbcOutputFormat.close();
    }
    jdbcOutputFormat=null;
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidDriver() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername("org.apache.derby.jdbc.idontexist").setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,INPUT_TABLE)).finish();
    jdbcOutputFormat.open(0,1);
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidURL() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl("jdbc:der:iamanerror:mory:ebookshop").setQuery(String.format(INSERT_TEMPLATE,INPUT_TABLE)).finish();
    jdbcOutputFormat.open(0,1);
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidQuery() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery("iamnotsql").finish();
    jdbcOutputFormat.open(0,1);
  }
  @Test(expected=IllegalArgumentException.class) public void testIncompleteConfiguration() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setQuery(String.format(INSERT_TEMPLATE,INPUT_TABLE)).finish();
  }
  @Test(expected=RuntimeException.class) public void testIncompatibleTypes() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,INPUT_TABLE)).finish();
    jdbcOutputFormat.open(0,1);
    Row row=new Row(5);
    row.setField(0,4);
    row.setField(1,"hello");
    row.setField(2,"world");
    row.setField(3,0.99);
    row.setField(4,"imthewrongtype");
    jdbcOutputFormat.writeRecord(row);
    jdbcOutputFormat.close();
  }
  @Test(expected=RuntimeException.class) public void testExceptionOnInvalidType() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,OUTPUT_TABLE)).setSqlTypes(new int[]{Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.DOUBLE,Types.INTEGER}).finish();
    jdbcOutputFormat.open(0,1);
    JDBCTestBase.TestEntry entry=TEST_DATA[0];
    Row row=new Row(5);
    row.setField(0,entry.id);
    row.setField(1,entry.title);
    row.setField(2,entry.author);
    row.setField(3,0L);
    row.setField(4,entry.qty);
    jdbcOutputFormat.writeRecord(row);
  }
  @Test(expected=RuntimeException.class) public void testExceptionOnClose() throws IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,OUTPUT_TABLE)).setSqlTypes(new int[]{Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.DOUBLE,Types.INTEGER}).finish();
    jdbcOutputFormat.open(0,1);
    JDBCTestBase.TestEntry entry=TEST_DATA[0];
    Row row=new Row(5);
    row.setField(0,entry.id);
    row.setField(1,entry.title);
    row.setField(2,entry.author);
    row.setField(3,entry.price);
    row.setField(4,entry.qty);
    jdbcOutputFormat.writeRecord(row);
    jdbcOutputFormat.writeRecord(row);
    jdbcOutputFormat.close();
  }
  @Test public void testJDBCOutputFormat() throws IOException, SQLException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,OUTPUT_TABLE)).finish();
    jdbcOutputFormat.open(0,1);
    for (    JDBCTestBase.TestEntry entry : TEST_DATA) {
      jdbcOutputFormat.writeRecord(toRow(entry));
    }
    jdbcOutputFormat.close();
    try (Connection dbConn=DriverManager.getConnection(DB_URL);PreparedStatement statement=dbConn.prepareStatement(JDBCTestBase.SELECT_ALL_NEWBOOKS);ResultSet resultSet=statement.executeQuery()){
      int recordCount=0;
      while (resultSet.next()) {
        assertEquals(TEST_DATA[recordCount].id,resultSet.getObject("id"));
        assertEquals(TEST_DATA[recordCount].title,resultSet.getObject("title"));
        assertEquals(TEST_DATA[recordCount].author,resultSet.getObject("author"));
        assertEquals(TEST_DATA[recordCount].price,resultSet.getObject("price"));
        assertEquals(TEST_DATA[recordCount].qty,resultSet.getObject("qty"));
        recordCount++;
      }
      assertEquals(TEST_DATA.length,recordCount);
    }
   }
  @Test public void testFlush() throws SQLException, IOException {
    jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,OUTPUT_TABLE_2)).setBatchInterval(3).finish();
    try (Connection dbConn=DriverManager.getConnection(DB_URL);PreparedStatement statement=dbConn.prepareStatement(JDBCTestBase.SELECT_ALL_NEWBOOKS_2)){
      jdbcOutputFormat.open(0,1);
      for (int i=0; i < 2; ++i) {
        jdbcOutputFormat.writeRecord(toRow(TEST_DATA[i]));
      }
      try (ResultSet resultSet=statement.executeQuery()){
        assertFalse(resultSet.next());
      }
       jdbcOutputFormat.writeRecord(toRow(TEST_DATA[2]));
      try (ResultSet resultSet=statement.executeQuery()){
        int recordCount=0;
        while (resultSet.next()) {
          assertEquals(TEST_DATA[recordCount].id,resultSet.getObject("id"));
          assertEquals(TEST_DATA[recordCount].title,resultSet.getObject("title"));
          assertEquals(TEST_DATA[recordCount].author,resultSet.getObject("author"));
          assertEquals(TEST_DATA[recordCount].price,resultSet.getObject("price"));
          assertEquals(TEST_DATA[recordCount].qty,resultSet.getObject("qty"));
          recordCount++;
        }
        assertEquals(3,recordCount);
      }
     }
  finally {
      jdbcOutputFormat.close();
    }
  }
  @After public void clearOutputTable() throws Exception {
    Class.forName(DRIVER_CLASS);
    try (Connection conn=DriverManager.getConnection(DB_URL);Statement stat=conn.createStatement()){
      stat.execute("DELETE FROM " + OUTPUT_TABLE);
      stat.close();
      conn.close();
    }
   }
  private static Row toRow(  TestEntry entry){
    Row row=new Row(5);
    row.setField(0,entry.id);
    row.setField(1,entry.title);
    row.setField(2,entry.author);
    row.setField(3,entry.price);
    row.setField(4,entry.qty);
    return row;
  }
}
