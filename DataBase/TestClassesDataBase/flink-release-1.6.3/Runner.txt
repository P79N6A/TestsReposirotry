/** 
 * Utility class to run yarn jobs.
 */
protected static class Runner extends Thread {
  private final String[] args;
  private final org.apache.flink.configuration.Configuration configuration;
  private final String configurationDirectory;
  private final int expectedReturnValue;
  private final PrintStream stdinPrintStream;
  private RunTypes type;
  private FlinkYarnSessionCli yCli;
  private Throwable runnerError;
  public Runner(  String[] args,  org.apache.flink.configuration.Configuration configuration,  String configurationDirectory,  RunTypes type,  int expectedReturnValue,  PrintStream stdinPrintStream){
    this.args=args;
    this.configuration=Preconditions.checkNotNull(configuration);
    this.configurationDirectory=Preconditions.checkNotNull(configurationDirectory);
    this.type=type;
    this.expectedReturnValue=expectedReturnValue;
    this.stdinPrintStream=Preconditions.checkNotNull(stdinPrintStream);
  }
  @Override public void run(){
    try {
      int returnValue;
switch (type) {
case YARN_SESSION:
        yCli=new FlinkYarnSessionCli(configuration,configurationDirectory,"","",true);
      returnValue=yCli.run(args);
    break;
case CLI_FRONTEND:
  try {
    CliFrontend cli=new CliFrontend(configuration,CliFrontend.loadCustomCommandLines(configuration,configurationDirectory));
    returnValue=cli.parseParameters(args);
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to execute the following args with CliFrontend: " + Arrays.toString(args),e);
  }
break;
default :
throw new RuntimeException("Unknown type " + type);
}
if (returnValue != this.expectedReturnValue) {
Assert.fail("The YARN session returned with unexpected value=" + returnValue + " expected="+ expectedReturnValue);
}
}
 catch (Throwable t) {
LOG.info("Runner stopped with exception",t);
this.runnerError=t;
}
}
/** 
 * Stops the Yarn session. 
 */
public void sendStop(){
stdinPrintStream.println("stop");
}
public Throwable getRunnerError(){
return runnerError;
}
}
