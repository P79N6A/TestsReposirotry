private static class CheckingRestoringFlatMapWithKeyedState extends RichFlatMapFunction<Tuple2<Long,Long>,Tuple2<Long,Long>> {
  private static final long serialVersionUID=1L;
  public static final String SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR=CheckingRestoringFlatMapWithKeyedState.class + "_RESTORE_CHECK";
  private transient Tuple2<String,Long> restoredState;
  private final ValueStateDescriptor<Long> stateDescriptor=new ValueStateDescriptor<Long>("state-name",LongSerializer.INSTANCE);
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    getRuntimeContext().addAccumulator(SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR,new IntCounter());
  }
  @Override public void flatMap(  Tuple2<Long,Long> value,  Collector<Tuple2<Long,Long>> out) throws Exception {
    out.collect(value);
    ValueState<Long> state=getRuntimeContext().getState(stateDescriptor);
    if (state == null) {
      throw new RuntimeException("Missing key value state for " + value);
    }
    assertEquals(value.f1,state.value());
    getRuntimeContext().getAccumulator(SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR).add(1);
  }
}
