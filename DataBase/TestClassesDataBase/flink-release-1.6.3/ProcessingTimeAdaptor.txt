private static class ProcessingTimeAdaptor implements TimeDomainAdaptor {
  @Override public void setIsEventTime(  WindowAssigner<?,?> mockAssigner){
    when(mockAssigner.isEventTime()).thenReturn(false);
  }
  public void advanceTime(  OneInputStreamOperatorTestHarness testHarness,  long timestamp) throws Exception {
    testHarness.setProcessingTime(timestamp);
  }
  @Override public void registerTimer(  Trigger.TriggerContext ctx,  long timestamp){
    ctx.registerProcessingTimeTimer(timestamp);
  }
  @Override public void deleteTimer(  Trigger.TriggerContext ctx,  long timestamp){
    ctx.deleteProcessingTimeTimer(timestamp);
  }
  @Override public int numTimers(  AbstractStreamOperatorTestHarness testHarness){
    return testHarness.numProcessingTimeTimers();
  }
  @Override public int numTimersOtherDomain(  AbstractStreamOperatorTestHarness testHarness){
    return testHarness.numEventTimeTimers();
  }
  @Override public void shouldRegisterTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception {
    shouldRegisterProcessingTimeTimerOnElement(mockTrigger,timestamp);
  }
  @Override public void shouldDeleteTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception {
    shouldDeleteProcessingTimeTimerOnElement(mockTrigger,timestamp);
  }
  @Override public void shouldContinueOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldContinueOnProcessingTime(mockTrigger);
  }
  @Override public void shouldFireOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldFireOnProcessingTime(mockTrigger);
  }
  @Override public void shouldFireAndPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldFireAndPurgeOnProcessingTime(mockTrigger);
  }
  @Override public void shouldPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldPurgeOnProcessingTime(mockTrigger);
  }
  @Override public void verifyTriggerCallback(  Trigger<?,TimeWindow> mockTrigger,  VerificationMode verificationMode,  Long time,  TimeWindow window) throws Exception {
    if (time == null && window == null) {
      verify(mockTrigger,verificationMode).onProcessingTime(anyLong(),anyTimeWindow(),anyTriggerContext());
    }
 else     if (time == null) {
      verify(mockTrigger,verificationMode).onProcessingTime(anyLong(),eq(window),anyTriggerContext());
    }
 else     if (window == null) {
      verify(mockTrigger,verificationMode).onProcessingTime(eq(time),anyTimeWindow(),anyTriggerContext());
    }
 else {
      verify(mockTrigger,verificationMode).onProcessingTime(eq(time),eq(window),anyTriggerContext());
    }
  }
  @Override public void verifyCorrectTime(  OneInputStreamOperatorTestHarness testHarness,  InternalWindowFunction.InternalWindowContext context){
    assertEquals(testHarness.getProcessingTime(),context.currentProcessingTime());
  }
}
