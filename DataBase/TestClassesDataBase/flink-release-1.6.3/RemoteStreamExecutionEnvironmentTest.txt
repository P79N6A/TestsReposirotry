/** 
 * Tests for the  {@link RemoteStreamEnvironment}.
 */
public class RemoteStreamExecutionEnvironmentTest extends TestLogger {
  private static MiniCluster flink;
  @BeforeClass public static void setUp() throws Exception {
    final Configuration config=new Configuration();
    config.setInteger(RestOptions.PORT,0);
    final MiniClusterConfiguration miniClusterConfiguration=new MiniClusterConfiguration.Builder().setConfiguration(config).setNumTaskManagers(1).setNumSlotsPerTaskManager(1).build();
    flink=new MiniCluster(miniClusterConfiguration);
    flink.start();
  }
  @AfterClass public static void tearDown() throws Exception {
    if (flink != null) {
      flink.close();
    }
  }
  /** 
 * Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.
 */
  @Test public void testPortForwarding() throws Exception {
    final Configuration clientConfiguration=new Configuration();
    clientConfiguration.setInteger(RestOptions.RETRY_MAX_ATTEMPTS,0);
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment(flink.getRestAddress().getHost(),flink.getRestAddress().getPort(),clientConfiguration);
    final DataStream<Integer> resultStream=env.fromElements(1).map(x -> x * 2);
    final Iterator<Integer> result=DataStreamUtils.collect(resultStream);
    Assert.assertTrue(result.hasNext());
    Assert.assertEquals(2,result.next().intValue());
    Assert.assertFalse(result.hasNext());
  }
}
