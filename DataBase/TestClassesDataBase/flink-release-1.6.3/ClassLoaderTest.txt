/** 
 * Tests for classloading and class loader utilities.
 */
public class ClassLoaderTest extends TestLogger {
  @ClassRule public static TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void testMessageDecodingWithUnavailableClass() throws Exception {
    final ClassLoader systemClassLoader=getClass().getClassLoader();
    final String className="UserClass";
    final URLClassLoader userClassLoader=ClassLoaderUtils.compileAndLoadJava(temporaryFolder.newFolder(),className + ".java","import java.io.Serializable;\n" + "public class " + className + " implements Serializable {}");
    RemoteRpcInvocation method=new RemoteRpcInvocation("test",new Class<?>[]{int.class,Class.forName(className,false,userClassLoader)},new Object[]{1,Class.forName(className,false,userClassLoader).newInstance()});
    SerializedValue<RemoteRpcInvocation> serializedMethod=new SerializedValue<>(method);
    expectedException.expect(ClassNotFoundException.class);
    expectedException.expect(allOf(isA(ClassNotFoundException.class),hasProperty("suppressed",hasItemInArray(allOf(isA(ClassNotFoundException.class),hasProperty("message",containsString("Could not deserialize 1th parameter type of method test(int, ...).")))))));
    RemoteRpcInvocation deserializedMethod=serializedMethod.deserializeValue(systemClassLoader);
    deserializedMethod.getMethodName();
    userClassLoader.close();
  }
  @Test public void testParentFirstClassLoading() throws Exception {
    final ClassLoader parentClassLoader=getClass().getClassLoader();
    final URL childCodePath=getClass().getProtectionDomain().getCodeSource().getLocation();
    final URLClassLoader childClassLoader1=FlinkUserCodeClassLoaders.parentFirst(new URL[]{childCodePath},parentClassLoader);
    final URLClassLoader childClassLoader2=FlinkUserCodeClassLoaders.parentFirst(new URL[]{childCodePath},parentClassLoader);
    final String className=ClassLoaderTest.class.getName();
    final Class<?> clazz1=Class.forName(className,false,parentClassLoader);
    final Class<?> clazz2=Class.forName(className,false,childClassLoader1);
    final Class<?> clazz3=Class.forName(className,false,childClassLoader2);
    assertEquals(clazz1,clazz2);
    assertEquals(clazz1,clazz3);
    childClassLoader1.close();
    childClassLoader2.close();
  }
  @Test public void testChildFirstClassLoading() throws Exception {
    final ClassLoader parentClassLoader=getClass().getClassLoader();
    final URL childCodePath=getClass().getProtectionDomain().getCodeSource().getLocation();
    final URLClassLoader childClassLoader1=FlinkUserCodeClassLoaders.childFirst(new URL[]{childCodePath},parentClassLoader,new String[0]);
    final URLClassLoader childClassLoader2=FlinkUserCodeClassLoaders.childFirst(new URL[]{childCodePath},parentClassLoader,new String[0]);
    final String className=ClassLoaderTest.class.getName();
    final Class<?> clazz1=Class.forName(className,false,parentClassLoader);
    final Class<?> clazz2=Class.forName(className,false,childClassLoader1);
    final Class<?> clazz3=Class.forName(className,false,childClassLoader2);
    assertNotEquals(clazz1,clazz2);
    assertNotEquals(clazz1,clazz3);
    assertNotEquals(clazz2,clazz3);
    childClassLoader1.close();
    childClassLoader2.close();
  }
  @Test public void testRepeatedChildFirstClassLoading() throws Exception {
    final ClassLoader parentClassLoader=getClass().getClassLoader();
    final URL childCodePath=getClass().getProtectionDomain().getCodeSource().getLocation();
    final URLClassLoader childClassLoader=FlinkUserCodeClassLoaders.childFirst(new URL[]{childCodePath},parentClassLoader,new String[0]);
    final String className=ClassLoaderTest.class.getName();
    final Class<?> clazz1=Class.forName(className,false,parentClassLoader);
    final Class<?> clazz2=Class.forName(className,false,childClassLoader);
    final Class<?> clazz3=Class.forName(className,false,childClassLoader);
    final Class<?> clazz4=Class.forName(className,false,childClassLoader);
    assertNotEquals(clazz1,clazz2);
    assertEquals(clazz2,clazz3);
    assertEquals(clazz2,clazz4);
    childClassLoader.close();
  }
  @Test public void testRepeatedParentFirstPatternClass() throws Exception {
    final String className=ClassLoaderTest.class.getName();
    final String parentFirstPattern=className.substring(0,className.lastIndexOf('.'));
    final ClassLoader parentClassLoader=getClass().getClassLoader();
    final URL childCodePath=getClass().getProtectionDomain().getCodeSource().getLocation();
    final URLClassLoader childClassLoader=FlinkUserCodeClassLoaders.childFirst(new URL[]{childCodePath},parentClassLoader,new String[]{parentFirstPattern});
    final Class<?> clazz1=Class.forName(className,false,parentClassLoader);
    final Class<?> clazz2=Class.forName(className,false,childClassLoader);
    final Class<?> clazz3=Class.forName(className,false,childClassLoader);
    final Class<?> clazz4=Class.forName(className,false,childClassLoader);
    assertEquals(clazz1,clazz2);
    assertEquals(clazz1,clazz3);
    assertEquals(clazz1,clazz4);
    childClassLoader.close();
  }
}
