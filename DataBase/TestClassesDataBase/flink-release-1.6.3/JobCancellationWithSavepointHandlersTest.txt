/** 
 * Tests for the JobCancellationWithSavepointHandler.
 */
public class JobCancellationWithSavepointHandlersTest extends TestLogger {
  private static final Executor executor=Executors.directExecutor();
  @Test public void testGetPaths(){
    JobCancellationWithSavepointHandlers handler=new JobCancellationWithSavepointHandlers(mock(ExecutionGraphCache.class),executor);
    JobCancellationWithSavepointHandlers.TriggerHandler triggerHandler=handler.getTriggerHandler();
    String[] triggerPaths=triggerHandler.getPaths();
    Assert.assertEquals(2,triggerPaths.length);
    List<String> triggerPathsList=Arrays.asList(triggerPaths);
    Assert.assertTrue(triggerPathsList.contains("/jobs/:jobid/cancel-with-savepoint"));
    Assert.assertTrue(triggerPathsList.contains("/jobs/:jobid/cancel-with-savepoint/target-directory/:targetDirectory"));
    JobCancellationWithSavepointHandlers.InProgressHandler progressHandler=handler.getInProgressHandler();
    String[] progressPaths=progressHandler.getPaths();
    Assert.assertEquals(1,progressPaths.length);
    Assert.assertEquals("/jobs/:jobid/cancel-with-savepoint/in-progress/:requestId",progressPaths[0]);
  }
  /** 
 * Tests that the cancellation ask timeout respects the checkpoint timeout. Otherwise, AskTimeoutExceptions are bound to happen for large state.
 */
  @Test public void testAskTimeoutEqualsCheckpointTimeout() throws Exception {
    long timeout=128288238L;
    JobID jobId=new JobID();
    ExecutionGraphCache holder=mock(ExecutionGraphCache.class);
    ExecutionGraph graph=mock(ExecutionGraph.class);
    when(holder.getExecutionGraph(eq(jobId),any(JobManagerGateway.class))).thenReturn(CompletableFuture.completedFuture(graph));
    when(graph.getCheckpointCoordinatorConfiguration()).thenReturn(new CheckpointCoordinatorConfiguration(1L,timeout,1L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true));
    JobCancellationWithSavepointHandlers handlers=new JobCancellationWithSavepointHandlers(holder,executor);
    JobCancellationWithSavepointHandlers.TriggerHandler handler=handlers.getTriggerHandler();
    Map<String,String> params=new HashMap<>();
    params.put("jobid",jobId.toString());
    params.put("targetDirectory","placeholder");
    JobManagerGateway jobManager=mock(JobManagerGateway.class);
    when(jobManager.cancelJobWithSavepoint(eq(jobId),anyString(),any(Time.class))).thenReturn(CompletableFuture.completedFuture("foobar"));
    handler.handleRequest(params,Collections.emptyMap(),jobManager);
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),anyString(),any(Time.class));
  }
  /** 
 * Tests that the savepoint directory configuration is respected.
 */
  @Test public void testSavepointDirectoryConfiguration() throws Exception {
    long timeout=128288238L;
    JobID jobId=new JobID();
    ExecutionGraphCache holder=mock(ExecutionGraphCache.class);
    ExecutionGraph graph=mock(ExecutionGraph.class);
    when(holder.getExecutionGraph(eq(jobId),any(JobManagerGateway.class))).thenReturn(CompletableFuture.completedFuture(graph));
    when(graph.getCheckpointCoordinatorConfiguration()).thenReturn(new CheckpointCoordinatorConfiguration(1L,timeout,1L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true));
    JobCancellationWithSavepointHandlers handlers=new JobCancellationWithSavepointHandlers(holder,executor,"the-default-directory");
    JobCancellationWithSavepointHandlers.TriggerHandler handler=handlers.getTriggerHandler();
    Map<String,String> params=new HashMap<>();
    params.put("jobid",jobId.toString());
    JobManagerGateway jobManager=mock(JobManagerGateway.class);
    when(jobManager.cancelJobWithSavepoint(eq(jobId),anyString(),any(Time.class))).thenReturn(CompletableFuture.completedFuture("foobar"));
    params.put("targetDirectory","custom-directory");
    handler.handleRequest(params,Collections.<String,String>emptyMap(),jobManager);
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
    params.remove("targetDirectory");
    handler.handleRequest(params,Collections.<String,String>emptyMap(),jobManager);
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("the-default-directory"),any(Time.class));
    handlers=new JobCancellationWithSavepointHandlers(holder,executor,null);
    handler=handlers.getTriggerHandler();
    try {
      handler.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
      fail("Did not throw expected test Exception");
    }
 catch (    Exception e) {
      IllegalStateException cause=(IllegalStateException)e.getCause();
      assertEquals(true,cause.getMessage().contains(CheckpointingOptions.SAVEPOINT_DIRECTORY.key()));
    }
  }
  /** 
 * Tests triggering a new request and monitoring it.
 */
  @Test public void testTriggerNewRequest() throws Exception {
    JobID jobId=new JobID();
    ExecutionGraphCache holder=mock(ExecutionGraphCache.class);
    ExecutionGraph graph=mock(ExecutionGraph.class);
    when(holder.getExecutionGraph(eq(jobId),any(JobManagerGateway.class))).thenReturn(CompletableFuture.completedFuture(graph));
    when(graph.getCheckpointCoordinatorConfiguration()).thenReturn(new CheckpointCoordinatorConfiguration(1L,1L,1L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true));
    JobCancellationWithSavepointHandlers handlers=new JobCancellationWithSavepointHandlers(holder,executor);
    JobCancellationWithSavepointHandlers.TriggerHandler trigger=handlers.getTriggerHandler();
    JobCancellationWithSavepointHandlers.InProgressHandler progress=handlers.getInProgressHandler();
    Map<String,String> params=new HashMap<>();
    params.put("jobid",jobId.toString());
    params.put("targetDirectory","custom-directory");
    JobManagerGateway jobManager=mock(JobManagerGateway.class);
    CompletableFuture<String> successfulCancelWithSavepoint=new CompletableFuture<>();
    when(jobManager.cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class))).thenReturn(successfulCancelWithSavepoint);
    FullHttpResponse response=trigger.handleRequest(params,Collections.emptyMap(),jobManager).get();
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
    String location=String.format("/jobs/%s/cancel-with-savepoint/in-progress/1",jobId);
    assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    assertEquals(location,response.headers().get(HttpHeaders.Names.LOCATION));
    String json=response.content().toString(Charset.forName("UTF-8"));
    JsonNode root=new ObjectMapper().readTree(json);
    assertEquals("accepted",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    assertEquals(location,root.get("location").asText());
    response=trigger.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    assertEquals(location,response.headers().get(HttpHeaders.Names.LOCATION));
    json=response.content().toString(Charset.forName("UTF-8"));
    root=new ObjectMapper().readTree(json);
    assertEquals("accepted",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    assertEquals(location,root.get("location").asText());
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
    params.put("requestId","1");
    response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    json=response.content().toString(Charset.forName("UTF-8"));
    root=new ObjectMapper().readTree(json);
    assertEquals("in-progress",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    successfulCancelWithSavepoint.complete("_path-savepoint_");
    response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.CREATED,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    json=response.content().toString(Charset.forName("UTF-8"));
    root=new ObjectMapper().readTree(json);
    assertEquals("success",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    assertEquals("_path-savepoint_",root.get("savepoint-path").asText());
    response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.CREATED,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    json=response.content().toString(Charset.forName("UTF-8"));
    root=new ObjectMapper().readTree(json);
    assertEquals("success",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    assertEquals("_path-savepoint_",root.get("savepoint-path").asText());
    params.put("requestId","9929");
    response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.BAD_REQUEST,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    json=response.content().toString(Charset.forName("UTF-8"));
    root=new ObjectMapper().readTree(json);
    assertEquals("failed",root.get("status").asText());
    assertEquals("9929",root.get("request-id").asText());
    assertEquals("Unknown job/request ID",root.get("cause").asText());
  }
  /** 
 * Tests response when a request fails.
 */
  @Test public void testFailedCancellation() throws Exception {
    JobID jobId=new JobID();
    ExecutionGraphCache holder=mock(ExecutionGraphCache.class);
    ExecutionGraph graph=mock(ExecutionGraph.class);
    when(holder.getExecutionGraph(eq(jobId),any(JobManagerGateway.class))).thenReturn(CompletableFuture.completedFuture(graph));
    when(graph.getCheckpointCoordinatorConfiguration()).thenReturn(new CheckpointCoordinatorConfiguration(1L,1L,1L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true));
    JobCancellationWithSavepointHandlers handlers=new JobCancellationWithSavepointHandlers(holder,executor);
    JobCancellationWithSavepointHandlers.TriggerHandler trigger=handlers.getTriggerHandler();
    JobCancellationWithSavepointHandlers.InProgressHandler progress=handlers.getInProgressHandler();
    Map<String,String> params=new HashMap<>();
    params.put("jobid",jobId.toString());
    params.put("targetDirectory","custom-directory");
    JobManagerGateway jobManager=mock(JobManagerGateway.class);
    CompletableFuture<String> unsuccessfulCancelWithSavepoint=FutureUtils.completedExceptionally(new Exception("Test Exception"));
    when(jobManager.cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class))).thenReturn(unsuccessfulCancelWithSavepoint);
    trigger.handleRequest(params,Collections.<String,String>emptyMap(),jobManager);
    verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
    params.put("requestId","1");
    FullHttpResponse response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
    assertEquals(HttpResponseStatus.INTERNAL_SERVER_ERROR,response.getStatus());
    assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
    assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
    String json=response.content().toString(Charset.forName("UTF-8"));
    JsonNode root=new ObjectMapper().readTree(json);
    assertEquals("failed",root.get("status").asText());
    assertEquals("1",root.get("request-id").asText());
    assertEquals("Test Exception",root.get("cause").asText());
  }
}
