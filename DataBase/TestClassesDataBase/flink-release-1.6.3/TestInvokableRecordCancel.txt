public static final class TestInvokableRecordCancel extends AbstractInvokable {
  private static final Object lock=new Object();
  private static CompletableFuture<Boolean> gotCanceledFuture=new CompletableFuture<>();
  public TestInvokableRecordCancel(  Environment environment){
    super(environment);
  }
  @Override public void invoke() throws Exception {
    final Object o=new Object();
    RecordWriter<IntValue> recordWriter=new RecordWriter<>(getEnvironment().getWriter(0));
    for (int i=0; i < 1024; i++) {
      recordWriter.emit(new IntValue(42));
    }
synchronized (o) {
      while (true) {
        o.wait();
      }
    }
  }
  @Override public void cancel(){
synchronized (lock) {
      gotCanceledFuture.complete(true);
    }
  }
  public static void resetGotCanceledFuture(){
synchronized (lock) {
      gotCanceledFuture=new CompletableFuture<>();
    }
  }
  public static CompletableFuture<Boolean> gotCanceled(){
synchronized (lock) {
      return gotCanceledFuture;
    }
  }
}
