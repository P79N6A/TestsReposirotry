public static class ComplexNestedObject1 implements Comparable<ComplexNestedObject1> {
  private double doubleValue;
  private List<String> stringList;
  public ComplexNestedObject1(){
  }
  public ComplexNestedObject1(  double value,  String... listElements){
    this.doubleValue=value;
    this.stringList=new ArrayList<String>();
    for (    String str : listElements) {
      this.stringList.add(str);
    }
  }
  @Override public boolean equals(  Object obj){
    if (obj.getClass() == ComplexNestedObject1.class) {
      ComplexNestedObject1 other=(ComplexNestedObject1)obj;
      return other.doubleValue == this.doubleValue && this.stringList.equals(other.stringList);
    }
 else {
      return false;
    }
  }
  @Override public int compareTo(  ComplexNestedObject1 o){
    int cmp=(this.doubleValue < o.doubleValue ? -1 : (this.doubleValue == o.doubleValue ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    int size=this.stringList.size();
    int otherSize=o.stringList.size();
    cmp=(size < otherSize ? -1 : (size == otherSize ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    for (int i=0; i < size; i++) {
      cmp=this.stringList.get(i).compareTo(o.stringList.get(i));
      if (cmp != 0) {
        return cmp;
      }
    }
    return 0;
  }
}
