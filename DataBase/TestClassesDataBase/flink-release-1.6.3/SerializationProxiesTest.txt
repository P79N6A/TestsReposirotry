public class SerializationProxiesTest {
  @Test public void testKeyedBackendSerializationProxyRoundtrip() throws Exception {
    TypeSerializer<?> keySerializer=IntSerializer.INSTANCE;
    TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    List<StateMetaInfoSnapshot> stateMetaInfoList=new ArrayList<>();
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"a",namespaceSerializer,stateSerializer).snapshot());
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"b",namespaceSerializer,stateSerializer).snapshot());
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"c",namespaceSerializer,stateSerializer).snapshot());
    KeyedBackendSerializationProxy<?> serializationProxy=new KeyedBackendSerializationProxy<>(keySerializer,stateMetaInfoList,true);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      serializationProxy.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     serializationProxy=new KeyedBackendSerializationProxy<>(Thread.currentThread().getContextClassLoader(),true);
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      serializationProxy.read(new DataInputViewStreamWrapper(in));
    }
     Assert.assertTrue(serializationProxy.isUsingKeyGroupCompression());
    Assert.assertEquals(keySerializer,serializationProxy.getKeySerializer());
    Assert.assertEquals(keySerializer.snapshotConfiguration(),serializationProxy.getKeySerializerConfigSnapshot());
    assertEqualStateMetaInfoSnapshotsLists(stateMetaInfoList,serializationProxy.getStateMetaInfoSnapshots());
  }
  @Test public void testKeyedBackendSerializationProxyRoundtripWithSerializerSerializationFailures() throws Exception {
    TypeSerializer<?> keySerializer=IntSerializer.INSTANCE;
    TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    List<StateMetaInfoSnapshot> stateMetaInfoList=new ArrayList<>();
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"a",namespaceSerializer,stateSerializer).snapshot());
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"b",namespaceSerializer,stateSerializer).snapshot());
    stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"c",namespaceSerializer,stateSerializer).snapshot());
    KeyedBackendSerializationProxy<?> serializationProxy=new KeyedBackendSerializationProxy<>(keySerializer,stateMetaInfoList,true);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      serializationProxy.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     Set<String> cnfThrowingSerializerClasses=new HashSet<>();
    cnfThrowingSerializerClasses.add(IntSerializer.class.getName());
    cnfThrowingSerializerClasses.add(LongSerializer.class.getName());
    cnfThrowingSerializerClasses.add(DoubleSerializer.class.getName());
    serializationProxy=new KeyedBackendSerializationProxy<>(new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingSerializerClasses),false);
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      serializationProxy.read(new DataInputViewStreamWrapper(in));
    }
     Assert.assertEquals(true,serializationProxy.isUsingKeyGroupCompression());
    Assert.assertTrue(serializationProxy.getKeySerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(keySerializer.snapshotConfiguration(),serializationProxy.getKeySerializerConfigSnapshot());
    for (    StateMetaInfoSnapshot snapshot : serializationProxy.getStateMetaInfoSnapshots()) {
      final RegisteredKeyValueStateBackendMetaInfo<?,?> restoredMetaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(snapshot);
      Assert.assertTrue(restoredMetaInfo.getNamespaceSerializer() instanceof UnloadableDummyTypeSerializer);
      Assert.assertTrue(restoredMetaInfo.getStateSerializer() instanceof UnloadableDummyTypeSerializer);
      Assert.assertEquals(namespaceSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER));
      Assert.assertEquals(stateSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER));
    }
  }
  @Test public void testKeyedStateMetaInfoSerialization() throws Exception {
    String name="test";
    TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    StateMetaInfoSnapshot metaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,name,namespaceSerializer,stateSerializer).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(metaInfo,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.KEYED_STATE);
      metaInfo=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
    }
     Assert.assertEquals(name,metaInfo.getName());
  }
  @Test public void testKeyedStateMetaInfoReadSerializerFailureResilience() throws Exception {
    String name="test";
    TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    StateMetaInfoSnapshot snapshot=new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,name,namespaceSerializer,stateSerializer).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(snapshot,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     Set<String> cnfThrowingSerializerClasses=new HashSet<>();
    cnfThrowingSerializerClasses.add(LongSerializer.class.getName());
    cnfThrowingSerializerClasses.add(DoubleSerializer.class.getName());
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.KEYED_STATE);
      final ClassLoader classLoader=new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingSerializerClasses);
      snapshot=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),classLoader);
    }
     RegisteredKeyValueStateBackendMetaInfo<?,?> restoredMetaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(snapshot);
    Assert.assertEquals(name,restoredMetaInfo.getName());
    Assert.assertTrue(restoredMetaInfo.getNamespaceSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertTrue(restoredMetaInfo.getStateSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(namespaceSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER));
    Assert.assertEquals(stateSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER));
  }
  @Test public void testOperatorBackendSerializationProxyRoundtrip() throws Exception {
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    TypeSerializer<?> keySerializer=DoubleSerializer.INSTANCE;
    TypeSerializer<?> valueSerializer=StringSerializer.INSTANCE;
    List<StateMetaInfoSnapshot> stateMetaInfoSnapshots=new ArrayList<>();
    stateMetaInfoSnapshots.add(new RegisteredOperatorStateBackendMetaInfo<>("a",stateSerializer,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE).snapshot());
    stateMetaInfoSnapshots.add(new RegisteredOperatorStateBackendMetaInfo<>("b",stateSerializer,OperatorStateHandle.Mode.SPLIT_DISTRIBUTE).snapshot());
    stateMetaInfoSnapshots.add(new RegisteredOperatorStateBackendMetaInfo<>("c",stateSerializer,OperatorStateHandle.Mode.UNION).snapshot());
    List<StateMetaInfoSnapshot> broadcastStateMetaInfoSnapshots=new ArrayList<>();
    broadcastStateMetaInfoSnapshots.add(new RegisteredBroadcastStateBackendMetaInfo<>("d",OperatorStateHandle.Mode.BROADCAST,keySerializer,valueSerializer).snapshot());
    broadcastStateMetaInfoSnapshots.add(new RegisteredBroadcastStateBackendMetaInfo<>("e",OperatorStateHandle.Mode.BROADCAST,valueSerializer,keySerializer).snapshot());
    OperatorBackendSerializationProxy serializationProxy=new OperatorBackendSerializationProxy(stateMetaInfoSnapshots,broadcastStateMetaInfoSnapshots);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      serializationProxy.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     serializationProxy=new OperatorBackendSerializationProxy(Thread.currentThread().getContextClassLoader());
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      serializationProxy.read(new DataInputViewStreamWrapper(in));
    }
     assertEqualStateMetaInfoSnapshotsLists(stateMetaInfoSnapshots,serializationProxy.getOperatorStateMetaInfoSnapshots());
    assertEqualStateMetaInfoSnapshotsLists(broadcastStateMetaInfoSnapshots,serializationProxy.getBroadcastStateMetaInfoSnapshots());
  }
  @Test public void testOperatorStateMetaInfoSerialization() throws Exception {
    String name="test";
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    StateMetaInfoSnapshot snapshot=new RegisteredOperatorStateBackendMetaInfo<>(name,stateSerializer,OperatorStateHandle.Mode.UNION).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(snapshot,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.OPERATOR_STATE);
      snapshot=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
    }
     RegisteredOperatorStateBackendMetaInfo<?> restoredMetaInfo=new RegisteredOperatorStateBackendMetaInfo<>(snapshot);
    Assert.assertEquals(name,restoredMetaInfo.getName());
    Assert.assertEquals(OperatorStateHandle.Mode.UNION,restoredMetaInfo.getAssignmentMode());
    Assert.assertEquals(stateSerializer,restoredMetaInfo.getPartitionStateSerializer());
  }
  @Test public void testBroadcastStateMetaInfoSerialization() throws Exception {
    String name="test";
    TypeSerializer<?> keySerializer=DoubleSerializer.INSTANCE;
    TypeSerializer<?> valueSerializer=StringSerializer.INSTANCE;
    StateMetaInfoSnapshot snapshot=new RegisteredBroadcastStateBackendMetaInfo<>(name,OperatorStateHandle.Mode.BROADCAST,keySerializer,valueSerializer).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(snapshot,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.OPERATOR_STATE);
      snapshot=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
    }
     RegisteredBroadcastStateBackendMetaInfo<?,?> restoredMetaInfo=new RegisteredBroadcastStateBackendMetaInfo<>(snapshot);
    Assert.assertEquals(name,restoredMetaInfo.getName());
    Assert.assertEquals(OperatorStateHandle.Mode.BROADCAST,restoredMetaInfo.getAssignmentMode());
    Assert.assertEquals(keySerializer,restoredMetaInfo.getKeySerializer());
    Assert.assertEquals(valueSerializer,restoredMetaInfo.getValueSerializer());
  }
  @Test public void testOperatorStateMetaInfoReadSerializerFailureResilience() throws Exception {
    String name="test";
    TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
    StateMetaInfoSnapshot snapshot=new RegisteredOperatorStateBackendMetaInfo<>(name,stateSerializer,OperatorStateHandle.Mode.UNION).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(snapshot,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     Set<String> cnfThrowingSerializerClasses=new HashSet<>();
    cnfThrowingSerializerClasses.add(DoubleSerializer.class.getName());
    cnfThrowingSerializerClasses.add(StringSerializer.class.getName());
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.OPERATOR_STATE);
      final ClassLoader classLoader=new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingSerializerClasses);
      snapshot=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),classLoader);
    }
     RegisteredOperatorStateBackendMetaInfo<?> restoredMetaInfo=new RegisteredOperatorStateBackendMetaInfo<>(snapshot);
    Assert.assertEquals(name,restoredMetaInfo.getName());
    Assert.assertTrue(restoredMetaInfo.getPartitionStateSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(stateSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER));
  }
  @Test public void testBroadcastStateMetaInfoReadSerializerFailureResilience() throws Exception {
    String broadcastName="broadcastTest";
    TypeSerializer<?> keySerializer=DoubleSerializer.INSTANCE;
    TypeSerializer<?> valueSerializer=StringSerializer.INSTANCE;
    StateMetaInfoSnapshot snapshot=new RegisteredBroadcastStateBackendMetaInfo<>(broadcastName,OperatorStateHandle.Mode.BROADCAST,keySerializer,valueSerializer).snapshot();
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(snapshot,new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     Set<String> cnfThrowingSerializerClasses=new HashSet<>();
    cnfThrowingSerializerClasses.add(DoubleSerializer.class.getName());
    cnfThrowingSerializerClasses.add(StringSerializer.class.getName());
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      final StateMetaInfoReader reader=StateMetaInfoSnapshotReadersWriters.getReader(CURRENT_STATE_META_INFO_SNAPSHOT_VERSION,StateMetaInfoSnapshotReadersWriters.StateTypeHint.OPERATOR_STATE);
      final ClassLoader classLoader=new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingSerializerClasses);
      snapshot=reader.readStateMetaInfoSnapshot(new DataInputViewStreamWrapper(in),classLoader);
    }
     RegisteredBroadcastStateBackendMetaInfo<?,?> restoredMetaInfo=new RegisteredBroadcastStateBackendMetaInfo<>(snapshot);
    Assert.assertEquals(broadcastName,restoredMetaInfo.getName());
    Assert.assertEquals(OperatorStateHandle.Mode.BROADCAST,restoredMetaInfo.getAssignmentMode());
    Assert.assertTrue(restoredMetaInfo.getKeySerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(keySerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.KEY_SERIALIZER));
    Assert.assertTrue(restoredMetaInfo.getValueSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(valueSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER));
  }
  /** 
 * This test fixes the order of elements in the enum which is important for serialization. Do not modify this test except if you are entirely sure what you are doing.
 */
  @Test public void testFixTypeOrder(){
    Assert.assertEquals(7,StateDescriptor.Type.values().length);
    Assert.assertEquals(0,StateDescriptor.Type.UNKNOWN.ordinal());
    Assert.assertEquals(1,StateDescriptor.Type.VALUE.ordinal());
    Assert.assertEquals(2,StateDescriptor.Type.LIST.ordinal());
    Assert.assertEquals(3,StateDescriptor.Type.REDUCING.ordinal());
    Assert.assertEquals(4,StateDescriptor.Type.FOLDING.ordinal());
    Assert.assertEquals(5,StateDescriptor.Type.AGGREGATING.ordinal());
    Assert.assertEquals(6,StateDescriptor.Type.MAP.ordinal());
  }
  private void assertEqualStateMetaInfoSnapshotsLists(  List<StateMetaInfoSnapshot> expected,  List<StateMetaInfoSnapshot> actual){
    Assert.assertEquals(expected.size(),actual.size());
    for (int i=0; i < expected.size(); ++i) {
      assertEqualStateMetaInfoSnapshots(expected.get(i),actual.get(i));
    }
  }
  private void assertEqualStateMetaInfoSnapshots(  StateMetaInfoSnapshot expected,  StateMetaInfoSnapshot actual){
    Assert.assertEquals(expected.getName(),actual.getName());
    Assert.assertEquals(expected.getBackendStateType(),actual.getBackendStateType());
    Assert.assertEquals(expected.getOptionsImmutable(),actual.getOptionsImmutable());
    Assert.assertEquals(expected.getSerializersImmutable(),actual.getSerializersImmutable());
    Assert.assertEquals(expected.getSerializerConfigSnapshotsImmutable(),actual.getSerializerConfigSnapshotsImmutable());
  }
}
