public class TimerServiceTest extends TestLogger {
  /** 
 * Test all timeouts registered can be unregistered
 * @throws Exception
 */
  @Test @SuppressWarnings("unchecked") public void testUnregisterAllTimeouts() throws Exception {
    ScheduledExecutorService scheduledExecutorService=mock(ScheduledExecutorService.class);
    ScheduledFuture scheduledFuture=mock(ScheduledFuture.class);
    when(scheduledExecutorService.schedule(any(Runnable.class),anyLong(),any(TimeUnit.class))).thenReturn(scheduledFuture);
    TimerService<AllocationID> timerService=new TimerService<>(scheduledExecutorService,100L);
    TimeoutListener<AllocationID> listener=mock(TimeoutListener.class);
    timerService.start(listener);
    timerService.registerTimeout(new AllocationID(),10,TimeUnit.SECONDS);
    timerService.registerTimeout(new AllocationID(),10,TimeUnit.SECONDS);
    timerService.unregisterAllTimeouts();
    Map<?,?> timeouts=(Map<?,?>)Whitebox.getInternalState(timerService,"timeouts");
    assertTrue(timeouts.isEmpty());
    verify(scheduledFuture,times(2)).cancel(true);
  }
}
