private static class MyAsyncFunction extends RichAsyncFunction<Integer,Integer> {
  private static final long serialVersionUID=8522411971886428444L;
  private static final long TERMINATION_TIMEOUT=5000L;
  private static final int THREAD_POOL_SIZE=10;
  static ExecutorService executorService;
  static int counter=0;
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
synchronized (MyAsyncFunction.class) {
      if (counter == 0) {
        executorService=Executors.newFixedThreadPool(THREAD_POOL_SIZE);
      }
      ++counter;
    }
  }
  @Override public void close() throws Exception {
    super.close();
    freeExecutor();
  }
  private void freeExecutor(){
synchronized (MyAsyncFunction.class) {
      --counter;
      if (counter == 0) {
        executorService.shutdown();
        try {
          if (!executorService.awaitTermination(TERMINATION_TIMEOUT,TimeUnit.MILLISECONDS)) {
            executorService.shutdownNow();
          }
        }
 catch (        InterruptedException interrupted) {
          executorService.shutdownNow();
          Thread.currentThread().interrupt();
        }
      }
    }
  }
  @Override public void asyncInvoke(  final Integer input,  final ResultFuture<Integer> resultFuture) throws Exception {
    executorService.submit(new Runnable(){
      @Override public void run(){
        resultFuture.complete(Collections.singletonList(input * 2));
      }
    }
);
  }
}
