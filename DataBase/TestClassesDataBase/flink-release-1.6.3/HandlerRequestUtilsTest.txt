/** 
 * Tests for  {@link HandlerRequestUtils}.
 */
public class HandlerRequestUtilsTest extends TestLogger {
  @Test public void testGetQueryParameter() throws Exception {
    final Boolean queryParameter=HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(),new TestMessageParameters(),Collections.emptyMap(),Collections.singletonMap("key",Collections.singletonList("true"))),TestBooleanQueryParameter.class);
    assertThat(queryParameter,equalTo(true));
  }
  @Test public void testGetQueryParameterRepeated() throws Exception {
    try {
      HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(),new TestMessageParameters(),Collections.emptyMap(),Collections.singletonMap("key",Arrays.asList("true","false"))),TestBooleanQueryParameter.class);
    }
 catch (    final RestHandlerException e) {
      assertThat(e.getMessage(),containsString("Expected only one value"));
    }
  }
  @Test public void testGetQueryParameterDefaultValue() throws Exception {
    final Boolean allowNonRestoredState=HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(),new TestMessageParameters(),Collections.emptyMap(),Collections.singletonMap("key",Collections.emptyList())),TestBooleanQueryParameter.class,true);
    assertThat(allowNonRestoredState,equalTo(true));
  }
private static class TestMessageParameters extends MessageParameters {
    private TestBooleanQueryParameter testBooleanQueryParameter;
    @Override public Collection<MessagePathParameter<?>> getPathParameters(){
      return Collections.emptyList();
    }
    @Override public Collection<MessageQueryParameter<?>> getQueryParameters(){
      testBooleanQueryParameter=new TestBooleanQueryParameter();
      return Collections.singletonList(testBooleanQueryParameter);
    }
  }
private static class TestBooleanQueryParameter extends MessageQueryParameter<Boolean> {
    private TestBooleanQueryParameter(){
      super("key",MessageParameterRequisiteness.OPTIONAL);
    }
    @Override public Boolean convertStringToValue(    final String value){
      return Boolean.parseBoolean(value);
    }
    @Override public String convertValueToString(    final Boolean value){
      return value.toString();
    }
  }
}
