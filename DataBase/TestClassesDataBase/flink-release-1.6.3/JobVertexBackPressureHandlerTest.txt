/** 
 * Tests for  {@link JobVertexBackPressureHandler}.
 */
public class JobVertexBackPressureHandlerTest {
  /** 
 * Job ID for which  {@link OperatorBackPressureStats} exist.
 */
  private static final JobID TEST_JOB_ID_BACK_PRESSURE_STATS_AVAILABLE=new JobID();
  /** 
 * Job ID for which  {@link OperatorBackPressureStats} are not available.
 */
  private static final JobID TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT=new JobID();
  private TestingRestfulGateway restfulGateway;
  private JobVertexBackPressureHandler jobVertexBackPressureHandler;
  @Before public void setUp(){
    restfulGateway=TestingRestfulGateway.newBuilder().setRequestOperatorBackPressureStatsFunction((jobId,jobVertexId) -> {
      if (jobId.equals(TEST_JOB_ID_BACK_PRESSURE_STATS_AVAILABLE)) {
        return CompletableFuture.completedFuture(OperatorBackPressureStatsResponse.of(new OperatorBackPressureStats(4711,Integer.MAX_VALUE,new double[]{1.0,0.5,0.1})));
      }
 else       if (jobId.equals(TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT)) {
        return CompletableFuture.completedFuture(OperatorBackPressureStatsResponse.of(null));
      }
 else {
        throw new AssertionError();
      }
    }
).build();
    jobVertexBackPressureHandler=new JobVertexBackPressureHandler(CompletableFuture.completedFuture("localhost:12345"),() -> CompletableFuture.completedFuture(restfulGateway),Time.seconds(10),Collections.emptyMap(),JobVertexBackPressureHeaders.getInstance());
  }
  @Test public void testGetBackPressure() throws Exception {
    final Map<String,String> pathParameters=new HashMap<>();
    pathParameters.put(JobIDPathParameter.KEY,TEST_JOB_ID_BACK_PRESSURE_STATS_AVAILABLE.toString());
    pathParameters.put(JobVertexIdPathParameter.KEY,new JobVertexID().toString());
    final HandlerRequest<EmptyRequestBody,JobVertexMessageParameters> request=new HandlerRequest<>(EmptyRequestBody.getInstance(),new JobVertexMessageParameters(),pathParameters,Collections.emptyMap());
    final CompletableFuture<JobVertexBackPressureInfo> jobVertexBackPressureInfoCompletableFuture=jobVertexBackPressureHandler.handleRequest(request,restfulGateway);
    final JobVertexBackPressureInfo jobVertexBackPressureInfo=jobVertexBackPressureInfoCompletableFuture.get();
    assertThat(jobVertexBackPressureInfo.getStatus(),equalTo(VertexBackPressureStatus.OK));
    assertThat(jobVertexBackPressureInfo.getBackpressureLevel(),equalTo(HIGH));
    assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getRatio).collect(Collectors.toList()),contains(1.0,0.5,0.1));
    assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getBackpressureLevel).collect(Collectors.toList()),contains(HIGH,LOW,OK));
    assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getSubtask).collect(Collectors.toList()),contains(0,1,2));
  }
  @Test public void testAbsentBackPressure() throws Exception {
    final Map<String,String> pathParameters=new HashMap<>();
    pathParameters.put(JobIDPathParameter.KEY,TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT.toString());
    pathParameters.put(JobVertexIdPathParameter.KEY,new JobVertexID().toString());
    final HandlerRequest<EmptyRequestBody,JobVertexMessageParameters> request=new HandlerRequest<>(EmptyRequestBody.getInstance(),new JobVertexMessageParameters(),pathParameters,Collections.emptyMap());
    final CompletableFuture<JobVertexBackPressureInfo> jobVertexBackPressureInfoCompletableFuture=jobVertexBackPressureHandler.handleRequest(request,restfulGateway);
    final JobVertexBackPressureInfo jobVertexBackPressureInfo=jobVertexBackPressureInfoCompletableFuture.get();
    assertThat(jobVertexBackPressureInfo.getStatus(),equalTo(VertexBackPressureStatus.DEPRECATED));
  }
}
