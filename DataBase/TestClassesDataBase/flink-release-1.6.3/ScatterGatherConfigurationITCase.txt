/** 
 * Tests for  {@link ScatterGatherConfiguration}.
 */
@RunWith(Parameterized.class) public class ScatterGatherConfigurationITCase extends MultipleProgramsTestBase {
  public ScatterGatherConfigurationITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testRunWithConfiguration() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new AssignOneMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.addBroadcastSetForScatterFunction("messagingBcastSet",env.fromElements(4,5,6));
    parameters.addBroadcastSetForGatherFunction("updateBcastSet",env.fromElements(1,2,3));
    parameters.registerAggregator("superstepAggregator",new LongSumAggregator());
    parameters.setOptNumVertices(true);
    Graph<Long,Long,Long> res=graph.runScatterGatherIteration(new MessageFunction(),new UpdateFunction(),10,parameters);
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,11\n" + "2,11\n" + "3,11\n"+ "4,11\n"+ "5,11";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testIterationConfiguration() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    ScatterGatherIteration<Long,Long,Long,Long> iteration=ScatterGatherIteration.withEdges(TestGraphUtils.getLongLongEdgeData(env),new DummyMessageFunction(),new DummyUpdateFunction(),10);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setName("gelly iteration");
    parameters.setParallelism(2);
    parameters.setSolutionSetUnmanagedMemory(true);
    iteration.configure(parameters);
    Assert.assertEquals("gelly iteration",iteration.getIterationConfiguration().getName(""));
    Assert.assertEquals(2,iteration.getIterationConfiguration().getParallelism());
    Assert.assertEquals(true,iteration.getIterationConfiguration().isSolutionSetUnmanagedMemory());
    DataSet<Vertex<Long,Long>> data=TestGraphUtils.getLongLongVertexData(env).runOperation(iteration);
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,11\n" + "2,12\n" + "3,13\n"+ "4,14\n"+ "5,15";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testDefaultConfiguration() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new AssignOneMapper());
    Graph<Long,Long,Long> res=graph.runScatterGatherIteration(new MessageFunctionDefault(),new UpdateFunctionDefault(),5);
    DataSet<Tuple2<Long,Long>> data=res.getVertices().map(new VertexToTuple2Map<>());
    List<Tuple2<Long,Long>> result=data.collect();
    expectedResult="1,6\n" + "2,6\n" + "3,6\n"+ "4,6\n"+ "5,6";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testIterationDefaultDirection() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new IdMessengerTrg(),new VertexUpdateDirection(),5).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[5]\n" + "2,[1]\n" + "3,[1, 2]\n"+ "4,[3]\n"+ "5,[3, 4]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testIterationINDirection() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setDirection(EdgeDirection.IN);
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new IdMessengerSrc(),new VertexUpdateDirection(),5,parameters).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[2, 3]\n" + "2,[3]\n" + "3,[4, 5]\n"+ "4,[5]\n"+ "5,[1]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testIterationALLDirection() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setDirection(EdgeDirection.ALL);
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new IdMessengerAll(),new VertexUpdateDirection(),5,parameters).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[2, 3, 5]\n" + "2,[1, 3]\n" + "3,[1, 2, 4, 5]\n"+ "4,[3, 5]\n"+ "5,[1, 3, 4]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testSendToAllDirectionIN() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setDirection(EdgeDirection.IN);
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new SendMsgToAll(),new VertexUpdateDirection(),5,parameters).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[2, 3]\n" + "2,[3]\n" + "3,[4, 5]\n"+ "4,[5]\n"+ "5,[1]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testSendToAllDirectionOUT() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setDirection(EdgeDirection.OUT);
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new SendMsgToAll(),new VertexUpdateDirection(),5,parameters).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[5]\n" + "2,[1]\n" + "3,[1, 2]\n"+ "4,[3]\n"+ "5,[3, 4]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testSendToAllDirectionALL() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,HashSet<Long>,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new InitialiseHashSetMapper());
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setDirection(EdgeDirection.ALL);
    DataSet<Vertex<Long,HashSet<Long>>> resultedVertices=graph.runScatterGatherIteration(new SendMsgToAll(),new VertexUpdateDirection(),5,parameters).getVertices();
    List<Vertex<Long,HashSet<Long>>> result=resultedVertices.collect();
    expectedResult="1,[2, 3, 5]\n" + "2,[1, 3]\n" + "3,[1, 2, 4, 5]\n"+ "4,[3, 5]\n"+ "5,[1, 3, 4]";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testNumVerticesNotSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    DataSet<Vertex<Long,Long>> verticesWithNumVertices=graph.runScatterGatherIteration(new DummyMessageFunction(),new UpdateFunctionNumVertices(),2).getVertices();
    List<Vertex<Long,Long>> result=verticesWithNumVertices.collect();
    expectedResult="1,-1\n" + "2,-1\n" + "3,-1\n"+ "4,-1\n"+ "5,-1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testInDegreesSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setOptDegrees(true);
    DataSet<Vertex<Long,Long>> verticesWithDegrees=graph.runScatterGatherIteration(new DegreesMessageFunction(),new UpdateFunctionInDegrees(),5,parameters).getVertices();
    List<Vertex<Long,Long>> result=verticesWithDegrees.collect();
    expectedResult="1,1\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,2";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testInDegreesNotSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    DataSet<Vertex<Long,Long>> verticesWithDegrees=graph.runScatterGatherIteration(new DummyMessageFunction(),new UpdateFunctionInDegrees(),2).getVertices();
    List<Vertex<Long,Long>> result=verticesWithDegrees.collect();
    expectedResult="1,-1\n" + "2,-1\n" + "3,-1\n"+ "4,-1\n"+ "5,-1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testOutDegreesSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setOptDegrees(true);
    DataSet<Vertex<Long,Long>> verticesWithDegrees=graph.runScatterGatherIteration(new DegreesMessageFunction(),new UpdateFunctionOutDegrees(),5,parameters).getVertices();
    List<Vertex<Long,Long>> result=verticesWithDegrees.collect();
    expectedResult="1,2\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testOutDegreesNotSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    DataSet<Vertex<Long,Long>> verticesWithDegrees=graph.runScatterGatherIteration(new DummyMessageFunction(),new UpdateFunctionOutDegrees(),2).getVertices();
    List<Vertex<Long,Long>> result=verticesWithDegrees.collect();
    expectedResult="1,-1\n" + "2,-1\n" + "3,-1\n"+ "4,-1\n"+ "5,-1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testDirectionALLAndDegrees() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Boolean,Long> graph=Graph.fromCollection(TestGraphUtils.getLongBooleanVertices(),TestGraphUtils.getLongLongEdges(),env);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.setOptDegrees(true);
    parameters.setDirection(EdgeDirection.ALL);
    DataSet<Vertex<Long,Boolean>> verticesWithNumNeighbors=graph.runScatterGatherIteration(new IdMessenger(),new VertexUpdateNumNeighbors(),1,parameters).getVertices();
    List<Vertex<Long,Boolean>> result=verticesWithNumNeighbors.collect();
    expectedResult="1,true\n" + "2,true\n" + "3,true\n"+ "4,true\n"+ "5,true";
    compareResultAsTuples(result,expectedResult);
  }
@SuppressWarnings("serial") private static final class MessageFunction extends ScatterFunction<Long,Long,Long,Long> {
    @Override public void preSuperstep(){
      @SuppressWarnings("unchecked") List<Integer> bcastSet=(List<Integer>)(List<?>)getBroadcastSet("messagingBcastSet");
      Assert.assertEquals(4,bcastSet.get(0).intValue());
      Assert.assertEquals(5,bcastSet.get(1).intValue());
      Assert.assertEquals(6,bcastSet.get(2).intValue());
      Assert.assertEquals(5,getNumberOfVertices());
      if (getSuperstepNumber() == 2) {
        long aggrValue=((LongValue)getPreviousIterationAggregate("superstepAggregator")).getValue();
        Assert.assertEquals(5,aggrValue);
      }
    }
    @Override public void sendMessages(    Vertex<Long,Long> vertex){
      sendMessageToAllNeighbors(vertex.getValue());
    }
  }
@SuppressWarnings("serial") private static final class MessageFunctionDefault extends ScatterFunction<Long,Long,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,Long> vertex){
      Assert.assertEquals(-1,getNumberOfVertices());
      Assert.assertEquals(-1,getInDegree());
      Assert.assertEquals(-1,getOutDegree());
      sendMessageToAllNeighbors(vertex.getValue());
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunction extends GatherFunction<Long,Long,Long> {
    LongSumAggregator aggregator=new LongSumAggregator();
    @Override public void preSuperstep(){
      @SuppressWarnings("unchecked") List<Integer> bcastSet=(List<Integer>)(List<?>)getBroadcastSet("updateBcastSet");
      Assert.assertEquals(1,bcastSet.get(0).intValue());
      Assert.assertEquals(2,bcastSet.get(1).intValue());
      Assert.assertEquals(3,bcastSet.get(2).intValue());
      aggregator=getIterationAggregator("superstepAggregator");
      Assert.assertEquals(5,getNumberOfVertices());
    }
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      long superstep=getSuperstepNumber();
      aggregator.aggregate(superstep);
      setNewVertexValue(vertex.getValue() + 1);
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunctionDefault extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      Assert.assertEquals(-1,getNumberOfVertices());
      Assert.assertEquals(-1,getInDegree());
      Assert.assertEquals(-1,getOutDegree());
      setNewVertexValue(vertex.getValue() + 1);
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunctionNumVertices extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      setNewVertexValue(getNumberOfVertices());
    }
  }
@SuppressWarnings("serial") private static final class DummyUpdateFunction extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      setNewVertexValue(vertex.getValue() + 1);
    }
  }
@SuppressWarnings("serial") private static final class DummyMessageFunction extends ScatterFunction<Long,Long,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,Long> vertex){
      sendMessageToAllNeighbors(vertex.getValue());
    }
  }
@SuppressWarnings("serial") private static final class DegreesMessageFunction extends ScatterFunction<Long,Long,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,Long> vertex){
      if (vertex.getId() == 1) {
        Assert.assertEquals(2,getOutDegree());
        Assert.assertEquals(1,getInDegree());
      }
 else       if (vertex.getId() == 3) {
        Assert.assertEquals(2,getOutDegree());
        Assert.assertEquals(2,getInDegree());
      }
      sendMessageToAllNeighbors(vertex.getValue());
    }
  }
@SuppressWarnings("serial") private static final class VertexUpdateDirection extends GatherFunction<Long,HashSet<Long>,Long> {
    @Override public void updateVertex(    Vertex<Long,HashSet<Long>> vertex,    MessageIterator<Long> messages) throws Exception {
      vertex.getValue().clear();
      for (      long msg : messages) {
        vertex.getValue().add(msg);
      }
      setNewVertexValue(vertex.getValue());
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunctionInDegrees extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      long inDegree=getInDegree();
      setNewVertexValue(inDegree);
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunctionOutDegrees extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      long outDegree=getOutDegree();
      setNewVertexValue(outDegree);
    }
  }
@SuppressWarnings("serial") private static final class VertexUpdateNumNeighbors extends GatherFunction<Long,Boolean,Long> {
    @Override public void updateVertex(    Vertex<Long,Boolean> vertex,    MessageIterator<Long> messages) throws Exception {
      long count=0;
      for (      @SuppressWarnings("unused") long msg : messages) {
        count++;
      }
      setNewVertexValue(count == (getInDegree() + getOutDegree()));
    }
  }
@SuppressWarnings("serial") private static final class UpdateFunctionDegrees extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      long inDegree=getInDegree();
      long outDegree=getOutDegree();
      setNewVertexValue(inDegree + outDegree);
    }
  }
@SuppressWarnings("serial") private static final class IdMessengerSrc extends ScatterFunction<Long,HashSet<Long>,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,HashSet<Long>> vertex) throws Exception {
      for (      Edge<Long,Long> edge : getEdges()) {
        sendMessageTo(edge.getSource(),vertex.getId());
      }
    }
  }
@SuppressWarnings("serial") private static final class IdMessengerAll extends ScatterFunction<Long,HashSet<Long>,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,HashSet<Long>> vertex) throws Exception {
      for (      Edge<Long,Long> edge : getEdges()) {
        if (!edge.getSource().equals(vertex.getId())) {
          sendMessageTo(edge.getSource(),vertex.getId());
        }
 else {
          sendMessageTo(edge.getTarget(),vertex.getId());
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SendMsgToAll extends ScatterFunction<Long,HashSet<Long>,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,HashSet<Long>> vertex) throws Exception {
      sendMessageToAllNeighbors(vertex.getId());
    }
  }
@SuppressWarnings("serial") private static final class IdMessenger extends ScatterFunction<Long,Boolean,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,Boolean> vertex) throws Exception {
      for (      Edge<Long,Long> edge : getEdges()) {
        if (!edge.getSource().equals(vertex.getId())) {
          sendMessageTo(edge.getSource(),vertex.getId());
        }
 else {
          sendMessageTo(edge.getTarget(),vertex.getId());
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class IdMessengerTrg extends ScatterFunction<Long,HashSet<Long>,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,HashSet<Long>> vertex) throws Exception {
      for (      Edge<Long,Long> edge : getEdges()) {
        sendMessageTo(edge.getTarget(),vertex.getId());
      }
    }
  }
@SuppressWarnings("serial") private static final class AssignOneMapper implements MapFunction<Vertex<Long,Long>,Long> {
    public Long map(    Vertex<Long,Long> value){
      return 1L;
    }
  }
@SuppressWarnings("serial") private static final class InitialiseHashSetMapper implements MapFunction<Vertex<Long,Long>,HashSet<Long>> {
    @Override public HashSet<Long> map(    Vertex<Long,Long> value) throws Exception {
      return new HashSet<>();
    }
  }
}
