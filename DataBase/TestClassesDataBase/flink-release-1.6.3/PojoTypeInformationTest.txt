public class PojoTypeInformationTest {
public static class SimplePojo {
    public String str;
    public Boolean Bl;
    public boolean bl;
    public Byte Bt;
    public byte bt;
    public Short Shrt;
    public short shrt;
    public Integer Intgr;
    public int intgr;
    public Long Lng;
    public long lng;
    public Float Flt;
    public float flt;
    public Double Dbl;
    public double dbl;
    public Character Ch;
    public char ch;
    public int[] primIntArray;
    public Integer[] intWrapperArray;
  }
  @Test public void testSimplePojoTypeExtraction(){
    TypeInformation<SimplePojo> type=TypeExtractor.getForClass(SimplePojo.class);
    assertTrue("Extracted type is not a composite/pojo type but should be.",type instanceof CompositeType);
  }
public static class NestedPojoInner {
    public String field;
  }
public static class NestedPojoOuter {
    public Integer intField;
    public NestedPojoInner inner;
  }
  @Test public void testNestedPojoTypeExtraction(){
    TypeInformation<NestedPojoOuter> type=TypeExtractor.getForClass(NestedPojoOuter.class);
    assertTrue("Extracted type is not a Pojo type but should be.",type instanceof CompositeType);
  }
public static class Recursive1Pojo {
    public Integer intField;
    public Recursive2Pojo rec;
  }
public static class Recursive2Pojo {
    public String strField;
    public Recursive1Pojo rec;
  }
  @Test public void testRecursivePojoTypeExtraction(){
    TypeInformation<Recursive1Pojo> type=TypeExtractor.getForClass(Recursive1Pojo.class);
    assertTrue("Extracted type is not a Pojo type but should be.",type instanceof CompositeType);
  }
  @Test public void testRecursivePojoObjectTypeExtraction(){
    TypeInformation<Recursive1Pojo> type=TypeExtractor.getForObject(new Recursive1Pojo());
    assertTrue("Extracted type is not a Pojo type but should be.",type instanceof CompositeType);
  }
}
