/** 
 * Tests for the  {@link SpanningRecordSerializer}.
 */
public class SpanningRecordSerializerTest {
  @Test public void testHasSerializedData() throws IOException {
    final int segmentSize=16;
    final SpanningRecordSerializer<SerializationTestType> serializer=new SpanningRecordSerializer<>();
    final SerializationTestType randomIntRecord=Util.randomRecord(SerializationTestTypeFactory.INT);
    Assert.assertFalse(serializer.hasSerializedData());
    serializer.addRecord(randomIntRecord);
    Assert.assertTrue(serializer.hasSerializedData());
    serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
    Assert.assertFalse(serializer.hasSerializedData());
    serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(8));
    serializer.addRecord(randomIntRecord);
    Assert.assertFalse(serializer.hasSerializedData());
    serializer.addRecord(randomIntRecord);
    Assert.assertTrue(serializer.hasSerializedData());
  }
  @Test public void testEmptyRecords() throws IOException {
    final int segmentSize=11;
    final SpanningRecordSerializer<SerializationTestType> serializer=new SpanningRecordSerializer<>();
    try {
      Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize)));
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    SerializationTestType emptyRecord=new SerializationTestType(){
      @Override public SerializationTestType getRandom(      Random rnd){
        throw new UnsupportedOperationException();
      }
      @Override public int length(){
        throw new UnsupportedOperationException();
      }
      @Override public void write(      DataOutputView out){
      }
      @Override public void read(      DataInputView in){
      }
      @Override public int hashCode(){
        throw new UnsupportedOperationException();
      }
      @Override public boolean equals(      Object obj){
        throw new UnsupportedOperationException();
      }
    }
;
    RecordSerializer.SerializationResult result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
    result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
    result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL,result);
    result=serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
    Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
  }
  @Test public void testIntRecordsSpanningMultipleSegments() throws Exception {
    final int segmentSize=1;
    final int numValues=10;
    test(Util.randomRecords(numValues,SerializationTestTypeFactory.INT),segmentSize);
  }
  @Test public void testIntRecordsWithAlignedSegments() throws Exception {
    final int segmentSize=64;
    final int numValues=64;
    test(Util.randomRecords(numValues,SerializationTestTypeFactory.INT),segmentSize);
  }
  @Test public void testIntRecordsWithUnalignedSegments() throws Exception {
    final int segmentSize=31;
    final int numValues=248;
    test(Util.randomRecords(numValues,SerializationTestTypeFactory.INT),segmentSize);
  }
  @Test public void testRandomRecords() throws Exception {
    final int segmentSize=127;
    final int numValues=100000;
    test(Util.randomRecords(numValues),segmentSize);
  }
  /** 
 * Iterates over the provided records and tests whether the  {@link SpanningRecordSerializer} returns the expected{@link RecordSerializer.SerializationResult} values.<p>Only a single  {@link MemorySegment} will be allocated.
 * @param records records to test
 * @param segmentSize size for the {@link MemorySegment}
 */
  private void test(  Util.MockRecords records,  int segmentSize) throws Exception {
    final int serializationOverhead=4;
    final SpanningRecordSerializer<SerializationTestType> serializer=new SpanningRecordSerializer<>();
    serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
    int numBytes=0;
    for (    SerializationTestType record : records) {
      RecordSerializer.SerializationResult result=serializer.addRecord(record);
      numBytes+=record.length() + serializationOverhead;
      if (numBytes < segmentSize) {
        Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
      }
 else       if (numBytes == segmentSize) {
        Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL,result);
        serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
        numBytes=0;
      }
 else {
        Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL,result);
        while (result.isFullBuffer()) {
          numBytes-=segmentSize;
          result=serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
        }
      }
    }
  }
}
