/** 
 * Tests for  {@link Simplify}.
 */
public class SimplifyTest extends AsmTestBase {
  protected Graph<IntValue,NullValue,NullValue> graph;
  @Before @Override public void setup() throws Exception {
    super.setup();
    Object[][] edges=new Object[][]{new Object[]{0,0},new Object[]{0,1},new Object[]{0,1},new Object[]{0,2},new Object[]{0,2},new Object[]{1,0},new Object[]{2,2}};
    List<Edge<IntValue,NullValue>> edgeList=new LinkedList<>();
    for (    Object[] edge : edges) {
      edgeList.add(new Edge<>(new IntValue((int)edge[0]),new IntValue((int)edge[1]),NullValue.getInstance()));
    }
    graph=Graph.fromCollection(edgeList,env);
  }
  @Test public void test() throws Exception {
    String expectedResult="(0,1,(null))\n" + "(0,2,(null))\n" + "(1,0,(null))";
    Graph<IntValue,NullValue,NullValue> simpleGraph=graph.run(new Simplify<>());
    TestBaseUtils.compareResultAsText(simpleGraph.getEdges().collect(),expectedResult);
  }
  @Test public void testParallelism() throws Exception {
    int parallelism=2;
    Graph<IntValue,NullValue,NullValue> simpleGraph=graph.run(new Simplify<>());
    simpleGraph.getVertices().output(new DiscardingOutputFormat<>());
    simpleGraph.getEdges().output(new DiscardingOutputFormat<>());
    TestUtils.verifyParallelism(env,parallelism);
  }
}
