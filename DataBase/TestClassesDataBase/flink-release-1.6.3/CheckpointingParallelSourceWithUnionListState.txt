/** 
 * A parallel source with union state used for testing.
 */
public static class CheckpointingParallelSourceWithUnionListState extends RichSourceFunction<Tuple2<Long,Long>> implements CheckpointedFunction {
  static final ListStateDescriptor<String> STATE_DESCRIPTOR=new ListStateDescriptor<>("source-state",StringSerializer.INSTANCE);
  static final String[] CHECKPOINTED_STRINGS={"Here be dragons!","Here be more dragons!","Here be yet more dragons!","Here be the mostest dragons!"};
  private static final long serialVersionUID=1L;
  private volatile boolean isRunning=true;
  private final int numElements;
  private transient ListState<String> unionListState;
  CheckpointingParallelSourceWithUnionListState(  int numElements){
    this.numElements=numElements;
  }
  @Override public void snapshotState(  FunctionSnapshotContext context) throws Exception {
    unionListState.clear();
    for (    String s : CHECKPOINTED_STRINGS) {
      if (s.hashCode() % getRuntimeContext().getNumberOfParallelSubtasks() == getRuntimeContext().getIndexOfThisSubtask()) {
        unionListState.add(s);
      }
    }
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    unionListState=context.getOperatorStateStore().getUnionListState(STATE_DESCRIPTOR);
  }
  @Override public void run(  SourceContext<Tuple2<Long,Long>> ctx) throws Exception {
    ctx.emitWatermark(new Watermark(0));
synchronized (ctx.getCheckpointLock()) {
      for (long i=0; i < numElements; i++) {
        if (i % getRuntimeContext().getNumberOfParallelSubtasks() == getRuntimeContext().getIndexOfThisSubtask()) {
          ctx.collect(new Tuple2<>(i,i));
        }
      }
    }
    while (isRunning) {
      Thread.sleep(20);
    }
  }
  @Override public void cancel(){
    isRunning=false;
  }
}
