/** 
 * A thread that holds a lock as long as it lives.
 */
private static final class LockHolder extends Thread implements Closeable {
  private final OneShotLatch trigger;
  private final Object lock;
  private volatile boolean canceled;
  private LockHolder(  Object lock,  OneShotLatch trigger){
    this.lock=lock;
    this.trigger=trigger;
  }
  @Override public void run(){
synchronized (lock) {
      while (!canceled) {
        trigger.trigger();
        try {
          Thread.sleep(1000000000);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
  public void cancel(){
    canceled=true;
  }
  @Override public void close(){
    canceled=true;
    interrupt();
  }
}
