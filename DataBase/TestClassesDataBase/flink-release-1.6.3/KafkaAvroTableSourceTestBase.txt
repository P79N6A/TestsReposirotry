/** 
 * Abstract test base for all Kafka Avro table sources.
 * @deprecated Ensures backwards compatibility with Flink 1.5. Can be removed once wedrop support for format-specific table sources.
 */
@Deprecated public abstract class KafkaAvroTableSourceTestBase extends KafkaTableSourceBuilderTestBase {
  @Override protected void configureBuilder(  KafkaTableSource.Builder builder){
    super.configureBuilder(builder);
    ((KafkaAvroTableSource.Builder)builder).forAvroRecordClass(SchemaRecord.class);
  }
  @Test public void testSameFieldsAvroClass(){
    KafkaAvroTableSource.Builder b=(KafkaAvroTableSource.Builder)getBuilder();
    this.configureBuilder(b);
    KafkaAvroTableSource source=(KafkaAvroTableSource)b.build();
    RowTypeInfo returnType=(RowTypeInfo)source.getReturnType();
    assertNotNull(returnType);
    assertEquals(5,returnType.getArity());
    assertEquals("field1",returnType.getFieldNames()[0]);
    assertEquals("field2",returnType.getFieldNames()[1]);
    assertEquals("time1",returnType.getFieldNames()[2]);
    assertEquals("time2",returnType.getFieldNames()[3]);
    assertEquals("field3",returnType.getFieldNames()[4]);
    assertEquals(Types.LONG(),returnType.getTypeAt(0));
    assertEquals(Types.STRING(),returnType.getTypeAt(1));
    assertEquals(Types.LONG(),returnType.getTypeAt(2));
    assertEquals(Types.LONG(),returnType.getTypeAt(3));
    assertEquals(Types.DOUBLE(),returnType.getTypeAt(4));
    assertNull(source.getFieldMapping());
    assertEquals(source.getReturnType(),source.getDataStream(StreamExecutionEnvironment.getExecutionEnvironment()).getType());
  }
  @Test public void testDifferentFieldsAvroClass(){
    KafkaAvroTableSource.Builder b=(KafkaAvroTableSource.Builder)getBuilder();
    super.configureBuilder(b);
    b.withProctimeAttribute("time2");
    Map<String,String> mapping=new HashMap<>();
    mapping.put("field1","otherField1");
    mapping.put("field2","otherField2");
    mapping.put("field3","otherField3");
    b.forAvroRecordClass(DifferentSchemaRecord.class);
    b.withTableToAvroMapping(mapping);
    KafkaAvroTableSource source=(KafkaAvroTableSource)b.build();
    RowTypeInfo returnType=(RowTypeInfo)source.getReturnType();
    assertNotNull(returnType);
    assertEquals(6,returnType.getArity());
    assertEquals("otherField1",returnType.getFieldNames()[0]);
    assertEquals("otherField2",returnType.getFieldNames()[1]);
    assertEquals("otherTime1",returnType.getFieldNames()[2]);
    assertEquals("otherField3",returnType.getFieldNames()[3]);
    assertEquals("otherField4",returnType.getFieldNames()[4]);
    assertEquals("otherField5",returnType.getFieldNames()[5]);
    assertEquals(Types.LONG(),returnType.getTypeAt(0));
    assertEquals(Types.STRING(),returnType.getTypeAt(1));
    assertEquals(Types.LONG(),returnType.getTypeAt(2));
    assertEquals(Types.DOUBLE(),returnType.getTypeAt(3));
    assertEquals(Types.FLOAT(),returnType.getTypeAt(4));
    assertEquals(Types.INT(),returnType.getTypeAt(5));
    Map<String,String> fieldMapping=source.getFieldMapping();
    assertNotNull(fieldMapping);
    assertEquals(3,fieldMapping.size());
    assertEquals("otherField1",fieldMapping.get("field1"));
    assertEquals("otherField2",fieldMapping.get("field2"));
    assertEquals("otherField3",fieldMapping.get("field3"));
    assertEquals(source.getReturnType(),source.getDataStream(StreamExecutionEnvironment.getExecutionEnvironment()).getType());
  }
}
