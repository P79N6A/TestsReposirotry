private static class DatagramSocketReceiver implements Runnable {
  private static final Object obj=new Object();
  private final DatagramSocket socket;
  private final ConcurrentHashMap<String,Object> lines;
  private boolean running=true;
  public DatagramSocketReceiver() throws SocketException {
    socket=new DatagramSocket();
    lines=new ConcurrentHashMap<>();
  }
  public int getPort(){
    return socket.getLocalPort();
  }
  public void stop(){
    running=false;
    socket.close();
  }
  public void waitUntilNumLines(  int numberLines,  long timeout) throws TimeoutException {
    long endTimeout=System.currentTimeMillis() + timeout;
    long remainingTimeout=timeout;
    while (numberLines > lines.size() && remainingTimeout > 0) {
synchronized (lines) {
        try {
          lines.wait(remainingTimeout);
        }
 catch (        InterruptedException e) {
        }
      }
      remainingTimeout=endTimeout - System.currentTimeMillis();
    }
    if (remainingTimeout <= 0) {
      throw new TimeoutException("Have not received " + numberLines + " in time.");
    }
  }
  public Set<String> getLines(){
    return lines.keySet();
  }
  @Override public void run(){
    while (running) {
      try {
        byte[] buffer=new byte[1024];
        DatagramPacket packet=new DatagramPacket(buffer,buffer.length);
        socket.receive(packet);
        String line=new String(packet.getData(),0,packet.getLength(),ConfigConstants.DEFAULT_CHARSET);
        lines.put(line,obj);
synchronized (lines) {
          lines.notifyAll();
        }
      }
 catch (      IOException ex) {
      }
    }
  }
}
