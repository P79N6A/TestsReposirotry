/** 
 * Tests for  {@link EdgeTargetDegree}.
 */
public class EdgeTargetDegreeTest extends AsmTestBase {
  @Test public void testWithSimpleGraph() throws Exception {
    String expectedResult="(0,1,((null),3))\n" + "(0,2,((null),3))\n" + "(1,0,((null),2))\n"+ "(1,2,((null),3))\n"+ "(1,3,((null),4))\n"+ "(2,0,((null),2))\n"+ "(2,1,((null),3))\n"+ "(2,3,((null),4))\n"+ "(3,1,((null),3))\n"+ "(3,2,((null),3))\n"+ "(3,4,((null),1))\n"+ "(3,5,((null),1))\n"+ "(4,3,((null),4))\n"+ "(5,3,((null),4))";
    DataSet<Edge<IntValue,Tuple2<NullValue,LongValue>>> targetDegreeOnTargetId=undirectedSimpleGraph.run(new EdgeTargetDegree<IntValue,NullValue,NullValue>().setReduceOnSourceId(false));
    TestBaseUtils.compareResultAsText(targetDegreeOnTargetId.collect(),expectedResult);
    DataSet<Edge<IntValue,Tuple2<NullValue,LongValue>>> targetDegreeOnSourceId=undirectedSimpleGraph.run(new EdgeTargetDegree<IntValue,NullValue,NullValue>().setReduceOnSourceId(true));
    TestBaseUtils.compareResultAsText(targetDegreeOnSourceId.collect(),expectedResult);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnTargetId=emptyGraphWithVertices.run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(false));
    assertEquals(0,targetDegreeOnTargetId.collect().size());
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnSourceId=emptyGraphWithVertices.run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(true));
    assertEquals(0,targetDegreeOnSourceId.collect().size());
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnTargetId=emptyGraphWithoutVertices.run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(false));
    assertEquals(0,targetDegreeOnTargetId.collect().size());
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnSourceId=emptyGraphWithoutVertices.run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(true));
    assertEquals(0,targetDegreeOnSourceId.collect().size());
  }
  @Test public void testWithRMatGraph() throws Exception {
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnTargetId=undirectedRMatGraph(10,16).run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(false));
    Checksum checksumOnTargetId=new ChecksumHashCode<Edge<LongValue,Tuple2<NullValue,LongValue>>>().run(targetDegreeOnTargetId).execute();
    assertEquals(20884,checksumOnTargetId.getCount());
    assertEquals(0x000000019d8f0070L,checksumOnTargetId.getChecksum());
    DataSet<Edge<LongValue,Tuple2<NullValue,LongValue>>> targetDegreeOnSourceId=undirectedRMatGraph(10,16).run(new EdgeTargetDegree<LongValue,NullValue,NullValue>().setReduceOnSourceId(true));
    Checksum checksumOnSourceId=new ChecksumHashCode<Edge<LongValue,Tuple2<NullValue,LongValue>>>().run(targetDegreeOnSourceId).execute();
    assertEquals(checksumOnTargetId,checksumOnSourceId);
  }
}
