/** 
 * Tests for  {@link MaterializedCollectStreamResult}.
 */
public class MaterializedCollectStreamResultTest {
  @Test public void testSnapshot() throws UnknownHostException {
    final TypeInformation<Row> type=Types.ROW(Types.STRING,Types.LONG);
    TestMaterializedCollectStreamResult<?> result=null;
    try {
      result=new TestMaterializedCollectStreamResult<>(type,new ExecutionConfig(),InetAddress.getLocalHost(),0,Integer.MAX_VALUE);
      result.isRetrieving=true;
      result.processRecord(Tuple2.of(true,Row.of("A",1)));
      result.processRecord(Tuple2.of(true,Row.of("B",1)));
      result.processRecord(Tuple2.of(true,Row.of("A",1)));
      result.processRecord(Tuple2.of(true,Row.of("C",2)));
      assertEquals(TypedResult.payload(4),result.snapshot(1));
      assertEquals(Collections.singletonList(Row.of("A",1)),result.retrievePage(1));
      assertEquals(Collections.singletonList(Row.of("B",1)),result.retrievePage(2));
      assertEquals(Collections.singletonList(Row.of("A",1)),result.retrievePage(3));
      assertEquals(Collections.singletonList(Row.of("C",2)),result.retrievePage(4));
      result.processRecord(Tuple2.of(false,Row.of("A",1)));
      assertEquals(TypedResult.payload(3),result.snapshot(1));
      assertEquals(Collections.singletonList(Row.of("A",1)),result.retrievePage(1));
      assertEquals(Collections.singletonList(Row.of("B",1)),result.retrievePage(2));
      assertEquals(Collections.singletonList(Row.of("C",2)),result.retrievePage(3));
      result.processRecord(Tuple2.of(false,Row.of("C",2)));
      result.processRecord(Tuple2.of(false,Row.of("A",1)));
      assertEquals(TypedResult.payload(1),result.snapshot(1));
      assertEquals(Collections.singletonList(Row.of("B",1)),result.retrievePage(1));
    }
  finally {
      if (result != null) {
        result.close();
      }
    }
  }
  @Test public void testLimitedSnapshot() throws UnknownHostException {
    final TypeInformation<Row> type=Types.ROW(Types.STRING,Types.LONG);
    TestMaterializedCollectStreamResult<?> result=null;
    try {
      result=new TestMaterializedCollectStreamResult<>(type,new ExecutionConfig(),InetAddress.getLocalHost(),0,2,3);
      result.isRetrieving=true;
      result.processRecord(Tuple2.of(true,Row.of("D",1)));
      result.processRecord(Tuple2.of(true,Row.of("A",1)));
      result.processRecord(Tuple2.of(true,Row.of("B",1)));
      result.processRecord(Tuple2.of(true,Row.of("A",1)));
      assertEquals(Arrays.asList(null,null,Row.of("B",1),Row.of("A",1)),result.getMaterializedTable());
      assertEquals(TypedResult.payload(2),result.snapshot(1));
      assertEquals(Collections.singletonList(Row.of("B",1)),result.retrievePage(1));
      assertEquals(Collections.singletonList(Row.of("A",1)),result.retrievePage(2));
      result.processRecord(Tuple2.of(true,Row.of("C",1)));
      assertEquals(Arrays.asList(Row.of("A",1),Row.of("C",1)),result.getMaterializedTable());
      result.processRecord(Tuple2.of(false,Row.of("A",1)));
      assertEquals(Collections.singletonList(Row.of("C",1)),result.getMaterializedTable());
    }
  finally {
      if (result != null) {
        result.close();
      }
    }
  }
private static class TestMaterializedCollectStreamResult<T> extends MaterializedCollectStreamResult<T> {
    public boolean isRetrieving;
    public TestMaterializedCollectStreamResult(    TypeInformation<Row> outputType,    ExecutionConfig config,    InetAddress gatewayAddress,    int gatewayPort,    int maxRowCount,    int overcommitThreshold){
      super(outputType,config,gatewayAddress,gatewayPort,maxRowCount,overcommitThreshold);
    }
    public TestMaterializedCollectStreamResult(    TypeInformation<Row> outputType,    ExecutionConfig config,    InetAddress gatewayAddress,    int gatewayPort,    int maxRowCount){
      super(outputType,config,gatewayAddress,gatewayPort,maxRowCount);
    }
    @Override protected boolean isRetrieving(){
      return isRetrieving;
    }
    @Override public List<Row> getMaterializedTable(){
      return super.getMaterializedTable();
    }
  }
}
