/** 
 * Tests for the SingleElementPushBackIterator.
 */
public class SingleElementPushBackIteratorTest {
  @Test public void testPushBackIterator(){
    Collection<Integer> init=new ArrayList<>();
    init.add(1);
    init.add(2);
    init.add(4);
    init.add(5);
    SingleElementPushBackIterator<Integer> iterator=new SingleElementPushBackIterator<>(init.iterator());
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(1,(int)iterator.next());
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(2,(int)iterator.next());
    Assert.assertTrue(iterator.hasNext());
    iterator.pushBack(3);
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(3,(int)iterator.next());
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(4,(int)iterator.next());
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(5,(int)iterator.next());
    Assert.assertFalse(iterator.hasNext());
    iterator.pushBack(6);
    Assert.assertTrue(iterator.hasNext());
    Assert.assertEquals(6,(int)iterator.next());
    Assert.assertFalse(iterator.hasNext());
  }
  @Test public void testSingleElementLimitation(){
    Collection<Integer> init=Collections.emptyList();
    SingleElementPushBackIterator<Integer> iterator=new SingleElementPushBackIterator<>(init.iterator());
    Assert.assertFalse(iterator.hasNext());
    iterator.pushBack(1);
    try {
      iterator.pushBack(2);
      Assert.fail("Multiple elements could be pushed back.");
    }
 catch (    IllegalStateException ignored) {
    }
  }
}
