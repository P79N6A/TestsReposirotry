private class InPlaceMutableHashTableWithJavaHashMap<T,K> {
  TypeSerializer<T> serializer;
  TypeComparator<T> comparator;
  ReduceFunction<T> reducer;
  Collector<T> outputCollector;
  HashMap<K,T> map=new HashMap<>();
  public InPlaceMutableHashTableWithJavaHashMap(  TypeSerializer<T> serializer,  TypeComparator<T> comparator,  ReduceFunction<T> reducer,  Collector<T> outputCollector){
    this.serializer=serializer;
    this.comparator=comparator;
    this.reducer=reducer;
    this.outputCollector=outputCollector;
  }
  public void updateTableEntryWithReduce(  T record,  K key) throws Exception {
    record=serializer.copy(record);
    if (!map.containsKey(key)) {
      map.put(key,record);
    }
 else {
      T x=map.get(key);
      x=reducer.reduce(x,record);
      map.put(key,x);
    }
  }
  public void emitAndReset(){
    for (    T record : map.values()) {
      outputCollector.collect(record);
    }
    map.clear();
  }
}
