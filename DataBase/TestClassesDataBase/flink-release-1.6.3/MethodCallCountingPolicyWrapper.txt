/** 
 * A wrapper of a  {@link RollingPolicy} which counts how many times each method of the policy was calledand in how many of them it decided to roll.
 */
private static class MethodCallCountingPolicyWrapper<IN,BucketID> implements RollingPolicy<IN,BucketID> {
  private static final long serialVersionUID=1L;
  private final RollingPolicy<IN,BucketID> originalPolicy;
  private long onCheckpointCallCounter;
  private long onCheckpointRollCounter;
  private long onEventCallCounter;
  private long onEventRollCounter;
  private long onProcessingTimeCallCounter;
  private long onProcessingTimeRollCounter;
  MethodCallCountingPolicyWrapper(  final RollingPolicy<IN,BucketID> policy){
    this.originalPolicy=Preconditions.checkNotNull(policy);
    this.onCheckpointCallCounter=0L;
    this.onCheckpointRollCounter=0L;
    this.onEventCallCounter=0L;
    this.onEventRollCounter=0L;
    this.onProcessingTimeCallCounter=0L;
    this.onProcessingTimeRollCounter=0L;
  }
  @Override public boolean shouldRollOnCheckpoint(  PartFileInfo<BucketID> partFileState) throws IOException {
    final boolean shouldRoll=originalPolicy.shouldRollOnCheckpoint(partFileState);
    this.onCheckpointCallCounter++;
    if (shouldRoll) {
      this.onCheckpointRollCounter++;
    }
    return shouldRoll;
  }
  @Override public boolean shouldRollOnEvent(  PartFileInfo<BucketID> partFileState,  IN element) throws IOException {
    final boolean shouldRoll=originalPolicy.shouldRollOnEvent(partFileState,element);
    this.onEventCallCounter++;
    if (shouldRoll) {
      this.onEventRollCounter++;
    }
    return shouldRoll;
  }
  @Override public boolean shouldRollOnProcessingTime(  PartFileInfo<BucketID> partFileState,  long currentTime) throws IOException {
    final boolean shouldRoll=originalPolicy.shouldRollOnProcessingTime(partFileState,currentTime);
    this.onProcessingTimeCallCounter++;
    if (shouldRoll) {
      this.onProcessingTimeRollCounter++;
    }
    return shouldRoll;
  }
  void verifyCallCounters(  final long onCheckpointCalls,  final long onCheckpointRolls,  final long onEventCalls,  final long onEventRolls,  final long onProcessingTimeCalls,  final long onProcessingTimeRolls){
    Assert.assertEquals(onCheckpointCalls,onCheckpointCallCounter);
    Assert.assertEquals(onCheckpointRolls,onCheckpointRollCounter);
    Assert.assertEquals(onEventCalls,onEventCallCounter);
    Assert.assertEquals(onEventRolls,onEventRollCounter);
    Assert.assertEquals(onProcessingTimeCalls,onProcessingTimeCallCounter);
    Assert.assertEquals(onProcessingTimeRolls,onProcessingTimeRollCounter);
  }
}
