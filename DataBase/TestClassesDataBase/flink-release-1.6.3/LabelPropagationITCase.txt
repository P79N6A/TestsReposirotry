/** 
 * Tests for  {@link LabelPropagation}.
 */
@RunWith(Parameterized.class) public class LabelPropagationITCase extends MultipleProgramsTestBase {
  public LabelPropagationITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testSingleIteration() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,NullValue> inputGraph=Graph.fromDataSet(LabelPropagationData.getDefaultVertexSet(env),LabelPropagationData.getDefaultEdgeDataSet(env),env);
    List<Vertex<Long,Long>> result=inputGraph.run(new LabelPropagation<>(1)).collect();
    expectedResult=LabelPropagationData.LABELS_AFTER_1_ITERATION;
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testTieBreaker() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,NullValue> inputGraph=Graph.fromDataSet(LabelPropagationData.getTieVertexSet(env),LabelPropagationData.getTieEdgeDataSet(env),env);
    List<Vertex<Long,Long>> result=inputGraph.run(new LabelPropagation<>(1)).collect();
    expectedResult=LabelPropagationData.LABELS_WITH_TIE;
    compareResultAsTuples(result,expectedResult);
  }
}
