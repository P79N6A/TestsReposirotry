/** 
 * Runs tests to ensure that a cluster is shutdown properly.
 */
public class ClusterShutdownITCase extends TestLogger {
  private static ActorSystem system;
  private static Configuration config=new Configuration();
  private HighAvailabilityServices highAvailabilityServices;
  @Before public void setupTest(){
    highAvailabilityServices=new EmbeddedHaServices(TestingUtils.defaultExecutor());
  }
  @After public void tearDownTest() throws Exception {
    highAvailabilityServices.closeAndCleanupAllData();
    highAvailabilityServices=null;
  }
  @BeforeClass public static void setup(){
    system=AkkaUtils.createActorSystem(AkkaUtils.getDefaultAkkaConfig());
  }
  @AfterClass public static void teardown(){
    JavaTestKit.shutdownActorSystem(system);
  }
  /** 
 * Tests a faked cluster shutdown procedure without the ResourceManager.
 */
  @Test public void testClusterShutdownWithoutResourceManager(){
    new JavaTestKit(system){
{
        new Within(duration("30 seconds")){
          @Override protected void run(){
            ActorGateway jobManager=null;
            ActorGateway taskManager=null;
            ActorGateway forwardingActor=null;
            try {
              jobManager=TestingUtils.createJobManager(system,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),config,highAvailabilityServices,"jobmanager1");
              forwardingActor=TestingUtils.createForwardingActor(system,getTestActor(),jobManager.leaderSessionID(),Option.<String>empty());
              jobManager.tell(TestingMessages.getNotifyOfComponentShutdown(),forwardingActor);
              taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,config,true,true);
              taskManager.tell(TestingMessages.getNotifyOfComponentShutdown(),forwardingActor);
              jobManager.tell(new StopCluster(ApplicationStatus.SUCCEEDED,"Shutting down."),forwardingActor);
              expectMsgAllOf(new TestingMessages.ComponentShutdown(taskManager.actor()),new TestingMessages.ComponentShutdown(jobManager.actor()),StopClusterSuccessful.getInstance());
            }
  finally {
              TestingUtils.stopActorGatewaysGracefully(Arrays.asList(jobManager,taskManager,forwardingActor));
            }
          }
        }
;
      }
    }
;
  }
  /** 
 * Tests a faked cluster shutdown procedure with the ResourceManager.
 */
  @Test public void testClusterShutdownWithResourceManager(){
    new JavaTestKit(system){
{
        new Within(duration("30 seconds")){
          @Override protected void run(){
            ActorGateway jobManager=null;
            ActorGateway taskManager=null;
            ActorGateway resourceManager=null;
            ActorGateway forwardingActor=null;
            try {
              jobManager=TestingUtils.createJobManager(system,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),config,highAvailabilityServices,"jobmanager2");
              forwardingActor=TestingUtils.createForwardingActor(system,getTestActor(),jobManager.leaderSessionID(),Option.<String>empty());
              jobManager.tell(TestingMessages.getNotifyOfComponentShutdown(),forwardingActor);
              taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,config,true,true);
              taskManager.tell(TestingMessages.getNotifyOfComponentShutdown(),forwardingActor);
              resourceManager=TestingUtils.createResourceManager(system,config,highAvailabilityServices);
              resourceManager.tell(TestingMessages.getNotifyOfComponentShutdown(),forwardingActor);
              resourceManager.tell(new TestingResourceManager.NotifyWhenResourceManagerConnected(),forwardingActor);
              expectMsgEquals(Acknowledge.get());
              jobManager.tell(new StopCluster(ApplicationStatus.SUCCEEDED,"Shutting down."),forwardingActor);
              expectMsgAllOf(new TestingMessages.ComponentShutdown(taskManager.actor()),new TestingMessages.ComponentShutdown(jobManager.actor()),new TestingMessages.ComponentShutdown(resourceManager.actor()),StopClusterSuccessful.getInstance());
            }
  finally {
              TestingUtils.stopActorGatewaysGracefully(Arrays.asList(jobManager,taskManager,resourceManager,forwardingActor));
            }
          }
        }
;
      }
    }
;
  }
}
