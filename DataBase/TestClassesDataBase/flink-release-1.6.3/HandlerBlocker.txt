/** 
 * This is a helper class for tests that require to have fine-grained control over HTTP requests so that they are not dispatched immediately.
 */
private static class HandlerBlocker {
  private final Time timeout;
  private final CountDownLatch requestArrivedLatch=new CountDownLatch(1);
  private final CountDownLatch finishRequestLatch=new CountDownLatch(1);
  private HandlerBlocker(  final Time timeout){
    this.timeout=checkNotNull(timeout);
  }
  /** 
 * Waits until  {@link #arriveAndBlock()} is called.
 */
  public void awaitRequestToArrive(){
    try {
      assertTrue(requestArrivedLatch.await(timeout.getSize(),timeout.getUnit()));
    }
 catch (    final InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  /** 
 * Signals that the request arrived. This method blocks until  {@link #unblockRequest()} iscalled.
 */
  public void arriveAndBlock(){
    markRequestArrived();
    try {
      assertTrue(finishRequestLatch.await(timeout.getSize(),timeout.getUnit()));
    }
 catch (    final InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  /** 
 * @see #arriveAndBlock()
 */
  public void unblockRequest(){
    finishRequestLatch.countDown();
  }
  private void markRequestArrived(){
    requestArrivedLatch.countDown();
  }
}
