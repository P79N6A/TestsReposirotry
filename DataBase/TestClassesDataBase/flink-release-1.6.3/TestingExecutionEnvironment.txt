private static class TestingExecutionEnvironment extends ExecutionEnvironment {
  private final JsonValidator validator;
  private TestingExecutionEnvironment(  JsonValidator validator){
    this.validator=validator;
  }
  @Override public void startNewSession() throws Exception {
  }
  @Override public JobExecutionResult execute(  String jobName) throws Exception {
    Plan plan=createProgramPlan(jobName);
    Optimizer pc=new Optimizer(new Configuration());
    OptimizedPlan op=pc.compile(plan);
    JobGraphGenerator jgg=new JobGraphGenerator();
    JobGraph jobGraph=jgg.compileJobGraph(op);
    String jsonPlan=JsonPlanGenerator.generatePlan(jobGraph);
    JsonParser parser=new JsonFactory().createJsonParser(jsonPlan);
    while (parser.nextToken() != null) {
    }
    validator.validateJson(jsonPlan);
    throw new AbortError();
  }
  @Override public String getExecutionPlan() throws Exception {
    throw new UnsupportedOperationException();
  }
  public static void setAsNext(  final JsonValidator validator,  final int defaultParallelism){
    initializeContextEnvironment(new ExecutionEnvironmentFactory(){
      @Override public ExecutionEnvironment createExecutionEnvironment(){
        ExecutionEnvironment env=new TestingExecutionEnvironment(validator);
        env.setParallelism(defaultParallelism);
        return env;
      }
    }
);
  }
}
