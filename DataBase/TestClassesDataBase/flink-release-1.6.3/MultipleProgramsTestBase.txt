/** 
 * Base class for unit tests that run multiple tests and want to reuse the same Flink cluster. This saves a significant amount of time, since the startup and shutdown of the Flink clusters (including actor systems, etc) usually dominates the execution of the actual tests. <p>To write a unit test against this test base, simply extend it and add one or more regular test methods and retrieve the ExecutionEnvironment from the context: <pre> {@code}{ {@literal @}Test public void someTest() { ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); // test code env.execute(); } {@literal @}Test public void anotherTest() { ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); // test code env.execute(); } }</pre>
 */
public class MultipleProgramsTestBase extends AbstractTestBase {
  /** 
 * Enum that defines which execution environment to run the next test on: An embedded local flink cluster, or the collection execution backend.
 */
  public enum TestExecutionMode {  CLUSTER,   CLUSTER_OBJECT_REUSE,   COLLECTION}
  protected final TestExecutionMode mode;
  public MultipleProgramsTestBase(  TestExecutionMode mode){
    this.mode=mode;
  }
  @Before public void setupEnvironment(){
    TestEnvironment testEnvironment;
switch (mode) {
case CLUSTER:
      testEnvironment=miniClusterResource.getTestEnvironment();
    testEnvironment.getConfig().disableObjectReuse();
  testEnvironment.setAsContext();
break;
case CLUSTER_OBJECT_REUSE:
testEnvironment=miniClusterResource.getTestEnvironment();
testEnvironment.getConfig().enableObjectReuse();
testEnvironment.setAsContext();
break;
case COLLECTION:
new CollectionTestEnvironment().setAsContext();
break;
}
}
@After public void teardownEnvironment(){
switch (mode) {
case CLUSTER:
case CLUSTER_OBJECT_REUSE:
TestEnvironment.unsetAsContext();
break;
case COLLECTION:
CollectionTestEnvironment.unsetAsContext();
break;
}
}
@Parameterized.Parameters(name="Execution mode = {0}") public static Collection<Object[]> executionModes(){
return Arrays.asList(new Object[]{TestExecutionMode.CLUSTER},new Object[]{TestExecutionMode.COLLECTION});
}
}
