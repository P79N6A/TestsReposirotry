private static class CheckingRestoringSource extends RichSourceFunction<Tuple2<Long,Long>> {
  private static final long serialVersionUID=1L;
  public static final String SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR=CheckingRestoringSource.class + "_RESTORE_CHECK";
  private volatile boolean isRunning=true;
  private final int numElements;
  private String restoredState;
  public CheckingRestoringSource(  int numElements){
    this.numElements=numElements;
  }
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    getRuntimeContext().addAccumulator(SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR,new IntCounter());
  }
  @Override public void run(  SourceContext<Tuple2<Long,Long>> ctx) throws Exception {
    getRuntimeContext().getAccumulator(SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR).add(1);
    ctx.emitWatermark(new Watermark(1000));
synchronized (ctx.getCheckpointLock()) {
      for (long i=0; i < numElements; i++) {
        ctx.collect(new Tuple2<>(i,i));
      }
    }
    while (isRunning) {
      Thread.sleep(20);
    }
  }
  @Override public void cancel(){
    isRunning=false;
  }
}
