public class FlinkDistributionOverlayTest extends ContainerOverlayTestBase {
  @Rule public TemporaryFolder tempFolder=new TemporaryFolder();
  @Test public void testConfigure() throws Exception {
    File binFolder=tempFolder.newFolder("bin");
    File libFolder=tempFolder.newFolder("lib");
    File confFolder=tempFolder.newFolder("conf");
    Path[] files=createPaths(tempFolder.getRoot(),"bin/config.sh","bin/taskmanager.sh","lib/foo.jar","lib/A/foo.jar","lib/B/foo.jar","lib/B/bar.jar");
    ContainerSpecification containerSpecification=new ContainerSpecification();
    FlinkDistributionOverlay overlay=new FlinkDistributionOverlay(binFolder,confFolder,libFolder);
    overlay.configure(containerSpecification);
    for (    Path file : files) {
      checkArtifact(containerSpecification,new Path(TARGET_ROOT,file.toString()));
    }
  }
  @Test public void testBuilderFromEnvironment() throws Exception {
    Configuration conf=new Configuration();
    File binFolder=tempFolder.newFolder("bin");
    File libFolder=tempFolder.newFolder("lib");
    File confFolder=tempFolder.newFolder("conf");
    Map<String,String> map=new HashMap<String,String>(System.getenv());
    map.put(ENV_FLINK_BIN_DIR,binFolder.getAbsolutePath());
    map.put(ENV_FLINK_LIB_DIR,libFolder.getAbsolutePath());
    map.put(ENV_FLINK_CONF_DIR,confFolder.getAbsolutePath());
    CommonTestUtils.setEnv(map);
    FlinkDistributionOverlay.Builder builder=FlinkDistributionOverlay.newBuilder().fromEnvironment(conf);
    assertEquals(binFolder.getAbsolutePath(),builder.flinkBinPath.getAbsolutePath());
    assertEquals(libFolder.getAbsolutePath(),builder.flinkLibPath.getAbsolutePath());
    assertEquals(confFolder.getAbsolutePath(),builder.flinkConfPath.getAbsolutePath());
  }
  @Test public void testBuilderFromEnvironmentBad() throws Exception {
    Configuration conf=new Configuration();
    Map<String,String> map=new HashMap<>(System.getenv());
    map.remove(ENV_FLINK_BIN_DIR);
    map.remove(ENV_FLINK_LIB_DIR);
    map.remove(ENV_FLINK_CONF_DIR);
    CommonTestUtils.setEnv(map);
    try {
      FlinkDistributionOverlay.Builder builder=FlinkDistributionOverlay.newBuilder().fromEnvironment(conf);
      fail();
    }
 catch (    IllegalStateException e) {
    }
  }
}
