public class FileOutputFormatTest {
  @Test public void testCreateNonParallelLocalFS() throws IOException {
    File tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    File tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
    String tmpFilePath=tmpOutPath.toURI().toString();
    DummyFileOutputFormat dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + "/"));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    tmpOutPath.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.testFileName=true;
    Configuration c=new Configuration();
    dfof.configure(c);
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    File customOutFile=new File(tmpOutPath.getAbsolutePath() + "/fancy-1-0.avro");
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(customOutFile.exists() && customOutFile.isFile());
    customOutFile.delete();
    customOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
    customOutFile.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + '/'));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
    tmpOutPath.delete();
  }
  @Test public void testCreateParallelLocalFS() throws IOException {
    File tmpOutPath=null;
    File tmpOutFile=null;
    tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
    String tmpFilePath=tmpOutPath.toURI().toString();
    DummyFileOutputFormat dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    tmpOutPath.mkdir();
    tmpOutFile.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
      fail();
    }
 catch (    Exception e) {
    }
    tmpOutFile.delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + "/"));
    dfof.setWriteMode(WriteMode.NO_OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
  }
  @Test public void testOverwriteNonParallelLocalFS() throws IOException {
    File tmpOutPath=null;
    File tmpOutFile=null;
    tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
    String tmpFilePath=tmpOutPath.toURI().toString();
    DummyFileOutputFormat dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + "/"));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
    tmpOutPath.delete();
    tmpOutPath.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutPath.delete();
    tmpOutFile.delete();
    tmpOutPath.mkdir();
    tmpOutFile.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutPath.delete();
    tmpOutFile.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + "/"));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,1);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
  }
  @Test public void testOverwriteParallelLocalFS() throws IOException {
    File tmpOutPath=null;
    File tmpOutFile=null;
    tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
    String tmpFilePath=tmpOutPath.toURI().toString();
    DummyFileOutputFormat dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    tmpOutPath.mkdir();
    tmpOutFile.createNewFile();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
    dfof=new DummyFileOutputFormat();
    dfof.setOutputFilePath(new Path(tmpFilePath + "/"));
    dfof.setWriteMode(WriteMode.OVERWRITE);
    dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
    dfof.configure(new Configuration());
    try {
      dfof.open(0,2);
      dfof.close();
    }
 catch (    Exception e) {
      fail();
    }
    Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
    Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
    tmpOutFile.delete();
    tmpOutPath.delete();
  }
public static class DummyFileOutputFormat extends FileOutputFormat<IntValue> {
    private static final long serialVersionUID=1L;
    public boolean testFileName=false;
    @Override public void writeRecord(    IntValue record) throws IOException {
    }
    @Override protected String getDirectoryFileName(    int taskNumber){
      if (testFileName) {
        return "fancy-" + (taskNumber + 1) + "-"+ taskNumber+ ".avro";
      }
 else {
        return super.getDirectoryFileName(taskNumber);
      }
    }
  }
}
