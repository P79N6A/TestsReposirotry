/** 
 * Dummy iteration to test that the supersteps are correctly incremented and can be retrieved from inside the scatter and gather functions. All vertices start with value 1 and increase their value by 1 in each iteration.
 */
@SuppressWarnings("serial") public class CollectionModeSuperstepITCase extends TestLogger {
  @Test public void testProgram() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.createCollectionsEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env).mapVertices(new AssignOneMapper());
    Graph<Long,Long,Long> result=graph.runScatterGatherIteration(new MessageFunction(),new UpdateFunction(),10);
    result.getVertices().map(new VertexToTuple2Map<>()).output(new DiscardingOutputFormat<>());
    env.execute();
  }
private static final class MessageFunction extends ScatterFunction<Long,Long,Long,Long> {
    @Override public void sendMessages(    Vertex<Long,Long> vertex){
      long superstep=getSuperstepNumber();
      Assert.assertEquals(true,vertex.getValue() == superstep);
      sendMessageToAllNeighbors(vertex.getValue());
    }
  }
private static final class UpdateFunction extends GatherFunction<Long,Long,Long> {
    @Override public void updateVertex(    Vertex<Long,Long> vertex,    MessageIterator<Long> inMessages){
      long superstep=getSuperstepNumber();
      Assert.assertEquals(true,vertex.getValue() == superstep);
      setNewVertexValue(vertex.getValue() + 1);
    }
  }
private static final class AssignOneMapper implements MapFunction<Vertex<Long,Long>,Long> {
    public Long map(    Vertex<Long,Long> value){
      return 1L;
    }
  }
}
