public class SimpleSlotTest extends TestLogger {
  @Test public void testStateTransitions(){
    try {
{
        SimpleSlot slot=getSlot();
        assertTrue(slot.isAlive());
        slot.releaseSlot();
        assertFalse(slot.isAlive());
        assertTrue(slot.isCanceled());
        assertTrue(slot.isReleased());
      }
{
        SimpleSlot slot=getSlot();
        assertTrue(slot.isAlive());
        slot.markCancelled();
        assertFalse(slot.isAlive());
        assertTrue(slot.isCanceled());
        assertFalse(slot.isReleased());
        slot.markReleased();
        assertFalse(slot.isAlive());
        assertTrue(slot.isCanceled());
        assertTrue(slot.isReleased());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testSetExecutionVertex(){
    try {
      TestingPayload payload1=new TestingPayload();
      TestingPayload payload2=new TestingPayload();
{
        SimpleSlot slot=getSlot();
        assertTrue(slot.tryAssignPayload(payload1));
        assertEquals(payload1,slot.getPayload());
        assertFalse(slot.tryAssignPayload(payload2));
        assertEquals(payload1,slot.getPayload());
      }
{
        SimpleSlot slot=getSlot();
        assertTrue(slot.markCancelled());
        assertFalse(slot.tryAssignPayload(payload1));
        assertNull(slot.getPayload());
      }
{
        SimpleSlot slot=getSlot();
        assertTrue(slot.markCancelled());
        assertTrue(slot.markReleased());
        assertFalse(slot.tryAssignPayload(payload1));
        assertNull(slot.getPayload());
      }
{
        SimpleSlot slot=getSlot();
        slot.releaseSlot();
        assertFalse(slot.tryAssignPayload(payload1));
        assertNull(slot.getPayload());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  public static SimpleSlot getSlot() throws Exception {
    ResourceID resourceID=ResourceID.generate();
    HardwareDescription hardwareDescription=new HardwareDescription(4,2L * 1024 * 1024* 1024,1024 * 1024 * 1024,512 * 1024 * 1024);
    InetAddress address=InetAddress.getByName("127.0.0.1");
    TaskManagerLocation connection=new TaskManagerLocation(resourceID,address,10001);
    Instance instance=new Instance(new ActorTaskManagerGateway(DummyActorGateway.INSTANCE),connection,new InstanceID(),hardwareDescription,1);
    return instance.allocateSimpleSlot();
  }
}
