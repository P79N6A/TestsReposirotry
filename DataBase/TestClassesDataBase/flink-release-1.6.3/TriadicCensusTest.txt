/** 
 * Tests for  {@link TriadicCensus}.
 */
public class TriadicCensusTest extends AsmTestBase {
  @Test public void testWithUndirectedSimpleGraph() throws Exception {
    Result expectedResult=new Result(3,0,8,0,0,0,0,0,0,0,7,0,0,0,0,2);
    Result triadCensus=new TriadicCensus<IntValue,NullValue,NullValue>().run(undirectedSimpleGraph).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithDirectedSimpleGraph() throws Exception {
    Result expectedResult=new Result(3,8,0,1,2,4,0,0,2,0,0,0,0,0,0,0);
    Result triadCensus=new TriadicCensus<IntValue,NullValue,NullValue>().run(directedSimpleGraph).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithCompleteGraph() throws Exception {
    long expectedDegree=completeGraphVertexCount - 1;
    long expectedCount=completeGraphVertexCount * CombinatoricsUtils.binomialCoefficient((int)expectedDegree,2) / 3;
    Result expectedResult=new Result(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,expectedCount);
    Result triadCensus=new TriadicCensus<LongValue,NullValue,NullValue>().run(completeGraph).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    Result expectedResult=new Result(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    Result triadCensus=new TriadicCensus<LongValue,NullValue,NullValue>().run(emptyGraphWithVertices).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    Result expectedResult=new Result(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    Result triadCensus=new TriadicCensus<LongValue,NullValue,NullValue>().run(emptyGraphWithoutVertices).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithUndirectedRMatGraph() throws Exception {
    Result expectedResult=new Result(113_435_893,0,7_616_063,0,0,0,0,0,0,0,778_295,0,0,0,0,75_049);
    Result triadCensus=new TriadicCensus<LongValue,NullValue,NullValue>().run(undirectedRMatGraph(10,16)).execute();
    assertEquals(expectedResult,triadCensus);
  }
  @Test public void testWithDirectedRMatGraph() throws Exception {
    Result expectedResult=new Result(113_435_893,6_632_528,983_535,118_574,118_566,237_767,129_773,130_041,16_981,5_535,43_574,7_449,7_587,15_178,17_368,4_951);
    Result triadCensus=new TriadicCensus<LongValue,NullValue,NullValue>().run(directedRMatGraph(10,16)).execute();
    assertEquals(expectedResult,triadCensus);
  }
}
