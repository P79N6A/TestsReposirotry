private static final class BlockingSourceContext<T> implements SourceContext<T> {
  private final ReentrantLock lock=new ReentrantLock();
  private final OneShotLatch inBlocking=new OneShotLatch();
  @Override public void collect(  T element){
    block();
  }
  @Override public void collectWithTimestamp(  T element,  long timestamp){
    block();
  }
  @Override public void emitWatermark(  Watermark mark){
    block();
  }
  @Override public void markAsTemporarilyIdle(){
    throw new UnsupportedOperationException();
  }
  @Override public Object getCheckpointLock(){
    return new Object();
  }
  @Override public void close(){
  }
  void waitTillHasBlocker() throws InterruptedException {
    inBlocking.await();
  }
  boolean isStillBlocking(){
    return lock.isLocked();
  }
  @SuppressWarnings({"InfiniteLoopStatement","SynchronizationOnLocalVariableOrMethodParameter"}) private void block(){
    lock.lock();
    try {
      inBlocking.trigger();
      final Object o=new Object();
      while (true) {
synchronized (o) {
          o.wait();
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
 finally {
      lock.unlock();
    }
  }
}
