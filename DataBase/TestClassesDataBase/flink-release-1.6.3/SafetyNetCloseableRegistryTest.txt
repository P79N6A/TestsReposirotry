/** 
 * Tests for the  {@link SafetyNetCloseableRegistry}.
 */
public class SafetyNetCloseableRegistryTest extends AbstractCloseableRegistryTest<WrappingProxyCloseable<? extends Closeable>,SafetyNetCloseableRegistry.PhantomDelegatingCloseableRef> {
  @Rule public final TemporaryFolder tmpFolder=new TemporaryFolder();
  @Override protected WrappingProxyCloseable<? extends Closeable> createCloseable(){
    return new WrappingProxyCloseable<Closeable>(){
      @Override public void close() throws IOException {
      }
      @Override public Closeable getWrappedDelegate(){
        return this;
      }
    }
;
  }
  @Override protected AbstractCloseableRegistry<WrappingProxyCloseable<? extends Closeable>,SafetyNetCloseableRegistry.PhantomDelegatingCloseableRef> createRegistry(){
    return new SafetyNetCloseableRegistry();
  }
  @Override protected AbstractCloseableRegistryTest.ProducerThread<WrappingProxyCloseable<? extends Closeable>,SafetyNetCloseableRegistry.PhantomDelegatingCloseableRef> createProducerThread(  AbstractCloseableRegistry<WrappingProxyCloseable<? extends Closeable>,SafetyNetCloseableRegistry.PhantomDelegatingCloseableRef> registry,  AtomicInteger unclosedCounter,  int maxStreams){
    return new AbstractCloseableRegistryTest.ProducerThread<WrappingProxyCloseable<? extends Closeable>,SafetyNetCloseableRegistry.PhantomDelegatingCloseableRef>(registry,unclosedCounter,maxStreams){
      int count=0;
      @Override protected void createAndRegisterStream() throws IOException {
        String debug=Thread.currentThread().getName() + " " + count;
        TestStream testStream=new TestStream(refCount);
        @SuppressWarnings("unused") ClosingFSDataInputStream pis=ClosingFSDataInputStream.wrapSafe(testStream,(SafetyNetCloseableRegistry)registry,debug);
        ++count;
      }
    }
;
  }
  @After public void tearDown(){
    Assert.assertFalse(SafetyNetCloseableRegistry.isReaperThreadRunning());
  }
  @Test public void testCorrectScopesForSafetyNet() throws Exception {
    CheckedThread t1=new CheckedThread(){
      @Override public void go() throws Exception {
        try {
          FileSystem fs1=FileSystem.getLocalFileSystem();
          Assert.assertFalse(fs1 instanceof SafetyNetWrapperFileSystem);
          FileSystemSafetyNet.initializeSafetyNetForThread();
          fs1=FileSystem.getLocalFileSystem();
          Assert.assertTrue(fs1 instanceof SafetyNetWrapperFileSystem);
          Path tmp=new Path(tmpFolder.newFolder().toURI().toString(),"test_file");
          try (FSDataOutputStream stream=fs1.create(tmp,FileSystem.WriteMode.NO_OVERWRITE)){
            CheckedThread t2=new CheckedThread(){
              @Override public void go(){
                FileSystem fs2=FileSystem.getLocalFileSystem();
                Assert.assertFalse(fs2 instanceof SafetyNetWrapperFileSystem);
                FileSystemSafetyNet.initializeSafetyNetForThread();
                fs2=FileSystem.getLocalFileSystem();
                Assert.assertTrue(fs2 instanceof SafetyNetWrapperFileSystem);
                FileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();
                fs2=FileSystem.getLocalFileSystem();
                Assert.assertFalse(fs2 instanceof SafetyNetWrapperFileSystem);
              }
            }
;
            t2.start();
            t2.sync();
            stream.write(42);
            FileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();
            try {
              stream.write(43);
              Assert.fail();
            }
 catch (            IOException ignore) {
            }
            fs1=FileSystem.getLocalFileSystem();
            Assert.assertFalse(fs1 instanceof SafetyNetWrapperFileSystem);
          }
  finally {
            fs1.delete(tmp,false);
          }
        }
 catch (        Exception e) {
          Assert.fail(ExceptionUtils.stringifyException(e));
        }
      }
    }
;
    t1.start();
    t1.sync();
  }
  @Test public void testSafetyNetClose() throws Exception {
    setup(20);
    startThreads();
    joinThreads();
    for (int i=0; i < 5 && unclosedCounter.get() > 0; ++i) {
      System.gc();
      Thread.sleep(50);
    }
    Assert.assertEquals(0,unclosedCounter.get());
    closeableRegistry.close();
  }
  @Test public void testReaperThreadSpawnAndStop() throws Exception {
    Assert.assertFalse(SafetyNetCloseableRegistry.isReaperThreadRunning());
    try (SafetyNetCloseableRegistry ignored=new SafetyNetCloseableRegistry()){
      Assert.assertTrue(SafetyNetCloseableRegistry.isReaperThreadRunning());
      try (SafetyNetCloseableRegistry ignored2=new SafetyNetCloseableRegistry()){
        Assert.assertTrue(SafetyNetCloseableRegistry.isReaperThreadRunning());
      }
       Assert.assertTrue(SafetyNetCloseableRegistry.isReaperThreadRunning());
    }
     Assert.assertFalse(SafetyNetCloseableRegistry.isReaperThreadRunning());
  }
}
