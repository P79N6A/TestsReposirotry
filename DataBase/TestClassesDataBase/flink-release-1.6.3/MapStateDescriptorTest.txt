/** 
 * Tests for the  {@link MapStateDescriptor}.
 */
public class MapStateDescriptorTest {
  @Test public void testMapStateDescriptor() throws Exception {
    TypeSerializer<Integer> keySerializer=new KryoSerializer<>(Integer.class,new ExecutionConfig());
    TypeSerializer<String> valueSerializer=new KryoSerializer<>(String.class,new ExecutionConfig());
    MapStateDescriptor<Integer,String> descr=new MapStateDescriptor<>("testName",keySerializer,valueSerializer);
    assertEquals("testName",descr.getName());
    assertNotNull(descr.getSerializer());
    assertTrue(descr.getSerializer() instanceof MapSerializer);
    assertNotNull(descr.getKeySerializer());
    assertEquals(keySerializer,descr.getKeySerializer());
    assertNotNull(descr.getValueSerializer());
    assertEquals(valueSerializer,descr.getValueSerializer());
    MapStateDescriptor<Integer,String> copy=CommonTestUtils.createCopySerializable(descr);
    assertEquals("testName",copy.getName());
    assertNotNull(copy.getSerializer());
    assertTrue(copy.getSerializer() instanceof MapSerializer);
    assertNotNull(copy.getKeySerializer());
    assertEquals(keySerializer,copy.getKeySerializer());
    assertNotNull(copy.getValueSerializer());
    assertEquals(valueSerializer,copy.getValueSerializer());
  }
  @Test public void testHashCodeEquals() throws Exception {
    final String name="testName";
    MapStateDescriptor<String,String> original=new MapStateDescriptor<>(name,String.class,String.class);
    MapStateDescriptor<String,String> same=new MapStateDescriptor<>(name,String.class,String.class);
    MapStateDescriptor<String,String> sameBySerializer=new MapStateDescriptor<>(name,StringSerializer.INSTANCE,StringSerializer.INSTANCE);
    assertEquals(original.hashCode(),same.hashCode());
    assertEquals(original.hashCode(),sameBySerializer.hashCode());
    assertEquals(original,same);
    assertEquals(original,sameBySerializer);
    MapStateDescriptor<String,String> clone=CommonTestUtils.createCopySerializable(original);
    assertEquals(original,clone);
    clone.initializeSerializerUnlessSet(new ExecutionConfig());
    assertEquals(original,clone);
    original.initializeSerializerUnlessSet(new ExecutionConfig());
    assertEquals(original,same);
  }
  /** 
 * FLINK-6775. <p>Tests that the returned serializer is duplicated. This allows to share the state descriptor.
 */
  @Test public void testSerializerDuplication(){
    TypeSerializer<String> keySerializer=new KryoSerializer<>(String.class,new ExecutionConfig());
    TypeSerializer<Long> valueSerializer=new KryoSerializer<>(Long.class,new ExecutionConfig());
    MapStateDescriptor<String,Long> descr=new MapStateDescriptor<>("foobar",keySerializer,valueSerializer);
    TypeSerializer<String> keySerializerA=descr.getKeySerializer();
    TypeSerializer<String> keySerializerB=descr.getKeySerializer();
    TypeSerializer<Long> valueSerializerA=descr.getValueSerializer();
    TypeSerializer<Long> valueSerializerB=descr.getValueSerializer();
    assertNotSame(keySerializerA,keySerializerB);
    assertNotSame(valueSerializerA,valueSerializerB);
    TypeSerializer<Map<String,Long>> serializerA=descr.getSerializer();
    TypeSerializer<Map<String,Long>> serializerB=descr.getSerializer();
    assertNotSame(serializerA,serializerB);
  }
}
