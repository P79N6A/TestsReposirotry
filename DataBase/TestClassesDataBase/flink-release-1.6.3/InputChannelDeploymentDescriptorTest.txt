/** 
 * Tests for the  {@link InputChannelDeploymentDescriptor}.
 */
public class InputChannelDeploymentDescriptorTest {
  /** 
 * Tests the deployment descriptors for local, remote, and unknown partition locations (with lazy deployment allowed and all execution states for the producers).
 */
  @Test public void testMixedLocalRemoteUnknownDeployment() throws Exception {
    boolean allowLazyDeployment=true;
    ResourceID consumerResourceId=ResourceID.generate();
    ExecutionVertex consumer=mock(ExecutionVertex.class);
    LogicalSlot consumerSlot=mockSlot(consumerResourceId);
    for (    ExecutionState state : ExecutionState.values()) {
      ExecutionVertex localProducer=mockExecutionVertex(state,consumerResourceId);
      IntermediateResultPartition localPartition=mockPartition(localProducer);
      ResultPartitionID localPartitionId=new ResultPartitionID(localPartition.getPartitionId(),localProducer.getCurrentExecutionAttempt().getAttemptId());
      ExecutionEdge localEdge=new ExecutionEdge(localPartition,consumer,0);
      ExecutionVertex remoteProducer=mockExecutionVertex(state,ResourceID.generate());
      IntermediateResultPartition remotePartition=mockPartition(remoteProducer);
      ResultPartitionID remotePartitionId=new ResultPartitionID(remotePartition.getPartitionId(),remoteProducer.getCurrentExecutionAttempt().getAttemptId());
      ConnectionID remoteConnectionId=new ConnectionID(remoteProducer.getCurrentAssignedResource().getTaskManagerLocation(),0);
      ExecutionEdge remoteEdge=new ExecutionEdge(remotePartition,consumer,1);
      ExecutionVertex unknownProducer=mockExecutionVertex(state,null);
      IntermediateResultPartition unknownPartition=mockPartition(unknownProducer);
      ResultPartitionID unknownPartitionId=new ResultPartitionID(unknownPartition.getPartitionId(),unknownProducer.getCurrentExecutionAttempt().getAttemptId());
      ExecutionEdge unknownEdge=new ExecutionEdge(unknownPartition,consumer,2);
      InputChannelDeploymentDescriptor[] desc=InputChannelDeploymentDescriptor.fromEdges(new ExecutionEdge[]{localEdge,remoteEdge,unknownEdge},consumerSlot.getTaskManagerLocation().getResourceID(),allowLazyDeployment);
      assertEquals(3,desc.length);
      if (state == ExecutionState.RUNNING || state == ExecutionState.FINISHED || state == ExecutionState.SCHEDULED || state == ExecutionState.DEPLOYING) {
        assertEquals(localPartitionId,desc[0].getConsumedPartitionId());
        assertTrue(desc[0].getConsumedPartitionLocation().isLocal());
        assertNull(desc[0].getConsumedPartitionLocation().getConnectionId());
        assertEquals(remotePartitionId,desc[1].getConsumedPartitionId());
        assertTrue(desc[1].getConsumedPartitionLocation().isRemote());
        assertEquals(remoteConnectionId,desc[1].getConsumedPartitionLocation().getConnectionId());
      }
 else {
        assertEquals(localPartitionId,desc[0].getConsumedPartitionId());
        assertTrue(desc[0].getConsumedPartitionLocation().isUnknown());
        assertNull(desc[0].getConsumedPartitionLocation().getConnectionId());
        assertEquals(remotePartitionId,desc[1].getConsumedPartitionId());
        assertTrue(desc[1].getConsumedPartitionLocation().isUnknown());
        assertNull(desc[1].getConsumedPartitionLocation().getConnectionId());
      }
      assertEquals(unknownPartitionId,desc[2].getConsumedPartitionId());
      assertTrue(desc[2].getConsumedPartitionLocation().isUnknown());
      assertNull(desc[2].getConsumedPartitionLocation().getConnectionId());
    }
  }
  @Test public void testUnknownChannelWithoutLazyDeploymentThrows() throws Exception {
    ResourceID consumerResourceId=ResourceID.generate();
    ExecutionVertex consumer=mock(ExecutionVertex.class);
    LogicalSlot consumerSlot=mockSlot(consumerResourceId);
    ExecutionVertex unknownProducer=mockExecutionVertex(ExecutionState.CREATED,null);
    IntermediateResultPartition unknownPartition=mockPartition(unknownProducer);
    ResultPartitionID unknownPartitionId=new ResultPartitionID(unknownPartition.getPartitionId(),unknownProducer.getCurrentExecutionAttempt().getAttemptId());
    ExecutionEdge unknownEdge=new ExecutionEdge(unknownPartition,consumer,2);
    boolean allowLazyDeployment=true;
    InputChannelDeploymentDescriptor[] desc=InputChannelDeploymentDescriptor.fromEdges(new ExecutionEdge[]{unknownEdge},consumerSlot.getTaskManagerLocation().getResourceID(),allowLazyDeployment);
    assertEquals(1,desc.length);
    assertEquals(unknownPartitionId,desc[0].getConsumedPartitionId());
    assertTrue(desc[0].getConsumedPartitionLocation().isUnknown());
    assertNull(desc[0].getConsumedPartitionLocation().getConnectionId());
    try {
      allowLazyDeployment=false;
      InputChannelDeploymentDescriptor.fromEdges(new ExecutionEdge[]{unknownEdge},consumerSlot.getTaskManagerLocation().getResourceID(),allowLazyDeployment);
      fail("Did not throw expected ExecutionGraphException");
    }
 catch (    ExecutionGraphException ignored) {
    }
  }
  private static LogicalSlot mockSlot(  ResourceID resourceId){
    LogicalSlot slot=mock(LogicalSlot.class);
    when(slot.getTaskManagerLocation()).thenReturn(new TaskManagerLocation(resourceId,InetAddress.getLoopbackAddress(),5000));
    return slot;
  }
  private static ExecutionVertex mockExecutionVertex(  ExecutionState state,  ResourceID resourceId){
    ExecutionVertex vertex=mock(ExecutionVertex.class);
    Execution exec=mock(Execution.class);
    when(exec.getState()).thenReturn(state);
    when(exec.getAttemptId()).thenReturn(new ExecutionAttemptID());
    if (resourceId != null) {
      LogicalSlot slot=mockSlot(resourceId);
      when(exec.getAssignedResource()).thenReturn(slot);
      when(vertex.getCurrentAssignedResource()).thenReturn(slot);
    }
 else {
      when(exec.getAssignedResource()).thenReturn(null);
      when(vertex.getCurrentAssignedResource()).thenReturn(null);
    }
    when(vertex.getCurrentExecutionAttempt()).thenReturn(exec);
    return vertex;
  }
  private static IntermediateResultPartition mockPartition(  ExecutionVertex producer){
    IntermediateResultPartition partition=mock(IntermediateResultPartition.class);
    when(partition.isConsumable()).thenReturn(true);
    IntermediateResult result=mock(IntermediateResult.class);
    when(result.getConnectionIndex()).thenReturn(0);
    when(partition.getIntermediateResult()).thenReturn(result);
    when(partition.getPartitionId()).thenReturn(new IntermediateResultPartitionID());
    when(partition.getProducer()).thenReturn(producer);
    return partition;
  }
}
