/** 
 * Tests for the JobExceptionsHandler.
 */
public class JobExceptionsHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new JobExceptionsHandler.JobExceptionsJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/exceptions",archive.getPath());
    compareExceptions(originalJob,archive.getJson());
  }
  @Test public void testGetPaths(){
    JobExceptionsHandler handler=new JobExceptionsHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/exceptions",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    String json=JobExceptionsHandler.createJobExceptionsJson(originalJob);
    compareExceptions(originalJob,json);
  }
  private static void compareExceptions(  AccessExecutionGraph originalJob,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    Assert.assertEquals(originalJob.getFailureInfo().getExceptionAsString(),result.get("root-exception").asText());
    Assert.assertEquals(originalJob.getFailureInfo().getTimestamp(),result.get("timestamp").asLong());
    ArrayNode exceptions=(ArrayNode)result.get("all-exceptions");
    int x=0;
    for (    AccessExecutionVertex expectedSubtask : originalJob.getAllExecutionVertices()) {
      if (!expectedSubtask.getFailureCauseAsString().equals(ExceptionUtils.STRINGIFIED_NULL_EXCEPTION)) {
        JsonNode exception=exceptions.get(x);
        Assert.assertEquals(expectedSubtask.getFailureCauseAsString(),exception.get("exception").asText());
        Assert.assertEquals(expectedSubtask.getStateTimestamp(ExecutionState.FAILED),exception.get("timestamp").asLong());
        Assert.assertEquals(expectedSubtask.getTaskNameWithSubtaskIndex(),exception.get("task").asText());
        TaskManagerLocation location=expectedSubtask.getCurrentAssignedResourceLocation();
        String expectedLocationString=location.getFQDNHostname() + ':' + location.dataPort();
        Assert.assertEquals(expectedLocationString,exception.get("location").asText());
      }
      x++;
    }
    Assert.assertEquals(x > JobExceptionsHandler.MAX_NUMBER_EXCEPTION_TO_REPORT,result.get("truncated").asBoolean());
  }
}
