/** 
 * Tests for the STOP command.
 */
public class CliFrontendStopTest extends CliFrontendTestBase {
  @BeforeClass public static void setup(){
    CliFrontendTestUtils.pipeSystemOutToNull();
  }
  @AfterClass public static void shutdown(){
    CliFrontendTestUtils.restoreSystemOut();
  }
  @Test public void testStop() throws Exception {
    JobID jid=new JobID();
    String jidString=jid.toString();
    String[] parameters={jidString};
    final ClusterClient<String> clusterClient=createClusterClient(null);
    MockedCliFrontend testFrontend=new MockedCliFrontend(clusterClient);
    testFrontend.stop(parameters);
    Mockito.verify(clusterClient,times(1)).stop(any(JobID.class));
  }
  @Test(expected=CliArgsException.class) public void testUnrecognizedOption() throws Exception {
    String[] parameters={"-v","-l"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.stop(parameters);
  }
  @Test(expected=CliArgsException.class) public void testMissingJobId() throws Exception {
    String[] parameters={};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.stop(parameters);
  }
  @Test public void testUnknownJobId() throws Exception {
    JobID jid=new JobID();
    String[] parameters={jid.toString()};
    String expectedMessage="Test exception";
    FlinkException testException=new FlinkException(expectedMessage);
    final ClusterClient<String> clusterClient=createClusterClient(testException);
    MockedCliFrontend testFrontend=new MockedCliFrontend(clusterClient);
    try {
      testFrontend.stop(parameters);
      fail("Should have failed.");
    }
 catch (    FlinkException e) {
      assertTrue(ExceptionUtils.findThrowableWithMessage(e,expectedMessage).isPresent());
    }
  }
  private static ClusterClient<String> createClusterClient(  @Nullable Exception exception) throws Exception {
    final ClusterClient<String> clusterClient=mock(ClusterClient.class);
    if (exception != null) {
      doThrow(exception).when(clusterClient).stop(any(JobID.class));
    }
    return clusterClient;
  }
}
