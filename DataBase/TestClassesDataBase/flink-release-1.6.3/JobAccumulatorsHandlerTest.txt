/** 
 * Tests for the JobAccumulatorsHandler.
 */
public class JobAccumulatorsHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new JobAccumulatorsHandler.JobAccumulatorsJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/accumulators",archive.getPath());
    compareAccumulators(originalJob,archive.getJson());
  }
  @Test public void testGetPaths(){
    JobAccumulatorsHandler handler=new JobAccumulatorsHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/accumulators",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    String json=JobAccumulatorsHandler.createJobAccumulatorsJson(originalJob);
    compareAccumulators(originalJob,json);
  }
  private static void compareAccumulators(  AccessExecutionGraph originalJob,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    ArrayNode accs=(ArrayNode)result.get("job-accumulators");
    Assert.assertEquals(0,accs.size());
    Assert.assertTrue(originalJob.getAccumulatorResultsStringified().length > 0);
    ArchivedJobGenerationUtils.compareStringifiedAccumulators(originalJob.getAccumulatorResultsStringified(),(ArrayNode)result.get("user-task-accumulators"));
  }
}
