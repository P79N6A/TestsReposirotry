/** 
 * Integration tests for a streaming  {@link OutputSelector}.
 */
public class DirectedOutputITCase extends AbstractTestBase {
  private static final String TEN="ten";
  private static final String ODD="odd";
  private static final String EVEN="even";
  private static final String NON_SELECTED="nonSelected";
static final class MyOutputSelector implements OutputSelector<Long> {
    private static final long serialVersionUID=1L;
    List<String> outputs=new ArrayList<String>();
    @Override public Iterable<String> select(    Long value){
      outputs.clear();
      if (value % 2 == 0) {
        outputs.add(EVEN);
      }
 else {
        outputs.add(ODD);
      }
      if (value == 10L) {
        outputs.add(TEN);
      }
      if (value == 11L) {
        outputs.add(NON_SELECTED);
      }
      return outputs;
    }
  }
  @Test public void outputSelectorTest() throws Exception {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(3);
    TestListResultSink<Long> evenSink=new TestListResultSink<Long>();
    TestListResultSink<Long> oddAndTenSink=new TestListResultSink<Long>();
    TestListResultSink<Long> evenAndOddSink=new TestListResultSink<Long>();
    TestListResultSink<Long> allSink=new TestListResultSink<Long>();
    SplitStream<Long> source=env.generateSequence(1,11).split(new MyOutputSelector());
    source.select(EVEN).addSink(evenSink);
    source.select(ODD,TEN).addSink(oddAndTenSink);
    source.select(EVEN,ODD).addSink(evenAndOddSink);
    source.addSink(allSink);
    env.execute();
    assertEquals(Arrays.asList(2L,4L,6L,8L,10L),evenSink.getSortedResult());
    assertEquals(Arrays.asList(1L,3L,5L,7L,9L,10L,11L),oddAndTenSink.getSortedResult());
    assertEquals(Arrays.asList(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L,11L),evenAndOddSink.getSortedResult());
    assertEquals(Arrays.asList(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L,11L),allSink.getSortedResult());
  }
}
