/** 
 * Tests for the  {@link FsCheckpointStorage}, which implements the checkpoint storage aspects of the  {@link FsStateBackend}.
 */
public class FsCheckpointStorageTest extends AbstractFileCheckpointStorageTestBase {
  private static final int FILE_SIZE_THRESHOLD=1024;
  @Override protected CheckpointStorage createCheckpointStorage(  Path checkpointDir) throws Exception {
    return new FsCheckpointStorage(checkpointDir,null,new JobID(),FILE_SIZE_THRESHOLD);
  }
  @Override protected CheckpointStorage createCheckpointStorageWithSavepointDir(  Path checkpointDir,  Path savepointDir) throws Exception {
    return new FsCheckpointStorage(checkpointDir,savepointDir,new JobID(),FILE_SIZE_THRESHOLD);
  }
  @Test public void testSavepointsInOneDirectoryDefaultLocation() throws Exception {
    final Path defaultSavepointDir=Path.fromLocalFile(tmp.newFolder());
    final FsCheckpointStorage storage=new FsCheckpointStorage(Path.fromLocalFile(tmp.newFolder()),defaultSavepointDir,new JobID(),FILE_SIZE_THRESHOLD);
    final FsCheckpointStorageLocation savepointLocation=(FsCheckpointStorageLocation)storage.initializeLocationForSavepoint(52452L,null);
    assertParent(defaultSavepointDir,savepointLocation.getCheckpointDirectory());
    assertParent(defaultSavepointDir,savepointLocation.getSharedStateDirectory());
    assertParent(defaultSavepointDir,savepointLocation.getTaskOwnedStateDirectory());
    savepointLocation.disposeOnFailure();
  }
  @Test public void testSavepointsInOneDirectoryCustomLocation() throws Exception {
    final Path savepointDir=Path.fromLocalFile(tmp.newFolder());
    final FsCheckpointStorage storage=new FsCheckpointStorage(Path.fromLocalFile(tmp.newFolder()),null,new JobID(),FILE_SIZE_THRESHOLD);
    final FsCheckpointStorageLocation savepointLocation=(FsCheckpointStorageLocation)storage.initializeLocationForSavepoint(52452L,savepointDir.toString());
    assertParent(savepointDir,savepointLocation.getCheckpointDirectory());
    assertParent(savepointDir,savepointLocation.getSharedStateDirectory());
    assertParent(savepointDir,savepointLocation.getTaskOwnedStateDirectory());
    savepointLocation.disposeOnFailure();
  }
  @Test public void testTaskOwnedStateStream() throws Exception {
    final List<String> state=Arrays.asList("Flopsy","Mopsy","Cotton Tail","Peter");
    final FsCheckpointStorage storage=new FsCheckpointStorage(Path.fromLocalFile(tmp.newFolder()),null,new JobID(),10);
    final StreamStateHandle stateHandle;
    try (CheckpointStateOutputStream stream=storage.createTaskOwnedStateStream()){
      assertTrue(stream instanceof FsCheckpointStateOutputStream);
      new ObjectOutputStream(stream).writeObject(state);
      stateHandle=stream.closeAndGetHandle();
    }
     FileStateHandle fileStateHandle=(FileStateHandle)stateHandle;
    String parentDirName=fileStateHandle.getFilePath().getParent().getName();
    assertEquals(FsCheckpointStorage.CHECKPOINT_TASK_OWNED_STATE_DIR,parentDirName);
    try (ObjectInputStream in=new ObjectInputStream(stateHandle.openInputStream())){
      assertEquals(state,in.readObject());
    }
   }
  @Test public void testDirectoriesForExclusiveAndSharedState() throws Exception {
    final FileSystem fs=LocalFileSystem.getSharedInstance();
    final Path checkpointDir=randomTempPath();
    final Path sharedStateDir=randomTempPath();
    FsCheckpointStorageLocation storageLocation=new FsCheckpointStorageLocation(fs,checkpointDir,sharedStateDir,randomTempPath(),CheckpointStorageLocationReference.getDefault(),FILE_SIZE_THRESHOLD);
    assertNotEquals(storageLocation.getCheckpointDirectory(),storageLocation.getSharedStateDirectory());
    assertEquals(0,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
    assertEquals(0,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
    CheckpointStateOutputStream exclusiveStream=storageLocation.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);
    exclusiveStream.write(42);
    exclusiveStream.flush();
    StreamStateHandle exclusiveHandle=exclusiveStream.closeAndGetHandle();
    assertEquals(1,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
    assertEquals(0,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
    CheckpointStateOutputStream sharedStream=storageLocation.createCheckpointStateOutputStream(CheckpointedStateScope.SHARED);
    sharedStream.write(42);
    sharedStream.flush();
    StreamStateHandle sharedHandle=sharedStream.closeAndGetHandle();
    assertEquals(1,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
    assertEquals(1,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
    exclusiveHandle.discardState();
    sharedHandle.discardState();
  }
  /** 
 * This test checks that no mkdirs is called by the checkpoint storage location when resolved.
 */
  @Test public void testStorageLocationDoesNotMkdirs() throws Exception {
    FsCheckpointStorage storage=new FsCheckpointStorage(randomTempPath(),null,new JobID(),FILE_SIZE_THRESHOLD);
    File baseDir=new File(storage.getCheckpointsDirectory().getPath());
    assertTrue(baseDir.exists());
    FsCheckpointStorageLocation location=(FsCheckpointStorageLocation)storage.resolveCheckpointStorageLocation(177,CheckpointStorageLocationReference.getDefault());
    Path checkpointPath=location.getCheckpointDirectory();
    File checkpointDir=new File(checkpointPath.getPath());
    assertFalse(checkpointDir.exists());
  }
  @Test public void testResolveCheckpointStorageLocation() throws Exception {
    final FileSystem checkpointFileSystem=mock(FileSystem.class);
    final FsCheckpointStorage storage=new FsCheckpointStorage(new TestingPath("hdfs:///checkpoint/",checkpointFileSystem),null,new JobID(),FILE_SIZE_THRESHOLD);
    final FsCheckpointStorageLocation checkpointStreamFactory=(FsCheckpointStorageLocation)storage.resolveCheckpointStorageLocation(1L,CheckpointStorageLocationReference.getDefault());
    assertEquals(checkpointFileSystem,checkpointStreamFactory.getFileSystem());
    final CheckpointStorageLocationReference savepointLocationReference=AbstractFsCheckpointStorage.encodePathAsReference(new Path("file:///savepoint/"));
    final FsCheckpointStorageLocation savepointStreamFactory=(FsCheckpointStorageLocation)storage.resolveCheckpointStorageLocation(2L,savepointLocationReference);
    final FileSystem fileSystem=savepointStreamFactory.getFileSystem();
    assertTrue(fileSystem instanceof LocalFileSystem);
  }
  private void assertParent(  Path parent,  Path child){
    Path path=new Path(parent,child.getName());
    assertEquals(path,child);
  }
private static final class TestingPath extends Path {
    private static final long serialVersionUID=2560119808844230488L;
    @SuppressWarnings("TransientFieldNotInitialized") @Nonnull private final transient FileSystem fileSystem;
    TestingPath(    String pathString,    @Nonnull FileSystem fileSystem){
      super(pathString);
      this.fileSystem=fileSystem;
    }
    @Override public FileSystem getFileSystem() throws IOException {
      return fileSystem;
    }
  }
}
