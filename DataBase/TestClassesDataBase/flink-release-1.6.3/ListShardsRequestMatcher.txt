private static class ListShardsRequestMatcher extends TypeSafeDiagnosingMatcher<ListShardsRequest> {
  private final String shardId;
  private final String nextToken;
  ListShardsRequestMatcher(  String shardIdArg,  String nextTokenArg){
    shardId=shardIdArg;
    nextToken=nextTokenArg;
  }
  @Override protected boolean matchesSafely(  final ListShardsRequest listShardsRequest,  final Description description){
    if (shardId == null) {
      if (listShardsRequest.getExclusiveStartShardId() != null) {
        return false;
      }
    }
 else {
      if (!shardId.equals(listShardsRequest.getExclusiveStartShardId())) {
        return false;
      }
    }
    if (listShardsRequest.getNextToken() != null) {
      if (!(listShardsRequest.getStreamName() == null && listShardsRequest.getExclusiveStartShardId() == null)) {
        return false;
      }
      if (!listShardsRequest.getNextToken().equals(nextToken)) {
        return false;
      }
    }
 else {
      return nextToken == null;
    }
    return true;
  }
  @Override public void describeTo(  final Description description){
    description.appendText("A ListShardsRequest with a shardId: ").appendValue(shardId).appendText(" and empty nextToken");
  }
}
