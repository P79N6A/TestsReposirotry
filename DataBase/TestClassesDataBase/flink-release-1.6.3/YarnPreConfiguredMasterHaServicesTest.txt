/** 
 * Tests for YarnPreConfiguredMasterNonHaServices.
 */
public class YarnPreConfiguredMasterHaServicesTest extends TestLogger {
  @ClassRule public static final TemporaryFolder TEMP_DIR=new TemporaryFolder();
  private static MiniDFSCluster hdfsCluster;
  private static Path hdfsRootPath;
  private org.apache.hadoop.conf.Configuration hadoopConfig;
  @BeforeClass public static void createHDFS() throws Exception {
    Assume.assumeTrue(!OperatingSystem.isWindows());
    final File tempDir=TEMP_DIR.newFolder();
    org.apache.hadoop.conf.Configuration hdConf=new org.apache.hadoop.conf.Configuration();
    hdConf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR,tempDir.getAbsolutePath());
    MiniDFSCluster.Builder builder=new MiniDFSCluster.Builder(hdConf);
    hdfsCluster=builder.build();
    hdfsRootPath=new Path(hdfsCluster.getURI());
  }
  @AfterClass public static void destroyHDFS(){
    if (hdfsCluster != null) {
      hdfsCluster.shutdown();
    }
    hdfsCluster=null;
    hdfsRootPath=null;
  }
  @Before public void initConfig(){
    hadoopConfig=new org.apache.hadoop.conf.Configuration();
    hadoopConfig.set(org.apache.hadoop.fs.FileSystem.FS_DEFAULT_NAME_KEY,hdfsRootPath.toString());
  }
  @Test public void testMissingRmConfiguration() throws Exception {
    final Configuration flinkConfig=new Configuration();
    try {
      new YarnPreConfiguredMasterNonHaServices(flinkConfig,hadoopConfig,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
      fail();
    }
 catch (    IllegalConfigurationException e) {
    }
    flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS,"localhost");
    try {
      new YarnPreConfiguredMasterNonHaServices(flinkConfig,hadoopConfig,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
      fail();
    }
 catch (    IllegalConfigurationException e) {
    }
    flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT,1427);
    new YarnPreConfiguredMasterNonHaServices(flinkConfig,hadoopConfig,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).closeAndCleanupAllData();
  }
  @Test public void testCloseAndCleanup() throws Exception {
    final Configuration flinkConfig=new Configuration();
    flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS,"localhost");
    flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT,1427);
    YarnHighAvailabilityServices services=new YarnPreConfiguredMasterNonHaServices(flinkConfig,hadoopConfig,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
    services.closeAndCleanupAllData();
    final FileSystem fileSystem=hdfsRootPath.getFileSystem();
    final Path workDir=new Path(hdfsCluster.getFileSystem().getWorkingDirectory().toString());
    try {
      fileSystem.getFileStatus(new Path(workDir,YarnHighAvailabilityServices.FLINK_RECOVERY_DATA_DIR));
      fail("Flink recovery data directory still exists");
    }
 catch (    FileNotFoundException e) {
    }
    assertTrue(services.isClosed());
    try {
      services.closeAndCleanupAllData();
      fail("should fail with an IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void testCallsOnClosedServices() throws Exception {
    final Configuration flinkConfig=new Configuration();
    flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS,"localhost");
    flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT,1427);
    YarnHighAvailabilityServices services=new YarnPreConfiguredMasterNonHaServices(flinkConfig,hadoopConfig,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION);
    try {
      services.getSubmittedJobGraphStore();
      fail();
    }
 catch (    UnsupportedOperationException ignored) {
    }
    services.close();
    try {
      services.createBlobStore();
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getCheckpointRecoveryFactory();
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getJobManagerLeaderElectionService(new JobID());
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getJobManagerLeaderRetriever(new JobID());
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getRunningJobsRegistry();
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getResourceManagerLeaderElectionService();
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
    try {
      services.getResourceManagerLeaderRetriever();
      fail();
    }
 catch (    IllegalStateException ignored) {
    }
  }
}
