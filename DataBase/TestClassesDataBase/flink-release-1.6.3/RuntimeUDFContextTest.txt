/** 
 * Test for the  {@link RuntimeUDFContext}.
 */
public class RuntimeUDFContextTest {
  private final TaskInfo taskInfo=new TaskInfo("test name",3,1,3,0);
  @Test public void testBroadcastVariableNotFound(){
    try {
      RuntimeUDFContext ctx=new RuntimeUDFContext(taskInfo,getClass().getClassLoader(),new ExecutionConfig(),new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup());
      assertFalse(ctx.hasBroadcastVariable("some name"));
      try {
        ctx.getBroadcastVariable("some name");
        fail("should throw an exception");
      }
 catch (      IllegalArgumentException e) {
      }
      try {
        ctx.getBroadcastVariableWithInitializer("some name",new BroadcastVariableInitializer<Object,Object>(){
          public Object initializeBroadcastVariable(          Iterable<Object> data){
            return null;
          }
        }
);
        fail("should throw an exception");
      }
 catch (      IllegalArgumentException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testBroadcastVariableSimple(){
    try {
      RuntimeUDFContext ctx=new RuntimeUDFContext(taskInfo,getClass().getClassLoader(),new ExecutionConfig(),new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup());
      ctx.setBroadcastVariable("name1",Arrays.asList(1,2,3,4));
      ctx.setBroadcastVariable("name2",Arrays.asList(1.0,2.0,3.0,4.0));
      assertTrue(ctx.hasBroadcastVariable("name1"));
      assertTrue(ctx.hasBroadcastVariable("name2"));
      List<Integer> list1=ctx.getBroadcastVariable("name1");
      List<Double> list2=ctx.getBroadcastVariable("name2");
      assertEquals(Arrays.asList(1,2,3,4),list1);
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list2);
      List<Integer> list3=ctx.getBroadcastVariable("name1");
      List<Double> list4=ctx.getBroadcastVariable("name2");
      assertEquals(Arrays.asList(1,2,3,4),list3);
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list4);
      List<Integer> list5=ctx.getBroadcastVariable("name1");
      List<Double> list6=ctx.getBroadcastVariable("name2");
      assertEquals(Arrays.asList(1,2,3,4),list5);
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list6);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testBroadcastVariableWithInitializer(){
    try {
      RuntimeUDFContext ctx=new RuntimeUDFContext(taskInfo,getClass().getClassLoader(),new ExecutionConfig(),new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup());
      ctx.setBroadcastVariable("name",Arrays.asList(1,2,3,4));
      List<Double> list=ctx.getBroadcastVariableWithInitializer("name",new ConvertingInitializer());
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list);
      List<Double> list2=ctx.getBroadcastVariableWithInitializer("name",new ConvertingInitializer());
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list2);
      List<Double> list3=ctx.getBroadcastVariable("name");
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list3);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testResetBroadcastVariableWithInitializer(){
    try {
      RuntimeUDFContext ctx=new RuntimeUDFContext(taskInfo,getClass().getClassLoader(),new ExecutionConfig(),new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup());
      ctx.setBroadcastVariable("name",Arrays.asList(1,2,3,4));
      List<Double> list=ctx.getBroadcastVariableWithInitializer("name",new ConvertingInitializer());
      assertEquals(Arrays.asList(1.0,2.0,3.0,4.0),list);
      ctx.setBroadcastVariable("name",Arrays.asList(2,3,4,5));
      List<Double> list2=ctx.getBroadcastVariableWithInitializer("name",new ConvertingInitializer());
      assertEquals(Arrays.asList(2.0,3.0,4.0,5.0),list2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testBroadcastVariableWithInitializerAndMismatch(){
    try {
      RuntimeUDFContext ctx=new RuntimeUDFContext(taskInfo,getClass().getClassLoader(),new ExecutionConfig(),new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup());
      ctx.setBroadcastVariable("name",Arrays.asList(1,2,3,4));
      int sum=ctx.getBroadcastVariableWithInitializer("name",new SumInitializer());
      assertEquals(10,sum);
      try {
        ctx.getBroadcastVariable("name");
        fail("should throw an exception");
      }
 catch (      IllegalStateException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
private static final class ConvertingInitializer implements BroadcastVariableInitializer<Integer,List<Double>> {
    @Override public List<Double> initializeBroadcastVariable(    Iterable<Integer> data){
      List<Double> list=new ArrayList<>();
      for (      Integer i : data) {
        list.add(i.doubleValue());
      }
      return list;
    }
  }
private static final class SumInitializer implements BroadcastVariableInitializer<Integer,Integer> {
    @Override public Integer initializeBroadcastVariable(    Iterable<Integer> data){
      int sum=0;
      for (      Integer i : data) {
        sum+=i;
      }
      return sum;
    }
  }
}
