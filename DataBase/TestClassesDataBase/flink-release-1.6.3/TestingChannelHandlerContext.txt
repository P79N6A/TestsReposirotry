/** 
 * Testing implementation of  {@link ChannelHandlerContext}.
 */
private static final class TestingChannelHandlerContext implements ChannelHandlerContext {
  final File outputFile;
  private TestingChannelHandlerContext(  File outputFile){
    this.outputFile=Preconditions.checkNotNull(outputFile);
  }
  @Override public ChannelFuture write(  Object msg,  ChannelPromise promise){
    if (msg instanceof DefaultFileRegion) {
      final DefaultFileRegion defaultFileRegion=(DefaultFileRegion)msg;
      try (final FileOutputStream fileOutputStream=new FileOutputStream(outputFile)){
        fileOutputStream.getChannel();
        defaultFileRegion.transferTo(fileOutputStream.getChannel(),0L);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    return new DefaultChannelPromise(new EmbeddedChannel());
  }
  @Override public EventExecutor executor(){
    return ImmediateEventExecutor.INSTANCE;
  }
  @Override public ChannelFuture write(  Object msg){
    return write(msg,null);
  }
  @Override public ChannelFuture writeAndFlush(  Object msg,  ChannelPromise promise){
    final ChannelFuture channelFuture=write(msg,promise);
    flush();
    return channelFuture;
  }
  @Override public ChannelFuture writeAndFlush(  Object msg){
    return writeAndFlush(msg,null);
  }
  @Override public ChannelPipeline pipeline(){
    return mock(ChannelPipeline.class);
  }
  @Override public Channel channel(){
    return null;
  }
  @Override public String name(){
    return null;
  }
  @Override public ChannelHandler handler(){
    return null;
  }
  @Override public boolean isRemoved(){
    return false;
  }
  @Override public ChannelHandlerContext fireChannelRegistered(){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelUnregistered(){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelActive(){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelInactive(){
    return null;
  }
  @Override public ChannelHandlerContext fireExceptionCaught(  Throwable cause){
    return null;
  }
  @Override public ChannelHandlerContext fireUserEventTriggered(  Object event){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelRead(  Object msg){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelReadComplete(){
    return null;
  }
  @Override public ChannelHandlerContext fireChannelWritabilityChanged(){
    return null;
  }
  @Override public ChannelFuture bind(  SocketAddress localAddress){
    return null;
  }
  @Override public ChannelFuture connect(  SocketAddress remoteAddress){
    return null;
  }
  @Override public ChannelFuture connect(  SocketAddress remoteAddress,  SocketAddress localAddress){
    return null;
  }
  @Override public ChannelFuture disconnect(){
    return null;
  }
  @Override public ChannelFuture close(){
    return null;
  }
  @Override public ChannelFuture deregister(){
    return null;
  }
  @Override public ChannelFuture bind(  SocketAddress localAddress,  ChannelPromise promise){
    return null;
  }
  @Override public ChannelFuture connect(  SocketAddress remoteAddress,  ChannelPromise promise){
    return null;
  }
  @Override public ChannelFuture connect(  SocketAddress remoteAddress,  SocketAddress localAddress,  ChannelPromise promise){
    return null;
  }
  @Override public ChannelFuture disconnect(  ChannelPromise promise){
    return null;
  }
  @Override public ChannelFuture close(  ChannelPromise promise){
    return null;
  }
  @Override public ChannelFuture deregister(  ChannelPromise promise){
    return null;
  }
  @Override public ChannelHandlerContext read(){
    return null;
  }
  @Override public ChannelHandlerContext flush(){
    return null;
  }
  @Override public ByteBufAllocator alloc(){
    return null;
  }
  @Override public ChannelPromise newPromise(){
    return null;
  }
  @Override public ChannelProgressivePromise newProgressivePromise(){
    return null;
  }
  @Override public ChannelFuture newSucceededFuture(){
    return null;
  }
  @Override public ChannelFuture newFailedFuture(  Throwable cause){
    return null;
  }
  @Override public ChannelPromise voidPromise(){
    return null;
  }
  @Override public <T>Attribute<T> attr(  AttributeKey<T> key){
    return null;
  }
  @Override public <T>boolean hasAttr(  AttributeKey<T> attributeKey){
    return false;
  }
}
