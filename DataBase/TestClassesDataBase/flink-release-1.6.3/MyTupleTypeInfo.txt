public static class MyTupleTypeInfo<T0,T1> extends TypeInformation<MyTuple<T0,T1>> {
  private TypeInformation field0;
  private TypeInformation field1;
  public TypeInformation getField0(){
    return field0;
  }
  public TypeInformation getField1(){
    return field1;
  }
  public MyTupleTypeInfo(  TypeInformation field0,  TypeInformation field1){
    this.field0=field0;
    this.field1=field1;
  }
  @Override public boolean isBasicType(){
    return false;
  }
  @Override public boolean isTupleType(){
    return false;
  }
  @Override public int getArity(){
    return 0;
  }
  @Override public int getTotalFields(){
    return 0;
  }
  @Override public Class<MyTuple<T0,T1>> getTypeClass(){
    return null;
  }
  @Override public boolean isKeyType(){
    return false;
  }
  @Override public TypeSerializer<MyTuple<T0,T1>> createSerializer(  ExecutionConfig config){
    return null;
  }
  @Override public String toString(){
    return null;
  }
  @Override public boolean equals(  Object obj){
    return false;
  }
  @Override public int hashCode(){
    return 0;
  }
  @Override public boolean canEqual(  Object obj){
    return false;
  }
  @Override public Map<String,TypeInformation<?>> getGenericParameters(){
    Map<String,TypeInformation<?>> map=new HashMap<>(2);
    map.put("T0",field0);
    map.put("T1",field1);
    return map;
  }
}
