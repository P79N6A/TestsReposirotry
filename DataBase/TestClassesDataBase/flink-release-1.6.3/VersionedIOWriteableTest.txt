public class VersionedIOWriteableTest {
  @Test public void testReadSameVersion() throws Exception {
    String payload="test";
    TestWriteable testWriteable=new TestWriteable(1,payload);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      testWriteable.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     testWriteable=new TestWriteable(1);
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      testWriteable.read(new DataInputViewStreamWrapper(in));
    }
     Assert.assertEquals(payload,testWriteable.getData());
  }
  @Test public void testReadCompatibleVersion() throws Exception {
    String payload="test";
    TestWriteable testWriteable=new TestWriteable(1,payload);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      testWriteable.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     testWriteable=new TestWriteable(2){
      @Override public int[] getCompatibleVersions(){
        return new int[]{1,2};
      }
    }
;
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      testWriteable.read(new DataInputViewStreamWrapper(in));
    }
     Assert.assertEquals(payload,testWriteable.getData());
  }
  @Test public void testReadMismatchVersion() throws Exception {
    String payload="test";
    TestWriteable testWriteable=new TestWriteable(1,payload);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      testWriteable.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     testWriteable=new TestWriteable(2);
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      testWriteable.read(new DataInputViewStreamWrapper(in));
      Assert.fail("Version mismatch expected.");
    }
 catch (    VersionMismatchException ignored) {
    }
    Assert.assertEquals(null,testWriteable.getData());
  }
static class TestWriteable extends VersionedIOReadableWritable {
    private final int version;
    private String data;
    public TestWriteable(    int version){
      this(version,null);
    }
    public TestWriteable(    int version,    String data){
      this.version=version;
      this.data=data;
    }
    @Override public int getVersion(){
      return version;
    }
    @Override public void write(    DataOutputView out) throws IOException {
      super.write(out);
      out.writeUTF(data);
    }
    @Override public void read(    DataInputView in) throws IOException {
      super.read(in);
      this.data=in.readUTF();
    }
    public String getData(){
      return data;
    }
  }
}
