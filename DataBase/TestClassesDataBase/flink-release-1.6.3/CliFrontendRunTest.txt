/** 
 * Tests for the RUN command.
 */
public class CliFrontendRunTest extends CliFrontendTestBase {
  @BeforeClass public static void init(){
    CliFrontendTestUtils.pipeSystemOutToNull();
  }
  @AfterClass public static void shutdown(){
    CliFrontendTestUtils.restoreSystemOut();
  }
  @Test public void testRun() throws Exception {
    final Configuration configuration=getConfiguration();
{
      String[] parameters={"-v",getTestJarPath()};
      verifyCliFrontend(getCli(configuration),parameters,1,true,false);
    }
{
      String[] parameters={"-v","-p","42",getTestJarPath()};
      verifyCliFrontend(getCli(configuration),parameters,42,true,false);
    }
{
      String[] parameters={"-p","2","-q",getTestJarPath()};
      verifyCliFrontend(getCli(configuration),parameters,2,false,false);
    }
{
      String[] parameters={"-p","2","-d",getTestJarPath()};
      verifyCliFrontend(getCli(configuration),parameters,2,true,true);
    }
{
      String[] parameters={"-s","expectedSavepointPath",getTestJarPath()};
      RunOptions options=CliFrontendParser.parseRunCommand(parameters);
      SavepointRestoreSettings savepointSettings=options.getSavepointRestoreSettings();
      assertTrue(savepointSettings.restoreSavepoint());
      assertEquals("expectedSavepointPath",savepointSettings.getRestorePath());
      assertFalse(savepointSettings.allowNonRestoredState());
    }
{
      String[] parameters={"-s","expectedSavepointPath","-n",getTestJarPath()};
      RunOptions options=CliFrontendParser.parseRunCommand(parameters);
      SavepointRestoreSettings savepointSettings=options.getSavepointRestoreSettings();
      assertTrue(savepointSettings.restoreSavepoint());
      assertEquals("expectedSavepointPath",savepointSettings.getRestorePath());
      assertTrue(savepointSettings.allowNonRestoredState());
    }
{
      String[] parameters={getTestJarPath(),"-arg1","value1","justavalue","--arg2","value2"};
      RunOptions options=CliFrontendParser.parseRunCommand(parameters);
      assertEquals("-arg1",options.getProgramArgs()[0]);
      assertEquals("value1",options.getProgramArgs()[1]);
      assertEquals("justavalue",options.getProgramArgs()[2]);
      assertEquals("--arg2",options.getProgramArgs()[3]);
      assertEquals("value2",options.getProgramArgs()[4]);
    }
  }
  @Test(expected=CliArgsException.class) public void testUnrecognizedOption() throws Exception {
    String[] parameters={"-v","-l","-a","some","program","arguments"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.run(parameters);
  }
  @Test(expected=CliArgsException.class) public void testInvalidParallelismOption() throws Exception {
    String[] parameters={"-v","-p","text",getTestJarPath()};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.run(parameters);
  }
  @Test(expected=CliArgsException.class) public void testParallelismWithOverflow() throws Exception {
    String[] parameters={"-v","-p","475871387138",getTestJarPath()};
    Configuration configuration=new Configuration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.run(parameters);
  }
  public static void verifyCliFrontend(  AbstractCustomCommandLine<?> cli,  String[] parameters,  int expectedParallelism,  boolean logging,  boolean isDetached) throws Exception {
    RunTestingCliFrontend testFrontend=new RunTestingCliFrontend(cli,expectedParallelism,logging,isDetached);
    testFrontend.run(parameters);
  }
private static final class RunTestingCliFrontend extends CliFrontend {
    private final int expectedParallelism;
    private final boolean sysoutLogging;
    private final boolean isDetached;
    private RunTestingCliFrontend(    AbstractCustomCommandLine<?> cli,    int expectedParallelism,    boolean logging,    boolean isDetached) throws Exception {
      super(cli.getConfiguration(),Collections.singletonList(cli));
      this.expectedParallelism=expectedParallelism;
      this.sysoutLogging=logging;
      this.isDetached=isDetached;
    }
    @Override protected void executeProgram(    PackagedProgram program,    ClusterClient client,    int parallelism){
      assertEquals(isDetached,client.isDetached());
      assertEquals(sysoutLogging,client.getPrintStatusDuringExecution());
      assertEquals(expectedParallelism,parallelism);
    }
  }
}
