/** 
 * Tests for the  {@link UnionIterator}.
 */
public class UnionIteratorTest {
  @Test public void testUnion(){
    try {
      UnionIterator<Integer> iter=new UnionIterator<>();
      assertFalse(iter.iterator().hasNext());
      iter.clear();
      try {
        iter.iterator().next();
        fail("should fail with an exception");
      }
 catch (      NoSuchElementException e) {
      }
      iter.clear();
      iter.addList(Arrays.asList(1,2,3,4,5,6,7));
      iter.addList(Collections.<Integer>emptyList());
      iter.addList(Arrays.asList(8,9,10,11));
      int val=1;
      for (      int i : iter) {
        assertEquals(val++,i);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testTraversableOnce(){
    try {
      UnionIterator<Integer> iter=new UnionIterator<>();
      iter.iterator();
      try {
        iter.iterator();
        fail("should fail with an exception");
      }
 catch (      TraversableOnceException e) {
      }
      try {
        iter.iterator();
        fail("should fail with an exception");
      }
 catch (      TraversableOnceException e) {
      }
      iter.clear();
      iter.iterator();
      try {
        iter.iterator();
        fail("should fail with an exception");
      }
 catch (      TraversableOnceException e) {
      }
      try {
        iter.iterator();
        fail("should fail with an exception");
      }
 catch (      TraversableOnceException e) {
      }
      iter.clear();
      iter.addList(Arrays.asList(1,2,3,4,5,6,7));
      Iterator<Integer> ints=iter.iterator();
      assertNotNull(ints.next());
      assertNotNull(ints.next());
      assertNotNull(ints.next());
      try {
        iter.iterator();
        fail("should fail with an exception");
      }
 catch (      TraversableOnceException e) {
      }
      iter.clear();
      assertFalse(iter.iterator().hasNext());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
