/** 
 * Tests for the keyed state backend and operator state backend, as created by the {@link FsStateBackend}.
 */
public class FileStateBackendTest extends StateBackendTestBase<FsStateBackend> {
  @Rule public final TemporaryFolder tempFolder=new TemporaryFolder();
  @Override protected FsStateBackend getStateBackend() throws Exception {
    File checkpointPath=tempFolder.newFolder();
    return new FsStateBackend(checkpointPath.toURI(),useAsyncMode());
  }
  protected boolean useAsyncMode(){
    return false;
  }
  @Override protected boolean isSerializerPresenceRequiredOnRestore(){
    return true;
  }
  @Override @Test public void testValueStateRestoreWithWrongSerializers(){
  }
  @Override @Test public void testListStateRestoreWithWrongSerializers(){
  }
  @Override @Test public void testReducingStateRestoreWithWrongSerializers(){
  }
  @Override @Test public void testMapStateRestoreWithWrongSerializers(){
  }
  @Ignore @Test public void testConcurrentMapIfQueryable() throws Exception {
    super.testConcurrentMapIfQueryable();
  }
}
