/** 
 * A separate thread creating  {@link #NO_OF_FILES} files, one file every {@link #INTERVAL} milliseconds.It serves for testing the file monitoring functionality of the  {@link ContinuousFileMonitoringFunction}. The files are filled with data by the  {@link #fillWithData(String,String,int,String)} method.
 */
private class FileCreator extends Thread {
  private final Set<Path> filesCreated=new HashSet<>();
  private final Map<Integer,String> fileContents=new HashMap<>();
  /** 
 * The modification time of the last created file. 
 */
  private long lastCreatedModTime=Long.MIN_VALUE;
  public void run(){
    try {
      for (int i=0; i < NO_OF_FILES; i++) {
        Tuple2<org.apache.hadoop.fs.Path,String> tmpFile;
        long modTime;
        do {
          Thread.sleep(50);
          tmpFile=fillWithData(localFsURI,"file",i,"This is test line.");
          modTime=localFs.getFileStatus(tmpFile.f0).getModificationTime();
          if (modTime <= lastCreatedModTime) {
            localFs.delete(tmpFile.f0,false);
          }
        }
 while (modTime <= lastCreatedModTime);
        lastCreatedModTime=modTime;
        org.apache.hadoop.fs.Path file=new org.apache.hadoop.fs.Path(localFsURI + "/file" + i);
        localFs.rename(tmpFile.f0,file);
        Assert.assertTrue(localFs.exists(file));
        filesCreated.add(file);
        fileContents.put(i,tmpFile.f1);
      }
    }
 catch (    IOException|InterruptedException e) {
      e.printStackTrace();
    }
  }
  void clean() throws IOException {
    assert (localFs != null);
    for (    org.apache.hadoop.fs.Path path : filesCreated) {
      localFs.delete(path,false);
    }
    fileContents.clear();
  }
  Map<Integer,String> getFileContent(){
    return this.fileContents;
  }
}
