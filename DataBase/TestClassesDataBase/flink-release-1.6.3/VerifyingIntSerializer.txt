/** 
 * Int serializer which verifies that the given classloader is set for the copy operation
 */
private static final class VerifyingIntSerializer extends TypeSerializer<Integer> {
  private static final long serialVersionUID=-5344563614550163898L;
  private transient ClassLoader classLoader;
  private transient AtomicInteger atomicInteger;
  private VerifyingIntSerializer(  ClassLoader classLoader,  AtomicInteger atomicInteger){
    this.classLoader=Preconditions.checkNotNull(classLoader);
    this.atomicInteger=Preconditions.checkNotNull(atomicInteger);
  }
  @Override public boolean isImmutableType(){
    return false;
  }
  @Override public TypeSerializer<Integer> duplicate(){
    return this;
  }
  @Override public Integer createInstance(){
    return 0;
  }
  @Override public Integer copy(  Integer from){
    assertEquals(classLoader,Thread.currentThread().getContextClassLoader());
    atomicInteger.incrementAndGet();
    return IntSerializer.INSTANCE.copy(from);
  }
  @Override public Integer copy(  Integer from,  Integer reuse){
    assertEquals(classLoader,Thread.currentThread().getContextClassLoader());
    atomicInteger.incrementAndGet();
    return IntSerializer.INSTANCE.copy(from,reuse);
  }
  @Override public int getLength(){
    return IntSerializer.INSTANCE.getLength();
  }
  @Override public void serialize(  Integer record,  DataOutputView target) throws IOException {
    IntSerializer.INSTANCE.serialize(record,target);
  }
  @Override public Integer deserialize(  DataInputView source) throws IOException {
    return IntSerializer.INSTANCE.deserialize(source);
  }
  @Override public Integer deserialize(  Integer reuse,  DataInputView source) throws IOException {
    return IntSerializer.INSTANCE.deserialize(reuse,source);
  }
  @Override public void copy(  DataInputView source,  DataOutputView target) throws IOException {
    assertEquals(classLoader,Thread.currentThread().getContextClassLoader());
    atomicInteger.incrementAndGet();
    IntSerializer.INSTANCE.copy(source,target);
  }
  @Override public boolean equals(  Object obj){
    if (obj instanceof VerifyingIntSerializer) {
      return ((VerifyingIntSerializer)obj).canEqual(this);
    }
 else {
      return false;
    }
  }
  @Override public boolean canEqual(  Object obj){
    return obj instanceof VerifyingIntSerializer;
  }
  @Override public int hashCode(){
    return getClass().hashCode();
  }
  @Override public TypeSerializerConfigSnapshot snapshotConfiguration(){
    return IntSerializer.INSTANCE.snapshotConfiguration();
  }
  @Override public CompatibilityResult<Integer> ensureCompatibility(  TypeSerializerConfigSnapshot configSnapshot){
    return IntSerializer.INSTANCE.ensureCompatibility(configSnapshot);
  }
}
