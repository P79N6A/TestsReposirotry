/** 
 * External resource for tests that require an instance of RocksDB.
 */
public class RocksDBResource extends ExternalResource {
  /** 
 * Factory for  {@link DBOptions} and {@link ColumnFamilyOptions}. 
 */
  private final OptionsFactory optionsFactory;
  /** 
 * Temporary folder that provides the working directory for the RocksDB instance. 
 */
  private TemporaryFolder temporaryFolder;
  /** 
 * The options for the RocksDB instance. 
 */
  private DBOptions dbOptions;
  /** 
 * The options for column families created with the RocksDB instance. 
 */
  private ColumnFamilyOptions columnFamilyOptions;
  /** 
 * The options for writes. 
 */
  private WriteOptions writeOptions;
  /** 
 * The options for reads. 
 */
  private ReadOptions readOptions;
  /** 
 * The RocksDB instance object. 
 */
  private RocksDB rocksDB;
  /** 
 * List of all column families that have been created with the RocksDB instance. 
 */
  private List<ColumnFamilyHandle> columnFamilyHandles;
  /** 
 * Wrapper for batched writes to the RocksDB instance. 
 */
  private RocksDBWriteBatchWrapper batchWrapper;
  public RocksDBResource(){
    this(new OptionsFactory(){
      @Override public DBOptions createDBOptions(      DBOptions currentOptions){
        return PredefinedOptions.FLASH_SSD_OPTIMIZED.createDBOptions();
      }
      @Override public ColumnFamilyOptions createColumnOptions(      ColumnFamilyOptions currentOptions){
        return PredefinedOptions.FLASH_SSD_OPTIMIZED.createColumnOptions();
      }
    }
);
  }
  public RocksDBResource(  @Nonnull OptionsFactory optionsFactory){
    this.optionsFactory=optionsFactory;
  }
  public ColumnFamilyHandle getDefaultColumnFamily(){
    return columnFamilyHandles.get(0);
  }
  public WriteOptions getWriteOptions(){
    return writeOptions;
  }
  public RocksDB getRocksDB(){
    return rocksDB;
  }
  public ReadOptions getReadOptions(){
    return readOptions;
  }
  public RocksDBWriteBatchWrapper getBatchWrapper(){
    return batchWrapper;
  }
  /** 
 * Creates and returns a new column family with the given name.
 */
  public ColumnFamilyHandle createNewColumnFamily(  String name){
    try {
      final ColumnFamilyHandle columnFamily=rocksDB.createColumnFamily(new ColumnFamilyDescriptor(name.getBytes(),columnFamilyOptions));
      columnFamilyHandles.add(columnFamily);
      return columnFamily;
    }
 catch (    Exception ex) {
      throw new FlinkRuntimeException("Could not create column family.",ex);
    }
  }
  @Override protected void before() throws Throwable {
    this.temporaryFolder=new TemporaryFolder();
    this.temporaryFolder.create();
    final File rocksFolder=temporaryFolder.newFolder();
    this.dbOptions=optionsFactory.createDBOptions(PredefinedOptions.DEFAULT.createDBOptions()).setCreateIfMissing(true);
    this.columnFamilyOptions=optionsFactory.createColumnOptions(PredefinedOptions.DEFAULT.createColumnOptions());
    this.writeOptions=new WriteOptions();
    this.writeOptions.disableWAL();
    this.readOptions=new ReadOptions();
    this.columnFamilyHandles=new ArrayList<>(1);
    this.rocksDB=RocksDB.open(dbOptions,rocksFolder.getAbsolutePath(),Collections.singletonList(new ColumnFamilyDescriptor("default".getBytes(),columnFamilyOptions)),columnFamilyHandles);
    this.batchWrapper=new RocksDBWriteBatchWrapper(rocksDB,writeOptions);
  }
  @Override protected void after(){
    IOUtils.closeQuietly(this.batchWrapper);
    for (    ColumnFamilyHandle columnFamilyHandle : columnFamilyHandles) {
      IOUtils.closeQuietly(columnFamilyHandle);
    }
    IOUtils.closeQuietly(this.rocksDB);
    IOUtils.closeQuietly(this.readOptions);
    IOUtils.closeQuietly(this.writeOptions);
    IOUtils.closeQuietly(this.columnFamilyOptions);
    IOUtils.closeQuietly(this.dbOptions);
    temporaryFolder.delete();
  }
}
