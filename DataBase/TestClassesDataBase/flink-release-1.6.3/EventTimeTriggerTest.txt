/** 
 * Tests for  {@link EventTimeTrigger}.
 */
public class EventTimeTriggerTest {
  /** 
 * Verify that state of separate windows does not leak into other windows.
 */
  @Test public void testWindowSeparationAndFiring() throws Exception {
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(EventTimeTrigger.create(),new TimeWindow.Serializer());
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(2,4)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(2,testHarness.numEventTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    assertEquals(TriggerResult.FIRE,testHarness.advanceWatermark(2,new TimeWindow(0,2)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    assertEquals(TriggerResult.FIRE,testHarness.advanceWatermark(4,new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
  }
  /** 
 * Verify that late elements trigger immediately and also that we don't set a timer for those.
 */
  @Test public void testLateElementTriggersImmediately() throws Exception {
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(EventTimeTrigger.create(),new TimeWindow.Serializer());
    testHarness.advanceWatermark(2);
    assertEquals(TriggerResult.FIRE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
  }
  /** 
 * Verify that clear() does not leak across windows.
 */
  @Test public void testClear() throws Exception {
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(EventTimeTrigger.create(),new TimeWindow.Serializer());
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(2,testHarness.numEventTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    testHarness.clearTriggerState(new TimeWindow(2,4));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    testHarness.clearTriggerState(new TimeWindow(0,2));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
  }
  @Test public void testMergingWindows() throws Exception {
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(EventTimeTrigger.create(),new TimeWindow.Serializer());
    assertTrue(EventTimeTrigger.create().canMerge());
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(2,testHarness.numEventTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    testHarness.mergeWindows(new TimeWindow(0,4),Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,4)));
    assertEquals(TriggerResult.FIRE,testHarness.advanceWatermark(4,new TimeWindow(0,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
  }
  /** 
 * Merging a late window should not register a timer, otherwise we would get two firings: one from onElement() on the merged window and one from the timer.
 */
  @Test public void testMergingLateWindows() throws Exception {
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(EventTimeTrigger.create(),new TimeWindow.Serializer());
    assertTrue(EventTimeTrigger.create().canMerge());
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(2,testHarness.numEventTimeTimers());
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(1,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    testHarness.advanceWatermark(10);
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    testHarness.mergeWindows(new TimeWindow(0,4),Lists.newArrayList(new TimeWindow(0,2),new TimeWindow(2,4)));
    assertEquals(0,testHarness.numStateEntries());
    assertEquals(0,testHarness.numProcessingTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers());
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(2,4)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,4)));
  }
}
