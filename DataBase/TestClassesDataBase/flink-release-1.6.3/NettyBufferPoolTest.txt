/** 
 * Tests for the  {@link NettyBufferPool} wrapper.
 */
public class NettyBufferPoolTest {
  @Test public void testNoHeapAllocations() throws Exception {
    NettyBufferPool nettyBufferPool=new NettyBufferPool(1);
    assertTrue(nettyBufferPool.buffer().isDirect());
    assertTrue(nettyBufferPool.buffer(128).isDirect());
    assertTrue(nettyBufferPool.buffer(128,256).isDirect());
    assertTrue(nettyBufferPool.ioBuffer().isDirect());
    assertTrue(nettyBufferPool.ioBuffer(128).isDirect());
    assertTrue(nettyBufferPool.ioBuffer(128,256).isDirect());
    try {
      nettyBufferPool.heapBuffer();
      fail("Unexpected heap buffer operation");
    }
 catch (    UnsupportedOperationException ignored) {
    }
    try {
      nettyBufferPool.heapBuffer(128);
      fail("Unexpected heap buffer operation");
    }
 catch (    UnsupportedOperationException ignored) {
    }
    try {
      nettyBufferPool.heapBuffer(128,256);
      fail("Unexpected heap buffer operation");
    }
 catch (    UnsupportedOperationException ignored) {
    }
    try {
      nettyBufferPool.compositeHeapBuffer();
      fail("Unexpected heap buffer operation");
    }
 catch (    UnsupportedOperationException ignored) {
    }
    try {
      nettyBufferPool.compositeHeapBuffer(2);
      fail("Unexpected heap buffer operation");
    }
 catch (    UnsupportedOperationException ignored) {
    }
    assertTrue(nettyBufferPool.isDirectBufferPooled());
  }
  @Test public void testAllocationsStatistics() throws Exception {
    NettyBufferPool nettyBufferPool=new NettyBufferPool(1);
    int chunkSize=nettyBufferPool.getChunkSize();
{
      nettyBufferPool.directBuffer(chunkSize - 64);
      long allocated=nettyBufferPool.getNumberOfAllocatedBytes().get();
      assertEquals(chunkSize,allocated);
    }
{
      nettyBufferPool.directBuffer(128);
      long allocated=nettyBufferPool.getNumberOfAllocatedBytes().get();
      assertEquals(2 * chunkSize,allocated);
    }
  }
}
