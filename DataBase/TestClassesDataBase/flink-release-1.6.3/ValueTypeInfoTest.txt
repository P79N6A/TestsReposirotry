/** 
 * Test for  {@link ListTypeInfo}.
 */
public class ValueTypeInfoTest extends TypeInformationTestBase<ValueTypeInfo<?>> {
  @Override protected ValueTypeInfo<?>[] getTestData(){
    return new ValueTypeInfo<?>[]{new ValueTypeInfo<>(TestClass.class),new ValueTypeInfo<>(AlternativeClass.class),new ValueTypeInfo<>(Record.class)};
  }
  @Test public void testValueTypeEqualsWithNull() throws Exception {
    ValueTypeInfo<Record> tpeInfo=new ValueTypeInfo<>(Record.class);
    Assert.assertFalse(tpeInfo.equals(null));
  }
public static class TestClass implements Value {
    private static final long serialVersionUID=-492760806806568285L;
    @Override public void write(    DataOutputView out) throws IOException {
    }
    @Override public void read(    DataInputView in) throws IOException {
    }
  }
public static class AlternativeClass implements Value {
    private static final long serialVersionUID=-163437084575260172L;
    @Override public void write(    DataOutputView out) throws IOException {
    }
    @Override public void read(    DataInputView in) throws IOException {
    }
  }
}
