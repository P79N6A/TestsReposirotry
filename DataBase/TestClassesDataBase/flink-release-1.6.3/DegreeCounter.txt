private static class DegreeCounter implements GroupReduceFunction<Edge,Edge> {
  final ArrayList<Integer> otherVertices=new ArrayList<Integer>();
  final Edge outputEdge=new Edge();
  @Override public void reduce(  Iterable<Edge> edgesIter,  Collector<Edge> out){
    Iterator<Edge> edges=edgesIter.iterator();
    otherVertices.clear();
    Edge edge=edges.next();
    Integer groupVertex=edge.getFirstVertex();
    this.otherVertices.add(edge.getSecondVertex());
    while (edges.hasNext()) {
      edge=edges.next();
      Integer otherVertex=edge.getSecondVertex();
      if (!otherVertices.contains(otherVertex) && !otherVertex.equals(groupVertex)) {
        this.otherVertices.add(otherVertex);
      }
    }
    for (    Integer otherVertex : this.otherVertices) {
      if (groupVertex < otherVertex) {
        outputEdge.setFirstVertex(groupVertex);
        outputEdge.setSecondVertex(otherVertex);
      }
 else {
        outputEdge.setFirstVertex(otherVertex);
        outputEdge.setSecondVertex(groupVertex);
      }
      out.collect(outputEdge);
    }
  }
}
