/** 
 * Tests that validate optimizer choices when using operators that are requesting certain specific execution strategies.
 */
@SuppressWarnings({"serial"}) public class AdditionalOperatorsTest extends CompilerTestBase {
  @Test public void testCrossWithSmall(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> set1=env.generateSequence(0,1);
    DataSet<Long> set2=env.generateSequence(0,1);
    set1.crossWithTiny(set2).name("Cross").output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
    try {
      Plan plan=env.createProgramPlan();
      OptimizedPlan oPlan=compileWithStats(plan);
      OptimizerPlanNodeResolver resolver=new OptimizerPlanNodeResolver(oPlan);
      DualInputPlanNode crossPlanNode=resolver.getNode("Cross");
      Channel in1=crossPlanNode.getInput1();
      Channel in2=crossPlanNode.getInput2();
      assertEquals(ShipStrategyType.FORWARD,in1.getShipStrategy());
      assertEquals(ShipStrategyType.BROADCAST,in2.getShipStrategy());
    }
 catch (    CompilerException ce) {
      ce.printStackTrace();
      fail("The Flink optimizer is unable to compile this plan correctly.");
    }
  }
  @Test public void testCrossWithLarge(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> set1=env.generateSequence(0,1);
    DataSet<Long> set2=env.generateSequence(0,1);
    set1.crossWithHuge(set2).name("Cross").output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
    try {
      Plan plan=env.createProgramPlan();
      OptimizedPlan oPlan=compileNoStats(plan);
      OptimizerPlanNodeResolver resolver=new OptimizerPlanNodeResolver(oPlan);
      DualInputPlanNode crossPlanNode=resolver.getNode("Cross");
      Channel in1=crossPlanNode.getInput1();
      Channel in2=crossPlanNode.getInput2();
      assertEquals(ShipStrategyType.BROADCAST,in1.getShipStrategy());
      assertEquals(ShipStrategyType.FORWARD,in2.getShipStrategy());
    }
 catch (    CompilerException ce) {
      ce.printStackTrace();
      fail("The pact compiler is unable to compile this plan correctly.");
    }
  }
}
