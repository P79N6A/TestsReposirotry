/** 
 * An extension of the  {@link YARNSessionFIFOITCase} that runs the tests in a secured YARN cluster.
 */
public class YARNSessionFIFOSecuredITCase extends YARNSessionFIFOITCase {
  protected static final Logger LOG=LoggerFactory.getLogger(YARNSessionFIFOSecuredITCase.class);
  @BeforeClass public static void setup(){
    LOG.info("starting secure cluster environment for testing");
    YARN_CONFIGURATION.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
    YARN_CONFIGURATION.setInt(YarnConfiguration.NM_PMEM_MB,768);
    YARN_CONFIGURATION.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,512);
    YARN_CONFIGURATION.set(YarnTestBase.TEST_CLUSTER_NAME_KEY,"flink-yarn-tests-fifo-secured");
    SecureTestEnvironment.prepare(tmp);
    populateYarnSecureConfigurations(YARN_CONFIGURATION,SecureTestEnvironment.getHadoopServicePrincipal(),SecureTestEnvironment.getTestKeytab());
    Configuration flinkConfig=new Configuration();
    flinkConfig.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB,SecureTestEnvironment.getTestKeytab());
    flinkConfig.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL,SecureTestEnvironment.getHadoopServicePrincipal());
    SecurityConfiguration securityConfig=new SecurityConfiguration(flinkConfig,Collections.singletonList(securityConfig1 -> {
      return new HadoopModule(securityConfig1,YARN_CONFIGURATION);
    }
));
    try {
      TestingSecurityContext.install(securityConfig,SecureTestEnvironment.getClientSecurityConfigurationMap());
      SecurityUtils.getInstalledContext().runSecured(new Callable<Object>(){
        @Override public Integer call(){
          startYARNSecureMode(YARN_CONFIGURATION,SecureTestEnvironment.getHadoopServicePrincipal(),SecureTestEnvironment.getTestKeytab());
          return null;
        }
      }
);
    }
 catch (    Exception e) {
      throw new RuntimeException("Exception occurred while setting up secure test context. Reason: {}",e);
    }
  }
  @AfterClass public static void teardownSecureCluster() throws Exception {
    LOG.info("tearing down secure cluster environment");
    SecureTestEnvironment.cleanup();
  }
  @Test(timeout=60000) @Override public void testDetachedMode() throws InterruptedException, IOException {
    super.testDetachedMode();
    final String[] mustHave={"Login successful for user","using keytab file"};
    final boolean jobManagerRunsWithKerberos=verifyStringsInNamedLogFiles(mustHave,"jobmanager.log");
    final boolean taskManagerRunsWithKerberos=verifyStringsInNamedLogFiles(mustHave,"taskmanager.log");
    Assert.assertThat("The JobManager and the TaskManager should both run with Kerberos.",jobManagerRunsWithKerberos && taskManagerRunsWithKerberos,Matchers.is(true));
  }
  @Override public void testQueryCluster(){
  }
  @Override public void testResourceComputation(){
  }
  @Override public void testfullAlloc(){
  }
  @Override public void testJavaAPI(){
  }
}
