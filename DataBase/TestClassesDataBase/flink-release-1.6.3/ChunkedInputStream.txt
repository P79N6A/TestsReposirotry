static final class ChunkedInputStream extends InputStream {
  private final byte[][] data;
  private int x=0, y=0;
  ChunkedInputStream(  byte[] data,  int numChunks){
    this.data=new byte[numChunks][];
    int bytesPerChunk=data.length / numChunks;
    int bytesTaken=0;
    for (int i=0; i < numChunks - 1; i++, bytesTaken+=bytesPerChunk) {
      this.data[i]=new byte[bytesPerChunk];
      System.arraycopy(data,bytesTaken,this.data[i],0,bytesPerChunk);
    }
    this.data[numChunks - 1]=new byte[data.length - bytesTaken];
    System.arraycopy(data,bytesTaken,this.data[numChunks - 1],0,this.data[numChunks - 1].length);
  }
  @Override public int read(){
    if (x < data.length) {
      byte[] curr=data[x];
      if (y < curr.length) {
        byte next=curr[y];
        y++;
        return next;
      }
 else {
        y=0;
        x++;
        return read();
      }
    }
 else {
      return -1;
    }
  }
  @Override public int read(  byte[] b,  int off,  int len) throws IOException {
    if (len == 0) {
      return 0;
    }
    if (x < data.length) {
      byte[] curr=data[x];
      if (y < curr.length) {
        int toCopy=Math.min(len,curr.length - y);
        System.arraycopy(curr,y,b,off,toCopy);
        y+=toCopy;
        return toCopy;
      }
 else {
        y=0;
        x++;
        return read(b,off,len);
      }
    }
 else {
      return -1;
    }
  }
}
