private static final class TestingInMemorySorter<T> implements InMemorySorter<T> {
  private volatile boolean isDisposed;
  public boolean isDisposed(){
    return isDisposed;
  }
  @Override public void reset(){
  }
  @Override public boolean isEmpty(){
    return true;
  }
  @Override public void dispose(){
    isDisposed=true;
  }
  @Override public long getCapacity(){
    return 0;
  }
  @Override public long getOccupancy(){
    return 0;
  }
  @Override public T getRecord(  int logicalPosition) throws IOException {
    return null;
  }
  @Override public T getRecord(  T reuse,  int logicalPosition) throws IOException {
    return null;
  }
  @Override public boolean write(  T record) throws IOException {
    return false;
  }
  @Override public MutableObjectIterator<T> getIterator(){
    return null;
  }
  @Override public void writeToOutput(  ChannelWriterOutputView output) throws IOException {
  }
  @Override public void writeToOutput(  ChannelWriterOutputView output,  LargeRecordHandler<T> largeRecordsOutput) throws IOException {
  }
  @Override public void writeToOutput(  ChannelWriterOutputView output,  int start,  int num) throws IOException {
  }
  @Override public int compare(  int i,  int j){
    return 0;
  }
  @Override public int compare(  int segmentNumberI,  int segmentOffsetI,  int segmentNumberJ,  int segmentOffsetJ){
    return 0;
  }
  @Override public void swap(  int i,  int j){
  }
  @Override public void swap(  int segmentNumberI,  int segmentOffsetI,  int segmentNumberJ,  int segmentOffsetJ){
  }
  @Override public int size(){
    return 0;
  }
  @Override public int recordSize(){
    return 0;
  }
  @Override public int recordsPerSegment(){
    return 0;
  }
}
