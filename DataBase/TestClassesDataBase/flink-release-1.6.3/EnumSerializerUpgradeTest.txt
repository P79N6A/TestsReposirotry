public class EnumSerializerUpgradeTest extends TestLogger {
  @ClassRule public static TemporaryFolder temporaryFolder=new TemporaryFolder();
  private static final String ENUM_NAME="EnumSerializerUpgradeTestEnum";
  private static final String ENUM_A="public enum " + ENUM_NAME + " { A, B, C }";
  private static final String ENUM_B="public enum " + ENUM_NAME + " { A, B, C, D }";
  private static final String ENUM_C="public enum " + ENUM_NAME + " { A, C }";
  private static final String ENUM_D="public enum " + ENUM_NAME + " { A, C, B }";
  /** 
 * Check that identical enums don't require migration
 */
  @Test public void checkIndenticalEnums() throws Exception {
    Assert.assertFalse(checkCompatibility(ENUM_A,ENUM_A).isRequiresMigration());
  }
  /** 
 * Check that appending fields to the enum does not require migration
 */
  @Test public void checkAppendedField() throws Exception {
    Assert.assertFalse(checkCompatibility(ENUM_A,ENUM_B).isRequiresMigration());
  }
  /** 
 * Check that removing enum fields requires migration
 */
  @Test public void checkRemovedField() throws Exception {
    Assert.assertTrue(checkCompatibility(ENUM_A,ENUM_C).isRequiresMigration());
  }
  /** 
 * Check that changing the enum field order don't require migration
 */
  @Test public void checkDifferentFieldOrder() throws Exception {
    Assert.assertFalse(checkCompatibility(ENUM_A,ENUM_D).isRequiresMigration());
  }
  @SuppressWarnings("unchecked") private static CompatibilityResult checkCompatibility(  String enumSourceA,  String enumSourceB) throws IOException, ClassNotFoundException {
    ClassLoader classLoader=ClassLoaderUtils.compileAndLoadJava(temporaryFolder.newFolder(),ENUM_NAME + ".java",enumSourceA);
    EnumSerializer enumSerializer=new EnumSerializer(classLoader.loadClass(ENUM_NAME));
    TypeSerializerConfigSnapshot snapshot=enumSerializer.snapshotConfiguration();
    byte[] snapshotBytes;
    try (ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();DataOutputViewStreamWrapper outputViewStreamWrapper=new DataOutputViewStreamWrapper(outBuffer)){
      TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(outputViewStreamWrapper,snapshot);
      snapshotBytes=outBuffer.toByteArray();
    }
     ClassLoader classLoader2=ClassLoaderUtils.compileAndLoadJava(temporaryFolder.newFolder(),ENUM_NAME + ".java",enumSourceB);
    TypeSerializerConfigSnapshot restoredSnapshot;
    try (ByteArrayInputStream inBuffer=new ByteArrayInputStream(snapshotBytes);DataInputViewStreamWrapper inputViewStreamWrapper=new DataInputViewStreamWrapper(inBuffer)){
      restoredSnapshot=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(inputViewStreamWrapper,classLoader2);
    }
     EnumSerializer enumSerializer2=new EnumSerializer(classLoader2.loadClass(ENUM_NAME));
    return enumSerializer2.ensureCompatibility(restoredSnapshot);
  }
}
