/** 
 * Abstract test base for type information.
 */
public abstract class TypeInformationTestBase<T extends TypeInformation<?>> extends TestLogger {
  protected abstract T[] getTestData();
  @Test public void testHashcodeAndEquals() throws Exception {
    final T[] testData=getTestData();
    final TypeInformation<?> unrelatedTypeInfo=new UnrelatedTypeInfo();
    for (    T typeInfo : testData) {
      if (typeInfo.getClass().getMethod("hashCode").getDeclaringClass() == Object.class) {
        throw new AssertionError("Type information does not implement own hashCode method: " + typeInfo.getClass().getCanonicalName());
      }
      if (typeInfo.getClass().getMethod("equals",Object.class).getDeclaringClass() == Object.class) {
        throw new AssertionError("Type information does not implement own equals method: " + typeInfo.getClass().getCanonicalName());
      }
      for (      T otherTypeInfo : testData) {
        assertTrue("canEqual() returns inconsistent results.",typeInfo.canEqual(otherTypeInfo));
        if (typeInfo == otherTypeInfo) {
          assertTrue("hashCode() returns inconsistent results.",typeInfo.hashCode() == otherTypeInfo.hashCode());
          assertEquals("equals() is false for same object.",typeInfo,otherTypeInfo);
        }
 else {
          assertNotEquals("equals() returned true for different objects.",typeInfo,otherTypeInfo);
        }
      }
      assertFalse("Type information allows to compare with unrelated type.",typeInfo.canEqual(unrelatedTypeInfo));
      assertNotEquals(typeInfo,unrelatedTypeInfo);
    }
  }
  @Test public void testSerialization(){
    final T[] testData=getTestData();
    for (    T typeInfo : testData) {
      final byte[] serialized;
      try {
        serialized=InstantiationUtil.serializeObject(typeInfo);
      }
 catch (      IOException e) {
        throw new AssertionError("Could not serialize type information: " + typeInfo,e);
      }
      final T deserialized;
      try {
        deserialized=InstantiationUtil.deserializeObject(serialized,getClass().getClassLoader());
      }
 catch (      IOException|ClassNotFoundException e) {
        throw new AssertionError("Could not deserialize type information: " + typeInfo,e);
      }
      if (typeInfo.hashCode() != deserialized.hashCode() || !typeInfo.equals(deserialized)) {
        throw new AssertionError("Deserialized type information differs from original one.");
      }
    }
  }
  @Test public void testGetTotalFields(){
    final T[] testData=getTestData();
    for (    T typeInfo : testData) {
      assertTrue("Number of total fields must be at least 1",typeInfo.getTotalFields() > 0);
    }
  }
private static class UnrelatedTypeInfo extends TypeInformation<Object> {
    @Override public boolean isBasicType(){
      return false;
    }
    @Override public boolean isTupleType(){
      return false;
    }
    @Override public int getArity(){
      return 0;
    }
    @Override public int getTotalFields(){
      return 0;
    }
    @Override public Class<Object> getTypeClass(){
      return null;
    }
    @Override public boolean isKeyType(){
      return false;
    }
    @Override public TypeSerializer<Object> createSerializer(    ExecutionConfig config){
      return null;
    }
    @Override public String toString(){
      return null;
    }
    @Override public boolean equals(    Object obj){
      return false;
    }
    @Override public int hashCode(){
      return 0;
    }
    @Override public boolean canEqual(    Object obj){
      return false;
    }
  }
}
