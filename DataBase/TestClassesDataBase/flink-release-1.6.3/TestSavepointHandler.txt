private class TestSavepointHandler extends TestHandler<EmptyRequestBody,AsynchronousOperationResult<SavepointInfo>,SavepointStatusMessageParameters> {
  private final Iterator<Object> expectedSavepointResponseBodies;
  TestSavepointHandler(  final Object... expectedSavepointResponseBodies){
    super(SavepointStatusHeaders.getInstance());
    checkArgument(Arrays.stream(expectedSavepointResponseBodies).allMatch(response -> response instanceof SavepointInfo || response instanceof RestHandlerException));
    this.expectedSavepointResponseBodies=Arrays.asList(expectedSavepointResponseBodies).iterator();
  }
  @Override protected CompletableFuture<AsynchronousOperationResult<SavepointInfo>> handleRequest(  @Nonnull HandlerRequest<EmptyRequestBody,SavepointStatusMessageParameters> request,  @Nonnull DispatcherGateway gateway) throws RestHandlerException {
    final TriggerId triggerId=request.getPathParameter(TriggerIdPathParameter.class);
    if (testTriggerId.equals(triggerId)) {
      final Object response=expectedSavepointResponseBodies.next();
      if (response instanceof SavepointInfo) {
        return CompletableFuture.completedFuture(AsynchronousOperationResult.completed(((SavepointInfo)response)));
      }
 else       if (response instanceof RestHandlerException) {
        return FutureUtils.completedExceptionally((RestHandlerException)response);
      }
 else {
        throw new AssertionError();
      }
    }
 else {
      return FutureUtils.completedExceptionally(new RestHandlerException("Unexpected savepoint trigger id: " + triggerId,HttpResponseStatus.BAD_REQUEST));
    }
  }
}
