/** 
 * An implementation of the  {@link FileSystemBehaviorTestSuite} for the s3a-based S3 file system.
 */
public class HadoopS3FileSystemBehaviorITCase extends FileSystemBehaviorTestSuite {
  private static final String BUCKET=System.getenv("ARTIFACTS_AWS_BUCKET");
  private static final String TEST_DATA_DIR="tests-" + UUID.randomUUID();
  private static final String ACCESS_KEY=System.getenv("ARTIFACTS_AWS_ACCESS_KEY");
  private static final String SECRET_KEY=System.getenv("ARTIFACTS_AWS_SECRET_KEY");
  @BeforeClass public static void checkCredentialsAndSetup() throws IOException {
    Assume.assumeTrue("AWS S3 bucket not configured, skipping test...",BUCKET != null);
    Assume.assumeTrue("AWS S3 access key not configured, skipping test...",ACCESS_KEY != null);
    Assume.assumeTrue("AWS S3 secret key not configured, skipping test...",SECRET_KEY != null);
    final Configuration conf=new Configuration();
    conf.setString("s3.access.key",ACCESS_KEY);
    conf.setString("s3.secret.key",SECRET_KEY);
    FileSystem.initialize(conf);
  }
  @AfterClass public static void clearFsConfig() throws IOException {
    FileSystem.initialize(new Configuration());
  }
  @Override public FileSystem getFileSystem() throws Exception {
    return getBasePath().getFileSystem();
  }
  @Override public Path getBasePath() throws Exception {
    return new Path("s3://" + BUCKET + '/'+ TEST_DATA_DIR);
  }
  @Override public FileSystemKind getFileSystemKind(){
    return FileSystemKind.OBJECT_STORE;
  }
}
