/** 
 * Test proper automated assignment of the transformation's name, if not set by the user.
 */
@SuppressWarnings("serial") public class NamesTest implements Serializable {
  @Test public void testDefaultName(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<String> strs=env.fromCollection(Arrays.asList("a","b"));
    strs.filter(new FilterFunction<String>(){
      private static final long serialVersionUID=1L;
      @Override public boolean filter(      String value) throws Exception {
        return value.equals("a");
      }
    }
).output(new DiscardingOutputFormat<String>());
    Plan plan=env.createProgramPlan();
    testForName("Filter at testDefaultName(NamesTest.java:55)",plan);
  }
  @Test public void testGivenName(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<String> strs=env.fromCollection(Arrays.asList("a","b"));
    strs.filter(new FilterFunction<String>(){
      private static final long serialVersionUID=1L;
      @Override public boolean filter(      String value) throws Exception {
        return value.equals("a");
      }
    }
).name("GivenName").output(new DiscardingOutputFormat<String>());
    Plan plan=env.createProgramPlan();
    testForName("GivenName",plan);
  }
  @Test public void testJoinWith(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    List<Tuple1<String>> strLi=new ArrayList<Tuple1<String>>();
    strLi.add(new Tuple1<String>("a"));
    strLi.add(new Tuple1<String>("b"));
    DataSet<Tuple1<String>> strs=env.fromCollection(strLi);
    DataSet<Tuple1<String>> strs1=env.fromCollection(strLi);
    strs.join(strs1).where(0).equalTo(0).with(new FlatJoinFunction<Tuple1<String>,Tuple1<String>,String>(){
      @Override public void join(      Tuple1<String> first,      Tuple1<String> second,      Collector<String> out) throws Exception {
      }
    }
).output(new DiscardingOutputFormat<String>());
    Plan plan=env.createProgramPlan();
    plan.accept(new Visitor<Operator<?>>(){
      @Override public boolean preVisit(      Operator<?> visitable){
        if (visitable instanceof InnerJoinOperatorBase) {
          Assert.assertEquals("Join at testJoinWith(NamesTest.java:93)",visitable.getName());
        }
        return true;
      }
      @Override public void postVisit(      Operator<?> visitable){
      }
    }
);
  }
  private static void testForName(  final String expected,  Plan plan){
    plan.accept(new Visitor<Operator<?>>(){
      @Override public boolean preVisit(      Operator<?> visitable){
        if (visitable instanceof PlanFilterOperator<?>) {
          PlanFilterOperator<?> filterOp=(PlanFilterOperator<?>)visitable;
          Assert.assertEquals(expected,filterOp.getName());
        }
        return true;
      }
      @Override public void postVisit(      Operator<?> visitable){
      }
    }
);
  }
}
