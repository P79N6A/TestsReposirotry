/** 
 * Tests the hostname resolution of the  {@link RemoteExecutor}.
 */
public class RemoteExecutorHostnameResolutionTest extends TestLogger {
  private static final String nonExistingHostname="foo.bar.com.invalid";
  private static final int port=14451;
  @BeforeClass public static void check(){
    checkPreconditions();
  }
  @Test public void testUnresolvableHostname1() throws Exception {
    RemoteExecutor exec=new RemoteExecutor(nonExistingHostname,port);
    try {
      exec.executePlan(getProgram());
      fail("This should fail with an ProgramInvocationException");
    }
 catch (    UnknownHostException ignored) {
    }
  }
  @Test public void testUnresolvableHostname2() throws Exception {
    InetSocketAddress add=new InetSocketAddress(nonExistingHostname,port);
    RemoteExecutor exec=new RemoteExecutor(add,new Configuration(),Collections.<URL>emptyList(),Collections.<URL>emptyList());
    try {
      exec.executePlan(getProgram());
      fail("This should fail with an ProgramInvocationException");
    }
 catch (    UnknownHostException ignored) {
    }
  }
  private static Plan getProgram(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.fromElements(1,2,3).output(new DiscardingOutputFormat<Integer>());
    return env.createProgramPlan();
  }
  private static void checkPreconditions(){
    boolean throwsException;
    try {
      InetAddress.getByName(nonExistingHostname);
      throwsException=false;
    }
 catch (    UnknownHostException e) {
      throwsException=true;
    }
    assumeTrue(throwsException);
  }
}
