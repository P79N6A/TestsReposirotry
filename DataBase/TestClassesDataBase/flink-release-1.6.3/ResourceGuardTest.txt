/** 
 * Tests for the  {@link ResourceGuard}.
 */
public class ResourceGuardTest extends TestLogger {
  @Test public void testClose(){
    ResourceGuard resourceGuard=new ResourceGuard();
    Assert.assertFalse(resourceGuard.isClosed());
    resourceGuard.close();
    Assert.assertTrue(resourceGuard.isClosed());
    try {
      resourceGuard.acquireResource();
      Assert.fail();
    }
 catch (    IOException ignore) {
    }
  }
  @Test public void testAcquireReleaseClose() throws IOException {
    ResourceGuard resourceGuard=new ResourceGuard();
    ResourceGuard.Lease lease=resourceGuard.acquireResource();
    Assert.assertEquals(1,resourceGuard.getLeaseCount());
    lease.close();
    Assert.assertEquals(0,resourceGuard.getLeaseCount());
    resourceGuard.close();
    Assert.assertTrue(resourceGuard.isClosed());
  }
  @Test public void testCloseBlockIfAcquired() throws Exception {
    ResourceGuard resourceGuard=new ResourceGuard();
    ResourceGuard.Lease lease=resourceGuard.acquireResource();
    AtomicBoolean checker=new AtomicBoolean(true);
    Thread closerThread=new Thread(){
      @Override public void run(){
        resourceGuard.close();
        checker.set(false);
      }
    }
;
    closerThread.start();
    while (!resourceGuard.isClosed()) {
      Thread.yield();
    }
    Assert.assertTrue(checker.get());
    try {
      resourceGuard.acquireResource();
      Assert.fail("Resource guard is expected to be already closed.");
    }
 catch (    IOException ignore) {
    }
    lease.close();
    closerThread.join(60_000);
    Assert.assertFalse(checker.get());
  }
  @Test public void testInterruptHandledCorrectly() throws Exception {
    ResourceGuard resourceGuard=new ResourceGuard();
    ResourceGuard.Lease lease=resourceGuard.acquireResource();
    AtomicBoolean checker=new AtomicBoolean(true);
    Thread closerThread=new Thread(){
      @Override public void run(){
        resourceGuard.close();
        checker.set(false);
      }
    }
;
    closerThread.start();
    while (!resourceGuard.isClosed()) {
      Thread.yield();
    }
    closerThread.interrupt();
    closerThread.join(100);
    Assert.assertTrue(checker.get());
    lease.close();
    closerThread.join(60_000);
    Assert.assertFalse(checker.get());
  }
  @Test public void testLeaseCloseIsIdempotent() throws Exception {
    ResourceGuard resourceGuard=new ResourceGuard();
    ResourceGuard.Lease lease1=resourceGuard.acquireResource();
    ResourceGuard.Lease lease2=resourceGuard.acquireResource();
    Assert.assertEquals(2,resourceGuard.getLeaseCount());
    lease1.close();
    Assert.assertEquals(1,resourceGuard.getLeaseCount());
    lease1.close();
    Assert.assertEquals(1,resourceGuard.getLeaseCount());
    lease2.close();
    Assert.assertEquals(0,resourceGuard.getLeaseCount());
    ResourceGuard.Lease lease3=resourceGuard.acquireResource();
    Assert.assertEquals(1,resourceGuard.getLeaseCount());
    lease2.close();
    Assert.assertEquals(1,resourceGuard.getLeaseCount());
    lease3.close();
    Assert.assertEquals(0,resourceGuard.getLeaseCount());
    resourceGuard.close();
  }
}
