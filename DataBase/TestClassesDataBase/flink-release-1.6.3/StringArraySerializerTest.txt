/** 
 * A test for the  {@link StringArraySerializer}.
 */
public class StringArraySerializerTest extends SerializerTestBase<String[]> {
  @Override protected TypeSerializer<String[]> createSerializer(){
    return new StringArraySerializer();
  }
  @Override protected Class<String[]> getTypeClass(){
    return String[].class;
  }
  @Override protected int getLength(){
    return -1;
  }
  @Override protected String[][] getTestData(){
    Random rnd=new Random(874597969123412341L);
    return new String[][]{new String[]{"a","","bcd","jbmbmner8 jhk hj \n \t üäßß@µ","","non-empty"},new String[]{"a",null,"",null,"bcd",null,"jbmbmner8 jhk hj \n \t üäßß@µ",null,"",null,"non-empty"},new String[]{StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2)},new String[]{StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),"",StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),null,StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),null,"",StringUtils.getRandomString(rnd,10000,1024 * 1024 * 2),"",null}};
  }
  @Test public void arrayTypeIsMutable(){
    StringArraySerializer serializer=(StringArraySerializer)createSerializer();
    assertFalse(serializer.isImmutableType());
  }
}
