public class PojoComparatorTest extends ComparatorTestBase<PojoContainingTuple> {
  TypeInformation<PojoContainingTuple> type=TypeExtractor.getForClass(PojoContainingTuple.class);
  PojoContainingTuple[] data=new PojoContainingTuple[]{new PojoContainingTuple(1,1L,1L),new PojoContainingTuple(2,2L,2L),new PojoContainingTuple(8519,85190L,85190L),new PojoContainingTuple(8520,85191L,85191L)};
  @Override protected TypeComparator<PojoContainingTuple> createComparator(  boolean ascending){
    Assert.assertTrue(type instanceof CompositeType);
    CompositeType<PojoContainingTuple> cType=(CompositeType<PojoContainingTuple>)type;
    ExpressionKeys<PojoContainingTuple> keys=new ExpressionKeys<PojoContainingTuple>(new String[]{"theTuple.*"},cType);
    boolean[] orders=new boolean[keys.getNumberOfKeyFields()];
    Arrays.fill(orders,ascending);
    return cType.createComparator(keys.computeLogicalKeyPositions(),orders,0,new ExecutionConfig());
  }
  @Override protected TypeSerializer<PojoContainingTuple> createSerializer(){
    return type.createSerializer(new ExecutionConfig());
  }
  @Override protected PojoContainingTuple[] getSortedTestData(){
    return data;
  }
}
