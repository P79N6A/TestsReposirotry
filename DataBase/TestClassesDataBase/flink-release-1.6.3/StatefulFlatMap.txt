private static class StatefulFlatMap extends RichFlatMapFunction<Long,Long> implements CheckpointedFunction {
  private static final long serialVersionUID=9031079547885320663L;
  private transient ValueState<Integer> alreadySeen;
  @Override public void flatMap(  Long input,  Collector<Long> out) throws Exception {
    Integer seen=this.alreadySeen.value();
    if (seen >= Parallelism || input == -1) {
      out.collect(input);
    }
    this.alreadySeen.update(seen + 1);
  }
  @Override public void open(  Configuration config){
  }
  @Override public void snapshotState(  FunctionSnapshotContext context) throws Exception {
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    ValueStateDescriptor<Integer> descriptor=new ValueStateDescriptor<>("seenCountState",TypeInformation.of(new TypeHint<Integer>(){
    }
),0);
    alreadySeen=context.getKeyedStateStore().getState(descriptor);
  }
}
