private static class SocketSourceThread extends Thread {
  private final Object sync=new Object();
  private final SocketTextStreamFunction socketSource;
  private final String[] expectedData;
  private volatile Throwable error;
  private volatile int numElementsReceived;
  private volatile boolean canceled;
  private volatile boolean done;
  public SocketSourceThread(  SocketTextStreamFunction socketSource,  String... expectedData){
    this.socketSource=socketSource;
    this.expectedData=expectedData;
  }
  public void run(){
    try {
      SourceFunction.SourceContext<String> ctx=new SourceFunction.SourceContext<String>(){
        private final Object lock=new Object();
        @Override public void collect(        String element){
          int pos=numElementsReceived;
synchronized (sync) {
            numElementsReceived++;
            sync.notifyAll();
          }
          if (expectedData != null && expectedData.length > pos) {
            assertEquals(expectedData[pos],element);
          }
        }
        @Override public void collectWithTimestamp(        String element,        long timestamp){
          collect(element);
        }
        @Override public void emitWatermark(        Watermark mark){
          throw new UnsupportedOperationException();
        }
        @Override public void markAsTemporarilyIdle(){
          throw new UnsupportedOperationException();
        }
        @Override public Object getCheckpointLock(){
          return lock;
        }
        @Override public void close(){
        }
      }
;
      socketSource.run(ctx);
    }
 catch (    Throwable t) {
synchronized (sync) {
        if (!canceled) {
          error=t;
        }
        sync.notifyAll();
      }
    }
 finally {
synchronized (sync) {
        done=true;
        sync.notifyAll();
      }
    }
  }
  public void cancel(){
synchronized (sync) {
      canceled=true;
      socketSource.cancel();
      interrupt();
    }
  }
  public void waitForNumElements(  int numElements) throws InterruptedException {
synchronized (sync) {
      while (error == null && !canceled && !done && numElementsReceived < numElements) {
        sync.wait();
      }
      if (error != null) {
        throw new RuntimeException("Error in source thread",error);
      }
      if (canceled) {
        throw new RuntimeException("canceled");
      }
      if (done) {
        throw new RuntimeException("Exited cleanly before expected number of elements");
      }
    }
  }
  public void waitUntilDone() throws InterruptedException {
    join();
    if (error != null) {
      throw new RuntimeException("Error in source thread",error);
    }
  }
}
