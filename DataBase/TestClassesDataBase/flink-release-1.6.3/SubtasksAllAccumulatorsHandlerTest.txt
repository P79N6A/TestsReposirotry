/** 
 * Tests for the SubtasksAllAccumulatorsHandler.
 */
public class SubtasksAllAccumulatorsHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new SubtasksAllAccumulatorsHandler.SubtasksAllAccumulatorsJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/vertices/"+ originalTask.getJobVertexId()+ "/subtasks/accumulators",archive.getPath());
    compareSubtaskAccumulators(originalTask,archive.getJson());
  }
  @Test public void testGetPaths(){
    SubtasksAllAccumulatorsHandler handler=new SubtasksAllAccumulatorsHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/vertices/:vertexid/subtasks/accumulators",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    String json=SubtasksAllAccumulatorsHandler.createSubtasksAccumulatorsJson(originalTask);
    compareSubtaskAccumulators(originalTask,json);
  }
  private static void compareSubtaskAccumulators(  AccessExecutionJobVertex originalTask,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    Assert.assertEquals(originalTask.getJobVertexId().toString(),result.get("id").asText());
    Assert.assertEquals(originalTask.getParallelism(),result.get("parallelism").asInt());
    ArrayNode subtasks=(ArrayNode)result.get("subtasks");
    Assert.assertEquals(originalTask.getTaskVertices().length,subtasks.size());
    for (int x=0; x < originalTask.getTaskVertices().length; x++) {
      JsonNode subtask=subtasks.get(x);
      AccessExecutionVertex expectedSubtask=originalTask.getTaskVertices()[x];
      Assert.assertEquals(x,subtask.get("subtask").asInt());
      Assert.assertEquals(expectedSubtask.getCurrentExecutionAttempt().getAttemptNumber(),subtask.get("attempt").asInt());
      Assert.assertEquals(expectedSubtask.getCurrentAssignedResourceLocation().getHostname(),subtask.get("host").asText());
      ArchivedJobGenerationUtils.compareStringifiedAccumulators(expectedSubtask.getCurrentExecutionAttempt().getUserAccumulatorsStringified(),(ArrayNode)subtask.get("user-accumulators"));
    }
  }
}
