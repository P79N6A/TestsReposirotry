public class FileChannelStreamsTest {
  @Test public void testCloseAndDeleteOutputView(){
    final IOManager ioManager=new IOManagerAsync();
    try {
      MemoryManager memMan=new MemoryManager(4 * 16 * 1024,1,16 * 1024,MemoryType.HEAP,true);
      List<MemorySegment> memory=new ArrayList<MemorySegment>();
      memMan.allocatePages(new DummyInvokable(),memory,4);
      FileIOChannel.ID channel=ioManager.createChannel();
      BlockChannelWriter<MemorySegment> writer=ioManager.createBlockChannelWriter(channel);
      FileChannelOutputView out=new FileChannelOutputView(writer,memMan,memory,memMan.getPageSize());
      new StringValue("Some test text").write(out);
      out.close();
      assertTrue(memMan.verifyEmpty());
      out.close();
      out.closeAndDelete();
      assertFalse(new File(channel.getPath()).exists());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
 finally {
      ioManager.shutdown();
    }
  }
  @Test public void testCloseAndDeleteInputView(){
    final IOManager ioManager=new IOManagerAsync();
    try {
      MemoryManager memMan=new MemoryManager(4 * 16 * 1024,1,16 * 1024,MemoryType.HEAP,true);
      List<MemorySegment> memory=new ArrayList<MemorySegment>();
      memMan.allocatePages(new DummyInvokable(),memory,4);
      FileIOChannel.ID channel=ioManager.createChannel();
      try (FileWriter wrt=new FileWriter(channel.getPath())){
        wrt.write("test data");
      }
       BlockChannelReader<MemorySegment> reader=ioManager.createBlockChannelReader(channel);
      FileChannelInputView in=new FileChannelInputView(reader,memMan,memory,9);
      in.readInt();
      in.close();
      assertTrue(memMan.verifyEmpty());
      in.close();
      in.closeAndDelete();
      assertFalse(new File(channel.getPath()).exists());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
 finally {
      ioManager.shutdown();
    }
  }
}
