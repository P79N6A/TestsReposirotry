public class RightOuterJoinTaskExternalITCase extends AbstractOuterJoinTaskExternalITCase {
  private final double hash_frac;
  public RightOuterJoinTaskExternalITCase(  ExecutionConfig config){
    super(config);
    hash_frac=(double)HASH_MEM / this.getMemoryManager().getMemorySize();
  }
  @Override protected int calculateExpectedCount(  int keyCnt1,  int valCnt1,  int keyCnt2,  int valCnt2){
    return valCnt1 * valCnt2 * Math.min(keyCnt1,keyCnt2) + (keyCnt2 > keyCnt1 ? (keyCnt2 - keyCnt1) * valCnt2 : 0);
  }
  @Override protected AbstractOuterJoinDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> getOuterJoinDriver(){
    return new RightOuterJoinDriver<>();
  }
  @Override protected DriverStrategy getSortStrategy(){
    return DriverStrategy.RIGHT_OUTER_MERGE;
  }
  @Test public void testExternalHashRightOuterJoinTask() throws Exception {
    final int keyCnt1=32768;
    final int valCnt1=8;
    final int keyCnt2=65536;
    final int valCnt2=8;
    final int expCnt=calculateExpectedCount(keyCnt1,valCnt1,keyCnt2,valCnt2);
    setOutput(this.output);
    addDriverComparator(this.comparator1);
    addDriverComparator(this.comparator2);
    getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory());
    getTaskConfig().setDriverStrategy(DriverStrategy.RIGHT_HYBRIDHASH_BUILD_FIRST);
    getTaskConfig().setRelativeMemoryDriver(hash_frac);
    final AbstractOuterJoinDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=getOuterJoinDriver();
    addInputSorted(new UniformIntTupleGenerator(keyCnt1,valCnt1,false),serializer,this.comparator1.duplicate());
    addInputSorted(new UniformIntTupleGenerator(keyCnt2,valCnt2,false),serializer,this.comparator2.duplicate());
    testDriver(testTask,MockJoinStub.class);
    Assert.assertEquals("Wrong result set size.",expCnt,this.output.getNumberOfRecords());
  }
}
