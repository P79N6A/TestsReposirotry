/** 
 * Test creating graphs from collections.
 */
@RunWith(Parameterized.class) public class FromCollectionITCase extends MultipleProgramsTestBase {
  public FromCollectionITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testFromCollectionVerticesEdges() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testFromCollectionEdgesNoInitialValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,NullValue,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongEdges(),env);
    DataSet<Vertex<Long,NullValue>> data=graph.getVertices();
    List<Vertex<Long,NullValue>> result=data.collect();
    expectedResult="1,(null)\n" + "2,(null)\n" + "3,(null)\n"+ "4,(null)\n"+ "5,(null)\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testFromCollectionEdgesWithInitialValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongEdges(),new InitVerticesMapper(),env);
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,2\n" + "2,4\n" + "3,6\n"+ "4,8\n"+ "5,10\n";
    compareResultAsTuples(result,expectedResult);
  }
@SuppressWarnings("serial") private static final class InitVerticesMapper implements MapFunction<Long,Long> {
    public Long map(    Long vertexId){
      return vertexId * 2;
    }
  }
}
