private static class SimpleAttribute implements Attribute<FileUploads> {
  private static final AttributeKey<FileUploads> KEY=AttributeKey.valueOf("test");
  private final AtomicReference<FileUploads> container=new AtomicReference<>();
  @Override public AttributeKey<FileUploads> key(){
    return KEY;
  }
  @Override public FileUploads get(){
    return container.get();
  }
  @Override public void set(  FileUploads value){
    container.set(value);
  }
  @Override public FileUploads getAndSet(  FileUploads value){
    return container.getAndSet(value);
  }
  @Override public FileUploads setIfAbsent(  FileUploads value){
    if (container.compareAndSet(null,value)) {
      return value;
    }
 else {
      return container.get();
    }
  }
  @Override public FileUploads getAndRemove(){
    return container.getAndSet(null);
  }
  @Override public boolean compareAndSet(  FileUploads oldValue,  FileUploads newValue){
    return container.compareAndSet(oldValue,newValue);
  }
  @Override public void remove(){
    set(null);
  }
}
