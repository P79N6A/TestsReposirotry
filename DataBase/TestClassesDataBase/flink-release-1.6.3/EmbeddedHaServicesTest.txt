/** 
 * Tests for the  {@link EmbeddedHaServices}.
 */
public class EmbeddedHaServicesTest extends TestLogger {
  private EmbeddedHaServices embeddedHaServices;
  @Before public void setupTest(){
    embeddedHaServices=new EmbeddedHaServices(Executors.directExecutor());
  }
  @After public void teardownTest() throws Exception {
    if (embeddedHaServices != null) {
      embeddedHaServices.closeAndCleanupAllData();
      embeddedHaServices=null;
    }
  }
  /** 
 * Tests that exactly one JobManager is elected as the leader for a given job id.
 */
  @Test public void testJobManagerLeaderElection() throws Exception {
    JobID jobId1=new JobID();
    JobID jobId2=new JobID();
    LeaderContender leaderContender1=mock(LeaderContender.class);
    LeaderContender leaderContender2=mock(LeaderContender.class);
    LeaderContender leaderContenderDifferentJobId=mock(LeaderContender.class);
    LeaderElectionService leaderElectionService1=embeddedHaServices.getJobManagerLeaderElectionService(jobId1);
    LeaderElectionService leaderElectionService2=embeddedHaServices.getJobManagerLeaderElectionService(jobId1);
    LeaderElectionService leaderElectionServiceDifferentJobId=embeddedHaServices.getJobManagerLeaderElectionService(jobId2);
    leaderElectionService1.start(leaderContender1);
    leaderElectionService2.start(leaderContender2);
    leaderElectionServiceDifferentJobId.start(leaderContenderDifferentJobId);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor1=ArgumentCaptor.forClass(UUID.class);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor2=ArgumentCaptor.forClass(UUID.class);
    verify(leaderContender1,atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture());
    verify(leaderContender2,atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture());
    assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty());
    verify(leaderContenderDifferentJobId).grantLeadership(any(UUID.class));
  }
  /** 
 * Tests that exactly one ResourceManager is elected as the leader.
 */
  @Test public void testResourceManagerLeaderElection() throws Exception {
    LeaderContender leaderContender1=mock(LeaderContender.class);
    LeaderContender leaderContender2=mock(LeaderContender.class);
    LeaderElectionService leaderElectionService1=embeddedHaServices.getResourceManagerLeaderElectionService();
    LeaderElectionService leaderElectionService2=embeddedHaServices.getResourceManagerLeaderElectionService();
    leaderElectionService1.start(leaderContender1);
    leaderElectionService2.start(leaderContender2);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor1=ArgumentCaptor.forClass(UUID.class);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor2=ArgumentCaptor.forClass(UUID.class);
    verify(leaderContender1,atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture());
    verify(leaderContender2,atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture());
    assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty());
  }
  /** 
 * Tests the JobManager leader retrieval for a given job.
 */
  @Test public void testJobManagerLeaderRetrieval() throws Exception {
    final String address="foobar";
    JobID jobId=new JobID();
    LeaderRetrievalListener leaderRetrievalListener=mock(LeaderRetrievalListener.class);
    LeaderContender leaderContender=mock(LeaderContender.class);
    when(leaderContender.getAddress()).thenReturn(address);
    LeaderElectionService leaderElectionService=embeddedHaServices.getJobManagerLeaderElectionService(jobId);
    LeaderRetrievalService leaderRetrievalService=embeddedHaServices.getJobManagerLeaderRetriever(jobId);
    leaderRetrievalService.start(leaderRetrievalListener);
    leaderElectionService.start(leaderContender);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor=ArgumentCaptor.forClass(UUID.class);
    verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture());
    final UUID leaderId=leaderIdArgumentCaptor.getValue();
    leaderElectionService.confirmLeaderSessionID(leaderId);
    verify(leaderRetrievalListener).notifyLeaderAddress(eq(address),eq(leaderId));
  }
  /** 
 * Tests the ResourceManager leader retrieval for a given job.
 */
  @Test public void testResourceManagerLeaderRetrieval() throws Exception {
    final String address="foobar";
    LeaderRetrievalListener leaderRetrievalListener=mock(LeaderRetrievalListener.class);
    LeaderContender leaderContender=mock(LeaderContender.class);
    when(leaderContender.getAddress()).thenReturn(address);
    LeaderElectionService leaderElectionService=embeddedHaServices.getResourceManagerLeaderElectionService();
    LeaderRetrievalService leaderRetrievalService=embeddedHaServices.getResourceManagerLeaderRetriever();
    leaderRetrievalService.start(leaderRetrievalListener);
    leaderElectionService.start(leaderContender);
    ArgumentCaptor<UUID> leaderIdArgumentCaptor=ArgumentCaptor.forClass(UUID.class);
    verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture());
    final UUID leaderId=leaderIdArgumentCaptor.getValue();
    leaderElectionService.confirmLeaderSessionID(leaderId);
    verify(leaderRetrievalListener).notifyLeaderAddress(eq(address),eq(leaderId));
  }
}
