/** 
 * This test checks that task checkpoints that block and do not react to thread interrupts. It also checks correct working of different policies how tasks deal with checkpoint failures (fail task, decline checkpoint and continue).
 */
public class TaskCheckpointingBehaviourTest extends TestLogger {
  private static final OneShotLatch IN_CHECKPOINT_LATCH=new OneShotLatch();
  @Test public void testDeclineOnCheckpointErrorInSyncPart() throws Exception {
    runTestDeclineOnCheckpointError(new SyncFailureInducingStateBackend());
  }
  @Test public void testDeclineOnCheckpointErrorInAsyncPart() throws Exception {
    runTestDeclineOnCheckpointError(new AsyncFailureInducingStateBackend());
  }
  @Test public void testTaskFailingOnCheckpointErrorInSyncPart() throws Exception {
    Throwable failureCause=runTestTaskFailingOnCheckpointError(new SyncFailureInducingStateBackend());
    assertNotNull(failureCause);
    String expectedMessageStart="Could not perform checkpoint";
    assertEquals(expectedMessageStart,failureCause.getMessage().substring(0,expectedMessageStart.length()));
  }
  @Test public void testTaskFailingOnCheckpointErrorInAsyncPart() throws Exception {
    Throwable failureCause=runTestTaskFailingOnCheckpointError(new AsyncFailureInducingStateBackend());
    assertEquals(AsynchronousException.class,failureCause.getClass());
  }
  @Test public void testBlockingNonInterruptibleCheckpoint() throws Exception {
    StateBackend lockingStateBackend=new BackendForTestStream(LockingOutputStream::new);
    Task task=createTask(new TestOperator(),lockingStateBackend,mock(CheckpointResponder.class),true);
    task.startTaskThread();
    IN_CHECKPOINT_LATCH.await();
    task.cancelExecution();
    task.getExecutingThread().join();
    assertEquals(ExecutionState.CANCELED,task.getExecutionState());
    assertNull(task.getFailureCause());
  }
  private void runTestDeclineOnCheckpointError(  AbstractStateBackend backend) throws Exception {
    TestDeclinedCheckpointResponder checkpointResponder=new TestDeclinedCheckpointResponder();
    Task task=createTask(new FilterOperator(),backend,checkpointResponder,false);
    task.startTaskThread();
    checkpointResponder.declinedLatch.await();
    Assert.assertEquals(ExecutionState.RUNNING,task.getExecutionState());
    task.cancelExecution();
    task.getExecutingThread().join();
  }
  private Throwable runTestTaskFailingOnCheckpointError(  AbstractStateBackend backend) throws Exception {
    Task task=createTask(new FilterOperator(),backend,mock(CheckpointResponder.class),true);
    task.startTaskThread();
    task.getExecutingThread().join();
    assertEquals(ExecutionState.FAILED,task.getExecutionState());
    return task.getFailureCause();
  }
  private static Task createTask(  StreamOperator<?> op,  StateBackend backend,  CheckpointResponder checkpointResponder,  boolean failOnCheckpointErrors) throws IOException {
    Configuration taskConfig=new Configuration();
    StreamConfig cfg=new StreamConfig(taskConfig);
    cfg.setStreamOperator(op);
    cfg.setOperatorID(new OperatorID());
    cfg.setStateBackend(backend);
    ExecutionConfig executionConfig=new ExecutionConfig();
    executionConfig.setFailTaskOnCheckpointError(failOnCheckpointErrors);
    JobInformation jobInformation=new JobInformation(new JobID(),"test job name",new SerializedValue<>(executionConfig),new Configuration(),Collections.emptyList(),Collections.emptyList());
    TaskInformation taskInformation=new TaskInformation(new JobVertexID(),"test task name",1,11,TestStreamTask.class.getName(),taskConfig);
    TaskKvStateRegistry mockKvRegistry=mock(TaskKvStateRegistry.class);
    TaskEventDispatcher taskEventDispatcher=new TaskEventDispatcher();
    NetworkEnvironment network=mock(NetworkEnvironment.class);
    when(network.createKvStateTaskRegistry(any(JobID.class),any(JobVertexID.class))).thenReturn(mockKvRegistry);
    when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher);
    BlobCacheService blobService=new BlobCacheService(mock(PermanentBlobCache.class),mock(TransientBlobCache.class));
    return new Task(jobInformation,taskInformation,new ExecutionAttemptID(),new AllocationID(),0,0,Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),0,mock(MemoryManager.class),mock(IOManager.class),network,mock(BroadcastVariableManager.class),new TestTaskStateManager(),mock(TaskManagerActions.class),mock(InputSplitProvider.class),checkpointResponder,blobService,new BlobLibraryCacheManager(blobService.getPermanentBlobService(),FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0]),new FileCache(new String[]{EnvironmentInformation.getTemporaryFileDirectory()},blobService.getPermanentBlobService()),new TestingTaskManagerRuntimeInfo(),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),new NoOpResultPartitionConsumableNotifier(),mock(PartitionProducerStateChecker.class),Executors.directExecutor());
  }
private static class TestDeclinedCheckpointResponder implements CheckpointResponder {
    final OneShotLatch declinedLatch=new OneShotLatch();
    @Override public void acknowledgeCheckpoint(    JobID jobID,    ExecutionAttemptID executionAttemptID,    long checkpointId,    CheckpointMetrics checkpointMetrics,    TaskStateSnapshot subtaskState){
      throw new RuntimeException("Unexpected call.");
    }
    @Override public void declineCheckpoint(    JobID jobID,    ExecutionAttemptID executionAttemptID,    long checkpointId,    Throwable cause){
      declinedLatch.trigger();
    }
    public OneShotLatch getDeclinedLatch(){
      return declinedLatch;
    }
  }
private static class SyncFailureInducingStateBackend extends MemoryStateBackend {
    private static final long serialVersionUID=-1915780414440060539L;
    @Override public OperatorStateBackend createOperatorStateBackend(    Environment env,    String operatorIdentifier) throws Exception {
      return new DefaultOperatorStateBackend(env.getUserClassLoader(),env.getExecutionConfig(),true){
        @Override public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(        long checkpointId,        long timestamp,        CheckpointStreamFactory streamFactory,        CheckpointOptions checkpointOptions) throws Exception {
          throw new Exception("Sync part snapshot exception.");
        }
      }
;
    }
    @Override public SyncFailureInducingStateBackend configure(    Configuration config){
      return this;
    }
  }
private static class AsyncFailureInducingStateBackend extends MemoryStateBackend {
    private static final long serialVersionUID=-7613628662587098470L;
    @Override public OperatorStateBackend createOperatorStateBackend(    Environment env,    String operatorIdentifier) throws Exception {
      return new DefaultOperatorStateBackend(env.getUserClassLoader(),env.getExecutionConfig(),true){
        @Override public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(        long checkpointId,        long timestamp,        CheckpointStreamFactory streamFactory,        CheckpointOptions checkpointOptions) throws Exception {
          return new FutureTask<>(() -> {
            throw new Exception("Async part snapshot exception.");
          }
);
        }
      }
;
    }
    @Override public AsyncFailureInducingStateBackend configure(    Configuration config){
      return this;
    }
  }
private static final class LockingOutputStream extends CheckpointStateOutputStream {
    private final Object lock=new Object();
    private volatile boolean closed;
    @Nullable @Override public StreamStateHandle closeAndGetHandle() throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void write(    int b) throws IOException {
synchronized (lock) {
        while (!closed) {
          try {
            lock.wait();
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
    @Override public void close() throws IOException {
synchronized (lock) {
        closed=true;
        lock.notifyAll();
      }
    }
    @Override public long getPos(){
      return 0;
    }
    @Override public void flush(){
    }
    @Override public void sync(){
    }
  }
@SuppressWarnings("serial") private static final class FilterOperator extends StreamFilter<Object> {
    private static final long serialVersionUID=1L;
    public FilterOperator(){
      super(new FilterFunction<Object>(){
        @Override public boolean filter(        Object value){
          return false;
        }
      }
);
    }
  }
@SuppressWarnings("serial") private static final class TestOperator extends StreamFilter<Object> {
    private static final long serialVersionUID=1L;
    public TestOperator(){
      super(new FilterFunction<Object>(){
        @Override public boolean filter(        Object value){
          return false;
        }
      }
);
    }
    @Override public void snapshotState(    StateSnapshotContext context) throws Exception {
      OperatorStateCheckpointOutputStream outStream=context.getRawOperatorStateOutput();
      IN_CHECKPOINT_LATCH.trigger();
      outStream.write(1);
    }
  }
  /** 
 * Stream task that simply triggers a checkpoint.
 */
public static final class TestStreamTask extends OneInputStreamTask<Object,Object> {
    public TestStreamTask(    Environment env){
      super(env);
    }
    @Override public void init(){
    }
    @Override protected void run() throws Exception {
      triggerCheckpointOnBarrier(new CheckpointMetaData(11L,System.currentTimeMillis()),CheckpointOptions.forCheckpointWithDefaultLocation(),new CheckpointMetrics());
      while (isRunning()) {
        Thread.sleep(1L);
      }
    }
    @Override protected void cleanup(){
    }
    @Override protected void cancelTask(){
    }
  }
}
