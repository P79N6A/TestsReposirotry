/** 
 * Tests for  {@link PageRank}.
 */
public class PageRankTest extends AsmTestBase {
  private static final double DAMPING_FACTOR=0.85;
  @Test public void testWithSimpleGraph() throws Exception {
    DataSet<Result<IntValue>> pr=new PageRank<IntValue,NullValue,NullValue>(DAMPING_FACTOR,20).run(directedSimpleGraph);
    List<Double> expectedResults=new ArrayList<>();
    expectedResults.add(0.0909212166211);
    expectedResults.add(0.279516064311);
    expectedResults.add(0.129562719068);
    expectedResults.add(0.223268406353);
    expectedResults.add(0.185810377026);
    expectedResults.add(0.0909212166211);
    for (    Result<IntValue> result : pr.collect()) {
      int id=result.getVertexId0().getValue();
      assertEquals(expectedResults.get(id),result.getPageRankScore().getValue(),ACCURACY);
    }
  }
  /** 
 * Validate a test where each result has the same values.
 * @param graph input graph
 * @param count number of results
 * @param score result PageRank score
 * @param < T > graph ID type
 * @throws Exception on error
 */
  private static <T>void validate(  Graph<T,NullValue,NullValue> graph,  long count,  double score) throws Exception {
    DataSet<Result<T>> pr=new PageRank<T,NullValue,NullValue>(DAMPING_FACTOR,ACCURACY).setIncludeZeroDegreeVertices(true).run(graph);
    List<Result<T>> results=pr.collect();
    assertEquals(count,results.size());
    for (    Result<T> result : results) {
      assertEquals(score,result.getPageRankScore().getValue(),ACCURACY);
    }
  }
  @Test public void testWithCompleteGraph() throws Exception {
    validate(completeGraph,completeGraphVertexCount,1.0 / completeGraphVertexCount);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    validate(emptyGraphWithVertices,emptyGraphVertexCount,1.0 / emptyGraphVertexCount);
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    validate(emptyGraphWithoutVertices,0,Double.NaN);
  }
  @Test public void testWithRMatGraph() throws Exception {
    DataSet<Result<LongValue>> pr=new PageRank<LongValue,NullValue,NullValue>(DAMPING_FACTOR,ACCURACY).run(directedRMatGraph(10,16));
    Map<Long,Result<LongValue>> results=new HashMap<>();
    for (    Result<LongValue> result : new Collect<Result<LongValue>>().run(pr).execute()) {
      results.put(result.getVertexId0().getValue(),result);
    }
    assertEquals(902,results.size());
    Map<Long,Double> expectedResults=new HashMap<>();
    expectedResults.put(0L,0.0271152394743);
    expectedResults.put(1L,0.0132848430616);
    expectedResults.put(2L,0.0121819700294);
    expectedResults.put(8L,0.0115923214664);
    expectedResults.put(13L,0.00183241122822);
    expectedResults.put(29L,0.000848190646547);
    expectedResults.put(109L,0.00030846825644);
    expectedResults.put(394L,0.000828826945546);
    expectedResults.put(652L,0.000683948671035);
    expectedResults.put(1020L,0.000250442325034);
    for (    Map.Entry<Long,Double> expected : expectedResults.entrySet()) {
      double value=results.get(expected.getKey()).getPageRankScore().getValue();
      assertEquals(expected.getValue(),value,ACCURACY);
    }
  }
}
