/** 
 * Invokable emitting records in a separate Thread (not the main Task thread).
 */
public static class AsyncProducer extends AbstractInvokable {
  public AsyncProducer(  Environment environment){
    super(environment);
  }
  @Override public void invoke() throws Exception {
    Thread producer=new ProducerThread(getEnvironment().getWriter(0));
    ASYNC_PRODUCER_THREAD=producer;
    producer.start();
    while (producer.isAlive()) {
      try {
        producer.join();
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
  /** 
 * The Thread emitting the records.
 */
private static class ProducerThread extends Thread {
    private final RecordWriter<LongValue> recordWriter;
    public ProducerThread(    ResultPartitionWriter partitionWriter){
      this.recordWriter=new RecordWriter<>(partitionWriter);
    }
    @Override public void run(){
      LongValue current=new LongValue(0);
      try {
        while (true) {
          current.setValue(current.getValue() + 1);
          recordWriter.emit(current);
          recordWriter.flushAll();
        }
      }
 catch (      Exception e) {
        ASYNC_PRODUCER_EXCEPTION=e;
      }
    }
  }
}
