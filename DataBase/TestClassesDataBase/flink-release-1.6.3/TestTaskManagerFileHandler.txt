/** 
 * Class under test.
 */
private static final class TestTaskManagerFileHandler extends AbstractTaskManagerFileHandler<TaskManagerMessageParameters> {
  private final Queue<CompletableFuture<TransientBlobKey>> requestFileUploads;
  private final ResourceID expectedTaskManagerId;
  protected TestTaskManagerFileHandler(  @Nonnull CompletableFuture<String> localAddressFuture,  @Nonnull GatewayRetriever<? extends RestfulGateway> leaderRetriever,  @Nonnull Time timeout,  @Nonnull Map<String,String> responseHeaders,  @Nonnull UntypedResponseMessageHeaders<EmptyRequestBody,TaskManagerMessageParameters> untypedResponseMessageHeaders,  @Nonnull GatewayRetriever<ResourceManagerGateway> resourceManagerGatewayRetriever,  @Nonnull TransientBlobService transientBlobService,  @Nonnull Time cacheEntryDuration,  Queue<CompletableFuture<TransientBlobKey>> requestFileUploads,  ResourceID expectedTaskManagerId){
    super(localAddressFuture,leaderRetriever,timeout,responseHeaders,untypedResponseMessageHeaders,resourceManagerGatewayRetriever,transientBlobService,cacheEntryDuration);
    this.requestFileUploads=Preconditions.checkNotNull(requestFileUploads);
    this.expectedTaskManagerId=Preconditions.checkNotNull(expectedTaskManagerId);
  }
  @Override protected CompletableFuture<TransientBlobKey> requestFileUpload(  ResourceManagerGateway resourceManagerGateway,  ResourceID taskManagerResourceId){
    assertThat(taskManagerResourceId,is(equalTo(expectedTaskManagerId)));
    final CompletableFuture<TransientBlobKey> transientBlobKeyFuture=requestFileUploads.poll();
    if (transientBlobKeyFuture != null) {
      return transientBlobKeyFuture;
    }
 else {
      return FutureUtils.completedExceptionally(new FlinkException("Could not upload file."));
    }
  }
}
