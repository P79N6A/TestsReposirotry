private static class CheckpointSequenceValidator extends AbstractInvokable {
  private final long[] checkpointIDs;
  private int i=0;
  private CheckpointSequenceValidator(  long... checkpointIDs){
    super(new DummyEnvironment("test",1,0));
    this.checkpointIDs=checkpointIDs;
  }
  @Override public void invoke(){
    throw new UnsupportedOperationException("should never be called");
  }
  @Override public boolean triggerCheckpoint(  CheckpointMetaData checkpointMetaData,  CheckpointOptions checkpointOptions) throws Exception {
    throw new UnsupportedOperationException("should never be called");
  }
  @Override public void triggerCheckpointOnBarrier(  CheckpointMetaData checkpointMetaData,  CheckpointOptions checkpointOptions,  CheckpointMetrics checkpointMetrics) throws Exception {
    assertTrue("More checkpoints than expected",i < checkpointIDs.length);
    final long expectedId=checkpointIDs[i++];
    if (expectedId >= 0) {
      assertEquals("wrong checkpoint id",expectedId,checkpointMetaData.getCheckpointId());
      assertTrue(checkpointMetaData.getTimestamp() > 0);
    }
 else {
      fail("got 'triggerCheckpointOnBarrier()' when expecting an 'abortCheckpointOnBarrier()'");
    }
  }
  @Override public void abortCheckpointOnBarrier(  long checkpointId,  Throwable cause){
    assertTrue("More checkpoints than expected",i < checkpointIDs.length);
    final long expectedId=checkpointIDs[i++];
    if (expectedId < 0) {
      assertEquals("wrong checkpoint id for checkpoint abort",-expectedId,checkpointId);
    }
 else {
      fail("got 'abortCheckpointOnBarrier()' when expecting an 'triggerCheckpointOnBarrier()'");
    }
  }
  @Override public void notifyCheckpointComplete(  long checkpointId) throws Exception {
    throw new UnsupportedOperationException("should never be called");
  }
}
