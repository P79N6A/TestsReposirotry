/** 
 * Tests for  {@link ListCheckpointed}.
 */
public class ListCheckpointedTest {
  @Test public void testUDFReturningNull() throws Exception {
    TestUserFunction userFunction=new TestUserFunction(null);
    AbstractStreamOperatorTestHarness<Integer> testHarness=new AbstractStreamOperatorTestHarness<>(new StreamMap<>(userFunction),1,1,0);
    testHarness.open();
    OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
    testHarness.initializeState(snapshot);
    Assert.assertTrue(userFunction.isRestored());
  }
  @Test public void testUDFReturningEmpty() throws Exception {
    TestUserFunction userFunction=new TestUserFunction(Collections.<Integer>emptyList());
    AbstractStreamOperatorTestHarness<Integer> testHarness=new AbstractStreamOperatorTestHarness<>(new StreamMap<>(userFunction),1,1,0);
    testHarness.open();
    OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
    testHarness.initializeState(snapshot);
    Assert.assertTrue(userFunction.isRestored());
  }
  @Test public void testUDFReturningData() throws Exception {
    TestUserFunction userFunction=new TestUserFunction(Arrays.asList(1,2,3));
    AbstractStreamOperatorTestHarness<Integer> testHarness=new AbstractStreamOperatorTestHarness<>(new StreamMap<>(userFunction),1,1,0);
    testHarness.open();
    OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
    testHarness.initializeState(snapshot);
    Assert.assertTrue(userFunction.isRestored());
  }
private static class TestUserFunction extends RichMapFunction<Integer,Integer> implements ListCheckpointed<Integer> {
    private static final long serialVersionUID=-8981369286399531925L;
    private final List<Integer> expected;
    private boolean restored;
    public TestUserFunction(    List<Integer> expected){
      this.expected=expected;
      this.restored=false;
    }
    @Override public Integer map(    Integer value) throws Exception {
      return value;
    }
    @Override public List<Integer> snapshotState(    long checkpointId,    long timestamp) throws Exception {
      return expected;
    }
    @Override public void restoreState(    List<Integer> state) throws Exception {
      if (null != expected) {
        Assert.assertEquals(expected,state);
      }
 else {
        Assert.assertTrue(state.isEmpty());
      }
      restored=true;
    }
    public boolean isRestored(){
      return restored;
    }
  }
}
