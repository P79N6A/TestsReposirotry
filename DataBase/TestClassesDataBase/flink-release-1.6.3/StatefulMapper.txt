private static final class StatefulMapper extends RichMapFunction<Long,Long> implements CheckpointedFunction {
  private static final long serialVersionUID=-520490739059396832L;
  private final boolean keyed;
  private final boolean verify;
  private final boolean hasBField;
  private transient ValueState<Object> keyedValueState;
  private transient MapState<Object,Object> keyedMapState;
  private transient ListState<Object> keyedListState;
  private transient ReducingState<Object> keyedReducingState;
  private transient ListState<Object> partitionableListState;
  private transient ListState<Object> unionListState;
  private transient Class<?> pojoClass;
  private transient Field fieldA;
  private transient Field fieldB;
  public StatefulMapper(  boolean keyed,  boolean verify,  boolean hasBField){
    this.keyed=keyed;
    this.verify=verify;
    this.hasBField=hasBField;
  }
  @Override public Long map(  Long value) throws Exception {
    Object pojo=pojoClass.newInstance();
    fieldA.set(pojo,value);
    if (hasBField) {
      fieldB.set(pojo,value + "");
    }
    if (verify) {
      if (keyed) {
        assertEquals(pojo,keyedValueState.value());
        assertTrue(keyedMapState.contains(pojo));
        assertEquals(pojo,keyedMapState.get(pojo));
        Iterator<Object> listIterator=keyedListState.get().iterator();
        boolean elementFound=false;
        while (listIterator.hasNext()) {
          elementFound|=pojo.equals(listIterator.next());
        }
        assertTrue(elementFound);
        assertEquals(pojo,keyedReducingState.get());
      }
 else {
        boolean elementFound=false;
        Iterator<Object> listIterator=partitionableListState.get().iterator();
        while (listIterator.hasNext()) {
          elementFound|=pojo.equals(listIterator.next());
        }
        assertTrue(elementFound);
        elementFound=false;
        listIterator=unionListState.get().iterator();
        while (listIterator.hasNext()) {
          elementFound|=pojo.equals(listIterator.next());
        }
        assertTrue(elementFound);
      }
    }
 else {
      if (keyed) {
        keyedValueState.update(pojo);
        keyedMapState.put(pojo,pojo);
        keyedListState.add(pojo);
        keyedReducingState.add(pojo);
      }
 else {
        partitionableListState.add(pojo);
        unionListState.add(pojo);
      }
    }
    return value;
  }
  @Override public void snapshotState(  FunctionSnapshotContext context) throws Exception {
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    pojoClass=getRuntimeContext().getUserCodeClassLoader().loadClass(POJO_NAME);
    fieldA=pojoClass.getDeclaredField("a");
    fieldA.setAccessible(true);
    if (hasBField) {
      fieldB=pojoClass.getDeclaredField("b");
      fieldB.setAccessible(true);
    }
    if (keyed) {
      keyedValueState=context.getKeyedStateStore().getState(new ValueStateDescriptor<>("keyedValueState",(Class<Object>)pojoClass));
      keyedMapState=context.getKeyedStateStore().getMapState(new MapStateDescriptor<>("keyedMapState",(Class<Object>)pojoClass,(Class<Object>)pojoClass));
      keyedListState=context.getKeyedStateStore().getListState(new ListStateDescriptor<>("keyedListState",(Class<Object>)pojoClass));
      ReduceFunction<Object> reduceFunction=new FirstValueReducer<>();
      keyedReducingState=context.getKeyedStateStore().getReducingState(new ReducingStateDescriptor<>("keyedReducingState",reduceFunction,(Class<Object>)pojoClass));
    }
 else {
      partitionableListState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>("partitionableListState",(Class<Object>)pojoClass));
      unionListState=context.getOperatorStateStore().getUnionListState(new ListStateDescriptor<>("unionListState",(Class<Object>)pojoClass));
    }
  }
}
