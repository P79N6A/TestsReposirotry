/** 
 * Handler that accepts a file request consisting of and  {@link #file1} and {@link #file2}.
 */
public static class MultipartFileHandler extends AbstractRestHandler<RestfulGateway,EmptyRequestBody,EmptyResponseBody,EmptyMessageParameters> {
  private final Collection<Path> expectedFiles;
  MultipartFileHandler(  CompletableFuture<String> localRestAddress,  GatewayRetriever<RestfulGateway> leaderRetriever,  Collection<Path> expectedFiles){
    super(localRestAddress,leaderRetriever,RpcUtils.INF_TIMEOUT,Collections.emptyMap(),MultipartFileHeaders.INSTANCE);
    this.expectedFiles=expectedFiles;
  }
  @Override protected CompletableFuture<EmptyResponseBody> handleRequest(  @Nonnull HandlerRequest<EmptyRequestBody,EmptyMessageParameters> request,  @Nonnull RestfulGateway gateway) throws RestHandlerException {
    verifyFileUpload(expectedFiles,request.getUploadedFiles().stream().map(File::toPath).collect(Collectors.toList()));
    return CompletableFuture.completedFuture(EmptyResponseBody.getInstance());
  }
  static void verifyFileUpload(  Collection<Path> expectedFiles,  Collection<Path> uploadedFiles) throws RestHandlerException {
    try {
      assertEquals(expectedFiles.size(),uploadedFiles.size());
      List<Path> expectedList=new ArrayList<>(expectedFiles);
      List<Path> actualList=new ArrayList<>(uploadedFiles);
      expectedList.sort(Comparator.comparing(Path::toString));
      actualList.sort(Comparator.comparing(Path::toString));
      for (int x=0; x < expectedList.size(); x++) {
        Path expected=expectedList.get(x);
        Path actual=actualList.get(x);
        assertEquals(expected.getFileName().toString(),actual.getFileName().toString());
        byte[] originalContent=Files.readAllBytes(expected);
        byte[] receivedContent=Files.readAllBytes(actual);
        assertArrayEquals(originalContent,receivedContent);
      }
    }
 catch (    Exception e) {
      throw new RestHandlerException("Test verification failed.",HttpResponseStatus.INTERNAL_SERVER_ERROR,e);
    }
  }
private static final class MultipartFileHeaders extends TestHeadersBase<EmptyRequestBody> {
    private static final MultipartFileHeaders INSTANCE=new MultipartFileHeaders();
    private MultipartFileHeaders(){
    }
    @Override public Class<EmptyRequestBody> getRequestClass(){
      return EmptyRequestBody.class;
    }
    @Override public String getTargetRestEndpointURL(){
      return "/test/upload/file";
    }
    @Override public boolean acceptsFileUploads(){
      return true;
    }
  }
}
