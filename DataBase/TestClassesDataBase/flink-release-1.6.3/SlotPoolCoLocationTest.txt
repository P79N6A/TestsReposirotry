/** 
 * Test cases for  {@link CoLocationConstraint} with the {@link SlotPool}.
 */
public class SlotPoolCoLocationTest extends TestLogger {
  @ClassRule public static final TestingRpcServiceResource rpcServiceResource=new TestingRpcServiceResource();
  @Rule public final SlotPoolResource slotPoolResource=new SlotPoolResource(rpcServiceResource.getTestingRpcService(),PreviousAllocationSchedulingStrategy.getInstance());
  /** 
 * Tests the scheduling of two tasks with a parallelism of 2 and a co-location constraint.
 */
  @Test public void testSimpleCoLocatedSlotScheduling() throws ExecutionException, InterruptedException {
    final BlockingQueue<AllocationID> allocationIds=new ArrayBlockingQueue<>(2);
    final TestingResourceManagerGateway testingResourceManagerGateway=slotPoolResource.getTestingResourceManagerGateway();
    testingResourceManagerGateway.setRequestSlotConsumer((    SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()));
    final TaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
    final SlotPoolGateway slotPoolGateway=slotPoolResource.getSlotPoolGateway();
    slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get();
    CoLocationGroup group=new CoLocationGroup();
    CoLocationConstraint coLocationConstraint1=group.getLocationConstraint(0);
    CoLocationConstraint coLocationConstraint2=group.getLocationConstraint(1);
    final SlotSharingGroupId slotSharingGroupId=new SlotSharingGroupId();
    JobVertexID jobVertexId1=new JobVertexID();
    JobVertexID jobVertexId2=new JobVertexID();
    final SlotProvider slotProvider=slotPoolResource.getSlotProvider();
    CompletableFuture<LogicalSlot> logicalSlotFuture11=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1,slotSharingGroupId,coLocationConstraint1),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
    CompletableFuture<LogicalSlot> logicalSlotFuture22=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2,slotSharingGroupId,coLocationConstraint2),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
    CompletableFuture<LogicalSlot> logicalSlotFuture12=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2,slotSharingGroupId,coLocationConstraint1),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
    CompletableFuture<LogicalSlot> logicalSlotFuture21=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1,slotSharingGroupId,coLocationConstraint2),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
    final AllocationID allocationId1=allocationIds.take();
    final AllocationID allocationId2=allocationIds.take();
    CompletableFuture<Boolean> slotOfferFuture1=slotPoolGateway.offerSlot(taskManagerLocation,new SimpleAckingTaskManagerGateway(),new SlotOffer(allocationId1,0,ResourceProfile.UNKNOWN));
    CompletableFuture<Boolean> slotOfferFuture2=slotPoolGateway.offerSlot(taskManagerLocation,new SimpleAckingTaskManagerGateway(),new SlotOffer(allocationId2,0,ResourceProfile.UNKNOWN));
    assertTrue(slotOfferFuture1.get());
    assertTrue(slotOfferFuture2.get());
    LogicalSlot logicalSlot11=logicalSlotFuture11.get();
    LogicalSlot logicalSlot12=logicalSlotFuture12.get();
    LogicalSlot logicalSlot21=logicalSlotFuture21.get();
    LogicalSlot logicalSlot22=logicalSlotFuture22.get();
    assertEquals(logicalSlot11.getAllocationId(),logicalSlot12.getAllocationId());
    assertEquals(logicalSlot21.getAllocationId(),logicalSlot22.getAllocationId());
    assertNotEquals(logicalSlot11.getAllocationId(),logicalSlot21.getAllocationId());
  }
}
