/** 
 * Tests for  {@link InFlightRequestTracker}.
 */
public class InFlightRequestTrackerTest {
  private InFlightRequestTracker inFlightRequestTracker;
  @Before public void setUp(){
    inFlightRequestTracker=new InFlightRequestTracker();
  }
  @Test public void testShouldFinishAwaitAsyncImmediatelyIfNoRequests(){
    assertTrue(inFlightRequestTracker.awaitAsync().isDone());
  }
  @Test public void testShouldFinishAwaitAsyncIffAllRequestsDeregistered(){
    inFlightRequestTracker.registerRequest();
    final CompletableFuture<Void> awaitFuture=inFlightRequestTracker.awaitAsync();
    assertFalse(awaitFuture.isDone());
    inFlightRequestTracker.deregisterRequest();
    assertTrue(awaitFuture.isDone());
  }
  @Test public void testAwaitAsyncIsIdempotent(){
    final CompletableFuture<Void> awaitFuture=inFlightRequestTracker.awaitAsync();
    assertTrue(awaitFuture.isDone());
    assertSame("The reference to the future must not change",awaitFuture,inFlightRequestTracker.awaitAsync());
  }
  @Test public void testShouldTolerateRegisterAfterAwaitAsync(){
    final CompletableFuture<Void> awaitFuture=inFlightRequestTracker.awaitAsync();
    assertTrue(awaitFuture.isDone());
    inFlightRequestTracker.registerRequest();
    assertSame("The reference to the future must not change",awaitFuture,inFlightRequestTracker.awaitAsync());
  }
}
