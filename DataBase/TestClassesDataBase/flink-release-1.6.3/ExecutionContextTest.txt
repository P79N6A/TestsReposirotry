/** 
 * Test for  {@link ExecutionContext}.
 */
public class ExecutionContextTest {
  private static final String DEFAULTS_ENVIRONMENT_FILE="test-sql-client-defaults.yaml";
  @Test public void testExecutionConfig() throws Exception {
    final ExecutionContext<?> context=createExecutionContext();
    final ExecutionConfig config=context.createEnvironmentInstance().getExecutionConfig();
    assertEquals(99,config.getAutoWatermarkInterval());
  }
  @Test public void testFunctions() throws Exception {
    final ExecutionContext<?> context=createExecutionContext();
    final TableEnvironment tableEnv=context.createEnvironmentInstance().getTableEnvironment();
    final String[] expected=new String[]{"scalarUDF","tableUDF","aggregateUDF"};
    final String[] actual=tableEnv.listUserDefinedFunctions();
    Arrays.sort(expected);
    Arrays.sort(actual);
    assertArrayEquals(expected,actual);
  }
  @Test public void testSourceSinks() throws Exception {
    final ExecutionContext<?> context=createExecutionContext();
    final Map<String,TableSource<?>> sources=context.getTableSources();
    final Map<String,TableSink<?>> sinks=context.getTableSinks();
    assertEquals(new HashSet<>(Arrays.asList("TableSourceSink","TableNumber1","TableNumber2")),sources.keySet());
    assertEquals(new HashSet<>(Collections.singletonList("TableSourceSink")),sinks.keySet());
    assertArrayEquals(new String[]{"IntegerField1","StringField1"},sources.get("TableNumber1").getTableSchema().getColumnNames());
    assertArrayEquals(new TypeInformation[]{Types.INT(),Types.STRING()},sources.get("TableNumber1").getTableSchema().getTypes());
    assertArrayEquals(new String[]{"IntegerField2","StringField2"},sources.get("TableNumber2").getTableSchema().getColumnNames());
    assertArrayEquals(new TypeInformation[]{Types.INT(),Types.STRING()},sources.get("TableNumber2").getTableSchema().getTypes());
    assertArrayEquals(new String[]{"BooleanField","StringField"},sinks.get("TableSourceSink").getFieldNames());
    assertArrayEquals(new TypeInformation[]{Types.BOOLEAN(),Types.STRING()},sinks.get("TableSourceSink").getFieldTypes());
    final TableEnvironment tableEnv=context.createEnvironmentInstance().getTableEnvironment();
    assertArrayEquals(new String[]{"TableNumber1","TableNumber2","TableSourceSink"},tableEnv.listTables());
  }
  private <T>ExecutionContext<T> createExecutionContext() throws Exception {
    final Map<String,String> replaceVars=new HashMap<>();
    replaceVars.put("$VAR_2","streaming");
    replaceVars.put("$VAR_UPDATE_MODE","update-mode: append");
    final Environment env=EnvironmentFileUtil.parseModified(DEFAULTS_ENVIRONMENT_FILE,replaceVars);
    final SessionContext session=new SessionContext("test-session",new Environment());
    final Configuration flinkConfig=new Configuration();
    return new ExecutionContext<>(env,session,Collections.emptyList(),flinkConfig,new Options(),Collections.singletonList(new DefaultCLI(flinkConfig)));
  }
}
