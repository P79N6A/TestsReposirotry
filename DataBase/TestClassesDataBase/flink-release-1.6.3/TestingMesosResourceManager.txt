/** 
 * The RM with some test-specific behavior.
 */
static class TestingMesosResourceManager extends MesosResourceManager {
  public TestProbe connectionMonitor=new TestProbe(system);
  public TestProbe taskRouter=new TestProbe(system);
  public TestProbe launchCoordinator=new TestProbe(system);
  public TestProbe reconciliationCoordinator=new TestProbe(system);
  public final Set<ResourceID> closedTaskManagerConnections=new HashSet<>();
  public TestingMesosResourceManager(  RpcService rpcService,  String resourceManagerEndpointId,  ResourceID resourceId,  ResourceManagerConfiguration resourceManagerConfiguration,  HighAvailabilityServices highAvailabilityServices,  HeartbeatServices heartbeatServices,  SlotManager slotManager,  MetricRegistry metricRegistry,  JobLeaderIdService jobLeaderIdService,  FatalErrorHandler fatalErrorHandler,  Configuration flinkConfig,  MesosServices mesosServices,  MesosConfiguration mesosConfig,  MesosTaskManagerParameters taskManagerParameters,  ContainerSpecification taskManagerContainerSpec,  JobManagerMetricGroup jobManagerMetricGroup){
    super(rpcService,resourceManagerEndpointId,resourceId,resourceManagerConfiguration,highAvailabilityServices,heartbeatServices,slotManager,metricRegistry,jobLeaderIdService,new ClusterInformation("localhost",1234),fatalErrorHandler,flinkConfig,mesosServices,mesosConfig,taskManagerParameters,taskManagerContainerSpec,null,jobManagerMetricGroup);
  }
  @Override protected ActorRef createConnectionMonitor(){
    return connectionMonitor.ref();
  }
  @Override protected ActorRef createTaskMonitor(  SchedulerDriver schedulerDriver){
    return taskRouter.ref();
  }
  @Override protected ActorRef createLaunchCoordinator(  SchedulerDriver schedulerDriver,  ActorRef selfActorRef){
    return launchCoordinator.ref();
  }
  @Override protected ActorRef createReconciliationCoordinator(  SchedulerDriver schedulerDriver){
    return reconciliationCoordinator.ref();
  }
  @Override protected void closeTaskManagerConnection(  ResourceID resourceID,  Exception cause){
    super.closeTaskManagerConnection(resourceID,cause);
    closedTaskManagerConnections.add(resourceID);
  }
  @VisibleForTesting @Override public <V>CompletableFuture<V> callAsync(  Callable<V> callable,  Time timeout){
    return super.callAsync(callable,timeout);
  }
}
