/** 
 * Tests for the  {@link StreamingFileSink}.
 */
public class LocalStreamingFileSinkTest extends TestLogger {
  @ClassRule public static final TemporaryFolder TEMP_FOLDER=new TemporaryFolder();
  @Test public void testClosingWithoutInput() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,124L)){
      testHarness.setup();
      testHarness.open();
    }
   }
  @Test public void testClosingWithoutInitializingStateShouldNotFail() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,124L)){
      testHarness.setup();
    }
   }
  @Test public void testTruncateAfterRecoveryAndOverwrite() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    OperatorSubtaskState snapshot;
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
      testHarness.setup();
      testHarness.open();
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      TestUtils.checkLocalFs(outDir,1,0);
      snapshot=testHarness.snapshot(1L,1L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",2),2L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",3),3L));
      TestUtils.checkLocalFs(outDir,2,0);
      Map<File,String> contents=TestUtils.getFileContentByPath(outDir);
      int fileCounter=0;
      for (      Map.Entry<File,String> fileContents : contents.entrySet()) {
        if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@2\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@3\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(2L,fileCounter);
    }
     try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
      testHarness.setup();
      testHarness.initializeState(snapshot);
      testHarness.open();
      TestUtils.checkLocalFs(outDir,2,0);
      int fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@3\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(2L,fileCounter);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",4),4L));
      fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@3\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(2L,fileCounter);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",5),5L));
      TestUtils.checkLocalFs(outDir,3,0);
      testHarness.snapshot(2L,2L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",6),6L));
      TestUtils.checkLocalFs(outDir,3,0);
      fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          if (fileContents.getValue().equals("test1@5\ntest1@6\n") || fileContents.getValue().equals("test1@3\n")) {
            fileCounter++;
          }
        }
      }
      Assert.assertEquals(3L,fileCounter);
      testHarness.notifyOfCompletedCheckpoint(2L);
      TestUtils.checkLocalFs(outDir,2,1);
      fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().equals("part-0-0")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          if (fileContents.getValue().equals("test1@5\ntest1@6\n") || fileContents.getValue().equals("test1@3\n")) {
            fileCounter++;
          }
        }
      }
      Assert.assertEquals(3L,fileCounter);
    }
   }
  @Test public void testCommitStagedFilesInCorrectOrder() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
      testHarness.setup();
      testHarness.open();
      testHarness.setProcessingTime(0L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",2),2L));
      TestUtils.checkLocalFs(outDir,1,0);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",3),3L));
      TestUtils.checkLocalFs(outDir,2,0);
      testHarness.snapshot(1L,1L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",4),4L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",5),5L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",6),6L));
      TestUtils.checkLocalFs(outDir,3,0);
      testHarness.snapshot(2L,2L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",7),7L));
      TestUtils.checkLocalFs(outDir,4,0);
      testHarness.setProcessingTime(101L);
      testHarness.snapshot(3L,3L);
      testHarness.notifyOfCompletedCheckpoint(1L);
      TestUtils.checkLocalFs(outDir,3,1);
      int fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().equals("part-0-0")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@2\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@3\ntest1@4\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-2.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@5\ntest1@6\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().contains(".part-0-3.inprogress")) {
          fileCounter++;
          Assert.assertEquals("test1@7\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(4L,fileCounter);
      testHarness.notifyOfCompletedCheckpoint(3L);
      TestUtils.checkLocalFs(outDir,0,4);
      fileCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getName().equals("part-0-0")) {
          fileCounter++;
          Assert.assertEquals("test1@1\ntest1@2\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().equals("part-0-1")) {
          fileCounter++;
          Assert.assertEquals("test1@3\ntest1@4\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().equals("part-0-2")) {
          fileCounter++;
          Assert.assertEquals("test1@5\ntest1@6\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getName().equals("part-0-3")) {
          fileCounter++;
          Assert.assertEquals("test1@7\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(4L,fileCounter);
    }
   }
  @Test public void testInactivityPeriodWithLateNotify() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,124L)){
      testHarness.setup();
      testHarness.open();
      testHarness.setProcessingTime(0L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test2",1),1L));
      TestUtils.checkLocalFs(outDir,2,0);
      int bucketCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getParentFile().getName().equals("test1")) {
          bucketCounter++;
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test2")) {
          bucketCounter++;
        }
      }
      Assert.assertEquals(2L,bucketCounter);
      testHarness.setProcessingTime(101L);
      TestUtils.checkLocalFs(outDir,2,0);
      testHarness.snapshot(0L,0L);
      TestUtils.checkLocalFs(outDir,2,0);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test3",1),1L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test4",1),1L));
      testHarness.setProcessingTime(202L);
      testHarness.snapshot(1L,0L);
      TestUtils.checkLocalFs(outDir,4,0);
      testHarness.notifyOfCompletedCheckpoint(0L);
      TestUtils.checkLocalFs(outDir,2,2);
      bucketCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getParentFile().getName().equals("test1")) {
          bucketCounter++;
          Assert.assertEquals("part-0-0",fileContents.getKey().getName());
          Assert.assertEquals("test1@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test2")) {
          bucketCounter++;
          Assert.assertEquals("part-0-1",fileContents.getKey().getName());
          Assert.assertEquals("test2@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test3")) {
          bucketCounter++;
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test4")) {
          bucketCounter++;
        }
      }
      Assert.assertEquals(4L,bucketCounter);
      testHarness.notifyOfCompletedCheckpoint(1L);
      TestUtils.checkLocalFs(outDir,0,4);
      bucketCounter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        if (fileContents.getKey().getParentFile().getName().equals("test1")) {
          bucketCounter++;
          Assert.assertEquals("test1@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test2")) {
          bucketCounter++;
          Assert.assertEquals("test2@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test3")) {
          bucketCounter++;
          Assert.assertEquals("part-0-2",fileContents.getKey().getName());
          Assert.assertEquals("test3@1\n",fileContents.getValue());
        }
 else         if (fileContents.getKey().getParentFile().getName().equals("test4")) {
          bucketCounter++;
          Assert.assertEquals("part-0-3",fileContents.getKey().getName());
          Assert.assertEquals("test4@1\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(4L,bucketCounter);
    }
   }
  @Test public void testClosingOnSnapshot() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,2L)){
      testHarness.setup();
      testHarness.open();
      testHarness.setProcessingTime(0L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test2",1),1L));
      TestUtils.checkLocalFs(outDir,2,0);
      testHarness.setProcessingTime(101L);
      TestUtils.checkLocalFs(outDir,2,0);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test3",1),1L));
      TestUtils.checkLocalFs(outDir,3,0);
      testHarness.snapshot(0L,1L);
      TestUtils.checkLocalFs(outDir,3,0);
      testHarness.notifyOfCompletedCheckpoint(0L);
      TestUtils.checkLocalFs(outDir,0,3);
      testHarness.snapshot(1L,0L);
      testHarness.processElement(new StreamRecord<>(Tuple2.of("test4",10),10L));
      TestUtils.checkLocalFs(outDir,1,3);
    }
     TestUtils.checkLocalFs(outDir,1,3);
  }
  @Test public void testScalingDownAndMergingOfStates() throws Exception {
    final File outDir=TEMP_FOLDER.newFolder();
    OperatorSubtaskState mergedSnapshot;
    try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness1=TestUtils.createRescalingTestSink(outDir,2,0,100L,10L);OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness2=TestUtils.createRescalingTestSink(outDir,2,1,100L,10L)){
      testHarness1.setup();
      testHarness1.open();
      testHarness2.setup();
      testHarness2.open();
      testHarness1.processElement(new StreamRecord<>(Tuple2.of("test1",0),0L));
      TestUtils.checkLocalFs(outDir,1,0);
      testHarness2.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
      testHarness2.processElement(new StreamRecord<>(Tuple2.of("test2",1),1L));
      TestUtils.checkLocalFs(outDir,3,0);
      int counter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        final String parentFilename=fileContents.getKey().getParentFile().getName();
        final String inProgressFilename=fileContents.getKey().getName();
        if (parentFilename.equals("test1") && (inProgressFilename.contains(".part-0-0.inprogress") || inProgressFilename.contains(".part-1-0.inprogress"))) {
          counter++;
        }
 else         if (parentFilename.equals("test2") && inProgressFilename.contains(".part-1-1.inprogress")) {
          counter++;
        }
      }
      Assert.assertEquals(3L,counter);
      mergedSnapshot=AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(1L,0L),testHarness2.snapshot(1L,0L));
    }
     try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
      testHarness.setup();
      testHarness.initializeState(mergedSnapshot);
      testHarness.open();
      TestUtils.checkLocalFs(outDir,3,0);
      testHarness.snapshot(2L,2L);
      testHarness.notifyOfCompletedCheckpoint(2L);
      int counter=0;
      for (      Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
        final String parentFilename=fileContents.getKey().getParentFile().getName();
        final String filename=fileContents.getKey().getName();
        if (parentFilename.equals("test1")) {
          if (filename.contains("-0.inprogress") || filename.endsWith("-0")) {
            counter++;
            Assert.assertTrue(fileContents.getValue().equals("test1@1\n") || fileContents.getValue().equals("test1@0\n"));
          }
        }
 else         if (parentFilename.equals("test2") && filename.contains(".part-1-1.inprogress")) {
          counter++;
          Assert.assertEquals("test2@1\n",fileContents.getValue());
        }
      }
      Assert.assertEquals(3L,counter);
    }
   }
}
