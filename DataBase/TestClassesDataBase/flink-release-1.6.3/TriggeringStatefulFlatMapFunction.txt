private static class TriggeringStatefulFlatMapFunction extends ProcessFunction<Integer,String> {
  private static final long serialVersionUID=1L;
  private final ValueStateDescriptor<Integer> state=new ValueStateDescriptor<>("seen-element",IntSerializer.INSTANCE);
  private final TimeDomain timeDomain;
  public TriggeringStatefulFlatMapFunction(  TimeDomain timeDomain){
    this.timeDomain=timeDomain;
  }
  @Override public void processElement(  Integer value,  Context ctx,  Collector<String> out) throws Exception {
    out.collect("INPUT:" + value);
    getRuntimeContext().getState(state).update(value);
    if (timeDomain.equals(TimeDomain.EVENT_TIME)) {
      ctx.timerService().registerEventTimeTimer(ctx.timerService().currentWatermark() + 5);
    }
 else {
      ctx.timerService().registerProcessingTimeTimer(ctx.timerService().currentProcessingTime() + 5);
    }
  }
  @Override public void onTimer(  long timestamp,  OnTimerContext ctx,  Collector<String> out) throws Exception {
    assertEquals(this.timeDomain,ctx.timeDomain());
    out.collect("STATE:" + getRuntimeContext().getState(state).value());
  }
}
