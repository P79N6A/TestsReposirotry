/** 
 * General tests for the YARN resource manager component.
 */
public class YarnResourceManagerTest extends TestLogger {
  private static final Time TIMEOUT=Time.seconds(10L);
  private Configuration flinkConfig=new Configuration();
  private Map<String,String> env=new HashMap<>();
  @Rule public TemporaryFolder folder=new TemporaryFolder();
  @Before public void setup(){
    flinkConfig.setInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN,100);
    File root=folder.getRoot();
    File home=new File(root,"home");
    boolean created=home.mkdir();
    assertTrue(created);
    env.put(ENV_APP_ID,"foo");
    env.put(ENV_CLIENT_HOME_DIR,home.getAbsolutePath());
    env.put(ENV_CLIENT_SHIP_FILES,"");
    env.put(ENV_FLINK_CLASSPATH,"");
    env.put(ENV_HADOOP_USER_NAME,"foo");
    env.put(FLINK_JAR_PATH,root.toURI().toString());
  }
  @After public void teardown(){
    env.clear();
  }
static class TestingYarnResourceManager extends YarnResourceManager {
    public AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient;
    public NMClient mockNMClient;
    public TestingYarnResourceManager(    RpcService rpcService,    String resourceManagerEndpointId,    ResourceID resourceId,    Configuration flinkConfig,    Map<String,String> env,    ResourceManagerConfiguration resourceManagerConfiguration,    HighAvailabilityServices highAvailabilityServices,    HeartbeatServices heartbeatServices,    SlotManager slotManager,    MetricRegistry metricRegistry,    JobLeaderIdService jobLeaderIdService,    ClusterInformation clusterInformation,    FatalErrorHandler fatalErrorHandler,    @Nullable String webInterfaceUrl,    AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient,    NMClient mockNMClient,    JobManagerMetricGroup jobManagerMetricGroup){
      super(rpcService,resourceManagerEndpointId,resourceId,flinkConfig,env,resourceManagerConfiguration,highAvailabilityServices,heartbeatServices,slotManager,metricRegistry,jobLeaderIdService,clusterInformation,fatalErrorHandler,webInterfaceUrl,jobManagerMetricGroup);
      this.mockNMClient=mockNMClient;
      this.mockResourceManagerClient=mockResourceManagerClient;
    }
    public <T>CompletableFuture<T> runInMainThread(    Callable<T> callable){
      return callAsync(callable,TIMEOUT);
    }
    public MainThreadExecutor getMainThreadExecutorForTesting(){
      return super.getMainThreadExecutor();
    }
    @Override protected AMRMClientAsync<AMRMClient.ContainerRequest> createAndStartResourceManagerClient(    YarnConfiguration yarnConfiguration,    int yarnHeartbeatIntervalMillis,    @Nullable String webInteraceUrl){
      return mockResourceManagerClient;
    }
    @Override protected NMClient createAndStartNodeManagerClient(    YarnConfiguration yarnConfiguration){
      return mockNMClient;
    }
    @Override protected void runAsync(    final Runnable runnable){
      runnable.run();
    }
  }
class Context {
    final TestingRpcService rpcService;
    final TestingFatalErrorHandler fatalErrorHandler;
    final MockResourceManagerRuntimeServices rmServices;
    final ResourceManagerConfiguration rmConfiguration;
    final ResourceID rmResourceID;
    static final String RM_ADDRESS="resourceManager";
    final TestingYarnResourceManager resourceManager;
    final int dataPort=1234;
    final HardwareDescription hardwareDescription=new HardwareDescription(1,2L,3L,4L);
    final ResourceProfile resourceProfile1=new ResourceProfile(1.0,200);
    public ContainerId task=ContainerId.newInstance(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1L,0),0),1);
    public String taskHost="host1";
    public NMClient mockNMClient=mock(NMClient.class);
    public AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient=mock(AMRMClientAsync.class);
    public JobManagerMetricGroup mockJMMetricGroup=UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup();
    /** 
 * Create mock RM dependencies.
 */
    Context() throws Exception {
      rpcService=new TestingRpcService();
      fatalErrorHandler=new TestingFatalErrorHandler();
      rmServices=new MockResourceManagerRuntimeServices();
      rmConfiguration=new ResourceManagerConfiguration(Time.seconds(5L),Time.seconds(5L));
      rmResourceID=ResourceID.generate();
      resourceManager=new TestingYarnResourceManager(rpcService,RM_ADDRESS,rmResourceID,flinkConfig,env,rmConfiguration,rmServices.highAvailabilityServices,rmServices.heartbeatServices,rmServices.slotManager,rmServices.metricRegistry,rmServices.jobLeaderIdService,new ClusterInformation("localhost",1234),fatalErrorHandler,null,mockResourceManagerClient,mockNMClient,mockJMMetricGroup);
    }
    /** 
 * Mock services needed by the resource manager.
 */
class MockResourceManagerRuntimeServices {
      public final ScheduledExecutor scheduledExecutor;
      public final TestingHighAvailabilityServices highAvailabilityServices;
      public final HeartbeatServices heartbeatServices;
      public final MetricRegistry metricRegistry;
      public final TestingLeaderElectionService rmLeaderElectionService;
      public final JobLeaderIdService jobLeaderIdService;
      public final SlotManager slotManager;
      public UUID rmLeaderSessionId;
      MockResourceManagerRuntimeServices() throws Exception {
        scheduledExecutor=mock(ScheduledExecutor.class);
        highAvailabilityServices=new TestingHighAvailabilityServices();
        rmLeaderElectionService=new TestingLeaderElectionService();
        highAvailabilityServices.setResourceManagerLeaderElectionService(rmLeaderElectionService);
        heartbeatServices=new TestingHeartbeatServices(5L,5L,scheduledExecutor);
        metricRegistry=NoOpMetricRegistry.INSTANCE;
        slotManager=new SlotManager(new ScheduledExecutorServiceAdapter(new DirectScheduledExecutorService()),Time.seconds(10),Time.seconds(10),Time.minutes(1));
        jobLeaderIdService=new JobLeaderIdService(highAvailabilityServices,rpcService.getScheduledExecutor(),Time.minutes(5L));
      }
      public void grantLeadership() throws Exception {
        rmLeaderSessionId=UUID.randomUUID();
        rmLeaderElectionService.isLeader(rmLeaderSessionId).get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
      }
    }
    /** 
 * Start the resource manager and grant leadership to it.
 */
    public void startResourceManager() throws Exception {
      resourceManager.start();
      rmServices.grantLeadership();
    }
    /** 
 * Stop the Akka actor system.
 */
    public void stopResourceManager() throws Exception {
      rpcService.stopService().get();
    }
  }
  @Test public void testStopWorker() throws Exception {
    new Context(){
{
        startResourceManager();
        CompletableFuture<?> registerSlotRequestFuture=resourceManager.runInMainThread(() -> {
          rmServices.slotManager.registerSlotRequest(new SlotRequest(new JobID(),new AllocationID(),resourceProfile1,taskHost));
          return null;
        }
);
        registerSlotRequestFuture.get();
        Container testingContainer=mock(Container.class);
        when(testingContainer.getId()).thenReturn(ContainerId.newInstance(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(),1),1),1));
        when(testingContainer.getNodeId()).thenReturn(NodeId.newInstance("container",1234));
        when(testingContainer.getResource()).thenReturn(Resource.newInstance(200,1));
        when(testingContainer.getPriority()).thenReturn(Priority.UNDEFINED);
        resourceManager.onContainersAllocated(ImmutableList.of(testingContainer));
        verify(mockResourceManagerClient).addContainerRequest(any(AMRMClient.ContainerRequest.class));
        verify(mockNMClient).startContainer(eq(testingContainer),any(ContainerLaunchContext.class));
        TaskExecutorGateway mockTaskExecutorGateway=mock(TaskExecutorGateway.class);
        rpcService.registerGateway(taskHost,mockTaskExecutorGateway);
        final ResourceManagerGateway rmGateway=resourceManager.getSelfGateway(ResourceManagerGateway.class);
        final ResourceID taskManagerResourceId=new ResourceID(testingContainer.getId().toString());
        final SlotReport slotReport=new SlotReport(new SlotStatus(new SlotID(taskManagerResourceId,1),new ResourceProfile(10,1,1,1,0,Collections.emptyMap())));
        CompletableFuture<Integer> numberRegisteredSlotsFuture=rmGateway.registerTaskExecutor(taskHost,taskManagerResourceId,dataPort,hardwareDescription,Time.seconds(10L)).thenCompose((        RegistrationResponse response) -> {
          assertThat(response,instanceOf(TaskExecutorRegistrationSuccess.class));
          final TaskExecutorRegistrationSuccess success=(TaskExecutorRegistrationSuccess)response;
          return rmGateway.sendSlotReport(taskManagerResourceId,success.getRegistrationId(),slotReport,Time.seconds(10L));
        }
).handleAsync((        Acknowledge ignored,        Throwable throwable) -> rmServices.slotManager.getNumberRegisteredSlots(),resourceManager.getMainThreadExecutorForTesting());
        final int numberRegisteredSlots=numberRegisteredSlotsFuture.get();
        assertEquals(1,numberRegisteredSlots);
        CompletableFuture<?> unregisterAndReleaseFuture=resourceManager.runInMainThread(() -> {
          rmServices.slotManager.unregisterTaskManagersAndReleaseResources();
          return null;
        }
);
        unregisterAndReleaseFuture.get();
        verify(mockNMClient).stopContainer(any(ContainerId.class),any(NodeId.class));
        verify(mockResourceManagerClient).releaseAssignedContainer(any(ContainerId.class));
        stopResourceManager();
        assertTrue(rmServices.slotManager.getNumberRegisteredSlots() == 0);
        assertTrue(resourceManager.getNumberOfRegisteredTaskManagers().get() == 0);
      }
    }
;
  }
  /** 
 * Tests that application files are deleted when the YARN application master is de-registered.
 */
  @Test public void testDeleteApplicationFiles() throws Exception {
    new Context(){
{
        final File applicationDir=folder.newFolder(".flink");
        env.put(FLINK_YARN_FILES,applicationDir.getCanonicalPath());
        startResourceManager();
        resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED,null);
        assertFalse("YARN application directory was not removed",Files.exists(applicationDir.toPath()));
      }
    }
;
  }
  /** 
 * Tests that YarnResourceManager will not request more containers than needs during callback from Yarn when container is Completed.
 * @throws Exception
 */
  @Test public void testOnContainerCompleted() throws Exception {
    new Context(){
{
        startResourceManager();
        CompletableFuture<?> registerSlotRequestFuture=resourceManager.runInMainThread(() -> {
          rmServices.slotManager.registerSlotRequest(new SlotRequest(new JobID(),new AllocationID(),resourceProfile1,taskHost));
          return null;
        }
);
        registerSlotRequestFuture.get();
        ContainerId testContainerId=ContainerId.newInstance(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(),1),1),1);
        Container testingContainer=mock(Container.class);
        when(testingContainer.getId()).thenReturn(testContainerId);
        when(testingContainer.getNodeId()).thenReturn(NodeId.newInstance("container",1234));
        when(testingContainer.getResource()).thenReturn(Resource.newInstance(200,1));
        when(testingContainer.getPriority()).thenReturn(Priority.UNDEFINED);
        resourceManager.onContainersAllocated(ImmutableList.of(testingContainer));
        verify(mockResourceManagerClient).addContainerRequest(any(AMRMClient.ContainerRequest.class));
        verify(mockNMClient).startContainer(eq(testingContainer),any(ContainerLaunchContext.class));
        ContainerStatus testingContainerStatus=mock(ContainerStatus.class);
        when(testingContainerStatus.getContainerId()).thenReturn(testContainerId);
        when(testingContainerStatus.getState()).thenReturn(ContainerState.COMPLETE);
        when(testingContainerStatus.getDiagnostics()).thenReturn("Test exit");
        when(testingContainerStatus.getExitStatus()).thenReturn(-1);
        resourceManager.onContainersCompleted(ImmutableList.of(testingContainerStatus));
        verify(mockResourceManagerClient,times(2)).addContainerRequest(any(AMRMClient.ContainerRequest.class));
        when(testingContainerStatus.getContainerId()).thenReturn(testContainerId);
        when(testingContainerStatus.getState()).thenReturn(ContainerState.COMPLETE);
        when(testingContainerStatus.getDiagnostics()).thenReturn("Test exit");
        when(testingContainerStatus.getExitStatus()).thenReturn(-1);
        resourceManager.onContainersCompleted(ImmutableList.of(testingContainerStatus));
        verify(mockResourceManagerClient,times(2)).addContainerRequest(any(AMRMClient.ContainerRequest.class));
      }
    }
;
  }
}
