/** 
 * Tests for the RUN command using a  {@link org.apache.flink.yarn.cli.FlinkYarnSessionCli} insidethe  {@link org.apache.flink.client.cli.CliFrontend}.
 * @see org.apache.flink.client.cli.CliFrontendRunTest
 */
@RunWith(Parameterized.class) public class CliFrontendRunWithYarnTest extends CliFrontendTestBase {
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  @BeforeClass public static void init(){
    CliFrontendTestUtils.pipeSystemOutToNull();
  }
  @AfterClass public static void shutdown(){
    CliFrontendTestUtils.restoreSystemOut();
  }
  @Test public void testRun() throws Exception {
    String testJarPath=getTestJarPath("BatchWordCount.jar").getAbsolutePath();
    Configuration configuration=new Configuration();
    configuration.setString(CoreOptions.MODE,mode);
    configuration.setString(JobManagerOptions.ADDRESS,"localhost");
    configuration.setInteger(JobManagerOptions.PORT,8081);
    FlinkYarnSessionCli yarnCLI=new TestingFlinkYarnSessionCli(configuration,tmp.getRoot().getAbsolutePath(),"y","yarn");
{
      String[] parameters={"-m","yarn-cluster","-yn","1","-p","2","-d",testJarPath};
      verifyCliFrontend(yarnCLI,parameters,2,true,true);
    }
{
      String[] parameters={"-m","yarn-cluster","-yn","1","-p","2","-yd",testJarPath};
      verifyCliFrontend(yarnCLI,parameters,2,true,true);
    }
  }
private static class TestingFlinkYarnSessionCli extends FlinkYarnSessionCli {
    @SuppressWarnings("unchecked") private final ClusterClient<ApplicationId> clusterClient;
    private final String configurationDirectory;
    private TestingFlinkYarnSessionCli(    Configuration configuration,    String configurationDirectory,    String shortPrefix,    String longPrefix) throws Exception {
      super(configuration,configurationDirectory,shortPrefix,longPrefix);
      this.clusterClient=new FakeClusterClient(configuration);
      this.configurationDirectory=configurationDirectory;
    }
    @Override public AbstractYarnClusterDescriptor createClusterDescriptor(    CommandLine commandLine) throws FlinkException {
      AbstractYarnClusterDescriptor parent=super.createClusterDescriptor(commandLine);
      return new NonDeployingDetachedYarnClusterDescriptor(parent.getFlinkConfiguration(),(YarnConfiguration)parent.getYarnClient().getConfig(),configurationDirectory,parent.getYarnClient(),clusterClient);
    }
  }
private static class NonDeployingDetachedYarnClusterDescriptor extends NonDeployingYarnClusterDescriptor {
    NonDeployingDetachedYarnClusterDescriptor(    Configuration flinkConfiguration,    YarnConfiguration yarnConfiguration,    String configurationDirectory,    YarnClient yarnClient,    ClusterClient<ApplicationId> clusterClient){
      super(flinkConfiguration,yarnConfiguration,configurationDirectory,yarnClient,clusterClient);
    }
    @Override public ClusterClient<ApplicationId> deployJobCluster(    ClusterSpecification clusterSpecification,    JobGraph jobGraph,    boolean detached){
      assertTrue(detached);
      return super.deployJobCluster(clusterSpecification,jobGraph,true);
    }
  }
}
