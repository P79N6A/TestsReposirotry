public class BitSetTest {
  private BitSet bitSet;
  int byteSize=1024;
  MemorySegment memorySegment=MemorySegmentFactory.allocateUnpooledSegment(byteSize);
  @Before public void init(){
    bitSet=new BitSet(byteSize);
    bitSet.setMemorySegment(memorySegment,0);
    bitSet.clear();
  }
  @Test(expected=IllegalArgumentException.class) public void verifyBitSetSize1(){
    bitSet.setMemorySegment(memorySegment,1);
  }
  @Test(expected=IllegalArgumentException.class) public void verifyBitSetSize2(){
    bitSet.setMemorySegment(null,1);
  }
  @Test(expected=IllegalArgumentException.class) public void verifyBitSetSize3(){
    bitSet.setMemorySegment(memorySegment,-1);
  }
  @Test(expected=IllegalArgumentException.class) public void verifyInputIndex1(){
    bitSet.set(8 * byteSize + 1);
  }
  @Test(expected=IllegalArgumentException.class) public void verifyInputIndex2(){
    bitSet.set(-1);
  }
  @Test public void testSetValues(){
    int bitSize=bitSet.bitSize();
    assertEquals(bitSize,8 * 1024);
    for (int i=0; i < bitSize; i++) {
      assertFalse(bitSet.get(i));
      if (i % 2 == 0) {
        bitSet.set(i);
      }
    }
    for (int i=0; i < bitSize; i++) {
      if (i % 2 == 0) {
        assertTrue(bitSet.get(i));
      }
 else {
        assertFalse(bitSet.get(i));
      }
    }
  }
}
