/** 
 * Test for forwarding of state reporting to and from  {@link org.apache.flink.runtime.state.TaskStateManager}.
 */
public class LocalStateForwardingTest extends TestLogger {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  /** 
 * This tests the forwarding of jm and tm-local state from the futures reported by the backends, through the async checkpointing thread to the  {@link org.apache.flink.runtime.state.TaskStateManager}.
 */
  @Test public void testReportingFromSnapshotToTaskStateManager(){
    TestTaskStateManager taskStateManager=new TestTaskStateManager();
    StreamMockEnvironment streamMockEnvironment=new StreamMockEnvironment(new Configuration(),new Configuration(),new ExecutionConfig(),1024 * 1024,new MockInputSplitProvider(),0,taskStateManager);
    StreamTask testStreamTask=new StreamTaskTest.NoOpStreamTask(streamMockEnvironment);
    CheckpointMetaData checkpointMetaData=new CheckpointMetaData(0L,0L);
    CheckpointMetrics checkpointMetrics=new CheckpointMetrics();
    Map<OperatorID,OperatorSnapshotFutures> snapshots=new HashMap<>(1);
    OperatorSnapshotFutures osFuture=new OperatorSnapshotFutures();
    osFuture.setKeyedStateManagedFuture(createSnapshotResult(KeyedStateHandle.class));
    osFuture.setKeyedStateRawFuture(createSnapshotResult(KeyedStateHandle.class));
    osFuture.setOperatorStateManagedFuture(createSnapshotResult(OperatorStateHandle.class));
    osFuture.setOperatorStateRawFuture(createSnapshotResult(OperatorStateHandle.class));
    OperatorID operatorID=new OperatorID();
    snapshots.put(operatorID,osFuture);
    StreamTask.AsyncCheckpointRunnable checkpointRunnable=new StreamTask.AsyncCheckpointRunnable(testStreamTask,snapshots,checkpointMetaData,checkpointMetrics,0L);
    checkpointRunnable.run();
    TaskStateSnapshot lastJobManagerTaskStateSnapshot=taskStateManager.getLastJobManagerTaskStateSnapshot();
    TaskStateSnapshot lastTaskManagerTaskStateSnapshot=taskStateManager.getLastTaskManagerTaskStateSnapshot();
    OperatorSubtaskState jmState=lastJobManagerTaskStateSnapshot.getSubtaskStateByOperatorID(operatorID);
    OperatorSubtaskState tmState=lastTaskManagerTaskStateSnapshot.getSubtaskStateByOperatorID(operatorID);
    performCheck(osFuture.getKeyedStateManagedFuture(),jmState.getManagedKeyedState(),tmState.getManagedKeyedState());
    performCheck(osFuture.getKeyedStateRawFuture(),jmState.getRawKeyedState(),tmState.getRawKeyedState());
    performCheck(osFuture.getOperatorStateManagedFuture(),jmState.getManagedOperatorState(),tmState.getManagedOperatorState());
    performCheck(osFuture.getOperatorStateRawFuture(),jmState.getRawOperatorState(),tmState.getRawOperatorState());
  }
  /** 
 * This tests that state that was reported to the  {@link org.apache.flink.runtime.state.TaskStateManager} is alsoreported to  {@link org.apache.flink.runtime.taskmanager.CheckpointResponder} and {@link TaskLocalStateStoreImpl}.
 */
  @Test public void testReportingFromTaskStateManagerToResponderAndTaskLocalStateStore() throws Exception {
    final JobID jobID=new JobID();
    final AllocationID allocationID=new AllocationID();
    final ExecutionAttemptID executionAttemptID=new ExecutionAttemptID();
    final CheckpointMetaData checkpointMetaData=new CheckpointMetaData(42L,4711L);
    final CheckpointMetrics checkpointMetrics=new CheckpointMetrics();
    final int subtaskIdx=42;
    JobVertexID jobVertexID=new JobVertexID();
    TaskStateSnapshot jmSnapshot=new TaskStateSnapshot();
    TaskStateSnapshot tmSnapshot=new TaskStateSnapshot();
    final AtomicBoolean jmReported=new AtomicBoolean(false);
    final AtomicBoolean tmReported=new AtomicBoolean(false);
    TestCheckpointResponder checkpointResponder=new TestCheckpointResponder(){
      @Override public void acknowledgeCheckpoint(      JobID lJobID,      ExecutionAttemptID lExecutionAttemptID,      long lCheckpointId,      CheckpointMetrics lCheckpointMetrics,      TaskStateSnapshot lSubtaskState){
        Assert.assertEquals(jobID,lJobID);
        Assert.assertEquals(executionAttemptID,lExecutionAttemptID);
        Assert.assertEquals(checkpointMetaData.getCheckpointId(),lCheckpointId);
        Assert.assertEquals(checkpointMetrics,lCheckpointMetrics);
        jmReported.set(true);
      }
    }
;
    Executor executor=Executors.directExecutor();
    LocalRecoveryDirectoryProviderImpl directoryProvider=new LocalRecoveryDirectoryProviderImpl(temporaryFolder.newFolder(),jobID,jobVertexID,subtaskIdx);
    LocalRecoveryConfig localRecoveryConfig=new LocalRecoveryConfig(true,directoryProvider);
    TaskLocalStateStore taskLocalStateStore=new TaskLocalStateStoreImpl(jobID,allocationID,jobVertexID,subtaskIdx,localRecoveryConfig,executor){
      @Override public void storeLocalState(      @Nonnegative long checkpointId,      @Nullable TaskStateSnapshot localState){
        Assert.assertEquals(tmSnapshot,localState);
        tmReported.set(true);
      }
    }
;
    TaskStateManagerImpl taskStateManager=new TaskStateManagerImpl(jobID,executionAttemptID,taskLocalStateStore,null,checkpointResponder);
    taskStateManager.reportTaskStateSnapshots(checkpointMetaData,checkpointMetrics,jmSnapshot,tmSnapshot);
    Assert.assertTrue("Reporting for JM state was not called.",jmReported.get());
    Assert.assertTrue("Reporting for TM state was not called.",tmReported.get());
  }
  private static <T extends StateObject>void performCheck(  Future<SnapshotResult<T>> resultFuture,  StateObjectCollection<T> jmState,  StateObjectCollection<T> tmState){
    SnapshotResult<T> snapshotResult;
    try {
      snapshotResult=resultFuture.get();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    Assert.assertEquals(snapshotResult.getJobManagerOwnedSnapshot(),jmState.iterator().next());
    Assert.assertEquals(snapshotResult.getTaskLocalSnapshot(),tmState.iterator().next());
  }
  private static <T extends StateObject>RunnableFuture<SnapshotResult<T>> createSnapshotResult(  Class<T> clazz){
    return DoneFuture.of(SnapshotResult.withLocalState(mock(clazz),mock(clazz)));
  }
}
