/** 
 * Tests for  {@link TextInputFormat}.
 */
public class TextInputFormatTest {
  @Test public void testSimpleRead(){
    final String first="First line";
    final String second="Second line";
    try {
      File tempFile=File.createTempFile("TextInputFormatTest","tmp");
      tempFile.deleteOnExit();
      tempFile.setWritable(true);
      PrintStream ps=new PrintStream(tempFile);
      ps.println(first);
      ps.println(second);
      ps.close();
      TextInputFormat inputFormat=new TextInputFormat(new Path(tempFile.toURI().toString()));
      Configuration parameters=new Configuration();
      inputFormat.configure(parameters);
      FileInputSplit[] splits=inputFormat.createInputSplits(1);
      assertTrue("expected at least one input split",splits.length >= 1);
      inputFormat.open(splits[0]);
      String result="";
      assertFalse(inputFormat.reachedEnd());
      result=inputFormat.nextRecord("");
      assertNotNull("Expecting first record here",result);
      assertEquals(first,result);
      assertFalse(inputFormat.reachedEnd());
      result=inputFormat.nextRecord(result);
      assertNotNull("Expecting second record here",result);
      assertEquals(second,result);
      assertTrue(inputFormat.reachedEnd() || null == inputFormat.nextRecord(result));
    }
 catch (    Throwable t) {
      System.err.println("test failed with exception: " + t.getMessage());
      t.printStackTrace(System.err);
      fail("Test erroneous");
    }
  }
  @Test public void testNestedFileRead(){
    String[] dirs=new String[]{"tmp/first/","tmp/second/"};
    List<String> expectedFiles=new ArrayList<>();
    try {
      for (      String dir : dirs) {
        File tmpDir=new File(dir);
        if (!tmpDir.exists()) {
          tmpDir.mkdirs();
        }
        File tempFile=File.createTempFile("TextInputFormatTest",".tmp",tmpDir);
        tempFile.deleteOnExit();
        expectedFiles.add(new Path(tempFile.getAbsolutePath()).makeQualified(FileSystem.getLocalFileSystem()).toString());
      }
      File parentDir=new File("tmp");
      TextInputFormat inputFormat=new TextInputFormat(new Path(parentDir.toURI()));
      inputFormat.setNestedFileEnumeration(true);
      inputFormat.setNumLineSamples(10);
      Configuration config=new Configuration();
      config.setBoolean("recursive.file.enumeration",false);
      config.setString("delimited-format.numSamples","20");
      inputFormat.configure(config);
      assertTrue(inputFormat.getNestedFileEnumeration());
      assertTrue(inputFormat.getNumLineSamples() == 10);
      FileInputSplit[] splits=inputFormat.createInputSplits(expectedFiles.size());
      List<String> paths=new ArrayList<>();
      for (      FileInputSplit split : splits) {
        paths.add(split.getPath().toString());
      }
      Collections.sort(expectedFiles);
      Collections.sort(paths);
      for (int i=0; i < expectedFiles.size(); i++) {
        assertTrue(expectedFiles.get(i).equals(paths.get(i)));
      }
    }
 catch (    Throwable t) {
      System.err.println("test failed with exception: " + t.getMessage());
      t.printStackTrace(System.err);
      fail("Test erroneous");
    }
  }
  /** 
 * This tests cases when line ends with \r\n and \n is used as delimiter, the last \r should be removed.
 */
  @Test public void testRemovingTrailingCR(){
    testRemovingTrailingCR("\n","\n");
    testRemovingTrailingCR("\r\n","\n");
    testRemovingTrailingCR("|","|");
    testRemovingTrailingCR("|","\n");
  }
  private void testRemovingTrailingCR(  String lineBreaker,  String delimiter){
    File tempFile=null;
    String first="First line";
    String second="Second line";
    String content=first + lineBreaker + second+ lineBreaker;
    try {
      tempFile=File.createTempFile("TextInputFormatTest","tmp");
      tempFile.deleteOnExit();
      tempFile.setWritable(true);
      OutputStreamWriter wrt=new OutputStreamWriter(new FileOutputStream(tempFile));
      wrt.write(content);
      wrt.close();
      TextInputFormat inputFormat=new TextInputFormat(new Path(tempFile.toURI().toString()));
      inputFormat.setFilePath(tempFile.toURI().toString());
      Configuration parameters=new Configuration();
      inputFormat.configure(parameters);
      inputFormat.setDelimiter(delimiter);
      FileInputSplit[] splits=inputFormat.createInputSplits(1);
      inputFormat.open(splits[0]);
      String result="";
      if ((delimiter.equals("\n") && (lineBreaker.equals("\n") || lineBreaker.equals("\r\n"))) || (lineBreaker.equals(delimiter))) {
        result=inputFormat.nextRecord("");
        assertNotNull("Expecting first record here",result);
        assertEquals(first,result);
        result=inputFormat.nextRecord(result);
        assertNotNull("Expecting second record here",result);
        assertEquals(second,result);
        result=inputFormat.nextRecord(result);
        assertNull("The input file is over",result);
      }
 else {
        result=inputFormat.nextRecord("");
        assertNotNull("Expecting first record here",result);
        assertEquals(content,result);
      }
    }
 catch (    Throwable t) {
      System.err.println("test failed with exception: " + t.getMessage());
      t.printStackTrace(System.err);
      fail("Test erroneous");
    }
  }
}
