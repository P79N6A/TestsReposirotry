/** 
 * Tests for the  {@link PackagedProgramTest}.
 */
public class PackagedProgramTest {
  @Rule public final TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Test public void testGetPreviewPlan(){
    try {
      PackagedProgram prog=new PackagedProgram(new File(CliFrontendTestUtils.getTestJarPath()));
      final PrintStream out=System.out;
      final PrintStream err=System.err;
      try {
        System.setOut(new PrintStream(new NullOutputStream()));
        System.setErr(new PrintStream(new NullOutputStream()));
        Assert.assertNotNull(prog.getPreviewPlan());
      }
  finally {
        System.setOut(out);
        System.setErr(err);
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Test is erroneous: " + e.getMessage());
    }
  }
  @Test public void testExtractContainedLibraries() throws Exception {
    String s="testExtractContainedLibraries";
    byte[] nestedJarContent=s.getBytes(ConfigConstants.DEFAULT_CHARSET);
    File fakeJar=temporaryFolder.newFile("test.jar");
    try (ZipOutputStream zos=new ZipOutputStream(new FileOutputStream(fakeJar))){
      ZipEntry entry=new ZipEntry("lib/internalTest.jar");
      zos.putNextEntry(entry);
      zos.write(nestedJarContent);
      zos.closeEntry();
    }
     final List<File> files=PackagedProgram.extractContainedLibraries(fakeJar.toURI().toURL());
    Assert.assertEquals(1,files.size());
    Assert.assertArrayEquals(nestedJarContent,Files.readAllBytes(files.iterator().next().toPath()));
  }
private static final class NullOutputStream extends java.io.OutputStream {
    @Override public void write(    int b){
    }
  }
}
