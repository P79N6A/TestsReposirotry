/** 
 * Tests for  {@link Graph#groupReduceOnEdges} and {@link Graph#reduceOnEdges}.
 */
@RunWith(Parameterized.class) public class ReduceOnEdgesMethodsITCase extends MultipleProgramsTestBase {
  public ReduceOnEdgesMethodsITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testLowestWeightOutNeighbor() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.groupReduceOnEdges(new SelectMinWeightNeighbor(),EdgeDirection.OUT);
    List<Tuple2<Long,Long>> result=verticesWithLowestOutNeighbor.collect();
    expectedResult="1,2\n" + "2,3\n" + "3,4\n"+ "4,5\n"+ "5,1\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testLowestWeightInNeighbor() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.groupReduceOnEdges(new SelectMinWeightInNeighbor(),EdgeDirection.IN);
    List<Tuple2<Long,Long>> result=verticesWithLowestOutNeighbor.collect();
    expectedResult="1,5\n" + "2,1\n" + "3,1\n"+ "4,3\n"+ "5,3\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllOutNeighbors() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllOutNeighbors=graph.groupReduceOnEdges(new SelectOutNeighbors(),EdgeDirection.OUT);
    List<Tuple2<Long,Long>> result=verticesWithAllOutNeighbors.collect();
    expectedResult="1,2\n" + "1,3\n" + "2,3\n"+ "3,4\n"+ "3,5\n"+ "4,5\n"+ "5,1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllOutNeighborsNoValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllOutNeighbors=graph.groupReduceOnEdges(new SelectOutNeighborsExcludeFive(),EdgeDirection.OUT);
    List<Tuple2<Long,Long>> result=verticesWithAllOutNeighbors.collect();
    expectedResult="1,2\n" + "1,3\n" + "2,3\n"+ "3,4\n"+ "3,5\n"+ "4,5";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllOutNeighborsWithValueGreaterThanTwo() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllOutNeighbors=graph.groupReduceOnEdges(new SelectOutNeighborsValueGreaterThanTwo(),EdgeDirection.OUT);
    List<Tuple2<Long,Long>> result=verticesWithAllOutNeighbors.collect();
    expectedResult="3,4\n" + "3,5\n" + "4,5\n"+ "5,1";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllInNeighbors() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllInNeighbors=graph.groupReduceOnEdges(new SelectInNeighbors(),EdgeDirection.IN);
    List<Tuple2<Long,Long>> result=verticesWithAllInNeighbors.collect();
    expectedResult="1,5\n" + "2,1\n" + "3,1\n"+ "3,2\n"+ "4,3\n"+ "5,3\n"+ "5,4";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllInNeighborsNoValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllInNeighbors=graph.groupReduceOnEdges(new SelectInNeighborsExceptFive(),EdgeDirection.IN);
    List<Tuple2<Long,Long>> result=verticesWithAllInNeighbors.collect();
    expectedResult="1,5\n" + "2,1\n" + "3,1\n"+ "3,2\n"+ "4,3";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllInNeighborsWithValueGreaterThanTwo() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllInNeighbors=graph.groupReduceOnEdges(new SelectInNeighborsValueGreaterThanTwo(),EdgeDirection.IN);
    List<Tuple2<Long,Long>> result=verticesWithAllInNeighbors.collect();
    expectedResult="3,1\n" + "3,2\n" + "4,3\n"+ "5,3\n"+ "5,4";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllNeighbors() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllNeighbors=graph.groupReduceOnEdges(new SelectNeighbors(),EdgeDirection.ALL);
    List<Tuple2<Long,Long>> result=verticesWithAllNeighbors.collect();
    expectedResult="1,2\n" + "1,3\n" + "1,5\n"+ "2,1\n"+ "2,3\n"+ "3,1\n"+ "3,2\n"+ "3,4\n"+ "3,5\n"+ "4,3\n"+ "4,5\n"+ "5,1\n"+ "5,3\n"+ "5,4";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllNeighborsNoValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllNeighbors=graph.groupReduceOnEdges(new SelectNeighborsExceptFiveAndTwo(),EdgeDirection.ALL);
    List<Tuple2<Long,Long>> result=verticesWithAllNeighbors.collect();
    expectedResult="1,2\n" + "1,3\n" + "1,5\n"+ "3,1\n"+ "3,2\n"+ "3,4\n"+ "3,5\n"+ "4,3\n"+ "4,5";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAllNeighborsWithValueGreaterThanFour() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithAllNeighbors=graph.groupReduceOnEdges(new SelectNeighborsValueGreaterThanFour(),EdgeDirection.ALL);
    List<Tuple2<Long,Long>> result=verticesWithAllNeighbors.collect();
    expectedResult="5,1\n" + "5,3\n" + "5,4";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testMaxWeightEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithMaxEdgeWeight=graph.groupReduceOnEdges(new SelectMaxWeightNeighbor(),EdgeDirection.ALL);
    List<Tuple2<Long,Long>> result=verticesWithMaxEdgeWeight.collect();
    expectedResult="1,51\n" + "2,23\n" + "3,35\n"+ "4,45\n"+ "5,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testLowestWeightOutNeighborNoValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new SelectMinWeightNeighborNoValue(),EdgeDirection.OUT);
    List<Tuple2<Long,Long>> result=verticesWithLowestOutNeighbor.collect();
    expectedResult="1,12\n" + "2,23\n" + "3,34\n"+ "4,45\n"+ "5,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testLowestWeightInNeighborNoValue() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new SelectMinWeightNeighborNoValue(),EdgeDirection.IN);
    List<Tuple2<Long,Long>> result=verticesWithLowestOutNeighbor.collect();
    expectedResult="1,51\n" + "2,12\n" + "3,13\n"+ "4,34\n"+ "5,35\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testMaxWeightAllNeighbors() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithMaxEdgeWeight=graph.reduceOnEdges(new SelectMaxWeightNeighborNoValue(),EdgeDirection.ALL);
    List<Tuple2<Long,Long>> result=verticesWithMaxEdgeWeight.collect();
    expectedResult="1,51\n" + "2,23\n" + "3,35\n"+ "4,45\n"+ "5,51\n";
    compareResultAsTuples(result,expectedResult);
  }
@SuppressWarnings("serial") private static final class SelectMinWeightNeighbor implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      long weight=Long.MAX_VALUE;
      long minNeighborId=0;
      for (      Edge<Long,Long> edge : edges) {
        if (edge.getValue() < weight) {
          weight=edge.getValue();
          minNeighborId=edge.getTarget();
        }
      }
      out.collect(new Tuple2<>(v.getId(),minNeighborId));
    }
  }
@SuppressWarnings("serial") private static final class SelectMaxWeightNeighbor implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      long weight=Long.MIN_VALUE;
      for (      Edge<Long,Long> edge : edges) {
        if (edge.getValue() > weight) {
          weight=edge.getValue();
        }
      }
      out.collect(new Tuple2<>(v.getId(),weight));
    }
  }
@SuppressWarnings("serial") private static final class SelectMinWeightNeighborNoValue implements ReduceEdgesFunction<Long> {
    @Override public Long reduceEdges(    Long firstEdgeValue,    Long secondEdgeValue){
      return Math.min(firstEdgeValue,secondEdgeValue);
    }
  }
@SuppressWarnings("serial") private static final class SelectMaxWeightNeighborNoValue implements ReduceEdgesFunction<Long> {
    @Override public Long reduceEdges(    Long firstEdgeValue,    Long secondEdgeValue){
      return Math.max(firstEdgeValue,secondEdgeValue);
    }
  }
@SuppressWarnings("serial") private static final class SelectMinWeightInNeighbor implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      long weight=Long.MAX_VALUE;
      long minNeighborId=0;
      for (      Edge<Long,Long> edge : edges) {
        if (edge.getValue() < weight) {
          weight=edge.getValue();
          minNeighborId=edge.getSource();
        }
      }
      out.collect(new Tuple2<>(v.getId(),minNeighborId));
    }
  }
@SuppressWarnings("serial") private static final class SelectOutNeighbors implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        out.collect(new Tuple2<>(edge.f0,edge.f1.getTarget()));
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectOutNeighborsExcludeFive implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        if (edge.f0 != 5) {
          out.collect(new Tuple2<>(edge.f0,edge.f1.getTarget()));
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectOutNeighborsValueGreaterThanTwo implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Edge<Long,Long> edge : edges) {
        if (v.getValue() > 2) {
          out.collect(new Tuple2<>(v.getId(),edge.getTarget()));
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectInNeighbors implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        out.collect(new Tuple2<>(edge.f0,edge.f1.getSource()));
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectInNeighborsExceptFive implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        if (edge.f0 != 5) {
          out.collect(new Tuple2<>(edge.f0,edge.f1.getSource()));
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectInNeighborsValueGreaterThanTwo implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Edge<Long,Long> edge : edges) {
        if (v.getValue() > 2) {
          out.collect(new Tuple2<>(v.getId(),edge.getSource()));
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectNeighbors implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        if (Objects.equals(edge.f0,edge.f1.getTarget())) {
          out.collect(new Tuple2<>(edge.f0,edge.f1.getSource()));
        }
 else {
          out.collect(new Tuple2<>(edge.f0,edge.f1.getTarget()));
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectNeighborsExceptFiveAndTwo implements EdgesFunction<Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Iterable<Tuple2<Long,Edge<Long,Long>>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Tuple2<Long,Edge<Long,Long>> edge : edges) {
        if (edge.f0 != 5 && edge.f0 != 2) {
          if (Objects.equals(edge.f0,edge.f1.getTarget())) {
            out.collect(new Tuple2<>(edge.f0,edge.f1.getSource()));
          }
 else {
            out.collect(new Tuple2<>(edge.f0,edge.f1.getTarget()));
          }
        }
      }
    }
  }
@SuppressWarnings("serial") private static final class SelectNeighborsValueGreaterThanFour implements EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>> {
    @Override public void iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges,    Collector<Tuple2<Long,Long>> out) throws Exception {
      for (      Edge<Long,Long> edge : edges) {
        if (v.getValue() > 4) {
          if (v.getId().equals(edge.getTarget())) {
            out.collect(new Tuple2<>(v.getId(),edge.getSource()));
          }
 else {
            out.collect(new Tuple2<>(v.getId(),edge.getTarget()));
          }
        }
      }
    }
  }
}
