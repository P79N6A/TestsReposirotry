/** 
 * Tests for the  {@link SecurityUtils}.
 */
public class SecurityUtilsTest {
static class TestSecurityModule implements SecurityModule {
    boolean installed;
    @Override public void install() throws SecurityInstallException {
      installed=true;
    }
    @Override public void uninstall() throws SecurityInstallException {
      installed=false;
    }
static class Factory implements SecurityModuleFactory {
      @Override public SecurityModule createModule(      SecurityConfiguration securityConfig){
        return new TestSecurityModule();
      }
    }
  }
  @AfterClass public static void afterClass(){
    SecurityUtils.uninstall();
  }
  @Test public void testModuleInstall() throws Exception {
    SecurityConfiguration sc=new SecurityConfiguration(new Configuration(),Collections.singletonList(new TestSecurityModule.Factory()));
    SecurityUtils.install(sc);
    assertEquals(1,SecurityUtils.getInstalledModules().size());
    TestSecurityModule testModule=(TestSecurityModule)SecurityUtils.getInstalledModules().get(0);
    assertTrue(testModule.installed);
    SecurityUtils.uninstall();
    assertNull(SecurityUtils.getInstalledModules());
    assertFalse(testModule.installed);
  }
  @Test public void testSecurityContext() throws Exception {
    SecurityConfiguration sc=new SecurityConfiguration(new Configuration(),Collections.singletonList(new TestSecurityModule.Factory()));
    SecurityUtils.install(sc);
    assertEquals(HadoopSecurityContext.class,SecurityUtils.getInstalledContext().getClass());
    SecurityUtils.uninstall();
    assertEquals(NoOpSecurityContext.class,SecurityUtils.getInstalledContext().getClass());
  }
  @Test public void testKerberosLoginContextParsing(){
    List<String> expectedLoginContexts=Arrays.asList("Foo bar","Client");
    Configuration testFlinkConf;
    SecurityConfiguration testSecurityConf;
    testFlinkConf=new Configuration();
    testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS,"Foo bar,Client");
    testSecurityConf=new SecurityConfiguration(testFlinkConf,Collections.singletonList(new TestSecurityModule.Factory()));
    assertEquals(expectedLoginContexts,testSecurityConf.getLoginContextNames());
    testFlinkConf=new Configuration();
    testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS,"Foo bar , Client");
    testSecurityConf=new SecurityConfiguration(testFlinkConf,Collections.singletonList(new TestSecurityModule.Factory()));
    assertEquals(expectedLoginContexts,testSecurityConf.getLoginContextNames());
    testFlinkConf=new Configuration();
    testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS," Foo bar , Client ");
    testSecurityConf=new SecurityConfiguration(testFlinkConf,Collections.singletonList(new TestSecurityModule.Factory()));
    assertEquals(expectedLoginContexts,testSecurityConf.getLoginContextNames());
    testFlinkConf=new Configuration();
    testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS,"Foo bar,,Client");
    testSecurityConf=new SecurityConfiguration(testFlinkConf,Collections.singletonList(new TestSecurityModule.Factory()));
    assertEquals(expectedLoginContexts,testSecurityConf.getLoginContextNames());
    testFlinkConf=new Configuration();
    testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS,"Foo bar, ,, Client,");
    testSecurityConf=new SecurityConfiguration(testFlinkConf,Collections.singletonList(new TestSecurityModule.Factory()));
    assertEquals(expectedLoginContexts,testSecurityConf.getLoginContextNames());
  }
}
