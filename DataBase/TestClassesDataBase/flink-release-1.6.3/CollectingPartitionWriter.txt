/** 
 * Partition writer that collects the added buffers/events in multiple queue.
 */
private static class CollectingPartitionWriter implements ResultPartitionWriter {
  private final Queue<BufferConsumer>[] queues;
  private final BufferProvider bufferProvider;
  private final ResultPartitionID partitionId=new ResultPartitionID();
  /** 
 * Create the partition writer.
 * @param queues one queue per outgoing channel
 * @param bufferProvider buffer provider
 */
  private CollectingPartitionWriter(  Queue<BufferConsumer>[] queues,  BufferProvider bufferProvider){
    this.queues=queues;
    this.bufferProvider=bufferProvider;
  }
  @Override public BufferProvider getBufferProvider(){
    return bufferProvider;
  }
  @Override public ResultPartitionID getPartitionId(){
    return partitionId;
  }
  @Override public int getNumberOfSubpartitions(){
    return queues.length;
  }
  @Override public int getNumTargetKeyGroups(){
    return 1;
  }
  @Override public void addBufferConsumer(  BufferConsumer buffer,  int targetChannel) throws IOException {
    queues[targetChannel].add(buffer);
  }
  @Override public void flushAll(){
  }
  @Override public void flush(  int subpartitionIndex){
  }
}
