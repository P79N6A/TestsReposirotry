public class TaskStateStatsTest {
  private final ThreadLocalRandom rand=ThreadLocalRandom.current();
  /** 
 * Tests that subtask stats are correctly collected.
 */
  @Test public void testHandInSubtasks() throws Exception {
    JobVertexID jobVertexId=new JobVertexID();
    SubtaskStateStats[] subtasks=new SubtaskStateStats[7];
    TaskStateStats taskStats=new TaskStateStats(jobVertexId,subtasks.length);
    assertEquals(jobVertexId,taskStats.getJobVertexId());
    assertEquals(subtasks.length,taskStats.getNumberOfSubtasks());
    assertEquals(0,taskStats.getNumberOfAcknowledgedSubtasks());
    assertNull(taskStats.getLatestAcknowledgedSubtaskStats());
    assertEquals(-1,taskStats.getLatestAckTimestamp());
    assertArrayEquals(subtasks,taskStats.getSubtaskStats());
    long stateSize=0;
    long alignmentBuffered=0;
    for (int i=0; i < subtasks.length; i++) {
      subtasks[i]=new SubtaskStateStats(i,rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128));
      stateSize+=subtasks[i].getStateSize();
      alignmentBuffered+=subtasks[i].getAlignmentBuffered();
      assertTrue(taskStats.reportSubtaskStats(subtasks[i]));
      assertEquals(i + 1,taskStats.getNumberOfAcknowledgedSubtasks());
      assertEquals(subtasks[i],taskStats.getLatestAcknowledgedSubtaskStats());
      assertEquals(subtasks[i].getAckTimestamp(),taskStats.getLatestAckTimestamp());
      int duration=rand.nextInt(128);
      assertEquals(duration,taskStats.getEndToEndDuration(subtasks[i].getAckTimestamp() - duration));
      assertEquals(stateSize,taskStats.getStateSize());
      assertEquals(alignmentBuffered,taskStats.getAlignmentBuffered());
    }
    assertFalse(taskStats.reportSubtaskStats(new SubtaskStateStats(0,0,0,0,0,0,0)));
    TaskStateStats.TaskStateStatsSummary summary=taskStats.getSummaryStats();
    assertEquals(subtasks.length,summary.getStateSizeStats().getCount());
    assertEquals(subtasks.length,summary.getAckTimestampStats().getCount());
    assertEquals(subtasks.length,summary.getSyncCheckpointDurationStats().getCount());
    assertEquals(subtasks.length,summary.getAsyncCheckpointDurationStats().getCount());
    assertEquals(subtasks.length,summary.getAlignmentBufferedStats().getCount());
    assertEquals(subtasks.length,summary.getAlignmentDurationStats().getCount());
  }
  @Test public void testIsJavaSerializable() throws Exception {
    JobVertexID jobVertexId=new JobVertexID();
    SubtaskStateStats[] subtasks=new SubtaskStateStats[7];
    TaskStateStats taskStats=new TaskStateStats(jobVertexId,subtasks.length);
    long stateSize=0;
    long alignmentBuffered=0;
    for (int i=0; i < subtasks.length; i++) {
      subtasks[i]=new SubtaskStateStats(i,rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128),rand.nextInt(128));
      stateSize+=subtasks[i].getStateSize();
      alignmentBuffered+=subtasks[i].getAlignmentBuffered();
      taskStats.reportSubtaskStats(subtasks[i]);
    }
    TaskStateStats copy=CommonTestUtils.createCopySerializable(taskStats);
    assertEquals(stateSize,copy.getStateSize());
    assertEquals(alignmentBuffered,copy.getAlignmentBuffered());
    TaskStateStats.TaskStateStatsSummary summary=copy.getSummaryStats();
    assertEquals(subtasks.length,summary.getStateSizeStats().getCount());
    assertEquals(subtasks.length,summary.getAckTimestampStats().getCount());
    assertEquals(subtasks.length,summary.getSyncCheckpointDurationStats().getCount());
    assertEquals(subtasks.length,summary.getAsyncCheckpointDurationStats().getCount());
    assertEquals(subtasks.length,summary.getAlignmentBufferedStats().getCount());
    assertEquals(subtasks.length,summary.getAlignmentDurationStats().getCount());
  }
}
