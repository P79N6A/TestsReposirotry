/** 
 * Tests for the  {@link KafkaProducer}.
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(FlinkKafkaProducerBase.class) public class KafkaProducerTest extends TestLogger {
  @Test @SuppressWarnings("unchecked") public void testPropagateExceptions(){
    try {
      KafkaProducer<?,?> kafkaProducerMock=mock(KafkaProducer.class);
      when(kafkaProducerMock.partitionsFor(anyString())).thenReturn(Collections.singletonList(new PartitionInfo("mock_topic",42,null,null,null)));
      when(kafkaProducerMock.send(any(ProducerRecord.class),any(Callback.class))).thenAnswer(new Answer<Future<RecordMetadata>>(){
        @Override public Future<RecordMetadata> answer(        InvocationOnMock invocation) throws Throwable {
          Callback callback=(Callback)invocation.getArguments()[1];
          callback.onCompletion(null,new Exception("Test error"));
          return null;
        }
      }
);
      whenNew(KafkaProducer.class).withAnyArguments().thenReturn(kafkaProducerMock);
      FlinkKafkaProducer09<String> producerPropagating=new FlinkKafkaProducer09<>("mock_topic",new SimpleStringSchema(),FakeStandardProducerConfig.get(),(FlinkKafkaPartitioner<String>)null);
      OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink(producerPropagating));
      testHarness.open();
      try {
        testHarness.processElement(new StreamRecord<>("value"));
        testHarness.processElement(new StreamRecord<>("value"));
        fail("This should fail with an exception");
      }
 catch (      Exception e) {
        assertNotNull(e.getCause());
        assertNotNull(e.getCause().getMessage());
        assertTrue(e.getCause().getMessage().contains("Test error"));
      }
      FlinkKafkaProducer09<String> producerLogging=new FlinkKafkaProducer09<>("mock_topic",new SimpleStringSchema(),FakeStandardProducerConfig.get(),(FlinkKafkaPartitioner<String>)null);
      producerLogging.setLogFailuresOnly(true);
      testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink(producerLogging));
      testHarness.open();
      testHarness.processElement(new StreamRecord<>("value"));
      testHarness.processElement(new StreamRecord<>("value"));
      testHarness.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
