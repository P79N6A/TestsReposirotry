public final class MatchRemovingJoiner implements FlatJoinFunction<Tuple2<Integer,String>,Tuple2<Integer,String>,Tuple2<Integer,String>> {
  private static final long serialVersionUID=1L;
  private final Map<Integer,Collection<Match>> toRemoveFrom;
  public MatchRemovingJoiner(  Map<Integer,Collection<Match>> map){
    this.toRemoveFrom=map;
  }
  @Override public void join(  Tuple2<Integer,String> rec1,  Tuple2<Integer,String> rec2,  Collector<Tuple2<Integer,String>> out) throws Exception {
    final Integer key=rec1 != null ? (Integer)rec1.getField(0) : (Integer)rec2.getField(0);
    final String value1=rec1 != null ? (String)rec1.getField(1) : null;
    final String value2=rec2 != null ? (String)rec2.getField(1) : null;
    Collection<Match> matches=this.toRemoveFrom.get(key);
    if (matches == null) {
      Assert.fail("Match " + key + " - "+ value1+ ":"+ value2+ " is unexpected.");
    }
    boolean contained=matches.remove(new Match(value1,value2));
    if (!contained) {
      Assert.fail("Produced match was not contained: " + key + " - "+ value1+ ":"+ value2);
    }
    if (matches.isEmpty()) {
      this.toRemoveFrom.remove(key);
    }
  }
}
