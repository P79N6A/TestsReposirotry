/** 
 * Tests that the  {@link JobVertex#finalizeOnMaster(ClassLoader)} is called properly andonly when the execution graph reaches the a successful final state.
 */
public class FinalizeOnMasterTest extends TestLogger {
  @Test public void testFinalizeIsCalledUponSuccess() throws Exception {
    final JobID jid=new JobID();
    final JobVertex vertex1=spy(new JobVertex("test vertex 1"));
    vertex1.setInvokableClass(NoOpInvokable.class);
    vertex1.setParallelism(3);
    final JobVertex vertex2=spy(new JobVertex("test vertex 2"));
    vertex2.setInvokableClass(NoOpInvokable.class);
    vertex2.setParallelism(2);
    final ExecutionGraph eg=createSimpleTestGraph(jid,vertex1,vertex2);
    eg.scheduleForExecution();
    assertEquals(JobStatus.RUNNING,eg.getState());
    ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);
    ExecutionGraphTestUtils.finishAllVertices(eg);
    assertEquals(JobStatus.FINISHED,eg.waitUntilTerminal());
    verify(vertex1,times(1)).finalizeOnMaster(any(ClassLoader.class));
    verify(vertex2,times(1)).finalizeOnMaster(any(ClassLoader.class));
    assertEquals(0,eg.getRegisteredExecutions().size());
  }
  @Test public void testFinalizeIsNotCalledUponFailure() throws Exception {
    final JobID jid=new JobID();
    final JobVertex vertex=spy(new JobVertex("test vertex 1"));
    vertex.setInvokableClass(NoOpInvokable.class);
    vertex.setParallelism(1);
    final ExecutionGraph eg=createSimpleTestGraph(jid,vertex);
    eg.scheduleForExecution();
    assertEquals(JobStatus.RUNNING,eg.getState());
    ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);
    final Execution exec=eg.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt();
    exec.fail(new Exception("test"));
    assertEquals(JobStatus.FAILED,eg.waitUntilTerminal());
    verify(vertex,times(0)).finalizeOnMaster(any(ClassLoader.class));
    assertEquals(0,eg.getRegisteredExecutions().size());
  }
}
