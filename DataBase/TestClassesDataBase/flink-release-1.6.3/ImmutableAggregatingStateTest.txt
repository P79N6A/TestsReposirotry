/** 
 * Tests the  {@link ImmutableAggregatingStateTest}.
 */
public class ImmutableAggregatingStateTest {
  private final AggregatingStateDescriptor<Long,String,String> aggrStateDesc=new AggregatingStateDescriptor<>("test",new SumAggr(),String.class);
  private AggregatingState<Long,String> aggrState;
  @Before public void setUp() throws Exception {
    if (!aggrStateDesc.isSerializerInitialized()) {
      aggrStateDesc.initializeSerializerUnlessSet(new ExecutionConfig());
    }
    final String initValue="42";
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    aggrStateDesc.getSerializer().serialize(initValue,new DataOutputViewStreamWrapper(out));
    aggrState=ImmutableAggregatingState.createState(aggrStateDesc,out.toByteArray());
  }
  @Test(expected=UnsupportedOperationException.class) public void testUpdate() throws Exception {
    String value=aggrState.get();
    assertEquals("42",value);
    aggrState.add(54L);
  }
  @Test(expected=UnsupportedOperationException.class) public void testClear() throws Exception {
    String value=aggrState.get();
    assertEquals("42",value);
    aggrState.clear();
  }
  /** 
 * Test  {@link AggregateFunction} concatenating the already stored string with the long passed as argument.
 */
private static class SumAggr implements AggregateFunction<Long,String,String> {
    private static final long serialVersionUID=-6249227626701264599L;
    @Override public String createAccumulator(){
      return "";
    }
    @Override public String add(    Long value,    String accumulator){
      accumulator+=", " + value;
      return accumulator;
    }
    @Override public String getResult(    String accumulator){
      return accumulator;
    }
    @Override public String merge(    String a,    String b){
      return a + ", " + b;
    }
  }
}
