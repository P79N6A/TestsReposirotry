/** 
 * {@link ExternalResource} which provides a {@link SlotPool}.
 */
public class SlotPoolResource extends ExternalResource {
  @Nonnull private final RpcService rpcService;
  @Nonnull private final SchedulingStrategy schedulingStrategy;
  private SlotPool slotPool;
  private SlotPoolGateway slotPoolGateway;
  private TestingResourceManagerGateway testingResourceManagerGateway;
  public SlotPoolResource(  @Nonnull RpcService rpcService,  @Nonnull SchedulingStrategy schedulingStrategy){
    this.rpcService=rpcService;
    this.schedulingStrategy=schedulingStrategy;
    slotPool=null;
    slotPoolGateway=null;
    testingResourceManagerGateway=null;
  }
  public SlotProvider getSlotProvider(){
    checkInitialized();
    return slotPool.getSlotProvider();
  }
  public TestingResourceManagerGateway getTestingResourceManagerGateway(){
    checkInitialized();
    return testingResourceManagerGateway;
  }
  public SlotPoolGateway getSlotPoolGateway(){
    checkInitialized();
    return slotPoolGateway;
  }
  private void checkInitialized(){
    assert (slotPool != null);
  }
  @Override protected void before() throws Throwable {
    if (slotPool != null) {
      terminateSlotPool();
    }
    testingResourceManagerGateway=new TestingResourceManagerGateway();
    slotPool=new SlotPool(rpcService,new JobID(),schedulingStrategy);
    slotPool.start(JobMasterId.generate(),"foobar");
    slotPoolGateway=slotPool.getSelfGateway(SlotPoolGateway.class);
    slotPool.connectToResourceManager(testingResourceManagerGateway);
  }
  @Override protected void after(){
    if (slotPool != null) {
      terminateSlotPool();
      slotPool=null;
    }
  }
  private void terminateSlotPool(){
    slotPool.shutDown();
    CompletableFuture<Void> terminationFuture=slotPool.getTerminationFuture();
    terminationFuture.join();
  }
}
