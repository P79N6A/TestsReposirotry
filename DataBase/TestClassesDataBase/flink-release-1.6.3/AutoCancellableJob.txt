/** 
 * A wrapper of the job graph that makes sure to cancel the job and wait for termination after the execution of every test.
 */
private static class AutoCancellableJob implements AutoCloseable {
  private final ClusterClient<?> clusterClient;
  private final JobGraph jobGraph;
  private final JobID jobId;
  private final Deadline deadline;
  AutoCancellableJob(  Deadline deadline,  final ClusterClient<?> clusterClient,  final StreamExecutionEnvironment env){
    Preconditions.checkNotNull(env);
    this.clusterClient=Preconditions.checkNotNull(clusterClient);
    this.jobGraph=env.getStreamGraph().getJobGraph();
    this.jobId=Preconditions.checkNotNull(jobGraph.getJobID());
    this.deadline=deadline;
  }
  JobGraph getJobGraph(){
    return jobGraph;
  }
  JobID getJobId(){
    return jobId;
  }
  @Override public void close() throws Exception {
    clusterClient.cancel(jobId);
    CompletableFuture<JobStatus> jobStatusFuture=FutureUtils.retrySuccesfulWithDelay(() -> clusterClient.getJobStatus(jobId),Time.milliseconds(50),deadline,(jobStatus) -> jobStatus.equals(JobStatus.CANCELED),TestingUtils.defaultScheduledExecutor());
    assertEquals(JobStatus.CANCELED,jobStatusFuture.get(deadline.timeLeft().toMillis(),TimeUnit.MILLISECONDS));
  }
}
