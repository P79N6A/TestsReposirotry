public class SerializersTest {
public static class Node {
    private Node parent;
  }
public static class FromNested {
    Node recurseMe;
  }
public static class FromGeneric1 {
  }
public static class FromGeneric2 {
  }
public static class Nested1 {
    private FromNested fromNested;
    private Path yodaInterval;
  }
public static class ClassWithNested {
    Nested1 nested;
    int ab;
    ArrayList<FromGeneric1> addGenType;
    FromGeneric2[] genericArrayType;
  }
  @Test public void testTypeRegistration(){
    ExecutionConfig conf=new ExecutionConfig();
    Serializers.recursivelyRegisterType(ClassWithNested.class,conf,new HashSet<Class<?>>());
    KryoSerializer<String> kryo=new KryoSerializer<>(String.class,conf);
    Assert.assertTrue(kryo.getKryo().getRegistration(FromNested.class).getId() > 0);
    Assert.assertTrue(kryo.getKryo().getRegistration(ClassWithNested.class).getId() > 0);
    Assert.assertTrue(kryo.getKryo().getRegistration(Path.class).getId() > 0);
    Assert.assertTrue(kryo.getKryo().getRegistration(FromGeneric1.class).getId() > 0);
    Assert.assertTrue(kryo.getKryo().getRegistration(FromGeneric2.class).getId() > 0);
    Assert.assertTrue(kryo.getKryo().getRegistration(Node.class).getId() > 0);
    ExecutionConfig conf2=new ExecutionConfig();
    Serializers.recursivelyRegisterType(ClassWithNested.class,conf2,new HashSet<Class<?>>());
    KryoSerializer<String> kryo2=new KryoSerializer<>(String.class,conf);
    assertTrue(kryo2.getKryo().getRegistration(FromNested.class).getId() > 0);
  }
  @Test public void testTypeRegistrationFromTypeInfo(){
    ExecutionConfig conf=new ExecutionConfig();
    Serializers.recursivelyRegisterType(new GenericTypeInfo<>(ClassWithNested.class),conf,new HashSet<Class<?>>());
    KryoSerializer<String> kryo=new KryoSerializer<>(String.class,conf);
    assertTrue(kryo.getKryo().getRegistration(FromNested.class).getId() > 0);
    assertTrue(kryo.getKryo().getRegistration(ClassWithNested.class).getId() > 0);
    assertTrue(kryo.getKryo().getRegistration(Path.class).getId() > 0);
    assertTrue(kryo.getKryo().getRegistration(FromGeneric1.class).getId() > 0);
    assertTrue(kryo.getKryo().getRegistration(FromGeneric2.class).getId() > 0);
    assertTrue(kryo.getKryo().getRegistration(Node.class).getId() > 0);
  }
}
