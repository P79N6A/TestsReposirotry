/** 
 * Common tests for the behavior of  {@link FileSystem} methods.
 */
public abstract class FileSystemBehaviorTestSuite {
  private static final Random RND=new Random();
  /** 
 * The cached file system instance. 
 */
  private FileSystem fs;
  /** 
 * The cached base path. 
 */
  private Path basePath;
  /** 
 * Gets an instance of the  {@code FileSystem} to be tested.
 */
  public abstract FileSystem getFileSystem() throws Exception ;
  /** 
 * Gets the base path in the file system under which tests will place their temporary files.
 */
  public abstract Path getBasePath() throws Exception ;
  /** 
 * Gets the kind of the file system (file system, object store, ...).
 */
  public abstract FileSystemKind getFileSystemKind();
  @Before public void prepare() throws Exception {
    fs=getFileSystem();
    basePath=new Path(getBasePath(),randomName());
    fs.mkdirs(basePath);
  }
  @After public void cleanup() throws Exception {
    fs.delete(basePath,true);
  }
  @Test public void testFileSystemKind(){
    assertEquals(getFileSystemKind(),fs.getKind());
  }
  @Test public void testPathAndScheme() throws Exception {
    assertEquals(fs.getUri(),getBasePath().getFileSystem().getUri());
    assertEquals(fs.getUri().getScheme(),getBasePath().toUri().getScheme());
  }
  @Test public void testHomeAndWorkDir(){
    assertEquals(fs.getUri().getScheme(),fs.getWorkingDirectory().toUri().getScheme());
    assertEquals(fs.getUri().getScheme(),fs.getHomeDirectory().toUri().getScheme());
  }
  @Test public void testMkdirsReturnsTrueWhenCreatingDirectory() throws Exception {
    final Path directory=new Path(basePath,randomName());
    assertTrue(fs.mkdirs(directory));
    if (getFileSystemKind() != FileSystemKind.OBJECT_STORE) {
      assertTrue(fs.exists(directory));
    }
  }
  @Test public void testMkdirsCreatesParentDirectories() throws Exception {
    final Path directory=new Path(new Path(new Path(basePath,randomName()),randomName()),randomName());
    assertTrue(fs.mkdirs(directory));
    if (getFileSystemKind() != FileSystemKind.OBJECT_STORE) {
      assertTrue(fs.exists(directory));
    }
  }
  @Test public void testMkdirsReturnsTrueForExistingDirectory() throws Exception {
    final Path directory=new Path(basePath,randomName());
    createRandomFileInDirectory(directory);
    assertTrue(fs.mkdirs(directory));
  }
  @Test public void testMkdirsFailsForExistingFile() throws Exception {
    assumeNotObjectStore();
    final Path file=new Path(getBasePath(),randomName());
    createFile(file);
    try {
      fs.mkdirs(file);
      fail("should fail with an IOException");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testMkdirsFailsWithExistingParentFile() throws Exception {
    assumeNotObjectStore();
    final Path file=new Path(getBasePath(),randomName());
    createFile(file);
    final Path dirUnderFile=new Path(file,randomName());
    try {
      fs.mkdirs(dirUnderFile);
      fail("should fail with an IOException");
    }
 catch (    IOException e) {
    }
  }
  private static String randomName(){
    return StringUtils.getRandomString(RND,16,16,'a','z');
  }
  private void createFile(  Path file) throws IOException {
    try (FSDataOutputStream out=fs.create(file,WriteMode.NO_OVERWRITE)){
      out.write(new byte[]{1,2,3,4,5,6,7,8});
    }
   }
  private void createRandomFileInDirectory(  Path directory) throws IOException {
    fs.mkdirs(directory);
    createFile(new Path(directory,randomName()));
  }
  private void assumeNotObjectStore(){
    Assume.assumeTrue("Test does not apply to object stores",getFileSystemKind() != FileSystemKind.OBJECT_STORE);
  }
}
