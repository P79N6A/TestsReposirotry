/** 
 * Integration tests for  {@link OperatorStateBackend}.
 */
public class StateBackendITCase extends AbstractTestBase {
  /** 
 * Verify that the user-specified state backend is used even if checkpointing is disabled.
 */
  @Test public void testStateBackendWithoutCheckpointing() throws Exception {
    StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
    see.setParallelism(1);
    see.getConfig().setRestartStrategy(RestartStrategies.noRestart());
    see.setStateBackend(new FailingStateBackend());
    see.fromElements(new Tuple2<>("Hello",1)).keyBy(0).map(new RichMapFunction<Tuple2<String,Integer>,String>(){
      private static final long serialVersionUID=1L;
      @Override public void open(      Configuration parameters) throws Exception {
        super.open(parameters);
        getRuntimeContext().getState(new ValueStateDescriptor<>("Test",Integer.class));
      }
      @Override public String map(      Tuple2<String,Integer> value) throws Exception {
        return value.f0;
      }
    }
).print();
    try {
      see.execute();
      fail();
    }
 catch (    JobExecutionException e) {
      assertTrue(ExceptionUtils.findThrowable(e,SuccessException.class).isPresent());
    }
  }
private static class FailingStateBackend implements StateBackend {
    private static final long serialVersionUID=1L;
    @Override public CompletedCheckpointStorageLocation resolveCheckpoint(    String pointer) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public CheckpointStorage createCheckpointStorage(    JobID jobId) throws IOException {
      return new MemoryBackendCheckpointStorage(jobId,null,null,1_000_000);
    }
    @Override public <K>AbstractKeyedStateBackend<K> createKeyedStateBackend(    Environment env,    JobID jobID,    String operatorIdentifier,    TypeSerializer<K> keySerializer,    int numberOfKeyGroups,    KeyGroupRange keyGroupRange,    TaskKvStateRegistry kvStateRegistry,    TtlTimeProvider ttlTimeProvider) throws IOException {
      throw new SuccessException();
    }
    @Override public OperatorStateBackend createOperatorStateBackend(    Environment env,    String operatorIdentifier) throws Exception {
      throw new SuccessException();
    }
  }
static final class SuccessException extends IOException {
    private static final long serialVersionUID=-9218191172606739598L;
  }
}
