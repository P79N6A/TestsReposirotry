/** 
 * Tests for  {@link CurrentJobIdsHandler}.
 */
public class CurrentJobIdsHandlerTest extends TestLogger {
  private CurrentJobIdsHandler currentJobIdsHandler;
  @Mock private JobManagerGateway mockJobManagerGateway;
  @Before public void setUp(){
    MockitoAnnotations.initMocks(this);
    currentJobIdsHandler=new CurrentJobIdsHandler(Executors.directExecutor(),Time.seconds(0L));
  }
  @Test public void testGetPaths(){
    final String[] paths=currentJobIdsHandler.getPaths();
    assertEquals(1,paths.length);
    assertEquals("/jobs",paths[0]);
  }
  @Test public void testHandleJsonRequest() throws Exception {
    final JobID jobId=new JobID();
    final JobStatus jobStatus=JobStatus.RUNNING;
    when(mockJobManagerGateway.requestJobsOverview(any(Time.class))).thenReturn(CompletableFuture.completedFuture(new JobIdsWithStatusOverview(Collections.singleton(new JobIdsWithStatusOverview.JobIdWithStatus(jobId,jobStatus)))));
    final CompletableFuture<String> jsonFuture=currentJobIdsHandler.handleJsonRequest(Collections.emptyMap(),Collections.emptyMap(),mockJobManagerGateway);
    final String json=jsonFuture.get();
    assertThat(json,containsString(jobId.toString()));
    assertThat(json,containsString(jobStatus.name()));
  }
}
