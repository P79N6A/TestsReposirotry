/** 
 * Tests using both  {@link JDBCInputFormat} and {@link JDBCOutputFormat}.
 */
public class JDBCFullTest extends JDBCTestBase {
  @Test public void testWithoutParallelism() throws Exception {
    runTest(false);
  }
  @Test public void testWithParallelism() throws Exception {
    runTest(true);
  }
  private void runTest(  boolean exploitParallelism) throws Exception {
    ExecutionEnvironment environment=ExecutionEnvironment.getExecutionEnvironment();
    JDBCInputFormatBuilder inputBuilder=JDBCInputFormat.buildJDBCInputFormat().setDrivername(JDBCTestBase.DRIVER_CLASS).setDBUrl(JDBCTestBase.DB_URL).setQuery(JDBCTestBase.SELECT_ALL_BOOKS).setRowTypeInfo(ROW_TYPE_INFO);
    if (exploitParallelism) {
      final int fetchSize=1;
      final long min=JDBCTestBase.TEST_DATA[0].id;
      final long max=JDBCTestBase.TEST_DATA[JDBCTestBase.TEST_DATA.length - fetchSize].id;
      inputBuilder=inputBuilder.setQuery(JDBCTestBase.SELECT_ALL_BOOKS_SPLIT_BY_ID).setParametersProvider(new NumericBetweenParametersProvider(fetchSize,min,max));
    }
    DataSet<Row> source=environment.createInput(inputBuilder.finish());
    source.output(JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(JDBCTestBase.DRIVER_CLASS).setDBUrl(JDBCTestBase.DB_URL).setQuery("insert into newbooks (id, title, author, price, qty) values (?,?,?,?,?)").setSqlTypes(new int[]{Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.DOUBLE,Types.INTEGER}).finish());
    environment.execute();
    try (Connection dbConn=DriverManager.getConnection(JDBCTestBase.DB_URL);PreparedStatement statement=dbConn.prepareStatement(JDBCTestBase.SELECT_ALL_NEWBOOKS);ResultSet resultSet=statement.executeQuery()){
      int count=0;
      while (resultSet.next()) {
        count++;
      }
      Assert.assertEquals(JDBCTestBase.TEST_DATA.length,count);
    }
   }
  @After public void clearOutputTable() throws Exception {
    Class.forName(DRIVER_CLASS);
    try (Connection conn=DriverManager.getConnection(DB_URL);Statement stat=conn.createStatement()){
      stat.execute("DELETE FROM " + OUTPUT_TABLE);
      stat.close();
      conn.close();
    }
   }
}
