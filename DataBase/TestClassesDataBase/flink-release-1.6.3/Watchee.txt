static class Watchee extends UntypedActor {
  private final FiniteDuration timeout;
  private final FiniteDuration interval;
  private final ErrorHandler errorHandler;
  Watchee(  FiniteDuration timeout,  FiniteDuration interval,  ErrorHandler errorHandler){
    this.timeout=Preconditions.checkNotNull(timeout);
    this.interval=Preconditions.checkNotNull(interval);
    this.errorHandler=Preconditions.checkNotNull(errorHandler);
  }
  @Override public void onReceive(  Object message) throws Exception {
    if (message instanceof Ping) {
      final Ping ping=(Ping)message;
      getContext().actorSelection(ping.getTarget()).resolveOne(timeout).onComplete(new OnComplete<ActorRef>(){
        @Override public void onComplete(        Throwable failure,        ActorRef success) throws Throwable {
          if (success != null) {
            getContext().system().scheduler().schedule(zeroDelay,interval,success,"Watchee message",getContext().dispatcher(),getSelf());
          }
 else {
            errorHandler.handleError(failure);
          }
        }
      }
,getContext().dispatcher());
    }
  }
}
