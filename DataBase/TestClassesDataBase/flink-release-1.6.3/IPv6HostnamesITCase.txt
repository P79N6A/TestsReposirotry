/** 
 * Test proper handling of IPv6 address literals in URLs.
 */
@SuppressWarnings("serial") public class IPv6HostnamesITCase extends TestLogger {
  @Rule public final MiniClusterResource miniClusterResource=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(getConfiguration()).setNumberTaskManagers(2).setNumberSlotsPerTaskManager(2).build());
  private Configuration getConfiguration(){
    final Inet6Address ipv6address=getLocalIPv6Address();
    if (ipv6address == null) {
      throw new AssumptionViolatedException("--- Cannot find a non-loopback local IPv6 address that Akka/Netty can bind to; skipping IPv6HostnamesITCase");
    }
    final String addressString=ipv6address.getHostAddress();
    log.info("Test will use IPv6 address " + addressString + " for connection tests");
    Configuration config=new Configuration();
    config.setString(JobManagerOptions.ADDRESS,addressString);
    config.setString(TaskManagerOptions.HOST,addressString);
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"16m");
    return config;
  }
  @Test public void testClusterWithIPv6host(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(4);
      env.getConfig().disableSysoutLogging();
      DataSet<String> text=env.fromElements(WordCountData.TEXT.split("\n"));
      DataSet<Tuple2<String,Integer>> counts=text.flatMap(new FlatMapFunction<String,Tuple2<String,Integer>>(){
        @Override public void flatMap(        String value,        Collector<Tuple2<String,Integer>> out) throws Exception {
          for (          String token : value.toLowerCase().split("\\W+")) {
            if (token.length() > 0) {
              out.collect(new Tuple2<String,Integer>(token,1));
            }
          }
        }
      }
).groupBy(0).sum(1);
      List<Tuple2<String,Integer>> result=counts.collect();
      TestBaseUtils.compareResultAsText(result,WordCountData.COUNTS_AS_TUPLES);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  private Inet6Address getLocalIPv6Address(){
    try {
      Enumeration<NetworkInterface> e=NetworkInterface.getNetworkInterfaces();
      while (e.hasMoreElements()) {
        NetworkInterface netInterface=e.nextElement();
        Enumeration<InetAddress> ee=netInterface.getInetAddresses();
        while (ee.hasMoreElements()) {
          InetAddress addr=ee.nextElement();
          if (addr instanceof Inet6Address && (!addr.isLoopbackAddress()) && (!addr.isAnyLocalAddress())) {
            InetSocketAddress socketAddress=new InetSocketAddress(addr,0);
            try {
              log.info("Considering address " + addr);
              log.info("Testing whether sockets can bind to " + addr);
              ServerSocket sock=new ServerSocket();
              sock.bind(socketAddress);
              sock.close();
              log.info("Testing whether Akka can use " + addr);
              int port=NetUtils.getAvailablePort();
              ActorSystem as=AkkaUtils.createActorSystem(new Configuration(),new Some<scala.Tuple2<String,Object>>(new scala.Tuple2<String,Object>(addr.getHostAddress(),port)));
              as.shutdown();
              log.info("Using address " + addr);
              return (Inet6Address)addr;
            }
 catch (            IOException ignored) {
            }
          }
        }
      }
      return null;
    }
 catch (    Exception e) {
      return null;
    }
  }
}
