/** 
 * Tests for  {@link UnionInputGate}.
 */
public class UnionInputGateTest {
  /** 
 * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.
 */
  @Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {
    final String testTaskName="Test Task";
    final SingleInputGate ig1=new SingleInputGate(testTaskName,new JobID(),new IntermediateDataSetID(),ResultPartitionType.PIPELINED,0,3,mock(TaskActions.class),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),true);
    final SingleInputGate ig2=new SingleInputGate(testTaskName,new JobID(),new IntermediateDataSetID(),ResultPartitionType.PIPELINED,0,5,mock(TaskActions.class),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),true);
    final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});
    assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());
    final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};
    inputChannels[0][0].readBuffer();
    inputChannels[0][0].readEndOfPartitionEvent();
    inputChannels[1][2].readBuffer();
    inputChannels[1][2].readEndOfPartitionEvent();
    inputChannels[1][0].readBuffer();
    inputChannels[1][1].readBuffer();
    inputChannels[0][1].readBuffer();
    inputChannels[1][3].readBuffer();
    inputChannels[0][1].readEndOfPartitionEvent();
    inputChannels[1][3].readEndOfPartitionEvent();
    inputChannels[0][2].readBuffer();
    inputChannels[0][2].readEndOfPartitionEvent();
    inputChannels[1][4].readBuffer();
    inputChannels[1][4].readEndOfPartitionEvent();
    inputChannels[1][1].readEndOfPartitionEvent();
    inputChannels[1][0].readEndOfPartitionEvent();
    ig1.notifyChannelNonEmpty(inputChannels[0][0]);
    ig1.notifyChannelNonEmpty(inputChannels[0][1]);
    ig1.notifyChannelNonEmpty(inputChannels[0][2]);
    ig2.notifyChannelNonEmpty(inputChannels[1][0]);
    ig2.notifyChannelNonEmpty(inputChannels[1][1]);
    ig2.notifyChannelNonEmpty(inputChannels[1][2]);
    ig2.notifyChannelNonEmpty(inputChannels[1][3]);
    ig2.notifyChannelNonEmpty(inputChannels[1][4]);
    verifyBufferOrEvent(union,true,0,true);
    verifyBufferOrEvent(union,true,3,true);
    verifyBufferOrEvent(union,true,1,true);
    verifyBufferOrEvent(union,true,4,true);
    verifyBufferOrEvent(union,true,2,true);
    verifyBufferOrEvent(union,true,5,true);
    verifyBufferOrEvent(union,false,0,true);
    verifyBufferOrEvent(union,true,6,true);
    verifyBufferOrEvent(union,false,1,true);
    verifyBufferOrEvent(union,true,7,true);
    verifyBufferOrEvent(union,false,2,true);
    verifyBufferOrEvent(union,false,3,true);
    verifyBufferOrEvent(union,false,4,true);
    verifyBufferOrEvent(union,false,5,true);
    verifyBufferOrEvent(union,false,6,true);
    verifyBufferOrEvent(union,false,7,false);
    assertTrue(union.isFinished());
    assertFalse(union.getNextBufferOrEvent().isPresent());
  }
}
