/** 
 * Tests for adding and removing  {@link Graph} vertices and edges.
 */
@RunWith(Parameterized.class) public class GraphMutationsITCase extends MultipleProgramsTestBase {
  public GraphMutationsITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testAddVertex() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.addVertex(new Vertex<>(6L,6L));
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n"+ "6,6\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddVertices() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> vertices=new ArrayList<>();
    vertices.add(new Vertex<>(5L,0L));
    vertices.add(new Vertex<>(6L,6L));
    vertices.add(new Vertex<>(7L,7L));
    graph=graph.addVertices(vertices);
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n"+ "6,6\n"+ "7,7\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddVertexExisting() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.addVertex(new Vertex<>(1L,1L));
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddVerticesBothExisting() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> vertices=new ArrayList<>();
    vertices.add(new Vertex<>(1L,1L));
    vertices.add(new Vertex<>(3L,3L));
    graph=graph.addVertices(vertices);
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddVerticesOneExisting() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> vertices=new ArrayList<>();
    vertices.add(new Vertex<>(1L,1L));
    vertices.add(new Vertex<>(6L,6L));
    graph=graph.addVertices(vertices);
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n"+ "6,6\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveVertex() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.removeVertex(new Vertex<>(5L,5L));
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveVertices() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> verticesToBeRemoved=new ArrayList<>();
    verticesToBeRemoved.add(new Vertex<>(1L,1L));
    verticesToBeRemoved.add(new Vertex<>(2L,2L));
    graph=graph.removeVertices(verticesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="3,4,34\n" + "3,5,35\n" + "4,5,45\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveInvalidVertex() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.removeVertex(new Vertex<>(6L,6L));
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveOneValidOneInvalidVertex() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> verticesToBeRemoved=new ArrayList<>();
    verticesToBeRemoved.add(new Vertex<>(1L,1L));
    verticesToBeRemoved.add(new Vertex<>(7L,7L));
    graph=graph.removeVertices(verticesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="2,3,23\n" + "3,4,34\n" + "3,5,35\n"+ "4,5,45\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveBothInvalidVertices() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> verticesToBeRemoved=new ArrayList<>();
    verticesToBeRemoved.add(new Vertex<>(6L,6L));
    verticesToBeRemoved.add(new Vertex<>(7L,7L));
    graph=graph.removeVertices(verticesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveBothInvalidVerticesVertexResult() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Vertex<Long,Long>> verticesToBeRemoved=new ArrayList<>();
    verticesToBeRemoved.add(new Vertex<>(6L,6L));
    verticesToBeRemoved.add(new Vertex<>(7L,7L));
    graph=graph.removeVertices(verticesToBeRemoved);
    DataSet<Vertex<Long,Long>> data=graph.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.addEdge(new Vertex<>(6L,6L),new Vertex<>(1L,1L),61L);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n"+ "6,1,61\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddEdges() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Edge<Long,Long>> edgesToBeAdded=new ArrayList<>();
    edgesToBeAdded.add(new Edge<>(2L,4L,24L));
    edgesToBeAdded.add(new Edge<>(4L,1L,41L));
    graph=graph.addEdges(edgesToBeAdded);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "2,4,24\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,1,41\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddEdgesInvalidVertices() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Edge<Long,Long>> edgesToBeAdded=new ArrayList<>();
    edgesToBeAdded.add(new Edge<>(6L,1L,61L));
    edgesToBeAdded.add(new Edge<>(7L,1L,71L));
    graph=graph.addEdges(edgesToBeAdded);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testAddExistingEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.addEdge(new Vertex<>(1L,1L),new Vertex<>(2L,2L),12L);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,2,12\n" + "1,3,13\n"+ "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.addEdge(new Vertex<>(1L,1L),new Vertex<>(2L,2L),12L);
    graph=graph.removeEdge(new Edge<>(5L,1L,51L));
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,2,12\n" + "1,3,13\n"+ "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveEdges() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Edge<Long,Long>> edgesToBeRemoved=new ArrayList<>();
    edgesToBeRemoved.add(new Edge<>(5L,1L,51L));
    edgesToBeRemoved.add(new Edge<>(2L,3L,23L));
    graph=graph.addEdge(new Vertex<>(1L,1L),new Vertex<>(2L,2L),12L);
    graph=graph.removeEdges(edgesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,2,12\n" + "1,3,13\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveSameEdgeTwice() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Edge<Long,Long>> edgesToBeRemoved=new ArrayList<>();
    edgesToBeRemoved.add(new Edge<>(5L,1L,51L));
    edgesToBeRemoved.add(new Edge<>(5L,1L,51L));
    graph=graph.removeEdges(edgesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveInvalidEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph=graph.removeEdge(new Edge<>(6L,1L,61L));
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testRemoveOneValidOneInvalidEdge() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Edge<Long,Long>> edgesToBeRemoved=new ArrayList<>();
    edgesToBeRemoved.add(new Edge<>(1L,1L,51L));
    edgesToBeRemoved.add(new Edge<>(6L,1L,61L));
    graph=graph.removeEdges(edgesToBeRemoved);
    DataSet<Edge<Long,Long>> data=graph.getEdges();
    List<Edge<Long,Long>> result=data.collect();
    expectedResult="1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    compareResultAsTuples(result,expectedResult);
  }
}
