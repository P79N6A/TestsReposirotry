/** 
 * Tests for  {@link CommunityDetection}.
 */
@RunWith(Parameterized.class) public class CommunityDetectionITCase extends MultipleProgramsTestBase {
  public CommunityDetectionITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expected;
  @Test public void testSingleIteration() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Double> inputGraph=Graph.fromDataSet(CommunityDetectionData.getSimpleEdgeDataSet(env),new InitLabels(),env);
    List<Vertex<Long,Long>> result=inputGraph.run(new CommunityDetection<>(1,CommunityDetectionData.DELTA)).getVertices().collect();
    expected=CommunityDetectionData.COMMUNITIES_SINGLE_ITERATION;
    compareResultAsTuples(result,expected);
  }
  @Test public void testTieBreaker() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Double> inputGraph=Graph.fromDataSet(CommunityDetectionData.getTieEdgeDataSet(env),new InitLabels(),env);
    List<Vertex<Long,Long>> result=inputGraph.run(new CommunityDetection<>(1,CommunityDetectionData.DELTA)).getVertices().collect();
    expected=CommunityDetectionData.COMMUNITIES_WITH_TIE;
    compareResultAsTuples(result,expected);
  }
@SuppressWarnings("serial") private static final class InitLabels implements MapFunction<Long,Long> {
    public Long map(    Long id){
      return id;
    }
  }
}
