/** 
 * A server that receives a  {@link TestMessage test message} and returns another testmessage containing the same string as the request with the name of the server prepended.
 */
private static class TestServer extends AbstractServerBase<TestMessage,TestMessage> implements AutoCloseable {
  private final KvStateRequestStats requestStats;
  TestServer(  String name,  KvStateRequestStats stats,  Iterator<Integer> bindPort) throws UnknownHostException {
    super(name,InetAddress.getLocalHost(),bindPort,1,1);
    this.requestStats=stats;
  }
  @Override public AbstractServerHandler<TestMessage,TestMessage> initializeHandler(){
    return new AbstractServerHandler<TestMessage,TestMessage>(this,new MessageSerializer<>(new TestMessage.TestMessageDeserializer(),new TestMessage.TestMessageDeserializer()),requestStats){
      @Override public CompletableFuture<TestMessage> handleRequest(      long requestId,      TestMessage request){
        TestMessage response=new TestMessage(getServerName() + '-' + request.getMessage());
        return CompletableFuture.completedFuture(response);
      }
      @Override public CompletableFuture<Void> shutdown(){
        return CompletableFuture.completedFuture(null);
      }
    }
;
  }
  @Override public void close() throws Exception {
    shutdownServer().get();
    if (requestStats instanceof AtomicKvStateRequestStats) {
      AtomicKvStateRequestStats stats=(AtomicKvStateRequestStats)requestStats;
      Assert.assertEquals(0L,stats.getNumConnections());
    }
    Assert.assertTrue(getQueryExecutor().isTerminated());
    Assert.assertTrue(isEventGroupShutdown());
  }
}
