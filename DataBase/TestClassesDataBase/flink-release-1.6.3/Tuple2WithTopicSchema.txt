private static class Tuple2WithTopicSchema implements KeyedDeserializationSchema<Tuple3<Integer,Integer,String>>, KeyedSerializationSchema<Tuple3<Integer,Integer,String>> {
  private final TypeSerializer<Tuple2<Integer,Integer>> ts;
  public Tuple2WithTopicSchema(  ExecutionConfig ec){
    ts=TypeInformation.of(new TypeHint<Tuple2<Integer,Integer>>(){
    }
).createSerializer(ec);
  }
  @Override public Tuple3<Integer,Integer,String> deserialize(  byte[] messageKey,  byte[] message,  String topic,  int partition,  long offset) throws IOException {
    DataInputView in=new DataInputViewStreamWrapper(new ByteArrayInputStream(message));
    Tuple2<Integer,Integer> t2=ts.deserialize(in);
    return new Tuple3<>(t2.f0,t2.f1,topic);
  }
  @Override public boolean isEndOfStream(  Tuple3<Integer,Integer,String> nextElement){
    return false;
  }
  @Override public TypeInformation<Tuple3<Integer,Integer,String>> getProducedType(){
    return TypeInformation.of(new TypeHint<Tuple3<Integer,Integer,String>>(){
    }
);
  }
  @Override public byte[] serializeKey(  Tuple3<Integer,Integer,String> element){
    return null;
  }
  @Override public byte[] serializeValue(  Tuple3<Integer,Integer,String> element){
    ByteArrayOutputStream by=new ByteArrayOutputStream();
    DataOutputView out=new DataOutputViewStreamWrapper(by);
    try {
      ts.serialize(new Tuple2<>(element.f0,element.f1),out);
    }
 catch (    IOException e) {
      throw new RuntimeException("Error",e);
    }
    return by.toByteArray();
  }
  @Override public String getTargetTopic(  Tuple3<Integer,Integer,String> element){
    return element.f2;
  }
}
