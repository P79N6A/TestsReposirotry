public static abstract class AbstractIntSerializer extends TypeSerializer<Integer> {
  public static final long serialVersionUID=1;
  @Override public Integer createInstance(){
    return IntSerializer.INSTANCE.createInstance();
  }
  @Override public boolean isImmutableType(){
    return IntSerializer.INSTANCE.isImmutableType();
  }
  @Override public Integer copy(  Integer from){
    return IntSerializer.INSTANCE.copy(from);
  }
  @Override public Integer copy(  Integer from,  Integer reuse){
    return IntSerializer.INSTANCE.copy(from,reuse);
  }
  @Override public void copy(  DataInputView source,  DataOutputView target) throws IOException {
    IntSerializer.INSTANCE.copy(source,target);
  }
  @Override public Integer deserialize(  DataInputView source) throws IOException {
    return IntSerializer.INSTANCE.deserialize(source);
  }
  @Override public Integer deserialize(  Integer reuse,  DataInputView source) throws IOException {
    return IntSerializer.INSTANCE.deserialize(reuse,source);
  }
  @Override public void serialize(  Integer record,  DataOutputView target) throws IOException {
    IntSerializer.INSTANCE.serialize(record,target);
  }
  @Override public TypeSerializer<Integer> duplicate(){
    return IntSerializer.INSTANCE.duplicate();
  }
  @Override public TypeSerializerConfigSnapshot snapshotConfiguration(){
    return IntSerializer.INSTANCE.snapshotConfiguration();
  }
  @Override public CompatibilityResult<Integer> ensureCompatibility(  TypeSerializerConfigSnapshot configSnapshot){
    return IntSerializer.INSTANCE.ensureCompatibility(configSnapshot);
  }
  @Override public int getLength(){
    return IntSerializer.INSTANCE.getLength();
  }
  @Override public boolean canEqual(  Object obj){
    return IntSerializer.INSTANCE.canEqual(obj);
  }
  @Override public boolean equals(  Object obj){
    return IntSerializer.INSTANCE.equals(obj);
  }
  @Override public int hashCode(){
    return IntSerializer.INSTANCE.hashCode();
  }
}
