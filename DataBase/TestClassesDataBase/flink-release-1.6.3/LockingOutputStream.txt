private static final class LockingOutputStream extends CheckpointStateOutputStream {
  private final Object lock=new Object();
  private volatile boolean closed;
  @Nullable @Override public StreamStateHandle closeAndGetHandle() throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public void write(  int b) throws IOException {
synchronized (lock) {
      while (!closed) {
        try {
          lock.wait();
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
  @Override public void close() throws IOException {
synchronized (lock) {
      closed=true;
      lock.notifyAll();
    }
  }
  @Override public long getPos(){
    return 0;
  }
  @Override public void flush(){
  }
  @Override public void sync(){
  }
}
