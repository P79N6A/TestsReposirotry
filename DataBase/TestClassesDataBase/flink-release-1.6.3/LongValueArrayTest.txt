/** 
 * Tests for  {@link LongValueArray}.
 */
public class LongValueArrayTest {
  @Test public void testBoundedArray(){
    int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;
    ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);
    for (int i=0; i < count; i++) {
      assertFalse(lva.isFull());
      assertEquals(i,lva.size());
      assertTrue(lva.add(new LongValue(i)));
      assertEquals(i + 1,lva.size());
    }
    assertTrue(lva.isFull());
    assertEquals(count,lva.size());
    int idx=0;
    for (    LongValue lv : lva) {
      assertEquals(idx++,lv.getValue());
    }
    assertFalse(lva.add(new LongValue(count)));
    assertFalse(lva.addAll(lva));
    assertEquals(lva,lva.copy());
    LongValueArray lvaTo=new LongValueArray();
    lva.copyTo(lvaTo);
    assertEquals(lva,lvaTo);
    lva.clear();
    assertEquals(0,lva.size());
  }
  @Test public void testUnboundedArray(){
    int count=4096;
    ValueArray<LongValue> lva=new LongValueArray();
    for (int i=0; i < count; i++) {
      assertFalse(lva.isFull());
      assertEquals(i,lva.size());
      assertTrue(lva.add(new LongValue(i)));
      assertEquals(i + 1,lva.size());
    }
    assertFalse(lva.isFull());
    assertEquals(count,lva.size());
    int idx=0;
    for (    LongValue lv : lva) {
      assertEquals(idx++,lv.getValue());
    }
    assertTrue(lva.add(new LongValue(count)));
    assertTrue(lva.addAll(lva));
    assertEquals(lva,lva.copy());
    LongValueArray lvaTo=new LongValueArray();
    lva.copyTo(lvaTo);
    assertEquals(lva,lvaTo);
    int size=lva.size();
    lva.mark();
    assertTrue(lva.add(new LongValue()));
    assertEquals(size + 1,lva.size());
    lva.reset();
    assertEquals(size,lva.size());
    lva.clear();
    assertEquals(0,lva.size());
  }
}
