/** 
 * A  {@link KeyedBroadcastProcessFunction} which on the broadcast side puts elements in the broadcast statewhile on the non-broadcast side, it sets a timer to fire at some point in the future. Finally, when the onTimer method is called (i.e. when the timer fires), we verify that the result is the expected one.
 */
private static class TestKeyedBroadcastProcessFunction extends KeyedBroadcastProcessFunction<Long,Long,String,String> {
  private static final long serialVersionUID=7616910653561100842L;
  private final Map<Long,String> expectedState;
  private final Map<Long,Long> timerToExpectedKey=new HashMap<>();
  private long nextTimerTimestamp;
  private transient MapStateDescriptor<Long,String> descriptor;
  TestKeyedBroadcastProcessFunction(  final long initialTimerTimestamp,  final Map<Long,String> expectedBroadcastState){
    expectedState=expectedBroadcastState;
    nextTimerTimestamp=initialTimerTimestamp;
  }
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    descriptor=new MapStateDescriptor<>("broadcast-state",BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  }
  @Override public void processElement(  Long value,  ReadOnlyContext ctx,  Collector<String> out) throws Exception {
    long currentTime=nextTimerTimestamp;
    nextTimerTimestamp++;
    ctx.timerService().registerEventTimeTimer(currentTime);
    timerToExpectedKey.put(currentTime,value);
  }
  @Override public void processBroadcastElement(  String value,  Context ctx,  Collector<String> out) throws Exception {
    long key=Long.parseLong(value.split(":")[1]);
    ctx.getBroadcastState(descriptor).put(key,value);
  }
  @Override public void onTimer(  long timestamp,  OnTimerContext ctx,  Collector<String> out) throws Exception {
    assertEquals(timerToExpectedKey.get(timestamp),ctx.getCurrentKey());
    Map<Long,String> map=new HashMap<>();
    for (    Map.Entry<Long,String> entry : ctx.getBroadcastState(descriptor).immutableEntries()) {
      map.put(entry.getKey(),entry.getValue());
    }
    assertEquals(expectedState,map);
    out.collect(Long.toString(timestamp));
  }
}
