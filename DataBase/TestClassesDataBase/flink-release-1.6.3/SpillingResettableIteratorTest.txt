public class SpillingResettableIteratorTest {
  private static final int NUM_TESTRECORDS=50000;
  private static final int MEMORY_CAPACITY=10 * 1024 * 1024;
  private final AbstractInvokable memOwner=new DummyInvokable();
  private IOManager ioman;
  private MemoryManager memman;
  private Iterator<IntValue> reader;
  private final TypeSerializer<IntValue> serializer=new IntValueSerializer();
  @Before public void startup(){
    this.memman=new MemoryManager(MEMORY_CAPACITY,1,32 * 1024,MemoryType.HEAP,true);
    this.ioman=new IOManagerAsync();
    ArrayList<IntValue> objects=new ArrayList<IntValue>(NUM_TESTRECORDS);
    for (int i=0; i < NUM_TESTRECORDS; ++i) {
      IntValue tmp=new IntValue(i);
      objects.add(tmp);
    }
    this.reader=objects.iterator();
  }
  @After public void shutdown(){
    this.ioman.shutdown();
    if (!this.ioman.isProperlyShutDown()) {
      Assert.fail("I/O Manager Shutdown was not completed properly.");
    }
    this.ioman=null;
    if (!this.memman.verifyEmpty()) {
      Assert.fail("A memory leak has occurred: Not all memory was properly returned to the memory manager.");
    }
    this.memman.shutdown();
    this.memman=null;
  }
  /** 
 * Tests the resettable iterator with too few memory, so that the data has to be written to disk.
 */
  @Test public void testResettableIterator(){
    try {
      SpillingResettableIterator<IntValue> iterator=new SpillingResettableIterator<IntValue>(this.reader,this.serializer,this.memman,this.ioman,2,this.memOwner);
      iterator.open();
      int count=0;
      while (iterator.hasNext()) {
        Assert.assertEquals("In initial run, element " + count + " does not match expected value!",count++,iterator.next().getValue());
      }
      Assert.assertEquals("Too few elements were deserialzied in initial run!",NUM_TESTRECORDS,count);
      for (int j=0; j < 10; ++j) {
        count=0;
        iterator.reset();
        while (iterator.hasNext()) {
          Assert.assertEquals("After reset nr. " + j + 1+ " element "+ count+ " does not match expected value!",count++,iterator.next().getValue());
        }
        Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1+ "!",NUM_TESTRECORDS,count);
      }
      iterator.close();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Assert.fail("Test encountered an exception.");
    }
  }
  /** 
 * Tests the resettable iterator with enough memory so that all data is kept locally in a membuffer.
 */
  @Test public void testResettableIteratorInMemory(){
    try {
      SpillingResettableIterator<IntValue> iterator=new SpillingResettableIterator<IntValue>(this.reader,this.serializer,this.memman,this.ioman,20,this.memOwner);
      iterator.open();
      int count=0;
      while (iterator.hasNext()) {
        Assert.assertEquals("In initial run, element " + count + " does not match expected value!",count++,iterator.next().getValue());
      }
      Assert.assertEquals("Too few elements were deserialzied in initial run!",NUM_TESTRECORDS,count);
      for (int j=0; j < 10; ++j) {
        count=0;
        iterator.reset();
        while (iterator.hasNext()) {
          Assert.assertEquals("After reset nr. " + j + 1+ " element "+ count+ " does not match expected value!",count++,iterator.next().getValue());
        }
        Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1+ "!",NUM_TESTRECORDS,count);
      }
      iterator.close();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Assert.fail("Test encountered an exception.");
    }
  }
  /** 
 * Tests whether multiple call of hasNext() changes the state of the iterator
 */
  @Test public void testHasNext(){
    try {
      SpillingResettableIterator<IntValue> iterator=new SpillingResettableIterator<IntValue>(this.reader,this.serializer,this.memman,this.ioman,2,this.memOwner);
      iterator.open();
      int cnt=0;
      while (iterator.hasNext()) {
        iterator.hasNext();
        iterator.next();
        cnt++;
      }
      Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS+ " expected",cnt == NUM_TESTRECORDS);
      iterator.close();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Assert.fail("Test encountered an exception.");
    }
  }
  /** 
 * Test whether next() depends on previous call of hasNext()
 */
  @Test public void testNext(){
    try {
      SpillingResettableIterator<IntValue> iterator=new SpillingResettableIterator<IntValue>(this.reader,this.serializer,this.memman,this.ioman,2,this.memOwner);
      iterator.open();
      IntValue record;
      int cnt=0;
      while (cnt < NUM_TESTRECORDS) {
        record=iterator.next();
        Assert.assertTrue("Record was not read from iterator",record != null);
        cnt++;
      }
      try {
        record=iterator.next();
        Assert.fail("Too many records were read from iterator.");
      }
 catch (      NoSuchElementException nseex) {
      }
      iterator.close();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Assert.fail("Test encountered an exception.");
    }
  }
}
