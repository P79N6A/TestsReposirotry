/** 
 * Message with a string as payload.
 */
private static class TestMessage extends MessageBody {
  private final String message;
  TestMessage(  String message){
    this.message=Preconditions.checkNotNull(message);
  }
  public String getMessage(){
    return message;
  }
  @Override public byte[] serialize(){
    byte[] content=message.getBytes(ConfigConstants.DEFAULT_CHARSET);
    return ByteBuffer.allocate(content.length + Integer.BYTES).putInt(content.length).put(content).array();
  }
  /** 
 * The deserializer for our  {@link TestMessage test messages}.
 */
public static class TestMessageDeserializer implements MessageDeserializer<TestMessage> {
    @Override public TestMessage deserializeMessage(    ByteBuf buf){
      int length=buf.readInt();
      String message="";
      if (length > 0) {
        byte[] name=new byte[length];
        buf.readBytes(name);
        message=new String(name,ConfigConstants.DEFAULT_CHARSET);
      }
      return new TestMessage(message);
    }
  }
}
