/** 
 * Tests for guarding  {@link RocksDBKeySerializationUtils}.
 */
public class RocksDBKeySerializationUtilsTest {
  @Test public void testIsAmbiguousKeyPossible(){
    Assert.assertFalse(RocksDBKeySerializationUtils.isAmbiguousKeyPossible(IntSerializer.INSTANCE,StringSerializer.INSTANCE));
    Assert.assertTrue(RocksDBKeySerializationUtils.isAmbiguousKeyPossible(StringSerializer.INSTANCE,StringSerializer.INSTANCE));
  }
  @Test public void testKeyGroupSerializationAndDeserialization() throws Exception {
    ByteArrayOutputStreamWithPos outputStream=new ByteArrayOutputStreamWithPos(8);
    DataOutputView outputView=new DataOutputViewStreamWrapper(outputStream);
    for (int keyGroupPrefixBytes=1; keyGroupPrefixBytes <= 2; ++keyGroupPrefixBytes) {
      for (int orgKeyGroup=0; orgKeyGroup < 128; ++orgKeyGroup) {
        outputStream.reset();
        RocksDBKeySerializationUtils.writeKeyGroup(orgKeyGroup,keyGroupPrefixBytes,outputView);
        int deserializedKeyGroup=RocksDBKeySerializationUtils.readKeyGroup(keyGroupPrefixBytes,new DataInputViewStreamWrapper(new ByteArrayInputStreamWithPos(outputStream.toByteArray())));
        Assert.assertEquals(orgKeyGroup,deserializedKeyGroup);
      }
    }
  }
  @Test public void testKeySerializationAndDeserialization() throws Exception {
    ByteArrayOutputStreamWithPos outputStream=new ByteArrayOutputStreamWithPos(8);
    DataOutputView outputView=new DataOutputViewStreamWrapper(outputStream);
    for (int orgKey=0; orgKey < 100; ++orgKey) {
      outputStream.reset();
      RocksDBKeySerializationUtils.writeKey(orgKey,IntSerializer.INSTANCE,outputStream,outputView,false);
      ByteArrayInputStreamWithPos inputStream=new ByteArrayInputStreamWithPos(outputStream.toByteArray());
      int deserializedKey=RocksDBKeySerializationUtils.readKey(IntSerializer.INSTANCE,inputStream,new DataInputViewStreamWrapper(inputStream),false);
      Assert.assertEquals(orgKey,deserializedKey);
      RocksDBKeySerializationUtils.writeKey(orgKey,IntSerializer.INSTANCE,outputStream,outputView,true);
      inputStream=new ByteArrayInputStreamWithPos(outputStream.toByteArray());
      deserializedKey=RocksDBKeySerializationUtils.readKey(IntSerializer.INSTANCE,inputStream,new DataInputViewStreamWrapper(inputStream),true);
      Assert.assertEquals(orgKey,deserializedKey);
    }
  }
  @Test public void testNamespaceSerializationAndDeserialization() throws Exception {
    ByteArrayOutputStreamWithPos outputStream=new ByteArrayOutputStreamWithPos(8);
    DataOutputView outputView=new DataOutputViewStreamWrapper(outputStream);
    for (int orgNamespace=0; orgNamespace < 100; ++orgNamespace) {
      outputStream.reset();
      RocksDBKeySerializationUtils.writeNameSpace(orgNamespace,IntSerializer.INSTANCE,outputStream,outputView,false);
      ByteArrayInputStreamWithPos inputStream=new ByteArrayInputStreamWithPos(outputStream.toByteArray());
      int deserializedNamepsace=RocksDBKeySerializationUtils.readNamespace(IntSerializer.INSTANCE,inputStream,new DataInputViewStreamWrapper(inputStream),false);
      Assert.assertEquals(orgNamespace,deserializedNamepsace);
      RocksDBKeySerializationUtils.writeNameSpace(orgNamespace,IntSerializer.INSTANCE,outputStream,outputView,true);
      inputStream=new ByteArrayInputStreamWithPos(outputStream.toByteArray());
      deserializedNamepsace=RocksDBKeySerializationUtils.readNamespace(IntSerializer.INSTANCE,inputStream,new DataInputViewStreamWrapper(inputStream),true);
      Assert.assertEquals(orgNamespace,deserializedNamepsace);
    }
  }
}
