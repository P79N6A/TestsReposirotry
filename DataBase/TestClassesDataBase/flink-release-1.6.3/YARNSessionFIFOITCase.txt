/** 
 * This test starts a MiniYARNCluster with a FIFO scheduler. There are no queues for that scheduler.
 */
public class YARNSessionFIFOITCase extends YarnTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(YARNSessionFIFOITCase.class);
  @BeforeClass public static void setup(){
    YARN_CONFIGURATION.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
    YARN_CONFIGURATION.setInt(YarnConfiguration.NM_PMEM_MB,768);
    YARN_CONFIGURATION.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,512);
    YARN_CONFIGURATION.set(YarnTestBase.TEST_CLUSTER_NAME_KEY,"flink-yarn-tests-fifo");
    startYARNWithConfig(YARN_CONFIGURATION);
  }
  @After public void checkForProhibitedLogContents(){
    ensureNoProhibitedStringInLogFiles(PROHIBITED_STRINGS,WHITELISTED_STRINGS);
  }
  /** 
 * Test regular operation, including command line parameter parsing.
 */
  @Test(timeout=60000) public void testDetachedMode() throws InterruptedException, IOException {
    LOG.info("Starting testDetachedMode()");
    addTestAppender(FlinkYarnSessionCli.class,Level.INFO);
    File exampleJarLocation=getTestJarPath("StreamingWordCount.jar");
    File tmpInFile=tmp.newFile();
    FileUtils.writeStringToFile(tmpInFile,WordCountData.TEXT);
    ArrayList<String> args=new ArrayList<>();
    args.add("-j");
    args.add(flinkUberjar.getAbsolutePath());
    args.add("-t");
    args.add(flinkLibFolder.getAbsolutePath());
    args.add("-n");
    args.add("1");
    args.add("-jm");
    args.add("768m");
    args.add("-tm");
    args.add("1024m");
    if (SecureTestEnvironment.getTestKeytab() != null) {
      args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "="+ SecureTestEnvironment.getTestKeytab());
    }
    if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {
      args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "="+ SecureTestEnvironment.getHadoopServicePrincipal());
    }
    args.add("--name");
    args.add("MyCustomName");
    args.add("--detached");
    Runner clusterRunner=startWithArgs(args.toArray(new String[args.size()]),"Flink JobManager is now running on",RunTypes.YARN_SESSION);
    clusterRunner.join();
    if (!isNewMode) {
      checkForLogString("The Flink YARN client has been started in detached mode");
      LOG.info("Waiting until two containers are running");
      while (getRunningContainers() < 2) {
        sleep(500);
      }
      long startTime=System.nanoTime();
      while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10,TimeUnit.SECONDS) && !(verifyStringsInNamedLogFiles(new String[]{"YARN Application Master started"},"jobmanager.log") && verifyStringsInNamedLogFiles(new String[]{"Starting TaskManager actor"},"taskmanager.log"))) {
        LOG.info("Still waiting for JM/TM to initialize...");
        sleep(500);
      }
    }
    Runner jobRunner=startWithArgs(new String[]{"run","--detached",exampleJarLocation.getAbsolutePath(),"--input",tmpInFile.getAbsoluteFile().toString()},"Job has been submitted with JobID",RunTypes.CLI_FRONTEND);
    jobRunner.join();
    if (isNewMode) {
      LOG.info("Waiting until two containers are running");
      while (getRunningContainers() < 2) {
        sleep(500);
      }
    }
    long startTime=System.nanoTime();
    while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10,TimeUnit.SECONDS) && !(verifyStringsInNamedLogFiles(new String[]{"switched from state RUNNING to FINISHED"},"jobmanager.log"))) {
      LOG.info("Still waiting for cluster to finish job...");
      sleep(500);
    }
    LOG.info("Two containers are running. Killing the application");
    try {
      YarnClient yc=YarnClient.createYarnClient();
      yc.init(YARN_CONFIGURATION);
      yc.start();
      List<ApplicationReport> apps=yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING));
      Assert.assertEquals(1,apps.size());
      ApplicationReport app=apps.get(0);
      Assert.assertEquals("MyCustomName",app.getName());
      ApplicationId id=app.getApplicationId();
      yc.killApplication(id);
      while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 && yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {
        sleep(500);
      }
    }
 catch (    Throwable t) {
      LOG.warn("Killing failed",t);
      Assert.fail();
    }
 finally {
      String confDirPath=System.getenv("FLINK_CONF_DIR");
      File configDirectory=new File(confDirPath);
      LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath());
      LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file");
      Configuration configuration=GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath());
      try {
        File yarnPropertiesFile=FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION));
        if (yarnPropertiesFile.exists()) {
          LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}",yarnPropertiesFile.getAbsolutePath());
          yarnPropertiesFile.delete();
        }
      }
 catch (      Exception e) {
        LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file",e);
      }
    }
    LOG.info("Finished testDetachedMode()");
  }
  /** 
 * Test querying the YARN cluster. <p>This test validates through 666*2 cores in the "cluster".
 */
  @Test public void testQueryCluster() throws IOException {
    LOG.info("Starting testQueryCluster()");
    runWithArgs(new String[]{"-q"},"Summary: totalMemory 8192 totalCores 1332",null,RunTypes.YARN_SESSION,0);
    LOG.info("Finished testQueryCluster()");
  }
  /** 
 * The test cluster has the following resources: - 2 Nodes with 4096 MB each. - RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512 <p>We allocate: 1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb) 5 TaskManagers with 1585 MB <p>user sees a total request of: 8181 MB (fits) system sees a total request of: 8437 (doesn't fit due to min alloc mb)
 */
  @Ignore("The test is too resource consuming (8.5 GB of memory)") @Test public void testResourceComputation() throws IOException {
    addTestAppender(AbstractYarnClusterDescriptor.class,Level.WARN);
    LOG.info("Starting testResourceComputation()");
    runWithArgs(new String[]{"-j",flinkUberjar.getAbsolutePath(),"-t",flinkLibFolder.getAbsolutePath(),"-n","5","-jm","256m","-tm","1585m"},"Number of connected TaskManagers changed to",null,RunTypes.YARN_SESSION,0);
    LOG.info("Finished testResourceComputation()");
    checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.");
  }
  /** 
 * The test cluster has the following resources: - 2 Nodes with 4096 MB each. - RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512 <p>We allocate: 1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb) 2 TaskManagers with 3840 MB <p>the user sees a total request of: 7936 MB (fits) the system sees a request of: 8192 MB (fits) HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit. <p>--> check if the system properly rejects allocating this session.
 */
  @Ignore("The test is too resource consuming (8 GB of memory)") @Test public void testfullAlloc() throws IOException {
    addTestAppender(AbstractYarnClusterDescriptor.class,Level.WARN);
    LOG.info("Starting testfullAlloc()");
    runWithArgs(new String[]{"-j",flinkUberjar.getAbsolutePath(),"-t",flinkLibFolder.getAbsolutePath(),"-n","2","-jm","256m","-tm","3840m"},"Number of connected TaskManagers changed to",null,RunTypes.YARN_SESSION,0);
    LOG.info("Finished testfullAlloc()");
    checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" + "After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]");
  }
  /** 
 * Test the YARN Java API.
 */
  @Test public void testJavaAPI() throws Exception {
    final int waitTime=15;
    LOG.info("Starting testJavaAPI()");
    String confDirPath=System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);
    Configuration configuration=GlobalConfiguration.loadConfiguration();
    try (final AbstractYarnClusterDescriptor clusterDescriptor=new LegacyYarnClusterDescriptor(configuration,getYarnConfiguration(),confDirPath,getYarnClient(),true)){
      Assert.assertNotNull("unable to get yarn client",clusterDescriptor);
      clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()));
      clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()));
      final ClusterSpecification clusterSpecification=new ClusterSpecification.ClusterSpecificationBuilder().setMasterMemoryMB(768).setTaskManagerMemoryMB(1024).setNumberTaskManagers(1).setSlotsPerTaskManager(1).createClusterSpecification();
      ClusterClient<ApplicationId> yarnClusterClient=null;
      try {
        yarnClusterClient=clusterDescriptor.deploySessionCluster(clusterSpecification);
        GetClusterStatusResponse expectedStatus=new GetClusterStatusResponse(1,1);
        for (int second=0; second < waitTime * 2; second++) {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            LOG.warn("Interrupted",e);
          }
          GetClusterStatusResponse status=yarnClusterClient.getClusterStatus();
          if (status != null && status.equals(expectedStatus)) {
            LOG.info("ClusterClient reached status " + status);
            break;
          }
          if (second > waitTime) {
            Assert.fail("The custer didn't start after " + waitTime + " seconds");
          }
        }
        Assert.assertNotNull(yarnClusterClient.getClusterConnectionInfo());
        Assert.assertNotNull(yarnClusterClient.getWebInterfaceURL());
        LOG.info("All tests passed.");
      }
  finally {
        if (yarnClusterClient != null) {
          LOG.info("Shutting down the Flink Yarn application.");
          yarnClusterClient.shutDownCluster();
          yarnClusterClient.shutdown();
        }
      }
    }
     LOG.info("Finished testJavaAPI()");
  }
}
