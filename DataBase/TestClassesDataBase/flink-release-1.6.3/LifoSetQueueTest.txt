/** 
 * Test for the basic functionality of the  {@link LifoSetQueue}.
 */
public class LifoSetQueueTest {
  @Test public void testSizeAddPollAndPeek(){
    try {
      LifoSetQueue<Integer> queue=new LifoSetQueue<Integer>();
      assertEquals(0,queue.size());
      assertNull(queue.poll());
      assertNull(queue.peek());
      assertTrue(queue.add(1));
      assertTrue(queue.offer(2));
      assertTrue(queue.offer(3));
      assertEquals(3,queue.size());
      assertEquals(3,queue.peek().intValue());
      assertTrue(queue.add(1));
      assertTrue(queue.offer(1));
      assertTrue(queue.add(3));
      assertTrue(queue.offer(3));
      assertTrue(queue.add(2));
      assertTrue(queue.offer(2));
      assertEquals(3,queue.size());
      assertEquals(3,queue.peek().intValue());
      assertEquals(3,queue.size());
      assertEquals(3,queue.poll().intValue());
      assertEquals(2,queue.size());
      assertEquals(2,queue.peek().intValue());
      assertEquals(2,queue.size());
      assertEquals(2,queue.poll().intValue());
      assertEquals(1,queue.size());
      assertEquals(1,queue.peek().intValue());
      assertEquals(1,queue.size());
      assertEquals(1,queue.poll().intValue());
      assertEquals(0,queue.size());
      assertTrue(queue.isEmpty());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getClass().getSimpleName() + " : " + e.getMessage());
    }
  }
  /** 
 * Remove is tricky, because it goes through the iterator and calls remove() on the iterator.
 */
  @Test public void testRemove(){
    try {
      LifoSetQueue<String> queue=new LifoSetQueue<String>();
      queue.add("1");
      queue.add("2");
      queue.add("3");
      queue.add("4");
      queue.add("5");
      queue.add("6");
      queue.add("7");
      assertEquals(7,queue.size());
      assertEquals("7",queue.peek());
      assertFalse(queue.remove("8"));
      assertTrue(queue.remove("7"));
      assertTrue(queue.remove("1"));
      assertTrue(queue.remove("3"));
      assertEquals(4,queue.size());
      assertTrue(queue.add("1"));
      assertTrue(queue.add("7"));
      assertTrue(queue.add("3"));
      assertEquals(7,queue.size());
      assertEquals("3",queue.poll());
      assertEquals("7",queue.poll());
      assertEquals("1",queue.poll());
      assertEquals("6",queue.poll());
      assertEquals("5",queue.poll());
      assertEquals("4",queue.poll());
      assertEquals("2",queue.poll());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getClass().getSimpleName() + " : " + e.getMessage());
    }
  }
}
