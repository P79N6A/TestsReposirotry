private static class LifeCycleTestInputFormat extends RichInputFormat<Integer,InputSplit> {
  private static final long serialVersionUID=7408902249499583273L;
  private boolean isConfigured=false;
  private boolean isInputFormatOpen=false;
  private boolean isSplitOpen=false;
  private boolean eos=false;
  private int splitCounter=0;
  private int reachedEndCalls=0;
  private int nextRecordCalls=0;
  @Override public void openInputFormat(){
    Assert.assertTrue(isConfigured);
    Assert.assertTrue(!isInputFormatOpen);
    Assert.assertTrue(!isSplitOpen);
    this.isInputFormatOpen=true;
  }
  @Override public void closeInputFormat(){
    Assert.assertTrue(!isSplitOpen);
    this.isInputFormatOpen=false;
  }
  @Override public void configure(  Configuration parameters){
    Assert.assertTrue(!isConfigured);
    this.isConfigured=true;
  }
  @Override public BaseStatistics getStatistics(  BaseStatistics cachedStatistics) throws IOException {
    return null;
  }
  @Override public InputSplit[] createInputSplits(  int minNumSplits) throws IOException {
    Assert.assertTrue(isConfigured);
    InputSplit[] splits=new InputSplit[minNumSplits];
    for (int i=0; i < minNumSplits; i++) {
      final int idx=i;
      splits[idx]=new InputSplit(){
        private static final long serialVersionUID=-1480792932361908285L;
        @Override public int getSplitNumber(){
          return idx;
        }
      }
;
    }
    return splits;
  }
  @Override public InputSplitAssigner getInputSplitAssigner(  InputSplit[] inputSplits){
    return null;
  }
  @Override public void open(  InputSplit split) throws IOException {
    Assert.assertTrue(isInputFormatOpen);
    Assert.assertTrue(isConfigured);
    Assert.assertTrue(!isSplitOpen);
    isSplitOpen=true;
    eos=false;
  }
  @Override public boolean reachedEnd() throws IOException {
    Assert.assertTrue(isInputFormatOpen);
    Assert.assertTrue(isConfigured);
    Assert.assertTrue(isSplitOpen);
    if (!eos) {
      reachedEndCalls++;
    }
    return eos;
  }
  @Override public Integer nextRecord(  Integer reuse) throws IOException {
    Assert.assertTrue(isInputFormatOpen);
    Assert.assertTrue(isConfigured);
    Assert.assertTrue(isSplitOpen);
    Assert.assertTrue(reachedEndCalls == ++nextRecordCalls);
    eos=true;
    return splitCounter++;
  }
  @Override public void close() throws IOException {
    this.isSplitOpen=false;
  }
}
