/** 
 * Tests the network buffer calculation from heap size.
 */
public class NetworkBufferCalculationTest extends TestLogger {
  /** 
 * Test for  {@link TaskManagerServices#calculateNetworkBufferMemory(TaskManagerServicesConfiguration,long)}using the same (manual) test cases as in  {@link TaskManagerServicesTest#calculateHeapSizeMB()}.
 */
  @Test public void calculateNetworkBufFromHeapSize() throws Exception {
    TaskManagerServicesConfiguration tmConfig;
    tmConfig=getTmConfig(Long.valueOf(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()),TaskManagerOptions.MANAGED_MEMORY_FRACTION.defaultValue(),0.1f,60L << 20,1L << 30,MemoryType.HEAP);
    assertEquals((100L << 20) + 1,TaskManagerServices.calculateNetworkBufferMemory(tmConfig,900L << 20));
    tmConfig=getTmConfig(Long.valueOf(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()),TaskManagerOptions.MANAGED_MEMORY_FRACTION.defaultValue(),0.2f,60L << 20,1L << 30,MemoryType.HEAP);
    assertEquals((200L << 20) + 3,TaskManagerServices.calculateNetworkBufferMemory(tmConfig,800L << 20));
    tmConfig=getTmConfig(10,TaskManagerOptions.MANAGED_MEMORY_FRACTION.defaultValue(),0.1f,60L << 20,1L << 30,MemoryType.OFF_HEAP);
    assertEquals((100L << 20) + 1,TaskManagerServices.calculateNetworkBufferMemory(tmConfig,890L << 20));
    tmConfig=getTmConfig(-1,0.1f,0.1f,60L << 20,1L << 30,MemoryType.OFF_HEAP);
    assertEquals((100L << 20) + 1,TaskManagerServices.calculateNetworkBufferMemory(tmConfig,810L << 20));
  }
  /** 
 * Returns a task manager services configuration for the tests
 * @param managedMemory         see {@link TaskManagerOptions#MANAGED_MEMORY_SIZE}
 * @param managedMemoryFraction see {@link TaskManagerOptions#MANAGED_MEMORY_FRACTION}
 * @param networkBufFraction	see {@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION}
 * @param networkBufMin			see {@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN}
 * @param networkBufMax			see {@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}
 * @param memType				on-heap or off-heap
 * @return configuration object
 */
  private static TaskManagerServicesConfiguration getTmConfig(  final long managedMemory,  final float managedMemoryFraction,  float networkBufFraction,  long networkBufMin,  long networkBufMax,  final MemoryType memType){
    final NetworkEnvironmentConfiguration networkConfig=new NetworkEnvironmentConfiguration(networkBufFraction,networkBufMin,networkBufMax,checkedDownCast(MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes()),null,TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL.defaultValue(),TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX.defaultValue(),TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue(),TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE.defaultValue(),null);
    return new TaskManagerServicesConfiguration(InetAddress.getLoopbackAddress(),new String[]{},new String[]{},false,networkConfig,QueryableStateConfiguration.disabled(),1,managedMemory,memType,false,managedMemoryFraction,0);
  }
}
