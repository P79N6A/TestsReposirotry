static final class TupleMatchRemovingJoin implements FlatJoinFunction<Tuple2<Integer,String>,Tuple2<Integer,String>,Tuple2<Integer,String>> {
  private final Map<Integer,Collection<TupleMatch>> toRemoveFrom;
  protected TupleMatchRemovingJoin(  Map<Integer,Collection<TupleMatch>> map){
    this.toRemoveFrom=map;
  }
  @Override public void join(  Tuple2<Integer,String> rec1,  Tuple2<Integer,String> rec2,  Collector<Tuple2<Integer,String>> out) throws Exception {
    int key=rec1 != null ? rec1.f0 : rec2.f0;
    String value1=rec1 != null ? rec1.f1 : null;
    String value2=rec2 != null ? rec2.f1 : null;
    Collection<TupleMatch> matches=this.toRemoveFrom.get(key);
    if (matches == null) {
      Assert.fail("Match " + key + " - "+ value1+ ":"+ value2+ " is unexpected.");
    }
    Assert.assertTrue("Produced match was not contained: " + key + " - "+ value1+ ":"+ value2,matches.remove(new TupleMatch(value1,value2)));
    if (matches.isEmpty()) {
      this.toRemoveFrom.remove(key);
    }
  }
}
