/** 
 * Various tests around the proper passing of state descriptors to the operators and their serialization. <p>The tests use an arbitrary generic type to validate the behavior.
 */
@SuppressWarnings("serial") public class StateDescriptorPassingTest {
  @Test public void testFoldWindowState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<String> src=env.fromElements("abc");
    SingleOutputStreamOperator<?> result=src.keyBy(new KeySelector<String,String>(){
      @Override public String getKey(      String value){
        return null;
      }
    }
).timeWindow(Time.milliseconds(1000)).fold(new File("/"),new FoldFunction<String,File>(){
      @Override public File fold(      File a,      String e){
        return null;
      }
    }
);
    validateStateDescriptorConfigured(result);
  }
  @Test public void testReduceWindowState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.keyBy(new KeySelector<File,String>(){
      @Override public String getKey(      File value){
        return null;
      }
    }
).timeWindow(Time.milliseconds(1000)).reduce(new ReduceFunction<File>(){
      @Override public File reduce(      File value1,      File value2){
        return null;
      }
    }
);
    validateStateDescriptorConfigured(result);
  }
  @Test public void testApplyWindowState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.keyBy(new KeySelector<File,String>(){
      @Override public String getKey(      File value){
        return null;
      }
    }
).timeWindow(Time.milliseconds(1000)).apply(new WindowFunction<File,String,String,TimeWindow>(){
      @Override public void apply(      String s,      TimeWindow window,      Iterable<File> input,      Collector<String> out){
      }
    }
);
    validateListStateDescriptorConfigured(result);
  }
  @Test public void testProcessWindowState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.keyBy(new KeySelector<File,String>(){
      @Override public String getKey(      File value){
        return null;
      }
    }
).timeWindow(Time.milliseconds(1000)).process(new ProcessWindowFunction<File,String,String,TimeWindow>(){
      @Override public void process(      String s,      Context ctx,      Iterable<File> input,      Collector<String> out){
      }
    }
);
    validateListStateDescriptorConfigured(result);
  }
  @Test public void testProcessAllWindowState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.timeWindowAll(Time.milliseconds(1000)).process(new ProcessAllWindowFunction<File,String,TimeWindow>(){
      @Override public void process(      Context ctx,      Iterable<File> input,      Collector<String> out){
      }
    }
);
    validateListStateDescriptorConfigured(result);
  }
  @Test public void testFoldWindowAllState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<String> src=env.fromElements("abc");
    SingleOutputStreamOperator<?> result=src.timeWindowAll(Time.milliseconds(1000)).fold(new File("/"),new FoldFunction<String,File>(){
      @Override public File fold(      File a,      String e){
        return null;
      }
    }
);
    validateStateDescriptorConfigured(result);
  }
  @Test public void testReduceWindowAllState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.timeWindowAll(Time.milliseconds(1000)).reduce(new ReduceFunction<File>(){
      @Override public File reduce(      File value1,      File value2){
        return null;
      }
    }
);
    validateStateDescriptorConfigured(result);
  }
  @Test public void testApplyWindowAllState() throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    env.registerTypeWithKryoSerializer(File.class,JavaSerializer.class);
    DataStream<File> src=env.fromElements(new File("/"));
    SingleOutputStreamOperator<?> result=src.timeWindowAll(Time.milliseconds(1000)).apply(new AllWindowFunction<File,String,TimeWindow>(){
      @Override public void apply(      TimeWindow window,      Iterable<File> input,      Collector<String> out){
      }
    }
);
    validateListStateDescriptorConfigured(result);
  }
  private void validateStateDescriptorConfigured(  SingleOutputStreamOperator<?> result){
    OneInputTransformation<?,?> transform=(OneInputTransformation<?,?>)result.getTransformation();
    WindowOperator<?,?,?,?,?> op=(WindowOperator<?,?,?,?,?>)transform.getOperator();
    StateDescriptor<?,?> descr=op.getStateDescriptor();
    TypeSerializer<?> serializer=descr.getSerializer();
    assertTrue(serializer instanceof KryoSerializer);
    Kryo kryo=((KryoSerializer<?>)serializer).getKryo();
    assertTrue("serializer registration was not properly passed on",kryo.getSerializer(File.class) instanceof JavaSerializer);
  }
  private void validateListStateDescriptorConfigured(  SingleOutputStreamOperator<?> result){
    OneInputTransformation<?,?> transform=(OneInputTransformation<?,?>)result.getTransformation();
    WindowOperator<?,?,?,?,?> op=(WindowOperator<?,?,?,?,?>)transform.getOperator();
    StateDescriptor<?,?> descr=op.getStateDescriptor();
    assertTrue(descr instanceof ListStateDescriptor);
    ListStateDescriptor<?> listDescr=(ListStateDescriptor<?>)descr;
    TypeSerializer<?> serializer=listDescr.getSerializer();
    assertTrue(serializer instanceof ListSerializer);
    TypeSerializer<?> elementSerializer=listDescr.getElementSerializer();
    assertTrue(elementSerializer instanceof KryoSerializer);
    Kryo kryo=((KryoSerializer<?>)elementSerializer).getKryo();
    assertTrue("serializer registration was not properly passed on",kryo.getSerializer(File.class) instanceof JavaSerializer);
  }
}
