private static class EventTimeAdaptor implements TimeDomainAdaptor {
  @Override public void setIsEventTime(  WindowAssigner<?,?> mockAssigner){
    when(mockAssigner.isEventTime()).thenReturn(true);
  }
  public void advanceTime(  OneInputStreamOperatorTestHarness testHarness,  long timestamp) throws Exception {
    testHarness.processWatermark(new Watermark(timestamp));
  }
  @Override public void registerTimer(  Trigger.TriggerContext ctx,  long timestamp){
    ctx.registerEventTimeTimer(timestamp);
  }
  @Override public void deleteTimer(  Trigger.TriggerContext ctx,  long timestamp){
    ctx.deleteEventTimeTimer(timestamp);
  }
  @Override public int numTimers(  AbstractStreamOperatorTestHarness testHarness){
    return testHarness.numEventTimeTimers();
  }
  @Override public int numTimersOtherDomain(  AbstractStreamOperatorTestHarness testHarness){
    return testHarness.numProcessingTimeTimers();
  }
  @Override public void shouldRegisterTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception {
    shouldRegisterEventTimeTimerOnElement(mockTrigger,timestamp);
  }
  @Override public void shouldDeleteTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception {
    shouldDeleteEventTimeTimerOnElement(mockTrigger,timestamp);
  }
  @Override public void shouldContinueOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldContinueOnEventTime(mockTrigger);
  }
  @Override public void shouldFireOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldFireOnEventTime(mockTrigger);
  }
  @Override public void shouldFireAndPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldFireAndPurgeOnEventTime(mockTrigger);
  }
  @Override public void shouldPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception {
    shouldPurgeOnEventTime(mockTrigger);
  }
  @Override public void verifyTriggerCallback(  Trigger<?,TimeWindow> mockTrigger,  VerificationMode verificationMode,  Long time,  TimeWindow window) throws Exception {
    if (time == null && window == null) {
      verify(mockTrigger,verificationMode).onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext());
    }
 else     if (time == null) {
      verify(mockTrigger,verificationMode).onEventTime(anyLong(),eq(window),anyTriggerContext());
    }
 else     if (window == null) {
      verify(mockTrigger,verificationMode).onEventTime(eq(time),anyTimeWindow(),anyTriggerContext());
    }
 else {
      verify(mockTrigger,verificationMode).onEventTime(eq(time),eq(window),anyTriggerContext());
    }
  }
  @Override public void verifyCorrectTime(  OneInputStreamOperatorTestHarness testHarness,  InternalWindowFunction.InternalWindowContext context){
    assertEquals(testHarness.getCurrentWatermark(),context.currentWatermark());
  }
}
