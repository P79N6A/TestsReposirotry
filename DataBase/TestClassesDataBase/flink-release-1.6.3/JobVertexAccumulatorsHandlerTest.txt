/** 
 * Tests for the JobVertexAccumulatorsHandler.
 */
public class JobVertexAccumulatorsHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new JobVertexAccumulatorsHandler.JobVertexAccumulatorsJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/vertices/"+ originalTask.getJobVertexId()+ "/accumulators",archive.getPath());
    compareAccumulators(originalTask,archive.getJson());
  }
  @Test public void testGetPaths(){
    JobVertexAccumulatorsHandler handler=new JobVertexAccumulatorsHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/vertices/:vertexid/accumulators",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    String json=JobVertexAccumulatorsHandler.createVertexAccumulatorsJson(originalTask);
    compareAccumulators(originalTask,json);
  }
  private static void compareAccumulators(  AccessExecutionJobVertex originalTask,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    Assert.assertEquals(originalTask.getJobVertexId().toString(),result.get("id").asText());
    ArrayNode accs=(ArrayNode)result.get("user-accumulators");
    StringifiedAccumulatorResult[] expectedAccs=originalTask.getAggregatedUserAccumulatorsStringified();
    ArchivedJobGenerationUtils.compareStringifiedAccumulators(expectedAccs,accs);
  }
}
