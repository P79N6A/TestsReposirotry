/** 
 * Test base for fault tolerant streaming programs.
 */
public abstract class StreamFaultToleranceTestBase extends TestLogger {
  protected static final int NUM_TASK_MANAGERS=3;
  protected static final int NUM_TASK_SLOTS=4;
  protected static final int PARALLELISM=NUM_TASK_MANAGERS * NUM_TASK_SLOTS;
  @ClassRule public static final MiniClusterResource MINI_CLUSTER_RESOURCE=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setNumberTaskManagers(NUM_TASK_MANAGERS).setNumberSlotsPerTaskManager(NUM_TASK_SLOTS).build());
  /** 
 * Implementations are expected to assemble the test topology in this function using the provided  {@link StreamExecutionEnvironment}.
 */
  public abstract void testProgram(  StreamExecutionEnvironment env);
  /** 
 * Implementations are expected to provide test here to verify the correct behavior.
 */
  public abstract void postSubmit() throws Exception ;
  /** 
 * Runs the following program the test program defined in  {@link #testProgram(StreamExecutionEnvironment)}followed by the checks in  {@link #postSubmit}.
 */
  @Test public void runCheckpointedProgram() throws Exception {
    try {
      StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(PARALLELISM);
      env.enableCheckpointing(500);
      env.getConfig().disableSysoutLogging();
      env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE,0L));
      testProgram(env);
      TestUtils.tryExecute(env,"Fault Tolerance Test");
      postSubmit();
    }
 catch (    Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
  }
  /** 
 * POJO storing prefix, value, and count.
 */
@SuppressWarnings("serial") public static class PrefixCount implements Serializable {
    public String prefix;
    public String value;
    public long count;
    public PrefixCount(){
    }
    public PrefixCount(    String prefix,    String value,    long count){
      this.prefix=prefix;
      this.value=value;
      this.count=count;
    }
    @Override public String toString(){
      return prefix + " / " + value;
    }
  }
}
