/** 
 * Tests for the  {@link TaskManagerRunner}.
 */
public class TaskManagerRunnerTest extends TestLogger {
  @Test public void testTaskManagerRunnerShutdown() throws Exception {
    final Configuration configuration=new Configuration();
    final ResourceID taskManagerResourceId=ResourceID.generate();
    final ServerSocket localhost=new ServerSocket(0);
    configuration.setString(JobManagerOptions.ADDRESS,localhost.getInetAddress().getHostName());
    configuration.setInteger(JobManagerOptions.PORT,localhost.getLocalPort());
    configuration.setString(TaskManagerOptions.REGISTRATION_TIMEOUT,"10 ms");
    final CompletableFuture<Void> jvmTerminationFuture=new CompletableFuture<>();
    final TestingTaskManagerRunner taskManagerRunner=new TestingTaskManagerRunner(configuration,taskManagerResourceId,jvmTerminationFuture);
    taskManagerRunner.start();
    try {
      jvmTerminationFuture.get();
      assertThat(taskManagerRunner.getTerminationFuture().isDone(),is(true));
    }
  finally {
      localhost.close();
      taskManagerRunner.close();
    }
  }
private static class TestingTaskManagerRunner extends TaskManagerRunner {
    private final CompletableFuture<Void> jvmTerminationFuture;
    public TestingTaskManagerRunner(    Configuration configuration,    ResourceID resourceId,    CompletableFuture<Void> jvmTerminationFuture) throws Exception {
      super(configuration,resourceId);
      this.jvmTerminationFuture=jvmTerminationFuture;
    }
    @Override protected void terminateJVM(){
      jvmTerminationFuture.complete(null);
    }
  }
}
