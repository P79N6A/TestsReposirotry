@SuppressWarnings("serial") public class OpenIterationTest extends CompilerTestBase {
  @Test public void testSinkInOpenBulkIteration(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Long> input=env.generateSequence(1,10);
      IterativeDataSet<Long> iteration=input.iterate(10);
      DataSet<Long> mapped=iteration.map(new IdentityMapper<Long>());
      mapped.output(new DiscardingOutputFormat<Long>());
      try {
        env.createProgramPlan();
        fail("should throw an exception");
      }
 catch (      InvalidProgramException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testSinkInClosedBulkIteration(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Long> input=env.generateSequence(1,10);
      IterativeDataSet<Long> iteration=input.iterate(10);
      DataSet<Long> mapped=iteration.map(new IdentityMapper<Long>());
      iteration.closeWith(mapped).output(new DiscardingOutputFormat<Long>());
      mapped.output(new DiscardingOutputFormat<Long>());
      Plan p=env.createProgramPlan();
      try {
        compileNoStats(p);
        fail("should throw an exception");
      }
 catch (      InvalidProgramException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testSinkOnSolutionSetDeltaIteration(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> input=env.fromElements(new Tuple2<Long,Long>(0L,0L));
      DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=input.iterateDelta(input,10,0);
      DataSet<Tuple2<Long,Long>> mapped=iteration.getSolutionSet().map(new IdentityMapper<Tuple2<Long,Long>>());
      mapped.output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      try {
        env.createProgramPlan();
        fail("should throw an exception");
      }
 catch (      InvalidProgramException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testSinkOnWorksetDeltaIteration(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> input=env.fromElements(new Tuple2<Long,Long>(0L,0L));
      DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=input.iterateDelta(input,10,0);
      DataSet<Tuple2<Long,Long>> mapped=iteration.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>());
      mapped.output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      try {
        env.createProgramPlan();
        fail("should throw an exception");
      }
 catch (      InvalidProgramException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testOperationOnSolutionSet(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> input=env.fromElements(new Tuple2<Long,Long>(0L,0L));
      DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=input.iterateDelta(input,10,0);
      DataSet<Tuple2<Long,Long>> mapped=iteration.getSolutionSet().map(new IdentityMapper<Tuple2<Long,Long>>());
      DataSet<Tuple2<Long,Long>> joined=iteration.getWorkset().join(mapped).where(0).equalTo(0).projectFirst(1).projectSecond(0);
      iteration.closeWith(joined,joined).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      Plan p=env.createProgramPlan();
      try {
        compileNoStats(p);
        fail("should throw an exception");
      }
 catch (      InvalidProgramException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
