/** 
 * Tests for the Options utility class.
 */
public class OptionsTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void testChoicesWithInvalidDefaultValue() throws RequiredParametersException {
    expectedException.expect(RequiredParametersException.class);
    expectedException.expectMessage("Default value d is not in the list of valid values for option choices");
    Option option=new Option("choices").choices("a","b","c");
    option.defaultValue("d");
  }
  @Test public void testChoicesWithValidDefaultValue(){
    Option option=null;
    try {
      option=new Option("choices").choices("a","b","c");
      option=option.defaultValue("a");
    }
 catch (    RequiredParametersException e) {
      fail("Exception thrown: " + e.getMessage());
    }
    Assert.assertEquals(option.getDefaultValue(),"a");
  }
  @Test public void testChoicesWithInvalidDefautlValue() throws RequiredParametersException {
    expectedException.expect(RequiredParametersException.class);
    expectedException.expectMessage("Valid values for option choices do not contain defined default value x");
    Option option=new Option("choices").defaultValue("x");
    option.choices("a","b");
  }
  @Test public void testIsCastableToDefinedTypeWithDefaultType(){
    Option option=new Option("name");
    Assert.assertTrue(option.isCastableToDefinedType("some value"));
  }
  @Test public void testIsCastableToDefinedTypeWithMatchingTypes(){
    Option option=new Option("name").type(OptionType.INTEGER);
    Assert.assertTrue(option.isCastableToDefinedType("15"));
    Option optionDouble=new Option("name").type(OptionType.DOUBLE);
    Assert.assertTrue(optionDouble.isCastableToDefinedType("15.0"));
    Option optionFloat=new Option("name").type(OptionType.BOOLEAN);
    Assert.assertTrue(optionFloat.isCastableToDefinedType("true"));
  }
  @Test public void testIsCastableToDefinedTypeWithNonMatchingTypes(){
    Option option=new Option("name").type(OptionType.INTEGER);
    Assert.assertFalse(option.isCastableToDefinedType("true"));
    Option optionDouble=new Option("name").type(OptionType.DOUBLE);
    Assert.assertFalse(optionDouble.isCastableToDefinedType("name"));
    Option optionFloat=new Option("name").type(OptionType.BOOLEAN);
    Assert.assertFalse(optionFloat.isCastableToDefinedType("15"));
  }
}
