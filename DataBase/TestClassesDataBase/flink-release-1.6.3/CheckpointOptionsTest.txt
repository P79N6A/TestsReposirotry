/** 
 * Tests for the  {@link CheckpointOptions} class.
 */
public class CheckpointOptionsTest {
  @Test public void testDefaultCheckpoint() throws Exception {
    final CheckpointOptions options=CheckpointOptions.forCheckpointWithDefaultLocation();
    assertEquals(CheckpointType.CHECKPOINT,options.getCheckpointType());
    assertTrue(options.getTargetLocation().isDefaultReference());
    final CheckpointOptions copy=CommonTestUtils.createCopySerializable(options);
    assertEquals(CheckpointType.CHECKPOINT,copy.getCheckpointType());
    assertTrue(copy.getTargetLocation().isDefaultReference());
  }
  @Test public void testSavepoint() throws Exception {
    final Random rnd=new Random();
    final byte[] locationBytes=new byte[rnd.nextInt(41) + 1];
    rnd.nextBytes(locationBytes);
    final CheckpointOptions options=new CheckpointOptions(CheckpointType.values()[rnd.nextInt(CheckpointType.values().length)],new CheckpointStorageLocationReference(locationBytes));
    final CheckpointOptions copy=CommonTestUtils.createCopySerializable(options);
    assertEquals(options.getCheckpointType(),copy.getCheckpointType());
    assertArrayEquals(locationBytes,copy.getTargetLocation().getReferenceBytes());
  }
}
