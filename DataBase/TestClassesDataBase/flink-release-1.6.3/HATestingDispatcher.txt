private static class HATestingDispatcher extends TestingDispatcher {
  @Nonnull private final BlockingQueue<DispatcherId> fencingTokens;
  HATestingDispatcher(  RpcService rpcService,  String endpointId,  Configuration configuration,  HighAvailabilityServices highAvailabilityServices,  ResourceManagerGateway resourceManagerGateway,  BlobServer blobServer,  HeartbeatServices heartbeatServices,  JobManagerMetricGroup jobManagerMetricGroup,  @Nullable String metricQueryServicePath,  ArchivedExecutionGraphStore archivedExecutionGraphStore,  JobManagerRunnerFactory jobManagerRunnerFactory,  FatalErrorHandler fatalErrorHandler,  @Nonnull BlockingQueue<DispatcherId> fencingTokens) throws Exception {
    super(rpcService,endpointId,configuration,highAvailabilityServices,resourceManagerGateway,blobServer,heartbeatServices,jobManagerMetricGroup,metricQueryServicePath,archivedExecutionGraphStore,jobManagerRunnerFactory,fatalErrorHandler);
    this.fencingTokens=fencingTokens;
  }
  @VisibleForTesting CompletableFuture<Integer> getNumberJobs(  Time timeout){
    return callAsyncWithoutFencing(() -> listJobs(timeout).get().size(),timeout);
  }
  @Override protected void setFencingToken(  @Nullable DispatcherId newFencingToken){
    super.setFencingToken(newFencingToken);
    if (newFencingToken == null) {
      fencingTokens.offer(NULL_FENCING_TOKEN);
    }
 else {
      fencingTokens.offer(newFencingToken);
    }
  }
}
