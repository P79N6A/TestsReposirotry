public static class MyOptionTypeInfo<T> extends TypeInformation<MyOption<T>> {
  private final TypeInformation<T> innerType;
  public MyOptionTypeInfo(  TypeInformation<T> innerType){
    this.innerType=innerType;
  }
  public TypeInformation<T> getInnerType(){
    return innerType;
  }
  @Override public boolean isBasicType(){
    return false;
  }
  @Override public boolean isTupleType(){
    return false;
  }
  @Override public int getArity(){
    return 0;
  }
  @Override public int getTotalFields(){
    return 1;
  }
  @Override public Class<MyOption<T>> getTypeClass(){
    return null;
  }
  @Override public boolean isKeyType(){
    return false;
  }
  @Override public TypeSerializer<MyOption<T>> createSerializer(  ExecutionConfig config){
    return null;
  }
  @Override public String toString(){
    return null;
  }
  @Override public boolean equals(  Object obj){
    return false;
  }
  @Override public int hashCode(){
    return 0;
  }
  @Override public boolean canEqual(  Object obj){
    return false;
  }
  @Override public Map<String,TypeInformation<?>> getGenericParameters(){
    Map<String,TypeInformation<?>> map=new HashMap<>(1);
    map.put("T",innerType);
    return map;
  }
}
