private static class ForbiddenCall {
  private final Method method;
  private final Constructor<?> constructor;
  private final List<Member> exclusions;
  private ForbiddenCall(  Method method,  Constructor<?> ctor,  List<Member> exclusions){
    this.method=method;
    this.exclusions=exclusions;
    this.constructor=ctor;
  }
  public Method getMethod(){
    return method;
  }
  public List<Member> getExclusions(){
    return exclusions;
  }
  public Set<Member> getUsages(  Reflections reflections){
    if (method == null) {
      return reflections.getConstructorUsage(constructor);
    }
    return reflections.getMethodUsage(method);
  }
  public static ForbiddenCall of(  Method method){
    return new ForbiddenCall(method,null,Collections.<Member>emptyList());
  }
  public static ForbiddenCall of(  Method method,  List<Member> exclusions){
    return new ForbiddenCall(method,null,exclusions);
  }
  public static ForbiddenCall of(  Constructor<?> ctor){
    return new ForbiddenCall(null,ctor,Collections.<Member>emptyList());
  }
  public static ForbiddenCall of(  Constructor<?> ctor,  List<Member> exclusions){
    return new ForbiddenCall(null,ctor,exclusions);
  }
}
