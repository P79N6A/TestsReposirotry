/** 
 * Tests for  {@link JaccardIndex}.
 */
@RunWith(Parameterized.class) public class JaccardIndexITCase extends CopyableValueDriverBaseITCase {
  public JaccardIndexITCase(  String idType,  TestExecutionMode mode){
    super(idType,mode);
  }
  private String[] parameters(  int scale,  String output,  String... additionalParameters){
    String[] parameters=new String[]{"--algorithm","JaccardIndex","--mirror_results","--input","RMatGraph","--scale",Integer.toString(scale),"--type",idType,"--simplify","undirected","--output",output};
    return ArrayUtils.addAll(parameters,additionalParameters);
  }
  @Test public void testLongDescription() throws Exception {
    String expected=regexSubstring(new JaccardIndex().getLongDescription());
    expectedOutputFromException(new String[]{"--algorithm","JaccardIndex"},expected,ProgramParametrizationException.class);
  }
  @Test public void testHashWithRMatGraph() throws Exception {
    expectedChecksum(parameters(8,"hash"),39276,0x00004caba2e663d5L);
  }
  @Test public void testPrintWithRMatGraph() throws Exception {
    Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar"));
    expectedOutputChecksum(parameters(8,"print"),new Checksum(39276,0x00004c5a726220c0L));
  }
  @Test public void testParallelism() throws Exception {
    TestUtils.verifyParallelism(parameters(8,"print"),"FlatMap \\(Mirror results\\)","GroupReduce \\(Compute scores\\)","GroupReduce \\(Generate group pairs\\)");
  }
}
