/** 
 * Tests for the JobVertexDetailsHandler.
 */
public class JobVertexDetailsHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new JobVertexDetailsHandler.JobVertexDetailsJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/vertices/"+ originalTask.getJobVertexId(),archive.getPath());
    compareVertexDetails(originalTask,archive.getJson());
  }
  @Test public void testGetPaths(){
    JobVertexDetailsHandler handler=new JobVertexDetailsHandler(mock(ExecutionGraphCache.class),Executors.directExecutor(),null);
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/vertices/:vertexid",paths[0]);
  }
  @Test public void testJsonGeneration() throws Exception {
    AccessExecutionJobVertex originalTask=ArchivedJobGenerationUtils.getTestTask();
    String json=JobVertexDetailsHandler.createVertexDetailsJson(originalTask,ArchivedJobGenerationUtils.getTestJob().getJobID().toString(),null);
    compareVertexDetails(originalTask,json);
  }
  private static void compareVertexDetails(  AccessExecutionJobVertex originalTask,  String json) throws IOException {
    JsonNode result=ArchivedJobGenerationUtils.MAPPER.readTree(json);
    Assert.assertEquals(originalTask.getJobVertexId().toString(),result.get("id").asText());
    Assert.assertEquals(originalTask.getName(),result.get("name").asText());
    Assert.assertEquals(originalTask.getParallelism(),result.get("parallelism").asInt());
    Assert.assertTrue(result.get("now").asLong() > 0);
    ArrayNode subtasks=(ArrayNode)result.get("subtasks");
    Assert.assertEquals(originalTask.getTaskVertices().length,subtasks.size());
    for (int x=0; x < originalTask.getTaskVertices().length; x++) {
      AccessExecutionVertex expectedSubtask=originalTask.getTaskVertices()[x];
      JsonNode subtask=subtasks.get(x);
      Assert.assertEquals(x,subtask.get("subtask").asInt());
      Assert.assertEquals(expectedSubtask.getExecutionState().name(),subtask.get("status").asText());
      Assert.assertEquals(expectedSubtask.getCurrentExecutionAttempt().getAttemptNumber(),subtask.get("attempt").asInt());
      TaskManagerLocation location=expectedSubtask.getCurrentAssignedResourceLocation();
      String expectedLocationString=location.getHostname() + ":" + location.dataPort();
      Assert.assertEquals(expectedLocationString,subtask.get("host").asText());
      long start=expectedSubtask.getStateTimestamp(ExecutionState.DEPLOYING);
      Assert.assertEquals(start,subtask.get("start-time").asLong());
      long end=expectedSubtask.getStateTimestamp(ExecutionState.FINISHED);
      Assert.assertEquals(end,subtask.get("end-time").asLong());
      Assert.assertEquals(end - start,subtask.get("duration").asLong());
      ArchivedJobGenerationUtils.compareIoMetrics(expectedSubtask.getCurrentExecutionAttempt().getIOMetrics(),subtask.get("metrics"));
    }
  }
}
