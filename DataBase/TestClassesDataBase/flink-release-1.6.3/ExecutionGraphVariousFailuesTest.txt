public class ExecutionGraphVariousFailuesTest extends TestLogger {
  /** 
 * Test that failing in state restarting will retrigger the restarting logic. This means that it only goes into the state FAILED after the restart strategy says the job is no longer restartable.
 */
  @Test public void testFailureWhileRestarting() throws Exception {
    final ExecutionGraph eg=ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(2));
    eg.scheduleForExecution();
    assertEquals(JobStatus.RUNNING,eg.getState());
    ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);
    eg.failGlobal(new Exception("Test 1"));
    assertEquals(JobStatus.FAILING,eg.getState());
    ExecutionGraphTestUtils.completeCancellingForAllVertices(eg);
    assertEquals(JobStatus.RESTARTING,eg.getState());
    eg.failGlobal(new Exception("Test 2"));
    assertEquals(JobStatus.RESTARTING,eg.getState());
    eg.failGlobal(new Exception("Test 3"));
    assertEquals(JobStatus.FAILED,eg.getState());
  }
  /** 
 * Tests that a  {@link SuppressRestartsException} in state RESTARTING stops the restartingimmediately and sets the execution graph's state to FAILED.
 */
  @Test public void testSuppressRestartFailureWhileRestarting() throws Exception {
    final ExecutionGraph eg=ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10));
    eg.scheduleForExecution();
    assertEquals(JobStatus.RUNNING,eg.getState());
    ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);
    eg.failGlobal(new Exception("test"));
    assertEquals(JobStatus.FAILING,eg.getState());
    ExecutionGraphTestUtils.completeCancellingForAllVertices(eg);
    assertEquals(JobStatus.RESTARTING,eg.getState());
    eg.failGlobal(new SuppressRestartsException(new Exception("Test")));
    assertEquals(JobStatus.FAILED,eg.getState());
  }
  /** 
 * Tests that a failing scheduleOrUpdateConsumers call with a non-existing execution attempt id, will not fail the execution graph.
 */
  @Test public void testFailingScheduleOrUpdateConsumers() throws Exception {
    final ExecutionGraph eg=ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10));
    eg.scheduleForExecution();
    assertEquals(JobStatus.RUNNING,eg.getState());
    ExecutionGraphTestUtils.switchAllVerticesToRunning(eg);
    IntermediateResultPartitionID intermediateResultPartitionId=new IntermediateResultPartitionID();
    ExecutionAttemptID producerId=new ExecutionAttemptID();
    ResultPartitionID resultPartitionId=new ResultPartitionID(intermediateResultPartitionId,producerId);
    try {
      eg.scheduleOrUpdateConsumers(resultPartitionId);
      fail("Expected ExecutionGraphException.");
    }
 catch (    ExecutionGraphException e) {
    }
    assertEquals(JobStatus.RUNNING,eg.getState());
  }
}
