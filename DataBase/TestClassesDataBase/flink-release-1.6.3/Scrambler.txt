private static class Scrambler implements Serializable {
  private Tuple2<IntValue,IntValue> d=new Tuple2<>(new IntValue(),new IntValue());
  private final boolean keyed;
  public Scrambler(  boolean keyed){
    this.keyed=keyed;
  }
  public Tuple2<IntValue,IntValue> scramble(  Tuple2<IntValue,IntValue> a,  Tuple2<IntValue,IntValue> b){
    Random random=new Random(RANDOM_SEED);
    if (a != null && b != null) {
      random.setSeed((((long)a.f0.getValue()) << 32) + b.f0.getValue());
    }
 else     if (a != null) {
      random.setSeed(a.f0.getValue());
    }
 else     if (b != null) {
      random.setSeed(b.f0.getValue());
    }
 else {
      throw new RuntimeException("One of a or b should be not null");
    }
    Tuple2<IntValue,IntValue> result;
switch (random.nextInt(4)) {
case 0:
      result=a;
    break;
case 1:
  result=b;
break;
case 2:
result=d;
break;
case 3:
result=new Tuple2<>(new IntValue(),new IntValue());
break;
default :
throw new RuntimeException("Unexpected value in switch statement");
}
if (a == null || b == null) {
if (result == null) {
result=d;
}
if (a == null) {
b.f0.copyTo(result.f0);
b.f1.copyTo(result.f1);
}
 else {
a.f0.copyTo(result.f0);
a.f1.copyTo(result.f1);
}
}
 else {
if (keyed) {
result.f0.setValue(a.f0.getValue());
}
 else {
result.f0.setValue(a.f0.getValue() + b.f0.getValue());
}
result.f1.setValue(a.f1.getValue() + b.f1.getValue());
}
scrambleIfNot(a,result);
scrambleIfNot(b,result);
scrambleIfNot(d,result);
return result;
}
private Random random=new Random(~RANDOM_SEED);
private void scrambleIfNot(Tuple2<IntValue,IntValue> t,Object o){
if (t != null && t != o) {
t.f0.setValue(random.nextInt());
t.f1.setValue(random.nextInt());
}
}
}
