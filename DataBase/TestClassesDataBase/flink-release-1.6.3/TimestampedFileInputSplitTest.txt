/** 
 * Test the  {@link TimestampedFileInputSplit} for Continuous File Processing.
 */
public class TimestampedFileInputSplitTest {
  @Test public void testSplitEquality(){
    TimestampedFileInputSplit richFirstSplit=new TimestampedFileInputSplit(10,2,new Path("test"),0,100,null);
    TimestampedFileInputSplit richSecondSplit=new TimestampedFileInputSplit(10,2,new Path("test"),0,100,null);
    Assert.assertEquals(richFirstSplit,richSecondSplit);
    TimestampedFileInputSplit richModSecondSplit=new TimestampedFileInputSplit(11,2,new Path("test"),0,100,null);
    Assert.assertNotEquals(richSecondSplit,richModSecondSplit);
    TimestampedFileInputSplit richThirdSplit=new TimestampedFileInputSplit(10,2,new Path("test/test1"),0,100,null);
    Assert.assertEquals(richThirdSplit.getModificationTime(),10);
    Assert.assertNotEquals(richFirstSplit,richThirdSplit);
    TimestampedFileInputSplit richThirdSplitCopy=new TimestampedFileInputSplit(10,2,new Path("test/test1"),0,100,null);
    Assert.assertEquals(richThirdSplitCopy,richThirdSplit);
  }
  @Test public void testSplitComparison(){
    TimestampedFileInputSplit richFirstSplit=new TimestampedFileInputSplit(0,3,new Path("test/test1"),0,100,null);
    TimestampedFileInputSplit richSecondSplit=new TimestampedFileInputSplit(10,2,new Path("test/test2"),0,100,null);
    TimestampedFileInputSplit richThirdSplit=new TimestampedFileInputSplit(10,1,new Path("test/test2"),0,100,null);
    TimestampedFileInputSplit richForthSplit=new TimestampedFileInputSplit(11,0,new Path("test/test3"),0,100,null);
    TimestampedFileInputSplit richFifthSplit=new TimestampedFileInputSplit(11,1,new Path("test/test3"),0,100,null);
    Assert.assertTrue(richFirstSplit.compareTo(richSecondSplit) < 0);
    Assert.assertTrue(richThirdSplit.compareTo(richFifthSplit) < 0);
    Assert.assertTrue(richThirdSplit.compareTo(richSecondSplit) < 0);
    Assert.assertTrue(richThirdSplit.compareTo(richForthSplit) < 0);
  }
  @Test public void testIllegalArgument(){
    try {
      new TimestampedFileInputSplit(-10,2,new Path("test"),0,100,null);
    }
 catch (    Exception e) {
      if (!(e instanceof IllegalArgumentException)) {
        Assert.fail(e.getMessage());
      }
    }
  }
  @Test public void testPriorityQ(){
    TimestampedFileInputSplit richFirstSplit=new TimestampedFileInputSplit(0,3,new Path("test/test1"),0,100,null);
    TimestampedFileInputSplit richSecondSplit=new TimestampedFileInputSplit(10,2,new Path("test/test2"),0,100,null);
    TimestampedFileInputSplit richThirdSplit=new TimestampedFileInputSplit(10,1,new Path("test/test2"),0,100,null);
    TimestampedFileInputSplit richForthSplit=new TimestampedFileInputSplit(11,0,new Path("test/test3"),0,100,null);
    TimestampedFileInputSplit richFifthSplit=new TimestampedFileInputSplit(11,1,new Path("test/test3"),0,100,null);
    Queue<TimestampedFileInputSplit> pendingSplits=new PriorityQueue<>();
    pendingSplits.add(richSecondSplit);
    pendingSplits.add(richForthSplit);
    pendingSplits.add(richFirstSplit);
    pendingSplits.add(richFifthSplit);
    pendingSplits.add(richFifthSplit);
    pendingSplits.add(richThirdSplit);
    List<TimestampedFileInputSplit> actualSortedSplits=new ArrayList<>();
    while (true) {
      actualSortedSplits.add(pendingSplits.poll());
      if (pendingSplits.isEmpty()) {
        break;
      }
    }
    List<TimestampedFileInputSplit> expectedSortedSplits=new ArrayList<>();
    expectedSortedSplits.add(richFirstSplit);
    expectedSortedSplits.add(richThirdSplit);
    expectedSortedSplits.add(richSecondSplit);
    expectedSortedSplits.add(richForthSplit);
    expectedSortedSplits.add(richFifthSplit);
    expectedSortedSplits.add(richFifthSplit);
    Assert.assertArrayEquals(expectedSortedSplits.toArray(),actualSortedSplits.toArray());
  }
}
