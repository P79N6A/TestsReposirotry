/** 
 * Tests for  {@link DataSet#first(int)}.
 */
public class FirstNOperatorTest {
  private final List<Tuple5<Integer,Long,String,Long,Integer>> emptyTupleData=new ArrayList<Tuple5<Integer,Long,String,Long,Integer>>();
  private final TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>> tupleTypeInfo=new TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  @Test public void testUngroupedFirstN(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.first(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.first(10);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.first(0);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.first(-1);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testGroupedFirstN(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.groupBy(2).first(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(1,3).first(10);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(0).first(0);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(2).first(-1);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testGroupedSortedFirstN(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.groupBy(2).sortGroup(4,Order.ASCENDING).first(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(1,3).sortGroup(4,Order.ASCENDING).first(10);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(0).sortGroup(4,Order.ASCENDING).first(0);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.groupBy(2).sortGroup(4,Order.ASCENDING).first(-1);
      Assert.fail();
    }
 catch (    InvalidProgramException ipe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
}
