/** 
 * Tests for the {@link JSONKeyValueDeserializationSchema}.
 */
public class JSONKeyValueDeserializationSchemaTest {
  @Test public void testDeserializeWithoutMetadata() throws IOException {
    ObjectMapper mapper=new ObjectMapper();
    ObjectNode initialKey=mapper.createObjectNode();
    initialKey.put("index",4);
    byte[] serializedKey=mapper.writeValueAsBytes(initialKey);
    ObjectNode initialValue=mapper.createObjectNode();
    initialValue.put("word","world");
    byte[] serializedValue=mapper.writeValueAsBytes(initialValue);
    JSONKeyValueDeserializationSchema schema=new JSONKeyValueDeserializationSchema(false);
    ObjectNode deserializedValue=schema.deserialize(serializedKey,serializedValue,"",0,0);
    Assert.assertTrue(deserializedValue.get("metadata") == null);
    Assert.assertEquals(4,deserializedValue.get("key").get("index").asInt());
    Assert.assertEquals("world",deserializedValue.get("value").get("word").asText());
  }
  @Test public void testDeserializeWithoutKey() throws IOException {
    ObjectMapper mapper=new ObjectMapper();
    byte[] serializedKey=null;
    ObjectNode initialValue=mapper.createObjectNode();
    initialValue.put("word","world");
    byte[] serializedValue=mapper.writeValueAsBytes(initialValue);
    JSONKeyValueDeserializationSchema schema=new JSONKeyValueDeserializationSchema(false);
    ObjectNode deserializedValue=schema.deserialize(serializedKey,serializedValue,"",0,0);
    Assert.assertTrue(deserializedValue.get("metadata") == null);
    Assert.assertTrue(deserializedValue.get("key") == null);
    Assert.assertEquals("world",deserializedValue.get("value").get("word").asText());
  }
  @Test public void testDeserializeWithoutValue() throws IOException {
    ObjectMapper mapper=new ObjectMapper();
    ObjectNode initialKey=mapper.createObjectNode();
    initialKey.put("index",4);
    byte[] serializedKey=mapper.writeValueAsBytes(initialKey);
    byte[] serializedValue=null;
    JSONKeyValueDeserializationSchema schema=new JSONKeyValueDeserializationSchema(false);
    ObjectNode deserializedValue=schema.deserialize(serializedKey,serializedValue,"",0,0);
    Assert.assertTrue(deserializedValue.get("metadata") == null);
    Assert.assertEquals(4,deserializedValue.get("key").get("index").asInt());
    Assert.assertTrue(deserializedValue.get("value") == null);
  }
  @Test public void testDeserializeWithMetadata() throws IOException {
    ObjectMapper mapper=new ObjectMapper();
    ObjectNode initialKey=mapper.createObjectNode();
    initialKey.put("index",4);
    byte[] serializedKey=mapper.writeValueAsBytes(initialKey);
    ObjectNode initialValue=mapper.createObjectNode();
    initialValue.put("word","world");
    byte[] serializedValue=mapper.writeValueAsBytes(initialValue);
    JSONKeyValueDeserializationSchema schema=new JSONKeyValueDeserializationSchema(true);
    ObjectNode deserializedValue=schema.deserialize(serializedKey,serializedValue,"topic#1",3,4);
    Assert.assertEquals(4,deserializedValue.get("key").get("index").asInt());
    Assert.assertEquals("world",deserializedValue.get("value").get("word").asText());
    Assert.assertEquals("topic#1",deserializedValue.get("metadata").get("topic").asText());
    Assert.assertEquals(4,deserializedValue.get("metadata").get("offset").asInt());
    Assert.assertEquals(3,deserializedValue.get("metadata").get("partition").asInt());
  }
}
