/** 
 * Unit test base class for subclasses of  {@link AbstractMetricsHandler}.
 */
public abstract class MetricsHandlerTestBase<T extends AbstractMetricsHandler> extends TestLogger {
  private static final String TEST_METRIC_NAME="test_counter";
  private static final int TEST_METRIC_VALUE=1000;
  static final CompletableFuture<String> TEST_REST_ADDRESS=CompletableFuture.completedFuture("localhost:12345");
  static final Time TIMEOUT=Time.milliseconds(50);
  static final Map<String,String> TEST_HEADERS=Collections.emptyMap();
  @Mock MetricFetcher mockMetricFetcher;
  GatewayRetriever<DispatcherGateway> leaderRetriever;
  @Mock private DispatcherGateway mockDispatcherGateway;
  private T metricsHandler;
  private Map<String,String> pathParameters;
  @Before public void setUp(){
    MockitoAnnotations.initMocks(this);
    this.leaderRetriever=new GatewayRetriever<DispatcherGateway>(){
      @Override public CompletableFuture<DispatcherGateway> getFuture(){
        return CompletableFuture.completedFuture(mockDispatcherGateway);
      }
    }
;
    this.pathParameters=getPathParameters();
    this.metricsHandler=getMetricsHandler();
    final MetricStore metricStore=new MetricStore();
    metricStore.add(new MetricDump.CounterDump(getQueryScopeInfo(),TEST_METRIC_NAME,TEST_METRIC_VALUE));
    when(mockMetricFetcher.getMetricStore()).thenReturn(metricStore);
  }
  /** 
 * Tests that the metric with name defined under  {@link #TEST_METRIC_NAME} can be retrievedfrom the  {@link MetricStore.ComponentMetricStore} returned from{@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest,MetricStore)}.
 */
  @Test public void testGetMetric() throws Exception {
    @SuppressWarnings("unchecked") final CompletableFuture<MetricCollectionResponseBody> completableFuture=metricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(),metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(),pathParameters,Collections.emptyMap()),mockDispatcherGateway);
    assertTrue(completableFuture.isDone());
    final MetricCollectionResponseBody metricCollectionResponseBody=completableFuture.get();
    assertThat(metricCollectionResponseBody.getMetrics(),hasSize(1));
    final Metric metric=metricCollectionResponseBody.getMetrics().iterator().next();
    assertThat(metric.getId(),equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME)));
  }
  /** 
 * Returns instance under test.
 */
  abstract T getMetricsHandler();
  abstract QueryScopeInfo getQueryScopeInfo();
  abstract Map<String,String> getPathParameters();
  /** 
 * Returns the expected metric id for a given metric name. By default the metric name without any modifications is returned.
 * @param metricName The metric name.
 * @return The id of the metric name possibly with additional information, e.g., subtask indexas a prefix.
 */
  String getExpectedIdForMetricName(  final String metricName){
    return metricName;
  }
}
