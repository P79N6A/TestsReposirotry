/** 
 * Tests for the  {@link AbstractMetricGroup}.
 */
public class AbstractMetricGroupTest {
  /** 
 * Verifies that no  {@link NullPointerException} is thrown when {@link AbstractMetricGroup#getAllVariables()} iscalled and the parent is null.
 */
  @Test public void testGetAllVariables() throws Exception {
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
    AbstractMetricGroup group=new AbstractMetricGroup<AbstractMetricGroup<?>>(registry,new String[0],null){
      @Override protected QueryScopeInfo createQueryServiceMetricInfo(      CharacterFilter filter){
        return null;
      }
      @Override protected String getGroupName(      CharacterFilter filter){
        return "";
      }
    }
;
    assertTrue(group.getAllVariables().isEmpty());
    registry.shutdown().get();
  }
  private static final CharacterFilter FILTER_C=new CharacterFilter(){
    @Override public String filterCharacters(    String input){
      return input.replace("C","X");
    }
  }
;
  private static final CharacterFilter FILTER_B=new CharacterFilter(){
    @Override public String filterCharacters(    String input){
      return input.replace("B","X");
    }
  }
;
  @Test public void testScopeCachingForMultipleReporters() throws Exception {
    Configuration config=new Configuration();
    config.setString(MetricOptions.SCOPE_NAMING_TM,"A.B.C.D");
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,TestReporter1.class.getName());
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER,"-");
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,TestReporter2.class.getName());
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER,"!");
    MetricRegistryImpl testRegistry=new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config));
    try {
      MetricGroup tmGroup=new TaskManagerMetricGroup(testRegistry,"host","id");
      tmGroup.counter("1");
      assertEquals("Reporters were not properly instantiated",2,testRegistry.getReporters().size());
      for (      MetricReporter reporter : testRegistry.getReporters()) {
        ScopeCheckingTestReporter typedReporter=(ScopeCheckingTestReporter)reporter;
        if (typedReporter.failureCause != null) {
          throw typedReporter.failureCause;
        }
      }
    }
  finally {
      testRegistry.shutdown().get();
    }
  }
  @Test public void testLogicalScopeCachingForMultipleReporters() throws Exception {
    Configuration config=new Configuration();
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,LogicalScopeReporter1.class.getName());
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,LogicalScopeReporter2.class.getName());
    MetricRegistryImpl testRegistry=new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config));
    try {
      MetricGroup tmGroup=new TaskManagerMetricGroup(testRegistry,"host","id").addGroup("B").addGroup("C");
      tmGroup.counter("1");
      assertEquals("Reporters were not properly instantiated",2,testRegistry.getReporters().size());
      for (      MetricReporter reporter : testRegistry.getReporters()) {
        ScopeCheckingTestReporter typedReporter=(ScopeCheckingTestReporter)reporter;
        if (typedReporter.failureCause != null) {
          throw typedReporter.failureCause;
        }
      }
    }
  finally {
      testRegistry.shutdown().get();
    }
  }
private abstract static class ScopeCheckingTestReporter extends TestReporter {
    protected Exception failureCause;
    @Override public void notifyOfAddedMetric(    Metric metric,    String metricName,    MetricGroup group){
      try {
        checkScopes(metric,metricName,group);
      }
 catch (      Exception e) {
        if (failureCause == null) {
          failureCause=e;
        }
      }
    }
    public abstract void checkScopes(    Metric metric,    String metricName,    MetricGroup group);
  }
  /** 
 * Reporter that verifies the scope caching behavior.
 */
public static class TestReporter1 extends ScopeCheckingTestReporter {
    @Override public String filterCharacters(    String input){
      return FILTER_B.filterCharacters(input);
    }
    @Override public void checkScopes(    Metric metric,    String metricName,    MetricGroup group){
      assertEquals("A-B-C-D-1",group.getMetricIdentifier(metricName));
      assertEquals("A-B-C-D-1",group.getMetricIdentifier(metricName,FILTER_C));
      assertEquals("A-B-C-D-1",group.getMetricIdentifier(metricName,this));
      assertEquals("A-B-C-D-4",group.getMetricIdentifier(metricName,new CharacterFilter(){
        @Override public String filterCharacters(        String input){
          return input.replace("B","X").replace("1","4");
        }
      }
));
    }
  }
  /** 
 * Reporter that verifies the scope caching behavior.
 */
public static class TestReporter2 extends ScopeCheckingTestReporter {
    @Override public String filterCharacters(    String input){
      return FILTER_C.filterCharacters(input);
    }
    @Override public void checkScopes(    Metric metric,    String metricName,    MetricGroup group){
      assertEquals("A!B!X!D!1",group.getMetricIdentifier(metricName,this));
      assertEquals("A!B!X!D!1",group.getMetricIdentifier(metricName));
      assertEquals("A!B!X!D!1",group.getMetricIdentifier(metricName,FILTER_C));
      assertEquals("A!B!X!D!3",group.getMetricIdentifier(metricName,new CharacterFilter(){
        @Override public String filterCharacters(        String input){
          return input.replace("A","X").replace("1","3");
        }
      }
));
    }
  }
  /** 
 * Reporter that verifies the logical-scope caching behavior.
 */
public static final class LogicalScopeReporter1 extends ScopeCheckingTestReporter {
    @Override public String filterCharacters(    String input){
      return FILTER_B.filterCharacters(input);
    }
    @Override public void checkScopes(    Metric metric,    String metricName,    MetricGroup group){
      final String logicalScope=((FrontMetricGroup<AbstractMetricGroup<?>>)group).getLogicalScope(this,'-');
      assertEquals("taskmanager-X-C",logicalScope);
    }
  }
  /** 
 * Reporter that verifies the logical-scope caching behavior.
 */
public static final class LogicalScopeReporter2 extends ScopeCheckingTestReporter {
    @Override public String filterCharacters(    String input){
      return FILTER_C.filterCharacters(input);
    }
    @Override public void checkScopes(    Metric metric,    String metricName,    MetricGroup group){
      final String logicalScope=((FrontMetricGroup<AbstractMetricGroup<?>>)group).getLogicalScope(this,',');
      assertEquals("taskmanager,B,X",logicalScope);
    }
  }
  @Test public void testScopeGenerationWithoutReporters() throws Exception {
    Configuration config=new Configuration();
    config.setString(MetricOptions.SCOPE_NAMING_TM,"A.B.C.D");
    MetricRegistryImpl testRegistry=new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config));
    try {
      TaskManagerMetricGroup group=new TaskManagerMetricGroup(testRegistry,"host","id");
      assertEquals("MetricReporters list should be empty",0,testRegistry.getReporters().size());
      assertEquals("A.B.X.D.1",group.getMetricIdentifier("1",FILTER_C));
      assertEquals("A.X.C.D.1",group.getMetricIdentifier("1",FILTER_B));
      assertEquals("A.X.C.D.1",group.getMetricIdentifier("1",FILTER_B,-1));
      assertEquals("A.X.C.D.1",group.getMetricIdentifier("1",FILTER_B,2));
    }
  finally {
      testRegistry.shutdown().get();
    }
  }
}
