static class TestingFailingHAJobManager extends JobManager {
  private final Collection<JobID> recoveredJobs;
  public TestingFailingHAJobManager(  Configuration flinkConfiguration,  ScheduledExecutorService futureExecutor,  Executor ioExecutor,  InstanceManager instanceManager,  Scheduler scheduler,  BlobServer blobServer,  BlobLibraryCacheManager libraryCacheManager,  ActorRef archive,  RestartStrategyFactory restartStrategyFactory,  FiniteDuration timeout,  LeaderElectionService leaderElectionService,  SubmittedJobGraphStore submittedJobGraphs,  CheckpointRecoveryFactory checkpointRecoveryFactory,  FiniteDuration jobRecoveryTimeout,  JobManagerMetricGroup jobManagerMetricGroup,  Collection<JobID> recoveredJobs){
    super(flinkConfiguration,futureExecutor,ioExecutor,instanceManager,scheduler,blobServer,libraryCacheManager,archive,restartStrategyFactory,timeout,leaderElectionService,submittedJobGraphs,checkpointRecoveryFactory,jobRecoveryTimeout,jobManagerMetricGroup,Option.<String>empty());
    this.recoveredJobs=recoveredJobs;
  }
  @Override public PartialFunction<Object,BoxedUnit> handleMessage(){
    return ReceiveBuilder.match(JobManagerMessages.RecoverSubmittedJob.class,new FI.UnitApply<JobManagerMessages.RecoverSubmittedJob>(){
      @Override public void apply(      JobManagerMessages.RecoverSubmittedJob submitJob) throws Exception {
        recoveredJobs.add(submitJob.submittedJobGraph().getJobId());
      }
    }
).matchAny(new FI.UnitApply<Object>(){
      @Override public void apply(      Object o) throws Exception {
        TestingFailingHAJobManager.super.handleMessage().apply(o);
      }
    }
).build();
  }
}
