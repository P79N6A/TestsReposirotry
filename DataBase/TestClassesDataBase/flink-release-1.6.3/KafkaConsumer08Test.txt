/** 
 * Tests for the  {@link FlinkKafkaConsumer08}.
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(Kafka08PartitionDiscoverer.class) @PowerMockIgnore("javax.management.*") public class KafkaConsumer08Test {
  @Test public void testValidateZooKeeperConfig(){
    try {
      Properties emptyProperties=new Properties();
      try {
        FlinkKafkaConsumer08.validateZooKeeperConfig(emptyProperties);
        fail("should fail with an exception");
      }
 catch (      IllegalArgumentException e) {
      }
      Properties noConnect=new Properties();
      noConnect.put(ConsumerConfig.GROUP_ID_CONFIG,"flink-test-group");
      try {
        FlinkKafkaConsumer08.validateZooKeeperConfig(noConnect);
        fail("should fail with an exception");
      }
 catch (      IllegalArgumentException e) {
      }
      Properties noGroup=new Properties();
      noGroup.put("zookeeper.connect","localhost:47574");
      try {
        FlinkKafkaConsumer08.validateZooKeeperConfig(noGroup);
        fail("should fail with an exception");
      }
 catch (      IllegalArgumentException e) {
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testCreateSourceWithoutCluster(){
    try {
      Properties props=new Properties();
      props.setProperty("zookeeper.connect","localhost:56794");
      props.setProperty("bootstrap.servers","localhost:11111, localhost:22222");
      props.setProperty("group.id","non-existent-group");
      props.setProperty(FlinkKafkaConsumer08.GET_PARTITIONS_RETRIES_KEY,"1");
      FlinkKafkaConsumer08<String> consumer=new FlinkKafkaConsumer08<>(Collections.singletonList("no op topic"),new SimpleStringSchema(),props);
      StreamingRuntimeContext mockRuntimeContext=mock(StreamingRuntimeContext.class);
      Mockito.when(mockRuntimeContext.isCheckpointingEnabled()).thenReturn(true);
      consumer.setRuntimeContext(mockRuntimeContext);
      consumer.open(new Configuration());
      fail();
    }
 catch (    Exception e) {
      assertTrue(e.getMessage().contains("Unable to retrieve any partitions"));
    }
  }
  @Test public void testAllBoostrapServerHostsAreInvalid(){
    try {
      String unknownHost="foobar:11111";
      URL unknownHostURL=NetUtils.getCorrectHostnamePort(unknownHost);
      PowerMockito.mockStatic(InetAddress.class);
      when(InetAddress.getByName(Matchers.eq(unknownHostURL.getHost()))).thenThrow(new UnknownHostException("Test exception"));
      String zookeeperConnect="localhost:56794";
      String groupId="non-existent-group";
      Properties props=createKafkaProps(zookeeperConnect,unknownHost,groupId);
      FlinkKafkaConsumer08<String> consumer=new FlinkKafkaConsumer08<>(Collections.singletonList("no op topic"),new SimpleStringSchema(),props);
      StreamingRuntimeContext mockRuntimeContext=mock(StreamingRuntimeContext.class);
      Mockito.when(mockRuntimeContext.isCheckpointingEnabled()).thenReturn(true);
      consumer.setRuntimeContext(mockRuntimeContext);
      consumer.open(new Configuration());
      fail();
    }
 catch (    Exception expected) {
      assertTrue("Exception should be thrown containing 'all bootstrap servers invalid' message!",expected.getMessage().contains("All the servers provided in: '" + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid"));
    }
  }
  @Test public void testAtLeastOneBootstrapServerHostIsValid() throws Exception {
    try {
      String zookeeperConnect="localhost:56794";
      String unknownHost="foobar:11111";
      String bootstrapServers=unknownHost + ", localhost:22222";
      URL unknownHostURL=NetUtils.getCorrectHostnamePort(unknownHost);
      PowerMockito.mockStatic(InetAddress.class);
      when(InetAddress.getByName(Matchers.eq(unknownHostURL.getHost()))).thenThrow(new UnknownHostException("Test exception"));
      String groupId="non-existent-group";
      Properties props=createKafkaProps(zookeeperConnect,bootstrapServers,groupId);
      DummyFlinkKafkaConsumer consumer=new DummyFlinkKafkaConsumer("no op topic",new SimpleStringSchema(),props);
      consumer.open(new Configuration());
    }
 catch (    Exception e) {
      assertFalse("No exception should be thrown containing 'all bootstrap servers invalid' message!",e.getMessage().contains("All the servers provided in: '" + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid"));
    }
  }
  private Properties createKafkaProps(  String zookeeperConnect,  String bootstrapServers,  String groupId){
    Properties props=new Properties();
    props.setProperty("zookeeper.connect",zookeeperConnect);
    props.setProperty("bootstrap.servers",bootstrapServers);
    props.setProperty("group.id",groupId);
    props.setProperty("socket.timeout.ms","100");
    props.setProperty(FlinkKafkaConsumer08.GET_PARTITIONS_RETRIES_KEY,"1");
    return props;
  }
private static class DummyFlinkKafkaConsumer extends FlinkKafkaConsumer08<String> {
    private static final long serialVersionUID=-3939402845009972810L;
    public DummyFlinkKafkaConsumer(    String topic,    DeserializationSchema<String> schema,    Properties props){
      super(Collections.singletonList(topic),schema,props);
    }
    @Override public RuntimeContext getRuntimeContext(){
      RuntimeContext mockRuntimeContext=mock(RuntimeContext.class);
      when(mockRuntimeContext.getIndexOfThisSubtask()).thenReturn(0);
      when(mockRuntimeContext.getNumberOfParallelSubtasks()).thenReturn(1);
      return mockRuntimeContext;
    }
  }
}
