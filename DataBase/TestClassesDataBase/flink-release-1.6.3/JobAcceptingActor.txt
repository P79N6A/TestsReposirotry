public static class JobAcceptingActor extends FlinkUntypedActor {
  private final UUID leaderSessionID;
  private boolean jobAccepted=false;
  private ActorRef testFuture=ActorRef.noSender();
  public JobAcceptingActor(  UUID leaderSessionID){
    this.leaderSessionID=leaderSessionID;
  }
  @Override protected void handleMessage(  Object message) throws Exception {
    if (message instanceof SubmitJob) {
      getSender().tell(new JobSubmitSuccess(((SubmitJob)message).jobGraph().getJobID()),getSelf());
      jobAccepted=true;
      if (testFuture != ActorRef.noSender()) {
        testFuture.tell(Acknowledge.get(),getSelf());
      }
    }
 else     if (message instanceof RegisterJobClient) {
      getSender().tell(new RegisterJobClientSuccess(((RegisterJobClient)message).jobID()),getSelf());
      jobAccepted=true;
      if (testFuture != ActorRef.noSender()) {
        testFuture.tell(Acknowledge.get(),getSelf());
      }
    }
 else     if (message instanceof RequestBlobManagerPort$) {
      getSender().tell(1337,getSelf());
    }
 else     if (message instanceof RegisterTest) {
      testFuture=getSender();
      if (jobAccepted) {
        testFuture.tell(Acknowledge.get(),getSelf());
      }
    }
  }
  @Override protected UUID getLeaderSessionID(){
    return leaderSessionID;
  }
}
