/** 
 * Tests of  {@link SubtaskExecutionAttemptAccumulatorsHandler}.
 */
public class SubtaskExecutionAttemptAccumulatorsHandlerTest extends TestLogger {
  @Test public void testHandleRequest() throws Exception {
    final RestHandlerConfiguration restHandlerConfiguration=RestHandlerConfiguration.fromConfiguration(new Configuration());
    final SubtaskExecutionAttemptAccumulatorsHandler handler=new SubtaskExecutionAttemptAccumulatorsHandler(CompletableFuture.completedFuture("127.0.0.1:9527"),() -> null,Time.milliseconds(100L),Collections.emptyMap(),SubtaskExecutionAttemptAccumulatorsHeaders.getInstance(),new ExecutionGraphCache(restHandlerConfiguration.getTimeout(),Time.milliseconds(restHandlerConfiguration.getRefreshInterval())),TestingUtils.defaultExecutor());
    final HandlerRequest<EmptyRequestBody,SubtaskAttemptMessageParameters> request=new HandlerRequest<>(EmptyRequestBody.getInstance(),new SubtaskAttemptMessageParameters());
    final Map<String,OptionalFailure<Accumulator<?,?>>> userAccumulators=new HashMap<>(3);
    userAccumulators.put("IntCounter",OptionalFailure.of(new IntCounter(10)));
    userAccumulators.put("LongCounter",OptionalFailure.of(new LongCounter(100L)));
    userAccumulators.put("Failure",OptionalFailure.ofFailure(new FlinkRuntimeException("Test")));
    final StringifiedAccumulatorResult[] accumulatorResults=StringifiedAccumulatorResult.stringifyAccumulatorResults(userAccumulators);
    final int attemptNum=1;
    final int subtaskIndex=2;
    final ArchivedExecution execution=new ArchivedExecution(accumulatorResults,null,new ExecutionAttemptID(),attemptNum,ExecutionState.FINISHED,null,null,null,subtaskIndex,new long[ExecutionState.values().length]);
    final SubtaskExecutionAttemptAccumulatorsInfo accumulatorsInfo=handler.handleRequest(request,execution);
    final ArrayList<UserAccumulator> userAccumulatorList=new ArrayList<>(userAccumulators.size());
    for (    StringifiedAccumulatorResult accumulatorResult : accumulatorResults) {
      userAccumulatorList.add(new UserAccumulator(accumulatorResult.getName(),accumulatorResult.getType(),accumulatorResult.getValue()));
    }
    final SubtaskExecutionAttemptAccumulatorsInfo expected=new SubtaskExecutionAttemptAccumulatorsInfo(subtaskIndex,attemptNum,execution.getAttemptId().toString(),userAccumulatorList);
    assertEquals(expected,accumulatorsInfo);
  }
}
