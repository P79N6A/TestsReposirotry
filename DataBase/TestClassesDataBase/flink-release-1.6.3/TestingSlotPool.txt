private static final class TestingSlotPool extends SlotPool {
  public TestingSlotPool(  RpcService rpcService,  JobID jobId,  SchedulingStrategy schedulingStrategy){
    super(rpcService,jobId,schedulingStrategy);
  }
  CompletableFuture<Integer> getNumberOfAvailableSlots(){
    return callAsync(() -> getAvailableSlots().size(),TestingUtils.infiniteTime());
  }
  CompletableFuture<Integer> getNumberOfSharedSlots(  SlotSharingGroupId slotSharingGroupId){
    return callAsync(() -> {
      final SlotSharingManager multiTaskSlotManager=slotSharingManagers.get(slotSharingGroupId);
      if (multiTaskSlotManager != null) {
        return multiTaskSlotManager.getResolvedRootSlots().size();
      }
 else {
        throw new FlinkException("No MultiTaskSlotManager registered under " + slotSharingGroupId + '.');
      }
    }
,TestingUtils.infiniteTime());
  }
  CompletableFuture<Integer> getNumberOfAvailableSlotsForGroup(  SlotSharingGroupId slotSharingGroupId,  JobVertexID jobVertexId){
    return callAsync(() -> {
      final SlotSharingManager multiTaskSlotManager=slotSharingManagers.get(slotSharingGroupId);
      if (multiTaskSlotManager != null) {
        int availableSlots=0;
        for (        SlotSharingManager.MultiTaskSlot multiTaskSlot : multiTaskSlotManager.getResolvedRootSlots()) {
          if (!multiTaskSlot.contains(jobVertexId)) {
            availableSlots++;
          }
        }
        return availableSlots;
      }
 else {
        throw new FlinkException("No MultiTaskSlotmanager registered under " + slotSharingGroupId + '.');
      }
    }
,TestingUtils.infiniteTime());
  }
}
