/** 
 * Tests for the "info" command.
 */
public class CliFrontendInfoTest extends CliFrontendTestBase {
  private static PrintStream stdOut;
  private static PrintStream capture;
  private static ByteArrayOutputStream buffer;
  @Test(expected=CliArgsException.class) public void testMissingOption() throws Exception {
    String[] parameters={};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  @Test(expected=CliArgsException.class) public void testUnrecognizedOption() throws Exception {
    String[] parameters={"-v","-l"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  @Test public void testShowExecutionPlan() throws Exception {
    replaceStdOut();
    try {
      String[] parameters=new String[]{CliFrontendTestUtils.getTestJarPath(),"-f","true"};
      Configuration configuration=getConfiguration();
      CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
      testFrontend.info(parameters);
      assertTrue(buffer.toString().contains("\"parallelism\": \"1\""));
    }
  finally {
      restoreStdOut();
    }
  }
  @Test public void testShowExecutionPlanWithParallelism(){
    replaceStdOut();
    try {
      String[] parameters={"-p","17",CliFrontendTestUtils.getTestJarPath()};
      Configuration configuration=getConfiguration();
      CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
      testFrontend.info(parameters);
      assertTrue(buffer.toString().contains("\"parallelism\": \"17\""));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Program caused an exception: " + e.getMessage());
    }
 finally {
      restoreStdOut();
    }
  }
  private static void replaceStdOut(){
    stdOut=System.out;
    buffer=new ByteArrayOutputStream();
    capture=new PrintStream(buffer);
    System.setOut(capture);
  }
  private static void restoreStdOut(){
    System.setOut(stdOut);
  }
}
