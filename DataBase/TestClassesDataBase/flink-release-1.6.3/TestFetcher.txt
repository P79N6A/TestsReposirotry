private static final class TestFetcher<T> extends AbstractFetcher<T,Object> {
  Optional<Map<KafkaTopicPartition,Long>> lastCommittedOffsets=Optional.empty();
  private final OneShotLatch fetchLoopWaitLatch;
  private final OneShotLatch stateIterationBlockLatch;
  TestFetcher(  SourceContext<T> sourceContext,  Map<KafkaTopicPartition,Long> assignedPartitionsWithStartOffsets,  SerializedValue<AssignerWithPeriodicWatermarks<T>> watermarksPeriodic,  SerializedValue<AssignerWithPunctuatedWatermarks<T>> watermarksPunctuated,  ProcessingTimeService processingTimeProvider,  long autoWatermarkInterval) throws Exception {
    this(sourceContext,assignedPartitionsWithStartOffsets,watermarksPeriodic,watermarksPunctuated,processingTimeProvider,autoWatermarkInterval,null,null);
  }
  TestFetcher(  SourceContext<T> sourceContext,  Map<KafkaTopicPartition,Long> assignedPartitionsWithStartOffsets,  SerializedValue<AssignerWithPeriodicWatermarks<T>> watermarksPeriodic,  SerializedValue<AssignerWithPunctuatedWatermarks<T>> watermarksPunctuated,  ProcessingTimeService processingTimeProvider,  long autoWatermarkInterval,  OneShotLatch fetchLoopWaitLatch,  OneShotLatch stateIterationBlockLatch) throws Exception {
    super(sourceContext,assignedPartitionsWithStartOffsets,watermarksPeriodic,watermarksPunctuated,processingTimeProvider,autoWatermarkInterval,TestFetcher.class.getClassLoader(),new UnregisteredMetricsGroup(),false);
    this.fetchLoopWaitLatch=fetchLoopWaitLatch;
    this.stateIterationBlockLatch=stateIterationBlockLatch;
  }
  /** 
 * Emulation of partition's iteration which is required for {@link AbstractFetcherTest#testConcurrentPartitionsDiscoveryAndLoopFetching}.
 */
  @Override public void runFetchLoop() throws Exception {
    if (fetchLoopWaitLatch != null) {
      for (      KafkaTopicPartitionState ignored : subscribedPartitionStates()) {
        fetchLoopWaitLatch.trigger();
        stateIterationBlockLatch.await();
      }
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  @Override public void cancel(){
    throw new UnsupportedOperationException();
  }
  @Override public Object createKafkaPartitionHandle(  KafkaTopicPartition partition){
    return new Object();
  }
  @Override protected void doCommitInternalOffsetsToKafka(  Map<KafkaTopicPartition,Long> offsets,  @Nonnull KafkaCommitCallback callback) throws Exception {
    lastCommittedOffsets=Optional.of(offsets);
    callback.onSuccess();
  }
  public Optional<Map<KafkaTopicPartition,Long>> getLastCommittedOffsets(){
    return lastCommittedOffsets;
  }
}
