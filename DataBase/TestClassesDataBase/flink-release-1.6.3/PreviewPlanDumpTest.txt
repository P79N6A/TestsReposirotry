/** 
 * The tests in this class simply invokes the JSON dump code for the original plan.
 */
public class PreviewPlanDumpTest extends CompilerTestBase {
  @Test public void dumpWordCount(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      WordCount.main(new String[]{"--input",IN_FILE,"--output",OUT_FILE});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("WordCount failed with an exception");
    }
    dump(env.getPlan());
  }
  @Test public void dumpTPCH3(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      TPCHQuery3.main(new String[]{"--lineitem",IN_FILE,"--customer",IN_FILE,"--orders",OUT_FILE,"--output","123"});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("TPCH3 failed with an exception");
    }
    dump(env.getPlan());
  }
  @Test public void dumpIterativeKMeans(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      KMeans.main(new String[]{"--points ",IN_FILE,"--centroids ",IN_FILE,"--output ",OUT_FILE,"--iterations","123"});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("KMeans failed with an exception");
    }
    dump(env.getPlan());
  }
  @Test public void dumpWebLogAnalysis(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      org.apache.flink.examples.java.relational.WebLogAnalysis.main(new String[]{"--documents",IN_FILE,"--ranks",IN_FILE,"--visits",OUT_FILE,"--output","123"});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("WebLogAnalysis failed with an exception");
    }
    dump(env.getPlan());
  }
  @Test public void dumpBulkIterationKMeans(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      ConnectedComponents.main(new String[]{"--vertices",IN_FILE,"--edges",IN_FILE,"--output",OUT_FILE,"--iterations","123"});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("ConnectedComponents failed with an exception");
    }
    dump(env.getPlan());
  }
  @Test public void dumpPageRank(){
    PreviewPlanEnvironment env=new PreviewPlanEnvironment();
    env.setAsContext();
    try {
      PageRank.main(new String[]{"--pages",IN_FILE,"--links",IN_FILE,"--output",OUT_FILE,"--numPages","10","--iterations","123"});
    }
 catch (    OptimizerPlanEnvironment.ProgramAbortException pae) {
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("PageRank failed with an exception");
    }
    dump(env.getPlan());
  }
  private void dump(  Plan p){
    try {
      List<DataSinkNode> sinks=Optimizer.createPreOptimizedPlan(p);
      PlanJSONDumpGenerator dumper=new PlanJSONDumpGenerator();
      String json=dumper.getPactPlanAsJSON(sinks);
      try (JsonParser parser=new JsonFactory().createParser(json)){
        while (parser.nextToken() != null) {
        }
      }
     }
 catch (    JsonParseException e) {
      e.printStackTrace();
      Assert.fail("JSON Generator produced malformatted output: " + e.getMessage());
    }
catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("An error occurred in the test: " + e.getMessage());
    }
  }
}
