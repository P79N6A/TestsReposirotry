private static class BlockingSubmittedJobGraphStore implements SubmittedJobGraphStore {
  @Nonnull private final SubmittedJobGraph submittedJobGraph;
  @Nonnull private final OneShotLatch enterGetJobIdsLatch;
  @Nonnull private final OneShotLatch proceedGetJobIdsLatch;
  private boolean isStarted=false;
  private BlockingSubmittedJobGraphStore(  @Nonnull SubmittedJobGraph submittedJobGraph,  @Nonnull OneShotLatch enterGetJobIdsLatch,  @Nonnull OneShotLatch proceedGetJobIdsLatch){
    this.submittedJobGraph=submittedJobGraph;
    this.enterGetJobIdsLatch=enterGetJobIdsLatch;
    this.proceedGetJobIdsLatch=proceedGetJobIdsLatch;
  }
  @Override public void start(  SubmittedJobGraphListener jobGraphListener) throws Exception {
    isStarted=true;
  }
  @Override public void stop() throws Exception {
    isStarted=false;
  }
  @Nullable @Override public SubmittedJobGraph recoverJobGraph(  JobID jobId) throws Exception {
    Preconditions.checkArgument(jobId.equals(submittedJobGraph.getJobId()));
    return submittedJobGraph;
  }
  @Override public void putJobGraph(  SubmittedJobGraph jobGraph) throws Exception {
    throw new UnsupportedOperationException("Should not be called.");
  }
  @Override public void removeJobGraph(  JobID jobId) throws Exception {
    throw new UnsupportedOperationException("Should not be called.");
  }
  @Override public void releaseJobGraph(  JobID jobId) throws Exception {
  }
  @Override public Collection<JobID> getJobIds() throws Exception {
    enterGetJobIdsLatch.trigger();
    proceedGetJobIdsLatch.await();
    return Collections.singleton(submittedJobGraph.getJobId());
  }
}
