/** 
 * Tests for  {@link AbstractDeserializationSchema}.
 */
@SuppressWarnings("serial") public class AbstractDeserializationSchemaTest {
  @Test public void testTypeExtractionTuple(){
    TypeInformation<Tuple2<byte[],byte[]>> type=new TupleSchema().getProducedType();
    TypeInformation<Tuple2<byte[],byte[]>> expected=TypeInformation.of(new TypeHint<Tuple2<byte[],byte[]>>(){
    }
);
    assertEquals(expected,type);
  }
  @Test public void testTypeExtractionTupleAnonymous(){
    TypeInformation<Tuple2<byte[],byte[]>> type=new AbstractDeserializationSchema<Tuple2<byte[],byte[]>>(){
      @Override public Tuple2<byte[],byte[]> deserialize(      byte[] message) throws IOException {
        throw new UnsupportedOperationException();
      }
    }
.getProducedType();
    TypeInformation<Tuple2<byte[],byte[]>> expected=TypeInformation.of(new TypeHint<Tuple2<byte[],byte[]>>(){
    }
);
    assertEquals(expected,type);
  }
  @Test public void testTypeExtractionGeneric(){
    TypeInformation<JSONPObject> type=new JsonSchema().getProducedType();
    TypeInformation<JSONPObject> expected=TypeInformation.of(new TypeHint<JSONPObject>(){
    }
);
    assertEquals(expected,type);
  }
  @Test public void testTypeExtractionGenericAnonymous(){
    TypeInformation<JSONPObject> type=new AbstractDeserializationSchema<JSONPObject>(){
      @Override public JSONPObject deserialize(      byte[] message) throws IOException {
        throw new UnsupportedOperationException();
      }
    }
.getProducedType();
    TypeInformation<JSONPObject> expected=TypeInformation.of(new TypeHint<JSONPObject>(){
    }
);
    assertEquals(expected,type);
  }
  @Test public void testTypeExtractionRawException(){
    try {
      new RawSchema();
      fail();
    }
 catch (    FlinkRuntimeException e) {
    }
  }
  @Test public void testTypeExtractionGenericException(){
    try {
      new GenericSchema<>();
      fail();
    }
 catch (    FlinkRuntimeException e) {
    }
  }
  @Test public void testIndirectGenericExtension(){
    TypeInformation<String> type=new IndirectExtension().getProducedType();
    assertEquals(BasicTypeInfo.STRING_TYPE_INFO,type);
  }
private static class TupleSchema extends AbstractDeserializationSchema<Tuple2<byte[],byte[]>> {
    @Override public Tuple2<byte[],byte[]> deserialize(    byte[] message) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
private static class JsonSchema extends AbstractDeserializationSchema<JSONPObject> {
    @Override public JSONPObject deserialize(    byte[] message) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
@SuppressWarnings("rawtypes") private static class RawSchema extends AbstractDeserializationSchema {
    @Override public Object deserialize(    byte[] message) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
private static class GenericSchema<T> extends AbstractDeserializationSchema<T> {
    @Override public T deserialize(    byte[] message) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
private static class IndirectExtension extends GenericSchema<String> {
    @Override public String deserialize(    byte[] message) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
}
