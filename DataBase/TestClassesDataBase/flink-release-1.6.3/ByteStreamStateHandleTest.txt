/** 
 * Tests for the  {@link ByteStreamStateHandle}.
 */
public class ByteStreamStateHandleTest {
  @Test public void testStreamSeekAndPos() throws IOException {
    final byte[] data={34,25,22,66,88,54};
    final ByteStreamStateHandle handle=new ByteStreamStateHandle("name",data);
    for (int i=data.length; i >= 0; i--) {
      FSDataInputStream in=handle.openInputStream();
      in.seek(i);
      assertEquals(i,(int)in.getPos());
      if (i < data.length) {
        assertEquals((int)data[i],in.read());
        assertEquals(i + 1,(int)in.getPos());
      }
 else {
        assertEquals(-1,in.read());
        assertEquals(i,(int)in.getPos());
      }
    }
    FSDataInputStream in=handle.openInputStream();
    in.seek(data.length);
    assertEquals(-1,in.read());
    assertEquals(-1,in.read());
    assertEquals(-1,in.read());
    assertEquals(data.length,(int)in.getPos());
  }
  @Test public void testStreamSeekOutOfBounds() throws IOException {
    final int len=10;
    final ByteStreamStateHandle handle=new ByteStreamStateHandle("name",new byte[len]);
    FSDataInputStream in=handle.openInputStream();
    try {
      in.seek(-2);
      fail("should fail with an exception");
    }
 catch (    IOException e) {
    }
    in=handle.openInputStream();
    try {
      in.seek(len + 1);
      fail("should fail with an exception");
    }
 catch (    IOException e) {
    }
    in=handle.openInputStream();
    try {
      in.seek(((long)Integer.MAX_VALUE) + 100L);
      fail("should fail with an exception");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testBulkRead() throws IOException {
    final byte[] data={34,25,22,66};
    final ByteStreamStateHandle handle=new ByteStreamStateHandle("name",data);
    final int targetLen=8;
    for (int start=0; start < data.length; start++) {
      for (int num=0; num < targetLen; num++) {
        FSDataInputStream in=handle.openInputStream();
        in.seek(start);
        final byte[] target=new byte[targetLen];
        final int read=in.read(target,targetLen - num,num);
        assertEquals(Math.min(num,data.length - start),read);
        for (int i=0; i < read; i++) {
          assertEquals(data[start + i],target[targetLen - num + i]);
        }
        int newPos=start + read;
        assertEquals(newPos,(int)in.getPos());
        assertEquals(newPos < data.length ? data[newPos] : -1,in.read());
      }
    }
  }
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void testBulkReadINdexOutOfBounds() throws IOException {
    final ByteStreamStateHandle handle=new ByteStreamStateHandle("name",new byte[10]);
    FSDataInputStream in=handle.openInputStream();
    try {
      in.read(new byte[10],-1,5);
      fail("should fail with an exception");
    }
 catch (    IndexOutOfBoundsException e) {
    }
    in=handle.openInputStream();
    try {
      in.read(new byte[10],10,5);
      fail("should fail with an exception");
    }
 catch (    IndexOutOfBoundsException e) {
    }
    in=handle.openInputStream();
    try {
      in.read(new byte[10],0,-2);
      fail("should fail with an exception");
    }
 catch (    IndexOutOfBoundsException e) {
    }
    in=handle.openInputStream();
    try {
      in.read(new byte[10],5,6);
      fail("should fail with an exception");
    }
 catch (    IndexOutOfBoundsException e) {
    }
    in=handle.openInputStream();
    try {
      in.read(new byte[10],5,Integer.MAX_VALUE);
      fail("should fail with an exception");
    }
 catch (    IndexOutOfBoundsException e) {
    }
  }
}
