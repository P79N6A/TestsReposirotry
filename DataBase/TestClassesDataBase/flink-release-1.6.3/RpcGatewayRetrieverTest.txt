/** 
 * Tests for the  {@link RpcGatewayRetriever}.
 */
public class RpcGatewayRetrieverTest extends TestLogger {
  private static final Time TIMEOUT=Time.seconds(10L);
  private static TestingRpcService rpcService;
  @BeforeClass public static void setup(){
    rpcService=new TestingRpcService();
  }
  @AfterClass public static void teardown() throws InterruptedException, ExecutionException, TimeoutException {
    if (rpcService != null) {
      RpcUtils.terminateRpcService(rpcService,TIMEOUT);
      rpcService=null;
    }
  }
  /** 
 * Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.
 */
  @Test public void testRpcGatewayRetrieval() throws Exception {
    final String expectedValue="foobar";
    final String expectedValue2="barfoo";
    final UUID leaderSessionId=UUID.randomUUID();
    RpcGatewayRetriever<UUID,DummyGateway> gatewayRetriever=new RpcGatewayRetriever<>(rpcService,DummyGateway.class,Function.identity(),0,Time.milliseconds(0L));
    SettableLeaderRetrievalService settableLeaderRetrievalService=new SettableLeaderRetrievalService();
    DummyRpcEndpoint dummyRpcEndpoint=new DummyRpcEndpoint(rpcService,"dummyRpcEndpoint1",expectedValue);
    DummyRpcEndpoint dummyRpcEndpoint2=new DummyRpcEndpoint(rpcService,"dummyRpcEndpoint2",expectedValue2);
    rpcService.registerGateway(dummyRpcEndpoint.getAddress(),dummyRpcEndpoint.getSelfGateway(DummyGateway.class));
    rpcService.registerGateway(dummyRpcEndpoint2.getAddress(),dummyRpcEndpoint2.getSelfGateway(DummyGateway.class));
    try {
      dummyRpcEndpoint.start();
      dummyRpcEndpoint2.start();
      settableLeaderRetrievalService.start(gatewayRetriever);
      final CompletableFuture<DummyGateway> gatewayFuture=gatewayRetriever.getFuture();
      assertFalse(gatewayFuture.isDone());
      settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(),leaderSessionId);
      final DummyGateway dummyGateway=gatewayFuture.get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
      assertEquals(dummyRpcEndpoint.getAddress(),dummyGateway.getAddress());
      assertEquals(expectedValue,dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS));
      settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(),leaderSessionId);
      final CompletableFuture<DummyGateway> gatewayFuture2=gatewayRetriever.getFuture();
      final DummyGateway dummyGateway2=gatewayFuture2.get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
      assertEquals(dummyRpcEndpoint2.getAddress(),dummyGateway2.getAddress());
      assertEquals(expectedValue2,dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS));
    }
  finally {
      dummyRpcEndpoint.shutDown();
      dummyRpcEndpoint2.shutDown();
      dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
      dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
    }
  }
  /** 
 * Testing RpcGateway.
 */
public interface DummyGateway extends FencedRpcGateway<UUID> {
    CompletableFuture<String> foobar(    @RpcTimeout Time timeout);
  }
static class DummyRpcEndpoint extends RpcEndpoint implements DummyGateway {
    private final String value;
    protected DummyRpcEndpoint(    RpcService rpcService,    String endpointId,    String value){
      super(rpcService,endpointId);
      this.value=value;
    }
    @Override public CompletableFuture<String> foobar(    Time timeout){
      return CompletableFuture.completedFuture(value);
    }
    @Override public UUID getFencingToken(){
      return HighAvailabilityServices.DEFAULT_LEADER_ID;
    }
    @Override public CompletableFuture<Void> postStop(){
      return CompletableFuture.completedFuture(null);
    }
  }
}
