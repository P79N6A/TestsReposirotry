/** 
 * Common entry-point for accessing generated ArchivedExecution* components.
 */
public class ArchivedJobGenerationUtils {
  public static final ObjectMapper MAPPER=new ObjectMapper();
  public static final JsonFactory JACKSON_FACTORY=new JsonFactory().enable(JsonGenerator.Feature.AUTO_CLOSE_TARGET).disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
  private static ArchivedExecutionGraph originalJob;
  private static ArchivedExecutionJobVertex originalTask;
  private static ArchivedExecutionVertex originalSubtask;
  private static ArchivedExecution originalAttempt;
  private static final Object lock=new Object();
  private ArchivedJobGenerationUtils(){
  }
  public static AccessExecutionGraph getTestJob() throws Exception {
synchronized (lock) {
      if (originalJob == null) {
        generateArchivedJob();
      }
    }
    return originalJob;
  }
  public static AccessExecutionJobVertex getTestTask() throws Exception {
synchronized (lock) {
      if (originalJob == null) {
        generateArchivedJob();
      }
    }
    return originalTask;
  }
  public static AccessExecutionVertex getTestSubtask() throws Exception {
synchronized (lock) {
      if (originalJob == null) {
        generateArchivedJob();
      }
    }
    return originalSubtask;
  }
  public static AccessExecution getTestAttempt() throws Exception {
synchronized (lock) {
      if (originalJob == null) {
        generateArchivedJob();
      }
    }
    return originalAttempt;
  }
  private static void generateArchivedJob() throws Exception {
    StringifiedAccumulatorResult acc1=new StringifiedAccumulatorResult("name1","type1","value1");
    StringifiedAccumulatorResult acc2=new StringifiedAccumulatorResult("name2","type2","value2");
    TaskManagerLocation location=new TaskManagerLocation(new ResourceID("hello"),InetAddress.getLocalHost(),1234);
    AllocationID allocationID=new AllocationID(42L,43L);
    originalAttempt=new ArchivedExecutionBuilder().setStateTimestamps(new long[]{1,2,3,4,5,6,7,8,9}).setParallelSubtaskIndex(1).setAttemptNumber(0).setAssignedResourceLocation(location).setAssignedAllocationID(allocationID).setUserAccumulators(new StringifiedAccumulatorResult[]{acc1,acc2}).setState(ExecutionState.FINISHED).setFailureCause("attemptException").build();
    originalSubtask=new ArchivedExecutionVertexBuilder().setSubtaskIndex(originalAttempt.getParallelSubtaskIndex()).setTaskNameWithSubtask("hello(1/1)").setCurrentExecution(originalAttempt).build();
    originalTask=new ArchivedExecutionJobVertexBuilder().setTaskVertices(new ArchivedExecutionVertex[]{originalSubtask}).build();
    Map<JobVertexID,ArchivedExecutionJobVertex> tasks=new HashMap<>();
    tasks.put(originalTask.getJobVertexId(),originalTask);
    originalJob=new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setTasks(tasks).setFailureCause(new ErrorInfo(new Exception("jobException"),originalAttempt.getStateTimestamp(ExecutionState.FAILED))).setState(JobStatus.FINISHED).setStateTimestamps(new long[]{1,2,3,4,5,6,7,8,9,10,11}).setArchivedUserAccumulators(new StringifiedAccumulatorResult[]{acc1,acc2}).build();
  }
  public static void compareStringifiedAccumulators(  StringifiedAccumulatorResult[] expectedAccs,  ArrayNode writtenAccs){
    assertEquals(expectedAccs.length,writtenAccs.size());
    for (int x=0; x < expectedAccs.length; x++) {
      JsonNode acc=writtenAccs.get(x);
      assertEquals(expectedAccs[x].getName(),acc.get("name").asText());
      assertEquals(expectedAccs[x].getType(),acc.get("type").asText());
      assertEquals(expectedAccs[x].getValue(),acc.get("value").asText());
    }
  }
  public static void compareIoMetrics(  IOMetrics expectedMetrics,  JsonNode writtenMetrics){
    assertEquals(expectedMetrics.getNumBytesInTotal(),writtenMetrics.get("read-bytes").asLong());
    assertEquals(expectedMetrics.getNumBytesOut(),writtenMetrics.get("write-bytes").asLong());
    assertEquals(expectedMetrics.getNumRecordsIn(),writtenMetrics.get("read-records").asLong());
    assertEquals(expectedMetrics.getNumRecordsOut(),writtenMetrics.get("write-records").asLong());
  }
}
