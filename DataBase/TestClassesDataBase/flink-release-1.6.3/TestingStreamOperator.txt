private static class TestingStreamOperator<IN,OUT> extends AbstractStreamOperator<OUT> implements OneInputStreamOperator<IN,OUT> {
  private static final long serialVersionUID=774614855940397174L;
  public static int numberRestoreCalls=0;
  public static int numberSnapshotCalls=0;
  @Override public void snapshotState(  StateSnapshotContext context) throws Exception {
    ListState<Integer> partitionableState=getOperatorStateBackend().getListState(TEST_DESCRIPTOR);
    partitionableState.clear();
    partitionableState.add(42);
    partitionableState.add(4711);
    ++numberSnapshotCalls;
  }
  @Override public void initializeState(  StateInitializationContext context) throws Exception {
    if (context.isRestored()) {
      ++numberRestoreCalls;
    }
    ListState<Integer> partitionableState=context.getOperatorStateStore().getListState(TEST_DESCRIPTOR);
    if (numberSnapshotCalls == 0) {
      for (      Integer v : partitionableState.get()) {
        fail();
      }
    }
 else {
      Set<Integer> result=new HashSet<>();
      for (      Integer v : partitionableState.get()) {
        result.add(v);
      }
      assertEquals(2,result.size());
      assertTrue(result.contains(42));
      assertTrue(result.contains(4711));
    }
  }
  @Override public void processElement(  StreamRecord<IN> element) throws Exception {
  }
}
