/** 
 * Test for  {@link PageRankBasic}.
 */
@RunWith(Parameterized.class) public class PageRankITCase extends MultipleProgramsTestBase {
  public PageRankITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String verticesPath;
  private String edgesPath;
  private String resultPath;
  private String expected;
  @Rule public TemporaryFolder tempFolder=new TemporaryFolder();
  @Before public void before() throws Exception {
    File resultFile=tempFolder.newFile();
    resultFile.delete();
    resultPath=resultFile.toURI().toString();
    File verticesFile=tempFolder.newFile();
    FileUtils.writeFileUtf8(verticesFile,PageRankData.VERTICES);
    File edgesFile=tempFolder.newFile();
    FileUtils.writeFileUtf8(edgesFile,PageRankData.EDGES);
    verticesPath=verticesFile.toURI().toString();
    edgesPath=edgesFile.toURI().toString();
  }
  @After public void after() throws Exception {
    compareKeyValuePairsWithDelta(expected,resultPath," ",0.01);
  }
  @Test public void testPageRankWithSmallNumberOfIterations() throws Exception {
    PageRankBasic.main(new String[]{"--pages",verticesPath,"--links",edgesPath,"--output",resultPath,"--numPages",PageRankData.NUM_VERTICES + "","--iterations","3"});
    expected=PageRankData.RANKS_AFTER_3_ITERATIONS;
  }
  @Test public void testPageRankWithConvergence() throws Exception {
    PageRankBasic.main(new String[]{"--pages",verticesPath,"--links",edgesPath,"--output",resultPath,"--numPages",PageRankData.NUM_VERTICES + "","--iterations","1000"});
    expected=PageRankData.RANKS_AFTER_EPSILON_0_0001_CONVERGENCE;
  }
}
