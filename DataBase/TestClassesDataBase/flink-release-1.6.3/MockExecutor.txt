private static class MockExecutor implements Executor {
  public boolean failExecution;
  public SessionContext receivedContext;
  public String receivedStatement;
  @Override public void start() throws SqlExecutionException {
  }
  @Override public Map<String,String> getSessionProperties(  SessionContext session) throws SqlExecutionException {
    return null;
  }
  @Override public List<String> listTables(  SessionContext session) throws SqlExecutionException {
    return null;
  }
  @Override public List<String> listUserDefinedFunctions(  SessionContext session) throws SqlExecutionException {
    return null;
  }
  @Override public TableSchema getTableSchema(  SessionContext session,  String name) throws SqlExecutionException {
    return null;
  }
  @Override public String explainStatement(  SessionContext session,  String statement) throws SqlExecutionException {
    return null;
  }
  @Override public ResultDescriptor executeQuery(  SessionContext session,  String query) throws SqlExecutionException {
    return null;
  }
  @Override public TypedResult<List<Tuple2<Boolean,Row>>> retrieveResultChanges(  SessionContext session,  String resultId) throws SqlExecutionException {
    return null;
  }
  @Override public TypedResult<Integer> snapshotResult(  SessionContext session,  String resultId,  int pageSize) throws SqlExecutionException {
    return null;
  }
  @Override public List<Row> retrieveResultPage(  String resultId,  int page) throws SqlExecutionException {
    return null;
  }
  @Override public void cancelQuery(  SessionContext session,  String resultId) throws SqlExecutionException {
  }
  @Override public ProgramTargetDescriptor executeUpdate(  SessionContext session,  String statement) throws SqlExecutionException {
    receivedContext=session;
    receivedStatement=statement;
    if (failExecution) {
      throw new SqlExecutionException("Fail execution.");
    }
    return new ProgramTargetDescriptor("testClusterId","testJobId","http://testcluster:1234");
  }
  @Override public void stop(  SessionContext session){
  }
}
