/** 
 * Integration tests for the Swift file system support.
 */
public class HadoopSwiftFileSystemITCase extends TestLogger {
  private static final String SERVICENAME="privatecloud";
  private static final String CONTAINER=System.getenv("ARTIFACTS_OS_CONTAINER");
  private static final String TEST_DATA_DIR="tests-" + UUID.randomUUID();
  private static final String AUTH_URL=System.getenv("ARTIFACTS_OS_AUTH_URL");
  private static final String USERNAME=System.getenv("ARTIFACTS_OS_USERNAME");
  private static final String PASSWORD=System.getenv("ARTIFACTS_OS_PASSWORD");
  private static final String TENANT=System.getenv("ARTIFACTS_OS_TENANT");
  private static final String REGION=System.getenv("ARTIFACTS_OS_REGION");
  /** 
 * Will be updated by  {@link #checkCredentialsAndSetup()} if the test is not skipped.
 */
  private static boolean skipTest=true;
  @BeforeClass public static void checkCredentialsAndSetup() throws IOException {
    Assume.assumeTrue("Swift container not configured, skipping test...",CONTAINER != null);
    Assume.assumeTrue("Swift username not configured, skipping test...",USERNAME != null);
    Assume.assumeTrue("Swift password not configured, skipping test...",PASSWORD != null);
    Assume.assumeTrue("Swift tenant not configured, skipping test...",TENANT != null);
    Assume.assumeTrue("Swift region not configured, skipping test...",REGION != null);
    final Configuration conf=createConfiguration();
    FileSystem.initialize(conf);
    final Path directory=new Path("swift://" + CONTAINER + '.'+ SERVICENAME+ '/'+ TEST_DATA_DIR);
    final FileSystem fs=directory.getFileSystem();
    assertFalse(fs.exists(directory));
    FileSystem.initialize(new Configuration());
    skipTest=false;
  }
  @AfterClass public static void cleanUp() throws IOException {
    if (!skipTest) {
      final Configuration conf=createConfiguration();
      FileSystem.initialize(conf);
      final Path directory=new Path("swift://" + CONTAINER + '.'+ SERVICENAME+ '/'+ TEST_DATA_DIR);
      final FileSystem fs=directory.getFileSystem();
      fs.delete(directory,true);
      assertFalse(fs.exists(directory));
      FileSystem.initialize(new Configuration());
    }
  }
  @Test public void testSimpleFileWriteAndRead() throws Exception {
    final Configuration conf=createConfiguration();
    final String testLine="Hello Upload!";
    FileSystem.initialize(conf);
    final Path path=new Path("swift://" + CONTAINER + '.'+ SERVICENAME+ '/'+ TEST_DATA_DIR+ "/test.txt");
    final FileSystem fs=path.getFileSystem();
    try {
      try (FSDataOutputStream out=fs.create(path,WriteMode.OVERWRITE);OutputStreamWriter writer=new OutputStreamWriter(out,StandardCharsets.UTF_8)){
        writer.write(testLine);
      }
       try (FSDataInputStream in=fs.open(path);InputStreamReader ir=new InputStreamReader(in,StandardCharsets.UTF_8);BufferedReader reader=new BufferedReader(ir)){
        String line=reader.readLine();
        assertEquals(testLine,line);
      }
     }
  finally {
      fs.delete(path,false);
    }
  }
  @Test public void testDirectoryListing() throws Exception {
    final Configuration conf=createConfiguration();
    FileSystem.initialize(conf);
    final Path directory=new Path("swift://" + CONTAINER + '.'+ SERVICENAME+ '/'+ TEST_DATA_DIR+ "/testdir/");
    final FileSystem fs=directory.getFileSystem();
    assertFalse(fs.exists(directory));
    try {
      assertTrue(fs.mkdirs(directory));
      assertTrue(fs.exists(directory));
      assertEquals(0,fs.listStatus(directory).length);
      final int numFiles=3;
      for (int i=0; i < numFiles; i++) {
        Path file=new Path(directory,"/file-" + i);
        try (FSDataOutputStream out=fs.create(file,FileSystem.WriteMode.NO_OVERWRITE);OutputStreamWriter writer=new OutputStreamWriter(out,StandardCharsets.UTF_8)){
          writer.write("hello-" + i + "\n");
        }
       }
      FileStatus[] files=fs.listStatus(directory);
      assertNotNull(files);
      assertEquals(3,files.length);
      for (      FileStatus status : files) {
        assertFalse(status.isDir());
      }
      assertTrue(fs.exists(directory));
    }
  finally {
      fs.delete(directory,true);
    }
    assertFalse(fs.exists(directory));
  }
  private static Configuration createConfiguration(){
    final Configuration conf=new Configuration();
    conf.setString("swift.service." + SERVICENAME + ".auth.url",AUTH_URL);
    conf.setString("swift.service." + SERVICENAME + ".username",USERNAME);
    conf.setString("swift.service." + SERVICENAME + ".password",PASSWORD);
    conf.setString("swift.service." + SERVICENAME + ".tenant",TENANT);
    conf.setString("swift.service." + SERVICENAME + ".region",REGION);
    conf.setString("swift.service." + SERVICENAME + ".public","true");
    return conf;
  }
}
