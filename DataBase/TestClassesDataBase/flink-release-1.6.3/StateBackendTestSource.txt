/** 
 * Source that instantiates the operator state backend and the keyed state backend. The created state backends can be retrieved from the static fields to check if the CloseableRegistry closed them correctly.
 */
public static class StateBackendTestSource extends StreamTask<Long,StreamSource<Long,SourceFunction<Long>>> {
  private static volatile boolean fail;
  public StateBackendTestSource(  Environment env){
    super(env);
  }
  @Override protected void init() throws Exception {
  }
  @Override protected void run() throws Exception {
    if (fail) {
      throw new RuntimeException();
    }
  }
  @Override protected void cleanup() throws Exception {
  }
  @Override protected void cancelTask() throws Exception {
  }
  @Override public StreamTaskStateInitializer createStreamTaskStateInitializer(){
    final StreamTaskStateInitializer streamTaskStateManager=super.createStreamTaskStateInitializer();
    return (operatorID,operatorClassName,keyContext,keySerializer,closeableRegistry) -> {
      final StreamOperatorStateContext context=streamTaskStateManager.streamOperatorStateContext(operatorID,operatorClassName,keyContext,keySerializer,closeableRegistry);
      return new StreamOperatorStateContext(){
        @Override public boolean isRestored(){
          return context.isRestored();
        }
        @Override public OperatorStateBackend operatorStateBackend(){
          return context.operatorStateBackend();
        }
        @Override public AbstractKeyedStateBackend<?> keyedStateBackend(){
          return context.keyedStateBackend();
        }
        @Override public InternalTimeServiceManager<?> internalTimerServiceManager(){
          InternalTimeServiceManager<?> timeServiceManager=context.internalTimerServiceManager();
          return timeServiceManager != null ? spy(timeServiceManager) : null;
        }
        @Override public CloseableIterable<StatePartitionStreamProvider> rawOperatorStateInputs(){
          return replaceWithSpy(context.rawOperatorStateInputs());
        }
        @Override public CloseableIterable<KeyGroupStatePartitionStreamProvider> rawKeyedStateInputs(){
          return replaceWithSpy(context.rawKeyedStateInputs());
        }
        public <T extends Closeable>T replaceWithSpy(        T closeable){
          T spyCloseable=spy(closeable);
          if (closeableRegistry.unregisterCloseable(closeable)) {
            try {
              closeableRegistry.registerCloseable(spyCloseable);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
          }
          return spyCloseable;
        }
      }
;
    }
;
  }
}
