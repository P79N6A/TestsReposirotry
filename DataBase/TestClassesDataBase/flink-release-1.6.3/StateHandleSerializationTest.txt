/** 
 * This test validates that all subclasses of  {@link StateObject} have a properserial version UID.
 */
public class StateHandleSerializationTest {
  @Test public void ensureStateHandlesHaveSerialVersionUID(){
    try {
      Reflections reflections=new Reflections("org.apache.flink");
      @SuppressWarnings("unchecked") Set<Class<?>> stateHandleImplementations=(Set<Class<?>>)(Set<?>)reflections.getSubTypesOf(StateObject.class);
      for (      Class<?> clazz : stateHandleImplementations) {
        validataSerialVersionUID(clazz);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  private static void validataSerialVersionUID(  Class<?> clazz){
    if (!clazz.isInterface()) {
      assertFalse("Anonymous state handle classes have problematic serialization behavior: " + clazz,clazz.isAnonymousClass());
      try {
        Field versionUidField=clazz.getDeclaredField("serialVersionUID");
        if (!(Modifier.isPrivate(versionUidField.getModifiers()) && Modifier.isStatic(versionUidField.getModifiers()) && Modifier.isFinal(versionUidField.getModifiers()))) {
          fail(clazz.getName() + " - serialVersionUID is not 'private static final'");
        }
      }
 catch (      NoSuchFieldException e) {
        fail("State handle implementation '" + clazz.getName() + "' is missing the serialVersionUID");
      }
    }
  }
}
