/** 
 * Tests for the SpoutWrapper.
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(WrapperSetupHelper.class) @PowerMockIgnore({"javax.management.*","com.sun.jndi.*","org.apache.log4j.*"}) public class SpoutWrapperTest extends AbstractTest {
  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testRunPrepare() throws Exception {
    final StormConfig stormConfig=new StormConfig();
    stormConfig.put(this.r.nextInt(),this.r.nextInt());
    final Configuration flinkConfig=new Configuration();
    flinkConfig.setInteger("testKey",this.r.nextInt());
    final ExecutionConfig taskConfig=mock(ExecutionConfig.class);
    when(taskConfig.getGlobalJobParameters()).thenReturn(null).thenReturn(stormConfig).thenReturn(flinkConfig);
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(taskConfig);
    when(taskContext.getTaskName()).thenReturn("name");
    final IRichSpout spout=mock(IRichSpout.class);
    SpoutWrapper spoutWrapper=new SpoutWrapper(spout);
    spoutWrapper.setRuntimeContext(taskContext);
    spoutWrapper.cancel();
    spoutWrapper.run(mock(SourceContext.class));
    verify(spout).open(any(Map.class),any(TopologyContext.class),any(SpoutOutputCollector.class));
    spoutWrapper.run(mock(SourceContext.class));
    verify(spout).open(eq(stormConfig),any(TopologyContext.class),any(SpoutOutputCollector.class));
    final TestDummySpout testSpout=new TestDummySpout();
    spoutWrapper=new SpoutWrapper(testSpout);
    spoutWrapper.setRuntimeContext(taskContext);
    spoutWrapper.cancel();
    spoutWrapper.run(mock(SourceContext.class));
    for (    Entry<String,String> entry : flinkConfig.toMap().entrySet()) {
      Assert.assertEquals(entry.getValue(),testSpout.config.get(entry.getKey()));
    }
  }
  @SuppressWarnings("unchecked") @Test public void testRunExecuteFixedNumber() throws Exception {
    final SetupOutputFieldsDeclarer declarer=new SetupOutputFieldsDeclarer();
    declarer.declare(new Fields("dummy"));
    PowerMockito.whenNew(SetupOutputFieldsDeclarer.class).withNoArguments().thenReturn(declarer);
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
    when(taskContext.getTaskName()).thenReturn("name");
    final IRichSpout spout=mock(IRichSpout.class);
    final int numberOfCalls=this.r.nextInt(50);
    final SpoutWrapper<?> spoutWrapper=new SpoutWrapper<Object>(spout,numberOfCalls);
    spoutWrapper.setRuntimeContext(taskContext);
    spoutWrapper.run(mock(SourceContext.class));
    verify(spout,times(numberOfCalls)).nextTuple();
  }
  @Test public void testRunExecuteFinite() throws Exception {
    final int numberOfCalls=this.r.nextInt(50);
    final LinkedList<Tuple1<Integer>> expectedResult=new LinkedList<Tuple1<Integer>>();
    for (int i=numberOfCalls - 1; i >= 0; --i) {
      expectedResult.add(new Tuple1<Integer>(new Integer(i)));
    }
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
    when(taskContext.getTaskName()).thenReturn("name");
    final FiniteTestSpout spout=new FiniteTestSpout(numberOfCalls);
    final SpoutWrapper<Tuple1<Integer>> spoutWrapper=new SpoutWrapper<Tuple1<Integer>>(spout,-1);
    spoutWrapper.setRuntimeContext(taskContext);
    final TestContext collector=new TestContext();
    spoutWrapper.run(collector);
    Assert.assertEquals(expectedResult,collector.result);
  }
  @SuppressWarnings("unchecked") @Test public void runAndExecuteFiniteSpout() throws Exception {
    final FiniteSpout stormSpout=mock(FiniteSpout.class);
    when(stormSpout.reachedEnd()).thenReturn(false,false,false,true,false,false,true);
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
    when(taskContext.getTaskName()).thenReturn("name");
    final SpoutWrapper<?> wrapper=new SpoutWrapper<Object>(stormSpout);
    wrapper.setRuntimeContext(taskContext);
    wrapper.run(mock(SourceContext.class));
    verify(stormSpout,times(3)).nextTuple();
  }
  @SuppressWarnings("unchecked") @Test public void runAndExecuteFiniteSpout2() throws Exception {
    final FiniteSpout stormSpout=mock(FiniteSpout.class);
    when(stormSpout.reachedEnd()).thenReturn(true,false,true,false,true,false,true);
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
    when(taskContext.getTaskName()).thenReturn("name");
    final SpoutWrapper<?> wrapper=new SpoutWrapper<Object>(stormSpout);
    wrapper.setRuntimeContext(taskContext);
    wrapper.run(mock(SourceContext.class));
    verify(stormSpout,never()).nextTuple();
  }
  @Test public void testCancel() throws Exception {
    final int numberOfCalls=5 + this.r.nextInt(5);
    final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
    when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
    when(taskContext.getTaskName()).thenReturn("name");
    final IRichSpout spout=new FiniteTestSpout(numberOfCalls);
    final SpoutWrapper<Tuple1<Integer>> spoutWrapper=new SpoutWrapper<Tuple1<Integer>>(spout);
    spoutWrapper.setRuntimeContext(taskContext);
    spoutWrapper.cancel();
    final TestContext collector=new TestContext();
    spoutWrapper.run(collector);
    Assert.assertEquals(new LinkedList<Tuple1<Integer>>(),collector.result);
  }
  @Test public void testClose() throws Exception {
    final IRichSpout spout=mock(IRichSpout.class);
    final SpoutWrapper<Tuple1<Integer>> spoutWrapper=new SpoutWrapper<Tuple1<Integer>>(spout);
    spoutWrapper.close();
    verify(spout).close();
  }
}
