/** 
 * Tests for the  {@link org.apache.flink.streaming.api.functions.sink.PrintSinkFunction}.
 */
public class PrintSinkFunctionTest {
  public PrintStream printStreamOriginal=System.out;
  private String line=System.lineSeparator();
  @Test public void testPrintSinkStdOut() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stream=new PrintStream(baos);
    System.setOut(stream);
    final StreamingRuntimeContext ctx=Mockito.mock(StreamingRuntimeContext.class);
    PrintSinkFunction<String> printSink=new PrintSinkFunction<>();
    printSink.setRuntimeContext(ctx);
    try {
      printSink.open(new Configuration());
    }
 catch (    Exception e) {
      Assert.fail();
    }
    printSink.setTargetToStandardOut();
    printSink.invoke("hello world!",SinkContextUtil.forTimestamp(0));
    assertEquals("Print to System.out",printSink.toString());
    assertEquals("hello world!" + line,baos.toString());
    printSink.close();
    stream.close();
  }
  @Test public void testPrintSinkStdErr() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stream=new PrintStream(baos);
    System.setOut(stream);
    final StreamingRuntimeContext ctx=Mockito.mock(StreamingRuntimeContext.class);
    PrintSinkFunction<String> printSink=new PrintSinkFunction<>();
    printSink.setRuntimeContext(ctx);
    try {
      printSink.open(new Configuration());
    }
 catch (    Exception e) {
      Assert.fail();
    }
    printSink.setTargetToStandardErr();
    printSink.invoke("hello world!",SinkContextUtil.forTimestamp(0));
    assertEquals("Print to System.err",printSink.toString());
    assertEquals("hello world!" + line,baos.toString());
    printSink.close();
    stream.close();
  }
  @Test public void testPrintSinkWithPrefix() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stream=new PrintStream(baos);
    System.setOut(stream);
    final StreamingRuntimeContext ctx=Mockito.mock(StreamingRuntimeContext.class);
    Mockito.when(ctx.getNumberOfParallelSubtasks()).thenReturn(2);
    Mockito.when(ctx.getIndexOfThisSubtask()).thenReturn(1);
    PrintSinkFunction<String> printSink=new PrintSinkFunction<>();
    printSink.setRuntimeContext(ctx);
    try {
      printSink.open(new Configuration());
    }
 catch (    Exception e) {
      Assert.fail();
    }
    printSink.setTargetToStandardErr();
    printSink.invoke("hello world!",SinkContextUtil.forTimestamp(0));
    assertEquals("Print to System.err",printSink.toString());
    assertEquals("2> hello world!" + line,baos.toString());
    printSink.close();
    stream.close();
  }
  @After public void restoreSystemOut(){
    System.setOut(printStreamOriginal);
  }
}
