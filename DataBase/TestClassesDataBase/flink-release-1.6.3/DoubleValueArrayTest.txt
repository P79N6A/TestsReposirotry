/** 
 * Tests for  {@link DoubleValueArray}.
 */
public class DoubleValueArrayTest {
  @Test public void testBoundedArray(){
    int count=DoubleValueArray.DEFAULT_CAPACITY_IN_BYTES / DoubleValueArray.ELEMENT_LENGTH_IN_BYTES;
    ValueArray<DoubleValue> lva=new DoubleValueArray(DoubleValueArray.DEFAULT_CAPACITY_IN_BYTES);
    for (int i=0; i < count; i++) {
      assertFalse(lva.isFull());
      assertEquals(i,lva.size());
      assertTrue(lva.add(new DoubleValue(i)));
      assertEquals(i + 1,lva.size());
    }
    assertTrue(lva.isFull());
    assertEquals(count,lva.size());
    int idx=0;
    for (    DoubleValue lv : lva) {
      assertEquals(idx++,lv.getValue(),0.000001);
    }
    assertFalse(lva.add(new DoubleValue(count)));
    assertFalse(lva.addAll(lva));
    assertEquals(lva,lva.copy());
    DoubleValueArray lvaTo=new DoubleValueArray();
    lva.copyTo(lvaTo);
    assertEquals(lva,lvaTo);
    lva.clear();
    assertEquals(0,lva.size());
  }
  @Test public void testUnboundedArray(){
    int count=4096;
    ValueArray<DoubleValue> lva=new DoubleValueArray();
    for (int i=0; i < count; i++) {
      assertFalse(lva.isFull());
      assertEquals(i,lva.size());
      assertTrue(lva.add(new DoubleValue(i)));
      assertEquals(i + 1,lva.size());
    }
    assertFalse(lva.isFull());
    assertEquals(count,lva.size());
    int idx=0;
    for (    DoubleValue lv : lva) {
      assertEquals(idx++,lv.getValue(),0.000001);
    }
    assertTrue(lva.add(new DoubleValue(count)));
    assertTrue(lva.addAll(lva));
    assertEquals(lva,lva.copy());
    DoubleValueArray lvaTo=new DoubleValueArray();
    lva.copyTo(lvaTo);
    assertEquals(lva,lvaTo);
    int size=lva.size();
    lva.mark();
    assertTrue(lva.add(new DoubleValue()));
    assertEquals(size + 1,lva.size());
    lva.reset();
    assertEquals(size,lva.size());
    lva.clear();
    assertEquals(0,lva.size());
  }
}
