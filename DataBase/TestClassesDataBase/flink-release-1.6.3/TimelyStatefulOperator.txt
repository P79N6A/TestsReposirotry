private static class TimelyStatefulOperator extends AbstractStreamOperator<Tuple2<Long,Long>> implements OneInputStreamOperator<Tuple2<Long,Long>,Tuple2<Long,Long>>, Triggerable<Long,Long> {
  private static final long serialVersionUID=1L;
  private final ValueStateDescriptor<Long> stateDescriptor=new ValueStateDescriptor<Long>("state-name",LongSerializer.INSTANCE);
  private transient InternalTimerService<Long> timerService;
  @Override public void open() throws Exception {
    super.open();
    timerService=getInternalTimerService("timer",LongSerializer.INSTANCE,this);
  }
  @Override public void processElement(  StreamRecord<Tuple2<Long,Long>> element) throws Exception {
    ValueState<Long> state=getKeyedStateBackend().getPartitionedState(element.getValue().f0,LongSerializer.INSTANCE,stateDescriptor);
    state.update(element.getValue().f1);
    timerService.registerEventTimeTimer(element.getValue().f0,timerService.currentWatermark() + 10);
    timerService.registerProcessingTimeTimer(element.getValue().f0,timerService.currentProcessingTime() + 30_000);
    output.collect(element);
  }
  @Override public void onEventTime(  InternalTimer<Long,Long> timer) throws Exception {
  }
  @Override public void onProcessingTime(  InternalTimer<Long,Long> timer) throws Exception {
  }
  @Override public void processWatermark(  Watermark mark) throws Exception {
    output.emitWatermark(mark);
  }
}
