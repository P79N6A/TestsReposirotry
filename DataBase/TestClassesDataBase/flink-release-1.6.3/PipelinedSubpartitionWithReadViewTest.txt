/** 
 * Additional tests for  {@link PipelinedSubpartition} which require an availability listener and aread view.
 * @see PipelinedSubpartitionTest
 */
public class PipelinedSubpartitionWithReadViewTest {
  private PipelinedSubpartition subpartition;
  private AwaitableBufferAvailablityListener availablityListener;
  private PipelinedSubpartitionView readView;
  @Before public void setup() throws IOException {
    final ResultPartition parent=mock(ResultPartition.class);
    subpartition=new PipelinedSubpartition(0,parent);
    availablityListener=new AwaitableBufferAvailablityListener();
    readView=subpartition.createReadView(availablityListener);
  }
  @After public void tearDown(){
    readView.releaseAllResources();
    subpartition.release();
  }
  @Test(expected=IllegalStateException.class) public void testAddTwoNonFinishedBuffer(){
    subpartition.add(createBufferBuilder().createBufferConsumer());
    subpartition.add(createBufferBuilder().createBufferConsumer());
    assertNull(readView.getNextBuffer());
  }
  @Test public void testAddEmptyNonFinishedBuffer(){
    assertEquals(0,availablityListener.getNumNotifications());
    BufferBuilder bufferBuilder=createBufferBuilder();
    subpartition.add(bufferBuilder.createBufferConsumer());
    assertEquals(0,availablityListener.getNumNotifications());
    assertNull(readView.getNextBuffer());
    bufferBuilder.finish();
    bufferBuilder=createBufferBuilder();
    subpartition.add(bufferBuilder.createBufferConsumer());
    assertEquals(1,availablityListener.getNumNotifications());
    assertNull(readView.getNextBuffer());
    assertEquals(1,subpartition.getBuffersInBacklog());
  }
  @Test public void testAddNonEmptyNotFinishedBuffer() throws Exception {
    assertEquals(0,availablityListener.getNumNotifications());
    BufferBuilder bufferBuilder=createBufferBuilder();
    bufferBuilder.appendAndCommit(ByteBuffer.allocate(1024));
    subpartition.add(bufferBuilder.createBufferConsumer());
    assertNextBuffer(readView,1024,false,1,false,false);
    assertEquals(1,subpartition.getBuffersInBacklog());
  }
  /** 
 * Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would busy loop on the unfinished BufferConsumers.
 */
  @Test public void testUnfinishedBufferBehindFinished() throws Exception {
    subpartition.add(createFilledBufferConsumer(1025));
    subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer());
    assertThat(availablityListener.getNumNotifications(),greaterThan(0L));
    assertNextBuffer(readView,1025,false,1,false,true);
    assertNextBuffer(readView,1024,false,1,false,false);
    assertNoNextBuffer(readView);
  }
  /** 
 * After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some of the data.
 */
  @Test public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {
    subpartition.add(createFilledBufferConsumer(1025));
    subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer());
    long oldNumNotifications=availablityListener.getNumNotifications();
    subpartition.flush();
    assertThat(oldNumNotifications,greaterThan(0L));
    assertEquals(oldNumNotifications,availablityListener.getNumNotifications());
    assertNextBuffer(readView,1025,true,1,false,true);
    assertNextBuffer(readView,1024,false,1,false,false);
    assertNoNextBuffer(readView);
  }
  /** 
 * A flush call with a buffer size of 1 should always notify consumers (unless already flushed).
 */
  @Test public void testFlushWithUnfinishedBufferBehindFinished2() throws Exception {
    subpartition.flush();
    assertEquals(0,availablityListener.getNumNotifications());
    subpartition.add(createFilledBufferConsumer(1025));
    subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer());
    assertNextBuffer(readView,1025,false,1,false,true);
    long oldNumNotifications=availablityListener.getNumNotifications();
    subpartition.flush();
    assertEquals(oldNumNotifications + 1,availablityListener.getNumNotifications());
    subpartition.flush();
    assertEquals(oldNumNotifications + 1,availablityListener.getNumNotifications());
    assertNextBuffer(readView,1024,false,1,false,false);
    assertNoNextBuffer(readView);
  }
  @Test public void testMultipleEmptyBuffers() throws Exception {
    assertEquals(0,availablityListener.getNumNotifications());
    subpartition.add(createFilledBufferConsumer(0));
    assertEquals(1,availablityListener.getNumNotifications());
    subpartition.add(createFilledBufferConsumer(0));
    assertEquals(2,availablityListener.getNumNotifications());
    subpartition.add(createFilledBufferConsumer(0));
    assertEquals(2,availablityListener.getNumNotifications());
    assertEquals(3,subpartition.getBuffersInBacklog());
    subpartition.add(createFilledBufferConsumer(1024));
    assertEquals(2,availablityListener.getNumNotifications());
    assertNextBuffer(readView,1024,false,0,false,true);
  }
  @Test public void testEmptyFlush(){
    subpartition.flush();
    assertEquals(0,availablityListener.getNumNotifications());
  }
  @Test public void testBasicPipelinedProduceConsumeLogic() throws Exception {
    assertFalse(readView.nextBufferIsEvent());
    assertNoNextBuffer(readView);
    assertFalse(readView.nextBufferIsEvent());
    assertEquals(0,availablityListener.getNumNotifications());
    subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
    assertFalse(readView.nextBufferIsEvent());
    assertEquals(1,subpartition.getTotalNumberOfBuffers());
    assertEquals(1,subpartition.getBuffersInBacklog());
    assertEquals(0,subpartition.getTotalNumberOfBytes());
    assertEquals(1,availablityListener.getNumNotifications());
    assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
    assertEquals(BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(0,subpartition.getBuffersInBacklog());
    assertNoNextBuffer(readView);
    assertEquals(0,subpartition.getBuffersInBacklog());
    subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
    assertFalse(readView.nextBufferIsEvent());
    assertEquals(2,subpartition.getTotalNumberOfBuffers());
    assertEquals(1,subpartition.getBuffersInBacklog());
    assertEquals(BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(2,availablityListener.getNumNotifications());
    assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
    assertEquals(2 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(0,subpartition.getBuffersInBacklog());
    assertNoNextBuffer(readView);
    assertEquals(0,subpartition.getBuffersInBacklog());
    subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
    assertFalse(readView.nextBufferIsEvent());
    subpartition.add(createEventBufferConsumer(BUFFER_SIZE));
    assertFalse(readView.nextBufferIsEvent());
    subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
    assertFalse(readView.nextBufferIsEvent());
    assertEquals(5,subpartition.getTotalNumberOfBuffers());
    assertEquals(2,subpartition.getBuffersInBacklog());
    assertEquals(2 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(4,availablityListener.getNumNotifications());
    assertNextBuffer(readView,BUFFER_SIZE,true,subpartition.getBuffersInBacklog() - 1,true,true);
    assertEquals(3 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(1,subpartition.getBuffersInBacklog());
    assertNextEvent(readView,BUFFER_SIZE,null,true,subpartition.getBuffersInBacklog(),false,true);
    assertEquals(4 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(1,subpartition.getBuffersInBacklog());
    assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
    assertEquals(5 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(0,subpartition.getBuffersInBacklog());
    assertNoNextBuffer(readView);
    assertEquals(0,subpartition.getBuffersInBacklog());
    assertEquals(5,subpartition.getTotalNumberOfBuffers());
    assertEquals(5 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
    assertEquals(4,availablityListener.getNumNotifications());
  }
}
