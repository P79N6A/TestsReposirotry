class Context {
  final TestingRpcService rpcService;
  final TestingFatalErrorHandler fatalErrorHandler;
  final MockResourceManagerRuntimeServices rmServices;
  final ResourceManagerConfiguration rmConfiguration;
  final ResourceID rmResourceID;
  static final String RM_ADDRESS="resourceManager";
  final TestingYarnResourceManager resourceManager;
  final int dataPort=1234;
  final HardwareDescription hardwareDescription=new HardwareDescription(1,2L,3L,4L);
  final ResourceProfile resourceProfile1=new ResourceProfile(1.0,200);
  public ContainerId task=ContainerId.newInstance(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1L,0),0),1);
  public String taskHost="host1";
  public NMClient mockNMClient=mock(NMClient.class);
  public AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient=mock(AMRMClientAsync.class);
  public JobManagerMetricGroup mockJMMetricGroup=UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup();
  /** 
 * Create mock RM dependencies.
 */
  Context() throws Exception {
    rpcService=new TestingRpcService();
    fatalErrorHandler=new TestingFatalErrorHandler();
    rmServices=new MockResourceManagerRuntimeServices();
    rmConfiguration=new ResourceManagerConfiguration(Time.seconds(5L),Time.seconds(5L));
    rmResourceID=ResourceID.generate();
    resourceManager=new TestingYarnResourceManager(rpcService,RM_ADDRESS,rmResourceID,flinkConfig,env,rmConfiguration,rmServices.highAvailabilityServices,rmServices.heartbeatServices,rmServices.slotManager,rmServices.metricRegistry,rmServices.jobLeaderIdService,new ClusterInformation("localhost",1234),fatalErrorHandler,null,mockResourceManagerClient,mockNMClient,mockJMMetricGroup);
  }
  /** 
 * Mock services needed by the resource manager.
 */
class MockResourceManagerRuntimeServices {
    public final ScheduledExecutor scheduledExecutor;
    public final TestingHighAvailabilityServices highAvailabilityServices;
    public final HeartbeatServices heartbeatServices;
    public final MetricRegistry metricRegistry;
    public final TestingLeaderElectionService rmLeaderElectionService;
    public final JobLeaderIdService jobLeaderIdService;
    public final SlotManager slotManager;
    public UUID rmLeaderSessionId;
    MockResourceManagerRuntimeServices() throws Exception {
      scheduledExecutor=mock(ScheduledExecutor.class);
      highAvailabilityServices=new TestingHighAvailabilityServices();
      rmLeaderElectionService=new TestingLeaderElectionService();
      highAvailabilityServices.setResourceManagerLeaderElectionService(rmLeaderElectionService);
      heartbeatServices=new TestingHeartbeatServices(5L,5L,scheduledExecutor);
      metricRegistry=NoOpMetricRegistry.INSTANCE;
      slotManager=new SlotManager(new ScheduledExecutorServiceAdapter(new DirectScheduledExecutorService()),Time.seconds(10),Time.seconds(10),Time.minutes(1));
      jobLeaderIdService=new JobLeaderIdService(highAvailabilityServices,rpcService.getScheduledExecutor(),Time.minutes(5L));
    }
    public void grantLeadership() throws Exception {
      rmLeaderSessionId=UUID.randomUUID();
      rmLeaderElectionService.isLeader(rmLeaderSessionId).get(TIMEOUT.toMilliseconds(),TimeUnit.MILLISECONDS);
    }
  }
  /** 
 * Start the resource manager and grant leadership to it.
 */
  public void startResourceManager() throws Exception {
    resourceManager.start();
    rmServices.grantLeadership();
  }
  /** 
 * Stop the Akka actor system.
 */
  public void stopResourceManager() throws Exception {
    rpcService.stopService().get();
  }
}
