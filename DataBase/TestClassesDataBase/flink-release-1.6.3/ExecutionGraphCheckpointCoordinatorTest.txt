public class ExecutionGraphCheckpointCoordinatorTest {
  /** 
 * Tests that a shut down checkpoint coordinator calls shutdown on the store and counter.
 */
  @Test public void testShutdownCheckpointCoordinator() throws Exception {
    CheckpointIDCounter counter=mock(CheckpointIDCounter.class);
    CompletedCheckpointStore store=mock(CompletedCheckpointStore.class);
    ExecutionGraph graph=createExecutionGraphAndEnableCheckpointing(counter,store);
    graph.failGlobal(new Exception("Test Exception"));
    verify(counter,times(1)).shutdown(JobStatus.FAILED);
    verify(store,times(1)).shutdown(eq(JobStatus.FAILED));
  }
  /** 
 * Tests that a suspended checkpoint coordinator calls suspend on the store and counter.
 */
  @Test public void testSuspendCheckpointCoordinator() throws Exception {
    CheckpointIDCounter counter=mock(CheckpointIDCounter.class);
    CompletedCheckpointStore store=mock(CompletedCheckpointStore.class);
    ExecutionGraph graph=createExecutionGraphAndEnableCheckpointing(counter,store);
    graph.suspend(new Exception("Test Exception"));
    verify(counter,times(1)).shutdown(eq(JobStatus.SUSPENDED));
    verify(store,times(1)).shutdown(eq(JobStatus.SUSPENDED));
  }
  private ExecutionGraph createExecutionGraphAndEnableCheckpointing(  CheckpointIDCounter counter,  CompletedCheckpointStore store) throws Exception {
    final Time timeout=Time.days(1L);
    ExecutionGraph executionGraph=new ExecutionGraph(new DummyJobInformation(),TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),timeout,new NoRestartStrategy(),new RestartAllStrategy.Factory(),new Scheduler(TestingUtils.defaultExecutionContext()),ClassLoader.getSystemClassLoader(),VoidBlobWriter.getInstance(),timeout);
    executionGraph.enableCheckpointing(100,100,100,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,Collections.emptyList(),Collections.emptyList(),Collections.emptyList(),Collections.emptyList(),counter,store,new MemoryStateBackend(),CheckpointStatsTrackerTest.createTestTracker());
    JobVertex jobVertex=new JobVertex("MockVertex");
    jobVertex.setInvokableClass(AbstractInvokable.class);
    executionGraph.attachJobGraph(Collections.singletonList(jobVertex));
    return executionGraph;
  }
}
