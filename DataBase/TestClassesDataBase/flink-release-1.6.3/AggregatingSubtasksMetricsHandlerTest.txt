/** 
 * Tests for the  {@link AggregatingSubtasksMetricsHandler}.
 */
public class AggregatingSubtasksMetricsHandlerTest extends TestLogger {
  @Test public void testGetPaths(){
    AggregatingSubtasksMetricsHandler handler=new AggregatingSubtasksMetricsHandler(Executors.directExecutor(),mock(MetricFetcher.class));
    String[] paths=handler.getPaths();
    assertEquals(1,paths.length);
    assertEquals("/jobs/:jobid/vertices/:vertexid/subtasks/metrics",paths[0]);
  }
  @Test public void getStores() throws Exception {
    MetricFetcher fetcher=new MetricFetcher(mock(GatewayRetriever.class),mock(MetricQueryServiceRetriever.class),Executors.directExecutor(),TestingUtils.TIMEOUT());
    MetricStore store=MetricStoreTest.setupStore(fetcher.getMetricStore());
    AggregatingSubtasksMetricsHandler handler=new AggregatingSubtasksMetricsHandler(Executors.directExecutor(),fetcher);
    Map<String,String> pathParams=new HashMap<>();
    pathParams.put(PARAMETER_JOB_ID,"jobid");
    pathParams.put(PARAMETER_VERTEX_ID,"taskid");
    Map<String,String> queryParams=new HashMap<>();
    Collection<? extends MetricStore.ComponentMetricStore> stores=handler.getStores(store,pathParams,queryParams);
    assertEquals(2,stores.size());
  }
}
