/** 
 * Tests for the  {@link TypeInformation} class.
 */
public class TypeInformationTest {
  @Test public void testOfClass(){
    assertEquals(BasicTypeInfo.STRING_TYPE_INFO,TypeInformation.of(String.class));
  }
  @Test public void testOfGenericClassForFlink(){
    try {
      TypeInformation.of(Tuple3.class);
      fail("should fail with an exception");
    }
 catch (    FlinkRuntimeException e) {
      assertNotEquals(-1,e.getMessage().indexOf("TypeHint"));
    }
  }
  @Test public void testOfGenericClassForGenericType(){
    assertEquals(new GenericTypeInfo<>(List.class),TypeInformation.of(List.class));
  }
  @Test public void testOfTypeHint(){
    assertEquals(BasicTypeInfo.STRING_TYPE_INFO,TypeInformation.of(String.class));
    assertEquals(BasicTypeInfo.STRING_TYPE_INFO,TypeInformation.of(new TypeHint<String>(){
    }
));
    TypeInformation<Tuple3<String,Double,Boolean>> tupleInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.DOUBLE_TYPE_INFO,BasicTypeInfo.BOOLEAN_TYPE_INFO);
    assertEquals(tupleInfo,TypeInformation.of(new TypeHint<Tuple3<String,Double,Boolean>>(){
    }
));
  }
}
