/** 
 * A test  {@link CompletedCheckpoint}. We want to verify that the correct class loader is used when discarding. Spying on a regular  {@link CompletedCheckpoint} instance withMockito doesn't work, because it it breaks serializability.
 */
protected static class TestCompletedCheckpoint extends CompletedCheckpoint {
  private static final long serialVersionUID=4211419809665983026L;
  private boolean isDiscarded;
  private transient final CountDownLatch discardLatch=new CountDownLatch(1);
  public TestCompletedCheckpoint(  JobID jobId,  long checkpointId,  long timestamp,  Map<OperatorID,OperatorState> operatorGroupState,  CheckpointProperties props){
    super(jobId,checkpointId,timestamp,Long.MAX_VALUE,operatorGroupState,null,props,new TestCompletedCheckpointStorageLocation());
  }
  @Override public boolean discardOnSubsume() throws Exception {
    if (super.discardOnSubsume()) {
      discard();
      return true;
    }
 else {
      return false;
    }
  }
  @Override public boolean discardOnShutdown(  JobStatus jobStatus) throws Exception {
    if (super.discardOnShutdown(jobStatus)) {
      discard();
      return true;
    }
 else {
      return false;
    }
  }
  void discard(){
    if (!isDiscarded) {
      this.isDiscarded=true;
      if (discardLatch != null) {
        discardLatch.countDown();
      }
    }
  }
  public boolean isDiscarded(){
    return isDiscarded;
  }
  public void awaitDiscard() throws InterruptedException {
    if (discardLatch != null) {
      discardLatch.await();
    }
  }
  public boolean awaitDiscard(  long timeout) throws InterruptedException {
    if (discardLatch != null) {
      return discardLatch.await(timeout,TimeUnit.MILLISECONDS);
    }
 else {
      return false;
    }
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    TestCompletedCheckpoint that=(TestCompletedCheckpoint)o;
    return getJobId().equals(that.getJobId()) && getCheckpointID() == that.getCheckpointID();
  }
  @Override public int hashCode(){
    return getJobId().hashCode() + (int)getCheckpointID();
  }
}
