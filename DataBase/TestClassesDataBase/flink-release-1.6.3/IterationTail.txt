class IterationTail implements Runnable {
  private final BlockingBackChannel backChannel;
  private final BlockingQueue<Integer> dataChannel;
  private final Random random;
  private final List<String> actionLog;
  IterationTail(  BlockingBackChannel backChannel,  BlockingQueue<Integer> dataChannel,  List<String> actionLog){
    this.backChannel=backChannel;
    this.dataChannel=dataChannel;
    this.actionLog=actionLog;
    random=new Random();
  }
  @Override public void run(){
    try {
      for (int n=0; n < NUM_ITERATIONS; n++) {
        DataOutputView writeEnd=backChannel.getWriteEnd();
        readInputFromDataChannel();
        Thread.sleep(random.nextInt(10));
        DataInputView inputView=Mockito.mock(DataInputView.class);
        actionLog.add("tail writes in iteration " + n);
        writeEnd.write(inputView,1);
        backChannel.notifyOfEndOfSuperstep();
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  void readInputFromDataChannel() throws InterruptedException {
    dataChannel.take();
    actionLog.add("tail receives data");
  }
}
