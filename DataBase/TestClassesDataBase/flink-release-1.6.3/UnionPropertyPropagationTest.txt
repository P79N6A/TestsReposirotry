@SuppressWarnings({"serial"}) public class UnionPropertyPropagationTest extends CompilerTestBase {
  @Test public void testUnion1(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> sourceA=env.generateSequence(0,1);
    DataSet<Long> sourceB=env.generateSequence(0,1);
    DataSet<Long> redA=sourceA.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>());
    DataSet<Long> redB=sourceB.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>());
    redA.union(redB).groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).output(new DiscardingOutputFormat<Long>());
    Plan plan=env.createProgramPlan();
    OptimizedPlan oPlan=compileNoStats(plan);
    JobGraphGenerator jobGen=new JobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
    oPlan.accept(new Visitor<PlanNode>(){
      @Override public boolean preVisit(      PlanNode visitable){
        if (visitable instanceof SingleInputPlanNode && visitable.getProgramOperator() instanceof GroupReduceOperatorBase) {
          for (          Channel inConn : visitable.getInputs()) {
            Assert.assertTrue("Reduce should just forward the input if it is already partitioned",inConn.getShipStrategy() == ShipStrategyType.FORWARD);
          }
          return false;
        }
        return true;
      }
      @Override public void postVisit(      PlanNode visitable){
      }
    }
);
  }
  @Test public void testUnion2(){
    final int NUM_INPUTS=4;
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<String> source=env.readTextFile(IN_FILE);
    DataSet<Tuple2<String,Integer>> lastUnion=source.flatMap(new DummyFlatMap());
    for (int i=1; i < NUM_INPUTS; i++) {
      lastUnion=lastUnion.union(source.flatMap(new DummyFlatMap()));
    }
    DataSet<Tuple2<String,Integer>> result=lastUnion.groupBy(0).aggregate(Aggregations.SUM,1);
    result.writeAsText(OUT_FILE);
    Plan plan=env.createProgramPlan("Test union on new java-api");
    OptimizedPlan oPlan=compileNoStats(plan);
    JobGraphGenerator jobGen=new JobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
    oPlan.accept(new Visitor<PlanNode>(){
      @Override public boolean preVisit(      PlanNode visitable){
        if (visitable instanceof SingleInputPlanNode && visitable.getProgramOperator() instanceof GroupReduceOperatorBase) {
          final Channel inConn=((SingleInputPlanNode)visitable).getInput();
          Assert.assertTrue("Union should just forward the Partitioning",inConn.getShipStrategy() == ShipStrategyType.FORWARD);
          Assert.assertTrue("Union Node should be under Group operator",inConn.getSource() instanceof NAryUnionPlanNode);
        }
        if (visitable instanceof NAryUnionPlanNode) {
          int numberInputs=0;
          for (Iterator<Channel> inputs=visitable.getInputs().iterator(); inputs.hasNext(); numberInputs++) {
            final Channel inConn=inputs.next();
            PlanNode inNode=inConn.getSource();
            Assert.assertTrue("Input of Union should be FlatMapOperators",inNode.getProgramOperator() instanceof FlatMapOperatorBase);
            Assert.assertTrue("Shipment strategy under union should partition the data",inConn.getShipStrategy() == ShipStrategyType.PARTITION_HASH);
          }
          Assert.assertTrue("NAryUnion should have " + NUM_INPUTS + " inputs",numberInputs == NUM_INPUTS);
          return false;
        }
        return true;
      }
      @Override public void postVisit(      PlanNode visitable){
      }
    }
);
  }
public static final class DummyFlatMap extends RichFlatMapFunction<String,Tuple2<String,Integer>> {
    private static final long serialVersionUID=1L;
    @Override public void flatMap(    String value,    Collector<Tuple2<String,Integer>> out){
      out.collect(new Tuple2<String,Integer>(value,0));
    }
  }
}
