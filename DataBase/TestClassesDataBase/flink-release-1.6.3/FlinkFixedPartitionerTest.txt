/** 
 * Tests for the  {@link FlinkFixedPartitioner}.
 */
public class FlinkFixedPartitionerTest {
  /** 
 * Test for when there are more sinks than partitions. <pre> Flink Sinks:		Kafka Partitions 1	---------------->	1 2   --------------/ 3   -------------/ 4	------------/ </pre>
 */
  @Test public void testMoreFlinkThanBrokers(){
    FlinkFixedPartitioner<String> part=new FlinkFixedPartitioner<>();
    int[] partitions=new int[]{0};
    part.open(0,4);
    Assert.assertEquals(0,part.partition("abc1",null,null,null,partitions));
    part.open(1,4);
    Assert.assertEquals(0,part.partition("abc2",null,null,null,partitions));
    part.open(2,4);
    Assert.assertEquals(0,part.partition("abc3",null,null,null,partitions));
    Assert.assertEquals(0,part.partition("abc3",null,null,null,partitions));
    part.open(3,4);
    Assert.assertEquals(0,part.partition("abc4",null,null,null,partitions));
  }
  /** 
 * Tests for when there are more partitions than sinks. <pre> Flink Sinks:		Kafka Partitions 1	---------------->	1 2	---------------->	2 3 4 5 </pre>
 */
  @Test public void testFewerPartitions(){
    FlinkFixedPartitioner<String> part=new FlinkFixedPartitioner<>();
    int[] partitions=new int[]{0,1,2,3,4};
    part.open(0,2);
    Assert.assertEquals(0,part.partition("abc1",null,null,null,partitions));
    Assert.assertEquals(0,part.partition("abc1",null,null,null,partitions));
    part.open(1,2);
    Assert.assertEquals(1,part.partition("abc1",null,null,null,partitions));
    Assert.assertEquals(1,part.partition("abc1",null,null,null,partitions));
  }
  @Test public void testMixedCase(){
    FlinkFixedPartitioner<String> part=new FlinkFixedPartitioner<>();
    int[] partitions=new int[]{0,1};
    part.open(0,3);
    Assert.assertEquals(0,part.partition("abc1",null,null,null,partitions));
    part.open(1,3);
    Assert.assertEquals(1,part.partition("abc1",null,null,null,partitions));
    part.open(2,3);
    Assert.assertEquals(0,part.partition("abc1",null,null,null,partitions));
  }
}
