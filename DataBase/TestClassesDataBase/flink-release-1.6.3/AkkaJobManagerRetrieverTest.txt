/** 
 * Test for the  {@link AkkaJobManagerRetriever}.
 */
public class AkkaJobManagerRetrieverTest extends TestLogger {
  private static final Time timeout=Time.seconds(10L);
  private static ActorSystem actorSystem;
  @BeforeClass public static void setup(){
    actorSystem=AkkaUtils.createDefaultActorSystem();
  }
  @AfterClass public static void teardown(){
    if (actorSystem != null) {
      actorSystem.shutdown();
      actorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout));
      actorSystem=null;
    }
  }
  /** 
 * Tests that we can retrieve the current leading job manager.
 */
  @Test public void testAkkaJobManagerRetrieval() throws Exception {
    AkkaJobManagerRetriever akkaJobManagerRetriever=new AkkaJobManagerRetriever(actorSystem,timeout,0,Time.milliseconds(0L));
    SettableLeaderRetrievalService settableLeaderRetrievalService=new SettableLeaderRetrievalService();
    CompletableFuture<JobManagerGateway> gatewayFuture=akkaJobManagerRetriever.getFuture();
    final UUID leaderSessionId=UUID.randomUUID();
    ActorRef actorRef=null;
    try {
      actorRef=actorSystem.actorOf(Props.create(JobClientActorTest.PlainActor.class,leaderSessionId));
      final String address=actorRef.path().toString();
      settableLeaderRetrievalService.start(akkaJobManagerRetriever);
      assertFalse(gatewayFuture.isDone());
      settableLeaderRetrievalService.notifyListener(address,leaderSessionId);
      JobManagerGateway jobManagerGateway=gatewayFuture.get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
      assertEquals(address,jobManagerGateway.getAddress());
    }
  finally {
      settableLeaderRetrievalService.stop();
      if (actorRef != null) {
        TestingUtils.stopActorGracefully(actorRef);
      }
    }
  }
}
