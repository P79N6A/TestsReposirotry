/** 
 * Tests that verify that the LeaderRetrievalService correctly handles non-resolvable host names and does not fail with another exception.
 */
public class LeaderRetrievalServiceHostnameResolutionTest extends TestLogger {
  private static final String nonExistingHostname="foo.bar.com.invalid";
  @BeforeClass public static void check(){
    checkPreconditions();
  }
  @Test public void testUnresolvableHostname1() throws UnknownHostException, ConfigurationException {
    Configuration config=new Configuration();
    config.setString(JobManagerOptions.ADDRESS,nonExistingHostname);
    config.setInteger(JobManagerOptions.PORT,17234);
    StandaloneUtils.createLeaderRetrievalService(config,false,JobMaster.JOB_MANAGER_NAME);
  }
  @Test public void testUnresolvableHostname2() throws Exception {
    try {
      Configuration config=new Configuration();
      config.setString(JobManagerOptions.ADDRESS,nonExistingHostname);
      config.setInteger(JobManagerOptions.PORT,17234);
      StandaloneUtils.createLeaderRetrievalService(config,true,JobMaster.JOB_MANAGER_NAME);
      fail("This should fail with an UnknownHostException");
    }
 catch (    UnknownHostException e) {
    }
  }
  private static void checkPreconditions(){
    boolean throwsException;
    try {
      InetAddress.getByName(nonExistingHostname);
      throwsException=false;
    }
 catch (    UnknownHostException e) {
      throwsException=true;
    }
    assumeTrue(throwsException);
  }
}
