/** 
 * Test accumulator within iteration.
 */
public class AccumulatorIterativeITCase extends JavaProgramTestBase {
  private static final int NUM_ITERATIONS=3;
  private static final int NUM_SUBTASKS=1;
  private static final String ACC_NAME="test";
  @Override protected boolean skipCollectionExecution(){
    return true;
  }
  @Override protected void testProgram() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(NUM_SUBTASKS);
    IterativeDataSet<Integer> iteration=env.fromElements(1,2,3).iterate(NUM_ITERATIONS);
    iteration.closeWith(iteration.reduceGroup(new SumReducer())).output(new DiscardingOutputFormat<Integer>());
    Assert.assertEquals(NUM_ITERATIONS * 6,(int)env.execute().getAccumulatorResult(ACC_NAME));
  }
static final class SumReducer extends RichGroupReduceFunction<Integer,Integer> {
    private static final long serialVersionUID=1L;
    private IntCounter testCounter=new IntCounter();
    @Override public void open(    Configuration config) throws Exception {
      getRuntimeContext().addAccumulator(ACC_NAME,this.testCounter);
    }
    @Override public void reduce(    Iterable<Integer> values,    Collector<Integer> out){
      int sum=0;
      for (      Integer value : values) {
        sum+=value;
        testCounter.add(value);
      }
      out.collect(sum);
    }
  }
}
