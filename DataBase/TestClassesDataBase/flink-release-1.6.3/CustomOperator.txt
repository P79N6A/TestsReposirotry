@SuppressWarnings("unchecked") private static class CustomOperator extends AbstractStreamOperator<Integer> implements OneInputStreamOperator<Integer,Integer> {
  List<Watermark> watermarks;
  public static List<Watermark>[] finalWatermarks=new List[PARALLELISM];
  private final boolean timestampsEnabled;
  public CustomOperator(  boolean timestampsEnabled){
    setChainingStrategy(ChainingStrategy.ALWAYS);
    this.timestampsEnabled=timestampsEnabled;
  }
  @Override public void processElement(  StreamRecord<Integer> element) throws Exception {
    if (timestampsEnabled) {
      if (element.getTimestamp() != element.getValue()) {
        Assert.fail("Timestamps are not properly handled.");
      }
    }
    output.collect(element);
  }
  @Override public void processWatermark(  Watermark mark) throws Exception {
    super.processWatermark(mark);
    for (    Watermark previousMark : watermarks) {
      assertTrue(previousMark.getTimestamp() < mark.getTimestamp());
    }
    watermarks.add(mark);
    latch.trigger();
    output.emitWatermark(mark);
  }
  @Override public void open() throws Exception {
    super.open();
    watermarks=new ArrayList<>();
  }
  @Override public void close() throws Exception {
    super.close();
    finalWatermarks[getRuntimeContext().getIndexOfThisSubtask()]=watermarks;
  }
}
