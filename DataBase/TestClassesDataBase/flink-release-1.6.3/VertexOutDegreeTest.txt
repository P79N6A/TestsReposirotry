/** 
 * Tests for  {@link VertexOutDegree}.
 */
public class VertexOutDegreeTest extends AsmTestBase {
  @Test public void testWithDirectedSimpleGraph() throws Exception {
    DataSet<Vertex<IntValue,LongValue>> outDegree=directedSimpleGraph.run(new VertexOutDegree<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,2)\n" + "(1,0)\n" + "(2,2)\n"+ "(3,2)\n"+ "(4,0)\n"+ "(5,1)";
    TestBaseUtils.compareResultAsText(outDegree.collect(),expectedResult);
  }
  @Test public void testWithUndirectedSimpleGraph() throws Exception {
    DataSet<Vertex<IntValue,LongValue>> outDegree=undirectedSimpleGraph.run(new VertexOutDegree<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,2)\n" + "(1,3)\n" + "(2,3)\n"+ "(3,4)\n"+ "(4,1)\n"+ "(5,1)";
    TestBaseUtils.compareResultAsText(outDegree.collect(),expectedResult);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> outDegreeWithoutZeroDegreeVertices=emptyGraphWithVertices.run(new VertexOutDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false));
    assertEquals(0,outDegreeWithoutZeroDegreeVertices.collect().size());
    DataSet<Vertex<LongValue,LongValue>> outDegreeWithZeroDegreeVertices=emptyGraphWithVertices.run(new VertexOutDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,0)\n" + "(1,0)\n" + "(2,0)";
    TestBaseUtils.compareResultAsText(outDegreeWithZeroDegreeVertices.collect(),expectedResult);
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> outDegreeWithoutZeroDegreeVertices=emptyGraphWithoutVertices.run(new VertexOutDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false));
    assertEquals(0,outDegreeWithoutZeroDegreeVertices.collect().size());
    DataSet<Vertex<LongValue,LongValue>> outDegreeWithZeroDegreeVertices=emptyGraphWithoutVertices.run(new VertexOutDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    assertEquals(0,outDegreeWithZeroDegreeVertices.collect().size());
  }
  @Test public void testWithRMatGraph() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> outDegree=directedRMatGraph(10,16).run(new VertexOutDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    Checksum checksum=new ChecksumHashCode<Vertex<LongValue,LongValue>>().run(outDegree).execute();
    assertEquals(902,checksum.getCount());
    assertEquals(0x0000000000e1d885L,checksum.getChecksum());
  }
}
