/** 
 * Simple  {@link KeyedBroadcastProcessFunction} that adds all incoming elements in the non-broadcastside to a listState and at the broadcast side it verifies if the stored data is the expected ones.
 */
private static class StatefulFunctionWithKeyedStateAccessedOnBroadcast extends KeyedBroadcastProcessFunction<String,String,Integer,String> {
  private static final long serialVersionUID=7496674620398203933L;
  private final ListStateDescriptor<String> listStateDesc=new ListStateDescriptor<>("listStateTest",BasicTypeInfo.STRING_TYPE_INFO);
  private final Map<String,List<String>> expectedKeyedStates;
  StatefulFunctionWithKeyedStateAccessedOnBroadcast(  Map<String,List<String>> expectedKeyedState){
    this.expectedKeyedStates=Preconditions.checkNotNull(expectedKeyedState);
  }
  @Override public void processBroadcastElement(  Integer value,  Context ctx,  Collector<String> out) throws Exception {
    ctx.applyToKeyedState(listStateDesc,new KeyedStateFunction<String,ListState<String>>(){
      @Override public void process(      String key,      ListState<String> state) throws Exception {
        final Iterator<String> it=state.get().iterator();
        final List<String> list=new ArrayList<>();
        while (it.hasNext()) {
          list.add(it.next());
        }
        assertEquals(expectedKeyedStates.get(key),list);
      }
    }
);
  }
  @Override public void processElement(  String value,  ReadOnlyContext ctx,  Collector<String> out) throws Exception {
    getRuntimeContext().getListState(listStateDesc).add(value);
  }
}
