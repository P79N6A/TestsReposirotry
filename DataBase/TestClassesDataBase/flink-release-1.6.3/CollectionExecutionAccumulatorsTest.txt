/** 
 * Tests for  {@link CollectionExecutor} with accumulators.
 */
public class CollectionExecutionAccumulatorsTest {
  private static final String ACCUMULATOR_NAME="TEST ACC";
  @Test public void testAccumulator(){
    try {
      final int numElements=100;
      ExecutionEnvironment env=ExecutionEnvironment.createCollectionsEnvironment();
      env.generateSequence(1,numElements).map(new CountingMapper()).output(new DiscardingOutputFormat<Long>());
      JobExecutionResult result=env.execute();
      assertTrue(result.getNetRuntime() >= 0);
      assertEquals(numElements,(int)result.getAccumulatorResult(ACCUMULATOR_NAME));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
@SuppressWarnings("serial") private static class CountingMapper extends RichMapFunction<Long,Long> {
    private IntCounter accumulator;
    @Override public void open(    Configuration parameters){
      accumulator=getRuntimeContext().getIntCounter(ACCUMULATOR_NAME);
    }
    @Override public Long map(    Long value){
      accumulator.add(1);
      return value;
    }
  }
}
