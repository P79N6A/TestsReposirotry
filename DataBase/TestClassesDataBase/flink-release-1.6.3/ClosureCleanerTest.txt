/** 
 * Tests for  {@link ClosureCleaner}.
 */
public class ClosureCleanerTest {
  @Test(expected=InvalidProgramException.class) public void testNonSerializable() throws Exception {
    MapCreator creator=new NonSerializableMapCreator();
    MapFunction<Integer,Integer> map=creator.getMap();
    ClosureCleaner.ensureSerializable(map);
    int result=map.map(3);
    Assert.assertEquals(result,4);
  }
  @Test public void testCleanedNonSerializable() throws Exception {
    MapCreator creator=new NonSerializableMapCreator();
    MapFunction<Integer,Integer> map=creator.getMap();
    ClosureCleaner.clean(map,true);
    int result=map.map(3);
    Assert.assertEquals(result,4);
  }
  @Test public void testSerializable() throws Exception {
    MapCreator creator=new SerializableMapCreator(1);
    MapFunction<Integer,Integer> map=creator.getMap();
    ClosureCleaner.clean(map,true);
    int result=map.map(3);
    Assert.assertEquals(result,4);
  }
  @Test public void testNestedSerializable() throws Exception {
    MapCreator creator=new NestedSerializableMapCreator(1);
    MapFunction<Integer,Integer> map=creator.getMap();
    ClosureCleaner.clean(map,true);
    ClosureCleaner.ensureSerializable(map);
    int result=map.map(3);
    Assert.assertEquals(result,4);
  }
  @Test(expected=InvalidProgramException.class) public void testNestedNonSerializable() throws Exception {
    MapCreator creator=new NestedNonSerializableMapCreator(1);
    MapFunction<Integer,Integer> map=creator.getMap();
    ClosureCleaner.clean(map,true);
    ClosureCleaner.ensureSerializable(map);
    int result=map.map(3);
    Assert.assertEquals(result,4);
  }
}
