/** 
 * Test for the current implementations of  {@link CheckpointExceptionHandler} and their factory.
 */
public class CheckpointExceptionHandlerTest extends TestLogger {
  @Test public void testRethrowingHandler(){
    DeclineDummyEnvironment environment=new DeclineDummyEnvironment();
    CheckpointExceptionHandlerFactory checkpointExceptionHandlerFactory=new CheckpointExceptionHandlerFactory();
    CheckpointExceptionHandler exceptionHandler=checkpointExceptionHandlerFactory.createCheckpointExceptionHandler(true,environment);
    CheckpointMetaData failedCheckpointMetaData=new CheckpointMetaData(42L,4711L);
    Exception testException=new Exception("test");
    try {
      exceptionHandler.tryHandleCheckpointException(failedCheckpointMetaData,testException);
      Assert.fail("Exception not rethrown.");
    }
 catch (    Exception e) {
      Assert.assertEquals(testException,e);
    }
    Assert.assertNull(environment.getLastDeclinedCheckpointCause());
  }
  @Test public void testDecliningHandler(){
    DeclineDummyEnvironment environment=new DeclineDummyEnvironment();
    CheckpointExceptionHandlerFactory checkpointExceptionHandlerFactory=new CheckpointExceptionHandlerFactory();
    CheckpointExceptionHandler exceptionHandler=checkpointExceptionHandlerFactory.createCheckpointExceptionHandler(false,environment);
    CheckpointMetaData failedCheckpointMetaData=new CheckpointMetaData(42L,4711L);
    Exception testException=new Exception("test");
    try {
      exceptionHandler.tryHandleCheckpointException(failedCheckpointMetaData,testException);
    }
 catch (    Exception e) {
      Assert.fail("Exception not handled, but rethrown.");
    }
    Assert.assertEquals(failedCheckpointMetaData.getCheckpointId(),environment.getLastDeclinedCheckpointId());
    Assert.assertEquals(testException,environment.getLastDeclinedCheckpointCause());
  }
static final class DeclineDummyEnvironment extends DummyEnvironment {
    private long lastDeclinedCheckpointId;
    private Throwable lastDeclinedCheckpointCause;
    DeclineDummyEnvironment(){
      super("test",1,0);
      this.lastDeclinedCheckpointId=Long.MIN_VALUE;
      this.lastDeclinedCheckpointCause=null;
    }
    @Override public void declineCheckpoint(    long checkpointId,    Throwable cause){
      this.lastDeclinedCheckpointId=checkpointId;
      this.lastDeclinedCheckpointCause=cause;
    }
    long getLastDeclinedCheckpointId(){
      return lastDeclinedCheckpointId;
    }
    Throwable getLastDeclinedCheckpointCause(){
      return lastDeclinedCheckpointCause;
    }
  }
}
