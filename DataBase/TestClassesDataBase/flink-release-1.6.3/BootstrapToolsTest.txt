/** 
 * Tests for  {@link BootstrapToolsTest}.
 */
public class BootstrapToolsTest {
  @Test public void testSubstituteConfigKey(){
    String deprecatedKey1="deprecated-key";
    String deprecatedKey2="another-out_of-date_key";
    String deprecatedKey3="yet-one-more";
    String designatedKey1="newkey1";
    String designatedKey2="newKey2";
    String designatedKey3="newKey3";
    String value1="value1";
    String value2Designated="designated-value2";
    String value2Deprecated="deprecated-value2";
    Configuration cfg=new Configuration();
    cfg.setString(deprecatedKey1,value1);
    cfg.setString(deprecatedKey2,value2Deprecated);
    cfg.setString(designatedKey2,value2Designated);
    BootstrapTools.substituteDeprecatedConfigKey(cfg,deprecatedKey1,designatedKey1);
    BootstrapTools.substituteDeprecatedConfigKey(cfg,deprecatedKey2,designatedKey2);
    BootstrapTools.substituteDeprecatedConfigKey(cfg,deprecatedKey3,designatedKey3);
    assertEquals(value1,cfg.getString(designatedKey1,null));
    assertEquals(value2Designated,cfg.getString(designatedKey2,null));
    assertNull(cfg.getString(designatedKey3,null));
    assertNull(cfg.getString(deprecatedKey3,null));
  }
  @Test public void testSubstituteConfigKeyPrefix(){
    String deprecatedPrefix1="deprecated-prefix";
    String deprecatedPrefix2="-prefix-2";
    String deprecatedPrefix3="prefix-3";
    String designatedPrefix1="p1";
    String designatedPrefix2="ppp";
    String designatedPrefix3="zzz";
    String depr1=deprecatedPrefix1 + "var";
    String depr2=deprecatedPrefix2 + "env";
    String depr3=deprecatedPrefix2 + "x";
    String desig1=designatedPrefix1 + "var";
    String desig2=designatedPrefix2 + "env";
    String desig3=designatedPrefix2 + "x";
    String val1="1";
    String val2="2";
    String val3Depr="3-";
    String val3Desig="3+";
    Configuration cfg=new Configuration();
    cfg.setString(depr1,val1);
    cfg.setString(depr2,val2);
    cfg.setString(depr3,val3Depr);
    cfg.setString(desig3,val3Desig);
    BootstrapTools.substituteDeprecatedConfigPrefix(cfg,deprecatedPrefix1,designatedPrefix1);
    BootstrapTools.substituteDeprecatedConfigPrefix(cfg,deprecatedPrefix2,designatedPrefix2);
    BootstrapTools.substituteDeprecatedConfigPrefix(cfg,deprecatedPrefix3,designatedPrefix3);
    assertEquals(val1,cfg.getString(desig1,null));
    assertEquals(val2,cfg.getString(desig2,null));
    assertEquals(val3Desig,cfg.getString(desig3,null));
    for (    String key : cfg.keySet()) {
      assertFalse(key.startsWith(designatedPrefix3));
      assertFalse(key.startsWith(deprecatedPrefix3));
    }
  }
  @Test public void testGetTaskManagerShellCommand(){
    final Configuration cfg=new Configuration();
    final ContaineredTaskManagerParameters containeredParams=new ContaineredTaskManagerParameters(1024,768,256,4,new HashMap<String,String>());
    final String java="$JAVA_HOME/bin/java";
    final String jvmmem="-Xms768m -Xmx768m -XX:MaxDirectMemorySize=256m";
    final String jvmOpts="-Djvm";
    final String tmJvmOpts="-DtmJvm";
    final String logfile="-Dlog.file=./logs/taskmanager.log";
    final String logback="-Dlogback.configurationFile=file:./conf/logback.xml";
    final String log4j="-Dlog4j.configuration=file:./conf/log4j.properties";
    final String mainClass="org.apache.flink.runtime.clusterframework.BootstrapToolsTest";
    final String args="--configDir ./conf";
    final String redirects="1> ./logs/taskmanager.out 2> ./logs/taskmanager.err";
    assertEquals(java + " " + jvmmem+ " "+ " "+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",false,false,false,this.getClass()));
    final String krb5="-Djava.security.krb5.conf=krb5.conf";
    assertEquals(java + " " + jvmmem+ " "+ " "+ krb5+ " "+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",false,false,true,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ logfile+ " "+ logback+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,false,false,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ krb5+ " "+ logfile+ " "+ logback+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,false,true,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ logfile+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",false,true,false,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ krb5+ " "+ logfile+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",false,true,true,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,false,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ " "+ krb5+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,true,this.getClass()));
    cfg.setString(CoreOptions.FLINK_JVM_OPTIONS,jvmOpts);
    assertEquals(java + " " + jvmmem+ " "+ jvmOpts+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,false,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ jvmOpts+ " "+ krb5+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,true,this.getClass()));
    cfg.setString(CoreOptions.FLINK_TM_JVM_OPTIONS,tmJvmOpts);
    assertEquals(java + " " + jvmmem+ " "+ jvmOpts+ " "+ tmJvmOpts+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,false,this.getClass()));
    assertEquals(java + " " + jvmmem+ " "+ jvmOpts+ " "+ tmJvmOpts+ " "+ krb5+ " "+ logfile+ " "+ logback+ " "+ log4j+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,true,this.getClass()));
    cfg.setString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,"%java% 1 %jvmmem% 2 %jvmopts% 3 %logging% 4 %class% 5 %args% 6 %redirects%");
    assertEquals(java + " 1 " + jvmmem+ " 2 "+ jvmOpts+ " "+ tmJvmOpts+ " "+ krb5+ " 3 "+ logfile+ " "+ logback+ " "+ log4j+ " 4 "+ mainClass+ " 5 "+ args+ " 6 "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,true,this.getClass()));
    cfg.setString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,"%java% %logging% %jvmopts% %jvmmem% %class% %args% %redirects%");
    assertEquals(java + " " + logfile+ " "+ logback+ " "+ log4j+ " "+ jvmOpts+ " "+ tmJvmOpts+ " "+ krb5+ " "+ jvmmem+ " "+ mainClass+ " "+ args+ " "+ redirects,BootstrapTools.getTaskManagerShellCommand(cfg,containeredParams,"./conf","./logs",true,true,true,this.getClass()));
  }
  @Test public void testUpdateTmpDirectoriesInConfiguration(){
    Configuration config=new Configuration();
    BootstrapTools.updateTmpDirectoriesInConfiguration(config,"default/directory/path");
    assertEquals(config.getString(CoreOptions.TMP_DIRS),"default/directory/path");
    BootstrapTools.updateTmpDirectoriesInConfiguration(config,"not/default/directory/path");
    assertEquals(config.getString(CoreOptions.TMP_DIRS),"default/directory/path");
    config.setString(CoreOptions.TMP_DIRS,"");
    BootstrapTools.updateTmpDirectoriesInConfiguration(config,"some/new/path");
    assertEquals(config.getString(CoreOptions.TMP_DIRS),"");
  }
  @Test public void testShouldNotUpdateTmpDirectoriesInConfigurationIfNoValueConfigured(){
    Configuration config=new Configuration();
    BootstrapTools.updateTmpDirectoriesInConfiguration(config,null);
    assertEquals(config.getString(CoreOptions.TMP_DIRS),CoreOptions.TMP_DIRS.defaultValue());
  }
}
