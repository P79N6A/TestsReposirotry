private static final class TestingAsynchronousOperationHandlers extends AbstractAsynchronousOperationHandlers<TestOperationKey,String> {
class TestingTriggerHandler extends TriggerHandler<RestfulGateway,EmptyRequestBody,EmptyMessageParameters> {
    protected TestingTriggerHandler(    CompletableFuture<String> localRestAddress,    GatewayRetriever<? extends RestfulGateway> leaderRetriever,    Time timeout,    Map<String,String> responseHeaders,    MessageHeaders<EmptyRequestBody,TriggerResponse,EmptyMessageParameters> messageHeaders){
      super(localRestAddress,leaderRetriever,timeout,responseHeaders,messageHeaders);
    }
    @Override protected CompletableFuture<String> triggerOperation(    HandlerRequest<EmptyRequestBody,EmptyMessageParameters> request,    RestfulGateway gateway) throws RestHandlerException {
      return gateway.triggerSavepoint(new JobID(),null,false,timeout);
    }
    @Override protected TestOperationKey createOperationKey(    HandlerRequest<EmptyRequestBody,EmptyMessageParameters> request){
      return new TestOperationKey(new TriggerId());
    }
  }
class TestingStatusHandler extends StatusHandler<RestfulGateway,OperationResult,TriggerMessageParameters> {
    protected TestingStatusHandler(    CompletableFuture<String> localRestAddress,    GatewayRetriever<? extends RestfulGateway> leaderRetriever,    Time timeout,    Map<String,String> responseHeaders,    MessageHeaders<EmptyRequestBody,AsynchronousOperationResult<OperationResult>,TriggerMessageParameters> messageHeaders){
      super(localRestAddress,leaderRetriever,timeout,responseHeaders,messageHeaders);
    }
    @Override protected TestOperationKey getOperationKey(    HandlerRequest<EmptyRequestBody,TriggerMessageParameters> request){
      final TriggerId triggerId=request.getPathParameter(TriggerIdPathParameter.class);
      return new TestOperationKey(triggerId);
    }
    @Override protected OperationResult exceptionalOperationResultResponse(    Throwable throwable){
      return new OperationResult(null,throwable);
    }
    @Override protected OperationResult operationResultResponse(    String operationResult){
      return new OperationResult(operationResult,null);
    }
  }
}
