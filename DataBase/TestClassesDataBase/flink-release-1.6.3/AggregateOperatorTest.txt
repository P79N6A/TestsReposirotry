/** 
 * Tests for  {@link DataSet#aggregate(Aggregations,int)}.
 */
public class AggregateOperatorTest {
  private final List<Tuple5<Integer,Long,String,Long,Integer>> emptyTupleData=new ArrayList<Tuple5<Integer,Long,String,Long,Integer>>();
  private final TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>> tupleTypeInfo=new TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  private final List<Long> emptyLongData=new ArrayList<Long>();
  @Test public void testFieldsAggregate(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.aggregate(Aggregations.SUM,1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.aggregate(Aggregations.SUM,10);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    DataSet<Long> longDs=env.fromCollection(emptyLongData,BasicTypeInfo.LONG_TYPE_INFO);
    try {
      longDs.aggregate(Aggregations.MIN,1);
      Assert.fail();
    }
 catch (    InvalidProgramException uoe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testAggregationTypes(){
    try {
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
      tupleDs.aggregate(Aggregations.SUM,0).and(Aggregations.MIN,4);
      tupleDs.aggregate(Aggregations.MIN,2).aggregate(Aggregations.SUM,1);
      try {
        tupleDs.aggregate(Aggregations.SUM,2);
        Assert.fail();
      }
 catch (      UnsupportedAggregationTypeException iae) {
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
  }
}
