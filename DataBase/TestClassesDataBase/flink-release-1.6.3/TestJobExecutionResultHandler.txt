private class TestJobExecutionResultHandler extends TestHandler<EmptyRequestBody,JobExecutionResultResponseBody,JobMessageParameters> {
  private final Iterator<Object> jobExecutionResults;
  private Object lastJobExecutionResult;
  private TestJobExecutionResultHandler(  final Object... jobExecutionResults){
    super(JobExecutionResultHeaders.getInstance());
    checkArgument(Arrays.stream(jobExecutionResults).allMatch(object -> object instanceof JobExecutionResultResponseBody || object instanceof RestHandlerException));
    this.jobExecutionResults=Arrays.asList(jobExecutionResults).iterator();
  }
  @Override protected CompletableFuture<JobExecutionResultResponseBody> handleRequest(  @Nonnull HandlerRequest<EmptyRequestBody,JobMessageParameters> request,  @Nonnull DispatcherGateway gateway) throws RestHandlerException {
    if (jobExecutionResults.hasNext()) {
      lastJobExecutionResult=jobExecutionResults.next();
    }
    checkState(lastJobExecutionResult != null);
    if (lastJobExecutionResult instanceof JobExecutionResultResponseBody) {
      return CompletableFuture.completedFuture((JobExecutionResultResponseBody)lastJobExecutionResult);
    }
 else     if (lastJobExecutionResult instanceof RestHandlerException) {
      return FutureUtils.completedExceptionally((RestHandlerException)lastJobExecutionResult);
    }
 else {
      throw new AssertionError();
    }
  }
}
