private static class CheckingTimelyStatefulOperator extends AbstractStreamOperator<Tuple2<Long,Long>> implements OneInputStreamOperator<Tuple2<Long,Long>,Tuple2<Long,Long>>, Triggerable<Long,Long> {
  private static final long serialVersionUID=1L;
  public static final String SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR=CheckingTimelyStatefulOperator.class + "_PROCESS_CHECKS";
  public static final String SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR=CheckingTimelyStatefulOperator.class + "_ET_CHECKS";
  public static final String SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR=CheckingTimelyStatefulOperator.class + "_PT_CHECKS";
  private final ValueStateDescriptor<Long> stateDescriptor=new ValueStateDescriptor<Long>("state-name",LongSerializer.INSTANCE);
  private transient InternalTimerService<Long> timerService;
  @Override public void open() throws Exception {
    super.open();
    timerService=getInternalTimerService("timer",LongSerializer.INSTANCE,this);
    getRuntimeContext().addAccumulator(SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR,new IntCounter());
    getRuntimeContext().addAccumulator(SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR,new IntCounter());
    getRuntimeContext().addAccumulator(SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR,new IntCounter());
  }
  @Override public void processElement(  StreamRecord<Tuple2<Long,Long>> element) throws Exception {
    ValueState<Long> state=getKeyedStateBackend().getPartitionedState(element.getValue().f0,LongSerializer.INSTANCE,stateDescriptor);
    assertEquals(state.value(),element.getValue().f1);
    getRuntimeContext().getAccumulator(SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR).add(1);
    output.collect(element);
  }
  @Override public void onEventTime(  InternalTimer<Long,Long> timer) throws Exception {
    ValueState<Long> state=getKeyedStateBackend().getPartitionedState(timer.getNamespace(),LongSerializer.INSTANCE,stateDescriptor);
    assertEquals(state.value(),timer.getNamespace());
    getRuntimeContext().getAccumulator(SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR).add(1);
  }
  @Override public void onProcessingTime(  InternalTimer<Long,Long> timer) throws Exception {
    ValueState<Long> state=getKeyedStateBackend().getPartitionedState(timer.getNamespace(),LongSerializer.INSTANCE,stateDescriptor);
    assertEquals(state.value(),timer.getNamespace());
    getRuntimeContext().getAccumulator(SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR).add(1);
  }
}
