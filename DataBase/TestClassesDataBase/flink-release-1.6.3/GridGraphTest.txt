/** 
 * Tests for  {@link GridGraph}.
 */
public class GridGraphTest extends GraphGeneratorTestBase {
  @Test public void testGraph() throws Exception {
    Graph<LongValue,NullValue,NullValue> graph=new GridGraph(env).addDimension(2,false).addDimension(3,false).generate();
    String vertices="0; 1; 2; 3; 4; 5";
    String edges="0,1; 0,3; 1,0; 1,2; 1,4; 2,1; 2,5; 3,0; 3,4; 4,1;" + "4,3; 4,5; 5,2; 5,4";
    TestUtils.compareGraph(graph,vertices,edges);
  }
  @Test public void testGraphMetrics() throws Exception {
    Graph<LongValue,NullValue,NullValue> graph=new GridGraph(env).addDimension(2,true).addDimension(3,true).addDimension(5,true).addDimension(7,true).generate();
    assertEquals(2 * 3 * 5* 7,graph.numberOfVertices());
    assertEquals(7 * 2 * 3* 5* 7,graph.numberOfEdges());
    long minInDegree=graph.inDegrees().min(1).collect().get(0).f1.getValue();
    long minOutDegree=graph.outDegrees().min(1).collect().get(0).f1.getValue();
    long maxInDegree=graph.inDegrees().max(1).collect().get(0).f1.getValue();
    long maxOutDegree=graph.outDegrees().max(1).collect().get(0).f1.getValue();
    assertEquals(7,minInDegree);
    assertEquals(7,minOutDegree);
    assertEquals(7,maxInDegree);
    assertEquals(7,maxOutDegree);
  }
  @Test public void testParallelism() throws Exception {
    int parallelism=2;
    Graph<LongValue,NullValue,NullValue> graph=new GridGraph(env).addDimension(3,false).addDimension(5,false).setParallelism(parallelism).generate();
    graph.getVertices().output(new DiscardingOutputFormat<>());
    graph.getEdges().output(new DiscardingOutputFormat<>());
    TestUtils.verifyParallelism(env,parallelism);
  }
}
