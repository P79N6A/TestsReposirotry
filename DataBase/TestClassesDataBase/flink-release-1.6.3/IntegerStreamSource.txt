private static final class IntegerStreamSource extends RichSourceFunction<Integer> implements ListCheckpointed<Integer> {
  private static final long serialVersionUID=1L;
  private volatile boolean running;
  private volatile boolean isRestored;
  private int emittedCount;
  public IntegerStreamSource(){
    this.running=true;
    this.isRestored=false;
    this.emittedCount=0;
  }
  @Override public void run(  SourceContext<Integer> ctx) throws Exception {
    while (running) {
synchronized (ctx.getCheckpointLock()) {
        ctx.collect(emittedCount);
      }
      if (emittedCount < 100) {
        ++emittedCount;
      }
 else {
        emittedCount=0;
      }
      Thread.sleep(1);
    }
  }
  @Override public void cancel(){
    running=false;
  }
  @Override public List<Integer> snapshotState(  long checkpointId,  long timestamp) throws Exception {
    iterTestCheckpointVerify[getRuntimeContext().getIndexOfThisSubtask()]=emittedCount;
    return Collections.singletonList(emittedCount);
  }
  @Override public void restoreState(  List<Integer> state) throws Exception {
    if (!state.isEmpty()) {
      this.emittedCount=state.get(0);
    }
    Assert.assertEquals(iterTestCheckpointVerify[getRuntimeContext().getIndexOfThisSubtask()],emittedCount);
    iterTestRestoreWait[getRuntimeContext().getIndexOfThisSubtask()].trigger();
  }
}
