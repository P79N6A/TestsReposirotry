/** 
 * Tests for the  {@link JarRunHandler}.
 */
public class JarRunHandlerTest {
  @ClassRule public static final TemporaryFolder TMP=new TemporaryFolder();
  @Test public void testRunJar() throws Exception {
    Path uploadDir=TMP.newFolder().toPath();
    Path actualUploadDir=uploadDir.resolve("flink-web-upload");
    Files.createDirectory(actualUploadDir);
    Path emptyJar=actualUploadDir.resolve("empty.jar");
    Files.createFile(emptyJar);
    Configuration config=new Configuration();
    config.setString(WebOptions.UPLOAD_DIR,uploadDir.toString());
    MiniClusterResource clusterResource=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(config).setNumberTaskManagers(1).setNumberSlotsPerTaskManager(1).setCodebaseType(TestBaseUtils.CodebaseType.NEW).build());
    clusterResource.before();
    try {
      Configuration clientConfig=clusterResource.getClientConfiguration();
      RestClient client=new RestClient(RestClientConfiguration.fromConfiguration(clientConfig),TestingUtils.defaultExecutor());
      try {
        JarRunHeaders headers=JarRunHeaders.getInstance();
        JarRunMessageParameters parameters=headers.getUnresolvedMessageParameters();
        parameters.jarIdPathParameter.resolve(emptyJar.getFileName().toString());
        String host=clientConfig.getString(RestOptions.ADDRESS);
        int port=clientConfig.getInteger(RestOptions.PORT);
        try {
          client.sendRequest(host,port,headers,parameters,new JarRunRequestBody()).get();
        }
 catch (        Exception e) {
          Optional<RestClientException> expected=ExceptionUtils.findThrowable(e,RestClientException.class);
          if (expected.isPresent()) {
            assertTrue(expected.get().getMessage().contains("ProgramInvocationException"));
            assertTrue(expected.get().getMessage().contains("empty.jar'. zip file is empty"));
          }
 else {
            throw e;
          }
        }
      }
  finally {
        client.shutdown(Time.milliseconds(10));
      }
    }
  finally {
      clusterResource.after();
    }
  }
}
