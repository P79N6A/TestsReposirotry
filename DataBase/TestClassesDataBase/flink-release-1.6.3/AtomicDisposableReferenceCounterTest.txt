public class AtomicDisposableReferenceCounterTest {
  @Test public void testSerialIncrementAndDecrement(){
    AtomicDisposableReferenceCounter counter=new AtomicDisposableReferenceCounter();
    assertTrue(counter.increment());
    assertTrue(counter.decrement());
    assertFalse(counter.increment());
    assertFalse(counter.decrement());
  }
  @Test public void testSerialIncrementAndDecrementWithCustomDisposeCount(){
    AtomicDisposableReferenceCounter counter=new AtomicDisposableReferenceCounter(-2);
    assertTrue(counter.increment());
    assertFalse(counter.decrement());
    assertFalse(counter.decrement());
    assertTrue(counter.decrement());
  }
  @Test public void testConcurrentIncrementAndDecrement() throws InterruptedException, ExecutionException, TimeoutException {
    final Random random=new Random();
    final ExecutorService executor=Executors.newFixedThreadPool(2);
    try {
      final MockIncrementer incrementer=new MockIncrementer();
      final MockDecrementer decrementer=new MockDecrementer();
      for (int i=0; i < 256; i++) {
        final AtomicDisposableReferenceCounter counter=new AtomicDisposableReferenceCounter();
        incrementer.setCounter(counter);
        decrementer.setCounter(counter);
        counter.increment();
        boolean incrementFirst=random.nextBoolean();
        Future<Boolean> success1=executor.submit(incrementFirst ? incrementer : decrementer);
        Future<Boolean> success2=executor.submit(incrementFirst ? decrementer : incrementer);
        assertTrue(success1.get() ^ success2.get());
      }
    }
  finally {
      executor.shutdownNow();
    }
  }
private static class MockIncrementer implements Callable<Boolean> {
    private AtomicDisposableReferenceCounter counter;
    void setCounter(    AtomicDisposableReferenceCounter counter){
      this.counter=counter;
    }
    @Override public Boolean call() throws Exception {
      return counter.increment();
    }
  }
private static class MockDecrementer implements Callable<Boolean> {
    private AtomicDisposableReferenceCounter counter;
    void setCounter(    AtomicDisposableReferenceCounter counter){
      this.counter=counter;
    }
    @Override public Boolean call() throws Exception {
      return counter.decrement();
    }
  }
}
