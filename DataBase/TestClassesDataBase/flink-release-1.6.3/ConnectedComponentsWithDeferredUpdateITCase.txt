/** 
 * Delta iteration test implementing the connected components algorithm with a cogroup and join on the solution set.
 */
@RunWith(Parameterized.class) public class ConnectedComponentsWithDeferredUpdateITCase extends JavaProgramTestBase {
  private static final long SEED=0xBADC0FFEEBEEFL;
  private static final int NUM_VERTICES=1000;
  private static final int NUM_EDGES=10000;
  private final boolean extraMapper;
  protected String verticesPath;
  protected String edgesPath;
  protected String resultPath;
  public ConnectedComponentsWithDeferredUpdateITCase(  boolean extraMapper){
    this.extraMapper=extraMapper;
  }
  @Override protected void preSubmit() throws Exception {
    verticesPath=createTempFile("vertices.txt",ConnectedComponentsData.getEnumeratingVertices(NUM_VERTICES));
    edgesPath=createTempFile("edges.txt",ConnectedComponentsData.getRandomOddEvenEdges(NUM_EDGES,NUM_VERTICES,SEED));
    resultPath=getTempFilePath("results");
  }
  @Override protected void testProgram() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple1<Long>> vertices=env.readCsvFile(verticesPath).types(Long.class);
    DataSet<Tuple2<Long,Long>> edges=env.readCsvFile(edgesPath).fieldDelimiter(" ").types(Long.class,Long.class).flatMap(new ConnectedComponents.UndirectEdge());
    DataSet<Tuple2<Long,Long>> verticesWithInitialId=vertices.map(new ConnectedComponentsITCase.DuplicateValue<Long>());
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=verticesWithInitialId.iterateDelta(verticesWithInitialId,100,0);
    DataSet<Tuple2<Long,Long>> changes=iteration.getWorkset().join(edges).where(0).equalTo(0).with(new ConnectedComponents.NeighborWithComponentIDJoin()).groupBy(0).aggregate(Aggregations.MIN,1).join(iteration.getSolutionSet()).where(0).equalTo(0).with(new UpdateComponentIdMatchNonPreserving());
    DataSet<Tuple2<Long,Long>> delta;
    if (extraMapper) {
      delta=changes.map(new MapFunction<Tuple2<Long,Long>,Tuple2<Long,Long>>(){
        private static final long serialVersionUID=-3929364091829757322L;
        @Override public Tuple2<Long,Long> map(        Tuple2<Long,Long> v) throws Exception {
          return v;
        }
      }
);
    }
 else {
      delta=changes;
    }
    DataSet<Tuple2<Long,Long>> result=iteration.closeWith(delta,changes);
    result.writeAsCsv(resultPath,"\n"," ");
    env.execute("Connected Components Example");
  }
  @Override protected void postSubmit() throws Exception {
    for (    BufferedReader reader : getResultReader(resultPath)) {
      ConnectedComponentsData.checkOddEvenResult(reader);
    }
  }
  @Parameters public static Collection<Object[]> getConfigurations(){
    return Arrays.asList(new Object[]{false},new Object[]{true});
  }
private static final class UpdateComponentIdMatchNonPreserving implements FlatJoinFunction<Tuple2<Long,Long>,Tuple2<Long,Long>,Tuple2<Long,Long>> {
    private static final long serialVersionUID=1L;
    @Override public void join(    Tuple2<Long,Long> candidate,    Tuple2<Long,Long> current,    Collector<Tuple2<Long,Long>> out) throws Exception {
      if (candidate.f1 < current.f1) {
        out.collect(candidate);
      }
    }
  }
}
