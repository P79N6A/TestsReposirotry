public class MainThreadValidationTest extends TestLogger {
  @Test public void failIfNotInMainThread() throws Exception {
    try {
      assert false;
      return;
    }
 catch (    AssertionError ignored) {
    }
    AkkaRpcService akkaRpcService=new AkkaRpcService(AkkaUtils.createDefaultActorSystem(),Time.milliseconds(10000));
    try {
      TestEndpoint testEndpoint=new TestEndpoint(akkaRpcService);
      testEndpoint.start();
      testEndpoint.getSelfGateway(TestGateway.class).someConcurrencyCriticalFunction();
      boolean exceptionThrown;
      try {
        testEndpoint.someConcurrencyCriticalFunction();
        exceptionThrown=false;
      }
 catch (      AssertionError e) {
        exceptionThrown=true;
      }
      assertTrue("should fail with an assertion error",exceptionThrown);
      testEndpoint.shutDown();
    }
  finally {
      akkaRpcService.stopService().get();
    }
  }
interface TestGateway extends RpcGateway {
    void someConcurrencyCriticalFunction();
  }
@SuppressWarnings("unused") public static class TestEndpoint extends RpcEndpoint implements TestGateway {
    public TestEndpoint(    RpcService rpcService){
      super(rpcService);
    }
    @Override public CompletableFuture<Void> postStop(){
      return CompletableFuture.completedFuture(null);
    }
    @Override public void someConcurrencyCriticalFunction(){
      validateRunsInMainThread();
    }
  }
}
