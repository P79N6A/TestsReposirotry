/** 
 * Tests for the  {@link JsonRowFormatFactory}.
 */
public class JsonRowFormatFactoryTest extends TestLogger {
  private static final String JSON_SCHEMA="{" + "  'title': 'Fruit'," + "  'type': 'object',"+ "  'properties': {"+ "    'name': {"+ "      'type': 'string'"+ "    },"+ "    'count': {"+ "      'type': 'integer'"+ "    },"+ "    'time': {"+ "      'description': 'row time',"+ "      'type': 'string',"+ "      'format': 'date-time'"+ "    }"+ "  },"+ "  'required': ['name', 'count', 'time']"+ "}";
  private static final TypeInformation<Row> SCHEMA=Types.ROW(new String[]{"field1","field2"},new TypeInformation[]{Types.BOOLEAN(),Types.INT()});
  @Test public void testSchema(){
    final Map<String,String> properties=toMap(new Json().schema(SCHEMA).failOnMissingField(false));
    testSchemaSerializationSchema(properties);
    testSchemaDeserializationSchema(properties);
  }
  @Test public void testJsonSchema(){
    final Map<String,String> properties=toMap(new Json().jsonSchema(JSON_SCHEMA).failOnMissingField(true));
    testJsonSchemaSerializationSchema(properties);
    testJsonSchemaDeserializationSchema(properties);
  }
  @Test public void testSchemaDerivation(){
    final Map<String,String> properties=toMap(new Schema().field("field1",Types.BOOLEAN()).field("field2",Types.INT()).field("proctime",Types.SQL_TIMESTAMP()).proctime(),new Json().deriveSchema());
    testSchemaSerializationSchema(properties);
    testSchemaDeserializationSchema(properties);
  }
  private void testSchemaDeserializationSchema(  Map<String,String> properties){
    final DeserializationSchema<?> actual2=TableFactoryService.find(DeserializationSchemaFactory.class,properties).createDeserializationSchema(properties);
    final JsonRowDeserializationSchema expected2=new JsonRowDeserializationSchema(SCHEMA);
    expected2.setFailOnMissingField(false);
    assertEquals(expected2,actual2);
  }
  private void testSchemaSerializationSchema(  Map<String,String> properties){
    final SerializationSchema<?> actual1=TableFactoryService.find(SerializationSchemaFactory.class,properties).createSerializationSchema(properties);
    final SerializationSchema expected1=new JsonRowSerializationSchema(SCHEMA);
    assertEquals(expected1,actual1);
  }
  private void testJsonSchemaDeserializationSchema(  Map<String,String> properties){
    final DeserializationSchema<?> actual2=TableFactoryService.find(DeserializationSchemaFactory.class,properties).createDeserializationSchema(properties);
    final JsonRowDeserializationSchema expected2=new JsonRowDeserializationSchema(JSON_SCHEMA);
    expected2.setFailOnMissingField(true);
    assertEquals(expected2,actual2);
  }
  private void testJsonSchemaSerializationSchema(  Map<String,String> properties){
    final SerializationSchema<?> actual1=TableFactoryService.find(SerializationSchemaFactory.class,properties).createSerializationSchema(properties);
    final SerializationSchema<?> expected1=new JsonRowSerializationSchema(JSON_SCHEMA);
    assertEquals(expected1,actual1);
  }
  private static Map<String,String> toMap(  Descriptor... desc){
    final DescriptorProperties descriptorProperties=new DescriptorProperties(true);
    for (    Descriptor d : desc) {
      d.addProperties(descriptorProperties);
    }
    return descriptorProperties.asMap();
  }
}
