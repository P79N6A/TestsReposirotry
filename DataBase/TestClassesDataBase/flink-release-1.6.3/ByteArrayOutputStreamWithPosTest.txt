/** 
 * Tests for  {@link ByteArrayOutputStreamWithPos}.
 */
public class ByteArrayOutputStreamWithPosTest {
  private static final int BUFFER_SIZE=32;
  @Rule public ExpectedException thrown=ExpectedException.none();
  private ByteArrayOutputStreamWithPos stream;
  @Before public void setup(){
    stream=new ByteArrayOutputStreamWithPos(BUFFER_SIZE);
  }
  /** 
 * Test setting position which is exactly the same with the buffer size.
 */
  @Test public void testSetPositionWhenBufferIsFull() throws Exception {
    stream.write(new byte[BUFFER_SIZE]);
    Assert.assertEquals(BUFFER_SIZE,stream.getBuf().length);
    Assert.assertEquals(BUFFER_SIZE,stream.getPosition());
    stream.setPosition(BUFFER_SIZE);
    Assert.assertEquals(BUFFER_SIZE,stream.getPosition());
  }
  /** 
 * Test setting negative position.
 */
  @Test public void testSetNegativePosition() throws Exception {
    stream.write(new byte[BUFFER_SIZE]);
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage("Position out of bounds");
    stream.setPosition(-1);
  }
  /** 
 * Test setting position larger than buffer size.
 */
  @Test public void testSetPositionLargerThanBufferSize() throws Exception {
    stream.write(new byte[BUFFER_SIZE]);
    Assert.assertEquals(BUFFER_SIZE,stream.getBuf().length);
    stream.setPosition(BUFFER_SIZE + 1);
    Assert.assertEquals(BUFFER_SIZE * 2,stream.getBuf().length);
    Assert.assertEquals(BUFFER_SIZE + 1,stream.getPosition());
  }
  /** 
 * Test that toString returns a substring of the buffer with range(0, position).
 */
  @Test public void testToString() throws IOException {
    byte[] data="1234567890".getBytes(ConfigConstants.DEFAULT_CHARSET);
    ByteArrayOutputStreamWithPos stream=new ByteArrayOutputStreamWithPos(data.length);
    stream.write(data);
    Assert.assertArrayEquals(data,stream.toString().getBytes(ConfigConstants.DEFAULT_CHARSET));
    for (int i=0; i < data.length; i++) {
      stream.setPosition(i);
      Assert.assertArrayEquals(Arrays.copyOf(data,i),stream.toString().getBytes(ConfigConstants.DEFAULT_CHARSET));
    }
    stream.setPosition(data.length + 1);
    Assert.assertArrayEquals(Arrays.copyOf(data,data.length + 1),stream.toString().getBytes(ConfigConstants.DEFAULT_CHARSET));
  }
}
