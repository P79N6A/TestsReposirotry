/** 
 * It cases which test the interaction of the resource manager with job manager and task managers. Runs all tests in one Actor system.
 */
public class ResourceManagerITCase extends TestLogger {
  private static ActorSystem system;
  private static Configuration config=new Configuration();
  private HighAvailabilityServices highAvailabilityServices;
  @BeforeClass public static void setup(){
    system=AkkaUtils.createActorSystem(AkkaUtils.getDefaultAkkaConfig());
  }
  @AfterClass public static void teardown(){
    JavaTestKit.shutdownActorSystem(system);
  }
  @Before public void setupTest(){
    highAvailabilityServices=new EmbeddedHaServices(TestingUtils.defaultExecutor());
  }
  @After public void tearDownTest() throws Exception {
    highAvailabilityServices.closeAndCleanupAllData();
    highAvailabilityServices=null;
  }
  /** 
 * Tests whether the resource manager connects and reconciles existing task managers.
 */
  @Test public void testResourceManagerReconciliation(){
    new JavaTestKit(system){
{
        new Within(duration("10 seconds")){
          @Override protected void run(){
            ActorGateway jobManager=null;
            ActorGateway resourceManager=null;
            ActorGateway forwardingActor=null;
            try {
              jobManager=TestingUtils.createJobManager(system,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),config,highAvailabilityServices,"ReconciliationTest");
              forwardingActor=TestingUtils.createForwardingActor(system,getTestActor(),jobManager.leaderSessionID(),Option.<String>empty());
              ResourceID resourceID=ResourceID.generate();
              TaskManagerLocation location=mock(TaskManagerLocation.class);
              when(location.getResourceID()).thenReturn(resourceID);
              HardwareDescription resourceProfile=HardwareDescription.extractFromSystem(1_000_000);
              jobManager.tell(new RegistrationMessages.RegisterTaskManager(resourceID,location,resourceProfile,1),forwardingActor);
              expectMsgClass(RegistrationMessages.AcknowledgeRegistration.class);
              resourceManager=TestingUtils.createResourceManager(system,config,highAvailabilityServices);
              resourceManager.tell(new TestingResourceManager.NotifyWhenResourceManagerConnected(),forwardingActor);
              expectMsgEquals(Acknowledge.get());
              resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),forwardingActor);
              TestingResourceManager.GetRegisteredResourcesReply reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
              assertEquals(1,reply.resources.size());
              assertTrue(reply.resources.contains(resourceID));
            }
  finally {
              TestingUtils.stopActorGatewaysGracefully(Arrays.asList(jobManager,resourceManager,forwardingActor));
            }
          }
        }
;
      }
    }
;
  }
  /** 
 * Tests whether the resource manager gets informed upon TaskManager registration.
 */
  @Test public void testResourceManagerTaskManagerRegistration(){
    new JavaTestKit(system){
{
        new Within(duration("30 seconds")){
          @Override protected void run(){
            ActorGateway jobManager=null;
            ActorGateway taskManager=null;
            ActorGateway resourceManager=null;
            ActorGateway forwardingActor=null;
            try {
              jobManager=TestingUtils.createJobManager(system,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),config,highAvailabilityServices,"RegTest");
              forwardingActor=TestingUtils.createForwardingActor(system,getTestActor(),jobManager.leaderSessionID(),Option.<String>empty());
              resourceManager=TestingUtils.createResourceManager(system,config,highAvailabilityServices);
              resourceManager.tell(new TestingResourceManager.NotifyWhenResourceManagerConnected(),forwardingActor);
              expectMsgEquals(Acknowledge.get());
              taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,config,true,true);
              resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),forwardingActor);
              TestingResourceManager.GetRegisteredResourcesReply reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
              assertEquals(1,reply.resources.size());
            }
  finally {
              TestingUtils.stopActorGatewaysGracefully(Arrays.asList(jobManager,resourceManager,taskManager,forwardingActor));
            }
          }
        }
;
      }
    }
;
  }
}
