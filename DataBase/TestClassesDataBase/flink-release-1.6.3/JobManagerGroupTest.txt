/** 
 * Tests for the  {@link JobManagerMetricGroup}.
 */
public class JobManagerGroupTest extends TestLogger {
  @Test public void addAndRemoveJobs() throws Exception {
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
    final JobManagerMetricGroup group=new JobManagerMetricGroup(registry,"localhost");
    final JobID jid1=new JobID();
    final JobID jid2=new JobID();
    final String jobName1="testjob";
    final String jobName2="anotherJob";
    JobManagerJobMetricGroup jmJobGroup11=group.addJob(new JobGraph(jid1,jobName1));
    JobManagerJobMetricGroup jmJobGroup12=group.addJob(new JobGraph(jid1,jobName1));
    JobManagerJobMetricGroup jmJobGroup21=group.addJob(new JobGraph(jid2,jobName2));
    assertEquals(jmJobGroup11,jmJobGroup12);
    assertEquals(2,group.numRegisteredJobMetricGroups());
    group.removeJob(jid1);
    assertTrue(jmJobGroup11.isClosed());
    assertEquals(1,group.numRegisteredJobMetricGroups());
    group.removeJob(jid2);
    assertTrue(jmJobGroup21.isClosed());
    assertEquals(0,group.numRegisteredJobMetricGroups());
    registry.shutdown().get();
  }
  @Test public void testCloseClosesAll() throws Exception {
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
    final JobManagerMetricGroup group=new JobManagerMetricGroup(registry,"localhost");
    final JobID jid1=new JobID();
    final JobID jid2=new JobID();
    final String jobName1="testjob";
    final String jobName2="anotherJob";
    JobManagerJobMetricGroup jmJobGroup11=group.addJob(new JobGraph(jid1,jobName1));
    JobManagerJobMetricGroup jmJobGroup21=group.addJob(new JobGraph(jid2,jobName2));
    group.close();
    assertTrue(jmJobGroup11.isClosed());
    assertTrue(jmJobGroup21.isClosed());
    registry.shutdown().get();
  }
  @Test public void testGenerateScopeDefault() throws Exception {
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
    JobManagerMetricGroup group=new JobManagerMetricGroup(registry,"localhost");
    assertArrayEquals(new String[]{"localhost","jobmanager"},group.getScopeComponents());
    assertEquals("localhost.jobmanager.name",group.getMetricIdentifier("name"));
    registry.shutdown().get();
  }
  @Test public void testGenerateScopeCustom() throws Exception {
    Configuration cfg=new Configuration();
    cfg.setString(MetricOptions.SCOPE_NAMING_JM,"constant.<host>.foo.<host>");
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg));
    JobManagerMetricGroup group=new JobManagerMetricGroup(registry,"host");
    assertArrayEquals(new String[]{"constant","host","foo","host"},group.getScopeComponents());
    assertEquals("constant.host.foo.host.name",group.getMetricIdentifier("name"));
    registry.shutdown().get();
  }
  @Test public void testCreateQueryServiceMetricInfo(){
    MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
    JobManagerMetricGroup jm=new JobManagerMetricGroup(registry,"host");
    QueryScopeInfo.JobManagerQueryScopeInfo info=jm.createQueryServiceMetricInfo(new DummyCharacterFilter());
    assertEquals("",info.scope);
  }
}
