/** 
 * Tests for the behavior of the metric system on a task manager.
 */
public class TaskManagerMetricsTest extends TestLogger {
  /** 
 * Tests the metric registry life cycle on JobManager re-connects.
 */
  @Test public void testMetricRegistryLifeCycle() throws Exception {
    ActorSystem actorSystem=null;
    HighAvailabilityServices highAvailabilityServices=new EmbeddedHaServices(TestingUtils.defaultExecutor());
    final MetricRegistryImpl metricRegistry=new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(new Configuration()));
    try {
      actorSystem=AkkaUtils.createLocalActorSystem(new Configuration());
      final ActorRef jobManager=JobManager.startJobManagerActors(new Configuration(),actorSystem,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),highAvailabilityServices,NoOpMetricRegistry.INSTANCE,Option.empty(),JobManager.class,MemoryArchivist.class)._1();
      final Configuration config=new Configuration();
      final ResourceID tmResourceID=ResourceID.generate();
      TaskManagerServicesConfiguration taskManagerServicesConfiguration=TaskManagerServicesConfiguration.fromConfiguration(config,InetAddress.getLocalHost(),false);
      TaskManagerConfiguration taskManagerConfiguration=TaskManagerConfiguration.fromConfiguration(config);
      TaskManagerServices taskManagerServices=TaskManagerServices.fromConfiguration(taskManagerServicesConfiguration,tmResourceID,Executors.directExecutor(),EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag(),EnvironmentInformation.getMaxJvmHeapMemory());
      TaskManagerMetricGroup taskManagerMetricGroup=MetricUtils.instantiateTaskManagerMetricGroup(metricRegistry,taskManagerServices.getTaskManagerLocation(),taskManagerServices.getNetworkEnvironment());
      final Props tmProps=TaskManager.getTaskManagerProps(TaskManager.class,taskManagerConfiguration,tmResourceID,taskManagerServices.getTaskManagerLocation(),taskManagerServices.getMemoryManager(),taskManagerServices.getIOManager(),taskManagerServices.getNetworkEnvironment(),taskManagerServices.getTaskManagerStateStore(),highAvailabilityServices,taskManagerMetricGroup);
      final ActorRef taskManager=actorSystem.actorOf(tmProps);
      new JavaTestKit(actorSystem){
{
          new Within(new FiniteDuration(5000,TimeUnit.SECONDS)){
            @Override protected void run(){
              taskManager.tell(TaskManagerMessages.getNotifyWhenRegisteredAtJobManagerMessage(),getTestActor());
              TaskManagerMessages.RegisteredAtJobManager registeredAtJobManager=expectMsgClass(TaskManagerMessages.RegisteredAtJobManager.class);
              UUID leaderId=registeredAtJobManager.leaderId();
              taskManager.tell(new TaskManagerMessages.JobManagerLeaderAddress(jobManager.path().toString(),leaderId),jobManager);
              taskManager.tell(TaskManagerMessages.getNotifyWhenRegisteredAtJobManagerMessage(),getTestActor());
              expectMsgClass(TaskManagerMessages.RegisteredAtJobManager.class);
            }
          }
;
        }
      }
;
      Assert.assertFalse(metricRegistry.isShutdown());
      actorSystem.shutdown();
      actorSystem.awaitTermination();
    }
  finally {
      if (actorSystem != null) {
        actorSystem.shutdown();
      }
      if (highAvailabilityServices != null) {
        highAvailabilityServices.closeAndCleanupAllData();
      }
      metricRegistry.shutdown().get();
    }
  }
}
