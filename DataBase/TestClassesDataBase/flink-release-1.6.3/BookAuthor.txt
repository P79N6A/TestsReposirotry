public static class BookAuthor implements Comparable<BookAuthor> {
  private long authorId;
  private List<String> bookTitles;
  private String authorName;
  public BookAuthor(){
  }
  public BookAuthor(  long authorId,  List<String> bookTitles,  String authorName){
    this.authorId=authorId;
    this.bookTitles=bookTitles;
    this.authorName=authorName;
  }
  @Override public boolean equals(  Object obj){
    if (obj.getClass() == BookAuthor.class) {
      BookAuthor other=(BookAuthor)obj;
      return other.authorName.equals(this.authorName) && other.authorId == this.authorId && other.bookTitles.equals(this.bookTitles);
    }
 else {
      return false;
    }
  }
  @Override public int compareTo(  BookAuthor o){
    int cmp=(this.authorId < o.authorId ? -1 : (this.authorId == o.authorId ? 0 : 1));
    if (cmp != 0)     return cmp;
    int size=this.bookTitles.size();
    int oSize=o.bookTitles.size();
    cmp=(size < oSize ? -1 : (size == oSize ? 0 : 1));
    if (cmp != 0)     return cmp;
    for (int i=0; i < size; i++) {
      cmp=this.bookTitles.get(i).compareTo(o.bookTitles.get(i));
      if (cmp != 0)       return cmp;
    }
    return this.authorName.compareTo(o.authorName);
  }
}
