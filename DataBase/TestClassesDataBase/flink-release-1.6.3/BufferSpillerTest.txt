/** 
 * Tests for  {@link BufferSpiller}.
 */
public class BufferSpillerTest extends BufferBlockerTestBase {
  private static IOManager ioManager;
  private BufferSpiller spiller;
  @BeforeClass public static void setupIOManager(){
    ioManager=new IOManagerAsync();
  }
  @AfterClass public static void shutdownIOManager(){
    ioManager.shutdown();
  }
  @Before public void createSpiller() throws IOException {
    spiller=new BufferSpiller(ioManager,PAGE_SIZE);
  }
  @After public void cleanupSpiller() throws IOException {
    if (spiller != null) {
      spiller.close();
      assertFalse(spiller.getCurrentChannel().isOpen());
      assertFalse(spiller.getCurrentSpillFile().exists());
    }
    checkNoTempFilesRemain();
  }
  @Override public BufferBlocker createBufferBlocker(){
    return spiller;
  }
  /** 
 * Tests that the static HEADER_SIZE field has valid header size.
 */
  @Test public void testHeaderSizeStaticField() throws Exception {
    int size=13;
    BufferOrEvent boe=generateRandomBuffer(size,0);
    spiller.add(boe);
    assertEquals("Changed the header format, but did not adjust the HEADER_SIZE field",BufferSpiller.HEADER_SIZE + size,spiller.getBytesBlocked());
  }
  private static void checkNoTempFilesRemain(){
    for (    File dir : ioManager.getSpillingDirectories()) {
      for (      String file : dir.list()) {
        if (file != null && !(file.equals(".") || file.equals(".."))) {
          fail("barrier buffer did not clean up temp files. remaining file: " + file);
        }
      }
    }
  }
}
