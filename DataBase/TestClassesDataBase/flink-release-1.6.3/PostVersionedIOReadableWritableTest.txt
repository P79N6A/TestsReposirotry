/** 
 * Suite of tests for  {@link PostVersionedIOReadableWritable}.
 */
public class PostVersionedIOReadableWritableTest {
  @Test public void testReadVersioned() throws IOException {
    String payload="test-data";
    TestPostVersionedReadableWritable versionedReadableWritable=new TestPostVersionedReadableWritable(payload);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      versionedReadableWritable.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     TestPostVersionedReadableWritable restoredVersionedReadableWritable=new TestPostVersionedReadableWritable();
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      restoredVersionedReadableWritable.read(in);
    }
     Assert.assertEquals(payload,restoredVersionedReadableWritable.getData());
  }
  @Test public void testReadNonVersioned() throws IOException {
    int preVersionedPayload=563;
    TestNonVersionedReadableWritable nonVersionedReadableWritable=new TestNonVersionedReadableWritable(preVersionedPayload);
    byte[] serialized;
    try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
      nonVersionedReadableWritable.write(new DataOutputViewStreamWrapper(out));
      serialized=out.toByteArray();
    }
     TestPostVersionedReadableWritable restoredVersionedReadableWritable=new TestPostVersionedReadableWritable();
    try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
      restoredVersionedReadableWritable.read(in);
    }
     Assert.assertEquals(String.valueOf(preVersionedPayload),restoredVersionedReadableWritable.getData());
  }
static class TestPostVersionedReadableWritable extends PostVersionedIOReadableWritable {
    private static final int VERSION=1;
    private String data;
    TestPostVersionedReadableWritable(){
    }
    TestPostVersionedReadableWritable(    String data){
      this.data=data;
    }
    @Override public int getVersion(){
      return VERSION;
    }
    @Override public void write(    DataOutputView out) throws IOException {
      super.write(out);
      out.writeUTF(data);
    }
    @Override protected void read(    DataInputView in,    boolean wasVersioned) throws IOException {
      if (wasVersioned) {
        this.data=in.readUTF();
      }
 else {
        this.data=String.valueOf(in.readInt());
      }
    }
    public String getData(){
      return data;
    }
  }
static class TestNonVersionedReadableWritable implements IOReadableWritable {
    private int data;
    TestNonVersionedReadableWritable(    int data){
      this.data=data;
    }
    @Override public void write(    DataOutputView out) throws IOException {
      out.writeInt(data);
    }
    @Override public void read(    DataInputView in) throws IOException {
      this.data=in.readInt();
    }
  }
}
