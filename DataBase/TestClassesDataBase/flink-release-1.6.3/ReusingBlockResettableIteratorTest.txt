public class ReusingBlockResettableIteratorTest {
  private static final int MEMORY_CAPACITY=3 * 128 * 1024;
  private static final int NUM_VALUES=20000;
  private MemoryManager memman;
  private Iterator<Record> reader;
  private List<Record> objects;
  private final TypeSerializer<Record> serializer=RecordSerializer.get();
  @Before public void startup(){
    this.memman=new MemoryManager(MEMORY_CAPACITY,1);
    this.objects=new ArrayList<Record>(20000);
    for (int i=0; i < NUM_VALUES; ++i) {
      this.objects.add(new Record(new IntValue(i)));
    }
    this.reader=objects.iterator();
  }
  @After public void shutdown(){
    this.objects=null;
    if (!this.memman.verifyEmpty()) {
      Assert.fail("A memory leak has occurred: Not all memory was properly returned to the memory manager.");
    }
    this.memman.shutdown();
    this.memman=null;
  }
  @Test public void testSerialBlockResettableIterator() throws Exception {
    final AbstractInvokable memOwner=new DummyInvokable();
    final ReusingBlockResettableIterator<Record> iterator=new ReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);
    iterator.open();
    int lower=0;
    int upper=0;
    do {
      lower=upper;
      upper=lower;
      while (iterator.hasNext()) {
        Record target=iterator.next();
        int val=target.getField(0,IntValue.class).getValue();
        Assert.assertEquals(upper++,val);
      }
      for (int i=0; i < 5; ++i) {
        iterator.reset();
        int count=0;
        while (iterator.hasNext()) {
          Record target=iterator.next();
          int val=target.getField(0,IntValue.class).getValue();
          Assert.assertEquals(lower + (count++),val);
        }
        Assert.assertEquals(upper - lower,count);
      }
    }
 while (iterator.nextBlock());
    Assert.assertEquals(NUM_VALUES,upper);
    iterator.close();
  }
  @Test public void testDoubleBufferedBlockResettableIterator() throws Exception {
    final AbstractInvokable memOwner=new DummyInvokable();
    final ReusingBlockResettableIterator<Record> iterator=new ReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,2,memOwner);
    iterator.open();
    int lower=0;
    int upper=0;
    do {
      lower=upper;
      upper=lower;
      while (iterator.hasNext()) {
        Record target=iterator.next();
        int val=target.getField(0,IntValue.class).getValue();
        Assert.assertEquals(upper++,val);
      }
      for (int i=0; i < 5; ++i) {
        iterator.reset();
        int count=0;
        while (iterator.hasNext()) {
          Record target=iterator.next();
          int val=target.getField(0,IntValue.class).getValue();
          Assert.assertEquals(lower + (count++),val);
        }
        Assert.assertEquals(upper - lower,count);
      }
    }
 while (iterator.nextBlock());
    Assert.assertEquals(NUM_VALUES,upper);
    iterator.close();
  }
  @Test public void testTwelveFoldBufferedBlockResettableIterator() throws Exception {
    final AbstractInvokable memOwner=new DummyInvokable();
    final ReusingBlockResettableIterator<Record> iterator=new ReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,12,memOwner);
    iterator.open();
    int lower=0;
    int upper=0;
    do {
      lower=upper;
      upper=lower;
      while (iterator.hasNext()) {
        Record target=iterator.next();
        int val=target.getField(0,IntValue.class).getValue();
        Assert.assertEquals(upper++,val);
      }
      for (int i=0; i < 5; ++i) {
        iterator.reset();
        int count=0;
        while (iterator.hasNext()) {
          Record target=iterator.next();
          int val=target.getField(0,IntValue.class).getValue();
          Assert.assertEquals(lower + (count++),val);
        }
        Assert.assertEquals(upper - lower,count);
      }
    }
 while (iterator.nextBlock());
    Assert.assertEquals(NUM_VALUES,upper);
    iterator.close();
  }
}
