@SuppressWarnings({"serial","rawtypes"}) private static class TestIntComparator extends TypeComparator<Integer> {
  private TypeComparator[] comparators=new TypeComparator[]{new IntComparator(true)};
  @Override public int hash(  Integer record){
    return record;
  }
  @Override public void setReference(  Integer toCompare){
    throw new UnsupportedOperationException();
  }
  @Override public boolean equalToReference(  Integer candidate){
    throw new UnsupportedOperationException();
  }
  @Override public int compareToReference(  TypeComparator<Integer> referencedComparator){
    throw new UnsupportedOperationException();
  }
  @Override public int compare(  Integer first,  Integer second){
    throw new UnsupportedOperationException();
  }
  @Override public int compareSerialized(  DataInputView firstSource,  DataInputView secondSource){
    throw new UnsupportedOperationException();
  }
  @Override public boolean supportsNormalizedKey(){
    throw new UnsupportedOperationException();
  }
  @Override public boolean supportsSerializationWithKeyNormalization(){
    throw new UnsupportedOperationException();
  }
  @Override public int getNormalizeKeyLen(){
    throw new UnsupportedOperationException();
  }
  @Override public boolean isNormalizedKeyPrefixOnly(  int keyBytes){
    throw new UnsupportedOperationException();
  }
  @Override public void putNormalizedKey(  Integer record,  MemorySegment target,  int offset,  int numBytes){
    throw new UnsupportedOperationException();
  }
  @Override public void writeWithKeyNormalization(  Integer record,  DataOutputView target) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public Integer readWithKeyDenormalization(  Integer reuse,  DataInputView source) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public boolean invertNormalizedKey(){
    throw new UnsupportedOperationException();
  }
  @Override public TypeComparator<Integer> duplicate(){
    throw new UnsupportedOperationException();
  }
  @Override public int extractKeys(  Object record,  Object[] target,  int index){
    target[index]=record;
    return 1;
  }
  @Override public TypeComparator[] getFlatComparators(){
    return comparators;
  }
}
