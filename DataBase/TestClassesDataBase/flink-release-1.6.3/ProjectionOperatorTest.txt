/** 
 * Tests for  {@link DataSet#project(int)}.
 */
public class ProjectionOperatorTest {
  private final List<Tuple5<Integer,Long,String,Long,Integer>> emptyTupleData=new ArrayList<Tuple5<Integer,Long,String,Long,Integer>>();
  private final TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>> tupleTypeInfo=new TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  private final List<Long> emptyLongData=new ArrayList<Long>();
  @Test public void testFieldsProjection(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.project(0);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.project(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.project(0,5,2);
      Assert.fail();
    }
 catch (    IndexOutOfBoundsException ioobe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    DataSet<Long> longDs=env.fromCollection(emptyLongData,BasicTypeInfo.LONG_TYPE_INFO);
    try {
      longDs.project(0);
      Assert.fail();
    }
 catch (    UnsupportedOperationException uoe) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testProjectionTypes(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.project(0);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.project(2,1,4);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testProjectionWithoutTypes(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.project(2,0,4);
    }
 catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.project(2,-1,4);
      Assert.fail();
    }
 catch (    IndexOutOfBoundsException iob) {
    }
catch (    Exception e) {
      Assert.fail();
    }
    try {
      tupleDs.project(2,1,4,5,8,9);
      Assert.fail();
    }
 catch (    IndexOutOfBoundsException iob) {
    }
catch (    Exception e) {
      Assert.fail();
    }
  }
}
