private static class EventTimeTriggeringStatefulProcessFunction extends CoProcessFunction<Integer,String,String> {
  private static final long serialVersionUID=1L;
  private final ValueStateDescriptor<String> state=new ValueStateDescriptor<>("seen-element",StringSerializer.INSTANCE);
  @Override public void processElement1(  Integer value,  Context ctx,  Collector<String> out) throws Exception {
    handleValue(value,out,ctx.timerService(),1);
  }
  @Override public void processElement2(  String value,  Context ctx,  Collector<String> out) throws Exception {
    handleValue(value,out,ctx.timerService(),2);
  }
  private void handleValue(  Object value,  Collector<String> out,  TimerService timerService,  int channel) throws IOException {
    final ValueState<String> state=getRuntimeContext().getState(this.state);
    if (state.value() == null) {
      out.collect("INPUT" + channel + ":"+ value);
      state.update(String.valueOf(value));
      timerService.registerEventTimeTimer(timerService.currentWatermark() + 5);
    }
 else {
      state.clear();
      timerService.deleteEventTimeTimer(timerService.currentWatermark() + 4);
    }
  }
  @Override public void onTimer(  long timestamp,  OnTimerContext ctx,  Collector<String> out) throws Exception {
    assertEquals(TimeDomain.EVENT_TIME,ctx.timeDomain());
    out.collect("STATE:" + getRuntimeContext().getState(state).value());
  }
}
