public class JarFileCreatorTest {
  @Test public void TestAnonymousInnerClassTrick1() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(AnonymousInStaticMethod.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInStaticMethod$1.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInStaticMethod$A.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInStaticMethod.class");
    Assert.assertTrue("Jar file for Anonymous Inner Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestAnonymousInnerClassTrick2() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(AnonymousInNonStaticMethod.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod$1.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod$A.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod.class");
    Assert.assertTrue("Jar file for Anonymous Inner Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestAnonymousInnerClassTrick3() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(AnonymousInNonStaticMethod2.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod2$1.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod2$A.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/AnonymousInNonStaticMethod2.class");
    Assert.assertTrue("Jar file for Anonymous Inner Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestAnonymousInnerClassTrick4() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(NestedAnonymousInnerClass.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/NestedAnonymousInnerClass.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/NestedAnonymousInnerClass$1$1.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/NestedAnonymousInnerClass$1.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/NestedAnonymousInnerClass$A.class");
    Assert.assertTrue("Jar file for Anonymous Inner Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Ignore @Test public void testFilterWithMethodReference() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(FilterWithMethodReference.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/FilterWithMethodReference.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordFilter.class");
    Assert.assertTrue("Jar file for Java 8 method reference is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void testFilterWithLambda() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(FilterWithLambda.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/FilterWithLambda.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordFilter.class");
    Assert.assertTrue("Jar file for Java 8 lambda is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void testFilterWithIndirection() throws Exception {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(FilterWithIndirection.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/FilterWithIndirection.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordFilter.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/UtilFunctionWrapper$UtilFunction.class");
    Assert.assertTrue("Jar file for java 8 lambda is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestExternalClass() throws IOException {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(WordCountWithExternalClass.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/StaticData.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithExternalClass.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/ExternalTokenizer.class");
    Assert.assertTrue("Jar file for External Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestInnerClass() throws IOException {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(WordCountWithInnerClass.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/StaticData.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithInnerClass.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithInnerClass$Tokenizer.class");
    Assert.assertTrue("Jar file for Inner Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestAnonymousClass() throws IOException {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(WordCountWithAnonymousClass.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/StaticData.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithAnonymousClass.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithAnonymousClass$1.class");
    Assert.assertTrue("Jar file for Anonymous Class is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestExtendIdentifier() throws IOException {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(WordCountWithExternalClass2.class).createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/StaticData.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithExternalClass2.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/ExternalTokenizer2.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/ExternalTokenizer.class");
    Assert.assertTrue("Jar file for Extend Identifier is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  @Test public void TestUDFPackage() throws IOException {
    File out=new File(System.getProperty("java.io.tmpdir"),"jarcreatortest.jar");
    JarFileCreator jfc=new JarFileCreator(out);
    jfc.addClass(WordCountWithInnerClass.class).addPackage("org.apache.flink.util").createJarFile();
    Set<String> ans=new HashSet<>();
    ans.add("org/apache/flink/runtime/util/jartestprogram/StaticData.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithInnerClass.class");
    ans.add("org/apache/flink/runtime/util/jartestprogram/WordCountWithInnerClass$Tokenizer.class");
    ans.add("org/apache/flink/util/Collector.class");
    Assert.assertTrue("Jar file for UDF package is not correct",validate(ans,out));
    Assert.assertTrue(out.delete());
  }
  private boolean validate(  Set<String> expected,  File out) throws IOException {
    int count=expected.size();
    try (JarInputStream jis=new JarInputStream(new FileInputStream(out))){
      ZipEntry ze;
      while ((ze=jis.getNextEntry()) != null) {
        count--;
        expected.remove(ze.getName());
      }
    }
     return count == 0 && expected.size() == 0;
  }
}
