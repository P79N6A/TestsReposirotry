private static final class SingleRunningJobsRegistry implements RunningJobsRegistry {
  @Nonnull private final JobID expectedJobId;
  @Nonnull private final OneShotLatch clearedJobLatch;
  private JobSchedulingStatus jobSchedulingStatus=JobSchedulingStatus.PENDING;
  private boolean containsJob=false;
  private SingleRunningJobsRegistry(  @Nonnull JobID expectedJobId,  @Nonnull OneShotLatch clearedJobLatch){
    this.expectedJobId=expectedJobId;
    this.clearedJobLatch=clearedJobLatch;
  }
  @Override public void setJobRunning(  JobID jobID){
    checkJobId(jobID);
    containsJob=true;
    jobSchedulingStatus=JobSchedulingStatus.RUNNING;
  }
  private void checkJobId(  JobID jobID){
    Preconditions.checkArgument(expectedJobId.equals(jobID));
  }
  @Override public void setJobFinished(  JobID jobID){
    checkJobId(jobID);
    containsJob=true;
    jobSchedulingStatus=JobSchedulingStatus.DONE;
  }
  @Override public JobSchedulingStatus getJobSchedulingStatus(  JobID jobID){
    checkJobId(jobID);
    return jobSchedulingStatus;
  }
  public boolean contains(  JobID jobId){
    checkJobId(jobId);
    return containsJob;
  }
  @Override public void clearJob(  JobID jobID){
    checkJobId(jobID);
    containsJob=false;
    clearedJobLatch.trigger();
  }
}
