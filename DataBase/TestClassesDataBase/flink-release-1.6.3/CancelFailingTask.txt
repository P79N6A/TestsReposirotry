/** 
 * A task that locks if cancellation attempts to cleanly shut down.
 */
public static class CancelFailingTask extends StreamTask<String,AbstractStreamOperator<String>> {
  public CancelFailingTask(  Environment env){
    super(env);
  }
  @Override protected void init(){
  }
  @Override protected void run() throws Exception {
    final OneShotLatch latch=new OneShotLatch();
    final Object lock=new Object();
    LockHolder holder=new LockHolder(lock,latch);
    holder.start();
    try {
      getCancelables().registerCloseable(holder);
      latch.await();
      syncLatch.trigger();
synchronized (lock) {
      }
    }
  finally {
      holder.close();
    }
  }
  @Override protected void cleanup(){
  }
  @Override protected void cancelTask() throws Exception {
    throw new Exception("test exception");
  }
}
