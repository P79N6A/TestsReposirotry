private static class MockRuntimeContext extends StreamingRuntimeContext {
  private final boolean isCheckpointingEnabled;
  private final int numParallelSubtasks;
  private final int subtaskIndex;
  private MockRuntimeContext(  boolean isCheckpointingEnabled,  int numParallelSubtasks,  int subtaskIndex){
    super(new MockStreamOperator(),new MockEnvironmentBuilder().setTaskName("mockTask").setMemorySize(4 * MemoryManager.DEFAULT_PAGE_SIZE).build(),Collections.emptyMap());
    this.isCheckpointingEnabled=isCheckpointingEnabled;
    this.numParallelSubtasks=numParallelSubtasks;
    this.subtaskIndex=subtaskIndex;
  }
  @Override public MetricGroup getMetricGroup(){
    return new UnregisteredMetricsGroup();
  }
  @Override public boolean isCheckpointingEnabled(){
    return isCheckpointingEnabled;
  }
  @Override public int getIndexOfThisSubtask(){
    return subtaskIndex;
  }
  @Override public int getNumberOfParallelSubtasks(){
    return numParallelSubtasks;
  }
private static class MockStreamOperator extends AbstractStreamOperator<Integer> {
    private static final long serialVersionUID=-1153976702711944427L;
    @Override public ExecutionConfig getExecutionConfig(){
      return new ExecutionConfig();
    }
    @Override public OperatorID getOperatorID(){
      return new OperatorID();
    }
  }
}
