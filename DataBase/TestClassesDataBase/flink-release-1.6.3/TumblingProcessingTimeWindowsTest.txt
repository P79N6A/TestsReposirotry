/** 
 * Tests for  {@link TumblingProcessingTimeWindows}.
 */
public class TumblingProcessingTimeWindowsTest extends TestLogger {
  @Test public void testWindowAssignment(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingProcessingTimeWindows assigner=TumblingProcessingTimeWindows.of(Time.milliseconds(5000));
    when(mockContext.getCurrentProcessingTime()).thenReturn(0L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(0,5000)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(4999L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(0,5000)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(5000L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(5000,10000)));
  }
  @Test public void testWindowAssignmentWithOffset(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingProcessingTimeWindows assigner=TumblingProcessingTimeWindows.of(Time.milliseconds(5000),Time.milliseconds(100));
    when(mockContext.getCurrentProcessingTime()).thenReturn(100L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(100,5100)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(5099L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(100,5100)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(5100L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(5100,10100)));
  }
  @Test public void testTimeUnits(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingProcessingTimeWindows assigner=TumblingProcessingTimeWindows.of(Time.seconds(5),Time.seconds(1));
    when(mockContext.getCurrentProcessingTime()).thenReturn(1000L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(1000,6000)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(5999L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(1000,6000)));
    when(mockContext.getCurrentProcessingTime()).thenReturn(6000L);
    assertThat(assigner.assignWindows("String",Long.MIN_VALUE,mockContext),contains(timeWindow(6000,11000)));
  }
  @Test public void testInvalidParameters(){
    try {
      TumblingProcessingTimeWindows.of(Time.seconds(-1));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
    try {
      TumblingProcessingTimeWindows.of(Time.seconds(10),Time.seconds(20));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
    try {
      TumblingProcessingTimeWindows.of(Time.seconds(10),Time.seconds(-1));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
  }
  @Test public void testProperties(){
    TumblingProcessingTimeWindows assigner=TumblingProcessingTimeWindows.of(Time.seconds(5),Time.milliseconds(100));
    assertFalse(assigner.isEventTime());
    assertEquals(new TimeWindow.Serializer(),assigner.getWindowSerializer(new ExecutionConfig()));
    assertThat(assigner.getDefaultTrigger(mock(StreamExecutionEnvironment.class)),instanceOf(ProcessingTimeTrigger.class));
  }
}
