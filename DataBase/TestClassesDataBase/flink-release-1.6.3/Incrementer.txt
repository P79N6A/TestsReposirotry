/** 
 * Task repeatedly incrementing the  {@link CheckpointIDCounter}.
 */
private static class Incrementer implements Callable<List<Long>> {
  /** 
 * Total number of  {@link CheckpointIDCounter#getAndIncrement()} calls. 
 */
  private final static int NumIncrements=128;
  private final CountDownLatch startLatch;
  private final CheckpointIDCounter counter;
  public Incrementer(  CountDownLatch startLatch,  CheckpointIDCounter counter){
    this.startLatch=startLatch;
    this.counter=counter;
  }
  @Override public List<Long> call() throws Exception {
    final Random rand=new Random();
    final List<Long> counts=new ArrayList<>();
    this.startLatch.await();
    for (int i=0; i < NumIncrements; i++) {
      counts.add(counter.getAndIncrement());
      Thread.sleep(rand.nextInt(20));
    }
    return counts;
  }
}
