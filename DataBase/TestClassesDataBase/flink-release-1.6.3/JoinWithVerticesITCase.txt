/** 
 * Tests for  {@link Graph#joinWithVertices}.
 */
@RunWith(Parameterized.class) public class JoinWithVerticesITCase extends MultipleProgramsTestBase {
  public JoinWithVerticesITCase(  TestExecutionMode mode){
    super(mode);
  }
  private String expectedResult;
  @Test public void testJoinWithVertexSet() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> res=graph.joinWithVertices(graph.getVertices().map(new VertexToTuple2Map<>()),new AddValuesMapper());
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,2\n" + "2,4\n" + "3,6\n"+ "4,8\n"+ "5,10\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testWithLessElements() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> res=graph.joinWithVertices(graph.getVertices().first(3).map(new VertexToTuple2Map<>()),new AddValuesMapper());
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,2\n" + "2,4\n" + "3,6\n"+ "4,4\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testWithDifferentType() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> res=graph.joinWithVertices(graph.getVertices().first(3).map(new ProjectIdWithTrue()),new DoubleIfTrueMapper());
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,2\n" + "2,4\n" + "3,6\n"+ "4,4\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testWithDifferentKeys() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> res=graph.joinWithVertices(TestGraphUtils.getLongLongTuple2Data(env),new ProjectSecondMapper());
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,10\n" + "2,20\n" + "3,30\n"+ "4,40\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
  @Test public void testWithCustomType() throws Exception {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> res=graph.joinWithVertices(TestGraphUtils.getLongCustomTuple2Data(env),new CustomValueMapper());
    DataSet<Vertex<Long,Long>> data=res.getVertices();
    List<Vertex<Long,Long>> result=data.collect();
    expectedResult="1,10\n" + "2,20\n" + "3,30\n"+ "4,40\n"+ "5,5\n";
    compareResultAsTuples(result,expectedResult);
  }
@SuppressWarnings("serial") private static final class AddValuesMapper implements VertexJoinFunction<Long,Long> {
    public Long vertexJoin(    Long vertexValue,    Long inputValue){
      return vertexValue + inputValue;
    }
  }
@SuppressWarnings("serial") private static final class ProjectIdWithTrue implements MapFunction<Vertex<Long,Long>,Tuple2<Long,Boolean>> {
    public Tuple2<Long,Boolean> map(    Vertex<Long,Long> vertex) throws Exception {
      return new Tuple2<>(vertex.getId(),true);
    }
  }
@SuppressWarnings("serial") private static final class DoubleIfTrueMapper implements VertexJoinFunction<Long,Boolean> {
    public Long vertexJoin(    Long vertexValue,    Boolean inputValue){
      if (inputValue) {
        return vertexValue * 2;
      }
 else {
        return vertexValue;
      }
    }
  }
@SuppressWarnings("serial") private static final class ProjectSecondMapper implements VertexJoinFunction<Long,Long> {
    public Long vertexJoin(    Long vertexValue,    Long inputValue){
      return inputValue;
    }
  }
@SuppressWarnings("serial") private static final class CustomValueMapper implements VertexJoinFunction<Long,DummyCustomParameterizedType<Float>> {
    public Long vertexJoin(    Long vertexValue,    DummyCustomParameterizedType<Float> inputValue){
      return (long)inputValue.getIntField();
    }
  }
}
