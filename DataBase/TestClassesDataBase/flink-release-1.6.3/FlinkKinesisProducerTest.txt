/** 
 * Suite of  {@link FlinkKinesisProducer} tests.
 */
public class FlinkKinesisProducerTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void testCreateWithNonSerializableDeserializerFails(){
    exception.expect(IllegalArgumentException.class);
    exception.expectMessage("The provided serialization schema is not serializable");
    new FlinkKinesisProducer<>(new NonSerializableSerializationSchema(),TestUtils.getStandardProperties());
  }
  @Test public void testCreateWithSerializableDeserializer(){
    new FlinkKinesisProducer<>(new SerializableSerializationSchema(),TestUtils.getStandardProperties());
  }
  @Test public void testConfigureWithNonSerializableCustomPartitionerFails(){
    exception.expect(IllegalArgumentException.class);
    exception.expectMessage("The provided custom partitioner is not serializable");
    new FlinkKinesisProducer<>(new SimpleStringSchema(),TestUtils.getStandardProperties()).setCustomPartitioner(new NonSerializableCustomPartitioner());
  }
  @Test public void testConfigureWithSerializableCustomPartitioner(){
    new FlinkKinesisProducer<>(new SimpleStringSchema(),TestUtils.getStandardProperties()).setCustomPartitioner(new SerializableCustomPartitioner());
  }
  @Test public void testProducerIsSerializable(){
    FlinkKinesisProducer<String> consumer=new FlinkKinesisProducer<>(new SimpleStringSchema(),TestUtils.getStandardProperties());
    assertTrue(InstantiationUtil.isSerializable(consumer));
  }
  /** 
 * Test ensuring that if an invoke call happens right after an async exception is caught, it should be rethrown.
 */
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void testAsyncErrorRethrownOnInvoke() throws Throwable {
    final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
    OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
    testHarness.open();
    testHarness.processElement(new StreamRecord<>("msg-1"));
    producer.getPendingRecordFutures().get(0).setException(new Exception("artificial async exception"));
    try {
      testHarness.processElement(new StreamRecord<>("msg-2"));
    }
 catch (    Exception e) {
      Assert.assertTrue(ExceptionUtils.findThrowableWithMessage(e,"artificial async exception").isPresent());
      return;
    }
    Assert.fail();
  }
  /** 
 * Test ensuring that if a snapshot call happens right after an async exception is caught, it should be rethrown.
 */
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void testAsyncErrorRethrownOnCheckpoint() throws Throwable {
    final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
    OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
    testHarness.open();
    testHarness.processElement(new StreamRecord<>("msg-1"));
    producer.getPendingRecordFutures().get(0).setException(new Exception("artificial async exception"));
    try {
      testHarness.snapshot(123L,123L);
    }
 catch (    Exception e) {
      Assert.assertTrue(ExceptionUtils.findThrowableWithMessage(e,"artificial async exception").isPresent());
      return;
    }
    Assert.fail();
  }
  /** 
 * Test ensuring that if an async exception is caught for one of the flushed requests on checkpoint, it should be rethrown; we set a timeout because the test will not finish if the logic is broken. <p>Note that this test does not test the snapshot method is blocked correctly when there are pending records. The test for that is covered in testAtLeastOnceProducer.
 */
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test(timeout=10000) public void testAsyncErrorRethrownAfterFlush() throws Throwable {
    final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
    OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
    testHarness.open();
    testHarness.processElement(new StreamRecord<>("msg-1"));
    testHarness.processElement(new StreamRecord<>("msg-2"));
    testHarness.processElement(new StreamRecord<>("msg-3"));
    UserRecordResult result=mock(UserRecordResult.class);
    when(result.isSuccessful()).thenReturn(true);
    producer.getPendingRecordFutures().get(0).set(result);
    CheckedThread snapshotThread=new CheckedThread(){
      @Override public void go() throws Exception {
        testHarness.snapshot(123L,123L);
      }
    }
;
    snapshotThread.start();
    producer.getPendingRecordFutures().get(1).setException(new Exception("artificial async failure for 2nd message"));
    producer.getPendingRecordFutures().get(2).set(mock(UserRecordResult.class));
    try {
      snapshotThread.sync();
    }
 catch (    Exception e) {
      Assert.assertTrue(ExceptionUtils.findThrowableWithMessage(e,"artificial async failure for 2nd message").isPresent());
      return;
    }
    Assert.fail();
  }
  /** 
 * Test ensuring that the producer is not dropping buffered records; we set a timeout because the test will not finish if the logic is broken.
 */
  @SuppressWarnings({"unchecked","ResultOfMethodCallIgnored"}) @Test(timeout=10000) public void testAtLeastOnceProducer() throws Throwable {
    final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
    OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
    testHarness.open();
    testHarness.processElement(new StreamRecord<>("msg-1"));
    testHarness.processElement(new StreamRecord<>("msg-2"));
    testHarness.processElement(new StreamRecord<>("msg-3"));
    CheckedThread snapshotThread=new CheckedThread(){
      @Override public void go() throws Exception {
        testHarness.snapshot(123L,123L);
      }
    }
;
    snapshotThread.start();
    producer.waitUntilFlushStarted();
    Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
    UserRecordResult result=mock(UserRecordResult.class);
    when(result.isSuccessful()).thenReturn(true);
    producer.getPendingRecordFutures().get(0).set(result);
    Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
    producer.getPendingRecordFutures().get(1).set(result);
    Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
    producer.getPendingRecordFutures().get(2).set(result);
    snapshotThread.sync();
    testHarness.close();
  }
  /** 
 * Test ensuring that the producer blocks if the queue limit is exceeded, until the queue length drops below the limit; we set a timeout because the test will not finish if the logic is broken.
 */
  @Test(timeout=10000) public void testBackpressure() throws Throwable {
    final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
    producer.setQueueLimit(1);
    OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
    testHarness.open();
    UserRecordResult result=mock(UserRecordResult.class);
    when(result.isSuccessful()).thenReturn(true);
    CheckedThread msg1=new CheckedThread(){
      @Override public void go() throws Exception {
        testHarness.processElement(new StreamRecord<>("msg-1"));
      }
    }
;
    msg1.start();
    msg1.trySync(100);
    assertFalse("Flush triggered before reaching queue limit",msg1.isAlive());
    producer.getPendingRecordFutures().get(0).set(result);
    CheckedThread msg2=new CheckedThread(){
      @Override public void go() throws Exception {
        testHarness.processElement(new StreamRecord<>("msg-2"));
      }
    }
;
    msg2.start();
    msg2.trySync(100);
    assertFalse("Flush triggered before reaching queue limit",msg2.isAlive());
    CheckedThread moreElementsThread=new CheckedThread(){
      @Override public void go() throws Exception {
        testHarness.processElement(new StreamRecord<>("msg-3"));
        testHarness.processElement(new StreamRecord<>("msg-4"));
      }
    }
;
    moreElementsThread.start();
    moreElementsThread.trySync(100);
    assertTrue("Producer should still block, but doesn't",moreElementsThread.isAlive());
    producer.getPendingRecordFutures().get(1).set(result);
    moreElementsThread.trySync(100);
    assertTrue("Producer should still block, but doesn't",moreElementsThread.isAlive());
    producer.getPendingRecordFutures().get(2).set(result);
    moreElementsThread.trySync(100);
    assertFalse("Prodcuer still blocks although the queue is flushed",moreElementsThread.isAlive());
    producer.getPendingRecordFutures().get(3).set(result);
    testHarness.close();
  }
  /** 
 * A non-serializable  {@link KinesisSerializationSchema} (because it is a nested class with referenceto the enclosing class, which is not serializable) used for testing.
 */
private final class NonSerializableSerializationSchema implements KinesisSerializationSchema<String> {
    private static final long serialVersionUID=3361337188490178780L;
    @Override public ByteBuffer serialize(    String element){
      return ByteBuffer.wrap(element.getBytes());
    }
    @Override public String getTargetStream(    String element){
      return "test-stream";
    }
  }
  /** 
 * A static, serializable  {@link KinesisSerializationSchema}.
 */
private static final class SerializableSerializationSchema implements KinesisSerializationSchema<String> {
    private static final long serialVersionUID=6298573834520052886L;
    @Override public ByteBuffer serialize(    String element){
      return ByteBuffer.wrap(element.getBytes());
    }
    @Override public String getTargetStream(    String element){
      return "test-stream";
    }
  }
  /** 
 * A non-serializable  {@link KinesisPartitioner} (because it is a nested class with referenceto the enclosing class, which is not serializable) used for testing.
 */
private final class NonSerializableCustomPartitioner extends KinesisPartitioner<String> {
    private static final long serialVersionUID=-5961578876056779161L;
    @Override public String getPartitionId(    String element){
      return "test-partition";
    }
  }
  /** 
 * A static, serializable  {@link KinesisPartitioner}.
 */
private static final class SerializableCustomPartitioner extends KinesisPartitioner<String> {
    private static final long serialVersionUID=-4996071893997035695L;
    @Override public String getPartitionId(    String element){
      return "test-partition";
    }
  }
private static class DummyFlinkKinesisProducer<T> extends FlinkKinesisProducer<T> {
    private static final long serialVersionUID=-1212425318784651817L;
    private static final String DUMMY_STREAM="dummy-stream";
    private static final String DUMMY_PARTITION="dummy-partition";
    private transient KinesisProducer mockProducer;
    private List<SettableFuture<UserRecordResult>> pendingRecordFutures=new LinkedList<>();
    private transient MultiShotLatch flushLatch;
    DummyFlinkKinesisProducer(    SerializationSchema<T> schema){
      super(schema,TestUtils.getStandardProperties());
      setDefaultStream(DUMMY_STREAM);
      setDefaultPartition(DUMMY_PARTITION);
      setFailOnError(true);
      this.mockProducer=mock(KinesisProducer.class);
      when(mockProducer.addUserRecord(anyString(),anyString(),anyString(),any(ByteBuffer.class))).thenAnswer(new Answer<Object>(){
        @Override public Object answer(        InvocationOnMock invocationOnMock) throws Throwable {
          SettableFuture<UserRecordResult> future=SettableFuture.create();
          pendingRecordFutures.add(future);
          return future;
        }
      }
);
      when(mockProducer.getOutstandingRecordsCount()).thenAnswer(new Answer<Object>(){
        @Override public Object answer(        InvocationOnMock invocationOnMock) throws Throwable {
          return getNumPendingRecordFutures();
        }
      }
);
      doAnswer(new Answer(){
        @Override public Object answer(        InvocationOnMock invocationOnMock) throws Throwable {
          flushLatch.trigger();
          return null;
        }
      }
).when(mockProducer).flush();
      this.flushLatch=new MultiShotLatch();
    }
    @Override protected KinesisProducer getKinesisProducer(    KinesisProducerConfiguration producerConfig){
      return mockProducer;
    }
    @Override public void snapshotState(    FunctionSnapshotContext context) throws Exception {
      super.snapshotState(context);
      if (mockProducer.getOutstandingRecordsCount() > 0) {
        throw new RuntimeException("Flushing is enabled; snapshots should be blocked until all pending records are flushed");
      }
    }
    List<SettableFuture<UserRecordResult>> getPendingRecordFutures(){
      return pendingRecordFutures;
    }
    void waitUntilFlushStarted() throws Exception {
      flushLatch.await();
    }
    private int getNumPendingRecordFutures(){
      int numPending=0;
      for (      SettableFuture<UserRecordResult> future : pendingRecordFutures) {
        if (!future.isDone()) {
          numPending++;
        }
      }
      return numPending;
    }
  }
}
