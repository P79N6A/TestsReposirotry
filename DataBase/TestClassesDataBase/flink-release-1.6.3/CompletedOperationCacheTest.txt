/** 
 * Tests for  {@link CompletedOperationCache}.
 */
public class CompletedOperationCacheTest extends TestLogger {
  private static final OperationKey TEST_OPERATION_KEY=new OperationKey(new TriggerId());
  private static final CompletableFuture<String> TEST_OPERATION_RESULT=CompletableFuture.completedFuture("foo");
  private ManualTicker manualTicker;
  private CompletedOperationCache<OperationKey,String> completedOperationCache;
  @Before public void setUp(){
    manualTicker=new ManualTicker();
    completedOperationCache=new CompletedOperationCache<>(manualTicker);
  }
  @Test public void testShouldFinishClosingCacheIfAllResultsAreEvicted(){
    completedOperationCache.registerOngoingOperation(TEST_OPERATION_KEY,TEST_OPERATION_RESULT);
    final CompletableFuture<Void> closeCacheFuture=completedOperationCache.closeAsync();
    assertThat(closeCacheFuture.isDone(),is(false));
    manualTicker.advanceTime(300,TimeUnit.SECONDS);
    completedOperationCache.cleanUp();
    assertThat(closeCacheFuture.isDone(),is(true));
  }
  @Test public void testShouldFinishClosingCacheIfAllResultsAccessed() throws Exception {
    completedOperationCache.registerOngoingOperation(TEST_OPERATION_KEY,TEST_OPERATION_RESULT);
    final CompletableFuture<Void> closeCacheFuture=completedOperationCache.closeAsync();
    assertThat(closeCacheFuture.isDone(),is(false));
    final Either<Throwable,String> operationResultOrError=completedOperationCache.get(TEST_OPERATION_KEY);
    assertThat(operationResultOrError,is(notNullValue()));
    assertThat(operationResultOrError.right(),is(equalTo(TEST_OPERATION_RESULT.get())));
    assertThat(closeCacheFuture.isDone(),is(true));
  }
}
