private static class TestRpcConnection extends RegisteredRpcConnection<UUID,TestRegistrationGateway,TestRegistrationSuccess> {
  private final Object lock=new Object();
  private final RpcService rpcService;
  private CompletableFuture<String> connectionFuture;
  public TestRpcConnection(  String targetAddress,  UUID targetLeaderId,  Executor executor,  RpcService rpcService){
    super(LoggerFactory.getLogger(RegisteredRpcConnectionTest.class),targetAddress,targetLeaderId,executor);
    this.rpcService=rpcService;
    this.connectionFuture=new CompletableFuture<>();
  }
  @Override protected RetryingRegistration<UUID,TestRegistrationGateway,RetryingRegistrationTest.TestRegistrationSuccess> generateRegistration(){
    return new RetryingRegistrationTest.TestRetryingRegistration(rpcService,getTargetAddress(),getTargetLeaderId());
  }
  @Override protected void onRegistrationSuccess(  RetryingRegistrationTest.TestRegistrationSuccess success){
synchronized (lock) {
      connectionFuture.complete(success.getCorrelationId());
    }
  }
  @Override protected void onRegistrationFailure(  Throwable failure){
synchronized (lock) {
      connectionFuture.completeExceptionally(failure);
    }
  }
  @Override public boolean tryReconnect(){
synchronized (lock) {
      connectionFuture.cancel(false);
      connectionFuture=new CompletableFuture<>();
    }
    return super.tryReconnect();
  }
  public CompletableFuture<String> getConnectionFuture(){
synchronized (lock) {
      return connectionFuture;
    }
  }
}
