/** 
 * A series of tests (reusing one FlinkMiniCluster) where tasks fail (one or more time) and the recovery should restart them to verify job completion.
 */
@SuppressWarnings("serial") public abstract class SimpleRecoveryITCaseBase {
  @Test public void testFailedRunThenSuccessfulRun() throws Exception {
    try {
      List<Long> resultCollection=new ArrayList<Long>();
{
        ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
        env.setParallelism(4);
        env.setRestartStrategy(RestartStrategies.noRestart());
        env.getConfig().disableSysoutLogging();
        env.generateSequence(1,10).rebalance().map(new FailingMapper1<Long>()).reduce(new ReduceFunction<Long>(){
          @Override public Long reduce(          Long value1,          Long value2){
            return value1 + value2;
          }
        }
).output(new LocalCollectionOutputFormat<Long>(resultCollection));
        try {
          JobExecutionResult res=env.execute();
          String msg=res == null ? "null result" : "result in " + res.getNetRuntime() + " ms";
          fail("The program should have failed, but returned " + msg);
        }
 catch (        JobExecutionException e) {
        }
      }
{
        ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
        env.setParallelism(4);
        env.setRestartStrategy(RestartStrategies.noRestart());
        env.getConfig().disableSysoutLogging();
        env.generateSequence(1,10).rebalance().map(new FailingMapper1<Long>()).reduce(new ReduceFunction<Long>(){
          @Override public Long reduce(          Long value1,          Long value2){
            return value1 + value2;
          }
        }
).output(new LocalCollectionOutputFormat<Long>(resultCollection));
        executeAndRunAssertions(env);
        long sum=0;
        for (        long l : resultCollection) {
          sum+=l;
        }
        assertEquals(55,sum);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  private void executeAndRunAssertions(  ExecutionEnvironment env) throws Exception {
    try {
      JobExecutionResult result=env.execute();
      assertTrue(result.getNetRuntime() >= 0);
      assertNotNull(result.getAllAccumulatorResults());
      assertTrue(result.getAllAccumulatorResults().isEmpty());
    }
 catch (    JobExecutionException e) {
      fail("The program should have succeeded on the second run");
    }
  }
  @Test public void testRestart(){
    try {
      List<Long> resultCollection=new ArrayList<Long>();
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(4);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10).rebalance().map(new FailingMapper2<Long>()).reduce(new ReduceFunction<Long>(){
        @Override public Long reduce(        Long value1,        Long value2){
          return value1 + value2;
        }
      }
).output(new LocalCollectionOutputFormat<Long>(resultCollection));
      executeAndRunAssertions(env);
      long sum=0;
      for (      long l : resultCollection) {
        sum+=l;
      }
      assertEquals(55,sum);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testRestartMultipleTimes(){
    try {
      List<Long> resultCollection=new ArrayList<Long>();
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(4);
      env.setRestartStrategy(RestartStrategies.fixedDelayRestart(5,100));
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10).rebalance().map(new FailingMapper3<Long>()).reduce(new ReduceFunction<Long>(){
        @Override public Long reduce(        Long value1,        Long value2){
          return value1 + value2;
        }
      }
).output(new LocalCollectionOutputFormat<Long>(resultCollection));
      executeAndRunAssertions(env);
      long sum=0;
      for (      long l : resultCollection) {
        sum+=l;
      }
      assertEquals(55,sum);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
private static class FailingMapper1<T> extends RichMapFunction<T,T> {
    private static volatile int failuresBeforeSuccess=1;
    @Override public T map(    T value) throws Exception {
      if (failuresBeforeSuccess > 0 && getRuntimeContext().getIndexOfThisSubtask() == 1) {
        failuresBeforeSuccess--;
        throw new Exception("Test Failure");
      }
      return value;
    }
  }
private static class FailingMapper2<T> extends RichMapFunction<T,T> {
    private static volatile int failuresBeforeSuccess=1;
    @Override public T map(    T value) throws Exception {
      if (failuresBeforeSuccess > 0 && getRuntimeContext().getIndexOfThisSubtask() == 1) {
        failuresBeforeSuccess--;
        throw new Exception("Test Failure");
      }
      return value;
    }
  }
private static class FailingMapper3<T> extends RichMapFunction<T,T> {
    private static volatile int failuresBeforeSuccess=3;
    @Override public T map(    T value) throws Exception {
      if (failuresBeforeSuccess > 0 && getRuntimeContext().getIndexOfThisSubtask() == 1) {
        failuresBeforeSuccess--;
        throw new Exception("Test Failure");
      }
      return value;
    }
  }
}
