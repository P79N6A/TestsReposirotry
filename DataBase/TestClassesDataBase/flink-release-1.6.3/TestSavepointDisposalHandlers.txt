private class TestSavepointDisposalHandlers {
  private final TriggerId triggerId=new TriggerId();
  private final String savepointPath;
  private TestSavepointDisposalHandlers(  String savepointPath){
    this.savepointPath=Preconditions.checkNotNull(savepointPath);
  }
private class TestSavepointDisposalTriggerHandler extends TestHandler<SavepointDisposalRequest,TriggerResponse,EmptyMessageParameters> {
    private TestSavepointDisposalTriggerHandler(){
      super(SavepointDisposalTriggerHeaders.getInstance());
    }
    @Override protected CompletableFuture<TriggerResponse> handleRequest(    @Nonnull HandlerRequest<SavepointDisposalRequest,EmptyMessageParameters> request,    @Nonnull DispatcherGateway gateway){
      assertThat(request.getRequestBody().getSavepointPath(),is(savepointPath));
      return CompletableFuture.completedFuture(new TriggerResponse(triggerId));
    }
  }
private class TestSavepointDisposalStatusHandler extends TestHandler<EmptyRequestBody,AsynchronousOperationResult<AsynchronousOperationInfo>,SavepointDisposalStatusMessageParameters> {
    private final Queue<OptionalFailure<AsynchronousOperationInfo>> responses;
    private TestSavepointDisposalStatusHandler(    OptionalFailure<AsynchronousOperationInfo>... responses){
      super(SavepointDisposalStatusHeaders.getInstance());
      this.responses=new ArrayDeque<>(Arrays.asList(responses));
    }
    @Override protected CompletableFuture<AsynchronousOperationResult<AsynchronousOperationInfo>> handleRequest(    @Nonnull HandlerRequest<EmptyRequestBody,SavepointDisposalStatusMessageParameters> request,    @Nonnull DispatcherGateway gateway) throws RestHandlerException {
      final TriggerId actualTriggerId=request.getPathParameter(TriggerIdPathParameter.class);
      if (actualTriggerId.equals(triggerId)) {
        final OptionalFailure<AsynchronousOperationInfo> nextResponse=responses.poll();
        if (nextResponse != null) {
          if (nextResponse.isFailure()) {
            throw new RestHandlerException("Failure",HttpResponseStatus.BAD_REQUEST,nextResponse.getFailureCause());
          }
 else {
            return CompletableFuture.completedFuture(AsynchronousOperationResult.completed(nextResponse.getUnchecked()));
          }
        }
 else {
          throw new AssertionError();
        }
      }
 else {
        throw new AssertionError();
      }
    }
  }
}
