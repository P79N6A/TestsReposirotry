private static class StringRichFilterFunction extends RichFilterFunction<String> implements ListCheckpointed<Long> {
  static long[] counts=new long[PARALLELISM];
  private long count=0L;
  @Override public boolean filter(  String value){
    count++;
    return value.length() < 100;
  }
  @Override public void close(){
    counts[getRuntimeContext().getIndexOfThisSubtask()]=count;
  }
  @Override public List<Long> snapshotState(  long checkpointId,  long timestamp) throws Exception {
    return Collections.singletonList(this.count);
  }
  @Override public void restoreState(  List<Long> state) throws Exception {
    if (state.isEmpty() || state.size() > 1) {
      throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size());
    }
    this.count=state.get(0);
  }
}
