/** 
 * Serializer for  {@link TestElement}. The serialization format produced by this serializer allows lexicographic ordering by  {@link TestElement#getPriority}.
 */
protected static class TestElementSerializer extends TypeSerializer<TestElement> {
  private static final int REVISION=1;
  public static final TestElementSerializer INSTANCE=new TestElementSerializer();
  protected TestElementSerializer(){
  }
  @Override public boolean isImmutableType(){
    return true;
  }
  @Override public TypeSerializer<TestElement> duplicate(){
    return this;
  }
  @Override public TestElement createInstance(){
    throw new UnsupportedOperationException();
  }
  @Override public TestElement copy(  TestElement from){
    return new TestElement(from.key,from.priority);
  }
  @Override public TestElement copy(  TestElement from,  TestElement reuse){
    return copy(from);
  }
  @Override public int getLength(){
    return 2 * Long.BYTES;
  }
  @Override public void serialize(  TestElement record,  DataOutputView target) throws IOException {
    target.writeLong(MathUtils.flipSignBit(record.getPriority()));
    target.writeLong(record.getKey());
  }
  @Override public TestElement deserialize(  DataInputView source) throws IOException {
    long prio=MathUtils.flipSignBit(source.readLong());
    long key=source.readLong();
    return new TestElement(key,prio);
  }
  @Override public TestElement deserialize(  TestElement reuse,  DataInputView source) throws IOException {
    return deserialize(source);
  }
  @Override public void copy(  DataInputView source,  DataOutputView target) throws IOException {
    serialize(deserialize(source),target);
  }
  @Override public boolean equals(  Object obj){
    return false;
  }
  @Override public boolean canEqual(  Object obj){
    return false;
  }
  @Override public int hashCode(){
    return 4711;
  }
  protected int getRevision(){
    return REVISION;
  }
  @Override public TypeSerializerConfigSnapshot snapshotConfiguration(){
    return new Snapshot(getRevision());
  }
  @Override public CompatibilityResult<TestElement> ensureCompatibility(  TypeSerializerConfigSnapshot configSnapshot){
    return (configSnapshot instanceof Snapshot) && ((Snapshot)configSnapshot).revision <= getRevision() ? CompatibilityResult.compatible() : CompatibilityResult.requiresMigration();
  }
public static class Snapshot extends TypeSerializerConfigSnapshot {
    private int revision;
    public Snapshot(){
    }
    public Snapshot(    int revision){
      this.revision=revision;
    }
    @Override public boolean equals(    Object obj){
      return obj instanceof Snapshot && revision == ((Snapshot)obj).revision;
    }
    @Override public int hashCode(){
      return revision;
    }
    @Override public int getVersion(){
      return 0;
    }
    public int getRevision(){
      return revision;
    }
    @Override public void write(    DataOutputView out) throws IOException {
      super.write(out);
      out.writeInt(revision);
    }
    @Override public void read(    DataInputView in) throws IOException {
      super.read(in);
      this.revision=in.readInt();
    }
  }
}
