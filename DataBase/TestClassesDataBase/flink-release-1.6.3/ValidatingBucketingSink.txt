static class ValidatingBucketingSink<T> extends BucketingSink<T> {
  private static final long serialVersionUID=-4263974081712009141L;
  public boolean initializeCalled=false;
  private final String expectedBucketFilesPrefix;
  ValidatingBucketingSink(  String basePath,  String expectedBucketFilesPrefix){
    super(basePath);
    this.expectedBucketFilesPrefix=expectedBucketFilesPrefix;
  }
  /** 
 * The actual paths in this depend on the binary checkpoint so it you update this the paths here have to be updated as well.
 */
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    OperatorStateStore stateStore=context.getOperatorStateStore();
    ListState<State<T>> restoredBucketStates=stateStore.getSerializableListState("bucket-states");
    if (context.isRestored()) {
      for (      State<T> states : restoredBucketStates.get()) {
        for (        String bucketPath : states.bucketStates.keySet()) {
          BucketState state=states.getBucketState(new Path(bucketPath));
          String current=state.currentFile;
          long validLength=state.currentFileValidLength;
          Assert.assertEquals(expectedBucketFilesPrefix + "4",current);
          Assert.assertEquals(6,validLength);
          List<String> pendingFiles=state.pendingFiles;
          assertTrue(pendingFiles.isEmpty());
          final Map<Long,List<String>> pendingFilesPerCheckpoint=state.pendingFilesPerCheckpoint;
          Assert.assertEquals(1,pendingFilesPerCheckpoint.size());
          for (          Map.Entry<Long,List<String>> entry : pendingFilesPerCheckpoint.entrySet()) {
            long checkpoint=entry.getKey();
            List<String> files=entry.getValue();
            Assert.assertEquals(0L,checkpoint);
            Assert.assertEquals(4,files.size());
            for (int i=0; i < 4; i++) {
              Assert.assertEquals(expectedBucketFilesPrefix + i,files.get(i));
            }
          }
        }
      }
    }
    initializeCalled=true;
    super.initializeState(context);
  }
}
