/** 
 * Tests for  {@link StringValueArray}.
 */
public class CharValueArrayTest {
  @Test public void testBoundedArray(){
    int count=StringValueArray.DEFAULT_CAPACITY_IN_BYTES / 2;
    ValueArray<StringValue> sva=new StringValueArray(StringValueArray.DEFAULT_CAPACITY_IN_BYTES);
    for (int i=0; i < count; i++) {
      assertFalse(sva.isFull());
      assertEquals(i,sva.size());
      assertTrue(sva.add(new StringValue(Character.toString((char)(i & 0x7F)))));
      assertEquals(i + 1,sva.size());
    }
    assertTrue(sva.isFull());
    assertEquals(count,sva.size());
    int idx=0;
    for (    StringValue sv : sva) {
      assertEquals((idx++) & 0x7F,sv.getValue().charAt(0));
    }
    assertFalse(sva.add(new StringValue(String.valueOf((char)count))));
    assertFalse(sva.addAll(sva));
    assertEquals(sva,sva.copy());
    StringValueArray svaTo=new StringValueArray();
    sva.copyTo(svaTo);
    assertEquals(sva,svaTo);
    sva.clear();
    assertEquals(0,sva.size());
  }
  @Test public void testBoundedArrayWithVariableLengthCharacters(){
    int count=1280;
    ValueArray<StringValue> sva=new StringValueArray(3200);
    for (int i=0; i < count; i++) {
      assertFalse(sva.isFull());
      assertEquals(i,sva.size());
      assertTrue(sva.add(new StringValue(Character.toString((char)(i & 0xFF)))));
      assertEquals(i + 1,sva.size());
    }
    assertTrue(sva.isFull());
    assertEquals(count,sva.size());
    int idx=0;
    for (    StringValue sv : sva) {
      assertEquals((idx++) & 0xFF,sv.getValue().charAt(0));
    }
    assertFalse(sva.add(new StringValue(String.valueOf((char)count))));
    assertFalse(sva.addAll(sva));
    assertEquals(sva,sva.copy());
    StringValueArray svaTo=new StringValueArray();
    sva.copyTo(svaTo);
    assertEquals(sva,svaTo);
    sva.clear();
    assertEquals(0,sva.size());
  }
  @Test public void testUnboundedArray(){
    int count=4096;
    ValueArray<StringValue> sva=new StringValueArray();
    for (int i=0; i < count; i++) {
      assertFalse(sva.isFull());
      assertEquals(i,sva.size());
      assertTrue(sva.add(new StringValue(String.valueOf((char)i))));
      assertEquals(i + 1,sva.size());
    }
    assertFalse(sva.isFull());
    assertEquals(count,sva.size());
    int idx=0;
    for (    StringValue sv : sva) {
      assertEquals(idx++,sv.getValue().charAt(0));
    }
    assertTrue(sva.add(new StringValue(String.valueOf((char)count))));
    assertTrue(sva.addAll(sva));
    assertEquals(sva,sva.copy());
    StringValueArray svaTo=new StringValueArray();
    sva.copyTo(svaTo);
    assertEquals(sva,svaTo);
    int size=sva.size();
    sva.mark();
    assertTrue(sva.add(new StringValue()));
    assertEquals(size + 1,sva.size());
    sva.reset();
    assertEquals(size,sva.size());
    sva.clear();
    assertEquals(0,sva.size());
  }
}
