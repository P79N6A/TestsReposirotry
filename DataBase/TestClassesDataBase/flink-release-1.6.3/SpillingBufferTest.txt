public class SpillingBufferTest {
  private static final long SEED=649180756312423613L;
  private static final int KEY_MAX=Integer.MAX_VALUE;
  private static final int VALUE_LENGTH=114;
  private static final int NUM_PAIRS_INMEM=6000;
  private static final int NUM_PAIRS_EXTERNAL=30000;
  private static final int MEMORY_SIZE=1024 * 1024;
  private static final int NUM_MEMORY_SEGMENTS=23;
  private final AbstractInvokable parentTask=new DummyInvokable();
  private IOManager ioManager;
  private MemoryManager memoryManager;
  @Before public void beforeTest(){
    memoryManager=new MemoryManager(MEMORY_SIZE,1);
    ioManager=new IOManagerAsync();
  }
  @After public void afterTest(){
    ioManager.shutdown();
    if (!ioManager.isProperlyShutDown()) {
      Assert.fail("I/O Manager was not properly shut down.");
    }
    if (memoryManager != null) {
      Assert.assertTrue("Memory leak: not all segments have been returned to the memory manager.",memoryManager.verifyEmpty());
      memoryManager.shutdown();
      memoryManager=null;
    }
  }
  @Test public void testWriteReadInMemory() throws Exception {
    final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
    final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
    this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
    final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
    final Tuple2<Integer,String> rec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_INMEM; i++) {
      generator.next(rec);
      serializer.serialize(rec,outView);
    }
    DataInputView inView=outView.flip();
    generator.reset();
    final Tuple2<Integer,String> readRec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_INMEM; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    inView=outView.flip();
    generator.reset();
    for (int i=0; i < NUM_PAIRS_INMEM; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    this.memoryManager.release(outView.close());
    this.memoryManager.release(memory);
  }
  @Test public void testWriteReadTooMuchInMemory() throws Exception {
    final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
    final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
    this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
    final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
    final Tuple2<Integer,String> rec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_INMEM; i++) {
      generator.next(rec);
      serializer.serialize(rec,outView);
    }
    DataInputView inView=outView.flip();
    generator.reset();
    final Tuple2<Integer,String> readRec=new Tuple2<>();
    try {
      for (int i=0; i < NUM_PAIRS_INMEM + 1; i++) {
        generator.next(rec);
        serializer.deserialize(readRec,inView);
        int k1=rec.f0;
        String v1=rec.f1;
        int k2=readRec.f0;
        String v2=readRec.f1;
        Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
      }
      Assert.fail("Read too much, expected EOFException.");
    }
 catch (    EOFException eofex) {
    }
    inView=outView.flip();
    generator.reset();
    for (int i=0; i < NUM_PAIRS_INMEM; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    this.memoryManager.release(outView.close());
    this.memoryManager.release(memory);
  }
  @Test public void testWriteReadExternal() throws Exception {
    final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
    final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
    this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
    final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
    final Tuple2<Integer,String> rec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_EXTERNAL; i++) {
      generator.next(rec);
      serializer.serialize(rec,outView);
    }
    DataInputView inView=outView.flip();
    generator.reset();
    final Tuple2<Integer,String> readRec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_EXTERNAL; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    inView=outView.flip();
    generator.reset();
    for (int i=0; i < NUM_PAIRS_EXTERNAL; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    this.memoryManager.release(outView.close());
    this.memoryManager.release(memory);
  }
  @Test public void testWriteReadTooMuchExternal() throws Exception {
    final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
    final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
    this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
    final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
    final Tuple2<Integer,String> rec=new Tuple2<>();
    for (int i=0; i < NUM_PAIRS_EXTERNAL; i++) {
      generator.next(rec);
      serializer.serialize(rec,outView);
    }
    DataInputView inView=outView.flip();
    generator.reset();
    final Tuple2<Integer,String> readRec=new Tuple2<>();
    try {
      for (int i=0; i < NUM_PAIRS_EXTERNAL + 1; i++) {
        generator.next(rec);
        serializer.deserialize(readRec,inView);
        int k1=rec.f0;
        String v1=rec.f1;
        int k2=readRec.f0;
        String v2=readRec.f1;
        Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
      }
      Assert.fail("Read too much, expected EOFException.");
    }
 catch (    EOFException eofex) {
    }
    inView=outView.flip();
    generator.reset();
    for (int i=0; i < NUM_PAIRS_EXTERNAL; i++) {
      generator.next(rec);
      serializer.deserialize(readRec,inView);
      int k1=rec.f0;
      String v1=rec.f1;
      int k2=readRec.f0;
      String v2=readRec.f1;
      Assert.assertTrue("The re-generated and the notifyNonEmpty record do not match.",k1 == k2 && v1.equals(v2));
    }
    this.memoryManager.release(outView.close());
    this.memoryManager.release(memory);
  }
}
