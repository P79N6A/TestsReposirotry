/** 
 * Tests for  {@link DataSet#cross(DataSet)}.
 */
public class CrossOperatorTest {
  private static final List<Tuple5<Integer,Long,String,Long,Integer>> emptyTupleData=new ArrayList<Tuple5<Integer,Long,String,Long,Integer>>();
  private final TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>> tupleTypeInfo=new TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  private static List<CustomType> customTypeData=new ArrayList<CustomType>();
  @BeforeClass public static void insertCustomData(){
    customTypeData.add(new CustomType());
  }
  @Test public void testCrossProjection1(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection21(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection2(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0,3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection22(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0,3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection3(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0).projectSecond(3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection23(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0).projectSecond(3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection4(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0,2).projectSecond(1,4).projectFirst(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection24(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectFirst(0,2).projectSecond(1,4).projectFirst(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection5(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectSecond(0,2).projectFirst(1,4).projectFirst(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection25(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectSecond(0,2).projectFirst(1,4).projectFirst(1);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection6(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<CustomType> ds1=env.fromCollection(customTypeData);
    DataSet<CustomType> ds2=env.fromCollection(customTypeData);
    try {
      ds1.cross(ds2).projectFirst().projectSecond();
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection26(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<CustomType> ds1=env.fromCollection(customTypeData);
    DataSet<CustomType> ds2=env.fromCollection(customTypeData);
    try {
      ds1.cross(ds2).projectFirst().projectSecond();
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection7(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectSecond().projectFirst(1,4);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test public void testCrossProjection27(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      ds1.cross(ds2).projectSecond().projectFirst(1,4);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection8(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectFirst(5);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection28(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectFirst(5);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection9(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(5);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection29(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(5);
  }
  public void testCrossProjection10(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectFirst(2);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection30(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectFirst(-1);
  }
  public void testCrossProjection11(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(2);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection31(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(-1);
  }
  public void testCrossProjection12(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(2).projectFirst(1);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection32(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(2).projectFirst(-1);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection13(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectSecond(0).projectFirst(5);
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testCrossProjection14(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds1=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> ds2=env.fromCollection(emptyTupleData,tupleTypeInfo);
    ds1.cross(ds2).projectFirst(0).projectSecond(5);
  }
private static class CustomType implements Serializable {
    private static final long serialVersionUID=1L;
    public int myInt;
    public long myLong;
    public String myString;
    public CustomType(){
    }
    public CustomType(    int i,    long l,    String s){
      myInt=i;
      myLong=l;
      myString=s;
    }
    @Override public String toString(){
      return myInt + "," + myLong+ ","+ myString;
    }
  }
}
