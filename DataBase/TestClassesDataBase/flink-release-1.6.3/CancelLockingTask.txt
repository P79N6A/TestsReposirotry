/** 
 * A task that locks if cancellation attempts to cleanly shut down.
 */
public static class CancelLockingTask extends StreamTask<String,AbstractStreamOperator<String>> {
  private final OneShotLatch latch=new OneShotLatch();
  private LockHolder holder;
  public CancelLockingTask(  Environment env){
    super(env);
  }
  @Override protected void init(){
  }
  @Override protected void run() throws Exception {
    holder=new LockHolder(getCheckpointLock(),latch);
    holder.start();
    latch.await();
    syncLatch.trigger();
    try {
      Thread.sleep(100000000);
    }
 catch (    InterruptedException ignored) {
      Thread.currentThread().interrupt();
    }
  }
  @Override protected void cleanup(){
    holder.close();
  }
  @Override protected void cancelTask(){
    holder.cancel();
  }
}
