/** 
 * Integration test for streaming programs in Java examples.
 */
public class StreamingExamplesITCase extends AbstractTestBase {
  @Test public void testIterateExample() throws Exception {
    final String inputPath=createTempFile("fibonacciInput.txt",IterateExampleData.INPUT_PAIRS);
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.iteration.IterateExample.main(new String[]{"--input",inputPath,"--output",resultPath});
  }
  @Test public void testWindowJoin() throws Exception {
    final String resultPath=File.createTempFile("result-path","dir").toURI().toString();
final class Parser implements MapFunction<String,Tuple2<String,Integer>> {
      @Override public Tuple2<String,Integer> map(      String value) throws Exception {
        String[] fields=value.split(",");
        return new Tuple2<>(fields[1],Integer.parseInt(fields[2]));
      }
    }
    try {
      final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
      env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
      DataStream<Tuple2<String,Integer>> grades=env.fromElements(WindowJoinData.GRADES_INPUT.split("\n")).map(new Parser());
      DataStream<Tuple2<String,Integer>> salaries=env.fromElements(WindowJoinData.SALARIES_INPUT.split("\n")).map(new Parser());
      org.apache.flink.streaming.examples.join.WindowJoin.runWindowJoin(grades,salaries,100).writeAsText(resultPath,FileSystem.WriteMode.OVERWRITE);
      env.execute();
      checkLinesAgainstRegexp(resultPath,"^\\([a-z]+,(\\d),(\\d)+\\)");
    }
  finally {
      try {
        FileUtils.deleteDirectory(new File(resultPath));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  @Test public void testIncrementalLearningSkeleton() throws Exception {
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.ml.IncrementalLearningSkeleton.main(new String[]{"--output",resultPath});
    compareResultsByLinesInMemory(IncrementalLearningSkeletonData.RESULTS,resultPath);
  }
  @Test public void testTwitterStream() throws Exception {
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.twitter.TwitterExample.main(new String[]{"--output",resultPath});
    compareResultsByLinesInMemory(TwitterExampleData.STREAMING_COUNTS_AS_TUPLES,resultPath);
  }
  @Test public void testSessionWindowing() throws Exception {
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.windowing.SessionWindowing.main(new String[]{"--output",resultPath});
    compareResultsByLinesInMemory(SessionWindowingData.EXPECTED,resultPath);
  }
  @Test public void testWindowWordCount() throws Exception {
    final String windowSize="250";
    final String slideSize="150";
    final String textPath=createTempFile("text.txt",WordCountData.TEXT);
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.windowing.WindowWordCount.main(new String[]{"--input",textPath,"--output",resultPath,"--window",windowSize,"--slide",slideSize});
    checkLinesAgainstRegexp(resultPath,"^\\([a-z]+,(\\d)+\\)");
  }
  @Test public void testWordCount() throws Exception {
    final String textPath=createTempFile("text.txt",WordCountData.TEXT);
    final String resultPath=getTempDirPath("result");
    org.apache.flink.streaming.examples.wordcount.WordCount.main(new String[]{"--input",textPath,"--output",resultPath});
    compareResultsByLinesInMemory(WordCountData.STREAMING_COUNTS_AS_TUPLES,resultPath);
  }
}
