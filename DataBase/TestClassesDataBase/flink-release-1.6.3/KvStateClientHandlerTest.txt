/** 
 * Tests for  {@link ClientHandler}.
 */
public class KvStateClientHandlerTest {
  /** 
 * Tests that on reads the expected callback methods are called and read buffers are recycled.
 */
  @Test public void testReadCallbacksAndBufferRecycling() throws Exception {
    final ClientHandlerCallback<KvStateResponse> callback=mock(ClientHandlerCallback.class);
    final MessageSerializer<KvStateInternalRequest,KvStateResponse> serializer=new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(),new KvStateResponse.KvStateResponseDeserializer());
    final EmbeddedChannel channel=new EmbeddedChannel(new ClientHandler<>("Test Client",serializer,callback));
    final byte[] content=new byte[0];
    final KvStateResponse response=new KvStateResponse(content);
    ByteBuf buf=MessageSerializer.serializeResponse(channel.alloc(),1222112277L,response);
    buf.skipBytes(4);
    channel.writeInbound(buf);
    verify(callback,times(1)).onRequestResult(eq(1222112277L),any(KvStateResponse.class));
    assertEquals("Buffer not recycled",0,buf.refCnt());
    buf=MessageSerializer.serializeRequestFailure(channel.alloc(),1222112278,new RuntimeException("Expected test Exception"));
    buf.skipBytes(4);
    channel.writeInbound(buf);
    verify(callback,times(1)).onRequestFailure(eq(1222112278L),any(RuntimeException.class));
    assertEquals("Buffer not recycled",0,buf.refCnt());
    buf=MessageSerializer.serializeServerFailure(channel.alloc(),new RuntimeException("Expected test Exception"));
    buf.skipBytes(4);
    channel.writeInbound(buf);
    verify(callback,times(1)).onFailure(any(RuntimeException.class));
    buf=channel.alloc().buffer(4).writeInt(1223823);
    channel.writeInbound(buf);
    verify(callback,times(2)).onFailure(any(IllegalStateException.class));
    assertEquals("Buffer not recycled",0,buf.refCnt());
    channel.pipeline().fireExceptionCaught(new RuntimeException("Expected test Exception"));
    verify(callback,times(3)).onFailure(any(RuntimeException.class));
    channel.pipeline().fireChannelInactive();
    verify(callback,times(4)).onFailure(any(ClosedChannelException.class));
  }
}
