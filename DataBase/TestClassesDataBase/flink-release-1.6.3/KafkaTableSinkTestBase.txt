/** 
 * Abstract test base for all Kafka table sink tests.
 * @deprecated Ensures backwards compatibility with Flink 1.5. Can be removed once wedrop support for format-specific table sinks.
 */
@Deprecated public abstract class KafkaTableSinkTestBase {
  private static final String TOPIC="testTopic";
  private static final String[] FIELD_NAMES=new String[]{"field1","field2"};
  private static final TypeInformation[] FIELD_TYPES=new TypeInformation[]{Types.INT(),Types.STRING()};
  private static final FlinkKafkaPartitioner<Row> PARTITIONER=new CustomPartitioner();
  private static final Properties PROPERTIES=createSinkProperties();
  @SuppressWarnings("unchecked") @Test public void testKafkaTableSink(){
    DataStream dataStream=mock(DataStream.class);
    when(dataStream.addSink(any(SinkFunction.class))).thenReturn(mock(DataStreamSink.class));
    KafkaTableSink kafkaTableSink=spy(createTableSink());
    kafkaTableSink.emitDataStream(dataStream);
    verify(dataStream).addSink(any(getProducerClass()));
    verify(kafkaTableSink).createKafkaProducer(eq(TOPIC),eq(PROPERTIES),any(getSerializationSchemaClass()),eq(Optional.of(PARTITIONER)));
  }
  @Test public void testConfiguration(){
    KafkaTableSink kafkaTableSink=createTableSink();
    KafkaTableSink newKafkaTableSink=kafkaTableSink.configure(FIELD_NAMES,FIELD_TYPES);
    assertNotSame(kafkaTableSink,newKafkaTableSink);
    assertArrayEquals(FIELD_NAMES,newKafkaTableSink.getFieldNames());
    assertArrayEquals(FIELD_TYPES,newKafkaTableSink.getFieldTypes());
    assertEquals(new RowTypeInfo(FIELD_TYPES),newKafkaTableSink.getOutputType());
  }
  protected abstract KafkaTableSink createTableSink(  String topic,  Properties properties,  FlinkKafkaPartitioner<Row> partitioner);
  protected abstract Class<? extends SerializationSchema<Row>> getSerializationSchemaClass();
  protected abstract Class<? extends FlinkKafkaProducerBase> getProducerClass();
  private KafkaTableSink createTableSink(){
    KafkaTableSink sink=createTableSink(TOPIC,PROPERTIES,PARTITIONER);
    return sink.configure(FIELD_NAMES,FIELD_TYPES);
  }
  private static Properties createSinkProperties(){
    Properties properties=new Properties();
    properties.setProperty("bootstrap.servers","localhost:12345");
    return properties;
  }
private static class CustomPartitioner extends FlinkKafkaPartitioner<Row> {
    @Override public int partition(    Row record,    byte[] key,    byte[] value,    String targetTopic,    int[] partitions){
      return 0;
    }
  }
}
