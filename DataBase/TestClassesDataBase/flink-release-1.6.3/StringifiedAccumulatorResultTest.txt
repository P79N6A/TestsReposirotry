/** 
 * Tests for the  {@link StringifiedAccumulatorResult}.
 */
public class StringifiedAccumulatorResultTest {
  @Test public void testSerialization() throws IOException {
    final String name="a";
    final String type="b";
    final String value="c";
    final StringifiedAccumulatorResult original=new StringifiedAccumulatorResult(name,type,value);
    assertEquals(name,original.getName());
    assertEquals(type,original.getType());
    assertEquals(value,original.getValue());
    final StringifiedAccumulatorResult copy=CommonTestUtils.createCopySerializable(original);
    assertEquals(name,copy.getName());
    assertEquals(type,copy.getType());
    assertEquals(value,copy.getValue());
  }
  @Test public void stringifyingResultsShouldIncorporateAccumulatorLocalValueDirectly(){
    final String name="a";
    final int targetValue=314159;
    final IntCounter acc=new IntCounter();
    acc.add(targetValue);
    final Map<String,OptionalFailure<Accumulator<?,?>>> accumulatorMap=new HashMap<>();
    accumulatorMap.put(name,OptionalFailure.of(acc));
    final StringifiedAccumulatorResult[] results=StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap);
    assertEquals(1,results.length);
    final StringifiedAccumulatorResult firstResult=results[0];
    assertEquals(name,firstResult.getName());
    assertEquals("IntCounter",firstResult.getType());
    assertEquals(Integer.toString(targetValue),firstResult.getValue());
  }
  @Test public void stringifyingResultsShouldReportNullLocalValueAsNonnullValueString(){
    final String name="a";
    final NullBearingAccumulator acc=new NullBearingAccumulator();
    final Map<String,OptionalFailure<Accumulator<?,?>>> accumulatorMap=new HashMap<>();
    accumulatorMap.put(name,OptionalFailure.of(acc));
    final StringifiedAccumulatorResult[] results=StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap);
    assertEquals(1,results.length);
    final StringifiedAccumulatorResult firstResult=results[0];
    assertEquals(name,firstResult.getName());
    assertEquals("NullBearingAccumulator",firstResult.getType());
    assertEquals("null",firstResult.getValue());
  }
  @Test public void stringifyingResultsShouldReportNullAccumulatorWithNonnullValueAndTypeString(){
    final String name="a";
    final Map<String,OptionalFailure<Accumulator<?,?>>> accumulatorMap=new HashMap<>();
    accumulatorMap.put(name,null);
    final StringifiedAccumulatorResult[] results=StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap);
    assertEquals(1,results.length);
    final StringifiedAccumulatorResult firstResult=results[0];
    assertEquals(name,firstResult.getName());
    assertEquals("null",firstResult.getType());
    assertEquals("null",firstResult.getValue());
  }
  @Test public void stringifyingFailureResults(){
    final String name="a";
    final Map<String,OptionalFailure<Accumulator<?,?>>> accumulatorMap=new HashMap<>();
    accumulatorMap.put(name,OptionalFailure.ofFailure(new FlinkRuntimeException("Test")));
    final StringifiedAccumulatorResult[] results=StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap);
    assertEquals(1,results.length);
    final StringifiedAccumulatorResult firstResult=results[0];
    assertEquals(name,firstResult.getName());
    assertEquals("null",firstResult.getType());
    assertTrue(firstResult.getValue().startsWith("org.apache.flink.util.FlinkRuntimeException: Test"));
  }
private static class NullBearingAccumulator implements SimpleAccumulator<Serializable> {
    @Override public void add(    Serializable value){
      throw new UnsupportedOperationException();
    }
    @Override public Serializable getLocalValue(){
      return null;
    }
    @Override public void resetLocal(){
      throw new UnsupportedOperationException();
    }
    @Override public void merge(    Accumulator<Serializable,Serializable> other){
      throw new UnsupportedOperationException();
    }
    @Override public Accumulator<Serializable,Serializable> clone(){
      return new NullBearingAccumulator();
    }
  }
}
