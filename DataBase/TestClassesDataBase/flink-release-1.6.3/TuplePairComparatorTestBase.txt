/** 
 * Abstract test base for TuplePairComparators.
 * @param < T >
 * @param < R >
 */
public abstract class TuplePairComparatorTestBase<T extends Tuple,R extends Tuple> extends TestLogger {
  protected abstract TypePairComparator<T,R> createComparator(  boolean ascending);
  protected abstract Tuple2<T[],R[]> getSortedTestData();
  @Test public void testEqualityWithReference(){
    try {
      TypePairComparator<T,R> comparator=getComparator(true);
      Tuple2<T[],R[]> data=getSortedData();
      for (int x=0; x < data.f0.length; x++) {
        comparator.setReference(data.f0[x]);
        assertTrue(comparator.equalToReference(data.f1[x]));
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      fail("Exception in test: " + e.getMessage());
    }
  }
  @Test public void testInequalityWithReference(){
    testGreatSmallAscDescWithReference(true);
    testGreatSmallAscDescWithReference(false);
  }
  protected void testGreatSmallAscDescWithReference(  boolean ascending){
    try {
      Tuple2<T[],R[]> data=getSortedData();
      TypePairComparator<T,R> comparator=getComparator(ascending);
      for (int x=0; x < data.f0.length - 1; x++) {
        for (int y=x + 1; y < data.f1.length; y++) {
          comparator.setReference(data.f0[x]);
          if (ascending) {
            assertTrue(comparator.compareToReference(data.f1[y]) > 0);
          }
 else {
            assertTrue(comparator.compareToReference(data.f1[y]) < 0);
          }
        }
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      fail("Exception in test: " + e.getMessage());
    }
  }
  protected TypePairComparator<T,R> getComparator(  boolean ascending){
    TypePairComparator<T,R> comparator=createComparator(ascending);
    if (comparator == null) {
      throw new RuntimeException("Test case corrupt. Returns null as comparator.");
    }
    return comparator;
  }
  protected Tuple2<T[],R[]> getSortedData(){
    Tuple2<T[],R[]> data=getSortedTestData();
    if (data == null || data.f0 == null || data.f1 == null) {
      throw new RuntimeException("Test case corrupt. Returns null as test data.");
    }
    if (data.f0.length < 2 || data.f1.length < 2) {
      throw new RuntimeException("Test case does not provide enough sorted test data.");
    }
    return data;
  }
}
