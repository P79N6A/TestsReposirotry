private static class TestingExecutionStateListener implements TaskExecutionStateListener {
  private ExecutionState executionState=null;
  private final PriorityQueue<Tuple2<ExecutionState,CompletableFuture<ExecutionState>>> priorityQueue=new PriorityQueue<>(1,Comparator.comparingInt(o -> o.f0.ordinal()));
  Future<ExecutionState> notifyWhenExecutionState(  ExecutionState executionState){
synchronized (priorityQueue) {
      if (this.executionState != null && this.executionState.ordinal() >= executionState.ordinal()) {
        return CompletableFuture.completedFuture(executionState);
      }
 else {
        CompletableFuture<ExecutionState> promise=new CompletableFuture<>();
        priorityQueue.offer(Tuple2.of(executionState,promise));
        return promise;
      }
    }
  }
  @Override public void notifyTaskExecutionStateChanged(  TaskExecutionState taskExecutionState){
synchronized (priorityQueue) {
      this.executionState=taskExecutionState.getExecutionState();
      while (!priorityQueue.isEmpty() && priorityQueue.peek().f0.ordinal() <= executionState.ordinal()) {
        CompletableFuture<ExecutionState> promise=priorityQueue.poll().f1;
        promise.complete(executionState);
      }
    }
  }
}
