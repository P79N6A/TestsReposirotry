private static class NFAFactory implements NFACompiler.NFAFactory<Event> {
  private static final long serialVersionUID=1173020762472766713L;
  private final boolean handleTimeout;
  private NFAFactory(){
    this(false);
  }
  private NFAFactory(  boolean handleTimeout){
    this.handleTimeout=handleTimeout;
  }
  @Override public NFA<Event> createNFA(){
    Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
      private static final long serialVersionUID=5726188262756267490L;
      @Override public boolean filter(      Event value) throws Exception {
        return value.getName().equals("start");
      }
    }
).followedBy("middle").subtype(SubEvent.class).where(new SimpleCondition<SubEvent>(){
      private static final long serialVersionUID=6215754202506583964L;
      @Override public boolean filter(      SubEvent value) throws Exception {
        return value.getVolume() > 5.0;
      }
    }
).followedBy("end").where(new SimpleCondition<Event>(){
      private static final long serialVersionUID=7056763917392056548L;
      @Override public boolean filter(      Event value) throws Exception {
        return value.getName().equals("end");
      }
    }
).within(Time.milliseconds(10L));
    return NFACompiler.compileFactory(pattern,handleTimeout).createNFA();
  }
}
