private class RMQTestSource extends RMQSource<String> {
  private ArrayDeque<Tuple2<Long,Set<String>>> restoredState;
  public RMQTestSource(){
    super(new RMQConnectionConfig.Builder().setHost("hostTest").setPort(999).setUserName("userTest").setPassword("passTest").setVirtualHost("/").build(),"queueDummy",true,new StringDeserializationScheme());
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    super.initializeState(context);
    this.restoredState=this.pendingCheckpoints;
  }
  public ArrayDeque<Tuple2<Long,Set<String>>> getRestoredState(){
    return this.restoredState;
  }
  @Override public void open(  Configuration config) throws Exception {
    super.open(config);
    consumer=Mockito.mock(QueueingConsumer.class);
    final QueueingConsumer.Delivery deliveryMock=Mockito.mock(QueueingConsumer.Delivery.class);
    Mockito.when(deliveryMock.getBody()).thenReturn("test".getBytes(ConfigConstants.DEFAULT_CHARSET));
    try {
      Mockito.when(consumer.nextDelivery()).thenReturn(deliveryMock);
    }
 catch (    InterruptedException e) {
      fail("Couldn't setup up deliveryMock");
    }
    Envelope envelope=Mockito.mock(Envelope.class);
    Mockito.when(deliveryMock.getEnvelope()).thenReturn(envelope);
    Mockito.when(envelope.getDeliveryTag()).thenAnswer(new Answer<Long>(){
      @Override public Long answer(      InvocationOnMock invocation) throws Throwable {
        return ++messageId;
      }
    }
);
    AMQP.BasicProperties props=Mockito.mock(AMQP.BasicProperties.class);
    Mockito.when(deliveryMock.getProperties()).thenReturn(props);
    Mockito.when(props.getCorrelationId()).thenAnswer(new Answer<String>(){
      @Override public String answer(      InvocationOnMock invocation) throws Throwable {
        return generateCorrelationIds ? "" + messageId : null;
      }
    }
);
  }
  @Override protected ConnectionFactory setupConnectionFactory(){
    ConnectionFactory connectionFactory=Mockito.mock(ConnectionFactory.class);
    Connection connection=Mockito.mock(Connection.class);
    try {
      Mockito.when(connectionFactory.newConnection()).thenReturn(connection);
      Mockito.when(connection.createChannel()).thenReturn(Mockito.mock(Channel.class));
    }
 catch (    IOException|TimeoutException e) {
      fail("Test environment couldn't be created.");
    }
    return connectionFactory;
  }
  @Override public RuntimeContext getRuntimeContext(){
    return Mockito.mock(StreamingRuntimeContext.class);
  }
  @Override protected boolean addId(  String uid){
    assertEquals(false,autoAck);
    return super.addId(uid);
  }
}
