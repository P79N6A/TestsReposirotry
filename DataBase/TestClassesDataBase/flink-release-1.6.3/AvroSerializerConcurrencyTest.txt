/** 
 * This tests that the  {@link AvroSerializer} properly fails when accessed by two threadsconcurrently. <p><b>Important:</b> This test only works if assertions are activated (-ea) on the JVM when running tests.
 */
public class AvroSerializerConcurrencyTest {
  @Test public void testConcurrentUseOfSerializer() throws Exception {
    final AvroSerializer<String> serializer=new AvroSerializer<>(String.class);
    final BlockerSync sync=new BlockerSync();
    final DataOutputView regularOut=new DataOutputSerializer(32);
    final DataOutputView lockingOut=new LockingView(sync);
    final CheckedThread thread=new CheckedThread("serializer"){
      @Override public void go() throws Exception {
        serializer.serialize("a value",lockingOut);
      }
    }
;
    thread.start();
    sync.awaitBlocker();
    try {
      serializer.serialize("value",regularOut);
      fail("should have failed with an exception");
    }
 catch (    IllegalStateException e) {
    }
 finally {
      sync.releaseBlocker();
    }
    thread.sync();
  }
private static class LockingView extends DataOutputSerializer {
    private final BlockerSync blocker;
    LockingView(    BlockerSync blocker){
      super(32);
      this.blocker=blocker;
    }
    @Override public void writeInt(    int v) throws IOException {
      blocker.blockNonInterruptible();
    }
  }
}
