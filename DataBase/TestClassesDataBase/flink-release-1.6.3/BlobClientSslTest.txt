/** 
 * This class contains unit tests for the  {@link BlobClient} with ssl enabled.
 */
public class BlobClientSslTest extends BlobClientTest {
  /** 
 * The instance of the SSL BLOB server used during the tests. 
 */
  private static BlobServer blobSslServer;
  /** 
 * Instance of a non-SSL BLOB server with SSL-enabled security options. 
 */
  private static BlobServer blobNonSslServer;
  /** 
 * The SSL blob service client configuration. 
 */
  private static Configuration sslClientConfig;
  /** 
 * The non-SSL blob service client configuration with SSL-enabled security options. 
 */
  private static Configuration nonSslClientConfig;
  @ClassRule public static TemporaryFolder temporarySslFolder=new TemporaryFolder();
  /** 
 * Starts the SSL enabled BLOB server.
 */
  @BeforeClass public static void startSSLServer() throws IOException {
    Configuration config=SSLUtilsTest.createInternalSslConfigWithKeyAndTrustStores();
    config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporarySslFolder.newFolder().getAbsolutePath());
    blobSslServer=new BlobServer(config,new VoidBlobStore());
    blobSslServer.start();
    sslClientConfig=config;
  }
  @BeforeClass public static void startNonSSLServer() throws IOException {
    Configuration config=SSLUtilsTest.createInternalSslConfigWithKeyAndTrustStores();
    config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporarySslFolder.newFolder().getAbsolutePath());
    config.setBoolean(BlobServerOptions.SSL_ENABLED,false);
    blobNonSslServer=new BlobServer(config,new VoidBlobStore());
    blobNonSslServer.start();
    nonSslClientConfig=config;
  }
  /** 
 * Shuts the BLOB server down.
 */
  @AfterClass public static void stopServers() throws IOException {
    if (blobSslServer != null) {
      blobSslServer.close();
    }
    if (blobNonSslServer != null) {
      blobNonSslServer.close();
    }
  }
  protected Configuration getBlobClientConfig(){
    return sslClientConfig;
  }
  protected BlobServer getBlobServer(){
    return blobSslServer;
  }
  /** 
 * Verify ssl client to ssl server upload.
 */
  @Test public void testUploadJarFilesHelper() throws Exception {
    uploadJarFile(blobSslServer,sslClientConfig);
  }
  /** 
 * Verify ssl client to non-ssl server failure.
 */
  @Test(expected=IOException.class) public void testSSLClientFailure() throws Exception {
    uploadJarFile(blobServer,sslClientConfig);
  }
  /** 
 * Verify ssl client to non-ssl server failure.
 */
  @Test(expected=IOException.class) public void testSSLClientFailure2() throws Exception {
    uploadJarFile(blobNonSslServer,sslClientConfig);
  }
  /** 
 * Verify non-ssl client to ssl server failure.
 */
  @Test(expected=IOException.class) public void testSSLServerFailure() throws Exception {
    uploadJarFile(blobSslServer,clientConfig);
  }
  /** 
 * Verify non-ssl client to ssl server failure.
 */
  @Test(expected=IOException.class) public void testSSLServerFailure2() throws Exception {
    uploadJarFile(blobSslServer,nonSslClientConfig);
  }
  /** 
 * Verify non-ssl connection sanity.
 */
  @Test public void testNonSSLConnection() throws Exception {
    uploadJarFile(blobServer,clientConfig);
  }
  /** 
 * Verify non-ssl connection sanity.
 */
  @Test public void testNonSSLConnection2() throws Exception {
    uploadJarFile(blobServer,nonSslClientConfig);
  }
  /** 
 * Verify non-ssl connection sanity.
 */
  @Test public void testNonSSLConnection3() throws Exception {
    uploadJarFile(blobNonSslServer,clientConfig);
  }
  /** 
 * Verify non-ssl connection sanity.
 */
  @Test public void testNonSSLConnection4() throws Exception {
    uploadJarFile(blobNonSslServer,nonSslClientConfig);
  }
}
