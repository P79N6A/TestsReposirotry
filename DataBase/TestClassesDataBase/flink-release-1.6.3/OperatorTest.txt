/** 
 * Tests for  {@link Operator}.
 */
public class OperatorTest {
  @Test public void testConfigurationOfParallelism(){
    Operator operator=new MockOperator();
    int parallelism=36;
    operator.setParallelism(parallelism);
    assertEquals(parallelism,operator.getParallelism());
    parallelism=ExecutionConfig.PARALLELISM_DEFAULT;
    operator.setParallelism(parallelism);
    assertEquals(parallelism,operator.getParallelism());
  }
  @Test public void testConfigurationOfResource() throws Exception {
    Operator operator=new MockOperator();
    Method opMethod=Operator.class.getDeclaredMethod("setResources",ResourceSpec.class,ResourceSpec.class);
    opMethod.setAccessible(true);
    ResourceSpec minResources=ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build();
    ResourceSpec preferredResources=ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build();
    opMethod.invoke(operator,minResources,preferredResources);
    assertEquals(minResources,operator.getMinResources());
    assertEquals(preferredResources,operator.getPreferredResources());
  }
private class MockOperator extends Operator {
    public MockOperator(){
      super(ExecutionEnvironment.createCollectionsEnvironment(),ValueTypeInfo.NULL_VALUE_TYPE_INFO);
    }
  }
}
