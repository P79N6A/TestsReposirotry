/** 
 * Tests for the system behavior in multiple corner cases - when null records are passed through the system. - when disjoint dataflows are executed - when accumulators are used chained after a non-udf operator. <p>The tests are bundled into one class to reuse the same test cluster. This speeds up test execution, as the majority of the test time goes usually into starting/stopping the test cluster.
 */
@SuppressWarnings("serial") public class MiscellaneousIssuesITCase extends TestLogger {
  @ClassRule public static final MiniClusterResource MINI_CLUSTER_RESOURCE=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setNumberTaskManagers(2).setNumberSlotsPerTaskManager(3).build());
  @Test public void testNullValues(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(1);
      env.getConfig().disableSysoutLogging();
      DataSet<String> data=env.fromElements("hallo").map(new MapFunction<String,String>(){
        @Override public String map(        String value) throws Exception {
          return null;
        }
      }
);
      data.writeAsText("/tmp/myTest",FileSystem.WriteMode.OVERWRITE);
      try {
        env.execute();
        fail("this should fail due to null values.");
      }
 catch (      JobExecutionException e) {
        assertNotNull(e.getCause());
        assertTrue(e.getCause() instanceof NullPointerException);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testDisjointDataflows(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(5);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10).output(new DiscardingOutputFormat<Long>());
      env.generateSequence(1,10).output(new DiscardingOutputFormat<Long>());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testAccumulatorsAfterNoOp(){
    final String accName="test_accumulator";
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(6);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,1000000).rebalance().flatMap(new RichFlatMapFunction<Long,Long>(){
        private LongCounter counter;
        @Override public void open(        Configuration parameters){
          counter=getRuntimeContext().getLongCounter(accName);
        }
        @Override public void flatMap(        Long value,        Collector<Long> out){
          counter.add(1L);
        }
      }
).output(new DiscardingOutputFormat<Long>());
      JobExecutionResult result=env.execute();
      assertEquals(1000000L,result.getAllAccumulatorResults().get(accName));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
