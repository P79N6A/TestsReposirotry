public static final class SimpleTypes implements Comparable<SimpleTypes> {
  private final int iVal;
  private final long lVal;
  private final byte bVal;
  private final String sVal;
  private final short rVal;
  private final double dVal;
  public SimpleTypes(){
    this(0,0,(byte)0,"",(short)0,0);
  }
  public SimpleTypes(  int iVal,  long lVal,  byte bVal,  String sVal,  short rVal,  double dVal){
    this.iVal=iVal;
    this.lVal=lVal;
    this.bVal=bVal;
    this.sVal=sVal;
    this.rVal=rVal;
    this.dVal=dVal;
  }
  @Override public String toString(){
    return String.format("(%d, %d, %d, %s, %d, %f)",iVal,lVal,bVal,sVal,rVal,dVal);
  }
  @Override public boolean equals(  Object obj){
    if (obj.getClass() == SimpleTypes.class) {
      SimpleTypes other=(SimpleTypes)obj;
      return other.iVal == this.iVal && other.lVal == this.lVal && other.bVal == this.bVal && other.sVal.equals(this.sVal) && other.rVal == this.rVal && other.dVal == this.dVal;
    }
 else {
      return false;
    }
  }
  @Override public int compareTo(  SimpleTypes o){
    int cmp=(this.iVal < o.iVal ? -1 : (this.iVal == o.iVal ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    cmp=(this.lVal < o.lVal ? -1 : (this.lVal == o.lVal ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    cmp=(this.bVal < o.bVal ? -1 : (this.bVal == o.bVal ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    cmp=this.sVal.compareTo(o.sVal);
    if (cmp != 0) {
      return cmp;
    }
    cmp=(this.rVal < o.rVal ? -1 : (this.rVal == o.rVal ? 0 : 1));
    if (cmp != 0) {
      return cmp;
    }
    return (this.dVal < o.dVal ? -1 : (this.dVal == o.dVal ? 0 : 1));
  }
}
