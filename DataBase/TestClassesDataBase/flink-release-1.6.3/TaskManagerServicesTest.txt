/** 
 * Unit test for  {@link TaskManagerServices}.
 */
public class TaskManagerServicesTest extends TestLogger {
  /** 
 * Test for  {@link TaskManagerServices#calculateNetworkBufferMemory(long,Configuration)} using oldconfigurations via  {@link TaskManagerOptions#NETWORK_NUM_BUFFERS}.
 */
  @SuppressWarnings("deprecation") @Test public void calculateNetworkBufOld(){
    Configuration config=new Configuration();
    config.setInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS,1);
    assertEquals(MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes(),TaskManagerServices.calculateNetworkBufferMemory(10L << 20,config));
    assertEquals(MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes(),TaskManagerServices.calculateNetworkBufferMemory(64L << 20,config));
    int numBuffers=(int)((2L << 32) / MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes());
    config.setInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS,numBuffers);
    assertEquals(2L << 32,TaskManagerServices.calculateNetworkBufferMemory(2L << 33,config));
  }
  /** 
 * Test for  {@link TaskManagerServices#calculateNetworkBufferMemory(long,Configuration)} using newconfigurations via  {@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION}, {@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN} and{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}.
 */
  @Test public void calculateNetworkBufNew() throws Exception {
    Configuration config=new Configuration();
    final Float defaultFrac=TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.defaultValue();
    final Long defaultMin=MemorySize.parse(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.defaultValue()).getBytes();
    final Long defaultMax=MemorySize.parse(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.defaultValue()).getBytes();
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 20)),defaultMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((64L << 20 + 1),config));
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 30)),defaultMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((10L << 30),config));
    calculateNetworkBufNew(config);
  }
  /** 
 * Helper to test  {@link TaskManagerServices#calculateNetworkBufferMemory(long,Configuration)} with thenew configuration parameters.
 * @param config configuration object
 */
  private static void calculateNetworkBufNew(  final Configuration config){
    config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN,String.valueOf(1L << 20));
    config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX,String.valueOf(1L << 20));
    assertEquals(1 << 20,TaskManagerServices.calculateNetworkBufferMemory(10L << 20,config));
    assertEquals(1 << 20,TaskManagerServices.calculateNetworkBufferMemory(64L << 20,config));
    assertEquals(1 << 20,TaskManagerServices.calculateNetworkBufferMemory(1L << 30,config));
    Random ran=new Random();
    for (int i=0; i < 1_000; ++i) {
      float frac=Math.max(ran.nextFloat(),Float.MIN_VALUE);
      config.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION,frac);
      long min=Math.max(MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes(),ran.nextLong());
      config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN,String.valueOf(min));
      long max=Math.max(min,ran.nextLong());
      config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX,String.valueOf(max));
      long javaMem=Math.max(max + 1,ran.nextLong());
      final long networkBufMem=TaskManagerServices.calculateNetworkBufferMemory(javaMem,config);
      if (networkBufMem < min) {
        fail("Lower bound not met with configuration: " + config.toString());
      }
      if (networkBufMem > max) {
        fail("Upper bound not met with configuration: " + config.toString());
      }
      if (networkBufMem > min && networkBufMem < max) {
        if ((javaMem * frac) != networkBufMem) {
          fail("Wrong network buffer memory size with configuration: " + config.toString() + ". Expected value: "+ (javaMem * frac)+ " actual value: "+ networkBufMem+ '.');
        }
      }
    }
  }
  /** 
 * Test for  {@link TaskManagerServices#calculateNetworkBufferMemory(long,Configuration)} using mixedold/new configurations.
 */
  @SuppressWarnings("deprecation") @Test public void calculateNetworkBufMixed() throws Exception {
    Configuration config=new Configuration();
    config.setInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS,1);
    final Float defaultFrac=TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.defaultValue();
    final Long defaultMin=MemorySize.parse(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.defaultValue()).getBytes();
    final Long defaultMax=MemorySize.parse(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.defaultValue()).getBytes();
    Configuration config1=config.clone();
    config1.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION,0.1f);
    assertEquals(enforceBounds((long)(0.1f * (10L << 20)),defaultMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((64L << 20 + 1),config1));
    assertEquals(enforceBounds((long)(0.1f * (10L << 30)),defaultMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((10L << 30),config1));
    config1=config.clone();
    long newMin=MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes();
    config1.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN,String.valueOf(newMin));
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 20)),newMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((10L << 20),config1));
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 30)),newMin,defaultMax),TaskManagerServices.calculateNetworkBufferMemory((10L << 30),config1));
    config1=config.clone();
    long newMax=Math.max(64L << 20 + 1,MemorySize.parse(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.defaultValue()).getBytes());
    config1.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX,String.valueOf(newMax));
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 20)),defaultMin,newMax),TaskManagerServices.calculateNetworkBufferMemory((64L << 20 + 1),config1));
    assertEquals(enforceBounds((long)(defaultFrac * (10L << 30)),defaultMin,newMax),TaskManagerServices.calculateNetworkBufferMemory((10L << 30),config1));
    assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1));
    calculateNetworkBufNew(config);
  }
  /** 
 * Returns the value or the lower/upper bound in case the value is less/greater than the lower/upper bound, respectively.
 * @param value value to inspect
 * @param lower lower bound
 * @param upper upper bound
 * @return <tt>min(upper, max(lower, value))</tt>
 */
  private static long enforceBounds(  final long value,  final long lower,  final long upper){
    return Math.min(upper,Math.max(lower,value));
  }
  /** 
 * Test for  {@link TaskManagerServices#calculateHeapSizeMB(long,Configuration)} with somemanually calculated scenarios.
 */
  @Test public void calculateHeapSizeMB() throws Exception {
    Configuration config=new Configuration();
    config.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION,0.1f);
    config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN,String.valueOf(64L << 20));
    config.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX,String.valueOf(1L << 30));
    config.setBoolean(TaskManagerOptions.MEMORY_OFF_HEAP,false);
    assertEquals(900,TaskManagerServices.calculateHeapSizeMB(1000,config));
    config.setBoolean(TaskManagerOptions.MEMORY_OFF_HEAP,false);
    config.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION,0.2f);
    assertEquals(800,TaskManagerServices.calculateHeapSizeMB(1000,config));
    config.setBoolean(TaskManagerOptions.MEMORY_OFF_HEAP,true);
    config.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION,0.1f);
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"10m");
    assertEquals(890,TaskManagerServices.calculateHeapSizeMB(1000,config));
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"0");
    config.setFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION,0.1f);
    assertEquals(810,TaskManagerServices.calculateHeapSizeMB(1000,config));
  }
}
