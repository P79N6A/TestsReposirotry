private class ComparatorTestInstance<T> extends ComparatorTestBase<T> {
  private final T[] testData;
  private final Class<T> type;
  @SuppressWarnings("unchecked") public ComparatorTestInstance(  T[] testData){
    if (testData == null || testData.length == 0) {
      throw new IllegalArgumentException();
    }
    this.testData=testData;
    this.type=(Class<T>)testData[0].getClass();
  }
  @Override @SuppressWarnings({"unchecked","rawtypes"}) protected TypeComparator<T> createComparator(  boolean ascending){
    return new GenericTypeComparator(ascending,AbstractGenericTypeComparatorTest.this.createSerializer(this.type),this.type);
  }
  @Override protected TypeSerializer<T> createSerializer(){
    return AbstractGenericTypeComparatorTest.this.createSerializer(this.type);
  }
  @Override protected T[] getSortedTestData(){
    return this.testData;
  }
  public void testAll(){
    testDuplicate();
    testEquality();
    testEqualityWithReference();
    testInequality();
    testInequalityWithReference();
    testNormalizedKeysEqualsFullLength();
    testNormalizedKeysEqualsHalfLength();
    testNormalizedKeysGreatSmallFullLength();
    testNormalizedKeysGreatSmallAscDescHalfLength();
    testNormalizedKeyReadWriter();
  }
}
