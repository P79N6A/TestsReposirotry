/** 
 * Base class for unit tests that run a single test with object reuse enabled/disabled and against collection environments. <p>To write a unit test against this test base, simply extend it and implement the  {@link #testProgram()} method.<p>To skip the execution against collection environments you have to override  {@link #skipCollectionExecution()}.
 */
public abstract class JavaProgramTestBase extends AbstractTestBase {
  private JobExecutionResult latestExecutionResult;
  /** 
 * The number of times a test should be repeated. <p>This is useful for runtime changes, which affect resource management. Running certain tests repeatedly might help to discover resource leaks, race conditions etc.
 */
  private int numberOfTestRepetitions=1;
  private boolean isCollectionExecution;
  public void setNumberOfTestRepetitions(  int numberOfTestRepetitions){
    this.numberOfTestRepetitions=numberOfTestRepetitions;
  }
  public int getParallelism(){
    return isCollectionExecution ? 1 : miniClusterResource.getNumberSlots();
  }
  public JobExecutionResult getLatestExecutionResult(){
    return this.latestExecutionResult;
  }
  public boolean isCollectionExecution(){
    return isCollectionExecution;
  }
  protected abstract void testProgram() throws Exception ;
  protected void preSubmit() throws Exception {
  }
  protected void postSubmit() throws Exception {
  }
  protected boolean skipCollectionExecution(){
    return false;
  }
  @Test public void testJobWithObjectReuse() throws Exception {
    isCollectionExecution=false;
    try {
      preSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Pre-submit work caused an error: " + e.getMessage());
    }
    TestEnvironment env=miniClusterResource.getTestEnvironment();
    env.getConfig().enableObjectReuse();
    for (int i=0; i < numberOfTestRepetitions; i++) {
      try {
        testProgram();
        this.latestExecutionResult=env.getLastJobExecutionResult();
      }
 catch (      Exception e) {
        System.err.println(e.getMessage());
        e.printStackTrace();
        Assert.fail("Error while calling the test program: " + e.getMessage());
      }
      Assert.assertNotNull("The test program never triggered an execution.",this.latestExecutionResult);
    }
    try {
      postSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Post-submit work caused an error: " + e.getMessage());
    }
  }
  @Test public void testJobWithoutObjectReuse() throws Exception {
    isCollectionExecution=false;
    try {
      preSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Pre-submit work caused an error: " + e.getMessage());
    }
    ExecutionEnvironment env=miniClusterResource.getTestEnvironment();
    env.getConfig().disableObjectReuse();
    for (int i=0; i < numberOfTestRepetitions; i++) {
      try {
        testProgram();
        this.latestExecutionResult=env.getLastJobExecutionResult();
      }
 catch (      Exception e) {
        System.err.println(e.getMessage());
        e.printStackTrace();
        Assert.fail("Error while calling the test program: " + e.getMessage());
      }
      Assert.assertNotNull("The test program never triggered an execution.",this.latestExecutionResult);
    }
    try {
      postSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Post-submit work caused an error: " + e.getMessage());
    }
  }
  @Test public void testJobCollectionExecution() throws Exception {
    if (this.skipCollectionExecution()) {
      return;
    }
    isCollectionExecution=true;
    try {
      preSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Pre-submit work caused an error: " + e.getMessage());
    }
    CollectionTestEnvironment env=new CollectionTestEnvironment();
    env.setAsContext();
    try {
      testProgram();
      this.latestExecutionResult=env.getLastJobExecutionResult();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Error while calling the test program: " + e.getMessage());
    }
 finally {
      miniClusterResource.getTestEnvironment().setAsContext();
    }
    Assert.assertNotNull("The test program never triggered an execution.",this.latestExecutionResult);
    try {
      postSubmit();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail("Post-submit work caused an error: " + e.getMessage());
    }
  }
}
