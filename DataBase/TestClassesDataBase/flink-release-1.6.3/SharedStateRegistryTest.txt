public class SharedStateRegistryTest {
  /** 
 * Validate that all states can be correctly registered at the registry.
 */
  @Test public void testRegistryNormal(){
    SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
    TestSharedState firstState=new TestSharedState("first");
    SharedStateRegistry.Result result=sharedStateRegistry.registerReference(firstState.getRegistrationKey(),firstState);
    assertEquals(1,result.getReferenceCount());
    assertTrue(firstState == result.getReference());
    assertFalse(firstState.isDiscarded());
    TestSharedState secondState=new TestSharedState("second");
    result=sharedStateRegistry.registerReference(secondState.getRegistrationKey(),secondState);
    assertEquals(1,result.getReferenceCount());
    assertTrue(secondState == result.getReference());
    assertFalse(firstState.isDiscarded());
    assertFalse(secondState.isDiscarded());
    TestSharedState firstStatePrime=new TestSharedState(firstState.getRegistrationKey().getKeyString());
    result=sharedStateRegistry.registerReference(firstState.getRegistrationKey(),firstStatePrime);
    assertEquals(2,result.getReferenceCount());
    assertFalse(firstStatePrime == result.getReference());
    assertTrue(firstState == result.getReference());
    assertTrue(firstStatePrime.isDiscarded());
    assertFalse(firstState.isDiscarded());
    result=sharedStateRegistry.registerReference(firstState.getRegistrationKey(),firstState);
    assertEquals(3,result.getReferenceCount());
    assertTrue(firstState == result.getReference());
    assertFalse(firstState.isDiscarded());
    result=sharedStateRegistry.unregisterReference(secondState.getRegistrationKey());
    assertEquals(0,result.getReferenceCount());
    assertTrue(result.getReference() == null);
    assertTrue(secondState.isDiscarded());
    result=sharedStateRegistry.unregisterReference(firstState.getRegistrationKey());
    assertEquals(2,result.getReferenceCount());
    assertTrue(firstState == result.getReference());
    assertFalse(firstState.isDiscarded());
  }
  /** 
 * Validate that unregister a nonexistent key will throw exception
 */
  @Test(expected=IllegalStateException.class) public void testUnregisterWithUnexistedKey(){
    SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
    sharedStateRegistry.unregisterReference(new SharedStateRegistryKey("non-existent"));
  }
private static class TestSharedState implements StreamStateHandle {
    private static final long serialVersionUID=4468635881465159780L;
    private SharedStateRegistryKey key;
    private boolean discarded;
    TestSharedState(    String key){
      this.key=new SharedStateRegistryKey(key);
      this.discarded=false;
    }
    public SharedStateRegistryKey getRegistrationKey(){
      return key;
    }
    @Override public void discardState() throws Exception {
      this.discarded=true;
    }
    @Override public long getStateSize(){
      return key.toString().length();
    }
    @Override public int hashCode(){
      return key.hashCode();
    }
    @Override public FSDataInputStream openInputStream() throws IOException {
      throw new UnsupportedOperationException();
    }
    public boolean isDiscarded(){
      return discarded;
    }
  }
}
