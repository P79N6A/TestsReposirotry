private static class SubtaskIndexFlatMapper extends RichFlatMapFunction<Integer,Tuple2<Integer,Integer>> implements CheckpointedFunction {
  private static final long serialVersionUID=5273172591283191348L;
  private static volatile CountDownLatch workCompletedLatch=new CountDownLatch(1);
  private transient ValueState<Integer> counter;
  private transient ValueState<Integer> sum;
  private final int numberElements;
  SubtaskIndexFlatMapper(  int numberElements){
    this.numberElements=numberElements;
  }
  @Override public void flatMap(  Integer value,  Collector<Tuple2<Integer,Integer>> out) throws Exception {
    int count=counter.value() + 1;
    counter.update(count);
    int s=sum.value() + value;
    sum.update(s);
    if (count % numberElements == 0) {
      out.collect(Tuple2.of(getRuntimeContext().getIndexOfThisSubtask(),s));
      workCompletedLatch.countDown();
    }
  }
  @Override public void snapshotState(  FunctionSnapshotContext context) throws Exception {
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    counter=context.getKeyedStateStore().getState(new ValueStateDescriptor<>("counter",Integer.class,0));
    sum=context.getKeyedStateStore().getState(new ValueStateDescriptor<>("sum",Integer.class,0));
  }
}
