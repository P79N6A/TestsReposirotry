/** 
 * Unit test for the  {@link FixedDelayRestartStrategy}.
 */
public class FixedDelayRestartStrategyTest {
  public final ScheduledExecutorService executorService=Executors.newScheduledThreadPool(4);
  public final ScheduledExecutor executor=new ScheduledExecutorServiceAdapter(executorService);
  @After public void shutdownExecutor(){
    executorService.shutdownNow();
  }
  @Test public void testNumberOfRestarts() throws Exception {
    final int numberRestarts=10;
    final FixedDelayRestartStrategy strategy=new FixedDelayRestartStrategy(numberRestarts,0L);
    for (int restartsLeft=numberRestarts; restartsLeft > 0; --restartsLeft) {
      assertTrue(strategy.canRestart());
      assertTrue(strategy.canRestart());
      strategy.restart(new NoOpRestarter(),executor);
    }
    assertFalse(strategy.canRestart());
  }
  @Test public void testDelay() throws Exception {
    final long restartDelay=10;
    final int numberRestarts=10;
    final FixedDelayRestartStrategy strategy=new FixedDelayRestartStrategy(numberRestarts,restartDelay);
    for (int restartsLeft=numberRestarts; restartsLeft > 0; --restartsLeft) {
      assertTrue(strategy.canRestart());
      final OneShotLatch sync=new OneShotLatch();
      final RestartCallback restarter=new LatchedRestarter(sync);
      final long time=System.nanoTime();
      strategy.restart(restarter,executor);
      sync.await();
      final long elapsed=System.nanoTime() - time;
      assertTrue("Not enough delay",elapsed >= restartDelay * 1_000_000);
    }
    assertFalse(strategy.canRestart());
  }
}
