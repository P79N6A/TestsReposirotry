private static class DummyFlinkKafkaConsumer<T> extends FlinkKafkaConsumerBase<T> {
  private static final long serialVersionUID=1L;
  private final List<KafkaTopicPartition> partitions;
  private final AbstractFetcher<T,?> fetcher;
  @SuppressWarnings("unchecked") DummyFlinkKafkaConsumer(  AbstractFetcher<T,?> fetcher,  List<KafkaTopicPartition> partitions,  long discoveryInterval){
    super(Arrays.asList("dummy-topic"),null,(KeyedDeserializationSchema<T>)mock(KeyedDeserializationSchema.class),discoveryInterval,false);
    this.fetcher=fetcher;
    this.partitions=partitions;
  }
  DummyFlinkKafkaConsumer(  List<KafkaTopicPartition> partitions,  long discoveryInterval){
    this(mock(AbstractFetcher.class),partitions,discoveryInterval);
  }
  @Override protected AbstractFetcher<T,?> createFetcher(  SourceContext<T> sourceContext,  Map<KafkaTopicPartition,Long> thisSubtaskPartitionsWithStartOffsets,  SerializedValue<AssignerWithPeriodicWatermarks<T>> watermarksPeriodic,  SerializedValue<AssignerWithPunctuatedWatermarks<T>> watermarksPunctuated,  StreamingRuntimeContext runtimeContext,  OffsetCommitMode offsetCommitMode,  MetricGroup consumerMetricGroup,  boolean useMetrics) throws Exception {
    return fetcher;
  }
  @Override protected AbstractPartitionDiscoverer createPartitionDiscoverer(  KafkaTopicsDescriptor topicsDescriptor,  int indexOfThisSubtask,  int numParallelSubtasks){
    AbstractPartitionDiscoverer mockPartitionDiscoverer=mock(AbstractPartitionDiscoverer.class);
    try {
      when(mockPartitionDiscoverer.discoverPartitions()).thenReturn(partitions);
    }
 catch (    Exception e) {
    }
    when(mockPartitionDiscoverer.setAndCheckDiscoveredPartition(any(KafkaTopicPartition.class))).thenReturn(true);
    return mockPartitionDiscoverer;
  }
  @Override protected boolean getIsAutoCommitEnabled(){
    return false;
  }
  @Override protected Map<KafkaTopicPartition,Long> fetchOffsetsWithTimestamp(  Collection<KafkaTopicPartition> partitions,  long timestamp){
    throw new UnsupportedOperationException();
  }
}
