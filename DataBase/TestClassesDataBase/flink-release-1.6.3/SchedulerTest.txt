public class SchedulerTest extends TestLogger {
  @Test public void testAddAndRemoveInstance(){
    Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    Instance i3=getRandomInstance(2);
    assertEquals(0,scheduler.getNumberOfAvailableInstances());
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
    scheduler.newInstanceAvailable(i1);
    assertEquals(1,scheduler.getNumberOfAvailableInstances());
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
    scheduler.newInstanceAvailable(i2);
    assertEquals(2,scheduler.getNumberOfAvailableInstances());
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    scheduler.newInstanceAvailable(i3);
    assertEquals(3,scheduler.getNumberOfAvailableInstances());
    assertEquals(6,scheduler.getNumberOfAvailableSlots());
    try {
      scheduler.newInstanceAvailable(i2);
      fail("Scheduler accepted instance twice");
    }
 catch (    IllegalArgumentException e) {
    }
    assertEquals(3,scheduler.getNumberOfAvailableInstances());
    assertEquals(6,scheduler.getNumberOfAvailableSlots());
    scheduler.instanceDied(i2);
    assertEquals(2,scheduler.getNumberOfAvailableInstances());
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    try {
      scheduler.newInstanceAvailable(i2);
      fail("Scheduler accepted dead instance");
    }
 catch (    IllegalArgumentException e) {
    }
    scheduler.instanceDied(i1);
    assertEquals(1,scheduler.getNumberOfAvailableInstances());
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
    scheduler.instanceDied(i3);
    assertEquals(0,scheduler.getNumberOfAvailableInstances());
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
    assertFalse(i1.isAlive());
    assertFalse(i2.isAlive());
    assertFalse(i3.isAlive());
  }
  /** 
 * Tests that the Scheduler times out uncompleted slot futures.
 */
  @Test public void testSlotAllocationTimeout() throws Exception {
    final Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutor());
    final ExecutionGraph executionGraph=ExecutionGraphTestUtils.createSimpleTestGraph();
    final Map<ExecutionAttemptID,Execution> registeredExecutions=executionGraph.getRegisteredExecutions();
    assertThat(registeredExecutions.values(),Matchers.not(Matchers.empty()));
    final Execution execution=registeredExecutions.values().iterator().next();
    final CompletableFuture<LogicalSlot> slotFuture=scheduler.allocateSlot(new ScheduledUnit(execution),true,SlotProfile.noRequirements(),Time.milliseconds(1L));
    try {
      slotFuture.get();
    }
 catch (    ExecutionException ee) {
      assertThat(ExceptionUtils.stripExecutionException(ee),Matchers.instanceOf(TimeoutException.class));
    }
  }
}
