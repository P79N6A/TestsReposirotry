/** 
 * Tests for  {@link VertexInDegree}.
 */
public class VertexInDegreeTest extends AsmTestBase {
  @Test public void testWithDirectedSimpleGraph() throws Exception {
    DataSet<Vertex<IntValue,LongValue>> inDegree=directedSimpleGraph.run(new VertexInDegree<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,0)\n" + "(1,3)\n" + "(2,1)\n"+ "(3,2)\n"+ "(4,1)\n"+ "(5,0)";
    TestBaseUtils.compareResultAsText(inDegree.collect(),expectedResult);
  }
  @Test public void testWithUndirectedSimpleGraph() throws Exception {
    DataSet<Vertex<IntValue,LongValue>> inDegree=undirectedSimpleGraph.run(new VertexInDegree<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,2)\n" + "(1,3)\n" + "(2,3)\n"+ "(3,4)\n"+ "(4,1)\n"+ "(5,1)";
    TestBaseUtils.compareResultAsText(inDegree.collect(),expectedResult);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> inDegreeWithoutZeroDegreeVertices=emptyGraphWithVertices.run(new VertexInDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false));
    assertEquals(0,inDegreeWithoutZeroDegreeVertices.collect().size());
    DataSet<Vertex<LongValue,LongValue>> inDegreeWithZeroDegreeVertices=emptyGraphWithVertices.run(new VertexInDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    String expectedResult="(0,0)\n" + "(1,0)\n" + "(2,0)";
    TestBaseUtils.compareResultAsText(inDegreeWithZeroDegreeVertices.collect(),expectedResult);
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> inDegreeWithoutZeroDegreeVertices=emptyGraphWithoutVertices.run(new VertexInDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false));
    assertEquals(0,inDegreeWithoutZeroDegreeVertices.collect().size());
    DataSet<Vertex<LongValue,LongValue>> inDegreeWithZeroDegreeVertices=emptyGraphWithoutVertices.run(new VertexInDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    assertEquals(0,inDegreeWithZeroDegreeVertices.collect().size());
  }
  @Test public void testWithRMatGraph() throws Exception {
    DataSet<Vertex<LongValue,LongValue>> inDegree=directedRMatGraph(10,16).run(new VertexInDegree<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(true));
    Checksum checksum=new ChecksumHashCode<Vertex<LongValue,LongValue>>().run(inDegree).execute();
    assertEquals(902,checksum.getCount());
    assertEquals(0x0000000000e1d885L,checksum.getChecksum());
  }
}
