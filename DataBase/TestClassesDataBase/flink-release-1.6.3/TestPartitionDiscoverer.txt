/** 
 * Utility  {@link AbstractPartitionDiscoverer} for tests that allowsmocking the sequence of consecutive metadata fetch calls to Kafka.
 */
public class TestPartitionDiscoverer extends AbstractPartitionDiscoverer {
  private final KafkaTopicsDescriptor topicsDescriptor;
  private final List<List<String>> mockGetAllTopicsReturnSequence;
  private final List<List<KafkaTopicPartition>> mockGetAllPartitionsForTopicsReturnSequence;
  private int getAllTopicsInvokeCount=0;
  private int getAllPartitionsForTopicsInvokeCount=0;
  public TestPartitionDiscoverer(  KafkaTopicsDescriptor topicsDescriptor,  int indexOfThisSubtask,  int numParallelSubtasks,  List<List<String>> mockGetAllTopicsReturnSequence,  List<List<KafkaTopicPartition>> mockGetAllPartitionsForTopicsReturnSequence){
    super(topicsDescriptor,indexOfThisSubtask,numParallelSubtasks);
    this.topicsDescriptor=topicsDescriptor;
    this.mockGetAllTopicsReturnSequence=mockGetAllTopicsReturnSequence;
    this.mockGetAllPartitionsForTopicsReturnSequence=mockGetAllPartitionsForTopicsReturnSequence;
  }
  @Override protected List<String> getAllTopics(){
    assertTrue(topicsDescriptor.isTopicPattern());
    return mockGetAllTopicsReturnSequence.get(getAllTopicsInvokeCount++);
  }
  @Override protected List<KafkaTopicPartition> getAllPartitionsForTopics(  List<String> topics){
    if (topicsDescriptor.isFixedTopics()) {
      assertEquals(topicsDescriptor.getFixedTopics(),topics);
    }
 else {
      assertEquals(mockGetAllTopicsReturnSequence.get(getAllPartitionsForTopicsInvokeCount - 1),topics);
    }
    return mockGetAllPartitionsForTopicsReturnSequence.get(getAllPartitionsForTopicsInvokeCount++);
  }
  @Override protected void initializeConnections(){
  }
  @Override protected void wakeupConnections(){
  }
  @Override protected void closeConnections(){
  }
  public static List<List<String>> createMockGetAllTopicsSequenceFromFixedReturn(  final List<String> fixed){
    @SuppressWarnings("unchecked") List<List<String>> mockSequence=mock(List.class);
    when(mockSequence.get(anyInt())).thenAnswer(new Answer<List<String>>(){
      @Override public List<String> answer(      InvocationOnMock invocationOnMock) throws Throwable {
        return new ArrayList<>(fixed);
      }
    }
);
    return mockSequence;
  }
  public static List<List<KafkaTopicPartition>> createMockGetAllPartitionsFromTopicsSequenceFromFixedReturn(  final List<KafkaTopicPartition> fixed){
    @SuppressWarnings("unchecked") List<List<KafkaTopicPartition>> mockSequence=mock(List.class);
    when(mockSequence.get(anyInt())).thenAnswer(new Answer<List<KafkaTopicPartition>>(){
      @Override public List<KafkaTopicPartition> answer(      InvocationOnMock invocationOnMock) throws Throwable {
        return new ArrayList<>(fixed);
      }
    }
);
    return mockSequence;
  }
}
