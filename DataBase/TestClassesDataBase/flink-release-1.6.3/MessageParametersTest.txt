/** 
 * Tests for  {@link MessageParameters}.
 */
public class MessageParametersTest extends TestLogger {
  @Test public void testResolveUrl(){
    String genericUrl="/jobs/:jobid/state";
    TestMessageParameters parameters=new TestMessageParameters();
    JobID pathJobID=new JobID();
    JobID queryJobID=new JobID();
    parameters.pathParameter.resolve(pathJobID);
    parameters.queryParameter.resolve(Collections.singletonList(queryJobID));
    String resolvedUrl=MessageParameters.resolveUrl(genericUrl,parameters);
    Assert.assertEquals("/jobs/" + pathJobID + "/state?jobid="+ queryJobID,resolvedUrl);
  }
  @Test public void testUnresolvedParameters(){
    String genericUrl="/jobs/:jobid/state";
    TestMessageParameters parameters=new TestMessageParameters();
    try {
      MessageParameters.resolveUrl(genericUrl,parameters);
      Assert.fail();
    }
 catch (    IllegalStateException expected) {
    }
    JobID jobID=new JobID();
    parameters.pathParameter.resolve(jobID);
    String resolvedUrl=MessageParameters.resolveUrl(genericUrl,parameters);
    Assert.assertEquals("/jobs/" + jobID + "/state",resolvedUrl);
  }
private static class TestMessageParameters extends MessageParameters {
    private final TestPathParameter pathParameter=new TestPathParameter();
    private final TestQueryParameter queryParameter=new TestQueryParameter();
    @Override public Collection<MessagePathParameter<?>> getPathParameters(){
      return Collections.singleton(pathParameter);
    }
    @Override public Collection<MessageQueryParameter<?>> getQueryParameters(){
      return Collections.singleton(queryParameter);
    }
  }
private static class TestPathParameter extends MessagePathParameter<JobID> {
    TestPathParameter(){
      super("jobid");
    }
    @Override public JobID convertFromString(    String value){
      return JobID.fromHexString(value);
    }
    @Override protected String convertToString(    JobID value){
      return value.toString();
    }
  }
private static class TestQueryParameter extends MessageQueryParameter<JobID> {
    TestQueryParameter(){
      super("jobid",MessageParameterRequisiteness.OPTIONAL);
    }
    @Override public JobID convertStringToValue(    String value){
      return JobID.fromHexString(value);
    }
    @Override public String convertValueToString(    JobID value){
      return value.toString();
    }
  }
}
