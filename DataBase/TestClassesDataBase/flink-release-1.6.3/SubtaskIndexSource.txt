private static class SubtaskIndexSource extends RichParallelSourceFunction<Integer> {
  private static final long serialVersionUID=-400066323594122516L;
  private final int numberKeys;
  private final int numberElements;
  private final boolean terminateAfterEmission;
  protected int counter=0;
  private boolean running=true;
  SubtaskIndexSource(  int numberKeys,  int numberElements,  boolean terminateAfterEmission){
    this.numberKeys=numberKeys;
    this.numberElements=numberElements;
    this.terminateAfterEmission=terminateAfterEmission;
  }
  @Override public void run(  SourceContext<Integer> ctx) throws Exception {
    final Object lock=ctx.getCheckpointLock();
    final int subtaskIndex=getRuntimeContext().getIndexOfThisSubtask();
    while (running) {
      if (counter < numberElements) {
synchronized (lock) {
          for (int value=subtaskIndex; value < numberKeys; value+=getRuntimeContext().getNumberOfParallelSubtasks()) {
            ctx.collect(value);
          }
          counter++;
        }
      }
 else {
        if (terminateAfterEmission) {
          running=false;
        }
 else {
          Thread.sleep(100);
        }
      }
    }
  }
  @Override public void cancel(){
    running=false;
  }
}
