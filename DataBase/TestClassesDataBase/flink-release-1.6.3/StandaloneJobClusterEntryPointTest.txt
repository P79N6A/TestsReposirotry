/** 
 * Tests for the  {@link StandaloneJobClusterEntryPoint}.
 */
public class StandaloneJobClusterEntryPointTest extends TestLogger {
  public static final String[] PROGRAM_ARGUMENTS={"--arg","suffix"};
  @Test public void testJobGraphRetrieval() throws FlinkException {
    final Configuration configuration=new Configuration();
    final int parallelism=42;
    configuration.setInteger(CoreOptions.DEFAULT_PARALLELISM,parallelism);
    final StandaloneJobClusterEntryPoint standaloneJobClusterEntryPoint=new StandaloneJobClusterEntryPoint(configuration,TestJob.class.getCanonicalName(),SavepointRestoreSettings.none(),PROGRAM_ARGUMENTS);
    final JobGraph jobGraph=standaloneJobClusterEntryPoint.retrieveJobGraph(configuration);
    assertThat(jobGraph.getName(),is(equalTo(TestJob.class.getCanonicalName() + "-suffix")));
    assertThat(jobGraph.getMaximumParallelism(),is(parallelism));
    assertEquals(jobGraph.getJobID(),FIXED_JOB_ID);
  }
  @Test public void testSavepointRestoreSettings() throws FlinkException {
    final Configuration configuration=new Configuration();
    final SavepointRestoreSettings savepointRestoreSettings=SavepointRestoreSettings.forPath("foobar",true);
    final StandaloneJobClusterEntryPoint jobClusterEntryPoint=new StandaloneJobClusterEntryPoint(configuration,TestJob.class.getCanonicalName(),savepointRestoreSettings,PROGRAM_ARGUMENTS);
    final JobGraph jobGraph=jobClusterEntryPoint.retrieveJobGraph(configuration);
    assertThat(jobGraph.getSavepointRestoreSettings(),is(equalTo(savepointRestoreSettings)));
    assertEquals(jobGraph.getJobID(),FIXED_JOB_ID);
  }
}
