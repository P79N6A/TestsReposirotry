/** 
 * Tests for  {@link DataSet#minBy(int)}.
 */
public class MinByOperatorTest {
  private final List<Tuple5<Integer,Long,String,Long,Integer>> emptyTupleData=new ArrayList<Tuple5<Integer,Long,String,Long,Integer>>();
  private final TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>> tupleTypeInfo=new TupleTypeInfo<Tuple5<Integer,Long,String,Long,Integer>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  /** 
 * This test validates that no exceptions is thrown when an empty dataset calls minBy().
 */
  @Test public void testMinByKeyFieldsDataset(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    try {
      tupleDs.minBy(4,0,1,2,3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  private final List<CustomType> customTypeData=new ArrayList<CustomType>();
  /** 
 * This test validates that an InvalidProgramException is thrown when minBy is used on a custom data type.
 */
  @Test(expected=InvalidProgramException.class) public void testCustomKeyFieldsDataset(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    this.customTypeData.add(new CustomType());
    DataSet<CustomType> customDs=env.fromCollection(customTypeData);
    customDs.minBy(0);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset1(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    tupleDs.minBy(5);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset2(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    tupleDs.minBy(-1);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsDataset3(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    tupleDs.minBy(1,2,3,4,-1);
  }
  /** 
 * This test validates that no exceptions is thrown when an empty grouping calls minBy().
 */
  @Test public void testMinByKeyFieldsGrouping(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    UnsortedGrouping<Tuple5<Integer,Long,String,Long,Integer>> groupDs=env.fromCollection(emptyTupleData,tupleTypeInfo).groupBy(0);
    try {
      groupDs.minBy(4,0,1,2,3);
    }
 catch (    Exception e) {
      Assert.fail();
    }
  }
  /** 
 * This test validates that an InvalidProgramException is thrown when minBy is used on a custom data type.
 */
  @Test(expected=InvalidProgramException.class) public void testCustomKeyFieldsGrouping(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    this.customTypeData.add(new CustomType());
    UnsortedGrouping<CustomType> groupDs=env.fromCollection(customTypeData).groupBy(0);
    groupDs.minBy(0);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping1(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    UnsortedGrouping<Tuple5<Integer,Long,String,Long,Integer>> groupDs=env.fromCollection(emptyTupleData,tupleTypeInfo).groupBy(0);
    groupDs.minBy(5);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping2(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    UnsortedGrouping<Tuple5<Integer,Long,String,Long,Integer>> groupDs=env.fromCollection(emptyTupleData,tupleTypeInfo).groupBy(0);
    groupDs.minBy(-1);
  }
  /** 
 * This test validates that an index which is out of bounds throws an IndexOutOfBoundsException.
 */
  @Test(expected=IndexOutOfBoundsException.class) public void testOutOfTupleBoundsGrouping3(){
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    UnsortedGrouping<Tuple5<Integer,Long,String,Long,Integer>> groupDs=env.fromCollection(emptyTupleData,tupleTypeInfo).groupBy(0);
    groupDs.minBy(1,2,3,4,-1);
  }
  /** 
 * Custom data type, for testing purposes.
 */
public static class CustomType implements Serializable {
    private static final long serialVersionUID=1L;
    public int myInt;
    public long myLong;
    public String myString;
    public CustomType(){
    }
    public CustomType(    int i,    long l,    String s){
      myInt=i;
      myLong=l;
      myString=s;
    }
    @Override public String toString(){
      return myInt + "," + myLong+ ","+ myString;
    }
  }
}
