/** 
 * Tests for the WebFrontend.
 */
public class WebFrontendITCase extends TestLogger {
  private static final int NUM_TASK_MANAGERS=2;
  private static final int NUM_SLOTS=4;
  private static final Configuration CLUSTER_CONFIGURATION=getClusterConfiguration();
  @ClassRule public static final MiniClusterResource CLUSTER=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(CLUSTER_CONFIGURATION).setNumberTaskManagers(NUM_TASK_MANAGERS).setNumberSlotsPerTaskManager(NUM_SLOTS).build());
  private static Configuration getClusterConfiguration(){
    Configuration config=new Configuration();
    try {
      File logDir=File.createTempFile("TestBaseUtils-logdir",null);
      assertTrue("Unable to delete temp file",logDir.delete());
      assertTrue("Unable to create temp directory",logDir.mkdir());
      File logFile=new File(logDir,"jobmanager.log");
      File outFile=new File(logDir,"jobmanager.out");
      Files.createFile(logFile.toPath());
      Files.createFile(outFile.toPath());
      config.setString(WebOptions.LOG_PATH,logFile.getAbsolutePath());
      config.setString(ConfigConstants.TASK_MANAGER_LOG_PATH_KEY,logFile.getAbsolutePath());
    }
 catch (    Exception e) {
      throw new AssertionError("Could not setup test.",e);
    }
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"12m");
    config.setBoolean(ConfigConstants.LOCAL_START_WEBSERVER,true);
    return config;
  }
  @After public void tearDown(){
    BlockingInvokable.reset();
  }
  @Test public void getFrontPage(){
    try {
      String fromHTTP=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/index.html");
      String text="Apache Flink Dashboard";
      assertTrue("Startpage should contain " + text,fromHTTP.contains(text));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testResponseHeaders() throws Exception {
    URL taskManagersUrl=new URL("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers");
    HttpURLConnection taskManagerConnection=(HttpURLConnection)taskManagersUrl.openConnection();
    taskManagerConnection.setConnectTimeout(100000);
    taskManagerConnection.connect();
    if (taskManagerConnection.getResponseCode() >= 400) {
      InputStream is=taskManagerConnection.getErrorStream();
      String errorMessage=IOUtils.toString(is,ConfigConstants.DEFAULT_CHARSET);
      throw new RuntimeException(errorMessage);
    }
    Assert.assertNull(taskManagerConnection.getContentEncoding());
    Assert.assertEquals("application/json; charset=UTF-8",taskManagerConnection.getContentType());
    URL notFoundJobUrl=new URL("http://localhost:" + CLUSTER.getWebUIPort() + "/jobs/dontexist");
    HttpURLConnection notFoundJobConnection=(HttpURLConnection)notFoundJobUrl.openConnection();
    notFoundJobConnection.setConnectTimeout(100000);
    notFoundJobConnection.connect();
    if (notFoundJobConnection.getResponseCode() >= 400) {
      Assert.assertNull(notFoundJobConnection.getContentEncoding());
      if (CLUSTER.getCodebaseType() == TestBaseUtils.CodebaseType.NEW) {
        Assert.assertEquals("application/json; charset=UTF-8",notFoundJobConnection.getContentType());
      }
 else {
        Assert.assertEquals("text/plain; charset=UTF-8",notFoundJobConnection.getContentType());
      }
    }
 else {
      throw new RuntimeException("Request for non-existing job did not return an error.");
    }
  }
  @Test public void getNumberOfTaskManagers(){
    try {
      String json=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers/");
      ObjectMapper mapper=new ObjectMapper();
      JsonNode response=mapper.readTree(json);
      ArrayNode taskManagers=(ArrayNode)response.get("taskmanagers");
      assertNotNull(taskManagers);
      assertEquals(NUM_TASK_MANAGERS,taskManagers.size());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void getTaskmanagers() throws Exception {
    String json=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers/");
    ObjectMapper mapper=new ObjectMapper();
    JsonNode parsed=mapper.readTree(json);
    ArrayNode taskManagers=(ArrayNode)parsed.get("taskmanagers");
    assertNotNull(taskManagers);
    assertEquals(NUM_TASK_MANAGERS,taskManagers.size());
    JsonNode taskManager=taskManagers.get(0);
    assertNotNull(taskManager);
    assertEquals(NUM_SLOTS,taskManager.get("slotsNumber").asInt());
    assertTrue(taskManager.get("freeSlots").asInt() <= NUM_SLOTS);
  }
  @Test public void getLogAndStdoutFiles() throws Exception {
    WebMonitorUtils.LogFileLocation logFiles=WebMonitorUtils.LogFileLocation.find(CLUSTER_CONFIGURATION);
    FileUtils.writeStringToFile(logFiles.logFile,"job manager log");
    String logs=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/jobmanager/log");
    assertTrue(logs.contains("job manager log"));
    FileUtils.writeStringToFile(logFiles.stdOutFile,"job manager out");
    logs=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/jobmanager/stdout");
    assertTrue(logs.contains("job manager out"));
  }
  @Test public void getTaskManagerLogAndStdoutFiles(){
    try {
      String json=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers/");
      ObjectMapper mapper=new ObjectMapper();
      JsonNode parsed=mapper.readTree(json);
      ArrayNode taskManagers=(ArrayNode)parsed.get("taskmanagers");
      JsonNode taskManager=taskManagers.get(0);
      String id=taskManager.get("id").asText();
      WebMonitorUtils.LogFileLocation logFiles=WebMonitorUtils.LogFileLocation.find(CLUSTER_CONFIGURATION);
      FileUtils.writeStringToFile(logFiles.logFile,"job manager log");
      String logs=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers/"+ id+ "/log");
      assertTrue(logs.contains("job manager log"));
      FileUtils.writeStringToFile(logFiles.stdOutFile,"job manager out");
      logs=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers/"+ id+ "/stdout");
      assertTrue(logs.contains("job manager out"));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void getConfiguration(){
    try {
      String config=TestBaseUtils.getFromHTTP("http://localhost:" + CLUSTER.getWebUIPort() + "/jobmanager/config");
      Map<String,String> conf=WebMonitorUtils.fromKeyValueJsonArray(config);
      assertEquals(CLUSTER_CONFIGURATION.getString(ConfigConstants.LOCAL_START_WEBSERVER,null),conf.get(ConfigConstants.LOCAL_START_WEBSERVER));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testStop() throws Exception {
    assertTrue(getRunningJobs(CLUSTER.getClusterClient()).isEmpty());
    final JobVertex sender=new JobVertex("Sender");
    sender.setParallelism(2);
    sender.setInvokableClass(BlockingInvokable.class);
    final JobGraph jobGraph=new JobGraph("Stoppable streaming test job",sender);
    final JobID jid=jobGraph.getJobID();
    ClusterClient<?> clusterClient=CLUSTER.getClusterClient();
    clusterClient.setDetached(true);
    clusterClient.submitJob(jobGraph,WebFrontendITCase.class.getClassLoader());
    while (getRunningJobs(CLUSTER.getClusterClient()).isEmpty()) {
      Thread.sleep(10);
    }
    BlockingInvokable.latch.await();
    final FiniteDuration testTimeout=new FiniteDuration(2,TimeUnit.MINUTES);
    final Deadline deadline=testTimeout.fromNow();
    try (HttpTestClient client=new HttpTestClient("localhost",CLUSTER.getWebUIPort())){
      if (CLUSTER.getCodebaseType() == TestBaseUtils.CodebaseType.NEW) {
        client.sendPatchRequest("/jobs/" + jid + "/?mode=stop",deadline.timeLeft());
        HttpTestClient.SimpleHttpResponse response=client.getNextResponse(deadline.timeLeft());
        assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
        assertEquals("application/json; charset=UTF-8",response.getType());
        assertEquals("{}",response.getContent());
      }
 else {
        client.sendDeleteRequest("/jobs/" + jid + "/stop",deadline.timeLeft());
        HttpTestClient.SimpleHttpResponse response=client.getNextResponse(deadline.timeLeft());
        assertEquals(HttpResponseStatus.OK,response.getStatus());
        assertEquals("application/json; charset=UTF-8",response.getType());
        assertEquals("{}",response.getContent());
      }
    }
     while (!getRunningJobs(CLUSTER.getClusterClient()).isEmpty()) {
      Thread.sleep(20);
    }
    try (HttpTestClient client=new HttpTestClient("localhost",CLUSTER.getWebUIPort())){
      FiniteDuration timeout=new FiniteDuration(30,TimeUnit.SECONDS);
      client.sendGetRequest("/jobs/" + jid + "/config",timeout);
      HttpTestClient.SimpleHttpResponse response=client.getNextResponse(timeout);
      assertEquals(HttpResponseStatus.OK,response.getStatus());
      assertEquals("application/json; charset=UTF-8",response.getType());
      assertEquals("{\"jid\":\"" + jid + "\",\"name\":\"Stoppable streaming test job\","+ "\"execution-config\":{\"execution-mode\":\"PIPELINED\",\"restart-strategy\":\"Cluster level default restart strategy\","+ "\"job-parallelism\":-1,\"object-reuse-mode\":false,\"user-config\":{}}}",response.getContent());
    }
     BlockingInvokable.reset();
  }
  @Test public void testStopYarn() throws Exception {
    assertTrue(getRunningJobs(CLUSTER.getClusterClient()).isEmpty());
    final JobVertex sender=new JobVertex("Sender");
    sender.setParallelism(2);
    sender.setInvokableClass(BlockingInvokable.class);
    final JobGraph jobGraph=new JobGraph("Stoppable streaming test job",sender);
    final JobID jid=jobGraph.getJobID();
    ClusterClient<?> clusterClient=CLUSTER.getClusterClient();
    clusterClient.setDetached(true);
    clusterClient.submitJob(jobGraph,WebFrontendITCase.class.getClassLoader());
    while (getRunningJobs(CLUSTER.getClusterClient()).isEmpty()) {
      Thread.sleep(10);
    }
    BlockingInvokable.latch.await();
    final FiniteDuration testTimeout=new FiniteDuration(2,TimeUnit.MINUTES);
    final Deadline deadline=testTimeout.fromNow();
    try (HttpTestClient client=new HttpTestClient("localhost",CLUSTER.getWebUIPort())){
      client.sendGetRequest("/jobs/" + jid + "/yarn-stop",deadline.timeLeft());
      HttpTestClient.SimpleHttpResponse response=client.getNextResponse(deadline.timeLeft());
      if (CLUSTER.getCodebaseType() == TestBaseUtils.CodebaseType.NEW) {
        assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
      }
 else {
        assertEquals(HttpResponseStatus.OK,response.getStatus());
      }
      assertEquals("application/json; charset=UTF-8",response.getType());
      assertEquals("{}",response.getContent());
    }
     while (!getRunningJobs(CLUSTER.getClusterClient()).isEmpty()) {
      Thread.sleep(20);
    }
    BlockingInvokable.reset();
  }
  private static List<JobID> getRunningJobs(  ClusterClient<?> client) throws Exception {
    Collection<JobStatusMessage> statusMessages=client.listJobs().get();
    return statusMessages.stream().filter(status -> !status.getJobState().isGloballyTerminalState()).map(JobStatusMessage::getJobId).collect(Collectors.toList());
  }
  /** 
 * Test invokable that is stoppable and allows waiting for all subtasks to be running.
 */
public static class BlockingInvokable extends AbstractInvokable implements StoppableTask {
    private static CountDownLatch latch=new CountDownLatch(2);
    private volatile boolean isRunning=true;
    public BlockingInvokable(    Environment environment){
      super(environment);
    }
    @Override public void invoke() throws Exception {
      latch.countDown();
      while (isRunning) {
        Thread.sleep(100);
      }
    }
    @Override public void stop(){
      this.isRunning=false;
    }
    public static void reset(){
      latch=new CountDownLatch(2);
    }
  }
}
