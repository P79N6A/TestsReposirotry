/** 
 * Retries a test in case of a failure.
 */
private static class RetryOnExceptionStatement extends Statement {
  private final Class<? extends Throwable> exceptionClass;
  private final int timesOnFailure;
  private final Statement statement;
  private int currentRun;
  private RetryOnExceptionStatement(  int timesOnFailure,  Class<? extends Throwable> exceptionClass,  Statement statement){
    if (timesOnFailure < 0) {
      throw new IllegalArgumentException("Negatives number of retries on failure");
    }
    if (exceptionClass == null) {
      throw new NullPointerException("exceptionClass");
    }
    this.exceptionClass=(exceptionClass);
    this.timesOnFailure=timesOnFailure;
    this.statement=statement;
  }
  /** 
 * Retry a test in case of a failure with a specific exception.
 * @throws Throwable
 */
  @Override public void evaluate() throws Throwable {
    for (currentRun=0; currentRun <= timesOnFailure; currentRun++) {
      try {
        statement.evaluate();
        break;
      }
 catch (      Throwable t) {
        LOG.warn(String.format("Test run failed (%d/%d).",currentRun,timesOnFailure + 1),t);
        if (!exceptionClass.isAssignableFrom(t.getClass()) || currentRun >= timesOnFailure) {
          throw t;
        }
      }
    }
  }
}
