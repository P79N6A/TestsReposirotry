private static final class MinimumIdFilterCounting extends RichFlatMapFunction<Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>>,Tuple2<Long,Long>> {
  private static final long[] aggr_value=new long[5];
  private final String aggName;
  private LongSumAggregatorWithParameter aggr;
  public MinimumIdFilterCounting(  String aggName){
    this.aggName=aggName;
  }
  @Override public void open(  Configuration conf){
    final int superstep=getIterationRuntimeContext().getSuperstepNumber();
    aggr=getIterationRuntimeContext().getIterationAggregator(aggName);
    if (superstep > 1 && getIterationRuntimeContext().getIndexOfThisSubtask() == 0) {
      LongValue val=getIterationRuntimeContext().getPreviousIterationAggregate(aggName);
      aggr_value[superstep - 2]=val.getValue();
    }
  }
  @Override public void flatMap(  Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>> vertexWithNewAndOldId,  Collector<Tuple2<Long,Long>> out){
    if (vertexWithNewAndOldId.f0.f1 < vertexWithNewAndOldId.f1.f1) {
      out.collect(vertexWithNewAndOldId.f0);
      if (vertexWithNewAndOldId.f0.f1 == aggr.getComponentId()) {
        aggr.aggregate(1L);
      }
    }
 else {
      out.collect(vertexWithNewAndOldId.f1);
      if (vertexWithNewAndOldId.f1.f1 == aggr.getComponentId()) {
        aggr.aggregate(1L);
      }
    }
  }
}
