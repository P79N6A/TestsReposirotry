/** 
 * Tests for the combination of  {@link DataOutputSerializer} and {@link DataInputDeserializer}.
 */
public class DataInputOutputSerializerTest {
  @Test public void testWrapAsByteBuffer(){
    SerializationTestType randomInt=Util.randomRecord(SerializationTestTypeFactory.INT);
    DataOutputSerializer serializer=new DataOutputSerializer(randomInt.length());
    MemorySegment segment=MemorySegmentFactory.allocateUnpooledSegment(randomInt.length());
    try {
      ByteBuffer wrapper=serializer.wrapAsByteBuffer();
      Assert.assertEquals(0,wrapper.position());
      Assert.assertEquals(0,wrapper.limit());
      randomInt.write(serializer);
      Assert.assertEquals(0,wrapper.position());
      Assert.assertEquals(0,wrapper.limit());
      wrapper=serializer.wrapAsByteBuffer();
      Assert.assertEquals(0,wrapper.position());
      Assert.assertEquals(randomInt.length(),wrapper.limit());
      serializer.clear();
      Assert.assertEquals(0,wrapper.position());
      Assert.assertEquals(randomInt.length(),wrapper.limit());
      wrapper=serializer.wrapAsByteBuffer();
      Assert.assertEquals(0,wrapper.position());
      Assert.assertEquals(0,wrapper.limit());
      randomInt.write(serializer);
      wrapper=serializer.wrapAsByteBuffer();
      segment.put(0,wrapper,randomInt.length());
      Assert.assertEquals(randomInt.length(),wrapper.position());
      Assert.assertEquals(randomInt.length(),wrapper.limit());
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.fail("Test encountered an unexpected exception.");
    }
  }
  @Test public void testRandomValuesWriteRead(){
    final int numElements=100000;
    final ArrayDeque<SerializationTestType> reference=new ArrayDeque<>();
    DataOutputSerializer serializer=new DataOutputSerializer(1);
    for (    SerializationTestType value : Util.randomRecords(numElements)) {
      reference.add(value);
      try {
        value.write(serializer);
      }
 catch (      IOException e) {
        e.printStackTrace();
        Assert.fail("Test encountered an unexpected exception.");
      }
    }
    DataInputDeserializer deserializer=new DataInputDeserializer(serializer.wrapAsByteBuffer());
    for (    SerializationTestType expected : reference) {
      try {
        SerializationTestType actual=expected.getClass().newInstance();
        actual.read(deserializer);
        Assert.assertEquals(expected,actual);
      }
 catch (      Exception e) {
        e.printStackTrace();
        Assert.fail("Test encountered an unexpected exception.");
      }
    }
    reference.clear();
  }
}
