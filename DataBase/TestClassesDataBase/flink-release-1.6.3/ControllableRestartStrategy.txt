private static class ControllableRestartStrategy implements RestartStrategy {
  private final OneShotLatch reachedCanRestart=new OneShotLatch();
  private final OneShotLatch doRestart=new OneShotLatch();
  private final OneShotLatch restartDone=new OneShotLatch();
  private final Time timeout;
  private volatile Exception exception;
  public ControllableRestartStrategy(  Time timeout){
    this.timeout=timeout;
  }
  public void unlockRestart(){
    doRestart.trigger();
  }
  public Exception getException(){
    return exception;
  }
  public OneShotLatch getReachedCanRestart(){
    return reachedCanRestart;
  }
  public OneShotLatch getRestartDone(){
    return restartDone;
  }
  @Override public boolean canRestart(){
    reachedCanRestart.trigger();
    return true;
  }
  @Override public void restart(  final RestartCallback restarter,  ScheduledExecutor executor){
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          doRestart.await(timeout.getSize(),timeout.getUnit());
          restarter.triggerFullRecovery();
        }
 catch (        Exception e) {
          exception=e;
        }
        restartDone.trigger();
      }
    }
);
  }
}
