/** 
 * Tests for  {@link LongValueToSignedIntValue}.
 */
public class LongValueToSignedIntValueTest {
  private TranslateFunction<LongValue,IntValue> translator=new LongValueToSignedIntValue();
  private IntValue reuse=new IntValue();
  @Test public void testTranslation() throws Exception {
    assertEquals(new IntValue(Integer.MIN_VALUE),translator.translate(new LongValue((long)Integer.MIN_VALUE),reuse));
    assertEquals(new IntValue(0),translator.translate(new LongValue(0L),reuse));
    assertEquals(new IntValue(Integer.MAX_VALUE),translator.translate(new LongValue((long)Integer.MAX_VALUE),reuse));
  }
  @Test(expected=IllegalArgumentException.class) public void testUpperOutOfRange() throws Exception {
    translator.translate(new LongValue((long)Integer.MAX_VALUE + 1),reuse);
  }
  @Test(expected=IllegalArgumentException.class) public void testLowerOutOfRange() throws Exception {
    translator.translate(new LongValue((long)Integer.MIN_VALUE - 1),reuse);
  }
}
