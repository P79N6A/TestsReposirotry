/** 
 * This test checks the correct assignment of the DataExchangeMode to connections for programs that branch, and re-join those branches. <pre> /-> (sink) / /-> (reduce) -+          /-> (flatmap) -> (sink) /               \        / (source) -> (map) -                (join) -+-----\ \               /              \ \-> (filter) -+                \ \                (co group) -> (sink) \                / \-> (reduce) - / </pre>
 */
@SuppressWarnings("serial") public class DataExchangeModeClosedBranchingTest extends CompilerTestBase {
  @Test public void testPipelinedForced(){
    verifyBranchingJoiningPlan(ExecutionMode.PIPELINED_FORCED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED);
  }
  @Test public void testPipelined(){
    verifyBranchingJoiningPlan(ExecutionMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED);
  }
  @Test public void testBatch(){
    verifyBranchingJoiningPlan(ExecutionMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED);
  }
  @Test public void testBatchForced(){
    verifyBranchingJoiningPlan(ExecutionMode.BATCH_FORCED,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.PIPELINED,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH,DataExchangeMode.BATCH);
  }
  private void verifyBranchingJoiningPlan(  ExecutionMode execMode,  DataExchangeMode toMap,  DataExchangeMode toReduceCombiner,  DataExchangeMode toReduce,  DataExchangeMode toFilter,  DataExchangeMode toReduceSink,  DataExchangeMode toJoin1,  DataExchangeMode toJoin2,  DataExchangeMode toOtherReduceCombiner,  DataExchangeMode toOtherReduce,  DataExchangeMode toFlatMap,  DataExchangeMode toFlatMapSink,  DataExchangeMode toCoGroup1,  DataExchangeMode toCoGroup2,  DataExchangeMode toCoGroupSink){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.getConfig().setExecutionMode(execMode);
      DataSet<Tuple2<Long,Long>> data=env.fromElements(33L,44L).map(new MapFunction<Long,Tuple2<Long,Long>>(){
        @Override public Tuple2<Long,Long> map(        Long value){
          return new Tuple2<Long,Long>(value,value);
        }
      }
);
      DataSet<Tuple2<Long,Long>> reduced=data.groupBy(0).reduce(new SelectOneReducer<Tuple2<Long,Long>>());
      reduced.output(new DiscardingOutputFormat<Tuple2<Long,Long>>()).name("reduceSink");
      DataSet<Tuple2<Long,Long>> filtered=data.filter(new FilterFunction<Tuple2<Long,Long>>(){
        @Override public boolean filter(        Tuple2<Long,Long> value) throws Exception {
          return false;
        }
      }
);
      DataSet<Tuple2<Long,Long>> joined=reduced.join(filtered).where(1).equalTo(1).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
      joined.flatMap(new IdentityFlatMapper<Tuple2<Long,Long>>()).output(new DiscardingOutputFormat<Tuple2<Long,Long>>()).name("flatMapSink");
      joined.coGroup(filtered.groupBy(1).reduceGroup(new Top1GroupReducer<Tuple2<Long,Long>>())).where(0).equalTo(0).with(new DummyCoGroupFunction<Tuple2<Long,Long>,Tuple2<Long,Long>>()).output(new DiscardingOutputFormat<Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>>>()).name("cgSink");
      OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());
      SinkPlanNode reduceSink=findSink(optPlan.getDataSinks(),"reduceSink");
      SinkPlanNode flatMapSink=findSink(optPlan.getDataSinks(),"flatMapSink");
      SinkPlanNode cgSink=findSink(optPlan.getDataSinks(),"cgSink");
      DualInputPlanNode coGroupNode=(DualInputPlanNode)cgSink.getPredecessor();
      DualInputPlanNode joinNode=(DualInputPlanNode)coGroupNode.getInput1().getSource();
      SingleInputPlanNode otherReduceNode=(SingleInputPlanNode)coGroupNode.getInput2().getSource();
      SingleInputPlanNode otherReduceCombinerNode=(SingleInputPlanNode)otherReduceNode.getPredecessor();
      SingleInputPlanNode reduceNode=(SingleInputPlanNode)joinNode.getInput1().getSource();
      SingleInputPlanNode reduceCombinerNode=(SingleInputPlanNode)reduceNode.getPredecessor();
      assertEquals(reduceNode,reduceSink.getPredecessor());
      SingleInputPlanNode filterNode=(SingleInputPlanNode)joinNode.getInput2().getSource();
      assertEquals(filterNode,otherReduceCombinerNode.getPredecessor());
      SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();
      assertEquals(mapNode,reduceCombinerNode.getPredecessor());
      SingleInputPlanNode flatMapNode=(SingleInputPlanNode)flatMapSink.getPredecessor();
      assertEquals(joinNode,flatMapNode.getPredecessor());
      assertEquals(toReduceSink,reduceSink.getInput().getDataExchangeMode());
      assertEquals(toFlatMapSink,flatMapSink.getInput().getDataExchangeMode());
      assertEquals(toCoGroupSink,cgSink.getInput().getDataExchangeMode());
      assertEquals(toCoGroup1,coGroupNode.getInput1().getDataExchangeMode());
      assertEquals(toCoGroup2,coGroupNode.getInput2().getDataExchangeMode());
      assertEquals(toJoin1,joinNode.getInput1().getDataExchangeMode());
      assertEquals(toJoin2,joinNode.getInput2().getDataExchangeMode());
      assertEquals(toOtherReduce,otherReduceNode.getInput().getDataExchangeMode());
      assertEquals(toOtherReduceCombiner,otherReduceCombinerNode.getInput().getDataExchangeMode());
      assertEquals(toFlatMap,flatMapNode.getInput().getDataExchangeMode());
      assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());
      assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());
      assertEquals(toReduceCombiner,reduceCombinerNode.getInput().getDataExchangeMode());
      assertEquals(toMap,mapNode.getInput().getDataExchangeMode());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  private SinkPlanNode findSink(  Collection<SinkPlanNode> collection,  String name){
    for (    SinkPlanNode node : collection) {
      String nodeName=node.getOptimizerNode().getOperator().getName();
      if (nodeName != null && nodeName.equals(name)) {
        return node;
      }
    }
    throw new IllegalArgumentException("No node with that name was found.");
  }
}
