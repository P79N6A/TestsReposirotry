@SuppressWarnings("unchecked") public class KryoGenericTypeSerializerTest extends AbstractGenericTypeSerializerTest {
  ExecutionConfig ec=new ExecutionConfig();
  @Test public void testJavaList(){
    Collection<Integer> a=new ArrayList<>();
    fillCollection(a);
    runTests(a);
  }
  @Test public void testJavaSet(){
    Collection<Integer> b=new HashSet<>();
    fillCollection(b);
    runTests(b);
  }
  @Test public void testJavaDequeue(){
    Collection<Integer> c=new LinkedList<>();
    fillCollection(c);
    runTests(c);
  }
  private void fillCollection(  Collection<Integer> coll){
    coll.add(42);
    coll.add(1337);
    coll.add(49);
    coll.add(1);
  }
  @Override protected <T>TypeSerializer<T> createSerializer(  Class<T> type){
    return new KryoSerializer<T>(type,ec);
  }
  /** 
 * Make sure that the kryo serializer forwards EOF exceptions properly when serializing
 */
  @Test public void testForwardEOFExceptionWhileSerializing(){
    try {
      String str;
{
        char[] charData=new char[40000];
        Random rnd=new Random();
        for (int i=0; i < charData.length; i++) {
          charData[i]=(char)rnd.nextInt(10000);
        }
        str=new String(charData);
      }
      TestDataOutputSerializer target=new TestDataOutputSerializer(10000,30000);
      KryoSerializer<String> serializer=new KryoSerializer<String>(String.class,new ExecutionConfig());
      try {
        serializer.serialize(str,target);
        fail("should throw a java.io.EOFException");
      }
 catch (      java.io.EOFException e) {
      }
catch (      Exception e) {
        fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  /** 
 * Make sure that the kryo serializer forwards EOF exceptions properly when serializing
 */
  @Test public void testForwardEOFExceptionWhileDeserializing(){
    try {
      int numElements=100;
      TestDataOutputSerializer target=new TestDataOutputSerializer(5 * numElements,5 * numElements);
      KryoSerializer<Integer> serializer=new KryoSerializer<>(Integer.class,new ExecutionConfig());
      for (int i=0; i < numElements; i++) {
        serializer.serialize(i,target);
      }
      ComparatorTestBase.TestInputView source=new ComparatorTestBase.TestInputView(target.copyByteBuffer());
      for (int i=0; i < numElements; i++) {
        int value=serializer.deserialize(source);
        assertEquals(i,value);
      }
      try {
        serializer.deserialize(source);
        fail("should throw a java.io.EOFException");
      }
 catch (      java.io.EOFException e) {
      }
catch (      Exception e) {
        fail("throws wrong exception: should throw a java.io.EOFException, has thrown a " + e.getClass().getName());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void validateReferenceMappingEnabled(){
    KryoSerializer<String> serializer=new KryoSerializer<>(String.class,new ExecutionConfig());
    Kryo kryo=serializer.getKryo();
    assertTrue(kryo.getReferences());
  }
}
