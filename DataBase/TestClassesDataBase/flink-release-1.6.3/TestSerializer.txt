private static class TestSerializer extends TypeSerializer<ElementType> {
  private static final long serialVersionUID=1L;
  private final boolean failOnRead;
  private final boolean failOnWrite;
  public TestSerializer(  boolean failOnRead,  boolean failOnWrite){
    this.failOnRead=failOnRead;
    this.failOnWrite=failOnWrite;
  }
  @Override public boolean isImmutableType(){
    return true;
  }
  @Override public TestSerializer duplicate(){
    return this;
  }
  @Override public ElementType createInstance(){
    return new ElementType();
  }
  @Override public ElementType copy(  ElementType from){
    return from;
  }
  @Override public ElementType copy(  ElementType from,  ElementType reuse){
    return from;
  }
  @Override public int getLength(){
    return 4;
  }
  @Override public void serialize(  ElementType record,  DataOutputView target) throws IOException {
    if (failOnWrite) {
      throw new TestException();
    }
    target.writeInt(record.getId());
  }
  @Override public ElementType deserialize(  DataInputView source) throws IOException {
    if (failOnRead) {
      throw new TestException();
    }
    return new ElementType(source.readInt());
  }
  @Override public ElementType deserialize(  ElementType reuse,  DataInputView source) throws IOException {
    if (failOnRead) {
      throw new TestException();
    }
    return new ElementType(source.readInt());
  }
  @Override public void copy(  DataInputView source,  DataOutputView target) throws IOException {
    target.writeInt(source.readInt());
  }
  @Override public boolean equals(  Object obj){
    if (obj instanceof TestSerializer) {
      TestSerializer other=(TestSerializer)obj;
      return other.canEqual(this) && failOnRead == other.failOnRead && failOnWrite == other.failOnWrite;
    }
 else {
      return false;
    }
  }
  @Override public boolean canEqual(  Object obj){
    return obj instanceof TestSerializer;
  }
  @Override public int hashCode(){
    return Objects.hash(failOnRead,failOnWrite);
  }
  @Override public TypeSerializerConfigSnapshot snapshotConfiguration(){
    throw new UnsupportedOperationException();
  }
  @Override public CompatibilityResult<ElementType> ensureCompatibility(  TypeSerializerConfigSnapshot configSnapshot){
    throw new UnsupportedOperationException();
  }
}
