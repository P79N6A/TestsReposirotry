public static class ZooKeeperCheckpointIDCounterITCase extends CheckpointIDCounterTest {
  private final static ZooKeeperTestEnvironment ZooKeeper=new ZooKeeperTestEnvironment(1);
  @AfterClass public static void tearDown() throws Exception {
    ZooKeeper.shutdown();
  }
  @Before public void cleanUp() throws Exception {
    ZooKeeper.deleteAll();
  }
  /** 
 * Tests that counter node is removed from ZooKeeper after shutdown.
 */
  @Test public void testShutdownRemovesState() throws Exception {
    CheckpointIDCounter counter=createCompletedCheckpoints();
    counter.start();
    CuratorFramework client=ZooKeeper.getClient();
    assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"));
    counter.shutdown(JobStatus.FINISHED);
    assertNull(client.checkExists().forPath("/checkpoint-id-counter"));
  }
  /** 
 * Tests that counter node is NOT removed from ZooKeeper after suspend.
 */
  @Test public void testSuspendKeepsState() throws Exception {
    CheckpointIDCounter counter=createCompletedCheckpoints();
    counter.start();
    CuratorFramework client=ZooKeeper.getClient();
    assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"));
    counter.shutdown(JobStatus.SUSPENDED);
    assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"));
  }
  @Override protected CheckpointIDCounter createCompletedCheckpoints() throws Exception {
    return new ZooKeeperCheckpointIDCounter(ZooKeeper.getClient(),"/checkpoint-id-counter");
  }
}
