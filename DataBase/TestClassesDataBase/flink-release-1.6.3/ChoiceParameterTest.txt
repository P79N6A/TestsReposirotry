/** 
 * Tests for  {@link ChoiceParameter}.
 */
public class ChoiceParameterTest extends ParameterTestBase {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  private ChoiceParameter parameter;
  @Before public void setup(){
    super.setup();
    parameter=new ChoiceParameter(owner,"choice");
  }
  @Test public void testWithDefaultWithParameter(){
    parameter.setDefaultValue("default").addChoices("c0","c1","c2");
    Assert.assertEquals("[--choice <default | c0 | c1 | c2>]",parameter.getUsage());
    parameter.configure(ParameterTool.fromArgs(new String[]{"--choice","c1"}));
    Assert.assertEquals("c1",parameter.getValue());
  }
  @Test public void testWithDefaultWithoutParameter(){
    parameter.setDefaultValue("default").addChoices("c0","c1","c2");
    Assert.assertEquals("[--choice <default | c0 | c1 | c2>]",parameter.getUsage());
    parameter.configure(ParameterTool.fromArgs(new String[]{}));
    Assert.assertEquals("default",parameter.getValue());
  }
  @Test public void testWithoutDefaultWithParameter(){
    parameter.addChoices("c0","c1","c2");
    Assert.assertEquals("--choice <c0 | c1 | c2>",parameter.getUsage());
    parameter.configure(ParameterTool.fromArgs(new String[]{"--choice","c2"}));
    Assert.assertEquals("c2",parameter.getValue());
  }
  @Test public void testWithoutDefaultWithoutParameter(){
    parameter.addChoices("c0","c1","c2");
    Assert.assertEquals("--choice <c0 | c1 | c2>",parameter.getUsage());
    expectedException.expect(ProgramParametrizationException.class);
    expectedException.expectMessage("Must select a choice for option 'choice': '[c0, c1, c2]'");
    parameter.configure(ParameterTool.fromArgs(new String[]{}));
  }
}
