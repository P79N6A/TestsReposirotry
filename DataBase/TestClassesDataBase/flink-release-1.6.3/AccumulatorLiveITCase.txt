/** 
 * Tests the availability of accumulator results during runtime.
 */
public class AccumulatorLiveITCase extends TestLogger {
  private static final Logger LOG=LoggerFactory.getLogger(AccumulatorLiveITCase.class);
  private static final String ACCUMULATOR_NAME="test";
  private static final long HEARTBEAT_INTERVAL=50L;
  private static final int NUM_ITERATIONS=5;
  private static final List<Integer> inputData=new ArrayList<>(NUM_ITERATIONS);
static {
    for (int i=0; i < NUM_ITERATIONS; i++) {
      inputData.add(i);
    }
  }
  @ClassRule public static final MiniClusterResource MINI_CLUSTER_RESOURCE=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(getConfiguration()).setNumberTaskManagers(1).setNumberSlotsPerTaskManager(1).build());
  private static Configuration getConfiguration(){
    Configuration config=new Configuration();
    config.setString(AkkaOptions.ASK_TIMEOUT,TestingUtils.DEFAULT_AKKA_ASK_TIMEOUT());
    config.setLong(HeartbeatManagerOptions.HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL);
    return config;
  }
  @Before public void resetLatches() throws InterruptedException {
    NotifyingMapper.reset();
  }
  @Test public void testBatch() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(1);
    DataSet<Integer> input=env.fromCollection(inputData);
    input.flatMap(new NotifyingMapper()).output(new DummyOutputFormat());
    JobGraph jobGraph=getJobGraph(env.createProgramPlan());
    submitJobAndVerifyResults(jobGraph);
  }
  @Test public void testStreaming() throws Exception {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(1);
    DataStream<Integer> input=env.fromCollection(inputData);
    input.flatMap(new NotifyingMapper()).writeUsingOutputFormat(new DummyOutputFormat()).disableChaining();
    JobGraph jobGraph=env.getStreamGraph().getJobGraph();
    submitJobAndVerifyResults(jobGraph);
  }
  private static void submitJobAndVerifyResults(  JobGraph jobGraph) throws Exception {
    Deadline deadline=Deadline.now().plus(Duration.ofSeconds(30));
    final ClusterClient<?> client=MINI_CLUSTER_RESOURCE.getClusterClient();
    final CheckedThread submissionThread=new CheckedThread(){
      @Override public void go() throws Exception {
        client.submitJob(jobGraph,AccumulatorLiveITCase.class.getClassLoader());
      }
    }
;
    submissionThread.start();
    try {
      NotifyingMapper.notifyLatch.await();
      FutureUtils.retrySuccesfulWithDelay(() -> {
        try {
          return CompletableFuture.completedFuture(client.getAccumulators(jobGraph.getJobID()));
        }
 catch (        Exception e) {
          return FutureUtils.completedExceptionally(e);
        }
      }
,Time.milliseconds(20),deadline,accumulators -> accumulators.size() == 1 && accumulators.containsKey(ACCUMULATOR_NAME) && (int)accumulators.get(ACCUMULATOR_NAME).getUnchecked() == NUM_ITERATIONS,TestingUtils.defaultScheduledExecutor()).get(deadline.timeLeft().toMillis(),TimeUnit.MILLISECONDS);
      NotifyingMapper.shutdownLatch.trigger();
    }
  finally {
      NotifyingMapper.shutdownLatch.trigger();
      submissionThread.sync();
    }
  }
  /** 
 * UDF that notifies when it changes the accumulator values.
 */
private static class NotifyingMapper extends RichFlatMapFunction<Integer,Integer> {
    private static final long serialVersionUID=1L;
    private static final OneShotLatch notifyLatch=new OneShotLatch();
    private static final OneShotLatch shutdownLatch=new OneShotLatch();
    private final IntCounter counter=new IntCounter();
    @Override public void open(    Configuration parameters) throws Exception {
      getRuntimeContext().addAccumulator(ACCUMULATOR_NAME,counter);
    }
    @Override public void flatMap(    Integer value,    Collector<Integer> out) throws Exception {
      counter.add(1);
      out.collect(value);
      LOG.debug("Emitting value {}.",value);
      if (counter.getLocalValuePrimitive() == 5) {
        notifyLatch.trigger();
      }
    }
    @Override public void close() throws Exception {
      shutdownLatch.await();
    }
    private static void reset() throws InterruptedException {
      notifyLatch.reset();
      shutdownLatch.reset();
    }
  }
  /** 
 * Outputs format which waits for the previous mapper.
 */
private static class DummyOutputFormat implements OutputFormat<Integer> {
    private static final long serialVersionUID=1L;
    @Override public void configure(    Configuration parameters){
    }
    @Override public void open(    int taskNumber,    int numTasks) throws IOException {
    }
    @Override public void writeRecord(    Integer record) throws IOException {
    }
    @Override public void close() throws IOException {
    }
  }
  /** 
 * Helpers to generate the JobGraph.
 */
  private static JobGraph getJobGraph(  Plan plan){
    Optimizer pc=new Optimizer(new DataStatistics(),new Configuration());
    JobGraphGenerator jgg=new JobGraphGenerator();
    OptimizedPlan op=pc.compile(plan);
    return jgg.compileJobGraph(op);
  }
}
