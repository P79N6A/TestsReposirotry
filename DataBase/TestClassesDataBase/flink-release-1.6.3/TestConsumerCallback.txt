public interface TestConsumerCallback {
  void onBuffer(  Buffer buffer);
  void onEvent(  AbstractEvent event);
public static class CountingCallback implements TestConsumerCallback {
    private final AtomicInteger numberOfReadBuffers=new AtomicInteger();
    private final AtomicInteger numberOfReadEvents=new AtomicInteger();
    @Override public void onBuffer(    Buffer buffer){
      numberOfReadBuffers.incrementAndGet();
    }
    @Override public void onEvent(    AbstractEvent event){
      numberOfReadEvents.incrementAndGet();
    }
    /** 
 * Returns the number of read buffers.
 */
    public int getNumberOfReadBuffers(){
      return numberOfReadBuffers.get();
    }
    /** 
 * Returns the number of read events;
 */
    public int getNumberOfReadEvents(){
      return numberOfReadEvents.get();
    }
  }
public static class RecyclingCallback extends CountingCallback {
    @Override public void onBuffer(    Buffer buffer){
      super.onBuffer(buffer);
      buffer.recycleBuffer();
    }
    @Override public void onEvent(    AbstractEvent event){
      super.onEvent(event);
    }
  }
public class VerifyAscendingCallback extends RecyclingCallback {
    @Override public void onBuffer(    Buffer buffer){
      final MemorySegment segment=buffer.getMemorySegment();
      int expected=getNumberOfReadBuffers() * (segment.size() / 4);
      for (int i=0; i < segment.size(); i+=4) {
        assertEquals(expected,segment.getInt(i));
        expected++;
      }
      super.onBuffer(buffer);
    }
    @Override public void onEvent(    AbstractEvent event){
      super.onEvent(event);
    }
  }
}
