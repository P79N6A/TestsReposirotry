/** 
 * Tests  {@link ExecutionGraph} deployment when offloading job and task information into the BLOBserver.
 */
public class ExecutionGraphDeploymentWithBlobServerTest extends ExecutionGraphDeploymentTest {
  private Set<byte[]> seenHashes=Collections.newSetFromMap(new ConcurrentHashMap<byte[],Boolean>());
  protected BlobServer blobServer=null;
  @Before public void setupBlobServer() throws IOException {
    Configuration config=new Configuration();
    config.setInteger(BlobServerOptions.OFFLOAD_MINSIZE,0);
    blobServer=Mockito.spy(new BlobServer(config,new VoidBlobStore()));
    blobWriter=blobServer;
    blobCache=blobServer;
    seenHashes.clear();
    doAnswer(invocation -> {
      PermanentBlobKey key=(PermanentBlobKey)invocation.callRealMethod();
      assertTrue(seenHashes.add(key.getHash()));
      return key;
    }
).when(blobServer).putPermanent(any(JobID.class),Matchers.<byte[]>any());
    blobServer.start();
  }
  @After public void shutdownBlobServer() throws IOException {
    if (blobServer != null) {
      blobServer.close();
    }
  }
  @Override protected void checkJobOffloaded(  ExecutionGraph eg) throws Exception {
    Either<SerializedValue<JobInformation>,PermanentBlobKey> jobInformationOrBlobKey=eg.getJobInformationOrBlobKey();
    assertTrue(jobInformationOrBlobKey.isRight());
    blobServer.getFile(eg.getJobID(),jobInformationOrBlobKey.right());
  }
  @Override protected void checkTaskOffloaded(  ExecutionGraph eg,  JobVertexID jobVertexId) throws Exception {
    Either<SerializedValue<TaskInformation>,PermanentBlobKey> taskInformationOrBlobKey=eg.getJobVertex(jobVertexId).getTaskInformationOrBlobKey();
    assertTrue(taskInformationOrBlobKey.isRight());
    blobServer.getFile(eg.getJobID(),taskInformationOrBlobKey.right());
  }
}
