/** 
 * Tests for the CANCEL command.
 */
public class CliFrontendCancelTest extends CliFrontendTestBase {
  @BeforeClass public static void init(){
    CliFrontendTestUtils.pipeSystemOutToNull();
  }
  @AfterClass public static void shutdown(){
    CliFrontendTestUtils.restoreSystemOut();
  }
  @Test public void testCancel() throws Exception {
    JobID jid=new JobID();
    String[] parameters={jid.toString()};
    final ClusterClient<String> clusterClient=createClusterClient();
    MockedCliFrontend testFrontend=new MockedCliFrontend(clusterClient);
    testFrontend.cancel(parameters);
    Mockito.verify(clusterClient,times(1)).cancel(any(JobID.class));
  }
  @Test(expected=CliArgsException.class) public void testMissingJobId() throws Exception {
    String[] parameters={};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  @Test(expected=CliArgsException.class) public void testUnrecognizedOption() throws Exception {
    String[] parameters={"-v","-l"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  /** 
 * Tests cancelling with the savepoint option.
 */
  @Test public void testCancelWithSavepoint() throws Exception {
{
      JobID jid=new JobID();
      String[] parameters={"-s",jid.toString()};
      final ClusterClient<String> clusterClient=createClusterClient();
      MockedCliFrontend testFrontend=new MockedCliFrontend(clusterClient);
      testFrontend.cancel(parameters);
      Mockito.verify(clusterClient,times(1)).cancelWithSavepoint(any(JobID.class),isNull(String.class));
    }
{
      JobID jid=new JobID();
      String[] parameters={"-s","targetDirectory",jid.toString()};
      final ClusterClient<String> clusterClient=createClusterClient();
      MockedCliFrontend testFrontend=new MockedCliFrontend(clusterClient);
      testFrontend.cancel(parameters);
      Mockito.verify(clusterClient,times(1)).cancelWithSavepoint(any(JobID.class),notNull(String.class));
    }
  }
  @Test(expected=CliArgsException.class) public void testCancelWithSavepointWithoutJobId() throws Exception {
    String[] parameters={"-s","targetDirectory"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  @Test(expected=CliArgsException.class) public void testCancelWithSavepointWithoutParameters() throws Exception {
    String[] parameters={"-s"};
    Configuration configuration=getConfiguration();
    CliFrontend testFrontend=new CliFrontend(configuration,Collections.singletonList(getCli(configuration)));
    testFrontend.cancel(parameters);
  }
  private static ClusterClient<String> createClusterClient() throws Exception {
    final ClusterClient<String> clusterClient=mock(ClusterClient.class);
    return clusterClient;
  }
}
