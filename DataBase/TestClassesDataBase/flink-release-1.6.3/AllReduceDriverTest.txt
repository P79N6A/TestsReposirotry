@SuppressWarnings("serial") public class AllReduceDriverTest {
  @Test public void testAllReduceDriverImmutableEmpty(){
    try {
      TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>> context=new TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>>();
      List<Tuple2<String,Integer>> data=DriverTestData.createReduceImmutableData();
      TypeInformation<Tuple2<String,Integer>> typeInfo=TypeExtractor.getForObject(data.get(0));
      MutableObjectIterator<Tuple2<String,Integer>> input=EmptyMutableObjectIterator.get();
      context.setDriverStrategy(DriverStrategy.ALL_REDUCE);
      context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
      context.setCollector(new DiscardingOutputCollector<Tuple2<String,Integer>>());
      AllReduceDriver<Tuple2<String,Integer>> driver=new AllReduceDriver<Tuple2<String,Integer>>();
      driver.setup(context);
      driver.prepare();
      driver.run();
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
  }
  @Test public void testAllReduceDriverImmutable(){
    try {
{
        TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>> context=new TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>>();
        List<Tuple2<String,Integer>> data=DriverTestData.createReduceImmutableData();
        TypeInformation<Tuple2<String,Integer>> typeInfo=TypeExtractor.getForObject(data.get(0));
        MutableObjectIterator<Tuple2<String,Integer>> input=new RegularToMutableObjectIterator<Tuple2<String,Integer>>(data.iterator(),typeInfo.createSerializer(new ExecutionConfig()));
        GatheringCollector<Tuple2<String,Integer>> result=new GatheringCollector<Tuple2<String,Integer>>(typeInfo.createSerializer(new ExecutionConfig()));
        context.setDriverStrategy(DriverStrategy.ALL_REDUCE);
        context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
        context.setCollector(result);
        context.setUdf(new ConcatSumFirstReducer());
        AllReduceDriver<Tuple2<String,Integer>> driver=new AllReduceDriver<Tuple2<String,Integer>>();
        driver.setup(context);
        driver.prepare();
        driver.run();
        Tuple2<String,Integer> res=result.getList().get(0);
        char[] foundString=res.f0.toCharArray();
        Arrays.sort(foundString);
        char[] expectedString="abcddeeeffff".toCharArray();
        Arrays.sort(expectedString);
        Assert.assertArrayEquals(expectedString,foundString);
        Assert.assertEquals(78,res.f1.intValue());
      }
{
        TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>> context=new TestTaskContext<ReduceFunction<Tuple2<String,Integer>>,Tuple2<String,Integer>>();
        List<Tuple2<String,Integer>> data=DriverTestData.createReduceImmutableData();
        TypeInformation<Tuple2<String,Integer>> typeInfo=TypeExtractor.getForObject(data.get(0));
        MutableObjectIterator<Tuple2<String,Integer>> input=new RegularToMutableObjectIterator<Tuple2<String,Integer>>(data.iterator(),typeInfo.createSerializer(new ExecutionConfig()));
        GatheringCollector<Tuple2<String,Integer>> result=new GatheringCollector<Tuple2<String,Integer>>(typeInfo.createSerializer(new ExecutionConfig()));
        context.setDriverStrategy(DriverStrategy.ALL_REDUCE);
        context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
        context.setCollector(result);
        context.setUdf(new ConcatSumSecondReducer());
        AllReduceDriver<Tuple2<String,Integer>> driver=new AllReduceDriver<Tuple2<String,Integer>>();
        driver.setup(context);
        driver.prepare();
        driver.run();
        Tuple2<String,Integer> res=result.getList().get(0);
        char[] foundString=res.f0.toCharArray();
        Arrays.sort(foundString);
        char[] expectedString="abcddeeeffff".toCharArray();
        Arrays.sort(expectedString);
        Assert.assertArrayEquals(expectedString,foundString);
        Assert.assertEquals(78,res.f1.intValue());
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
  }
  @Test public void testAllReduceDriverMutable(){
    try {
{
        TestTaskContext<ReduceFunction<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>> context=new TestTaskContext<ReduceFunction<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>>();
        List<Tuple2<StringValue,IntValue>> data=DriverTestData.createReduceMutableData();
        TypeInformation<Tuple2<StringValue,IntValue>> typeInfo=TypeExtractor.getForObject(data.get(0));
        MutableObjectIterator<Tuple2<StringValue,IntValue>> input=new RegularToMutableObjectIterator<Tuple2<StringValue,IntValue>>(data.iterator(),typeInfo.createSerializer(new ExecutionConfig()));
        GatheringCollector<Tuple2<StringValue,IntValue>> result=new GatheringCollector<Tuple2<StringValue,IntValue>>(typeInfo.createSerializer(new ExecutionConfig()));
        context.setDriverStrategy(DriverStrategy.ALL_REDUCE);
        context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
        context.setCollector(result);
        context.setUdf(new ConcatSumFirstMutableReducer());
        AllReduceDriver<Tuple2<StringValue,IntValue>> driver=new AllReduceDriver<Tuple2<StringValue,IntValue>>();
        driver.setup(context);
        driver.prepare();
        driver.run();
        Tuple2<StringValue,IntValue> res=result.getList().get(0);
        char[] foundString=res.f0.getValue().toCharArray();
        Arrays.sort(foundString);
        char[] expectedString="abcddeeeffff".toCharArray();
        Arrays.sort(expectedString);
        Assert.assertArrayEquals(expectedString,foundString);
        Assert.assertEquals(78,res.f1.getValue());
      }
{
        TestTaskContext<ReduceFunction<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>> context=new TestTaskContext<ReduceFunction<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>>();
        List<Tuple2<StringValue,IntValue>> data=DriverTestData.createReduceMutableData();
        TypeInformation<Tuple2<StringValue,IntValue>> typeInfo=TypeExtractor.getForObject(data.get(0));
        MutableObjectIterator<Tuple2<StringValue,IntValue>> input=new RegularToMutableObjectIterator<Tuple2<StringValue,IntValue>>(data.iterator(),typeInfo.createSerializer(new ExecutionConfig()));
        GatheringCollector<Tuple2<StringValue,IntValue>> result=new GatheringCollector<Tuple2<StringValue,IntValue>>(typeInfo.createSerializer(new ExecutionConfig()));
        context.setDriverStrategy(DriverStrategy.ALL_REDUCE);
        context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
        context.setCollector(result);
        context.setUdf(new ConcatSumSecondMutableReducer());
        AllReduceDriver<Tuple2<StringValue,IntValue>> driver=new AllReduceDriver<Tuple2<StringValue,IntValue>>();
        driver.setup(context);
        driver.prepare();
        driver.run();
        Tuple2<StringValue,IntValue> res=result.getList().get(0);
        char[] foundString=res.f0.getValue().toCharArray();
        Arrays.sort(foundString);
        char[] expectedString="abcddeeeffff".toCharArray();
        Arrays.sort(expectedString);
        Assert.assertArrayEquals(expectedString,foundString);
        Assert.assertEquals(78,res.f1.getValue());
      }
    }
 catch (    Exception e) {
      System.err.println(e.getMessage());
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
  }
public static final class ConcatSumFirstReducer extends RichReduceFunction<Tuple2<String,Integer>> {
    @Override public Tuple2<String,Integer> reduce(    Tuple2<String,Integer> value1,    Tuple2<String,Integer> value2){
      value1.f0=value1.f0 + value2.f0;
      value1.f1=value1.f1 + value2.f1;
      return value1;
    }
  }
public static final class ConcatSumSecondReducer extends RichReduceFunction<Tuple2<String,Integer>> {
    @Override public Tuple2<String,Integer> reduce(    Tuple2<String,Integer> value1,    Tuple2<String,Integer> value2){
      value2.f0=value1.f0 + value2.f0;
      value2.f1=value1.f1 + value2.f1;
      return value2;
    }
  }
public static final class ConcatSumFirstMutableReducer extends RichReduceFunction<Tuple2<StringValue,IntValue>> {
    @Override public Tuple2<StringValue,IntValue> reduce(    Tuple2<StringValue,IntValue> value1,    Tuple2<StringValue,IntValue> value2){
      value1.f0.setValue(value1.f0.getValue() + value2.f0.getValue());
      value1.f1.setValue(value1.f1.getValue() + value2.f1.getValue());
      return value1;
    }
  }
public static final class ConcatSumSecondMutableReducer extends RichReduceFunction<Tuple2<StringValue,IntValue>> {
    @Override public Tuple2<StringValue,IntValue> reduce(    Tuple2<StringValue,IntValue> value1,    Tuple2<StringValue,IntValue> value2){
      value2.f0.setValue(value1.f0.getValue() + value2.f0.getValue());
      value2.f1.setValue(value1.f1.getValue() + value2.f1.getValue());
      return value2;
    }
  }
}
