public class FailedCheckpointStatsTest {
  /** 
 * Tests that the end to end duration of a failed checkpoint is the duration until the failure.
 */
  @Test public void testEndToEndDuration() throws Exception {
    long duration=123912931293L;
    long triggerTimestamp=10123;
    long failureTimestamp=triggerTimestamp + duration;
    Map<JobVertexID,TaskStateStats> taskStats=new HashMap<>();
    JobVertexID jobVertexId=new JobVertexID();
    taskStats.put(jobVertexId,new TaskStateStats(jobVertexId,1));
    FailedCheckpointStats failed=new FailedCheckpointStats(0,triggerTimestamp,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),1,taskStats,0,0,0,failureTimestamp,null,null);
    assertEquals(duration,failed.getEndToEndDuration());
  }
  @Test public void testIsJavaSerializable() throws Exception {
    long duration=123912931293L;
    long triggerTimestamp=10123;
    long failureTimestamp=triggerTimestamp + duration;
    Map<JobVertexID,TaskStateStats> taskStats=new HashMap<>();
    JobVertexID jobVertexId=new JobVertexID();
    taskStats.put(jobVertexId,new TaskStateStats(jobVertexId,1));
    FailedCheckpointStats failed=new FailedCheckpointStats(123123123L,triggerTimestamp,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),1337,taskStats,3,190890123,0,failureTimestamp,null,new NotSerializableException("message"));
    FailedCheckpointStats copy=CommonTestUtils.createCopySerializable(failed);
    assertEquals(failed.getCheckpointId(),copy.getCheckpointId());
    assertEquals(failed.getTriggerTimestamp(),copy.getTriggerTimestamp());
    assertEquals(failed.getProperties(),copy.getProperties());
    assertEquals(failed.getNumberOfSubtasks(),copy.getNumberOfSubtasks());
    assertEquals(failed.getNumberOfAcknowledgedSubtasks(),copy.getNumberOfAcknowledgedSubtasks());
    assertEquals(failed.getEndToEndDuration(),copy.getEndToEndDuration());
    assertEquals(failed.getStateSize(),copy.getStateSize());
    assertEquals(failed.getLatestAcknowledgedSubtaskStats(),copy.getLatestAcknowledgedSubtaskStats());
    assertEquals(failed.getStatus(),copy.getStatus());
    assertEquals(failed.getFailureMessage(),copy.getFailureMessage());
  }
}
