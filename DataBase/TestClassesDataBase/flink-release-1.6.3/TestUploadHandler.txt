private static class TestUploadHandler extends AbstractRestHandler<RestfulGateway,EmptyRequestBody,EmptyResponseBody,EmptyMessageParameters> {
  private volatile byte[] lastUploadedFileContents;
  private TestUploadHandler(  final CompletableFuture<String> localRestAddress,  final GatewayRetriever<? extends RestfulGateway> leaderRetriever,  final Time timeout){
    super(localRestAddress,leaderRetriever,timeout,Collections.emptyMap(),TestUploadHeaders.INSTANCE);
  }
  @Override protected CompletableFuture<EmptyResponseBody> handleRequest(  @Nonnull final HandlerRequest<EmptyRequestBody,EmptyMessageParameters> request,  @Nonnull final RestfulGateway gateway) throws RestHandlerException {
    Collection<Path> uploadedFiles=request.getUploadedFiles().stream().map(File::toPath).collect(Collectors.toList());
    if (uploadedFiles.size() != 1) {
      throw new RestHandlerException("Expected 1 file, received " + uploadedFiles.size() + '.',HttpResponseStatus.BAD_REQUEST);
    }
    try {
      lastUploadedFileContents=Files.readAllBytes(uploadedFiles.iterator().next());
    }
 catch (    IOException e) {
      throw new RestHandlerException("Could not read contents of uploaded file.",HttpResponseStatus.INTERNAL_SERVER_ERROR,e);
    }
    return CompletableFuture.completedFuture(EmptyResponseBody.getInstance());
  }
  public byte[] getLastUploadedFileContents(){
    return lastUploadedFileContents;
  }
}
