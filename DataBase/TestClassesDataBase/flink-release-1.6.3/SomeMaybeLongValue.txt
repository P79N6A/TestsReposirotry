public static final class SomeMaybeLongValue implements org.apache.flink.types.Value {
  private static final long serialVersionUID=1L;
  private static final byte[] BUFFER=new byte[100 * 1024 * 1024];
static {
    for (int i=0; i < BUFFER.length; i++) {
      BUFFER[i]=(byte)i;
    }
  }
  private int val;
  private boolean isLong;
  public SomeMaybeLongValue(){
    this.isLong=true;
  }
  public SomeMaybeLongValue(  int val){
    this.val=val;
    this.isLong=true;
  }
  public SomeMaybeLongValue(  int val,  boolean isLong){
    this.val=val;
    this.isLong=isLong;
  }
  public int val(){
    return val;
  }
  public boolean isLong(){
    return isLong;
  }
  @Override public void read(  DataInputView in) throws IOException {
    val=in.readInt();
    isLong=in.readBoolean();
    if (isLong) {
      for (int i=0; i < BUFFER.length; i++) {
        byte b=in.readByte();
        assertEquals(BUFFER[i],b);
      }
    }
  }
  @Override public void write(  DataOutputView out) throws IOException {
    out.writeInt(val);
    out.writeBoolean(isLong);
    if (isLong) {
      out.write(BUFFER);
    }
  }
  @Override public int hashCode(){
    return val;
  }
  @Override public boolean equals(  Object obj){
    return (obj instanceof SomeMaybeLongValue) && ((SomeMaybeLongValue)obj).val == this.val;
  }
  @Override public String toString(){
    return isLong ? "Large Value" : "Small Value";
  }
}
