/** 
 * Tests for the RocksDBStateBackendFactory.
 */
public class RocksDBStateBackendFactoryTest {
  @Rule public final TemporaryFolder tmp=new TemporaryFolder();
  private final ClassLoader cl=getClass().getClassLoader();
  private final String backendKey=CheckpointingOptions.STATE_BACKEND.key();
  @Test public void testFactoryName(){
    String factoryName="org.apache.flink.contrib.streaming.state.Roc";
    factoryName+="ksDBStateBackendFactory";
    assertEquals(factoryName,RocksDBStateBackendFactory.class.getName());
  }
  /** 
 * Validates loading a file system state backend with additional parameters from the cluster configuration.
 */
  @Test public void testLoadFileSystemStateBackend() throws Exception {
    final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
    final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
    final String localDir1=tmp.newFolder().getAbsolutePath();
    final String localDir2=tmp.newFolder().getAbsolutePath();
    final String localDirs=localDir1 + File.pathSeparator + localDir2;
    final boolean incremental=!CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue();
    final Path expectedCheckpointsPath=new Path(checkpointDir);
    final Path expectedSavepointsPath=new Path(savepointDir);
    final Configuration config1=new Configuration();
    config1.setString(backendKey,"rocksdb");
    config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
    config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
    config1.setString(RocksDBOptions.LOCAL_DIRECTORIES,localDirs);
    config1.setBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS,incremental);
    final Configuration config2=new Configuration();
    config2.setString(backendKey,RocksDBStateBackendFactory.class.getName());
    config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
    config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
    config2.setString(RocksDBOptions.LOCAL_DIRECTORIES,localDirs);
    config2.setBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS,incremental);
    StateBackend backend1=StateBackendLoader.loadStateBackendFromConfig(config1,cl,null);
    StateBackend backend2=StateBackendLoader.loadStateBackendFromConfig(config2,cl,null);
    assertTrue(backend1 instanceof RocksDBStateBackend);
    assertTrue(backend2 instanceof RocksDBStateBackend);
    RocksDBStateBackend fs1=(RocksDBStateBackend)backend1;
    RocksDBStateBackend fs2=(RocksDBStateBackend)backend2;
    AbstractFileStateBackend fs1back=(AbstractFileStateBackend)fs1.getCheckpointBackend();
    AbstractFileStateBackend fs2back=(AbstractFileStateBackend)fs2.getCheckpointBackend();
    assertEquals(expectedCheckpointsPath,fs1back.getCheckpointPath());
    assertEquals(expectedCheckpointsPath,fs2back.getCheckpointPath());
    assertEquals(expectedSavepointsPath,fs1back.getSavepointPath());
    assertEquals(expectedSavepointsPath,fs2back.getSavepointPath());
    assertEquals(incremental,fs1.isIncrementalCheckpointsEnabled());
    assertEquals(incremental,fs2.isIncrementalCheckpointsEnabled());
    checkPaths(fs1.getDbStoragePaths(),localDir1,localDir2);
    checkPaths(fs2.getDbStoragePaths(),localDir1,localDir2);
  }
  /** 
 * Validates taking the application-defined file system state backend and adding with additional parameters from the cluster configuration, but giving precedence to application-defined parameters over configuration-defined parameters.
 */
  @Test public void testLoadFileSystemStateBackendMixed() throws Exception {
    final String appCheckpointDir=new Path(tmp.newFolder().toURI()).toString();
    final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
    final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
    final String localDir1=tmp.newFolder().getAbsolutePath();
    final String localDir2=tmp.newFolder().getAbsolutePath();
    final String localDir3=tmp.newFolder().getAbsolutePath();
    final String localDir4=tmp.newFolder().getAbsolutePath();
    final boolean incremental=!CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue();
    final Path expectedCheckpointsPath=new Path(appCheckpointDir);
    final Path expectedSavepointsPath=new Path(savepointDir);
    final RocksDBStateBackend backend=new RocksDBStateBackend(appCheckpointDir,incremental);
    backend.setDbStoragePaths(localDir1,localDir2);
    final Configuration config=new Configuration();
    config.setString(backendKey,"jobmanager");
    config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
    config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
    config.setBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS,!incremental);
    config.setString(RocksDBOptions.LOCAL_DIRECTORIES,localDir3 + ":" + localDir4);
    final StateBackend loadedBackend=StateBackendLoader.fromApplicationOrConfigOrDefault(backend,config,cl,null);
    assertTrue(loadedBackend instanceof RocksDBStateBackend);
    final RocksDBStateBackend loadedRocks=(RocksDBStateBackend)loadedBackend;
    assertEquals(incremental,loadedRocks.isIncrementalCheckpointsEnabled());
    checkPaths(loadedRocks.getDbStoragePaths(),localDir1,localDir2);
    AbstractFileStateBackend fsBackend=(AbstractFileStateBackend)loadedRocks.getCheckpointBackend();
    assertEquals(expectedCheckpointsPath,fsBackend.getCheckpointPath());
    assertEquals(expectedSavepointsPath,fsBackend.getSavepointPath());
  }
  private static void checkPaths(  String[] pathsArray,  String... paths){
    assertNotNull(pathsArray);
    assertNotNull(paths);
    assertEquals(pathsArray.length,paths.length);
    HashSet<String> pathsSet=new HashSet<>(Arrays.asList(pathsArray));
    for (    String path : paths) {
      assertTrue(pathsSet.contains(path));
    }
  }
}
