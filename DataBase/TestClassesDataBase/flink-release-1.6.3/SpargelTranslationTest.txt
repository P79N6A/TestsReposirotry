/** 
 * Test the creation of a  {@link ScatterGatherIteration} program.
 */
@SuppressWarnings("serial") public class SpargelTranslationTest {
  private static final String ITERATION_NAME="Test Name";
  private static final String AGGREGATOR_NAME="AggregatorName";
  private static final String BC_SET_MESSAGES_NAME="borat messages";
  private static final String BC_SET_UPDATES_NAME="borat updates";
  private static final int NUM_ITERATIONS=13;
  private static final int ITERATION_parallelism=77;
  @Test public void testTranslationPlainEdges(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Long> bcMessaging=env.fromElements(1L);
    DataSet<Long> bcUpdate=env.fromElements(1L);
    DataSet<Vertex<String,Double>> result;
    DataSet<Tuple2<String,Double>> initialVertices=env.fromElements(new Tuple2<>("abc",3.44));
    DataSet<Tuple2<String,String>> edges=env.fromElements(new Tuple2<>("a","c"));
    Graph<String,Double,NullValue> graph=Graph.fromTupleDataSet(initialVertices,edges.map(new MapFunction<Tuple2<String,String>,Tuple3<String,String,NullValue>>(){
      public Tuple3<String,String,NullValue> map(      Tuple2<String,String> edge){
        return new Tuple3<>(edge.f0,edge.f1,NullValue.getInstance());
      }
    }
),env);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.addBroadcastSetForScatterFunction(BC_SET_MESSAGES_NAME,bcMessaging);
    parameters.addBroadcastSetForGatherFunction(BC_SET_UPDATES_NAME,bcUpdate);
    parameters.setName(ITERATION_NAME);
    parameters.setParallelism(ITERATION_parallelism);
    parameters.registerAggregator(AGGREGATOR_NAME,new LongSumAggregator());
    result=graph.runScatterGatherIteration(new MessageFunctionNoEdgeValue(),new UpdateFunction(),NUM_ITERATIONS,parameters).getVertices();
    result.output(new DiscardingOutputFormat<>());
    assertTrue(result instanceof DeltaIterationResultSet);
    DeltaIterationResultSet<?,?> resultSet=(DeltaIterationResultSet<?,?>)result;
    DeltaIteration<?,?> iteration=resultSet.getIterationHead();
    assertEquals(NUM_ITERATIONS,resultSet.getMaxIterations());
    assertArrayEquals(new int[]{0},resultSet.getKeyPositions());
    assertEquals(ITERATION_parallelism,iteration.getParallelism());
    assertEquals(ITERATION_NAME,iteration.getName());
    assertEquals(AGGREGATOR_NAME,iteration.getAggregators().getAllRegisteredAggregators().iterator().next().getName());
    TwoInputUdfOperator<?,?,?,?> solutionSetJoin=(TwoInputUdfOperator<?,?,?,?>)resultSet.getNextWorkset();
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(0,0).contains(0));
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(1,0).contains(0));
    TwoInputUdfOperator<?,?,?,?> edgesJoin=(TwoInputUdfOperator<?,?,?,?>)solutionSetJoin.getInput1();
    assertEquals(bcUpdate,solutionSetJoin.getBroadcastSets().get(BC_SET_UPDATES_NAME));
    assertEquals(bcMessaging,edgesJoin.getBroadcastSets().get(BC_SET_MESSAGES_NAME));
  }
  @Test public void testTranslationPlainEdgesWithForkedBroadcastVariable(){
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Long> bcVar=env.fromElements(1L);
    DataSet<Vertex<String,Double>> result;
    DataSet<Tuple2<String,Double>> initialVertices=env.fromElements(new Tuple2<>("abc",3.44));
    DataSet<Tuple2<String,String>> edges=env.fromElements(new Tuple2<>("a","c"));
    Graph<String,Double,NullValue> graph=Graph.fromTupleDataSet(initialVertices,edges.map(new MapFunction<Tuple2<String,String>,Tuple3<String,String,NullValue>>(){
      public Tuple3<String,String,NullValue> map(      Tuple2<String,String> edge){
        return new Tuple3<>(edge.f0,edge.f1,NullValue.getInstance());
      }
    }
),env);
    ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
    parameters.addBroadcastSetForScatterFunction(BC_SET_MESSAGES_NAME,bcVar);
    parameters.addBroadcastSetForGatherFunction(BC_SET_UPDATES_NAME,bcVar);
    parameters.setName(ITERATION_NAME);
    parameters.setParallelism(ITERATION_parallelism);
    parameters.registerAggregator(AGGREGATOR_NAME,new LongSumAggregator());
    result=graph.runScatterGatherIteration(new MessageFunctionNoEdgeValue(),new UpdateFunction(),NUM_ITERATIONS,parameters).getVertices();
    result.output(new DiscardingOutputFormat<>());
    assertTrue(result instanceof DeltaIterationResultSet);
    DeltaIterationResultSet<?,?> resultSet=(DeltaIterationResultSet<?,?>)result;
    DeltaIteration<?,?> iteration=resultSet.getIterationHead();
    assertEquals(NUM_ITERATIONS,resultSet.getMaxIterations());
    assertArrayEquals(new int[]{0},resultSet.getKeyPositions());
    assertEquals(ITERATION_parallelism,iteration.getParallelism());
    assertEquals(ITERATION_NAME,iteration.getName());
    assertEquals(AGGREGATOR_NAME,iteration.getAggregators().getAllRegisteredAggregators().iterator().next().getName());
    TwoInputUdfOperator<?,?,?,?> solutionSetJoin=(TwoInputUdfOperator<?,?,?,?>)resultSet.getNextWorkset();
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(0,0).contains(0));
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(1,0).contains(0));
    TwoInputUdfOperator<?,?,?,?> edgesJoin=(TwoInputUdfOperator<?,?,?,?>)solutionSetJoin.getInput1();
    assertEquals(bcVar,solutionSetJoin.getBroadcastSets().get(BC_SET_UPDATES_NAME));
    assertEquals(bcVar,edgesJoin.getBroadcastSets().get(BC_SET_MESSAGES_NAME));
  }
private static class MessageFunctionNoEdgeValue extends ScatterFunction<String,Double,Long,NullValue> {
    @Override public void sendMessages(    Vertex<String,Double> vertex){
    }
  }
private static class UpdateFunction extends GatherFunction<String,Double,Long> {
    @Override public void updateVertex(    Vertex<String,Double> vertex,    MessageIterator<Long> inMessages){
    }
  }
}
