private static class FunctionWithBroadcastState extends KeyedBroadcastProcessFunction<String,String,Integer,String> {
  private static final long serialVersionUID=7496674620398203933L;
  private final String keyPostfix;
  private final Map<String,Integer> expectedBroadcastState;
  private final long timerTs;
  private final String expectedKey;
  FunctionWithBroadcastState(  final String keyPostfix,  final Map<String,Integer> expectedBroadcastState,  final long timerTs,  final String expectedKey){
    this.keyPostfix=Preconditions.checkNotNull(keyPostfix);
    this.expectedBroadcastState=Preconditions.checkNotNull(expectedBroadcastState);
    this.timerTs=timerTs;
    this.expectedKey=expectedKey;
  }
  @Override public void processBroadcastElement(  Integer value,  Context ctx,  Collector<String> out) throws Exception {
    final String key=value + "." + keyPostfix;
    ctx.getBroadcastState(STATE_DESCRIPTOR).put(key,value);
  }
  @Override public void processElement(  String value,  ReadOnlyContext ctx,  Collector<String> out) throws Exception {
    Iterable<Map.Entry<String,Integer>> broadcastStateIt=ctx.getBroadcastState(STATE_DESCRIPTOR).immutableEntries();
    Iterator<Map.Entry<String,Integer>> iter=broadcastStateIt.iterator();
    for (int i=0; i < expectedBroadcastState.size(); i++) {
      assertTrue(iter.hasNext());
      Map.Entry<String,Integer> entry=iter.next();
      assertTrue(expectedBroadcastState.containsKey(entry.getKey()));
      assertEquals(expectedBroadcastState.get(entry.getKey()),entry.getValue());
    }
    assertFalse(iter.hasNext());
    ctx.timerService().registerEventTimeTimer(timerTs);
  }
  @Override public void onTimer(  long timestamp,  OnTimerContext ctx,  Collector<String> out) throws Exception {
    final Iterator<Map.Entry<String,Integer>> iter=ctx.getBroadcastState(STATE_DESCRIPTOR).immutableEntries().iterator();
    final List<Map.Entry<String,Integer>> map=new ArrayList<>();
    while (iter.hasNext()) {
      map.add(iter.next());
    }
    assertEquals(expectedKey,ctx.getCurrentKey());
    final String mapToStr=mapToString(map);
    out.collect("TS:" + timestamp + " "+ mapToStr);
  }
}
