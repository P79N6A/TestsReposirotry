/** 
 * Tests for  {@link AverageClusteringCoefficient}.
 */
public class AverageClusteringCoefficientTest extends AsmTestBase {
  /** 
 * Validate a test result.
 * @param graph input graph
 * @param vertexCount result vertex count
 * @param averageClusteringCoefficient result average clustering coefficient
 * @param < T > graph ID type
 * @throws Exception on error
 */
  private static <T extends Comparable<T> & CopyableValue<T>>void validate(  Graph<T,NullValue,NullValue> graph,  long vertexCount,  double averageClusteringCoefficient) throws Exception {
    Result result=new AverageClusteringCoefficient<T,NullValue,NullValue>().run(graph).execute();
    assertEquals(vertexCount,result.getNumberOfVertices());
    assertEquals(averageClusteringCoefficient,result.getAverageClusteringCoefficient(),ACCURACY);
  }
  @Test public void testWithSimpleGraph() throws Exception {
    validate(directedSimpleGraph,6,(1.0 / 2 + 2.0 / 6 + 2.0 / 6 + 1.0 / 12) / 6);
  }
  @Test public void testWithCompleteGraph() throws Exception {
    validate(completeGraph,completeGraphVertexCount,1.0);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    validate(emptyGraphWithVertices,emptyGraphVertexCount,0);
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    validate(emptyGraphWithoutVertices,0,Double.NaN);
  }
  @Test public void testWithRMatGraph() throws Exception {
    validate(directedRMatGraph(10,16),902,0.329437);
  }
}
