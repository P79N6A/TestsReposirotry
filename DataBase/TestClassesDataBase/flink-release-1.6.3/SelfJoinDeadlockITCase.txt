/** 
 * Tests a self-join, which leads to a deadlock with large data sizes and PIPELINED-only execution.
 * @see <a href="https://issues.apache.org/jira/browse/FLINK-1141">FLINK-1141</a>
 */
public class SelfJoinDeadlockITCase extends JavaProgramTestBase {
  protected String resultPath;
  @Rule public Timeout globalTimeout=new Timeout(120 * 1000);
  @Override protected void preSubmit() throws Exception {
    resultPath=getTempDirPath("result");
  }
  @Override protected void testProgram() throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple3<Integer,Integer,String>> ds=env.createInput(new LargeJoinDataGeneratorInputFormat(1000000));
    ds.join(ds).where(0).equalTo(1).with(new Joiner()).writeAsText(resultPath);
    env.execute("Local Selfjoin Test Job");
  }
@SuppressWarnings("serial") private static class Joiner implements FlatJoinFunction<Tuple3<Integer,Integer,String>,Tuple3<Integer,Integer,String>,Tuple5<Integer,Integer,Integer,String,String>> {
    @Override public void join(    Tuple3<Integer,Integer,String> in1,    Tuple3<Integer,Integer,String> in2,    Collector<Tuple5<Integer,Integer,Integer,String,String>> out) throws Exception {
      out.collect(new Tuple5<Integer,Integer,Integer,String,String>(in1.f0,in1.f1,in2.f1,in1.f2,in2.f2));
    }
  }
private static class LargeJoinDataGeneratorInputFormat extends GenericInputFormat<Tuple3<Integer,Integer,String>> implements NonParallelInput {
    private static final long serialVersionUID=1L;
    private final Random rand=new Random(42);
    private final int toProduce;
    private int produced;
    public LargeJoinDataGeneratorInputFormat(    int toProduce){
      this.toProduce=toProduce;
    }
    @Override public boolean reachedEnd() throws IOException {
      return produced >= toProduce;
    }
    @Override public Tuple3<Integer,Integer,String> nextRecord(    Tuple3<Integer,Integer,String> reuse) throws IOException {
      produced++;
      return new Tuple3<Integer,Integer,String>(rand.nextInt(toProduce),rand.nextInt(toProduce),"aaa");
    }
  }
}
