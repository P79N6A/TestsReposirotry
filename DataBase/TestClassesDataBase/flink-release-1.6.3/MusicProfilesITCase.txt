/** 
 * Tests for  {@link MusicProfiles}.
 */
@RunWith(Parameterized.class) public class MusicProfilesITCase extends MultipleProgramsTestBase {
  private String tripletsPath;
  private String mismatchesPath;
  private String topSongsResultPath;
  private String communitiesResultPath;
  private String expectedTopSongs;
  @Rule public TemporaryFolder tempFolder=new TemporaryFolder();
  public MusicProfilesITCase(  TestExecutionMode mode){
    super(mode);
  }
  @Before public void before() throws Exception {
    topSongsResultPath=tempFolder.newFile().toURI().toString();
    communitiesResultPath=tempFolder.newFile().toURI().toString();
    File tripletsFile=tempFolder.newFile();
    FileUtils.writeFileUtf8(tripletsFile,MusicProfilesData.USER_SONG_TRIPLETS);
    tripletsPath=tripletsFile.toURI().toString();
    File mismatchesFile=tempFolder.newFile();
    FileUtils.writeFileUtf8(mismatchesFile,MusicProfilesData.MISMATCHES);
    mismatchesPath=mismatchesFile.toURI().toString();
  }
  @Test public void testMusicProfilesExample() throws Exception {
    MusicProfiles.main(new String[]{tripletsPath,mismatchesPath,topSongsResultPath,"0",communitiesResultPath,MusicProfilesData.MAX_ITERATIONS + ""});
    expectedTopSongs=MusicProfilesData.TOP_SONGS_RESULT;
  }
  @After public void after() throws Exception {
    TestBaseUtils.compareResultsByLinesInMemory(expectedTopSongs,topSongsResultPath);
    ArrayList<String> list=new ArrayList<>();
    TestBaseUtils.readAllResultLines(list,communitiesResultPath,new String[]{},false);
    String[] result=list.toArray(new String[list.size()]);
    Arrays.sort(result);
    Assert.assertEquals("users 1 and 2 are not in the same community",result[0].substring(7),result[1].substring(7));
    Assert.assertEquals("users 3 and 4 are not in the same community",result[2].substring(7),result[3].substring(7));
    Assert.assertEquals("users 4 and 5 are not in the same community",result[3].substring(7),result[4].substring(7));
  }
}
