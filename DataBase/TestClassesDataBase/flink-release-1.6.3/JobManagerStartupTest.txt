/** 
 * Tests that verify the startup behavior of the JobManager in failure situations, when the JobManager cannot be started.
 */
public class JobManagerStartupTest extends TestLogger {
  private final static String DOES_NOT_EXISTS_NO_SIR="does-not-exist-no-sir";
  private File blobStorageDirectory;
  @Rule public final TemporaryFolder temporaryFolder=new TemporaryFolder();
  @Before public void before() throws IOException {
    assumeTrue(!OperatingSystem.isWindows());
    blobStorageDirectory=temporaryFolder.newFolder();
    assertTrue(blobStorageDirectory.setExecutable(true,false));
    assertTrue(blobStorageDirectory.setReadable(true,false));
    assertTrue(blobStorageDirectory.setWritable(false,false));
  }
  @After public void after(){
    if (blobStorageDirectory != null) {
      assertTrue(blobStorageDirectory.delete());
    }
  }
  /** 
 * Verifies that the JobManager fails fast (and with expressive error message) when the port to listen is already in use.
 * @throws Throwable 
 */
  @Test(expected=BindException.class) public void testStartupWithPortInUse() throws BindException {
    ServerSocket portOccupier;
    final int portNum;
    try {
      portNum=NetUtils.getAvailablePort();
      portOccupier=new ServerSocket(portNum,10,InetAddress.getByName("0.0.0.0"));
    }
 catch (    Throwable t) {
      return;
    }
    try {
      JobManager.runJobManager(new Configuration(),JobManagerMode.CLUSTER,"localhost",portNum);
      fail("this should throw an exception");
    }
 catch (    Exception e) {
      List<Throwable> causes=StartupUtils.getExceptionCauses(e,new ArrayList<Throwable>());
      for (      Throwable cause : causes) {
        if (cause instanceof BindException) {
          throw (BindException)cause;
        }
      }
      throw e;
    }
 finally {
      try {
        portOccupier.close();
      }
 catch (      Throwable t) {
      }
    }
  }
  /** 
 * Verifies that the JobManager fails fast (and with expressive error message) when one of its components (here the BLOB server) fails to start properly.
 */
  @Test public void testJobManagerStartupFails(){
    final int portNum;
    try {
      portNum=NetUtils.getAvailablePort();
    }
 catch (    Throwable t) {
      return;
    }
    Configuration failConfig=new Configuration();
    String nonExistDirectory=new File(blobStorageDirectory,DOES_NOT_EXISTS_NO_SIR).getAbsolutePath();
    failConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,nonExistDirectory);
    try {
      JobManager.runJobManager(failConfig,JobManagerMode.CLUSTER,"localhost",portNum);
      fail("this should fail with an exception");
    }
 catch (    Exception e) {
    }
  }
}
