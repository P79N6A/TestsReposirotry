/** 
 * Tests that  {@link FileCache} can read files from {@link BlobServer}.
 */
public class FileCacheReadsFromBlobTest {
  private static final String testFileContent="Goethe - Faust: Der Tragoedie erster Teil\n" + "Prolog im Himmel.\n" + "Der Herr. Die himmlischen Heerscharen. Nachher Mephistopheles. Die drei\n"+ "Erzengel treten vor.\n"+ "RAPHAEL: Die Sonne toent, nach alter Weise, In Brudersphaeren Wettgesang,\n"+ "Und ihre vorgeschriebne Reise Vollendet sie mit Donnergang. Ihr Anblick\n"+ "gibt den Engeln Staerke, Wenn keiner Sie ergruenden mag; die unbegreiflich\n"+ "hohen Werke Sind herrlich wie am ersten Tag.\n"+ "GABRIEL: Und schnell und unbegreiflich schnelle Dreht sich umher der Erde\n"+ "Pracht; Es wechselt Paradieseshelle Mit tiefer, schauervoller Nacht. Es\n"+ "schaeumt das Meer in breiten Fluessen Am tiefen Grund der Felsen auf, Und\n"+ "Fels und Meer wird fortgerissen Im ewig schnellem Sphaerenlauf.\n"+ "MICHAEL: Und Stuerme brausen um die Wette Vom Meer aufs Land, vom Land\n"+ "aufs Meer, und bilden wuetend eine Kette Der tiefsten Wirkung rings umher.\n"+ "Da flammt ein blitzendes Verheeren Dem Pfade vor des Donnerschlags. Doch\n"+ "deine Boten, Herr, verehren Das sanfte Wandeln deines Tags.";
  @Rule public final TemporaryFolder temporaryFolder=new TemporaryFolder();
  private FileCache fileCache;
  private final PermanentBlobKey permanentBlobKey=new PermanentBlobKey();
  private final PermanentBlobService blobService=new PermanentBlobService(){
    @Override public File getFile(    JobID jobId,    PermanentBlobKey key) throws IOException {
      if (key.equals(permanentBlobKey)) {
        File f=temporaryFolder.newFile("cacheFile");
        FileUtils.writeFileUtf8(f,testFileContent);
        return f;
      }
 else {
        throw new IllegalArgumentException("This service contains only entry for " + permanentBlobKey);
      }
    }
    @Override public void close() throws IOException {
    }
  }
;
  @Before public void setup() throws Exception {
    fileCache=new FileCache(new String[]{temporaryFolder.newFolder().getAbsolutePath()},blobService);
  }
  @After public void shutdown(){
    fileCache.shutdown();
  }
  @Test public void testFileDownloadedFromBlob() throws Exception {
    JobID jobID=new JobID();
    ExecutionAttemptID attemptID=new ExecutionAttemptID();
    final String fileName="test_file";
    final DistributedCache.DistributedCacheEntry entry=new DistributedCache.DistributedCacheEntry(fileName,false,InstantiationUtil.serializeObject(permanentBlobKey));
    Future<Path> copyResult=fileCache.createTmpFile(fileName,entry,jobID,attemptID);
    final Path dstPath=copyResult.get();
    final String actualContent=Files.toString(new File(dstPath.toUri()),StandardCharsets.UTF_8);
    assertTrue(dstPath.getFileSystem().exists(dstPath));
    assertEquals(testFileContent,actualContent);
  }
}
