public class TaskInputSplitProviderTest {
  @Test public void testRequestNextInputSplitWithInvalidExecutionID() throws InputSplitProviderException {
    final JobID jobID=new JobID();
    final JobVertexID vertexID=new JobVertexID();
    final ExecutionAttemptID executionID=new ExecutionAttemptID();
    final FiniteDuration timeout=new FiniteDuration(10,TimeUnit.SECONDS);
    final ActorGateway gateway=new NullInputSplitGateway();
    final TaskInputSplitProvider provider=new TaskInputSplitProvider(gateway,jobID,vertexID,executionID,timeout);
    InputSplit nextInputSplit=provider.getNextInputSplit(getClass().getClassLoader());
    assertTrue(nextInputSplit == null);
  }
public static class NullInputSplitGateway extends BaseTestingActorGateway {
    private static final long serialVersionUID=-7733997150554492926L;
    public NullInputSplitGateway(){
      super(TestingUtils.defaultExecutionContext());
    }
    @Override public Object handleMessage(    Object message) throws Exception {
      if (message instanceof JobManagerMessages.RequestNextInputSplit) {
        return new JobManagerMessages.NextInputSplit(null);
      }
 else {
        throw new Exception("Invalid message type");
      }
    }
  }
}
