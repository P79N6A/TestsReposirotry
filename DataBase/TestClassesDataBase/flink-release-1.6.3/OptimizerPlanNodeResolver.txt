public static final class OptimizerPlanNodeResolver {
  private final Map<String,ArrayList<PlanNode>> map;
  public OptimizerPlanNodeResolver(  OptimizedPlan p){
    HashMap<String,ArrayList<PlanNode>> map=new HashMap<String,ArrayList<PlanNode>>();
    for (    PlanNode n : p.getAllNodes()) {
      Operator<?> c=n.getOriginalOptimizerNode().getOperator();
      String name=c.getName();
      ArrayList<PlanNode> list=map.get(name);
      if (list == null) {
        list=new ArrayList<PlanNode>(2);
        map.put(name,list);
      }
      boolean shouldAdd=true;
      for (Iterator<PlanNode> iter=list.iterator(); iter.hasNext(); ) {
        PlanNode in=iter.next();
        if (in.getOriginalOptimizerNode().getOperator() == c) {
          if (in instanceof SingleInputPlanNode && n instanceof SingleInputPlanNode) {
            SingleInputPlanNode thisNode=(SingleInputPlanNode)n;
            SingleInputPlanNode otherNode=(SingleInputPlanNode)in;
            if (thisNode.getPredecessor() == otherNode) {
              iter.remove();
            }
 else             if (otherNode.getPredecessor() == thisNode) {
              shouldAdd=false;
            }
          }
 else {
            throw new RuntimeException("Unrecodnized case in test.");
          }
        }
      }
      if (shouldAdd) {
        list.add(n);
      }
    }
    this.map=map;
  }
  @SuppressWarnings("unchecked") public <T extends PlanNode>T getNode(  String name){
    List<PlanNode> nodes=this.map.get(name);
    if (nodes == null || nodes.isEmpty()) {
      throw new RuntimeException("No node found with the given name.");
    }
 else     if (nodes.size() != 1) {
      throw new RuntimeException("Multiple nodes found with the given name.");
    }
 else {
      return (T)nodes.get(0);
    }
  }
  @SuppressWarnings("unchecked") public <T extends PlanNode>T getNode(  String name,  Class<? extends Function> stubClass){
    List<PlanNode> nodes=this.map.get(name);
    if (nodes == null || nodes.isEmpty()) {
      throw new RuntimeException("No node found with the given name and stub class.");
    }
 else {
      PlanNode found=null;
      for (      PlanNode node : nodes) {
        if (node.getClass() == stubClass) {
          if (found == null) {
            found=node;
          }
 else {
            throw new RuntimeException("Multiple nodes found with the given name and stub class.");
          }
        }
      }
      if (found == null) {
        throw new RuntimeException("No node found with the given name and stub class.");
      }
 else {
        return (T)found;
      }
    }
  }
  public List<PlanNode> getNodes(  String name){
    List<PlanNode> nodes=this.map.get(name);
    if (nodes == null || nodes.isEmpty()) {
      throw new RuntimeException("No node found with the given name.");
    }
 else {
      return new ArrayList<PlanNode>(nodes);
    }
  }
}
