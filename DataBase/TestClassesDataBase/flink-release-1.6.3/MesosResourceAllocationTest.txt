/** 
 * Tests  {@link MesosResourceAllocation}.
 */
public class MesosResourceAllocationTest extends TestLogger {
  private static final String ROLE_A="A";
  private static final String ROLE_B="B";
  private static final Set<String> AS_ROLE_A=Collections.singleton(ROLE_A);
  private static final Set<String> AS_NO_ROLE=Collections.emptySet();
  /** 
 * Tests that reserved resources are prioritized.
 */
  @Test public void testReservationPrioritization(){
    MesosResourceAllocation allocation=new MesosResourceAllocation(resources(cpus(ROLE_A,1.0),cpus(UNRESERVED_ROLE,1.0),cpus(ROLE_B,1.0)));
    Assert.assertEquals(resources(cpus(ROLE_A,1.0),cpus(ROLE_B,1.0),cpus(UNRESERVED_ROLE,1.0)),allocation.getRemaining());
  }
  /** 
 * Tests that resources are filtered according to the framework role (if any).
 */
  @Test public void testReservationFiltering(){
    MesosResourceAllocation allocation;
    allocation=new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE,1.0),ports(UNRESERVED_ROLE,range(80,80))));
    Assert.assertEquals(resources(cpus(UNRESERVED_ROLE,1.0)),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(80,80))),allocation.takeRanges("ports",1,AS_NO_ROLE));
    allocation=new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE,1.0),ports(UNRESERVED_ROLE,range(80,80))));
    Assert.assertEquals(resources(cpus(UNRESERVED_ROLE,1.0)),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
    Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
    allocation=new MesosResourceAllocation(resources(cpus(ROLE_A,1.0),ports(ROLE_A,range(80,80))));
    Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_NO_ROLE));
    Assert.assertEquals(resources(cpus(ROLE_A,1.0)),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
    Assert.assertEquals(resources(ports(ROLE_A,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
    allocation=new MesosResourceAllocation(resources(cpus(ROLE_B,1.0),ports(ROLE_B,range(80,80))));
    Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
    Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_ROLE_A));
  }
  /** 
 * Tests resource naming and typing.
 */
  @Test public void testResourceSpecificity(){
    MesosResourceAllocation allocation=new MesosResourceAllocation(resources(cpus(1.0),ports(range(80,80))));
    Assert.assertEquals(resources(),allocation.takeScalar("other",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeRanges("other",1,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeScalar("ports",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.takeRanges("cpus",1,AS_NO_ROLE));
    Assert.assertEquals(resources(cpus(1.0),ports(range(80,80))),allocation.getRemaining());
  }
  /** 
 * Tests scalar resource accounting.
 */
  @Test public void testScalarResourceAccounting(){
    MesosResourceAllocation allocation;
    allocation=new MesosResourceAllocation(resources(cpus(1.0)));
    Assert.assertEquals(resources(cpus(0.25)),allocation.takeScalar("cpus",0.25,AS_NO_ROLE));
    Assert.assertEquals(resources(cpus(0.75)),allocation.getRemaining());
    allocation=new MesosResourceAllocation(resources(cpus(1.0)));
    Assert.assertEquals(resources(cpus(1.0)),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.getRemaining());
    allocation=new MesosResourceAllocation(resources(cpus(ROLE_A,1.0),cpus(UNRESERVED_ROLE,1.0)));
    Assert.assertEquals(resources(cpus(ROLE_A,1.0),cpus(UNRESERVED_ROLE,0.25)),allocation.takeScalar("cpus",1.25,AS_ROLE_A));
    Assert.assertEquals(resources(cpus(UNRESERVED_ROLE,0.75)),allocation.getRemaining());
  }
  /** 
 * Tests scalar resource exhaustion (i.e. insufficient resources).
 */
  @Test public void testScalarResourceExhaustion(){
    MesosResourceAllocation allocation=new MesosResourceAllocation(resources(cpus(1.0)));
    Assert.assertEquals(resources(cpus(1.0)),allocation.takeScalar("cpus",2.0,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.getRemaining());
  }
  /** 
 * Tests range resource accounting.
 */
  @Test public void testRangeResourceAccounting(){
    MesosResourceAllocation allocation;
    List<Protos.Resource> ports=resources(ports(ROLE_A,range(80,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081)));
    allocation=new MesosResourceAllocation(ports);
    Assert.assertEquals(resources(ports(ROLE_A,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
    Assert.assertEquals(resources(ports(ROLE_A,range(81,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
    allocation=new MesosResourceAllocation(ports);
    Assert.assertEquals(resources(ports(ROLE_A,range(80,81))),allocation.takeRanges("ports",2,AS_ROLE_A));
    Assert.assertEquals(resources(ports(ROLE_A,range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
    allocation=new MesosResourceAllocation(ports);
    Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,443))),allocation.takeRanges("ports",3,AS_ROLE_A));
    Assert.assertEquals(resources(ports(ROLE_A,range(444,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
    allocation=new MesosResourceAllocation(ports);
    Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,444))),allocation.takeRanges("ports",4,AS_ROLE_A));
    Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
    allocation=new MesosResourceAllocation(ports);
    Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1024))),allocation.takeRanges("ports",5,AS_ROLE_A));
    Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(1025,1025),range(8080,8081))),allocation.getRemaining());
  }
  /** 
 * Tests range resource exhaustion (i.e. insufficient resources).
 */
  @Test public void testRangeResourceExhaustion(){
    MesosResourceAllocation allocation=new MesosResourceAllocation(resources(ports(range(80,80))));
    Assert.assertEquals(resources(ports(range(80,80))),allocation.takeRanges("ports",2,AS_NO_ROLE));
    Assert.assertEquals(resources(),allocation.getRemaining());
  }
}
