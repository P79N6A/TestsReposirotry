private static class CounterSink extends RichSinkFunction<Tuple2<Integer,Long>> {
  private static final Map<Integer,Long> ALL_COUNTS=new ConcurrentHashMap<>();
  private transient ValueState<NonSerializableLong> aCounts;
  private transient ValueState<Long> bCounts;
  @Override public void open(  Configuration parameters) throws IOException {
    aCounts=getRuntimeContext().getState(new ValueStateDescriptor<>("a",NonSerializableLong.class));
    bCounts=getRuntimeContext().getState(new ValueStateDescriptor<>("b",Long.class));
  }
  @Override public void invoke(  Tuple2<Integer,Long> value) throws Exception {
    final NonSerializableLong acRaw=aCounts.value();
    final Long bcRaw=bCounts.value();
    final long ac=acRaw == null ? 0L : acRaw.value;
    final long bc=bcRaw == null ? 0L : bcRaw;
    assertEquals(ac,bc);
    long currentCount=ac + 1;
    aCounts.update(NonSerializableLong.of(currentCount));
    bCounts.update(currentCount);
    ALL_COUNTS.put(value.f0,currentCount);
  }
}
