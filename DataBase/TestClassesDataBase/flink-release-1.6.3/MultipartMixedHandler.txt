/** 
 * Handler that accepts a mixed request consisting of a  {@link TestRequestBody} and {@link #file1} and {@link #file2}.
 */
public static class MultipartMixedHandler extends AbstractRestHandler<RestfulGateway,TestRequestBody,EmptyResponseBody,EmptyMessageParameters> {
  private final Collection<Path> expectedFiles;
  volatile TestRequestBody lastReceivedRequest=null;
  MultipartMixedHandler(  CompletableFuture<String> localRestAddress,  GatewayRetriever<RestfulGateway> leaderRetriever,  Collection<Path> expectedFiles){
    super(localRestAddress,leaderRetriever,RpcUtils.INF_TIMEOUT,Collections.emptyMap(),MultipartMixedHeaders.INSTANCE);
    this.expectedFiles=expectedFiles;
  }
  @Override protected CompletableFuture<EmptyResponseBody> handleRequest(  @Nonnull HandlerRequest<TestRequestBody,EmptyMessageParameters> request,  @Nonnull RestfulGateway gateway) throws RestHandlerException {
    MultipartFileHandler.verifyFileUpload(expectedFiles,request.getUploadedFiles().stream().map(File::toPath).collect(Collectors.toList()));
    this.lastReceivedRequest=request.getRequestBody();
    return CompletableFuture.completedFuture(EmptyResponseBody.getInstance());
  }
private static final class MultipartMixedHeaders implements MessageHeaders<TestRequestBody,EmptyResponseBody,EmptyMessageParameters> {
    private static final MultipartMixedHeaders INSTANCE=new MultipartMixedHeaders();
    private MultipartMixedHeaders(){
    }
    @Override public Class<TestRequestBody> getRequestClass(){
      return TestRequestBody.class;
    }
    @Override public Class<EmptyResponseBody> getResponseClass(){
      return EmptyResponseBody.class;
    }
    @Override public HttpResponseStatus getResponseStatusCode(){
      return HttpResponseStatus.OK;
    }
    @Override public String getDescription(){
      return "";
    }
    @Override public EmptyMessageParameters getUnresolvedMessageParameters(){
      return EmptyMessageParameters.getInstance();
    }
    @Override public HttpMethodWrapper getHttpMethod(){
      return HttpMethodWrapper.POST;
    }
    @Override public String getTargetRestEndpointURL(){
      return "/test/upload/mixed";
    }
    @Override public boolean acceptsFileUploads(){
      return true;
    }
  }
}
