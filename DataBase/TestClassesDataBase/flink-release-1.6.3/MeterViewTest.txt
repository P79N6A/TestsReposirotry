/** 
 * Tests for the MeterView.
 */
public class MeterViewTest {
  @Test public void testGetCount(){
    Counter c=new SimpleCounter();
    c.inc(5);
    Meter m=new MeterView(c,60);
    assertEquals(5,m.getCount());
  }
  @Test public void testMarkEvent(){
    Counter c=new SimpleCounter();
    Meter m=new MeterView(c,60);
    assertEquals(0,m.getCount());
    m.markEvent();
    assertEquals(1,m.getCount());
    m.markEvent(2);
    assertEquals(3,m.getCount());
  }
  @Test public void testGetRate(){
    Counter c=new SimpleCounter();
    MeterView m=new MeterView(c,60);
    for (int x=0; x < 12; x++) {
      m.markEvent(10);
      m.update();
    }
    assertEquals(2.0,m.getRate(),0.1);
    for (int x=0; x < 12; x++) {
      m.markEvent(10);
      m.update();
    }
    assertEquals(2.0,m.getRate(),0.1);
    for (int x=0; x < 6; x++) {
      m.markEvent(20);
      m.update();
    }
    assertEquals(3.0,m.getRate(),0.1);
    for (int x=0; x < 6; x++) {
      m.markEvent(20);
      m.update();
    }
    assertEquals(4.0,m.getRate(),0.1);
    for (int x=0; x < 6; x++) {
      m.update();
    }
    assertEquals(2.0,m.getRate(),0.1);
    for (int x=0; x < 6; x++) {
      m.update();
    }
    assertEquals(0.0,m.getRate(),0.1);
  }
  @Test public void testTimeSpanBelowUpdateRate(){
    int timeSpanInSeconds=1;
    MeterView m=new MeterView(timeSpanInSeconds);
    assert timeSpanInSeconds < UPDATE_INTERVAL_SECONDS;
    m.markEvent();
    m.update();
    assertEquals(0.2,m.getRate(),0.0);
  }
}
