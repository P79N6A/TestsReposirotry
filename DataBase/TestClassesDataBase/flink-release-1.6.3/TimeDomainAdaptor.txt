private interface TimeDomainAdaptor {
  void setIsEventTime(  WindowAssigner<?,?> mockAssigner);
  void advanceTime(  OneInputStreamOperatorTestHarness testHarness,  long timestamp) throws Exception ;
  void registerTimer(  Trigger.TriggerContext ctx,  long timestamp);
  void deleteTimer(  Trigger.TriggerContext ctx,  long timestamp);
  int numTimers(  AbstractStreamOperatorTestHarness testHarness);
  int numTimersOtherDomain(  AbstractStreamOperatorTestHarness testHarness);
  void shouldRegisterTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception ;
  void shouldDeleteTimerOnElement(  Trigger<?,TimeWindow> mockTrigger,  long timestamp) throws Exception ;
  void shouldContinueOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception ;
  void shouldFireOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception ;
  void shouldFireAndPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception ;
  void shouldPurgeOnTime(  Trigger<?,TimeWindow> mockTrigger) throws Exception ;
  void verifyTriggerCallback(  Trigger<?,TimeWindow> mockTrigger,  VerificationMode verificationMode,  Long time,  TimeWindow window) throws Exception ;
  void verifyCorrectTime(  OneInputStreamOperatorTestHarness testHarness,  InternalWindowFunction.InternalWindowContext context);
}
