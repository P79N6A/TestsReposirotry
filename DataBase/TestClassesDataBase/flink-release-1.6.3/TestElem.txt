private static class TestElem {
  String key;
  long ts;
  String source;
  public TestElem(  long ts,  String source){
    this.key="key";
    this.ts=ts;
    this.source=source;
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestElem testElem=(TestElem)o;
    if (ts != testElem.ts) {
      return false;
    }
    if (key != null ? !key.equals(testElem.key) : testElem.key != null) {
      return false;
    }
    return source != null ? source.equals(testElem.source) : testElem.source == null;
  }
  @Override public int hashCode(){
    int result=key != null ? key.hashCode() : 0;
    result=31 * result + (int)(ts ^ (ts >>> 32));
    result=31 * result + (source != null ? source.hashCode() : 0);
    return result;
  }
  @Override public String toString(){
    return this.source + ":" + this.ts;
  }
  public static TypeSerializer<TestElem> serializer(){
    return TypeInformation.of(new TypeHint<TestElem>(){
    }
).createSerializer(new ExecutionConfig());
  }
}
