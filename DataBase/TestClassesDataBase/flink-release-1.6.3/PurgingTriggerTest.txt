/** 
 * Tests for  {@link PurgingTrigger}.
 */
public class PurgingTriggerTest {
  /** 
 * Check if  {@link PurgingTrigger} implements all methods of {@link Trigger}, as a sanity check.
 */
  @Test public void testAllMethodsImplemented() throws NoSuchMethodException {
    for (    Method triggerMethod : Trigger.class.getDeclaredMethods()) {
      PurgingTrigger.class.getDeclaredMethod(triggerMethod.getName(),triggerMethod.getParameterTypes());
    }
  }
  @Test public void testForwarding() throws Exception {
    Trigger<Object,TimeWindow> mockTrigger=mock(Trigger.class);
    TriggerTestHarness<Object,TimeWindow> testHarness=new TriggerTestHarness<>(PurgingTrigger.of(mockTrigger),new TimeWindow.Serializer());
    when(mockTrigger.onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.CONTINUE);
    assertEquals(TriggerResult.CONTINUE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    when(mockTrigger.onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    when(mockTrigger.onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE_AND_PURGE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    when(mockTrigger.onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.PURGE);
    assertEquals(TriggerResult.PURGE,testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2)));
    doAnswer(new Answer<TriggerResult>(){
      @Override public TriggerResult answer(      InvocationOnMock invocation) throws Exception {
        Trigger.TriggerContext context=(Trigger.TriggerContext)invocation.getArguments()[3];
        context.registerEventTimeTimer(1);
        context.registerEventTimeTimer(2);
        context.registerEventTimeTimer(3);
        context.registerEventTimeTimer(4);
        return TriggerResult.CONTINUE;
      }
    }
).when(mockTrigger).onElement(Matchers.<Integer>anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext());
    testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2));
    assertEquals(4,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    when(mockTrigger.onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.CONTINUE);
    assertEquals(TriggerResult.CONTINUE,testHarness.advanceWatermark(1,new TimeWindow(0,2)));
    when(mockTrigger.onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.advanceWatermark(2,new TimeWindow(0,2)));
    when(mockTrigger.onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE_AND_PURGE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.advanceWatermark(3,new TimeWindow(0,2)));
    when(mockTrigger.onEventTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.PURGE);
    assertEquals(TriggerResult.PURGE,testHarness.advanceWatermark(4,new TimeWindow(0,2)));
    doAnswer(new Answer<TriggerResult>(){
      @Override public TriggerResult answer(      InvocationOnMock invocation) throws Exception {
        Trigger.TriggerContext context=(Trigger.TriggerContext)invocation.getArguments()[3];
        context.registerProcessingTimeTimer(1);
        context.registerProcessingTimeTimer(2);
        context.registerProcessingTimeTimer(3);
        context.registerProcessingTimeTimer(4);
        return TriggerResult.CONTINUE;
      }
    }
).when(mockTrigger).onElement(Matchers.<Integer>anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext());
    testHarness.processElement(new StreamRecord<Object>(1),new TimeWindow(0,2));
    assertEquals(4,testHarness.numProcessingTimeTimers(new TimeWindow(0,2)));
    assertEquals(0,testHarness.numEventTimeTimers(new TimeWindow(0,2)));
    when(mockTrigger.onProcessingTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.CONTINUE);
    assertEquals(TriggerResult.CONTINUE,testHarness.advanceProcessingTime(1,new TimeWindow(0,2)));
    when(mockTrigger.onProcessingTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.advanceProcessingTime(2,new TimeWindow(0,2)));
    when(mockTrigger.onProcessingTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.FIRE_AND_PURGE);
    assertEquals(TriggerResult.FIRE_AND_PURGE,testHarness.advanceProcessingTime(3,new TimeWindow(0,2)));
    when(mockTrigger.onProcessingTime(anyLong(),anyTimeWindow(),anyTriggerContext())).thenReturn(TriggerResult.PURGE);
    assertEquals(TriggerResult.PURGE,testHarness.advanceProcessingTime(4,new TimeWindow(0,2)));
    testHarness.mergeWindows(new TimeWindow(0,2),Collections.singletonList(new TimeWindow(0,1)));
    verify(mockTrigger,times(1)).onMerge(anyTimeWindow(),anyOnMergeContext());
    testHarness.clearTriggerState(new TimeWindow(0,2));
    verify(mockTrigger,times(1)).clear(eq(new TimeWindow(0,2)),anyTriggerContext());
  }
}
