/** 
 * Tests for our own  {@link FlinkKafkaProducer}.
 */
@SuppressWarnings("serial") public class FlinkKafkaProducerITCase extends KafkaTestBase {
  protected String transactionalId;
  protected Properties extraProperties;
  @Before public void before(){
    transactionalId=UUID.randomUUID().toString();
    extraProperties=new Properties();
    extraProperties.putAll(standardProps);
    extraProperties.put("transactional.id",transactionalId);
    extraProperties.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");
    extraProperties.put("value.serializer","org.apache.kafka.common.serialization.StringSerializer");
    extraProperties.put("key.deserializer","org.apache.kafka.common.serialization.StringDeserializer");
    extraProperties.put("value.deserializer","org.apache.kafka.common.serialization.StringDeserializer");
    extraProperties.put("isolation.level","read_committed");
  }
  @Test(timeout=30000L) public void testHappyPath() throws IOException {
    String topicName="flink-kafka-producer-happy-path";
    try (Producer<String,String> kafkaProducer=new FlinkKafkaProducer<>(extraProperties)){
      kafkaProducer.initTransactions();
      kafkaProducer.beginTransaction();
      kafkaProducer.send(new ProducerRecord<>(topicName,"42","42"));
      kafkaProducer.commitTransaction();
    }
     assertRecord(topicName,"42","42");
    deleteTestTopic(topicName);
  }
  @Test(timeout=30000L) public void testResumeTransaction() throws IOException {
    String topicName="flink-kafka-producer-resume-transaction";
    try (FlinkKafkaProducer<String,String> kafkaProducer=new FlinkKafkaProducer<>(extraProperties)){
      kafkaProducer.initTransactions();
      kafkaProducer.beginTransaction();
      kafkaProducer.send(new ProducerRecord<>(topicName,"42","42"));
      kafkaProducer.flush();
      long producerId=kafkaProducer.getProducerId();
      short epoch=kafkaProducer.getEpoch();
      try (FlinkKafkaProducer<String,String> resumeProducer=new FlinkKafkaProducer<>(extraProperties)){
        resumeProducer.resumeTransaction(producerId,epoch);
        resumeProducer.commitTransaction();
      }
       assertRecord(topicName,"42","42");
      kafkaProducer.commitTransaction();
      try (FlinkKafkaProducer<String,String> resumeProducer=new FlinkKafkaProducer<>(extraProperties)){
        resumeProducer.resumeTransaction(producerId,epoch);
        resumeProducer.commitTransaction();
      }
     }
     deleteTestTopic(topicName);
  }
  private void assertRecord(  String topicName,  String expectedKey,  String expectedValue){
    try (KafkaConsumer<String,String> kafkaConsumer=new KafkaConsumer<>(extraProperties)){
      kafkaConsumer.subscribe(Collections.singletonList(topicName));
      ConsumerRecords<String,String> records=kafkaConsumer.poll(10000);
      ConsumerRecord<String,String> record=Iterables.getOnlyElement(records);
      assertEquals(expectedKey,record.key());
      assertEquals(expectedValue,record.value());
    }
   }
}
