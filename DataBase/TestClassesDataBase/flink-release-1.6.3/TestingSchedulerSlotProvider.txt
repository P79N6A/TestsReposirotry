private static final class TestingSchedulerSlotProvider implements TestingSlotProvider {
  private final Scheduler scheduler;
  private TestingSchedulerSlotProvider(  Scheduler scheduler){
    this.scheduler=Preconditions.checkNotNull(scheduler);
  }
  @Override public CompletableFuture<LogicalSlot> allocateSlot(  SlotRequestId slotRequestId,  ScheduledUnit task,  boolean allowQueued,  SlotProfile slotProfile,  Time allocationTimeout){
    return scheduler.allocateSlot(task,allowQueued,slotProfile,allocationTimeout);
  }
  @Override public CompletableFuture<Acknowledge> cancelSlotRequest(  SlotRequestId slotRequestId,  @Nullable SlotSharingGroupId slotSharingGroupId,  Throwable cause){
    return CompletableFuture.completedFuture(Acknowledge.get());
  }
  @Override public TaskManagerLocation addTaskManager(  int numberSlots){
    final Instance instance=getRandomInstance(numberSlots);
    scheduler.newInstanceAvailable(instance);
    return instance.getTaskManagerLocation();
  }
  @Override public void releaseTaskManager(  ResourceID resourceId){
    final Instance instance=scheduler.getInstance(resourceId);
    if (instance != null) {
      scheduler.instanceDied(instance);
    }
  }
  @Override public int getNumberOfAvailableSlots(){
    return scheduler.getNumberOfAvailableSlots();
  }
  @Override public int getNumberOfLocalizedAssignments(){
    return scheduler.getNumberOfLocalizedAssignments();
  }
  @Override public int getNumberOfNonLocalizedAssignments(){
    return scheduler.getNumberOfNonLocalizedAssignments();
  }
  @Override public int getNumberOfUnconstrainedAssignments(){
    return scheduler.getNumberOfUnconstrainedAssignments();
  }
  @Override public int getNumberOfHostLocalizedAssignments(){
    return 0;
  }
  @Override public int getNumberOfSlots(  SlotSharingGroup slotSharingGroup){
    return slotSharingGroup.getTaskAssignment().getNumberOfSlots();
  }
  @Override public int getNumberOfAvailableSlotsForGroup(  SlotSharingGroup slotSharingGroup,  JobVertexID jobVertexId){
    return slotSharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForGroup(jobVertexId);
  }
  @Override public void shutdown(){
    scheduler.shutdown();
  }
}
