/** 
 * Tests for  {@link OptionalBoolean}.
 */
public class OptionalBooleanTest {
  private OptionalBoolean u;
  private OptionalBoolean f;
  private OptionalBoolean t;
  private OptionalBoolean c;
  @Before public void setup(){
    u=new OptionalBoolean(false,true);
    f=new OptionalBoolean(false,true);
    t=new OptionalBoolean(false,true);
    c=new OptionalBoolean(false,true);
    f.set(false);
    t.set(true);
    c.set(true);
    c.mergeWith(f);
  }
  @Test public void testIsMismatchedWith() throws Exception {
    assertFalse(u.conflictsWith(u));
    assertFalse(u.conflictsWith(f));
    assertFalse(u.conflictsWith(t));
    assertTrue(u.conflictsWith(c));
    assertFalse(f.conflictsWith(u));
    assertFalse(f.conflictsWith(f));
    assertTrue(f.conflictsWith(t));
    assertTrue(f.conflictsWith(c));
    assertFalse(t.conflictsWith(u));
    assertTrue(t.conflictsWith(f));
    assertFalse(t.conflictsWith(t));
    assertTrue(t.conflictsWith(c));
    assertTrue(c.conflictsWith(u));
    assertTrue(c.conflictsWith(f));
    assertTrue(c.conflictsWith(t));
    assertTrue(c.conflictsWith(c));
  }
  @Test public void testMergeWith() throws Exception {
    u.mergeWith(u);
    assertEquals(State.UNSET,u.getState());
    u.mergeWith(f);
    assertEquals(State.FALSE,u.getState());
    u.unset();
    u.mergeWith(t);
    assertEquals(State.TRUE,u.getState());
    u.unset();
    u.mergeWith(c);
    assertEquals(State.CONFLICTING,u.getState());
    u.unset();
    f.mergeWith(u);
    assertEquals(State.FALSE,f.getState());
    f.mergeWith(f);
    assertEquals(State.FALSE,f.getState());
    f.mergeWith(t);
    assertEquals(State.CONFLICTING,f.getState());
    f.set(false);
    f.mergeWith(c);
    assertEquals(State.CONFLICTING,f.getState());
    f.set(false);
    t.mergeWith(u);
    assertEquals(State.TRUE,t.getState());
    t.mergeWith(f);
    assertEquals(State.CONFLICTING,t.getState());
    t.set(true);
    t.mergeWith(t);
    assertEquals(State.TRUE,t.getState());
    t.mergeWith(c);
    assertEquals(State.CONFLICTING,t.getState());
    t.set(true);
    c.mergeWith(u);
    assertEquals(State.CONFLICTING,c.getState());
    c.mergeWith(f);
    assertEquals(State.CONFLICTING,c.getState());
    c.mergeWith(t);
    assertEquals(State.CONFLICTING,c.getState());
    c.mergeWith(c);
    assertEquals(State.CONFLICTING,c.getState());
  }
}
