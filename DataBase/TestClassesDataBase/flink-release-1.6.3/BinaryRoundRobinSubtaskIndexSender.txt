public static class BinaryRoundRobinSubtaskIndexSender extends AbstractInvokable {
  public static final String CONFIG_KEY="number-of-times-to-send";
  public BinaryRoundRobinSubtaskIndexSender(  Environment environment){
    super(environment);
  }
  @Override public void invoke() throws Exception {
    List<RecordWriter<IntValue>> writers=Lists.newArrayListWithCapacity(2);
    final RecordWriter<IntValue> pipelinedWriter=new RecordWriter<>(getEnvironment().getWriter(0));
    final RecordWriter<IntValue> blockingWriter=new RecordWriter<>(getEnvironment().getWriter(1));
    writers.add(pipelinedWriter);
    writers.add(blockingWriter);
    final int numberOfTimesToSend=getTaskConfiguration().getInteger(CONFIG_KEY,0);
    final IntValue subtaskIndex=new IntValue(getEnvironment().getTaskInfo().getIndexOfThisSubtask());
    for (    RecordWriter<IntValue> writer : writers) {
      try {
        for (int i=0; i < numberOfTimesToSend; i++) {
          writer.emit(subtaskIndex);
        }
        writer.flushAll();
      }
  finally {
        writer.clearBuffers();
      }
    }
  }
}
