static final class BlockingInputStream extends InputStream {
  private final CountDownLatch countDownLatch;
  private final byte[] data;
  private int index=0;
  BlockingInputStream(  CountDownLatch countDownLatch,  byte[] data){
    this.countDownLatch=Preconditions.checkNotNull(countDownLatch);
    this.data=Preconditions.checkNotNull(data);
  }
  @Override public int read() throws IOException {
    countDownLatch.countDown();
    try {
      countDownLatch.await();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException("Blocking operation was interrupted.",e);
    }
    if (index >= data.length) {
      return -1;
    }
 else {
      return data[index++];
    }
  }
}
