static class TestingScheduledReporter extends ScheduledReporter {
  final Map<String,Snapshot> histogramSnapshots=new HashMap<>();
  final Map<String,List<CompletableFuture<Snapshot>>> histogramSnapshotFutures=new HashMap<>();
  protected TestingScheduledReporter(  com.codahale.metrics.MetricRegistry registry,  String name,  MetricFilter filter,  TimeUnit rateUnit,  TimeUnit durationUnit){
    super(registry,name,filter,rateUnit,durationUnit);
  }
  @Override public void report(  SortedMap<String,Gauge> gauges,  SortedMap<String,Counter> counters,  SortedMap<String,com.codahale.metrics.Histogram> histograms,  SortedMap<String,Meter> meters,  SortedMap<String,Timer> timers){
    for (    Map.Entry<String,com.codahale.metrics.Histogram> entry : histograms.entrySet()) {
      reportHistogram(entry.getKey(),entry.getValue());
    }
  }
  void reportHistogram(  String name,  com.codahale.metrics.Histogram histogram){
    histogramSnapshots.put(name,histogram.getSnapshot());
synchronized (histogramSnapshotFutures) {
      if (histogramSnapshotFutures.containsKey(name)) {
        List<CompletableFuture<Snapshot>> futures=histogramSnapshotFutures.remove(name);
        for (        CompletableFuture<Snapshot> future : futures) {
          future.complete(histogram.getSnapshot());
        }
      }
    }
  }
  Future<Snapshot> getNextHistogramSnapshot(  String name){
synchronized (histogramSnapshotFutures) {
      List<CompletableFuture<Snapshot>> futures;
      if (histogramSnapshotFutures.containsKey(name)) {
        futures=histogramSnapshotFutures.get(name);
      }
 else {
        futures=new ArrayList<>();
        histogramSnapshotFutures.put(name,futures);
      }
      CompletableFuture<Snapshot> future=new CompletableFuture<>();
      futures.add(future);
      return future;
    }
  }
}
