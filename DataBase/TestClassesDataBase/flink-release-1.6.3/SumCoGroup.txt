private class SumCoGroup extends RichCoGroupFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>> {
  private boolean isOpened=false;
  private boolean isClosed=false;
  @Override public void open(  Configuration parameters) throws Exception {
    isOpened=true;
    RuntimeContext ctx=getRuntimeContext();
    Assert.assertEquals("Test UDF",ctx.getTaskName());
    Assert.assertEquals(4,ctx.getNumberOfParallelSubtasks());
    Assert.assertEquals(0,ctx.getIndexOfThisSubtask());
  }
  @Override public void coGroup(  Iterable<Tuple2<String,Integer>> first,  Iterable<Tuple2<String,Integer>> second,  Collector<Tuple2<String,Integer>> out) throws Exception {
    Assert.assertTrue(isOpened);
    Assert.assertFalse(isClosed);
    String f0=null;
    int sumF1=0;
    for (    Tuple2<String,Integer> input : first) {
      f0=(f0 == null) ? input.f0 : f0;
      sumF1+=input.f1;
    }
    for (    Tuple2<String,Integer> input : second) {
      f0=(f0 == null) ? input.f0 : f0;
      sumF1+=input.f1;
    }
    out.collect(Tuple2.of(f0,sumF1));
  }
  @Override public void close() throws Exception {
    isClosed=true;
  }
}
