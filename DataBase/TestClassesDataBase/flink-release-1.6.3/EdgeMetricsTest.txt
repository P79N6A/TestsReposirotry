/** 
 * Tests for  {@link EdgeMetrics}.
 */
public class EdgeMetricsTest extends AsmTestBase {
  /** 
 * Validate a test result.
 * @param graph input graph
 * @param result expected {@link Result}
 * @param < T > graph ID type
 * @throws Exception on error
 */
  private static <T extends Comparable<T>>void validate(  Graph<T,NullValue,NullValue> graph,  Result result) throws Exception {
    Result edgeMetrics=new EdgeMetrics<T,NullValue,NullValue>().run(graph).execute();
    assertEquals(result,edgeMetrics);
  }
  @Test public void testWithSimpleGraph() throws Exception {
    validate(directedSimpleGraph,new Result(2,6,1,3));
  }
  @Test public void testWithCompleteGraph() throws Exception {
    long expectedDegree=completeGraphVertexCount - 1;
    long expectedMaximumTriplets=CombinatoricsUtils.binomialCoefficient((int)expectedDegree,2);
    long expectedTriplets=completeGraphVertexCount * expectedMaximumTriplets;
    Result expectedResult=new Result(expectedTriplets / 3,2 * expectedTriplets / 3,expectedMaximumTriplets,expectedMaximumTriplets);
    validate(completeGraph,expectedResult);
  }
  @Test public void testWithEmptyGraphWithVertices() throws Exception {
    validate(emptyGraphWithVertices,new Result(0,0,0,0));
  }
  @Test public void testWithEmptyGraphWithoutVertices() throws Exception {
    validate(emptyGraphWithoutVertices,new Result(0,0,0,0));
  }
  @Test public void testWithRMatGraph() throws Exception {
    validate(directedRMatGraph(10,16),new Result(107817,315537,820,3822));
  }
}
