private static class FixedNumberDeserializationSchema implements DeserializationSchema<Tuple2<Integer,Integer>> {
  final int finalCount;
  int count=0;
  TypeInformation<Tuple2<Integer,Integer>> ti=TypeInformation.of(new TypeHint<Tuple2<Integer,Integer>>(){
  }
);
  TypeSerializer<Tuple2<Integer,Integer>> ser=ti.createSerializer(new ExecutionConfig());
  public FixedNumberDeserializationSchema(  int finalCount){
    this.finalCount=finalCount;
  }
  @Override public Tuple2<Integer,Integer> deserialize(  byte[] message) throws IOException {
    DataInputView in=new DataInputViewStreamWrapper(new ByteArrayInputStream(message));
    return ser.deserialize(in);
  }
  @Override public boolean isEndOfStream(  Tuple2<Integer,Integer> nextElement){
    return ++count >= finalCount;
  }
  @Override public TypeInformation<Tuple2<Integer,Integer>> getProducedType(){
    return ti;
  }
}
