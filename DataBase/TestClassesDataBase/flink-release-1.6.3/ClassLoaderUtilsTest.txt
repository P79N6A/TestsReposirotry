/** 
 * Tests that validate the  {@link ClassLoaderUtil}.
 */
public class ClassLoaderUtilsTest {
  @Test public void testWithURLClassLoader(){
    File validJar=null;
    File invalidJar=null;
    try {
      validJar=File.createTempFile("flink-url-test",".tmp");
      JarFileCreator jarFileCreator=new JarFileCreator(validJar);
      jarFileCreator.addClass(ClassLoaderUtilsTest.class);
      jarFileCreator.createJarFile();
      JarFile jarFile=null;
      try {
        jarFile=new JarFile(validJar.getAbsolutePath());
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail("test setup broken: cannot create a valid jar file");
      }
 finally {
        if (jarFile != null) {
          jarFile.close();
        }
      }
      invalidJar=File.createTempFile("flink-url-test",".tmp");
      try (FileOutputStream invalidout=new FileOutputStream(invalidJar)){
        invalidout.write(new byte[]{-1,1,-2,3,-3,4});
      }
       File nonExisting=File.createTempFile("flink-url-test",".tmp");
      assertTrue("Cannot create and delete temp file",nonExisting.delete());
      URL[] urls={new URL("http","localhost",26712,"/some/file/path"),new URL("file",null,validJar.getAbsolutePath()),new URL("file",null,invalidJar.getAbsolutePath()),new URL("file",null,nonExisting.getAbsolutePath())};
      URLClassLoader loader=new URLClassLoader(urls,getClass().getClassLoader());
      String info=ClassLoaderUtil.getUserCodeClassLoaderInfo(loader);
      assertTrue(info.indexOf("/some/file/path") > 0);
      assertTrue(info.indexOf(validJar.getAbsolutePath() + "' (valid") > 0);
      assertTrue(info.indexOf(invalidJar.getAbsolutePath() + "' (invalid JAR") > 0);
      assertTrue(info.indexOf(nonExisting.getAbsolutePath() + "' (missing") > 0);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
 finally {
      if (validJar != null) {
        validJar.delete();
      }
      if (invalidJar != null) {
        invalidJar.delete();
      }
    }
  }
  @Test public void testWithAppClassLoader(){
    try {
      String result=ClassLoaderUtil.getUserCodeClassLoaderInfo(ClassLoader.getSystemClassLoader());
      assertTrue(result.toLowerCase().contains("system classloader"));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testInvalidClassLoaders(){
    try {
      assertNotNull(ClassLoaderUtil.getUserCodeClassLoaderInfo(null));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
