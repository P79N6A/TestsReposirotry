/** 
 * Test for proper error messages in case user-defined serialization is broken and detected in the network stack.
 */
@SuppressWarnings("serial") public class CustomSerializationITCase extends TestLogger {
  private static final int PARLLELISM=5;
  @ClassRule public static final MiniClusterResource MINI_CLUSTER_RESOURCE=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(getConfiguration()).setNumberTaskManagers(1).setNumberSlotsPerTaskManager(PARLLELISM).build());
  public static Configuration getConfiguration(){
    Configuration config=new Configuration();
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"30m");
    return config;
  }
  @Test public void testIncorrectSerializer1(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(PARLLELISM);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooMuch>(){
        @Override public ConsumesTooMuch map(        Long value) throws Exception {
          return new ConsumesTooMuch();
        }
      }
).rebalance().output(new DiscardingOutputFormat<ConsumesTooMuch>());
      env.execute();
    }
 catch (    JobExecutionException e) {
      Throwable rootCause=e.getCause();
      assertTrue(rootCause instanceof IOException);
      assertTrue(rootCause.getMessage().contains("broken serialization"));
    }
catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testIncorrectSerializer2(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(PARLLELISM);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooMuchSpanning>(){
        @Override public ConsumesTooMuchSpanning map(        Long value) throws Exception {
          return new ConsumesTooMuchSpanning();
        }
      }
).rebalance().output(new DiscardingOutputFormat<ConsumesTooMuchSpanning>());
      env.execute();
    }
 catch (    JobExecutionException e) {
      Throwable rootCause=e.getCause();
      assertTrue(rootCause instanceof IOException);
      assertTrue(rootCause.getMessage().contains("broken serialization"));
    }
catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testIncorrectSerializer3(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(PARLLELISM);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooLittle>(){
        @Override public ConsumesTooLittle map(        Long value) throws Exception {
          return new ConsumesTooLittle();
        }
      }
).rebalance().output(new DiscardingOutputFormat<ConsumesTooLittle>());
      env.execute();
    }
 catch (    JobExecutionException e) {
      Throwable rootCause=e.getCause();
      assertTrue(rootCause instanceof IOException);
      assertTrue(rootCause.getMessage().contains("broken serialization"));
    }
catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testIncorrectSerializer4(){
    try {
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(PARLLELISM);
      env.getConfig().disableSysoutLogging();
      env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooLittleSpanning>(){
        @Override public ConsumesTooLittleSpanning map(        Long value) throws Exception {
          return new ConsumesTooLittleSpanning();
        }
      }
).rebalance().output(new DiscardingOutputFormat<ConsumesTooLittleSpanning>());
      env.execute();
    }
 catch (    ProgramInvocationException e) {
      Throwable rootCause=e.getCause().getCause();
      assertTrue(rootCause instanceof IOException);
      assertTrue(rootCause.getMessage().contains("broken serialization"));
    }
catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  /** 
 * {@link Value} reading more data than written.
 */
public static class ConsumesTooMuch implements Value {
    @Override public void write(    DataOutputView out) throws IOException {
      out.writeInt(42);
    }
    @Override public void read(    DataInputView in) throws IOException {
      in.readLong();
    }
  }
  /** 
 * {@link Value} reading more buffers than written.
 */
public static class ConsumesTooMuchSpanning implements Value {
    @Override public void write(    DataOutputView out) throws IOException {
      byte[] bytes=new byte[22541];
      out.write(bytes);
    }
    @Override public void read(    DataInputView in) throws IOException {
      byte[] bytes=new byte[32941];
      in.readFully(bytes);
    }
  }
  /** 
 * {@link Value} reading less data than written.
 */
public static class ConsumesTooLittle implements Value {
    @Override public void write(    DataOutputView out) throws IOException {
      out.writeLong(42L);
    }
    @Override public void read(    DataInputView in) throws IOException {
      in.readInt();
    }
  }
  /** 
 * {@link Value} reading fewer buffers than written.
 */
public static class ConsumesTooLittleSpanning implements Value {
    @Override public void write(    DataOutputView out) throws IOException {
      byte[] bytes=new byte[32941];
      out.write(bytes);
    }
    @Override public void read(    DataInputView in) throws IOException {
      byte[] bytes=new byte[22541];
      in.readFully(bytes);
    }
  }
}
