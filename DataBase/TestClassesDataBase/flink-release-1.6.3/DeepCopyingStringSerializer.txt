/** 
 * A dummy serializer that just returns another instance when .duplicate().
 */
private static class DeepCopyingStringSerializer extends TypeSerializer<String> {
  private static final long serialVersionUID=-3744051158625555607L;
  @Override public boolean isImmutableType(){
    return false;
  }
  @Override public TypeSerializer<String> duplicate(){
    return new DeepCopyingStringSerializer();
  }
  @Override public String createInstance(){
    return null;
  }
  @Override public String copy(  String from){
    return null;
  }
  @Override public String copy(  String from,  String reuse){
    return null;
  }
  @Override public int getLength(){
    return 0;
  }
  @Override public void serialize(  String record,  DataOutputView target) throws IOException {
  }
  @Override public String deserialize(  DataInputView source) throws IOException {
    return null;
  }
  @Override public String deserialize(  String reuse,  DataInputView source) throws IOException {
    return null;
  }
  @Override public void copy(  DataInputView source,  DataOutputView target) throws IOException {
  }
  @Override public boolean equals(  Object obj){
    return obj instanceof DeepCopyingStringSerializer;
  }
  @Override public boolean canEqual(  Object obj){
    return true;
  }
  @Override public int hashCode(){
    return 0;
  }
  @Override public TypeSerializerConfigSnapshot snapshotConfiguration(){
    return null;
  }
  @Override public CompatibilityResult<String> ensureCompatibility(  TypeSerializerConfigSnapshot configSnapshot){
    return null;
  }
}
