/** 
 * Tests for  {@link TumblingEventTimeWindows}.
 */
public class TumblingEventTimeWindowsTest extends TestLogger {
  @Test public void testWindowAssignment(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingEventTimeWindows assigner=TumblingEventTimeWindows.of(Time.milliseconds(5000));
    assertThat(assigner.assignWindows("String",0L,mockContext),contains(timeWindow(0,5000)));
    assertThat(assigner.assignWindows("String",4999L,mockContext),contains(timeWindow(0,5000)));
    assertThat(assigner.assignWindows("String",5000L,mockContext),contains(timeWindow(5000,10000)));
  }
  @Test public void testWindowAssignmentWithOffset(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingEventTimeWindows assigner=TumblingEventTimeWindows.of(Time.milliseconds(5000),Time.milliseconds(100));
    assertThat(assigner.assignWindows("String",100L,mockContext),contains(timeWindow(100,5100)));
    assertThat(assigner.assignWindows("String",5099L,mockContext),contains(timeWindow(100,5100)));
    assertThat(assigner.assignWindows("String",5100L,mockContext),contains(timeWindow(5100,10100)));
  }
  @Test public void testTimeUnits(){
    WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
    TumblingEventTimeWindows assigner=TumblingEventTimeWindows.of(Time.seconds(5),Time.seconds(1));
    assertThat(assigner.assignWindows("String",1000L,mockContext),contains(timeWindow(1000,6000)));
    assertThat(assigner.assignWindows("String",5999L,mockContext),contains(timeWindow(1000,6000)));
    assertThat(assigner.assignWindows("String",6000L,mockContext),contains(timeWindow(6000,11000)));
  }
  @Test public void testInvalidParameters(){
    try {
      TumblingEventTimeWindows.of(Time.seconds(-1));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
    try {
      TumblingEventTimeWindows.of(Time.seconds(10),Time.seconds(20));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
    try {
      TumblingEventTimeWindows.of(Time.seconds(10),Time.seconds(-1));
      fail("should fail");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.toString(),containsString("0 <= offset < size"));
    }
  }
  @Test public void testProperties(){
    TumblingEventTimeWindows assigner=TumblingEventTimeWindows.of(Time.seconds(5),Time.milliseconds(100));
    assertTrue(assigner.isEventTime());
    assertEquals(new TimeWindow.Serializer(),assigner.getWindowSerializer(new ExecutionConfig()));
    assertThat(assigner.getDefaultTrigger(mock(StreamExecutionEnvironment.class)),instanceOf(EventTimeTrigger.class));
  }
}
