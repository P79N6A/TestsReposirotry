/** 
 * Tests for  {@link OperatorSnapshotFinalizer}.
 */
public class OperatorSnapshotFinalizerTest extends TestLogger {
  /** 
 * Test that the runnable futures are executed and the result is correctly extracted.
 */
  @Test public void testRunAndExtract() throws Exception {
    Random random=new Random(0x42);
    KeyedStateHandle keyedTemplate=StateHandleDummyUtil.createNewKeyedStateHandle(new KeyGroupRange(0,0));
    OperatorStateHandle operatorTemplate=StateHandleDummyUtil.createNewOperatorStateHandle(2,random);
    SnapshotResult<KeyedStateHandle> snapKeyMan=SnapshotResult.withLocalState(StateHandleDummyUtil.deepDummyCopy(keyedTemplate),StateHandleDummyUtil.deepDummyCopy(keyedTemplate));
    SnapshotResult<KeyedStateHandle> snapKeyRaw=SnapshotResult.withLocalState(StateHandleDummyUtil.deepDummyCopy(keyedTemplate),StateHandleDummyUtil.deepDummyCopy(keyedTemplate));
    SnapshotResult<OperatorStateHandle> snapOpMan=SnapshotResult.withLocalState(StateHandleDummyUtil.deepDummyCopy(operatorTemplate),StateHandleDummyUtil.deepDummyCopy(operatorTemplate));
    SnapshotResult<OperatorStateHandle> snapOpRaw=SnapshotResult.withLocalState(StateHandleDummyUtil.deepDummyCopy(operatorTemplate),StateHandleDummyUtil.deepDummyCopy(operatorTemplate));
    DoneFuture<SnapshotResult<KeyedStateHandle>> managedKeyed=new PseudoNotDoneFuture<>(snapKeyMan);
    DoneFuture<SnapshotResult<KeyedStateHandle>> rawKeyed=new PseudoNotDoneFuture<>(snapKeyRaw);
    DoneFuture<SnapshotResult<OperatorStateHandle>> managedOp=new PseudoNotDoneFuture<>(snapOpMan);
    DoneFuture<SnapshotResult<OperatorStateHandle>> rawOp=new PseudoNotDoneFuture<>(snapOpRaw);
    Assert.assertFalse(managedKeyed.isDone());
    Assert.assertFalse(rawKeyed.isDone());
    Assert.assertFalse(managedOp.isDone());
    Assert.assertFalse(rawOp.isDone());
    OperatorSnapshotFutures futures=new OperatorSnapshotFutures(managedKeyed,rawKeyed,managedOp,rawOp);
    OperatorSnapshotFinalizer operatorSnapshotFinalizer=new OperatorSnapshotFinalizer(futures);
    Assert.assertTrue(managedKeyed.isDone());
    Assert.assertTrue(rawKeyed.isDone());
    Assert.assertTrue(managedOp.isDone());
    Assert.assertTrue(rawOp.isDone());
    OperatorSubtaskState jobManagerOwnedState=operatorSnapshotFinalizer.getJobManagerOwnedState();
    Assert.assertTrue(checkResult(snapKeyMan.getJobManagerOwnedSnapshot(),jobManagerOwnedState.getManagedKeyedState()));
    Assert.assertTrue(checkResult(snapKeyRaw.getJobManagerOwnedSnapshot(),jobManagerOwnedState.getRawKeyedState()));
    Assert.assertTrue(checkResult(snapOpMan.getJobManagerOwnedSnapshot(),jobManagerOwnedState.getManagedOperatorState()));
    Assert.assertTrue(checkResult(snapOpRaw.getJobManagerOwnedSnapshot(),jobManagerOwnedState.getRawOperatorState()));
    OperatorSubtaskState taskLocalState=operatorSnapshotFinalizer.getTaskLocalState();
    Assert.assertTrue(checkResult(snapKeyMan.getTaskLocalSnapshot(),taskLocalState.getManagedKeyedState()));
    Assert.assertTrue(checkResult(snapKeyRaw.getTaskLocalSnapshot(),taskLocalState.getRawKeyedState()));
    Assert.assertTrue(checkResult(snapOpMan.getTaskLocalSnapshot(),taskLocalState.getManagedOperatorState()));
    Assert.assertTrue(checkResult(snapOpRaw.getTaskLocalSnapshot(),taskLocalState.getRawOperatorState()));
  }
  private <T extends StateObject>boolean checkResult(  T expected,  StateObjectCollection<T> actual){
    if (expected == null) {
      return actual.isEmpty();
    }
    return actual.size() == 1 && expected == actual.iterator().next();
  }
static class PseudoNotDoneFuture<T> extends DoneFuture<T> {
    private boolean done;
    PseudoNotDoneFuture(    T payload){
      super(payload);
      this.done=false;
    }
    @Override public void run(){
      super.run();
      this.done=true;
    }
    @Override public boolean isDone(){
      return done;
    }
  }
}
