static class TestingYarnResourceManager extends YarnResourceManager {
  public AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient;
  public NMClient mockNMClient;
  public TestingYarnResourceManager(  RpcService rpcService,  String resourceManagerEndpointId,  ResourceID resourceId,  Configuration flinkConfig,  Map<String,String> env,  ResourceManagerConfiguration resourceManagerConfiguration,  HighAvailabilityServices highAvailabilityServices,  HeartbeatServices heartbeatServices,  SlotManager slotManager,  MetricRegistry metricRegistry,  JobLeaderIdService jobLeaderIdService,  ClusterInformation clusterInformation,  FatalErrorHandler fatalErrorHandler,  @Nullable String webInterfaceUrl,  AMRMClientAsync<AMRMClient.ContainerRequest> mockResourceManagerClient,  NMClient mockNMClient,  JobManagerMetricGroup jobManagerMetricGroup){
    super(rpcService,resourceManagerEndpointId,resourceId,flinkConfig,env,resourceManagerConfiguration,highAvailabilityServices,heartbeatServices,slotManager,metricRegistry,jobLeaderIdService,clusterInformation,fatalErrorHandler,webInterfaceUrl,jobManagerMetricGroup);
    this.mockNMClient=mockNMClient;
    this.mockResourceManagerClient=mockResourceManagerClient;
  }
  public <T>CompletableFuture<T> runInMainThread(  Callable<T> callable){
    return callAsync(callable,TIMEOUT);
  }
  public MainThreadExecutor getMainThreadExecutorForTesting(){
    return super.getMainThreadExecutor();
  }
  @Override protected AMRMClientAsync<AMRMClient.ContainerRequest> createAndStartResourceManagerClient(  YarnConfiguration yarnConfiguration,  int yarnHeartbeatIntervalMillis,  @Nullable String webInteraceUrl){
    return mockResourceManagerClient;
  }
  @Override protected NMClient createAndStartNodeManagerClient(  YarnConfiguration yarnConfiguration){
    return mockNMClient;
  }
  @Override protected void runAsync(  final Runnable runnable){
    runnable.run();
  }
}
