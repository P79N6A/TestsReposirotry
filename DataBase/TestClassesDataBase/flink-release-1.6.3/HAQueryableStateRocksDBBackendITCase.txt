/** 
 * Several integration tests for queryable state using the  {@link RocksDBStateBackend}.
 */
public class HAQueryableStateRocksDBBackendITCase extends AbstractQueryableStateTestBase {
  private static final int NUM_JMS=2;
  private static final int NUM_TMS=2;
  private static final int NUM_SLOTS_PER_TM=2;
  private static final int QS_PROXY_PORT_RANGE_START=9074;
  private static final int QS_SERVER_PORT_RANGE_START=9079;
  @ClassRule public static TemporaryFolder temporaryFolder=new TemporaryFolder();
  private static TestingServer zkServer;
  private static MiniClusterResource miniClusterResource;
  @Override protected AbstractStateBackend createStateBackend() throws Exception {
    return new RocksDBStateBackend(temporaryFolder.newFolder().toURI().toString());
  }
  @BeforeClass public static void setup() throws Exception {
    zkServer=new TestingServer();
    miniClusterResource=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(getConfig()).setNumberTaskManagers(NUM_TMS).setNumberSlotsPerTaskManager(NUM_SLOTS_PER_TM).build());
    miniClusterResource.before();
    client=new QueryableStateClient("localhost",QS_PROXY_PORT_RANGE_START);
    clusterClient=miniClusterResource.getClusterClient();
  }
  @AfterClass public static void tearDown() throws Exception {
    miniClusterResource.after();
    client.shutdownAndWait();
    zkServer.stop();
    zkServer.close();
  }
  private static Configuration getConfig() throws Exception {
    Configuration config=new Configuration();
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"4m");
    config.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER,NUM_JMS);
    config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,NUM_TMS);
    config.setInteger(TaskManagerOptions.NUM_TASK_SLOTS,NUM_SLOTS_PER_TM);
    config.setInteger(QueryableStateOptions.CLIENT_NETWORK_THREADS,2);
    config.setInteger(QueryableStateOptions.PROXY_NETWORK_THREADS,2);
    config.setInteger(QueryableStateOptions.SERVER_NETWORK_THREADS,2);
    config.setString(QueryableStateOptions.PROXY_PORT_RANGE,QS_PROXY_PORT_RANGE_START + "-" + (QS_PROXY_PORT_RANGE_START + NUM_TMS));
    config.setString(QueryableStateOptions.SERVER_PORT_RANGE,QS_SERVER_PORT_RANGE_START + "-" + (QS_SERVER_PORT_RANGE_START + NUM_TMS));
    config.setBoolean(WebOptions.SUBMIT_ENABLE,false);
    config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,temporaryFolder.newFolder().toString());
    config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM,zkServer.getConnectString());
    config.setString(HighAvailabilityOptions.HA_MODE,"zookeeper");
    return config;
  }
}
