/** 
 * Handler that accepts a json request consisting of a  {@link TestRequestBody}.
 */
public static class MultipartJsonHandler extends AbstractRestHandler<RestfulGateway,TestRequestBody,EmptyResponseBody,EmptyMessageParameters> {
  volatile TestRequestBody lastReceivedRequest=null;
  MultipartJsonHandler(  CompletableFuture<String> localRestAddress,  GatewayRetriever<RestfulGateway> leaderRetriever){
    super(localRestAddress,leaderRetriever,RpcUtils.INF_TIMEOUT,Collections.emptyMap(),MultipartJsonHeaders.INSTANCE);
  }
  @Override protected CompletableFuture<EmptyResponseBody> handleRequest(  @Nonnull HandlerRequest<TestRequestBody,EmptyMessageParameters> request,  @Nonnull RestfulGateway gateway) throws RestHandlerException {
    Collection<Path> uploadedFiles=request.getUploadedFiles().stream().map(File::toPath).collect(Collectors.toList());
    if (!uploadedFiles.isEmpty()) {
      throw new RestHandlerException("This handler should not have received file uploads.",HttpResponseStatus.INTERNAL_SERVER_ERROR);
    }
    this.lastReceivedRequest=request.getRequestBody();
    return CompletableFuture.completedFuture(EmptyResponseBody.getInstance());
  }
private static final class MultipartJsonHeaders extends TestHeadersBase<TestRequestBody> {
    private static final MultipartJsonHeaders INSTANCE=new MultipartJsonHeaders();
    private MultipartJsonHeaders(){
    }
    @Override public Class<TestRequestBody> getRequestClass(){
      return TestRequestBody.class;
    }
    @Override public String getTargetRestEndpointURL(){
      return "/test/upload/json";
    }
    @Override public boolean acceptsFileUploads(){
      return false;
    }
  }
}
