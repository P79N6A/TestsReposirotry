/** 
 * Tests for the  {@link CoLocationConstraint}.
 */
public class CoLocationConstraintTest {
  @Test public void testCreateConstraints(){
    try {
      JobVertexID id1=new JobVertexID();
      JobVertexID id2=new JobVertexID();
      JobVertex vertex1=new JobVertex("vertex1",id1);
      vertex1.setParallelism(2);
      JobVertex vertex2=new JobVertex("vertex2",id2);
      vertex2.setParallelism(3);
      CoLocationGroup group=new CoLocationGroup(vertex1,vertex2);
      AbstractID groupId=group.getId();
      assertNotNull(groupId);
      CoLocationConstraint constraint1=group.getLocationConstraint(0);
      CoLocationConstraint constraint2=group.getLocationConstraint(1);
      CoLocationConstraint constraint3=group.getLocationConstraint(2);
      assertFalse(constraint1 == constraint2);
      assertFalse(constraint1 == constraint3);
      assertFalse(constraint2 == constraint3);
      assertEquals(groupId,constraint1.getGroupId());
      assertEquals(groupId,constraint2.getGroupId());
      assertEquals(groupId,constraint3.getGroupId());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  @Test public void testAssignSlotAndLockLocation(){
    try {
      JobID jid=new JobID();
      JobVertex vertex=new JobVertex("vertex");
      vertex.setParallelism(1);
      SlotSharingGroup sharingGroup=new SlotSharingGroup(vertex.getID());
      SlotSharingGroupAssignment assignment=sharingGroup.getTaskAssignment();
      CoLocationGroup constraintGroup=new CoLocationGroup(vertex);
      CoLocationConstraint constraint=constraintGroup.getLocationConstraint(0);
      assertFalse(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      Instance instance1=SchedulerTestUtils.getRandomInstance(2);
      Instance instance2=SchedulerTestUtils.getRandomInstance(2);
      SharedSlot slot1_1=instance1.allocateSharedSlot(assignment);
      SharedSlot slot1_2=instance1.allocateSharedSlot(assignment);
      SharedSlot slot2_1=instance2.allocateSharedSlot(assignment);
      SharedSlot slot2_2=instance2.allocateSharedSlot(assignment);
      assertFalse(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      constraint.setSharedSlot(slot1_1);
      assertFalse(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      try {
        constraint.getLocation();
        fail("should throw an IllegalStateException");
      }
 catch (      IllegalStateException e) {
      }
catch (      Exception e) {
        fail("wrong exception, should be IllegalStateException");
      }
      constraint.setSharedSlot(slot2_1);
      assertTrue(slot1_1.isReleased());
      assertFalse(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      constraint.setSharedSlot(slot2_1);
      assertFalse(slot2_1.isReleased());
      assertFalse(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      constraint.lockLocation();
      assertTrue(constraint.isAssigned());
      assertTrue(constraint.isAssignedAndAlive());
      assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
      slot2_1.releaseSlot();
      assertTrue(constraint.isAssigned());
      assertFalse(constraint.isAssignedAndAlive());
      assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
      try {
        constraint.setSharedSlot(slot1_2);
        fail("should throw an IllegalArgumentException");
      }
 catch (      IllegalArgumentException e) {
      }
catch (      Exception e) {
        fail("wrong exception, should be IllegalArgumentException");
      }
      constraint.setSharedSlot(slot2_2);
      assertTrue(constraint.isAssigned());
      assertTrue(constraint.isAssignedAndAlive());
      assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
