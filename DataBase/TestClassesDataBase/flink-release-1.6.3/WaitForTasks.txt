/** 
 * A consumer which counts the number of tasks for which it has been called and completes a future upon reaching the number of tasks to wait for.
 */
public static class WaitForTasks implements Consumer<ExecutionAttemptID> {
  private final int tasksToWaitFor;
  private final CompletableFuture<Boolean> allTasksReceived;
  private final AtomicInteger counter;
  public WaitForTasks(  int tasksToWaitFor){
    this.tasksToWaitFor=tasksToWaitFor;
    this.allTasksReceived=new CompletableFuture<>();
    this.counter=new AtomicInteger();
  }
  public CompletableFuture<Boolean> getFuture(){
    return allTasksReceived;
  }
  @Override public void accept(  ExecutionAttemptID executionAttemptID){
    if (counter.incrementAndGet() >= tasksToWaitFor) {
      allTasksReceived.complete(true);
    }
  }
}
