/** 
 * Tests for the  {@link CliClient}.
 */
public class CliClientTest extends TestLogger {
  private static final String INSERT_INTO_STATEMENT="INSERT INTO MyTable SELECT * FROM MyOtherTable";
  private static final String SELECT_STATEMENT="SELECT * FROM MyOtherTable";
  @Test public void testUpdateSubmission(){
    verifyUpdateSubmission(INSERT_INTO_STATEMENT,false,false);
  }
  @Test public void testFailedUpdateSubmission(){
    verifyUpdateSubmission(INSERT_INTO_STATEMENT,true,true);
    verifyUpdateSubmission(SELECT_STATEMENT,false,true);
  }
  private void verifyUpdateSubmission(  String statement,  boolean failExecution,  boolean testFailure){
    final SessionContext context=new SessionContext("test-session",new Environment());
    final MockExecutor mockExecutor=new MockExecutor();
    mockExecutor.failExecution=failExecution;
    final CliClient client=new CliClient(context,mockExecutor);
    if (testFailure) {
      assertFalse(client.submitUpdate(statement));
    }
 else {
      assertTrue(client.submitUpdate(statement));
      assertEquals(statement,mockExecutor.receivedStatement);
      assertEquals(context,mockExecutor.receivedContext);
    }
  }
private static class MockExecutor implements Executor {
    public boolean failExecution;
    public SessionContext receivedContext;
    public String receivedStatement;
    @Override public void start() throws SqlExecutionException {
    }
    @Override public Map<String,String> getSessionProperties(    SessionContext session) throws SqlExecutionException {
      return null;
    }
    @Override public List<String> listTables(    SessionContext session) throws SqlExecutionException {
      return null;
    }
    @Override public List<String> listUserDefinedFunctions(    SessionContext session) throws SqlExecutionException {
      return null;
    }
    @Override public TableSchema getTableSchema(    SessionContext session,    String name) throws SqlExecutionException {
      return null;
    }
    @Override public String explainStatement(    SessionContext session,    String statement) throws SqlExecutionException {
      return null;
    }
    @Override public ResultDescriptor executeQuery(    SessionContext session,    String query) throws SqlExecutionException {
      return null;
    }
    @Override public TypedResult<List<Tuple2<Boolean,Row>>> retrieveResultChanges(    SessionContext session,    String resultId) throws SqlExecutionException {
      return null;
    }
    @Override public TypedResult<Integer> snapshotResult(    SessionContext session,    String resultId,    int pageSize) throws SqlExecutionException {
      return null;
    }
    @Override public List<Row> retrieveResultPage(    String resultId,    int page) throws SqlExecutionException {
      return null;
    }
    @Override public void cancelQuery(    SessionContext session,    String resultId) throws SqlExecutionException {
    }
    @Override public ProgramTargetDescriptor executeUpdate(    SessionContext session,    String statement) throws SqlExecutionException {
      receivedContext=session;
      receivedStatement=statement;
      if (failExecution) {
        throw new SqlExecutionException("Fail execution.");
      }
      return new ProgramTargetDescriptor("testClusterId","testJobId","http://testcluster:1234");
    }
    @Override public void stop(    SessionContext session){
    }
  }
}
