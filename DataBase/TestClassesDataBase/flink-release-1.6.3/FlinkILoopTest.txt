/** 
 * Integration tests for  {@link FlinkILoop}.
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(PlanExecutor.class) public class FlinkILoopTest extends TestLogger {
  @Test public void testConfigurationForwarding() throws Exception {
    Configuration configuration=new Configuration();
    configuration.setString("foobar","foobar");
    FlinkILoop flinkILoop=new FlinkILoop("localhost",6123,configuration,Option.<String[]>empty());
    final TestPlanExecutor testPlanExecutor=new TestPlanExecutor();
    PowerMockito.mockStatic(PlanExecutor.class);
    BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(),Matchers.anyInt(),Matchers.any(Configuration.class),Matchers.any(java.util.List.class),Matchers.any(java.util.List.class))).willAnswer(new Answer<PlanExecutor>(){
      @Override public PlanExecutor answer(      InvocationOnMock invocation) throws Throwable {
        testPlanExecutor.setHost((String)invocation.getArguments()[0]);
        testPlanExecutor.setPort((Integer)invocation.getArguments()[1]);
        testPlanExecutor.setConfiguration((Configuration)invocation.getArguments()[2]);
        testPlanExecutor.setJars((List<String>)invocation.getArguments()[3]);
        testPlanExecutor.setGlobalClasspaths((List<String>)invocation.getArguments()[4]);
        return testPlanExecutor;
      }
    }
);
    Settings settings=new Settings();
    ((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true);
    flinkILoop.settings_$eq(settings);
    flinkILoop.createInterpreter();
    ExecutionEnvironment env=flinkILoop.scalaBenv().getJavaEnv();
    env.fromElements(1).output(new DiscardingOutputFormat<Integer>());
    env.execute("Test job");
    Configuration forwardedConfiguration=testPlanExecutor.getConfiguration();
    assertEquals(configuration,forwardedConfiguration);
  }
  @Test public void testConfigurationForwardingStreamEnvironment(){
    Configuration configuration=new Configuration();
    configuration.setString("foobar","foobar");
    FlinkILoop flinkILoop=new FlinkILoop("localhost",6123,configuration,Option.<String[]>empty());
    StreamExecutionEnvironment streamEnv=flinkILoop.scalaSenv().getJavaEnv();
    assertTrue(streamEnv instanceof RemoteStreamEnvironment);
    RemoteStreamEnvironment remoteStreamEnv=(RemoteStreamEnvironment)streamEnv;
    Configuration forwardedConfiguration=remoteStreamEnv.getClientConfiguration();
    assertEquals(configuration,forwardedConfiguration);
  }
static class TestPlanExecutor extends PlanExecutor {
    private String host;
    private int port;
    private Configuration configuration;
    private List<String> jars;
    private List<String> globalClasspaths;
    @Override public void start() throws Exception {
    }
    @Override public void stop() throws Exception {
    }
    @Override public boolean isRunning(){
      return false;
    }
    @Override public JobExecutionResult executePlan(    Plan plan) throws Exception {
      return null;
    }
    @Override public String getOptimizerPlanAsJSON(    Plan plan) throws Exception {
      return null;
    }
    @Override public void endSession(    JobID jobID) throws Exception {
    }
    public String getHost(){
      return host;
    }
    public void setHost(    String host){
      this.host=host;
    }
    public int getPort(){
      return port;
    }
    public void setPort(    int port){
      this.port=port;
    }
    public Configuration getConfiguration(){
      return configuration;
    }
    public void setConfiguration(    Configuration configuration){
      this.configuration=configuration;
    }
    public List<String> getJars(){
      return jars;
    }
    public void setJars(    List<String> jars){
      this.jars=jars;
    }
    public List<String> getGlobalClasspaths(){
      return globalClasspaths;
    }
    public void setGlobalClasspaths(    List<String> globalClasspaths){
      this.globalClasspaths=globalClasspaths;
    }
  }
}
