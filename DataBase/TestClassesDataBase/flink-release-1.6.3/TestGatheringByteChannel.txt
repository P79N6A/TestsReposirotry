static final class TestGatheringByteChannel implements GatheringByteChannel {
  private final ByteArrayOutputStream out=new ByteArrayOutputStream();
  private final WritableByteChannel channel=Channels.newChannel(out);
  private final int limit;
  TestGatheringByteChannel(  int limit){
    this.limit=limit;
  }
  TestGatheringByteChannel(){
    this(Integer.MAX_VALUE);
  }
  @Override public long write(  ByteBuffer[] srcs,  int offset,  int length) throws IOException {
    long written=0;
    for (; offset < length; offset++) {
      written+=write(srcs[offset]);
      if (written >= limit) {
        break;
      }
    }
    return written;
  }
  @Override public long write(  ByteBuffer[] srcs) throws IOException {
    return write(srcs,0,srcs.length);
  }
  @Override public int write(  ByteBuffer src) throws IOException {
    int oldLimit=src.limit();
    if (limit < src.remaining()) {
      src.limit(src.position() + limit);
    }
    int w=channel.write(src);
    src.limit(oldLimit);
    return w;
  }
  @Override public boolean isOpen(){
    return channel.isOpen();
  }
  @Override public void close() throws IOException {
    channel.close();
  }
  public byte[] writtenBytes(){
    return out.toByteArray();
  }
}
