/** 
 * Tests to ensure that the BlobServer properly starts on a specified range of available ports.
 */
public class BlobServerRangeTest extends TestLogger {
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  /** 
 * Start blob server on 0 = pick an ephemeral port.
 */
  @Test public void testOnEphemeralPort() throws IOException {
    Configuration conf=new Configuration();
    conf.setString(BlobServerOptions.PORT,"0");
    conf.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
    BlobServer server=new BlobServer(conf,new VoidBlobStore());
    server.start();
    server.close();
  }
  /** 
 * Try allocating on an unavailable port.
 */
  @Test(expected=IOException.class) public void testPortUnavailable() throws IOException {
    ServerSocket socket=null;
    try {
      socket=new ServerSocket(0);
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.fail("An exception was thrown while preparing the test " + e.getMessage());
    }
    Configuration conf=new Configuration();
    conf.setString(BlobServerOptions.PORT,String.valueOf(socket.getLocalPort()));
    conf.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
    try {
      BlobServer server=new BlobServer(conf,new VoidBlobStore());
      server.start();
    }
  finally {
      socket.close();
    }
  }
  /** 
 * Give the BlobServer a choice of three ports, where two of them are allocated.
 */
  @Test public void testOnePortAvailable() throws IOException {
    int numAllocated=2;
    ServerSocket[] sockets=new ServerSocket[numAllocated];
    for (int i=0; i < numAllocated; i++) {
      try {
        sockets[i]=new ServerSocket(0);
      }
 catch (      IOException e) {
        e.printStackTrace();
        Assert.fail("An exception was thrown while preparing the test " + e.getMessage());
      }
    }
    int availablePort=NetUtils.getAvailablePort();
    Configuration conf=new Configuration();
    conf.setString(BlobServerOptions.PORT,sockets[0].getLocalPort() + "," + sockets[1].getLocalPort()+ ","+ availablePort);
    conf.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
    try {
      BlobServer server=new BlobServer(conf,new VoidBlobStore());
      server.start();
      Assert.assertEquals(availablePort,server.getPort());
      server.close();
    }
  finally {
      for (int i=0; i < numAllocated; ++i) {
        sockets[i].close();
      }
    }
  }
}
