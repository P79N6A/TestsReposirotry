private static final class StatefulWindowFunction extends RichWindowFunction<Tuple2<Integer,Integer>,Integer,Tuple,GlobalWindow> {
  private static final long serialVersionUID=-7236313076792964055L;
  private final ExecutionMode mode;
  private transient ListState<Integer> state;
  private boolean applyCalled=false;
  private StatefulWindowFunction(  ExecutionMode mode){
    this.mode=mode;
  }
  @Override public void open(  Configuration config){
    this.state=getRuntimeContext().getListState(new ListStateDescriptor<>("values",Integer.class));
  }
  @Override public void apply(  Tuple key,  GlobalWindow window,  Iterable<Tuple2<Integer,Integer>> values,  Collector<Integer> out) throws Exception {
    applyCalled=true;
switch (mode) {
case GENERATE:
      for (      Tuple2<Integer,Integer> value : values) {
        state.add(value.f1);
      }
    break;
case MIGRATE:
case RESTORE:
  Iterator<Tuple2<Integer,Integer>> input=values.iterator();
Iterator<Integer> restored=state.get().iterator();
while (input.hasNext() && restored.hasNext()) {
Tuple2<Integer,Integer> value=input.next();
Integer rValue=restored.next();
Assert.assertEquals(rValue,value.f1);
}
Assert.assertEquals(restored.hasNext(),input.hasNext());
}
}
@Override public void close(){
Assert.assertTrue("Apply was never called.",applyCalled);
}
}
