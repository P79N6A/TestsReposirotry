/** 
 * Test of  {@link KeyGroupPartitionedPriorityQueue} powered by a {@link RocksDBCachingPriorityQueueSet}.
 */
public class KeyGroupPartitionedPriorityQueueWithRocksDBStoreTest extends InternalPriorityQueueTestBase {
  @Rule public final RocksDBResource rocksDBResource=new RocksDBResource();
  @Override protected InternalPriorityQueue<TestElement> newPriorityQueue(  int initialCapacity){
    return new KeyGroupPartitionedPriorityQueue<>(KEY_EXTRACTOR_FUNCTION,TEST_ELEMENT_PRIORITY_COMPARATOR,newFactory(),KEY_GROUP_RANGE,KEY_GROUP_RANGE.getNumberOfKeyGroups());
  }
  @Override protected boolean testSetSemanticsAgainstDuplicateElements(){
    return true;
  }
  private KeyGroupPartitionedPriorityQueue.PartitionQueueSetFactory<TestElement,RocksDBCachingPriorityQueueSet<TestElement>> newFactory(){
    return (keyGroupId,numKeyGroups,keyExtractorFunction,elementComparator) -> {
      ByteArrayDataOutputView outputStreamWithPos=new ByteArrayDataOutputView();
      ByteArrayDataInputView inputStreamWithPos=new ByteArrayDataInputView();
      int keyGroupPrefixBytes=RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numKeyGroups);
      TreeOrderedSetCache orderedSetCache=new TreeOrderedSetCache(32);
      return new RocksDBCachingPriorityQueueSet<>(keyGroupId,keyGroupPrefixBytes,rocksDBResource.getRocksDB(),rocksDBResource.getDefaultColumnFamily(),TestElementSerializer.INSTANCE,outputStreamWithPos,inputStreamWithPos,rocksDBResource.getBatchWrapper(),orderedSetCache);
    }
;
  }
}
