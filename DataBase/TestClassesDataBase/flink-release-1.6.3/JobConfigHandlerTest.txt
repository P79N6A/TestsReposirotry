/** 
 * Tests for the JobConfigHandler.
 */
public class JobConfigHandlerTest extends TestLogger {
  @Test public void testArchiver() throws Exception {
    JsonArchivist archivist=new JobConfigHandler.JobConfigJsonArchivist();
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(originalJob);
    Assert.assertEquals(1,archives.size());
    ArchivedJson archive=archives.iterator().next();
    Assert.assertEquals("/jobs/" + originalJob.getJobID() + "/config",archive.getPath());
    compareJobConfig(originalJob,archive.getJson());
  }
  @Test public void testGetPaths(){
    JobConfigHandler handler=new JobConfigHandler(mock(ExecutionGraphCache.class),Executors.directExecutor());
    String[] paths=handler.getPaths();
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals("/jobs/:jobid/config",paths[0]);
  }
  public void testJsonGeneration() throws Exception {
    AccessExecutionGraph originalJob=ArchivedJobGenerationUtils.getTestJob();
    String answer=JobConfigHandler.createJobConfigJson(originalJob);
    compareJobConfig(originalJob,answer);
  }
  private static void compareJobConfig(  AccessExecutionGraph originalJob,  String answer) throws IOException {
    JsonNode job=ArchivedJobGenerationUtils.MAPPER.readTree(answer);
    Assert.assertEquals(originalJob.getJobID().toString(),job.get("jid").asText());
    Assert.assertEquals(originalJob.getJobName(),job.get("name").asText());
    ArchivedExecutionConfig originalConfig=originalJob.getArchivedExecutionConfig();
    JsonNode config=job.get("execution-config");
    Assert.assertEquals(originalConfig.getExecutionMode(),config.get("execution-mode").asText());
    Assert.assertEquals(originalConfig.getRestartStrategyDescription(),config.get("restart-strategy").asText());
    Assert.assertEquals(originalConfig.getParallelism(),config.get("job-parallelism").asInt());
    Assert.assertEquals(originalConfig.getObjectReuseEnabled(),config.get("object-reuse-mode").asBoolean());
    Map<String,String> originalUserConfig=originalConfig.getGlobalJobParameters();
    JsonNode userConfig=config.get("user-config");
    for (    Map.Entry<String,String> originalEntry : originalUserConfig.entrySet()) {
      Assert.assertEquals(originalEntry.getValue(),userConfig.get(originalEntry.getKey()).asText());
    }
  }
}
