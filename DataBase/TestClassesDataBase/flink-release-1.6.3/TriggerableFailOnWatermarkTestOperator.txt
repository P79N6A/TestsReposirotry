/** 
 * An operator that can be triggered whether or not to expect watermarks forwarded to it, toggled by letting it process special trigger marker records. <p>If it receives a watermark when it's not expecting one, it'll throw an exception and fail.
 */
private static class TriggerableFailOnWatermarkTestOperator extends AbstractStreamOperator<String> implements OneInputStreamOperator<String,String> {
  private static final long serialVersionUID=2048954179291813243L;
  public static final String EXPECT_FORWARDED_WATERMARKS_MARKER="EXPECT_WATERMARKS";
  public static final String NO_FORWARDED_WATERMARKS_MARKER="NO_WATERMARKS";
  protected boolean expectForwardedWatermarks;
  @Override public void processElement(  StreamRecord<String> element) throws Exception {
    output.collect(element);
    if (element.getValue().equals(EXPECT_FORWARDED_WATERMARKS_MARKER)) {
      this.expectForwardedWatermarks=true;
    }
 else     if (element.getValue().equals(NO_FORWARDED_WATERMARKS_MARKER)) {
      this.expectForwardedWatermarks=false;
    }
 else {
      handleElement(element);
    }
  }
  @Override public void processWatermark(  Watermark mark) throws Exception {
    if (!expectForwardedWatermarks) {
      throw new Exception("Received a " + mark + ", but this operator should not be forwarded watermarks.");
    }
 else {
      handleWatermark(mark);
    }
  }
  protected void handleElement(  StreamRecord<String> element){
  }
  protected void handleWatermark(  Watermark mark){
    output.emitWatermark(mark);
  }
}
