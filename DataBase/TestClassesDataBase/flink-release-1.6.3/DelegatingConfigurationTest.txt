/** 
 * Tests for the  {@link DelegatingConfiguration}.
 */
public class DelegatingConfigurationTest {
  @Test public void testIfDelegatesImplementAllMethods() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    Method[] confMethods=Configuration.class.getDeclaredMethods();
    Method[] delegateMethods=DelegatingConfiguration.class.getDeclaredMethods();
    for (    Method configurationMethod : confMethods) {
      if (!Modifier.isPublic(configurationMethod.getModifiers())) {
        continue;
      }
      boolean hasMethod=false;
      lookForWrapper:       for (      Method wrapperMethod : delegateMethods) {
        if (configurationMethod.getName().equals(wrapperMethod.getName())) {
          Class<?>[] wrapperMethodParams=wrapperMethod.getParameterTypes();
          Class<?>[] configMethodParams=configurationMethod.getParameterTypes();
          if (wrapperMethodParams.length != configMethodParams.length) {
            continue;
          }
          for (int i=0; i < wrapperMethodParams.length; i++) {
            if (wrapperMethodParams[i] != configMethodParams[i]) {
              continue lookForWrapper;
            }
          }
          hasMethod=true;
          break;
        }
      }
      assertTrue("Configuration method '" + configurationMethod.getName() + "' has not been wrapped correctly in DelegatingConfiguration wrapper",hasMethod);
    }
  }
  @Test public void testDelegationConfigurationWithNullPrefix(){
    Configuration backingConf=new Configuration();
    backingConf.setValueInternal("test-key","value");
    DelegatingConfiguration configuration=new DelegatingConfiguration(backingConf,null);
    Set<String> keySet=configuration.keySet();
    assertEquals(keySet,backingConf.keySet());
  }
  @Test public void testDelegationConfigurationWithPrefix(){
    String prefix="pref-";
    String expectedKey="key";
    Configuration backingConf=new Configuration();
    backingConf.setValueInternal(prefix + expectedKey,"value");
    DelegatingConfiguration configuration=new DelegatingConfiguration(backingConf,prefix);
    Set<String> keySet=configuration.keySet();
    assertEquals(keySet.size(),1);
    assertEquals(keySet.iterator().next(),expectedKey);
    backingConf=new Configuration();
    backingConf.setValueInternal("test-key","value");
    configuration=new DelegatingConfiguration(backingConf,prefix);
    keySet=configuration.keySet();
    assertTrue(keySet.isEmpty());
  }
}
