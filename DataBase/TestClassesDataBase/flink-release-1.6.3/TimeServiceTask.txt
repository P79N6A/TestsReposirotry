/** 
 * A task that register a processing time service callback.
 */
public static class TimeServiceTask extends StreamTask<String,AbstractStreamOperator<String>> {
  private final List<ClassLoader> classLoaders=Collections.synchronizedList(new ArrayList<>());
  public TimeServiceTask(  Environment env){
    super(env,null);
  }
  public List<ClassLoader> getClassLoaders(){
    return classLoaders;
  }
  @Override protected void init() throws Exception {
    getProcessingTimeService().registerTimer(0,new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp) throws Exception {
        classLoaders.add(Thread.currentThread().getContextClassLoader());
        syncLatch.trigger();
      }
    }
);
  }
  @Override protected void run() throws Exception {
    syncLatch.await();
  }
  @Override protected void cleanup() throws Exception {
  }
  @Override protected void cancelTask() throws Exception {
  }
}
