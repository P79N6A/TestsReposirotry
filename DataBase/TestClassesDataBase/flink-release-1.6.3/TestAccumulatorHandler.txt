private class TestAccumulatorHandler extends TestHandler<EmptyRequestBody,JobAccumulatorsInfo,JobAccumulatorsMessageParameters> {
  public TestAccumulatorHandler(){
    super(JobAccumulatorsHeaders.getInstance());
  }
  @Override protected CompletableFuture<JobAccumulatorsInfo> handleRequest(  @Nonnull HandlerRequest<EmptyRequestBody,JobAccumulatorsMessageParameters> request,  @Nonnull DispatcherGateway gateway) throws RestHandlerException {
    JobAccumulatorsInfo accumulatorsInfo;
    List<Boolean> queryParams=request.getQueryParameter(AccumulatorsIncludeSerializedValueQueryParameter.class);
    final boolean includeSerializedValue;
    if (!queryParams.isEmpty()) {
      includeSerializedValue=queryParams.get(0);
    }
 else {
      includeSerializedValue=false;
    }
    List<JobAccumulatorsInfo.UserTaskAccumulator> userTaskAccumulators=new ArrayList<>(1);
    userTaskAccumulators.add(new JobAccumulatorsInfo.UserTaskAccumulator("testName","testType","testValue"));
    if (includeSerializedValue) {
      Map<String,SerializedValue<OptionalFailure<Object>>> serializedUserTaskAccumulators=new HashMap<>(1);
      try {
        serializedUserTaskAccumulators.put("testKey",new SerializedValue<>(OptionalFailure.of("testValue")));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      accumulatorsInfo=new JobAccumulatorsInfo(Collections.emptyList(),userTaskAccumulators,serializedUserTaskAccumulators);
    }
 else {
      accumulatorsInfo=new JobAccumulatorsInfo(Collections.emptyList(),userTaskAccumulators,Collections.emptyMap());
    }
    return CompletableFuture.completedFuture(accumulatorsInfo);
  }
}
