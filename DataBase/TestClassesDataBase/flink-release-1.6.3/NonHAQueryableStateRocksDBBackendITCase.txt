/** 
 * Several integration tests for queryable state using the  {@link RocksDBStateBackend}.
 */
public class NonHAQueryableStateRocksDBBackendITCase extends AbstractQueryableStateTestBase {
  private static final int NUM_TMS=2;
  private static final int NUM_SLOTS_PER_TM=2;
  private static final int QS_PROXY_PORT_RANGE_START=9094;
  private static final int QS_SERVER_PORT_RANGE_START=9099;
  @Rule public TemporaryFolder temporaryFolder=new TemporaryFolder();
  @ClassRule public static final MiniClusterResource MINI_CLUSTER_RESOURCE=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(getConfig()).setNumberTaskManagers(NUM_TMS).setNumberSlotsPerTaskManager(NUM_SLOTS_PER_TM).build());
  @Override protected AbstractStateBackend createStateBackend() throws Exception {
    return new RocksDBStateBackend(temporaryFolder.newFolder().toURI().toString());
  }
  @BeforeClass public static void setup() throws Exception {
    client=new QueryableStateClient("localhost",QS_PROXY_PORT_RANGE_START);
    clusterClient=MINI_CLUSTER_RESOURCE.getClusterClient();
  }
  @AfterClass public static void tearDown(){
    client.shutdownAndWait();
  }
  private static Configuration getConfig(){
    Configuration config=new Configuration();
    config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE,"4m");
    config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,NUM_TMS);
    config.setInteger(TaskManagerOptions.NUM_TASK_SLOTS,NUM_SLOTS_PER_TM);
    config.setInteger(QueryableStateOptions.CLIENT_NETWORK_THREADS,1);
    config.setInteger(QueryableStateOptions.PROXY_NETWORK_THREADS,1);
    config.setInteger(QueryableStateOptions.SERVER_NETWORK_THREADS,1);
    config.setString(QueryableStateOptions.PROXY_PORT_RANGE,QS_PROXY_PORT_RANGE_START + "-" + (QS_PROXY_PORT_RANGE_START + NUM_TMS));
    config.setString(QueryableStateOptions.SERVER_PORT_RANGE,QS_SERVER_PORT_RANGE_START + "-" + (QS_SERVER_PORT_RANGE_START + NUM_TMS));
    config.setBoolean(WebOptions.SUBMIT_ENABLE,false);
    return config;
  }
}
