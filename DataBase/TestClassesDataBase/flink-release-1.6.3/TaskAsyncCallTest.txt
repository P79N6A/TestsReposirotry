public class TaskAsyncCallTest extends TestLogger {
  /** 
 * Number of expected checkpoints. 
 */
  private static int numCalls;
  /** 
 * Triggered at the beginning of  {@link CheckpointsInOrderInvokable#invoke()}. 
 */
  private static OneShotLatch awaitLatch;
  /** 
 * Triggered when  {@link CheckpointsInOrderInvokable#triggerCheckpoint(CheckpointMetaData,CheckpointOptions)}was called  {@link #numCalls} times.
 */
  private static OneShotLatch triggerLatch;
  /** 
 * Triggered when  {@link CheckpointsInOrderInvokable#notifyCheckpointComplete(long)}was called  {@link #numCalls} times.
 */
  private static OneShotLatch notifyCheckpointCompleteLatch;
  /** 
 * Triggered on  {@link ContextClassLoaderInterceptingInvokable#stop()}}. 
 */
  private static OneShotLatch stopLatch;
  private static final List<ClassLoader> classLoaders=Collections.synchronizedList(new ArrayList<>());
  @Before public void createQueuesAndActors(){
    numCalls=1000;
    awaitLatch=new OneShotLatch();
    triggerLatch=new OneShotLatch();
    notifyCheckpointCompleteLatch=new OneShotLatch();
    stopLatch=new OneShotLatch();
    classLoaders.clear();
  }
  @Test public void testCheckpointCallsInOrder() throws Exception {
    Task task=createTask(CheckpointsInOrderInvokable.class);
    try (TaskCleaner ignored=new TaskCleaner(task)){
      task.startTaskThread();
      awaitLatch.await();
      for (int i=1; i <= numCalls; i++) {
        task.triggerCheckpointBarrier(i,156865867234L,CheckpointOptions.forCheckpointWithDefaultLocation());
      }
      triggerLatch.await();
      assertFalse(task.isCanceledOrFailed());
      ExecutionState currentState=task.getExecutionState();
      assertThat(currentState,isOneOf(ExecutionState.RUNNING,ExecutionState.FINISHED));
    }
   }
  @Test public void testMixedAsyncCallsInOrder() throws Exception {
    Task task=createTask(CheckpointsInOrderInvokable.class);
    try (TaskCleaner ignored=new TaskCleaner(task)){
      task.startTaskThread();
      awaitLatch.await();
      for (int i=1; i <= numCalls; i++) {
        task.triggerCheckpointBarrier(i,156865867234L,CheckpointOptions.forCheckpointWithDefaultLocation());
        task.notifyCheckpointComplete(i);
      }
      triggerLatch.await();
      assertFalse(task.isCanceledOrFailed());
      ExecutionState currentState=task.getExecutionState();
      assertThat(currentState,isOneOf(ExecutionState.RUNNING,ExecutionState.FINISHED));
    }
   }
  @Test public void testThrowExceptionIfStopInvokedWithNotStoppableTask() throws Exception {
    Task task=createTask(CheckpointsInOrderInvokable.class);
    try (TaskCleaner ignored=new TaskCleaner(task)){
      task.startTaskThread();
      awaitLatch.await();
      try {
        task.stopExecution();
        fail("Expected exception not thrown");
      }
 catch (      UnsupportedOperationException e) {
        assertThat(e.getMessage(),containsString("Stopping not supported by task"));
      }
    }
   }
  /** 
 * Asserts that  {@link AbstractInvokable#triggerCheckpoint(CheckpointMetaData,CheckpointOptions)}, {@link AbstractInvokable#notifyCheckpointComplete(long)}, and  {@link StoppableTask#stop()} areinvoked by a thread whose context class loader is set to the user code class loader.
 */
  @Test public void testSetsUserCodeClassLoader() throws Exception {
    numCalls=1;
    Task task=createTask(ContextClassLoaderInterceptingInvokable.class);
    try (TaskCleaner ignored=new TaskCleaner(task)){
      task.startTaskThread();
      awaitLatch.await();
      task.triggerCheckpointBarrier(1,1,CheckpointOptions.forCheckpointWithDefaultLocation());
      task.notifyCheckpointComplete(1);
      task.stopExecution();
      triggerLatch.await();
      notifyCheckpointCompleteLatch.await();
      stopLatch.await();
      assertThat(classLoaders,hasSize(greaterThanOrEqualTo(3)));
      assertThat(classLoaders,everyItem(instanceOf(TestUserCodeClassLoader.class)));
    }
   }
  private Task createTask(  Class<? extends AbstractInvokable> invokableClass) throws Exception {
    BlobCacheService blobService=new BlobCacheService(mock(PermanentBlobCache.class),mock(TransientBlobCache.class));
    LibraryCacheManager libCache=mock(LibraryCacheManager.class);
    when(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());
    ResultPartitionManager partitionManager=mock(ResultPartitionManager.class);
    ResultPartitionConsumableNotifier consumableNotifier=new NoOpResultPartitionConsumableNotifier();
    PartitionProducerStateChecker partitionProducerStateChecker=mock(PartitionProducerStateChecker.class);
    Executor executor=mock(Executor.class);
    TaskEventDispatcher taskEventDispatcher=mock(TaskEventDispatcher.class);
    NetworkEnvironment networkEnvironment=mock(NetworkEnvironment.class);
    when(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);
    when(networkEnvironment.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC);
    when(networkEnvironment.createKvStateTaskRegistry(any(JobID.class),any(JobVertexID.class))).thenReturn(mock(TaskKvStateRegistry.class));
    when(networkEnvironment.getTaskEventDispatcher()).thenReturn(taskEventDispatcher);
    TaskMetricGroup taskMetricGroup=mock(TaskMetricGroup.class);
    when(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));
    JobInformation jobInformation=new JobInformation(new JobID(),"Job Name",new SerializedValue<>(new ExecutionConfig()),new Configuration(),Collections.emptyList(),Collections.emptyList());
    TaskInformation taskInformation=new TaskInformation(new JobVertexID(),"Test Task",1,1,invokableClass.getName(),new Configuration());
    return new Task(jobInformation,taskInformation,new ExecutionAttemptID(),new AllocationID(),0,0,Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),0,mock(MemoryManager.class),mock(IOManager.class),networkEnvironment,mock(BroadcastVariableManager.class),new TestTaskStateManager(),mock(TaskManagerActions.class),mock(InputSplitProvider.class),mock(CheckpointResponder.class),blobService,libCache,mock(FileCache.class),new TestingTaskManagerRuntimeInfo(),taskMetricGroup,consumableNotifier,partitionProducerStateChecker,executor);
  }
public static class CheckpointsInOrderInvokable extends AbstractInvokable {
    private volatile long lastCheckpointId=0;
    private volatile Exception error;
    public CheckpointsInOrderInvokable(    Environment environment){
      super(environment);
    }
    @Override public void invoke() throws Exception {
      awaitLatch.trigger();
synchronized (this) {
        while (error == null) {
          wait();
        }
      }
      if (error != null) {
        triggerLatch.trigger();
        notifyCheckpointCompleteLatch.trigger();
        stopLatch.trigger();
        throw error;
      }
    }
    @Override public boolean triggerCheckpoint(    CheckpointMetaData checkpointMetaData,    CheckpointOptions checkpointOptions){
      lastCheckpointId++;
      if (checkpointMetaData.getCheckpointId() == lastCheckpointId) {
        if (lastCheckpointId == numCalls) {
          triggerLatch.trigger();
        }
      }
 else       if (this.error == null) {
        this.error=new Exception("calls out of order");
synchronized (this) {
          notifyAll();
        }
      }
      return true;
    }
    @Override public void triggerCheckpointOnBarrier(    CheckpointMetaData checkpointMetaData,    CheckpointOptions checkpointOptions,    CheckpointMetrics checkpointMetrics) throws Exception {
      throw new UnsupportedOperationException("Should not be called");
    }
    @Override public void abortCheckpointOnBarrier(    long checkpointId,    Throwable cause){
      throw new UnsupportedOperationException("Should not be called");
    }
    @Override public void notifyCheckpointComplete(    long checkpointId){
      if (checkpointId != lastCheckpointId && this.error == null) {
        this.error=new Exception("calls out of order");
synchronized (this) {
          notifyAll();
        }
      }
 else       if (lastCheckpointId == numCalls) {
        notifyCheckpointCompleteLatch.trigger();
      }
    }
  }
  /** 
 * This is an  {@link AbstractInvokable} that stores the context class loader of the invokingthread in a static field so that tests can assert on the class loader instances.
 * @see #testSetsUserCodeClassLoader()
 */
public static class ContextClassLoaderInterceptingInvokable extends CheckpointsInOrderInvokable implements StoppableTask {
    public ContextClassLoaderInterceptingInvokable(    Environment environment){
      super(environment);
    }
    @Override public boolean triggerCheckpoint(    CheckpointMetaData checkpointMetaData,    CheckpointOptions checkpointOptions){
      classLoaders.add(Thread.currentThread().getContextClassLoader());
      return super.triggerCheckpoint(checkpointMetaData,checkpointOptions);
    }
    @Override public void notifyCheckpointComplete(    long checkpointId){
      classLoaders.add(Thread.currentThread().getContextClassLoader());
      super.notifyCheckpointComplete(checkpointId);
    }
    @Override public void stop(){
      classLoaders.add(Thread.currentThread().getContextClassLoader());
      stopLatch.trigger();
    }
  }
  /** 
 * A  {@link ClassLoader} that delegates everything to {@link ClassLoader#getSystemClassLoader()}.
 * @see #testSetsUserCodeClassLoader()
 */
private static class TestUserCodeClassLoader extends ClassLoader {
    public TestUserCodeClassLoader(){
      super(ClassLoader.getSystemClassLoader());
    }
  }
private static class TaskCleaner implements AutoCloseable {
    private final Task task;
    private TaskCleaner(    Task task){
      this.task=task;
    }
    @Override public void close() throws Exception {
      task.cancelExecution();
      task.getExecutingThread().join(5000);
    }
  }
}
