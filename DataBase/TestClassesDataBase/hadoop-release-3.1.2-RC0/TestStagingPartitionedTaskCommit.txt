/** 
 * Mocking test of the partitioned committer. 
 */
public class TestStagingPartitionedTaskCommit extends StagingTestBase.TaskCommitterTest<PartitionedStagingCommitter> {
  @Override PartitionedStagingCommitter newJobCommitter() throws IOException {
    return new PartitionedStagingCommitter(OUTPUT_PATH,createTaskAttemptForJob());
  }
  @Override PartitionedStagingCommitter newTaskCommitter() throws Exception {
    return new PartitionedStagingCommitter(OUTPUT_PATH,getTAC());
  }
  private static List<String> relativeFiles=Lists.newArrayList();
  @BeforeClass public static void createRelativeFileList(){
    for (    String dateint : Arrays.asList("20161115","20161116")) {
      for (      String hour : Arrays.asList("14","15")) {
        String relative="dateint=" + dateint + "/hour="+ hour+ "/"+ UUID.randomUUID().toString()+ ".parquet";
        relativeFiles.add(relative);
      }
    }
  }
  @Test public void testBadConflictMode() throws Throwable {
    getJob().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,"merge");
    intercept(IllegalArgumentException.class,"MERGE","committer conflict",this::newJobCommitter);
  }
  @Test public void testDefault() throws Exception {
    FileSystem mockS3=getMockS3A();
    JobContext job=getJob();
    job.getConfiguration().unset(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE);
    final PartitionedStagingCommitter committer=newTaskCommitter();
    committer.setupTask(getTAC());
    assertConflictResolution(committer,job,ConflictResolution.FAIL);
    createTestOutputFiles(relativeFiles,committer.getTaskAttemptPath(getTAC()),getTAC().getConfiguration());
    reset(mockS3);
    pathExists(mockS3,new Path(OUTPUT_PATH,relativeFiles.get(0)).getParent());
    intercept(PathExistsException.class,InternalCommitterConstants.E_DEST_EXISTS,"Expected a PathExistsException as a partition already exists",() -> committer.commitTask(getTAC()));
    reset(mockS3);
    committer.commitTask(getTAC());
    Set<String> files=Sets.newHashSet();
    for (    InitiateMultipartUploadRequest request : getMockResults().getRequests().values()) {
      assertEquals(BUCKET,request.getBucketName());
      files.add(request.getKey());
    }
    assertEquals("Should have the right number of uploads",relativeFiles.size(),files.size());
    Set<String> expected=buildExpectedList(committer);
    assertEquals("Should have correct paths",expected,files);
  }
  @Test public void testFail() throws Exception {
    FileSystem mockS3=getMockS3A();
    getTAC().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_FAIL);
    final PartitionedStagingCommitter committer=newTaskCommitter();
    committer.setupTask(getTAC());
    createTestOutputFiles(relativeFiles,committer.getTaskAttemptPath(getTAC()),getTAC().getConfiguration());
    reset(mockS3);
    pathExists(mockS3,new Path(OUTPUT_PATH,relativeFiles.get(1)).getParent());
    intercept(PathExistsException.class,"","Should complain because a partition already exists",() -> committer.commitTask(getTAC()));
    reset(mockS3);
    committer.commitTask(getTAC());
    Set<String> files=Sets.newHashSet();
    for (    InitiateMultipartUploadRequest request : getMockResults().getRequests().values()) {
      assertEquals(BUCKET,request.getBucketName());
      files.add(request.getKey());
    }
    assertEquals("Should have the right number of uploads",relativeFiles.size(),files.size());
    Set<String> expected=buildExpectedList(committer);
    assertEquals("Should have correct paths",expected,files);
  }
  @Test public void testAppend() throws Exception {
    FileSystem mockS3=getMockS3A();
    getTAC().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_APPEND);
    PartitionedStagingCommitter committer=newTaskCommitter();
    committer.setupTask(getTAC());
    createTestOutputFiles(relativeFiles,committer.getTaskAttemptPath(getTAC()),getTAC().getConfiguration());
    reset(mockS3);
    pathExists(mockS3,new Path(OUTPUT_PATH,relativeFiles.get(2)).getParent());
    committer.commitTask(getTAC());
    Set<String> files=Sets.newHashSet();
    for (    InitiateMultipartUploadRequest request : getMockResults().getRequests().values()) {
      assertEquals(BUCKET,request.getBucketName());
      files.add(request.getKey());
    }
    assertEquals("Should have the right number of uploads",relativeFiles.size(),files.size());
    Set<String> expected=buildExpectedList(committer);
    assertEquals("Should have correct paths",expected,files);
  }
  @Test public void testReplace() throws Exception {
    FileSystem mockS3=getMockS3A();
    getTAC().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_REPLACE);
    PartitionedStagingCommitter committer=newTaskCommitter();
    committer.setupTask(getTAC());
    createTestOutputFiles(relativeFiles,committer.getTaskAttemptPath(getTAC()),getTAC().getConfiguration());
    reset(mockS3);
    pathExists(mockS3,new Path(OUTPUT_PATH,relativeFiles.get(3)).getParent());
    committer.commitTask(getTAC());
    Set<String> files=Sets.newHashSet();
    for (    InitiateMultipartUploadRequest request : getMockResults().getRequests().values()) {
      assertEquals(BUCKET,request.getBucketName());
      files.add(request.getKey());
    }
    assertEquals("Should have the right number of uploads",relativeFiles.size(),files.size());
    Set<String> expected=buildExpectedList(committer);
    assertEquals("Should have correct paths",expected,files);
  }
  public Set<String> buildExpectedList(  StagingCommitter committer){
    Set<String> expected=Sets.newHashSet();
    boolean unique=committer.useUniqueFilenames();
    for (    String relative : relativeFiles) {
      expected.add(OUTPUT_PREFIX + "/" + (unique ? Paths.addUUID(relative,committer.getUUID()) : relative));
    }
    return expected;
  }
}
