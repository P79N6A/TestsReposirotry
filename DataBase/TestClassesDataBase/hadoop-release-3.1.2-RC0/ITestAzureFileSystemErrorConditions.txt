/** 
 * Error handling.
 */
public class ITestAzureFileSystemErrorConditions extends AbstractWasbTestWithTimeout {
  private static final int ALL_THREE_FILE_SIZE=1024;
  @Test public void testNoInitialize() throws Exception {
    intercept(AssertionError.class,new Callable<FileMetadata>(){
      @Override public FileMetadata call() throws Exception {
        return new AzureNativeFileSystemStore().retrieveMetadata("foo");
      }
    }
);
  }
  /** 
 * Try accessing an unauthorized or non-existent (treated the same) container from WASB.
 */
  @Test public void testAccessUnauthorizedPublicContainer() throws Exception {
    final String container="nonExistentContainer";
    final String account="hopefullyNonExistentAccount";
    Path noAccessPath=new Path("wasb://" + container + "@"+ account+ "/someFile");
    NativeAzureFileSystem.suppressRetryPolicy();
    try {
      FileSystem.get(noAccessPath.toUri(),new Configuration()).open(noAccessPath);
      assertTrue("Should've thrown.",false);
    }
 catch (    AzureException ex) {
      GenericTestUtils.assertExceptionContains(String.format(NO_ACCESS_TO_CONTAINER_MSG,account,container),ex);
    }
 finally {
      NativeAzureFileSystem.resumeRetryPolicy();
    }
  }
  @Test public void testAccessContainerWithWrongVersion() throws Exception {
    AzureNativeFileSystemStore store=new AzureNativeFileSystemStore();
    MockStorageInterface mockStorage=new MockStorageInterface();
    store.setAzureStorageInteractionLayer(mockStorage);
    try (FileSystem fs=new NativeAzureFileSystem(store)){
      Configuration conf=new Configuration();
      AzureBlobStorageTestAccount.setMockAccountKey(conf);
      HashMap<String,String> metadata=new HashMap<String,String>();
      metadata.put(AzureNativeFileSystemStore.VERSION_METADATA_KEY,"2090-04-05");
      mockStorage.addPreExistingContainer(AzureBlobStorageTestAccount.getMockContainerUri(),metadata);
      AzureException ex=intercept(AzureException.class,new Callable<FileStatus[]>(){
        @Override public FileStatus[] call() throws Exception {
          fs.initialize(new URI(AzureBlobStorageTestAccount.MOCK_WASB_URI),conf);
          return fs.listStatus(new Path("/"));
        }
      }
);
      GenericTestUtils.assertExceptionContains("unsupported version: 2090-04-05.",ex);
    }
   }
private interface ConnectionRecognizer {
    boolean isTargetConnection(    HttpURLConnection connection);
  }
private class TransientErrorInjector extends StorageEvent<SendingRequestEvent> {
    private final ConnectionRecognizer connectionRecognizer;
    private boolean injectedErrorOnce=false;
    public TransientErrorInjector(    ConnectionRecognizer connectionRecognizer){
      this.connectionRecognizer=connectionRecognizer;
    }
    @Override public void eventOccurred(    SendingRequestEvent eventArg){
      HttpURLConnection connection=(HttpURLConnection)eventArg.getConnectionObject();
      if (!connectionRecognizer.isTargetConnection(connection)) {
        return;
      }
      if (!injectedErrorOnce) {
        connection.setReadTimeout(1);
        connection.disconnect();
        injectedErrorOnce=true;
      }
    }
  }
  private void injectTransientError(  NativeAzureFileSystem fs,  final ConnectionRecognizer connectionRecognizer){
    fs.getStore().addTestHookToOperationContext(new TestHookOperationContext(){
      @Override public OperationContext modifyOperationContext(      OperationContext original){
        original.getSendingRequestEventHandler().addListener(new TransientErrorInjector(connectionRecognizer));
        return original;
      }
    }
);
  }
  @Test public void testTransientErrorOnDelete() throws Exception {
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.create();
    assumeNotNull(testAccount);
    try {
      NativeAzureFileSystem fs=testAccount.getFileSystem();
      injectTransientError(fs,new ConnectionRecognizer(){
        @Override public boolean isTargetConnection(        HttpURLConnection connection){
          return connection.getRequestMethod().equals("DELETE");
        }
      }
);
      Path testFile=new Path("/a/b");
      assertTrue(fs.createNewFile(testFile));
      assertTrue(fs.rename(testFile,new Path("/x")));
    }
  finally {
      testAccount.cleanup();
    }
  }
  private void writeAllThreeFile(  NativeAzureFileSystem fs,  Path testFile) throws IOException {
    byte[] buffer=new byte[ALL_THREE_FILE_SIZE];
    Arrays.fill(buffer,(byte)3);
    try (OutputStream stream=fs.create(testFile)){
      stream.write(buffer);
    }
   }
  private void readAllThreeFile(  NativeAzureFileSystem fs,  Path testFile) throws IOException {
    byte[] buffer=new byte[ALL_THREE_FILE_SIZE];
    InputStream inStream=fs.open(testFile);
    assertEquals(buffer.length,inStream.read(buffer,0,buffer.length));
    inStream.close();
    for (int i=0; i < buffer.length; i++) {
      assertEquals(3,buffer[i]);
    }
  }
  @Test public void testTransientErrorOnCommitBlockList() throws Exception {
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.create();
    assumeNotNull(testAccount);
    try {
      NativeAzureFileSystem fs=testAccount.getFileSystem();
      injectTransientError(fs,new ConnectionRecognizer(){
        @Override public boolean isTargetConnection(        HttpURLConnection connection){
          return connection.getRequestMethod().equals("PUT") && connection.getURL().getQuery() != null && connection.getURL().getQuery().contains("blocklist");
        }
      }
);
      Path testFile=new Path("/a/b");
      writeAllThreeFile(fs,testFile);
      readAllThreeFile(fs,testFile);
    }
  finally {
      testAccount.cleanup();
    }
  }
  @Test public void testTransientErrorOnRead() throws Exception {
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.create();
    assumeNotNull(testAccount);
    try {
      NativeAzureFileSystem fs=testAccount.getFileSystem();
      Path testFile=new Path("/a/b");
      writeAllThreeFile(fs,testFile);
      injectTransientError(fs,new ConnectionRecognizer(){
        @Override public boolean isTargetConnection(        HttpURLConnection connection){
          return connection.getRequestMethod().equals("GET");
        }
      }
);
      readAllThreeFile(fs,testFile);
    }
  finally {
      testAccount.cleanup();
    }
  }
}
