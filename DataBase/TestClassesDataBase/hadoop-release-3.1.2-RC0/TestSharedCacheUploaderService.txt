/** 
 * Basic unit tests for the NodeManger to SCM Protocol Service.
 */
public class TestSharedCacheUploaderService {
  private static File testDir=null;
  @BeforeClass public static void setupTestDirs() throws IOException {
    testDir=new File("target",TestSharedCacheUploaderService.class.getCanonicalName());
    testDir.delete();
    testDir.mkdirs();
    testDir=testDir.getAbsoluteFile();
  }
  @AfterClass public static void cleanupTestDirs() throws IOException {
    if (testDir != null) {
      testDir.delete();
    }
  }
  private SharedCacheUploaderService service;
  private SCMUploaderProtocol proxy;
  private SCMStore store;
  private final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  @Before public void startUp(){
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.SCM_STORE_CLASS,InMemorySCMStore.class.getName());
    conf.set(YarnConfiguration.SHARED_CACHE_ROOT,testDir.getPath());
    AppChecker appChecker=spy(new DummyAppChecker());
    store=new InMemorySCMStore(appChecker);
    store.init(conf);
    store.start();
    service=new SharedCacheUploaderService(store);
    service.init(conf);
    service.start();
    YarnRPC rpc=YarnRPC.create(new Configuration());
    InetSocketAddress scmAddress=conf.getSocketAddr(YarnConfiguration.SCM_UPLOADER_SERVER_ADDRESS,YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_ADDRESS,YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_PORT);
    proxy=(SCMUploaderProtocol)rpc.getProxy(SCMUploaderProtocol.class,scmAddress,conf);
  }
  @After public void cleanUp(){
    if (store != null) {
      store.stop();
    }
    if (service != null) {
      service.stop();
    }
    if (proxy != null) {
      RPC.stopProxy(proxy);
    }
  }
  @Test public void testNotify_noEntry() throws Exception {
    long accepted=SharedCacheUploaderMetrics.getInstance().getAcceptedUploads();
    SCMUploaderNotifyRequest request=recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);
    request.setResourceKey("key1");
    request.setFilename("foo.jar");
    assertTrue(proxy.notify(request).getAccepted());
    Collection<SharedCacheResourceReference> set=store.getResourceReferences("key1");
    assertNotNull(set);
    assertEquals(0,set.size());
    assertEquals("NM upload metrics aren't updated.",1,SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);
  }
  @Test public void testNotify_entryExists_differentName() throws Exception {
    long rejected=SharedCacheUploaderMetrics.getInstance().getRejectUploads();
    store.addResource("key1","foo.jar");
    SCMUploaderNotifyRequest request=recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);
    request.setResourceKey("key1");
    request.setFilename("foobar.jar");
    assertFalse(proxy.notify(request).getAccepted());
    Collection<SharedCacheResourceReference> set=store.getResourceReferences("key1");
    assertNotNull(set);
    assertEquals(0,set.size());
    assertEquals("NM upload metrics aren't updated.",1,SharedCacheUploaderMetrics.getInstance().getRejectUploads() - rejected);
  }
  @Test public void testNotify_entryExists_sameName() throws Exception {
    long accepted=SharedCacheUploaderMetrics.getInstance().getAcceptedUploads();
    store.addResource("key1","foo.jar");
    SCMUploaderNotifyRequest request=recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);
    request.setResourceKey("key1");
    request.setFilename("foo.jar");
    assertTrue(proxy.notify(request).getAccepted());
    Collection<SharedCacheResourceReference> set=store.getResourceReferences("key1");
    assertNotNull(set);
    assertEquals(0,set.size());
    assertEquals("NM upload metrics aren't updated.",1,SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);
  }
}
