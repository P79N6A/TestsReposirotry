/** 
 * Dummy class to test that this key provider is chosen to provide CryptoExtension services over the DefaultCryptoExtension.
 */
public class DummyCryptoExtensionKeyProvider extends KeyProvider implements KeyProviderCryptoExtension.CryptoExtension {
  private KeyProvider kp;
  private KeyVersion kv;
  private EncryptedKeyVersion ekv;
  public DummyCryptoExtensionKeyProvider(  Configuration conf){
    super(conf);
    conf=new Configuration();
    try {
      this.kp=new UserProvider.Factory().createProvider(new URI("user:///"),conf);
      this.kv=new KeyVersion(ENCRYPTION_KEY_NAME,"dummyFakeKey@1",new byte[16]);
      this.ekv=new EncryptedKeyVersion(ENCRYPTION_KEY_NAME,"dummyFakeKey@1",new byte[16],kv);
    }
 catch (    URISyntaxException e) {
      fail(e.getMessage());
    }
catch (    IOException e) {
      fail(e.getMessage());
    }
  }
  @Override public void warmUpEncryptedKeys(  String... keyNames) throws IOException {
  }
  @Override public void drain(  String keyName){
  }
  @Override public EncryptedKeyVersion generateEncryptedKey(  String encryptionKeyName) throws IOException, GeneralSecurityException {
    return this.ekv;
  }
  @Override public EncryptedKeyVersion reencryptEncryptedKey(  EncryptedKeyVersion ekv) throws IOException, GeneralSecurityException {
    return ekv;
  }
  @Override public void reencryptEncryptedKeys(  List<EncryptedKeyVersion> ekvs) throws IOException, GeneralSecurityException {
  }
  @Override public KeyVersion decryptEncryptedKey(  EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException {
    return kv;
  }
  @Override public KeyVersion getKeyVersion(  String versionName) throws IOException {
    return this.kp.getKeyVersion(versionName);
  }
  @Override public List<String> getKeys() throws IOException {
    return this.kp.getKeys();
  }
  @Override public List<KeyVersion> getKeyVersions(  String name) throws IOException {
    return this.kp.getKeyVersions(name);
  }
  @Override public Metadata getMetadata(  String name) throws IOException {
    return this.kp.getMetadata(name);
  }
  @Override public KeyVersion createKey(  String name,  byte[] material,  Options localOptions) throws IOException {
    return this.kp.createKey(name,material,localOptions);
  }
  @Override public void deleteKey(  String name) throws IOException {
    this.kp.deleteKey(name);
  }
  @Override public KeyVersion rollNewVersion(  String name,  byte[] material) throws IOException {
    return this.kp.rollNewVersion(name,material);
  }
  @Override public void flush() throws IOException {
    this.kp.flush();
  }
}
