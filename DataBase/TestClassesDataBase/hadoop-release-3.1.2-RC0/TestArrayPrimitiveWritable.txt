/** 
 * Unit tests for  {@link ArrayPrimitiveWritable} 
 */
public class TestArrayPrimitiveWritable {
  static final boolean[] b={true,true,false};
  static final char[] c={'a','b','c'};
  static final byte[] by={1,2,3};
  static final short[] sh={1,2,3};
  static final int[] i={1,2,3};
  static final long[] lo={1L,2L,3L};
  static final float[] f={(float)1.0,(float)2.5,(float)3.3};
  static final double[] d={1.0,2.5,3.3};
  static final Object[] bigSet={b,c,by,sh,i,lo,f,d};
  static final Object[] expectedResultSet={b,b,c,c,by,by,sh,sh,i,i,lo,lo,f,f,d,d};
  final Object[] resultSet=new Object[bigSet.length * 2];
  final DataOutputBuffer out=new DataOutputBuffer();
  final DataInputBuffer in=new DataInputBuffer();
  @Before public void resetBuffers() throws IOException {
    out.reset();
    in.reset();
  }
  @Test public void testMany() throws IOException {
    for (    Object x : bigSet) {
      ObjectWritable.writeObject(out,x,x.getClass(),null,true);
      (new ArrayPrimitiveWritable(x)).write(out);
    }
    in.reset(out.getData(),out.getLength());
    for (int x=0; x < resultSet.length; ) {
      resultSet[x++]=ObjectWritable.readObject(in,null);
      ArrayPrimitiveWritable apw=new ArrayPrimitiveWritable();
      apw.readFields(in);
      resultSet[x++]=apw.get();
    }
    assertEquals(expectedResultSet.length,resultSet.length);
    for (int x=0; x < resultSet.length; x++) {
      assertEquals("ComponentType of array " + x,expectedResultSet[x].getClass().getComponentType(),resultSet[x].getClass().getComponentType());
    }
    assertTrue("In and Out arrays didn't match values",Arrays.deepEquals(expectedResultSet,resultSet));
  }
  @Test @SuppressWarnings("deprecation") public void testObjectLabeling() throws IOException {
    ObjectWritable.writeObject(out,i,i.getClass(),null,true);
    ArrayPrimitiveWritable apw=new ArrayPrimitiveWritable(i);
    ObjectWritable.writeObject(out,apw,apw.getClass(),null,true);
    in.reset(out.getData(),out.getLength());
    String className=UTF8.readString(in);
    assertEquals("The int[] written by ObjectWritable was not labelled as " + "an ArrayPrimitiveWritable.Internal",ArrayPrimitiveWritable.Internal.class.getName(),className);
    ArrayPrimitiveWritable.Internal apwi=new ArrayPrimitiveWritable.Internal();
    apwi.readFields(in);
    assertEquals("The ArrayPrimitiveWritable.Internal component type was corrupted",int.class,apw.getComponentType());
    assertTrue("The int[] written by ObjectWritable as " + "ArrayPrimitiveWritable.Internal was corrupted",Arrays.equals(i,(int[])(apwi.get())));
    String declaredClassName=UTF8.readString(in);
    assertEquals("The APW written by ObjectWritable was not labelled as " + "declaredClass ArrayPrimitiveWritable",ArrayPrimitiveWritable.class.getName(),declaredClassName);
    className=UTF8.readString(in);
    assertEquals("The APW written by ObjectWritable was not labelled as " + "class ArrayPrimitiveWritable",ArrayPrimitiveWritable.class.getName(),className);
    ArrayPrimitiveWritable apw2=new ArrayPrimitiveWritable();
    apw2.readFields(in);
    assertEquals("The ArrayPrimitiveWritable component type was corrupted",int.class,apw2.getComponentType());
    assertTrue("The int[] written by ObjectWritable as " + "ArrayPrimitiveWritable was corrupted",Arrays.equals(i,(int[])(apw2.get())));
  }
  @Test public void testOldFormat() throws IOException {
    ObjectWritable.writeObject(out,i,i.getClass(),null);
    in.reset(out.getData(),out.getLength());
    @SuppressWarnings("deprecation") String className=UTF8.readString(in);
    assertEquals("The int[] written by ObjectWritable as a non-compact array " + "was not labelled as an array of int",i.getClass().getName(),className);
    int length=in.readInt();
    assertEquals("The int[] written by ObjectWritable as a non-compact array " + "was not expected length",i.length,length);
    int[] readValue=new int[length];
    try {
      for (int i=0; i < length; i++) {
        readValue[i]=(int)((Integer)ObjectWritable.readObject(in,null));
      }
    }
 catch (    Exception e) {
      fail("The int[] written by ObjectWritable as a non-compact array " + "was corrupted.  Failed to correctly read int[] of length " + length + ". Got exception:\n"+ StringUtils.stringifyException(e));
    }
    assertTrue("The int[] written by ObjectWritable as a non-compact array " + "was corrupted.",Arrays.equals(i,readValue));
  }
}
