public class TestLineInputFormat {
  private static int MAX_LENGTH=200;
  private static JobConf defaultConf=new JobConf();
  private static FileSystem localFs=null;
static {
    try {
      localFs=FileSystem.getLocal(defaultConf);
    }
 catch (    IOException e) {
      throw new RuntimeException("init failure",e);
    }
  }
  private static Path workDir=new Path(new Path(System.getProperty("test.build.data","."),"data"),"TestLineInputFormat");
  @Test public void testFormat() throws Exception {
    JobConf job=new JobConf();
    Path file=new Path(workDir,"test.txt");
    int seed=new Random().nextInt();
    Random random=new Random(seed);
    localFs.delete(workDir,true);
    FileInputFormat.setInputPaths(job,workDir);
    int numLinesPerMap=5;
    job.setInt("mapreduce.input.lineinputformat.linespermap",numLinesPerMap);
    for (int length=0; length < MAX_LENGTH; length+=random.nextInt(MAX_LENGTH / 10) + 1) {
      Writer writer=new OutputStreamWriter(localFs.create(file));
      try {
        for (int i=0; i < length; i++) {
          writer.write(Integer.toString(i));
          writer.write("\n");
        }
      }
  finally {
        writer.close();
      }
      checkFormat(job,numLinesPerMap);
    }
  }
  private static final Reporter voidReporter=Reporter.NULL;
  void checkFormat(  JobConf job,  int expectedN) throws IOException {
    NLineInputFormat format=new NLineInputFormat();
    format.configure(job);
    int ignoredNumSplits=1;
    InputSplit[] splits=format.getSplits(job,ignoredNumSplits);
    int count=0;
    for (int j=0; j < splits.length - 1; j++) {
      assertEquals("There are no split locations",0,splits[j].getLocations().length);
      RecordReader<LongWritable,Text> reader=format.getRecordReader(splits[j],job,voidReporter);
      Class readerClass=reader.getClass();
      assertEquals("reader class is LineRecordReader.",LineRecordReader.class,readerClass);
      LongWritable key=reader.createKey();
      Class keyClass=key.getClass();
      assertEquals("Key class is LongWritable.",LongWritable.class,keyClass);
      Text value=reader.createValue();
      Class valueClass=value.getClass();
      assertEquals("Value class is Text.",Text.class,valueClass);
      try {
        count=0;
        while (reader.next(key,value)) {
          count++;
        }
      }
  finally {
        reader.close();
      }
      assertEquals("number of lines in split is " + expectedN,expectedN,count);
    }
  }
  public static void main(  String[] args) throws Exception {
    new TestLineInputFormat().testFormat();
  }
}
