/** 
 * Grouping function for values based on the composite key. This comparator strips off the secondary key part from the x0y composite and only compares the primary key value (x).
 */
public static class CompositeIntGroupFn extends WritableComparator {
  public CompositeIntGroupFn(){
    super(IntWritable.class);
  }
  public int compare(  WritableComparable v1,  WritableComparable v2){
    int val1=((IntWritable)(v1)).get() / 100;
    int val2=((IntWritable)(v2)).get() / 100;
    if (val1 < val2)     return 1;
 else     if (val1 > val2)     return -1;
 else     return 0;
  }
  public boolean equals(  IntWritable v1,  IntWritable v2){
    int val1=v1.get();
    int val2=v2.get();
    return (val1 / 100) == (val2 / 100);
  }
static {
    WritableComparator.define(CompositeIntGroupFn.class,new IntWritable.Comparator());
  }
}
