@RunWith(Parameterized.class) public class TestRMProxyUsersConf {
  private static final UserGroupInformation FOO_USER=UserGroupInformation.createUserForTesting("foo",new String[]{"foo_group"});
  private static final UserGroupInformation BAR_USER=UserGroupInformation.createUserForTesting("bar",new String[]{"bar_group"});
  private final String ipAddress="127.0.0.1";
  @Parameterized.Parameters public static Collection<Object[]> headers(){
    return Arrays.asList(new Object[][]{{0},{1},{2}});
  }
  private Configuration conf;
  public TestRMProxyUsersConf(  int round){
    conf=new YarnConfiguration();
switch (round) {
case 0:
      conf.set("hadoop.proxyuser.foo.hosts",ipAddress);
    conf.set("hadoop.proxyuser.foo.users","bar");
  conf.set("hadoop.proxyuser.foo.groups","bar_group");
break;
case 1:
conf.set(RM_PROXY_USER_PREFIX + "foo.hosts",ipAddress);
conf.set(RM_PROXY_USER_PREFIX + "foo.users","bar");
conf.set(RM_PROXY_USER_PREFIX + "foo.groups","bar_group");
break;
case 2:
conf.set("hadoop.proxyuser.foo.hosts","xyz");
conf.set("hadoop.proxyuser.foo.users","xyz");
conf.set("hadoop.proxyuser.foo.groups","xyz");
conf.set(RM_PROXY_USER_PREFIX + "foo.hosts",ipAddress);
conf.set(RM_PROXY_USER_PREFIX + "foo.users","bar");
conf.set(RM_PROXY_USER_PREFIX + "foo.groups","bar_group");
break;
default :
break;
}
}
@Test public void testProxyUserConfiguration() throws Exception {
MockRM rm=null;
try {
rm=new MockRM(conf);
rm.start();
Thread.sleep(10000);
UserGroupInformation proxyUser=UserGroupInformation.createProxyUser(BAR_USER.getShortUserName(),FOO_USER);
try {
ProxyUsers.getDefaultImpersonationProvider().authorize(proxyUser,ipAddress);
}
 catch (AuthorizationException e) {
Assert.fail();
}
}
  finally {
if (rm != null) {
rm.stop();
rm.close();
}
}
}
}
