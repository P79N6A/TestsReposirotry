public class TestWeightedRoundRobinMultiplexer {
  public static final Logger LOG=LoggerFactory.getLogger(TestWeightedRoundRobinMultiplexer.class);
  private WeightedRoundRobinMultiplexer mux;
  @Test(expected=IllegalArgumentException.class) public void testInstantiateNegativeMux(){
    mux=new WeightedRoundRobinMultiplexer(-1,"",new Configuration());
  }
  @Test(expected=IllegalArgumentException.class) public void testInstantiateZeroMux(){
    mux=new WeightedRoundRobinMultiplexer(0,"",new Configuration());
  }
  @Test(expected=IllegalArgumentException.class) public void testInstantiateIllegalMux(){
    Configuration conf=new Configuration();
    conf.setStrings("namespace." + IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY,"1","2","3");
    mux=new WeightedRoundRobinMultiplexer(2,"namespace",conf);
  }
  @Test public void testLegalInstantiation(){
    Configuration conf=new Configuration();
    conf.setStrings("namespace." + IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY,"1","2","3");
    mux=new WeightedRoundRobinMultiplexer(3,"namespace.",conf);
  }
  @Test public void testDefaultPattern(){
    mux=new WeightedRoundRobinMultiplexer(1,"",new Configuration());
    for (int i=0; i < 10; i++) {
      assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    }
    mux=new WeightedRoundRobinMultiplexer(2,"",new Configuration());
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    mux=new WeightedRoundRobinMultiplexer(3,"",new Configuration());
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),2);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    mux=new WeightedRoundRobinMultiplexer(4,"",new Configuration());
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),2);
    assertEquals(mux.getAndAdvanceCurrentIndex(),2);
    assertEquals(mux.getAndAdvanceCurrentIndex(),3);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
  }
  @Test public void testCustomPattern(){
    Configuration conf=new Configuration();
    conf.setStrings("test.custom." + IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY,"1","1");
    mux=new WeightedRoundRobinMultiplexer(2,"test.custom",conf);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    assertEquals(mux.getAndAdvanceCurrentIndex(),0);
    assertEquals(mux.getAndAdvanceCurrentIndex(),1);
    conf.setStrings("test.custom." + IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY,"1","3","2");
    mux=new WeightedRoundRobinMultiplexer(3,"test.custom",conf);
    for (int i=0; i < 5; i++) {
      assertEquals(mux.getAndAdvanceCurrentIndex(),0);
      assertEquals(mux.getAndAdvanceCurrentIndex(),1);
      assertEquals(mux.getAndAdvanceCurrentIndex(),1);
      assertEquals(mux.getAndAdvanceCurrentIndex(),1);
      assertEquals(mux.getAndAdvanceCurrentIndex(),2);
      assertEquals(mux.getAndAdvanceCurrentIndex(),2);
    }
  }
}
