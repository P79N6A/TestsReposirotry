public static class Renewer extends TokenRenewer {
  private static int counter=0;
  private static Token<?> lastRenewed=null;
  private static Token<?> tokenToRenewIn2Sec=null;
  private static boolean cancelled=false;
  private static void reset(){
    counter=0;
    lastRenewed=null;
    tokenToRenewIn2Sec=null;
    cancelled=false;
  }
  @Override public boolean handleKind(  Text kind){
    return KIND.equals(kind);
  }
  @Override public boolean isManaged(  Token<?> token) throws IOException {
    return true;
  }
  @Override public long renew(  Token<?> t,  Configuration conf) throws IOException {
    if (!(t instanceof MyToken)) {
      return System.currentTimeMillis() + 3000;
    }
    MyToken token=(MyToken)t;
    if (token.isCanceled()) {
      throw new InvalidToken("token has been canceled");
    }
    lastRenewed=token;
    counter++;
    LOG.info("Called MYDFS.renewdelegationtoken " + token + ";this dfs="+ this.hashCode()+ ";c="+ counter);
    if (tokenToRenewIn2Sec == token) {
      LOG.info("RENEW in 2 seconds");
      tokenToRenewIn2Sec=null;
      return 2 * 1000 + System.currentTimeMillis();
    }
 else {
      return 86400 * 1000 + System.currentTimeMillis();
    }
  }
  @Override public void cancel(  Token<?> t,  Configuration conf){
    cancelled=true;
    if (t instanceof MyToken) {
      MyToken token=(MyToken)t;
      LOG.info("Cancel token " + token);
      token.cancelToken();
    }
  }
}
