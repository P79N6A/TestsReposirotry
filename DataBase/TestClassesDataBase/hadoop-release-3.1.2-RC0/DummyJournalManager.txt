public static class DummyJournalManager implements JournalManager {
  static Configuration conf=null;
  static URI uri=null;
  static NamespaceInfo nsInfo=null;
  static boolean formatCalled=false;
  static boolean shouldPromptCalled=false;
  public DummyJournalManager(  Configuration conf,  URI u,  NamespaceInfo nsInfo){
    DummyJournalManager.conf=conf;
    DummyJournalManager.uri=u;
    DummyJournalManager.nsInfo=nsInfo;
  }
  @Override public void format(  NamespaceInfo nsInfo) throws IOException {
    formatCalled=true;
  }
  @Override public EditLogOutputStream startLogSegment(  long txId,  int layoutVersion) throws IOException {
    return mock(EditLogOutputStream.class);
  }
  @Override public void finalizeLogSegment(  long firstTxId,  long lastTxId) throws IOException {
  }
  @Override public void selectInputStreams(  Collection<EditLogInputStream> streams,  long fromTxnId,  boolean inProgressOk,  boolean onlyDurableTxns){
  }
  @Override public void setOutputBufferCapacity(  int size){
  }
  @Override public void purgeLogsOlderThan(  long minTxIdToKeep) throws IOException {
  }
  @Override public void recoverUnfinalizedSegments() throws IOException {
  }
  @Override public void close() throws IOException {
  }
  @Override public boolean hasSomeData() throws IOException {
    shouldPromptCalled=true;
    return false;
  }
  @Override public void doPreUpgrade() throws IOException {
  }
  @Override public void doUpgrade(  Storage storage) throws IOException {
  }
  @Override public void doFinalize() throws IOException {
  }
  @Override public boolean canRollBack(  StorageInfo storage,  StorageInfo prevStorage,  int targetLayoutVersion) throws IOException {
    return false;
  }
  @Override public void doRollback() throws IOException {
  }
  @Override public void discardSegments(  long startTxId) throws IOException {
  }
  @Override public long getJournalCTime() throws IOException {
    return -1;
  }
}
