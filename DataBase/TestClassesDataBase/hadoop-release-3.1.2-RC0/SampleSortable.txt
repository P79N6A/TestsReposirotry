private static class SampleSortable implements IndexedSortable {
  private int[] valindex;
  private int[] valindirect;
  private int[] values;
  private final long seed;
  public SampleSortable(){
    this(50);
  }
  public SampleSortable(  int j){
    Random r=new Random();
    seed=r.nextLong();
    r.setSeed(seed);
    values=new int[j];
    valindex=new int[j];
    valindirect=new int[j];
    for (int i=0; i < j; ++i) {
      valindex[i]=valindirect[i]=i;
      values[i]=r.nextInt(1000);
    }
  }
  public SampleSortable(  int[] values){
    this.values=values;
    valindex=new int[values.length];
    valindirect=new int[values.length];
    for (int i=0; i < values.length; ++i) {
      valindex[i]=valindirect[i]=i;
    }
    seed=0;
  }
  public long getSeed(){
    return seed;
  }
  @Override public int compare(  int i,  int j){
    return values[valindirect[valindex[i]]] - values[valindirect[valindex[j]]];
  }
  @Override public void swap(  int i,  int j){
    int tmp=valindex[i];
    valindex[i]=valindex[j];
    valindex[j]=tmp;
  }
  public int[] getSorted(){
    int[] ret=new int[values.length];
    for (int i=0; i < ret.length; ++i) {
      ret[i]=values[valindirect[valindex[i]]];
    }
    return ret;
  }
  public int[] getValues(){
    int[] ret=new int[values.length];
    System.arraycopy(values,0,ret,0,values.length);
    return ret;
  }
}
