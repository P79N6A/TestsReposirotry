public class TestRestClientBindings extends Assert implements SwiftTestConstants {
  private static final String SERVICE="sname";
  private static final String CONTAINER="cname";
  private static final String FS_URI="swift://" + CONTAINER + "."+ SERVICE+ "/";
  private static final String AUTH_URL="http://localhost:8080/auth";
  private static final String USER="user";
  private static final String PASS="pass";
  private static final String TENANT="tenant";
  private URI filesysURI;
  private Configuration conf;
  @Before public void setup() throws URISyntaxException {
    filesysURI=new URI(FS_URI);
    conf=new Configuration(true);
    setInstanceVal(conf,SERVICE,DOT_AUTH_URL,AUTH_URL);
    setInstanceVal(conf,SERVICE,DOT_USERNAME,USER);
    setInstanceVal(conf,SERVICE,DOT_PASSWORD,PASS);
  }
  private void setInstanceVal(  Configuration conf,  String host,  String key,  String val){
    String instance=RestClientBindings.buildSwiftInstancePrefix(host);
    String confkey=instance + key;
    conf.set(confkey,val);
  }
  public void testPrefixBuilder() throws Throwable {
    String built=RestClientBindings.buildSwiftInstancePrefix(SERVICE);
    assertEquals("fs.swift.service." + SERVICE,built);
  }
  public void testBindAgainstConf() throws Exception {
    Properties props=RestClientBindings.bind(filesysURI,conf);
    assertPropertyEquals(props,SWIFT_CONTAINER_PROPERTY,CONTAINER);
    assertPropertyEquals(props,SWIFT_SERVICE_PROPERTY,SERVICE);
    assertPropertyEquals(props,SWIFT_AUTH_PROPERTY,AUTH_URL);
    assertPropertyEquals(props,SWIFT_AUTH_PROPERTY,AUTH_URL);
    assertPropertyEquals(props,SWIFT_USERNAME_PROPERTY,USER);
    assertPropertyEquals(props,SWIFT_PASSWORD_PROPERTY,PASS);
    assertPropertyEquals(props,SWIFT_TENANT_PROPERTY,null);
    assertPropertyEquals(props,SWIFT_REGION_PROPERTY,null);
    assertPropertyEquals(props,SWIFT_HTTP_PORT_PROPERTY,null);
    assertPropertyEquals(props,SWIFT_HTTPS_PORT_PROPERTY,null);
  }
  public void expectBindingFailure(  URI fsURI,  Configuration config){
    try {
      Properties binding=RestClientBindings.bind(fsURI,config);
      StringBuilder details=new StringBuilder();
      for (      Object key : binding.keySet()) {
        details.append(key.toString()).append(" ");
      }
      fail("Expected a failure, got the binding [ " + details + "]");
    }
 catch (    SwiftConfigurationException expected) {
    }
  }
  public void testBindAgainstConfMissingInstance() throws Exception {
    Configuration badConf=new Configuration();
    expectBindingFailure(filesysURI,badConf);
  }
  @Test(expected=SwiftConfigurationException.class) public void testDottedServiceURL() throws Exception {
    RestClientBindings.bind(new URI("swift://hadoop.apache.org/"),conf);
  }
  @Test(expected=SwiftConfigurationException.class) public void testMissingServiceURL() throws Exception {
    RestClientBindings.bind(new URI("swift:///"),conf);
  }
  /** 
 * inner test method that expects container extraction to fail -if not prints a meaningful error message.
 * @param hostname hostname to parse
 */
  private static void expectExtractContainerFail(  String hostname){
    try {
      String container=RestClientBindings.extractContainerName(hostname);
      fail("Expected an error -got a container of '" + container + "' from "+ hostname);
    }
 catch (    SwiftConfigurationException expected) {
    }
  }
  /** 
 * inner test method that expects service extraction to fail -if not prints a meaningful error message.
 * @param hostname hostname to parse
 */
  public static void expectExtractServiceFail(  String hostname){
    try {
      String service=RestClientBindings.extractServiceName(hostname);
      fail("Expected an error -got a service of '" + service + "' from "+ hostname);
    }
 catch (    SwiftConfigurationException expected) {
    }
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testEmptyHostname() throws Throwable {
    expectExtractContainerFail("");
    expectExtractServiceFail("");
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testDot() throws Throwable {
    expectExtractContainerFail(".");
    expectExtractServiceFail(".");
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testSimple() throws Throwable {
    expectExtractContainerFail("simple");
    expectExtractServiceFail("simple");
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testTrailingDot() throws Throwable {
    expectExtractServiceFail("simple.");
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testLeadingDot() throws Throwable {
    expectExtractServiceFail(".leading");
  }
}
