/** 
 * Test snapshot related operations. 
 */
public class TestSnapshotPathINodes {
  private static final long seed=0;
  private static final short REPLICATION=3;
  static private final Path dir=new Path("/TestSnapshot");
  static private final Path sub1=new Path(dir,"sub1");
  static private final Path file1=new Path(sub1,"file1");
  static private final Path file2=new Path(sub1,"file2");
  static private MiniDFSCluster cluster;
  static private FSDirectory fsdir;
  static private DistributedFileSystem hdfs;
  @BeforeClass public static void setUp() throws Exception {
    Configuration conf=new Configuration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNamesystem();
    fsdir=fsn.getFSDirectory();
    hdfs=cluster.getFileSystem();
  }
  @Before public void reset() throws Exception {
    DFSTestUtil.createFile(hdfs,file1,1024,REPLICATION,seed);
    DFSTestUtil.createFile(hdfs,file2,1024,REPLICATION,seed);
  }
  @AfterClass public static void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  /** 
 * Test allow-snapshot operation. 
 */
  @Test(timeout=15000) public void testAllowSnapshot() throws Exception {
    final String pathStr=sub1.toString();
    final INode before=fsdir.getINode(pathStr);
    Assert.assertFalse(before.asDirectory().isSnapshottable());
    final Path path=new Path(pathStr);
    hdfs.allowSnapshot(path);
{
      final INode after=fsdir.getINode(pathStr);
      Assert.assertTrue(after.asDirectory().isSnapshottable());
    }
    hdfs.disallowSnapshot(path);
{
      final INode after=fsdir.getINode(pathStr);
      Assert.assertFalse(after.asDirectory().isSnapshottable());
    }
  }
  static Snapshot getSnapshot(  INodesInPath inodesInPath,  String name,  int index){
    if (name == null) {
      return null;
    }
    final INode inode=inodesInPath.getINode(index - 1);
    return inode.asDirectory().getSnapshot(DFSUtil.string2Bytes(name));
  }
  static void assertSnapshot(  INodesInPath inodesInPath,  boolean isSnapshot,  final Snapshot snapshot,  int index){
    assertEquals(isSnapshot,inodesInPath.isSnapshot());
    assertEquals(Snapshot.getSnapshotId(isSnapshot ? snapshot : null),inodesInPath.getPathSnapshotId());
    if (!isSnapshot) {
      assertEquals(Snapshot.getSnapshotId(snapshot),inodesInPath.getLatestSnapshotId());
    }
    if (isSnapshot && index >= 0) {
      assertEquals(Snapshot.Root.class,inodesInPath.getINode(index).getClass());
    }
  }
  static void assertINodeFile(  INode inode,  Path path){
    assertEquals(path.getName(),inode.getLocalName());
    assertEquals(INodeFile.class,inode.getClass());
  }
  /** 
 * for normal (non-snapshot) file.
 */
  @Test(timeout=15000) public void testNonSnapshotPathINodes() throws Exception {
    byte[][] components=INode.getPathComponents(file1.toString());
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertSnapshot(nodesInPath,false,null,-1);
    for (int i=0; i < components.length; i++) {
      assertEquals(components[i],nodesInPath.getPathComponent(i));
    }
    assertTrue("file1=" + file1 + ", nodesInPath="+ nodesInPath,nodesInPath.getINode(components.length - 1) != null);
    assertEquals(nodesInPath.getINode(components.length - 1).getFullPathName(),file1.toString());
    assertEquals(nodesInPath.getINode(components.length - 2).getFullPathName(),sub1.toString());
    assertEquals(nodesInPath.getINode(components.length - 3).getFullPathName(),dir.toString());
    assertEquals(Path.SEPARATOR,nodesInPath.getPath(0));
    assertEquals(dir.toString(),nodesInPath.getPath(1));
    assertEquals(sub1.toString(),nodesInPath.getPath(2));
    assertEquals(file1.toString(),nodesInPath.getPath(3));
    assertEquals(file1.getParent().toString(),nodesInPath.getParentINodesInPath().getPath());
    nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertSnapshot(nodesInPath,false,null,-1);
    assertEquals(nodesInPath.getLastINode().getFullPathName(),file1.toString());
  }
  /** 
 * for snapshot file.
 */
  @Test(timeout=15000) public void testSnapshotPathINodes() throws Exception {
    hdfs.allowSnapshot(sub1);
    hdfs.createSnapshot(sub1,"s1");
    String snapshotPath=sub1.toString() + "/.snapshot/s1/file1";
    byte[][] components=INode.getPathComponents(snapshotPath);
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length - 1);
    final Snapshot snapshot=getSnapshot(nodesInPath,"s1",3);
    assertSnapshot(nodesInPath,true,snapshot,3);
    assertEquals(".snapshot/s1",DFSUtil.bytes2String(nodesInPath.getPathComponent(3)));
    assertTrue(nodesInPath.getINode(3) instanceof Snapshot.Root);
    assertEquals("s1",nodesInPath.getINode(3).getLocalName());
    INode snapshotFileNode=nodesInPath.getLastINode();
    assertINodeFile(snapshotFileNode,file1);
    assertTrue(snapshotFileNode.getParent().isWithSnapshot());
    nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length - 1);
    assertSnapshot(nodesInPath,true,snapshot,3);
    assertINodeFile(nodesInPath.getLastINode(),file1);
    String dotSnapshotPath=sub1.toString() + "/.snapshot";
    components=INode.getPathComponents(dotSnapshotPath);
    nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertEquals(".snapshot",DFSUtil.bytes2String(nodesInPath.getLastLocalName()));
    assertNull(nodesInPath.getLastINode());
    assertEquals(sub1.toString(),nodesInPath.getParentINodesInPath().getPath());
    assertSnapshot(nodesInPath,true,snapshot,-1);
    assertNull(nodesInPath.getLastINode());
    assertEquals(nodesInPath.getINode(-2).getFullPathName(),sub1.toString());
    assertTrue(nodesInPath.getINode(-2).isDirectory());
    String[] invalidPathComponent={"invalidDir","foo",".snapshot","bar"};
    Path invalidPath=new Path(invalidPathComponent[0]);
    for (int i=1; i < invalidPathComponent.length; i++) {
      invalidPath=new Path(invalidPath,invalidPathComponent[i]);
      try {
        hdfs.getFileStatus(invalidPath);
        Assert.fail();
      }
 catch (      FileNotFoundException fnfe) {
        System.out.println("The exception is expected: " + fnfe);
      }
    }
    hdfs.deleteSnapshot(sub1,"s1");
    hdfs.disallowSnapshot(sub1);
  }
  /** 
 * for snapshot file after deleting the original file.
 */
  @Test(timeout=15000) public void testSnapshotPathINodesAfterDeletion() throws Exception {
    hdfs.allowSnapshot(sub1);
    hdfs.createSnapshot(sub1,"s2");
    hdfs.delete(file1,false);
    final Snapshot snapshot;
{
      String snapshotPath=sub1.toString() + "/.snapshot/s2/file1";
      byte[][] components=INode.getPathComponents(snapshotPath);
      INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
      assertEquals(nodesInPath.length(),components.length - 1);
      snapshot=getSnapshot(nodesInPath,"s2",3);
      assertSnapshot(nodesInPath,true,snapshot,3);
      final INode inode=nodesInPath.getLastINode();
      assertEquals(file1.getName(),inode.getLocalName());
      assertTrue(inode.asFile().isWithSnapshot());
    }
    byte[][] components=INode.getPathComponents(file1.toString());
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertEquals(getNumNonNull(nodesInPath),components.length - 1);
    assertSnapshot(nodesInPath,false,snapshot,-1);
    assertNull(nodesInPath.getINode(components.length - 1));
    assertEquals(nodesInPath.getINode(components.length - 2).getFullPathName(),sub1.toString());
    assertEquals(nodesInPath.getINode(components.length - 3).getFullPathName(),dir.toString());
    hdfs.deleteSnapshot(sub1,"s2");
    hdfs.disallowSnapshot(sub1);
  }
  private int getNumNonNull(  INodesInPath iip){
    for (int i=iip.length() - 1; i >= 0; i--) {
      if (iip.getINode(i) != null) {
        return i + 1;
      }
    }
    return 0;
  }
  /** 
 * for snapshot file while adding a new file after snapshot.
 */
  @Test(timeout=15000) public void testSnapshotPathINodesWithAddedFile() throws Exception {
    hdfs.allowSnapshot(sub1);
    hdfs.createSnapshot(sub1,"s4");
    final Path file3=new Path(sub1,"file3");
    DFSTestUtil.createFile(hdfs,file3,1024,REPLICATION,seed);
    Snapshot s4;
{
      String snapshotPath=sub1.toString() + "/.snapshot/s4/file3";
      byte[][] components=INode.getPathComponents(snapshotPath);
      INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
      assertEquals(nodesInPath.length(),components.length - 1);
      assertEquals(getNumNonNull(nodesInPath),components.length - 2);
      s4=getSnapshot(nodesInPath,"s4",3);
      assertSnapshot(nodesInPath,true,s4,3);
      assertNull(nodesInPath.getINode(nodesInPath.length() - 1));
    }
    byte[][] components=INode.getPathComponents(file3.toString());
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertSnapshot(nodesInPath,false,s4,-1);
    assertEquals(nodesInPath.getINode(components.length - 1).getFullPathName(),file3.toString());
    assertEquals(nodesInPath.getINode(components.length - 2).getFullPathName(),sub1.toString());
    assertEquals(nodesInPath.getINode(components.length - 3).getFullPathName(),dir.toString());
    hdfs.deleteSnapshot(sub1,"s4");
    hdfs.disallowSnapshot(sub1);
  }
  /** 
 * for snapshot file while modifying file after snapshot.
 */
  @Test(timeout=15000) public void testSnapshotPathINodesAfterModification() throws Exception {
    byte[][] components=INode.getPathComponents(file1.toString());
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length);
    assertEquals(nodesInPath.getINode(components.length - 1).getFullPathName(),file1.toString());
    final long modTime=nodesInPath.getINode(nodesInPath.length() - 1).getModificationTime();
    hdfs.allowSnapshot(sub1);
    hdfs.createSnapshot(sub1,"s3");
    DFSTestUtil.appendFile(hdfs,file1,"the content for appending");
    String snapshotPath=sub1.toString() + "/.snapshot/s3/file1";
    components=INode.getPathComponents(snapshotPath);
    INodesInPath ssNodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(ssNodesInPath.length(),components.length - 1);
    final Snapshot s3=getSnapshot(ssNodesInPath,"s3",3);
    assertSnapshot(ssNodesInPath,true,s3,3);
    INode snapshotFileNode=ssNodesInPath.getLastINode();
    assertEquals(snapshotFileNode.getLocalName(),file1.getName());
    assertTrue(snapshotFileNode.asFile().isWithSnapshot());
    assertEquals(modTime,snapshotFileNode.getModificationTime(ssNodesInPath.getPathSnapshotId()));
    components=INode.getPathComponents(file1.toString());
    INodesInPath newNodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertSnapshot(newNodesInPath,false,s3,-1);
    assertEquals(newNodesInPath.length(),components.length);
    final int last=components.length - 1;
    assertEquals(newNodesInPath.getINode(last).getFullPathName(),file1.toString());
    Assert.assertFalse(modTime == newNodesInPath.getINode(last).getModificationTime());
    hdfs.deleteSnapshot(sub1,"s3");
    hdfs.disallowSnapshot(sub1);
  }
  @Test public void testShortCircuitSnapshotSearch() throws SnapshotException {
    FSNamesystem fsn=cluster.getNamesystem();
    SnapshotManager sm=fsn.getSnapshotManager();
    assertEquals(0,sm.getNumSnapshottableDirs());
    INodesInPath iip=Mockito.mock(INodesInPath.class);
    List<INodeDirectory> snapDirs=new ArrayList<>();
    FSDirSnapshotOp.checkSnapshot(fsn.getFSDirectory(),iip,snapDirs);
    Mockito.verifyZeroInteractions(iip);
  }
}
