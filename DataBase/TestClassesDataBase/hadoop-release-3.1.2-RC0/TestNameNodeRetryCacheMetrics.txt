/** 
 * Tests for ensuring the namenode retry cache metrics works correctly for non-idempotent requests. Retry cache works based on tracking previously received request based on the ClientId and CallId received in RPC requests and storing the response. The response is replayed on retry when the same request is received again.
 */
public class TestNameNodeRetryCacheMetrics {
  private MiniDFSCluster cluster;
  private FSNamesystem namesystem;
  private DistributedFileSystem filesystem;
  private final int namenodeId=0;
  private Configuration conf;
  private RetryCacheMetrics metrics;
  private DFSClient client;
  /** 
 * Start a cluster 
 */
  @Before public void setup() throws Exception {
    conf=new HdfsConfiguration();
    conf.setBoolean(DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY,true);
    conf.setInt(HdfsClientConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY,2);
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(3).build();
    cluster.waitActive();
    cluster.transitionToActive(namenodeId);
    HATestUtil.setFailoverConfigurations(cluster,conf);
    filesystem=(DistributedFileSystem)HATestUtil.configureFailoverFs(cluster,conf);
    namesystem=cluster.getNamesystem(namenodeId);
    metrics=namesystem.getRetryCache().getMetricsForTests();
  }
  /** 
 * Cleanup after the test
 * @throws IOException
 */
  @After public void cleanup() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testRetryCacheMetrics() throws IOException {
    checkMetrics(0,0,0);
    trySaveNamespace();
    checkMetrics(2,0,1);
    namesystem.close();
    checkMetrics(2,1,1);
  }
  private void checkMetrics(  long hit,  long cleared,  long updated){
    assertEquals("CacheHit",hit,metrics.getCacheHit());
    assertEquals("CacheCleared",cleared,metrics.getCacheCleared());
    assertEquals("CacheUpdated",updated,metrics.getCacheUpdated());
  }
  private void trySaveNamespace() throws IOException {
    filesystem.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER);
    filesystem.saveNamespace();
    filesystem.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE);
  }
}
