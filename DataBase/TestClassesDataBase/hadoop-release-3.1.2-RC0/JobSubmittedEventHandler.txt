private static class JobSubmittedEventHandler implements EventHandler<JobHistoryEvent> {
  private String workflowId;
  private String workflowName;
  private String workflowNodeName;
  private String workflowAdjacencies;
  private String workflowTags;
  private Boolean assertBoolean;
  public JobSubmittedEventHandler(  String workflowId,  String workflowName,  String workflowNodeName,  String workflowAdjacencies,  String workflowTags){
    this.workflowId=workflowId;
    this.workflowName=workflowName;
    this.workflowNodeName=workflowNodeName;
    this.workflowAdjacencies=workflowAdjacencies;
    this.workflowTags=workflowTags;
    assertBoolean=null;
  }
  @Override public void handle(  JobHistoryEvent jhEvent){
    if (jhEvent.getType() != EventType.JOB_SUBMITTED) {
      return;
    }
    JobSubmittedEvent jsEvent=(JobSubmittedEvent)jhEvent.getHistoryEvent();
    if (!workflowId.equals(jsEvent.getWorkflowId())) {
      setAssertValue(false);
      return;
    }
    if (!workflowName.equals(jsEvent.getWorkflowName())) {
      setAssertValue(false);
      return;
    }
    if (!workflowNodeName.equals(jsEvent.getWorkflowNodeName())) {
      setAssertValue(false);
      return;
    }
    String[] wrkflowAdj=workflowAdjacencies.split(" ");
    String[] jswrkflowAdj=jsEvent.getWorkflowAdjacencies().split(" ");
    Arrays.sort(wrkflowAdj);
    Arrays.sort(jswrkflowAdj);
    if (!Arrays.equals(wrkflowAdj,jswrkflowAdj)) {
      setAssertValue(false);
      return;
    }
    if (!workflowTags.equals(jsEvent.getWorkflowTags())) {
      setAssertValue(false);
      return;
    }
    setAssertValue(true);
  }
  private synchronized void setAssertValue(  Boolean bool){
    assertBoolean=bool;
    notify();
  }
  public synchronized boolean getAssertValue() throws InterruptedException {
    while (assertBoolean == null) {
      wait();
    }
    return assertBoolean;
  }
}
