class ContainerLocalizerWrapper {
  AbstractFileSystem spylfs;
  Random random;
  List<Path> localDirs;
  Path tokenPath;
  LocalizationProtocol nmProxy;
  @SuppressWarnings("unchecked") FakeContainerLocalizer setupContainerLocalizerForTest() throws Exception {
    FileContext fs=FileContext.getLocalFSFileContext();
    spylfs=spy(fs.getDefaultFileSystem());
    doNothing().when(spylfs).mkdir(isA(Path.class),isA(FsPermission.class),anyBoolean());
    Configuration conf=new Configuration();
    FileContext lfs=FileContext.getFileContext(spylfs,conf);
    localDirs=new ArrayList<Path>();
    for (int i=0; i < 4; ++i) {
      localDirs.add(lfs.makeQualified(new Path(basedir,i + "")));
    }
    RecordFactory mockRF=getMockLocalizerRecordFactory();
    FakeContainerLocalizer concreteLoc=new FakeContainerLocalizer(lfs,appUser,appId,containerId,localDirs,mockRF);
    FakeContainerLocalizer localizer=spy(concreteLoc);
    random=new Random();
    long seed=random.nextLong();
    System.out.println("SEED: " + seed);
    random.setSeed(seed);
    DataInputBuffer appTokens=createFakeCredentials(random,10);
    tokenPath=lfs.makeQualified(new Path(String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,containerId)));
    doReturn(new FSDataInputStream(new FakeFSDataInputStream(appTokens))).when(spylfs).open(tokenPath);
    nmProxy=mock(LocalizationProtocol.class);
    doReturn(nmProxy).when(localizer).getProxy(nmAddr);
    doNothing().when(localizer).sleep(anyInt());
    return localizer;
  }
}
