public class TestFailoverController {
  private InetSocketAddress svc1Addr=new InetSocketAddress("svc1",1234);
  private InetSocketAddress svc2Addr=new InetSocketAddress("svc2",5678);
  private Configuration conf=new Configuration();
  HAServiceStatus STATE_NOT_READY=new HAServiceStatus(HAServiceState.STANDBY).setNotReadyToBecomeActive("injected not ready");
  @Test public void testFailoverAndFailback() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    AlwaysSucceedFencer.fenceCalled=0;
    doFailover(svc1,svc2,false,false);
    assertEquals(0,TestNodeFencer.AlwaysSucceedFencer.fenceCalled);
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.ACTIVE,svc2.state);
    AlwaysSucceedFencer.fenceCalled=0;
    doFailover(svc2,svc1,false,false);
    assertEquals(0,TestNodeFencer.AlwaysSucceedFencer.fenceCalled);
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testFailoverFromStandbyToStandby() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.STANDBY,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    doFailover(svc1,svc2,false,false);
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.ACTIVE,svc2.state);
  }
  @Test public void testFailoverFromActiveToActive() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.ACTIVE,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Can't failover to an already active service");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.ACTIVE,svc2.state);
  }
  @Test public void testFailoverWithoutPermission() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    Mockito.doThrow(new AccessControlException("Access denied")).when(svc1.proxy).getServiceStatus();
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new AccessControlException("Access denied")).when(svc2.proxy).getServiceStatus();
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Can't failover when access is denied");
    }
 catch (    FailoverFailedException ffe) {
      assertTrue(ffe.getCause().getMessage().contains("Access denied"));
    }
  }
  @Test public void testFailoverToUnreadyService() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doReturn(STATE_NOT_READY).when(svc2.proxy).getServiceStatus();
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Can't failover to a service that's not ready");
    }
 catch (    FailoverFailedException ffe) {
      if (!ffe.getMessage().contains("injected not ready")) {
        throw ffe;
      }
    }
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
    doFailover(svc1,svc2,false,true);
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.ACTIVE,svc2.state);
  }
  @Test public void testFailoverToUnhealthyServiceFailsAndFailsback() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new HealthCheckFailedException("Failed!")).when(svc2.proxy).monitorHealth();
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failover to unhealthy service");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testFailoverFromFaultyServiceSucceeds() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc1.proxy).transitionToStandby(anyReqInfo());
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    AlwaysSucceedFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc2,false,false);
    }
 catch (    FailoverFailedException ffe) {
      fail("Faulty active prevented failover");
    }
    assertEquals(1,AlwaysSucceedFencer.fenceCalled);
    assertSame(svc1,AlwaysSucceedFencer.fencedSvc);
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.ACTIVE,svc2.state);
  }
  @Test public void testFailoverFromFaultyServiceFencingFailure() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc1.proxy).transitionToStandby(anyReqInfo());
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysFailFencer.class.getName());
    AlwaysFailFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failed over even though fencing failed");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(1,AlwaysFailFencer.fenceCalled);
    assertSame(svc1,AlwaysFailFencer.fencedSvc);
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testFencingFailureDuringFailover() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysFailFencer.class.getName());
    AlwaysFailFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc2,true,false);
      fail("Failed over even though fencing requested and failed");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(1,AlwaysFailFencer.fenceCalled);
    assertSame(svc1,AlwaysFailFencer.fencedSvc);
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testFailoverFromNonExistantServiceWithFencer() throws Exception {
    DummyHAService svc1=spy(new DummyHAService(null,svc1Addr));
    HAServiceProtocol errorThrowingProxy=Mockito.mock(HAServiceProtocol.class,Mockito.withSettings().defaultAnswer(new ThrowsException(new IOException("Could not connect to host"))).extraInterfaces(Closeable.class));
    Mockito.doNothing().when((Closeable)errorThrowingProxy).close();
    Mockito.doReturn(errorThrowingProxy).when(svc1).getProxy(Mockito.<Configuration>any(),Mockito.anyInt());
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
    }
 catch (    FailoverFailedException ffe) {
      fail("Non-existant active prevented failover");
    }
    Mockito.verify(svc1).getProxy(Mockito.<Configuration>any(),Mockito.eq(CommonConfigurationKeys.HA_FC_GRACEFUL_FENCE_TIMEOUT_DEFAULT));
    assertEquals(HAServiceState.ACTIVE,svc2.state);
  }
  @Test public void testFailoverToNonExistantServiceFails() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=spy(new DummyHAService(null,svc2Addr));
    Mockito.doThrow(new IOException("Failed to connect")).when(svc2).getProxy(Mockito.<Configuration>any(),Mockito.anyInt());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failed over to a non-existant standby");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.ACTIVE,svc1.state);
  }
  @Test public void testFailoverToFaultyServiceFailsbackOK() throws Exception {
    DummyHAService svc1=spy(new DummyHAService(HAServiceState.ACTIVE,svc1Addr));
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc2.proxy).transitionToActive(anyReqInfo());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failover to already active service");
    }
 catch (    FailoverFailedException ffe) {
    }
    verify(svc1.proxy).transitionToStandby(anyReqInfo());
    verify(svc1.proxy).transitionToActive(anyReqInfo());
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testWeDontFailbackIfActiveWasFenced() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc2.proxy).transitionToActive(anyReqInfo());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,true,false);
      fail("Failed over to service that won't transition to active");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testWeFenceOnFailbackIfTransitionToActiveFails() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc2.proxy).transitionToActive(anyReqInfo());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    AlwaysSucceedFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failed over to service that won't transition to active");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    assertEquals(1,AlwaysSucceedFencer.fenceCalled);
    assertSame(svc2,AlwaysSucceedFencer.fencedSvc);
  }
  private StateChangeRequestInfo anyReqInfo(){
    return Mockito.<StateChangeRequestInfo>any();
  }
  @Test public void testFailureToFenceOnFailbackFailsTheFailback() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new IOException("Failed!")).when(svc2.proxy).transitionToActive(anyReqInfo());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysFailFencer.class.getName());
    AlwaysFailFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failed over to service that won't transition to active");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(1,AlwaysFailFencer.fenceCalled);
    assertSame(svc2,AlwaysFailFencer.fencedSvc);
  }
  @Test public void testFailbackToFaultyServiceFails() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc1.proxy).transitionToActive(anyReqInfo());
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    Mockito.doThrow(new ServiceFailedException("Failed!")).when(svc2.proxy).transitionToActive(anyReqInfo());
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    try {
      doFailover(svc1,svc2,false,false);
      fail("Failover to already active service");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(HAServiceState.STANDBY,svc1.state);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  @Test public void testSelfFailoverFails() throws Exception {
    DummyHAService svc1=new DummyHAService(HAServiceState.ACTIVE,svc1Addr);
    DummyHAService svc2=new DummyHAService(HAServiceState.STANDBY,svc2Addr);
    svc1.fencer=svc2.fencer=setupFencer(AlwaysSucceedFencer.class.getName());
    AlwaysSucceedFencer.fenceCalled=0;
    try {
      doFailover(svc1,svc1,false,false);
      fail("Can't failover to yourself");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(0,TestNodeFencer.AlwaysSucceedFencer.fenceCalled);
    assertEquals(HAServiceState.ACTIVE,svc1.state);
    try {
      doFailover(svc2,svc2,false,false);
      fail("Can't failover to yourself");
    }
 catch (    FailoverFailedException ffe) {
    }
    assertEquals(0,TestNodeFencer.AlwaysSucceedFencer.fenceCalled);
    assertEquals(HAServiceState.STANDBY,svc2.state);
  }
  private void doFailover(  HAServiceTarget tgt1,  HAServiceTarget tgt2,  boolean forceFence,  boolean forceActive) throws FailoverFailedException {
    FailoverController fc=new FailoverController(conf,RequestSource.REQUEST_BY_USER);
    fc.failover(tgt1,tgt2,forceFence,forceActive);
  }
}
