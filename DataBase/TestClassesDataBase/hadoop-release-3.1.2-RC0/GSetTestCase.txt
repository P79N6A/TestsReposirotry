/** 
 * Test cases 
 */
private static class GSetTestCase implements GSet<IntElement,IntElement> {
  final GSet<IntElement,IntElement> expected=new GSetByHashMap<IntElement,IntElement>(1024,0.75f);
  final GSet<IntElement,IntElement> gset;
  final IntData data;
  final String info;
  final long starttime=Time.now();
  /** 
 * Determine the probability in  {@link #check()}. 
 */
  final int denominator;
  int iterate_count=0;
  int contain_count=0;
  GSetTestCase(  int tablelength,  int datasize,  int modulus){
    this(tablelength,datasize,modulus,false);
  }
  GSetTestCase(  int tablelength,  int datasize,  int modulus,  boolean resizable){
    denominator=Math.min((datasize >> 7) + 1,1 << 16);
    info=getClass().getSimpleName() + ": tablelength=" + tablelength+ ", datasize="+ datasize+ ", modulus="+ modulus+ ", denominator="+ denominator;
    println(info);
    data=new IntData(datasize,modulus);
    gset=resizable ? new LightWeightResizableGSet<IntElement,IntElement>() : new LightWeightGSet<IntElement,IntElement>(tablelength);
    Assert.assertEquals(0,gset.size());
  }
  private boolean containsTest(  IntElement key){
    final boolean e=expected.contains(key);
    Assert.assertEquals(e,gset.contains(key));
    return e;
  }
  @Override public boolean contains(  IntElement key){
    final boolean e=containsTest(key);
    check();
    return e;
  }
  private IntElement getTest(  IntElement key){
    final IntElement e=expected.get(key);
    Assert.assertEquals(e.id,gset.get(key).id);
    return e;
  }
  @Override public IntElement get(  IntElement key){
    final IntElement e=getTest(key);
    check();
    return e;
  }
  private IntElement putTest(  IntElement element){
    final IntElement e=expected.put(element);
    if (e == null) {
      Assert.assertEquals(null,gset.put(element));
    }
 else {
      Assert.assertEquals(e.id,gset.put(element).id);
    }
    return e;
  }
  @Override public IntElement put(  IntElement element){
    final IntElement e=putTest(element);
    check();
    return e;
  }
  private IntElement removeTest(  IntElement key){
    final IntElement e=expected.remove(key);
    if (e == null) {
      Assert.assertEquals(null,gset.remove(key));
    }
 else {
      Assert.assertEquals(e.id,gset.remove(key).id);
    }
    return e;
  }
  @Override public IntElement remove(  IntElement key){
    final IntElement e=removeTest(key);
    check();
    return e;
  }
  private int sizeTest(){
    final int s=expected.size();
    Assert.assertEquals(s,gset.size());
    return s;
  }
  @Override public int size(){
    final int s=sizeTest();
    check();
    return s;
  }
  @Override public Iterator<IntElement> iterator(){
    throw new UnsupportedOperationException();
  }
  void check(){
    sizeTest();
    if (ran.nextInt(denominator) == 0) {
      iterate_count++;
      for (      IntElement i : gset) {
        getTest(i);
      }
    }
    if (ran.nextInt(denominator) == 0) {
      contain_count++;
      final int count=Math.min(data.size(),1000);
      if (count == data.size()) {
        for (        IntElement i : data.integers) {
          containsTest(i);
        }
      }
 else {
        for (int j=0; j < count; j++) {
          containsTest(data.get(ran.nextInt(data.size())));
        }
      }
    }
  }
  String stat(){
    final long t=Time.now() - starttime;
    return String.format(" iterate=%5d, contain=%5d, time elapsed=%5d.%03ds",iterate_count,contain_count,t / 1000,t % 1000);
  }
  @Override public void clear(){
    expected.clear();
    gset.clear();
    Assert.assertEquals(0,size());
  }
  @Override public Collection<IntElement> values(){
    throw new UnsupportedOperationException();
  }
}
