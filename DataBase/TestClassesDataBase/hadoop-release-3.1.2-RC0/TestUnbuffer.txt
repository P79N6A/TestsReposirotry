public class TestUnbuffer {
  private static final Log LOG=LogFactory.getLog(TestUnbuffer.class.getName());
  @Rule public ExpectedException exception=ExpectedException.none();
  /** 
 * Test that calling Unbuffer closes sockets.
 */
  @Test public void testUnbufferClosesSockets() throws Exception {
    Configuration conf=new Configuration();
    conf.set(HdfsClientConfigKeys.DFS_CLIENT_CONTEXT,"testUnbufferClosesSocketsContext");
    conf.setBoolean(HdfsClientConfigKeys.Read.ShortCircuit.KEY,false);
    conf.setLong(HdfsClientConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,100000000L);
    conf.setLong(HdfsClientConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY,100000000L);
    MiniDFSCluster cluster=null;
    FSDataInputStream stream=null;
    try {
      cluster=new MiniDFSCluster.Builder(conf).build();
      DistributedFileSystem dfs=(DistributedFileSystem)FileSystem.newInstance(conf);
      final Path TEST_PATH=new Path("/test1");
      DFSTestUtil.createFile(dfs,TEST_PATH,128,(short)1,1);
      stream=dfs.open(TEST_PATH);
      stream.seek(2);
      int b=stream.read();
      Assert.assertTrue(-1 != b);
      PeerCache cache=dfs.getClient().getClientContext().getPeerCache();
      Assert.assertEquals(0,cache.size());
      stream.unbuffer();
      stream.seek(2);
      Assert.assertEquals(1,cache.size());
      int b2=stream.read();
      Assert.assertEquals(b,b2);
    }
  finally {
      if (stream != null) {
        IOUtils.cleanup(null,stream);
      }
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * Test opening many files via TCP (not short-circuit). This is practical when using unbuffer, because it reduces the number of sockets and amount of memory that we use.
 */
  @Test public void testOpenManyFilesViaTcp() throws Exception {
    final int NUM_OPENS=500;
    Configuration conf=new Configuration();
    conf.setBoolean(HdfsClientConfigKeys.Read.ShortCircuit.KEY,false);
    MiniDFSCluster cluster=null;
    FSDataInputStream[] streams=new FSDataInputStream[NUM_OPENS];
    try {
      cluster=new MiniDFSCluster.Builder(conf).build();
      DistributedFileSystem dfs=cluster.getFileSystem();
      final Path TEST_PATH=new Path("/testFile");
      DFSTestUtil.createFile(dfs,TEST_PATH,131072,(short)1,1);
      for (int i=0; i < NUM_OPENS; i++) {
        streams[i]=dfs.open(TEST_PATH);
        LOG.info("opening file " + i + "...");
        Assert.assertTrue(-1 != streams[i].read());
        streams[i].unbuffer();
      }
    }
  finally {
      for (      FSDataInputStream stream : streams) {
        IOUtils.cleanup(null,stream);
      }
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * Test that a InputStream should throw an exception when not implementing CanUnbuffer This should throw an exception when the stream claims to have the unbuffer capability, but actually does not implement CanUnbuffer.
 */
  @Test public void testUnbufferException(){
abstract class BuggyStream extends FSInputStream implements StreamCapabilities {
    }
    BuggyStream bs=Mockito.mock(BuggyStream.class);
    Mockito.when(bs.hasCapability(Mockito.anyString())).thenReturn(true);
    exception.expect(UnsupportedOperationException.class);
    exception.expectMessage(StreamCapabilitiesPolicy.CAN_UNBUFFER_NOT_IMPLEMENTED_MESSAGE);
    FSDataInputStream fs=new FSDataInputStream(bs);
    fs.unbuffer();
  }
}
