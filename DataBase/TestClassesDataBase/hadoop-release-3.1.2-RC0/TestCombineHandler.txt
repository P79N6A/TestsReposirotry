@SuppressWarnings({"rawtypes","unchecked","deprecation"}) public class TestCombineHandler {
  private CombinerHandler handler;
  private INativeHandler nativeHandler;
  private BufferPusher pusher;
  private BufferPuller puller;
  private CombinerRunner combinerRunner;
  @Before public void setUp() throws IOException {
    this.nativeHandler=Mockito.mock(INativeHandler.class);
    this.pusher=Mockito.mock(BufferPusher.class);
    this.puller=Mockito.mock(BufferPuller.class);
    this.combinerRunner=Mockito.mock(CombinerRunner.class);
    Mockito.when(nativeHandler.getInputBuffer()).thenReturn(new InputBuffer(BufferType.HEAP_BUFFER,100));
  }
  @Test public void testCommandDispatcherSetting() throws IOException {
    this.handler=new CombinerHandler(nativeHandler,combinerRunner,puller,pusher);
    Mockito.verify(nativeHandler,Mockito.times(1)).setCommandDispatcher(Matchers.eq(handler));
    Mockito.verify(nativeHandler,Mockito.times(1)).setDataReceiver(Matchers.eq(puller));
  }
  @Test public void testCombine() throws IOException, InterruptedException, ClassNotFoundException {
    this.handler=new CombinerHandler(nativeHandler,combinerRunner,puller,pusher);
    Assert.assertEquals(null,handler.onCall(CombinerHandler.COMBINE,null));
    handler.close();
    handler.close();
    Mockito.verify(combinerRunner,Mockito.times(1)).combine(Matchers.eq(puller),Matchers.eq(pusher));
    Mockito.verify(pusher,Mockito.times(1)).close();
    Mockito.verify(puller,Mockito.times(1)).close();
    Mockito.verify(nativeHandler,Mockito.times(1)).close();
  }
  @Test public void testOnCall() throws IOException {
    this.handler=new CombinerHandler(nativeHandler,combinerRunner,puller,pusher);
    Assert.assertEquals(null,handler.onCall(new Command(-1),null));
  }
}
