/** 
 * Tests that S3A is usable through a YARN application.
 */
public class ITestS3AMiniYarnCluster extends AbstractS3ATestBase {
  private final Configuration conf=new YarnConfiguration();
  private S3AFileSystem fs;
  private MiniYARNCluster yarnCluster;
  private Path rootPath;
  @Override public void setup() throws Exception {
    super.setup();
    fs=S3ATestUtils.createTestFileSystem(conf);
    rootPath=path("MiniClusterWordCount");
    Path workingDir=path("working");
    fs.setWorkingDirectory(workingDir);
    fs.mkdirs(new Path(rootPath,"input/"));
    yarnCluster=new MiniYARNCluster("MiniClusterWordCount",1,1,1);
    yarnCluster.init(conf);
    yarnCluster.start();
  }
  @Override public void teardown() throws Exception {
    if (yarnCluster != null) {
      yarnCluster.stop();
    }
    super.teardown();
  }
  @Test public void testWithMiniCluster() throws Exception {
    Path input=new Path(rootPath,"input/in.txt");
    input=input.makeQualified(fs.getUri(),fs.getWorkingDirectory());
    Path output=new Path(rootPath,"output/");
    output=output.makeQualified(fs.getUri(),fs.getWorkingDirectory());
    writeStringToFile(input,"first line\nsecond line\nthird line");
    Job job=Job.getInstance(conf,"word count");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(WordCount.TokenizerMapper.class);
    job.setCombinerClass(WordCount.IntSumReducer.class);
    job.setReducerClass(WordCount.IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job,input);
    FileOutputFormat.setOutputPath(job,output);
    int exitCode=(job.waitForCompletion(true) ? 0 : 1);
    assertEquals("Returned error code.",0,exitCode);
    assertTrue(fs.exists(new Path(output,"_SUCCESS")));
    String outputAsStr=readStringFromFile(new Path(output,"part-r-00000"));
    Map<String,Integer> resAsMap=getResultAsMap(outputAsStr);
    assertEquals(4,resAsMap.size());
    assertEquals(1,(int)resAsMap.get("first"));
    assertEquals(1,(int)resAsMap.get("second"));
    assertEquals(1,(int)resAsMap.get("third"));
    assertEquals(3,(int)resAsMap.get("line"));
  }
  /** 
 * helper method.
 */
  private Map<String,Integer> getResultAsMap(  String outputAsStr) throws IOException {
    Map<String,Integer> result=new HashMap<>();
    for (    String line : outputAsStr.split("\n")) {
      String[] tokens=line.split("\t");
      assertTrue("Not enough tokens in in string \" " + line + "\" from output \""+ outputAsStr+ "\"",tokens.length > 1);
      result.put(tokens[0],Integer.parseInt(tokens[1]));
    }
    return result;
  }
  /** 
 * helper method.
 */
  private void writeStringToFile(  Path path,  String string) throws IOException {
    FileContext fc=S3ATestUtils.createTestFileContext(conf);
    try (FSDataOutputStream file=fc.create(path,EnumSet.of(CreateFlag.CREATE))){
      file.write(string.getBytes());
    }
   }
  /** 
 * helper method.
 */
  private String readStringFromFile(  Path path) throws IOException {
    try (FSDataInputStream in=fs.open(path)){
      long bytesLen=fs.getFileStatus(path).getLen();
      byte[] buffer=new byte[(int)bytesLen];
      IOUtils.readFully(in,buffer,0,buffer.length);
      return new String(buffer);
    }
   }
}
