public class TestProtoUtil {
  /** 
 * Values to test encoding as variable length integers
 */
  private static final int[] TEST_VINT_VALUES=new int[]{0,1,-1,127,128,129,255,256,257,0x1234,-0x1234,0x123456,-0x123456,0x12345678,-0x12345678};
  /** 
 * Test that readRawVarint32 is compatible with the varints encoded by ProtoBuf's CodedOutputStream.
 */
  @Test public void testVarInt() throws IOException {
    for (    int value : TEST_VINT_VALUES) {
      doVarIntTest(value);
    }
    for (int i=1; i != 0; i<<=1) {
      doVarIntTest(i);
      doVarIntTest(-i);
      doVarIntTest(i - 1);
      doVarIntTest(~i);
    }
  }
  private void doVarIntTest(  int value) throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    CodedOutputStream cout=CodedOutputStream.newInstance(baos);
    cout.writeRawVarint32(value);
    cout.flush();
    DataInputStream dis=new DataInputStream(new ByteArrayInputStream(baos.toByteArray()));
    assertEquals(value,ProtoUtil.readRawVarint32(dis));
  }
  @Test public void testRpcClientId(){
    byte[] uuid=ClientId.getClientId();
    RpcRequestHeaderProto header=ProtoUtil.makeRpcRequestHeader(RpcKind.RPC_PROTOCOL_BUFFER,OperationProto.RPC_FINAL_PACKET,0,RpcConstants.INVALID_RETRY_COUNT,uuid);
    assertTrue(Arrays.equals(uuid,header.getClientId().toByteArray()));
  }
}
