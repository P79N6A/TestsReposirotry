/** 
 * This class tests that the DFS command mkdirs only creates valid directories, and generally behaves as expected.
 */
public class TestDFSMkdirs {
  private final Configuration conf=new HdfsConfiguration();
  private static final String[] NON_CANONICAL_PATHS=new String[]{"//test1","/test2/..","/test2//bar","/test2/../test4","/test5/."};
  /** 
 * Tests mkdirs can create a directory that does not exist and will not create a subdirectory off a file. Regression test for HADOOP-281.
 */
  @Test public void testDFSMkdirs() throws IOException {
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    FileSystem fileSys=cluster.getFileSystem();
    try {
      Path myPath=new Path("/test/mkdirs");
      assertTrue(fileSys.mkdirs(myPath));
      assertTrue(fileSys.exists(myPath));
      assertTrue(fileSys.mkdirs(myPath));
      Path myFile=new Path("/test/mkdirs/myFile");
      DFSTestUtil.writeFile(fileSys,myFile,"hello world");
      Path myIllegalPath=new Path("/test/mkdirs/myFile/subdir");
      Boolean exist=true;
      try {
        fileSys.mkdirs(myIllegalPath);
      }
 catch (      IOException e) {
        exist=false;
      }
      assertFalse(exist);
      assertFalse(fileSys.exists(myIllegalPath));
      fileSys.delete(myFile,true);
    }
  finally {
      fileSys.close();
      cluster.shutdown();
    }
  }
  /** 
 * Tests mkdir will not create directory when parent is missing.
 */
  @Test public void testMkdir() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    DistributedFileSystem dfs=cluster.getFileSystem();
    try {
      assertTrue(dfs.mkdir(new Path("/mkdir-" + Time.now()),FsPermission.getDefault()));
      IOException expectedException=null;
      String filePath="/mkdir-file-" + Time.now();
      DFSTestUtil.writeFile(dfs,new Path(filePath),"hello world");
      try {
        dfs.mkdir(new Path(filePath + "/mkdir"),FsPermission.getDefault());
      }
 catch (      IOException e) {
        expectedException=e;
      }
      assertTrue("Create a directory when parent dir exists as file using" + " mkdir() should throw ParentNotDirectoryException ",expectedException != null && expectedException instanceof ParentNotDirectoryException);
      expectedException=null;
      try {
        dfs.mkdir(new Path("/non-exist/mkdir-" + Time.now()),FsPermission.getDefault());
      }
 catch (      IOException e) {
        expectedException=e;
      }
      assertTrue("Create a directory in a non-exist parent dir using" + " mkdir() should throw FileNotFoundException ",expectedException != null && expectedException instanceof FileNotFoundException);
    }
  finally {
      dfs.close();
      cluster.shutdown();
    }
  }
  /** 
 * Regression test for HDFS-3626. Creates a file using a non-canonical path (i.e. with extra slashes between components) and makes sure that the NN rejects it.
 */
  @Test public void testMkdirRpcNonCanonicalPath() throws IOException {
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
    try {
      NamenodeProtocols nnrpc=cluster.getNameNodeRpc();
      for (      String pathStr : NON_CANONICAL_PATHS) {
        try {
          nnrpc.mkdirs(pathStr,new FsPermission((short)0755),true);
          fail("Did not fail when called with a non-canonicalized path: " + pathStr);
        }
 catch (        InvalidPathException ipe) {
        }
      }
    }
  finally {
      cluster.shutdown();
    }
  }
}
