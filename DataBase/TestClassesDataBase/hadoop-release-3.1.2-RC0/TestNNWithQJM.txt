public class TestNNWithQJM {
  final Configuration conf=new HdfsConfiguration();
  private MiniJournalCluster mjc=null;
  private final Path TEST_PATH=new Path("/test-dir");
  private final Path TEST_PATH_2=new Path("/test-dir-2");
  @Before public void resetSystemExit(){
    ExitUtil.resetFirstExitException();
  }
  @Before public void startJNs() throws Exception {
    mjc=new MiniJournalCluster.Builder(conf).build();
    mjc.waitActive();
  }
  @After public void stopJNs() throws Exception {
    if (mjc != null) {
      mjc.shutdown();
      mjc=null;
    }
  }
  @Test(timeout=30000) public void testLogAndRestart() throws IOException {
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,MiniDFSCluster.getBaseDirectory() + "/TestNNWithQJM/image");
    conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI("myjournal").toString());
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build();
    try {
      cluster.getFileSystem().mkdirs(TEST_PATH);
      cluster.restartNameNode();
      assertTrue(cluster.getFileSystem().exists(TEST_PATH));
      cluster.getFileSystem().mkdirs(TEST_PATH_2);
      cluster.restartNameNode();
      assertTrue(cluster.getFileSystem().exists(TEST_PATH));
      assertTrue(cluster.getFileSystem().exists(TEST_PATH_2));
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test(timeout=30000) public void testNewNamenodeTakesOverWriter() throws Exception {
    File nn1Dir=new File(MiniDFSCluster.getBaseDirectory() + "/TestNNWithQJM/image-nn1");
    File nn2Dir=new File(MiniDFSCluster.getBaseDirectory() + "/TestNNWithQJM/image-nn2");
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nn1Dir.getAbsolutePath());
    conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI("myjournal").toString());
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).checkExitOnShutdown(false).build();
    cluster.shutdown();
    try {
      FileUtil.fullyDelete(nn2Dir);
      FileUtil.copy(nn1Dir,FileSystem.getLocal(conf).getRaw(),new Path(nn2Dir.getAbsolutePath()),false,conf);
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageNameDfsDirs(false).checkExitOnShutdown(false).build();
      cluster.getFileSystem().mkdirs(TEST_PATH);
      Configuration conf2=new Configuration();
      conf2.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nn2Dir.getAbsolutePath());
      conf2.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI("myjournal").toString());
      MiniDFSCluster cluster2=new MiniDFSCluster.Builder(conf2).numDataNodes(0).format(false).manageNameDfsDirs(false).build();
      try {
        assertTrue(cluster2.getFileSystem().exists(TEST_PATH));
      }
  finally {
        cluster2.shutdown();
      }
      try {
        cluster.getFileSystem().mkdirs(new Path("/x"));
        fail("Did not abort trying to write to a fenced NN");
      }
 catch (      RemoteException re) {
        GenericTestUtils.assertExceptionContains("Could not sync enough journals to persistent storage",re);
      }
    }
  finally {
    }
  }
  @Test(timeout=30000) public void testMismatchedNNIsRejected() throws Exception {
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,MiniDFSCluster.getBaseDirectory() + "/TestNNWithQJM/image");
    String defaultEditsDir=conf.get(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY);
    conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI("myjournal").toString());
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build();
    cluster.shutdown();
    Configuration onDiskOnly=new Configuration(conf);
    onDiskOnly.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,defaultEditsDir);
    NameNode.format(onDiskOnly);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).format(false).build();
      fail("New NN with different namespace should have been rejected");
    }
 catch (    IOException ioe) {
      GenericTestUtils.assertExceptionContains("Unable to start log segment 1: too few journals",ioe);
    }
  }
}
