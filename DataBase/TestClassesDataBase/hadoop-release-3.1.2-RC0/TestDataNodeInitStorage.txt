/** 
 * Test to verify that the DataNode Uuid is correctly initialized before FsDataSet initialization.
 */
public class TestDataNodeInitStorage {
  public static final Log LOG=LogFactory.getLog(TestDataNodeInitStorage.class);
static private class SimulatedFsDatasetVerifier extends SimulatedFSDataset {
static class Factory extends FsDatasetSpi.Factory<SimulatedFSDataset> {
      @Override public SimulatedFsDatasetVerifier newInstance(      DataNode datanode,      DataStorage storage,      Configuration conf) throws IOException {
        return new SimulatedFsDatasetVerifier(storage,conf);
      }
      @Override public boolean isSimulated(){
        return true;
      }
    }
    public static void setFactory(    Configuration conf){
      conf.set(DFSConfigKeys.DFS_DATANODE_FSDATASET_FACTORY_KEY,Factory.class.getName());
    }
    public SimulatedFsDatasetVerifier(    DataStorage storage,    Configuration conf){
      super(storage,conf);
      LOG.info("Assigned DatanodeUuid is " + storage.getDatanodeUuid());
      assert (storage.getDatanodeUuid() != null);
      assert (storage.getDatanodeUuid().length() != 0);
    }
  }
  @Test(timeout=60000) public void testDataNodeInitStorage() throws Throwable {
    Configuration conf=new HdfsConfiguration();
    SimulatedFsDatasetVerifier.setFactory(conf);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    cluster.shutdown();
  }
}
