/** 
 * Handle OOB IO into a shared container.
 */
public class ITestAzureConcurrentOutOfBandIo extends AbstractWasbTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(ITestAzureConcurrentOutOfBandIo.class);
  static final int DOWNLOAD_BLOCK_SIZE=8 * 1024 * 1024;
  static final int UPLOAD_BLOCK_SIZE=4 * 1024 * 1024;
  static final int BLOB_SIZE=32 * 1024 * 1024;
  static final int NUMBER_OF_BLOCKS=2;
  @Override protected AzureBlobStorageTestAccount createTestAccount() throws Exception {
    return AzureBlobStorageTestAccount.createOutOfBandStore(UPLOAD_BLOCK_SIZE,DOWNLOAD_BLOCK_SIZE);
  }
class DataBlockWriter implements Runnable {
    Thread runner;
    AzureBlobStorageTestAccount writerStorageAccount;
    String key;
    boolean done=false;
    /** 
 * Constructor captures the test account.
 * @param testAccount
 */
    public DataBlockWriter(    AzureBlobStorageTestAccount testAccount,    String key){
      writerStorageAccount=testAccount;
      this.key=key;
    }
    /** 
 * Start writing blocks to Azure storage.
 */
    public void startWriting(){
      runner=new Thread(this);
      runner.start();
    }
    /** 
 * Stop writing blocks to Azure storage.
 */
    public void stopWriting(){
      done=true;
    }
    /** 
 * Implementation of the runnable interface. The run method is a tight loop which repeatedly updates the blob with a 4 MB block.
 */
    public void run(){
      byte[] dataBlockWrite=new byte[UPLOAD_BLOCK_SIZE];
      OutputStream outputStream=null;
      try {
        for (int i=0; !done; i++) {
          outputStream=writerStorageAccount.getStore().storefile(key,new PermissionStatus("","",FsPermission.getDefault()),key);
          Arrays.fill(dataBlockWrite,(byte)(i % 256));
          for (int j=0; j < NUMBER_OF_BLOCKS; j++) {
            outputStream.write(dataBlockWrite);
          }
          outputStream.flush();
          outputStream.close();
        }
      }
 catch (      AzureException e) {
        LOG.error("DatablockWriter thread encountered a storage exception." + e.getMessage(),e);
      }
catch (      IOException e) {
        LOG.error("DatablockWriter thread encountered an I/O exception." + e.getMessage(),e);
      }
    }
  }
  @Test public void testReadOOBWrites() throws Exception {
    byte[] dataBlockWrite=new byte[UPLOAD_BLOCK_SIZE];
    byte[] dataBlockRead=new byte[UPLOAD_BLOCK_SIZE];
    String key="WASB_String" + AzureTestUtils.getForkID() + ".txt";
    OutputStream outputStream=testAccount.getStore().storefile(key,new PermissionStatus("","",FsPermission.getDefault()),key);
    Arrays.fill(dataBlockWrite,(byte)255);
    for (int i=0; i < NUMBER_OF_BLOCKS; i++) {
      outputStream.write(dataBlockWrite);
    }
    outputStream.flush();
    outputStream.close();
    DataBlockWriter writeBlockTask=new DataBlockWriter(testAccount,key);
    writeBlockTask.startWriting();
    int count=0;
    for (int i=0; i < 5; i++) {
      try (InputStream inputStream=testAccount.getStore().retrieve(key)){
        count=0;
        int c=0;
        while (c >= 0) {
          c=inputStream.read(dataBlockRead,0,UPLOAD_BLOCK_SIZE);
          if (c < 0) {
            break;
          }
          count+=c;
        }
      }
 catch (      IOException e) {
        System.out.println(e.getCause().toString());
        e.printStackTrace();
        fail();
      }
    }
    writeBlockTask.stopWriting();
    assertEquals(NUMBER_OF_BLOCKS * UPLOAD_BLOCK_SIZE,count);
  }
}
