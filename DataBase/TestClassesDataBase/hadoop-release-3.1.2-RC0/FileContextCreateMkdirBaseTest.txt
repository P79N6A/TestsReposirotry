/** 
 * <p> A collection of tests for the  {@link FileContext}, create method This test should be used for testing an instance of FileContext that has been initialized to a specific default FileSystem such a LocalFileSystem, HDFS,S3, etc. </p> <p> To test a given  {@link FileSystem} implementation create a subclass of thistest and override  {@link #setUp()} to initialize the <code>fc</code> {@link FileContext} instance variable.Since this a junit 4 you can also do a single setup before  the start of any tests. E.g.
 * @BeforeClass   public static void clusterSetupAtBegining()
 * @AfterClass    public static void ClusterShutdownAtEnd()</p>
 */
public abstract class FileContextCreateMkdirBaseTest {
  protected final FileContextTestHelper fileContextTestHelper;
  protected static FileContext fc;
static {
    GenericTestUtils.setLogLevel(FileSystem.LOG,Level.DEBUG);
  }
  public FileContextCreateMkdirBaseTest(){
    fileContextTestHelper=createFileContextHelper();
  }
  protected FileContextTestHelper createFileContextHelper(){
    return new FileContextTestHelper();
  }
  @Before public void setUp() throws Exception {
    fc.mkdir(getTestRootPath(fc),FileContext.DEFAULT_PERM,true);
  }
  @After public void tearDown() throws Exception {
    fc.delete(getTestRootPath(fc),true);
  }
  @Test public void testMkdirNonRecursiveWithExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"aDir");
    fc.mkdir(f,FileContext.DEFAULT_PERM,false);
    Assert.assertTrue(isDir(fc,f));
  }
  @Test public void testMkdirNonRecursiveWithNonExistingDir(){
    try {
      fc.mkdir(getTestRootPath(fc,"NonExistant/aDir"),FileContext.DEFAULT_PERM,false);
      Assert.fail("Mkdir with non existing parent dir should have failed");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testMkdirRecursiveWithExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"aDir");
    fc.mkdir(f,FileContext.DEFAULT_PERM,true);
    Assert.assertTrue(isDir(fc,f));
  }
  @Test public void testMkdirRecursiveWithNonExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"NonExistant2/aDir");
    fc.mkdir(f,FileContext.DEFAULT_PERM,true);
    Assert.assertTrue(isDir(fc,f));
  }
  @Test public void testMkdirsRecursiveWithExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"aDir/bDir/cDir");
    fc.mkdir(f,FileContext.DEFAULT_PERM,true);
    assertIsDirectory(fc.getFileStatus(f));
    assertIsDirectory(fc.getFileStatus(f.getParent()));
    assertIsDirectory(fc.getFileStatus(f.getParent().getParent()));
  }
  @Test public void testMkdirRecursiveWithExistingFile() throws IOException {
    Path f=getTestRootPath(fc,"NonExistant3/aDir");
    fc.mkdir(f,FileContext.DEFAULT_PERM,true);
    assertIsDirectory(fc.getFileStatus(f));
    assertIsDirectory(fc.getFileStatus(f.getParent()));
    Path filePath=new Path(f.getParent(),"test.txt");
    createFile(fc,filePath);
    assertIsFile(filePath,fc.getFileStatus(filePath));
    Path dirPath=new Path(filePath,"bDir/cDir");
    try {
      fc.mkdir(dirPath,FileContext.DEFAULT_PERM,true);
      Assert.fail("Mkdir for " + dirPath + " should have failed as a file was present");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testWithRename() throws IOException, InterruptedException {
    Path root=getTestRootPath(fc);
    Path f=new Path(root,"d1/d2/d3");
    fc.mkdir(f,FileContext.DEFAULT_PERM,true);
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2/d3")));
    Path fPath=new Path(root,"d1/d2/f.txt");
    createFile(fc,fPath);
    assertIsFile(fPath,fc.getFileStatus(fPath));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2/d3")));
    Path f2Path=new Path(getTestRootPath(fc),"d1/d2/d3/f2.txt");
    createFile(fc,f2Path);
    assertIsFile(fPath,fc.getFileStatus(f2Path));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d2/d3")));
    fc.rename(new Path(root,"d1/d2/d3"),new Path(root,"d1/d4"));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1")));
    assertIsDirectory(fc.getFileStatus(new Path(root,"d1/d4")));
    Path f2NewPath=new Path(root,"d1/d4/f2.txt");
    assertIsFile(f2NewPath,fc.getFileStatus(f2NewPath));
  }
  @Test public void testCreateNonRecursiveWithExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"foo");
    createFile(fc,f);
    Assert.assertTrue(isFile(fc,f));
  }
  @Test public void testCreateNonRecursiveWithNonExistingDir(){
    try {
      createFileNonRecursive(fc,getTestRootPath(fc,"NonExisting/foo"));
      Assert.fail("Create with non existing parent dir should have failed");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testCreateRecursiveWithExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"foo");
    createFile(fc,f);
    Assert.assertTrue(isFile(fc,f));
  }
  @Test public void testCreateRecursiveWithNonExistingDir() throws IOException {
    Path f=getTestRootPath(fc,"NonExisting/foo");
    createFile(fc,f);
    Assert.assertTrue(isFile(fc,f));
  }
  private Path getTestRootPath(  FileContext fc){
    return fileContextTestHelper.getTestRootPath(fc);
  }
  private Path getTestRootPath(  FileContext fc,  String pathString){
    return fileContextTestHelper.getTestRootPath(fc,pathString);
  }
}
