public class TestLdapGroupsMappingBase {
  @Mock private DirContext context;
  @Mock private NamingEnumeration<SearchResult> userNames;
  @Mock private NamingEnumeration<SearchResult> groupNames;
  @Mock private NamingEnumeration<SearchResult> parentGroupNames;
  @Mock private SearchResult userSearchResult;
  @Mock private Attributes attributes;
  @Spy private LdapGroupsMapping groupsMapping=new LdapGroupsMapping();
  private String[] testGroups=new String[]{"group1","group2"};
  private String[] testParentGroups=new String[]{"group1","group2","group1_1"};
  @Before public void setupMocksBase() throws NamingException {
    MockitoAnnotations.initMocks(this);
    DirContext ctx=getContext();
    when(ctx.search(Mockito.anyString(),Mockito.anyString(),Mockito.any(Object[].class),Mockito.any(SearchControls.class))).thenReturn(userNames);
    when(userNames.hasMoreElements()).thenReturn(true);
    SearchResult groupSearchResult=mock(SearchResult.class);
    when(groupNames.hasMoreElements()).thenReturn(true,true,false);
    when(groupNames.nextElement()).thenReturn(groupSearchResult);
    Attribute group1Attr=new BasicAttribute("cn");
    group1Attr.add(testGroups[0]);
    Attributes group1Attrs=new BasicAttributes();
    group1Attrs.put(group1Attr);
    Attribute group2Attr=new BasicAttribute("cn");
    group2Attr.add(testGroups[1]);
    Attributes group2Attrs=new BasicAttributes();
    group2Attrs.put(group2Attr);
    when(groupSearchResult.getAttributes()).thenReturn(group1Attrs,group2Attrs);
    when(getUserNames().nextElement()).thenReturn(getUserSearchResult());
    when(getUserSearchResult().getAttributes()).thenReturn(getAttributes());
    SearchResult parentGroupResult=mock(SearchResult.class);
    when(parentGroupNames.hasMoreElements()).thenReturn(true,false);
    when(parentGroupNames.nextElement()).thenReturn(parentGroupResult);
    Attribute parentGroup1Attr=new BasicAttribute("cn");
    parentGroup1Attr.add(testParentGroups[2]);
    Attributes parentGroup1Attrs=new BasicAttributes();
    parentGroup1Attrs.put(parentGroup1Attr);
    when(parentGroupResult.getAttributes()).thenReturn(parentGroup1Attrs);
    when(parentGroupResult.getNameInNamespace()).thenReturn("CN=some_group,DC=test,DC=com");
  }
  protected Configuration getBaseConf(){
    return getBaseConf("ldap://test");
  }
  protected Configuration getBaseConf(  String ldapUrl){
    return getBaseConf(ldapUrl,getContext());
  }
  protected Configuration getBaseConf(  String ldapUrl,  DirContext contextToReturn){
    DummyLdapCtxFactory.setContextToReturn(contextToReturn);
    DummyLdapCtxFactory.setExpectedLdapUrl(ldapUrl);
    Configuration conf=new Configuration();
    conf.set(LDAP_URL_KEY,ldapUrl);
    conf.setClass(LDAP_CTX_FACTORY_CLASS_KEY,DummyLdapCtxFactory.class,InitialContextFactory.class);
    return conf;
  }
  protected DirContext getContext(){
    return context;
  }
  protected NamingEnumeration<SearchResult> getUserNames(){
    return userNames;
  }
  protected NamingEnumeration<SearchResult> getGroupNames(){
    return groupNames;
  }
  protected SearchResult getUserSearchResult(){
    return userSearchResult;
  }
  protected Attributes getAttributes(){
    return attributes;
  }
  protected LdapGroupsMapping getGroupsMapping(){
    return groupsMapping;
  }
  protected String[] getTestGroups(){
    return testGroups;
  }
  protected NamingEnumeration getParentGroupNames(){
    return parentGroupNames;
  }
  protected String[] getTestParentGroups(){
    return testParentGroups;
  }
  /** 
 * Ldap Context Factory implementation to be used for testing to check contexts are requested for the expected LDAP server URLs etc.
 */
public static class DummyLdapCtxFactory implements InitialContextFactory {
    private static DirContext contextToReturn;
    private static String expectedLdapUrl;
    public DummyLdapCtxFactory(){
    }
    protected static void setContextToReturn(    DirContext ctx){
      contextToReturn=ctx;
    }
    protected static void setExpectedLdapUrl(    String url){
      expectedLdapUrl=url;
    }
    @Override public Context getInitialContext(    Hashtable<?,?> env) throws NamingException {
      if (expectedLdapUrl != null) {
        String actualLdapUrl=(String)env.get(Context.PROVIDER_URL);
        assertEquals(expectedLdapUrl,actualLdapUrl);
      }
      if (contextToReturn == null) {
        InitialContextFactory defaultFactory=null;
        try {
          defaultFactory=LDAP_CTX_FACTORY_CLASS_DEFAULT.newInstance();
        }
 catch (        ReflectiveOperationException e) {
          fail("Could not initialize the default factory");
        }
        return defaultFactory.getInitialContext(env);
      }
      return contextToReturn;
    }
  }
}
