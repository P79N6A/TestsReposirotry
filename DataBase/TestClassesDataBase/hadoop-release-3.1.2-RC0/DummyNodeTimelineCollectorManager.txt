private static class DummyNodeTimelineCollectorManager extends NodeTimelineCollectorManager {
  private volatile int tokenExpiredCnt=0;
  DummyNodeTimelineCollectorManager(){
    super();
  }
  private int getTokenExpiredCnt(){
    return tokenExpiredCnt;
  }
  @Override protected TimelineV2DelegationTokenSecretManagerService createTokenManagerService(){
    return spy(new TimelineV2DelegationTokenSecretManagerService(){
      @Override protected AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> createTimelineDelegationTokenSecretManager(      long secretKeyInterval,      long tokenMaxLifetime,      long tokenRenewInterval,      long tokenRemovalScanInterval){
        return spy(new TimelineV2DelegationTokenSecretManager(secretKeyInterval,tokenMaxLifetime,tokenRenewInterval,2000L){
          @Override protected void logExpireToken(          TimelineDelegationTokenIdentifier ident) throws IOException {
            tokenExpiredCnt++;
          }
        }
);
      }
    }
);
  }
  @Override protected CollectorNodemanagerProtocol getNMCollectorService(){
    CollectorNodemanagerProtocol protocol=mock(CollectorNodemanagerProtocol.class);
    try {
      GetTimelineCollectorContextResponse response=GetTimelineCollectorContextResponse.newInstance(UserGroupInformation.getCurrentUser().getUserName(),"test_flow_name","test_flow_version",1L);
      when(protocol.getTimelineCollectorContext(any(GetTimelineCollectorContextRequest.class))).thenReturn(response);
    }
 catch (    YarnException|IOException e) {
      fail();
    }
    return protocol;
  }
}
