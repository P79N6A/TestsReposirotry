public class TestBestEffortLongFile {
  private static final File FILE=new File(MiniDFSCluster.getBaseDirectory() + File.separatorChar + "TestBestEffortLongFile");
  @Before public void cleanup(){
    if (FILE.exists()) {
      assertTrue(FILE.delete());
    }
    FILE.getParentFile().mkdirs();
  }
  @Test public void testGetSet() throws IOException {
    BestEffortLongFile f=new BestEffortLongFile(FILE,12345L);
    try {
      assertEquals(12345L,f.get());
      assertTrue(FILE.exists());
      Random r=new Random();
      for (int i=0; i < 100; i++) {
        long newVal=r.nextLong();
        f.set(newVal);
        assertEquals(newVal,f.get());
        BestEffortLongFile f2=new BestEffortLongFile(FILE,999L);
        try {
          assertEquals(newVal,f2.get());
        }
  finally {
          IOUtils.closeStream(f2);
        }
      }
    }
  finally {
      IOUtils.closeStream(f);
    }
  }
  @Test public void testTruncatedFileReturnsDefault() throws IOException {
    assertTrue(FILE.createNewFile());
    assertEquals(0,FILE.length());
    BestEffortLongFile f=new BestEffortLongFile(FILE,12345L);
    try {
      assertEquals(12345L,f.get());
    }
  finally {
      f.close();
    }
  }
}
