/** 
 * Write mapper class.
 */
public static class WriteMapper extends IOStatMapper {
  public WriteMapper(){
    for (int i=0; i < bufferSize; i++) {
      buffer[i]=(byte)('0' + i % 50);
    }
  }
  @Override public Closeable getIOStream(  String name) throws IOException {
    Path filePath=new Path(getDataDir(getConf()),name);
    OutputStream out=fs.create(filePath,true,bufferSize);
    if (blockStoragePolicy != null) {
      fs.setStoragePolicy(filePath,blockStoragePolicy);
    }
    if (compressionCodec != null)     out=compressionCodec.createOutputStream(out);
    LOG.info("out = " + out.getClass().getName());
    return out;
  }
  @Override public Long doIO(  Reporter reporter,  String name,  long totalSize) throws IOException {
    OutputStream out=(OutputStream)this.stream;
    long nrRemaining;
    for (nrRemaining=totalSize; nrRemaining > 0; nrRemaining-=bufferSize) {
      int curSize=(bufferSize < nrRemaining) ? bufferSize : (int)nrRemaining;
      out.write(buffer,0,curSize);
      reporter.setStatus("writing " + name + "@"+ (totalSize - nrRemaining)+ "/"+ totalSize+ " ::host = "+ hostName);
    }
    return Long.valueOf(totalSize);
  }
}
