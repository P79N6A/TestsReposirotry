private static class TestServer extends Server {
  private boolean sleep;
  private Class<? extends Writable> responseClass;
  public TestServer(  int handlerCount,  boolean sleep) throws IOException {
    this(handlerCount,sleep,LongWritable.class,null);
  }
  public TestServer(  int handlerCount,  boolean sleep,  Class<? extends Writable> paramClass,  Class<? extends Writable> responseClass) throws IOException {
    super(ADDRESS,0,paramClass,handlerCount,conf);
    this.sleep=sleep;
    this.responseClass=responseClass;
  }
  @Override public Writable call(  RPC.RpcKind rpcKind,  String protocol,  Writable param,  long receiveTime) throws IOException {
    if (sleep) {
      try {
        Thread.sleep(PING_INTERVAL + MIN_SLEEP_TIME);
      }
 catch (      InterruptedException e) {
      }
    }
    if (responseClass != null) {
      try {
        return responseClass.newInstance();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      return param;
    }
  }
}
