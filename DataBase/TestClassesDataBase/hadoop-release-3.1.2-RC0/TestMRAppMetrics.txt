public class TestMRAppMetrics {
  @Test public void testNames(){
    Job job=mock(Job.class);
    Task mapTask=mock(Task.class);
    when(mapTask.getType()).thenReturn(TaskType.MAP);
    Task reduceTask=mock(Task.class);
    when(reduceTask.getType()).thenReturn(TaskType.REDUCE);
    MRAppMetrics metrics=MRAppMetrics.create();
    metrics.submittedJob(job);
    metrics.waitingTask(mapTask);
    metrics.waitingTask(reduceTask);
    metrics.preparingJob(job);
    metrics.submittedJob(job);
    metrics.waitingTask(mapTask);
    metrics.waitingTask(reduceTask);
    metrics.preparingJob(job);
    metrics.submittedJob(job);
    metrics.waitingTask(mapTask);
    metrics.waitingTask(reduceTask);
    metrics.preparingJob(job);
    metrics.endPreparingJob(job);
    metrics.endPreparingJob(job);
    metrics.endPreparingJob(job);
    metrics.runningJob(job);
    metrics.launchedTask(mapTask);
    metrics.runningTask(mapTask);
    metrics.failedTask(mapTask);
    metrics.endWaitingTask(reduceTask);
    metrics.endRunningTask(mapTask);
    metrics.endRunningJob(job);
    metrics.failedJob(job);
    metrics.runningJob(job);
    metrics.launchedTask(mapTask);
    metrics.runningTask(mapTask);
    metrics.killedTask(mapTask);
    metrics.endWaitingTask(reduceTask);
    metrics.endRunningTask(mapTask);
    metrics.endRunningJob(job);
    metrics.killedJob(job);
    metrics.runningJob(job);
    metrics.launchedTask(mapTask);
    metrics.runningTask(mapTask);
    metrics.completedTask(mapTask);
    metrics.endRunningTask(mapTask);
    metrics.launchedTask(reduceTask);
    metrics.runningTask(reduceTask);
    metrics.completedTask(reduceTask);
    metrics.endRunningTask(reduceTask);
    metrics.endRunningJob(job);
    metrics.completedJob(job);
    checkMetrics(3,1,1,1,0,0,3,1,1,1,0,0,1,1,0,0,0,0);
  }
  private void checkMetrics(  int jobsSubmitted,  int jobsCompleted,  int jobsFailed,  int jobsKilled,  int jobsPreparing,  int jobsRunning,  int mapsLaunched,  int mapsCompleted,  int mapsFailed,  int mapsKilled,  int mapsRunning,  int mapsWaiting,  int reducesLaunched,  int reducesCompleted,  int reducesFailed,  int reducesKilled,  int reducesRunning,  int reducesWaiting){
    MetricsRecordBuilder rb=getMetrics("MRAppMetrics");
    assertCounter("JobsSubmitted",jobsSubmitted,rb);
    assertCounter("JobsCompleted",jobsCompleted,rb);
    assertCounter("JobsFailed",jobsFailed,rb);
    assertCounter("JobsKilled",jobsKilled,rb);
    assertGauge("JobsPreparing",jobsPreparing,rb);
    assertGauge("JobsRunning",jobsRunning,rb);
    assertCounter("MapsLaunched",mapsLaunched,rb);
    assertCounter("MapsCompleted",mapsCompleted,rb);
    assertCounter("MapsFailed",mapsFailed,rb);
    assertCounter("MapsKilled",mapsKilled,rb);
    assertGauge("MapsRunning",mapsRunning,rb);
    assertGauge("MapsWaiting",mapsWaiting,rb);
    assertCounter("ReducesLaunched",reducesLaunched,rb);
    assertCounter("ReducesCompleted",reducesCompleted,rb);
    assertCounter("ReducesFailed",reducesFailed,rb);
    assertCounter("ReducesKilled",reducesKilled,rb);
    assertGauge("ReducesRunning",reducesRunning,rb);
    assertGauge("ReducesWaiting",reducesWaiting,rb);
  }
}
