/** 
 * Writes to the DataOutput stream in the same way as pre-0.21 versions of {@link TupleWritable#write(DataOutput)}
 */
private static class PreVersion21TupleWritable {
  private Writable[] values;
  private long written=0L;
  private PreVersion21TupleWritable(  Writable[] vals){
    written=0L;
    values=vals;
  }
  private void setWritten(  int i){
    written|=1L << i;
  }
  private boolean has(  int i){
    return 0 != ((1L << i) & written);
  }
  private void write(  DataOutput out) throws IOException {
    WritableUtils.writeVInt(out,values.length);
    WritableUtils.writeVLong(out,written);
    for (int i=0; i < values.length; ++i) {
      Text.writeString(out,values[i].getClass().getName());
    }
    for (int i=0; i < values.length; ++i) {
      if (has(i)) {
        values[i].write(out);
      }
    }
  }
  public int size(){
    return values.length;
  }
  public boolean isCompatible(  TupleWritable that){
    if (this.size() != that.size()) {
      return false;
    }
    for (int i=0; i < values.length; ++i) {
      if (has(i) != that.has(i)) {
        return false;
      }
      if (has(i) && !values[i].equals(that.get(i))) {
        return false;
      }
    }
    return true;
  }
}
