/** 
 * Testing  {@link RMAppAttemptImpl#diagnostics} scenarios.
 */
public class TestRMAppAttemptImplDiagnostics {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void whenCreatedWithDefaultConfigurationSuccess(){
    final Configuration configuration=new Configuration();
    configuration.setInt(YarnConfiguration.APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC,YarnConfiguration.DEFAULT_APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC);
    createRMAppAttemptImpl(configuration);
  }
  @Test public void whenCreatedWithWrongConfigurationError(){
    final Configuration configuration=new Configuration();
    configuration.setInt(YarnConfiguration.APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC,0);
    expectedException.expect(YarnRuntimeException.class);
    createRMAppAttemptImpl(configuration);
  }
  @Test public void whenAppendedWithinLimitMessagesArePreserved(){
    final Configuration configuration=new Configuration();
    configuration.setInt(YarnConfiguration.APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC,1);
    final RMAppAttemptImpl appAttempt=createRMAppAttemptImpl(configuration);
    final String withinLimit=RandomStringUtils.random(1024);
    appAttempt.appendDiagnostics(withinLimit);
    assertEquals("messages within limit should be preserved",withinLimit,appAttempt.getDiagnostics());
  }
  @Test public void whenAppendedBeyondLimitMessagesAreTruncated(){
    final Configuration configuration=new Configuration();
    configuration.setInt(YarnConfiguration.APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC,1);
    final RMAppAttemptImpl appAttempt=createRMAppAttemptImpl(configuration);
    final String beyondLimit=RandomStringUtils.random(1025);
    appAttempt.appendDiagnostics(beyondLimit);
    final String truncated=String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,1024,1025,beyondLimit.substring(1));
    assertEquals("messages beyond limit should be truncated",truncated,appAttempt.getDiagnostics());
  }
  private RMAppAttemptImpl createRMAppAttemptImpl(  final Configuration configuration){
    final ApplicationAttemptId mockApplicationAttemptId=mock(ApplicationAttemptId.class);
    final ApplicationId mockApplicationId=mock(ApplicationId.class);
    when(mockApplicationAttemptId.getApplicationId()).thenReturn(mockApplicationId);
    final RMContext mockRMContext=mock(RMContext.class);
    final Dispatcher mockDispatcher=mock(Dispatcher.class);
    when(mockRMContext.getDispatcher()).thenReturn(mockDispatcher);
    return new RMAppAttemptImpl(mockApplicationAttemptId,mockRMContext,null,null,null,configuration,null,null);
  }
}
