/** 
 * Modifications that change the file status. We check the FileStatus of snapshot files before/after the modification.
 */
static abstract class FileStatusChange extends Modification {
  protected final HashMap<Path,FileStatus> statusMap;
  FileStatusChange(  Path file,  FileSystem fs,  String type){
    super(file,fs,type);
    statusMap=new HashMap<Path,FileStatus>();
  }
  @Override void loadSnapshots() throws Exception {
    for (    Path snapshotRoot : snapshotList) {
      Path snapshotFile=SnapshotTestHelper.getSnapshotFile(snapshotRoot,file);
      if (snapshotFile != null) {
        if (fs.exists(snapshotFile)) {
          FileStatus status=fs.getFileStatus(snapshotFile);
          statusMap.put(snapshotFile,status);
        }
 else {
          statusMap.put(snapshotFile,null);
        }
      }
    }
  }
  @Override void checkSnapshots() throws Exception {
    for (    Path snapshotFile : statusMap.keySet()) {
      FileStatus currentStatus=fs.exists(snapshotFile) ? fs.getFileStatus(snapshotFile) : null;
      FileStatus originalStatus=statusMap.get(snapshotFile);
      assertEquals(currentStatus,originalStatus);
      if (currentStatus != null) {
        String s=null;
        if (!currentStatus.toString().equals(originalStatus.toString())) {
          s="FAILED: " + getClass().getSimpleName() + ": file="+ file+ ", snapshotFile"+ snapshotFile+ "\n\n currentStatus = "+ currentStatus+ "\noriginalStatus = "+ originalStatus+ "\n\nfile        : "+ fsdir.getINode(file.toString()).toDetailString()+ "\n\nsnapshotFile: "+ fsdir.getINode(snapshotFile.toString()).toDetailString();
          SnapshotTestHelper.dumpTree(s,cluster);
        }
        assertEquals(s,currentStatus.toString(),originalStatus.toString());
      }
    }
  }
}
