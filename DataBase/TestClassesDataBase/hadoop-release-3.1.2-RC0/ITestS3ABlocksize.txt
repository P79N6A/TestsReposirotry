/** 
 * S3A tests for configuring block size.
 */
public class ITestS3ABlocksize extends AbstractS3ATestBase {
  private static final Logger LOG=LoggerFactory.getLogger(ITestS3ABlocksize.class);
  @Test @SuppressWarnings("deprecation") public void testBlockSize() throws Exception {
    FileSystem fs=getFileSystem();
    long defaultBlockSize=fs.getDefaultBlockSize();
    assertEquals("incorrect blocksize",S3AFileSystem.DEFAULT_BLOCKSIZE,defaultBlockSize);
    long newBlockSize=defaultBlockSize * 2;
    fs.getConf().setLong(Constants.FS_S3A_BLOCK_SIZE,newBlockSize);
    Path dir=path("testBlockSize");
    Path file=new Path(dir,"file");
    createFile(fs,file,true,dataset(1024,'a','z' - 'a'));
    FileStatus fileStatus=fs.getFileStatus(file);
    assertEquals("Double default block size in stat(): " + fileStatus,newBlockSize,fileStatus.getBlockSize());
    boolean found=false;
    FileStatus[] listing=fs.listStatus(dir);
    for (    FileStatus stat : listing) {
      LOG.info("entry: {}",stat);
      if (file.equals(stat.getPath())) {
        found=true;
        assertEquals("Double default block size in ls(): " + stat,newBlockSize,stat.getBlockSize());
      }
    }
    assertTrue("Did not find " + fileStatsToString(listing,", "),found);
  }
  @Test public void testRootFileStatusHasBlocksize() throws Throwable {
    FileSystem fs=getFileSystem();
    FileStatus status=fs.getFileStatus(new Path("/"));
    assertTrue("Invalid root blocksize",status.getBlockSize() >= 0);
  }
}
