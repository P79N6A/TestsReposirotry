/** 
 * Test online recovery with failed DNs. This test is parameterized.
 */
@RunWith(Parameterized.class) public class TestReadStripedFileWithDNFailure {
  static final Logger LOG=LoggerFactory.getLogger(TestReadStripedFileWithDNFailure.class);
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem dfs;
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @BeforeClass public static void setup() throws IOException {
    cluster=initializeCluster();
    dfs=cluster.getFileSystem();
  }
  @AfterClass public static void tearDown() throws IOException {
    tearDownCluster(cluster);
  }
  @Parameterized.Parameters public static Collection<Object[]> getParameters(){
    ArrayList<Object[]> params=new ArrayList<>();
    for (    int fileLength : FILE_LENGTHS) {
      for (int i=0; i < NUM_PARITY_UNITS; i++) {
        params.add(new Object[]{fileLength,i + 1});
      }
    }
    return params;
  }
  private int fileLength;
  private int dnFailureNum;
  public TestReadStripedFileWithDNFailure(  int fileLength,  int dnFailureNum){
    this.fileLength=fileLength;
    this.dnFailureNum=dnFailureNum;
  }
  /** 
 * Shutdown tolerable number of Datanode before reading. Verify the decoding works correctly.
 */
  @Test public void testReadWithDNFailure() throws Exception {
    try {
      setup();
      ReadStripedFileWithDecodingHelper.testReadWithDNFailure(cluster,dfs,fileLength,dnFailureNum);
    }
 catch (    IOException ioe) {
      String fileType=fileLength < (BLOCK_SIZE * NUM_DATA_UNITS) ? "smallFile" : "largeFile";
      LOG.error("Failed to read file with DN failure:" + " fileType = " + fileType + ", dnFailureNum = "+ dnFailureNum);
    }
 finally {
      tearDown();
    }
  }
}
