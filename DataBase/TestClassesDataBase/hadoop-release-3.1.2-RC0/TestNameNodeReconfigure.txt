public class TestNameNodeReconfigure {
  public static final Log LOG=LogFactory.getLog(TestNameNodeReconfigure.class);
  private MiniDFSCluster cluster;
  private final int customizedBlockInvalidateLimit=500;
  @Before public void setUp() throws IOException {
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFS_BLOCK_INVALIDATE_LIMIT_KEY,customizedBlockInvalidateLimit);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
  }
  @Test public void testReconfigureCallerContextEnabled() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final FSNamesystem nameSystem=nameNode.getNamesystem();
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"text");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,false);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"true");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,true);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"false");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,false);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,null);
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",false,nameSystem.getCallerContextEnabled());
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",null,nameNode.getConf().get(HADOOP_CALLER_CONTEXT_ENABLED_KEY));
  }
  void verifyReconfigureCallerContextEnabled(  final NameNode nameNode,  final FSNamesystem nameSystem,  boolean expected){
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",expected,nameNode.getNamesystem().getCallerContextEnabled());
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",expected,nameNode.getConf().getBoolean(HADOOP_CALLER_CONTEXT_ENABLED_KEY,HADOOP_CALLER_CONTEXT_ENABLED_DEFAULT));
  }
  /** 
 * Test to reconfigure enable/disable IPC backoff
 */
  @Test public void testReconfigureIPCBackoff() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    NameNodeRpcServer nnrs=(NameNodeRpcServer)nameNode.getRpcServer();
    String ipcClientRPCBackoffEnable=NameNode.buildBackoffEnableKey(nnrs.getClientRpcServer().getPort());
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,false);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,"true");
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,true);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,"false");
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,false);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,null);
    assertEquals(ipcClientRPCBackoffEnable + " has wrong value",false,nnrs.getClientRpcServer().isClientBackoffEnabled());
    assertEquals(ipcClientRPCBackoffEnable + " has wrong value",null,nameNode.getConf().get(ipcClientRPCBackoffEnable));
  }
  void verifyReconfigureIPCBackoff(  final NameNode nameNode,  final NameNodeRpcServer nnrs,  String property,  boolean expected){
    assertEquals(property + " has wrong value",expected,nnrs.getClientRpcServer().isClientBackoffEnabled());
    assertEquals(property + " has wrong value",expected,nameNode.getConf().getBoolean(property,IPC_BACKOFF_ENABLE_DEFAULT));
  }
  /** 
 * Test to reconfigure interval of heart beat check and re-check.
 */
  @Test public void testReconfigureHearbeatCheck() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final DatanodeManager datanodeManager=nameNode.namesystem.getBlockManager().getDatanodeManager();
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"" + 6);
    nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,"" + (10 * 60 * 1000));
    try {
      nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"text");
      fail("ReconfigurationException expected");
    }
 catch (    ReconfigurationException expected) {
      assertTrue(expected.getCause() instanceof NumberFormatException);
    }
    try {
      nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,"text");
      fail("ReconfigurationException expected");
    }
 catch (    ReconfigurationException expected) {
      assertTrue(expected.getCause() instanceof NumberFormatException);
    }
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",6,nameNode.getConf().getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",6,datanodeManager.getHeartbeatInterval());
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",10 * 60 * 1000,nameNode.getConf().getInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT));
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",10 * 60 * 1000,datanodeManager.getHeartbeatRecheckInterval());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"1m");
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",60,nameNode.getConf().getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",60,datanodeManager.getHeartbeatInterval());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,null);
    nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,null);
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",null,nameNode.getConf().get(DFS_HEARTBEAT_INTERVAL_KEY));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",DFS_HEARTBEAT_INTERVAL_DEFAULT,datanodeManager.getHeartbeatInterval());
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",null,nameNode.getConf().get(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY));
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT,datanodeManager.getHeartbeatRecheckInterval());
  }
  @Test public void testBlockInvalidateLimitAfterReconfigured() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final DatanodeManager datanodeManager=nameNode.namesystem.getBlockManager().getDatanodeManager();
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not correctly set",customizedBlockInvalidateLimit,datanodeManager.getBlockInvalidateLimit());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,Integer.toString(6));
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not honored after reconfiguration",customizedBlockInvalidateLimit,datanodeManager.getBlockInvalidateLimit());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,Integer.toString(50));
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not reconfigured correctly",1000,datanodeManager.getBlockInvalidateLimit());
  }
  @After public void shutDown() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
