public class TestBlacklistManager {
  @Test public void testSimpleBlacklistBelowFailureThreshold(){
    final int numberOfNodeManagerHosts=3;
    final double blacklistDisableFailureThreshold=0.8;
    BlacklistManager manager=new SimpleBlacklistManager(numberOfNodeManagerHosts,blacklistDisableFailureThreshold);
    String anyNode="foo";
    String anyNode2="bar";
    manager.addNode(anyNode);
    manager.addNode(anyNode2);
    ResourceBlacklistRequest blacklist=manager.getBlacklistUpdates();
    List<String> blacklistAdditions=blacklist.getBlacklistAdditions();
    Collections.sort(blacklistAdditions);
    List<String> blacklistRemovals=blacklist.getBlacklistRemovals();
    String[] expectedBlacklistAdditions=new String[]{anyNode2,anyNode};
    Assert.assertArrayEquals("Blacklist additions was not as expected",expectedBlacklistAdditions,blacklistAdditions.toArray());
    Assert.assertTrue("Blacklist removals should be empty but was " + blacklistRemovals,blacklistRemovals.isEmpty());
  }
  @Test public void testSimpleBlacklistAboveFailureThreshold(){
    BlacklistManager manager=new SimpleBlacklistManager(3,0.5);
    String anyNode="foo";
    String anyNode2="bar";
    manager.addNode(anyNode);
    ResourceBlacklistRequest blacklist=manager.getBlacklistUpdates();
    List<String> blacklistAdditions=blacklist.getBlacklistAdditions();
    Collections.sort(blacklistAdditions);
    List<String> blacklistRemovals=blacklist.getBlacklistRemovals();
    String[] expectedBlacklistAdditions=new String[]{anyNode};
    Assert.assertArrayEquals("Blacklist additions was not as expected",expectedBlacklistAdditions,blacklistAdditions.toArray());
    Assert.assertTrue("Blacklist removals should be empty but was " + blacklistRemovals,blacklistRemovals.isEmpty());
    manager.addNode(anyNode2);
    blacklist=manager.getBlacklistUpdates();
    blacklistAdditions=blacklist.getBlacklistAdditions();
    Collections.sort(blacklistAdditions);
    blacklistRemovals=blacklist.getBlacklistRemovals();
    Collections.sort(blacklistRemovals);
    String[] expectedBlacklistRemovals=new String[]{anyNode2,anyNode};
    Assert.assertTrue("Blacklist additions should be empty but was " + blacklistAdditions,blacklistAdditions.isEmpty());
    Assert.assertArrayEquals("Blacklist removals was not as expected",expectedBlacklistRemovals,blacklistRemovals.toArray());
  }
  @Test public void testDisabledBlacklist(){
    BlacklistManager disabled=new DisabledBlacklistManager();
    String anyNode="foo";
    disabled.addNode(anyNode);
    ResourceBlacklistRequest blacklist=disabled.getBlacklistUpdates();
    List<String> blacklistAdditions=blacklist.getBlacklistAdditions();
    List<String> blacklistRemovals=blacklist.getBlacklistRemovals();
    Assert.assertTrue("Blacklist additions should be empty but was " + blacklistAdditions,blacklistAdditions.isEmpty());
    Assert.assertTrue("Blacklist removals should be empty but was " + blacklistRemovals,blacklistRemovals.isEmpty());
  }
}
