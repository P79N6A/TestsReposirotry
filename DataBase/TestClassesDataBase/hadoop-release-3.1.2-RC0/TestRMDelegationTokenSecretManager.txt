public class TestRMDelegationTokenSecretManager extends RMDelegationTokenSecretManager {
  public AtomicInteger numUpdatedKeys=new AtomicInteger(0);
  public TestRMDelegationTokenSecretManager(  long delegationKeyUpdateInterval,  long delegationTokenMaxLifetime,  long delegationTokenRenewInterval,  long delegationTokenRemoverScanInterval,  RMContext rmContext){
    super(delegationKeyUpdateInterval,delegationTokenMaxLifetime,delegationTokenRenewInterval,delegationTokenRemoverScanInterval,rmContext);
  }
  @Override protected void storeNewMasterKey(  DelegationKey newKey){
    super.storeNewMasterKey(newKey);
    numUpdatedKeys.incrementAndGet();
  }
  public synchronized DelegationKey checkCurrentKeyInStateStore(  Set<DelegationKey> rmDTMasterKeyState){
    for (    int keyId : allKeys.keySet()) {
      if (keyId == currentId) {
        DelegationKey currentKey=allKeys.get(keyId);
        boolean found=false;
        for (        DelegationKey k : rmDTMasterKeyState) {
          if (k.getKeyId() == keyId) {
            found=true;
            break;
          }
        }
        Assert.assertTrue(found);
        return currentKey;
      }
    }
    return null;
  }
}
