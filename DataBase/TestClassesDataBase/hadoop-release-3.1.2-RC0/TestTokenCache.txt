public class TestTokenCache {
  private static Configuration conf;
  private static String renewer;
  @BeforeClass public static void setup() throws Exception {
    conf=new Configuration();
    conf.set(YarnConfiguration.RM_PRINCIPAL,"mapred/host@REALM");
    renewer=Master.getMasterPrincipal(conf);
  }
  @Test public void testObtainTokens() throws Exception {
    Credentials credentials=new Credentials();
    FileSystem fs=mock(FileSystem.class);
    TokenCache.obtainTokensForNamenodesInternal(fs,credentials,conf,renewer);
    verify(fs).addDelegationTokens(eq(renewer),eq(credentials));
  }
  @Test @SuppressWarnings("deprecation") public void testBinaryCredentialsWithoutScheme() throws Exception {
    testBinaryCredentials(false);
  }
  @Test @SuppressWarnings("deprecation") public void testBinaryCredentialsWithScheme() throws Exception {
    testBinaryCredentials(true);
  }
  private void testBinaryCredentials(  boolean hasScheme) throws Exception {
    Path TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","test/build/data"));
    String binaryTokenFile=hasScheme ? FileSystem.getLocal(conf).makeQualified(new Path(TEST_ROOT_DIR,"tokenFile")).toString() : FileSystem.getLocal(conf).makeQualified(new Path(TEST_ROOT_DIR,"tokenFile")).toUri().getPath();
    MockFileSystem fs1=createFileSystemForServiceName("service1");
    MockFileSystem fs2=createFileSystemForServiceName("service2");
    MockFileSystem fs3=createFileSystemForServiceName("service3");
    Credentials creds=new Credentials();
    Token<?> token1=fs1.getDelegationToken(renewer);
    Token<?> token2=fs2.getDelegationToken(renewer);
    creds.addToken(token1.getService(),token1);
    creds.addToken(token2.getService(),token2);
    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY,binaryTokenFile);
    creds.writeTokenStorageFile(new Path(binaryTokenFile),conf);
    creds=new Credentials();
    Token<?> newerToken1=fs1.getDelegationToken(renewer);
    assertNotSame(newerToken1,token1);
    creds.addToken(newerToken1.getService(),newerToken1);
    checkToken(creds,newerToken1);
    TokenCache.obtainTokensForNamenodesInternal(fs1,creds,conf,renewer);
    checkToken(creds,newerToken1,token2);
    TokenCache.obtainTokensForNamenodesInternal(fs2,creds,conf,renewer);
    checkToken(creds,newerToken1,token2);
    TokenCache.obtainTokensForNamenodesInternal(fs3,creds,conf,renewer);
    Token<?> token3=creds.getToken(new Text(fs3.getCanonicalServiceName()));
    assertTrue(token3 != null);
    checkToken(creds,newerToken1,token2,token3);
    TokenCache.obtainTokensForNamenodesInternal(fs1,creds,conf,renewer);
    TokenCache.obtainTokensForNamenodesInternal(fs2,creds,conf,renewer);
    TokenCache.obtainTokensForNamenodesInternal(fs3,creds,conf,renewer);
    checkToken(creds,newerToken1,token2,token3);
  }
  private void checkToken(  Credentials creds,  Token<?>... tokens){
    assertEquals(tokens.length,creds.getAllTokens().size());
    for (    Token<?> token : tokens) {
      Token<?> credsToken=creds.getToken(token.getService());
      assertTrue(credsToken != null);
      assertEquals(token,credsToken);
    }
  }
  private MockFileSystem createFileSystemForServiceName(  final String service) throws IOException {
    MockFileSystem mockFs=new MockFileSystem();
    when(mockFs.getCanonicalServiceName()).thenReturn(service);
    when(mockFs.getDelegationToken(any(String.class))).thenAnswer(new Answer<Token<?>>(){
      int unique=0;
      @Override public Token<?> answer(      InvocationOnMock invocation) throws Throwable {
        Token<?> token=new Token<TokenIdentifier>();
        token.setService(new Text(service));
        token.setKind(new Text("token" + unique++));
        return token;
      }
    }
);
    return mockFs;
  }
  @Test public void testSingleTokenFetch() throws Exception {
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.RM_PRINCIPAL,"mapred/host@REALM");
    String renewer=Master.getMasterPrincipal(conf);
    Credentials credentials=new Credentials();
    final MockFileSystem fs=new MockFileSystem();
    final MockFileSystem mockFs=(MockFileSystem)fs.getRawFileSystem();
    when(mockFs.getCanonicalServiceName()).thenReturn("host:0");
    when(mockFs.getUri()).thenReturn(new URI("mockfs://host:0"));
    Path mockPath=mock(Path.class);
    when(mockPath.getFileSystem(conf)).thenReturn(mockFs);
    Path[] paths=new Path[]{mockPath,mockPath};
    when(mockFs.addDelegationTokens("me",credentials)).thenReturn(null);
    TokenCache.obtainTokensForNamenodesInternal(credentials,paths,conf);
    verify(mockFs,times(1)).addDelegationTokens(renewer,credentials);
  }
  @Test public void testCleanUpTokenReferral() throws Exception {
    Configuration conf=new Configuration();
    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY,"foo");
    TokenCache.cleanUpTokenReferral(conf);
    assertNull(conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY));
  }
  @SuppressWarnings("deprecation") @Test public void testGetTokensForNamenodes() throws IOException, URISyntaxException {
    Path TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","test/build/data"));
    String binaryTokenFile=FileSystem.getLocal(conf).makeQualified(new Path(TEST_ROOT_DIR,"tokenFile")).toUri().getPath();
    MockFileSystem fs1=createFileSystemForServiceName("service1");
    Credentials creds=new Credentials();
    Token<?> token1=fs1.getDelegationToken(renewer);
    creds.addToken(token1.getService(),token1);
    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY,binaryTokenFile);
    creds.writeTokenStorageFile(new Path(binaryTokenFile),conf);
    TokenCache.obtainTokensForNamenodesInternal(fs1,creds,conf,renewer);
    String fs_addr=fs1.getCanonicalServiceName();
    Token<?> nnt=TokenCache.getDelegationToken(creds,fs_addr);
    assertNotNull("Token for nn is null",nnt);
  }
}
