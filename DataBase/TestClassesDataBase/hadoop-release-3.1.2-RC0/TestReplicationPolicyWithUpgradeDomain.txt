public class TestReplicationPolicyWithUpgradeDomain extends BaseReplicationPolicyTest {
  public TestReplicationPolicyWithUpgradeDomain(){
    this.blockPlacementPolicy=BlockPlacementPolicyWithUpgradeDomain.class.getName();
  }
  @Override DatanodeDescriptor[] getDatanodeDescriptors(  Configuration conf){
    final String[] racks={"/d1/r1","/d1/r1","/d1/r1","/d1/r2","/d1/r2","/d1/r2","/d1/r3","/d1/r3","/d1/r3"};
    storages=DFSTestUtil.createDatanodeStorageInfos(racks);
    DatanodeDescriptor dataNodes[]=DFSTestUtil.toDatanodeDescriptor(storages);
    for (int i=0; i < dataNodes.length; i++) {
      String upgradeDomain=Integer.toString((i % 3) + 1);
      dataNodes[i].setUpgradeDomain(upgradeDomain);
    }
    return dataNodes;
  }
  /** 
 * Verify the targets are chosen to honor both rack and upgrade domain policies when number of replica is 0, 1, 2, 3, 4 respectively.
 * @throws Exception
 */
  @Test public void testChooseTarget1() throws Exception {
    updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,4,0);
    DatanodeStorageInfo[] targets;
    targets=chooseTarget(0);
    assertEquals(targets.length,0);
    targets=chooseTarget(1);
    assertEquals(targets.length,1);
    assertEquals(storages[0],targets[0]);
    targets=chooseTarget(2);
    assertEquals(targets.length,2);
    assertEquals(storages[0],targets[0]);
    assertFalse(isOnSameRack(targets[0],targets[1]));
    assertEquals(getUpgradeDomains(targets).size(),2);
    targets=chooseTarget(3);
    assertEquals(targets.length,3);
    assertEquals(storages[0],targets[0]);
    assertFalse(isOnSameRack(targets[0],targets[1]));
    assertTrue(isOnSameRack(targets[1],targets[2]));
    assertEquals(getUpgradeDomains(targets).size(),3);
    targets=chooseTarget(4);
    assertEquals(targets.length,4);
    assertEquals(storages[0],targets[0]);
    assertTrue(isOnSameRack(targets[1],targets[2]) || isOnSameRack(targets[2],targets[3]));
    assertFalse(isOnSameRack(targets[0],targets[2]));
    assertEquals(getUpgradeDomains(targets).size(),3);
    updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  }
  /** 
 * Verify the rack and upgrade domain policies when excludeNodes are specified.
 * @throws Exception
 */
  @Test public void testChooseTargetWithExcludeNodes() throws Exception {
    Set<Node> excludedNodes=new HashSet<>();
    DatanodeStorageInfo[] targets;
    List<DatanodeStorageInfo> chosenNodes=new ArrayList<>();
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    targets=chooseTarget(3,chosenNodes,excludedNodes);
    assertEquals(targets.length,3);
    assertEquals(storages[0],targets[0]);
    assertEquals(getRacks(targets).size(),2);
    assertEquals(getUpgradeDomains(targets).size(),3);
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    excludedNodes.add(dataNodes[8]);
    targets=chooseTarget(3,chosenNodes,excludedNodes);
    assertEquals(targets.length,3);
    assertEquals(storages[0],targets[0]);
    assertEquals(getRacks(targets).size(),2);
    assertEquals(getUpgradeDomains(targets).size(),3);
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    excludedNodes.add(dataNodes[5]);
    excludedNodes.add(dataNodes[8]);
    targets=chooseTarget(3,chosenNodes,excludedNodes);
    assertEquals(targets.length,3);
    assertEquals(storages[0],targets[0]);
    assertEquals(storages[2],targets[1]);
    assertEquals(storages[7],targets[2]);
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    targets=chooseTarget(4,chosenNodes,excludedNodes);
    assertEquals(targets.length,4);
    assertEquals(storages[0],targets[0]);
    assertTrue(getRacks(targets).size() >= 2);
    assertEquals(getUpgradeDomains(targets).size(),3);
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    excludedNodes.add(dataNodes[8]);
    targets=chooseTarget(4,chosenNodes,excludedNodes);
    assertEquals(targets.length,4);
    assertEquals(storages[0],targets[0]);
    assertTrue(getRacks(targets).size() >= 2);
    assertEquals(getUpgradeDomains(targets).size(),3);
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[1]);
    chosenNodes.add(storages[2]);
    targets=replicator.chooseTarget(filename,1,dataNodes[0],chosenNodes,true,excludedNodes,BLOCK_SIZE,TestBlockStoragePolicy.DEFAULT_STORAGE_POLICY,null);
    System.out.println("targets=" + Arrays.asList(targets));
    assertEquals(2,targets.length);
  }
  /** 
 * Test the scenario where not enough replicas can't satisfy the policy.
 * @throws Exception
 */
  @Test public void testChooseTargetWithoutEnoughReplica() throws Exception {
    Set<Node> excludedNodes=new HashSet<>();
    DatanodeStorageInfo[] targets;
    List<DatanodeStorageInfo> chosenNodes=new ArrayList<>();
    excludedNodes.clear();
    chosenNodes.clear();
    excludedNodes.add(dataNodes[4]);
    excludedNodes.add(dataNodes[5]);
    excludedNodes.add(dataNodes[7]);
    excludedNodes.add(dataNodes[8]);
    targets=chooseTarget(3,chosenNodes,excludedNodes);
    assertEquals(targets.length,2);
    assertEquals(storages[0],targets[0]);
    assertTrue(targets[1].equals(storages[1]) || targets[1].equals(storages[2]));
  }
  /** 
 * Test block placement verification.
 * @throws Exception
 */
  @Test public void testVerifyBlockPlacement() throws Exception {
    LocatedBlock locatedBlock;
    BlockPlacementStatus status;
    ExtendedBlock b=new ExtendedBlock("fake-pool",new Block(12345L));
    List<DatanodeStorageInfo> set=new ArrayList<>();
    set.clear();
    set.add(storages[0]);
    set.add(storages[1]);
    set.add(storages[4]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertFalse(status.isPlacementPolicySatisfied());
    set.clear();
    set.add(storages[0]);
    set.add(storages[1]);
    set.add(storages[5]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertTrue(status.isPlacementPolicySatisfied());
    set.clear();
    set.add(storages[0]);
    set.add(storages[1]);
    set.add(storages[2]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertFalse(status.isPlacementPolicySatisfied());
    assertFalse(status.getErrorDescription().contains("upgrade domain"));
    set.clear();
    set.add(storages[0]);
    set.add(storages[5]);
    set.add(storages[8]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertFalse(status.isPlacementPolicySatisfied());
    assertTrue(status.getErrorDescription().contains("upgrade domain"));
    set.clear();
    set.add(storages[0]);
    set.add(storages[4]);
    set.add(storages[8]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertTrue(status.isPlacementPolicySatisfied());
    set.clear();
    set.add(storages[0]);
    set.add(storages[1]);
    set.add(storages[5]);
    set.add(storages[8]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertTrue(status.isPlacementPolicySatisfied());
    set.clear();
    set.add(storages[0]);
    set.add(storages[3]);
    set.add(storages[5]);
    set.add(storages[8]);
    locatedBlock=BlockManager.newLocatedBlock(b,set.toArray(new DatanodeStorageInfo[set.size()]),0,false);
    status=replicator.verifyBlockPlacement(locatedBlock.getLocations(),set.size());
    assertFalse(status.isPlacementPolicySatisfied());
  }
  /** 
 * Verify the correct replica is chosen to satisfy both rack and upgrade domain policy.
 * @throws Exception
 */
  @Test public void testChooseReplicasToDelete() throws Exception {
    Collection<DatanodeStorageInfo> nonExcess=new ArrayList<>();
    nonExcess.add(storages[0]);
    nonExcess.add(storages[1]);
    nonExcess.add(storages[2]);
    nonExcess.add(storages[3]);
    List<DatanodeStorageInfo> excessReplicas;
    BlockStoragePolicySuite POLICY_SUITE=BlockStoragePolicySuite.createDefaultSuite();
    BlockStoragePolicy storagePolicy=POLICY_SUITE.getDefaultPolicy();
    DatanodeDescriptor delHintNode=storages[0].getDatanodeDescriptor();
    List<StorageType> excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),delHintNode);
    assertTrue(excessReplicas.size() == 1);
    assertTrue(excessReplicas.contains(storages[0]));
    delHintNode=storages[1].getDatanodeDescriptor();
    excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),delHintNode);
    assertTrue(excessReplicas.size() == 1);
    assertTrue(excessReplicas.contains(storages[0]));
    nonExcess.clear();
    nonExcess.add(storages[0]);
    nonExcess.add(storages[1]);
    nonExcess.add(storages[4]);
    nonExcess.add(storages[8]);
    excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[8].getDatanodeDescriptor(),null);
    assertTrue(excessReplicas.size() == 1);
    assertTrue(excessReplicas.contains(storages[1]));
    nonExcess.clear();
    nonExcess.add(storages[0]);
    nonExcess.add(storages[1]);
    nonExcess.add(storages[4]);
    nonExcess.add(storages[5]);
    excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[8].getDatanodeDescriptor(),null);
    assertTrue(excessReplicas.size() == 1);
    assertTrue(excessReplicas.contains(storages[1]) || excessReplicas.contains(storages[4]));
    nonExcess.clear();
    nonExcess.add(storages[0]);
    nonExcess.add(storages[1]);
    nonExcess.add(storages[2]);
    nonExcess.add(storages[3]);
    DatanodeStorageInfo excessStorage=DFSTestUtil.createDatanodeStorageInfo("Storage-excess-ID","localhost",delHintNode.getNetworkLocation(),"foo.com",StorageType.ARCHIVE,delHintNode.getUpgradeDomain());
    nonExcess.add(excessStorage);
    excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),null);
    assertTrue(excessReplicas.size() == 2);
    assertTrue(excessReplicas.contains(storages[0]));
    assertTrue(excessReplicas.contains(excessStorage));
    DatanodeStorageInfo excessSSD=DFSTestUtil.createDatanodeStorageInfo("Storage-excess-SSD-ID","localhost",storages[0].getDatanodeDescriptor().getNetworkLocation(),"foo.com",StorageType.SSD,null);
    DatanodeStorageInfo[] ssds={excessSSD};
    DatanodeDescriptor ssdNodes[]=DFSTestUtil.toDatanodeDescriptor(ssds);
    ssdNodes[0].setUpgradeDomain(Integer.toString(4));
    nonExcess.clear();
    nonExcess.add(excessSSD);
    nonExcess.add(storages[3]);
    nonExcess.add(storages[7]);
    nonExcess.add(storages[8]);
    excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
    excessReplicas=replicator.chooseReplicasToDelete(nonExcess,nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),storages[7].getDatanodeDescriptor());
    assertEquals(1,excessReplicas.size());
    assertTrue(excessReplicas.contains(excessSSD));
  }
  @Test public void testIsMovable() throws Exception {
    List<DatanodeInfo> candidates=new ArrayList<>();
    candidates.add(dataNodes[0]);
    candidates.add(dataNodes[1]);
    candidates.add(dataNodes[2]);
    candidates.add(dataNodes[3]);
    assertTrue(replicator.isMovable(candidates,dataNodes[0],dataNodes[3]));
    candidates.clear();
    candidates.add(dataNodes[0]);
    candidates.add(dataNodes[1]);
    candidates.add(dataNodes[2]);
    candidates.add(dataNodes[4]);
    assertFalse(replicator.isMovable(candidates,dataNodes[0],dataNodes[4]));
    candidates.clear();
    candidates.add(dataNodes[0]);
    candidates.add(dataNodes[4]);
    candidates.add(dataNodes[5]);
    candidates.add(dataNodes[6]);
    assertTrue(replicator.isMovable(candidates,dataNodes[0],dataNodes[6]));
    candidates.clear();
    candidates.add(dataNodes[0]);
    candidates.add(dataNodes[1]);
    candidates.add(dataNodes[3]);
    candidates.add(dataNodes[4]);
    assertTrue(replicator.isMovable(candidates,dataNodes[0],dataNodes[4]));
    candidates.clear();
    candidates.add(dataNodes[0]);
    candidates.add(dataNodes[3]);
    candidates.add(dataNodes[4]);
    candidates.add(dataNodes[6]);
    assertFalse(replicator.isMovable(candidates,dataNodes[4],dataNodes[6]));
  }
  private Set<String> getUpgradeDomains(  DatanodeStorageInfo[] nodes){
    HashSet<String> upgradeDomains=new HashSet<>();
    for (    DatanodeStorageInfo node : nodes) {
      upgradeDomains.add(node.getDatanodeDescriptor().getUpgradeDomain());
    }
    return upgradeDomains;
  }
  private Set<String> getRacks(  DatanodeStorageInfo[] nodes){
    HashSet<String> racks=new HashSet<>();
    for (    DatanodeStorageInfo node : nodes) {
      String rack=node.getDatanodeDescriptor().getNetworkLocation();
      racks.add(rack);
    }
    return racks;
  }
}
