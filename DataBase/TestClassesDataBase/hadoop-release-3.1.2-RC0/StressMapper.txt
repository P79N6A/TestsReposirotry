private static class StressMapper extends Mapper<LongWritable,Text,LongWritable,Text> {
  private int threadId;
  public long exposedState;
  protected void setup(  Context context){
    FileSplit split=(FileSplit)context.getInputSplit();
    Path filePath=split.getPath();
    String name=filePath.getName();
    this.threadId=Integer.valueOf(name);
    LOG.info("Thread " + threadId + " : "+ context.getInputSplit());
  }
  /** 
 * Map method with different behavior based on the thread id 
 */
  public void map(  LongWritable key,  Text val,  Context c) throws IOException, InterruptedException {
    for (int i=0; i < OUTPUT_SIZES[threadId]; i++) {
      c.write(new LongWritable(0),val);
      if (i % SLEEP_INTERVALS[threadId] == 1) {
        Thread.sleep(1);
      }
    }
  }
  protected void cleanup(  Context context){
    LOG.debug("Busy loop counter: " + this.exposedState);
  }
}
