public class TestRetriableCommand {
private static class MyRetriableCommand extends RetriableCommand {
    private int succeedAfter;
    private int retryCount=0;
    public MyRetriableCommand(    int succeedAfter){
      super("MyRetriableCommand");
      this.succeedAfter=succeedAfter;
    }
    public MyRetriableCommand(    int succeedAfter,    RetryPolicy retryPolicy){
      super("MyRetriableCommand",retryPolicy);
      this.succeedAfter=succeedAfter;
    }
    @Override protected Object doExecute(    Object... arguments) throws Exception {
      if (++retryCount < succeedAfter)       throw new Exception("Transient failure#" + retryCount);
      return 0;
    }
  }
  @Test public void testRetriableCommand(){
    try {
      new MyRetriableCommand(5).execute(0);
      Assert.assertTrue(false);
    }
 catch (    Exception e) {
      Assert.assertTrue(true);
    }
    try {
      new MyRetriableCommand(3).execute(0);
      Assert.assertTrue(true);
    }
 catch (    Exception e) {
      Assert.assertTrue(false);
    }
    try {
      new MyRetriableCommand(5,RetryPolicies.retryUpToMaximumCountWithFixedSleep(5,0,TimeUnit.MILLISECONDS)).execute(0);
      Assert.assertTrue(true);
    }
 catch (    Exception e) {
      Assert.assertTrue(false);
    }
  }
}
