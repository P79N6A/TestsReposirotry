public class TestProportionalCapacityPreemptionPolicyForNodePartitions extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testNodePartitionPreemptionRespectGuaranteedCapacity() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 20 50],x=[50 100 80 50]);" + "-b(=[50 100 80 50],x=[50 100 20 50])";
    String appsConfig="a\t" + "(1,1,n1,x,80,false);" + "a\t"+ "(1,1,n2,,20,false);"+ "b\t"+ "(1,1,n1,x,20,false);"+ "b\t"+ "(1,1,n2,,80,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNodePartitionPreemptionNotHappenBetweenSatisfiedQueues() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[80 80 0 0],x=[80 80 0 0]);" + "-b(=[10 100 0 0],x=[10 100 90 50]);"+ "-c(=[10 100 0 0],x=[10 30 10 50])";
    String appsConfig="b\t" + "(1,1,n1,x,90,false);" + "c\t"+ "(1,1,n1,x,10,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNodePartitionPreemptionOfIgnoreExclusivityAndRespectCapacity() throws IOException {
    String labelsConfig="=100,true;" + "x=100,false";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 0 0],x=[50 100 100 50]);" + "-b(=[50 100 0 0],x=[50 100 0 100])";
    String appsConfig="a\t" + "(1,1,n1,x,1,false)" + "(1,1,n1,,20,false);"+ "a\t"+ "(1,1,n1,x,79,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNodePartitionPreemptionOfSkippingAMContainer() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 0 0],x=[20 100 100 50]);" + "-b(=[50 100 0 0],x=[80 100 0 100])";
    String appsConfig="a\t" + "(1,1,n1,x,20,false);" + "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(5))));
  }
  @Test public void testNodePartitionPreemptionOfAMContainer() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 0 0],x=[3 100 100 50]);" + "-b(=[50 100 0 0],x=[97 100 0 100])";
    String appsConfig="a\t" + "(1,1,n1,x,20,false);" + "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);"+ "a\t"+ "(1,1,n1,x,20,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(20)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(20)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(5))));
  }
  @Test public void testNodePartitionDisablePreemptionForSingleLevelQueue() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[80 80 0 0],x=[40 100 50 50]);" + "-b(=[10 100 0 0],x=[20 100 30 0]);"+ "-c(=[10 100 0 0],x=[40 100 20 50])";
    String appsConfig="a\t" + "(1,1,n1,x,50,false);" + "b\t"+ "(1,1,n1,x,30,false);"+ "c\t"+ "(1,1,n1,x,20,false)";
    conf.setPreemptionDisabled("root.b",true);
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNodePartitionNonAccessibleQueuesSharePartitionedResource() throws IOException {
    String labelsConfig="=100,true;" + "x=100,false";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[25 100 0 0],x=[50 100 0 30]);" + "-b(=[25 100 0 0],x=[50 100 30 0]);"+ "-c(=[25 100 1 0],x=[0 0 35 50]);"+ "-d(=[25 100 1 0],x=[0 0 35 50])";
    String appsConfig="b\t" + "(1,1,n1,x,30,false);" + "c\t"+ "(1,1,n2,,1,false)"+ "(1,1,n1,,30,false);"+ "d\t"+ "(1,1,n2,,1,false)"+ "(1,1,n1,,30,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(15)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(15)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testHierarchyPreemptionForMultiplePartitions() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true;" + "y=100,true";
    String nodesConfig="n1=x;" + "n2=y;" + "n3=";
    String queuesConfig="root(=[100 100 0 0],x=[100 100 100 100],y=[100 100 100 100]);" + "-a(=[50 100 0 0],x=[50 100 60 40],y=[50 100 40 40]);" + "--a1(=[25 100 0 0],x=[25 100 35 20],y=[25 100 25 20]);"+ "--a2(=[25 100 0 0],x=[25 100 25 20],y=[25 100 15 20]);"+ "-b(=[50 100 0 0],x=[50 100 40 40],y=[50 100 60 40]);"+ "--b1(=[25 100 0 0],x=[25 100 15 20],y=[25 100 25 20]);"+ "--b2(=[25 100 0 0],x=[25 100 25 20],y=[25 100 35 20])";
    String appsConfig="a1\t" + "(1,1,n1,x,35,false)" + "(1,1,n2,y,25,false);"+ "a2\t"+ "(1,1,n1,x,25,false)"+ "(1,1,n2,y,15,false);"+ "b1\t"+ "(1,1,n1,x,15,false)"+ "(1,1,n2,y,25,false);"+ "b2\t"+ "(1,1,n1,x,25,false)"+ "(1,1,n2,y,35,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testHierarchyPreemptionForDifferenceAcessibility() throws IOException {
    String labelsConfig="=100,true;" + "x=100,true;" + "y=100,true";
    String nodesConfig="n1=x;" + "n2=y;" + "n3=";
    String queuesConfig="root(=[100 100 0 0],x=[100 100 100 100],y=[100 100 100 100]);" + "-a(=[50 100 0 0],x=[100 100 100 100]);" + "--a1(=[25 100 0 0],x=[50 100 100 0]);"+ "--a2(=[25 100 0 0],x=[50 100 0 100]);"+ "-b(=[50 100 0 0],y=[100 100 80 100]);"+ "--b1(=[25 100 0 0],y=[50 100 80 0]);"+ "--b2(=[25 100 0 0],y=[50 100 0 100])";
    String appsConfig="a1\t" + "(1,1,n1,x,100,false);" + "b1\t"+ "(1,1,n2,y,80,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(50)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNodePartitionPreemptionWithVCoreResource() throws IOException {
    String labelsConfig="=100:200,true;" + "x=100:200,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100:200 100:200 100:200 100:200],x=[100:200 100:200 100:200 100:200]);" + "-a(=[50:100 100:200 20:40 50:100],x=[50:100 100:200 80:160 50:100]);" + "-b(=[50:100 100:200 80:160 50:100],x=[50:100 100:200 20:40 50:100])";
    String appsConfig="a\t" + "(1,1:2,n1,x,80,false);" + "a\t"+ "(1,1:2,n2,,20,false);"+ "b\t"+ "(1,1:2,n1,x,20,false);"+ "b\t"+ "(1,1:2,n2,,80,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig,true);
    policy.editSchedule();
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(30)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNormalizeGuaranteeWithMultipleResource() throws IOException {
    Map<String,ResourceInformation> riMap=new HashMap<>();
    String RESOURCE_1="res1";
    ResourceInformation memory=ResourceInformation.newInstance(ResourceInformation.MEMORY_MB.getName(),ResourceInformation.MEMORY_MB.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);
    ResourceInformation vcores=ResourceInformation.newInstance(ResourceInformation.VCORES.getName(),ResourceInformation.VCORES.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
    riMap.put(ResourceInformation.MEMORY_URI,memory);
    riMap.put(ResourceInformation.VCORES_URI,vcores);
    riMap.put(RESOURCE_1,ResourceInformation.newInstance(RESOURCE_1,"",0,ResourceTypes.COUNTABLE,0,Integer.MAX_VALUE));
    ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
    String labelsConfig="=100,true;";
    String nodesConfig="n1=;";
    String queuesConfig="root(=[100:100:10 100:100:10 100:100:10 100:100:10]);" + "-a(=[50:80:4 100:100:10 80:90:10 30:20:4]);" + "--a1(=[25:30:2 100:50:10 80:90:10 0]);"+ "--a2(=[25:50:2 100:50:10 0 30:20:4]);"+ "-b(=[50:20:6 100:100:10 20:10 40:50:8]);"+ "--b1(=[25:5:4 100:20:10 0 20:10:4]);"+ "--b2(=[25:15:2 100:20:10 20:10 20:10:4])";
    String appsConfig="a1\t" + "(1,8:9:1,n1,,10,false);" + "b2\t"+ "(1,2:1,n1,,10,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(7)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    riMap.remove(RESOURCE_1);
    ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
  }
}
