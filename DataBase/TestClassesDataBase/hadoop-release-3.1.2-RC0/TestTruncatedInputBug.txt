/** 
 * test for the input truncation bug when mark/reset is used. HADOOP-1489
 */
public class TestTruncatedInputBug {
  private static String TEST_ROOT_DIR=GenericTestUtils.getTestDir().getAbsolutePath();
  private void writeFile(  FileSystem fileSys,  Path name,  int nBytesToWrite) throws IOException {
    DataOutputStream out=fileSys.create(name);
    for (int i=0; i < nBytesToWrite; ++i) {
      out.writeByte(0);
    }
    out.close();
  }
  /** 
 * When mark() is used on BufferedInputStream, the request size on the checksum file system can be small.  However, checksum file system currently depends on the request size >= bytesPerSum to work properly.
 */
  @Test public void testTruncatedInputBug() throws IOException {
    final int ioBufSize=512;
    final int fileSize=ioBufSize * 4;
    int filePos=0;
    Configuration conf=new Configuration();
    conf.setInt("io.file.buffer.size",ioBufSize);
    FileSystem fileSys=FileSystem.getLocal(conf);
    try {
      Path testFile=new Path(TEST_ROOT_DIR,"HADOOP-1489");
      writeFile(fileSys,testFile,fileSize);
      assertTrue(fileSys.exists(testFile));
      assertTrue(fileSys.getFileStatus(testFile).getLen() == fileSize);
      FSDataInputStream in=fileSys.open(testFile,ioBufSize);
      filePos+=ioBufSize * 2 + (ioBufSize - 10);
      in.seek(filePos);
      for (int i=0; i < 4; ++i) {
        if (in.read() == -1) {
          break;
        }
        ++filePos;
      }
      in.mark(1);
      System.out.println("MARKED");
      while (filePos < fileSize) {
        if (in.read() == -1) {
          break;
        }
        ++filePos;
      }
      in.close();
      System.out.println("Read " + filePos + " bytes."+ " file size="+ fileSize);
      assertTrue(filePos == fileSize);
    }
  finally {
      try {
        fileSys.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
