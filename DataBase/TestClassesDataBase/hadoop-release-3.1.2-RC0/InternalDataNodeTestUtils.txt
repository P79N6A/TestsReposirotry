/** 
 * An internal-facing only collection of test utilities for the DataNode. This is to ensure that test-scope dependencies aren't inadvertently leaked to clients, e.g. Mockito.
 */
public class InternalDataNodeTestUtils {
  public final static String TEST_CLUSTER_ID="testClusterID";
  public final static String TEST_POOL_ID="BP-TEST";
  public static DatanodeRegistration getDNRegistrationForBP(  DataNode dn,  String bpid) throws IOException {
    return dn.getDNRegistrationForBP(bpid);
  }
  /** 
 * This method is used to mock the data node block pinning API.
 * @param dn datanode
 * @param pinned true if the block is pinned, false otherwise
 * @throws IOException
 */
  public static void mockDatanodeBlkPinning(  final DataNode dn,  final boolean pinned) throws IOException {
    final FsDatasetSpi<? extends FsVolumeSpi> data=dn.data;
    dn.data=Mockito.spy(data);
    doAnswer(new Answer<Object>(){
      public Object answer(      InvocationOnMock invocation) throws IOException {
        return pinned;
      }
    }
).when(dn.data).getPinning(any(ExtendedBlock.class));
  }
  /** 
 * Insert a Mockito spy object between the given DataNode and the given NameNode. This can be used to delay or wait for RPC calls on the datanode->NN path.
 */
  public static DatanodeProtocolClientSideTranslatorPB spyOnBposToNN(  DataNode dn,  NameNode nn){
    String bpid=nn.getNamesystem().getBlockPoolId();
    BPOfferService bpos=null;
    for (    BPOfferService thisBpos : dn.getAllBpOs()) {
      if (thisBpos.getBlockPoolId().equals(bpid)) {
        bpos=thisBpos;
        break;
      }
    }
    Preconditions.checkArgument(bpos != null,"No such bpid: %s",bpid);
    BPServiceActor bpsa=null;
    for (    BPServiceActor thisBpsa : bpos.getBPServiceActors()) {
      if (thisBpsa.getNNSocketAddress().equals(nn.getServiceRpcAddress())) {
        bpsa=thisBpsa;
        break;
      }
    }
    Preconditions.checkArgument(bpsa != null,"No service actor to NN at %s",nn.getServiceRpcAddress());
    DatanodeProtocolClientSideTranslatorPB origNN=bpsa.getNameNodeProxy();
    DatanodeProtocolClientSideTranslatorPB spy=Mockito.spy(origNN);
    bpsa.setNameNode(spy);
    return spy;
  }
  /** 
 * Starts an instance of DataNode with NN mocked. Called should ensure to shutdown the DN
 * @throws IOException
 */
  public static DataNode startDNWithMockNN(  Configuration conf,  final InetSocketAddress nnSocketAddr,  final String dnDataDir) throws IOException {
    FileSystem.setDefaultUri(conf,"hdfs://" + nnSocketAddr.getHostName() + ":"+ nnSocketAddr.getPort());
    ArrayList<StorageLocation> locations=new ArrayList<StorageLocation>();
    File dataDir=new File(dnDataDir);
    FileUtil.fullyDelete(dataDir);
    dataDir.mkdirs();
    StorageLocation location=StorageLocation.parse(dataDir.getPath());
    locations.add(location);
    final DatanodeProtocolClientSideTranslatorPB namenode=mock(DatanodeProtocolClientSideTranslatorPB.class);
    Mockito.doAnswer(new Answer<DatanodeRegistration>(){
      @Override public DatanodeRegistration answer(      InvocationOnMock invocation) throws Throwable {
        return (DatanodeRegistration)invocation.getArguments()[0];
      }
    }
).when(namenode).registerDatanode(Mockito.any(DatanodeRegistration.class));
    when(namenode.versionRequest()).thenReturn(new NamespaceInfo(1,TEST_CLUSTER_ID,TEST_POOL_ID,1L));
    when(namenode.sendHeartbeat(Mockito.any(DatanodeRegistration.class),Mockito.any(StorageReport[].class),Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.anyInt(),Mockito.anyInt(),Mockito.any(VolumeFailureSummary.class),Mockito.anyBoolean(),Mockito.any(SlowPeerReports.class),Mockito.any(SlowDiskReports.class))).thenReturn(new HeartbeatResponse(new DatanodeCommand[0],new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1),null,ThreadLocalRandom.current().nextLong() | 1L));
    DataNode dn=new DataNode(conf,locations,null,null){
      @Override DatanodeProtocolClientSideTranslatorPB connectToNN(      InetSocketAddress nnAddr) throws IOException {
        Assert.assertEquals(nnSocketAddr,nnAddr);
        return namenode;
      }
    }
;
    dn.getAllBpOs().get(0).triggerHeartbeatForTests();
    return dn;
  }
}
