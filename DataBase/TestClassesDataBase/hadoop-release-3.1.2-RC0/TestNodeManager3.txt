class TestNodeManager3 extends NodeManager {
  private int registrationCount=0;
  @Override protected NodeStatusUpdater createNodeStatusUpdater(  Context context,  Dispatcher dispatcher,  NodeHealthCheckerService healthChecker){
    return new TestNodeStatusUpdaterImpl3(context,dispatcher,healthChecker,metrics);
  }
  public int getNMRegistrationCount(){
    return registrationCount;
  }
  @Override protected void shutDown(  int exitCode){
synchronized (isNMShutdownCalled) {
      isNMShutdownCalled.set(true);
      isNMShutdownCalled.notify();
    }
  }
class TestNodeStatusUpdaterImpl3 extends MockNodeStatusUpdater {
    public TestNodeStatusUpdaterImpl3(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker,    NodeManagerMetrics metrics){
      super(context,dispatcher,healthChecker,metrics);
    }
    @Override protected void registerWithRM() throws YarnException, IOException {
      super.registerWithRM();
      registrationCount++;
      if (registrationCount > 1) {
        throw new YarnRuntimeException("Registration with RM failed.");
      }
    }
  }
}
