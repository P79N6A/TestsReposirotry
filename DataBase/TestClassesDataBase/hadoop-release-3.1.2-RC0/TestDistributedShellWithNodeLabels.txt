public class TestDistributedShellWithNodeLabels {
  private static final Logger LOG=LoggerFactory.getLogger(TestDistributedShellWithNodeLabels.class);
  static final int NUM_NMS=2;
  TestDistributedShell distShellTest;
  @Before public void setup() throws Exception {
    distShellTest=new TestDistributedShell();
    distShellTest.setupInternal(NUM_NMS);
  }
  private void initializeNodeLabels() throws IOException {
    RMContext rmContext=distShellTest.yarnCluster.getResourceManager(0).getRMContext();
    RMNodeLabelsManager labelsMgr=rmContext.getNodeLabelManager();
    Set<String> labels=new HashSet<String>();
    labels.add("x");
    labelsMgr.addToCluserNodeLabelsWithDefaultExclusivity(labels);
    distShellTest.conf.set(PREFIX + "root.accessible-node-labels","x");
    distShellTest.conf.set(PREFIX + "root.accessible-node-labels.x.capacity","100");
    distShellTest.conf.set(PREFIX + "root.default.accessible-node-labels","x");
    distShellTest.conf.set(PREFIX + "root.default.accessible-node-labels.x.capacity","100");
    rmContext.getScheduler().reinitialize(distShellTest.conf,rmContext);
    NodeId[] nodeIds=new NodeId[NUM_NMS];
    for (int i=0; i < NUM_NMS; i++) {
      NodeManager mgr=distShellTest.yarnCluster.getNodeManager(i);
      nodeIds[i]=mgr.getNMContext().getNodeId();
    }
    labelsMgr.addLabelsToNode(ImmutableMap.of(nodeIds[1],labels));
  }
  @Test(timeout=90000) public void testDSShellWithNodeLabelExpression() throws Exception {
    initializeNodeLabels();
    NMContainerMonitor mon=new NMContainerMonitor();
    Thread t=new Thread(mon);
    t.start();
    String[] args={"--jar",TestDistributedShell.APPMASTER_JAR,"--num_containers","4","--shell_command","sleep","--shell_args","15","--master_memory","512","--master_vcores","2","--container_memory","128","--container_vcores","1","--node_label_expression","x"};
    LOG.info("Initializing DS Client");
    final Client client=new Client(new Configuration(distShellTest.yarnCluster.getConfig()));
    boolean initSuccess=client.init(args);
    Assert.assertTrue(initSuccess);
    LOG.info("Running DS Client");
    boolean result=client.run();
    LOG.info("Client run completed. Result=" + result);
    t.interrupt();
    int[] maxRunningContainersOnNMs=mon.getMaxRunningContainersReport();
    Assert.assertEquals(0,maxRunningContainersOnNMs[0]);
    Assert.assertTrue(maxRunningContainersOnNMs[1] > 0);
  }
  /** 
 * Monitor containers running on NMs
 */
class NMContainerMonitor implements Runnable {
    final static int SAMPLING_INTERVAL_MS=500;
    int[] maxRunningContainersOnNMs=new int[NUM_NMS];
    @Override public void run(){
      while (true) {
        for (int i=0; i < NUM_NMS; i++) {
          int nContainers=distShellTest.yarnCluster.getNodeManager(i).getNMContext().getContainers().size();
          if (nContainers > maxRunningContainersOnNMs[i]) {
            maxRunningContainersOnNMs[i]=nContainers;
          }
        }
        try {
          Thread.sleep(SAMPLING_INTERVAL_MS);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          break;
        }
      }
    }
    public int[] getMaxRunningContainersReport(){
      return maxRunningContainersOnNMs;
    }
  }
}
