/** 
 * A service which implements  {@link LaunchableService}. It <ol> <li>does nothing in its  {@link #serviceStart()}</li> <li>does its sleep+ maybe fail operation in its  {@link #execute()}method</li> <li>gets the failing flag from the argument  {@link #ARG_FAILING} first,the config file second.</li> <li>returns 0 for a successful execute</li> <li>returns a configurable exit code for a failing execute</li> <li>generates a new configuration in  {@link #bindArgs(Configuration,List)}to verify that these propagate.</li> </ol>
 */
public class LaunchableRunningService extends RunningService implements LaunchableService {
  public static final String NAME="org.apache.hadoop.service.launcher.testservices.LaunchableRunningService";
  public static final String ARG_FAILING="--failing";
  public static final String EXIT_CODE_PROP="exit.code";
  private static final Logger LOG=LoggerFactory.getLogger(LaunchableRunningService.class);
  private int exitCode=0;
  public LaunchableRunningService(){
    this("LaunchableRunningService");
  }
  public LaunchableRunningService(  String name){
    super(name);
  }
  @Override public Configuration bindArgs(  Configuration config,  List<String> args) throws Exception {
    Assert.assertEquals(STATE.NOTINITED,getServiceState());
    for (    String arg : args) {
      LOG.info(arg);
    }
    Configuration newConf=new Configuration(config);
    if (args.contains(ARG_FAILING)) {
      LOG.info("CLI contains " + ARG_FAILING);
      failInRun=true;
      newConf.setInt(EXIT_CODE_PROP,LauncherExitCodes.EXIT_OTHER_FAILURE);
    }
    return newConf;
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    super.serviceInit(conf);
    if (conf.getBoolean(FAIL_IN_RUN,false)) {
      exitCode=LauncherExitCodes.EXIT_FAIL;
    }
    exitCode=conf.getInt(EXIT_CODE_PROP,exitCode);
  }
  @Override protected void serviceStart() throws Exception {
  }
  @Override public int execute() throws Exception {
    Thread.sleep(delayTime);
    if (failInRun) {
      return exitCode;
    }
    return 0;
  }
  public int getExitCode(){
    return exitCode;
  }
  public void setExitCode(  int exitCode){
    this.exitCode=exitCode;
  }
}
