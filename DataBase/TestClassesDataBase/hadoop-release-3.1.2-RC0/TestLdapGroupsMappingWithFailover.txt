/** 
 * Test failover functionality for switching to different LDAP server URLs upon failures.
 */
public class TestLdapGroupsMappingWithFailover extends TestLdapGroupsMappingBase {
  private static final String TEST_USER_NAME="some_user";
  /** 
 * Test that when disabled, we will retry the configured number of times using the same LDAP server.
 */
  @Test public void testDoesNotFailoverWhenDisabled() throws Exception {
    final int numAttempts=3;
    Configuration conf=getBaseConf();
    conf.setStrings(LDAP_URL_KEY,"ldap://test","ldap://test1","ldap://test2");
    DummyLdapCtxFactory.setExpectedLdapUrl("ldap://test");
    conf.setInt(LDAP_NUM_ATTEMPTS_KEY,numAttempts);
    conf.setInt(LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,numAttempts);
    when(getContext().search(anyString(),anyString(),any(Object[].class),any(SearchControls.class))).thenThrow(new CommunicationException());
    LdapGroupsMapping groupsMapping=getGroupsMapping();
    groupsMapping.setConf(conf);
    List<String> groups=groupsMapping.getGroups(TEST_USER_NAME);
    assertTrue(groups.isEmpty());
    verify(getContext(),times(numAttempts)).search(anyString(),anyString(),any(Object[].class),any(SearchControls.class));
  }
  /** 
 * Test that when configured, we will make the specified amount of attempts using one ldap url before failing over to the next one. This also tests that we wrap back to the first server if we've tried them all.
 */
  @Test public void testFailover() throws Exception {
    Queue<String> ldapUrls=new LinkedList<>();
    ldapUrls.add("ldap://test");
    ldapUrls.add("ldap://test1");
    ldapUrls.add("ldap://test2");
    final int numAttempts=12;
    final int numAttemptsBeforeFailover=2;
    Configuration conf=getBaseConf();
    conf.setStrings(LDAP_URL_KEY,"ldap://test","ldap://test1","ldap://test2");
    conf.setInt(LDAP_NUM_ATTEMPTS_KEY,numAttempts);
    conf.setInt(LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,numAttemptsBeforeFailover);
    String nextLdapUrl=ldapUrls.remove();
    DummyLdapCtxFactory.setExpectedLdapUrl(nextLdapUrl);
    ldapUrls.add(nextLdapUrl);
    final AtomicInteger serverAttempts=new AtomicInteger(numAttemptsBeforeFailover);
    when(getContext().search(anyString(),anyString(),any(Object[].class),any(SearchControls.class))).thenAnswer(new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocationOnMock) throws Throwable {
        if (serverAttempts.get() == 1) {
          String nextLdapUrl=ldapUrls.remove();
          ldapUrls.add(nextLdapUrl);
          DummyLdapCtxFactory.setExpectedLdapUrl(nextLdapUrl);
          serverAttempts.set(numAttemptsBeforeFailover);
        }
 else {
          serverAttempts.decrementAndGet();
        }
        throw new CommunicationException();
      }
    }
);
    LdapGroupsMapping groupsMapping=getGroupsMapping();
    groupsMapping.setConf(conf);
    List<String> groups=groupsMapping.getGroups(TEST_USER_NAME);
    assertTrue(groups.isEmpty());
    verify(getContext(),times(numAttempts)).search(anyString(),anyString(),any(Object[].class),any(SearchControls.class));
  }
}
