/** 
 * Tests error conditions in ChainMapper/ChainReducer.
 */
public class TestChainErrors extends HadoopTestCase {
  private static String localPathRoot=System.getProperty("test.build.data","/tmp");
  public TestChainErrors() throws IOException {
    super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);
  }
  private Path inDir=new Path(localPathRoot,"testing/chain/input");
  private Path outDir=new Path(localPathRoot,"testing/chain/output");
  private String input="a\nb\nc\nd\n";
  /** 
 * Tests errors during submission.
 * @throws Exception
 */
  @Test public void testChainSubmission() throws Exception {
    Configuration conf=createJobConf();
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,0,0,input);
    job.setJobName("chain");
    Throwable th=null;
    try {
      ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);
      ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    }
 catch (    IllegalArgumentException iae) {
      th=iae;
    }
    assertTrue(th != null);
    th=null;
    try {
      ChainReducer.setReducer(job,Reducer.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);
      ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    }
 catch (    IllegalArgumentException iae) {
      th=iae;
    }
    assertTrue(th != null);
  }
  /** 
 * Tests one of the mappers throwing exception.
 * @throws Exception
 */
  @Test public void testChainFail() throws Exception {
    Configuration conf=createJobConf();
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,0,input);
    job.setJobName("chain");
    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainMapper.addMapper(job,FailMap.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);
    ChainMapper.addMapper(job,Mapper.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);
    job.waitForCompletion(true);
    assertTrue("Job Not failed",!job.isSuccessful());
  }
  /** 
 * Tests Reducer throwing exception.
 * @throws Exception
 */
  @Test public void testReducerFail() throws Exception {
    Configuration conf=createJobConf();
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1,input);
    job.setJobName("chain");
    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainReducer.setReducer(job,FailReduce.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainReducer.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    job.waitForCompletion(true);
    assertTrue("Job Not failed",!job.isSuccessful());
  }
  /** 
 * Tests one of the maps consuming output.
 * @throws Exception
 */
  @Test public void testChainMapNoOuptut() throws Exception {
    Configuration conf=createJobConf();
    String expectedOutput="";
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,0,input);
    job.setJobName("chain");
    ChainMapper.addMapper(job,ConsumeMap.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    job.waitForCompletion(true);
    assertTrue("Job failed",job.isSuccessful());
    assertEquals("Outputs doesn't match",expectedOutput,MapReduceTestUtil.readOutput(outDir,conf));
  }
  /** 
 * Tests reducer consuming output.
 * @throws Exception
 */
  @Test public void testChainReduceNoOuptut() throws Exception {
    Configuration conf=createJobConf();
    String expectedOutput="";
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1,input);
    job.setJobName("chain");
    ChainMapper.addMapper(job,Mapper.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainReducer.setReducer(job,ConsumeReduce.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    ChainReducer.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);
    job.waitForCompletion(true);
    assertTrue("Job failed",job.isSuccessful());
    assertEquals("Outputs doesn't match",expectedOutput,MapReduceTestUtil.readOutput(outDir,conf));
  }
public static class ConsumeMap extends Mapper<LongWritable,Text,LongWritable,Text> {
    public void map(    LongWritable key,    Text value,    Context context) throws IOException, InterruptedException {
    }
  }
public static class ConsumeReduce extends Reducer<LongWritable,Text,LongWritable,Text> {
    public void reduce(    LongWritable key,    Iterable<Text> values,    Context context) throws IOException, InterruptedException {
    }
  }
public static class FailMap extends Mapper<LongWritable,Text,IntWritable,Text> {
    protected void map(    LongWritable key,    Text value,    Context context) throws IOException, InterruptedException {
      if (value.toString().equals("b")) {
        throw new IOException();
      }
    }
  }
public static class FailReduce extends Reducer<LongWritable,Text,LongWritable,Text> {
    public void reduce(    LongWritable key,    Iterable<Text> values,    Context context) throws IOException, InterruptedException {
      throw new IOException();
    }
  }
}
