/** 
 * Mocking test of directory committer. 
 */
public class TestStagingDirectoryOutputCommitter extends StagingTestBase.JobCommitterTest<DirectoryStagingCommitter> {
  @Override DirectoryStagingCommitter newJobCommitter() throws Exception {
    return new DirectoryStagingCommitter(OUTPUT_PATH,createTaskAttemptForJob());
  }
  @Test public void testBadConflictMode() throws Throwable {
    getJob().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,"merge");
    intercept(IllegalArgumentException.class,"MERGE","committer conflict",this::newJobCommitter);
  }
  @Test public void testDefaultConflictResolution() throws Exception {
    getJob().getConfiguration().unset(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE);
    verifyFailureConflictOutcome();
  }
  @Test public void testFailConflictResolution() throws Exception {
    getJob().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_FAIL);
    verifyFailureConflictOutcome();
  }
  protected void verifyFailureConflictOutcome() throws Exception {
    FileSystem mockS3=getMockS3A();
    pathExists(mockS3,OUTPUT_PATH);
    final DirectoryStagingCommitter committer=newJobCommitter();
    intercept(PathExistsException.class,InternalCommitterConstants.E_DEST_EXISTS,"Should throw an exception because the path exists",() -> committer.setupJob(getJob()));
    committer.commitJob(getJob());
    reset(mockS3);
    pathDoesNotExist(mockS3,OUTPUT_PATH);
    committer.setupJob(getJob());
    verifyExistenceChecked(mockS3,OUTPUT_PATH);
    verifyNoMoreInteractions(mockS3);
    reset(mockS3);
    pathDoesNotExist(mockS3,OUTPUT_PATH);
    committer.commitJob(getJob());
    verifyCompletion(mockS3);
  }
  @Test public void testAppendConflictResolution() throws Exception {
    FileSystem mockS3=getMockS3A();
    pathExists(mockS3,OUTPUT_PATH);
    getJob().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_APPEND);
    final DirectoryStagingCommitter committer=newJobCommitter();
    committer.setupJob(getJob());
    verifyNoMoreInteractions(mockS3);
    Mockito.reset(mockS3);
    pathExists(mockS3,OUTPUT_PATH);
    committer.commitJob(getJob());
    verifyCompletion(mockS3);
  }
  @Test public void testReplaceConflictResolution() throws Exception {
    FileSystem mockS3=getMockS3A();
    pathExists(mockS3,OUTPUT_PATH);
    getJob().getConfiguration().set(FS_S3A_COMMITTER_STAGING_CONFLICT_MODE,CONFLICT_MODE_REPLACE);
    final DirectoryStagingCommitter committer=newJobCommitter();
    committer.setupJob(getJob());
    verifyNoMoreInteractions(mockS3);
    Mockito.reset(mockS3);
    pathExists(mockS3,OUTPUT_PATH);
    canDelete(mockS3,OUTPUT_PATH);
    committer.commitJob(getJob());
    verifyDeleted(mockS3,OUTPUT_PATH);
    verifyCompletion(mockS3);
  }
}
