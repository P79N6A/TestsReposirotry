public class TestProtocolRecords {
  @Test public void testResource(){
    final long mem=123;
    final int vcores=456;
    final Resource r=Resource.newInstance(mem,vcores);
    Assert.assertFalse(r instanceof ResourcePBImpl);
    Assert.assertEquals(mem,r.getMemorySize());
    Assert.assertEquals(vcores,r.getVirtualCores());
    ResourceProto proto=ProtoUtils.convertToProtoFormat(r);
    Assert.assertEquals(mem,proto.getMemory());
    Assert.assertEquals(vcores,proto.getVirtualCores());
    Assert.assertEquals(r,ProtoUtils.convertFromProtoFormat(proto));
  }
  @Test public void testNMContainerStatus(){
    ApplicationId appId=ApplicationId.newInstance(123456789,1);
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    ContainerId containerId=ContainerId.newContainerId(attemptId,1);
    Resource resource=Resource.newInstance(1000,200);
    NMContainerStatus report=NMContainerStatus.newInstance(containerId,0,ContainerState.COMPLETE,resource,"diagnostics",ContainerExitStatus.ABORTED,Priority.newInstance(10),1234);
    NMContainerStatus reportProto=new NMContainerStatusPBImpl(((NMContainerStatusPBImpl)report).getProto());
    Assert.assertEquals("diagnostics",reportProto.getDiagnostics());
    Assert.assertEquals(resource,reportProto.getAllocatedResource());
    Assert.assertEquals(ContainerExitStatus.ABORTED,reportProto.getContainerExitStatus());
    Assert.assertEquals(ContainerState.COMPLETE,reportProto.getContainerState());
    Assert.assertEquals(containerId,reportProto.getContainerId());
    Assert.assertEquals(Priority.newInstance(10),reportProto.getPriority());
    Assert.assertEquals(1234,reportProto.getCreationTime());
  }
  @Test public void testRegisterNodeManagerRequest(){
    ApplicationId appId=ApplicationId.newInstance(123456789,1);
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    ContainerId containerId=ContainerId.newContainerId(attemptId,1);
    NMContainerStatus containerReport=NMContainerStatus.newInstance(containerId,0,ContainerState.RUNNING,Resource.newInstance(1024,1),"diagnostics",0,Priority.newInstance(10),1234);
    List<NMContainerStatus> reports=Arrays.asList(containerReport);
    RegisterNodeManagerRequest request=RegisterNodeManagerRequest.newInstance(NodeId.newInstance("1.1.1.1",1000),8080,Resource.newInstance(1024,1),"NM-version-id",reports,Arrays.asList(appId));
    RegisterNodeManagerRequest requestProto=new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl)request).getProto());
    Assert.assertEquals(containerReport,requestProto.getNMContainerStatuses().get(0));
    Assert.assertEquals(8080,requestProto.getHttpPort());
    Assert.assertEquals("NM-version-id",requestProto.getNMVersion());
    Assert.assertEquals(NodeId.newInstance("1.1.1.1",1000),requestProto.getNodeId());
    Assert.assertEquals(Resource.newInstance(1024,1),requestProto.getResource());
    Assert.assertEquals(1,requestProto.getRunningApplications().size());
    Assert.assertEquals(appId,requestProto.getRunningApplications().get(0));
  }
  @Test public void testNodeHeartBeatResponse() throws IOException {
    NodeHeartbeatResponse record=Records.newRecord(NodeHeartbeatResponse.class);
    Map<ApplicationId,ByteBuffer> appCredentials=new HashMap<ApplicationId,ByteBuffer>();
    Credentials app1Cred=new Credentials();
    Token<DelegationTokenIdentifier> token1=new Token<DelegationTokenIdentifier>();
    token1.setKind(new Text("kind1"));
    app1Cred.addToken(new Text("token1"),token1);
    Token<DelegationTokenIdentifier> token2=new Token<DelegationTokenIdentifier>();
    token2.setKind(new Text("kind2"));
    app1Cred.addToken(new Text("token2"),token2);
    DataOutputBuffer dob=new DataOutputBuffer();
    app1Cred.writeTokenStorageToStream(dob);
    ByteBuffer byteBuffer1=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    appCredentials.put(ApplicationId.newInstance(1234,1),byteBuffer1);
    record.setSystemCredentialsForApps(appCredentials);
    NodeHeartbeatResponse proto=new NodeHeartbeatResponsePBImpl(((NodeHeartbeatResponsePBImpl)record).getProto());
    Assert.assertEquals(appCredentials,proto.getSystemCredentialsForApps());
  }
  @Test public void testNodeHeartBeatRequest() throws IOException {
    NodeHeartbeatRequest record=Records.newRecord(NodeHeartbeatRequest.class);
    NodeStatus nodeStatus=Records.newRecord(NodeStatus.class);
    OpportunisticContainersStatus opportunisticContainersStatus=Records.newRecord(OpportunisticContainersStatus.class);
    opportunisticContainersStatus.setEstimatedQueueWaitTime(123);
    opportunisticContainersStatus.setWaitQueueLength(321);
    nodeStatus.setOpportunisticContainersStatus(opportunisticContainersStatus);
    record.setNodeStatus(nodeStatus);
    NodeHeartbeatRequestPBImpl pb=new NodeHeartbeatRequestPBImpl(((NodeHeartbeatRequestPBImpl)record).getProto());
    Assert.assertEquals(123,pb.getNodeStatus().getOpportunisticContainersStatus().getEstimatedQueueWaitTime());
    Assert.assertEquals(321,pb.getNodeStatus().getOpportunisticContainersStatus().getWaitQueueLength());
  }
  @Test public void testContainerStatus(){
    ContainerStatus status=Records.newRecord(ContainerStatus.class);
    List<String> ips=Arrays.asList("127.0.0.1","139.5.25.2");
    status.setIPs(ips);
    status.setHost("locahost123");
    ContainerStatusPBImpl pb=new ContainerStatusPBImpl(((ContainerStatusPBImpl)status).getProto());
    Assert.assertEquals(ips,pb.getIPs());
    Assert.assertEquals("locahost123",pb.getHost());
    status.setIPs(null);
    Assert.assertNull(status.getIPs());
  }
}
