/** 
 * Test the safe mode for the  {@link Router} controlled by{@link RouterSafemodeService}.
 */
public class TestRouterSafemode {
  private Router router;
  private static Configuration conf;
  @BeforeClass public static void create() throws IOException {
    deleteStateStore();
    conf=getStateStoreConfiguration();
    conf.setTimeDuration(DFS_ROUTER_SAFEMODE_EXTENSION,TimeUnit.SECONDS.toMillis(2),TimeUnit.MILLISECONDS);
    conf.setTimeDuration(DFS_ROUTER_CACHE_TIME_TO_LIVE_MS,200,TimeUnit.MILLISECONDS);
    conf.setTimeDuration(DFS_ROUTER_SAFEMODE_EXPIRATION,TimeUnit.SECONDS.toMillis(1),TimeUnit.MILLISECONDS);
    conf.set(RBFConfigKeys.DFS_ROUTER_RPC_BIND_HOST_KEY,"0.0.0.0");
    conf.set(RBFConfigKeys.DFS_ROUTER_RPC_ADDRESS_KEY,"127.0.0.1:0");
    conf.set(RBFConfigKeys.DFS_ROUTER_ADMIN_ADDRESS_KEY,"127.0.0.1:0");
    conf.set(RBFConfigKeys.DFS_ROUTER_ADMIN_BIND_HOST_KEY,"0.0.0.0");
    conf.set(RBFConfigKeys.DFS_ROUTER_HTTP_ADDRESS_KEY,"127.0.0.1:0");
    conf.set(RBFConfigKeys.DFS_ROUTER_HTTPS_ADDRESS_KEY,"127.0.0.1:0");
    conf=new RouterConfigBuilder(conf).rpc().admin().safemode().stateStore().metrics().build();
  }
  @AfterClass public static void destroy(){
  }
  @Before public void setup() throws IOException, URISyntaxException {
    router=new Router();
    router.init(conf);
    router.start();
  }
  @After public void cleanup() throws IOException {
    if (router != null) {
      router.stop();
      router=null;
    }
  }
  @Test public void testSafemodeService() throws IOException {
    RouterSafemodeService server=new RouterSafemodeService(router);
    server.init(conf);
    assertEquals(STATE.INITED,server.getServiceState());
    server.start();
    assertEquals(STATE.STARTED,server.getServiceState());
    server.stop();
    assertEquals(STATE.STOPPED,server.getServiceState());
    server.close();
  }
  @Test public void testRouterExitSafemode() throws InterruptedException, IllegalStateException, IOException {
    assertTrue(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.SAFEMODE);
    long interval=conf.getTimeDuration(DFS_ROUTER_SAFEMODE_EXTENSION,TimeUnit.SECONDS.toMillis(2),TimeUnit.MILLISECONDS) + conf.getTimeDuration(DFS_ROUTER_CACHE_TIME_TO_LIVE_MS,TimeUnit.SECONDS.toMillis(1),TimeUnit.MILLISECONDS);
    Thread.sleep(interval);
    assertFalse(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.RUNNING);
  }
  @Test public void testRouterEnterSafemode() throws IllegalStateException, IOException, InterruptedException {
    assertTrue(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.SAFEMODE);
    long interval0=conf.getTimeDuration(DFS_ROUTER_SAFEMODE_EXTENSION,TimeUnit.SECONDS.toMillis(2),TimeUnit.MILLISECONDS) - 1000;
    long t0=Time.now();
    while (Time.now() - t0 < interval0) {
      verifyRouter(RouterServiceState.SAFEMODE);
      Thread.sleep(100);
    }
    long interval1=1000 + 2 * conf.getTimeDuration(DFS_ROUTER_CACHE_TIME_TO_LIVE_MS,TimeUnit.SECONDS.toMillis(1),TimeUnit.MILLISECONDS);
    Thread.sleep(interval1);
    assertFalse(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.RUNNING);
    router.getStateStore().stopCacheUpdateService();
    long interval2=conf.getTimeDuration(DFS_ROUTER_SAFEMODE_EXPIRATION,TimeUnit.SECONDS.toMillis(2),TimeUnit.MILLISECONDS) + 2 * conf.getTimeDuration(DFS_ROUTER_CACHE_TIME_TO_LIVE_MS,TimeUnit.SECONDS.toMillis(1),TimeUnit.MILLISECONDS);
    Thread.sleep(interval2);
    assertTrue(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.SAFEMODE);
  }
  @Test public void testRouterRpcSafeMode() throws IllegalStateException, IOException {
    assertTrue(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.SAFEMODE);
    boolean exception=false;
    try {
      router.getRpcServer().delete("/testfile.txt",true);
      fail("We should have thrown a safe mode exception");
    }
 catch (    StandbyException sme) {
      exception=true;
    }
    assertTrue("We should have thrown a safe mode exception",exception);
  }
  @Test public void testRouterManualSafeMode() throws Exception {
    InetSocketAddress adminAddr=router.getAdminServerAddress();
    conf.setSocketAddr(RBFConfigKeys.DFS_ROUTER_ADMIN_ADDRESS_KEY,adminAddr);
    RouterAdmin admin=new RouterAdmin(conf);
    assertTrue(router.getSafemodeService().isInSafeMode());
    verifyRouter(RouterServiceState.SAFEMODE);
    long interval=conf.getTimeDuration(DFS_ROUTER_SAFEMODE_EXTENSION,TimeUnit.SECONDS.toMillis(2),TimeUnit.MILLISECONDS) + 300;
    Thread.sleep(interval);
    verifyRouter(RouterServiceState.RUNNING);
    assertEquals(0,ToolRunner.run(admin,new String[]{"-safemode","enter"}));
    verifyRouter(RouterServiceState.SAFEMODE);
    interval=2 * conf.getTimeDuration(DFS_ROUTER_CACHE_TIME_TO_LIVE_MS,TimeUnit.SECONDS.toMillis(1),TimeUnit.MILLISECONDS);
    Thread.sleep(interval);
    verifyRouter(RouterServiceState.SAFEMODE);
    assertEquals(0,ToolRunner.run(admin,new String[]{"-safemode","leave"}));
    verifyRouter(RouterServiceState.RUNNING);
  }
  private void verifyRouter(  RouterServiceState status) throws IllegalStateException, IOException {
    assertEquals(status,router.getRouterState());
  }
}
