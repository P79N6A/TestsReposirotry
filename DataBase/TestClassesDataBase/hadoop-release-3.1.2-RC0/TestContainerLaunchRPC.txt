public class TestContainerLaunchRPC {
  static final Log LOG=LogFactory.getLog(TestContainerLaunchRPC.class);
  private static final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  @Test public void testHadoopProtoRPCTimeout() throws Exception {
    testRPCTimeout(HadoopYarnProtoRPC.class.getName());
  }
  private void testRPCTimeout(  String rpcClass) throws Exception {
    Configuration conf=new Configuration();
    conf.setInt("yarn.rpc.nm-command-timeout",3000);
    conf.set(YarnConfiguration.IPC_RPC_IMPL,rpcClass);
    YarnRPC rpc=YarnRPC.create(conf);
    String bindAddr="localhost:0";
    InetSocketAddress addr=NetUtils.createSocketAddr(bindAddr);
    Server server=rpc.getServer(ContainerManagementProtocol.class,new DummyContainerManager(),addr,conf,null,1);
    server.start();
    try {
      ContainerManagementProtocol proxy=(ContainerManagementProtocol)rpc.getProxy(ContainerManagementProtocol.class,server.getListenerAddress(),conf);
      ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
      ApplicationId applicationId=ApplicationId.newInstance(0,0);
      ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(applicationId,0);
      ContainerId containerId=ContainerId.newContainerId(applicationAttemptId,100);
      NodeId nodeId=NodeId.newInstance("localhost",1234);
      Resource resource=Resource.newInstance(1234,2);
      ContainerTokenIdentifier containerTokenIdentifier=new ContainerTokenIdentifier(containerId,"localhost","user",resource,System.currentTimeMillis() + 10000,42,42,Priority.newInstance(0),0);
      Token containerToken=newContainerToken(nodeId,"password".getBytes(),containerTokenIdentifier);
      StartContainerRequest scRequest=StartContainerRequest.newInstance(containerLaunchContext,containerToken);
      List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
      list.add(scRequest);
      StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
      try {
        proxy.startContainers(allRequests);
      }
 catch (      Exception e) {
        LOG.info(StringUtils.stringifyException(e));
        Assert.assertEquals("Error, exception is not: " + SocketTimeoutException.class.getName(),SocketTimeoutException.class.getName(),e.getClass().getName());
        return;
      }
    }
  finally {
      server.stop();
    }
    Assert.fail("timeout exception should have occurred!");
  }
  public static Token newContainerToken(  NodeId nodeId,  byte[] password,  ContainerTokenIdentifier tokenIdentifier){
    InetSocketAddress addr=NetUtils.createSocketAddrForHost(nodeId.getHost(),nodeId.getPort());
    Token containerToken=Token.newInstance(tokenIdentifier.getBytes(),ContainerTokenIdentifier.KIND.toString(),password,SecurityUtil.buildTokenService(addr).toString());
    return containerToken;
  }
public class DummyContainerManager implements ContainerManagementProtocol {
    private ContainerStatus status=null;
    @Override public StartContainersResponse startContainers(    StartContainersRequest requests) throws YarnException, IOException {
      try {
        Thread.sleep(10000);
      }
 catch (      Exception e) {
        LOG.error(e);
        throw new YarnException(e);
      }
      throw new YarnException("Shouldn't happen!!");
    }
    @Override public StopContainersResponse stopContainers(    StopContainersRequest requests) throws YarnException, IOException {
      Exception e=new Exception("Dummy function",new Exception("Dummy function cause"));
      throw new YarnException(e);
    }
    @Override public GetContainerStatusesResponse getContainerStatuses(    GetContainerStatusesRequest request) throws YarnException, IOException {
      List<ContainerStatus> list=new ArrayList<ContainerStatus>();
      list.add(status);
      GetContainerStatusesResponse response=GetContainerStatusesResponse.newInstance(list,null);
      return null;
    }
    @Override @Deprecated public IncreaseContainersResourceResponse increaseContainersResource(    IncreaseContainersResourceRequest request) throws YarnException, IOException {
      return null;
    }
    @Override public SignalContainerResponse signalToContainer(    SignalContainerRequest request) throws YarnException, IOException {
      final Exception e=new Exception("Dummy function",new Exception("Dummy function cause"));
      throw new YarnException(e);
    }
    @Override public ResourceLocalizationResponse localize(    ResourceLocalizationRequest request) throws YarnException, IOException {
      return null;
    }
    @Override public ReInitializeContainerResponse reInitializeContainer(    ReInitializeContainerRequest request) throws YarnException, IOException {
      return null;
    }
    @Override public RestartContainerResponse restartContainer(    ContainerId containerId) throws YarnException, IOException {
      return null;
    }
    @Override public RollbackResponse rollbackLastReInitialization(    ContainerId containerId) throws YarnException, IOException {
      return null;
    }
    @Override public CommitResponse commitLastReInitialization(    ContainerId containerId) throws YarnException, IOException {
      return null;
    }
    @Override public ContainerUpdateResponse updateContainer(    ContainerUpdateRequest request) throws YarnException, IOException {
      return null;
    }
  }
}
