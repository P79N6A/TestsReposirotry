/** 
 * Base class for job committer tests.
 * @param < C > committer
 */
public abstract static class JobCommitterTest<C extends OutputCommitter> extends HadoopTestBase {
  private static final JobID JOB_ID=new JobID("job",1);
  private JobConf jobConf;
  private S3AFileSystem mockFS=null;
  private MockS3AFileSystem wrapperFS=null;
  private JobContext job=null;
  private StagingTestBase.ClientResults results=null;
  private StagingTestBase.ClientErrors errors=null;
  private AmazonS3 mockClient=null;
  @Before public void setupJob() throws Exception {
    this.jobConf=new JobConf();
    jobConf.set(InternalCommitterConstants.FS_S3A_COMMITTER_STAGING_UUID,UUID.randomUUID().toString());
    jobConf.setBoolean(CommitConstants.CREATE_SUCCESSFUL_JOB_OUTPUT_DIR_MARKER,false);
    this.job=new JobContextImpl(jobConf,JOB_ID);
    this.results=new StagingTestBase.ClientResults();
    this.errors=new StagingTestBase.ClientErrors();
    this.mockClient=newMockS3Client(results,errors);
    this.mockFS=createAndBindMockFSInstance(jobConf,Pair.of(results,errors));
    this.wrapperFS=lookupWrapperFS(jobConf);
    wrapperFS.setAmazonS3Client(mockClient);
  }
  public S3AFileSystem getMockS3A(){
    return mockFS;
  }
  public MockS3AFileSystem getWrapperFS(){
    return wrapperFS;
  }
  public JobContext getJob(){
    return job;
  }
  /** 
 * Create a task attempt for a job by creating a stub task ID.
 * @return a task attempt
 */
  public TaskAttemptContext createTaskAttemptForJob(){
    return AbstractCommitITest.taskAttemptForJob(MRBuilderUtils.newJobId(1,JOB_ID.getId(),1),job);
  }
  protected StagingTestBase.ClientResults getMockResults(){
    return results;
  }
  protected StagingTestBase.ClientErrors getMockErrors(){
    return errors;
  }
  abstract C newJobCommitter() throws Exception ;
}
