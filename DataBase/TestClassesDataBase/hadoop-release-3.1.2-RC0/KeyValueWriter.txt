static class KeyValueWriter<K,V> {
  private Class<K> keyClass;
  private Class<V> valueClass;
  private DataOutputBuffer dataBuffer;
  private Serializer<K> keySerializer;
  private Serializer<V> valueSerializer;
  private DataOutputStream outputStream;
  public KeyValueWriter(  Configuration conf,  OutputStream output,  Class<K> kyClass,  Class<V> valClass) throws IOException {
    keyClass=kyClass;
    valueClass=valClass;
    dataBuffer=new DataOutputBuffer();
    SerializationFactory serializationFactory=new SerializationFactory(conf);
    keySerializer=(Serializer<K>)serializationFactory.getSerializer(keyClass);
    keySerializer.open(dataBuffer);
    valueSerializer=(Serializer<V>)serializationFactory.getSerializer(valueClass);
    valueSerializer.open(dataBuffer);
    outputStream=new DataOutputStream(output);
  }
  public void write(  K key,  V value) throws IOException {
    if (key.getClass() != keyClass) {
      throw new IOException("wrong key class: " + key.getClass() + " is not "+ keyClass);
    }
    if (value.getClass() != valueClass) {
      throw new IOException("wrong value class: " + value.getClass() + " is not "+ valueClass);
    }
    keySerializer.serialize(key);
    int keyLength=dataBuffer.getLength();
    if (keyLength < 0) {
      throw new IOException("Negative key-length not allowed: " + keyLength + " for "+ key);
    }
    valueSerializer.serialize(value);
    int valueLength=dataBuffer.getLength() - keyLength;
    if (valueLength < 0) {
      throw new IOException("Negative value-length not allowed: " + valueLength + " for "+ value);
    }
    WritableUtils.writeVInt(outputStream,keyLength);
    WritableUtils.writeVInt(outputStream,valueLength);
    outputStream.write(dataBuffer.getData(),0,dataBuffer.getLength());
    dataBuffer.reset();
  }
  public void close() throws IOException {
    keySerializer.close();
    valueSerializer.close();
    WritableUtils.writeVInt(outputStream,IFile.EOF_MARKER);
    WritableUtils.writeVInt(outputStream,IFile.EOF_MARKER);
    outputStream.close();
  }
}
