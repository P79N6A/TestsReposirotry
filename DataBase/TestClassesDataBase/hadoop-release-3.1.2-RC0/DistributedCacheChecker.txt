public static class DistributedCacheChecker extends Mapper<LongWritable,Text,NullWritable,NullWritable> {
  @Override public void setup(  Context context) throws IOException {
    Configuration conf=context.getConfiguration();
    Path[] localFiles=context.getLocalCacheFiles();
    URI[] files=context.getCacheFiles();
    Path[] localArchives=context.getLocalCacheArchives();
    URI[] archives=context.getCacheArchives();
    Assert.assertEquals(4,localFiles.length);
    Assert.assertEquals(4,files.length);
    Assert.assertEquals(2,localArchives.length);
    Assert.assertEquals(2,archives.length);
    Map<String,Path> filesMap=pathsToMap(localFiles);
    Assert.assertTrue(filesMap.containsKey("distributed.first.symlink"));
    Assert.assertEquals(1,localFs.getFileStatus(filesMap.get("distributed.first.symlink")).getLen());
    Assert.assertTrue(filesMap.containsKey("distributed.second.jar"));
    Assert.assertTrue(localFs.getFileStatus(filesMap.get("distributed.second.jar")).getLen() > 1);
    Map<String,Path> archivesMap=pathsToMap(localArchives);
    Assert.assertTrue(archivesMap.containsKey("distributed.third.jar"));
    Assert.assertTrue(localFs.exists(new Path(archivesMap.get("distributed.third.jar"),"distributed.jar.inside3")));
    Assert.assertTrue(archivesMap.containsKey("distributed.fourth.jar"));
    Assert.assertTrue(localFs.exists(new Path(archivesMap.get("distributed.fourth.jar"),"distributed.jar.inside4")));
    LOG.info("Java Classpath: " + System.getProperty("java.class.path"));
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    Assert.assertNotNull(cl.getResource("distributed.jar.inside2"));
    Assert.assertNotNull(cl.getResource("distributed.jar.inside3"));
    Assert.assertNotNull(cl.getResource("distributed.jar.inside4"));
    Assert.assertNotNull(cl.getResource("job.jar/"));
    Assert.assertNotNull(cl.getResource("job.jar/lib/lib1.jar"));
    Assert.assertNotNull(cl.getResource("job.jar/lib/lib2.jar"));
    File symlinkFile=new File("distributed.first.symlink");
    Assert.assertTrue(symlinkFile.exists());
    Assert.assertEquals(1,symlinkFile.length());
    File jobJarDir=new File("job.jar");
    if (Shell.WINDOWS) {
      Assert.assertTrue(isWindowsSymlinkedDirectory(jobJarDir));
    }
 else {
      Assert.assertTrue(FileUtils.isSymlink(jobJarDir));
      Assert.assertTrue(jobJarDir.isDirectory());
    }
  }
  /** 
 * Used on Windows to determine if the specified file is a symlink that targets a directory.  On most platforms, these checks can be done using commons-io.  On Windows, the commons-io implementation is unreliable and always returns false.  Instead, this method checks the output of the dir command.  After migrating to Java 7, this method can be removed in favor of the new method java.nio.file.Files.isSymbolicLink, which is expected to work cross-platform.
 * @param file File to check
 * @return boolean true if the file is a symlink that targets a directory
 * @throws IOException thrown for any I/O error
 */
  private static boolean isWindowsSymlinkedDirectory(  File file) throws IOException {
    String dirOut=Shell.execCommand("cmd","/c","dir",file.getAbsoluteFile().getParent());
    StringReader sr=new StringReader(dirOut);
    BufferedReader br=new BufferedReader(sr);
    try {
      String line=br.readLine();
      while (line != null) {
        line=br.readLine();
        if (line.contains(file.getName()) && line.contains("<SYMLINKD>")) {
          return true;
        }
      }
      return false;
    }
  finally {
      IOUtils.closeStream(br);
      IOUtils.closeStream(sr);
    }
  }
  /** 
 * Returns a mapping of the final component of each path to the corresponding Path instance.  This assumes that every given Path has a unique string in the final path component, which is true for these tests.
 * @param paths Path[] to map
 * @return Map<String, Path> mapping the final component of each path to thecorresponding Path instance
 */
  private static Map<String,Path> pathsToMap(  Path[] paths){
    Map<String,Path> map=new HashMap<String,Path>();
    for (    Path path : paths) {
      map.put(path.getName(),path);
    }
    return map;
  }
}
