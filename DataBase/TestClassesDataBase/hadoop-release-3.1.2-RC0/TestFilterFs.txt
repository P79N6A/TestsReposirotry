public class TestFilterFs {
  private static final Log LOG=FileSystem.LOG;
public static class DontCheck {
    public void checkScheme(    URI uri,    String supportedScheme){
    }
    public Iterator<FileStatus> listStatusIterator(    Path f){
      return null;
    }
    public Iterator<LocatedFileStatus> listLocatedStatus(    final Path f){
      return null;
    }
  }
  @Test public void testFilterFileSystem() throws Exception {
    for (    Method m : AbstractFileSystem.class.getDeclaredMethods()) {
      if (Modifier.isStatic(m.getModifiers()))       continue;
      if (Modifier.isPrivate(m.getModifiers()))       continue;
      if (Modifier.isFinal(m.getModifiers()))       continue;
      try {
        DontCheck.class.getMethod(m.getName(),m.getParameterTypes());
        LOG.info("Skipping " + m);
      }
 catch (      NoSuchMethodException exc) {
        LOG.info("Testing " + m);
        try {
          FilterFs.class.getDeclaredMethod(m.getName(),m.getParameterTypes());
        }
 catch (        NoSuchMethodException exc2) {
          LOG.error("FilterFileSystem doesn't implement " + m);
          throw exc2;
        }
      }
    }
  }
  @Test public void testFilteringWithNonrequiredAuthority() throws Exception {
    Configuration conf=new Configuration();
    ConfigUtil.addLink(conf,"custom","/mnt",URI.create("file:///"));
    FileContext fc=FileContext.getFileContext(URI.create("viewfs://custom/"),conf);
    new FilterFs(fc.getDefaultFileSystem()){
    }
;
  }
}
