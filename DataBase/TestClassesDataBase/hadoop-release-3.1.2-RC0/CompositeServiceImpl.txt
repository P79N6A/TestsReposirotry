/** 
 * This is a composite service that keeps a count of the number of lifecycle events called, and can be set to throw a  {@link ServiceTestRuntimeException }during service start or stop
 */
public static class CompositeServiceImpl extends CompositeService {
  public static boolean isPolicyToStopOnlyStartedServices(){
    return STOP_ONLY_STARTED_SERVICES;
  }
  private static int counter=-1;
  private int callSequenceNumber=-1;
  private boolean throwExceptionOnStart;
  private boolean throwExceptionOnStop;
  public CompositeServiceImpl(  int sequenceNumber){
    super(Integer.toString(sequenceNumber));
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    counter++;
    callSequenceNumber=counter;
    super.serviceInit(conf);
  }
  @Override protected void serviceStart() throws Exception {
    if (throwExceptionOnStart) {
      throw new ServiceTestRuntimeException("Fake service start exception");
    }
    counter++;
    callSequenceNumber=counter;
    super.serviceStart();
  }
  @Override protected void serviceStop() throws Exception {
    counter++;
    callSequenceNumber=counter;
    if (throwExceptionOnStop) {
      throw new ServiceTestRuntimeException("Fake service stop exception");
    }
    super.serviceStop();
  }
  public static int getCounter(){
    return counter;
  }
  public int getCallSequenceNumber(){
    return callSequenceNumber;
  }
  public void reset(){
    callSequenceNumber=-1;
    counter=-1;
  }
  public static void resetCounter(){
    counter=-1;
  }
  public void setThrowExceptionOnStart(  boolean throwExceptionOnStart){
    this.throwExceptionOnStart=throwExceptionOnStart;
  }
  public void setThrowExceptionOnStop(  boolean throwExceptionOnStop){
    this.throwExceptionOnStop=throwExceptionOnStop;
  }
  @Override public String toString(){
    return "Service " + getName();
  }
}
