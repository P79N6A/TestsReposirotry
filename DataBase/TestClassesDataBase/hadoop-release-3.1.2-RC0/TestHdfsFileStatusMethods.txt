/** 
 * Unit test verifying that  {@link HdfsFileStatus} is a superset of{@link FileStatus}.
 */
public class TestHdfsFileStatusMethods {
  @Test public void testInterfaceSuperset(){
    Set<MethodSignature> fsM=signatures(FileStatus.class);
    Set<MethodSignature> hfsM=signatures(HdfsFileStatus.class);
    hfsM.addAll(Stream.of(HdfsFileStatus.class.getInterfaces()).flatMap(i -> Stream.of(i.getDeclaredMethods())).map(MethodSignature::new).collect(toSet()));
    hfsM.addAll(signatures(Object.class));
    assertTrue(fsM.removeAll(hfsM));
    assertEquals(fsM.stream().map(MethodSignature::toString).collect(joining("\n")),Collections.emptySet(),fsM);
  }
  /** 
 * Map non-static, declared methods for this class to signatures. 
 */
  private static Set<MethodSignature> signatures(  Class<?> c){
    return Stream.of(c.getDeclaredMethods()).filter(m -> !Modifier.isStatic(m.getModifiers())).map(MethodSignature::new).collect(toSet());
  }
private static class MethodSignature {
    private final String name;
    private final Type rval;
    private final Type[] param;
    MethodSignature(    Method m){
      name=m.getName();
      rval=m.getGenericReturnType();
      param=m.getParameterTypes();
    }
    @Override public int hashCode(){
      return name.hashCode();
    }
    /** 
 * Methods are equal iff they have the same name, return type, and params (non-generic).
 */
    @Override public boolean equals(    Object o){
      if (!(o instanceof MethodSignature)) {
        return false;
      }
      MethodSignature s=(MethodSignature)o;
      return name.equals(s.name) && rval.equals(s.rval) && Arrays.equals(param,s.param);
    }
    @Override public String toString(){
      StringBuilder sb=new StringBuilder();
      sb.append(rval).append(" ").append(name).append("(").append(Stream.of(param).map(Type::toString).collect(joining(","))).append(")");
      return sb.toString();
    }
  }
}
