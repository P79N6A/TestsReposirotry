/** 
 * A test implementation of HistoryFileManager that does not move files from intermediate directory to done directory and hangs up parsing job history files.
 */
class HistoryFileManagerUnderContention extends HistoryFileManager {
  /** 
 * A map of job to a signal that indicates whether the intermediate directory is done being scanned before the job files are parsed.
 */
  private Map<JobId,CountDownLatch> scanningDoneSignals=new HashMap<>();
  /** 
 * A HistoryFileManager that expects to load given jobs and hangs up parsing the job files. It perform no moving of files from the intermediate directory to done directory.
 * @param jobId the set of jobs expected to load and parse
 */
  public HistoryFileManagerUnderContention(  JobId... jobId){
    for (    JobId job : jobId) {
      scanningDoneSignals.put(job,new CountDownLatch(1));
    }
  }
  /** 
 * Wait until scanning of the intermediate directory finishes and load of the given job is started.
 */
  public void waitUntilIntermediateDirIsScanned(  JobId jobId) throws InterruptedException {
    if (scanningDoneSignals.containsKey(jobId)) {
      scanningDoneSignals.get(jobId).await();
    }
  }
  /** 
 * Create a HistoryFileInfo instance that hangs on parsing job files.
 */
  @Override protected HistoryFileManager.HistoryFileInfo createHistoryFileInfo(  Path historyFile,  Path confFile,  Path summaryFile,  JobIndexInfo jobIndexInfo,  boolean isInDone){
    return new HistoryFileInfo(historyFile,confFile,summaryFile,jobIndexInfo,isInDone,scanningDoneSignals.get(jobIndexInfo.getJobId()));
  }
  /** 
 * Create a dummy ThreadPoolExecutor that does not execute submitted tasks.
 */
  @Override protected ThreadPoolExecutor createMoveToDoneThreadPool(  int numMoveThreads){
    return mock(ThreadPoolExecutor.class);
  }
  /** 
 * A HistoryFileInfo implementation that takes forever to parse the associated job files. This mimics the behavior of parsing huge job files.
 */
class HistoryFileInfo extends HistoryFileManager.HistoryFileInfo {
    /** 
 * A signal that indicates scanning of the intermediate directory is done as HistoryFileManager is in the process of loading the HistoryFileInfo instance.
 */
    private final CountDownLatch scanningDoneSignal;
    HistoryFileInfo(    Path historyFile,    Path confFile,    Path summaryFile,    JobIndexInfo jobIndexInfo,    boolean isInDone,    CountDownLatch scanningDoneSignal){
      super(historyFile,confFile,summaryFile,jobIndexInfo,isInDone);
      this.scanningDoneSignal=scanningDoneSignal;
    }
    /** 
 * An test implementation that takes forever to load a job in order to mimic what happens when job files of large size are parsed in JHS. Before loading, we signal that scanning of the intermediate directory is finished.
 */
    @Override public synchronized Job loadJob() throws IOException {
      if (scanningDoneSignal != null) {
        scanningDoneSignal.countDown();
      }
      while (!Thread.currentThread().isInterrupted()) {
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
        }
      }
      return null;
    }
  }
}
