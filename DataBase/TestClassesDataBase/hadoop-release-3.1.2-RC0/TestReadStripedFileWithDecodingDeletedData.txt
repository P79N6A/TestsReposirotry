/** 
 * Test online recovery with files with deleted blocks. This test is parameterized.
 */
@RunWith(Parameterized.class) public class TestReadStripedFileWithDecodingDeletedData {
  static final Logger LOG=LoggerFactory.getLogger(TestReadStripedFileWithDecodingDeletedData.class);
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem dfs;
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @BeforeClass public static void setup() throws IOException {
    cluster=initializeCluster();
    dfs=cluster.getFileSystem();
  }
  @AfterClass public static void tearDown() throws IOException {
    tearDownCluster(cluster);
  }
  @Parameterized.Parameters public static Collection<Object[]> getParameters(){
    return ReadStripedFileWithDecodingHelper.getParameters();
  }
  private int fileLength;
  private int dataDelNum;
  private int parityDelNum;
  public TestReadStripedFileWithDecodingDeletedData(  int fileLength,  int dataDelNum,  int parityDelNum){
    this.fileLength=fileLength;
    this.dataDelNum=dataDelNum;
    this.parityDelNum=parityDelNum;
  }
  /** 
 * Delete tolerable number of block before reading. Verify the decoding works correctly.
 */
  @Test public void testReadCorruptedDataByDeleting() throws IOException {
    String src="/deleted_" + dataDelNum + "_"+ parityDelNum;
    ReadStripedFileWithDecodingHelper.testReadWithBlockCorrupted(cluster,dfs,src,fileLength,dataDelNum,parityDelNum,true);
  }
}
