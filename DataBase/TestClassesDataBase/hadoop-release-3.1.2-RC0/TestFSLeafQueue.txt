public class TestFSLeafQueue extends FairSchedulerTestBase {
  private final static String ALLOC_FILE=new File(TEST_DIR,TestFSLeafQueue.class.getName() + ".xml").getAbsolutePath();
  private Resource maxResource=Resources.createResource(1024 * 8);
  @Before public void setup() throws IOException {
    conf=createConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,FairScheduler.class,ResourceScheduler.class);
  }
  @After public void teardown(){
    if (resourceManager != null) {
      resourceManager.stop();
      resourceManager=null;
    }
    conf=null;
  }
  @Test public void testUpdateDemand(){
    conf.set(FairSchedulerConfiguration.ASSIGN_MULTIPLE,"false");
    resourceManager=new MockRM(conf);
    resourceManager.start();
    scheduler=(FairScheduler)resourceManager.getResourceScheduler();
    String queueName="root.queue1";
    FSLeafQueue schedulable=new FSLeafQueue(queueName,scheduler,null);
    schedulable.setMaxShare(new ConfigurableResource(maxResource));
    assertEquals(schedulable.getMetrics().getMaxApps(),Integer.MAX_VALUE);
    assertEquals(schedulable.getMetrics().getSchedulingPolicy(),SchedulingPolicy.DEFAULT_POLICY.getName());
    FSAppAttempt app=mock(FSAppAttempt.class);
    Mockito.when(app.getDemand()).thenReturn(maxResource);
    Mockito.when(app.getResourceUsage()).thenReturn(Resources.none());
    schedulable.addApp(app,true);
    schedulable.addApp(app,true);
    schedulable.updateDemand();
    assertTrue("Demand is greater than max allowed ",Resources.equals(schedulable.getDemand(),maxResource));
  }
  @Test(timeout=5000) public void test() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\"></queue>");
    out.println("<queue name=\"queueB\"></queue>");
    out.println("</allocations>");
    out.close();
    resourceManager=new MockRM(conf);
    resourceManager.start();
    scheduler=(FairScheduler)resourceManager.getResourceScheduler();
    for (    FSQueue queue : scheduler.getQueueManager().getQueues()) {
      assertEquals(queue.getMetrics().getMaxApps(),Integer.MAX_VALUE);
      assertEquals(queue.getMetrics().getSchedulingPolicy(),SchedulingPolicy.DEFAULT_POLICY.getName());
    }
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4 * 1024,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    scheduler.update();
    createSchedulingRequest(3 * 1024,"queueA","user1");
    scheduler.update();
    NodeUpdateSchedulerEvent nodeEvent2=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeEvent2);
    createSchedulingRequest(1 * 1024,"queueB","user1");
    scheduler.update();
    Collection<FSLeafQueue> queues=scheduler.getQueueManager().getLeafQueues();
    assertEquals(3,queues.size());
  }
  @Test public void testConcurrentAccess(){
    conf.set(FairSchedulerConfiguration.ASSIGN_MULTIPLE,"false");
    resourceManager=new MockRM(conf);
    resourceManager.start();
    scheduler=(FairScheduler)resourceManager.getResourceScheduler();
    String queueName="root.queue1";
    final FSLeafQueue schedulable=scheduler.getQueueManager().getLeafQueue(queueName,true);
    ApplicationAttemptId applicationAttemptId=createAppAttemptId(1,1);
    RMContext rmContext=resourceManager.getRMContext();
    final FSAppAttempt app=new FSAppAttempt(scheduler,applicationAttemptId,"user1",schedulable,null,rmContext);
    int testThreads=2;
    List<Runnable> runnables=new ArrayList<Runnable>();
    runnables.add(new Runnable(){
      @Override public void run(){
        for (int i=0; i < 500; i++) {
          schedulable.addApp(app,true);
        }
      }
    }
);
    runnables.add(new Runnable(){
      @Override public void run(){
        for (int i=0; i < 500; i++) {
          schedulable.getResourceUsage();
        }
      }
    }
);
    final List<Throwable> exceptions=Collections.synchronizedList(new ArrayList<Throwable>());
    final ExecutorService threadPool=HadoopExecutors.newFixedThreadPool(testThreads);
    try {
      final CountDownLatch allExecutorThreadsReady=new CountDownLatch(testThreads);
      final CountDownLatch startBlocker=new CountDownLatch(1);
      final CountDownLatch allDone=new CountDownLatch(testThreads);
      for (      final Runnable submittedTestRunnable : runnables) {
        threadPool.submit(new Runnable(){
          public void run(){
            allExecutorThreadsReady.countDown();
            try {
              startBlocker.await();
              submittedTestRunnable.run();
            }
 catch (            final Throwable e) {
              exceptions.add(e);
            }
 finally {
              allDone.countDown();
            }
          }
        }
);
      }
      allExecutorThreadsReady.await();
      startBlocker.countDown();
      int testTimeout=2;
      assertTrue("Timeout waiting for more than " + testTimeout + " seconds",allDone.await(testTimeout,TimeUnit.SECONDS));
    }
 catch (    InterruptedException ie) {
      exceptions.add(ie);
    }
 finally {
      threadPool.shutdownNow();
    }
    assertTrue("Test failed with exception(s)" + exceptions,exceptions.isEmpty());
  }
}
