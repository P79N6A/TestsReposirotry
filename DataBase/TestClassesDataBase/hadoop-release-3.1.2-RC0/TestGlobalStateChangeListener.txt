/** 
 * Test global state changes. It is critical for all tests to clean up the global listener afterwards to avoid interfering with follow-on tests. One listener,  {@link #listener} is defined which is automaticallyunregistered on cleanup. All other listeners must be unregistered in the finally clauses of the tests.
 */
public class TestGlobalStateChangeListener extends ServiceAssert {
  BreakableStateChangeListener listener=new BreakableStateChangeListener("listener");
  private void register(){
    register(listener);
  }
  private boolean unregister(){
    return unregister(listener);
  }
  private void register(  ServiceStateChangeListener l){
    AbstractService.registerGlobalListener(l);
  }
  private boolean unregister(  ServiceStateChangeListener l){
    return AbstractService.unregisterGlobalListener(l);
  }
  /** 
 * After every test case reset the list of global listeners.
 */
  @After public void cleanup(){
    AbstractService.resetGlobalListeners();
  }
  /** 
 * Assert that the last state of the listener is that the test expected.
 * @param breakable a breakable listener
 * @param state the expected state
 */
  public void assertListenerState(  BreakableStateChangeListener breakable,  Service.STATE state){
    assertEquals("Wrong state in " + breakable,state,breakable.getLastState());
  }
  /** 
 * Assert that the number of state change notifications matches expectations.
 * @param breakable the listener
 * @param count the expected count.
 */
  public void assertListenerEventCount(  BreakableStateChangeListener breakable,  int count){
    assertEquals("Wrong event count in " + breakable,count,breakable.getEventCount());
  }
  /** 
 * Test that register/unregister works
 */
  @Test public void testRegisterListener(){
    register();
    assertTrue("listener not registered",unregister());
  }
  /** 
 * Test that double registration results in one registration only.
 */
  @Test public void testRegisterListenerTwice(){
    register();
    register();
    assertTrue("listener not registered",unregister());
    assertFalse("listener double registered",unregister());
  }
  /** 
 * Test that the  {@link BreakableStateChangeListener} is picking upthe state changes and that its last event field is as expected.
 */
  @Test public void testEventHistory(){
    register();
    BreakableService service=new BreakableService();
    assertListenerState(listener,Service.STATE.NOTINITED);
    assertEquals(0,listener.getEventCount());
    service.init(new Configuration());
    assertListenerState(listener,Service.STATE.INITED);
    assertSame(service,listener.getLastService());
    assertListenerEventCount(listener,1);
    service.start();
    assertListenerState(listener,Service.STATE.STARTED);
    assertListenerEventCount(listener,2);
    service.stop();
    assertListenerState(listener,Service.STATE.STOPPED);
    assertListenerEventCount(listener,3);
  }
  /** 
 * This test triggers a failure in the listener - the expectation is that the service has already reached it's desired state, purely because the notifications take place afterwards.
 */
  @Test public void testListenerFailure(){
    listener.setFailingState(Service.STATE.INITED);
    register();
    BreakableStateChangeListener l2=new BreakableStateChangeListener();
    register(l2);
    BreakableService service=new BreakableService();
    service.init(new Configuration());
    assertListenerState(listener,Service.STATE.INITED);
    assertListenerEventCount(listener,1);
    assertListenerEventCount(l2,0);
    assertServiceStateInited(service);
    service.start();
    service.stop();
  }
  /** 
 * Create a chain of listeners and set one in the middle to fail; verify that those in front got called, and those after did not.
 */
  @Test public void testListenerChain(){
    LoggingStateChangeListener logListener=new LoggingStateChangeListener();
    register(logListener);
    BreakableStateChangeListener l0=new BreakableStateChangeListener("l0");
    register(l0);
    listener.setFailingState(Service.STATE.STARTED);
    register();
    BreakableStateChangeListener l3=new BreakableStateChangeListener("l3");
    register(l3);
    BreakableService service=new BreakableService();
    service.init(new Configuration());
    assertServiceStateInited(service);
    assertListenerState(l0,Service.STATE.INITED);
    assertListenerState(listener,Service.STATE.INITED);
    assertListenerState(l3,Service.STATE.INITED);
    service.start();
    assertServiceStateStarted(service);
    assertListenerState(l0,Service.STATE.STARTED);
    assertListenerEventCount(l0,2);
    assertListenerState(listener,Service.STATE.STARTED);
    assertListenerEventCount(listener,2);
    assertListenerState(l3,Service.STATE.INITED);
    assertListenerEventCount(l3,1);
    service.stop();
    assertListenerEventCount(l0,3);
    assertListenerEventCount(listener,3);
    assertListenerEventCount(l3,2);
    unregister(logListener);
    unregister(l0);
    unregister(l3);
    service=new BreakableService();
    service.init(new Configuration());
    assertListenerEventCount(l0,3);
    assertListenerEventCount(l3,2);
    assertListenerEventCount(listener,4);
  }
}
