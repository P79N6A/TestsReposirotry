/** 
 * Test if we can correctly delay the deletion of blocks.
 */
public class TestPendingInvalidateBlock {
{
    GenericTestUtils.setLogLevel(BlockManager.LOG,Level.DEBUG);
  }
  private static final int BLOCKSIZE=1024;
  private static final short REPLICATION=2;
  private Configuration conf;
  private MiniDFSCluster cluster;
  private DistributedFileSystem dfs;
  @Before public void setUp() throws Exception {
    conf=new Configuration();
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCKSIZE);
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_STARTUP_DELAY_BLOCK_DELETION_SEC_KEY,5L);
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,2000);
    conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY,1);
    conf.setLong(CommonConfigurationKeys.IPC_PING_INTERVAL_KEY,0);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build();
    cluster.waitActive();
    dfs=cluster.getFileSystem();
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testPendingDeletion() throws Exception {
    final Path foo=new Path("/foo");
    DFSTestUtil.createFile(dfs,foo,BLOCKSIZE,REPLICATION,0);
    DFSTestUtil.waitForReplication(dfs,foo,REPLICATION,10000);
    cluster.restartNameNode(true);
    InvalidateBlocks invalidateBlocks=(InvalidateBlocks)Whitebox.getInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks");
    InvalidateBlocks mockIb=Mockito.spy(invalidateBlocks);
    Mockito.doReturn(1L).when(mockIb).getInvalidationDelay();
    Whitebox.setInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks",mockIb);
    dfs.delete(foo,true);
    waitForNumPendingDeletionBlocks(REPLICATION);
    Assert.assertEquals(0,cluster.getNamesystem().getBlocksTotal());
    Assert.assertEquals(REPLICATION,cluster.getNamesystem().getPendingDeletionBlocks());
    Assert.assertEquals(REPLICATION,dfs.getPendingDeletionBlocksCount());
    Mockito.doReturn(0L).when(mockIb).getInvalidationDelay();
    waitForNumPendingDeletionBlocks(0);
    Assert.assertEquals(0,cluster.getNamesystem().getBlocksTotal());
    Assert.assertEquals(0,cluster.getNamesystem().getPendingDeletionBlocks());
    Assert.assertEquals(0,dfs.getPendingDeletionBlocksCount());
    long nnStarted=cluster.getNamesystem().getNNStartedTimeInMillis();
    long blockDeletionStartTime=cluster.getNamesystem().getBlockDeletionStartTime();
    Assert.assertTrue(String.format("Expect blockDeletionStartTime = %d > nnStarted = %d.",blockDeletionStartTime,nnStarted),blockDeletionStartTime > nnStarted);
    Method method=DFSClient.class.getDeclaredMethod("getStateByIndex",int.class);
    method.setAccessible(true);
    long validState=(Long)method.invoke(dfs.getClient(),ClientProtocol.GET_STATS_PENDING_DELETION_BLOCKS_IDX);
    long invalidState=(Long)method.invoke(dfs.getClient(),ClientProtocol.STATS_ARRAY_LENGTH);
    Assert.assertEquals(0,validState);
    Assert.assertEquals(-1,invalidState);
  }
  /** 
 * Test whether we can delay the deletion of unknown blocks in DataNode's first several block reports.
 */
  @Test public void testPendingDeleteUnknownBlocks() throws Exception {
    final int fileNum=5;
    final Path[] files=new Path[fileNum];
    final DataNodeProperties[] dnprops=new DataNodeProperties[REPLICATION];
    for (int i=0; i < fileNum; i++) {
      files[i]=new Path("/file" + i);
      DFSTestUtil.createFile(dfs,files[i],BLOCKSIZE,REPLICATION,i);
    }
    waitForReplication();
    for (int i=REPLICATION - 1; i >= 0; i--) {
      dnprops[i]=cluster.stopDataNode(i);
    }
    Thread.sleep(2000);
    for (int i=0; i < 2; i++) {
      dfs.delete(files[i],true);
    }
    cluster.restartNameNode(false);
    InvalidateBlocks invalidateBlocks=(InvalidateBlocks)Whitebox.getInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks");
    InvalidateBlocks mockIb=Mockito.spy(invalidateBlocks);
    Mockito.doReturn(1L).when(mockIb).getInvalidationDelay();
    Whitebox.setInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks",mockIb);
    Assert.assertEquals(0L,cluster.getNamesystem().getPendingDeletionBlocks());
    for (int i=0; i < REPLICATION; i++) {
      cluster.restartDataNode(dnprops[i]);
    }
    cluster.waitActive();
    for (int i=0; i < REPLICATION; i++) {
      DataNodeTestUtils.triggerBlockReport(cluster.getDataNodes().get(i));
    }
    Thread.sleep(2000);
    Assert.assertEquals(3,cluster.getNamesystem().getBlocksTotal());
    Assert.assertEquals(4,cluster.getNamesystem().getPendingDeletionBlocks());
    cluster.restartNameNode(true);
    waitForNumPendingDeletionBlocks(0);
    Assert.assertEquals(3,cluster.getNamesystem().getBlocksTotal());
    Assert.assertEquals(0,cluster.getNamesystem().getPendingDeletionBlocks());
  }
  private long waitForReplication() throws Exception {
    for (int i=0; i < 10; i++) {
      long ur=cluster.getNamesystem().getUnderReplicatedBlocks();
      if (ur == 0) {
        return 0;
      }
 else {
        Thread.sleep(1000);
      }
    }
    return cluster.getNamesystem().getUnderReplicatedBlocks();
  }
  private void waitForNumPendingDeletionBlocks(  final int numBlocks) throws Exception {
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        try {
          cluster.triggerBlockReports();
          if (cluster.getNamesystem().getPendingDeletionBlocks() == numBlocks) {
            return true;
          }
        }
 catch (        Exception e) {
        }
        return false;
      }
    }
,6000,60000);
  }
}
