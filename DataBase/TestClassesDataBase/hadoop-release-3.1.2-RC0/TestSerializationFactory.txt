public class TestSerializationFactory {
static {
    GenericTestUtils.setLogLevel(SerializationFactory.LOG,Level.TRACE);
  }
  static Configuration conf;
  static SerializationFactory factory;
  @BeforeClass public static void setup() throws Exception {
    conf=new Configuration();
    factory=new SerializationFactory(conf);
  }
  @Test public void testSerializationKeyIsEmpty(){
    Configuration conf=new Configuration();
    conf.set(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY,"");
    SerializationFactory factory=new SerializationFactory(conf);
  }
  /** 
 * Test the case when  {@code IO_SERIALIZATIONS_KEY}is not set at all, because something unset this key. This shouldn't result in any error, the defaults present in construction should be used in this case.
 */
  @Test public void testSerializationKeyIsUnset(){
    Configuration conf=new Configuration();
    conf.unset(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY);
    SerializationFactory factory=new SerializationFactory(conf);
  }
  @Test public void testSerializationKeyIsInvalid(){
    Configuration conf=new Configuration();
    conf.set(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY,"INVALID_KEY_XXX");
    SerializationFactory factory=new SerializationFactory(conf);
  }
  @Test public void testGetSerializer(){
    assertNotNull("A valid class must be returned for default Writable SerDe",factory.getSerializer(Writable.class));
    assertNull("A null should be returned if there are no serializers found.",factory.getSerializer(TestSerializationFactory.class));
  }
  @Test public void testGetDeserializer(){
    assertNotNull("A valid class must be returned for default Writable SerDe",factory.getDeserializer(Writable.class));
    assertNull("A null should be returned if there are no deserializers found",factory.getDeserializer(TestSerializationFactory.class));
  }
  @Test public void testSerializationKeyIsTrimmed(){
    Configuration conf=new Configuration();
    conf.set(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY," org.apache.hadoop.io.serializer.WritableSerialization ");
    SerializationFactory factory=new SerializationFactory(conf);
    assertNotNull("Valid class must be returned",factory.getSerializer(LongWritable.class));
  }
}
