private static class TestRecordingCacheTracker extends CacheManipulator {
  private final Map<String,Stats> map=new TreeMap<>();
  @Override public void posixFadviseIfPossible(  String name,  FileDescriptor fd,  long offset,  long len,  int flags) throws NativeIOException {
    if ((len < 0) || (len > Integer.MAX_VALUE)) {
      throw new RuntimeException("invalid length of " + len + " passed to posixFadviseIfPossible");
    }
    if ((offset < 0) || (offset > Integer.MAX_VALUE)) {
      throw new RuntimeException("invalid offset of " + offset + " passed to posixFadviseIfPossible");
    }
    Stats stats=map.get(name);
    if (stats == null) {
      stats=new Stats(name);
      map.put(name,stats);
    }
    stats.fadvise((int)offset,(int)len,flags);
    super.posixFadviseIfPossible(name,fd,offset,len,flags);
  }
  synchronized void clear(){
    map.clear();
  }
  synchronized Stats getStats(  String fileName){
    return map.get(fileName);
  }
  synchronized public String toString(){
    StringBuilder bld=new StringBuilder();
    bld.append("TestRecordingCacheManipulator{");
    String prefix="";
    for (    String fileName : map.keySet()) {
      bld.append(prefix);
      prefix=", ";
      bld.append(fileName);
    }
    bld.append("}");
    return bld.toString();
  }
}
