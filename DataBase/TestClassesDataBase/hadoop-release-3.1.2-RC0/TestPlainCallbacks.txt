static class TestPlainCallbacks {
public static class Client implements CallbackHandler {
    String user=null;
    String password=null;
    Client(    String user,    String password){
      this.user=user;
      this.password=password;
    }
    @Override public void handle(    Callback[] callbacks) throws UnsupportedCallbackException {
      for (      Callback callback : callbacks) {
        if (callback instanceof NameCallback) {
          ((NameCallback)callback).setName(user);
        }
 else         if (callback instanceof PasswordCallback) {
          ((PasswordCallback)callback).setPassword(password.toCharArray());
        }
 else {
          throw new UnsupportedCallbackException(callback,"Unrecognized SASL PLAIN Callback");
        }
      }
    }
  }
public static class Server implements CallbackHandler {
    String user=null;
    String password=null;
    Server(    String user,    String password){
      this.user=user;
      this.password=password;
    }
    @Override public void handle(    Callback[] callbacks) throws UnsupportedCallbackException, SaslException {
      NameCallback nc=null;
      PasswordCallback pc=null;
      AuthorizeCallback ac=null;
      for (      Callback callback : callbacks) {
        if (callback instanceof NameCallback) {
          nc=(NameCallback)callback;
          assertEquals(user,nc.getName());
        }
 else         if (callback instanceof PasswordCallback) {
          pc=(PasswordCallback)callback;
          if (!password.equals(new String(pc.getPassword()))) {
            throw new IllegalArgumentException("wrong password");
          }
        }
 else         if (callback instanceof AuthorizeCallback) {
          ac=(AuthorizeCallback)callback;
          assertEquals(user,ac.getAuthorizationID());
          assertEquals(user,ac.getAuthenticationID());
          ac.setAuthorized(true);
          ac.setAuthorizedID(ac.getAuthenticationID());
        }
 else {
          throw new UnsupportedCallbackException(callback,"Unsupported SASL PLAIN Callback");
        }
      }
      assertNotNull(nc);
      assertNotNull(pc);
      assertNotNull(ac);
    }
  }
}
