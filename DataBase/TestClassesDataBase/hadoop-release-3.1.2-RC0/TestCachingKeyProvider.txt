public class TestCachingKeyProvider {
  @Test public void testCurrentKey() throws Exception {
    KeyProvider.KeyVersion mockKey=Mockito.mock(KeyProvider.KeyVersion.class);
    KeyProvider mockProv=Mockito.mock(KeyProvider.class);
    Mockito.when(mockProv.getCurrentKey(Mockito.eq("k1"))).thenReturn(mockKey);
    Mockito.when(mockProv.getCurrentKey(Mockito.eq("k2"))).thenReturn(null);
    Mockito.when(mockProv.getConf()).thenReturn(new Configuration());
    KeyProvider cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getCurrentKey(Mockito.eq("k1"));
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getCurrentKey(Mockito.eq("k1"));
    Thread.sleep(1200);
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(2)).getCurrentKey(Mockito.eq("k1"));
    cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(null,cache.getCurrentKey("k2"));
    Mockito.verify(mockProv,Mockito.times(1)).getCurrentKey(Mockito.eq("k2"));
    Assert.assertEquals(null,cache.getCurrentKey("k2"));
    Mockito.verify(mockProv,Mockito.times(2)).getCurrentKey(Mockito.eq("k2"));
  }
  @Test public void testKeyVersion() throws Exception {
    KeyProvider.KeyVersion mockKey=Mockito.mock(KeyProvider.KeyVersion.class);
    KeyProvider mockProv=Mockito.mock(KeyProvider.class);
    Mockito.when(mockProv.getKeyVersion(Mockito.eq("k1@0"))).thenReturn(mockKey);
    Mockito.when(mockProv.getKeyVersion(Mockito.eq("k2@0"))).thenReturn(null);
    Mockito.when(mockProv.getConf()).thenReturn(new Configuration());
    KeyProvider cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(mockKey,cache.getKeyVersion("k1@0"));
    Mockito.verify(mockProv,Mockito.times(1)).getKeyVersion(Mockito.eq("k1@0"));
    Assert.assertEquals(mockKey,cache.getKeyVersion("k1@0"));
    Mockito.verify(mockProv,Mockito.times(1)).getKeyVersion(Mockito.eq("k1@0"));
    Thread.sleep(200);
    Assert.assertEquals(mockKey,cache.getKeyVersion("k1@0"));
    Mockito.verify(mockProv,Mockito.times(2)).getKeyVersion(Mockito.eq("k1@0"));
    cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(null,cache.getKeyVersion("k2@0"));
    Mockito.verify(mockProv,Mockito.times(1)).getKeyVersion(Mockito.eq("k2@0"));
    Assert.assertEquals(null,cache.getKeyVersion("k2@0"));
    Mockito.verify(mockProv,Mockito.times(2)).getKeyVersion(Mockito.eq("k2@0"));
  }
  @Test public void testMetadata() throws Exception {
    KeyProvider.Metadata mockMeta=Mockito.mock(KeyProvider.Metadata.class);
    KeyProvider mockProv=Mockito.mock(KeyProvider.class);
    Mockito.when(mockProv.getMetadata(Mockito.eq("k1"))).thenReturn(mockMeta);
    Mockito.when(mockProv.getMetadata(Mockito.eq("k2"))).thenReturn(null);
    Mockito.when(mockProv.getConf()).thenReturn(new Configuration());
    KeyProvider cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(mockMeta,cache.getMetadata("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getMetadata(Mockito.eq("k1"));
    Assert.assertEquals(mockMeta,cache.getMetadata("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getMetadata(Mockito.eq("k1"));
    Thread.sleep(200);
    Assert.assertEquals(mockMeta,cache.getMetadata("k1"));
    Mockito.verify(mockProv,Mockito.times(2)).getMetadata(Mockito.eq("k1"));
    cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(null,cache.getMetadata("k2"));
    Mockito.verify(mockProv,Mockito.times(1)).getMetadata(Mockito.eq("k2"));
    Assert.assertEquals(null,cache.getMetadata("k2"));
    Mockito.verify(mockProv,Mockito.times(2)).getMetadata(Mockito.eq("k2"));
  }
  @Test public void testRollNewVersion() throws Exception {
    KeyProvider.KeyVersion mockKey=Mockito.mock(KeyProvider.KeyVersion.class);
    KeyProvider mockProv=Mockito.mock(KeyProvider.class);
    Mockito.when(mockProv.getCurrentKey(Mockito.eq("k1"))).thenReturn(mockKey);
    Mockito.when(mockProv.getConf()).thenReturn(new Configuration());
    KeyProvider cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getCurrentKey(Mockito.eq("k1"));
    cache.rollNewVersion("k1");
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(2)).getCurrentKey(Mockito.eq("k1"));
    cache.rollNewVersion("k1",new byte[0]);
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(3)).getCurrentKey(Mockito.eq("k1"));
  }
  @Test public void testDeleteKey() throws Exception {
    KeyProvider.KeyVersion mockKey=Mockito.mock(KeyProvider.KeyVersion.class);
    KeyProvider mockProv=Mockito.mock(KeyProvider.class);
    Mockito.when(mockProv.getCurrentKey(Mockito.eq("k1"))).thenReturn(mockKey);
    Mockito.when(mockProv.getKeyVersion(Mockito.eq("k1@0"))).thenReturn(mockKey);
    Mockito.when(mockProv.getMetadata(Mockito.eq("k1"))).thenReturn(new KMSClientProvider.KMSMetadata("c",0,"l",null,new Date(),1));
    Mockito.when(mockProv.getConf()).thenReturn(new Configuration());
    KeyProvider cache=new CachingKeyProvider(mockProv,100,100);
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(1)).getCurrentKey(Mockito.eq("k1"));
    Assert.assertEquals(mockKey,cache.getKeyVersion("k1@0"));
    Mockito.verify(mockProv,Mockito.times(1)).getKeyVersion(Mockito.eq("k1@0"));
    cache.deleteKey("k1");
    Assert.assertEquals(mockKey,cache.getCurrentKey("k1"));
    Mockito.verify(mockProv,Mockito.times(2)).getCurrentKey(Mockito.eq("k1"));
    Assert.assertEquals(mockKey,cache.getKeyVersion("k1@0"));
    Mockito.verify(mockProv,Mockito.times(2)).getKeyVersion(Mockito.eq("k1@0"));
  }
}
