/** 
 * Tests for ComponentRestartPolicy implementations.
 */
public class TestComponentRestartPolicy {
  @Test public void testAlwaysRestartPolicy() throws Exception {
    AlwaysRestartPolicy alwaysRestartPolicy=AlwaysRestartPolicy.getInstance();
    Component component=mock(Component.class);
    when(component.getNumReadyInstances()).thenReturn(1);
    when(component.getNumDesiredInstances()).thenReturn(2);
    ComponentInstance instance=mock(ComponentInstance.class);
    when(instance.getComponent()).thenReturn(component);
    ContainerStatus containerStatus=mock(ContainerStatus.class);
    assertEquals(true,alwaysRestartPolicy.isLongLived());
    assertEquals(true,alwaysRestartPolicy.allowUpgrades());
    assertEquals(false,alwaysRestartPolicy.hasCompleted(component));
    assertEquals(false,alwaysRestartPolicy.hasCompletedSuccessfully(component));
    assertEquals(true,alwaysRestartPolicy.shouldRelaunchInstance(instance,containerStatus));
    assertEquals(false,alwaysRestartPolicy.isReadyForDownStream(component));
  }
  @Test public void testNeverRestartPolicy() throws Exception {
    NeverRestartPolicy restartPolicy=NeverRestartPolicy.getInstance();
    Component component=mock(Component.class);
    when(component.getNumSucceededInstances()).thenReturn(new Long(1));
    when(component.getNumFailedInstances()).thenReturn(new Long(2));
    when(component.getNumDesiredInstances()).thenReturn(3);
    ComponentInstance instance=mock(ComponentInstance.class);
    when(instance.getComponent()).thenReturn(component);
    ContainerStatus containerStatus=mock(ContainerStatus.class);
    assertEquals(false,restartPolicy.isLongLived());
    assertEquals(false,restartPolicy.allowUpgrades());
    assertEquals(true,restartPolicy.hasCompleted(component));
    assertEquals(false,restartPolicy.hasCompletedSuccessfully(component));
    assertEquals(false,restartPolicy.shouldRelaunchInstance(instance,containerStatus));
    assertEquals(true,restartPolicy.isReadyForDownStream(component));
  }
  @Test public void testOnFailureRestartPolicy() throws Exception {
    OnFailureRestartPolicy restartPolicy=OnFailureRestartPolicy.getInstance();
    Component component=mock(Component.class);
    when(component.getNumSucceededInstances()).thenReturn(new Long(3));
    when(component.getNumFailedInstances()).thenReturn(new Long(0));
    when(component.getNumDesiredInstances()).thenReturn(3);
    ComponentInstance instance=mock(ComponentInstance.class);
    when(instance.getComponent()).thenReturn(component);
    ContainerStatus containerStatus=mock(ContainerStatus.class);
    when(containerStatus.getExitStatus()).thenReturn(0);
    assertEquals(false,restartPolicy.isLongLived());
    assertEquals(false,restartPolicy.allowUpgrades());
    assertEquals(true,restartPolicy.hasCompleted(component));
    assertEquals(true,restartPolicy.hasCompletedSuccessfully(component));
    assertEquals(false,restartPolicy.shouldRelaunchInstance(instance,containerStatus));
    assertEquals(true,restartPolicy.isReadyForDownStream(component));
    when(component.getNumSucceededInstances()).thenReturn(new Long(2));
    when(component.getNumFailedInstances()).thenReturn(new Long(1));
    when(component.getNumDesiredInstances()).thenReturn(3);
    assertEquals(false,restartPolicy.hasCompleted(component));
    assertEquals(false,restartPolicy.hasCompletedSuccessfully(component));
    when(containerStatus.getExitStatus()).thenReturn(-1000);
    assertEquals(true,restartPolicy.shouldRelaunchInstance(instance,containerStatus));
    assertEquals(false,restartPolicy.isReadyForDownStream(component));
  }
}
