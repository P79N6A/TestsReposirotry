public class TestProtoBufRPCCompatibility {
  private static final String ADDRESS="0.0.0.0";
  public final static int PORT=0;
  private static InetSocketAddress addr;
  private static RPC.Server server;
  private static Configuration conf;
@ProtocolInfo(protocolName="testProto",protocolVersion=1) public interface OldRpcService extends OldProtobufRpcProto.BlockingInterface {
  }
@ProtocolInfo(protocolName="testProto",protocolVersion=2) public interface NewRpcService extends NewProtobufRpcProto.BlockingInterface {
  }
@ProtocolInfo(protocolName="testProto",protocolVersion=2) public interface NewerRpcService extends NewerProtobufRpcProto.BlockingInterface {
  }
public static class OldServerImpl implements OldRpcService {
    @Override public EmptyResponseProto ping(    RpcController unused,    EmptyRequestProto request) throws ServiceException {
      byte[] clientId=Server.getClientId();
      Assert.assertNotNull(Server.getClientId());
      Assert.assertEquals(16,clientId.length);
      return EmptyResponseProto.newBuilder().build();
    }
    @Override public EmptyResponseProto echo(    RpcController unused,    EmptyRequestProto request) throws ServiceException {
      byte[] clientId=Server.getClientId();
      Assert.assertNotNull(Server.getClientId());
      Assert.assertEquals(16,clientId.length);
      return EmptyResponseProto.newBuilder().build();
    }
  }
public static class NewServerImpl implements NewRpcService {
    @Override public EmptyResponseProto ping(    RpcController unused,    EmptyRequestProto request) throws ServiceException {
      byte[] clientId=Server.getClientId();
      Assert.assertNotNull(Server.getClientId());
      Assert.assertEquals(16,clientId.length);
      return EmptyResponseProto.newBuilder().build();
    }
    @Override public OptResponseProto echo(    RpcController unused,    OptRequestProto request) throws ServiceException {
      return OptResponseProto.newBuilder().setMessage(request.getMessage()).build();
    }
  }
@ProtocolInfo(protocolName="testProto",protocolVersion=2) public static class NewerServerImpl implements NewerRpcService {
    @Override public EmptyResponseProto ping(    RpcController unused,    EmptyRequestProto request) throws ServiceException {
      byte[] clientId=Server.getClientId();
      Assert.assertNotNull(Server.getClientId());
      Assert.assertEquals(16,clientId.length);
      return EmptyResponseProto.newBuilder().build();
    }
    @Override public EmptyResponseProto echo(    RpcController unused,    EmptyRequestProto request) throws ServiceException {
      byte[] clientId=Server.getClientId();
      Assert.assertNotNull(Server.getClientId());
      Assert.assertEquals(16,clientId.length);
      return EmptyResponseProto.newBuilder().build();
    }
  }
  @Test public void testProtocolVersionMismatch() throws IOException, ServiceException {
    conf=new Configuration();
    conf.setInt(CommonConfigurationKeys.IPC_MAXIMUM_DATA_LENGTH,1024);
    RPC.setProtocolEngine(conf,NewRpcService.class,ProtobufRpcEngine.class);
    NewServerImpl serverImpl=new NewServerImpl();
    BlockingService service=NewProtobufRpcProto.newReflectiveBlockingService(serverImpl);
    server=new RPC.Builder(conf).setProtocol(NewRpcService.class).setInstance(service).setBindAddress(ADDRESS).setPort(PORT).build();
    addr=NetUtils.getConnectAddress(server);
    server.start();
    RPC.setProtocolEngine(conf,OldRpcService.class,ProtobufRpcEngine.class);
    OldRpcService proxy=RPC.getProxy(OldRpcService.class,0,addr,conf);
    EmptyRequestProto emptyRequest=EmptyRequestProto.newBuilder().build();
    try {
      proxy.ping(null,emptyRequest);
      fail("Expected an exception to occur as version mismatch.");
    }
 catch (    Exception e) {
      if (!(e.getMessage().contains("version mismatch"))) {
        throw new IOException(e);
      }
    }
    RPC.setProtocolEngine(conf,NewerRpcService.class,ProtobufRpcEngine.class);
    NewerRpcService newProxy=RPC.getProxy(NewerRpcService.class,0,addr,conf);
    newProxy.echo(null,emptyRequest);
  }
}
