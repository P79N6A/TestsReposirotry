/** 
 * A timer for measuring performance. 
 */
static class Ticker {
  final String name;
  final long startTime=System.nanoTime();
  private long previousTick=startTime;
  Ticker(  final String name,  String format,  Object... args){
    this.name=name;
    LOG.info(String.format("\n\n%s START: %s\n",name,String.format(format,args)));
  }
  void tick(  final long nBytes,  String format,  Object... args){
    final long now=System.nanoTime();
    if (now - previousTick > 10000000000L) {
      previousTick=now;
      final double mintues=(now - systemStartTime) / 60000000000.0;
      LOG.info(String.format("\n\n%s %.2f min) %s %s\n",name,mintues,String.format(format,args),toMpsString(nBytes,now)));
    }
  }
  void end(  final long nBytes){
    final long now=System.nanoTime();
    final double seconds=(now - startTime) / 1000000000.0;
    LOG.info(String.format("\n\n%s END: duration=%.2fs %s\n",name,seconds,toMpsString(nBytes,now)));
  }
  String toMpsString(  final long nBytes,  final long now){
    final double mb=nBytes / (double)(1 << 20);
    final double mps=mb * 1000000000.0 / (now - startTime);
    return String.format("[nBytes=%.2fMB, speed=%.2fMB/s]",mb,mps);
  }
}
