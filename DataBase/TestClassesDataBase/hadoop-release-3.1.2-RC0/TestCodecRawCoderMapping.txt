/** 
 * Test the codec to raw coder mapping.
 */
public class TestCodecRawCoderMapping {
  private static Configuration conf;
  private static final int numDataUnit=6;
  private static final int numParityUnit=3;
  @Before public void setup(){
    conf=new Configuration();
  }
  @Test public void testRSDefaultRawCoder(){
    ErasureCoderOptions coderOptions=new ErasureCoderOptions(numDataUnit,numParityUnit);
    RawErasureEncoder encoder=CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_CODEC_NAME,coderOptions);
    RawErasureDecoder decoder=CodecUtil.createRawDecoder(conf,ErasureCodeConstants.RS_CODEC_NAME,coderOptions);
    if (ErasureCodeNative.isNativeCodeLoaded()) {
      Assert.assertTrue(encoder instanceof NativeRSRawEncoder);
      Assert.assertTrue(decoder instanceof NativeRSRawDecoder);
    }
 else {
      Assert.assertTrue(encoder instanceof RSRawEncoder);
      Assert.assertTrue(decoder instanceof RSRawDecoder);
    }
    encoder=CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_LEGACY_CODEC_NAME,coderOptions);
    Assert.assertTrue(encoder instanceof RSLegacyRawEncoder);
    decoder=CodecUtil.createRawDecoder(conf,ErasureCodeConstants.RS_LEGACY_CODEC_NAME,coderOptions);
    Assert.assertTrue(decoder instanceof RSLegacyRawDecoder);
  }
  @Test public void testDedicatedRawCoderKey(){
    ErasureCoderOptions coderOptions=new ErasureCoderOptions(numDataUnit,numParityUnit);
    String dummyFactName="DummyNoneExistingFactory";
    conf.set(CodecUtil.IO_ERASURECODE_CODEC_RS_RAWCODERS_KEY,dummyFactName);
    try {
      CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_CODEC_NAME,coderOptions);
      Assert.fail();
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("Fail to create raw erasure encoder with given codec: rs",e);
    }
    conf.set(CodecUtil.IO_ERASURECODE_CODEC_RS_LEGACY_RAWCODERS_KEY,dummyFactName);
    try {
      CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_LEGACY_CODEC_NAME,coderOptions);
      Assert.fail();
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("Fail to create raw erasure encoder with given codec: rs",e);
    }
  }
  @Test public void testFallbackCoders(){
    ErasureCoderOptions coderOptions=new ErasureCoderOptions(numDataUnit,numParityUnit);
    conf.set(CodecUtil.IO_ERASURECODE_CODEC_RS_RAWCODERS_KEY,RSRawErasureCoderFactory.CODER_NAME + "," + NativeRSRawErasureCoderFactory.CODER_NAME);
    RawErasureEncoder encoder=CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_CODEC_NAME,coderOptions);
    Assert.assertTrue(encoder instanceof RSRawEncoder);
    RawErasureDecoder decoder=CodecUtil.createRawDecoder(conf,ErasureCodeConstants.RS_CODEC_NAME,coderOptions);
    Assert.assertTrue(decoder instanceof RSRawDecoder);
  }
  @Test public void testLegacyCodecFallback(){
    ErasureCoderOptions coderOptions=new ErasureCoderOptions(numDataUnit,numParityUnit);
    RawErasureEncoder encoder=CodecUtil.createRawEncoder(conf,ErasureCodeConstants.RS_LEGACY_CODEC_NAME,coderOptions);
    Assert.assertTrue(encoder instanceof RSLegacyRawEncoder);
    RawErasureDecoder decoder=CodecUtil.createRawDecoder(conf,ErasureCodeConstants.RS_LEGACY_CODEC_NAME,coderOptions);
    Assert.assertTrue(decoder instanceof RSLegacyRawDecoder);
  }
  @Test public void testIgnoreInvalidCodec(){
    ErasureCoderOptions coderOptions=new ErasureCoderOptions(numDataUnit,numParityUnit);
    conf.set(CodecUtil.IO_ERASURECODE_CODEC_XOR_RAWCODERS_KEY,"invalid-codec," + XORRawErasureCoderFactory.CODER_NAME);
    RawErasureEncoder encoder=CodecUtil.createRawEncoder(conf,ErasureCodeConstants.XOR_CODEC_NAME,coderOptions);
    Assert.assertTrue(encoder instanceof XORRawEncoder);
    RawErasureDecoder decoder=CodecUtil.createRawDecoder(conf,ErasureCodeConstants.XOR_CODEC_NAME,coderOptions);
    Assert.assertTrue(decoder instanceof XORRawDecoder);
  }
}
