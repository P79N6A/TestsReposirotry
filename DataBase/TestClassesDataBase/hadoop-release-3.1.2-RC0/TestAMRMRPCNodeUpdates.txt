public class TestAMRMRPCNodeUpdates {
  private MockRM rm;
  private ApplicationMasterService amService;
  @Before public void setUp(){
    this.rm=new MockRM(){
      @Override public void init(      Configuration conf){
        conf.set(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,"1.0");
        super.init(conf);
      }
    }
;
    rm.start();
    amService=rm.getApplicationMasterService();
  }
  @After public void tearDown(){
    if (rm != null) {
      this.rm.stop();
    }
  }
  private void syncNodeHeartbeat(  MockNM nm,  boolean health) throws Exception {
    nm.nodeHeartbeat(health);
    rm.drainEvents();
  }
  private void syncNodeLost(  MockNM nm) throws Exception {
    rm.sendNodeStarted(nm);
    rm.waitForState(nm.getNodeId(),NodeState.RUNNING);
    rm.sendNodeLost(nm);
    rm.drainEvents();
  }
  private void syncNodeGracefulDecommission(  MockNM nm,  int timeout) throws Exception {
    rm.sendNodeGracefulDecommission(nm,timeout);
    rm.waitForState(nm.getNodeId(),NodeState.DECOMMISSIONING);
    rm.drainEvents();
  }
  private AllocateResponse allocate(  final ApplicationAttemptId attemptId,  final AllocateRequest req) throws Exception {
    UserGroupInformation ugi=UserGroupInformation.createRemoteUser(attemptId.toString());
    Token<AMRMTokenIdentifier> token=rm.getRMContext().getRMApps().get(attemptId.getApplicationId()).getRMAppAttempt(attemptId).getAMRMToken();
    ugi.addTokenIdentifier(token.decodeIdentifier());
    return ugi.doAs(new PrivilegedExceptionAction<AllocateResponse>(){
      @Override public AllocateResponse run() throws Exception {
        return amService.allocate(req);
      }
    }
);
  }
  @Test public void testAMRMDecommissioningNodes() throws Exception {
    MockNM nm1=rm.registerNode("127.0.0.1:1234",10000);
    MockNM nm2=rm.registerNode("127.0.0.2:1234",10000);
    rm.drainEvents();
    RMApp app1=rm.submitApp(2000);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    Integer decommissioningTimeout=600;
    syncNodeGracefulDecommission(nm2,decommissioningTimeout);
    AllocateRequest allocateRequest1=AllocateRequest.newInstance(0,0F,null,null,null);
    AllocateResponse response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    List<NodeReport> updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    NodeReport nr=updatedNodes.iterator().next();
    Assert.assertEquals(decommissioningTimeout,nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_DECOMMISSIONING,nr.getNodeUpdateType());
  }
  @Test public void testAMRMUnusableNodes() throws Exception {
    MockNM nm1=rm.registerNode("127.0.0.1:1234",10000);
    MockNM nm2=rm.registerNode("127.0.0.2:1234",10000);
    MockNM nm3=rm.registerNode("127.0.0.3:1234",10000);
    MockNM nm4=rm.registerNode("127.0.0.4:1234",10000);
    rm.drainEvents();
    RMApp app1=rm.submitApp(2000);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    AllocateRequest allocateRequest1=AllocateRequest.newInstance(0,0F,null,null,null);
    AllocateResponse response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    List<NodeReport> updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(0,updatedNodes.size());
    syncNodeHeartbeat(nm4,false);
    allocateRequest1=AllocateRequest.newInstance(response1.getResponseId(),0F,null,null,null);
    response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    NodeReport nr=updatedNodes.iterator().next();
    Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
    Assert.assertEquals(NodeState.UNHEALTHY,nr.getNodeState());
    Assert.assertNull(nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_UNUSABLE,nr.getNodeUpdateType());
    response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    nr=updatedNodes.iterator().next();
    Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
    Assert.assertEquals(NodeState.UNHEALTHY,nr.getNodeState());
    Assert.assertNull(nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_UNUSABLE,nr.getNodeUpdateType());
    syncNodeLost(nm3);
    allocateRequest1=AllocateRequest.newInstance(response1.getResponseId(),0F,null,null,null);
    response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    nr=updatedNodes.iterator().next();
    Assert.assertEquals(nm3.getNodeId(),nr.getNodeId());
    Assert.assertEquals(NodeState.LOST,nr.getNodeState());
    Assert.assertNull(nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_UNUSABLE,nr.getNodeUpdateType());
    RMApp app2=rm.submitApp(2000);
    nm2.nodeHeartbeat(true);
    RMAppAttempt attempt2=app2.getCurrentAppAttempt();
    MockAM am2=rm.sendAMLaunched(attempt2.getAppAttemptId());
    am2.registerAppAttempt();
    AllocateRequest allocateRequest2=AllocateRequest.newInstance(0,0F,null,null,null);
    AllocateResponse response2=allocate(attempt2.getAppAttemptId(),allocateRequest2);
    updatedNodes=response2.getUpdatedNodes();
    Assert.assertEquals(0,updatedNodes.size());
    syncNodeHeartbeat(nm4,true);
    allocateRequest1=AllocateRequest.newInstance(response1.getResponseId(),0F,null,null,null);
    response1=allocate(attempt1.getAppAttemptId(),allocateRequest1);
    updatedNodes=response1.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    nr=updatedNodes.iterator().next();
    Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
    Assert.assertEquals(NodeState.RUNNING,nr.getNodeState());
    Assert.assertNull(nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_USABLE,nr.getNodeUpdateType());
    allocateRequest2=AllocateRequest.newInstance(response2.getResponseId(),0F,null,null,null);
    response2=allocate(attempt2.getAppAttemptId(),allocateRequest2);
    updatedNodes=response2.getUpdatedNodes();
    Assert.assertEquals(1,updatedNodes.size());
    nr=updatedNodes.iterator().next();
    Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
    Assert.assertEquals(NodeState.RUNNING,nr.getNodeState());
    Assert.assertNull(nr.getDecommissioningTimeout());
    Assert.assertEquals(NodeUpdateType.NODE_USABLE,nr.getNodeUpdateType());
    allocateRequest2=AllocateRequest.newInstance(response2.getResponseId(),0F,null,null,null);
    response2=allocate(attempt2.getAppAttemptId(),allocateRequest2);
    updatedNodes=response2.getUpdatedNodes();
    Assert.assertEquals(0,updatedNodes.size());
  }
}
