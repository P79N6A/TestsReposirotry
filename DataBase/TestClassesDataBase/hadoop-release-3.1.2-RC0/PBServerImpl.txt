public static class PBServerImpl implements TestRpcService {
  CountDownLatch fastPingCounter=new CountDownLatch(2);
  private List<Server.Call> postponedCalls=new ArrayList<>();
  @Override public TestProtos.EmptyResponseProto ping(  RpcController unused,  TestProtos.EmptyRequestProto request) throws ServiceException {
    byte[] clientId=Server.getClientId();
    Assert.assertNotNull(clientId);
    Assert.assertEquals(ClientId.BYTE_LENGTH,clientId.length);
    return TestProtos.EmptyResponseProto.newBuilder().build();
  }
  @Override public TestProtos.EchoResponseProto echo(  RpcController unused,  TestProtos.EchoRequestProto request) throws ServiceException {
    return TestProtos.EchoResponseProto.newBuilder().setMessage(request.getMessage()).build();
  }
  @Override public TestProtos.EmptyResponseProto error(  RpcController unused,  TestProtos.EmptyRequestProto request) throws ServiceException {
    throw new ServiceException("error",new RpcServerException("error"));
  }
  @Override public TestProtos.EmptyResponseProto error2(  RpcController unused,  TestProtos.EmptyRequestProto request) throws ServiceException {
    throw new ServiceException("error",new URISyntaxException("","testException"));
  }
  @Override public TestProtos.EmptyResponseProto slowPing(  RpcController unused,  TestProtos.SlowPingRequestProto request) throws ServiceException {
    boolean shouldSlow=request.getShouldSlow();
    if (shouldSlow) {
      try {
        fastPingCounter.await();
      }
 catch (      InterruptedException ignored) {
      }
    }
 else {
      fastPingCounter.countDown();
    }
    return TestProtos.EmptyResponseProto.newBuilder().build();
  }
  @Override public TestProtos.EchoResponseProto2 echo2(  RpcController controller,  TestProtos.EchoRequestProto2 request) throws ServiceException {
    return TestProtos.EchoResponseProto2.newBuilder().addAllMessage(request.getMessageList()).build();
  }
  @Override public TestProtos.AddResponseProto add(  RpcController controller,  TestProtos.AddRequestProto request) throws ServiceException {
    return TestProtos.AddResponseProto.newBuilder().setResult(request.getParam1() + request.getParam2()).build();
  }
  @Override public TestProtos.AddResponseProto add2(  RpcController controller,  TestProtos.AddRequestProto2 request) throws ServiceException {
    int sum=0;
    for (    Integer num : request.getParamsList()) {
      sum+=num;
    }
    return TestProtos.AddResponseProto.newBuilder().setResult(sum).build();
  }
  @Override public TestProtos.EmptyResponseProto testServerGet(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    if (!(Server.get() instanceof RPC.Server)) {
      throw new ServiceException("Server.get() failed");
    }
    return TestProtos.EmptyResponseProto.newBuilder().build();
  }
  @Override public TestProtos.ExchangeResponseProto exchange(  RpcController controller,  TestProtos.ExchangeRequestProto request) throws ServiceException {
    Integer[] values=new Integer[request.getValuesCount()];
    for (int i=0; i < values.length; i++) {
      values[i]=i;
    }
    return TestProtos.ExchangeResponseProto.newBuilder().addAllValues(Arrays.asList(values)).build();
  }
  @Override public TestProtos.EmptyResponseProto sleep(  RpcController controller,  TestProtos.SleepRequestProto request) throws ServiceException {
    try {
      Thread.sleep(request.getMilliSeconds());
    }
 catch (    InterruptedException ignore) {
    }
    return TestProtos.EmptyResponseProto.newBuilder().build();
  }
  @Override public TestProtos.AuthMethodResponseProto getAuthMethod(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    AuthMethod authMethod=null;
    try {
      authMethod=UserGroupInformation.getCurrentUser().getAuthenticationMethod().getAuthMethod();
    }
 catch (    IOException e) {
      throw new ServiceException(e);
    }
    return TestProtos.AuthMethodResponseProto.newBuilder().setCode(authMethod.code).setMechanismName(authMethod.getMechanismName()).build();
  }
  @Override public TestProtos.UserResponseProto getAuthUser(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    UserGroupInformation authUser;
    try {
      authUser=UserGroupInformation.getCurrentUser();
    }
 catch (    IOException e) {
      throw new ServiceException(e);
    }
    return newUserResponse(authUser.getUserName());
  }
  @Override public TestProtos.EchoResponseProto echoPostponed(  RpcController controller,  TestProtos.EchoRequestProto request) throws ServiceException {
    Server.Call call=Server.getCurCall().get();
    call.postponeResponse();
    postponedCalls.add(call);
    return TestProtos.EchoResponseProto.newBuilder().setMessage(request.getMessage()).build();
  }
  @Override public TestProtos.EmptyResponseProto sendPostponed(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    Collections.shuffle(postponedCalls);
    try {
      for (      Server.Call call : postponedCalls) {
        call.sendResponse();
      }
    }
 catch (    IOException e) {
      throw new ServiceException(e);
    }
    postponedCalls.clear();
    return TestProtos.EmptyResponseProto.newBuilder().build();
  }
  @Override public TestProtos.UserResponseProto getCurrentUser(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    String user;
    try {
      user=UserGroupInformation.getCurrentUser().toString();
    }
 catch (    IOException e) {
      throw new ServiceException("Failed to get current user",e);
    }
    return newUserResponse(user);
  }
  @Override public TestProtos.UserResponseProto getServerRemoteUser(  RpcController controller,  TestProtos.EmptyRequestProto request) throws ServiceException {
    String serverRemoteUser=Server.getRemoteUser().toString();
    return newUserResponse(serverRemoteUser);
  }
  private TestProtos.UserResponseProto newUserResponse(  String user){
    return TestProtos.UserResponseProto.newBuilder().setUser(user).build();
  }
}
