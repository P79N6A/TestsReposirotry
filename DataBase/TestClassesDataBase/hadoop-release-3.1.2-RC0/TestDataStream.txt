public class TestDataStream {
  static MiniDFSCluster cluster;
  static int PACKET_SIZE=1024;
  @BeforeClass public static void setup() throws IOException {
    Configuration conf=new Configuration();
    conf.setInt(HdfsClientConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_KEY,PACKET_SIZE);
    conf.setInt(HdfsClientConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY,10000);
    conf.setInt(HdfsClientConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,60000);
    cluster=new MiniDFSCluster.Builder(conf).build();
  }
  @Test(timeout=60000) public void testDfsClient() throws IOException, InterruptedException {
    LogCapturer logs=GenericTestUtils.LogCapturer.captureLogs(LogFactory.getLog(DataStreamer.class));
    byte[] toWrite=new byte[PACKET_SIZE];
    new Random(1).nextBytes(toWrite);
    final Path path=new Path("/file1");
    final DistributedFileSystem dfs=cluster.getFileSystem();
    FSDataOutputStream out=null;
    out=dfs.create(path,false);
    out.write(toWrite);
    out.write(toWrite);
    out.hflush();
    Thread.sleep(15 * 1000);
    out.write(toWrite);
    out.write(toWrite);
    out.hflush();
    Thread.sleep(5 * 1000);
    out.close();
    logs.stopCapturing();
    GenericTestUtils.assertDoesNotMatch(logs.getOutput(),"Slow ReadProcessor read fields for block");
  }
  @AfterClass public static void tearDown(){
    cluster.shutdown();
  }
}
