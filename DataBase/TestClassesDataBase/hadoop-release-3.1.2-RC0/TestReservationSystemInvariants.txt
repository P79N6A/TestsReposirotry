/** 
 * This test performs an SLS run enabling a {@code ReservationInvariantsChecker}.
 */
@RunWith(value=Parameterized.class) @NotThreadSafe public class TestReservationSystemInvariants extends BaseSLSRunnerTest {
  @Parameters(name="Testing with: {1}, {0}, (nodeFile {3})") public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{CapacityScheduler.class.getCanonicalName(),"SYNTH","src/test/resources/syn.json",null},{FairScheduler.class.getCanonicalName(),"SYNTH","src/test/resources/syn.json",null}});
  }
  @Test(timeout=120000) @SuppressWarnings("all") public void testSimulatorRunning() throws Exception {
    Configuration conf=new Configuration(false);
    conf.set(YarnConfiguration.RM_SCHEDULER,schedulerType);
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,ReservationInvariantsChecker.class.getCanonicalName());
    conf.setBoolean(InvariantsChecker.THROW_ON_VIOLATION,true);
    long timeTillShutDownInSec=90;
    runSLS(conf,timeTillShutDownInSec);
  }
  @Override public void setup(){
  }
}
