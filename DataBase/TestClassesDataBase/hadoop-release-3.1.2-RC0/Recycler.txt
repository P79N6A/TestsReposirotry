static class Recycler {
  private final ByteArrayManager bam;
  final ExecutorService pool=Executors.newFixedThreadPool(8);
  final List<Future<Integer>> furtures=new LinkedList<Future<Integer>>();
  Recycler(  ByteArrayManager bam){
    this.bam=bam;
  }
  Future<Integer> submit(  final byte[] array){
    final Future<Integer> f=pool.submit(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        return bam.release(array);
      }
    }
);
    furtures.add(f);
    return f;
  }
  void verify(  final int expectedSize) throws Exception {
    Assert.assertEquals(expectedSize,furtures.size());
    Collections.sort(furtures,CMP);
    for (int i=0; i < furtures.size(); i++) {
      Assert.assertEquals(i + 1,furtures.get(i).get().intValue());
    }
    furtures.clear();
  }
}
