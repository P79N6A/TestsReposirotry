static class Workload extends Thread {
  private final short replication;
  private final int numberOfFiles;
  private final int id;
  private final FileSystem fs;
  private long stamp;
  private final long myseed;
  Workload(  long myseed,  FileSystem fs,  int threadIndex,  int numberOfFiles,  short replication,  long stamp){
    this.myseed=myseed;
    id=threadIndex;
    this.fs=fs;
    this.numberOfFiles=numberOfFiles;
    this.replication=replication;
    this.stamp=stamp;
  }
  @Override public void run(){
    System.out.println("Workload starting ");
    for (int i=0; i < numberOfFiles; i++) {
      Path filename=new Path(id + "." + i);
      try {
        System.out.println("Workload processing file " + filename);
        FSDataOutputStream stm=createFile(fs,filename,replication);
        DFSOutputStream dfstream=(DFSOutputStream)(stm.getWrappedStream());
        dfstream.setArtificialSlowdown(1000);
        writeFile(stm,myseed);
        stm.close();
        checkFile(fs,filename,replication,numBlocks,fileSize,myseed);
      }
 catch (      Throwable e) {
        System.out.println("Workload exception " + e);
        assertTrue(e.toString(),false);
      }
synchronized (this) {
        stamp++;
      }
    }
  }
  public synchronized void resetStamp(){
    this.stamp=0;
  }
  public synchronized long getStamp(){
    return stamp;
  }
}
