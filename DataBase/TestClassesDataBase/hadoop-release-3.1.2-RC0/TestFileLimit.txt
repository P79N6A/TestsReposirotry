/** 
 * This class tests that a file system adheres to the limit of maximum number of files that is configured.
 */
public class TestFileLimit {
  static final long seed=0xDEADBEEFL;
  static final int blockSize=8192;
  boolean simulatedStorage=false;
  private void waitForLimit(  FSNamesystem namesys,  long num){
    while (true) {
      long total=namesys.getBlocksTotal() + namesys.dir.totalInodes();
      System.out.println("Comparing current nodes " + total + " to become "+ num);
      if (total == num) {
        break;
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  /** 
 * Test that file data becomes available before file is closed.
 */
  @Test public void testFileLimit() throws IOException {
    Configuration conf=new HdfsConfiguration();
    int maxObjects=5;
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_MAX_OBJECTS_KEY,maxObjects);
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,1000L);
    conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
    int currentNodes=0;
    if (simulatedStorage) {
      SimulatedFSDataset.setFactory(conf);
    }
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    FileSystem fs=cluster.getFileSystem();
    FSNamesystem namesys=cluster.getNamesystem();
    try {
      Path path=new Path("/");
      assertTrue("/ should be a directory",fs.getFileStatus(path).isDirectory());
      currentNodes=1;
      for (int i=0; i < maxObjects / 2; i++) {
        Path file=new Path("/filestatus" + i);
        DFSTestUtil.createFile(fs,file,1024,1024,blockSize,(short)1,seed);
        System.out.println("Created file " + file);
        currentNodes+=2;
      }
      boolean hitException=false;
      try {
        Path file=new Path("/filestatus");
        DFSTestUtil.createFile(fs,file,1024,1024,blockSize,(short)1,seed);
        System.out.println("Created file " + file);
      }
 catch (      IOException e) {
        hitException=true;
      }
      assertTrue("Was able to exceed file limit",hitException);
      Path file0=new Path("/filestatus0");
      fs.delete(file0,true);
      System.out.println("Deleted file " + file0);
      currentNodes-=2;
      waitForLimit(namesys,currentNodes);
      DFSTestUtil.createFile(fs,file0,1024,1024,blockSize,(short)1,seed);
      System.out.println("Created file " + file0 + " again.");
      currentNodes+=2;
      file0=new Path("/filestatus0");
      fs.delete(file0,true);
      System.out.println("Deleted file " + file0 + " again.");
      currentNodes-=2;
      waitForLimit(namesys,currentNodes);
      Path dir=new Path("/dir0/dir1");
      fs.mkdirs(dir);
      System.out.println("Created directories " + dir);
      currentNodes+=2;
      waitForLimit(namesys,currentNodes);
      hitException=false;
      try {
        fs.mkdirs(new Path("dir.fail"));
        System.out.println("Created directory should not have succeeded.");
      }
 catch (      IOException e) {
        hitException=true;
      }
      assertTrue("Was able to exceed dir limit",hitException);
    }
  finally {
      fs.close();
      cluster.shutdown();
    }
  }
  @Test public void testFileLimitSimulated() throws IOException {
    simulatedStorage=true;
    testFileLimit();
    simulatedStorage=false;
  }
  @Test(timeout=60000) public void testMaxBlocksPerFileLimit() throws Exception {
    Configuration conf=new HdfsConfiguration();
    final long blockSize=4096;
    final long numBlocks=2;
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_MAX_BLOCKS_PER_FILE_KEY,numBlocks);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    FileSystem fs=cluster.getFileSystem();
    HdfsDataOutputStream fout=(HdfsDataOutputStream)fs.create(new Path("/testmaxfilelimit"));
    try {
      fout.write(new byte[(int)blockSize * (int)numBlocks]);
      fout.hflush();
      try {
        fout.write(new byte[1]);
        fout.hflush();
        assert false : "Expected IOException after writing too many blocks";
      }
 catch (      IOException e) {
        GenericTestUtils.assertExceptionContains("File has reached the limit" + " on maximum number of",e);
      }
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test(timeout=60000) public void testMinBlockSizeLimit() throws Exception {
    final long blockSize=4096;
    Configuration conf=new HdfsConfiguration();
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY,blockSize);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    FileSystem fs=cluster.getFileSystem();
    try {
      fs.create(new Path("/testmblock1"),true,4096,(short)3,blockSize);
      try {
        fs.create(new Path("/testmblock2"),true,4096,(short)3,blockSize - 1);
        assert false : "Expected IOException after creating a file with small" + " blocks ";
      }
 catch (      IOException e) {
        GenericTestUtils.assertExceptionContains("Specified block size is less",e);
      }
    }
  finally {
      cluster.shutdown();
    }
  }
}
