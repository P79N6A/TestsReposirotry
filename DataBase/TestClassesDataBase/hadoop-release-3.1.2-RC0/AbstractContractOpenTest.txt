/** 
 * Test Seek operations
 */
public abstract class AbstractContractOpenTest extends AbstractFSContractTestBase {
  private FSDataInputStream instream;
  @Override protected Configuration createConfiguration(){
    Configuration conf=super.createConfiguration();
    conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY,4096);
    return conf;
  }
  @Override public void teardown() throws Exception {
    IOUtils.closeStream(instream);
    instream=null;
    super.teardown();
  }
  @Test public void testOpenReadZeroByteFile() throws Throwable {
    describe("create & read a 0 byte file");
    Path path=path("zero.txt");
    touch(getFileSystem(),path);
    instream=getFileSystem().open(path);
    assertEquals(0,instream.getPos());
    int result=instream.read();
    assertMinusOne("initial byte read",result);
  }
  @Test public void testFsIsEncrypted() throws Exception {
    describe("create an empty file and call FileStatus.isEncrypted()");
    final Path path=path("file");
    createFile(getFileSystem(),path,false,new byte[0]);
    final FileStatus stat=getFileSystem().getFileStatus(path);
    assertFalse("Expecting false for stat.isEncrypted()",stat.isEncrypted());
  }
  @Test public void testOpenReadDir() throws Throwable {
    describe("create & read a directory");
    Path path=path("zero.dir");
    mkdirs(path);
    try {
      instream=getFileSystem().open(path);
      fail("A directory has been opened for reading");
    }
 catch (    FileNotFoundException e) {
      handleExpectedException(e);
    }
catch (    IOException e) {
      handleRelaxedException("opening a directory for reading","FileNotFoundException",e);
    }
  }
  @Test public void testOpenReadDirWithChild() throws Throwable {
    describe("create & read a directory which has a child");
    Path path=path("zero.dir");
    mkdirs(path);
    Path path2=new Path(path,"child");
    mkdirs(path2);
    try {
      instream=getFileSystem().open(path);
      fail("A directory has been opened for reading");
    }
 catch (    FileNotFoundException e) {
      handleExpectedException(e);
    }
catch (    IOException e) {
      handleRelaxedException("opening a directory for reading","FileNotFoundException",e);
    }
  }
  @Test public void testOpenFileTwice() throws Throwable {
    describe("verify that two opened file streams are independent");
    Path path=path("testopenfiletwice.txt");
    byte[] block=dataset(TEST_FILE_LEN,0,255);
    createFile(getFileSystem(),path,true,block);
    FSDataInputStream instream1=getFileSystem().open(path);
    FSDataInputStream instream2=null;
    try {
      int c=instream1.read();
      assertEquals(0,c);
      instream2=getFileSystem().open(path);
      assertEquals("first read of instream 2",0,instream2.read());
      assertEquals("second read of instream 1",1,instream1.read());
      instream1.close();
      assertEquals("second read of instream 2",1,instream2.read());
      instream1.close();
    }
  finally {
      IOUtils.closeStream(instream1);
      IOUtils.closeStream(instream2);
    }
  }
  @Test public void testSequentialRead() throws Throwable {
    describe("verify that sequential read() operations return values");
    Path path=path("testsequentialread.txt");
    int len=4;
    int base=0x40;
    byte[] block=dataset(len,base,base + len);
    createFile(getFileSystem(),path,true,block);
    instream=getFileSystem().open(path);
    assertEquals(base,instream.read());
    assertEquals(base + 1,instream.read());
    assertEquals(base + 2,instream.read());
    assertEquals(base + 3,instream.read());
    assertEquals(-1,instream.read());
    assertEquals(-1,instream.read());
    instream.close();
  }
}
