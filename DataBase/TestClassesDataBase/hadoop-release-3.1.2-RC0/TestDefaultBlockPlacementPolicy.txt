public class TestDefaultBlockPlacementPolicy {
  private static final short REPLICATION_FACTOR=(short)3;
  private static final int DEFAULT_BLOCK_SIZE=1024;
  private MiniDFSCluster cluster=null;
  private NamenodeProtocols nameNodeRpc=null;
  private FSNamesystem namesystem=null;
  private PermissionStatus perm=null;
  @Before public void setup() throws IOException {
    StaticMapping.resetMap();
    Configuration conf=new HdfsConfiguration();
    final String[] racks={"/RACK0","/RACK0","/RACK2","/RACK3","/RACK2"};
    final String[] hosts={"/host0","/host1","/host2","/host3","/host4"};
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
    conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BLOCK_SIZE / 2);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(5).racks(racks).hosts(hosts).build();
    cluster.waitActive();
    nameNodeRpc=cluster.getNameNodeRpc();
    namesystem=cluster.getNamesystem();
    perm=new PermissionStatus("TestDefaultBlockPlacementPolicy",null,FsPermission.getDefault());
  }
  @After public void teardown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * Verify rack-local node selection for the rack-local client in case of no local node
 */
  @Test public void testLocalRackPlacement() throws Exception {
    String clientMachine="client.foo.com";
    String clientRack="/RACK2";
    StaticMapping.addNodeToRack(clientMachine,clientRack);
    testPlacement(clientMachine,clientRack,true);
  }
  /** 
 * Verify local node selection
 */
  @Test public void testLocalStoragePlacement() throws Exception {
    String clientMachine="/host3";
    testPlacement(clientMachine,"/RACK3",true);
  }
  /** 
 * Verify local node selection with using DFSNetworkTopology.
 */
  @Test public void testPlacementWithDFSNetworkTopology() throws Exception {
    Configuration conf=new HdfsConfiguration();
    final String[] racks={"/RACK0","/RACK0","/RACK2","/RACK3","/RACK2"};
    final String[] hosts={"/host0","/host1","/host2","/host3","/host4"};
    conf.setBoolean(DFSConfigKeys.DFS_USE_DFS_NETWORK_TOPOLOGY_KEY,true);
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
    conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BLOCK_SIZE / 2);
    if (cluster != null) {
      cluster.shutdown();
    }
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(5).racks(racks).hosts(hosts).build();
    cluster.waitActive();
    nameNodeRpc=cluster.getNameNodeRpc();
    namesystem=cluster.getNamesystem();
    DatanodeManager dm=namesystem.getBlockManager().getDatanodeManager();
    assertTrue(dm.getNetworkTopology() instanceof DFSNetworkTopology);
    String clientMachine="/host3";
    String clientRack="/RACK3";
    String src="/test";
    HdfsFileStatus fileStatus=namesystem.startFile(src,perm,clientMachine,clientMachine,EnumSet.of(CreateFlag.CREATE),true,REPLICATION_FACTOR,DEFAULT_BLOCK_SIZE,null,null,false);
    LocatedBlock locatedBlock=nameNodeRpc.addBlock(src,clientMachine,null,null,fileStatus.getFileId(),null,null);
    assertEquals("Block should be allocated sufficient locations",REPLICATION_FACTOR,locatedBlock.getLocations().length);
    assertEquals("First datanode should be rack local",clientRack,locatedBlock.getLocations()[0].getNetworkLocation());
    nameNodeRpc.abandonBlock(locatedBlock.getBlock(),fileStatus.getFileId(),src,clientMachine);
  }
  /** 
 * Verify decommissioned nodes should not be selected.
 */
  @Test public void testPlacementWithLocalRackNodesDecommissioned() throws Exception {
    String clientMachine="client.foo.com";
    String clientRack="/RACK3";
    StaticMapping.addNodeToRack(clientMachine,clientRack);
    final DatanodeManager dnm=namesystem.getBlockManager().getDatanodeManager();
    DatanodeDescriptor dnd3=dnm.getDatanode(cluster.getDataNodes().get(3).getDatanodeId());
    assertEquals(dnd3.getNetworkLocation(),clientRack);
    dnm.getDatanodeAdminManager().startDecommission(dnd3);
    try {
      testPlacement(clientMachine,clientRack,false);
    }
  finally {
      dnm.getDatanodeAdminManager().stopDecommission(dnd3);
    }
  }
  /** 
 * Verify Random rack node selection for remote client
 */
  @Test public void testRandomRackSelectionForRemoteClient() throws Exception {
    String clientMachine="client.foo.com";
    testPlacement(clientMachine,null,true);
  }
  private void testPlacement(  String clientMachine,  String clientRack,  boolean hasBlockReplicaOnRack) throws IOException {
    for (int i=0; i < 5; i++) {
      String src="/test-" + i;
      HdfsFileStatus fileStatus=namesystem.startFile(src,perm,clientMachine,clientMachine,EnumSet.of(CreateFlag.CREATE),true,REPLICATION_FACTOR,DEFAULT_BLOCK_SIZE,null,null,false);
      LocatedBlock locatedBlock=nameNodeRpc.addBlock(src,clientMachine,null,null,fileStatus.getFileId(),null,null);
      assertEquals("Block should be allocated sufficient locations",REPLICATION_FACTOR,locatedBlock.getLocations().length);
      if (clientRack != null) {
        if (hasBlockReplicaOnRack) {
          assertEquals("First datanode should be rack local",clientRack,locatedBlock.getLocations()[0].getNetworkLocation());
        }
 else {
          for (          DatanodeInfo dni : locatedBlock.getLocations()) {
            assertNotEquals(clientRack,dni.getNetworkLocation());
          }
        }
      }
      nameNodeRpc.abandonBlock(locatedBlock.getBlock(),fileStatus.getFileId(),src,clientMachine);
    }
  }
}
