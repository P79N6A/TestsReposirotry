/** 
 * Test the service that heartbeats the state of the namenodes to the State Store.
 */
public class TestRouterNamenodeHeartbeat {
  private static MiniRouterDFSCluster cluster;
  private static ActiveNamenodeResolver namenodeResolver;
  private static List<NamenodeHeartbeatService> services;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void globalSetUp() throws Exception {
    cluster=new MiniRouterDFSCluster(true,2);
    cluster.startCluster();
    List<String> nss=cluster.getNameservices();
    String ns=nss.get(0);
    Configuration conf=cluster.generateNamenodeConfiguration(ns);
    namenodeResolver=new MockResolver(conf);
    namenodeResolver.setRouterId("testrouter");
    services=new ArrayList<>();
    for (    NamenodeContext nn : cluster.getNamenodes()) {
      String nsId=nn.getNameserviceId();
      String nnId=nn.getNamenodeId();
      NamenodeHeartbeatService service=new NamenodeHeartbeatService(namenodeResolver,nsId,nnId);
      service.init(conf);
      service.start();
      services.add(service);
    }
  }
  @AfterClass public static void tearDown() throws IOException {
    cluster.shutdown();
    for (    NamenodeHeartbeatService service : services) {
      service.stop();
      service.close();
    }
  }
  @Test public void testNamenodeHeartbeatService() throws IOException {
    MiniRouterDFSCluster testCluster=new MiniRouterDFSCluster(true,1);
    Configuration heartbeatConfig=testCluster.generateNamenodeConfiguration(NAMESERVICES[0]);
    NamenodeHeartbeatService server=new NamenodeHeartbeatService(namenodeResolver,NAMESERVICES[0],NAMENODES[0]);
    server.init(heartbeatConfig);
    assertEquals(STATE.INITED,server.getServiceState());
    server.start();
    assertEquals(STATE.STARTED,server.getServiceState());
    server.stop();
    assertEquals(STATE.STOPPED,server.getServiceState());
    server.close();
  }
  @Test public void testHearbeat() throws InterruptedException, IOException {
    if (cluster.isHighAvailability()) {
      for (      String ns : cluster.getNameservices()) {
        cluster.switchToActive(ns,NAMENODES[0]);
        cluster.switchToStandby(ns,NAMENODES[1]);
      }
    }
    Thread.sleep(5000);
    for (    String ns : cluster.getNameservices()) {
      List<? extends FederationNamenodeContext> nns=namenodeResolver.getNamenodesForNameserviceId(ns);
      FederationNamenodeContext active=nns.get(0);
      assertEquals(NAMENODES[0],active.getNamenodeId());
      FederationNamenodeContext standby=nns.get(1);
      assertEquals(NAMENODES[1],standby.getNamenodeId());
    }
    List<String> nss=cluster.getNameservices();
    String failoverNS=nss.get(0);
    String normalNs=nss.get(1);
    cluster.switchToStandby(failoverNS,NAMENODES[0]);
    cluster.switchToActive(failoverNS,NAMENODES[1]);
    Thread.sleep(5000);
    List<? extends FederationNamenodeContext> failoverNSs=namenodeResolver.getNamenodesForNameserviceId(failoverNS);
    FederationNamenodeContext active=failoverNSs.get(0);
    assertEquals(NAMENODES[1],active.getNamenodeId());
    FederationNamenodeContext standby=failoverNSs.get(1);
    assertEquals(NAMENODES[0],standby.getNamenodeId());
    List<? extends FederationNamenodeContext> normalNss=namenodeResolver.getNamenodesForNameserviceId(normalNs);
    active=normalNss.get(0);
    assertEquals(NAMENODES[0],active.getNamenodeId());
    standby=normalNss.get(1);
    assertEquals(NAMENODES[1],standby.getNamenodeId());
  }
}
