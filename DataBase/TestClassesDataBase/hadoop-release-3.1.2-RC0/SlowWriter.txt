static class SlowWriter extends Thread {
  final Path filepath;
  final HdfsDataOutputStream out;
  final long sleepms;
  private volatile boolean running=true;
  SlowWriter(  DistributedFileSystem fs,  Path filepath,  final long sleepms) throws IOException {
    super(SlowWriter.class.getSimpleName() + ":" + filepath);
    this.filepath=filepath;
    this.out=(HdfsDataOutputStream)fs.create(filepath,REPLICATION);
    this.sleepms=sleepms;
  }
  @Override public void run(){
    int i=0;
    try {
      sleep(sleepms);
      for (; running; i++) {
        LOG.info(getName() + " writes " + i);
        out.write(i);
        out.hflush();
        sleep(sleepms);
      }
    }
 catch (    InterruptedException e) {
      LOG.info(getName() + " interrupted:" + e);
    }
catch (    IOException e) {
      throw new RuntimeException(getName(),e);
    }
 finally {
      LOG.info(getName() + " terminated: i=" + i);
    }
  }
  void interruptRunning(){
    running=false;
    interrupt();
  }
  void joinAndClose() throws InterruptedException {
    LOG.info(getName() + " join and close");
    join();
    IOUtils.closeStream(out);
  }
  void checkReplication() throws IOException {
    Assert.assertEquals(REPLICATION,out.getCurrentBlockReplication());
  }
}
