public class TestNMExpiry {
  private static final Log LOG=LogFactory.getLog(TestNMExpiry.class);
  private static final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  ResourceTrackerService resourceTrackerService;
private class TestNmLivelinessMonitor extends NMLivelinessMonitor {
    public TestNmLivelinessMonitor(    Dispatcher dispatcher){
      super(dispatcher);
    }
    @Override public void serviceInit(    Configuration conf) throws Exception {
      conf.setLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,1000);
      super.serviceInit(conf);
    }
  }
  @Before public void setUp(){
    Configuration conf=new Configuration();
    Dispatcher dispatcher=new InlineDispatcher();
    RMContext context=new RMContextImpl(dispatcher,null,null,null,null,null,null,null,null,null);
    dispatcher.register(SchedulerEventType.class,new InlineDispatcher.EmptyEventHandler());
    dispatcher.register(RMNodeEventType.class,new NodeEventDispatcher(context));
    NMLivelinessMonitor nmLivelinessMonitor=new TestNmLivelinessMonitor(dispatcher);
    nmLivelinessMonitor.init(conf);
    nmLivelinessMonitor.start();
    NodesListManager nodesListManager=new NodesListManager(context);
    nodesListManager.init(conf);
    RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(conf);
    containerTokenSecretManager.start();
    NMTokenSecretManagerInRM nmTokenSecretManager=new NMTokenSecretManagerInRM(conf);
    nmTokenSecretManager.start();
    resourceTrackerService=new ResourceTrackerService(context,nodesListManager,nmLivelinessMonitor,containerTokenSecretManager,nmTokenSecretManager);
    resourceTrackerService.init(conf);
    resourceTrackerService.start();
  }
private class ThirdNodeHeartBeatThread extends Thread {
    public void run(){
      int lastResponseID=0;
      while (!stopT) {
        try {
          org.apache.hadoop.yarn.server.api.records.NodeStatus nodeStatus=recordFactory.newRecordInstance(org.apache.hadoop.yarn.server.api.records.NodeStatus.class);
          nodeStatus.setNodeId(request3.getNodeId());
          nodeStatus.setResponseId(lastResponseID);
          nodeStatus.setNodeHealthStatus(recordFactory.newRecordInstance(NodeHealthStatus.class));
          nodeStatus.getNodeHealthStatus().setIsNodeHealthy(true);
          NodeHeartbeatRequest request=recordFactory.newRecordInstance(NodeHeartbeatRequest.class);
          request.setNodeStatus(nodeStatus);
          lastResponseID=resourceTrackerService.nodeHeartbeat(request).getResponseId();
          Thread.sleep(1000);
        }
 catch (        Exception e) {
          LOG.info("failed to heartbeat ",e);
        }
      }
    }
  }
  boolean stopT=false;
  RegisterNodeManagerRequest request3;
  @Test public void testNMExpiry() throws Exception {
    String hostname1="localhost1";
    String hostname2="localhost2";
    String hostname3="localhost3";
    Resource capability=BuilderUtils.newResource(1024,1);
    RegisterNodeManagerRequest request1=recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
    NodeId nodeId1=NodeId.newInstance(hostname1,0);
    request1.setNodeId(nodeId1);
    request1.setHttpPort(0);
    request1.setResource(capability);
    resourceTrackerService.registerNodeManager(request1);
    RegisterNodeManagerRequest request2=recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
    NodeId nodeId2=NodeId.newInstance(hostname2,0);
    request2.setNodeId(nodeId2);
    request2.setHttpPort(0);
    request2.setResource(capability);
    resourceTrackerService.registerNodeManager(request2);
    int waitCount=0;
    while (ClusterMetrics.getMetrics().getNumLostNMs() != 2 && waitCount++ < 20) {
synchronized (this) {
        wait(100);
      }
    }
    Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumLostNMs());
    request3=recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
    NodeId nodeId3=NodeId.newInstance(hostname3,0);
    request3.setNodeId(nodeId3);
    request3.setHttpPort(0);
    request3.setResource(capability);
    resourceTrackerService.registerNodeManager(request3);
    stopT=false;
    new ThirdNodeHeartBeatThread().start();
    Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumLostNMs());
    stopT=true;
  }
}
