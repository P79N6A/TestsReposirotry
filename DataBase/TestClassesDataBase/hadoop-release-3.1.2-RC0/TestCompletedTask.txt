public class TestCompletedTask {
  @Test(timeout=5000) public void testTaskStartTimes(){
    TaskId taskId=mock(TaskId.class);
    TaskInfo taskInfo=mock(TaskInfo.class);
    Map<TaskAttemptID,TaskAttemptInfo> taskAttempts=new TreeMap<TaskAttemptID,TaskAttemptInfo>();
    TaskAttemptID id=new TaskAttemptID("0",0,TaskType.MAP,0,0);
    TaskAttemptInfo info=mock(TaskAttemptInfo.class);
    when(info.getAttemptId()).thenReturn(id);
    when(info.getStartTime()).thenReturn(10l);
    taskAttempts.put(id,info);
    id=new TaskAttemptID("1",0,TaskType.MAP,1,1);
    info=mock(TaskAttemptInfo.class);
    when(info.getAttemptId()).thenReturn(id);
    when(info.getStartTime()).thenReturn(20l);
    taskAttempts.put(id,info);
    when(taskInfo.getAllTaskAttempts()).thenReturn(taskAttempts);
    CompletedTask task=new CompletedTask(taskId,taskInfo);
    TaskReport report=task.getReport();
    assertTrue(report.getStartTime() == 10);
  }
  /** 
 * test some methods of CompletedTaskAttempt
 */
  @Test(timeout=5000) public void testCompletedTaskAttempt(){
    TaskAttemptInfo attemptInfo=mock(TaskAttemptInfo.class);
    when(attemptInfo.getRackname()).thenReturn("Rackname");
    when(attemptInfo.getShuffleFinishTime()).thenReturn(11L);
    when(attemptInfo.getSortFinishTime()).thenReturn(12L);
    when(attemptInfo.getShufflePort()).thenReturn(10);
    JobID jobId=new JobID("12345",0);
    TaskID taskId=new TaskID(jobId,TaskType.REDUCE,0);
    TaskAttemptID taskAttemptId=new TaskAttemptID(taskId,0);
    when(attemptInfo.getAttemptId()).thenReturn(taskAttemptId);
    CompletedTaskAttempt taskAttemt=new CompletedTaskAttempt(null,attemptInfo);
    assertEquals("Rackname",taskAttemt.getNodeRackName());
    assertEquals(Phase.CLEANUP,taskAttemt.getPhase());
    assertTrue(taskAttemt.isFinished());
    assertEquals(11L,taskAttemt.getShuffleFinishTime());
    assertEquals(12L,taskAttemt.getSortFinishTime());
    assertEquals(10,taskAttemt.getShufflePort());
  }
}
