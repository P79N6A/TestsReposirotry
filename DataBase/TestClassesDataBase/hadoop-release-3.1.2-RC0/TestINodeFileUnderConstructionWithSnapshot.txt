/** 
 * Test snapshot functionalities while file appending.
 */
public class TestINodeFileUnderConstructionWithSnapshot {
{
    GenericTestUtils.setLogLevel(INode.LOG,Level.ALL);
    SnapshotTestHelper.disableLogs();
  }
  static final long seed=0;
  static final short REPLICATION=3;
  static final int BLOCKSIZE=1024;
  private final Path dir=new Path("/TestSnapshot");
  Configuration conf;
  MiniDFSCluster cluster;
  FSNamesystem fsn;
  DistributedFileSystem hdfs;
  FSDirectory fsdir;
  @Before public void setUp() throws Exception {
    conf=new Configuration();
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCKSIZE);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build();
    cluster.waitActive();
    fsn=cluster.getNamesystem();
    fsdir=fsn.getFSDirectory();
    hdfs=cluster.getFileSystem();
    hdfs.mkdirs(dir);
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * Test snapshot after file appending
 */
  @Test(timeout=60000) public void testSnapshotAfterAppending() throws Exception {
    Path file=new Path(dir,"file");
    SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
    DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
    DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
    INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
    hdfs.createSnapshot(dir,"s1");
    hdfs.setReplication(file,(short)(REPLICATION - 1));
    DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
    fileNode=(INodeFile)fsdir.getINode(file.toString());
    assertEquals(REPLICATION - 1,fileNode.getFileReplication());
    assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize());
    hdfs.createSnapshot(dir,"s2");
    DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
    fileNode=(INodeFile)fsdir.getINode(file.toString());
    assertEquals(REPLICATION - 1,fileNode.getFileReplication());
    assertEquals(BLOCKSIZE * 4,fileNode.computeFileSize());
  }
  private HdfsDataOutputStream appendFileWithoutClosing(  Path file,  int length) throws IOException {
    byte[] toAppend=new byte[length];
    Random random=new Random();
    random.nextBytes(toAppend);
    HdfsDataOutputStream out=(HdfsDataOutputStream)hdfs.append(file);
    out.write(toAppend);
    return out;
  }
  /** 
 * Test snapshot during file appending, before the corresponding {@link FSDataOutputStream} instance closes.
 */
  @Test(timeout=60000) public void testSnapshotWhileAppending() throws Exception {
    Path file=new Path(dir,"file");
    DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
    HdfsDataOutputStream out=appendFileWithoutClosing(file,BLOCKSIZE);
    out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
    SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
    out.close();
    INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
    assertEquals(BLOCKSIZE * 2,fileNode.computeFileSize());
    INodeDirectory dirNode=fsdir.getINode(dir.toString()).asDirectory();
    DirectoryDiff last=dirNode.getDiffs().getLast();
    out=appendFileWithoutClosing(file,BLOCKSIZE);
    out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
    dirNode=fsdir.getINode(dir.toString()).asDirectory();
    assertEquals(BLOCKSIZE * 2,fileNode.computeFileSize(last.getSnapshotId()));
    hdfs.createSnapshot(dir,"s1");
    out.close();
    fileNode=(INodeFile)fsdir.getINode(file.toString());
    dirNode=fsdir.getINode(dir.toString()).asDirectory();
    last=dirNode.getDiffs().getLast();
    assertTrue(fileNode.isWithSnapshot());
    assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize(last.getSnapshotId()));
    hdfs.setReplication(file,(short)(REPLICATION - 1));
    out=appendFileWithoutClosing(file,BLOCKSIZE);
    hdfs.createSnapshot(dir,"s2");
    out.close();
    assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize(last.getSnapshotId()));
  }
  /** 
 * call DFSClient#callGetBlockLocations(...) for snapshot file. Make sure only blocks within the size range are returned.
 */
  @Test public void testGetBlockLocations() throws Exception {
    final Path root=new Path("/");
    final Path file=new Path("/file");
    DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
    SnapshotTestHelper.createSnapshot(hdfs,root,"s1");
    final Path fileInSnapshot=SnapshotTestHelper.getSnapshotPath(root,"s1",file.getName());
    FileStatus status=hdfs.getFileStatus(fileInSnapshot);
    assertEquals(BLOCKSIZE,status.getLen());
    DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE - 1);
    status=hdfs.getFileStatus(fileInSnapshot);
    assertEquals(BLOCKSIZE,status.getLen());
    status=hdfs.getFileStatus(file);
    assertEquals(BLOCKSIZE * 2 - 1,status.getLen());
    LocatedBlocks blocks=DFSClientAdapter.callGetBlockLocations(cluster.getNameNodeRpc(),fileInSnapshot.toString(),0,Long.MAX_VALUE);
    List<LocatedBlock> blockList=blocks.getLocatedBlocks();
    assertEquals(BLOCKSIZE,blocks.getFileLength());
    assertEquals(1,blockList.size());
    LocatedBlock lastBlock=blocks.getLastLocatedBlock();
    assertEquals(0,lastBlock.getStartOffset());
    assertEquals(BLOCKSIZE,lastBlock.getBlockSize());
    SnapshotTestHelper.createSnapshot(hdfs,root,"s2");
    final Path fileInSnapshot2=SnapshotTestHelper.getSnapshotPath(root,"s2",file.getName());
    HdfsDataOutputStream out=appendFileWithoutClosing(file,BLOCKSIZE);
    out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
    status=hdfs.getFileStatus(fileInSnapshot2);
    assertEquals(BLOCKSIZE * 2 - 1,status.getLen());
    status=hdfs.getFileStatus(file);
    assertEquals(BLOCKSIZE * 3 - 1,status.getLen());
    blocks=DFSClientAdapter.callGetBlockLocations(cluster.getNameNodeRpc(),fileInSnapshot2.toString(),0,Long.MAX_VALUE);
    assertFalse(blocks.isUnderConstruction());
    assertTrue(blocks.isLastBlockComplete());
    blockList=blocks.getLocatedBlocks();
    assertEquals(BLOCKSIZE * 2 - 1,blocks.getFileLength());
    assertEquals(2,blockList.size());
    lastBlock=blocks.getLastLocatedBlock();
    assertEquals(BLOCKSIZE,lastBlock.getStartOffset());
    assertEquals(BLOCKSIZE,lastBlock.getBlockSize());
    blocks=DFSClientAdapter.callGetBlockLocations(cluster.getNameNodeRpc(),fileInSnapshot2.toString(),BLOCKSIZE,0);
    blockList=blocks.getLocatedBlocks();
    assertEquals(1,blockList.size());
    blocks=DFSClientAdapter.callGetBlockLocations(cluster.getNameNodeRpc(),file.toString(),0,Long.MAX_VALUE);
    blockList=blocks.getLocatedBlocks();
    assertEquals(3,blockList.size());
    assertTrue(blocks.isUnderConstruction());
    assertFalse(blocks.isLastBlockComplete());
    lastBlock=blocks.getLastLocatedBlock();
    assertEquals(BLOCKSIZE * 2,lastBlock.getStartOffset());
    assertEquals(BLOCKSIZE - 1,lastBlock.getBlockSize());
    out.close();
  }
  @Test public void testLease() throws Exception {
    try {
      NameNodeAdapter.setLeasePeriod(fsn,100,200);
      final Path foo=new Path(dir,"foo");
      final Path bar=new Path(foo,"bar");
      DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPLICATION,0);
      HdfsDataOutputStream out=appendFileWithoutClosing(bar,100);
      out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
      SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
      hdfs.delete(foo,true);
      Thread.sleep(1000);
      try {
        fsn.writeLock();
        NameNodeAdapter.getLeaseManager(fsn).runLeaseChecks();
      }
  finally {
        fsn.writeUnlock();
      }
    }
  finally {
      NameNodeAdapter.setLeasePeriod(fsn,HdfsConstants.LEASE_SOFTLIMIT_PERIOD,HdfsConstants.LEASE_HARDLIMIT_PERIOD);
    }
  }
}
