/** 
 * Test cases to verify the rules supported by RuleBasedLdapGroupsMapping.
 */
public class TestRuleBasedLdapGroupsMapping {
  @Test public void testGetGroupsToUpper() throws NamingException {
    RuleBasedLdapGroupsMapping groupsMapping=Mockito.spy(new RuleBasedLdapGroupsMapping());
    List<String> groups=new ArrayList<>();
    groups.add("group1");
    groups.add("group2");
    Mockito.doReturn(groups).when((LdapGroupsMapping)groupsMapping).doGetGroups(eq("admin"),anyInt());
    Configuration conf=new Configuration();
    conf.set(LdapGroupsMapping.LDAP_URL_KEY,"ldap://test");
    conf.set(CONVERSION_RULE_KEY,"to_upper");
    groupsMapping.setConf(conf);
    List<String> groupsUpper=new ArrayList<>();
    groupsUpper.add("GROUP1");
    groupsUpper.add("GROUP2");
    Assert.assertEquals(groupsUpper,groupsMapping.getGroups("admin"));
  }
  @Test public void testGetGroupsToLower() throws NamingException {
    RuleBasedLdapGroupsMapping groupsMapping=Mockito.spy(new RuleBasedLdapGroupsMapping());
    List<String> groups=new ArrayList<>();
    groups.add("GROUP1");
    groups.add("GROUP2");
    Mockito.doReturn(groups).when((LdapGroupsMapping)groupsMapping).doGetGroups(eq("admin"),anyInt());
    Configuration conf=new Configuration();
    conf.set(LdapGroupsMapping.LDAP_URL_KEY,"ldap://test");
    conf.set(CONVERSION_RULE_KEY,"to_lower");
    groupsMapping.setConf(conf);
    List<String> groupsLower=new ArrayList<>();
    groupsLower.add("group1");
    groupsLower.add("group2");
    Assert.assertEquals(groupsLower,groupsMapping.getGroups("admin"));
  }
  @Test public void testGetGroupsInvalidRule() throws NamingException {
    RuleBasedLdapGroupsMapping groupsMapping=Mockito.spy(new RuleBasedLdapGroupsMapping());
    List<String> groups=new ArrayList<>();
    groups.add("group1");
    groups.add("GROUP2");
    Mockito.doReturn(groups).when((LdapGroupsMapping)groupsMapping).doGetGroups(eq("admin"),anyInt());
    Configuration conf=new Configuration();
    conf.set(LdapGroupsMapping.LDAP_URL_KEY,"ldap://test");
    conf.set(CONVERSION_RULE_KEY,"none");
    groupsMapping.setConf(conf);
    Assert.assertEquals(groups,groupsMapping.getGroups("admin"));
  }
}
