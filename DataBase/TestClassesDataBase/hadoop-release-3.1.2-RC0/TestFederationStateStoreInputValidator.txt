/** 
 * Unit tests for FederationApplicationInputValidator, FederationMembershipInputValidator, and FederationPolicyInputValidator.
 */
public class TestFederationStateStoreInputValidator {
  private static final Logger LOG=LoggerFactory.getLogger(TestFederationStateStoreInputValidator.class);
  private static SubClusterId subClusterId;
  private static String amRMServiceAddress;
  private static String clientRMServiceAddress;
  private static String rmAdminServiceAddress;
  private static String rmWebServiceAddress;
  private static int lastHeartBeat;
  private static SubClusterState stateNew;
  private static SubClusterState stateLost;
  private static ApplicationId appId;
  private static int lastStartTime;
  private static String capability;
  private static String queue;
  private static String type;
  private static ByteBuffer params;
  private static SubClusterId subClusterIdInvalid;
  private static SubClusterId subClusterIdNull;
  private static int lastHeartBeatNegative;
  private static int lastStartTimeNegative;
  private static SubClusterState stateNull;
  private static ApplicationId appIdNull;
  private static String capabilityNull;
  private static String capabilityEmpty;
  private static String addressNull;
  private static String addressEmpty;
  private static String addressWrong;
  private static String addressWrongPort;
  private static String queueEmpty;
  private static String queueNull;
  private static String typeEmpty;
  private static String typeNull;
  @BeforeClass public static void setUp(){
    subClusterId=SubClusterId.newInstance("abc");
    amRMServiceAddress="localhost:8032";
    clientRMServiceAddress="localhost:8034";
    rmAdminServiceAddress="localhost:8031";
    rmWebServiceAddress="localhost:8088";
    lastHeartBeat=1000;
    stateNew=SubClusterState.SC_NEW;
    stateLost=SubClusterState.SC_LOST;
    lastStartTime=1000;
    capability="Memory VCores";
    appId=ApplicationId.newInstance(lastStartTime,1);
    queue="default";
    type="random";
    params=ByteBuffer.allocate(10);
    params.put((byte)0xFF);
    subClusterIdInvalid=SubClusterId.newInstance("");
    subClusterIdNull=null;
    lastHeartBeatNegative=-10;
    lastStartTimeNegative=-10;
    stateNull=null;
    appIdNull=null;
    capabilityNull=null;
    capabilityEmpty="";
    addressNull=null;
    addressEmpty="";
    addressWrong="AddressWrong";
    addressWrongPort="Address:WrongPort";
    queueEmpty="";
    queueNull=null;
    typeEmpty="";
    typeNull=null;
  }
  @Test public void testValidateSubClusterRegisterRequest(){
    SubClusterInfo subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      SubClusterRegisterRequest request=null;
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubClusterRegister Request."));
    }
    subClusterInfo=null;
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterIdNull,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterIdInvalid,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster State information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capabilityNull);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capabilityEmpty);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
  }
  @Test public void testValidateSubClusterRegisterRequestTimestamp(){
    SubClusterInfo subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeatNegative,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid timestamp information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTimeNegative,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid timestamp information."));
    }
  }
  @Test public void testValidateSubClusterRegisterRequestAddress(){
    SubClusterInfo subClusterInfo=SubClusterInfo.newInstance(subClusterId,addressNull,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,addressEmpty,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,addressNull,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,addressEmpty,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,addressNull,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,addressEmpty,rmWebServiceAddress,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,addressNull,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,addressEmpty,lastHeartBeat,stateNew,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Endpoint information."));
    }
  }
  @Test public void testValidateSubClusterRegisterRequestAddressInvalid(){
    SubClusterInfo subClusterInfo=SubClusterInfo.newInstance(subClusterId,addressWrong,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,addressWrong,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,addressWrong,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,addressWrong,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,addressWrongPort,clientRMServiceAddress,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,addressWrongPort,rmAdminServiceAddress,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,addressWrongPort,rmWebServiceAddress,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
    subClusterInfo=SubClusterInfo.newInstance(subClusterId,amRMServiceAddress,clientRMServiceAddress,rmAdminServiceAddress,addressWrongPort,lastHeartBeat,stateNull,lastStartTime,capability);
    try {
      SubClusterRegisterRequest request=SubClusterRegisterRequest.newInstance(subClusterInfo);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().contains("valid host:port authority:"));
    }
  }
  @Test public void testValidateSubClusterDeregisterRequest(){
    try {
      SubClusterDeregisterRequest request=SubClusterDeregisterRequest.newInstance(subClusterId,stateLost);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      SubClusterDeregisterRequest request=null;
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubClusterDeregister Request."));
    }
    try {
      SubClusterDeregisterRequest request=SubClusterDeregisterRequest.newInstance(subClusterIdNull,stateLost);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    try {
      SubClusterDeregisterRequest request=SubClusterDeregisterRequest.newInstance(subClusterIdInvalid,stateLost);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
    try {
      SubClusterDeregisterRequest request=SubClusterDeregisterRequest.newInstance(subClusterId,stateNull);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster State information."));
    }
    try {
      SubClusterDeregisterRequest request=SubClusterDeregisterRequest.newInstance(subClusterId,stateNew);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid non-final state: "));
    }
  }
  @Test public void testSubClusterHeartbeatRequest(){
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capability);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      SubClusterHeartbeatRequest request=null;
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubClusterHeartbeat Request."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterIdNull,lastHeartBeat,stateLost,capability);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterIdInvalid,lastHeartBeat,stateLost,capability);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateNull,capability);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster State information."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeatNegative,stateLost,capability);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid timestamp information."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capabilityNull);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid capability information."));
    }
    try {
      SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capabilityEmpty);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid capability information."));
    }
  }
  @Test public void testGetSubClusterInfoRequest(){
    try {
      GetSubClusterInfoRequest request=GetSubClusterInfoRequest.newInstance(subClusterId);
      FederationMembershipStateStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      GetSubClusterInfoRequest request=null;
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing GetSubClusterInfo Request."));
    }
    try {
      GetSubClusterInfoRequest request=GetSubClusterInfoRequest.newInstance(subClusterIdNull);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    try {
      GetSubClusterInfoRequest request=GetSubClusterInfoRequest.newInstance(subClusterIdInvalid);
      FederationMembershipStateStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
  }
  @Test public void testAddApplicationHomeSubClusterRequest(){
    ApplicationHomeSubCluster applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterId);
    try {
      AddApplicationHomeSubClusterRequest request=AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      AddApplicationHomeSubClusterRequest request=null;
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing AddApplicationHomeSubCluster Request."));
    }
    applicationHomeSubCluster=null;
    try {
      AddApplicationHomeSubClusterRequest request=AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing ApplicationHomeSubCluster Info."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterIdNull);
    try {
      AddApplicationHomeSubClusterRequest request=AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterIdInvalid);
    try {
      AddApplicationHomeSubClusterRequest request=AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appIdNull,subClusterId);
    try {
      AddApplicationHomeSubClusterRequest request=AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Application Id."));
    }
  }
  @Test public void testUpdateApplicationHomeSubClusterRequest(){
    ApplicationHomeSubCluster applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterId);
    try {
      UpdateApplicationHomeSubClusterRequest request=UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      UpdateApplicationHomeSubClusterRequest request=null;
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing UpdateApplicationHomeSubCluster Request."));
    }
    applicationHomeSubCluster=null;
    try {
      UpdateApplicationHomeSubClusterRequest request=UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing ApplicationHomeSubCluster Info."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterIdNull);
    try {
      UpdateApplicationHomeSubClusterRequest request=UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appId,subClusterIdInvalid);
    try {
      UpdateApplicationHomeSubClusterRequest request=UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      LOG.info(e.getMessage());
      Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
    }
    applicationHomeSubCluster=ApplicationHomeSubCluster.newInstance(appIdNull,subClusterId);
    try {
      UpdateApplicationHomeSubClusterRequest request=UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Application Id."));
    }
  }
  @Test public void testGetApplicationHomeSubClusterRequest(){
    try {
      GetApplicationHomeSubClusterRequest request=GetApplicationHomeSubClusterRequest.newInstance(appId);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      GetApplicationHomeSubClusterRequest request=null;
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing GetApplicationHomeSubCluster Request."));
    }
    try {
      GetApplicationHomeSubClusterRequest request=GetApplicationHomeSubClusterRequest.newInstance(appIdNull);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Application Id."));
    }
  }
  @Test public void testDeleteApplicationHomeSubClusterRequestNull(){
    try {
      DeleteApplicationHomeSubClusterRequest request=DeleteApplicationHomeSubClusterRequest.newInstance(appId);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      DeleteApplicationHomeSubClusterRequest request=null;
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing DeleteApplicationHomeSubCluster Request."));
    }
    try {
      DeleteApplicationHomeSubClusterRequest request=DeleteApplicationHomeSubClusterRequest.newInstance(appIdNull);
      FederationApplicationHomeSubClusterStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Application Id."));
    }
  }
  @Test public void testGetSubClusterPolicyConfigurationRequest(){
    try {
      GetSubClusterPolicyConfigurationRequest request=GetSubClusterPolicyConfigurationRequest.newInstance(queue);
      FederationPolicyStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      GetSubClusterPolicyConfigurationRequest request=null;
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing GetSubClusterPolicyConfiguration Request."));
    }
    try {
      GetSubClusterPolicyConfigurationRequest request=GetSubClusterPolicyConfigurationRequest.newInstance(queueNull);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Queue."));
    }
    try {
      GetSubClusterPolicyConfigurationRequest request=GetSubClusterPolicyConfigurationRequest.newInstance(queueEmpty);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Queue."));
    }
  }
  @Test public void testSetSubClusterPolicyConfigurationRequest(){
    try {
      SubClusterPolicyConfiguration policy=SubClusterPolicyConfiguration.newInstance(queue,type,params);
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.fail(e.getMessage());
    }
    try {
      SetSubClusterPolicyConfigurationRequest request=null;
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing SetSubClusterPolicyConfiguration Request."));
    }
    try {
      SubClusterPolicyConfiguration policy=null;
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing SubClusterPolicyConfiguration."));
    }
    try {
      SubClusterPolicyConfiguration policy=SubClusterPolicyConfiguration.newInstance(queueNull,type,params);
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Queue."));
    }
    try {
      SubClusterPolicyConfiguration policy=SubClusterPolicyConfiguration.newInstance(queueEmpty,type,params);
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Queue."));
    }
    try {
      SubClusterPolicyConfiguration policy=SubClusterPolicyConfiguration.newInstance(queue,typeNull,params);
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Policy Type."));
    }
    try {
      SubClusterPolicyConfiguration policy=SubClusterPolicyConfiguration.newInstance(queue,typeEmpty,params);
      SetSubClusterPolicyConfigurationRequest request=SetSubClusterPolicyConfigurationRequest.newInstance(policy);
      FederationPolicyStoreInputValidator.validate(request);
      Assert.fail();
    }
 catch (    FederationStateStoreInvalidInputException e) {
      Assert.assertTrue(e.getMessage().startsWith("Missing Policy Type."));
    }
  }
}
