private static class Harness {
  final DataChecksum checksum;
  final int dataLength, sumsLength, numSums;
  ByteBuffer dataBuf, checksumBuf;
  Harness(  DataChecksum checksum,  int dataLength,  boolean useDirect){
    this.checksum=checksum;
    this.dataLength=dataLength;
    numSums=(dataLength - 1) / checksum.getBytesPerChecksum() + 1;
    sumsLength=numSums * checksum.getChecksumSize();
    byte data[]=new byte[dataLength + DATA_OFFSET_IN_BUFFER + DATA_TRAILER_IN_BUFFER];
    new Random().nextBytes(data);
    dataBuf=ByteBuffer.wrap(data,DATA_OFFSET_IN_BUFFER,dataLength);
    byte checksums[]=new byte[SUMS_OFFSET_IN_BUFFER + sumsLength];
    checksumBuf=ByteBuffer.wrap(checksums,SUMS_OFFSET_IN_BUFFER,sumsLength);
    if (useDirect) {
      dataBuf=directify(dataBuf);
      checksumBuf=directify(checksumBuf);
    }
  }
  void testCorrectness() throws ChecksumException {
    checksum.calculateChunkedSums(dataBuf,checksumBuf);
    checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
    corruptBufferOffset(checksumBuf,0);
    checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
    corruptBufferOffset(dataBuf,0);
    dataBuf.limit(dataBuf.limit() + 1);
    corruptBufferOffset(dataBuf,dataLength + DATA_OFFSET_IN_BUFFER);
    dataBuf.limit(dataBuf.limit() - 1);
    checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
    corruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER);
    try {
      checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
      fail("Did not throw on bad checksums");
    }
 catch (    ChecksumException ce) {
      assertEquals(0,ce.getPos());
    }
    uncorruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER);
    corruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER + sumsLength - 1);
    try {
      checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
      fail("Did not throw on bad checksums");
    }
 catch (    ChecksumException ce) {
      int expectedPos=checksum.getBytesPerChecksum() * (numSums - 1);
      assertEquals(expectedPos,ce.getPos());
      assertTrue(ce.getMessage().contains("fake file"));
    }
  }
}
