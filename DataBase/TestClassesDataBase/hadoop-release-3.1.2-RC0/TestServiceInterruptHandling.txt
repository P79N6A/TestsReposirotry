/** 
 * Test service launcher interrupt handling.
 */
public class TestServiceInterruptHandling extends AbstractServiceLauncherTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(TestServiceInterruptHandling.class);
  @Test public void testRegisterAndRaise() throws Throwable {
    InterruptCatcher catcher=new InterruptCatcher();
    String name=IrqHandler.CONTROL_C;
    IrqHandler irqHandler=new IrqHandler(name,catcher);
    irqHandler.bind();
    assertEquals(0,irqHandler.getSignalCount());
    irqHandler.raise();
    Thread.sleep(500);
    IrqHandler.InterruptData data=catcher.interruptData;
    assertNotNull("interrupt data",data);
    assertEquals(name,data.getName());
    assertEquals(1,irqHandler.getSignalCount());
  }
  @Test public void testInterruptEscalationShutdown() throws Throwable {
    ExitTrackingServiceLauncher<BreakableService> launcher=new ExitTrackingServiceLauncher<>(BreakableService.class.getName());
    BreakableService service=new BreakableService();
    launcher.setService(service);
    InterruptEscalator escalator=new InterruptEscalator(launcher,500);
    try {
      escalator.interrupted(new IrqHandler.InterruptData("INT",3));
      fail("Expected an exception to be raised in " + escalator);
    }
 catch (    ExitUtil.ExitException e) {
      assertExceptionDetails(EXIT_INTERRUPTED,"",e);
    }
    assertStopped(service);
    assertTrue("isSignalAlreadyReceived() == false in " + escalator,escalator.isSignalAlreadyReceived());
    assertFalse("isForcedShutdownTimedOut() == true in " + escalator,escalator.isForcedShutdownTimedOut());
    try {
      escalator.interrupted(new IrqHandler.InterruptData("INT",3));
      fail("Expected an exception to be raised in " + escalator);
    }
 catch (    ExitUtil.HaltException e) {
      assertExceptionDetails(EXIT_INTERRUPTED,"",e);
    }
  }
  @Test public void testBlockingShutdownTimeouts() throws Throwable {
    ExitTrackingServiceLauncher<FailureTestService> launcher=new ExitTrackingServiceLauncher<>(FailureTestService.class.getName());
    FailureTestService service=new FailureTestService(false,false,false,2000);
    launcher.setService(service);
    InterruptEscalator escalator=new InterruptEscalator(launcher,500);
    try {
      escalator.interrupted(new IrqHandler.InterruptData("INT",3));
      fail("Expected an exception to be raised from " + escalator);
    }
 catch (    ExitUtil.ExitException e) {
      assertExceptionDetails(EXIT_INTERRUPTED,"",e);
    }
    assertTrue("isForcedShutdownTimedOut() == false in " + escalator,escalator.isForcedShutdownTimedOut());
  }
private static class InterruptCatcher implements IrqHandler.Interrupted {
    public IrqHandler.InterruptData interruptData;
    @Override public void interrupted(    IrqHandler.InterruptData data){
      LOG.info("Interrupt caught");
      this.interruptData=data;
    }
  }
}
