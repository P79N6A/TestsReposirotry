/** 
 * Test Request Iterator.
 */
public class TestBatchedRequestsIterators {
  @Test public void testSerialIterator() throws Exception {
    List<SchedulingRequest> schedulingRequestList=Arrays.asList(schedulingRequest(1,1,1,512,"foo"),schedulingRequest(1,2,1,512,"foo"),schedulingRequest(1,3,1,512,"foo"),schedulingRequest(1,4,1,512,"foo"));
    BatchedRequests batchedRequests=new BatchedRequests(BatchedRequests.IteratorType.SERIAL,null,schedulingRequestList,1);
    Iterator<SchedulingRequest> requestIterator=batchedRequests.iterator();
    long prevAllocId=0;
    while (requestIterator.hasNext()) {
      SchedulingRequest request=requestIterator.next();
      Assert.assertTrue(request.getAllocationRequestId() > prevAllocId);
      prevAllocId=request.getAllocationRequestId();
    }
  }
  @Test public void testPopularTagsIterator() throws Exception {
    List<SchedulingRequest> schedulingRequestList=Arrays.asList(schedulingRequest(1,1,1,512,"pri","foo"),schedulingRequest(1,2,1,512,"bar"),schedulingRequest(1,3,1,512,"foo","pri"),schedulingRequest(1,4,1,512,"test"),schedulingRequest(1,5,1,512,"pri","bar"));
    BatchedRequests batchedRequests=new BatchedRequests(BatchedRequests.IteratorType.POPULAR_TAGS,null,schedulingRequestList,1);
    Iterator<SchedulingRequest> requestIterator=batchedRequests.iterator();
    long recCcount=0;
    while (requestIterator.hasNext()) {
      SchedulingRequest request=requestIterator.next();
      if (recCcount < 3) {
        Assert.assertTrue(request.getAllocationTags().contains("pri"));
      }
 else {
        Assert.assertTrue(request.getAllocationTags().contains("bar") || request.getAllocationTags().contains("test"));
      }
      recCcount++;
    }
  }
}
