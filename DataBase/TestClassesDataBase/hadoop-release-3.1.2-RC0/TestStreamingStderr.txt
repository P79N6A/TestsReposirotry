/** 
 * Test that streaming consumes stderr from the streaming process (before, during, and after the main processing of mapred input), and that stderr messages count as task progress.
 */
public class TestStreamingStderr {
  public TestStreamingStderr() throws IOException {
    UtilTest utilTest=new UtilTest(getClass().getName());
    utilTest.checkUserDir();
    utilTest.redirectIfAntJunit();
  }
  protected String[] genArgs(  File input,  File output,  int preLines,  int duringLines,  int postLines){
    return new String[]{"-input",input.getAbsolutePath(),"-output",output.getAbsolutePath(),"-mapper",UtilTest.makeJavaCommand(StderrApp.class,new String[]{Integer.toString(preLines),Integer.toString(duringLines),Integer.toString(postLines)}),"-reducer",StreamJob.REDUCE_NONE,"-jobconf","mapreduce.task.files.preserve.failedtasks=true","-jobconf","mapreduce.task.timeout=5000","-jobconf","stream.tmpdir=" + System.getProperty("test.build.data","/tmp")};
  }
  protected File setupInput(  String base,  boolean hasInput) throws IOException {
    File input=new File(base + "-input.txt");
    UtilTest.recursiveDelete(input);
    FileOutputStream in=new FileOutputStream(input.getAbsoluteFile());
    if (hasInput) {
      in.write("hello\n".getBytes());
    }
    in.close();
    return input;
  }
  protected File setupOutput(  String base) throws IOException {
    File output=new File(base + "-out");
    UtilTest.recursiveDelete(output);
    return output;
  }
  public void runStreamJob(  String baseName,  boolean hasInput,  int preLines,  int duringLines,  int postLines) throws Exception {
    File input=setupInput(baseName,hasInput);
    File output=setupOutput(baseName);
    boolean mayExit=false;
    int returnStatus=0;
    StreamJob job=new StreamJob(genArgs(input,output,preLines,duringLines,postLines),mayExit);
    returnStatus=job.go();
    assertEquals("StreamJob success",0,returnStatus);
  }
  @Test public void testStderrNoInput() throws Exception {
    runStreamJob("target/stderr-pre",false,10000,0,0);
  }
  @Test public void testStderrAfterOutput() throws Exception {
    runStreamJob("target/stderr-post",false,0,0,10000);
  }
  @Test public void testStderrCountsAsProgress() throws Exception {
    runStreamJob("target/stderr-progress",true,10,1000,0);
  }
}
