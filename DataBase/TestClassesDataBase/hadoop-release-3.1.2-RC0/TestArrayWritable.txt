/** 
 * Unit tests for ArrayWritable 
 */
public class TestArrayWritable {
static class TextArrayWritable extends ArrayWritable {
    public TextArrayWritable(){
      super(Text.class);
    }
  }
  /** 
 * If valueClass is undefined, readFields should throw an exception indicating that the field is null. Otherwise, readFields should succeed.	
 */
  @Test public void testThrowUndefinedValueException() throws IOException {
    Text[] elements={new Text("zero"),new Text("one"),new Text("two")};
    TextArrayWritable sourceArray=new TextArrayWritable();
    sourceArray.set(elements);
    DataOutputBuffer out=new DataOutputBuffer();
    DataInputBuffer in=new DataInputBuffer();
    sourceArray.write(out);
    TextArrayWritable destArray=new TextArrayWritable();
    in.reset(out.getData(),out.getLength());
    destArray.readFields(in);
    Writable[] destElements=destArray.get();
    assertTrue(destElements.length == elements.length);
    for (int i=0; i < elements.length; i++) {
      assertEquals(destElements[i],elements[i]);
    }
  }
  /** 
 * test  {@link ArrayWritable} toArray() method 
 */
  @Test public void testArrayWritableToArray(){
    Text[] elements={new Text("zero"),new Text("one"),new Text("two")};
    TextArrayWritable arrayWritable=new TextArrayWritable();
    arrayWritable.set(elements);
    Object array=arrayWritable.toArray();
    assertTrue("TestArrayWritable testArrayWritableToArray error!!! ",array instanceof Text[]);
    Text[] destElements=(Text[])array;
    for (int i=0; i < elements.length; i++) {
      assertEquals(destElements[i],elements[i]);
    }
  }
  /** 
 * test  {@link ArrayWritable} constructor with null
 */
  @Test public void testNullArgument(){
    try {
      Class<? extends Writable> valueClass=null;
      new ArrayWritable(valueClass);
      fail("testNullArgument error !!!");
    }
 catch (    IllegalArgumentException exp) {
    }
catch (    Exception e) {
      fail("testNullArgument error !!!");
    }
  }
  /** 
 * test  {@link ArrayWritable} constructor with {@code String[]} as a parameter
 */
  @SuppressWarnings("deprecation") @Test public void testArrayWritableStringConstructor(){
    String[] original={"test1","test2","test3"};
    ArrayWritable arrayWritable=new ArrayWritable(original);
    assertEquals("testArrayWritableStringConstructor class error!!!",UTF8.class,arrayWritable.getValueClass());
    assertArrayEquals("testArrayWritableStringConstructor toString error!!!",original,arrayWritable.toStrings());
  }
}
