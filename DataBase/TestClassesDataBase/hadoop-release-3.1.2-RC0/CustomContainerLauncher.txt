private final class CustomContainerLauncher extends ContainerLauncherImpl {
  private volatile int expectedCorePoolSize=0;
  private AtomicInteger numEventsProcessing=new AtomicInteger(0);
  private AtomicInteger numEventsProcessed=new AtomicInteger(0);
  private volatile String foundErrors=null;
  private volatile boolean finishEventHandling;
  private CustomContainerLauncher(  AppContext context){
    super(context);
  }
  public ThreadPoolExecutor getThreadPool(){
    return super.launcherPool;
  }
private final class CustomEventProcessor extends ContainerLauncherImpl.EventProcessor {
    private final ContainerLauncherEvent event;
    private CustomEventProcessor(    ContainerLauncherEvent event){
      super(event);
      this.event=event;
    }
    @Override public void run(){
      LOG.info("Processing the event " + event.toString());
      numEventsProcessing.incrementAndGet();
      while (!finishEventHandling) {
synchronized (this) {
          try {
            wait(1000);
          }
 catch (          InterruptedException e) {
            ;
          }
        }
      }
      numEventsProcessed.incrementAndGet();
    }
  }
  protected ContainerLauncherImpl.EventProcessor createEventProcessor(  final ContainerLauncherEvent event){
    if (expectedCorePoolSize != launcherPool.getCorePoolSize()) {
      foundErrors="Expected " + expectedCorePoolSize + " but found "+ launcherPool.getCorePoolSize();
    }
    return new CustomEventProcessor(event);
  }
}
