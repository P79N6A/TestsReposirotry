private class MyResourceTracker4 implements ResourceTracker {
  public NodeAction registerNodeAction=NodeAction.NORMAL;
  public NodeAction heartBeatNodeAction=NodeAction.NORMAL;
  private Context context;
  private final ContainerStatus containerStatus2=createContainerStatus(2,ContainerState.RUNNING);
  private final ContainerStatus containerStatus3=createContainerStatus(3,ContainerState.COMPLETE);
  private final ContainerStatus containerStatus4=createContainerStatus(4,ContainerState.RUNNING);
  private final ContainerStatus containerStatus5=createContainerStatus(5,ContainerState.COMPLETE);
  public MyResourceTracker4(  Context context){
    org.apache.hadoop.security.token.Token<DelegationTokenIdentifier> token1=new org.apache.hadoop.security.token.Token<DelegationTokenIdentifier>();
    token1.setKind(new Text("kind1"));
    expectedCredentials.addToken(new Text("token1"),token1);
    this.context=context;
  }
  @Override public RegisterNodeManagerResponse registerNodeManager(  RegisterNodeManagerRequest request) throws YarnException, IOException {
    RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
    response.setNodeAction(registerNodeAction);
    response.setContainerTokenMasterKey(createMasterKey());
    response.setNMTokenMasterKey(createMasterKey());
    return response;
  }
  @Override public NodeHeartbeatResponse nodeHeartbeat(  NodeHeartbeatRequest request) throws YarnException, IOException {
    List<ContainerId> finishedContainersPulledByAM=new ArrayList<ContainerId>();
    try {
      if (heartBeatID == 0) {
        Assert.assertEquals(0,request.getNodeStatus().getContainersStatuses().size());
        Assert.assertEquals(0,context.getContainers().size());
      }
 else       if (heartBeatID == 1) {
        List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
        Assert.assertEquals(2,statuses.size());
        Assert.assertEquals(2,context.getContainers().size());
        boolean container2Exist=false, container3Exist=false;
        for (        ContainerStatus status : statuses) {
          if (status.getContainerId().equals(containerStatus2.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus2.getState()));
            container2Exist=true;
          }
          if (status.getContainerId().equals(containerStatus3.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus3.getState()));
            container3Exist=true;
          }
        }
        Assert.assertTrue(container2Exist && container3Exist);
        throw new YarnRuntimeException("Lost the heartbeat response");
      }
 else       if (heartBeatID == 2 || heartBeatID == 3) {
        List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
        if (heartBeatID == 2) {
          Assert.assertEquals(4,statuses.size());
        }
 else {
          Assert.assertEquals(2,statuses.size());
        }
        Assert.assertEquals(4,context.getContainers().size());
        boolean container2Exist=false, container3Exist=false, container4Exist=false, container5Exist=false;
        for (        ContainerStatus status : statuses) {
          if (status.getContainerId().equals(containerStatus2.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus2.getState()));
            container2Exist=true;
          }
          if (status.getContainerId().equals(containerStatus3.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus3.getState()));
            container3Exist=true;
          }
          if (status.getContainerId().equals(containerStatus4.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus4.getState()));
            container4Exist=true;
          }
          if (status.getContainerId().equals(containerStatus5.getContainerId())) {
            Assert.assertTrue(status.getState().equals(containerStatus5.getState()));
            container5Exist=true;
          }
        }
        if (heartBeatID == 2) {
          Assert.assertTrue(container2Exist && container3Exist && container4Exist&& container5Exist);
        }
 else {
          Assert.assertTrue(container2Exist && !container3Exist && container4Exist&& !container5Exist);
        }
        if (heartBeatID == 3) {
          finishedContainersPulledByAM.add(containerStatus3.getContainerId());
        }
      }
 else       if (heartBeatID == 4) {
        List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
        Assert.assertEquals(2,statuses.size());
        Assert.assertEquals(3,context.getContainers().size());
        boolean container3Exist=false;
        for (        ContainerStatus status : statuses) {
          if (status.getContainerId().equals(containerStatus3.getContainerId())) {
            container3Exist=true;
          }
        }
        Assert.assertFalse(container3Exist);
      }
    }
 catch (    AssertionError error) {
      error.printStackTrace();
      assertionFailedInThread.set(true);
    }
 finally {
      heartBeatID++;
    }
    NodeStatus nodeStatus=request.getNodeStatus();
    nodeStatus.setResponseId(heartBeatID);
    NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,heartBeatNodeAction,null,null,null,null,1000L);
    nhResponse.addContainersToBeRemovedFromNM(finishedContainersPulledByAM);
    Map<ApplicationId,ByteBuffer> appCredentials=new HashMap<ApplicationId,ByteBuffer>();
    DataOutputBuffer dob=new DataOutputBuffer();
    expectedCredentials.writeTokenStorageToStream(dob);
    ByteBuffer byteBuffer1=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    appCredentials.put(ApplicationId.newInstance(1234,1),byteBuffer1);
    nhResponse.setSystemCredentialsForApps(appCredentials);
    return nhResponse;
  }
  @Override public UnRegisterNodeManagerResponse unRegisterNodeManager(  UnRegisterNodeManagerRequest request) throws YarnException, IOException {
    return recordFactory.newRecordInstance(UnRegisterNodeManagerResponse.class);
  }
}
