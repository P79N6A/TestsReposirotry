public class TestJobHistoryEvents {
  private static final Logger LOG=LoggerFactory.getLogger(TestJobHistoryEvents.class);
  @Test public void testHistoryEvents() throws Exception {
    Configuration conf=new Configuration();
    MRApp app=new MRAppWithHistory(2,1,true,this.getClass().getName(),true);
    app.submit(conf);
    Job job=app.getContext().getAllJobs().values().iterator().next();
    JobId jobId=job.getID();
    LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString());
    app.waitForState(job,JobState.SUCCEEDED);
    app.waitForState(Service.STATE.STOPPED);
    HistoryContext context=new JobHistory();
    ((JobHistory)context).init(conf);
    ((JobHistory)context).start();
    Assert.assertTrue(context.getStartTime() > 0);
    Assert.assertEquals(((JobHistory)context).getServiceState(),Service.STATE.STARTED);
    Job parsedJob=context.getJob(jobId);
    ((JobHistory)context).stop();
    Assert.assertEquals(((JobHistory)context).getServiceState(),Service.STATE.STOPPED);
    Assert.assertEquals("CompletedMaps not correct",2,parsedJob.getCompletedMaps());
    Assert.assertEquals(System.getProperty("user.name"),parsedJob.getUserName());
    Map<TaskId,Task> tasks=parsedJob.getTasks();
    Assert.assertEquals("No of tasks not correct",3,tasks.size());
    for (    Task task : tasks.values()) {
      verifyTask(task);
    }
    Map<TaskId,Task> maps=parsedJob.getTasks(TaskType.MAP);
    Assert.assertEquals("No of maps not correct",2,maps.size());
    Map<TaskId,Task> reduces=parsedJob.getTasks(TaskType.REDUCE);
    Assert.assertEquals("No of reduces not correct",1,reduces.size());
    Assert.assertEquals("CompletedReduce not correct",1,parsedJob.getCompletedReduces());
    Assert.assertEquals("Job state not currect",JobState.SUCCEEDED,parsedJob.getState());
  }
  /** 
 * Verify that all the events are flushed on stopping the HistoryHandler
 * @throws Exception
 */
  @Test public void testEventsFlushOnStop() throws Exception {
    Configuration conf=new Configuration();
    MRApp app=new MRAppWithSpecialHistoryHandler(1,0,true,this.getClass().getName(),true);
    app.submit(conf);
    Job job=app.getContext().getAllJobs().values().iterator().next();
    JobId jobId=job.getID();
    LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString());
    app.waitForState(job,JobState.SUCCEEDED);
    app.waitForState(Service.STATE.STOPPED);
    HistoryContext context=new JobHistory();
    ((JobHistory)context).init(conf);
    Job parsedJob=context.getJob(jobId);
    Assert.assertEquals("CompletedMaps not correct",1,parsedJob.getCompletedMaps());
    Map<TaskId,Task> tasks=parsedJob.getTasks();
    Assert.assertEquals("No of tasks not correct",1,tasks.size());
    verifyTask(tasks.values().iterator().next());
    Map<TaskId,Task> maps=parsedJob.getTasks(TaskType.MAP);
    Assert.assertEquals("No of maps not correct",1,maps.size());
    Assert.assertEquals("Job state not currect",JobState.SUCCEEDED,parsedJob.getState());
  }
  @Test public void testJobHistoryEventHandlerIsFirstServiceToStop(){
    MRApp app=new MRAppWithSpecialHistoryHandler(1,0,true,this.getClass().getName(),true);
    Configuration conf=new Configuration();
    app.init(conf);
    Service[] services=app.getServices().toArray(new Service[0]);
    Assert.assertEquals("JobHistoryEventHandler",services[services.length - 1].getName());
  }
  @Test public void testAssignedQueue() throws Exception {
    Configuration conf=new Configuration();
    MRApp app=new MRAppWithHistory(2,1,true,this.getClass().getName(),true,"assignedQueue");
    app.submit(conf);
    Job job=app.getContext().getAllJobs().values().iterator().next();
    JobId jobId=job.getID();
    LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString());
    app.waitForState(job,JobState.SUCCEEDED);
    app.waitForState(Service.STATE.STOPPED);
    HistoryContext context=new JobHistory();
    ((JobHistory)context).init(conf);
    ((JobHistory)context).start();
    Assert.assertTrue(context.getStartTime() > 0);
    Assert.assertEquals(((JobHistory)context).getServiceState(),Service.STATE.STARTED);
    Job parsedJob=context.getJob(jobId);
    ((JobHistory)context).stop();
    Assert.assertEquals(((JobHistory)context).getServiceState(),Service.STATE.STOPPED);
    Assert.assertEquals("QueueName not correct","assignedQueue",parsedJob.getQueueName());
  }
  private void verifyTask(  Task task){
    Assert.assertEquals("Task state not currect",TaskState.SUCCEEDED,task.getState());
    Map<TaskAttemptId,TaskAttempt> attempts=task.getAttempts();
    Assert.assertEquals("No of attempts not correct",1,attempts.size());
    for (    TaskAttempt attempt : attempts.values()) {
      verifyAttempt(attempt);
    }
  }
  private void verifyAttempt(  TaskAttempt attempt){
    Assert.assertEquals("TaskAttempt state not currect",TaskAttemptState.SUCCEEDED,attempt.getState());
    Assert.assertNotNull(attempt.getAssignedContainerID());
    ContainerId fakeCid=MRApp.newContainerId(-1,-1,-1,-1);
    Assert.assertFalse(attempt.getAssignedContainerID().equals(fakeCid));
    Assert.assertEquals(MRApp.NM_HOST + ":" + MRApp.NM_PORT,attempt.getAssignedContainerMgrAddress());
  }
static class MRAppWithHistory extends MRApp {
    public MRAppWithHistory(    int maps,    int reduces,    boolean autoComplete,    String testName,    boolean cleanOnStart){
      super(maps,reduces,autoComplete,testName,cleanOnStart);
    }
    public MRAppWithHistory(    int maps,    int reduces,    boolean autoComplete,    String testName,    boolean cleanOnStart,    String assignedQueue){
      super(maps,reduces,autoComplete,testName,cleanOnStart,assignedQueue);
    }
    @Override protected EventHandler<JobHistoryEvent> createJobHistoryHandler(    AppContext context){
      return new JobHistoryEventHandler(context,getStartCount());
    }
  }
  /** 
 * MRapp with special HistoryEventHandler that writes events only during stop. This is to simulate events that don't get written by the eventHandling thread due to say a slow DFS and verify that they are flushed during stop.
 */
private static class MRAppWithSpecialHistoryHandler extends MRApp {
    public MRAppWithSpecialHistoryHandler(    int maps,    int reduces,    boolean autoComplete,    String testName,    boolean cleanOnStart){
      super(maps,reduces,autoComplete,testName,cleanOnStart);
    }
    @Override protected EventHandler<JobHistoryEvent> createJobHistoryHandler(    AppContext context){
      return new JobHistoryEventHandler(context,getStartCount()){
        @Override protected void serviceStart(){
          super.eventHandlingThread=new Thread();
          super.eventHandlingThread.start();
        }
      }
;
    }
  }
  public static void main(  String[] args) throws Exception {
    TestJobHistoryEvents t=new TestJobHistoryEvents();
    t.testHistoryEvents();
    t.testEventsFlushOnStop();
    t.testJobHistoryEventHandlerIsFirstServiceToStop();
  }
}
