private static class TestFsVolumeSpi implements FsVolumeSpi {
  @Override public String[] getBlockPoolList(){
    return new String[0];
  }
  @Override public FsVolumeReference obtainReference() throws ClosedChannelException {
    return null;
  }
  @Override public long getAvailable() throws IOException {
    return 0;
  }
  public File getFinalizedDir(  String bpid) throws IOException {
    return new File("/base/current/" + bpid + "/finalized");
  }
  @Override public StorageType getStorageType(){
    return StorageType.DEFAULT;
  }
  @Override public String getStorageID(){
    return "";
  }
  @Override public boolean isTransientStorage(){
    return false;
  }
  @Override public void reserveSpaceForReplica(  long bytesToReserve){
  }
  @Override public void releaseReservedSpace(  long bytesToRelease){
  }
  @Override public void releaseLockedMemory(  long bytesToRelease){
  }
  @Override public BlockIterator newBlockIterator(  String bpid,  String name){
    throw new UnsupportedOperationException();
  }
  @Override public BlockIterator loadBlockIterator(  String bpid,  String name) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public FsDatasetSpi getDataset(){
    throw new UnsupportedOperationException();
  }
  @Override public StorageLocation getStorageLocation(){
    return null;
  }
  @Override public URI getBaseURI(){
    return (new File("/base")).toURI();
  }
  @Override public DF getUsageStats(  Configuration conf){
    return null;
  }
  @Override public byte[] loadLastPartialChunkChecksum(  File blockFile,  File metaFile) throws IOException {
    return null;
  }
  @Override public LinkedList<ScanInfo> compileReport(  String bpid,  LinkedList<ScanInfo> report,  ReportCompiler reportCompiler) throws InterruptedException, IOException {
    return null;
  }
  @Override public FileIoProvider getFileIoProvider(){
    return null;
  }
  @Override public DataNodeVolumeMetrics getMetrics(){
    return null;
  }
  @Override public VolumeCheckResult check(  VolumeCheckContext context) throws Exception {
    return VolumeCheckResult.HEALTHY;
  }
}
