public class WebHdfsTestUtil {
  public static final Log LOG=LogFactory.getLog(WebHdfsTestUtil.class);
  public static Configuration createConf(){
    final Configuration conf=new Configuration();
    return conf;
  }
  public static WebHdfsFileSystem getWebHdfsFileSystem(  final Configuration conf,  String scheme) throws IOException, URISyntaxException {
    final String uri;
    if (WebHdfsConstants.WEBHDFS_SCHEME.equals(scheme)) {
      uri=WebHdfsConstants.WEBHDFS_SCHEME + "://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY);
    }
 else     if (WebHdfsConstants.SWEBHDFS_SCHEME.equals(scheme)) {
      uri=WebHdfsConstants.SWEBHDFS_SCHEME + "://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY);
    }
 else {
      throw new IllegalArgumentException("unknown scheme:" + scheme);
    }
    return (WebHdfsFileSystem)FileSystem.get(new URI(uri),conf);
  }
  public static WebHdfsFileSystem getWebHdfsFileSystemAs(  final UserGroupInformation ugi,  final Configuration conf) throws IOException, InterruptedException {
    return getWebHdfsFileSystemAs(ugi,conf,WebHdfsConstants.WEBHDFS_SCHEME);
  }
  public static WebHdfsFileSystem getWebHdfsFileSystemAs(  final UserGroupInformation ugi,  final Configuration conf,  String scheme) throws IOException, InterruptedException {
    return ugi.doAs(new PrivilegedExceptionAction<WebHdfsFileSystem>(){
      @Override public WebHdfsFileSystem run() throws Exception {
        return getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
      }
    }
);
  }
  public static URL toUrl(  final WebHdfsFileSystem webhdfs,  final HttpOpParam.Op op,  final Path fspath,  final Param<?,?>... parameters) throws IOException {
    final URL url=webhdfs.toUrl(op,fspath,parameters);
    WebHdfsTestUtil.LOG.info("url=" + url);
    return url;
  }
  public static Map<?,?> connectAndGetJson(  final HttpURLConnection conn,  final int expectedResponseCode) throws IOException {
    conn.connect();
    Assert.assertEquals(expectedResponseCode,conn.getResponseCode());
    return WebHdfsFileSystem.jsonParse(conn,false);
  }
}
