class TestZKRMStateStoreInternal extends ZKRMStateStore {
  TestZKRMStateStoreInternal(  Configuration conf,  String workingZnode) throws Exception {
    setResourceManager(new ResourceManager());
    init(conf);
    dispatcher.disableExitOnDispatchException();
    start();
    assertTrue(znodeWorkingPath.equals(workingZnode));
  }
  private String getVersionNode(){
    return znodeWorkingPath + "/" + ROOT_ZNODE_NAME+ "/"+ VERSION_NODE;
  }
  @Override public Version getCurrentVersion(){
    return CURRENT_VERSION_INFO;
  }
  private String getAppNode(  String appId,  int splitIdx){
    String rootPath=workingZnode + "/" + ROOT_ZNODE_NAME+ "/"+ RM_APP_ROOT;
    String appPath=appId;
    if (splitIdx != 0) {
      int idx=appId.length() - splitIdx;
      appPath=appId.substring(0,idx) + "/" + appId.substring(idx);
      return rootPath + "/" + RM_APP_ROOT_HIERARCHIES+ "/"+ Integer.toString(splitIdx)+ "/"+ appPath;
    }
    return rootPath + "/" + appPath;
  }
  private String getAppNode(  String appId){
    return getAppNode(appId,0);
  }
  private String getAttemptNode(  String appId,  String attemptId){
    return getAppNode(appId) + "/" + attemptId;
  }
  /** 
 * Emulating retrying createRootDir not to raise NodeExist exception
 * @throws Exception
 */
  private void testRetryingCreateRootDir() throws Exception {
    create(znodeWorkingPath);
  }
  private String getDelegationTokenNode(  int rmDTSequenceNumber,  int splitIdx){
    String rootPath=workingZnode + "/" + ROOT_ZNODE_NAME+ "/"+ RM_DT_SECRET_MANAGER_ROOT+ "/"+ RMStateStore.RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME;
    String nodeName=DELEGATION_TOKEN_PREFIX;
    if (splitIdx == 0) {
      nodeName+=rmDTSequenceNumber;
    }
 else {
      nodeName+=String.format("%04d",rmDTSequenceNumber);
    }
    String path=nodeName;
    if (splitIdx != 0) {
      int idx=nodeName.length() - splitIdx;
      path=splitIdx + "/" + nodeName.substring(0,idx)+ "/"+ nodeName.substring(idx);
    }
    return rootPath + "/" + path;
  }
}
