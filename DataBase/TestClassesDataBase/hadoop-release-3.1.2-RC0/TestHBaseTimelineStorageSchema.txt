/** 
 * Unit tests for checking different schema prefixes.
 */
public class TestHBaseTimelineStorageSchema {
  private static HBaseTestingUtility util;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    util=new HBaseTestingUtility();
    Configuration conf=util.getConfiguration();
    conf.setInt("hfile.format.version",3);
    util.startMiniCluster();
  }
  @Test public void createWithDefaultPrefix() throws IOException {
    Configuration hbaseConf=util.getConfiguration();
    DataGeneratorForTest.createSchema(hbaseConf);
    Connection conn=null;
    conn=ConnectionFactory.createConnection(hbaseConf);
    Admin admin=conn.getAdmin();
    TableName entityTableName=BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(entityTableName));
    assertTrue(entityTableName.getNameAsString().startsWith(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX));
    Table entityTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(entityTable);
    TableName flowRunTableName=BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(flowRunTableName));
    assertTrue(flowRunTableName.getNameAsString().startsWith(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX));
    Table flowRunTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(flowRunTable);
  }
  @Test public void createWithSetPrefix() throws IOException {
    Configuration hbaseConf=util.getConfiguration();
    String prefix="unit-test.";
    hbaseConf.set(YarnConfiguration.TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME,prefix);
    DataGeneratorForTest.createSchema(hbaseConf);
    Connection conn=null;
    conn=ConnectionFactory.createConnection(hbaseConf);
    Admin admin=conn.getAdmin();
    TableName entityTableName=BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(entityTableName));
    assertTrue(entityTableName.getNameAsString().startsWith(prefix));
    Table entityTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(entityTable);
    TableName flowRunTableName=BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(flowRunTableName));
    assertTrue(flowRunTableName.getNameAsString().startsWith(prefix));
    Table flowRunTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(flowRunTable);
    hbaseConf.unset(YarnConfiguration.TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME);
    prefix="yet-another-unit-test.";
    hbaseConf.set(YarnConfiguration.TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME,prefix);
    DataGeneratorForTest.createSchema(hbaseConf);
    entityTableName=BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(entityTableName));
    assertTrue(entityTableName.getNameAsString().startsWith(prefix));
    entityTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,EntityTableRW.TABLE_NAME_CONF_NAME,EntityTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(entityTable);
    flowRunTableName=BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME);
    assertTrue(admin.tableExists(flowRunTableName));
    assertTrue(flowRunTableName.getNameAsString().startsWith(prefix));
    flowRunTable=conn.getTable(BaseTableRW.getTableName(hbaseConf,FlowRunTableRW.TABLE_NAME_CONF_NAME,FlowRunTableRW.DEFAULT_TABLE_NAME));
    assertNotNull(flowRunTable);
    hbaseConf.unset(YarnConfiguration.TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME);
  }
}
