/** 
 * Tests for  {@link AbstractProviderService}
 */
public class TestAbstractProviderService {
  private ServiceContext serviceContext;
  private Service testService;
  private AbstractLauncher launcher;
  @Rule public ServiceTestUtils.ServiceFSWatcher rule=new ServiceTestUtils.ServiceFSWatcher();
  @Before public void setup() throws Exception {
    testService=TestServiceManager.createBaseDef("testService");
    serviceContext=new MockRunningServiceContext(rule,testService);
    launcher=new AbstractLauncher(serviceContext);
    rule.getFs().setAppDir(new Path("target/testAbstractProviderService"));
  }
  @After public void teardown() throws Exception {
    FileUtils.deleteQuietly(new File(rule.getFs().getAppDir().toUri().getPath()));
  }
  @Test public void testBuildContainerLaunchCommand() throws Exception {
    AbstractProviderService providerService=new DockerProviderService();
    Component component=serviceContext.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    ContainerLaunchService.ComponentLaunchContext clc=createEntryPointCLCFor(testService,component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    Container container=mock(Container.class);
    providerService.buildContainerLaunchCommand(launcher,testService,instance,rule.getFs(),serviceContext.scheduler.getConfig(),container,clc,null);
    Assert.assertEquals("commands",Lists.newArrayList(clc.getLaunchCommand()),launcher.getCommands());
  }
  @Test public void testBuildContainerLaunchContext() throws Exception {
    AbstractProviderService providerService=new DockerProviderService();
    Component component=serviceContext.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    ContainerLaunchService.ComponentLaunchContext clc=createEntryPointCLCFor(testService,component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    Container container=mock(Container.class);
    ContainerId containerId=ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(),1),1),1L);
    when(container.getId()).thenReturn(containerId);
    providerService.buildContainerLaunchContext(launcher,testService,instance,rule.getFs(),serviceContext.scheduler.getConfig(),container,clc);
    Assert.assertEquals("artifact",clc.getArtifact().getId(),launcher.getDockerImage());
  }
  private static ContainerLaunchService.ComponentLaunchContext createEntryPointCLCFor(  Service service,  Component component){
    String launchCmd="sleep,9000";
    Artifact artifact=new Artifact();
    artifact.setType(Artifact.TypeEnum.DOCKER);
    artifact.setId("example");
    Map<String,String> env=new HashMap<>();
    env.put("YARN_CONTAINER_RUNTIME_DOCKER_DELAYED_REMOVAL","true");
    env.put("YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE","true");
    component.getComponentSpec().getConfiguration().setEnv(env);
    return new ContainerLaunchService.ComponentLaunchContext(component.getName(),service.getVersion()).setArtifact(artifact).setConfiguration(component.getComponentSpec().getConfiguration()).setLaunchCommand(launchCmd);
  }
}
