/** 
 * Class which can count invocations and, if limit > 0, will raise an exception on the specific invocation of  {@link #note(Object)}whose count == limit.
 */
private class BaseCounter {
  private final AtomicInteger counter=new AtomicInteger(0);
  private final int limit;
  private final String name;
  private Item item;
  private final Optional<Function<Item,Boolean>> action;
  /** 
 * Base counter, tracks items.
 * @param name name for string/exception/logs.
 * @param limit limit at which an exception is raised, 0 == never
 * @param action optional action to invoke after the increment,before limit check
 */
  BaseCounter(  String name,  int limit,  Function<Item,Boolean> action){
    this.name=name;
    this.limit=limit;
    this.action=Optional.ofNullable(action);
  }
  /** 
 * Apply the action to an item; log at info afterwards with both the before and after string values of the item.
 * @param i item to process.
 * @throws IOException failure in the action
 */
  void process(  Item i) throws IOException {
    this.item=i;
    int count=counter.incrementAndGet();
    if (limit == count) {
      i.fail();
      LOG.info("{}: Failed {}",this,i);
      throw new IOException(String.format("%s: Limit %d reached for %s",this,limit,i));
    }
    String before=i.toString();
    action.map(a -> a.apply(i));
    LOG.info("{}: {} -> {}",this,before,i);
  }
  int getCount(){
    return counter.get();
  }
  Item getItem(){
    return item;
  }
  void assertInvoked(  String text,  int expected){
    assertEquals(toString() + ": " + text,expected,getCount());
  }
  void assertInvokedAtLeast(  String text,  int expected){
    int actual=getCount();
    assertTrue(toString() + ": " + text+ "-expected "+ expected+ " invocations, but got "+ actual+ " in "+ itemsToString(),expected <= actual);
  }
  @Override public String toString(){
    final StringBuilder sb=new StringBuilder("BaseCounter{");
    sb.append("name='").append(name).append('\'');
    sb.append(", count=").append(counter.get());
    sb.append(", limit=").append(limit);
    sb.append(", item=").append(item);
    sb.append('}');
    return sb.toString();
  }
}
