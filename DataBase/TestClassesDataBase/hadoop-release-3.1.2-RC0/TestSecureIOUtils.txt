public class TestSecureIOUtils {
  private static String realOwner, realGroup;
  private static File testFilePathIs;
  private static File testFilePathRaf;
  private static File testFilePathFadis;
  private static FileSystem fs;
  @BeforeClass public static void makeTestFile() throws Exception {
    Configuration conf=new Configuration();
    fs=FileSystem.getLocal(conf).getRaw();
    testFilePathIs=new File((new Path("target",TestSecureIOUtils.class.getSimpleName() + "1")).toUri().getRawPath());
    testFilePathRaf=new File((new Path("target",TestSecureIOUtils.class.getSimpleName() + "2")).toUri().getRawPath());
    testFilePathFadis=new File((new Path("target",TestSecureIOUtils.class.getSimpleName() + "3")).toUri().getRawPath());
    for (    File f : new File[]{testFilePathIs,testFilePathRaf,testFilePathFadis}) {
      FileOutputStream fos=new FileOutputStream(f);
      fos.write("hello".getBytes("UTF-8"));
      fos.close();
    }
    FileStatus stat=fs.getFileStatus(new Path(testFilePathIs.toString()));
    realOwner=stat.getOwner();
    realGroup=stat.getGroup();
  }
  @Test(timeout=10000) public void testReadUnrestricted() throws IOException {
    SecureIOUtils.openForRead(testFilePathIs,null,null).close();
    SecureIOUtils.openFSDataInputStream(testFilePathFadis,null,null).close();
    SecureIOUtils.openForRandomRead(testFilePathRaf,"r",null,null).close();
  }
  @Test(timeout=10000) public void testReadCorrectlyRestrictedWithSecurity() throws IOException {
    SecureIOUtils.openForRead(testFilePathIs,realOwner,realGroup).close();
    SecureIOUtils.openFSDataInputStream(testFilePathFadis,realOwner,realGroup).close();
    SecureIOUtils.openForRandomRead(testFilePathRaf,"r",realOwner,realGroup).close();
  }
  @Test(timeout=10000) public void testReadIncorrectlyRestrictedWithSecurity() throws IOException {
    assumeTrue(NativeIO.isAvailable());
    System.out.println("Running test with native libs...");
    String invalidUser="InvalidUser";
    try {
      SecureIOUtils.forceSecureOpenForRead(testFilePathIs,invalidUser,realGroup).close();
      fail("Didn't throw expection for wrong user ownership!");
    }
 catch (    IOException ioe) {
    }
    try {
      SecureIOUtils.forceSecureOpenFSDataInputStream(testFilePathFadis,invalidUser,realGroup).close();
      fail("Didn't throw expection for wrong user ownership!");
    }
 catch (    IOException ioe) {
    }
    try {
      SecureIOUtils.forceSecureOpenForRandomRead(testFilePathRaf,"r",invalidUser,realGroup).close();
      fail("Didn't throw expection for wrong user ownership!");
    }
 catch (    IOException ioe) {
    }
  }
  @Test(timeout=10000) public void testCreateForWrite() throws IOException {
    try {
      SecureIOUtils.createForWrite(testFilePathIs,0777);
      fail("Was able to create file at " + testFilePathIs);
    }
 catch (    SecureIOUtils.AlreadyExistsException aee) {
    }
  }
  @AfterClass public static void removeTestFile() throws Exception {
    for (    File f : new File[]{testFilePathIs,testFilePathRaf,testFilePathFadis}) {
      f.delete();
    }
  }
}
