/** 
 * Test conversion to  {@link DeletionTask}.
 */
public class TestNMProtoUtils {
  @Test public void testConvertProtoToDeletionTask() throws Exception {
    DeletionService deletionService=mock(DeletionService.class);
    DeletionServiceDeleteTaskProto.Builder protoBuilder=DeletionServiceDeleteTaskProto.newBuilder();
    int id=0;
    protoBuilder.setId(id);
    DeletionServiceDeleteTaskProto proto=protoBuilder.build();
    DeletionTask deletionTask=NMProtoUtils.convertProtoToDeletionTask(proto,deletionService);
    assertEquals(DeletionTaskType.FILE,deletionTask.getDeletionTaskType());
    assertEquals(id,deletionTask.getTaskId());
  }
  @Test public void testConvertProtoToFileDeletionTask() throws Exception {
    DeletionService deletionService=mock(DeletionService.class);
    int id=0;
    String user="user";
    Path subdir=new Path("subdir");
    Path basedir=new Path("basedir");
    DeletionServiceDeleteTaskProto.Builder protoBuilder=DeletionServiceDeleteTaskProto.newBuilder();
    protoBuilder.setId(id).setUser("user").setSubdir(subdir.getName()).addBasedirs(basedir.getName());
    DeletionServiceDeleteTaskProto proto=protoBuilder.build();
    DeletionTask deletionTask=NMProtoUtils.convertProtoToFileDeletionTask(proto,deletionService,id);
    assertEquals(DeletionTaskType.FILE.name(),deletionTask.getDeletionTaskType().name());
    assertEquals(id,deletionTask.getTaskId());
    assertEquals(subdir,((FileDeletionTask)deletionTask).getSubDir());
    assertEquals(basedir,((FileDeletionTask)deletionTask).getBaseDirs().get(0));
  }
  @Test public void testConvertProtoToDockerContainerDeletionTask() throws Exception {
    DeletionService deletionService=mock(DeletionService.class);
    int id=0;
    String user="user";
    String dockerContainerId="container_e123_12321231_00001";
    DeletionServiceDeleteTaskProto.Builder protoBuilder=DeletionServiceDeleteTaskProto.newBuilder();
    protoBuilder.setId(id).setUser(user).setDockerContainerId(dockerContainerId);
    DeletionServiceDeleteTaskProto proto=protoBuilder.build();
    DeletionTask deletionTask=NMProtoUtils.convertProtoToDockerContainerDeletionTask(proto,deletionService,id);
    assertEquals(DeletionTaskType.DOCKER_CONTAINER.name(),deletionTask.getDeletionTaskType().name());
    assertEquals(id,deletionTask.getTaskId());
    assertEquals(dockerContainerId,((DockerContainerDeletionTask)deletionTask).getContainerId());
  }
  @Test public void testConvertProtoToDeletionTaskRecoveryInfo() throws Exception {
    long delTime=System.currentTimeMillis();
    List<Integer> successorTaskIds=Arrays.asList(1);
    DeletionTask deletionTask=mock(DeletionTask.class);
    DeletionTaskRecoveryInfo info=new DeletionTaskRecoveryInfo(deletionTask,successorTaskIds,delTime);
    assertEquals(deletionTask,info.getTask());
    assertEquals(successorTaskIds,info.getSuccessorTaskIds());
    assertEquals(delTime,info.getDeletionTimestamp());
  }
}
