public class TestTokenAspect {
private static class DummyFs extends FileSystem implements DelegationTokenRenewer.Renewable, TokenAspect.TokenManagementDelegator {
    private static final Text TOKEN_KIND=new Text("DummyFS Token");
    private boolean emulateSecurityEnabled;
    private TokenAspect<DummyFs> tokenAspect;
    private final UserGroupInformation ugi=UserGroupInformation.createUserForTesting("foo",new String[]{"bar"});
    private URI uri;
    @Override public FSDataOutputStream append(    Path f,    int bufferSize,    Progressable progress) throws IOException {
      return null;
    }
    @Override public void cancelDelegationToken(    Token<?> token) throws IOException {
    }
    @Override public FSDataOutputStream create(    Path f,    FsPermission permission,    boolean overwrite,    int bufferSize,    short replication,    long blockSize,    Progressable progress) throws IOException {
      return null;
    }
    @Override public boolean delete(    Path f,    boolean recursive) throws IOException {
      return false;
    }
    @Override public URI getCanonicalUri(){
      return super.getCanonicalUri();
    }
    @Override public FileStatus getFileStatus(    Path f) throws IOException {
      return null;
    }
    @Override public Token<?> getRenewToken(){
      return null;
    }
    @Override public URI getUri(){
      return uri;
    }
    @Override public Path getWorkingDirectory(){
      return null;
    }
    @Override public void initialize(    URI name,    Configuration conf) throws IOException {
      super.initialize(name,conf);
      setConf(conf);
      this.uri=URI.create(name.getScheme() + "://" + name.getAuthority());
      tokenAspect=new TokenAspect<DummyFs>(this,SecurityUtil.buildTokenService(uri),TOKEN_KIND);
      if (emulateSecurityEnabled || UserGroupInformation.isSecurityEnabled()) {
        tokenAspect.initDelegationToken(ugi);
      }
    }
    @Override public FileStatus[] listStatus(    Path f) throws IOException {
      return new FileStatus[0];
    }
    @Override public boolean mkdirs(    Path f,    FsPermission permission) throws IOException {
      return false;
    }
    @Override public FSDataInputStream open(    Path f,    int bufferSize) throws IOException {
      return null;
    }
    @Override public boolean rename(    Path src,    Path dst) throws IOException {
      return false;
    }
    @Override public long renewDelegationToken(    Token<?> token) throws IOException {
      return 0;
    }
    @Override public <T extends TokenIdentifier>void setDelegationToken(    Token<T> token){
    }
    @Override public void setWorkingDirectory(    Path new_dir){
    }
  }
  private static RenewAction<?> getActionFromTokenAspect(  TokenAspect<DummyFs> tokenAspect){
    return (RenewAction<?>)Whitebox.getInternalState(tokenAspect,"action");
  }
  @Test public void testCachedInitialization() throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    DummyFs fs=spy(new DummyFs());
    Token<TokenIdentifier> token=new Token<TokenIdentifier>(new byte[0],new byte[0],DummyFs.TOKEN_KIND,new Text("127.0.0.1:1234"));
    doReturn(token).when(fs).getDelegationToken(anyString());
    doReturn(token).when(fs).getRenewToken();
    fs.emulateSecurityEnabled=true;
    fs.initialize(new URI("dummyfs://127.0.0.1:1234"),conf);
    fs.tokenAspect.ensureTokenInitialized();
    verify(fs,times(1)).getDelegationToken(null);
    verify(fs,times(1)).setDelegationToken(token);
    fs.tokenAspect.ensureTokenInitialized();
    verify(fs,times(1)).getDelegationToken(null);
    verify(fs,times(1)).setDelegationToken(token);
  }
  @Test public void testGetRemoteToken() throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    DummyFs fs=spy(new DummyFs());
    Token<TokenIdentifier> token=new Token<TokenIdentifier>(new byte[0],new byte[0],DummyFs.TOKEN_KIND,new Text("127.0.0.1:1234"));
    doReturn(token).when(fs).getDelegationToken(anyString());
    doReturn(token).when(fs).getRenewToken();
    fs.initialize(new URI("dummyfs://127.0.0.1:1234"),conf);
    fs.tokenAspect.ensureTokenInitialized();
    verify(fs).setDelegationToken(token);
    assertNotNull(Whitebox.getInternalState(fs.tokenAspect,"dtRenewer"));
    assertNotNull(Whitebox.getInternalState(fs.tokenAspect,"action"));
  }
  @Test public void testGetRemoteTokenFailure() throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    DummyFs fs=spy(new DummyFs());
    IOException e=new IOException();
    doThrow(e).when(fs).getDelegationToken(anyString());
    fs.emulateSecurityEnabled=true;
    fs.initialize(new URI("dummyfs://127.0.0.1:1234"),conf);
    try {
      fs.tokenAspect.ensureTokenInitialized();
    }
 catch (    IOException exc) {
      assertEquals(e,exc);
    }
  }
  @Test public void testInitWithNoTokens() throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    DummyFs fs=spy(new DummyFs());
    doReturn(null).when(fs).getDelegationToken(anyString());
    fs.initialize(new URI("dummyfs://127.0.0.1:1234"),conf);
    fs.tokenAspect.ensureTokenInitialized();
    verify(fs,never()).setDelegationToken(Mockito.<Token<? extends TokenIdentifier>>any());
  }
  @Test public void testInitWithUGIToken() throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    DummyFs fs=spy(new DummyFs());
    doReturn(null).when(fs).getDelegationToken(anyString());
    Token<TokenIdentifier> token=new Token<TokenIdentifier>(new byte[0],new byte[0],DummyFs.TOKEN_KIND,new Text("127.0.0.1:1234"));
    fs.ugi.addToken(token);
    fs.ugi.addToken(new Token<TokenIdentifier>(new byte[0],new byte[0],new Text("Other token"),new Text("127.0.0.1:8021")));
    assertEquals("wrong tokens in user",2,fs.ugi.getTokens().size());
    fs.emulateSecurityEnabled=true;
    fs.initialize(new URI("dummyfs://127.0.0.1:1234"),conf);
    fs.tokenAspect.ensureTokenInitialized();
    verify(fs).setDelegationToken(token);
    verify(fs,never()).getDelegationToken(anyString());
    assertNull(Whitebox.getInternalState(fs.tokenAspect,"dtRenewer"));
    assertNull(Whitebox.getInternalState(fs.tokenAspect,"action"));
  }
  @Test public void testRenewal() throws Exception {
    Configuration conf=new Configuration();
    Token<?> token1=mock(Token.class);
    Token<?> token2=mock(Token.class);
    final long renewCycle=100;
    DelegationTokenRenewer.renewCycle=renewCycle;
    UserGroupInformation ugi=UserGroupInformation.createUserForTesting("foo",new String[]{"bar"});
    DummyFs fs=spy(new DummyFs());
    doReturn(token1).doReturn(token2).when(fs).getDelegationToken(null);
    doReturn(token1).when(fs).getRenewToken();
    doThrow(new IOException("renew failed")).when(token1).renew(conf);
    doThrow(new IOException("get failed")).when(fs).addDelegationTokens(null,null);
    final URI uri=new URI("dummyfs://127.0.0.1:1234");
    TokenAspect<DummyFs> tokenAspect=new TokenAspect<DummyFs>(fs,SecurityUtil.buildTokenService(uri),DummyFs.TOKEN_KIND);
    fs.initialize(uri,conf);
    tokenAspect.initDelegationToken(ugi);
    tokenAspect.ensureTokenInitialized();
    DelegationTokenRenewer.RenewAction<?> action=getActionFromTokenAspect(tokenAspect);
    verify(fs).setDelegationToken(token1);
    assertTrue(action.isValid());
    Thread.sleep(renewCycle * 2);
    assertSame(action,getActionFromTokenAspect(tokenAspect));
    assertFalse(action.isValid());
    tokenAspect.ensureTokenInitialized();
    verify(fs,times(2)).getDelegationToken(anyString());
    verify(fs).setDelegationToken(token2);
    assertNotSame(action,getActionFromTokenAspect(tokenAspect));
    action=getActionFromTokenAspect(tokenAspect);
    assertTrue(action.isValid());
  }
}
