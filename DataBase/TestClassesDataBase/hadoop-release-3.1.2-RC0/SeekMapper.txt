public static class SeekMapper<K> extends Configured implements Mapper<Text,LongWritable,K,LongWritable> {
  private Random random=new Random();
  private byte[] check=new byte[BUFFER_SIZE];
  private FileSystem fs;
  private boolean fastCheck;
{
    try {
      fs=FileSystem.get(conf);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  public SeekMapper(){
    super(null);
  }
  public SeekMapper(  Configuration conf){
    super(conf);
  }
  public void configure(  JobConf job){
    setConf(job);
    fastCheck=job.getBoolean("fs.test.fastCheck",false);
  }
  public void map(  Text key,  LongWritable value,  OutputCollector<K,LongWritable> collector,  Reporter reporter) throws IOException {
    String name=key.toString();
    long size=value.get();
    long seed=Long.parseLong(name);
    if (size == 0)     return;
    reporter.setStatus("opening " + name);
    FSDataInputStream in=fs.open(new Path(DATA_DIR,name));
    try {
      for (int i=0; i < SEEKS_PER_FILE; i++) {
        long position=Math.abs(random.nextLong()) % size;
        reporter.setStatus("seeking " + name);
        in.seek(position);
        byte b=in.readByte();
        byte checkByte=0;
        random.setSeed(seed);
        for (int p=0; p <= position; p+=check.length) {
          reporter.setStatus("generating data for " + name);
          if (fastCheck) {
            checkByte=(byte)random.nextInt(Byte.MAX_VALUE);
          }
 else {
            random.nextBytes(check);
            checkByte=check[(int)(position % check.length)];
          }
        }
        assertEquals(b,checkByte);
      }
    }
  finally {
      in.close();
    }
  }
  public void close(){
  }
}
