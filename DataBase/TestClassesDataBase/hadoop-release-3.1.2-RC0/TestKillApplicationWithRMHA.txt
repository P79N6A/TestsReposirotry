public class TestKillApplicationWithRMHA extends RMHATestBase {
  public static final Log LOG=LogFactory.getLog(TestKillApplicationWithRMHA.class);
  @Test(timeout=20000) public void testKillAppWhenFailoverHappensAtNewState() throws Exception {
    startRMsWithCustomizedRMAppManager();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false);
    try {
      failOverAndKillApp(app0.getApplicationId(),RMAppState.NEW);
      fail("Should get an exception here");
    }
 catch (    ApplicationNotFoundException ex) {
      Assert.assertTrue(ex.getMessage().contains("Trying to kill an absent application " + app0.getApplicationId()));
    }
  }
  @Test(timeout=20000) public void testKillAppWhenFailoverHappensAtRunningState() throws Exception {
    startRMs();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    failOverAndKillApp(app0.getApplicationId(),am0.getApplicationAttemptId(),RMAppState.RUNNING,RMAppAttemptState.RUNNING,RMAppState.ACCEPTED);
  }
  @Test(timeout=20000) public void testKillAppWhenFailoverHappensAtFinalState() throws Exception {
    startRMs();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.KILLED);
    failOverAndKillApp(app0.getApplicationId(),am0.getApplicationAttemptId(),RMAppState.KILLED,RMAppAttemptState.KILLED,RMAppState.KILLED);
  }
  @Test(timeout=20000) public void testKillAppWhenFailOverHappensDuringApplicationKill() throws Exception {
    startRMsWithCustomizedClientRMService();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    Assert.assertEquals(app0.getState(),RMAppState.RUNNING);
    rm1.killApp(app0.getApplicationId());
    failOverAndKillApp(app0.getApplicationId(),am0.getApplicationAttemptId(),RMAppState.RUNNING,RMAppAttemptState.RUNNING,RMAppState.ACCEPTED);
  }
  private void failOverAndKillApp(  ApplicationId appId,  ApplicationAttemptId appAttemptId,  RMAppState initialRMAppState,  RMAppAttemptState initialRMAppAttemptState,  RMAppState expectedAppStateBeforeKillApp) throws Exception {
    Assert.assertEquals(initialRMAppState,rm1.getRMContext().getRMApps().get(appId).getState());
    Assert.assertEquals(initialRMAppAttemptState,rm1.getRMContext().getRMApps().get(appId).getAppAttempts().get(appAttemptId).getState());
    explicitFailover();
    Assert.assertEquals(expectedAppStateBeforeKillApp,rm2.getRMContext().getRMApps().get(appId).getState());
    killApplication(rm2,appId,appAttemptId,initialRMAppState);
  }
  private void failOverAndKillApp(  ApplicationId appId,  RMAppState initialRMAppState) throws Exception {
    Assert.assertEquals(initialRMAppState,rm1.getRMContext().getRMApps().get(appId).getState());
    explicitFailover();
    Assert.assertTrue(rm2.getRMContext().getRMApps().get(appId) == null);
    killApplication(rm2,appId,null,initialRMAppState);
  }
  private void startRMsWithCustomizedClientRMService() throws IOException {
    final Configuration conf1=new Configuration(confForRM1);
    rm1=new MockRM(conf1){
      @Override protected ClientRMService createClientRMService(){
        return new MyClientRMService(this.rmContext,this.scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,getRMContext().getRMDelegationTokenSecretManager());
      }
    }
;
    rm2=new MockRM(confForRM2);
    startRMs(rm1,conf1,rm2,confForRM2);
  }
private static class MyClientRMService extends ClientRMService {
    private RMContext rmContext;
    public MyClientRMService(    RMContext rmContext,    YarnScheduler scheduler,    RMAppManager rmAppManager,    ApplicationACLsManager applicationACLsManager,    QueueACLsManager queueACLsManager,    RMDelegationTokenSecretManager rmDTSecretManager){
      super(rmContext,scheduler,rmAppManager,applicationACLsManager,queueACLsManager,rmDTSecretManager);
      this.rmContext=rmContext;
    }
    @Override protected void serviceStart(){
    }
    @Override protected void serviceStop(){
    }
    @Override public KillApplicationResponse forceKillApplication(    KillApplicationRequest request) throws YarnException {
      ApplicationId applicationId=request.getApplicationId();
      RMApp application=this.rmContext.getRMApps().get(applicationId);
      if (application.isAppFinalStateStored()) {
        return KillApplicationResponse.newInstance(true);
      }
 else {
        return KillApplicationResponse.newInstance(false);
      }
    }
  }
  private void killApplication(  MockRM rm,  ApplicationId appId,  ApplicationAttemptId appAttemptId,  RMAppState rmAppState) throws Exception {
    KillApplicationResponse response=rm.killApp(appId);
    Assert.assertTrue(response.getIsKillCompleted() == isFinalState(rmAppState));
    RMApp loadedApp0=rm.getRMContext().getRMApps().get(appId);
    rm.waitForState(appId,RMAppState.KILLED);
    if (appAttemptId != null) {
      rm.waitForState(appAttemptId,RMAppAttemptState.KILLED);
    }
    Assert.assertEquals(1,loadedApp0.getAppAttempts().size());
  }
}
