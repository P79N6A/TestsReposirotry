public class TestAvroSerialization {
  private static final Configuration conf=new Configuration();
  @Test public void testSpecific() throws Exception {
    AvroRecord before=new AvroRecord();
    before.intField=5;
    AvroRecord after=SerializationTestUtil.testSerialization(conf,before);
    assertEquals(before,after);
  }
  @Test public void testReflectPkg() throws Exception {
    Record before=new Record();
    before.x=10;
    conf.set(AvroReflectSerialization.AVRO_REFLECT_PACKAGES,before.getClass().getPackage().getName());
    Record after=SerializationTestUtil.testSerialization(conf,before);
    assertEquals(before,after);
  }
  @Test public void testAcceptHandlingPrimitivesAndArrays() throws Exception {
    SerializationFactory factory=new SerializationFactory(conf);
    assertNull(factory.getSerializer(byte[].class));
    assertNull(factory.getSerializer(byte.class));
  }
  @Test public void testReflectInnerClass() throws Exception {
    InnerRecord before=new InnerRecord();
    before.x=10;
    conf.set(AvroReflectSerialization.AVRO_REFLECT_PACKAGES,before.getClass().getPackage().getName());
    InnerRecord after=SerializationTestUtil.testSerialization(conf,before);
    assertEquals(before,after);
  }
  @Test public void testReflect() throws Exception {
    RefSerializable before=new RefSerializable();
    before.x=10;
    RefSerializable after=SerializationTestUtil.testSerialization(conf,before);
    assertEquals(before,after);
  }
public static class InnerRecord {
    public int x=7;
    @Override public int hashCode(){
      return x;
    }
    @Override public boolean equals(    Object obj){
      if (this == obj)       return true;
      if (obj == null)       return false;
      if (getClass() != obj.getClass())       return false;
      final InnerRecord other=(InnerRecord)obj;
      if (x != other.x)       return false;
      return true;
    }
  }
public static class RefSerializable implements AvroReflectSerializable {
    public int x=7;
    @Override public int hashCode(){
      return x;
    }
    @Override public boolean equals(    Object obj){
      if (this == obj)       return true;
      if (obj == null)       return false;
      if (getClass() != obj.getClass())       return false;
      final RefSerializable other=(RefSerializable)obj;
      if (x != other.x)       return false;
      return true;
    }
  }
}
