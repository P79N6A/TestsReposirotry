/** 
 * A fake  {@link TrashPolicy} implementation, it keeps a counton number of checkpoints in the trash. It doesn't do anything other than updating the count.
 */
public static class AuditableTrashPolicy extends TrashPolicy {
  public AuditableTrashPolicy(){
  }
  public AuditableTrashPolicy(  Configuration conf) throws IOException {
    this.initialize(conf,null);
  }
  @Override @Deprecated public void initialize(  Configuration conf,  FileSystem fs,  Path home){
    this.deletionInterval=(long)(conf.getFloat(FS_TRASH_INTERVAL_KEY,FS_TRASH_INTERVAL_DEFAULT));
  }
  @Override public void initialize(  Configuration conf,  FileSystem fs){
    this.deletionInterval=(long)(conf.getFloat(FS_TRASH_INTERVAL_KEY,FS_TRASH_INTERVAL_DEFAULT));
  }
  @Override public boolean moveToTrash(  Path path) throws IOException {
    return false;
  }
  @Override public void createCheckpoint() throws IOException {
    AuditableCheckpoints.add();
  }
  @Override public void deleteCheckpoint() throws IOException {
    AuditableCheckpoints.delete();
  }
  @Override public Path getCurrentTrashDir(){
    return null;
  }
  @Override public Runnable getEmptier() throws IOException {
    return new AuditableEmptier(getConf());
  }
  public int getNumberOfCheckpoints(){
    return AuditableCheckpoints.get();
  }
  /** 
 * A fake emptier that simulates to delete a checkpoint in a fixed interval.
 */
private class AuditableEmptier implements Runnable {
    private Configuration conf=null;
    public AuditableEmptier(    Configuration conf){
      this.conf=conf;
    }
    @Override public void run(){
      AuditableTrashPolicy trash=null;
      try {
        trash=new AuditableTrashPolicy(conf);
      }
 catch (      IOException e1) {
      }
      while (true) {
        try {
          Thread.sleep(deletionInterval);
          trash.deleteCheckpoint();
        }
 catch (        IOException e) {
        }
catch (        InterruptedException e) {
          break;
        }
      }
    }
  }
  @Override public boolean isEnabled(){
    return true;
  }
}
