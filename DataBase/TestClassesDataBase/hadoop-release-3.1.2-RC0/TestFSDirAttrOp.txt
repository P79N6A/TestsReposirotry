/** 
 * Test  {@link FSDirAttrOp}.
 */
public class TestFSDirAttrOp {
  public static final Log LOG=LogFactory.getLog(TestFSDirAttrOp.class);
  private boolean unprotectedSetTimes(  long atime,  long atime0,  long precision,  long mtime,  boolean force) throws QuotaExceededException {
    FSNamesystem fsn=Mockito.mock(FSNamesystem.class);
    SnapshotManager ssMgr=Mockito.mock(SnapshotManager.class);
    FSDirectory fsd=Mockito.mock(FSDirectory.class);
    INodesInPath iip=Mockito.mock(INodesInPath.class);
    INode inode=Mockito.mock(INode.class);
    when(fsd.getFSNamesystem()).thenReturn(fsn);
    when(fsn.getSnapshotManager()).thenReturn(ssMgr);
    when(ssMgr.getSkipCaptureAccessTimeOnlyChange()).thenReturn(false);
    when(fsd.getAccessTimePrecision()).thenReturn(precision);
    when(fsd.hasWriteLock()).thenReturn(Boolean.TRUE);
    when(iip.getLastINode()).thenReturn(inode);
    when(iip.getLatestSnapshotId()).thenReturn(Mockito.anyInt());
    when(inode.getAccessTime()).thenReturn(atime0);
    return FSDirAttrOp.unprotectedSetTimes(fsd,iip,mtime,atime,force);
  }
  @Test public void testUnprotectedSetTimes() throws Exception {
    assertFalse("SetTimes should not update access time " + "because it's within the last precision interval",unprotectedSetTimes(100,0,1000,-1,false));
    assertFalse("SetTimes should not update access time " + "because it's within the last precision interval",unprotectedSetTimes(1000,0,1000,-1,false));
    assertTrue("SetTimes should update access time",unprotectedSetTimes(1011,10,1000,-1,false));
    assertTrue("SetTimes should update access time",unprotectedSetTimes(100,0,1000,-1,true));
    assertTrue("SetTimes should update access time",unprotectedSetTimes(100,0,1000,1,false));
  }
}
