public class TestSecureNameNode extends SaslDataTransferTestCase {
  final static private int NUM_OF_DATANODES=0;
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void testName() throws Exception {
    MiniDFSCluster cluster=null;
    HdfsConfiguration conf=createSecureConfig("authentication,privacy");
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
      final MiniDFSCluster clusterRef=cluster;
      cluster.waitActive();
      FileSystem fsForSuperUser=UserGroupInformation.loginUserFromKeytabAndReturnUGI(getHdfsPrincipal(),getHdfsKeytab()).doAs(new PrivilegedExceptionAction<FileSystem>(){
        @Override public FileSystem run() throws Exception {
          return clusterRef.getFileSystem();
        }
      }
);
      fsForSuperUser.mkdirs(new Path("/tmp"));
      fsForSuperUser.setPermission(new Path("/tmp"),new FsPermission((short)511));
      UserGroupInformation ugi=UserGroupInformation.loginUserFromKeytabAndReturnUGI(getUserPrincipal(),getUserKeyTab());
      FileSystem fs=ugi.doAs(new PrivilegedExceptionAction<FileSystem>(){
        @Override public FileSystem run() throws Exception {
          return clusterRef.getFileSystem();
        }
      }
);
      Path p=new Path("/mydir");
      exception.expect(IOException.class);
      fs.mkdirs(p);
      Path tmp=new Path("/tmp/alpha");
      fs.mkdirs(tmp);
      assertNotNull(fs.listStatus(tmp));
      assertEquals(AuthenticationMethod.KERBEROS,ugi.getAuthenticationMethod());
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * Verify the following scenario. 1. Kerberos is enabled. 2. HDFS block tokens are not enabled. 3. Start the NN. 4. NN should throw an IOException and abort
 * @throws Exception
 */
  @Test public void testKerberosHdfsBlockTokenInconsistencyNNStartup() throws Exception {
    MiniDFSCluster dfsCluster=null;
    HdfsConfiguration conf=createSecureConfig("authentication,privacy");
    try {
      conf.setBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,false);
      exception.expect(IOException.class);
      exception.expectMessage("Security is enabled but block access tokens");
      dfsCluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
      dfsCluster.waitActive();
    }
  finally {
      if (dfsCluster != null) {
        dfsCluster.shutdown();
      }
    }
    return;
  }
  /** 
 * Test NameNodeStatusMXBean with security enabled and disabled.
 * @throws Exception
 */
  @Test public void testNameNodeStatusMXBeanSecurityEnabled() throws Exception {
    Configuration simpleConf=new Configuration();
    Configuration secureConf=createSecureConfig("authentication");
    UserGroupInformation.setConfiguration(simpleConf);
    try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(simpleConf).build()){
      cluster.waitActive();
      NameNode namenode=cluster.getNameNode();
      MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
      ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeStatus");
      boolean securityEnabled=(boolean)mbs.getAttribute(mxbeanName,"SecurityEnabled");
      Assert.assertFalse(securityEnabled);
      Assert.assertEquals(namenode.isSecurityEnabled(),securityEnabled);
    }
     try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(secureConf).build()){
      cluster.waitActive();
      NameNode namenode=cluster.getNameNode();
      MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
      ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeStatus");
      boolean securityEnabled=(boolean)mbs.getAttribute(mxbeanName,"SecurityEnabled");
      Assert.assertTrue(securityEnabled);
      Assert.assertEquals(namenode.isSecurityEnabled(),securityEnabled);
    }
   }
}
