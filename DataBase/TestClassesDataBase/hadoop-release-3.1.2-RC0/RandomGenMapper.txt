/** 
 * Modified to make it a junit test. The RandomGen Job does the actual work of creating a huge file of assorted numbers.  It receives instructions as to how many times each number should be counted.  Then it emits those numbers in a crazy order. The map() function takes a key/val pair that describes a value-to-be-emitted (the key) and how many times it  should be emitted (the value), aka "numtimes".  map() then emits a series of intermediate key/val pairs.  It emits 'numtimes' of these.  The key is a random number and the value is the 'value-to-be-emitted'. The system collates and merges these pairs according to the random number.  reduce() function takes in a key/value pair that consists of a crazy random number and a series of values that should be emitted.  The random number key is now dropped, and reduce() emits a pair for every intermediate value. The emitted key is an intermediate value.  The emitted value is just a blank string.  Thus, we've created a huge file of numbers in random order, but where each number appears as many times as we were instructed.
 */
static class RandomGenMapper extends Mapper<IntWritable,IntWritable,IntWritable,IntWritable> {
  public void map(  IntWritable key,  IntWritable val,  Context context) throws IOException, InterruptedException {
    int randomVal=key.get();
    int randomCount=val.get();
    for (int i=0; i < randomCount; i++) {
      context.write(new IntWritable(Math.abs(r.nextInt())),new IntWritable(randomVal));
    }
  }
}
