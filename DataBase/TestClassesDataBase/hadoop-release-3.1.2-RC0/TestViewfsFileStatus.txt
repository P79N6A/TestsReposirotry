/** 
 * The FileStatus is being serialized in MR as jobs are submitted. Since viewfs has overlayed ViewFsFileStatus, we ran into serialization problems. THis test is test the fix.
 */
public class TestViewfsFileStatus {
  private static final File TEST_DIR=GenericTestUtils.getTestDir(TestViewfsFileStatus.class.getSimpleName());
  @Test public void testFileStatusSerialziation() throws IOException, URISyntaxException {
    String testfilename="testFileStatusSerialziation";
    TEST_DIR.mkdirs();
    File infile=new File(TEST_DIR,testfilename);
    final byte[] content="dingos".getBytes();
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(infile);
      fos.write(content);
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
    assertEquals((long)content.length,infile.length());
    Configuration conf=new Configuration();
    ConfigUtil.addLink(conf,"/foo/bar/baz",TEST_DIR.toURI());
    FileSystem vfs=FileSystem.get(FsConstants.VIEWFS_URI,conf);
    assertEquals(ViewFileSystem.class,vfs.getClass());
    Path path=new Path("/foo/bar/baz",testfilename);
    FileStatus stat=vfs.getFileStatus(path);
    assertEquals(content.length,stat.getLen());
    ContractTestUtils.assertNotErasureCoded(vfs,path);
    assertTrue(path + " should have erasure coding unset in " + "FileStatus#toString(): "+ stat,stat.toString().contains("isErasureCoded=false"));
    DataOutputBuffer dob=new DataOutputBuffer();
    stat.write(dob);
    DataInputBuffer dib=new DataInputBuffer();
    dib.reset(dob.getData(),0,dob.getLength());
    FileStatus deSer=new FileStatus();
    deSer.readFields(dib);
    assertEquals(content.length,deSer.getLen());
    assertFalse(deSer.isErasureCoded());
  }
  @Test public void testGetFileChecksum() throws IOException {
    final Path path=new Path("/tmp/someFile");
    FileSystem mockFS=Mockito.mock(FileSystem.class);
    InodeTree.ResolveResult<FileSystem> res=new InodeTree.ResolveResult<FileSystem>(null,mockFS,null,new Path("someFile"));
    @SuppressWarnings("unchecked") InodeTree<FileSystem> fsState=Mockito.mock(InodeTree.class);
    Mockito.when(fsState.resolve(path.toString(),true)).thenReturn(res);
    ViewFileSystem vfs=Mockito.mock(ViewFileSystem.class);
    vfs.fsState=fsState;
    Mockito.when(vfs.getFileChecksum(path)).thenCallRealMethod();
    Mockito.when(vfs.getUriPath(path)).thenCallRealMethod();
    vfs.getFileChecksum(path);
    Mockito.verify(mockFS).getFileChecksum(new Path("someFile"));
  }
  @AfterClass public static void cleanup() throws IOException {
    FileUtil.fullyDelete(TEST_DIR);
  }
}
