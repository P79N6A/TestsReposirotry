/** 
 * Tests OfflineImageViewer if the input fsimage has XAttributes
 */
public class TestOfflineImageViewerForXAttr {
  private static final Log LOG=LogFactory.getLog(TestOfflineImageViewerForXAttr.class);
  private static File originalFsimage=null;
  static String attr1JSon;
  /** 
 * Create a populated namespace for later testing. Save its contents to a data structure and store its fsimage location. We only want to generate the fsimage file once and use it for multiple tests.
 */
  @BeforeClass public static void createOriginalFSImage() throws IOException {
    MiniDFSCluster cluster=null;
    Configuration conf=new Configuration();
    try {
      cluster=new MiniDFSCluster.Builder(conf).build();
      cluster.waitActive();
      DistributedFileSystem hdfs=cluster.getFileSystem();
      Path dir=new Path("/dir1");
      hdfs.mkdirs(dir);
      hdfs.setXAttr(dir,"user.attr1","value1".getBytes());
      hdfs.setXAttr(dir,"user.attr2","value2".getBytes());
      hdfs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER,false);
      hdfs.saveNamespace();
      List<XAttr> attributes=new ArrayList<XAttr>();
      attributes.add(XAttrHelper.buildXAttr("user.attr1","value1".getBytes()));
      attr1JSon=JsonUtil.toJsonString(attributes,null);
      attributes.add(XAttrHelper.buildXAttr("user.attr2","value2".getBytes()));
      originalFsimage=FSImageTestUtil.findLatestImageFile(FSImageTestUtil.getFSImage(cluster.getNameNode()).getStorage().getStorageDir(0));
      if (originalFsimage == null) {
        throw new RuntimeException("Didn't generate or can't find fsimage");
      }
      LOG.debug("original FS image file is " + originalFsimage);
    }
  finally {
      if (cluster != null)       cluster.shutdown();
    }
  }
  @AfterClass public static void deleteOriginalFSImage() throws IOException {
    if (originalFsimage != null && originalFsimage.exists()) {
      originalFsimage.delete();
    }
  }
  @Test public void testWebImageViewerForListXAttrs() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=LISTXATTRS");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_OK,connection.getResponseCode());
      String content=IOUtils.toString(connection.getInputStream());
      assertTrue("Missing user.attr1 in response ",content.contains("user.attr1"));
      assertTrue("Missing user.attr2 in response ",content.contains("user.attr2"));
    }
   }
  @Test public void testWebImageViewerForGetXAttrsWithOutParameters() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=GETXATTRS");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_OK,connection.getResponseCode());
      String content=IOUtils.toString(connection.getInputStream());
      assertTrue("Missing user.attr1 in response ",content.contains("user.attr1"));
      assertTrue("Missing user.attr2 in response ",content.contains("user.attr2"));
    }
   }
  @Test public void testWebImageViewerForGetXAttrsWithParameters() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=GETXATTRS&xattr.name=attr8");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_BAD_REQUEST,connection.getResponseCode());
      url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=GETXATTRS&xattr.name=user.attr1");
      connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_OK,connection.getResponseCode());
      String content=IOUtils.toString(connection.getInputStream());
      assertEquals(attr1JSon,content);
    }
   }
  @Test public void testWebImageViewerForGetXAttrsWithCodecParameters() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=GETXATTRS&xattr.name=USER.attr1&encoding=TEXT");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_OK,connection.getResponseCode());
      String content=IOUtils.toString(connection.getInputStream());
      assertEquals(attr1JSon,content);
    }
   }
  @Test public void testWithWebHdfsFileSystem() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URI uri=new URI("webhdfs://localhost:" + String.valueOf(port));
      Configuration conf=new Configuration();
      WebHdfsFileSystem webhdfs=(WebHdfsFileSystem)FileSystem.get(uri,conf);
      List<String> names=webhdfs.listXAttrs(new Path("/dir1"));
      assertTrue(names.contains("user.attr1"));
      assertTrue(names.contains("user.attr2"));
      String value=new String(webhdfs.getXAttr(new Path("/dir1"),"user.attr1"));
      assertEquals("value1",value);
      value=new String(webhdfs.getXAttr(new Path("/dir1"),"USER.attr1"));
      assertEquals("value1",value);
      Map<String,byte[]> contentMap=webhdfs.getXAttrs(new Path("/dir1"),names);
      assertEquals("value1",new String(contentMap.get("user.attr1")));
      assertEquals("value2",new String(contentMap.get("user.attr2")));
    }
   }
  @Test public void testResponseCode() throws Exception {
    try (WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"))){
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/dir1/?op=GETXATTRS&xattr.name=user.notpresent&encoding=TEXT");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_FORBIDDEN,connection.getResponseCode());
    }
   }
}
