/** 
 * A builder to verify configuration keys are supported.
 */
private static class BuilderWithSupportedKeys extends FSDataOutputStreamBuilder<FSDataOutputStream,BuilderWithSupportedKeys> {
  private final Set<String> supportedKeys=new HashSet<>();
  BuilderWithSupportedKeys(  @Nonnull final Collection<String> supportedKeys,  @Nonnull FileSystem fileSystem,  @Nonnull Path p){
    super(fileSystem,p);
    this.supportedKeys.addAll(supportedKeys);
  }
  @Override protected BuilderWithSupportedKeys getThisBuilder(){
    return this;
  }
  @Override public FSDataOutputStream build() throws IllegalArgumentException, IOException {
    Set<String> unsupported=new HashSet<>(getMandatoryKeys());
    unsupported.removeAll(supportedKeys);
    Preconditions.checkArgument(unsupported.isEmpty(),"unsupported key found: " + supportedKeys);
    return getFS().create(getPath(),getPermission(),getFlags(),getBufferSize(),getReplication(),getBlockSize(),getProgress(),getChecksumOpt());
  }
}
