/** 
 * Dummy class to verify that CachingKeyProvider is used to provide CryptoExtension services if the CachingKeyProvider itself implements CryptoExtension.
 */
public class DummyCachingCryptoExtensionKeyProvider extends CachingKeyProvider implements KeyProviderCryptoExtension.CryptoExtension {
  private KeyProvider kp;
  private KeyVersion kv;
  private EncryptedKeyVersion ekv;
  public DummyCachingCryptoExtensionKeyProvider(  KeyProvider keyProvider,  long keyTimeoutMillis,  long currKeyTimeoutMillis){
    super(keyProvider,keyTimeoutMillis,currKeyTimeoutMillis);
    conf=new Configuration();
    try {
      this.kp=new UserProvider.Factory().createProvider(new URI("user:///"),conf);
      this.kv=new KeyVersion(ENCRYPTION_KEY_NAME,"dummyCachingFakeKey@1",new byte[16]);
      this.ekv=new EncryptedKeyVersion(ENCRYPTION_KEY_NAME,"dummyCachingFakeKey@1",new byte[16],kv);
    }
 catch (    URISyntaxException e) {
      fail(e.getMessage());
    }
catch (    IOException e) {
      fail(e.getMessage());
    }
  }
  @Override public void warmUpEncryptedKeys(  String... keyNames) throws IOException {
  }
  @Override public void drain(  String keyName){
  }
  @Override public EncryptedKeyVersion generateEncryptedKey(  String encryptionKeyName) throws IOException, GeneralSecurityException {
    return this.ekv;
  }
  @Override public KeyVersion decryptEncryptedKey(  EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException {
    return kv;
  }
  @Override public EncryptedKeyVersion reencryptEncryptedKey(  EncryptedKeyVersion ekv) throws IOException, GeneralSecurityException {
    return ekv;
  }
  @Override public void reencryptEncryptedKeys(  List<EncryptedKeyVersion> ekvs) throws IOException, GeneralSecurityException {
  }
}
