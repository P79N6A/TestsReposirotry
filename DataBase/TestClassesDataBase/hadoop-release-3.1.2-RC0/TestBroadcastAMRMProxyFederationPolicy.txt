/** 
 * Simple test class for the  {@link BroadcastAMRMProxyPolicy}.
 */
public class TestBroadcastAMRMProxyFederationPolicy extends BaseFederationPoliciesTest {
  @Before public void setUp() throws Exception {
    setPolicy(new BroadcastAMRMProxyPolicy());
    setPolicyInfo(mock(WeightedPolicyInfo.class));
    for (int i=1; i <= 2; i++) {
      SubClusterIdInfo sc=new SubClusterIdInfo("sc" + i);
      SubClusterInfo sci=mock(SubClusterInfo.class);
      when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);
      when(sci.getSubClusterId()).thenReturn(sc.toId());
      getActiveSubclusters().put(sc.toId(),sci);
    }
    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(),mock(WeightedPolicyInfo.class),getActiveSubclusters());
  }
  @Test public void testSplitAllocateRequest() throws Exception {
    String[] hosts=new String[]{"host1","host2"};
    List<ResourceRequest> resourceRequests=FederationPoliciesTestUtil.createResourceRequests(hosts,2 * 1024,2,1,3,null,false);
    Map<SubClusterId,List<ResourceRequest>> response=((FederationAMRMProxyPolicy)getPolicy()).splitResourceRequests(resourceRequests);
    Assert.assertTrue(response.size() == 2);
    for (    Map.Entry<SubClusterId,List<ResourceRequest>> entry : response.entrySet()) {
      Assert.assertTrue(getActiveSubclusters().get(entry.getKey()) != null);
      for (      ResourceRequest r : entry.getValue()) {
        Assert.assertTrue(resourceRequests.contains(r));
      }
    }
    for (    SubClusterId subClusterId : getActiveSubclusters().keySet()) {
      for (      ResourceRequest r : response.get(subClusterId)) {
        Assert.assertTrue(resourceRequests.contains(r));
      }
    }
  }
  @Test public void testNotifyOfResponse() throws Exception {
    String[] hosts=new String[]{"host1","host2"};
    List<ResourceRequest> resourceRequests=FederationPoliciesTestUtil.createResourceRequests(hosts,2 * 1024,2,1,3,null,false);
    Map<SubClusterId,List<ResourceRequest>> response=((FederationAMRMProxyPolicy)getPolicy()).splitResourceRequests(resourceRequests);
    try {
      ((FederationAMRMProxyPolicy)getPolicy()).notifyOfResponse(SubClusterId.newInstance("sc3"),mock(AllocateResponse.class));
      Assert.fail();
    }
 catch (    FederationPolicyException f) {
      System.out.println("Expected: " + f.getMessage());
    }
    ((FederationAMRMProxyPolicy)getPolicy()).notifyOfResponse(SubClusterId.newInstance("sc1"),mock(AllocateResponse.class));
  }
}
