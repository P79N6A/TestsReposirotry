class JHEvenHandlerForTest extends JobHistoryEventHandler {
  private EventWriter eventWriter;
  private boolean mockHistoryProcessing=true;
  private DrainDispatcher dispatcher;
  public JHEvenHandlerForTest(  AppContext context,  int startCount){
    super(context,startCount);
    JobHistoryEventHandler.fileMap.clear();
  }
  public JHEvenHandlerForTest(  AppContext context,  int startCount,  boolean mockHistoryProcessing){
    super(context,startCount);
    this.mockHistoryProcessing=mockHistoryProcessing;
    JobHistoryEventHandler.fileMap.clear();
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    super.serviceInit(conf);
  }
  @Override protected void serviceStart(){
    if (timelineClient != null) {
      timelineClient.start();
    }
 else     if (timelineV2Client != null) {
      timelineV2Client.start();
    }
    if (handleTimelineEvent) {
      atsEventDispatcher.start();
    }
  }
  @Override protected AsyncDispatcher createDispatcher(){
    dispatcher=new DrainDispatcher();
    return dispatcher;
  }
  public DrainDispatcher getDispatcher(){
    return dispatcher;
  }
  @Override protected EventWriter createEventWriter(  Path historyFilePath) throws IOException {
    if (mockHistoryProcessing) {
      this.eventWriter=mock(EventWriter.class);
    }
 else {
      this.eventWriter=super.createEventWriter(historyFilePath);
    }
    return this.eventWriter;
  }
  @Override protected void closeEventWriter(  JobId jobId){
  }
  public EventWriter getEventWriter(){
    return this.eventWriter;
  }
  @Override protected void processDoneFiles(  JobId jobId) throws IOException {
    if (!mockHistoryProcessing) {
      super.processDoneFiles(jobId);
    }
 else {
    }
  }
}
