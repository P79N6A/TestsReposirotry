/** 
 * Test  {@link org.apache.hadoop.fs.s3a.commit.staging.Paths}.
 */
public class TestPaths extends HadoopTestBase {
  @Test public void testUUIDPart(){
    assertUUIDAdded("/part-0000","/part-0000-UUID");
  }
  @Test public void testUUIDPartSuffix(){
    assertUUIDAdded("/part-0000.gz.csv","/part-0000-UUID.gz.csv");
  }
  @Test public void testUUIDDottedPath(){
    assertUUIDAdded("/parent.dir/part-0000","/parent.dir/part-0000-UUID");
  }
  @Test public void testUUIDPartUUID(){
    assertUUIDAdded("/part-0000-UUID.gz.csv","/part-0000-UUID.gz.csv");
  }
  @Test public void testUUIDParentUUID(){
    assertUUIDAdded("/UUID/part-0000.gz.csv","/UUID/part-0000.gz.csv");
  }
  @Test public void testUUIDDir() throws Throwable {
    intercept(IllegalStateException.class,() -> addUUID("/dest/","UUID"));
  }
  @Test public void testUUIDEmptyDir() throws Throwable {
    intercept(IllegalArgumentException.class,() -> addUUID("","UUID"));
  }
  @Test public void testEmptyUUID() throws Throwable {
    intercept(IllegalArgumentException.class,() -> addUUID("part-0000.gz",""));
  }
  private void assertUUIDAdded(  String path,  String expected){
    assertEquals("from " + path,expected,addUUID(path,"UUID"));
  }
  private static final String DATA="s3a://landsat-pds/data/";
  private static final Path BASE=new Path(DATA);
  @Test public void testRelativizeOneLevel(){
    String suffix="year=2017";
    Path path=new Path(DATA + suffix);
    assertEquals(suffix,getRelativePath(BASE,path));
  }
  @Test public void testRelativizeTwoLevel(){
    String suffix="year=2017/month=10";
    Path path=path(BASE,suffix);
    assertEquals(suffix,getRelativePath(BASE,path));
  }
  @Test public void testRelativizeSelf(){
    assertEquals("",getRelativePath(BASE,BASE));
  }
  @Test public void testRelativizeParent(){
    assertEquals("/",getRelativePath(BASE,BASE.getParent()));
  }
  @Test public void testGetPartition(){
    assertEquals("year=2017/month=10",getPartition("year=2017/month=10/part-0000.avro"));
  }
  @Test public void testMPUCommitDir() throws Throwable {
    Configuration conf=new Configuration();
    LocalFileSystem localFS=FileSystem.getLocal(conf);
    Path dir=getMultipartUploadCommitsDirectory(localFS,conf,"UUID");
    assertTrue(dir.toString().endsWith("UUID/" + StagingCommitterConstants.STAGING_UPLOADS));
  }
}
