/** 
 * Unit tests for ResponseBuffer. 
 */
public class TestResponseBuffer {
  @Test public void testBuffer() throws IOException {
    final int startSize=8;
    final String empty="";
    ResponseBuffer buf=new ResponseBuffer(startSize);
    assertEquals(startSize,buf.capacity());
    checkBuffer(buf,empty);
    buf.writeBytes(empty);
    checkBuffer(buf,empty);
    String s1="testing123";
    buf.writeBytes(s1);
    checkBuffer(buf,s1);
    String s2="456!";
    buf.writeBytes(s2);
    checkBuffer(buf,s1 + s2);
    int length=buf.capacity();
    buf.reset();
    assertEquals(length,buf.capacity());
    checkBuffer(buf,empty);
    buf.setCapacity(startSize);
    assertEquals(startSize,buf.capacity());
    checkBuffer(buf,empty);
    buf.writeBytes(s1);
    checkBuffer(buf,s1);
    buf.writeBytes(s2);
    checkBuffer(buf,s1 + s2);
  }
  private void checkBuffer(  ResponseBuffer buf,  String expected) throws IOException {
    int expectedLength=expected.getBytes().length;
    assertEquals(expectedLength,buf.size());
    byte[] framed=buf.toByteArray();
    assertEquals(expectedLength + 4,framed.length);
    DataInputStream dis=new DataInputStream(new ByteArrayInputStream(framed));
    assertEquals(expectedLength,dis.readInt());
    assertEquals(expectedLength,dis.available());
    byte[] payload=new byte[expectedLength];
    dis.readFully(payload);
    assertEquals(expected,new String(payload));
  }
}
