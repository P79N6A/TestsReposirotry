/** 
 * Test  {@link UserGroupInformation} with a minikdc.
 */
public class TestUGIWithMiniKdc {
  private static MiniKdc kdc;
  @After public void teardown(){
    UserGroupInformation.reset();
    if (kdc != null) {
      kdc.stop();
    }
  }
  private void setupKdc() throws Exception {
    Properties kdcConf=MiniKdc.createConf();
    kdcConf.setProperty(MiniKdc.MAX_TICKET_LIFETIME,"2");
    kdcConf.setProperty(MiniKdc.MIN_TICKET_LIFETIME,"2");
    File kdcDir=new File(System.getProperty("test.dir","target"));
    kdc=new MiniKdc(kdcConf,kdcDir);
    kdc.start();
  }
  @Test(timeout=120000) public void testAutoRenewalThreadRetryWithKdc() throws Exception {
    GenericTestUtils.setLogLevel(UserGroupInformation.LOG,Level.DEBUG);
    final Configuration conf=new Configuration();
    conf.set("hadoop.kerberos.kinit.command","bogus-kinit-cmd");
    conf.setLong(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,1);
    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS,conf);
    UserGroupInformation.setConfiguration(conf);
    LoginContext loginContext=null;
    try {
      final String principal="foo";
      final File workDir=new File(System.getProperty("test.dir","target"));
      final File keytab=new File(workDir,"foo.keytab");
      final Set<Principal> principals=new HashSet<>();
      principals.add(new KerberosPrincipal(principal));
      setupKdc();
      kdc.createPrincipal(keytab,principal);
      UserGroupInformation.loginUserFromKeytab(principal,keytab.getPath());
      UserGroupInformation ugi=UserGroupInformation.getLoginUser();
      ugi.spawnAutoRenewalThreadForUserCreds(true);
      LambdaTestUtils.await(30000,500,() -> {
        final int count=UserGroupInformation.metrics.getRenewalFailures().value();
        UserGroupInformation.LOG.info("Renew failure count is {}",count);
        return count > 0;
      }
);
    }
  finally {
      if (loginContext != null) {
        loginContext.logout();
      }
    }
  }
}
