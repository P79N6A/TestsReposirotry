/** 
 * Tests for class  {@link RouterQuotaManager}.
 */
public class TestRouterQuotaManager {
  private static RouterQuotaManager manager;
  @Before public void setup(){
    manager=new RouterQuotaManager();
  }
  @After public void cleanup(){
    manager.clear();
  }
  @Test public void testGetChildrenPaths(){
    RouterQuotaUsage quotaUsage=new RouterQuotaUsage.Builder().build();
    manager.put("/path1",quotaUsage);
    manager.put("/path2",quotaUsage);
    manager.put("/path1/subdir",quotaUsage);
    manager.put("/path1/subdir/subdir",quotaUsage);
    Set<String> childrenPaths=manager.getPaths("/path1");
    assertEquals(3,childrenPaths.size());
    assertTrue(childrenPaths.contains("/path1/subdir") && childrenPaths.contains("/path1/subdir/subdir") && childrenPaths.contains("/path1"));
    manager.put("/path3",quotaUsage);
    manager.put("/path3/subdir",quotaUsage);
    manager.put("/path3-subdir",quotaUsage);
    childrenPaths=manager.getPaths("/path3");
    assertEquals(2,childrenPaths.size());
    assertTrue(childrenPaths.contains("/path3") && childrenPaths.contains("/path3/subdir") && !childrenPaths.contains("/path3-subdir"));
  }
  @Test public void testGetQuotaUsage(){
    RouterQuotaUsage quotaGet;
    quotaGet=manager.getQuotaUsage("/non-exist-path");
    assertNull(quotaGet);
    RouterQuotaUsage.Builder quota=new RouterQuotaUsage.Builder().quota(HdfsConstants.QUOTA_RESET).spaceQuota(HdfsConstants.QUOTA_RESET);
    manager.put("/noQuotaSet",quota.build());
    quotaGet=manager.getQuotaUsage("/noQuotaSet");
    assertNull(quotaGet);
    quota.quota(1);
    quota.spaceQuota(HdfsConstants.QUOTA_RESET);
    manager.put("/hasQuotaSet",quota.build());
    quotaGet=manager.getQuotaUsage("/hasQuotaSet");
    assertEquals(1,quotaGet.getQuota());
    assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
    quotaGet=manager.getQuotaUsage("/hasQuotaSet/file");
    assertEquals(1,quotaGet.getQuota());
    assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
    quota.quota(HdfsConstants.QUOTA_RESET);
    quota.spaceQuota(HdfsConstants.QUOTA_RESET);
    manager.put("/hasQuotaSet/noQuotaSet",quota.build());
    quotaGet=manager.getQuotaUsage("/hasQuotaSet/noQuotaSet/file");
    assertEquals(1,quotaGet.getQuota());
    assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
    quota.quota(2);
    quota.spaceQuota(HdfsConstants.QUOTA_RESET);
    manager.put("/hasQuotaSet/hasQuotaSet",quota.build());
    quotaGet=manager.getQuotaUsage("/hasQuotaSet/hasQuotaSet/file");
    assertEquals(2,quotaGet.getQuota());
    assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
  }
}
