@SuppressWarnings({"rawtypes"}) public class TestReservationSystem extends ParameterizedSchedulerTestBase {
  private final static String ALLOC_FILE=new File(FairSchedulerTestBase.TEST_DIR,TestReservationSystem.class.getName() + ".xml").getAbsolutePath();
  private AbstractYarnScheduler scheduler;
  private AbstractReservationSystem reservationSystem;
  private RMContext rmContext;
  private Configuration conf;
  private RMContext mockRMContext;
  public TestReservationSystem(  SchedulerType type) throws IOException {
    super(type);
  }
  @Before public void setUp() throws IOException {
    scheduler=initializeScheduler();
    rmContext=getRMContext();
    reservationSystem=configureReservationSystem();
    reservationSystem.setRMContext(rmContext);
    DefaultMetricsSystem.setMiniClusterMode(true);
  }
  @After public void tearDown(){
    conf=null;
    reservationSystem=null;
    rmContext=null;
    scheduler=null;
    clearRMContext();
    QueueMetrics.clearQueueMetrics();
  }
  @Test public void testInitialize() throws IOException {
    try {
      reservationSystem.reinitialize(scheduler.getConfig(),rmContext);
    }
 catch (    YarnException e) {
      Assert.fail(e.getMessage());
    }
    if (getSchedulerType().equals(SchedulerType.CAPACITY)) {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,ReservationSystemTestUtil.getReservationQueueName());
    }
 else {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,ReservationSystemTestUtil.getFullReservationQueueName());
    }
  }
  @Test public void testReinitialize() throws IOException {
    conf=scheduler.getConfig();
    try {
      reservationSystem.reinitialize(conf,rmContext);
    }
 catch (    YarnException e) {
      Assert.fail(e.getMessage());
    }
    if (getSchedulerType().equals(SchedulerType.CAPACITY)) {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,ReservationSystemTestUtil.getReservationQueueName());
    }
 else {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,ReservationSystemTestUtil.getFullReservationQueueName());
    }
    String newQ="reservation";
    Assert.assertNull(reservationSystem.getPlan(newQ));
    updateSchedulerConf(conf,newQ);
    try {
      scheduler.reinitialize(conf,rmContext);
    }
 catch (    IOException e) {
      Assert.fail(e.getMessage());
    }
    try {
      reservationSystem.reinitialize(conf,rmContext);
    }
 catch (    YarnException e) {
      Assert.fail(e.getMessage());
    }
    if (getSchedulerType().equals(SchedulerType.CAPACITY)) {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,newQ);
    }
 else {
      ReservationSystemTestUtil.validateReservationQueue(reservationSystem,"root." + newQ);
    }
  }
  @SuppressWarnings("rawtypes") public AbstractYarnScheduler initializeScheduler() throws IOException {
switch (getSchedulerType()) {
case CAPACITY:
      return initializeCapacityScheduler();
case FAIR:
    return initializeFairScheduler();
}
return null;
}
public AbstractReservationSystem configureReservationSystem(){
switch (getSchedulerType()) {
case CAPACITY:
  return new CapacityReservationSystem();
case FAIR:
return new FairReservationSystem();
}
return null;
}
public void updateSchedulerConf(Configuration conf,String newQ) throws IOException {
switch (getSchedulerType()) {
case CAPACITY:
ReservationSystemTestUtil.updateQueueConfiguration((CapacitySchedulerConfiguration)conf,newQ);
case FAIR:
ReservationSystemTestUtil.updateFSAllocationFile(ALLOC_FILE);
}
}
public RMContext getRMContext(){
return mockRMContext;
}
public void clearRMContext(){
mockRMContext=null;
}
private CapacityScheduler initializeCapacityScheduler(){
CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
ReservationSystemTestUtil.setupQueueConfiguration(conf);
CapacityScheduler cs=Mockito.spy(new CapacityScheduler());
cs.setConf(conf);
mockRMContext=ReservationSystemTestUtil.createRMContext(conf);
cs.setRMContext(mockRMContext);
try {
cs.serviceInit(conf);
}
 catch (Exception e) {
Assert.fail(e.getMessage());
}
ReservationSystemTestUtil.initializeRMContext(10,cs,mockRMContext);
return cs;
}
private Configuration createFSConfiguration(){
FairSchedulerTestBase testHelper=new FairSchedulerTestBase();
Configuration conf=testHelper.createConfiguration();
conf.setClass(YarnConfiguration.RM_SCHEDULER,FairScheduler.class,ResourceScheduler.class);
conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
return conf;
}
private FairScheduler initializeFairScheduler() throws IOException {
Configuration conf=createFSConfiguration();
ReservationSystemTestUtil.setupFSAllocationFile(ALLOC_FILE);
mockRMContext=ReservationSystemTestUtil.createRMContext(conf);
return ReservationSystemTestUtil.setupFairScheduler(mockRMContext,conf,10);
}
}
