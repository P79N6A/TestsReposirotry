public class TestKDiagNoKDC extends Assert {
  private static final Logger LOG=LoggerFactory.getLogger(TestKDiagNoKDC.class);
  public static final String KEYLEN="128";
  @Rule public TestName methodName=new TestName();
  @Rule public Timeout testTimeout=new Timeout(30000);
  @BeforeClass public static void nameThread(){
    Thread.currentThread().setName("JUnit");
  }
  private static Configuration conf=new Configuration();
  @Before public void reset(){
    UserGroupInformation.reset();
  }
  /** 
 * Exec KDiag and expect a failure of a given category
 * @param category category
 * @param args args list
 * @throws Exception any unexpected exception
 */
  void kdiagFailure(  String category,  String... args) throws Exception {
    try {
      int ex=exec(conf,args);
      LOG.error("Expected an exception in category {}, return code {}",category,ex);
    }
 catch (    KerberosDiagsFailure e) {
      if (!e.getCategory().equals(category)) {
        LOG.error("Expected an exception in category {}, got {}",category,e,e);
        throw e;
      }
    }
  }
  int kdiag(  String... args) throws Exception {
    return KDiag.exec(conf,args);
  }
  /** 
 * Test that the core kdiag command works when there's no KDC around. This test produces different outcomes on hosts where there is a default KDC -it needs to work on hosts without kerberos as well as those with it.
 * @throws Throwable
 */
  @Test public void testKDiagStandalone() throws Throwable {
    kdiagFailure(CAT_LOGIN,ARG_KEYLEN,KEYLEN);
  }
  @Test public void testKDiagNoLogin() throws Throwable {
    kdiagFailure(CAT_LOGIN,ARG_KEYLEN,KEYLEN,ARG_NOLOGIN);
  }
  @Test public void testKDiagStandaloneNofail() throws Throwable {
    kdiag(ARG_KEYLEN,KEYLEN,ARG_NOFAIL);
  }
  @Test public void testKDiagUsage() throws Throwable {
    assertEquals(-1,kdiag("usage"));
  }
  @Test public void testTokenFile() throws Throwable {
    conf.set(HADOOP_TOKEN_FILES,"SomeNonExistentFile");
    kdiagFailure(CAT_TOKEN,ARG_KEYLEN,KEYLEN);
    conf.unset(HADOOP_TOKEN_FILES);
  }
}
