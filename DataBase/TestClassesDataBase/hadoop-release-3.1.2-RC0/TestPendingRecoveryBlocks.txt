/** 
 * This class contains unit tests for PendingRecoveryBlocks.java functionality.
 */
public class TestPendingRecoveryBlocks {
  private PendingRecoveryBlocks pendingRecoveryBlocks;
  private final long recoveryTimeout=1000L;
  private final BlockInfo blk1=getBlock(1);
  private final BlockInfo blk2=getBlock(2);
  private final BlockInfo blk3=getBlock(3);
  @Before public void setUp(){
    pendingRecoveryBlocks=Mockito.spy(new PendingRecoveryBlocks(recoveryTimeout));
  }
  BlockInfo getBlock(  long blockId){
    return new BlockInfoContiguous(new Block(blockId),(short)0);
  }
  @Test public void testAddDifferentBlocks(){
    assertTrue(pendingRecoveryBlocks.add(blk1));
    assertTrue(pendingRecoveryBlocks.isUnderRecovery(blk1));
    assertTrue(pendingRecoveryBlocks.add(blk2));
    assertTrue(pendingRecoveryBlocks.isUnderRecovery(blk2));
    assertTrue(pendingRecoveryBlocks.add(blk3));
    assertTrue(pendingRecoveryBlocks.isUnderRecovery(blk3));
  }
  @Test public void testAddAndRemoveBlocks(){
    assertTrue(pendingRecoveryBlocks.add(blk1));
    assertTrue(pendingRecoveryBlocks.add(blk2));
    pendingRecoveryBlocks.remove(blk1);
    assertTrue(pendingRecoveryBlocks.add(blk1));
  }
  @Test public void testAddBlockWithPreviousRecoveryTimedOut(){
    Mockito.doReturn(0L).when(pendingRecoveryBlocks).getTime();
    assertTrue(pendingRecoveryBlocks.add(blk1));
    Mockito.doReturn(recoveryTimeout / 2).when(pendingRecoveryBlocks).getTime();
    assertFalse(pendingRecoveryBlocks.add(blk1));
    Mockito.doReturn(recoveryTimeout * 2).when(pendingRecoveryBlocks).getTime();
    assertTrue(pendingRecoveryBlocks.add(blk1));
  }
}
