public static class SocketFactoryWrapper extends StandardSocketFactory {
  private static List<SocketWrapper> sockets=new ArrayList<SocketWrapper>();
  public static boolean wasTcpNoDelayActive(){
    LOG.info("Checking " + sockets.size() + " sockets for TCP_NODELAY");
    for (    SocketWrapper sw : sockets) {
      if (!sw.getLastTcpNoDelay()) {
        return false;
      }
    }
    return true;
  }
  public static void reset(){
    sockets=new ArrayList<>();
  }
  @Override public Socket createSocket() throws IOException {
    LOG.info("Creating new socket");
    SocketWrapper wrapper=new SocketWrapper(super.createSocket());
    sockets.add(wrapper);
    return wrapper;
  }
  @Override public Socket createSocket(  String host,  int port) throws IOException, UnknownHostException {
    LOG.info("Creating socket for " + host);
    SocketWrapper wrapper=new SocketWrapper(super.createSocket(host,port));
    sockets.add(wrapper);
    return wrapper;
  }
  @Override public Socket createSocket(  String host,  int port,  InetAddress localHostAddr,  int localPort) throws IOException, UnknownHostException {
    LOG.info("Creating socket for " + host);
    SocketWrapper wrapper=new SocketWrapper(super.createSocket(host,port,localHostAddr,localPort));
    sockets.add(wrapper);
    return wrapper;
  }
  @Override public Socket createSocket(  InetAddress addr,  int port) throws IOException {
    LOG.info("Creating socket for " + addr);
    SocketWrapper wrapper=new SocketWrapper(super.createSocket(addr,port));
    sockets.add(wrapper);
    return wrapper;
  }
  @Override public Socket createSocket(  InetAddress addr,  int port,  InetAddress localHostAddr,  int localPort) throws IOException {
    LOG.info("Creating socket for " + addr);
    SocketWrapper wrapper=new SocketWrapper(super.createSocket(addr,port,localHostAddr,localPort));
    sockets.add(wrapper);
    return wrapper;
  }
}
