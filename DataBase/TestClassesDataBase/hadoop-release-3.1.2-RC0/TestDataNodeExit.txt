/** 
 * Tests if DataNode process exits if all Block Pool services exit. 
 */
public class TestDataNodeExit {
  private static final long WAIT_TIME_IN_MILLIS=10;
  Configuration conf;
  MiniDFSCluster cluster=null;
  @Before public void setUp() throws IOException {
    conf=new HdfsConfiguration();
    conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,100);
    conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,100);
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(3)).build();
    for (int i=0; i < 3; i++) {
      cluster.waitActive(i);
    }
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  private void stopBPServiceThreads(  int numStopThreads,  DataNode dn) throws Exception {
    List<BPOfferService> bpoList=dn.getAllBpOs();
    int expected=dn.getBpOsCount() - numStopThreads;
    int index=numStopThreads - 1;
    while (index >= 0) {
      bpoList.get(index--).stop();
    }
    int iterations=3000;
    while (dn.getBpOsCount() != expected && iterations > 0) {
      Thread.sleep(WAIT_TIME_IN_MILLIS);
      iterations--;
    }
    assertEquals("Mismatch in number of BPServices running",expected,dn.getBpOsCount());
  }
  /** 
 * Test BPService Thread Exit
 */
  @Test public void testBPServiceExit() throws Exception {
    DataNode dn=cluster.getDataNodes().get(0);
    stopBPServiceThreads(1,dn);
    assertTrue("DataNode should not exit",dn.isDatanodeUp());
    stopBPServiceThreads(2,dn);
    assertFalse("DataNode should exit",dn.isDatanodeUp());
  }
  @Test public void testSendOOBToPeers() throws Exception {
    DataNode dn=cluster.getDataNodes().get(0);
    DataXceiverServer spyXserver=Mockito.spy(dn.getXferServer());
    NullPointerException npe=new NullPointerException();
    Mockito.doThrow(npe).when(spyXserver).sendOOBToPeers();
    dn.xserver=spyXserver;
    try {
      dn.shutdown();
    }
 catch (    Exception e) {
      fail("DataNode shutdown should not have thrown exception " + e);
    }
  }
}
