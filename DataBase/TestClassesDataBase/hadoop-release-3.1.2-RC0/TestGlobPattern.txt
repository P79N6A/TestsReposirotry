/** 
 * Tests for glob patterns
 */
public class TestGlobPattern {
  private void assertMatch(  boolean yes,  String glob,  String... input){
    GlobPattern pattern=new GlobPattern(glob);
    for (    String s : input) {
      boolean result=pattern.matches(s);
      assertTrue(glob + " should" + (yes ? "" : " not")+ " match "+ s,yes ? result : !result);
    }
  }
  private void shouldThrow(  String... globs){
    for (    String glob : globs) {
      try {
        GlobPattern.compile(glob);
      }
 catch (      PatternSyntaxException e) {
        e.printStackTrace();
        continue;
      }
      assertTrue("glob " + glob + " should throw",false);
    }
  }
  @Test public void testValidPatterns(){
    assertMatch(true,"*","^$","foo","bar","\n");
    assertMatch(true,"?","?","^","[","]","$");
    assertMatch(true,"foo*","foo","food","fool","foo\n","foo\nbar");
    assertMatch(true,"f*d","fud","food","foo\nd");
    assertMatch(true,"*d","good","bad","\nd");
    assertMatch(true,"\\*\\?\\[\\{\\\\","*?[{\\");
    assertMatch(true,"[]^-]","]","-","^");
    assertMatch(true,"]","]");
    assertMatch(true,"^.$()|+","^.$()|+");
    assertMatch(true,"[^^]",".","$","[","]");
    assertMatch(false,"[^^]","^");
    assertMatch(true,"[!!-]","^","?");
    assertMatch(false,"[!!-]","!","-");
    assertMatch(true,"{[12]*,[45]*,[78]*}","1","2!","4","42","7","7$");
    assertMatch(false,"{[12]*,[45]*,[78]*}","3","6","9ÃŸ");
    assertMatch(true,"}","}");
  }
  @Test public void testInvalidPatterns(){
    shouldThrow("[","[[]]","{","\\");
  }
  @Test(timeout=10000) public void testPathologicalPatterns(){
    String badFilename="job_1429571161900_4222-1430338332599-tda%2D%2D+******************************+++...%270%27%28Stage-1430338580443-39-2000-SUCCEEDED-production%2Dhigh-1430338340360.jhist";
    assertMatch(true,badFilename,badFilename);
  }
}
