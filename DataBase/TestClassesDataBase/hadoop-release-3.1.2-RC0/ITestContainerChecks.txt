/** 
 * Tests that WASB creates containers only if needed.
 */
public class ITestContainerChecks extends AbstractWasbTestWithTimeout {
  private AzureBlobStorageTestAccount testAccount;
  private boolean runningInSASMode=false;
  @After public void tearDown() throws Exception {
    testAccount=AzureTestUtils.cleanup(testAccount);
  }
  @Before public void setMode(){
    runningInSASMode=AzureBlobStorageTestAccount.createTestConfiguration().getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,false);
  }
  @Test public void testContainerExistAfterDoesNotExist() throws Exception {
    testAccount=blobStorageTestAccount();
    assumeNotNull(testAccount);
    CloudBlobContainer container=testAccount.getRealContainer();
    FileSystem fs=testAccount.getFileSystem();
    assertFalse(container.exists());
    try {
      fs.listStatus(new Path("/"));
      assertTrue("Should've thrown.",false);
    }
 catch (    FileNotFoundException ex) {
      assertTrue("Unexpected exception: " + ex,ex.getMessage().contains("is not found"));
    }
    assertFalse(container.exists());
    container.create();
    CloudBlockBlob blob=testAccount.getBlobReference("foo");
    BlobOutputStream outputStream=blob.openOutputStream();
    outputStream.write(new byte[10]);
    outputStream.close();
    assertTrue(fs.exists(new Path("/foo")));
    assertTrue(container.exists());
  }
  protected AzureBlobStorageTestAccount blobStorageTestAccount() throws Exception {
    return AzureBlobStorageTestAccount.create("",EnumSet.noneOf(CreateOptions.class));
  }
  @Test public void testContainerCreateAfterDoesNotExist() throws Exception {
    testAccount=blobStorageTestAccount();
    assumeNotNull(testAccount);
    CloudBlobContainer container=testAccount.getRealContainer();
    FileSystem fs=testAccount.getFileSystem();
    assertFalse(container.exists());
    try {
      assertNull(fs.listStatus(new Path("/")));
      assertTrue("Should've thrown.",false);
    }
 catch (    FileNotFoundException ex) {
      assertTrue("Unexpected exception: " + ex,ex.getMessage().contains("is not found"));
    }
    assertFalse(container.exists());
    container.create();
    assertTrue(fs.createNewFile(new Path("/foo")));
    assertTrue(container.exists());
  }
  @Test public void testContainerCreateOnWrite() throws Exception {
    testAccount=blobStorageTestAccount();
    assumeNotNull(testAccount);
    CloudBlobContainer container=testAccount.getRealContainer();
    FileSystem fs=testAccount.getFileSystem();
    assertFalse(container.exists());
    try {
      fs.listStatus(new Path("/"));
      assertTrue("Should've thrown.",false);
    }
 catch (    FileNotFoundException ex) {
      assertTrue("Unexpected exception: " + ex,ex.getMessage().contains("is not found"));
    }
    assertFalse(container.exists());
    Path foo=new Path("/testContainerCreateOnWrite-foo");
    Path bar=new Path("/testContainerCreateOnWrite-bar");
    LambdaTestUtils.intercept(FileNotFoundException.class,new Callable<String>(){
      @Override public String call() throws Exception {
        fs.open(foo).close();
        return "Stream to " + foo;
      }
    }
);
    assertFalse(container.exists());
    assertFalse(fs.rename(foo,bar));
    assertFalse(container.exists());
    container.create();
    assertTrue(fs.createNewFile(foo));
    assertTrue(container.exists());
  }
  @Test public void testContainerChecksWithSas() throws Exception {
    Assume.assumeFalse(runningInSASMode);
    testAccount=AzureBlobStorageTestAccount.create("",EnumSet.of(CreateOptions.UseSas));
    assumeNotNull(testAccount);
    CloudBlobContainer container=testAccount.getRealContainer();
    FileSystem fs=testAccount.getFileSystem();
    assertFalse(container.exists());
    try {
      fs.createNewFile(new Path("/testContainerChecksWithSas-foo"));
      assertFalse("Should've thrown.",true);
    }
 catch (    AzureException ex) {
    }
    assertFalse(container.exists());
  }
}
