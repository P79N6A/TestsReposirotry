/** 
 * New file creation
 */
static class FileCreation extends Modification {
  final int fileLen;
  private final HashMap<Path,FileStatus> fileStatusMap;
  FileCreation(  Path file,  FileSystem fs,  int len){
    super(file,fs,"creation");
    assert len >= 0;
    this.fileLen=len;
    fileStatusMap=new HashMap<Path,FileStatus>();
  }
  @Override void loadSnapshots() throws Exception {
    for (    Path snapshotRoot : snapshotList) {
      Path snapshotFile=SnapshotTestHelper.getSnapshotFile(snapshotRoot,file);
      if (snapshotFile != null) {
        FileStatus status=fs.exists(snapshotFile) ? fs.getFileStatus(snapshotFile) : null;
        fileStatusMap.put(snapshotFile,status);
      }
    }
  }
  @Override void modify() throws Exception {
    DFSTestUtil.createFile(fs,file,fileLen,fileLen,BLOCKSIZE,REPLICATION,seed);
  }
  @Override void checkSnapshots() throws Exception {
    for (    Path snapshotRoot : snapshotList) {
      Path snapshotFile=SnapshotTestHelper.getSnapshotFile(snapshotRoot,file);
      if (snapshotFile != null) {
        boolean computed=fs.exists(snapshotFile);
        boolean expected=fileStatusMap.get(snapshotFile) != null;
        assertEquals(expected,computed);
        if (computed) {
          FileStatus currentSnapshotStatus=fs.getFileStatus(snapshotFile);
          FileStatus originalStatus=fileStatusMap.get(snapshotFile);
          assertEquals(currentSnapshotStatus.toString(),originalStatus.toString());
        }
      }
    }
  }
}
