public static class TestTokenIdentifier extends TokenIdentifier {
  private Text tokenid;
  private Text realUser;
  final static Text KIND_NAME=new Text("test.token");
  public TestTokenIdentifier(){
    this(new Text(),new Text());
  }
  public TestTokenIdentifier(  Text tokenid){
    this(tokenid,new Text());
  }
  public TestTokenIdentifier(  Text tokenid,  Text realUser){
    this.tokenid=tokenid == null ? new Text() : tokenid;
    this.realUser=realUser == null ? new Text() : realUser;
  }
  @Override public Text getKind(){
    return KIND_NAME;
  }
  @Override public UserGroupInformation getUser(){
    if (realUser.toString().isEmpty()) {
      return UserGroupInformation.createRemoteUser(tokenid.toString());
    }
 else {
      UserGroupInformation realUgi=UserGroupInformation.createRemoteUser(realUser.toString());
      return UserGroupInformation.createProxyUser(tokenid.toString(),realUgi);
    }
  }
  @Override public void readFields(  DataInput in) throws IOException {
    tokenid.readFields(in);
    realUser.readFields(in);
  }
  @Override public void write(  DataOutput out) throws IOException {
    tokenid.write(out);
    realUser.write(out);
  }
}
