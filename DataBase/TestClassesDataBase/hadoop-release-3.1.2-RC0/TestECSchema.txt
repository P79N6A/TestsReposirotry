public class TestECSchema {
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @Test public void testGoodSchema(){
    int numDataUnits=6;
    int numParityUnits=3;
    String codec="rs";
    String extraOption="extraOption";
    String extraOptionValue="extraOptionValue";
    Map<String,String> options=new HashMap<String,String>();
    options.put(ECSchema.NUM_DATA_UNITS_KEY,String.valueOf(numDataUnits));
    options.put(ECSchema.NUM_PARITY_UNITS_KEY,String.valueOf(numParityUnits));
    options.put(ECSchema.CODEC_NAME_KEY,codec);
    options.put(extraOption,extraOptionValue);
    ECSchema schema=new ECSchema(options);
    System.out.println(schema.toString());
    assertEquals(numDataUnits,schema.getNumDataUnits());
    assertEquals(numParityUnits,schema.getNumParityUnits());
    assertEquals(codec,schema.getCodecName());
    assertEquals(extraOptionValue,schema.getExtraOptions().get(extraOption));
    Map<String,String> extraMap=new TreeMap<>();
    extraMap.put(extraOption,extraOptionValue);
    ECSchema sameSchema=new ECSchema(codec,numDataUnits,numParityUnits,extraMap);
    assertEquals("Different constructors not equal",sameSchema,schema);
  }
  @Test public void testEqualsAndHashCode(){
    Map<String,String> extraMap=new TreeMap<>();
    extraMap.put("key","value");
    ECSchema[] schemas=new ECSchema[]{new ECSchema("one",1,2,null),new ECSchema("two",1,2,null),new ECSchema("one",2,2,null),new ECSchema("one",1,1,null),new ECSchema("one",1,2,extraMap)};
    for (int i=0; i < schemas.length; i++) {
      final ECSchema ei=schemas[i];
      ECSchema temp=new ECSchema(ei.getCodecName(),ei.getNumDataUnits(),ei.getNumParityUnits(),ei.getExtraOptions());
      assertEquals(ei,temp);
      assertEquals(ei.hashCode(),temp.hashCode());
      for (int j=0; j < schemas.length; j++) {
        final ECSchema ej=schemas[j];
        if (i == j) {
          assertEquals(ei,ej);
          assertEquals(ei.hashCode(),ej.hashCode());
        }
 else {
          assertNotEquals(ei,ej);
          assertNotEquals(ei,ej.hashCode());
        }
      }
    }
  }
}
