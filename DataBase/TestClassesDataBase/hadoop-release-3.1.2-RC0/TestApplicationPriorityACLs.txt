public class TestApplicationPriorityACLs extends ACLsTestBase {
  private final int defaultPriorityQueueA=3;
  private final int defaultPriorityQueueB=10;
  private final int maxPriorityQueueA=5;
  private final int maxPriorityQueueB=11;
  private final int clusterMaxPriority=10;
  @Test public void testApplicationACLs() throws Exception {
    verifyAppSubmitWithPrioritySuccess(QUEUE_A_USER,QUEUEA,5);
    verifyAppSubmitWithPriorityFailure(QUEUE_A_USER,QUEUEA,6);
    verifyAppSubmitWithPrioritySuccess(QUEUE_A_USER,QUEUEA,-1);
    verifyAppSubmitWithPrioritySuccess(QUEUE_B_USER,QUEUEB,11);
  }
  private void verifyAppSubmitWithPrioritySuccess(  String submitter,  String queueName,  int priority) throws Exception {
    Priority appPriority=null;
    if (priority > 0) {
      appPriority=Priority.newInstance(priority);
    }
 else {
      priority=defaultPriorityQueueA;
    }
    ApplicationSubmissionContext submissionContext=prepareForAppSubmission(submitter,queueName,appPriority);
    submitAppToRMWithValidAcl(submitter,submissionContext);
    verifyAppPriorityIsAccepted(submitter,submissionContext.getApplicationId(),priority);
  }
  private void verifyAppSubmitWithPriorityFailure(  String submitter,  String queueName,  int priority) throws Exception {
    Priority appPriority=Priority.newInstance(priority);
    ApplicationSubmissionContext submissionContext=prepareForAppSubmission(submitter,queueName,appPriority);
    submitAppToRMWithInValidAcl(submitter,submissionContext);
  }
  private ApplicationSubmissionContext prepareForAppSubmission(  String submitter,  String queueName,  Priority priority) throws Exception {
    GetNewApplicationRequest newAppRequest=GetNewApplicationRequest.newInstance();
    ApplicationClientProtocol submitterClient=getRMClientForUser(submitter);
    ApplicationId applicationId=submitterClient.getNewApplication(newAppRequest).getApplicationId();
    Resource resource=BuilderUtils.newResource(1024,1);
    ContainerLaunchContext amContainerSpec=ContainerLaunchContext.newInstance(null,null,null,null,null,null);
    ApplicationSubmissionContext appSubmissionContext=ApplicationSubmissionContext.newInstance(applicationId,"applicationName",queueName,null,amContainerSpec,false,true,1,resource,"applicationType");
    appSubmissionContext.setApplicationId(applicationId);
    appSubmissionContext.setQueue(queueName);
    if (null != priority) {
      appSubmissionContext.setPriority(priority);
    }
    return appSubmissionContext;
  }
  private void submitAppToRMWithValidAcl(  String submitter,  ApplicationSubmissionContext appSubmissionContext) throws YarnException, IOException, InterruptedException {
    ApplicationClientProtocol submitterClient=getRMClientForUser(submitter);
    SubmitApplicationRequest submitRequest=SubmitApplicationRequest.newInstance(appSubmissionContext);
    submitterClient.submitApplication(submitRequest);
    resourceManager.waitForState(appSubmissionContext.getApplicationId(),RMAppState.ACCEPTED);
  }
  private void submitAppToRMWithInValidAcl(  String submitter,  ApplicationSubmissionContext appSubmissionContext) throws YarnException, IOException, InterruptedException {
    ApplicationClientProtocol submitterClient=getRMClientForUser(submitter);
    SubmitApplicationRequest submitRequest=SubmitApplicationRequest.newInstance(appSubmissionContext);
    try {
      submitterClient.submitApplication(submitRequest);
    }
 catch (    YarnException ex) {
      Assert.assertTrue(ex.getCause() instanceof RemoteException);
    }
  }
  private void verifyAppPriorityIsAccepted(  String submitter,  ApplicationId applicationId,  int priority) throws IOException, InterruptedException {
    ApplicationClientProtocol submitterClient=getRMClientForUser(submitter);
    if (priority > clusterMaxPriority) {
      priority=clusterMaxPriority;
    }
    GetApplicationReportRequest request=GetApplicationReportRequest.newInstance(applicationId);
    try {
      GetApplicationReportResponse response=submitterClient.getApplicationReport(request);
      Assert.assertEquals(response.getApplicationReport().getPriority(),Priority.newInstance(priority));
    }
 catch (    YarnException e) {
      Assert.fail("Application submission should not fail.");
    }
  }
  @Override protected Configuration createConfiguration(){
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{QUEUEA,QUEUEB,QUEUEC});
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,50f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,25f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEC,25f);
    String[] aclsForA=new String[2];
    aclsForA[0]=QUEUE_A_USER;
    aclsForA[1]=QUEUE_A_GROUP;
    csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(maxPriorityQueueA),Priority.newInstance(defaultPriorityQueueA),aclsForA);
    String[] aclsForB=new String[2];
    aclsForB[0]=QUEUE_B_USER;
    aclsForB[1]=QUEUE_B_GROUP;
    csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,Priority.newInstance(maxPriorityQueueB),Priority.newInstance(defaultPriorityQueueB),aclsForB);
    csConf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
    csConf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getName());
    return csConf;
  }
}
