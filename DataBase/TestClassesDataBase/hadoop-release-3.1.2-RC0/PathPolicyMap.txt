private static class PathPolicyMap {
  final Map<Path,BlockStoragePolicy> map=Maps.newHashMap();
  final Path hot=new Path("/hot");
  final Path warm=new Path("/warm");
  final Path cold=new Path("/cold");
  final List<Path> files;
  PathPolicyMap(  int filesPerDir){
    map.put(hot,HOT);
    map.put(warm,WARM);
    map.put(cold,COLD);
    files=new ArrayList<Path>();
    for (    Path dir : map.keySet()) {
      for (int i=0; i < filesPerDir; i++) {
        files.add(new Path(dir,"file" + i));
      }
    }
  }
  NamespaceScheme newNamespaceScheme(){
    return new NamespaceScheme(Arrays.asList(hot,warm,cold),files,BLOCK_SIZE / 2,null,map);
  }
  /** 
 * Move hot files to warm and cold, warm files to hot and cold, and cold files to hot and warm.
 */
  void moveAround(  DistributedFileSystem dfs) throws Exception {
    for (    Path srcDir : map.keySet()) {
      int i=0;
      for (      Path dstDir : map.keySet()) {
        if (!srcDir.equals(dstDir)) {
          final Path src=new Path(srcDir,"file" + i++);
          final Path dst=new Path(dstDir,srcDir.getName() + "2" + dstDir.getName());
          LOG.info("rename " + src + " to "+ dst);
          dfs.rename(src,dst);
        }
      }
    }
  }
}
