/** 
 * QueueManager tests that require a real scheduler
 */
public class TestQueueManagerRealScheduler extends FairSchedulerTestBase {
  private final static File ALLOC_FILE=new File(TEST_DIR,"test-queue-mgr");
  @Before public void setup() throws IOException {
    createConfiguration();
    writeAllocFile(30,40);
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE.getAbsolutePath());
    resourceManager=new MockRM(conf);
    resourceManager.start();
    scheduler=(FairScheduler)resourceManager.getResourceScheduler();
  }
  @After public void teardown(){
    ALLOC_FILE.deleteOnExit();
    if (resourceManager != null) {
      resourceManager.stop();
      resourceManager=null;
    }
  }
  private void writeAllocFile(  int defaultFairShareTimeout,  int fairShareTimeout) throws IOException {
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"default\">");
    out.println("</queue>");
    out.println("<queue name=\"queueA\">");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<queue name=\"queueB1\">");
    out.println("<minSharePreemptionTimeout>5</minSharePreemptionTimeout>");
    out.println("</queue>");
    out.println("<queue name=\"queueB2\">");
    out.println("</queue>");
    out.println("</queue>");
    out.println("<queue name=\"queueC\">");
    out.println("</queue>");
    out.println("<defaultMinSharePreemptionTimeout>15" + "</defaultMinSharePreemptionTimeout>");
    out.println("<defaultFairSharePreemptionTimeout>" + +defaultFairShareTimeout + "</defaultFairSharePreemptionTimeout>");
    out.println("<fairSharePreemptionTimeout>" + fairShareTimeout + "</fairSharePreemptionTimeout>");
    out.println("</allocations>");
    out.close();
  }
  @Test public void testBackwardsCompatiblePreemptionConfiguration() throws IOException {
    QueueManager queueMgr=scheduler.getQueueManager();
    assertEquals(30000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("default").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("queueA").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("queueB").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("queueB.queueB1").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("queueB.queueB2").getFairSharePreemptionTimeout());
    assertEquals(30000,queueMgr.getQueue("queueC").getFairSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("root").getMinSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("default").getMinSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("queueA").getMinSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("queueB").getMinSharePreemptionTimeout());
    assertEquals(5000,queueMgr.getQueue("queueB.queueB1").getMinSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("queueB.queueB2").getMinSharePreemptionTimeout());
    assertEquals(15000,queueMgr.getQueue("queueC").getMinSharePreemptionTimeout());
    writeAllocFile(25,30);
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(25000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
  }
}
