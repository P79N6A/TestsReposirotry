/** 
 * Unit tests for  {@link PlacementConstraintManagerService}.
 */
public class TestPlacementConstraintManagerService {
  private PlacementConstraintManagerService pcm;
  protected PlacementConstraintManagerService createPCM(){
    return new MemoryPlacementConstraintManager();
  }
  private ApplicationId appId1, appId2;
  private PlacementConstraint c1, c2, c3, c4;
  private Set<String> sourceTag1, sourceTag2, sourceTag3, sourceTag4;
  private Map<Set<String>,PlacementConstraint> constraintMap1, constraintMap2;
  @Before public void before(){
    this.pcm=createPCM();
    long ts=System.currentTimeMillis();
    appId1=BuilderUtils.newApplicationId(ts,123);
    appId2=BuilderUtils.newApplicationId(ts,234);
    c1=PlacementConstraints.build(targetIn(NODE,allocationTag("hbase-m")));
    c2=PlacementConstraints.build(targetIn(RACK,allocationTag("hbase-rs")));
    c3=PlacementConstraints.build(targetNotIn(NODE,nodeAttribute("java","1.8")));
    c4=PlacementConstraints.build(targetCardinality(RACK,2,10,allocationTag("zk")));
    sourceTag1=new HashSet<>(Arrays.asList("spark"));
    sourceTag2=new HashSet<>(Arrays.asList("zk"));
    sourceTag3=new HashSet<>(Arrays.asList("storm"));
    sourceTag4=new HashSet<>(Arrays.asList("hbase-m","hbase-sec"));
    constraintMap1=Stream.of(new SimpleEntry<>(sourceTag1,c1),new SimpleEntry<>(sourceTag2,c2)).collect(Collectors.toMap(SimpleEntry::getKey,SimpleEntry::getValue));
    constraintMap2=Stream.of(new SimpleEntry<>(sourceTag3,c4)).collect(Collectors.toMap(SimpleEntry::getKey,SimpleEntry::getValue));
  }
  @Test public void testRegisterUnregisterApps(){
    Assert.assertEquals(0,pcm.getNumRegisteredApplications());
    pcm.registerApplication(appId1,constraintMap1);
    Assert.assertEquals(1,pcm.getNumRegisteredApplications());
    Map<Set<String>,PlacementConstraint> constrMap=pcm.getConstraints(appId1);
    Assert.assertNotNull(constrMap);
    Assert.assertEquals(2,constrMap.size());
    Assert.assertNotNull(constrMap.get(sourceTag1));
    Assert.assertNotNull(constrMap.get(sourceTag2));
    pcm.registerApplication(appId2,constraintMap2);
    Assert.assertEquals(2,pcm.getNumRegisteredApplications());
    constrMap=pcm.getConstraints(appId2);
    Assert.assertNotNull(constrMap);
    Assert.assertEquals(1,constrMap.size());
    Assert.assertNotNull(constrMap.get(sourceTag3));
    Assert.assertNull(constrMap.get(sourceTag2));
    pcm.registerApplication(appId2,constraintMap1);
    Assert.assertEquals(2,pcm.getNumRegisteredApplications());
    pcm.unregisterApplication(appId1);
    Assert.assertEquals(1,pcm.getNumRegisteredApplications());
    Assert.assertNull(pcm.getConstraints(appId1));
    Assert.assertNotNull(pcm.getConstraints(appId2));
  }
  @Test public void testAddConstraint(){
    Assert.assertEquals(0,pcm.getNumRegisteredApplications());
    pcm.addConstraint(appId1,sourceTag1,c1,false);
    Assert.assertEquals(0,pcm.getNumRegisteredApplications());
    pcm.registerApplication(appId1,new HashMap<>());
    Assert.assertEquals(1,pcm.getNumRegisteredApplications());
    Assert.assertEquals(0,pcm.getConstraints(appId1).size());
    pcm.addConstraint(appId1,sourceTag1,c1,false);
    pcm.addConstraint(appId1,sourceTag2,c3,false);
    Assert.assertEquals(2,pcm.getConstraints(appId1).size());
    pcm.addConstraint(appId1,sourceTag1,c2,false);
    Assert.assertEquals(2,pcm.getConstraints(appId1).size());
    Assert.assertEquals(c1,pcm.getConstraint(appId1,sourceTag1));
    Assert.assertNotEquals(c2,pcm.getConstraint(appId1,sourceTag1));
    pcm.addConstraint(appId1,sourceTag1,c2,true);
    Assert.assertEquals(2,pcm.getConstraints(appId1).size());
    Assert.assertEquals(c2,pcm.getConstraint(appId1,sourceTag1));
  }
  @Test public void testGlobalConstraints(){
    Assert.assertEquals(0,pcm.getNumGlobalConstraints());
    pcm.addGlobalConstraint(sourceTag1,c1,false);
    Assert.assertEquals(1,pcm.getNumGlobalConstraints());
    Assert.assertNotNull(pcm.getGlobalConstraint(sourceTag1));
    pcm.addGlobalConstraint(sourceTag1,c2,false);
    Assert.assertEquals(1,pcm.getNumGlobalConstraints());
    Assert.assertEquals(c1,pcm.getGlobalConstraint(sourceTag1));
    Assert.assertNotEquals(c2,pcm.getGlobalConstraint(sourceTag1));
    pcm.addGlobalConstraint(sourceTag1,c2,true);
    Assert.assertEquals(1,pcm.getNumGlobalConstraints());
    Assert.assertEquals(c2,pcm.getGlobalConstraint(sourceTag1));
    pcm.removeGlobalConstraint(sourceTag1);
    Assert.assertEquals(0,pcm.getNumGlobalConstraints());
  }
  @Test public void testValidateConstraint(){
    Assert.assertTrue(pcm.validateConstraint(sourceTag1,c1));
    Assert.assertFalse(pcm.validateConstraint(sourceTag4,c1));
  }
  @Test public void testGetRequestConstraint(){
    PlacementConstraint constraint;
    And mergedConstraint;
    SchedulingRequest request;
    constraint=pcm.getMultilevelConstraint(appId1,null,c1);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(1,mergedConstraint.getChildren().size());
    Assert.assertEquals(c1,mergedConstraint.getChildren().get(0).build());
    pcm.registerApplication(appId1,constraintMap1);
    constraint=pcm.getMultilevelConstraint(appId1,Sets.newHashSet("not_exist_tag"),null);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(0,mergedConstraint.getChildren().size());
    constraint=pcm.getMultilevelConstraint(appId1,sourceTag1,null);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(1,mergedConstraint.getChildren().size());
    Assert.assertEquals(c1,mergedConstraint.getChildren().get(0).build());
    pcm.unregisterApplication(appId1);
    pcm.addGlobalConstraint(sourceTag1,c1,true);
    constraint=pcm.getMultilevelConstraint(appId1,Sets.newHashSet(sourceTag1),null);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(1,mergedConstraint.getChildren().size());
    Assert.assertEquals(c1,mergedConstraint.getChildren().get(0).build());
    pcm.removeGlobalConstraint(sourceTag1);
    pcm.addGlobalConstraint(sourceTag1,c3,true);
    pcm.registerApplication(appId1,constraintMap1);
    constraint=pcm.getMultilevelConstraint(appId1,sourceTag1,c2);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(3,mergedConstraint.getChildren().size());
    pcm.removeGlobalConstraint(sourceTag1);
    pcm.unregisterApplication(appId1);
    pcm.addGlobalConstraint(sourceTag1,c2,true);
    pcm.registerApplication(appId1,constraintMap1);
    constraint=pcm.getMultilevelConstraint(appId1,Sets.newHashSet(sourceTag1),c1);
    Assert.assertTrue(constraint.getConstraintExpr() instanceof And);
    mergedConstraint=(And)constraint.getConstraintExpr();
    Assert.assertEquals(2,mergedConstraint.getChildren().size());
    pcm.removeGlobalConstraint(sourceTag1);
    pcm.unregisterApplication(appId1);
  }
}
