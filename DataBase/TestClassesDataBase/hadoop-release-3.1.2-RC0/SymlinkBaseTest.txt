/** 
 * Base test for symbolic links
 */
public abstract class SymlinkBaseTest {
static {
    FileSystem.enableSymlinks();
  }
  static final long seed=0xDEADBEEFL;
  static final int blockSize=8192;
  static final int fileSize=16384;
  static final int numBlocks=fileSize / blockSize;
  protected static FSTestWrapper wrapper;
  abstract protected String getScheme();
  abstract protected String testBaseDir1() throws IOException ;
  abstract protected String testBaseDir2() throws IOException ;
  abstract protected URI testURI();
  protected IOException unwrapException(  IOException e){
    return e;
  }
  protected static void createAndWriteFile(  Path p) throws IOException {
    createAndWriteFile(wrapper,p);
  }
  protected static void createAndWriteFile(  FSTestWrapper wrapper,  Path p) throws IOException {
    wrapper.createFile(p,numBlocks,CreateOpts.createParent(),CreateOpts.repFac((short)1),CreateOpts.blockSize(blockSize));
  }
  protected static void readFile(  Path p) throws IOException {
    wrapper.readFile(p,fileSize);
  }
  protected static void appendToFile(  Path p) throws IOException {
    wrapper.appendToFile(p,numBlocks,CreateOpts.blockSize(blockSize));
  }
  @Before public void setUp() throws Exception {
    wrapper.mkdir(new Path(testBaseDir1()),FileContext.DEFAULT_PERM,true);
    wrapper.mkdir(new Path(testBaseDir2()),FileContext.DEFAULT_PERM,true);
  }
  @After public void tearDown() throws Exception {
    wrapper.delete(new Path(testBaseDir1()),true);
    wrapper.delete(new Path(testBaseDir2()),true);
  }
  @Test(timeout=10000) public void testStatRoot() throws IOException {
    assertFalse(wrapper.getFileLinkStatus(new Path("/")).isSymlink());
  }
  @Test(timeout=10000) public void testSetWDNotResolvesLinks() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path linkToDir=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(dir,linkToDir,false);
    wrapper.setWorkingDirectory(linkToDir);
    assertEquals(linkToDir.getName(),wrapper.getWorkingDirectory().getName());
  }
  @Test(timeout=10000) public void testCreateDanglingLink() throws IOException {
    Path file=new Path("/noSuchFile");
    Path link=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.getFileStatus(link);
      fail("Got file status of non-existant file");
    }
 catch (    FileNotFoundException f) {
    }
    wrapper.delete(link,false);
  }
  @Test(timeout=10000) public void testCreateLinkToNullEmpty() throws IOException {
    Path link=new Path(testBaseDir1() + "/link");
    try {
      wrapper.createSymlink(null,link,false);
      fail("Can't create symlink to null");
    }
 catch (    java.lang.NullPointerException e) {
    }
    try {
      wrapper.createSymlink(new Path(""),link,false);
      fail("Can't create symlink to empty string");
    }
 catch (    java.lang.IllegalArgumentException e) {
    }
  }
  @Test(timeout=10000) public void testCreateLinkCanCreateParent() throws IOException {
    Path file=new Path(testBaseDir1() + "/file");
    Path link=new Path(testBaseDir2() + "/linkToFile");
    createAndWriteFile(file);
    wrapper.delete(new Path(testBaseDir2()),true);
    try {
      wrapper.createSymlink(file,link,false);
      fail("Created link without first creating parent dir");
    }
 catch (    IOException x) {
    }
    assertFalse(wrapper.exists(new Path(testBaseDir2())));
    wrapper.createSymlink(file,link,true);
    readFile(link);
  }
  @Test(timeout=10000) public void testMkdirExistingLink() throws IOException {
    Path file=new Path(testBaseDir1() + "/targetFile");
    createAndWriteFile(file);
    Path dir=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(file,dir,false);
    try {
      wrapper.mkdir(dir,FileContext.DEFAULT_PERM,false);
      fail("Created a dir where a symlink exists");
    }
 catch (    FileAlreadyExistsException e) {
    }
catch (    IOException e) {
      assertEquals("file",getScheme());
    }
  }
  @Test(timeout=10000) public void testCreateFileViaDanglingLinkParent() throws IOException {
    Path dir=new Path(testBaseDir1() + "/dangling");
    Path file=new Path(testBaseDir1() + "/dangling/file");
    wrapper.createSymlink(new Path("/doesNotExist"),dir,false);
    FSDataOutputStream out;
    try {
      out=wrapper.create(file,EnumSet.of(CreateFlag.CREATE),CreateOpts.repFac((short)1),CreateOpts.blockSize(blockSize));
      out.close();
      fail("Created a link with dangling link parent");
    }
 catch (    FileNotFoundException e) {
    }
  }
  @Test(timeout=10000) public void testDeleteLink() throws IOException {
    Path file=new Path(testBaseDir1() + "/file");
    Path link=new Path(testBaseDir1() + "/linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    readFile(link);
    wrapper.delete(link,false);
    try {
      readFile(link);
      fail("Symlink should have been deleted");
    }
 catch (    IOException x) {
    }
    wrapper.createSymlink(file,link,false);
  }
  @Test(timeout=10000) public void testOpenResolvesLinks() throws IOException {
    Path file=new Path(testBaseDir1() + "/noSuchFile");
    Path link=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.open(link);
      fail("link target does not exist");
    }
 catch (    FileNotFoundException x) {
    }
    wrapper.delete(link,false);
  }
  @Test(timeout=10000) public void testStatLinkToFile() throws IOException {
    Path file=new Path(testBaseDir1() + "/file");
    Path linkToFile=new Path(testBaseDir1() + "/linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,linkToFile,false);
    assertFalse(wrapper.getFileLinkStatus(linkToFile).isDirectory());
    assertTrue(wrapper.isSymlink(linkToFile));
    assertTrue(wrapper.isFile(linkToFile));
    assertFalse(wrapper.isDir(linkToFile));
    assertEquals(file,wrapper.getLinkTarget(linkToFile));
    if (!"file".equals(getScheme())) {
      assertEquals(wrapper.getFileStatus(file),wrapper.getFileStatus(linkToFile));
      assertEquals(wrapper.makeQualified(file),wrapper.getFileStatus(linkToFile).getPath());
      assertEquals(wrapper.makeQualified(linkToFile),wrapper.getFileLinkStatus(linkToFile).getPath());
    }
  }
  @Test(timeout=10000) public void testStatRelLinkToFile() throws IOException {
    assumeTrue(!"file".equals(getScheme()));
    Path file=new Path(testBaseDir1(),"file");
    Path linkToFile=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(new Path("file"),linkToFile,false);
    assertEquals(wrapper.getFileStatus(file),wrapper.getFileStatus(linkToFile));
    assertEquals(wrapper.makeQualified(file),wrapper.getFileStatus(linkToFile).getPath());
    assertEquals(wrapper.makeQualified(linkToFile),wrapper.getFileLinkStatus(linkToFile).getPath());
  }
  @Test(timeout=10000) public void testStatLinkToDir() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path linkToDir=new Path(testBaseDir1() + "/linkToDir");
    wrapper.createSymlink(dir,linkToDir,false);
    assertFalse(wrapper.getFileStatus(linkToDir).isSymlink());
    assertTrue(wrapper.isDir(linkToDir));
    assertFalse(wrapper.getFileLinkStatus(linkToDir).isDirectory());
    assertTrue(wrapper.getFileLinkStatus(linkToDir).isSymlink());
    assertFalse(wrapper.isFile(linkToDir));
    assertTrue(wrapper.isDir(linkToDir));
    assertEquals(dir,wrapper.getLinkTarget(linkToDir));
  }
  @Test(timeout=10000) public void testStatDanglingLink() throws IOException {
    Path file=new Path("/noSuchFile");
    Path link=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(file,link,false);
    assertFalse(wrapper.getFileLinkStatus(link).isDirectory());
    assertTrue(wrapper.getFileLinkStatus(link).isSymlink());
  }
  @Test(timeout=10000) public void testStatNonExistentFiles() throws IOException {
    Path fileAbs=new Path("/doesNotExist");
    try {
      wrapper.getFileLinkStatus(fileAbs);
      fail("Got FileStatus for non-existant file");
    }
 catch (    FileNotFoundException f) {
    }
    try {
      wrapper.getLinkTarget(fileAbs);
      fail("Got link target for non-existant file");
    }
 catch (    FileNotFoundException f) {
    }
  }
  @Test(timeout=10000) public void testStatNonLinks() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1() + "/file");
    createAndWriteFile(file);
    try {
      wrapper.getLinkTarget(dir);
      fail("Lstat'd a non-symlink");
    }
 catch (    IOException e) {
    }
    try {
      wrapper.getLinkTarget(file);
      fail("Lstat'd a non-symlink");
    }
 catch (    IOException e) {
    }
  }
  @Test(timeout=10000) public void testRecursiveLinks() throws IOException {
    Path link1=new Path(testBaseDir1() + "/link1");
    Path link2=new Path(testBaseDir1() + "/link2");
    wrapper.createSymlink(link1,link2,false);
    wrapper.createSymlink(link2,link1,false);
    try {
      readFile(link1);
      fail("Read recursive link");
    }
 catch (    FileNotFoundException f) {
    }
catch (    IOException x) {
      assertEquals("Possible cyclic loop while following symbolic link " + link1.toString(),x.getMessage());
    }
  }
  private void checkLink(  Path linkAbs,  Path expectedTarget,  Path targetQual) throws IOException {
    Path dir=new Path(testBaseDir1());
    assertTrue(wrapper.isFile(linkAbs));
    assertFalse(wrapper.isDir(linkAbs));
    assertFalse(wrapper.getFileStatus(linkAbs).isSymlink());
    assertFalse(wrapper.getFileStatus(linkAbs).isDirectory());
    assertEquals(fileSize,wrapper.getFileStatus(linkAbs).getLen());
    assertTrue(wrapper.isSymlink(linkAbs));
    assertFalse(wrapper.getFileLinkStatus(linkAbs).isDirectory());
    assertEquals(targetQual.toString(),wrapper.getFileLinkStatus(linkAbs).getSymlink().toString());
    assertEquals(targetQual,wrapper.getFileLinkStatus(linkAbs).getSymlink());
    if (!"file".equals(getScheme())) {
      FileContext localFc=FileContext.getLocalFSFileContext();
      Path linkQual=new Path(testURI().toString(),linkAbs);
      assertEquals(targetQual,localFc.getFileLinkStatus(linkQual).getSymlink());
    }
    assertEquals(expectedTarget,wrapper.getLinkTarget(linkAbs));
    wrapper.setWorkingDirectory(dir);
    readFile(new Path("linkToFile"));
    readFile(linkAbs);
    readFile(new Path(testURI().toString(),linkAbs));
    boolean failureExpected=true;
    if ("file".equals(getScheme())) {
      failureExpected=false;
    }
 else     if (wrapper instanceof FileSystemTestWrapper) {
      failureExpected=false;
    }
    try {
      readFile(new Path(getScheme() + ":///" + testBaseDir1()+ "/linkToFile"));
      assertFalse(failureExpected);
    }
 catch (    Exception e) {
      if (!failureExpected) {
        throw new IOException(e);
      }
    }
    if (wrapper instanceof FileContextTestWrapper && !"file".equals(getScheme())) {
      FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
      localWrapper.readFile(new Path(testURI().toString(),linkAbs),fileSize);
    }
  }
  @Test(timeout=10000) public void testCreateLinkUsingRelPaths() throws IOException {
    Path fileAbs=new Path(testBaseDir1(),"file");
    Path linkAbs=new Path(testBaseDir1(),"linkToFile");
    Path schemeAuth=new Path(testURI().toString());
    Path fileQual=new Path(schemeAuth,testBaseDir1() + "/file");
    createAndWriteFile(fileAbs);
    wrapper.setWorkingDirectory(new Path(testBaseDir1()));
    wrapper.createSymlink(new Path("file"),new Path("linkToFile"),false);
    checkLink(linkAbs,new Path("file"),fileQual);
    Path dir1=new Path(testBaseDir1());
    Path dir2=new Path(testBaseDir2());
    Path linkViaDir2=new Path(testBaseDir2(),"linkToFile");
    Path fileViaDir2=new Path(schemeAuth,testBaseDir2() + "/file");
    wrapper.rename(dir1,dir2,Rename.OVERWRITE);
    FileStatus[] stats=wrapper.listStatus(dir2);
    assertEquals(fileViaDir2,wrapper.getFileLinkStatus(linkViaDir2).getSymlink());
    readFile(linkViaDir2);
  }
  @Test(timeout=10000) public void testCreateLinkUsingAbsPaths() throws IOException {
    Path fileAbs=new Path(testBaseDir1() + "/file");
    Path linkAbs=new Path(testBaseDir1() + "/linkToFile");
    Path schemeAuth=new Path(testURI().toString());
    Path fileQual=new Path(schemeAuth,testBaseDir1() + "/file");
    createAndWriteFile(fileAbs);
    wrapper.createSymlink(fileAbs,linkAbs,false);
    checkLink(linkAbs,fileAbs,fileQual);
    Path dir1=new Path(testBaseDir1());
    Path dir2=new Path(testBaseDir2());
    Path linkViaDir2=new Path(testBaseDir2(),"linkToFile");
    wrapper.rename(dir1,dir2,Rename.OVERWRITE);
    assertEquals(fileQual,wrapper.getFileLinkStatus(linkViaDir2).getSymlink());
    try {
      readFile(linkViaDir2);
      fail("The target should not exist");
    }
 catch (    FileNotFoundException x) {
    }
  }
  @Test(timeout=10000) public void testCreateLinkUsingFullyQualPaths() throws IOException {
    Path fileAbs=new Path(testBaseDir1(),"file");
    Path linkAbs=new Path(testBaseDir1(),"linkToFile");
    Path fileQual=new Path(testURI().toString(),fileAbs);
    Path linkQual=new Path(testURI().toString(),linkAbs);
    createAndWriteFile(fileAbs);
    wrapper.createSymlink(fileQual,linkQual,false);
    checkLink(linkAbs,"file".equals(getScheme()) ? fileAbs : fileQual,fileQual);
    Path dir1=new Path(testBaseDir1());
    Path dir2=new Path(testBaseDir2());
    Path linkViaDir2=new Path(testBaseDir2(),"linkToFile");
    wrapper.rename(dir1,dir2,Rename.OVERWRITE);
    assertEquals(fileQual,wrapper.getFileLinkStatus(linkViaDir2).getSymlink());
    try {
      readFile(linkViaDir2);
      fail("The target should not exist");
    }
 catch (    FileNotFoundException x) {
    }
  }
  @Test(timeout=10000) public void testCreateLinkUsingPartQualPath1() throws IOException {
    assumeTrue(!"file".equals(getScheme()));
    Path schemeAuth=new Path(testURI().toString());
    Path fileWoHost=new Path(getScheme() + "://" + testBaseDir1()+ "/file");
    Path link=new Path(testBaseDir1() + "/linkToFile");
    Path linkQual=new Path(schemeAuth,testBaseDir1() + "/linkToFile");
    FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
    wrapper.createSymlink(fileWoHost,link,false);
    assertEquals(fileWoHost,wrapper.getLinkTarget(linkQual));
    assertEquals(fileWoHost.toString(),wrapper.getFileLinkStatus(link).getSymlink().toString());
    assertEquals(fileWoHost.toString(),wrapper.getFileLinkStatus(linkQual).getSymlink().toString());
    if (wrapper instanceof FileContextTestWrapper) {
      assertEquals(fileWoHost.toString(),localWrapper.getFileLinkStatus(linkQual).getSymlink().toString());
    }
    try {
      readFile(link);
      fail("DFS requires URIs with schemes have an authority");
    }
 catch (    java.lang.RuntimeException e) {
      assertTrue(wrapper instanceof FileContextTestWrapper);
    }
catch (    FileNotFoundException e) {
      assertTrue(wrapper instanceof FileSystemTestWrapper);
      GenericTestUtils.assertExceptionContains("File does not exist: /test1/file",e);
    }
  }
  @Test(timeout=10000) public void testCreateLinkUsingPartQualPath2() throws IOException {
    Path link=new Path(testBaseDir1(),"linkToFile");
    Path fileWoScheme=new Path("//" + testURI().getAuthority() + testBaseDir1()+ "/file");
    if ("file".equals(getScheme())) {
      return;
    }
    wrapper.createSymlink(fileWoScheme,link,false);
    assertEquals(fileWoScheme,wrapper.getLinkTarget(link));
    assertEquals(fileWoScheme.toString(),wrapper.getFileLinkStatus(link).getSymlink().toString());
    try {
      readFile(link);
      fail("Accessed a file with w/o scheme");
    }
 catch (    IOException e) {
      if (wrapper instanceof FileContextTestWrapper) {
        GenericTestUtils.assertExceptionContains(AbstractFileSystem.NO_ABSTRACT_FS_ERROR,e);
      }
 else       if (wrapper instanceof FileSystemTestWrapper) {
        assertEquals("No FileSystem for scheme " + "\"" + "null"+ "\"",e.getMessage());
      }
    }
  }
  @Test(timeout=10000) public void testLinkStatusAndTargetWithNonLink() throws IOException {
    Path schemeAuth=new Path(testURI().toString());
    Path dir=new Path(testBaseDir1());
    Path dirQual=new Path(schemeAuth,dir.toString());
    Path file=new Path(testBaseDir1(),"file");
    Path fileQual=new Path(schemeAuth,file.toString());
    createAndWriteFile(file);
    assertEquals(wrapper.getFileStatus(file),wrapper.getFileLinkStatus(file));
    assertEquals(wrapper.getFileStatus(dir),wrapper.getFileLinkStatus(dir));
    try {
      wrapper.getLinkTarget(file);
      fail("Get link target on non-link should throw an IOException");
    }
 catch (    IOException x) {
      assertEquals("Path " + fileQual + " is not a symbolic link",x.getMessage());
    }
    try {
      wrapper.getLinkTarget(dir);
      fail("Get link target on non-link should throw an IOException");
    }
 catch (    IOException x) {
      assertEquals("Path " + dirQual + " is not a symbolic link",x.getMessage());
    }
  }
  @Test(timeout=10000) public void testCreateLinkToDirectory() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    createAndWriteFile(file);
    wrapper.createSymlink(dir1,linkToDir,false);
    assertFalse(wrapper.isFile(linkToDir));
    assertTrue(wrapper.isDir(linkToDir));
    assertTrue(wrapper.getFileStatus(linkToDir).isDirectory());
    assertTrue(wrapper.getFileLinkStatus(linkToDir).isSymlink());
  }
  @Test(timeout=10000) public void testCreateFileViaSymlink() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    wrapper.createSymlink(dir,linkToDir,false);
    createAndWriteFile(fileViaLink);
    assertTrue(wrapper.isFile(fileViaLink));
    assertFalse(wrapper.isDir(fileViaLink));
    assertFalse(wrapper.getFileLinkStatus(fileViaLink).isSymlink());
    assertFalse(wrapper.getFileStatus(fileViaLink).isDirectory());
    readFile(fileViaLink);
    wrapper.delete(fileViaLink,true);
    assertFalse(wrapper.exists(fileViaLink));
  }
  @Test(timeout=10000) public void testCreateDirViaSymlink() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path subDir=new Path(testBaseDir1(),"subDir");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path subDirViaLink=new Path(linkToDir,"subDir");
    wrapper.createSymlink(dir1,linkToDir,false);
    wrapper.mkdir(subDirViaLink,FileContext.DEFAULT_PERM,true);
    assertTrue(wrapper.isDir(subDirViaLink));
    wrapper.delete(subDirViaLink,false);
    assertFalse(wrapper.exists(subDirViaLink));
    assertFalse(wrapper.exists(subDir));
  }
  @Test(timeout=10000) public void testCreateLinkViaLink() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    Path linkToFile=new Path(linkToDir,"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(dir1,linkToDir,false);
    wrapper.createSymlink(fileViaLink,linkToFile,false);
    assertTrue(wrapper.isFile(linkToFile));
    assertTrue(wrapper.getFileLinkStatus(linkToFile).isSymlink());
    readFile(linkToFile);
    assertEquals(fileSize,wrapper.getFileStatus(linkToFile).getLen());
    assertEquals(fileViaLink,wrapper.getLinkTarget(linkToFile));
  }
  @Test(timeout=10000) public void testListStatusUsingLink() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"link");
    createAndWriteFile(file);
    wrapper.createSymlink(new Path(testBaseDir1()),link,false);
    FileStatus[] stats=wrapper.listStatus(link);
    assertTrue(stats.length == 2 || stats.length == 3);
    RemoteIterator<FileStatus> statsItor=wrapper.listStatusIterator(link);
    int dirLen=0;
    while (statsItor.hasNext()) {
      statsItor.next();
      dirLen++;
    }
    assertTrue(dirLen == 2 || dirLen == 3);
  }
  @Test(timeout=10000) public void testCreateLinkTwice() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.createSymlink(file,link,false);
      fail("link already exists");
    }
 catch (    IOException x) {
    }
  }
  @Test(timeout=10000) public void testCreateLinkToLink() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path linkToLink=new Path(testBaseDir2(),"linkToLink");
    Path fileViaLink=new Path(testBaseDir2(),"linkToLink/file");
    createAndWriteFile(file);
    wrapper.createSymlink(dir1,linkToDir,false);
    wrapper.createSymlink(linkToDir,linkToLink,false);
    assertTrue(wrapper.isFile(fileViaLink));
    assertFalse(wrapper.isDir(fileViaLink));
    assertFalse(wrapper.getFileLinkStatus(fileViaLink).isSymlink());
    assertFalse(wrapper.getFileStatus(fileViaLink).isDirectory());
    readFile(fileViaLink);
  }
  @Test(timeout=10000) public void testCreateFileDirExistingLink() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    try {
      createAndWriteFile(link);
      fail("link already exists");
    }
 catch (    IOException x) {
    }
    try {
      wrapper.mkdir(link,FsPermission.getDefault(),false);
      fail("link already exists");
    }
 catch (    IOException x) {
    }
  }
  @Test(timeout=10000) public void testUseLinkAferDeleteLink() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    wrapper.delete(link,false);
    try {
      readFile(link);
      fail("link was deleted");
    }
 catch (    IOException x) {
    }
    readFile(file);
    wrapper.createSymlink(file,link,false);
    readFile(link);
  }
  @Test(timeout=10000) public void testCreateLinkToDot() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToDot");
    createAndWriteFile(file);
    wrapper.setWorkingDirectory(dir);
    try {
      wrapper.createSymlink(new Path("."),link,false);
      fail("Created symlink to dot");
    }
 catch (    IOException x) {
    }
  }
  @Test(timeout=10000) public void testCreateLinkToDotDot() throws IOException {
    Path file=new Path(testBaseDir1(),"test/file");
    Path dotDot=new Path(testBaseDir1(),"test/..");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"test/file");
    assertEquals(new Path(testBaseDir1()),dotDot);
    createAndWriteFile(file);
    wrapper.createSymlink(dotDot,linkToDir,false);
    readFile(fileViaLink);
    assertEquals(fileSize,wrapper.getFileStatus(fileViaLink).getLen());
  }
  @Test(timeout=10000) public void testCreateLinkToDotDotPrefix() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path dir=new Path(testBaseDir1(),"test");
    Path link=new Path(testBaseDir1(),"test/link");
    createAndWriteFile(file);
    wrapper.mkdir(dir,FsPermission.getDefault(),false);
    wrapper.setWorkingDirectory(dir);
    wrapper.createSymlink(new Path("../file"),link,false);
    readFile(link);
    assertEquals(new Path("../file"),wrapper.getLinkTarget(link));
  }
  @Test(timeout=10000) public void testRenameFileViaSymlink() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    Path fileNewViaLink=new Path(linkToDir,"fileNew");
    createAndWriteFile(file);
    wrapper.createSymlink(dir,linkToDir,false);
    wrapper.rename(fileViaLink,fileNewViaLink);
    assertFalse(wrapper.exists(fileViaLink));
    assertFalse(wrapper.exists(file));
    assertTrue(wrapper.exists(fileNewViaLink));
  }
  @Test(timeout=10000) public void testRenameFileToDestViaSymlink() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path subDir=new Path(linkToDir,"subDir");
    createAndWriteFile(file);
    wrapper.createSymlink(dir,linkToDir,false);
    wrapper.mkdir(subDir,FileContext.DEFAULT_PERM,false);
    try {
      wrapper.rename(file,subDir);
      fail("Renamed file to a directory");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    assertTrue(wrapper.exists(file));
  }
  @Test(timeout=10000) public void testRenameDirViaSymlink() throws IOException {
    Path baseDir=new Path(testBaseDir1());
    Path dir=new Path(baseDir,"dir");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path dirViaLink=new Path(linkToDir,"dir");
    Path dirNewViaLink=new Path(linkToDir,"dirNew");
    wrapper.mkdir(dir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(baseDir,linkToDir,false);
    assertTrue(wrapper.exists(dirViaLink));
    wrapper.rename(dirViaLink,dirNewViaLink);
    assertFalse(wrapper.exists(dirViaLink));
    assertFalse(wrapper.exists(dir));
    assertTrue(wrapper.exists(dirNewViaLink));
  }
  @Test(timeout=10000) public void testRenameSymlinkViaSymlink() throws IOException {
    Path baseDir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"link");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path linkViaLink=new Path(linkToDir,"link");
    Path linkNewViaLink=new Path(linkToDir,"linkNew");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    wrapper.createSymlink(baseDir,linkToDir,false);
    wrapper.rename(linkViaLink,linkNewViaLink);
    assertFalse(wrapper.exists(linkViaLink));
    assertTrue(wrapper.exists(file));
    assertTrue(wrapper.getFileLinkStatus(linkNewViaLink).isSymlink());
    readFile(linkNewViaLink);
  }
  @Test(timeout=10000) public void testRenameDirToSymlinkToDir() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path subDir=new Path(testBaseDir2(),"subDir");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    wrapper.mkdir(subDir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(subDir,linkToDir,false);
    try {
      wrapper.rename(dir1,linkToDir,Rename.OVERWRITE);
      fail("Renamed directory to a symlink");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    assertTrue(wrapper.exists(dir1));
    assertTrue(wrapper.exists(linkToDir));
  }
  @Test(timeout=10000) public void testRenameDirToSymlinkToFile() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path file=new Path(testBaseDir2(),"file");
    Path linkToFile=new Path(testBaseDir2(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,linkToFile,false);
    try {
      wrapper.rename(dir1,linkToFile,Rename.OVERWRITE);
      fail("Renamed directory to a symlink");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    assertTrue(wrapper.exists(dir1));
    assertTrue(wrapper.exists(linkToFile));
  }
  @Test(timeout=10000) public void testRenameDirToDanglingSymlink() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path link=new Path(testBaseDir2(),"linkToFile");
    wrapper.createSymlink(new Path("/doesNotExist"),link,false);
    try {
      wrapper.rename(dir,link,Rename.OVERWRITE);
      fail("Renamed directory to a symlink");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    assertTrue(wrapper.exists(dir));
    assertTrue(wrapper.getFileLinkStatus(link) != null);
  }
  @Test(timeout=10000) public void testRenameFileToSymlinkToDir() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path subDir=new Path(testBaseDir1(),"subDir");
    Path link=new Path(testBaseDir1(),"link");
    wrapper.mkdir(subDir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(subDir,link,false);
    createAndWriteFile(file);
    try {
      wrapper.rename(file,link);
      fail("Renamed file to symlink w/o overwrite");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    wrapper.rename(file,link,Rename.OVERWRITE);
    assertFalse(wrapper.exists(file));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isFile(link));
    assertFalse(wrapper.getFileLinkStatus(link).isSymlink());
  }
  @Test(timeout=10000) public void testRenameFileToSymlinkToFile() throws IOException {
    Path file1=new Path(testBaseDir1(),"file1");
    Path file2=new Path(testBaseDir1(),"file2");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file1);
    createAndWriteFile(file2);
    wrapper.createSymlink(file2,link,false);
    try {
      wrapper.rename(file1,link);
      fail("Renamed file to symlink w/o overwrite");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    wrapper.rename(file1,link,Rename.OVERWRITE);
    assertFalse(wrapper.exists(file1));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isFile(link));
    assertFalse(wrapper.getFileLinkStatus(link).isSymlink());
  }
  @Test(timeout=10000) public void testRenameFileToDanglingSymlink() throws IOException {
    if ("file".equals(getScheme())) {
      return;
    }
    Path file1=new Path(testBaseDir1(),"file1");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file1);
    wrapper.createSymlink(new Path("/doesNotExist"),link,false);
    try {
      wrapper.rename(file1,link);
    }
 catch (    IOException e) {
    }
    wrapper.rename(file1,link,Rename.OVERWRITE);
    assertFalse(wrapper.exists(file1));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isFile(link));
    assertFalse(wrapper.getFileLinkStatus(link).isSymlink());
  }
  @Test(timeout=10000) public void testRenameSymlinkNonExistantDest() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link1=new Path(testBaseDir1(),"linkToFile1");
    Path link2=new Path(testBaseDir1(),"linkToFile2");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link1,false);
    wrapper.rename(link1,link2);
    assertTrue(wrapper.getFileLinkStatus(link2).isSymlink());
    readFile(link2);
    readFile(file);
    assertFalse(wrapper.exists(link1));
  }
  @Test(timeout=10000) public void testRenameSymlinkToExistingFile() throws IOException {
    Path file1=new Path(testBaseDir1(),"file");
    Path file2=new Path(testBaseDir1(),"someFile");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file1);
    createAndWriteFile(file2);
    wrapper.createSymlink(file2,link,false);
    try {
      wrapper.rename(link,file1);
      fail("Renamed w/o passing overwrite");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    wrapper.rename(link,file1,Rename.OVERWRITE);
    assertFalse(wrapper.exists(link));
    assertTrue(wrapper.getFileLinkStatus(file1).isSymlink());
    assertEquals(file2,wrapper.getLinkTarget(file1));
  }
  @Test(timeout=10000) public void testRenameSymlinkToExistingDir() throws IOException {
    Path dir1=new Path(testBaseDir1());
    Path dir2=new Path(testBaseDir2());
    Path subDir=new Path(testBaseDir2(),"subDir");
    Path link=new Path(testBaseDir1(),"linkToDir");
    wrapper.createSymlink(dir1,link,false);
    try {
      wrapper.rename(link,dir2);
      fail("Renamed link to a directory");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    try {
      wrapper.rename(link,dir2,Rename.OVERWRITE);
      fail("Renamed link to a directory");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
    wrapper.mkdir(subDir,FsPermission.getDefault(),false);
    try {
      wrapper.rename(link,dir2,Rename.OVERWRITE);
      fail("Renamed link to a directory");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof IOException);
    }
  }
  @Test(timeout=10000) public void testRenameSymlinkToItself() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    createAndWriteFile(file);
    Path link=new Path(testBaseDir1(),"linkToFile1");
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.rename(link,link);
      fail("Failed to get expected IOException");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    try {
      wrapper.rename(link,link,Rename.OVERWRITE);
      fail("Failed to get expected IOException");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
  }
  @Test(timeout=10000) public void testRenameSymlink() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link1=new Path(testBaseDir1(),"linkToFile1");
    Path link2=new Path(testBaseDir1(),"linkToFile2");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link1,false);
    wrapper.rename(link1,link2);
    assertTrue(wrapper.getFileLinkStatus(link2).isSymlink());
    assertFalse(wrapper.getFileStatus(link2).isDirectory());
    readFile(link2);
    readFile(file);
    try {
      createAndWriteFile(link2);
      fail("link was not renamed");
    }
 catch (    IOException x) {
    }
  }
  @Test(timeout=10000) public void testRenameSymlinkToFileItLinksTo() throws IOException {
    if ("file".equals(getScheme())) {
      return;
    }
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.rename(link,file);
      fail("Renamed symlink to its target");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    assertTrue(wrapper.isFile(file));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isSymlink(link));
    assertEquals(file,wrapper.getLinkTarget(link));
    try {
      wrapper.rename(link,file,Rename.OVERWRITE);
      fail("Renamed symlink to its target");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    assertTrue(wrapper.isFile(file));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isSymlink(link));
    assertEquals(file,wrapper.getLinkTarget(link));
  }
  @Test(timeout=10000) public void testRenameSymlinkToDirItLinksTo() throws IOException {
    if ("file".equals(getScheme())) {
      return;
    }
    Path dir=new Path(testBaseDir1(),"dir");
    Path link=new Path(testBaseDir1(),"linkToDir");
    wrapper.mkdir(dir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(dir,link,false);
    try {
      wrapper.rename(link,dir);
      fail("Renamed symlink to its target");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    assertTrue(wrapper.isDir(dir));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isSymlink(link));
    assertEquals(dir,wrapper.getLinkTarget(link));
    try {
      wrapper.rename(link,dir,Rename.OVERWRITE);
      fail("Renamed symlink to its target");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    assertTrue(wrapper.isDir(dir));
    assertTrue(wrapper.exists(link));
    assertTrue(wrapper.isSymlink(link));
    assertEquals(dir,wrapper.getLinkTarget(link));
  }
  @Test(timeout=10000) public void testRenameLinkTarget() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path fileNew=new Path(testBaseDir1(),"fileNew");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    wrapper.rename(file,fileNew,Rename.OVERWRITE);
    try {
      readFile(link);
      fail("Link should be dangling");
    }
 catch (    IOException x) {
    }
    wrapper.rename(fileNew,file,Rename.OVERWRITE);
    readFile(link);
  }
  @Test(timeout=10000) public void testRenameFileWithDestParentSymlink() throws IOException {
    Path link=new Path(testBaseDir1(),"link");
    Path file1=new Path(testBaseDir1(),"file1");
    Path file2=new Path(testBaseDir1(),"file2");
    Path file3=new Path(link,"file3");
    Path dir2=new Path(testBaseDir2());
    wrapper.createSymlink(dir2,link,false);
    createAndWriteFile(file1);
    wrapper.rename(file1,file3);
    assertFalse(wrapper.exists(file1));
    assertTrue(wrapper.exists(file3));
    wrapper.rename(file3,file1);
    wrapper.delete(link,false);
    wrapper.createSymlink(file2,link,false);
    try {
      wrapper.rename(file1,file3);
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileNotFoundException);
    }
    createAndWriteFile(file2);
    try {
      wrapper.rename(file1,file3);
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof ParentNotDirectoryException);
    }
  }
  @Test(timeout=10000) public void testAccessFileViaInterSymlinkAbsTarget() throws IOException {
    Path baseDir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path fileNew=new Path(baseDir,"fileNew");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    Path fileNewViaLink=new Path(linkToDir,"fileNew");
    wrapper.createSymlink(baseDir,linkToDir,false);
    createAndWriteFile(fileViaLink);
    assertTrue(wrapper.exists(fileViaLink));
    assertTrue(wrapper.isFile(fileViaLink));
    assertFalse(wrapper.isDir(fileViaLink));
    assertFalse(wrapper.getFileLinkStatus(fileViaLink).isSymlink());
    assertFalse(wrapper.isDir(fileViaLink));
    assertEquals(wrapper.getFileStatus(file),wrapper.getFileLinkStatus(file));
    assertEquals(wrapper.getFileStatus(fileViaLink),wrapper.getFileLinkStatus(fileViaLink));
    readFile(fileViaLink);
    appendToFile(fileViaLink);
    wrapper.rename(fileViaLink,fileNewViaLink);
    assertFalse(wrapper.exists(fileViaLink));
    assertTrue(wrapper.exists(fileNewViaLink));
    readFile(fileNewViaLink);
    assertEquals(wrapper.getFileBlockLocations(fileNew,0,1).length,wrapper.getFileBlockLocations(fileNewViaLink,0,1).length);
    assertEquals(wrapper.getFileChecksum(fileNew),wrapper.getFileChecksum(fileNewViaLink));
    wrapper.delete(fileNewViaLink,true);
    assertFalse(wrapper.exists(fileNewViaLink));
  }
  @Test(timeout=10000) public void testAccessFileViaInterSymlinkQualTarget() throws IOException {
    Path baseDir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    wrapper.createSymlink(wrapper.makeQualified(baseDir),linkToDir,false);
    createAndWriteFile(fileViaLink);
    assertEquals(wrapper.getFileStatus(file),wrapper.getFileLinkStatus(file));
    assertEquals(wrapper.getFileStatus(fileViaLink),wrapper.getFileLinkStatus(fileViaLink));
    readFile(fileViaLink);
  }
  @Test(timeout=10000) public void testAccessFileViaInterSymlinkRelTarget() throws IOException {
    assumeTrue(!"file".equals(getScheme()));
    Path dir=new Path(testBaseDir1(),"dir");
    Path file=new Path(dir,"file");
    Path linkToDir=new Path(testBaseDir1(),"linkToDir");
    Path fileViaLink=new Path(linkToDir,"file");
    wrapper.mkdir(dir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(new Path("dir"),linkToDir,false);
    createAndWriteFile(fileViaLink);
    assertEquals(wrapper.makeQualified(file),wrapper.getFileStatus(file).getPath());
    assertEquals(wrapper.getFileStatus(file),wrapper.getFileLinkStatus(file));
    assertEquals(wrapper.getFileStatus(fileViaLink),wrapper.getFileLinkStatus(fileViaLink));
    assertEquals(wrapper.getFileStatus(fileViaLink),wrapper.getFileLinkStatus(file));
  }
  @Test(timeout=10000) public void testAccessDirViaSymlink() throws IOException {
    Path baseDir=new Path(testBaseDir1());
    Path dir=new Path(testBaseDir1(),"dir");
    Path linkToDir=new Path(testBaseDir2(),"linkToDir");
    Path dirViaLink=new Path(linkToDir,"dir");
    wrapper.createSymlink(baseDir,linkToDir,false);
    wrapper.mkdir(dirViaLink,FileContext.DEFAULT_PERM,true);
    assertTrue(wrapper.getFileStatus(dirViaLink).isDirectory());
    FileStatus[] stats=wrapper.listStatus(dirViaLink);
    assertEquals(0,stats.length);
    RemoteIterator<FileStatus> statsItor=wrapper.listStatusIterator(dirViaLink);
    assertFalse(statsItor.hasNext());
    wrapper.delete(dirViaLink,false);
    assertFalse(wrapper.exists(dirViaLink));
    assertFalse(wrapper.exists(dir));
  }
  @Test(timeout=10000) public void testSetTimesSymlinkToFile() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    long at=wrapper.getFileLinkStatus(link).getAccessTime();
    wrapper.setTimes(link,2000L,3000L);
    assertTrue("The atime of symlink should not be lesser after setTimes()",wrapper.getFileLinkStatus(link).getAccessTime() >= at);
    assertEquals(2000,wrapper.getFileStatus(file).getModificationTime());
    assertEquals(3000,wrapper.getFileStatus(file).getAccessTime());
  }
  @Test(timeout=10000) public void testSetTimesSymlinkToDir() throws IOException {
    Path dir=new Path(testBaseDir1(),"dir");
    Path link=new Path(testBaseDir1(),"linkToDir");
    wrapper.mkdir(dir,FileContext.DEFAULT_PERM,false);
    wrapper.createSymlink(dir,link,false);
    long at=wrapper.getFileLinkStatus(link).getAccessTime();
    wrapper.setTimes(link,2000L,3000L);
    assertTrue("The atime of symlink should not be lesser after setTimes()",wrapper.getFileLinkStatus(link).getAccessTime() >= at);
    assertEquals(2000,wrapper.getFileStatus(dir).getModificationTime());
    assertEquals(3000,wrapper.getFileStatus(dir).getAccessTime());
  }
  @Test(timeout=10000) public void testSetTimesDanglingLink() throws IOException {
    Path file=new Path("/noSuchFile");
    Path link=new Path(testBaseDir1() + "/link");
    wrapper.createSymlink(file,link,false);
    long at=wrapper.getFileLinkStatus(link).getAccessTime();
    try {
      wrapper.setTimes(link,2000L,3000L);
      fail("set times to non-existant file");
    }
 catch (    IOException e) {
    }
    assertTrue("The atime of symlink should not be lesser after setTimes()",wrapper.getFileLinkStatus(link).getAccessTime() >= at);
  }
}
