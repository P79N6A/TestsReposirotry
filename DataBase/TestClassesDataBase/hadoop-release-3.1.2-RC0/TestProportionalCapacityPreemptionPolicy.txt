public class TestProportionalCapacityPreemptionPolicy {
  static final long TS=3141592653L;
  int appAlloc=0;
  boolean setAMContainer=false;
  boolean setLabeledContainer=false;
  float setAMResourcePercent=0.0f;
  Random rand=null;
  Clock mClock=null;
  CapacitySchedulerConfiguration conf=null;
  CapacityScheduler mCS=null;
  RMContext rmContext=null;
  RMNodeLabelsManager lm=null;
  EventHandler<Event> mDisp=null;
  ResourceCalculator rc=new DefaultResourceCalculator();
  Resource clusterResources=null;
  final ApplicationAttemptId appA=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,0),0);
  final ApplicationAttemptId appB=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,1),0);
  final ApplicationAttemptId appC=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,2),0);
  final ApplicationAttemptId appD=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,3),0);
  final ApplicationAttemptId appE=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,4),0);
  final ApplicationAttemptId appF=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,4),0);
  final ArgumentCaptor<ContainerPreemptEvent> evtCaptor=ArgumentCaptor.forClass(ContainerPreemptEvent.class);
  public enum priority {  AMCONTAINER(0),   CONTAINER(1),   LABELEDCONTAINER(2);   int value;
  priority(  int value){
    this.value=value;
  }
  public int getValue(){
    return this.value;
  }
}
  @Rule public TestName name=new TestName();
  @Before @SuppressWarnings("unchecked") public void setup(){
    conf=new CapacitySchedulerConfiguration(new Configuration(false));
    conf.setLong(CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,10000);
    conf.setLong(CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,3000);
    conf.setFloat(CapacitySchedulerConfiguration.TOTAL_PREEMPTION_PER_ROUND,1.0f);
    conf.setFloat(CapacitySchedulerConfiguration.PREEMPTION_NATURAL_TERMINATION_FACTOR,1.0f);
    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,ProportionalCapacityPreemptionPolicy.class.getCanonicalName());
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
    conf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getName());
    mClock=mock(Clock.class);
    mCS=mock(CapacityScheduler.class);
    when(mCS.getResourceCalculator()).thenReturn(rc);
    lm=mock(RMNodeLabelsManager.class);
    try {
      when(lm.isExclusiveNodeLabel(anyString())).thenReturn(true);
    }
 catch (    IOException e) {
    }
    when(mCS.getConfiguration()).thenReturn(conf);
    rmContext=mock(RMContext.class);
    when(mCS.getRMContext()).thenReturn(rmContext);
    when(mCS.getPreemptionManager()).thenReturn(new PreemptionManager());
    when(rmContext.getNodeLabelManager()).thenReturn(lm);
    mDisp=mock(EventHandler.class);
    Dispatcher disp=mock(Dispatcher.class);
    when(rmContext.getDispatcher()).thenReturn(disp);
    when(disp.getEventHandler()).thenReturn(mDisp);
    rand=new Random();
    long seed=rand.nextLong();
    System.out.println(name.getMethodName() + " SEED: " + seed);
    rand.setSeed(seed);
    appAlloc=0;
  }
  private static final int[][] Q_DATA_FOR_IGNORE=new int[][]{{100,40,40,20},{100,100,100,100},{100,0,60,40},{0,0,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
  @Test public void testIgnore(){
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(Q_DATA_FOR_IGNORE);
    policy.editSchedule();
    verify(mDisp,never()).handle(isA(ContainerPreemptEvent.class));
  }
  @Test public void testProportionalPreemption(){
    int[][] qData=new int[][]{{100,10,40,20,30},{100,100,100,100,100},{100,30,60,10,0},{45,20,5,20,0},{0,0,0,0,0},{3,1,1,1,0},{-1,1,1,1,1},{4,0,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testMaxCap(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,45,100},{100,55,45,0},{20,10,10,0},{0,0,0,0},{2,1,1,0},{-1,1,1,0},{3,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testPreemptCycle(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,0,60,40},{10,10,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
  }
  @Test public void testExpireKill(){
    final long killTime=10000L;
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,0,60,40},{10,10,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
    conf.setLong(CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,killTime);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    when(mClock.getTime()).thenReturn(0L);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
    when(mClock.getTime()).thenReturn(killTime / 2);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
    when(mClock.getTime()).thenReturn(killTime + 1);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(evtCaptor.capture());
    List<ContainerPreemptEvent> events=evtCaptor.getAllValues();
    for (    ContainerPreemptEvent e : events.subList(20,20)) {
      assertEquals(appC,e.getAppId());
      assertEquals(MARK_CONTAINER_FOR_KILLABLE,e.getType());
    }
  }
  @Test public void testDeadzone(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,39,43,21},{10,10,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
    conf.setFloat(CapacitySchedulerConfiguration.PREEMPTION_MAX_IGNORED_OVER_CAPACITY,(float)0.1);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(isA(ContainerPreemptEvent.class));
  }
  @Test public void testPerQueueDisablePreemption(){
    int[][] qData=new int[][]{{100,55,25,20},{100,100,100,100},{100,0,54,46},{10,10,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
    conf.setPreemptionDisabled("root.queueB",true);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
    setup();
    conf.setPreemptionDisabled("root.queueB",false);
    ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
    policy2.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,times(6)).handle(argThat(new IsPreemptionRequestFor(appC)));
  }
  @Test public void testPerQueueDisablePreemptionHierarchical(){
    int[][] qData=new int[][]{{200,100,50,50,100,10,90},{200,200,200,200,200,200,200},{200,110,60,50,90,90,0},{10,0,0,0,10,0,10},{0,0,0,0,0,0,0},{4,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1},{2,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    ApplicationAttemptId expectedAttemptOnQueueB=ApplicationAttemptId.newInstance(appA.getApplicationId(),appA.getAttemptId());
    assertTrue("appA should be running on queueB",mCS.getAppsInQueue("queueB").contains(expectedAttemptOnQueueB));
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appA)));
    setup();
    conf.setPreemptionDisabled("root.queueA.queueB",true);
    ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
    policy2.editSchedule();
    ApplicationAttemptId expectedAttemptOnQueueC=ApplicationAttemptId.newInstance(appB.getApplicationId(),appB.getAttemptId());
    ApplicationAttemptId expectedAttemptOnQueueE=ApplicationAttemptId.newInstance(appC.getApplicationId(),appC.getAttemptId());
    assertTrue("appB should be running on queueC",mCS.getAppsInQueue("queueC").contains(expectedAttemptOnQueueC));
    assertTrue("appC should be running on queueE",mCS.getAppsInQueue("queueE").contains(expectedAttemptOnQueueE));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
  }
  @Test public void testPerQueueDisablePreemptionBroadHierarchical(){
    int[][] qData=new int[][]{{1000,350,150,200,400,200,200,250,100,150},{1000,1000,1000,1000,1000,1000,1000,1000,1000,1000},{1000,400,200,200,400,250,150,200,150,50},{50,0,0,0,50,0,50,0,0,0},{0,0,0,0,0,0,0,0,0,0},{6,2,1,1,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,0,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(27)).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,times(23)).handle(argThat(new IsPreemptionRequestFor(appC)));
    setup();
    conf.setPreemptionDisabled("root.queueA.queueB",true);
    ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
    policy2.editSchedule();
    verify(mDisp,times(50)).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
    setup();
    conf.setPreemptionDisabled("root.queueD.queueE",true);
    conf.setPreemptionDisabled("root.queueA.queueB",true);
    ProportionalCapacityPreemptionPolicy policy3=buildPolicy(qData);
    policy3.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appE)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appF)));
  }
  @Test public void testPerQueueDisablePreemptionInheritParent(){
    int[][] qData=new int[][]{{1000,500,200,200,100,500,200,200,100},{1000,1000,1000,1000,1000,1000,1000,1000,1000},{1000,700,0,350,350,300,0,200,100},{200,0,0,0,0,200,200,0,0},{0,0,0,0,0,0,0,0,0},{5,2,0,1,1,3,1,1,1},{-1,-1,1,1,1,-1,1,1,1},{2,3,0,0,0,3,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(17)).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,times(183)).handle(argThat(new IsPreemptionRequestFor(appB)));
    setup();
    conf.setPreemptionDisabled("root.queueA",true);
    ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
    policy2.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appD)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appE)));
  }
  @Test public void testPerQueuePreemptionNotAllUntouchable(){
    int[][] qData=new int[][]{{2000,1000,800,100,100,1000,500,300,200},{2000,2000,2000,2000,2000,2000,2000,2000,2000},{2000,1300,300,800,200,700,500,0,200},{300,0,0,0,0,300,0,300,0},{0,0,0,0,0,0,0,0,0},{6,3,1,1,1,3,1,1,1},{-1,-1,1,1,1,-1,1,1,1},{2,3,0,0,0,3,0,0,0}};
    conf.setPreemptionDisabled("root.queueA.queueC",true);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(100)).handle(argThat(new IsPreemptionRequestFor(appC)));
  }
  @Test public void testPerQueueDisablePreemptionRootDisablesAll(){
    int[][] qData=new int[][]{{1000,500,250,250,250,100,150,250,100,150},{1000,1000,1000,1000,1000,1000,1000,1000,1000,1000},{1000,20,0,20,490,240,250,490,240,250},{200,200,200,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0},{6,2,1,1,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,0,2,0,0,2,0,0}};
    conf.setPreemptionDisabled("root",true);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appD)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appE)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appF)));
  }
  @Test public void testPerQueueDisablePreemptionOverAbsMaxCapacity(){
    int[][] qData=new int[][]{{1000,725,360,365,275,17,258},{1000,1000,1000,1000,550,109,1000},{1000,741,396,345,259,110,149},{40,20,0,20,20,20,0},{0,0,0,0,0,0,0},{4,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1},{2,2,0,0,2,0,0}};
    conf.setPreemptionDisabled("root.queueD",true);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appC)));
  }
  @Test public void testOverCapacityImbalance(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,55,45,0},{20,10,10,0},{0,0,0,0},{2,1,1,0},{-1,1,1,0},{3,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testNaturalTermination(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,55,45,0},{20,10,10,0},{0,0,0,0},{2,1,1,0},{-1,1,1,0},{3,0,0,0}};
    conf.setFloat(CapacitySchedulerConfiguration.PREEMPTION_NATURAL_TERMINATION_FACTOR,(float)0.1);
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(isA(ContainerPreemptEvent.class));
  }
  @Test public void testObserveOnly(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,90,10,0},{80,10,20,50},{0,0,0,0},{2,1,1,0},{-1,1,1,0},{3,0,0,0}};
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_OBSERVE_ONLY,true);
    when(mCS.getConfiguration()).thenReturn(new CapacitySchedulerConfiguration(conf));
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(isA(ContainerPreemptEvent.class));
  }
  @Test public void testHierarchical(){
    int[][] qData=new int[][]{{200,100,50,50,100,10,90},{200,200,200,200,200,200,200},{200,110,60,50,90,90,0},{10,0,0,0,10,0,10},{0,0,0,0,0,0,0},{4,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1},{2,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testHierarchicalWithReserved(){
    int[][] qData=new int[][]{{200,100,50,50,100,10,90},{200,200,200,200,200,200,200},{200,110,60,50,90,90,0},{10,0,0,0,10,0,10},{40,25,15,10,15,15,0},{4,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1},{2,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testZeroGuar(){
    int[][] qData=new int[][]{{200,100,0,99,100,10,90},{200,200,200,200,200,200,200},{170,80,60,20,90,90,0},{10,0,0,0,10,0,10},{0,0,0,0,0,0,0},{4,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1},{2,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testZeroGuarOverCap(){
    int[][] qData=new int[][]{{200,100,0,100,0,100,100},{200,200,200,200,200,200,200},{170,170,60,20,90,0,0},{85,50,30,10,10,20,20},{0,0,0,0,0,0,0},{4,3,1,1,1,1,1},{-1,-1,1,1,1,-1,1},{2,3,0,0,0,1,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appD)));
  }
  @Test public void testHierarchicalLarge(){
    int[][] qData=new int[][]{{400,200,60,140,100,70,30,100,10,90},{400,400,400,400,400,400,400,400,400,400},{400,210,70,140,100,50,50,90,90,0},{15,0,0,0,0,0,0,0,0,15},{0,0,0,0,0,0,0,0,0,0},{6,2,1,1,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,0,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new IsPreemptionRequestFor(appA)));
    verify(mDisp,times(6)).handle(argThat(new IsPreemptionRequestFor(appE)));
  }
  @Test public void testContainerOrdering(){
    List<RMContainer> containers=new ArrayList<RMContainer>();
    ApplicationAttemptId appAttId=ApplicationAttemptId.newInstance(ApplicationId.newInstance(TS,10),0);
    RMContainer rm1=mockContainer(appAttId,5,mock(Resource.class),3);
    RMContainer rm2=mockContainer(appAttId,3,mock(Resource.class),3);
    RMContainer rm3=mockContainer(appAttId,2,mock(Resource.class),2);
    RMContainer rm4=mockContainer(appAttId,1,mock(Resource.class),2);
    RMContainer rm5=mockContainer(appAttId,4,mock(Resource.class),1);
    containers.add(rm3);
    containers.add(rm2);
    containers.add(rm1);
    containers.add(rm5);
    containers.add(rm4);
    FifoCandidatesSelector.sortContainers(containers);
    assert containers.get(0).equals(rm1);
    assert containers.get(1).equals(rm2);
    assert containers.get(2).equals(rm3);
    assert containers.get(3).equals(rm4);
    assert containers.get(4).equals(rm5);
  }
  @Test public void testPolicyInitializeAfterSchedulerInitialized(){
    @SuppressWarnings("resource") MockRM rm=new MockRM(conf);
    rm.init(conf);
    CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
    SchedulingMonitorManager smm=cs.getSchedulingMonitorManager();
    Service service=smm.getAvailableSchedulingMonitor();
    if (service instanceof SchedulingMonitor) {
      ProportionalCapacityPreemptionPolicy policy=(ProportionalCapacityPreemptionPolicy)((SchedulingMonitor)service).getSchedulingEditPolicy();
      assertNotNull(policy.getResourceCalculator());
      return;
    }
    fail("Failed to find SchedulingMonitor service, please check what happened");
  }
  @Test public void testSkipAMContainer(){
    int[][] qData=new int[][]{{100,50,50},{100,100,100},{100,100,0},{70,20,50},{0,0,0},{5,4,1},{-1,1,1},{2,0,0}};
    setAMContainer=true;
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(24)).handle(argThat(new IsPreemptionRequestFor(appD)));
    verify(mDisp,times(24)).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,times(2)).handle(argThat(new IsPreemptionRequestFor(appB)));
    setAMContainer=false;
  }
  @Test public void testPreemptSkippedAMContainers(){
    int[][] qData=new int[][]{{100,10,90},{100,100,100},{100,100,0},{70,20,90},{0,0,0},{5,4,1},{-1,5,5},{2,0,0}};
    setAMContainer=true;
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestFor(appD)));
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(appA)));
    setAMContainer=false;
  }
  @Test public void testAMResourcePercentForSkippedAMContainers(){
    int[][] qData=new int[][]{{100,10,90},{100,100,100},{100,100,0},{70,20,90},{0,0,0},{5,4,1},{-1,5,5},{2,0,0}};
    setAMContainer=true;
    setAMResourcePercent=0.5f;
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestFor(appD)));
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestFor(appC)));
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(appB)));
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(appA)));
    setAMContainer=false;
  }
  @Test public void testPreemptionWithVCoreResource(){
    int[][] qData=new int[][]{{100,100,100},{5,1,1},{2,0,0}};
    String[][] resData=new String[][]{{"100:100","50:50","50:50"},{"10:100","10:100","0"},{"70:20","70:20","10:100"},{"0","0","0"},{"-1","1:10","1:10"}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData,resData,true);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testHierarchicalLarge3Levels(){
    int[][] qData=new int[][]{{400,200,60,140,100,40,100,70,30,100,10,90},{400,400,400,400,400,400,400,400,400,400,400,400},{400,210,60,150,100,50,100,50,50,90,10,80},{10,0,0,0,0,0,0,0,0,0,0,10},{0,0,0,0,0,0,0,0,0,0,0,0},{7,3,1,2,1,1,2,1,1,2,1,1},{-1,-1,1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,2,0,0,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new IsPreemptionRequestFor(appC)));
    assertEquals(10,policy.getQueuePartitions().get("queueE").get("").preemptableExtra.getMemorySize());
    TempQueuePerPartition tempQueueAPartition=policy.getQueuePartitions().get("queueA").get("");
    assertEquals(0,tempQueueAPartition.untouchableExtra.getMemorySize());
    long extraForQueueA=tempQueueAPartition.getUsed().getMemorySize() - tempQueueAPartition.getGuaranteed().getMemorySize();
    assertEquals(extraForQueueA,tempQueueAPartition.preemptableExtra.getMemorySize());
  }
  @Test public void testHierarchicalLarge3LevelsWithReserved(){
    int[][] qData=new int[][]{{400,200,60,140,100,40,100,70,30,100,10,90},{400,400,400,400,400,400,400,400,400,400,400,400},{400,210,60,150,100,50,100,50,50,90,10,80},{10,0,0,0,0,0,0,0,0,0,0,10},{50,30,20,10,5,5,0,0,0,10,10,0},{7,3,1,2,1,1,2,1,1,2,1,1},{-1,-1,1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,2,0,0,2,0,0,2,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new IsPreemptionRequestFor(appC)));
    assertEquals(10,policy.getQueuePartitions().get("queueE").get("").preemptableExtra.getMemorySize());
    TempQueuePerPartition tempQueueAPartition=policy.getQueuePartitions().get("queueA").get("");
    assertEquals(0,tempQueueAPartition.untouchableExtra.getMemorySize());
    long extraForQueueA=tempQueueAPartition.getUsed().getMemorySize() - tempQueueAPartition.getGuaranteed().getMemorySize();
    assertEquals(extraForQueueA,tempQueueAPartition.preemptableExtra.getMemorySize());
  }
  @Test public void testPreemptionNotHappenForSingleReservedQueue(){
    int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,70,0,0},{10,30,0,0},{0,50,0,0},{1,1,0,0},{-1,1,1,1},{3,0,0,0}};
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  }
  @Test public void testRefreshPreemptionProperties() throws Exception {
    ProportionalCapacityPreemptionPolicy policy=buildPolicy(Q_DATA_FOR_IGNORE);
    assertEquals(CapacitySchedulerConfiguration.DEFAULT_PREEMPTION_MONITORING_INTERVAL,policy.getMonitoringInterval());
    assertEquals(CapacitySchedulerConfiguration.DEFAULT_PREEMPTION_OBSERVE_ONLY,policy.isObserveOnly());
    CapacitySchedulerConfiguration newConf=new CapacitySchedulerConfiguration(conf);
    long newMonitoringInterval=5000;
    boolean newObserveOnly=true;
    newConf.setLong(CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,newMonitoringInterval);
    newConf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_OBSERVE_ONLY,newObserveOnly);
    when(mCS.getConfiguration()).thenReturn(newConf);
    policy.editSchedule();
    assertEquals(newMonitoringInterval,policy.getMonitoringInterval());
    assertEquals(newObserveOnly,policy.isObserveOnly());
  }
static class IsPreemptionRequestFor extends ArgumentMatcher<ContainerPreemptEvent> {
    private final ApplicationAttemptId appAttId;
    private final SchedulerEventType type;
    IsPreemptionRequestFor(    ApplicationAttemptId appAttId){
      this(appAttId,MARK_CONTAINER_FOR_PREEMPTION);
    }
    IsPreemptionRequestFor(    ApplicationAttemptId appAttId,    SchedulerEventType type){
      this.appAttId=appAttId;
      this.type=type;
    }
    @Override public boolean matches(    Object o){
      return appAttId.equals(((ContainerPreemptEvent)o).getAppId()) && type.equals(((ContainerPreemptEvent)o).getType());
    }
    @Override public String toString(){
      return appAttId.toString();
    }
  }
  ProportionalCapacityPreemptionPolicy buildPolicy(  int[][] qData){
    ProportionalCapacityPreemptionPolicy policy=new ProportionalCapacityPreemptionPolicy(rmContext,mCS,mClock);
    clusterResources=Resource.newInstance(leafAbsCapacities(qData[0],qData[7]),0);
    ParentQueue mRoot=buildMockRootQueue(rand,qData);
    when(mCS.getRootQueue()).thenReturn(mRoot);
    setResourceAndNodeDetails();
    return policy;
  }
  ProportionalCapacityPreemptionPolicy buildPolicy(  int[][] qData,  String[][] resData,  boolean useDominantResourceCalculator){
    if (useDominantResourceCalculator) {
      when(mCS.getResourceCalculator()).thenReturn(new DominantResourceCalculator());
    }
    ProportionalCapacityPreemptionPolicy policy=new ProportionalCapacityPreemptionPolicy(rmContext,mCS,mClock);
    clusterResources=leafAbsCapacities(parseResourceDetails(resData[0]),qData[2]);
    ParentQueue mRoot=buildMockRootQueue(rand,resData,qData);
    when(mCS.getRootQueue()).thenReturn(mRoot);
    setResourceAndNodeDetails();
    return policy;
  }
  private void setResourceAndNodeDetails(){
    when(mCS.getClusterResource()).thenReturn(clusterResources);
    when(lm.getResourceByLabel(anyString(),any(Resource.class))).thenReturn(clusterResources);
    FiCaSchedulerNode mNode=mock(FiCaSchedulerNode.class);
    when(mNode.getPartition()).thenReturn(RMNodeLabelsManager.NO_LABEL);
    when(mCS.getSchedulerNode(any(NodeId.class))).thenReturn(mNode);
  }
  ParentQueue buildMockRootQueue(  Random r,  int[]... queueData){
    Resource[] abs=generateResourceList(queueData[0]);
    Resource[] used=generateResourceList(queueData[2]);
    Resource[] pending=generateResourceList(queueData[3]);
    Resource[] reserved=generateResourceList(queueData[4]);
    Resource[] gran=generateResourceList(queueData[6]);
    int[] maxCap=queueData[1];
    int[] apps=queueData[5];
    int[] queues=queueData[7];
    return mockNested(abs,maxCap,used,pending,reserved,apps,gran,queues);
  }
  ParentQueue buildMockRootQueue(  Random r,  String[][] resData,  int[]... queueData){
    Resource[] abs=parseResourceDetails(resData[0]);
    Resource[] used=parseResourceDetails(resData[1]);
    Resource[] pending=parseResourceDetails(resData[2]);
    Resource[] reserved=parseResourceDetails(resData[3]);
    Resource[] gran=parseResourceDetails(resData[4]);
    int[] maxCap=queueData[0];
    int[] apps=queueData[1];
    int[] queues=queueData[2];
    return mockNested(abs,maxCap,used,pending,reserved,apps,gran,queues);
  }
  Resource[] parseResourceDetails(  String[] resData){
    List<Resource> resourceList=new ArrayList<Resource>();
    for (int i=0; i < resData.length; i++) {
      String[] resource=resData[i].split(":");
      if (resource.length == 1) {
        resourceList.add(Resource.newInstance(Integer.parseInt(resource[0]),0));
      }
 else {
        resourceList.add(Resource.newInstance(Integer.parseInt(resource[0]),Integer.parseInt(resource[1])));
      }
    }
    return resourceList.toArray(new Resource[resourceList.size()]);
  }
  Resource[] generateResourceList(  int[] qData){
    List<Resource> resourceList=new ArrayList<Resource>();
    for (int i=0; i < qData.length; i++) {
      resourceList.add(Resource.newInstance(qData[i],0));
    }
    return resourceList.toArray(new Resource[resourceList.size()]);
  }
  ParentQueue mockNested(  Resource[] abs,  int[] maxCap,  Resource[] used,  Resource[] pending,  Resource[] reserved,  int[] apps,  Resource[] gran,  int[] queues){
    ResourceCalculator rc=mCS.getResourceCalculator();
    Resource tot=leafAbsCapacities(abs,queues);
    Deque<ParentQueue> pqs=new LinkedList<ParentQueue>();
    ParentQueue root=mockParentQueue(null,queues[0],pqs);
    ResourceUsage resUsage=new ResourceUsage();
    resUsage.setUsed(used[0]);
    resUsage.setReserved(reserved[0]);
    when(root.getQueueName()).thenReturn(CapacitySchedulerConfiguration.ROOT);
    when(root.getAbsoluteUsedCapacity()).thenReturn(Resources.divide(rc,tot,used[0],tot));
    when(root.getAbsoluteCapacity()).thenReturn(Resources.divide(rc,tot,abs[0],tot));
    when(root.getAbsoluteMaximumCapacity()).thenReturn(maxCap[0] / (float)tot.getMemorySize());
    when(root.getQueueResourceUsage()).thenReturn(resUsage);
    QueueCapacities rootQc=new QueueCapacities(true);
    rootQc.setAbsoluteUsedCapacity(Resources.divide(rc,tot,used[0],tot));
    rootQc.setAbsoluteCapacity(Resources.divide(rc,tot,abs[0],tot));
    rootQc.setAbsoluteMaximumCapacity(maxCap[0] / (float)tot.getMemorySize());
    when(root.getQueueCapacities()).thenReturn(rootQc);
    when(root.getQueuePath()).thenReturn(CapacitySchedulerConfiguration.ROOT);
    boolean preemptionDisabled=mockPreemptionStatus("root");
    when(root.getPreemptionDisabled()).thenReturn(preemptionDisabled);
    QueueResourceQuotas rootQr=new QueueResourceQuotas();
    rootQr.setEffectiveMaxResource(Resource.newInstance(maxCap[0],0));
    rootQr.setEffectiveMinResource(abs[0]);
    rootQr.setEffectiveMaxResource(RMNodeLabelsManager.NO_LABEL,Resource.newInstance(maxCap[0],0));
    rootQr.setEffectiveMinResource(RMNodeLabelsManager.NO_LABEL,abs[0]);
    when(root.getQueueResourceQuotas()).thenReturn(rootQr);
    when(root.getEffectiveCapacity(RMNodeLabelsManager.NO_LABEL)).thenReturn(abs[0]);
    when(root.getEffectiveMaxCapacity(RMNodeLabelsManager.NO_LABEL)).thenReturn(Resource.newInstance(maxCap[0],0));
    for (int i=1; i < queues.length; ++i) {
      final CSQueue q;
      final ParentQueue p=pqs.removeLast();
      final String queueName="queue" + ((char)('A' + i - 1));
      if (queues[i] > 0) {
        q=mockParentQueue(p,queues[i],pqs);
        ResourceUsage resUsagePerQueue=new ResourceUsage();
        resUsagePerQueue.setUsed(used[i]);
        resUsagePerQueue.setReserved(reserved[i]);
        when(q.getQueueResourceUsage()).thenReturn(resUsagePerQueue);
      }
 else {
        q=mockLeafQueue(p,tot,i,abs,used,pending,reserved,apps,gran);
      }
      when(q.getParent()).thenReturn(p);
      when(q.getQueueName()).thenReturn(queueName);
      when(q.getAbsoluteUsedCapacity()).thenReturn(Resources.divide(rc,tot,used[i],tot));
      when(q.getAbsoluteCapacity()).thenReturn(Resources.divide(rc,tot,abs[i],tot));
      when(q.getAbsoluteMaximumCapacity()).thenReturn(maxCap[i] / (float)tot.getMemorySize());
      QueueCapacities qc=new QueueCapacities(false);
      qc.setAbsoluteUsedCapacity(Resources.divide(rc,tot,used[i],tot));
      qc.setAbsoluteCapacity(Resources.divide(rc,tot,abs[i],tot));
      qc.setAbsoluteMaximumCapacity(maxCap[i] / (float)tot.getMemorySize());
      when(q.getQueueCapacities()).thenReturn(qc);
      QueueResourceQuotas qr=new QueueResourceQuotas();
      qr.setEffectiveMaxResource(Resource.newInstance(maxCap[i],0));
      qr.setEffectiveMinResource(abs[i]);
      qr.setEffectiveMaxResource(RMNodeLabelsManager.NO_LABEL,Resource.newInstance(maxCap[i],0));
      qr.setEffectiveMinResource(RMNodeLabelsManager.NO_LABEL,abs[i]);
      when(q.getQueueResourceQuotas()).thenReturn(qr);
      when(q.getEffectiveCapacity(RMNodeLabelsManager.NO_LABEL)).thenReturn(abs[i]);
      when(q.getEffectiveMaxCapacity(RMNodeLabelsManager.NO_LABEL)).thenReturn(Resource.newInstance(maxCap[i],0));
      String parentPathName=p.getQueuePath();
      parentPathName=(parentPathName == null) ? "root" : parentPathName;
      String queuePathName=(parentPathName + "." + queueName).replace("/","root");
      when(q.getQueuePath()).thenReturn(queuePathName);
      preemptionDisabled=mockPreemptionStatus(queuePathName);
      when(q.getPreemptionDisabled()).thenReturn(preemptionDisabled);
    }
    assert 0 == pqs.size();
    return root;
  }
  private boolean mockPreemptionStatus(  String queuePathName){
    boolean preemptionDisabled=false;
    StringTokenizer tokenizer=new StringTokenizer(queuePathName,".");
    String qName="";
    while (tokenizer.hasMoreTokens()) {
      qName+=tokenizer.nextToken();
      preemptionDisabled=conf.getPreemptionDisabled(qName,preemptionDisabled);
      qName+=".";
    }
    return preemptionDisabled;
  }
  ParentQueue mockParentQueue(  ParentQueue p,  int subqueues,  Deque<ParentQueue> pqs){
    ParentQueue pq=mock(ParentQueue.class);
    List<CSQueue> cqs=new ArrayList<CSQueue>();
    when(pq.getChildQueues()).thenReturn(cqs);
    ReentrantReadWriteLock lock=new ReentrantReadWriteLock();
    when(pq.getReadLock()).thenReturn(lock.readLock());
    QueueOrderingPolicy policy=mock(QueueOrderingPolicy.class);
    when(policy.getConfigName()).thenReturn(CapacitySchedulerConfiguration.QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY);
    when(pq.getQueueOrderingPolicy()).thenReturn(policy);
    when(pq.getPriority()).thenReturn(Priority.newInstance(0));
    for (int i=0; i < subqueues; ++i) {
      pqs.add(pq);
    }
    if (p != null) {
      p.getChildQueues().add(pq);
    }
    return pq;
  }
  @SuppressWarnings("rawtypes") LeafQueue mockLeafQueue(  ParentQueue p,  Resource tot,  int i,  Resource[] abs,  Resource[] used,  Resource[] pending,  Resource[] reserved,  int[] apps,  Resource[] gran){
    LeafQueue lq=mock(LeafQueue.class);
    ResourceCalculator rc=mCS.getResourceCalculator();
    List<ApplicationAttemptId> appAttemptIdList=new ArrayList<ApplicationAttemptId>();
    when(lq.getTotalPendingResourcesConsideringUserLimit(isA(Resource.class),isA(String.class),eq(false))).thenReturn(pending[i]);
    when(lq.getTotalPendingResourcesConsideringUserLimit(isA(Resource.class),isA(String.class),eq(true))).thenReturn(Resources.componentwiseMax(Resources.subtract(pending[i],reserved[i] == null ? Resources.none() : reserved[i]),Resources.none()));
    ResourceUsage ru=new ResourceUsage();
    ru.setPending(pending[i]);
    ru.setUsed(used[i]);
    ru.setReserved(reserved[i]);
    when(lq.getQueueResourceUsage()).thenReturn(ru);
    final NavigableSet<FiCaSchedulerApp> qApps=new TreeSet<FiCaSchedulerApp>(new Comparator<FiCaSchedulerApp>(){
      @Override public int compare(      FiCaSchedulerApp a1,      FiCaSchedulerApp a2){
        return a1.getApplicationAttemptId().compareTo(a2.getApplicationAttemptId());
      }
    }
);
    if (apps[i] != 0) {
      Resource aUsed=Resources.divideAndCeil(rc,used[i],apps[i]);
      Resource aPending=Resources.divideAndCeil(rc,pending[i],apps[i]);
      Resource aReserve=Resources.divideAndCeil(rc,reserved[i],apps[i]);
      for (int a=0; a < apps[i]; ++a) {
        FiCaSchedulerApp mockFiCaApp=mockApp(i,appAlloc,aUsed,aPending,aReserve,gran[i]);
        qApps.add(mockFiCaApp);
        ++appAlloc;
        appAttemptIdList.add(mockFiCaApp.getApplicationAttemptId());
      }
      when(mCS.getAppsInQueue("queue" + (char)('A' + i - 1))).thenReturn(appAttemptIdList);
    }
    when(lq.getApplications()).thenReturn(qApps);
    @SuppressWarnings("unchecked") OrderingPolicy<FiCaSchedulerApp> so=mock(OrderingPolicy.class);
    when(so.getPreemptionIterator()).thenAnswer(new Answer(){
      public Object answer(      InvocationOnMock invocation){
        return qApps.descendingIterator();
      }
    }
);
    when(lq.getOrderingPolicy()).thenReturn(so);
    if (setAMResourcePercent != 0.0f) {
      when(lq.getMaxAMResourcePerQueuePercent()).thenReturn(setAMResourcePercent);
    }
    ReentrantReadWriteLock lock=new ReentrantReadWriteLock();
    when(lq.getReadLock()).thenReturn(lock.readLock());
    when(lq.getPriority()).thenReturn(Priority.newInstance(0));
    p.getChildQueues().add(lq);
    return lq;
  }
  FiCaSchedulerApp mockApp(  int qid,  int id,  Resource used,  Resource pending,  Resource reserved,  Resource gran){
    FiCaSchedulerApp app=mock(FiCaSchedulerApp.class);
    ResourceCalculator rc=mCS.getResourceCalculator();
    ApplicationId appId=ApplicationId.newInstance(TS,id);
    ApplicationAttemptId appAttId=ApplicationAttemptId.newInstance(appId,0);
    when(app.getApplicationId()).thenReturn(appId);
    when(app.getApplicationAttemptId()).thenReturn(appAttId);
    int cAlloc=0;
    Resource unit=gran;
    List<RMContainer> cReserved=new ArrayList<RMContainer>();
    Resource resIter=Resource.newInstance(0,0);
    for (; Resources.lessThan(rc,clusterResources,resIter,reserved); Resources.addTo(resIter,gran)) {
      cReserved.add(mockContainer(appAttId,cAlloc,unit,priority.CONTAINER.getValue()));
      ++cAlloc;
    }
    when(app.getReservedContainers()).thenReturn(cReserved);
    List<RMContainer> cLive=new ArrayList<RMContainer>();
    Resource usedIter=Resource.newInstance(0,0);
    int i=0;
    for (; Resources.lessThan(rc,clusterResources,usedIter,used); Resources.addTo(usedIter,gran)) {
      if (setAMContainer && i == 0) {
        cLive.add(mockContainer(appAttId,cAlloc,unit,priority.AMCONTAINER.getValue()));
      }
 else       if (setLabeledContainer && i == 1) {
        cLive.add(mockContainer(appAttId,cAlloc,unit,priority.LABELEDCONTAINER.getValue()));
        Resources.addTo(used,Resource.newInstance(1,1));
      }
 else {
        cLive.add(mockContainer(appAttId,cAlloc,unit,priority.CONTAINER.getValue()));
      }
      ++cAlloc;
      ++i;
    }
    when(app.getLiveContainers()).thenReturn(cLive);
    return app;
  }
  RMContainer mockContainer(  ApplicationAttemptId appAttId,  int id,  Resource r,  int cpriority){
    ContainerId cId=ContainerId.newContainerId(appAttId,id);
    Container c=mock(Container.class);
    when(c.getResource()).thenReturn(r);
    when(c.getPriority()).thenReturn(Priority.newInstance(cpriority));
    SchedulerRequestKey sk=SchedulerRequestKey.extractFrom(c);
    RMContainer mC=mock(RMContainer.class);
    when(mC.getContainerId()).thenReturn(cId);
    when(mC.getAllocatedSchedulerKey()).thenReturn(sk);
    when(mC.getContainer()).thenReturn(c);
    when(mC.getApplicationAttemptId()).thenReturn(appAttId);
    when(mC.getAllocatedResource()).thenReturn(r);
    if (priority.AMCONTAINER.getValue() == cpriority) {
      when(mC.isAMContainer()).thenReturn(true);
    }
    if (priority.LABELEDCONTAINER.getValue() == cpriority) {
      when(mC.getAllocatedNode()).thenReturn(NodeId.newInstance("node1",0));
    }
    return mC;
  }
  static int leafAbsCapacities(  int[] abs,  int[] subqueues){
    int ret=0;
    for (int i=0; i < abs.length; ++i) {
      if (0 == subqueues[i]) {
        ret+=abs[i];
      }
    }
    return ret;
  }
  static Resource leafAbsCapacities(  Resource[] abs,  int[] subqueues){
    Resource ret=Resource.newInstance(0,0);
    for (int i=0; i < abs.length; ++i) {
      if (0 == subqueues[i]) {
        Resources.addTo(ret,abs[i]);
      }
    }
    return ret;
  }
}
