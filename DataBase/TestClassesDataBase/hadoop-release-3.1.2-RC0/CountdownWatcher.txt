protected static class CountdownWatcher implements Watcher {
  volatile CountDownLatch clientConnected;
  volatile boolean connected;
  protected ZooKeeper client;
  public void initializeWatchedClient(  ZooKeeper zk){
    if (client != null) {
      throw new RuntimeException("Watched Client was already set");
    }
    client=zk;
  }
  public CountdownWatcher(){
    reset();
  }
  synchronized public void reset(){
    clientConnected=new CountDownLatch(1);
    connected=false;
  }
  @Override synchronized public void process(  WatchedEvent event){
    if (event.getState() == KeeperState.SyncConnected || event.getState() == KeeperState.ConnectedReadOnly) {
      connected=true;
      notifyAll();
      clientConnected.countDown();
    }
 else {
      connected=false;
      notifyAll();
    }
  }
  synchronized boolean isConnected(){
    return connected;
  }
  @VisibleForTesting public synchronized void waitForConnected(  long timeout) throws InterruptedException, TimeoutException {
    long expire=Time.now() + timeout;
    long left=timeout;
    while (!connected && left > 0) {
      wait(left);
      left=expire - Time.now();
    }
    if (!connected) {
      throw new TimeoutException("Did not connect");
    }
  }
  @VisibleForTesting public synchronized void waitForDisconnected(  long timeout) throws InterruptedException, TimeoutException {
    long expire=Time.now() + timeout;
    long left=timeout;
    while (connected && left > 0) {
      wait(left);
      left=expire - Time.now();
    }
    if (connected) {
      throw new TimeoutException("Did not disconnect");
    }
  }
}
