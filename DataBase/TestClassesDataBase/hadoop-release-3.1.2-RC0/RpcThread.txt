/** 
 * This thread waits for a proxy for the specified timeout, and retains any throwable that was raised in the process
 */
private class RpcThread extends Thread {
  private Throwable caught;
  private int connectRetries;
  private volatile boolean waitStarted=false;
  private RpcThread(  int connectRetries){
    this.connectRetries=connectRetries;
  }
  @Override public void run(){
    try {
      Configuration config=new Configuration(conf);
      config.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,connectRetries);
      config.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,connectRetries);
      waitStarted=true;
      short invalidPort=20;
      InetSocketAddress invalidAddress=new InetSocketAddress(ADDRESS,invalidPort);
      TestRpcBase.TestRpcService proxy=RPC.getProxy(TestRpcBase.TestRpcService.class,1L,invalidAddress,conf);
      proxy.echo(null,newEchoRequest("hello"));
    }
 catch (    Throwable throwable) {
      caught=throwable;
    }
  }
  public Throwable getCaught(){
    return caught;
  }
}
