private static class ResourceConf {
  private final int maxResources;
  private final long maxResourcesMB;
  private final long maxSingleResourceMB;
  private final int numOfTmpFiles;
  private final int numOfTmpArchives;
  private final int numOfTmpLibJars;
  private final boolean jobJar;
  private final int numOfDCFiles;
  private final int numOfDCArchives;
  private final long sizeOfResource;
  private final boolean pathsWithFrags;
  private final boolean pathsWithScheme;
  private final boolean absolutePaths;
  private ResourceConf(){
    this(new Builder());
  }
  private ResourceConf(  Builder builder){
    this.maxResources=builder.maxResources;
    this.maxResourcesMB=builder.maxResourcesMB;
    this.maxSingleResourceMB=builder.maxSingleResourceMB;
    this.numOfTmpFiles=builder.numOfTmpFiles;
    this.numOfTmpArchives=builder.numOfTmpArchives;
    this.numOfTmpLibJars=builder.numOfTmpLibJars;
    this.jobJar=builder.jobJar;
    this.numOfDCFiles=builder.numOfDCFiles;
    this.numOfDCArchives=builder.numOfDCArchives;
    this.sizeOfResource=builder.sizeOfResource;
    this.pathsWithFrags=builder.pathsWithFrags;
    this.pathsWithScheme=builder.pathsWithScheme;
    this.absolutePaths=builder.absolutePaths;
  }
static class Builder {
    private int maxResources=0;
    private long maxResourcesMB=0;
    private long maxSingleResourceMB=0;
    private int numOfTmpFiles=0;
    private int numOfTmpArchives=0;
    private int numOfTmpLibJars=0;
    private boolean jobJar=false;
    private int numOfDCFiles=0;
    private int numOfDCArchives=0;
    private long sizeOfResource=0;
    private boolean pathsWithFrags=false;
    private boolean pathsWithScheme=false;
    private boolean absolutePaths=true;
    private Builder(){
    }
    private Builder setMaxResources(    int max){
      this.maxResources=max;
      return this;
    }
    private Builder setMaxResourcesMB(    long max){
      this.maxResourcesMB=max;
      return this;
    }
    private Builder setMaxSingleResourceMB(    long max){
      this.maxSingleResourceMB=max;
      return this;
    }
    private Builder setNumOfTmpFiles(    int num){
      this.numOfTmpFiles=num;
      return this;
    }
    private Builder setNumOfTmpArchives(    int num){
      this.numOfTmpArchives=num;
      return this;
    }
    private Builder setNumOfTmpLibJars(    int num){
      this.numOfTmpLibJars=num;
      return this;
    }
    private Builder setJobJar(    boolean jar){
      this.jobJar=jar;
      return this;
    }
    private Builder setNumOfDCFiles(    int num){
      this.numOfDCFiles=num;
      return this;
    }
    private Builder setNumOfDCArchives(    int num){
      this.numOfDCArchives=num;
      return this;
    }
    private Builder setSizeOfResource(    long sizeMB){
      this.sizeOfResource=sizeMB;
      return this;
    }
    private Builder setPathsWithFrags(    boolean fragments){
      this.pathsWithFrags=fragments;
      return this;
    }
    private Builder setPathsWithScheme(    boolean scheme){
      this.pathsWithScheme=scheme;
      return this;
    }
    private Builder setAbsolutePaths(    boolean absolute){
      this.absolutePaths=absolute;
      return this;
    }
    ResourceConf build(){
      return new ResourceConf(this);
    }
  }
  private Job setupJobConf(  JobConf conf) throws IOException {
    conf.set("tmpfiles",buildPathString("tmpFiles",this.numOfTmpFiles,".txt"));
    conf.set("tmpjars",buildPathString("tmpjars",this.numOfTmpLibJars,".jar"));
    conf.set("tmparchives",buildPathString("tmpArchives",this.numOfTmpArchives,".tgz"));
    conf.set(MRJobConfig.CACHE_ARCHIVES,buildDistributedCachePathString("cacheArchives",this.numOfDCArchives,".tgz"));
    conf.set(MRJobConfig.CACHE_FILES,buildDistributedCachePathString("cacheFiles",this.numOfDCFiles,".txt"));
    if (this.jobJar) {
      String fragment="";
      if (pathsWithFrags) {
        fragment="#jobjarfrag.jar";
      }
      if (pathsWithScheme) {
        conf.setJar("file:///jobjar.jar" + fragment);
      }
 else {
        if (absolutePaths) {
          conf.setJar("/jobjar.jar" + fragment);
        }
 else {
          conf.setJar("jobjar.jar" + fragment);
        }
      }
    }
    conf.setInt(MRJobConfig.MAX_RESOURCES,this.maxResources);
    conf.setLong(MRJobConfig.MAX_RESOURCES_MB,this.maxResourcesMB);
    conf.setLong(MRJobConfig.MAX_SINGLE_RESOURCE_MB,this.maxSingleResourceMB);
    return new Job(conf);
  }
  private String buildDistributedCachePathString(  String pathPrefix,  int numOfPaths,  String extension){
    if (numOfPaths < 1) {
      return "";
    }
 else {
      StringBuilder b=new StringBuilder();
      b.append(buildPathStringSub(pathPrefix,"file:///" + pathPrefix,extension,0));
      for (int i=1; i < numOfPaths; i++) {
        b.append("," + buildPathStringSub(pathPrefix,"file:///" + pathPrefix,extension,i));
      }
      return b.toString();
    }
  }
  private String buildPathString(  String pathPrefix,  int numOfPaths,  String extension){
    if (numOfPaths < 1) {
      return "";
    }
 else {
      StringBuilder b=new StringBuilder();
      String processedPath;
      if (pathsWithScheme) {
        processedPath="file:///" + pathPrefix;
      }
 else {
        if (absolutePaths) {
          processedPath="/" + pathPrefix;
        }
 else {
          processedPath=pathPrefix;
        }
      }
      b.append(buildPathStringSub(pathPrefix,processedPath,extension,0));
      for (int i=1; i < numOfPaths; i++) {
        b.append("," + buildPathStringSub(pathPrefix,processedPath,extension,i));
      }
      return b.toString();
    }
  }
  private String buildPathStringSub(  String pathPrefix,  String processedPath,  String extension,  int num){
    if (pathsWithFrags) {
      return processedPath + num + extension+ "#"+ pathPrefix+ "fragment"+ num+ extension;
    }
 else {
      return processedPath + num + extension;
    }
  }
}
