/** 
 * Test unset and change directory's erasure coding policy.
 */
public class TestUnsetAndChangeDirectoryEcPolicy {
  public static final Log LOG=LogFactory.getLog(TestUnsetAndChangeDirectoryEcPolicy.class);
  private MiniDFSCluster cluster;
  private Configuration conf=new Configuration();
  private DistributedFileSystem fs;
  private ErasureCodingPolicy ecPolicy=StripedFileTestUtil.getDefaultECPolicy();
  private final short dataBlocks=(short)ecPolicy.getNumDataUnits();
  private final short parityBlocks=(short)ecPolicy.getNumParityUnits();
  private final int cellSize=ecPolicy.getCellSize();
  private final int stripsPerBlock=2;
  private final int blockSize=stripsPerBlock * cellSize;
  private final int blockGroupSize=dataBlocks * blockSize;
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @Before public void setup() throws IOException {
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,0);
    if (ErasureCodeNative.isNativeCodeLoaded()) {
      conf.set(CodecUtil.IO_ERASURECODE_CODEC_RS_RAWCODERS_KEY,NativeRSRawErasureCoderFactory.CODER_NAME);
    }
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(dataBlocks + parityBlocks).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    DFSTestUtil.enableAllECPolicies(fs);
  }
  @After public void tearDown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testUnsetEcPolicy() throws Exception {
    final int numBlocks=1;
    final int fileLen=blockGroupSize * numBlocks;
    final Path dirPath=new Path("/striped");
    final Path ecFilePath=new Path(dirPath,"ec_file");
    final Path replicateFilePath=new Path(dirPath,"3x_file");
    fs.mkdirs(dirPath);
    fs.unsetErasureCodingPolicy(dirPath);
    fs.setErasureCodingPolicy(dirPath,ecPolicy.getName());
    DFSTestUtil.createFile(fs,ecFilePath,fileLen,(short)1,0L);
    fs.unsetErasureCodingPolicy(dirPath);
    DFSTestUtil.createFile(fs,replicateFilePath,fileLen,(short)1,0L);
    ErasureCodingPolicy tempEcPolicy=fs.getErasureCodingPolicy(ecFilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(replicateFilePath);
    Assert.assertNull("Replicate file should not have erasure coding policy!",tempEcPolicy);
    tempEcPolicy=fs.getErasureCodingPolicy(dirPath);
    Assert.assertNull("Directory should no have erasure coding policy set!",tempEcPolicy);
    fs.delete(dirPath,true);
  }
  @Test public void testNestedEcPolicy() throws Exception {
    final int numBlocks=1;
    final int fileLen=blockGroupSize * numBlocks;
    final Path parentDir=new Path("/ec-6-3");
    final Path childDir=new Path("/ec-6-3/ec-3-2");
    final Path ec63FilePath=new Path(childDir,"ec_6_3_file");
    final Path ec32FilePath=new Path(childDir,"ec_3_2_file");
    final Path ec63FilePath2=new Path(childDir,"ec_6_3_file_2");
    final ErasureCodingPolicy ec32Policy=SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.RS_3_2_POLICY_ID);
    fs.mkdirs(parentDir);
    fs.setErasureCodingPolicy(parentDir,ecPolicy.getName());
    fs.mkdirs(childDir);
    DFSTestUtil.createFile(fs,ec63FilePath,fileLen,(short)1,0L);
    fs.setErasureCodingPolicy(childDir,ec32Policy.getName());
    DFSTestUtil.createFile(fs,ec32FilePath,fileLen,(short)1,0L);
    ErasureCodingPolicy tempEcPolicy=fs.getErasureCodingPolicy(ec63FilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(ec32FilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ec32Policy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(childDir);
    Assert.assertTrue("Directory should have erasure coding policy set!",tempEcPolicy.getName().equals(ec32Policy.getName()));
    fs.unsetErasureCodingPolicy(childDir);
    DFSTestUtil.createFile(fs,ec63FilePath2,fileLen,(short)1,0L);
    tempEcPolicy=fs.getErasureCodingPolicy(ec63FilePath2);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(childDir);
    Assert.assertTrue("Directory should have erasure coding policy set!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    fs.delete(parentDir,true);
  }
  @Test public void testUnsetRootDirEcPolicy() throws Exception {
    final int numBlocks=1;
    final int fileLen=blockGroupSize * numBlocks;
    final Path rootPath=new Path("/");
    final Path ecFilePath=new Path(rootPath,"ec_file");
    final Path replicateFilePath=new Path(rootPath,"rep_file");
    fs.unsetErasureCodingPolicy(rootPath);
    fs.setErasureCodingPolicy(rootPath,ecPolicy.getName());
    DFSTestUtil.createFile(fs,ecFilePath,fileLen,(short)1,0L);
    fs.unsetErasureCodingPolicy(rootPath);
    DFSTestUtil.createFile(fs,replicateFilePath,fileLen,(short)1,0L);
    ErasureCodingPolicy tempEcPolicy=fs.getErasureCodingPolicy(ecFilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(replicateFilePath);
    Assert.assertNull("Replicate file should not have erasure coding policy!",tempEcPolicy);
    tempEcPolicy=fs.getErasureCodingPolicy(rootPath);
    Assert.assertNull("Directory should not have erasure coding policy set!",tempEcPolicy);
    fs.delete(rootPath,true);
  }
  @Test public void testChangeRootDirEcPolicy() throws Exception {
    final int numBlocks=1;
    final int fileLen=blockGroupSize * numBlocks;
    final Path rootPath=new Path("/");
    final Path ec63FilePath=new Path(rootPath,"ec_6_3_file");
    final Path ec32FilePath=new Path(rootPath,"ec_3_2_file");
    final ErasureCodingPolicy ec32Policy=SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.RS_3_2_POLICY_ID);
    fs.unsetErasureCodingPolicy(rootPath);
    fs.setErasureCodingPolicy(rootPath,ecPolicy.getName());
    DFSTestUtil.createFile(fs,ec63FilePath,fileLen,(short)1,0L);
    fs.setErasureCodingPolicy(rootPath,ec32Policy.getName());
    DFSTestUtil.createFile(fs,ec32FilePath,fileLen,(short)1,0L);
    ErasureCodingPolicy tempEcPolicy=fs.getErasureCodingPolicy(ec63FilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(ec32FilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ec32Policy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(rootPath);
    Assert.assertTrue("Directory should have erasure coding policy!",tempEcPolicy.getName().equals(ec32Policy.getName()));
    fs.delete(rootPath,true);
  }
  @Test public void testDifferentReplicaFactor() throws Exception {
    final int numBlocks=1;
    final int fileLen=blockGroupSize * numBlocks;
    final Path ecDirPath=new Path("/striped");
    final Path ecFilePath=new Path(ecDirPath,"ec_file");
    final Path replicateFilePath=new Path(ecDirPath,"rep_file");
    final Path replicateFilePath2=new Path(ecDirPath,"rep_file2");
    fs.mkdirs(ecDirPath);
    fs.setErasureCodingPolicy(ecDirPath,ecPolicy.getName());
    DFSTestUtil.createFile(fs,ecFilePath,fileLen,(short)1,0L);
    fs.unsetErasureCodingPolicy(ecDirPath);
    DFSTestUtil.createFile(fs,replicateFilePath,fileLen,(short)3,0L);
    DFSTestUtil.createFile(fs,replicateFilePath2,fileLen,(short)2,0L);
    ErasureCodingPolicy tempEcPolicy=fs.getErasureCodingPolicy(ecFilePath);
    Assert.assertTrue("Erasure coding policy mismatch!",tempEcPolicy.getName().equals(ecPolicy.getName()));
    tempEcPolicy=fs.getErasureCodingPolicy(replicateFilePath);
    Assert.assertNull("Replicate file should not have erasure coding policy!",tempEcPolicy);
    tempEcPolicy=fs.getErasureCodingPolicy(replicateFilePath2);
    Assert.assertNull("Replicate file should not have erasure coding policy!",tempEcPolicy);
    tempEcPolicy=fs.getErasureCodingPolicy(ecDirPath);
    Assert.assertNull("Directory should not have erasure coding policy set!",tempEcPolicy);
    fs.delete(ecDirPath,true);
  }
  @Test public void testNonExistentDir() throws Exception {
    final Path dirPath=new Path("/striped");
    try {
      fs.unsetErasureCodingPolicy(dirPath);
      fail("FileNotFoundException should be thrown for a non-existent" + " file path");
    }
 catch (    FileNotFoundException e) {
      assertExceptionContains("Path not found: " + dirPath,e);
    }
    try {
      fs.setErasureCodingPolicy(dirPath,ecPolicy.getName());
      fail("FileNotFoundException should be thrown for a non-existent" + " file path");
    }
 catch (    FileNotFoundException e) {
      assertExceptionContains("Path not found: " + dirPath,e);
    }
  }
  @Test public void testEcPolicyOnFile() throws Exception {
    final Path ecFilePath=new Path("/striped_file");
    final int fileLen=blockGroupSize * 2;
    DFSTestUtil.createFile(fs,ecFilePath,fileLen,(short)1,0L);
    try {
      fs.setErasureCodingPolicy(ecFilePath,ecPolicy.getName());
      fail("IOException should be thrown for setting EC policy on file");
    }
 catch (    IOException e) {
      assertExceptionContains("Attempt to set an erasure coding policy " + "for a file " + ecFilePath,e);
    }
    try {
      fs.unsetErasureCodingPolicy(ecFilePath);
      fail("IOException should be thrown for unsetting EC policy on file");
    }
 catch (    IOException e) {
      assertExceptionContains("Cannot unset an erasure coding policy on a file " + ecFilePath,e);
    }
  }
  /** 
 * Test unsetEcPolicy is persisted correctly in edit log.
 */
  @Test public void testUnsetEcPolicyInEditLog() throws IOException {
    fs.getClient().setErasureCodingPolicy("/",ecPolicy.getName());
    Assert.assertEquals(ecPolicy,fs.getErasureCodingPolicy(new Path("/")));
    fs.getClient().unsetErasureCodingPolicy("/");
    cluster.restartNameNode(true);
    Assert.assertNull(fs.getErasureCodingPolicy(new Path("/")));
  }
}
