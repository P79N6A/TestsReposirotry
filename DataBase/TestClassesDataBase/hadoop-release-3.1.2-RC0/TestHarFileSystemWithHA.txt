public class TestHarFileSystemWithHA {
  private static final Path TEST_HAR_PATH=new Path("/input.har");
  /** 
 * Test that the HarFileSystem works with underlying HDFS URIs that have no port specified, as is often the case with an HA setup.
 */
  @Test public void testHarUriWithHaUriWithNoPort() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).nnTopology(MiniDFSNNTopology.simpleHATopology()).build();
      cluster.transitionToActive(0);
      HATestUtil.setFailoverConfigurations(cluster,conf);
      createEmptyHarArchive(HATestUtil.configureFailoverFs(cluster,conf),TEST_HAR_PATH);
      URI failoverUri=FileSystem.getDefaultUri(conf);
      Path p=new Path("har://hdfs-" + failoverUri.getAuthority() + TEST_HAR_PATH);
      p.getFileSystem(conf);
    }
  finally {
      cluster.shutdown();
    }
  }
  /** 
 * Create an empty Har archive in the FileSystem fs at the Path p.
 * @param fs the file system to create the Har archive in
 * @param p the path to create the Har archive at
 * @throws IOException in the event of error
 */
  private static void createEmptyHarArchive(  FileSystem fs,  Path p) throws IOException {
    fs.mkdirs(p);
    OutputStream out=fs.create(new Path(p,"_masterindex"));
    out.write(Integer.toString(HarFileSystem.VERSION).getBytes());
    out.close();
    fs.create(new Path(p,"_index")).close();
  }
}
