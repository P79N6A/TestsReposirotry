/** 
 * Test snapshot diff report for the snapshot root descendant directory.
 */
public class TestSnapRootDescendantDiff extends TestSnapshotDiffReport {
  @Before public void setUp() throws Exception {
    conf=new Configuration();
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES,true);
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,1);
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_SKIP_CAPTURE_ACCESSTIME_ONLY_CHANGE,true);
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_DIFF_ALLOW_SNAP_ROOT_DESCENDANT,false);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).format(true).build();
    cluster.waitActive();
    hdfs=cluster.getFileSystem();
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testNonSnapRootDiffReport() throws Exception {
    Path subsub1=new Path(getSnapRootDir(),"subsub1");
    Path subsubsub1=new Path(subsub1,"subsubsub1");
    hdfs.mkdirs(subsubsub1);
    modifyAndCreateSnapshot(getSnapRootDir(),new Path[]{getSnapRootDir()});
    modifyAndCreateSnapshot(subsubsub1,new Path[]{getSnapRootDir()});
    try {
      hdfs.getSnapshotDiffReport(subsub1,"s1","s2");
      fail("Expect exception when getting snapshot diff report: " + subsub1 + " is not a snapshottable directory.");
    }
 catch (    IOException e) {
      GenericTestUtils.assertExceptionContains("Directory is not a snapshottable directory: " + subsub1,e);
    }
  }
}
