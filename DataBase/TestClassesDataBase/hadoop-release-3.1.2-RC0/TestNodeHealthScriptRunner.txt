public class TestNodeHealthScriptRunner {
  protected static File testRootDir=new File("target",TestNodeHealthScriptRunner.class.getName() + "-localDir").getAbsoluteFile();
  private File nodeHealthscriptFile=new File(testRootDir,Shell.appendScriptExtension("failingscript"));
  @Before public void setup(){
    testRootDir.mkdirs();
  }
  @After public void tearDown() throws Exception {
    if (testRootDir.exists()) {
      FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()),true);
    }
  }
  private void writeNodeHealthScriptFile(  String scriptStr,  boolean setExecutable) throws IOException {
    PrintWriter pw=null;
    try {
      FileUtil.setWritable(nodeHealthscriptFile,true);
      FileUtil.setReadable(nodeHealthscriptFile,true);
      pw=new PrintWriter(new FileOutputStream(nodeHealthscriptFile));
      pw.println(scriptStr);
      pw.flush();
    }
  finally {
      pw.close();
    }
    FileUtil.setExecutable(nodeHealthscriptFile,setExecutable);
  }
  @Test public void testNodeHealthScriptShouldRun() throws IOException {
    Assert.assertFalse("Node health script should start",NodeHealthScriptRunner.shouldRun(nodeHealthscriptFile.getAbsolutePath()));
    writeNodeHealthScriptFile("",false);
    Assert.assertFalse("Node health script should start",NodeHealthScriptRunner.shouldRun(nodeHealthscriptFile.getAbsolutePath()));
    writeNodeHealthScriptFile("",true);
    Assert.assertTrue("Node health script should start",NodeHealthScriptRunner.shouldRun(nodeHealthscriptFile.getAbsolutePath()));
  }
  @Test public void testNodeHealthScript() throws Exception {
    String errorScript="echo ERROR\n echo \"Tracker not healthy\"";
    String normalScript="echo \"I am all fine\"";
    String timeOutScript=Shell.WINDOWS ? "@echo off\nping -n 4 127.0.0.1 >nul\necho \"I am fine\"" : "sleep 4\necho \"I am fine\"";
    Configuration conf=new Configuration();
    writeNodeHealthScriptFile(normalScript,true);
    NodeHealthScriptRunner nodeHealthScriptRunner=new NodeHealthScriptRunner(nodeHealthscriptFile.getAbsolutePath(),500,1000,new String[]{});
    nodeHealthScriptRunner.init(conf);
    TimerTask timerTask=nodeHealthScriptRunner.getTimerTask();
    timerTask.run();
    Assert.assertTrue("Node health status reported unhealthy",nodeHealthScriptRunner.isHealthy());
    Assert.assertEquals("",nodeHealthScriptRunner.getHealthReport());
    writeNodeHealthScriptFile(errorScript,true);
    timerTask.run();
    Assert.assertFalse("Node health status reported healthy",nodeHealthScriptRunner.isHealthy());
    Assert.assertTrue(nodeHealthScriptRunner.getHealthReport().contains("ERROR"));
    writeNodeHealthScriptFile(normalScript,true);
    timerTask.run();
    Assert.assertTrue("Node health status reported unhealthy",nodeHealthScriptRunner.isHealthy());
    Assert.assertEquals("",nodeHealthScriptRunner.getHealthReport());
    writeNodeHealthScriptFile(timeOutScript,true);
    timerTask.run();
    Assert.assertFalse("Node health status reported healthy even after timeout",nodeHealthScriptRunner.isHealthy());
    Assert.assertEquals(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG,nodeHealthScriptRunner.getHealthReport());
  }
}
