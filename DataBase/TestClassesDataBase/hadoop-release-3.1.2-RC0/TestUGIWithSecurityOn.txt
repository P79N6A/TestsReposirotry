public class TestUGIWithSecurityOn {
  public static boolean isKdcRunning(){
    String startKdc=System.getProperty("startKdc");
    if (startKdc == null || !startKdc.equals("true")) {
      return false;
    }
    return true;
  }
  @Before public void testKdcRunning(){
    Assume.assumeTrue(isKdcRunning());
  }
  @Test public void testLogin() throws IOException {
    String nn1keyTabFilepath=System.getProperty("kdc.resource.dir") + "/keytabs/nn1.keytab";
    String user1keyTabFilepath=System.getProperty("kdc.resource.dir") + "/keytabs/user1.keytab";
    Configuration conf=new Configuration();
    SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS,conf);
    UserGroupInformation.setConfiguration(conf);
    UserGroupInformation ugiNn=UserGroupInformation.loginUserFromKeytabAndReturnUGI("nn1/localhost@EXAMPLE.COM",nn1keyTabFilepath);
    UserGroupInformation ugiDn=UserGroupInformation.loginUserFromKeytabAndReturnUGI("user1@EXAMPLE.COM",user1keyTabFilepath);
    Assert.assertEquals(AuthenticationMethod.KERBEROS,ugiNn.getAuthenticationMethod());
    Assert.assertEquals(AuthenticationMethod.KERBEROS,ugiDn.getAuthenticationMethod());
    try {
      UserGroupInformation.loginUserFromKeytabAndReturnUGI("bogus@EXAMPLE.COM",nn1keyTabFilepath);
      Assert.fail("Login should have failed");
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  @Test public void testGetUGIFromKerberosSubject() throws IOException {
    String user1keyTabFilepath=System.getProperty("kdc.resource.dir") + "/keytabs/user1.keytab";
    UserGroupInformation ugi=UserGroupInformation.loginUserFromKeytabAndReturnUGI("user1@EXAMPLE.COM",user1keyTabFilepath);
    Set<KerberosPrincipal> principals=ugi.getSubject().getPrincipals(KerberosPrincipal.class);
    if (principals.isEmpty()) {
      Assert.fail("There should be a kerberos principal in the subject.");
    }
 else {
      UserGroupInformation ugi2=UserGroupInformation.getUGIFromSubject(ugi.getSubject());
      if (ugi2 != null) {
        ugi2.doAs(new PrivilegedAction<Object>(){
          @Override public Object run(){
            try {
              UserGroupInformation ugi3=UserGroupInformation.getCurrentUser();
              String doAsUserName=ugi3.getUserName();
              assertEquals(doAsUserName,"user1@EXAMPLE.COM");
              System.out.println("DO AS USERNAME: " + doAsUserName);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            return null;
          }
        }
);
      }
    }
  }
}
