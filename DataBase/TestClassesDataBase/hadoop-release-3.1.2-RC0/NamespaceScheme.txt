/** 
 * This scheme defines files/directories and their block storage policies. It also defines snapshots.
 */
static class NamespaceScheme {
  final List<Path> dirs;
  final List<Path> files;
  final long fileSize;
  final Map<Path,List<String>> snapshotMap;
  final Map<Path,BlockStoragePolicy> policyMap;
  NamespaceScheme(  List<Path> dirs,  List<Path> files,  long fileSize,  Map<Path,List<String>> snapshotMap,  Map<Path,BlockStoragePolicy> policyMap){
    this.dirs=dirs == null ? Collections.<Path>emptyList() : dirs;
    this.files=files == null ? Collections.<Path>emptyList() : files;
    this.fileSize=fileSize;
    this.snapshotMap=snapshotMap == null ? Collections.<Path,List<String>>emptyMap() : snapshotMap;
    this.policyMap=policyMap;
  }
  /** 
 * Create files/directories/snapshots.
 */
  void prepare(  DistributedFileSystem dfs,  short repl) throws Exception {
    for (    Path d : dirs) {
      dfs.mkdirs(d);
    }
    for (    Path file : files) {
      DFSTestUtil.createFile(dfs,file,fileSize,repl,0L);
    }
    for (    Map.Entry<Path,List<String>> entry : snapshotMap.entrySet()) {
      for (      String snapshot : entry.getValue()) {
        SnapshotTestHelper.createSnapshot(dfs,entry.getKey(),snapshot);
      }
    }
  }
  /** 
 * Set storage policies according to the corresponding scheme.
 */
  void setStoragePolicy(  DistributedFileSystem dfs) throws Exception {
    for (    Map.Entry<Path,BlockStoragePolicy> entry : policyMap.entrySet()) {
      dfs.setStoragePolicy(entry.getKey(),entry.getValue().getName());
    }
  }
}
