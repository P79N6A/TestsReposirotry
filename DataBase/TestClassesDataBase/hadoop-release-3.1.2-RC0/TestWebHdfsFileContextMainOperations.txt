/** 
 * Test of FileContext apis on Webhdfs.
 */
public class TestWebHdfsFileContextMainOperations extends FileContextMainOperationsBaseTest {
  protected static MiniDFSCluster cluster;
  private static Path defaultWorkingDirectory;
  protected static URI webhdfsUrl;
  protected static int numBlocks=2;
  protected static final byte[] data=getFileData(numBlocks,getDefaultBlockSize());
  protected static final HdfsConfiguration CONF=new HdfsConfiguration();
  @Override public Path getDefaultWorkingDirectory(){
    return defaultWorkingDirectory;
  }
  @Override protected FileContextTestHelper createFileContextHelper(){
    return new FileContextTestHelper();
  }
  public URI getWebhdfsUrl(){
    return webhdfsUrl;
  }
  @BeforeClass public static void clusterSetupAtBeginning() throws IOException, LoginException, URISyntaxException {
    cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
    cluster.waitClusterUp();
    webhdfsUrl=new URI(WebHdfs.SCHEME + "://" + cluster.getConfiguration(0).get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY));
    fc=FileContext.getFileContext(webhdfsUrl,CONF);
    defaultWorkingDirectory=fc.makeQualified(new Path("/user/" + UserGroupInformation.getCurrentUser().getShortUserName()));
    fc.mkdir(defaultWorkingDirectory,FileContext.DEFAULT_PERM,true);
  }
  @Before public void setUp() throws Exception {
    URI webhdfsUrlReal=getWebhdfsUrl();
    Path testBuildData=new Path(webhdfsUrlReal + "/" + GenericTestUtils.DEFAULT_TEST_DATA_PATH+ RandomStringUtils.randomAlphanumeric(10));
    Path rootPath=new Path(testBuildData,"root-uri");
    localFsRootPath=rootPath.makeQualified(webhdfsUrlReal,null);
    fc.mkdir(getTestRootPath(fc,"test"),FileContext.DEFAULT_PERM,true);
  }
  private Path getTestRootPath(  FileContext fc,  String path){
    return fileContextTestHelper.getTestRootPath(fc,path);
  }
  @Override protected boolean listCorruptedBlocksSupported(){
    return false;
  }
  /** 
 * Test FileContext APIs when symlinks are not supported TODO: Open separate JIRA for full support of the Symlink in webhdfs
 */
  @Test public void testUnsupportedSymlink() throws IOException {
  }
  /** 
 * TODO: Open JIRA for the idiosyncrasies between hdfs and webhdfs
 */
  public void testSetVerifyChecksum() throws IOException {
    final Path rootPath=getTestRootPath(fc,"test");
    final Path path=new Path(rootPath,"zoo");
    FSDataOutputStream out=fc.create(path,EnumSet.of(CREATE),Options.CreateOpts.createParent());
    try {
      out.write(data,0,data.length);
    }
  finally {
      out.close();
    }
    fc.setVerifyChecksum(true,path);
    FileStatus fileStatus=fc.getFileStatus(path);
    final long len=fileStatus.getLen();
    assertTrue(len == data.length);
    byte[] bb=new byte[(int)len];
    FSDataInputStream fsdis=fc.open(path);
    try {
      fsdis.readFully(bb);
    }
  finally {
      fsdis.close();
    }
    assertArrayEquals(data,bb);
  }
  @AfterClass public static void ClusterShutdownAtEnd() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
}
