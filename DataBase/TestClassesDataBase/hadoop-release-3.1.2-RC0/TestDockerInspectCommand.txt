/** 
 * Tests the docker inspect command and its command line arguments.
 */
public class TestDockerInspectCommand {
  private DockerInspectCommand dockerInspectCommand;
  private static final String CONTAINER_NAME="foo";
  @Before public void setup(){
    dockerInspectCommand=new DockerInspectCommand(CONTAINER_NAME);
  }
  @Test public void testGetCommandOption(){
    assertEquals("inspect",dockerInspectCommand.getCommandOption());
  }
  @Test public void testGetContainerStatus() throws Exception {
    dockerInspectCommand.getContainerStatus();
    assertEquals("inspect",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("docker-command")));
    assertEquals("{{.State.Status}}",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("format")));
    assertEquals("foo",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("name")));
    assertEquals(3,dockerInspectCommand.getDockerCommandWithArguments().size());
  }
  @Test public void testGetIpAndHost() throws Exception {
    dockerInspectCommand.getIpAndHost();
    assertEquals("inspect",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("docker-command")));
    assertEquals("{{range(.NetworkSettings.Networks)}}" + "{{.IPAddress}},{{end}}{{.Config.Hostname}}",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("format")));
    assertEquals("foo",StringUtils.join(",",dockerInspectCommand.getDockerCommandWithArguments().get("name")));
    assertEquals(3,dockerInspectCommand.getDockerCommandWithArguments().size());
  }
}
