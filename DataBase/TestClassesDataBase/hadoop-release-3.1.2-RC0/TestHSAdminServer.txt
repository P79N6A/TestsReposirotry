@RunWith(Parameterized.class) public class TestHSAdminServer {
  private boolean securityEnabled=true;
  private HSAdminServer hsAdminServer=null;
  private HSAdmin hsAdminClient=null;
  JobConf conf=null;
  private static long groupRefreshTimeoutSec=1;
  JobHistory jobHistoryService=null;
  AggregatedLogDeletionService alds=null;
public static class MockUnixGroupsMapping implements GroupMappingServiceProvider {
    private int i=0;
    @Override public List<String> getGroups(    String user) throws IOException {
      System.out.println("Getting groups in MockUnixGroupsMapping");
      String g1=user + (10 * i + 1);
      String g2=user + (10 * i + 2);
      List<String> l=new ArrayList<String>(2);
      l.add(g1);
      l.add(g2);
      i++;
      return l;
    }
    @Override public void cacheGroupsRefresh() throws IOException {
      System.out.println("Refreshing groups in MockUnixGroupsMapping");
    }
    @Override public void cacheGroupsAdd(    List<String> groups) throws IOException {
    }
  }
  @Parameters public static Collection<Object[]> testParameters(){
    return Arrays.asList(new Object[][]{{false},{true}});
  }
  public TestHSAdminServer(  boolean enableSecurity){
    securityEnabled=enableSecurity;
  }
  @Before public void init() throws HadoopIllegalArgumentException, IOException {
    conf=new JobConf();
    conf.set(JHAdminConfig.JHS_ADMIN_ADDRESS,"0.0.0.0:0");
    conf.setClass("hadoop.security.group.mapping",MockUnixGroupsMapping.class,GroupMappingServiceProvider.class);
    conf.setLong("hadoop.security.groups.cache.secs",groupRefreshTimeoutSec);
    conf.setBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,securityEnabled);
    Groups.getUserToGroupsMappingService(conf);
    jobHistoryService=mock(JobHistory.class);
    alds=mock(AggregatedLogDeletionService.class);
    hsAdminServer=new HSAdminServer(alds,jobHistoryService){
      @Override protected Configuration createConf(){
        return conf;
      }
    }
;
    hsAdminServer.init(conf);
    hsAdminServer.start();
    conf.setSocketAddr(JHAdminConfig.JHS_ADMIN_ADDRESS,hsAdminServer.clientRpcServer.getListenerAddress());
    hsAdminClient=new HSAdmin(conf);
  }
  @Test public void testGetGroups() throws Exception {
    String user=UserGroupInformation.getCurrentUser().getUserName();
    String[] args=new String[2];
    args[0]="-getGroups";
    args[1]=user;
    int exitCode=hsAdminClient.run(args);
    assertEquals("Exit code should be 0 but was: " + exitCode,0,exitCode);
  }
  @Test public void testRefreshUserToGroupsMappings() throws Exception {
    String[] args=new String[]{"-refreshUserToGroupsMappings"};
    Groups groups=Groups.getUserToGroupsMappingService(conf);
    String user=UserGroupInformation.getCurrentUser().getUserName();
    System.out.println("first attempt:");
    List<String> g1=groups.getGroups(user);
    String[] str_groups=new String[g1.size()];
    g1.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    System.out.println("second attempt, should be same:");
    List<String> g2=groups.getGroups(user);
    g2.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    for (int i=0; i < g2.size(); i++) {
      assertEquals("Should be same group ",g1.get(i),g2.get(i));
    }
    hsAdminClient.run(args);
    System.out.println("third attempt(after refresh command), should be different:");
    List<String> g3=groups.getGroups(user);
    g3.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    for (int i=0; i < g3.size(); i++) {
      assertFalse("Should be different group: " + g1.get(i) + " and "+ g3.get(i),g1.get(i).equals(g3.get(i)));
    }
  }
  @Test public void testRefreshSuperUserGroups() throws Exception {
    UserGroupInformation ugi=mock(UserGroupInformation.class);
    UserGroupInformation superUser=mock(UserGroupInformation.class);
    when(ugi.getRealUser()).thenReturn(superUser);
    when(superUser.getShortUserName()).thenReturn("superuser");
    when(superUser.getUserName()).thenReturn("superuser");
    when(ugi.getGroups()).thenReturn(Arrays.asList(new String[]{"group3"}));
    when(ugi.getUserName()).thenReturn("regularUser");
    conf.set("hadoop.proxyuser.superuser.groups","group1,group2");
    conf.set("hadoop.proxyuser.superuser.hosts","127.0.0.1");
    String[] args=new String[1];
    args[0]="-refreshSuperUserGroupsConfiguration";
    hsAdminClient.run(args);
    Throwable th=null;
    try {
      ProxyUsers.authorize(ugi,"127.0.0.1");
    }
 catch (    Exception e) {
      th=e;
    }
    assertTrue(th instanceof AuthorizationException);
    conf.set("hadoop.proxyuser.superuser.groups","group1,group2,group3");
    th=null;
    try {
      ProxyUsers.authorize(ugi,"127.0.0.1");
    }
 catch (    Exception e) {
      th=e;
    }
    assertTrue(th instanceof AuthorizationException);
    hsAdminClient.run(args);
    th=null;
    try {
      ProxyUsers.authorize(ugi,"127.0.0.1");
    }
 catch (    Exception e) {
      th=e;
    }
    assertNull("Unexpected exception thrown: " + th,th);
  }
  @Test public void testRefreshAdminAcls() throws Exception {
    conf.set(JHAdminConfig.JHS_ADMIN_ACL,UserGroupInformation.getCurrentUser().getUserName());
    String[] args=new String[1];
    args[0]="-refreshAdminAcls";
    hsAdminClient.run(args);
    args[0]="-refreshSuperUserGroupsConfiguration";
    hsAdminClient.run(args);
    conf.set(JHAdminConfig.JHS_ADMIN_ACL,"notCurrentUser");
    args[0]="-refreshAdminAcls";
    hsAdminClient.run(args);
    Throwable th=null;
    args[0]="-refreshSuperUserGroupsConfiguration";
    try {
      hsAdminClient.run(args);
    }
 catch (    Exception e) {
      th=e;
    }
    assertTrue(th instanceof RemoteException);
  }
  @Test public void testRefreshLoadedJobCache() throws Exception {
    String[] args=new String[1];
    args[0]="-refreshLoadedJobCache";
    hsAdminClient.run(args);
    verify(jobHistoryService).refreshLoadedJobCache();
  }
  @Test public void testRefreshLogRetentionSettings() throws Exception {
    String[] args=new String[1];
    args[0]="-refreshLogRetentionSettings";
    hsAdminClient.run(args);
    verify(alds).refreshLogRetentionSettings();
  }
  @Test public void testRefreshJobRetentionSettings() throws Exception {
    String[] args=new String[1];
    args[0]="-refreshJobRetentionSettings";
    hsAdminClient.run(args);
    verify(jobHistoryService).refreshJobRetentionSettings();
  }
  @SuppressWarnings("unchecked") @Test public void testUGIForLogAndJobRefresh() throws Exception {
    UserGroupInformation ugi=UserGroupInformation.createUserForTesting("test",new String[]{"grp"});
    UserGroupInformation loginUGI=spy(hsAdminServer.getLoginUGI());
    hsAdminServer.setLoginUGI(loginUGI);
    ugi.doAs(new PrivilegedAction<Void>(){
      @Override public Void run(){
        String[] args=new String[1];
        args[0]="-refreshLogRetentionSettings";
        try {
          hsAdminClient.run(args);
        }
 catch (        Exception e) {
          fail("refreshLogRetentionSettings should have been successful");
        }
        return null;
      }
    }
);
    verify(loginUGI).doAs(any(PrivilegedExceptionAction.class));
    verify(alds).refreshLogRetentionSettings();
    reset(loginUGI);
    ugi.doAs(new PrivilegedAction<Void>(){
      @Override public Void run(){
        String[] args=new String[1];
        args[0]="-refreshJobRetentionSettings";
        try {
          hsAdminClient.run(args);
        }
 catch (        Exception e) {
          fail("refreshJobRetentionSettings should have been successful");
        }
        return null;
      }
    }
);
    verify(loginUGI).doAs(any(PrivilegedExceptionAction.class));
    verify(jobHistoryService).refreshJobRetentionSettings();
  }
  @After public void cleanUp(){
    if (hsAdminServer != null)     hsAdminServer.stop();
  }
}
