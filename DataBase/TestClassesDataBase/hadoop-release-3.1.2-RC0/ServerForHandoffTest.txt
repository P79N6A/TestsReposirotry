public static class ServerForHandoffTest extends Server {
  private final AtomicBoolean invoked=new AtomicBoolean(false);
  private final ReentrantLock lock=new ReentrantLock();
  private final Condition invokedCondition=lock.newCondition();
  private volatile Writable request;
  private volatile Call deferredCall;
  protected ServerForHandoffTest(  int handlerCount) throws IOException {
    super(BIND_ADDRESS,0,BytesWritable.class,handlerCount,conf);
  }
  @Override public Writable call(  RPC.RpcKind rpcKind,  String protocol,  Writable param,  long receiveTime) throws Exception {
    request=param;
    deferredCall=Server.getCurCall().get();
    Server.getCurCall().get().deferResponse();
    lock.lock();
    try {
      invoked.set(true);
      invokedCondition.signal();
    }
  finally {
      lock.unlock();
    }
    return null;
  }
  void awaitInvocation() throws InterruptedException {
    lock.lock();
    try {
      while (!invoked.get()) {
        invokedCondition.await();
      }
    }
  finally {
      lock.unlock();
    }
  }
  void sendResponse(){
    deferredCall.setDeferredResponse(request);
  }
  void sendError(){
    deferredCall.setDeferredError(new IOException("DeferredError"));
  }
}
