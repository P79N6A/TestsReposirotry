/** 
 * Test class to handle various proto related tests for resources.
 */
public class TestResourcePBImpl {
  @Test public void testEmptyResourcePBInit() throws Exception {
    Resource res=new ResourcePBImpl();
    Assert.assertEquals(0,res.getMemorySize());
    Assert.assertEquals(ResourceInformation.MEMORY_MB.getUnits(),res.getResourceInformation(ResourceInformation.MEMORY_MB.getName()).getUnits());
    Assert.assertEquals(ResourceInformation.VCORES.getUnits(),res.getResourceInformation(ResourceInformation.VCORES.getName()).getUnits());
  }
  @Test public void testResourcePBInitFromOldPB() throws Exception {
    YarnProtos.ResourceProto proto=YarnProtos.ResourceProto.newBuilder().setMemory(1024).setVirtualCores(3).build();
    Resource res=new ResourcePBImpl(proto);
    Assert.assertEquals(1024,res.getMemorySize());
    Assert.assertEquals(3,res.getVirtualCores());
    Assert.assertEquals(ResourceInformation.MEMORY_MB.getUnits(),res.getResourceInformation(ResourceInformation.MEMORY_MB.getName()).getUnits());
    Assert.assertEquals(ResourceInformation.VCORES.getUnits(),res.getResourceInformation(ResourceInformation.VCORES.getName()).getUnits());
  }
  @Test @SuppressWarnings("deprecation") public void testGetMemory(){
    Resource res=new ResourcePBImpl();
    long memorySize=Integer.MAX_VALUE + 1L;
    res.setMemorySize(memorySize);
    assertEquals("No need to cast if both are long",memorySize,res.getMemorySize());
    assertEquals("Cast to Integer.MAX_VALUE if the long is greater than " + "Integer.MAX_VALUE",Integer.MAX_VALUE,res.getMemory());
  }
  @Test public void testGetVirtualCores(){
    Resource res=new ResourcePBImpl();
    long vcores=Integer.MAX_VALUE + 1L;
    res.getResourceInformation("vcores").setValue(vcores);
    assertEquals("No need to cast if both are long",vcores,res.getResourceInformation("vcores").getValue());
    assertEquals("Cast to Integer.MAX_VALUE if the long is greater than " + "Integer.MAX_VALUE",Integer.MAX_VALUE,res.getVirtualCores());
  }
}
