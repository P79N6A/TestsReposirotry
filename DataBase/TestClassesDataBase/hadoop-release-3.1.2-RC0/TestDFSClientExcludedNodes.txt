/** 
 * These tests make sure that DFSClient excludes writing data to a DN properly in case of errors.
 */
public class TestDFSClientExcludedNodes {
  private MiniDFSCluster cluster;
  private Configuration conf;
  @Before public void setUp(){
    cluster=null;
    conf=new HdfsConfiguration();
  }
  @After public void tearDown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test(timeout=60000) public void testExcludedNodes() throws IOException {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    FileSystem fs=cluster.getFileSystem();
    Path filePath=new Path("/testExcludedNodes");
    cluster.stopDataNode(AppendTestUtil.nextInt(3));
    OutputStream out=fs.create(filePath,true,4096,(short)3,fs.getDefaultBlockSize(filePath));
    out.write(20);
    try {
      out.close();
    }
 catch (    Exception e) {
      fail("Single DN failure should not result in a block abort: \n" + e.getMessage());
    }
  }
  @Test(timeout=60000) public void testExcludedNodesForgiveness() throws IOException {
    conf.setLong(HdfsClientConfigKeys.Write.EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL_KEY,2500);
    conf.setInt("io.bytes.per.checksum",512);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    FileSystem fs=cluster.getFileSystem();
    Path filePath=new Path("/testForgivingExcludedNodes");
    byte[] bytes=new byte[256];
    for (int index=0; index < bytes.length; index++) {
      bytes[index]='0';
    }
    FSDataOutputStream out=fs.create(filePath,true,4096,(short)3,512);
    out.write(bytes);
    out.write(bytes);
    out.hflush();
    DataNodeProperties two=cluster.stopDataNode(2);
    DataNodeProperties one=cluster.stopDataNode(1);
    out.write(bytes);
    out.write(bytes);
    out.hflush();
    Assert.assertEquals(true,cluster.restartDataNode(one,true));
    Assert.assertEquals(true,cluster.restartDataNode(two,true));
    cluster.waitActive();
    ThreadUtil.sleepAtLeastIgnoreInterrupts(5000);
    cluster.stopDataNode(0);
    try {
      out.write(bytes);
      out.hflush();
      out.close();
    }
 catch (    Exception e) {
      fail("Excluded DataNodes should be forgiven after a while and " + "not cause file writing exception of: '" + e.getMessage() + "'");
    }
  }
}
