public class TestCleanerTask {
  private static final String ROOT=YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT;
  private static final long SLEEP_TIME=YarnConfiguration.DEFAULT_SCM_CLEANER_RESOURCE_SLEEP_MS;
  private static final int NESTED_LEVEL=YarnConfiguration.DEFAULT_SHARED_CACHE_NESTED_LEVEL;
  @Test public void testNonExistentRoot() throws Exception {
    FileSystem fs=mock(FileSystem.class);
    CleanerMetrics metrics=mock(CleanerMetrics.class);
    SCMStore store=mock(SCMStore.class);
    CleanerTask task=createSpiedTask(fs,store,metrics,new ReentrantLock());
    when(fs.exists(task.getRootPath())).thenReturn(false);
    task.run();
    verify(task,never()).process();
  }
  @Test public void testProcessFreshResource() throws Exception {
    FileSystem fs=mock(FileSystem.class);
    CleanerMetrics metrics=mock(CleanerMetrics.class);
    SCMStore store=mock(SCMStore.class);
    CleanerTask task=createSpiedTask(fs,store,metrics,new ReentrantLock());
    when(store.isResourceEvictable(isA(String.class),isA(FileStatus.class))).thenReturn(false);
    FileStatus status=mock(FileStatus.class);
    when(status.getPath()).thenReturn(new Path(ROOT + "/a/b/c/abc"));
    task.processSingleResource(status);
    verify(fs,never()).rename(eq(status.getPath()),isA(Path.class));
    verify(metrics).reportAFileProcess();
    verify(metrics,never()).reportAFileDelete();
  }
  @Test public void testProcessEvictableResource() throws Exception {
    FileSystem fs=mock(FileSystem.class);
    CleanerMetrics metrics=mock(CleanerMetrics.class);
    SCMStore store=mock(SCMStore.class);
    CleanerTask task=createSpiedTask(fs,store,metrics,new ReentrantLock());
    when(store.isResourceEvictable(isA(String.class),isA(FileStatus.class))).thenReturn(true);
    FileStatus status=mock(FileStatus.class);
    when(status.getPath()).thenReturn(new Path(ROOT + "/a/b/c/abc"));
    when(store.removeResource(isA(String.class))).thenReturn(true);
    when(fs.rename(isA(Path.class),isA(Path.class))).thenReturn(true);
    when(fs.delete(isA(Path.class),anyBoolean())).thenReturn(true);
    task.processSingleResource(status);
    verify(fs).rename(eq(status.getPath()),isA(Path.class));
    verify(metrics).reportAFileDelete();
    verify(metrics,never()).reportAFileProcess();
  }
  private CleanerTask createSpiedTask(  FileSystem fs,  SCMStore store,  CleanerMetrics metrics,  Lock isCleanerRunning){
    return spy(new CleanerTask(ROOT,SLEEP_TIME,NESTED_LEVEL,fs,store,metrics,isCleanerRunning));
  }
  @Test public void testResourceIsInUseHasAnActiveApp() throws Exception {
    FileSystem fs=mock(FileSystem.class);
    CleanerMetrics metrics=mock(CleanerMetrics.class);
    SCMStore store=mock(SCMStore.class);
    FileStatus resource=mock(FileStatus.class);
    when(resource.getPath()).thenReturn(new Path(ROOT + "/a/b/c/abc"));
    when(store.isResourceEvictable(isA(String.class),isA(FileStatus.class))).thenReturn(true);
    when(store.removeResource(isA(String.class))).thenReturn(false);
    CleanerTask task=createSpiedTask(fs,store,metrics,new ReentrantLock());
    task.processSingleResource(resource);
    verify(metrics).reportAFileProcess();
    verify(metrics,never()).reportAFileDelete();
  }
}
