@RunWith(Parameterized.class) public class TestFileSystemNodeLabelsStore extends NodeLabelTestBase {
  MockNodeLabelManager mgr=null;
  Configuration conf=null;
  String storeClassName=null;
private static class MockNodeLabelManager extends CommonNodeLabelsManager {
    @Override protected void initDispatcher(    Configuration conf){
      super.dispatcher=new InlineDispatcher();
    }
    @Override protected void startDispatcher(){
    }
    @Override protected void stopDispatcher(){
    }
  }
  public TestFileSystemNodeLabelsStore(  String className){
    this.storeClassName=className;
  }
  @Parameterized.Parameters public static Collection<String[]> getParameters(){
    return Arrays.asList(new String[][]{{FileSystemNodeLabelsStore.class.getCanonicalName()},{NonAppendableFSNodeLabelStore.class.getCanonicalName()}});
  }
  @Before public void before() throws IOException {
    mgr=new MockNodeLabelManager();
    conf=new Configuration();
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_IMPL_CLASS,storeClassName);
    File tempDir=File.createTempFile("nlb",".tmp");
    tempDir.delete();
    tempDir.mkdirs();
    tempDir.deleteOnExit();
    conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDir.getAbsolutePath());
    mgr.init(conf);
    mgr.start();
  }
  @After public void after() throws IOException {
    if (mgr.store instanceof FileSystemNodeLabelsStore) {
      FileSystemNodeLabelsStore fsStore=((FileSystemNodeLabelsStore)mgr.store);
      fsStore.fs.delete(fsStore.fsWorkingPath,true);
    }
    mgr.stop();
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=10000) public void testRecoverWithMirror() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p4"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p5","p6"));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2")));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n4"),toSet("p4"),toNodeId("n5"),toSet("p5"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    mgr.removeFromClusterNodeLabels(toSet("p1"));
    mgr.removeFromClusterNodeLabels(Arrays.asList("p3","p5"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    Assert.assertEquals(3,mgr.getClusterNodeLabelNames().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6")));
    assertMapContains(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p2"),toNodeId("n4"),toSet("p4"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(),ImmutableMap.of("p6",toSet(toNodeId("n6"),toNodeId("n7")),"p4",toSet(toNodeId("n4")),"p2",toSet(toNodeId("n2"))));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    Assert.assertEquals(3,mgr.getClusterNodeLabelNames().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6")));
    assertMapContains(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p2"),toNodeId("n4"),toSet("p4"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(),ImmutableMap.of("p6",toSet(toNodeId("n6"),toNodeId("n7")),"p4",toSet(toNodeId("n4")),"p2",toSet(toNodeId("n2"))));
    mgr.stop();
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=10000) public void testRecoverWithDistributedNodeLabels() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p4"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p5","p6"));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2")));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n4"),toSet("p4"),toNodeId("n5"),toSet("p5"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    mgr.removeFromClusterNodeLabels(toSet("p1"));
    mgr.removeFromClusterNodeLabels(Arrays.asList("p3","p5"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    Configuration cf=new Configuration(conf);
    cf.set(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE);
    mgr.init(cf);
    mgr.start();
    Assert.assertEquals(3,mgr.getClusterNodeLabels().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6")));
    Assert.assertTrue("During recovery in distributed node-labels setup, " + "node to labels mapping should not be recovered ",mgr.getNodeLabels().size() == 0);
    mgr.stop();
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=10000) public void testEditlogRecover() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p4"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p5","p6"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2")));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n4"),toSet("p4"),toNodeId("n5"),toSet("p5"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    mgr.removeFromClusterNodeLabels(toSet("p1"));
    mgr.removeFromClusterNodeLabels(Arrays.asList("p3","p5"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    Assert.assertEquals(3,mgr.getClusterNodeLabelNames().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6")));
    assertMapContains(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p2"),toNodeId("n4"),toSet("p4"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(),ImmutableMap.of("p6",toSet(toNodeId("n6"),toNodeId("n7")),"p4",toSet(toNodeId("n4")),"p2",toSet(toNodeId("n2"))));
    mgr.stop();
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=10000) public void testSerilizationAfterRecovery() throws Exception {
    mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("p1",true),NodeLabel.newInstance("p2",false),NodeLabel.newInstance("p3",true),NodeLabel.newInstance("p4",true),NodeLabel.newInstance("p5",true),NodeLabel.newInstance("p6",false)));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2")));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n4"),toSet("p4"),toNodeId("n5"),toSet("p5"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    mgr.removeFromClusterNodeLabels(toSet("p1"));
    mgr.removeFromClusterNodeLabels(Arrays.asList("p3","p5"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    Assert.assertEquals(3,mgr.getClusterNodeLabelNames().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6")));
    assertMapContains(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p2"),toNodeId("n4"),toSet("p4"),toNodeId("n6"),toSet("p6"),toNodeId("n7"),toSet("p6")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(),ImmutableMap.of("p6",toSet(toNodeId("n6"),toNodeId("n7")),"p4",toSet(toNodeId("n4")),"p2",toSet(toNodeId("n2"))));
    Assert.assertFalse(mgr.isExclusiveNodeLabel("p2"));
    Assert.assertTrue(mgr.isExclusiveNodeLabel("p4"));
    Assert.assertFalse(mgr.isExclusiveNodeLabel("p6"));
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p7","p8"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p9"));
    mgr.stop();
    mgr=new MockNodeLabelManager();
    mgr.init(conf);
    mgr.start();
    Assert.assertEquals(6,mgr.getClusterNodeLabelNames().size());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("p2","p4","p6","p7","p8","p9")));
    mgr.stop();
  }
  @Test public void testRootMkdirOnInitStore() throws Exception {
    final FileSystem mockFs=Mockito.mock(FileSystem.class);
    FileSystemNodeLabelsStore mockStore=new FileSystemNodeLabelsStore(){
      void setFileSystem(      Configuration conf) throws IOException {
        fs=mockFs;
      }
    }
;
    mockStore.setNodeLabelsManager(mgr);
    mockStore.fs=mockFs;
    verifyMkdirsCount(mockStore,true,1);
    verifyMkdirsCount(mockStore,false,2);
    verifyMkdirsCount(mockStore,true,3);
    verifyMkdirsCount(mockStore,false,4);
  }
  private void verifyMkdirsCount(  FileSystemNodeLabelsStore store,  boolean existsRetVal,  int expectedNumOfCalls) throws Exception {
    Mockito.when(store.fs.exists(Mockito.any(Path.class))).thenReturn(existsRetVal);
    store.init(conf);
    Mockito.verify(store.fs,Mockito.times(expectedNumOfCalls)).mkdirs(Mockito.any(Path.class));
  }
}
