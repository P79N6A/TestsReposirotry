/** 
 * This class tests various cases of DataNode peer metrics.
 */
public class TestDataNodePeerMetrics {
  @Test(timeout=30000) public void testGetSendPacketDownstreamAvgInfo() throws Exception {
    final int windowSize=5;
    final int numWindows=2;
    final int iterations=3;
    final int numOpsPerIteration=1000;
    final Configuration conf=new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_DATANODE_PEER_STATS_ENABLED_KEY,true);
    final DataNodePeerMetrics peerMetrics=DataNodePeerMetrics.create("Sample-DataNode");
    MetricsTestHelper.replaceRollingAveragesScheduler(peerMetrics.getSendPacketDownstreamRollingAverages(),numWindows,windowSize,TimeUnit.SECONDS);
    final long start=Time.monotonicNow();
    for (int i=1; i <= iterations; i++) {
      final String peerAddr=genPeerAddress();
      for (int j=1; j <= numOpsPerIteration; j++) {
        final long latency=ThreadLocalRandom.current().nextLong(1,1000);
        peerMetrics.addSendPacketDownstream(peerAddr,latency);
      }
      final long sleep=(start + (windowSize * 1000 * i) + 1000) - Time.monotonicNow();
      Thread.sleep(sleep);
      final String json=peerMetrics.dumpSendPacketDownstreamAvgInfoAsJson();
      assertThat(json,containsString(peerAddr));
    }
  }
  /** 
 * Simulates to generate different peer addresses, e.g. [84.125.113.65:9801].
 */
  private String genPeerAddress(){
    final ThreadLocalRandom r=ThreadLocalRandom.current();
    return String.format("[%d.%d.%d.%d:9801]",r.nextInt(1,256),r.nextInt(1,256),r.nextInt(1,256),r.nextInt(1,256));
  }
}
