private class FileInputFormatForTest<K,V> extends FileInputFormat<K,V> {
  long splitSize;
  long length;
  FileInputFormatForTest(  long length,  long splitSize){
    this.length=length;
    this.splitSize=splitSize;
  }
  @Override public RecordReader<K,V> createRecordReader(  InputSplit split,  TaskAttemptContext context) throws IOException, InterruptedException {
    return null;
  }
  @Override protected List<FileStatus> listStatus(  JobContext job) throws IOException {
    FileStatus mockFileStatus=mock(FileStatus.class);
    when(mockFileStatus.getBlockSize()).thenReturn(splitSize);
    Path mockPath=mock(Path.class);
    FileSystem mockFs=mock(FileSystem.class);
    BlockLocation[] blockLocations=mockBlockLocations(length,splitSize);
    when(mockFs.getFileBlockLocations(mockFileStatus,0,length)).thenReturn(blockLocations);
    when(mockPath.getFileSystem(any(Configuration.class))).thenReturn(mockFs);
    when(mockFileStatus.getPath()).thenReturn(mockPath);
    when(mockFileStatus.getLen()).thenReturn(length);
    List<FileStatus> list=new ArrayList<FileStatus>();
    list.add(mockFileStatus);
    return list;
  }
  @Override protected long computeSplitSize(  long blockSize,  long minSize,  long maxSize){
    return splitSize;
  }
  private BlockLocation[] mockBlockLocations(  long size,  long splitSize){
    int numLocations=(int)(size / splitSize);
    if (size % splitSize != 0)     numLocations++;
    BlockLocation[] blockLocations=new BlockLocation[numLocations];
    for (int i=0; i < numLocations; i++) {
      String[] names=new String[]{"b" + i};
      String[] hosts=new String[]{"host" + i};
      blockLocations[i]=new BlockLocation(names,hosts,i * splitSize,Math.min(splitSize,size - (splitSize * i)));
    }
    return blockLocations;
  }
}
