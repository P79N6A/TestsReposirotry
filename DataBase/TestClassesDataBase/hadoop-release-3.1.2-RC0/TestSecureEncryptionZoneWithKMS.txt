/** 
 * Test for HDFS encryption zone without external Kerberos KDC by leveraging Kerby-based MiniKDC, MiniKMS and MiniDFSCluster. This provides additional unit test coverage on Secure(Kerberos) KMS + HDFS.
 */
public class TestSecureEncryptionZoneWithKMS {
  public static final Logger LOG=LoggerFactory.getLogger(TestSecureEncryptionZoneWithKMS.class);
  private static final Path TEST_PATH=new Path("/test-dir");
  private static HdfsConfiguration baseConf;
  private static File baseDir;
  private static String keystoresDir;
  private static String sslConfDir;
  private static final EnumSet<CreateEncryptionZoneFlag> NO_TRASH=EnumSet.of(CreateEncryptionZoneFlag.NO_TRASH);
  private static final String HDFS_USER_NAME="hdfs";
  private static final String SPNEGO_USER_NAME="HTTP";
  private static final String OOZIE_USER_NAME="oozie";
  private static final String OOZIE_PROXIED_USER_NAME="oozie_user";
  private static String hdfsPrincipal;
  private static String spnegoPrincipal;
  private static String ooziePrincipal;
  private static String keytab;
  private static MiniKdc kdc;
  private static MiniKMS miniKMS;
  private final String testKey="test_key";
  private static boolean testKeyCreated=false;
  private static final long AUTH_TOKEN_VALIDITY=1;
  private MiniDFSCluster cluster;
  private HdfsConfiguration conf;
  private FileSystem fs;
  private HdfsAdmin dfsAdmin;
  private FileSystemTestWrapper fsWrapper;
  public static File getTestDir() throws Exception {
    File file=new File("dummy");
    file=file.getAbsoluteFile();
    file=file.getParentFile();
    file=new File(file,"target");
    file=new File(file,UUID.randomUUID().toString());
    if (!file.mkdirs()) {
      throw new RuntimeException("Could not create test directory: " + file);
    }
    return file;
  }
  @Rule public Timeout timeout=new Timeout(120000);
  @BeforeClass public static void init() throws Exception {
    baseDir=getTestDir();
    FileUtil.fullyDelete(baseDir);
    assertTrue(baseDir.mkdirs());
    Properties kdcConf=MiniKdc.createConf();
    kdc=new MiniKdc(kdcConf,baseDir);
    kdc.start();
    baseConf=new HdfsConfiguration();
    SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS,baseConf);
    UserGroupInformation.setConfiguration(baseConf);
    assertTrue("Expected configuration to enable security",UserGroupInformation.isSecurityEnabled());
    File keytabFile=new File(baseDir,"test.keytab");
    keytab=keytabFile.getAbsolutePath();
    String krbInstance=Path.WINDOWS ? "127.0.0.1" : "localhost";
    kdc.createPrincipal(keytabFile,HDFS_USER_NAME + "/" + krbInstance,SPNEGO_USER_NAME + "/" + krbInstance,OOZIE_USER_NAME + "/" + krbInstance,OOZIE_PROXIED_USER_NAME + "/" + krbInstance);
    hdfsPrincipal=HDFS_USER_NAME + "/" + krbInstance+ "@"+ kdc.getRealm();
    spnegoPrincipal=SPNEGO_USER_NAME + "/" + krbInstance+ "@"+ kdc.getRealm();
    ooziePrincipal=OOZIE_USER_NAME + "/" + krbInstance+ "@"+ kdc.getRealm();
    baseConf.set("hadoop.proxyuser.oozie.hosts","*");
    baseConf.set("hadoop.proxyuser.oozie.groups","*");
    baseConf.set("hadoop.user.group.static.mapping.overrides",OOZIE_PROXIED_USER_NAME + "=oozie");
    baseConf.set(DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY,hdfsPrincipal);
    baseConf.set(DFS_NAMENODE_KEYTAB_FILE_KEY,keytab);
    baseConf.set(DFS_DATANODE_KERBEROS_PRINCIPAL_KEY,hdfsPrincipal);
    baseConf.set(DFS_DATANODE_KEYTAB_FILE_KEY,keytab);
    baseConf.set(DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,spnegoPrincipal);
    baseConf.setBoolean(DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,true);
    baseConf.set(DFS_DATA_TRANSFER_PROTECTION_KEY,"authentication");
    baseConf.set(DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    baseConf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    baseConf.set(DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    baseConf.set(DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,"localhost:0");
    baseConf.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY,10);
    baseConf.set(KMS_CLIENT_ENC_KEY_CACHE_SIZE,"4");
    baseConf.set(KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK,"0.5");
    keystoresDir=baseDir.getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestSecureEncryptionZoneWithKMS.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,baseConf,false);
    baseConf.set(DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
    baseConf.set(DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
    File kmsFile=new File(baseDir,"kms-site.xml");
    if (kmsFile.exists()) {
      FileUtil.fullyDelete(kmsFile);
    }
    Configuration kmsConf=new Configuration(true);
    kmsConf.set(KMSConfiguration.KEY_PROVIDER_URI,"jceks://file@" + new Path(baseDir.toString(),"kms.keystore").toUri());
    kmsConf.set("hadoop.kms.authentication.type","kerberos");
    kmsConf.set("hadoop.kms.authentication.kerberos.keytab",keytab);
    kmsConf.set("hadoop.kms.authentication.kerberos.principal","HTTP/localhost");
    kmsConf.set("hadoop.kms.authentication.kerberos.name.rules","DEFAULT");
    kmsConf.set("hadoop.kms.acl.GENERATE_EEK","hdfs");
    kmsConf.setLong("hadoop.kms.authentication.token.validity",AUTH_TOKEN_VALIDITY);
    Writer writer=new FileWriter(kmsFile);
    kmsConf.writeXml(writer);
    writer.close();
    MiniKMS.Builder miniKMSBuilder=new MiniKMS.Builder();
    miniKMS=miniKMSBuilder.setKmsConfDir(baseDir).build();
    miniKMS.start();
  }
  @AfterClass public static void destroy() throws Exception {
    if (kdc != null) {
      kdc.stop();
    }
    if (miniKMS != null) {
      miniKMS.stop();
    }
    FileUtil.fullyDelete(baseDir);
    KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
  }
  @Before public void setup() throws Exception {
    baseConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH,getKeyProviderURI());
    baseConf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    conf=new HdfsConfiguration(baseConf);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    fsWrapper=new FileSystemTestWrapper(fs);
    dfsAdmin=new HdfsAdmin(cluster.getURI(),conf);
    cluster.waitActive();
    if (!testKeyCreated) {
      DFSTestUtil.createKey(testKey,cluster,conf);
      testKeyCreated=true;
    }
  }
  @After public void shutdown() throws IOException {
    IOUtils.cleanup(null,fs);
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  private String getKeyProviderURI(){
    return KMSClientProvider.SCHEME_NAME + "://" + miniKMS.getKMSUrl().toExternalForm().replace("://","@");
  }
  @Test public void testSecureEncryptionZoneWithKMS() throws IOException, InterruptedException {
    final Path zonePath=new Path(TEST_PATH,"TestEZ1");
    fsWrapper.mkdir(zonePath,FsPermission.getDirDefault(),true);
    fsWrapper.setOwner(zonePath,OOZIE_PROXIED_USER_NAME,"supergroup");
    dfsAdmin.createEncryptionZone(zonePath,testKey,NO_TRASH);
    UserGroupInformation oozieUgi=UserGroupInformation.loginUserFromKeytabAndReturnUGI(ooziePrincipal,keytab);
    UserGroupInformation proxyUserUgi=UserGroupInformation.createProxyUser(OOZIE_PROXIED_USER_NAME,oozieUgi);
    proxyUserUgi.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws IOException {
        try (DistributedFileSystem dfs=cluster.getFileSystem()){
          for (int i=0; i < 3; i++) {
            Path filePath=new Path(zonePath,"testData." + i + ".dat");
            DFSTestUtil.createFile(dfs,filePath,1024,(short)3,1L);
          }
          return null;
        }
 catch (        IOException e) {
          throw new IOException(e);
        }
      }
    }
);
  }
  @Test public void testCreateZoneAfterAuthTokenExpiry() throws Exception {
    final UserGroupInformation ugi=UserGroupInformation.loginUserFromKeytabAndReturnUGI(hdfsPrincipal,keytab);
    LOG.info("Created ugi: {} ",ugi);
    ugi.doAs((PrivilegedExceptionAction<Object>)() -> {
      final Path zone=new Path("/expire1");
      fsWrapper.mkdir(zone,FsPermission.getDirDefault(),true);
      dfsAdmin.createEncryptionZone(zone,testKey,NO_TRASH);
      final Path zone1=new Path("/expire2");
      fsWrapper.mkdir(zone1,FsPermission.getDirDefault(),true);
      final long sleepInterval=(AUTH_TOKEN_VALIDITY + 1) * 1000;
      LOG.info("Sleeping {} seconds to wait for kms auth token expiration",sleepInterval);
      Thread.sleep(sleepInterval);
      dfsAdmin.createEncryptionZone(zone1,testKey,NO_TRASH);
      return null;
    }
);
  }
}
