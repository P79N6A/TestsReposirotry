public static class TestScanResultHandler extends ScanResultHandler {
static class Info {
    boolean shouldRun=false;
    final Set<ExtendedBlock> badBlocks=new HashSet<ExtendedBlock>();
    final Set<ExtendedBlock> goodBlocks=new HashSet<ExtendedBlock>();
    long blocksScanned=0;
    Semaphore sem=null;
    @Override public String toString(){
      final StringBuilder bld=new StringBuilder();
      bld.append("ScanResultHandler.Info{");
      bld.append("shouldRun=").append(shouldRun).append(", ");
      bld.append("blocksScanned=").append(blocksScanned).append(", ");
      bld.append("sem#availablePermits=").append(sem.availablePermits()).append(", ");
      bld.append("badBlocks=").append(badBlocks).append(", ");
      bld.append("goodBlocks=").append(goodBlocks);
      bld.append("}");
      return bld.toString();
    }
  }
  private VolumeScanner scanner;
  final static ConcurrentHashMap<String,Info> infos=new ConcurrentHashMap<String,Info>();
  static Info getInfo(  FsVolumeSpi volume){
    Info newInfo=new Info();
    Info prevInfo=infos.putIfAbsent(volume.getStorageID(),newInfo);
    return prevInfo == null ? newInfo : prevInfo;
  }
  @Override public void setup(  VolumeScanner scanner){
    this.scanner=scanner;
    Info info=getInfo(scanner.volume);
    LOG.info("about to start scanning.");
synchronized (info) {
      while (!info.shouldRun) {
        try {
          info.wait();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    LOG.info("starting scanning.");
  }
  @Override public void handle(  ExtendedBlock block,  IOException e){
    LOG.info("handling block {} (exception {})",block,e);
    Info info=getInfo(scanner.volume);
    Semaphore sem;
synchronized (info) {
      sem=info.sem;
    }
    if (sem != null) {
      try {
        sem.acquire();
      }
 catch (      InterruptedException ie) {
        throw new RuntimeException("interrupted");
      }
    }
synchronized (info) {
      if (!info.shouldRun) {
        throw new RuntimeException("stopping volumescanner thread.");
      }
      if (e == null) {
        info.goodBlocks.add(block);
      }
 else {
        info.badBlocks.add(block);
      }
      info.blocksScanned++;
    }
  }
}
