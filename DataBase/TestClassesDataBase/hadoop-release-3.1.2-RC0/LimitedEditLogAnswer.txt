private static class LimitedEditLogAnswer implements Answer<Collection<EditLogInputStream>> {
  private boolean throwExceptionOnRead=true;
  @SuppressWarnings("unchecked") @Override public Collection<EditLogInputStream> answer(  InvocationOnMock invocation) throws Throwable {
    Collection<EditLogInputStream> streams=(Collection<EditLogInputStream>)invocation.callRealMethod();
    if (!throwExceptionOnRead) {
      return streams;
    }
 else {
      Collection<EditLogInputStream> ret=new LinkedList<EditLogInputStream>();
      for (      EditLogInputStream stream : streams) {
        EditLogInputStream spyStream=spy(stream);
        doAnswer(new Answer<FSEditLogOp>(){
          @Override public FSEditLogOp answer(          InvocationOnMock invocation) throws Throwable {
            FSEditLogOp op=(FSEditLogOp)invocation.callRealMethod();
            if (throwExceptionOnRead && TEST_DIR3.equals(NameNodeAdapter.getMkdirOpPath(op))) {
              throw new IOException("failed to read op creating " + TEST_DIR3);
            }
 else {
              return op;
            }
          }
        }
).when(spyStream).readOp();
        ret.add(spyStream);
      }
      return ret;
    }
  }
  public void setThrowExceptionOnRead(  boolean throwExceptionOnRead){
    this.throwExceptionOnRead=throwExceptionOnRead;
  }
}
