/** 
 * Primitive RPC server, which allows clients to connect to it.
 */
static class MiniServer implements MiniProtocol {
  private static final String DEFAULT_SERVER_ADDRESS="0.0.0.0";
  private TestDelegationTokenSecretManager secretManager;
  private Server rpcServer;
  @Override public long getProtocolVersion(  String protocol,  long clientVersion) throws IOException {
    if (protocol.equals(MiniProtocol.class.getName()))     return versionID;
    throw new IOException("Unknown protocol: " + protocol);
  }
  @Override public ProtocolSignature getProtocolSignature(  String protocol,  long clientVersion,  int clientMethodsHashCode) throws IOException {
    if (protocol.equals(MiniProtocol.class.getName()))     return new ProtocolSignature(versionID,null);
    throw new IOException("Unknown protocol: " + protocol);
  }
  @Override public Token<TestDelegationTokenIdentifier> getDelegationToken(  Text renewer) throws IOException {
    String owner=UserGroupInformation.getCurrentUser().getUserName();
    String realUser=UserGroupInformation.getCurrentUser().getRealUser() == null ? "" : UserGroupInformation.getCurrentUser().getRealUser().getUserName();
    TestDelegationTokenIdentifier tokenId=new TestDelegationTokenIdentifier(new Text(owner),renewer,new Text(realUser));
    return new Token<TestDelegationTokenIdentifier>(tokenId,secretManager);
  }
  /** 
 * Start RPC server 
 */
  MiniServer(  Configuration conf,  String user,  String keytabFile) throws IOException {
    UserGroupInformation.setConfiguration(conf);
    UserGroupInformation.loginUserFromKeytab(user,keytabFile);
    secretManager=new TestDelegationTokenSecretManager(24 * 60 * 60* 1000,7 * 24 * 60* 60* 1000,24 * 60 * 60* 1000,3600000);
    secretManager.startThreads();
    rpcServer=new RPC.Builder(conf).setProtocol(MiniProtocol.class).setInstance(this).setBindAddress(DEFAULT_SERVER_ADDRESS).setPort(0).setNumHandlers(1).setVerbose(false).setSecretManager(secretManager).build();
    rpcServer.start();
  }
  /** 
 * Stop RPC server 
 */
  void stop(){
    if (rpcServer != null)     rpcServer.stop();
    rpcServer=null;
  }
  /** 
 * Get RPC server address 
 */
  InetSocketAddress getAddress(){
    if (rpcServer == null)     return null;
    return NetUtils.getConnectAddress(rpcServer);
  }
}
