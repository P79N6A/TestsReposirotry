@RunWith(Parameterized.class) public class TestResourceUsage {
  private static final Log LOG=LogFactory.getLog(TestResourceUsage.class);
  private String suffix;
  @Parameterized.Parameters public static Collection<String[]> getParameters(){
    return Arrays.asList(new String[][]{{"Pending"},{"Used"},{"Reserved"},{"AMUsed"},{"AMLimit"},{"CachedUsed"},{"CachedPending"}});
  }
  public TestResourceUsage(  String suffix){
    this.suffix=suffix;
  }
  private static void dec(  ResourceUsage obj,  String suffix,  Resource res,  String label) throws Exception {
    executeByName(obj,"dec" + suffix,res,label);
  }
  private static void inc(  ResourceUsage obj,  String suffix,  Resource res,  String label) throws Exception {
    executeByName(obj,"inc" + suffix,res,label);
  }
  private static void set(  ResourceUsage obj,  String suffix,  Resource res,  String label) throws Exception {
    executeByName(obj,"set" + suffix,res,label);
  }
  private static Resource get(  ResourceUsage obj,  String suffix,  String label) throws Exception {
    return executeByName(obj,"get" + suffix,null,label);
  }
  private static Resource executeByName(  ResourceUsage obj,  String methodName,  Resource arg,  String label) throws Exception {
    if (methodName.startsWith("get")) {
      Resource result;
      if (label == null) {
        Method method=ResourceUsage.class.getDeclaredMethod(methodName);
        result=(Resource)method.invoke(obj);
      }
 else {
        Method method=ResourceUsage.class.getDeclaredMethod(methodName,String.class);
        result=(Resource)method.invoke(obj,label);
      }
      return result;
    }
 else {
      if (label == null) {
        Method method=ResourceUsage.class.getDeclaredMethod(methodName,Resource.class);
        method.invoke(obj,arg);
      }
 else {
        Method method=ResourceUsage.class.getDeclaredMethod(methodName,String.class,Resource.class);
        method.invoke(obj,label,arg);
      }
      return null;
    }
  }
  private void internalTestModifyAndRead(  String label) throws Exception {
    ResourceUsage usage=new ResourceUsage();
    Resource res;
    res=get(usage,suffix,label);
    check(0,0,res);
    try {
      inc(usage,suffix,Resource.newInstance(1,1),label);
      check(1,1,get(usage,suffix,label));
    }
 catch (    NoSuchMethodException e) {
    }
    set(usage,suffix,Resource.newInstance(2,2),label);
    check(2,2,get(usage,suffix,label));
    try {
      dec(usage,suffix,Resource.newInstance(2,2),label);
      check(0,0,get(usage,suffix,label));
    }
 catch (    NoSuchMethodException e) {
    }
  }
  void check(  int mem,  int cpu,  Resource res){
    Assert.assertEquals(mem,res.getMemorySize());
    Assert.assertEquals(cpu,res.getVirtualCores());
  }
  @Test public void testModifyAndRead() throws Exception {
    LOG.info("Test - " + suffix);
    internalTestModifyAndRead(null);
    internalTestModifyAndRead("label");
  }
}
