/** 
 * Test dummy raw coder.
 */
public class TestDummyRawCoder extends TestRawCoderBase {
  @Before public void setup(){
    encoderFactoryClass=DummyRawErasureCoderFactory.class;
    decoderFactoryClass=DummyRawErasureCoderFactory.class;
    setAllowDump(false);
    setChunkSize(baseChunkSize);
  }
  @Test public void testCoding_6x3_erasing_d0_d2(){
    prepare(null,6,3,new int[]{0,2},new int[0],false);
    testCodingDoMixed();
  }
  @Test public void testCoding_6x3_erasing_d0_p0(){
    prepare(null,6,3,new int[]{0},new int[]{0},false);
    testCodingDoMixed();
  }
  @Override protected void testCoding(  boolean usingDirectBuffer){
    this.usingDirectBuffer=usingDirectBuffer;
    prepareCoders(true);
    prepareBufferAllocator(true);
    setAllowChangeInputs(false);
    ECChunk[] dataChunks=prepareDataChunksForEncoding();
    markChunks(dataChunks);
    ECChunk[] parityChunks=prepareParityChunksForEncoding();
    try {
      encoder.encode(dataChunks,parityChunks);
    }
 catch (    IOException e) {
      Assert.fail("Unexpected IOException: " + e.getMessage());
    }
    compareAndVerify(parityChunks,getEmptyChunks(parityChunks.length));
    restoreChunksFromMark(dataChunks);
    backupAndEraseChunks(dataChunks,parityChunks);
    ECChunk[] inputChunks=prepareInputChunksForDecoding(dataChunks,parityChunks);
    ensureOnlyLeastRequiredChunks(inputChunks);
    ECChunk[] recoveredChunks=prepareOutputChunksForDecoding();
    try {
      decoder.decode(inputChunks,getErasedIndexesForDecoding(),recoveredChunks);
    }
 catch (    IOException e) {
      Assert.fail("Unexpected IOException: " + e.getMessage());
    }
    compareAndVerify(recoveredChunks,getEmptyChunks(recoveredChunks.length));
  }
  private ECChunk[] getEmptyChunks(  int num){
    ECChunk[] chunks=new ECChunk[num];
    for (int i=0; i < chunks.length; i++) {
      chunks[i]=new ECChunk(ByteBuffer.wrap(getZeroChunkBytes()));
    }
    return chunks;
  }
}
