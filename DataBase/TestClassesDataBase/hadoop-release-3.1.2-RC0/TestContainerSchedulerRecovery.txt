/** 
 * Tests to verify that the  {@link ContainerScheduler} is able torecover active containers based on RecoveredContainerStatus and ExecutionType.
 */
public class TestContainerSchedulerRecovery {
  @Mock private NMContext context;
  @Mock private NodeManagerMetrics metrics;
  @Mock private AsyncDispatcher dispatcher;
  @Mock private ContainerTokenIdentifier token;
  @Mock private ContainerImpl container;
  @Mock private ApplicationId appId;
  @Mock private ApplicationAttemptId appAttemptId;
  @Mock private ContainerId containerId;
  @Mock private AllocationBasedResourceUtilizationTracker allocationBasedResourceUtilizationTracker;
  @InjectMocks private ContainerScheduler tempContainerScheduler=new ContainerScheduler(context,dispatcher,metrics,0);
  private ContainerScheduler spy;
  private RecoveredContainerState createRecoveredContainerState(  RecoveredContainerStatus status){
    RecoveredContainerState mockState=mock(RecoveredContainerState.class);
    when(mockState.getStatus()).thenReturn(status);
    return mockState;
  }
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    spy=spy(tempContainerScheduler);
    when(container.getContainerId()).thenReturn(containerId);
    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);
    when(containerId.getApplicationAttemptId().getApplicationId()).thenReturn(appId);
    when(containerId.getContainerId()).thenReturn(123L);
    doNothing().when(allocationBasedResourceUtilizationTracker).addContainerResources(container);
  }
  @After public void tearDown(){
  }
  @Test public void testRecoverContainerQueuedGuaranteed() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.QUEUED);
    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(1,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerQueuedOpportunistic() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.QUEUED);
    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(1,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerPausedGuaranteed() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.PAUSED);
    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(1,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerPausedOpportunistic() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.PAUSED);
    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(1,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerLaunchedGuaranteed() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.LAUNCHED);
    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(1,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(1)).addContainerResources(container);
  }
  @Test public void testRecoverContainerLaunchedOpportunistic() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.LAUNCHED);
    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(1,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(1)).addContainerResources(container);
  }
  @Test public void testRecoverContainerRequestedGuaranteed() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.REQUESTED);
    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerRequestedOpportunistic() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.REQUESTED);
    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerCompletedGuaranteed() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.COMPLETED);
    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testRecoverContainerCompletedOpportunistic() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.COMPLETED);
    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testContainerQueuedNoExecType() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.QUEUED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
  @Test public void testContainerPausedNoExecType() throws IllegalArgumentException, IllegalAccessException {
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    RecoveredContainerState rcs=createRecoveredContainerState(RecoveredContainerStatus.PAUSED);
    when(container.getContainerTokenIdentifier()).thenReturn(token);
    spy.recoverActiveContainer(container,rcs);
    assertEquals(0,spy.getNumQueuedGuaranteedContainers());
    assertEquals(0,spy.getNumQueuedOpportunisticContainers());
    assertEquals(0,spy.getNumRunningContainers());
    Mockito.verify(allocationBasedResourceUtilizationTracker,Mockito.times(0)).addContainerResources(container);
  }
}
