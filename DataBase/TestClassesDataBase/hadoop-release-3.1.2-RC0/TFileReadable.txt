static class TFileReadable implements KVReadable {
  private FSDataInputStream fsdis;
  private TFile.Reader reader;
  private TFile.Reader.Scanner scanner;
  private byte[] keyBuffer;
  private int keyLength;
  private byte[] valueBuffer;
  private int valueLength;
  public TFileReadable(  FileSystem fs,  Path path,  int osBufferSize,  Configuration conf) throws IOException {
    this.fsdis=fs.open(path,osBufferSize);
    this.reader=new TFile.Reader(fsdis,fs.getFileStatus(path).getLen(),conf);
    this.scanner=reader.createScanner();
    keyBuffer=new byte[32];
    valueBuffer=new byte[32];
  }
  private void checkKeyBuffer(  int size){
    if (size <= keyBuffer.length) {
      return;
    }
    keyBuffer=new byte[Math.max(2 * keyBuffer.length,2 * size - keyBuffer.length)];
  }
  private void checkValueBuffer(  int size){
    if (size <= valueBuffer.length) {
      return;
    }
    valueBuffer=new byte[Math.max(2 * valueBuffer.length,2 * size - valueBuffer.length)];
  }
  @Override public byte[] getKey(){
    return keyBuffer;
  }
  @Override public int getKeyLength(){
    return keyLength;
  }
  @Override public byte[] getValue(){
    return valueBuffer;
  }
  @Override public int getValueLength(){
    return valueLength;
  }
  @Override public boolean next() throws IOException {
    if (scanner.atEnd())     return false;
    Entry entry=scanner.entry();
    keyLength=entry.getKeyLength();
    checkKeyBuffer(keyLength);
    entry.getKey(keyBuffer);
    valueLength=entry.getValueLength();
    checkValueBuffer(valueLength);
    entry.getValue(valueBuffer);
    scanner.advance();
    return true;
  }
  @Override public void close() throws IOException {
    scanner.close();
    reader.close();
    fsdis.close();
  }
}
