/** 
 * Tests for  {@link AbstractLauncher}.
 */
public class TestAbstractLauncher {
  private AbstractLauncher launcher;
  @Before public void setup(){
    launcher=new AbstractLauncher(mock(ServiceContext.class));
  }
  @Test public void testDockerContainerMounts() throws IOException {
    launcher.yarnDockerMode=true;
    launcher.envVars.put(AbstractLauncher.ENV_DOCKER_CONTAINER_MOUNTS,"s1:t1:ro");
    launcher.mountPaths.put("s2","t2");
    launcher.completeContainerLaunch();
    String dockerContainerMounts=launcher.containerLaunchContext.getEnvironment().get(AbstractLauncher.ENV_DOCKER_CONTAINER_MOUNTS);
    Assert.assertEquals("s1:t1:ro,s2:t2:ro",dockerContainerMounts);
  }
  @Test public void testContainerRetries() throws Exception {
    DefaultProviderService providerService=new DefaultProviderService();
    AbstractLauncher mockLauncher=mock(AbstractLauncher.class);
    ContainerLaunchService.ComponentLaunchContext componentLaunchContext=mock(ContainerLaunchService.ComponentLaunchContext.class);
    ComponentInstance componentInstance=mock(ComponentInstance.class);
    Component component=mock(Component.class);
    when(componentInstance.getComponent()).thenReturn(component);
    when(component.getRestartPolicyHandler()).thenReturn(NeverRestartPolicy.getInstance());
    providerService.buildContainerRetry(mockLauncher,getConfig(),componentLaunchContext,componentInstance);
    verifyZeroInteractions(mockLauncher);
    when(component.getRestartPolicyHandler()).thenReturn(OnFailureRestartPolicy.getInstance());
    when(componentLaunchContext.getConfiguration()).thenReturn(new Configuration());
    providerService.buildContainerRetry(mockLauncher,getConfig(),componentLaunchContext,componentInstance);
    verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX,DEFAULT_CONTAINER_RETRY_INTERVAL,DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL);
    reset(mockLauncher);
    when(component.getRestartPolicyHandler()).thenReturn(AlwaysRestartPolicy.getInstance());
    providerService.buildContainerRetry(mockLauncher,getConfig(),componentLaunchContext,componentInstance);
    verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX,DEFAULT_CONTAINER_RETRY_INTERVAL,DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL);
  }
}
