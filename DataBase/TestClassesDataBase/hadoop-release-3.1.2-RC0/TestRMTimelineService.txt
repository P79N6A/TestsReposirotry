/** 
 * Tests that the RM creates timeline services (v1/v2) as specified by the configuration.
 */
public class TestRMTimelineService {
  private static MockRM rm;
  private void setup(  boolean v1Enabled,  boolean v2Enabled){
    Configuration conf=new YarnConfiguration(new Configuration(false));
    Assert.assertFalse(YarnConfiguration.timelineServiceEnabled(conf));
    if (v1Enabled || v2Enabled) {
      conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    }
    if (v1Enabled) {
      conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,1.0f);
    }
    if (v2Enabled) {
      conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,2.0f);
      conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS,FileSystemTimelineWriterImpl.class,TimelineWriter.class);
    }
    if (v1Enabled && v2Enabled) {
      conf.set(YarnConfiguration.TIMELINE_SERVICE_VERSION,"1.0");
      conf.set(YarnConfiguration.TIMELINE_SERVICE_VERSIONS,"1.0,2.0f");
    }
    MemoryRMStateStore memStore=new MemoryRMStateStore();
    memStore.init(conf);
    rm=new MockRM(conf,memStore);
    rm.start();
  }
  private void validate(  boolean v1Enabled,  boolean v2Enabled){
    boolean v1PublisherServiceFound=false;
    boolean v2PublisherServiceFound=false;
    List<Service> services=rm.getServices();
    for (    Service service : services) {
      if (service instanceof TimelineServiceV1Publisher) {
        v1PublisherServiceFound=true;
      }
 else       if (service instanceof TimelineServiceV2Publisher) {
        v2PublisherServiceFound=true;
      }
    }
    Assert.assertEquals(v1Enabled,v1PublisherServiceFound);
    Assert.assertEquals(v2Enabled,v2PublisherServiceFound);
  }
  private void cleanup() throws Exception {
    rm.close();
    rm.stop();
  }
  private void runTest(  boolean v1Enabled,  boolean v2Enabled) throws Exception {
    setup(v1Enabled,v2Enabled);
    validate(v1Enabled,v2Enabled);
    cleanup();
  }
  @Test public void testTimelineServiceV1V2Enabled() throws Exception {
    runTest(true,true);
  }
  @Test public void testTimelineServiceV1Enabled() throws Exception {
    runTest(true,false);
  }
  @Test public void testTimelineServiceV2Enabled() throws Exception {
    runTest(false,true);
  }
  @Test public void testTimelineServiceDisabled() throws Exception {
    runTest(false,false);
  }
}
