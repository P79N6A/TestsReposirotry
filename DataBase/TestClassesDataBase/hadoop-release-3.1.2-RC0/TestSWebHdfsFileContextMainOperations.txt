/** 
 * Test of FileContext apis on SWebhdfs.
 */
public class TestSWebHdfsFileContextMainOperations extends TestWebHdfsFileContextMainOperations {
  private static MiniDFSCluster cluster;
  private static Path defaultWorkingDirectory;
  private static String keystoresDir;
  private static String sslConfDir;
  protected static URI webhdfsUrl;
  private static final HdfsConfiguration CONF=new HdfsConfiguration();
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestSWebHdfsFileContextMainOperations.class.getSimpleName());
  protected static int numBlocks=2;
  protected static final byte[] data=getFileData(numBlocks,getDefaultBlockSize());
  @BeforeClass public static void clusterSetupAtBeginning() throws IOException, LoginException, URISyntaxException {
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    try {
      sslConfDir=KeyStoreTestUtil.getClasspathDir(TestSWebHdfsFileContextMainOperations.class);
      KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,CONF,false);
      CONF.set(DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
      CONF.set(DFSConfigKeys.DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
    CONF.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,"HTTPS_ONLY");
    CONF.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    CONF.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    CONF.set(SSLFactory.SSL_HOSTNAME_VERIFIER_KEY,"DEFAULT_AND_LOCALHOST");
    cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
    cluster.waitClusterUp();
    webhdfsUrl=new URI(SWebHdfs.SCHEME + "://" + cluster.getConfiguration(0).get(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY));
    fc=FileContext.getFileContext(webhdfsUrl,CONF);
    defaultWorkingDirectory=fc.makeQualified(new Path("/user/" + UserGroupInformation.getCurrentUser().getShortUserName()));
    fc.mkdir(defaultWorkingDirectory,FileContext.DEFAULT_PERM,true);
  }
  @Override protected FileContextTestHelper createFileContextHelper(){
    return new FileContextTestHelper("/tmp/TestSWebHdfsFileContextMainOperations");
  }
  @Override public URI getWebhdfsUrl(){
    return webhdfsUrl;
  }
  @AfterClass public static void ClusterShutdownAtEnd() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    FileUtil.fullyDelete(new File(BASEDIR));
    KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
  }
}
