public class TestPriorityUtilizationQueueOrderingPolicy {
  private List<CSQueue> mockCSQueues(  String[] queueNames,  int[] priorities,  float[] utilizations,  float[] absCapacities,  String partition){
    assert queueNames != null && priorities != null && utilizations != null && queueNames.length > 0 && queueNames.length == priorities.length && priorities.length == utilizations.length;
    List<CSQueue> list=new ArrayList<>();
    for (int i=0; i < queueNames.length; i++) {
      CSQueue q=mock(CSQueue.class);
      when(q.getQueueName()).thenReturn(queueNames[i]);
      QueueCapacities qc=new QueueCapacities(false);
      qc.setAbsoluteCapacity(partition,absCapacities[i]);
      qc.setUsedCapacity(partition,utilizations[i]);
      when(q.getQueueCapacities()).thenReturn(qc);
      when(q.getPriority()).thenReturn(Priority.newInstance(priorities[i]));
      QueueResourceQuotas qr=new QueueResourceQuotas();
      when(q.getQueueResourceQuotas()).thenReturn(qr);
      list.add(q);
    }
    return list;
  }
  private void verifyOrder(  QueueOrderingPolicy orderingPolicy,  String partition,  String[] expectedOrder){
    Iterator<CSQueue> iter=orderingPolicy.getAssignmentIterator(partition);
    int i=0;
    while (iter.hasNext()) {
      CSQueue q=iter.next();
      Assert.assertEquals(expectedOrder[i],q.getQueueName());
      i++;
    }
    assert i == expectedOrder.length;
  }
  @Test public void testUtilizationOrdering(){
    PriorityUtilizationQueueOrderingPolicy policy=new PriorityUtilizationQueueOrderingPolicy(false);
    policy.setQueues(mockCSQueues(new String[]{"a"},new int[]{0},new float[]{0.1f},new float[]{0.2f},""));
    verifyOrder(policy,"",new String[]{"a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{0,0},new float[]{0.1f,0.0f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c"},new int[]{0,0,0},new float[]{0.1f,0.0f,0.2f},new float[]{0.2f,0.3f,0.4f},""));
    verifyOrder(policy,"",new String[]{"b","a","c"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c"},new int[]{2,1,0},new float[]{0.1f,0.0f,0.2f},new float[]{0.2f,0.3f,0.4f},""));
    verifyOrder(policy,"",new String[]{"b","a","c"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c"},new int[]{2,1,0},new float[]{0.1f,0.0f,0.2f},new float[]{0.2f,0.3f,0.4f},"x"));
    verifyOrder(policy,"",new String[]{"a","b","c"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c"},new int[]{2,1,0},new float[]{0.1f,0.0f,0.2f},new float[]{0.2f,0.3f,0.4f},"x"));
    verifyOrder(policy,"x",new String[]{"b","a","c"});
    List<CSQueue> queues=mockCSQueues(new String[]{"a","b","c"},new int[]{2,1,0},new float[]{0.1f,0.0f,0.2f},new float[]{0.2f,0.3f,0.4f},"x");
    when(queues.get(0).getAccessibleNodeLabels()).thenReturn(ImmutableSet.of("x","y"));
    when(queues.get(2).getAccessibleNodeLabels()).thenReturn(ImmutableSet.of("x","y"));
    policy.setQueues(queues);
    verifyOrder(policy,"x",new String[]{"a","c","b"});
  }
  @Test public void testPriorityUtilizationOrdering(){
    PriorityUtilizationQueueOrderingPolicy policy=new PriorityUtilizationQueueOrderingPolicy(true);
    policy.setQueues(mockCSQueues(new String[]{"a"},new int[]{1},new float[]{0.1f},new float[]{0.2f},""));
    verifyOrder(policy,"",new String[]{"a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{0.2f,0.1f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{1.1f,1.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{0.1f,1.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,2},new float[]{1.1f,1.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,2},new float[]{0.1f,0.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,2},new float[]{0.1f,1.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{2,1},new float[]{0.1f,1.2f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,2},new float[]{0.1f,1.0f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{2,1},new float[]{0.1f,1.0f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{0.1f,1.0f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,2},new float[]{1.0f,1.0f},new float[]{0.2f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c","d","e"},new int[]{1,2,0,0,3},new float[]{1.2f,1.0f,0.2f,1.1f,0.2f},new float[]{0.2f,0.1f,0.1f,0.3f,0.3f},""));
    verifyOrder(policy,"",new String[]{"e","c","b","a","d"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c","d","e"},new int[]{1,2,0,0,3},new float[]{1.2f,1.0f,0.2f,1.1f,0.2f},new float[]{0.2f,0.1f,0.1f,0.3f,0.3f},"x"));
    verifyOrder(policy,"",new String[]{"e","b","a","c","d"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c","d","e"},new int[]{1,2,0,0,3},new float[]{1.2f,1.0f,0.2f,1.1f,0.2f},new float[]{0.2f,0.1f,0.1f,0.3f,0.3f},"x"));
    verifyOrder(policy,"x",new String[]{"e","c","b","a","d"});
    List<CSQueue> queues=mockCSQueues(new String[]{"a","b","c","d","e"},new int[]{1,2,0,0,3},new float[]{1.2f,1.0f,0.2f,1.1f,0.2f},new float[]{0.2f,0.1f,0.1f,0.3f,0.3f},"x");
    when(queues.get(0).getAccessibleNodeLabels()).thenReturn(ImmutableSet.of("x"));
    when(queues.get(3).getAccessibleNodeLabels()).thenReturn(ImmutableSet.of("x"));
    policy.setQueues(queues);
    verifyOrder(policy,"x",new String[]{"a","d","e","c","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{0.1f,1.2f},new float[]{0.0f,0.3f},""));
    verifyOrder(policy,"",new String[]{"b","a"});
    policy.setQueues(mockCSQueues(new String[]{"a","b"},new int[]{1,1},new float[]{0.1f,1.2f},new float[]{0.3f,0.0f},""));
    verifyOrder(policy,"",new String[]{"a","b"});
    policy.setQueues(mockCSQueues(new String[]{"a","b","c","d","e"},new int[]{1,2,0,0,3},new float[]{1.2f,1.0f,0.2f,1.1f,0.2f},new float[]{0.0f,0.0f,0.1f,0.3f,0.3f},"x"));
    verifyOrder(policy,"x",new String[]{"e","c","d","b","a"});
  }
}
