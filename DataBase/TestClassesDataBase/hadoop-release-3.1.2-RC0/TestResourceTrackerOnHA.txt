public class TestResourceTrackerOnHA extends ProtocolHATestBase {
  private ResourceTracker resourceTracker=null;
  @Before public void initiate() throws Exception {
    startHACluster(0,false,true,false);
    this.resourceTracker=getRMClient();
  }
  @After public void shutDown(){
    if (this.resourceTracker != null) {
      RPC.stopProxy(this.resourceTracker);
    }
  }
  @Test(timeout=15000) public void testResourceTrackerOnHA() throws Exception {
    NodeId nodeId=NodeId.newInstance("localhost",0);
    Resource resource=Resource.newInstance(2048,4);
    RegisterNodeManagerRequest request=RegisterNodeManagerRequest.newInstance(nodeId,0,resource,YarnVersionInfo.getVersion(),null,null);
    resourceTracker.registerNodeManager(request);
    Assert.assertTrue(waitForNodeManagerToConnect(10000,nodeId));
    failoverThread=createAndStartFailoverThread();
    NodeStatus status=NodeStatus.newInstance(NodeId.newInstance("localhost",0),0,null,null,null,null,null,null);
    NodeHeartbeatRequest request2=NodeHeartbeatRequest.newInstance(status,null,null,null);
    resourceTracker.nodeHeartbeat(request2);
  }
  private ResourceTracker getRMClient() throws IOException {
    return ServerRMProxy.createRMProxy(this.conf,ResourceTracker.class);
  }
  private boolean waitForNodeManagerToConnect(  int timeout,  NodeId nodeId) throws Exception {
    for (int i=0; i < timeout / 100; i++) {
      if (getActiveRM().getRMContext().getRMNodes().containsKey(nodeId)) {
        return true;
      }
      Thread.sleep(100);
    }
    return false;
  }
}
