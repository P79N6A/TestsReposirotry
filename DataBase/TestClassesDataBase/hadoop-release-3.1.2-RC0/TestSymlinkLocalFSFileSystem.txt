public class TestSymlinkLocalFSFileSystem extends TestSymlinkLocalFS {
  @BeforeClass public static void testSetup() throws Exception {
    FileSystem filesystem=FileSystem.getLocal(new Configuration());
    wrapper=new FileSystemTestWrapper(filesystem);
  }
  @Ignore("RawLocalFileSystem#mkdir does not treat existence of directory" + " as an error") @Override @Test(timeout=10000) public void testMkdirExistingLink() throws IOException {
  }
  @Ignore("FileSystem#create defaults to creating parents," + " throwing an IOException instead of FileNotFoundException") @Override @Test(timeout=10000) public void testCreateFileViaDanglingLinkParent() throws IOException {
  }
  @Ignore("RawLocalFileSystem does not throw an exception if the path" + " already exists") @Override @Test(timeout=10000) public void testCreateFileDirExistingLink() throws IOException {
  }
  @Ignore("ChecksumFileSystem does not support append") @Override @Test(timeout=10000) public void testAccessFileViaInterSymlinkAbsTarget() throws IOException {
  }
  @Override public void testRenameFileWithDestParentSymlink() throws IOException {
    assumeNotWindows();
    super.testRenameFileWithDestParentSymlink();
  }
  @Override @Test(timeout=10000) public void testRenameSymlinkToItself() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    createAndWriteFile(file);
    Path link=new Path(testBaseDir1(),"linkToFile1");
    wrapper.createSymlink(file,link,false);
    try {
      wrapper.rename(link,link);
      fail("Failed to get expected IOException");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
    }
    try {
      wrapper.rename(link,link,Rename.OVERWRITE);
      fail("Failed to get expected IOException");
    }
 catch (    IOException e) {
      assertTrue(unwrapException(e) instanceof FileAlreadyExistsException || unwrapException(e) instanceof FileNotFoundException);
    }
  }
}
