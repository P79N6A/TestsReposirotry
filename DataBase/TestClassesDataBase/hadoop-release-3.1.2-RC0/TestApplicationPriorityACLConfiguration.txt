public class TestApplicationPriorityACLConfiguration {
  private final int defaultPriorityQueueA=3;
  private final int defaultPriorityQueueB=-1;
  private final int maxPriorityQueueA=5;
  private final int maxPriorityQueueB=10;
  private final int clusterMaxPriority=10;
  private static final String QUEUE_A_USER="queueA_user";
  private static final String QUEUE_B_USER="queueB_user";
  private static final String QUEUE_A_GROUP="queueA_group";
  private static final String QUEUEA="queueA";
  private static final String QUEUEB="queueB";
  private static final String QUEUEC="queueC";
  @Test public void testSimpleACLConfiguration() throws Exception {
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{QUEUEA,QUEUEB,QUEUEC});
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,50f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,25f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEC,25f);
    String[] aclsForA=new String[2];
    aclsForA[0]=QUEUE_A_USER;
    aclsForA[1]=QUEUE_A_GROUP;
    csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(maxPriorityQueueA),Priority.newInstance(defaultPriorityQueueA),aclsForA);
    List<AppPriorityACLGroup> pGroupA=csConf.getPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(clusterMaxPriority));
    verifyACLs(pGroupA,QUEUE_A_USER,QUEUE_A_GROUP,maxPriorityQueueA,defaultPriorityQueueA);
  }
  @Test public void testACLConfigurationForInvalidCases() throws Exception {
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{QUEUEA,QUEUEB,QUEUEC});
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,50f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,25f);
    csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEC,25f);
    String[] aclsForA=new String[2];
    aclsForA[0]=QUEUE_A_USER;
    aclsForA[1]=QUEUE_A_GROUP;
    csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(maxPriorityQueueA),Priority.newInstance(defaultPriorityQueueA),aclsForA);
    String[] aclsForB=new String[1];
    aclsForB[0]=QUEUE_B_USER;
    csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,Priority.newInstance(maxPriorityQueueB),Priority.newInstance(defaultPriorityQueueB),aclsForB);
    List<AppPriorityACLGroup> pGroupA=csConf.getPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(clusterMaxPriority));
    List<AppPriorityACLGroup> pGroupB=csConf.getPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,Priority.newInstance(clusterMaxPriority));
    verifyACLs(pGroupA,QUEUE_A_USER,QUEUE_A_GROUP,maxPriorityQueueA,defaultPriorityQueueA);
    verifyACLs(pGroupB,QUEUE_B_USER,"",maxPriorityQueueB,0);
  }
  private void verifyACLs(  List<AppPriorityACLGroup> pGroup,  String queueUser,  String queueGroup,  int maxPriority,  int defaultPriority){
    AppPriorityACLGroup group=pGroup.get(0);
    String aclString=queueUser + " " + queueGroup;
    Assert.assertEquals(aclString.trim(),group.getACLList().getAclString().trim());
    Assert.assertEquals(maxPriority,group.getMaxPriority().getPriority());
    Assert.assertEquals(defaultPriority,group.getDefaultPriority().getPriority());
  }
}
