/** 
 * This class tests the  {@code CapacityOvertimePolicy} sharing policy.
 */
@RunWith(value=Parameterized.class) @NotThreadSafe @SuppressWarnings("VisibilityModifier") public class TestCapacityOverTimePolicy extends BaseSharingPolicyTest {
  final static long ONEDAY=86400 * 1000;
  final static long ONEHOUR=3600 * 1000;
  final static long ONEMINUTE=60 * 1000;
  final static String TWOHOURPERIOD="7200000";
  final static String ONEDAYPERIOD="86400000";
  @Parameterized.Parameters(name="Duration {0}, height {1}," + " numSubmission {2}, periodic {3})") public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{ONEHOUR,0.25,1,null,null},{ONEHOUR,0.25,1,TWOHOURPERIOD,null},{ONEHOUR,0.25,1,ONEDAYPERIOD,null},{ONEMINUTE,0.74,1,null,null},{ONEMINUTE,0.74,1,TWOHOURPERIOD,null},{ONEMINUTE,0.74,1,ONEDAYPERIOD,null},{ONEHOUR,0.76,1,null,PlanningQuotaException.class},{ONEHOUR,0.76,1,TWOHOURPERIOD,PlanningQuotaException.class},{ONEHOUR,0.76,1,ONEDAYPERIOD,PlanningQuotaException.class},{ONEHOUR,1.1,1,null,PlanningQuotaException.class},{ONEHOUR,1.1,1,TWOHOURPERIOD,PlanningQuotaException.class},{ONEHOUR,1.1,1,ONEDAYPERIOD,PlanningQuotaException.class},{ONEMINUTE,0.25,3,null,null},{ONEMINUTE,0.25,3,TWOHOURPERIOD,null},{ONEMINUTE,0.25,3,ONEDAYPERIOD,null},{ONEMINUTE,0.25,4,null,PlanningQuotaException.class},{ONEMINUTE,0.25,4,TWOHOURPERIOD,PlanningQuotaException.class},{ONEMINUTE,0.25,4,ONEDAYPERIOD,PlanningQuotaException.class},{25 * ONEHOUR,0.25,1,null,PlanningQuotaException.class},{25 * ONEHOUR,0.25,1,TWOHOURPERIOD,PlanningQuotaException.class},{25 * ONEHOUR,0.25,1,ONEDAYPERIOD,PlanningQuotaException.class},{25 * ONEHOUR,0.05,5,null,PlanningQuotaException.class},{25 * ONEHOUR,0.05,5,TWOHOURPERIOD,PlanningQuotaException.class},{25 * ONEHOUR,0.05,5,ONEDAYPERIOD,PlanningQuotaException.class},{ONEDAY,0.26,1,null,PlanningQuotaException.class},{2 * ONEHOUR,0.26,1,TWOHOURPERIOD,PlanningQuotaException.class},{2 * ONEDAY,0.26,1,ONEDAYPERIOD,PlanningQuotaException.class},{ONEDAY / 2,0.51,1,null,PlanningQuotaException.class},{2 * ONEHOUR / 2,0.51,1,TWOHOURPERIOD,PlanningQuotaException.class},{2 * ONEDAY / 2,0.51,1,ONEDAYPERIOD,PlanningQuotaException.class}});
  }
  @Override public SharingPolicy getInitializedPolicy(){
    long timeWindow=86400000L;
    long step=1000L;
    float avgConstraint=25;
    float instConstraint=75;
    String reservationQ=ReservationSystemTestUtil.getFullReservationQueueName();
    conf=ReservationSystemTestUtil.createConf(reservationQ,timeWindow,instConstraint,avgConstraint);
    CapacityOverTimePolicy policy=new CapacityOverTimePolicy();
    policy.init(reservationQ,conf);
    return policy;
  }
  @Test public void testAllocation() throws IOException, PlanningException {
    runTest();
  }
}
