/** 
 * Tests for  {@link ComponentInstance}.
 */
public class TestComponentInstance {
  @Rule public ServiceTestUtils.ServiceFSWatcher rule=new ServiceTestUtils.ServiceFSWatcher();
  @Test public void testContainerUpgrade() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testContainerUpgrade");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent instanceEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(instanceEvent);
    Container containerSpec=component.getComponentSpec().getContainer(instance.getContainer().getId().toString());
    Assert.assertEquals("instance not upgrading",ContainerState.UPGRADING,containerSpec.getState());
  }
  @Test public void testContainerReadyAfterUpgrade() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testContainerReadyAfterUpgrade");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent instanceEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(instanceEvent);
    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.START));
    Assert.assertEquals("instance not running",ContainerState.RUNNING_BUT_UNREADY,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.BECOME_READY));
    Assert.assertEquals("instance not ready",ContainerState.READY,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
  }
  @Test public void testContainerUpgradeFailed() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testContainerUpgradeFailed");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent upgradeEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(upgradeEvent);
    ContainerStatus containerStatus=mock(ContainerStatus.class);
    when(containerStatus.getExitStatus()).thenReturn(ContainerExitStatus.ABORTED);
    ComponentInstanceEvent stopEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.STOP).setStatus(containerStatus);
    instance.handle(stopEvent);
    Assert.assertEquals("instance did not fail",ContainerState.FAILED_UPGRADE,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
  }
  @Test public void testFailureAfterReinit() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testContainerUpgradeFailed");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent upgradeEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(upgradeEvent);
    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.START));
    Assert.assertEquals("instance not running",ContainerState.RUNNING_BUT_UNREADY,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
    ContainerStatus containerStatus=mock(ContainerStatus.class);
    when(containerStatus.getExitStatus()).thenReturn(ContainerExitStatus.ABORTED);
    ComponentInstanceEvent stopEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.STOP).setStatus(containerStatus);
    instance.handle(stopEvent);
    Assert.assertEquals("instance did not fail",ContainerState.FAILED_UPGRADE,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
  }
  @Test public void testCancelNothingToUpgrade() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testCancelUpgradeWhenContainerReady");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    cancelCompUpgrade(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent cancelEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.CANCEL_UPGRADE);
    instance.handle(cancelEvent);
    Assert.assertEquals("instance not ready",ContainerState.READY,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
  }
  @Test public void testCancelUpgradeFailed() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testCancelUpgradeFailed");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    cancelCompUpgrade(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent cancelEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.CANCEL_UPGRADE);
    instance.handle(cancelEvent);
    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.STOP));
    Assert.assertEquals("instance not init",ComponentInstanceState.INIT,instance.getState());
  }
  @Test public void testCancelAfterCompProcessedCancel() throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testCancelAfterCompProcessedCancel");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    cancelCompUpgrade(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent upgradeEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(upgradeEvent);
    Assert.assertEquals("instance should start upgrading",ContainerState.NEEDS_UPGRADE,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
  }
  @Test public void testCancelWhileUpgradeWithSuccess() throws Exception {
    validateCancelWhileUpgrading(true,true);
  }
  @Test public void testCancelWhileUpgradeWithFailure() throws Exception {
    validateCancelWhileUpgrading(false,true);
  }
  @Test public void testCancelFailedWhileUpgradeWithSuccess() throws Exception {
    validateCancelWhileUpgrading(true,false);
  }
  @Test public void testCancelFailedWhileUpgradeWithFailure() throws Exception {
    validateCancelWhileUpgrading(false,false);
  }
  private void validateCancelWhileUpgrading(  boolean upgradeSuccessful,  boolean cancelUpgradeSuccessful) throws Exception {
    ServiceContext context=TestComponent.createTestContext(rule,"testCancelWhileUpgrading");
    Component component=context.scheduler.getAllComponents().entrySet().iterator().next().getValue();
    upgradeComponent(component);
    ComponentInstance instance=component.getAllComponentInstances().iterator().next();
    ComponentInstanceEvent upgradeEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.UPGRADE);
    instance.handle(upgradeEvent);
    Assert.assertEquals("instance should be upgrading",ContainerState.UPGRADING,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
    cancelCompUpgrade(component);
    ComponentInstanceEvent cancelEvent=new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.CANCEL_UPGRADE);
    instance.handle(cancelEvent);
    if (upgradeSuccessful) {
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.START));
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.BECOME_READY));
    }
 else {
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.STOP));
    }
    Assert.assertEquals("instance not upgrading",ContainerState.UPGRADING,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
    if (cancelUpgradeSuccessful) {
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.START));
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.BECOME_READY));
    }
 else {
      instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(),ComponentInstanceEventType.STOP));
    }
    if (cancelUpgradeSuccessful) {
      Assert.assertEquals("instance not ready",ContainerState.READY,component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());
    }
 else {
      Assert.assertEquals("instance not init",ComponentInstanceState.INIT,instance.getState());
    }
  }
  private void upgradeComponent(  Component component){
    component.handle(new ComponentEvent(component.getName(),ComponentEventType.UPGRADE).setTargetSpec(component.getComponentSpec()).setUpgradeVersion("v2"));
  }
  private void cancelCompUpgrade(  Component component){
    component.handle(new ComponentEvent(component.getName(),ComponentEventType.CANCEL_UPGRADE).setTargetSpec(component.getComponentSpec()).setUpgradeVersion("v1"));
  }
  private Component createComponent(  ServiceScheduler scheduler,  org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy,  int nSucceededInstances,  int nFailedInstances,  int totalAsk,  int componentId){
    assert (nSucceededInstances + nFailedInstances) <= totalAsk;
    Component comp=mock(Component.class);
    org.apache.hadoop.yarn.service.api.records.Component componentSpec=mock(org.apache.hadoop.yarn.service.api.records.Component.class);
    when(componentSpec.getRestartPolicy()).thenReturn(restartPolicy);
    when(comp.getRestartPolicyHandler()).thenReturn(Component.getRestartPolicyHandler(restartPolicy));
    when(componentSpec.getNumberOfContainers()).thenReturn(Long.valueOf(totalAsk));
    when(comp.getComponentSpec()).thenReturn(componentSpec);
    when(comp.getScheduler()).thenReturn(scheduler);
    Map<String,ComponentInstance> succeeded=new ConcurrentHashMap<>();
    Map<String,ComponentInstance> failed=new ConcurrentHashMap<>();
    scheduler.getAllComponents().put("comp" + componentId,comp);
    Map<String,ComponentInstance> componentInstances=new HashMap<>();
    for (int i=0; i < nSucceededInstances; i++) {
      ComponentInstance componentInstance=createComponentInstance(comp,i);
      componentInstances.put(componentInstance.getCompInstanceName(),componentInstance);
      succeeded.put(componentInstance.getCompInstanceName(),componentInstance);
    }
    for (int i=0; i < nFailedInstances; i++) {
      ComponentInstance componentInstance=createComponentInstance(comp,i + nSucceededInstances);
      componentInstances.put(componentInstance.getCompInstanceName(),componentInstance);
      failed.put(componentInstance.getCompInstanceName(),componentInstance);
    }
    int delta=totalAsk - nFailedInstances - nSucceededInstances;
    for (int i=0; i < delta; i++) {
      ComponentInstance componentInstance=createComponentInstance(comp,i + nSucceededInstances + nFailedInstances);
      componentInstances.put(componentInstance.getCompInstanceName(),componentInstance);
    }
    when(comp.getAllComponentInstances()).thenReturn(componentInstances.values());
    when(comp.getSucceededInstances()).thenReturn(succeeded.values());
    when(comp.getFailedInstances()).thenReturn(failed.values());
    return comp;
  }
  private Component createComponent(  ServiceScheduler scheduler,  org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy,  int totalAsk,  int componentId){
    Component comp=mock(Component.class);
    org.apache.hadoop.yarn.service.api.records.Component componentSpec=mock(org.apache.hadoop.yarn.service.api.records.Component.class);
    when(componentSpec.getRestartPolicy()).thenReturn(restartPolicy);
    when(comp.getRestartPolicyHandler()).thenReturn(Component.getRestartPolicyHandler(restartPolicy));
    when(componentSpec.getNumberOfContainers()).thenReturn(Long.valueOf(totalAsk));
    when(comp.getComponentSpec()).thenReturn(componentSpec);
    when(comp.getScheduler()).thenReturn(scheduler);
    scheduler.getAllComponents().put("comp" + componentId,comp);
    Map<String,ComponentInstance> componentInstances=new HashMap<>();
    for (int i=0; i < totalAsk; i++) {
      ComponentInstance componentInstance=createComponentInstance(comp,i);
      componentInstances.put(componentInstance.getCompInstanceName(),componentInstance);
    }
    when(comp.getAllComponentInstances()).thenReturn(componentInstances.values());
    return comp;
  }
  private ComponentInstance createComponentInstance(  Component component,  int instanceId){
    ComponentInstance componentInstance=mock(ComponentInstance.class);
    when(componentInstance.getComponent()).thenReturn(component);
    when(componentInstance.getCompInstanceName()).thenReturn("compInstance" + instanceId);
    Container container=mock(Container.class);
    when(componentInstance.getContainerSpec()).thenReturn(container);
    ServiceUtils.ProcessTerminationHandler terminationHandler=mock(ServiceUtils.ProcessTerminationHandler.class);
    when(component.getScheduler().getTerminationHandler()).thenReturn(terminationHandler);
    return componentInstance;
  }
  @Test public void testComponentRestartPolicy(){
    Map<String,Component> allComponents=new HashMap<>();
    Service mockService=mock(Service.class);
    ServiceContext serviceContext=mock(ServiceContext.class);
    when(serviceContext.getService()).thenReturn(mockService);
    ServiceScheduler serviceSchedulerInstance=new ServiceScheduler(serviceContext);
    ServiceScheduler serviceScheduler=spy(serviceSchedulerInstance);
    when(serviceScheduler.getAllComponents()).thenReturn(allComponents);
    Mockito.doNothing().when(serviceScheduler).setGracefulStop(any(FinalApplicationStatus.class));
    final String containerDiag="Container succeeded";
    ComponentInstanceEvent componentInstanceEvent=mock(ComponentInstanceEvent.class);
    ContainerId containerId=ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L,1),1),1);
    ContainerStatus containerStatus=ContainerStatus.newInstance(containerId,org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE,containerDiag,0);
    when(componentInstanceEvent.getStatus()).thenReturn(containerStatus);
    Component comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS,1,0,1,0);
    ComponentInstance componentInstance=comp.getAllComponentInstances().iterator().next();
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),never()).terminate(anyInt());
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS,0,1,1,0);
    componentInstance=comp.getAllComponentInstances().iterator().next();
    containerStatus.setExitStatus(1);
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),never()).terminate(anyInt());
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,1,0,1,0);
    componentInstance=comp.getAllComponentInstances().iterator().next();
    containerStatus.setExitStatus(0);
    Map<String,ComponentInstance> succeededInstances=new HashMap<>();
    succeededInstances.put(componentInstance.getCompInstanceName(),componentInstance);
    when(comp.getSucceededInstances()).thenReturn(succeededInstances.values());
    when(comp.getNumSucceededInstances()).thenReturn(new Long(1));
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,times(1)).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(0));
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,0,1,1,0);
    componentInstance=comp.getAllComponentInstances().iterator().next();
    containerStatus.setExitStatus(-1);
    when(comp.getNumFailedInstances()).thenReturn(new Long(1));
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,times(1)).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(-1));
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,0,1,1,0);
    componentInstance=comp.getAllComponentInstances().iterator().next();
    containerStatus.setExitStatus(1);
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,0,1,3,0);
    componentInstance=comp.getAllComponentInstances().iterator().next();
    containerStatus.setExitStatus(1);
    ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,times(1)).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,0,1,3,0);
    Iterator<ComponentInstance> iter=comp.getAllComponentInstances().iterator();
    containerStatus.setExitStatus(1);
    ComponentInstance commponentInstance=iter.next();
    ComponentInstance.handleComponentInstanceRelaunch(commponentInstance,componentInstanceEvent,false,containerDiag);
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,0);
    Collection<ComponentInstance> component1Instances=comp.getAllComponentInstances();
    containerStatus.setExitStatus(-1);
    Component comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,1);
    Collection<ComponentInstance> component2Instances=comp2.getAllComponentInstances();
    Map<String,ComponentInstance> failed2Instances=new HashMap<>();
    for (    ComponentInstance component2Instance : component2Instances) {
      failed2Instances.put(component2Instance.getCompInstanceName(),component2Instance);
      when(component2Instance.getComponent().getFailedInstances()).thenReturn(failed2Instances.values());
      when(component2Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed2Instances.size()));
      ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
    }
    Map<String,ComponentInstance> failed1Instances=new HashMap<>();
    for (    ComponentInstance component1Instance : component1Instances) {
      failed1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
      when(component1Instance.getComponent().getFailedInstances()).thenReturn(failed1Instances.values());
      when(component1Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed1Instances.size()));
      ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
    }
    verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,times(2)).markAsFailed(any(ComponentInstance.class));
    verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(-1));
    containerStatus.setExitStatus(0);
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,2,0);
    component1Instances=comp.getAllComponentInstances();
    comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,2,1);
    component2Instances=comp2.getAllComponentInstances();
    Map<String,ComponentInstance> succeeded2Instances=new HashMap<>();
    for (    ComponentInstance component2Instance : component2Instances) {
      succeeded2Instances.put(component2Instance.getCompInstanceName(),component2Instance);
      when(component2Instance.getComponent().getSucceededInstances()).thenReturn(succeeded2Instances.values());
      when(component2Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded2Instances.size()));
      ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
    }
    Map<String,ComponentInstance> succeeded1Instances=new HashMap<>();
    for (    ComponentInstance component1Instance : component1Instances) {
      succeeded1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
      when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());
      when(component1Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded1Instances.size()));
      ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
    }
    verify(comp,times(2)).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(componentInstance.getComponent(),times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(0));
    comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,0);
    component1Instances=comp.getAllComponentInstances();
    comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,1);
    component2Instances=comp2.getAllComponentInstances();
    for (    ComponentInstance component2Instance : component2Instances) {
      ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
    }
    succeeded1Instances=new HashMap<>();
    for (    ComponentInstance component1Instance : component1Instances) {
      succeeded1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
      when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());
      ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
    }
    verify(comp,times(2)).markAsSucceeded(any(ComponentInstance.class));
    verify(comp,never()).markAsFailed(any(ComponentInstance.class));
    verify(componentInstance.getComponent(),times(0)).reInsertPendingInstance(any(ComponentInstance.class));
    verify(serviceScheduler.getTerminationHandler(),never()).terminate(eq(0));
  }
}
