/** 
 * Tests Application Master Protocol with timeline service v2 enabled.
 */
public class TestApplicationMasterServiceProtocolForTimelineV2 extends ApplicationMasterServiceProtoTestBase {
  @Before public void initialize() throws Exception {
    HATestUtil.setRpcAddressForRM(RM1_NODE_ID,RM1_PORT_BASE + 200,conf);
    HATestUtil.setRpcAddressForRM(RM2_NODE_ID,RM2_PORT_BASE + 200,conf);
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,2.0f);
    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS,FileSystemTimelineWriterImpl.class,TimelineWriter.class);
    startHACluster(0,false,false,true);
    super.startupHAAndSetupClient();
  }
  @Test(timeout=15000) public void testAllocateForTimelineV2OnHA() throws YarnException, IOException {
    AllocateRequest request=AllocateRequest.newInstance(0,50f,new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>(),ResourceBlacklistRequest.newInstance(new ArrayList<String>(),new ArrayList<String>()));
    AllocateResponse response=getAMClient().allocate(request);
    Assert.assertEquals(response,this.cluster.createFakeAllocateResponse());
    Assert.assertNotNull(response.getCollectorInfo());
    Assert.assertEquals("host:port",response.getCollectorInfo().getCollectorAddr());
    Assert.assertNotNull(response.getCollectorInfo().getCollectorToken());
  }
}
