public class TestLightWeightHashSet {
  private static final Log LOG=LogFactory.getLog("org.apache.hadoop.hdfs.TestLightWeightHashSet");
  private final ArrayList<Integer> list=new ArrayList<Integer>();
  private final int NUM=100;
  private LightWeightHashSet<Integer> set;
  private Random rand;
  @Before public void setUp(){
    float maxF=LightWeightHashSet.DEFAULT_MAX_LOAD_FACTOR;
    float minF=LightWeightHashSet.DEFAUT_MIN_LOAD_FACTOR;
    int initCapacity=LightWeightHashSet.MINIMUM_CAPACITY;
    rand=new Random(Time.now());
    list.clear();
    for (int i=0; i < NUM; i++) {
      list.add(rand.nextInt());
    }
    set=new LightWeightHashSet<Integer>(initCapacity,maxF,minF);
  }
  @Test public void testEmptyBasic(){
    LOG.info("Test empty basic");
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    LOG.info("Test empty - DONE");
  }
  @Test public void testOneElementBasic(){
    LOG.info("Test one element basic");
    set.add(list.get(0));
    assertEquals(1,set.size());
    assertFalse(set.isEmpty());
    Iterator<Integer> iter=set.iterator();
    assertTrue(iter.hasNext());
    assertEquals(list.get(0),iter.next());
    assertFalse(iter.hasNext());
    LOG.info("Test one element basic - DONE");
  }
  @Test public void testMultiBasic(){
    LOG.info("Test multi element basic");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    assertEquals(list.size(),set.size());
    for (    Integer i : list) {
      assertTrue(set.contains(i));
    }
    for (    Integer i : list) {
      assertFalse(set.add(i));
    }
    for (    Integer i : list) {
      assertTrue(set.contains(i));
    }
    Iterator<Integer> iter=set.iterator();
    int num=0;
    while (iter.hasNext()) {
      Integer next=iter.next();
      assertNotNull(next);
      assertTrue(list.contains(next));
      num++;
    }
    assertEquals(list.size(),num);
    LOG.info("Test multi element basic - DONE");
  }
  @Test public void testRemoveOne(){
    LOG.info("Test remove one");
    assertTrue(set.add(list.get(0)));
    assertEquals(1,set.size());
    assertTrue(set.remove(list.get(0)));
    assertEquals(0,set.size());
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertTrue(set.add(list.get(0)));
    assertEquals(1,set.size());
    iter=set.iterator();
    assertTrue(iter.hasNext());
    LOG.info("Test remove one - DONE");
  }
  @Test public void testRemoveMulti(){
    LOG.info("Test remove multi");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (int i=0; i < NUM / 2; i++) {
      assertTrue(set.remove(list.get(i)));
    }
    for (int i=0; i < NUM / 2; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    for (int i=NUM / 2; i < NUM; i++) {
      assertTrue(set.contains(list.get(i)));
    }
    LOG.info("Test remove multi - DONE");
  }
  @Test public void testRemoveAll(){
    LOG.info("Test remove all");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (int i=0; i < NUM; i++) {
      assertTrue(set.remove(list.get(i)));
    }
    for (int i=0; i < NUM; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertTrue(set.isEmpty());
    LOG.info("Test remove all - DONE");
  }
  @Test public void testRemoveAllViaIterator(){
    LOG.info("Test remove all via iterator");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (Iterator<Integer> iter=set.iterator(); iter.hasNext(); ) {
      int e=iter.next();
      assertTrue(set.contains(e));
      iter.remove();
      assertFalse(set.contains(e));
    }
    for (int i=0; i < NUM; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertTrue(set.isEmpty());
    LOG.info("Test remove all via iterator - DONE");
  }
  @Test public void testPollAll(){
    LOG.info("Test poll all");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    List<Integer> poll=set.pollAll();
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    for (int i=0; i < NUM; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    for (    Integer i : poll) {
      assertTrue(list.contains(i));
    }
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    LOG.info("Test poll all - DONE");
  }
  @Test public void testPollNMulti(){
    LOG.info("Test pollN multi");
    set.addAll(list);
    List<Integer> poll=set.pollN(0);
    assertEquals(0,poll.size());
    for (    Integer i : list) {
      assertTrue(set.contains(i));
    }
    poll=set.pollN(10);
    assertEquals(10,poll.size());
    for (    Integer i : poll) {
      assertTrue(list.contains(i));
      assertFalse(set.contains(i));
    }
    poll=set.pollN(1000);
    assertEquals(NUM - 10,poll.size());
    for (    Integer i : poll) {
      assertTrue(list.contains(i));
    }
    assertTrue(set.isEmpty());
    assertEquals(0,set.size());
    LOG.info("Test pollN multi - DONE");
  }
  @Test public void testPollNMultiArray(){
    LOG.info("Test pollN multi array");
    set.addAll(list);
    Integer[] poll=new Integer[10];
    poll=set.pollToArray(poll);
    assertEquals(10,poll.length);
    for (    Integer i : poll) {
      assertTrue(list.contains(i));
      assertFalse(set.contains(i));
    }
    poll=new Integer[NUM];
    poll=set.pollToArray(poll);
    assertEquals(NUM - 10,poll.length);
    for (int i=0; i < NUM - 10; i++) {
      assertTrue(list.contains(poll[i]));
    }
    assertTrue(set.isEmpty());
    assertEquals(0,set.size());
    set.addAll(list);
    poll=new Integer[NUM];
    poll=set.pollToArray(poll);
    assertTrue(set.isEmpty());
    assertEquals(0,set.size());
    assertEquals(NUM,poll.length);
    for (int i=0; i < NUM; i++) {
      assertTrue(list.contains(poll[i]));
    }
    set.addAll(list);
    poll=new Integer[0];
    poll=set.pollToArray(poll);
    for (int i=0; i < NUM; i++) {
      assertTrue(set.contains(list.get(i)));
    }
    assertEquals(0,poll.length);
    LOG.info("Test pollN multi array- DONE");
  }
  @Test public void testClear(){
    LOG.info("Test clear");
    set.addAll(list);
    assertEquals(NUM,set.size());
    assertFalse(set.isEmpty());
    set.clear();
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    LOG.info("Test clear - DONE");
  }
  @Test public void testCapacity(){
    LOG.info("Test capacity");
    float maxF=LightWeightHashSet.DEFAULT_MAX_LOAD_FACTOR;
    float minF=LightWeightHashSet.DEFAUT_MIN_LOAD_FACTOR;
    set=new LightWeightHashSet<Integer>(1,maxF,minF);
    assertEquals(LightWeightHashSet.MINIMUM_CAPACITY,set.getCapacity());
    set=new LightWeightHashSet<Integer>(30,maxF,minF);
    assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,32),set.getCapacity());
    set=new LightWeightHashSet<Integer>(64,maxF,minF);
    assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,64),set.getCapacity());
    set.addAll(list);
    int expCap=LightWeightHashSet.MINIMUM_CAPACITY;
    while (expCap < NUM && maxF * expCap < NUM)     expCap<<=1;
    assertEquals(expCap,set.getCapacity());
    set.clear();
    set.addAll(list);
    int toRemove=set.size() - (int)(set.getCapacity() * minF) + 1;
    for (int i=0; i < toRemove; i++) {
      set.remove(list.get(i));
    }
    assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,expCap / 2),set.getCapacity());
    LOG.info("Test capacity - DONE");
  }
  @Test public void testOther(){
    LOG.info("Test other");
    assertTrue(set.addAll(list));
    assertTrue(set.removeAll(list));
    assertTrue(set.isEmpty());
    List<Integer> sub=new LinkedList<Integer>();
    for (int i=0; i < 10; i++) {
      sub.add(list.get(i));
    }
    assertTrue(set.addAll(list));
    assertTrue(set.removeAll(sub));
    assertFalse(set.isEmpty());
    assertEquals(NUM - 10,set.size());
    for (    Integer i : sub) {
      assertFalse(set.contains(i));
    }
    assertFalse(set.containsAll(sub));
    List<Integer> sub2=new LinkedList<Integer>();
    for (int i=10; i < NUM; i++) {
      sub2.add(list.get(i));
    }
    assertTrue(set.containsAll(sub2));
    Integer[] array=set.toArray(new Integer[0]);
    assertEquals(NUM - 10,array.length);
    for (int i=0; i < array.length; i++) {
      assertTrue(sub2.contains(array[i]));
    }
    assertEquals(NUM - 10,set.size());
    Object[] array2=set.toArray();
    assertEquals(NUM - 10,array2.length);
    for (int i=0; i < array2.length; i++) {
      assertTrue(sub2.contains(array2[i]));
    }
    LOG.info("Test other - DONE");
  }
  @Test public void testGetElement(){
    LightWeightHashSet<TestObject> objSet=new LightWeightHashSet<TestObject>();
    TestObject objA=new TestObject("object A");
    TestObject equalToObjA=new TestObject("object A");
    TestObject objB=new TestObject("object B");
    objSet.add(objA);
    objSet.add(objB);
    assertSame(objA,objSet.getElement(objA));
    assertSame(objA,objSet.getElement(equalToObjA));
    assertSame(objB,objSet.getElement(objB));
    assertNull(objSet.getElement(new TestObject("not in set")));
  }
  /** 
 * Wrapper class which is used in {@link TestLightWeightHashSet#testGetElement()}
 */
private static class TestObject {
    private final String value;
    public TestObject(    String value){
      super();
      this.value=value;
    }
    @Override public int hashCode(){
      return value.hashCode();
    }
    @Override public boolean equals(    Object obj){
      if (this == obj)       return true;
      if (obj == null)       return false;
      if (getClass() != obj.getClass())       return false;
      TestObject other=(TestObject)obj;
      return this.value.equals(other.value);
    }
  }
}
