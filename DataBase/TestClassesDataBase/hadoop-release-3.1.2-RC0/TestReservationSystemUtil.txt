public class TestReservationSystemUtil {
  @Test public void testConvertAllocationsToReservationInfo(){
    long startTime=new Date().getTime();
    long step=10000;
    int[] alloc={10,10,10};
    ReservationId id=ReservationSystemTestUtil.getNewReservationId();
    ReservationAllocation allocation=createReservationAllocation(startTime,startTime + 10 * step,step,alloc,id,createResource(4000,2));
    List<ReservationAllocationState> infoList=ReservationSystemUtil.convertAllocationsToReservationInfo(Collections.singleton(allocation),true);
    Assert.assertEquals(infoList.size(),1);
    Assert.assertEquals(infoList.get(0).getReservationId().toString(),id.toString());
    Assert.assertFalse(infoList.get(0).getResourceAllocationRequests().isEmpty());
  }
  @Test public void testConvertAllocationsToReservationInfoNoAllocations(){
    long startTime=new Date().getTime();
    long step=10000;
    int[] alloc={10,10,10};
    ReservationId id=ReservationSystemTestUtil.getNewReservationId();
    ReservationAllocation allocation=createReservationAllocation(startTime,startTime + 10 * step,step,alloc,id,createResource(4000,2));
    List<ReservationAllocationState> infoList=ReservationSystemUtil.convertAllocationsToReservationInfo(Collections.singleton(allocation),false);
    Assert.assertEquals(infoList.size(),1);
    Assert.assertEquals(infoList.get(0).getReservationId().toString(),id.toString());
    Assert.assertTrue(infoList.get(0).getResourceAllocationRequests().isEmpty());
  }
  @Test public void testConvertAllocationsToReservationInfoEmptyAllocations(){
    long startTime=new Date().getTime();
    long step=10000;
    int[] alloc={};
    ReservationId id=ReservationSystemTestUtil.getNewReservationId();
    ReservationAllocation allocation=createReservationAllocation(startTime,startTime + 10 * step,step,alloc,id,createResource(4000,2));
    List<ReservationAllocationState> infoList=ReservationSystemUtil.convertAllocationsToReservationInfo(Collections.singleton(allocation),false);
    Assert.assertEquals(infoList.size(),1);
    Assert.assertEquals(infoList.get(0).getReservationId().toString(),id.toString());
    Assert.assertTrue(infoList.get(0).getResourceAllocationRequests().isEmpty());
  }
  @Test public void testConvertAllocationsToReservationInfoEmptySet(){
    List<ReservationAllocationState> infoList=ReservationSystemUtil.convertAllocationsToReservationInfo(Collections.<ReservationAllocation>emptySet(),false);
    Assert.assertEquals(infoList.size(),0);
  }
  private ReservationAllocation createReservationAllocation(  long startTime,  long deadline,  long step,  int[] alloc,  ReservationId id,  Resource minAlloc){
    Map<ReservationInterval,Resource> allocations=ReservationSystemTestUtil.generateAllocation(startTime,step,alloc);
    ResourceCalculator rs=mock(ResourceCalculator.class);
    ReservationDefinition definition=ReservationSystemTestUtil.createSimpleReservationDefinition(startTime,deadline,step);
    return new InMemoryReservationAllocation(id,definition,"user",ReservationSystemTestUtil.reservationQ,startTime,startTime + step,allocations,rs,minAlloc,false);
  }
  public Resource createResource(  int memory,  int vCores){
    Resource resource=new ResourcePBImpl();
    resource.setMemorySize(memory);
    resource.setVirtualCores(vCores);
    return resource;
  }
}
