/** 
 * Test ACL permission on file/folder on Adl file system.
 */
@RunWith(Parallelized.class) public class TestAdlPermissionLive {
  private static Path testRoot=new Path("/test");
  private FsPermission permission;
  private Path path;
  private FileSystem adlStore;
  public TestAdlPermissionLive(  FsPermission testPermission){
    permission=testPermission;
  }
  @Parameterized.Parameters(name="{0}") public static Collection adlCreateNonRecursiveTestData() throws UnsupportedEncodingException {
    final Collection<Object[]> datas=new ArrayList<>();
    for (    FsAction g : FsAction.values()) {
      for (      FsAction o : FsAction.values()) {
        datas.add(new Object[]{new FsPermission(FsAction.ALL,g,o)});
      }
    }
    return datas;
  }
  @AfterClass public static void cleanUp() throws IOException, URISyntaxException {
    if (AdlStorageConfiguration.isContractTestEnabled()) {
      Assert.assertTrue(AdlStorageConfiguration.createStorageConnector().delete(testRoot,true));
    }
  }
  @Before public void setUp() throws Exception {
    Assume.assumeTrue(AdlStorageConfiguration.isContractTestEnabled());
    adlStore=AdlStorageConfiguration.createStorageConnector();
  }
  @Test public void testFilePermission() throws IOException {
    path=new Path(testRoot,UUID.randomUUID().toString());
    adlStore.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"000");
    adlStore.mkdirs(path.getParent(),new FsPermission(FsAction.ALL,FsAction.WRITE,FsAction.NONE));
    adlStore.removeDefaultAcl(path.getParent());
    adlStore.create(path,permission,true,1024,(short)1,1023,null);
    FileStatus status=adlStore.getFileStatus(path);
    Assert.assertEquals(permission,status.getPermission());
  }
  @Test public void testFolderPermission() throws IOException {
    path=new Path(testRoot,UUID.randomUUID().toString());
    adlStore.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"000");
    adlStore.mkdirs(path.getParent(),new FsPermission(FsAction.ALL,FsAction.WRITE,FsAction.NONE));
    adlStore.removeDefaultAcl(path.getParent());
    adlStore.mkdirs(path,permission);
    FileStatus status=adlStore.getFileStatus(path);
    Assert.assertEquals(permission,status.getPermission());
  }
}
