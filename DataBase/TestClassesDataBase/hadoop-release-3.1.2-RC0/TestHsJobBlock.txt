/** 
 * Test the HsJobBlock generated for oversized jobs in JHS.
 */
public class TestHsJobBlock {
  @Test public void testHsJobBlockForOversizeJobShouldDisplayWarningMessage(){
    int maxAllowedTaskNum=100;
    Configuration config=new Configuration();
    config.setInt(JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX,maxAllowedTaskNum);
    JobHistory jobHistory=new JobHistoryStubWithAllOversizeJobs(maxAllowedTaskNum);
    jobHistory.init(config);
    HsJobBlock jobBlock=new HsJobBlock(jobHistory){
      @Override public Map<String,String> moreParams(){
        Map<String,String> map=new HashMap<>();
        map.put(AMParams.JOB_ID,"job_0000_0001");
        return map;
      }
    }
;
    OutputStream outputStream=new ByteArrayOutputStream();
    HtmlBlock.Block block=createBlockToCreateTo(outputStream);
    jobBlock.render(block);
    block.getWriter().flush();
    String out=outputStream.toString();
    Assert.assertTrue("Should display warning message for jobs that have too " + "many tasks",out.contains("Any job larger than " + maxAllowedTaskNum + " will not be loaded"));
  }
  @Test public void testHsJobBlockForNormalSizeJobShouldNotDisplayWarningMessage(){
    Configuration config=new Configuration();
    config.setInt(JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX,-1);
    JobHistory jobHistory=new JobHitoryStubWithAllNormalSizeJobs();
    jobHistory.init(config);
    HsJobBlock jobBlock=new HsJobBlock(jobHistory){
      @Override public Map<String,String> moreParams(){
        Map<String,String> map=new HashMap<>();
        map.put(AMParams.JOB_ID,"job_0000_0001");
        return map;
      }
      @Override public ResponseInfo info(      String about){
        return new ResponseInfo().about(about);
      }
      @Override public String url(      String... parts){
        return StringHelper.ujoin("",parts);
      }
    }
;
    OutputStream outputStream=new ByteArrayOutputStream();
    HtmlBlock.Block block=createBlockToCreateTo(outputStream);
    jobBlock.render(block);
    block.getWriter().flush();
    String out=outputStream.toString();
    Assert.assertTrue("Should display job overview for the job.",out.contains("ApplicationMaster"));
  }
  private static HtmlBlock.Block createBlockToCreateTo(  OutputStream outputStream){
    PrintWriter printWriter=new PrintWriter(outputStream);
    HtmlBlock html=new HtmlBlockForTest();
    return new BlockForTest(html,printWriter,10,false){
      @Override protected void subView(      Class<? extends SubView> cls){
      }
    }
;
  }
  /** 
 * A JobHistory stub that treat all jobs as oversized and therefore will not parse their job history files but return a UnparseJob instance.
 */
static class JobHistoryStubWithAllOversizeJobs extends JobHistory {
    private final int maxAllowedTaskNum;
    public JobHistoryStubWithAllOversizeJobs(    int maxAllowedTaskNum){
      this.maxAllowedTaskNum=maxAllowedTaskNum;
    }
    @Override protected HistoryFileManager createHistoryFileManager(){
      HistoryFileManager historyFileManager;
      try {
        HistoryFileInfo historyFileInfo=createUnparsedJobHistoryFileInfo(maxAllowedTaskNum);
        historyFileManager=mock(HistoryFileManager.class);
        when(historyFileManager.getFileInfo(any(JobId.class))).thenReturn(historyFileInfo);
      }
 catch (      IOException ex) {
        historyFileManager=super.createHistoryFileManager();
      }
      return historyFileManager;
    }
    private static HistoryFileInfo createUnparsedJobHistoryFileInfo(    int maxAllowedTaskNum) throws IOException {
      HistoryFileInfo fileInfo=mock(HistoryFileInfo.class);
      UnparsedJob unparsedJob=mock(UnparsedJob.class);
      when(unparsedJob.getMaxTasksAllowed()).thenReturn(maxAllowedTaskNum);
      when(unparsedJob.getTotalMaps()).thenReturn(maxAllowedTaskNum);
      when(unparsedJob.getTotalReduces()).thenReturn(maxAllowedTaskNum);
      when(fileInfo.loadJob()).thenReturn(unparsedJob);
      return fileInfo;
    }
  }
  /** 
 * A JobHistory stub that treats all jobs as normal size and therefore will return a CompletedJob on HistoryFileInfo.loadJob().
 */
static class JobHitoryStubWithAllNormalSizeJobs extends JobHistory {
    @Override public HistoryFileManager createHistoryFileManager(){
      HistoryFileManager historyFileManager;
      try {
        HistoryFileInfo historyFileInfo=createParsedJobHistoryFileInfo();
        historyFileManager=mock(HistoryFileManager.class);
        when(historyFileManager.getFileInfo(any(JobId.class))).thenReturn(historyFileInfo);
      }
 catch (      IOException ex) {
        historyFileManager=super.createHistoryFileManager();
      }
      return historyFileManager;
    }
    private static HistoryFileInfo createParsedJobHistoryFileInfo() throws IOException {
      HistoryFileInfo fileInfo=mock(HistoryFileInfo.class);
      CompletedJob job=createFakeCompletedJob();
      when(fileInfo.loadJob()).thenReturn(job);
      return fileInfo;
    }
    private static CompletedJob createFakeCompletedJob(){
      CompletedJob job=mock(CompletedJob.class);
      when(job.getTotalMaps()).thenReturn(0);
      when(job.getCompletedMaps()).thenReturn(0);
      when(job.getTotalReduces()).thenReturn(0);
      when(job.getCompletedReduces()).thenReturn(0);
      JobId jobId=createFakeJobId();
      when(job.getID()).thenReturn(jobId);
      JobReport jobReport=mock(JobReport.class);
      when(jobReport.getSubmitTime()).thenReturn(-1L);
      when(jobReport.getStartTime()).thenReturn(-1L);
      when(jobReport.getFinishTime()).thenReturn(-1L);
      when(job.getReport()).thenReturn(jobReport);
      when(job.getAMInfos()).thenReturn(new ArrayList<AMInfo>());
      when(job.getDiagnostics()).thenReturn(new ArrayList<String>());
      when(job.getName()).thenReturn("fake completed job");
      when(job.getQueueName()).thenReturn("default");
      when(job.getUserName()).thenReturn("junit");
      when(job.getState()).thenReturn(JobState.ERROR);
      when(job.getAllCounters()).thenReturn(new Counters());
      when(job.getTasks()).thenReturn(new HashMap<TaskId,Task>());
      return job;
    }
    private static JobId createFakeJobId(){
      JobId jobId=new JobIdPBImpl();
      jobId.setId(0);
      ApplicationId appId=mock(ApplicationId.class);
      when(appId.getClusterTimestamp()).thenReturn(0L);
      when(appId.getId()).thenReturn(0);
      jobId.setAppId(appId);
      return jobId;
    }
  }
}
