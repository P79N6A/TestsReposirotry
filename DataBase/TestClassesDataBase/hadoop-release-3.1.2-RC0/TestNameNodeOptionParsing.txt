public class TestNameNodeOptionParsing {
  @Test(timeout=10000) public void testUpgrade(){
    StartupOption opt=null;
    opt=NameNode.parseArguments(new String[]{"-upgrade"});
    assertEquals(opt,StartupOption.UPGRADE);
    assertNull(opt.getClusterId());
    assertTrue(FSImageFormat.renameReservedMap.isEmpty());
    opt=NameNode.parseArguments(new String[]{"-upgrade","-clusterid","mycid"});
    assertEquals(StartupOption.UPGRADE,opt);
    assertEquals("mycid",opt.getClusterId());
    assertTrue(FSImageFormat.renameReservedMap.isEmpty());
    opt=NameNode.parseArguments(new String[]{"-upgrade","-clusterid","mycid","-renameReserved",".snapshot=.my-snapshot,.reserved=.my-reserved"});
    assertEquals(StartupOption.UPGRADE,opt);
    assertEquals("mycid",opt.getClusterId());
    assertEquals(".my-snapshot",FSImageFormat.renameReservedMap.get(".snapshot"));
    assertEquals(".my-reserved",FSImageFormat.renameReservedMap.get(".reserved"));
    FSImageFormat.renameReservedMap.clear();
    opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.snapshot=.my-snapshot","-clusterid","mycid"});
    assertEquals(StartupOption.UPGRADE,opt);
    assertEquals("mycid",opt.getClusterId());
    assertEquals(".my-snapshot",FSImageFormat.renameReservedMap.get(".snapshot"));
    assertEquals(".my-reserved",FSImageFormat.renameReservedMap.get(".reserved"));
    opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved"});
    assertEquals(StartupOption.UPGRADE,opt);
    assertEquals(".snapshot." + HdfsServerConstants.NAMENODE_LAYOUT_VERSION + ".UPGRADE_RENAMED",FSImageFormat.renameReservedMap.get(".snapshot"));
    assertEquals(".reserved." + HdfsServerConstants.NAMENODE_LAYOUT_VERSION + ".UPGRADE_RENAMED",FSImageFormat.renameReservedMap.get(".reserved"));
    try {
      opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.not-reserved=.my-not-reserved"});
    }
 catch (    IllegalArgumentException e) {
      assertExceptionContains("Unknown reserved path",e);
    }
    try {
      opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.snapshot=.snapshot"});
    }
 catch (    IllegalArgumentException e) {
      assertExceptionContains("Invalid rename path",e);
    }
    try {
      opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".snapshot=.reserved"});
    }
 catch (    IllegalArgumentException e) {
      assertExceptionContains("Invalid rename path",e);
    }
    opt=NameNode.parseArguments(new String[]{"-upgrade","-cid"});
    assertNull(opt);
  }
  @Test(timeout=10000) public void testRollingUpgrade(){
{
      final String[] args={"-rollingUpgrade"};
      final StartupOption opt=NameNode.parseArguments(args);
      assertNull(opt);
    }
{
      final String[] args={"-rollingUpgrade","started"};
      final StartupOption opt=NameNode.parseArguments(args);
      assertEquals(StartupOption.ROLLINGUPGRADE,opt);
      assertEquals(RollingUpgradeStartupOption.STARTED,opt.getRollingUpgradeStartupOption());
      assertTrue(RollingUpgradeStartupOption.STARTED.matches(opt));
    }
{
      final String[] args={"-rollingUpgrade","rollback"};
      final StartupOption opt=NameNode.parseArguments(args);
      assertEquals(StartupOption.ROLLINGUPGRADE,opt);
      assertEquals(RollingUpgradeStartupOption.ROLLBACK,opt.getRollingUpgradeStartupOption());
      assertTrue(RollingUpgradeStartupOption.ROLLBACK.matches(opt));
    }
{
      final String[] args={"-rollingUpgrade","foo"};
      try {
        NameNode.parseArguments(args);
        Assert.fail();
      }
 catch (      IllegalArgumentException iae) {
      }
    }
  }
  @Test public void testFormat(){
    String[] args=new String[]{"-format"};
    StartupOption opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.FORMAT,opt);
    assertEquals(true,opt.getInteractiveFormat());
    assertEquals(false,opt.getForceFormat());
    args=new String[]{"-format","-nonInteractive"};
    opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.FORMAT,opt);
    assertEquals(false,opt.getInteractiveFormat());
    assertEquals(false,opt.getForceFormat());
    args=new String[]{"-format","-nonInteractive","-force"};
    opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.FORMAT,opt);
    assertEquals(false,opt.getInteractiveFormat());
    assertEquals(true,opt.getForceFormat());
    args=new String[]{"-nonInteractive"};
    opt=NameNode.parseArguments(args);
    assertNull(opt);
  }
}
