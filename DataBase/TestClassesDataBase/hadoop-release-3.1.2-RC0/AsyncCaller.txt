static class AsyncCaller extends Thread {
  private Client client;
  private InetSocketAddress server;
  private int count;
  private boolean failed;
  Map<Integer,Future<LongWritable>> returnFutures=new HashMap<Integer,Future<LongWritable>>();
  Map<Integer,Long> expectedValues=new HashMap<Integer,Long>();
  public AsyncCaller(  Client client,  InetSocketAddress server,  int count){
    this.client=client;
    this.server=server;
    this.count=count;
    Client.setAsynchronousMode(true);
  }
  @Override public void run(){
    Client.setAsynchronousMode(true);
    for (int i=0; i < count; i++) {
      try {
        final long param=TestIPC.RANDOM.nextLong();
        TestIPC.call(client,param,server,conf);
        returnFutures.put(i,getAsyncRpcResponseFuture());
        expectedValues.put(i,param);
      }
 catch (      Exception e) {
        failed=true;
        throw new RuntimeException(e);
      }
    }
  }
  void assertReturnValues() throws InterruptedException, ExecutionException {
    for (int i=0; i < count; i++) {
      LongWritable value=returnFutures.get(i).get();
      Assert.assertEquals("call" + i + " failed.",expectedValues.get(i).longValue(),value.get());
    }
    Assert.assertFalse(failed);
  }
  void assertReturnValues(  long timeout,  TimeUnit unit) throws InterruptedException, ExecutionException {
    final boolean[] checked=new boolean[count];
    for (boolean done=false; !done; ) {
      done=true;
      for (int i=0; i < count; i++) {
        if (checked[i]) {
          continue;
        }
 else {
          done=false;
        }
        final LongWritable value;
        try {
          value=returnFutures.get(i).get(timeout,unit);
        }
 catch (        TimeoutException e) {
          LOG.info("call" + i + " caught ",e);
          continue;
        }
        Assert.assertEquals("call" + i + " failed.",expectedValues.get(i).longValue(),value.get());
        checked[i]=true;
      }
    }
    Assert.assertFalse(failed);
  }
}
