public class TestGangliaMetrics {
  public static final Logger LOG=LoggerFactory.getLogger(TestMetricsSystemImpl.class);
  private String testNamePrefix="gangliametrics";
  private final String[] expectedMetrics={testNamePrefix + ".s1rec.C1",testNamePrefix + ".s1rec.G1",testNamePrefix + ".s1rec.Xxx",testNamePrefix + ".s1rec.Yyy",testNamePrefix + ".s1rec.S1NumOps",testNamePrefix + ".s1rec.S1AvgTime"};
  @Test public void testTagsForPrefix() throws Exception {
    ConfigBuilder cb=new ConfigBuilder().add(testNamePrefix + ".sink.ganglia.tagsForPrefix.all","*").add(testNamePrefix + ".sink.ganglia.tagsForPrefix.some","NumActiveSinks, " + "NumActiveSources").add(testNamePrefix + ".sink.ganglia.tagsForPrefix.none","");
    GangliaSink30 sink=new GangliaSink30();
    sink.init(cb.subset(testNamePrefix + ".sink.ganglia"));
    List<MetricsTag> tags=new ArrayList<MetricsTag>();
    tags.add(new MetricsTag(MsInfo.Context,"all"));
    tags.add(new MetricsTag(MsInfo.NumActiveSources,"foo"));
    tags.add(new MetricsTag(MsInfo.NumActiveSinks,"bar"));
    tags.add(new MetricsTag(MsInfo.NumAllSinks,"haa"));
    tags.add(new MetricsTag(MsInfo.Hostname,"host"));
    Set<AbstractMetric> metrics=new HashSet<AbstractMetric>();
    MetricsRecord record=new MetricsRecordImpl(MsInfo.Context,(long)1,tags,metrics);
    StringBuilder sb=new StringBuilder();
    sink.appendPrefix(record,sb);
    assertEquals(".NumActiveSources=foo.NumActiveSinks=bar.NumAllSinks=haa",sb.toString());
    tags.set(0,new MetricsTag(MsInfo.Context,"some"));
    sb=new StringBuilder();
    sink.appendPrefix(record,sb);
    assertEquals(".NumActiveSources=foo.NumActiveSinks=bar",sb.toString());
    tags.set(0,new MetricsTag(MsInfo.Context,"none"));
    sb=new StringBuilder();
    sink.appendPrefix(record,sb);
    assertEquals("",sb.toString());
    tags.set(0,new MetricsTag(MsInfo.Context,"nada"));
    sb=new StringBuilder();
    sink.appendPrefix(record,sb);
    assertEquals("",sb.toString());
  }
  @Test public void testGangliaMetrics2() throws Exception {
    ConfigBuilder cb=new ConfigBuilder().add("*.period",120).add(testNamePrefix + ".sink.gsink30.context",testNamePrefix).add(testNamePrefix + ".sink.gsink31.context",testNamePrefix).save(TestMetricsConfig.getTestFilename("hadoop-metrics2-" + testNamePrefix));
    MetricsSystemImpl ms=new MetricsSystemImpl(testNamePrefix);
    ms.start();
    TestSource s1=ms.register("s1","s1 desc",new TestSource("s1rec"));
    s1.c1.incr();
    s1.xxx.incr();
    s1.g1.set(2);
    s1.yyy.incr(2);
    s1.s1.add(0);
    final int expectedCountFromGanglia30=expectedMetrics.length;
    final int expectedCountFromGanglia31=2 * expectedMetrics.length;
    AbstractGangliaSink gsink30=new GangliaSink30();
    gsink30.init(cb.subset(testNamePrefix));
    MockDatagramSocket mockds30=new MockDatagramSocket();
    GangliaMetricsTestHelper.setDatagramSocket(gsink30,mockds30);
    AbstractGangliaSink gsink31=new GangliaSink31();
    gsink31.init(cb.subset(testNamePrefix));
    MockDatagramSocket mockds31=new MockDatagramSocket();
    GangliaMetricsTestHelper.setDatagramSocket(gsink31,mockds31);
    ms.register("gsink30","gsink30 desc",gsink30);
    ms.register("gsink31","gsink31 desc",gsink31);
    ms.publishMetricsNow();
    ms.stop();
    checkMetrics(mockds30.getCapturedSend(),expectedCountFromGanglia30);
    checkMetrics(mockds31.getCapturedSend(),expectedCountFromGanglia31);
  }
  private void checkMetrics(  List<byte[]> bytearrlist,  int expectedCount){
    boolean[] foundMetrics=new boolean[expectedMetrics.length];
    for (    byte[] bytes : bytearrlist) {
      String binaryStr=new String(bytes,StandardCharsets.UTF_8);
      for (int index=0; index < expectedMetrics.length; index++) {
        if (binaryStr.indexOf(expectedMetrics[index]) >= 0) {
          foundMetrics[index]=true;
          break;
        }
      }
    }
    for (int index=0; index < foundMetrics.length; index++) {
      if (!foundMetrics[index]) {
        assertTrue("Missing metrics: " + expectedMetrics[index],false);
      }
    }
    assertEquals("Mismatch in record count: ",expectedCount,bytearrlist.size());
  }
@SuppressWarnings("unused") @Metrics(context="gangliametrics") private static class TestSource {
    @Metric("C1 desc") MutableCounterLong c1;
    @Metric("XXX desc") MutableCounterLong xxx;
    @Metric("G1 desc") MutableGaugeLong g1;
    @Metric("YYY desc") MutableGaugeLong yyy;
    @Metric MutableRate s1;
    final MetricsRegistry registry;
    TestSource(    String recName){
      registry=new MetricsRegistry(recName);
    }
  }
  /** 
 * This class is used to capture data send to Ganglia servers. Initial attempt was to use mockito to mock and capture but while testing figured out that mockito is keeping the reference to the byte array and since the sink code reuses the byte array hence all the captured byte arrays were pointing to one instance.
 */
private class MockDatagramSocket extends DatagramSocket {
    private List<byte[]> capture;
    /** 
 * @throws SocketException
 */
    public MockDatagramSocket() throws SocketException {
      capture=new ArrayList<byte[]>();
    }
    @Override public synchronized void send(    DatagramPacket p) throws IOException {
      byte[] bytes=new byte[p.getLength()];
      System.arraycopy(p.getData(),p.getOffset(),bytes,0,p.getLength());
      capture.add(bytes);
    }
    /** 
 * @return the captured byte arrays
 */
    synchronized List<byte[]> getCapturedSend(){
      return capture;
    }
  }
}
