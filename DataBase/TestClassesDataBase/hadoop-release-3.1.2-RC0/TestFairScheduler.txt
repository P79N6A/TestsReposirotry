@SuppressWarnings("unchecked") public class TestFairScheduler extends FairSchedulerTestBase {
  private final int GB=1024;
  private final static String ALLOC_FILE=new File(TEST_DIR,"test-queues").getAbsolutePath();
  @Before public void setUp() throws IOException {
    scheduler=new FairScheduler();
    conf=createConfiguration();
    resourceManager=new MockRM(conf);
    ((AsyncDispatcher)resourceManager.getRMContext().getDispatcher()).start();
    resourceManager.getRMContext().getStateStore().start();
    resourceManager.getRMContext().getContainerTokenSecretManager().rollMasterKey();
    scheduler.setRMContext(resourceManager.getRMContext());
  }
  @After public void tearDown(){
    if (scheduler != null) {
      scheduler.stop();
      scheduler=null;
    }
    if (resourceManager != null) {
      resourceManager.stop();
      resourceManager=null;
    }
    QueueMetrics.clearQueueMetrics();
    DefaultMetricsSystem.shutdown();
    YarnAuthorizationProvider.destroy();
  }
  @Test(timeout=30000) public void testConfValidation() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,2048);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,1024);
    try {
      scheduler.serviceInit(conf);
      fail("Exception is expected because the min memory allocation is" + " larger than the max memory allocation.");
    }
 catch (    YarnRuntimeException e) {
      assertTrue("The thrown exception is not the expected one.",e.getMessage().startsWith("Invalid resource scheduler memory"));
    }
    conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,2);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,1);
    try {
      scheduler.serviceInit(conf);
      fail("Exception is expected because the min vcores allocation is" + " larger than the max vcores allocation.");
    }
 catch (    YarnRuntimeException e) {
      assertTrue("The thrown exception is not the expected one.",e.getMessage().startsWith("Invalid resource scheduler vcores"));
    }
  }
  @SuppressWarnings("deprecation") @Test(timeout=2000) public void testLoadConfigurationOnInitialize() throws IOException {
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    conf.setInt(FairSchedulerConfiguration.MAX_ASSIGN,3);
    conf.setBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,true);
    conf.setDouble(FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,.5);
    conf.setDouble(FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,.7);
    conf.setBoolean(FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,true);
    conf.setInt(FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,10);
    conf.setInt(FairSchedulerConfiguration.LOCALITY_DELAY_RACK_MS,5000);
    conf.setInt(FairSchedulerConfiguration.LOCALITY_DELAY_NODE_MS,5000);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,1024);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,512);
    conf.setInt(FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB,128);
    ResourceUtils.resetResourceTypes(conf);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    Assert.assertEquals(true,scheduler.assignMultiple);
    Assert.assertEquals(3,scheduler.maxAssign);
    Assert.assertEquals(true,scheduler.sizeBasedWeight);
    Assert.assertEquals(.5,scheduler.nodeLocalityThreshold,.01);
    Assert.assertEquals(.7,scheduler.rackLocalityThreshold,.01);
    Assert.assertTrue("The continuous scheduling should be enabled",scheduler.continuousSchedulingEnabled);
    Assert.assertEquals(10,scheduler.continuousSchedulingSleepMs);
    Assert.assertEquals(5000,scheduler.nodeLocalityDelayMs);
    Assert.assertEquals(5000,scheduler.rackLocalityDelayMs);
    Assert.assertEquals(1024,scheduler.getMaximumResourceCapability().getMemorySize());
    Assert.assertEquals(512,scheduler.getMinimumResourceCapability().getMemorySize());
    Assert.assertEquals(128,scheduler.getIncrementResourceCapability().getMemorySize());
  }
  @Test public void testNonMinZeroResourcesSettings() throws IOException {
    YarnConfiguration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,256);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,1);
    conf.setInt(FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB,512);
    conf.setInt(FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES,2);
    ResourceUtils.resetResourceTypes(conf);
    scheduler.init(conf);
    scheduler.reinitialize(conf,null);
    Assert.assertEquals(256,scheduler.getMinimumResourceCapability().getMemorySize());
    Assert.assertEquals(1,scheduler.getMinimumResourceCapability().getVirtualCores());
    Assert.assertEquals(512,scheduler.getIncrementResourceCapability().getMemorySize());
    Assert.assertEquals(2,scheduler.getIncrementResourceCapability().getVirtualCores());
  }
  @Test public void testMinZeroResourcesSettings() throws IOException {
    YarnConfiguration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,0);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,0);
    conf.setInt(FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB,512);
    conf.setInt(FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES,2);
    ResourceUtils.resetResourceTypes(conf);
    scheduler.init(conf);
    scheduler.reinitialize(conf,null);
    Assert.assertEquals(0,scheduler.getMinimumResourceCapability().getMemorySize());
    Assert.assertEquals(0,scheduler.getMinimumResourceCapability().getVirtualCores());
    Assert.assertEquals(512,scheduler.getIncrementResourceCapability().getMemorySize());
    Assert.assertEquals(2,scheduler.getIncrementResourceCapability().getVirtualCores());
  }
  @Test public void testAggregateCapacityTracking() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    assertEquals(1024,scheduler.getClusterResource().getMemorySize());
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(512),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    assertEquals(1536,scheduler.getClusterResource().getMemorySize());
    NodeRemovedSchedulerEvent nodeEvent3=new NodeRemovedSchedulerEvent(node1);
    scheduler.handle(nodeEvent3);
    assertEquals(512,scheduler.getClusterResource().getMemorySize());
  }
  @Test public void testSimpleFairShareCalculation() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(10 * 1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(10 * 1024,"queue1","user1");
    createSchedulingRequest(10 * 1024,"queue2","user1");
    createSchedulingRequest(10 * 1024,"root.default","user1");
    scheduler.update();
    scheduler.getQueueManager().getRootQueue().setSteadyFairShare(scheduler.getClusterResource());
    scheduler.getQueueManager().getRootQueue().recomputeSteadyShares();
    Collection<FSLeafQueue> queues=scheduler.getQueueManager().getLeafQueues();
    assertEquals(3,queues.size());
    for (    FSLeafQueue p : queues) {
      assertEquals(3414,p.getFairShare().getMemorySize());
      assertEquals(3414,p.getMetrics().getFairShareMB());
      assertEquals(3414,p.getSteadyFairShare().getMemorySize());
      assertEquals(3414,p.getMetrics().getSteadyFairShareMB());
    }
  }
  /** 
 * Test fair shares when max resources are set but are too high to impact the shares.
 * @throws IOException if scheduler reinitialization fails
 */
  @Test public void testFairShareWithHighMaxResources() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<maxResources>1073741824 mb 1000 vcores</maxResources>");
    out.println("<weight>.25</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<maxResources>1073741824 mb 1000 vcores</maxResources>");
    out.println("<weight>.75</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(1 * 1024,"queueA","user1");
    createSchedulingRequest(6 * 1024,"queueB","user1");
    scheduler.update();
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
    assertEquals("Queue A did not get its expected fair share",2 * 1024,queue.getFairShare().getMemorySize());
    queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
    assertEquals("Queue B did not get its expected fair share",6 * 1024,queue.getFairShare().getMemorySize());
  }
  /** 
 * Test fair shares when max resources are set and are low enough to impact the shares.
 * @throws IOException if scheduler reinitialization fails
 */
  @Test public void testFairShareWithLowMaxResources() throws IOException {
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("  <queue name=\"queueA\">");
    out.println("    <maxResources>1024 mb 1 vcores</maxResources>");
    out.println("    <weight>0.75</weight>");
    out.println("  </queue>");
    out.println("  <queue name=\"queueB\">");
    out.println("    <maxResources>3072 mb 3 vcores</maxResources>");
    out.println("    <weight>0.25</weight>");
    out.println("  </queue>");
    out.println("</allocations>");
    out.close();
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,1,"queueA","user1",2);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,1,"queueB","user1",4);
    scheduler.update();
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
    assertEquals("Queue A did not get its expected fair share",1 * 1024,queue.getFairShare().getMemorySize());
    queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
    assertEquals("Queue B did not get its expected fair share",3 * 1024,queue.getFairShare().getMemorySize());
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    assertEquals("App 1 is not running with the correct number of containers",1,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    assertEquals("App 2 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
  }
  /** 
 * Test the child max resource settings.
 * @throws IOException if scheduler reinitialization fails
 */
  @Test public void testChildMaxResources() throws IOException {
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("  <queue name=\"queueA\" type=\"parent\">");
    out.println("    <maxChildResources>2048mb,2vcores</maxChildResources>");
    out.println("  </queue>");
    out.println("</allocations>");
    out.close();
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,1,"queueA.queueB","user1",8);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,1,"queueA.queueC","user1",8);
    scheduler.update();
    NodeUpdateSchedulerEvent nodeEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    assertEquals("App 1 is not running with the correct number of containers",2,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    assertEquals("App 2 is not running with the correct number of containers",2,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("  <queue name=\"queueA\" type=\"parent\">");
    out.println("    <maxChildResources>3072mb,3vcores</maxChildResources>");
    out.println("  </queue>");
    out.println("</allocations>");
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.update();
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    scheduler.handle(nodeEvent);
    assertEquals("App 1 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    assertEquals("App 2 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("  <queue name=\"queueA\" type=\"parent\">");
    out.println("    <maxChildResources>1024mb,1vcores</maxChildResources>");
    out.println("  </queue>");
    out.println("</allocations>");
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.update();
    scheduler.handle(nodeEvent);
    assertEquals("App 1 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    assertEquals("App 2 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
  }
  @Test public void testFairShareWithZeroWeight() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<weight>0.0</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<weight>0.0</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(2 * 1024,"queueA","user1");
    createSchedulingRequest(6 * 1024,"queueB","user1");
    scheduler.update();
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
    assertEquals(0,queue.getFairShare().getMemorySize());
    queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
    assertEquals(0,queue.getFairShare().getMemorySize());
  }
  /** 
 * Test if we compute the maximum AM resource correctly.
 * @throws IOException if scheduler reinitialization fails
 */
  @Test public void testComputeMaxAMResource() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueFSZeroWithMax\">");
    out.println("<weight>0</weight>");
    out.println("<maxAMShare>0.5</maxAMShare>");
    out.println("<maxResources>4096 mb 4 vcores</maxResources>");
    out.println("</queue>");
    out.println("<queue name=\"queueFSZeroWithAVL\">");
    out.println("<weight>0.0</weight>");
    out.println("<maxAMShare>0.5</maxAMShare>");
    out.println("</queue>");
    out.println("<queue name=\"queueFSNonZero\">");
    out.println("<weight>1</weight>");
    out.println("<maxAMShare>0.5</maxAMShare>");
    out.println("</queue>");
    out.println("<defaultQueueSchedulingPolicy>drf" + "</defaultQueueSchedulingPolicy>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    long memCapacity=20 * GB;
    int cpuCapacity=20;
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(memCapacity,cpuCapacity),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.update();
    Resource amResource=Resource.newInstance(1 * GB,1);
    int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
    FSLeafQueue queueFSZeroWithMax=scheduler.getQueueManager().getLeafQueue("queueFSZeroWithMax",true);
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"queueFSZeroWithMax","user1",amResource);
    createSchedulingRequestExistingApplication(1 * GB,1,amPriority,attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("QueueFSZeroWithMax's fair share should be zero",0,queueFSZeroWithMax.getFairShare().getMemorySize());
    Resource expectedAMResource=Resources.multiplyAndRoundUp(queueFSZeroWithMax.getMaxShare(),queueFSZeroWithMax.getMaxAMShare());
    assertEquals("QueueFSZeroWithMax's maximum AM resource should be " + "maxShare * maxAMShare",expectedAMResource.getMemorySize(),queueFSZeroWithMax.getMetrics().getMaxAMShareMB());
    assertEquals("QueueFSZeroWithMax's maximum AM resource should be " + "maxShare * maxAMShare",expectedAMResource.getVirtualCores(),queueFSZeroWithMax.getMetrics().getMaxAMShareVCores());
    assertEquals("QueueFSZeroWithMax's AM resource usage should be the same to " + "AM resource request",amResource.getMemorySize(),queueFSZeroWithMax.getMetrics().getAMResourceUsageMB());
    amResource=Resources.createResource(1 * GB,1);
    FSLeafQueue queueFSZeroWithAVL=scheduler.getQueueManager().getLeafQueue("queueFSZeroWithAVL",true);
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"queueFSZeroWithAVL","user1",amResource);
    createSchedulingRequestExistingApplication(1 * GB,1,amPriority,attId2);
    scheduler.update();
    scheduler.handle(updateEvent);
    expectedAMResource=Resources.multiplyAndRoundUp(Resources.createResource(memCapacity - amResource.getMemorySize(),cpuCapacity - amResource.getVirtualCores()),queueFSZeroWithAVL.getMaxAMShare());
    assertEquals("QueueFSZeroWithAVL's fair share should be zero",0,queueFSZeroWithAVL.getFairShare().getMemorySize());
    assertEquals("QueueFSZeroWithAVL's maximum AM resource should be " + " available resource * maxAMShare",expectedAMResource.getMemorySize(),queueFSZeroWithAVL.getMetrics().getMaxAMShareMB());
    assertEquals("QueueFSZeroWithAVL's maximum AM resource should be " + " available resource * maxAMShare",expectedAMResource.getVirtualCores(),queueFSZeroWithAVL.getMetrics().getMaxAMShareVCores());
    assertEquals("QueueFSZeroWithMax's AM resource usage should be the same to " + "AM resource request",amResource.getMemorySize(),queueFSZeroWithAVL.getMetrics().getAMResourceUsageMB());
    amResource=Resources.createResource(1 * GB,1);
    FSLeafQueue queueFSNonZero=scheduler.getQueueManager().getLeafQueue("queueFSNonZero",true);
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"queueFSNonZero","user1",amResource);
    createSchedulingRequestExistingApplication(1 * GB,1,amPriority,attId3);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertNotEquals("QueueFSNonZero's fair share shouldn't be zero",0,queueFSNonZero.getFairShare().getMemorySize());
    expectedAMResource=Resources.multiplyAndRoundUp(queueFSNonZero.getFairShare(),queueFSNonZero.getMaxAMShare());
    assertEquals("QueueFSNonZero's maximum AM resource should be " + " fair share * maxAMShare",expectedAMResource.getMemorySize(),queueFSNonZero.getMetrics().getMaxAMShareMB());
    assertEquals("QueueFSNonZero's maximum AM resource should be " + " fair share * maxAMShare",expectedAMResource.getVirtualCores(),queueFSNonZero.getMetrics().getMaxAMShareVCores());
    assertEquals("QueueFSNonZero's AM resource usage should be the same to " + "AM resource request",amResource.getMemorySize(),queueFSNonZero.getMetrics().getAMResourceUsageMB());
  }
  @Test public void testFairShareWithZeroWeightNoneZeroMinRes() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<minResources>1 mb 1 vcores</minResources>");
    out.println("<weight>0.0</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<minResources>1 mb 1 vcores</minResources>");
    out.println("<weight>0.0</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(2 * 1024,"queueA","user1");
    createSchedulingRequest(6 * 1024,"queueB","user1");
    scheduler.update();
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
    assertEquals(1,queue.getFairShare().getMemorySize());
    queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
    assertEquals(1,queue.getFairShare().getMemorySize());
  }
  @Test public void testFairShareWithNoneZeroWeightNoneZeroMinRes() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<minResources>1024 mb 1 vcores</minResources>");
    out.println("<weight>0.5</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<minResources>1024 mb 1 vcores</minResources>");
    out.println("<weight>0.5</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(4 * 1024,"queueA","user1");
    createSchedulingRequest(4 * 1024,"queueB","user1");
    scheduler.update();
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
    assertEquals(4096,queue.getFairShare().getMemorySize());
    queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
    assertEquals(4096,queue.getFairShare().getMemorySize());
  }
  @Test public void testQueueInfo() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<weight>.25</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<weight>.75</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(1 * 1024,"queueA","user1");
    createSchedulingRequest(6 * 1024,"queueB","user1");
    scheduler.update();
    QueueInfo queueInfo=scheduler.getQueueInfo("queueA",false,false);
    Assert.assertEquals(0.25f,queueInfo.getCapacity(),0.0f);
    Assert.assertEquals(0.0f,queueInfo.getCurrentCapacity(),0.0f);
    Assert.assertEquals(0,queueInfo.getQueueStatistics().getAllocatedContainers());
    Assert.assertEquals(0,queueInfo.getQueueStatistics().getAllocatedMemoryMB());
    queueInfo=scheduler.getQueueInfo("queueB",false,false);
    Assert.assertEquals(0.75f,queueInfo.getCapacity(),0.0f);
    Assert.assertEquals(0.0f,queueInfo.getCurrentCapacity(),0.0f);
    NodeUpdateSchedulerEvent nodeEvent2=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeEvent2);
    scheduler.handle(nodeEvent2);
    queueInfo=scheduler.getQueueInfo("queueA",false,false);
    Assert.assertEquals(0.25f,queueInfo.getCapacity(),0.0f);
    Assert.assertEquals(0.5f,queueInfo.getCurrentCapacity(),0.0f);
    Assert.assertEquals(1,queueInfo.getQueueStatistics().getAllocatedContainers());
    Assert.assertEquals(1024,queueInfo.getQueueStatistics().getAllocatedMemoryMB());
    queueInfo=scheduler.getQueueInfo("queueB",false,false);
    Assert.assertEquals(0.75f,queueInfo.getCapacity(),0.0f);
    Assert.assertEquals(1.0f,queueInfo.getCurrentCapacity(),0.0f);
    Assert.assertEquals(1,queueInfo.getQueueStatistics().getAllocatedContainers());
    Assert.assertEquals(6144,queueInfo.getQueueStatistics().getAllocatedMemoryMB());
  }
  @Test public void testSimpleHierarchicalFairShareCalculation() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    int capacity=10 * 24;
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(capacity),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(10 * 1024,"parent.queue2","user1");
    createSchedulingRequest(10 * 1024,"parent.queue3","user1");
    createSchedulingRequest(10 * 1024,"root.default","user1");
    scheduler.update();
    scheduler.getQueueManager().getRootQueue().setSteadyFairShare(scheduler.getClusterResource());
    scheduler.getQueueManager().getRootQueue().recomputeSteadyShares();
    QueueManager queueManager=scheduler.getQueueManager();
    Collection<FSLeafQueue> queues=queueManager.getLeafQueues();
    assertEquals(3,queues.size());
    FSLeafQueue queue1=queueManager.getLeafQueue("default",true);
    FSLeafQueue queue2=queueManager.getLeafQueue("parent.queue2",true);
    FSLeafQueue queue3=queueManager.getLeafQueue("parent.queue3",true);
    assertEquals(capacity / 2,queue1.getFairShare().getMemorySize());
    assertEquals(capacity / 2,queue1.getMetrics().getFairShareMB());
    assertEquals(capacity / 2,queue1.getSteadyFairShare().getMemorySize());
    assertEquals(capacity / 2,queue1.getMetrics().getSteadyFairShareMB());
    assertEquals(capacity / 4,queue2.getFairShare().getMemorySize());
    assertEquals(capacity / 4,queue2.getMetrics().getFairShareMB());
    assertEquals(capacity / 4,queue2.getSteadyFairShare().getMemorySize());
    assertEquals(capacity / 4,queue2.getMetrics().getSteadyFairShareMB());
    assertEquals(capacity / 4,queue3.getFairShare().getMemorySize());
    assertEquals(capacity / 4,queue3.getMetrics().getFairShareMB());
    assertEquals(capacity / 4,queue3.getSteadyFairShare().getMemorySize());
    assertEquals(capacity / 4,queue3.getMetrics().getSteadyFairShareMB());
  }
  @Test public void testHierarchicalQueuesSimilarParents() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueManager=scheduler.getQueueManager();
    FSLeafQueue leafQueue=queueManager.getLeafQueue("parent.child",true);
    Assert.assertEquals(2,queueManager.getLeafQueues().size());
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals("root.parent.child",leafQueue.getName());
    FSLeafQueue leafQueue2=queueManager.getLeafQueue("parent",true);
    Assert.assertNull(leafQueue2);
    Assert.assertEquals(2,queueManager.getLeafQueues().size());
    FSLeafQueue leafQueue3=queueManager.getLeafQueue("parent.child.grandchild",true);
    Assert.assertNull(leafQueue3);
    Assert.assertEquals(2,queueManager.getLeafQueues().size());
    FSLeafQueue leafQueue4=queueManager.getLeafQueue("parent.sister",true);
    Assert.assertNotNull(leafQueue4);
    Assert.assertEquals("root.parent.sister",leafQueue4.getName());
    Assert.assertEquals(3,queueManager.getLeafQueues().size());
  }
  @Test public void testSchedulerRootQueueMetrics() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024));
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    createSchedulingRequest(1024,"queue2","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.rootMetrics.getReservedMB());
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024));
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    scheduler.handle(updateEvent2);
    assertEquals(1024,scheduler.rootMetrics.getReservedMB());
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.rootMetrics.getReservedMB());
  }
  @Test(timeout=5000) public void testSimpleContainerAllocation() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(512,2),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    createSchedulingRequest(512,2,"queue1","user1",2);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(updateEvent2);
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    assertEquals(2,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getVirtualCores());
    QueueMetrics queue1Metrics=scheduler.getQueueManager().getQueue("queue1").getMetrics();
    assertEquals(1024,queue1Metrics.getAllocatedMB());
    assertEquals(2,queue1Metrics.getAllocatedVirtualCores());
    assertEquals(1024,scheduler.getRootQueueMetrics().getAllocatedMB());
    assertEquals(2,scheduler.getRootQueueMetrics().getAllocatedVirtualCores());
    assertEquals(512,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(4,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
  }
  @Test(timeout=5000) public void testSimpleContainerReservation() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    ApplicationAttemptId attId=createSchedulingRequest(1024,"queue2","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    assertEquals(1024,scheduler.getSchedulerApp(attId).getCurrentReservation().getMemorySize());
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    scheduler.handle(updateEvent2);
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    assertEquals(1024,scheduler.getSchedulerApp(attId).getCurrentReservation().getMemorySize());
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId).getCurrentReservation().getMemorySize());
  }
  @Test(timeout=5000) public void testOffSwitchAppReservationThreshold() throws Exception {
    conf.setFloat(FairSchedulerConfiguration.RESERVABLE_NODES,0.50f);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(3072),1,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    RMNode node3=MockNodes.newNodeInfo(1,Resources.createResource(3072),1,"127.0.0.3");
    NodeAddedSchedulerEvent nodeEvent3=new NodeAddedSchedulerEvent(node3);
    scheduler.handle(nodeEvent3);
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    assertEquals(6144,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    ApplicationAttemptId attId=createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    assertEquals(1,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    assertEquals(2,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    assertEquals(2,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    RMNode node4=MockNodes.newNodeInfo(1,Resources.createResource(3072),1,"127.0.0.4");
    NodeAddedSchedulerEvent nodeEvent4=new NodeAddedSchedulerEvent(node4);
    scheduler.handle(nodeEvent4);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node4));
    assertEquals(8192,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    scheduler.update();
    assertEquals(0,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
  }
  @Test(timeout=5000) public void testRackLocalAppReservationThreshold() throws Exception {
    conf.setFloat(FairSchedulerConfiguration.RESERVABLE_NODES,0.50f);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(2,Resources.createResource(3072),1,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    RMNode node3=MockNodes.newNodeInfo(2,Resources.createResource(3072),1,"127.0.0.3");
    NodeAddedSchedulerEvent nodeEvent3=new NodeAddedSchedulerEvent(node3);
    scheduler.handle(nodeEvent3);
    RMNode node4=MockNodes.newNodeInfo(2,Resources.createResource(3072),1,"127.0.0.4");
    NodeAddedSchedulerEvent nodeEvent4=new NodeAddedSchedulerEvent(node4);
    scheduler.handle(nodeEvent4);
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node4));
    assertEquals(8192,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    ApplicationAttemptId attemptId=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
    createMockRMApp(attemptId);
    scheduler.addApplication(attemptId.getApplicationId(),"queue1","user1",false);
    scheduler.addApplicationAttempt(attemptId,false,false);
    List<ResourceRequest> asks=new ArrayList<ResourceRequest>();
    asks.add(createResourceRequest(2048,node2.getRackName(),1,1,false));
    scheduler.allocate(attemptId,asks,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    ApplicationAttemptId attId=createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    assertEquals(1,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    assertEquals(2,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    assertEquals(2,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
    RMNode node5=MockNodes.newNodeInfo(2,Resources.createResource(3072),1,"127.0.0.4");
    NodeAddedSchedulerEvent nodeEvent5=new NodeAddedSchedulerEvent(node5);
    scheduler.handle(nodeEvent5);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node4));
    assertEquals(10240,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    scheduler.handle(new NodeUpdateSchedulerEvent(node3));
    scheduler.handle(new NodeUpdateSchedulerEvent(node4));
    scheduler.update();
    assertEquals(0,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
  }
  @Test(timeout=5000) public void testReservationThresholdWithAssignMultiple() throws Exception {
    conf.setFloat(FairSchedulerConfiguration.RESERVABLE_NODES,0f);
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    conf.setBoolean(FairSchedulerConfiguration.DYNAMIC_MAX_ASSIGN,false);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4096,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(2,Resources.createResource(4096,4),1,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId=createSchedulingRequest(1024,"queue1","user1",10);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    assertEquals(8192,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    assertEquals(0,scheduler.getSchedulerApp(attId).getNumReservations(null,true));
  }
  @Test(timeout=500000) public void testContainerReservationAttemptExceedingQueueMax() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"root\">");
    out.println("<queue name=\"queue1\">");
    out.println("<maxResources>2048mb,5vcores</maxResources>");
    out.println("</queue>");
    out.println("<queue name=\"queue2\">");
    out.println("<maxResources>2048mb,10vcores</maxResources>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072,5),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(2048,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    createSchedulingRequest(1024,"queue2","user2",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemorySize());
  }
  /** 
 * The test verifies that zero-FairShare queues (because of zero/tiny weight) can get resources for the AM.
 */
  @Test public void testRequestAMResourceInZeroFairShareQueue() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("<weight>0.0</weight>");
    out.println("<maxResources>4096mb,10vcores</maxResources>");
    out.println("<maxAMShare>0.5</maxAMShare>");
    out.println("</queue>");
    out.println("<queue name=\"queue2\">");
    out.println("<weight>2.0</weight>");
    out.println("</queue>");
    out.println("<queue name=\"queue3\">");
    out.println("<weight>0.000001</weight>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(8192,20),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.update();
    createSchedulingRequest(1024,"root.queue2","user2",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    Resource amResource=Resource.newInstance(1024,1);
    int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"root.queue1","user1",amResource);
    createSchedulingRequestExistingApplication(3 * 1024,1,amPriority,attId1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application 1 should not be running",0,app1.getLiveContainers().size());
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"root.queue1","user1",amResource);
    createSchedulingRequestExistingApplication(2 * 1024,1,amPriority,attId2);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application 2 should be running",1,app2.getLiveContainers().size());
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"root.queue3","user1",amResource);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId3);
    FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application 3 should be running",1,app3.getLiveContainers().size());
  }
  @Test(timeout=500000) public void testContainerReservationNotExceedingQueueMax() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"root\">");
    out.println("<queue name=\"queue1\">");
    out.println("<maxResources>3072mb,10vcores</maxResources>");
    out.println("</queue>");
    out.println("<queue name=\"queue2\">");
    out.println("<maxResources>2048mb,10vcores</maxResources>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072,5),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(2048,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    createSchedulingRequest(1024,"queue2","user2",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemorySize());
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemorySize());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"root\">");
    out.println("<queue name=\"queue1\">");
    out.println("<maxResources>2048mb,10vcores</maxResources>");
    out.println("</queue>");
    out.println("<queue name=\"queue2\">");
    out.println("<maxResources>2048mb,10vcores</maxResources>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    createSchedulingRequest(1024,"queue2","user2",1);
    scheduler.handle(updateEvent);
    assertEquals(2048,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    assertEquals(0,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemorySize());
    assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
  }
  @Test public void testReservationThresholdGatesReservations() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<defaultQueueSchedulingPolicy>drf" + "</defaultQueueSchedulingPolicy>");
    out.println("</allocations>");
    out.close();
    conf.setFloat(FairSchedulerConfiguration.RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE,2f);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4096,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(4096,4,"queue1","user1",1,1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(4096,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    ApplicationAttemptId attId=createSchedulingRequest(1024,"queue2","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    assertEquals(0,scheduler.getSchedulerApp(attId).getReservedContainers().size());
    createSchedulingRequestExistingApplication(1024,3,1,attId);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
    assertEquals(3,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024,4),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    scheduler.handle(updateEvent2);
    assertEquals(3,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getVirtualCores());
    assertEquals(3,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
  }
  @Test public void testEmptyQueueName() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    ApplicationAttemptId appAttemptId=createAppAttemptId(1,1);
    AppAddedSchedulerEvent appAddedEvent=new AppAddedSchedulerEvent(appAttemptId.getApplicationId(),"","user1");
    scheduler.handle(appAddedEvent);
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApp(appAttemptId));
    assertEquals(0,resourceManager.getRMContext().getRMApps().size());
  }
  @Test public void testQueueuNameWithPeriods() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    ApplicationAttemptId appAttemptId1=createAppAttemptId(1,1);
    AppAddedSchedulerEvent appAddedEvent1=new AppAddedSchedulerEvent(appAttemptId1.getApplicationId(),".A","user1");
    scheduler.handle(appAddedEvent1);
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApp(appAttemptId1));
    assertEquals(0,resourceManager.getRMContext().getRMApps().size());
    ApplicationAttemptId appAttemptId2=createAppAttemptId(2,1);
    AppAddedSchedulerEvent appAddedEvent2=new AppAddedSchedulerEvent(appAttemptId2.getApplicationId(),"A.","user1");
    scheduler.handle(appAddedEvent2);
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApp(appAttemptId2));
    assertEquals(0,resourceManager.getRMContext().getRMApps().size());
    ApplicationAttemptId appAttemptId3=createAppAttemptId(3,1);
    AppAddedSchedulerEvent appAddedEvent3=new AppAddedSchedulerEvent(appAttemptId3.getApplicationId(),"A.B","user1");
    scheduler.handle(appAddedEvent3);
    assertEquals(2,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApp(appAttemptId3));
    assertEquals(0,resourceManager.getRMContext().getRMApps().size());
  }
  @Test public void testAssignToQueue() throws Exception {
    conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"true");
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
    RMApp rmApp2=new MockRMApp(1,1,RMAppState.NEW);
    FSLeafQueue queue1=scheduler.assignToQueue(rmApp1,"default","asterix");
    FSLeafQueue queue2=scheduler.assignToQueue(rmApp2,"notdefault","obelix");
    assertEquals(rmApp1.getQueue(),queue1.getName());
    assertEquals("root.asterix",rmApp1.getQueue());
    assertEquals(rmApp2.getQueue(),queue2.getName());
    assertEquals("root.notdefault",rmApp2.getQueue());
  }
  @Test public void testAssignToBadDefaultQueue() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queuePlacementPolicy>");
    out.println("<rule name=\"specified\" create=\"false\" />");
    out.println("<rule name=\"default\" create=\"false\" />");
    out.println("</queuePlacementPolicy>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
    try {
      FSLeafQueue queue1=scheduler.assignToQueue(rmApp1,"default","asterix");
    }
 catch (    IllegalStateException ise) {
      fail("Bad queue placement policy terminal rule should not throw " + "exception ");
    }
  }
  @Test public void testAssignToNonLeafQueueReturnsNull() throws Exception {
    conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"true");
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.getQueueManager().getLeafQueue("root.child1.granchild",true);
    scheduler.getQueueManager().getLeafQueue("root.child2",true);
    RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
    RMApp rmApp2=new MockRMApp(1,1,RMAppState.NEW);
    assertNull(scheduler.assignToQueue(rmApp1,"root.child1","tintin"));
    assertNotNull(scheduler.assignToQueue(rmApp2,"root.child2","snowy"));
  }
  @Test public void testQueuePlacementWithPolicy() throws Exception {
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId appId;
    List<QueuePlacementRule> rules=new ArrayList<QueuePlacementRule>();
    rules.add(new QueuePlacementRule.Specified().initialize(true,null));
    rules.add(new QueuePlacementRule.User().initialize(false,null));
    rules.add(new QueuePlacementRule.PrimaryGroup().initialize(false,null));
    rules.add(new QueuePlacementRule.SecondaryGroupExistingQueue().initialize(false,null));
    rules.add(new QueuePlacementRule.Default().initialize(true,null));
    Set<String> queues=Sets.newHashSet("root.user1","root.user3group","root.user4subgroup1","root.user4subgroup2","root.user5subgroup2");
    Map<FSQueueType,Set<String>> configuredQueues=new HashMap<FSQueueType,Set<String>>();
    configuredQueues.put(FSQueueType.LEAF,queues);
    configuredQueues.put(FSQueueType.PARENT,new HashSet<String>());
    scheduler.getAllocationConfiguration().placementPolicy=new QueuePlacementPolicy(rules,configuredQueues,conf);
    appId=createSchedulingRequest(1024,"somequeue","user1");
    assertEquals("root.somequeue",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","user1");
    assertEquals("root.user1",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","user3");
    assertEquals("root.user3group",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","user4");
    assertEquals("root.user4subgroup1",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","user5");
    assertEquals("root.user5subgroup2",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","otheruser");
    assertEquals("root.default",scheduler.getSchedulerApp(appId).getQueueName());
    rules=new ArrayList<QueuePlacementRule>();
    rules.add(new QueuePlacementRule.User().initialize(false,null));
    rules.add(new QueuePlacementRule.Specified().initialize(true,null));
    rules.add(new QueuePlacementRule.Default().initialize(true,null));
    scheduler.getAllocationConfiguration().placementPolicy=new QueuePlacementPolicy(rules,configuredQueues,conf);
    appId=createSchedulingRequest(1024,"somequeue","user1");
    assertEquals("root.user1",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"somequeue","otheruser");
    assertEquals("root.somequeue",scheduler.getSchedulerApp(appId).getQueueName());
    appId=createSchedulingRequest(1024,"default","otheruser");
    assertEquals("root.default",scheduler.getSchedulerApp(appId).getQueueName());
  }
  @Test public void testFairShareWithMinAlloc() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<minResources>1024mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<minResources>2048mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(2 * 1024,"queueA","user1");
    createSchedulingRequest(2 * 1024,"queueB","user1");
    scheduler.update();
    Collection<FSLeafQueue> queues=scheduler.getQueueManager().getLeafQueues();
    assertEquals(3,queues.size());
    for (    FSLeafQueue p : queues) {
      if (p.getName().equals("root.queueA")) {
        assertEquals(1024,p.getFairShare().getMemorySize());
      }
 else       if (p.getName().equals("root.queueB")) {
        assertEquals(2048,p.getFairShare().getMemorySize());
      }
    }
  }
  @Test public void testNestedUserQueue() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"user1group\" type=\"parent\">");
    out.println("<minResources>1024mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("<queuePlacementPolicy>");
    out.println("<rule name=\"specified\" create=\"false\" />");
    out.println("<rule name=\"nestedUserQueue\">");
    out.println("     <rule name=\"primaryGroup\" create=\"false\" />");
    out.println("</rule>");
    out.println("<rule name=\"default\" />");
    out.println("</queuePlacementPolicy>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
    FSLeafQueue user1Leaf=scheduler.assignToQueue(rmApp1,"root.default","user1");
    assertEquals("root.user1group.user1",user1Leaf.getName());
  }
  @Test public void testFairShareAndWeightsInNestedUserQueueRule() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"parentq\" type=\"parent\">");
    out.println("<minResources>1024mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("<queuePlacementPolicy>");
    out.println("<rule name=\"nestedUserQueue\">");
    out.println("     <rule name=\"specified\" create=\"false\" />");
    out.println("</rule>");
    out.println("<rule name=\"default\" />");
    out.println("</queuePlacementPolicy>");
    out.println("</allocations>");
    out.close();
    RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
    RMApp rmApp2=new MockRMApp(1,1,RMAppState.NEW);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    int capacity=16 * 1024;
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(capacity),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(10 * 1024,"root.parentq","user1");
    createSchedulingRequest(10 * 1024,"root.parentq","user2");
    createSchedulingRequest(10 * 1024,"root.default","user3");
    scheduler.update();
    scheduler.getQueueManager().getRootQueue().setSteadyFairShare(scheduler.getClusterResource());
    scheduler.getQueueManager().getRootQueue().recomputeSteadyShares();
    Collection<FSLeafQueue> leafQueues=scheduler.getQueueManager().getLeafQueues();
    for (    FSLeafQueue leaf : leafQueues) {
      if (leaf.getName().equals("root.parentq.user1") || leaf.getName().equals("root.parentq.user2")) {
        assertEquals(capacity / 4,leaf.getFairShare().getMemorySize());
        assertEquals(capacity / 4,leaf.getSteadyFairShare().getMemorySize());
        assertEquals(1.0,leaf.getWeight(),0);
      }
    }
  }
  @Test public void testSteadyFairShareWithReloadAndNodeAddRemove() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
    out.println("<queue name=\"root\">");
    out.println("  <schedulingPolicy>drf</schedulingPolicy>");
    out.println("  <queue name=\"child1\">");
    out.println("    <weight>1</weight>");
    out.println("  </queue>");
    out.println("  <queue name=\"child2\">");
    out.println("    <weight>1</weight>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueManager=scheduler.getQueueManager();
    assertEquals(0,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemorySize());
    assertEquals(0,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemorySize());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(6144),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    assertEquals(6144,scheduler.getClusterResource().getMemorySize());
    assertEquals(2048,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemorySize());
    assertEquals(2048,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemorySize());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
    out.println("<queue name=\"root\">");
    out.println("  <schedulingPolicy>drf</schedulingPolicy>");
    out.println("  <queue name=\"child1\">");
    out.println("    <weight>1</weight>");
    out.println("  </queue>");
    out.println("  <queue name=\"child2\">");
    out.println("    <weight>2</weight>");
    out.println("  </queue>");
    out.println("  <queue name=\"child3\">");
    out.println("    <weight>2</weight>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(1024,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemorySize());
    assertEquals(2048,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemorySize());
    assertEquals(2048,queueManager.getLeafQueue("child3",false).getSteadyFairShare().getMemorySize());
    NodeRemovedSchedulerEvent nodeEvent2=new NodeRemovedSchedulerEvent(node1);
    scheduler.handle(nodeEvent2);
    assertEquals(0,scheduler.getClusterResource().getMemorySize());
    assertEquals(0,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemorySize());
    assertEquals(0,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemorySize());
  }
  @Test public void testSteadyFairShareWithQueueCreatedRuntime() throws Exception {
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
    conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"true");
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(6144),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    assertEquals(6144,scheduler.getClusterResource().getMemorySize());
    assertEquals(6144,scheduler.getQueueManager().getRootQueue().getSteadyFairShare().getMemorySize());
    assertEquals(6144,scheduler.getQueueManager().getLeafQueue("default",false).getSteadyFairShare().getMemorySize());
    ApplicationAttemptId appAttemptId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(appAttemptId1,"default","user1",null);
    assertEquals(3072,scheduler.getQueueManager().getLeafQueue("default",false).getSteadyFairShare().getMemorySize());
    assertEquals(3072,scheduler.getQueueManager().getLeafQueue("user1",false).getSteadyFairShare().getMemorySize());
  }
  /** 
 * Make allocation requests and ensure they are reflected in queue demand.
 */
  @Test public void testQueueDemandCalculation() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    int minReqSize=YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB;
    ApplicationAttemptId id11=createAppAttemptId(1,1);
    createMockRMApp(id11);
    scheduler.addApplication(id11.getApplicationId(),"root.queue1","user1",false);
    scheduler.addApplicationAttempt(id11,false,false);
    List<ResourceRequest> ask1=new ArrayList<ResourceRequest>();
    ResourceRequest request1=createResourceRequest(minReqSize * 2,ResourceRequest.ANY,1,1,true);
    ask1.add(request1);
    scheduler.allocate(id11,ask1,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    ApplicationAttemptId id21=createAppAttemptId(2,1);
    createMockRMApp(id21);
    scheduler.addApplication(id21.getApplicationId(),"root.queue2","user1",false);
    scheduler.addApplicationAttempt(id21,false,false);
    List<ResourceRequest> ask2=new ArrayList<ResourceRequest>();
    ResourceRequest request2=createResourceRequest(2 * minReqSize,"foo",1,1,false);
    ResourceRequest request3=createResourceRequest(2 * minReqSize,ResourceRequest.ANY,1,1,false);
    ask2.add(request2);
    ask2.add(request3);
    scheduler.allocate(id21,ask2,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    ApplicationAttemptId id22=createAppAttemptId(2,2);
    createMockRMApp(id22);
    scheduler.addApplication(id22.getApplicationId(),"root.queue2","user1",false);
    scheduler.addApplicationAttempt(id22,false,false);
    List<ResourceRequest> ask3=new ArrayList<ResourceRequest>();
    ResourceRequest request4=createResourceRequest(minReqSize,"bar",2,2,true);
    ResourceRequest request5=createResourceRequest(minReqSize,ResourceRequest.ANY,2,2,true);
    ask3.add(request4);
    ask3.add(request5);
    scheduler.allocate(id22,ask3,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    scheduler.update();
    assertEquals(2 * minReqSize,scheduler.getQueueManager().getQueue("root.queue1").getDemand().getMemorySize());
    assertEquals(2 * minReqSize + 2 * minReqSize,scheduler.getQueueManager().getQueue("root.queue2").getDemand().getMemorySize());
  }
  @Test public void testHierarchicalQueueAllocationFileParsing() throws IOException, SAXException, AllocationConfigurationException, ParserConfigurationException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queueA\">");
    out.println("<minResources>2048mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("<queue name=\"queueB\">");
    out.println("<minResources>2048mb,0vcores</minResources>");
    out.println("<queue name=\"queueC\">");
    out.println("<minResources>2048mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("<queue name=\"queueD\">");
    out.println("<minResources>2048mb,0vcores</minResources>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueManager=scheduler.getQueueManager();
    Collection<FSLeafQueue> leafQueues=queueManager.getLeafQueues();
    Assert.assertEquals(4,leafQueues.size());
    Assert.assertNotNull(queueManager.getLeafQueue("queueA",false));
    Assert.assertNotNull(queueManager.getLeafQueue("queueB.queueC",false));
    Assert.assertNotNull(queueManager.getLeafQueue("queueB.queueD",false));
    Assert.assertNotNull(queueManager.getLeafQueue("default",false));
    Assert.assertEquals(4,leafQueues.size());
  }
  @Test public void testConfigureRootQueue() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
    out.println("<queue name=\"root\">");
    out.println("  <schedulingPolicy>drf</schedulingPolicy>");
    out.println("  <queue name=\"child1\">");
    out.println("    <minResources>1024mb,1vcores</minResources>");
    out.println("  </queue>");
    out.println("  <queue name=\"child2\">");
    out.println("    <minResources>1024mb,4vcores</minResources>");
    out.println("  </queue>");
    out.println("  <fairSharePreemptionTimeout>100</fairSharePreemptionTimeout>");
    out.println("  <minSharePreemptionTimeout>120</minSharePreemptionTimeout>");
    out.println("  <fairSharePreemptionThreshold>.5</fairSharePreemptionThreshold>");
    out.println("</queue>");
    out.println("<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>");
    out.println("<defaultMinSharePreemptionTimeout>200</defaultMinSharePreemptionTimeout>");
    out.println("<defaultFairSharePreemptionThreshold>.6</defaultFairSharePreemptionThreshold>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueManager=scheduler.getQueueManager();
    FSQueue root=queueManager.getRootQueue();
    assertTrue(root.getPolicy() instanceof DominantResourceFairnessPolicy);
    assertNotNull(queueManager.getLeafQueue("child1",false));
    assertNotNull(queueManager.getLeafQueue("child2",false));
    assertEquals(100000,root.getFairSharePreemptionTimeout());
    assertEquals(120000,root.getMinSharePreemptionTimeout());
    assertEquals(0.5f,root.getFairSharePreemptionThreshold(),0.01);
  }
  @Test(timeout=5000) public void testMultipleContainersWaitingForReservation() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue2","user2",1);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue3","user3",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1024,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemorySize());
    assertEquals(0,scheduler.getSchedulerApp(attId2).getCurrentReservation().getMemorySize());
  }
  @Test(timeout=5000) public void testUserMaxRunningApps() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<user name=\"user1\">");
    out.println("<maxRunningApps>1</maxRunningApps>");
    out.println("</user>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    createSchedulingRequestExistingApplication(1024,1,attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(2,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
  }
  @Test(timeout=5000) public void testIncreaseQueueMaxRunningAppsOnTheFly() throws Exception {
    String allocBefore="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>1</maxRunningApps>"+ "</queue>"+ "</queue>"+ "</allocations>";
    String allocAfter="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>3</maxRunningApps>"+ "</queue>"+ "</queue>"+ "</allocations>";
    testIncreaseQueueSettingOnTheFlyInternal(allocBefore,allocAfter);
  }
  @Test(timeout=5000) public void testIncreaseUserMaxRunningAppsOnTheFly() throws Exception {
    String allocBefore="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>10</maxRunningApps>"+ "</queue>"+ "</queue>"+ "<user name=\"user1\">"+ "<maxRunningApps>1</maxRunningApps>"+ "</user>"+ "</allocations>";
    String allocAfter="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>10</maxRunningApps>"+ "</queue>"+ "</queue>"+ "<user name=\"user1\">"+ "<maxRunningApps>3</maxRunningApps>"+ "</user>"+ "</allocations>";
    testIncreaseQueueSettingOnTheFlyInternal(allocBefore,allocAfter);
  }
  private void testIncreaseQueueSettingOnTheFlyInternal(  String allocBefore,  String allocAfter) throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println(allocBefore);
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    ApplicationAttemptId attId3=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    ApplicationAttemptId attId4=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    assertEquals(0,scheduler.getSchedulerApp(attId3).getLiveContainers().size());
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println(allocAfter);
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId3).getLiveContainers().size());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
  }
  @Test(timeout=5000) public void testDecreaseQueueMaxRunningAppsOnTheFly() throws Exception {
    String allocBefore="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>3</maxRunningApps>"+ "</queue>"+ "</queue>"+ "</allocations>";
    String allocAfter="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>1</maxRunningApps>"+ "</queue>"+ "</queue>"+ "</allocations>";
    testDecreaseQueueSettingOnTheFlyInternal(allocBefore,allocAfter);
  }
  @Test(timeout=5000) public void testDecreaseUserMaxRunningAppsOnTheFly() throws Exception {
    String allocBefore="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>10</maxRunningApps>"+ "</queue>"+ "</queue>"+ "<user name=\"user1\">"+ "<maxRunningApps>3</maxRunningApps>"+ "</user>"+ "</allocations>";
    String allocAfter="<?xml version=\"1.0\"?>" + "<allocations>" + "<queue name=\"root\">"+ "<queue name=\"queue1\">"+ "<maxRunningApps>10</maxRunningApps>"+ "</queue>"+ "</queue>"+ "<user name=\"user1\">"+ "<maxRunningApps>1</maxRunningApps>"+ "</user>"+ "</allocations>";
    testDecreaseQueueSettingOnTheFlyInternal(allocBefore,allocAfter);
  }
  private void testDecreaseQueueSettingOnTheFlyInternal(  String allocBefore,  String allocAfter) throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println(allocBefore);
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    ApplicationAttemptId attId3=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    ApplicationAttemptId attId4=createSchedulingRequest(1024,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    assertEquals(1,scheduler.getSchedulerApp(attId3).getLiveContainers().size());
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println(allocAfter);
    out.close();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId3).getLiveContainers().size());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
    appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId3,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,scheduler.getSchedulerApp(attId4).getLiveContainers().size());
  }
  /** 
 * Reserve at a lower priority and verify the lower priority request gets allocated
 */
  @Test(timeout=5000) public void testReservationWithMultiplePriorities() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(2048,2));
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    FSAppAttempt app1=scheduler.getSchedulerApp(createSchedulingRequest(1024,1,"queue","user",1));
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Basic allocation failed",1,app1.getLiveContainers().size());
    ApplicationAttemptId attId=createSchedulingRequest(2048,2,"queue1","user1",1,2);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Reservation at lower priority failed",1,app2.getReservedContainers().size());
    createSchedulingRequestExistingApplication(2048,2,1,attId);
    ContainerId containerId=app1.getLiveContainers().iterator().next().getContainerId();
    scheduler.allocate(app1.getApplicationAttemptId(),new ArrayList<>(),null,Arrays.asList(containerId),null,null,NULL_UPDATE_REQUESTS);
    scheduler.handle(updateEvent);
    Collection<RMContainer> liveContainers=app2.getLiveContainers();
    assertEquals("Allocation post completion failed",1,liveContainers.size());
    assertEquals("High prio container allocated against low prio reservation",2,liveContainers.iterator().next().getContainer().getPriority().getPriority());
  }
  @Test public void testAclSubmitApplication() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"root\">");
    out.println("  <aclSubmitApps> </aclSubmitApps>");
    out.println("  <aclAdministerApps> </aclAdministerApps>");
    out.println("  <queue name=\"queue1\">");
    out.println("    <aclSubmitApps>norealuserhasthisname</aclSubmitApps>");
    out.println("    <aclAdministerApps>norealuserhasthisname</aclAdministerApps>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","norealuserhasthisname",1);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1","norealuserhasthisname2",1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    assertNotNull("The application was not allowed",app1);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    assertNull("The application was allowed",app2);
  }
  @Test(timeout=5000) public void testMultipleNodesSingleRackRequest() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024),2,"127.0.0.2");
    RMNode node3=MockNodes.newNodeInfo(2,Resources.createResource(1024),3,"127.0.0.3");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attemptId=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
    createMockRMApp(attemptId);
    scheduler.addApplication(attemptId.getApplicationId(),"queue1","user1",false);
    scheduler.addApplicationAttempt(attemptId,false,false);
    List<ResourceRequest> asks=new ArrayList<ResourceRequest>();
    asks.add(createResourceRequest(1024,node1.getHostName(),1,1,true));
    asks.add(createResourceRequest(1024,node2.getHostName(),1,1,true));
    asks.add(createResourceRequest(1024,node3.getHostName(),1,1,true));
    asks.add(createResourceRequest(1024,node1.getRackName(),1,1,true));
    asks.add(createResourceRequest(1024,node3.getRackName(),1,1,true));
    asks.add(createResourceRequest(1024,ResourceRequest.ANY,1,2,true));
    scheduler.allocate(attemptId,asks,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent1=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent1);
    assertEquals(1,scheduler.getSchedulerApp(attemptId).getLiveContainers().size());
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(updateEvent2);
    assertEquals(2,scheduler.getSchedulerApp(attemptId).getLiveContainers().size());
  }
  @Test(timeout=5000) public void testFifoWithinQueue() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072,3),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",2);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1","user1",2);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
    queue1.setPolicy(new FifoPolicy());
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1,app1.getLiveContainers().size());
    assertEquals(0,app2.getLiveContainers().size());
    scheduler.handle(updateEvent);
    assertEquals(2,app1.getLiveContainers().size());
    assertEquals(0,app2.getLiveContainers().size());
    scheduler.handle(updateEvent);
    assertEquals(2,app1.getLiveContainers().size());
    assertEquals(1,app2.getLiveContainers().size());
  }
  @Test(timeout=3000) public void testFixedMaxAssign() throws Exception {
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    conf.setBoolean(FairSchedulerConfiguration.DYNAMIC_MAX_ASSIGN,false);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(16384,16),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId attId=createSchedulingRequest(1024,"root.default","user",8);
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    scheduler.maxAssign=2;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",2,app.getLiveContainers().size());
    scheduler.maxAssign=-1;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",8,app.getLiveContainers().size());
  }
  /** 
 * Test to verify the behavior of dynamic-max-assign. 1. Verify the value of maxassign doesn't affect number of containers affected. 2. Verify the node is fully allocated.
 */
  @Test(timeout=3000) public void testDynamicMaxAssign() throws Exception {
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId attId=createSchedulingRequest(1024,1,"root.default","user",12);
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    scheduler.maxAssign=2;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",5,app.getLiveContainers().size());
    scheduler.maxAssign=4;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",7,app.getLiveContainers().size());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",8,app.getLiveContainers().size());
  }
  @Test(timeout=3000) public void testMaxAssignWithZeroMemoryContainers() throws Exception {
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    conf.setBoolean(FairSchedulerConfiguration.DYNAMIC_MAX_ASSIGN,false);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,0);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(16384,16),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId attId=createSchedulingRequest(0,1,"root.default","user",8);
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    scheduler.maxAssign=2;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",2,app.getLiveContainers().size());
    scheduler.maxAssign=-1;
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",8,app.getLiveContainers().size());
  }
  /** 
 * Test to verify the behavior of {@link FSQueue#assignContainer(FSSchedulerNode)}) Create two queues under root (fifoQueue and fairParent), and two queues under fairParent (fairChild1 and fairChild2). Submit two apps to the fifoQueue and one each to the fairChild* queues, all apps requiring 4 containers each of the total 16 container capacity Assert the number of containers for each app after 4, 8, 12 and 16 updates.
 * @throws Exception
 */
  @Test(timeout=5000) public void testAssignContainer() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    final String user="user1";
    final String fifoQueue="fifo";
    final String fairParent="fairParent";
    final String fairChild1=fairParent + ".fairChild1";
    final String fairChild2=fairParent + ".fairChild2";
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),1,"127.0.0.1");
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(8192,8),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent1);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,fifoQueue,user,4);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,fairChild1,user,4);
    ApplicationAttemptId attId3=createSchedulingRequest(1024,fairChild2,user,4);
    ApplicationAttemptId attId4=createSchedulingRequest(1024,fifoQueue,user,4);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
    FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
    scheduler.getQueueManager().getLeafQueue(fifoQueue,true).setPolicy(SchedulingPolicy.parse("fifo"));
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent1=new NodeUpdateSchedulerEvent(node1);
    NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
    for (int i=0; i < 8; i++) {
      scheduler.handle(updateEvent1);
      scheduler.handle(updateEvent2);
      if ((i + 1) % 2 == 0) {
        String ERR="Wrong number of assigned containers after " + (i + 1) + " updates";
        if (i < 4) {
          assertEquals(ERR,(i + 1),app1.getLiveContainers().size());
          assertEquals(ERR,0,app4.getLiveContainers().size());
        }
 else {
          assertEquals(ERR,4,app1.getLiveContainers().size());
          assertEquals(ERR,(i - 3),app4.getLiveContainers().size());
        }
        assertEquals(ERR,(i + 1) / 2,app2.getLiveContainers().size());
        assertEquals(ERR,(i + 1) / 2,app3.getLiveContainers().size());
      }
    }
  }
  @SuppressWarnings("unchecked") @Test public void testNotAllowSubmitApplication() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"root\">");
    out.println("  <aclSubmitApps> </aclSubmitApps>");
    out.println("  <aclAdministerApps> </aclAdministerApps>");
    out.println("  <queue name=\"queue1\">");
    out.println("    <aclSubmitApps>userallow</aclSubmitApps>");
    out.println("    <aclAdministerApps>userallow</aclAdministerApps>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    int appId=this.APP_ID++;
    String user="usernotallow";
    String queue="queue1";
    ApplicationId applicationId=MockApps.newAppID(appId);
    String name=MockApps.newAppName();
    ApplicationMasterService masterService=new ApplicationMasterService(resourceManager.getRMContext(),scheduler);
    ApplicationSubmissionContext submissionContext=new ApplicationSubmissionContextPBImpl();
    ContainerLaunchContext clc=BuilderUtils.newContainerLaunchContext(null,null,null,null,null,null);
    submissionContext.setApplicationId(applicationId);
    submissionContext.setAMContainerSpec(clc);
    RMApp application=new RMAppImpl(applicationId,resourceManager.getRMContext(),conf,name,user,queue,submissionContext,scheduler,masterService,System.currentTimeMillis(),"YARN",null,null);
    resourceManager.getRMContext().getRMApps().putIfAbsent(applicationId,application);
    application.handle(new RMAppEvent(applicationId,RMAppEventType.START));
    final int MAX_TRIES=20;
    int numTries=0;
    while (!application.getState().equals(RMAppState.SUBMITTED) && numTries < MAX_TRIES) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ex) {
        ex.printStackTrace();
      }
      numTries++;
    }
    assertEquals("The application doesn't reach SUBMITTED.",RMAppState.SUBMITTED,application.getState());
    ApplicationAttemptId attId=ApplicationAttemptId.newInstance(applicationId,this.ATTEMPT_ID++);
    scheduler.addApplication(attId.getApplicationId(),queue,user,false);
    numTries=0;
    while (application.getFinishTime() == 0 && numTries < MAX_TRIES) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ex) {
        ex.printStackTrace();
      }
      numTries++;
    }
    assertEquals(FinalApplicationStatus.FAILED,application.getFinalApplicationStatus());
  }
  @Test public void testRemoveNodeUpdatesRootQueueMetrics() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent addEvent=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(addEvent);
    assertEquals(1024,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(4,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
    scheduler.update();
    assertEquals(1024,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(4,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
    NodeRemovedSchedulerEvent removeEvent=new NodeRemovedSchedulerEvent(node1);
    scheduler.handle(removeEvent);
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
    scheduler.update();
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableMB());
    assertEquals(0,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
  }
  @Test public void testStrictLocality() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",0);
    ResourceRequest nodeRequest=createResourceRequest(1024,node1.getHostName(),1,1,true);
    ResourceRequest rackRequest=createResourceRequest(1024,node1.getRackName(),1,1,false);
    ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    createSchedulingRequestExistingApplication(nodeRequest,attId1);
    createSchedulingRequestExistingApplication(rackRequest,attId1);
    createSchedulingRequestExistingApplication(anyRequest,attId1);
    scheduler.update();
    NodeUpdateSchedulerEvent node1UpdateEvent=new NodeUpdateSchedulerEvent(node1);
    NodeUpdateSchedulerEvent node2UpdateEvent=new NodeUpdateSchedulerEvent(node2);
    FSAppAttempt app=scheduler.getSchedulerApp(attId1);
    for (int i=0; i < 10; i++) {
      scheduler.handle(node2UpdateEvent);
      assertEquals(0,app.getLiveContainers().size());
      assertEquals(0,app.getReservedContainers().size());
    }
    scheduler.handle(node1UpdateEvent);
    assertEquals(1,app.getLiveContainers().size());
  }
  @Test public void testCancelStrictLocality() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",0);
    ResourceRequest nodeRequest=createResourceRequest(1024,node1.getHostName(),1,1,true);
    ResourceRequest rackRequest=createResourceRequest(1024,"rack1",1,1,false);
    ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    createSchedulingRequestExistingApplication(nodeRequest,attId1);
    createSchedulingRequestExistingApplication(rackRequest,attId1);
    createSchedulingRequestExistingApplication(anyRequest,attId1);
    scheduler.update();
    NodeUpdateSchedulerEvent node2UpdateEvent=new NodeUpdateSchedulerEvent(node2);
    FSAppAttempt app=scheduler.getSchedulerApp(attId1);
    for (int i=0; i < 10; i++) {
      scheduler.handle(node2UpdateEvent);
      assertEquals(0,app.getLiveContainers().size());
    }
    List<ResourceRequest> update=Arrays.asList(createResourceRequest(1024,node1.getHostName(),1,0,true),createResourceRequest(1024,"rack1",1,0,true),createResourceRequest(1024,ResourceRequest.ANY,1,1,true));
    scheduler.allocate(attId1,update,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    scheduler.handle(node2UpdateEvent);
    assertEquals(1,app.getLiveContainers().size());
  }
  @Test public void testAMStrictLocalityRack() throws IOException {
    testAMStrictLocality(false,false);
  }
  @Test public void testAMStrictLocalityNode() throws IOException {
    testAMStrictLocality(true,false);
  }
  @Test public void testAMStrictLocalityRackInvalid() throws IOException {
    testAMStrictLocality(false,true);
  }
  @Test public void testAMStrictLocalityNodeInvalid() throws IOException {
    testAMStrictLocality(true,true);
  }
  private void testAMStrictLocality(  boolean node,  boolean invalid) throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(2,Resources.createResource(1024),2,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    List<ResourceRequest> reqs=new ArrayList<>();
    ResourceRequest nodeRequest=createResourceRequest(1024,node2.getHostName(),1,1,true);
    if (node && invalid) {
      nodeRequest.setResourceName("invalid");
    }
    ResourceRequest rackRequest=createResourceRequest(1024,node2.getRackName(),1,1,!node);
    if (!node && invalid) {
      rackRequest.setResourceName("invalid");
    }
    ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    reqs.add(anyRequest);
    reqs.add(rackRequest);
    if (node) {
      reqs.add(nodeRequest);
    }
    ApplicationAttemptId attId1=createSchedulingRequest("queue1","user1",reqs);
    scheduler.update();
    NodeUpdateSchedulerEvent node2UpdateEvent=new NodeUpdateSchedulerEvent(node2);
    FSAppAttempt app=scheduler.getSchedulerApp(attId1);
    scheduler.handle(node2UpdateEvent);
    if (invalid) {
      assertEquals(0,app.getLiveContainers().size());
      assertEquals(0,scheduler.getNode(node2.getNodeID()).getNumContainers());
      assertEquals(0,scheduler.getNode(node1.getNodeID()).getNumContainers());
    }
 else {
      assertEquals(1,app.getLiveContainers().size());
      assertEquals(1,scheduler.getNode(node2.getNodeID()).getNumContainers());
      assertEquals(0,scheduler.getNode(node1.getNodeID()).getNumContainers());
    }
  }
  /** 
 * Strict locality requests shouldn't reserve resources on another node.
 */
  @Test public void testReservationsStrictLocality() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024,1));
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024,1));
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId=createSchedulingRequest(1024,"queue1","user1",0);
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    ResourceRequest nodeRequest=createResourceRequest(1024,node2.getHostName(),1,1,true);
    ResourceRequest rackRequest=createResourceRequest(1024,"rack1",1,1,false);
    ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    createSchedulingRequestExistingApplication(nodeRequest,attId);
    createSchedulingRequestExistingApplication(rackRequest,attId);
    createSchedulingRequestExistingApplication(anyRequest,attId);
    scheduler.update();
    NodeUpdateSchedulerEvent nodeUpdateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeUpdateEvent);
    assertEquals("App assigned a container on the wrong node",0,app.getLiveContainers().size());
    scheduler.handle(nodeUpdateEvent);
    assertEquals("App reserved a container on the wrong node",0,app.getReservedContainers().size());
  }
  @Test public void testNoMoreCpuOnNode() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(2048,1),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId attId=createSchedulingRequest(1024,1,"default","user1",2);
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    assertEquals(1,app.getLiveContainers().size());
    scheduler.handle(updateEvent);
    assertEquals(1,app.getLiveContainers().size());
  }
  @Test public void testBasicDRFAssignment() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,BuilderUtils.newResource(8192,5));
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId appAttId1=createSchedulingRequest(2048,1,"queue1","user1",2);
    FSAppAttempt app1=scheduler.getSchedulerApp(appAttId1);
    ApplicationAttemptId appAttId2=createSchedulingRequest(1024,2,"queue1","user1",2);
    FSAppAttempt app2=scheduler.getSchedulerApp(appAttId2);
    DominantResourceFairnessPolicy drfPolicy=new DominantResourceFairnessPolicy();
    drfPolicy.initialize(scheduler.getContext());
    scheduler.getQueueManager().getQueue("queue1").setPolicy(drfPolicy);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app1.getLiveContainers().size());
    Assert.assertEquals(0,app2.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app1.getLiveContainers().size());
    Assert.assertEquals(1,app2.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(2,app1.getLiveContainers().size());
    Assert.assertEquals(1,app2.getLiveContainers().size());
  }
  /** 
 * Two apps on one queue, one app on another
 */
  @Test public void testBasicDRFWithQueues() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,BuilderUtils.newResource(8192,7),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId appAttId1=createSchedulingRequest(3072,1,"queue1","user1",2);
    FSAppAttempt app1=scheduler.getSchedulerApp(appAttId1);
    ApplicationAttemptId appAttId2=createSchedulingRequest(2048,2,"queue1","user1",2);
    FSAppAttempt app2=scheduler.getSchedulerApp(appAttId2);
    ApplicationAttemptId appAttId3=createSchedulingRequest(1024,2,"queue2","user1",2);
    FSAppAttempt app3=scheduler.getSchedulerApp(appAttId3);
    DominantResourceFairnessPolicy drfPolicy=new DominantResourceFairnessPolicy();
    drfPolicy.initialize(scheduler.getContext());
    scheduler.getQueueManager().getQueue("root").setPolicy(drfPolicy);
    scheduler.getQueueManager().getQueue("queue1").setPolicy(drfPolicy);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app1.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app3.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(2,app3.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app2.getLiveContainers().size());
  }
  @Test public void testDRFHierarchicalQueues() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,BuilderUtils.newResource(12288,12),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId appAttId1=createSchedulingRequest(3074,1,"queue1.subqueue1","user1",2);
    Thread.sleep(3);
    FSAppAttempt app1=scheduler.getSchedulerApp(appAttId1);
    ApplicationAttemptId appAttId2=createSchedulingRequest(1024,3,"queue1.subqueue1","user1",2);
    Thread.sleep(3);
    FSAppAttempt app2=scheduler.getSchedulerApp(appAttId2);
    ApplicationAttemptId appAttId3=createSchedulingRequest(2048,2,"queue1.subqueue2","user1",2);
    Thread.sleep(3);
    FSAppAttempt app3=scheduler.getSchedulerApp(appAttId3);
    ApplicationAttemptId appAttId4=createSchedulingRequest(1024,2,"queue2","user1",2);
    Thread.sleep(3);
    FSAppAttempt app4=scheduler.getSchedulerApp(appAttId4);
    DominantResourceFairnessPolicy drfPolicy=new DominantResourceFairnessPolicy();
    drfPolicy.initialize(scheduler.getContext());
    scheduler.getQueueManager().getQueue("root").setPolicy(drfPolicy);
    scheduler.getQueueManager().getQueue("queue1").setPolicy(drfPolicy);
    scheduler.getQueueManager().getQueue("queue1.subqueue1").setPolicy(drfPolicy);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app1.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app4.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(2,app4.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app3.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(2,app3.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app2.getLiveContainers().size());
    scheduler.handle(updateEvent);
    Assert.assertEquals(1,app1.getLiveContainers().size());
    Assert.assertEquals(1,app2.getLiveContainers().size());
    Assert.assertEquals(2,app3.getLiveContainers().size());
    Assert.assertEquals(2,app4.getLiveContainers().size());
  }
  @Test(timeout=30000) public void testHostPortNodeName() throws Exception {
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME,true);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024),1,"127.0.0.1",1);
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024),2,"127.0.0.1",2);
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",0);
    ResourceRequest nodeRequest=createResourceRequest(1024,node1.getNodeID().getHost() + ":" + node1.getNodeID().getPort(),1,1,true);
    ResourceRequest rackRequest=createResourceRequest(1024,node1.getRackName(),1,1,false);
    ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    createSchedulingRequestExistingApplication(nodeRequest,attId1);
    createSchedulingRequestExistingApplication(rackRequest,attId1);
    createSchedulingRequestExistingApplication(anyRequest,attId1);
    scheduler.update();
    NodeUpdateSchedulerEvent node1UpdateEvent=new NodeUpdateSchedulerEvent(node1);
    NodeUpdateSchedulerEvent node2UpdateEvent=new NodeUpdateSchedulerEvent(node2);
    FSAppAttempt app=scheduler.getSchedulerApp(attId1);
    for (int i=0; i < 10; i++) {
      scheduler.handle(node2UpdateEvent);
      assertEquals(0,app.getLiveContainers().size());
      assertEquals(0,app.getReservedContainers().size());
    }
    scheduler.handle(node1UpdateEvent);
    assertEquals(1,app.getLiveContainers().size());
  }
  private void verifyAppRunnable(  ApplicationAttemptId attId,  boolean runnable){
    FSAppAttempt app=scheduler.getSchedulerApp(attId);
    FSLeafQueue queue=app.getQueue();
    assertEquals(runnable,queue.isRunnableApp(app));
    assertEquals(!runnable,queue.isNonRunnableApp(app));
  }
  private void verifyQueueNumRunnable(  String queueName,  int numRunnableInQueue,  int numNonRunnableInQueue){
    FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue(queueName,false);
    assertEquals(numRunnableInQueue,queue.getNumRunnableApps());
    assertEquals(numNonRunnableInQueue,queue.getNumNonRunnableApps());
  }
  @Test public void testUserAndQueueMaxRunningApps() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("<maxRunningApps>2</maxRunningApps>");
    out.println("</queue>");
    out.println("<user name=\"user1\">");
    out.println("<maxRunningApps>1</maxRunningApps>");
    out.println("</user>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1");
    verifyAppRunnable(attId1,true);
    verifyQueueNumRunnable("queue1",1,0);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue2","user1");
    verifyAppRunnable(attId2,false);
    verifyQueueNumRunnable("queue2",0,1);
    ApplicationAttemptId attId3=createSchedulingRequest(1024,"queue1","user2");
    verifyAppRunnable(attId3,true);
    verifyQueueNumRunnable("queue1",2,0);
    ApplicationAttemptId attId4=createSchedulingRequest(1024,"queue1","user2");
    verifyAppRunnable(attId4,false);
    verifyQueueNumRunnable("queue1",2,1);
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    verifyAppRunnable(attId2,true);
    verifyQueueNumRunnable("queue2",1,0);
    verifyAppRunnable(attId4,true);
    verifyQueueNumRunnable("queue1",2,0);
    ApplicationAttemptId attId5=createSchedulingRequest(1024,"queue1","user2");
    verifyAppRunnable(attId5,false);
    verifyQueueNumRunnable("queue1",2,1);
  }
  @Test public void testMultipleCompletedEvent() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("<maxAMShare>0.2</maxAMShare>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(20480,20),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.update();
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"queue1","user1",Resource.newInstance(1024,1));
    createSchedulingRequestExistingApplication(1024,1,RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority(),attId1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    RMContainer container=app1.getLiveContainersMap().values().iterator().next();
    scheduler.completedContainer(container,SchedulerUtils.createAbnormalContainerStatus(container.getContainerId(),SchedulerUtils.LOST_CONTAINER),RMContainerEventType.KILL);
    scheduler.completedContainer(container,SchedulerUtils.createAbnormalContainerStatus(container.getContainerId(),SchedulerUtils.COMPLETED_APPLICATION),RMContainerEventType.FINISHED);
    assertEquals(Resources.none(),app1.getResourceUsage());
  }
  @Test public void testQueueMaxAMShare() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("<maxAMShare>0.2</maxAMShare>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(20480,20),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.update();
    FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
    assertEquals("Queue queue1's fair share should be 0",0,queue1.getFairShare().getMemorySize());
    createSchedulingRequest(1 * 1024,"root.default","user1");
    scheduler.update();
    scheduler.handle(updateEvent);
    Resource amResource1=Resource.newInstance(1024,1);
    Resource amResource2=Resource.newInstance(2048,2);
    Resource amResource3=Resource.newInstance(1860,2);
    int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"queue1","user1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application1's AM requests 1024 MB memory",1024,app1.getAMResource().getMemorySize());
    assertEquals("Application1's AM should be running",1,app1.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"queue1","user1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId2);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application2's AM requests 1024 MB memory",1024,app2.getAMResource().getMemorySize());
    assertEquals("Application2's AM should be running",1,app2.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"queue1","user1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId3);
    FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application3's AM resource shouldn't be updated",0,app3.getAMResource().getMemorySize());
    assertEquals("Application3's AM should not be running",0,app3.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    createSchedulingRequestExistingApplication(1024,1,attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application1 should have two running containers",2,app1.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
    scheduler.update();
    scheduler.handle(appRemovedEvent1);
    scheduler.handle(updateEvent);
    assertEquals("Application1's AM should be finished",0,app1.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app1.getResourceUsage());
    assertEquals("Application3's AM should be running",1,app3.getLiveContainers().size());
    assertEquals("Application3's AM requests 1024 MB memory",1024,app3.getAMResource().getMemorySize());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId4=createAppAttemptId(4,1);
    createApplicationWithAMResource(attId4,"queue1","user1",amResource2);
    createSchedulingRequestExistingApplication(2048,2,amPriority,attId4);
    FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application4's AM resource shouldn't be updated",0,app4.getAMResource().getMemorySize());
    assertEquals("Application4's AM should not be running",0,app4.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app4.getResourceUsage());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId5=createAppAttemptId(5,1);
    createApplicationWithAMResource(attId5,"queue1","user1",amResource2);
    createSchedulingRequestExistingApplication(2048,2,amPriority,attId5);
    FSAppAttempt app5=scheduler.getSchedulerApp(attId5);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application5's AM resource shouldn't be updated",0,app5.getAMResource().getMemorySize());
    assertEquals("Application5's AM should not be running",0,app5.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app5.getResourceUsage());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent4=new AppAttemptRemovedSchedulerEvent(attId4,RMAppAttemptState.KILLED,false);
    scheduler.handle(appRemovedEvent4);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application5's AM should not be running",0,app5.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app5.getResourceUsage());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
    AppAttemptRemovedSchedulerEvent appRemovedEvent3=new AppAttemptRemovedSchedulerEvent(attId3,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent2);
    scheduler.handle(appRemovedEvent3);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application2's AM should be finished",0,app2.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app2.getResourceUsage());
    assertEquals("Application3's AM should be finished",0,app3.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app3.getResourceUsage());
    assertEquals("Application5's AM should be running",1,app5.getLiveContainers().size());
    assertEquals("Application5's AM requests 2048 MB memory",2048,app5.getAMResource().getMemorySize());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    createSchedulingRequestExistingApplication(1024,1,attId5);
    assertEquals("Application5's AM should have 1 container",1,app5.getLiveContainers().size());
    RMContainer amContainer5=(RMContainer)app5.getLiveContainers().toArray()[0];
    ContainerExpiredSchedulerEvent containerExpired=new ContainerExpiredSchedulerEvent(amContainer5.getContainerId());
    scheduler.handle(containerExpired);
    assertEquals("Application5's AM should have 0 container",0,app5.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app5.getResourceUsage());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application5 should have 1 container",1,app5.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId6=createAppAttemptId(6,1);
    createApplicationWithAMResource(attId6,"queue1","user1",amResource3);
    createSchedulingRequestExistingApplication(1860,2,amPriority,attId6);
    FSAppAttempt app6=scheduler.getSchedulerApp(attId6);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application6's AM should not be running",0,app6.getLiveContainers().size());
    assertEquals("Finished application usage should be none",Resources.none(),app6.getResourceUsage());
    assertEquals("Application6's AM resource shouldn't be updated",0,app6.getAMResource().getMemorySize());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent5=new AppAttemptRemovedSchedulerEvent(attId5,RMAppAttemptState.FINISHED,false);
    AppAttemptRemovedSchedulerEvent appRemovedEvent6=new AppAttemptRemovedSchedulerEvent(attId6,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent5);
    scheduler.handle(appRemovedEvent6);
    scheduler.update();
    assertEquals("Queue1's AM resource usage should be 0",0,queue1.getAmResourceUsage().getMemorySize());
  }
  @Test public void testQueueMaxAMShareDefault() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,6);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("</queue>");
    out.println("<queue name=\"queue2\">");
    out.println("<maxAMShare>0.4</maxAMShare>");
    out.println("</queue>");
    out.println("<queue name=\"queue3\">");
    out.println("<maxResources>10240 mb 4 vcores</maxResources>");
    out.println("</queue>");
    out.println("<queue name=\"queue4\">");
    out.println("</queue>");
    out.println("<queue name=\"queue5\">");
    out.println("</queue>");
    out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(8192,10),0,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.update();
    FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
    assertEquals("Queue queue1's fair share should be 0",0,queue1.getFairShare().getMemorySize());
    FSLeafQueue queue2=scheduler.getQueueManager().getLeafQueue("queue2",true);
    assertEquals("Queue queue2's fair share should be 0",0,queue2.getFairShare().getMemorySize());
    FSLeafQueue queue3=scheduler.getQueueManager().getLeafQueue("queue3",true);
    assertEquals("Queue queue3's fair share should be 0",0,queue3.getFairShare().getMemorySize());
    FSLeafQueue queue4=scheduler.getQueueManager().getLeafQueue("queue4",true);
    assertEquals("Queue queue4's fair share should be 0",0,queue4.getFairShare().getMemorySize());
    FSLeafQueue queue5=scheduler.getQueueManager().getLeafQueue("queue5",true);
    assertEquals("Queue queue5's fair share should be 0",0,queue5.getFairShare().getMemorySize());
    List<String> queues=Arrays.asList("root.queue3","root.queue4","root.queue5");
    for (    String queue : queues) {
      createSchedulingRequest(1 * 1024,queue,"user1");
      scheduler.update();
      scheduler.handle(updateEvent);
    }
    Resource amResource1=Resource.newInstance(1024,1);
    int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"queue1","test1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application1's AM requests 1024 MB memory",1024,app1.getAMResource().getMemorySize());
    assertEquals("Application1's AM should be running",1,app1.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"queue2","test1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId2);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application2's AM resource shouldn't be updated",0,app2.getAMResource().getMemorySize());
    assertEquals("Application2's AM should not be running",0,app2.getLiveContainers().size());
    assertEquals("Queue2's AM resource usage should be 0 MB memory",0,queue2.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent2);
    scheduler.update();
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"queue3","test1",amResource1);
    createSchedulingRequestExistingApplication(1024,6,amPriority,attId3);
    FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application3's AM resource shouldn't be updated",0,app3.getAMResource().getMemorySize());
    assertEquals("Application3's AM should not be running",0,app3.getLiveContainers().size());
    assertEquals("Queue3's AM resource usage should be 0 MB memory",0,queue3.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId4=createAppAttemptId(4,1);
    createApplicationWithAMResource(attId4,"queue3","test1",amResource1);
    createSchedulingRequestExistingApplication(1024,5,amPriority,attId4);
    FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Application4's AM resource shouldn't be updated",0,app4.getAMResource().getMemorySize());
    assertEquals("Application4's AM should not be running",0,app4.getLiveContainers().size());
    assertEquals("Queue3's AM resource usage should be 0 MB memory",0,queue3.getAmResourceUsage().getMemorySize());
  }
  /** 
 * The test verifies container gets reserved when not over maxAMShare, reserved container gets unreserved when over maxAMShare, container doesn't get reserved when over maxAMShare, reserved container is turned into an allocation and superfluously reserved container gets unreserved. 1. create three nodes: Node1 is 10G, Node2 is 10G and Node3 is 5G. 2. APP1 allocated 1G on Node1 and APP2 allocated 1G on Node2. 3. APP3 reserved 10G on Node1 and Node2. 4. APP4 allocated 5G on Node3, which makes APP3 over maxAMShare. 5. Remove APP1 to make Node1 have 10G available resource. 6. APP3 unreserved its container on Node1 because it is over maxAMShare. 7. APP5 allocated 1G on Node1 after APP3 unreserved its container. 8. Remove APP3. 9. APP6 failed to reserve a 10G container on Node1 due to AMShare limit. 10. APP7 allocated 1G on Node1. 11. Remove APP4 and APP5. 12. APP6 reserved 10G on Node1 and Node2. 13. APP8 failed to allocate a 1G container on Node1 and Node2 because APP6 reserved Node1 and Node2. 14. Remove APP2. 15. APP6 turned the 10G reservation into an allocation on node2. 16. APP6 unreserved its container on node1, APP8 allocated 1G on Node1.
 */
  @Test public void testQueueMaxAMShareWithContainerReservation() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    conf.setFloat(FairSchedulerConfiguration.RESERVABLE_NODES,1f);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("<maxAMShare>0.5</maxAMShare>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(10240,10),1,"127.0.0.1");
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(10240,10),2,"127.0.0.2");
    RMNode node3=MockNodes.newNodeInfo(1,Resources.createResource(5120,5),3,"127.0.0.3");
    NodeAddedSchedulerEvent nodeE1=new NodeAddedSchedulerEvent(node1);
    NodeUpdateSchedulerEvent updateE1=new NodeUpdateSchedulerEvent(node1);
    NodeAddedSchedulerEvent nodeE2=new NodeAddedSchedulerEvent(node2);
    NodeUpdateSchedulerEvent updateE2=new NodeUpdateSchedulerEvent(node2);
    NodeAddedSchedulerEvent nodeE3=new NodeAddedSchedulerEvent(node3);
    NodeUpdateSchedulerEvent updateE3=new NodeUpdateSchedulerEvent(node3);
    scheduler.handle(nodeE1);
    scheduler.handle(nodeE2);
    scheduler.handle(nodeE3);
    scheduler.update();
    FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
    Resource amResource1=Resource.newInstance(1024,1);
    Resource amResource2=Resource.newInstance(1024,1);
    Resource amResource3=Resource.newInstance(10240,1);
    Resource amResource4=Resource.newInstance(5120,1);
    Resource amResource5=Resource.newInstance(1024,1);
    Resource amResource6=Resource.newInstance(10240,1);
    Resource amResource7=Resource.newInstance(1024,1);
    Resource amResource8=Resource.newInstance(1024,1);
    int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
    ApplicationAttemptId attId1=createAppAttemptId(1,1);
    createApplicationWithAMResource(attId1,"queue1","user1",amResource1);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId1);
    FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application1's AM requests 1024 MB memory",1024,app1.getAMResource().getMemorySize());
    assertEquals("Application1's AM should be running",1,app1.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"queue1","user1",amResource2);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId2);
    FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
    scheduler.update();
    scheduler.handle(updateE2);
    assertEquals("Application2's AM requests 1024 MB memory",1024,app2.getAMResource().getMemorySize());
    assertEquals("Application2's AM should be running",1,app2.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"queue1","user1",amResource3);
    createSchedulingRequestExistingApplication(10240,1,amPriority,attId3);
    FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
    scheduler.update();
    scheduler.handle(updateE1);
    scheduler.handle(updateE2);
    assertEquals("Application3's AM resource shouldn't be updated",0,app3.getAMResource().getMemorySize());
    assertEquals("Application3's AM should not be running",0,app3.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId4=createAppAttemptId(4,1);
    createApplicationWithAMResource(attId4,"queue1","user1",amResource4);
    createSchedulingRequestExistingApplication(5120,1,amPriority,attId4);
    FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application4's AM resource shouldn't be updated",0,app4.getAMResource().getMemorySize());
    assertEquals("Application4's AM should not be running",0,app4.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateE3);
    assertEquals("Application4's AM requests 5120 MB memory",5120,app4.getAMResource().getMemorySize());
    assertEquals("Application4's AM should be running",1,app4.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 7168 MB memory",7168,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    assertEquals("Queue1's AM resource usage should be 6144 MB memory",6144,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId5=createAppAttemptId(5,1);
    createApplicationWithAMResource(attId5,"queue1","user1",amResource5);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId5);
    FSAppAttempt app5=scheduler.getSchedulerApp(attId5);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application5's AM requests 1024 MB memory",1024,app5.getAMResource().getMemorySize());
    assertEquals("Application5's AM should be running",1,app5.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 7168 MB memory",7168,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent3=new AppAttemptRemovedSchedulerEvent(attId3,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent3);
    assertEquals("Queue1's AM resource usage should be 7168 MB memory",7168,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId6=createAppAttemptId(6,1);
    createApplicationWithAMResource(attId6,"queue1","user1",amResource6);
    createSchedulingRequestExistingApplication(10240,1,amPriority,attId6);
    FSAppAttempt app6=scheduler.getSchedulerApp(attId6);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application6's AM resource shouldn't be updated",0,app6.getAMResource().getMemorySize());
    assertEquals("Application6's AM should not be running",0,app6.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 7168 MB memory",7168,queue1.getAmResourceUsage().getMemorySize());
    ApplicationAttemptId attId7=createAppAttemptId(7,1);
    createApplicationWithAMResource(attId7,"queue1","user1",amResource7);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId7);
    FSAppAttempt app7=scheduler.getSchedulerApp(attId7);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application7's AM requests 1024 MB memory",1024,app7.getAMResource().getMemorySize());
    assertEquals("Application7's AM should be running",1,app7.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 8192 MB memory",8192,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent4=new AppAttemptRemovedSchedulerEvent(attId4,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent4);
    assertEquals("Queue1's AM resource usage should be 3072 MB memory",3072,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent5=new AppAttemptRemovedSchedulerEvent(attId5,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent5);
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateE1);
    scheduler.handle(updateE2);
    ApplicationAttemptId attId8=createAppAttemptId(8,1);
    createApplicationWithAMResource(attId8,"queue1","user1",amResource8);
    createSchedulingRequestExistingApplication(1024,1,amPriority,attId8);
    FSAppAttempt app8=scheduler.getSchedulerApp(attId8);
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application8's AM resource shouldn't be updated",0,app8.getAMResource().getMemorySize());
    assertEquals("Application8's AM should not be running",0,app8.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateE2);
    assertEquals("Application8's AM resource shouldn't be updated",0,app8.getAMResource().getMemorySize());
    assertEquals("Application8's AM should not be running",0,app8.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemorySize());
    AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent2);
    assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateE2);
    assertEquals("Application6's AM requests 10240 MB memory",10240,app6.getAMResource().getMemorySize());
    assertEquals("Application6's AM should be running",1,app6.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 11264 MB memory",11264,queue1.getAmResourceUsage().getMemorySize());
    scheduler.update();
    scheduler.handle(updateE1);
    assertEquals("Application8's AM requests 1024 MB memory",1024,app8.getAMResource().getMemorySize());
    assertEquals("Application8's AM should be running",1,app8.getLiveContainers().size());
    assertEquals("Queue1's AM resource usage should be 12288 MB memory",12288,queue1.getAmResourceUsage().getMemorySize());
  }
  @Test public void testMaxRunningAppsHierarchicalQueues() throws Exception {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    ControlledClock clock=new ControlledClock();
    scheduler.setClock(clock);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"queue1\">");
    out.println("  <maxRunningApps>3</maxRunningApps>");
    out.println("  <queue name=\"sub1\"></queue>");
    out.println("  <queue name=\"sub2\"></queue>");
    out.println("  <queue name=\"sub3\">");
    out.println("    <maxRunningApps>1</maxRunningApps>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1.sub1","user1");
    verifyAppRunnable(attId1,true);
    verifyQueueNumRunnable("queue1.sub1",1,0);
    clock.tickSec(10);
    ApplicationAttemptId attId2=createSchedulingRequest(1024,"queue1.sub3","user1");
    verifyAppRunnable(attId2,true);
    verifyQueueNumRunnable("queue1.sub3",1,0);
    clock.tickSec(10);
    ApplicationAttemptId attId3=createSchedulingRequest(1024,"queue1.sub2","user1");
    verifyAppRunnable(attId3,true);
    verifyQueueNumRunnable("queue1.sub2",1,0);
    clock.tickSec(10);
    ApplicationAttemptId attId4=createSchedulingRequest(1024,"queue1.sub2","user1");
    verifyAppRunnable(attId4,false);
    verifyQueueNumRunnable("queue1.sub2",1,1);
    clock.tickSec(10);
    ApplicationAttemptId attId5=createSchedulingRequest(1024,"queue1.sub3","user1");
    verifyAppRunnable(attId5,false);
    verifyQueueNumRunnable("queue1.sub3",1,1);
    clock.tickSec(10);
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
    verifyAppRunnable(attId4,true);
    verifyQueueNumRunnable("queue1.sub2",2,0);
    verifyAppRunnable(attId5,false);
    verifyQueueNumRunnable("queue1.sub3",0,1);
    AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId5,RMAppAttemptState.KILLED,true);
    scheduler.handle(appRemovedEvent2);
    assertEquals(0,scheduler.maxRunningEnforcer.usersNonRunnableApps.get("user1").size());
    verifyQueueNumRunnable("queue1.sub3",0,0);
    AppAttemptRemovedSchedulerEvent appRemovedEvent3=new AppAttemptRemovedSchedulerEvent(attId4,RMAppAttemptState.FINISHED,true);
    scheduler.handle(appRemovedEvent3);
    verifyQueueNumRunnable("queue1.sub2",1,0);
    verifyQueueNumRunnable("queue1.sub3",0,0);
  }
  @SuppressWarnings("deprecation") @Test public void testSchedulingOnRemovedNode() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    Assert.assertTrue("Continuous scheduling should be disabled.",!scheduler.isContinuousSchedulingEnabled());
    ApplicationAttemptId id11=createAppAttemptId(1,1);
    createMockRMApp(id11);
    scheduler.addApplication(id11.getApplicationId(),"root.queue1","user1",false);
    scheduler.addApplicationAttempt(id11,false,false);
    List<ResourceRequest> ask1=new ArrayList<>();
    ResourceRequest request1=createResourceRequest(1024,8,ResourceRequest.ANY,1,1,true);
    ask1.add(request1);
    scheduler.allocate(id11,ask1,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    String hostName="127.0.0.1";
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,hostName);
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    FSSchedulerNode node=scheduler.getSchedulerNode(node1.getNodeID());
    NodeRemovedSchedulerEvent removeNode1=new NodeRemovedSchedulerEvent(node1);
    scheduler.handle(removeNode1);
    scheduler.attemptScheduling(node);
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(id11,RMAppAttemptState.FINISHED,false);
    scheduler.handle(appRemovedEvent1);
  }
  @Test public void testDefaultRuleInitializesProperlyWhenPolicyNotConfigured() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    conf.setBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,false);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("</allocations>");
    out.close();
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    List<QueuePlacementRule> rules=scheduler.allocConf.placementPolicy.getRules();
    for (    QueuePlacementRule rule : rules) {
      if (rule instanceof Default) {
        Default defaultRule=(Default)rule;
        assertNotNull(defaultRule.defaultQueueName);
      }
    }
  }
  @Test public void testBlacklistNodes() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    final int GB=1024;
    String host="127.0.0.1";
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(16 * GB,16),0,host);
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId appAttemptId=createSchedulingRequest(GB,"root.default","user",1);
    FSAppAttempt app=scheduler.getSchedulerApp(appAttemptId);
    scheduler.allocate(appAttemptId,Collections.<ResourceRequest>emptyList(),null,Collections.<ContainerId>emptyList(),Collections.singletonList(host),null,NULL_UPDATE_REQUESTS);
    assertTrue(app.isPlaceBlacklisted(host));
    scheduler.allocate(appAttemptId,Collections.<ResourceRequest>emptyList(),null,Collections.<ContainerId>emptyList(),null,Collections.singletonList(host),NULL_UPDATE_REQUESTS);
    assertFalse(scheduler.getSchedulerApp(appAttemptId).isPlaceBlacklisted(host));
    List<ResourceRequest> update=Arrays.asList(createResourceRequest(GB,node.getHostName(),1,0,true));
    scheduler.allocate(appAttemptId,update,null,Collections.<ContainerId>emptyList(),Collections.singletonList(host),null,NULL_UPDATE_REQUESTS);
    assertTrue(app.isPlaceBlacklisted(host));
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",0,app.getLiveContainers().size());
    scheduler.allocate(appAttemptId,update,null,Collections.<ContainerId>emptyList(),null,Collections.singletonList(host),NULL_UPDATE_REQUESTS);
    assertFalse(app.isPlaceBlacklisted(host));
    createSchedulingRequest(GB,"root.default","user",1);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals("Incorrect number of containers allocated",1,app.getLiveContainers().size());
  }
  @Test public void testGetAppsInQueue() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId appAttId1=createSchedulingRequest(1024,1,"queue1.subqueue1","user1");
    ApplicationAttemptId appAttId2=createSchedulingRequest(1024,1,"queue1.subqueue2","user1");
    ApplicationAttemptId appAttId3=createSchedulingRequest(1024,1,"default","user1");
    List<ApplicationAttemptId> apps=scheduler.getAppsInQueue("queue1.subqueue1");
    assertEquals(1,apps.size());
    assertEquals(appAttId1,apps.get(0));
    apps=scheduler.getAppsInQueue("root.queue1.subqueue1");
    assertEquals(1,apps.size());
    assertEquals(appAttId1,apps.get(0));
    apps=scheduler.getAppsInQueue("user1");
    assertEquals(1,apps.size());
    assertEquals(appAttId3,apps.get(0));
    apps=scheduler.getAppsInQueue("root.user1");
    assertEquals(1,apps.size());
    assertEquals(appAttId3,apps.get(0));
    apps=scheduler.getAppsInQueue("queue1");
    Assert.assertEquals(2,apps.size());
    Set<ApplicationAttemptId> appAttIds=Sets.newHashSet(apps.get(0),apps.get(1));
    assertTrue(appAttIds.contains(appAttId1));
    assertTrue(appAttIds.contains(appAttId2));
  }
  @Test public void testAddAndRemoveAppFromFairScheduler() throws Exception {
    AbstractYarnScheduler<SchedulerApplicationAttempt,SchedulerNode> scheduler=(AbstractYarnScheduler<SchedulerApplicationAttempt,SchedulerNode>)resourceManager.getResourceScheduler();
    TestSchedulerUtils.verifyAppAddedAndRemovedFromScheduler(scheduler.getSchedulerApplications(),scheduler,"default");
  }
  @Test public void testResourceUsageByMoveApp() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1 * GB,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    ApplicationAttemptId appAttId=createSchedulingRequest(1 * GB,2,"parent1.queue1","user1",2);
    scheduler.update();
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(updateEvent);
    QueueManager queueMgr=scheduler.getQueueManager();
    FSQueue parent1=queueMgr.getParentQueue("parent1",true);
    FSQueue parent2=queueMgr.getParentQueue("parent2",true);
    FSQueue queue2=queueMgr.getLeafQueue("parent2.queue2",true);
    FSQueue queue1=queueMgr.getLeafQueue("parent1.queue1",true);
    Assert.assertEquals(parent2.getResourceUsage().getMemorySize(),0);
    Assert.assertEquals(queue2.getResourceUsage().getMemorySize(),0);
    Assert.assertEquals(parent1.getResourceUsage().getMemorySize(),1 * GB);
    Assert.assertEquals(queue1.getResourceUsage().getMemorySize(),1 * GB);
    scheduler.moveApplication(appAttId.getApplicationId(),"parent2.queue2");
    Assert.assertEquals(parent2.getResourceUsage().getMemorySize(),1 * GB);
    Assert.assertEquals(queue2.getResourceUsage().getMemorySize(),1 * GB);
    Assert.assertEquals(parent1.getResourceUsage().getMemorySize(),0);
    Assert.assertEquals(queue1.getResourceUsage().getMemorySize(),0);
  }
  @Test(expected=YarnException.class) public void testMoveWouldViolateMaxAppsConstraints() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueMgr=scheduler.getQueueManager();
    FSQueue queue2=queueMgr.getLeafQueue("queue2",true);
    queue2.setMaxRunningApps(0);
    ApplicationAttemptId appAttId=createSchedulingRequest(1024,1,"queue1","user1",3);
    scheduler.moveApplication(appAttId.getApplicationId(),"queue2");
  }
  @Test(expected=YarnException.class) public void testMoveWouldViolateMaxResourcesConstraints() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueManager queueMgr=scheduler.getQueueManager();
    FSLeafQueue oldQueue=queueMgr.getLeafQueue("queue1",true);
    FSQueue queue2=queueMgr.getLeafQueue("queue2",true);
    queue2.setMaxShare(new ConfigurableResource(Resource.newInstance(1024,1)));
    ApplicationAttemptId appAttId=createSchedulingRequest(1024,1,"queue1","user1",3);
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(2048,2));
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
    scheduler.handle(nodeEvent);
    scheduler.handle(updateEvent);
    scheduler.handle(updateEvent);
    assertEquals(Resource.newInstance(2048,2),oldQueue.getResourceUsage());
    scheduler.moveApplication(appAttId.getApplicationId(),"queue2");
  }
  @Test(expected=YarnException.class) public void testMoveToNonexistentQueue() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    scheduler.getQueueManager().getLeafQueue("queue1",true);
    ApplicationAttemptId appAttId=createSchedulingRequest(1024,1,"queue1","user1",3);
    scheduler.moveApplication(appAttId.getApplicationId(),"queue2");
  }
  @Test public void testLowestCommonAncestorForNonRootParent() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    FSLeafQueue aQueue=mock(FSLeafQueue.class);
    FSLeafQueue bQueue=mock(FSLeafQueue.class);
    when(aQueue.getName()).thenReturn("root.queue1.a");
    when(bQueue.getName()).thenReturn("root.queue1.b");
    QueueManager queueManager=scheduler.getQueueManager();
    FSParentQueue queue1=queueManager.getParentQueue("queue1",true);
    queue1.addChildQueue(aQueue);
    queue1.addChildQueue(bQueue);
    FSQueue ancestorQueue=scheduler.findLowestCommonAncestorQueue(aQueue,bQueue);
    assertEquals(ancestorQueue,queue1);
  }
  @Test public void testLowestCommonAncestorRootParent() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    FSLeafQueue aQueue=mock(FSLeafQueue.class);
    FSLeafQueue bQueue=mock(FSLeafQueue.class);
    when(aQueue.getName()).thenReturn("root.a");
    when(bQueue.getName()).thenReturn("root.b");
    QueueManager queueManager=scheduler.getQueueManager();
    FSParentQueue queue1=queueManager.getParentQueue("root",false);
    queue1.addChildQueue(aQueue);
    queue1.addChildQueue(bQueue);
    FSQueue ancestorQueue=scheduler.findLowestCommonAncestorQueue(aQueue,bQueue);
    assertEquals(ancestorQueue,queue1);
  }
  @Test public void testLowestCommonAncestorDeeperHierarchy() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    FSQueue aQueue=mock(FSLeafQueue.class);
    FSQueue bQueue=mock(FSLeafQueue.class);
    FSQueue a1Queue=mock(FSLeafQueue.class);
    FSQueue b1Queue=mock(FSLeafQueue.class);
    when(a1Queue.getName()).thenReturn("root.queue1.a.a1");
    when(b1Queue.getName()).thenReturn("root.queue1.b.b1");
    when(aQueue.getChildQueues()).thenReturn(Arrays.asList(a1Queue));
    when(bQueue.getChildQueues()).thenReturn(Arrays.asList(b1Queue));
    QueueManager queueManager=scheduler.getQueueManager();
    FSParentQueue queue1=queueManager.getParentQueue("queue1",true);
    queue1.addChildQueue(aQueue);
    queue1.addChildQueue(bQueue);
    FSQueue ancestorQueue=scheduler.findLowestCommonAncestorQueue(a1Queue,b1Queue);
    assertEquals(ancestorQueue,queue1);
  }
  @Test public void testDoubleRemoval() throws Exception {
    String testUser="user1";
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId attemptId=createAppAttemptId(1,1);
    AppAddedSchedulerEvent appAddedEvent=new AppAddedSchedulerEvent(attemptId.getApplicationId(),testUser,testUser);
    scheduler.handle(appAddedEvent);
    AppAttemptAddedSchedulerEvent attemptAddedEvent=new AppAttemptAddedSchedulerEvent(createAppAttemptId(1,1),false);
    scheduler.handle(attemptAddedEvent);
    FSAppAttempt attempt=scheduler.getSchedulerApp(attemptId);
    AppAttemptRemovedSchedulerEvent attemptRemovedEvent=new AppAttemptRemovedSchedulerEvent(createAppAttemptId(1,1),RMAppAttemptState.FINISHED,false);
    List<ApplicationAttemptId> attemptList=scheduler.getAppsInQueue(testUser);
    assertNotNull("Queue missing",attemptList);
    assertTrue("Attempt should be in the queue",attemptList.contains(attemptId));
    assertFalse("Attempt is stopped",attempt.isStopped());
    scheduler.handle(attemptRemovedEvent);
    attemptList=scheduler.getAppsInQueue(testUser);
    assertFalse("Attempt should not be in the queue",attemptList.contains(attemptId));
    assertTrue("Attempt should have been stopped",attempt.isStopped());
    scheduler.handle(attemptRemovedEvent);
    assertTrue("Attempt queue has changed",attempt.getQueue().getName().endsWith(testUser));
  }
  @Test(expected=YarnException.class) public void testMoveAfterRemoval() throws Exception {
    String testUser="user1";
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId attemptId=createAppAttemptId(1,1);
    AppAddedSchedulerEvent appAddedEvent=new AppAddedSchedulerEvent(attemptId.getApplicationId(),testUser,testUser);
    scheduler.handle(appAddedEvent);
    AppAttemptAddedSchedulerEvent attemptAddedEvent=new AppAttemptAddedSchedulerEvent(createAppAttemptId(1,1),false);
    scheduler.handle(attemptAddedEvent);
    FSAppAttempt attempt=scheduler.getSchedulerApp(attemptId);
    AppAttemptRemovedSchedulerEvent attemptRemovedEvent=new AppAttemptRemovedSchedulerEvent(createAppAttemptId(1,1),RMAppAttemptState.FINISHED,false);
    scheduler.handle(attemptRemovedEvent);
    List<ApplicationAttemptId> attemptList=scheduler.getAppsInQueue(testUser);
    assertNotNull("Queue missing",attemptList);
    assertFalse("Attempt should not be in the queue",attemptList.contains(attemptId));
    assertTrue("Attempt should have been stopped",attempt.isStopped());
    assertTrue("Attempt queue has changed",attempt.getQueue().getName().endsWith(testUser));
    scheduler.moveApplication(attemptId.getApplicationId(),"default");
  }
  @Test public void testPerfMetricsInited(){
    scheduler.init(conf);
    scheduler.start();
    MetricsCollectorImpl collector=new MetricsCollectorImpl();
    scheduler.fsOpDurations.getMetrics(collector,true);
    assertEquals("Incorrect number of perf metrics",1,collector.getRecords().size());
  }
  @Test public void testQueueNameWithTrailingSpace() throws Exception {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    assertEquals(1,scheduler.getQueueManager().getLeafQueues().size());
    ApplicationAttemptId appAttemptId1=createAppAttemptId(1,1);
    AppAddedSchedulerEvent appAddedEvent1=new AppAddedSchedulerEvent(appAttemptId1.getApplicationId(),"A","user1");
    scheduler.handle(appAddedEvent1);
    assertEquals(2,scheduler.getQueueManager().getLeafQueues().size());
    assertNotNull(scheduler.getSchedulerApplications().get(appAttemptId1.getApplicationId()));
    AppAttemptAddedSchedulerEvent attempAddedEvent=new AppAttemptAddedSchedulerEvent(appAttemptId1,false);
    scheduler.handle(attempAddedEvent);
    assertEquals(1,scheduler.getQueueManager().getLeafQueue("A",true).getNumRunnableApps());
    assertNotNull(scheduler.getSchedulerApp(appAttemptId1));
    ApplicationAttemptId appAttemptId2=createAppAttemptId(2,1);
    AppAddedSchedulerEvent appAddedEvent2=new AppAddedSchedulerEvent(appAttemptId2.getApplicationId(),"A ","user1");
    scheduler.handle(appAddedEvent2);
    assertEquals(2,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApplications().get(appAttemptId2.getApplicationId()));
    assertNull(scheduler.getSchedulerApp(appAttemptId2));
    ApplicationAttemptId appAttemptId3=createAppAttemptId(3,1);
    AppAddedSchedulerEvent appAddedEvent3=new AppAddedSchedulerEvent(appAttemptId3.getApplicationId(),"B.C","user1");
    scheduler.handle(appAddedEvent3);
    assertEquals(3,scheduler.getQueueManager().getLeafQueues().size());
    assertNotNull(scheduler.getSchedulerApplications().get(appAttemptId3.getApplicationId()));
    attempAddedEvent=new AppAttemptAddedSchedulerEvent(appAttemptId3,false);
    scheduler.handle(attempAddedEvent);
    assertEquals(1,scheduler.getQueueManager().getLeafQueue("B.C",true).getNumRunnableApps());
    assertNotNull(scheduler.getSchedulerApp(appAttemptId3));
    ApplicationAttemptId appAttemptId4=createAppAttemptId(4,1);
    AppAddedSchedulerEvent appAddedEvent4=new AppAddedSchedulerEvent(appAttemptId4.getApplicationId(),"A\u00a0","user1");
    scheduler.handle(appAddedEvent4);
    assertEquals(3,scheduler.getQueueManager().getLeafQueues().size());
    assertNull(scheduler.getSchedulerApplications().get(appAttemptId4.getApplicationId()));
    assertNull(scheduler.getSchedulerApp(appAttemptId4));
  }
  @Test public void testEmptyQueueNameInConfigFile() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"\">");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    try {
      scheduler.init(conf);
      Assert.fail("scheduler init should fail because" + " empty queue name.");
    }
 catch (    Exception e) {
      Assert.assertTrue(e.getMessage().contains("Failed to initialize FairScheduler"));
    }
  }
  @Test public void testUserAsDefaultQueueWithLeadingTrailingSpaceUserName() throws Exception {
    conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"true");
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    ApplicationAttemptId appAttemptId=createAppAttemptId(1,1);
    createApplicationWithAMResource(appAttemptId,"default","  user1",null);
    assertEquals(1,scheduler.getQueueManager().getLeafQueue("user1",true).getNumRunnableApps());
    assertEquals(0,scheduler.getQueueManager().getLeafQueue("default",true).getNumRunnableApps());
    assertEquals("root.user1",resourceManager.getRMContext().getRMApps().get(appAttemptId.getApplicationId()).getQueue());
    ApplicationAttemptId attId2=createAppAttemptId(2,1);
    createApplicationWithAMResource(attId2,"default","user1  ",null);
    assertEquals(2,scheduler.getQueueManager().getLeafQueue("user1",true).getNumRunnableApps());
    assertEquals(0,scheduler.getQueueManager().getLeafQueue("default",true).getNumRunnableApps());
    assertEquals("root.user1",resourceManager.getRMContext().getRMApps().get(attId2.getApplicationId()).getQueue());
    ApplicationAttemptId attId3=createAppAttemptId(3,1);
    createApplicationWithAMResource(attId3,"default","user1",null);
    assertEquals(3,scheduler.getQueueManager().getLeafQueue("user1",true).getNumRunnableApps());
    assertEquals(0,scheduler.getQueueManager().getLeafQueue("default",true).getNumRunnableApps());
    assertEquals("root.user1",resourceManager.getRMContext().getRMApps().get(attId3.getApplicationId()).getQueue());
  }
  @Test public void testRemovedNodeDecomissioningNode() throws Exception {
    NodeManager nm=registerNode("host_decom",1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(8 * GB,4));
    RMNode node=resourceManager.getRMContext().getRMNodes().get(nm.getNodeId());
    NodeUpdateSchedulerEvent nodeUpdate=new NodeUpdateSchedulerEvent(node);
    resourceManager.getResourceScheduler().handle(nodeUpdate);
    ((FairScheduler)resourceManager.getResourceScheduler()).getNodeTracker().removeNode(nm.getNodeId());
    RMNode spyNode=Mockito.spy(resourceManager.getRMContext().getRMNodes().get(nm.getNodeId()));
    when(spyNode.getState()).thenReturn(NodeState.DECOMMISSIONING);
    resourceManager.getResourceScheduler().handle(new NodeUpdateSchedulerEvent(spyNode));
  }
  @Test public void testResourceUpdateDecommissioningNode() throws Exception {
    RMContext spyContext=Mockito.spy(resourceManager.getRMContext());
    Dispatcher mockDispatcher=mock(AsyncDispatcher.class);
    when(mockDispatcher.getEventHandler()).thenReturn(new EventHandler(){
      @Override public void handle(      Event event){
        if (event instanceof RMNodeResourceUpdateEvent) {
          RMNodeResourceUpdateEvent resourceEvent=(RMNodeResourceUpdateEvent)event;
          resourceManager.getResourceScheduler().getSchedulerNode(resourceEvent.getNodeId()).updateTotalResource(resourceEvent.getResourceOption().getResource());
        }
      }
    }
);
    Mockito.doReturn(mockDispatcher).when(spyContext).getDispatcher();
    ((FairScheduler)resourceManager.getResourceScheduler()).setRMContext(spyContext);
    ((AsyncDispatcher)mockDispatcher).start();
    String host_0="host_0";
    NodeManager nm_0=registerNode(host_0,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(8 * GB,4));
    RMNode node=resourceManager.getRMContext().getRMNodes().get(nm_0.getNodeId());
    NodeUpdateSchedulerEvent nodeUpdate=new NodeUpdateSchedulerEvent(node);
    resourceManager.getResourceScheduler().handle(nodeUpdate);
    RMNode spyNode=Mockito.spy(resourceManager.getRMContext().getRMNodes().get(nm_0.getNodeId()));
    when(spyNode.getState()).thenReturn(NodeState.DECOMMISSIONING);
    resourceManager.getResourceScheduler().handle(new NodeUpdateSchedulerEvent(spyNode));
    Resource usedResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getAllocatedResource();
    Assert.assertEquals(usedResource.getMemorySize(),0);
    Assert.assertEquals(usedResource.getVirtualCores(),0);
    Resource totalResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getTotalResource();
    Assert.assertEquals(totalResource.getMemorySize(),0 * GB);
    Assert.assertEquals(totalResource.getVirtualCores(),0);
    Resource availableResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getUnallocatedResource();
    Assert.assertEquals(availableResource.getMemorySize(),0);
    Assert.assertEquals(availableResource.getVirtualCores(),0);
  }
  private NodeManager registerNode(  String hostName,  int containerManagerPort,  int httpPort,  String rackName,  Resource capability) throws IOException, YarnException {
    NodeManager nm=new NodeManager(hostName,containerManagerPort,httpPort,rackName,capability,resourceManager);
    if (resourceManager instanceof MockRM) {
      ((MockRM)resourceManager).drainEvents();
    }
    NodeAddedSchedulerEvent nodeAddEvent1=new NodeAddedSchedulerEvent(resourceManager.getRMContext().getRMNodes().get(nm.getNodeId()));
    resourceManager.getResourceScheduler().handle(nodeAddEvent1);
    return nm;
  }
  @Test(timeout=120000) public void testContainerAllocationWithContainerIdLeap() throws Exception {
    conf.setFloat(FairSchedulerConfiguration.RESERVABLE_NODES,0.50f);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072,10),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(3072,10),1,"127.0.0.2");
    NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
    scheduler.handle(nodeEvent2);
    ApplicationAttemptId app1=createSchedulingRequest(2048,"queue1","user1",2);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    ApplicationAttemptId app2=createSchedulingRequest(2048,"queue1","user1",1);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node1));
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    assertEquals(4096,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    RMContainer reservedContainer1=scheduler.getSchedulerNode(node1.getNodeID()).getReservedContainer();
    assertNotEquals(reservedContainer1,null);
    RMContainer reservedContainer2=scheduler.getSchedulerNode(node2.getNodeID()).getReservedContainer();
    assertEquals(reservedContainer2,null);
    for (int i=0; i < 10; i++) {
      scheduler.handle(new NodeUpdateSchedulerEvent(node1));
      scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    }
    scheduler.handle(new AppAttemptRemovedSchedulerEvent(app1,RMAppAttemptState.KILLED,false));
    assertEquals(0,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
    scheduler.handle(new NodeUpdateSchedulerEvent(node2));
    assertEquals(scheduler.getSchedulerApp(app2).getLiveContainers().size(),1);
    long maxId=0;
    for (    RMContainer container : scheduler.getSchedulerApp(app2).getLiveContainers()) {
      assertTrue(container.getContainer().getNodeId().equals(node2.getNodeID()));
      if (container.getContainerId().getContainerId() > maxId) {
        maxId=container.getContainerId().getContainerId();
      }
    }
    long reservedId=reservedContainer1.getContainerId().getContainerId();
    assertEquals(reservedId + 1,maxId);
  }
  @Test(timeout=120000) public void testRefreshQueuesWhenRMHA() throws Exception {
    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
    conf.setBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,false);
    conf.setBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,false);
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    HAServiceProtocol.StateChangeRequestInfo requestInfo=new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
    MockRM rm1=new MockRM(conf,null);
    rm1.init(conf);
    rm1.start();
    rm1.getAdminService().transitionToStandby(requestInfo);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"test_queue\">");
    out.println("  <maxRunningApps>3</maxRunningApps>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
    MockRM rm2=new MockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm2.getRMStateStore();
    rm2.start();
    MockNM nm=new MockNM("127.0.0.1:1234",15120,rm2.getResourceTrackerService());
    nm.registerNode();
    rm2.getAdminService().transitionToActive(requestInfo);
    RMApp app=rm2.submitApp(200,"test_app","user",null,"test_queue");
    RMAppAttempt attempt0=app.getCurrentAppAttempt();
    nm.nodeHeartbeat(true);
    MockAM am0=rm2.sendAMLaunched(attempt0.getAppAttemptId());
    am0.registerAppAttempt();
    assertEquals("root.test_queue",app.getQueue());
    ((RMContextImpl)rm1.getRMContext()).setStateStore(memStore);
    rm1.getAdminService().transitionToActive(requestInfo);
    rm1.drainEvents();
    assertEquals(1,rm1.getRMContext().getRMApps().size());
    RMApp recoveredApp=rm1.getRMContext().getRMApps().values().iterator().next();
    assertEquals("root.test_queue",recoveredApp.getQueue());
    rm1.stop();
    rm2.stop();
  }
  @Test public void testReservationMetrics() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    QueueMetrics metrics=scheduler.getRootQueueMetrics();
    RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4096,4),1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent);
    ApplicationAttemptId appAttemptId=createAppAttemptId(1,1);
    createApplicationWithAMResource(appAttemptId,"default","user1",null);
    NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
    scheduler.update();
    scheduler.handle(updateEvent);
    createSchedulingRequestExistingApplication(1024,1,1,appAttemptId);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(0,metrics.getReservedContainers());
    assertEquals(0,metrics.getReservedMB());
    assertEquals(0,metrics.getReservedVirtualCores());
    createSchedulingRequestExistingApplication(4096,4,1,appAttemptId);
    scheduler.update();
    scheduler.handle(updateEvent);
    assertEquals(1,metrics.getReservedContainers());
    assertEquals(4096,metrics.getReservedMB());
    assertEquals(4,metrics.getReservedVirtualCores());
    AppAttemptRemovedSchedulerEvent attRemoveEvent=new AppAttemptRemovedSchedulerEvent(appAttemptId,RMAppAttemptState.KILLED,false);
    scheduler.handle(attRemoveEvent);
    assertEquals(0,metrics.getReservedContainers());
    assertEquals(0,metrics.getReservedMB());
    assertEquals(0,metrics.getReservedVirtualCores());
  }
  @Test public void testUpdateDemand() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    Resource maxResource=Resources.createResource(1024 * 8);
    ConfigurableResource maxResourceConf=new ConfigurableResource(maxResource);
    FSAppAttempt app1=mock(FSAppAttempt.class);
    Mockito.when(app1.getDemand()).thenReturn(maxResource);
    Mockito.when(app1.getResourceUsage()).thenReturn(Resources.none());
    FSAppAttempt app2=mock(FSAppAttempt.class);
    Mockito.when(app2.getDemand()).thenReturn(maxResource);
    Mockito.when(app2.getResourceUsage()).thenReturn(Resources.none());
    QueueManager queueManager=scheduler.getQueueManager();
    FSParentQueue queue1=queueManager.getParentQueue("queue1",true);
    FSLeafQueue aQueue=new FSLeafQueue("root.queue1.a",scheduler,queue1);
    aQueue.setMaxShare(maxResourceConf);
    aQueue.addApp(app1,true);
    FSLeafQueue bQueue=new FSLeafQueue("root.queue1.b",scheduler,queue1);
    bQueue.setMaxShare(maxResourceConf);
    bQueue.addApp(app2,true);
    queue1.setMaxShare(maxResourceConf);
    queue1.addChildQueue(aQueue);
    queue1.addChildQueue(bQueue);
    queue1.updateDemand();
    assertTrue("Demand is greater than max allowed ",Resources.equals(queue1.getDemand(),maxResource));
    assertTrue("Demand of child queue not updated ",Resources.equals(aQueue.getDemand(),maxResource) && Resources.equals(bQueue.getDemand(),maxResource));
  }
  @Test public void testDumpState() throws IOException {
    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
    PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"parent\">");
    out.println("  <queue name=\"child1\">");
    out.println("    <weight>1</weight>");
    out.println("  </queue>");
    out.println("</queue>");
    out.println("</allocations>");
    out.close();
    ControlledClock clock=new ControlledClock();
    scheduler.setClock(clock);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    FSLeafQueue child1=scheduler.getQueueManager().getLeafQueue("parent.child1",false);
    Resource resource=Resource.newInstance(4 * GB,4);
    child1.setMaxShare(new ConfigurableResource(resource));
    FSAppAttempt app=mock(FSAppAttempt.class);
    Mockito.when(app.getDemand()).thenReturn(resource);
    Mockito.when(app.getResourceUsage()).thenReturn(resource);
    child1.addApp(app,true);
    child1.updateDemand();
    String childQueueString="{Name: root.parent.child1," + " Weight: 1.0," + " Policy: fair,"+ " FairShare: <memory:0, vCores:0>,"+ " SteadyFairShare: <memory:0, vCores:0>,"+ " MaxShare: <memory:4096, vCores:4>,"+ " MinShare: <memory:0, vCores:0>,"+ " ResourceUsage: <memory:4096, vCores:4>,"+ " Demand: <memory:4096, vCores:4>,"+ " Runnable: 1,"+ " NumPendingApps: 0,"+ " NonRunnable: 0,"+ " MaxAMShare: 0.5,"+ " MaxAMResource: <memory:0, vCores:0>,"+ " AMResourceUsage: <memory:0, vCores:0>,"+ " LastTimeAtMinShare: " + clock.getTime() + "}";
    assertEquals("Unexpected state dump string",childQueueString,child1.dumpState());
    FSParentQueue parent=scheduler.getQueueManager().getParentQueue("parent",false);
    parent.setMaxShare(new ConfigurableResource(resource));
    parent.updateDemand();
    String parentQueueString="{Name: root.parent," + " Weight: 1.0," + " Policy: fair,"+ " FairShare: <memory:0, vCores:0>,"+ " SteadyFairShare: <memory:0, vCores:0>,"+ " MaxShare: <memory:4096, vCores:4>,"+ " MinShare: <memory:0, vCores:0>,"+ " ResourceUsage: <memory:4096, vCores:4>,"+ " Demand: <memory:4096, vCores:4>,"+ " MaxAMShare: 0.5,"+ " Runnable: 0}";
    assertEquals("Unexpected state dump string",parentQueueString + ", " + childQueueString,parent.dumpState());
  }
  @Test public void testCompletedContainerOnRemovedNode() throws IOException {
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,resourceManager.getRMContext());
    RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(2048),2,"127.0.0.2");
    scheduler.handle(new NodeAddedSchedulerEvent(node));
    ApplicationAttemptId appAttemptId=createAppAttemptId(1,1);
    createMockRMApp(appAttemptId);
    scheduler.addApplication(appAttemptId.getApplicationId(),"root.queue1","user1",false);
    scheduler.addApplicationAttempt(appAttemptId,false,false);
    List<ResourceRequest> ask1=new ArrayList<>();
    ResourceRequest request1=createResourceRequest(1024,node.getHostName(),1,1,true);
    ask1.add(request1);
    ResourceRequest request2=createResourceRequest(1024,node.getRackName(),1,1,false);
    ask1.add(request2);
    ResourceRequest request3=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
    ask1.add(request3);
    scheduler.allocate(appAttemptId,ask1,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
    scheduler.update();
    scheduler.handle(new NodeUpdateSchedulerEvent(node));
    Collection<RMContainer> clist=scheduler.getSchedulerApp(appAttemptId).getLiveContainers();
    Assert.assertEquals(1,clist.size());
    RMContainer rmc=clist.iterator().next();
    NodeId containerNodeID=rmc.getAllocatedNode();
    assertEquals(node.getNodeID(),containerNodeID);
    scheduler.handle(new NodeRemovedSchedulerEvent(node));
    scheduler.completedContainer(rmc,SchedulerUtils.createAbnormalContainerStatus(rmc.getContainerId(),SchedulerUtils.COMPLETED_APPLICATION),RMContainerEventType.EXPIRE);
  }
}
