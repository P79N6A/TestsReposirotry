private final static class MockSchedulerForTimelineCollector implements ApplicationMasterProtocol {
  private CollectorInfo collectorInfo;
  private MockSchedulerForTimelineCollector(  CollectorInfo info){
    this.collectorInfo=info;
  }
  private void updateCollectorInfo(  CollectorInfo info){
    collectorInfo=info;
  }
  @Override public RegisterApplicationMasterResponse registerApplicationMaster(  RegisterApplicationMasterRequest request) throws YarnException, IOException {
    return Records.newRecord(RegisterApplicationMasterResponse.class);
  }
  @Override public FinishApplicationMasterResponse finishApplicationMaster(  FinishApplicationMasterRequest request) throws YarnException, IOException {
    return FinishApplicationMasterResponse.newInstance(false);
  }
  @Override public AllocateResponse allocate(  AllocateRequest request) throws YarnException, IOException {
    AllocateResponse response=AllocateResponse.newInstance(request.getResponseId(),Collections.<ContainerStatus>emptyList(),Collections.<Container>emptyList(),Collections.<NodeReport>emptyList(),Resource.newInstance(512000,1024),null,10,null,Collections.<NMToken>emptyList());
    response.setCollectorInfo(collectorInfo);
    return response;
  }
}
