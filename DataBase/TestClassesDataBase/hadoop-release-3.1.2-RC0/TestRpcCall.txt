/** 
 * Tests for  {@link RpcCall}
 */
public class TestRpcCall {
  @Test public void testConstructor(){
    Credentials credential=new CredentialsNone();
    Verifier verifier=new VerifierNone();
    int rpcVersion=RpcCall.RPC_VERSION;
    int program=2;
    int version=3;
    int procedure=4;
    RpcCall call=new RpcCall(0,RpcMessage.Type.RPC_CALL,rpcVersion,program,version,procedure,credential,verifier);
    assertEquals(0,call.getXid());
    assertEquals(RpcMessage.Type.RPC_CALL,call.getMessageType());
    assertEquals(rpcVersion,call.getRpcVersion());
    assertEquals(program,call.getProgram());
    assertEquals(version,call.getVersion());
    assertEquals(procedure,call.getProcedure());
    assertEquals(credential,call.getCredential());
    assertEquals(verifier,call.getVerifier());
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidRpcVersion(){
    int invalidRpcVersion=3;
    new RpcCall(0,RpcMessage.Type.RPC_CALL,invalidRpcVersion,2,3,4,null,null);
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidRpcMessageType(){
    RpcMessage.Type invalidMessageType=RpcMessage.Type.RPC_REPLY;
    new RpcCall(0,invalidMessageType,RpcCall.RPC_VERSION,2,3,4,null,null);
  }
}
