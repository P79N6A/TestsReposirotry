public class TestAltKerberosAuthenticationHandler extends TestKerberosAuthenticationHandler {
  @Override protected KerberosAuthenticationHandler getNewAuthenticationHandler(){
    return new AltKerberosAuthenticationHandler(){
      @Override public AuthenticationToken alternateAuthenticate(      HttpServletRequest request,      HttpServletResponse response) throws IOException, AuthenticationException {
        return new AuthenticationToken("A","B",getType());
      }
    }
;
  }
  @Override protected String getExpectedType(){
    return AltKerberosAuthenticationHandler.TYPE;
  }
  @Test(timeout=60000) public void testAlternateAuthenticationAsBrowser() throws Exception {
    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
    HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
    Mockito.when(request.getHeader("User-Agent")).thenReturn("Some Browser");
    AuthenticationToken token=handler.authenticate(request,response);
    Assert.assertEquals("A",token.getUserName());
    Assert.assertEquals("B",token.getName());
    Assert.assertEquals(getExpectedType(),token.getType());
  }
  @Test(timeout=60000) public void testNonDefaultNonBrowserUserAgentAsBrowser() throws Exception {
    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
    HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
    if (handler != null) {
      handler.destroy();
      handler=null;
    }
    handler=getNewAuthenticationHandler();
    Properties props=getDefaultProperties();
    props.setProperty("alt-kerberos.non-browser.user-agents","foo, bar");
    try {
      handler.init(props);
    }
 catch (    Exception ex) {
      handler=null;
      throw ex;
    }
    Mockito.when(request.getHeader("User-Agent")).thenReturn("blah");
    AuthenticationToken token=handler.authenticate(request,response);
    Assert.assertEquals("A",token.getUserName());
    Assert.assertEquals("B",token.getName());
    Assert.assertEquals(getExpectedType(),token.getType());
  }
  @Test(timeout=60000) public void testNonDefaultNonBrowserUserAgentAsNonBrowser() throws Exception {
    if (handler != null) {
      handler.destroy();
      handler=null;
    }
    handler=getNewAuthenticationHandler();
    Properties props=getDefaultProperties();
    props.setProperty("alt-kerberos.non-browser.user-agents","foo, bar");
    try {
      handler.init(props);
    }
 catch (    Exception ex) {
      handler=null;
      throw ex;
    }
    testRequestWithoutAuthorization();
    testRequestWithInvalidAuthorization();
    testRequestWithAuthorization();
    testRequestWithInvalidKerberosAuthorization();
  }
}
