/** 
 * Unit tests for BlockPlacementStatusWithUpgradeDomain class.
 */
public class TestBlockPlacementStatusWithUpgradeDomain {
  private Set<String> upgradeDomains;
  private BlockPlacementStatusDefault bpsd=mock(BlockPlacementStatusDefault.class);
  @Before public void setup(){
    upgradeDomains=new HashSet<String>();
    upgradeDomains.add("1");
    upgradeDomains.add("2");
    upgradeDomains.add("3");
    when(bpsd.isPlacementPolicySatisfied()).thenReturn(true);
  }
  @Test public void testIsPolicySatisfiedParentFalse(){
    when(bpsd.isPlacementPolicySatisfied()).thenReturn(false);
    BlockPlacementStatusWithUpgradeDomain bps=new BlockPlacementStatusWithUpgradeDomain(bpsd,upgradeDomains,3,3);
    assertFalse(bps.isPlacementPolicySatisfied());
  }
  @Test public void testIsPolicySatisfiedAllEqual(){
    BlockPlacementStatusWithUpgradeDomain bps=new BlockPlacementStatusWithUpgradeDomain(bpsd,upgradeDomains,3,3);
    assertTrue(bps.isPlacementPolicySatisfied());
  }
  @Test public void testIsPolicySatisifedSmallDomains(){
    BlockPlacementStatusWithUpgradeDomain bps=new BlockPlacementStatusWithUpgradeDomain(bpsd,upgradeDomains,4,3);
    assertTrue(bps.isPlacementPolicySatisfied());
    bps=new BlockPlacementStatusWithUpgradeDomain(bpsd,upgradeDomains,4,2);
    assertTrue(bps.isPlacementPolicySatisfied());
    bps=new BlockPlacementStatusWithUpgradeDomain(bpsd,upgradeDomains,4,4);
    assertFalse(bps.isPlacementPolicySatisfied());
  }
}
