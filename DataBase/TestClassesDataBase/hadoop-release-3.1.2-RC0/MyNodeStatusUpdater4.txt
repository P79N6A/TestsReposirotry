private class MyNodeStatusUpdater4 extends NodeStatusUpdaterImpl {
  private final long rmStartIntervalMS;
  private final boolean rmNeverStart;
  public ResourceTracker resourceTracker;
  public MyNodeStatusUpdater4(  Context context,  Dispatcher dispatcher,  NodeHealthCheckerService healthChecker,  NodeManagerMetrics metrics,  long rmStartIntervalMS,  boolean rmNeverStart){
    super(context,dispatcher,healthChecker,metrics);
    this.rmStartIntervalMS=rmStartIntervalMS;
    this.rmNeverStart=rmNeverStart;
  }
  @Override protected void serviceStart() throws Exception {
    super.serviceStart();
  }
  @Override protected ResourceTracker getRMClient() throws IOException {
    RetryPolicy retryPolicy=RMProxy.createRetryPolicy(conf,HAUtil.isHAEnabled(conf));
    resourceTracker=(ResourceTracker)RetryProxy.create(ResourceTracker.class,new MyResourceTracker6(rmStartIntervalMS,rmNeverStart),retryPolicy);
    return resourceTracker;
  }
  private boolean isTriggered(){
    return triggered;
  }
  @Override protected void stopRMProxy(){
    return;
  }
}
