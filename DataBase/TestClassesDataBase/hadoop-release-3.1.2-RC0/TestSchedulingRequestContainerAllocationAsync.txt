public class TestSchedulingRequestContainerAllocationAsync {
  private final int GB=1024;
  private YarnConfiguration conf;
  RMNodeLabelsManager mgr;
  @Before public void setUp() throws Exception {
    conf=new YarnConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    mgr=new NullRMNodeLabelsManager();
    mgr.init(conf);
  }
  private void testIntraAppAntiAffinityAsync(  int numThreads) throws Exception {
    Configuration csConf=TestUtils.getConfigurationWithMultipleQueues(new Configuration());
    csConf.setInt(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_MAXIMUM_THREAD,numThreads);
    csConf.setInt(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_PREFIX + ".scheduling-interval-ms",0);
    csConf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER,YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);
    MockRM rm1=new MockRM(csConf){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    int nNMs=200;
    MockNM[] nms=new MockNM[nNMs];
    RMNode[] rmNodes=new RMNode[nNMs];
    for (int i=0; i < nNMs; i++) {
      nms[i]=rm1.registerNode("127.0.0." + i + ":1234",10 * GB);
      rmNodes[i]=rm1.getRMContext().getRMNodes().get(nms[i].getNodeId());
    }
    RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"c");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nms[0]);
    am1.allocateIntraAppAntiAffinity(ResourceSizing.newInstance(1000,Resource.newInstance(1024,1)),Priority.newInstance(1),1L,ImmutableSet.of("mapper"),"mapper");
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    for (int i=0; i < 3; i++) {
      for (int j=0; j < nNMs; j++) {
        cs.handle(new NodeUpdateSchedulerEvent(rmNodes[j]));
      }
    }
    FiCaSchedulerApp schedulerApp=cs.getApplicationAttempt(am1.getApplicationAttemptId());
    Assert.assertEquals(nNMs + 1,schedulerApp.getLiveContainers().size());
    rm1.close();
  }
  @Test(timeout=300000) public void testSingleThreadAsyncContainerAllocation() throws Exception {
    testIntraAppAntiAffinityAsync(1);
  }
  @Test(timeout=300000) public void testTwoThreadsAsyncContainerAllocation() throws Exception {
    testIntraAppAntiAffinityAsync(2);
  }
  @Test(timeout=300000) public void testThreeThreadsAsyncContainerAllocation() throws Exception {
    testIntraAppAntiAffinityAsync(3);
  }
  @Test(timeout=300000) public void testFourThreadsAsyncContainerAllocation() throws Exception {
    testIntraAppAntiAffinityAsync(4);
  }
  @Test(timeout=300000) public void testFiveThreadsAsyncContainerAllocation() throws Exception {
    testIntraAppAntiAffinityAsync(5);
  }
}
