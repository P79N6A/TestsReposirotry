/** 
 * Verify ACL through ViewFs functionality.
 */
public class TestViewFsWithAcls {
  private static MiniDFSCluster cluster;
  private static Configuration clusterConf=new Configuration();
  private static FileContext fc, fc2;
  private FileContext fcView, fcTarget, fcTarget2;
  private Configuration fsViewConf;
  private Path targetTestRoot, targetTestRoot2, mountOnNn1, mountOnNn2;
  private FileContextTestHelper fileContextTestHelper=new FileContextTestHelper("/tmp/TestViewFsWithAcls");
  @BeforeClass public static void clusterSetupAtBeginning() throws IOException {
    clusterConf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,true);
    cluster=new MiniDFSCluster.Builder(clusterConf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(2)).numDataNodes(2).build();
    cluster.waitClusterUp();
    fc=FileContext.getFileContext(cluster.getURI(0),clusterConf);
    fc2=FileContext.getFileContext(cluster.getURI(1),clusterConf);
  }
  @AfterClass public static void ClusterShutdownAtEnd() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Before public void setUp() throws Exception {
    fcTarget=fc;
    fcTarget2=fc2;
    targetTestRoot=fileContextTestHelper.getAbsoluteTestRootPath(fc);
    targetTestRoot2=fileContextTestHelper.getAbsoluteTestRootPath(fc2);
    fcTarget.delete(targetTestRoot,true);
    fcTarget2.delete(targetTestRoot2,true);
    fcTarget.mkdir(targetTestRoot,new FsPermission((short)0750),true);
    fcTarget2.mkdir(targetTestRoot2,new FsPermission((short)0750),true);
    fsViewConf=ViewFileSystemTestSetup.createConfig();
    setupMountPoints();
    fcView=FileContext.getFileContext(FsConstants.VIEWFS_URI,fsViewConf);
  }
  private void setupMountPoints(){
    mountOnNn1=new Path("/mountOnNn1");
    mountOnNn2=new Path("/mountOnNn2");
    ConfigUtil.addLink(fsViewConf,mountOnNn1.toString(),targetTestRoot.toUri());
    ConfigUtil.addLink(fsViewConf,mountOnNn2.toString(),targetTestRoot2.toUri());
  }
  @After public void tearDown() throws Exception {
    fcTarget.delete(fileContextTestHelper.getTestRootPath(fcTarget),true);
    fcTarget2.delete(fileContextTestHelper.getTestRootPath(fcTarget2),true);
  }
  /** 
 * Verify a ViewFs wrapped over multiple federated NameNodes will dispatch the ACL operations to the correct NameNode.
 */
  @Test public void testAclOnMountEntry() throws Exception {
    List<AclEntry> aclSpec=Lists.newArrayList(aclEntry(ACCESS,USER,READ_WRITE),aclEntry(ACCESS,USER,"foo",READ),aclEntry(ACCESS,GROUP,READ),aclEntry(ACCESS,OTHER,NONE));
    fcView.setAcl(mountOnNn1,aclSpec);
    AclEntry[] expected=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ),aclEntry(ACCESS,GROUP,READ)};
    assertArrayEquals(expected,aclEntryArray(fcView.getAclStatus(mountOnNn1)));
    assertArrayEquals(expected,aclEntryArray(fc.getAclStatus(targetTestRoot)));
    aclSpec=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",READ));
    fcView.modifyAclEntries(mountOnNn1,aclSpec);
    expected=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ),aclEntry(ACCESS,GROUP,READ),aclEntry(DEFAULT,USER,READ_WRITE),aclEntry(DEFAULT,USER,"foo",READ),aclEntry(DEFAULT,GROUP,READ),aclEntry(DEFAULT,MASK,READ),aclEntry(DEFAULT,OTHER,NONE)};
    assertArrayEquals(expected,aclEntryArray(fcView.getAclStatus(mountOnNn1)));
    fcView.removeDefaultAcl(mountOnNn1);
    expected=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ),aclEntry(ACCESS,GROUP,READ)};
    assertArrayEquals(expected,aclEntryArray(fcView.getAclStatus(mountOnNn1)));
    assertArrayEquals(expected,aclEntryArray(fc.getAclStatus(targetTestRoot)));
    assertEquals(0,fcView.getAclStatus(mountOnNn2).getEntries().size());
    assertEquals(0,fc2.getAclStatus(targetTestRoot2).getEntries().size());
    fcView.removeAcl(mountOnNn1);
    assertEquals(0,fcView.getAclStatus(mountOnNn1).getEntries().size());
    assertEquals(0,fc.getAclStatus(targetTestRoot).getEntries().size());
    aclSpec=Lists.newArrayList(aclEntry(ACCESS,USER,"bar",READ));
    fcView.modifyAclEntries(mountOnNn2,aclSpec);
    expected=new AclEntry[]{aclEntry(ACCESS,USER,"bar",READ),aclEntry(ACCESS,GROUP,READ_EXECUTE)};
    assertArrayEquals(expected,aclEntryArray(fcView.getAclStatus(mountOnNn2)));
    assertArrayEquals(expected,aclEntryArray(fc2.getAclStatus(targetTestRoot2)));
    fcView.removeAclEntries(mountOnNn2,Lists.newArrayList(aclEntry(ACCESS,USER,"bar",READ)));
    expected=new AclEntry[]{aclEntry(ACCESS,GROUP,READ_EXECUTE)};
    assertArrayEquals(expected,aclEntryArray(fc2.getAclStatus(targetTestRoot2)));
    fcView.removeAcl(mountOnNn2);
    assertEquals(0,fcView.getAclStatus(mountOnNn2).getEntries().size());
    assertEquals(0,fc2.getAclStatus(targetTestRoot2).getEntries().size());
  }
  private AclEntry[] aclEntryArray(  AclStatus aclStatus){
    return aclStatus.getEntries().toArray(new AclEntry[0]);
  }
}
