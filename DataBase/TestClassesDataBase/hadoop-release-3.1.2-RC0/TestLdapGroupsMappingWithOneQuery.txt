/** 
 * Test LdapGroupsMapping with one-query lookup enabled. Mockito is used to simulate the LDAP server response.
 */
@SuppressWarnings("unchecked") public class TestLdapGroupsMappingWithOneQuery extends TestLdapGroupsMappingBase {
  @Before public void setupMocks() throws NamingException {
    Attribute groupDN=mock(Attribute.class);
    NamingEnumeration<SearchResult> groupNames=getGroupNames();
    doReturn(groupNames).when(groupDN).getAll();
    String groupName1="CN=abc,DC=foo,DC=bar,DC=com";
    String groupName2="CN=xyz,DC=foo,DC=bar,DC=com";
    String groupName3="CN=sss,CN=foo,DC=bar,DC=com";
    doReturn(groupName1).doReturn(groupName2).doReturn(groupName3).when(groupNames).next();
    when(groupNames.hasMore()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
    when(getAttributes().get(eq("memberOf"))).thenReturn(groupDN);
  }
  @Test public void testGetGroups() throws NamingException {
    String[] testGroups=new String[]{"abc","xyz","sss"};
    doTestGetGroups(Arrays.asList(testGroups));
  }
  private void doTestGetGroups(  List<String> expectedGroups) throws NamingException {
    String ldapUrl="ldap://test";
    Configuration conf=getBaseConf(ldapUrl);
    conf.set(LdapGroupsMapping.MEMBEROF_ATTR_KEY,"memberOf");
    LdapGroupsMapping groupsMapping=getGroupsMapping();
    groupsMapping.setConf(conf);
    List<String> groups=groupsMapping.getGroups("some_user");
    Assert.assertEquals(expectedGroups,groups);
    verify(getContext(),times(1)).search(anyString(),anyString(),any(Object[].class),any(SearchControls.class));
  }
}
