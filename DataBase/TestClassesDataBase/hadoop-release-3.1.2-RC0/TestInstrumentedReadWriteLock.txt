/** 
 * A test class for InstrumentedReadLock and InstrumentedWriteLock.
 */
public class TestInstrumentedReadWriteLock {
  static final Logger LOG=LoggerFactory.getLogger(TestInstrumentedReadWriteLock.class);
  @Rule public TestName name=new TestName();
  /** 
 * Tests exclusive access of the write lock.
 * @throws Exception
 */
  @Test(timeout=10000) public void testWriteLock() throws Exception {
    String testname=name.getMethodName();
    final ThreadLocal<Boolean> locked=new ThreadLocal<Boolean>();
    locked.set(Boolean.FALSE);
    InstrumentedReadWriteLock readWriteLock=new InstrumentedReadWriteLock(true,testname,LOG,2000,300);
    final AutoCloseableLock writeLock=new AutoCloseableLock(readWriteLock.writeLock()){
      @Override public AutoCloseableLock acquire(){
        AutoCloseableLock lock=super.acquire();
        locked.set(Boolean.TRUE);
        return lock;
      }
      @Override public void release(){
        super.release();
        locked.set(Boolean.FALSE);
      }
    }
;
    final AutoCloseableLock readLock=new AutoCloseableLock(readWriteLock.readLock());
    try (AutoCloseableLock lock=writeLock.acquire()){
      Thread competingWriteThread=new Thread(){
        @Override public void run(){
          assertFalse(writeLock.tryLock());
        }
      }
;
      competingWriteThread.start();
      competingWriteThread.join();
      Thread competingReadThread=new Thread(){
        @Override public void run(){
          assertFalse(readLock.tryLock());
        }
      }
;
      competingReadThread.start();
      competingReadThread.join();
    }
     assertFalse(locked.get());
    locked.remove();
  }
  /** 
 * Tests the read lock.
 * @throws Exception
 */
  @Test(timeout=10000) public void testReadLock() throws Exception {
    String testname=name.getMethodName();
    InstrumentedReadWriteLock readWriteLock=new InstrumentedReadWriteLock(true,testname,LOG,2000,300);
    final AutoCloseableLock readLock=new AutoCloseableLock(readWriteLock.readLock());
    final AutoCloseableLock writeLock=new AutoCloseableLock(readWriteLock.writeLock());
    try (AutoCloseableLock lock=readLock.acquire()){
      Thread competingReadThread=new Thread(){
        @Override public void run(){
          assertTrue(readLock.tryLock());
          readLock.release();
        }
      }
;
      competingReadThread.start();
      competingReadThread.join();
      Thread competingWriteThread=new Thread(){
        @Override public void run(){
          assertFalse(writeLock.tryLock());
        }
      }
;
      competingWriteThread.start();
      competingWriteThread.join();
    }
   }
  /** 
 * Tests the warning when the read lock is held longer than threshold.
 * @throws Exception
 */
  @Test(timeout=10000) public void testReadLockLongHoldingReport() throws Exception {
    String testname=name.getMethodName();
    final AtomicLong time=new AtomicLong(0);
    Timer mclock=new Timer(){
      @Override public long monotonicNow(){
        return time.get();
      }
    }
;
    final AtomicLong wlogged=new AtomicLong(0);
    final AtomicLong wsuppresed=new AtomicLong(0);
    ReentrantReadWriteLock readWriteLock=new ReentrantReadWriteLock(true);
    InstrumentedReadLock readLock=new InstrumentedReadLock(testname,LOG,readWriteLock,2000,300,mclock){
      @Override protected void logWarning(      long lockHeldTime,      long suppressed){
        wlogged.incrementAndGet();
        wsuppresed.set(suppressed);
      }
    }
;
    readLock.lock();
    time.set(100);
    readLock.unlock();
    assertEquals(0,wlogged.get());
    assertEquals(0,wsuppresed.get());
    readLock.lock();
    time.set(500);
    readLock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    readLock.lock();
    time.set(900);
    readLock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    readLock.lock();
    time.set(3000);
    readLock.unlock();
    assertEquals(2,wlogged.get());
    assertEquals(1,wsuppresed.get());
  }
  /** 
 * Tests the warning when the write lock is held longer than threshold.
 * @throws Exception
 */
  @Test(timeout=10000) public void testWriteLockLongHoldingReport() throws Exception {
    String testname=name.getMethodName();
    final AtomicLong time=new AtomicLong(0);
    Timer mclock=new Timer(){
      @Override public long monotonicNow(){
        return time.get();
      }
    }
;
    final AtomicLong wlogged=new AtomicLong(0);
    final AtomicLong wsuppresed=new AtomicLong(0);
    ReentrantReadWriteLock readWriteLock=new ReentrantReadWriteLock(true);
    InstrumentedWriteLock writeLock=new InstrumentedWriteLock(testname,LOG,readWriteLock,2000,300,mclock){
      @Override protected void logWarning(      long lockHeldTime,      long suppressed){
        wlogged.incrementAndGet();
        wsuppresed.set(suppressed);
      }
    }
;
    writeLock.lock();
    time.set(100);
    writeLock.unlock();
    assertEquals(0,wlogged.get());
    assertEquals(0,wsuppresed.get());
    writeLock.lock();
    time.set(500);
    writeLock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    writeLock.lock();
    time.set(900);
    writeLock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    writeLock.lock();
    time.set(3000);
    writeLock.unlock();
    assertEquals(2,wlogged.get());
    assertEquals(1,wsuppresed.get());
  }
}
