class TestOutputFormat extends OutputFormat<IntWritable,IntWritable> implements Configurable {
  public static final String TEST_CONFIG_NAME="mapred.test.jobsubmission";
  private Configuration conf;
  @Override public void checkOutputSpecs(  JobContext context) throws IOException, InterruptedException {
    conf.setBoolean(TEST_CONFIG_NAME,true);
  }
  @Override public OutputCommitter getOutputCommitter(  TaskAttemptContext context) throws IOException, InterruptedException {
    return new OutputCommitter(){
      @Override public void abortTask(      TaskAttemptContext taskContext) throws IOException {
      }
      @Override public void commitTask(      TaskAttemptContext taskContext) throws IOException {
      }
      @Override public boolean needsTaskCommit(      TaskAttemptContext taskContext) throws IOException {
        return false;
      }
      @Override public void setupJob(      JobContext jobContext) throws IOException {
      }
      @Override public void setupTask(      TaskAttemptContext taskContext) throws IOException {
      }
    }
;
  }
  @Override public RecordWriter<IntWritable,IntWritable> getRecordWriter(  TaskAttemptContext context) throws IOException, InterruptedException {
    assertTrue(context.getConfiguration().getBoolean(TEST_CONFIG_NAME,false));
    return new RecordWriter<IntWritable,IntWritable>(){
      @Override public void close(      TaskAttemptContext context) throws IOException, InterruptedException {
      }
      @Override public void write(      IntWritable key,      IntWritable value) throws IOException, InterruptedException {
      }
    }
;
  }
  @Override public Configuration getConf(){
    return conf;
  }
  @Override public void setConf(  Configuration conf){
    this.conf=conf;
  }
}
