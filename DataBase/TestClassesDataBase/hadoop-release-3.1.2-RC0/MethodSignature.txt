private static class MethodSignature {
  private final String name;
  private final Type rval;
  private final Type[] param;
  MethodSignature(  Method m){
    name=m.getName();
    rval=m.getGenericReturnType();
    param=m.getParameterTypes();
  }
  @Override public int hashCode(){
    return name.hashCode();
  }
  /** 
 * Methods are equal iff they have the same name, return type, and params (non-generic).
 */
  @Override public boolean equals(  Object o){
    if (!(o instanceof MethodSignature)) {
      return false;
    }
    MethodSignature s=(MethodSignature)o;
    return name.equals(s.name) && rval.equals(s.rval) && Arrays.equals(param,s.param);
  }
  @Override public String toString(){
    StringBuilder sb=new StringBuilder();
    sb.append(rval).append(" ").append(name).append("(").append(Stream.of(param).map(Type::toString).collect(joining(","))).append(")");
    return sb.toString();
  }
}
