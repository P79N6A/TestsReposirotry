/** 
 * Allows us to control mover class for test purposes.
 */
public static class TestMover implements DiskBalancer.BlockMover {
  private AtomicBoolean shouldRun;
  private FsDatasetSpi dataset;
  private int runCount;
  private volatile boolean sleepInCopyBlocks;
  private long delay;
  public TestMover(  FsDatasetSpi dataset){
    this.dataset=dataset;
    this.shouldRun=new AtomicBoolean(false);
  }
  public void setSleep(){
    sleepInCopyBlocks=true;
  }
  public void clearSleep(){
    sleepInCopyBlocks=false;
  }
  public void setDelay(  long milliseconds){
    this.delay=milliseconds;
  }
  /** 
 * Copies blocks from a set of volumes.
 * @param pair - Source and Destination Volumes.
 * @param item - Number of bytes to move from volumes.
 */
  @Override public void copyBlocks(  DiskBalancer.VolumePair pair,  DiskBalancerWorkItem item){
    try {
      while (sleepInCopyBlocks) {
        if (!this.shouldRun()) {
          return;
        }
        Thread.sleep(10);
      }
      if (delay > 0) {
        Thread.sleep(delay);
      }
synchronized (this) {
        if (shouldRun()) {
          runCount++;
        }
      }
    }
 catch (    InterruptedException ex) {
      LOG.error(ex.toString());
    }
  }
  /** 
 * Sets copyblocks into runnable state.
 */
  @Override public void setRunnable(){
    this.shouldRun.set(true);
  }
  /** 
 * Signals copy block to exit.
 */
  @Override public void setExitFlag(){
    this.shouldRun.set(false);
  }
  /** 
 * Returns the shouldRun boolean flag.
 */
  public boolean shouldRun(){
    return this.shouldRun.get();
  }
  @Override public FsDatasetSpi getDataset(){
    return this.dataset;
  }
  /** 
 * Returns time when this plan started executing.
 * @return Start time in milliseconds.
 */
  @Override public long getStartTime(){
    return 0;
  }
  /** 
 * Number of seconds elapsed.
 * @return time in seconds
 */
  @Override public long getElapsedSeconds(){
    return 0;
  }
  public int getRunCount(){
synchronized (this) {
      LOG.info("Run count : " + runCount);
      return runCount;
    }
  }
}
