/** 
 * Dummy implementation of plain FailoverProxyProvider 
 */
public static class DummyLegacyFailoverProxyProvider<T> implements FailoverProxyProvider<T> {
  private Class<T> xface;
  private T proxy;
  public DummyLegacyFailoverProxyProvider(  Configuration conf,  URI uri,  Class<T> xface,  HAProxyFactory<T> proxyFactory){
    try {
      this.proxy=NameNodeProxies.createNonHAProxy(conf,DFSUtilClient.getNNAddress(uri),xface,UserGroupInformation.getCurrentUser(),false).getProxy();
      this.xface=xface;
    }
 catch (    IOException ioe) {
    }
  }
  @Override public Class<T> getInterface(){
    return xface;
  }
  @Override public ProxyInfo<T> getProxy(){
    return new ProxyInfo<T>(proxy,"dummy");
  }
  @Override public void performFailover(  T currentProxy){
  }
  @Override public void close() throws IOException {
  }
}
