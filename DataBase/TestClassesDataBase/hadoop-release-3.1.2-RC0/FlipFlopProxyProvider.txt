public static class FlipFlopProxyProvider<T> implements FailoverProxyProvider<T> {
  private Class<T> iface;
  private T currentlyActive;
  private T impl1;
  private T impl2;
  private int failoversOccurred=0;
  public FlipFlopProxyProvider(  Class<T> iface,  T activeImpl,  T standbyImpl){
    this.iface=iface;
    this.impl1=activeImpl;
    this.impl2=standbyImpl;
    currentlyActive=impl1;
  }
  @Override public ProxyInfo<T> getProxy(){
    return new ProxyInfo<T>(currentlyActive,currentlyActive.toString());
  }
  @Override public synchronized void performFailover(  Object currentProxy){
    currentlyActive=impl1 == currentProxy ? impl2 : impl1;
    failoversOccurred++;
  }
  @Override public Class<T> getInterface(){
    return iface;
  }
  @Override public void close() throws IOException {
  }
  public int getFailoversOccurred(){
    return failoversOccurred;
  }
}
