public class TestDelegationTokenFetcher {
  private static final Logger LOG=LoggerFactory.getLogger(TestDelegationTokenFetcher.class);
  private Configuration conf=new Configuration();
  @Rule public TemporaryFolder f=new TemporaryFolder();
  private static final String tokenFile="token";
  /** 
 * try to fetch token without http server with IOException
 */
  @Test(expected=IOException.class) public void testTokenFetchFail() throws Exception {
    WebHdfsFileSystem fs=mock(WebHdfsFileSystem.class);
    doThrow(new IOException()).when(fs).getDelegationToken(anyString());
    Path p=new Path(f.getRoot().getAbsolutePath(),tokenFile);
    DelegationTokenFetcher.saveDelegationToken(conf,fs,null,p);
  }
  /** 
 * Call fetch token using http server
 */
  @Test public void expectedTokenIsRetrievedFromHttp() throws Exception {
    final Token<DelegationTokenIdentifier> testToken=new Token<DelegationTokenIdentifier>("id".getBytes(),"pwd".getBytes(),FakeRenewer.KIND,new Text("127.0.0.1:1234"));
    WebHdfsFileSystem fs=mock(WebHdfsFileSystem.class);
    doReturn(testToken).when(fs).getDelegationToken(anyString());
    Path p=new Path(f.getRoot().getAbsolutePath(),tokenFile);
    DelegationTokenFetcher.saveDelegationToken(conf,fs,null,p);
    Credentials creds=Credentials.readTokenStorageFile(p,conf);
    Iterator<Token<?>> itr=creds.getAllTokens().iterator();
    assertTrue("token not exist error",itr.hasNext());
    Token<?> fetchedToken=itr.next();
    Assert.assertArrayEquals("token wrong identifier error",testToken.getIdentifier(),fetchedToken.getIdentifier());
    Assert.assertArrayEquals("token wrong password error",testToken.getPassword(),fetchedToken.getPassword());
    DelegationTokenFetcher.renewTokens(conf,p);
    Assert.assertEquals(testToken,FakeRenewer.getLastRenewed());
    DelegationTokenFetcher.cancelTokens(conf,p);
    Assert.assertEquals(testToken,FakeRenewer.getLastCanceled());
  }
  /** 
 * If token returned is null, saveDelegationToken should not throw nullPointerException
 */
  @Test public void testReturnedTokenIsNull() throws Exception {
    WebHdfsFileSystem fs=mock(WebHdfsFileSystem.class);
    doReturn(null).when(fs).getDelegationToken(anyString());
    Path p=new Path(f.getRoot().getAbsolutePath(),tokenFile);
    DelegationTokenFetcher.saveDelegationToken(conf,fs,null,p);
    Assert.assertFalse(p.getFileSystem(conf).exists(p));
  }
  @Test public void testDelegationTokenWithoutRenewerViaRPC() throws Exception {
    conf.setBoolean(DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
    try {
      cluster.waitActive();
      DistributedFileSystem fs=cluster.getFileSystem();
      LocalFileSystem localFileSystem=FileSystem.getLocal(conf);
      Path p=new Path(f.getRoot().getAbsolutePath(),tokenFile);
      p=localFileSystem.makeQualified(p);
      DelegationTokenFetcher.saveDelegationToken(conf,fs,null,p);
      Credentials creds=Credentials.readTokenStorageFile(p,conf);
      Iterator<Token<?>> itr=creds.getAllTokens().iterator();
      assertTrue("token not exist error",itr.hasNext());
      final Token token=itr.next();
      assertNotNull("Token should be there without renewer",token);
      String expectedNonVerbose="Token (HDFS_DELEGATION_TOKEN token 1 for " + System.getProperty("user.name") + " with renewer ) for";
      String resNonVerbose=DelegationTokenFetcher.printTokensToString(conf,p,false);
      assertTrue("The non verbose output is expected to start with \"" + expectedNonVerbose + "\"",resNonVerbose.startsWith(expectedNonVerbose));
      LOG.info(resNonVerbose);
      LOG.info(DelegationTokenFetcher.printTokensToString(conf,p,true));
      try {
        DelegationTokenFetcher.renewTokens(conf,p);
        fail("Should have failed to renew");
      }
 catch (      AccessControlException e) {
        GenericTestUtils.assertExceptionContains("tried to renew a token (" + token.decodeIdentifier() + ") without a renewer",e);
      }
    }
  finally {
      cluster.shutdown();
    }
  }
}
