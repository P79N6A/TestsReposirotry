/** 
 * A simple FileRegion iterator for tests.
 */
public static class TestFileRegionIterator implements Iterator<FileRegion> {
  private int numBlocks;
  private int currentCount;
  private String basePath;
  public TestFileRegionIterator(  String basePath,  int minID,  int numBlocks){
    this.currentCount=minID;
    this.numBlocks=numBlocks;
    this.basePath=basePath;
  }
  @Override public boolean hasNext(){
    return currentCount < numBlocks;
  }
  @Override public FileRegion next(){
    FileRegion region=null;
    if (hasNext()) {
      File newFile=new File(basePath,"file" + currentCount);
      if (!newFile.exists()) {
        try {
          LOG.info("Creating file for blkid " + currentCount);
          blkToPathMap.put((long)currentCount,newFile.getAbsolutePath());
          LOG.info("Block id " + currentCount + " corresponds to file "+ newFile.getAbsolutePath());
          newFile.createNewFile();
          Writer writer=new OutputStreamWriter(new FileOutputStream(newFile.getAbsolutePath()),"utf-8");
          for (int i=0; i < BLK_LEN / (Integer.SIZE / 8); i++) {
            writer.write(currentCount);
          }
          writer.flush();
          writer.close();
          spaceUsed+=BLK_LEN;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      region=new FileRegion(currentCount,new Path(newFile.toString()),0,BLK_LEN);
      currentCount++;
    }
    return region;
  }
  @Override public void remove(){
  }
  public void resetMinBlockId(  int minId){
    currentCount=minId;
  }
  public void resetBlockCount(  int numBlocks){
    this.numBlocks=numBlocks;
  }
}
