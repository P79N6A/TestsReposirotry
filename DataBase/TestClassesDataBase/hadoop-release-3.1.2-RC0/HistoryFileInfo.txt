/** 
 * A HistoryFileInfo implementation that takes forever to parse the associated job files. This mimics the behavior of parsing huge job files.
 */
class HistoryFileInfo extends HistoryFileManager.HistoryFileInfo {
  /** 
 * A signal that indicates scanning of the intermediate directory is done as HistoryFileManager is in the process of loading the HistoryFileInfo instance.
 */
  private final CountDownLatch scanningDoneSignal;
  HistoryFileInfo(  Path historyFile,  Path confFile,  Path summaryFile,  JobIndexInfo jobIndexInfo,  boolean isInDone,  CountDownLatch scanningDoneSignal){
    super(historyFile,confFile,summaryFile,jobIndexInfo,isInDone);
    this.scanningDoneSignal=scanningDoneSignal;
  }
  /** 
 * An test implementation that takes forever to load a job in order to mimic what happens when job files of large size are parsed in JHS. Before loading, we signal that scanning of the intermediate directory is finished.
 */
  @Override public synchronized Job loadJob() throws IOException {
    if (scanningDoneSignal != null) {
      scanningDoneSignal.countDown();
    }
    while (!Thread.currentThread().isInterrupted()) {
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
      }
    }
    return null;
  }
}
