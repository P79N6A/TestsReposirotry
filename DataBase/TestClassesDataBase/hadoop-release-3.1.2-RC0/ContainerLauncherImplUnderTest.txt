private static class ContainerLauncherImplUnderTest extends ContainerLauncherImpl {
  private ContainerManagementProtocol containerManager;
  public ContainerLauncherImplUnderTest(  AppContext context,  ContainerManagementProtocol containerManager){
    super(context);
    this.containerManager=containerManager;
  }
  @Override public ContainerManagementProtocolProxyData getCMProxy(  String containerMgrBindAddr,  ContainerId containerId) throws IOException {
    ContainerManagementProtocolProxyData protocolProxy=mock(ContainerManagementProtocolProxyData.class);
    when(protocolProxy.getContainerManagementProtocol()).thenReturn(containerManager);
    return protocolProxy;
  }
  public void waitForPoolToIdle() throws InterruptedException {
    Thread.sleep(100l);
    LOG.debug("POOL SIZE 1: " + this.eventQueue.size() + " POOL SIZE 2: "+ this.launcherPool.getQueue().size()+ " ACTIVE COUNT: "+ this.launcherPool.getActiveCount());
    while (!this.eventQueue.isEmpty() || !this.launcherPool.getQueue().isEmpty() || this.launcherPool.getActiveCount() > 0) {
      Thread.sleep(100l);
      LOG.debug("POOL SIZE 1: " + this.eventQueue.size() + " POOL SIZE 2: "+ this.launcherPool.getQueue().size()+ " ACTIVE COUNT: "+ this.launcherPool.getActiveCount());
    }
    LOG.debug("POOL SIZE 1: " + this.eventQueue.size() + " POOL SIZE 2: "+ this.launcherPool.getQueue().size()+ " ACTIVE COUNT: "+ this.launcherPool.getActiveCount());
  }
}
