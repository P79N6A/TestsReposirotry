/** 
 * Unit tests for using Job Token over RPC.  System properties required: -Djava.security.krb5.conf=.../hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-classes/krb5.conf  -Djava.net.preferIPv4Stack=true
 */
public class TestUmbilicalProtocolWithJobToken {
  private static final String ADDRESS="0.0.0.0";
  public static final Logger LOG=getLogger(TestUmbilicalProtocolWithJobToken.class);
  private static Configuration conf;
static {
    conf=new Configuration();
    conf.set(HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
  }
static {
    GenericTestUtils.setLogLevel(Client.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(Server.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(SaslRpcClient.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(SaslRpcServer.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(SaslInputStream.LOG,Level.TRACE);
  }
  @Test public void testJobTokenRpc() throws Exception {
    TaskUmbilicalProtocol mockTT=mock(TaskUmbilicalProtocol.class);
    doReturn(TaskUmbilicalProtocol.versionID).when(mockTT).getProtocolVersion(anyString(),anyLong());
    doReturn(ProtocolSignature.getProtocolSignature(mockTT,TaskUmbilicalProtocol.class.getName(),TaskUmbilicalProtocol.versionID,0)).when(mockTT).getProtocolSignature(anyString(),anyLong(),anyInt());
    JobTokenSecretManager sm=new JobTokenSecretManager();
    final Server server=new RPC.Builder(conf).setProtocol(TaskUmbilicalProtocol.class).setInstance(mockTT).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(sm).build();
    server.start();
    final UserGroupInformation current=UserGroupInformation.getCurrentUser();
    final InetSocketAddress addr=NetUtils.getConnectAddress(server);
    String jobId=current.getUserName();
    JobTokenIdentifier tokenId=new JobTokenIdentifier(new Text(jobId));
    Token<JobTokenIdentifier> token=new Token<JobTokenIdentifier>(tokenId,sm);
    sm.addTokenForJob(jobId,token);
    SecurityUtil.setTokenService(token,addr);
    LOG.info("Service address for token is " + token.getService());
    current.addToken(token);
    current.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        TaskUmbilicalProtocol proxy=null;
        try {
          proxy=(TaskUmbilicalProtocol)RPC.getProxy(TaskUmbilicalProtocol.class,TaskUmbilicalProtocol.versionID,addr,conf);
          proxy.statusUpdate(null,null);
        }
  finally {
          server.stop();
          if (proxy != null) {
            RPC.stopProxy(proxy);
          }
        }
        return null;
      }
    }
);
  }
}
