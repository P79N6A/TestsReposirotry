public class TestGpuDiscoverer {
  private String getTestParentFolder(){
    File f=new File("target/temp/" + TestGpuDiscoverer.class.getName());
    return f.getAbsolutePath();
  }
  private void touchFile(  File f) throws IOException {
    new FileOutputStream(f).close();
  }
  @Before public void before() throws IOException {
    String folder=getTestParentFolder();
    File f=new File(folder);
    FileUtils.deleteDirectory(f);
    f.mkdirs();
  }
  @Test public void testLinuxGpuResourceDiscoverPluginConfig() throws Exception {
    Assume.assumeTrue(Boolean.valueOf(System.getProperty("RunLinuxGpuResourceDiscoverPluginConfigTest")));
    Configuration conf=new Configuration(false);
    GpuDiscoverer plugin=new GpuDiscoverer();
    plugin.initialize(conf);
    Assert.assertEquals(GpuDiscoverer.DEFAULT_BINARY_NAME,plugin.getPathOfGpuBinary());
    Assert.assertNotNull(plugin.getEnvironmentToRunCommand().get("PATH"));
    Assert.assertTrue(plugin.getEnvironmentToRunCommand().get("PATH").contains("nvidia"));
    File fakeBinary=new File(getTestParentFolder(),GpuDiscoverer.DEFAULT_BINARY_NAME);
    touchFile(fakeBinary);
    conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC,getTestParentFolder());
    plugin=new GpuDiscoverer();
    plugin.initialize(conf);
    Assert.assertEquals(fakeBinary.getAbsolutePath(),plugin.getPathOfGpuBinary());
    Assert.assertNull(plugin.getEnvironmentToRunCommand().get("PATH"));
    fakeBinary.delete();
    plugin=new GpuDiscoverer();
    plugin.initialize(conf);
    Assert.assertEquals(GpuDiscoverer.DEFAULT_BINARY_NAME,plugin.getPathOfGpuBinary());
    Assert.assertTrue(plugin.getEnvironmentToRunCommand().get("PATH").contains("nvidia"));
  }
  @Test public void testGpuDiscover() throws YarnException {
    Assume.assumeTrue(Boolean.valueOf(System.getProperty("runGpuDiscoverUnitTest")));
    Configuration conf=new Configuration(false);
    GpuDiscoverer plugin=new GpuDiscoverer();
    plugin.initialize(conf);
    GpuDeviceInformation info=plugin.getGpuDeviceInformation();
    Assert.assertTrue(info.getGpus().size() > 0);
    Assert.assertEquals(plugin.getGpusUsableByYarn().size(),info.getGpus().size());
  }
  @Test public void getNumberOfUsableGpusFromConfig() throws YarnException {
    Configuration conf=new Configuration(false);
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:2,3");
    GpuDiscoverer plugin=new GpuDiscoverer();
    try {
      plugin.initialize(conf);
      plugin.getGpusUsableByYarn();
      Assert.fail("Illegal format, should fail.");
    }
 catch (    YarnException e) {
    }
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:2,3:4");
    plugin=new GpuDiscoverer();
    plugin.initialize(conf);
    List<GpuDevice> usableGpuDevices=plugin.getGpusUsableByYarn();
    Assert.assertEquals(4,usableGpuDevices.size());
    Assert.assertTrue(0 == usableGpuDevices.get(0).getIndex());
    Assert.assertTrue(1 == usableGpuDevices.get(1).getIndex());
    Assert.assertTrue(2 == usableGpuDevices.get(2).getIndex());
    Assert.assertTrue(3 == usableGpuDevices.get(3).getIndex());
    Assert.assertTrue(0 == usableGpuDevices.get(0).getMinorNumber());
    Assert.assertTrue(1 == usableGpuDevices.get(1).getMinorNumber());
    Assert.assertTrue(2 == usableGpuDevices.get(2).getMinorNumber());
    Assert.assertTrue(4 == usableGpuDevices.get(3).getMinorNumber());
  }
}
