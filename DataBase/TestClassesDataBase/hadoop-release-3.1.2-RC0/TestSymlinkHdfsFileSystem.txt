public class TestSymlinkHdfsFileSystem extends TestSymlinkHdfs {
  @BeforeClass public static void testSetup() throws Exception {
    wrapper=new FileSystemTestWrapper(dfs,"/tmp/TestSymlinkHdfsFileSystem");
  }
  @Override @Ignore("FileSystem adds missing authority in absolute URIs") @Test(timeout=10000) public void testCreateWithPartQualPathFails() throws IOException {
  }
  @Ignore("FileSystem#create creates parent directories," + " so dangling links to directories are created") @Override @Test(timeout=10000) public void testCreateFileViaDanglingLinkParent() throws IOException {
  }
  @Test(timeout=10000) public void testRecoverLease() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"link");
    wrapper.setWorkingDirectory(dir);
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    boolean closed=dfs.recoverLease(link);
    assertTrue("Expected recoverLease to return true",closed);
  }
  @Test(timeout=10000) public void testIsFileClosed() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"link");
    wrapper.setWorkingDirectory(dir);
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    boolean closed=dfs.isFileClosed(link);
    assertTrue("Expected isFileClosed to return true",closed);
  }
  @Test(timeout=10000) public void testConcat() throws Exception {
    Path dir=new Path(testBaseDir1());
    Path link=new Path(testBaseDir1(),"link");
    Path dir2=new Path(testBaseDir2());
    wrapper.createSymlink(dir2,link,false);
    wrapper.setWorkingDirectory(dir);
    Path target=new Path(link,"target");
    createAndWriteFile(target);
    Path[] srcs=new Path[3];
    for (int i=0; i < srcs.length; i++) {
      srcs[i]=new Path(link,"src-" + i);
      createAndWriteFile(srcs[i]);
    }
    dfs.concat(target,srcs);
  }
  @Test(timeout=10000) public void testSnapshot() throws Exception {
    Path dir=new Path(testBaseDir1());
    Path link=new Path(testBaseDir1(),"link");
    Path dir2=new Path(testBaseDir2());
    wrapper.createSymlink(dir2,link,false);
    wrapper.setWorkingDirectory(dir);
    dfs.allowSnapshot(link);
    dfs.disallowSnapshot(link);
    dfs.allowSnapshot(link);
    dfs.createSnapshot(link,"mcmillan");
    dfs.renameSnapshot(link,"mcmillan","seaborg");
    dfs.deleteSnapshot(link,"seaborg");
  }
}
