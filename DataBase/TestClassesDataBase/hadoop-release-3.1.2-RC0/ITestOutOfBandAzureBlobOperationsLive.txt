/** 
 * Live blob operations.
 */
public class ITestOutOfBandAzureBlobOperationsLive extends AbstractWasbTestBase {
  @Override protected AzureBlobStorageTestAccount createTestAccount() throws Exception {
    return AzureBlobStorageTestAccount.create();
  }
  @Test public void outOfBandFolder_uncleMkdirs() throws Exception {
    String workingDir="user/" + UserGroupInformation.getCurrentUser().getShortUserName() + "/";
    CloudBlockBlob blob=testAccount.getBlobReference(workingDir + "testFolder1/a/input/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    assertTrue(fs.exists(new Path("testFolder1/a/input/file")));
    Path targetFolder=new Path("testFolder1/a/output");
    assertTrue(fs.mkdirs(targetFolder));
  }
  @Test public void outOfBandFolder_parentDelete() throws Exception {
    String workingDir="user/" + UserGroupInformation.getCurrentUser().getShortUserName() + "/";
    CloudBlockBlob blob=testAccount.getBlobReference(workingDir + "testFolder2/a/input/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    assertTrue(fs.exists(new Path("testFolder2/a/input/file")));
    Path targetFolder=new Path("testFolder2/a/input");
    assertTrue(fs.delete(targetFolder,true));
  }
  @Test public void outOfBandFolder_rootFileDelete() throws Exception {
    CloudBlockBlob blob=testAccount.getBlobReference("fileY");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    assertTrue(fs.exists(new Path("/fileY")));
    assertTrue(fs.delete(new Path("/fileY"),true));
  }
  @Test public void outOfBandFolder_firstLevelFolderDelete() throws Exception {
    CloudBlockBlob blob=testAccount.getBlobReference("folderW/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    assertTrue(fs.exists(new Path("/folderW")));
    assertTrue(fs.exists(new Path("/folderW/file")));
    assertTrue(fs.delete(new Path("/folderW"),true));
  }
  @Test public void outOfBandFolder_siblingCreate() throws Exception {
    String workingDir="user/" + UserGroupInformation.getCurrentUser().getShortUserName() + "/";
    CloudBlockBlob blob=testAccount.getBlobReference(workingDir + "testFolder3/a/input/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    assertTrue(fs.exists(new Path("testFolder3/a/input/file")));
    Path targetFile=new Path("testFolder3/a/input/file2");
    FSDataOutputStream s2=fs.create(targetFile);
    s2.close();
  }
  @Test public void outOfBandFolder_create_rootDir() throws Exception {
    Path targetFile=new Path("/newInRoot");
    FSDataOutputStream s2=fs.create(targetFile);
    s2.close();
  }
  @Test public void outOfBandFolder_rename() throws Exception {
    String workingDir="user/" + UserGroupInformation.getCurrentUser().getShortUserName() + "/";
    CloudBlockBlob blob=testAccount.getBlobReference(workingDir + "testFolder4/a/input/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    Path srcFilePath=new Path("testFolder4/a/input/file");
    assertTrue(fs.exists(srcFilePath));
    Path destFilePath=new Path("testFolder4/a/input/file2");
    fs.rename(srcFilePath,destFilePath);
  }
  @Test public void outOfBandSingleFile_rename() throws Exception {
    String workingDir="user/" + UserGroupInformation.getCurrentUser().getShortUserName() + "/";
    CloudBlockBlob blob=testAccount.getBlobReference(workingDir + "testFolder5/a/input/file");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    Path srcFilePath=new Path("testFolder5/a/input/file");
    assertTrue(fs.exists(srcFilePath));
    Path destFilePath=new Path("testFolder5/file2");
    fs.rename(srcFilePath,destFilePath);
  }
  @Test public void outOfBandFolder_rename_rootLevelFiles() throws Exception {
    CloudBlockBlob blob=testAccount.getBlobReference("fileX");
    BlobOutputStream s=blob.openOutputStream();
    s.close();
    Path srcFilePath=new Path("/fileX");
    assertTrue(fs.exists(srcFilePath));
    Path destFilePath=new Path("/fileXrename");
    fs.rename(srcFilePath,destFilePath);
  }
}
