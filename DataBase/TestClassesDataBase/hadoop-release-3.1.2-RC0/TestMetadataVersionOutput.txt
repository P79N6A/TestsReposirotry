public class TestMetadataVersionOutput {
  private MiniDFSCluster dfsCluster=null;
  private final Configuration conf=new Configuration();
  @After public void tearDown() throws Exception {
    if (dfsCluster != null) {
      dfsCluster.shutdown();
      dfsCluster=null;
    }
    Thread.sleep(2000);
  }
  private void initConfig(){
    conf.set(DFS_NAMESERVICE_ID,"ns1");
    conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn1");
    conf.set(DFS_HA_NAMENODE_ID_KEY,"nn1");
    conf.set(DFS_NAMENODE_NAME_DIR_KEY + ".ns1.nn1",MiniDFSCluster.getBaseDirectory() + "1");
    conf.unset(DFS_NAMENODE_NAME_DIR_KEY);
  }
  @Test(timeout=30000) public void testMetadataVersionOutput() throws IOException {
    initConfig();
    dfsCluster=new MiniDFSCluster.Builder(conf).manageNameDfsDirs(false).numDataNodes(1).checkExitOnShutdown(false).build();
    dfsCluster.waitClusterUp();
    dfsCluster.shutdown(false);
    initConfig();
    final PrintStream origOut=System.out;
    final ByteArrayOutputStream baos=new ByteArrayOutputStream();
    final PrintStream stdOut=new PrintStream(baos);
    try {
      System.setOut(stdOut);
      try {
        NameNode.createNameNode(new String[]{"-metadataVersion"},conf);
      }
 catch (      Exception e) {
        assertExceptionContains(ExitUtil.EXIT_EXCEPTION_MESSAGE,e);
      }
      final String verNumStr=HdfsServerConstants.NAMENODE_LAYOUT_VERSION + "";
      assertTrue(baos.toString("UTF-8").contains("HDFS Image Version: " + verNumStr));
      assertTrue(baos.toString("UTF-8").contains("Software format version: " + verNumStr));
    }
  finally {
      System.setOut(origOut);
    }
  }
}
