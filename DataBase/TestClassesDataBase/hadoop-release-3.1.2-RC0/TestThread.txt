/** 
 * An abstract class for tests that catches exceptions and can  rethrow them on a different thread, and has an  {@link #endThread()} operation that flips a volatile boolean before interrupting the thread. Also: after running the implementation of  {@link #execute()} in the implementation class, the thread is notified: other threads can wait for it to terminate
 */
private abstract class TestThread extends Thread {
  volatile Throwable thrown;
  protected volatile boolean live=true;
  @Override public void run(){
    try {
      execute();
    }
 catch (    Throwable throwable) {
      LOG.warn(throwable);
      setThrown(throwable);
    }
 finally {
synchronized (this) {
        this.notify();
      }
    }
  }
  protected abstract void execute() throws Throwable ;
  protected synchronized void setThrown(  Throwable thrown){
    this.thrown=thrown;
  }
  /** 
 * Rethrow anything caught
 * @throws Throwable any non-null throwable raised by the execute method.
 */
  public synchronized void rethrow() throws Throwable {
    if (thrown != null) {
      throw thrown;
    }
  }
  /** 
 * End the thread by setting the live p
 */
  public synchronized void endThread(){
    live=false;
    interrupt();
    try {
      wait();
    }
 catch (    InterruptedException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Ignoring " + e,e);
      }
    }
  }
}
