public class TestRMWebApp {
  static final int GiB=1024;
  @Test public void testControllerIndex(){
    Injector injector=WebAppTests.createMockInjector(TestRMWebApp.class,this,new Module(){
      @Override public void configure(      Binder binder){
        binder.bind(ApplicationACLsManager.class).toInstance(new ApplicationACLsManager(new Configuration()));
      }
    }
);
    RmController c=injector.getInstance(RmController.class);
    c.index();
    assertEquals("Applications",c.get(TITLE,"unknown"));
  }
  @Test public void testView(){
    Injector injector=WebAppTests.createMockInjector(RMContext.class,mockRMContext(15,1,2,8 * GiB),new Module(){
      @Override public void configure(      Binder binder){
        try {
          ResourceManager mockRm=mockRm(3,1,2,8 * GiB);
          binder.bind(ResourceManager.class).toInstance(mockRm);
        }
 catch (        IOException e) {
          throw new IllegalStateException(e);
        }
      }
    }
);
    RmView rmViewInstance=injector.getInstance(RmView.class);
    rmViewInstance.set(YarnWebParams.APP_STATE,YarnApplicationState.RUNNING.toString());
    rmViewInstance.render();
    WebAppTests.flushOutput(injector);
    rmViewInstance.set(YarnWebParams.APP_STATE,StringHelper.cjoin(YarnApplicationState.ACCEPTED.toString(),YarnApplicationState.RUNNING.toString()));
    rmViewInstance.render();
    WebAppTests.flushOutput(injector);
    Map<String,String> moreParams=rmViewInstance.context().requestContext().moreParams();
    String appsTableColumnsMeta=moreParams.get("ui.dataTables.apps.init");
    Assert.assertTrue(appsTableColumnsMeta.indexOf("natural") != -1);
  }
  @Test public void testNodesPage(){
    final RMContext rmContext=mockRMContext(3,2,12,8 * GiB);
    Injector injector=WebAppTests.createMockInjector(RMContext.class,rmContext,new Module(){
      @Override public void configure(      Binder binder){
        try {
          binder.bind(ResourceManager.class).toInstance(mockRm(rmContext));
        }
 catch (        IOException e) {
          throw new IllegalStateException(e);
        }
      }
    }
);
    NodesPage instance=injector.getInstance(NodesPage.class);
    instance.render();
    WebAppTests.flushOutput(injector);
    instance.moreParams().put(YarnWebParams.NODE_STATE,NodeState.UNHEALTHY.toString());
    instance.render();
    WebAppTests.flushOutput(injector);
    instance.moreParams().put(YarnWebParams.NODE_STATE,NodeState.LOST.toString());
    instance.render();
    WebAppTests.flushOutput(injector);
  }
  public static RMContext mockRMContext(  int numApps,  int racks,  int numNodes,  int mbsPerNode){
    final List<RMApp> apps=MockAsm.newApplications(numApps);
    final ConcurrentMap<ApplicationId,RMApp> applicationsMaps=Maps.newConcurrentMap();
    for (    RMApp app : apps) {
      applicationsMaps.put(app.getApplicationId(),app);
    }
    final List<RMNode> nodes=MockNodes.newNodes(racks,numNodes,newResource(mbsPerNode));
    final ConcurrentMap<NodeId,RMNode> nodesMap=Maps.newConcurrentMap();
    for (    RMNode node : nodes) {
      nodesMap.put(node.getNodeID(),node);
    }
    final List<RMNode> deactivatedNodes=MockNodes.deactivatedNodes(racks,numNodes,newResource(mbsPerNode));
    final ConcurrentMap<NodeId,RMNode> deactivatedNodesMap=Maps.newConcurrentMap();
    for (    RMNode node : deactivatedNodes) {
      deactivatedNodesMap.put(node.getNodeID(),node);
    }
    RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,null,null,null,null){
      @Override public ConcurrentMap<ApplicationId,RMApp> getRMApps(){
        return applicationsMaps;
      }
      @Override public ConcurrentMap<NodeId,RMNode> getInactiveRMNodes(){
        return deactivatedNodesMap;
      }
      @Override public ConcurrentMap<NodeId,RMNode> getRMNodes(){
        return nodesMap;
      }
    }
;
    rmContext.setNodeLabelManager(new NullRMNodeLabelsManager());
    rmContext.setYarnConfiguration(new YarnConfiguration());
    return rmContext;
  }
  public static ResourceManager mockRm(  int apps,  int racks,  int nodes,  int mbsPerNode) throws IOException {
    RMContext rmContext=mockRMContext(apps,racks,nodes,mbsPerNode);
    return mockRm(rmContext);
  }
  public static ResourceManager mockRm(  RMContext rmContext) throws IOException {
    ResourceManager rm=mock(ResourceManager.class);
    ResourceScheduler rs=mockCapacityScheduler();
    ApplicationACLsManager aclMgr=mockAppACLsManager();
    ClientRMService clientRMService=mockClientRMService(rmContext);
    when(rm.getResourceScheduler()).thenReturn(rs);
    when(rm.getRMContext()).thenReturn(rmContext);
    when(rm.getApplicationACLsManager()).thenReturn(aclMgr);
    when(rm.getClientRMService()).thenReturn(clientRMService);
    return rm;
  }
  public static CapacityScheduler mockCapacityScheduler() throws IOException {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    setupQueueConfiguration(conf);
    CapacityScheduler cs=new CapacityScheduler();
    YarnConfiguration yarnConf=new YarnConfiguration();
    cs.setConf(yarnConf);
    RMContext rmContext=new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null);
    RMNodeLabelsManager labelManager=new NullRMNodeLabelsManager();
    labelManager.init(yarnConf);
    rmContext.setNodeLabelManager(labelManager);
    cs.setRMContext(rmContext);
    cs.init(conf);
    return cs;
  }
  public static ApplicationACLsManager mockAppACLsManager(){
    Configuration conf=new Configuration();
    return new ApplicationACLsManager(conf);
  }
  public static ClientRMService mockClientRMService(  RMContext rmContext){
    ClientRMService clientRMService=mock(ClientRMService.class);
    List<ApplicationReport> appReports=new ArrayList<ApplicationReport>();
    for (    RMApp app : rmContext.getRMApps().values()) {
      ApplicationReport appReport=ApplicationReport.newInstance(app.getApplicationId(),(ApplicationAttemptId)null,app.getUser(),app.getQueue(),app.getName(),(String)null,0,(Token)null,app.createApplicationState(),app.getDiagnostics().toString(),(String)null,app.getStartTime(),app.getFinishTime(),app.getFinalApplicationStatus(),(ApplicationResourceUsageReport)null,app.getTrackingUrl(),app.getProgress(),app.getApplicationType(),(Token)null);
      appReports.add(appReport);
    }
    GetApplicationsResponse response=mock(GetApplicationsResponse.class);
    when(response.getApplicationList()).thenReturn(appReports);
    try {
      when(clientRMService.getApplications(any(GetApplicationsRequest.class))).thenReturn(response);
    }
 catch (    YarnException e) {
      Assert.fail("Exception is not expected.");
    }
    return clientRMService;
  }
  static void setupQueueConfiguration(  CapacitySchedulerConfiguration conf){
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b","c"});
    final String A=CapacitySchedulerConfiguration.ROOT + ".a";
    conf.setCapacity(A,10);
    final String B=CapacitySchedulerConfiguration.ROOT + ".b";
    conf.setCapacity(B,20);
    final String C=CapacitySchedulerConfiguration.ROOT + ".c";
    conf.setCapacity(C,70);
    final String A1=A + ".a1";
    final String A2=A + ".a2";
    conf.setQueues(A,new String[]{"a1","a2"});
    conf.setCapacity(A1,30);
    conf.setCapacity(A2,70);
    final String B1=B + ".b1";
    final String B2=B + ".b2";
    final String B3=B + ".b3";
    conf.setQueues(B,new String[]{"b1","b2","b3"});
    conf.setCapacity(B1,50);
    conf.setCapacity(B2,30);
    conf.setCapacity(B3,20);
    final String C1=C + ".c1";
    final String C2=C + ".c2";
    final String C3=C + ".c3";
    final String C4=C + ".c4";
    conf.setQueues(C,new String[]{"c1","c2","c3","c4"});
    conf.setCapacity(C1,50);
    conf.setCapacity(C2,10);
    conf.setCapacity(C3,35);
    conf.setCapacity(C4,5);
    final String C11=C1 + ".c11";
    final String C12=C1 + ".c12";
    final String C13=C1 + ".c13";
    conf.setQueues(C1,new String[]{"c11","c12","c13"});
    conf.setCapacity(C11,15);
    conf.setCapacity(C12,45);
    conf.setCapacity(C13,40);
  }
  public static ResourceManager mockFifoRm(  int apps,  int racks,  int nodes,  int mbsPerNode) throws Exception {
    ResourceManager rm=mock(ResourceManager.class);
    RMContext rmContext=mockRMContext(apps,racks,nodes,mbsPerNode);
    ResourceScheduler rs=mockFifoScheduler(rmContext);
    when(rm.getResourceScheduler()).thenReturn(rs);
    when(rm.getRMContext()).thenReturn(rmContext);
    return rm;
  }
  public static FifoScheduler mockFifoScheduler(  RMContext rmContext) throws Exception {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    setupFifoQueueConfiguration(conf);
    FifoScheduler fs=new FifoScheduler();
    fs.setConf(new YarnConfiguration());
    fs.setRMContext(rmContext);
    fs.init(conf);
    return fs;
  }
  static void setupFifoQueueConfiguration(  CapacitySchedulerConfiguration conf){
    conf.setQueues("default",new String[]{"default"});
    conf.setCapacity("default",100);
  }
  public static void main(  String[] args) throws Exception {
    WebApps.$for("yarn",new TestRMWebApp()).at(8888).inDevMode().start(new RMWebApp(mockRm(2500,8,8,8 * GiB))).joinThread();
    WebApps.$for("yarn",new TestRMWebApp()).at(8888).inDevMode().start(new RMWebApp(mockFifoRm(10,1,4,8 * GiB))).joinThread();
  }
}
