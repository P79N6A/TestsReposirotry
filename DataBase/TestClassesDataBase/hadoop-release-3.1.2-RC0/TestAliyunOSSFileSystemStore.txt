/** 
 * Test the bridging logic between Hadoop's abstract filesystem and Aliyun OSS.
 */
public class TestAliyunOSSFileSystemStore {
  private Configuration conf;
  private AliyunOSSFileSystemStore store;
  private AliyunOSSFileSystem fs;
  @Before public void setUp() throws Exception {
    conf=new Configuration();
    fs=new AliyunOSSFileSystem();
    fs.initialize(URI.create(conf.get("test.fs.oss.name")),conf);
    store=fs.getStore();
  }
  @After public void tearDown() throws Exception {
    try {
      store.purge("test");
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw e;
    }
  }
  @BeforeClass public static void checkSettings() throws Exception {
    Configuration conf=new Configuration();
    assumeNotNull(conf.get(Constants.ACCESS_KEY_ID));
    assumeNotNull(conf.get(Constants.ACCESS_KEY_SECRET));
    assumeNotNull(conf.get("test.fs.oss.name"));
  }
  protected void writeRenameReadCompare(  Path path,  long len) throws IOException, NoSuchAlgorithmException {
    MessageDigest digest=MessageDigest.getInstance("MD5");
    OutputStream out=new BufferedOutputStream(new DigestOutputStream(fs.create(path,false),digest));
    for (long i=0; i < len; i++) {
      out.write('Q');
    }
    out.flush();
    out.close();
    assertTrue("Exists",fs.exists(path));
    Path copyPath=path.suffix(".copy");
    long start=System.currentTimeMillis();
    fs.rename(path,copyPath);
    assertTrue("Copy exists",fs.exists(copyPath));
    assertTrue(System.currentTimeMillis() - start < 1000);
    MessageDigest digest2=MessageDigest.getInstance("MD5");
    InputStream in=new BufferedInputStream(new DigestInputStream(fs.open(copyPath),digest2));
    long copyLen=0;
    while (in.read() != -1) {
      copyLen++;
    }
    in.close();
    assertEquals("Copy length matches original",len,copyLen);
    assertArrayEquals("Digests match",digest.digest(),digest2.digest());
  }
  @Test public void testSmallUpload() throws IOException, NoSuchAlgorithmException {
    writeRenameReadCompare(new Path("/test/small"),16384);
  }
  @Test public void testLargeUpload() throws IOException, NoSuchAlgorithmException {
    writeRenameReadCompare(new Path("/test/xlarge"),2147483648L);
  }
}
