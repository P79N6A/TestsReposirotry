/** 
 * Test symbolic links in Hdfs.
 */
abstract public class TestSymlinkHdfs extends SymlinkBaseTest {
{
    GenericTestUtils.setLogLevel(NameNode.stateChangeLog,Level.ALL);
  }
  protected static MiniDFSCluster cluster;
  protected static WebHdfsFileSystem webhdfs;
  protected static DistributedFileSystem dfs;
  @Override protected String getScheme(){
    return "hdfs";
  }
  @Override protected String testBaseDir1() throws IOException {
    return "/test1";
  }
  @Override protected String testBaseDir2() throws IOException {
    return "/test2";
  }
  @Override protected URI testURI(){
    return cluster.getURI(0);
  }
  @Override protected IOException unwrapException(  IOException e){
    if (e instanceof RemoteException) {
      return ((RemoteException)e).unwrapRemoteException();
    }
    return e;
  }
  @BeforeClass public static void beforeClassSetup() throws Exception {
    Configuration conf=new HdfsConfiguration();
    conf.set(FsPermission.UMASK_LABEL,"000");
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_MAX_COMPONENT_LENGTH_KEY,0);
    cluster=new MiniDFSCluster.Builder(conf).build();
    webhdfs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    dfs=cluster.getFileSystem();
  }
  @AfterClass public static void afterClassTeardown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Test(timeout=10000) public void testLinkAcrossFileSystems() throws IOException {
    Path localDir=new Path("file://" + wrapper.getAbsoluteTestRootDir() + "/test");
    Path localFile=new Path("file://" + wrapper.getAbsoluteTestRootDir() + "/test/file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
    localWrapper.delete(localDir,true);
    localWrapper.mkdir(localDir,FileContext.DEFAULT_PERM,true);
    localWrapper.setWorkingDirectory(localDir);
    assertEquals(localDir,localWrapper.getWorkingDirectory());
    createAndWriteFile(localWrapper,localFile);
    wrapper.createSymlink(localFile,link,false);
    readFile(link);
    assertEquals(fileSize,wrapper.getFileStatus(link).getLen());
  }
  @Test(timeout=10000) public void testRenameAcrossFileSystemsViaLink() throws IOException {
    Path localDir=new Path("file://" + wrapper.getAbsoluteTestRootDir() + "/test");
    Path hdfsFile=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"link");
    Path hdfsFileNew=new Path(testBaseDir1(),"fileNew");
    Path hdfsFileNewViaLink=new Path(link,"fileNew");
    FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
    localWrapper.delete(localDir,true);
    localWrapper.mkdir(localDir,FileContext.DEFAULT_PERM,true);
    localWrapper.setWorkingDirectory(localDir);
    createAndWriteFile(hdfsFile);
    wrapper.createSymlink(localDir,link,false);
    try {
      wrapper.rename(hdfsFile,hdfsFileNewViaLink);
      fail("Renamed across file systems");
    }
 catch (    InvalidPathException ipe) {
    }
catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("Wrong FS: ",e);
    }
    createAndWriteFile(hdfsFileNewViaLink);
    try {
      wrapper.rename(hdfsFileNewViaLink,hdfsFileNew);
      fail("Renamed across file systems");
    }
 catch (    InvalidPathException ipe) {
    }
catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("Wrong FS: ",e);
    }
  }
  @Test(timeout=10000) public void testCreateLinkToSlash() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToSlash");
    Path fileViaLink=new Path(testBaseDir1() + "/linkToSlash" + testBaseDir1()+ "/file");
    createAndWriteFile(file);
    wrapper.setWorkingDirectory(dir);
    wrapper.createSymlink(new Path("/"),link,false);
    readFile(fileViaLink);
    assertEquals(fileSize,wrapper.getFileStatus(fileViaLink).getLen());
    if (wrapper instanceof FileContextTestWrapper) {
      FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
      Path linkQual=new Path(cluster.getURI(0).toString(),fileViaLink);
      assertEquals(fileSize,localWrapper.getFileStatus(linkQual).getLen());
    }
  }
  @Test(timeout=10000) public void testSetPermissionAffectsTarget() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path dir=new Path(testBaseDir2());
    Path linkToFile=new Path(testBaseDir1(),"linkToFile");
    Path linkToDir=new Path(testBaseDir1(),"linkToDir");
    createAndWriteFile(file);
    wrapper.createSymlink(file,linkToFile,false);
    wrapper.createSymlink(dir,linkToDir,false);
    FsPermission perms=wrapper.getFileLinkStatus(linkToFile).getPermission();
    wrapper.setPermission(linkToFile,new FsPermission((short)0664));
    wrapper.setOwner(linkToFile,"user","group");
    assertEquals(perms,wrapper.getFileLinkStatus(linkToFile).getPermission());
    FileStatus stat=wrapper.getFileStatus(file);
    assertEquals(0664,stat.getPermission().toShort());
    assertEquals("user",stat.getOwner());
    assertEquals("group",stat.getGroup());
    assertEquals(stat.getPermission(),wrapper.getFileStatus(linkToFile).getPermission());
    perms=wrapper.getFileLinkStatus(linkToDir).getPermission();
    wrapper.setPermission(linkToDir,new FsPermission((short)0664));
    wrapper.setOwner(linkToDir,"user","group");
    assertEquals(perms,wrapper.getFileLinkStatus(linkToDir).getPermission());
    stat=wrapper.getFileStatus(dir);
    assertEquals(0664,stat.getPermission().toShort());
    assertEquals("user",stat.getOwner());
    assertEquals("group",stat.getGroup());
    assertEquals(stat.getPermission(),wrapper.getFileStatus(linkToDir).getPermission());
  }
  @Test(timeout=10000) public void testCreateWithPartQualPathFails() throws IOException {
    Path fileWoAuth=new Path("hdfs:///test/file");
    Path linkWoAuth=new Path("hdfs:///test/link");
    try {
      createAndWriteFile(fileWoAuth);
      fail("HDFS requires URIs with schemes have an authority");
    }
 catch (    RuntimeException e) {
    }
    try {
      wrapper.createSymlink(new Path("foo"),linkWoAuth,false);
      fail("HDFS requires URIs with schemes have an authority");
    }
 catch (    RuntimeException e) {
    }
  }
  @Test(timeout=10000) public void testSetReplication() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    wrapper.setReplication(link,(short)2);
    assertEquals(0,wrapper.getFileLinkStatus(link).getReplication());
    assertEquals(2,wrapper.getFileStatus(link).getReplication());
    assertEquals(2,wrapper.getFileStatus(file).getReplication());
  }
  @Test(timeout=10000) public void testCreateLinkMaxPathLink() throws IOException {
    Path dir=new Path(testBaseDir1());
    Path file=new Path(testBaseDir1(),"file");
    final int maxPathLen=HdfsServerConstants.MAX_PATH_LENGTH;
    final int dirLen=dir.toString().length() + 1;
    int len=maxPathLen - dirLen;
    StringBuilder sb=new StringBuilder("");
    for (int i=0; i < (len / 10); i++) {
      sb.append("0123456789");
    }
    for (int i=0; i < (len % 10); i++) {
      sb.append("x");
    }
    Path link=new Path(sb.toString());
    assertEquals(maxPathLen,dirLen + link.toString().length());
    createAndWriteFile(file);
    wrapper.setWorkingDirectory(dir);
    wrapper.createSymlink(file,link,false);
    readFile(link);
    link=new Path(sb.toString() + "x");
    try {
      wrapper.createSymlink(file,link,false);
      fail("Path name should be too long");
    }
 catch (    IOException x) {
    }
  }
  @Test(timeout=10000) public void testLinkOwner() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"symlinkToFile");
    createAndWriteFile(file);
    wrapper.createSymlink(file,link,false);
    FileStatus statFile=wrapper.getFileStatus(file);
    FileStatus statLink=wrapper.getFileStatus(link);
    assertEquals(statLink.getOwner(),statFile.getOwner());
  }
  @Test(timeout=10000) public void testWebHDFS() throws IOException {
    Path file=new Path(testBaseDir1(),"file");
    Path link=new Path(testBaseDir1(),"linkToFile");
    createAndWriteFile(file);
    webhdfs.createSymlink(file,link,false);
    wrapper.setReplication(link,(short)2);
    assertEquals(0,wrapper.getFileLinkStatus(link).getReplication());
    assertEquals(2,wrapper.getFileStatus(link).getReplication());
    assertEquals(2,wrapper.getFileStatus(file).getReplication());
  }
  @Test(timeout=10000) public void testQuota() throws IOException {
    final Path dir=new Path(testBaseDir1());
    dfs.setQuota(dir,3,HdfsConstants.QUOTA_DONT_SET);
    final Path file=new Path(dir,"file");
    createAndWriteFile(file);
    final Path link1=new Path(dir,"link1");
    wrapper.createSymlink(file,link1,false);
    try {
      final Path link2=new Path(dir,"link2");
      wrapper.createSymlink(file,link2,false);
      fail("Created symlink despite quota violation");
    }
 catch (    QuotaExceededException qee) {
    }
  }
}
