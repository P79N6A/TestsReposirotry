public static class AddSiblingService extends CompositeService {
  private final CompositeService parent;
  private final Service serviceToAdd;
  private STATE triggerState;
  public AddSiblingService(  CompositeService parent,  Service serviceToAdd,  STATE triggerState){
    super("ParentStateManipulatorService");
    this.parent=parent;
    this.serviceToAdd=serviceToAdd;
    this.triggerState=triggerState;
  }
  /** 
 * Add the serviceToAdd to the parent if this service is in the state requested
 */
  private void maybeAddSibling(){
    if (getServiceState() == triggerState) {
      parent.addService(serviceToAdd);
    }
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    maybeAddSibling();
    super.serviceInit(conf);
  }
  @Override protected void serviceStart() throws Exception {
    maybeAddSibling();
    super.serviceStart();
  }
  @Override protected void serviceStop() throws Exception {
    maybeAddSibling();
    super.serviceStop();
  }
  /** 
 * Expose addService method
 * @param parent parent service
 * @param child child to add
 */
  public static void addChildToService(  CompositeService parent,  Service child){
    parent.addService(child);
  }
}
