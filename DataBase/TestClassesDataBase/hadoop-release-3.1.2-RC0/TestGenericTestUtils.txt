public class TestGenericTestUtils extends GenericTestUtils {
  @Test public void testAssertExceptionContainsNullEx() throws Throwable {
    try {
      assertExceptionContains("",null);
    }
 catch (    AssertionError e) {
      if (!e.toString().contains(E_NULL_THROWABLE)) {
        throw e;
      }
    }
  }
  @Test public void testAssertExceptionContainsNullString() throws Throwable {
    try {
      assertExceptionContains("",new BrokenException());
    }
 catch (    AssertionError e) {
      if (!e.toString().contains(E_NULL_THROWABLE_STRING)) {
        throw e;
      }
    }
  }
  @Test public void testAssertExceptionContainsWrongText() throws Throwable {
    try {
      assertExceptionContains("Expected",new Exception("(actual)"));
    }
 catch (    AssertionError e) {
      String s=e.toString();
      if (!s.contains(E_UNEXPECTED_EXCEPTION) || !s.contains("(actual)")) {
        throw e;
      }
      if (e.getCause() == null) {
        throw new AssertionError("No nested cause in assertion",e);
      }
    }
  }
  @Test public void testAssertExceptionContainsWorking() throws Throwable {
    assertExceptionContains("Expected",new Exception("Expected"));
  }
private static class BrokenException extends Exception {
    public BrokenException(){
    }
    @Override public String toString(){
      return null;
    }
  }
  @Test(timeout=10000) public void testLogCapturer(){
    final Logger log=LoggerFactory.getLogger(TestGenericTestUtils.class);
    LogCapturer logCapturer=LogCapturer.captureLogs(log);
    final String infoMessage="info message";
    log.info(infoMessage);
    assertTrue(logCapturer.getOutput().endsWith(String.format(infoMessage + "%n")));
    logCapturer.clearOutput();
    assertTrue(logCapturer.getOutput().isEmpty());
    logCapturer.stopCapturing();
    log.info(infoMessage);
    assertTrue(logCapturer.getOutput().isEmpty());
  }
  @Test(timeout=10000) public void testLogCapturerSlf4jLogger(){
    final Logger logger=LoggerFactory.getLogger(TestGenericTestUtils.class);
    LogCapturer logCapturer=LogCapturer.captureLogs(logger);
    final String infoMessage="info message";
    logger.info(infoMessage);
    assertTrue(logCapturer.getOutput().endsWith(String.format(infoMessage + "%n")));
    logCapturer.clearOutput();
    assertTrue(logCapturer.getOutput().isEmpty());
    logCapturer.stopCapturing();
    logger.info(infoMessage);
    assertTrue(logCapturer.getOutput().isEmpty());
  }
  @Test public void testWaitingForConditionWithInvalidParams() throws Throwable {
    try {
      waitFor(null,0,0);
    }
 catch (    NullPointerException e) {
      assertExceptionContains(GenericTestUtils.ERROR_MISSING_ARGUMENT,e);
    }
    Supplier<Boolean> simpleSupplier=new Supplier<Boolean>(){
      @Override public Boolean get(){
        return true;
      }
    }
;
    waitFor(simpleSupplier,5,10);
    try {
      waitFor(simpleSupplier,10,5);
      fail("Excepted a failure when the param value of" + " waitForMillis is smaller than checkEveryMillis.");
    }
 catch (    IllegalArgumentException e) {
      assertExceptionContains(GenericTestUtils.ERROR_INVALID_ARGUMENT,e);
    }
  }
  @Test public void testToLevel() throws Throwable {
    assertEquals(Level.INFO,toLevel("INFO"));
    assertEquals(Level.DEBUG,toLevel("NonExistLevel"));
    assertEquals(Level.INFO,toLevel("INFO",Level.TRACE));
    assertEquals(Level.TRACE,toLevel("NonExistLevel",Level.TRACE));
  }
}
