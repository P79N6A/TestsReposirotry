/** 
 * A class that kills one datanode and recreates a new one. It waits to ensure that that all workers have finished at least one file since the  last kill of a datanode. This guarantees that all three replicas of a block do not get killed (otherwise the file will be corrupt and the test will fail).
 */
class Modify extends Thread {
  volatile boolean running;
  final MiniDFSCluster cluster;
  final Configuration conf;
  Modify(  Configuration conf,  MiniDFSCluster cluster){
    running=true;
    this.cluster=cluster;
    this.conf=conf;
  }
  @Override public void run(){
    while (running) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        continue;
      }
      boolean loop=false;
      for (int i=0; i < numThreads; i++) {
        if (workload[i].getStamp() == 0) {
          loop=true;
          break;
        }
      }
      if (loop) {
        continue;
      }
      for (int i=0; i < replication - 1; i++) {
        int victim=AppendTestUtil.nextInt(numDatanodes);
        try {
          System.out.println("Stopping datanode " + victim);
          cluster.restartDataNode(victim);
        }
 catch (        IOException e) {
          System.out.println("TestDatanodeDeath Modify exception " + e);
          assertTrue("TestDatanodeDeath Modify exception " + e,false);
          running=false;
        }
      }
      for (int i=0; i < numThreads; i++) {
        workload[i].resetStamp();
      }
    }
  }
  void close(){
    running=false;
    this.interrupt();
  }
}
