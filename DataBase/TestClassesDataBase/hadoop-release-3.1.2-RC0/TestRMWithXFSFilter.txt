/** 
 * Used TestRMWebServices as an example of web invocations of RM and added test for XFS Filter.
 */
public class TestRMWithXFSFilter extends JerseyTestBase {
  private static MockRM rm;
  @Before @Override public void setUp() throws Exception {
    super.setUp();
  }
  public TestRMWithXFSFilter(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.yarn.server.resourcemanager.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testDefaultBehavior() throws Exception {
    createInjector();
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("info").accept("application/xml").get(ClientResponse.class);
    assertEquals("Should have received DENY x-frame options header","DENY",response.getHeaders().get(XFrameOptionsFilter.X_FRAME_OPTIONS).get(0));
  }
  protected void createInjector(  String headerValue){
    createInjector(headerValue,false);
  }
  protected void createInjector(){
    createInjector(null,false);
  }
  protected void createInjector(  final String headerValue,  final boolean explicitlyDisabled){
    GuiceServletConfig.setInjector(Guice.createInjector(new ServletModule(){
      @Override protected void configureServlets(){
        bind(JAXBContextResolver.class);
        bind(RMWebServices.class);
        bind(GenericExceptionHandler.class);
        Configuration conf=new Configuration();
        conf.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
        rm=new MockRM(conf);
        bind(ResourceManager.class).toInstance(rm);
        serve("/*").with(GuiceContainer.class);
        XFrameOptionsFilter xfsFilter=new XFrameOptionsFilter();
        Map<String,String> initParams=new HashMap<>();
        if (headerValue != null) {
          initParams.put(XFrameOptionsFilter.CUSTOM_HEADER_PARAM,headerValue);
        }
        if (explicitlyDisabled) {
          initParams.put("xframe-options-enabled","false");
        }
        filter("/*").through(xfsFilter,initParams);
      }
    }
));
  }
  @Test public void testSameOrigin() throws Exception {
    createInjector("SAMEORIGIN");
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("info").accept("application/xml").get(ClientResponse.class);
    assertEquals("Should have received SAMEORIGIN x-frame options header","SAMEORIGIN",response.getHeaders().get(XFrameOptionsFilter.X_FRAME_OPTIONS).get(0));
  }
  @Test public void testExplicitlyDisabled() throws Exception {
    createInjector(null,true);
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("info").accept("application/xml").get(ClientResponse.class);
    assertFalse("Should have not received x-frame options header",response.getHeaders().get(XFrameOptionsFilter.X_FRAME_OPTIONS) == null);
  }
}
