/** 
 * Unit test of the input policy logic, without making any S3 calls.
 */
@RunWith(Parameterized.class) public class TestS3AInputPolicies {
  private S3AInputPolicy policy;
  private long targetPos;
  private long length;
  private long contentLength;
  private long readahead;
  private long expectedLimit;
  public static final long _64K=64 * 1024;
  public static final long _128K=128 * 1024;
  public static final long _256K=256 * 1024;
  public static final long _1MB=1024L * 1024;
  public static final long _10MB=_1MB * 10;
  public TestS3AInputPolicies(  S3AInputPolicy policy,  long targetPos,  long length,  long contentLength,  long readahead,  long expectedLimit){
    this.policy=policy;
    this.targetPos=targetPos;
    this.length=length;
    this.contentLength=contentLength;
    this.readahead=readahead;
    this.expectedLimit=expectedLimit;
  }
  @Parameterized.Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{S3AInputPolicy.Normal,0,-1,0,_64K,0},{S3AInputPolicy.Normal,0,-1,_10MB,_64K,_10MB},{S3AInputPolicy.Normal,_64K,_64K,_10MB,_64K,_10MB},{S3AInputPolicy.Sequential,0,-1,0,_64K,0},{S3AInputPolicy.Sequential,0,-1,_10MB,_64K,_10MB},{S3AInputPolicy.Random,0,-1,0,_64K,0},{S3AInputPolicy.Random,0,-1,_10MB,_64K,_10MB},{S3AInputPolicy.Random,0,_128K,_10MB,_64K,_128K},{S3AInputPolicy.Random,0,_128K,_10MB,_256K,_256K},{S3AInputPolicy.Random,0,0,_10MB,_256K,_256K},{S3AInputPolicy.Random,0,1,_10MB,_256K,_256K},{S3AInputPolicy.Random,0,_1MB,_10MB,_256K,_1MB},{S3AInputPolicy.Random,0,_1MB,_10MB,0,_1MB},{S3AInputPolicy.Random,_10MB + _64K,_1MB,_10MB,_256K,_10MB}});
  }
  @Test public void testInputPolicies() throws Throwable {
    Assert.assertEquals(String.format("calculateRequestLimit(%s, %d, %d, %d, %d)",policy,targetPos,length,contentLength,readahead),expectedLimit,S3AInputStream.calculateRequestLimit(policy,targetPos,length,contentLength,readahead));
  }
}
