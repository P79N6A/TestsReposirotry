private static interface CheckChooseStorageTypes {
  public void checkChooseStorageTypes(  BlockStoragePolicy p,  short replication,  List<StorageType> chosen,  StorageType... expected);
  /** 
 * Basic case: pass only replication and chosen 
 */
  static final CheckChooseStorageTypes Basic=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With empty unavailables and isNewBlock=true 
 */
  static final CheckChooseStorageTypes EmptyUnavailablesAndNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,none,true);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With empty unavailables and isNewBlock=false 
 */
  static final CheckChooseStorageTypes EmptyUnavailablesAndNonNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,none,false);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With both DISK and ARCHIVE unavailables and isNewBlock=true 
 */
  static final CheckChooseStorageTypes BothUnavailableAndNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,disk_archive,true);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With both DISK and ARCHIVE unavailable and isNewBlock=false 
 */
  static final CheckChooseStorageTypes BothUnavailableAndNonNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,disk_archive,false);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With ARCHIVE unavailable and isNewBlock=true 
 */
  static final CheckChooseStorageTypes ArchivalUnavailableAndNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,archive,true);
      assertStorageTypes(types,expected);
    }
  }
;
  /** 
 * With ARCHIVE unavailable and isNewBlock=true 
 */
  static final CheckChooseStorageTypes ArchivalUnavailableAndNonNewBlock=new CheckChooseStorageTypes(){
    @Override public void checkChooseStorageTypes(    BlockStoragePolicy p,    short replication,    List<StorageType> chosen,    StorageType... expected){
      final List<StorageType> types=p.chooseStorageTypes(replication,chosen,archive,false);
      assertStorageTypes(types,expected);
    }
  }
;
}
