/** 
 * A simple committer.
 */
public static final class SimpleCommitter extends PathOutputCommitter {
  private final Path outputPath;
  public SimpleCommitter(  Path outputPath,  TaskAttemptContext context) throws IOException {
    super(outputPath,context);
    this.outputPath=outputPath;
  }
  @Override public Path getWorkPath() throws IOException {
    return null;
  }
  /** 
 * Job setup throws an exception.
 * @param jobContext Context of the job
 * @throws IOException always
 */
  @Override public void setupJob(  JobContext jobContext) throws IOException {
    throw new IOException("setupJob");
  }
  @Override public void setupTask(  TaskAttemptContext taskContext) throws IOException {
  }
  @Override public boolean needsTaskCommit(  TaskAttemptContext taskContext) throws IOException {
    return false;
  }
  @Override public void commitTask(  TaskAttemptContext taskContext) throws IOException {
  }
  @Override public void abortTask(  TaskAttemptContext taskContext) throws IOException {
  }
  @Override public Path getOutputPath(){
    return outputPath;
  }
}
