/** 
 * Place for the S3A listing classes; keeps all the small classes under control.
 */
public class TestListing extends AbstractS3AMockTest {
private static class MockRemoteIterator<FileStatus> implements RemoteIterator<FileStatus> {
    private Iterator<FileStatus> iterator;
    MockRemoteIterator(    Collection<FileStatus> source){
      iterator=source.iterator();
    }
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public FileStatus next(){
      return iterator.next();
    }
  }
  private FileStatus blankFileStatus(  Path path){
    return new FileStatus(0,true,0,0,0,path);
  }
  @Test public void testTombstoneReconcilingIterator() throws Exception {
    Path parent=new Path("/parent");
    Path liveChild=new Path(parent,"/liveChild");
    Path deletedChild=new Path(parent,"/deletedChild");
    Path[] allFiles={parent,liveChild,deletedChild};
    Path[] liveFiles={parent,liveChild};
    Listing listing=new Listing(fs);
    Collection<FileStatus> statuses=new ArrayList<>();
    statuses.add(blankFileStatus(parent));
    statuses.add(blankFileStatus(liveChild));
    statuses.add(blankFileStatus(deletedChild));
    Set<Path> tombstones=new HashSet<>();
    tombstones.add(deletedChild);
    RemoteIterator<FileStatus> sourceIterator=new MockRemoteIterator(statuses);
    RemoteIterator<LocatedFileStatus> locatedIterator=listing.createLocatedFileStatusIterator(sourceIterator);
    RemoteIterator<LocatedFileStatus> reconcilingIterator=listing.createTombstoneReconcilingIterator(locatedIterator,tombstones);
    Set<Path> expectedPaths=new HashSet<>();
    expectedPaths.add(parent);
    expectedPaths.add(liveChild);
    Set<Path> actualPaths=new HashSet<>();
    while (reconcilingIterator.hasNext()) {
      actualPaths.add(reconcilingIterator.next().getPath());
    }
    Assert.assertTrue(actualPaths.equals(expectedPaths));
  }
  @Test public void testProvidedFileStatusIteratorEnd() throws Exception {
    FileStatus[] statuses={new FileStatus(100,false,1,8192,0,new Path("s3a://blah/blah"))};
    ProvidedFileStatusIterator it=new ProvidedFileStatusIterator(statuses,ACCEPT_ALL,new Listing.AcceptAllButS3nDirs());
    Assert.assertTrue("hasNext() should return true first time",it.hasNext());
    Assert.assertNotNull("first element should not be null",it.next());
    Assert.assertFalse("hasNext() should now be false",it.hasNext());
    try {
      it.next();
      Assert.fail("next() should have thrown exception");
    }
 catch (    NoSuchElementException e) {
      return;
    }
  }
}
