/** 
 * Tests various preemption cases on auto-created leaf queues. All auto-created leaf queues will end up having same priority since they are set from template. Priority on ManagedParent Queues can be set however and priority based premption cases are based on that.
 */
public class TestCapacitySchedulerAutoCreatedQueuePreemption extends TestCapacitySchedulerSurgicalPreemption {
  @Override @Before public void setUp() throws Exception {
    super.setUp();
  }
  public static CapacitySchedulerConfiguration setupQueueConfigurationForSimpleSurgicalPreemption(  CapacitySchedulerConfiguration conf){
    TestCapacitySchedulerAutoCreatedQueueBase.setupQueueMappings(conf,"c",true,new int[]{1,2});
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"c"});
    conf.setCapacity(C,100f);
    conf.setUserLimitFactor(C,1.0f);
    conf.setAutoCreateChildQueueEnabled(C,true);
    conf.setAutoCreatedLeafQueueConfigCapacity(C,30.0f);
    conf.setAutoCreatedLeafQueueConfigMaxCapacity(C,100.0f);
    conf.setAutoCreatedLeafQueueConfigUserLimit(C,100);
    conf.setAutoCreatedLeafQueueConfigUserLimitFactor(C,3.0f);
    return conf;
  }
  protected CapacitySchedulerConfiguration setupQueueConfigurationForPriorityBasedPreemption(  CapacitySchedulerConfiguration conf){
    TestCapacitySchedulerAutoCreatedQueueBase.setupQueueMappings(conf,"c",true,new int[]{1,2});
    TestCapacitySchedulerAutoCreatedQueueBase.setupQueueMappings(conf,"d",true,new int[]{3,4});
    TestCapacitySchedulerAutoCreatedQueueBase.setupQueueMappings(conf,"e",true,new int[]{0});
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"c","d","e"});
    conf.setCapacity(C,45f);
    conf.setCapacity(D,45f);
    conf.setCapacity(E,10f);
    conf.setUserLimitFactor(E,3.0f);
    conf.setUserLimitFactor(C,3.0f);
    conf.setUserLimitFactor(D,3.0f);
    conf.setAutoCreateChildQueueEnabled(C,true);
    conf.setAutoCreateChildQueueEnabled(D,true);
    conf.setAutoCreateChildQueueEnabled(E,true);
    conf.setAutoCreatedLeafQueueConfigCapacity(C,100f);
    conf.setAutoCreatedLeafQueueConfigMaxCapacity(C,100.0f);
    conf.setAutoCreatedLeafQueueConfigUserLimit(C,100);
    conf.setAutoCreatedLeafQueueConfigUserLimitFactor(C,3.0f);
    conf.setAutoCreatedLeafQueueConfigCapacity(D,100.0f);
    conf.setAutoCreatedLeafQueueConfigMaxCapacity(D,100.0f);
    conf.setAutoCreatedLeafQueueConfigUserLimit(D,100);
    conf.setAutoCreatedLeafQueueConfigUserLimitFactor(D,3.0f);
    conf.setAutoCreatedLeafQueueConfigCapacity(E,100.0f);
    conf.setAutoCreatedLeafQueueConfigMaxCapacity(E,100.0f);
    conf.setAutoCreatedLeafQueueConfigUserLimit(E,100);
    conf.setAutoCreatedLeafQueueConfigUserLimitFactor(E,3.0f);
    conf.setQueuePriority(CapacitySchedulerConfiguration.ROOT + ".c",1);
    conf.setQueuePriority(CapacitySchedulerConfiguration.ROOT + ".d",2);
    return conf;
  }
  @Test(timeout=60000) public void testSimpleSurgicalPreemptionOnAutoCreatedLeafQueues() throws Exception {
    setupQueueConfigurationForSimpleSurgicalPreemption(conf);
    testSimpleSurgicalPreemption(USER1,USER2,USER1,USER2);
  }
  @Test(timeout=600000) public void testPreemptionFromHighestPriorityManagedParentQueueAndOldestContainer() throws Exception {
    setupQueueConfigurationForPriorityBasedPreemption(conf);
    testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer(new String[]{USER1,USER3,USER0},new String[]{USER1,USER3,USER0});
  }
}
