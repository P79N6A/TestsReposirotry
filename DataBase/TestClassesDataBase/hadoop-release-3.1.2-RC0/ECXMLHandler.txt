/** 
 * SAX handler to verify EC Files and their policies.
 */
class ECXMLHandler extends DefaultHandler {
  private boolean isInode=false;
  private boolean isAttrRepl=false;
  private boolean isAttrName=false;
  private boolean isXAttrs=false;
  private boolean isAttrECPolicy=false;
  private boolean isAttrBlockType=false;
  private String currentInodeName;
  private String currentECPolicy;
  private String currentBlockType;
  private String currentRepl;
  @Override public void startElement(  String uri,  String localName,  String qName,  Attributes attributes) throws SAXException {
    super.startElement(uri,localName,qName,attributes);
    if (qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_INODE)) {
      isInode=true;
    }
 else     if (isInode && !isXAttrs && qName.equalsIgnoreCase(PBImageXmlWriter.SECTION_NAME)) {
      isAttrName=true;
    }
 else     if (isInode && qName.equalsIgnoreCase(PBImageXmlWriter.SECTION_REPLICATION)) {
      isAttrRepl=true;
    }
 else     if (isInode && qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_EC_POLICY_ID)) {
      isAttrECPolicy=true;
    }
 else     if (isInode && qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_BLOCK_TYPE)) {
      isAttrBlockType=true;
    }
 else     if (isInode && qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_XATTRS)) {
      isXAttrs=true;
    }
  }
  @Override public void endElement(  String uri,  String localName,  String qName) throws SAXException {
    super.endElement(uri,localName,qName);
    if (qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_INODE)) {
      if (currentInodeName != null && currentInodeName.length() > 0) {
        if (currentBlockType != null && currentBlockType.equalsIgnoreCase(BlockType.STRIPED.name())) {
          Assert.assertEquals("INode '" + currentInodeName + "' has unexpected EC Policy!",Byte.parseByte(currentECPolicy),SystemErasureCodingPolicies.XOR_2_1_POLICY_ID);
          Assert.assertEquals("INode '" + currentInodeName + "' has unexpected replication!",currentRepl,Short.toString(INodeFile.DEFAULT_REPL_FOR_STRIPED_BLOCKS));
        }
      }
      isInode=false;
      currentInodeName="";
      currentECPolicy="";
      currentRepl="";
    }
 else     if (qName.equalsIgnoreCase(PBImageXmlWriter.INODE_SECTION_XATTRS)) {
      isXAttrs=false;
    }
  }
  @Override public void characters(  char[] ch,  int start,  int length) throws SAXException {
    super.characters(ch,start,length);
    String value=new String(ch,start,length);
    if (isAttrName) {
      currentInodeName=value;
      isAttrName=false;
    }
 else     if (isAttrRepl) {
      currentRepl=value;
      isAttrRepl=false;
    }
 else     if (isAttrECPolicy) {
      currentECPolicy=value;
      isAttrECPolicy=false;
    }
 else     if (isAttrBlockType) {
      currentBlockType=value;
      isAttrBlockType=false;
    }
  }
}
