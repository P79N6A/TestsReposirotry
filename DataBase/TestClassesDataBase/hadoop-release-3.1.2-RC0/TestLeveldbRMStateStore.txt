public class TestLeveldbRMStateStore extends RMStateStoreTestBase {
  private static final File TEST_DIR=new File(System.getProperty("test.build.data",System.getProperty("java.io.tmpdir")),TestLeveldbRMStateStore.class.getName());
  private YarnConfiguration conf;
  private LeveldbRMStateStore stateStore=null;
  @Before public void setup() throws IOException {
    FileUtil.fullyDelete(TEST_DIR);
    conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_LEVELDB_STORE_PATH,TEST_DIR.toString());
  }
  @After public void cleanup() throws IOException {
    if (stateStore != null) {
      stateStore.close();
    }
    FileUtil.fullyDelete(TEST_DIR);
  }
  @Test(timeout=60000) public void testApps() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testRMAppStateStore(tester);
  }
  @Test(timeout=60000) public void testClientTokens() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testRMDTSecretManagerStateStore(tester);
  }
  @Test(timeout=60000) public void testVersion() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testCheckVersion(tester);
  }
  @Test(timeout=60000) public void testEpoch() throws Exception {
    conf.setLong(YarnConfiguration.RM_EPOCH,epoch);
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testEpoch(tester);
  }
  @Test(timeout=60000) public void testAppDeletion() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testAppDeletion(tester);
  }
  @Test(timeout=60000) public void testDeleteStore() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testDeleteStore(tester);
  }
  @Test(timeout=60000) public void testRemoveApplication() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testRemoveApplication(tester);
  }
  @Test(timeout=60000) public void testRemoveAttempt() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testRemoveAttempt(tester);
  }
  @Test(timeout=60000) public void testAMTokens() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testAMRMTokenSecretManagerStateStore(tester);
  }
  @Test(timeout=60000) public void testReservation() throws Exception {
    LeveldbStateStoreTester tester=new LeveldbStateStoreTester();
    testReservationStateStore(tester);
  }
  @Test(timeout=60000) public void testCompactionCycle() throws Exception {
    final DB mockdb=mock(DB.class);
    conf.setLong(YarnConfiguration.RM_LEVELDB_COMPACTION_INTERVAL_SECS,1);
    stateStore=new LeveldbRMStateStore(){
      @Override protected DB openDatabase() throws Exception {
        return mockdb;
      }
    }
;
    stateStore.init(conf);
    stateStore.start();
    verify(mockdb,timeout(10000)).compactRange((byte[])isNull(),(byte[])isNull());
  }
  @Test public void testBadKeyIteration() throws Exception {
    stateStore=new LeveldbRMStateStore();
    stateStore.init(conf);
    stateStore.start();
    DB db=stateStore.getDatabase();
    db.put(JniDBFactory.bytes("zzz"),JniDBFactory.bytes("z"));
    stateStore.loadState();
  }
class LeveldbStateStoreTester implements RMStateStoreHelper {
    @Override public RMStateStore getRMStateStore() throws Exception {
      if (stateStore != null) {
        stateStore.close();
      }
      stateStore=new LeveldbRMStateStore();
      stateStore.init(conf);
      stateStore.start();
      stateStore.dispatcher.disableExitOnDispatchException();
      return stateStore;
    }
    @Override public boolean isFinalStateValid() throws Exception {
      return stateStore.getNumEntriesInDatabase() == 6;
    }
    @Override public void writeVersion(    Version version) throws Exception {
      stateStore.dbStoreVersion(version);
    }
    @Override public Version getCurrentVersion() throws Exception {
      return stateStore.getCurrentVersion();
    }
    @Override public boolean appExists(    RMApp app) throws Exception {
      if (stateStore.isClosed()) {
        getRMStateStore();
      }
      return stateStore.loadRMAppState(app.getApplicationId()) != null;
    }
    @Override public boolean attemptExists(    RMAppAttempt attempt) throws Exception {
      if (stateStore.isClosed()) {
        getRMStateStore();
      }
      return stateStore.loadRMAppAttemptState(attempt.getAppAttemptId()) != null;
    }
  }
}
