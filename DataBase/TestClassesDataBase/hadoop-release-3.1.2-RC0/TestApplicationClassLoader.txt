public class TestApplicationClassLoader {
  private static File testDir=GenericTestUtils.getTestDir("appclassloader");
  @Before public void setUp(){
    FileUtil.fullyDelete(testDir);
    testDir.mkdirs();
  }
  @Test public void testConstructUrlsFromClasspath() throws Exception {
    File file=new File(testDir,"file");
    assertTrue("Create file",file.createNewFile());
    File dir=new File(testDir,"dir");
    assertTrue("Make dir",dir.mkdir());
    File jarsDir=new File(testDir,"jarsdir");
    assertTrue("Make jarsDir",jarsDir.mkdir());
    File nonJarFile=new File(jarsDir,"nonjar");
    assertTrue("Create non-jar file",nonJarFile.createNewFile());
    File jarFile=new File(jarsDir,"a.jar");
    assertTrue("Create jar file",jarFile.createNewFile());
    File nofile=new File(testDir,"nofile");
    StringBuilder cp=new StringBuilder();
    cp.append(file.getAbsolutePath()).append(File.pathSeparator).append(dir.getAbsolutePath()).append(File.pathSeparator).append(jarsDir.getAbsolutePath() + "/*").append(File.pathSeparator).append(nofile.getAbsolutePath()).append(File.pathSeparator).append(nofile.getAbsolutePath() + "/*").append(File.pathSeparator);
    URL[] urls=constructUrlsFromClasspath(cp.toString());
    assertEquals(3,urls.length);
    assertEquals(file.toURI().toURL(),urls[0]);
    assertEquals(dir.toURI().toURL(),urls[1]);
    assertEquals(jarFile.toURI().toURL(),urls[2]);
  }
  @Test public void testIsSystemClass(){
    testIsSystemClassInternal("");
  }
  @Test public void testIsSystemNestedClass(){
    testIsSystemClassInternal("$Klass");
  }
  private void testIsSystemClassInternal(  String nestedClass){
    assertFalse(isSystemClass("org.example.Foo" + nestedClass,null));
    assertTrue(isSystemClass("org.example.Foo" + nestedClass,classes("org.example.Foo")));
    assertTrue(isSystemClass("/org.example.Foo" + nestedClass,classes("org.example.Foo")));
    assertTrue(isSystemClass("org.example.Foo" + nestedClass,classes("org.example.")));
    assertTrue(isSystemClass("net.example.Foo" + nestedClass,classes("org.example.,net.example.")));
    assertFalse(isSystemClass("org.example.Foo" + nestedClass,classes("-org.example.Foo,org.example.")));
    assertTrue(isSystemClass("org.example.Bar" + nestedClass,classes("-org.example.Foo.,org.example.")));
    assertFalse(isSystemClass("org.example.Foo" + nestedClass,classes("org.example.,-org.example.Foo")));
    assertFalse(isSystemClass("org.example.Foo" + nestedClass,classes("org.example.Foo,-org.example.Foo")));
  }
  private List<String> classes(  String classes){
    return Lists.newArrayList(Splitter.on(',').split(classes));
  }
  @Test public void testGetResource() throws IOException {
    URL testJar=makeTestJar().toURI().toURL();
    ClassLoader currentClassLoader=getClass().getClassLoader();
    ClassLoader appClassloader=new ApplicationClassLoader(new URL[]{testJar},currentClassLoader,null);
    assertNull("Resource should be null for current classloader",currentClassLoader.getResourceAsStream("resource.txt"));
    InputStream in=appClassloader.getResourceAsStream("resource.txt");
    assertNotNull("Resource should not be null for app classloader",in);
    assertEquals("hello",IOUtils.toString(in));
  }
  private File makeTestJar() throws IOException {
    File jarFile=new File(testDir,"test.jar");
    JarOutputStream out=new JarOutputStream(new FileOutputStream(jarFile));
    ZipEntry entry=new ZipEntry("resource.txt");
    out.putNextEntry(entry);
    out.write("hello".getBytes());
    out.closeEntry();
    out.close();
    return jarFile;
  }
}
