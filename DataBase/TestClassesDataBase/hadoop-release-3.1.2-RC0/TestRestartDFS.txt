/** 
 * A JUnit test for checking if restarting DFS preserves integrity.
 */
public class TestRestartDFS {
  public void runTests(  Configuration conf,  boolean serviceTest) throws Exception {
    MiniDFSCluster cluster=null;
    DFSTestUtil files=new DFSTestUtil.Builder().setName("TestRestartDFS").setNumFiles(20).build();
    final String dir="/srcdat";
    final Path rootpath=new Path("/");
    final Path dirpath=new Path(dir);
    long rootmtime;
    FileStatus rootstatus;
    FileStatus dirstatus;
    try {
      if (serviceTest) {
        conf.set(DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,"localhost:0");
      }
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
      FileSystem fs=cluster.getFileSystem();
      files.createFiles(fs,dir);
      rootmtime=fs.getFileStatus(rootpath).getModificationTime();
      rootstatus=fs.getFileStatus(dirpath);
      dirstatus=fs.getFileStatus(dirpath);
      fs.setOwner(rootpath,rootstatus.getOwner() + "_XXX",null);
      fs.setOwner(dirpath,null,dirstatus.getGroup() + "_XXX");
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
    try {
      if (serviceTest) {
        conf.set(DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,"localhost:0");
      }
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).format(false).build();
      FileSystem fs=cluster.getFileSystem();
      assertTrue("Filesystem corrupted after restart.",files.checkFiles(fs,dir));
      final FileStatus newrootstatus=fs.getFileStatus(rootpath);
      assertEquals(rootmtime,newrootstatus.getModificationTime());
      assertEquals(rootstatus.getOwner() + "_XXX",newrootstatus.getOwner());
      assertEquals(rootstatus.getGroup(),newrootstatus.getGroup());
      final FileStatus newdirstatus=fs.getFileStatus(dirpath);
      assertEquals(dirstatus.getOwner(),newdirstatus.getOwner());
      assertEquals(dirstatus.getGroup() + "_XXX",newdirstatus.getGroup());
      rootmtime=fs.getFileStatus(rootpath).getModificationTime();
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
    try {
      if (serviceTest) {
        conf.set(DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,"localhost:0");
      }
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).format(false).build();
      FileSystem fs=cluster.getFileSystem();
      assertTrue("Filesystem corrupted after restart.",files.checkFiles(fs,dir));
      final FileStatus newrootstatus=fs.getFileStatus(rootpath);
      assertEquals(rootmtime,newrootstatus.getModificationTime());
      assertEquals(rootstatus.getOwner() + "_XXX",newrootstatus.getOwner());
      assertEquals(rootstatus.getGroup(),newrootstatus.getGroup());
      final FileStatus newdirstatus=fs.getFileStatus(dirpath);
      assertEquals(dirstatus.getOwner(),newdirstatus.getOwner());
      assertEquals(dirstatus.getGroup() + "_XXX",newdirstatus.getGroup());
      files.cleanup(fs,dir);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * check if DFS remains in proper condition after a restart 
 */
  @Test public void testRestartDFS() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    runTests(conf,false);
  }
  /** 
 * check if DFS remains in proper condition after a restart  this rerun is with 2 ports enabled for RPC in the namenode
 */
  @Test public void testRestartDualPortDFS() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    runTests(conf,true);
  }
}
