/** 
 * Simple test of  {@link WeightedLocalityPolicyManager}.
 */
public class TestWeightedLocalityPolicyManager extends BasePolicyManagerTest {
  private WeightedPolicyInfo policyInfo;
  @Before public void setup(){
    wfp=new WeightedLocalityPolicyManager();
    wfp.setQueue("queue1");
    SubClusterId sc1=SubClusterId.newInstance("sc1");
    SubClusterId sc2=SubClusterId.newInstance("sc2");
    policyInfo=new WeightedPolicyInfo();
    Map<SubClusterIdInfo,Float> routerWeights=new HashMap<>();
    routerWeights.put(new SubClusterIdInfo(sc1),0.2f);
    routerWeights.put(new SubClusterIdInfo(sc2),0.8f);
    policyInfo.setRouterPolicyWeights(routerWeights);
    Map<SubClusterIdInfo,Float> amrmWeights=new HashMap<>();
    amrmWeights.put(new SubClusterIdInfo(sc1),0.2f);
    amrmWeights.put(new SubClusterIdInfo(sc2),0.8f);
    policyInfo.setAMRMPolicyWeights(amrmWeights);
    ((WeightedLocalityPolicyManager)wfp).setWeightedPolicyInfo(policyInfo);
    expectedPolicyManager=WeightedLocalityPolicyManager.class;
    expectedAMRMProxyPolicy=LocalityMulticastAMRMProxyPolicy.class;
    expectedRouterPolicy=WeightedRandomRouterPolicy.class;
  }
  @Test public void testPolicyInfoSetCorrectly() throws Exception {
    serializeAndDeserializePolicyManager(wfp,expectedPolicyManager,expectedAMRMProxyPolicy,expectedRouterPolicy);
    Assert.assertEquals(((WeightedLocalityPolicyManager)wfp).getWeightedPolicyInfo(),policyInfo);
  }
}
