public class TestApplicationClientProtocolRecords {
  @Test public void testCLCPBImplNullEnv() throws IOException {
    Map<String,LocalResource> localResources=Collections.emptyMap();
    Map<String,String> environment=new HashMap<String,String>();
    List<String> commands=Collections.emptyList();
    Map<String,ByteBuffer> serviceData=Collections.emptyMap();
    Credentials containerCreds=new Credentials();
    DataOutputBuffer dob=new DataOutputBuffer();
    containerCreds.writeTokenStorageToStream(dob);
    ByteBuffer containerTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    Map<ApplicationAccessType,String> acls=Collections.emptyMap();
    environment.put("testCLCPBImplNullEnv",null);
    ContainerLaunchContext clc=ContainerLaunchContext.newInstance(localResources,environment,commands,serviceData,containerTokens,acls);
    ContainerLaunchContext clcProto=new ContainerLaunchContextPBImpl(((ContainerLaunchContextPBImpl)clc).getProto());
    Assert.assertEquals("",clcProto.getEnvironment().get("testCLCPBImplNullEnv"));
  }
  @Test public void testCLCPBImplNullResourceURL() throws IOException {
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
    try {
      LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
      rsrc_alpha.setResource(null);
      rsrc_alpha.setSize(-1);
      rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
      rsrc_alpha.setType(LocalResourceType.FILE);
      rsrc_alpha.setTimestamp(System.currentTimeMillis());
      Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
      localResources.put("null_url_resource",rsrc_alpha);
      ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
      containerLaunchContext.setLocalResources(localResources);
      Assert.fail("Setting an invalid local resource should be an error!");
    }
 catch (    NullPointerException e) {
      Assert.assertTrue(e.getMessage().contains("Null resource URL for local resource"));
    }
  }
  @Test public void testCLCPBImplNullResourceType() throws IOException {
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
    try {
      LocalResource resource=recordFactory.newRecordInstance(LocalResource.class);
      resource.setResource(URL.fromPath(new Path(".")));
      resource.setSize(-1);
      resource.setVisibility(LocalResourceVisibility.APPLICATION);
      resource.setType(null);
      resource.setTimestamp(System.currentTimeMillis());
      Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
      localResources.put("null_type_resource",resource);
      ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
      containerLaunchContext.setLocalResources(localResources);
      Assert.fail("Setting an invalid local resource should be an error!");
    }
 catch (    NullPointerException e) {
      Assert.assertTrue(e.getMessage().contains("Null resource type for local resource"));
    }
  }
  @Test public void testCLCPBImplNullResourceVisibility() throws IOException {
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
    try {
      LocalResource resource=recordFactory.newRecordInstance(LocalResource.class);
      resource.setResource(URL.fromPath(new Path(".")));
      resource.setSize(-1);
      resource.setVisibility(null);
      resource.setType(LocalResourceType.FILE);
      resource.setTimestamp(System.currentTimeMillis());
      Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
      localResources.put("null_visibility_resource",resource);
      ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
      containerLaunchContext.setLocalResources(localResources);
      Assert.fail("Setting an invalid local resource should be an error!");
    }
 catch (    NullPointerException e) {
      Assert.assertTrue(e.getMessage().contains("Null resource visibility for local resource"));
    }
  }
}
