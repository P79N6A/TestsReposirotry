class DFSClientReader implements Runnable {
  DFSClient client;
  final Configuration conf;
  final byte[] expected_sha;
  FileSystem fs;
  final Path filePath;
  final MiniDFSCluster cluster;
  final int len;
  final Counter counter;
  DFSClientReader(  Path file,  MiniDFSCluster cluster,  byte[] hash_sha,  int fileLen,  Counter cnt){
    filePath=file;
    this.cluster=cluster;
    counter=cnt;
    len=fileLen;
    conf=new HdfsConfiguration();
    expected_sha=hash_sha;
    try {
      cluster.waitActive();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  @Override public void run(){
    try {
      fs=cluster.getNewFileSystemInstance(0);
      int bufferSize=len;
      byte[] buf=new byte[bufferSize];
      InputStream in=fs.open(filePath,bufferSize);
      IOUtils.readFully(in,buf,0,bufferSize);
      MessageDigest m=MessageDigest.getInstance("SHA");
      m.update(buf,0,bufferSize);
      byte[] hash_sha=m.digest();
      buf=null;
      in.close();
      fs.close();
      assertTrue("hashed keys are not the same size",hash_sha.length == expected_sha.length);
      assertTrue("hashed keys are not equal",Arrays.equals(hash_sha,expected_sha));
      counter.inc();
      LOG.info("Thread correctly read the block.");
    }
 catch (    BlockMissingException e) {
      LOG.info("Bad - BlockMissingException is caught.");
      e.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
