public class TestFifoOrderingPolicy {
  @Test public void testFifoOrderingPolicy(){
    FifoOrderingPolicy<MockSchedulableEntity> policy=new FifoOrderingPolicy<MockSchedulableEntity>();
    MockSchedulableEntity r1=new MockSchedulableEntity();
    MockSchedulableEntity r2=new MockSchedulableEntity();
    Assert.assertEquals(policy.getComparator().compare(r1,r2),0);
    r1.setSerial(1);
    Assert.assertEquals(policy.getComparator().compare(r1,r2),1);
    r2.setSerial(2);
    Assert.assertEquals(policy.getComparator().compare(r1,r2),-1);
  }
  @Test public void testIterators(){
    OrderingPolicy<MockSchedulableEntity> schedOrder=new FifoOrderingPolicy<MockSchedulableEntity>();
    MockSchedulableEntity msp1=new MockSchedulableEntity();
    MockSchedulableEntity msp2=new MockSchedulableEntity();
    MockSchedulableEntity msp3=new MockSchedulableEntity();
    msp1.setSerial(3);
    msp2.setSerial(2);
    msp3.setSerial(1);
    schedOrder.addSchedulableEntity(msp1);
    schedOrder.addSchedulableEntity(msp2);
    schedOrder.addSchedulableEntity(msp3);
    checkSerials(schedOrder.getAssignmentIterator(),new long[]{1,2,3});
    checkSerials(schedOrder.getPreemptionIterator(),new long[]{3,2,1});
  }
  public void checkSerials(  Iterator<MockSchedulableEntity> si,  long[] serials){
    for (int i=0; i < serials.length; i++) {
      Assert.assertEquals(si.next().getSerial(),serials[i]);
    }
  }
  @Test public void testFifoOrderingPolicyAlongWithPriorty(){
    FifoOrderingPolicy<MockSchedulableEntity> policy=new FifoOrderingPolicy<MockSchedulableEntity>();
    MockSchedulableEntity r1=new MockSchedulableEntity();
    MockSchedulableEntity r2=new MockSchedulableEntity();
    Priority p1=Priority.newInstance(1);
    Priority p2=Priority.newInstance(0);
    Assert.assertEquals(0,policy.getComparator().compare(r1,r2));
    r2.setApplicationPriority(p2);
    Assert.assertEquals(-1,policy.getComparator().compare(r1,r2));
    r2.setApplicationPriority(null);
    r1.setApplicationPriority(p1);
    Assert.assertEquals(1,policy.getComparator().compare(r1,r2));
    r1.setApplicationPriority(p1);
    r2.setApplicationPriority(p2);
    Assert.assertEquals(-1,policy.getComparator().compare(r1,r2));
  }
}
