/** 
 * This clas tests  {@code NoOverCommitPolicy} sharing policy.
 */
@RunWith(value=Parameterized.class) @NotThreadSafe @SuppressWarnings("VisibilityModifier") public class TestNoOverCommitPolicy extends BaseSharingPolicyTest {
  final static long ONEHOUR=3600 * 1000;
  final static String TWOHOURPERIOD="7200000";
  @Parameterized.Parameters(name="Duration {0}, height {1}," + " submissions {2}, periodic {3})") public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{ONEHOUR,0.25,1,null,null},{ONEHOUR,0.25,1,TWOHOURPERIOD,null},{ONEHOUR,1,1,null,null},{ONEHOUR,1,1,TWOHOURPERIOD,null},{ONEHOUR,1.1,1,null,ResourceOverCommitException.class},{ONEHOUR,1.1,1,TWOHOURPERIOD,ResourceOverCommitException.class},{ONEHOUR,0.25,4,null,null},{ONEHOUR,0.25,4,TWOHOURPERIOD,null},{ONEHOUR,0.25,5,null,ResourceOverCommitException.class},{ONEHOUR,0.25,5,TWOHOURPERIOD,ResourceOverCommitException.class}});
  }
  @Override public SharingPolicy getInitializedPolicy(){
    String reservationQ=ReservationSystemTestUtil.getFullReservationQueueName();
    conf=new CapacitySchedulerConfiguration();
    SharingPolicy policy=new NoOverCommitPolicy();
    policy.init(reservationQ,conf);
    return policy;
  }
  @Test public void testAllocation() throws IOException, PlanningException {
    runTest();
  }
}
