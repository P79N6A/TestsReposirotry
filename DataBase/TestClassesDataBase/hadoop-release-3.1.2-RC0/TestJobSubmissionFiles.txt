/** 
 * Tests for JobSubmissionFiles Utility class.
 */
public class TestJobSubmissionFiles {
  final private static String USER_1="user1@HADOOP.APACHE.ORG";
  final private static String USER_1_SHORT_NAME="user1";
  final private static String GROUP1_NAME="group1";
  final private static String GROUP2_NAME="group2";
  final private static String GROUP3_NAME="group3";
  final private static String[] GROUP_NAMES=new String[]{GROUP1_NAME,GROUP2_NAME,GROUP3_NAME};
  @Test public void testGetStagingDirWhenFullFileOwnerNameAndFullUserName() throws IOException, InterruptedException {
    Cluster cluster=mock(Cluster.class);
    Configuration conf=new Configuration();
    Path stagingPath=mock(Path.class);
    UserGroupInformation user=UserGroupInformation.createUserForTesting(USER_1,GROUP_NAMES);
    assertEquals(USER_1,user.getUserName());
    FileSystem fs=new FileSystemTestHelper.MockFileSystem();
    when(cluster.getStagingAreaDir()).thenReturn(stagingPath);
    when(stagingPath.getFileSystem(conf)).thenReturn(fs);
    String stagingDirOwner=USER_1.toLowerCase();
    FileStatus fileStatus=new FileStatus(1,true,1,1,100L,100L,FsPermission.getDefault(),stagingDirOwner,stagingDirOwner,stagingPath);
    when(fs.getFileStatus(stagingPath)).thenReturn(fileStatus);
    assertEquals(stagingPath,JobSubmissionFiles.getStagingDir(cluster,conf,user));
    stagingDirOwner=USER_1;
    fileStatus=new FileStatus(1,true,1,1,100L,100L,FsPermission.getDefault(),stagingDirOwner,stagingDirOwner,stagingPath);
    when(fs.getFileStatus(stagingPath)).thenReturn(fileStatus);
    assertEquals(stagingPath,JobSubmissionFiles.getStagingDir(cluster,conf,user));
  }
  @Test(expected=IOException.class) public void testGetStagingWhenFileOwnerNameAndCurrentUserNameDoesNotMatch() throws IOException, InterruptedException {
    Cluster cluster=mock(Cluster.class);
    Configuration conf=new Configuration();
    String stagingDirOwner="someuser";
    Path stagingPath=mock(Path.class);
    UserGroupInformation user=UserGroupInformation.createUserForTesting(USER_1,GROUP_NAMES);
    assertEquals(USER_1,user.getUserName());
    FileSystem fs=new FileSystemTestHelper.MockFileSystem();
    FileStatus fileStatus=new FileStatus(1,true,1,1,100L,100L,FsPermission.getDefault(),stagingDirOwner,stagingDirOwner,stagingPath);
    when(stagingPath.getFileSystem(conf)).thenReturn(fs);
    when(fs.getFileStatus(stagingPath)).thenReturn(fileStatus);
    when(cluster.getStagingAreaDir()).thenReturn(stagingPath);
    assertEquals(stagingPath,JobSubmissionFiles.getStagingDir(cluster,conf,user));
  }
  @Test public void testGetStagingDirWhenShortFileOwnerNameAndFullUserName() throws IOException, InterruptedException {
    Cluster cluster=mock(Cluster.class);
    Configuration conf=new Configuration();
    String stagingDirOwner=USER_1_SHORT_NAME;
    Path stagingPath=mock(Path.class);
    UserGroupInformation user=UserGroupInformation.createUserForTesting(USER_1,GROUP_NAMES);
    assertEquals(USER_1,user.getUserName());
    FileSystem fs=new FileSystemTestHelper.MockFileSystem();
    FileStatus fileStatus=new FileStatus(1,true,1,1,100L,100L,FsPermission.getDefault(),stagingDirOwner,stagingDirOwner,stagingPath);
    when(stagingPath.getFileSystem(conf)).thenReturn(fs);
    when(fs.getFileStatus(stagingPath)).thenReturn(fileStatus);
    when(cluster.getStagingAreaDir()).thenReturn(stagingPath);
    assertEquals(stagingPath,JobSubmissionFiles.getStagingDir(cluster,conf,user));
  }
  @Test public void testGetStagingDirWhenShortFileOwnerNameAndShortUserName() throws IOException, InterruptedException {
    Cluster cluster=mock(Cluster.class);
    Configuration conf=new Configuration();
    String stagingDirOwner=USER_1_SHORT_NAME;
    Path stagingPath=mock(Path.class);
    UserGroupInformation user=UserGroupInformation.createUserForTesting(USER_1_SHORT_NAME,GROUP_NAMES);
    assertEquals(USER_1_SHORT_NAME,user.getUserName());
    FileSystem fs=new FileSystemTestHelper.MockFileSystem();
    FileStatus fileStatus=new FileStatus(1,true,1,1,100L,100L,FsPermission.getDefault(),stagingDirOwner,stagingDirOwner,stagingPath);
    when(stagingPath.getFileSystem(conf)).thenReturn(fs);
    when(fs.getFileStatus(stagingPath)).thenReturn(fileStatus);
    when(cluster.getStagingAreaDir()).thenReturn(stagingPath);
    assertEquals(stagingPath,JobSubmissionFiles.getStagingDir(cluster,conf,user));
  }
}
