/** 
 * Test cases for the handling of edit logs during failover and startup of the standby node.
 */
public class TestEditLogsDuringFailover {
  private static final Log LOG=LogFactory.getLog(TestEditLogsDuringFailover.class);
  private static final int NUM_DIRS_IN_LOG=5;
static {
    EditLogFileOutputStream.setShouldSkipFsyncForTesting(true);
  }
  @Test public void testStartup() throws Exception {
    Configuration conf=new Configuration();
    HAUtil.setAllowStandbyReads(conf,true);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
    try {
      List<URI> allDirs=Lists.newArrayList();
      allDirs.addAll(cluster.getNameDirs(0));
      allDirs.addAll(cluster.getNameDirs(1));
      allDirs.add(cluster.getSharedEditsDir(0,1));
      assertNoEditFiles(allDirs);
      cluster.transitionToActive(0);
      assertEditFiles(cluster.getNameDirs(0),NNStorage.getInProgressEditsFileName(1));
      assertEditFiles(Collections.singletonList(cluster.getSharedEditsDir(0,1)),NNStorage.getInProgressEditsFileName(1));
      assertNoEditFiles(cluster.getNameDirs(1));
      cluster.getNameNode(0).getRpcServer().mkdirs("/test",FsPermission.createImmutable((short)0755),true);
      cluster.restartNameNode(1);
      assertEditFiles(cluster.getNameDirs(0),NNStorage.getInProgressEditsFileName(1));
      assertEditFiles(Collections.singletonList(cluster.getSharedEditsDir(0,1)),NNStorage.getInProgressEditsFileName(1));
      assertNoEditFiles(cluster.getNameDirs(1));
      assertNull(getFileInfo(cluster.getNameNode(1),"/test",true,false,false));
      cluster.getNameNode(0).getRpcServer().mkdirs("/test2",FsPermission.createImmutable((short)0755),true);
      cluster.restartNameNode(0);
      cluster.transitionToActive(1);
      assertNotNull(getFileInfo(cluster.getNameNode(1),"/test",true,false,false));
      assertNotNull(getFileInfo(cluster.getNameNode(1),"/test2",true,false,false));
    }
  finally {
      cluster.shutdown();
    }
  }
  private void testFailoverFinalizesAndReadsInProgress(  boolean partialTxAtEnd) throws Exception {
    Configuration conf=new Configuration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
    try {
      URI sharedUri=cluster.getSharedEditsDir(0,1);
      File sharedDir=new File(sharedUri.getPath(),"current");
      FSNamesystem fsn=cluster.getNamesystem(0);
      FSImageTestUtil.createAbortedLogWithMkdirs(sharedDir,NUM_DIRS_IN_LOG,1,fsn.getFSDirectory().getLastInodeId() + 1);
      assertEditFiles(Collections.singletonList(sharedUri),NNStorage.getInProgressEditsFileName(1));
      if (partialTxAtEnd) {
        FileOutputStream outs=null;
        try {
          File editLogFile=new File(sharedDir,NNStorage.getInProgressEditsFileName(1));
          outs=new FileOutputStream(editLogFile,true);
          outs.write(new byte[]{0x18,0x00,0x00,0x00});
          LOG.error("editLogFile = " + editLogFile);
        }
  finally {
          IOUtils.cleanup(LOG,outs);
        }
      }
      cluster.transitionToActive(0);
      String testPath="/dir" + NUM_DIRS_IN_LOG;
      assertNotNull(cluster.getNameNode(0).getRpcServer().getFileInfo(testPath));
      assertEditFiles(Collections.singletonList(sharedUri),NNStorage.getFinalizedEditsFileName(1,NUM_DIRS_IN_LOG + 1),NNStorage.getInProgressEditsFileName(NUM_DIRS_IN_LOG + 2));
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test public void testFailoverFinalizesAndReadsInProgressSimple() throws Exception {
    testFailoverFinalizesAndReadsInProgress(false);
  }
  @Test public void testFailoverFinalizesAndReadsInProgressWithPartialTxAtEnd() throws Exception {
    testFailoverFinalizesAndReadsInProgress(true);
  }
  /** 
 * Check that no edits files are present in the given storage dirs.
 */
  private void assertNoEditFiles(  Iterable<URI> dirs) throws IOException {
    assertEditFiles(dirs,new String[]{});
  }
  /** 
 * Check that the given list of edits files are present in the given storage dirs.
 */
  private void assertEditFiles(  Iterable<URI> dirs,  String... files) throws IOException {
    for (    URI u : dirs) {
      File editDirRoot=new File(u.getPath());
      File editDir=new File(editDirRoot,"current");
      GenericTestUtils.assertExists(editDir);
      if (files.length == 0) {
        LOG.info("Checking no edit files exist in " + editDir);
      }
 else {
        LOG.info("Checking for following edit files in " + editDir + ": "+ Joiner.on(",").join(files));
      }
      GenericTestUtils.assertGlobEquals(editDir,"edits_.*",files);
    }
  }
}
