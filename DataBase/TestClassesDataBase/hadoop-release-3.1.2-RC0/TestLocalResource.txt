public class TestLocalResource {
  static org.apache.hadoop.yarn.api.records.LocalResource getYarnResource(  Path p,  long size,  long timestamp,  LocalResourceType type,  LocalResourceVisibility state,  String pattern) throws URISyntaxException {
    org.apache.hadoop.yarn.api.records.LocalResource ret=RecordFactoryProvider.getRecordFactory(null).newRecordInstance(org.apache.hadoop.yarn.api.records.LocalResource.class);
    ret.setResource(URL.fromURI(p.toUri()));
    ret.setSize(size);
    ret.setTimestamp(timestamp);
    ret.setType(type);
    ret.setVisibility(state);
    ret.setPattern(pattern);
    return ret;
  }
  static void checkEqual(  LocalResourceRequest a,  LocalResourceRequest b){
    assertEquals(a,b);
    assertEquals(a.hashCode(),b.hashCode());
    assertEquals(0,a.compareTo(b));
    assertEquals(0,b.compareTo(a));
  }
  static void checkNotEqual(  LocalResourceRequest a,  LocalResourceRequest b){
    assertFalse(a.equals(b));
    assertFalse(b.equals(a));
    assertFalse(a.hashCode() == b.hashCode());
    assertFalse(0 == a.compareTo(b));
    assertFalse(0 == b.compareTo(a));
  }
  @Test public void testResourceEquality() throws URISyntaxException {
    Random r=new Random();
    long seed=r.nextLong();
    r.setSeed(seed);
    System.out.println("SEED: " + seed);
    long basetime=r.nextLong() >>> 2;
    org.apache.hadoop.yarn.api.records.LocalResource yA=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,FILE,PUBLIC,null);
    org.apache.hadoop.yarn.api.records.LocalResource yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,FILE,PUBLIC,null);
    final LocalResourceRequest a=new LocalResourceRequest(yA);
    LocalResourceRequest b=new LocalResourceRequest(yA);
    checkEqual(a,b);
    b=new LocalResourceRequest(yB);
    checkEqual(a,b);
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,FILE,PRIVATE,null);
    b=new LocalResourceRequest(yB);
    checkEqual(a,b);
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),0,basetime,FILE,PRIVATE,null);
    b=new LocalResourceRequest(yB);
    checkEqual(a,b);
    yB=getYarnResource(new Path("hdfs://dingo.org:80/foobar"),0,basetime,ARCHIVE,PUBLIC,null);
    b=new LocalResourceRequest(yB);
    checkNotEqual(a,b);
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),0,basetime,ARCHIVE,PUBLIC,null);
    b=new LocalResourceRequest(yB);
    checkNotEqual(a,b);
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),0,basetime + 1,FILE,PUBLIC,null);
    b=new LocalResourceRequest(yB);
    checkNotEqual(a,b);
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),0,basetime + 1,FILE,PUBLIC,"^/foo/.*");
    b=new LocalResourceRequest(yB);
    checkNotEqual(a,b);
  }
  @Test public void testResourceOrder() throws URISyntaxException {
    Random r=new Random();
    long seed=r.nextLong();
    r.setSeed(seed);
    System.out.println("SEED: " + seed);
    long basetime=r.nextLong() >>> 2;
    org.apache.hadoop.yarn.api.records.LocalResource yA=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,FILE,PUBLIC,"^/foo/.*");
    final LocalResourceRequest a=new LocalResourceRequest(yA);
    org.apache.hadoop.yarn.api.records.LocalResource yB=getYarnResource(new Path("http://yak.org:80/foobaz"),-1,basetime,FILE,PUBLIC,"^/foo/.*");
    LocalResourceRequest b=new LocalResourceRequest(yB);
    assertTrue(0 > a.compareTo(b));
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime + 1,FILE,PUBLIC,"^/foo/.*");
    b=new LocalResourceRequest(yB);
    assertTrue(0 > a.compareTo(b));
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,ARCHIVE,PUBLIC,"^/foo/.*");
    b=new LocalResourceRequest(yB);
    assertTrue(0 != a.compareTo(b));
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,ARCHIVE,PUBLIC,"^/food/.*");
    b=new LocalResourceRequest(yB);
    assertTrue(0 != a.compareTo(b));
    yB=getYarnResource(new Path("http://yak.org:80/foobar"),-1,basetime,ARCHIVE,PUBLIC,null);
    b=new LocalResourceRequest(yB);
    assertTrue(0 != a.compareTo(b));
  }
}
