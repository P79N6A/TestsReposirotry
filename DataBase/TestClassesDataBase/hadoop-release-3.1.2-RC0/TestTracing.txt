public class TestTracing {
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem dfs;
  private Tracer prevTracer;
  private final static Configuration TRACING_CONF;
  private final static Configuration NO_TRACING_CONF;
static {
    NO_TRACING_CONF=new Configuration();
    NO_TRACING_CONF.setLong("dfs.blocksize",100 * 1024);
    TRACING_CONF=new Configuration(NO_TRACING_CONF);
    TRACING_CONF.set(CommonConfigurationKeys.FS_CLIENT_HTRACE_PREFIX + Tracer.SPAN_RECEIVER_CLASSES_KEY,SetSpanReceiver.class.getName());
    TRACING_CONF.set(CommonConfigurationKeys.FS_CLIENT_HTRACE_PREFIX + Tracer.SAMPLER_CLASSES_KEY,"AlwaysSampler");
  }
  @Test public void testTracing() throws Exception {
    String fileName="testTracingDisabled.dat";
    writeTestFile(fileName);
    Assert.assertEquals(0,SetSpanReceiver.size());
    readTestFile(fileName);
    Assert.assertEquals(0,SetSpanReceiver.size());
    writeTestFile("testReadTraceHooks.dat");
    FsTracer.clear();
    Tracer tracer=FsTracer.get(TRACING_CONF);
    writeWithTracing(tracer);
    readWithTracing(tracer);
  }
  private void writeWithTracing(  Tracer tracer) throws Exception {
    long startTime=System.currentTimeMillis();
    TraceScope ts=tracer.newScope("testWriteTraceHooks");
    writeTestFile("testWriteTraceHooks.dat");
    long endTime=System.currentTimeMillis();
    ts.close();
    String[] expectedSpanNames={"testWriteTraceHooks","ClientProtocol#create","ClientNamenodeProtocol#create","ClientProtocol#fsync","ClientNamenodeProtocol#fsync","ClientProtocol#complete","ClientNamenodeProtocol#complete","newStreamForCreate","DFSOutputStream#write","DFSOutputStream#close","dataStreamer","OpWriteBlockProto","ClientProtocol#addBlock","ClientNamenodeProtocol#addBlock"};
    SetSpanReceiver.assertSpanNamesFound(expectedSpanNames);
    Map<String,List<Span>> map=SetSpanReceiver.getMap();
    Span s=map.get("testWriteTraceHooks").get(0);
    Assert.assertNotNull(s);
    long spanStart=s.getStartTimeMillis();
    long spanEnd=s.getStopTimeMillis();
    String[] spansInTopTrace={"testWriteTraceHooks","ClientProtocol#create","ClientNamenodeProtocol#create","ClientProtocol#fsync","ClientNamenodeProtocol#fsync","ClientProtocol#complete","ClientNamenodeProtocol#complete","newStreamForCreate","DFSOutputStream#write","DFSOutputStream#close"};
    for (    String desc : spansInTopTrace) {
      for (      Span span : map.get(desc)) {
        Assert.assertEquals(ts.getSpan().getSpanId().getHigh(),span.getSpanId().getHigh());
      }
    }
    Assert.assertEquals("called",map.get("ClientProtocol#create").get(0).getTimelineAnnotations().get(0).getMessage());
    SetSpanReceiver.clear();
  }
  private void readWithTracing(  Tracer tracer) throws Exception {
    long startTime=System.currentTimeMillis();
    TraceScope ts=tracer.newScope("testReadTraceHooks");
    readTestFile("testReadTraceHooks.dat");
    ts.close();
    long endTime=System.currentTimeMillis();
    String[] expectedSpanNames={"testReadTraceHooks","ClientProtocol#getBlockLocations","ClientNamenodeProtocol#getBlockLocations","OpReadBlockProto"};
    SetSpanReceiver.assertSpanNamesFound(expectedSpanNames);
    Map<String,List<Span>> map=SetSpanReceiver.getMap();
    Span s=map.get("testReadTraceHooks").get(0);
    Assert.assertNotNull(s);
    long spanStart=s.getStartTimeMillis();
    long spanEnd=s.getStopTimeMillis();
    Assert.assertTrue(spanStart - startTime < 100);
    Assert.assertTrue(spanEnd - endTime < 100);
    for (    Span span : SetSpanReceiver.getSpans()) {
      System.out.println(span.toJson());
    }
    for (    Span span : SetSpanReceiver.getSpans()) {
      Assert.assertEquals(ts.getSpan().getSpanId().getHigh(),span.getSpanId().getHigh());
    }
    SetSpanReceiver.clear();
  }
  private void writeTestFile(  String testFileName) throws Exception {
    Path filePath=new Path(testFileName);
    FSDataOutputStream stream=dfs.create(filePath);
    for (int i=0; i < 10; i++) {
      byte[] data=RandomStringUtils.randomAlphabetic(102400).getBytes();
      stream.write(data);
    }
    stream.hsync();
    stream.close();
  }
  private void readTestFile(  String testFileName) throws Exception {
    Path filePath=new Path(testFileName);
    FSDataInputStream istream=dfs.open(filePath,10240);
    ByteBuffer buf=ByteBuffer.allocate(10240);
    int count=0;
    try {
      while (istream.read(buf) > 0) {
        count+=1;
        buf.clear();
        istream.seek(istream.getPos() + 5);
      }
    }
 catch (    IOException ioe) {
    }
 finally {
      istream.close();
    }
  }
  @Before public void startCluster() throws IOException {
    cluster=new MiniDFSCluster.Builder(NO_TRACING_CONF).numDataNodes(3).build();
    cluster.waitActive();
    dfs=cluster.getFileSystem();
    SetSpanReceiver.clear();
  }
  @After public void shutDown() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    FsTracer.clear();
  }
}
