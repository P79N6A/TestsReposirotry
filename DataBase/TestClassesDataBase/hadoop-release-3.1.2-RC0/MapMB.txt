/** 
 * Emit 4096 small keys, 2 &quot;tagged&quot; keys. Emits a fixed amount of data so the in-memory fetch semantics can be tested.
 */
public static class MapMB implements Mapper<NullWritable,NullWritable,Text,Text> {
  private int id;
  private int nMaps;
  private final Text key=new Text();
  private final Text val=new Text();
  private final byte[] b=new byte[4096];
  private final Formatter fmt=new Formatter(new StringBuilder(25));
  @Override public void configure(  JobConf conf){
    nMaps=conf.getNumMapTasks();
    id=nMaps - conf.getInt(JobContext.TASK_PARTITION,-1) - 1;
    Arrays.fill(b,0,4096,(byte)'V');
    ((StringBuilder)fmt.out()).append(keyfmt);
  }
  @Override public void map(  NullWritable nk,  NullWritable nv,  OutputCollector<Text,Text> output,  Reporter reporter) throws IOException {
    val.set(b,0,1000);
    val.getBytes()[0]=(byte)id;
    for (int i=0; i < 4096; ++i) {
      key.set(fmt.format(tagfmt,i).toString());
      output.collect(key,val);
      ((StringBuilder)fmt.out()).setLength(keylen);
    }
    val.set(b,0,getValLen(id,nMaps) - 128);
    val.getBytes()[0]=(byte)id;
    ((StringBuilder)fmt.out()).setLength(keylen);
    key.set("A" + fmt.format(tagfmt,id).toString());
    output.collect(key,val);
    val.set(b,0,getValLen(id,nMaps));
    val.getBytes()[0]=(byte)id;
    ((StringBuilder)fmt.out()).setLength(keylen);
    key.set("B" + fmt.format(tagfmt,id).toString());
    output.collect(key,val);
  }
  @Override public void close() throws IOException {
  }
}
