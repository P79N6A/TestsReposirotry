private class MyUmbilical implements TaskUmbilicalProtocol {
  boolean taskDone=false;
  @Override public boolean canCommit(  TaskAttemptID taskid) throws IOException {
    return false;
  }
  @Override public void commitPending(  TaskAttemptID taskId,  TaskStatus taskStatus) throws IOException, InterruptedException {
    fail("Task should not go to commit-pending");
  }
  @Override public void done(  TaskAttemptID taskid) throws IOException {
    taskDone=true;
  }
  @Override public void fatalError(  TaskAttemptID taskId,  String message,  boolean fastFail) throws IOException {
  }
  @Override public void fsError(  TaskAttemptID taskId,  String message) throws IOException {
  }
  @Override public MapTaskCompletionEventsUpdate getMapCompletionEvents(  JobID jobId,  int fromIndex,  int maxLocs,  TaskAttemptID id) throws IOException {
    return null;
  }
  @Override public JvmTask getTask(  JvmContext context) throws IOException {
    return null;
  }
  @Override public void reportDiagnosticInfo(  TaskAttemptID taskid,  String trace) throws IOException {
  }
  @Override public void reportNextRecordRange(  TaskAttemptID taskid,  Range range) throws IOException {
  }
  @Override public void shuffleError(  TaskAttemptID taskId,  String message) throws IOException {
  }
  @Override public AMFeedback statusUpdate(  TaskAttemptID taskId,  TaskStatus taskStatus) throws IOException, InterruptedException {
    AMFeedback a=new AMFeedback();
    a.setTaskFound(true);
    return a;
  }
  @Override public long getProtocolVersion(  String protocol,  long clientVersion) throws IOException {
    return 0;
  }
  @Override public ProtocolSignature getProtocolSignature(  String protocol,  long clientVersion,  int clientMethodsHash) throws IOException {
    return null;
  }
  @Override public void preempted(  TaskAttemptID taskId,  TaskStatus taskStatus) throws IOException, InterruptedException {
    fail("Task should not go to commit-pending");
  }
  @Override public TaskCheckpointID getCheckpointID(  TaskID taskId){
    return null;
  }
  @Override public void setCheckpointID(  TaskID downgrade,  TaskCheckpointID cid){
  }
}
