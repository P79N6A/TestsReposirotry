/** 
 * Test class for NumaResourceHandlerImpl.
 */
public class TestNumaResourceHandlerImpl {
  private YarnConfiguration conf;
  private NumaResourceHandlerImpl numaResourceHandler;
  private Container mockContainer;
  @Before public void setUp() throws IOException, ResourceHandlerException {
    conf=new YarnConfiguration();
    setNumaTopologyConfigs();
    Context mockContext=createAndGetMockContext();
    NMStateStoreService mock=mock(NMStateStoreService.class);
    when(mockContext.getNMStateStore()).thenReturn(mock);
    numaResourceHandler=new NumaResourceHandlerImpl(conf,mockContext);
    numaResourceHandler.bootstrap(conf);
    mockContainer=mock(Container.class);
  }
  @Test public void testAllocateNumaMemoryResource() throws ResourceHandlerException {
    testAllocateNumaResource("container_1481156246874_0001_01_000001",Resource.newInstance(2048,2),"0","0");
    testAllocateNumaResource("container_1481156246874_0001_01_000002",Resource.newInstance(60000,2),"1","1");
    testAllocateNumaResource("container_1481156246874_0001_01_000003",Resource.newInstance(80000,2),"0,1","0");
    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString("container_1481156246874_0001_01_000004"));
    when(mockContainer.getResource()).thenReturn(Resource.newInstance(80000,2));
    assertNull(numaResourceHandler.preStart(mockContainer));
    testAllocateNumaResource("container_1481156246874_0001_01_000005",Resource.newInstance(1024,2),"1","1");
  }
  @Test public void testAllocateNumaCpusResource() throws ResourceHandlerException {
    testAllocateNumaResource("container_1481156246874_0001_01_000001",Resource.newInstance(2048,2),"0","0");
    testAllocateNumaResource("container_1481156246874_0001_01_000002",Resource.newInstance(2048,2),"1","1");
    testAllocateNumaResource("container_1481156246874_0001_01_000003",Resource.newInstance(2048,3),"0","0,1");
    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString("container_1481156246874_0001_01_000004"));
    when(mockContainer.getResource()).thenReturn(Resource.newInstance(2048,2));
    assertNull(numaResourceHandler.preStart(mockContainer));
    testAllocateNumaResource("container_1481156246874_0001_01_000005",Resource.newInstance(2048,1),"1","1");
  }
  @Test public void testReacquireContainer() throws Exception {
    @SuppressWarnings("unchecked") ConcurrentHashMap<ContainerId,Container> mockContainers=mock(ConcurrentHashMap.class);
    Context mockContext=mock(Context.class);
    NMStateStoreService mock=mock(NMStateStoreService.class);
    when(mockContext.getNMStateStore()).thenReturn(mock);
    ResourceMappings resourceMappings=new ResourceMappings();
    AssignedResources assignedRscs=new AssignedResources();
    NumaResourceAllocation numaResourceAllocation=new NumaResourceAllocation("0",70000,"0",4);
    assignedRscs.updateAssignedResources(Arrays.asList(numaResourceAllocation));
    resourceMappings.addAssignedResources("numa",assignedRscs);
    when(mockContainer.getResourceMappings()).thenReturn(resourceMappings);
    when(mockContainers.get(Matchers.any())).thenReturn(mockContainer);
    when(mockContext.getContainers()).thenReturn(mockContainers);
    numaResourceHandler=new NumaResourceHandlerImpl(conf,mockContext);
    numaResourceHandler.bootstrap(conf);
    numaResourceHandler.reacquireContainer(ContainerId.fromString("container_1481156246874_0001_01_000001"));
    testAllocateNumaResource("container_1481156246874_0001_01_000005",Resource.newInstance(2048,1),"1","1");
    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString("container_1481156246874_0001_01_000005"));
    when(mockContainer.getResource()).thenReturn(Resource.newInstance(2048,4));
    List<PrivilegedOperation> preStart=numaResourceHandler.preStart(mockContainer);
    assertNull(preStart);
  }
  private void setNumaTopologyConfigs(){
    conf.set(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS,"0,1");
    conf.set("yarn.nodemanager.numa-awareness.0.memory","73717");
    conf.set("yarn.nodemanager.numa-awareness.0.cpus","4");
    conf.set("yarn.nodemanager.numa-awareness.1.memory","73727");
    conf.set("yarn.nodemanager.numa-awareness.1.cpus","4");
  }
  private Context createAndGetMockContext(){
    Context mockContext=mock(Context.class);
    @SuppressWarnings("unchecked") ConcurrentHashMap<ContainerId,Container> mockContainers=mock(ConcurrentHashMap.class);
    mockContainer=mock(Container.class);
    when(mockContainer.getResourceMappings()).thenReturn(new ResourceMappings());
    when(mockContainers.get(Matchers.any())).thenReturn(mockContainer);
    when(mockContext.getContainers()).thenReturn(mockContainers);
    return mockContext;
  }
  private void testAllocateNumaResource(  String containerId,  Resource resource,  String memNodes,  String cpuNodes) throws ResourceHandlerException {
    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString(containerId));
    when(mockContainer.getResource()).thenReturn(resource);
    List<PrivilegedOperation> preStart=numaResourceHandler.preStart(mockContainer);
    List<String> arguments=preStart.get(0).getArguments();
    assertEquals(arguments,Arrays.asList("/usr/bin/numactl","--interleave=" + memNodes,"--cpunodebind=" + cpuNodes));
  }
}
