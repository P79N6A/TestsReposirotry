public class TestUberAM extends TestMRJobs {
  private static final Logger LOG=LoggerFactory.getLogger(TestUberAM.class);
  @BeforeClass public static void setup() throws IOException {
    TestMRJobs.setup();
    if (mrCluster != null) {
      mrCluster.getConfig().setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,true);
      mrCluster.getConfig().setInt(MRJobConfig.JOB_UBERTASK_MAXREDUCES,3);
    }
  }
  @Override @Test public void testSleepJob() throws Exception {
    numSleepReducers=1;
    super.testSleepJob();
  }
  @Test public void testSleepJobWithMultipleReducers() throws Exception {
    numSleepReducers=3;
    super.testSleepJob();
  }
  @Override protected void verifySleepJobCounters(  Job job) throws InterruptedException, IOException {
    Counters counters=job.getCounters();
    super.verifySleepJobCounters(job);
    Assert.assertEquals(3,counters.findCounter(JobCounter.NUM_UBER_SUBMAPS).getValue());
    Assert.assertEquals(numSleepReducers,counters.findCounter(JobCounter.NUM_UBER_SUBREDUCES).getValue());
    Assert.assertEquals(3 + numSleepReducers,counters.findCounter(JobCounter.TOTAL_LAUNCHED_UBERTASKS).getValue());
  }
  @Override @Test public void testRandomWriter() throws IOException, InterruptedException, ClassNotFoundException {
    super.testRandomWriter();
  }
  @Override protected void verifyRandomWriterCounters(  Job job) throws InterruptedException, IOException {
    super.verifyRandomWriterCounters(job);
    Counters counters=job.getCounters();
    Assert.assertEquals(3,counters.findCounter(JobCounter.NUM_UBER_SUBMAPS).getValue());
    Assert.assertEquals(3,counters.findCounter(JobCounter.TOTAL_LAUNCHED_UBERTASKS).getValue());
  }
  @Override @Test public void testFailingMapper() throws IOException, InterruptedException, ClassNotFoundException {
    LOG.info("\n\n\nStarting uberized testFailingMapper().");
    if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
      LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.");
      return;
    }
    Job job=runFailingMapperJob();
    TaskID taskID=new TaskID(job.getJobID(),TaskType.MAP,0);
    TaskAttemptID aId=new TaskAttemptID(taskID,0);
    System.out.println("Diagnostics for " + aId + " :");
    for (    String diag : job.getTaskDiagnostics(aId)) {
      System.out.println(diag);
    }
    boolean secondTaskAttemptExists=true;
    try {
      aId=new TaskAttemptID(taskID,1);
      System.out.println("Diagnostics for " + aId + " :");
      for (      String diag : job.getTaskDiagnostics(aId)) {
        System.out.println(diag);
      }
    }
 catch (    Exception e) {
      secondTaskAttemptExists=false;
    }
    Assert.assertEquals(false,secondTaskAttemptExists);
    TaskCompletionEvent[] events=job.getTaskCompletionEvents(0,2);
    Assert.assertEquals(1,events.length);
    TaskCompletionEvent.Status status=events[0].getStatus();
    Assert.assertTrue(status == TaskCompletionEvent.Status.FAILED || status == TaskCompletionEvent.Status.TIPFAILED);
    Assert.assertEquals(JobStatus.State.FAILED,job.getJobState());
  }
  @Override protected void verifyFailingMapperCounters(  Job job) throws InterruptedException, IOException {
    Counters counters=job.getCounters();
    super.verifyFailingMapperCounters(job);
    Assert.assertEquals(2,counters.findCounter(JobCounter.TOTAL_LAUNCHED_UBERTASKS).getValue());
    Assert.assertEquals(2,counters.findCounter(JobCounter.NUM_UBER_SUBMAPS).getValue());
    Assert.assertEquals(2,counters.findCounter(JobCounter.NUM_FAILED_UBERTASKS).getValue());
  }
  public void testSleepJobWithSecurityOn() throws IOException, InterruptedException, ClassNotFoundException {
    super.testSleepJobWithSecurityOn();
  }
}
