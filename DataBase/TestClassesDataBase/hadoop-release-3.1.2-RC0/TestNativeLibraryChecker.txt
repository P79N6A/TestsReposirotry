public class TestNativeLibraryChecker {
  private void expectExit(  String[] args){
    try {
      NativeLibraryChecker.main(args);
      fail("should call exit");
    }
 catch (    ExitException e) {
      ExitUtil.resetFirstExitException();
    }
  }
  @Test public void testNativeLibraryChecker(){
    ExitUtil.disableSystemExit();
    NativeLibraryChecker.main(new String[]{"-h"});
    expectExit(new String[]{"-a","-h"});
    expectExit(new String[]{"aaa"});
    if (NativeCodeLoader.isNativeCodeLoaded()) {
      NativeLibraryChecker.main(new String[0]);
    }
 else {
      expectExit(new String[0]);
    }
  }
  @Test public void testNativeLibraryCheckerOutput(){
    expectOutput(new String[]{"-a"});
    expectOutput(new String[0]);
  }
  private void expectOutput(  String[] args){
    ExitUtil.disableSystemExit();
    ByteArrayOutputStream outContent=new ByteArrayOutputStream();
    PrintStream originalPs=System.out;
    System.setOut(new PrintStream(outContent));
    try {
      NativeLibraryChecker.main(args);
    }
 catch (    ExitException e) {
      ExitUtil.resetFirstExitException();
    }
 finally {
      if (Shell.WINDOWS) {
        assertEquals(outContent.toString().indexOf("winutils: true") != -1,true);
      }
      if (NativeCodeLoader.isNativeCodeLoaded()) {
        assertEquals(outContent.toString().indexOf("hadoop:  true") != -1,true);
      }
      System.setOut(originalPs);
    }
  }
}
