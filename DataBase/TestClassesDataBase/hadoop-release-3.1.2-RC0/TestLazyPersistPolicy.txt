public class TestLazyPersistPolicy extends LazyPersistTestCase {
  @Test public void testPolicyNotSetByDefault() throws IOException {
    getClusterBuilder().build();
    final String METHOD_NAME=GenericTestUtils.getMethodName();
    Path path=new Path("/" + METHOD_NAME + ".dat");
    makeTestFile(path,0,false);
    HdfsFileStatus status=client.getFileInfo(path.toString());
    assertThat(status.getStoragePolicy(),not(LAZY_PERSIST_POLICY_ID));
  }
  @Test public void testPolicyPropagation() throws IOException {
    getClusterBuilder().build();
    final String METHOD_NAME=GenericTestUtils.getMethodName();
    Path path=new Path("/" + METHOD_NAME + ".dat");
    makeTestFile(path,0,true);
    HdfsFileStatus status=client.getFileInfo(path.toString());
    assertThat(status.getStoragePolicy(),is(LAZY_PERSIST_POLICY_ID));
  }
  @Test public void testPolicyPersistenceInEditLog() throws IOException {
    getClusterBuilder().build();
    final String METHOD_NAME=GenericTestUtils.getMethodName();
    Path path=new Path("/" + METHOD_NAME + ".dat");
    makeTestFile(path,0,true);
    cluster.restartNameNode(true);
    HdfsFileStatus status=client.getFileInfo(path.toString());
    assertThat(status.getStoragePolicy(),is(LAZY_PERSIST_POLICY_ID));
  }
  @Test public void testPolicyPersistenceInFsImage() throws IOException {
    getClusterBuilder().build();
    final String METHOD_NAME=GenericTestUtils.getMethodName();
    Path path=new Path("/" + METHOD_NAME + ".dat");
    makeTestFile(path,0,true);
    fs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER);
    fs.saveNamespace();
    fs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNode(true);
    HdfsFileStatus status=client.getFileInfo(path.toString());
    assertThat(status.getStoragePolicy(),is(LAZY_PERSIST_POLICY_ID));
  }
}
