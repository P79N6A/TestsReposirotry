static class StuckInputStream extends FilterInputStream {
  boolean stuck=false;
  volatile boolean closed=false;
  StuckInputStream(  InputStream inner){
    super(inner);
  }
  int freeze() throws IOException {
synchronized (this) {
      stuck=true;
      notify();
    }
    while (!Thread.currentThread().isInterrupted() || closed) {
      if (closed) {
        throw new IOException("underlying stream closed, triggered an error");
      }
    }
    return 0;
  }
  @Override public int read() throws IOException {
    int ret=super.read();
    if (ret != -1) {
      return ret;
    }
    return freeze();
  }
  @Override public int read(  byte[] b) throws IOException {
    int ret=super.read(b);
    if (ret != -1) {
      return ret;
    }
    return freeze();
  }
  @Override public int read(  byte[] b,  int off,  int len) throws IOException {
    int ret=super.read(b,off,len);
    if (ret != -1) {
      return ret;
    }
    return freeze();
  }
  @Override public void close() throws IOException {
    closed=true;
  }
  public synchronized void waitForFetcher() throws InterruptedException {
    while (!stuck) {
      wait();
    }
  }
  public boolean wasClosedProperly(){
    return closed;
  }
}
