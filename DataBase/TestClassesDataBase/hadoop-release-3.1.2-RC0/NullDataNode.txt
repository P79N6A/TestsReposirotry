/** 
 * Used for mocking DataNode. Mockito does not provide a way to mock properties (like data or saslClient) so we have to manually set up mocks of those properties inside our own class.
 */
public class NullDataNode extends DataNode {
  public NullDataNode(  Configuration conf,  OutputStream out,  int port) throws Exception {
    super(conf);
    data=(FsDatasetSpi<FsVolumeSpi>)mock(FsDatasetSpi.class);
    saslClient=mock(SaslDataTransferClient.class);
    IOStreamPair pair=new IOStreamPair(null,out);
    doReturn(pair).when(saslClient).socketSend(any(Socket.class),any(OutputStream.class),any(InputStream.class),any(DataEncryptionKeyFactory.class),any(Token.class),any(DatanodeID.class));
    doReturn(mock(ReplicaHandler.class)).when(data).createTemporary(any(StorageType.class),any(String.class),any(ExtendedBlock.class),anyBoolean());
    new Thread(new NullServer(port)).start();
  }
  @Override public DatanodeRegistration getDNRegistrationForBP(  String bpid) throws IOException {
    return null;
  }
  @Override public Socket newSocket() throws IOException {
    return new Socket();
  }
  /** 
 * Class for accepting incoming an incoming connection. Does not read data or repeat in any way: simply allows a single client to connect to a local URL.
 */
private class NullServer implements Runnable {
    private ServerSocket serverSocket;
    NullServer(    int port) throws IOException {
      serverSocket=new ServerSocket(port);
    }
    @Override public void run(){
      try {
        serverSocket.accept();
        serverSocket.close();
        LOG.info("Client connection accepted by NullServer");
      }
 catch (      Exception e) {
        LOG.info("Exception in NullServer: " + e + "; "+ e.getMessage());
      }
    }
  }
}
