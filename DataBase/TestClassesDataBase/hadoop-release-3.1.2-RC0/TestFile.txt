static class TestFile {
  private static final SimpleDateFormat DATE_FORMAT=new SimpleDateFormat("yyyy-MM-dd HH:mm");
  private static final boolean DEFAULT_ISDIR=false;
  private static final String DEFAULT_MODE="750";
  private static final int DEFAULT_REPLICATION=3;
  private static final String DEFAULT_OWNER="test_owner";
  private static final String DEFAULT_GROUP="test_group";
  private static final long DEFAULT_LENGTH=1234567890L;
  private static final long DEFAULT_MTIME=NOW.getTime() - 86400000;
  private static final long DEFAULT_ATIME=NOW.getTime() + 86400000;
  private static final long DEFAULT_BLOCKSIZE=64L * 1024 * 1024;
  private String dirname;
  private String filename;
  private boolean isDir;
  private FsPermission permission;
  private int replication;
  private String owner;
  private String group;
  private long length;
  private long mtime;
  private long atime;
  private long blocksize;
  private ArrayList<FileStatus> contents=new ArrayList<FileStatus>();
  private Path path=null;
  private FileStatus fileStatus=null;
  private PathData pathData=null;
  public TestFile(  String dirname,  String filename){
    setDirname(dirname);
    setFilename(filename);
    setIsDir(DEFAULT_ISDIR);
    setPermission(DEFAULT_MODE);
    setReplication(DEFAULT_REPLICATION);
    setOwner(DEFAULT_OWNER);
    setGroup(DEFAULT_GROUP);
    setLength(DEFAULT_LENGTH);
    setMtime(DEFAULT_MTIME);
    setAtime(DEFAULT_ATIME);
    setBlocksize(DEFAULT_BLOCKSIZE);
  }
  public void setDirname(  String dirname){
    this.dirname=dirname;
  }
  public void setFilename(  String filename){
    this.filename=filename;
  }
  public void setIsDir(  boolean isDir){
    this.isDir=isDir;
  }
  public void setPermission(  String mode){
    setPermission(new FsPermission(mode));
  }
  public void setPermission(  FsPermission permission){
    this.permission=permission;
  }
  public void setReplication(  int replication){
    this.replication=replication;
  }
  public void setOwner(  String owner){
    this.owner=owner;
  }
  public void setGroup(  String group){
    this.group=group;
  }
  public void setLength(  long length){
    this.length=length;
  }
  public void setMtime(  long mtime){
    this.mtime=mtime;
  }
  public void setAtime(  long atime){
    this.atime=atime;
  }
  public void setBlocksize(  long blocksize){
    this.blocksize=blocksize;
  }
  public void addContents(  TestFile... contents){
    for (    TestFile testFile : contents) {
      this.contents.add(testFile.getFileStatus());
    }
  }
  private String getDirname(){
    return this.dirname;
  }
  private String getFilename(){
    return this.filename;
  }
  private String getPathname(){
    return getDirname() + "/" + getFilename();
  }
  private boolean isDir(){
    return this.isDir;
  }
  private boolean isFile(){
    return !this.isDir();
  }
  private FsPermission getPermission(){
    return this.permission;
  }
  private int getReplication(){
    return this.replication;
  }
  private String getOwner(){
    return this.owner;
  }
  private String getGroup(){
    return this.group;
  }
  private long getLength(){
    return this.length;
  }
  private long getMtime(){
    return this.mtime;
  }
  private long getAtime(){
    return this.atime;
  }
  private long getBlocksize(){
    return this.blocksize;
  }
  private FileStatus[] getContents(){
    return this.contents.toArray(new FileStatus[0]);
  }
  /** 
 * Returns a formated output line based on the given format mask, file status and file name.
 * @param lineFormat format mask
 * @param fileStatus file status
 * @param fileName file name
 * @return formated line
 */
  private String formatLineMtime(  String lineFormat){
    return String.format(lineFormat,(isDir() ? "d" : "-"),getPermission(),(isFile() ? getReplication() : "-"),getOwner(),getGroup(),String.valueOf(getLength()),DATE_FORMAT.format(new Date(getMtime())),getPathname());
  }
  /** 
 * Returns a formated output line based on the given format mask, file status and file name.
 * @param lineFormat format mask
 * @param fileStatus file status
 * @param fileName file name
 * @return formated line
 */
  private String formatLineAtime(  String lineFormat){
    return String.format(lineFormat,(isDir() ? "d" : "-"),getPermission(),(isFile() ? getReplication() : "-"),getOwner(),getGroup(),String.valueOf(getLength()),DATE_FORMAT.format(new Date(getAtime())),getPathname());
  }
  public FileStatus getFileStatus(){
    if (fileStatus == null) {
      Path path=getPath();
      fileStatus=new FileStatus(getLength(),isDir(),getReplication(),getBlocksize(),getMtime(),getAtime(),getPermission(),getOwner(),getGroup(),path);
    }
    return fileStatus;
  }
  public Path getPath(){
    if (path == null) {
      if ((getDirname() != null) && (!getDirname().equals(""))) {
        path=new Path(getDirname(),getFilename());
      }
 else {
        path=new Path(getFilename());
      }
    }
    return path;
  }
  public PathData getPathData() throws IOException {
    if (pathData == null) {
      FileStatus fileStatus=getFileStatus();
      Path path=getPath();
      when(mockFs.getFileStatus(eq(path))).thenReturn(fileStatus);
      pathData=new PathData(path.toString(),conf);
      if (getContents().length != 0) {
        when(mockFs.listStatus(eq(path))).thenReturn(getContents());
      }
    }
    return pathData;
  }
  /** 
 * Compute format string based on maximum column widths. Copied from Ls.adjustColumnWidths as these tests are more interested in proving regression rather than absolute format.
 * @param items to find the max field width for each column
 */
  public static String computeLineFormat(  LinkedList<PathData> items){
    int maxRepl=3, maxLen=10, maxOwner=0, maxGroup=0;
    for (    PathData item : items) {
      FileStatus stat=item.stat;
      maxRepl=maxLength(maxRepl,stat.getReplication());
      maxLen=maxLength(maxLen,stat.getLen());
      maxOwner=maxLength(maxOwner,stat.getOwner());
      maxGroup=maxLength(maxGroup,stat.getGroup());
    }
    StringBuilder fmt=new StringBuilder();
    fmt.append("%s%s ");
    fmt.append("%" + maxRepl + "s ");
    fmt.append((maxOwner > 0) ? "%-" + maxOwner + "s " : "%s");
    fmt.append((maxGroup > 0) ? "%-" + maxGroup + "s " : "%s");
    fmt.append("%" + maxLen + "s ");
    fmt.append("%s %s");
    return fmt.toString();
  }
  /** 
 * Return the maximum of two values, treating null as 0
 * @param n integer to be compared
 * @param value value to be compared
 * @return maximum of the two inputs
 */
  private static int maxLength(  int n,  Object value){
    return Math.max(n,(value != null) ? String.valueOf(value).length() : 0);
  }
}
