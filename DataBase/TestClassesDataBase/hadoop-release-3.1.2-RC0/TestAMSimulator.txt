@RunWith(Parameterized.class) public class TestAMSimulator {
  private ResourceManager rm;
  private YarnConfiguration conf;
  private Path metricOutputDir;
  private Class<?> slsScheduler;
  private Class<?> scheduler;
  @Parameterized.Parameters public static Collection<Object[]> params(){
    return Arrays.asList(new Object[][]{{SLSFairScheduler.class,FairScheduler.class},{SLSCapacityScheduler.class,CapacityScheduler.class}});
  }
  public TestAMSimulator(  Class<?> slsScheduler,  Class<?> scheduler){
    this.slsScheduler=slsScheduler;
    this.scheduler=scheduler;
  }
  @Before public void setup(){
    createMetricOutputDir();
    conf=new YarnConfiguration();
    conf.set(SLSConfiguration.METRICS_OUTPUT_DIR,metricOutputDir.toString());
    conf.set(YarnConfiguration.RM_SCHEDULER,slsScheduler.getName());
    conf.set(SLSConfiguration.RM_SCHEDULER,scheduler.getName());
    conf.setBoolean(SLSConfiguration.METRICS_SWITCH,true);
    rm=new ResourceManager();
    rm.init(conf);
    rm.start();
  }
class MockAMSimulator extends AMSimulator {
    @Override protected void processResponseQueue() throws InterruptedException, YarnException, IOException {
    }
    @Override protected void sendContainerRequest() throws YarnException, IOException, InterruptedException {
    }
    @Override public void initReservation(    ReservationId id,    long deadline,    long now){
    }
    @Override protected void checkStop(){
    }
  }
  private void verifySchedulerMetrics(  String appId){
    if (scheduler.equals(FairScheduler.class)) {
      SchedulerMetrics schedulerMetrics=((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();
      MetricRegistry metricRegistry=schedulerMetrics.getMetrics();
      for (      FairSchedulerMetrics.Metric metric : FairSchedulerMetrics.Metric.values()) {
        String key="variable.app." + appId + "."+ metric.getValue()+ ".memory";
        Assert.assertTrue(metricRegistry.getGauges().containsKey(key));
        Assert.assertNotNull(metricRegistry.getGauges().get(key).getValue());
      }
    }
  }
  private void createMetricOutputDir(){
    Path testDir=Paths.get(System.getProperty("test.build.data","target/test-dir"));
    try {
      metricOutputDir=Files.createTempDirectory(testDir,"output");
    }
 catch (    IOException e) {
      Assert.fail(e.toString());
    }
  }
  private void deleteMetricOutputDir(){
    try {
      FileUtils.deleteDirectory(metricOutputDir.toFile());
    }
 catch (    IOException e) {
      Assert.fail(e.toString());
    }
  }
  @Test public void testAMSimulator() throws Exception {
    MockAMSimulator app=new MockAMSimulator();
    String appId="app1";
    String queue="default";
    List<ContainerSimulator> containers=new ArrayList<>();
    app.init(1000,containers,rm,null,0,1000000L,"user1",queue,true,appId,0,SLSConfiguration.getAMContainerResource(conf),null);
    app.firstStep();
    verifySchedulerMetrics(appId);
    Assert.assertEquals(1,rm.getRMContext().getRMApps().size());
    Assert.assertNotNull(rm.getRMContext().getRMApps().get(app.appId));
    app.lastStep();
  }
  @After public void tearDown(){
    if (rm != null) {
      rm.stop();
    }
    deleteMetricOutputDir();
  }
}
