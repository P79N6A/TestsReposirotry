/** 
 * This class tests that methods in DatanodeDescriptor
 */
public class TestDatanodeDescriptor {
  /** 
 * Test that getInvalidateBlocks observes the maxlimit.
 */
  @Test public void testGetInvalidateBlocks() throws Exception {
    final int MAX_BLOCKS=10;
    final int REMAINING_BLOCKS=2;
    final int MAX_LIMIT=MAX_BLOCKS - REMAINING_BLOCKS;
    DatanodeDescriptor dd=DFSTestUtil.getLocalDatanodeDescriptor();
    ArrayList<Block> blockList=new ArrayList<Block>(MAX_BLOCKS);
    for (int i=0; i < MAX_BLOCKS; i++) {
      blockList.add(new Block(i,0,GenerationStamp.LAST_RESERVED_STAMP));
    }
    dd.addBlocksToBeInvalidated(blockList);
    Block[] bc=dd.getInvalidateBlocks(MAX_LIMIT);
    assertEquals(bc.length,MAX_LIMIT);
    bc=dd.getInvalidateBlocks(MAX_LIMIT);
    assertEquals(bc.length,REMAINING_BLOCKS);
  }
  @Test public void testBlocksCounter() throws Exception {
    DatanodeDescriptor dd=BlockManagerTestUtil.getLocalDatanodeDescriptor(true);
    assertEquals(0,dd.numBlocks());
    BlockInfo blk=new BlockInfoContiguous(new Block(1L),(short)1);
    BlockInfo blk1=new BlockInfoContiguous(new Block(2L),(short)2);
    DatanodeStorageInfo[] storages=dd.getStorageInfos();
    assertTrue(storages.length > 0);
    assertTrue(storages[0].addBlock(blk) == AddBlockResult.ADDED);
    assertEquals(1,dd.numBlocks());
    assertFalse(BlocksMap.removeBlock(dd,blk1));
    assertEquals(1,dd.numBlocks());
    assertFalse(storages[0].addBlock(blk) == AddBlockResult.ADDED);
    assertEquals(1,dd.numBlocks());
    assertTrue(storages[0].addBlock(blk1) == AddBlockResult.ADDED);
    assertEquals(2,dd.numBlocks());
    assertTrue(BlocksMap.removeBlock(dd,blk));
    assertEquals(1,dd.numBlocks());
    assertTrue(BlocksMap.removeBlock(dd,blk1));
    assertEquals(0,dd.numBlocks());
  }
}
