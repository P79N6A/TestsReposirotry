public class TestInitializeSharedEdits {
  private static final Log LOG=LogFactory.getLog(TestInitializeSharedEdits.class);
  private static final Path TEST_PATH=new Path("/test");
  private Configuration conf;
  private MiniDFSCluster cluster;
  @Before public void setupCluster() throws IOException {
    conf=new Configuration();
    conf.setInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY,1);
    conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
    HAUtil.setAllowStandbyReads(conf,true);
    MiniDFSNNTopology topology=MiniDFSNNTopology.simpleHATopology();
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
    cluster.waitActive();
    shutdownClusterAndRemoveSharedEditsDir();
  }
  @After public void shutdownCluster() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  private void shutdownClusterAndRemoveSharedEditsDir() throws IOException {
    cluster.shutdownNameNode(0);
    cluster.shutdownNameNode(1);
    File sharedEditsDir=new File(cluster.getSharedEditsDir(0,1));
    assertTrue(FileUtil.fullyDelete(sharedEditsDir));
  }
  private void assertCannotStartNameNodes(){
    try {
      cluster.restartNameNode(0,false);
      fail("Should not have been able to start NN1 without shared dir");
    }
 catch (    IOException ioe) {
      LOG.info("Got expected exception",ioe);
      GenericTestUtils.assertExceptionContains("storage directory does not exist or is not accessible",ioe);
    }
    try {
      cluster.restartNameNode(1,false);
      fail("Should not have been able to start NN2 without shared dir");
    }
 catch (    IOException ioe) {
      LOG.info("Got expected exception",ioe);
      GenericTestUtils.assertExceptionContains("storage directory does not exist or is not accessible",ioe);
    }
  }
  private void assertCanStartHaNameNodes(  String pathSuffix) throws ServiceFailedException, IOException, URISyntaxException, InterruptedException {
    cluster.restartNameNode(0,false);
    cluster.restartNameNode(1,true);
    cluster.getNameNode(0).getRpcServer().transitionToActive(new StateChangeRequestInfo(RequestSource.REQUEST_BY_USER));
    FileSystem fs=null;
    try {
      Path newPath=new Path(TEST_PATH,pathSuffix);
      fs=HATestUtil.configureFailoverFs(cluster,conf);
      assertTrue(fs.mkdirs(newPath));
      HATestUtil.waitForStandbyToCatchUp(cluster.getNameNode(0),cluster.getNameNode(1));
      assertTrue(NameNodeAdapter.getFileInfo(cluster.getNameNode(1),newPath.toString(),false,false,false).isDirectory());
    }
  finally {
      if (fs != null) {
        fs.close();
      }
    }
  }
  @Test public void testInitializeSharedEdits() throws Exception {
    assertCannotStartNameNodes();
    assertFalse(NameNode.initializeSharedEdits(cluster.getConfiguration(0)));
    assertCanStartHaNameNodes("1");
    shutdownClusterAndRemoveSharedEditsDir();
    assertCannotStartNameNodes();
    assertFalse(NameNode.initializeSharedEdits(cluster.getConfiguration(0)));
    assertCanStartHaNameNodes("2");
  }
  @Test public void testFailWhenNoSharedEditsSpecified() throws Exception {
    Configuration confNoShared=new Configuration(conf);
    confNoShared.unset(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY);
    assertFalse(NameNode.initializeSharedEdits(confNoShared,true));
  }
  @Test public void testDontOverWriteExistingDir() throws IOException {
    assertFalse(NameNode.initializeSharedEdits(conf,false));
    assertTrue(NameNode.initializeSharedEdits(conf,false));
  }
  @Test public void testInitializeSharedEditsConfiguresGenericConfKeys() throws IOException {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1");
    conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,"ns1"),"nn1,nn2");
    conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY,"ns1","nn1"),"localhost:1234");
    assertNull(conf.get(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY));
    NameNode.initializeSharedEdits(conf);
    assertNotNull(conf.get(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY));
  }
}
