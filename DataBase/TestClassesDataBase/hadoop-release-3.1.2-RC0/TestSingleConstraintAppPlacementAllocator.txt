/** 
 * Test behaviors of single constraint app placement allocator.
 */
public class TestSingleConstraintAppPlacementAllocator {
  private AppSchedulingInfo appSchedulingInfo;
  private AllocationTagsManager spyAllocationTagsManager;
  private RMContext rmContext;
  private SchedulerRequestKey schedulerRequestKey;
  private SingleConstraintAppPlacementAllocator allocator;
  @Before public void setup() throws Exception {
    appSchedulingInfo=mock(AppSchedulingInfo.class);
    when(appSchedulingInfo.getApplicationId()).thenReturn(TestUtils.getMockApplicationId(1));
    when(appSchedulingInfo.getApplicationAttemptId()).thenReturn(TestUtils.getMockApplicationAttemptId(1,1));
    rmContext=TestUtils.getMockRMContext();
    AllocationTagsManager allocationTagsManager=new AllocationTagsManager(rmContext);
    PlacementConstraintManager placementConstraintManager=new MemoryPlacementConstraintManager();
    spyAllocationTagsManager=spy(allocationTagsManager);
    schedulerRequestKey=new SchedulerRequestKey(Priority.newInstance(1),2L,TestUtils.getMockContainerId(1,1));
    rmContext.setAllocationTagsManager(spyAllocationTagsManager);
    rmContext.setPlacementConstraintManager(placementConstraintManager);
    allocator=new SingleConstraintAppPlacementAllocator();
    allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  }
  private void assertValidSchedulingRequest(  SchedulingRequest schedulingRequest){
    allocator=new SingleConstraintAppPlacementAllocator();
    allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  }
  private void assertInvalidSchedulingRequest(  SchedulingRequest schedulingRequest,  boolean recreateAllocator){
    try {
      if (recreateAllocator) {
        allocator=new SingleConstraintAppPlacementAllocator();
        allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
      }
      allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    }
 catch (    SchedulerInvalidResoureRequestException e) {
      return;
    }
    Assert.fail("Expect failure for schedulingRequest=" + schedulingRequest.toString());
  }
  @Test public void testSchedulingRequestValidation(){
    assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
    Assert.assertEquals(ImmutableSet.of("mapper","reducer"),allocator.getTargetAllocationTags());
    Assert.assertEquals("",allocator.getTargetNodePartition());
    assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("x")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
    Assert.assertEquals(ImmutableSet.of("mapper","reducer"),allocator.getTargetAllocationTags());
    Assert.assertEquals("x",allocator.getTargetNodePartition());
    assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
    Assert.assertEquals(ImmutableSet.of("mapper","reducer"),allocator.getTargetAllocationTags());
    Assert.assertEquals("",allocator.getTargetNodePartition());
    assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
    Assert.assertEquals(ImmutableSet.of("mapper","reducer"),allocator.getTargetAllocationTags());
    Assert.assertEquals("",allocator.getTargetNodePartition());
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE).build()).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.allocationTag("reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.allocationTag(""),PlacementConstraints.PlacementTargets.nodePartition("x")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetCardinality(PlacementConstraints.NODE,1,2,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetCardinality(PlacementConstraints.NODE,0,2,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.RACK,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
    assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
  }
  @Test public void testSchedulingRequestUpdate(){
    SchedulingRequest schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    schedulingRequest.getResourceSizing().setNumAllocations(10);
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    schedulingRequest.getResourceSizing().setResources(Resource.newInstance(2048,1));
    assertInvalidSchedulingRequest(schedulingRequest,false);
    schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetCardinality(PlacementConstraints.NODE,0,1,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
    assertInvalidSchedulingRequest(schedulingRequest,false);
    int existingNumAllocations=allocator.getSchedulingRequest().getResourceSizing().getNumAllocations();
    schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,true);
    Assert.assertEquals(existingNumAllocations + 1,allocator.getSchedulingRequest().getResourceSizing().getNumAllocations());
  }
  @Test public void testFunctionality() throws InvalidAllocationTagsQueryException {
    SchedulingRequest schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNode("host1","/rack1",123,1024));
    verify(spyAllocationTagsManager,Mockito.times(1)).getNodeCardinalityByOp(eq(NodeId.fromString("host1:123")),any(AllocationTags.class),any(LongBinaryOperator.class));
    allocator=new SingleConstraintAppPlacementAllocator();
    allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
    schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("x")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
    allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
    allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNode("host1","/rack1",123,1024));
    verify(spyAllocationTagsManager,Mockito.atLeast(1)).getNodeCardinalityByOp(eq(NodeId.fromString("host1:123")),any(AllocationTags.class),any(LongBinaryOperator.class));
    SchedulerNode node1=mock(SchedulerNode.class);
    when(node1.getPartition()).thenReturn("x");
    when(node1.getNodeID()).thenReturn(NodeId.fromString("host1:123"));
    Assert.assertTrue(allocator.precheckNode(node1,SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
    SchedulerNode node2=mock(SchedulerNode.class);
    when(node1.getPartition()).thenReturn("");
    when(node1.getNodeID()).thenReturn(NodeId.fromString("host2:123"));
    Assert.assertFalse(allocator.precheckNode(node2,SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
  }
}
