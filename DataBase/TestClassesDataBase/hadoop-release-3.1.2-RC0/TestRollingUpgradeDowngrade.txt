public class TestRollingUpgradeDowngrade {
  /** 
 * Downgrade option is already obsolete. It should throw exception.
 * @throws Exception
 */
  @Test(timeout=300000,expected=IllegalArgumentException.class) public void testDowngrade() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    MiniQJMHACluster cluster=null;
    final Path foo=new Path("/foo");
    final Path bar=new Path("/bar");
    try {
      cluster=new MiniQJMHACluster.Builder(conf).build();
      MiniDFSCluster dfsCluster=cluster.getDfsCluster();
      dfsCluster.waitActive();
      dfsCluster.getConfiguration(1).setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
      dfsCluster.restartNameNode(1);
      dfsCluster.transitionToActive(0);
      DistributedFileSystem dfs=dfsCluster.getFileSystem(0);
      dfs.mkdirs(foo);
      RollingUpgradeInfo info=dfs.rollingUpgrade(RollingUpgradeAction.PREPARE);
      Assert.assertTrue(info.isStarted());
      dfs.mkdirs(bar);
      TestRollingUpgrade.queryForPreparation(dfs);
      dfs.close();
      dfsCluster.restartNameNode(0,true,"-rollingUpgrade","downgrade");
      Assert.assertFalse(dfsCluster.getNamesystem(0).getFSImage().hasRollbackFSImage());
      dfsCluster.shutdownNameNode(1);
      dfsCluster.transitionToActive(0);
      dfs=dfsCluster.getFileSystem(0);
      Assert.assertTrue(dfs.exists(foo));
      Assert.assertTrue(dfs.exists(bar));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * Ensure that restart namenode with downgrade option should throw exception because it has been obsolete.
 */
  @Test(expected=IllegalArgumentException.class) public void testRejectNewFsImage() throws IOException {
    final Configuration conf=new Configuration();
    MiniDFSCluster cluster=null;
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      DistributedFileSystem fs=cluster.getFileSystem();
      fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
      fs.saveNamespace();
      fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
      NNStorage storage=spy(cluster.getNameNode().getFSImage().getStorage());
      int futureVersion=NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION - 1;
      doReturn(futureVersion).when(storage).getServiceLayoutVersion();
      storage.writeAll();
      cluster.restartNameNode(0,true,"-rollingUpgrade","downgrade");
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
}
