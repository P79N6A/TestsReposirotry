/** 
 * Confirm that each small key is emitted once by all maps, each tagged key is emitted by only one map, all IDs are consistent with record data, and all non-ID record data is consistent.
 */
public static class MBValidate implements Reducer<Text,Text,Text,Text> {
  private static int nMaps;
  private static final Text vb=new Text();
static {
    byte[] v=new byte[4096];
    Arrays.fill(v,(byte)'V');
    vb.set(v);
  }
  private int nRec=0;
  private int nKey=-1;
  private int aKey=-1;
  private int bKey=-1;
  private final Text kb=new Text();
  private final Formatter fmt=new Formatter(new StringBuilder(25));
  @Override public void configure(  JobConf conf){
    nMaps=conf.getNumMapTasks();
    ((StringBuilder)fmt.out()).append(keyfmt);
  }
  @Override public void reduce(  Text key,  Iterator<Text> values,  OutputCollector<Text,Text> out,  Reporter reporter) throws IOException {
    int vc=0;
    final int vlen;
    final int preRec=nRec;
    final int vcCheck, recCheck;
    ((StringBuilder)fmt.out()).setLength(keylen);
    if (25 == key.getLength()) {
      recCheck=1;
switch ((char)key.getBytes()[0]) {
case 'A':
        vlen=getValLen(++aKey,nMaps) - 128;
      vcCheck=aKey;
    break;
case 'B':
  vlen=getValLen(++bKey,nMaps);
vcCheck=bKey;
break;
default :
vlen=vcCheck=-1;
fail("Unexpected tag on record: " + ((char)key.getBytes()[24]));
}
kb.set((char)key.getBytes()[0] + fmt.format(tagfmt,vcCheck).toString());
}
 else {
kb.set(fmt.format(tagfmt,++nKey).toString());
vlen=1000;
recCheck=nMaps;
vcCheck=(nMaps * (nMaps - 1)) >>> 1;
}
assertEquals(kb,key);
while (values.hasNext()) {
final Text val=values.next();
vc+=val.getBytes()[0];
assertEquals(0,WritableComparator.compareBytes(vb.getBytes(),1,vlen - 1,val.getBytes(),1,val.getLength() - 1));
out.collect(key,val);
++nRec;
}
assertEquals("Bad rec count for " + key,recCheck,nRec - preRec);
assertEquals("Bad rec group for " + key,vcCheck,vc);
}
@Override public void close() throws IOException {
assertEquals(4095,nKey);
assertEquals(nMaps - 1,aKey);
assertEquals(nMaps - 1,bKey);
assertEquals("Bad record count",nMaps * (4096 + 2),nRec);
}
}
