public class TestReloadingX509TrustManager {
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestReloadingX509TrustManager.class.getSimpleName());
  private X509Certificate cert1;
  private X509Certificate cert2;
  private final LogCapturer reloaderLog=LogCapturer.captureLogs(ReloadingX509TrustManager.LOG);
  @BeforeClass public static void setUp() throws Exception {
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
  }
  @Test(expected=IOException.class) public void testLoadMissingTrustStore() throws Exception {
    String truststoreLocation=BASEDIR + "/testmissing.jks";
    ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,"password",10);
    try {
      tm.init();
    }
  finally {
      tm.destroy();
    }
  }
  @Test(expected=IOException.class) public void testLoadCorruptTrustStore() throws Exception {
    String truststoreLocation=BASEDIR + "/testcorrupt.jks";
    OutputStream os=new FileOutputStream(truststoreLocation);
    os.write(1);
    os.close();
    ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,"password",10);
    try {
      tm.init();
    }
  finally {
      tm.destroy();
    }
  }
  @Test(timeout=30000) public void testReload() throws Exception {
    KeyPair kp=generateKeyPair("RSA");
    cert1=generateCertificate("CN=Cert1",kp,30,"SHA1withRSA");
    cert2=generateCertificate("CN=Cert2",kp,30,"SHA1withRSA");
    String truststoreLocation=BASEDIR + "/testreload.jks";
    createTrustStore(truststoreLocation,"password","cert1",cert1);
    final ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,"password",10);
    try {
      tm.init();
      assertEquals(1,tm.getAcceptedIssuers().length);
      Thread.sleep((tm.getReloadInterval() + 1000));
      Map<String,X509Certificate> certs=new HashMap<String,X509Certificate>();
      certs.put("cert1",cert1);
      certs.put("cert2",cert2);
      createTrustStore(truststoreLocation,"password",certs);
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          return tm.getAcceptedIssuers().length == 2;
        }
      }
,(int)tm.getReloadInterval(),10000);
    }
  finally {
      tm.destroy();
    }
  }
  @Test(timeout=30000) public void testReloadMissingTrustStore() throws Exception {
    KeyPair kp=generateKeyPair("RSA");
    cert1=generateCertificate("CN=Cert1",kp,30,"SHA1withRSA");
    cert2=generateCertificate("CN=Cert2",kp,30,"SHA1withRSA");
    String truststoreLocation=BASEDIR + "/testmissing.jks";
    createTrustStore(truststoreLocation,"password","cert1",cert1);
    ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,"password",10);
    try {
      tm.init();
      assertEquals(1,tm.getAcceptedIssuers().length);
      X509Certificate cert=tm.getAcceptedIssuers()[0];
      assertFalse(reloaderLog.getOutput().contains(ReloadingX509TrustManager.RELOAD_ERROR_MESSAGE));
      new File(truststoreLocation).delete();
      waitForFailedReloadAtLeastOnce((int)tm.getReloadInterval());
      assertEquals(1,tm.getAcceptedIssuers().length);
      assertEquals(cert,tm.getAcceptedIssuers()[0]);
    }
  finally {
      reloaderLog.stopCapturing();
      tm.destroy();
    }
  }
  @Test(timeout=30000) public void testReloadCorruptTrustStore() throws Exception {
    KeyPair kp=generateKeyPair("RSA");
    cert1=generateCertificate("CN=Cert1",kp,30,"SHA1withRSA");
    cert2=generateCertificate("CN=Cert2",kp,30,"SHA1withRSA");
    String truststoreLocation=BASEDIR + "/testcorrupt.jks";
    createTrustStore(truststoreLocation,"password","cert1",cert1);
    ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,"password",10);
    try {
      tm.init();
      assertEquals(1,tm.getAcceptedIssuers().length);
      final X509Certificate cert=tm.getAcceptedIssuers()[0];
      Thread.sleep((tm.getReloadInterval() + 1000));
      assertFalse(reloaderLog.getOutput().contains(ReloadingX509TrustManager.RELOAD_ERROR_MESSAGE));
      OutputStream os=new FileOutputStream(truststoreLocation);
      os.write(1);
      os.close();
      waitForFailedReloadAtLeastOnce((int)tm.getReloadInterval());
      assertEquals(1,tm.getAcceptedIssuers().length);
      assertEquals(cert,tm.getAcceptedIssuers()[0]);
    }
  finally {
      reloaderLog.stopCapturing();
      tm.destroy();
    }
  }
  /** 
 * Wait for the reloader thread to load the configurations at least once by probing the log of the thread if the reload fails.
 */
  private void waitForFailedReloadAtLeastOnce(  int reloadInterval) throws InterruptedException, TimeoutException {
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return reloaderLog.getOutput().contains(ReloadingX509TrustManager.RELOAD_ERROR_MESSAGE);
      }
    }
,reloadInterval,10 * 1000);
  }
  /** 
 * No password when accessing a trust store is legal. 
 */
  @Test public void testNoPassword() throws Exception {
    KeyPair kp=generateKeyPair("RSA");
    cert1=generateCertificate("CN=Cert1",kp,30,"SHA1withRSA");
    cert2=generateCertificate("CN=Cert2",kp,30,"SHA1withRSA");
    String truststoreLocation=BASEDIR + "/testreload.jks";
    createTrustStore(truststoreLocation,"password","cert1",cert1);
    final ReloadingX509TrustManager tm=new ReloadingX509TrustManager("jks",truststoreLocation,null,10);
    try {
      tm.init();
      assertEquals(1,tm.getAcceptedIssuers().length);
    }
  finally {
      tm.destroy();
    }
  }
}
