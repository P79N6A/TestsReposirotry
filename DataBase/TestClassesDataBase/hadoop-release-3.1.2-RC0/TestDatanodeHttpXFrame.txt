/** 
 * Test that X-Frame-Options works correctly with DatanodeHTTPServer.
 */
public class TestDatanodeHttpXFrame {
  private MiniDFSCluster cluster=null;
  @Rule public ExpectedException exception=ExpectedException.none();
  @After public void cleanUp(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testDataNodeXFrameOptionsEnabled() throws Exception {
    boolean xFrameEnabled=true;
    cluster=createCluster(xFrameEnabled,null);
    HttpURLConnection conn=getConn(cluster);
    String xfoHeader=conn.getHeaderField("X-FRAME-OPTIONS");
    Assert.assertTrue("X-FRAME-OPTIONS is absent in the header",xfoHeader != null);
    Assert.assertTrue(xfoHeader.endsWith(HttpServer2.XFrameOption.SAMEORIGIN.toString()));
  }
  @Test public void testNameNodeXFrameOptionsDisabled() throws Exception {
    boolean xFrameEnabled=false;
    cluster=createCluster(xFrameEnabled,null);
    HttpURLConnection conn=getConn(cluster);
    String xfoHeader=conn.getHeaderField("X-FRAME-OPTIONS");
    Assert.assertTrue("unexpected X-FRAME-OPTION in header",xfoHeader == null);
  }
  @Test public void testDataNodeXFramewithInvalidOptions() throws Exception {
    exception.expect(IllegalArgumentException.class);
    cluster=createCluster(false,"Hadoop");
  }
  private static MiniDFSCluster createCluster(  boolean enabled,  String value) throws IOException {
    Configuration conf=new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED,enabled);
    if (value != null) {
      conf.set(DFSConfigKeys.DFS_XFRAME_OPTION_VALUE,value);
    }
    MiniDFSCluster dfsCluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    dfsCluster.waitActive();
    return dfsCluster;
  }
  private static HttpURLConnection getConn(  MiniDFSCluster dfsCluster) throws IOException {
    DataNode datanode=dfsCluster.getDataNodes().get(0);
    URL newURL=new URL("http://localhost:" + datanode.getInfoPort());
    HttpURLConnection conn=(HttpURLConnection)newURL.openConnection();
    conn.connect();
    return conn;
  }
}
