/** 
 * Uses a mix of both copying
 */
static class MixedWorkloadHelper implements ReadWorkerHelper {
  private final DirectReadWorkerHelper bb=new DirectReadWorkerHelper();
  private final CopyingReadWorkerHelper copy=new CopyingReadWorkerHelper();
  private final double COPYING_PROBABILITY=0.5;
  @Override public int read(  DFSInputStream dis,  byte[] target,  int startOff,  int len) throws IOException {
    double p=rand.nextDouble();
    if (p > COPYING_PROBABILITY) {
      return bb.read(dis,target,startOff,len);
    }
 else {
      return copy.read(dis,target,startOff,len);
    }
  }
  @Override public int pRead(  DFSInputStream dis,  byte[] target,  int startOff,  int len) throws IOException {
    double p=rand.nextDouble();
    if (p > COPYING_PROBABILITY) {
      return bb.pRead(dis,target,startOff,len);
    }
 else {
      return copy.pRead(dis,target,startOff,len);
    }
  }
}
