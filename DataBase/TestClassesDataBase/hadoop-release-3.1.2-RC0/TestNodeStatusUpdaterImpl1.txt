class TestNodeStatusUpdaterImpl1 extends MockNodeStatusUpdater {
  public TestNodeStatusUpdaterImpl1(  Context context,  Dispatcher dispatcher,  NodeHealthCheckerService healthChecker,  NodeManagerMetrics metrics){
    super(context,dispatcher,healthChecker,metrics);
  }
  @Override protected void registerWithRM() throws YarnException, IOException {
    super.registerWithRM();
    registrationCount++;
  }
  @Override protected void rebootNodeStatusUpdaterAndRegisterWithRM(){
    ConcurrentMap<ContainerId,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.Container> containers=getNMContext().getContainers();
    if (resyncThreadCount.incrementAndGet() > 1) {
      throw new YarnRuntimeException("Multiple resync thread created!");
    }
    try {
      try {
        if (containersShouldBePreserved) {
          Assert.assertFalse(containers.isEmpty());
          Assert.assertTrue(containers.containsKey(existingCid));
          ContainerState state=containers.get(existingCid).cloneAndGetContainerStatus().getState();
          int counter=50;
          while (state != ContainerState.RUNNING && counter > 0) {
            Thread.sleep(100);
            counter--;
          }
          Assert.assertEquals(ContainerState.RUNNING,containers.get(existingCid).cloneAndGetContainerStatus().getState());
        }
 else {
          if (!containers.isEmpty()) {
            Assert.assertEquals(ContainerState.COMPLETE,containers.get(existingCid).cloneAndGetContainerStatus().getState());
          }
        }
        super.rebootNodeStatusUpdaterAndRegisterWithRM();
      }
 catch (      AssertionError ae) {
        ae.printStackTrace();
        assertionFailedInThread.set(true);
      }
 finally {
        syncBarrier.await();
      }
    }
 catch (    InterruptedException e) {
    }
catch (    BrokenBarrierException e) {
    }
catch (    AssertionError ae) {
      ae.printStackTrace();
      assertionFailedInThread.set(true);
    }
  }
}
