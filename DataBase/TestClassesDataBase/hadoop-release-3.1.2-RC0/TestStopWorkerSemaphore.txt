private static class TestStopWorkerSemaphore {
  final Semaphore sem;
  final AtomicBoolean gotInterruption=new AtomicBoolean(false);
  TestStopWorkerSemaphore(){
    this.sem=new Semaphore(0);
  }
  /** 
 * Attempt to acquire a sempahore within a given timeout. This is useful for unit tests where we need to ignore InterruptedException when attempting to take a semaphore, but still want to honor the overall test timeout.
 * @param timeoutMs   The timeout in miliseconds.
 */
  private void uninterruptiblyAcquire(  long timeoutMs) throws Exception {
    long startTimeMs=Time.monotonicNow();
    while (true) {
      long remTime=startTimeMs + timeoutMs - Time.monotonicNow();
      if (remTime < 0) {
        throw new RuntimeException("Failed to acquire the semaphore within " + timeoutMs + " milliseconds.");
      }
      try {
        if (sem.tryAcquire(1,remTime,TimeUnit.MILLISECONDS)) {
          return;
        }
      }
 catch (      InterruptedException e) {
        gotInterruption.set(true);
      }
    }
  }
}
