/** 
 * Tests that credentials can go into the URL. This includes a valid set, and a check that an invalid set do at least get stripped out of the final URI
 */
public class ITestS3ACredentialsInURL extends Assert {
  private S3AFileSystem fs;
  private static final Logger LOG=LoggerFactory.getLogger(ITestS3ACredentialsInURL.class);
  @Rule public Timeout testTimeout=new Timeout(30 * 60 * 1000);
  @After public void teardown(){
    IOUtils.closeStream(fs);
  }
  /** 
 * Test instantiation.
 * @throws Throwable
 */
  @Test public void testInstantiateFromURL() throws Throwable {
    Configuration conf=new Configuration();
    assumeS3GuardState(false,conf);
    String accessKey=conf.get(Constants.ACCESS_KEY);
    String secretKey=conf.get(Constants.SECRET_KEY);
    String fsname=conf.getTrimmed(TEST_FS_S3A_NAME,"");
    Assume.assumeNotNull(fsname,accessKey,secretKey);
    URI original=new URI(fsname);
    URI secretsURI=createUriWithEmbeddedSecrets(original,accessKey,secretKey);
    if (secretKey.contains("/")) {
      assertTrue("test URI encodes the / symbol",secretsURI.toString().contains("%252F"));
    }
    if (secretKey.contains("+")) {
      assertTrue("test URI encodes the + symbol",secretsURI.toString().contains("%252B"));
    }
    assertFalse("Does not contain secrets",original.equals(secretsURI));
    conf.set(TEST_FS_S3A_NAME,secretsURI.toString());
    conf.unset(Constants.ACCESS_KEY);
    conf.unset(Constants.SECRET_KEY);
    fs=S3ATestUtils.createTestFileSystem(conf);
    String fsURI=fs.getUri().toString();
    assertFalse("FS URI contains a @ symbol",fsURI.contains("@"));
    assertFalse("FS URI contains a % symbol",fsURI.contains("%"));
    if (!original.toString().startsWith(fsURI)) {
      fail("Filesystem URI does not match original");
    }
    validate("original path",new Path(original));
    validate("bare path",new Path("/"));
    validate("secrets path",new Path(secretsURI));
  }
  private void validate(  String text,  Path path) throws IOException {
    try {
      fs.canonicalizeUri(path.toUri());
      fs.checkPath(path);
      assertTrue(text + " Not a directory",fs.getFileStatus(new Path("/")).isDirectory());
      fs.globStatus(path);
    }
 catch (    AssertionError e) {
      throw e;
    }
catch (    Exception e) {
      LOG.debug("{} failure: {}",text,e,e);
      fail(text + " Test failed");
    }
  }
  /** 
 * Set up some invalid credentials, verify login is rejected.
 */
  @Test public void testInvalidCredentialsFail() throws Throwable {
    Configuration conf=new Configuration();
    conf.unset(AWS_CREDENTIALS_PROVIDER);
    String fsname=conf.getTrimmed(TEST_FS_S3A_NAME,"");
    Assume.assumeNotNull(fsname);
    assumeS3GuardState(false,conf);
    URI original=new URI(fsname);
    URI testURI=createUriWithEmbeddedSecrets(original,"user","//");
    conf.set(TEST_FS_S3A_NAME,testURI.toString());
    LambdaTestUtils.intercept(AccessDeniedException.class,() -> {
      fs=S3ATestUtils.createTestFileSystem(conf);
      return fs.getFileStatus(new Path("/"));
    }
);
  }
  private URI createUriWithEmbeddedSecrets(  URI original,  String accessKey,  String secretKey) throws UnsupportedEncodingException {
    String encodedSecretKey=URLEncoder.encode(secretKey,"UTF-8");
    String formattedString=String.format("%s://%s:%s@%s/%s/",original.getScheme(),accessKey,encodedSecretKey,original.getHost(),original.getPath());
    URI testURI;
    try {
      testURI=new Path(formattedString).toUri();
    }
 catch (    IllegalArgumentException e) {
      throw new IllegalArgumentException("Could not encode Path");
    }
    return testURI;
  }
}
