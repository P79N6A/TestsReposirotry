/** 
 * This test checks that the NameNode respects the following keys: - DFS_NAMENODE_RPC_BIND_HOST_KEY - DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY - DFS_NAMENODE_LIFELINE_RPC_BIND_HOST_KEY - DFS_NAMENODE_HTTP_BIND_HOST_KEY - DFS_NAMENODE_HTTPS_BIND_HOST_KEY
 */
public class TestNameNodeRespectsBindHostKeys {
  public static final Log LOG=LogFactory.getLog(TestNameNodeRespectsBindHostKeys.class);
  private static final String WILDCARD_ADDRESS="0.0.0.0";
  private static final String LOCALHOST_SERVER_ADDRESS="127.0.0.1:0";
  private static String keystoresDir;
  private static String sslConfDir;
  private static String getRpcServerAddress(  MiniDFSCluster cluster){
    NameNodeRpcServer rpcServer=(NameNodeRpcServer)cluster.getNameNodeRpc();
    return rpcServer.getClientRpcServer().getListenerAddress().getAddress().toString();
  }
  private static String getServiceRpcServerAddress(  MiniDFSCluster cluster){
    NameNodeRpcServer rpcServer=(NameNodeRpcServer)cluster.getNameNodeRpc();
    return rpcServer.getServiceRpcServer().getListenerAddress().getAddress().toString();
  }
  private static String getLifelineRpcServerAddress(  MiniDFSCluster cluster){
    NameNodeRpcServer rpcServer=(NameNodeRpcServer)cluster.getNameNodeRpc();
    return rpcServer.getLifelineRpcServer().getListenerAddress().getAddress().toString();
  }
  @Test(timeout=300000) public void testRpcBindHostKey() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    LOG.info("Testing without " + DFS_NAMENODE_RPC_BIND_HOST_KEY);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getRpcServerAddress(cluster);
      assertThat("Bind address not expected to be wildcard by default.",address,not("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
        cluster=null;
      }
    }
    LOG.info("Testing with " + DFS_NAMENODE_RPC_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_RPC_BIND_HOST_KEY,WILDCARD_ADDRESS);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getRpcServerAddress(cluster);
      assertThat("Bind address " + address + " is not wildcard.",address,is("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  @Test(timeout=300000) public void testServiceRpcBindHostKey() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    LOG.info("Testing without " + DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getServiceRpcServerAddress(cluster);
      assertThat("Bind address not expected to be wildcard by default.",address,not("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
        cluster=null;
      }
    }
    LOG.info("Testing with " + DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY,WILDCARD_ADDRESS);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getServiceRpcServerAddress(cluster);
      assertThat("Bind address " + address + " is not wildcard.",address,is("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  @Test(timeout=300000) public void testLifelineRpcBindHostKey() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    LOG.info("Testing without " + DFS_NAMENODE_LIFELINE_RPC_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getLifelineRpcServerAddress(cluster);
      assertThat("Bind address not expected to be wildcard by default.",address,not("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
        cluster=null;
      }
    }
    LOG.info("Testing with " + DFS_NAMENODE_LIFELINE_RPC_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_LIFELINE_RPC_BIND_HOST_KEY,WILDCARD_ADDRESS);
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=getLifelineRpcServerAddress(cluster);
      assertThat("Bind address " + address + " is not wildcard.",address,is("/" + WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  @Test(timeout=300000) public void testHttpBindHostKey() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    LOG.info("Testing without " + DFS_NAMENODE_HTTP_BIND_HOST_KEY);
    try {
      conf.set(DFS_NAMENODE_HTTP_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=cluster.getNameNode().getHttpAddress().toString();
      assertFalse("HTTP Bind address not expected to be wildcard by default.",address.startsWith(WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
        cluster=null;
      }
    }
    LOG.info("Testing with " + DFS_NAMENODE_HTTP_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_HTTP_BIND_HOST_KEY,WILDCARD_ADDRESS);
    try {
      conf.set(DFS_NAMENODE_HTTP_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=cluster.getNameNode().getHttpAddress().toString();
      assertTrue("HTTP Bind address " + address + " is not wildcard.",address.startsWith(WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestNameNodeRespectsBindHostKeys.class.getSimpleName());
  private static void setupSsl() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    conf.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    assertTrue(base.mkdirs());
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestNameNodeRespectsBindHostKeys.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
  }
  /** 
 * HTTPS test is different since we need to setup SSL configuration. NN also binds the wildcard address for HTTPS port by default so we must pick a different host/port combination.
 * @throws Exception
 */
  @Test(timeout=300000) public void testHttpsBindHostKey() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    LOG.info("Testing behavior without " + DFS_NAMENODE_HTTPS_BIND_HOST_KEY);
    setupSsl();
    conf.set(DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
    conf.set(DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
    conf.set(DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    try {
      conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=cluster.getNameNode().getHttpsAddress().toString();
      assertFalse("HTTP Bind address not expected to be wildcard by default.",address.startsWith(WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
        cluster=null;
      }
    }
    LOG.info("Testing behavior with " + DFS_NAMENODE_HTTPS_BIND_HOST_KEY);
    conf.set(DFS_NAMENODE_HTTPS_BIND_HOST_KEY,WILDCARD_ADDRESS);
    try {
      conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      String address=cluster.getNameNode().getHttpsAddress().toString();
      assertTrue("HTTP Bind address " + address + " is not wildcard.",address.startsWith(WILDCARD_ADDRESS));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
      if (keystoresDir != null && !keystoresDir.isEmpty() && sslConfDir != null && !sslConfDir.isEmpty()) {
        KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
      }
    }
  }
}
