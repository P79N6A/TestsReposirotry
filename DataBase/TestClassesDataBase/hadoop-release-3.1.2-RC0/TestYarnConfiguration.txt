public class TestYarnConfiguration {
  @Test public void testDefaultRMWebUrl() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    String rmWebUrl=WebAppUtils.getRMWebAppURLWithScheme(conf);
    Assert.assertNotSame("RM Web Url is not correct","http://0.0.0.0:8088",rmWebUrl);
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_IDS,"rm1, rm2");
    conf.set("yarn.resourcemanager.webapp.address.rm1","10.10.10.10:18088");
    conf.set("yarn.resourcemanager.webapp.address.rm2","20.20.20.20:28088");
    String rmWebUrlinHA=WebAppUtils.getRMWebAppURLWithScheme(conf);
    Assert.assertEquals("http://10.10.10.10:18088",rmWebUrlinHA);
    YarnConfiguration conf2=new YarnConfiguration();
    conf2.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf2.set(YarnConfiguration.RM_HA_IDS,"rm1, rm2");
    conf2.set("yarn.resourcemanager.hostname.rm1","30.30.30.30");
    conf2.set("yarn.resourcemanager.hostname.rm2","40.40.40.40");
    String rmWebUrlinHA2=WebAppUtils.getRMWebAppURLWithScheme(conf2);
    Assert.assertEquals("http://30.30.30.30:8088",rmWebUrlinHA2);
  }
  @Test public void testRMWebUrlSpecified() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS,"fortesting:24543");
    conf.set(YarnConfiguration.RM_ADDRESS,"rmtesting:9999");
    String rmWebUrl=WebAppUtils.getRMWebAppURLWithScheme(conf);
    String[] parts=rmWebUrl.split(":");
    Assert.assertEquals("RM Web URL Port is incrrect",24543,Integer.parseInt(parts[parts.length - 1]));
    Assert.assertNotSame("RM Web Url not resolved correctly. Should not be rmtesting","http://rmtesting:24543",rmWebUrl);
  }
  @Test public void testGetSocketAddressForNMWithHA(){
    YarnConfiguration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_ADDRESS,"0.0.0.0:1234");
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_ID,"rm1");
    assertTrue(HAUtil.isHAEnabled(conf));
    InetSocketAddress addr=conf.getSocketAddr(YarnConfiguration.NM_ADDRESS,YarnConfiguration.DEFAULT_NM_ADDRESS,YarnConfiguration.DEFAULT_NM_PORT);
    assertEquals(1234,addr.getPort());
  }
  @Test public void testGetSocketAddr() throws Exception {
    YarnConfiguration conf;
    InetSocketAddress resourceTrackerAddress;
    conf=new YarnConfiguration();
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress(YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS.split(":")[0],YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT),resourceTrackerAddress);
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"10.0.0.1");
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress("10.0.0.1",YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT),resourceTrackerAddress);
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"10.0.0.2:5001");
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress("10.0.0.2",5001),resourceTrackerAddress);
    conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_BIND_HOST,"10.0.0.3");
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress("10.0.0.3",YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT),resourceTrackerAddress);
    conf.set(YarnConfiguration.RM_BIND_HOST,"0.0.0.0");
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"10.0.0.2");
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress("0.0.0.0",YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT),resourceTrackerAddress);
    conf.set(YarnConfiguration.RM_BIND_HOST,"0.0.0.0");
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"10.0.0.2:5003");
    resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
    assertEquals(new InetSocketAddress("0.0.0.0",5003),resourceTrackerAddress);
  }
  @Test public void testUpdateConnectAddr() throws Exception {
    YarnConfiguration conf;
    InetSocketAddress resourceTrackerConnectAddress;
    InetSocketAddress serverAddress;
    conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"yo.yo.yo");
    serverAddress=new InetSocketAddress(YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS.split(":")[0],Integer.parseInt(YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS.split(":")[1]));
    resourceTrackerConnectAddress=conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,serverAddress);
    assertFalse(resourceTrackerConnectAddress.toString().startsWith("yo.yo.yo"));
    conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,"yo.yo.yo");
    conf.set(YarnConfiguration.RM_BIND_HOST,"0.0.0.0");
    serverAddress=new InetSocketAddress(YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS.split(":")[0],Integer.parseInt(YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS.split(":")[1]));
    resourceTrackerConnectAddress=conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,serverAddress);
    assertTrue(resourceTrackerConnectAddress.toString().startsWith("yo.yo.yo"));
    conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS,"yo.yo.yo");
    conf.set(YarnConfiguration.NM_BIND_HOST,"0.0.0.0");
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_ID,"rm1");
    serverAddress=new InetSocketAddress(YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS.split(":")[0],Integer.parseInt(YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS.split(":")[1]));
    InetSocketAddress localizerAddress=conf.updateConnectAddr(YarnConfiguration.NM_BIND_HOST,YarnConfiguration.NM_LOCALIZER_ADDRESS,YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,serverAddress);
    assertTrue(localizerAddress.toString().startsWith("yo.yo.yo"));
    assertNull(conf.get(HAUtil.addSuffix(YarnConfiguration.NM_LOCALIZER_ADDRESS,"rm1")));
  }
}
