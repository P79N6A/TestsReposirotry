public class TestJournalNode {
  private static final NamespaceInfo FAKE_NSINFO=new NamespaceInfo(12345,"mycluster","my-bp",0L);
  @Rule public TestName testName=new TestName();
  private static final File TEST_BUILD_DATA=PathUtils.getTestDir(TestJournalNode.class);
  private JournalNode jn;
  private Journal journal;
  private final Configuration conf=new Configuration();
  private IPCLoggerChannel ch;
  private String journalId;
static {
    DefaultMetricsSystem.setMiniClusterMode(true);
  }
  @Before public void setup() throws Exception {
    File editsDir=new File(MiniDFSCluster.getBaseDirectory() + File.separator + "TestJournalNode");
    FileUtil.fullyDelete(editsDir);
    journalId="test-journalid-" + GenericTestUtils.uniqueSequenceId();
    if (testName.getMethodName().equals("testJournalDirPerNameSpace")) {
      setFederationConf();
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + ".ns1",editsDir + File.separator + "ns1");
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + ".ns2",editsDir + File.separator + "ns2");
    }
 else     if (testName.getMethodName().equals("testJournalCommonDirAcrossNameSpace")) {
      setFederationConf();
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,editsDir.getAbsolutePath());
    }
 else     if (testName.getMethodName().equals("testJournalDefaultDirForOneNameSpace")) {
      FileUtil.fullyDelete(new File(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT));
      setFederationConf();
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + ".ns1",editsDir + File.separator + "ns1");
    }
 else {
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,editsDir.getAbsolutePath());
    }
    conf.set(DFSConfigKeys.DFS_JOURNALNODE_RPC_ADDRESS_KEY,"0.0.0.0:0");
    if (testName.getMethodName().equals("testJournalNodeSyncerNotStartWhenSyncDisabled")) {
      conf.setBoolean(DFSConfigKeys.DFS_JOURNALNODE_ENABLE_SYNC_KEY,false);
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY,"qjournal://jn0:9900;jn1:9901/" + journalId);
    }
 else     if (testName.getMethodName().equals("testJournalNodeSyncerNotStartWhenSyncEnabledIncorrectURI")) {
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY,"qjournal://journal0\\:9900;journal1:9901/" + journalId);
    }
 else     if (testName.getMethodName().equals("testJournalNodeSyncerNotStartWhenSyncEnabled")) {
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY,"qjournal://jn0:9900;jn1:9901/" + journalId);
    }
 else     if (testName.getMethodName().equals("testJournalNodeSyncwithFederationTypeConfigWithNameServiceId")) {
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1","qjournal://journalnode0:9900;journalnode0:9901/" + journalId);
    }
 else     if (testName.getMethodName().equals("testJournalNodeSyncwithFederationTypeConfigWithNamenodeId")) {
      conf.set(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn1,nn2");
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn1","qjournal://journalnode0:9900;journalnode1:9901/" + journalId);
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn2","qjournal://journalnode0:9900;journalnode1:9901/" + journalId);
    }
 else     if (testName.getMethodName().equals("testJournalNodeSyncwithFederationTypeIncorrectConfigWithNamenodeId")) {
      conf.set(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn1,nn2");
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn1","qjournal://journalnode0:9900;journalnode1:9901/" + journalId);
      conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn2","qjournal://journalnode0:9902;journalnode1:9903/" + journalId);
    }
    jn=new JournalNode();
    jn.setConf(conf);
    jn.start();
    if (testName.getMethodName().equals("testJournalDirPerNameSpace") || testName.getMethodName().equals("testJournalCommonDirAcrossNameSpace") || testName.getMethodName().equals("testJournalDefaultDirForOneNameSpace")) {
      Collection<String> nameServiceIds=DFSUtilClient.getNameServiceIds(conf);
      for (      String nsId : nameServiceIds) {
        journalId="test-journalid-" + nsId;
        journal=jn.getOrCreateJournal(journalId,nsId,HdfsServerConstants.StartupOption.REGULAR);
        NamespaceInfo fakeNameSpaceInfo=new NamespaceInfo(12345,"mycluster","my-bp" + nsId,0L);
        journal.format(fakeNameSpaceInfo);
      }
    }
 else {
      journal=jn.getOrCreateJournal(journalId);
      journal.format(FAKE_NSINFO);
    }
    ch=new IPCLoggerChannel(conf,FAKE_NSINFO,journalId,jn.getBoundIpcAddress());
  }
  private void setFederationConf(){
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1, ns2");
    conf.set(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn1,nn2");
    conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn1","qjournal://journalnode0:9900;journalnode1:9901/test-journalid-ns1");
    conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1" + ".nn2","qjournal://journalnode0:9900;journalnode1:9901/test-journalid-ns1");
    conf.set(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX + ".ns2","nn3,nn4");
    conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns2" + ".nn3","qjournal://journalnode0:9900;journalnode1:9901/test-journalid-ns2");
    conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns2" + ".nn4","qjournal://journalnode0:9900;journalnode1:9901/test-journalid-ns2");
  }
  @After public void teardown() throws Exception {
    jn.stop(0);
  }
  @Test(timeout=100000) public void testJournalDirPerNameSpace(){
    Collection<String> nameServiceIds=DFSUtilClient.getNameServiceIds(conf);
    setupStaticHostResolution(2,"journalnode");
    for (    String nsId : nameServiceIds) {
      String jid="test-journalid-" + nsId;
      Journal nsJournal=jn.getJournal(jid);
      JNStorage journalStorage=nsJournal.getStorage();
      File editsDir=new File(MiniDFSCluster.getBaseDirectory() + File.separator + "TestJournalNode"+ File.separator+ nsId+ File.separator+ jid);
      assertEquals(editsDir.toString(),journalStorage.getRoot().toString());
    }
  }
  @Test(timeout=100000) public void testJournalCommonDirAcrossNameSpace(){
    Collection<String> nameServiceIds=DFSUtilClient.getNameServiceIds(conf);
    setupStaticHostResolution(2,"journalnode");
    for (    String nsId : nameServiceIds) {
      String jid="test-journalid-" + nsId;
      Journal nsJournal=jn.getJournal(jid);
      JNStorage journalStorage=nsJournal.getStorage();
      File editsDir=new File(MiniDFSCluster.getBaseDirectory() + File.separator + "TestJournalNode"+ File.separator+ jid);
      assertEquals(editsDir.toString(),journalStorage.getRoot().toString());
    }
  }
  @Test(timeout=100000) public void testJournalDefaultDirForOneNameSpace(){
    Collection<String> nameServiceIds=DFSUtilClient.getNameServiceIds(conf);
    setupStaticHostResolution(2,"journalnode");
    String jid="test-journalid-ns1";
    Journal nsJournal=jn.getJournal(jid);
    JNStorage journalStorage=nsJournal.getStorage();
    File editsDir=new File(MiniDFSCluster.getBaseDirectory() + File.separator + "TestJournalNode"+ File.separator+ "ns1"+ File.separator+ jid);
    assertEquals(editsDir.toString(),journalStorage.getRoot().toString());
    jid="test-journalid-ns2";
    nsJournal=jn.getJournal(jid);
    journalStorage=nsJournal.getStorage();
    editsDir=new File(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT + File.separator + jid);
    assertEquals(editsDir.toString(),journalStorage.getRoot().toString());
  }
  @Test(timeout=100000) public void testJournal() throws Exception {
    MetricsRecordBuilder metrics=MetricsAsserts.getMetrics(journal.getMetrics().getName());
    MetricsAsserts.assertCounter("BatchesWritten",0L,metrics);
    MetricsAsserts.assertCounter("BatchesWrittenWhileLagging",0L,metrics);
    MetricsAsserts.assertGauge("CurrentLagTxns",0L,metrics);
    MetricsAsserts.assertGauge("LastJournalTimestamp",0L,metrics);
    long beginTimestamp=System.currentTimeMillis();
    IPCLoggerChannel ch=new IPCLoggerChannel(conf,FAKE_NSINFO,journalId,jn.getBoundIpcAddress());
    ch.newEpoch(1).get();
    ch.setEpoch(1);
    ch.startLogSegment(1,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    ch.sendEdits(1L,1,1,"hello".getBytes(Charsets.UTF_8)).get();
    metrics=MetricsAsserts.getMetrics(journal.getMetrics().getName());
    MetricsAsserts.assertCounter("BatchesWritten",1L,metrics);
    MetricsAsserts.assertCounter("BatchesWrittenWhileLagging",0L,metrics);
    MetricsAsserts.assertGauge("CurrentLagTxns",0L,metrics);
    long lastJournalTimestamp=MetricsAsserts.getLongGauge("LastJournalTimestamp",metrics);
    assertTrue(lastJournalTimestamp > beginTimestamp);
    beginTimestamp=lastJournalTimestamp;
    ch.setCommittedTxId(100L);
    ch.sendEdits(1L,2,1,"goodbye".getBytes(Charsets.UTF_8)).get();
    metrics=MetricsAsserts.getMetrics(journal.getMetrics().getName());
    MetricsAsserts.assertCounter("BatchesWritten",2L,metrics);
    MetricsAsserts.assertCounter("BatchesWrittenWhileLagging",1L,metrics);
    MetricsAsserts.assertGauge("CurrentLagTxns",98L,metrics);
    lastJournalTimestamp=MetricsAsserts.getLongGauge("LastJournalTimestamp",metrics);
    assertTrue(lastJournalTimestamp > beginTimestamp);
  }
  @Test(timeout=100000) public void testReturnsSegmentInfoAtEpochTransition() throws Exception {
    ch.newEpoch(1).get();
    ch.setEpoch(1);
    ch.startLogSegment(1,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    ch.sendEdits(1L,1,2,QJMTestUtil.createTxnData(1,2)).get();
    NewEpochResponseProto response=ch.newEpoch(2).get();
    ch.setEpoch(2);
    assertEquals(1,response.getLastSegmentTxId());
    ch.finalizeLogSegment(1,2).get();
    response=ch.newEpoch(3).get();
    ch.setEpoch(3);
    assertEquals(1,response.getLastSegmentTxId());
    ch.startLogSegment(3,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    response=ch.newEpoch(4).get();
    ch.setEpoch(4);
    assertEquals(1,response.getLastSegmentTxId());
  }
  @Test(timeout=100000) public void testHttpServer() throws Exception {
    String urlRoot=jn.getHttpServerURI();
    String pageContents=DFSTestUtil.urlGet(new URL(urlRoot + "/jmx"));
    assertTrue("Bad contents: " + pageContents,pageContents.contains("Hadoop:service=JournalNode,name=JvmMetrics"));
    byte[] EDITS_DATA=QJMTestUtil.createTxnData(1,3);
    IPCLoggerChannel ch=new IPCLoggerChannel(conf,FAKE_NSINFO,journalId,jn.getBoundIpcAddress());
    ch.newEpoch(1).get();
    ch.setEpoch(1);
    ch.startLogSegment(1,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    ch.sendEdits(1L,1,3,EDITS_DATA).get();
    ch.finalizeLogSegment(1,3).get();
    byte[] retrievedViaHttp=DFSTestUtil.urlGetBytes(new URL(urlRoot + "/getJournal?segmentTxId=1&jid=" + journalId));
    byte[] expected=Bytes.concat(Ints.toByteArray(HdfsServerConstants.NAMENODE_LAYOUT_VERSION),(new byte[]{0,0,0,0}),EDITS_DATA);
    assertArrayEquals(expected,retrievedViaHttp);
    URL badUrl=new URL(urlRoot + "/getJournal?segmentTxId=12345&jid=" + journalId);
    HttpURLConnection connection=(HttpURLConnection)badUrl.openConnection();
    try {
      assertEquals(404,connection.getResponseCode());
    }
  finally {
      connection.disconnect();
    }
  }
  /** 
 * Test that the JournalNode performs correctly as a Paxos <em>Acceptor</em> process.
 */
  @Test(timeout=100000) public void testAcceptRecoveryBehavior() throws Exception {
    try {
      ch.prepareRecovery(1L).get();
      fail("Did not throw IllegalState when trying to run paxos without an epoch");
    }
 catch (    ExecutionException ise) {
      GenericTestUtils.assertExceptionContains("bad epoch",ise);
    }
    ch.newEpoch(1).get();
    ch.setEpoch(1);
    PrepareRecoveryResponseProto prep=ch.prepareRecovery(1L).get();
    System.err.println("Prep: " + prep);
    assertFalse(prep.hasAcceptedInEpoch());
    assertFalse(prep.hasSegmentState());
    ch.startLogSegment(1L,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    ch.sendEdits(1L,1L,1,QJMTestUtil.createTxnData(1,1)).get();
    prep=ch.prepareRecovery(1L).get();
    System.err.println("Prep: " + prep);
    assertFalse(prep.hasAcceptedInEpoch());
    assertTrue(prep.hasSegmentState());
    ch.acceptRecovery(prep.getSegmentState(),new URL("file:///dev/null")).get();
    ch.newEpoch(2);
    ch.setEpoch(2);
    prep=ch.prepareRecovery(1L).get();
    assertEquals(1L,prep.getAcceptedInEpoch());
    assertEquals(1L,prep.getSegmentState().getEndTxId());
    ch.setEpoch(1);
    try {
      ch.prepareRecovery(1L).get();
      fail("prepare from earlier epoch not rejected");
    }
 catch (    ExecutionException ioe) {
      GenericTestUtils.assertExceptionContains("epoch 1 is less than the last promised epoch 2",ioe);
    }
    try {
      ch.acceptRecovery(prep.getSegmentState(),new URL("file:///dev/null")).get();
      fail("accept from earlier epoch not rejected");
    }
 catch (    ExecutionException ioe) {
      GenericTestUtils.assertExceptionContains("epoch 1 is less than the last promised epoch 2",ioe);
    }
  }
  @Test(timeout=100000) public void testFailToStartWithBadConfig() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,"non-absolute-path");
    conf.set(DFSConfigKeys.DFS_JOURNALNODE_HTTP_ADDRESS_KEY,"0.0.0.0:0");
    assertJNFailsToStart(conf,"should be an absolute path");
    File existingFile=new File(TEST_BUILD_DATA,"testjournalnodefile");
    assertTrue(existingFile.createNewFile());
    try {
      conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,existingFile.getAbsolutePath());
      assertJNFailsToStart(conf,"Not a directory");
    }
  finally {
      existingFile.delete();
    }
    conf.set(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,Shell.WINDOWS ? "\\\\cannotBeCreated" : "/proc/does-not-exist");
    assertJNFailsToStart(conf,"Cannot create directory");
  }
  private static void assertJNFailsToStart(  Configuration conf,  String errString){
    try {
      JournalNode jn=new JournalNode();
      jn.setConf(conf);
      jn.start();
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains(errString,e);
    }
  }
  /** 
 * Simple test of how fast the code path is to write edits. This isn't a true unit test, but can be run manually to check performance. At the time of development, this test ran in ~4sec on an SSD-enabled laptop (1.8ms/batch).
 */
  @Test(timeout=100000) public void testPerformance() throws Exception {
    doPerfTest(8192,1024);
  }
  private void doPerfTest(  int editsSize,  int numEdits) throws Exception {
    byte[] data=new byte[editsSize];
    ch.newEpoch(1).get();
    ch.setEpoch(1);
    ch.startLogSegment(1,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get();
    StopWatch sw=new StopWatch().start();
    for (int i=1; i < numEdits; i++) {
      ch.sendEdits(1L,i,1,data).get();
    }
    long time=sw.now(TimeUnit.MILLISECONDS);
    System.err.println("Wrote " + numEdits + " batches of "+ editsSize+ " bytes in "+ time+ "ms");
    float avgRtt=(float)time / (float)numEdits;
    long throughput=((long)numEdits * editsSize * 1000L) / time;
    System.err.println("Time per batch: " + avgRtt + "ms");
    System.err.println("Throughput: " + throughput + " bytes/sec");
  }
  /** 
 * Test case to check if JournalNode exits cleanly when httpserver or rpc server fails to start. Call to JournalNode start should fail with bind exception as the port is in use by the JN started in @Before routine
 */
  @Test public void testJournalNodeStartupFailsCleanly(){
    JournalNode jNode=Mockito.spy(new JournalNode());
    try {
      jNode.setConf(conf);
      jNode.start();
      fail("Should throw bind exception");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("java.net.BindException: Port in use",e);
    }
    Mockito.verify(jNode).stop(1);
  }
  @Test public void testJournalNodeSyncerNotStartWhenSyncDisabled() throws IOException {
    conf.setBoolean(DFSConfigKeys.DFS_JOURNALNODE_ENABLE_SYNC_KEY,false);
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    jn.getOrCreateJournal(journalId,"mycluster");
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  @Test public void testJournalNodeSyncerNotStartWhenSyncEnabledIncorrectURI() throws IOException {
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    jn.getOrCreateJournal(journalId,"mycluster");
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(true,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  @Test public void testJournalNodeSyncerNotStartWhenSyncEnabled() throws IOException {
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    setupStaticHostResolution(2,"jn");
    jn.getOrCreateJournal(journalId,"mycluster");
    Assert.assertEquals(true,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(true,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  @Test public void testJournalNodeSyncwithFederationTypeConfigWithNameServiceId() throws IOException {
    setupStaticHostResolution(2,"journalnode");
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    jn.getOrCreateJournal(journalId,"ns1");
    Assert.assertEquals(true,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(true,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  @Test public void testJournalNodeSyncwithFederationTypeConfigWithNamenodeId() throws IOException {
    setupStaticHostResolution(2,"journalnode");
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    jn.getOrCreateJournal(journalId,"ns1");
    Assert.assertEquals(true,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(true,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  @Test public void testJournalNodeSyncwithFederationTypeIncorrectConfigWithNamenodeId() throws IOException {
    setupStaticHostResolution(2,"journalnode");
    jn.getOrCreateJournal(journalId);
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(false,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
    jn.getOrCreateJournal(journalId,"ns1");
    Assert.assertEquals(false,jn.getJournalSyncerStatus(journalId));
    Assert.assertEquals(true,jn.getJournal(journalId).getTriedJournalSyncerStartedwithnsId());
  }
  private void setupStaticHostResolution(  int journalNodeCount,  String hostname){
    for (int i=0; i < journalNodeCount; i++) {
      NetUtils.addStaticResolution(hostname + i,"localhost");
    }
  }
}
