public static class FakeFetcher<K,V> extends Fetcher<K,V> {
  private boolean renewConnection=false;
  public FakeFetcher(  JobConf job,  TaskAttemptID reduceId,  ShuffleSchedulerImpl<K,V> scheduler,  MergeManagerImpl<K,V> merger,  Reporter reporter,  ShuffleClientMetrics metrics,  ExceptionReporter exceptionReporter,  SecretKey jobTokenSecret,  HttpURLConnection connection){
    super(job,reduceId,scheduler,merger,reporter,metrics,exceptionReporter,jobTokenSecret);
    this.connection=connection;
  }
  public FakeFetcher(  JobConf job,  TaskAttemptID reduceId,  ShuffleSchedulerImpl<K,V> scheduler,  MergeManagerImpl<K,V> merger,  Reporter reporter,  ShuffleClientMetrics metrics,  ExceptionReporter exceptionReporter,  SecretKey jobTokenSecret,  HttpURLConnection connection,  boolean renewConnection){
    super(job,reduceId,scheduler,merger,reporter,metrics,exceptionReporter,jobTokenSecret);
    this.connection=connection;
    this.renewConnection=renewConnection;
  }
  public FakeFetcher(  JobConf job,  TaskAttemptID reduceId,  ShuffleSchedulerImpl<K,V> scheduler,  MergeManagerImpl<K,V> merger,  Reporter reporter,  ShuffleClientMetrics metrics,  ExceptionReporter exceptionReporter,  SecretKey jobTokenSecret,  HttpURLConnection connection,  int id){
    super(job,reduceId,scheduler,merger,reporter,metrics,exceptionReporter,jobTokenSecret,id);
    this.connection=connection;
  }
  @Override protected void openConnection(  URL url) throws IOException {
    if (null == connection || renewConnection) {
      super.openConnection(url);
    }
    return;
  }
}
