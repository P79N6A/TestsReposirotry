/** 
 * A class for testing quota-related commands 
 */
public class TestQuota {
  private static final Logger LOG=LoggerFactory.getLogger(TestQuota.class);
  private static Configuration conf=null;
  private static final ByteArrayOutputStream OUT_STREAM=new ByteArrayOutputStream();
  private static final ByteArrayOutputStream ERR_STREAM=new ByteArrayOutputStream();
  private static final PrintStream OLD_OUT=System.out;
  private static final PrintStream OLD_ERR=System.err;
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem dfs;
  private static FileSystem webhdfs;
  private static final int DEFAULT_BLOCK_SIZE=512;
  @Rule public final Timeout testTestout=new Timeout(120000);
  @BeforeClass public static void setUpClass() throws Exception {
    conf=new HdfsConfiguration();
    conf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR,GenericTestUtils.getTestDir("my-test-quota").getAbsolutePath());
    conf.setInt("dfs.content-summary.limit",4);
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
    conf.setInt(DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_KEY,2);
    restartCluster();
    dfs=(DistributedFileSystem)cluster.getFileSystem();
    redirectStream();
    final String nnAddr=conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY);
    final String webhdfsuri=WebHdfsConstants.WEBHDFS_SCHEME + "://" + nnAddr;
    System.out.println("webhdfsuri=" + webhdfsuri);
    webhdfs=new Path(webhdfsuri).getFileSystem(conf);
  }
  private static void restartCluster() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
    }
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    cluster.waitActive();
  }
  private static void redirectStream(){
    System.setOut(new PrintStream(OUT_STREAM));
    System.setErr(new PrintStream(ERR_STREAM));
  }
  private static void resetStream(){
    OUT_STREAM.reset();
    ERR_STREAM.reset();
  }
  @AfterClass public static void tearDownClass(){
    try {
      System.out.flush();
      System.err.flush();
    }
  finally {
      System.setOut(OLD_OUT);
      System.setErr(OLD_ERR);
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    resetStream();
  }
  private void runCommand(  DFSAdmin admin,  boolean expectError,  String... args) throws Exception {
    runCommand(admin,args,expectError);
  }
  private void runCommand(  DFSAdmin admin,  String args[],  boolean expectEror) throws Exception {
    int val=admin.run(args);
    if (expectEror) {
      assertEquals(-1,val);
    }
 else {
      assertTrue(val >= 0);
    }
  }
  /** 
 * Tests to make sure we're getting human readable Quota exception messages Test for @link{ NSQuotaExceededException, DSQuotaExceededException}
 * @throws Exception
 */
  @Test public void testDSQuotaExceededExceptionIsHumanReadable(){
    Integer bytes=1024;
    try {
      throw new DSQuotaExceededException(bytes,bytes);
    }
 catch (    DSQuotaExceededException e) {
      assertEquals("The DiskSpace quota is exceeded: quota = 1024 B = 1 KB" + " but diskspace consumed = 1024 B = 1 KB",e.getMessage());
    }
  }
  /** 
 * Test quota related commands:  setQuota, clrQuota, setSpaceQuota, clrSpaceQuota, and count 
 */
  @Test public void testQuotaCommands() throws Exception {
    DFSAdmin admin=new DFSAdmin(conf);
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    final int fileLen=1024;
    final short replication=5;
    final long spaceQuota=fileLen * replication * 15 / 8;
    final Path parent=new Path(dir,"test");
    assertTrue(dfs.mkdirs(parent));
    String[] args;
    args=new String[]{"-setQuota","3K",parent.toString()};
    runCommand(admin,args,false);
    args=new String[]{"-setQuota","3m",parent.toString()};
    runCommand(admin,args,false);
    args=new String[]{"-setQuota","3",parent.toString()};
    runCommand(admin,args,false);
    runCommand(admin,false,"-setSpaceQuota","2t",parent.toString());
    assertEquals(2L << 40,dfs.getContentSummary(parent).getSpaceQuota());
    runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota),parent.toString());
    final Path childDir0=new Path(parent,"data0");
    assertTrue(dfs.mkdirs(childDir0));
    final Path childFile0=new Path(parent,"datafile0");
    DFSTestUtil.createFile(dfs,childFile0,fileLen,replication,0);
    ContentSummary c=dfs.getContentSummary(parent);
    compareQuotaUsage(c,dfs,parent);
    assertEquals(c.getFileCount() + c.getDirectoryCount(),3);
    assertEquals(c.getQuota(),3);
    assertEquals(c.getSpaceConsumed(),fileLen * replication);
    assertEquals(c.getSpaceQuota(),spaceQuota);
    c=dfs.getContentSummary(childDir0);
    compareQuotaUsage(c,dfs,childDir0);
    assertEquals(c.getFileCount() + c.getDirectoryCount(),1);
    assertEquals(c.getQuota(),-1);
    c=dfs.getContentSummary(parent);
    compareQuotaUsage(c,dfs,parent);
    assertEquals(c.getSpaceConsumed(),fileLen * replication);
    final Path childDir1=new Path(parent,"data1");
    boolean hasException=false;
    try {
      assertFalse(dfs.mkdirs(childDir1));
    }
 catch (    QuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    OutputStream fout;
    final Path childFile1=new Path(parent,"datafile1");
    hasException=false;
    try {
      fout=dfs.create(childFile1);
    }
 catch (    QuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    runCommand(admin,new String[]{"-clrQuota",parent.toString()},false);
    c=dfs.getContentSummary(parent);
    compareQuotaUsage(c,dfs,parent);
    assertEquals(c.getQuota(),-1);
    assertEquals(c.getSpaceQuota(),spaceQuota);
    runCommand(admin,new String[]{"-clrQuota",childDir0.toString()},false);
    c=dfs.getContentSummary(childDir0);
    compareQuotaUsage(c,dfs,childDir0);
    assertEquals(c.getQuota(),-1);
    fout=dfs.create(childFile1,replication);
    try {
      fout.write(new byte[fileLen]);
      fout.close();
      Assert.fail();
    }
 catch (    QuotaExceededException e) {
      IOUtils.closeStream(fout);
    }
    dfs.delete(childFile1,false);
    runCommand(admin,false,"-clrSpaceQuota",parent.toString());
    c=dfs.getContentSummary(parent);
    compareQuotaUsage(c,dfs,parent);
    assertEquals(c.getQuota(),-1);
    assertEquals(c.getSpaceQuota(),-1);
    DFSTestUtil.createFile(dfs,childFile1,fileLen,replication,0);
    args=new String[]{"-setQuota","1",parent.toString()};
    runCommand(admin,args,false);
    runCommand(admin,false,"-setSpaceQuota",Integer.toString(fileLen),args[2]);
    args=new String[]{"-setQuota","1",childDir0.toString()};
    runCommand(admin,args,false);
    hasException=false;
    try {
      assertFalse(dfs.mkdirs(new Path(childDir0,"in")));
    }
 catch (    QuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    c=dfs.getContentSummary(childDir0);
    compareQuotaUsage(c,dfs,childDir0);
    assertEquals(c.getDirectoryCount() + c.getFileCount(),1);
    assertEquals(c.getQuota(),1);
    Path nonExistentPath=new Path(dir,"test1");
    assertFalse(dfs.exists(nonExistentPath));
    try {
      compareQuotaUsage(null,dfs,nonExistentPath);
      fail("Expected FileNotFoundException");
    }
 catch (    FileNotFoundException fnfe) {
      GenericTestUtils.assertExceptionContains("File/Directory does not exist: " + nonExistentPath,fnfe);
    }
    args=new String[]{"-setQuota","1",nonExistentPath.toString()};
    runCommand(admin,args,true);
    runCommand(admin,true,"-setSpaceQuota","1g",nonExistentPath.toString());
    assertTrue(dfs.isFile(childFile0));
    args[1]=childFile0.toString();
    runCommand(admin,args,true);
    runCommand(admin,true,"-setSpaceQuota","1t",args[1]);
    args[0]="-clrQuota";
    runCommand(admin,args,true);
    runCommand(admin,true,"-clrSpaceQuota",args[1]);
    args[1]=nonExistentPath.toString();
    runCommand(admin,args,true);
    runCommand(admin,true,"-clrSpaceQuota",args[1]);
    args=new String[]{"-setQuota","0",parent.toString()};
    runCommand(admin,args,true);
    runCommand(admin,false,"-setSpaceQuota","0",args[2]);
    args[1]="-1";
    runCommand(admin,args,true);
    runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
    args[1]=String.valueOf(Long.MAX_VALUE + 1L);
    runCommand(admin,args,true);
    runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
    args[1]="33aa1.5";
    runCommand(admin,args,true);
    runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
    runCommand(admin,true,"-setSpaceQuota",(Long.MAX_VALUE / 1024 / 1024 + 1024) + "m",args[2]);
    final String username="userxx";
    UserGroupInformation ugi=UserGroupInformation.createUserForTesting(username,new String[]{"groupyy"});
    final String[] args2=args.clone();
    ugi.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        assertEquals("Not running as new user",username,UserGroupInformation.getCurrentUser().getShortUserName());
        DFSAdmin userAdmin=new DFSAdmin(conf);
        args2[1]="100";
        runCommand(userAdmin,args2,true);
        runCommand(userAdmin,true,"-setSpaceQuota","1g",args2[2]);
        String[] args3=new String[]{"-clrQuota",parent.toString()};
        runCommand(userAdmin,args3,true);
        runCommand(userAdmin,true,"-clrSpaceQuota",args3[1]);
        return null;
      }
    }
);
    runCommand(admin,true,"-clrQuota","/");
    runCommand(admin,false,"-setQuota","1000000","/");
    runCommand(admin,true,"-clrQuota","/");
    runCommand(admin,false,"-clrSpaceQuota","/");
    runCommand(admin,new String[]{"-clrQuota",parent.toString()},false);
    runCommand(admin,false,"-clrSpaceQuota",parent.toString());
    final Path childDir2=new Path(parent,"data2");
    assertTrue(dfs.mkdirs(childDir2));
    final Path childFile2=new Path(childDir2,"datafile2");
    final Path childFile3=new Path(childDir2,"datafile3");
    final long spaceQuota2=DEFAULT_BLOCK_SIZE * replication;
    final long fileLen2=DEFAULT_BLOCK_SIZE;
    runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),childDir2.toString());
    runCommand(admin,false,"-clrSpaceQuota",childDir2.toString());
    DFSTestUtil.createFile(dfs,childFile2,fileLen2,replication,0);
    runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),childDir2.toString());
    hasException=false;
    try {
      DFSTestUtil.createFile(dfs,childFile3,fileLen2,replication,0);
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    final Path childFile4=new Path(dir,"datafile2");
    final Path childFile5=new Path(dir,"datafile3");
    runCommand(admin,true,"-clrQuota","/");
    runCommand(admin,false,"-clrSpaceQuota","/");
    runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),"/");
    runCommand(admin,false,"-clrSpaceQuota","/");
    DFSTestUtil.createFile(dfs,childFile4,fileLen2,replication,0);
    runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),"/");
    hasException=false;
    try {
      DFSTestUtil.createFile(dfs,childFile5,fileLen2,replication,0);
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertEquals(5,cluster.getNamesystem().getFSDirectory().getYieldCount());
    runCommand(admin,false,"-clrSpaceQuota","/");
  }
  /** 
 * Test commands that change the size of the name space: mkdirs, rename, and delete 
 */
  @Test public void testNamespaceCommands() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    assertTrue(dfs.mkdirs(new Path(parent,"nqdir0/qdir1/qdir20/nqdir30")));
    final Path quotaDir1=new Path(parent,"nqdir0/qdir1");
    dfs.setQuota(quotaDir1,6,HdfsConstants.QUOTA_DONT_SET);
    ContentSummary c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),3);
    assertEquals(c.getQuota(),6);
    final Path quotaDir2=new Path(parent,"nqdir0/qdir1/qdir20");
    dfs.setQuota(quotaDir2,7,HdfsConstants.QUOTA_DONT_SET);
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),2);
    assertEquals(c.getQuota(),7);
    final Path quotaDir3=new Path(parent,"nqdir0/qdir1/qdir21");
    assertTrue(dfs.mkdirs(quotaDir3));
    dfs.setQuota(quotaDir3,2,HdfsConstants.QUOTA_DONT_SET);
    c=dfs.getContentSummary(quotaDir3);
    compareQuotaUsage(c,dfs,quotaDir3);
    assertEquals(c.getDirectoryCount(),1);
    assertEquals(c.getQuota(),2);
    Path tempPath=new Path(quotaDir3,"nqdir32");
    assertTrue(dfs.mkdirs(tempPath));
    c=dfs.getContentSummary(quotaDir3);
    compareQuotaUsage(c,dfs,quotaDir3);
    assertEquals(c.getDirectoryCount(),2);
    assertEquals(c.getQuota(),2);
    tempPath=new Path(quotaDir3,"nqdir33");
    boolean hasException=false;
    try {
      assertFalse(dfs.mkdirs(tempPath));
    }
 catch (    NSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    c=dfs.getContentSummary(quotaDir3);
    compareQuotaUsage(c,dfs,quotaDir3);
    assertEquals(c.getDirectoryCount(),2);
    assertEquals(c.getQuota(),2);
    tempPath=new Path(quotaDir2,"nqdir31");
    assertTrue(dfs.mkdirs(tempPath));
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),3);
    assertEquals(c.getQuota(),7);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),6);
    assertEquals(c.getQuota(),6);
    tempPath=new Path(quotaDir2,"nqdir33");
    hasException=false;
    try {
      assertFalse(dfs.mkdirs(tempPath));
    }
 catch (    NSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    tempPath=new Path(quotaDir2,"nqdir30");
    dfs.rename(new Path(quotaDir3,"nqdir32"),tempPath);
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),4);
    assertEquals(c.getQuota(),7);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),6);
    assertEquals(c.getQuota(),6);
    hasException=false;
    try {
      assertFalse(dfs.rename(tempPath,quotaDir3));
    }
 catch (    NSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertTrue(dfs.exists(tempPath));
    assertFalse(dfs.exists(new Path(quotaDir3,"nqdir30")));
    hasException=false;
    try {
      assertFalse(dfs.rename(tempPath,new Path(quotaDir3,"nqdir32")));
    }
 catch (    QuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertTrue(dfs.exists(tempPath));
    assertFalse(dfs.exists(new Path(quotaDir3,"nqdir32")));
    assertTrue(dfs.rename(tempPath,new Path(parent,"nqdir0")));
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),2);
    assertEquals(c.getQuota(),7);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),4);
    assertEquals(c.getQuota(),6);
    assertTrue(dfs.mkdirs(new Path(parent,"nqdir0/nqdir30/nqdir33")));
    hasException=false;
    try {
      assertFalse(dfs.rename(new Path(parent,"nqdir0/nqdir30"),tempPath));
    }
 catch (    NSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertTrue(dfs.rename(quotaDir3,quotaDir2));
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),4);
    assertEquals(c.getQuota(),6);
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),3);
    assertEquals(c.getQuota(),7);
    tempPath=new Path(quotaDir2,"qdir21");
    c=dfs.getContentSummary(tempPath);
    compareQuotaUsage(c,dfs,tempPath);
    assertEquals(c.getDirectoryCount(),1);
    assertEquals(c.getQuota(),2);
    dfs.delete(tempPath,true);
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),2);
    assertEquals(c.getQuota(),7);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),3);
    assertEquals(c.getQuota(),6);
    assertTrue(dfs.rename(new Path(parent,"nqdir0/nqdir30"),quotaDir2));
    c=dfs.getContentSummary(quotaDir2);
    compareQuotaUsage(c,dfs,quotaDir2);
    assertEquals(c.getDirectoryCount(),5);
    assertEquals(c.getQuota(),7);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getDirectoryCount(),6);
    assertEquals(c.getQuota(),6);
  }
  /** 
 * Test HDFS operations that change disk space consumed by a directory tree. namely create, rename, delete, append, and setReplication. This is based on testNamespaceCommands() above.
 */
  @Test public void testSpaceCommands() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    int fileLen=1024;
    short replication=3;
    int fileSpace=fileLen * replication;
    assertTrue(dfs.mkdirs(new Path(parent,"nqdir0/qdir1/qdir20/nqdir30")));
    final Path quotaDir1=new Path(parent,"nqdir0/qdir1");
    dfs.setQuota(quotaDir1,HdfsConstants.QUOTA_DONT_SET,4 * fileSpace);
    ContentSummary c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getSpaceQuota(),4 * fileSpace);
    final Path quotaDir20=new Path(parent,"nqdir0/qdir1/qdir20");
    dfs.setQuota(quotaDir20,HdfsConstants.QUOTA_DONT_SET,6 * fileSpace);
    c=dfs.getContentSummary(quotaDir20);
    compareQuotaUsage(c,dfs,quotaDir20);
    assertEquals(c.getSpaceQuota(),6 * fileSpace);
    final Path quotaDir21=new Path(parent,"nqdir0/qdir1/qdir21");
    assertTrue(dfs.mkdirs(quotaDir21));
    dfs.setQuota(quotaDir21,HdfsConstants.QUOTA_DONT_SET,2 * fileSpace);
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceQuota(),2 * fileSpace);
    Path tempPath=new Path(quotaDir21,"nqdir32");
    assertTrue(dfs.mkdirs(tempPath));
    DFSTestUtil.createFile(dfs,new Path(tempPath,"fileDir/file1"),fileLen,replication,0);
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceConsumed(),fileSpace);
    boolean hasException=false;
    try {
      DFSTestUtil.createFile(dfs,new Path(quotaDir21,"nqdir33/file2"),2 * fileLen,replication,0);
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertTrue(dfs.delete(new Path(quotaDir21,"nqdir33"),true));
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceConsumed(),fileSpace);
    assertEquals(c.getSpaceQuota(),2 * fileSpace);
    c=dfs.getContentSummary(quotaDir20);
    compareQuotaUsage(c,dfs,quotaDir20);
    assertEquals(c.getSpaceConsumed(),0);
    Path dstPath=new Path(quotaDir20,"nqdir30");
    Path srcPath=new Path(quotaDir21,"nqdir32");
    assertTrue(dfs.rename(srcPath,dstPath));
    c=dfs.getContentSummary(quotaDir20);
    assertEquals(c.getSpaceConsumed(),fileSpace);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getSpaceConsumed(),fileSpace);
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceConsumed(),0);
    final Path file2=new Path(dstPath,"fileDir/file2");
    int file2Len=2 * fileLen;
    DFSTestUtil.createFile(dfs,file2,file2Len,replication,0);
    c=dfs.getContentSummary(quotaDir20);
    assertEquals(c.getSpaceConsumed(),3 * fileSpace);
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceConsumed(),0);
    hasException=false;
    try {
      assertFalse(dfs.rename(dstPath,srcPath));
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    assertFalse(dfs.exists(srcPath));
    assertTrue(dfs.exists(dstPath));
    c=dfs.getContentSummary(quotaDir20);
    assertEquals(c.getSpaceConsumed(),3 * fileSpace);
    c=dfs.getContentSummary(quotaDir21);
    compareQuotaUsage(c,dfs,quotaDir21);
    assertEquals(c.getSpaceConsumed(),0);
    c=dfs.getContentSummary(quotaDir1);
    compareQuotaUsage(c,dfs,quotaDir1);
    assertEquals(c.getSpaceQuota(),4 * fileSpace);
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),3 * fileSpace);
    OutputStream out=dfs.append(file2);
    out.write(new byte[fileLen]);
    out.close();
    file2Len+=fileLen;
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),4 * fileSpace);
    dfs.setQuota(quotaDir1,HdfsConstants.QUOTA_DONT_SET,5 * fileSpace);
    out=dfs.append(file2);
    hasException=false;
    try {
      out.write(new byte[fileLen + 1024]);
      out.flush();
      out.close();
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
      IOUtils.closeStream(out);
    }
    assertTrue(hasException);
    file2Len+=fileLen;
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),5 * fileSpace);
    dfs.setReplication(file2,(short)(replication - 1));
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),5 * fileSpace - file2Len);
    hasException=false;
    try {
      dfs.setReplication(file2,(short)(replication + 1));
    }
 catch (    DSQuotaExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),5 * fileSpace - file2Len);
    dfs.setQuota(quotaDir1,HdfsConstants.QUOTA_DONT_SET,10 * fileSpace);
    dfs.setQuota(quotaDir20,HdfsConstants.QUOTA_DONT_SET,10 * fileSpace);
    dfs.setReplication(file2,(short)(replication + 1));
    c=dfs.getContentSummary(dstPath);
    compareQuotaUsage(c,dfs,dstPath);
    assertEquals(c.getSpaceConsumed(),5 * fileSpace + file2Len);
    final Path quotaDir2053=new Path(parent,"hdfs-2053");
    assertTrue(dfs.mkdirs(quotaDir2053));
    final Path quotaDir2053_A=new Path(quotaDir2053,"A");
    assertTrue(dfs.mkdirs(quotaDir2053_A));
    final Path quotaDir2053_B=new Path(quotaDir2053,"B");
    assertTrue(dfs.mkdirs(quotaDir2053_B));
    final Path quotaDir2053_C=new Path(quotaDir2053,"C");
    assertTrue(dfs.mkdirs(quotaDir2053_C));
    int sizeFactorA=1;
    int sizeFactorB=2;
    int sizeFactorC=4;
    dfs.setQuota(quotaDir2053_C,HdfsConstants.QUOTA_DONT_SET,(sizeFactorC + 1) * fileSpace);
    c=dfs.getContentSummary(quotaDir2053_C);
    compareQuotaUsage(c,dfs,quotaDir2053_C);
    assertEquals(c.getSpaceQuota(),(sizeFactorC + 1) * fileSpace);
    DFSTestUtil.createFile(dfs,new Path(quotaDir2053_A,"fileA"),sizeFactorA * fileLen,replication,0);
    c=dfs.getContentSummary(quotaDir2053_A);
    compareQuotaUsage(c,dfs,quotaDir2053_A);
    assertEquals(c.getSpaceConsumed(),sizeFactorA * fileSpace);
    DFSTestUtil.createFile(dfs,new Path(quotaDir2053_B,"fileB"),sizeFactorB * fileLen,replication,0);
    c=dfs.getContentSummary(quotaDir2053_B);
    compareQuotaUsage(c,dfs,quotaDir2053_B);
    assertEquals(c.getSpaceConsumed(),sizeFactorB * fileSpace);
    DFSTestUtil.createFile(dfs,new Path(quotaDir2053_C,"fileC"),sizeFactorC * fileLen,replication,0);
    c=dfs.getContentSummary(quotaDir2053_C);
    compareQuotaUsage(c,dfs,quotaDir2053_C);
    assertEquals(c.getSpaceConsumed(),sizeFactorC * fileSpace);
    c=dfs.getContentSummary(quotaDir2053);
    compareQuotaUsage(c,dfs,quotaDir2053);
    assertEquals(c.getSpaceConsumed(),(sizeFactorA + sizeFactorB + sizeFactorC) * fileSpace);
  }
  /** 
 * Test quota by storage type.
 */
  @Test public void testQuotaByStorageType() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    int fileLen=1024;
    short replication=3;
    int fileSpace=fileLen * replication;
    final Path quotaDir20=new Path(parent,"nqdir0/qdir1/qdir20");
    assertTrue(dfs.mkdirs(quotaDir20));
    dfs.setQuota(quotaDir20,HdfsConstants.QUOTA_DONT_SET,6 * fileSpace);
    Path file=new Path(quotaDir20,"fileDir/file1");
    DFSTestUtil.createFile(dfs,file,fileLen * 3,replication,0);
    dfs.delete(file,false);
    dfs.setStoragePolicy(quotaDir20,HdfsConstants.HOT_STORAGE_POLICY_NAME);
    dfs.setQuotaByStorageType(quotaDir20,StorageType.DEFAULT,2 * fileSpace);
    boolean hasException=false;
    try {
      DFSTestUtil.createFile(dfs,file,fileLen * 3,replication,0);
    }
 catch (    QuotaByStorageTypeExceededException e) {
      hasException=true;
    }
    assertTrue(hasException);
    dfs.delete(file,false);
    dfs.setQuotaByStorageType(quotaDir20,StorageType.DEFAULT,6 * fileSpace);
  }
  private static void checkContentSummary(  final ContentSummary expected,  final ContentSummary computed){
    assertEquals(expected.toString(),computed.toString());
  }
  /** 
 * Test limit cases for setting space quotas.
 */
  @Test public void testMaxSpaceQuotas() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    final FileSystem fs=cluster.getFileSystem();
    assertTrue("Not a HDFS: " + fs.getUri(),fs instanceof DistributedFileSystem);
    final DistributedFileSystem dfs=(DistributedFileSystem)fs;
    final Path testFolder=new Path(parent,"testFolder");
    assertTrue(dfs.mkdirs(testFolder));
    dfs.setQuota(testFolder,Long.MAX_VALUE - 1,10);
    ContentSummary c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota not set properly",c.getQuota() == Long.MAX_VALUE - 1);
    dfs.setQuota(testFolder,10,Long.MAX_VALUE - 1);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota not set properly",c.getSpaceQuota() == Long.MAX_VALUE - 1);
    dfs.setQuota(testFolder,Long.MAX_VALUE,10);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota should not have changed",c.getQuota() == 10);
    dfs.setQuota(testFolder,10,Long.MAX_VALUE);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota should not have changed",c.getSpaceQuota() == 10);
    try {
      dfs.setQuota(testFolder,Long.MAX_VALUE + 1,10);
      fail("Exception not thrown");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      dfs.setQuota(testFolder,10,Long.MAX_VALUE + 1);
      fail("Exception not thrown");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  /** 
 * Violate a space quota using files of size < 1 block. Test that block allocation conservatively assumes that for quota checking the entire space of the block is used.
 */
  @Test public void testBlockAllocationAdjustsUsageConservatively() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    DFSAdmin admin=new DFSAdmin(conf);
    Path dir=new Path(parent,"test");
    Path file1=new Path(parent,"test/test1");
    Path file2=new Path(parent,"test/test2");
    boolean exceededQuota=false;
    final int QUOTA_SIZE=3 * DEFAULT_BLOCK_SIZE;
    final int FILE_SIZE=DEFAULT_BLOCK_SIZE / 2;
    ContentSummary c;
    assertTrue(dfs.mkdirs(dir));
    runCommand(admin,false,"-setSpaceQuota",Integer.toString(QUOTA_SIZE),dir.toString());
    DFSTestUtil.createFile(dfs,file1,FILE_SIZE,(short)3,1L);
    DFSTestUtil.waitReplication(dfs,file1,(short)3);
    c=dfs.getContentSummary(dir);
    compareQuotaUsage(c,dfs,dir);
    checkContentSummary(c,webhdfs.getContentSummary(dir));
    assertEquals("Quota is half consumed",QUOTA_SIZE / 2,c.getSpaceConsumed());
    try {
      DFSTestUtil.createFile(dfs,file2,FILE_SIZE,(short)3,1L);
    }
 catch (    QuotaExceededException e) {
      exceededQuota=true;
    }
    assertTrue("Quota not exceeded",exceededQuota);
  }
  /** 
 * Like the previous test but create many files. This covers bugs where the quota adjustment is incorrect but it takes many files to accrue  a big enough accounting error to violate the quota.
 */
  @Test public void testMultipleFilesSmallerThanOneBlock() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    Configuration dfsConf=new HdfsConfiguration();
    final int BLOCK_SIZE=6 * 1024;
    dfsConf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
    dfsConf.setInt(DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_KEY,2);
    MiniDFSCluster dfsCluster=new MiniDFSCluster.Builder(dfsConf).numDataNodes(3).build();
    dfsCluster.waitActive();
    FileSystem fs=dfsCluster.getFileSystem();
    DFSAdmin admin=new DFSAdmin(dfsConf);
    final String nnAddr=dfsConf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY);
    final String webhdfsuri=WebHdfsConstants.WEBHDFS_SCHEME + "://" + nnAddr;
    System.out.println("webhdfsuri=" + webhdfsuri);
    final FileSystem webHDFS=new Path(webhdfsuri).getFileSystem(dfsConf);
    try {
      long nsQuota=FSImageTestUtil.getNSQuota(dfsCluster.getNameNode().getNamesystem());
      assertTrue("Default namespace quota expected as long max. But the value is :" + nsQuota,nsQuota == Long.MAX_VALUE);
      Path dir=new Path(parent,"test");
      boolean exceededQuota=false;
      ContentSummary c;
      final int FILE_SIZE=1024;
      final int QUOTA_SIZE=32 * (int)fs.getDefaultBlockSize(dir);
      assertEquals(6 * 1024,fs.getDefaultBlockSize(dir));
      assertEquals(192 * 1024,QUOTA_SIZE);
      assertTrue(fs.mkdirs(dir));
      runCommand(admin,false,"-setSpaceQuota",Integer.toString(QUOTA_SIZE),dir.toString());
      for (int i=0; i < 59; i++) {
        Path file=new Path(parent,"test/test" + i);
        DFSTestUtil.createFile(fs,file,FILE_SIZE,(short)3,1L);
        DFSTestUtil.waitReplication(fs,file,(short)3);
      }
      c=fs.getContentSummary(dir);
      compareQuotaUsage(c,fs,dir);
      checkContentSummary(c,webHDFS.getContentSummary(dir));
      assertEquals("Invalid space consumed",59 * FILE_SIZE * 3,c.getSpaceConsumed());
      assertEquals("Invalid space consumed",QUOTA_SIZE - (59 * FILE_SIZE * 3),3 * (fs.getDefaultBlockSize(dir) - FILE_SIZE));
      try {
        Path file=new Path(parent,"test/test59");
        DFSTestUtil.createFile(fs,file,FILE_SIZE,(short)3,1L);
        DFSTestUtil.waitReplication(fs,file,(short)3);
      }
 catch (      QuotaExceededException e) {
        exceededQuota=true;
      }
      assertTrue("Quota not exceeded",exceededQuota);
      assertEquals(2,dfsCluster.getNamesystem().getFSDirectory().getYieldCount());
    }
  finally {
      dfsCluster.shutdown();
    }
  }
  @Test public void testSetSpaceQuotaWhenStorageTypeIsWrong() throws Exception {
    Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs://127.0.0.1:8020");
    DFSAdmin admin=new DFSAdmin(conf);
    ByteArrayOutputStream err=new ByteArrayOutputStream();
    PrintStream oldErr=System.err;
    try {
      System.setErr(new PrintStream(err));
      String[] args={"-setSpaceQuota","100","-storageType","COLD","/testDir"};
      admin.run(args);
      String errOutput=new String(err.toByteArray(),Charsets.UTF_8);
      assertTrue(errOutput.contains(StorageType.getTypesSupportingQuota().toString()));
    }
  finally {
      System.setErr(oldErr);
    }
  }
  /** 
 * File count on root , should return total value of files in Filesystem when one folder contains files more than "dfs.content-summary.limit".
 */
  @Test public void testHugeFileCount() throws IOException {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(parent));
    for (int i=1; i <= 5; i++) {
      FSDataOutputStream out=dfs.create(new Path(parent,"Folder1/" + "file" + i),(short)1);
      out.close();
    }
    FSDataOutputStream out=dfs.create(new Path(parent,"Folder2/file6"),(short)1);
    out.close();
    ContentSummary contentSummary=dfs.getContentSummary(parent);
    compareQuotaUsage(contentSummary,dfs,parent);
    assertEquals(6,contentSummary.getFileCount());
  }
  private void compareQuotaUsage(  final QuotaUsage fromContentSummary,  final FileSystem fileSystem,  final Path filePath) throws IOException {
    QuotaUsage quotaUsage=fileSystem.getQuotaUsage(filePath);
    assertEquals(fromContentSummary,quotaUsage);
  }
  /** 
 * Test to set space quote using negative number.
 */
  @Test(timeout=30000) public void testSetSpaceQuotaNegativeNumber() throws Exception {
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    final List<String> outs=Lists.newArrayList();
    resetStream();
    outs.clear();
    final int ret=ToolRunner.run(dfsAdmin,new String[]{"-setSpaceQuota","-10",dir.toString()});
    assertEquals(-1,ret);
    scanIntoList(ERR_STREAM,outs);
    assertEquals("It should be two lines of error messages," + " the 1st one is about Illegal option," + " the 2nd one is about SetSpaceQuota usage.",2,outs.size());
    assertThat(outs.get(0),is(allOf(containsString("setSpaceQuota"),containsString("Illegal option"))));
  }
  /** 
 * Test to set and clear space quote, regular usage.
 */
  @Test(timeout=30000) public void testSetAndClearSpaceQuotaRegular() throws Exception {
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    testSetAndClearSpaceQuotaRegularInternal(new String[]{"-setSpaceQuota","1024",dir.toString()},dir,0,1024);
    testSetAndClearSpaceQuotaRegularInternal(new String[]{"-clrSpaceQuota",dir.toString()},dir,0,-1);
  }
  /** 
 * Test to all the commands by passing the fully qualified path.
 */
  @Test(timeout=30000) public void testQuotaCommandsWithURI() throws Exception {
    DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final Path dir=new Path("/" + this.getClass().getSimpleName(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    testSetAndClearSpaceQuotaRegularInternal(new String[]{"-setSpaceQuota","1024",dfs.getUri() + "/" + dir.toString()},dir,0,1024);
    testSetAndClearSpaceQuotaRegularInternal(new String[]{"-clrSpaceQuota",dfs.getUri() + "/" + dir.toString()},dir,0,-1);
    runCommand(dfsAdmin,false,"-setQuota","1000",dfs.getUri() + "/" + dir.toString());
    runCommand(dfsAdmin,false,"-clrQuota",dfs.getUri() + "/" + dir.toString());
  }
  private void testSetAndClearSpaceQuotaRegularInternal(  final String[] args,  final Path dir,  final int cmdRet,  final int spaceQuota) throws Exception {
    resetStream();
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final List<String> outs=Lists.newArrayList();
    final int ret=ToolRunner.run(dfsAdmin,args);
    assertEquals(cmdRet,ret);
    final QuotaUsage quotaUsage=dfs.getQuotaUsage(dir);
    assertEquals(spaceQuota,quotaUsage.getSpaceQuota());
    scanIntoList(OUT_STREAM,outs);
    assertTrue("There should be no output if it runs successfully.",outs.isEmpty());
  }
  /** 
 * Test to set and clear space quote by storage type.
 */
  @Test(timeout=30000) public void testSetAndClearSpaceQuotaByStorageType() throws Exception {
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    testSetAndClearSpaceQuotaByStorageTypeInternal(new String[]{"-setSpaceQuota","2048","-storageType","DISK",dir.toString()},dir,0,-1,2048);
    testSetAndClearSpaceQuotaByStorageTypeInternal(new String[]{"-clrSpaceQuota","-storageType","DISK",dir.toString()},dir,0,-1,-1);
  }
  private void testSetAndClearSpaceQuotaByStorageTypeInternal(  final String[] args,  final Path dir,  final int cmdRet,  final int spaceQuota,  final int spaceQuotaByStorageType) throws Exception {
    resetStream();
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final List<String> outs=Lists.newArrayList();
    final int ret=ToolRunner.run(dfsAdmin,args);
    assertEquals(cmdRet,ret);
    final QuotaUsage quotaUsage=dfs.getQuotaUsage(dir);
    assertEquals(spaceQuota,quotaUsage.getSpaceQuota());
    assertEquals(spaceQuotaByStorageType,quotaUsage.getTypeQuota(StorageType.DISK));
    scanIntoList(OUT_STREAM,outs);
    assertTrue("There should be no output if it runs successfully.",outs.isEmpty());
  }
  /** 
 * Test to set and clear space quote when directory doesn't exist.
 */
  @Test(timeout=30000) public void testSetAndClearSpaceQuotaDirectoryNotExist() throws Exception {
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    testSetAndClearSpaceQuotaDirectoryNotExistInternal(new String[]{"-setSpaceQuota","1024",dir.toString()},dir,-1,"setSpaceQuota");
    testSetAndClearSpaceQuotaDirectoryNotExistInternal(new String[]{"-clrSpaceQuota",dir.toString()},dir,-1,"clrSpaceQuota");
  }
  private void testSetAndClearSpaceQuotaDirectoryNotExistInternal(  final String[] args,  final Path dir,  final int cmdRet,  final String cmdName) throws Exception {
    resetStream();
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final List<String> outs=Lists.newArrayList();
    final int ret=ToolRunner.run(dfsAdmin,args);
    assertEquals(cmdRet,ret);
    scanIntoList(ERR_STREAM,outs);
    assertEquals("It should be one line error message like: clrSpaceQuota:" + " Directory does not exist: <full path of XXX directory>",1,outs.size());
    assertThat(outs.get(0),is(allOf(containsString(cmdName),containsString("does not exist"),containsString(dir.toString()))));
  }
  /** 
 * Test to set and clear space quote when path is a file.
 */
  @Test(timeout=30000) public void testSetAndClearSpaceQuotaPathIsFile() throws Exception {
    final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    final Path file=new Path(parent,"path-is-file");
    DFSTestUtil.createFile(dfs,file,1024L,(short)1L,0);
    assertTrue(dfs.isFile(file));
    testSetAndClearSpaceQuotaPathIsFileInternal(new String[]{"-setSpaceQuota","1024",file.toString()},file,-1,"setSpaceQuota");
    testSetAndClearSpaceQuotaPathIsFileInternal(new String[]{"-clrSpaceQuota",file.toString()},file,-1,"clrSpaceQuota");
  }
  private void testSetAndClearSpaceQuotaPathIsFileInternal(  final String[] args,  final Path file,  final int cmdRet,  final String cmdName) throws Exception {
    resetStream();
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final List<String> outs=Lists.newArrayList();
    final int ret=ToolRunner.run(dfsAdmin,args);
    assertEquals(cmdRet,ret);
    scanIntoList(ERR_STREAM,outs);
    assertEquals("It should be one line error message like: clrSpaceQuota:" + " <full path of XXX file> is not a directory",1,outs.size());
    assertThat(outs.get(0),is(allOf(containsString(cmdName),containsString(file.toString()),containsString("Is not a directory"))));
  }
  /** 
 * Test to set and clear space quote when user has no access right.
 */
  @Test(timeout=30000) public void testSetAndClearSpaceQuotaNoAccess() throws Exception {
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    testSetAndClearSpaceQuotaNoAccessInternal(new String[]{"-setSpaceQuota","2048",dir.toString()},-1,"setSpaceQuota");
    testSetAndClearSpaceQuotaNoAccessInternal(new String[]{"-clrSpaceQuota",dir.toString()},-1,"clrSpaceQuota");
  }
  @Test public void testSpaceQuotaExceptionOnClose() throws Exception {
    GenericTestUtils.setLogLevel(DFSOutputStream.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(DataStreamer.LOG,Level.TRACE);
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    final String[] args=new String[]{"-setSpaceQuota","1",dir.toString()};
    assertEquals(0,ToolRunner.run(dfsAdmin,args));
    final Path testFile=new Path(dir,"file");
    final FSDataOutputStream stream=dfs.create(testFile);
    stream.write("whatever".getBytes());
    try {
      stream.close();
      fail("close should fail");
    }
 catch (    DSQuotaExceededException expected) {
    }
    assertEquals(0,cluster.getNamesystem().getNumFilesUnderConstruction());
  }
  @Test public void testSpaceQuotaExceptionOnFlush() throws Exception {
    GenericTestUtils.setLogLevel(DFSOutputStream.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(DataStreamer.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(DFSClient.LOG,Level.TRACE);
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    assertTrue(dfs.mkdirs(dir));
    final String[] args=new String[]{"-setSpaceQuota","1",dir.toString()};
    assertEquals(0,ToolRunner.run(dfsAdmin,args));
    Path testFile=new Path(dir,"file");
    FSDataOutputStream stream=dfs.create(testFile);
    final LeaseRenewer leaseRenewer=dfs.getClient().getLeaseRenewer();
    stream.write("whatever".getBytes());
    try {
      stream.hflush();
      fail("flush should fail");
    }
 catch (    DSQuotaExceededException expected) {
    }
    try {
      stream.close();
      fail("close should fail too");
    }
 catch (    DSQuotaExceededException expected) {
    }
    GenericTestUtils.setLogLevel(LeaseRenewer.LOG,Level.TRACE);
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        LOG.info("LeaseRenewer: {}",leaseRenewer);
        return leaseRenewer.isEmpty();
      }
    }
,100,10000);
    assertEquals(0,cluster.getNamesystem().getNumFilesUnderConstruction());
  }
  @Test public void testSpaceQuotaExceptionOnAppend() throws Exception {
    GenericTestUtils.setLogLevel(DFSOutputStream.LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(DataStreamer.LOG,Level.TRACE);
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
    dfs.delete(dir,true);
    assertTrue(dfs.mkdirs(dir));
    final String[] args=new String[]{"-setSpaceQuota","4000",dir.toString()};
    ToolRunner.run(dfsAdmin,args);
    final Path testFile=new Path(dir,"file");
    OutputStream stream=dfs.create(testFile);
    stream.write("whatever".getBytes());
    stream.close();
    assertEquals(0,cluster.getNamesystem().getNumFilesUnderConstruction());
    stream=dfs.append(testFile);
    byte[] buf=AppendTestUtil.initBuffer(4096);
    stream.write(buf);
    try {
      stream.close();
      fail("close after append should fail");
    }
 catch (    DSQuotaExceededException expected) {
    }
    assertEquals(0,cluster.getNamesystem().getNumFilesUnderConstruction());
  }
  private void testSetAndClearSpaceQuotaNoAccessInternal(  final String[] args,  final int cmdRet,  final String cmdName) throws Exception {
    resetStream();
    final DFSAdmin dfsAdmin=new DFSAdmin(conf);
    final List<String> outs=Lists.newArrayList();
    final UserGroupInformation whoever=UserGroupInformation.createUserForTesting("whoever",new String[]{"whoever_group"});
    final int ret=whoever.doAs(new PrivilegedExceptionAction<Integer>(){
      @Override public Integer run() throws Exception {
        return ToolRunner.run(dfsAdmin,args);
      }
    }
);
    assertEquals(cmdRet,ret);
    scanIntoList(ERR_STREAM,outs);
    assertThat(outs.get(0),is(allOf(containsString(cmdName),containsString("Access denied for user whoever"),containsString("Superuser privilege is required"))));
  }
  private static void scanIntoList(  final ByteArrayOutputStream baos,  final List<String> list){
    final Scanner scanner=new Scanner(baos.toString().replaceAll("\r\r\n",System.lineSeparator()));
    while (scanner.hasNextLine()) {
      list.add(scanner.nextLine());
    }
    scanner.close();
  }
}
