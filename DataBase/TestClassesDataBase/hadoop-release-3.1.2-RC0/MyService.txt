public abstract static class MyService implements Service, XException.ERROR {
  private String id;
  private Class serviceInterface;
  private Class[] dependencies;
  private boolean failOnInit;
  private boolean failOnDestroy;
  protected MyService(  String id,  Class serviceInterface,  Class[] dependencies,  boolean failOnInit,  boolean failOnDestroy){
    this.id=id;
    this.serviceInterface=serviceInterface;
    this.dependencies=dependencies;
    this.failOnInit=failOnInit;
    this.failOnDestroy=failOnDestroy;
  }
  @Override public void init(  Server server) throws ServiceException {
    ORDER.add(id + ".init");
    if (failOnInit) {
      throw new ServiceException(this);
    }
  }
  @Override public void postInit() throws ServiceException {
    ORDER.add(id + ".postInit");
  }
  @Override public String getTemplate(){
    return "";
  }
  @Override public void destroy(){
    ORDER.add(id + ".destroy");
    if (failOnDestroy) {
      throw new RuntimeException();
    }
  }
  @Override public Class[] getServiceDependencies(){
    return dependencies;
  }
  @Override public Class getInterface(){
    return serviceInterface;
  }
  @Override public void serverStatusChange(  Server.Status oldStatus,  Server.Status newStatus) throws ServiceException {
  }
}
