/** 
 * This class tests the validation of the configuration object when passed  to the NameNode
 */
public class TestValidateConfigurationSettings {
  @After public void cleanUp(){
    FileUtil.fullyDeleteContents(new File(MiniDFSCluster.getBaseDirectory()));
  }
  /** 
 * Tests setting the rpc port to the same as the web port to test that  an exception is thrown when trying to re-use the same port
 */
  @Test(expected=BindException.class,timeout=300000) public void testThatMatchingRPCandHttpPortsThrowException() throws IOException {
    NameNode nameNode=null;
    try {
      Configuration conf=new HdfsConfiguration();
      File nameDir=new File(MiniDFSCluster.getBaseDirectory(),"name");
      conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameDir.getAbsolutePath());
      Random rand=new Random();
      final int port=30000 + rand.nextInt(30000);
      FileSystem.setDefaultUri(conf,"hdfs://localhost:" + port);
      conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,"127.0.0.1:" + port);
      DFSTestUtil.formatNameNode(conf);
      nameNode=new NameNode(conf);
    }
  finally {
      if (nameNode != null) {
        nameNode.stop();
      }
    }
  }
  /** 
 * Tests setting the rpc port to a different as the web port that an  exception is NOT thrown 
 */
  @Test(timeout=300000) public void testThatDifferentRPCandHttpPortsAreOK() throws IOException {
    Configuration conf=new HdfsConfiguration();
    File nameDir=new File(MiniDFSCluster.getBaseDirectory(),"name");
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameDir.getAbsolutePath());
    Random rand=new Random();
    for (int i=0; i < 5; ++i) {
      final int port1=30000 + rand.nextInt(10000);
      final int port2=port1 + 1 + rand.nextInt(10000);
      FileSystem.setDefaultUri(conf,"hdfs://localhost:" + port1);
      conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,"127.0.0.1:" + port2);
      DFSTestUtil.formatNameNode(conf);
      NameNode nameNode=null;
      try {
        nameNode=new NameNode(conf);
        break;
      }
 catch (      BindException be) {
        continue;
      }
 finally {
        if (nameNode != null) {
          nameNode.stop();
        }
      }
    }
  }
  /** 
 * HDFS-3013: NameNode format command doesn't pick up dfs.namenode.name.dir.NameServiceId configuration.
 */
  @Test(timeout=300000) public void testGenericKeysForNameNodeFormat() throws IOException {
    Configuration conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY,"127.0.0.1:0");
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,"127.0.0.1:0");
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1");
    File dir=new File(MiniDFSCluster.getBaseDirectory(),"testGenericKeysForNameNodeFormat");
    if (dir.exists()) {
      FileUtil.fullyDelete(dir);
    }
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY + ".ns1",dir.getAbsolutePath());
    DFSTestUtil.formatNameNode(conf);
    GenericTestUtils.assertExists(dir);
    NameNode nameNode=new NameNode(conf);
    nameNode.stop();
  }
}
