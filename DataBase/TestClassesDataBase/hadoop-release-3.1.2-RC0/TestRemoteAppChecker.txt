public class TestRemoteAppChecker {
  private RemoteAppChecker checker;
  @After public void cleanup(){
    if (checker != null) {
      checker.stop();
    }
  }
  /** 
 * Creates/initializes/starts a RemoteAppChecker with a spied DummyYarnClientImpl.
 * @return the spied DummyYarnClientImpl in the created AppChecker
 */
  private YarnClient createCheckerWithMockedClient(){
    YarnClient client=spy(new DummyYarnClientImpl());
    checker=new RemoteAppChecker(client);
    checker.init(new Configuration());
    checker.start();
    return client;
  }
  @Test public void testNonExistentApp() throws Exception {
    YarnClient client=createCheckerWithMockedClient();
    ApplicationId id=ApplicationId.newInstance(1,1);
    doReturn(null).when(client).getApplicationReport(id);
    assertFalse(checker.isApplicationActive(id));
    doThrow(new ApplicationNotFoundException("Throw!")).when(client).getApplicationReport(id);
    assertFalse(checker.isApplicationActive(id));
  }
  @Test public void testRunningApp() throws Exception {
    YarnClient client=createCheckerWithMockedClient();
    ApplicationId id=ApplicationId.newInstance(1,1);
    ApplicationReport report=new ApplicationReportPBImpl();
    report.setYarnApplicationState(YarnApplicationState.ACCEPTED);
    doReturn(report).when(client).getApplicationReport(id);
    assertTrue(checker.isApplicationActive(id));
  }
class DummyYarnClientImpl extends YarnClientImpl {
    @Override protected void serviceInit(    Configuration conf) throws Exception {
    }
    @Override protected void serviceStart(){
    }
    @Override protected void serviceStop(){
    }
  }
}
