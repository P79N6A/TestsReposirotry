/** 
 * Unit tests for  {@link RpcCallCache}
 */
public class TestRpcCallCache {
  @Test(expected=IllegalArgumentException.class) public void testRpcCallCacheConstructorIllegalArgument0(){
    new RpcCallCache("test",0);
  }
  @Test(expected=IllegalArgumentException.class) public void testRpcCallCacheConstructorIllegalArgumentNegative(){
    new RpcCallCache("test",-1);
  }
  @Test public void testRpcCallCacheConstructor(){
    RpcCallCache cache=new RpcCallCache("test",100);
    assertEquals("test",cache.getProgram());
  }
  @Test public void testAddRemoveEntries() throws UnknownHostException {
    RpcCallCache cache=new RpcCallCache("test",100);
    InetAddress clientIp=InetAddress.getByName("1.1.1.1");
    int xid=100;
    CacheEntry e=cache.checkOrAddToCache(clientIp,xid);
    assertNull(e);
    e=cache.checkOrAddToCache(clientIp,xid);
    validateInprogressCacheEntry(e);
    RpcResponse response=mock(RpcResponse.class);
    cache.callCompleted(clientIp,xid,response);
    e=cache.checkOrAddToCache(clientIp,xid);
    validateCompletedCacheEntry(e,response);
  }
  private void validateInprogressCacheEntry(  CacheEntry c){
    assertTrue(c.isInProgress());
    assertFalse(c.isCompleted());
    assertNull(c.getResponse());
  }
  private void validateCompletedCacheEntry(  CacheEntry c,  RpcResponse response){
    assertFalse(c.isInProgress());
    assertTrue(c.isCompleted());
    assertEquals(response,c.getResponse());
  }
  @Test public void testCacheEntry(){
    CacheEntry c=new CacheEntry();
    validateInprogressCacheEntry(c);
    assertTrue(c.isInProgress());
    assertFalse(c.isCompleted());
    assertNull(c.getResponse());
    RpcResponse response=mock(RpcResponse.class);
    c.setResponse(response);
    validateCompletedCacheEntry(c,response);
  }
  @Test public void testCacheFunctionality() throws UnknownHostException {
    RpcCallCache cache=new RpcCallCache("Test",10);
    int size=0;
    for (int clientId=0; clientId < 20; clientId++) {
      InetAddress clientIp=InetAddress.getByName("1.1.1." + clientId);
      System.out.println("Adding " + clientIp);
      cache.checkOrAddToCache(clientIp,0);
      size=Math.min(++size,10);
      System.out.println("Cache size " + cache.size());
      assertEquals(size,cache.size());
      int startEntry=Math.max(clientId - 10 + 1,0);
      Iterator<Entry<ClientRequest,CacheEntry>> iterator=cache.iterator();
      for (int i=0; i < size; i++) {
        ClientRequest key=iterator.next().getKey();
        System.out.println("Entry " + key.getClientId());
        assertEquals(InetAddress.getByName("1.1.1." + (startEntry + i)),key.getClientId());
      }
      for (int i=0; i < size; i++) {
        CacheEntry e=cache.checkOrAddToCache(InetAddress.getByName("1.1.1." + (startEntry + i)),0);
        assertNotNull(e);
        assertTrue(e.isInProgress());
        assertFalse(e.isCompleted());
      }
    }
  }
}
