public class TestName {
  private FileSystem mockFs;
  private Name name;
  @Rule public Timeout globalTimeout=new Timeout(10000);
  @Before public void resetMock() throws IOException {
    mockFs=MockFileSystem.setup();
  }
  private void setup(  String arg) throws IOException {
    name=new Name();
    addArgument(name,arg);
    name.setOptions(new FindOptions());
    name.prepare();
  }
  @Test public void applyMatch() throws IOException {
    setup("name");
    PathData item=new PathData("/directory/path/name",mockFs.getConf());
    assertEquals(Result.PASS,name.apply(item,-1));
  }
  @Test public void applyNotMatch() throws IOException {
    setup("name");
    PathData item=new PathData("/directory/path/notname",mockFs.getConf());
    assertEquals(Result.FAIL,name.apply(item,-1));
  }
  @Test public void applyMixedCase() throws IOException {
    setup("name");
    PathData item=new PathData("/directory/path/NaMe",mockFs.getConf());
    assertEquals(Result.FAIL,name.apply(item,-1));
  }
  @Test public void applyGlob() throws IOException {
    setup("n*e");
    PathData item=new PathData("/directory/path/name",mockFs.getConf());
    assertEquals(Result.PASS,name.apply(item,-1));
  }
  @Test public void applyGlobMixedCase() throws IOException {
    setup("n*e");
    PathData item=new PathData("/directory/path/NaMe",mockFs.getConf());
    assertEquals(Result.FAIL,name.apply(item,-1));
  }
  @Test public void applyGlobNotMatch() throws IOException {
    setup("n*e");
    PathData item=new PathData("/directory/path/notmatch",mockFs.getConf());
    assertEquals(Result.FAIL,name.apply(item,-1));
  }
}
