public class TestViewFsFileStatusHdfs {
  static final String testfilename="/tmp/testFileStatusSerialziation";
  static final String someFile="/hdfstmp/someFileForTestGetFileChecksum";
  private static final FileSystemTestHelper fileSystemTestHelper=new FileSystemTestHelper();
  private static MiniDFSCluster cluster;
  private static Path defaultWorkingDirectory;
  private static final Configuration CONF=new Configuration();
  private static FileSystem fHdfs;
  private static FileSystem vfs;
  @BeforeClass public static void clusterSetupAtBegining() throws IOException, LoginException, URISyntaxException {
    cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
    cluster.waitClusterUp();
    fHdfs=cluster.getFileSystem();
    defaultWorkingDirectory=fHdfs.makeQualified(new Path("/user/" + UserGroupInformation.getCurrentUser().getShortUserName()));
    fHdfs.mkdirs(defaultWorkingDirectory);
    Configuration conf=ViewFileSystemTestSetup.createConfig();
    ConfigUtil.addLink(conf,"/vfstmp",new URI(fHdfs.getUri() + "/hdfstmp"));
    ConfigUtil.addLink(conf,"/tmp",new URI(fHdfs.getUri() + "/tmp"));
    vfs=FileSystem.get(FsConstants.VIEWFS_URI,conf);
    assertEquals(ViewFileSystem.class,vfs.getClass());
  }
  @Test public void testFileStatusSerialziation() throws IOException, URISyntaxException {
    long len=fileSystemTestHelper.createFile(fHdfs,testfilename);
    FileStatus stat=vfs.getFileStatus(new Path(testfilename));
    assertEquals(len,stat.getLen());
    DataOutputBuffer dob=new DataOutputBuffer();
    stat.write(dob);
    DataInputBuffer dib=new DataInputBuffer();
    dib.reset(dob.getData(),0,dob.getLength());
    FileStatus deSer=new FileStatus();
    deSer.readFields(dib);
    assertEquals(len,deSer.getLen());
  }
  @Test public void testGetFileChecksum() throws IOException, URISyntaxException {
    fileSystemTestHelper.createFile(fHdfs,someFile);
    fileSystemTestHelper.createFile(fHdfs,fileSystemTestHelper.getTestRootPath(fHdfs,someFile + "other"),1,512);
    FileChecksum viewFSCheckSum=vfs.getFileChecksum(new Path("/vfstmp/someFileForTestGetFileChecksum"));
    FileChecksum hdfsCheckSum=fHdfs.getFileChecksum(new Path(someFile));
    FileChecksum otherHdfsFileCheckSum=fHdfs.getFileChecksum(new Path(someFile + "other"));
    assertEquals("HDFS and ViewFS checksums were not the same",viewFSCheckSum,hdfsCheckSum);
    assertFalse("Some other HDFS file which should not have had the same " + "checksum as viewFS did!",viewFSCheckSum.equals(otherHdfsFileCheckSum));
  }
  @AfterClass public static void cleanup() throws IOException {
    fHdfs.delete(new Path(testfilename),true);
    fHdfs.delete(new Path(someFile),true);
    fHdfs.delete(new Path(someFile + "other"),true);
  }
}
