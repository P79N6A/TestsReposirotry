/** 
 * Testing  {@link LightWeightResizableGSet} 
 */
public class TestLightWeightResizableGSet {
  public static final Logger LOG=LoggerFactory.getLogger(TestLightWeightResizableGSet.class);
  private Random random=new Random();
  private TestElement[] generateElements(  int length){
    TestElement[] elements=new TestElement[length];
    Set<Long> keys=new HashSet<>();
    long k=0;
    for (int i=0; i < length; i++) {
      while (keys.contains(k=random.nextLong()))       ;
      elements[i]=new TestElement(k,random.nextLong());
      keys.add(k);
    }
    return elements;
  }
  private TestKey[] getKeys(  TestElement[] elements){
    TestKey[] keys=new TestKey[elements.length];
    for (int i=0; i < elements.length; i++) {
      keys[i]=new TestKey(elements[i].getKey());
    }
    return keys;
  }
  private TestElement[] generateElements(  TestKey[] keys){
    TestElement[] elements=new TestElement[keys.length];
    for (int i=0; i < keys.length; i++) {
      elements[i]=new TestElement(keys[i],random.nextLong());
    }
    return elements;
  }
private static class TestKey {
    private final long key;
    TestKey(    long key){
      this.key=key;
    }
    TestKey(    TestKey other){
      this.key=other.key;
    }
    long getKey(){
      return key;
    }
    @Override public int hashCode(){
      return (int)(key ^ (key >>> 32));
    }
    @Override public boolean equals(    Object o){
      if (this == o) {
        return true;
      }
      if (!(o instanceof TestKey)) {
        return false;
      }
      TestKey other=(TestKey)o;
      return key == other.key;
    }
  }
private static class TestElement extends TestKey implements LightWeightResizableGSet.LinkedElement {
    private final long data;
    private LightWeightResizableGSet.LinkedElement next;
    TestElement(    long key,    long data){
      super(key);
      this.data=data;
    }
    TestElement(    TestKey key,    long data){
      super(key);
      this.data=data;
    }
    long getData(){
      return data;
    }
    @Override public void setNext(    LightWeightResizableGSet.LinkedElement next){
      this.next=next;
    }
    @Override public LightWeightResizableGSet.LinkedElement getNext(){
      return next;
    }
  }
  @Test(timeout=60000) public void testBasicOperations(){
    TestElement[] elements=generateElements(1 << 16);
    final LightWeightResizableGSet<TestKey,TestElement> set=new LightWeightResizableGSet<TestKey,TestElement>();
    assertEquals(set.size(),0);
    for (int i=0; i < elements.length; i++) {
      TestElement element=set.put(elements[i]);
      assertTrue(element == null);
    }
    assertEquals(set.size(),elements.length);
    for (int i=0; i < elements.length; i++) {
      assertTrue(set.contains(elements[i]));
      TestElement element=set.get(elements[i]);
      assertEquals(elements[i].getData(),element.getData());
    }
    TestKey[] keys=getKeys(elements);
    TestElement[] newElements=generateElements(keys);
    for (int i=0; i < newElements.length; i++) {
      TestElement element=set.put(newElements[i]);
      assertTrue(element != null);
    }
    assertEquals(set.size(),elements.length);
    for (int i=0; i < keys.length; i++) {
      assertTrue(set.contains(keys[i]));
      TestElement element=set.get(keys[i]);
      assertEquals(newElements[i].getData(),element.getData());
    }
    Collection<TestElement> cElements=set.values();
    assertEquals(cElements.size(),elements.length);
    for (    TestElement element : cElements) {
      assertTrue(set.contains(element));
    }
    for (int i=0; i < keys.length; i++) {
      TestElement element=set.remove(keys[i]);
      assertTrue(element != null);
      assertFalse(set.contains(keys[i]));
    }
    assertEquals(set.size(),0);
  }
  @Test(timeout=60000) public void testRemoveAll(){
    TestElement[] elements=generateElements(1 << 16);
    final LightWeightResizableGSet<TestKey,TestElement> set=new LightWeightResizableGSet<TestKey,TestElement>();
    assertEquals(set.size(),0);
    for (int i=0; i < elements.length; i++) {
      TestElement element=set.put(elements[i]);
      assertTrue(element == null);
    }
    assertEquals(set.size(),elements.length);
{
      set.clear();
      assertEquals(set.size(),0);
      for (int i=0; i < elements.length; i++) {
        assertFalse(set.contains(elements[i]));
      }
      assertFalse(set.iterator().hasNext());
    }
    for (int i=0; i < elements.length; i++) {
      TestElement element=set.put(elements[i]);
      assertTrue(element == null);
    }
{
      for (Iterator<TestElement> iter=set.iterator(); iter.hasNext(); ) {
        TestElement element=iter.next();
        assertTrue(set.contains(element));
        iter.remove();
        assertFalse(set.contains(element));
      }
      for (int i=0; i < elements.length; i++) {
        assertFalse(set.contains(elements[i]));
      }
      assertFalse(set.iterator().hasNext());
      assertEquals(set.size(),0);
    }
  }
}
