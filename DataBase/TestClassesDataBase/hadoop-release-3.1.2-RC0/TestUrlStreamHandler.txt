/** 
 * Test of the URL stream handler.
 */
public class TestUrlStreamHandler {
  private static final File TEST_ROOT_DIR=PathUtils.getTestDir(TestUrlStreamHandler.class);
  private static final FsUrlStreamHandlerFactory HANDLER_FACTORY=new FsUrlStreamHandlerFactory();
  @BeforeClass public static void setupHandler(){
    URL.setURLStreamHandlerFactory(HANDLER_FACTORY);
  }
  /** 
 * Test opening and reading from an InputStream through a hdfs:// URL. <p> First generate a file with some content through the FileSystem API, then try to open and read the file through the URL stream API.
 * @throws IOException
 */
  @Test public void testDfsUrls() throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    FileSystem fs=cluster.getFileSystem();
    Path filePath=new Path("/thefile");
    try {
      byte[] fileContent=new byte[1024];
      for (int i=0; i < fileContent.length; ++i)       fileContent[i]=(byte)i;
      OutputStream os=fs.create(filePath);
      os.write(fileContent);
      os.close();
      URI uri=fs.getUri();
      URL fileURL=new URL(uri.getScheme(),uri.getHost(),uri.getPort(),filePath.toString());
      InputStream is=fileURL.openStream();
      assertNotNull(is);
      byte[] bytes=new byte[4096];
      assertEquals(1024,is.read(bytes));
      is.close();
      for (int i=0; i < fileContent.length; ++i)       assertEquals(fileContent[i],bytes[i]);
      fs.delete(filePath,false);
    }
  finally {
      fs.close();
      cluster.shutdown();
    }
  }
  /** 
 * Test opening and reading from an InputStream through a file:// URL.
 * @throws IOException
 * @throws URISyntaxException
 */
  @Test public void testFileUrls() throws IOException, URISyntaxException {
    Configuration conf=new HdfsConfiguration();
    if (!TEST_ROOT_DIR.exists()) {
      if (!TEST_ROOT_DIR.mkdirs())       throw new IOException("Cannot create temporary directory: " + TEST_ROOT_DIR);
    }
    File tmpFile=new File(TEST_ROOT_DIR,"thefile");
    URI uri=tmpFile.toURI();
    FileSystem fs=FileSystem.get(uri,conf);
    try {
      byte[] fileContent=new byte[1024];
      for (int i=0; i < fileContent.length; ++i)       fileContent[i]=(byte)i;
      OutputStream os=fs.create(new Path(uri.getPath()));
      os.write(fileContent);
      os.close();
      URL fileURL=uri.toURL();
      InputStream is=fileURL.openStream();
      assertNotNull(is);
      byte[] bytes=new byte[4096];
      assertEquals(1024,is.read(bytes));
      is.close();
      for (int i=0; i < fileContent.length; ++i)       assertEquals(fileContent[i],bytes[i]);
      fs.delete(new Path(uri.getPath()),false);
    }
  finally {
      fs.close();
    }
  }
  @Test public void testHttpDefaultHandler() throws Throwable {
    assertNull("Handler for HTTP is the Hadoop one",HANDLER_FACTORY.createURLStreamHandler("http"));
  }
  @Test public void testHttpsDefaultHandler() throws Throwable {
    assertNull("Handler for HTTPS is the Hadoop one",HANDLER_FACTORY.createURLStreamHandler("https"));
  }
  @Test public void testUnknownProtocol() throws Throwable {
    assertNull("Unknown protocols are not handled",HANDLER_FACTORY.createURLStreamHandler("gopher"));
  }
}
