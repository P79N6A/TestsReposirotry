public class TestSubmitApplicationWithRMHA extends RMHATestBase {
  public static final Log LOG=LogFactory.getLog(TestSubmitApplicationWithRMHA.class);
  @Test public void testHandleRMHABeforeSubmitApplicationCallWithSavedApplicationState() throws Exception {
    startRMs();
    ApplicationId appId=rm1.getNewAppId().getApplicationId();
    explicitFailover();
    RMApp app1=rm2.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false,true,appId);
    verifySubmitApp(rm2,app1,appId);
  }
  private void verifySubmitApp(  MockRM rm,  RMApp app,  ApplicationId expectedAppId) throws Exception {
    int maxWaittingTimes=20;
    int count=0;
    while (true) {
      YarnApplicationState state=rm.getApplicationReport(app.getApplicationId()).getYarnApplicationState();
      if (!state.equals(YarnApplicationState.NEW) && !state.equals(YarnApplicationState.NEW_SAVING)) {
        break;
      }
      if (count > maxWaittingTimes) {
        break;
      }
      Thread.sleep(200);
      count++;
    }
    YarnApplicationState state=rm.getApplicationReport(app.getApplicationId()).getYarnApplicationState();
    Assert.assertTrue(state == YarnApplicationState.ACCEPTED || state == YarnApplicationState.SUBMITTED);
    Assert.assertEquals(expectedAppId,app.getApplicationId());
  }
  @Test public void testHandleRMHAafterSubmitApplicationCallWithSavedApplicationState() throws Exception {
    startRMs();
    RMApp app0=rm1.submitApp(200);
    explicitFailover();
    ApplicationReport appReport=rm2.getApplicationReport(app0.getApplicationId());
    Assert.assertTrue(appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED || appReport.getYarnApplicationState() == YarnApplicationState.SUBMITTED);
  }
  @Test public void testHandleRMHAafterSubmitApplicationCallWithoutSavedApplicationState() throws Exception {
    startRMsWithCustomizedRMAppManager();
    RMApp app0=rm1.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false);
    explicitFailover();
    try {
      rm2.getApplicationReport(app0.getApplicationId());
      Assert.fail("Should get ApplicationNotFoundException here");
    }
 catch (    ApplicationNotFoundException ex) {
    }
    RMApp app1=rm2.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false,true,app0.getApplicationId());
    verifySubmitApp(rm2,app1,app0.getApplicationId());
  }
  /** 
 * Test multiple calls of getApplicationReport, to make sure it is idempotent
 */
  @Test public void testGetApplicationReportIdempotent() throws Exception {
    startRMs();
    RMApp app=rm1.submitApp(200);
    ApplicationReport appReport1=rm1.getApplicationReport(app.getApplicationId());
    Assert.assertTrue(appReport1.getYarnApplicationState() == YarnApplicationState.ACCEPTED || appReport1.getYarnApplicationState() == YarnApplicationState.SUBMITTED);
    ApplicationReport appReport2=rm1.getApplicationReport(app.getApplicationId());
    Assert.assertEquals(appReport1.getApplicationId(),appReport2.getApplicationId());
    Assert.assertEquals(appReport1.getYarnApplicationState(),appReport2.getYarnApplicationState());
    explicitFailover();
    ApplicationReport appReport3=rm2.getApplicationReport(app.getApplicationId());
    Assert.assertEquals(appReport1.getApplicationId(),appReport3.getApplicationId());
    Assert.assertEquals(appReport1.getYarnApplicationState(),appReport3.getYarnApplicationState());
    ApplicationReport appReport4=rm2.getApplicationReport(app.getApplicationId());
    Assert.assertEquals(appReport3.getApplicationId(),appReport4.getApplicationId());
    Assert.assertEquals(appReport3.getYarnApplicationState(),appReport4.getYarnApplicationState());
  }
  @Test(timeout=50000) public void testHandleRMHADuringSubmitApplicationCallWithSavedApplicationState() throws Exception {
    startRMs();
    RMApp app0=rm1.submitApp(200);
    explicitFailover();
    Assert.assertTrue(rm2.getRMContext().getRMApps().containsKey(app0.getApplicationId()));
    RMApp app1=rm2.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false,true,app0.getApplicationId());
    Assert.assertEquals(app1.getApplicationId(),app0.getApplicationId());
  }
  @Test(timeout=50000) public void testHandleRMHADuringSubmitApplicationCallWithoutSavedApplicationState() throws Exception {
    startRMsWithCustomizedRMAppManager();
    RMApp app0=rm1.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false);
    explicitFailover();
    Assert.assertFalse(rm2.getRMContext().getRMApps().containsKey(app0.getApplicationId()));
    RMApp app1=rm2.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,null,configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false,true,app0.getApplicationId());
    verifySubmitApp(rm2,app1,app0.getApplicationId());
    Assert.assertTrue(rm2.getRMContext().getRMApps().containsKey(app0.getApplicationId()));
  }
}
