private static class DelayedSimulatedFSDataset extends SimulatedFSDataset {
  private volatile boolean isDelayed=true;
  DelayedSimulatedFSDataset(  DataNode datanode,  DataStorage storage,  Configuration conf){
    super(datanode,storage,conf);
  }
  @Override public synchronized InputStream getBlockInputStream(  ExtendedBlock b,  long seekOffset) throws IOException {
    while (isDelayed) {
      try {
        this.wait();
      }
 catch (      InterruptedException ignored) {
      }
    }
    InputStream result=super.getBlockInputStream(b);
    IOUtils.skipFully(result,seekOffset);
    return result;
  }
static class Factory extends FsDatasetSpi.Factory<DelayedSimulatedFSDataset> {
    @Override public DelayedSimulatedFSDataset newInstance(    DataNode datanode,    DataStorage storage,    Configuration conf) throws IOException {
      return new DelayedSimulatedFSDataset(datanode,storage,conf);
    }
    @Override public boolean isSimulated(){
      return true;
    }
  }
}
