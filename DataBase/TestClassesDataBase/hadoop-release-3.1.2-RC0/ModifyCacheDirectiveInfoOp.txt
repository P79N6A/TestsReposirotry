/** 
 * modifyCacheDirective 
 */
class ModifyCacheDirectiveInfoOp extends AtMostOnceOp {
  private final CacheDirectiveInfo directive;
  private final short newReplication;
  private long id;
  ModifyCacheDirectiveInfoOp(  DFSClient client,  CacheDirectiveInfo directive,  short newReplication){
    super("modifyCacheDirective",client);
    this.directive=directive;
    this.newReplication=newReplication;
  }
  @Override void prepare() throws Exception {
    expectedUpdateCount++;
    dfs.addCachePool(new CachePoolInfo(directive.getPool()));
    expectedUpdateCount++;
    id=client.addCacheDirective(directive,EnumSet.of(CacheFlag.FORCE));
  }
  @Override void invoke() throws Exception {
    expectedUpdateCount++;
    client.modifyCacheDirective(new CacheDirectiveInfo.Builder().setId(id).setReplication(newReplication).build(),EnumSet.of(CacheFlag.FORCE));
  }
  @Override boolean checkNamenodeBeforeReturn() throws Exception {
    for (int i=0; i < CHECKTIMES; i++) {
      RemoteIterator<CacheDirectiveEntry> iter=dfs.listCacheDirectives(new CacheDirectiveInfo.Builder().setPool(directive.getPool()).setPath(directive.getPath()).build());
      while (iter.hasNext()) {
        CacheDirectiveInfo result=iter.next().getInfo();
        if ((result.getId() == id) && (result.getReplication().shortValue() == newReplication)) {
          return true;
        }
      }
      Thread.sleep(1000);
    }
    return false;
  }
  @Override Object getResult(){
    return null;
  }
}
