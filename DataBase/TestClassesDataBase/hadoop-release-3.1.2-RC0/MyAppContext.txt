class MyAppContext implements AppContext {
  private final ApplicationAttemptId myAppAttemptID;
  private final ApplicationId myApplicationID;
  private final JobId myJobID;
  private final Map<JobId,Job> allJobs;
  MyAppContext(  int numberMaps,  int numberReduces){
    myApplicationID=ApplicationId.newInstance(clock.getTime(),1);
    myAppAttemptID=ApplicationAttemptId.newInstance(myApplicationID,0);
    myJobID=recordFactory.newRecordInstance(JobId.class);
    myJobID.setAppId(myApplicationID);
    Job myJob=new MyJobImpl(myJobID,numberMaps,numberReduces);
    allJobs=Collections.singletonMap(myJobID,myJob);
  }
  @Override public ApplicationAttemptId getApplicationAttemptId(){
    return myAppAttemptID;
  }
  @Override public ApplicationId getApplicationID(){
    return myApplicationID;
  }
  @Override public Job getJob(  JobId jobID){
    return allJobs.get(jobID);
  }
  @Override public Map<JobId,Job> getAllJobs(){
    return allJobs;
  }
  @Override public EventHandler<Event> getEventHandler(){
    return dispatcher.getEventHandler();
  }
  @Override public CharSequence getUser(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Clock getClock(){
    return clock;
  }
  @Override public String getApplicationName(){
    return null;
  }
  @Override public long getStartTime(){
    return 0;
  }
  @Override public ClusterInfo getClusterInfo(){
    return new ClusterInfo();
  }
  @Override public Set<String> getBlacklistedNodes(){
    return null;
  }
  @Override public ClientToAMTokenSecretManager getClientToAMTokenSecretManager(){
    return null;
  }
  @Override public boolean isLastAMRetry(){
    return false;
  }
  @Override public boolean hasSuccessfullyUnregistered(){
    return true;
  }
  @Override public String getNMHostname(){
    return null;
  }
  @Override public TaskAttemptFinishingMonitor getTaskAttemptFinishingMonitor(){
    return null;
  }
  @Override public String getHistoryUrl(){
    return null;
  }
  @Override public void setHistoryUrl(  String historyUrl){
    return;
  }
}
