public class TestTFileUnsortedByteArrays {
  private static String ROOT=GenericTestUtils.getTestDir().getAbsolutePath();
  private final static int BLOCK_SIZE=512;
  private final static int BUF_SIZE=64;
  private FileSystem fs;
  private Configuration conf;
  private Path path;
  private FSDataOutputStream out;
  private Writer writer;
  private String compression=Compression.Algorithm.GZ.getName();
  private String outputFile="TFileTestUnsorted";
  private int records1stBlock=4314;
  private int records2ndBlock=4108;
  public void init(  String compression,  String outputFile,  int numRecords1stBlock,  int numRecords2ndBlock){
    this.compression=compression;
    this.outputFile=outputFile;
    this.records1stBlock=numRecords1stBlock;
    this.records2ndBlock=numRecords2ndBlock;
  }
  @Before public void setUp() throws IOException {
    conf=new Configuration();
    path=new Path(ROOT,outputFile);
    fs=path.getFileSystem(conf);
    out=fs.create(path);
    writer=new Writer(out,BLOCK_SIZE,compression,null,conf);
    writer.append("keyZ".getBytes(),"valueZ".getBytes());
    writer.append("keyM".getBytes(),"valueM".getBytes());
    writer.append("keyN".getBytes(),"valueN".getBytes());
    writer.append("keyA".getBytes(),"valueA".getBytes());
    closeOutput();
  }
  @After public void tearDown() throws IOException {
    fs.delete(path,true);
  }
  @Test public void testFailureScannerWithKeys() throws IOException {
    Reader reader=new Reader(fs.open(path),fs.getFileStatus(path).getLen(),conf);
    Assert.assertFalse(reader.isSorted());
    Assert.assertEquals((int)reader.getEntryCount(),4);
    try {
      Scanner scanner=reader.createScannerByKey("aaa".getBytes(),"zzz".getBytes());
      Assert.fail("Failed to catch creating scanner with keys on unsorted file.");
    }
 catch (    RuntimeException e) {
    }
 finally {
      reader.close();
    }
  }
  @Test public void testScan() throws IOException {
    Reader reader=new Reader(fs.open(path),fs.getFileStatus(path).getLen(),conf);
    Assert.assertFalse(reader.isSorted());
    Assert.assertEquals((int)reader.getEntryCount(),4);
    Scanner scanner=reader.createScanner();
    try {
      byte[] kbuf=new byte[BUF_SIZE];
      int klen=scanner.entry().getKeyLength();
      scanner.entry().getKey(kbuf);
      Assert.assertEquals(new String(kbuf,0,klen),"keyZ");
      byte[] vbuf=new byte[BUF_SIZE];
      int vlen=scanner.entry().getValueLength();
      scanner.entry().getValue(vbuf);
      Assert.assertEquals(new String(vbuf,0,vlen),"valueZ");
      scanner.advance();
      vbuf=new byte[BUF_SIZE];
      vlen=scanner.entry().getValueLength();
      scanner.entry().getValue(vbuf);
      Assert.assertEquals(new String(vbuf,0,vlen),"valueM");
      kbuf=new byte[BUF_SIZE];
      klen=scanner.entry().getKeyLength();
      scanner.entry().getKey(kbuf);
      Assert.assertEquals(new String(kbuf,0,klen),"keyM");
    }
  finally {
      scanner.close();
      reader.close();
    }
  }
  @Test public void testScanRange() throws IOException {
    Reader reader=new Reader(fs.open(path),fs.getFileStatus(path).getLen(),conf);
    Assert.assertFalse(reader.isSorted());
    Assert.assertEquals((int)reader.getEntryCount(),4);
    Scanner scanner=reader.createScanner();
    try {
      byte[] kbuf=new byte[BUF_SIZE];
      int klen=scanner.entry().getKeyLength();
      scanner.entry().getKey(kbuf);
      Assert.assertEquals(new String(kbuf,0,klen),"keyZ");
      byte[] vbuf=new byte[BUF_SIZE];
      int vlen=scanner.entry().getValueLength();
      scanner.entry().getValue(vbuf);
      Assert.assertEquals(new String(vbuf,0,vlen),"valueZ");
      scanner.advance();
      vbuf=new byte[BUF_SIZE];
      vlen=scanner.entry().getValueLength();
      scanner.entry().getValue(vbuf);
      Assert.assertEquals(new String(vbuf,0,vlen),"valueM");
      kbuf=new byte[BUF_SIZE];
      klen=scanner.entry().getKeyLength();
      scanner.entry().getKey(kbuf);
      Assert.assertEquals(new String(kbuf,0,klen),"keyM");
    }
  finally {
      scanner.close();
      reader.close();
    }
  }
  @Test public void testFailureSeek() throws IOException {
    Reader reader=new Reader(fs.open(path),fs.getFileStatus(path).getLen(),conf);
    Scanner scanner=reader.createScanner();
    try {
      try {
        scanner.lowerBound("keyN".getBytes());
        Assert.fail("Cannot search in a unsorted TFile!");
      }
 catch (      Exception e) {
      }
 finally {
      }
      try {
        scanner.upperBound("keyA".getBytes());
        Assert.fail("Cannot search higher in a unsorted TFile!");
      }
 catch (      Exception e) {
      }
 finally {
      }
      try {
        scanner.seekTo("keyM".getBytes());
        Assert.fail("Cannot search a unsorted TFile!");
      }
 catch (      Exception e) {
      }
 finally {
      }
    }
  finally {
      scanner.close();
      reader.close();
    }
  }
  private void closeOutput() throws IOException {
    if (writer != null) {
      writer.close();
      writer=null;
      out.close();
      out=null;
    }
  }
}
