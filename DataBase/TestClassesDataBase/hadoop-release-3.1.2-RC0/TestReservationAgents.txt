/** 
 * General purpose ReservationAgent tester.
 */
@RunWith(Parameterized.class) @SuppressWarnings("VisibilityModifier") public class TestReservationAgents {
  @Parameterized.Parameter(value=0) public Class agentClass;
  @Parameterized.Parameter(value=1) public boolean allocateLeft;
  @Parameterized.Parameter(value=2) public String recurrenceExpression;
  @Parameterized.Parameter(value=3) public int numOfNodes;
  private long step;
  private Random rand=new Random(2);
  private ReservationAgent agent;
  private Plan plan;
  private ResourceCalculator resCalc=new DefaultResourceCalculator();
  private Resource minAlloc=Resource.newInstance(1024,1);
  private Resource maxAlloc=Resource.newInstance(32 * 1023,32);
  private long timeHorizon=2 * 24 * 3600* 1000;
  private static final Logger LOG=LoggerFactory.getLogger(TestReservationAgents.class);
  @Parameterized.Parameters(name="Testing: agent {0}, allocateLeft: {1}," + " recurrenceExpression: {2}, numNodes: {3})") public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{GreedyReservationAgent.class,true,"0",100},{GreedyReservationAgent.class,false,"0",100},{GreedyReservationAgent.class,true,"7200000",100},{GreedyReservationAgent.class,false,"7200000",100},{GreedyReservationAgent.class,true,"86400000",100},{GreedyReservationAgent.class,false,"86400000",100},{AlignedPlannerWithGreedy.class,true,"0",100},{AlignedPlannerWithGreedy.class,false,"0",100},{AlignedPlannerWithGreedy.class,true,"7200000",100},{AlignedPlannerWithGreedy.class,false,"7200000",100},{AlignedPlannerWithGreedy.class,true,"86400000",100},{AlignedPlannerWithGreedy.class,false,"86400000",100}});
  }
  @Before public void setup() throws Exception {
    long seed=rand.nextLong();
    rand.setSeed(seed);
    LOG.info("Running with seed: " + seed);
    long timeWindow=1000000L;
    Resource clusterCapacity=Resource.newInstance(numOfNodes * 1024,numOfNodes);
    step=1000L;
    String reservationQ=ReservationSystemTestUtil.getFullReservationQueueName();
    float instConstraint=100;
    float avgConstraint=100;
    ReservationSchedulerConfiguration conf=ReservationSystemTestUtil.createConf(reservationQ,timeWindow,instConstraint,avgConstraint);
    CapacityOverTimePolicy policy=new CapacityOverTimePolicy();
    policy.init(reservationQ,conf);
    conf.setBoolean(GreedyReservationAgent.FAVOR_EARLY_ALLOCATION,allocateLeft);
    agent=(ReservationAgent)agentClass.newInstance();
    agent.init(conf);
    QueueMetrics queueMetrics=mock(QueueMetrics.class);
    RMContext context=ReservationSystemTestUtil.createMockRMContext();
    plan=new InMemoryPlan(queueMetrics,policy,agent,clusterCapacity,step,resCalc,minAlloc,maxAlloc,"dedicated",null,true,context);
  }
  @Test public void test() throws Exception {
    long period=Long.parseLong(recurrenceExpression);
    for (int i=0; i < 1000; i++) {
      ReservationDefinition rr=createRandomRequest(i);
      if (rr != null) {
        ReservationId reservationID=ReservationSystemTestUtil.getNewReservationId();
        try {
          agent.createReservation(reservationID,"u1",plan,rr);
        }
 catch (        PlanningException p) {
        }
      }
    }
  }
  private ReservationDefinition createRandomRequest(  int i) throws PlanningException {
    long arrival=(long)Math.floor(rand.nextDouble() * timeHorizon);
    long period=Long.parseLong(recurrenceExpression);
    long duration=(long)Math.round(Math.min(rand.nextDouble() * 3600 * 1000,period));
    long deadline=(long)Math.ceil(arrival + Math.min(duration * rand.nextDouble() * 10,period));
    assert ((deadline - arrival) <= period);
    RLESparseResourceAllocation available=plan.getAvailableResourceOverTime("u1",null,arrival,deadline,period);
    NavigableMap<Long,Resource> availableMap=available.getCumulative();
    List<ReservationRequest> reservationRequests=new ArrayList<>();
    for (    Map.Entry<Long,Resource> e : availableMap.entrySet()) {
      if (e.getValue() != null && rand.nextDouble() > 0.001) {
        int numContainers=(int)Math.ceil(Resources.divide(resCalc,plan.getTotalCapacity(),e.getValue(),minAlloc) / 2);
        long tempDur=Math.min(duration,availableMap.higherKey(e.getKey()) - e.getKey());
        reservationRequests.add(ReservationRequest.newInstance(minAlloc,numContainers,1,tempDur));
      }
    }
    if (reservationRequests.size() < 1) {
      return null;
    }
    ReservationDefinition rr=new ReservationDefinitionPBImpl();
    rr.setArrival(arrival);
    rr.setDeadline(deadline);
    rr.setRecurrenceExpression(recurrenceExpression);
    ReservationRequests reqs=new ReservationRequestsPBImpl();
    reqs.setInterpreter(ReservationRequestInterpreter.R_ORDER);
    reqs.setReservationResources(reservationRequests);
    rr.setReservationRequests(reqs);
    rr.setReservationName("res_" + i);
    return rr;
  }
}
