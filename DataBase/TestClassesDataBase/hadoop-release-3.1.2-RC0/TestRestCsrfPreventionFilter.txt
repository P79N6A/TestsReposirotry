/** 
 * This class tests the behavior of the RestCsrfPreventionFilter.
 */
public class TestRestCsrfPreventionFilter {
  private static final String NON_BROWSER="java";
  private static final String BROWSER_AGENT="Mozilla/5.0 (compatible; U; ABrowse 0.6; Syllable)" + " AppleWebKit/420+ (KHTML, like Gecko)";
  private static final String EXPECTED_MESSAGE="Missing Required Header for CSRF Vulnerability Protection";
  private static final String X_CUSTOM_HEADER="X-CUSTOM_HEADER";
  @Test public void testNoHeaderDefaultConfigBadRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    verify(mockRes,atLeastOnce()).sendError(HttpServletResponse.SC_BAD_REQUEST,EXPECTED_MESSAGE);
    Mockito.verifyZeroInteractions(mockChain);
  }
  @Test public void testNoHeaderCustomAgentConfigBadRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.BROWSER_USER_AGENT_PARAM)).thenReturn("^Mozilla.*,^Opera.*,curl");
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn("curl");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    verify(mockRes,atLeastOnce()).sendError(HttpServletResponse.SC_BAD_REQUEST,EXPECTED_MESSAGE);
    Mockito.verifyZeroInteractions(mockChain);
  }
  @Test public void testNoHeaderDefaultConfigNonBrowserGoodRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(NON_BROWSER);
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verify(mockChain).doFilter(mockReq,mockRes);
  }
  @Test public void testHeaderPresentDefaultConfigGoodRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn("valueUnimportant");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verify(mockChain).doFilter(mockReq,mockRes);
  }
  @Test public void testHeaderPresentCustomHeaderConfigGoodRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(X_CUSTOM_HEADER);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(X_CUSTOM_HEADER)).thenReturn("valueUnimportant");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verify(mockChain).doFilter(mockReq,mockRes);
  }
  @Test public void testMissingHeaderWithCustomHeaderConfigBadRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(X_CUSTOM_HEADER);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn(null);
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verifyZeroInteractions(mockChain);
  }
  @Test public void testMissingHeaderNoMethodsToIgnoreConfigBadRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn("");
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getMethod()).thenReturn("GET");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verifyZeroInteractions(mockChain);
  }
  @Test public void testMissingHeaderIgnoreGETMethodConfigGoodRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn("GET");
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getMethod()).thenReturn("GET");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verify(mockChain).doFilter(mockReq,mockRes);
  }
  @Test public void testMissingHeaderMultipleIgnoreMethodsConfigGoodRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn("GET,OPTIONS");
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getMethod()).thenReturn("OPTIONS");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verify(mockChain).doFilter(mockReq,mockRes);
  }
  @Test public void testMissingHeaderMultipleIgnoreMethodsConfigBadRequest() throws ServletException, IOException {
    FilterConfig filterConfig=Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)).thenReturn(null);
    Mockito.when(filterConfig.getInitParameter(RestCsrfPreventionFilter.CUSTOM_METHODS_TO_IGNORE_PARAM)).thenReturn("GET,OPTIONS");
    HttpServletRequest mockReq=Mockito.mock(HttpServletRequest.class);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_USER_AGENT)).thenReturn(BROWSER_AGENT);
    Mockito.when(mockReq.getHeader(RestCsrfPreventionFilter.HEADER_DEFAULT)).thenReturn(null);
    Mockito.when(mockReq.getMethod()).thenReturn("PUT");
    HttpServletResponse mockRes=Mockito.mock(HttpServletResponse.class);
    FilterChain mockChain=Mockito.mock(FilterChain.class);
    RestCsrfPreventionFilter filter=new RestCsrfPreventionFilter();
    filter.init(filterConfig);
    filter.doFilter(mockReq,mockRes,mockChain);
    Mockito.verifyZeroInteractions(mockChain);
  }
}
