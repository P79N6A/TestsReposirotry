/** 
 * deleteSnapshot 
 */
class DeleteSnapshotOp extends AtMostOnceOp {
  private final String dir;
  private final String snapshotName;
  DeleteSnapshotOp(  DFSClient client,  String dir,  String snapshotName){
    super("deleteSnapshot",client);
    this.dir=dir;
    this.snapshotName=snapshotName;
  }
  @Override void prepare() throws Exception {
    final Path dirPath=new Path(dir);
    if (!dfs.exists(dirPath)) {
      dfs.mkdirs(dirPath);
    }
    Path sPath=SnapshotTestHelper.getSnapshotRoot(dirPath,snapshotName);
    if (!dfs.exists(sPath)) {
      dfs.allowSnapshot(dirPath);
      dfs.createSnapshot(dirPath,snapshotName);
    }
  }
  @Override void invoke() throws Exception {
    client.deleteSnapshot(dir,snapshotName);
  }
  @Override boolean checkNamenodeBeforeReturn() throws Exception {
    final Path sPath=SnapshotTestHelper.getSnapshotRoot(new Path(dir),snapshotName);
    boolean snapshotNotDeleted=dfs.exists(sPath);
    for (int i=0; i < CHECKTIMES && snapshotNotDeleted; i++) {
      Thread.sleep(1000);
      snapshotNotDeleted=dfs.exists(sPath);
    }
    return !snapshotNotDeleted;
  }
  @Override Object getResult(){
    return null;
  }
}
