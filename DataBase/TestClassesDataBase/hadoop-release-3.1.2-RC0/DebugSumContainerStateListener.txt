/** 
 * Container State transition listener to track the number of times a container has transitioned into a state.
 */
public static class DebugSumContainerStateListener implements ContainerStateTransitionListener {
  private static final Logger LOG=LoggerFactory.getLogger(DebugSumContainerStateListener.class);
  private static final Map<ContainerId,Map<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState,Long>> TRANSITION_COUNTER=new HashMap<>();
  public void init(  Context context){
  }
  public void preTransition(  ContainerImpl op,  org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState beforeState,  ContainerEvent eventToBeProcessed){
  }
  public void postTransition(  ContainerImpl op,  org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState beforeState,  org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState afterState,  ContainerEvent processedEvent){
synchronized (TRANSITION_COUNTER) {
      if (beforeState != afterState) {
        ContainerId id=op.getContainerId();
        TRANSITION_COUNTER.putIfAbsent(id,new HashMap<>());
        long sum=TRANSITION_COUNTER.get(id).compute(afterState,(state,count) -> count == null ? 1 : count + 1);
        LOG.info("***** " + id + " Transition from "+ beforeState+ " to "+ afterState+ "sum:"+ sum);
      }
    }
  }
  /** 
 * Get the current number of state transitions. This is useful to check, if an event has occurred in unit tests.
 * @param id Container id to check
 * @param state Return the overall number of transitions to this state
 * @return Number of transitions to the state specified
 */
  static long getTransitionCounter(  ContainerId id,  org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState state){
    Long ret=TRANSITION_COUNTER.getOrDefault(id,new HashMap<>()).get(state);
    return ret != null ? ret : 0;
  }
}
