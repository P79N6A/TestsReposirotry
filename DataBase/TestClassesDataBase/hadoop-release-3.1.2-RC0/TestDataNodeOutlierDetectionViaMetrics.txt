/** 
 * Test that the  {@link DataNodePeerMetrics} class is able to detectoutliers i.e. slow nodes via the metrics it maintains.
 */
public class TestDataNodeOutlierDetectionViaMetrics {
  public static final Logger LOG=LoggerFactory.getLogger(TestDataNodeOutlierDetectionViaMetrics.class);
  /** 
 * Set a timeout for every test case.
 */
  @Rule public Timeout testTimeout=new Timeout(300_000);
  private static final int WINDOW_INTERVAL_SECONDS=3;
  private static final int ROLLING_AVERAGE_WINDOWS=10;
  private static final int SLOW_NODE_LATENCY_MS=20_000;
  private static final int FAST_NODE_MAX_LATENCY_MS=5;
  private static final long MIN_OUTLIER_DETECTION_PEERS=10;
  private Random random=new Random(System.currentTimeMillis());
  @Before public void setup(){
    GenericTestUtils.setLogLevel(DataNodePeerMetrics.LOG,Level.ALL);
    GenericTestUtils.setLogLevel(OutlierDetector.LOG,Level.ALL);
  }
  /** 
 * Test that a very slow peer is detected as an outlier.
 */
  @Test public void testOutlierIsDetected() throws Exception {
    final String slowNodeName="SlowNode";
    DataNodePeerMetrics peerMetrics=new DataNodePeerMetrics("PeerMetrics-For-Test");
    MetricsTestHelper.replaceRollingAveragesScheduler(peerMetrics.getSendPacketDownstreamRollingAverages(),ROLLING_AVERAGE_WINDOWS,WINDOW_INTERVAL_SECONDS,TimeUnit.SECONDS);
    injectFastNodesSamples(peerMetrics);
    injectSlowNodeSamples(peerMetrics,slowNodeName);
    peerMetrics.dumpSendPacketDownstreamAvgInfoAsJson();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return peerMetrics.getOutliers().size() > 0;
      }
    }
,500,100_000);
    final Map<String,Double> outliers=peerMetrics.getOutliers();
    LOG.info("Got back outlier nodes: {}",outliers);
    assertThat(outliers.size(),is(1));
    assertTrue(outliers.containsKey(slowNodeName));
  }
  /** 
 * Test that when there are no outliers, we get back nothing.
 */
  @Test public void testWithNoOutliers() throws Exception {
    DataNodePeerMetrics peerMetrics=new DataNodePeerMetrics("PeerMetrics-For-Test");
    MetricsTestHelper.replaceRollingAveragesScheduler(peerMetrics.getSendPacketDownstreamRollingAverages(),ROLLING_AVERAGE_WINDOWS,WINDOW_INTERVAL_SECONDS,TimeUnit.SECONDS);
    injectFastNodesSamples(peerMetrics);
    peerMetrics.dumpSendPacketDownstreamAvgInfoAsJson();
    assertTrue(peerMetrics.getOutliers().isEmpty());
  }
  /** 
 * Inject fake stats for MIN_OUTLIER_DETECTION_PEERS fast nodes.
 * @param peerMetrics
 */
  public void injectFastNodesSamples(  DataNodePeerMetrics peerMetrics){
    for (int nodeIndex=0; nodeIndex < MIN_OUTLIER_DETECTION_PEERS; ++nodeIndex) {
      final String nodeName="FastNode-" + nodeIndex;
      LOG.info("Generating stats for node {}",nodeName);
      for (int i=0; i < 2 * DataNodePeerMetrics.MIN_OUTLIER_DETECTION_SAMPLES; ++i) {
        peerMetrics.addSendPacketDownstream(nodeName,random.nextInt(FAST_NODE_MAX_LATENCY_MS));
      }
    }
  }
  /** 
 * Inject fake stats for one extremely slow node.
 */
  public void injectSlowNodeSamples(  DataNodePeerMetrics peerMetrics,  String slowNodeName) throws InterruptedException {
    for (int i=0; i < 2 * DataNodePeerMetrics.MIN_OUTLIER_DETECTION_SAMPLES; ++i) {
      peerMetrics.addSendPacketDownstream(slowNodeName,SLOW_NODE_LATENCY_MS);
    }
  }
}
