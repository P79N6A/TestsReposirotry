/** 
 * Test striped file write operation with data node failures with parameterized test cases.
 */
@RunWith(Parameterized.class) public class ParameterizedTestDFSStripedOutputStreamWithFailure extends TestDFSStripedOutputStreamWithFailureBase {
  public static final Logger LOG=LoggerFactory.getLogger(ParameterizedTestDFSStripedOutputStreamWithFailure.class);
  private int base;
  @Parameterized.Parameters public static Collection<Object[]> data(){
    List<Object[]> parameters=new ArrayList<>();
    for (int i=0; i <= 10; i++) {
      parameters.add(new Object[]{RANDOM.nextInt(220)});
    }
    return parameters;
  }
  public ParameterizedTestDFSStripedOutputStreamWithFailure(  int base){
    this.base=base;
  }
  @Test(timeout=240000) public void runTestWithSingleFailure(){
    assumeTrue(base >= 0);
    if (base > lengths.size()) {
      base=base % lengths.size();
    }
    final int i=base;
    final Integer length=getLength(i);
    assumeTrue("Skip test " + i + " since length=null.",length != null);
    assumeTrue("Test " + i + ", length="+ length+ ", is not chosen to run.",RANDOM.nextInt(16) != 0);
    System.out.println("Run test " + i + ", length="+ length);
    runTest(length);
  }
}
