/** 
 * Tests for  {@link SlowDiskTracker}.
 */
public class TestSlowDiskTracker {
  public static final Logger LOG=LoggerFactory.getLogger(TestSlowDiskTracker.class);
  /** 
 * Set a timeout for every test case.
 */
  @Rule public Timeout testTimeout=new Timeout(300_000);
  private static Configuration conf;
  private SlowDiskTracker tracker;
  private FakeTimer timer;
  private long reportValidityMs;
  private static final long OUTLIERS_REPORT_INTERVAL=1000;
  private static final ObjectReader READER=new ObjectMapper().readerFor(new TypeReference<ArrayList<DiskLatency>>(){
  }
);
static {
    conf=new HdfsConfiguration();
    conf.setLong(DFS_HEARTBEAT_INTERVAL_KEY,1L);
    conf.setInt(DFS_DATANODE_FILEIO_PROFILING_SAMPLING_PERCENTAGE_KEY,100);
    conf.setTimeDuration(DFS_DATANODE_OUTLIERS_REPORT_INTERVAL_KEY,OUTLIERS_REPORT_INTERVAL,TimeUnit.MILLISECONDS);
  }
  @Before public void setup(){
    timer=new FakeTimer();
    tracker=new SlowDiskTracker(conf,timer);
    reportValidityMs=tracker.getReportValidityMs();
  }
  @Test public void testDataNodeHeartbeatSlowDiskReport() throws Exception {
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    try {
      DataNode dn1=cluster.getDataNodes().get(0);
      DataNode dn2=cluster.getDataNodes().get(1);
      NameNode nn=cluster.getNameNode(0);
      DatanodeManager datanodeManager=nn.getNamesystem().getBlockManager().getDatanodeManager();
      SlowDiskTracker slowDiskTracker=datanodeManager.getSlowDiskTracker();
      slowDiskTracker.setReportValidityMs(OUTLIERS_REPORT_INTERVAL * 100);
      dn1.getDiskMetrics().addSlowDiskForTesting("disk1",ImmutableMap.of(DiskOp.WRITE,1.3));
      dn1.getDiskMetrics().addSlowDiskForTesting("disk2",ImmutableMap.of(DiskOp.READ,1.6,DiskOp.WRITE,1.1));
      dn2.getDiskMetrics().addSlowDiskForTesting("disk1",ImmutableMap.of(DiskOp.METADATA,0.8));
      dn2.getDiskMetrics().addSlowDiskForTesting("disk2",ImmutableMap.of(DiskOp.WRITE,1.3));
      String dn1ID=dn1.getDatanodeId().getIpcAddr(false);
      String dn2ID=dn2.getDatanodeId().getIpcAddr(false);
      Thread.sleep(OUTLIERS_REPORT_INTERVAL);
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          return (slowDiskTracker.getSlowDisksReport().size() == 4);
        }
      }
,1000,100000);
      Map<String,DiskLatency> slowDisksReport=getSlowDisksReportForTesting(slowDiskTracker);
      assertThat(slowDisksReport.size(),is(4));
      assertTrue(Math.abs(slowDisksReport.get(dn1ID + ":disk1").getLatency(DiskOp.WRITE) - 1.3) < 0.0000001);
      assertTrue(Math.abs(slowDisksReport.get(dn1ID + ":disk2").getLatency(DiskOp.READ) - 1.6) < 0.0000001);
      assertTrue(Math.abs(slowDisksReport.get(dn1ID + ":disk2").getLatency(DiskOp.WRITE) - 1.1) < 0.0000001);
      assertTrue(Math.abs(slowDisksReport.get(dn2ID + ":disk1").getLatency(DiskOp.METADATA) - 0.8) < 0.0000001);
      assertTrue(Math.abs(slowDisksReport.get(dn2ID + ":disk2").getLatency(DiskOp.WRITE) - 1.3) < 0.0000001);
      ArrayList<DiskLatency> jsonReport=getAndDeserializeJson(slowDiskTracker.getSlowDiskReportAsJsonString());
      assertThat(jsonReport.size(),is(4));
      assertTrue(isDiskInReports(jsonReport,dn1ID,"disk1",DiskOp.WRITE,1.3));
      assertTrue(isDiskInReports(jsonReport,dn1ID,"disk2",DiskOp.READ,1.6));
      assertTrue(isDiskInReports(jsonReport,dn1ID,"disk2",DiskOp.WRITE,1.1));
      assertTrue(isDiskInReports(jsonReport,dn2ID,"disk1",DiskOp.METADATA,0.8));
      assertTrue(isDiskInReports(jsonReport,dn2ID,"disk2",DiskOp.WRITE,1.3));
    }
  finally {
      cluster.shutdown();
    }
  }
  /** 
 * Edge case, there are no reports to retrieve.
 */
  @Test public void testEmptyReports(){
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    assertTrue(getSlowDisksReportForTesting(tracker).isEmpty());
  }
  @Test public void testReportsAreRetrieved() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
    addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.3));
    addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.READ,1.1));
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return !tracker.getSlowDisksReport().isEmpty();
      }
    }
,500,5000);
    Map<String,DiskLatency> reports=getSlowDisksReportForTesting(tracker);
    assertThat(reports.size(),is(3));
    assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.METADATA) - 1.1) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.READ) - 1.8) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn1:disk2").getLatency(DiskOp.READ) - 1.3) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn2:disk2").getLatency(DiskOp.READ) - 1.1) < 0.0000001);
  }
  /** 
 * Test that when all reports are expired, we get back nothing.
 */
  @Test public void testAllReportsAreExpired() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
    addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.3));
    addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.WRITE,1.1));
    timer.advance(1);
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return !tracker.getSlowDisksReport().isEmpty();
      }
    }
,500,5000);
    Map<String,DiskLatency> reports=getSlowDisksReportForTesting(tracker);
    assertThat(reports.size(),is(3));
    assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.METADATA) - 1.1) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.READ) - 1.8) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn1:disk2").getLatency(DiskOp.READ) - 1.3) < 0.0000001);
    assertTrue(Math.abs(reports.get("dn2:disk2").getLatency(DiskOp.WRITE) - 1.1) < 0.0000001);
    timer.advance(reportValidityMs);
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return tracker.getSlowDisksReport().isEmpty();
      }
    }
,500,3000);
    reports=getSlowDisksReportForTesting(tracker);
    assertThat(reports.size(),is(0));
  }
  /** 
 * Test the case when a subset of reports has expired. Ensure that we only get back non-expired reports.
 */
  @Test public void testSomeReportsAreExpired() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
    addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.3));
    timer.advance(reportValidityMs);
    addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.WRITE,1.1));
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return !tracker.getSlowDisksReport().isEmpty();
      }
    }
,500,5000);
    Map<String,DiskLatency> reports=getSlowDisksReportForTesting(tracker);
    assertThat(reports.size(),is(1));
    assertTrue(Math.abs(reports.get("dn2:disk2").getLatency(DiskOp.WRITE) - 1.1) < 0.0000001);
  }
  /** 
 * Test the case when an expired report is replaced by a valid one.
 */
  @Test public void testReplacement() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
    timer.advance(reportValidityMs);
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.READ,1.4));
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return !tracker.getSlowDisksReport().isEmpty();
      }
    }
,500,5000);
    Map<String,DiskLatency> reports=getSlowDisksReportForTesting(tracker);
    assertThat(reports.size(),is(1));
    assertTrue(reports.get("dn1:disk1").getLatency(DiskOp.METADATA) == null);
    assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.READ) - 1.4) < 0.0000001);
  }
  @Test public void testGetJson() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
    addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.3));
    addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.WRITE,1.1));
    addSlowDiskForTesting("dn3","disk1",ImmutableMap.of(DiskOp.WRITE,1.1));
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return tracker.getSlowDiskReportAsJsonString() != null;
      }
    }
,500,5000);
    ArrayList<DiskLatency> jsonReport=getAndDeserializeJson(tracker.getSlowDiskReportAsJsonString());
    assertThat(jsonReport.size(),is(4));
    assertTrue(isDiskInReports(jsonReport,"dn1","disk1",DiskOp.METADATA,1.1));
    assertTrue(isDiskInReports(jsonReport,"dn1","disk1",DiskOp.READ,1.8));
    assertTrue(isDiskInReports(jsonReport,"dn1","disk2",DiskOp.READ,1.3));
    assertTrue(isDiskInReports(jsonReport,"dn2","disk2",DiskOp.WRITE,1.1));
    assertTrue(isDiskInReports(jsonReport,"dn3","disk1",DiskOp.WRITE,1.1));
  }
  @Test public void testGetJsonSizeIsLimited() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.READ,1.1));
    addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.2));
    addSlowDiskForTesting("dn1","disk3",ImmutableMap.of(DiskOp.READ,1.3));
    addSlowDiskForTesting("dn2","disk1",ImmutableMap.of(DiskOp.READ,1.4));
    addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.READ,1.5));
    addSlowDiskForTesting("dn3","disk1",ImmutableMap.of(DiskOp.WRITE,1.6));
    addSlowDiskForTesting("dn3","disk2",ImmutableMap.of(DiskOp.READ,1.7));
    addSlowDiskForTesting("dn3","disk3",ImmutableMap.of(DiskOp.READ,1.2));
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return tracker.getSlowDiskReportAsJsonString() != null;
      }
    }
,500,5000);
    ArrayList<DiskLatency> jsonReport=getAndDeserializeJson(tracker.getSlowDiskReportAsJsonString());
    assertThat(jsonReport.size(),is(5));
    assertTrue(isDiskInReports(jsonReport,"dn3","disk2",DiskOp.READ,1.7));
    assertTrue(isDiskInReports(jsonReport,"dn3","disk1",DiskOp.WRITE,1.6));
    assertTrue(isDiskInReports(jsonReport,"dn2","disk2",DiskOp.READ,1.5));
    assertTrue(isDiskInReports(jsonReport,"dn2","disk1",DiskOp.READ,1.4));
    assertTrue(isDiskInReports(jsonReport,"dn1","disk3",DiskOp.READ,1.3));
    assertFalse(isDiskInReports(jsonReport,"dn1","disk1",DiskOp.READ,1.1));
    assertFalse(isDiskInReports(jsonReport,"dn1","disk2",DiskOp.READ,1.2));
    assertFalse(isDiskInReports(jsonReport,"dn3","disk3",DiskOp.READ,1.2));
  }
  @Test public void testEmptyReport() throws Exception {
    addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.READ,1.1));
    timer.advance(reportValidityMs);
    tracker.updateSlowDiskReportAsync(timer.monotonicNow());
    Thread.sleep(OUTLIERS_REPORT_INTERVAL * 2);
    assertTrue(tracker.getSlowDiskReportAsJsonString() == null);
  }
  private boolean isDiskInReports(  ArrayList<DiskLatency> reports,  String dataNodeID,  String disk,  DiskOp diskOp,  double latency){
    String diskID=SlowDiskTracker.getSlowDiskIDForReport(dataNodeID,disk);
    for (    DiskLatency diskLatency : reports) {
      if (diskLatency.getSlowDiskID().equals(diskID)) {
        if (diskLatency.getLatency(diskOp) == null) {
          return false;
        }
        if (Math.abs(diskLatency.getLatency(diskOp) - latency) < 0.0000001) {
          return true;
        }
      }
    }
    return false;
  }
  private ArrayList<DiskLatency> getAndDeserializeJson(  final String json) throws IOException {
    return READER.readValue(json);
  }
  private void addSlowDiskForTesting(  String dnID,  String disk,  Map<DiskOp,Double> latencies){
    Map<String,Map<DiskOp,Double>> slowDisk=Maps.newHashMap();
    slowDisk.put(disk,latencies);
    SlowDiskReports slowDiskReport=SlowDiskReports.create(slowDisk);
    tracker.addSlowDiskReport(dnID,slowDiskReport);
  }
  Map<String,DiskLatency> getSlowDisksReportForTesting(  SlowDiskTracker slowDiskTracker){
    Map<String,DiskLatency> slowDisksMap=Maps.newHashMap();
    for (    DiskLatency diskLatency : slowDiskTracker.getSlowDisksReport()) {
      slowDisksMap.put(diskLatency.getSlowDiskID(),diskLatency);
    }
    return slowDisksMap;
  }
}
