class MRAppMasterTest extends MRAppMaster {
  Path stagingDirPath;
  private Configuration conf;
  private boolean overrideInit;
  private boolean overrideStart;
  ContainerAllocator mockContainerAllocator;
  CommitterEventHandler mockCommitterEventHandler;
  RMHeartbeatHandler mockRMHeartbeatHandler;
  JobHistoryEventHandler spyHistoryService;
  public MRAppMasterTest(  ApplicationAttemptId applicationAttemptId,  ContainerId containerId,  String host,  int port,  int httpPort,  long submitTime){
    this(applicationAttemptId,containerId,host,port,httpPort,submitTime,true,true);
  }
  public MRAppMasterTest(  ApplicationAttemptId applicationAttemptId,  ContainerId containerId,  String host,  int port,  int httpPort,  long submitTime,  boolean overrideInit,  boolean overrideStart){
    super(applicationAttemptId,containerId,host,port,httpPort,submitTime);
    this.overrideInit=overrideInit;
    this.overrideStart=overrideStart;
    mockContainerAllocator=mock(ContainerAllocator.class);
    mockCommitterEventHandler=mock(CommitterEventHandler.class);
    mockRMHeartbeatHandler=mock(RMHeartbeatHandler.class);
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    if (!overrideInit) {
      super.serviceInit(conf);
    }
    this.conf=conf;
  }
  @Override protected ContainerAllocator createContainerAllocator(  final ClientService clientService,  final AppContext context){
    return mockContainerAllocator;
  }
  @Override protected EventHandler<CommitterEvent> createCommitterEventHandler(  AppContext context,  OutputCommitter committer){
    return mockCommitterEventHandler;
  }
  @Override protected RMHeartbeatHandler getRMHeartbeatHandler(){
    return mockRMHeartbeatHandler;
  }
  @Override protected void serviceStart() throws Exception {
    if (overrideStart) {
      try {
        UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
        String user=ugi.getShortUserName();
        stagingDirPath=MRApps.getStagingAreaDir(conf,user);
      }
 catch (      Exception e) {
        fail(e.getMessage());
      }
    }
 else {
      super.serviceStart();
    }
  }
  @Override public Credentials getCredentials(){
    return super.getCredentials();
  }
  public UserGroupInformation getUgi(){
    return currentUser;
  }
  @Override protected EventHandler<JobHistoryEvent> createJobHistoryHandler(  AppContext context){
    spyHistoryService=Mockito.spy((JobHistoryEventHandler)super.createJobHistoryHandler(context));
    spyHistoryService.setForcejobCompletion(this.isLastAMRetry);
    return spyHistoryService;
  }
}
