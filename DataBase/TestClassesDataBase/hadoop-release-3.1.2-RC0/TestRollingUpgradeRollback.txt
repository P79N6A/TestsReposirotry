/** 
 * This class tests rollback for rolling upgrade.
 */
public class TestRollingUpgradeRollback {
  private static final int NUM_JOURNAL_NODES=3;
  private static final String JOURNAL_ID="myjournal";
  private static boolean fileExists(  List<File> files){
    for (    File file : files) {
      if (file.exists()) {
        return true;
      }
    }
    return false;
  }
  private void checkNNStorage(  NNStorage storage,  long imageTxId,  long trashEndTxId){
    List<File> finalizedEdits=storage.getFiles(NNStorage.NameNodeDirType.EDITS,NNStorage.getFinalizedEditsFileName(1,imageTxId));
    Assert.assertTrue(fileExists(finalizedEdits));
    List<File> inprogressEdits=storage.getFiles(NNStorage.NameNodeDirType.EDITS,NNStorage.getInProgressEditsFileName(imageTxId + 1));
    Assert.assertTrue(fileExists(inprogressEdits));
    if (trashEndTxId > 0) {
      List<File> trashedEdits=storage.getFiles(NNStorage.NameNodeDirType.EDITS,NNStorage.getFinalizedEditsFileName(imageTxId + 1,trashEndTxId) + ".trash");
      Assert.assertTrue(fileExists(trashedEdits));
    }
    String imageFileName=trashEndTxId > 0 ? NNStorage.getImageFileName(imageTxId) : NNStorage.getRollbackImageFileName(imageTxId);
    List<File> imageFiles=storage.getFiles(NNStorage.NameNodeDirType.IMAGE,imageFileName);
    Assert.assertTrue(fileExists(imageFiles));
  }
  private void checkJNStorage(  File dir,  long discardStartTxId,  long discardEndTxId){
    File finalizedEdits=new File(dir,NNStorage.getFinalizedEditsFileName(1,discardStartTxId - 1));
    Assert.assertTrue(finalizedEdits.exists());
    File trashEdits=new File(dir,NNStorage.getFinalizedEditsFileName(discardStartTxId,discardEndTxId) + ".trash");
    Assert.assertTrue(trashEdits.exists());
  }
  @Test public void testRollbackCommand() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=null;
    final Path foo=new Path("/foo");
    final Path bar=new Path("/bar");
    try {
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      final DistributedFileSystem dfs=cluster.getFileSystem();
      final DFSAdmin dfsadmin=new DFSAdmin(conf);
      dfs.mkdirs(foo);
      dfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
      Assert.assertEquals(0,dfsadmin.run(new String[]{"-rollingUpgrade","prepare"}));
      dfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
      dfs.mkdirs(bar);
      NNStorage storage=cluster.getNamesystem().getFSImage().getStorage();
      checkNNStorage(storage,3,-1);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
    NameNode nn=null;
    try {
      nn=NameNode.createNameNode(new String[]{"-rollingUpgrade","rollback"},conf);
      INode fooNode=nn.getNamesystem().getFSDirectory().getINode4Write(foo.toString());
      Assert.assertNotNull(fooNode);
      INode barNode=nn.getNamesystem().getFSDirectory().getINode4Write(bar.toString());
      Assert.assertNull(barNode);
      NNStorage storage=nn.getNamesystem().getFSImage().getStorage();
      checkNNStorage(storage,3,7);
    }
  finally {
      if (nn != null) {
        nn.stop();
        nn.join();
      }
    }
  }
  @Test public void testRollbackWithQJM() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    MiniJournalCluster mjc=null;
    MiniDFSCluster cluster=null;
    final Path foo=new Path("/foo");
    final Path bar=new Path("/bar");
    try {
      mjc=new MiniJournalCluster.Builder(conf).numJournalNodes(NUM_JOURNAL_NODES).build();
      mjc.waitActive();
      conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI(JOURNAL_ID).toString());
      cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
      cluster.waitActive();
      DistributedFileSystem dfs=cluster.getFileSystem();
      final DFSAdmin dfsadmin=new DFSAdmin(conf);
      dfs.mkdirs(foo);
      dfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
      Assert.assertEquals(0,dfsadmin.run(new String[]{"-rollingUpgrade","prepare"}));
      dfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
      dfs.mkdirs(bar);
      dfs.close();
      cluster.restartNameNode("-rollingUpgrade","rollback");
      dfs=cluster.getFileSystem();
      Assert.assertTrue(dfs.exists(foo));
      Assert.assertFalse(dfs.exists(bar));
      for (int i=0; i < NUM_JOURNAL_NODES; i++) {
        File dir=mjc.getCurrentDir(0,JOURNAL_ID);
        checkJNStorage(dir,4,7);
      }
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
      if (mjc != null) {
        mjc.shutdown();
      }
    }
  }
  /** 
 * Test rollback scenarios where StandbyNameNode does checkpoints during rolling upgrade.
 */
  @Test public void testRollbackWithHAQJM() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    MiniQJMHACluster cluster=null;
    final Path foo=new Path("/foo");
    final Path bar=new Path("/bar");
    try {
      cluster=new MiniQJMHACluster.Builder(conf).build();
      MiniDFSCluster dfsCluster=cluster.getDfsCluster();
      dfsCluster.waitActive();
      dfsCluster.getConfiguration(1).setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
      dfsCluster.restartNameNode(1);
      dfsCluster.transitionToActive(0);
      DistributedFileSystem dfs=dfsCluster.getFileSystem(0);
      dfs.mkdirs(foo);
      RollingUpgradeInfo info=dfs.rollingUpgrade(RollingUpgradeAction.PREPARE);
      Assert.assertTrue(info.isStarted());
      dfs.mkdirs(bar);
      dfs.close();
      dfs=dfsCluster.getFileSystem(0);
      TestRollingUpgrade.queryForPreparation(dfs);
      Assert.assertTrue(dfsCluster.getNameNode(0).getFSImage().hasRollbackFSImage());
      Assert.assertTrue(dfsCluster.getNameNode(1).getFSImage().hasRollbackFSImage());
      dfsCluster.restartNameNode(0,true,"-rollingUpgrade","rollback");
      dfsCluster.shutdownNameNode(1);
      dfsCluster.transitionToActive(0);
      dfs=dfsCluster.getFileSystem(0);
      Assert.assertTrue(dfs.exists(foo));
      Assert.assertFalse(dfs.exists(bar));
      NNStorage storage=dfsCluster.getNamesystem(0).getFSImage().getStorage();
      checkNNStorage(storage,4,7);
      for (int i=0; i < NUM_JOURNAL_NODES; i++) {
        File dir=cluster.getJournalCluster().getCurrentDir(0,MiniQJMHACluster.NAMESERVICE);
        checkJNStorage(dir,5,7);
      }
      dfsCluster.restartNameNode(0);
      dfsCluster.transitionToActive(0);
      dfs.rollingUpgrade(RollingUpgradeAction.PREPARE);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
}
