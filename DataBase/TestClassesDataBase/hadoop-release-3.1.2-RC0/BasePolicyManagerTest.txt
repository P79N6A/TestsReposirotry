/** 
 * This class provides common test methods for testing  {@code FederationPolicyManager}s.
 */
public abstract class BasePolicyManagerTest {
  @SuppressWarnings("checkstyle:visibilitymodifier") protected FederationPolicyManager wfp=null;
  @SuppressWarnings("checkstyle:visibilitymodifier") protected Class expectedPolicyManager;
  @SuppressWarnings("checkstyle:visibilitymodifier") protected Class expectedAMRMProxyPolicy;
  @SuppressWarnings("checkstyle:visibilitymodifier") protected Class expectedRouterPolicy;
  @Test public void testSerializeAndInstantiate() throws Exception {
    serializeAndDeserializePolicyManager(wfp,expectedPolicyManager,expectedAMRMProxyPolicy,expectedRouterPolicy);
  }
  @Test(expected=FederationPolicyInitializationException.class) public void testSerializeAndInstantiateBad1() throws Exception {
    serializeAndDeserializePolicyManager(wfp,String.class,expectedAMRMProxyPolicy,expectedRouterPolicy);
  }
  @Test(expected=AssertionError.class) public void testSerializeAndInstantiateBad2() throws Exception {
    serializeAndDeserializePolicyManager(wfp,expectedPolicyManager,String.class,expectedRouterPolicy);
  }
  @Test(expected=AssertionError.class) public void testSerializeAndInstantiateBad3() throws Exception {
    serializeAndDeserializePolicyManager(wfp,expectedPolicyManager,expectedAMRMProxyPolicy,String.class);
  }
  protected static void serializeAndDeserializePolicyManager(  FederationPolicyManager wfp,  Class policyManagerType,  Class expAMRMProxyPolicy,  Class expRouterPolicy) throws Exception {
    SubClusterPolicyConfiguration fpc=wfp.serializeConf();
    fpc.setType(policyManagerType.getCanonicalName());
    FederationPolicyInitializationContext context=new FederationPolicyInitializationContext();
    context.setSubClusterPolicyConfiguration(fpc);
    context.setFederationStateStoreFacade(FederationPoliciesTestUtil.initFacade());
    context.setFederationSubclusterResolver(FederationPoliciesTestUtil.initResolver());
    context.setHomeSubcluster(SubClusterId.newInstance("homesubcluster"));
    Class c=Class.forName(wfp.getClass().getCanonicalName());
    FederationPolicyManager wfp2=(FederationPolicyManager)c.newInstance();
    FederationAMRMProxyPolicy federationAMRMProxyPolicy=wfp2.getAMRMPolicy(context,null);
    FederationRouterPolicy federationRouterPolicy=wfp2.getRouterPolicy(context,null);
    Assert.assertEquals(federationAMRMProxyPolicy.getClass(),expAMRMProxyPolicy);
    Assert.assertEquals(federationRouterPolicy.getClass(),expRouterPolicy);
  }
}
