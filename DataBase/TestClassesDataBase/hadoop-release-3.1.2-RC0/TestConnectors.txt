/** 
 * Test Class that tests connectors.
 */
public class TestConnectors {
  private MiniDFSCluster cluster;
  private final int numDatanodes=3;
  private final int volumeCount=2;
  private Configuration conf;
  @Before public void setup() throws IOException {
    conf=new HdfsConfiguration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  }
  @After public void teardown(){
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Test public void testNameNodeConnector() throws Exception {
    cluster.waitActive();
    ClusterConnector nameNodeConnector=ConnectorFactory.getCluster(cluster.getFileSystem(0).getUri(),conf);
    DiskBalancerCluster diskBalancerCluster=new DiskBalancerCluster(nameNodeConnector);
    diskBalancerCluster.readClusterInfo();
    Assert.assertEquals("Expected number of Datanodes not found.",numDatanodes,diskBalancerCluster.getNodes().size());
    Assert.assertEquals("Expected number of volumes not found.",volumeCount,diskBalancerCluster.getNodes().get(0).getVolumeCount());
  }
  @Test public void testJsonConnector() throws Exception {
    cluster.waitActive();
    ClusterConnector nameNodeConnector=ConnectorFactory.getCluster(cluster.getFileSystem(0).getUri(),conf);
    DiskBalancerCluster diskBalancerCluster=new DiskBalancerCluster(nameNodeConnector);
    diskBalancerCluster.readClusterInfo();
    String diskBalancerJson=diskBalancerCluster.toJson();
    DiskBalancerCluster serializedCluster=DiskBalancerCluster.parseJson(diskBalancerJson);
    Assert.assertEquals("Parsed cluster is not equal to persisted info.",diskBalancerCluster.getNodes().size(),serializedCluster.getNodes().size());
  }
}
