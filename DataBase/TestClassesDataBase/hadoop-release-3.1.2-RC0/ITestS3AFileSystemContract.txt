/** 
 * Tests a live S3 system. If your keys and bucket aren't specified, all tests are marked as passed. This uses BlockJUnit4ClassRunner because FileSystemContractBaseTest from TestCase which uses the old Junit3 runner that doesn't ignore assumptions properly making it impossible to skip the tests if we don't have a valid bucket.
 */
public class ITestS3AFileSystemContract extends FileSystemContractBaseTest {
  protected static final Logger LOG=LoggerFactory.getLogger(ITestS3AFileSystemContract.class);
  private Path basePath;
  @Rule public TestName methodName=new TestName();
  private void nameThread(){
    Thread.currentThread().setName("JUnit-" + methodName.getMethodName());
  }
  @Before public void setUp() throws Exception {
    nameThread();
    Configuration conf=new Configuration();
    fs=S3ATestUtils.createTestFileSystem(conf);
    assumeNotNull(fs);
    basePath=fs.makeQualified(S3ATestUtils.createTestPath(new Path("s3afilesystemcontract")));
  }
  @Override public Path getTestBaseDir(){
    return basePath;
  }
  @Test public void testMkdirsWithUmask() throws Exception {
  }
  @Test public void testRenameDirectoryAsExistingDirectory() throws Exception {
    assumeTrue(renameSupported());
    Path src=path("testRenameDirectoryAsExisting/dir");
    fs.mkdirs(src);
    createFile(path(src + "/file1"));
    createFile(path(src + "/subdir/file2"));
    Path dst=path("testRenameDirectoryAsExistingNew/newdir");
    fs.mkdirs(dst);
    rename(src,dst,true,false,true);
    assertFalse("Nested file1 exists",fs.exists(path(src + "/file1")));
    assertFalse("Nested file2 exists",fs.exists(path(src + "/subdir/file2")));
    assertTrue("Renamed nested file1 exists",fs.exists(path(dst + "/file1")));
    assertTrue("Renamed nested exists",fs.exists(path(dst + "/subdir/file2")));
  }
  @Test public void testMoveDirUnderParent() throws Throwable {
  }
}
