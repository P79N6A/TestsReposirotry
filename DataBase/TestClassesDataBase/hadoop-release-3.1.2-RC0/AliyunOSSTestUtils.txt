/** 
 * Utility class for Aliyun OSS Tests.
 */
public final class AliyunOSSTestUtils {
  private AliyunOSSTestUtils(){
  }
  /** 
 * Create the test filesystem. If the test.fs.oss.name property is not set, tests will fail.
 * @param conf configuration
 * @return the FS
 * @throws IOException
 */
  public static AliyunOSSFileSystem createTestFileSystem(  Configuration conf) throws IOException {
    AliyunOSSFileSystem ossfs=new AliyunOSSFileSystem();
    ossfs.initialize(getURI(conf),conf);
    return ossfs;
  }
  public static FileContext createTestFileContext(  Configuration conf) throws IOException {
    return FileContext.getFileContext(getURI(conf),conf);
  }
  private static URI getURI(  Configuration conf){
    String fsname=conf.getTrimmed(TestAliyunOSSFileSystemContract.TEST_FS_OSS_NAME,"");
    boolean liveTest=!StringUtils.isEmpty(fsname);
    URI testURI=null;
    if (liveTest) {
      testURI=URI.create(fsname);
      liveTest=testURI.getScheme().equals(Constants.FS_OSS);
    }
    if (!liveTest) {
      throw new AssumptionViolatedException("No test filesystem in " + TestAliyunOSSFileSystemContract.TEST_FS_OSS_NAME);
    }
    return testURI;
  }
  /** 
 * Generate unique test path for multiple user tests.
 * @return root test path
 */
  public static String generateUniqueTestPath(){
    String testUniqueForkId=System.getProperty("test.unique.fork.id");
    return testUniqueForkId == null ? "/test" : "/" + testUniqueForkId + "/test";
  }
}
