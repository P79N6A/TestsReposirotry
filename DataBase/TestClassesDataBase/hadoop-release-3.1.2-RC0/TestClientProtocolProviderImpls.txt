public class TestClientProtocolProviderImpls {
  @Test public void testClusterWithLocalClientProvider() throws Exception {
    Configuration conf=new Configuration();
    conf.set(MRConfig.FRAMEWORK_NAME,"local");
    Cluster cluster=new Cluster(conf);
    assertTrue(cluster.getClient() instanceof LocalJobRunner);
    cluster.close();
  }
  @Test public void testClusterWithJTClientProvider() throws Exception {
    Configuration conf=new Configuration();
    try {
      conf.set(MRConfig.FRAMEWORK_NAME,"classic");
      conf.set(JTConfig.JT_IPC_ADDRESS,"local");
      new Cluster(conf);
      fail("Cluster with classic Framework name should not use " + "local JT address");
    }
 catch (    IOException e) {
      assertTrue(e.getMessage().contains("Cannot initialize Cluster. Please check"));
    }
  }
  @Test public void testClusterWithYarnClientProvider() throws Exception {
    Configuration conf=new Configuration();
    conf.set(MRConfig.FRAMEWORK_NAME,"yarn");
    Cluster cluster=new Cluster(conf);
    assertTrue(cluster.getClient() instanceof YARNRunner);
    cluster.close();
  }
  @Test public void testClusterException(){
    Configuration conf=new Configuration();
    try {
      conf.set(MRConfig.FRAMEWORK_NAME,"incorrect");
      new Cluster(conf);
      fail("Cluster should not be initialized with incorrect framework name");
    }
 catch (    IOException e) {
      assertTrue(e.getMessage().contains("Cannot initialize Cluster. Please check"));
    }
  }
  @Test public void testClusterExceptionRootCause() throws Exception {
    final Configuration conf=new Configuration();
    conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY,"nosuchfs:///");
    conf.set(JTConfig.JT_IPC_ADDRESS,"local");
    try {
      new Cluster(conf);
      fail("Cluster init should fail because of non-existing FileSystem");
    }
 catch (    IOException ioEx) {
      final String stackTrace=StringUtils.stringifyException(ioEx);
      assertTrue("No root cause detected",stackTrace.contains(UnsupportedFileSystemException.class.getName()) && stackTrace.contains("nosuchfs"));
    }
  }
}
