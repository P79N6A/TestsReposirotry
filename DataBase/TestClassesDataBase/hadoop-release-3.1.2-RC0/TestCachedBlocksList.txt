public class TestCachedBlocksList {
  public static final Log LOG=LogFactory.getLog(TestCachedBlocksList.class);
  @Test(timeout=60000) public void testSingleList(){
    DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID("127.0.0.1","localhost","abcd",5000,5001,5002,5003));
    CachedBlock[] blocks=new CachedBlock[]{new CachedBlock(0L,(short)1,true),new CachedBlock(1L,(short)1,true),new CachedBlock(2L,(short)1,true)};
    Assert.assertTrue("expected pending cached list to start off empty.",!dn.getPendingCached().iterator().hasNext());
    Assert.assertTrue("expected cached list to start off empty.",!dn.getCached().iterator().hasNext());
    Assert.assertTrue("expected pending uncached list to start off empty.",!dn.getPendingUncached().iterator().hasNext());
    Assert.assertTrue(dn.getCached().add(blocks[0]));
    Assert.assertTrue("expected pending cached list to still be empty.",!dn.getPendingCached().iterator().hasNext());
    Assert.assertEquals("failed to insert blocks[0]",blocks[0],dn.getCached().iterator().next());
    Assert.assertTrue("expected pending uncached list to still be empty.",!dn.getPendingUncached().iterator().hasNext());
    Assert.assertTrue(dn.getCached().add(blocks[1]));
    Iterator<CachedBlock> iter=dn.getCached().iterator();
    Assert.assertEquals(blocks[0],iter.next());
    Assert.assertEquals(blocks[1],iter.next());
    Assert.assertTrue(!iter.hasNext());
    Assert.assertTrue(dn.getCached().addFirst(blocks[2]));
    iter=dn.getCached().iterator();
    Assert.assertEquals(blocks[2],iter.next());
    Assert.assertEquals(blocks[0],iter.next());
    Assert.assertEquals(blocks[1],iter.next());
    Assert.assertTrue(!iter.hasNext());
    Assert.assertTrue(dn.getCached().remove(blocks[0]));
    iter=dn.getCached().iterator();
    Assert.assertEquals(blocks[2],iter.next());
    Assert.assertEquals(blocks[1],iter.next());
    Assert.assertTrue(!iter.hasNext());
    dn.getCached().clear();
    Assert.assertTrue("expected cached list to be empty after clear.",!dn.getPendingCached().iterator().hasNext());
  }
  private void testAddElementsToList(  CachedBlocksList list,  CachedBlock[] blocks){
    Assert.assertTrue("expected list to start off empty.",!list.iterator().hasNext());
    for (    CachedBlock block : blocks) {
      Assert.assertTrue(list.add(block));
    }
  }
  private void testRemoveElementsFromList(  Random r,  CachedBlocksList list,  CachedBlock[] blocks){
    int i=0;
    for (Iterator<CachedBlock> iter=list.iterator(); iter.hasNext(); ) {
      Assert.assertEquals(blocks[i],iter.next());
      i++;
    }
    if (r.nextBoolean()) {
      LOG.info("Removing via iterator");
      for (Iterator<CachedBlock> iter=list.iterator(); iter.hasNext(); ) {
        iter.next();
        iter.remove();
      }
    }
 else {
      LOG.info("Removing in pseudo-random order");
      CachedBlock[] remainingBlocks=Arrays.copyOf(blocks,blocks.length);
      for (int removed=0; removed < remainingBlocks.length; ) {
        int toRemove=r.nextInt(remainingBlocks.length);
        if (remainingBlocks[toRemove] != null) {
          Assert.assertTrue(list.remove(remainingBlocks[toRemove]));
          remainingBlocks[toRemove]=null;
          removed++;
        }
      }
    }
    Assert.assertTrue("expected list to be empty after everything " + "was removed.",!list.iterator().hasNext());
  }
  @Test(timeout=60000) public void testMultipleLists(){
    DatanodeDescriptor[] datanodes=new DatanodeDescriptor[]{new DatanodeDescriptor(new DatanodeID("127.0.0.1","localhost","abcd",5000,5001,5002,5003)),new DatanodeDescriptor(new DatanodeID("127.0.1.1","localhost","efgh",6000,6001,6002,6003))};
    CachedBlocksList[] lists=new CachedBlocksList[]{datanodes[0].getPendingCached(),datanodes[0].getCached(),datanodes[1].getPendingCached(),datanodes[1].getCached(),datanodes[1].getPendingUncached()};
    final int NUM_BLOCKS=8000;
    CachedBlock[] blocks=new CachedBlock[NUM_BLOCKS];
    for (int i=0; i < NUM_BLOCKS; i++) {
      blocks[i]=new CachedBlock(i,(short)i,true);
    }
    Random r=new Random(654);
    for (    CachedBlocksList list : lists) {
      testAddElementsToList(list,blocks);
    }
    for (    CachedBlocksList list : lists) {
      testRemoveElementsFromList(r,list,blocks);
    }
  }
}
