public class TestSchedulingMonitor {
  @Test(timeout=10000) public void testRMStarts() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,ProportionalCapacityPreemptionPolicy.class.getCanonicalName());
    ResourceManager rm=new MockRM();
    rm.init(conf);
    SchedulingEditPolicy mPolicy=mock(SchedulingEditPolicy.class);
    when(mPolicy.getMonitoringInterval()).thenReturn(1000L);
    SchedulingMonitor monitor=new SchedulingMonitor(rm.getRMContext(),mPolicy);
    monitor.serviceInit(conf);
    monitor.serviceStart();
    verify(mPolicy,timeout(10000)).editSchedule();
    monitor.close();
    rm.close();
  }
  @Test(timeout=10000) public void testRMUpdateSchedulingEditPolicy() throws Exception {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
    MockRM rm=new MockRM(conf);
    rm.start();
    CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
    SchedulingMonitorManager smm=cs.getSchedulingMonitorManager();
    cs.reinitialize(conf,rm.getRMContext());
    assertFalse(smm.isRSMEmpty());
    String[] configuredPolicies=conf.getStrings(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES);
    Set<String> configurePoliciesSet=new HashSet<>();
    for (    String s : configuredPolicies) {
      configurePoliciesSet.add(s);
    }
    assertTrue(smm.isSameConfiguredPolicies(configurePoliciesSet));
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);
    cs.reinitialize(conf,rm.getRMContext());
    assertTrue(smm.isRSMEmpty());
  }
}
