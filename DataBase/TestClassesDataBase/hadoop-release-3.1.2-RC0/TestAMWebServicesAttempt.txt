/** 
 * Test the app master web service Rest API for getting task attempts, a specific task attempt, and task attempt counters /ws/v1/mapreduce/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}/state
 */
public class TestAMWebServicesAttempt extends JerseyTestBase {
  private static Configuration conf=new Configuration();
  private static AppContext appContext;
  private String webserviceUserName="testuser";
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      appContext=new MockAppContext(0,1,2,1);
      bind(JAXBContextResolver.class);
      bind(AMWebServices.class);
      bind(GenericExceptionHandler.class);
      bind(AppContext.class).toInstance(appContext);
      bind(Configuration.class).toInstance(conf);
      serve("/*").with(GuiceContainer.class);
      filter("/*").through(TestRMCustomAuthFilter.class);
    }
  }
@Singleton public static class TestRMCustomAuthFilter extends AuthenticationFilter {
    @Override protected Properties getConfiguration(    String configPrefix,    FilterConfig filterConfig) throws ServletException {
      Properties props=new Properties();
      Enumeration<?> names=filterConfig.getInitParameterNames();
      while (names.hasMoreElements()) {
        String name=(String)names.nextElement();
        if (name.startsWith(configPrefix)) {
          String value=filterConfig.getInitParameter(name);
          props.put(name.substring(configPrefix.length()),value);
        }
      }
      props.put(AuthenticationFilter.AUTH_TYPE,"simple");
      props.put(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,"false");
      return props;
    }
  }
static {
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestAMWebServicesAttempt(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.mapreduce.v2.app.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testGetTaskAttemptIdState() throws Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      for (      Task task : jobsMap.get(id).getTasks().values()) {
        String tid=MRApps.toString(task.getID());
        for (        TaskAttempt att : task.getAttempts().values()) {
          TaskAttemptId attemptid=att.getID();
          String attid=MRApps.toString(attemptid);
          ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("jobs").path(jobId).path("tasks").path(tid).path("attempts").path(attid).path("state").queryParam("user.name",webserviceUserName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
          assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
          JSONObject json=response.getEntity(JSONObject.class);
          assertEquals("incorrect number of elements",1,json.length());
          assertEquals(att.getState().toString(),json.get("state"));
        }
      }
    }
  }
  @Test public void testGetTaskAttemptIdXMLState() throws Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      for (      Task task : jobsMap.get(id).getTasks().values()) {
        String tid=MRApps.toString(task.getID());
        for (        TaskAttempt att : task.getAttempts().values()) {
          TaskAttemptId attemptid=att.getID();
          String attid=MRApps.toString(attemptid);
          ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("jobs").path(jobId).path("tasks").path(tid).path("attempts").path(attid).path("state").queryParam("user.name",webserviceUserName).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
          assertEquals(MediaType.APPLICATION_XML_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
          String xml=response.getEntity(String.class);
          DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
          DocumentBuilder db=dbf.newDocumentBuilder();
          InputSource is=new InputSource();
          is.setCharacterStream(new StringReader(xml));
          Document dom=db.parse(is);
          NodeList nodes=dom.getElementsByTagName("jobTaskAttemptState");
          assertEquals(1,nodes.getLength());
          String state=WebServicesTestUtils.getXmlString((Element)nodes.item(0),"state");
          assertEquals(att.getState().toString(),state);
        }
      }
    }
  }
  @Test public void testPutTaskAttemptIdState() throws Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      for (      Task task : jobsMap.get(id).getTasks().values()) {
        String tid=MRApps.toString(task.getID());
        for (        TaskAttempt att : task.getAttempts().values()) {
          TaskAttemptId attemptid=att.getID();
          String attid=MRApps.toString(attemptid);
          ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("jobs").path(jobId).path("tasks").path(tid).path("attempts").path(attid).path("state").queryParam("user.name",webserviceUserName).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,"{\"state\":\"KILLED\"}");
          assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
          JSONObject json=response.getEntity(JSONObject.class);
          assertEquals("incorrect number of elements",1,json.length());
          assertEquals(TaskAttemptState.KILLED.toString(),json.get("state"));
        }
      }
    }
  }
  @Test public void testPutTaskAttemptIdXMLState() throws Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      for (      Task task : jobsMap.get(id).getTasks().values()) {
        String tid=MRApps.toString(task.getID());
        for (        TaskAttempt att : task.getAttempts().values()) {
          TaskAttemptId attemptid=att.getID();
          String attid=MRApps.toString(attemptid);
          ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("jobs").path(jobId).path("tasks").path(tid).path("attempts").path(attid).path("state").queryParam("user.name",webserviceUserName).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE).put(ClientResponse.class,"<jobTaskAttemptState><state>KILLED" + "</state></jobTaskAttemptState>");
          assertEquals(MediaType.APPLICATION_XML_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
          String xml=response.getEntity(String.class);
          DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
          DocumentBuilder db=dbf.newDocumentBuilder();
          InputSource is=new InputSource();
          is.setCharacterStream(new StringReader(xml));
          Document dom=db.parse(is);
          NodeList nodes=dom.getElementsByTagName("jobTaskAttemptState");
          assertEquals(1,nodes.getLength());
          String state=WebServicesTestUtils.getXmlString((Element)nodes.item(0),"state");
          assertEquals(TaskAttemptState.KILLED.toString(),state);
        }
      }
    }
  }
}
