/** 
 * This tests the NodesPage block table that it should contain the table body data for all the columns in the table as specified in the header.
 */
public class TestNodesPage {
  final int numberOfRacks=2;
  final int numberOfNodesPerRack=8;
  final int numberOfLostNodesPerRack=1;
  private final int numberOfThInMetricsTable=23;
  private final int numberOfActualTableHeaders=14;
  private final int numberOfThForOpportunisticContainers=4;
  private Injector injector;
  @Before public void setUp() throws Exception {
    final RMContext mockRMContext=TestRMWebApp.mockRMContext(3,numberOfRacks,numberOfNodesPerRack,8 * TestRMWebApp.GiB);
    injector=WebAppTests.createMockInjector(RMContext.class,mockRMContext,new Module(){
      @Override public void configure(      Binder binder){
        try {
          binder.bind(ResourceManager.class).toInstance(TestRMWebApp.mockRm(mockRMContext));
        }
 catch (        IOException e) {
          throw new IllegalStateException(e);
        }
      }
    }
);
  }
  @Test public void testNodesBlockRender() throws Exception {
    injector.getInstance(NodesBlock.class).render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfActualTableHeaders + numberOfThInMetricsTable)).print("<th");
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
  }
  @Test public void testNodesBlockRenderForLostNodes(){
    NodesBlock nodesBlock=injector.getInstance(NodesBlock.class);
    nodesBlock.set("node.state","lost");
    nodesBlock.render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfActualTableHeaders + numberOfThInMetricsTable)).print("<th");
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
  }
  @Test public void testNodesBlockRenderForNodeLabelFilterWithNonEmptyLabel(){
    NodesBlock nodesBlock=injector.getInstance(NodesBlock.class);
    nodesBlock.set("node.label","x");
    nodesBlock.render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
    Mockito.verify(writer,Mockito.times(1)).print("<script");
  }
  @Test public void testNodesBlockRenderForNodeLabelFilterWithEmptyLabel(){
    NodesBlock nodesBlock=injector.getInstance(NodesBlock.class);
    nodesBlock.set("node.label","");
    nodesBlock.render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
  }
  @Test public void testNodesBlockRenderForNodeLabelFilterWithAnyLabel(){
    NodesBlock nodesBlock=injector.getInstance(NodesBlock.class);
    nodesBlock.set("node.label","*");
    nodesBlock.render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
  }
  @Test public void testNodesBlockRenderForOpportunisticContainers(){
    final RMContext mockRMContext=TestRMWebApp.mockRMContext(3,numberOfRacks,numberOfNodesPerRack,8 * TestRMWebApp.GiB);
    mockRMContext.getYarnConfiguration().setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED,true);
    injector=WebAppTests.createMockInjector(RMContext.class,mockRMContext,new Module(){
      @Override public void configure(      Binder binder){
        try {
          binder.bind(ResourceManager.class).toInstance(TestRMWebApp.mockRm(mockRMContext));
        }
 catch (        IOException e) {
          throw new IllegalStateException(e);
        }
      }
    }
);
    injector.getInstance(NodesBlock.class).render();
    PrintWriter writer=injector.getInstance(PrintWriter.class);
    WebAppTests.flushOutput(injector);
    Mockito.verify(writer,Mockito.times(numberOfActualTableHeaders + numberOfThInMetricsTable + numberOfThForOpportunisticContainers)).print("<th");
    Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
  }
}
