/** 
 * Mock Answer implementation of NN.getBlockLocations that will return a poisoned block list a certain number of times before returning a proper one.
 */
private static class FailNTimesAnswer implements Answer<LocatedBlocks> {
  private int failuresLeft;
  private final NamenodeProtocols realNN;
  public FailNTimesAnswer(  NamenodeProtocols preSpyNN,  int timesToFail){
    failuresLeft=timesToFail;
    this.realNN=preSpyNN;
  }
  @Override public LocatedBlocks answer(  InvocationOnMock invocation) throws IOException {
    Object args[]=invocation.getArguments();
    LocatedBlocks realAnswer=realNN.getBlockLocations((String)args[0],(Long)args[1],(Long)args[2]);
    if (failuresLeft-- > 0) {
      NameNode.LOG.info("FailNTimesAnswer injecting failure.");
      return makeBadBlockList(realAnswer);
    }
    NameNode.LOG.info("FailNTimesAnswer no longer failing.");
    return realAnswer;
  }
  private LocatedBlocks makeBadBlockList(  LocatedBlocks goodBlockList){
    LocatedBlock goodLocatedBlock=goodBlockList.get(0);
    LocatedBlock badLocatedBlock=new LocatedBlock(goodLocatedBlock.getBlock(),new DatanodeInfo[]{DFSTestUtil.getDatanodeInfo("1.2.3.4","bogus",1234)});
    badLocatedBlock.setStartOffset(goodLocatedBlock.getStartOffset());
    List<LocatedBlock> badBlocks=new ArrayList<LocatedBlock>();
    badBlocks.add(badLocatedBlock);
    return new LocatedBlocks(goodBlockList.getFileLength(),false,badBlocks,null,true,null,null);
  }
}
