public class TestNodeManager {
public static final class InvalidContainerExecutor extends DefaultContainerExecutor {
    @Override public void init(    Context nmContext) throws IOException {
      throw new IOException("dummy executor init called");
    }
  }
  @Test public void testContainerExecutorInitCall(){
    NodeManager nm=new NodeManager();
    YarnConfiguration conf=new YarnConfiguration();
    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,InvalidContainerExecutor.class,ContainerExecutor.class);
    try {
      nm.init(conf);
      fail("Init should fail");
    }
 catch (    YarnRuntimeException e) {
      assert (e.getCause().getMessage().contains("dummy executor init called"));
    }
 finally {
      nm.stop();
    }
  }
  private static int initCalls=0;
  private static int preCalls=0;
  private static int postCalls=0;
private static class DummyCSTListener1 implements ContainerStateTransitionListener {
    @Override public void init(    Context context){
      initCalls++;
    }
    @Override public void preTransition(    ContainerImpl op,    ContainerState beforeState,    ContainerEvent eventToBeProcessed){
      preCalls++;
    }
    @Override public void postTransition(    ContainerImpl op,    ContainerState beforeState,    ContainerState afterState,    ContainerEvent processedEvent){
      postCalls++;
    }
  }
private static class DummyCSTListener2 implements ContainerStateTransitionListener {
    @Override public void init(    Context context){
      initCalls++;
    }
    @Override public void preTransition(    ContainerImpl op,    ContainerState beforeState,    ContainerEvent eventToBeProcessed){
      preCalls++;
    }
    @Override public void postTransition(    ContainerImpl op,    ContainerState beforeState,    ContainerState afterState,    ContainerEvent processedEvent){
      postCalls++;
    }
  }
  @Test public void testListenerInitialization() throws Exception {
    NodeManager nodeManager=new NodeManager();
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_CONTAINER_STATE_TRANSITION_LISTENERS,DummyCSTListener1.class.getName() + "," + DummyCSTListener2.class.getName());
    initCalls=0;
    preCalls=0;
    postCalls=0;
    NodeManager.NMContext nmContext=nodeManager.createNMContext(null,null,null,false,conf);
    Assert.assertEquals(2,initCalls);
    nmContext.getContainerStateTransitionListener().preTransition(null,null,null);
    nmContext.getContainerStateTransitionListener().postTransition(null,null,null,null);
    Assert.assertEquals(2,preCalls);
    Assert.assertEquals(2,postCalls);
  }
  @Test public void testCreationOfNodeLabelsProviderService() throws InterruptedException {
    try {
      NodeManager nodeManager=new NodeManager();
      Configuration conf=new Configuration();
      NodeLabelsProvider labelsProviderService=nodeManager.createNodeLabelsProvider(conf);
      Assert.assertNull("LabelsProviderService should not be initialized in default configuration",labelsProviderService);
      conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG,"org.apache.hadoop.yarn.server.nodemanager.nodelabels.ConfigurationNodeLabelsProvider");
      labelsProviderService=nodeManager.createNodeLabelsProvider(conf);
      Assert.assertNotNull("LabelsProviderService should be initialized When " + "node labels provider class is configured",labelsProviderService);
      conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG,"org.apache.hadoop.yarn.server.nodemanager.NodeManager");
      try {
        labelsProviderService=nodeManager.createNodeLabelsProvider(conf);
        Assert.fail("Expected to throw IOException on Invalid configuration");
      }
 catch (      IOException e) {
      }
      Assert.assertNotNull("LabelsProviderService should be initialized When " + "node labels provider class is configured",labelsProviderService);
      conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG,YarnConfiguration.CONFIG_NODE_LABELS_PROVIDER);
      labelsProviderService=nodeManager.createNodeLabelsProvider(conf);
      Assert.assertNotNull("LabelsProviderService should be initialized When " + "node labels provider class is configured",labelsProviderService);
    }
 catch (    Exception e) {
      Assert.fail("Exception caught");
      e.printStackTrace();
    }
  }
}
