static class Allocator {
  private final ByteArrayManager bam;
  final ExecutorService pool=Executors.newFixedThreadPool(8);
  final List<Future<byte[]>> futures=new LinkedList<Future<byte[]>>();
  Allocator(  ByteArrayManager bam){
    this.bam=bam;
  }
  Future<byte[]> submit(  final int arrayLength){
    final Future<byte[]> f=pool.submit(new Callable<byte[]>(){
      @Override public byte[] call() throws Exception {
        final byte[] array=bam.newByteArray(arrayLength);
        Assert.assertEquals(arrayLength,array.length);
        return array;
      }
    }
);
    futures.add(f);
    return f;
  }
  int recycleAll(  Recycler recycler) throws Exception {
    final int n=futures.size();
    for (    Future<byte[]> f : futures) {
      recycler.submit(f.get());
    }
    futures.clear();
    return n;
  }
}
