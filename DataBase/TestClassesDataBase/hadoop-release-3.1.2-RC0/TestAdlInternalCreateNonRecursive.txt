/** 
 * Test createNonRecursive API.
 */
@RunWith(Parallelized.class) public class TestAdlInternalCreateNonRecursive {
  private Path inputFileName;
  private FsPermission inputPermission;
  private boolean inputOverride;
  private boolean inputFileAlreadyExist;
  private boolean inputParentAlreadyExist;
  private Class<IOException> expectedExceptionType;
  private FileSystem adlStore;
  public TestAdlInternalCreateNonRecursive(  String testScenario,  String fileName,  FsPermission permission,  boolean override,  boolean fileAlreadyExist,  boolean parentAlreadyExist,  Class<IOException> exceptionType){
    inputFileName=new Path("/test/createNonRecursive/" + UUID.randomUUID().toString(),fileName);
    inputPermission=permission;
    inputFileAlreadyExist=fileAlreadyExist;
    inputOverride=override;
    inputParentAlreadyExist=parentAlreadyExist;
    expectedExceptionType=exceptionType;
  }
  @Parameterized.Parameters(name="{0}") public static Collection adlCreateNonRecursiveTestData() throws UnsupportedEncodingException {
    return Arrays.asList(new Object[][]{{"CNR - When file do not exist.",UUID.randomUUID().toString(),FsPermission.getFileDefault(),false,false,true,null},{"CNR - When file exist. Override false",UUID.randomUUID().toString(),FsPermission.getFileDefault(),false,true,true,FileAlreadyExistsException.class},{"CNR - When file exist. Override true",UUID.randomUUID().toString(),FsPermission.getFileDefault(),true,true,true,null}});
  }
  @Before public void setUp() throws Exception {
    Assume.assumeTrue(AdlStorageConfiguration.isContractTestEnabled());
    adlStore=AdlStorageConfiguration.createStorageConnector();
  }
  @Test public void testCreateNonRecursiveFunctionality() throws IOException {
    if (inputFileAlreadyExist) {
      FileSystem.create(adlStore,inputFileName,inputPermission);
    }
    if (inputParentAlreadyExist) {
      adlStore.mkdirs(inputFileName.getParent());
    }
 else {
      adlStore.delete(inputFileName.getParent(),true);
    }
    try {
      adlStore.createNonRecursive(inputFileName,inputPermission,inputOverride,CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT,adlStore.getDefaultReplication(inputFileName),adlStore.getDefaultBlockSize(inputFileName),null);
    }
 catch (    IOException e) {
      if (expectedExceptionType == null) {
        throw e;
      }
      Assert.assertEquals(expectedExceptionType,e.getClass());
      return;
    }
    if (expectedExceptionType != null) {
      Assert.fail("CreateNonRecursive should have failed with exception " + expectedExceptionType.getName());
    }
  }
}
