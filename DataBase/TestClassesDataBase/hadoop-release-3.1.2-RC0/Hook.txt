/** 
 * Hooks for testing; save state for ease of asserting on invocation.
 */
private class Hook implements Runnable {
  private final String name;
  private final long sleepTime;
  private final boolean expectFailure;
  private AssertionError assertion;
  private boolean invoked;
  private int invokedOrder;
  private boolean completed;
  private boolean interrupted;
  private long startTime;
  Hook(  final String name,  final long sleepTime,  final boolean expectFailure){
    this.name=name;
    this.sleepTime=sleepTime;
    this.expectFailure=expectFailure;
  }
  @Override public void run(){
    try {
      invoked=true;
      invokedOrder=INVOCATION_COUNT.incrementAndGet();
      startTime=System.currentTimeMillis();
      LOG.info("Starting shutdown of {} with sleep time of {}",name,sleepTime);
      if (sleepTime > 0) {
        sleep(sleepTime);
      }
      LOG.info("Completed shutdown of {}",name);
      completed=true;
      if (expectFailure) {
        assertion=new AssertionError("Expected a failure of " + name);
      }
    }
 catch (    InterruptedException ex) {
      LOG.info("Shutdown {} interrupted exception",name,ex);
      interrupted=true;
      if (!expectFailure) {
        assertion=new AssertionError("Timeout of " + name,ex);
      }
    }
    maybeThrowAssertion();
  }
  /** 
 * Raise any exception generated during the shutdown process.
 * @throws AssertionError any assertion from the shutdown.
 */
  void maybeThrowAssertion() throws AssertionError {
    if (assertion != null) {
      throw assertion;
    }
  }
  @Override public String toString(){
    final StringBuilder sb=new StringBuilder("Hook{");
    sb.append("name='").append(name).append('\'');
    sb.append(", sleepTime=").append(sleepTime);
    sb.append(", expectFailure=").append(expectFailure);
    sb.append(", invoked=").append(invoked);
    sb.append(", invokedOrder=").append(invokedOrder);
    sb.append(", completed=").append(completed);
    sb.append(", interrupted=").append(interrupted);
    sb.append('}');
    return sb.toString();
  }
}
