@RunWith(Parameterized.class) public class TestDelegationTokenManager {
  private static final long DAY_IN_SECS=86400;
  @Parameterized.Parameters public static Collection<Object[]> headers(){
    return Arrays.asList(new Object[][]{{false},{true}});
  }
  private boolean enableZKKey;
  public TestDelegationTokenManager(  boolean enableZKKey){
    this.enableZKKey=enableZKKey;
  }
  @SuppressWarnings("unchecked") @Test public void testDTManager() throws Exception {
    Configuration conf=new Configuration(false);
    conf.setLong(DelegationTokenManager.UPDATE_INTERVAL,DAY_IN_SECS);
    conf.setLong(DelegationTokenManager.MAX_LIFETIME,DAY_IN_SECS);
    conf.setLong(DelegationTokenManager.RENEW_INTERVAL,DAY_IN_SECS);
    conf.setLong(DelegationTokenManager.REMOVAL_SCAN_INTERVAL,DAY_IN_SECS);
    conf.getBoolean(DelegationTokenManager.ENABLE_ZK_KEY,enableZKKey);
    DelegationTokenManager tm=new DelegationTokenManager(conf,new Text("foo"));
    tm.init();
    Token<DelegationTokenIdentifier> token=(Token<DelegationTokenIdentifier>)tm.createToken(UserGroupInformation.getCurrentUser(),"foo");
    Assert.assertNotNull(token);
    tm.verifyToken(token);
    Assert.assertTrue(tm.renewToken(token,"foo") > System.currentTimeMillis());
    tm.cancelToken(token,"foo");
    try {
      tm.verifyToken(token);
      Assert.fail();
    }
 catch (    IOException ex) {
    }
catch (    Exception ex) {
      Assert.fail();
    }
    tm.destroy();
  }
}
