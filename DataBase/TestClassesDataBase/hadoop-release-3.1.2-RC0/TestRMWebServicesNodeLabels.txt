public class TestRMWebServicesNodeLabels extends JerseyTestBase {
  private static final int BAD_REQUEST_CODE=400;
  private static final Log LOG=LogFactory.getLog(TestRMWebServicesNodeLabels.class);
  private static MockRM rm;
  private static YarnConfiguration conf;
  private static String userName;
  private static String notUserName;
  private static RMWebServices rmWebService;
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      bind(JAXBContextResolver.class);
      try {
        userName=UserGroupInformation.getCurrentUser().getShortUserName();
      }
 catch (      IOException ioe) {
        throw new RuntimeException("Unable to get current user name " + ioe.getMessage(),ioe);
      }
      notUserName=userName + "abc123";
      conf=new YarnConfiguration();
      conf.set(YarnConfiguration.YARN_ADMIN_ACL,userName);
      rm=new MockRM(conf);
      rmWebService=new RMWebServices(rm,conf);
      bind(RMWebServices.class).toInstance(rmWebService);
      bind(GenericExceptionHandler.class);
      bind(ResourceManager.class).toInstance(rm);
      filter("/*").through(TestRMWebServicesAppsModification.TestRMCustomAuthFilter.class);
      serve("/*").with(GuiceContainer.class);
    }
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestRMWebServicesNodeLabels(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.yarn.server.resourcemanager.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testNodeLabels() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response;
    NodeLabelsInfo nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("a"));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(1,nlsifo.getNodeLabels().size());
    for (    NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
      assertEquals("a",nl.getName());
      assertTrue(nl.getExclusivity());
    }
    nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("b",false));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(2,nlsifo.getNodeLabels().size());
    for (    NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
      if (nl.getName().equals("b")) {
        assertFalse(nl.getExclusivity());
      }
    }
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("labels","a");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    params=new MultivaluedMapImpl();
    params.add("labels","b");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid1:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    params=new MultivaluedMapImpl();
    params.add("labels","b");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid2:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    LabelsToNodesInfo ltni=response.getEntity(LabelsToNodesInfo.class);
    assertEquals(2,ltni.getLabelsToNodes().size());
    NodeIDsInfo nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("b",false));
    assertTrue(nodes.getNodeIDs().contains("nid2:0"));
    assertTrue(nodes.getNodeIDs().contains("nid1:0"));
    nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("a"));
    assertTrue(nodes.getNodeIDs().contains("nid:0"));
    params=new MultivaluedMapImpl();
    params.add("labels","a");
    response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    ltni=response.getEntity(LabelsToNodesInfo.class);
    assertEquals(1,ltni.getLabelsToNodes().size());
    nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("a"));
    assertTrue(nodes.getNodeIDs().contains("nid:0"));
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
    params=new MultivaluedMapImpl();
    params.add("labels","b");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("b",false)));
    NodeToLabelsEntryList ntli=new NodeToLabelsEntryList();
    ArrayList<String> labels=new ArrayList<String>();
    labels.add("a");
    NodeToLabelsEntry nli=new NodeToLabelsEntry("nid:0",labels);
    ntli.getNodeToLabels().add(nli);
    response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsEntryList.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    NodeToLabelsInfo ntlinfo=response.getEntity(NodeToLabelsInfo.class);
    NodeLabelsInfo nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
    assertEquals(1,nlinfo.getNodeLabels().size());
    assertTrue(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
    params=new MultivaluedMapImpl();
    params.add("labels","");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().isEmpty());
    params=new MultivaluedMapImpl();
    params.add("labels","a");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
    params=new MultivaluedMapImpl();
    params.add("labels","b");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",notUserName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",notUserName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"c\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(2,nlsifo.getNodeLabels().size());
    params=new MultivaluedMapImpl();
    params.add("labels","b");
    response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(1,nlsifo.getNodeLabels().size());
    for (    NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
      assertEquals("a",nl.getName());
      assertTrue(nl.getExclusivity());
    }
    params=new MultivaluedMapImpl();
    params.add("labels","a");
    response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(0,nlsifo.getNodeLabels().size());
    nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("x",false));
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("y",false));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    params=new MultivaluedMapImpl();
    params.add("labels","y");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    rmWebService.isCentralizedNodeLabelConfiguration=false;
    ntli=new NodeToLabelsEntryList();
    labels=new ArrayList<String>();
    labels.add("x");
    nli=new NodeToLabelsEntry("nid:0",labels);
    ntli.getNodeToLabels().add(nli);
    response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsEntryList.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    ntlinfo=response.getEntity(NodeToLabelsInfo.class);
    nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
    assertEquals(1,nlinfo.getNodeLabels().size());
    assertFalse(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("x",false)));
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabelName\": [\"x\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
    LOG.info("posted node nodelabel");
    response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    ntlinfo=response.getEntity(NodeToLabelsInfo.class);
    nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
    assertEquals(1,nlinfo.getNodeLabels().size());
    assertFalse(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("x",false)));
    params=new MultivaluedMapImpl();
    params.add("labels","x");
    response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals(new NodeLabelInfo("y",false),nlsifo.getNodeLabelsInfo().get(0));
    assertEquals("y",nlsifo.getNodeLabelsInfo().get(0).getName());
    assertFalse(nlsifo.getNodeLabelsInfo().get(0).getExclusivity());
    params=new MultivaluedMapImpl();
    params.add("labels","y");
    response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertTrue(nlsifo.getNodeLabelsInfo().isEmpty());
    nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("z",false));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    nlsifo=response.getEntity(NodeLabelsInfo.class);
    assertEquals("z",nlsifo.getNodeLabelsInfo().get(0).getName());
    assertFalse(nlsifo.getNodeLabelsInfo().get(0).getExclusivity());
    assertEquals(1,nlsifo.getNodeLabels().size());
  }
  @Test public void testLabelInvalidAddition() throws UniformInterfaceException, Exception {
    WebResource r=resource();
    ClientResponse response;
    NodeLabelsInfo nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("a&"));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    String expectedmessage="java.io.IOException: label name should only contains" + " {0-9, a-z, A-Z, -, _} and should not started with" + " {-,_}, now it is=a&";
    validateJsonExceptionContent(response,expectedmessage);
  }
  @Test public void testLabelChangeExclusivity() throws Exception, JSONException {
    WebResource r=resource();
    ClientResponse response;
    NodeLabelsInfo nlsifo=new NodeLabelsInfo();
    nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("newlabel",true));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    NodeLabelsInfo nlsinfo2=new NodeLabelsInfo();
    nlsinfo2.getNodeLabelsInfo().add(new NodeLabelInfo("newlabel",false));
    response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsinfo2,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
    String expectedmessage="java.io.IOException: Exclusivity cannot be modified for an existing" + " label with : <newlabel:exclusivity=false>";
    validateJsonExceptionContent(response,expectedmessage);
  }
  private void validateJsonExceptionContent(  ClientResponse response,  String expectedmessage) throws JSONException {
    Assert.assertEquals(BAD_REQUEST_CODE,response.getStatus());
    JSONObject msg=response.getEntity(JSONObject.class);
    JSONObject exception=msg.getJSONObject("RemoteException");
    String message=exception.getString("message");
    assertEquals("incorrect number of elements",3,exception.length());
    String type=exception.getString("exception");
    String classname=exception.getString("javaClassName");
    WebServicesTestUtils.checkStringMatch("exception type","BadRequestException",type);
    WebServicesTestUtils.checkStringMatch("exception classname","org.apache.hadoop.yarn.webapp.BadRequestException",classname);
    WebServicesTestUtils.checkStringContains("exception message",expectedmessage,message);
  }
  @Test public void testLabelInvalidReplace() throws UniformInterfaceException, Exception {
    WebResource r=resource();
    ClientResponse response;
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("labels","idontexist");
    response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    String expectedmessage="Not all labels being replaced contained by known label" + " collections, please check, new labels=[idontexist]";
    validateJsonExceptionContent(response,expectedmessage);
  }
  @Test public void testLabelInvalidRemove() throws UniformInterfaceException, Exception {
    WebResource r=resource();
    ClientResponse response;
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("labels","irealldontexist");
    response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
    String expectedmessage="java.io.IOException: Node label=irealldontexist to be" + " removed doesn't existed in cluster node labels" + " collection.";
    validateJsonExceptionContent(response,expectedmessage);
  }
  @SuppressWarnings("rawtypes") private String toJson(  Object nsli,  Class klass) throws Exception {
    StringWriter sw=new StringWriter();
    JSONJAXBContext ctx=new JSONJAXBContext(klass);
    JSONMarshaller jm=ctx.createJSONMarshaller();
    jm.marshallToJSON(nsli,sw);
    return sw.toString();
  }
}
