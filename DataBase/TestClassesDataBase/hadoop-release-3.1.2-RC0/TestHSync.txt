public class TestHSync {
  private void checkSyncMetric(  MiniDFSCluster cluster,  int dn,  long value){
    DataNode datanode=cluster.getDataNodes().get(dn);
    assertCounter("FsyncCount",value,getMetrics(datanode.getMetrics().name()));
  }
  private void checkSyncMetric(  MiniDFSCluster cluster,  long value){
    checkSyncMetric(cluster,0,value);
  }
  /** 
 * Test basic hsync cases 
 */
  @Test public void testHSync() throws Exception {
    testHSyncOperation(false);
  }
  @Test public void testHSyncWithAppend() throws Exception {
    testHSyncOperation(true);
  }
  private void testHSyncOperation(  boolean testWithAppend) throws IOException {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    final DistributedFileSystem fs=cluster.getFileSystem();
    final Path p=new Path("/testHSync/foo");
    final int len=1 << 16;
    FSDataOutputStream out=fs.create(p,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE,CreateFlag.SYNC_BLOCK),4096,(short)1,len,null);
    if (testWithAppend) {
      out.close();
      out=fs.append(p,EnumSet.of(CreateFlag.APPEND,CreateFlag.SYNC_BLOCK),4096,null);
    }
    out.hflush();
    checkSyncMetric(cluster,0);
    out.hsync();
    checkSyncMetric(cluster,0);
    out.write(1);
    checkSyncMetric(cluster,0);
    out.hsync();
    checkSyncMetric(cluster,1);
    out.hsync();
    checkSyncMetric(cluster,2);
    out.hflush();
    checkSyncMetric(cluster,2);
    out.close();
    checkSyncMetric(cluster,3);
    out=fs.create(p,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE),4096,(short)1,len,null);
    out.hsync();
    checkSyncMetric(cluster,3);
    out.write(1);
    checkSyncMetric(cluster,3);
    out.hsync();
    checkSyncMetric(cluster,4);
    out.hsync();
    checkSyncMetric(cluster,5);
    out.close();
    checkSyncMetric(cluster,5);
    cluster.shutdown();
  }
  /** 
 * Test hsync on an exact block boundary 
 */
  @Test public void testHSyncBlockBoundary() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    final FileSystem fs=cluster.getFileSystem();
    final Path p=new Path("/testHSyncBlockBoundary/foo");
    final int len=1 << 16;
    final byte[] fileContents=AppendTestUtil.initBuffer(len);
    FSDataOutputStream out=fs.create(p,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE,CreateFlag.SYNC_BLOCK),4096,(short)1,len,null);
    out.write(fileContents,0,len);
    out.hflush();
    checkSyncMetric(cluster,1);
    out.hsync();
    checkSyncMetric(cluster,1);
    out.write(1);
    out.hsync();
    checkSyncMetric(cluster,2);
    out.close();
    checkSyncMetric(cluster,3);
    cluster.shutdown();
  }
  /** 
 * Test hsync via SequenceFiles 
 */
  @Test public void testSequenceFileSync() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    final FileSystem fs=cluster.getFileSystem();
    final Path p=new Path("/testSequenceFileSync/foo");
    final int len=1 << 16;
    FSDataOutputStream out=fs.create(p,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE,CreateFlag.SYNC_BLOCK),4096,(short)1,len,null);
    Writer w=SequenceFile.createWriter(new Configuration(),Writer.stream(out),Writer.keyClass(RandomDatum.class),Writer.valueClass(RandomDatum.class),Writer.compression(CompressionType.NONE,new DefaultCodec()));
    w.hflush();
    checkSyncMetric(cluster,0);
    w.hsync();
    checkSyncMetric(cluster,1);
    int seed=new Random().nextInt();
    RandomDatum.Generator generator=new RandomDatum.Generator(seed);
    generator.next();
    w.append(generator.getKey(),generator.getValue());
    w.hsync();
    checkSyncMetric(cluster,2);
    w.close();
    checkSyncMetric(cluster,2);
    out.close();
    checkSyncMetric(cluster,3);
    cluster.shutdown();
  }
  /** 
 * Test that syncBlock is correctly performed at replicas 
 */
  @Test public void testHSyncWithReplication() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    final FileSystem fs=cluster.getFileSystem();
    final Path p=new Path("/testHSyncWithReplication/foo");
    final int len=1 << 16;
    FSDataOutputStream out=fs.create(p,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE,CreateFlag.SYNC_BLOCK),4096,(short)3,len,null);
    out.write(1);
    out.hflush();
    checkSyncMetric(cluster,0,0);
    checkSyncMetric(cluster,1,0);
    checkSyncMetric(cluster,2,0);
    out.hsync();
    checkSyncMetric(cluster,0,1);
    checkSyncMetric(cluster,1,1);
    checkSyncMetric(cluster,2,1);
    out.hsync();
    checkSyncMetric(cluster,0,2);
    checkSyncMetric(cluster,1,2);
    checkSyncMetric(cluster,2,2);
    cluster.shutdown();
  }
}
