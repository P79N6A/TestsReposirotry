public class NonSortTest {
  @Test public void nonSortTest() throws Exception {
    Configuration nativeConf=ScenarioConfiguration.getNativeConfiguration();
    nativeConf.addResource(TestConstants.NONSORT_TEST_CONF);
    nativeConf.set(TestConstants.NATIVETASK_MAP_OUTPUT_SORT,"false");
    final Job nativeNonSort=getJob(nativeConf,"NativeNonSort",TestConstants.NATIVETASK_NONSORT_TEST_INPUTDIR,TestConstants.NATIVETASK_NONSORT_TEST_NATIVE_OUTPUT);
    assertTrue(nativeNonSort.waitForCompletion(true));
    Configuration normalConf=ScenarioConfiguration.getNormalConfiguration();
    normalConf.addResource(TestConstants.NONSORT_TEST_CONF);
    final Job hadoopWithSort=getJob(normalConf,"NormalJob",TestConstants.NATIVETASK_NONSORT_TEST_INPUTDIR,TestConstants.NATIVETASK_NONSORT_TEST_NORMAL_OUTPUT);
    assertTrue(hadoopWithSort.waitForCompletion(true));
    final boolean compareRet=ResultVerifier.verify(TestConstants.NATIVETASK_NONSORT_TEST_NATIVE_OUTPUT,TestConstants.NATIVETASK_NONSORT_TEST_NORMAL_OUTPUT);
    assertEquals("file compare result: if they are the same ,then return true",true,compareRet);
    ResultVerifier.verifyCounters(hadoopWithSort,nativeNonSort);
  }
  @Before public void startUp() throws Exception {
    Assume.assumeTrue(NativeCodeLoader.isNativeCodeLoaded());
    Assume.assumeTrue(NativeRuntime.isNativeLibraryLoaded());
    final ScenarioConfiguration conf=new ScenarioConfiguration();
    conf.addNonSortTestConf();
    final FileSystem fs=FileSystem.get(conf);
    final Path path=new Path(TestConstants.NATIVETASK_NONSORT_TEST_INPUTDIR);
    if (!fs.exists(path)) {
      int filesize=conf.getInt(TestConstants.NATIVETASK_NONSORTTEST_FILESIZE,10000000);
      new TestInputFile(filesize,Text.class.getName(),Text.class.getName(),conf).createSequenceTestFile(path.toString());
    }
    fs.close();
  }
  @AfterClass public static void cleanUp() throws IOException {
    final FileSystem fs=FileSystem.get(new ScenarioConfiguration());
    fs.delete(new Path(TestConstants.NATIVETASK_NONSORT_TEST_DIR),true);
    fs.close();
  }
  private Job getJob(  Configuration conf,  String jobName,  String inputpath,  String outputpath) throws IOException {
    final FileSystem fs=FileSystem.get(conf);
    if (fs.exists(new Path(outputpath))) {
      fs.delete(new Path(outputpath),true);
    }
    fs.close();
    final Job job=Job.getInstance(conf,jobName);
    job.setJarByClass(NonSortTestMR.class);
    job.setMapperClass(NonSortTestMR.Map.class);
    job.setReducerClass(NonSortTestMR.KeyHashSumReduce.class);
    job.setOutputKeyClass(Text.class);
    job.setMapOutputValueClass(IntWritable.class);
    job.setOutputValueClass(LongWritable.class);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);
    FileInputFormat.addInputPath(job,new Path(inputpath));
    FileOutputFormat.setOutputPath(job,new Path(outputpath));
    return job;
  }
}
