@SuppressWarnings({"rawtypes","unchecked","deprecation"}) public class TestNativeCollectorOnlyHandler {
  private NativeCollectorOnlyHandler handler;
  private INativeHandler nativeHandler;
  private BufferPusher pusher;
  private ICombineHandler combiner;
  private TaskContext taskContext;
  private static final String LOCAL_DIR=TestConstants.NATIVETASK_TEST_DIR + "/local";
  @Before public void setUp() throws IOException {
    this.nativeHandler=Mockito.mock(INativeHandler.class);
    this.pusher=Mockito.mock(BufferPusher.class);
    this.combiner=Mockito.mock(ICombineHandler.class);
    JobConf jobConf=new JobConf();
    jobConf.set(OutputUtil.NATIVE_TASK_OUTPUT_MANAGER,"org.apache.hadoop.mapred.nativetask.util.LocalJobOutputFiles");
    jobConf.set("mapred.local.dir",LOCAL_DIR);
    this.taskContext=new TaskContext(jobConf,BytesWritable.class,BytesWritable.class,BytesWritable.class,BytesWritable.class,null,null);
    Mockito.when(nativeHandler.getInputBuffer()).thenReturn(new InputBuffer(BufferType.HEAP_BUFFER,100));
  }
  @After public void tearDown() throws IOException {
    FileSystem.getLocal(new Configuration()).delete(new Path(LOCAL_DIR));
  }
  @Test public void testCollect() throws IOException {
    this.handler=new NativeCollectorOnlyHandler(taskContext,nativeHandler,pusher,combiner);
    handler.collect(new BytesWritable(),new BytesWritable(),100);
    handler.close();
    handler.close();
    Mockito.verify(pusher,Mockito.times(1)).collect(Matchers.any(BytesWritable.class),Matchers.any(BytesWritable.class),Matchers.anyInt());
    Mockito.verify(pusher,Mockito.times(1)).close();
    Mockito.verify(combiner,Mockito.times(1)).close();
    Mockito.verify(nativeHandler,Mockito.times(1)).close();
  }
  @Test public void testGetCombiner() throws IOException {
    this.handler=new NativeCollectorOnlyHandler(taskContext,nativeHandler,pusher,combiner);
    Mockito.when(combiner.getId()).thenReturn(100L);
    final ReadWriteBuffer result=handler.onCall(NativeCollectorOnlyHandler.GET_COMBINE_HANDLER,null);
    Assert.assertEquals(100L,result.readLong());
  }
  @Test public void testOnCall() throws IOException {
    this.handler=new NativeCollectorOnlyHandler(taskContext,nativeHandler,pusher,combiner);
    boolean thrown=false;
    try {
      handler.onCall(new Command(-1),null);
    }
 catch (    final IOException e) {
      thrown=true;
    }
    Assert.assertTrue("exception thrown",thrown);
    final String expectedOutputPath=StringUtils.join(File.separator,new String[]{LOCAL_DIR,"output","file.out"});
    final String expectedOutputIndexPath=StringUtils.join(File.separator,new String[]{LOCAL_DIR,"output","file.out.index"});
    final String expectedSpillPath=StringUtils.join(File.separator,new String[]{LOCAL_DIR,"output","spill0.out"});
    final String outputPath=handler.onCall(NativeCollectorOnlyHandler.GET_OUTPUT_PATH,null).readString();
    Assert.assertEquals(expectedOutputPath,outputPath);
    final String outputIndexPath=handler.onCall(NativeCollectorOnlyHandler.GET_OUTPUT_INDEX_PATH,null).readString();
    Assert.assertEquals(expectedOutputIndexPath,outputIndexPath);
    final String spillPath=handler.onCall(NativeCollectorOnlyHandler.GET_SPILL_PATH,null).readString();
    Assert.assertEquals(expectedSpillPath,spillPath);
  }
}
