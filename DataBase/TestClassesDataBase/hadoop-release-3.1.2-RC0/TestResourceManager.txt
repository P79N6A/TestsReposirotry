public class TestResourceManager {
  private static final Log LOG=LogFactory.getLog(TestResourceManager.class);
  private ResourceManager resourceManager=null;
  @Before public void setUp() throws Exception {
    Configuration conf=new YarnConfiguration();
    UserGroupInformation.setConfiguration(conf);
    resourceManager=new ResourceManager();
    resourceManager.init(conf);
    resourceManager.getRMContext().getContainerTokenSecretManager().rollMasterKey();
    resourceManager.getRMContext().getNMTokenSecretManager().rollMasterKey();
  }
  @After public void tearDown() throws Exception {
    resourceManager.stop();
  }
  private org.apache.hadoop.yarn.server.resourcemanager.NodeManager registerNode(  String hostName,  int containerManagerPort,  int httpPort,  String rackName,  Resource capability) throws IOException, YarnException {
    org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm=new org.apache.hadoop.yarn.server.resourcemanager.NodeManager(hostName,containerManagerPort,httpPort,rackName,capability,resourceManager);
    NodeAddedSchedulerEvent nodeAddEvent1=new NodeAddedSchedulerEvent(resourceManager.getRMContext().getRMNodes().get(nm.getNodeId()));
    resourceManager.getResourceScheduler().handle(nodeAddEvent1);
    return nm;
  }
  @Test public void testResourceAllocation() throws IOException, YarnException, InterruptedException, TimeoutException {
    LOG.info("--- START: testResourceAllocation ---");
    final int memory=4 * 1024;
    final int vcores=4;
    String host1="host1";
    org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm1=registerNode(host1,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(memory,vcores));
    String host2="host2";
    org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm2=registerNode(host2,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(memory / 2,vcores / 2));
    RMNodeImpl node1=(RMNodeImpl)resourceManager.getRMContext().getRMNodes().get(nm1.getNodeId());
    RMNodeImpl node2=(RMNodeImpl)resourceManager.getRMContext().getRMNodes().get(nm2.getNodeId());
    node1.handle(new RMNodeStartedEvent(nm1.getNodeId(),null,null));
    node2.handle(new RMNodeStartedEvent(nm2.getNodeId(),null,null));
    Application application=new Application("user1",resourceManager);
    application.submit();
    application.addNodeManager(host1,1234,nm1);
    application.addNodeManager(host2,1234,nm2);
    final int memory1=1024;
    Resource capability1=Resources.createResource(memory1,1);
    Priority priority1=Priority.newInstance(1);
    application.addResourceRequestSpec(priority1,capability1);
    Task t1=new Task(application,priority1,new String[]{host1,host2});
    application.addTask(t1);
    final int memory2=2048;
    Resource capability2=Resources.createResource(memory2,1);
    Priority priority0=Priority.newInstance(0);
    application.addResourceRequestSpec(priority0,capability2);
    application.schedule();
    nodeUpdate(nm1);
    ((AbstractYarnScheduler)resourceManager.getResourceScheduler()).update();
    application.schedule();
    checkResourceUsage(nm1,nm2);
    LOG.info("Adding new tasks...");
    Task t2=new Task(application,priority1,new String[]{host1,host2});
    application.addTask(t2);
    Task t3=new Task(application,priority0,new String[]{ResourceRequest.ANY});
    application.addTask(t3);
    application.schedule();
    checkResourceUsage(nm1,nm2);
    nodeUpdate(nm2);
    nodeUpdate(nm2);
    nodeUpdate(nm1);
    nodeUpdate(nm1);
    LOG.info("Trying to allocate...");
    application.schedule();
    checkResourceUsage(nm1,nm2);
    LOG.info("Finishing up tasks...");
    application.finishTask(t1);
    application.finishTask(t2);
    application.finishTask(t3);
    AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(application.getApplicationAttemptId(),RMAppAttemptState.FINISHED,false);
    resourceManager.getResourceScheduler().handle(appRemovedEvent1);
    checkResourceUsage(nm1,nm2);
    LOG.info("--- END: testResourceAllocation ---");
  }
  private void nodeUpdate(  org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm1){
    RMNode node=resourceManager.getRMContext().getRMNodes().get(nm1.getNodeId());
    NodeUpdateSchedulerEvent nodeUpdate=new NodeUpdateSchedulerEvent(node);
    resourceManager.getResourceScheduler().handle(nodeUpdate);
  }
  @Test public void testNodeHealthReportIsNotNull() throws Exception {
    String host1="host1";
    final int memory=4 * 1024;
    org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm1=registerNode(host1,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(memory,1));
    nm1.heartbeat();
    nm1.heartbeat();
    Collection<RMNode> values=resourceManager.getRMContext().getRMNodes().values();
    for (    RMNode ni : values) {
      assertNotNull(ni.getHealthReport());
    }
  }
  private void checkResourceUsage(  org.apache.hadoop.yarn.server.resourcemanager.NodeManager... nodes){
    for (    org.apache.hadoop.yarn.server.resourcemanager.NodeManager nodeManager : nodes) {
      nodeManager.checkResourceUsage();
    }
  }
  @Test(timeout=30000) public void testResourceManagerInitConfigValidation() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,-1);
    try {
      resourceManager=new MockRM(conf);
      fail("Exception is expected because the global max attempts" + " is negative.");
    }
 catch (    YarnRuntimeException e) {
      if (!e.getMessage().startsWith("Invalid global max attempts configuration"))       throw e;
    }
  }
  @Test public void testNMExpiryAndHeartbeatIntervalsValidation() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.setLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,1000);
    conf.setLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,1001);
    try {
      resourceManager=new MockRM(conf);
    }
 catch (    YarnRuntimeException e) {
      if (!e.getMessage().startsWith("Nodemanager expiry interval should be no" + " less than heartbeat interval")) {
        throw e;
      }
    }
  }
  @Test(timeout=50000) public void testFilterOverrides() throws Exception {
    String filterInitializerConfKey="hadoop.http.filter.initializers";
    String[] filterInitializers={AuthenticationFilterInitializer.class.getName(),RMAuthenticationFilterInitializer.class.getName(),AuthenticationFilterInitializer.class.getName() + "," + RMAuthenticationFilterInitializer.class.getName(),AuthenticationFilterInitializer.class.getName() + ", " + RMAuthenticationFilterInitializer.class.getName(),AuthenticationFilterInitializer.class.getName() + ", " + this.getClass().getName()};
    for (    String filterInitializer : filterInitializers) {
      resourceManager=new ResourceManager(){
        @Override protected void doSecureLogin() throws IOException {
        }
      }
;
      Configuration conf=new YarnConfiguration();
      conf.set(filterInitializerConfKey,filterInitializer);
      conf.set("hadoop.security.authentication","kerberos");
      conf.set("hadoop.http.authentication.type","kerberos");
      try {
        try {
          UserGroupInformation.setConfiguration(conf);
        }
 catch (        Exception e) {
          LOG.info("Got expected exception");
        }
        resourceManager.init(conf);
        resourceManager.startWepApp();
      }
 catch (      RuntimeException e) {
        String tmp=resourceManager.getConfig().get(filterInitializerConfKey);
        if (filterInitializer.contains(this.getClass().getName())) {
          Assert.assertEquals(RMAuthenticationFilterInitializer.class.getName() + "," + this.getClass().getName(),tmp);
        }
 else {
          Assert.assertEquals(RMAuthenticationFilterInitializer.class.getName(),tmp);
        }
        resourceManager.stop();
      }
    }
    String[] simpleFilterInitializers={"",StaticUserWebFilter.class.getName()};
    for (    String filterInitializer : simpleFilterInitializers) {
      resourceManager=new ResourceManager();
      Configuration conf=new YarnConfiguration();
      conf.set(filterInitializerConfKey,filterInitializer);
      try {
        UserGroupInformation.setConfiguration(conf);
        resourceManager.init(conf);
        resourceManager.startWepApp();
      }
 catch (      RuntimeException e) {
        String tmp=resourceManager.getConfig().get(filterInitializerConfKey);
        if (filterInitializer.equals(StaticUserWebFilter.class.getName())) {
          Assert.assertEquals(RMAuthenticationFilterInitializer.class.getName() + "," + StaticUserWebFilter.class.getName(),tmp);
        }
 else {
          Assert.assertEquals(RMAuthenticationFilterInitializer.class.getName(),tmp);
        }
        resourceManager.stop();
      }
    }
  }
}
