public class TestRegexCopyFilter {
  @Test public void testShouldCopyTrue(){
    List<Pattern> filters=new ArrayList<>();
    filters.add(Pattern.compile("user"));
    RegexCopyFilter regexCopyFilter=new RegexCopyFilter("fakeFile");
    regexCopyFilter.setFilters(filters);
    Path shouldCopyPath=new Path("/user/bar");
    Assert.assertTrue(regexCopyFilter.shouldCopy(shouldCopyPath));
  }
  @Test public void testShouldCopyFalse(){
    List<Pattern> filters=new ArrayList<>();
    filters.add(Pattern.compile(".*test.*"));
    RegexCopyFilter regexCopyFilter=new RegexCopyFilter("fakeFile");
    regexCopyFilter.setFilters(filters);
    Path shouldNotCopyPath=new Path("/user/testing");
    Assert.assertFalse(regexCopyFilter.shouldCopy(shouldNotCopyPath));
  }
  @Test public void testShouldCopyWithMultipleFilters(){
    List<Pattern> filters=new ArrayList<>();
    filters.add(Pattern.compile(".*test.*"));
    filters.add(Pattern.compile("/user/b.*"));
    filters.add(Pattern.compile(".*_SUCCESS"));
    List<Path> toCopy=getTestPaths();
    int shouldCopyCount=0;
    RegexCopyFilter regexCopyFilter=new RegexCopyFilter("fakeFile");
    regexCopyFilter.setFilters(filters);
    for (    Path path : toCopy) {
      if (regexCopyFilter.shouldCopy(path)) {
        shouldCopyCount++;
      }
    }
    Assert.assertEquals(2,shouldCopyCount);
  }
  @Test public void testShouldExcludeAll(){
    List<Pattern> filters=new ArrayList<>();
    filters.add(Pattern.compile(".*test.*"));
    filters.add(Pattern.compile("/user/b.*"));
    filters.add(Pattern.compile(".*"));
    List<Path> toCopy=getTestPaths();
    int shouldCopyCount=0;
    RegexCopyFilter regexCopyFilter=new RegexCopyFilter("fakeFile");
    regexCopyFilter.setFilters(filters);
    for (    Path path : toCopy) {
      if (regexCopyFilter.shouldCopy(path)) {
        shouldCopyCount++;
      }
    }
    Assert.assertEquals(0,shouldCopyCount);
  }
  private List<Path> getTestPaths(){
    List<Path> toCopy=new ArrayList<>();
    toCopy.add(new Path("/user/bar"));
    toCopy.add(new Path("/user/foo/_SUCCESS"));
    toCopy.add(new Path("/hive/test_data"));
    toCopy.add(new Path("test"));
    toCopy.add(new Path("/user/foo/bar"));
    toCopy.add(new Path("/mapred/.staging_job"));
    return toCopy;
  }
}
