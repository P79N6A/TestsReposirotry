/** 
 * Namenode context in the federated cluster.
 */
public class NamenodeContext {
  private Configuration conf;
  private NameNode namenode;
  private String nameserviceId;
  private String namenodeId;
  private FileContext fileContext;
  private int rpcPort;
  private int servicePort;
  private int lifelinePort;
  private int httpPort;
  private URI fileSystemUri;
  private int index;
  private DFSClient client;
  public NamenodeContext(  Configuration conf,  String nsId,  String nnId,  int index){
    this.conf=conf;
    this.nameserviceId=nsId;
    this.namenodeId=nnId;
    this.index=index;
  }
  public NameNode getNamenode(){
    return this.namenode;
  }
  public String getNameserviceId(){
    return this.nameserviceId;
  }
  public String getNamenodeId(){
    return this.namenodeId;
  }
  public FileContext getFileContext(){
    return this.fileContext;
  }
  public void setNamenode(  NameNode nn) throws URISyntaxException {
    this.namenode=nn;
    this.rpcPort=nn.getNameNodeAddress().getPort();
    this.servicePort=nn.getServiceRpcAddress().getPort();
    this.lifelinePort=nn.getServiceRpcAddress().getPort();
    this.httpPort=nn.getHttpAddress().getPort();
    this.fileSystemUri=new URI("hdfs://" + namenode.getHostAndPort());
    DistributedFileSystem.setDefaultUri(this.conf,this.fileSystemUri);
    try {
      this.fileContext=FileContext.getFileContext(this.conf);
    }
 catch (    UnsupportedFileSystemException e) {
      this.fileContext=null;
    }
  }
  public String getRpcAddress(){
    return namenode.getNameNodeAddress().getHostName() + ":" + rpcPort;
  }
  public String getServiceAddress(){
    return namenode.getServiceRpcAddress().getHostName() + ":" + servicePort;
  }
  public String getLifelineAddress(){
    return namenode.getServiceRpcAddress().getHostName() + ":" + lifelinePort;
  }
  public String getHttpAddress(){
    return namenode.getHttpAddress().getHostName() + ":" + httpPort;
  }
  public FileSystem getFileSystem() throws IOException {
    return DistributedFileSystem.get(conf);
  }
  public void resetClient(){
    client=null;
  }
  public DFSClient getClient(  UserGroupInformation user) throws IOException, URISyntaxException, InterruptedException {
    LOG.info("Connecting to namenode at {}",fileSystemUri);
    return user.doAs(new PrivilegedExceptionAction<DFSClient>(){
      @Override public DFSClient run() throws IOException {
        return new DFSClient(fileSystemUri,conf);
      }
    }
);
  }
  public DFSClient getClient() throws IOException, URISyntaxException {
    if (client == null) {
      LOG.info("Connecting to namenode at {}",fileSystemUri);
      client=new DFSClient(fileSystemUri,conf);
    }
    return client;
  }
  public String getConfSuffix(){
    String suffix=nameserviceId;
    if (highAvailability) {
      suffix+="." + namenodeId;
    }
    return suffix;
  }
  public Configuration getConf(){
    return conf;
  }
}
