public class TestProportionalCapacityPreemptionPolicyMockFramework extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Test public void testBuilder() throws Exception {
    String labelsConfig="=200,true;" + "red=100,false;" + "blue=200,true";
    String nodesConfig="n1=red;" + "n2=blue;" + "n3=";
    String queuesConfig="root(=[200 200 100 100],red=[100 100 100 100],blue=[200 200 200 200]);" + "-a(=[100 200 100 100],red=[0 0 0 0],blue=[200 200 200 200]);" + "--a1(=[50 100 50 100],red=[0 0 0 0],blue=[100 200 200 0]);"+ "--a2(=[50 200 50 0],red=[0 0 0 0],blue=[100 200 0 200]){priority=2};"+ "-b(=[100 200 0 0],red=[100 100 100 100],blue=[0 0 0 0]){priority=1,disable_preemption=true}";
    String appsConfig="a1\t" + "(1,1,n3,red,50,false);" + "a1\t"+ "(2,1,n2,,50,true)(2,1,n2,,50,false)"+ "(2,1,n2,blue,50,true)(2,1,n2,blue,50,true);"+ "a2\t"+ "(1,1,n3,red,50,false);"+ "b\t"+ "(1,1,n1,red,100,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    checkAbsCapacities(cs.getQueue("root"),"",1f,1f,0.5f);
    checkPendingResource(cs.getQueue("root"),"",100);
    checkAbsCapacities(cs.getQueue("root"),"red",1f,1f,1f);
    checkPendingResource(cs.getQueue("root"),"red",100);
    checkAbsCapacities(cs.getQueue("root"),"blue",1f,1f,1f);
    checkPendingResource(cs.getQueue("root"),"blue",200);
    checkPriority(cs.getQueue("root"),0);
    checkAbsCapacities(cs.getQueue("a"),"",0.5f,1f,0.5f);
    checkPendingResource(cs.getQueue("a"),"",100);
    checkAbsCapacities(cs.getQueue("a"),"red",0f,0f,0f);
    checkPendingResource(cs.getQueue("a"),"red",0);
    checkAbsCapacities(cs.getQueue("a"),"blue",1f,1f,1f);
    checkPendingResource(cs.getQueue("a"),"blue",200);
    checkPriority(cs.getQueue("a"),0);
    checkAbsCapacities(cs.getQueue("a1"),"",0.25f,0.5f,0.25f);
    checkPendingResource(cs.getQueue("a1"),"",100);
    checkAbsCapacities(cs.getQueue("a1"),"red",0f,0f,0f);
    checkPendingResource(cs.getQueue("a1"),"red",0);
    checkAbsCapacities(cs.getQueue("a1"),"blue",0.5f,1f,1f);
    checkPendingResource(cs.getQueue("a1"),"blue",0);
    checkPriority(cs.getQueue("a1"),0);
    checkAbsCapacities(cs.getQueue("a2"),"",0.25f,1f,0.25f);
    checkPendingResource(cs.getQueue("a2"),"",0);
    checkAbsCapacities(cs.getQueue("a2"),"red",0f,0f,0f);
    checkPendingResource(cs.getQueue("a2"),"red",0);
    checkAbsCapacities(cs.getQueue("a2"),"blue",0.5f,1f,0f);
    checkPendingResource(cs.getQueue("a2"),"blue",200);
    checkPriority(cs.getQueue("a2"),2);
    Assert.assertFalse(cs.getQueue("a2").getPreemptionDisabled());
    checkAbsCapacities(cs.getQueue("b"),"",0.5f,1f,0f);
    checkPendingResource(cs.getQueue("b"),"",0);
    checkAbsCapacities(cs.getQueue("b"),"red",1f,1f,1f);
    checkPendingResource(cs.getQueue("b"),"red",100);
    checkAbsCapacities(cs.getQueue("b"),"blue",0f,0f,0f);
    checkPendingResource(cs.getQueue("b"),"blue",0);
    checkPriority(cs.getQueue("b"),1);
    Assert.assertTrue(cs.getQueue("b").getPreemptionDisabled());
    Assert.assertEquals(100,((LeafQueue)cs.getQueue("a1")).getIgnoreExclusivityRMContainers().get("blue").size());
    Assert.assertEquals(2,((LeafQueue)cs.getQueue("a1")).getApplications().size());
    Assert.assertEquals(1,((LeafQueue)cs.getQueue("a2")).getApplications().size());
    Assert.assertEquals(1,((LeafQueue)cs.getQueue("b")).getApplications().size());
    FiCaSchedulerApp app1=getApp("a1",1);
    FiCaSchedulerApp app2=getApp("a1",2);
    FiCaSchedulerApp app3=getApp("a2",3);
    FiCaSchedulerApp app4=getApp("b",4);
    Assert.assertEquals(50,app1.getLiveContainers().size());
    checkContainerNodesInApp(app1,50,"n3");
    Assert.assertEquals(50,app2.getLiveContainers().size());
    Assert.assertEquals(150,app2.getReservedContainers().size());
    checkContainerNodesInApp(app2,200,"n2");
    Assert.assertEquals(50,app3.getLiveContainers().size());
    checkContainerNodesInApp(app3,50,"n3");
    Assert.assertEquals(100,app4.getLiveContainers().size());
    checkContainerNodesInApp(app4,100,"n1");
  }
  @Test public void testBuilderWithReservedResource() throws Exception {
    String labelsConfig="=200,true;" + "red=100,false;" + "blue=200,true";
    String nodesConfig="n1=red;" + "n2=blue;" + "n3=";
    String queuesConfig="root(=[200 200 100 100 100],red=[100 100 100 100 90],blue=[200 200 200 200 80]);" + "-a(=[100 200 100 100 50],red=[0 0 0 0 40],blue=[200 200 200 200 30]);" + "--a1(=[50 100 50 100 40],red=[0 0 0 0 20],blue=[100 200 200 0]);"+ "--a2(=[50 200 50 0 10],red=[0 0 0 0 20],blue=[100 200 0 200]);"+ "-b(=[100 200 0 0],red=[100 100 100 100],blue=[0 0 0 0])";
    String appsConfig="a1\t" + "(1,1,n3,red,50,false);" + "a1\t"+ "(2,1,n2,,50,true)(2,1,n2,,50,false)"+ "(2,1,n2,blue,50,true)(2,1,n2,blue,50,true);"+ "a2\t"+ "(1,1,n3,red,50,false);"+ "b\t"+ "(1,1,n1,red,100,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    checkReservedResource(cs.getQueue("root"),"",100);
    checkReservedResource(cs.getQueue("root"),"red",90);
    checkReservedResource(cs.getQueue("a"),"",50);
    checkReservedResource(cs.getQueue("a"),"red",40);
    checkReservedResource(cs.getQueue("a1"),"",40);
    checkReservedResource(cs.getQueue("a1"),"red",20);
    checkReservedResource(cs.getQueue("b"),"",0);
    checkReservedResource(cs.getQueue("b"),"red",0);
  }
  @Test public void testBuilderWithSpecifiedNodeResources() throws Exception {
    String labelsConfig="=200,true;" + "red=100,false;" + "blue=200,true";
    String nodesConfig="n1=red res=100;" + "n2=blue;" + "n3= res=30";
    String queuesConfig="root(=[200 200 100 100 100],red=[100 100 100 100 90],blue=[200 200 200 200 80]);" + "-a(=[100 200 100 100 50],red=[0 0 0 0 40],blue=[200 200 200 200 30]);" + "--a1(=[50 100 50 100 40],red=[0 0 0 0 20],blue=[100 200 200 0]);"+ "--a2(=[50 200 50 0 10],red=[0 0 0 0 20],blue=[100 200 0 200]);"+ "-b(=[100 200 0 0],red=[100 100 100 100],blue=[0 0 0 0])";
    String appsConfig="a1\t" + "(1,1,n3,red,50,false);" + "a1\t"+ "(2,1,n2,,50,true)(2,1,n2,,50,false)"+ "(2,1,n2,blue,50,true)(2,1,n2,blue,50,true);"+ "a2\t"+ "(1,1,n3,red,50,false);"+ "b\t"+ "(1,1,n1,red,100,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    Assert.assertEquals(3,this.cs.getAllNodes().size());
    SchedulerNode node1=cs.getSchedulerNode(NodeId.newInstance("n1",1));
    Assert.assertEquals(100,node1.getTotalResource().getMemorySize());
    Assert.assertEquals(100,node1.getCopiedListOfRunningContainers().size());
    Assert.assertNull(node1.getReservedContainer());
    SchedulerNode node2=cs.getSchedulerNode(NodeId.newInstance("n2",1));
    Assert.assertEquals(0,node2.getTotalResource().getMemorySize());
    Assert.assertEquals(50,node2.getCopiedListOfRunningContainers().size());
    Assert.assertNotNull(node2.getReservedContainer());
    SchedulerNode node3=cs.getSchedulerNode(NodeId.newInstance("n3",1));
    Assert.assertEquals(30,node3.getTotalResource().getMemorySize());
    Assert.assertEquals(100,node3.getCopiedListOfRunningContainers().size());
    Assert.assertNull(node3.getReservedContainer());
  }
}
