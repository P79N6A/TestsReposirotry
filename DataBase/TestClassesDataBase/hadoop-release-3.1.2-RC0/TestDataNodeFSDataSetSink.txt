public class TestDataNodeFSDataSetSink {
  private static final MetricsSystemImpl ms=new MetricsSystemImpl("TestFSDataSet");
class FSDataSetSinkTest implements MetricsSink {
    private Set<String> nameMap;
    private int count;
    /** 
 * add a metrics record in the sink
 * @param record the record to add
 */
    @Override public void putMetrics(    MetricsRecord record){
      if (count == 0) {
        for (        AbstractMetric m : record.metrics()) {
          if (nameMap.contains(m.name())) {
            count++;
          }
        }
        for (        MetricsTag t : record.tags()) {
          if (nameMap.contains(t.name())) {
            count++;
          }
        }
      }
    }
    /** 
 * Flush any buffered metrics
 */
    @Override public void flush(){
    }
    /** 
 * Initialize the plugin
 * @param conf the configuration object for the plugin
 */
    @Override public void init(    SubsetConfiguration conf){
      nameMap=new TreeSet<>();
      nameMap.add("DfsUsed");
      nameMap.add("Capacity");
      nameMap.add("Remaining");
      nameMap.add("StorageInfo");
      nameMap.add("NumFailedVolumes");
      nameMap.add("LastVolumeFailureDate");
      nameMap.add("EstimatedCapacityLostTotal");
      nameMap.add("CacheUsed");
      nameMap.add("CacheCapacity");
      nameMap.add("NumBlocksCached");
      nameMap.add("NumBlocksFailedToCache");
      nameMap.add("NumBlocksFailedToUnCache");
      nameMap.add("Context");
      nameMap.add("Hostname");
    }
    public int getMapCount(){
      return nameMap.size();
    }
    public int getFoundKeyCount(){
      return count;
    }
  }
  @Test public void testFSDataSetMetrics() throws InterruptedException {
    Configuration conf=new HdfsConfiguration();
    String bpid="FSDatSetSink-Test";
    SimulatedFSDataset fsdataset=new SimulatedFSDataset(null,conf);
    fsdataset.addBlockPool(bpid,conf);
    FSDataSetSinkTest sink=new FSDataSetSinkTest();
    sink.init(null);
    ms.init("Test");
    ms.start();
    ms.register("FSDataSetSource","FSDataSetSource",fsdataset);
    ms.register("FSDataSetSink","FSDataSetSink",sink);
    ms.startMetricsMBeans();
    ms.publishMetricsNow();
    Thread.sleep(4000);
    ms.stopMetricsMBeans();
    ms.shutdown();
    assertEquals(sink.getMapCount(),sink.getFoundKeyCount());
  }
}
