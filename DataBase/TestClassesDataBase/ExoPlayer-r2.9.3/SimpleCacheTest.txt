/** 
 * Unit tests for  {@link SimpleCache}.
 */
@RunWith(RobolectricTestRunner.class) public class SimpleCacheTest {
  private static final String KEY_1="key1";
  private static final String KEY_2="key2";
  private File cacheDir;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    cacheDir=Util.createTempDirectory(RuntimeEnvironment.application,"ExoPlayerTest");
  }
  @After public void tearDown() throws Exception {
    Util.recursiveDelete(cacheDir);
  }
  @Test public void testCommittingOneFile() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    assertThat(cacheSpan1.isCached).isFalse();
    assertThat(cacheSpan1.isOpenEnded()).isTrue();
    assertThat(simpleCache.startReadWriteNonBlocking(KEY_1,0)).isNull();
    NavigableSet<CacheSpan> cachedSpans=simpleCache.getCachedSpans(KEY_1);
    assertThat(cachedSpans.isEmpty()).isTrue();
    assertThat(simpleCache.getCacheSpace()).isEqualTo(0);
    assertThat(cacheDir.listFiles()).hasLength(0);
    addCache(simpleCache,KEY_1,0,15);
    Set<String> cachedKeys=simpleCache.getKeys();
    assertThat(cachedKeys).containsExactly(KEY_1);
    cachedSpans=simpleCache.getCachedSpans(KEY_1);
    assertThat(cachedSpans).contains(cacheSpan1);
    assertThat(simpleCache.getCacheSpace()).isEqualTo(15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    CacheSpan cacheSpan2=simpleCache.startReadWrite(KEY_1,0);
    assertThat(cacheSpan2.isCached).isTrue();
    assertThat(cacheSpan2.isOpenEnded()).isFalse();
    assertThat(cacheSpan2.length).isEqualTo(15);
    assertCachedDataReadCorrect(cacheSpan2);
  }
  @Test public void testReadCacheWithoutReleasingWriteCacheSpan() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    CacheSpan cacheSpan2=simpleCache.startReadWrite(KEY_1,0);
    assertCachedDataReadCorrect(cacheSpan2);
    simpleCache.releaseHoleSpan(cacheSpan1);
  }
  @Test public void testSetGetLength() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    assertThat(simpleCache.getContentLength(KEY_1)).isEqualTo(LENGTH_UNSET);
    simpleCache.setContentLength(KEY_1,15);
    assertThat(simpleCache.getContentLength(KEY_1)).isEqualTo(15);
    simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.setContentLength(KEY_1,150);
    assertThat(simpleCache.getContentLength(KEY_1)).isEqualTo(150);
    addCache(simpleCache,KEY_1,140,10);
    simpleCache.release();
    SimpleCache simpleCache2=getSimpleCache();
    assertThat(simpleCache2.getContentLength(KEY_1)).isEqualTo(150);
    SimpleCacheSpan lastSpan=simpleCache2.startReadWrite(KEY_1,145);
    simpleCache2.removeSpan(lastSpan);
    simpleCache2.release();
    simpleCache2=getSimpleCache();
    assertThat(simpleCache2.getContentLength(KEY_1)).isEqualTo(150);
  }
  @Test public void testReloadCache() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    simpleCache.release();
    simpleCache=getSimpleCache();
    CacheSpan cacheSpan2=simpleCache.startReadWrite(KEY_1,0);
    assertCachedDataReadCorrect(cacheSpan2);
  }
  @Test public void testReloadCacheWithoutRelease() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    CacheSpan cacheSpan2=simpleCache.startReadWrite(KEY_2,0);
    addCache(simpleCache,KEY_2,0,15);
    simpleCache.releaseHoleSpan(cacheSpan2);
    simpleCache.removeSpan(simpleCache.getCachedSpans(KEY_2).first());
    File cacheDir2=Util.createTempFile(RuntimeEnvironment.application,"ExoPlayerTest");
    cacheDir2.delete();
    cacheDir.renameTo(cacheDir2);
    simpleCache=new SimpleCache(cacheDir2,new NoOpCacheEvictor());
    CacheSpan cacheSpan3=simpleCache.startReadWrite(KEY_1,0);
    assertCachedDataReadCorrect(cacheSpan3);
    assertThat(simpleCache.getCachedSpans(KEY_2)).isEmpty();
    Util.recursiveDelete(cacheDir2);
  }
  @Test public void testEncryptedIndex() throws Exception {
    byte[] key="Bar12345Bar12345".getBytes(C.UTF8_NAME);
    SimpleCache simpleCache=getEncryptedSimpleCache(key);
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    simpleCache.release();
    simpleCache=getEncryptedSimpleCache(key);
    CacheSpan cacheSpan2=simpleCache.startReadWrite(KEY_1,0);
    assertCachedDataReadCorrect(cacheSpan2);
  }
  @Test public void testEncryptedIndexWrongKey() throws Exception {
    byte[] key="Bar12345Bar12345".getBytes(C.UTF8_NAME);
    SimpleCache simpleCache=getEncryptedSimpleCache(key);
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    simpleCache.release();
    byte[] key2="Foo12345Foo12345".getBytes(C.UTF8_NAME);
    simpleCache=getEncryptedSimpleCache(key2);
    assertThat(simpleCache.getKeys()).isEmpty();
    assertThat(cacheDir.listFiles()).hasLength(0);
  }
  @Test public void testEncryptedIndexLostKey() throws Exception {
    byte[] key="Bar12345Bar12345".getBytes(C.UTF8_NAME);
    SimpleCache simpleCache=getEncryptedSimpleCache(key);
    CacheSpan cacheSpan1=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    simpleCache.releaseHoleSpan(cacheSpan1);
    simpleCache.release();
    simpleCache=getSimpleCache();
    assertThat(simpleCache.getKeys()).isEmpty();
    assertThat(cacheDir.listFiles()).hasLength(0);
  }
  @Test public void testGetCachedLength() throws Exception {
    SimpleCache simpleCache=getSimpleCache();
    CacheSpan cacheSpan=simpleCache.startReadWrite(KEY_1,0);
    assertThat(simpleCache.getCachedLength(KEY_1,0,100)).isEqualTo(-100);
    assertThat(simpleCache.getCachedLength(KEY_1,20,100)).isEqualTo(-100);
    addCache(simpleCache,KEY_1,0,15);
    assertThat(simpleCache.getCachedLength(KEY_1,0,100)).isEqualTo(15);
    assertThat(simpleCache.getCachedLength(KEY_1,0,10)).isEqualTo(10);
    addCache(simpleCache,KEY_1,15,35);
    assertThat(simpleCache.getCachedLength(KEY_1,0,100)).isEqualTo(50);
    addCache(simpleCache,KEY_1,60,10);
    assertThat(simpleCache.getCachedLength(KEY_1,0,100)).isEqualTo(50);
    assertThat(simpleCache.getCachedLength(KEY_1,55,100)).isEqualTo(-5);
    simpleCache.releaseHoleSpan(cacheSpan);
  }
  @Test public void testExceptionDuringEvictionByLeastRecentlyUsedCacheEvictorNotHang() throws Exception {
    CachedContentIndex index=Mockito.spy(new CachedContentIndex(cacheDir));
    SimpleCache simpleCache=new SimpleCache(cacheDir,new LeastRecentlyUsedCacheEvictor(20),index);
    CacheSpan cacheSpan=simpleCache.startReadWrite(KEY_1,0);
    addCache(simpleCache,KEY_1,0,15);
    doAnswer(invocation -> {
      throw new CacheException("SimpleCacheTest");
    }
).when(index).store();
    try {
      addCache(simpleCache,KEY_1,15,15);
      assertWithMessage("Exception was expected").fail();
    }
 catch (    CacheException e) {
    }
    simpleCache.releaseHoleSpan(cacheSpan);
    NavigableSet<CacheSpan> cachedSpans=simpleCache.getCachedSpans(KEY_1);
    assertThat(cachedSpans).isNotEmpty();
    assertThat(cachedSpans).hasSize(1);
    assertThat(cachedSpans.pollFirst().position).isEqualTo(15);
  }
  @Test public void testUsingReleasedSimpleCacheThrowsException() throws Exception {
    SimpleCache simpleCache=new SimpleCache(cacheDir,new NoOpCacheEvictor());
    simpleCache.release();
    try {
      simpleCache.startReadWriteNonBlocking(KEY_1,0);
      assertWithMessage("Exception was expected").fail();
    }
 catch (    RuntimeException e) {
    }
  }
  @Test public void testMultipleSimpleCacheWithSameCacheDirThrowsException() throws Exception {
    new SimpleCache(cacheDir,new NoOpCacheEvictor());
    try {
      new SimpleCache(cacheDir,new NoOpCacheEvictor());
      assertWithMessage("Exception was expected").fail();
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void testMultipleSimpleCacheWithSameCacheDirDoesNotThrowsExceptionAfterRelease() throws Exception {
    SimpleCache simpleCache=new SimpleCache(cacheDir,new NoOpCacheEvictor());
    simpleCache.release();
    new SimpleCache(cacheDir,new NoOpCacheEvictor());
  }
  private SimpleCache getSimpleCache(){
    return new SimpleCache(cacheDir,new NoOpCacheEvictor());
  }
  private SimpleCache getEncryptedSimpleCache(  byte[] secretKey){
    return new SimpleCache(cacheDir,new NoOpCacheEvictor(),secretKey);
  }
  private static void addCache(  SimpleCache simpleCache,  String key,  int position,  int length) throws IOException {
    File file=simpleCache.startFile(key,position,length);
    FileOutputStream fos=new FileOutputStream(file);
    try {
      fos.write(generateData(key,position,length));
    }
  finally {
      fos.close();
    }
    simpleCache.commitFile(file);
  }
  private static void assertCachedDataReadCorrect(  CacheSpan cacheSpan) throws IOException {
    assertThat(cacheSpan.isCached).isTrue();
    byte[] expected=generateData(cacheSpan.key,(int)cacheSpan.position,(int)cacheSpan.length);
    FileInputStream inputStream=new FileInputStream(cacheSpan.file);
    try {
      assertThat(toByteArray(inputStream)).isEqualTo(expected);
    }
  finally {
      inputStream.close();
    }
  }
  private static byte[] generateData(  String key,  int position,  int length){
    byte[] bytes=new byte[length];
    new Random((long)(key.hashCode() ^ position)).nextBytes(bytes);
    return bytes;
  }
}
