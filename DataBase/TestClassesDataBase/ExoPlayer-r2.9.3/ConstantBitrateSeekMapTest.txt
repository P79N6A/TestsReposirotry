/** 
 * Unit test for  {@link ConstantBitrateSeekMap}. 
 */
@RunWith(RobolectricTestRunner.class) public final class ConstantBitrateSeekMapTest {
  private ConstantBitrateSeekMap constantBitrateSeekMap;
  @Test public void testIsSeekable_forKnownInputLength_returnSeekable(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(1000,0,8_000,100);
    assertThat(constantBitrateSeekMap.isSeekable()).isTrue();
  }
  @Test public void testIsSeekable_forUnknownInputLength_returnUnseekable(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(C.LENGTH_UNSET,0,8_000,100);
    assertThat(constantBitrateSeekMap.isSeekable()).isFalse();
  }
  @Test public void testGetSeekPoints_forUnseekableInput_returnSeekPoint0(){
    int firstBytePosition=100;
    constantBitrateSeekMap=new ConstantBitrateSeekMap(C.LENGTH_UNSET,firstBytePosition,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(123);
    assertThat(seekPoints.first.timeUs).isEqualTo(0);
    assertThat(seekPoints.first.position).isEqualTo(firstBytePosition);
    assertThat(seekPoints.second).isEqualTo(seekPoints.first);
  }
  @Test public void testGetDurationUs_forKnownInputLength_returnCorrectDuration(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(2_200_000);
  }
  @Test public void testGetDurationUs_forUnnnownInputLength_returnUnknownDuration(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(C.LENGTH_UNSET,100,8_000,100);
    assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(C.TIME_UNSET);
  }
  @Test public void testGetSeekPoints_forSeekableInput_forSyncPosition0_return1SeekPoint(){
    int firstBytePosition=100;
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,firstBytePosition,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(0);
    assertThat(seekPoints.first.timeUs).isEqualTo(0);
    assertThat(seekPoints.first.position).isEqualTo(firstBytePosition);
    assertThat(seekPoints.second).isEqualTo(seekPoints.first);
  }
  @Test public void testGetSeekPoints_forSeekableInput_forSeekPointAtSyncPosition_return1SeekPoint(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(1_200_000);
    assertThat(seekPoints.first.timeUs).isEqualTo(1_200_000);
    assertThat(seekPoints.first.position).isEqualTo(1300);
    assertThat(seekPoints.second).isEqualTo(seekPoints.first);
  }
  @Test public void testGetSeekPoints_forSeekableInput_forNonSyncSeekPosition_return2SeekPoints(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(345_678);
    assertThat(seekPoints.first.timeUs).isEqualTo(300_000);
    assertThat(seekPoints.first.position).isEqualTo(400);
    assertThat(seekPoints.second.timeUs).isEqualTo(400_000);
    assertThat(seekPoints.second.position).isEqualTo(500);
  }
  @Test public void testGetSeekPoints_forSeekableInput_forSeekPointWithinLastFrame_return1SeekPoint(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(2_123_456);
    assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000);
    assertThat(seekPoints.first.position).isEqualTo(2_200);
    assertThat(seekPoints.second).isEqualTo(seekPoints.first);
  }
  @Test public void testGetSeekPoints_forSeekableInput_forSeekPointAtEndOfStream_return1SeekPoint(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    SeekMap.SeekPoints seekPoints=constantBitrateSeekMap.getSeekPoints(2_200_000);
    assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000);
    assertThat(seekPoints.first.position).isEqualTo(2_200);
    assertThat(seekPoints.second).isEqualTo(seekPoints.first);
  }
  @Test public void testGetTimeUsAtPosition_forPosition0_return0(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    long timeUs=constantBitrateSeekMap.getTimeUsAtPosition(0);
    assertThat(timeUs).isEqualTo(0);
  }
  @Test public void testGetTimeUsAtPosition_forPositionWithinStream_returnCorrectTime(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    long timeUs=constantBitrateSeekMap.getTimeUsAtPosition(1234);
    assertThat(timeUs).isEqualTo(1_134_000);
  }
  @Test public void testGetTimeUsAtPosition_forPositionAtEndOfStream_returnStreamDuration(){
    constantBitrateSeekMap=new ConstantBitrateSeekMap(2_300,100,8_000,100);
    long timeUs=constantBitrateSeekMap.getTimeUsAtPosition(2300);
    assertThat(timeUs).isEqualTo(constantBitrateSeekMap.getDurationUs());
  }
}
