/** 
 * Tests downloaded DASH playbacks. 
 */
@RunWith(AndroidJUnit4.class) public final class DashDownloadTest {
  private static final String TAG="DashDownloadTest";
  private static final Uri MANIFEST_URI=Uri.parse(DashTestData.H264_MANIFEST);
  @Rule public ActivityTestRule<HostActivity> testRule=new ActivityTestRule<>(HostActivity.class);
  private DashTestRunner testRunner;
  private File tempFolder;
  private SimpleCache cache;
  private DefaultHttpDataSourceFactory httpDataSourceFactory;
  private CacheDataSourceFactory offlineDataSourceFactory;
  @Before public void setUp() throws Exception {
    testRunner=new DashTestRunner(TAG,testRule.getActivity(),getInstrumentation()).setManifestUrl(DashTestData.H264_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_CDD_FIXED);
    tempFolder=Util.createTempDirectory(testRule.getActivity(),"ExoPlayerTest");
    cache=new SimpleCache(tempFolder,new NoOpCacheEvictor());
    httpDataSourceFactory=new DefaultHttpDataSourceFactory("ExoPlayer",null);
    offlineDataSourceFactory=new CacheDataSourceFactory(cache,DummyDataSource.FACTORY,CacheDataSource.FLAG_BLOCK_ON_CACHE);
  }
  @After public void tearDown(){
    testRunner=null;
    Util.recursiveDelete(tempFolder);
    cache=null;
  }
  @Test public void testDownload() throws Exception {
    if (Util.SDK_INT < 16) {
      return;
    }
    DashDownloader dashDownloader=downloadContent();
    dashDownloader.download();
    testRunner.setStreamName("test_h264_fixed_download").setDataSourceFactory(offlineDataSourceFactory).run();
    dashDownloader.remove();
    assertWithMessage("There should be no cache key left").that(cache.getKeys()).isEmpty();
    assertWithMessage("There should be no content left").that(cache.getCacheSpace()).isEqualTo(0);
  }
  private DashDownloader downloadContent() throws Exception {
    DashManifest dashManifest=DashUtil.loadManifest(httpDataSourceFactory.createDataSource(),MANIFEST_URI);
    ArrayList<StreamKey> keys=new ArrayList<>();
    for (int pIndex=0; pIndex < dashManifest.getPeriodCount(); pIndex++) {
      List<AdaptationSet> adaptationSets=dashManifest.getPeriod(pIndex).adaptationSets;
      for (int aIndex=0; aIndex < adaptationSets.size(); aIndex++) {
        AdaptationSet adaptationSet=adaptationSets.get(aIndex);
        List<Representation> representations=adaptationSet.representations;
        for (int rIndex=0; rIndex < representations.size(); rIndex++) {
          String id=representations.get(rIndex).format.id;
          if (DashTestData.AAC_AUDIO_REPRESENTATION_ID.equals(id) || DashTestData.H264_CDD_FIXED.equals(id)) {
            keys.add(new StreamKey(pIndex,aIndex,rIndex));
          }
        }
      }
    }
    DownloaderConstructorHelper constructorHelper=new DownloaderConstructorHelper(cache,httpDataSourceFactory);
    return new DashDownloader(MANIFEST_URI,keys,constructorHelper);
  }
}
