/** 
 * Unit tests for  {@link DataSchemeDataSource}.
 */
@RunWith(RobolectricTestRunner.class) public final class DataSchemeDataSourceTest {
  private DataSource schemeDataDataSource;
  @Before public void setUp(){
    schemeDataDataSource=new DataSchemeDataSource();
  }
  @Test public void testBase64Data() throws IOException {
    DataSpec dataSpec=buildDataSpec("data:text/plain;base64,eyJwcm92aWRlciI6IndpZGV2aW5lX3Rlc3QiL" + "CJjb250ZW50X2lkIjoiTWpBeE5WOTBaV0Z5Y3c9PSIsImtleV9pZHMiOlsiMDAwMDAwMDAwMDAwMDAwMDAwMDAwM" + "DAwMDAwMDAwMDAiXX0=");
    DataSourceAsserts.assertDataSourceContent(schemeDataDataSource,dataSpec,Util.getUtf8Bytes("{\"provider\":\"widevine_test\",\"content_id\":\"MjAxNV90ZWFycw==\",\"key_ids\":" + "[\"00000000000000000000000000000000\"]}"));
  }
  @Test public void testAsciiData() throws IOException {
    DataSourceAsserts.assertDataSourceContent(schemeDataDataSource,buildDataSpec("data:,A%20brief%20note"),Util.getUtf8Bytes("A brief note"));
  }
  @Test public void testPartialReads() throws IOException {
    byte[] buffer=new byte[18];
    DataSpec dataSpec=buildDataSpec("data:,012345678901234567");
    assertThat(schemeDataDataSource.open(dataSpec)).isEqualTo(18);
    assertThat(schemeDataDataSource.read(buffer,0,9)).isEqualTo(9);
    assertThat(schemeDataDataSource.read(buffer,3,0)).isEqualTo(0);
    assertThat(schemeDataDataSource.read(buffer,9,15)).isEqualTo(9);
    assertThat(schemeDataDataSource.read(buffer,1,0)).isEqualTo(0);
    assertThat(schemeDataDataSource.read(buffer,1,1)).isEqualTo(RESULT_END_OF_INPUT);
    assertThat(Util.fromUtf8Bytes(buffer,0,18)).isEqualTo("012345678901234567");
  }
  @Test public void testIncorrectScheme(){
    try {
      schemeDataDataSource.open(buildDataSpec("http://www.google.com"));
      fail();
    }
 catch (    IOException e) {
    }
  }
  @Test public void testMalformedData(){
    try {
      schemeDataDataSource.open(buildDataSpec("data:text/plain;base64,,This%20is%20Content"));
      fail();
    }
 catch (    IOException e) {
    }
    try {
      schemeDataDataSource.open(buildDataSpec("data:text/plain;base64,IncorrectPadding=="));
      fail();
    }
 catch (    IOException e) {
    }
  }
  private static DataSpec buildDataSpec(  String uriString){
    return new DataSpec(Uri.parse(uriString));
  }
}
