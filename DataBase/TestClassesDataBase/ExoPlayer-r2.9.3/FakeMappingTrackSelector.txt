/** 
 * A  {@link MappingTrackSelector} that stashes the {@link MappedTrackInfo} passed to {@link #selectTracks(MappedTrackInfo,int[][][],int[])}.
 */
private static final class FakeMappingTrackSelector extends MappingTrackSelector {
  private MappedTrackInfo lastMappedTrackInfo;
  @Override protected Pair<RendererConfiguration[],TrackSelection[]> selectTracks(  MappedTrackInfo mappedTrackInfo,  int[][][] rendererFormatSupports,  int[] rendererMixedMimeTypeAdaptationSupports) throws ExoPlaybackException {
    int rendererCount=mappedTrackInfo.getRendererCount();
    lastMappedTrackInfo=mappedTrackInfo;
    return Pair.create(new RendererConfiguration[rendererCount],new TrackSelection[rendererCount]);
  }
  public void assertMappedTrackGroups(  int rendererIndex,  TrackGroup... expected){
    TrackGroupArray rendererTrackGroupArray=lastMappedTrackInfo.getTrackGroups(rendererIndex);
    assertThat(rendererTrackGroupArray.length).isEqualTo(expected.length);
    for (int i=0; i < expected.length; i++) {
      assertThat(rendererTrackGroupArray.get(i)).isEqualTo(expected[i]);
    }
  }
}
