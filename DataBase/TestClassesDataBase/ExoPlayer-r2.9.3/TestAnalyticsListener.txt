private static final class TestAnalyticsListener implements AnalyticsListener {
  public Timeline lastReportedTimeline;
  private final ArrayList<ReportedEvent> reportedEvents;
  public TestAnalyticsListener(){
    reportedEvents=new ArrayList<>();
    lastReportedTimeline=Timeline.EMPTY;
  }
  public List<EventWindowAndPeriodId> getEvents(  int eventType){
    ArrayList<EventWindowAndPeriodId> eventTimes=new ArrayList<>();
    Iterator<ReportedEvent> eventIterator=reportedEvents.iterator();
    while (eventIterator.hasNext()) {
      ReportedEvent event=eventIterator.next();
      if (event.eventType == eventType) {
        eventTimes.add(event.eventWindowAndPeriodId);
        eventIterator.remove();
      }
    }
    return eventTimes;
  }
  public void assertNoMoreEvents(){
    assertThat(reportedEvents).isEmpty();
  }
  @Override public void onPlayerStateChanged(  EventTime eventTime,  boolean playWhenReady,  int playbackState){
    reportedEvents.add(new ReportedEvent(EVENT_PLAYER_STATE_CHANGED,eventTime));
  }
  @Override public void onTimelineChanged(  EventTime eventTime,  int reason){
    lastReportedTimeline=eventTime.timeline;
    reportedEvents.add(new ReportedEvent(EVENT_TIMELINE_CHANGED,eventTime));
  }
  @Override public void onPositionDiscontinuity(  EventTime eventTime,  int reason){
    reportedEvents.add(new ReportedEvent(EVENT_POSITION_DISCONTINUITY,eventTime));
  }
  @Override public void onSeekStarted(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_SEEK_STARTED,eventTime));
  }
  @Override public void onSeekProcessed(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_SEEK_PROCESSED,eventTime));
  }
  @Override public void onPlaybackParametersChanged(  EventTime eventTime,  PlaybackParameters playbackParameters){
    reportedEvents.add(new ReportedEvent(EVENT_PLAYBACK_PARAMETERS_CHANGED,eventTime));
  }
  @Override public void onRepeatModeChanged(  EventTime eventTime,  int repeatMode){
    reportedEvents.add(new ReportedEvent(EVENT_REPEAT_MODE_CHANGED,eventTime));
  }
  @Override public void onShuffleModeChanged(  EventTime eventTime,  boolean shuffleModeEnabled){
    reportedEvents.add(new ReportedEvent(EVENT_SHUFFLE_MODE_CHANGED,eventTime));
  }
  @Override public void onLoadingChanged(  EventTime eventTime,  boolean isLoading){
    reportedEvents.add(new ReportedEvent(EVENT_LOADING_CHANGED,eventTime));
  }
  @Override public void onPlayerError(  EventTime eventTime,  ExoPlaybackException error){
    reportedEvents.add(new ReportedEvent(EVENT_PLAYER_ERROR,eventTime));
  }
  @Override public void onTracksChanged(  EventTime eventTime,  TrackGroupArray trackGroups,  TrackSelectionArray trackSelections){
    reportedEvents.add(new ReportedEvent(EVENT_TRACKS_CHANGED,eventTime));
  }
  @Override public void onLoadStarted(  EventTime eventTime,  LoadEventInfo loadEventInfo,  MediaLoadData mediaLoadData){
    reportedEvents.add(new ReportedEvent(EVENT_LOAD_STARTED,eventTime));
  }
  @Override public void onLoadCompleted(  EventTime eventTime,  LoadEventInfo loadEventInfo,  MediaLoadData mediaLoadData){
    reportedEvents.add(new ReportedEvent(EVENT_LOAD_COMPLETED,eventTime));
  }
  @Override public void onLoadCanceled(  EventTime eventTime,  LoadEventInfo loadEventInfo,  MediaLoadData mediaLoadData){
    reportedEvents.add(new ReportedEvent(EVENT_LOAD_CANCELED,eventTime));
  }
  @Override public void onLoadError(  EventTime eventTime,  LoadEventInfo loadEventInfo,  MediaLoadData mediaLoadData,  IOException error,  boolean wasCanceled){
    reportedEvents.add(new ReportedEvent(EVENT_LOAD_ERROR,eventTime));
  }
  @Override public void onDownstreamFormatChanged(  EventTime eventTime,  MediaLoadData mediaLoadData){
    reportedEvents.add(new ReportedEvent(EVENT_DOWNSTREAM_FORMAT_CHANGED,eventTime));
  }
  @Override public void onUpstreamDiscarded(  EventTime eventTime,  MediaLoadData mediaLoadData){
    reportedEvents.add(new ReportedEvent(EVENT_UPSTREAM_DISCARDED,eventTime));
  }
  @Override public void onMediaPeriodCreated(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_MEDIA_PERIOD_CREATED,eventTime));
  }
  @Override public void onMediaPeriodReleased(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_MEDIA_PERIOD_RELEASED,eventTime));
  }
  @Override public void onReadingStarted(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_READING_STARTED,eventTime));
  }
  @Override public void onBandwidthEstimate(  EventTime eventTime,  int totalLoadTimeMs,  long totalBytesLoaded,  long bitrateEstimate){
    reportedEvents.add(new ReportedEvent(EVENT_BANDWIDTH_ESTIMATE,eventTime));
  }
  @Override public void onSurfaceSizeChanged(  EventTime eventTime,  int width,  int height){
    reportedEvents.add(new ReportedEvent(EVENT_SURFACE_SIZE_CHANGED,eventTime));
  }
  @Override public void onMetadata(  EventTime eventTime,  Metadata metadata){
    reportedEvents.add(new ReportedEvent(EVENT_METADATA,eventTime));
  }
  @Override public void onDecoderEnabled(  EventTime eventTime,  int trackType,  DecoderCounters decoderCounters){
    reportedEvents.add(new ReportedEvent(EVENT_DECODER_ENABLED,eventTime));
  }
  @Override public void onDecoderInitialized(  EventTime eventTime,  int trackType,  String decoderName,  long initializationDurationMs){
    reportedEvents.add(new ReportedEvent(EVENT_DECODER_INIT,eventTime));
  }
  @Override public void onDecoderInputFormatChanged(  EventTime eventTime,  int trackType,  Format format){
    reportedEvents.add(new ReportedEvent(EVENT_DECODER_FORMAT_CHANGED,eventTime));
  }
  @Override public void onDecoderDisabled(  EventTime eventTime,  int trackType,  DecoderCounters decoderCounters){
    reportedEvents.add(new ReportedEvent(EVENT_DECODER_DISABLED,eventTime));
  }
  @Override public void onAudioSessionId(  EventTime eventTime,  int audioSessionId){
    reportedEvents.add(new ReportedEvent(EVENT_AUDIO_SESSION_ID,eventTime));
  }
  @Override public void onAudioUnderrun(  EventTime eventTime,  int bufferSize,  long bufferSizeMs,  long elapsedSinceLastFeedMs){
    reportedEvents.add(new ReportedEvent(EVENT_AUDIO_UNDERRUN,eventTime));
  }
  @Override public void onDroppedVideoFrames(  EventTime eventTime,  int droppedFrames,  long elapsedMs){
    reportedEvents.add(new ReportedEvent(EVENT_DROPPED_VIDEO_FRAMES,eventTime));
  }
  @Override public void onVideoSizeChanged(  EventTime eventTime,  int width,  int height,  int unappliedRotationDegrees,  float pixelWidthHeightRatio){
    reportedEvents.add(new ReportedEvent(EVENT_VIDEO_SIZE_CHANGED,eventTime));
  }
  @Override public void onRenderedFirstFrame(  EventTime eventTime,  Surface surface){
    reportedEvents.add(new ReportedEvent(EVENT_RENDERED_FIRST_FRAME,eventTime));
  }
  @Override public void onDrmSessionAcquired(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_SESSION_ACQUIRED,eventTime));
  }
  @Override public void onDrmKeysLoaded(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_KEYS_LOADED,eventTime));
  }
  @Override public void onDrmSessionManagerError(  EventTime eventTime,  Exception error){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_ERROR,eventTime));
  }
  @Override public void onDrmKeysRestored(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_KEYS_RESTORED,eventTime));
  }
  @Override public void onDrmKeysRemoved(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_KEYS_REMOVED,eventTime));
  }
  @Override public void onDrmSessionReleased(  EventTime eventTime){
    reportedEvents.add(new ReportedEvent(EVENT_DRM_SESSION_RELEASED,eventTime));
  }
private static final class ReportedEvent {
    public final int eventType;
    public final EventWindowAndPeriodId eventWindowAndPeriodId;
    public ReportedEvent(    int eventType,    EventTime eventTime){
      this.eventType=eventType;
      this.eventWindowAndPeriodId=new EventWindowAndPeriodId(eventTime.windowIndex,eventTime.mediaPeriodId);
    }
  }
}
