/** 
 * Playback tests using  {@link LibvpxVideoRenderer}. 
 */
@RunWith(AndroidJUnit4.class) public class VpxPlaybackTest {
  private static final String BEAR_URI="asset:///bear-vp9.webm";
  private static final String BEAR_ODD_DIMENSIONS_URI="asset:///bear-vp9-odd-dimensions.webm";
  private static final String ROADTRIP_10BIT_URI="asset:///roadtrip-vp92-10bit.webm";
  private static final String INVALID_BITSTREAM_URI="asset:///invalid-bitstream.webm";
  private static final String TAG="VpxPlaybackTest";
  @Before public void setUp(){
    if (!VpxLibrary.isAvailable()) {
      fail("Vpx library not available.");
    }
  }
  @Test public void testBasicPlayback() throws Exception {
    playUri(BEAR_URI);
  }
  @Test public void testOddDimensionsPlayback() throws Exception {
    playUri(BEAR_ODD_DIMENSIONS_URI);
  }
  @Test public void test10BitProfile2Playback() throws Exception {
    if (VpxLibrary.isHighBitDepthSupported()) {
      Log.d(TAG,"High Bit Depth supported.");
      playUri(ROADTRIP_10BIT_URI);
      return;
    }
    Log.d(TAG,"High Bit Depth not supported.");
  }
  @Test public void testInvalidBitstream(){
    try {
      playUri(INVALID_BITSTREAM_URI);
      fail();
    }
 catch (    Exception e) {
      assertThat(e.getCause()).isNotNull();
      assertThat(e.getCause()).isInstanceOf(VpxDecoderException.class);
    }
  }
  private void playUri(  String uri) throws Exception {
    TestPlaybackRunnable testPlaybackRunnable=new TestPlaybackRunnable(Uri.parse(uri),getContext());
    Thread thread=new Thread(testPlaybackRunnable);
    thread.start();
    thread.join();
    if (testPlaybackRunnable.playbackException != null) {
      throw testPlaybackRunnable.playbackException;
    }
  }
private static class TestPlaybackRunnable implements Player.EventListener, Runnable {
    private final Context context;
    private final Uri uri;
    private ExoPlayer player;
    private ExoPlaybackException playbackException;
    public TestPlaybackRunnable(    Uri uri,    Context context){
      this.uri=uri;
      this.context=context;
    }
    @Override public void run(){
      Looper.prepare();
      LibvpxVideoRenderer videoRenderer=new LibvpxVideoRenderer(true,0);
      DefaultTrackSelector trackSelector=new DefaultTrackSelector();
      player=ExoPlayerFactory.newInstance(new Renderer[]{videoRenderer},trackSelector);
      player.addListener(this);
      MediaSource mediaSource=new ExtractorMediaSource.Factory(new DefaultDataSourceFactory(context,"ExoPlayerExtVp9Test")).setExtractorsFactory(MatroskaExtractor.FACTORY).createMediaSource(uri);
      player.createMessage(videoRenderer).setType(LibvpxVideoRenderer.MSG_SET_OUTPUT_BUFFER_RENDERER).setPayload(new VpxVideoSurfaceView(context)).send();
      player.prepare(mediaSource);
      player.setPlayWhenReady(true);
      Looper.loop();
    }
    @Override public void onPlayerError(    ExoPlaybackException error){
      playbackException=error;
    }
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      if (playbackState == Player.STATE_ENDED || (playbackState == Player.STATE_IDLE && playbackException != null)) {
        player.release();
        Looper.myLooper().quit();
      }
    }
  }
}
