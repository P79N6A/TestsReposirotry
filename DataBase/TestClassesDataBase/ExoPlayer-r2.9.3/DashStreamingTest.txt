/** 
 * Tests DASH playbacks using  {@link ExoPlayer}. 
 */
@RunWith(AndroidJUnit4.class) public final class DashStreamingTest {
  private static final String TAG="DashStreamingTest";
  private static final ActionSchedule SEEKING_SCHEDULE=new ActionSchedule.Builder(TAG).waitForPlaybackState(Player.STATE_READY).delay(10000).seekAndWait(15000).delay(10000).seek(30000).seek(31000).seek(32000).seek(33000).seekAndWait(34000).delay(1000).pause().delay(1000).play().delay(1000).pause().seekAndWait(120000).delay(1000).play().build();
  private static final ActionSchedule RENDERER_DISABLING_SCHEDULE=new ActionSchedule.Builder(TAG).waitForPlaybackState(Player.STATE_READY).delay(10000).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).delay(10000).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).delay(10000).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).delay(10000).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).delay(10000).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX).delay(10000).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX).delay(10000).clearVideoSurface().delay(10000).setVideoSurface().delay(10000).seek(120000).build();
  @Rule public ActivityTestRule<HostActivity> testRule=new ActivityTestRule<>(HostActivity.class);
  private DashTestRunner testRunner;
  @Before public void setUp(){
    testRunner=new DashTestRunner(TAG,testRule.getActivity(),getInstrumentation());
  }
  @After public void tearDown(){
    testRunner=null;
  }
  @Test public void testH264Fixed(){
    if (Util.SDK_INT < 16) {
      return;
    }
    testRunner.setStreamName("test_h264_fixed").setManifestUrl(DashTestData.H264_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_CDD_FIXED).run();
  }
  @Test public void testH264Adaptive() throws DecoderQueryException {
    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    testRunner.setStreamName("test_h264_adaptive").setManifestUrl(DashTestData.H264_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_CDD_ADAPTIVE).run();
  }
  @Test public void testH264AdaptiveWithSeeking() throws DecoderQueryException {
    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    final String streamName="test_h264_adaptive_with_seeking";
    testRunner.setStreamName(streamName).setManifestUrl(DashTestData.H264_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_CDD_ADAPTIVE).run();
  }
  @Test public void testH264AdaptiveWithRendererDisabling() throws DecoderQueryException {
    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    final String streamName="test_h264_adaptive_with_renderer_disabling";
    testRunner.setStreamName(streamName).setManifestUrl(DashTestData.H264_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_CDD_ADAPTIVE).run();
  }
  @Test public void testH265FixedV23(){
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_h265_fixed").setManifestUrl(DashTestData.H265_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H265_CDD_FIXED).run();
  }
  @Test public void testH265AdaptiveV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_h265_adaptive").setManifestUrl(DashTestData.H265_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H265_CDD_ADAPTIVE).run();
  }
  @Test public void testH265AdaptiveWithSeekingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_h265_adaptive_with_seeking").setManifestUrl(DashTestData.H265_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H265_CDD_ADAPTIVE).run();
  }
  @Test public void testH265AdaptiveWithRendererDisablingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_h265_adaptive_with_renderer_disabling").setManifestUrl(DashTestData.H265_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H265_CDD_ADAPTIVE).run();
  }
  @Test public void testVp9Fixed360pV23(){
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_vp9_fixed_360p").setManifestUrl(DashTestData.VP9_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,DashTestData.VP9_CDD_FIXED).run();
  }
  @Test public void testVp9AdaptiveV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_vp9_adaptive").setManifestUrl(DashTestData.VP9_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,DashTestData.VP9_CDD_ADAPTIVE).run();
  }
  @Test public void testVp9AdaptiveWithSeekingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_vp9_adaptive_with_seeking").setManifestUrl(DashTestData.VP9_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,DashTestData.VP9_CDD_ADAPTIVE).run();
  }
  @Test public void testVp9AdaptiveWithRendererDisablingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_vp9_adaptive_with_renderer_disabling").setManifestUrl(DashTestData.VP9_MANIFEST).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,DashTestData.VP9_CDD_ADAPTIVE).run();
  }
  @Test public void test23FpsH264FixedV23(){
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_23fps_h264_fixed").setManifestUrl(DashTestData.H264_23_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void test24FpsH264FixedV23(){
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_24fps_h264_fixed").setManifestUrl(DashTestData.H264_24_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void test29FpsH264FixedV23(){
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_29fps_h264_fixed").setManifestUrl(DashTestData.H264_29_MANIFEST).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,DashTestData.H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void testWidevineH264FixedV18() throws DecoderQueryException {
    if (Util.SDK_INT < 18) {
      return;
    }
    testRunner.setStreamName("test_widevine_h264_fixed").setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_CDD_FIXED).run();
  }
  @Test public void testWidevineH264AdaptiveV18() throws DecoderQueryException {
    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    testRunner.setStreamName("test_widevine_h264_adaptive").setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineH264AdaptiveWithSeekingV18() throws DecoderQueryException {
    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    testRunner.setStreamName("test_widevine_h264_adaptive_with_seeking").setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineH264AdaptiveWithRendererDisablingV18() throws DecoderQueryException {
    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
      return;
    }
    testRunner.setStreamName("test_widevine_h264_adaptive_with_renderer_disabling").setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineH265FixedV23() throws DecoderQueryException {
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_widevine_h265_fixed").setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H265,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H265_CDD_FIXED).run();
  }
  @Test public void testWidevineH265AdaptiveV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_h265_adaptive").setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H265,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H265_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineH265AdaptiveWithSeekingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_h265_adaptive_with_seeking").setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H265,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H265_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineH265AdaptiveWithRendererDisablingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_h265_adaptive_with_renderer_disabling").setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H265,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H265_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineVp9Fixed360pV23() throws DecoderQueryException {
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_widevine_vp9_fixed_360p").setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_VP9,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_VP9_CDD_FIXED).run();
  }
  @Test public void testWidevineVp9AdaptiveV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_vp9_adaptive").setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_VP9,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(true).setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineVp9AdaptiveWithSeekingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_vp9_adaptive_with_seeking").setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_VP9,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(SEEKING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevineVp9AdaptiveWithRendererDisablingV24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    testRunner.setStreamName("test_widevine_vp9_adaptive_with_renderer_disabling").setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_VP9,true).setFullPlaybackNoSeeking(false).setCanIncludeAdditionalVideoFormats(true).setActionSchedule(RENDERER_DISABLING_SCHEDULE).setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE).run();
  }
  @Test public void testWidevine23FpsH264FixedV23() throws DecoderQueryException {
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_widevine_23fps_h264_fixed").setManifestUrl(DashTestData.WIDEVINE_H264_23_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void testWidevine24FpsH264FixedV23() throws DecoderQueryException {
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_widevine_24fps_h264_fixed").setManifestUrl(DashTestData.WIDEVINE_H264_24_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void testWidevine29FpsH264FixedV23() throws DecoderQueryException {
    if (Util.SDK_INT < 23) {
      return;
    }
    testRunner.setStreamName("test_widevine_29fps_h264_fixed").setManifestUrl(DashTestData.WIDEVINE_H264_29_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID).run();
  }
  @Test public void testDecoderInfoH264() throws DecoderQueryException {
    if (Util.SDK_INT < 16) {
      return;
    }
    MediaCodecInfo decoderInfo=MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H264,false);
    assertThat(decoderInfo).isNotNull();
    assertThat(Util.SDK_INT < 21 || decoderInfo.adaptive).isTrue();
  }
  @Test public void testDecoderInfoH265V24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    assertThat(MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H265,false).adaptive).isTrue();
  }
  @Test public void testDecoderInfoVP9V24() throws DecoderQueryException {
    if (Util.SDK_INT < 24) {
      return;
    }
    assertThat(MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_VP9,false).adaptive).isTrue();
  }
  private static boolean shouldSkipAdaptiveTest(  String mimeType) throws DecoderQueryException {
    MediaCodecInfo decoderInfo=MediaCodecUtil.getDecoderInfo(mimeType,false);
    return decoderInfo == null || !decoderInfo.adaptive;
  }
}
