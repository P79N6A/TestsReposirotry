/** 
 * Tests for  {@link ByteArrayUploadDataProvider}. 
 */
@RunWith(RobolectricTestRunner.class) public final class ByteArrayUploadDataProviderTest {
  private static final byte[] TEST_DATA=new byte[]{1,2,3,4,5,6,7,8,9,10};
  @Mock private UploadDataSink mockUploadDataSink;
  private ByteBuffer byteBuffer;
  private ByteArrayUploadDataProvider byteArrayUploadDataProvider;
  @Before public void setUp(){
    MockitoAnnotations.initMocks(this);
    byteBuffer=ByteBuffer.allocate(TEST_DATA.length);
    byteArrayUploadDataProvider=new ByteArrayUploadDataProvider(TEST_DATA);
  }
  @Test public void testGetLength(){
    assertThat(byteArrayUploadDataProvider.getLength()).isEqualTo(TEST_DATA.length);
  }
  @Test public void testReadFullBuffer() throws IOException {
    byteArrayUploadDataProvider.read(mockUploadDataSink,byteBuffer);
    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);
  }
  @Test public void testReadPartialBuffer() throws IOException {
    byte[] firstHalf=Arrays.copyOf(TEST_DATA,TEST_DATA.length / 2);
    byte[] secondHalf=Arrays.copyOfRange(TEST_DATA,TEST_DATA.length / 2,TEST_DATA.length);
    byteBuffer=ByteBuffer.allocate(TEST_DATA.length / 2);
    byteArrayUploadDataProvider.read(mockUploadDataSink,byteBuffer);
    assertThat(byteBuffer.array()).isEqualTo(firstHalf);
    byteBuffer.rewind();
    byteArrayUploadDataProvider.read(mockUploadDataSink,byteBuffer);
    assertThat(byteBuffer.array()).isEqualTo(secondHalf);
    verify(mockUploadDataSink,times(2)).onReadSucceeded(false);
  }
  @Test public void testRewind() throws IOException {
    byteArrayUploadDataProvider.read(mockUploadDataSink,byteBuffer);
    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);
    byteBuffer.clear();
    byteArrayUploadDataProvider.rewind(mockUploadDataSink);
    byteArrayUploadDataProvider.read(mockUploadDataSink,byteBuffer);
    assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);
    verify(mockUploadDataSink).onRewindSucceeded();
  }
}
