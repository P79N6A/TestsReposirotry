/** 
 * Unit test for  {@link PsDurationReader}. 
 */
@RunWith(RobolectricTestRunner.class) public final class PsDurationReaderTest {
  private PsDurationReader tsDurationReader;
  private PositionHolder seekPositionHolder;
  @Before public void setUp(){
    tsDurationReader=new PsDurationReader();
    seekPositionHolder=new PositionHolder();
  }
  @Test public void testIsDurationReadPending_returnFalseByDefault(){
    assertThat(tsDurationReader.isDurationReadFinished()).isFalse();
  }
  @Test public void testReadDuration_returnsCorrectDuration() throws IOException, InterruptedException {
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(TestUtil.getByteArray(RuntimeEnvironment.application,"ts/sample.ps")).build();
    int result=Extractor.RESULT_CONTINUE;
    while (!tsDurationReader.isDurationReadFinished()) {
      result=tsDurationReader.readDuration(input,seekPositionHolder);
      if (result == Extractor.RESULT_SEEK) {
        input.setPosition((int)seekPositionHolder.position);
      }
    }
    assertThat(result).isNotEqualTo(Extractor.RESULT_END_OF_INPUT);
    assertThat(tsDurationReader.getDurationUs()).isEqualTo(766);
  }
  @Test public void testReadDuration_midStream_returnsCorrectDuration() throws IOException, InterruptedException {
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(TestUtil.getByteArray(RuntimeEnvironment.application,"ts/sample.ps")).build();
    input.setPosition(1234);
    int result=Extractor.RESULT_CONTINUE;
    while (!tsDurationReader.isDurationReadFinished()) {
      result=tsDurationReader.readDuration(input,seekPositionHolder);
      if (result == Extractor.RESULT_SEEK) {
        input.setPosition((int)seekPositionHolder.position);
      }
    }
    assertThat(result).isNotEqualTo(Extractor.RESULT_END_OF_INPUT);
    assertThat(tsDurationReader.getDurationUs()).isEqualTo(766);
  }
}
