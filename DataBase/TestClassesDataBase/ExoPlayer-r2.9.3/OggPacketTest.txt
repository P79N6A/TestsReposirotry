/** 
 * Unit test for  {@link OggPacket}. 
 */
@RunWith(RobolectricTestRunner.class) public final class OggPacketTest {
  private static final String TEST_FILE="ogg/bear.opus";
  private Random random;
  private OggPacket oggPacket;
  @Before public void setUp() throws Exception {
    random=new Random(0);
    oggPacket=new OggPacket();
  }
  @Test public void testReadPacketsWithEmptyPage() throws Exception {
    byte[] firstPacket=TestUtil.buildTestData(8,random);
    byte[] secondPacket=TestUtil.buildTestData(272,random);
    byte[] thirdPacket=TestUtil.buildTestData(256,random);
    byte[] fourthPacket=TestUtil.buildTestData(271,random);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,0x01),TestUtil.createByteArray(0x08),firstPacket,OggTestData.buildOggHeader(0x00,16,1001,0x02),TestUtil.createByteArray(0xFF,0x11),secondPacket,OggTestData.buildOggHeader(0x00,16,1002,0x00),OggTestData.buildOggHeader(0x04,128,1003,0x04),TestUtil.createByteArray(0xFF,0x01,0xFF,0x10),thirdPacket,fourthPacket),true);
    assertReadPacket(input,firstPacket);
    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isTrue();
    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isFalse();
    assertThat(oggPacket.getPageHeader().type).isEqualTo(0x02);
    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 1);
    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(8);
    assertThat(oggPacket.getPageHeader().revision).isEqualTo(0x00);
    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(1);
    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1000);
    assertThat(oggPacket.getPageHeader().streamSerialNumber).isEqualTo(4096);
    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(0);
    assertReadPacket(input,secondPacket);
    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();
    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isFalse();
    assertThat(oggPacket.getPageHeader().type).isEqualTo(0);
    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 2);
    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(255 + 17);
    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(2);
    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1001);
    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(16);
    assertReadPacket(input,thirdPacket);
    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();
    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();
    assertThat(oggPacket.getPageHeader().type).isEqualTo(4);
    assertThat(oggPacket.getPageHeader().headerSize).isEqualTo(27 + 4);
    assertThat(oggPacket.getPageHeader().bodySize).isEqualTo(255 + 1 + 255+ 16);
    assertThat(oggPacket.getPageHeader().pageSegmentCount).isEqualTo(4);
    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1003);
    assertThat(oggPacket.getPageHeader().granulePosition).isEqualTo(128);
    assertReadPacket(input,fourthPacket);
    assertReadEof(input);
  }
  @Test public void testReadPacketWithZeroSizeTerminator() throws Exception {
    byte[] firstPacket=TestUtil.buildTestData(255,random);
    byte[] secondPacket=TestUtil.buildTestData(8,random);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x06,0,1000,0x04),TestUtil.createByteArray(0xFF,0x00,0x00,0x08),firstPacket,secondPacket),true);
    assertReadPacket(input,firstPacket);
    assertReadPacket(input,secondPacket);
    assertReadEof(input);
  }
  @Test public void testReadContinuedPacketOverTwoPages() throws Exception {
    byte[] firstPacket=TestUtil.buildTestData(518);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,0x02),TestUtil.createByteArray(0xFF,0xFF),Arrays.copyOf(firstPacket,510),OggTestData.buildOggHeader(0x05,10,1001,0x01),TestUtil.createByteArray(0x08),Arrays.copyOfRange(firstPacket,510,510 + 8)),true);
    assertReadPacket(input,firstPacket);
    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();
    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();
    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1001);
    assertReadEof(input);
  }
  @Test public void testReadContinuedPacketOverFourPages() throws Exception {
    byte[] firstPacket=TestUtil.buildTestData(1028);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,0x02),TestUtil.createByteArray(0xFF,0xFF),Arrays.copyOf(firstPacket,510),OggTestData.buildOggHeader(0x01,10,1001,0x01),TestUtil.createByteArray(0xFF),Arrays.copyOfRange(firstPacket,510,510 + 255),OggTestData.buildOggHeader(0x01,10,1002,0x01),TestUtil.createByteArray(0xFF),Arrays.copyOfRange(firstPacket,510 + 255,510 + 255 + 255),OggTestData.buildOggHeader(0x05,10,1003,0x01),TestUtil.createByteArray(0x08),Arrays.copyOfRange(firstPacket,510 + 255 + 255,510 + 255 + 255+ 8)),true);
    assertReadPacket(input,firstPacket);
    assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue();
    assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse();
    assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1003);
    assertReadEof(input);
  }
  @Test public void testReadDiscardContinuedPacketAtStart() throws Exception {
    byte[] pageBody=TestUtil.buildTestData(256 + 8);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x01,10,1001,0x03),TestUtil.createByteArray(255,1,8),pageBody),true);
    assertReadPacket(input,Arrays.copyOfRange(pageBody,256,256 + 8));
    assertReadEof(input);
  }
  @Test public void testReadZeroSizedPacketsAtEndOfStream() throws Exception {
    byte[] firstPacket=TestUtil.buildTestData(8,random);
    byte[] secondPacket=TestUtil.buildTestData(8,random);
    byte[] thirdPacket=TestUtil.buildTestData(8,random);
    FakeExtractorInput input=OggTestData.createInput(TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,0x01),TestUtil.createByteArray(0x08),firstPacket,OggTestData.buildOggHeader(0x04,0,1001,0x03),TestUtil.createByteArray(0x08,0x00,0x00),secondPacket,OggTestData.buildOggHeader(0x04,0,1002,0x03),TestUtil.createByteArray(0x08,0x00,0x00),thirdPacket),true);
    assertReadPacket(input,firstPacket);
    assertReadPacket(input,secondPacket);
    assertReadPacket(input,thirdPacket);
    assertReadEof(input);
  }
  @Test public void testParseRealFile() throws IOException, InterruptedException {
    byte[] data=TestUtil.getByteArray(RuntimeEnvironment.application,TEST_FILE);
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(data).build();
    int packetCounter=0;
    while (readPacket(input)) {
      packetCounter++;
    }
    assertThat(packetCounter).isEqualTo(277);
  }
  private void assertReadPacket(  FakeExtractorInput extractorInput,  byte[] expected) throws IOException, InterruptedException {
    assertThat(readPacket(extractorInput)).isTrue();
    ParsableByteArray payload=oggPacket.getPayload();
    assertThat(Arrays.copyOf(payload.data,payload.limit())).isEqualTo(expected);
  }
  private void assertReadEof(  FakeExtractorInput extractorInput) throws IOException, InterruptedException {
    assertThat(readPacket(extractorInput)).isFalse();
  }
  private boolean readPacket(  FakeExtractorInput input) throws InterruptedException, IOException {
    while (true) {
      try {
        return oggPacket.populate(input);
      }
 catch (      FakeExtractorInput.SimulatedIOException e) {
      }
    }
  }
}
