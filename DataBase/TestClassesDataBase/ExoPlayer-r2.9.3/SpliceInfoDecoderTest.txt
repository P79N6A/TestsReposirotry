/** 
 * Test for  {@link SpliceInfoDecoder}.
 */
@RunWith(RobolectricTestRunner.class) public final class SpliceInfoDecoderTest {
  private SpliceInfoDecoder decoder;
  private MetadataInputBuffer inputBuffer;
  @Before public void setUp(){
    decoder=new SpliceInfoDecoder();
    inputBuffer=new MetadataInputBuffer();
  }
  @Test public void testWrappedAroundTimeSignalCommand(){
    byte[] rawTimeSignalSection=new byte[]{0,(byte)0x80,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x06,(byte)0x80,0x52,0x03,0x02,(byte)0x8f,0x00,0x00,0x00,0x00};
    Metadata metadata=feedInputBuffer(rawTimeSignalSection,0x3000000000L,-0x50000L);
    assertThat(metadata.length()).isEqualTo(1);
    assertThat(((TimeSignalCommand)metadata.get(0)).playbackPositionUs).isEqualTo(removePtsConversionPrecisionError(0x3001000000L,inputBuffer.subsampleOffsetUs));
  }
  @Test public void test2SpliceInsertCommands(){
    byte[] rawSpliceInsertCommand1=new byte[]{0,(byte)0x80,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x05,0x00,0x00,0x00,0x42,0x00,0x40,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x02,0x00,0x00,0x00,0x00};
    Metadata metadata=feedInputBuffer(rawSpliceInsertCommand1,2000000,3000000);
    assertThat(metadata.length()).isEqualTo(1);
    SpliceInsertCommand command=(SpliceInsertCommand)metadata.get(0);
    assertThat(command.spliceEventId).isEqualTo(66);
    assertThat(command.spliceEventCancelIndicator).isFalse();
    assertThat(command.outOfNetworkIndicator).isFalse();
    assertThat(command.programSpliceFlag).isTrue();
    assertThat(command.spliceImmediateFlag).isFalse();
    assertThat(command.programSplicePlaybackPositionUs).isEqualTo(3000000);
    assertThat(command.breakDurationUs).isEqualTo(TIME_UNSET);
    assertThat(command.uniqueProgramId).isEqualTo(16);
    assertThat(command.availNum).isEqualTo(1);
    assertThat(command.availsExpected).isEqualTo(2);
    byte[] rawSpliceInsertCommand2=new byte[]{0,(byte)0x80,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x05,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,0x00,0x00,0x02,0x10,(byte)0x81,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,0x11,0x00,0x00,0x20,0x01,0x02,0x00,0x00,0x00,0x00};
    long subsampleOffset=1000011;
    metadata=feedInputBuffer(rawSpliceInsertCommand2,1000000,subsampleOffset);
    assertThat(metadata.length()).isEqualTo(1);
    command=(SpliceInsertCommand)metadata.get(0);
    assertThat(command.spliceEventId).isEqualTo(0xffffffffL);
    assertThat(command.spliceEventCancelIndicator).isFalse();
    assertThat(command.outOfNetworkIndicator).isFalse();
    assertThat(command.programSpliceFlag).isFalse();
    assertThat(command.spliceImmediateFlag).isFalse();
    assertThat(command.programSplicePlaybackPositionUs).isEqualTo(TIME_UNSET);
    assertThat(command.breakDurationUs).isEqualTo(TIME_UNSET);
    List<SpliceInsertCommand.ComponentSplice> componentSplices=command.componentSpliceList;
    assertThat(componentSplices).hasSize(2);
    assertThat(componentSplices.get(0).componentTag).isEqualTo(16);
    assertThat(componentSplices.get(0).componentSplicePlaybackPositionUs).isEqualTo(1000000);
    assertThat(componentSplices.get(1).componentTag).isEqualTo(17);
    assertThat(componentSplices.get(1).componentSplicePts).isEqualTo(TIME_UNSET);
    assertThat(command.uniqueProgramId).isEqualTo(32);
    assertThat(command.availNum).isEqualTo(1);
    assertThat(command.availsExpected).isEqualTo(2);
  }
  private Metadata feedInputBuffer(  byte[] data,  long timeUs,  long subsampleOffset){
    inputBuffer.clear();
    inputBuffer.data=ByteBuffer.allocate(data.length).put(data);
    inputBuffer.timeUs=timeUs;
    inputBuffer.subsampleOffsetUs=subsampleOffset;
    return decoder.decode(inputBuffer);
  }
  private static long removePtsConversionPrecisionError(  long timeUs,  long offsetUs){
    return TimestampAdjuster.ptsToUs(TimestampAdjuster.usToPts(timeUs - offsetUs)) + offsetUs;
  }
}
