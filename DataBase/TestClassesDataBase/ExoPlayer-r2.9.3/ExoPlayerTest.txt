/** 
 * Unit test for  {@link ExoPlayer}. 
 */
@RunWith(RobolectricTestRunner.class) @Config(shadows={RobolectricUtil.CustomLooper.class,RobolectricUtil.CustomMessageQueue.class}) public final class ExoPlayerTest {
  /** 
 * For tests that rely on the player transitioning to the ended state, the duration in milliseconds after starting the player before the test will time out. This is to catch cases where the player under test is not making progress, in which case the test should fail.
 */
  private static final int TIMEOUT_MS=10000;
  private Context context;
  @Before public void setUp(){
    context=RuntimeEnvironment.application;
  }
  /** 
 * Tests playback of a source that exposes an empty timeline. Playback is expected to end without error.
 */
  @Test public void testPlayEmptyTimeline() throws Exception {
    Timeline timeline=Timeline.EMPTY;
    FakeRenderer renderer=new FakeRenderer();
    ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setRenderers(renderer).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertNoPositionDiscontinuities();
    testRunner.assertTimelinesEqual(timeline);
    assertThat(renderer.formatReadCount).isEqualTo(0);
    assertThat(renderer.sampleBufferReadCount).isEqualTo(0);
    assertThat(renderer.isEnded).isFalse();
  }
  /** 
 * Tests playback of a source that exposes a single period. 
 */
  @Test public void testPlaySinglePeriodTimeline() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    Object manifest=new Object();
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setManifest(manifest).setRenderers(renderer).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertNoPositionDiscontinuities();
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertManifestsEqual(manifest);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertTrackGroupsEqual(new TrackGroupArray(new TrackGroup(Builder.VIDEO_FORMAT)));
    assertThat(renderer.formatReadCount).isEqualTo(1);
    assertThat(renderer.sampleBufferReadCount).isEqualTo(1);
    assertThat(renderer.isEnded).isTrue();
  }
  /** 
 * Tests playback of a source that exposes three periods. 
 */
  @Test public void testPlayMultiPeriodTimeline() throws Exception {
    Timeline timeline=new FakeTimeline(3);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setRenderers(renderer).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    assertThat(renderer.formatReadCount).isEqualTo(3);
    assertThat(renderer.sampleBufferReadCount).isEqualTo(3);
    assertThat(renderer.isEnded).isTrue();
  }
  /** 
 * Tests playback of periods with very short duration. 
 */
  @Test public void testPlayShortDurationPeriods() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(100,0));
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setRenderers(renderer).build(context).start().blockUntilEnded(TIMEOUT_MS);
    Integer[] expectedReasons=new Integer[99];
    Arrays.fill(expectedReasons,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
    testRunner.assertPositionDiscontinuityReasonsEqual(expectedReasons);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    assertThat(renderer.formatReadCount).isEqualTo(100);
    assertThat(renderer.sampleBufferReadCount).isEqualTo(100);
    assertThat(renderer.isEnded).isTrue();
  }
  /** 
 * Tests that the player does not unnecessarily reset renderers when playing a multi-period source.
 */
  @Test public void testReadAheadToEndDoesNotResetRenderer() throws Exception {
    TimelineWindowDefinition windowDefinition0=new TimelineWindowDefinition(1,0,false,false,100_000);
    TimelineWindowDefinition windowDefinition1=new TimelineWindowDefinition(1,1,false,false,100_000);
    TimelineWindowDefinition windowDefinition2=new TimelineWindowDefinition(1,2,false,false,100_000);
    Timeline timeline=new FakeTimeline(windowDefinition0,windowDefinition1,windowDefinition2);
    final FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    FakeMediaClockRenderer audioRenderer=new FakeMediaClockRenderer(Builder.AUDIO_FORMAT){
      @Override public long getPositionUs(){
        return isCurrentStreamFinal() ? 30 : 0;
      }
      @Override public PlaybackParameters setPlaybackParameters(      PlaybackParameters playbackParameters){
        return PlaybackParameters.DEFAULT;
      }
      @Override public PlaybackParameters getPlaybackParameters(){
        return PlaybackParameters.DEFAULT;
      }
      @Override public boolean isEnded(){
        return videoRenderer.isEnded();
      }
    }
;
    ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setRenderers(videoRenderer,audioRenderer).setSupportedFormats(Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
    testRunner.assertTimelinesEqual(timeline);
    assertThat(audioRenderer.positionResetCount).isEqualTo(1);
    assertThat(videoRenderer.isEnded).isTrue();
    assertThat(audioRenderer.isEnded).isTrue();
  }
  @Test public void testRepreparationGivesFreshSourceInfo() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    Object firstSourceManifest=new Object();
    MediaSource firstSource=new FakeMediaSource(timeline,firstSourceManifest,Builder.VIDEO_FORMAT);
    final CountDownLatch queuedSourceInfoCountDownLatch=new CountDownLatch(1);
    final CountDownLatch completePreparationCountDownLatch=new CountDownLatch(1);
    MediaSource secondSource=new FakeMediaSource(timeline,new Object(),Builder.VIDEO_FORMAT){
      @Override public synchronized void prepareSourceInternal(      ExoPlayer player,      boolean isTopLevelSource,      @Nullable TransferListener mediaTransferListener){
        super.prepareSourceInternal(player,isTopLevelSource,mediaTransferListener);
        queuedSourceInfoCountDownLatch.countDown();
        try {
          completePreparationCountDownLatch.await();
        }
 catch (        InterruptedException e) {
          throw new IllegalStateException(e);
        }
      }
    }
;
    Object thirdSourceManifest=new Object();
    MediaSource thirdSource=new FakeMediaSource(timeline,thirdSourceManifest,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRepreparation").waitForTimelineChanged(timeline).prepareSource(secondSource).executeRunnable(() -> {
      try {
        queuedSourceInfoCountDownLatch.await();
      }
 catch (      InterruptedException e) {
      }
    }
).prepareSource(thirdSource).executeRunnable(completePreparationCountDownLatch::countDown).build();
    ExoPlayerTestRunner testRunner=new Builder().setMediaSource(firstSource).setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertNoPositionDiscontinuities();
    testRunner.assertTimelinesEqual(timeline,Timeline.EMPTY,timeline);
    testRunner.assertManifestsEqual(firstSourceManifest,null,thirdSourceManifest);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_RESET,Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertTrackGroupsEqual(new TrackGroupArray(new TrackGroup(Builder.VIDEO_FORMAT)));
    assertThat(renderer.isEnded).isTrue();
  }
  @Test public void testRepeatModeChanges() throws Exception {
    Timeline timeline=new FakeTimeline(3);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRepeatMode").pause().waitForTimelineChanged(timeline).playUntilStartOfWindow(1).setRepeatMode(Player.REPEAT_MODE_ONE).playUntilStartOfWindow(1).setRepeatMode(Player.REPEAT_MODE_OFF).playUntilStartOfWindow(2).setRepeatMode(Player.REPEAT_MODE_ONE).playUntilStartOfWindow(2).setRepeatMode(Player.REPEAT_MODE_ALL).playUntilStartOfWindow(0).setRepeatMode(Player.REPEAT_MODE_ONE).playUntilStartOfWindow(0).playUntilStartOfWindow(0).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPlayedPeriodIndices(0,1,1,2,2,0,0,0,1,2);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    assertThat(renderer.isEnded).isTrue();
  }
  @Test public void testShuffleModeEnabledChanges() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(1);
    MediaSource[] fakeMediaSources={new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT)};
    ConcatenatingMediaSource mediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(3),fakeMediaSources);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testShuffleModeEnabled").pause().waitForPlaybackState(Player.STATE_READY).setRepeatMode(Player.REPEAT_MODE_ALL).playUntilStartOfWindow(1).setShuffleModeEnabled(true).playUntilStartOfWindow(1).setShuffleModeEnabled(false).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPlayedPeriodIndices(0,1,0,2,1,2);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
    assertThat(renderer.isEnded).isTrue();
  }
  @Test public void testAdGroupWithLoadErrorIsSkipped() throws Exception {
    AdPlaybackState initialAdPlaybackState=FakeTimeline.createAdPlaybackState(1,5 * C.MICROS_PER_SECOND);
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(1,0,true,false,C.MICROS_PER_SECOND,initialAdPlaybackState));
    AdPlaybackState errorAdPlaybackState=initialAdPlaybackState.withAdLoadError(0,0);
    final Timeline adErrorTimeline=new FakeTimeline(new TimelineWindowDefinition(1,0,true,false,C.MICROS_PER_SECOND,errorAdPlaybackState));
    final FakeMediaSource fakeMediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testAdGroupWithLoadErrorIsSkipped").pause().waitForPlaybackState(Player.STATE_READY).executeRunnable(() -> fakeMediaSource.setNewSourceInfo(adErrorTimeline,null)).waitForTimelineChanged(adErrorTimeline).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(fakeMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_AD_INSERTION);
  }
  @Test public void testPeriodHoldersReleasedAfterSeekWithRepeatModeAll() throws Exception {
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testPeriodHoldersReleased").setRepeatMode(Player.REPEAT_MODE_ALL).waitForPositionDiscontinuity().seek(0).waitForPositionDiscontinuity().setRepeatMode(Player.REPEAT_MODE_OFF).build();
    new Builder().setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(renderer.isEnded).isTrue();
  }
  @Test public void testSeekProcessedCallback() throws Exception {
    Timeline timeline=new FakeTimeline(2);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekProcessedCallback").pause().seek(5).waitForSeekProcessed().seek(2).seek(10).waitForPlaybackState(Player.STATE_READY).seek(10).play().waitForPositionDiscontinuity().seek(5).seek(60).build();
    final List<Integer> playbackStatesWhenSeekProcessed=new ArrayList<>();
    EventListener eventListener=new EventListener(){
      private int currentPlaybackState=Player.STATE_IDLE;
      @Override public void onPlayerStateChanged(      boolean playWhenReady,      int playbackState){
        currentPlaybackState=playbackState;
      }
      @Override public void onSeekProcessed(){
        playbackStatesWhenSeekProcessed.add(currentPlaybackState);
      }
    }
;
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setEventListener(eventListener).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK);
    assertThat(playbackStatesWhenSeekProcessed).containsExactly(Player.STATE_BUFFERING,Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_BUFFERING).inOrder();
  }
  @Test public void testSeekProcessedCalledWithIllegalSeekPosition() throws Exception {
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekProcessedCalledWithIllegalSeekPosition").waitForPlaybackState(Player.STATE_BUFFERING).seek(100,0).waitForPlaybackState(Player.STATE_IDLE).build();
    final boolean[] onSeekProcessedCalled=new boolean[1];
    EventListener listener=new EventListener(){
      @Override public void onSeekProcessed(){
        onSeekProcessedCalled[0]=true;
      }
    }
;
    ExoPlayerTestRunner testRunner=new Builder().setActionSchedule(actionSchedule).setEventListener(listener).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
      assertThat(e.getUnexpectedException()).isInstanceOf(IllegalSeekPositionException.class);
    }
    assertThat(onSeekProcessedCalled[0]).isTrue();
  }
  @Test public void testSeekDiscontinuity() throws Exception {
    FakeTimeline timeline=new FakeTimeline(1);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekDiscontinuity").seek(10).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
  }
  @Test public void testSeekDiscontinuityWithAdjustment() throws Exception {
    FakeTimeline timeline=new FakeTimeline(1);
    FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT){
      @Override protected FakeMediaPeriod createFakeMediaPeriod(      MediaPeriodId id,      TrackGroupArray trackGroupArray,      Allocator allocator,      EventDispatcher eventDispatcher,      @Nullable TransferListener transferListener){
        FakeMediaPeriod mediaPeriod=new FakeMediaPeriod(trackGroupArray,eventDispatcher);
        mediaPeriod.setSeekToUsOffset(10);
        return mediaPeriod;
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekDiscontinuityAdjust").pause().waitForPlaybackState(Player.STATE_READY).seek(10).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK_ADJUSTMENT);
  }
  @Test public void testInternalDiscontinuityAtNewPosition() throws Exception {
    FakeTimeline timeline=new FakeTimeline(1);
    FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT){
      @Override protected FakeMediaPeriod createFakeMediaPeriod(      MediaPeriodId id,      TrackGroupArray trackGroupArray,      Allocator allocator,      EventDispatcher eventDispatcher,      @Nullable TransferListener transferListener){
        FakeMediaPeriod mediaPeriod=new FakeMediaPeriod(trackGroupArray,eventDispatcher);
        mediaPeriod.setDiscontinuityPositionUs(10);
        return mediaPeriod;
      }
    }
;
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_INTERNAL);
  }
  @Test public void testInternalDiscontinuityAtInitialPosition() throws Exception {
    FakeTimeline timeline=new FakeTimeline(1);
    FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT){
      @Override protected FakeMediaPeriod createFakeMediaPeriod(      MediaPeriodId id,      TrackGroupArray trackGroupArray,      Allocator allocator,      EventDispatcher eventDispatcher,      @Nullable TransferListener transferListener){
        FakeMediaPeriod mediaPeriod=new FakeMediaPeriod(trackGroupArray,eventDispatcher);
        mediaPeriod.setDiscontinuityPositionUs(0);
        return mediaPeriod;
      }
    }
;
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertNoPositionDiscontinuities();
  }
  @Test public void testAllActivatedTrackSelectionAreReleasedForSinglePeriod() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
    FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
    FakeTrackSelector trackSelector=new FakeTrackSelector();
    new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).build(context).start().blockUntilEnded(TIMEOUT_MS);
    List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
    int numSelectionsEnabled=0;
    for (    FakeTrackSelection trackSelection : createdTrackSelections) {
      assertThat(trackSelection.isEnabled).isFalse();
      numSelectionsEnabled+=trackSelection.enableCount;
    }
    assertThat(createdTrackSelections).hasSize(2);
    assertThat(numSelectionsEnabled).isEqualTo(2);
  }
  @Test public void testAllActivatedTrackSelectionAreReleasedForMultiPeriods() throws Exception {
    Timeline timeline=new FakeTimeline(2);
    MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
    FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
    FakeTrackSelector trackSelector=new FakeTrackSelector();
    new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).build(context).start().blockUntilEnded(TIMEOUT_MS);
    List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
    int numSelectionsEnabled=0;
    for (    FakeTrackSelection trackSelection : createdTrackSelections) {
      assertThat(trackSelection.isEnabled).isFalse();
      numSelectionsEnabled+=trackSelection.enableCount;
    }
    assertThat(createdTrackSelections).hasSize(4);
    assertThat(numSelectionsEnabled).isEqualTo(4);
  }
  @Test public void testAllActivatedTrackSelectionAreReleasedWhenTrackSelectionsAreRemade() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
    FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
    final FakeTrackSelector trackSelector=new FakeTrackSelector();
    ActionSchedule disableTrackAction=new ActionSchedule.Builder("testChangeTrackSelection").pause().waitForPlaybackState(Player.STATE_READY).disableRenderer(0).play().build();
    new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).setActionSchedule(disableTrackAction).build(context).start().blockUntilEnded(TIMEOUT_MS);
    List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
    int numSelectionsEnabled=0;
    for (    FakeTrackSelection trackSelection : createdTrackSelections) {
      assertThat(trackSelection.isEnabled).isFalse();
      numSelectionsEnabled+=trackSelection.enableCount;
    }
    assertThat(createdTrackSelections).hasSize(4);
    assertThat(numSelectionsEnabled).isEqualTo(3);
  }
  @Test public void testAllActivatedTrackSelectionAreReleasedWhenTrackSelectionsAreReused() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
    FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
    final FakeTrackSelector trackSelector=new FakeTrackSelector(true);
    ActionSchedule disableTrackAction=new ActionSchedule.Builder("testReuseTrackSelection").pause().waitForPlaybackState(Player.STATE_READY).disableRenderer(0).play().build();
    new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).setActionSchedule(disableTrackAction).build(context).start().blockUntilEnded(TIMEOUT_MS);
    List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
    int numSelectionsEnabled=0;
    for (    FakeTrackSelection trackSelection : createdTrackSelections) {
      assertThat(trackSelection.isEnabled).isFalse();
      numSelectionsEnabled+=trackSelection.enableCount;
    }
    assertThat(createdTrackSelections).hasSize(2);
    assertThat(numSelectionsEnabled).isEqualTo(3);
  }
  @Test public void testDynamicTimelineChangeReason() throws Exception {
    Timeline timeline1=new FakeTimeline(new TimelineWindowDefinition(false,false,100000));
    final Timeline timeline2=new FakeTimeline(new TimelineWindowDefinition(false,false,20000));
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline1,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testDynamicTimelineChangeReason").pause().waitForTimelineChanged(timeline1).executeRunnable(() -> mediaSource.setNewSourceInfo(timeline2,null)).waitForTimelineChanged(timeline2).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline1,timeline2);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_DYNAMIC);
  }
  @Test public void testRepreparationWithPositionResetAndShufflingUsesFirstPeriod() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,100000));
    ConcatenatingMediaSource firstMediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(2),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT));
    ConcatenatingMediaSource secondMediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(2),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT));
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRepreparationWithShuffle").pause().waitForPlaybackState(Player.STATE_READY).setShuffleModeEnabled(true).prepareSource(secondMediaSource,true,false).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(firstMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPlayedPeriodIndices(0,1,0);
  }
  @Test public void testSetPlaybackParametersBeforePreparationCompletesSucceeds() throws Exception {
    final CountDownLatch createPeriodCalledCountDownLatch=new CountDownLatch(1);
    final FakeMediaPeriod[] fakeMediaPeriodHolder=new FakeMediaPeriod[1];
    MediaSource mediaSource=new FakeMediaSource(new FakeTimeline(1),null,Builder.VIDEO_FORMAT){
      @Override protected FakeMediaPeriod createFakeMediaPeriod(      MediaPeriodId id,      TrackGroupArray trackGroupArray,      Allocator allocator,      EventDispatcher eventDispatcher,      @Nullable TransferListener transferListener){
        fakeMediaPeriodHolder[0]=new FakeMediaPeriod(trackGroupArray,eventDispatcher,true);
        createPeriodCalledCountDownLatch.countDown();
        return fakeMediaPeriodHolder[0];
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSetPlaybackParametersBeforePreparationCompletesSucceeds").waitForPlaybackState(Player.STATE_BUFFERING).executeRunnable(() -> {
      try {
        createPeriodCalledCountDownLatch.await();
      }
 catch (      InterruptedException e) {
        throw new IllegalStateException(e);
      }
    }
).setPlaybackParameters(new PlaybackParameters(2f,2f)).executeRunnable(() -> fakeMediaPeriodHolder[0].setPreparationComplete()).build();
    new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  }
  @Test public void testStopDoesNotResetPosition() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final long[] positionHolder=new long[1];
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopDoesNotResetPosition").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,50).stop().executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[0]=player.getCurrentPosition();
      }
    }
).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertNoPositionDiscontinuities();
    assertThat(positionHolder[0]).isAtLeast(50L);
  }
  @Test public void testStopWithoutResetDoesNotResetPosition() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final long[] positionHolder=new long[1];
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopWithoutResetDoesNotReset").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,50).stop(false).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[0]=player.getCurrentPosition();
      }
    }
).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertNoPositionDiscontinuities();
    assertThat(positionHolder[0]).isAtLeast(50L);
  }
  @Test public void testStopWithResetDoesResetPosition() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final long[] positionHolder=new long[1];
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopWithResetDoesReset").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,50).stop(true).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[0]=player.getCurrentPosition();
      }
    }
).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline,Timeline.EMPTY);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_RESET);
    testRunner.assertNoPositionDiscontinuities();
    assertThat(positionHolder[0]).isEqualTo(0);
  }
  @Test public void testStopWithoutResetReleasesMediaSource() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopReleasesMediaSource").waitForPlaybackState(Player.STATE_READY).stop(false).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS);
    mediaSource.assertReleased();
    testRunner.blockUntilEnded(TIMEOUT_MS);
  }
  @Test public void testStopWithResetReleasesMediaSource() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopReleasesMediaSource").waitForPlaybackState(Player.STATE_READY).stop(true).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS);
    mediaSource.assertReleased();
    testRunner.blockUntilEnded(TIMEOUT_MS);
  }
  @Test public void testRepreparationDoesNotResetAfterStopWithReset() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    MediaSource secondSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRepreparationAfterStop").waitForPlaybackState(Player.STATE_READY).stop(true).waitForPlaybackState(Player.STATE_IDLE).prepareSource(secondSource).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).setExpectedPlayerEndedCount(2).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline,Timeline.EMPTY,timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_RESET,Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertNoPositionDiscontinuities();
  }
  @Test public void testSeekBeforeRepreparationPossibleAfterStopWithReset() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    Timeline secondTimeline=new FakeTimeline(2);
    MediaSource secondSource=new FakeMediaSource(secondTimeline,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekAfterStopWithReset").waitForPlaybackState(Player.STATE_READY).stop(true).waitForPlaybackState(Player.STATE_IDLE).seek(1,0).prepareSource(secondSource,false,true).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).setExpectedPlayerEndedCount(2).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline,Timeline.EMPTY,secondTimeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_RESET,Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
    testRunner.assertPlayedPeriodIndices(0,1);
  }
  @Test public void testStopDuringPreparationOverwritesPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopOverwritesPrepare").waitForPlaybackState(Player.STATE_BUFFERING).seek(0).stop(true).waitForSeekProcessed().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(Timeline.EMPTY);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
  }
  @Test public void testStopAndSeekAfterStopDoesNotResetTimeline() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testStopTwice").waitForPlaybackState(Player.STATE_READY).stop(false).stop(false).seek(0).waitForSeekProcessed().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
  }
  @Test public void testReprepareAfterPlaybackError() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testReprepareAfterPlaybackError").waitForPlaybackState(Player.STATE_READY).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).prepareSource(new FakeMediaSource(timeline,null),true,false).waitForPlaybackState(Player.STATE_READY).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    testRunner.assertTimelinesEqual(timeline,timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_PREPARED);
  }
  @Test public void testSeekAndReprepareAfterPlaybackError() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final long[] positionHolder=new long[2];
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testReprepareAfterPlaybackError").pause().waitForPlaybackState(Player.STATE_READY).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).seek(50).waitForSeekProcessed().executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[0]=player.getCurrentPosition();
      }
    }
).prepareSource(new FakeMediaSource(timeline,null),false,false).waitForPlaybackState(Player.STATE_READY).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[1]=player.getCurrentPosition();
      }
    }
).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    testRunner.assertTimelinesEqual(timeline,timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_PREPARED);
    testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
    assertThat(positionHolder[0]).isEqualTo(50);
    assertThat(positionHolder[1]).isEqualTo(50);
  }
  @Test public void testPlaybackErrorDuringSourceInfoRefreshStillUpdatesTimeline() throws Exception {
    final Timeline timeline=new FakeTimeline(1);
    final FakeMediaSource mediaSource=new FakeMediaSource(null,null);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testPlaybackErrorDuringSourceInfoRefreshStillUpdatesTimeline").waitForPlaybackState(Player.STATE_BUFFERING).seek(100,0).executeRunnable(() -> mediaSource.setNewSourceInfo(timeline,null)).waitForPlaybackState(Player.STATE_IDLE).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
      assertThat(e.getUnexpectedException()).isInstanceOf(IllegalSeekPositionException.class);
    }
    testRunner.assertTimelinesEqual(timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED);
  }
  @Test public void testPlaybackErrorDuringSourceInfoRefreshWithShuffleModeEnabledUsesCorrectFirstPeriod() throws Exception {
    FakeMediaSource mediaSource=new FakeMediaSource(new FakeTimeline(1),null);
    ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(0),mediaSource,mediaSource);
    AtomicInteger windowIndexAfterError=new AtomicInteger();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testPlaybackErrorDuringSourceInfoRefreshUsesCorrectFirstPeriod").setShuffleModeEnabled(true).waitForPlaybackState(Player.STATE_BUFFERING).seek(100,0).waitForPlaybackState(Player.STATE_IDLE).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        windowIndexAfterError.set(player.getCurrentWindowIndex());
      }
    }
).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
      assertThat(e.getUnexpectedException()).isInstanceOf(IllegalSeekPositionException.class);
    }
    assertThat(windowIndexAfterError.get()).isEqualTo(1);
  }
  @Test public void testRestartAfterEmptyTimelineWithShuffleModeEnabledUsesCorrectFirstPeriod() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    FakeMediaSource mediaSource=new FakeMediaSource(timeline,null);
    ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(0));
    AtomicInteger windowIndexAfterAddingSources=new AtomicInteger();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRestartAfterEmptyTimelineUsesCorrectFirstPeriod").setShuffleModeEnabled(true).waitForPlaybackState(Player.STATE_ENDED).executeRunnable(() -> concatenatingMediaSource.addMediaSources(Arrays.asList(mediaSource,mediaSource))).waitForTimelineChanged().executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        windowIndexAfterAddingSources.set(player.getCurrentWindowIndex());
      }
    }
).build();
    new ExoPlayerTestRunner.Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    assertThat(windowIndexAfterAddingSources.get()).isEqualTo(1);
  }
  @Test public void testPlaybackErrorAndReprepareDoesNotResetPosition() throws Exception {
    final Timeline timeline=new FakeTimeline(2);
    final long[] positionHolder=new long[3];
    final int[] windowIndexHolder=new int[3];
    final FakeMediaSource secondMediaSource=new FakeMediaSource(null,null);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testPlaybackErrorDoesNotResetPosition").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(1,500).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[0]=player.getCurrentPosition();
        windowIndexHolder[0]=player.getCurrentWindowIndex();
      }
    }
).prepareSource(secondMediaSource,false,false).waitForPlaybackState(Player.STATE_BUFFERING).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[1]=player.getCurrentPosition();
        windowIndexHolder[1]=player.getCurrentWindowIndex();
        secondMediaSource.setNewSourceInfo(timeline,null);
      }
    }
).waitForPlaybackState(Player.STATE_READY).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionHolder[2]=player.getCurrentPosition();
        windowIndexHolder[2]=player.getCurrentWindowIndex();
      }
    }
).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    assertThat(positionHolder[0]).isAtLeast(500L);
    assertThat(positionHolder[1]).isEqualTo(positionHolder[0]);
    assertThat(positionHolder[2]).isEqualTo(positionHolder[0]);
    assertThat(windowIndexHolder[0]).isEqualTo(1);
    assertThat(windowIndexHolder[1]).isEqualTo(1);
    assertThat(windowIndexHolder[2]).isEqualTo(1);
  }
  @Test public void testPlaybackErrorTwiceStillKeepsTimeline() throws Exception {
    final Timeline timeline=new FakeTimeline(1);
    final FakeMediaSource mediaSource2=new FakeMediaSource(null,null);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testPlaybackErrorDoesNotResetPosition").pause().waitForPlaybackState(Player.STATE_READY).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).prepareSource(mediaSource2,false,false).waitForPlaybackState(Player.STATE_BUFFERING).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context);
    try {
      testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    testRunner.assertTimelinesEqual(timeline,timeline);
    testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_PREPARED);
  }
  @Test public void testSendMessagesDuringPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesAfterPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForTimelineChanged(timeline).sendMessage(target,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testMultipleSendMessages() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target50=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget target80=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target80,80).sendMessage(target50,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target50.positionMs).isAtLeast(50L);
    assertThat(target80.positionMs).isAtLeast(80L);
    assertThat(target80.positionMs).isAtLeast(target50.positionMs);
  }
  @Test public void testMultipleSendMessagesAtSameTime() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target1=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget target2=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target1,50).sendMessage(target2,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target1.positionMs).isAtLeast(50L);
    assertThat(target2.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesMultiPeriodResolution() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(10,0));
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesAtStartAndEndOfPeriod() throws Exception {
    Timeline timeline=new FakeTimeline(2);
    PositionGrabbingMessageTarget targetStartFirstPeriod=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget targetEndMiddlePeriod=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget targetStartMiddlePeriod=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget targetEndLastPeriod=new PositionGrabbingMessageTarget();
    long duration1Ms=timeline.getWindow(0,new Window()).getDurationMs();
    long duration2Ms=timeline.getWindow(1,new Window()).getDurationMs();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(targetStartFirstPeriod,0,0).sendMessage(targetEndMiddlePeriod,0,duration1Ms).sendMessage(targetStartMiddlePeriod,1,0).sendMessage(targetEndLastPeriod,1,duration2Ms).play().waitForPlaybackState(Player.STATE_ENDED).prepareSource(new FakeMediaSource(timeline,null),false,true).waitForPlaybackState(Player.STATE_BUFFERING).waitForPlaybackState(Player.STATE_ENDED).build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    assertThat(targetStartFirstPeriod.windowIndex).isEqualTo(0);
    assertThat(targetStartFirstPeriod.positionMs).isAtLeast(0L);
    assertThat(targetEndMiddlePeriod.windowIndex).isEqualTo(0);
    assertThat(targetEndMiddlePeriod.positionMs).isAtLeast(duration1Ms);
    assertThat(targetStartMiddlePeriod.windowIndex).isEqualTo(1);
    assertThat(targetStartMiddlePeriod.positionMs).isAtLeast(0L);
    assertThat(targetEndLastPeriod.windowIndex).isEqualTo(1);
    assertThat(targetEndLastPeriod.positionMs).isAtLeast(duration2Ms);
  }
  @Test public void testSendMessagesSeekOnDeliveryTimeDuringPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).seek(50).build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesSeekOnDeliveryTimeAfterPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).waitForTimelineChanged(timeline).seek(50).build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesSeekAfterDeliveryTimeDuringPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).seek(51).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
  }
  @Test public void testSendMessagesSeekAfterDeliveryTimeAfterPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().sendMessage(target,50).waitForTimelineChanged(timeline).seek(51).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
  }
  @Test public void testSendMessagesRepeatDoesNotRepost() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,50).setRepeatMode(Player.REPEAT_MODE_ALL).play().waitForPositionDiscontinuity().setRepeatMode(Player.REPEAT_MODE_OFF).build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.messageCount).isEqualTo(1);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesRepeatWithoutDeletingDoesRepost() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,0,50,false).setRepeatMode(Player.REPEAT_MODE_ALL).playUntilPosition(0,1).playUntilStartOfWindow(0).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.messageCount).isEqualTo(2);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesMoveCurrentWindowIndex() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(1,0));
    final Timeline secondTimeline=new FakeTimeline(new TimelineWindowDefinition(1,1),new TimelineWindowDefinition(1,0));
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForTimelineChanged(timeline).sendMessage(target,50).executeRunnable(() -> mediaSource.setNewSourceInfo(secondTimeline,null)).waitForTimelineChanged(secondTimeline).play().build();
    new Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
    assertThat(target.windowIndex).isEqualTo(1);
  }
  @Test public void testSendMessagesMultiWindowDuringPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(3);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_BUFFERING).sendMessage(target,2,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.windowIndex).isEqualTo(2);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesMultiWindowAfterPreparation() throws Exception {
    Timeline timeline=new FakeTimeline(3);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForTimelineChanged(timeline).sendMessage(target,2,50).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.windowIndex).isEqualTo(2);
    assertThat(target.positionMs).isAtLeast(50L);
  }
  @Test public void testSendMessagesMoveWindowIndex() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(1,0),new TimelineWindowDefinition(1,1));
    final Timeline secondTimeline=new FakeTimeline(new TimelineWindowDefinition(1,1),new TimelineWindowDefinition(1,0));
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT);
    PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForTimelineChanged(timeline).sendMessage(target,1,50).executeRunnable(() -> mediaSource.setNewSourceInfo(secondTimeline,null)).waitForTimelineChanged(secondTimeline).seek(0,0).play().build();
    new Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target.positionMs).isAtLeast(50L);
    assertThat(target.windowIndex).isEqualTo(0);
  }
  @Test public void testSendMessagesNonLinearPeriodOrder() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(1);
    MediaSource[] fakeMediaSources={new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT)};
    ConcatenatingMediaSource mediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(3),fakeMediaSources);
    PositionGrabbingMessageTarget target1=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget target2=new PositionGrabbingMessageTarget();
    PositionGrabbingMessageTarget target3=new PositionGrabbingMessageTarget();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSendMessages").pause().waitForPlaybackState(Player.STATE_READY).sendMessage(target1,0,50).sendMessage(target2,1,50).sendMessage(target3,2,50).setShuffleModeEnabled(true).seek(2,0).play().build();
    new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(target1.windowIndex).isEqualTo(0);
    assertThat(target2.windowIndex).isEqualTo(1);
    assertThat(target3.windowIndex).isEqualTo(2);
  }
  @Test public void testCancelMessageBeforeDelivery() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    final AtomicReference<PlayerMessage> message=new AtomicReference<>();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testCancelMessage").pause().waitForPlaybackState(Player.STATE_BUFFERING).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        message.set(player.createMessage(target).setPosition(50).send());
      }
    }
).playUntilPosition(0,30).executeRunnable(() -> message.get().cancel()).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(message.get().isCanceled()).isTrue();
    assertThat(target.messageCount).isEqualTo(0);
  }
  @Test public void testCancelRepeatedMessageAfterDelivery() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    final PositionGrabbingMessageTarget target=new PositionGrabbingMessageTarget();
    final AtomicReference<PlayerMessage> message=new AtomicReference<>();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testCancelMessage").pause().waitForPlaybackState(Player.STATE_BUFFERING).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        message.set(player.createMessage(target).setPosition(50).setDeleteAfterDelivery(false).send());
      }
    }
).playUntilPosition(0,51).seek(0).executeRunnable(() -> message.get().cancel()).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(message.get().isCanceled()).isTrue();
    assertThat(target.messageCount).isEqualTo(1);
  }
  @Test public void testSetAndSwitchSurface() throws Exception {
    final List<Integer> rendererMessages=new ArrayList<>();
    Renderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT){
      @Override public void handleMessage(      int what,      @Nullable Object object) throws ExoPlaybackException {
        super.handleMessage(what,object);
        rendererMessages.add(what);
      }
    }
;
    ActionSchedule actionSchedule=addSurfaceSwitch(new ActionSchedule.Builder("testSetAndSwitchSurface")).build();
    new ExoPlayerTestRunner.Builder().setRenderers(videoRenderer).setActionSchedule(actionSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    assertThat(Collections.frequency(rendererMessages,C.MSG_SET_SURFACE)).isEqualTo(2);
  }
  @Test public void testSwitchSurfaceOnEndedState() throws Exception {
    ActionSchedule.Builder scheduleBuilder=new ActionSchedule.Builder("testSwitchSurfaceOnEndedState").waitForPlaybackState(Player.STATE_ENDED);
    ActionSchedule waitForEndedAndSwitchSchedule=addSurfaceSwitch(scheduleBuilder).build();
    new ExoPlayerTestRunner.Builder().setTimeline(Timeline.EMPTY).setActionSchedule(waitForEndedAndSwitchSchedule).build(context).start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
  }
  @Test public void testTimelineUpdateDropsPrebufferedPeriods() throws Exception {
    Timeline timeline1=new FakeTimeline(new TimelineWindowDefinition(1,1),new TimelineWindowDefinition(1,2));
    final Timeline timeline2=new FakeTimeline(new TimelineWindowDefinition(1,1),new TimelineWindowDefinition(1,3));
    final FakeMediaSource mediaSource=new FakeMediaSource(timeline1,null,Builder.VIDEO_FORMAT);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testTimelineUpdateDropsPeriods").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,C.usToMs(TimelineWindowDefinition.DEFAULT_WINDOW_DURATION_US)).executeRunnable(() -> mediaSource.setNewSourceInfo(timeline2,null)).waitForTimelineChanged(timeline2).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPlayedPeriodIndices(0,1);
    assertThat(mediaSource.getCreatedMediaPeriods()).containsExactly(new MediaPeriodId(timeline1.getUidOfPeriod(0),0),new MediaPeriodId(timeline1.getUidOfPeriod(1),1),new MediaPeriodId(timeline2.getUidOfPeriod(1),2)).inOrder();
  }
  @Test public void testRepeatedSeeksToUnpreparedPeriodInSameWindowKeepsWindowSequenceNumber() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(2,0,true,false,10 * C.MICROS_PER_SECOND));
    FakeMediaSource mediaSource=new FakeMediaSource(timeline,null);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekToUnpreparedPeriod").pause().waitForPlaybackState(Player.STATE_READY).seek(0,9999).seek(0,1).seek(0,9999).play().build();
    ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    testRunner.assertPlayedPeriodIndices(0,1,0,1);
    assertThat(mediaSource.getCreatedMediaPeriods()).containsAllOf(new MediaPeriodId(timeline.getUidOfPeriod(0),0),new MediaPeriodId(timeline.getUidOfPeriod(1),0));
    assertThat(mediaSource.getCreatedMediaPeriods()).doesNotContain(new MediaPeriodId(timeline.getUidOfPeriod(1),1));
  }
  @Test public void testRecursivePlayerChangesReportConsistentValuesForAllListeners() throws Exception {
    final AtomicReference<Player> playerReference=new AtomicReference<>();
    final List<Integer> eventListener1States=new ArrayList<>();
    final List<Integer> eventListener2States=new ArrayList<>();
    final EventListener eventListener1=new EventListener(){
      @Override public void onPlayerStateChanged(      boolean playWhenReady,      int playbackState){
        eventListener1States.add(playbackState);
        if (playbackState == Player.STATE_READY) {
          playerReference.get().stop(true);
        }
      }
    }
;
    final EventListener eventListener2=new EventListener(){
      @Override public void onPlayerStateChanged(      boolean playWhenReady,      int playbackState){
        eventListener2States.add(playbackState);
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRecursivePlayerChanges").executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        playerReference.set(player);
        player.addListener(eventListener1);
        player.addListener(eventListener2);
      }
    }
).build();
    new ExoPlayerTestRunner.Builder().setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(eventListener1States).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE).inOrder();
    assertThat(eventListener2States).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE).inOrder();
  }
  @Test public void testRecursivePlayerChangesAreReportedInCorrectOrder() throws Exception {
    final AtomicReference<Player> playerReference=new AtomicReference<>();
    final List<Boolean> eventListenerPlayWhenReady=new ArrayList<>();
    final List<Integer> eventListenerStates=new ArrayList<>();
    final EventListener eventListener=new EventListener(){
      @Override public void onTimelineChanged(      Timeline timeline,      @Nullable Object manifest,      int reason){
        if (timeline.isEmpty()) {
          playerReference.get().setPlayWhenReady(false);
        }
      }
      @Override public void onPlayerStateChanged(      boolean playWhenReady,      int playbackState){
        eventListenerPlayWhenReady.add(playWhenReady);
        eventListenerStates.add(playbackState);
        if (playbackState == Player.STATE_READY) {
          playerReference.get().stop(true);
        }
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testRecursivePlayerChanges").executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        playerReference.set(player);
        player.addListener(eventListener);
      }
    }
).build();
    new ExoPlayerTestRunner.Builder().setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(eventListenerStates).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE,Player.STATE_IDLE).inOrder();
    assertThat(eventListenerPlayWhenReady).containsExactly(true,true,true,false).inOrder();
  }
  @Test public void testClippedLoopedPeriodsArePlayedFully() throws Exception {
    long startPositionUs=300_000;
    long expectedDurationUs=700_000;
    MediaSource mediaSource=new ClippingMediaSource(new FakeMediaSource(new FakeTimeline(1),null),startPositionUs,startPositionUs + expectedDurationUs);
    Clock clock=new AutoAdvancingFakeClock();
    AtomicReference<Player> playerReference=new AtomicReference<>();
    AtomicLong positionAtDiscontinuityMs=new AtomicLong(C.TIME_UNSET);
    AtomicLong clockAtStartMs=new AtomicLong(C.TIME_UNSET);
    AtomicLong clockAtDiscontinuityMs=new AtomicLong(C.TIME_UNSET);
    EventListener eventListener=new EventListener(){
      @Override public void onPlayerStateChanged(      boolean playWhenReady,      int playbackState){
        if (playbackState == Player.STATE_READY && clockAtStartMs.get() == C.TIME_UNSET) {
          clockAtStartMs.set(clock.elapsedRealtime());
        }
      }
      @Override public void onPositionDiscontinuity(      @DiscontinuityReason int reason){
        if (reason == Player.DISCONTINUITY_REASON_PERIOD_TRANSITION) {
          positionAtDiscontinuityMs.set(playerReference.get().getCurrentPosition());
          clockAtDiscontinuityMs.set(clock.elapsedRealtime());
        }
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testClippedLoopedPeriodsArePlayedFully").executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        playerReference.set(player);
        player.addListener(eventListener);
      }
    }
).pause().setRepeatMode(Player.REPEAT_MODE_ALL).waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,1).playUntilStartOfWindow(0).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
    new ExoPlayerTestRunner.Builder().setClock(clock).setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(positionAtDiscontinuityMs.get()).isAtLeast(0L);
    assertThat(clockAtDiscontinuityMs.get() - clockAtStartMs.get()).isAtLeast(C.usToMs(expectedDurationUs));
  }
  @Test public void testUpdateTrackSelectorThenSeekToUnpreparedPeriod_returnsEmptyTrackGroups() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,C.TIME_UNSET));
    MediaSource[] fakeMediaSources={new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.AUDIO_FORMAT)};
    MediaSource mediaSource=new ConcatenatingMediaSource(fakeMediaSources);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    DefaultTrackSelector trackSelector=new DefaultTrackSelector();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testUpdateTrackSelectorThenSeekToUnpreparedPeriod").pause().waitForPlaybackState(Player.STATE_READY).seek(1,0).play().build();
    List<TrackGroupArray> trackGroupsList=new ArrayList<>();
    List<TrackSelectionArray> trackSelectionsList=new ArrayList<>();
    new Builder().setMediaSource(mediaSource).setTrackSelector(trackSelector).setRenderers(renderer).setActionSchedule(actionSchedule).setEventListener(new EventListener(){
      @Override public void onTracksChanged(      TrackGroupArray trackGroups,      TrackSelectionArray trackSelections){
        trackGroupsList.add(trackGroups);
        trackSelectionsList.add(trackSelections);
      }
    }
).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(trackGroupsList).hasSize(3);
    assertThat(trackGroupsList.get(0).get(0).getFormat(0)).isEqualTo(Builder.VIDEO_FORMAT);
    assertThat(trackGroupsList.get(1)).isEqualTo(TrackGroupArray.EMPTY);
    assertThat(trackSelectionsList.get(1).get(0)).isNull();
    assertThat(trackGroupsList.get(2).get(0).getFormat(0)).isEqualTo(Builder.AUDIO_FORMAT);
  }
  @Test public void testSecondMediaSourceInPlaylistOnlyThrowsWhenPreviousPeriodIsFullyRead() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,10 * C.MICROS_PER_SECOND));
    MediaSource workingMediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT);
    MediaSource failingMediaSource=new FakeMediaSource(null,null,Builder.VIDEO_FORMAT){
      @Override public void maybeThrowSourceInfoRefreshError() throws IOException {
        throw new IOException();
      }
    }
;
    ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(workingMediaSource,failingMediaSource);
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setMediaSource(concatenatingMediaSource).setRenderers(renderer).build(context);
    try {
      testRunner.start().blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    assertThat(renderer.sampleBufferReadCount).isAtLeast(1);
    assertThat(renderer.hasReadStreamToEnd()).isTrue();
  }
  @Test public void testDynamicallyAddedSecondMediaSourceInPlaylistOnlyThrowsWhenPreviousPeriodIsFullyRead() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,10 * C.MICROS_PER_SECOND));
    MediaSource workingMediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT);
    MediaSource failingMediaSource=new FakeMediaSource(null,null,Builder.VIDEO_FORMAT){
      @Override public void maybeThrowSourceInfoRefreshError() throws IOException {
        throw new IOException();
      }
    }
;
    ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(workingMediaSource);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testFailingSecondMediaSourceInPlaylistOnlyThrowsLater").pause().waitForPlaybackState(Player.STATE_READY).executeRunnable(() -> concatenatingMediaSource.addMediaSource(failingMediaSource)).play().build();
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).setRenderers(renderer).build(context);
    try {
      testRunner.start().blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    assertThat(renderer.sampleBufferReadCount).isAtLeast(1);
    assertThat(renderer.hasReadStreamToEnd()).isTrue();
  }
  @Test public void failingDynamicUpdateOnlyThrowsWhenAvailablePeriodHasBeenFullyRead() throws Exception {
    Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,true,10 * C.MICROS_PER_SECOND));
    AtomicReference<Boolean> wasReadyOnce=new AtomicReference<>(false);
    MediaSource mediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT){
      @Override public void maybeThrowSourceInfoRefreshError() throws IOException {
        if (wasReadyOnce.get()) {
          throw new IOException();
        }
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("testFailingDynamicMediaSourceInTimelineOnlyThrowsLater").pause().waitForPlaybackState(Player.STATE_READY).executeRunnable(() -> wasReadyOnce.set(true)).play().build();
    FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
    ExoPlayerTestRunner testRunner=new Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).setRenderers(renderer).build(context);
    try {
      testRunner.start().blockUntilEnded(TIMEOUT_MS);
      fail();
    }
 catch (    ExoPlaybackException e) {
    }
    assertThat(renderer.sampleBufferReadCount).isAtLeast(1);
    assertThat(renderer.hasReadStreamToEnd()).isTrue();
  }
  @Test public void removingLoopingLastPeriodFromPlaylistDoesNotThrow() throws Exception {
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(true,true,100_000));
    MediaSource mediaSource=new FakeMediaSource(timeline,null);
    ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(mediaSource);
    ActionSchedule actionSchedule=new ActionSchedule.Builder("removingLoopingLastPeriodFromPlaylistDoesNotThrow").pause().waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,90).setRepeatMode(Player.REPEAT_MODE_ALL).executeRunnable(concatenatingMediaSource::clear).build();
    new Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  }
  @Test public void seekToUnpreparedWindowWithNonZeroOffsetInConcatenationStartsAtCorrectPosition() throws Exception {
    Timeline timeline=new FakeTimeline(1);
    FakeMediaSource mediaSource=new FakeMediaSource(null,null);
    MediaSource clippedMediaSource=new ClippingMediaSource(mediaSource,3 * C.MICROS_PER_SECOND,C.TIME_END_OF_SOURCE);
    MediaSource concatenatedMediaSource=new ConcatenatingMediaSource(clippedMediaSource);
    AtomicLong positionWhenReady=new AtomicLong();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("seekToUnpreparedWindowWithNonZeroOffsetInConcatenation").pause().waitForPlaybackState(Player.STATE_BUFFERING).seek(10).waitForTimelineChanged().executeRunnable(() -> mediaSource.setNewSourceInfo(timeline,null)).waitForTimelineChanged().waitForPlaybackState(Player.STATE_READY).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        positionWhenReady.set(player.getContentPosition());
      }
    }
).play().build();
    new Builder().setMediaSource(concatenatedMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(positionWhenReady.get()).isEqualTo(10);
  }
  @Test public void seekToUnpreparedWindowWithMultiplePeriodsInConcatenationStartsAtCorrectPeriod() throws Exception {
    long periodDurationMs=5000;
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(2,new Object(),true,false,2 * periodDurationMs * 1000));
    FakeMediaSource mediaSource=new FakeMediaSource(null,null);
    MediaSource concatenatedMediaSource=new ConcatenatingMediaSource(mediaSource);
    AtomicInteger periodIndexWhenReady=new AtomicInteger();
    AtomicLong positionWhenReady=new AtomicLong();
    ActionSchedule actionSchedule=new ActionSchedule.Builder("seekToUnpreparedWindowWithMultiplePeriodsInConcatenation").pause().waitForPlaybackState(Player.STATE_BUFFERING).seek(periodDurationMs + 10).waitForTimelineChanged().executeRunnable(() -> mediaSource.setNewSourceInfo(timeline,null)).waitForTimelineChanged().waitForPlaybackState(Player.STATE_READY).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        periodIndexWhenReady.set(player.getCurrentPeriodIndex());
        positionWhenReady.set(player.getContentPosition());
      }
    }
).play().build();
    new Builder().setMediaSource(concatenatedMediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(periodIndexWhenReady.get()).isEqualTo(1);
    assertThat(positionWhenReady.get()).isEqualTo(periodDurationMs + 10);
  }
  @Test public void periodTransitionReportsCorrectBufferedPosition() throws Exception {
    int periodCount=3;
    long periodDurationUs=5 * C.MICROS_PER_SECOND;
    long windowDurationUs=periodCount * periodDurationUs;
    Timeline timeline=new FakeTimeline(new TimelineWindowDefinition(periodCount,new Object(),true,false,windowDurationUs));
    AtomicReference<Player> playerReference=new AtomicReference<>();
    AtomicLong bufferedPositionAtFirstDiscontinuityMs=new AtomicLong(C.TIME_UNSET);
    EventListener eventListener=new EventListener(){
      @Override public void onPositionDiscontinuity(      @DiscontinuityReason int reason){
        if (reason == Player.DISCONTINUITY_REASON_PERIOD_TRANSITION) {
          if (bufferedPositionAtFirstDiscontinuityMs.get() == C.TIME_UNSET) {
            bufferedPositionAtFirstDiscontinuityMs.set(playerReference.get().getBufferedPosition());
          }
        }
      }
    }
;
    ActionSchedule actionSchedule=new ActionSchedule.Builder("periodTransitionReportsCorrectBufferedPosition").executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        playerReference.set(player);
        player.addListener(eventListener);
      }
    }
).pause().waitForIsLoading(true).waitForIsLoading(false).play().build();
    new Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
    assertThat(bufferedPositionAtFirstDiscontinuityMs.get()).isEqualTo(C.usToMs(windowDurationUs));
  }
  private static ActionSchedule.Builder addSurfaceSwitch(  ActionSchedule.Builder builder){
    final Surface surface1=new Surface(null);
    final Surface surface2=new Surface(null);
    return builder.executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        player.setVideoSurface(surface1);
      }
    }
).executeRunnable(new PlayerRunnable(){
      @Override public void run(      SimpleExoPlayer player){
        player.setVideoSurface(surface2);
      }
    }
);
  }
private static final class PositionGrabbingMessageTarget extends PlayerTarget {
    public int windowIndex;
    public long positionMs;
    public int messageCount;
    public PositionGrabbingMessageTarget(){
      windowIndex=C.INDEX_UNSET;
      positionMs=C.POSITION_UNSET;
    }
    @Override public void handleMessage(    SimpleExoPlayer player,    int messageType,    @Nullable Object message){
      if (player != null) {
        windowIndex=player.getCurrentWindowIndex();
        positionMs=player.getCurrentPosition();
      }
      messageCount++;
    }
  }
}
