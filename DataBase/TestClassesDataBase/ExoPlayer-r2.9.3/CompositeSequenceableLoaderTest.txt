/** 
 * Unit test for  {@link CompositeSequenceableLoader}.
 */
@RunWith(RobolectricTestRunner.class) public final class CompositeSequenceableLoaderTest {
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getBufferedPositionUs()} returns minimum bufferedposition among all sub-loaders.
 */
  @Test public void testGetBufferedPositionUsReturnsMinimumLoaderBufferedPosition(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(1000);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getBufferedPositionUs()} returns minimum bufferedposition that is not  {@link C#TIME_END_OF_SOURCE} among all sub-loaders.
 */
  @Test public void testGetBufferedPositionUsReturnsMinimumNonEndOfSourceLoaderBufferedPosition(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2000);
    FakeSequenceableLoader loader3=new FakeSequenceableLoader(C.TIME_END_OF_SOURCE,C.TIME_END_OF_SOURCE);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2,loader3});
    assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(1000);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getBufferedPositionUs()} returns{@link C#TIME_END_OF_SOURCE} when all sub-loaders have buffered till end-of-source.
 */
  @Test public void testGetBufferedPositionUsReturnsEndOfSourceWhenAllLoaderBufferedTillEndOfSource(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(C.TIME_END_OF_SOURCE,C.TIME_END_OF_SOURCE);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(C.TIME_END_OF_SOURCE,C.TIME_END_OF_SOURCE);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(C.TIME_END_OF_SOURCE);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getNextLoadPositionUs()} returns minimum nextload position among all sub-loaders.
 */
  @Test public void testGetNextLoadPositionUsReturnMinimumLoaderNextLoadPositionUs(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2001);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2000);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(2000);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getNextLoadPositionUs()} returns minimum nextload position that is not  {@link C#TIME_END_OF_SOURCE} among all sub-loaders.
 */
  @Test public void testGetNextLoadPositionUsReturnMinimumNonEndOfSourceLoaderNextLoadPositionUs(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    FakeSequenceableLoader loader3=new FakeSequenceableLoader(1001,C.TIME_END_OF_SOURCE);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2,loader3});
    assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(2000);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#getNextLoadPositionUs()} returns{@link C#TIME_END_OF_SOURCE} when all sub-loaders have next load position at end-of-source.
 */
  @Test public void testGetNextLoadPositionUsReturnsEndOfSourceWhenAllLoaderLoadingLastChunk(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,C.TIME_END_OF_SOURCE);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,C.TIME_END_OF_SOURCE);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(C.TIME_END_OF_SOURCE);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#continueLoading(long)} only allows the loaderwith minimum next load position to continue loading if next load positions are not behind current playback position.
 */
  @Test public void testContinueLoadingOnlyAllowFurthestBehindLoaderToLoadIfNotBehindPlaybackPosition(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    compositeSequenceableLoader.continueLoading(100);
    assertThat(loader1.numInvocations).isEqualTo(1);
    assertThat(loader2.numInvocations).isEqualTo(0);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#continueLoading(long)} allows all loaderswith next load position behind current playback position to continue loading.
 */
  @Test public void testContinueLoadingReturnAllowAllLoadersBehindPlaybackPositionToLoad(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    FakeSequenceableLoader loader3=new FakeSequenceableLoader(1002,2002);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2,loader3});
    compositeSequenceableLoader.continueLoading(3000);
    assertThat(loader1.numInvocations).isEqualTo(1);
    assertThat(loader2.numInvocations).isEqualTo(1);
    assertThat(loader3.numInvocations).isEqualTo(1);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#continueLoading(long)} does not allow loaderwith next load position at end-of-source to continue loading.
 */
  @Test public void testContinueLoadingOnlyNotAllowEndOfSourceLoaderToLoad(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,C.TIME_END_OF_SOURCE);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,C.TIME_END_OF_SOURCE);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    compositeSequenceableLoader.continueLoading(3000);
    assertThat(loader1.numInvocations).isEqualTo(0);
    assertThat(loader2.numInvocations).isEqualTo(0);
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#continueLoading(long)} returns true if the loaderwith minimum next load position can make progress if next load positions are not behind current playback position.
 */
  @Test public void testContinueLoadingReturnTrueIfFurthestBehindLoaderCanMakeProgress(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    loader1.setNextChunkDurationUs(1000);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.continueLoading(100)).isTrue();
  }
  /** 
 * Tests that  {@link CompositeSequenceableLoader#continueLoading(long)} returns true if any loaderthat are behind current playback position can make progress, even if it is not the one with minimum next load position.
 */
  @Test public void testContinueLoadingReturnTrueIfLoaderBehindPlaybackPositionCanMakeProgress(){
    FakeSequenceableLoader loader1=new FakeSequenceableLoader(1000,2000);
    FakeSequenceableLoader loader2=new FakeSequenceableLoader(1001,2001);
    loader2.setNextChunkDurationUs(1000);
    CompositeSequenceableLoader compositeSequenceableLoader=new CompositeSequenceableLoader(new SequenceableLoader[]{loader1,loader2});
    assertThat(compositeSequenceableLoader.continueLoading(3000)).isTrue();
  }
private static class FakeSequenceableLoader implements SequenceableLoader {
    private long bufferedPositionUs;
    private long nextLoadPositionUs;
    private int numInvocations;
    private int nextChunkDurationUs;
    private FakeSequenceableLoader(    long bufferedPositionUs,    long nextLoadPositionUs){
      this.bufferedPositionUs=bufferedPositionUs;
      this.nextLoadPositionUs=nextLoadPositionUs;
    }
    @Override public long getBufferedPositionUs(){
      return bufferedPositionUs;
    }
    @Override public long getNextLoadPositionUs(){
      return nextLoadPositionUs;
    }
    @Override public boolean continueLoading(    long positionUs){
      numInvocations++;
      boolean loaded=nextChunkDurationUs != 0;
      bufferedPositionUs=nextLoadPositionUs;
      nextLoadPositionUs+=nextChunkDurationUs;
      nextChunkDurationUs=0;
      return loaded;
    }
    @Override public void reevaluateBuffer(    long positionUs){
    }
    private void setNextChunkDurationUs(    int nextChunkDurationUs){
      this.nextChunkDurationUs=nextChunkDurationUs;
    }
  }
}
