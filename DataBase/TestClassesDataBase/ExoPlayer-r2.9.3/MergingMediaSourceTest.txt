/** 
 * Unit tests for  {@link MergingMediaSource}. 
 */
@RunWith(RobolectricTestRunner.class) @Config(shadows={RobolectricUtil.CustomLooper.class,RobolectricUtil.CustomMessageQueue.class}) public class MergingMediaSourceTest {
  @Test public void testMergingDynamicTimelines() throws IOException {
    FakeTimeline firstTimeline=new FakeTimeline(new TimelineWindowDefinition(true,true,C.TIME_UNSET));
    FakeTimeline secondTimeline=new FakeTimeline(new TimelineWindowDefinition(true,true,C.TIME_UNSET));
    testMergingMediaSourcePrepare(firstTimeline,secondTimeline);
  }
  @Test public void testMergingStaticTimelines() throws IOException {
    FakeTimeline firstTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,20));
    FakeTimeline secondTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,10));
    testMergingMediaSourcePrepare(firstTimeline,secondTimeline);
  }
  @Test public void testMergingTimelinesWithDifferentPeriodCounts() throws IOException {
    FakeTimeline firstTimeline=new FakeTimeline(new TimelineWindowDefinition(1,null));
    FakeTimeline secondTimeline=new FakeTimeline(new TimelineWindowDefinition(2,null));
    try {
      testMergingMediaSourcePrepare(firstTimeline,secondTimeline);
      fail("Expected merging to fail.");
    }
 catch (    IllegalMergeException e) {
      assertThat(e.reason).isEqualTo(IllegalMergeException.REASON_PERIOD_COUNT_MISMATCH);
    }
  }
  @Test public void testMergingMediaSourcePeriodCreation() throws Exception {
    FakeMediaSource[] mediaSources=new FakeMediaSource[2];
    for (int i=0; i < mediaSources.length; i++) {
      mediaSources[i]=new FakeMediaSource(new FakeTimeline(2),null);
    }
    MergingMediaSource mediaSource=new MergingMediaSource(mediaSources);
    MediaSourceTestRunner testRunner=new MediaSourceTestRunner(mediaSource,null);
    try {
      testRunner.prepareSource();
      testRunner.assertPrepareAndReleaseAllPeriods();
      for (      FakeMediaSource element : mediaSources) {
        assertThat(element.getCreatedMediaPeriods()).isNotEmpty();
      }
      testRunner.releaseSource();
    }
  finally {
      testRunner.release();
    }
  }
  /** 
 * Wraps the specified timelines in a  {@link MergingMediaSource}, prepares it and checks that it forwards the first of the wrapped timelines.
 */
  private static void testMergingMediaSourcePrepare(  Timeline... timelines) throws IOException {
    FakeMediaSource[] mediaSources=new FakeMediaSource[timelines.length];
    for (int i=0; i < timelines.length; i++) {
      mediaSources[i]=new FakeMediaSource(timelines[i],null);
    }
    MergingMediaSource mergingMediaSource=new MergingMediaSource(mediaSources);
    MediaSourceTestRunner testRunner=new MediaSourceTestRunner(mergingMediaSource,null);
    try {
      Timeline timeline=testRunner.prepareSource();
      assertThat(timeline).isEqualTo(timelines[0]);
      testRunner.releaseSource();
      for (      FakeMediaSource mediaSource : mediaSources) {
        mediaSource.assertReleased();
      }
    }
  finally {
      testRunner.release();
    }
  }
}
