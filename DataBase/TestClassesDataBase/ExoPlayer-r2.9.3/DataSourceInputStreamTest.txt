/** 
 * Unit tests for  {@link DataSourceInputStream}.
 */
@RunWith(RobolectricTestRunner.class) public final class DataSourceInputStreamTest {
  private static final byte[] TEST_DATA=TestUtil.buildTestData(16);
  @Test public void testReadSingleBytes() throws IOException {
    DataSourceInputStream inputStream=buildTestInputStream();
    assertThat(inputStream.bytesRead()).isEqualTo(0);
    for (int i=0; i < TEST_DATA.length; i++) {
      int readByte=inputStream.read();
      assertThat(0 <= readByte && readByte < 256).isTrue();
      assertThat(readByte).isEqualTo(TEST_DATA[i] & 0xFF);
      assertThat(inputStream.bytesRead()).isEqualTo(i + 1);
    }
    assertThat(inputStream.read()).isEqualTo(-1);
    assertThat(inputStream.bytesRead()).isEqualTo(TEST_DATA.length);
    inputStream.close();
  }
  @Test public void testRead() throws IOException {
    DataSourceInputStream inputStream=buildTestInputStream();
    byte[] readBytes=new byte[TEST_DATA.length];
    int totalBytesRead=0;
    while (totalBytesRead < TEST_DATA.length) {
      int bytesRead=inputStream.read(readBytes,totalBytesRead,TEST_DATA.length - totalBytesRead);
      assertThat(bytesRead).isGreaterThan(0);
      totalBytesRead+=bytesRead;
      assertThat(inputStream.bytesRead()).isEqualTo(totalBytesRead);
    }
    assertThat(readBytes).isEqualTo(TEST_DATA);
    assertThat(inputStream.bytesRead()).isEqualTo(TEST_DATA.length);
    assertThat(totalBytesRead).isEqualTo(TEST_DATA.length);
    assertThat(inputStream.read()).isEqualTo(-1);
    inputStream.close();
  }
  @Test public void testSkip() throws IOException {
    DataSourceInputStream inputStream=buildTestInputStream();
    long totalBytesSkipped=0;
    while (totalBytesSkipped < TEST_DATA.length) {
      long bytesSkipped=inputStream.skip(Long.MAX_VALUE);
      assertThat(bytesSkipped > 0).isTrue();
      totalBytesSkipped+=bytesSkipped;
      assertThat(inputStream.bytesRead()).isEqualTo(totalBytesSkipped);
    }
    assertThat(inputStream.bytesRead()).isEqualTo(TEST_DATA.length);
    assertThat(totalBytesSkipped).isEqualTo(TEST_DATA.length);
    assertThat(inputStream.read()).isEqualTo(-1);
    inputStream.close();
  }
  private static DataSourceInputStream buildTestInputStream(){
    FakeDataSource fakeDataSource=new FakeDataSource();
    fakeDataSource.getDataSet().newDefaultData().appendReadData(Arrays.copyOfRange(TEST_DATA,0,5)).appendReadData(Arrays.copyOfRange(TEST_DATA,5,10)).appendReadData(Arrays.copyOfRange(TEST_DATA,10,15)).appendReadData(Arrays.copyOfRange(TEST_DATA,15,TEST_DATA.length));
    return new DataSourceInputStream(fakeDataSource,new DataSpec(Uri.EMPTY));
  }
}
