/** 
 * Unit test for  {@link OggExtractor}. 
 */
@RunWith(RobolectricTestRunner.class) public final class OggExtractorTest {
  private static final ExtractorFactory OGG_EXTRACTOR_FACTORY=OggExtractor::new;
  @Test public void testOpus() throws Exception {
    ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY,"ogg/bear.opus");
  }
  @Test public void testFlac() throws Exception {
    ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY,"ogg/bear_flac.ogg");
  }
  @Test public void testFlacNoSeektable() throws Exception {
    ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY,"ogg/bear_flac_noseektable.ogg");
  }
  @Test public void testVorbis() throws Exception {
    ExtractorAsserts.assertBehavior(OGG_EXTRACTOR_FACTORY,"ogg/bear_vorbis.ogg");
  }
  @Test public void testSniffVorbis() throws Exception {
    byte[] data=TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,1),TestUtil.createByteArray(7),new byte[]{0x01,'v','o','r','b','i','s'});
    assertThat(sniff(data)).isTrue();
  }
  @Test public void testSniffFlac() throws Exception {
    byte[] data=TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,1),TestUtil.createByteArray(5),new byte[]{0x7F,'F','L','A','C'});
    assertThat(sniff(data)).isTrue();
  }
  @Test public void testSniffFailsOpusFile() throws Exception {
    byte[] data=TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,0x00),new byte[]{'O','p','u','s'});
    assertThat(sniff(data)).isFalse();
  }
  @Test public void testSniffFailsInvalidOggHeader() throws Exception {
    byte[] data=OggTestData.buildOggHeader(0x00,0,1000,0x00);
    assertThat(sniff(data)).isFalse();
  }
  @Test public void testSniffInvalidHeader() throws Exception {
    byte[] data=TestUtil.joinByteArrays(OggTestData.buildOggHeader(0x02,0,1000,1),TestUtil.createByteArray(7),new byte[]{0x7F,'X','o','r','b','i','s'});
    assertThat(sniff(data)).isFalse();
  }
  @Test public void testSniffFailsEOF() throws Exception {
    byte[] data=OggTestData.buildOggHeader(0x02,0,1000,0x00);
    assertThat(sniff(data)).isFalse();
  }
  private boolean sniff(  byte[] data) throws InterruptedException, IOException {
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(data).setSimulateIOErrors(true).setSimulateUnknownLength(true).setSimulatePartialReads(true).build();
    return TestUtil.sniffTestData(OGG_EXTRACTOR_FACTORY.create(),input);
  }
}
