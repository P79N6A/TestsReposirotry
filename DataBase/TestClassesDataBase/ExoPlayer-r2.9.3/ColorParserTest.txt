/** 
 * Unit test for <code>ColorParser</code>.
 */
@RunWith(RobolectricTestRunner.class) public final class ColorParserTest {
  @Test(expected=IllegalArgumentException.class) public void testParseUnknownColor(){
    ColorParser.parseTtmlColor("colorOfAnElectron");
  }
  @Test(expected=IllegalArgumentException.class) public void testParseNull(){
    ColorParser.parseTtmlColor(null);
  }
  @Test(expected=IllegalArgumentException.class) public void testParseEmpty(){
    ColorParser.parseTtmlColor("");
  }
  @Test(expected=IllegalArgumentException.class) public void testRgbColorParsingRgbValuesNegative(){
    ColorParser.parseTtmlColor("rgb(-4, 55, 209)");
  }
  @Test public void testHexCodeParsing(){
    assertThat(parseTtmlColor("#FFFFFF")).isEqualTo(WHITE);
    assertThat(parseTtmlColor("#FFFFFFFF")).isEqualTo(WHITE);
    assertThat(parseTtmlColor("#123456")).isEqualTo(parseColor("#FF123456"));
    assertThat(parseTtmlColor("#FFFFFF00")).isEqualTo(parseColor("#00FFFFFF"));
    assertThat(parseTtmlColor("#12345678")).isEqualTo(parseColor("#78123456"));
  }
  @Test public void testRgbColorParsing(){
    assertThat(parseTtmlColor("rgb(255,255,255)")).isEqualTo(WHITE);
    assertThat(parseTtmlColor("   rgb (      255, 255, 255)")).isEqualTo(WHITE);
  }
  @Test public void testRgbColorParsingRgbValuesOutOfBounds(){
    int outOfBounds=ColorParser.parseTtmlColor("rgb(999, 999, 999)");
    int color=Color.rgb(999,999,999);
    assertThat(outOfBounds).isEqualTo(color);
  }
  @Test public void testRgbaColorParsing(){
    assertThat(parseTtmlColor("rgba(255,255,255,255)")).isEqualTo(WHITE);
    assertThat(parseTtmlColor("rgba(255,255,255,255)")).isEqualTo(argb(255,255,255,255));
    assertThat(parseTtmlColor("rgba(0, 0, 0, 255)")).isEqualTo(BLACK);
    assertThat(parseTtmlColor("rgba(0, 0, 255, 0)")).isEqualTo(argb(0,0,0,255));
    assertThat(parseTtmlColor("rgba(255, 0, 0, 255)")).isEqualTo(RED);
    assertThat(parseTtmlColor("rgba(255, 0, 255, 0)")).isEqualTo(argb(0,255,0,255));
    assertThat(parseTtmlColor("rgba(255, 0, 0, 205)")).isEqualTo(argb(205,255,0,0));
  }
}
