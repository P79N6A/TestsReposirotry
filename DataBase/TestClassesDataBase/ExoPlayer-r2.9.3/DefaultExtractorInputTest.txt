/** 
 * Test for  {@link DefaultExtractorInput}.
 */
@RunWith(RobolectricTestRunner.class) public class DefaultExtractorInputTest {
  private static final String TEST_URI="http://www.google.com";
  private static final byte[] TEST_DATA=new byte[]{0,1,2,3,4,5,6,7,8};
  private static final int LARGE_TEST_DATA_LENGTH=8192;
  @Test public void testInitialPosition() throws Exception {
    FakeDataSource testDataSource=buildDataSource();
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,123,C.LENGTH_UNSET);
    assertThat(input.getPosition()).isEqualTo(123);
  }
  @Test public void testRead() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    int bytesRead=0;
    bytesRead+=input.read(target,0,TEST_DATA.length);
    assertThat(bytesRead).isEqualTo(3);
    bytesRead+=input.read(target,3,TEST_DATA.length);
    assertThat(bytesRead).isEqualTo(6);
    bytesRead+=input.read(target,6,TEST_DATA.length);
    assertThat(bytesRead).isEqualTo(9);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
    int expectedEndOfInput=input.read(target,0,TEST_DATA.length);
    assertThat(expectedEndOfInput).isEqualTo(RESULT_END_OF_INPUT);
  }
  @Test public void testReadPeeked() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.advancePeekPosition(TEST_DATA.length);
    int bytesRead=input.read(target,0,TEST_DATA.length);
    assertThat(bytesRead).isEqualTo(TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
  }
  @Test public void testReadMoreDataPeeked() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.advancePeekPosition(TEST_DATA.length);
    int bytesRead=input.read(target,0,TEST_DATA.length + 1);
    assertThat(bytesRead).isEqualTo(TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
  }
  @Test public void testReadFullyOnce() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.readFully(target,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);
    boolean result=input.readFully(target,0,1,true);
    assertThat(result).isFalse();
    try {
      input.readFully(target,0,1);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testReadFullyTwice() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[5];
    input.readFully(target,0,5);
    assertThat(Arrays.equals(copyOf(TEST_DATA,5),target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(5);
    target=new byte[4];
    input.readFully(target,0,4);
    assertThat(Arrays.equals(copyOfRange(TEST_DATA,5,9),target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(5 + 4);
  }
  @Test public void testReadFullyTooMuch() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    try {
      byte[] target=new byte[TEST_DATA.length + 1];
      input.readFully(target,0,TEST_DATA.length + 1);
      fail();
    }
 catch (    EOFException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
    input=createDefaultExtractorInput();
    try {
      byte[] target=new byte[TEST_DATA.length + 1];
      input.readFully(target,0,TEST_DATA.length + 1,true);
      fail();
    }
 catch (    EOFException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
  }
  @Test public void testReadFullyWithFailingDataSource() throws Exception {
    FakeDataSource testDataSource=buildFailingDataSource();
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
    try {
      byte[] target=new byte[TEST_DATA.length];
      input.readFully(target,0,TEST_DATA.length);
      fail();
    }
 catch (    IOException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
  }
  @Test public void testReadFullyHalfPeeked() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.advancePeekPosition(4);
    input.readFully(target,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);
  }
  @Test public void testSkip() throws Exception {
    FakeDataSource testDataSource=buildDataSource();
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
    for (int i=0; i < 3; i++) {
      assertThat(input.skip(TEST_DATA.length)).isEqualTo(3);
    }
    int expectedEndOfInput=input.skip(TEST_DATA.length);
    assertThat(expectedEndOfInput).isEqualTo(RESULT_END_OF_INPUT);
  }
  @Test public void testLargeSkip() throws Exception {
    FakeDataSource testDataSource=buildLargeDataSource();
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
    int bytesToSkip=LARGE_TEST_DATA_LENGTH;
    while (bytesToSkip > 0) {
      bytesToSkip-=input.skip(bytesToSkip);
    }
  }
  @Test public void testSkipFullyOnce() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    input.skipFully(TEST_DATA.length);
    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);
    boolean result=input.skipFully(1,true);
    assertThat(result).isFalse();
    try {
      input.skipFully(1);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testSkipFullyTwice() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    input.skipFully(5);
    assertThat(input.getPosition()).isEqualTo(5);
    input.skipFully(4);
    assertThat(input.getPosition()).isEqualTo(5 + 4);
  }
  @Test public void testSkipFullyTwicePeeked() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    input.advancePeekPosition(TEST_DATA.length);
    int halfLength=TEST_DATA.length / 2;
    input.skipFully(halfLength);
    assertThat(input.getPosition()).isEqualTo(halfLength);
    input.skipFully(TEST_DATA.length - halfLength);
    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);
  }
  @Test public void testSkipFullyTooMuch() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    try {
      input.skipFully(TEST_DATA.length + 1);
      fail();
    }
 catch (    EOFException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
    input=createDefaultExtractorInput();
    try {
      input.skipFully(TEST_DATA.length + 1,true);
      fail();
    }
 catch (    EOFException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
  }
  @Test public void testSkipFullyWithFailingDataSource() throws Exception {
    FakeDataSource testDataSource=buildFailingDataSource();
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
    try {
      input.skipFully(TEST_DATA.length);
      fail();
    }
 catch (    IOException e) {
    }
    assertThat(input.getPosition()).isEqualTo(0);
  }
  @Test public void testSkipFullyLarge() throws Exception {
    int largeSkipSize=1024 * 1024;
    FakeDataSource testDataSource=new FakeDataSource();
    testDataSource.getDataSet().newDefaultData().appendReadData(new byte[largeSkipSize]);
    testDataSource.open(new DataSpec(Uri.parse(TEST_URI)));
    DefaultExtractorInput input=new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
    input.skipFully(largeSkipSize);
    assertThat(input.getPosition()).isEqualTo(largeSkipSize);
    try {
      input.skipFully(1);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testPeekFully() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.peekFully(target,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(0);
    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);
    byte[] target2=new byte[TEST_DATA.length];
    input.readFully(target2,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target2)).isTrue();
    assertThat(input.getPosition()).isEqualTo(TEST_DATA.length);
    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);
    try {
      input.peekFully(target,0,1);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testPeekFullyAfterEofExceptionPeeksAsExpected() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length + 10];
    try {
      input.peekFully(target,0,target.length);
      fail();
    }
 catch (    EOFException expected) {
    }
    input.peekFully(target,0,TEST_DATA.length);
    assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,Arrays.copyOf(target,TEST_DATA.length))).isTrue();
  }
  @Test public void testResetPeekPosition() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    input.peekFully(target,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target)).isTrue();
    assertThat(input.getPosition()).isEqualTo(0);
    input.resetPeekPosition();
    byte[] target2=new byte[TEST_DATA.length];
    input.peekFully(target2,0,TEST_DATA.length);
    assertThat(Arrays.equals(TEST_DATA,target2)).isTrue();
    try {
      input.peekFully(target,0,1);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testPeekFullyAtEndOfStreamWithAllowEndOfInputSucceeds() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    assertThat(input.peekFully(target,0,TEST_DATA.length,true)).isTrue();
    assertThat(input.peekFully(target,0,1,true)).isFalse();
  }
  @Test public void testPeekFullyAtEndThenReadEndOfInput() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    assertThat(input.peekFully(target,0,TEST_DATA.length,false)).isTrue();
    assertThat(input.peekFully(target,0,1,true)).isFalse();
    assertThat(input.readFully(target,0,TEST_DATA.length,false)).isTrue();
    assertThat(input.readFully(target,0,1,true)).isFalse();
  }
  @Test public void testPeekFullyAcrossEndOfInputWithAllowEndOfInputFails() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    assertThat(input.peekFully(target,0,TEST_DATA.length - 1,true)).isTrue();
    try {
      input.peekFully(target,0,2,true);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  @Test public void testResetAndPeekFullyPastEndOfStreamWithAllowEndOfInputFails() throws Exception {
    DefaultExtractorInput input=createDefaultExtractorInput();
    byte[] target=new byte[TEST_DATA.length];
    assertThat(input.peekFully(target,0,TEST_DATA.length,true)).isTrue();
    input.resetPeekPosition();
    try {
      input.peekFully(target,0,TEST_DATA.length + 1,true);
      fail();
    }
 catch (    EOFException e) {
    }
  }
  private static FakeDataSource buildDataSource() throws Exception {
    FakeDataSource testDataSource=new FakeDataSource();
    testDataSource.getDataSet().newDefaultData().appendReadData(Arrays.copyOfRange(TEST_DATA,0,3)).appendReadData(Arrays.copyOfRange(TEST_DATA,3,6)).appendReadData(Arrays.copyOfRange(TEST_DATA,6,9));
    testDataSource.open(new DataSpec(Uri.parse(TEST_URI)));
    return testDataSource;
  }
  private static FakeDataSource buildFailingDataSource() throws Exception {
    FakeDataSource testDataSource=new FakeDataSource();
    testDataSource.getDataSet().newDefaultData().appendReadData(Arrays.copyOfRange(TEST_DATA,0,6)).appendReadError(new IOException()).appendReadData(Arrays.copyOfRange(TEST_DATA,6,9));
    testDataSource.open(new DataSpec(Uri.parse(TEST_URI)));
    return testDataSource;
  }
  private static FakeDataSource buildLargeDataSource() throws Exception {
    FakeDataSource testDataSource=new FakeDataSource();
    testDataSource.getDataSet().newDefaultData().appendReadData(new byte[LARGE_TEST_DATA_LENGTH]);
    testDataSource.open(new DataSpec(Uri.parse(TEST_URI)));
    return testDataSource;
  }
  private static DefaultExtractorInput createDefaultExtractorInput() throws Exception {
    FakeDataSource testDataSource=buildDataSource();
    return new DefaultExtractorInput(testDataSource,0,C.LENGTH_UNSET);
  }
}
