@SuppressWarnings("HidingField") private static class MediaClockRenderer extends FakeMediaClockRenderer {
  private final boolean playbackParametersAreMutable;
  private final boolean isReady;
  private final boolean isEnded;
  public PlaybackParameters playbackParameters;
  public long positionUs;
  public MediaClockRenderer() throws ExoPlaybackException {
    this(PlaybackParameters.DEFAULT,false,true,false,false);
  }
  public MediaClockRenderer(  PlaybackParameters playbackParameters,  boolean playbackParametersAreMutable) throws ExoPlaybackException {
    this(playbackParameters,playbackParametersAreMutable,true,false,false);
  }
  public MediaClockRenderer(  boolean isReady,  boolean isEnded,  boolean hasReadStreamToEnd) throws ExoPlaybackException {
    this(PlaybackParameters.DEFAULT,false,isReady,isEnded,hasReadStreamToEnd);
  }
  private MediaClockRenderer(  PlaybackParameters playbackParameters,  boolean playbackParametersAreMutable,  boolean isReady,  boolean isEnded,  boolean hasReadStreamToEnd) throws ExoPlaybackException {
    this.playbackParameters=playbackParameters;
    this.playbackParametersAreMutable=playbackParametersAreMutable;
    this.isReady=isReady;
    this.isEnded=isEnded;
    this.positionUs=TEST_POSITION_US;
    if (!hasReadStreamToEnd) {
      resetPosition(0);
    }
  }
  @Override public long getPositionUs(){
    return positionUs;
  }
  @Override public PlaybackParameters setPlaybackParameters(  PlaybackParameters playbackParameters){
    if (playbackParametersAreMutable) {
      this.playbackParameters=playbackParameters;
    }
    return this.playbackParameters;
  }
  @Override public PlaybackParameters getPlaybackParameters(){
    return playbackParameters;
  }
  @Override public boolean isReady(){
    return isReady;
  }
  @Override public boolean isEnded(){
    return isEnded;
  }
}
