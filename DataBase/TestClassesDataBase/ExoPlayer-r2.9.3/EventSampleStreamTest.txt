/** 
 * Unit test for  {@link EventSampleStream}.
 */
@RunWith(RobolectricTestRunner.class) public final class EventSampleStreamTest {
  private static final String SCHEME_ID="urn:test";
  private static final String VALUE="123";
  private static final Format FORMAT=Format.createSampleFormat("urn:test/123",MimeTypes.APPLICATION_EMSG,null,Format.NO_VALUE,null);
  private static final byte[] MESSAGE_DATA=new byte[]{1,2,3,4};
  private static final long DURATION_MS=3000;
  private static final long TIME_SCALE=1000;
  private FormatHolder formatHolder;
  private MetadataInputBuffer inputBuffer;
  private EventMessageEncoder eventMessageEncoder;
  @Before public void setUp(){
    formatHolder=new FormatHolder();
    inputBuffer=new MetadataInputBuffer();
    eventMessageEncoder=new EventMessageEncoder();
  }
  /** 
 * Tests that  {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} willreturn format for the first call.
 */
  @Test public void testReadDataReturnFormatForFirstRead(){
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[0],new EventMessage[0]);
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,false);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_FORMAT_READ);
    assertThat(formatHolder.format).isEqualTo(FORMAT);
  }
  /** 
 * Tests that a non-dynamic  {@link EventSampleStream} will return a buffer with{@link C#BUFFER_FLAG_END_OF_STREAM} when trying to read sample out-of-bound.
 */
  @Test public void testReadDataOutOfBoundReturnEndOfStreamAfterFormatForNonDynamicEventSampleStream(){
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[0],new EventMessage[0]);
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,false);
    readData(sampleStream);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.isEndOfStream()).isTrue();
  }
  /** 
 * Tests that a dynamic  {@link EventSampleStream} will return {@link C#RESULT_NOTHING_READ}when trying to read sample out-of-bound.
 */
  @Test public void testReadDataOutOfBoundReturnEndOfStreamAfterFormatForDynamicEventSampleStream(){
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[0],new EventMessage[0]);
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,true);
    readData(sampleStream);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_NOTHING_READ);
  }
  /** 
 * Tests that  {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} willreturn sample data after the first call.
 */
  @Test public void testReadDataReturnDataAfterFormat(){
    long presentationTimeUs=1000000;
    EventMessage eventMessage=newEventMessageWithIdAndTime(1,presentationTimeUs);
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs},new EventMessage[]{eventMessage});
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,false);
    readData(sampleStream);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage));
  }
  /** 
 * Tests that  {@link EventSampleStream#skipData(long)} will skip until the given position, andthe next  {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from that position.
 */
  @Test public void testSkipDataThenReadDataReturnDataFromSkippedPosition(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,false);
    readData(sampleStream);
    int skipped=sampleStream.skipData(presentationTimeUs2);
    int result=readData(sampleStream);
    assertThat(skipped).isEqualTo(1);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage2));
  }
  /** 
 * Tests that  {@link EventSampleStream#seekToUs(long)} (long)} will seek to the given position,and the next  {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from that position.
 */
  @Test public void testSeekToUsThenReadDataReturnDataFromSeekPosition(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventStream eventStream=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
    EventSampleStream sampleStream=new EventSampleStream(eventStream,FORMAT,false);
    readData(sampleStream);
    sampleStream.seekToUs(presentationTimeUs2);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage2));
  }
  /** 
 * Tests that  {@link EventSampleStream#updateEventStream(EventStream,boolean)} will update theunderlying event stream, but keep the read timestamp, so the next {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from after the last read sample timestamp.
 */
  @Test public void testUpdateEventStreamContinueToReadAfterLastReadSamplePresentationTime(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    long presentationTimeUs3=3000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
    EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
    EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
    EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
    readData(sampleStream);
    readData(sampleStream);
    readData(sampleStream);
    sampleStream.updateEventStream(eventStream2,true);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage3));
  }
  /** 
 * Tests that  {@link EventSampleStream#updateEventStream(EventStream,boolean)} will update theunderlying event stream, but keep the timestamp the stream has skipped to, so the next {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from the skipped position.
 */
  @Test public void testSkipDataThenUpdateStreamContinueToReadFromSkippedPosition(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    long presentationTimeUs3=3000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
    EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
    EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
    EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
    readData(sampleStream);
    sampleStream.skipData(presentationTimeUs2 + 1);
    sampleStream.updateEventStream(eventStream2,true);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage3));
  }
  /** 
 * Tests that  {@link EventSampleStream#skipData(long)} will only skip to the point right afterit last event. A following  {@link EventSampleStream#updateEventStream(EventStream,boolean)}will update the underlying event stream and keep the timestamp the stream has skipped to, so the next  {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from the skipped position.
 */
  @Test public void testSkipDataThenUpdateStreamContinueToReadDoNotSkippedMoreThanAvailable(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    long presentationTimeUs3=3000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
    EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1},new EventMessage[]{eventMessage1});
    EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
    EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
    readData(sampleStream);
    sampleStream.skipData(presentationTimeUs2 + 1);
    sampleStream.updateEventStream(eventStream2,true);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage2));
  }
  /** 
 * Tests that  {@link EventSampleStream#updateEventStream(EventStream,boolean)} will update theunderlying event stream, but keep the timestamp the stream has seek to, so the next {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from the seek position.
 */
  @Test public void testSeekToUsThenUpdateStreamContinueToReadFromSeekPosition(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    long presentationTimeUs3=3000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
    EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
    EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
    EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
    readData(sampleStream);
    sampleStream.seekToUs(presentationTimeUs2);
    sampleStream.updateEventStream(eventStream2,true);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage2));
  }
  /** 
 * Tests that  {@link EventSampleStream#updateEventStream(EventStream,boolean)} will update theunderlying event stream, but keep the timestamp the stream has seek to, so the next {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from the seek position.
 */
  @Test public void testSeekToThenUpdateStreamContinueToReadFromSeekPositionEvenSeekMoreThanAvailable(){
    long presentationTimeUs1=1000000;
    long presentationTimeUs2=2000000;
    long presentationTimeUs3=3000000;
    EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
    EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
    EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
    EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1},new EventMessage[]{eventMessage1});
    EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
    EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
    readData(sampleStream);
    sampleStream.seekToUs(presentationTimeUs2 + 1);
    sampleStream.updateEventStream(eventStream2,true);
    int result=readData(sampleStream);
    assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
    assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage3));
  }
  private int readData(  EventSampleStream sampleStream){
    inputBuffer.clear();
    return sampleStream.readData(formatHolder,inputBuffer,false);
  }
  private EventMessage newEventMessageWithIdAndTime(  int id,  long presentationTimeUs){
    return new EventMessage(SCHEME_ID,VALUE,DURATION_MS,id,MESSAGE_DATA,presentationTimeUs);
  }
  private byte[] getEncodedMessage(  EventMessage eventMessage){
    return eventMessageEncoder.encode(eventMessage,TIME_SCALE);
  }
}
