private static class FakeDownloader implements Downloader {
  private final com.google.android.exoplayer2.util.ConditionVariable blocker;
  private final boolean isRemoveAction;
  private CountDownLatch started;
  private boolean ignoreInterrupts;
  private volatile boolean enableDownloadIOException;
  private volatile int downloadedBytes=C.LENGTH_UNSET;
  private FakeDownloader(  boolean isRemoveAction){
    this.isRemoveAction=isRemoveAction;
    this.started=new CountDownLatch(1);
    this.blocker=new com.google.android.exoplayer2.util.ConditionVariable();
  }
  @Override public void download() throws InterruptedException, IOException {
    assertThat(isRemoveAction).isFalse();
    started.countDown();
    block();
    if (enableDownloadIOException) {
      throw new IOException();
    }
  }
  @Override public void cancel(){
  }
  @Override public void remove() throws InterruptedException {
    assertThat(isRemoveAction).isTrue();
    started.countDown();
    block();
  }
  private void block() throws InterruptedException {
    try {
      while (true) {
        try {
          blocker.block();
          break;
        }
 catch (        InterruptedException e) {
          if (!ignoreInterrupts) {
            throw e;
          }
        }
      }
    }
  finally {
      blocker.close();
    }
  }
  private FakeDownloader assertStarted(  int timeout) throws InterruptedException {
    assertThat(started.await(timeout,TimeUnit.MILLISECONDS)).isTrue();
    started=new CountDownLatch(1);
    return this;
  }
  private FakeDownloader unblock(){
    blocker.open();
    return this;
  }
  @Override public long getDownloadedBytes(){
    return downloadedBytes;
  }
  @Override public float getDownloadPercentage(){
    return Float.NaN;
  }
}
