/** 
 * Tests for  {@link Projection}. 
 */
@RunWith(RobolectricTestRunner.class) public class ProjectionTest {
  private static final float EPSILON=.00001f;
  private static final float RADIUS=1;
  private static final int LATITUDES=12;
  private static final int LONGITUDES=24;
  private static final float VERTICAL_FOV_DEGREES=180;
  private static final float HORIZONTAL_FOV_DEGREES=360;
  @Test public void testSphericalMesh() throws Exception {
    Projection projection=Projection.createEquirectangular(RADIUS,LATITUDES,LONGITUDES,VERTICAL_FOV_DEGREES,HORIZONTAL_FOV_DEGREES,C.STEREO_MODE_MONO);
    Projection.SubMesh subMesh=projection.leftMesh.getSubMesh(0);
    assertThat(subMesh.getVertexCount()).isGreaterThan(LATITUDES * LONGITUDES);
    float[] data=subMesh.vertices;
    for (int i=0; i < data.length; ) {
      float x=data[i++];
      float y=data[i++];
      float z=data[i++];
      assertEquals(RADIUS,Math.sqrt(x * x + y * y + z * z),EPSILON);
    }
  }
  @Test public void testArgumentValidation(){
    checkIllegalArgumentException(0,1,1,1,1);
    checkIllegalArgumentException(1,0,1,1,1);
    checkIllegalArgumentException(1,1,0,1,1);
    checkIllegalArgumentException(1,1,1,0,1);
    checkIllegalArgumentException(1,1,1,181,1);
    checkIllegalArgumentException(1,1,1,1,0);
    checkIllegalArgumentException(1,1,1,1,361);
  }
  private void checkIllegalArgumentException(  float radius,  int latitudes,  int longitudes,  float verticalFovDegrees,  float horizontalFovDegrees){
    try {
      Projection.createEquirectangular(radius,latitudes,longitudes,verticalFovDegrees,horizontalFovDegrees,C.STEREO_MODE_MONO);
      fail();
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
