/** 
 * Test for  {@link Aes128DataSource}. 
 */
@RunWith(RobolectricTestRunner.class) public class Aes128DataSourceTest {
  @Test public void test_OpenCallsUpstreamOpen_CloseCallsUpstreamClose() throws IOException {
    UpstreamDataSource upstream=new UpstreamDataSource();
    Aes128DataSource testInstance=new TestAes123DataSource(upstream,new byte[16],new byte[16]);
    assertThat(upstream.opened).isFalse();
    Uri uri=Uri.parse("http.abc.com/def");
    testInstance.open(new DataSpec(uri));
    assertThat(upstream.opened).isTrue();
    testInstance.close();
    assertThat(upstream.opened).isFalse();
  }
  @Test public void test_OpenCallsUpstreamThrowingOpen_CloseCallsUpstreamClose() throws IOException {
    UpstreamDataSource upstream=new UpstreamDataSource(){
      @Override public long open(      DataSpec dataSpec) throws IOException {
        throw new IOException();
      }
    }
;
    Aes128DataSource testInstance=new TestAes123DataSource(upstream,new byte[16],new byte[16]);
    assertThat(upstream.opened).isFalse();
    Uri uri=Uri.parse("http.abc.com/def");
    try {
      testInstance.open(new DataSpec(uri));
    }
 catch (    IOException e) {
    }
    assertThat(upstream.opened).isFalse();
    assertThat(upstream.closedCalled).isFalse();
    testInstance.close();
    assertThat(upstream.closedCalled).isTrue();
  }
private static class TestAes123DataSource extends Aes128DataSource {
    public TestAes123DataSource(    DataSource upstream,    byte[] encryptionKey,    byte[] encryptionIv){
      super(upstream,encryptionKey,encryptionIv);
    }
    @Override protected Cipher getCipherInstance() throws NoSuchPaddingException, NoSuchAlgorithmException {
      try {
        return super.getCipherInstance();
      }
 catch (      NoSuchAlgorithmException e) {
        return Cipher.getInstance("AES/CBC/PKCS5Padding");
      }
    }
  }
private static class UpstreamDataSource implements DataSource {
    public boolean opened;
    public boolean closedCalled;
    @Override public void addTransferListener(    TransferListener transferListener){
    }
    @Override public long open(    DataSpec dataSpec) throws IOException {
      opened=true;
      return C.LENGTH_UNSET;
    }
    @Override public int read(    byte[] buffer,    int offset,    int readLength){
      return C.RESULT_END_OF_INPUT;
    }
    @Override public Uri getUri(){
      return null;
    }
    @Override public void close(){
      opened=false;
      closedCalled=true;
    }
  }
}
