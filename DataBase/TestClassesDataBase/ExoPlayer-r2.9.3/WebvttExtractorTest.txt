/** 
 * Tests for  {@link WebvttExtractor}. 
 */
@RunWith(RobolectricTestRunner.class) public class WebvttExtractorTest {
  @Test public void sniff_sniffsWebvttHeaderWithTrailingSpace() throws IOException, InterruptedException {
    byte[] data=new byte[]{'W','E','B','V','T','T',' ','\t'};
    assertThat(sniffData(data)).isTrue();
  }
  @Test public void sniff_discardsByteOrderMark() throws IOException, InterruptedException {
    byte[] data=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF,'W','E','B','V','T','T','\n',' '};
    assertThat(sniffData(data)).isTrue();
  }
  @Test public void sniff_failsForIncorrectBom() throws IOException, InterruptedException {
    byte[] data=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBB,'W','E','B','V','T','T','\n'};
    assertThat(sniffData(data)).isFalse();
  }
  @Test public void sniff_failsForIncompleteHeader() throws IOException, InterruptedException {
    byte[] data=new byte[]{'W','E','B','V','T','\n'};
    assertThat(sniffData(data)).isFalse();
  }
  @Test public void sniff_failsForIncorrectHeader() throws IOException, InterruptedException {
    byte[] data=new byte[]{(byte)0xEF,(byte)0xBB,(byte)0xBF,'W','e','B','V','T','T','\n'};
    assertThat(sniffData(data)).isFalse();
  }
  private static boolean sniffData(  byte[] data) throws IOException, InterruptedException {
    ExtractorInput input=new FakeExtractorInput.Builder().setData(data).build();
    try {
      return new WebvttExtractor(null,new TimestampAdjuster(0)).sniff(input);
    }
 catch (    EOFException e) {
      return false;
    }
  }
}
