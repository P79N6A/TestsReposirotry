/** 
 * Unit test for  {@link SinglePeriodTimeline}.
 */
@RunWith(RobolectricTestRunner.class) public final class SinglePeriodTimelineTest {
  private Window window;
  private Period period;
  @Before public void setUp() throws Exception {
    window=new Window();
    period=new Period();
  }
  @Test public void testGetPeriodPositionDynamicWindowUnknownDuration(){
    SinglePeriodTimeline timeline=new SinglePeriodTimeline(C.TIME_UNSET,false,true);
    Pair<Object,Long> position=timeline.getPeriodPosition(window,period,0,C.TIME_UNSET,1);
    assertThat(position).isNull();
    position=timeline.getPeriodPosition(window,period,0,C.TIME_UNSET,0);
    assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));
    assertThat(position.second).isEqualTo(0);
  }
  @Test public void testGetPeriodPositionDynamicWindowKnownDuration(){
    long windowDurationUs=1000;
    SinglePeriodTimeline timeline=new SinglePeriodTimeline(windowDurationUs,windowDurationUs,0,0,false,true,null);
    Pair<Object,Long> position=timeline.getPeriodPosition(window,period,0,C.TIME_UNSET,windowDurationUs + 1);
    assertThat(position).isNull();
    position=timeline.getPeriodPosition(window,period,0,C.TIME_UNSET,windowDurationUs);
    assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));
    assertThat(position.second).isEqualTo(windowDurationUs);
    position=timeline.getPeriodPosition(window,period,0,C.TIME_UNSET,0);
    assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));
    assertThat(position.second).isEqualTo(0);
  }
  @Test public void setNullTag_returnsNullTag_butUsesDefaultUid(){
    SinglePeriodTimeline timeline=new SinglePeriodTimeline(C.TIME_UNSET,false,false,null);
    assertThat(timeline.getWindow(0,window,false).tag).isNull();
    assertThat(timeline.getWindow(0,window,true).tag).isNull();
    assertThat(timeline.getPeriod(0,period,false).id).isNull();
    assertThat(timeline.getPeriod(0,period,true).id).isNull();
    assertThat(timeline.getPeriod(0,period,false).uid).isNull();
    assertThat(timeline.getPeriod(0,period,true).uid).isNotNull();
  }
  @Test public void setTag_isUsedForWindowTag(){
    Object tag=new Object();
    SinglePeriodTimeline timeline=new SinglePeriodTimeline(C.TIME_UNSET,false,false,tag);
    assertThat(timeline.getWindow(0,window,false).tag).isNull();
    assertThat(timeline.getWindow(0,window,true).tag).isEqualTo(tag);
  }
  @Test public void getIndexOfPeriod_returnsPeriod(){
    SinglePeriodTimeline timeline=new SinglePeriodTimeline(C.TIME_UNSET,false,false,null);
    Object uid=timeline.getPeriod(0,period,true).uid;
    assertThat(timeline.getIndexOfPeriod(uid)).isEqualTo(0);
    assertThat(timeline.getIndexOfPeriod(null)).isEqualTo(C.INDEX_UNSET);
    assertThat(timeline.getIndexOfPeriod(new Object())).isEqualTo(C.INDEX_UNSET);
  }
}
