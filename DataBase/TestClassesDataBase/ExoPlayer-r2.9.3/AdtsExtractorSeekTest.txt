/** 
 * Unit test for  {@link AdtsExtractor}. 
 */
@RunWith(RobolectricTestRunner.class) public final class AdtsExtractorSeekTest {
  private static final Random random=new Random(1234L);
  private static final String TEST_FILE="ts/sample.adts";
  private static final int FILE_DURATION_US=3_356_772;
  private static final long DELTA_TIMESTAMP_THRESHOLD_US=200_000;
  private FakeTrackOutput expectedTrackOutput;
  private DefaultDataSource dataSource;
  @Before public void setUp(){
    dataSource=new DefaultDataSourceFactory(RuntimeEnvironment.application,"UserAgent").createDataSource();
  }
  @Test public void testAdtsExtractorReads_returnSeekableSeekMap() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,new FakeExtractorOutput(),dataSource,fileUri);
    assertThat(seekMap).isNotNull();
    assertThat(seekMap.getDurationUs()).isEqualTo(FILE_DURATION_US);
    assertThat(seekMap.isSeekable()).isTrue();
  }
  @Test public void testSeeking_handlesSeekingToPositionInFile_extractsCorrectSample() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
    FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
    long targetSeekTimeUs=980_000;
    int extractedSampleIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
    assertThat(extractedSampleIndex).isNotEqualTo(-1);
    assertFirstSampleAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedSampleIndex);
  }
  @Test public void testSeeking_handlesSeekToEoF_extractsLastSample() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
    FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
    long targetSeekTimeUs=seekMap.getDurationUs();
    int extractedSampleIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
    assertThat(extractedSampleIndex).isNotEqualTo(-1);
    assertFirstSampleAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedSampleIndex);
  }
  @Test public void testSeeking_handlesSeekingBackward_extractsCorrectSamples() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
    FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
    long firstSeekTimeUs=980_000;
    TestUtil.seekToTimeUs(extractor,seekMap,firstSeekTimeUs,dataSource,trackOutput,fileUri);
    long targetSeekTimeUs=0;
    int extractedSampleIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
    assertThat(extractedSampleIndex).isNotEqualTo(-1);
    assertFirstSampleAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedSampleIndex);
  }
  @Test public void testSeeking_handlesSeekingForward_extractsCorrectSamples() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
    FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
    long firstSeekTimeUs=980_000;
    TestUtil.seekToTimeUs(extractor,seekMap,firstSeekTimeUs,dataSource,trackOutput,fileUri);
    long targetSeekTimeUs=1_200_000;
    int extractedSampleIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
    assertThat(extractedSampleIndex).isNotEqualTo(-1);
    assertFirstSampleAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedSampleIndex);
  }
  @Test public void testSeeking_handlesRandomSeeks_extractsCorrectSamples() throws IOException, InterruptedException {
    String fileName=TEST_FILE;
    Uri fileUri=TestUtil.buildAssetUri(fileName);
    expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAdtsExtractor(),RuntimeEnvironment.application,fileName).trackOutputs.get(0);
    AdtsExtractor extractor=createAdtsExtractor();
    FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
    SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
    FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
    long numSeek=100;
    for (long i=0; i < numSeek; i++) {
      long targetSeekTimeUs=random.nextInt(FILE_DURATION_US + 1);
      int extractedSampleIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
      assertThat(extractedSampleIndex).isNotEqualTo(-1);
      assertFirstSampleAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedSampleIndex);
    }
  }
  private static AdtsExtractor createAdtsExtractor(){
    return new AdtsExtractor(0,AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING);
  }
  private void assertFirstSampleAfterSeekContainTargetSeekTime(  FakeTrackOutput trackOutput,  long seekTimeUs,  int firstSampleIndexAfterSeek){
    long outputSampleTimeUs=trackOutput.getSampleTimeUs(firstSampleIndexAfterSeek);
    int expectedSampleIndex=findOutputSampleInExpectedOutput(trackOutput.getSampleData(firstSampleIndexAfterSeek));
    assertThat(expectedSampleIndex).isNotEqualTo(-1);
    assertThat(Math.abs(outputSampleTimeUs - seekTimeUs)).isLessThan(DELTA_TIMESTAMP_THRESHOLD_US);
    assertThat(Math.abs(outputSampleTimeUs - expectedTrackOutput.getSampleTimeUs(expectedSampleIndex))).isLessThan(DELTA_TIMESTAMP_THRESHOLD_US);
    trackOutput.assertSample(firstSampleIndexAfterSeek,expectedTrackOutput.getSampleData(expectedSampleIndex),outputSampleTimeUs,expectedTrackOutput.getSampleFlags(expectedSampleIndex),expectedTrackOutput.getSampleCryptoData(expectedSampleIndex));
  }
  private int findOutputSampleInExpectedOutput(  byte[] sampleData){
    for (int i=0; i < expectedTrackOutput.getSampleCount(); i++) {
      byte[] currentSampleData=expectedTrackOutput.getSampleData(i);
      if (Arrays.equals(currentSampleData,sampleData)) {
        return i;
      }
    }
    return -1;
  }
}
