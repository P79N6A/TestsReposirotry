/** 
 * Tests  {@link CachedContentIndex}. 
 */
@RunWith(AndroidJUnit4.class) public class CachedContentIndexTest {
  private final byte[] testIndexV1File={0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,5,65,66,67,68,69,0,0,0,0,0,0,0,10,0,0,0,2,0,5,75,76,77,78,79,0,0,0,0,0,0,10,0,(byte)0xF6,(byte)0xFB,0x50,0x41};
  private final byte[] testIndexV2File={0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,5,0,5,65,66,67,68,69,0,0,0,2,0,9,101,120,111,95,114,101,100,105,114,0,0,0,5,97,98,99,100,101,0,7,101,120,111,95,108,101,110,0,0,0,8,0,0,0,0,0,0,0,10,0,0,0,2,0,5,75,76,77,78,79,0,0,0,1,0,7,101,120,111,95,108,101,110,0,0,0,8,0,0,0,0,0,0,10,0,0x12,0x15,0x66,(byte)0x8A};
  private CachedContentIndex index;
  private File cacheDir;
  @Before public void setUp() throws Exception {
    cacheDir=Util.createTempDirectory(InstrumentationRegistry.getTargetContext(),"ExoPlayerTest");
    index=new CachedContentIndex(cacheDir);
  }
  @After public void tearDown(){
    Util.recursiveDelete(cacheDir);
  }
  @Test public void testAddGetRemove() throws Exception {
    final String key1="key1";
    final String key2="key2";
    final String key3="key3";
    CachedContent cachedContent1=index.getOrAdd(key1);
    CachedContent cachedContent2=index.getOrAdd(key2);
    assertThat(cachedContent1.id != cachedContent2.id).isTrue();
    File cacheSpanFile=SimpleCacheSpanTest.createCacheSpanFile(cacheDir,cachedContent1.id,10,20,30);
    SimpleCacheSpan span=SimpleCacheSpan.createCacheEntry(cacheSpanFile,index);
    assertThat(span).isNotNull();
    cachedContent1.addSpan(span);
    assertThat(index.get(key1)).isEqualTo(cachedContent1);
    assertThat(index.get(key2)).isEqualTo(cachedContent2);
    assertThat(index.get(key3)).isNull();
    Collection<CachedContent> cachedContents=index.getAll();
    assertThat(cachedContents).containsExactly(cachedContent1,cachedContent2);
    Set<String> keys=index.getKeys();
    assertThat(keys).containsExactly(key1,key2);
    assertThat(index.getKeyForId(cachedContent1.id)).isEqualTo(key1);
    assertThat(index.getKeyForId(cachedContent2.id)).isEqualTo(key2);
    index.maybeRemove(key2);
    index.maybeRemove(key3);
    assertThat(index.get(key1)).isEqualTo(cachedContent1);
    assertThat(index.get(key2)).isNull();
    assertThat(cacheSpanFile.exists()).isTrue();
    index.getOrAdd(key2);
    index.removeEmpty();
    assertThat(index.get(key1)).isEqualTo(cachedContent1);
    assertThat(index.get(key2)).isNull();
    assertThat(cacheSpanFile.exists()).isTrue();
  }
  @Test public void testStoreAndLoad() throws Exception {
    assertStoredAndLoadedEqual(index,new CachedContentIndex(cacheDir));
  }
  @Test public void testLoadV1() throws Exception {
    FileOutputStream fos=new FileOutputStream(new File(cacheDir,CachedContentIndex.FILE_NAME));
    fos.write(testIndexV1File);
    fos.close();
    index.load();
    assertThat(index.getAll()).hasSize(2);
    assertThat(index.assignIdForKey("ABCDE")).isEqualTo(5);
    ContentMetadata metadata=index.get("ABCDE").getMetadata();
    assertThat(ContentMetadataInternal.getContentLength(metadata)).isEqualTo(10);
    assertThat(index.assignIdForKey("KLMNO")).isEqualTo(2);
    ContentMetadata metadata2=index.get("KLMNO").getMetadata();
    assertThat(ContentMetadataInternal.getContentLength(metadata2)).isEqualTo(2560);
  }
  @Test public void testLoadV2() throws Exception {
    FileOutputStream fos=new FileOutputStream(new File(cacheDir,CachedContentIndex.FILE_NAME));
    fos.write(testIndexV2File);
    fos.close();
    index.load();
    assertThat(index.getAll()).hasSize(2);
    assertThat(index.assignIdForKey("ABCDE")).isEqualTo(5);
    ContentMetadata metadata=index.get("ABCDE").getMetadata();
    assertThat(ContentMetadataInternal.getContentLength(metadata)).isEqualTo(10);
    assertThat(ContentMetadataInternal.getRedirectedUri(metadata)).isEqualTo(Uri.parse("abcde"));
    assertThat(index.assignIdForKey("KLMNO")).isEqualTo(2);
    ContentMetadata metadata2=index.get("KLMNO").getMetadata();
    assertThat(ContentMetadataInternal.getContentLength(metadata2)).isEqualTo(2560);
  }
  @Test public void testAssignIdForKeyAndGetKeyForId(){
    final String key1="key1";
    final String key2="key2";
    int id1=index.assignIdForKey(key1);
    int id2=index.assignIdForKey(key2);
    assertThat(index.getKeyForId(id1)).isEqualTo(key1);
    assertThat(index.getKeyForId(id2)).isEqualTo(key2);
    assertThat(id1 != id2).isTrue();
    assertThat(index.assignIdForKey(key1)).isEqualTo(id1);
    assertThat(index.assignIdForKey(key2)).isEqualTo(id2);
  }
  @Test public void testGetNewId(){
    SparseArray<String> idToKey=new SparseArray<>();
    assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(0);
    idToKey.put(10,"");
    assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(11);
    idToKey.put(Integer.MAX_VALUE,"");
    assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(0);
    idToKey.put(0,"");
    assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(1);
  }
  @Test public void testEncryption() throws Exception {
    byte[] key="Bar12345Bar12345".getBytes(C.UTF8_NAME);
    byte[] key2="Foo12345Foo12345".getBytes(C.UTF8_NAME);
    assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key));
    File file1=new File(cacheDir,CachedContentIndex.FILE_NAME);
    File file2=new File(cacheDir,"file2compare");
    assertThat(file1.renameTo(file2)).isTrue();
    assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key));
    assertThat(file1.length()).isEqualTo(file2.length());
    FileInputStream fis1=new FileInputStream(file1);
    FileInputStream fis2=new FileInputStream(file2);
    for (int b; (b=fis1.read()) == fis2.read(); ) {
      assertThat(b != -1).isTrue();
    }
    boolean threw=false;
    try {
      assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key2));
    }
 catch (    AssertionError e) {
      threw=true;
    }
    assertWithMessage("Encrypted index file can not be read with different encryption key").that(threw).isTrue();
    try {
      assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir));
    }
 catch (    AssertionError e) {
      threw=true;
    }
    assertWithMessage("Encrypted index file can not be read without encryption key").that(threw).isTrue();
    assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir),new CachedContentIndex(cacheDir,key));
    CachedContentIndex index=new CachedContentIndex(cacheDir,key);
    index.getOrAdd("key3");
    index.store();
    assertStoredAndLoadedEqual(index,new CachedContentIndex(cacheDir,key));
  }
  @Test public void testRemoveEmptyNotLockedCachedContent(){
    CachedContent cachedContent=index.getOrAdd("key1");
    index.maybeRemove(cachedContent.key);
    assertThat(index.get(cachedContent.key)).isNull();
  }
  @Test public void testCantRemoveNotEmptyCachedContent() throws Exception {
    CachedContent cachedContent=index.getOrAdd("key1");
    File cacheSpanFile=SimpleCacheSpanTest.createCacheSpanFile(cacheDir,cachedContent.id,10,20,30);
    SimpleCacheSpan span=SimpleCacheSpan.createCacheEntry(cacheSpanFile,index);
    cachedContent.addSpan(span);
    index.maybeRemove(cachedContent.key);
    assertThat(index.get(cachedContent.key)).isNotNull();
  }
  @Test public void testCantRemoveLockedCachedContent(){
    CachedContent cachedContent=index.getOrAdd("key1");
    cachedContent.setLocked(true);
    index.maybeRemove(cachedContent.key);
    assertThat(index.get(cachedContent.key)).isNotNull();
  }
  private void assertStoredAndLoadedEqual(  CachedContentIndex index,  CachedContentIndex index2) throws IOException {
    ContentMetadataMutations mutations1=new ContentMetadataMutations();
    ContentMetadataInternal.setContentLength(mutations1,2560);
    index.getOrAdd("KLMNO").applyMetadataMutations(mutations1);
    ContentMetadataMutations mutations2=new ContentMetadataMutations();
    ContentMetadataInternal.setContentLength(mutations2,10);
    ContentMetadataInternal.setRedirectedUri(mutations2,Uri.parse("abcde"));
    index.getOrAdd("ABCDE").applyMetadataMutations(mutations2);
    index.store();
    index2.load();
    Set<String> keys=index.getKeys();
    Set<String> keys2=index2.getKeys();
    assertThat(keys2).isEqualTo(keys);
    for (    String key : keys) {
      assertThat(index2.get(key)).isEqualTo(index.get(key));
    }
  }
}
