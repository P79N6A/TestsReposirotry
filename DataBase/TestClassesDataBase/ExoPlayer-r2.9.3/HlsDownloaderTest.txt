/** 
 * Unit tests for  {@link HlsDownloader}. 
 */
@RunWith(RobolectricTestRunner.class) public class HlsDownloaderTest {
  private SimpleCache cache;
  private File tempFolder;
  private FakeDataSet fakeDataSet;
  @Before public void setUp() throws Exception {
    tempFolder=Util.createTempDirectory(RuntimeEnvironment.application,"ExoPlayerTest");
    cache=new SimpleCache(tempFolder,new NoOpCacheEvictor());
    fakeDataSet=new FakeDataSet().setData(MASTER_PLAYLIST_URI,MASTER_PLAYLIST_DATA).setData(MEDIA_PLAYLIST_1_URI,MEDIA_PLAYLIST_DATA).setRandomData(MEDIA_PLAYLIST_1_DIR + "fileSequence0.ts",10).setRandomData(MEDIA_PLAYLIST_1_DIR + "fileSequence1.ts",11).setRandomData(MEDIA_PLAYLIST_1_DIR + "fileSequence2.ts",12).setData(MEDIA_PLAYLIST_2_URI,MEDIA_PLAYLIST_DATA).setRandomData(MEDIA_PLAYLIST_2_DIR + "fileSequence0.ts",13).setRandomData(MEDIA_PLAYLIST_2_DIR + "fileSequence1.ts",14).setRandomData(MEDIA_PLAYLIST_2_DIR + "fileSequence2.ts",15);
  }
  @After public void tearDown(){
    Util.recursiveDelete(tempFolder);
  }
  @Test public void testCounterMethods() throws Exception {
    HlsDownloader downloader=getHlsDownloader(MASTER_PLAYLIST_URI,getKeys(MASTER_MEDIA_PLAYLIST_1_INDEX));
    downloader.download();
    assertThat(downloader.getDownloadedBytes()).isEqualTo(MEDIA_PLAYLIST_DATA.length + 10 + 11+ 12);
  }
  @Test public void testDownloadRepresentation() throws Exception {
    HlsDownloader downloader=getHlsDownloader(MASTER_PLAYLIST_URI,getKeys(MASTER_MEDIA_PLAYLIST_1_INDEX));
    downloader.download();
    assertCachedData(cache,fakeDataSet,MASTER_PLAYLIST_URI,MEDIA_PLAYLIST_1_URI,MEDIA_PLAYLIST_1_DIR + "fileSequence0.ts",MEDIA_PLAYLIST_1_DIR + "fileSequence1.ts",MEDIA_PLAYLIST_1_DIR + "fileSequence2.ts");
  }
  @Test public void testDownloadMultipleRepresentations() throws Exception {
    HlsDownloader downloader=getHlsDownloader(MASTER_PLAYLIST_URI,getKeys(MASTER_MEDIA_PLAYLIST_1_INDEX,MASTER_MEDIA_PLAYLIST_2_INDEX));
    downloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testDownloadAllRepresentations() throws Exception {
    fakeDataSet.setData(MEDIA_PLAYLIST_0_URI,MEDIA_PLAYLIST_DATA).setRandomData(MEDIA_PLAYLIST_0_DIR + "fileSequence0.ts",10).setRandomData(MEDIA_PLAYLIST_0_DIR + "fileSequence1.ts",11).setRandomData(MEDIA_PLAYLIST_0_DIR + "fileSequence2.ts",12).setData(MEDIA_PLAYLIST_3_URI,MEDIA_PLAYLIST_DATA).setRandomData(MEDIA_PLAYLIST_3_DIR + "fileSequence0.ts",13).setRandomData(MEDIA_PLAYLIST_3_DIR + "fileSequence1.ts",14).setRandomData(MEDIA_PLAYLIST_3_DIR + "fileSequence2.ts",15);
    HlsDownloader downloader=getHlsDownloader(MASTER_PLAYLIST_URI,getKeys());
    downloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testRemove() throws Exception {
    HlsDownloader downloader=getHlsDownloader(MASTER_PLAYLIST_URI,getKeys(MASTER_MEDIA_PLAYLIST_1_INDEX,MASTER_MEDIA_PLAYLIST_2_INDEX));
    downloader.download();
    downloader.remove();
    assertCacheEmpty(cache);
  }
  @Test public void testDownloadMediaPlaylist() throws Exception {
    HlsDownloader downloader=getHlsDownloader(MEDIA_PLAYLIST_1_URI,getKeys());
    downloader.download();
    assertCachedData(cache,fakeDataSet,MEDIA_PLAYLIST_1_URI,MEDIA_PLAYLIST_1_DIR + "fileSequence0.ts",MEDIA_PLAYLIST_1_DIR + "fileSequence1.ts",MEDIA_PLAYLIST_1_DIR + "fileSequence2.ts");
  }
  @Test public void testDownloadEncMediaPlaylist() throws Exception {
    fakeDataSet=new FakeDataSet().setData(ENC_MEDIA_PLAYLIST_URI,ENC_MEDIA_PLAYLIST_DATA).setRandomData("enc.key",8).setRandomData("enc2.key",9).setRandomData("fileSequence0.ts",10).setRandomData("fileSequence1.ts",11).setRandomData("fileSequence2.ts",12);
    HlsDownloader downloader=getHlsDownloader(ENC_MEDIA_PLAYLIST_URI,getKeys());
    downloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  private HlsDownloader getHlsDownloader(  String mediaPlaylistUri,  List<StreamKey> keys){
    Factory factory=new Factory().setFakeDataSet(fakeDataSet);
    return new HlsDownloader(Uri.parse(mediaPlaylistUri),keys,new DownloaderConstructorHelper(cache,factory));
  }
  private static ArrayList<StreamKey> getKeys(  int... variantIndices){
    ArrayList<StreamKey> streamKeys=new ArrayList<>();
    for (    int variantIndex : variantIndices) {
      streamKeys.add(new StreamKey(HlsMasterPlaylist.GROUP_INDEX_VARIANT,variantIndex));
    }
    return streamKeys;
  }
}
