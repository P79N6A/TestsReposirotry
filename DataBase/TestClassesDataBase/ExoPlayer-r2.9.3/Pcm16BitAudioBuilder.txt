/** 
 * Builder for  {@link ShortBuffer}s that contain 16-bit PCM audio samples. 
 */
private static final class Pcm16BitAudioBuilder {
  private final int channelCount;
  private final ShortBuffer buffer;
  private boolean built;
  public Pcm16BitAudioBuilder(  int channelCount,  int frameCount){
    this.channelCount=channelCount;
    buffer=ByteBuffer.allocate(frameCount * channelCount * 2).asShortBuffer();
  }
  /** 
 * Appends  {@code count} audio frames, using the specified {@code channelLevels} in each frame.
 */
  public void appendFrames(  int count,  short... channelLevels){
    Assertions.checkState(!built);
    for (int i=0; i < count; i+=channelCount) {
      for (      short channelLevel : channelLevels) {
        buffer.put(channelLevel);
      }
    }
  }
  /** 
 * Returns whether the buffer is full. 
 */
  public boolean isFull(){
    Assertions.checkState(!built);
    return !buffer.hasRemaining();
  }
  /** 
 * Returns the built buffer. After calling this method the builder should not be reused. 
 */
  public ShortBuffer build(){
    Assertions.checkState(!built);
    built=true;
    buffer.flip();
    return buffer;
  }
}
