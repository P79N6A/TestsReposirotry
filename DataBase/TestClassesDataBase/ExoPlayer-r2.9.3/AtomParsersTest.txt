/** 
 * Tests for  {@link AtomParsers}.
 */
@RunWith(RobolectricTestRunner.class) public final class AtomParsersTest {
  private static final String ATOM_HEADER="000000000000000000000000";
  private static final String SAMPLE_COUNT="00000004";
  private static final byte[] FOUR_BIT_STZ2=Util.getBytesFromHexString(ATOM_HEADER + "00000004" + SAMPLE_COUNT+ "1234");
  private static final byte[] EIGHT_BIT_STZ2=Util.getBytesFromHexString(ATOM_HEADER + "00000008" + SAMPLE_COUNT+ "01020304");
  private static final byte[] SIXTEEN_BIT_STZ2=Util.getBytesFromHexString(ATOM_HEADER + "00000010" + SAMPLE_COUNT+ "0001000200030004");
  @Test public void testParseCommonEncryptionSinfFromParentIgnoresUnknownSchemeType(){
    byte[] cencSinf=new byte[]{0,0,0,24,115,105,110,102,0,0,0,16,115,99,104,109,0,0,0,0,88,88,88,88};
    assertThat(AtomParsers.parseCommonEncryptionSinfFromParent(new ParsableByteArray(cencSinf),0,cencSinf.length)).isNull();
  }
  @Test public void testStz2Parsing4BitFieldSize(){
    verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz,new ParsableByteArray(FOUR_BIT_STZ2)));
  }
  @Test public void testStz2Parsing8BitFieldSize(){
    verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz,new ParsableByteArray(EIGHT_BIT_STZ2)));
  }
  @Test public void testStz2Parsing16BitFieldSize(){
    verifyStz2Parsing(new Atom.LeafAtom(Atom.TYPE_stsz,new ParsableByteArray(SIXTEEN_BIT_STZ2)));
  }
  private static void verifyStz2Parsing(  Atom.LeafAtom stz2Atom){
    AtomParsers.Stz2SampleSizeBox box=new AtomParsers.Stz2SampleSizeBox(stz2Atom);
    assertThat(box.getSampleCount()).isEqualTo(4);
    assertThat(box.isFixedSampleSize()).isFalse();
    for (int i=0; i < box.getSampleCount(); i++) {
      assertThat(box.readNextSampleSize()).isEqualTo(i + 1);
    }
  }
}
