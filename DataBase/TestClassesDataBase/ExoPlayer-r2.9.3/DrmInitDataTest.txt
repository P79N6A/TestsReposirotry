/** 
 * Unit test for  {@link DrmInitData}.
 */
@RunWith(RobolectricTestRunner.class) public class DrmInitDataTest {
  private static final SchemeData DATA_1=new SchemeData(WIDEVINE_UUID,VIDEO_MP4,TestUtil.buildTestData(128,1));
  private static final SchemeData DATA_2=new SchemeData(PLAYREADY_UUID,VIDEO_MP4,TestUtil.buildTestData(128,2));
  private static final SchemeData DATA_1B=new SchemeData(WIDEVINE_UUID,VIDEO_MP4,TestUtil.buildTestData(128,1));
  private static final SchemeData DATA_2B=new SchemeData(PLAYREADY_UUID,VIDEO_MP4,TestUtil.buildTestData(128,2));
  private static final SchemeData DATA_UNIVERSAL=new SchemeData(C.UUID_NIL,VIDEO_MP4,TestUtil.buildTestData(128,3));
  @Test public void testParcelable(){
    DrmInitData drmInitDataToParcel=new DrmInitData(DATA_1,DATA_2);
    Parcel parcel=Parcel.obtain();
    drmInitDataToParcel.writeToParcel(parcel,0);
    parcel.setDataPosition(0);
    DrmInitData drmInitDataFromParcel=DrmInitData.CREATOR.createFromParcel(parcel);
    assertThat(drmInitDataFromParcel).isEqualTo(drmInitDataToParcel);
    parcel.recycle();
  }
  @Test public void testEquals(){
    DrmInitData drmInitData=new DrmInitData(DATA_1,DATA_2);
    DrmInitData testInitData=new DrmInitData(DATA_1,DATA_2);
    assertThat(testInitData).isEqualTo(drmInitData);
    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());
    testInitData=new DrmInitData(DATA_1B,DATA_2B);
    assertThat(testInitData).isEqualTo(drmInitData);
    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());
    testInitData=new DrmInitData(DATA_2,DATA_1);
    assertThat(testInitData).isEqualTo(drmInitData);
    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());
    testInitData=new DrmInitData(DATA_2B,DATA_1B);
    assertThat(testInitData).isEqualTo(drmInitData);
    assertThat(testInitData.hashCode()).isEqualTo(drmInitData.hashCode());
    testInitData=new DrmInitData(DATA_1);
    assertThat(drmInitData).isNotEqualTo(testInitData);
    testInitData=new DrmInitData(DATA_1,DATA_UNIVERSAL);
    assertThat(testInitData).isNotEqualTo(drmInitData);
  }
  @Test @SuppressWarnings("deprecation") public void testGetByUuid(){
    DrmInitData testInitData=new DrmInitData(DATA_1,DATA_2);
    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);
    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);
    assertThat(testInitData.get(UUID_NIL)).isNull();
    testInitData=new DrmInitData(DATA_1,DATA_2,DATA_UNIVERSAL);
    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);
    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);
    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);
    testInitData=new DrmInitData(DATA_UNIVERSAL,DATA_2,DATA_1);
    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);
    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);
    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);
    testInitData=new DrmInitData(DATA_1,DATA_UNIVERSAL);
    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);
    assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_UNIVERSAL);
    assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);
  }
  @Test public void testGetByIndex(){
    DrmInitData testInitData=new DrmInitData(DATA_1,DATA_2);
    assertThat(getAllSchemeData(testInitData)).containsAllOf(DATA_1,DATA_2);
  }
  @Test @SuppressWarnings("deprecation") public void testSchemeDatasWithSameUuid(){
    DrmInitData testInitData=new DrmInitData(DATA_1,DATA_1B);
    assertThat(testInitData.schemeDataCount).isEqualTo(2);
    assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);
    assertThat(testInitData.get(0)).isEqualTo(DATA_1);
    assertThat(testInitData.get(1)).isEqualTo(DATA_1B);
  }
  @Test public void testSchemeDataMatches(){
    assertThat(DATA_1.matches(WIDEVINE_UUID)).isTrue();
    assertThat(DATA_1.matches(PLAYREADY_UUID)).isFalse();
    assertThat(DATA_2.matches(UUID_NIL)).isFalse();
    assertThat(DATA_2.matches(WIDEVINE_UUID)).isFalse();
    assertThat(DATA_2.matches(PLAYREADY_UUID)).isTrue();
    assertThat(DATA_2.matches(UUID_NIL)).isFalse();
    assertThat(DATA_UNIVERSAL.matches(WIDEVINE_UUID)).isTrue();
    assertThat(DATA_UNIVERSAL.matches(PLAYREADY_UUID)).isTrue();
    assertThat(DATA_UNIVERSAL.matches(UUID_NIL)).isTrue();
  }
  private List<SchemeData> getAllSchemeData(  DrmInitData drmInitData){
    ArrayList<SchemeData> schemeDatas=new ArrayList<>();
    for (int i=0; i < drmInitData.schemeDataCount; i++) {
      schemeDatas.add(drmInitData.get(i));
    }
    return schemeDatas;
  }
}
