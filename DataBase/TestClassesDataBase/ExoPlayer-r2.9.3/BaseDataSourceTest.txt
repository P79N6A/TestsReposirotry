/** 
 * Unit test for  {@link BaseDataSource}. 
 */
@RunWith(RobolectricTestRunner.class) public class BaseDataSourceTest {
  @Test public void dataTransfer_withLocalSource_isReported() throws IOException {
    TestSource testSource=new TestSource(false);
    TestTransferListener transferListener=new TestTransferListener();
    testSource.addTransferListener(transferListener);
    DataSpec dataSpec=new DataSpec(Uri.EMPTY);
    testSource.open(dataSpec);
    testSource.read(null,0,100);
    testSource.close();
    assertThat(transferListener.lastTransferInitializingSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferStartSource).isSameAs(testSource);
    assertThat(transferListener.lastBytesTransferredSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferEndSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferInitializingDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferStartDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastBytesTransferredDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferEndDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferInitializingIsNetwork).isEqualTo(false);
    assertThat(transferListener.lastTransferStartIsNetwork).isEqualTo(false);
    assertThat(transferListener.lastBytesTransferredIsNetwork).isEqualTo(false);
    assertThat(transferListener.lastTransferEndIsNetwork).isEqualTo(false);
    assertThat(transferListener.lastBytesTransferred).isEqualTo(100);
  }
  @Test public void dataTransfer_withRemoteSource_isReported() throws IOException {
    TestSource testSource=new TestSource(true);
    TestTransferListener transferListener=new TestTransferListener();
    testSource.addTransferListener(transferListener);
    DataSpec dataSpec=new DataSpec(Uri.EMPTY);
    testSource.open(dataSpec);
    testSource.read(null,0,100);
    testSource.close();
    assertThat(transferListener.lastTransferInitializingSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferStartSource).isSameAs(testSource);
    assertThat(transferListener.lastBytesTransferredSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferEndSource).isSameAs(testSource);
    assertThat(transferListener.lastTransferInitializingDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferStartDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastBytesTransferredDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferEndDataSpec).isEqualTo(dataSpec);
    assertThat(transferListener.lastTransferInitializingIsNetwork).isEqualTo(true);
    assertThat(transferListener.lastTransferStartIsNetwork).isEqualTo(true);
    assertThat(transferListener.lastBytesTransferredIsNetwork).isEqualTo(true);
    assertThat(transferListener.lastTransferEndIsNetwork).isEqualTo(true);
    assertThat(transferListener.lastBytesTransferred).isEqualTo(100);
  }
private static final class TestSource extends BaseDataSource {
    public TestSource(    boolean isNetwork){
      super(isNetwork);
    }
    @Override public long open(    DataSpec dataSpec) throws IOException {
      transferInitializing(dataSpec);
      transferStarted(dataSpec);
      return C.LENGTH_UNSET;
    }
    @Override public int read(    byte[] buffer,    int offset,    int readLength) throws IOException {
      bytesTransferred(readLength);
      return readLength;
    }
    @Override public @Nullable Uri getUri(){
      throw new UnsupportedOperationException();
    }
    @Override public void close() throws IOException {
      transferEnded();
    }
  }
private static final class TestTransferListener implements TransferListener {
    public Object lastTransferInitializingSource;
    public DataSpec lastTransferInitializingDataSpec;
    public boolean lastTransferInitializingIsNetwork;
    public Object lastTransferStartSource;
    public DataSpec lastTransferStartDataSpec;
    public boolean lastTransferStartIsNetwork;
    public Object lastBytesTransferredSource;
    public DataSpec lastBytesTransferredDataSpec;
    public boolean lastBytesTransferredIsNetwork;
    public int lastBytesTransferred;
    public Object lastTransferEndSource;
    public DataSpec lastTransferEndDataSpec;
    public boolean lastTransferEndIsNetwork;
    @Override public void onTransferInitializing(    DataSource source,    DataSpec dataSpec,    boolean isNetwork){
      lastTransferInitializingSource=source;
      lastTransferInitializingDataSpec=dataSpec;
      lastTransferInitializingIsNetwork=isNetwork;
    }
    @Override public void onTransferStart(    DataSource source,    DataSpec dataSpec,    boolean isNetwork){
      lastTransferStartSource=source;
      lastTransferStartDataSpec=dataSpec;
      lastTransferStartIsNetwork=isNetwork;
    }
    @Override public void onBytesTransferred(    DataSource source,    DataSpec dataSpec,    boolean isNetwork,    int bytesTransferred){
      lastBytesTransferredSource=source;
      lastBytesTransferredDataSpec=dataSpec;
      lastBytesTransferredIsNetwork=isNetwork;
      lastBytesTransferred=bytesTransferred;
    }
    @Override public void onTransferEnd(    DataSource source,    DataSpec dataSpec,    boolean isNetwork){
      lastTransferEndSource=source;
      lastTransferEndDataSpec=dataSpec;
      lastTransferEndIsNetwork=isNetwork;
    }
  }
}
