/** 
 * Unit test for  {@link TrackSelector}. 
 */
@RunWith(RobolectricTestRunner.class) public class TrackSelectorTest {
  private TrackSelector trackSelector;
  @Before public void setUp(){
    trackSelector=new TrackSelector(){
      @Override public TrackSelectorResult selectTracks(      RendererCapabilities[] rendererCapabilities,      TrackGroupArray trackGroups) throws ExoPlaybackException {
        throw new UnsupportedOperationException();
      }
      @Override public void onSelectionActivated(      Object info){
      }
    }
;
  }
  @Test public void getBandwidthMeter_beforeInitialization_throwsException(){
    try {
      trackSelector.getBandwidthMeter();
      fail();
    }
 catch (    Exception e) {
    }
  }
  @Test public void getBandwidthMeter_afterInitialization_returnsProvidedBandwidthMeter(){
    InvalidationListener invalidationListener=Mockito.mock(InvalidationListener.class);
    BandwidthMeter bandwidthMeter=Mockito.mock(BandwidthMeter.class);
    trackSelector.init(invalidationListener,bandwidthMeter);
    assertThat(trackSelector.getBandwidthMeter()).isEqualTo(bandwidthMeter);
  }
}
