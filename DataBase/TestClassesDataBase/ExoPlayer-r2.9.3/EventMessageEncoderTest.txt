/** 
 * Unit test for  {@link EventMessageEncoder}.
 */
@RunWith(RobolectricTestRunner.class) public final class EventMessageEncoderTest {
  @Test public void testEncodeEventStream() throws IOException {
    EventMessage eventMessage=new EventMessage("urn:test","123",3000,1000403,new byte[]{0,1,2,3,4},1000000);
    byte[] expectedEmsgBody=new byte[]{117,114,110,58,116,101,115,116,0,49,50,51,0,0,0,-69,-128,0,0,-69,-128,0,2,50,-128,0,15,67,-45,0,1,2,3,4};
    byte[] encodedByteArray=new EventMessageEncoder().encode(eventMessage,48000);
    assertThat(encodedByteArray).isEqualTo(expectedEmsgBody);
  }
  @Test public void testEncodeDecodeEventStream() throws IOException {
    EventMessage expectedEmsg=new EventMessage("urn:test","123",3000,1000403,new byte[]{0,1,2,3,4},1000000);
    byte[] encodedByteArray=new EventMessageEncoder().encode(expectedEmsg,48000);
    MetadataInputBuffer buffer=new MetadataInputBuffer();
    buffer.data=ByteBuffer.allocate(encodedByteArray.length).put(encodedByteArray);
    EventMessageDecoder decoder=new EventMessageDecoder();
    Metadata metadata=decoder.decode(buffer);
    assertThat(metadata.length()).isEqualTo(1);
    assertThat(metadata.get(0)).isEqualTo(expectedEmsg);
  }
  @Test public void testEncodeEventStreamMultipleTimesWorkingCorrectly() throws IOException {
    EventMessage eventMessage=new EventMessage("urn:test","123",3000,1000403,new byte[]{0,1,2,3,4},1000000);
    byte[] expectedEmsgBody=new byte[]{117,114,110,58,116,101,115,116,0,49,50,51,0,0,0,-69,-128,0,0,-69,-128,0,2,50,-128,0,15,67,-45,0,1,2,3,4};
    EventMessage eventMessage1=new EventMessage("urn:test","123",3000,1000402,new byte[]{4,3,2,1,0},1000000);
    byte[] expectedEmsgBody1=new byte[]{117,114,110,58,116,101,115,116,0,49,50,51,0,0,0,-69,-128,0,0,-69,-128,0,2,50,-128,0,15,67,-46,4,3,2,1,0};
    EventMessageEncoder eventMessageEncoder=new EventMessageEncoder();
    byte[] encodedByteArray=eventMessageEncoder.encode(eventMessage,48000);
    assertThat(encodedByteArray).isEqualTo(expectedEmsgBody);
    byte[] encodedByteArray1=eventMessageEncoder.encode(eventMessage1,48000);
    assertThat(encodedByteArray1).isEqualTo(expectedEmsgBody1);
  }
}
