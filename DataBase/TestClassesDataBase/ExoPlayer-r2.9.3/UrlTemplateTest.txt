/** 
 * Unit test for  {@link UrlTemplate}. 
 */
@RunWith(RobolectricTestRunner.class) public class UrlTemplateTest {
  @Test public void testRealExamples(){
    String template="QualityLevels($Bandwidth$)/Fragments(video=$Time$,format=mpd-time-csf)";
    UrlTemplate urlTemplate=UrlTemplate.compile(template);
    String url=urlTemplate.buildUri("abc1",10,650000,5000);
    assertThat(url).isEqualTo("QualityLevels(650000)/Fragments(video=5000,format=mpd-time-csf)");
    template="$RepresentationID$/$Number$";
    urlTemplate=UrlTemplate.compile(template);
    url=urlTemplate.buildUri("abc1",10,650000,5000);
    assertThat(url).isEqualTo("abc1/10");
    template="chunk_ctvideo_cfm4s_rid$RepresentationID$_cn$Number$_w2073857842_mpd.m4s";
    urlTemplate=UrlTemplate.compile(template);
    url=urlTemplate.buildUri("abc1",10,650000,5000);
    assertThat(url).isEqualTo("chunk_ctvideo_cfm4s_ridabc1_cn10_w2073857842_mpd.m4s");
  }
  @Test public void testFull(){
    String template="$Bandwidth$_a_$RepresentationID$_b_$Time$_c_$Number$";
    UrlTemplate urlTemplate=UrlTemplate.compile(template);
    String url=urlTemplate.buildUri("abc1",10,650000,5000);
    assertThat(url).isEqualTo("650000_a_abc1_b_5000_c_10");
  }
  @Test public void testFullWithDollarEscaping(){
    String template="$$$Bandwidth$$$_a$$_$RepresentationID$_b_$Time$_c_$Number$$$";
    UrlTemplate urlTemplate=UrlTemplate.compile(template);
    String url=urlTemplate.buildUri("abc1",10,650000,5000);
    assertThat(url).isEqualTo("$650000$_a$_abc1_b_5000_c_10$");
  }
  @Test public void testInvalidSubstitution(){
    String template="$IllegalId$";
    try {
      UrlTemplate.compile(template);
      fail();
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
