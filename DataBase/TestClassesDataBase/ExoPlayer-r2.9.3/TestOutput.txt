/** 
 * An  {@link EbmlReaderOutput} that records each event callback.
 */
private static final class TestOutput implements EbmlReaderOutput {
  private static final int ID_EBML=0x1A45DFA3;
  private static final int ID_EBML_READ_VERSION=0x42F7;
  private static final int ID_DOC_TYPE=0x4282;
  private static final int ID_DOC_TYPE_READ_VERSION=0x4285;
  private static final int ID_SEGMENT=0x18538067;
  private static final int ID_DURATION=0x4489;
  private static final int ID_SIMPLE_BLOCK=0xA3;
  private final List<String> events=new ArrayList<>();
  @Override public @ElementType int getElementType(  int id){
switch (id) {
case ID_EBML:
case ID_SEGMENT:
      return TYPE_MASTER;
case ID_EBML_READ_VERSION:
case ID_DOC_TYPE_READ_VERSION:
    return TYPE_UNSIGNED_INT;
case ID_DOC_TYPE:
  return TYPE_STRING;
case ID_SIMPLE_BLOCK:
return TYPE_BINARY;
case ID_DURATION:
return TYPE_FLOAT;
default :
return TYPE_UNKNOWN;
}
}
@Override public boolean isLevel1Element(int id){
return false;
}
@Override public void startMasterElement(int id,long contentPosition,long contentSize){
events.add(formatEvent(id,"start contentPosition=" + contentPosition + " contentSize="+ contentSize));
}
@Override public void endMasterElement(int id){
events.add(formatEvent(id,"end"));
}
@Override public void integerElement(int id,long value){
events.add(formatEvent(id,"integer=" + String.valueOf(value)));
}
@Override public void floatElement(int id,double value){
events.add(formatEvent(id,"float=" + String.valueOf(value)));
}
@Override public void stringElement(int id,String value){
events.add(formatEvent(id,"string=" + value));
}
@Override public void binaryElement(int id,int contentSize,ExtractorInput input) throws IOException, InterruptedException {
byte[] bytes=new byte[contentSize];
input.readFully(bytes,0,contentSize);
events.add(formatEvent(id,"bytes=" + Arrays.toString(bytes)));
}
private static String formatEvent(int id,String event){
return "[" + Integer.toHexString(id) + "] "+ event;
}
}
