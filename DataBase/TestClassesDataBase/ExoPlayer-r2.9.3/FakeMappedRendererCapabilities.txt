/** 
 * A  {@link RendererCapabilities} that advertises support for different formats using a mappingbetween format ID and format-support value.
 */
private static final class FakeMappedRendererCapabilities implements RendererCapabilities {
  private final int trackType;
  private final Map<String,Integer> formatToCapability;
  /** 
 * Returns  {@link FakeRendererCapabilities} that advertises support level using the givenmapping between format ID and format-support value.
 * @param trackType the track type to be returned for {@link #getTrackType()}
 * @param formatToCapability a map of (format id, support level) that will be used to returnsupport level for any given format. For any format that's not in the map, {@link #supportsFormat(Format)} will return {@link #FORMAT_UNSUPPORTED_TYPE}.
 */
  FakeMappedRendererCapabilities(  int trackType,  Map<String,Integer> formatToCapability){
    this.trackType=trackType;
    this.formatToCapability=new HashMap<>(formatToCapability);
  }
  @Override public int getTrackType(){
    return trackType;
  }
  @Override public int supportsFormat(  Format format) throws ExoPlaybackException {
    return format.id != null && formatToCapability.containsKey(format.id) ? formatToCapability.get(format.id) : FORMAT_UNSUPPORTED_TYPE;
  }
  @Override public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
    return ADAPTIVE_SEAMLESS;
  }
}
