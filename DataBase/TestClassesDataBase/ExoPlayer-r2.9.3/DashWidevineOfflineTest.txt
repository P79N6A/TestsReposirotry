/** 
 * Tests Widevine encrypted DASH playbacks using offline keys. 
 */
@RunWith(AndroidJUnit4.class) public final class DashWidevineOfflineTest {
  private static final String TAG="DashWidevineOfflineTest";
  private static final String USER_AGENT="ExoPlayerPlaybackTests";
  private DashTestRunner testRunner;
  private DefaultHttpDataSourceFactory httpDataSourceFactory;
  private OfflineLicenseHelper<FrameworkMediaCrypto> offlineLicenseHelper;
  private byte[] offlineLicenseKeySetId;
  @Rule public ActivityTestRule<HostActivity> testRule=new ActivityTestRule<>(HostActivity.class);
  @Before public void setUp() throws Exception {
    testRunner=new DashTestRunner(TAG,testRule.getActivity(),getInstrumentation()).setStreamName("test_widevine_h264_fixed_offline").setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST).setWidevineInfo(MimeTypes.VIDEO_H264,true).setFullPlaybackNoSeeking(true).setCanIncludeAdditionalVideoFormats(false).setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,DashTestData.WIDEVINE_H264_CDD_FIXED);
    boolean useL1Widevine=DashTestRunner.isL1WidevineAvailable(MimeTypes.VIDEO_H264);
    String widevineLicenseUrl=DashTestData.getWidevineLicenseUrl(true,useL1Widevine);
    httpDataSourceFactory=new DefaultHttpDataSourceFactory(USER_AGENT);
    if (Util.SDK_INT >= 18) {
      offlineLicenseHelper=OfflineLicenseHelper.newWidevineInstance(widevineLicenseUrl,httpDataSourceFactory);
    }
  }
  @After public void tearDown() throws Exception {
    testRunner=null;
    if (offlineLicenseKeySetId != null) {
      releaseLicense();
    }
    if (offlineLicenseHelper != null) {
      offlineLicenseHelper.release();
    }
    offlineLicenseHelper=null;
    httpDataSourceFactory=null;
  }
  @Test public void testWidevineOfflineLicenseV22() throws Exception {
    if (Util.SDK_INT < 22) {
      return;
    }
    downloadLicense();
    testRunner.run();
    offlineLicenseKeySetId=offlineLicenseHelper.renewLicense(offlineLicenseKeySetId);
    assertThat(offlineLicenseKeySetId).isNotNull();
  }
  @Test public void testWidevineOfflineReleasedLicenseV22() throws Throwable {
    if (Util.SDK_INT < 22) {
      return;
    }
    downloadLicense();
    releaseLicense();
    try {
      testRunner.run();
      fail("Playback should fail because the license has been released.");
    }
 catch (    Throwable e) {
      while (true) {
        Throwable cause=e.getCause();
        if (cause == null || cause == e) {
          break;
        }
        e=cause;
      }
      if (!(e instanceof MediaDrmStateException)) {
        throw e;
      }
    }
  }
  @Test public void testWidevineOfflineExpiredLicenseV22() throws Exception {
    if (Util.SDK_INT < 22) {
      return;
    }
    downloadLicense();
    long licenseDuration=offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId).first;
    assertWithMessage("License duration should be less than 30 sec. " + "Server settings might have changed.").that(licenseDuration < 30).isTrue();
    while (licenseDuration > 0) {
synchronized (this) {
        wait(licenseDuration * 1000 + 2000);
      }
      long previousDuration=licenseDuration;
      licenseDuration=offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId).first;
      assertWithMessage("License duration should be decreasing.").that(previousDuration > licenseDuration).isTrue();
    }
    testRunner.run();
  }
  @Test public void testWidevineOfflineLicenseExpiresOnPauseV22() throws Exception {
    if (Util.SDK_INT < 22) {
      return;
    }
    downloadLicense();
    Pair<Long,Long> licenseDurationRemainingSec=offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId);
    long licenseDuration=licenseDurationRemainingSec.first;
    assertWithMessage("License duration should be less than 30 sec. " + "Server settings might have changed.").that(licenseDuration < 30).isTrue();
    ActionSchedule schedule=new ActionSchedule.Builder(TAG).waitForPlaybackState(Player.STATE_READY).delay(3000).pause().delay(licenseDuration * 1000 + 2000).play().build();
    testRunner.setActionSchedule(schedule).run();
  }
  private void downloadLicense() throws InterruptedException, DrmSessionException, IOException {
    DataSource dataSource=httpDataSourceFactory.createDataSource();
    DashManifest dashManifest=DashUtil.loadManifest(dataSource,Uri.parse(DashTestData.WIDEVINE_H264_MANIFEST));
    DrmInitData drmInitData=DashUtil.loadDrmInitData(dataSource,dashManifest.getPeriod(0));
    offlineLicenseKeySetId=offlineLicenseHelper.downloadLicense(drmInitData);
    assertThat(offlineLicenseKeySetId).isNotNull();
    assertThat(offlineLicenseKeySetId.length).isGreaterThan(0);
    testRunner.setOfflineLicenseKeySetId(offlineLicenseKeySetId);
  }
  private void releaseLicense() throws DrmSessionException {
    offlineLicenseHelper.releaseLicense(offlineLicenseKeySetId);
    offlineLicenseKeySetId=null;
  }
}
