/** 
 * Unit test for  {@link AdPlaybackState}. 
 */
@RunWith(RobolectricTestRunner.class) public final class AdPlaybackStateTest {
  private static final long[] TEST_AD_GROUP_TMES_US=new long[]{0,C.msToUs(10_000)};
  private static final Uri TEST_URI=Uri.EMPTY;
  private AdPlaybackState state;
  @Before public void setUp(){
    state=new AdPlaybackState(TEST_AD_GROUP_TMES_US);
  }
  @Test public void testSetAdCount(){
    assertThat(state.adGroups[0].count).isEqualTo(C.LENGTH_UNSET);
    state=state.withAdCount(0,1);
    assertThat(state.adGroups[0].count).isEqualTo(1);
  }
  @Test public void testSetAdUriBeforeAdCount(){
    state=state.withAdUri(0,1,TEST_URI);
    state=state.withAdCount(0,2);
    assertThat(state.adGroups[0].uris[0]).isNull();
    assertThat(state.adGroups[0].states[0]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
    assertThat(state.adGroups[0].uris[1]).isSameAs(TEST_URI);
    assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_AVAILABLE);
  }
  @Test public void testSetAdErrorBeforeAdCount(){
    state=state.withAdLoadError(0,0);
    state=state.withAdCount(0,2);
    assertThat(state.adGroups[0].uris[0]).isNull();
    assertThat(state.adGroups[0].states[0]).isEqualTo(AdPlaybackState.AD_STATE_ERROR);
    assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
  }
  @Test public void testGetFirstAdIndexToPlayIsZero(){
    state=state.withAdCount(0,3);
    state=state.withAdUri(0,0,TEST_URI);
    state=state.withAdUri(0,2,TEST_URI);
    assertThat(state.adGroups[0].getFirstAdIndexToPlay()).isEqualTo(0);
  }
  @Test public void testGetFirstAdIndexToPlaySkipsPlayedAd(){
    state=state.withAdCount(0,3);
    state=state.withAdUri(0,0,TEST_URI);
    state=state.withAdUri(0,2,TEST_URI);
    state=state.withPlayedAd(0,0);
    assertThat(state.adGroups[0].getFirstAdIndexToPlay()).isEqualTo(1);
    assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
    assertThat(state.adGroups[0].states[2]).isEqualTo(AdPlaybackState.AD_STATE_AVAILABLE);
  }
  @Test public void testGetFirstAdIndexToPlaySkipsSkippedAd(){
    state=state.withAdCount(0,3);
    state=state.withAdUri(0,0,TEST_URI);
    state=state.withAdUri(0,2,TEST_URI);
    state=state.withSkippedAd(0,0);
    assertThat(state.adGroups[0].getFirstAdIndexToPlay()).isEqualTo(1);
    assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
    assertThat(state.adGroups[0].states[2]).isEqualTo(AdPlaybackState.AD_STATE_AVAILABLE);
  }
  @Test public void testGetFirstAdIndexToPlaySkipsErrorAds(){
    state=state.withAdCount(0,3);
    state=state.withAdUri(0,0,TEST_URI);
    state=state.withAdUri(0,2,TEST_URI);
    state=state.withPlayedAd(0,0);
    state=state.withAdLoadError(0,1);
    assertThat(state.adGroups[0].getFirstAdIndexToPlay()).isEqualTo(2);
  }
  @Test public void testGetNextAdIndexToPlaySkipsErrorAds(){
    state=state.withAdCount(0,3);
    state=state.withAdUri(0,1,TEST_URI);
    state=state.withAdLoadError(0,1);
    assertThat(state.adGroups[0].getNextAdIndexToPlay(0)).isEqualTo(2);
  }
  @Test public void testSetAdStateTwiceThrows(){
    state=state.withAdCount(0,1);
    state=state.withPlayedAd(0,0);
    try {
      state.withAdLoadError(0,0);
      fail();
    }
 catch (    Exception e) {
    }
  }
  @Test public void testSkipAllWithoutAdCount(){
    state=state.withSkippedAdGroup(0);
    state=state.withSkippedAdGroup(1);
    assertThat(state.adGroups[0].count).isEqualTo(0);
    assertThat(state.adGroups[1].count).isEqualTo(0);
  }
}
