/** 
 * Unit tests for  {@link DefaultLoadErrorHandlingPolicy}. 
 */
@RunWith(RobolectricTestRunner.class) public final class DefaultLoadErrorHandlingPolicyTest {
  @Test public void getBlacklistDurationMsFor_blacklist404(){
    InvalidResponseCodeException exception=new InvalidResponseCodeException(404,"Not Found",Collections.emptyMap(),new DataSpec(Uri.EMPTY));
    assertThat(getDefaultPolicyBlacklistOutputFor(exception)).isEqualTo(DefaultLoadErrorHandlingPolicy.DEFAULT_TRACK_BLACKLIST_MS);
  }
  @Test public void getBlacklistDurationMsFor_blacklist410(){
    InvalidResponseCodeException exception=new InvalidResponseCodeException(410,"Gone",Collections.emptyMap(),new DataSpec(Uri.EMPTY));
    assertThat(getDefaultPolicyBlacklistOutputFor(exception)).isEqualTo(DefaultLoadErrorHandlingPolicy.DEFAULT_TRACK_BLACKLIST_MS);
  }
  @Test public void getBlacklistDurationMsFor_dontBlacklistUnexpectedHttpCodes(){
    InvalidResponseCodeException exception=new InvalidResponseCodeException(500,"Internal Server Error",Collections.emptyMap(),new DataSpec(Uri.EMPTY));
    assertThat(getDefaultPolicyBlacklistOutputFor(exception)).isEqualTo(C.TIME_UNSET);
  }
  @Test public void getBlacklistDurationMsFor_dontBlacklistUnexpectedExceptions(){
    FileNotFoundException exception=new FileNotFoundException();
    assertThat(getDefaultPolicyBlacklistOutputFor(exception)).isEqualTo(C.TIME_UNSET);
  }
  @Test public void getRetryDelayMsFor_dontRetryParserException(){
    assertThat(getDefaultPolicyRetryDelayOutputFor(new ParserException(),1)).isEqualTo(C.TIME_UNSET);
  }
  @Test public void getRetryDelayMsFor_successiveRetryDelays(){
    assertThat(getDefaultPolicyRetryDelayOutputFor(new FileNotFoundException(),3)).isEqualTo(2000);
    assertThat(getDefaultPolicyRetryDelayOutputFor(new FileNotFoundException(),5)).isEqualTo(4000);
    assertThat(getDefaultPolicyRetryDelayOutputFor(new FileNotFoundException(),9)).isEqualTo(5000);
  }
  private static long getDefaultPolicyBlacklistOutputFor(  IOException exception){
    return new DefaultLoadErrorHandlingPolicy().getBlacklistDurationMsFor(C.DATA_TYPE_MEDIA,1000,exception,1);
  }
  private static long getDefaultPolicyRetryDelayOutputFor(  IOException exception,  int errorCount){
    return new DefaultLoadErrorHandlingPolicy().getRetryDelayMsFor(C.DATA_TYPE_MEDIA,1000,exception,errorCount);
  }
}
