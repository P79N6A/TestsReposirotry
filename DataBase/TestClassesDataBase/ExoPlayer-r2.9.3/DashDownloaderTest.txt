/** 
 * Unit tests for  {@link DashDownloader}. 
 */
@RunWith(RobolectricTestRunner.class) public class DashDownloaderTest {
  private SimpleCache cache;
  private File tempFolder;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    tempFolder=Util.createTempDirectory(RuntimeEnvironment.application,"ExoPlayerTest");
    cache=new SimpleCache(tempFolder,new NoOpCacheEvictor());
  }
  @After public void tearDown(){
    Util.recursiveDelete(tempFolder);
  }
  @Test public void testDownloadRepresentation() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0));
    dashDownloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testDownloadRepresentationInSmallParts() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).newData("audio_segment_1").appendReadData(TestUtil.buildTestData(10)).appendReadData(TestUtil.buildTestData(10)).appendReadData(TestUtil.buildTestData(10)).endData().setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0));
    dashDownloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testDownloadRepresentations() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("text_segment_1",1).setRandomData("text_segment_2",2).setRandomData("text_segment_3",3);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0),new StreamKey(0,1,0));
    dashDownloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testDownloadAllRepresentations() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("text_segment_1",1).setRandomData("text_segment_2",2).setRandomData("text_segment_3",3).setRandomData("period_2_segment_1",1).setRandomData("period_2_segment_2",2).setRandomData("period_2_segment_3",3);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet);
    dashDownloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testProgressiveDownload() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("text_segment_1",1).setRandomData("text_segment_2",2).setRandomData("text_segment_3",3);
    FakeDataSource fakeDataSource=new FakeDataSource(fakeDataSet);
    Factory factory=mock(Factory.class);
    when(factory.createDataSource()).thenReturn(fakeDataSource);
    DashDownloader dashDownloader=getDashDownloader(factory,new StreamKey(0,0,0),new StreamKey(0,1,0));
    dashDownloader.download();
    DataSpec[] openedDataSpecs=fakeDataSource.getAndClearOpenedDataSpecs();
    assertThat(openedDataSpecs.length).isEqualTo(8);
    assertThat(openedDataSpecs[0].uri).isEqualTo(TEST_MPD_URI);
    assertThat(openedDataSpecs[1].uri.getPath()).isEqualTo("audio_init_data");
    assertThat(openedDataSpecs[2].uri.getPath()).isEqualTo("audio_segment_1");
    assertThat(openedDataSpecs[3].uri.getPath()).isEqualTo("text_segment_1");
    assertThat(openedDataSpecs[4].uri.getPath()).isEqualTo("audio_segment_2");
    assertThat(openedDataSpecs[5].uri.getPath()).isEqualTo("text_segment_2");
    assertThat(openedDataSpecs[6].uri.getPath()).isEqualTo("audio_segment_3");
    assertThat(openedDataSpecs[7].uri.getPath()).isEqualTo("text_segment_3");
  }
  @Test public void testProgressiveDownloadSeparatePeriods() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("period_2_segment_1",1).setRandomData("period_2_segment_2",2).setRandomData("period_2_segment_3",3);
    FakeDataSource fakeDataSource=new FakeDataSource(fakeDataSet);
    Factory factory=mock(Factory.class);
    when(factory.createDataSource()).thenReturn(fakeDataSource);
    DashDownloader dashDownloader=getDashDownloader(factory,new StreamKey(0,0,0),new StreamKey(1,0,0));
    dashDownloader.download();
    DataSpec[] openedDataSpecs=fakeDataSource.getAndClearOpenedDataSpecs();
    assertThat(openedDataSpecs.length).isEqualTo(8);
    assertThat(openedDataSpecs[0].uri).isEqualTo(TEST_MPD_URI);
    assertThat(openedDataSpecs[1].uri.getPath()).isEqualTo("audio_init_data");
    assertThat(openedDataSpecs[2].uri.getPath()).isEqualTo("audio_segment_1");
    assertThat(openedDataSpecs[3].uri.getPath()).isEqualTo("audio_segment_2");
    assertThat(openedDataSpecs[4].uri.getPath()).isEqualTo("audio_segment_3");
    assertThat(openedDataSpecs[5].uri.getPath()).isEqualTo("period_2_segment_1");
    assertThat(openedDataSpecs[6].uri.getPath()).isEqualTo("period_2_segment_2");
    assertThat(openedDataSpecs[7].uri.getPath()).isEqualTo("period_2_segment_3");
  }
  @Test public void testDownloadRepresentationFailure() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).newData("audio_segment_2").appendReadData(TestUtil.buildTestData(2)).appendReadError(new IOException()).appendReadData(TestUtil.buildTestData(3)).endData().setRandomData("audio_segment_3",6);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0));
    try {
      dashDownloader.download();
      fail();
    }
 catch (    IOException e) {
    }
    dashDownloader.download();
    assertCachedData(cache,fakeDataSet);
  }
  @Test public void testCounters() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).newData("audio_segment_2").appendReadData(TestUtil.buildTestData(2)).appendReadError(new IOException()).appendReadData(TestUtil.buildTestData(3)).endData().setRandomData("audio_segment_3",6);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0));
    assertThat(dashDownloader.getDownloadedBytes()).isEqualTo(0);
    try {
      dashDownloader.download();
      fail();
    }
 catch (    IOException e) {
    }
    assertThat(dashDownloader.getDownloadedBytes()).isEqualTo(10 + 4 + 2);
    dashDownloader.download();
    assertThat(dashDownloader.getDownloadedBytes()).isEqualTo(10 + 4 + 5+ 6);
  }
  @Test public void testRemove() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("text_segment_1",1).setRandomData("text_segment_2",2).setRandomData("text_segment_3",3);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0),new StreamKey(0,1,0));
    dashDownloader.download();
    dashDownloader.remove();
    assertCacheEmpty(cache);
  }
  @Test public void testRepresentationWithoutIndex() throws Exception {
    FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD_NO_INDEX).setRandomData("test_segment_1",4);
    DashDownloader dashDownloader=getDashDownloader(fakeDataSet,new StreamKey(0,0,0));
    try {
      dashDownloader.download();
      fail();
    }
 catch (    DownloadException e) {
    }
    dashDownloader.remove();
    assertCacheEmpty(cache);
  }
  private DashDownloader getDashDownloader(  FakeDataSet fakeDataSet,  StreamKey... keys){
    return getDashDownloader(new Factory().setFakeDataSet(fakeDataSet),keys);
  }
  private DashDownloader getDashDownloader(  Factory factory,  StreamKey... keys){
    return new DashDownloader(TEST_MPD_URI,keysList(keys),new DownloaderConstructorHelper(cache,factory));
  }
  private static ArrayList<StreamKey> keysList(  StreamKey... keys){
    ArrayList<StreamKey> keysList=new ArrayList<>();
    Collections.addAll(keysList,keys);
    return keysList;
  }
}
