/** 
 * Unit test for  {@link DefaultOggSeeker}. 
 */
@RunWith(RobolectricTestRunner.class) public final class DefaultOggSeekerTest {
  @Test public void testSetupWithUnsetEndPositionFails(){
    try {
      new DefaultOggSeeker(0,C.LENGTH_UNSET,new TestStreamReader(),1,1,false);
      fail();
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testSeeking() throws IOException, InterruptedException {
    Random random=new Random(0);
    for (int i=0; i < 100; i++) {
      testSeeking(random);
    }
  }
  private void testSeeking(  Random random) throws IOException, InterruptedException {
    OggTestFile testFile=OggTestFile.generate(random,1000);
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(testFile.data).build();
    TestStreamReader streamReader=new TestStreamReader();
    DefaultOggSeeker oggSeeker=new DefaultOggSeeker(0,testFile.data.length,streamReader,testFile.firstPayloadPageSize,testFile.firstPayloadPageGranulePosition,false);
    OggPageHeader pageHeader=new OggPageHeader();
    while (true) {
      long nextSeekPosition=oggSeeker.read(input);
      if (nextSeekPosition == -1) {
        break;
      }
      input.setPosition((int)nextSeekPosition);
    }
    assertThat(seekTo(input,oggSeeker,0,0)).isEqualTo(0);
    assertThat(input.getPosition()).isEqualTo(0);
    assertThat(seekTo(input,oggSeeker,0,testFile.data.length - 1)).isEqualTo(0);
    assertThat(input.getPosition()).isEqualTo(0);
{
      long currentGranule=seekTo(input,oggSeeker,testFile.lastGranule,0);
      long position=testFile.data.length;
      assertThat((testFile.lastGranule > currentGranule && position > input.getPosition()) || (testFile.lastGranule == currentGranule && position == input.getPosition())).isTrue();
    }
{
      input.setPosition(testFile.data.length / 2);
      oggSeeker.skipToNextPage(input);
      assertThat(pageHeader.populate(input,true)).isTrue();
      long position=input.getPosition() + pageHeader.headerSize + pageHeader.bodySize;
      long currentGranule=seekTo(input,oggSeeker,pageHeader.granulePosition,0);
      assertThat((pageHeader.granulePosition > currentGranule && position > input.getPosition()) || (pageHeader.granulePosition == currentGranule && position == input.getPosition())).isTrue();
    }
    for (int i=0; i < 100; i+=1) {
      long targetGranule=(long)(random.nextDouble() * testFile.lastGranule);
      int initialPosition=random.nextInt(testFile.data.length);
      long currentGranule=seekTo(input,oggSeeker,targetGranule,initialPosition);
      long currentPosition=input.getPosition();
      assertWithMessage("getNextSeekPosition() didn't leave input on a page start.").that(pageHeader.populate(input,true)).isTrue();
      if (currentGranule == 0) {
        assertThat(currentPosition).isEqualTo(0);
      }
 else {
        int previousPageStart=testFile.findPreviousPageStart(currentPosition);
        input.setPosition(previousPageStart);
        assertThat(pageHeader.populate(input,true)).isTrue();
        assertThat(currentGranule).isEqualTo(pageHeader.granulePosition);
      }
      input.setPosition((int)currentPosition);
      oggSeeker.skipToPageOfGranule(input,targetGranule,-1);
      long positionDiff=Math.abs(input.getPosition() - currentPosition);
      long granuleDiff=currentGranule - targetGranule;
      if ((granuleDiff > DefaultOggSeeker.MATCH_RANGE || granuleDiff < 0) && positionDiff > DefaultOggSeeker.MATCH_BYTE_RANGE) {
        fail("granuleDiff (" + granuleDiff + ") or positionDiff ("+ positionDiff+ ") is more than allowed.");
      }
    }
  }
  private long seekTo(  FakeExtractorInput input,  DefaultOggSeeker oggSeeker,  long targetGranule,  int initialPosition) throws IOException, InterruptedException {
    long nextSeekPosition=initialPosition;
    int count=0;
    oggSeeker.resetSeeking();
    do {
      input.setPosition((int)nextSeekPosition);
      nextSeekPosition=oggSeeker.getNextSeekPosition(targetGranule,input);
      if (count++ > 100) {
        fail("infinite loop?");
      }
    }
 while (nextSeekPosition >= 0);
    return -(nextSeekPosition + 2);
  }
private static class TestStreamReader extends StreamReader {
    @Override protected long preparePayload(    ParsableByteArray packet){
      return 0;
    }
    @Override protected boolean readHeaders(    ParsableByteArray packet,    long position,    SetupData setupData) throws IOException, InterruptedException {
      return false;
    }
  }
}
