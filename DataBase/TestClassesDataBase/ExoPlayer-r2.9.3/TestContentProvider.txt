/** 
 * A  {@link ContentProvider} for the test.
 */
public static final class TestContentProvider extends ContentProvider implements ContentProvider.PipeDataWriter<Object> {
  private static final String PARAM_PIPE_MODE="pipe-mode";
  public static Uri buildUri(  String filePath,  boolean pipeMode){
    Uri.Builder builder=new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(AUTHORITY).path(filePath);
    if (pipeMode) {
      builder.appendQueryParameter(TestContentProvider.PARAM_PIPE_MODE,"1");
    }
    return builder.build();
  }
  @Override public boolean onCreate(){
    return true;
  }
  @Override public Cursor query(  @NonNull Uri uri,  String[] projection,  String selection,  String[] selectionArgs,  String sortOrder){
    throw new UnsupportedOperationException();
  }
  @Override public AssetFileDescriptor openAssetFile(  @NonNull Uri uri,  @NonNull String mode) throws FileNotFoundException {
    if (uri.getPath() == null) {
      return null;
    }
    try {
      String fileName=getFileName(uri);
      boolean pipeMode=uri.getQueryParameter(PARAM_PIPE_MODE) != null;
      if (pipeMode) {
        ParcelFileDescriptor fileDescriptor=openPipeHelper(uri,null,null,null,this);
        return new AssetFileDescriptor(fileDescriptor,0,C.LENGTH_UNSET);
      }
 else {
        return getContext().getAssets().openFd(fileName);
      }
    }
 catch (    IOException e) {
      FileNotFoundException exception=new FileNotFoundException(e.getMessage());
      exception.initCause(e);
      throw exception;
    }
  }
  @Override public String getType(  @NonNull Uri uri){
    throw new UnsupportedOperationException();
  }
  @Override public Uri insert(  @NonNull Uri uri,  ContentValues values){
    throw new UnsupportedOperationException();
  }
  @Override public int delete(  @NonNull Uri uri,  String selection,  String[] selectionArgs){
    throw new UnsupportedOperationException();
  }
  @Override public int update(  @NonNull Uri uri,  ContentValues values,  String selection,  String[] selectionArgs){
    throw new UnsupportedOperationException();
  }
  @Override public void writeDataToPipe(  @NonNull ParcelFileDescriptor output,  @NonNull Uri uri,  @NonNull String mimeType,  @Nullable Bundle opts,  @Nullable Object args){
    try {
      byte[] data=TestUtil.getByteArray(getContext(),getFileName(uri));
      FileOutputStream outputStream=new FileOutputStream(output.getFileDescriptor());
      outputStream.write(data);
      outputStream.close();
    }
 catch (    IOException e) {
      throw new RuntimeException("Error writing to pipe",e);
    }
  }
  private static String getFileName(  Uri uri){
    return uri.getPath().replaceFirst("/","");
  }
}
