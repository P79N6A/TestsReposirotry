/** 
 * Wraps a  {@link ShortBuffer} and provides a sequence of {@link ByteBuffer}s of specified sizes that contain copies of its data.
 */
private static final class InputBufferProvider {
  private final ShortBuffer buffer;
  public InputBufferProvider(  ShortBuffer buffer){
    this.buffer=buffer;
  }
  /** 
 * Returns the next buffer with size up to  {@code sizeBytes}. 
 */
  public ByteBuffer getNextInputBuffer(  int sizeBytes){
    ByteBuffer inputBuffer=ByteBuffer.allocate(sizeBytes).order(ByteOrder.nativeOrder());
    ShortBuffer inputBufferAsShortBuffer=inputBuffer.asShortBuffer();
    int limit=buffer.limit();
    buffer.limit(Math.min(buffer.position() + sizeBytes / 2,limit));
    inputBufferAsShortBuffer.put(buffer);
    buffer.limit(limit);
    inputBuffer.limit(inputBufferAsShortBuffer.position() * 2);
    return inputBuffer;
  }
  /** 
 * Returns whether any more input can be provided via  {@link #getNextInputBuffer(int)}. 
 */
  public boolean hasRemaining(){
    return buffer.hasRemaining();
  }
}
