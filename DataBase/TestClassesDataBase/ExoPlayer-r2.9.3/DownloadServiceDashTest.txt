/** 
 * Unit tests for  {@link DownloadService}. 
 */
@RunWith(RobolectricTestRunner.class) @Config(shadows={RobolectricUtil.CustomLooper.class,RobolectricUtil.CustomMessageQueue.class}) public class DownloadServiceDashTest {
  private SimpleCache cache;
  private File tempFolder;
  private FakeDataSet fakeDataSet;
  private StreamKey fakeStreamKey1;
  private StreamKey fakeStreamKey2;
  private Context context;
  private DownloadService dashDownloadService;
  private ConditionVariable pauseDownloadCondition;
  private TestDownloadManagerListener downloadManagerListener;
  private DummyMainThread dummyMainThread;
  @Before public void setUp() throws IOException {
    dummyMainThread=new DummyMainThread();
    context=RuntimeEnvironment.application;
    tempFolder=Util.createTempDirectory(context,"ExoPlayerTest");
    cache=new SimpleCache(tempFolder,new NoOpCacheEvictor());
    Runnable pauseAction=() -> {
      if (pauseDownloadCondition != null) {
        try {
          pauseDownloadCondition.block();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
      }
    }
;
    fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).newData("audio_init_data").appendReadAction(pauseAction).appendReadData(TestUtil.buildTestData(10)).endData().setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("text_segment_1",1).setRandomData("text_segment_2",2).setRandomData("text_segment_3",3);
    final DataSource.Factory fakeDataSourceFactory=new FakeDataSource.Factory().setFakeDataSet(fakeDataSet);
    fakeStreamKey1=new StreamKey(0,0,0);
    fakeStreamKey2=new StreamKey(0,1,0);
    dummyMainThread.runOnMainThread(() -> {
      File actionFile;
      try {
        actionFile=Util.createTempFile(context,"ExoPlayerTest");
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      actionFile.delete();
      final DownloadManager dashDownloadManager=new DownloadManager(new DownloaderConstructorHelper(cache,fakeDataSourceFactory),1,3,actionFile,DashDownloadAction.DESERIALIZER);
      downloadManagerListener=new TestDownloadManagerListener(dashDownloadManager,dummyMainThread);
      dashDownloadManager.addListener(downloadManagerListener);
      dashDownloadManager.startDownloads();
      dashDownloadService=new DownloadService(DownloadService.FOREGROUND_NOTIFICATION_ID_NONE){
        @Override protected DownloadManager getDownloadManager(){
          return dashDownloadManager;
        }
        @Nullable @Override protected Scheduler getScheduler(){
          return null;
        }
      }
;
      dashDownloadService.onCreate();
    }
);
  }
  @After public void tearDown(){
    dummyMainThread.runOnMainThread(() -> dashDownloadService.onDestroy());
    Util.recursiveDelete(tempFolder);
    dummyMainThread.release();
  }
  @Ignore @Test public void testMultipleDownloadAction() throws Throwable {
    downloadKeys(fakeStreamKey1);
    downloadKeys(fakeStreamKey2);
    downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();
    assertCachedData(cache,fakeDataSet);
  }
  @Ignore @Test public void testRemoveAction() throws Throwable {
    downloadKeys(fakeStreamKey1,fakeStreamKey2);
    downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();
    removeAll();
    downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();
    assertCacheEmpty(cache);
  }
  @Ignore @Test public void testRemoveBeforeDownloadComplete() throws Throwable {
    pauseDownloadCondition=new ConditionVariable();
    downloadKeys(fakeStreamKey1,fakeStreamKey2);
    removeAll();
    downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();
    assertCacheEmpty(cache);
  }
  private void removeAll() throws Throwable {
    callDownloadServiceOnStart(newAction(TEST_MPD_URI,true,null));
  }
  private void downloadKeys(  StreamKey... keys){
    callDownloadServiceOnStart(newAction(TEST_MPD_URI,false,null,keys));
  }
  private void callDownloadServiceOnStart(  final DownloadAction action){
    dummyMainThread.runOnMainThread(() -> {
      Intent startIntent=DownloadService.buildAddActionIntent(context,DownloadService.class,action,false);
      dashDownloadService.onStartCommand(startIntent,0,0);
    }
);
  }
  private static DownloadAction newAction(  Uri uri,  boolean isRemoveAction,  @Nullable byte[] data,  StreamKey... keys){
    ArrayList<StreamKey> keysList=new ArrayList<>();
    Collections.addAll(keysList,keys);
    DownloadAction result;
    if (isRemoveAction) {
      result=DashDownloadAction.createRemoveAction(uri,data);
    }
 else {
      result=DashDownloadAction.createDownloadAction(uri,data,keysList);
    }
    return result;
  }
}
