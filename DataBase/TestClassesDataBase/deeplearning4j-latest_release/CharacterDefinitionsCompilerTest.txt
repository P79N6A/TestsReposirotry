public class CharacterDefinitionsCompilerTest {
  private File charDef;
  private Map<Integer,String> categoryIdMap;
  private CharacterDefinitions characterDefinition;
  @Before public void setUp() throws IOException {
    charDef=File.createTempFile("kuromoji-chardef-",".bin");
    charDef.deleteOnExit();
    CharacterDefinitionsCompiler compiler=new CharacterDefinitionsCompiler(new BufferedOutputStream(new FileOutputStream(charDef)));
    compiler.readCharacterDefinition(new BufferedInputStream(CharacterDefinitionsCompilerTest.class.getClassLoader().getResourceAsStream("deeplearning4j-nlp-japanese/char.def")),"euc-jp");
    categoryIdMap=invert(compiler.makeCharacterCategoryMap());
    compiler.compile();
    InputStream input=new BufferedInputStream(new FileInputStream(charDef));
    int[][] definitions=IntegerArrayIO.readSparseArray2D(input);
    int[][] mappings=IntegerArrayIO.readSparseArray2D(input);
    String[] symbols=StringArrayIO.readArray(input);
    characterDefinition=new CharacterDefinitions(definitions,mappings,symbols);
  }
  @Test public void testCharacterCategories() throws IOException {
    assertCharacterCategories(characterDefinition,'\u0000',"DEFAULT");
    assertCharacterCategories(characterDefinition,'〇',"SYMBOL","KANJI","KANJINUMERIC");
    assertCharacterCategories(characterDefinition,' ',"SPACE");
    assertCharacterCategories(characterDefinition,'。',"SYMBOL");
    assertCharacterCategories(characterDefinition,'A',"ALPHA");
    assertCharacterCategories(characterDefinition,'Ａ',"ALPHA");
  }
  @Test public void testAddCategoryDefinitions(){
    assertCharacterCategories(characterDefinition,'・',"KATAKANA");
    characterDefinition.setCategories('・',new String[]{"SYMBOL","KATAKANA"});
    assertCharacterCategories(characterDefinition,'・',"KATAKANA","SYMBOL");
    assertCharacterCategories(characterDefinition,'・',"SYMBOL","KATAKANA");
  }
  public void assertCharacterCategories(  CharacterDefinitions characterDefinition,  char c,  String... categories){
    int[] categoryIds=characterDefinition.lookupCategories(c);
    if (categoryIds == null) {
      assertNull(categories);
      return;
    }
    assertEquals(categories.length,categoryIds.length);
    List<String> categoryList=Arrays.asList(categories);
    for (    int categoryId : categoryIds) {
      String category=categoryIdMap.get(categoryId);
      assertTrue(categoryList.contains(category));
    }
  }
  private static Map<Integer,String> invert(  Map<String,Integer> map){
    Map<Integer,String> inverted=new HashMap<>();
    for (    String key : map.keySet()) {
      inverted.put(map.get(key),key);
    }
    return inverted;
  }
}
