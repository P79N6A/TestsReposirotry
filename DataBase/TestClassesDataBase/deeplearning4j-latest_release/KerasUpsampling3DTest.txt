/** 
 * @author Max Pumperla
 */
public class KerasUpsampling3DTest {
  private final String LAYER_NAME="upsampling_3D_layer";
  private int[] size=new int[]{2,2,2};
  private Integer keras1=1;
  private Integer keras2=2;
  private Keras1LayerConfiguration conf1=new Keras1LayerConfiguration();
  private Keras2LayerConfiguration conf2=new Keras2LayerConfiguration();
  @Test public void testUpsampling3DLayer() throws Exception {
    buildUpsampling3DLayer(conf1,keras1);
    buildUpsampling3DLayer(conf2,keras2);
  }
  private void buildUpsampling3DLayer(  KerasLayerConfiguration conf,  Integer kerasVersion) throws Exception {
    Map<String,Object> layerConfig=new HashMap<>();
    layerConfig.put(conf.getLAYER_FIELD_CLASS_NAME(),conf.getLAYER_CLASS_NAME_UPSAMPLING_3D());
    Map<String,Object> config=new HashMap<>();
    List<Integer> sizeList=new ArrayList<>();
    sizeList.add(size[0]);
    sizeList.add(size[1]);
    sizeList.add(size[2]);
    config.put(conf.getLAYER_FIELD_UPSAMPLING_3D_SIZE(),sizeList);
    config.put(conf.getLAYER_FIELD_NAME(),LAYER_NAME);
    layerConfig.put(conf.getLAYER_FIELD_CONFIG(),config);
    layerConfig.put(conf.getLAYER_FIELD_KERAS_VERSION(),kerasVersion);
    Upsampling3D layer=new KerasUpsampling3D(layerConfig).getUpsampling3DLayer();
    assertEquals(LAYER_NAME,layer.getLayerName());
    assertEquals(size[0],layer.getSize()[0]);
    assertEquals(size[1],layer.getSize()[1]);
    assertEquals(size[2],layer.getSize()[2]);
  }
}
