/** 
 * A non-NN optimization problem. Optimization function (cost function) is \sum_i x_i^2. Has minimum of 0.0 at x_i=0 for all x_i See: https://en.wikipedia.org/wiki/Test_functions_for_optimization
 */
private static class SphereFunctionModel extends SimpleOptimizableModel {
  private static final long serialVersionUID=-6963606137417355405L;
  private SphereFunctionModel(  int nParams,  org.nd4j.linalg.api.rng.distribution.Distribution distribution,  NeuralNetConfiguration conf){
    super(distribution.sample(new int[]{1,nParams}),conf);
  }
  @Override public void computeGradientAndScore(  LayerWorkspaceMgr workspaceMgr){
    INDArray gradient=parameters.mul(2);
    Gradient g=new DefaultGradient();
    g.gradientForVariable().put("W",this.gradientView);
    this.gradient=g;
    this.score=Nd4j.getBlasWrapper().dot(parameters,parameters);
    this.gradientView.assign(gradient);
  }
  @Override public long numParams(  boolean backwards){
    return 0;
  }
  @Override public void setParamsViewArray(  INDArray params){
    throw new UnsupportedOperationException("Not supported");
  }
  @Override public void setBackpropGradientsViewArray(  INDArray gradients){
    throw new UnsupportedOperationException();
  }
  @Override public void setCacheMode(  CacheMode mode){
    throw new UnsupportedOperationException();
  }
  @Override public void setListeners(  TrainingListener... listeners){
  }
  @Override public int getIndex(){
    return 0;
  }
  @Override public void setInput(  INDArray input,  LayerWorkspaceMgr workspaceMgr){
  }
  @Override public boolean isPretrainLayer(){
    return false;
  }
  @Override public void clearNoiseWeightParams(){
  }
}
