@Slf4j public class TestDL4JLocalExecution {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test public void testLocalExecution() throws Exception {
    for (int dataApproach=0; dataApproach < 3; dataApproach++) {
      log.info("////////////////// Starting Test: {} ///////////////////",dataApproach);
      MultiLayerSpace mls=new MultiLayerSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addLayer(new DenseLayerSpace.Builder().nIn(784).nOut(new IntegerParameterSpace(10,20)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build()).addLayer(new OutputLayerSpace.Builder().nOut(10).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).numEpochs(3).pretrain(false).backprop(true).build();
      DataProvider dp=null;
      Class<? extends DataSource> ds=null;
      Properties dsP=null;
      CandidateGenerator candidateGenerator;
      if (dataApproach == 0) {
        ds=MnistDataSource.class;
        dsP=new Properties();
        dsP.setProperty("minibatch","8");
        candidateGenerator=new RandomSearchGenerator(mls);
      }
 else       if (dataApproach == 1) {
        dp=new MnistDataProvider();
        candidateGenerator=new RandomSearchGenerator(mls);
      }
 else {
        Map<String,Object> commands=new HashMap<>();
        commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
        candidateGenerator=new RandomSearchGenerator(mls,commands);
        dp=new DataSetIteratorFactoryProvider();
      }
      File f=testDir.newFolder();
      File modelSave=new File(f,"modelSaveDir");
      OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dp).dataSource(ds,dsP).modelSaver(new FileModelSaver(modelSave)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(5)).build();
      IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new MultiLayerNetworkTaskCreator(new ClassificationEvaluator()));
      runner.execute();
      List<ResultReference> results=runner.getResults();
      assertEquals(5,results.size());
      System.out.println("----- COMPLETE - " + results.size() + " results -----");
    }
  }
public static class MnistDataSource implements DataSource {
    private int minibatch;
    public MnistDataSource(){
    }
    @Override public void configure(    Properties properties){
      this.minibatch=Integer.parseInt(properties.getProperty("minibatch","16"));
    }
    @Override public Object trainData(){
      try {
        return new EarlyTerminationDataSetIterator(new MnistDataSetIterator(minibatch,true,12345),3);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public Object testData(){
      try {
        return new EarlyTerminationDataSetIterator(new MnistDataSetIterator(minibatch,true,12345),3);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public Class<?> getDataType(){
      return DataSetIterator.class;
    }
  }
public static class MnistDataProvider implements DataProvider {
    private int minibatch=8;
    @Override public Object trainData(    Map<String,Object> dataParameters){
      try {
        return new EarlyTerminationDataSetIterator(new MnistDataSetIterator(minibatch,true,12345),3);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public Object testData(    Map<String,Object> dataParameters){
      try {
        return new EarlyTerminationDataSetIterator(new MnistDataSetIterator(minibatch,true,12345),3);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public Class<?> getDataType(){
      return DataSetIterator.class;
    }
  }
  @Test @org.junit.Ignore public void testLocalExecutionGridSearch() throws Exception {
    MultiLayerSpace mls=new MultiLayerSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.2))).l2(new ContinuousParameterSpace(0.0001,0.01)).addLayer(new DenseLayerSpace.Builder().nIn(4).nOut(new IntegerParameterSpace(2,10)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),new IntegerParameterSpace(1,2)).addLayer(new OutputLayerSpace.Builder().nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).numEpochs(3).pretrain(false).backprop(true).build();
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
    CandidateGenerator candidateGenerator=new GridSearchCandidateGenerator(mls,5,GridSearchCandidateGenerator.Mode.Sequential,commands);
    DataProvider dataProvider=new DataSetIteratorFactoryProvider();
    String modelSavePath=new File(System.getProperty("java.io.tmpdir"),"ArbiterDL4JTest/").getAbsolutePath();
    File f=new File(modelSavePath);
    if (f.exists())     f.delete();
    f.mkdir();
    f.deleteOnExit();
    if (!f.exists())     throw new RuntimeException();
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dataProvider).modelSaver(new FileModelSaver(modelSavePath)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(100)).build();
    IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new MultiLayerNetworkTaskCreator(new ClassificationEvaluator()));
    runner.execute();
    System.out.println("----- COMPLETE -----");
  }
  @Test @Ignore public void testLocalExecutionEarlyStopping() throws Exception {
    EarlyStoppingConfiguration esConf=new EarlyStoppingConfiguration.Builder<MultiLayerNetwork>().epochTerminationConditions(new MaxEpochsTerminationCondition(100)).scoreCalculator(new DataSetLossCalculator(new IrisDataSetIterator(150,150),true)).modelSaver(new InMemoryModelSaver()).build();
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
    MultiLayerSpace mls=new MultiLayerSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addLayer(new DenseLayerSpace.Builder().nIn(4).nOut(new IntegerParameterSpace(2,10)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),new IntegerParameterSpace(1,2)).addLayer(new OutputLayerSpace.Builder().nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).earlyStoppingConfiguration(esConf).pretrain(false).backprop(true).build();
    CandidateGenerator candidateGenerator=new RandomSearchGenerator(mls,commands);
    DataProvider dataProvider=new DataSetIteratorFactoryProvider();
    String modelSavePath=new File(System.getProperty("java.io.tmpdir"),"ArbiterDL4JTest2\\").getAbsolutePath();
    File f=new File(modelSavePath);
    if (f.exists())     f.delete();
    f.mkdir();
    f.deleteOnExit();
    if (!f.exists())     throw new RuntimeException();
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dataProvider).modelSaver(new FileModelSaver(modelSavePath)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(100)).build();
    IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new MultiLayerNetworkTaskCreator(new ClassificationEvaluator()));
    runner.execute();
    System.out.println("----- COMPLETE -----");
  }
  @Test public void testOcnn(){
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
    MultiLayerSpace mls=new MultiLayerSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addLayer(new DenseLayerSpace.Builder().nOut(new IntegerParameterSpace(250,500)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),new IntegerParameterSpace(1,2)).addLayer(new OCNNLayerSpace.Builder().nu(new ContinuousParameterSpace(0.0001,0.1)).numHidden(new DiscreteParameterSpace<Integer>(784 / 2,784 / 4)).activation(Activation.HARDSIGMOID).lossFunction(LossFunctions.LossFunction.MCXENT).build()).setInputType(InputType.convolutionalFlat(28,28,1)).pretrain(false).backprop(true).build();
    CandidateGenerator candidateGenerator=new RandomSearchGenerator(mls,commands);
    DataProvider dataProvider=new DataSetIteratorFactoryProvider();
    String modelSavePath=new File(System.getProperty("java.io.tmpdir"),"ArbiterDL4JTest3\\").getAbsolutePath();
    File f=new File(modelSavePath);
    if (f.exists())     f.delete();
    f.mkdir();
    f.deleteOnExit();
    if (!f.exists())     throw new RuntimeException();
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dataProvider).modelSaver(new FileModelSaver(modelSavePath)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(100)).build();
    IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new MultiLayerNetworkTaskCreator(new ClassificationEvaluator()));
    Candidate candidate=candidateGenerator.getCandidate();
    System.out.println("----- COMPLETE -----");
  }
}
