@Slf4j public class TsneTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test public void testSimple() throws Exception {
    for (    boolean syntheticData : new boolean[]{false,true}) {
      for (      WorkspaceMode wsm : new WorkspaceMode[]{WorkspaceMode.NONE,WorkspaceMode.ENABLED}) {
        log.info("Starting test: WSM={}, syntheticData={}",wsm,syntheticData);
        int iterations=300;
        Nd4j.setDataType(DataBuffer.Type.DOUBLE);
        List<String> cacheList=new ArrayList<>();
        INDArray weights;
        if (syntheticData) {
          weights=Nd4j.rand(500,20);
        }
 else {
          log.info("Load & Vectorize data....");
          File wordFile=new ClassPathResource("deeplearning4j-tsne/words.txt").getFile();
          Pair<InMemoryLookupTable,VocabCache> vectors=WordVectorSerializer.loadTxt(wordFile);
          VocabCache cache=vectors.getSecond();
          weights=vectors.getFirst().getSyn0();
          for (int i=0; i < cache.numWords(); i++)           cacheList.add(cache.wordAtIndex(i));
        }
        log.info("Build model....");
        BarnesHutTsne tsne=new BarnesHutTsne.Builder().setMaxIter(iterations).theta(0.5).normalize(false).learningRate(500).useAdaGrad(false).workspaceMode(wsm).build();
        log.info("Store TSNE Coordinates for Plotting....");
        File outDir=testDir.newFolder();
        tsne.fit(weights);
        tsne.saveAsFile(cacheList,new File(outDir,"out.txt").getAbsolutePath());
      }
    }
  }
}
