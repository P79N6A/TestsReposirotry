public class TestReductions {
  @Test public void testGeographicMidPointReduction(){
    Text t1=new Text("40.7143528,-74.0059731");
    Text t2=new Text("41.8781136,-87.6297982");
    Text t3=new Text("33.7489954,-84.3879824");
    List<Writable> list=Arrays.<Writable>asList(t1,t1,t1,t2,t2,t3);
    GeographicMidpointReduction reduction=new GeographicMidpointReduction(",");
    IAggregableReduceOp<Writable,List<Writable>> reduceOp=reduction.reduceOp();
    for (    Writable w : list) {
      reduceOp.accept(w);
    }
    List<Writable> listOut=reduceOp.get();
    assertEquals(1,listOut.size());
    Writable wOut=listOut.get(0);
    String[] split=wOut.toString().split(",");
    double lat=Double.parseDouble(split[0]);
    double lng=Double.parseDouble(split[1]);
    double expLat=40.11568861;
    double expLong=-80.29960280;
    assertEquals(expLat,lat,1e-6);
    assertEquals(expLong,lng,1e-6);
    list=Arrays.<Writable>asList(t1,t1,t2);
    List<Writable> list2=Arrays.<Writable>asList(t1,t2,t3);
    reduceOp=reduction.reduceOp();
    for (    Writable w : list) {
      reduceOp.accept(w);
    }
    IAggregableReduceOp<Writable,List<Writable>> reduceOp2=reduction.reduceOp();
    for (    Writable w : list2) {
      reduceOp2.accept(w);
    }
    reduceOp.combine(reduceOp2);
    listOut=reduceOp.get();
    assertEquals(1,listOut.size());
    wOut=listOut.get(0);
    split=wOut.toString().split(",");
    lat=Double.parseDouble(split[0]);
    lng=Double.parseDouble(split[1]);
    assertEquals(expLat,lat,1e-6);
    assertEquals(expLong,lng,1e-6);
  }
}
