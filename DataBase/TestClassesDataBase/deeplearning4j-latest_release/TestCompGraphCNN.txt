/** 
 * Created by nyghtowl on 1/15/16.
 */
public class TestCompGraphCNN extends BaseDL4JTest {
  protected ComputationGraphConfiguration conf;
  protected ComputationGraph graph;
  protected DataSetIterator dataSetIterator;
  protected DataSet ds;
  protected static ComputationGraphConfiguration getMultiInputGraphConfig(){
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("input").setInputTypes(InputType.convolutional(32,32,3)).addLayer("cnn1",new ConvolutionLayer.Builder(4,4).stride(2,2).nIn(3).nOut(3).build(),"input").addLayer("cnn2",new ConvolutionLayer.Builder(4,4).stride(2,2).nIn(3).nOut(3).build(),"input").addLayer("max1",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).stride(1,1).kernelSize(2,2).build(),"cnn1","cnn2").addLayer("dnn1",new DenseLayer.Builder().nOut(7).build(),"max1").addLayer("output",new OutputLayer.Builder().nIn(7).nOut(10).activation(Activation.SOFTMAX).build(),"dnn1").setOutputs("output").build();
    return conf;
  }
  protected static DataSetIterator getDS(){
    List<DataSet> list=new ArrayList<>(5);
    for (int i=0; i < 5; i++) {
      INDArray f=Nd4j.create(1,32 * 32 * 3);
      INDArray l=Nd4j.create(1,10);
      l.putScalar(i,1.0);
      list.add(new DataSet(f,l));
    }
    return new ListDataSetIterator(list,5);
  }
  protected static int getNumParams(){
    return 2 * (3 * 1 * 4* 4* 3 + 3) + (7 * 14 * 14* 6 + 7) + (7 * 10 + 10);
  }
  @Before @Ignore public void beforeDo(){
    conf=getMultiInputGraphConfig();
    graph=new ComputationGraph(conf);
    graph.init();
    dataSetIterator=getDS();
    ds=dataSetIterator.next();
  }
  @Test public void testConfigBasic(){
    int[] order=graph.topologicalSortOrder();
    int[] expOrder1=new int[]{0,1,2,4,3,5,6};
    int[] expOrder2=new int[]{0,2,1,4,3,5,6};
    boolean orderOK=Arrays.equals(expOrder1,order) || Arrays.equals(expOrder2,order);
    assertTrue(orderOK);
    INDArray params=graph.params();
    assertNotNull(params);
    int nParams=getNumParams();
    assertEquals(nParams,params.length());
    INDArray arr=Nd4j.linspace(0,nParams,nParams);
    assertEquals(nParams,arr.length());
    graph.setParams(arr);
    params=graph.params();
    assertEquals(arr,params);
    assertEquals(1,graph.getNumInputArrays());
    assertEquals(1,graph.getNumOutputArrays());
  }
  @Test(expected=DL4JInvalidConfigException.class) public void testCNNComputationGraphKernelTooLarge(){
    int imageWidth=23;
    int imageHeight=19;
    int nChannels=1;
    int classes=2;
    int numSamples=200;
    int kernelHeight=3;
    int kernelWidth=imageWidth;
    DataSet trainInput;
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).seed(123).graphBuilder().addInputs("input").setInputTypes(InputType.convolutional(nChannels,imageWidth,imageHeight)).addLayer("conv1",new ConvolutionLayer.Builder().kernelSize(kernelHeight,kernelWidth).stride(1,1).nIn(nChannels).nOut(2).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build(),"input").addLayer("pool1",new SubsamplingLayer.Builder().poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(imageHeight - kernelHeight + 1,1).stride(1,1).build(),"conv1").addLayer("output",new OutputLayer.Builder().nOut(classes).activation(Activation.SOFTMAX).build(),"pool1").setOutputs("output").build();
    ComputationGraph model=new ComputationGraph(conf);
    model.init();
    INDArray emptyFeatures=Nd4j.zeros(numSamples,imageWidth * imageHeight * nChannels);
    INDArray emptyLables=Nd4j.zeros(numSamples,classes);
    trainInput=new DataSet(emptyFeatures,emptyLables);
    model.fit(trainInput);
  }
}
