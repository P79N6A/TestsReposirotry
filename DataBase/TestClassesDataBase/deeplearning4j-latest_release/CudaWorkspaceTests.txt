@Slf4j @RunWith(Parameterized.class) public class CudaWorkspaceTests extends BaseNd4jTest {
  private DataBuffer.Type initialType;
  public CudaWorkspaceTests(  Nd4jBackend backend){
    super(backend);
    this.initialType=Nd4j.dataType();
  }
  @Test public void testWorkspaceReuse(){
    if (Nd4j.getExecutioner().type() != OpExecutioner.ExecutionerType.CUDA)     return;
    val workspaceConfig=WorkspaceConfiguration.builder().policyMirroring(MirroringPolicy.HOST_ONLY).build();
    int cnt=0;
    for (int e=0; e < 10; e++) {
      try (val ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(workspaceConfig,"test")){
        final INDArray zeros=Nd4j.zeros(4,'f');
        assertEquals("Got non-zero array " + zeros + " after "+ cnt+ " iterations !",0d,zeros.sumNumber().doubleValue(),1e-10);
        zeros.putScalar(0,1);
      }
     }
  }
  @Override public char ordering(){
    return 'c';
  }
}
