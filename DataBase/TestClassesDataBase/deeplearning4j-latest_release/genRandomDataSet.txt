public class genRandomDataSet {
  DataSet sampleDataSet;
  INDArray theoreticalMean;
  INDArray theoreticalStd;
  INDArray theoreticalSEM;
  DataSet theoreticalTransform;
  public genRandomDataSet(  int nSamples,  int nFeatures,  int a,  int b,  long randSeed){
    int i=0;
    INDArray aA=a == 1 ? Nd4j.ones(1,nFeatures) : Nd4j.rand(1,nFeatures,randSeed).mul(a);
    INDArray bB=Nd4j.rand(1,nFeatures,randSeed).mul(b);
    INDArray randomFeatures=Nd4j.zeros(nSamples,nFeatures);
    INDArray randomFeaturesTransform=Nd4j.zeros(nSamples,nFeatures);
    while (i < nFeatures) {
      INDArray randomSlice=Nd4j.randn(nSamples,1,randSeed);
      randomFeaturesTransform.putColumn(i,randomSlice);
      randomSlice.muli(aA.getScalar(0,i));
      randomSlice.addi(bB.getScalar(0,i));
      randomFeatures.putColumn(i,randomSlice);
      i++;
    }
    INDArray randomLabels=Nd4j.zeros(nSamples,1);
    this.sampleDataSet=new DataSet(randomFeatures,randomLabels);
    this.theoreticalTransform=new DataSet(randomFeaturesTransform,randomLabels);
    this.theoreticalMean=bB;
    this.theoreticalStd=aA;
    this.theoreticalSEM=this.theoreticalStd.div(Math.sqrt(nSamples));
  }
  public DataSetIterator getIter(  int bsize){
    return new TestDataSetIterator(sampleDataSet,bsize);
  }
}
