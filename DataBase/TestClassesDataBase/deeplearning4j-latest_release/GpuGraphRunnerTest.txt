public class GpuGraphRunnerTest {
  @Test public void testGraphRunner() throws Exception {
    byte[] content=IOUtils.toByteArray(new ClassPathResource("/tf_graphs/nd4j_convert/simple_graph/frozen_model.pb").getInputStream());
    ConfigProto configProto=ConfigProto.newBuilder().setGpuOptions(GPUOptions.newBuilder().setPerProcessGpuMemoryFraction(0.01).setAllowGrowth(false).build()).build();
    try (GraphRunner graphRunner=new GraphRunner(content,configProto)){
      org.tensorflow.framework.ConfigProto.Builder builder=org.tensorflow.framework.ConfigProto.newBuilder();
      String json=graphRunner.sessionOptionsToJson();
      JsonFormat.parser().merge(json,builder);
      org.tensorflow.framework.ConfigProto build=builder.build();
      assertEquals(build,graphRunner.getProtoBufConfigProto());
      assertNotNull(graphRunner.getInputsForGraph());
      assertNotNull(graphRunner.getOutputsForGraph());
      org.tensorflow.framework.ConfigProto configProto1=GraphRunner.fromJson(json);
      assertEquals(graphRunner.getProtoBufConfigProto(),configProto1);
      assertEquals(2,graphRunner.getInputsForGraph().size());
      assertEquals(1,graphRunner.getOutputsForGraph().size());
      INDArray input1=Nd4j.linspace(1,4,4).reshape(4);
      INDArray input2=Nd4j.linspace(1,4,4).reshape(4);
      Map<String,INDArray> inputs=new LinkedHashMap<>();
      inputs.put("input_0",input1);
      inputs.put("input_1",input2);
      for (int i=0; i < 2; i++) {
        Map<String,INDArray> outputs=graphRunner.run(inputs);
        INDArray assertion=input1.add(input2);
        assertEquals(assertion,outputs.get("output"));
      }
    }
   }
}
