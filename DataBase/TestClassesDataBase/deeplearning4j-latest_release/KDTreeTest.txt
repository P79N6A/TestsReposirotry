/** 
 * Created by agibsonccc on 1/1/15.
 */
public class KDTreeTest {
  @Test public void testTree(){
    KDTree tree=new KDTree(2);
    INDArray half=Nd4j.create(Nd4j.createBuffer(new double[]{0.5,0.5}));
    INDArray one=Nd4j.create(Nd4j.createBuffer(new double[]{1,1}));
    tree.insert(half);
    tree.insert(one);
    Pair<Double,INDArray> pair=tree.nn(Nd4j.create(Nd4j.createBuffer(new double[]{0.5,0.5})));
    assertEquals(half,pair.getValue());
  }
  public void testInsert(){
    int elements=10;
    List<Double> digits=Arrays.asList(1.0,0.0,2.0,3.0);
    KDTree kdTree=new KDTree(digits.size());
    List<List<Double>> lists=new ArrayList<>();
    for (int i=0; i < elements; i++) {
      List<Double> thisList=new ArrayList<>(digits.size());
      for (int k=0; k < digits.size(); k++) {
        thisList.add(digits.get(k) + i);
      }
      lists.add(thisList);
    }
    for (int i=0; i < elements; i++) {
      double[] features=Doubles.toArray(lists.get(i));
      INDArray ind=Nd4j.create(Nd4j.createBuffer(features));
      kdTree.insert(ind);
      assertEquals(i + 1,kdTree.size());
    }
  }
  @Test public void testNN(){
    int n=10;
    KDTree kdTree=new KDTree(n);
    for (int i=-1; i < n; i++) {
      List<Double> vec=new ArrayList<>(n);
      for (int k=0; k < n; k++) {
        vec.add((k == i) ? 1.0 : 0.0);
      }
      INDArray indVec=Nd4j.create(Nd4j.createBuffer(Doubles.toArray(vec)));
      kdTree.insert(indVec);
    }
    Random rand=new Random();
    List<Double> pt=new ArrayList(n);
    for (int k=0; k < n; k++) {
      pt.add(rand.nextDouble());
    }
    Pair<Double,INDArray> result=kdTree.nn(Nd4j.create(Nd4j.createBuffer(Doubles.toArray(pt))));
    assertTrue(result.getKey() < Double.MAX_VALUE);
  }
}
