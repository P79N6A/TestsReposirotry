public class UserDictionaryTest {
  @Test public void testLookup() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),9,7,0);
    List<UserDictionary.UserDictionaryMatch> matches=dictionary.findUserDictionaryMatches("関西国際空港に行った");
    assertEquals(3,matches.size());
    assertEquals(0,matches.get(0).getMatchStartIndex());
    assertEquals(2,matches.get(1).getMatchStartIndex());
    assertEquals(4,matches.get(2).getMatchStartIndex());
    assertEquals(2,matches.get(0).getMatchLength());
    assertEquals(2,matches.get(1).getMatchLength());
    assertEquals(2,matches.get(2).getMatchLength());
    List<UserDictionary.UserDictionaryMatch> matches2=dictionary.findUserDictionaryMatches("関西国際空港と関西国際空港に行った");
    assertEquals(6,matches2.size());
  }
  @Test public void testIpadicFeatures() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),9,7,0);
    assertEquals("カスタム名詞,*,*,*,*,*,*,ニホン,*",dictionary.getAllFeatures(100000000));
  }
  @Test public void testJumanDicFeatures() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),7,5,0);
    assertEquals("カスタム名詞,*,*,*,*,ニホン,*",dictionary.getAllFeatures(100000000));
  }
  @Test public void testNaistJDicFeatures() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),11,7,0);
    assertEquals("カスタム名詞,*,*,*,*,*,*,ニホン,*,*,*",dictionary.getAllFeatures(100000000));
  }
  @Test public void testUniDicFeatures() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),13,7,0);
    assertEquals("カスタム名詞,*,*,*,*,*,*,ニホン,*,*,*,*,*",dictionary.getAllFeatures(100000000));
  }
  @Test public void testUniDicExtendedFeatures() throws IOException {
    UserDictionary dictionary=new UserDictionary(getResource("deeplearning4j-nlp-japanese/userdict.txt"),22,13,0);
    assertEquals("カスタム名詞,*,*,*,*,*,*,*,*,*,*,*,*,ニホン,*,*,*,*,*,*,*,*",dictionary.getAllFeatures(100000000));
  }
  @Test public void testUserDictionaryEntries() throws IOException {
    String userDictionaryEntry="クロ,クロ,クロ,カスタム名詞";
    UserDictionary dictionary=new UserDictionary(new ByteArrayInputStream(userDictionaryEntry.getBytes(StandardCharsets.UTF_8)),9,7,0);
    List<UserDictionary.UserDictionaryMatch> matches=dictionary.findUserDictionaryMatches("この丘はアクロポリスと呼ばれている");
    assertEquals(1,matches.size());
    assertEquals(5,matches.get(0).getMatchStartIndex());
  }
  @Test public void testOverlappingUserDictionaryEntries() throws IOException {
    String userDictionaryEntries="" + "クロ,クロ,クロ,カスタム名詞\n" + "アクロ,アクロ,アクロ,カスタム名詞";
    UserDictionary dictionary=new UserDictionary(new ByteArrayInputStream(userDictionaryEntries.getBytes(StandardCharsets.UTF_8)),9,7,0);
    List<UserDictionary.UserDictionaryMatch> positions=dictionary.findUserDictionaryMatches("この丘はアクロポリスと呼ばれている");
    assertEquals(4,positions.get(0).getMatchStartIndex());
    assertEquals(2,positions.size());
  }
  private InputStream getResource(  String resource) throws IOException {
    return new ClassPathResource(resource).getInputStream();
  }
}
