@Slf4j @Ignore public class GraphInferenceGrpcClientTest {
  @Test public void testSimpleGraph_1() throws Exception {
    val exp=Nd4j.create(new double[]{-0.95938617,-1.20301781,1.22260064,0.50172403,0.59972949,0.78568028,0.31609724,1.51674747,0.68013491,-0.05227458,0.25903158,1.13243439},new long[]{3,1,4});
    val client=new GraphInferenceGrpcClient("127.0.0.1",40123);
    val graphId=RandomUtils.nextLong(0,Long.MAX_VALUE);
    val tg=TFGraphMapper.getInstance().importGraph(new ClassPathResource("tf_graphs/examples/expand_dim/frozen_model.pb").getInputStream());
    assertNotNull(tg);
    client.registerGraph(graphId,tg,ExecutorConfiguration.builder().outputMode(OutputMode.IMPLICIT).build());
    val input0=Nd4j.create(new double[]{0.09753360,0.76124972,0.24693797,0.13813169,0.33144656,0.08299957,0.67197708,0.80659380,0.98274191,0.63566073,0.21592326,0.54902743},new int[]{3,4});
    val operands=new Operands().addArgument("input_0",input0);
    val result=client.output(graphId,operands);
    assertEquals(exp,result.getById("output"));
  }
  @Test public void testSimpleGraph_2() throws Exception {
    val exp=Nd4j.create(new double[]{-0.95938617,-1.20301781,1.22260064,0.50172403,0.59972949,0.78568028,0.31609724,1.51674747,0.68013491,-0.05227458,0.25903158,1.13243439},new long[]{3,1,4});
    val client=new GraphInferenceGrpcClient("127.0.0.1",40123);
    val graphId=RandomUtils.nextLong(0,Long.MAX_VALUE);
    val tg=TFGraphMapper.getInstance().importGraph(new ClassPathResource("tf_graphs/examples/expand_dim/frozen_model.pb").getInputStream());
    assertNotNull(tg);
    client.registerGraph(graphId,tg,ExecutorConfiguration.builder().outputMode(OutputMode.IMPLICIT).build());
    val input0=Nd4j.create(new double[]{0.09753360,0.76124972,0.24693797,0.13813169,0.33144656,0.08299957,0.67197708,0.80659380,0.98274191,0.63566073,0.21592326,0.54902743},new int[]{3,4});
    val operands=new Operands().addArgument(1,0,input0);
    val result=client.output(graphId,operands);
    assertEquals(exp,result.getById("output"));
  }
}
