/** 
 * Created by susaneraly on 7/2/16.
 */
@RunWith(Parameterized.class) public class TestSerializationDoubleToFloat extends BaseNd4jTest {
  DataBuffer.Type initialType;
  public TestSerializationDoubleToFloat(  Nd4jBackend backend){
    super(backend);
    this.initialType=Nd4j.dataType();
  }
  @After public void after(){
    DataTypeUtil.setDTypeForContext(this.initialType);
  }
  @Test public void testSerializationFullArrayNd4jWriteRead() throws Exception {
    int length=100;
    Nd4j.create(1);
    val initialType=Nd4j.dataType();
    Nd4j.setDataType(DataBuffer.Type.DOUBLE);
    INDArray arr=Nd4j.linspace(1,length,length).reshape('c',10,10);
    arr.subi(50.0123456);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (DataOutputStream dos=new DataOutputStream(baos)){
      Nd4j.write(arr,dos);
    }
     byte[] bytes=baos.toByteArray();
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.FLOAT);
    System.out.println("The data opType is " + Nd4j.dataType());
    INDArray arr1=Nd4j.linspace(1,length,length).reshape('c',10,10);
    arr1.subi(50.0123456);
    INDArray arr2;
    try (DataInputStream dis=new DataInputStream(new ByteArrayInputStream(bytes))){
      arr2=Nd4j.read(dis);
    }
     assertTrue(Transforms.abs(arr1.sub(arr2).div(arr1)).maxNumber().doubleValue() < 0.01);
  }
  @Test public void testSerializationFullArrayJava() throws Exception {
    int length=100;
    Nd4j.create(1);
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
    INDArray arr=Nd4j.linspace(1,length,length).reshape('c',10,10);
    arr.subi(50.0123456);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(arr);
    }
     byte[] bytes=baos.toByteArray();
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.FLOAT);
    System.out.println("The data opType is " + Nd4j.dataType());
    INDArray arr1=Nd4j.linspace(1,length,length).reshape('c',10,10);
    arr1.subi(50.0123456);
    INDArray arr2;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bytes))){
      arr2=(INDArray)ois.readObject();
    }
     assertTrue(Transforms.abs(arr1.sub(arr2).div(arr1)).maxNumber().doubleValue() < 0.01);
  }
  @Test public void testSerializationOnViewsNd4jWriteRead() throws Exception {
    int length=100;
    Nd4j.create(1);
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
    INDArray arr=Nd4j.linspace(1,length,length).reshape('c',10,10);
    INDArray sub=arr.get(NDArrayIndex.interval(5,10),NDArrayIndex.interval(5,10));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (DataOutputStream dos=new DataOutputStream(baos)){
      Nd4j.write(sub,dos);
    }
     byte[] bytes=baos.toByteArray();
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.FLOAT);
    System.out.println("The data opType is " + Nd4j.dataType());
    INDArray arr1=Nd4j.linspace(1,length,length).reshape('c',10,10);
    INDArray sub1=arr1.get(NDArrayIndex.interval(5,10),NDArrayIndex.interval(5,10));
    INDArray arr2;
    try (DataInputStream dis=new DataInputStream(new ByteArrayInputStream(bytes))){
      arr2=Nd4j.read(dis);
    }
     assertTrue(Transforms.abs(sub1.sub(arr2).div(sub1)).maxNumber().doubleValue() < 0.01);
  }
  @Test public void testSerializationOnViewsJava() throws Exception {
    int length=100;
    Nd4j.create(1);
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
    INDArray arr=Nd4j.linspace(1,length,length).reshape('c',10,10);
    INDArray sub=arr.get(NDArrayIndex.interval(5,10),NDArrayIndex.interval(5,10));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(sub);
    }
     byte[] bytes=baos.toByteArray();
    DataTypeUtil.setDTypeForContext(DataBuffer.Type.FLOAT);
    System.out.println("The data opType is " + Nd4j.dataType());
    INDArray arr1=Nd4j.linspace(1,length,length).reshape('c',10,10);
    INDArray sub1=arr1.get(NDArrayIndex.interval(5,10),NDArrayIndex.interval(5,10));
    INDArray arr2;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bytes))){
      arr2=(INDArray)ois.readObject();
    }
     assertTrue(Transforms.abs(sub1.sub(arr2).div(sub1)).maxNumber().doubleValue() < 0.01);
  }
  @Override public char ordering(){
    return 'c';
  }
}
