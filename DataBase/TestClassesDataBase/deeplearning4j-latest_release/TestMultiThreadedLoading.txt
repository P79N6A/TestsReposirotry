public class TestMultiThreadedLoading {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test(timeout=60000L) public void test() throws Exception {
    String path="modelimport/keras/examples/mnist_mlp/mnist_mlp_tf_keras_1_model.h5";
    File root=testDir.newFolder();
    final File f=new ClassPathResource(path).getTempFileFromArchive(root);
    int numThreads=4;
    final CountDownLatch latch=new CountDownLatch(numThreads);
    final AtomicInteger errors=new AtomicInteger();
    for (int i=0; i < numThreads; i++) {
      new Thread(new Runnable(){
        @Override public void run(){
          try {
            for (int i=0; i < 20; i++) {
              try {
                KerasSequentialModel kerasModel=new KerasModel().modelBuilder().modelHdf5Filename(f.getAbsolutePath()).enforceTrainingConfig(false).buildSequential();
                MultiLayerNetwork model=kerasModel.getMultiLayerNetwork();
                Thread.sleep(50);
              }
 catch (              Throwable t) {
                t.printStackTrace();
                errors.getAndIncrement();
              }
            }
          }
 catch (          Throwable t) {
            t.printStackTrace();
            errors.getAndIncrement();
          }
 finally {
            latch.countDown();
          }
        }
      }
).start();
    }
    boolean result=latch.await(30000,TimeUnit.MILLISECONDS);
    assertTrue("Latch did not get to 0",result);
    assertEquals("Number of errors",0,errors.get());
  }
}
