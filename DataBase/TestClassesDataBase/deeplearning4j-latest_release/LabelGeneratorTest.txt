public class LabelGeneratorTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test public void testParentPathLabelGenerator() throws Exception {
    File orig=new ClassPathResource("datavec-data-image/testimages/class0/0.jpg").getFile();
    for (    String dirPrefix : new String[]{"m.","m"}) {
      File f=testDir.newFolder();
      int numDirs=3;
      int filesPerDir=4;
      for (int i=0; i < numDirs; i++) {
        File currentLabelDir=new File(f,dirPrefix + i);
        currentLabelDir.mkdirs();
        for (int j=0; j < filesPerDir; j++) {
          File f3=new File(currentLabelDir,"myImg_" + j + ".jpg");
          FileUtils.copyFile(orig,f3);
          assertTrue(f3.exists());
        }
      }
      ImageRecordReader rr=new ImageRecordReader(28,28,1,new ParentPathLabelGenerator());
      rr.initialize(new FileSplit(f));
      List<String> labelsAct=rr.getLabels();
      List<String> labelsExp=Arrays.asList(dirPrefix + "0",dirPrefix + "1",dirPrefix + "2");
      assertEquals(labelsExp,labelsAct);
      int expCount=numDirs * filesPerDir;
      int actCount=0;
      while (rr.hasNext()) {
        rr.next();
        actCount++;
      }
      assertEquals(expCount,actCount);
    }
  }
}
