/** 
 * Created by agibsonccc on 1/23/15.
 */
public class MLLIbUtilTest extends BaseSparkTest {
  private static final Logger log=LoggerFactory.getLogger(MLLIbUtilTest.class);
  @Test public void testMlLibTest(){
    DataSet dataSet=new IrisDataSetIterator(150,150).next();
    List<DataSet> list=dataSet.asList();
    JavaRDD<DataSet> data=sc.parallelize(list);
    JavaRDD<LabeledPoint> mllLibData=MLLibUtil.fromDataSet(sc,data);
  }
  @Test public void testINDtoMLMatrix(){
    INDArray matIND=Nd4j.rand(23,100);
    Matrix matMl=MLLibUtil.toMatrix(matIND);
    assertTrue(matrixEquals(matMl,matIND,0.01));
  }
  @Test public void testMltoINDMatrix(){
    Matrix matMl=Matrices.randn(23,100,new Random(3949955));
    INDArray matIND=MLLibUtil.toMatrix(matMl);
    log.info("matrix shape: {}",Arrays.toString(matIND.shapeInfoDataBuffer().asInt()));
    assertTrue(matrixEquals(matMl,matIND,0.01));
  }
  private boolean matrixEquals(  Matrix mlMatrix,  INDArray indMatrix,  Double eps){
    final int mlRows=mlMatrix.numRows();
    final int mlCols=mlMatrix.numCols();
    final int indRows=indMatrix.rows();
    final int indCols=indMatrix.columns();
    if (mlRows != indRows)     return false;
    if (mlCols != indCols)     return false;
    for (int i=0; i < mlRows; i++) {
      for (int j=0; j < mlCols; j++) {
        double delta=Math.abs(mlMatrix.apply(i,j) - indMatrix.getDouble(i,j));
        if (delta > eps)         return false;
      }
    }
    return true;
  }
}
