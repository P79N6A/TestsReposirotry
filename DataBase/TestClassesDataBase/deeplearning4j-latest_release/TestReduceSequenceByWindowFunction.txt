/** 
 * Created by Alex on 16/04/2016.
 */
public class TestReduceSequenceByWindowFunction {
  @Test public void testReduceSequenceByWindowFunction(){
    List<List<Writable>> sequence=new ArrayList<>();
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 100L),new IntWritable(1)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 200L),new IntWritable(2)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 1000L),new IntWritable(3)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3000L),new IntWritable(4)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3100L),new IntWritable(5)));
    Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").build();
    WindowFunction wf=new TimeWindowFunction("timecolumn",1,TimeUnit.SECONDS);
    wf.setInputSchema(schema);
    Reducer reducer=new Reducer.Builder(ReduceOp.Sum).takeFirstColumns("timecolumn").build();
    Transform transform=new ReduceSequenceByWindowTransform(reducer,wf);
    transform.setInputSchema(schema);
    List<List<Writable>> postApply=transform.mapSequence(sequence);
    assertEquals(4,postApply.size());
    List<Writable> exp0=Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0 + 1 + 2));
    assertEquals(exp0,postApply.get(0));
    List<Writable> exp1=Arrays.asList((Writable)new LongWritable(1451606400000L + 1000L),new IntWritable(3));
    assertEquals(exp1,postApply.get(1));
    List<Writable> exp2=Arrays.asList((Writable)NullWritable.INSTANCE,NullWritable.INSTANCE);
    assertEquals(exp2,postApply.get(2));
    List<Writable> exp3=Arrays.asList((Writable)new LongWritable(1451606400000L + 3000L),new IntWritable(9));
    assertEquals(exp3,postApply.get(3));
  }
}
