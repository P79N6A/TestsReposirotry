/** 
 * TFGraphTestAll* will run all the checked in TF graphs and compare outputs in nd4j to those generated and checked in from TF. <p> This file is to run a single graph or a list of graphs to aid in debug. Simply change the modelNames String[] to correspond to the directory name the graph lives in - eg. to run the graph for 'bias_add' i.e checked in under tf_graphs/examples/bias_add <p>
 */
@RunWith(Parameterized.class) @Ignore public class TFGraphTestList {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  public static String[] modelNames=new String[]{"losses/absdiff_rank2"};
  @After public void tearDown() throws Exception {
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableDebugMode(false);
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableVerboseMode(false);
  }
  public static TFGraphTestAllHelper.ExecuteWith executeWith=TFGraphTestAllHelper.ExecuteWith.SAMEDIFF;
  public static final String MODEL_DIR="tf_graphs/examples";
  public static final String MODEL_FILENAME="frozen_model.pb";
  @BeforeClass public static void beforeClass(){
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.SCOPE_PANIC);
  }
  private String modelName;
  @Parameterized.Parameters public static Collection<Object[]> data(){
    List<Object[]> modelNamesParams=new ArrayList<>();
    for (int i=0; i < modelNames.length; i++) {
      Object[] currentParams=new String[]{modelNames[i]};
      modelNamesParams.add(currentParams);
    }
    return modelNamesParams;
  }
  public TFGraphTestList(  String modelName){
    this.modelName=modelName;
  }
  @Test public void testOutputOnly() throws IOException {
    File dir=testDir.newFolder();
    Map<String,INDArray> inputs=TFGraphTestAllHelper.inputVars(modelName,MODEL_DIR,dir);
    Map<String,INDArray> predictions=TFGraphTestAllHelper.outputVars(modelName,MODEL_DIR,dir);
    Pair<Double,Double> precisionOverride=TFGraphTestAllHelper.testPrecisionOverride(modelName);
    Double maxRE=(precisionOverride == null ? null : precisionOverride.getFirst());
    Double minAbs=(precisionOverride == null ? null : precisionOverride.getSecond());
    TFGraphTestAllHelper.checkOnlyOutput(inputs,predictions,modelName,MODEL_DIR,MODEL_FILENAME,executeWith,TFGraphTestAllHelper.LOADER,maxRE,minAbs);
  }
  @Test public void testAlsoIntermediate() throws IOException {
    File dir=testDir.newFolder();
    Map<String,INDArray> inputs=TFGraphTestAllHelper.inputVars(modelName,MODEL_DIR,dir);
    TFGraphTestAllHelper.checkIntermediate(inputs,modelName,MODEL_DIR,MODEL_FILENAME,executeWith,dir);
  }
}
