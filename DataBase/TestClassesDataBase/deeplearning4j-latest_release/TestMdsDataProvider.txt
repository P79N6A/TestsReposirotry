public static class TestMdsDataProvider implements DataProvider {
  private int numEpochs;
  private int batchSize;
  public TestMdsDataProvider(  @JsonProperty("numEpochs") int numEpochs,  @JsonProperty("batchSize") int batchSize){
    this.numEpochs=numEpochs;
    this.batchSize=batchSize;
  }
  private TestMdsDataProvider(){
  }
  @Override public Object trainData(  Map<String,Object> dataParameters){
    try {
      DataSetIterator underlying=new MnistDataSetIterator(batchSize,Math.min(60000,10 * batchSize),false,true,true,12345);
      return new MultiDataSetIteratorAdapter(new MultipleEpochsIterator(numEpochs,underlying));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  @Override public Object testData(  Map<String,Object> dataParameters){
    try {
      DataSetIterator underlying=new MnistDataSetIterator(batchSize,Math.min(10000,5 * batchSize),false,false,false,12345);
      return new MultiDataSetIteratorAdapter(underlying);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  @Override public Class<?> getDataType(){
    return MultiDataSetIterator.class;
  }
}
