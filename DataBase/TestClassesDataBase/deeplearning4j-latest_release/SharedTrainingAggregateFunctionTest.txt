/** 
 * @author raver119@gmail.com
 */
public class SharedTrainingAggregateFunctionTest {
  @Before public void setUp() throws Exception {
  }
  @Test public void testAggregate1() throws Exception {
    INDArray updates1=Nd4j.create(1000).assign(1.0);
    INDArray updates2=Nd4j.create(1000).assign(2.0);
    INDArray expUpdates=Nd4j.create(1000).assign(3.0);
    SharedTrainingResult result1=SharedTrainingResult.builder().updaterStateArray(updates1).aggregationsCount(1).scoreSum(1.0).build();
    SharedTrainingResult result2=SharedTrainingResult.builder().updaterStateArray(updates2).aggregationsCount(1).scoreSum(2.0).build();
    SharedTrainingAggregateFunction aggregateFunction=new SharedTrainingAggregateFunction();
    SharedTrainingAccumulationTuple tuple1=aggregateFunction.call(null,result1);
    SharedTrainingAccumulationTuple tuple2=aggregateFunction.call(tuple1,result2);
    assertEquals(2,tuple2.getAggregationsCount());
    assertEquals(3.0,tuple2.getScoreSum(),0.001);
    assertEquals(expUpdates,tuple2.getUpdaterStateArray());
  }
}
