/** 
 * @author raver119@gmail.com
 */
public class PrefetchingSentenceIteratorTest {
  protected static final Logger log=LoggerFactory.getLogger(PrefetchingSentenceIteratorTest.class);
  @Test public void testHasMoreLinesFile() throws Exception {
    ClassPathResource resource=new ClassPathResource("/big/raw_sentences.txt");
    File file=resource.getFile();
    BasicLineIterator iterator=new BasicLineIterator(file);
    PrefetchingSentenceIterator fetcher=new PrefetchingSentenceIterator.Builder(iterator).setFetchSize(1000).build();
    log.info("Phase 1 starting");
    int cnt=0;
    while (fetcher.hasNext()) {
      String line=fetcher.nextSentence();
      cnt++;
    }
    assertEquals(97162,cnt);
    log.info("Phase 2 starting");
    fetcher.reset();
    cnt=0;
    while (fetcher.hasNext()) {
      String line=fetcher.nextSentence();
      cnt++;
    }
    assertEquals(97162,cnt);
  }
  @Test public void testLoadedIterator1() throws Exception {
    ClassPathResource resource=new ClassPathResource("/big/raw_sentences.txt");
    File file=resource.getFile();
    BasicLineIterator iterator=new BasicLineIterator(file);
    PrefetchingSentenceIterator fetcher=new PrefetchingSentenceIterator.Builder(iterator).setFetchSize(1000).build();
    log.info("Phase 1 starting");
    int cnt=0;
    while (fetcher.hasNext()) {
      String line=fetcher.nextSentence();
      cnt++;
      if (cnt % 10000 == 0)       log.info("Line processed: " + cnt);
    }
  }
  @Test public void testPerformance1() throws Exception {
    ClassPathResource resource=new ClassPathResource("/big/raw_sentences.txt");
    File file=resource.getFile();
    BasicLineIterator iterator=new BasicLineIterator(file);
    PrefetchingSentenceIterator fetcher=new PrefetchingSentenceIterator.Builder(new BasicLineIterator(file)).setFetchSize(500000).build();
    long time01=System.currentTimeMillis();
    int cnt0=0;
    while (iterator.hasNext()) {
      iterator.nextSentence();
      cnt0++;
    }
    long time02=System.currentTimeMillis();
    long time11=System.currentTimeMillis();
    int cnt1=0;
    while (fetcher.hasNext()) {
      fetcher.nextSentence();
      cnt1++;
    }
    long time12=System.currentTimeMillis();
    log.info("Basic iterator: " + (time02 - time01));
    log.info("Prefetched iterator: " + (time12 - time11));
    long difference=(time12 - time11) - (time02 - time01);
    log.info("Difference: " + difference);
    assertTrue(difference < 150);
  }
}
