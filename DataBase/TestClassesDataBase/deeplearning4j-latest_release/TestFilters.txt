/** 
 * Created by Alex on 21/03/2016.
 */
public class TestFilters {
  @Test public void testFilterNumColumns(){
    List<List<Writable>> list=new ArrayList<>();
    list.add(Collections.singletonList((Writable)new IntWritable(-1)));
    list.add(Collections.singletonList((Writable)new IntWritable(0)));
    list.add(Collections.singletonList((Writable)new IntWritable(2)));
    Schema schema=new Schema.Builder().addColumnInteger("intCol",0,10).addColumnDouble("doubleCol",-100.0,100.0).build();
    Filter numColumns=new InvalidNumColumns(schema);
    for (int i=0; i < list.size(); i++)     assertTrue(numColumns.removeExample(list.get(i)));
    List<Writable> correct=Arrays.<Writable>asList(new IntWritable(0),new DoubleWritable(2));
    assertFalse(numColumns.removeExample(correct));
  }
  @Test public void testFilterInvalidValues(){
    List<List<Writable>> list=new ArrayList<>();
    list.add(Collections.singletonList((Writable)new IntWritable(-1)));
    list.add(Collections.singletonList((Writable)new IntWritable(0)));
    list.add(Collections.singletonList((Writable)new IntWritable(2)));
    Schema schema=new Schema.Builder().addColumnInteger("intCol",0,10).addColumnDouble("doubleCol",-100.0,100.0).build();
    Filter filter=new FilterInvalidValues("intCol","doubleCol");
    filter.setInputSchema(schema);
    assertFalse(filter.removeExample(asList((Writable)new IntWritable(0),new DoubleWritable(0))));
    assertFalse(filter.removeExample(asList((Writable)new IntWritable(10),new DoubleWritable(0))));
    assertFalse(filter.removeExample(asList((Writable)new IntWritable(0),new DoubleWritable(-100))));
    assertFalse(filter.removeExample(asList((Writable)new IntWritable(0),new DoubleWritable(100))));
    assertTrue(filter.removeExample(asList((Writable)new IntWritable(-1),new DoubleWritable(0))));
    assertTrue(filter.removeExample(asList((Writable)new IntWritable(11),new DoubleWritable(0))));
    assertTrue(filter.removeExample(asList((Writable)new IntWritable(0),new DoubleWritable(-101))));
    assertTrue(filter.removeExample(asList((Writable)new IntWritable(0),new DoubleWritable(101))));
  }
  @Test public void testConditionFilter(){
    Schema schema=new Schema.Builder().addColumnInteger("column").build();
    Condition condition=new IntegerColumnCondition("column",ConditionOp.LessThan,0);
    condition.setInputSchema(schema);
    Filter filter=new ConditionFilter(condition);
    assertFalse(filter.removeExample(Collections.singletonList((Writable)new IntWritable(10))));
    assertFalse(filter.removeExample(Collections.singletonList((Writable)new IntWritable(1))));
    assertFalse(filter.removeExample(Collections.singletonList((Writable)new IntWritable(0))));
    assertTrue(filter.removeExample(Collections.singletonList((Writable)new IntWritable(-1))));
    assertTrue(filter.removeExample(Collections.singletonList((Writable)new IntWritable(-10))));
  }
}
