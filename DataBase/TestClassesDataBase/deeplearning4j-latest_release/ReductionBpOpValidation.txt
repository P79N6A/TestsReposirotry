@Slf4j public class ReductionBpOpValidation extends BaseOpValidation {
  private DataBuffer.Type initialType;
  public ReductionBpOpValidation(  Nd4jBackend backend){
    super(backend);
  }
  @Before public void before() throws Exception {
    Nd4j.create(1);
    initialType=Nd4j.dataType();
    Nd4j.setDataType(DataBuffer.Type.DOUBLE);
    Nd4j.getRandom().setSeed(123);
  }
  @After public void after() throws Exception {
    Nd4j.setDataType(initialType);
  }
  @After public void tearDown() throws Exception {
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableDebugMode(false);
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableVerboseMode(false);
  }
  @Test public void testReduceSumBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=Nd4j.valueArrayOf(preReduceInput.shape(),0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new SumBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testReduceSumAlongDim0BP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=Nd4j.createUninitialized(preReduceInput.shape());
      for (int i=0; i < 3; i++) {
        dLdInExpected_0.putRow(i,dLdOut_0);
      }
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new SumBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
    }
  }
  @Test public void testReduceSumAlongDim1BP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray dLdInExpected_1=Nd4j.createUninitialized(preReduceInput.shape());
      for (int i=0; i < 4; i++) {
        dLdInExpected_1.putColumn(i,dLdOut_1);
      }
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new SumBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err);
    }
  }
  @Test public void testMeanBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=Nd4j.valueArrayOf(preReduceInput.shape(),0.5 / preReduceInput.length());
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new MeanBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testMeanBP_Rank1(){
    INDArray dLdOut=Nd4j.trueScalar(0.5);
    INDArray preReduceInput=Nd4j.create(new double[]{2,3,4},new long[]{3});
    INDArray dLdInExp=Nd4j.valueArrayOf(new long[]{3},0.5 / 3);
    INDArray dLdIn=Nd4j.createUninitialized(new long[]{3});
    String err=OpValidation.validate(new OpTestCase(new MeanBp(preReduceInput,dLdOut,dLdIn,false)).expectedOutput(0,dLdInExp));
    assertNull(err);
  }
  @Test public void testMeanAlongDim0BP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape('c',3,4);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=Nd4j.createUninitialized(preReduceInput.shape());
      for (int i=0; i < 3; i++) {
        dLdInExpected_0.putRow(i,dLdOut_0.div(3));
      }
      String msg="keepDims=" + keepDims;
      log.info("Starting test: " + msg);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new MeanBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
    }
  }
  @Test public void testMeanAlongDim1BP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray dLdInExpected_1=Nd4j.createUninitialized(preReduceInput.shape());
      for (int i=0; i < 4; i++) {
        dLdInExpected_1.putColumn(i,dLdOut_1.div(4));
      }
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new MeanBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err);
    }
  }
  @Test public void testMinBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      preReduceInput.putScalar(new int[]{2,2},-1);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=Nd4j.zeros(preReduceInput.shape());
      dLdInExpected.putScalar(new int[]{2,2},0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new MinBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testMinAlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,16,16).reshape(4,4);
      preReduceInput.putScalar(0,0,-1);
      preReduceInput.putScalar(1,1,-2);
      preReduceInput.putScalar(2,2,-3);
      preReduceInput.putScalar(3,3,-4);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=Nd4j.create(preReduceInput.shape());
      dLdInExpected_0.putScalar(0,0,1);
      dLdInExpected_0.putScalar(1,1,2);
      dLdInExpected_0.putScalar(2,2,3);
      dLdInExpected_0.putScalar(3,3,4);
      INDArray dLdIn=Nd4j.createUninitialized(4,4);
      String err=OpValidation.validate(new OpTestCase(new MinBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
      long[] reducedShape_1=(keepDims ? new long[]{4,1} : new long[]{4});
      INDArray dLdInExpected_1=dLdInExpected_0;
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3,4},reducedShape_1);
      dLdIn=Nd4j.createUninitialized(4,4);
      err=OpValidation.validate(new OpTestCase(new MinBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err,err);
    }
  }
  @Test public void testMaxBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      preReduceInput.putScalar(new int[]{2,2},20);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=Nd4j.zeros(preReduceInput.shape());
      dLdInExpected.putScalar(new int[]{2,2},0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new MaxBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testMaxAlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,16,16).reshape(4,4);
      preReduceInput.putScalar(0,0,20);
      preReduceInput.putScalar(1,1,21);
      preReduceInput.putScalar(2,2,22);
      preReduceInput.putScalar(2,2,23);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=Nd4j.create(preReduceInput.shape());
      dLdInExpected_0.putScalar(0,0,1);
      dLdInExpected_0.putScalar(1,1,2);
      dLdInExpected_0.putScalar(2,2,3);
      dLdInExpected_0.putScalar(3,3,4);
      INDArray dLdIn=Nd4j.createUninitialized(4,4);
      String err=OpValidation.validate(new OpTestCase(new MaxBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err,err);
      long[] reducedShape_1=(keepDims ? new long[]{4,1} : new long[]{4});
      INDArray dLdInExpected_1=dLdInExpected_0;
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3,4},reducedShape_1);
      dLdIn=Nd4j.createUninitialized(4,4);
      err=OpValidation.validate(new OpTestCase(new MaxBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err,err);
    }
  }
  @Test public void testProdBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      double prod=preReduceInput.prodNumber().doubleValue();
      INDArray dLdInExpected=Nd4j.valueArrayOf(preReduceInput.shape(),prod).divi(preReduceInput).muli(0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new ProdBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testProdAlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray prod_0=preReduceInput.prod(0);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=Nd4j.create(3,4);
      for (int i=0; i < 3; i++) {
        dLdInExpected_0.putRow(i,prod_0);
      }
      dLdInExpected_0.divi(preReduceInput);
      dLdInExpected_0.muliRowVector(dLdOut_0);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new ProdBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray prod_1=preReduceInput.prod(1);
      INDArray dLdInExpected_1=Nd4j.create(3,4);
      for (int i=0; i < 4; i++) {
        dLdInExpected_1.putColumn(i,prod_1);
      }
      dLdInExpected_1.divi(preReduceInput);
      dLdInExpected_1.muliColumnVector(dLdOut_1.reshape(3,1));
      dLdIn=Nd4j.createUninitialized(3,4);
      err=OpValidation.validate(new OpTestCase(new ProdBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err,err);
    }
  }
  @Test public void testStdevBP(){
    for (    boolean biasCorrected : new boolean[]{true,false}) {
      for (      boolean keepDims : new boolean[]{false,true}) {
        INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
        INDArray dLdOut;
        if (keepDims) {
          dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
        }
 else {
          dLdOut=Nd4j.trueScalar(0.5);
        }
        double stdev=preReduceInput.stdNumber(biasCorrected).doubleValue();
        double mean=preReduceInput.meanNumber().doubleValue();
        long divisor=biasCorrected ? (preReduceInput.length() - 1) : preReduceInput.length();
        INDArray dLdInExp=preReduceInput.dup().subi(mean).divi(stdev * divisor).muli(0.5);
        INDArray dLdIn=Nd4j.createUninitialized(3,4);
        String err=OpValidation.validate(new OpTestCase(new StandardDeviationBp(preReduceInput,dLdOut,dLdIn,biasCorrected,keepDims)).expectedOutput(0,dLdInExp));
        assertNull(err);
      }
    }
  }
  @Test public void testStdevBP_Rank1(){
    INDArray dLdOut=Nd4j.trueScalar(0.5);
    INDArray preReduceInput=Nd4j.create(new double[]{2,3,4},new long[]{3});
    double stdev=preReduceInput.stdNumber(true).doubleValue();
    double mean=preReduceInput.meanNumber().doubleValue();
    INDArray dLdInExp=preReduceInput.dup().subi(mean).divi(stdev * 2).muli(0.5);
    System.out.println(dLdInExp.shapeInfoToString());
    System.out.println(Arrays.toString(dLdInExp.data().asFloat()));
    INDArray dLdIn=Nd4j.createUninitialized(new long[]{3});
    String err=OpValidation.validate(new OpTestCase(new StandardDeviationBp(preReduceInput,dLdOut,dLdIn,true,false)).expectedOutput(0,dLdInExp));
    assertNull(err);
  }
  @Test public void testStdevAlongDimensionBP(){
    for (    boolean biasCorrected : new boolean[]{false,true}) {
      for (      boolean keepDims : new boolean[]{false,true}) {
        long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
        INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
        long divisor=biasCorrected ? 2 : 3;
        INDArray mean_0=preReduceInput.mean(0);
        INDArray stdev_0=preReduceInput.std(biasCorrected,0);
        INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
        INDArray dLdInExpected_0=preReduceInput.dup();
        dLdInExpected_0.subiRowVector(mean_0).diviRowVector(stdev_0.mul(divisor)).muliRowVector(dLdOut_0);
        INDArray dLdIn=Nd4j.createUninitialized(3,4);
        String err=OpValidation.validate(new OpTestCase(new StandardDeviationBp(preReduceInput,dLdOut_0,dLdIn,biasCorrected,keepDims,0)).expectedOutput(0,dLdInExpected_0));
        assertNull(err);
        divisor=biasCorrected ? 3 : 4;
        long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
        INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
        INDArray mean_1=preReduceInput.mean(1);
        INDArray stdev_1=preReduceInput.std(biasCorrected,1);
        INDArray dLdInExpected_1=preReduceInput.dup();
        dLdInExpected_1.subiColumnVector(mean_1).diviColumnVector(stdev_1.mul(divisor)).muliColumnVector(dLdOut_1.reshape(3,1));
        dLdIn=Nd4j.createUninitialized(3,4);
        err=OpValidation.validate(new OpTestCase(new StandardDeviationBp(preReduceInput,dLdOut_1,dLdIn,biasCorrected,keepDims,1)).expectedOutput(0,dLdInExpected_1));
        assertNull(err,err);
      }
    }
  }
  @Test public void testVarianceBP(){
    for (    boolean biasCorrected : new boolean[]{true,false}) {
      for (      boolean keepDims : new boolean[]{false,true}) {
        INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
        INDArray dLdOut;
        if (keepDims) {
          dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
        }
 else {
          dLdOut=Nd4j.trueScalar(0.5);
        }
        double var=preReduceInput.var(biasCorrected).getDouble(0);
        double mean=preReduceInput.meanNumber().doubleValue();
        long divisor=biasCorrected ? (preReduceInput.length() - 1) : preReduceInput.length();
        INDArray dLdInExp=preReduceInput.dup().subi(mean).muli(2.0 / divisor).muli(0.5);
        INDArray dLdIn=Nd4j.createUninitialized(3,4);
        String err=OpValidation.validate(new OpTestCase(new VarianceBp(preReduceInput,dLdOut,dLdIn,biasCorrected,keepDims)).expectedOutput(0,dLdInExp));
        assertNull(err);
      }
    }
  }
  @Test public void testVarianceAlongDimensionBP(){
    for (    boolean biasCorrected : new boolean[]{false,true}) {
      for (      boolean keepDims : new boolean[]{false,true}) {
        long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
        INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
        long divisor=biasCorrected ? 2 : 3;
        INDArray mean_0=preReduceInput.mean(0);
        INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
        INDArray dLdInExpected_0=preReduceInput.dup();
        dLdInExpected_0.subiRowVector(mean_0).muli(2.0 / divisor).muliRowVector(dLdOut_0);
        INDArray dLdIn=Nd4j.createUninitialized(3,4);
        String err=OpValidation.validate(new OpTestCase(new VarianceBp(preReduceInput,dLdOut_0,dLdIn,biasCorrected,keepDims,0)).expectedOutput(0,dLdInExpected_0));
        assertNull(err);
        divisor=biasCorrected ? 3 : 4;
        long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
        INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
        INDArray mean_1=preReduceInput.mean(1);
        INDArray dLdInExpected_1=preReduceInput.dup();
        dLdInExpected_1.subiColumnVector(mean_1).muli(2.0 / divisor).muliColumnVector(dLdOut_1.reshape(3,1));
        dLdIn=Nd4j.createUninitialized(3,4);
        err=OpValidation.validate(new OpTestCase(new VarianceBp(preReduceInput,dLdOut_1,dLdIn,biasCorrected,keepDims,1)).expectedOutput(0,dLdInExpected_1));
        assertNull(err);
      }
    }
  }
  @Test public void testCumSumBP(){
    for (    boolean exclusive : new boolean[]{false,true}) {
      for (      boolean reverse : new boolean[]{false,true}) {
        INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
        INDArray dLdOut=Nd4j.valueArrayOf(new long[]{3,4},0.5);
        INDArray dLdIn=Nd4j.createUninitialized(3,4);
        INDArray dLdInExpected;
        if (exclusive) {
          if (reverse) {
            dLdInExpected=Nd4j.create(new double[][]{{0.0,0.0,0.0,0.0},{0.5,0.5,0.5,0.5},{1.0,1.0,1.0,1.0}});
          }
 else {
            dLdInExpected=Nd4j.create(new double[][]{{1.0,1.0,1.0,1.0},{0.5,0.5,0.5,0.5},{0.0,0.0,0.0,0.0}});
          }
        }
 else {
          if (reverse) {
            dLdInExpected=Nd4j.create(new double[][]{{0.5,0.5,0.5,0.5},{1.0,1.0,1.0,1.0},{1.5,1.5,1.5,1.5}});
          }
 else {
            dLdInExpected=Nd4j.create(new double[][]{{1.5,1.5,1.5,1.5},{1.0,1.0,1.0,1.0},{0.5,0.5,0.5,0.5}});
          }
        }
        String err=OpValidation.validate(new OpTestCase(new CumSumBp(preReduceInput,dLdOut,dLdIn,exclusive,reverse,0)).expectedOutput(0,dLdInExpected));
        if (err != null) {
          err=err + " - exclusive=" + exclusive+ ", reverse="+ reverse;
        }
        assertNull(err);
      }
    }
  }
  @Test public void testNorm2Bp(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      double norm2=preReduceInput.norm2Number().doubleValue();
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=preReduceInput.div(norm2).muli(0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new Norm2Bp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testNorm2AlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray norm2_0=preReduceInput.norm2(0);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=preReduceInput.divRowVector(norm2_0).mulRowVector(dLdOut_0);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new Norm2Bp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray norm2_1=preReduceInput.norm2(1);
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray dLdInExpected_1=preReduceInput.divColumnVector(norm2_1).mulColumnVector(dLdOut_1);
      dLdIn=Nd4j.createUninitialized(3,4);
      err=OpValidation.validate(new OpTestCase(new Norm2Bp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err);
    }
  }
  @Test public void testNorm1Bp(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(-5,6,12).addi(0.1).reshape(3,4);
      INDArray sgn=Transforms.sign(preReduceInput,true);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=sgn.muli(0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new Norm1Bp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testNorm1AlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(-5,6,12).addi(0.1).reshape(3,4);
      INDArray sgn=Transforms.sign(preReduceInput,true);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=sgn.mulRowVector(dLdOut_0);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new Norm1Bp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err,err);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray dLdInExpected_1=sgn.mulColumnVector(dLdOut_1);
      dLdIn=Nd4j.createUninitialized(3,4);
      err=OpValidation.validate(new OpTestCase(new Norm1Bp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err,err);
    }
  }
  @Test public void testNormMaxBp(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      INDArray preReduceInput=Nd4j.linspace(-5,6,12).reshape(3,4);
      INDArray sgn=Transforms.sign(preReduceInput,true);
      INDArray max=Nd4j.create(3,4);
      max.putScalar(2,3,1.0);
      INDArray dLdOut;
      if (keepDims) {
        dLdOut=Nd4j.valueArrayOf(new long[]{1,1},0.5);
      }
 else {
        dLdOut=Nd4j.trueScalar(0.5);
      }
      INDArray dLdInExpected=sgn.mul(max).mul(0.5);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new NormMaxBp(preReduceInput,dLdOut,dLdIn,keepDims)).expectedOutput(0,dLdInExpected));
      assertNull(err);
    }
  }
  @Test public void testNormMaxAlongDimensionBP(){
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      INDArray sgn=Transforms.sign(preReduceInput,true);
      INDArray max_0=Nd4j.create(3,4);
      max_0.getRow(2).assign(1.0);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=sgn.mul(max_0).mulRowVector(dLdOut_0);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new NormMaxBp(preReduceInput,dLdOut_0,dLdIn,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray max_1=Nd4j.create(3,4);
      max_1.getColumn(3).assign(1.0);
      INDArray dLdInExpected_1=sgn.mul(max_1).mulColumnVector(dLdOut_1);
      dLdIn=Nd4j.createUninitialized(3,4);
      err=OpValidation.validate(new OpTestCase(new NormMaxBp(preReduceInput,dLdOut_1,dLdIn,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err,err);
    }
  }
}
