public class JDBCRecordReaderTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  Connection conn;
  EmbeddedDataSource dataSource;
  private final String dbName="datavecTests";
  private final String driverClassName="org.apache.derby.jdbc.EmbeddedDriver";
  @Before public void setUp() throws Exception {
    File f=testDir.newFolder();
    System.setProperty("derby.system.home",f.getAbsolutePath());
    dataSource=new EmbeddedDataSource();
    dataSource.setDatabaseName(dbName);
    dataSource.setCreateDatabase("create");
    conn=dataSource.getConnection();
    TestDb.dropTables(conn);
    TestDb.buildCoffeeTable(conn);
  }
  @After public void tearDown() throws Exception {
    DbUtils.closeQuietly(conn);
  }
  @Test public void testSimpleIter() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      List<List<Writable>> records=new ArrayList<>();
      while (reader.hasNext()) {
        List<Writable> values=reader.next();
        records.add(values);
      }
      assertFalse(records.isEmpty());
      List<Writable> first=records.get(0);
      assertEquals(new Text("Bolivian Dark"),first.get(0));
      assertEquals(new Text("14-001"),first.get(1));
      assertEquals(new DoubleWritable(8.95),first.get(2));
    }
   }
  @Test public void testSimpleWithListener() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      RecordListener recordListener=new LogRecordListener();
      reader.setListeners(recordListener);
      reader.next();
      assertTrue(recordListener.invoked());
    }
   }
  @Test public void testReset() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      List<List<Writable>> records=new ArrayList<>();
      records.add(reader.next());
      reader.reset();
      records.add(reader.next());
      assertEquals(2,records.size());
      assertEquals(new Text("Bolivian Dark"),records.get(0).get(0));
      assertEquals(new Text("Bolivian Dark"),records.get(1).get(0));
    }
   }
  @Test(expected=IllegalStateException.class) public void testLackingDataSourceShouldFail() throws Exception {
    try (JDBCRecordReader reader=new JDBCRecordReader("SELECT * FROM Coffee")){
      reader.initialize(null);
    }
   }
  @Test public void testConfigurationDataSourceInitialization() throws Exception {
    try (JDBCRecordReader reader=new JDBCRecordReader("SELECT * FROM Coffee")){
      Configuration conf=new Configuration();
      conf.set(JDBCRecordReader.JDBC_URL,"jdbc:derby:" + dbName + ";create=true");
      conf.set(JDBCRecordReader.JDBC_DRIVER_CLASS_NAME,driverClassName);
      reader.initialize(conf,null);
      assertTrue(reader.hasNext());
    }
   }
  @Test(expected=IllegalArgumentException.class) public void testInitConfigurationMissingParametersShouldFail() throws Exception {
    try (JDBCRecordReader reader=new JDBCRecordReader("SELECT * FROM Coffee")){
      Configuration conf=new Configuration();
      conf.set(JDBCRecordReader.JDBC_URL,"should fail anyway");
      reader.initialize(conf,null);
    }
   }
  @Test(expected=UnsupportedOperationException.class) public void testRecordDataInputStreamShouldFail() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      reader.record(null,null);
    }
   }
  @Test public void testLoadFromMetaData() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      RecordMetaDataJdbc rmd=new RecordMetaDataJdbc(new URI(conn.getMetaData().getURL()),"SELECT * FROM Coffee WHERE ProdNum = ?",Collections.singletonList("14-001"),reader.getClass());
      Record res=reader.loadFromMetaData(rmd);
      assertNotNull(res);
      assertEquals(new Text("Bolivian Dark"),res.getRecord().get(0));
      assertEquals(new Text("14-001"),res.getRecord().get(1));
      assertEquals(new DoubleWritable(8.95),res.getRecord().get(2));
    }
   }
  @Test public void testNextRecord() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      Record r=reader.nextRecord();
      List<Writable> fields=r.getRecord();
      RecordMetaData meta=r.getMetaData();
      assertNotNull(r);
      assertNotNull(fields);
      assertNotNull(meta);
      assertEquals(new Text("Bolivian Dark"),fields.get(0));
      assertEquals(new Text("14-001"),fields.get(1));
      assertEquals(new DoubleWritable(8.95),fields.get(2));
      assertEquals(RecordMetaDataJdbc.class,meta.getClass());
    }
   }
  @Test public void testNextRecordAndRecover() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      Record r=reader.nextRecord();
      List<Writable> fields=r.getRecord();
      RecordMetaData meta=r.getMetaData();
      Record recovered=reader.loadFromMetaData(meta);
      List<Writable> fieldsRecovered=recovered.getRecord();
      assertEquals(fields.size(),fieldsRecovered.size());
      for (int i=0; i < fields.size(); i++) {
        assertEquals(fields.get(i),fieldsRecovered.get(i));
      }
    }
   }
  @Test(expected=RuntimeException.class) public void testResetForwardOnlyShouldFail() throws Exception {
    try (JDBCRecordReader reader=new JDBCRecordReader("SELECT * FROM Coffee",dataSource)){
      Configuration conf=new Configuration();
      conf.setInt(JDBCRecordReader.JDBC_RESULTSET_TYPE,ResultSet.TYPE_FORWARD_ONLY);
      reader.initialize(conf,null);
      reader.next();
      reader.reset();
    }
   }
  @Test public void testReadAllTypes() throws Exception {
    TestDb.buildAllTypesTable(conn);
    try (JDBCRecordReader reader=new JDBCRecordReader("SELECT * FROM AllTypes",dataSource)){
      reader.initialize(null);
      List<Writable> item=reader.next();
      assertEquals(item.size(),15);
      assertEquals(BooleanWritable.class,item.get(0).getClass());
      assertEquals(Text.class,item.get(1).getClass());
      assertEquals(Text.class,item.get(2).getClass());
      assertEquals(Text.class,item.get(3).getClass());
      assertEquals(Text.class,item.get(4).getClass());
      assertEquals(Text.class,item.get(5).getClass());
      assertEquals(Text.class,item.get(6).getClass());
      assertEquals(DoubleWritable.class,item.get(7).getClass());
      assertEquals(FloatWritable.class,item.get(8).getClass());
      assertEquals(DoubleWritable.class,item.get(9).getClass());
      assertEquals(DoubleWritable.class,item.get(10).getClass());
      assertEquals(DoubleWritable.class,item.get(11).getClass());
      assertEquals(IntWritable.class,item.get(12).getClass());
      assertEquals(IntWritable.class,item.get(13).getClass());
      assertEquals(LongWritable.class,item.get(14).getClass());
    }
   }
  @Test(expected=RuntimeException.class) public void testNextNoMoreShouldFail() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      while (reader.hasNext()) {
        reader.next();
      }
      reader.next();
    }
   }
  @Test(expected=IllegalArgumentException.class) public void testInvalidMetadataShouldFail() throws Exception {
    try (JDBCRecordReader reader=getInitializedReader("SELECT * FROM Coffee")){
      RecordMetaDataLine md=new RecordMetaDataLine(1,new URI("file://test"),JDBCRecordReader.class);
      reader.loadFromMetaData(md);
    }
   }
  private JDBCRecordReader getInitializedReader(  String query) throws Exception {
    int[] indices={1};
    JDBCRecordReader reader=new JDBCRecordReader(query,dataSource,"SELECT * FROM Coffee WHERE ProdNum = ?",indices);
    reader.setTrimStrings(true);
    reader.initialize(null);
    return reader;
  }
}
