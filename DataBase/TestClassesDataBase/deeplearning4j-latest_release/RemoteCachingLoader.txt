public static class RemoteCachingLoader implements BiFunction<File,String,SameDiff> {
  @Override public SameDiff apply(  File file,  String name){
    try {
      String s=FileUtils.readFileToString(file,StandardCharsets.UTF_8).replaceAll("\r\n","\n");
      String[] split=s.split("\n");
      if (split.length != 2) {
        throw new IllegalStateException("Invalid file: expected 2 lines with URL and MD5 hash. Got " + split.length + " lines");
      }
      String url=split[0];
      String md5=split[1];
      File localDir=new File(BASE_MODEL_DL_DIR,name);
      if (!localDir.exists())       localDir.mkdirs();
      String filename=FilenameUtils.getName(url);
      File localFile=new File(localDir,filename);
      if (localFile.exists() && !Downloader.checkMD5OfFile(md5,localFile)) {
        log.info("Deleting local file: does not match MD5. {}",localFile.getAbsolutePath());
        localFile.delete();
      }
      if (!localFile.exists()) {
        log.info("Starting resource download from: {} to {}",url,localFile.getAbsolutePath());
        Downloader.download(name,new URL(url),localFile,md5,3);
      }
      File modelFile;
      if (filename.endsWith(".pb")) {
        modelFile=localFile;
      }
 else       if (filename.endsWith(".tar.gz") || filename.endsWith(".tgz")) {
        List<String> files=ArchiveUtils.tarGzListFiles(localFile);
        String toExtract=null;
        for (        String f : files) {
          if (f.endsWith(".pb")) {
            if (toExtract != null) {
              throw new IllegalStateException("Found multiple .pb files in archive: " + toExtract + " and "+ f);
            }
            toExtract=f;
          }
        }
        Preconditions.checkState(toExtract != null,"Found to .pb files in archive: %s",localFile.getAbsolutePath());
        Preconditions.checkNotNull(currentTestDir,"currentTestDir has not been set (is null)");
        modelFile=new File(currentTestDir,"tf_model.pb");
        ArchiveUtils.tarGzExtractSingleFile(localFile,modelFile,toExtract);
      }
 else       if (filename.endsWith(".zip")) {
        throw new IllegalStateException("Not yet implemented");
      }
 else {
        throw new IllegalStateException("Unknown format: " + filename);
      }
      return TFGraphTestAllHelper.LOADER.apply(modelFile,name);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}
