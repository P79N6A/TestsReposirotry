public class DefaultTrainerContextTest {
  int nChannels=1;
  int outputNum=10;
  int seed=123;
  @Test public void testEqualUuid1(){
    MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).l2(0.0005).weightInit(WeightInit.XAVIER).updater(new Nesterovs(0.01,0.9)).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(nChannels).stride(1,1).nOut(20).activation(Activation.IDENTITY).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(4,new DenseLayer.Builder().activation(Activation.RELU).nOut(500).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(28,28,nChannels));
    MultiLayerConfiguration conf=builder.build();
    MultiLayerNetwork model=new MultiLayerNetwork(conf);
    model.init();
    ParallelWrapper wrapper=new ParallelWrapper.Builder(model).prefetchBuffer(24).workers(2).averagingFrequency(3).reportScoreAfterAveraging(true).build();
    val context=new DefaultTrainerContext();
    val trainer=context.create("alpha",3,model,0,true,wrapper,WorkspaceMode.NONE,3);
    assertEquals("alpha_thread_3",trainer.getUuid());
  }
}
