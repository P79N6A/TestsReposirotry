/** 
 * @author raver119@gmail.com
 */
@Slf4j @RunWith(Parameterized.class) public class PerformanceTrackerTests extends BaseNd4jTest {
  public PerformanceTrackerTests(  Nd4jBackend backend){
    super(backend);
  }
  @Before public void setUp() throws Exception {
    PerformanceTracker.getInstance().clear();
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.BANDWIDTH);
  }
  @After public void tearDown() throws Exception {
    PerformanceTracker.getInstance().clear();
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.SCOPE_PANIC);
  }
  @Test public void testAveragedHolder_1(){
    val holder=new AveragingTransactionsHolder();
    holder.addValue(MemcpyDirection.HOST_TO_HOST,50L);
    holder.addValue(MemcpyDirection.HOST_TO_HOST,150L);
    assertEquals(100L,holder.getAverageValue(MemcpyDirection.HOST_TO_HOST).longValue());
  }
  @Test public void testAveragedHolder_2(){
    val holder=new AveragingTransactionsHolder();
    holder.addValue(MemcpyDirection.HOST_TO_HOST,50L);
    holder.addValue(MemcpyDirection.HOST_TO_HOST,150L);
    holder.addValue(MemcpyDirection.HOST_TO_HOST,100L);
    assertEquals(100L,holder.getAverageValue(MemcpyDirection.HOST_TO_HOST).longValue());
  }
  @Test public void testPerformanceTracker_1(){
    val perf=PerformanceTracker.getInstance();
    val res=perf.addMemoryTransaction(0,100,5000);
    assertEquals(50000,res);
  }
  @Test public void testPerformanceTracker_2(){
    val perf=PerformanceTracker.getInstance();
    val res=perf.addMemoryTransaction(0,10,5000,MemcpyDirection.HOST_TO_HOST);
    assertEquals(500000,res);
  }
  @Test public void testPerformanceTracker_3(){
    val perf=PerformanceTracker.getInstance();
    val res=perf.addMemoryTransaction(0,10000,5000);
    assertEquals(500,res);
  }
  @Test public void testTrackerCpu_1(){
    if (!Nd4j.getExecutioner().getClass().getCanonicalName().toLowerCase().contains("native"))     return;
    val fa=new float[100000000];
    val array=Nd4j.create(fa,new int[]{10000,10000});
    val map=PerformanceTracker.getInstance().getCurrentBandwidth();
    val bw=map.get(0).get(MemcpyDirection.HOST_TO_HOST);
    log.info("H2H bandwidth: {}",map);
    assertTrue(bw > 0);
  }
  @Test public void testTrackerGpu_1(){
    if (!Nd4j.getExecutioner().getClass().getCanonicalName().toLowerCase().contains("cuda"))     return;
    val fa=new float[100000000];
    val array=Nd4j.create(fa,new int[]{10000,10000});
    val map=PerformanceTracker.getInstance().getCurrentBandwidth();
    val bw=map.get(0).get(MemcpyDirection.HOST_TO_DEVICE);
    log.info("H2D bandwidth: {}",map);
    assertTrue(bw > 0);
  }
  @Override public char ordering(){
    return 'c';
  }
}
