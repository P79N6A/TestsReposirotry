@Slf4j @RunWith(Parameterized.class) public class DebugModeTests extends BaseNd4jTest {
  DataBuffer.Type initialType;
  public DebugModeTests(  Nd4jBackend backend){
    super(backend);
    this.initialType=Nd4j.dataType();
  }
  @Before public void turnMeUp(){
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.DISABLED);
  }
  @After public void turnMeDown(){
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.DISABLED);
  }
  @Override public char ordering(){
    return 'c';
  }
  @Test public void testDebugMode_1(){
    assertEquals(DebugMode.DISABLED,Nd4j.getWorkspaceManager().getDebugMode());
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.SPILL_EVERYTHING);
    assertEquals(DebugMode.SPILL_EVERYTHING,Nd4j.getWorkspaceManager().getDebugMode());
  }
  @Test public void testSpillMode_1(){
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.SPILL_EVERYTHING);
    val basicConfig=WorkspaceConfiguration.builder().initialSize(10 * 1024 * 1024).maxSize(10 * 1024 * 1024).overallocationLimit(0.1).policyAllocation(AllocationPolicy.STRICT).policyLearning(LearningPolicy.FIRST_LOOP).policyMirroring(MirroringPolicy.FULL).policySpill(SpillPolicy.EXTERNAL).build();
    try (val ws=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getAndActivateWorkspace(basicConfig,"R_119_1993")){
      assertEquals(10 * 1024 * 1024L,ws.getCurrentSize());
      assertEquals(0,ws.getDeviceOffset());
      assertEquals(0,ws.getHostOffset());
      val array=Nd4j.create(10,10).assign(1.0f);
      assertTrue(array.isAttached());
      assertEquals(0,ws.getHostOffset());
      assertEquals(0,ws.getDeviceOffset());
      assertEquals(10 * 10 * Nd4j.sizeOfDataType(),ws.getSpilledSize());
    }
   }
  @Test public void testSpillMode_2(){
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.SPILL_EVERYTHING);
    val basicConfig=WorkspaceConfiguration.builder().initialSize(0).maxSize(10 * 1024 * 1024).overallocationLimit(0.1).policyAllocation(AllocationPolicy.STRICT).policyLearning(LearningPolicy.FIRST_LOOP).policyMirroring(MirroringPolicy.FULL).policySpill(SpillPolicy.EXTERNAL).build();
    try (val ws=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getAndActivateWorkspace(basicConfig,"R_119_1992")){
      assertEquals(0L,ws.getCurrentSize());
      assertEquals(0,ws.getDeviceOffset());
      assertEquals(0,ws.getHostOffset());
      val array=Nd4j.create(10,10).assign(1.0f);
      assertTrue(array.isAttached());
      assertEquals(0,ws.getHostOffset());
      assertEquals(0,ws.getDeviceOffset());
      assertEquals(10 * 10 * Nd4j.sizeOfDataType(),ws.getSpilledSize());
    }
     try (val ws=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getAndActivateWorkspace(basicConfig,"R_119_1992")){
      assertEquals(0L,ws.getCurrentSize());
      assertEquals(0,ws.getDeviceOffset());
      assertEquals(0,ws.getHostOffset());
      assertEquals(0,ws.getSpilledSize());
    }
   }
  @Test public void testBypassMode_1(){
    Nd4j.getWorkspaceManager().setDebugMode(DebugMode.BYPASS_EVERYTHING);
    val basicConfig=WorkspaceConfiguration.builder().initialSize(0).maxSize(10 * 1024 * 1024).overallocationLimit(0.1).policyAllocation(AllocationPolicy.STRICT).policyLearning(LearningPolicy.FIRST_LOOP).policyMirroring(MirroringPolicy.FULL).policySpill(SpillPolicy.EXTERNAL).build();
    try (val ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(basicConfig,"R_119_1994")){
      val array=Nd4j.create(10,10).assign(1.0f);
      assertFalse(array.isAttached());
    }
   }
}
