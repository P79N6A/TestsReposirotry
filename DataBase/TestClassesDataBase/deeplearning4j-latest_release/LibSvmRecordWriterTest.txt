/** 
 * Unit tests for LibSvmRecordWriter. Replaces writer tests in SVMRecordWriterTest.
 * @see LibSvmRecordReader
 * @see org.datavec.api.records.reader.impl.LibSvmTest
 * @author dave@skymind.io
 */
public class LibSvmRecordWriterTest {
  @Test public void testBasic() throws Exception {
    Configuration configWriter=new Configuration();
    Configuration configReader=new Configuration();
    configReader.setInt(LibSvmRecordReader.NUM_FEATURES,10);
    configReader.setBoolean(LibSvmRecordReader.ZERO_BASED_INDEXING,false);
    File inputFile=new ClassPathResource("datavec-api/svmlight/basic.txt").getFile();
    executeTest(configWriter,configReader,inputFile);
  }
  @Test public void testNoLabel() throws Exception {
    Configuration configWriter=new Configuration();
    configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
    configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,9);
    Configuration configReader=new Configuration();
    configReader.setInt(LibSvmRecordReader.NUM_FEATURES,10);
    configReader.setBoolean(LibSvmRecordReader.ZERO_BASED_INDEXING,false);
    File inputFile=new ClassPathResource("datavec-api/svmlight/basic.txt").getFile();
    executeTest(configWriter,configReader,inputFile);
  }
  @Test public void testMultioutputRecord() throws Exception {
    Configuration configWriter=new Configuration();
    configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
    configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,9);
    Configuration configReader=new Configuration();
    configReader.setInt(LibSvmRecordReader.NUM_FEATURES,10);
    configReader.setBoolean(LibSvmRecordReader.ZERO_BASED_INDEXING,false);
    File inputFile=new ClassPathResource("datavec-api/svmlight/multioutput.txt").getFile();
    executeTest(configWriter,configReader,inputFile);
  }
  @Test public void testMultilabelRecord() throws Exception {
    Configuration configWriter=new Configuration();
    configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
    configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,9);
    configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
    Configuration configReader=new Configuration();
    configReader.setInt(LibSvmRecordReader.NUM_FEATURES,10);
    configReader.setBoolean(LibSvmRecordReader.MULTILABEL,true);
    configReader.setInt(LibSvmRecordReader.NUM_LABELS,4);
    configReader.setBoolean(LibSvmRecordReader.ZERO_BASED_INDEXING,false);
    File inputFile=new ClassPathResource("datavec-api/svmlight/multilabel.txt").getFile();
    executeTest(configWriter,configReader,inputFile);
  }
  @Test public void testZeroBasedIndexing() throws Exception {
    Configuration configWriter=new Configuration();
    configWriter.setBoolean(LibSvmRecordWriter.ZERO_BASED_INDEXING,true);
    configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
    configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,10);
    configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
    Configuration configReader=new Configuration();
    configReader.setInt(LibSvmRecordReader.NUM_FEATURES,11);
    configReader.setBoolean(LibSvmRecordReader.MULTILABEL,true);
    configReader.setInt(LibSvmRecordReader.NUM_LABELS,5);
    File inputFile=new ClassPathResource("datavec-api/svmlight/multilabel.txt").getFile();
    executeTest(configWriter,configReader,inputFile);
  }
  public static void executeTest(  Configuration configWriter,  Configuration configReader,  File inputFile) throws Exception {
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      LibSvmRecordReader rr=new LibSvmRecordReader();
      rr.initialize(configReader,new FileSplit(inputFile));
      while (rr.hasNext()) {
        List<Writable> record=rr.next();
        writer.write(record);
      }
    }
     Pattern p=Pattern.compile(String.format("%s:\\d+ ",LibSvmRecordReader.QID_PREFIX));
    List<String> linesOriginal=new ArrayList<>();
    for (    String line : FileUtils.readLines(inputFile)) {
      if (!line.startsWith(LibSvmRecordReader.COMMENT_CHAR)) {
        String lineClean=line.split(LibSvmRecordReader.COMMENT_CHAR,2)[0];
        if (lineClean.startsWith(" ")) {
          lineClean=" " + lineClean.trim();
        }
 else {
          lineClean=lineClean.trim();
        }
        Matcher m=p.matcher(lineClean);
        lineClean=m.replaceAll("");
        linesOriginal.add(lineClean);
      }
    }
    List<String> linesNew=FileUtils.readLines(tempFile);
    assertEquals(linesOriginal,linesNew);
  }
  @Test public void testNDArrayWritables() throws Exception {
    INDArray arr2=Nd4j.zeros(2);
    arr2.putScalar(0,11);
    arr2.putScalar(1,12);
    INDArray arr3=Nd4j.zeros(3);
    arr3.putScalar(0,13);
    arr3.putScalar(1,14);
    arr3.putScalar(2,15);
    List<Writable> record=Arrays.asList((Writable)new DoubleWritable(1),new NDArrayWritable(arr2),new IntWritable(2),new DoubleWritable(3),new NDArrayWritable(arr3),new IntWritable(4));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    String lineOriginal="13.0,14.0,15.0,4 1:1.0 2:11.0 3:12.0 4:2.0 5:3.0";
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,3);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
     String lineNew=FileUtils.readFileToString(tempFile).trim();
    assertEquals(lineOriginal,lineNew);
  }
  @Test public void testNDArrayWritablesMultilabel() throws Exception {
    INDArray arr2=Nd4j.zeros(2);
    arr2.putScalar(0,11);
    arr2.putScalar(1,12);
    INDArray arr3=Nd4j.zeros(3);
    arr3.putScalar(0,0);
    arr3.putScalar(1,1);
    arr3.putScalar(2,0);
    List<Writable> record=Arrays.asList((Writable)new DoubleWritable(1),new NDArrayWritable(arr2),new IntWritable(2),new DoubleWritable(3),new NDArrayWritable(arr3),new DoubleWritable(1));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    String lineOriginal="2,4 1:1.0 2:11.0 3:12.0 4:2.0 5:3.0";
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,3);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
     String lineNew=FileUtils.readFileToString(tempFile).trim();
    assertEquals(lineOriginal,lineNew);
  }
  @Test public void testNDArrayWritablesZeroIndex() throws Exception {
    INDArray arr2=Nd4j.zeros(2);
    arr2.putScalar(0,11);
    arr2.putScalar(1,12);
    INDArray arr3=Nd4j.zeros(3);
    arr3.putScalar(0,0);
    arr3.putScalar(1,1);
    arr3.putScalar(2,0);
    List<Writable> record=Arrays.asList((Writable)new DoubleWritable(1),new NDArrayWritable(arr2),new IntWritable(2),new DoubleWritable(3),new NDArrayWritable(arr3),new DoubleWritable(1));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    String lineOriginal="1,3 0:1.0 1:11.0 2:12.0 3:2.0 4:3.0";
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setBoolean(LibSvmRecordWriter.ZERO_BASED_INDEXING,true);
      configWriter.setBoolean(LibSvmRecordWriter.ZERO_BASED_LABEL_INDEXING,true);
      configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,3);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
     String lineNew=FileUtils.readFileToString(tempFile).trim();
    assertEquals(lineOriginal,lineNew);
  }
  @Test public void testNonIntegerButValidMultilabel() throws Exception {
    List<Writable> record=Arrays.asList((Writable)new IntWritable(3),new IntWritable(2),new DoubleWritable(1.0));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,1);
      configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
   }
  @Test(expected=NumberFormatException.class) public void nonIntegerMultilabel() throws Exception {
    List<Writable> record=Arrays.asList((Writable)new IntWritable(3),new IntWritable(2),new DoubleWritable(1.2));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,1);
      configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
   }
  @Test(expected=NumberFormatException.class) public void nonBinaryMultilabel() throws Exception {
    List<Writable> record=Arrays.asList((Writable)new IntWritable(0),new IntWritable(1),new IntWritable(2));
    File tempFile=File.createTempFile("LibSvmRecordWriter",".txt");
    tempFile.setWritable(true);
    tempFile.deleteOnExit();
    if (tempFile.exists())     tempFile.delete();
    try (LibSvmRecordWriter writer=new LibSvmRecordWriter()){
      Configuration configWriter=new Configuration();
      configWriter.setInt(LibSvmRecordWriter.FEATURE_FIRST_COLUMN,0);
      configWriter.setInt(LibSvmRecordWriter.FEATURE_LAST_COLUMN,1);
      configWriter.setBoolean(LibSvmRecordWriter.MULTILABEL,true);
      FileSplit outputSplit=new FileSplit(tempFile);
      writer.initialize(configWriter,outputSplit,new NumberOfRecordsPartitioner());
      writer.write(record);
    }
   }
}
