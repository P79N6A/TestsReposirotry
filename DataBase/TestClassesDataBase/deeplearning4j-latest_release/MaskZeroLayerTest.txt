public class MaskZeroLayerTest {
  @Test public void activate(){
    INDArray ex1=Nd4j.create(new double[][]{new double[]{0,3,5},new double[]{0,0,2}});
    INDArray ex2=Nd4j.create(new double[][]{new double[]{0,0,2},new double[]{0,0,2}});
    org.deeplearning4j.nn.conf.layers.LSTM underlying=new org.deeplearning4j.nn.conf.layers.LSTM.Builder().activation(Activation.IDENTITY).gateActivationFunction(Activation.IDENTITY).nIn(2).nOut(1).build();
    NeuralNetConfiguration conf=new NeuralNetConfiguration();
    conf.setLayer(underlying);
    INDArray params=Nd4j.zeros(new int[]{16});
    for (int i=12; i < 16; i++) {
      params.putScalar(i,1.0);
    }
    Layer lstm=underlying.instantiate(conf,Collections.<TrainingListener>emptyList(),0,params,false);
    double maskingValue=0.0;
    MaskZeroLayer l=new MaskZeroLayer(lstm,maskingValue);
    INDArray input=Nd4j.create(Arrays.asList(ex1,ex2),new int[]{2,2,3});
    INDArray out=l.activate(input,true,LayerWorkspaceMgr.noWorkspaces());
    INDArray firstExampleOutput=out.getRow(0);
    INDArray secondExampleOutput=out.getRow(1);
    assertEquals(firstExampleOutput.getDouble(0),0.0,1e-6);
    assertEquals(firstExampleOutput.getDouble(1),1.0,1e-6);
    assertEquals(firstExampleOutput.getDouble(2),2.0,1e-6);
    assertEquals(secondExampleOutput.getDouble(0),0.0,1e-6);
    assertEquals(secondExampleOutput.getDouble(1),0.0,1e-6);
    assertEquals(secondExampleOutput.getDouble(2),1.0,1e-6);
  }
}
