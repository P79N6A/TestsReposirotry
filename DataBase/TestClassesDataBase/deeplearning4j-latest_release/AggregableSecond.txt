public static class AggregableSecond<T> implements IAggregableReduceOp<T,Writable> {
  @Getter private T firstMet=null;
  @Getter private T elem=null;
  @Override public void accept(  T element){
    if (firstMet == null)     firstMet=element;
 else {
      if (elem == null)       elem=element;
    }
  }
  @Override public <W extends IAggregableReduceOp<T,Writable>>void combine(  W accu){
    if (accu instanceof AggregableSecond && elem == null) {
      if (firstMet == null) {
        AggregableSecond<T> accumulator=(AggregableSecond)accu;
        T otherFirst=accumulator.getFirstMet();
        T otherElement=accumulator.getElem();
        if (otherFirst != null)         firstMet=otherFirst;
        if (otherElement != null)         elem=otherElement;
      }
 else {
        AggregableSecond<T> accumulator=(AggregableSecond)accu;
        T otherFirst=accumulator.getFirstMet();
        if (otherFirst != null)         elem=otherFirst;
      }
    }
  }
  @Override public Writable get(){
    return UnsafeWritableInjector.inject(elem);
  }
}
