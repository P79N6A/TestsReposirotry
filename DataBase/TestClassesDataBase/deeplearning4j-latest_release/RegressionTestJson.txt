public class RegressionTestJson {
  @Test public void regressionTestJson100a() throws Exception {
    File f=new ClassPathResource("datavec-api/regression_test/100a/transformprocess_regression_100a.json").getFile();
    String s=FileUtils.readFileToString(f);
    TransformProcess fromJson=TransformProcess.fromJson(s);
    Schema schema=new Schema.Builder().addColumnCategorical("Cat","State1","State2").addColumnCategorical("Cat2","State1","State2").addColumnDouble("Dbl").addColumnDouble("Dbl2",null,100.0,true,false).addColumnInteger("Int").addColumnInteger("Int2",0,10).addColumnLong("Long").addColumnLong("Long2",-100L,null).addColumnString("Str").addColumnString("Str2","someregexhere",1,null).addColumnString("Str3").addColumnTime("TimeCol",DateTimeZone.UTC).addColumnTime("TimeCol2",DateTimeZone.UTC,null,1000L).build();
    Map<String,String> map=new HashMap<>();
    map.put("from","to");
    map.put("anotherFrom","anotherTo");
    TransformProcess expected=new TransformProcess.Builder(schema).categoricalToInteger("Cat").categoricalToOneHot("Cat2").appendStringColumnTransform("Str3","ToAppend").integerToCategorical("Cat",Arrays.asList("State1","State2")).stringToCategorical("Str",Arrays.asList("State1","State2")).duplicateColumn("Str","Str2a").removeColumns("Str2a").renameColumn("Str2","Str2a").reorderColumns("Cat","Dbl").conditionalCopyValueTransform("Dbl","Dbl2",new DoubleColumnCondition("Dbl",ConditionOp.Equal,0.0)).conditionalReplaceValueTransform("Dbl",new DoubleWritable(1.0),new DoubleColumnCondition("Dbl",ConditionOp.Equal,1.0)).doubleColumnsMathOp("NewDouble",MathOp.Add,"Dbl","Dbl2").doubleMathOp("Dbl",MathOp.Add,1.0).integerColumnsMathOp("NewInt",MathOp.Subtract,"Int","Int2").integerMathOp("Int",MathOp.Multiply,2).transform(new ReplaceEmptyIntegerWithValueTransform("Int",1)).transform(new ReplaceInvalidWithIntegerTransform("Int",1)).longColumnsMathOp("Long",MathOp.Multiply,"Long","Long2").longMathOp("Long",MathOp.ScalarMax,0).transform(new MapAllStringsExceptListTransform("Str","Other",Arrays.asList("Ok","SomeVal"))).stringRemoveWhitespaceTransform("Str").transform(new ReplaceEmptyStringTransform("Str","WasEmpty")).replaceStringTransform("Str",map).transform(new StringListToCategoricalSetTransform("Str",Arrays.asList("StrA","StrB"),Arrays.asList("StrA","StrB"),",")).stringMapTransform("Str2a",map).transform(new DeriveColumnsFromTimeTransform.Builder("TimeCol").addIntegerDerivedColumn("Hour",DateTimeFieldType.hourOfDay()).addStringDerivedColumn("Date","YYYY-MM-dd",DateTimeZone.UTC).build()).stringToTimeTransform("Str2a","YYYY-MM-dd hh:mm:ss",DateTimeZone.UTC).timeMathOp("TimeCol2",MathOp.Add,1,TimeUnit.HOURS).filter(new FilterInvalidValues("Cat","Str2a")).filter(new ConditionFilter(new NullWritableColumnCondition("Long"))).convertToSequence("Int",new NumericalColumnComparator("TimeCol2")).convertFromSequence().convertToSequence("Int",new StringComparator("Str2a")).splitSequence(new SequenceSplitTimeSeparation("TimeCol2",1,TimeUnit.HOURS)).reduce(new Reducer.Builder(ReduceOp.TakeFirst).keyColumns("TimeCol2").countColumns("Cat").sumColumns("Dbl").build()).reduceSequenceByWindow(new Reducer.Builder(ReduceOp.TakeFirst).countColumns("Cat2").stdevColumns("Dbl2").build(),new OverlappingTimeWindowFunction.Builder().timeColumn("TimeCol2").addWindowStartTimeColumn(true).addWindowEndTimeColumn(true).windowSize(1,TimeUnit.HOURS).offset(5,TimeUnit.MINUTES).windowSeparation(15,TimeUnit.MINUTES).excludeEmptyWindows(true).build()).convertFromSequence().calculateSortedRank("rankColName","TimeCol2",new LongWritableComparator()).sequenceMovingWindowReduce("rankColName",20,ReduceOp.Mean).addConstantColumn("someIntColumn",ColumnType.Integer,new IntWritable(0)).integerToOneHot("someIntColumn",0,3).filter(new SequenceLengthCondition(ConditionOp.LessThan,1)).addConstantColumn("testColSeq",ColumnType.Integer,new DoubleWritable(0)).offsetSequence(Collections.singletonList("testColSeq"),1,SequenceOffsetTransform.OperationType.InPlace).addConstantColumn("someTextCol",ColumnType.String,new Text("some values")).build();
    assertEquals(expected,fromJson);
  }
}
