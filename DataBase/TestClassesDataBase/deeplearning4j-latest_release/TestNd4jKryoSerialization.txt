/** 
 * Created by Alex on 04/07/2016.
 */
public class TestNd4jKryoSerialization {
  private JavaSparkContext sc;
  @Before public void before(){
    SparkConf sparkConf=new SparkConf();
    sparkConf.setMaster("local[*]");
    sparkConf.set("spark.driver.host","localhost");
    sparkConf.setAppName("Iris");
    sparkConf.set("spark.serializer","org.apache.spark.serializer.KryoSerializer");
    sparkConf.set("spark.kryo.registrator","org.nd4j.Nd4jRegistrator");
    sc=new JavaSparkContext(sparkConf);
  }
  @Test public void testSerialization(){
    Tuple2<INDArray,INDArray> t2=new Tuple2<>(Nd4j.linspace(1,10,10),Nd4j.linspace(10,20,10));
    Broadcast<Tuple2<INDArray,INDArray>> b=sc.broadcast(t2);
    List<INDArray> list=new ArrayList<>();
    for (int i=0; i < 100; i++) {
      list.add(Nd4j.ones(5));
    }
    JavaRDD<INDArray> rdd=sc.parallelize(list);
    rdd.foreach(new AssertFn(b));
  }
  @Test public void testSerializationPrimitives(){
    Counter<Integer> c=new Counter<>();
    c.incrementCount(5,3.0);
    CounterMap<Integer,Double> cm=new CounterMap<>();
    cm.setCount(7,3.0,4.5);
    Object[] objs=new Object[]{new AtomicBoolean(true),new AtomicBoolean(false),new AtomicDouble(5.0),c,cm,new ImmutablePair<>(5,3.0),new ImmutableQuad<>(1,2.0,3.0f,4L),new ImmutableTriple<>(1,2.0,3.0f),new Pair<>(5,3.0),new Quad<>(1,2.0,3.0f,4L),new Triple<>(1,2.0,3.0f)};
    SerializerInstance si=sc.env().serializer().newInstance();
    for (    Object o : objs) {
      System.out.println(o.getClass());
      testSerialization(o,si);
    }
  }
  private <T>void testSerialization(  T in,  SerializerInstance si){
    ByteBuffer bb=si.serialize(in,null);
    T deserialized=(T)si.deserialize(bb,null);
    boolean equals=in.equals(deserialized);
    assertTrue(in.getClass() + "\t" + in.toString(),equals);
  }
  @After public void after(){
    if (sc != null)     sc.close();
  }
@AllArgsConstructor public static class AssertFn implements VoidFunction<INDArray> {
    private Broadcast<Tuple2<INDArray,INDArray>> b;
    @Override public void call(    INDArray arr) throws Exception {
      Tuple2<INDArray,INDArray> t2=b.getValue();
      assertEquals(Nd4j.linspace(1,10,10),t2._1());
      assertEquals(Nd4j.linspace(10,20,10),t2._2());
      assertEquals(Nd4j.ones(5),arr);
    }
  }
}
