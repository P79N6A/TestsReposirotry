/** 
 * @author Adam Gibson
 */
public class CodecReaderTest {
  @Test public void testCodecReader() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new CodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> record=reader.sequenceRecord();
    Iterator<List<Writable>> it=record.iterator();
    List<Writable> first=it.next();
    assertEquals(1,first.size());
    assertEquals(80 * 46 * 3,((ArrayWritable)first.iterator().next()).length());
  }
  @Test public void testCodecReaderMeta() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new CodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> record=reader.sequenceRecord();
    assertEquals(500,record.size());
    reader.reset();
    SequenceRecord seqR=reader.nextSequence();
    assertEquals(record,seqR.getSequenceRecord());
    RecordMetaData meta=seqR.getMetaData();
    assertTrue(meta.getURI().toString().endsWith(file.getName()));
    SequenceRecord fromMeta=reader.loadSequenceFromMetaData(meta);
    assertEquals(seqR,fromMeta);
  }
  @Test public void testViaDataInputStream() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new CodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    Configuration conf2=new Configuration(conf);
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> expected=reader.sequenceRecord();
    SequenceRecordReader reader2=new CodecRecordReader();
    reader2.setConf(conf2);
    DataInputStream dataInputStream=new DataInputStream(new FileInputStream(file));
    List<List<Writable>> actual=reader2.sequenceRecord(null,dataInputStream);
    assertEquals(expected,actual);
  }
  @Ignore @Test public void testNativeCodecReader() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new NativeCodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> record=reader.sequenceRecord();
    Iterator<List<Writable>> it=record.iterator();
    List<Writable> first=it.next();
    assertEquals(1,first.size());
    assertEquals(80 * 46 * 3,((ArrayWritable)first.iterator().next()).length());
  }
  @Ignore @Test public void testNativeCodecReaderMeta() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new NativeCodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> record=reader.sequenceRecord();
    assertEquals(500,record.size());
    reader.reset();
    SequenceRecord seqR=reader.nextSequence();
    assertEquals(record,seqR.getSequenceRecord());
    RecordMetaData meta=seqR.getMetaData();
    assertTrue(meta.getURI().toString().endsWith("fire_lowres.mp4"));
    SequenceRecord fromMeta=reader.loadSequenceFromMetaData(meta);
    assertEquals(seqR,fromMeta);
  }
  @Ignore @Test public void testNativeViaDataInputStream() throws Exception {
    File file=new ClassPathResource("datavec-data-codec/fire_lowres.mp4").getFile();
    SequenceRecordReader reader=new NativeCodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"160");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"500");
    conf.set(CodecRecordReader.ROWS,"80");
    conf.set(CodecRecordReader.COLUMNS,"46");
    Configuration conf2=new Configuration(conf);
    reader.initialize(new FileSplit(file));
    reader.setConf(conf);
    assertTrue(reader.hasNext());
    List<List<Writable>> expected=reader.sequenceRecord();
    SequenceRecordReader reader2=new NativeCodecRecordReader();
    reader2.setConf(conf2);
    DataInputStream dataInputStream=new DataInputStream(new FileInputStream(file));
    List<List<Writable>> actual=reader2.sequenceRecord(null,dataInputStream);
    assertEquals(expected,actual);
  }
}
