@RunWith(Parameterized.class) public class UpdaterTest extends BaseNd4jTest {
  public UpdaterTest(  Nd4jBackend backend){
    super(backend);
  }
  @Test public void testAdaGradLegacy(){
    int rows=1;
    int cols=1;
    org.nd4j.linalg.learning.legacy.AdaGrad grad=new org.nd4j.linalg.learning.legacy.AdaGrad(rows,cols,1e-3);
    grad.setStateViewArray(Nd4j.zeros(1,rows * cols),new int[]{rows,cols},'c',true);
    INDArray w=Nd4j.ones(rows,cols);
    grad.getGradient(w,0);
    assertEquals(1e-1,w.getDouble(0),1e-1);
  }
  @Test public void testNesterovs(){
    int rows=10;
    int cols=2;
    NesterovsUpdater grad=new NesterovsUpdater(new Nesterovs(0.5,0.9));
    grad.setStateViewArray(Nd4j.zeros(1,rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1,1);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Test public void testAdaGrad(){
    int rows=10;
    int cols=2;
    AdaGradUpdater grad=new AdaGradUpdater(new AdaGrad(0.1,AdaGrad.DEFAULT_ADAGRAD_EPSILON));
    grad.setStateViewArray(Nd4j.zeros(1,rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1,1);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Test public void testAdaDelta(){
    int rows=10;
    int cols=2;
    AdaDeltaUpdater grad=new AdaDeltaUpdater(new AdaDelta());
    grad.setStateViewArray(Nd4j.zeros(1,2 * rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1e-3,1e-3);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Test public void testAdam(){
    int rows=10;
    int cols=2;
    AdamUpdater grad=new AdamUpdater(new Adam());
    grad.setStateViewArray(Nd4j.zeros(1,2 * rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1e-3,1e-3);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Test public void testNadam(){
    int rows=10;
    int cols=2;
    NadamUpdater grad=new NadamUpdater(new Nadam());
    grad.setStateViewArray(Nd4j.zeros(1,2 * rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1e-3,1e-3);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Test public void testAdaMax(){
    int rows=10;
    int cols=2;
    AdaMaxUpdater grad=new AdaMaxUpdater(new AdaMax());
    grad.setStateViewArray(Nd4j.zeros(1,2 * rows * cols),new long[]{rows,cols},'c',true);
    INDArray W=Nd4j.zeros(rows,cols);
    Distribution dist=Nd4j.getDistributions().createNormal(1e-3,1e-3);
    for (int i=0; i < W.rows(); i++)     W.putRow(i,Nd4j.create(dist.sample(W.columns())));
    for (int i=0; i < 5; i++) {
      W.addi(Nd4j.randn(rows,cols));
    }
  }
  @Override public char ordering(){
    return 'f';
  }
}
