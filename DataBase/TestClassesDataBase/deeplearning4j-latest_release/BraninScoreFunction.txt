public static class BraninScoreFunction implements ScoreFunction {
  private static final double a=1.0;
  private static final double b=5.1 / (4.0 * Math.PI * Math.PI);
  private static final double c=5.0 / Math.PI;
  private static final double r=6.0;
  private static final double s=10.0;
  private static final double t=1.0 / (8.0 * Math.PI);
  @Override public double score(  Object m,  DataProvider data,  Map<String,Object> dataParameters){
    BraninConfig model=(BraninConfig)m;
    double x1=model.getX1();
    double x2=model.getX2();
    return a * Math.pow(x2 - b * x1 * x1 + c * x1 - r,2.0) + s * (1 - t) * Math.cos(x1) + s;
  }
  @Override public double score(  Object model,  Class<? extends DataSource> dataSource,  Properties dataSourceProperties){
    throw new UnsupportedOperationException();
  }
  @Override public boolean minimize(){
    return true;
  }
  @Override public List<Class<?>> getSupportedModelTypes(){
    return Collections.<Class<?>>singletonList(BraninConfig.class);
  }
  @Override public List<Class<?>> getSupportedDataTypes(){
    return Collections.<Class<?>>singletonList(Object.class);
  }
}
