/** 
 * Created by agibsonccc on 12/17/16.
 */
@Slf4j public class ParameterServerParallelWrapperTest {
  @Test public void testWrapper() throws Exception {
    int nChannels=1;
    int outputNum=10;
    int batchSize=128;
    int seed=123;
    log.info("Load data....");
    DataSetIterator mnistTrain=new MnistDataSetIterator(batchSize,1000);
    DataSetIterator mnistTest=new MnistDataSetIterator(batchSize,false,12345);
    log.info("Build model....");
    MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).l2(0.0005).weightInit(WeightInit.XAVIER).updater(new Nesterovs(0.01,0.9)).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(nChannels).stride(1,1).nOut(20).activation(Activation.IDENTITY).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(4,new DenseLayer.Builder().activation(Activation.RELU).nOut(500).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(28,28,1));
    MultiLayerConfiguration conf=builder.build();
    MultiLayerNetwork model=new MultiLayerNetwork(conf);
    model.init();
    ParallelWrapper parameterServerParallelWrapper=new ParallelWrapper.Builder(model).trainerFactory(new ParameterServerTrainerContext()).workers(Runtime.getRuntime().availableProcessors()).reportScoreAfterAveraging(true).prefetchBuffer(3).build();
    parameterServerParallelWrapper.fit(mnistTrain);
    Thread.sleep(60000);
    parameterServerParallelWrapper.close();
  }
}
