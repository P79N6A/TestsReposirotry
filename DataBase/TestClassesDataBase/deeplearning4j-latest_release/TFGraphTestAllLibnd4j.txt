/** 
 * Created by susaneraly on 11/29/17.
 */
@RunWith(Parameterized.class) @Slf4j public class TFGraphTestAllLibnd4j {
  @Rule public TestWatcher testWatcher=new TestWatcher(){
    @Override protected void starting(    Description description){
      log.info("TFGraphTestAllLibnd4j: Starting parameterized test: " + description.getDisplayName());
    }
  }
;
  private Map<String,INDArray> inputs;
  private Map<String,INDArray> predictions;
  private String modelName;
  private File localTestDir;
  private static final TFGraphTestAllHelper.ExecuteWith EXECUTE_WITH=TFGraphTestAllHelper.ExecuteWith.LIBND4J;
  private static final String BASE_DIR="tf_graphs/examples";
  private static final String MODEL_FILENAME="frozen_model.pb";
  private static final String[] SKIP_ARR=new String[]{"deep_mnist","deep_mnist_no_dropout","ssd_mobilenet_v1_coco","yolov2_608x608","inception_v3_with_softmax","conv_5"};
  public static final Set<String> SKIP_SET=new HashSet<>(Arrays.asList(SKIP_ARR));
  private static final String[] SKIP_FOR_LIBND4J_EXEC=new String[]{"reductions/max.*","reductions/mean.*","reductions/min.*","reductions/prod.*","reductions/sum.*","reductions/moments.*","multiple_outs_a","multiple_outs_b","cnn3d_layers/.*","alpha_dropout/.*","layers_dropout/.*","losses/.*","logsumexp/.*","reduce_all/.*","reduce_any/.*","split/.*","reductions/count_nonzero.*","sufficient_statistics.*","histogram_fixed.*","unsorted_segment.*","l2_normalize/.*","norm_tests/.*","g_06","simpleif.*","simple_cond.*"};
  @BeforeClass public static void beforeClass() throws Exception {
    Nd4j.setDataType(DataBuffer.Type.FLOAT);
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.SCOPE_PANIC);
  }
  @Before public void setup(){
    Nd4j.setDataType(DataBuffer.Type.FLOAT);
  }
  @After public void tearDown() throws Exception {
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableDebugMode(false);
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableVerboseMode(false);
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> data() throws IOException {
    File baseDir=new File(System.getProperty("java.io.tmpdir"),UUID.randomUUID().toString());
    return TFGraphTestAllHelper.fetchTestParams(BASE_DIR,MODEL_FILENAME,EXECUTE_WITH,baseDir);
  }
  public TFGraphTestAllLibnd4j(  Map<String,INDArray> inputs,  Map<String,INDArray> predictions,  String modelName,  File localTestDir) throws IOException {
    this.inputs=inputs;
    this.predictions=predictions;
    this.modelName=modelName;
    this.localTestDir=localTestDir;
  }
  @Test(timeout=25000L) public void test() throws Exception {
    Nd4j.create(1);
    if (SKIP_SET.contains(modelName)) {
      log.info("\n\tSKIPPED MODEL: " + modelName);
      return;
    }
    for (    String s : TFGraphTestAllSameDiff.IGNORE_REGEXES) {
      if (modelName.matches(s)) {
        log.info("\n\tIGNORE MODEL ON REGEX: {} - regex {}",modelName,s);
        OpValidationSuite.ignoreFailing();
      }
    }
    for (    String s : SKIP_FOR_LIBND4J_EXEC) {
      if (modelName.matches(s)) {
        log.info("\n\tIGNORE MODEL ON REGEX - SKIP LIBND4J EXEC ONLY: {} - regex {}",modelName,s);
        OpValidationSuite.ignoreFailing();
      }
    }
    log.info("Starting test: {}",this.modelName);
    Pair<Double,Double> precisionOverride=TFGraphTestAllHelper.testPrecisionOverride(modelName);
    Double maxRE=(precisionOverride == null ? null : precisionOverride.getFirst());
    Double minAbs=(precisionOverride == null ? null : precisionOverride.getSecond());
    TFGraphTestAllHelper.checkOnlyOutput(inputs,predictions,modelName,BASE_DIR,MODEL_FILENAME,EXECUTE_WITH,TFGraphTestAllHelper.LOADER,maxRE,minAbs);
  }
}
