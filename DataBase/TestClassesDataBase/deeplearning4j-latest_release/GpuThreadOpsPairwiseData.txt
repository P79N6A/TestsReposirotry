private class GpuThreadOpsPairwiseData extends GpuThreadSyntheticData {
  public GpuThreadOpsPairwiseData(  int threadId){
    super(threadId);
  }
  @Override public void run(){
    log.info(this.getName() + "/" + this.getId()+ " started on device ["+ AtomicAllocator.getInstance().getDeviceId()+ "]");
    AtomicLong cnt=new AtomicLong(0);
    AtomicLong cntX=new AtomicLong(0);
    while (true) {
      INDArray array1=Nd4j.create(new float[]{1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f,1.5f});
      INDArray array2=Nd4j.create(new float[]{2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f});
      long time1=0;
      long time2=0;
      for (int x=0; x < 30; x++) {
        time1=System.nanoTime();
        array1.rdiviRowVector(array2);
        time2=System.nanoTime();
        cntX.incrementAndGet();
      }
      if (cnt.incrementAndGet() % 100 == 0) {
        log.info("rDivi execution time: [" + (time2 - time1) + "] ns on device ["+ allocator.getDeviceId(array1)+ "]");
        assertEquals(1.5f,array1.getRow(0).getFloat(0),0.01);
        if (threadId == 0) {
          log.info("Total calls: " + cntX.get() * 4);
          log.info("Total memory allocated on device [0]: " + allocator.getTotalAllocatedDeviceMemory(0));
        }
        try {
          Thread.sleep(1000);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
}
