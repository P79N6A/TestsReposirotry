/** 
 * @author raver119@gmail.com
 */
public class SparkSequenceVectorsTest {
  protected static List<Sequence<VocabWord>> sequencesCyclic;
  private JavaSparkContext sc;
  @Before public void setUp() throws Exception {
    if (sequencesCyclic == null) {
      sequencesCyclic=new ArrayList<>();
      for (int с=0; с < 10; с++) {
        Sequence<VocabWord> sequence=new Sequence<>();
        for (int e=0; e < 10; e++) {
          sequence.addElement(new VocabWord(1.0,"" + e,(long)e));
        }
        sequence.addElement(new VocabWord(1.0,"0",0L));
        sequencesCyclic.add(sequence);
      }
    }
    SparkConf sparkConf=new SparkConf().setMaster("local[8]").setAppName("SeqVecTests");
    sc=new JavaSparkContext(sparkConf);
  }
  @After public void tearDown() throws Exception {
    sc.stop();
  }
  @Test public void testFrequenciesCount() throws Exception {
    JavaRDD<Sequence<VocabWord>> sequences=sc.parallelize(sequencesCyclic);
    SparkSequenceVectors<VocabWord> seqVec=new SparkSequenceVectors<>();
    seqVec.fitSequences(sequences);
    Counter<Long> counter=seqVec.getCounter();
    assertEquals(20,counter.getCount(0L),1e-5);
    for (int e=1; e < sequencesCyclic.get(0).getElements().size() - 1; e++) {
      assertEquals(10,counter.getCount(sequencesCyclic.get(0).getElementByIndex(e).getStorageId()),1e-5);
    }
    VocabCache<ShallowSequenceElement> shallowVocab=seqVec.getShallowVocabCache();
    assertEquals(10,shallowVocab.numWords());
    ShallowSequenceElement zero=shallowVocab.tokenFor(0L);
    ShallowSequenceElement first=shallowVocab.tokenFor(1L);
    assertNotEquals(null,zero);
    assertEquals(20.0,zero.getElementFrequency(),1e-5);
    assertEquals(0,zero.getIndex());
    assertEquals(10.0,first.getElementFrequency(),1e-5);
  }
}
