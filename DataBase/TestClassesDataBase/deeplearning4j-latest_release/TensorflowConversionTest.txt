public class TensorflowConversionTest {
  @Test public void testView(){
    INDArray matrix=Nd4j.linspace(1,8,8).reshape(2,4);
    INDArray view=matrix.slice(0);
    TensorflowConversion conversion=TensorflowConversion.getInstance();
    tensorflow.TF_Tensor tf_tensor=conversion.tensorFromNDArray(view);
    INDArray converted=conversion.ndArrayFromTensor(tf_tensor);
    assertEquals(view,converted);
  }
  @Test(expected=IllegalArgumentException.class) public void testNullArray(){
    INDArray array=Nd4j.create(2,2);
    array.setData(null);
    TensorflowConversion conversion=TensorflowConversion.getInstance();
    tensorflow.TF_Tensor tf_tensor=conversion.tensorFromNDArray(array);
    fail();
  }
  @Test public void testConversionFromNdArray() throws Exception {
    INDArray arr=Nd4j.linspace(1,4,4);
    TensorflowConversion tensorflowConversion=TensorflowConversion.getInstance();
    tensorflow.TF_Tensor tf_tensor=tensorflowConversion.tensorFromNDArray(arr);
    INDArray fromTensor=tensorflowConversion.ndArrayFromTensor(tf_tensor);
    assertEquals(arr,fromTensor);
    arr.addi(1.0);
    tf_tensor=tensorflowConversion.tensorFromNDArray(arr);
    fromTensor=tensorflowConversion.ndArrayFromTensor(tf_tensor);
    assertEquals(arr,fromTensor);
  }
  @Test public void testCudaIfAvailable() throws Exception {
    TensorflowConversion tensorflowConversion=TensorflowConversion.getInstance();
    byte[] content=IOUtils.toByteArray(new ClassPathResource("/tf_graphs/nd4j_convert/simple_graph/frozen_model.pb").getInputStream());
    tensorflow.TF_Status status=tensorflow.TF_Status.newStatus();
    tensorflow.TF_Graph initializedGraphForNd4jDevices=tensorflowConversion.loadGraph(content,status);
    assertNotNull(initializedGraphForNd4jDevices);
    String deviceName=tensorflowConversion.defaultDeviceForThread();
    byte[] content2=IOUtils.toByteArray(new ClassPathResource("/tf_graphs/nd4j_convert/simple_graph/frozen_model.pb").getInputStream());
    GraphDef graphDef1=GraphDef.parseFrom(content2);
    System.out.println(graphDef1);
  }
}
