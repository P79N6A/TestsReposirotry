public class RepeatVectorTest {
  private int REPEAT=4;
  private Layer getRepeatVectorLayer(){
    NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).layer(new RepeatVector.Builder(REPEAT).build()).build();
    return conf.getLayer().instantiate(conf,null,0,null,false);
  }
  @Test public void testRepeatVector(){
    double[] arr=new double[]{1.,2.,3.,1.,2.,3.,1.,2.,3.,1.,2.,3.};
    INDArray expectedOut=Nd4j.create(arr,new long[]{1,3,REPEAT},'f');
    INDArray input=Nd4j.create(new double[]{1.,2.,3.},new long[]{1,3});
    Layer layer=getRepeatVectorLayer();
    INDArray output=layer.activate(input,false,LayerWorkspaceMgr.noWorkspaces());
    assertTrue(Arrays.equals(expectedOut.shape(),output.shape()));
    assertEquals(expectedOut,output);
    INDArray epsilon=Nd4j.ones(1,3,4);
    Pair<Gradient,INDArray> out=layer.backpropGradient(epsilon,LayerWorkspaceMgr.noWorkspaces());
    INDArray outEpsilon=out.getSecond();
    INDArray expectedEpsilon=Nd4j.create(new double[]{4.,4.,4.},new long[]{1,3});
    assertEquals(expectedEpsilon,outEpsilon);
  }
}
