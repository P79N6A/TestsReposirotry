/** 
 * Created by raver119 on 03.01.16.
 */
public class FileLabelAwareIteratorTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Before public void setUp() throws Exception {
  }
  @Test public void testExtractLabelFromPath1() throws Exception {
    val dir=testDir.newFolder();
    val resource=new ClassPathResource("/labeled");
    resource.copyDirectory(dir);
    val iterator=new FileLabelAwareIterator.Builder().addSourceFolder(dir).build();
    int cnt=0;
    while (iterator.hasNextDocument()) {
      val document=iterator.nextDocument();
      assertNotEquals(null,document);
      assertNotEquals(null,document.getContent());
      assertNotEquals(null,document.getLabel());
      cnt++;
    }
    assertEquals(3,cnt);
    assertEquals(3,iterator.getLabelsSource().getNumberOfLabelsUsed());
    assertTrue(iterator.getLabelsSource().getLabels().contains("positive"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("negative"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("neutral"));
  }
  @Test public void testExtractLabelFromPath2() throws Exception {
    val dir0=testDir.newFolder();
    val dir1=testDir.newFolder();
    val resource=new ClassPathResource("/labeled");
    val resource2=new ClassPathResource("/rootdir");
    resource.copyDirectory(dir0);
    resource2.copyDirectory(dir1);
    FileLabelAwareIterator iterator=new FileLabelAwareIterator.Builder().addSourceFolder(dir0).addSourceFolder(dir1).build();
    int cnt=0;
    while (iterator.hasNextDocument()) {
      LabelledDocument document=iterator.nextDocument();
      assertNotEquals(null,document);
      assertNotEquals(null,document.getContent());
      assertNotEquals(null,document.getLabel());
      cnt++;
    }
    assertEquals(5,cnt);
    assertEquals(5,iterator.getLabelsSource().getNumberOfLabelsUsed());
    assertTrue(iterator.getLabelsSource().getLabels().contains("positive"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("negative"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("neutral"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("label1"));
    assertTrue(iterator.getLabelsSource().getLabels().contains("label2"));
  }
}
