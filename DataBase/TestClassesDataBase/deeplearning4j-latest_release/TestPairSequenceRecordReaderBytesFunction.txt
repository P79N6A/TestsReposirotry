public class TestPairSequenceRecordReaderBytesFunction extends BaseSparkTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test public void test() throws Exception {
    JavaSparkContext sc=getContext();
    File f=testDir.newFolder();
    new ClassPathResource("datavec-spark/video/").copyDirectory(f);
    String path=f.getAbsolutePath() + "/*";
    PathToKeyConverter pathConverter=new PathToKeyConverterFilename();
    JavaPairRDD<Text,BytesPairWritable> toWrite=DataVecSparkUtil.combineFilesForSequenceFile(sc,path,path,pathConverter);
    Path p=Files.createTempDirectory("dl4j_rrbytesPairOut");
    p.toFile().deleteOnExit();
    String outPath=p.toString() + "/out";
    new File(outPath).deleteOnExit();
    toWrite.saveAsNewAPIHadoopFile(outPath,Text.class,BytesPairWritable.class,SequenceFileOutputFormat.class);
    JavaPairRDD<Text,BytesPairWritable> fromSeq=sc.sequenceFile(outPath,Text.class,BytesPairWritable.class);
    SequenceRecordReader srr1=getReader();
    SequenceRecordReader srr2=getReader();
    PairSequenceRecordReaderBytesFunction psrbf=new PairSequenceRecordReaderBytesFunction(srr1,srr2);
    JavaRDD<Tuple2<List<List<Writable>>,List<List<Writable>>>> writables=fromSeq.map(psrbf);
    List<Tuple2<List<List<Writable>>,List<List<Writable>>>> fromSequenceFile=writables.collect();
    InputSplit is=new FileSplit(f,new String[]{"mp4"},true);
    SequenceRecordReader srr=getReader();
    srr.initialize(is);
    List<List<List<Writable>>> list=new ArrayList<>(4);
    while (srr.hasNext()) {
      list.add(srr.sequenceRecord());
    }
    assertEquals(4,list.size());
    assertEquals(4,fromSequenceFile.size());
    boolean[] found=new boolean[4];
    for (int i=0; i < 4; i++) {
      int foundIndex=-1;
      Tuple2<List<List<Writable>>,List<List<Writable>>> tuple2=fromSequenceFile.get(i);
      List<List<Writable>> seq1=tuple2._1();
      List<List<Writable>> seq2=tuple2._2();
      assertEquals(seq1,seq2);
      for (int j=0; j < 4; j++) {
        if (seq1.equals(list.get(j))) {
          if (foundIndex != -1)           fail();
          foundIndex=j;
          if (found[foundIndex])           fail();
          found[foundIndex]=true;
        }
      }
    }
    int count=0;
    for (    boolean b : found)     if (b)     count++;
    assertEquals(4,count);
  }
  private static SequenceRecordReader getReader(){
    SequenceRecordReader seqRR=new CodecRecordReader();
    Configuration conf=new Configuration();
    conf.set(CodecRecordReader.RAVEL,"true");
    conf.set(CodecRecordReader.START_FRAME,"0");
    conf.set(CodecRecordReader.TOTAL_FRAMES,"25");
    conf.set(CodecRecordReader.ROWS,"64");
    conf.set(CodecRecordReader.COLUMNS,"64");
    seqRR.setConf(conf);
    return seqRR;
  }
}
