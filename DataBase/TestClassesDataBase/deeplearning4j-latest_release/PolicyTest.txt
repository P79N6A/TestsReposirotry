/** 
 * @author saudet
 */
public class PolicyTest {
public static class DummyAC<NN extends DummyAC> implements IActorCritic<NN> {
    NeuralNetwork nn;
    DummyAC(    NeuralNetwork nn){
      this.nn=nn;
    }
    @Override public NeuralNetwork[] getNeuralNetworks(){
      return new NeuralNetwork[]{nn};
    }
    @Override public boolean isRecurrent(){
      throw new UnsupportedOperationException();
    }
    @Override public void reset(){
      throw new UnsupportedOperationException();
    }
    @Override public void fit(    INDArray input,    INDArray[] labels){
      throw new UnsupportedOperationException();
    }
    @Override public INDArray[] outputAll(    INDArray batch){
      return new INDArray[]{batch,batch};
    }
    @Override public NN clone(){
      throw new UnsupportedOperationException();
    }
    @Override public void copy(    NN from){
      throw new UnsupportedOperationException();
    }
    @Override public Gradient[] gradient(    INDArray input,    INDArray[] labels){
      throw new UnsupportedOperationException();
    }
    @Override public void applyGradient(    Gradient[] gradient,    int batchSize){
      throw new UnsupportedOperationException();
    }
    @Override public void save(    OutputStream streamValue,    OutputStream streamPolicy) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void save(    String pathValue,    String pathPolicy) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public double getLatestScore(){
      throw new UnsupportedOperationException();
    }
    @Override public void save(    OutputStream os) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void save(    String filename) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
  @Test public void testACPolicy() throws Exception {
    ComputationGraph cg=new ComputationGraph(new NeuralNetConfiguration.Builder().seed(444).graphBuilder().addInputs("input").addLayer("output",new OutputLayer.Builder().nOut(1).lossFunction(LossFunctions.LossFunction.XENT).activation(Activation.SIGMOID).build(),"input").setOutputs("output").build());
    MultiLayerNetwork mln=new MultiLayerNetwork(new NeuralNetConfiguration.Builder().seed(555).list().layer(0,new OutputLayer.Builder().nOut(1).lossFunction(LossFunctions.LossFunction.XENT).activation(Activation.SIGMOID).build()).build());
    ACPolicy policy=new ACPolicy(new DummyAC(cg));
    assertNotNull(policy.rd);
    policy=new ACPolicy(new DummyAC(mln));
    assertNotNull(policy.rd);
    INDArray input=Nd4j.create(new double[]{1.0,0.0});
    for (int i=0; i < 100; i++) {
      assertEquals(0,(int)policy.nextAction(input));
    }
    input=Nd4j.create(new double[]{0.0,1.0});
    for (int i=0; i < 100; i++) {
      assertEquals(1,(int)policy.nextAction(input));
    }
    input=Nd4j.create(new double[]{0.1,0.2,0.3,0.4});
    int[] count=new int[4];
    for (int i=0; i < 100; i++) {
      count[policy.nextAction(input)]++;
    }
    System.out.println(count[0] + " " + count[1]+ " "+ count[2]+ " "+ count[3]);
    assertTrue(count[0] < 20);
    assertTrue(count[1] < 30);
    assertTrue(count[2] < 40);
    assertTrue(count[3] < 50);
  }
}
