public class DataVecComponentTest extends CamelTestSupport {
  @ClassRule public static TemporaryFolder testDir=new TemporaryFolder();
  private static File dir;
  private static File irisFile;
  @BeforeClass public static void before() throws Exception {
    dir=testDir.newFolder();
    File iris=new ClassPathResource("iris.dat").getFile();
    irisFile=new File(dir,"iris.dat");
    FileUtils.copyFile(iris,irisFile);
  }
  @Test public void testDataVec() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    RecordReader reader=new CSVRecordReader();
    reader.initialize(new FileSplit(new ClassPathResource("iris.dat").getFile()));
    Collection<Collection<Writable>> recordAssertion=new ArrayList<>();
    while (reader.hasNext())     recordAssertion.add(reader.next());
    mock.expectedBodiesReceived(recordAssertion);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("file:" + dir.getAbsolutePath() + "?fileName=iris.dat&noop=true").unmarshal().csv().to("datavec://org.datavec.api.formats.input.impl.ListStringInputFormat?inputMarshaller=org.datavec.camel.component.ListStringInputMarshaller&writableConverter=org.datavec.api.io.converters.SelfWritableConverter").to("mock:result");
      }
    }
;
  }
}
