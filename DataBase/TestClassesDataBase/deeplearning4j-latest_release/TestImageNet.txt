/** 
 * Tests ImageNet utilities.
 * @author Justin Long (crockpotveggies)
 */
@Slf4j public class TestImageNet extends BaseDL4JTest {
  @Test public void testImageNetLabels() throws IOException {
    ZooModel model=VGG19.builder().numClasses(0).build();
    ComputationGraph initializedModel=(ComputationGraph)model.initPretrained();
    NativeImageLoader loader=new NativeImageLoader(224,224,3);
    ClassLoader classloader=Thread.currentThread().getContextClassLoader();
    INDArray image=loader.asMatrix(classloader.getResourceAsStream("deeplearning4j-zoo/goldenretriever.jpg"));
    DataNormalization scaler=new VGG16ImagePreProcessor();
    scaler.transform(image);
    INDArray[] output=initializedModel.output(false,image);
    String decodedLabels=new ImageNetLabels().decodePredictions(output[0]);
    log.info(decodedLabels);
    assertTrue(decodedLabels.contains("golden_retriever"));
    Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
    System.gc();
  }
  @Test public void testDarknetLabels() throws IOException {
    ZooModel model=Darknet19.builder().numClasses(0).build();
    ComputationGraph initializedModel=(ComputationGraph)model.initPretrained();
    NativeImageLoader loader=new NativeImageLoader(224,224,3,new ColorConversionTransform(COLOR_BGR2RGB));
    ClassLoader classloader=Thread.currentThread().getContextClassLoader();
    INDArray image=loader.asMatrix(classloader.getResourceAsStream("deeplearning4j-zoo/goldenretriever.jpg"));
    DataNormalization scaler=new ImagePreProcessingScaler(0,1);
    scaler.transform(image);
    INDArray result=initializedModel.outputSingle(image);
    Labels labels=new DarknetLabels();
    List<List<ClassPrediction>> predictions=labels.decodePredictions(result,10);
    log.info(predictions.toString());
    assertEquals("golden retriever",predictions.get(0).get(0).getLabel());
    Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
    System.gc();
    model=TinyYOLO.builder().numClasses(0).build();
    initializedModel=(ComputationGraph)model.initPretrained();
    loader=new NativeImageLoader(416,416,3,new ColorConversionTransform(COLOR_BGR2RGB));
    image=loader.asMatrix(classloader.getResourceAsStream("deeplearning4j-zoo/goldenretriever.jpg"));
    scaler=new ImagePreProcessingScaler(0,1);
    scaler.transform(image);
    INDArray outputs=initializedModel.outputSingle(image);
    List<DetectedObject> objs=YoloUtils.getPredictedObjects(Nd4j.create(((TinyYOLO)model).getPriorBoxes()),outputs,0.6,0.4);
    assertEquals(1,objs.size());
    labels=new VOCLabels();
    for (    DetectedObject obj : objs) {
      ClassPrediction classPrediction=labels.decodePredictions(obj.getClassPredictions(),1).get(0).get(0);
      log.info(obj.toString() + " " + classPrediction);
      assertEquals("dog",classPrediction.getLabel());
    }
    Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
    System.gc();
    model=YOLO2.builder().numClasses(1000).build();
    initializedModel=(ComputationGraph)model.initPretrained();
    loader=new NativeImageLoader(608,608,3,new ColorConversionTransform(COLOR_BGR2RGB));
    image=loader.asMatrix(classloader.getResourceAsStream("deeplearning4j-zoo/goldenretriever.jpg"));
    scaler=new ImagePreProcessingScaler(0,1);
    scaler.transform(image);
    outputs=initializedModel.outputSingle(image);
    objs=YoloUtils.getPredictedObjects(Nd4j.create(((YOLO2)model).getPriorBoxes()),outputs,0.6,0.4);
    assertEquals(1,objs.size());
    labels=new COCOLabels();
    for (    DetectedObject obj : objs) {
      ClassPrediction classPrediction=labels.decodePredictions(obj.getClassPredictions(),1).get(0).get(0);
      log.info(obj.toString() + " " + classPrediction);
      assertEquals("dog",classPrediction.getLabel());
    }
  }
}
