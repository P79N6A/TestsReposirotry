static class CustomRecordReader extends BaseRecordReader {
  int n=0;
  CustomRecordReader(){
  }
  @Override public boolean batchesSupported(){
    return false;
  }
  @Override public List<List<Writable>> next(  int num){
    throw new RuntimeException("Not implemented");
  }
  @Override public List<Writable> next(){
    INDArray nd=Nd4j.create(new float[nZ * nY * nX],new int[]{1,1,nZ,nY,nX},'c').assign(n);
    final List<Writable> res=RecordConverter.toRecord(nd);
    res.add(new IntWritable(0));
    n++;
    return res;
  }
  @Override public boolean hasNext(){
    return n < 10;
  }
  final static ArrayList<String> labels=new ArrayList<>(2);
static {
    labels.add("lbl0");
    labels.add("lbl1");
  }
  @Override public List<String> getLabels(){
    return labels;
  }
  @Override public void reset(){
    n=0;
  }
  @Override public boolean resetSupported(){
    return true;
  }
  @Override public List<Writable> record(  URI uri,  DataInputStream dataInputStream){
    return next();
  }
  @Override public Record nextRecord(){
    List<Writable> r=next();
    return new org.datavec.api.records.impl.Record(r,null);
  }
  @Override public Record loadFromMetaData(  RecordMetaData recordMetaData) throws IOException {
    throw new RuntimeException("Not implemented");
  }
  @Override public List<Record> loadFromMetaData(  List<RecordMetaData> recordMetaDatas){
    throw new RuntimeException("Not implemented");
  }
  @Override public void close(){
  }
  @Override public void setConf(  Configuration conf){
  }
  @Override public Configuration getConf(){
    return null;
  }
  @Override public void initialize(  InputSplit split){
    n=0;
  }
  @Override public void initialize(  Configuration conf,  InputSplit split){
    n=0;
  }
}
