@Slf4j public class MessageSplitterTest {
  @Test public void testMessageSplit_1() throws Exception {
    val array=Nd4j.linspace(1,100000,100000).reshape(-1,1000);
    val splitter=new MessageSplitter();
    val message=new GradientsUpdateMessage("123",array);
    val messages=splitter.split(message,16384);
    assertNotNull(messages);
    assertFalse(messages.isEmpty());
    log.info("Number of messages: {}",messages.size());
    for (    val m : messages)     assertEquals("123",m.getOriginalId());
    Optional<GradientsUpdateMessage> dec=null;
    for (    val m : messages)     dec=splitter.merge(m);
    assertNotNull(dec);
    assertTrue(dec.isPresent());
  }
  @Test public void testSmallMessageSplit_1() throws Exception {
    val array=Nd4j.linspace(1,15,15).reshape(-1,5);
    val splitter=new MessageSplitter();
    val message=new GradientsUpdateMessage("123",array);
    val messages=splitter.split(message,16384);
    assertNotNull(messages);
    assertEquals(1,messages.size());
    for (    val m : messages)     assertEquals("123",m.getOriginalId());
    Optional<GradientsUpdateMessage> dec=splitter.merge(new ArrayList<>(messages).get(0));
    assertNotNull(dec);
    assertTrue(dec.isPresent());
  }
  @Test public void testConcurrentAppend_1() throws Exception {
    val splitter=new MessageSplitter();
    val array=Nd4j.linspace(1,100000,100000).reshape(-1,1000);
    for (int e=0; e < 100; e++) {
      val message=new GradientsUpdateMessage(java.util.UUID.randomUUID().toString(),array);
      val chunks=splitter.split(message,16384);
      val ref=new Atomic<GradientsUpdateMessage>();
      chunks.parallelStream().forEach(c -> {
        val o=splitter.merge(c);
        if (o.isPresent())         ref.set((GradientsUpdateMessage)o.get());
      }
);
      assertNotNull(ref.get());
      assertEquals(array,ref.get().getPayload());
      assertEquals(0,splitter.memoryUse.intValue());
      assertEquals(false,splitter.isTrackedMessage(message.getMessageId()));
      assertEquals(0,splitter.trackers.size());
    }
  }
}
