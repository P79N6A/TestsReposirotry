public class RandomDataSet {
  private int[] dataShape;
  private int dataRank;
  private int dataElementCount;
  private int[] ks;
  private DataSet allFolds;
  private INDArray allFeatures;
  private INDArray allLabels;
  private INDArray[] kfoldFeats;
  private INDArray[] kfoldLabels;
  public RandomDataSet(  int[] dataShape,  int[] ks){
    this.dataShape=dataShape;
    this.dataRank=this.dataShape.length;
    this.ks=ks;
    this.dataElementCount=1;
    int[] eachFoldSize=new int[dataRank + 1];
    eachFoldSize[0]=0;
    kfoldFeats=new INDArray[ks.length];
    kfoldLabels=new INDArray[ks.length];
    for (int i=0; i < dataRank; i++) {
      this.dataElementCount*=dataShape[i];
      eachFoldSize[i + 1]=dataShape[i];
    }
    for (int i=0; i < ks.length; i++) {
      eachFoldSize[0]=ks[i];
      INDArray currentFoldF=Nd4j.rand(eachFoldSize);
      INDArray currentFoldL=Nd4j.rand(ks[i],1);
      kfoldFeats[i]=currentFoldF;
      kfoldLabels[i]=currentFoldL;
      if (i == 0) {
        allFeatures=currentFoldF.dup();
        allLabels=currentFoldL.dup();
      }
 else {
        allFeatures=Nd4j.vstack(allFeatures,currentFoldF).dup();
        allLabels=Nd4j.vstack(allLabels,currentFoldL).dup();
      }
    }
    allFolds=new DataSet(allFeatures,allLabels.reshape(allFeatures.size(0),1));
  }
  public DataSet getAllFolds(){
    return allFolds;
  }
  public INDArray getfoldK(  int k,  boolean feat){
    return feat ? kfoldFeats[k] : kfoldLabels[k];
  }
  public INDArray getFoldbutk(  int k,  boolean feat){
    INDArray iFold=null;
    boolean notInit=true;
    for (int i=0; i < ks.length; i++) {
      if (i == k)       continue;
      if (notInit) {
        iFold=getfoldK(i,feat);
        notInit=false;
      }
 else {
        iFold=Nd4j.vstack(iFold,getfoldK(i,feat)).dup();
      }
    }
    return iFold;
  }
}
