/** 
 * @author Max Pumperla
 */
public class KerasCropping3DTest {
  private final String LAYER_NAME="cropping_3D_layer";
  private final int[] CROPPING=new int[]{2,3,5};
  private Keras1LayerConfiguration conf1=new Keras1LayerConfiguration();
  private Keras2LayerConfiguration conf2=new Keras2LayerConfiguration();
  @Test public void testCropping3DLayer() throws Exception {
    Integer keras1=1;
    buildCropping3DLayer(conf1,keras1);
    Integer keras2=2;
    buildCropping3DLayer(conf2,keras2);
    buildCroppingSingleDim3DLayer(conf1,keras1);
    buildCroppingSingleDim3DLayer(conf2,keras2);
  }
  private void buildCropping3DLayer(  KerasLayerConfiguration conf,  Integer kerasVersion) throws Exception {
    Map<String,Object> layerConfig=new HashMap<>();
    layerConfig.put(conf.getLAYER_FIELD_CLASS_NAME(),conf.getLAYER_CLASS_NAME_CROPPING_3D());
    Map<String,Object> config=new HashMap<>();
    config.put(conf.getLAYER_FIELD_NAME(),LAYER_NAME);
    ArrayList padding=new ArrayList<Integer>(){
{
        for (        int i : CROPPING)         add(i);
      }
    }
;
    config.put(conf.getLAYER_FIELD_CROPPING(),padding);
    layerConfig.put(conf.getLAYER_FIELD_CONFIG(),config);
    layerConfig.put(conf.getLAYER_FIELD_KERAS_VERSION(),kerasVersion);
    Cropping3D layer=new KerasCropping3D(layerConfig).getCropping3DLayer();
    assertEquals(LAYER_NAME,layer.getLayerName());
    assertEquals(CROPPING[0],layer.getCropping()[0]);
    assertEquals(CROPPING[0],layer.getCropping()[1]);
    assertEquals(CROPPING[1],layer.getCropping()[2]);
    assertEquals(CROPPING[1],layer.getCropping()[3]);
    assertEquals(CROPPING[2],layer.getCropping()[4]);
    assertEquals(CROPPING[2],layer.getCropping()[5]);
  }
  private void buildCroppingSingleDim3DLayer(  KerasLayerConfiguration conf,  Integer kerasVersion) throws Exception {
    Map<String,Object> layerConfig=new HashMap<>();
    layerConfig.put(conf.getLAYER_FIELD_CLASS_NAME(),conf.getLAYER_CLASS_NAME_CROPPING_3D());
    Map<String,Object> config=new HashMap<>();
    config.put(conf.getLAYER_FIELD_NAME(),LAYER_NAME);
    config.put(conf.getLAYER_FIELD_CROPPING(),CROPPING[0]);
    layerConfig.put(conf.getLAYER_FIELD_CONFIG(),config);
    layerConfig.put(conf.getLAYER_FIELD_KERAS_VERSION(),kerasVersion);
    Cropping3D layer=new KerasCropping3D(layerConfig).getCropping3DLayer();
    assertEquals(LAYER_NAME,layer.getLayerName());
    assertEquals(CROPPING[0],layer.getCropping()[0]);
    assertEquals(CROPPING[0],layer.getCropping()[1]);
  }
}
