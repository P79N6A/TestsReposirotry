/** 
 * Created by Alex on 26/08/2016.
 */
public class TestCustomLayers extends BaseDL4JTest {
  @Test public void testJsonMultiLayerNetwork(){
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new CustomLayer(3.14159)).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build()).build();
    String json=conf.toJson();
    String yaml=conf.toYaml();
    System.out.println(json);
    MultiLayerConfiguration confFromJson=MultiLayerConfiguration.fromJson(json);
    assertEquals(conf,confFromJson);
    MultiLayerConfiguration confFromYaml=MultiLayerConfiguration.fromYaml(yaml);
    assertEquals(conf,confFromYaml);
  }
  @Test public void testJsonComputationGraph(){
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new CustomLayer(3.14159),"0").addLayer("2",new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build(),"1").setOutputs("2").build();
    String json=conf.toJson();
    String yaml=conf.toYaml();
    System.out.println(json);
    ComputationGraphConfiguration confFromJson=ComputationGraphConfiguration.fromJson(json);
    assertEquals(conf,confFromJson);
    ComputationGraphConfiguration confFromYaml=ComputationGraphConfiguration.fromYaml(yaml);
    assertEquals(conf,confFromYaml);
  }
  @Test public void checkInitializationFF(){
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new DenseLayer.Builder().nIn(9).nOut(10).build()).layer(1,new CustomLayer(3.14159)).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(11).build()).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    assertEquals(9 * 10 + 10,net.getLayer(0).numParams());
    assertEquals(10 * 10 + 10,net.getLayer(1).numParams());
    assertEquals(10 * 11 + 11,net.getLayer(2).numParams());
    net.output(Nd4j.rand(1,9));
    net.fit(new DataSet(Nd4j.rand(1,9),Nd4j.rand(1,11)));
  }
  @Test public void testCustomOutputLayerMLN(){
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new CustomOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build()).build();
    String json=conf.toJson();
    String yaml=conf.toYaml();
    System.out.println(json);
    MultiLayerConfiguration confFromJson=MultiLayerConfiguration.fromJson(json);
    assertEquals(conf,confFromJson);
    MultiLayerConfiguration confFromYaml=MultiLayerConfiguration.fromYaml(yaml);
    assertEquals(conf,confFromYaml);
    Nd4j.getRandom().setSeed(12345);
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    assertTrue(net.getLayer(1) instanceof CustomOutputLayerImpl);
    MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).weightInit(WeightInit.XAVIER).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build()).build();
    Nd4j.getRandom().setSeed(12345);
    MultiLayerNetwork net2=new MultiLayerNetwork(conf2);
    net2.init();
    assertEquals(net2.params(),net.params());
    INDArray testFeatures=Nd4j.rand(1,10);
    INDArray testLabels=Nd4j.zeros(1,10);
    testLabels.putScalar(0,3,1.0);
    DataSet ds=new DataSet(testFeatures,testLabels);
    assertEquals(net2.output(testFeatures),net.output(testFeatures));
    assertEquals(net2.score(ds),net.score(ds),1e-6);
  }
  @Test public void testCustomOutputLayerCG(){
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new CustomOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).activation(Activation.SOFTMAX).build(),"0").setOutputs("1").build();
    String json=conf.toJson();
    String yaml=conf.toYaml();
    System.out.println(json);
    ComputationGraphConfiguration confFromJson=ComputationGraphConfiguration.fromJson(json);
    assertEquals(conf,confFromJson);
    ComputationGraphConfiguration confFromYaml=ComputationGraphConfiguration.fromYaml(yaml);
    assertEquals(conf,confFromYaml);
    Nd4j.getRandom().setSeed(12345);
    ComputationGraph net=new ComputationGraph(conf);
    net.init();
    assertTrue(net.getLayer(1) instanceof CustomOutputLayerImpl);
    ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(10).nOut(10).activation(Activation.SOFTMAX).build(),"0").setOutputs("1").build();
    Nd4j.getRandom().setSeed(12345);
    ComputationGraph net2=new ComputationGraph(conf2);
    net2.init();
    assertEquals(net2.params(),net.params());
    INDArray testFeatures=Nd4j.rand(1,10);
    INDArray testLabels=Nd4j.zeros(1,10);
    testLabels.putScalar(0,3,1.0);
    DataSet ds=new DataSet(testFeatures,testLabels);
    assertEquals(net2.output(testFeatures)[0],net.output(testFeatures)[0]);
    assertEquals(net2.score(ds),net.score(ds),1e-6);
  }
}
