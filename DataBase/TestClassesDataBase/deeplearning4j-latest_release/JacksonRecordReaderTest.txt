/** 
 * Created by Alex on 11/04/2016.
 */
public class JacksonRecordReaderTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
  @Test public void testReadingJson() throws Exception {
    ClassPathResource cpr=new ClassPathResource("datavec-api/json/");
    File f=testDir.newFolder();
    cpr.copyDirectory(f);
    String path=new File(f,"json_test_%d.txt").getAbsolutePath();
    InputSplit is=new NumberedFileInputSplit(path,0,2);
    RecordReader rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new JsonFactory()));
    rr.initialize(is);
    testJacksonRecordReader(rr);
  }
  @Test public void testReadingYaml() throws Exception {
    ClassPathResource cpr=new ClassPathResource("datavec-api/yaml/");
    File f=testDir.newFolder();
    cpr.copyDirectory(f);
    String path=new File(f,"yaml_test_%d.txt").getAbsolutePath();
    InputSplit is=new NumberedFileInputSplit(path,0,2);
    RecordReader rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new YAMLFactory()));
    rr.initialize(is);
    testJacksonRecordReader(rr);
  }
  @Test public void testReadingXml() throws Exception {
    ClassPathResource cpr=new ClassPathResource("datavec-api/xml/");
    File f=testDir.newFolder();
    cpr.copyDirectory(f);
    String path=new File(f,"xml_test_%d.txt").getAbsolutePath();
    InputSplit is=new NumberedFileInputSplit(path,0,2);
    RecordReader rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new XmlFactory()));
    rr.initialize(is);
    testJacksonRecordReader(rr);
  }
  private static FieldSelection getFieldSelection(){
    return new FieldSelection.Builder().addField("a").addField(new Text("MISSING_B"),"b").addField(new Text("MISSING_CX"),"c","x").build();
  }
  private static void testJacksonRecordReader(  RecordReader rr){
    List<Writable> json0=rr.next();
    List<Writable> exp0=Arrays.asList((Writable)new Text("aValue0"),new Text("bValue0"),new Text("cxValue0"));
    assertEquals(exp0,json0);
    List<Writable> json1=rr.next();
    List<Writable> exp1=Arrays.asList((Writable)new Text("aValue1"),new Text("MISSING_B"),new Text("cxValue1"));
    assertEquals(exp1,json1);
    List<Writable> json2=rr.next();
    List<Writable> exp2=Arrays.asList((Writable)new Text("aValue2"),new Text("bValue2"),new Text("MISSING_CX"));
    assertEquals(exp2,json2);
    assertFalse(rr.hasNext());
    rr.reset();
    assertEquals(exp0,rr.next());
    assertEquals(exp1,rr.next());
    assertEquals(exp2,rr.next());
    assertFalse(rr.hasNext());
  }
  @Test public void testAppendingLabels() throws Exception {
    ClassPathResource cpr=new ClassPathResource("datavec-api/json/");
    File f=testDir.newFolder();
    cpr.copyDirectory(f);
    String path=new File(f,"json_test_%d.txt").getAbsolutePath();
    InputSplit is=new NumberedFileInputSplit(path,0,2);
    RecordReader rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new JsonFactory()),false,-1,new LabelGen());
    rr.initialize(is);
    List<Writable> exp0=Arrays.asList((Writable)new Text("aValue0"),new Text("bValue0"),new Text("cxValue0"),new IntWritable(0));
    assertEquals(exp0,rr.next());
    List<Writable> exp1=Arrays.asList((Writable)new Text("aValue1"),new Text("MISSING_B"),new Text("cxValue1"),new IntWritable(1));
    assertEquals(exp1,rr.next());
    List<Writable> exp2=Arrays.asList((Writable)new Text("aValue2"),new Text("bValue2"),new Text("MISSING_CX"),new IntWritable(2));
    assertEquals(exp2,rr.next());
    rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new JsonFactory()),false,-1,new LabelGen(),0);
    rr.initialize(is);
    exp0=Arrays.asList((Writable)new IntWritable(0),new Text("aValue0"),new Text("bValue0"),new Text("cxValue0"));
    assertEquals(exp0,rr.next());
    exp1=Arrays.asList((Writable)new IntWritable(1),new Text("aValue1"),new Text("MISSING_B"),new Text("cxValue1"));
    assertEquals(exp1,rr.next());
    exp2=Arrays.asList((Writable)new IntWritable(2),new Text("aValue2"),new Text("bValue2"),new Text("MISSING_CX"));
    assertEquals(exp2,rr.next());
  }
  @Test public void testAppendingLabelsMetaData() throws Exception {
    ClassPathResource cpr=new ClassPathResource("datavec-api/json/");
    File f=testDir.newFolder();
    cpr.copyDirectory(f);
    String path=new File(f,"json_test_%d.txt").getAbsolutePath();
    InputSplit is=new NumberedFileInputSplit(path,0,2);
    RecordReader rr=new JacksonRecordReader(getFieldSelection(),new ObjectMapper(new JsonFactory()),false,-1,new LabelGen());
    rr.initialize(is);
    List<List<Writable>> out=new ArrayList<>();
    while (rr.hasNext()) {
      out.add(rr.next());
    }
    assertEquals(3,out.size());
    rr.reset();
    List<List<Writable>> out2=new ArrayList<>();
    List<Record> outRecord=new ArrayList<>();
    List<RecordMetaData> meta=new ArrayList<>();
    while (rr.hasNext()) {
      Record r=rr.nextRecord();
      out2.add(r.getRecord());
      outRecord.add(r);
      meta.add(r.getMetaData());
    }
    assertEquals(out,out2);
    List<Record> fromMeta=rr.loadFromMetaData(meta);
    assertEquals(outRecord,fromMeta);
  }
private static class LabelGen implements PathLabelGenerator {
    @Override public Writable getLabelForPath(    String path){
      if (path.endsWith("0.txt"))       return new IntWritable(0);
 else       if (path.endsWith("1.txt"))       return new IntWritable(1);
 else       return new IntWritable(2);
    }
    @Override public Writable getLabelForPath(    URI uri){
      return getLabelForPath(uri.getPath());
    }
    @Override public boolean inferLabelClasses(){
      return true;
    }
  }
}
