private static class TestInputSplit implements InputSplit {
  @Override public boolean canWriteToLocation(  URI location){
    return false;
  }
  @Override public String addNewLocation(){
    return null;
  }
  @Override public String addNewLocation(  String location){
    return null;
  }
  @Override public void updateSplitLocations(  boolean reset){
  }
  @Override public boolean needsBootstrapForWrite(){
    return false;
  }
  @Override public void bootStrapForWrite(){
  }
  @Override public OutputStream openOutputStreamFor(  String location) throws Exception {
    return null;
  }
  @Override public InputStream openInputStreamFor(  String location) throws Exception {
    return null;
  }
  @Override public long length(){
    return 3;
  }
  @Override public URI[] locations(){
    URI[] arr=new URI[3];
    try {
      arr[0]=new ClassPathResource("datavec-api/csvsequence_0.txt").getFile().toURI();
      arr[1]=new ClassPathResource("datavec-api/csvsequence_1.txt").getFile().toURI();
      arr[2]=new ClassPathResource("datavec-api/csvsequence_2.txt").getFile().toURI();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    return arr;
  }
  @Override public Iterator<URI> locationsIterator(){
    return Arrays.asList(locations()).iterator();
  }
  @Override public Iterator<String> locationsPathIterator(){
    URI[] loc=locations();
    String[] arr=new String[loc.length];
    for (int i=0; i < loc.length; i++) {
      arr[i]=loc[i].toString();
    }
    return Arrays.asList(arr).iterator();
  }
  @Override public void reset(){
  }
  @Override public boolean resetSupported(){
    return true;
  }
}
