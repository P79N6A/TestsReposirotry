/** 
 * These tests should be ignored by default, since they require fairly large amounts of memory to run (>32GB some of them)
 * @author raver119@gmail.com
 */
@Slf4j @Ignore @RunWith(Parameterized.class) public class LongTests extends BaseNd4jTest {
  DataBuffer.Type initialType;
  public LongTests(  Nd4jBackend backend){
    super(backend);
    this.initialType=Nd4j.dataType();
  }
  @Test public void testSomething1(){
    INDArray huge=Nd4j.create(8000000,300);
    huge.subi(0.5).divi(2);
    INDArray row0=huge.getRow(100001).assign(1.0);
    INDArray row1=huge.getRow(100002).assign(2.0);
    assertNotEquals(row0,row1);
    INDArray rowA=huge.getRow(huge.rows() - 3);
    INDArray rowB=huge.getRow(huge.rows() - 10);
    rowA.addi(1.0);
    assertNotEquals(rowA,rowB);
  }
  @Test public void testSomething2(){
    INDArray huge=Nd4j.create(100,10);
    huge.subi(0.5).divi(2);
    INDArray row0=huge.getRow(73).assign(1.0);
    INDArray row1=huge.getRow(74).assign(2.0);
    assertNotEquals(row0,row1);
    INDArray rowA=huge.getRow(huge.rows() - 3);
    INDArray rowB=huge.getRow(huge.rows() - 10);
    rowA.addi(1.0);
    assertNotEquals(rowA,rowB);
  }
  @Test public void testLongTadOffsets1(){
    INDArray huge=Nd4j.create(230000000,10);
    Pair<DataBuffer,DataBuffer> tad=Nd4j.getExecutioner().getTADManager().getTADOnlyShapeInfo(huge,1);
    assertEquals(230000000,tad.getSecond().length());
  }
  @Test public void testLongTadOp1(){
    double exp=Transforms.manhattanDistance(Nd4j.create(1000).assign(1.0),Nd4j.create(1000).assign(2.0));
    INDArray hugeX=Nd4j.create(2200000,1000).assign(1.0);
    INDArray hugeY=Nd4j.create(1,1000).assign(2.0);
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,1000,hugeX.getRow(x).sumNumber().intValue());
    }
    INDArray result=Nd4j.getExecutioner().exec(new ManhattanDistance(hugeX,hugeY,hugeX.lengthLong()),1);
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals(exp,result.getDouble(x),1e-5);
    }
  }
  @Test public void testLongTadOp2(){
    INDArray hugeX=Nd4j.create(2300000,1000).assign(1.0);
    hugeX.addiRowVector(Nd4j.create(1000).assign(2.0));
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,3000,hugeX.getRow(x).sumNumber().intValue());
    }
  }
  @Test public void testLongTadOp2_micro(){
    INDArray hugeX=Nd4j.create(230,1000).assign(1.0);
    hugeX.addiRowVector(Nd4j.create(1000).assign(2.0));
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,3000,hugeX.getRow(x).sumNumber().intValue());
    }
  }
  @Test public void testLongTadOp3(){
    INDArray hugeX=Nd4j.create(2300000,1000).assign(1.0);
    INDArray mean=hugeX.mean(1);
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,1.0,mean.getDouble(x),1e-5);
    }
  }
  @Test public void testLongTadOp4(){
    INDArray hugeX=Nd4j.create(2300000,1000).assign(1.0);
    INDArray mean=hugeX.argMax(1);
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,0.0,mean.getDouble(x),1e-5);
    }
  }
  @Test public void testLongTadOp5(){
    List<INDArray> list=new ArrayList<>();
    for (int i=0; i < 2300000; i++) {
      list.add(Nd4j.create(1000).assign(2.0));
    }
    INDArray hugeX=Nd4j.vstack(list);
    for (int x=0; x < hugeX.rows(); x++) {
      assertEquals("Failed at row " + x,2.0,hugeX.getRow(x).meanNumber().doubleValue(),1e-5);
    }
  }
  @Override public char ordering(){
    return 'c';
  }
}
