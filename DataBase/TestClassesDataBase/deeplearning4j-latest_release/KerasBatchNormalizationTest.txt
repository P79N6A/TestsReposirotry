/** 
 * @author Max Pumperla
 */
public class KerasBatchNormalizationTest {
  public static final String PARAM_NAME_BETA="beta";
  private final String LAYER_NAME="batch_norm_layer";
  private Integer keras1=1;
  private Integer keras2=2;
  private Keras1LayerConfiguration conf1=new Keras1LayerConfiguration();
  private Keras2LayerConfiguration conf2=new Keras2LayerConfiguration();
  @Test public void testBatchnormLayer() throws Exception {
    buildBatchNormalizationLayer(conf1,keras1);
    buildBatchNormalizationLayer(conf2,keras2);
  }
  private void buildBatchNormalizationLayer(  KerasLayerConfiguration conf,  Integer kerasVersion) throws Exception {
    double epsilon=1E-5;
    double momentum=0.99;
    KerasBatchNormalization batchNormalization=new KerasBatchNormalization(kerasVersion);
    Map<String,Object> layerConfig=new HashMap<>();
    layerConfig.put(conf.getLAYER_FIELD_CLASS_NAME(),conf.getLAYER_CLASS_NAME_BATCHNORMALIZATION());
    Map<String,Object> config=new HashMap<>();
    config.put(conf.getLAYER_FIELD_NAME(),LAYER_NAME);
    config.put(batchNormalization.getLAYER_FIELD_EPSILON(),epsilon);
    config.put(batchNormalization.getLAYER_FIELD_MOMENTUM(),momentum);
    config.put(batchNormalization.getLAYER_FIELD_GAMMA_REGULARIZER(),null);
    config.put(batchNormalization.getLAYER_FIELD_BETA_REGULARIZER(),null);
    config.put(batchNormalization.getLAYER_FIELD_MODE(),0);
    config.put(batchNormalization.getLAYER_FIELD_AXIS(),3);
    layerConfig.put(conf.getLAYER_FIELD_CONFIG(),config);
    layerConfig.put(conf.getLAYER_FIELD_KERAS_VERSION(),kerasVersion);
    BatchNormalization layer=new KerasBatchNormalization(layerConfig).getBatchNormalizationLayer();
    assertEquals(LAYER_NAME,layer.getLayerName());
    assertEquals(epsilon,layer.getEps(),0.0);
    assertEquals(momentum,layer.getDecay(),0.0);
  }
  @Test public void testSetWeights() throws Exception {
    Map<String,INDArray> weights=weightsWithoutGamma();
    KerasBatchNormalization batchNormalization=new KerasBatchNormalization(keras2);
    batchNormalization.setScale(false);
    batchNormalization.setWeights(weights);
    int size=batchNormalization.getWeights().size();
    assertEquals(4,size);
  }
  private Map<String,INDArray> weightsWithoutGamma(){
    Map<String,INDArray> weights=new HashMap<>();
    weights.put(conf2.getLAYER_FIELD_BATCHNORMALIZATION_MOVING_VARIANCE(),Nd4j.ones(1));
    weights.put(conf2.getLAYER_FIELD_BATCHNORMALIZATION_MOVING_MEAN(),Nd4j.ones(1));
    weights.put(PARAM_NAME_BETA,Nd4j.ones(1));
    return weights;
  }
}
