/** 
 * Created by susaneraly on 11/29/17.
 */
@Slf4j @RunWith(Parameterized.class) public class TFGraphTestAllSameDiff {
  @Rule public TestWatcher testWatcher=new TestWatcher(){
    @Override protected void starting(    Description description){
      log.info("TFGraphTestAllSameDiff: Starting parameterized test: " + description.getDisplayName());
    }
  }
;
  private Map<String,INDArray> inputs;
  private Map<String,INDArray> predictions;
  private String modelName;
  private File localTestDir;
  private static final TFGraphTestAllHelper.ExecuteWith EXECUTE_WITH=TFGraphTestAllHelper.ExecuteWith.SAMEDIFF;
  private static final String BASE_DIR="tf_graphs/examples";
  private static final String MODEL_FILENAME="frozen_model.pb";
  private static final String[] SKIP_ARR=new String[]{"deep_mnist","deep_mnist_no_dropout","ssd_mobilenet_v1_coco","yolov2_608x608","inception_v3_with_softmax","conv_5"};
  public static final String[] IGNORE_REGEXES=new String[]{"pad/rank1.*","pad/rank2Pone_const10","pad/rank3.*","topk/.*","in_top_k/.*","confusion/.*","identity_n.*","zeta.*","reverse/shape5-.*","log_determinant/.*","slogdet/.*","bincount/.*","batchnorm/.*","sepconv1d_layers/.*","scatter_nd/.*","embedding_lookup/.*","nth_element/.*","broadcast_dynamic_shape/.*","where/cond_only_rank.*","boolean_mask/.*","truncatemod/.*","lrn/dr3.*","lrn/dr5.*","g_07","cnn1d_layers/channels_first_b2_k2_s1_d2_SAME","cnn2d_layers/channels_first_b1_k12_s1_d12_SAME","alpha_dropout/.*","layers_dropout/.*","simplewhile.*","gru_dynamic_mnist","primitive_gru_dynamic","simple_while","g_10","cnn2d_nn/nchw_b1_k12_s12_d12_SAME","cnn2d_nn/nhwc_b1_k12_s12_d12_SAME","conv_4","ae"};
  public static final Set<String> SKIP_SET=new HashSet<>(Arrays.asList(SKIP_ARR));
  @BeforeClass public static void beforeClass() throws Exception {
    Nd4j.setDataType(DataBuffer.Type.FLOAT);
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.SCOPE_PANIC);
  }
  @Before public void setup(){
    Nd4j.setDataType(DataBuffer.Type.FLOAT);
  }
  @After public void tearDown() throws Exception {
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableDebugMode(true);
    NativeOpsHolder.getInstance().getDeviceNativeOps().enableVerboseMode(true);
  }
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> data() throws IOException {
    File baseDir=new File(System.getProperty("java.io.tmpdir"),UUID.randomUUID().toString());
    List<Object[]> params=TFGraphTestAllHelper.fetchTestParams(BASE_DIR,MODEL_FILENAME,EXECUTE_WITH,baseDir);
    return params;
  }
  public TFGraphTestAllSameDiff(  Map<String,INDArray> inputs,  Map<String,INDArray> predictions,  String modelName,  File localTestDir) throws IOException {
    this.inputs=inputs;
    this.predictions=predictions;
    this.modelName=modelName;
    this.localTestDir=localTestDir;
  }
  @Test(timeout=25000L) public void testOutputOnly() throws Exception {
    Nd4j.create(1);
    if (SKIP_SET.contains(modelName)) {
      log.info("\n\tSKIPPED MODEL: " + modelName);
      return;
    }
    for (    String s : IGNORE_REGEXES) {
      if (modelName.matches(s)) {
        log.info("\n\tIGNORE MODEL ON REGEX: {} - regex {}",modelName,s);
        OpValidationSuite.ignoreFailing();
      }
    }
    Pair<Double,Double> precisionOverride=TFGraphTestAllHelper.testPrecisionOverride(modelName);
    Double maxRE=(precisionOverride == null ? null : precisionOverride.getFirst());
    Double minAbs=(precisionOverride == null ? null : precisionOverride.getSecond());
    try {
      TFGraphTestAllHelper.checkOnlyOutput(inputs,predictions,modelName,BASE_DIR,MODEL_FILENAME,EXECUTE_WITH,TFGraphTestAllHelper.LOADER,maxRE,minAbs);
    }
 catch (    Throwable t) {
      log.error("ERROR Executing test: {} - input keys {}",modelName,(inputs == null ? null : inputs.keySet()),t);
      t.printStackTrace();
      throw t;
    }
  }
}
