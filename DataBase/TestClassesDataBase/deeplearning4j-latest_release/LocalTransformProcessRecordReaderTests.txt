public class LocalTransformProcessRecordReaderTests {
  @Test public void simpleTransformTest() throws Exception {
    Schema schema=new Schema.Builder().addColumnDouble("0").addColumnDouble("1").addColumnDouble("2").addColumnDouble("3").addColumnDouble("4").build();
    TransformProcess transformProcess=new TransformProcess.Builder(schema).removeColumns("0").build();
    CSVRecordReader csvRecordReader=new CSVRecordReader();
    csvRecordReader.initialize(new FileSplit(new ClassPathResource("iris.dat").getFile()));
    LocalTransformProcessRecordReader transformProcessRecordReader=new LocalTransformProcessRecordReader(csvRecordReader,transformProcess);
    assertEquals(4,transformProcessRecordReader.next().size());
  }
  @Test public void simpleTransformTestSequence(){
    List<List<Writable>> sequence=new ArrayList<>();
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0),new IntWritable(0)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 100L),new IntWritable(1),new IntWritable(0)));
    sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 200L),new IntWritable(2),new IntWritable(0)));
    Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").addColumnInteger("intcolumn2").build();
    TransformProcess transformProcess=new TransformProcess.Builder(schema).removeColumns("intcolumn2").build();
    InMemorySequenceRecordReader inMemorySequenceRecordReader=new InMemorySequenceRecordReader(Arrays.asList(sequence));
    LocalTransformProcessSequenceRecordReader transformProcessSequenceRecordReader=new LocalTransformProcessSequenceRecordReader(inMemorySequenceRecordReader,transformProcess);
    List<List<Writable>> next=transformProcessSequenceRecordReader.sequenceRecord();
    assertEquals(2,next.get(0).size());
  }
  @Test public void testLocalFilter(){
    List<List<Writable>> in=new ArrayList<>();
    in.add(Arrays.asList(new Text("Keep"),new IntWritable(0)));
    in.add(Arrays.asList(new Text("Remove"),new IntWritable(1)));
    in.add(Arrays.asList(new Text("Keep"),new IntWritable(2)));
    in.add(Arrays.asList(new Text("Remove"),new IntWritable(3)));
    Schema s=new Schema.Builder().addColumnCategorical("cat","Keep","Remove").addColumnInteger("int").build();
    TransformProcess tp=new TransformProcess.Builder(s).filter(new CategoricalColumnCondition("cat",ConditionOp.Equal,"Remove")).build();
    RecordReader rr=new CollectionRecordReader(in);
    LocalTransformProcessRecordReader ltprr=new LocalTransformProcessRecordReader(rr,tp);
    List<List<Writable>> out=new ArrayList<>();
    while (ltprr.hasNext()) {
      out.add(ltprr.next());
    }
    List<List<Writable>> exp=Arrays.asList(in.get(0),in.get(2));
    assertEquals(exp,out);
    ltprr.reset();
    out.clear();
    while (ltprr.hasNext()) {
      out.add(ltprr.next());
    }
    assertEquals(exp,out);
    List<Record> rl=new ArrayList<>();
    rr.reset();
    while (rr.hasNext()) {
      rl.add(rr.nextRecord());
    }
    List<Record> exp2=Arrays.asList(rl.get(0),rl.get(2));
    List<Record> act=new ArrayList<>();
    ltprr.reset();
    while (ltprr.hasNext()) {
      act.add(ltprr.nextRecord());
    }
  }
}
