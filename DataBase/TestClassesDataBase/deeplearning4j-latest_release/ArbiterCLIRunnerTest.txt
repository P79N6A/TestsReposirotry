/** 
 * Created by agibsonccc on 3/12/17.
 */
@Slf4j public class ArbiterCLIRunnerTest {
  @Test public void testCliRunner() throws Exception {
    ArbiterCliRunner cliRunner=new ArbiterCliRunner();
    MultiLayerSpace mls=new MultiLayerSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addLayer(new DenseLayerSpace.Builder().nIn(784).nOut(new IntegerParameterSpace(2,10)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),new IntegerParameterSpace(1,2),true).addLayer(new OutputLayerSpace.Builder().nOut(10).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).numEpochs(3).pretrain(false).backprop(true).build();
    assertEquals(mls,MultiLayerSpace.fromJson(mls.toJson()));
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
    CandidateGenerator candidateGenerator=new RandomSearchGenerator(mls,commands);
    DataProvider dataProvider=new DataSetIteratorFactoryProvider();
    String modelSavePath=new File(System.getProperty("java.io.tmpdir"),"ArbiterDL4JTest/").getAbsolutePath();
    File dir=new File(modelSavePath);
    if (!dir.exists())     dir.mkdirs();
    String configPath=System.getProperty("java.io.tmpdir") + File.separator + UUID.randomUUID().toString()+ ".json";
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dataProvider).modelSaver(new FileModelSaver(modelSavePath)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(30,TimeUnit.SECONDS),new MaxCandidatesCondition(5)).build();
    assertEquals(configuration,OptimizationConfiguration.fromJson(configuration.toJson()));
    FileUtils.writeStringToFile(new File(configPath),configuration.toJson());
    System.out.println(configuration.toJson());
    log.info("Starting test");
    cliRunner.runMain("--dataSetIteratorClass",TestDataFactoryProviderMnist.class.getCanonicalName(),"--neuralNetType",ArbiterCliRunner.MULTI_LAYER_NETWORK,"--optimizationConfigPath",configPath);
  }
}
