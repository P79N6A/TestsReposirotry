/** 
 * @author raver119@gmail.com
 */
public class Word2VecDataSetIteratorTest {
  /** 
 * Basically all we want from this test - being able to finish without exceptions.
 */
  @Test public void testIterator1() throws Exception {
    File inputFile=new ClassPathResource("/big/raw_sentences.txt").getFile();
    SentenceIterator iter=new BasicLineIterator(inputFile.getAbsolutePath());
    TokenizerFactory t=new DefaultTokenizerFactory();
    t.setTokenPreProcessor(new CommonPreprocessor());
    Word2Vec vec=new Word2Vec.Builder().minWordFrequency(10).iterations(1).learningRate(0.025).layerSize(150).seed(42).sampling(0).negativeSample(0).useHierarchicSoftmax(true).windowSize(5).modelUtils(new BasicModelUtils<VocabWord>()).useAdaGrad(false).iterate(iter).workers(8).tokenizerFactory(t).elementsLearningAlgorithm(new CBOW<VocabWord>()).build();
    vec.fit();
    List<String> labels=new ArrayList<>();
    labels.add("positive");
    labels.add("negative");
    Word2VecDataSetIterator iterator=new Word2VecDataSetIterator(vec,getLASI(iter,labels),labels,1);
    INDArray array=iterator.next().getFeatures();
    while (iterator.hasNext()) {
      DataSet ds=iterator.next();
      assertArrayEquals(array.shape(),ds.getFeatures().shape());
    }
  }
  protected LabelAwareSentenceIterator getLASI(  final SentenceIterator iterator,  final List<String> labels){
    iterator.reset();
    return new LabelAwareSentenceIterator(){
      private AtomicInteger cnt=new AtomicInteger(0);
      @Override public String currentLabel(){
        return labels.get(cnt.incrementAndGet() % labels.size());
      }
      @Override public List<String> currentLabels(){
        return Collections.singletonList(currentLabel());
      }
      @Override public String nextSentence(){
        return iterator.nextSentence();
      }
      @Override public boolean hasNext(){
        return iterator.hasNext();
      }
      @Override public void reset(){
        iterator.reset();
      }
      @Override public void finish(){
        iterator.finish();
      }
      @Override public SentencePreProcessor getPreProcessor(){
        return iterator.getPreProcessor();
      }
      @Override public void setPreProcessor(      SentencePreProcessor preProcessor){
        iterator.setPreProcessor(preProcessor);
      }
    }
;
  }
}
