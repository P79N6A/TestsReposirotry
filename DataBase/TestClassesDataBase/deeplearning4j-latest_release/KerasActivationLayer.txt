public class KerasActivationLayer {
  private final String ACTIVATION_KERAS="linear";
  private final String ACTIVATION_DL4J="identity";
  private final String LAYER_NAME="test_layer";
  private Integer keras1=1;
  private Integer keras2=2;
  private Keras1LayerConfiguration conf1=new Keras1LayerConfiguration();
  private Keras2LayerConfiguration conf2=new Keras2LayerConfiguration();
  @Test public void testActivationLayer() throws Exception {
    buildActivationLayer(conf1,keras1);
    buildActivationLayer(conf2,keras2);
  }
  private void buildActivationLayer(  KerasLayerConfiguration conf,  Integer kerasVersion) throws Exception {
    Map<String,Object> layerConfig=new HashMap<>();
    layerConfig.put(conf.getLAYER_FIELD_CLASS_NAME(),conf.getLAYER_FIELD_ACTIVATION());
    Map<String,Object> config=new HashMap<>();
    config.put(conf.getLAYER_FIELD_ACTIVATION(),ACTIVATION_KERAS);
    config.put(conf.getLAYER_FIELD_NAME(),LAYER_NAME);
    layerConfig.put(conf.getLAYER_FIELD_CONFIG(),config);
    layerConfig.put(conf.getLAYER_FIELD_KERAS_VERSION(),kerasVersion);
    ActivationLayer layer=new KerasActivation(layerConfig).getActivationLayer();
    assertEquals(ACTIVATION_DL4J,layer.getActivationFn().toString());
    assertEquals(LAYER_NAME,layer.getLayerName());
  }
}
