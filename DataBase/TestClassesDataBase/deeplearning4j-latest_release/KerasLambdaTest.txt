/** 
 * Test importing Keras models with multiple Lamdba layers.
 * @author Max Pumperla
 */
public class KerasLambdaTest {
  @Rule public TemporaryFolder testDir=new TemporaryFolder();
public class ExponentialLambda extends SameDiffLambdaLayer {
    @Override public SDVariable defineLayer(    SameDiff sd,    SDVariable x){
      return x.mul(x);
    }
    @Override public InputType getOutputType(    int layerIndex,    InputType inputType){
      return inputType;
    }
  }
public class TimesThreeLambda extends SameDiffLambdaLayer {
    @Override public SDVariable defineLayer(    SameDiff sd,    SDVariable x){
      return x.mul(3);
    }
    @Override public InputType getOutputType(    int layerIndex,    InputType inputType){
      return inputType;
    }
  }
  @Test public void testSequentialLambdaLayerImport() throws Exception {
    KerasLayer.registerLambdaLayer("lambda_1",new ExponentialLambda());
    KerasLayer.registerLambdaLayer("lambda_2",new TimesThreeLambda());
    String modelPath="modelimport/keras/examples/lambda/sequential_lambda.h5";
    ClassPathResource modelResource=new ClassPathResource(modelPath,KerasModelEndToEndTest.class.getClassLoader());
    File modelFile=testDir.newFile("tempModel" + System.currentTimeMillis() + ".h5");
    Files.copy(modelResource.getInputStream(),modelFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    MultiLayerNetwork model=new KerasSequentialModel().modelBuilder().modelHdf5Filename(modelFile.getAbsolutePath()).enforceTrainingConfig(false).buildSequential().getMultiLayerNetwork();
    System.out.println(model.summary());
    INDArray input=Nd4j.create(new int[]{10,100});
    model.output(input);
    KerasLayer.clearLambdaLayers();
  }
  @Test public void testModelLambdaLayerImport() throws Exception {
    KerasLayer.registerLambdaLayer("lambda_3",new ExponentialLambda());
    KerasLayer.registerLambdaLayer("lambda_4",new TimesThreeLambda());
    String modelPath="modelimport/keras/examples/lambda/model_lambda.h5";
    ClassPathResource modelResource=new ClassPathResource(modelPath,KerasModelEndToEndTest.class.getClassLoader());
    File modelFile=testDir.newFile("tempModel" + System.currentTimeMillis() + ".h5");
    Files.copy(modelResource.getInputStream(),modelFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    ComputationGraph model=new KerasModel().modelBuilder().modelHdf5Filename(modelFile.getAbsolutePath()).enforceTrainingConfig(false).buildModel().getComputationGraph();
    System.out.println(model.summary());
    INDArray input=Nd4j.create(new int[]{10,784});
    model.output(input);
    KerasLayer.clearLambdaLayers();
  }
}
