/** 
 * Created by Alex on 02/02/2017.
 */
public class TestJson {
  protected static ObjectMapper getObjectMapper(  JsonFactory factory){
    ObjectMapper om=new ObjectMapper(factory);
    om.registerModule(new JodaModule());
    om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
    om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);
    om.enable(SerializationFeature.INDENT_OUTPUT);
    om.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.NONE);
    om.setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY);
    return om;
  }
  private static ObjectMapper jsonMapper=getObjectMapper(new JsonFactory());
  private static ObjectMapper yamlMapper=getObjectMapper(new YAMLFactory());
  @Test public void testParameterSpaceJson() throws Exception {
    List<ParameterSpace<?>> l=new ArrayList<>();
    l.add(new FixedValue<>(1.0));
    l.add(new FixedValue<>(1));
    l.add(new FixedValue<>("string"));
    l.add(new ContinuousParameterSpace(-1,1));
    l.add(new ContinuousParameterSpace(new LogNormalDistribution(1,1)));
    l.add(new ContinuousParameterSpace(new NormalDistribution(2,0.01)));
    l.add(new DiscreteParameterSpace<>(1,5,7));
    l.add(new DiscreteParameterSpace<>("first","second","third"));
    l.add(new IntegerParameterSpace(0,10));
    l.add(new IntegerParameterSpace(new UniformIntegerDistribution(0,50)));
    l.add(new BooleanSpace());
    for (    ParameterSpace<?> ps : l) {
      String strJson=jsonMapper.writeValueAsString(ps);
      String strYaml=yamlMapper.writeValueAsString(ps);
      ParameterSpace<?> fromJson=jsonMapper.readValue(strJson,ParameterSpace.class);
      ParameterSpace<?> fromYaml=yamlMapper.readValue(strYaml,ParameterSpace.class);
      assertEquals(ps,fromJson);
      assertEquals(ps,fromYaml);
    }
  }
  @Test public void testCandidateGeneratorJson() throws Exception {
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,new HashMap<>());
    List<CandidateGenerator> l=new ArrayList<>();
    l.add(new GridSearchCandidateGenerator(new DiscreteParameterSpace<>(0,1,2,3,4,5),10,GridSearchCandidateGenerator.Mode.Sequential,commands));
    l.add(new GridSearchCandidateGenerator(new DiscreteParameterSpace<>(0,1,2,3,4,5),10,GridSearchCandidateGenerator.Mode.RandomOrder,commands));
    l.add(new RandomSearchGenerator(new DiscreteParameterSpace<>(0,1,2,3,4,5),commands));
    for (    CandidateGenerator cg : l) {
      String strJson=jsonMapper.writeValueAsString(cg);
      String strYaml=yamlMapper.writeValueAsString(cg);
      CandidateGenerator fromJson=jsonMapper.readValue(strJson,CandidateGenerator.class);
      CandidateGenerator fromYaml=yamlMapper.readValue(strYaml,CandidateGenerator.class);
      assertEquals(cg,fromJson);
      assertEquals(cg,fromYaml);
    }
  }
}
