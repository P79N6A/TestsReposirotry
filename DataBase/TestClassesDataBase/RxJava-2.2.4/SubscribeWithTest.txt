public class SubscribeWithTest {
  @Test public void withFlowable(){
    Flowable.range(1,10).subscribeWith(new TestSubscriber<Integer>()).assertResult(1,2,3,4,5,6,7,8,9,10);
  }
  @Test public void withObservable(){
    Observable.range(1,10).subscribeWith(new TestObserver<Integer>()).assertResult(1,2,3,4,5,6,7,8,9,10);
  }
class ObserverImpl implements SingleObserver<Object>, CompletableObserver {
    Object value;
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onComplete(){
      this.value=100;
    }
    @Override public void onSuccess(    Object value){
      this.value=value;
    }
    @Override public void onError(    Throwable e){
      this.value=e;
    }
  }
  @Test public void withSingle(){
    assertEquals(1,Single.just(1).subscribeWith(new ObserverImpl()).value);
  }
  @Test public void withCompletable(){
    assertEquals(100,Completable.complete().subscribeWith(new ObserverImpl()).value);
  }
}
