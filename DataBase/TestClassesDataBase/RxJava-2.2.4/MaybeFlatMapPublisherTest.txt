public class MaybeFlatMapPublisherTest {
  @Test public void cancelMain(){
    MaybeSubject<Integer> ms=MaybeSubject.create();
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestSubscriber<Integer> ts=ms.flatMapPublisher(Functions.justFunction(pp)).test();
    assertTrue(ms.hasObservers());
    assertFalse(pp.hasSubscribers());
    ts.cancel();
    assertFalse(ms.hasObservers());
    assertFalse(pp.hasSubscribers());
  }
  @Test public void cancelOther(){
    MaybeSubject<Integer> ms=MaybeSubject.create();
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestSubscriber<Integer> ts=ms.flatMapPublisher(Functions.justFunction(pp)).test();
    assertTrue(ms.hasObservers());
    assertFalse(pp.hasSubscribers());
    ms.onSuccess(1);
    assertFalse(ms.hasObservers());
    assertTrue(pp.hasSubscribers());
    ts.cancel();
    assertFalse(ms.hasObservers());
    assertFalse(pp.hasSubscribers());
  }
  @Test public void mapperCrash(){
    Maybe.just(1).flatMapPublisher(new Function<Integer,Publisher<? extends Object>>(){
      @Override public Publisher<? extends Object> apply(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybeToFlowable(new Function<Maybe<Object>,Publisher<Object>>(){
      @Override public Publisher<Object> apply(      Maybe<Object> m) throws Exception {
        return m.flatMapPublisher(Functions.justFunction(Flowable.never()));
      }
    }
);
  }
}
