public class ObservableMergeWithCompletableTest {
  @Test public void normal(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).mergeWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        to.onNext(100);
      }
    }
)).subscribe(to);
    to.assertResult(1,2,3,4,5,100);
  }
  @Test public void take(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).mergeWith(Completable.complete()).take(3).subscribe(to);
    to.assertResult(1,2,3);
  }
  @Test public void cancel(){
    final PublishSubject<Integer> ps=PublishSubject.create();
    final CompletableSubject cs=CompletableSubject.create();
    TestObserver<Integer> to=ps.mergeWith(cs).test();
    assertTrue(ps.hasObservers());
    assertTrue(cs.hasObservers());
    to.cancel();
    assertFalse(ps.hasObservers());
    assertFalse(cs.hasObservers());
  }
  @Test public void mainError(){
    Observable.error(new TestException()).mergeWith(Completable.complete()).test().assertFailure(TestException.class);
  }
  @Test public void otherError(){
    Observable.never().mergeWith(Completable.error(new TestException())).test().assertFailure(TestException.class);
  }
  @Test public void completeRace(){
    for (int i=0; i < 1000; i++) {
      final PublishSubject<Integer> ps=PublishSubject.create();
      final CompletableSubject cs=CompletableSubject.create();
      TestObserver<Integer> to=ps.mergeWith(cs).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          ps.onNext(1);
          ps.onComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          cs.onComplete();
        }
      }
;
      TestHelper.race(r1,r2);
      to.assertResult(1);
    }
  }
  @Test public void isDisposed(){
    new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        assertFalse(((Disposable)observer).isDisposed());
        observer.onNext(1);
        assertTrue(((Disposable)observer).isDisposed());
      }
    }
.mergeWith(Completable.complete()).take(1).test().assertResult(1);
  }
}
