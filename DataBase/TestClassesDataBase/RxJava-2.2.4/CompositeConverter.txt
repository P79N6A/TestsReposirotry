static class CompositeConverter implements ObservableConverter<Integer,Flowable<Integer>>, ParallelFlowableConverter<Integer,Flowable<Integer>>, FlowableConverter<Integer,Observable<Integer>>, MaybeConverter<Integer,Flowable<Integer>>, SingleConverter<Integer,Flowable<Integer>>, CompletableConverter<Flowable<Integer>> {
  @Override public Flowable<Integer> apply(  ParallelFlowable<Integer> upstream){
    return upstream.sequential();
  }
  @Override public Flowable<Integer> apply(  Completable upstream){
    return upstream.toFlowable();
  }
  @Override public Observable<Integer> apply(  Flowable<Integer> upstream){
    return upstream.toObservable();
  }
  @Override public Flowable<Integer> apply(  Maybe<Integer> upstream){
    return upstream.toFlowable();
  }
  @Override public Flowable<Integer> apply(  Observable<Integer> upstream){
    return upstream.toFlowable(BackpressureStrategy.MISSING);
  }
  @Override public Flowable<Integer> apply(  Single<Integer> upstream){
    return upstream.toFlowable();
  }
}
