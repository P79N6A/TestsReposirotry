public class ObservableTakeLastTest {
  @Test public void testTakeLastEmpty(){
    Observable<String> w=Observable.empty();
    Observable<String> take=w.takeLast(2);
    Observer<String> observer=TestHelper.mockObserver();
    take.subscribe(observer);
    verify(observer,never()).onNext(any(String.class));
    verify(observer,never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test public void testTakeLast1(){
    Observable<String> w=Observable.just("one","two","three");
    Observable<String> take=w.takeLast(2);
    Observer<String> observer=TestHelper.mockObserver();
    InOrder inOrder=inOrder(observer);
    take.subscribe(observer);
    inOrder.verify(observer,times(1)).onNext("two");
    inOrder.verify(observer,times(1)).onNext("three");
    verify(observer,never()).onNext("one");
    verify(observer,never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test public void testTakeLast2(){
    Observable<String> w=Observable.just("one");
    Observable<String> take=w.takeLast(10);
    Observer<String> observer=TestHelper.mockObserver();
    take.subscribe(observer);
    verify(observer,times(1)).onNext("one");
    verify(observer,never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test public void testTakeLastWithZeroCount(){
    Observable<String> w=Observable.just("one");
    Observable<String> take=w.takeLast(0);
    Observer<String> observer=TestHelper.mockObserver();
    take.subscribe(observer);
    verify(observer,never()).onNext("one");
    verify(observer,never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test @Ignore("Null values no longer allowed") public void testTakeLastWithNull(){
    Observable<String> w=Observable.just("one",null,"three");
    Observable<String> take=w.takeLast(2);
    Observer<String> observer=TestHelper.mockObserver();
    take.subscribe(observer);
    verify(observer,never()).onNext("one");
    verify(observer,times(1)).onNext(null);
    verify(observer,times(1)).onNext("three");
    verify(observer,never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testTakeLastWithNegativeCount(){
    Observable.just("one").takeLast(-1);
  }
  @Test public void testBackpressure1(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,100000).takeLast(1).observeOn(Schedulers.newThread()).map(newSlowProcessor()).subscribe(to);
    to.awaitTerminalEvent();
    to.assertNoErrors();
    to.assertValue(100000);
  }
  @Test public void testBackpressure2(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,100000).takeLast(Flowable.bufferSize() * 4).observeOn(Schedulers.newThread()).map(newSlowProcessor()).subscribe(to);
    to.awaitTerminalEvent();
    to.assertNoErrors();
    assertEquals(Flowable.bufferSize() * 4,to.valueCount());
  }
  private Function<Integer,Integer> newSlowProcessor(){
    return new Function<Integer,Integer>(){
      int c;
      @Override public Integer apply(      Integer i){
        if (c++ < 100) {
          try {
            Thread.sleep(1);
          }
 catch (          InterruptedException e) {
          }
        }
        return i;
      }
    }
;
  }
  @Test public void testIssue1522(){
    assertNull(Observable.empty().count().filter(new Predicate<Long>(){
      @Override public boolean test(      Long v){
        return false;
      }
    }
).blockingGet());
  }
  @Test public void testUnsubscribeTakesEffectEarlyOnFastPath(){
    final AtomicInteger count=new AtomicInteger();
    Observable.range(0,100000).takeLast(100000).subscribe(new DefaultObserver<Integer>(){
      @Override public void onStart(){
      }
      @Override public void onComplete(){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onNext(      Integer integer){
        count.incrementAndGet();
        cancel();
      }
    }
);
    assertEquals(1,count.get());
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.range(1,10).takeLast(5));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
      @Override public ObservableSource<Object> apply(      Observable<Object> o) throws Exception {
        return o.takeLast(5);
      }
    }
);
  }
  @Test public void error(){
    Observable.error(new TestException()).takeLast(5).test().assertFailure(TestException.class);
  }
  @Test public void takeLastTake(){
    Observable.range(1,10).takeLast(5).take(2).test().assertResult(6,7);
  }
}
