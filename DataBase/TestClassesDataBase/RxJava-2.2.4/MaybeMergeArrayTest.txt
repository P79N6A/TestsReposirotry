public class MaybeMergeArrayTest {
  @SuppressWarnings("unchecked") @Test public void normal(){
    TestSubscriber<Integer> ts=SubscriberFusion.newTest(QueueFuseable.SYNC);
    Maybe.mergeArray(Maybe.just(1),Maybe.just(2)).subscribe(ts);
    ts.assertOf(SubscriberFusion.<Integer>assertFuseable()).assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.NONE)).assertResult(1,2);
  }
  @SuppressWarnings("unchecked") @Test public void fusedPollMixed(){
    TestSubscriber<Integer> ts=SubscriberFusion.newTest(QueueFuseable.ANY);
    Maybe.mergeArray(Maybe.just(1),Maybe.<Integer>empty(),Maybe.just(2)).subscribe(ts);
    ts.assertOf(SubscriberFusion.<Integer>assertFuseable()).assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.ASYNC)).assertResult(1,2);
  }
  @SuppressWarnings("unchecked") @Test public void fusedEmptyCheck(){
    Maybe.mergeArray(Maybe.just(1),Maybe.<Integer>empty(),Maybe.just(2)).subscribe(new FlowableSubscriber<Integer>(){
      QueueSubscription<Integer> qs;
      @Override public void onSubscribe(      Subscription s){
        qs=(QueueSubscription<Integer>)s;
        assertEquals(QueueFuseable.ASYNC,qs.requestFusion(QueueFuseable.ANY));
      }
      @Override public void onNext(      Integer value){
        assertFalse(qs.isEmpty());
        qs.clear();
        assertTrue(qs.isEmpty());
        qs.cancel();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  @SuppressWarnings("unchecked") @Test public void cancel(){
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
    Maybe.mergeArray(Maybe.just(1),Maybe.<Integer>empty(),Maybe.just(2)).subscribe(ts);
    ts.cancel();
    ts.request(10);
    ts.assertEmpty();
  }
  @SuppressWarnings("unchecked") @Test public void firstErrors(){
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
    Maybe.mergeArray(Maybe.<Integer>error(new TestException()),Maybe.<Integer>empty(),Maybe.just(2)).subscribe(ts);
    ts.assertFailure(TestException.class);
  }
  @SuppressWarnings("unchecked") @Test public void errorFused(){
    TestSubscriber<Integer> ts=SubscriberFusion.newTest(QueueFuseable.ANY);
    Maybe.mergeArray(Maybe.<Integer>error(new TestException()),Maybe.just(2)).subscribe(ts);
    ts.assertOf(SubscriberFusion.<Integer>assertFuseable()).assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.ASYNC)).assertFailure(TestException.class);
  }
  @SuppressWarnings("unchecked") @Test public void errorRace(){
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      List<Throwable> errors=TestHelper.trackPluginErrors();
      try {
        final PublishSubject<Integer> ps1=PublishSubject.create();
        final PublishSubject<Integer> ps2=PublishSubject.create();
        TestSubscriber<Integer> ts=Maybe.mergeArray(ps1.singleElement(),ps2.singleElement()).test();
        final TestException ex=new TestException();
        Runnable r1=new Runnable(){
          @Override public void run(){
            ps1.onError(ex);
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            ps2.onError(ex);
          }
        }
;
        TestHelper.race(r1,r2);
        ts.assertFailure(Throwable.class);
        if (!errors.isEmpty()) {
          TestHelper.assertUndeliverable(errors,0,TestException.class);
        }
      }
  finally {
        RxJavaPlugins.reset();
      }
    }
  }
  @SuppressWarnings("unchecked") @Test public void mergeBadSource(){
    Maybe.mergeArray(new Maybe<Integer>(){
      @Override protected void subscribeActual(      MaybeObserver<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        observer.onSuccess(1);
        observer.onSuccess(2);
        observer.onSuccess(3);
      }
    }
,Maybe.never()).test().assertResult(1,2);
  }
  @SuppressWarnings("unchecked") @Test public void smallOffer2Throws(){
    Maybe.mergeArray(Maybe.never(),Maybe.never()).subscribe(new FlowableSubscriber<Object>(){
      @SuppressWarnings("rawtypes") @Override public void onSubscribe(      Subscription s){
        MergeMaybeObserver o=(MergeMaybeObserver)s;
        try {
          o.queue.offer(1,2);
          fail("Should have thrown");
        }
 catch (        UnsupportedOperationException ex) {
        }
      }
      @Override public void onNext(      Object t){
      }
      @Override public void onError(      Throwable t){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  @SuppressWarnings("unchecked") @Test public void largeOffer2Throws(){
    Maybe<Integer>[] a=new Maybe[1024];
    Arrays.fill(a,Maybe.never());
    Maybe.mergeArray(a).subscribe(new FlowableSubscriber<Object>(){
      @SuppressWarnings("rawtypes") @Override public void onSubscribe(      Subscription s){
        MergeMaybeObserver o=(MergeMaybeObserver)s;
        try {
          o.queue.offer(1,2);
          fail("Should have thrown");
        }
 catch (        UnsupportedOperationException ex) {
        }
        o.queue.drop();
      }
      @Override public void onNext(      Object t){
      }
      @Override public void onError(      Throwable t){
      }
      @Override public void onComplete(){
      }
    }
);
  }
}
