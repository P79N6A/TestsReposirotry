static final class BadObservableDoubleOnX extends ConnectableObservable<Object> implements Disposable {
  @Override public void connect(  Consumer<? super Disposable> connection){
    try {
      connection.accept(Disposables.empty());
    }
 catch (    Throwable ex) {
      throw ExceptionHelper.wrapOrThrow(ex);
    }
  }
  @Override protected void subscribeActual(  Observer<? super Object> observer){
    observer.onSubscribe(Disposables.empty());
    observer.onSubscribe(Disposables.empty());
    observer.onComplete();
    observer.onComplete();
    observer.onError(new TestException());
  }
  @Override public void dispose(){
  }
  @Override public boolean isDisposed(){
    return false;
  }
}
