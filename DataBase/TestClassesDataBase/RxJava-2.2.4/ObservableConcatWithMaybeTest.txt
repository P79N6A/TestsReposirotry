public class ObservableConcatWithMaybeTest {
  @Test public void normalEmpty(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        to.onNext(100);
      }
    }
)).subscribe(to);
    to.assertResult(1,2,3,4,5,100);
  }
  @Test public void normalNonEmpty(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).concatWith(Maybe.just(100)).subscribe(to);
    to.assertResult(1,2,3,4,5,100);
  }
  @Test public void mainError(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.<Integer>error(new TestException()).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        to.onNext(100);
      }
    }
)).subscribe(to);
    to.assertFailure(TestException.class);
  }
  @Test public void otherError(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).concatWith(Maybe.<Integer>error(new TestException())).subscribe(to);
    to.assertFailure(TestException.class,1,2,3,4,5);
  }
  @Test public void takeMain(){
    final TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,5).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        to.onNext(100);
      }
    }
)).take(3).subscribe(to);
    to.assertResult(1,2,3);
  }
  @Test public void cancelOther(){
    MaybeSubject<Object> other=MaybeSubject.create();
    TestObserver<Object> to=Observable.empty().concatWith(other).test();
    assertTrue(other.hasObservers());
    to.cancel();
    assertFalse(other.hasObservers());
  }
  @Test public void consumerDisposed(){
    new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        Disposable bs1=Disposables.empty();
        observer.onSubscribe(bs1);
        assertFalse(((Disposable)observer).isDisposed());
        observer.onNext(1);
        assertTrue(((Disposable)observer).isDisposed());
        assertTrue(bs1.isDisposed());
      }
    }
.concatWith(Maybe.just(100)).take(1).test().assertResult(1);
  }
  @Test public void badSource(){
    new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        Disposable bs1=Disposables.empty();
        observer.onSubscribe(bs1);
        Disposable bs2=Disposables.empty();
        observer.onSubscribe(bs2);
        assertFalse(bs1.isDisposed());
        assertTrue(bs2.isDisposed());
        observer.onComplete();
      }
    }
.concatWith(Maybe.<Integer>empty()).test().assertResult();
  }
  @Test public void badSource2(){
    Flowable.empty().concatWith(new Maybe<Integer>(){
      @Override protected void subscribeActual(      MaybeObserver<? super Integer> observer){
        Disposable bs1=Disposables.empty();
        observer.onSubscribe(bs1);
        Disposable bs2=Disposables.empty();
        observer.onSubscribe(bs2);
        assertFalse(bs1.isDisposed());
        assertTrue(bs2.isDisposed());
        observer.onComplete();
      }
    }
).test().assertResult();
  }
}
