public class SingleCacheTest {
  @Test public void normal(){
    Single<Integer> cache=Single.just(1).cache();
    cache.test().assertResult(1);
    cache.test().assertResult(1);
  }
  @Test public void error(){
    Single<Object> cache=Single.error(new TestException()).cache();
    cache.test().assertFailure(TestException.class);
    cache.test().assertFailure(TestException.class);
  }
  @Test public void delayed(){
    PublishSubject<Integer> ps=PublishSubject.create();
    Single<Integer> cache=ps.single(-99).cache();
    TestObserver<Integer> to1=cache.test();
    TestObserver<Integer> to2=cache.test();
    ps.onNext(1);
    ps.onComplete();
    to1.assertResult(1);
    to2.assertResult(1);
  }
  @Test public void delayedDisposed(){
    PublishSubject<Integer> ps=PublishSubject.create();
    Single<Integer> cache=ps.single(-99).cache();
    TestObserver<Integer> to1=cache.test();
    TestObserver<Integer> to2=cache.test();
    to1.cancel();
    ps.onNext(1);
    ps.onComplete();
    to1.assertNoValues().assertNoErrors().assertNotComplete();
    to2.assertResult(1);
  }
  @Test public void crossCancel(){
    PublishSubject<Integer> ps=PublishSubject.create();
    Single<Integer> cache=ps.single(-99).cache();
    final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>();
    TestSubscriber<Integer> ts2=new TestSubscriber<Integer>(){
      @Override public void onNext(      Integer t){
        super.onNext(t);
        ts1.cancel();
      }
    }
;
    cache.toFlowable().subscribe(ts2);
    cache.toFlowable().subscribe(ts1);
    ps.onNext(1);
    ps.onComplete();
    ts1.assertNoValues().assertNoErrors().assertNotComplete();
    ts2.assertResult(1);
  }
  @Test public void crossCancelOnError(){
    PublishSubject<Integer> ps=PublishSubject.create();
    Single<Integer> cache=ps.single(-99).cache();
    final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>();
    TestSubscriber<Integer> ts2=new TestSubscriber<Integer>(){
      @Override public void onError(      Throwable t){
        super.onError(t);
        ts1.cancel();
      }
    }
;
    cache.toFlowable().subscribe(ts2);
    cache.toFlowable().subscribe(ts1);
    ps.onError(new TestException());
    ts1.assertNoValues().assertNoErrors().assertNotComplete();
    ts2.assertFailure(TestException.class);
  }
}
