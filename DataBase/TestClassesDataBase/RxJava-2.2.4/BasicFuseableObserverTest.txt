public class BasicFuseableObserverTest {
  @Test(expected=UnsupportedOperationException.class) public void offer(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    BasicFuseableObserver<Integer,Integer> o=new BasicFuseableObserver<Integer,Integer>(to){
      @Nullable @Override public Integer poll() throws Exception {
        return null;
      }
      @Override public int requestFusion(      int mode){
        return 0;
      }
      @Override public void onNext(      Integer value){
      }
      @Override protected boolean beforeDownstream(){
        return false;
      }
    }
;
    o.onSubscribe(Disposables.disposed());
    to.assertNotSubscribed();
    o.offer(1);
  }
  @Test(expected=UnsupportedOperationException.class) public void offer2(){
    BasicFuseableObserver<Integer,Integer> o=new BasicFuseableObserver<Integer,Integer>(new TestObserver<Integer>()){
      @Nullable @Override public Integer poll() throws Exception {
        return null;
      }
      @Override public int requestFusion(      int mode){
        return 0;
      }
      @Override public void onNext(      Integer value){
      }
    }
;
    o.offer(1,2);
  }
}
