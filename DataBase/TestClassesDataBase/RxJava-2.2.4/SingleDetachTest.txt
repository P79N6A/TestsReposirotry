public class SingleDetachTest {
  @Test public void doubleSubscribe(){
    TestHelper.checkDoubleOnSubscribeSingle(new Function<Single<Object>,SingleSource<Object>>(){
      @Override public SingleSource<Object> apply(      Single<Object> m) throws Exception {
        return m.onTerminateDetach();
      }
    }
);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(PublishProcessor.create().singleOrError().onTerminateDetach());
  }
  @Test public void onError(){
    Single.error(new TestException()).onTerminateDetach().test().assertFailure(TestException.class);
  }
  @Test public void onSuccess(){
    Single.just(1).onTerminateDetach().test().assertResult(1);
  }
  @Test public void cancelDetaches() throws Exception {
    Disposable d=Disposables.empty();
    final WeakReference<Disposable> wr=new WeakReference<Disposable>(d);
    TestObserver<Object> to=new Single<Object>(){
      @Override protected void subscribeActual(      SingleObserver<? super Object> observer){
        observer.onSubscribe(wr.get());
      }
    }
.onTerminateDetach().test();
    d=null;
    to.cancel();
    System.gc();
    Thread.sleep(200);
    to.assertEmpty();
    assertNull(wr.get());
  }
  @Test public void errorDetaches() throws Exception {
    Disposable d=Disposables.empty();
    final WeakReference<Disposable> wr=new WeakReference<Disposable>(d);
    TestObserver<Integer> to=new Single<Integer>(){
      @Override protected void subscribeActual(      SingleObserver<? super Integer> observer){
        observer.onSubscribe(wr.get());
        observer.onError(new TestException());
        observer.onError(new IOException());
      }
    }
.onTerminateDetach().test();
    d=null;
    System.gc();
    Thread.sleep(200);
    to.assertFailure(TestException.class);
    assertNull(wr.get());
  }
  @Test public void successDetaches() throws Exception {
    Disposable d=Disposables.empty();
    final WeakReference<Disposable> wr=new WeakReference<Disposable>(d);
    TestObserver<Integer> to=new Single<Integer>(){
      @Override protected void subscribeActual(      SingleObserver<? super Integer> observer){
        observer.onSubscribe(wr.get());
        observer.onSuccess(1);
        observer.onSuccess(2);
      }
    }
.onTerminateDetach().test();
    d=null;
    System.gc();
    Thread.sleep(200);
    to.assertResult(1);
    assertNull(wr.get());
  }
}
