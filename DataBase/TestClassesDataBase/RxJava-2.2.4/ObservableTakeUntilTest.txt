public class ObservableTakeUntilTest {
  @Test public void testTakeUntil(){
    Disposable sSource=mock(Disposable.class);
    Disposable sOther=mock(Disposable.class);
    TestObservable source=new TestObservable(sSource);
    TestObservable other=new TestObservable(sOther);
    Observer<String> result=TestHelper.mockObserver();
    Observable<String> stringObservable=Observable.unsafeCreate(source).takeUntil(Observable.unsafeCreate(other));
    stringObservable.subscribe(result);
    source.sendOnNext("one");
    source.sendOnNext("two");
    other.sendOnNext("three");
    source.sendOnNext("four");
    source.sendOnCompleted();
    other.sendOnCompleted();
    verify(result,times(1)).onNext("one");
    verify(result,times(1)).onNext("two");
    verify(result,times(0)).onNext("three");
    verify(result,times(0)).onNext("four");
    verify(sSource,times(1)).dispose();
    verify(sOther,times(1)).dispose();
  }
  @Test public void testTakeUntilSourceCompleted(){
    Disposable sSource=mock(Disposable.class);
    Disposable sOther=mock(Disposable.class);
    TestObservable source=new TestObservable(sSource);
    TestObservable other=new TestObservable(sOther);
    Observer<String> result=TestHelper.mockObserver();
    Observable<String> stringObservable=Observable.unsafeCreate(source).takeUntil(Observable.unsafeCreate(other));
    stringObservable.subscribe(result);
    source.sendOnNext("one");
    source.sendOnNext("two");
    source.sendOnCompleted();
    verify(result,times(1)).onNext("one");
    verify(result,times(1)).onNext("two");
    verify(sSource,never()).dispose();
    verify(sOther,times(1)).dispose();
  }
  @Test public void testTakeUntilSourceError(){
    Disposable sSource=mock(Disposable.class);
    Disposable sOther=mock(Disposable.class);
    TestObservable source=new TestObservable(sSource);
    TestObservable other=new TestObservable(sOther);
    Throwable error=new Throwable();
    Observer<String> result=TestHelper.mockObserver();
    Observable<String> stringObservable=Observable.unsafeCreate(source).takeUntil(Observable.unsafeCreate(other));
    stringObservable.subscribe(result);
    source.sendOnNext("one");
    source.sendOnNext("two");
    source.sendOnError(error);
    source.sendOnNext("three");
    verify(result,times(1)).onNext("one");
    verify(result,times(1)).onNext("two");
    verify(result,times(0)).onNext("three");
    verify(result,times(1)).onError(error);
    verify(sSource,never()).dispose();
    verify(sOther,times(1)).dispose();
  }
  @Test public void testTakeUntilOtherError(){
    Disposable sSource=mock(Disposable.class);
    Disposable sOther=mock(Disposable.class);
    TestObservable source=new TestObservable(sSource);
    TestObservable other=new TestObservable(sOther);
    Throwable error=new Throwable();
    Observer<String> result=TestHelper.mockObserver();
    Observable<String> stringObservable=Observable.unsafeCreate(source).takeUntil(Observable.unsafeCreate(other));
    stringObservable.subscribe(result);
    source.sendOnNext("one");
    source.sendOnNext("two");
    other.sendOnError(error);
    source.sendOnNext("three");
    verify(result,times(1)).onNext("one");
    verify(result,times(1)).onNext("two");
    verify(result,times(0)).onNext("three");
    verify(result,times(1)).onError(error);
    verify(result,times(0)).onComplete();
    verify(sSource,times(1)).dispose();
    verify(sOther,never()).dispose();
  }
  /** 
 * If the 'other' onCompletes then we unsubscribe from the source and onComplete.
 */
  @Test public void testTakeUntilOtherCompleted(){
    Disposable sSource=mock(Disposable.class);
    Disposable sOther=mock(Disposable.class);
    TestObservable source=new TestObservable(sSource);
    TestObservable other=new TestObservable(sOther);
    Observer<String> result=TestHelper.mockObserver();
    Observable<String> stringObservable=Observable.unsafeCreate(source).takeUntil(Observable.unsafeCreate(other));
    stringObservable.subscribe(result);
    source.sendOnNext("one");
    source.sendOnNext("two");
    other.sendOnCompleted();
    source.sendOnNext("three");
    verify(result,times(1)).onNext("one");
    verify(result,times(1)).onNext("two");
    verify(result,times(0)).onNext("three");
    verify(result,times(1)).onComplete();
    verify(sSource,times(1)).dispose();
    verify(sOther,never()).dispose();
  }
private static class TestObservable implements ObservableSource<String> {
    Observer<? super String> observer;
    Disposable upstream;
    TestObservable(    Disposable d){
      this.upstream=d;
    }
    public void sendOnCompleted(){
      observer.onComplete();
    }
    public void sendOnNext(    String value){
      observer.onNext(value);
    }
    public void sendOnError(    Throwable e){
      observer.onError(e);
    }
    @Override public void subscribe(    Observer<? super String> observer){
      this.observer=observer;
      observer.onSubscribe(upstream);
    }
  }
  @Test public void testUntilFires(){
    PublishSubject<Integer> source=PublishSubject.create();
    PublishSubject<Integer> until=PublishSubject.create();
    TestObserver<Integer> to=new TestObserver<Integer>();
    source.takeUntil(until).subscribe(to);
    assertTrue(source.hasObservers());
    assertTrue(until.hasObservers());
    source.onNext(1);
    to.assertValue(1);
    until.onNext(1);
    to.assertValue(1);
    to.assertNoErrors();
    to.assertTerminated();
    assertFalse("Source still has observers",source.hasObservers());
    assertFalse("Until still has observers",until.hasObservers());
  }
  @Test public void testMainCompletes(){
    PublishSubject<Integer> source=PublishSubject.create();
    PublishSubject<Integer> until=PublishSubject.create();
    TestObserver<Integer> to=new TestObserver<Integer>();
    source.takeUntil(until).subscribe(to);
    assertTrue(source.hasObservers());
    assertTrue(until.hasObservers());
    source.onNext(1);
    source.onComplete();
    to.assertValue(1);
    to.assertNoErrors();
    to.assertTerminated();
    assertFalse("Source still has observers",source.hasObservers());
    assertFalse("Until still has observers",until.hasObservers());
  }
  @Test public void testDownstreamUnsubscribes(){
    PublishSubject<Integer> source=PublishSubject.create();
    PublishSubject<Integer> until=PublishSubject.create();
    TestObserver<Integer> to=new TestObserver<Integer>();
    source.takeUntil(until).take(1).subscribe(to);
    assertTrue(source.hasObservers());
    assertTrue(until.hasObservers());
    source.onNext(1);
    to.assertValue(1);
    to.assertNoErrors();
    to.assertTerminated();
    assertFalse("Source still has observers",source.hasObservers());
    assertFalse("Until still has observers",until.hasObservers());
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(PublishSubject.create().takeUntil(Observable.never()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Integer>,Observable<Integer>>(){
      @Override public Observable<Integer> apply(      Observable<Integer> o) throws Exception {
        return o.takeUntil(Observable.never());
      }
    }
);
  }
  @Test public void untilPublisherMainSuccess(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    main.onNext(1);
    main.onNext(2);
    main.onComplete();
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertResult(1,2);
  }
  @Test public void untilPublisherMainComplete(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    main.onComplete();
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertResult();
  }
  @Test public void untilPublisherMainError(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    main.onError(new TestException());
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void untilPublisherOtherOnNext(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    other.onNext(1);
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertResult();
  }
  @Test public void untilPublisherOtherOnComplete(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    other.onComplete();
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertResult();
  }
  @Test public void untilPublisherOtherError(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    other.onError(new TestException());
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void untilPublisherDispose(){
    PublishSubject<Integer> main=PublishSubject.create();
    PublishSubject<Integer> other=PublishSubject.create();
    TestObserver<Integer> to=main.takeUntil(other).test();
    assertTrue("Main no observers?",main.hasObservers());
    assertTrue("Other no observers?",other.hasObservers());
    to.dispose();
    assertFalse("Main has observers?",main.hasObservers());
    assertFalse("Other has observers?",other.hasObservers());
    to.assertEmpty();
  }
}
