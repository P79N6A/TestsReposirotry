public class FlowableSkipLastTest {
  @Test public void testSkipLastEmpty(){
    Flowable<String> flowable=Flowable.<String>empty().skipLast(2);
    Subscriber<String> subscriber=TestHelper.mockSubscriber();
    flowable.subscribe(subscriber);
    verify(subscriber,never()).onNext(any(String.class));
    verify(subscriber,never()).onError(any(Throwable.class));
    verify(subscriber,times(1)).onComplete();
  }
  @Test public void testSkipLast1(){
    Flowable<String> flowable=Flowable.fromIterable(Arrays.asList("one","two","three")).skipLast(2);
    Subscriber<String> subscriber=TestHelper.mockSubscriber();
    InOrder inOrder=inOrder(subscriber);
    flowable.subscribe(subscriber);
    inOrder.verify(subscriber,never()).onNext("two");
    inOrder.verify(subscriber,never()).onNext("three");
    verify(subscriber,times(1)).onNext("one");
    verify(subscriber,never()).onError(any(Throwable.class));
    verify(subscriber,times(1)).onComplete();
  }
  @Test public void testSkipLast2(){
    Flowable<String> flowable=Flowable.fromIterable(Arrays.asList("one","two")).skipLast(2);
    Subscriber<String> subscriber=TestHelper.mockSubscriber();
    flowable.subscribe(subscriber);
    verify(subscriber,never()).onNext(any(String.class));
    verify(subscriber,never()).onError(any(Throwable.class));
    verify(subscriber,times(1)).onComplete();
  }
  @Test public void testSkipLastWithZeroCount(){
    Flowable<String> w=Flowable.just("one","two");
    Flowable<String> flowable=w.skipLast(0);
    Subscriber<String> subscriber=TestHelper.mockSubscriber();
    flowable.subscribe(subscriber);
    verify(subscriber,times(1)).onNext("one");
    verify(subscriber,times(1)).onNext("two");
    verify(subscriber,never()).onError(any(Throwable.class));
    verify(subscriber,times(1)).onComplete();
  }
  @Test @Ignore("Null values not allowed") public void testSkipLastWithNull(){
    Flowable<String> flowable=Flowable.fromIterable(Arrays.asList("one",null,"two")).skipLast(1);
    Subscriber<String> subscriber=TestHelper.mockSubscriber();
    flowable.subscribe(subscriber);
    verify(subscriber,times(1)).onNext("one");
    verify(subscriber,times(1)).onNext(null);
    verify(subscriber,never()).onNext("two");
    verify(subscriber,never()).onError(any(Throwable.class));
    verify(subscriber,times(1)).onComplete();
  }
  @Test public void testSkipLastWithBackpressure(){
    Flowable<Integer> f=Flowable.range(0,Flowable.bufferSize() * 2).skipLast(Flowable.bufferSize() + 10);
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    f.observeOn(Schedulers.computation()).subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertNoErrors();
    assertEquals((Flowable.bufferSize()) - 10,ts.valueCount());
  }
  @Test(expected=IndexOutOfBoundsException.class) public void testSkipLastWithNegativeCount(){
    Flowable.just("one").skipLast(-1);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Flowable.just(1).skipLast(1));
  }
  @Test public void error(){
    Flowable.error(new TestException()).skipLast(1).test().assertFailure(TestException.class);
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
      @Override public Flowable<Object> apply(      Flowable<Object> f) throws Exception {
        return f.skipLast(1);
      }
    }
);
  }
}
