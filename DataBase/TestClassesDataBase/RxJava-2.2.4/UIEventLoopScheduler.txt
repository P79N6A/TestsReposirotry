public static class UIEventLoopScheduler extends Scheduler {
  private final Scheduler eventLoop;
  private volatile Thread t;
  public UIEventLoopScheduler(){
    eventLoop=Schedulers.single();
    final CountDownLatch latch=new CountDownLatch(1);
    eventLoop.scheduleDirect(new Runnable(){
      @Override public void run(){
        t=Thread.currentThread();
        latch.countDown();
      }
    }
);
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("failed to initialize and get inner thread");
    }
  }
  @NonNull @Override public Worker createWorker(){
    return eventLoop.createWorker();
  }
  public Thread getThread(){
    return t;
  }
}
