public class SchedulerPoolFactoryTest {
  @Test public void utilityClass(){
    TestHelper.checkUtilityClass(SchedulerPoolFactory.class);
  }
  @Test public void multiStartStop(){
    SchedulerPoolFactory.shutdown();
    SchedulerPoolFactory.shutdown();
    SchedulerPoolFactory.tryStart(false);
    assertNull(SchedulerPoolFactory.PURGE_THREAD.get());
    SchedulerPoolFactory.start();
    Schedulers.shutdown();
    Schedulers.start();
  }
  @Test public void startRace() throws InterruptedException {
    try {
      for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
        SchedulerPoolFactory.shutdown();
        Runnable r1=new Runnable(){
          @Override public void run(){
            SchedulerPoolFactory.start();
          }
        }
;
        TestHelper.race(r1,r1);
      }
    }
  finally {
      Schedulers.shutdown();
      Thread.sleep(200);
      Schedulers.start();
    }
  }
  @Test public void loadPurgeProperties(){
    Properties props1=new Properties();
    PurgeProperties pp=new PurgeProperties();
    pp.load(props1);
    assertTrue(pp.purgeEnable);
    assertEquals(pp.purgePeriod,1);
  }
  @Test public void loadPurgePropertiesDisabled(){
    Properties props1=new Properties();
    props1.setProperty(SchedulerPoolFactory.PURGE_ENABLED_KEY,"false");
    PurgeProperties pp=new PurgeProperties();
    pp.load(props1);
    assertFalse(pp.purgeEnable);
    assertEquals(pp.purgePeriod,1);
  }
  @Test public void loadPurgePropertiesEnabledCustomPeriod(){
    Properties props1=new Properties();
    props1.setProperty(SchedulerPoolFactory.PURGE_ENABLED_KEY,"true");
    props1.setProperty(SchedulerPoolFactory.PURGE_PERIOD_SECONDS_KEY,"2");
    PurgeProperties pp=new PurgeProperties();
    pp.load(props1);
    assertTrue(pp.purgeEnable);
    assertEquals(pp.purgePeriod,2);
  }
  @Test public void loadPurgePropertiesEnabledCustomPeriodNaN(){
    Properties props1=new Properties();
    props1.setProperty(SchedulerPoolFactory.PURGE_ENABLED_KEY,"true");
    props1.setProperty(SchedulerPoolFactory.PURGE_PERIOD_SECONDS_KEY,"abc");
    PurgeProperties pp=new PurgeProperties();
    pp.load(props1);
    assertTrue(pp.purgeEnable);
    assertEquals(pp.purgePeriod,1);
  }
  @Test public void putIntoPoolNoPurge(){
    int s=SchedulerPoolFactory.POOLS.size();
    SchedulerPoolFactory.tryPutIntoPool(false,null);
    assertEquals(s,SchedulerPoolFactory.POOLS.size());
  }
  @Test public void putIntoPoolNonThreadPool(){
    int s=SchedulerPoolFactory.POOLS.size();
    SchedulerPoolFactory.tryPutIntoPool(true,null);
    assertEquals(s,SchedulerPoolFactory.POOLS.size());
  }
}
