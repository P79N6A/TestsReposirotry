static final class CustomDriftScheduler extends Scheduler {
  public volatile long drift;
  @NonNull @Override public Worker createWorker(){
    final Worker w=Schedulers.computation().createWorker();
    return new Worker(){
      @Override public void dispose(){
        w.dispose();
      }
      @Override public boolean isDisposed(){
        return w.isDisposed();
      }
      @NonNull @Override public Disposable schedule(      @NonNull Runnable action){
        return w.schedule(action);
      }
      @NonNull @Override public Disposable schedule(      @NonNull Runnable action,      long delayTime,      @NonNull TimeUnit unit){
        return w.schedule(action,delayTime,unit);
      }
      @Override public long now(      TimeUnit unit){
        return super.now(unit) + unit.convert(drift,TimeUnit.NANOSECONDS);
      }
    }
;
  }
  @Override public long now(  @NonNull TimeUnit unit){
    return super.now(unit) + unit.convert(drift,TimeUnit.NANOSECONDS);
  }
}
