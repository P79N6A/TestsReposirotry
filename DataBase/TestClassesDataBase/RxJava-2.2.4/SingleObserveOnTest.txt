public class SingleObserveOnTest {
  @Test public void dispose(){
    TestHelper.checkDisposed(Single.just(1).observeOn(Schedulers.single()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeSingle(new Function<Single<Object>,SingleSource<Object>>(){
      @Override public SingleSource<Object> apply(      Single<Object> s) throws Exception {
        return s.observeOn(Schedulers.single());
      }
    }
);
  }
  @Test public void error(){
    Single.error(new TestException()).observeOn(Schedulers.single()).test().awaitDone(5,TimeUnit.SECONDS).assertFailure(TestException.class);
  }
}
