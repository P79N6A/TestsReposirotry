public class MaybeDoOnEventTest {
  @Test public void dispose(){
    TestHelper.checkDisposed(PublishSubject.<Integer>create().singleElement().doOnEvent(new BiConsumer<Integer,Throwable>(){
      @Override public void accept(      Integer v,      Throwable e) throws Exception {
      }
    }
));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Maybe<Integer> m) throws Exception {
        return m.doOnEvent(new BiConsumer<Integer,Throwable>(){
          @Override public void accept(          Integer v,          Throwable e) throws Exception {
          }
        }
);
      }
    }
);
  }
  @Test public void onSubscribeCrash(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable bs=Disposables.empty();
      new Maybe<Integer>(){
        @Override protected void subscribeActual(        MaybeObserver<? super Integer> observer){
          observer.onSubscribe(bs);
          observer.onError(new TestException("Second"));
          observer.onComplete();
          observer.onSuccess(1);
        }
      }
.doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable d) throws Exception {
          throw new TestException("First");
        }
      }
).test().assertFailureAndMessage(TestException.class,"First");
      assertTrue(bs.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
