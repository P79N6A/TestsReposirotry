public class FlowableMergeWithCompletableTest {
  @Test public void normal(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).mergeWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertResult(1,2,3,4,5,100);
  }
  @Test public void take(){
    Flowable.range(1,5).mergeWith(Completable.complete()).take(3).test().assertResult(1,2,3);
  }
  @Test public void cancel(){
    final PublishProcessor<Integer> pp=PublishProcessor.create();
    final CompletableSubject cs=CompletableSubject.create();
    TestSubscriber<Integer> ts=pp.mergeWith(cs).test();
    assertTrue(pp.hasSubscribers());
    assertTrue(cs.hasObservers());
    ts.cancel();
    assertFalse(pp.hasSubscribers());
    assertFalse(cs.hasObservers());
  }
  @Test public void normalBackpressured(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
    Flowable.range(1,5).mergeWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertValue(100).requestMore(2).assertValues(100,1,2).requestMore(2).assertValues(100,1,2,3,4).requestMore(1).assertResult(100,1,2,3,4,5);
  }
  @Test public void mainError(){
    Flowable.error(new TestException()).mergeWith(Completable.complete()).test().assertFailure(TestException.class);
  }
  @Test public void otherError(){
    Flowable.never().mergeWith(Completable.error(new TestException())).test().assertFailure(TestException.class);
  }
  @Test public void completeRace(){
    for (int i=0; i < 1000; i++) {
      final PublishProcessor<Integer> pp=PublishProcessor.create();
      final CompletableSubject cs=CompletableSubject.create();
      TestSubscriber<Integer> ts=pp.mergeWith(cs).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp.onNext(1);
          pp.onComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          cs.onComplete();
        }
      }
;
      TestHelper.race(r1,r2);
      ts.assertResult(1);
    }
  }
}
