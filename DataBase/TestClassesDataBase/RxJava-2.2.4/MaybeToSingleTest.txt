public class MaybeToSingleTest {
  @Test public void source(){
    Maybe<Integer> m=Maybe.just(1);
    Single<Integer> s=m.toSingle();
    assertTrue(s.getClass().toString(),s instanceof HasUpstreamMaybeSource);
    assertSame(m,(((HasUpstreamMaybeSource<?>)s).source()));
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(PublishProcessor.create().singleElement().toSingle());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybeToSingle(new Function<Maybe<Object>,SingleSource<Object>>(){
      @Override public SingleSource<Object> apply(      Maybe<Object> m) throws Exception {
        return m.toSingle();
      }
    }
);
  }
}
