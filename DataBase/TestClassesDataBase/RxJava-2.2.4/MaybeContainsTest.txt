public class MaybeContainsTest {
  @Test public void doesContain(){
    Maybe.just(1).contains(1).test().assertResult(true);
  }
  @Test public void doesntContain(){
    Maybe.just(1).contains(2).test().assertResult(false);
  }
  @Test public void empty(){
    Maybe.empty().contains(2).test().assertResult(false);
  }
  @Test public void error(){
    Maybe.error(new TestException()).contains(2).test().assertFailure(TestException.class);
  }
  @Test public void dispose(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestObserver<Boolean> to=pp.singleElement().contains(1).test();
    assertTrue(pp.hasSubscribers());
    to.cancel();
    assertFalse(pp.hasSubscribers());
  }
  @Test public void isDisposed(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestHelper.checkDisposed(pp.singleElement().contains(1));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybeToSingle(new Function<Maybe<Object>,SingleSource<Boolean>>(){
      @Override public SingleSource<Boolean> apply(      Maybe<Object> f) throws Exception {
        return f.contains(1);
      }
    }
);
  }
  @SuppressWarnings("unchecked") @Test public void hasSource(){
    assertSame(Maybe.empty(),((HasUpstreamMaybeSource<Object>)(Maybe.empty().contains(0))).source());
  }
}
