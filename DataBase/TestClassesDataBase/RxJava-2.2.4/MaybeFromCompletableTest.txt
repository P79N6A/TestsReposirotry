public class MaybeFromCompletableTest {
  @Test(expected=NullPointerException.class) public void fromCompletableNull(){
    Maybe.fromCompletable(null);
  }
  @Test public void fromCompletable(){
    Maybe.fromCompletable(Completable.complete()).test().assertResult();
  }
  @Test public void fromCompletableError(){
    Maybe.fromCompletable(Completable.error(new UnsupportedOperationException())).test().assertFailure(UnsupportedOperationException.class);
  }
  @Test public void source(){
    Completable c=Completable.complete();
    assertSame(c,((HasUpstreamCompletableSource)Maybe.fromCompletable(c)).source());
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Maybe.fromCompletable(PublishProcessor.create().ignoreElements()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeCompletableToMaybe(new Function<Completable,MaybeSource<Object>>(){
      @Override public MaybeSource<Object> apply(      Completable v) throws Exception {
        return Maybe.fromCompletable(v);
      }
    }
);
  }
}
