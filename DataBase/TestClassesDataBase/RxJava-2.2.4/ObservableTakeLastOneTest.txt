public class ObservableTakeLastOneTest {
  @Test public void testLastOfManyReturnsLast(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(1,10).takeLast(1).subscribe(to);
    to.assertValue(10);
    to.assertNoErrors();
    to.assertTerminated();
  }
  @Test public void testLastOfEmptyReturnsEmpty(){
    TestObserver<Object> to=new TestObserver<Object>();
    Observable.empty().takeLast(1).subscribe(to);
    to.assertNoValues();
    to.assertNoErrors();
    to.assertTerminated();
  }
  @Test public void testLastOfOneReturnsLast(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.just(1).takeLast(1).subscribe(to);
    to.assertValue(1);
    to.assertNoErrors();
    to.assertTerminated();
  }
  @Test public void testUnsubscribesFromUpstream(){
    final AtomicBoolean unsubscribed=new AtomicBoolean(false);
    Action unsubscribeAction=new Action(){
      @Override public void run(){
        unsubscribed.set(true);
      }
    }
;
    Observable.just(1).concatWith(Observable.<Integer>never()).doOnDispose(unsubscribeAction).takeLast(1).subscribe().dispose();
    assertTrue(unsubscribed.get());
  }
  @Test public void testTakeLastZeroProcessesAllItemsButIgnoresThem(){
    final AtomicInteger upstreamCount=new AtomicInteger();
    final int num=10;
    long count=Observable.range(1,num).doOnNext(new Consumer<Integer>(){
      @Override public void accept(      Integer t){
        upstreamCount.incrementAndGet();
      }
    }
).takeLast(0).count().blockingGet();
    assertEquals(num,upstreamCount.get());
    assertEquals(0L,count);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.just(1).takeLast(1));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
      @Override public ObservableSource<Object> apply(      Observable<Object> f) throws Exception {
        return f.takeLast(1);
      }
    }
);
  }
  @Test public void error(){
    Observable.error(new TestException()).takeLast(1).test().assertFailure(TestException.class);
  }
}
