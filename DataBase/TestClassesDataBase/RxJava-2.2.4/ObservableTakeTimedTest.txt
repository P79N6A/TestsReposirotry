public class ObservableTakeTimedTest {
  @Test public void testTakeTimed(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Integer> source=PublishSubject.create();
    Observable<Integer> result=source.take(1,TimeUnit.SECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    result.subscribe(o);
    source.onNext(1);
    source.onNext(2);
    source.onNext(3);
    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
    source.onNext(4);
    InOrder inOrder=inOrder(o);
    inOrder.verify(o).onNext(1);
    inOrder.verify(o).onNext(2);
    inOrder.verify(o).onNext(3);
    inOrder.verify(o).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(o,never()).onNext(4);
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void testTakeTimedErrorBeforeTime(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Integer> source=PublishSubject.create();
    Observable<Integer> result=source.take(1,TimeUnit.SECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    result.subscribe(o);
    source.onNext(1);
    source.onNext(2);
    source.onNext(3);
    source.onError(new TestException());
    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
    source.onNext(4);
    InOrder inOrder=inOrder(o);
    inOrder.verify(o).onNext(1);
    inOrder.verify(o).onNext(2);
    inOrder.verify(o).onNext(3);
    inOrder.verify(o).onError(any(TestException.class));
    inOrder.verifyNoMoreInteractions();
    verify(o,never()).onComplete();
    verify(o,never()).onNext(4);
  }
  @Test public void testTakeTimedErrorAfterTime(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Integer> source=PublishSubject.create();
    Observable<Integer> result=source.take(1,TimeUnit.SECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    result.subscribe(o);
    source.onNext(1);
    source.onNext(2);
    source.onNext(3);
    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
    source.onNext(4);
    source.onError(new TestException());
    InOrder inOrder=inOrder(o);
    inOrder.verify(o).onNext(1);
    inOrder.verify(o).onNext(2);
    inOrder.verify(o).onNext(3);
    inOrder.verify(o).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(o,never()).onNext(4);
    verify(o,never()).onError(any(TestException.class));
  }
  @Test public void timedDefaultScheduler(){
    Observable.range(1,5).take(1,TimeUnit.MINUTES).test().awaitDone(5,TimeUnit.SECONDS).assertResult(1,2,3,4,5);
  }
}
