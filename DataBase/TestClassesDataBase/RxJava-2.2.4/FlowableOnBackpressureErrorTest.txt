public class FlowableOnBackpressureErrorTest {
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.just(1).toFlowable(BackpressureStrategy.ERROR));
  }
  @Test public void badRequest(){
    TestHelper.assertBadRequestReported(Observable.just(1).toFlowable(BackpressureStrategy.ERROR));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Publisher<Object>>(){
      @Override public Publisher<Object> apply(      Flowable<Object> f) throws Exception {
        return new FlowableOnBackpressureError<Object>(f);
      }
    }
);
  }
  @Test public void badSource(){
    TestHelper.<Integer>checkBadSourceFlowable(new Function<Flowable<Integer>,Object>(){
      @Override public Object apply(      Flowable<Integer> f) throws Exception {
        return new FlowableOnBackpressureError<Integer>(f);
      }
    }
,false,1,1,1);
  }
}
