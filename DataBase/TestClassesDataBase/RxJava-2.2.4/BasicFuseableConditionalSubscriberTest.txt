public class BasicFuseableConditionalSubscriberTest {
  @Test public void offerThrows(){
    ConditionalSubscriber<Integer> cs=new ConditionalSubscriber<Integer>(){
      @Override public void onSubscribe(      Subscription s){
      }
      @Override public void onNext(      Integer t){
      }
      @Override public void onError(      Throwable t){
      }
      @Override public void onComplete(){
      }
      @Override public boolean tryOnNext(      Integer t){
        return false;
      }
    }
;
    BasicFuseableConditionalSubscriber<Integer,Integer> fcs=new BasicFuseableConditionalSubscriber<Integer,Integer>(cs){
      @Override public boolean tryOnNext(      Integer t){
        return false;
      }
      @Override public void onNext(      Integer t){
      }
      @Override public int requestFusion(      int mode){
        return 0;
      }
      @Nullable @Override public Integer poll() throws Exception {
        return null;
      }
    }
;
    fcs.onSubscribe(new ScalarSubscription<Integer>(fcs,1));
    TestHelper.assertNoOffer(fcs);
    assertFalse(fcs.isEmpty());
    fcs.clear();
    assertTrue(fcs.isEmpty());
  }
}
