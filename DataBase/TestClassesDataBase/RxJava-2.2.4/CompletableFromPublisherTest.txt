public class CompletableFromPublisherTest {
  @Test(expected=NullPointerException.class) public void fromPublisherNull(){
    Completable.fromPublisher(null);
  }
  @Test public void fromPublisher(){
    Completable.fromPublisher(Flowable.just(1)).test().assertResult();
  }
  @Test public void fromPublisherEmpty(){
    Completable.fromPublisher(Flowable.empty()).test().assertResult();
  }
  @Test public void fromPublisherThrows(){
    Completable.fromPublisher(Flowable.error(new UnsupportedOperationException())).test().assertFailure(UnsupportedOperationException.class);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Completable.fromPublisher(Flowable.just(1)));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowableToCompletable(new Function<Flowable<Object>,Completable>(){
      @Override public Completable apply(      Flowable<Object> f) throws Exception {
        return Completable.fromPublisher(f);
      }
    }
);
  }
}
