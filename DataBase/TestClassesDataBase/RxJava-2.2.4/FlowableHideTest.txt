public class FlowableHideTest {
  @Test public void testHiding(){
    PublishProcessor<Integer> src=PublishProcessor.create();
    Flowable<Integer> dst=src.hide();
    assertFalse(dst instanceof PublishProcessor);
    Subscriber<Object> subscriber=TestHelper.mockSubscriber();
    dst.subscribe(subscriber);
    src.onNext(1);
    src.onComplete();
    verify(subscriber).onNext(1);
    verify(subscriber).onComplete();
    verify(subscriber,never()).onError(any(Throwable.class));
  }
  @Test public void testHidingError(){
    PublishProcessor<Integer> src=PublishProcessor.create();
    Flowable<Integer> dst=src.hide();
    assertFalse(dst instanceof PublishProcessor);
    Subscriber<Object> subscriber=TestHelper.mockSubscriber();
    dst.subscribe(subscriber);
    src.onError(new TestException());
    verify(subscriber,never()).onNext(any());
    verify(subscriber,never()).onComplete();
    verify(subscriber).onError(any(TestException.class));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
      @Override public Flowable<Object> apply(      Flowable<Object> f) throws Exception {
        return f.hide();
      }
    }
);
  }
  @Test public void disposed(){
    TestHelper.checkDisposed(PublishProcessor.create().hide());
  }
}
