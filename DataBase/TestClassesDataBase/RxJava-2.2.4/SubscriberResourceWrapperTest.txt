public class SubscriberResourceWrapperTest {
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  SubscriberResourceWrapper<Integer> s=new SubscriberResourceWrapper<Integer>(ts);
  @Test public void cancel(){
    BooleanSubscription bs=new BooleanSubscription();
    Disposable d=Disposables.empty();
    s.setResource(d);
    s.onSubscribe(bs);
    assertFalse(d.isDisposed());
    assertFalse(s.isDisposed());
    ts.cancel();
    assertTrue(bs.isCancelled());
    assertTrue(d.isDisposed());
    assertTrue(s.isDisposed());
  }
  @Test public void error(){
    BooleanSubscription bs=new BooleanSubscription();
    Disposable d=Disposables.empty();
    s.setResource(d);
    s.onSubscribe(bs);
    s.onError(new TestException());
    assertTrue(d.isDisposed());
    assertFalse(bs.isCancelled());
    ts.assertFailure(TestException.class);
  }
  @Test public void complete(){
    BooleanSubscription bs=new BooleanSubscription();
    Disposable d=Disposables.empty();
    s.setResource(d);
    s.onSubscribe(bs);
    s.onComplete();
    assertTrue(d.isDisposed());
    assertFalse(bs.isCancelled());
    ts.assertResult();
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
      @Override public Flowable<Object> apply(      Flowable<Object> f) throws Exception {
        return f.lift(new FlowableOperator<Object,Object>(){
          @Override public Subscriber<? super Object> apply(          Subscriber<? super Object> s) throws Exception {
            return new SubscriberResourceWrapper<Object>(s);
          }
        }
);
      }
    }
);
  }
  @Test public void badRequest(){
    TestHelper.assertBadRequestReported(Flowable.never().lift(new FlowableOperator<Object,Object>(){
      @Override public Subscriber<? super Object> apply(      Subscriber<? super Object> s) throws Exception {
        return new SubscriberResourceWrapper<Object>(s);
      }
    }
));
  }
}
