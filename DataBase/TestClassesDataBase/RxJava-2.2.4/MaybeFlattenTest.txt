public class MaybeFlattenTest {
  @Test public void dispose(){
    TestHelper.checkDisposed(Maybe.just(1).flatMap(new Function<Integer,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Integer v) throws Exception {
        return Maybe.just(2);
      }
    }
));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Maybe<Integer> v) throws Exception {
        return v.flatMap(new Function<Integer,MaybeSource<Integer>>(){
          @Override public MaybeSource<Integer> apply(          Integer v) throws Exception {
            return Maybe.just(2);
          }
        }
);
      }
    }
);
  }
  @Test public void mainError(){
    Maybe.<Integer>error(new TestException()).flatMap(new Function<Integer,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Integer v) throws Exception {
        return Maybe.just(2);
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void mainEmpty(){
    Maybe.<Integer>empty().flatMap(new Function<Integer,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Integer v) throws Exception {
        return Maybe.just(2);
      }
    }
).test().assertResult();
  }
  @Test public void mapperThrows(){
    Maybe.just(1).flatMap(new Function<Integer,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void mapperReturnsNull(){
    Maybe.just(1).flatMap(new Function<Integer,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Integer v) throws Exception {
        return null;
      }
    }
).test().assertFailure(NullPointerException.class);
  }
}
