/** 
 * Systematically tests that when zipping an infinite and a finite Observable, the resulting Observable is finite.
 */
public class FlowableZipCompletionTest {
  BiFunction<String,String,String> concat2Strings;
  PublishProcessor<String> s1;
  PublishProcessor<String> s2;
  Flowable<String> zipped;
  Subscriber<String> subscriber;
  InOrder inOrder;
  @Before public void setUp(){
    concat2Strings=new BiFunction<String,String,String>(){
      @Override public String apply(      String t1,      String t2){
        return t1 + "-" + t2;
      }
    }
;
    s1=PublishProcessor.create();
    s2=PublishProcessor.create();
    zipped=Flowable.zip(s1,s2,concat2Strings);
    subscriber=TestHelper.mockSubscriber();
    inOrder=inOrder(subscriber);
    zipped.subscribe(subscriber);
  }
  @Test public void testFirstCompletesThenSecondInfinite(){
    s1.onNext("a");
    s1.onNext("b");
    s1.onComplete();
    s2.onNext("1");
    inOrder.verify(subscriber,times(1)).onNext("a-1");
    s2.onNext("2");
    inOrder.verify(subscriber,times(1)).onNext("b-2");
    inOrder.verify(subscriber,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testSecondInfiniteThenFirstCompletes(){
    s2.onNext("1");
    s2.onNext("2");
    s1.onNext("a");
    inOrder.verify(subscriber,times(1)).onNext("a-1");
    s1.onNext("b");
    inOrder.verify(subscriber,times(1)).onNext("b-2");
    s1.onComplete();
    inOrder.verify(subscriber,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testSecondCompletesThenFirstInfinite(){
    s2.onNext("1");
    s2.onNext("2");
    s2.onComplete();
    s1.onNext("a");
    inOrder.verify(subscriber,times(1)).onNext("a-1");
    s1.onNext("b");
    inOrder.verify(subscriber,times(1)).onNext("b-2");
    inOrder.verify(subscriber,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void testFirstInfiniteThenSecondCompletes(){
    s1.onNext("a");
    s1.onNext("b");
    s2.onNext("1");
    inOrder.verify(subscriber,times(1)).onNext("a-1");
    s2.onNext("2");
    inOrder.verify(subscriber,times(1)).onNext("b-2");
    s2.onComplete();
    inOrder.verify(subscriber,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
  }
}
