public class MaybeFromSingleTest {
  @Test(expected=NullPointerException.class) public void fromSingleNull(){
    Maybe.fromSingle(null);
  }
  @Test public void fromSingle(){
    Maybe.fromSingle(Single.just(1)).test().assertResult(1);
  }
  @Test public void fromSingleThrows(){
    Maybe.fromSingle(Single.error(new UnsupportedOperationException())).test().assertFailure(UnsupportedOperationException.class);
  }
  @Test public void source(){
    Single<Integer> c=Single.never();
    assertSame(c,((HasUpstreamSingleSource<?>)Maybe.fromSingle(c)).source());
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Maybe.fromSingle(PublishProcessor.create().singleOrError()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeSingleToMaybe(new Function<Single<Object>,MaybeSource<Object>>(){
      @Override public MaybeSource<Object> apply(      Single<Object> v) throws Exception {
        return Maybe.fromSingle(v);
      }
    }
);
  }
}
