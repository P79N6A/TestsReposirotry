public class CompletableAndThenObservableTest {
  @Test public void cancelMain(){
    CompletableSubject cs=CompletableSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=cs.andThen(ps).test();
    assertTrue(cs.hasObservers());
    assertFalse(ps.hasObservers());
    to.cancel();
    assertFalse(cs.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void cancelOther(){
    CompletableSubject cs=CompletableSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=cs.andThen(ps).test();
    assertTrue(cs.hasObservers());
    assertFalse(ps.hasObservers());
    cs.onComplete();
    assertFalse(cs.hasObservers());
    assertTrue(ps.hasObservers());
    to.cancel();
    assertFalse(cs.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void errorMain(){
    CompletableSubject cs=CompletableSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=cs.andThen(ps).test();
    assertTrue(cs.hasObservers());
    assertFalse(ps.hasObservers());
    cs.onError(new TestException());
    assertFalse(cs.hasObservers());
    assertFalse(ps.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void errorOther(){
    CompletableSubject cs=CompletableSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=cs.andThen(ps).test();
    assertTrue(cs.hasObservers());
    assertFalse(ps.hasObservers());
    cs.onComplete();
    assertFalse(cs.hasObservers());
    assertTrue(ps.hasObservers());
    ps.onError(new TestException());
    assertFalse(cs.hasObservers());
    assertFalse(ps.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void isDisposed(){
    TestHelper.checkDisposed(Completable.never().andThen(Observable.never()));
  }
}
