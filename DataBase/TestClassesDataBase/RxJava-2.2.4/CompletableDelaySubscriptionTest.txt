public class CompletableDelaySubscriptionTest {
  @Test public void normal(){
    final AtomicInteger counter=new AtomicInteger();
    Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        counter.incrementAndGet();
      }
    }
).delaySubscription(100,TimeUnit.MILLISECONDS).test().awaitDone(5,TimeUnit.SECONDS).assertResult();
    assertEquals(1,counter.get());
  }
  @Test public void error(){
    final AtomicInteger counter=new AtomicInteger();
    Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        counter.incrementAndGet();
        throw new TestException();
      }
    }
).delaySubscription(100,TimeUnit.MILLISECONDS).test().awaitDone(5,TimeUnit.SECONDS).assertFailure(TestException.class);
    assertEquals(1,counter.get());
  }
  @Test public void disposeBeforeTime(){
    TestScheduler scheduler=new TestScheduler();
    final AtomicInteger counter=new AtomicInteger();
    Completable result=Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        counter.incrementAndGet();
      }
    }
).delaySubscription(100,TimeUnit.MILLISECONDS,scheduler);
    TestObserver<Void> to=result.test();
    to.assertEmpty();
    scheduler.advanceTimeBy(90,TimeUnit.MILLISECONDS);
    to.dispose();
    scheduler.advanceTimeBy(15,TimeUnit.MILLISECONDS);
    to.assertEmpty();
    assertEquals(0,counter.get());
  }
  @Test public void timestep(){
    TestScheduler scheduler=new TestScheduler();
    final AtomicInteger counter=new AtomicInteger();
    Completable result=Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        counter.incrementAndGet();
      }
    }
).delaySubscription(100,TimeUnit.MILLISECONDS,scheduler);
    TestObserver<Void> to=result.test();
    scheduler.advanceTimeBy(90,TimeUnit.MILLISECONDS);
    to.assertEmpty();
    scheduler.advanceTimeBy(15,TimeUnit.MILLISECONDS);
    to.assertResult();
    assertEquals(1,counter.get());
  }
  @Test public void timestepError(){
    TestScheduler scheduler=new TestScheduler();
    final AtomicInteger counter=new AtomicInteger();
    Completable result=Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        counter.incrementAndGet();
        throw new TestException();
      }
    }
).delaySubscription(100,TimeUnit.MILLISECONDS,scheduler);
    TestObserver<Void> to=result.test();
    scheduler.advanceTimeBy(90,TimeUnit.MILLISECONDS);
    to.assertEmpty();
    scheduler.advanceTimeBy(15,TimeUnit.MILLISECONDS);
    to.assertFailure(TestException.class);
    assertEquals(1,counter.get());
  }
  @Test public void disposeMain(){
    CompletableSubject cs=CompletableSubject.create();
    TestScheduler scheduler=new TestScheduler();
    TestObserver<Void> to=cs.delaySubscription(1,TimeUnit.SECONDS,scheduler).test();
    assertFalse(cs.hasObservers());
    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
    assertTrue(cs.hasObservers());
    to.dispose();
    assertFalse(cs.hasObservers());
  }
}
