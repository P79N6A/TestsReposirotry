static final class CrashDummy implements Observer<Object>, Disposable {
  boolean crashOnSubscribe;
  int crashOnNext;
  boolean crashOnError;
  boolean crashOnComplete;
  boolean crashDispose;
  Throwable error;
  CrashDummy(  boolean crashOnSubscribe,  int crashOnNext,  boolean crashOnError,  boolean crashOnComplete,  boolean crashDispose){
    this.crashOnSubscribe=crashOnSubscribe;
    this.crashOnNext=crashOnNext;
    this.crashOnError=crashOnError;
    this.crashOnComplete=crashOnComplete;
    this.crashDispose=crashDispose;
  }
  @Override public void dispose(){
    if (crashDispose) {
      throw new TestException("dispose()");
    }
  }
  @Override public boolean isDisposed(){
    return false;
  }
  @Override public void onSubscribe(  Disposable d){
    if (crashOnSubscribe) {
      throw new TestException("onSubscribe()");
    }
  }
  @Override public void onNext(  Object value){
    if (--crashOnNext == 0) {
      throw new TestException("onNext(" + value + ")");
    }
  }
  @Override public void onError(  Throwable e){
    if (crashOnError) {
      throw new TestException("onError(" + e + ")");
    }
    error=e;
  }
  @Override public void onComplete(){
    if (crashOnComplete) {
      throw new TestException("onComplete()");
    }
  }
  public SafeObserver<Object> toSafe(){
    return new SafeObserver<Object>(this);
  }
  public CrashDummy assertError(  Class<? extends Throwable> clazz){
    if (!clazz.isInstance(error)) {
      throw new AssertionError("Different error: " + error);
    }
    return this;
  }
  public CrashDummy assertInnerError(  int index,  Class<? extends Throwable> clazz){
    List<Throwable> cel=TestHelper.compositeList(error);
    TestHelper.assertError(cel,index,clazz);
    return this;
  }
  public CrashDummy assertInnerError(  int index,  Class<? extends Throwable> clazz,  String message){
    List<Throwable> cel=TestHelper.compositeList(error);
    TestHelper.assertError(cel,index,clazz,message);
    return this;
  }
}
