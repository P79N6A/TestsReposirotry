public static class RobotConversionFunc<T,R> implements Function<Publisher<T>,CylonDetectorObservable<R>> {
  private FlowableOperator<? extends R,? super T> operator;
  public RobotConversionFunc(  FlowableOperator<? extends R,? super T> operator){
    this.operator=operator;
  }
  @Override public CylonDetectorObservable<R> apply(  final Publisher<T> onSubscribe){
    return CylonDetectorObservable.create(new Publisher<R>(){
      @Override public void subscribe(      Subscriber<? super R> subscriber){
        try {
          Subscriber<? super T> st=operator.apply(subscriber);
          try {
            onSubscribe.subscribe(st);
          }
 catch (          Throwable e) {
            st.onError(e);
          }
        }
 catch (        Throwable e) {
          subscriber.onError(e);
        }
      }
    }
);
  }
}
