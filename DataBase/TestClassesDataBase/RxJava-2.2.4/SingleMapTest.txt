public class SingleMapTest {
  @Test(expected=NullPointerException.class) public void mapNull(){
    Single.just(1).map(null);
  }
  @Test public void mapValue(){
    Single.just(1).map(new Function<Integer,Integer>(){
      @Override public Integer apply(      final Integer integer) throws Exception {
        if (integer == 1) {
          return 2;
        }
        return 1;
      }
    }
).test().assertResult(2);
  }
  @Test public void mapValueNull(){
    Single.just(1).map(new Function<Integer,SingleSource<Integer>>(){
      @Override public SingleSource<Integer> apply(      final Integer integer) throws Exception {
        return null;
      }
    }
).test().assertNoValues().assertError(NullPointerException.class).assertErrorMessage("The mapper function returned a null value.");
  }
  @Test public void mapValueErrorThrown(){
    Single.just(1).map(new Function<Integer,SingleSource<Integer>>(){
      @Override public SingleSource<Integer> apply(      final Integer integer) throws Exception {
        throw new RuntimeException("something went terribly wrong!");
      }
    }
).test().assertNoValues().assertError(RuntimeException.class).assertErrorMessage("something went terribly wrong!");
  }
  @Test public void mapError(){
    RuntimeException exception=new RuntimeException("test");
    Single.error(exception).map(new Function<Object,Object>(){
      @Override public Object apply(      final Object integer) throws Exception {
        return new Object();
      }
    }
).test().assertError(exception);
  }
}
