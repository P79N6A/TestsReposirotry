public class ObservableTakeLastTimedTest {
  @Test(expected=IndexOutOfBoundsException.class) public void testTakeLastTimedWithNegativeCount(){
    Observable.just("one").takeLast(-1,1,TimeUnit.SECONDS);
  }
  @Test public void takeLastTimed(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Object> source=PublishSubject.create();
    Observable<Object> result=source.takeLast(1000,TimeUnit.MILLISECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    InOrder inOrder=inOrder(o);
    result.subscribe(o);
    source.onNext(1);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(4);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(5);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onComplete();
    inOrder.verify(o,times(1)).onNext(2);
    inOrder.verify(o,times(1)).onNext(3);
    inOrder.verify(o,times(1)).onNext(4);
    inOrder.verify(o,times(1)).onNext(5);
    inOrder.verify(o,times(1)).onComplete();
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void takeLastTimedDelayCompletion(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Object> source=PublishSubject.create();
    Observable<Object> result=source.takeLast(1000,TimeUnit.MILLISECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    InOrder inOrder=inOrder(o);
    result.subscribe(o);
    source.onNext(1);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(4);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(5);
    scheduler.advanceTimeBy(1250,TimeUnit.MILLISECONDS);
    source.onComplete();
    inOrder.verify(o,times(1)).onComplete();
    verify(o,never()).onNext(any());
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void takeLastTimedWithCapacity(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Object> source=PublishSubject.create();
    Observable<Object> result=source.takeLast(2,1000,TimeUnit.MILLISECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    InOrder inOrder=inOrder(o);
    result.subscribe(o);
    source.onNext(1);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(4);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(5);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onComplete();
    inOrder.verify(o,times(1)).onNext(4);
    inOrder.verify(o,times(1)).onNext(5);
    inOrder.verify(o,times(1)).onComplete();
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void takeLastTimedThrowingSource(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Object> source=PublishSubject.create();
    Observable<Object> result=source.takeLast(1,TimeUnit.SECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    InOrder inOrder=inOrder(o);
    result.subscribe(o);
    source.onNext(1);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(4);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(5);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onError(new TestException());
    inOrder.verify(o,times(1)).onError(any(TestException.class));
    verify(o,never()).onNext(any());
    verify(o,never()).onComplete();
  }
  @Test public void takeLastTimedWithZeroCapacity(){
    TestScheduler scheduler=new TestScheduler();
    PublishSubject<Object> source=PublishSubject.create();
    Observable<Object> result=source.takeLast(0,1,TimeUnit.SECONDS,scheduler);
    Observer<Object> o=TestHelper.mockObserver();
    InOrder inOrder=inOrder(o);
    result.subscribe(o);
    source.onNext(1);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(4);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onNext(5);
    scheduler.advanceTimeBy(250,TimeUnit.MILLISECONDS);
    source.onComplete();
    inOrder.verify(o,times(1)).onComplete();
    verify(o,never()).onNext(any());
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void takeLastTimeAndSize(){
    Observable.just(1,2).takeLast(1,1,TimeUnit.MINUTES).test().assertResult(2);
  }
  @Test public void takeLastTime(){
    Observable.just(1,2).takeLast(1,TimeUnit.MINUTES).test().assertResult(1,2);
  }
  @Test public void takeLastTimeDelayError(){
    Observable.just(1,2).concatWith(Observable.<Integer>error(new TestException())).takeLast(1,TimeUnit.MINUTES,true).test().assertFailure(TestException.class,1,2);
  }
  @Test public void takeLastTimeDelayErrorCustomScheduler(){
    Observable.just(1,2).concatWith(Observable.<Integer>error(new TestException())).takeLast(1,TimeUnit.MINUTES,Schedulers.io(),true).test().assertFailure(TestException.class,1,2);
  }
  @Test public void disposed(){
    TestHelper.checkDisposed(PublishSubject.create().takeLast(1,TimeUnit.MINUTES));
  }
  @Test public void observeOn(){
    Observable.range(1,1000).takeLast(1,TimeUnit.DAYS).take(500).observeOn(Schedulers.single(),true,1).test().awaitDone(5,TimeUnit.SECONDS).assertSubscribed().assertValueCount(500).assertNoErrors().assertComplete();
  }
  @Test public void cancelCompleteRace(){
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      final PublishSubject<Integer> ps=PublishSubject.create();
      final TestObserver<Integer> to=ps.takeLast(1,TimeUnit.DAYS).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          ps.onComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          to.cancel();
        }
      }
;
      TestHelper.race(r1,r2);
    }
  }
}
