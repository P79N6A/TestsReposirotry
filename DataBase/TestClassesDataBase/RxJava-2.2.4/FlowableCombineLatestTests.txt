public class FlowableCombineLatestTests {
  /** 
 * This won't compile if super/extends isn't done correctly on generics.
 */
  @Test public void testCovarianceOfCombineLatest(){
    Flowable<HorrorMovie> horrors=Flowable.just(new HorrorMovie());
    Flowable<CoolRating> ratings=Flowable.just(new CoolRating());
    Flowable.<Movie,CoolRating,Result>combineLatest(horrors,ratings,combine).blockingForEach(action);
    Flowable.<Movie,CoolRating,Result>combineLatest(horrors,ratings,combine).blockingForEach(action);
    Flowable.<Media,Rating,ExtendedResult>combineLatest(horrors,ratings,combine).blockingForEach(extendedAction);
    Flowable.<Media,Rating,Result>combineLatest(horrors,ratings,combine).blockingForEach(action);
    Flowable.<Media,Rating,ExtendedResult>combineLatest(horrors,ratings,combine).blockingForEach(action);
    Flowable.<Movie,CoolRating,Result>combineLatest(horrors,ratings,combine);
  }
  BiFunction<Media,Rating,ExtendedResult> combine=new BiFunction<Media,Rating,ExtendedResult>(){
    @Override public ExtendedResult apply(    Media m,    Rating r){
      return new ExtendedResult();
    }
  }
;
  Consumer<Result> action=new Consumer<Result>(){
    @Override public void accept(    Result t1){
      System.out.println("Result: " + t1);
    }
  }
;
  Consumer<ExtendedResult> extendedAction=new Consumer<ExtendedResult>(){
    @Override public void accept(    ExtendedResult t1){
      System.out.println("Result: " + t1);
    }
  }
;
  @Ignore("No longer allowed") @Test public void testNullEmitting() throws Exception {
    Flowable<Boolean> nullObservable=BehaviorProcessor.createDefault((Boolean)null);
    Flowable<Boolean> nonNullObservable=BehaviorProcessor.createDefault(true);
    Flowable<Boolean> combined=combineLatest(nullObservable,nonNullObservable,new BiFunction<Boolean,Boolean,Boolean>(){
      @Override public Boolean apply(      Boolean bool1,      Boolean bool2){
        return bool1 == null ? null : bool2;
      }
    }
);
    combined.subscribe(new Consumer<Boolean>(){
      @Override public void accept(      Boolean aBoolean){
        assertNull(aBoolean);
      }
    }
);
  }
}
