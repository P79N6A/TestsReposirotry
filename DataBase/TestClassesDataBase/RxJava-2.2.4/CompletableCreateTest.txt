public class CompletableCreateTest {
  @Test(expected=NullPointerException.class) public void nullArgument(){
    Completable.create(null);
  }
  @Test public void basic(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d=Disposables.empty();
      Completable.create(new CompletableOnSubscribe(){
        @Override public void subscribe(        CompletableEmitter e) throws Exception {
          e.setDisposable(d);
          e.onComplete();
          e.onError(new TestException());
          e.onComplete();
        }
      }
).test().assertResult();
      assertTrue(d.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void basicWithCancellable(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d1=Disposables.empty();
      final Disposable d2=Disposables.empty();
      Completable.create(new CompletableOnSubscribe(){
        @Override public void subscribe(        CompletableEmitter e) throws Exception {
          e.setDisposable(d1);
          e.setCancellable(new Cancellable(){
            @Override public void cancel() throws Exception {
              d2.dispose();
            }
          }
);
          e.onComplete();
          e.onError(new TestException());
          e.onComplete();
        }
      }
).test().assertResult();
      assertTrue(d1.isDisposed());
      assertTrue(d2.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void basicWithError(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d=Disposables.empty();
      Completable.create(new CompletableOnSubscribe(){
        @Override public void subscribe(        CompletableEmitter e) throws Exception {
          e.setDisposable(d);
          e.onError(new TestException());
          e.onComplete();
          e.onError(new TestException("second"));
        }
      }
).test().assertFailure(TestException.class);
      assertTrue(d.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class,"second");
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void callbackThrows(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void onErrorNull(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        e.onError(null);
      }
    }
).test().assertFailure(NullPointerException.class);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        e.onComplete();
      }
    }
));
  }
  @Test public void onErrorThrows(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        Disposable d=Disposables.empty();
        e.setDisposable(d);
        try {
          e.onError(new IOException());
          fail("Should have thrown");
        }
 catch (        TestException ex) {
        }
        assertTrue(d.isDisposed());
        assertTrue(e.isDisposed());
      }
    }
).subscribe(new CompletableObserver(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onError(      Throwable e){
        throw new TestException();
      }
      @Override public void onComplete(){
      }
    }
);
  }
  @Test public void onCompleteThrows(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        Disposable d=Disposables.empty();
        e.setDisposable(d);
        try {
          e.onComplete();
          fail("Should have thrown");
        }
 catch (        TestException ex) {
        }
        assertTrue(d.isDisposed());
        assertTrue(e.isDisposed());
      }
    }
).subscribe(new CompletableObserver(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
        throw new TestException();
      }
    }
);
  }
  @Test public void onErrorThrows2(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        try {
          e.onError(new IOException());
          fail("Should have thrown");
        }
 catch (        TestException ex) {
        }
        assertTrue(e.isDisposed());
      }
    }
).subscribe(new CompletableObserver(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onError(      Throwable e){
        throw new TestException();
      }
      @Override public void onComplete(){
      }
    }
);
  }
  @Test public void onCompleteThrows2(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter e) throws Exception {
        try {
          e.onComplete();
          fail("Should have thrown");
        }
 catch (        TestException ex) {
        }
        assertTrue(e.isDisposed());
      }
    }
).subscribe(new CompletableObserver(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
        throw new TestException();
      }
    }
);
  }
  @Test public void tryOnError(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Boolean[] response={null};
      Completable.create(new CompletableOnSubscribe(){
        @Override public void subscribe(        CompletableEmitter e) throws Exception {
          e.onComplete();
          response[0]=e.tryOnError(new TestException());
        }
      }
).test().assertResult();
      assertFalse(response[0]);
      assertTrue(errors.toString(),errors.isEmpty());
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void emitterHasToString(){
    Completable.create(new CompletableOnSubscribe(){
      @Override public void subscribe(      CompletableEmitter emitter) throws Exception {
        assertTrue(emitter.toString().contains(CompletableCreate.Emitter.class.getSimpleName()));
      }
    }
).test().assertEmpty();
  }
}
