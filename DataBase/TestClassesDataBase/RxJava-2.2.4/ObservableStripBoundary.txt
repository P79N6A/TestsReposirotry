static final class ObservableStripBoundary<T> extends Observable<T> implements ObservableTransformer<T,T> {
  final Observable<T> source;
  ObservableStripBoundary(  Observable<T> source){
    this.source=source;
  }
  @Override public Observable<T> apply(  Observable<T> upstream){
    return new ObservableStripBoundary<T>(upstream);
  }
  @Override protected void subscribeActual(  Observer<? super T> observer){
    source.subscribe(new StripBoundaryObserver<T>(observer));
  }
static final class StripBoundaryObserver<T> implements Observer<T>, QueueDisposable<T> {
    final Observer<? super T> downstream;
    Disposable upstream;
    QueueDisposable<T> qd;
    StripBoundaryObserver(    Observer<? super T> downstream){
      this.downstream=downstream;
    }
    @SuppressWarnings("unchecked") @Override public void onSubscribe(    Disposable d){
      this.upstream=d;
      if (d instanceof QueueDisposable) {
        qd=(QueueDisposable<T>)d;
      }
      downstream.onSubscribe(this);
    }
    @Override public void onNext(    T t){
      downstream.onNext(t);
    }
    @Override public void onError(    Throwable throwable){
      downstream.onError(throwable);
    }
    @Override public void onComplete(){
      downstream.onComplete();
    }
    @Override public int requestFusion(    int mode){
      QueueDisposable<T> fs=qd;
      if (fs != null) {
        return fs.requestFusion(mode & ~BOUNDARY);
      }
      return NONE;
    }
    @Override public boolean offer(    T value){
      throw new UnsupportedOperationException("Should not be called");
    }
    @Override public boolean offer(    T v1,    T v2){
      throw new UnsupportedOperationException("Should not be called");
    }
    @Override public T poll() throws Exception {
      return qd.poll();
    }
    @Override public void clear(){
      qd.clear();
    }
    @Override public boolean isEmpty(){
      return qd.isEmpty();
    }
    @Override public void dispose(){
      upstream.dispose();
    }
    @Override public boolean isDisposed(){
      return upstream.isDisposed();
    }
  }
}
