public class FlowableCountTest {
  @Test public void simpleFlowable(){
    Assert.assertEquals(0,Flowable.empty().count().toFlowable().blockingLast().intValue());
    Assert.assertEquals(1,Flowable.just(1).count().toFlowable().blockingLast().intValue());
    Assert.assertEquals(10,Flowable.range(1,10).count().toFlowable().blockingLast().intValue());
  }
  @Test public void simple(){
    Assert.assertEquals(0,Flowable.empty().count().blockingGet().intValue());
    Assert.assertEquals(1,Flowable.just(1).count().blockingGet().intValue());
    Assert.assertEquals(10,Flowable.range(1,10).count().blockingGet().intValue());
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Flowable.just(1).count());
    TestHelper.checkDisposed(Flowable.just(1).count().toFlowable());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Long>>(){
      @Override public Flowable<Long> apply(      Flowable<Object> f) throws Exception {
        return f.count().toFlowable();
      }
    }
);
    TestHelper.checkDoubleOnSubscribeFlowableToSingle(new Function<Flowable<Object>,SingleSource<Long>>(){
      @Override public SingleSource<Long> apply(      Flowable<Object> f) throws Exception {
        return f.count();
      }
    }
);
  }
}
