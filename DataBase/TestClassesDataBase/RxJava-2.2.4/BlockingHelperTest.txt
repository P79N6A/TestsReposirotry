public class BlockingHelperTest {
  @Test public void emptyEnum(){
    TestHelper.checkUtilityClass(BlockingHelper.class);
  }
  @Test public void interrupted(){
    CountDownLatch cdl=new CountDownLatch(1);
    Disposable d=Disposables.empty();
    Thread.currentThread().interrupt();
    try {
      BlockingHelper.awaitForComplete(cdl,d);
    }
 catch (    IllegalStateException ex) {
    }
    assert d.isDisposed() && Thread.interrupted();
  }
  @Test public void unblock(){
    final CountDownLatch cdl=new CountDownLatch(1);
    Disposable d=Disposables.empty();
    Schedulers.computation().scheduleDirect(new Runnable(){
      @Override public void run(){
        cdl.countDown();
      }
    }
,100,TimeUnit.MILLISECONDS);
    BlockingHelper.awaitForComplete(cdl,d);
    assert !d.isDisposed();
  }
}
