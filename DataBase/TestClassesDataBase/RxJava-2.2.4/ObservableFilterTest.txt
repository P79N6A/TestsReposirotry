public class ObservableFilterTest {
  @Test public void testFilter(){
    Observable<String> w=Observable.just("one","two","three");
    Observable<String> observable=w.filter(new Predicate<String>(){
      @Override public boolean test(      String t1){
        return t1.equals("two");
      }
    }
);
    Observer<String> observer=TestHelper.mockObserver();
    observable.subscribe(observer);
    verify(observer,Mockito.never()).onNext("one");
    verify(observer,times(1)).onNext("two");
    verify(observer,Mockito.never()).onNext("three");
    verify(observer,Mockito.never()).onError(any(Throwable.class));
    verify(observer,times(1)).onComplete();
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.range(1,5).filter(Functions.alwaysTrue()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
      @Override public ObservableSource<Object> apply(      Observable<Object> o) throws Exception {
        return o.filter(Functions.alwaysTrue());
      }
    }
);
  }
  @Test public void fusedSync(){
    TestObserver<Integer> to=ObserverFusion.newTest(QueueFuseable.ANY);
    Observable.range(1,5).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        return v % 2 == 0;
      }
    }
).subscribe(to);
    ObserverFusion.assertFusion(to,QueueFuseable.SYNC).assertResult(2,4);
  }
  @Test public void fusedAsync(){
    TestObserver<Integer> to=ObserverFusion.newTest(QueueFuseable.ANY);
    UnicastSubject<Integer> us=UnicastSubject.create();
    us.filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        return v % 2 == 0;
      }
    }
).subscribe(to);
    TestHelper.emit(us,1,2,3,4,5);
    ObserverFusion.assertFusion(to,QueueFuseable.ASYNC).assertResult(2,4);
  }
  @Test public void fusedReject(){
    TestObserver<Integer> to=ObserverFusion.newTest(QueueFuseable.ANY | QueueFuseable.BOUNDARY);
    Observable.range(1,5).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        return v % 2 == 0;
      }
    }
).subscribe(to);
    ObserverFusion.assertFusion(to,QueueFuseable.NONE).assertResult(2,4);
  }
  @Test public void filterThrows(){
    Observable.range(1,5).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
}
