public class ObjectHelperTest {
  @Test public void utilityClass(){
    TestHelper.checkUtilityClass(ObjectHelper.class);
  }
  @Test public void hashCodeOf(){
    assertEquals(0,ObjectHelper.hashCode(null));
    assertEquals(((Integer)1).hashCode(),ObjectHelper.hashCode(1));
  }
  @Test public void verifyPositiveInt() throws Exception {
    assertEquals(1,ObjectHelper.verifyPositive(1,"param"));
  }
  @Test public void verifyPositiveLong() throws Exception {
    assertEquals(1L,ObjectHelper.verifyPositive(1L,"param"));
  }
  @Test(expected=IllegalArgumentException.class) public void verifyPositiveIntFail() throws Exception {
    assertEquals(-1,ObjectHelper.verifyPositive(-1,"param"));
  }
  @Test(expected=IllegalArgumentException.class) public void verifyPositiveLongFail() throws Exception {
    assertEquals(-1L,ObjectHelper.verifyPositive(-1L,"param"));
  }
  @Test public void compare(){
    assertEquals(-1,ObjectHelper.compare(0,2));
    assertEquals(0,ObjectHelper.compare(0,0));
    assertEquals(1,ObjectHelper.compare(2,0));
  }
  @Test public void compareLong(){
    assertEquals(-1,ObjectHelper.compare(0L,2L));
    assertEquals(0,ObjectHelper.compare(0L,0L));
    assertEquals(1,ObjectHelper.compare(2L,0L));
  }
  @SuppressWarnings("deprecation") @Test(expected=InternalError.class) public void requireNonNullPrimitive(){
    ObjectHelper.requireNonNull(0,"value");
  }
}
