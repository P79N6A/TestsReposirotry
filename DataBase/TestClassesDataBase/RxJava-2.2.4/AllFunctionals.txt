@SuppressWarnings("rawtypes") static final class AllFunctionals implements BiFunction, BiConsumer, Predicate, BiPredicate, BooleanSupplier, Function3, Function4, Function5, Function6, Function7, Function8, Function9, FlowableOnSubscribe, ObservableOnSubscribe, SingleOnSubscribe, MaybeOnSubscribe, CompletableOnSubscribe, FlowableTransformer, ObservableTransformer, SingleTransformer, MaybeTransformer, CompletableTransformer, Subscriber, FlowableSubscriber, Observer, SingleObserver, MaybeObserver, CompletableObserver, FlowableOperator, ObservableOperator, SingleOperator, MaybeOperator, CompletableOperator, Comparator, ParallelTransformer {
  @Override public ParallelFlowable apply(  ParallelFlowable upstream){
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4,  Object t5,  Object t6,  Object t7,  Object t8,  Object t9) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4,  Object t5,  Object t6,  Object t7,  Object t8) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4,  Object t5,  Object t6,  Object t7) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4,  Object t5,  Object t6) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4,  Object t5) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3,  Object t4) throws Exception {
    return null;
  }
  @Override public Object apply(  Object t1,  Object t2,  Object t3) throws Exception {
    return null;
  }
  @Override public void accept(  Object t1,  Object t2) throws Exception {
  }
  @Override public Object apply(  Object t1,  Object t2) throws Exception {
    return null;
  }
  @Override public void subscribe(  CompletableEmitter e) throws Exception {
  }
  @Override public void subscribe(  MaybeEmitter e) throws Exception {
  }
  @Override public void subscribe(  SingleEmitter e) throws Exception {
  }
  @Override public void subscribe(  ObservableEmitter e) throws Exception {
  }
  @Override public void subscribe(  FlowableEmitter e) throws Exception {
  }
  @Override public boolean test(  Object t1,  Object t2) throws Exception {
    return false;
  }
  @Override public boolean test(  Object t) throws Exception {
    return false;
  }
  @Override public void onSuccess(  Object t){
  }
  @Override public void onSubscribe(  Disposable d){
  }
  @Override public void onSubscribe(  Subscription s){
    s.request(Long.MAX_VALUE);
  }
  @Override public void onNext(  Object t){
  }
  @Override public void onError(  Throwable t){
  }
  @Override public void onComplete(){
  }
  @Override public CompletableSource apply(  Completable upstream){
    return upstream;
  }
  @Override public MaybeSource apply(  Maybe upstream){
    return upstream;
  }
  @Override public SingleSource apply(  Single upstream){
    return upstream;
  }
  @Override public ObservableSource apply(  Observable upstream){
    return upstream;
  }
  @Override public Publisher apply(  Flowable upstream){
    return upstream;
  }
  @Override public CompletableObserver apply(  CompletableObserver observer) throws Exception {
    return observer;
  }
  @Override public MaybeObserver apply(  MaybeObserver observer) throws Exception {
    return observer;
  }
  @Override public SingleObserver apply(  SingleObserver observer) throws Exception {
    return observer;
  }
  @Override public Observer apply(  Observer observer) throws Exception {
    return observer;
  }
  @Override public Subscriber apply(  Subscriber observer) throws Exception {
    return observer;
  }
  @Override public boolean getAsBoolean() throws Exception {
    return false;
  }
  @Override public int compare(  Object o1,  Object o2){
    return 0;
  }
}
