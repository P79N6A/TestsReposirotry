public class MaybeSwitchIfEmptyTest {
  @Test public void nonEmpty(){
    Maybe.just(1).switchIfEmpty(Maybe.just(2)).test().assertResult(1);
  }
  @Test public void empty(){
    Maybe.<Integer>empty().switchIfEmpty(Maybe.just(2)).test().assertResult(2);
  }
  @Test public void defaultIfEmptyNonEmpty(){
    Maybe.just(1).defaultIfEmpty(2).test().assertResult(1);
  }
  @Test public void defaultIfEmptyEmpty(){
    Maybe.<Integer>empty().defaultIfEmpty(2).test().assertResult(2);
  }
  @Test public void error(){
    Maybe.<Integer>error(new TestException()).switchIfEmpty(Maybe.just(2)).test().assertFailure(TestException.class);
  }
  @Test public void errorOther(){
    Maybe.empty().switchIfEmpty(Maybe.<Integer>error(new TestException())).test().assertFailure(TestException.class);
  }
  @Test public void emptyOtherToo(){
    Maybe.empty().switchIfEmpty(Maybe.empty()).test().assertResult();
  }
  @Test public void dispose(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestObserver<Integer> to=pp.singleElement().switchIfEmpty(Maybe.just(2)).test();
    assertTrue(pp.hasSubscribers());
    to.cancel();
    assertFalse(pp.hasSubscribers());
  }
  @Test public void isDisposed(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestHelper.checkDisposed(pp.singleElement().switchIfEmpty(Maybe.just(2)));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>,Maybe<Integer>>(){
      @Override public Maybe<Integer> apply(      Maybe<Integer> f) throws Exception {
        return f.switchIfEmpty(Maybe.just(2));
      }
    }
);
  }
  @Test public void emptyCancelRace(){
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      final PublishProcessor<Integer> pp=PublishProcessor.create();
      final TestObserver<Integer> to=pp.singleElement().switchIfEmpty(Maybe.just(2)).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp.onComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          to.cancel();
        }
      }
;
      TestHelper.race(r1,r2);
    }
  }
}
