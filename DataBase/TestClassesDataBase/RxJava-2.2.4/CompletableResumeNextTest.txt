public class CompletableResumeNextTest {
  @Test public void resumeWithError(){
    Completable.error(new TestException()).onErrorResumeNext(Functions.justFunction(Completable.error(new TestException("second")))).test().assertFailureAndMessage(TestException.class,"second");
  }
  @Test public void disposeInMain(){
    TestHelper.checkDisposedCompletable(new Function<Completable,CompletableSource>(){
      @Override public CompletableSource apply(      Completable c) throws Exception {
        return c.onErrorResumeNext(Functions.justFunction(Completable.complete()));
      }
    }
);
  }
  @Test public void disposeInResume(){
    TestHelper.checkDisposedCompletable(new Function<Completable,CompletableSource>(){
      @Override public CompletableSource apply(      Completable c) throws Exception {
        return Completable.error(new TestException()).onErrorResumeNext(Functions.justFunction(c));
      }
    }
);
  }
  @Test public void disposed(){
    TestHelper.checkDisposed(Completable.error(new TestException()).onErrorResumeNext(Functions.justFunction(Completable.never())));
  }
}
