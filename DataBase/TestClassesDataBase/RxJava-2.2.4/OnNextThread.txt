/** 
 * A thread that will pass data to onNext.
 */
public static class OnNextThread implements Runnable {
  private final CountDownLatch latch;
  private final Observer<String> observer;
  private final int numStringsToSend;
  final AtomicInteger produced;
  private final CountDownLatch running;
  OnNextThread(  Observer<String> observer,  int numStringsToSend,  CountDownLatch latch,  CountDownLatch running){
    this(observer,numStringsToSend,new AtomicInteger(),latch,running);
  }
  OnNextThread(  Observer<String> observer,  int numStringsToSend,  AtomicInteger produced){
    this(observer,numStringsToSend,produced,null,null);
  }
  OnNextThread(  Observer<String> observer,  int numStringsToSend,  AtomicInteger produced,  CountDownLatch latch,  CountDownLatch running){
    this.observer=observer;
    this.numStringsToSend=numStringsToSend;
    this.produced=produced;
    this.latch=latch;
    this.running=running;
  }
  OnNextThread(  Observer<String> observer,  int numStringsToSend){
    this(observer,numStringsToSend,new AtomicInteger());
  }
  @Override public void run(){
    if (running != null) {
      running.countDown();
    }
    for (int i=0; i < numStringsToSend; i++) {
      observer.onNext(Thread.currentThread().getId() + "-" + i);
      if (latch != null) {
        latch.countDown();
      }
      produced.incrementAndGet();
    }
  }
}
