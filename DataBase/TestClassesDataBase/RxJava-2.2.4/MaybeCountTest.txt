public class MaybeCountTest {
  @Test public void one(){
    Maybe.just(1).count().test().assertResult(1L);
  }
  @Test public void empty(){
    Maybe.empty().count().test().assertResult(0L);
  }
  @Test public void error(){
    Maybe.error(new TestException()).count().test().assertFailure(TestException.class);
  }
  @Test public void dispose(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestObserver<Long> to=pp.singleElement().count().test();
    assertTrue(pp.hasSubscribers());
    to.cancel();
    assertFalse(pp.hasSubscribers());
  }
  @Test public void isDisposed(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestHelper.checkDisposed(pp.singleElement().count());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybeToSingle(new Function<Maybe<Object>,SingleSource<Long>>(){
      @Override public SingleSource<Long> apply(      Maybe<Object> f) throws Exception {
        return f.count();
      }
    }
);
  }
  @SuppressWarnings("unchecked") @Test public void hasSource(){
    assertSame(Maybe.empty(),((HasUpstreamMaybeSource<Object>)(Maybe.empty().count())).source());
  }
}
