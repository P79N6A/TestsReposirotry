public class ObservableScalarXMapTest {
  @Test public void utilityClass(){
    TestHelper.checkUtilityClass(ObservableScalarXMap.class);
  }
static final class CallablePublisher implements ObservableSource<Integer>, Callable<Integer> {
    @Override public void subscribe(    Observer<? super Integer> observer){
      EmptyDisposable.error(new TestException(),observer);
    }
    @Override public Integer call() throws Exception {
      throw new TestException();
    }
  }
static final class EmptyCallablePublisher implements ObservableSource<Integer>, Callable<Integer> {
    @Override public void subscribe(    Observer<? super Integer> observer){
      EmptyDisposable.complete(observer);
    }
    @Override public Integer call() throws Exception {
      return null;
    }
  }
static final class OneCallablePublisher implements ObservableSource<Integer>, Callable<Integer> {
    @Override public void subscribe(    Observer<? super Integer> observer){
      ScalarDisposable<Integer> sd=new ScalarDisposable<Integer>(observer,1);
      observer.onSubscribe(sd);
      sd.run();
    }
    @Override public Integer call() throws Exception {
      return 1;
    }
  }
  @Test public void tryScalarXMap(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new CallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        return Observable.just(1);
      }
    }
));
    to.assertFailure(TestException.class);
  }
  @Test public void emptyXMap(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new EmptyCallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        return Observable.just(1);
      }
    }
));
    to.assertResult();
  }
  @Test public void mapperCrashes(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        throw new TestException();
      }
    }
));
    to.assertFailure(TestException.class);
  }
  @Test public void mapperToJust(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        return Observable.just(1);
      }
    }
));
    to.assertResult(1);
  }
  @Test public void mapperToEmpty(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        return Observable.empty();
      }
    }
));
    to.assertResult();
  }
  @Test public void mapperToCrashingCallable(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(),to,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer f) throws Exception {
        return new CallablePublisher();
      }
    }
));
    to.assertFailure(TestException.class);
  }
  @Test public void scalarMapToEmpty(){
    ObservableScalarXMap.scalarXMap(1,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer v) throws Exception {
        return Observable.empty();
      }
    }
).test().assertResult();
  }
  @Test public void scalarMapToCrashingCallable(){
    ObservableScalarXMap.scalarXMap(1,new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer v) throws Exception {
        return new CallablePublisher();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void scalarDisposableStateCheck(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    ScalarDisposable<Integer> sd=new ScalarDisposable<Integer>(to,1);
    to.onSubscribe(sd);
    assertFalse(sd.isDisposed());
    assertTrue(sd.isEmpty());
    sd.run();
    assertTrue(sd.isDisposed());
    assertTrue(sd.isEmpty());
    to.assertResult(1);
    try {
      sd.offer(1);
      fail("Should have thrown");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      sd.offer(1,2);
      fail("Should have thrown");
    }
 catch (    UnsupportedOperationException ex) {
    }
  }
  @Test public void scalarDisposableRunDisposeRace(){
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      TestObserver<Integer> to=new TestObserver<Integer>();
      final ScalarDisposable<Integer> sd=new ScalarDisposable<Integer>(to,1);
      to.onSubscribe(sd);
      Runnable r1=new Runnable(){
        @Override public void run(){
          sd.run();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          sd.dispose();
        }
      }
;
      TestHelper.race(r1,r2);
    }
  }
}
