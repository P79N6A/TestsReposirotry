public static class CylonDetectorObservable<T> {
  protected Publisher<T> onSubscribe;
  public static <T>CylonDetectorObservable<T> create(  Publisher<T> onSubscribe){
    return new CylonDetectorObservable<T>(onSubscribe);
  }
  protected CylonDetectorObservable(  Publisher<T> onSubscribe){
    this.onSubscribe=onSubscribe;
  }
  public void subscribe(  Subscriber<T> subscriber){
    onSubscribe.subscribe(subscriber);
  }
  public <R>CylonDetectorObservable<R> lift(  FlowableOperator<? extends R,? super T> operator){
    return x(new RobotConversionFunc<T,R>(operator));
  }
  public <R,O>O x(  Function<Publisher<T>,O> operator){
    try {
      return operator.apply(onSubscribe);
    }
 catch (    Throwable ex) {
      throw ExceptionHelper.wrapOrThrow(ex);
    }
  }
  public <R>CylonDetectorObservable<? extends R> compose(  Function<CylonDetectorObservable<? super T>,CylonDetectorObservable<? extends R>> transformer){
    try {
      return transformer.apply(this);
    }
 catch (    Throwable ex) {
      throw ExceptionHelper.wrapOrThrow(ex);
    }
  }
  public final CylonDetectorObservable<T> beep(  Predicate<? super T> predicate){
    return new CylonDetectorObservable<T>(new FlowableFilter<T>(Flowable.fromPublisher(onSubscribe),predicate));
  }
  public final <R>CylonDetectorObservable<R> boop(  Function<? super T,? extends R> func){
    return new CylonDetectorObservable<R>(new FlowableMap<T,R>(Flowable.fromPublisher(onSubscribe),func));
  }
  public CylonDetectorObservable<String> DESTROY(){
    return boop(new Function<T,String>(){
      @Override public String apply(      T t){
        Object cylon=((Jail)t).cylon;
        throwOutTheAirlock(cylon);
        if (t instanceof Jail) {
          String name=cylon.toString();
          return "Cylon '" + name + "' has been destroyed";
        }
 else {
          return "Cylon 'anonymous' has been destroyed";
        }
      }
    }
);
  }
  private static void throwOutTheAirlock(  Object cylon){
  }
}
