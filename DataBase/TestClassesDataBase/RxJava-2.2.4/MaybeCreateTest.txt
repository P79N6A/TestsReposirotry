public class MaybeCreateTest {
  @Test(expected=NullPointerException.class) public void nullArgument(){
    Maybe.create(null);
  }
  @Test public void basic(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d=Disposables.empty();
      Maybe.<Integer>create(new MaybeOnSubscribe<Integer>(){
        @Override public void subscribe(        MaybeEmitter<Integer> e) throws Exception {
          e.setDisposable(d);
          e.onSuccess(1);
          e.onError(new TestException());
          e.onSuccess(2);
          e.onError(new TestException());
        }
      }
).test().assertResult(1);
      assertTrue(d.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void basicWithCancellable(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d1=Disposables.empty();
      final Disposable d2=Disposables.empty();
      Maybe.<Integer>create(new MaybeOnSubscribe<Integer>(){
        @Override public void subscribe(        MaybeEmitter<Integer> e) throws Exception {
          e.setDisposable(d1);
          e.setCancellable(new Cancellable(){
            @Override public void cancel() throws Exception {
              d2.dispose();
            }
          }
);
          e.onSuccess(1);
          e.onError(new TestException());
          e.onSuccess(2);
          e.onError(new TestException());
        }
      }
).test().assertResult(1);
      assertTrue(d1.isDisposed());
      assertTrue(d2.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void basicWithError(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d=Disposables.empty();
      Maybe.<Integer>create(new MaybeOnSubscribe<Integer>(){
        @Override public void subscribe(        MaybeEmitter<Integer> e) throws Exception {
          e.setDisposable(d);
          e.onError(new TestException());
          e.onSuccess(2);
          e.onError(new TestException());
        }
      }
).test().assertFailure(TestException.class);
      assertTrue(d.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test public void basicWithCompletion(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable d=Disposables.empty();
      Maybe.<Integer>create(new MaybeOnSubscribe<Integer>(){
        @Override public void subscribe(        MaybeEmitter<Integer> e) throws Exception {
          e.setDisposable(d);
          e.onComplete();
          e.onSuccess(2);
          e.onError(new TestException());
        }
      }
).test().assertComplete();
      assertTrue(d.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
  @Test(expected=IllegalArgumentException.class) public void unsafeCreate(){
    Maybe.unsafeCreate(Maybe.just(1));
  }
}
