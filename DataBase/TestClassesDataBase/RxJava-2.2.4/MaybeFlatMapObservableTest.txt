public class MaybeFlatMapObservableTest {
  @Test public void cancelMain(){
    MaybeSubject<Integer> ms=MaybeSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ms.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ms.hasObservers());
    assertFalse(ps.hasObservers());
    to.cancel();
    assertFalse(ms.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void cancelOther(){
    MaybeSubject<Integer> ms=MaybeSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ms.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ms.hasObservers());
    assertFalse(ps.hasObservers());
    ms.onSuccess(1);
    assertFalse(ms.hasObservers());
    assertTrue(ps.hasObservers());
    to.cancel();
    assertFalse(ms.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void mapperCrash(){
    Maybe.just(1).flatMapObservable(new Function<Integer,ObservableSource<? extends Object>>(){
      @Override public ObservableSource<? extends Object> apply(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void isDisposed(){
    TestHelper.checkDisposed(Maybe.never().flatMapObservable(Functions.justFunction(Observable.never())));
  }
}
