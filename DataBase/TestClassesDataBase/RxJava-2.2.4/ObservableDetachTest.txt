public class ObservableDetachTest {
  Object o;
  @Test public void just() throws Exception {
    o=new Object();
    WeakReference<Object> wr=new WeakReference<Object>(o);
    TestObserver<Object> to=new TestObserver<Object>();
    Observable.just(o).count().toObservable().onTerminateDetach().subscribe(to);
    to.assertValue(1L);
    to.assertComplete();
    to.assertNoErrors();
    o=null;
    System.gc();
    Thread.sleep(200);
    Assert.assertNull("Object retained!",wr.get());
  }
  @Test public void error(){
    TestObserver<Object> to=new TestObserver<Object>();
    Observable.error(new TestException()).onTerminateDetach().subscribe(to);
    to.assertNoValues();
    to.assertError(TestException.class);
    to.assertNotComplete();
  }
  @Test public void empty(){
    TestObserver<Object> to=new TestObserver<Object>();
    Observable.empty().onTerminateDetach().subscribe(to);
    to.assertNoValues();
    to.assertNoErrors();
    to.assertComplete();
  }
  @Test public void range(){
    TestObserver<Object> to=new TestObserver<Object>();
    Observable.range(1,1000).onTerminateDetach().subscribe(to);
    to.assertValueCount(1000);
    to.assertNoErrors();
    to.assertComplete();
  }
  @Test @Ignore("Observable doesn't do backpressure") public void backpressured() throws Exception {
  }
  @Test public void justUnsubscribed() throws Exception {
    o=new Object();
    WeakReference<Object> wr=new WeakReference<Object>(o);
    TestObserver<Long> to=Observable.just(o).count().toObservable().onTerminateDetach().test();
    o=null;
    to.cancel();
    System.gc();
    Thread.sleep(200);
    Assert.assertNull("Object retained!",wr.get());
  }
  @Test @Ignore("Observable doesn't do backpressure") public void deferredUpstreamProducer(){
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.never().onTerminateDetach());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
      @Override public ObservableSource<Object> apply(      Observable<Object> o) throws Exception {
        return o.onTerminateDetach();
      }
    }
);
  }
}
