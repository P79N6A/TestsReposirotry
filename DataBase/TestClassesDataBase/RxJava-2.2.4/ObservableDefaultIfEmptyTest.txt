public class ObservableDefaultIfEmptyTest {
  @Test public void testDefaultIfEmpty(){
    Observable<Integer> source=Observable.just(1,2,3);
    Observable<Integer> observable=source.defaultIfEmpty(10);
    Observer<Integer> observer=TestHelper.mockObserver();
    observable.subscribe(observer);
    verify(observer,never()).onNext(10);
    verify(observer).onNext(1);
    verify(observer).onNext(2);
    verify(observer).onNext(3);
    verify(observer).onComplete();
    verify(observer,never()).onError(any(Throwable.class));
  }
  @Test public void testDefaultIfEmptyWithEmpty(){
    Observable<Integer> source=Observable.empty();
    Observable<Integer> observable=source.defaultIfEmpty(10);
    Observer<Integer> observer=TestHelper.mockObserver();
    observable.subscribe(observer);
    verify(observer).onNext(10);
    verify(observer).onComplete();
    verify(observer,never()).onError(any(Throwable.class));
  }
  @Test @Ignore("Subscribers should not throw") public void testEmptyButClientThrows(){
    final Observer<Integer> o=TestHelper.mockObserver();
    Observable.<Integer>empty().defaultIfEmpty(1).subscribe(new DefaultObserver<Integer>(){
      @Override public void onNext(      Integer t){
        throw new TestException();
      }
      @Override public void onError(      Throwable e){
        o.onError(e);
      }
      @Override public void onComplete(){
        o.onComplete();
      }
    }
);
    verify(o).onError(any(TestException.class));
    verify(o,never()).onNext(any(Integer.class));
    verify(o,never()).onComplete();
  }
}
