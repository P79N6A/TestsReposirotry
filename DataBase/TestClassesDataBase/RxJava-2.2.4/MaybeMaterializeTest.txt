public class MaybeMaterializeTest {
  @Test @SuppressWarnings("unchecked") public void success(){
    Maybe.just(1).materialize().test().assertResult(Notification.createOnNext(1));
  }
  @Test @SuppressWarnings("unchecked") public void error(){
    TestException ex=new TestException();
    Maybe.error(ex).materialize().test().assertResult(Notification.createOnError(ex));
  }
  @Test @SuppressWarnings("unchecked") public void empty(){
    Maybe.empty().materialize().test().assertResult(Notification.createOnComplete());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybeToSingle(new Function<Maybe<Object>,SingleSource<Notification<Object>>>(){
      @Override public SingleSource<Notification<Object>> apply(      Maybe<Object> v) throws Exception {
        return v.materialize();
      }
    }
);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(MaybeSubject.create().materialize());
  }
}
