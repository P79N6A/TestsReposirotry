private final class SlowInner extends Worker {
  private final Scheduler.Worker actualInner;
  private SlowInner(  Worker actual){
    this.actualInner=actual;
  }
  @Override public void dispose(){
    actualInner.dispose();
  }
  @Override public boolean isDisposed(){
    return actualInner.isDisposed();
  }
  @NonNull @Override public Disposable schedule(  @NonNull final Runnable action){
    return actualInner.schedule(action,delay,unit);
  }
  @NonNull @Override public Disposable schedule(  @NonNull final Runnable action,  final long delayTime,  @NonNull final TimeUnit delayUnit){
    TimeUnit common=delayUnit.compareTo(unit) < 0 ? delayUnit : unit;
    long t=common.convert(delayTime,delayUnit) + common.convert(delay,unit);
    return actualInner.schedule(action,t,common);
  }
}
