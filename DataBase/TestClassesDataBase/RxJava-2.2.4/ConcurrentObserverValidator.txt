/** 
 * Used to determine if onNext is being invoked concurrently.
 * @param < T >
 */
private static class ConcurrentObserverValidator<T> extends DefaultSubscriber<T> {
  final AtomicInteger concurrentCounter=new AtomicInteger();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  final CountDownLatch completed=new CountDownLatch(1);
  @Override public void onComplete(){
    completed.countDown();
  }
  @Override public void onError(  Throwable e){
    error.set(e);
    completed.countDown();
  }
  @Override public void onNext(  T args){
    int count=concurrentCounter.incrementAndGet();
    System.out.println("ConcurrentObserverValidator.onNext: " + args);
    if (count > 1) {
      onError(new RuntimeException("we should not have concurrent execution of onNext"));
    }
    try {
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
      }
    }
  finally {
      concurrentCounter.decrementAndGet();
    }
  }
}
