public class MaybeFilterSingleTest {
  @Test public void error(){
    Single.error(new TestException()).filter(Functions.alwaysTrue()).test().assertFailure(TestException.class);
  }
  @Test public void dispose(){
    TestHelper.checkDisposed(PublishSubject.create().singleOrError().filter(Functions.alwaysTrue()));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeSingleToMaybe(new Function<Single<Object>,MaybeSource<Object>>(){
      @Override public MaybeSource<Object> apply(      Single<Object> v) throws Exception {
        return v.filter(Functions.alwaysTrue());
      }
    }
);
  }
}
