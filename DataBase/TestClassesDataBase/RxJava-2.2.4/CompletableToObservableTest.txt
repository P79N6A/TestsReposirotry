public class CompletableToObservableTest {
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeCompletableToObservable(new Function<Completable,Observable<?>>(){
      @Override public Observable<?> apply(      Completable c) throws Exception {
        return c.toObservable();
      }
    }
);
  }
  @Test public void fusion() throws Exception {
    TestObserver<Void> to=new TestObserver<Void>();
    ObserverCompletableObserver co=new ObserverCompletableObserver(to);
    Disposable d=Disposables.empty();
    co.onSubscribe(d);
    assertEquals(QueueFuseable.NONE,co.requestFusion(QueueFuseable.SYNC));
    assertEquals(QueueFuseable.ASYNC,co.requestFusion(QueueFuseable.ASYNC));
    assertEquals(QueueFuseable.ASYNC,co.requestFusion(QueueFuseable.ANY));
    assertTrue(co.isEmpty());
    assertNull(co.poll());
    co.clear();
    assertFalse(co.isDisposed());
    co.dispose();
    assertTrue(d.isDisposed());
    assertTrue(co.isDisposed());
    TestHelper.assertNoOffer(co);
  }
}
