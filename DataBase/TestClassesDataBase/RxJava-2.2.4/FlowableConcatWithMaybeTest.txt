public class FlowableConcatWithMaybeTest {
  @Test public void normalEmpty(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertResult(1,2,3,4,5,100);
  }
  @Test public void normalNonEmpty(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Maybe.just(100)).subscribe(ts);
    ts.assertResult(1,2,3,4,5,100);
  }
  @Test public void backpressure(){
    Flowable.range(1,5).concatWith(Maybe.just(100)).test(0).assertEmpty().requestMore(3).assertValues(1,2,3).requestMore(2).assertValues(1,2,3,4,5).requestMore(1).assertResult(1,2,3,4,5,100);
  }
  @Test public void mainError(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.<Integer>error(new TestException()).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertFailure(TestException.class);
  }
  @Test public void otherError(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Maybe.<Integer>error(new TestException())).subscribe(ts);
    ts.assertFailure(TestException.class,1,2,3,4,5);
  }
  @Test public void takeMain(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Maybe.<Integer>fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).take(3).subscribe(ts);
    ts.assertResult(1,2,3);
  }
  @Test public void cancelOther(){
    MaybeSubject<Object> other=MaybeSubject.create();
    TestSubscriber<Object> ts=Flowable.empty().concatWith(other).test();
    assertTrue(other.hasObservers());
    ts.cancel();
    assertFalse(other.hasObservers());
  }
}
