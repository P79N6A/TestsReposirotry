public class MaybeHideTest {
  @Test public void normal(){
    Maybe.just(1).hide().test().assertResult(1);
  }
  @Test public void empty(){
    Maybe.empty().hide().test().assertResult();
  }
  @Test public void error(){
    Maybe.error(new TestException()).hide().test().assertFailure(TestException.class);
  }
  @Test public void hidden(){
    assertTrue(Maybe.just(1) instanceof ScalarCallable);
    assertFalse(Maybe.just(1).hide() instanceof ScalarCallable);
  }
  @Test public void dispose(){
    TestHelper.checkDisposedMaybe(new Function<Maybe<Object>,MaybeSource<Object>>(){
      @Override public MaybeSource<Object> apply(      Maybe<Object> m) throws Exception {
        return m.hide();
      }
    }
);
  }
  @Test public void isDisposed(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestHelper.checkDisposed(pp.singleElement().hide());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Object>,Maybe<Object>>(){
      @Override public Maybe<Object> apply(      Maybe<Object> f) throws Exception {
        return f.hide();
      }
    }
);
  }
}
