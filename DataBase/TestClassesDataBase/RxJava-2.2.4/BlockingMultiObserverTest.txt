public class BlockingMultiObserverTest {
  @Test public void dispose(){
    BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    bmo.dispose();
    Disposable d=Disposables.empty();
    bmo.onSubscribe(d);
  }
  @Test public void blockingGetDefault(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Schedulers.single().scheduleDirect(new Runnable(){
      @Override public void run(){
        bmo.onSuccess(1);
      }
    }
,100,TimeUnit.MILLISECONDS);
    assertEquals(1,bmo.blockingGet(0).intValue());
  }
  @Test public void blockingAwait(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Schedulers.single().scheduleDirect(new Runnable(){
      @Override public void run(){
        bmo.onSuccess(1);
      }
    }
,100,TimeUnit.MILLISECONDS);
    assertTrue(bmo.blockingAwait(1,TimeUnit.MINUTES));
  }
  @Test public void blockingGetDefaultInterrupt(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Thread.currentThread().interrupt();
    try {
      bmo.blockingGet(0);
      fail("Should have thrown");
    }
 catch (    RuntimeException ex) {
      assertTrue(ex.getCause() instanceof InterruptedException);
    }
 finally {
      Thread.interrupted();
    }
  }
  @Test public void blockingGetErrorInterrupt(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Thread.currentThread().interrupt();
    try {
      assertTrue(bmo.blockingGetError() instanceof InterruptedException);
    }
  finally {
      Thread.interrupted();
    }
  }
  @Test public void blockingGetErrorTimeoutInterrupt(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Thread.currentThread().interrupt();
    try {
      bmo.blockingGetError(1,TimeUnit.MINUTES);
      fail("Should have thrown");
    }
 catch (    RuntimeException ex) {
      assertTrue(ex.getCause() instanceof InterruptedException);
    }
 finally {
      Thread.interrupted();
    }
  }
  @Test public void blockingGetErrorDelayed(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Schedulers.single().scheduleDirect(new Runnable(){
      @Override public void run(){
        bmo.onError(new TestException());
      }
    }
,100,TimeUnit.MILLISECONDS);
    assertTrue(bmo.blockingGetError() instanceof TestException);
  }
  @Test public void blockingGetErrorTimeoutDelayed(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    Schedulers.single().scheduleDirect(new Runnable(){
      @Override public void run(){
        bmo.onError(new TestException());
      }
    }
,100,TimeUnit.MILLISECONDS);
    assertTrue(bmo.blockingGetError(1,TimeUnit.MINUTES) instanceof TestException);
  }
  @Test public void blockingGetErrorTimedOut(){
    final BlockingMultiObserver<Integer> bmo=new BlockingMultiObserver<Integer>();
    try {
      assertNull(bmo.blockingGetError(1,TimeUnit.NANOSECONDS));
      fail("Should have thrown");
    }
 catch (    RuntimeException expected) {
      assertEquals(TimeoutException.class,expected.getCause().getClass());
      assertEquals(timeoutMessage(1,TimeUnit.NANOSECONDS),expected.getCause().getMessage());
    }
  }
}
