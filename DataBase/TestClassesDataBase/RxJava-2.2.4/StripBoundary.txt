static final class StripBoundary<T> extends Flowable<T> implements FlowableTransformer<T,T> {
  final Flowable<T> source;
  StripBoundary(  Flowable<T> source){
    this.source=source;
  }
  @Override public Publisher<T> apply(  Flowable<T> upstream){
    return new StripBoundary<T>(upstream);
  }
  @Override protected void subscribeActual(  Subscriber<? super T> s){
    source.subscribe(new StripBoundarySubscriber<T>(s));
  }
static final class StripBoundarySubscriber<T> extends BasicFuseableSubscriber<T,T> {
    StripBoundarySubscriber(    Subscriber<? super T> downstream){
      super(downstream);
    }
    @Override public void onNext(    T t){
      downstream.onNext(t);
    }
    @Override public int requestFusion(    int mode){
      QueueSubscription<T> fs=qs;
      if (fs != null) {
        int m=fs.requestFusion(mode & ~QueueFuseable.BOUNDARY);
        this.sourceMode=m;
        return m;
      }
      return QueueFuseable.NONE;
    }
    @Override public T poll() throws Exception {
      return qs.poll();
    }
  }
}
