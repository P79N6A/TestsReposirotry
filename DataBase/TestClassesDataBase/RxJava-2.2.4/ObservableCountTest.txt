public class ObservableCountTest {
  @Test public void dispose(){
    TestHelper.checkDisposed(Observable.just(1).count());
    TestHelper.checkDisposed(Observable.just(1).count().toObservable());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Long>>(){
      @Override public ObservableSource<Long> apply(      Observable<Object> o) throws Exception {
        return o.count().toObservable();
      }
    }
);
    TestHelper.checkDoubleOnSubscribeObservableToSingle(new Function<Observable<Object>,SingleSource<Long>>(){
      @Override public SingleSource<Long> apply(      Observable<Object> o) throws Exception {
        return o.count();
      }
    }
);
  }
}
