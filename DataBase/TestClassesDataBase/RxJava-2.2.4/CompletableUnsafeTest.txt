public class CompletableUnsafeTest {
  @Test(expected=IllegalArgumentException.class) public void unsafeCreateRejectsCompletable(){
    Completable.unsafeCreate(Completable.complete());
  }
  @Test public void wrapAlreadyCompletable(){
    assertSame(Completable.complete(),Completable.wrap(Completable.complete()));
  }
  @Test public void wrapCustomCompletable(){
    Completable.wrap(new CompletableSource(){
      @Override public void subscribe(      CompletableObserver observer){
        observer.onSubscribe(Disposables.empty());
        observer.onComplete();
      }
    }
).test().assertResult();
  }
  @Test(expected=NullPointerException.class) public void unsafeCreateThrowsNPE(){
    Completable.unsafeCreate(new CompletableSource(){
      @Override public void subscribe(      CompletableObserver observer){
        throw new NullPointerException();
      }
    }
).test();
  }
  @Test public void unsafeCreateThrowsIAE(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      Completable.unsafeCreate(new CompletableSource(){
        @Override public void subscribe(        CompletableObserver observer){
          throw new IllegalArgumentException();
        }
      }
).test();
      fail("Should have thrown!");
    }
 catch (    NullPointerException ex) {
      if (!(ex.getCause() instanceof IllegalArgumentException)) {
        fail(ex.toString() + ": should have thrown NPA(IAE)");
      }
      TestHelper.assertError(errors,0,IllegalArgumentException.class);
    }
 finally {
      RxJavaPlugins.reset();
    }
  }
}
