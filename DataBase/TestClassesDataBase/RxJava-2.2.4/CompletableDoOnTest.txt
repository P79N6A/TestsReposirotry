public class CompletableDoOnTest {
  @Test public void successAcceptThrows(){
    Completable.complete().doOnEvent(new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void errorAcceptThrows(){
    TestObserver<Void> to=Completable.error(new TestException("Outer")).doOnEvent(new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        throw new TestException("Inner");
      }
    }
).test().assertFailure(CompositeException.class);
    List<Throwable> errors=TestHelper.compositeList(to.errors().get(0));
    TestHelper.assertError(errors,0,TestException.class,"Outer");
    TestHelper.assertError(errors,1,TestException.class,"Inner");
  }
  @Test public void doOnDisposeCalled(){
    final AtomicBoolean atomicBoolean=new AtomicBoolean();
    assertFalse(atomicBoolean.get());
    Completable.complete().doOnDispose(new Action(){
      @Override public void run() throws Exception {
        atomicBoolean.set(true);
      }
    }
).test().assertResult().dispose();
    assertTrue(atomicBoolean.get());
  }
  @Test public void onSubscribeCrash(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final Disposable bs=Disposables.empty();
      new Completable(){
        @Override protected void subscribeActual(        CompletableObserver observer){
          observer.onSubscribe(bs);
          observer.onError(new TestException("Second"));
          observer.onComplete();
        }
      }
.doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable d) throws Exception {
          throw new TestException("First");
        }
      }
).test().assertFailureAndMessage(TestException.class,"First");
      assertTrue(bs.isDisposed());
      TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
