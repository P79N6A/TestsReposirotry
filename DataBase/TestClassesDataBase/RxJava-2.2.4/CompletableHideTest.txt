public class CompletableHideTest {
  @Test public void never(){
    Completable.never().hide().test().assertNotComplete().assertNoErrors();
  }
  @Test public void complete(){
    Completable.complete().hide().test().assertResult();
  }
  @Test public void error(){
    Completable.error(new TestException()).hide().test().assertFailure(TestException.class);
  }
  @Test public void hidden(){
    assertFalse(CompletableSubject.create().hide() instanceof CompletableSubject);
  }
  @Test public void dispose(){
    TestHelper.checkDisposedCompletable(new Function<Completable,CompletableSource>(){
      @Override public CompletableSource apply(      Completable m) throws Exception {
        return m.hide();
      }
    }
);
  }
  @Test public void isDisposed(){
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestHelper.checkDisposed(pp.ignoreElements().hide());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeCompletable(new Function<Completable,Completable>(){
      @Override public Completable apply(      Completable f) throws Exception {
        return f.hide();
      }
    }
);
  }
}
