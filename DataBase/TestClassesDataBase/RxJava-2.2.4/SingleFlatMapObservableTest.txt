public class SingleFlatMapObservableTest {
  @Test public void cancelMain(){
    SingleSubject<Integer> ss=SingleSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ss.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ss.hasObservers());
    assertFalse(ps.hasObservers());
    to.cancel();
    assertFalse(ss.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void cancelOther(){
    SingleSubject<Integer> ss=SingleSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ss.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ss.hasObservers());
    assertFalse(ps.hasObservers());
    ss.onSuccess(1);
    assertFalse(ss.hasObservers());
    assertTrue(ps.hasObservers());
    to.cancel();
    assertFalse(ss.hasObservers());
    assertFalse(ps.hasObservers());
  }
  @Test public void errorMain(){
    SingleSubject<Integer> ss=SingleSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ss.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ss.hasObservers());
    assertFalse(ps.hasObservers());
    ss.onError(new TestException());
    assertFalse(ss.hasObservers());
    assertFalse(ps.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void errorOther(){
    SingleSubject<Integer> ss=SingleSubject.create();
    PublishSubject<Integer> ps=PublishSubject.create();
    TestObserver<Integer> to=ss.flatMapObservable(Functions.justFunction(ps)).test();
    assertTrue(ss.hasObservers());
    assertFalse(ps.hasObservers());
    ss.onSuccess(1);
    assertFalse(ss.hasObservers());
    assertTrue(ps.hasObservers());
    ps.onError(new TestException());
    assertFalse(ss.hasObservers());
    assertFalse(ps.hasObservers());
    to.assertFailure(TestException.class);
  }
  @Test public void mapperCrash(){
    Single.just(1).flatMapObservable(new Function<Integer,ObservableSource<? extends Object>>(){
      @Override public ObservableSource<? extends Object> apply(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
  }
  @Test public void isDisposed(){
    TestHelper.checkDisposed(Single.never().flatMapObservable(Functions.justFunction(Observable.never())));
  }
}
