public class CompletableAndThenPublisherTest {
  @Test public void cancelMain(){
    CompletableSubject cs=CompletableSubject.create();
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestSubscriber<Integer> ts=cs.andThen(pp).test();
    assertTrue(cs.hasObservers());
    assertFalse(pp.hasSubscribers());
    ts.cancel();
    assertFalse(cs.hasObservers());
    assertFalse(pp.hasSubscribers());
  }
  @Test public void cancelOther(){
    CompletableSubject cs=CompletableSubject.create();
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestSubscriber<Integer> ts=cs.andThen(pp).test();
    assertTrue(cs.hasObservers());
    assertFalse(pp.hasSubscribers());
    cs.onComplete();
    assertFalse(cs.hasObservers());
    assertTrue(pp.hasSubscribers());
    ts.cancel();
    assertFalse(cs.hasObservers());
    assertFalse(pp.hasSubscribers());
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeCompletableToFlowable(new Function<Completable,Publisher<Object>>(){
      @Override public Publisher<Object> apply(      Completable m) throws Exception {
        return m.andThen(Flowable.never());
      }
    }
);
  }
}
