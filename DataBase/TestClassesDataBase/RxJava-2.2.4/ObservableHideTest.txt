public class ObservableHideTest {
  @Test public void testHiding(){
    PublishSubject<Integer> src=PublishSubject.create();
    Observable<Integer> dst=src.hide();
    assertFalse(dst instanceof PublishSubject);
    Observer<Object> o=TestHelper.mockObserver();
    dst.subscribe(o);
    src.onNext(1);
    src.onComplete();
    verify(o).onNext(1);
    verify(o).onComplete();
    verify(o,never()).onError(any(Throwable.class));
  }
  @Test public void testHidingError(){
    PublishSubject<Integer> src=PublishSubject.create();
    Observable<Integer> dst=src.hide();
    assertFalse(dst instanceof PublishSubject);
    Observer<Object> o=TestHelper.mockObserver();
    dst.subscribe(o);
    src.onError(new TestException());
    verify(o,never()).onNext(any());
    verify(o,never()).onComplete();
    verify(o).onError(any(TestException.class));
  }
  @Test public void doubleOnSubscribe(){
    TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
      @Override public ObservableSource<Object> apply(      Observable<Object> o) throws Exception {
        return o.hide();
      }
    }
);
  }
  @Test public void disposed(){
    TestHelper.checkDisposed(PublishSubject.create().hide());
  }
}
