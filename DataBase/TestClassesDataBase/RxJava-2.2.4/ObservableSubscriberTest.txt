public class ObservableSubscriberTest {
  @Test public void testOnStartCalledOnceViaSubscribe(){
    final AtomicInteger c=new AtomicInteger();
    Observable.just(1,2,3,4).take(2).subscribe(new DefaultObserver<Integer>(){
      @Override public void onStart(){
        c.incrementAndGet();
      }
      @Override public void onComplete(){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onNext(      Integer t){
      }
    }
);
    assertEquals(1,c.get());
  }
  @Test public void testOnStartCalledOnceViaUnsafeSubscribe(){
    final AtomicInteger c=new AtomicInteger();
    Observable.just(1,2,3,4).take(2).subscribe(new DefaultObserver<Integer>(){
      @Override public void onStart(){
        c.incrementAndGet();
      }
      @Override public void onComplete(){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onNext(      Integer t){
      }
    }
);
    assertEquals(1,c.get());
  }
  @Test public void testOnStartCalledOnceViaLift(){
    final AtomicInteger c=new AtomicInteger();
    Observable.just(1,2,3,4).lift(new ObservableOperator<Integer,Integer>(){
      @Override public Observer<? super Integer> apply(      final Observer<? super Integer> child){
        return new DefaultObserver<Integer>(){
          @Override public void onStart(){
            c.incrementAndGet();
          }
          @Override public void onComplete(){
            child.onComplete();
          }
          @Override public void onError(          Throwable e){
            child.onError(e);
          }
          @Override public void onNext(          Integer t){
            child.onNext(t);
          }
        }
;
      }
    }
).subscribe();
    assertEquals(1,c.get());
  }
  @Test public void subscribeConsumerConsumer(){
    final List<Integer> list=new ArrayList<Integer>();
    Observable.just(1).subscribe(new Consumer<Integer>(){
      @Override public void accept(      Integer v) throws Exception {
        list.add(v);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        list.add(100);
      }
    }
);
    assertEquals(Arrays.asList(1),list);
  }
  @Test public void subscribeConsumerConsumerWithError(){
    final List<Integer> list=new ArrayList<Integer>();
    Observable.<Integer>error(new TestException()).subscribe(new Consumer<Integer>(){
      @Override public void accept(      Integer v) throws Exception {
        list.add(v);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        list.add(100);
      }
    }
);
    assertEquals(Arrays.asList(100),list);
  }
  @Test public void methodTestCancelled(){
    PublishSubject<Integer> ps=PublishSubject.create();
    ps.test(true);
    assertFalse(ps.hasObservers());
  }
  @Test public void safeSubscriberAlreadySafe(){
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.just(1).safeSubscribe(new SafeObserver<Integer>(to));
    to.assertResult(1);
  }
  @Test public void methodTestNoCancel(){
    PublishSubject<Integer> ps=PublishSubject.create();
    ps.test(false);
    assertTrue(ps.hasObservers());
  }
  @SuppressWarnings("rawtypes") @Test public void pluginNull(){
    RxJavaPlugins.setOnObservableSubscribe(new BiFunction<Observable,Observer,Observer>(){
      @Override public Observer apply(      Observable a,      Observer b) throws Exception {
        return null;
      }
    }
);
    try {
      try {
        Observable.just(1).test();
        fail("Should have thrown");
      }
 catch (      NullPointerException ex) {
        assertEquals("The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins",ex.getMessage());
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
static final class BadObservable extends Observable<Integer> {
    @Override protected void subscribeActual(    Observer<? super Integer> observer){
      throw new IllegalArgumentException();
    }
  }
  @Test public void subscribeActualThrows(){
    List<Throwable> list=TestHelper.trackPluginErrors();
    try {
      try {
        new BadObservable().test();
        fail("Should have thrown!");
      }
 catch (      NullPointerException ex) {
        if (!(ex.getCause() instanceof IllegalArgumentException)) {
          fail(ex.toString() + ": Should be NPE(IAE)");
        }
      }
      TestHelper.assertError(list,0,IllegalArgumentException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
