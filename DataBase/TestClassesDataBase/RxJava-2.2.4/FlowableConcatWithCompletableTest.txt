public class FlowableConcatWithCompletableTest {
  @Test public void normal(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertResult(1,2,3,4,5,100);
  }
  @Test public void mainError(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.<Integer>error(new TestException()).concatWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).subscribe(ts);
    ts.assertFailure(TestException.class);
  }
  @Test public void otherError(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Completable.error(new TestException())).subscribe(ts);
    ts.assertFailure(TestException.class,1,2,3,4,5);
  }
  @Test public void takeMain(){
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(1,5).concatWith(Completable.fromAction(new Action(){
      @Override public void run() throws Exception {
        ts.onNext(100);
      }
    }
)).take(3).subscribe(ts);
    ts.assertResult(1,2,3);
  }
  @Test public void cancelOther(){
    CompletableSubject other=CompletableSubject.create();
    TestSubscriber<Object> ts=Flowable.empty().concatWith(other).test();
    assertTrue(other.hasObservers());
    ts.cancel();
    assertFalse(other.hasObservers());
  }
  @Test public void badSource(){
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      new Flowable<Integer>(){
        @Override protected void subscribeActual(        Subscriber<? super Integer> s){
          BooleanSubscription bs1=new BooleanSubscription();
          s.onSubscribe(bs1);
          BooleanSubscription bs2=new BooleanSubscription();
          s.onSubscribe(bs2);
          assertFalse(bs1.isCancelled());
          assertTrue(bs2.isCancelled());
          s.onComplete();
        }
      }
.concatWith(Completable.complete()).test().assertResult();
      TestHelper.assertError(errors,0,ProtocolViolationException.class);
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
