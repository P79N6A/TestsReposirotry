/** 
 * Observer for listener on seperate thread. 
 */
static final class AsyncObserver<T> extends DefaultObserver<T> {
  protected CountDownLatch latch=new CountDownLatch(1);
  protected Observer<T> target;
  /** 
 * Wrap existing Observer.
 * @param target the target nbp subscriber
 */
  AsyncObserver(  Observer<T> target){
    this.target=target;
  }
  /** 
 * Wait. 
 */
  public void await(){
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      fail("Test interrupted");
    }
  }
  @Override public void onComplete(){
    target.onComplete();
    latch.countDown();
  }
  @Override public void onError(  Throwable t){
    target.onError(t);
    latch.countDown();
  }
  @Override public void onNext(  T v){
    target.onNext(v);
  }
}
