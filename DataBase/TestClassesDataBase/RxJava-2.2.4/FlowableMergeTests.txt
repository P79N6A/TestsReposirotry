public class FlowableMergeTests {
  /** 
 * This won't compile if super/extends isn't done correctly on generics.
 */
  @Test public void testCovarianceOfMerge(){
    Flowable<HorrorMovie> horrors=Flowable.just(new HorrorMovie());
    Flowable<Flowable<HorrorMovie>> metaHorrors=Flowable.just(horrors);
    Flowable.<Media>merge(metaHorrors);
  }
  @Test public void testMergeCovariance(){
    Flowable<Media> f1=Flowable.<Media>just(new HorrorMovie(),new Movie());
    Flowable<Media> f2=Flowable.just(new Media(),new HorrorMovie());
    Flowable<Flowable<Media>> os=Flowable.just(f1,f2);
    List<Media> values=Flowable.merge(os).toList().blockingGet();
    assertEquals(4,values.size());
  }
  @Test public void testMergeCovariance2(){
    Flowable<Media> f1=Flowable.just(new HorrorMovie(),new Movie(),new Media());
    Flowable<Media> f2=Flowable.just(new Media(),new HorrorMovie());
    Flowable<Flowable<Media>> os=Flowable.just(f1,f2);
    List<Media> values=Flowable.merge(os).toList().blockingGet();
    assertEquals(5,values.size());
  }
  @Test public void testMergeCovariance3(){
    Flowable<Movie> f1=Flowable.just(new HorrorMovie(),new Movie());
    Flowable<Media> f2=Flowable.just(new Media(),new HorrorMovie());
    List<Media> values=Flowable.merge(f1,f2).toList().blockingGet();
    assertTrue(values.get(0) instanceof HorrorMovie);
    assertTrue(values.get(1) instanceof Movie);
    assertTrue(values.get(2) != null);
    assertTrue(values.get(3) instanceof HorrorMovie);
  }
  @Test public void testMergeCovariance4(){
    Flowable<Movie> f1=Flowable.defer(new Callable<Publisher<Movie>>(){
      @Override public Publisher<Movie> call(){
        return Flowable.just(new HorrorMovie(),new Movie());
      }
    }
);
    Flowable<Media> f2=Flowable.just(new Media(),new HorrorMovie());
    List<Media> values=Flowable.merge(f1,f2).toList().blockingGet();
    assertTrue(values.get(0) instanceof HorrorMovie);
    assertTrue(values.get(1) instanceof Movie);
    assertTrue(values.get(2) != null);
    assertTrue(values.get(3) instanceof HorrorMovie);
  }
}
