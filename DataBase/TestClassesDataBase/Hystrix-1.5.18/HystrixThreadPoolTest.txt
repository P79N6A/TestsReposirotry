public class HystrixThreadPoolTest {
  @Before public void setup(){
    Hystrix.reset();
  }
  @Test public void testShutdown(){
    int count=Factory.threadPools.size();
    HystrixThreadPool pool=Factory.getInstance(HystrixThreadPoolKey.Factory.asKey("threadPoolFactoryTest"),HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
    assertEquals(count + 1,Factory.threadPools.size());
    assertFalse(pool.getExecutor().isShutdown());
    Factory.shutdown();
    assertEquals(0,Factory.threadPools.size());
    assertTrue(pool.getExecutor().isShutdown());
  }
  @Test public void testShutdownWithWait(){
    int count=Factory.threadPools.size();
    HystrixThreadPool pool=Factory.getInstance(HystrixThreadPoolKey.Factory.asKey("threadPoolFactoryTest"),HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
    assertEquals(count + 1,Factory.threadPools.size());
    assertFalse(pool.getExecutor().isShutdown());
    Factory.shutdown(1,TimeUnit.SECONDS);
    assertEquals(0,Factory.threadPools.size());
    assertTrue(pool.getExecutor().isShutdown());
  }
private static class HystrixMetricsPublisherThreadPoolContainer implements HystrixMetricsPublisherThreadPool {
    private final HystrixThreadPoolMetrics hystrixThreadPoolMetrics;
    private HystrixMetricsPublisherThreadPoolContainer(    HystrixThreadPoolMetrics hystrixThreadPoolMetrics){
      this.hystrixThreadPoolMetrics=hystrixThreadPoolMetrics;
    }
    @Override public void initialize(){
    }
    public HystrixThreadPoolMetrics getHystrixThreadPoolMetrics(){
      return hystrixThreadPoolMetrics;
    }
  }
  @Test public void ensureThreadPoolInstanceIsTheOneRegisteredWithMetricsPublisherAndThreadPoolCache() throws IllegalAccessException, NoSuchFieldException {
    HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisher(){
      @Override public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool(      HystrixThreadPoolKey threadPoolKey,      HystrixThreadPoolMetrics metrics,      HystrixThreadPoolProperties properties){
        return new HystrixMetricsPublisherThreadPoolContainer(metrics);
      }
    }
);
    HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("threadPoolFactoryConcurrencyTest");
    HystrixThreadPool poolOne=new HystrixThreadPool.HystrixThreadPoolDefault(threadPoolKey,HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
    HystrixThreadPool poolTwo=new HystrixThreadPool.HystrixThreadPoolDefault(threadPoolKey,HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
    assertThat(poolOne.getExecutor(),is(poolTwo.getExecutor()));
    HystrixMetricsPublisherThreadPoolContainer hystrixMetricsPublisherThreadPool=(HystrixMetricsPublisherThreadPoolContainer)HystrixMetricsPublisherFactory.createOrRetrievePublisherForThreadPool(threadPoolKey,null,null);
    ThreadPoolExecutor threadPoolExecutor=hystrixMetricsPublisherThreadPool.getHystrixThreadPoolMetrics().getThreadPool();
    assertTrue(threadPoolExecutor.equals(poolOne.getExecutor()) && threadPoolExecutor.equals(poolTwo.getExecutor()));
    assertFalse(threadPoolExecutor.isShutdown());
  }
  @Test(timeout=2500) public void testUnsubscribeHystrixThreadPool() throws InterruptedException {
    HystrixThreadPool pool=Factory.getInstance(HystrixThreadPoolKey.Factory.asKey("threadPoolFactoryTest"),HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
    final AtomicBoolean interrupted=new AtomicBoolean();
    final CountDownLatch start=new CountDownLatch(1);
    final CountDownLatch end=new CountDownLatch(1);
    HystrixContextScheduler hcs=new HystrixContextScheduler(HystrixPlugins.getInstance().getConcurrencyStrategy(),pool);
    Scheduler.Worker w=hcs.createWorker();
    try {
      w.schedule(new Action0(){
        @Override public void call(){
          start.countDown();
          try {
            try {
              Thread.sleep(5000);
            }
 catch (            InterruptedException ex) {
              interrupted.set(true);
            }
          }
  finally {
            end.countDown();
          }
        }
      }
);
      start.await();
      w.unsubscribe();
      end.await();
      Factory.shutdown();
      assertTrue(interrupted.get());
    }
  finally {
      w.unsubscribe();
    }
  }
}
