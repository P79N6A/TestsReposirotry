/** 
 * A simple circuit breaker intended for unit testing of the  {@link HystrixCommand} object, NOT production use.<p> This uses simple logic to 'trip' the circuit after 3 subsequent failures and doesn't recover.
 */
public static class TestCircuitBreaker implements HystrixCircuitBreaker {
  final HystrixCommandMetrics metrics;
  private boolean forceShortCircuit=false;
  public TestCircuitBreaker(){
    this.metrics=getMetrics(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter());
    forceShortCircuit=false;
  }
  public TestCircuitBreaker(  HystrixCommandKey commandKey){
    this.metrics=getMetrics(commandKey,HystrixCommandPropertiesTest.getUnitTestPropertiesSetter());
    forceShortCircuit=false;
  }
  public TestCircuitBreaker setForceShortCircuit(  boolean value){
    this.forceShortCircuit=value;
    return this;
  }
  @Override public boolean isOpen(){
    System.out.println("metrics : " + metrics.getCommandKey().name() + " : "+ metrics.getHealthCounts());
    if (forceShortCircuit) {
      return true;
    }
 else {
      return metrics.getHealthCounts().getErrorCount() >= 3;
    }
  }
  @Override public void markSuccess(){
  }
  @Override public boolean allowRequest(){
    return !isOpen();
  }
}
