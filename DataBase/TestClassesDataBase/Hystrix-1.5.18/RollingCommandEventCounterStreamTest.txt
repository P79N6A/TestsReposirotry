public class RollingCommandEventCounterStreamTest extends CommandStreamTest {
  HystrixRequestContext context;
  RollingCommandEventCounterStream stream;
  static HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("RollingCommandCounter");
  private static Subscriber<long[]> getSubscriber(  final CountDownLatch latch){
    return new Subscriber<long[]>(){
      @Override public void onCompleted(){
        latch.countDown();
      }
      @Override public void onError(      Throwable e){
        fail(e.getMessage());
      }
      @Override public void onNext(      long[] eventCounts){
        System.out.println("OnNext @ " + System.currentTimeMillis() + " : "+ bucketToString(eventCounts));
      }
    }
;
  }
  @Before public void setUp(){
    context=HystrixRequestContext.initializeContext();
  }
  @After public void tearDown(){
    context.shutdown();
    stream.unsubscribe();
    RollingCommandEventCounterStream.reset();
  }
  @Test public void testEmptyStreamProducesZeros(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-A");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    assertFalse(hasData(stream.getLatest()));
  }
  @Test public void testSingleSuccess(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-B");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,20);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.SUCCESS.ordinal()]=1;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testSingleFailure(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-C");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.FAILURE.ordinal()]=1;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=1;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testSingleTimeout(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-D");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.TIMEOUT);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.TIMEOUT.ordinal()]=1;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=1;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testSingleBadRequest(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-E");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.BAD_REQUEST);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.BAD_REQUEST.ordinal()]=1;
    expected[HystrixEventType.EXCEPTION_THROWN.ordinal()]=1;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testRequestFromCache(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-F");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,20);
    CommandStreamTest.Command cmd2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.RESPONSE_FROM_CACHE);
    CommandStreamTest.Command cmd3=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.RESPONSE_FROM_CACHE);
    cmd1.observe();
    cmd2.observe();
    cmd3.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.SUCCESS.ordinal()]=1;
    expected[HystrixEventType.RESPONSE_FROM_CACHE.ordinal()]=2;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testShortCircuited(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-G");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command failure1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
    CommandStreamTest.Command failure2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
    CommandStreamTest.Command failure3=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
    CommandStreamTest.Command shortCircuit1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
    CommandStreamTest.Command shortCircuit2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
    failure1.observe();
    failure2.observe();
    failure3.observe();
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ie) {
      fail(ie.getMessage());
    }
    shortCircuit1.observe();
    shortCircuit2.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertTrue(shortCircuit1.isResponseShortCircuited());
    assertTrue(shortCircuit2.isResponseShortCircuited());
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.FAILURE.ordinal()]=3;
    expected[HystrixEventType.SHORT_CIRCUITED.ordinal()]=2;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=5;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testSemaphoreRejected(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-H");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    List<CommandStreamTest.Command> saturators=new ArrayList<CommandStreamTest.Command>();
    for (int i=0; i < 10; i++) {
      saturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,200,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));
    }
    CommandStreamTest.Command rejected1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);
    CommandStreamTest.Command rejected2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);
    for (    final CommandStreamTest.Command saturator : saturators) {
      new Thread(new HystrixContextRunnable(new Runnable(){
        @Override public void run(){
          saturator.observe();
        }
      }
)).start();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ie) {
      fail(ie.getMessage());
    }
    rejected1.observe();
    rejected2.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertTrue(rejected1.isResponseSemaphoreRejected());
    assertTrue(rejected2.isResponseSemaphoreRejected());
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.SUCCESS.ordinal()]=10;
    expected[HystrixEventType.SEMAPHORE_REJECTED.ordinal()]=2;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=2;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testThreadPoolRejected(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-I");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    List<CommandStreamTest.Command> saturators=new ArrayList<CommandStreamTest.Command>();
    for (int i=0; i < 10; i++) {
      saturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,200));
    }
    CommandStreamTest.Command rejected1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0);
    CommandStreamTest.Command rejected2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0);
    for (    final CommandStreamTest.Command saturator : saturators) {
      saturator.observe();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ie) {
      fail(ie.getMessage());
    }
    rejected1.observe();
    rejected2.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertTrue(rejected1.isResponseThreadPoolRejected());
    assertTrue(rejected2.isResponseThreadPoolRejected());
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.SUCCESS.ordinal()]=10;
    expected[HystrixEventType.THREAD_POOL_REJECTED.ordinal()]=2;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=2;
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testFallbackFailure(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-J");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_FAILURE);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.FAILURE.ordinal()]=1;
    expected[HystrixEventType.FALLBACK_FAILURE.ordinal()]=1;
    expected[HystrixEventType.EXCEPTION_THROWN.ordinal()]=1;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testFallbackMissing(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-K");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_MISSING);
    cmd.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.FAILURE.ordinal()]=1;
    expected[HystrixEventType.FALLBACK_MISSING.ordinal()]=1;
    expected[HystrixEventType.EXCEPTION_THROWN.ordinal()]=1;
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testFallbackRejection(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-L");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    List<CommandStreamTest.Command> fallbackSaturators=new ArrayList<CommandStreamTest.Command>();
    for (int i=0; i < 5; i++) {
      fallbackSaturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,400));
    }
    CommandStreamTest.Command rejection1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,0);
    CommandStreamTest.Command rejection2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,0);
    for (    CommandStreamTest.Command saturator : fallbackSaturators) {
      saturator.observe();
    }
    try {
      Thread.sleep(70);
    }
 catch (    InterruptedException ex) {
      fail(ex.getMessage());
    }
    rejection1.observe();
    rejection2.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.FAILURE.ordinal()]=7;
    expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=5;
    expected[HystrixEventType.FALLBACK_REJECTION.ordinal()]=2;
    expected[HystrixEventType.EXCEPTION_THROWN.ordinal()]=2;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testCollapsed(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("BatchCommand");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    for (int i=0; i < 3; i++) {
      CommandStreamTest.Collapser.from(i).observe();
    }
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    expected[HystrixEventType.SUCCESS.ordinal()]=1;
    expected[HystrixEventType.COLLAPSED.ordinal()]=3;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testMultipleEventsOverTimeGetStoredAndAgeOut(){
    HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-M");
    stream=RollingCommandEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(30).subscribe(getSubscriber(latch));
    CommandStreamTest.Command cmd1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,20);
    CommandStreamTest.Command cmd2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,10);
    cmd1.observe();
    cmd2.observe();
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.values().length];
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
}
