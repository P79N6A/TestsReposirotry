/** 
 * The construct() will take time once subscribed to. No fallback implementation. Used for making sure Thread and Semaphore isolation are separated from each other.
 */
private static class TestThreadIsolationWithSemaphoreSetSmallCommand extends TestHystrixObservableCommand<Boolean> {
  private final Action0 action;
  private TestThreadIsolationWithSemaphoreSetSmallCommand(  TestCircuitBreaker circuitBreaker,  int poolSize,  Action0 action){
    super(testPropsBuilder().setCircuitBreaker(circuitBreaker).setMetrics(circuitBreaker.metrics).setThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(TestThreadIsolationWithSemaphoreSetSmallCommand.class.getSimpleName())).setThreadPoolPropertiesDefaults(HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder().withCoreSize(poolSize).withMaximumSize(poolSize).withMaxQueueSize(0)).setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD).withExecutionIsolationSemaphoreMaxConcurrentRequests(1)));
    this.action=action;
  }
  @Override protected Observable<Boolean> construct(){
    return Observable.create(new OnSubscribe<Boolean>(){
      @Override public void call(      Subscriber<? super Boolean> s){
        action.call();
        s.onNext(true);
        s.onCompleted();
      }
    }
);
  }
}
