public class HystrixCommandPropertiesTest {
  /** 
 * Utility method for creating baseline properties for unit tests.
 */
  static HystrixCommandProperties.Setter getUnitTestPropertiesSetter(){
    return new HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(1000).withExecutionTimeoutEnabled(true).withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD).withExecutionIsolationThreadInterruptOnTimeout(true).withExecutionIsolationThreadInterruptOnFutureCancel(true).withCircuitBreakerForceOpen(false).withCircuitBreakerErrorThresholdPercentage(40).withMetricsRollingStatisticalWindowInMilliseconds(5000).withMetricsRollingStatisticalWindowBuckets(5).withCircuitBreakerRequestVolumeThreshold(0).withCircuitBreakerSleepWindowInMilliseconds(5000000).withCircuitBreakerEnabled(true).withRequestLogEnabled(true).withExecutionIsolationSemaphoreMaxConcurrentRequests(20).withFallbackIsolationSemaphoreMaxConcurrentRequests(10).withFallbackEnabled(true).withCircuitBreakerForceClosed(false).withMetricsRollingPercentileEnabled(true).withRequestCacheEnabled(true).withMetricsRollingPercentileWindowInMilliseconds(60000).withMetricsRollingPercentileWindowBuckets(12).withMetricsRollingPercentileBucketSize(1000).withMetricsHealthSnapshotIntervalInMilliseconds(100);
  }
  /** 
 * Return a static representation of the properties with values from the Builder so that UnitTests can create properties that are not affected by the actual implementations which pick up their values dynamically.
 * @param builder command properties builder
 * @return HystrixCommandProperties
 */
  static HystrixCommandProperties asMock(  final Setter builder){
    return new HystrixCommandProperties(TestKey.TEST){
      @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());
      }
      @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());
      }
      @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());
      }
      @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());
      }
      @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());
      }
      @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){
        return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());
      }
      @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());
      }
      @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());
      }
      @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());
      }
      @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());
      }
      @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){
        return HystrixProperty.Factory.nullProperty();
      }
      @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());
      }
      @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());
      }
      @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){
        return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());
      }
      @Override public HystrixProperty<Boolean> fallbackEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());
      }
      @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());
      }
      @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());
      }
      @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());
      }
      @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());
      }
      @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());
      }
      @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());
      }
      @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){
        return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());
      }
      @Override public HystrixProperty<Boolean> requestCacheEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());
      }
      @Override public HystrixProperty<Boolean> requestLogEnabled(){
        return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());
      }
    }
;
  }
  public enum TestKey implements HystrixCommandKey {  TEST}
private static class TestPropertiesCommand extends HystrixCommandProperties {
    protected TestPropertiesCommand(    HystrixCommandKey key,    Setter builder,    String propertyPrefix){
      super(key,builder,propertyPrefix);
    }
  }
  @After public void cleanup(){
    ConfigurationManager.getConfigInstance().clear();
  }
  @Test public void testBooleanBuilderOverride1(){
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(true),"unitTestPrefix");
    assertEquals(true,properties.circuitBreakerForceClosed().get());
  }
  @Test public void testBooleanBuilderOverride2(){
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(false),"unitTestPrefix");
    assertEquals(false,properties.circuitBreakerForceClosed().get());
  }
  @Test public void testBooleanCodeDefault(){
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter(),"unitTestPrefix");
    assertEquals(HystrixCommandProperties.default_circuitBreakerForceClosed,properties.circuitBreakerForceClosed().get());
  }
  @Test public void testBooleanGlobalDynamicOverrideOfCodeDefault() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter(),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed",true);
    assertEquals(true,properties.circuitBreakerForceClosed().get());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed");
  }
  @Test public void testBooleanInstanceBuilderOverrideOfGlobalDynamicOverride1() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(true),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed",false);
    assertEquals(true,properties.circuitBreakerForceClosed().get());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed");
  }
  @Test public void testBooleanInstanceBuilderOverrideOfGlobalDynamicOverride2() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(false),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed",true);
    assertEquals(false,properties.circuitBreakerForceClosed().get());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed");
  }
  @Test public void testBooleanInstanceDynamicOverrideOfEverything() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(false),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed",false);
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.TEST.circuitBreaker.forceClosed",true);
    assertEquals(true,properties.circuitBreakerForceClosed().get());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.circuitBreaker.forceClosed");
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.TEST.circuitBreaker.forceClosed");
  }
  @Test public void testIntegerBuilderOverride(){
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(5000),"unitTestPrefix");
    assertEquals(5000,properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
  }
  @Test public void testIntegerCodeDefault(){
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter(),"unitTestPrefix");
    assertEquals(HystrixCommandProperties.default_metricsRollingStatisticalWindow,properties.metricsRollingStatisticalWindowInMilliseconds().get());
  }
  @Test public void testIntegerGlobalDynamicOverrideOfCodeDefault() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter(),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.metrics.rollingStats.timeInMilliseconds",1234);
    assertEquals(1234,properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.metrics.rollingStats.timeInMilliseconds");
  }
  @Test public void testIntegerInstanceBuilderOverrideOfGlobalDynamicOverride() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(5000),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.rollingStats.timeInMilliseconds",3456);
    assertEquals(5000,properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.rollingStats.timeInMilliseconds");
  }
  @Test public void testIntegerInstanceDynamicOverrideOfEverything() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(5000),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.metrics.rollingStats.timeInMilliseconds",1234);
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.TEST.metrics.rollingStats.timeInMilliseconds",3456);
    assertEquals(3456,properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.metrics.rollingStats.timeInMilliseconds");
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.TEST.metrics.rollingStats.timeInMilliseconds");
  }
  @Test public void testThreadPoolOnlyHasInstanceOverride() throws Exception {
    HystrixCommandProperties properties=new TestPropertiesCommand(TestKey.TEST,new HystrixCommandProperties.Setter(),"unitTestPrefix");
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.threadPoolKeyOverride",1234);
    assertEquals(null,properties.executionIsolationThreadPoolKeyOverride().get());
    ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.TEST.threadPoolKeyOverride","testPool");
    assertEquals("testPool",properties.executionIsolationThreadPoolKeyOverride().get());
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.threadPoolKeyOverride");
    ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.TEST.threadPoolKeyOverride");
  }
}
