public class HystrixMetricsStreamServletUnitTest {
  @Mock HttpServletRequest mockReq;
  @Mock HttpServletResponse mockResp;
  @Mock HystrixDashboardStream.DashboardData mockDashboard;
  @Mock PrintWriter mockPrintWriter;
  HystrixMetricsStreamServlet servlet;
  private final Observable<HystrixDashboardStream.DashboardData> streamOfOnNexts=Observable.interval(100,TimeUnit.MILLISECONDS).map(new Func1<Long,HystrixDashboardStream.DashboardData>(){
    @Override public HystrixDashboardStream.DashboardData call(    Long timestamp){
      return mockDashboard;
    }
  }
);
  @Before public void init(){
    MockitoAnnotations.initMocks(this);
    when(mockReq.getMethod()).thenReturn("GET");
  }
  @After public void tearDown(){
    servlet.destroy();
    servlet.shutdown();
  }
  @Test public void shutdownServletShouldRejectRequests() throws ServletException, IOException {
    servlet=new HystrixMetricsStreamServlet(streamOfOnNexts,10);
    try {
      servlet.init();
    }
 catch (    ServletException ex) {
    }
    servlet.shutdown();
    servlet.service(mockReq,mockResp);
    verify(mockResp).sendError(503,"Service has been shut down.");
  }
}
