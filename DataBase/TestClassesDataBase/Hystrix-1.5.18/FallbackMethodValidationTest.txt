/** 
 * Created by dmgcodevil.
 */
@RunWith(DataProviderRunner.class) public class FallbackMethodValidationTest {
  @DataProvider public static Object[][] fail(){
    return new Object[][]{{getMethod("commandReturnPlainTypeLong"),getMethod("fallbackReturnPlainTypeString")},{getMethod("commandReturnPlainTypeChild"),getMethod("fallbackReturnPlainTypeParent")},{getMethod("commandReturnGenericTypeParent"),getMethod("fallbackReturnGenericTypeChild")},{getMethod("commandReturnGenericTypeChild"),getMethod("fallbackReturnGenericTypeParent")},{getMethod("commandReturnGenericTypeChildParent"),getMethod("fallbackReturnGenericTypeParentChild")},{getMethod("commandReturnGenericTypeParentChild"),getMethod("fallbackReturnGenericTypeChildParent")},{getMethod("commandReturnGenericNestedTypeParentChildParent"),getMethod("commandReturnGenericNestedTypeParentParentParent")},{getMethod("commandReturnFutureParent"),getMethod("fallbackCommandReturnFutureChild")},{getMethod("commandReturnFutureParent"),getMethod("fallbackReturnFutureParent")},{getMethod("commandReturnFutureParent"),getMethod("fallbackReturnChild")},{getMethod("commandReturnParent"),getMethod("fallbackReturnFutureParent")},{getMethod("commandReturnParent"),getMethod("fallbackCommandReturnFutureParent")},{getMethod("fallbackReturnObservableParent"),getMethod("fallbackReturnObservableChild")},{getMethod("fallbackReturnObservableParent"),getMethod("fallbackCommandReturnObservableChild")},{getMethod("fallbackReturnObservableParent"),getMethod("fallbackReturnChild")},{getMethod("commandReturnParent"),getMethod("fallbackReturnObservableParent")},{getMethod("commandReturnParent"),getMethod("fallbackCommandReturnObservableParent")},{getMethod("commandReturnParent"),getMethod("fallbackReturnObservableChild")},{getMethod("commandReturnParent"),getMethod("fallbackCommandReturnObservableChild")}};
  }
  @DataProvider public static Object[][] success(){
    return new Object[][]{{getMethod("commandReturnPlainTypeLong"),getMethod("fallbackReturnPlainTypeLong")},{getMethod("commandReturnPlainTypeParent"),getMethod("fallbackReturnPlainTypeChild")},{getMethod("commandReturnPlainTypeParent"),getMethod("fallbackReturnPlainTypeParent")},{getMethod("commandReturnGenericTypeChild"),getMethod("fallbackReturnGenericTypeChild")},{getMethod("commandReturnGenericNestedTypeParentChildParent"),getMethod("fallbackReturnGenericNestedTypeParentChildParent")},{getMethod("commandReturnFutureParent"),getMethod("fallbackCommandReturnFutureParent")},{getMethod("commandReturnFutureParent"),getMethod("fallbackCommandReturnParent")},{getMethod("commandReturnFutureParent"),getMethod("fallbackReturnParent")},{getMethod("commandReturnObservableParent"),getMethod("fallbackReturnObservableParent")},{getMethod("commandReturnObservableParent"),getMethod("fallbackCommandReturnObservableParent")},{getMethod("commandReturnObservableParent"),getMethod("fallbackReturnParent")}};
  }
  @Test(expected=FallbackDefinitionException.class) @UseDataProvider("fail") public void testValidateBadFallbackReturnType(  Method commandMethod,  Method fallbackMethod){
    new FallbackMethod(fallbackMethod).validateReturnType(commandMethod);
  }
  @UseDataProvider("success") public void testValidateCorrectFallbackReturnType(  Method commandMethod,  Method fallbackMethod){
    new FallbackMethod(fallbackMethod).validateReturnType(commandMethod);
  }
  private static Method getMethod(  String name){
    try {
      return Service.class.getDeclaredMethod(name);
    }
 catch (    NoSuchMethodException e) {
      throw Throwables.propagate(e);
    }
  }
private static class Service {
    public Parent commandReturnPlainTypeParent(){
      return null;
    }
    public Child commandReturnPlainTypeChild(){
      return null;
    }
    public Parent fallbackReturnPlainTypeParent(){
      return null;
    }
    public Child fallbackReturnPlainTypeChild(){
      return null;
    }
    public Long commandReturnPlainTypeLong(){
      return null;
    }
    public Long fallbackReturnPlainTypeLong(){
      return null;
    }
    public String fallbackReturnPlainTypeString(){
      return null;
    }
    public GType<Parent> commandReturnGenericTypeParent(){
      return null;
    }
    public GType<Child> commandReturnGenericTypeChild(){
      return null;
    }
    public GType<Parent> fallbackReturnGenericTypeParent(){
      return null;
    }
    public GType<Child> fallbackReturnGenericTypeChild(){
      return null;
    }
    public GDoubleType<Parent,Child> commandReturnGenericTypeParentChild(){
      return null;
    }
    public GDoubleType<Child,Parent> commandReturnGenericTypeChildParent(){
      return null;
    }
    public GDoubleType<Parent,Child> fallbackReturnGenericTypeParentChild(){
      return null;
    }
    public GDoubleType<Child,Parent> fallbackReturnGenericTypeChildParent(){
      return null;
    }
    public GType<GType<GDoubleType<GType<GDoubleType<Parent,Child>>,Parent>>> commandReturnGenericNestedTypeParentChildParent(){
      return null;
    }
    public GType<GType<GDoubleType<GType<GDoubleType<Parent,Parent>>,Parent>>> commandReturnGenericNestedTypeParentParentParent(){
      return null;
    }
    public GType<GType<GDoubleType<GType<GDoubleType<Parent,Child>>,Parent>>> fallbackReturnGenericNestedTypeParentChildParent(){
      return null;
    }
    Future<Parent> commandReturnFutureParent(){
      return null;
    }
    Parent commandReturnParent(){
      return null;
    }
    Parent fallbackReturnParent(){
      return null;
    }
    Child fallbackReturnChild(){
      return null;
    }
    Future<Parent> fallbackReturnFutureParent(){
      return null;
    }
    Future<Child> fallbackReturnFutureChild(){
      return null;
    }
    @HystrixCommand Parent fallbackCommandReturnParent(){
      return null;
    }
    @HystrixCommand Child fallbackCommandReturnChild(){
      return null;
    }
    @HystrixCommand Future<Parent> fallbackCommandReturnFutureParent(){
      return null;
    }
    @HystrixCommand Future<Child> fallbackCommandReturnFutureChild(){
      return null;
    }
    Observable<Parent> commandReturnObservableParent(){
      return null;
    }
    Observable<Parent> fallbackReturnObservableParent(){
      return null;
    }
    Observable<Child> fallbackReturnObservableChild(){
      return null;
    }
    @HystrixCommand Observable<Parent> fallbackCommandReturnObservableParent(){
      return null;
    }
    @HystrixCommand Observable<Child> fallbackCommandReturnObservableChild(){
      return null;
    }
  }
private interface GType<T> {
  }
private interface GDoubleType<T1,T2> {
  }
private static class Parent {
  }
private static class Child extends Parent {
  }
}
