/** 
 * Created by Mike Cowan
 */
public abstract class BasicDefaultRaiseHystrixExceptionsTest {
  private Service service;
  @Before public void setUp() throws Exception {
    service=createService();
  }
  protected abstract Service createService();
  @Test(expected=BadRequestException.class) public void testDefaultIgnoreException(){
    service.commandInheritsDefaultIgnoreExceptions();
  }
  @Test(expected=SpecificException.class) public void testCommandOverridesDefaultIgnoreExceptions(){
    service.commandOverridesDefaultIgnoreExceptions(SpecificException.class);
  }
  @Test(expected=HystrixRuntimeException.class) public void testCommandOverridesDefaultIgnoreExceptions_nonIgnoreExceptionShouldBePropagated(){
    service.commandOverridesDefaultIgnoreExceptions(BadRequestException.class);
  }
  @Ignore @Test(expected=BadRequestException.class) public void testFallbackCommandInheritsDefaultIgnoreException(){
    service.commandWithFallbackInheritsDefaultIgnoreExceptions();
  }
  @Ignore @Test(expected=SpecificException.class) public void testFallbackCommandOverridesDefaultIgnoreExceptions(){
    service.commandWithFallbackOverridesDefaultIgnoreExceptions(SpecificException.class);
  }
  @Test(expected=HystrixRuntimeException.class) public void testFallbackCommandOverridesDefaultIgnoreExceptions_nonIgnoreExceptionShouldBePropagated(){
    service.commandWithFallbackOverridesDefaultIgnoreExceptions(BadRequestException.class);
  }
  @Test(expected=HystrixRuntimeException.class) public void testRaiseHystrixRuntimeException(){
    service.commandShouldRaiseHystrixRuntimeException();
  }
  @Test public void testObservableRaiseHystrixRuntimeException(){
    TestSubscriber<Void> testSubscriber=new TestSubscriber<Void>();
    service.observableCommandShouldRaiseHystrixRuntimeException().subscribe(testSubscriber);
    testSubscriber.assertError(HystrixRuntimeException.class);
  }
@DefaultProperties(ignoreExceptions=BadRequestException.class,raiseHystrixExceptions={HystrixException.RUNTIME_EXCEPTION}) public static class Service {
    @HystrixCommand public Object commandShouldRaiseHystrixRuntimeException() throws SpecificException {
      throw new SpecificException("from 'commandShouldRaiseHystrixRuntimeException'");
    }
    @HystrixCommand public Observable<Void> observableCommandShouldRaiseHystrixRuntimeException() throws SpecificException {
      return Observable.error(new SpecificException("from 'observableCommandShouldRaiseHystrixRuntimeException'"));
    }
    @HystrixCommand public Object commandInheritsDefaultIgnoreExceptions() throws BadRequestException {
      throw new BadRequestException("from 'commandInheritsIgnoreExceptionsFromDefault'");
    }
    @HystrixCommand(ignoreExceptions=SpecificException.class) public Object commandOverridesDefaultIgnoreExceptions(    Class<? extends Throwable> errorType) throws BadRequestException, SpecificException {
      if (errorType.equals(BadRequestException.class)) {
        throw new BadRequestException("from 'commandOverridesDefaultIgnoreExceptions', cause: " + errorType.getSimpleName());
      }
      throw new SpecificException("from 'commandOverridesDefaultIgnoreExceptions', cause: " + errorType.getSimpleName());
    }
    @HystrixCommand(fallbackMethod="fallbackInheritsDefaultIgnoreExceptions") public Object commandWithFallbackInheritsDefaultIgnoreExceptions() throws SpecificException {
      throw new SpecificException("from 'commandWithFallbackInheritsDefaultIgnoreExceptions'");
    }
    @HystrixCommand private Object fallbackInheritsDefaultIgnoreExceptions() throws BadRequestException {
      throw new BadRequestException("from 'fallbackInheritsDefaultIgnoreExceptions'");
    }
    @HystrixCommand(fallbackMethod="fallbackOverridesDefaultIgnoreExceptions") public Object commandWithFallbackOverridesDefaultIgnoreExceptions(    Class<? extends Throwable> errorType){
      throw new SpecificException();
    }
    @HystrixCommand(ignoreExceptions=SpecificException.class) private Object fallbackOverridesDefaultIgnoreExceptions(    Class<? extends Throwable> errorType){
      if (errorType.equals(BadRequestException.class)) {
        throw new BadRequestException("from 'fallbackOverridesDefaultIgnoreExceptions', cause: " + errorType.getSimpleName());
      }
      throw new SpecificException("from 'commandOverridesDefaultIgnoreExceptions', cause: " + errorType.getSimpleName());
    }
  }
public static final class BadRequestException extends RuntimeException {
    public BadRequestException(){
    }
    public BadRequestException(    String message){
      super(message);
    }
  }
public static final class SpecificException extends RuntimeException {
    public SpecificException(){
    }
    public SpecificException(    String message){
      super(message);
    }
  }
}
