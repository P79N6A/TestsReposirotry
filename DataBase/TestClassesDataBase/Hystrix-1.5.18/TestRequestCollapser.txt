private static class TestRequestCollapser extends HystrixObservableCollapser<String,String,String,String> {
  private final String value;
  private ConcurrentLinkedQueue<HystrixObservableCommand<String>> commandsExecuted;
  public TestRequestCollapser(  TestCollapserTimer timer,  int value){
    this(timer,String.valueOf(value));
  }
  public TestRequestCollapser(  TestCollapserTimer timer,  String value){
    this(timer,value,10000,10);
  }
  public TestRequestCollapser(  TestCollapserTimer timer,  String value,  ConcurrentLinkedQueue<HystrixObservableCommand<String>> executionLog){
    this(timer,value,10000,10,executionLog);
  }
  public TestRequestCollapser(  TestCollapserTimer timer,  int value,  int defaultMaxRequestsInBatch,  int defaultTimerDelayInMilliseconds){
    this(timer,String.valueOf(value),defaultMaxRequestsInBatch,defaultTimerDelayInMilliseconds);
  }
  public TestRequestCollapser(  TestCollapserTimer timer,  String value,  int defaultMaxRequestsInBatch,  int defaultTimerDelayInMilliseconds){
    this(timer,value,defaultMaxRequestsInBatch,defaultTimerDelayInMilliseconds,null);
  }
  public TestRequestCollapser(  Scope scope,  TestCollapserTimer timer,  String value,  int defaultMaxRequestsInBatch,  int defaultTimerDelayInMilliseconds){
    this(scope,timer,value,defaultMaxRequestsInBatch,defaultTimerDelayInMilliseconds,null);
  }
  public TestRequestCollapser(  TestCollapserTimer timer,  String value,  int defaultMaxRequestsInBatch,  int defaultTimerDelayInMilliseconds,  ConcurrentLinkedQueue<HystrixObservableCommand<String>> executionLog){
    this(Scope.REQUEST,timer,value,defaultMaxRequestsInBatch,defaultTimerDelayInMilliseconds,executionLog);
  }
  private static HystrixCollapserMetrics createMetrics(){
    HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey("COLLAPSER_ONE");
    return HystrixCollapserMetrics.getInstance(key,new HystrixPropertiesCollapserDefault(key,HystrixCollapserProperties.Setter()));
  }
  public TestRequestCollapser(  Scope scope,  TestCollapserTimer timer,  String value,  int defaultMaxRequestsInBatch,  int defaultTimerDelayInMilliseconds,  ConcurrentLinkedQueue<HystrixObservableCommand<String>> executionLog){
    super(collapserKeyFromString(timer),scope,timer,HystrixCollapserProperties.Setter().withMaxRequestsInBatch(defaultMaxRequestsInBatch).withTimerDelayInMilliseconds(defaultTimerDelayInMilliseconds),createMetrics());
    this.value=value;
    this.commandsExecuted=executionLog;
  }
  @Override public String getRequestArgument(){
    return value;
  }
  @Override public HystrixObservableCommand<String> createCommand(  final Collection<CollapsedRequest<String,String>> requests){
    HystrixObservableCommand<String> command=new TestCollapserCommand(requests);
    if (commandsExecuted != null) {
      commandsExecuted.add(command);
    }
    return command;
  }
  @Override protected Func1<String,String> getBatchReturnTypeToResponseTypeMapper(){
    return new Func1<String,String>(){
      @Override public String call(      String s){
        return s;
      }
    }
;
  }
  @Override protected Func1<String,String> getBatchReturnTypeKeySelector(){
    return new Func1<String,String>(){
      @Override public String call(      String s){
        return s;
      }
    }
;
  }
  @Override protected Func1<String,String> getRequestArgumentKeySelector(){
    return new Func1<String,String>(){
      @Override public String call(      String s){
        return s;
      }
    }
;
  }
  @Override protected void onMissingResponse(  CollapsedRequest<String,String> r){
    r.setException(new RuntimeException("missing value!"));
  }
}
