class MyCollapser extends HystrixObservableCollapser<String,Pair<String,Integer>,Integer,String> {
  private final String arg;
  public MyCollapser(  String arg,  boolean requestCachingOn){
    super(HystrixCollapserKey.Factory.asKey("UNITTEST"),HystrixObservableCollapser.Scope.REQUEST,new RealCollapserTimer(),HystrixCollapserProperties.Setter().withRequestCacheEnabled(requestCachingOn),HystrixCollapserMetrics.getInstance(HystrixCollapserKey.Factory.asKey("UNITTEST"),new HystrixPropertiesCollapserDefault(HystrixCollapserKey.Factory.asKey("UNITTEST"),HystrixCollapserProperties.Setter())));
    this.arg=arg;
  }
  @Override public String getRequestArgument(){
    return arg;
  }
  @Override protected HystrixObservableCommand<Pair<String,Integer>> createCommand(  Collection<CollapsedRequest<Integer,String>> collapsedRequests){
    List<String> args=new ArrayList<String>();
    for (    CollapsedRequest<Integer,String> req : collapsedRequests) {
      args.add(req.getArgument());
    }
    return new MyCommand(args);
  }
  @Override protected Func1<Pair<String,Integer>,String> getBatchReturnTypeKeySelector(){
    return new Func1<Pair<String,Integer>,String>(){
      @Override public String call(      Pair<String,Integer> pair){
        return pair.a;
      }
    }
;
  }
  @Override protected Func1<String,String> getRequestArgumentKeySelector(){
    return new Func1<String,String>(){
      @Override public String call(      String s){
        return s;
      }
    }
;
  }
  @Override protected void onMissingResponse(  CollapsedRequest<Integer,String> r){
    r.setException(new RuntimeException("missing"));
  }
  @Override protected Func1<Pair<String,Integer>,Integer> getBatchReturnTypeToResponseTypeMapper(){
    return new Func1<Pair<String,Integer>,Integer>(){
      @Override public Integer call(      Pair<String,Integer> pair){
        return pair.b;
      }
    }
;
  }
}
