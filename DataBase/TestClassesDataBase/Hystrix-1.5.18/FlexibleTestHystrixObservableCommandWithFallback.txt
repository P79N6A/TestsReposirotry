private static class FlexibleTestHystrixObservableCommandWithFallback extends AbstractFlexibleTestHystrixObservableCommand {
  private final AbstractTestHystrixCommand.FallbackResult fallbackResult;
  private final int fallbackLatency;
  public FlexibleTestHystrixObservableCommandWithFallback(  HystrixCommandKey commandKey,  ExecutionIsolationStrategy isolationStrategy,  AbstractTestHystrixCommand.ExecutionResult executionResult,  int executionLatency,  FallbackResult fallbackResult,  int fallbackLatency,  TestCircuitBreaker circuitBreaker,  HystrixThreadPool threadPool,  int timeout,  CacheEnabled cacheEnabled,  Object value,  TryableSemaphore executionSemaphore,  TryableSemaphore fallbackSemaphore,  boolean circuitBreakerDisabled){
    super(commandKey,isolationStrategy,executionResult,executionLatency,circuitBreaker,threadPool,timeout,cacheEnabled,value,executionSemaphore,fallbackSemaphore,circuitBreakerDisabled);
    this.fallbackResult=fallbackResult;
    this.fallbackLatency=fallbackLatency;
  }
  @Override protected Observable<Integer> resumeWithFallback(){
    if (fallbackResult == AbstractTestHystrixCommand.FallbackResult.FAILURE) {
      addLatency(fallbackLatency);
      throw new RuntimeException("Fallback Sync Failure for TestHystrixCommand");
    }
 else     if (fallbackResult == FallbackResult.UNIMPLEMENTED) {
      addLatency(fallbackLatency);
      return super.resumeWithFallback();
    }
    return Observable.create(new OnSubscribe<Integer>(){
      @Override public void call(      Subscriber<? super Integer> subscriber){
        addLatency(fallbackLatency);
        if (fallbackResult == AbstractTestHystrixCommand.FallbackResult.SUCCESS) {
          subscriber.onNext(11);
          subscriber.onCompleted();
        }
 else         if (fallbackResult == FallbackResult.MULTIPLE_EMITS_THEN_SUCCESS) {
          subscriber.onNext(12);
          subscriber.onNext(13);
          subscriber.onNext(14);
          subscriber.onNext(15);
          subscriber.onCompleted();
        }
 else         if (fallbackResult == FallbackResult.MULTIPLE_EMITS_THEN_FAILURE) {
          subscriber.onNext(16);
          subscriber.onNext(17);
          subscriber.onNext(18);
          subscriber.onNext(19);
          subscriber.onError(new RuntimeException("Fallback Async Failure For TestHystrixObservableCommand after 4 emits"));
        }
 else         if (fallbackResult == AbstractTestHystrixCommand.FallbackResult.ASYNC_FAILURE) {
          subscriber.onError(new RuntimeException("Fallback Async Failure for TestHystrixCommand after 0 fallback emits"));
        }
 else {
          subscriber.onError(new RuntimeException("You passed in a fallbackResult enum that can't be represented in HystrixObservableCommand: " + fallbackResult));
        }
      }
    }
);
  }
}
