/** 
 * Created by dmgcodevil
 */
public abstract class BasicObservableTest extends BasicHystrixTest {
  private UserService userService;
  protected abstract UserService createUserService();
  @Before public void setUp() throws Exception {
    userService=createUserService();
  }
  @Test public void testGetUserByIdSuccess(){
    Observable<User> observable=userService.getUser("1","name: ");
    assertEquals("name: 1",observable.toBlocking().single().getName());
    Observable<User> fUser=userService.getUser("1","name: ");
    fUser.subscribe(new Observer<User>(){
      @Override public void onCompleted(){
      }
      @Override public void onError(      Throwable e){
        e.printStackTrace();
      }
      @Override public void onNext(      User v){
        System.out.println("onNext: " + v);
      }
    }
);
    Observable<User> fs=userService.getUser("1","name: ");
    fs.subscribe(new Action1<User>(){
      @Override public void call(      User user){
        assertEquals("name: 1",user.getName());
      }
    }
);
    assertEquals(3,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
    com.netflix.hystrix.HystrixInvokableInfo getUserCommand=getHystrixCommandByKey("getUser");
    assertTrue(getUserCommand.getExecutionEvents().contains(HystrixEventType.SUCCESS));
  }
  @Test public void testGetUserWithRegularFallback(){
    final User exUser=new User("def","def");
    Observable<User> userObservable=userService.getUserRegularFallback(" ","");
    assertEquals(exUser,userObservable.toBlocking().single());
    assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
    com.netflix.hystrix.HystrixInvokableInfo getUserCommand=getHystrixCommandByKey("getUserRegularFallback");
    assertTrue(getUserCommand.getExecutionEvents().contains(HystrixEventType.FAILURE));
    assertTrue(getUserCommand.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));
  }
  @Test public void testGetUserWithRxFallback(){
    final User exUser=new User("def","def");
    assertEquals(exUser,userService.getUserRxFallback(" ","").toBlocking().single());
    assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
    com.netflix.hystrix.HystrixInvokableInfo getUserCommand=getHystrixCommandByKey("getUserRxFallback");
    assertTrue(getUserCommand.getExecutionEvents().contains(HystrixEventType.FAILURE));
    assertTrue(getUserCommand.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));
  }
  @Test public void testGetUserWithRxCommandFallback(){
    final User exUser=new User("def","def");
    Observable<User> userObservable=userService.getUserRxCommandFallback(" ","");
    assertEquals(exUser,userObservable.toBlocking().single());
    assertEquals(2,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
    com.netflix.hystrix.HystrixInvokableInfo getUserRxCommandFallback=getHystrixCommandByKey("getUserRxCommandFallback");
    com.netflix.hystrix.HystrixInvokableInfo rxCommandFallback=getHystrixCommandByKey("rxCommandFallback");
    assertTrue(getUserRxCommandFallback.getExecutionEvents().contains(HystrixEventType.FAILURE));
    assertTrue(getUserRxCommandFallback.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));
    assertTrue(rxCommandFallback.getExecutionEvents().contains(HystrixEventType.SUCCESS));
  }
public static class UserService {
    private User regularFallback(    String id,    String name){
      return new User("def","def");
    }
    private Observable<User> rxFallback(    String id,    String name){
      return Observable.just(new User("def","def"));
    }
    @HystrixCommand(observableExecutionMode=ObservableExecutionMode.EAGER) private Observable<User> rxCommandFallback(    String id,    String name,    Throwable throwable){
      if (throwable instanceof GetUserException && "getUserRxCommandFallback has failed".equals(throwable.getMessage())) {
        return Observable.just(new User("def","def"));
      }
 else {
        throw new IllegalStateException();
      }
    }
    @HystrixCommand public Observable<User> getUser(    final String id,    final String name){
      validate(id,name,"getUser has failed");
      return createObservable(id,name);
    }
    @HystrixCommand(fallbackMethod="regularFallback",observableExecutionMode=ObservableExecutionMode.LAZY) public Observable<User> getUserRegularFallback(    final String id,    final String name){
      validate(id,name,"getUser has failed");
      return createObservable(id,name);
    }
    @HystrixCommand(fallbackMethod="rxFallback") public Observable<User> getUserRxFallback(    final String id,    final String name){
      validate(id,name,"getUserRxFallback has failed");
      return createObservable(id,name);
    }
    @HystrixCommand(fallbackMethod="rxCommandFallback",observableExecutionMode=ObservableExecutionMode.LAZY) public Observable<User> getUserRxCommandFallback(    final String id,    final String name){
      validate(id,name,"getUserRxCommandFallback has failed");
      return createObservable(id,name);
    }
    private Observable<User> createObservable(    final String id,    final String name){
      return Observable.create(new Observable.OnSubscribe<User>(){
        @Override public void call(        Subscriber<? super User> observer){
          try {
            if (!observer.isUnsubscribed()) {
              observer.onNext(new User(id,name + id));
              observer.onCompleted();
            }
          }
 catch (          Exception e) {
            observer.onError(e);
          }
        }
      }
);
    }
    private void validate(    String id,    String name,    String errorMsg){
      if (StringUtils.isBlank(id) || StringUtils.isBlank(name)) {
        throw new GetUserException(errorMsg);
      }
    }
private static final class GetUserException extends RuntimeException {
      public GetUserException(      String message){
        super(message);
      }
    }
  }
}
