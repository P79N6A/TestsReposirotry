/** 
 * The obligatory "Hello World!" showing a simple implementation of a  {@link HystrixCommand}.
 */
public class CommandHelloWorld extends HystrixCommand<String> {
  private final String name;
  public CommandHelloWorld(  String name){
    super(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"));
    this.name=name;
  }
  @Override protected String run(){
    return "Hello " + name + "!";
  }
public static class UnitTest {
    @Test public void testSynchronous(){
      assertEquals("Hello World!",new CommandHelloWorld("World").execute());
      assertEquals("Hello Bob!",new CommandHelloWorld("Bob").execute());
    }
    @Test public void testAsynchronous1() throws Exception {
      assertEquals("Hello World!",new CommandHelloWorld("World").queue().get());
      assertEquals("Hello Bob!",new CommandHelloWorld("Bob").queue().get());
    }
    @Test public void testAsynchronous2() throws Exception {
      Future<String> fWorld=new CommandHelloWorld("World").queue();
      Future<String> fBob=new CommandHelloWorld("Bob").queue();
      assertEquals("Hello World!",fWorld.get());
      assertEquals("Hello Bob!",fBob.get());
    }
    @Test public void testObservable() throws Exception {
      Observable<String> fWorld=new CommandHelloWorld("World").observe();
      Observable<String> fBob=new CommandHelloWorld("Bob").observe();
      assertEquals("Hello World!",fWorld.toBlocking().single());
      assertEquals("Hello Bob!",fBob.toBlocking().single());
      fWorld.subscribe(new Observer<String>(){
        @Override public void onCompleted(){
        }
        @Override public void onError(        Throwable e){
          e.printStackTrace();
        }
        @Override public void onNext(        String v){
          System.out.println("onNext: " + v);
        }
      }
);
      fBob.subscribe(new Action1<String>(){
        @Override public void call(        String v){
          System.out.println("onNext: " + v);
        }
      }
);
    }
  }
}
