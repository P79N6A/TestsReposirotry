private class SimpleExecution implements HystrixInvokableInfo<Integer> {
  private final HystrixCommandKey commandKey;
  private final ExecutionResult executionResult;
  private final String cacheKey;
  private final HystrixCollapserKey collapserKey;
  public SimpleExecution(  HystrixCommandKey commandKey,  int latency,  HystrixEventType... events){
    this.commandKey=commandKey;
    this.executionResult=ExecutionResult.from(events).setExecutionLatency(latency);
    this.cacheKey=null;
    this.collapserKey=null;
  }
  public SimpleExecution(  HystrixCommandKey commandKey,  int latency,  String cacheKey,  HystrixEventType... events){
    this.commandKey=commandKey;
    this.executionResult=ExecutionResult.from(events).setExecutionLatency(latency);
    this.cacheKey=cacheKey;
    this.collapserKey=null;
  }
  public SimpleExecution(  HystrixCommandKey commandKey,  String cacheKey){
    this.commandKey=commandKey;
    this.executionResult=ExecutionResult.from(HystrixEventType.RESPONSE_FROM_CACHE);
    this.cacheKey=cacheKey;
    this.collapserKey=null;
  }
  public SimpleExecution(  HystrixCommandKey commandKey,  int latency,  HystrixCollapserKey collapserKey,  int batchSize,  HystrixEventType... events){
    this.commandKey=commandKey;
    ExecutionResult interimResult=ExecutionResult.from(events).setExecutionLatency(latency);
    for (int i=0; i < batchSize; i++) {
      interimResult=interimResult.addEvent(HystrixEventType.COLLAPSED);
    }
    this.executionResult=interimResult;
    this.cacheKey=null;
    this.collapserKey=collapserKey;
  }
  @Override public HystrixCommandGroupKey getCommandGroup(){
    return groupKey;
  }
  @Override public HystrixCommandKey getCommandKey(){
    return commandKey;
  }
  @Override public HystrixThreadPoolKey getThreadPoolKey(){
    return threadPoolKey;
  }
  @Override public String getPublicCacheKey(){
    return cacheKey;
  }
  @Override public HystrixCollapserKey getOriginatingCollapserKey(){
    return collapserKey;
  }
  @Override public HystrixCommandMetrics getMetrics(){
    return null;
  }
  @Override public HystrixCommandProperties getProperties(){
    return null;
  }
  @Override public boolean isCircuitBreakerOpen(){
    return false;
  }
  @Override public boolean isExecutionComplete(){
    return true;
  }
  @Override public boolean isExecutedInThread(){
    return false;
  }
  @Override public boolean isSuccessfulExecution(){
    return executionResult.getEventCounts().contains(HystrixEventType.SUCCESS);
  }
  @Override public boolean isFailedExecution(){
    return executionResult.getEventCounts().contains(HystrixEventType.FAILURE);
  }
  @Override public Throwable getFailedExecutionException(){
    return null;
  }
  @Override public boolean isResponseFromFallback(){
    return executionResult.getEventCounts().contains(HystrixEventType.FALLBACK_SUCCESS);
  }
  @Override public boolean isResponseTimedOut(){
    return executionResult.getEventCounts().contains(HystrixEventType.TIMEOUT);
  }
  @Override public boolean isResponseShortCircuited(){
    return executionResult.getEventCounts().contains(HystrixEventType.SHORT_CIRCUITED);
  }
  @Override public boolean isResponseFromCache(){
    return executionResult.getEventCounts().contains(HystrixEventType.RESPONSE_FROM_CACHE);
  }
  @Override public boolean isResponseRejected(){
    return executionResult.isResponseRejected();
  }
  @Override public boolean isResponseSemaphoreRejected(){
    return executionResult.getEventCounts().contains(HystrixEventType.SEMAPHORE_REJECTED);
  }
  @Override public boolean isResponseThreadPoolRejected(){
    return executionResult.getEventCounts().contains(HystrixEventType.THREAD_POOL_REJECTED);
  }
  @Override public List<HystrixEventType> getExecutionEvents(){
    return executionResult.getOrderedList();
  }
  @Override public int getNumberEmissions(){
    return executionResult.getEventCounts().getCount(HystrixEventType.EMIT);
  }
  @Override public int getNumberFallbackEmissions(){
    return executionResult.getEventCounts().getCount(HystrixEventType.FALLBACK_EMIT);
  }
  @Override public int getNumberCollapsed(){
    return executionResult.getEventCounts().getCount(HystrixEventType.COLLAPSED);
  }
  @Override public int getExecutionTimeInMilliseconds(){
    return executionResult.getExecutionLatency();
  }
  @Override public long getCommandRunStartTimeInNanos(){
    return System.currentTimeMillis();
  }
  @Override public ExecutionResult.EventCounts getEventCounts(){
    return executionResult.getEventCounts();
  }
  @Override public String toString(){
    return "SimpleExecution{" + "commandKey=" + commandKey.name() + ", executionResult="+ executionResult+ ", cacheKey='"+ cacheKey+ '\''+ ", collapserKey="+ collapserKey+ '}';
  }
}
