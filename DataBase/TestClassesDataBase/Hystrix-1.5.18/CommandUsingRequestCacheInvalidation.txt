/** 
 * Example  {@link HystrixCommand} implementation for handling the get-set-get use case withina single request context so that the "set" can invalidate the cached "get".
 */
public class CommandUsingRequestCacheInvalidation {
  private static volatile String prefixStoredOnRemoteDataStore="ValueBeforeSet_";
public static class GetterCommand extends HystrixCommand<String> {
    private static final HystrixCommandKey GETTER_KEY=HystrixCommandKey.Factory.asKey("GetterCommand");
    private final int id;
    public GetterCommand(    int id){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("GetSetGet")).andCommandKey(GETTER_KEY));
      this.id=id;
    }
    @Override protected String run(){
      return prefixStoredOnRemoteDataStore + id;
    }
    @Override protected String getCacheKey(){
      return String.valueOf(id);
    }
    /** 
 * Allow the cache to be flushed for this object.
 * @param id argument that would normally be passed to the command
 */
    public static void flushCache(    int id){
      HystrixRequestCache.getInstance(GETTER_KEY,HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));
    }
  }
public static class SetterCommand extends HystrixCommand<Void> {
    private final int id;
    private final String prefix;
    public SetterCommand(    int id,    String prefix){
      super(HystrixCommandGroupKey.Factory.asKey("GetSetGet"));
      this.id=id;
      this.prefix=prefix;
    }
    @Override protected Void run(){
      prefixStoredOnRemoteDataStore=prefix;
      GetterCommand.flushCache(id);
      return null;
    }
  }
public static class UnitTest {
    @Test public void getGetSetGet(){
      HystrixRequestContext context=HystrixRequestContext.initializeContext();
      try {
        assertEquals("ValueBeforeSet_1",new GetterCommand(1).execute());
        GetterCommand commandAgainstCache=new GetterCommand(1);
        assertEquals("ValueBeforeSet_1",commandAgainstCache.execute());
        assertTrue(commandAgainstCache.isResponseFromCache());
        new SetterCommand(1,"ValueAfterSet_").execute();
        GetterCommand commandAfterSet=new GetterCommand(1);
        assertFalse(commandAfterSet.isResponseFromCache());
        assertEquals("ValueAfterSet_1",commandAfterSet.execute());
      }
  finally {
        context.shutdown();
      }
    }
  }
}
