private static class AbstractFlexibleTestHystrixCommand extends TestHystrixCommand<Integer> {
  protected final AbstractTestHystrixCommand.ExecutionResult executionResult;
  protected final int executionLatency;
  protected final CacheEnabled cacheEnabled;
  protected final Object value;
  AbstractFlexibleTestHystrixCommand(  HystrixCommandKey commandKey,  ExecutionIsolationStrategy isolationStrategy,  AbstractTestHystrixCommand.ExecutionResult executionResult,  int executionLatency,  TestCircuitBreaker circuitBreaker,  HystrixThreadPool threadPool,  int timeout,  CacheEnabled cacheEnabled,  Object value,  TryableSemaphore executionSemaphore,  TryableSemaphore fallbackSemaphore,  boolean circuitBreakerDisabled){
    super(testPropsBuilder(circuitBreaker).setCommandKey(commandKey).setCircuitBreaker(circuitBreaker).setMetrics(circuitBreaker.metrics).setThreadPool(threadPool).setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationStrategy(isolationStrategy).withExecutionTimeoutInMilliseconds(timeout).withCircuitBreakerEnabled(!circuitBreakerDisabled)).setExecutionSemaphore(executionSemaphore).setFallbackSemaphore(fallbackSemaphore));
    this.executionResult=executionResult;
    this.executionLatency=executionLatency;
    this.cacheEnabled=cacheEnabled;
    this.value=value;
  }
  @Override protected Integer run() throws Exception {
    System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " starting the run() method");
    addLatency(executionLatency);
    if (executionResult == AbstractTestHystrixCommand.ExecutionResult.SUCCESS) {
      return FlexibleTestHystrixCommand.EXECUTE_VALUE;
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.FAILURE) {
      throw new RuntimeException("Execution Failure for TestHystrixCommand");
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.NOT_WRAPPED_FAILURE) {
      throw new NotWrappedByHystrixTestRuntimeException();
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.HYSTRIX_FAILURE) {
      throw new HystrixRuntimeException(HystrixRuntimeException.FailureType.COMMAND_EXCEPTION,AbstractFlexibleTestHystrixCommand.class,"Execution Hystrix Failure for TestHystrixCommand",new RuntimeException("Execution Failure for TestHystrixCommand"),new RuntimeException("Fallback Failure for TestHystrixCommand"));
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.RECOVERABLE_ERROR) {
      throw new java.lang.Error("Execution ERROR for TestHystrixCommand");
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.UNRECOVERABLE_ERROR) {
      throw new StackOverflowError("Unrecoverable Error for TestHystrixCommand");
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.BAD_REQUEST) {
      throw new HystrixBadRequestException("Execution BadRequestException for TestHystrixCommand");
    }
 else     if (executionResult == AbstractTestHystrixCommand.ExecutionResult.BAD_REQUEST_NOT_WRAPPED) {
      throw new HystrixBadRequestException("Execution BadRequestException for TestHystrixCommand",new NotWrappedByHystrixTestRuntimeException());
    }
 else {
      throw new RuntimeException("You passed in a executionResult enum that can't be represented in HystrixCommand: " + executionResult);
    }
  }
  @Override public String getCacheKey(){
    if (cacheEnabled == CacheEnabled.YES)     return value.toString();
 else     return null;
  }
  protected void addLatency(  int latency){
    if (latency > 0) {
      try {
        System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " About to sleep for : "+ latency);
        Thread.sleep(latency);
        System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Woke up from sleep!");
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        try {
          Thread.sleep(latency);
        }
 catch (        Exception e2) {
        }
        System.out.println("after interruption with extra sleep");
      }
    }
  }
}
