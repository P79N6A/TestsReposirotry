public class RollingCollapserEventCounterStreamTest extends CommandStreamTest {
  HystrixRequestContext context;
  RollingCollapserEventCounterStream stream;
  private static Subscriber<long[]> getSubscriber(  final CountDownLatch latch){
    return new Subscriber<long[]>(){
      @Override public void onCompleted(){
        latch.countDown();
      }
      @Override public void onError(      Throwable e){
        fail(e.getMessage());
      }
      @Override public void onNext(      long[] eventCounts){
        System.out.println("OnNext @ " + System.currentTimeMillis() + " : "+ collapserEventsToStr(eventCounts));
      }
    }
;
  }
  @Before public void setUp(){
    context=HystrixRequestContext.initializeContext();
  }
  @After public void tearDown(){
    context.shutdown();
    stream.unsubscribe();
    RollingCollapserEventCounterStream.reset();
  }
  protected static String collapserEventsToStr(  long[] eventCounts){
    StringBuilder sb=new StringBuilder();
    sb.append("[");
    for (    HystrixEventType.Collapser eventType : HystrixEventType.Collapser.values()) {
      if (eventCounts[eventType.ordinal()] > 0) {
        sb.append(eventType.name()).append("->").append(eventCounts[eventType.ordinal()]).append(", ");
      }
    }
    sb.append("]");
    return sb.toString();
  }
  @Test public void testEmptyStreamProducesZeros(){
    HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey("RollingCollapser-A");
    stream=RollingCollapserEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertEquals(HystrixEventType.Collapser.values().length,stream.getLatest().length);
    assertEquals(0,stream.getLatest(HystrixEventType.Collapser.ADDED_TO_BATCH));
    assertEquals(0,stream.getLatest(HystrixEventType.Collapser.BATCH_EXECUTED));
    assertEquals(0,stream.getLatest(HystrixEventType.Collapser.RESPONSE_FROM_CACHE));
  }
  @Test public void testCollapsed(){
    HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey("RollingCollapser-B");
    stream=RollingCollapserEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    for (int i=0; i < 3; i++) {
      CommandStreamTest.Collapser.from(key,i).observe();
    }
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.Collapser.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.Collapser.values().length];
    expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()]=1;
    expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()]=3;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testCollapsedAndResponseFromCache(){
    HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey("RollingCollapser-C");
    stream=RollingCollapserEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    for (int i=0; i < 3; i++) {
      CommandStreamTest.Collapser.from(key,i).observe();
      CommandStreamTest.Collapser.from(key,i).observe();
      CommandStreamTest.Collapser.from(key,i).observe();
    }
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.Collapser.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.Collapser.values().length];
    expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()]=1;
    expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()]=3;
    expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()]=6;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
  @Test public void testCollapsedAndResponseFromCacheAgeOutOfRollingWindow(){
    HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey("RollingCollapser-D");
    stream=RollingCollapserEventCounterStream.getInstance(key,10,100);
    stream.startCachingStreamValuesIfUnstarted();
    final CountDownLatch latch=new CountDownLatch(1);
    stream.observe().take(30).subscribe(getSubscriber(latch));
    for (int i=0; i < 3; i++) {
      CommandStreamTest.Collapser.from(key,i).observe();
      CommandStreamTest.Collapser.from(key,i).observe();
      CommandStreamTest.Collapser.from(key,i).observe();
    }
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail("Interrupted ex");
    }
    assertEquals(HystrixEventType.Collapser.values().length,stream.getLatest().length);
    long[] expected=new long[HystrixEventType.Collapser.values().length];
    expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()]=0;
    expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()]=0;
    expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()]=0;
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertArrayEquals(expected,stream.getLatest());
  }
}
