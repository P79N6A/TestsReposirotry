private static class InterruptibleCommand extends TestHystrixObservableCommand<Boolean> {
  public InterruptibleCommand(  TestCircuitBreaker circuitBreaker,  boolean shouldInterrupt){
    super(testPropsBuilder().setCircuitBreaker(circuitBreaker).setMetrics(circuitBreaker.metrics).setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationThreadInterruptOnTimeout(shouldInterrupt).withExecutionTimeoutInMilliseconds(100)));
  }
  private volatile boolean hasBeenInterrupted;
  public boolean hasBeenInterrupted(){
    return hasBeenInterrupted;
  }
  @Override protected Observable<Boolean> construct(){
    return Observable.defer(new Func0<Observable<Boolean>>(){
      @Override public Observable<Boolean> call(){
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          System.out.println("Interrupted!");
          e.printStackTrace();
          hasBeenInterrupted=true;
        }
        return Observable.just(hasBeenInterrupted);
      }
    }
).subscribeOn(Schedulers.io());
  }
}
