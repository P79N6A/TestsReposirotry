/** 
 * Created by dmgcodevil
 */
public abstract class BasicCollapserPropertiesTest extends BasicHystrixTest {
  private UserService userService;
  protected abstract UserService createUserService();
  @Before public void setUp() throws Exception {
    userService=createUserService();
  }
  @Test public void testCollapser() throws ExecutionException, InterruptedException {
    User u1=userService.getUser("1");
    User u2=userService.getUser("2");
    User u3=userService.getUser("3");
    User u4=userService.getUser("4");
    assertEquals("name: 1",u1.getName());
    assertEquals("name: 2",u2.getName());
    assertEquals("name: 3",u3.getName());
    assertEquals("name: 4",u4.getName());
    assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
    HystrixInvokableInfo<?> command=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().iterator().next();
    assertEquals("getUsers",command.getCommandKey().name());
    assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));
    assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));
  }
public static class UserService {
    @HystrixCollapser(batchMethod="getUsers",collapserKey="GetUserCollapser",collapserProperties={@HystrixProperty(name=TIMER_DELAY_IN_MILLISECONDS,value="200"),@HystrixProperty(name=MAX_REQUESTS_IN_BATCH,value="1")}) public User getUser(    String id){
      return null;
    }
    @HystrixCommand public List<User> getUsers(    List<String> ids){
      List<User> users=new ArrayList<User>();
      for (      String id : ids) {
        users.add(new User(id,"name: " + id));
      }
      return users;
    }
  }
}
