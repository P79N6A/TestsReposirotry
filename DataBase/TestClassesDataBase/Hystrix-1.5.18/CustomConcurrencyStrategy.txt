public static class CustomConcurrencyStrategy extends HystrixConcurrencyStrategy {
  private final boolean useDefaultRequestContext;
  public CustomConcurrencyStrategy(  boolean useDefaultRequestContext){
    this.useDefaultRequestContext=useDefaultRequestContext;
  }
  @Override public <T>Callable<T> wrapCallable(  Callable<T> callable){
    return new LoggingCallable<T>(callable);
  }
  @Override public <T>HystrixRequestVariable<T> getRequestVariable(  HystrixRequestVariableLifecycle<T> rv){
    if (useDefaultRequestContext) {
      return super.getRequestVariable(rv);
    }
 else {
      return new HystrixRequestVariableDefault<T>(){
        @Override public T initialValue(){
          return null;
        }
        @Override public T get(){
          return null;
        }
        @Override public void set(        T value){
        }
        @Override public void remove(){
        }
        @Override public void shutdown(        T value){
        }
      }
;
    }
  }
}
