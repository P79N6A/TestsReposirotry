/** 
 * Created by dmgcodevil.
 */
@RunWith(DataProviderRunner.class) public class FallbackMethodTest {
  @Test public void testGetExtendedFallback() throws NoSuchMethodException {
    Method command=Service.class.getDeclaredMethod("command",String.class,Integer.class);
    Method extFallback=MethodProvider.getInstance().getFallbackMethod(Service.class,command).getMethod();
    assertParamsTypes(extFallback,String.class,Integer.class,Throwable.class);
  }
  @Test @DataProvider({"true","false"}) public void testGetFallbackForExtendedCommand(  boolean extended) throws NoSuchMethodException {
    Method extFallback=Service.class.getDeclaredMethod("extCommand",String.class,Integer.class,Throwable.class);
    Method fallback=MethodProvider.getInstance().getFallbackMethod(Service.class,extFallback,extended).getMethod();
    assertParamsTypes(fallback,String.class,Integer.class,Throwable.class);
  }
  public void testGetFallbackForExtendedCommandV2() throws NoSuchMethodException {
    Method extFallback=Service.class.getDeclaredMethod("extCommandV2",String.class,Integer.class,Throwable.class);
    Method fallback=MethodProvider.getInstance().getFallbackMethod(Service.class,extFallback,true).getMethod();
    assertParamsTypes(fallback,String.class,Integer.class);
  }
  public void testGetFallbackForExtendedCommandV2_extendedParameterFalse() throws NoSuchMethodException {
    Method extFallback=Service.class.getDeclaredMethod("extCommandV2",String.class,Integer.class,Throwable.class);
    Method fallback=MethodProvider.getInstance().getFallbackMethod(Service.class,extFallback,false).getMethod();
    assertNull(fallback);
  }
  private static void assertParamsTypes(  Method method,  Class<?>... expected){
    assertEquals(expected.length,method.getParameterTypes().length);
    Class<?>[] actual=method.getParameterTypes();
    assertArrayEquals(expected,actual);
  }
private static class Common {
    private String fallback(    String s,    Integer i){
      return null;
    }
    private String fallbackV2(    String s,    Integer i){
      return null;
    }
  }
private static class Service extends Common {
    @HystrixCommand(fallbackMethod="fallback") public String command(    String s,    Integer i){
      return null;
    }
    @HystrixCommand(fallbackMethod="fallback") public String extCommand(    String s,    Integer i,    Throwable throwable){
      return null;
    }
    @HystrixCommand(fallbackMethod="fallbackV2") public String extCommandV2(    String s,    Integer i,    Throwable throwable){
      return null;
    }
    public String fallback(    String s,    Integer i,    Throwable throwable){
      return null;
    }
  }
}
