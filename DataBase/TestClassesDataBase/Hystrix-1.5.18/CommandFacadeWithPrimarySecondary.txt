/** 
 * Sample  {@link HystrixCommand} pattern using a semaphore-isolated commandthat conditionally invokes thread-isolated commands.
 */
public class CommandFacadeWithPrimarySecondary extends HystrixCommand<String> {
  private final static DynamicBooleanProperty usePrimary=DynamicPropertyFactory.getInstance().getBooleanProperty("primarySecondary.usePrimary",true);
  private final int id;
  public CommandFacadeWithPrimarySecondary(  int id){
    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("SystemX")).andCommandKey(HystrixCommandKey.Factory.asKey("PrimarySecondaryCommand")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));
    this.id=id;
  }
  @Override protected String run(){
    if (usePrimary.get()) {
      return new PrimaryCommand(id).execute();
    }
 else {
      return new SecondaryCommand(id).execute();
    }
  }
  @Override protected String getFallback(){
    return "static-fallback-" + id;
  }
  @Override protected String getCacheKey(){
    return String.valueOf(id);
  }
private static class PrimaryCommand extends HystrixCommand<String> {
    private final int id;
    private PrimaryCommand(    int id){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("SystemX")).andCommandKey(HystrixCommandKey.Factory.asKey("PrimaryCommand")).andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey("PrimaryCommand")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(600)));
      this.id=id;
    }
    @Override protected String run(){
      return "responseFromPrimary-" + id;
    }
  }
private static class SecondaryCommand extends HystrixCommand<String> {
    private final int id;
    private SecondaryCommand(    int id){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("SystemX")).andCommandKey(HystrixCommandKey.Factory.asKey("SecondaryCommand")).andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey("SecondaryCommand")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(100)));
      this.id=id;
    }
    @Override protected String run(){
      return "responseFromSecondary-" + id;
    }
  }
public static class UnitTest {
    @Test public void testPrimary(){
      HystrixRequestContext context=HystrixRequestContext.initializeContext();
      try {
        ConfigurationManager.getConfigInstance().setProperty("primarySecondary.usePrimary",true);
        assertEquals("responseFromPrimary-20",new CommandFacadeWithPrimarySecondary(20).execute());
      }
  finally {
        context.shutdown();
        ConfigurationManager.getConfigInstance().clear();
      }
    }
    @Test public void testSecondary(){
      HystrixRequestContext context=HystrixRequestContext.initializeContext();
      try {
        ConfigurationManager.getConfigInstance().setProperty("primarySecondary.usePrimary",false);
        assertEquals("responseFromSecondary-20",new CommandFacadeWithPrimarySecondary(20).execute());
      }
  finally {
        context.shutdown();
        ConfigurationManager.getConfigInstance().clear();
      }
    }
  }
}
