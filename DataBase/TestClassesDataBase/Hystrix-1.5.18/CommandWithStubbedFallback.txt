/** 
 * Sample  {@link HystrixCommand} that implements a fallback that returns an objectcombining defaults and injected values from elsewhere in the system (such as HTTP request headers, arguments and cookies or other services previously executed).
 */
public class CommandWithStubbedFallback extends HystrixCommand<UserAccount> {
  private final int customerId;
  private final String countryCodeFromGeoLookup;
  /** 
 * @param customerId The customerID to retrieve UserAccount for
 * @param countryCodeFromGeoLookup The default country code from the HTTP request geo code lookup used for fallback.
 */
  protected CommandWithStubbedFallback(  int customerId,  String countryCodeFromGeoLookup){
    super(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"));
    this.customerId=customerId;
    this.countryCodeFromGeoLookup=countryCodeFromGeoLookup;
  }
  @Override protected UserAccount run(){
    throw new RuntimeException("forcing failure for example");
  }
  @Override protected UserAccount getFallback(){
    return new UserAccount(customerId,"Unknown Name",countryCodeFromGeoLookup,true,true,false);
  }
public static class UserAccount {
    private final int customerId;
    private final String name;
    private final String countryCode;
    private final boolean isFeatureXPermitted;
    private final boolean isFeatureYPermitted;
    private final boolean isFeatureZPermitted;
    UserAccount(    int customerId,    String name,    String countryCode,    boolean isFeatureXPermitted,    boolean isFeatureYPermitted,    boolean isFeatureZPermitted){
      this.customerId=customerId;
      this.name=name;
      this.countryCode=countryCode;
      this.isFeatureXPermitted=isFeatureXPermitted;
      this.isFeatureYPermitted=isFeatureYPermitted;
      this.isFeatureZPermitted=isFeatureZPermitted;
    }
  }
public static class UnitTest {
    @Test public void test(){
      CommandWithStubbedFallback command=new CommandWithStubbedFallback(1234,"ca");
      UserAccount account=command.execute();
      assertTrue(command.isFailedExecution());
      assertTrue(command.isResponseFromFallback());
      assertEquals(1234,account.customerId);
      assertEquals("ca",account.countryCode);
      assertEquals(true,account.isFeatureXPermitted);
      assertEquals(true,account.isFeatureYPermitted);
      assertEquals(false,account.isFeatureZPermitted);
    }
  }
}
