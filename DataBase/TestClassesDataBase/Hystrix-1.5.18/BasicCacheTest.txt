/** 
 * Created by dmgcodevil
 */
public abstract class BasicCacheTest extends BasicHystrixTest {
  private UserService userService;
  @Before public void setUp() throws Exception {
    userService=createUserService();
  }
  protected abstract UserService createUserService();
  /** 
 * Get-Set-Get with Request Cache Invalidation Test. <p/> given: command to get user by id, see  {@link UserService#getUserById(String)}command to update user, see  {@link UserService#update(com.netflix.hystrix.contrib.javanica.test.common.domain.User)}<p/> when: 1. call  {@link UserService#getUserById(String)}2. call  {@link UserService#getUserById(String)}3. call  {@link UserService#update(com.netflix.hystrix.contrib.javanica.test.common.domain.User)}4. call  {@link UserService#getUserById(String)}<p/> then: at the first time "getUserById" command shouldn't retrieve value from cache at the second time "getUserById" command should retrieve value from cache "update" method should update an user and flush cache related to "getUserById" command after "update" method execution "getUserById" command shouldn't retrieve value from cache
 */
  @Test public void testGetSetGetUserCache_givenTwoCommands(){
    User user=userService.getUserById("1");
    HystrixInvokableInfo<?> getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("name",user.getName());
    user=userService.getUserById("1");
    assertEquals("1",user.getId());
    getUserByIdCommand=getLastExecutedCommand();
    assertTrue(getUserByIdCommand.isResponseFromCache());
    assertEquals("name",user.getName());
    user=new User("1","new_name");
    userService.update(user);
    user=userService.getUserById("1");
    getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("new_name",user.getName());
    resetContext();
    user=userService.getUserById("1");
    getUserByIdCommand=getLastExecutedCommand();
    assertEquals("1",user.getId());
    assertFalse(getUserByIdCommand.isResponseFromCache());
  }
  @Test public void testGetSetGetUserCache_givenGetUserByEmailAndUpdateProfile(){
    User user=userService.getUserByEmail("email");
    HystrixInvokableInfo<?> getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("name",user.getName());
    assertEquals("email",user.getProfile().getEmail());
    user=userService.getUserByEmail("email");
    assertEquals("1",user.getId());
    getUserByIdCommand=getLastExecutedCommand();
    assertTrue(getUserByIdCommand.isResponseFromCache());
    assertEquals("email",user.getProfile().getEmail());
    Profile profile=new Profile();
    profile.setEmail("new_email");
    user.setProfile(profile);
    userService.updateProfile(user);
    user=userService.getUserByEmail("new_email");
    getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("name",user.getName());
    assertEquals("new_email",user.getProfile().getEmail());
    resetContext();
    user=userService.getUserByEmail("new_email");
    getUserByIdCommand=getLastExecutedCommand();
    assertEquals("1",user.getId());
    assertFalse(getUserByIdCommand.isResponseFromCache());
  }
  @Test public void testGetSetGetUserCache_givenOneCommandAndOneMethodAnnotatedWithCacheRemove(){
    User user=userService.getUserById("1");
    HystrixInvokableInfo<?> getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("name",user.getName());
    user=userService.getUserById("1");
    assertEquals("1",user.getId());
    getUserByIdCommand=getLastExecutedCommand();
    assertTrue(getUserByIdCommand.isResponseFromCache());
    assertEquals("name",user.getName());
    userService.updateName("1","new_name");
    user=userService.getUserById("1");
    getUserByIdCommand=getLastExecutedCommand();
    assertFalse(getUserByIdCommand.isResponseFromCache());
    assertEquals("1",user.getId());
    assertEquals("new_name",user.getName());
    resetContext();
    user=userService.getUserById("1");
    getUserByIdCommand=getLastExecutedCommand();
    assertEquals("1",user.getId());
    assertFalse(getUserByIdCommand.isResponseFromCache());
  }
  @Test(expected=HystrixCachingException.class) public void testGetUser_givenWrongCacheKeyMethodReturnType_shouldThrowException(){
    HystrixRequestContext context=HystrixRequestContext.initializeContext();
    try {
      User user=userService.getUserByName("name");
    }
  finally {
      context.shutdown();
    }
  }
  @Test(expected=HystrixCachingException.class) public void testGetUserByName_givenNonexistentCacheKeyMethod_shouldThrowException(){
    HystrixRequestContext context=HystrixRequestContext.initializeContext();
    try {
      User user=userService.getUser();
    }
  finally {
      context.shutdown();
    }
  }
public static class UserService {
    private Map<String,User> storage=new ConcurrentHashMap<String,User>();
    @PostConstruct public void init(){
      User user=new User("1","name");
      Profile profile=new Profile();
      profile.setEmail("email");
      user.setProfile(profile);
      storage.put("1",user);
    }
    @CacheResult @HystrixCommand public User getUserById(    @CacheKey String id){
      return storage.get(id);
    }
    @CacheResult(cacheKeyMethod="getUserByNameCacheKey") @HystrixCommand public User getUserByName(    String name){
      return null;
    }
    private Long getUserByNameCacheKey(){
      return 0L;
    }
    @CacheResult(cacheKeyMethod="nonexistent") @HystrixCommand public User getUser(){
      return null;
    }
    @CacheResult(cacheKeyMethod="getUserByEmailCacheKey") @HystrixCommand public User getUserByEmail(    final String email){
      return Iterables.tryFind(storage.values(),new Predicate<User>(){
        @Override public boolean apply(        User input){
          return input.getProfile().getEmail().equalsIgnoreCase(email);
        }
      }
).orNull();
    }
    private String getUserByEmailCacheKey(    String email){
      return email;
    }
    @CacheRemove(commandKey="getUserById") @HystrixCommand public void update(    @CacheKey("id") User user){
      storage.put(user.getId(),user);
    }
    @CacheRemove(commandKey="getUserByEmail") @HystrixCommand public void updateProfile(    @CacheKey("profile.email") User user){
      storage.get(user.getId()).setProfile(user.getProfile());
    }
    @CacheRemove(commandKey="getUserById") public void updateName(    @CacheKey String id,    String name){
      storage.get(id).setName(name);
    }
  }
}
