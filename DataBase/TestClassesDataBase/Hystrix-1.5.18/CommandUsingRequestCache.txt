/** 
 * Sample  {@link HystrixCommand} showing how implementing the {@link #getCacheKey()} methodenables request caching for eliminating duplicate calls within the same request context.
 */
public class CommandUsingRequestCache extends HystrixCommand<Boolean> {
  private final int value;
  protected CommandUsingRequestCache(  int value){
    super(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"));
    this.value=value;
  }
  @Override protected Boolean run(){
    return value == 0 || value % 2 == 0;
  }
  @Override protected String getCacheKey(){
    return String.valueOf(value);
  }
public static class UnitTest {
    @Test public void testWithoutCacheHits(){
      HystrixRequestContext context=HystrixRequestContext.initializeContext();
      try {
        assertTrue(new CommandUsingRequestCache(2).execute());
        assertFalse(new CommandUsingRequestCache(1).execute());
        assertTrue(new CommandUsingRequestCache(0).execute());
        assertTrue(new CommandUsingRequestCache(58672).execute());
      }
  finally {
        context.shutdown();
      }
    }
    @Test public void testWithCacheHits(){
      HystrixRequestContext context=HystrixRequestContext.initializeContext();
      try {
        CommandUsingRequestCache command2a=new CommandUsingRequestCache(2);
        CommandUsingRequestCache command2b=new CommandUsingRequestCache(2);
        assertTrue(command2a.execute());
        assertFalse(command2a.isResponseFromCache());
        assertTrue(command2b.execute());
        assertTrue(command2b.isResponseFromCache());
      }
  finally {
        context.shutdown();
      }
      context=HystrixRequestContext.initializeContext();
      try {
        CommandUsingRequestCache command3b=new CommandUsingRequestCache(2);
        assertTrue(command3b.execute());
        assertFalse(command3b.isResponseFromCache());
      }
  finally {
        context.shutdown();
      }
    }
  }
}
