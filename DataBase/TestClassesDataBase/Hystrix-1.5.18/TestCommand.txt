private static class TestCommand extends HystrixCommand<String> {
  private final String value;
  private final boolean fail;
  private final boolean failOnFallback;
  private final boolean timeout;
  private final boolean useFallback;
  private final boolean useCache;
  public TestCommand(  String commandName,  String value,  boolean fail,  boolean failOnFallback){
    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("RequestLogTestCommand")).andCommandKey(HystrixCommandKey.Factory.asKey(commandName)));
    this.value=value;
    this.fail=fail;
    this.failOnFallback=failOnFallback;
    this.timeout=false;
    this.useFallback=true;
    this.useCache=true;
  }
  public TestCommand(  String value,  boolean fail,  boolean failOnFallback){
    super(HystrixCommandGroupKey.Factory.asKey("RequestLogTestCommand"));
    this.value=value;
    this.fail=fail;
    this.failOnFallback=failOnFallback;
    this.timeout=false;
    this.useFallback=true;
    this.useCache=true;
  }
  public TestCommand(  String value,  boolean fail,  boolean failOnFallback,  boolean timeout){
    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("RequestLogTestCommand")).andCommandPropertiesDefaults(new HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(500)));
    this.value=value;
    this.fail=fail;
    this.failOnFallback=failOnFallback;
    this.timeout=timeout;
    this.useFallback=false;
    this.useCache=false;
  }
  @Override protected String run(){
    System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis());
    if (fail) {
      throw new RuntimeException("forced failure");
    }
 else     if (timeout) {
      try {
        Thread.sleep(10000);
        System.out.println("Woke up from sleep!");
      }
 catch (      InterruptedException ex) {
        System.out.println(Thread.currentThread().getName() + " Interrupted by timeout");
      }
    }
    return value;
  }
  @Override protected String getFallback(){
    if (useFallback) {
      if (failOnFallback) {
        throw new RuntimeException("forced fallback failure");
      }
 else {
        return value + "-fallback";
      }
    }
 else {
      throw new UnsupportedOperationException("no fallback implemented");
    }
  }
  @Override protected String getCacheKey(){
    if (useCache) {
      return value;
    }
 else {
      return null;
    }
  }
}
