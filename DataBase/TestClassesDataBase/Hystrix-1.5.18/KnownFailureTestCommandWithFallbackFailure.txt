/** 
 * Failed execution - fallback implementation throws exception.
 */
private static class KnownFailureTestCommandWithFallbackFailure extends TestHystrixObservableCommand<Boolean> {
  private final boolean asyncConstructException;
  private final boolean asyncFallbackException;
  private KnownFailureTestCommandWithFallbackFailure(  TestCircuitBreaker circuitBreaker,  ExecutionIsolationStrategy isolationStrategy,  boolean asyncConstructException,  boolean asyncFallbackException){
    super(testPropsBuilder(isolationStrategy,circuitBreaker).setMetrics(circuitBreaker.metrics));
    this.asyncConstructException=asyncConstructException;
    this.asyncFallbackException=asyncFallbackException;
  }
  @Override protected Observable<Boolean> construct(){
    RuntimeException ex=new RuntimeException("we failed with a simulated issue");
    System.out.println("*** simulated failed execution ***");
    if (asyncConstructException) {
      return Observable.error(ex);
    }
 else {
      throw ex;
    }
  }
  @Override protected Observable<Boolean> resumeWithFallback(){
    RuntimeException ex=new RuntimeException("failed while getting fallback");
    if (asyncFallbackException) {
      return Observable.error(ex);
    }
 else {
      throw ex;
    }
  }
}
