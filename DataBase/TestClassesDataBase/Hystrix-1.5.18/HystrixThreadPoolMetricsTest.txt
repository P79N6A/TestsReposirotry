public class HystrixThreadPoolMetricsTest {
  private static final HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("HystrixThreadPoolMetrics-UnitTest");
  private static final HystrixThreadPoolKey tpKey=HystrixThreadPoolKey.Factory.asKey("HystrixThreadPoolMetrics-ThreadPool");
  @Before public void resetAll(){
    HystrixThreadPoolMetrics.reset();
  }
  @Test public void shouldYieldNoExecutedTasksOnStartup() throws Exception {
    final Collection<HystrixThreadPoolMetrics> instances=HystrixThreadPoolMetrics.getInstances();
    assertEquals(0,instances.size());
  }
  @Test @Ignore("Flaky test") public void shouldReturnOneExecutedTask() throws Exception {
    RollingThreadPoolEventCounterStream.getInstance(tpKey,10,100).startCachingStreamValuesIfUnstarted();
    new NoOpHystrixCommand().execute();
    Thread.sleep(100);
    final Collection<HystrixThreadPoolMetrics> instances=HystrixThreadPoolMetrics.getInstances();
    assertEquals(1,instances.size());
    HystrixThreadPoolMetrics metrics=instances.iterator().next();
    assertEquals(1,instances.iterator().next().getRollingCountThreadsExecuted());
  }
private static class NoOpHystrixCommand extends HystrixCommand<Void> {
    public NoOpHystrixCommand(){
      super(Setter.withGroupKey(groupKey).andThreadPoolKey(tpKey).andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(100)));
    }
    @Override protected Void run() throws Exception {
      System.out.println("Run in thread : " + Thread.currentThread().getName());
      return null;
    }
  }
}
