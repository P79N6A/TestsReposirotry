/** 
 * Threadpool with 1 thread, queue of size 1
 */
protected static class SingleThreadedPoolWithQueue implements HystrixThreadPool {
  final LinkedBlockingQueue<Runnable> queue;
  final ThreadPoolExecutor pool;
  private final int rejectionQueueSizeThreshold;
  public SingleThreadedPoolWithQueue(  int queueSize){
    this(queueSize,100);
  }
  public SingleThreadedPoolWithQueue(  int queueSize,  int rejectionQueueSizeThreshold){
    queue=new LinkedBlockingQueue<Runnable>(queueSize);
    pool=new ThreadPoolExecutor(1,1,1,TimeUnit.MINUTES,queue);
    this.rejectionQueueSizeThreshold=rejectionQueueSizeThreshold;
  }
  @Override public ThreadPoolExecutor getExecutor(){
    return pool;
  }
  @Override public Scheduler getScheduler(){
    return new HystrixContextScheduler(HystrixPlugins.getInstance().getConcurrencyStrategy(),this);
  }
  @Override public Scheduler getScheduler(  Func0<Boolean> shouldInterruptThread){
    return new HystrixContextScheduler(HystrixPlugins.getInstance().getConcurrencyStrategy(),this,shouldInterruptThread);
  }
  @Override public void markThreadExecution(){
  }
  @Override public void markThreadCompletion(){
  }
  @Override public void markThreadRejection(){
  }
  @Override public boolean isQueueSpaceAvailable(){
    return queue.size() < rejectionQueueSizeThreshold;
  }
}
