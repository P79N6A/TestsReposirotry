private static class TestCollapserCommand extends TestHystrixObservableCommand<String> {
  private final Collection<CollapsedRequest<String,String>> requests;
  TestCollapserCommand(  Collection<CollapsedRequest<String,String>> requests){
    super(testPropsBuilder().setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(1000)));
    this.requests=requests;
  }
  @Override protected Observable<String> construct(){
    return Observable.create(new OnSubscribe<String>(){
      @Override public void call(      Subscriber<? super String> s){
        System.out.println(">>> TestCollapserCommand run() ... batch size: " + requests.size());
        for (        CollapsedRequest<String,String> request : requests) {
          if (request.getArgument() == null) {
            throw new NullPointerException("Simulated Error");
          }
          if (request.getArgument().equals("TIMEOUT")) {
            try {
              Thread.sleep(200);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          s.onNext(request.getArgument());
        }
        s.onCompleted();
      }
    }
).subscribeOn(Schedulers.computation());
  }
}
