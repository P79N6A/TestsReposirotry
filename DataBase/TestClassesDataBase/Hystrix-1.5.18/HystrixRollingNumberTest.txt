public class HystrixRollingNumberTest {
  @Test public void testCreatesBuckets(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      assertEquals(200,counter.timeInMilliseconds);
      assertEquals(10,counter.numberOfBuckets);
      assertEquals(20,counter.bucketSizeInMillseconds);
      assertEquals(0,counter.buckets.size());
      for (int i=0; i < counter.numberOfBuckets; i++) {
        counter.increment(HystrixRollingNumberEvent.SUCCESS);
        time.increment(counter.bucketSizeInMillseconds);
      }
      assertEquals(10,counter.buckets.size());
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(10,counter.buckets.size());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testResetBuckets(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      assertEquals(0,counter.buckets.size());
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(1,counter.buckets.size());
      assertEquals(1,counter.buckets.size());
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(1,counter.buckets.size());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testEmptyBucketsFillIn(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(1,counter.buckets.size());
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(4,counter.buckets.size());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testIncrementInSingleBucket(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      assertEquals(1,counter.buckets.size());
      assertEquals(4,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SUCCESS).sum());
      assertEquals(2,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.FAILURE).sum());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.TIMEOUT).sum());
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testTimeout(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      assertEquals(1,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.TIMEOUT).sum());
      assertEquals(1,counter.getRollingSum(HystrixRollingNumberEvent.TIMEOUT));
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      assertEquals(4,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.TIMEOUT).sum());
      assertEquals(2,counter.getRollingSum(HystrixRollingNumberEvent.TIMEOUT));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testShortCircuited(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.SHORT_CIRCUITED);
      assertEquals(1,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SHORT_CIRCUITED).sum());
      assertEquals(1,counter.getRollingSum(HystrixRollingNumberEvent.SHORT_CIRCUITED));
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.increment(HystrixRollingNumberEvent.SHORT_CIRCUITED);
      assertEquals(4,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SHORT_CIRCUITED).sum());
      assertEquals(2,counter.getRollingSum(HystrixRollingNumberEvent.SHORT_CIRCUITED));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testThreadPoolRejection(){
    testCounterType(HystrixRollingNumberEvent.THREAD_POOL_REJECTED);
  }
  @Test public void testFallbackSuccess(){
    testCounterType(HystrixRollingNumberEvent.FALLBACK_SUCCESS);
  }
  @Test public void testFallbackFailure(){
    testCounterType(HystrixRollingNumberEvent.FALLBACK_FAILURE);
  }
  @Test public void testExceptionThrow(){
    testCounterType(HystrixRollingNumberEvent.EXCEPTION_THROWN);
  }
  private void testCounterType(  HystrixRollingNumberEvent type){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(type);
      assertEquals(1,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(type).sum());
      assertEquals(1,counter.getRollingSum(type));
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.increment(type);
      assertEquals(4,counter.buckets.size());
      assertEquals(1,counter.buckets.getLast().getAdder(type).sum());
      assertEquals(2,counter.getRollingSum(type));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testIncrementInMultipleBuckets(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      counter.increment(HystrixRollingNumberEvent.SHORT_CIRCUITED);
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.TIMEOUT);
      counter.increment(HystrixRollingNumberEvent.SHORT_CIRCUITED);
      assertEquals(4,counter.buckets.size());
      assertEquals(2,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SUCCESS).sum());
      assertEquals(3,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.FAILURE).sum());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.TIMEOUT).sum());
      assertEquals(1,counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SHORT_CIRCUITED).sum());
      assertEquals(6,counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS));
      assertEquals(5,counter.getRollingSum(HystrixRollingNumberEvent.FAILURE));
      assertEquals(3,counter.getRollingSum(HystrixRollingNumberEvent.TIMEOUT));
      assertEquals(2,counter.getRollingSum(HystrixRollingNumberEvent.SHORT_CIRCUITED));
      time.increment(counter.timeInMilliseconds);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(1,counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS));
      assertEquals(0,counter.getRollingSum(HystrixRollingNumberEvent.FAILURE));
      assertEquals(0,counter.getRollingSum(HystrixRollingNumberEvent.TIMEOUT));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testCounterRetrievalRefreshesBuckets(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      counter.increment(HystrixRollingNumberEvent.FAILURE);
      time.increment(counter.bucketSizeInMillseconds * 3);
      assertEquals(1,counter.buckets.size());
      assertEquals(4,counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS));
      assertEquals(2,counter.getRollingSum(HystrixRollingNumberEvent.FAILURE));
      assertEquals(4,counter.buckets.size());
      time.increment(counter.timeInMilliseconds);
      assertEquals(0,counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS));
      assertEquals(0,counter.getRollingSum(HystrixRollingNumberEvent.FAILURE));
      counter.increment(HystrixRollingNumberEvent.SUCCESS);
      assertEquals(1,counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS));
      assertEquals(0,counter.getRollingSum(HystrixRollingNumberEvent.FAILURE));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testUpdateMax1(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,10);
      assertEquals(1,counter.buckets.size());
      assertEquals(10,counter.buckets.getLast().getMaxUpdater(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE).max());
      assertEquals(10,counter.getRollingMaxValue(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE));
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,20);
      assertEquals(4,counter.buckets.size());
      assertEquals(20,counter.buckets.getLast().getMaxUpdater(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE).max());
      long values[]=counter.getValues(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE);
      assertEquals(10,values[0]);
      assertEquals(0,values[1]);
      assertEquals(0,values[2]);
      assertEquals(20,values[3]);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testUpdateMax2(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,10);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,30);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,20);
      assertEquals(1,counter.buckets.size());
      assertEquals(30,counter.buckets.getLast().getMaxUpdater(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE).max());
      assertEquals(30,counter.getRollingMaxValue(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE));
      time.increment(counter.bucketSizeInMillseconds * 3);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,30);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,30);
      counter.updateRollingMax(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE,50);
      assertEquals(4,counter.buckets.size());
      assertEquals(50,counter.buckets.getLast().getMaxUpdater(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE).max());
      assertEquals(50,counter.getValueOfLatestBucket(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE));
      long values[]=counter.getValues(HystrixRollingNumberEvent.THREAD_MAX_ACTIVE);
      assertEquals(30,values[0]);
      assertEquals(0,values[1]);
      assertEquals(0,values[2]);
      assertEquals(50,values[3]);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testMaxValue(){
    MockedTime time=new MockedTime();
    try {
      HystrixRollingNumberEvent type=HystrixRollingNumberEvent.THREAD_MAX_ACTIVE;
      HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
      counter.updateRollingMax(type,10);
      time.increment(counter.bucketSizeInMillseconds);
      counter.updateRollingMax(type,30);
      time.increment(counter.bucketSizeInMillseconds);
      counter.updateRollingMax(type,40);
      time.increment(counter.bucketSizeInMillseconds);
      counter.updateRollingMax(type,15);
      assertEquals(40,counter.getRollingMaxValue(type));
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Exception: " + e.getMessage());
    }
  }
  @Test public void testEmptySum(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.COLLAPSED;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
    assertEquals(0,counter.getRollingSum(type));
  }
  @Test public void testEmptyMax(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.THREAD_MAX_ACTIVE;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
    assertEquals(0,counter.getRollingMaxValue(type));
  }
  @Test public void testEmptyLatestValue(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.THREAD_MAX_ACTIVE;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,200,10);
    assertEquals(0,counter.getValueOfLatestBucket(type));
  }
  @Test public void testRolling(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.THREAD_MAX_ACTIVE;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,20,2);
    for (int i=0; i < 20; i++) {
      counter.getCurrentBucket();
      try {
        time.increment(counter.bucketSizeInMillseconds);
      }
 catch (      Exception e) {
      }
      assertEquals(2,counter.getValues(type).length);
      counter.getValueOfLatestBucket(type);
    }
  }
  @Test public void testCumulativeCounterAfterRolling(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.SUCCESS;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,20,2);
    assertEquals(0,counter.getCumulativeSum(type));
    for (int i=0; i < 20; i++) {
      counter.increment(type);
      try {
        time.increment(counter.bucketSizeInMillseconds);
      }
 catch (      Exception e) {
      }
      assertEquals(2,counter.getValues(type).length);
      counter.getValueOfLatestBucket(type);
    }
    assertEquals(20,counter.getCumulativeSum(type));
  }
  @Test public void testCumulativeCounterAfterRollingAndReset(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.SUCCESS;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,20,2);
    assertEquals(0,counter.getCumulativeSum(type));
    for (int i=0; i < 20; i++) {
      counter.increment(type);
      try {
        time.increment(counter.bucketSizeInMillseconds);
      }
 catch (      Exception e) {
      }
      assertEquals(2,counter.getValues(type).length);
      counter.getValueOfLatestBucket(type);
      if (i == 5 || i == 15) {
        counter.reset();
      }
    }
    assertEquals(20,counter.getCumulativeSum(type));
  }
  @Test public void testCumulativeCounterAfterRollingAndReset2(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.SUCCESS;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,20,2);
    assertEquals(0,counter.getCumulativeSum(type));
    counter.increment(type);
    counter.increment(type);
    counter.increment(type);
    for (int i=0; i < 20; i++) {
      try {
        time.increment(counter.bucketSizeInMillseconds);
      }
 catch (      Exception e) {
      }
      if (i == 5 || i == 15) {
        counter.reset();
      }
    }
    counter.increment(type);
    counter.increment(type);
    assertEquals(5,counter.getCumulativeSum(type));
  }
  @Test public void testCumulativeCounterAfterRollingAndReset3(){
    MockedTime time=new MockedTime();
    HystrixRollingNumberEvent type=HystrixRollingNumberEvent.SUCCESS;
    HystrixRollingNumber counter=new HystrixRollingNumber(time,20,2);
    assertEquals(0,counter.getCumulativeSum(type));
    counter.increment(type);
    counter.increment(type);
    counter.increment(type);
    for (int i=0; i < 20; i++) {
      try {
        time.increment(counter.bucketSizeInMillseconds);
      }
 catch (      Exception e) {
      }
    }
    counter.increment(type);
    counter.increment(type);
    assertEquals(5,counter.getCumulativeSum(type));
  }
private static class MockedTime implements Time {
    private AtomicInteger time=new AtomicInteger(0);
    @Override public long getCurrentTimeInMillis(){
      return time.get();
    }
    public void increment(    int millis){
      time.addAndGet(millis);
    }
  }
}
