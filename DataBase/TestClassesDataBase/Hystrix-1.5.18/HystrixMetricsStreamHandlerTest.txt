/** 
 * @author Tomasz Bak
 */
@RunWith(PowerMockRunner.class) @PrepareForTest(HystrixCommandMetrics.class) public class HystrixMetricsStreamHandlerTest {
  private static final ObjectMapper mapper=new ObjectMapper();
  private static Collection<HystrixCommandMetrics> SAMPLE_HYSTRIX_COMMAND_METRICS=Collections.singleton(HystrixCommandMetricsSamples.SAMPLE_1);
  private int port;
  private HttpServer<ByteBuf,ByteBuf> server;
  private HttpClient<ByteBuf,ServerSentEvent> client;
  @Before public void setUp() throws Exception {
    server=createServer();
    client=RxNetty.<ByteBuf,ServerSentEvent>newHttpClientBuilder("localhost",port).withNoConnectionPooling().pipelineConfigurator(PipelineConfigurators.<ByteBuf>clientSseConfigurator()).build();
    mockStatic(HystrixCommandMetrics.class);
    expect(HystrixCommandMetrics.getInstances()).andReturn(SAMPLE_HYSTRIX_COMMAND_METRICS).anyTimes();
  }
  @After public void tearDown() throws Exception {
    if (server != null) {
      server.shutdown();
    }
    if (client != null) {
      client.shutdown();
    }
  }
  @Test public void testMetricsAreDeliveredAsSseStream() throws Exception {
    replayAll();
    Observable<ServerSentEvent> objectObservable=client.submit(HttpClientRequest.createGet(DEFAULT_HYSTRIX_PREFIX)).flatMap(new Func1<HttpClientResponse<ServerSentEvent>,Observable<? extends ServerSentEvent>>(){
      @Override public Observable<? extends ServerSentEvent> call(      HttpClientResponse<ServerSentEvent> httpClientResponse){
        return httpClientResponse.getContent().take(1);
      }
    }
);
    Object first=Observable.amb(objectObservable,Observable.timer(5000,TimeUnit.MILLISECONDS)).toBlocking().first();
    assertTrue("Expected SSE message",first instanceof ServerSentEvent);
    ServerSentEvent sse=(ServerSentEvent)first;
    JsonNode jsonNode=mapper.readTree(sse.contentAsString());
    assertEquals("Expected hystrix key name",HystrixCommandMetricsSamples.SAMPLE_1.getCommandKey().name(),jsonNode.get("name").asText());
  }
  private HttpServer<ByteBuf,ByteBuf> createServer(){
    Random random=new Random();
    Exception error=null;
    for (int i=0; i < 3 && server == null; i++) {
      port=10000 + random.nextInt(50000);
      try {
        return RxNetty.newHttpServerBuilder(port,new HystrixMetricsStreamHandler<ByteBuf,ByteBuf>(DEFAULT_HYSTRIX_PREFIX,DEFAULT_INTERVAL,new RequestHandler<ByteBuf,ByteBuf>(){
          @Override public Observable<Void> handle(          HttpServerRequest<ByteBuf> request,          HttpServerResponse<ByteBuf> response){
            return Observable.empty();
          }
        }
)).build().start();
      }
 catch (      Exception e) {
        error=e;
      }
    }
    throw new RuntimeException("Cannot initialize RxNetty server",error);
  }
}
