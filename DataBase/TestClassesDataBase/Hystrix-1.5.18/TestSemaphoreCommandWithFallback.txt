/** 
 * The construct() will take time once subscribed to. Contains fallback.
 */
private static class TestSemaphoreCommandWithFallback extends TestHystrixObservableCommand<Boolean> {
  private final long executionSleep;
  private final Observable<Boolean> fallback;
  private TestSemaphoreCommandWithFallback(  TestCircuitBreaker circuitBreaker,  int executionSemaphoreCount,  long executionSleep,  Boolean fallback){
    super(testPropsBuilder().setCircuitBreaker(circuitBreaker).setMetrics(circuitBreaker.metrics).setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE).withExecutionIsolationSemaphoreMaxConcurrentRequests(executionSemaphoreCount)));
    this.executionSleep=executionSleep;
    this.fallback=Observable.just(fallback);
  }
  @Override protected Observable<Boolean> construct(){
    return Observable.create(new OnSubscribe<Boolean>(){
      @Override public void call(      Subscriber<? super Boolean> s){
        try {
          Thread.sleep(executionSleep);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        s.onNext(true);
        s.onCompleted();
      }
    }
).subscribeOn(Schedulers.io());
  }
  @Override protected Observable<Boolean> resumeWithFallback(){
    return fallback;
  }
}
