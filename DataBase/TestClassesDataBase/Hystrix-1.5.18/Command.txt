private class Command extends HystrixCommand<Boolean> {
  private final boolean shouldFail;
  private final boolean shouldFailWithBadRequest;
  private final long latencyToAdd;
  public Command(  String commandKey,  boolean shouldFail,  boolean shouldFailWithBadRequest,  long latencyToAdd){
    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("Command")).andCommandKey(HystrixCommandKey.Factory.asKey(commandKey)).andCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(1000).withCircuitBreakerRequestVolumeThreshold(20)));
    this.shouldFail=shouldFail;
    this.shouldFailWithBadRequest=shouldFailWithBadRequest;
    this.latencyToAdd=latencyToAdd;
  }
  @Override protected Boolean run() throws Exception {
    Thread.sleep(latencyToAdd);
    if (shouldFail) {
      throw new RuntimeException("induced failure");
    }
    if (shouldFailWithBadRequest) {
      throw new HystrixBadRequestException("bad request");
    }
    return true;
  }
  @Override protected Boolean getFallback(){
    return false;
  }
}
