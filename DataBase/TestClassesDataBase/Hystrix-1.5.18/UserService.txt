public static class UserService {
  private FailoverService failoverService;
  public void setFailoverService(  FailoverService failoverService){
    this.failoverService=failoverService;
  }
  @HystrixCommand public Object deleteUser(  String id) throws NotFoundException {
    throw new NotFoundException("");
  }
  @HystrixCommand(commandKey=COMMAND_KEY,ignoreExceptions={BadRequestException.class,NotFoundException.class},fallbackMethod="fallback") public User getUserById(  String id) throws NotFoundException {
    validate(id);
    if (!USERS.containsKey(id)) {
      throw new NotFoundException("user with id: " + id + " not found");
    }
    return USERS.get(id);
  }
  @HystrixCommand(ignoreExceptions={BadRequestException.class,NotFoundException.class},fallbackMethod="activateFallback") public void activateUser(  String id) throws NotFoundException, ActivationException {
    validate(id);
    if (!USERS.containsKey(id)) {
      throw new NotFoundException("user with id: " + id + " not found");
    }
    throw new ActivationException("user cannot be activate");
  }
  @HystrixCommand(ignoreExceptions={BadRequestException.class,NotFoundException.class},fallbackMethod="blockUserFallback") public void blockUser(  String id) throws NotFoundException, OperationException {
    validate(id);
    if (!USERS.containsKey(id)) {
      throw new NotFoundException("user with id: " + id + " not found");
    }
    throw new OperationException("user cannot be blocked");
  }
  private User fallback(  String id){
    return failoverService.getDefUser();
  }
  private void activateFallback(  String id){
    failoverService.activate();
  }
  @HystrixCommand(ignoreExceptions={RuntimeException.class}) private void blockUserFallback(  String id){
    throw new RuntimeOperationException("blockUserFallback has failed");
  }
  private void validate(  String val) throws BadRequestException {
    if (val == null || val.length() == 0) {
      throw new BadRequestException("parameter cannot be null ot empty");
    }
  }
  @HystrixCommand(fallbackMethod="voidFallback") void throwNotWrappedCheckedException() throws NotWrappedCheckedException {
    throw new NotWrappedCheckedException();
  }
  private void voidFallback(){
    failoverService.activate();
  }
  /** 
 */
  @HystrixCommand String userFailureWithoutFallback() throws UserException {
    throw new UserException();
  }
  @HystrixCommand(commandProperties={@HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="1")}) String timedOutWithoutFallback(){
    return "";
  }
  /** 
 */
  @HystrixCommand(fallbackMethod="userFailureWithFallback_f_0") String userFailureWithFallback(){
    throw new UserException();
  }
  String userFailureWithFallback_f_0(){
    throw new UserException(1);
  }
  /** 
 */
  @HystrixCommand(fallbackMethod="userFailureWithFallbackCommand_f_0") String userFailureWithFallbackCommand(){
    throw new UserException(0);
  }
  @HystrixCommand(fallbackMethod="userFailureWithFallbackCommand_f_1") String userFailureWithFallbackCommand_f_0(){
    throw new UserException(1);
  }
  @HystrixCommand String userFailureWithFallbackCommand_f_1(){
    throw new UserException(2);
  }
  /** 
 */
  @HystrixCommand(fallbackMethod="commandAndFallbackErrorsComposition_f_0") String commandAndFallbackErrorsComposition(){
    throw new UserException();
  }
  String commandAndFallbackErrorsComposition_f_0(  Throwable commandError){
    throw new HystrixFlowException(commandError,new UserException(1));
  }
  /** 
 */
  @HystrixCommand(fallbackMethod="commandWithFallbackThatFailsByTimeOut_f_0") String commandWithFallbackThatFailsByTimeOut(){
    throw new UserException(0);
  }
  @HystrixCommand(commandProperties={@HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="1")}) String commandWithFallbackThatFailsByTimeOut_f_0(){
    return "";
  }
}
