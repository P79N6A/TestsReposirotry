private static class FlexibleTestHystrixCommand {
  public static Integer EXECUTE_VALUE=1;
  public static Integer FALLBACK_VALUE=11;
  public static AbstractFlexibleTestHystrixCommand from(  HystrixCommandKey commandKey,  ExecutionIsolationStrategy isolationStrategy,  AbstractTestHystrixCommand.ExecutionResult executionResult,  int executionLatency,  AbstractTestHystrixCommand.FallbackResult fallbackResult,  int fallbackLatency,  TestCircuitBreaker circuitBreaker,  HystrixThreadPool threadPool,  int timeout,  AbstractTestHystrixCommand.CacheEnabled cacheEnabled,  Object value,  TryableSemaphore executionSemaphore,  TryableSemaphore fallbackSemaphore,  boolean circuitBreakerDisabled){
    if (fallbackResult.equals(AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED)) {
      return new FlexibleTestHystrixCommandNoFallback(commandKey,isolationStrategy,executionResult,executionLatency,circuitBreaker,threadPool,timeout,cacheEnabled,value,executionSemaphore,fallbackSemaphore,circuitBreakerDisabled);
    }
 else {
      return new FlexibleTestHystrixCommandWithFallback(commandKey,isolationStrategy,executionResult,executionLatency,fallbackResult,fallbackLatency,circuitBreaker,threadPool,timeout,cacheEnabled,value,executionSemaphore,fallbackSemaphore,circuitBreakerDisabled);
    }
  }
}
