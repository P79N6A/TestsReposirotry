public class HystrixTest {
  @Before public void reset(){
    Hystrix.reset();
  }
  @Test public void testNotInThread(){
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testInsideHystrixThreadViaExecute(){
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("CommandName"))){
      @Override protected Boolean run(){
        assertEquals("CommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        assertEquals(1,Hystrix.getCommandCount());
        return Hystrix.getCurrentThreadExecutingCommand() != null;
      }
    }
;
    assertTrue(command.execute());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    assertEquals(0,Hystrix.getCommandCount());
  }
  @Test public void testInsideHystrixThreadViaObserve(){
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("CommandName"))){
      @Override protected Boolean run(){
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ex) {
          return false;
        }
        assertEquals("CommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        assertEquals(1,Hystrix.getCommandCount());
        return Hystrix.getCurrentThreadExecutingCommand() != null;
      }
    }
;
    final CountDownLatch latch=new CountDownLatch(1);
    command.observe().subscribe(new Subscriber<Boolean>(){
      @Override public void onCompleted(){
        latch.countDown();
      }
      @Override public void onError(      Throwable e){
        fail(e.getMessage());
        latch.countDown();
      }
      @Override public void onNext(      Boolean value){
        System.out.println("OnNext : " + value);
        assertTrue(value);
        assertEquals("CommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        assertEquals(1,Hystrix.getCommandCount());
      }
    }
);
    try {
      assertNull(Hystrix.getCurrentThreadExecutingCommand());
      assertEquals(0,Hystrix.getCommandCount());
      latch.await();
    }
 catch (    InterruptedException ex) {
      fail(ex.getMessage());
    }
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    assertEquals(0,Hystrix.getCommandCount());
  }
  @Test public void testInsideNestedHystrixThread(){
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("OuterCommand"))){
      @Override protected Boolean run(){
        assertEquals("OuterCommand",Hystrix.getCurrentThreadExecutingCommand().name());
        System.out.println("Outer Thread : " + Thread.currentThread().getName());
        assertEquals(1,Hystrix.getCommandCount());
        if (Hystrix.getCurrentThreadExecutingCommand() == null) {
          throw new RuntimeException("BEFORE expected it to run inside a thread");
        }
        HystrixCommand<Boolean> command2=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("InnerCommand"))){
          @Override protected Boolean run(){
            assertEquals("InnerCommand",Hystrix.getCurrentThreadExecutingCommand().name());
            System.out.println("Inner Thread : " + Thread.currentThread().getName());
            assertEquals(1,Hystrix.getCommandCount());
            return Hystrix.getCurrentThreadExecutingCommand() != null;
          }
        }
;
        if (Hystrix.getCurrentThreadExecutingCommand() == null) {
          throw new RuntimeException("AFTER expected it to run inside a thread");
        }
        return command2.execute();
      }
    }
;
    assertTrue(command.execute());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testInsideHystrixSemaphoreExecute(){
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("SemaphoreIsolatedCommandName")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE))){
      @Override protected Boolean run(){
        assertEquals("SemaphoreIsolatedCommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        System.out.println("Semaphore Thread : " + Thread.currentThread().getName());
        assertEquals(1,Hystrix.getCommandCount());
        return Hystrix.getCurrentThreadExecutingCommand() != null;
      }
    }
;
    assertTrue(command.execute());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testInsideHystrixSemaphoreQueue() throws Exception {
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("SemaphoreIsolatedCommandName")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE))){
      @Override protected Boolean run(){
        assertEquals("SemaphoreIsolatedCommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        System.out.println("Semaphore Thread : " + Thread.currentThread().getName());
        assertEquals(1,Hystrix.getCommandCount());
        return Hystrix.getCurrentThreadExecutingCommand() != null;
      }
    }
;
    assertTrue(command.queue().get());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testInsideHystrixSemaphoreObserve() throws Exception {
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("SemaphoreIsolatedCommandName")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE))){
      @Override protected Boolean run(){
        assertEquals("SemaphoreIsolatedCommandName",Hystrix.getCurrentThreadExecutingCommand().name());
        System.out.println("Semaphore Thread : " + Thread.currentThread().getName());
        assertEquals(1,Hystrix.getCommandCount());
        return Hystrix.getCurrentThreadExecutingCommand() != null;
      }
    }
;
    assertTrue(command.toObservable().toBlocking().single());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testThreadNestedInsideHystrixSemaphore(){
    HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("OuterSemaphoreCommand")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE))){
      @Override protected Boolean run(){
        assertEquals("OuterSemaphoreCommand",Hystrix.getCurrentThreadExecutingCommand().name());
        System.out.println("Outer Semaphore Thread : " + Thread.currentThread().getName());
        assertEquals(1,Hystrix.getCommandCount());
        if (Hystrix.getCurrentThreadExecutingCommand() == null) {
          throw new RuntimeException("BEFORE expected it to run inside a semaphore");
        }
        HystrixCommand<Boolean> command2=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("InnerCommand"))){
          @Override protected Boolean run(){
            assertEquals("InnerCommand",Hystrix.getCurrentThreadExecutingCommand().name());
            System.out.println("Inner Thread : " + Thread.currentThread().getName());
            assertEquals(1,Hystrix.getCommandCount());
            return Hystrix.getCurrentThreadExecutingCommand() != null;
          }
        }
;
        if (Hystrix.getCurrentThreadExecutingCommand() == null) {
          throw new RuntimeException("AFTER expected it to run inside a semaphore");
        }
        return command2.execute();
      }
    }
;
    assertTrue(command.execute());
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
  }
  @Test public void testSemaphoreIsolatedSynchronousHystrixObservableCommand(){
    HystrixObservableCommand<Integer> observableCmd=new SynchronousObservableCommand();
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    final CountDownLatch latch=new CountDownLatch(1);
    observableCmd.observe().subscribe(new Subscriber<Integer>(){
      @Override public void onCompleted(){
        latch.countDown();
      }
      @Override public void onError(      Throwable e){
        fail(e.getMessage());
        latch.countDown();
      }
      @Override public void onNext(      Integer value){
        System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " SyncObservable latched Subscriber OnNext : "+ value);
      }
    }
);
    try {
      assertNull(Hystrix.getCurrentThreadExecutingCommand());
      assertEquals(0,Hystrix.getCommandCount());
      latch.await();
    }
 catch (    InterruptedException ex) {
      fail(ex.getMessage());
    }
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    assertEquals(0,Hystrix.getCommandCount());
  }
  @Test public void testMultipleSemaphoreObservableCommandsInFlight() throws InterruptedException {
    int NUM_COMMANDS=50;
    List<Observable<Integer>> commands=new ArrayList<Observable<Integer>>();
    for (int i=0; i < NUM_COMMANDS; i++) {
      commands.add(Observable.defer(new Func0<Observable<Integer>>(){
        @Override public Observable<Integer> call(){
          return new AsynchronousObservableCommand().observe();
        }
      }
));
    }
    final AtomicBoolean exceptionFound=new AtomicBoolean(false);
    final CountDownLatch latch=new CountDownLatch(1);
    Observable.merge(commands).subscribe(new Subscriber<Integer>(){
      @Override public void onCompleted(){
        System.out.println("OnCompleted");
        latch.countDown();
      }
      @Override public void onError(      Throwable e){
        System.out.println("OnError : " + e);
        e.printStackTrace();
        exceptionFound.set(true);
        latch.countDown();
      }
      @Override public void onNext(      Integer n){
        System.out.println("OnNext : " + n + " : "+ Thread.currentThread().getName()+ " : "+ Hystrix.getCommandCount());
      }
    }
);
    latch.await();
    assertFalse(exceptionFound.get());
  }
  @Test public void testResetCommandProperties(){
    HystrixCommand<Boolean> cmd1=new ResettableCommand(100,1,10);
    assertEquals(100L,(long)cmd1.getProperties().executionTimeoutInMilliseconds().get());
    assertEquals(1L,(long)cmd1.getProperties().executionIsolationSemaphoreMaxConcurrentRequests().get());
    Hystrix.reset();
    HystrixCommand<Boolean> cmd2=new ResettableCommand(700,2,40);
    assertEquals(700L,(long)cmd2.getProperties().executionTimeoutInMilliseconds().get());
    assertEquals(2L,(long)cmd2.getProperties().executionIsolationSemaphoreMaxConcurrentRequests().get());
  }
private static class SynchronousObservableCommand extends HystrixObservableCommand<Integer> {
    protected SynchronousObservableCommand(){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("GROUP")).andCommandKey(HystrixCommandKey.Factory.asKey("SyncObservable")).andCommandPropertiesDefaults(new HystrixCommandProperties.Setter().withExecutionIsolationSemaphoreMaxConcurrentRequests(1000)));
    }
    @Override protected Observable<Integer> construct(){
      return Observable.create(new Observable.OnSubscribe<Integer>(){
        @Override public void call(        Subscriber<? super Integer> subscriber){
          try {
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " SyncCommand construct()");
            assertEquals("SyncObservable",Hystrix.getCurrentThreadExecutingCommand().name());
            assertEquals(1,Hystrix.getCommandCount());
            Thread.sleep(10);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " SyncCommand construct() -> OnNext(1)");
            subscriber.onNext(1);
            Thread.sleep(10);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " SyncCommand construct() -> OnNext(2)");
            subscriber.onNext(2);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " SyncCommand construct() -> OnCompleted");
            subscriber.onCompleted();
          }
 catch (          Throwable ex) {
            subscriber.onError(ex);
          }
        }
      }
);
    }
  }
private static class AsynchronousObservableCommand extends HystrixObservableCommand<Integer> {
    protected AsynchronousObservableCommand(){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("GROUP")).andCommandKey(HystrixCommandKey.Factory.asKey("AsyncObservable")).andCommandPropertiesDefaults(new HystrixCommandProperties.Setter().withExecutionIsolationSemaphoreMaxConcurrentRequests(1000)));
    }
    @Override protected Observable<Integer> construct(){
      return Observable.create(new Observable.OnSubscribe<Integer>(){
        @Override public void call(        Subscriber<? super Integer> subscriber){
          try {
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " AsyncCommand construct()");
            Thread.sleep(10);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " AsyncCommand construct() -> OnNext(1)");
            subscriber.onNext(1);
            Thread.sleep(10);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " AsyncCommand construct() -> OnNext(2)");
            subscriber.onNext(2);
            System.out.println(Thread.currentThread().getName() + " : " + System.currentTimeMillis()+ " AsyncCommand construct() -> OnCompleted");
            subscriber.onCompleted();
          }
 catch (          Throwable ex) {
            subscriber.onError(ex);
          }
        }
      }
).subscribeOn(Schedulers.computation());
    }
  }
private static class ResettableCommand extends HystrixCommand<Boolean> {
    ResettableCommand(    int timeout,    int semaphoreCount,    int poolCoreSize){
      super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("GROUP")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(timeout).withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreCount)).andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter().withCoreSize(poolCoreSize)));
    }
    @Override protected Boolean run() throws Exception {
      return true;
    }
  }
}
