private static class TestPartialSuccessWithFallback extends TestHystrixObservableCommand<Boolean> {
  TestPartialSuccessWithFallback(){
    super(TestHystrixObservableCommand.testPropsBuilder());
  }
  public TestPartialSuccessWithFallback(  ExecutionIsolationStrategy isolationStrategy){
    this(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationStrategy(isolationStrategy));
  }
  public TestPartialSuccessWithFallback(  HystrixCommandProperties.Setter properties){
    super(testPropsBuilder().setCommandPropertiesDefaults(properties));
  }
  @Override protected Observable<Boolean> construct(){
    return Observable.just(false,true,false).concatWith(Observable.<Boolean>error(new RuntimeException("forced error"))).subscribeOn(Schedulers.computation());
  }
  @Override protected Observable<Boolean> resumeWithFallback(){
    return Observable.just(true,false,true,false);
  }
}
