private static class ClassTestConfig extends AbstractConfig {
  static final Class<?> DEFAULT_CLASS=FakeMetricsReporter.class;
  static final Class<?> VISIBLE_CLASS=JmxReporter.class;
  static final Class<?> RESTRICTED_CLASS=ConfiguredFakeMetricsReporter.class;
  private static final ConfigDef CONFIG;
static {
    CONFIG=new ConfigDef().define("class.prop",Type.CLASS,DEFAULT_CLASS,Importance.HIGH,"docs").define("list.prop",Type.LIST,Arrays.asList(DEFAULT_CLASS),Importance.HIGH,"docs");
  }
  public ClassTestConfig(){
    super(CONFIG,new Properties());
  }
  public ClassTestConfig(  Object classPropOverride,  Object listPropOverride){
    super(CONFIG,overrideProps(classPropOverride,listPropOverride));
  }
  void checkInstances(  Class<?> expectedClassPropClass,  Class<?>... expectedListPropClasses){
    assertEquals(expectedClassPropClass,getConfiguredInstance("class.prop",MetricsReporter.class).getClass());
    List<?> list=getConfiguredInstances("list.prop",MetricsReporter.class);
    for (int i=0; i < list.size(); i++)     assertEquals(expectedListPropClasses[i],list.get(i).getClass());
  }
  static void testOverrides(){
    ClassTestConfig testConfig1=new ClassTestConfig(RESTRICTED_CLASS,Arrays.asList(VISIBLE_CLASS,RESTRICTED_CLASS));
    testConfig1.checkInstances(RESTRICTED_CLASS,VISIBLE_CLASS,RESTRICTED_CLASS);
    ClassTestConfig testConfig2=new ClassTestConfig(RESTRICTED_CLASS.getName(),Arrays.asList(VISIBLE_CLASS.getName(),RESTRICTED_CLASS.getName()));
    testConfig2.checkInstances(RESTRICTED_CLASS,VISIBLE_CLASS,RESTRICTED_CLASS);
    ClassTestConfig testConfig3=new ClassTestConfig(RESTRICTED_CLASS.getName(),VISIBLE_CLASS.getName() + "," + RESTRICTED_CLASS.getName());
    testConfig3.checkInstances(RESTRICTED_CLASS,VISIBLE_CLASS,RESTRICTED_CLASS);
  }
  private static Map<String,Object> overrideProps(  Object classProp,  Object listProp){
    Map<String,Object> props=new HashMap<>();
    if (classProp != null)     props.put("class.prop",classProp);
    if (listProp != null)     props.put("list.prop",listProp);
    return props;
  }
}
