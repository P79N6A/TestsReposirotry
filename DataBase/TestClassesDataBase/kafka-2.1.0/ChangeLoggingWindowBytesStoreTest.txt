@RunWith(EasyMockRunner.class) public class ChangeLoggingWindowBytesStoreTest {
  private final TaskId taskId=new TaskId(0,0);
  private final Map sent=new HashMap<>();
  private final NoOpRecordCollector collector=new NoOpRecordCollector(){
    @Override public <K,V>void send(    final String topic,    final K key,    final V value,    final Headers headers,    final Integer partition,    final Long timestamp,    final Serializer<K> keySerializer,    final Serializer<V> valueSerializer){
      sent.put(key,value);
    }
  }
;
  private final byte[] value1={0};
  private final Bytes bytesKey=Bytes.wrap(value1);
  @Mock(type=MockType.NICE) private WindowStore<Bytes,byte[]> inner;
  @Mock(type=MockType.NICE) private ProcessorContextImpl context;
  private ChangeLoggingWindowBytesStore store;
  @Before public void setUp(){
    store=new ChangeLoggingWindowBytesStore(inner,false);
  }
  private void init(){
    EasyMock.expect(context.taskId()).andReturn(taskId);
    EasyMock.expect(context.recordCollector()).andReturn(collector);
    inner.init(context,store);
    EasyMock.expectLastCall();
    EasyMock.replay(inner,context);
    store.init(context,store);
  }
  @Test public void shouldLogPuts(){
    inner.put(bytesKey,value1,0);
    EasyMock.expectLastCall();
    init();
    store.put(bytesKey,value1);
    assertArrayEquals(value1,(byte[])sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,0)));
    EasyMock.verify(inner);
  }
  @Test public void shouldDelegateToUnderlyingStoreWhenFetching(){
    EasyMock.expect(inner.fetch(bytesKey,0,10)).andReturn(KeyValueIterators.<byte[]>emptyWindowStoreIterator());
    init();
    store.fetch(bytesKey,ofEpochMilli(0),ofEpochMilli(10));
    EasyMock.verify(inner);
  }
  @Test public void shouldDelegateToUnderlyingStoreWhenFetchingRange(){
    EasyMock.expect(inner.fetch(bytesKey,bytesKey,0,1)).andReturn(KeyValueIterators.<Windowed<Bytes>,byte[]>emptyIterator());
    init();
    store.fetch(bytesKey,bytesKey,ofEpochMilli(0),ofEpochMilli(1));
    EasyMock.verify(inner);
  }
  @Test public void shouldRetainDuplicatesWhenSet(){
    store=new ChangeLoggingWindowBytesStore(inner,true);
    inner.put(bytesKey,value1,0);
    EasyMock.expectLastCall().times(2);
    init();
    store.put(bytesKey,value1);
    store.put(bytesKey,value1);
    assertArrayEquals(value1,(byte[])sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,1)));
    assertArrayEquals(value1,(byte[])sent.get(WindowKeySchema.toStoreKeyBinary(bytesKey,0,2)));
    EasyMock.verify(inner);
  }
}
