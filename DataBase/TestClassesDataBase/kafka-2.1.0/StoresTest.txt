public class StoresTest {
  @Test(expected=NullPointerException.class) public void shouldThrowIfPersistentKeyValueStoreStoreNameIsNull(){
    Stores.persistentKeyValueStore(null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfIMemoryKeyValueStoreStoreNameIsNull(){
    Stores.inMemoryKeyValueStore(null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfILruMapStoreNameIsNull(){
    Stores.lruMap(null,0);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfILruMapStoreCapacityIsNegative(){
    Stores.lruMap("anyName",-1);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfIPersistentWindowStoreStoreNameIsNull(){
    Stores.persistentWindowStore(null,ZERO,ZERO,false);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfIPersistentWindowStoreRetentionPeriodIsNegative(){
    Stores.persistentWindowStore("anyName",ofMillis(-1L),ZERO,false);
  }
  @Deprecated @Test(expected=IllegalArgumentException.class) public void shouldThrowIfIPersistentWindowStoreIfNumberOfSegmentsSmallerThanOne(){
    Stores.persistentWindowStore("anyName",0L,1,0L,false);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfIPersistentWindowStoreIfWindowSizeIsNegative(){
    Stores.persistentWindowStore("anyName",ofMillis(0L),ofMillis(-1L),false);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfIPersistentSessionStoreStoreNameIsNull(){
    Stores.persistentSessionStore(null,ofMillis(0));
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfIPersistentSessionStoreRetentionPeriodIsNegative(){
    Stores.persistentSessionStore("anyName",ofMillis(-1));
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfSupplierIsNullForWindowStoreBuilder(){
    Stores.windowStoreBuilder(null,Serdes.ByteArray(),Serdes.ByteArray());
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfSupplierIsNullForKeyValueStoreBuilder(){
    Stores.keyValueStoreBuilder(null,Serdes.ByteArray(),Serdes.ByteArray());
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfSupplierIsNullForSessionStoreBuilder(){
    Stores.sessionStoreBuilder(null,Serdes.ByteArray(),Serdes.ByteArray());
  }
  @Test public void shouldCreateInMemoryKeyValueStore(){
    assertThat(Stores.inMemoryKeyValueStore("memory").get(),instanceOf(InMemoryKeyValueStore.class));
  }
  @Test public void shouldCreateMemoryNavigableCache(){
    assertThat(Stores.lruMap("map",10).get(),instanceOf(MemoryNavigableLRUCache.class));
  }
  @Test public void shouldCreateRocksDbStore(){
    assertThat(Stores.persistentKeyValueStore("store").get(),instanceOf(RocksDBStore.class));
  }
  @Test public void shouldCreateRocksDbWindowStore(){
    assertThat(Stores.persistentWindowStore("store",ofMillis(1L),ofMillis(1L),false).get(),instanceOf(RocksDBWindowStore.class));
  }
  @Test public void shouldCreateRocksDbSessionStore(){
    assertThat(Stores.persistentSessionStore("store",ofMillis(1)).get(),instanceOf(RocksDBSessionStore.class));
  }
  @Test public void shouldBuildWindowStore(){
    final WindowStore<String,String> store=Stores.windowStoreBuilder(Stores.persistentWindowStore("store",ofMillis(3L),ofMillis(3L),true),Serdes.String(),Serdes.String()).build();
    assertThat(store,not(nullValue()));
  }
  @Test public void shouldBuildKeyValueStore(){
    final KeyValueStore<String,String> store=Stores.keyValueStoreBuilder(Stores.persistentKeyValueStore("name"),Serdes.String(),Serdes.String()).build();
    assertThat(store,not(nullValue()));
  }
  @Test public void shouldBuildSessionStore(){
    final SessionStore<String,String> store=Stores.sessionStoreBuilder(Stores.persistentSessionStore("name",ofMillis(10)),Serdes.String(),Serdes.String()).build();
    assertThat(store,not(nullValue()));
  }
}
