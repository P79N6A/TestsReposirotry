private static class SensorCreator {
  private final Metrics metrics;
  SensorCreator(  Metrics metrics){
    this.metrics=metrics;
  }
  private Sensor createSensor(  StatType statType,  int index){
    Sensor sensor=metrics.sensor("kafka.requests." + index);
    Map<String,String> tags=Collections.singletonMap("tag","tag" + index);
switch (statType) {
case AVG:
      sensor.add(metrics.metricName("test.metric.avg","avg",tags),new Avg());
    break;
case TOTAL:
  sensor.add(metrics.metricName("test.metric.total","total",tags),new Total());
break;
case COUNT:
sensor.add(metrics.metricName("test.metric.count","count",tags),new Count());
break;
case MAX:
sensor.add(metrics.metricName("test.metric.max","max",tags),new Max());
break;
case MIN:
sensor.add(metrics.metricName("test.metric.min","min",tags),new Min());
break;
case RATE:
sensor.add(metrics.metricName("test.metric.rate","rate",tags),new Rate());
break;
case SIMPLE_RATE:
sensor.add(metrics.metricName("test.metric.simpleRate","simpleRate",tags),new SimpleRate());
break;
case SUM:
sensor.add(metrics.metricName("test.metric.sum","sum",tags),new Sum());
break;
case VALUE:
sensor.add(metrics.metricName("test.metric.value","value",tags),new Value());
break;
case PERCENTILES:
sensor.add(metrics.metricName("test.metric.percentiles","percentiles",tags),new Percentiles(100,-100,100,Percentiles.BucketSizing.CONSTANT,new Percentile(metrics.metricName("test.median","percentiles"),50.0),new Percentile(metrics.metricName("test.perc99_9","percentiles"),99.9)));
break;
case METER:
sensor.add(new Meter(metrics.metricName("test.metric.meter.rate","meter",tags),metrics.metricName("test.metric.meter.total","meter",tags)));
break;
default :
throw new IllegalStateException("Invalid stat type " + statType);
}
return sensor;
}
}
