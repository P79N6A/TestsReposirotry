public class ShellTest {
  @Rule public final Timeout globalTimeout=Timeout.seconds(180);
  @Test public void testEchoHello() throws Exception {
    assumeTrue(!OperatingSystem.IS_WINDOWS);
    String output=Shell.execCommand("echo","hello");
    assertEquals("hello\n",output);
  }
  @Test public void testHeadDevZero() throws Exception {
    assumeTrue(!OperatingSystem.IS_WINDOWS);
    final int length=100000;
    String output=Shell.execCommand("head","-c",Integer.toString(length),"/dev/zero");
    assertEquals(length,output.length());
  }
  private final static String NONEXISTENT_PATH="/dev/a/path/that/does/not/exist/in/the/filesystem";
  @Test public void testAttemptToRunNonExistentProgram(){
    assumeTrue(!OperatingSystem.IS_WINDOWS);
    try {
      Shell.execCommand(NONEXISTENT_PATH);
      fail("Expected to get an exception when trying to run a program that does not exist");
    }
 catch (    IOException e) {
      assertTrue(e.getMessage().contains("No such file"));
    }
  }
  @Test public void testRunProgramWithErrorReturn() throws Exception {
    assumeTrue(!OperatingSystem.IS_WINDOWS);
    try {
      Shell.execCommand("head","-c","0",NONEXISTENT_PATH);
      fail("Expected to get an exception when trying to head a nonexistent file");
    }
 catch (    Shell.ExitCodeException e) {
      String message=e.getMessage();
      assertTrue("Unexpected error message '" + message + "'",message.contains("No such file") || message.contains("illegal byte count"));
    }
  }
}
