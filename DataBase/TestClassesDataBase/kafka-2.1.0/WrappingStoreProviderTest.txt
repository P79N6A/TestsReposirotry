public class WrappingStoreProviderTest {
  private WrappingStoreProvider wrappingStoreProvider;
  @Before public void before(){
    final StateStoreProviderStub stubProviderOne=new StateStoreProviderStub(false);
    final StateStoreProviderStub stubProviderTwo=new StateStoreProviderStub(false);
    stubProviderOne.addStore("kv",Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore("kv"),Serdes.serdeFrom(String.class),Serdes.serdeFrom(String.class)).build());
    stubProviderOne.addStore("window",new NoOpWindowStore());
    stubProviderTwo.addStore("kv",Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore("kv"),Serdes.serdeFrom(String.class),Serdes.serdeFrom(String.class)).build());
    stubProviderTwo.addStore("window",new NoOpWindowStore());
    wrappingStoreProvider=new WrappingStoreProvider(Arrays.<StateStoreProvider>asList(stubProviderOne,stubProviderTwo));
  }
  @Test public void shouldFindKeyValueStores(){
    final List<ReadOnlyKeyValueStore<String,String>> results=wrappingStoreProvider.stores("kv",QueryableStoreTypes.<String,String>keyValueStore());
    assertEquals(2,results.size());
  }
  @Test public void shouldFindWindowStores(){
    final List<ReadOnlyWindowStore<Object,Object>> windowStores=wrappingStoreProvider.stores("window",windowStore());
    assertEquals(2,windowStores.size());
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowInvalidStoreExceptionIfNoStoreOfTypeFound(){
    wrappingStoreProvider.stores("doesn't exist",QueryableStoreTypes.keyValueStore());
  }
}
