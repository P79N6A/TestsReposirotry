public static class DummyCoordinator extends AbstractCoordinator {
  private int onJoinPrepareInvokes=0;
  private int onJoinCompleteInvokes=0;
  private boolean wakeupOnJoinComplete=false;
  public DummyCoordinator(  ConsumerNetworkClient client,  Metrics metrics,  Time time,  int rebalanceTimeoutMs,  int retryBackoffMs){
    super(new LogContext(),client,GROUP_ID,rebalanceTimeoutMs,SESSION_TIMEOUT_MS,HEARTBEAT_INTERVAL_MS,metrics,METRIC_GROUP_PREFIX,time,retryBackoffMs,false);
  }
  @Override protected String protocolType(){
    return "dummy";
  }
  @Override protected List<JoinGroupRequest.ProtocolMetadata> metadata(){
    return Collections.singletonList(new JoinGroupRequest.ProtocolMetadata("dummy-subprotocol",EMPTY_DATA));
  }
  @Override protected Map<String,ByteBuffer> performAssignment(  String leaderId,  String protocol,  Map<String,ByteBuffer> allMemberMetadata){
    Map<String,ByteBuffer> assignment=new HashMap<>();
    for (    Map.Entry<String,ByteBuffer> metadata : allMemberMetadata.entrySet())     assignment.put(metadata.getKey(),EMPTY_DATA);
    return assignment;
  }
  @Override protected void onJoinPrepare(  int generation,  String memberId){
    onJoinPrepareInvokes++;
  }
  @Override protected void onJoinComplete(  int generation,  String memberId,  String protocol,  ByteBuffer memberAssignment){
    if (wakeupOnJoinComplete)     throw new WakeupException();
    onJoinCompleteInvokes++;
  }
}
