public class TopicTest {
  @Test public void shouldAcceptValidTopicNames(){
    String maxLengthString=TestUtils.randomString(249);
    String[] validTopicNames={"valid","TOPIC","nAmEs","ar6","VaL1d","_0-9_.","...",maxLengthString};
    for (    String topicName : validTopicNames) {
      Topic.validate(topicName);
    }
  }
  @Test public void shouldThrowOnInvalidTopicNames(){
    char[] longString=new char[250];
    Arrays.fill(longString,'a');
    String[] invalidTopicNames={"","foo bar","..","foo:bar","foo=bar",".",new String(longString)};
    for (    String topicName : invalidTopicNames) {
      try {
        Topic.validate(topicName);
        fail("No exception was thrown for topic with invalid name: " + topicName);
      }
 catch (      InvalidTopicException e) {
      }
    }
  }
  @Test public void shouldRecognizeInvalidCharactersInTopicNames(){
    char[] invalidChars={'/','\\',',','\u0000',':','"','\'',';','*','?',' ','\t','\r','\n','='};
    for (    char c : invalidChars) {
      String topicName="Is " + c + "illegal";
      assertFalse(Topic.containsValidPattern(topicName));
    }
  }
  @Test public void testTopicHasCollisionChars(){
    List<String> falseTopics=Arrays.asList("start","end","middle","many");
    List<String> trueTopics=Arrays.asList(".start","end.","mid.dle",".ma.ny.","_start","end_","mid_dle","_ma_ny.");
    for (    String topic : falseTopics)     assertFalse(Topic.hasCollisionChars(topic));
    for (    String topic : trueTopics)     assertTrue(Topic.hasCollisionChars(topic));
  }
  @Test public void testTopicHasCollision(){
    List<String> periodFirstMiddleLastNone=Arrays.asList(".topic","to.pic","topic.","topic");
    List<String> underscoreFirstMiddleLastNone=Arrays.asList("_topic","to_pic","topic_","topic");
    for (    String topic : periodFirstMiddleLastNone)     assertTrue(Topic.hasCollision(topic,topic));
    for (    String topic : underscoreFirstMiddleLastNone)     assertTrue(Topic.hasCollision(topic,topic));
    for (int i=0; i < periodFirstMiddleLastNone.size(); ++i)     assertTrue(Topic.hasCollision(periodFirstMiddleLastNone.get(i),underscoreFirstMiddleLastNone.get(i)));
    Collections.reverse(underscoreFirstMiddleLastNone);
    for (int i=0; i < periodFirstMiddleLastNone.size(); ++i)     assertFalse(Topic.hasCollision(periodFirstMiddleLastNone.get(i),underscoreFirstMiddleLastNone.get(i)));
  }
}
