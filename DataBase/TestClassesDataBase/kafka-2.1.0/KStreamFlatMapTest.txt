public class KStreamFlatMapTest {
  private String topicName="topic";
  private final ConsumerRecordFactory<Integer,String> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new StringSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  @Test public void testFlatMap(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KeyValueMapper<Number,Object,Iterable<KeyValue<String,String>>> mapper=new KeyValueMapper<Number,Object,Iterable<KeyValue<String,String>>>(){
      @Override public Iterable<KeyValue<String,String>> apply(      final Number key,      final Object value){
        final ArrayList<KeyValue<String,String>> result=new ArrayList<>();
        for (int i=0; i < key.intValue(); i++) {
          result.add(KeyValue.pair(Integer.toString(key.intValue() * 10 + i),value.toString()));
        }
        return result;
      }
    }
;
    final int[] expectedKeys={0,1,2,3};
    final KStream<Integer,String> stream;
    final MockProcessorSupplier<String,String> supplier;
    supplier=new MockProcessorSupplier<>();
    stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    stream.flatMap(mapper).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,"V" + expectedKey));
      }
    }
     assertEquals(6,supplier.theCapturedProcessor().processed.size());
    final String[] expected={"10:V1","20:V2","21:V2","30:V3","31:V3","32:V3"};
    for (int i=0; i < expected.length; i++) {
      assertEquals(expected[i],supplier.theCapturedProcessor().processed.get(i));
    }
  }
}
