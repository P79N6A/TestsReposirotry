@RunWith(PowerMockRunner.class) @PrepareForTest({Worker.class,Plugins.class}) @PowerMockIgnore("javax.management.*") public class WorkerTest extends ThreadedTest {
  private static final String CONNECTOR_ID="test-connector";
  private static final ConnectorTaskId TASK_ID=new ConnectorTaskId("job",0);
  private static final String WORKER_ID="localhost:8083";
  private WorkerConfig config;
  private Worker worker;
  @Mock private Plugins plugins;
  @Mock private PluginClassLoader pluginLoader;
  @Mock private DelegatingClassLoader delegatingLoader;
  @Mock private OffsetBackingStore offsetBackingStore;
  @MockStrict private TaskStatus.Listener taskStatusListener;
  @MockStrict private ConnectorStatus.Listener connectorStatusListener;
  @Mock private Connector connector;
  @Mock private ConnectorContext ctx;
  @Mock private TestSourceTask task;
  @Mock private WorkerSourceTask workerTask;
  @Mock private Converter keyConverter;
  @Mock private Converter valueConverter;
  @Mock private Converter taskKeyConverter;
  @Mock private Converter taskValueConverter;
  @Mock private HeaderConverter taskHeaderConverter;
  @Before public void setup(){
    super.setup();
    Map<String,String> workerProps=new HashMap<>();
    workerProps.put("key.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("value.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.key.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.value.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.key.converter.schemas.enable","false");
    workerProps.put("internal.value.converter.schemas.enable","false");
    workerProps.put("offset.storage.file.filename","/tmp/connect.offsets");
    workerProps.put(CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG,MockMetricsReporter.class.getName());
    config=new StandaloneConfig(workerProps);
    PowerMock.mockStatic(Plugins.class);
  }
  @Test public void testStartAndStopConnector() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName())).andReturn(connector);
    EasyMock.expect(connector.version()).andReturn("1.0");
    Map<String,String> props=new HashMap<>();
    props.put(SinkConnectorConfig.TOPICS_CONFIG,"foo,bar");
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,WorkerTestConnector.class.getName());
    EasyMock.expect(connector.version()).andReturn("1.0");
    EasyMock.expect(plugins.compareAndSwapLoaders(connector)).andReturn(delegatingLoader).times(2);
    connector.initialize(anyObject(ConnectorContext.class));
    EasyMock.expectLastCall();
    connector.start(props);
    EasyMock.expectLastCall();
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    connectorStatusListener.onStartup(CONNECTOR_ID);
    EasyMock.expectLastCall();
    connector.stop();
    EasyMock.expectLastCall();
    connectorStatusListener.onShutdown(CONNECTOR_ID);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
    assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames());
    try {
      worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
      fail("Should have thrown exception when trying to add connector with same name.");
    }
 catch (    ConnectException e) {
    }
    assertStatistics(worker,1,0);
    assertStartupStatistics(worker,1,0,0,0);
    worker.stopConnector(CONNECTOR_ID);
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,0,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.stop();
    assertStatistics(worker,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testStartConnectorFailure() throws Exception {
    expectConverters();
    expectStartStorage();
    Map<String,String> props=new HashMap<>();
    props.put(SinkConnectorConfig.TOPICS_CONFIG,"foo,bar");
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,"java.util.HashMap");
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader);
    EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andThrow(new ConnectException("Failed to find Connector"));
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);
    connectorStatusListener.onFailure(EasyMock.eq(CONNECTOR_ID),EasyMock.<ConnectException>anyObject());
    EasyMock.expectLastCall();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertFalse(worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED));
    assertStartupStatistics(worker,1,1,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,1,0,0);
    assertFalse(worker.stopConnector(CONNECTOR_ID));
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,1,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testAddConnectorByAlias() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    EasyMock.expect(plugins.newConnector("WorkerTestConnector")).andReturn(connector);
    EasyMock.expect(connector.version()).andReturn("1.0");
    Map<String,String> props=new HashMap<>();
    props.put(SinkConnectorConfig.TOPICS_CONFIG,"foo,bar");
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,"WorkerTestConnector");
    EasyMock.expect(connector.version()).andReturn("1.0");
    EasyMock.expect(plugins.compareAndSwapLoaders(connector)).andReturn(delegatingLoader).times(2);
    connector.initialize(anyObject(ConnectorContext.class));
    EasyMock.expectLastCall();
    connector.start(props);
    EasyMock.expectLastCall();
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    connectorStatusListener.onStartup(CONNECTOR_ID);
    EasyMock.expectLastCall();
    connector.stop();
    EasyMock.expectLastCall();
    connectorStatusListener.onShutdown(CONNECTOR_ID);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
    assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames());
    assertStatistics(worker,1,0);
    assertStartupStatistics(worker,1,0,0,0);
    worker.stopConnector(CONNECTOR_ID);
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,0,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.stop();
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,0,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testAddConnectorByShortAlias() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    EasyMock.expect(plugins.newConnector("WorkerTest")).andReturn(connector);
    EasyMock.expect(connector.version()).andReturn("1.0");
    Map<String,String> props=new HashMap<>();
    props.put(SinkConnectorConfig.TOPICS_CONFIG,"foo,bar");
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,"WorkerTest");
    EasyMock.expect(connector.version()).andReturn("1.0");
    EasyMock.expect(plugins.compareAndSwapLoaders(connector)).andReturn(delegatingLoader).times(2);
    connector.initialize(anyObject(ConnectorContext.class));
    EasyMock.expectLastCall();
    connector.start(props);
    EasyMock.expectLastCall();
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    connectorStatusListener.onStartup(CONNECTOR_ID);
    EasyMock.expectLastCall();
    connector.stop();
    EasyMock.expectLastCall();
    connectorStatusListener.onShutdown(CONNECTOR_ID);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
    assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames());
    assertStatistics(worker,1,0);
    worker.stopConnector(CONNECTOR_ID);
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.stop();
    assertStatistics(worker,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testStopInvalidConnector(){
    expectConverters();
    expectStartStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    worker.stopConnector(CONNECTOR_ID);
    PowerMock.verifyAll();
  }
  @Test public void testReconfigureConnectorTasks() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);
    EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName())).andReturn(connector);
    EasyMock.expect(connector.version()).andReturn("1.0");
    Map<String,String> props=new HashMap<>();
    props.put(SinkConnectorConfig.TOPICS_CONFIG,"foo,bar");
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,WorkerTestConnector.class.getName());
    EasyMock.expect(connector.version()).andReturn("1.0");
    EasyMock.expect(plugins.compareAndSwapLoaders(connector)).andReturn(delegatingLoader).times(3);
    connector.initialize(anyObject(ConnectorContext.class));
    EasyMock.expectLastCall();
    connector.start(props);
    EasyMock.expectLastCall();
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(3);
    connectorStatusListener.onStartup(CONNECTOR_ID);
    EasyMock.expectLastCall();
    EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);
    Map<String,String> taskProps=new HashMap<>();
    taskProps.put("foo","bar");
    EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps,taskProps));
    connector.stop();
    EasyMock.expectLastCall();
    connectorStatusListener.onShutdown(CONNECTOR_ID);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
    assertStatistics(worker,1,0);
    assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)),worker.connectorNames());
    try {
      worker.startConnector(CONNECTOR_ID,props,ctx,connectorStatusListener,TargetState.STARTED);
      fail("Should have thrown exception when trying to add connector with same name.");
    }
 catch (    ConnectException e) {
    }
    Map<String,String> connProps=new HashMap<>(props);
    connProps.put(ConnectorConfig.TASKS_MAX_CONFIG,"2");
    ConnectorConfig connConfig=new SinkConnectorConfig(plugins,connProps);
    List<Map<String,String>> taskConfigs=worker.connectorTaskConfigs(CONNECTOR_ID,connConfig);
    Map<String,String> expectedTaskProps=new HashMap<>();
    expectedTaskProps.put("foo","bar");
    expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
    expectedTaskProps.put(SinkTask.TOPICS_CONFIG,"foo,bar");
    assertEquals(2,taskConfigs.size());
    assertEquals(expectedTaskProps,taskConfigs.get(0));
    assertEquals(expectedTaskProps,taskConfigs.get(1));
    assertStatistics(worker,1,0);
    assertStartupStatistics(worker,1,0,0,0);
    worker.stopConnector(CONNECTOR_ID);
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,1,0,0,0);
    assertEquals(Collections.emptySet(),worker.connectorNames());
    worker.stop();
    assertStatistics(worker,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testAddRemoveTask() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    PowerMock.expectNew(WorkerSourceTask.class,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(TaskStatus.Listener.class),EasyMock.eq(TargetState.STARTED),anyObject(JsonConverter.class),anyObject(JsonConverter.class),anyObject(JsonConverter.class),EasyMock.eq(new TransformationChain(Collections.emptyList(),NOOP_OPERATOR)),anyObject(KafkaProducer.class),anyObject(OffsetStorageReader.class),anyObject(OffsetStorageWriter.class),EasyMock.eq(config),anyObject(ClusterConfigState.class),anyObject(ConnectMetrics.class),anyObject(ClassLoader.class),anyObject(Time.class),anyObject(RetryWithToleranceOperator.class)).andReturn(workerTask);
    Map<String,String> origProps=new HashMap<>();
    origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
    TaskConfig taskConfig=new TaskConfig(origProps);
    EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);
    EasyMock.expect(task.version()).andReturn("1.0");
    workerTask.initialize(taskConfig);
    EasyMock.expectLastCall();
    assertNotNull(taskKeyConverter);
    assertNotNull(taskValueConverter);
    assertNotNull(taskHeaderConverter);
    expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);
    expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);
    expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);
    workerTask.run();
    EasyMock.expectLastCall();
    EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
    EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);
    EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    workerTask.stop();
    EasyMock.expectLastCall();
    EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,0,0,0,0);
    assertEquals(Collections.emptySet(),worker.taskIds());
    worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);
    assertStatistics(worker,0,1);
    assertStartupStatistics(worker,0,0,1,0);
    assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());
    worker.stopAndAwaitTask(TASK_ID);
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,0,0,1,0);
    assertEquals(Collections.emptySet(),worker.taskIds());
    worker.stop();
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,0,0,1,0);
    PowerMock.verifyAll();
  }
  @Test public void testStartTaskFailure() throws Exception {
    expectConverters();
    expectStartStorage();
    Map<String,String> origProps=new HashMap<>();
    origProps.put(TaskConfig.TASK_CLASS_CONFIG,"missing.From.This.Workers.Classpath");
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader);
    EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
    EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);
    taskStatusListener.onFailure(EasyMock.eq(TASK_ID),EasyMock.<ConfigException>anyObject());
    EasyMock.expectLastCall();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,0,0,0,0);
    assertFalse(worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED));
    assertStartupStatistics(worker,0,0,1,1);
    assertStatistics(worker,0,0);
    assertStartupStatistics(worker,0,0,1,1);
    assertEquals(Collections.emptySet(),worker.taskIds());
    PowerMock.verifyAll();
  }
  @Test public void testCleanupTasksOnStop() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    PowerMock.expectNew(WorkerSourceTask.class,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(TaskStatus.Listener.class),EasyMock.eq(TargetState.STARTED),anyObject(JsonConverter.class),anyObject(JsonConverter.class),anyObject(JsonConverter.class),EasyMock.eq(new TransformationChain(Collections.emptyList(),NOOP_OPERATOR)),anyObject(KafkaProducer.class),anyObject(OffsetStorageReader.class),anyObject(OffsetStorageWriter.class),anyObject(WorkerConfig.class),anyObject(ClusterConfigState.class),anyObject(ConnectMetrics.class),EasyMock.eq(pluginLoader),anyObject(Time.class),anyObject(RetryWithToleranceOperator.class)).andReturn(workerTask);
    Map<String,String> origProps=new HashMap<>();
    origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
    TaskConfig taskConfig=new TaskConfig(origProps);
    EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);
    EasyMock.expect(task.version()).andReturn("1.0");
    workerTask.initialize(taskConfig);
    EasyMock.expectLastCall();
    assertNotNull(taskKeyConverter);
    assertNotNull(taskValueConverter);
    assertNotNull(taskHeaderConverter);
    expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter);
    expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter);
    expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter);
    workerTask.run();
    EasyMock.expectLastCall();
    EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
    EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);
    EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    workerTask.stop();
    EasyMock.expectLastCall();
    EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);
    assertStatistics(worker,0,1);
    worker.stop();
    assertStatistics(worker,0,0);
    PowerMock.verifyAll();
  }
  @Test public void testConverterOverrides() throws Exception {
    expectConverters();
    expectStartStorage();
    EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);
    Capture<TestConverter> keyConverter=EasyMock.newCapture();
    Capture<TestConfigurableConverter> valueConverter=EasyMock.newCapture();
    Capture<HeaderConverter> headerConverter=EasyMock.newCapture();
    EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
    PowerMock.expectNew(WorkerSourceTask.class,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(TaskStatus.Listener.class),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.capture(headerConverter),EasyMock.eq(new TransformationChain(Collections.emptyList(),NOOP_OPERATOR)),anyObject(KafkaProducer.class),anyObject(OffsetStorageReader.class),anyObject(OffsetStorageWriter.class),anyObject(WorkerConfig.class),anyObject(ClusterConfigState.class),anyObject(ConnectMetrics.class),EasyMock.eq(pluginLoader),anyObject(Time.class),anyObject(RetryWithToleranceOperator.class)).andReturn(workerTask);
    Map<String,String> origProps=new HashMap<>();
    origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
    TaskConfig taskConfig=new TaskConfig(origProps);
    EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);
    EasyMock.expect(task.version()).andReturn("1.0");
    workerTask.initialize(taskConfig);
    EasyMock.expectLastCall();
    assertNotNull(taskKeyConverter);
    assertNotNull(taskValueConverter);
    assertNotNull(taskHeaderConverter);
    expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter);
    expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter);
    expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
    expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter);
    workerTask.run();
    EasyMock.expectLastCall();
    EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
    EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);
    EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);
    EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
    workerTask.stop();
    EasyMock.expectLastCall();
    EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);
    EasyMock.expectLastCall();
    expectStopStorage();
    PowerMock.replayAll();
    worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
    worker.start();
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.taskIds());
    Map<String,String> connProps=anyConnectorConfigMap();
    connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,TestConverter.class.getName());
    connProps.put("key.converter.extra.config","foo");
    connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,TestConfigurableConverter.class.getName());
    connProps.put("value.converter.extra.config","bar");
    worker.startTask(TASK_ID,ClusterConfigState.EMPTY,connProps,origProps,taskStatusListener,TargetState.STARTED);
    assertStatistics(worker,0,1);
    assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());
    worker.stopAndAwaitTask(TASK_ID);
    assertStatistics(worker,0,0);
    assertEquals(Collections.emptySet(),worker.taskIds());
    worker.stop();
    assertStatistics(worker,0,0);
    PowerMock.verifyAll();
  }
  private void assertStatistics(  Worker worker,  int connectors,  int tasks){
    MetricGroup workerMetrics=worker.workerMetricsGroup().metricGroup();
    assertEquals(connectors,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-count"),0.0001d);
    assertEquals(tasks,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-count"),0.0001d);
    assertEquals(tasks,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-count"),0.0001d);
  }
  private void assertStartupStatistics(  Worker worker,  int connectorStartupAttempts,  int connectorStartupFailures,  int taskStartupAttempts,  int taskStartupFailures){
    double connectStartupSuccesses=connectorStartupAttempts - connectorStartupFailures;
    double taskStartupSuccesses=taskStartupAttempts - taskStartupFailures;
    double connectStartupSuccessPct=0.0d;
    double connectStartupFailurePct=0.0d;
    double taskStartupSuccessPct=0.0d;
    double taskStartupFailurePct=0.0d;
    if (connectorStartupAttempts != 0) {
      connectStartupSuccessPct=connectStartupSuccesses / connectorStartupAttempts;
      connectStartupFailurePct=(double)connectorStartupFailures / connectorStartupAttempts;
    }
    if (taskStartupAttempts != 0) {
      taskStartupSuccessPct=taskStartupSuccesses / taskStartupAttempts;
      taskStartupFailurePct=(double)taskStartupFailures / taskStartupAttempts;
    }
    MetricGroup workerMetrics=worker.workerMetricsGroup().metricGroup();
    assertEquals(connectorStartupAttempts,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-startup-attempts-total"),0.0001d);
    assertEquals(connectStartupSuccesses,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-startup-success-total"),0.0001d);
    assertEquals(connectorStartupFailures,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-startup-failure-total"),0.0001d);
    assertEquals(connectStartupSuccessPct,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-startup-success-percentage"),0.0001d);
    assertEquals(connectStartupFailurePct,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"connector-startup-failure-percentage"),0.0001d);
    assertEquals(taskStartupAttempts,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-startup-attempts-total"),0.0001d);
    assertEquals(taskStartupSuccesses,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-startup-success-total"),0.0001d);
    assertEquals(taskStartupFailures,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-startup-failure-total"),0.0001d);
    assertEquals(taskStartupSuccessPct,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-startup-success-percentage"),0.0001d);
    assertEquals(taskStartupFailurePct,MockConnectMetrics.currentMetricValueAsDouble(worker.metrics(),workerMetrics,"task-startup-failure-percentage"),0.0001d);
  }
  private void expectStartStorage(){
    offsetBackingStore.configure(anyObject(WorkerConfig.class));
    EasyMock.expectLastCall();
    offsetBackingStore.start();
    EasyMock.expectLastCall();
  }
  private void expectStopStorage(){
    offsetBackingStore.stop();
    EasyMock.expectLastCall();
  }
  private void expectConverters(){
    expectConverters(JsonConverter.class,false);
  }
  private void expectConverters(  Boolean expectDefaultConverters){
    expectConverters(JsonConverter.class,expectDefaultConverters);
  }
  private void expectConverters(  Class<? extends Converter> converterClass,  Boolean expectDefaultConverters){
    if (expectDefaultConverters) {
      EasyMock.expect(plugins.newConverter(config,WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS)).andReturn(keyConverter);
      EasyMock.expect(plugins.newConverter(config,WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS)).andReturn(valueConverter);
      EasyMock.expectLastCall();
    }
    Converter internalKeyConverter=PowerMock.createMock(converterClass);
    Converter internalValueConverter=PowerMock.createMock(converterClass);
    EasyMock.expect(plugins.newConverter(config,WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS)).andReturn(internalKeyConverter);
    EasyMock.expect(plugins.newConverter(config,WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS)).andReturn(internalValueConverter);
    EasyMock.expectLastCall();
  }
  private void expectTaskKeyConverters(  ClassLoaderUsage classLoaderUsage,  Converter returning){
    EasyMock.expect(plugins.newConverter(anyObject(AbstractConfig.class),eq(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG),eq(classLoaderUsage))).andReturn(returning);
  }
  private void expectTaskValueConverters(  ClassLoaderUsage classLoaderUsage,  Converter returning){
    EasyMock.expect(plugins.newConverter(anyObject(AbstractConfig.class),eq(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG),eq(classLoaderUsage))).andReturn(returning);
  }
  private void expectTaskHeaderConverter(  ClassLoaderUsage classLoaderUsage,  HeaderConverter returning){
    EasyMock.expect(plugins.newHeaderConverter(anyObject(AbstractConfig.class),eq(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG),eq(classLoaderUsage))).andReturn(returning);
  }
  private Map<String,String> anyConnectorConfigMap(){
    Map<String,String> props=new HashMap<>();
    props.put(ConnectorConfig.NAME_CONFIG,CONNECTOR_ID);
    props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,WorkerTestConnector.class.getName());
    props.put(ConnectorConfig.TASKS_MAX_CONFIG,"1");
    return props;
  }
public static class WorkerTestConnector extends Connector {
    private static final ConfigDef CONFIG_DEF=new ConfigDef().define("configName",ConfigDef.Type.STRING,ConfigDef.Importance.HIGH,"Test configName.");
    @Override public String version(){
      return "1.0";
    }
    @Override public void start(    Map<String,String> props){
    }
    @Override public Class<? extends Task> taskClass(){
      return null;
    }
    @Override public List<Map<String,String>> taskConfigs(    int maxTasks){
      return null;
    }
    @Override public void stop(){
    }
    @Override public ConfigDef config(){
      return CONFIG_DEF;
    }
  }
private static class TestSourceTask extends SourceTask {
    public TestSourceTask(){
    }
    @Override public String version(){
      return "1.0";
    }
    @Override public void start(    Map<String,String> props){
    }
    @Override public List<SourceRecord> poll() throws InterruptedException {
      return null;
    }
    @Override public void stop(){
    }
  }
public static class TestConverter implements Converter {
    public Map<String,?> configs;
    @Override public void configure(    Map<String,?> configs,    boolean isKey){
      this.configs=configs;
    }
    @Override public byte[] fromConnectData(    String topic,    Schema schema,    Object value){
      return new byte[0];
    }
    @Override public SchemaAndValue toConnectData(    String topic,    byte[] value){
      return null;
    }
  }
public static class TestConfigurableConverter implements Converter, Configurable {
    public Map<String,?> configs;
    public ConfigDef config(){
      return JsonConverterConfig.configDef();
    }
    @Override public void configure(    Map<String,?> configs){
      this.configs=configs;
      new JsonConverterConfig(configs);
    }
    @Override public void configure(    Map<String,?> configs,    boolean isKey){
      this.configs=configs;
    }
    @Override public byte[] fromConnectData(    String topic,    Schema schema,    Object value){
      return new byte[0];
    }
    @Override public SchemaAndValue toConnectData(    String topic,    byte[] value){
      return null;
    }
  }
}
