public class ProcessorNodeTest {
  @SuppressWarnings("unchecked") @Test(expected=StreamsException.class) public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit(){
    final ProcessorNode node=new ProcessorNode("name",new ExceptionalProcessor(),Collections.emptySet());
    node.init(null);
  }
  @SuppressWarnings("unchecked") @Test(expected=StreamsException.class) public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose(){
    final ProcessorNode node=new ProcessorNode("name",new ExceptionalProcessor(),Collections.emptySet());
    node.close();
  }
private static class ExceptionalProcessor implements Processor {
    @Override public void init(    final ProcessorContext context){
      throw new RuntimeException();
    }
    @Override public void process(    final Object key,    final Object value){
      throw new RuntimeException();
    }
    @Override public void close(){
      throw new RuntimeException();
    }
  }
private static class NoOpProcessor implements Processor<Object,Object> {
    @Override public void init(    final ProcessorContext context){
    }
    @Override public void process(    final Object key,    final Object value){
    }
    @Override public void close(){
    }
  }
  @Test public void testMetrics(){
    final StateSerdes anyStateSerde=StateSerdes.withBuiltinTypes("anyName",Bytes.class,Bytes.class);
    final Metrics metrics=new Metrics();
    final InternalMockProcessorContext context=new InternalMockProcessorContext(anyStateSerde,new RecordCollectorImpl(null,new LogContext("processnode-test "),new DefaultProductionExceptionHandler(),metrics.sensor("skipped-records")),metrics);
    final ProcessorNode<Object,Object> node=new ProcessorNode<>("name",new NoOpProcessor(),Collections.<String>emptySet());
    node.init(context);
    final String[] latencyOperations={"process","punctuate","create","destroy"};
    final String throughputOperation="forward";
    final String groupName="stream-processor-node-metrics";
    final Map<String,String> metricTags=new LinkedHashMap<>();
    metricTags.put("processor-node-id",node.name());
    metricTags.put("task-id",context.taskId().toString());
    metricTags.put("client-id","mock");
    for (    final String opName : latencyOperations) {
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-latency-avg",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-latency-max",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-rate",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-total",groupName,metricTags);
    }
    assertNotNull(metrics.metrics().get(metrics.metricName(throughputOperation + "-rate",groupName,"The average number of occurrence of " + throughputOperation + " operation per second.",metricTags)));
    metricTags.put("processor-node-id","all");
    for (    final String opName : latencyOperations) {
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-latency-avg",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-latency-max",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-rate",groupName,metricTags);
      StreamsTestUtils.getMetricByNameFilterByTags(metrics.metrics(),opName + "-total",groupName,metricTags);
    }
    assertNotNull(metrics.metrics().get(metrics.metricName(throughputOperation + "-rate",groupName,"The average number of occurrence of " + throughputOperation + " operation per second.",metricTags)));
  }
}
