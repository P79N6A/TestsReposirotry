public class ThrottleTest {
  /** 
 * ThrottleMock is a subclass of Throttle that uses a MockTime object.  It calls MockTime#sleep instead of Object#wait.
 */
private static class ThrottleMock extends Throttle {
    final MockTime time;
    ThrottleMock(    MockTime time,    int maxPerSec){
      super(maxPerSec,100);
      this.time=time;
    }
    @Override protected Time time(){
      return time;
    }
    @Override protected synchronized void delay(    long amount) throws InterruptedException {
      time.sleep(amount);
    }
  }
  @Test public void testThrottle() throws Exception {
    MockTime time=new MockTime(0,0,0);
    ThrottleMock throttle=new ThrottleMock(time,3);
    Assert.assertFalse(throttle.increment());
    Assert.assertEquals(0,time.milliseconds());
    Assert.assertFalse(throttle.increment());
    Assert.assertEquals(0,time.milliseconds());
    Assert.assertFalse(throttle.increment());
    Assert.assertEquals(0,time.milliseconds());
    Assert.assertTrue(throttle.increment());
    Assert.assertEquals(100,time.milliseconds());
    time.sleep(50);
    Assert.assertFalse(throttle.increment());
    Assert.assertEquals(150,time.milliseconds());
    Assert.assertFalse(throttle.increment());
    Assert.assertEquals(150,time.milliseconds());
    Assert.assertTrue(throttle.increment());
    Assert.assertEquals(200,time.milliseconds());
  }
}
