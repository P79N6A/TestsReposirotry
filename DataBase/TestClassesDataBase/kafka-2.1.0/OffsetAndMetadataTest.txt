/** 
 * This test case ensures OffsetAndMetadata class is serializable and is serialization compatible. Note: this ensures that the current code can deserialize data serialized with older versions of the code, but not the reverse. That is, older code won't necessarily be able to deserialize data serialized with newer code.
 */
public class OffsetAndMetadataTest {
  @Test(expected=IllegalArgumentException.class) public void testInvalidNegativeOffset(){
    new OffsetAndMetadata(-239L,Optional.of(15),"");
  }
  @Test public void testSerializationRoundtrip() throws IOException, ClassNotFoundException {
    checkSerde(new OffsetAndMetadata(239L,Optional.of(15),"blah"));
    checkSerde(new OffsetAndMetadata(239L,"blah"));
    checkSerde(new OffsetAndMetadata(239L));
  }
  private void checkSerde(  OffsetAndMetadata offsetAndMetadata) throws IOException, ClassNotFoundException {
    byte[] bytes=Serializer.serialize(offsetAndMetadata);
    OffsetAndMetadata deserialized=(OffsetAndMetadata)Serializer.deserialize(bytes);
    assertEquals(offsetAndMetadata,deserialized);
  }
  @Test public void testDeserializationCompatibilityBeforeLeaderEpoch() throws IOException, ClassNotFoundException {
    String fileName="serializedData/offsetAndMetadataBeforeLeaderEpoch";
    Object deserializedObject=Serializer.deserialize(fileName);
    assertEquals(new OffsetAndMetadata(10,"test commit metadata"),deserializedObject);
  }
  @Test public void testDeserializationCompatibilityWithLeaderEpoch() throws IOException, ClassNotFoundException {
    String fileName="serializedData/offsetAndMetadataWithLeaderEpoch";
    Object deserializedObject=Serializer.deserialize(fileName);
    assertEquals(new OffsetAndMetadata(10,Optional.of(235),"test commit metadata"),deserializedObject);
  }
}
