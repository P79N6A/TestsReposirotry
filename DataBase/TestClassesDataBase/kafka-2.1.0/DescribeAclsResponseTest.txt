public class DescribeAclsResponseTest {
  private static final short V0=0;
  private static final short V1=1;
  private static final AclBinding LITERAL_ACL1=new AclBinding(new ResourcePattern(ResourceType.TOPIC,"foo",PatternType.LITERAL),new AccessControlEntry("User:ANONYMOUS","127.0.0.1",AclOperation.READ,AclPermissionType.DENY));
  private static final AclBinding LITERAL_ACL2=new AclBinding(new ResourcePattern(ResourceType.GROUP,"group",PatternType.LITERAL),new AccessControlEntry("User:*","127.0.0.1",AclOperation.WRITE,AclPermissionType.ALLOW));
  private static final AclBinding PREFIXED_ACL1=new AclBinding(new ResourcePattern(ResourceType.GROUP,"prefix",PatternType.PREFIXED),new AccessControlEntry("User:*","127.0.0.1",AclOperation.CREATE,AclPermissionType.ALLOW));
  private static final AclBinding UNKNOWN_ACL=new AclBinding(new ResourcePattern(ResourceType.UNKNOWN,"foo",PatternType.LITERAL),new AccessControlEntry("User:ANONYMOUS","127.0.0.1",AclOperation.READ,AclPermissionType.DENY));
  @Test(expected=UnsupportedVersionException.class) public void shouldThrowOnV0IfNotLiteral(){
    new DescribeAclsResponse(10,ApiError.NONE,aclBindings(PREFIXED_ACL1)).toStruct(V0);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfUnknown(){
    new DescribeAclsResponse(10,ApiError.NONE,aclBindings(UNKNOWN_ACL)).toStruct(V0);
  }
  @Test public void shouldRoundTripV0(){
    final DescribeAclsResponse original=new DescribeAclsResponse(10,ApiError.NONE,aclBindings(LITERAL_ACL1,LITERAL_ACL2));
    final Struct struct=original.toStruct(V0);
    final DescribeAclsResponse result=new DescribeAclsResponse(struct);
    assertResponseEquals(original,result);
  }
  @Test public void shouldRoundTripV1(){
    final DescribeAclsResponse original=new DescribeAclsResponse(100,ApiError.NONE,aclBindings(LITERAL_ACL1,PREFIXED_ACL1));
    final Struct struct=original.toStruct(V1);
    final DescribeAclsResponse result=new DescribeAclsResponse(struct);
    assertResponseEquals(original,result);
  }
  private static void assertResponseEquals(  final DescribeAclsResponse original,  final DescribeAclsResponse actual){
    final Set<AclBinding> originalBindings=new HashSet<>(original.acls());
    final Set<AclBinding> actualBindings=new HashSet<>(actual.acls());
    assertEquals(originalBindings,actualBindings);
  }
  private static List<AclBinding> aclBindings(  final AclBinding... bindings){
    return Arrays.asList(bindings);
  }
}
