public class InMemoryLRUCacheStoreTest extends AbstractKeyValueStoreTest {
  @SuppressWarnings("unchecked") @Override protected <K,V>KeyValueStore<K,V> createKeyValueStore(  final ProcessorContext context){
    final StoreBuilder storeBuilder=Stores.keyValueStoreBuilder(Stores.lruMap("my-store",10),(Serde<K>)context.keySerde(),(Serde<V>)context.valueSerde());
    final StateStore store=storeBuilder.build();
    store.init(context,store);
    return (KeyValueStore<K,V>)store;
  }
  @Test public void shouldPutAllKeyValuePairs(){
    final List<KeyValue<Integer,String>> kvPairs=Arrays.asList(KeyValue.pair(1,"1"),KeyValue.pair(2,"2"),KeyValue.pair(3,"3"));
    store.putAll(kvPairs);
    assertThat(store.approximateNumEntries(),equalTo(3L));
    for (    final KeyValue<Integer,String> kvPair : kvPairs) {
      assertThat(store.get(kvPair.key),equalTo(kvPair.value));
    }
  }
  @Test public void shouldUpdateValuesForExistingKeysOnPutAll(){
    final List<KeyValue<Integer,String>> kvPairs=Arrays.asList(KeyValue.pair(1,"1"),KeyValue.pair(2,"2"),KeyValue.pair(3,"3"));
    store.putAll(kvPairs);
    final List<KeyValue<Integer,String>> updatedKvPairs=Arrays.asList(KeyValue.pair(1,"ONE"),KeyValue.pair(2,"TWO"),KeyValue.pair(3,"THREE"));
    store.putAll(updatedKvPairs);
    assertThat(store.approximateNumEntries(),equalTo(3L));
    for (    final KeyValue<Integer,String> kvPair : updatedKvPairs) {
      assertThat(store.get(kvPair.key),equalTo(kvPair.value));
    }
  }
  @Test public void testEvict(){
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.put(3,"three");
    store.put(4,"four");
    store.put(5,"five");
    store.put(6,"six");
    store.put(7,"seven");
    store.put(8,"eight");
    store.put(9,"nine");
    assertEquals(10,driver.sizeOf(store));
    store.put(10,"ten");
    store.flush();
    assertEquals(10,driver.sizeOf(store));
    assertTrue(driver.flushedEntryRemoved(0));
    assertEquals(1,driver.numFlushedEntryRemoved());
    store.delete(1);
    store.flush();
    assertEquals(9,driver.sizeOf(store));
    assertTrue(driver.flushedEntryRemoved(0));
    assertTrue(driver.flushedEntryRemoved(1));
    assertEquals(2,driver.numFlushedEntryRemoved());
    store.put(11,"eleven");
    store.flush();
    assertEquals(10,driver.sizeOf(store));
    assertEquals(2,driver.numFlushedEntryRemoved());
    store.put(2,"two-again");
    store.flush();
    assertEquals(10,driver.sizeOf(store));
    assertEquals(2,driver.numFlushedEntryRemoved());
    store.put(12,"twelve");
    store.flush();
    assertEquals(10,driver.sizeOf(store));
    assertTrue(driver.flushedEntryRemoved(0));
    assertTrue(driver.flushedEntryRemoved(1));
    assertTrue(driver.flushedEntryRemoved(3));
    assertEquals(3,driver.numFlushedEntryRemoved());
  }
  @Test public void testRestoreEvict(){
    store.close();
    driver.addEntryToRestoreLog(0,"zero");
    driver.addEntryToRestoreLog(1,"one");
    driver.addEntryToRestoreLog(2,"two");
    driver.addEntryToRestoreLog(3,"three");
    driver.addEntryToRestoreLog(4,"four");
    driver.addEntryToRestoreLog(5,"five");
    driver.addEntryToRestoreLog(6,"fix");
    driver.addEntryToRestoreLog(7,"seven");
    driver.addEntryToRestoreLog(8,"eight");
    driver.addEntryToRestoreLog(9,"nine");
    driver.addEntryToRestoreLog(10,"ten");
    store=createKeyValueStore(driver.context());
    context.restore(store.name(),driver.restoredEntries());
    assertEquals(0,driver.numFlushedEntryStored());
    assertEquals(0,driver.numFlushedEntryRemoved());
    assertEquals(10,driver.sizeOf(store));
  }
}
