public class SystemTestUtilTest {
  private final Map<String,String> expectedParsedMap=new TreeMap<>();
  @Before public void setUp(){
    expectedParsedMap.put("foo","foo1");
    expectedParsedMap.put("bar","bar1");
    expectedParsedMap.put("baz","baz1");
  }
  @Test public void shouldParseCorrectMap(){
    final String formattedConfigs="foo=foo1,bar=bar1,baz=baz1";
    final Map<String,String> parsedMap=SystemTestUtil.parseConfigs(formattedConfigs);
    final TreeMap<String,String> sortedParsedMap=new TreeMap<>(parsedMap);
    assertEquals(sortedParsedMap,expectedParsedMap);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowExceptionOnNull(){
    SystemTestUtil.parseConfigs(null);
  }
  @Test(expected=IllegalStateException.class) public void shouldThrowExceptionIfNotCorrectKeyValueSeparator(){
    final String badString="foo:bar,baz:boo";
    SystemTestUtil.parseConfigs(badString);
  }
  @Test(expected=IllegalStateException.class) public void shouldThrowExceptionIfNotCorrectKeyValuePairSeparator(){
    final String badString="foo=bar;baz=boo";
    SystemTestUtil.parseConfigs(badString);
  }
  @Test public void shouldParseSingleKeyValuePairString(){
    final Map<String,String> expectedSinglePairMap=new HashMap<>();
    expectedSinglePairMap.put("foo","bar");
    final String singleValueString="foo=bar";
    final Map<String,String> parsedMap=SystemTestUtil.parseConfigs(singleValueString);
    assertEquals(expectedSinglePairMap,parsedMap);
  }
}
