public class PluginDescTest {
  private final ClassLoader systemLoader=ClassLoader.getSystemClassLoader();
  private final String regularVersion="1.0.0";
  private final String newerVersion="1.0.1";
  private final String snaphotVersion="1.0.0-SNAPSHOT";
  private final String noVersion="undefined";
  private PluginClassLoader pluginLoader;
  @Before public void setUp() throws Exception {
    URL location=Paths.get("/tmp").toUri().toURL();
    pluginLoader=new PluginClassLoader(location,new URL[0],systemLoader);
  }
  @Test public void testRegularPluginDesc() throws Exception {
    PluginDesc<Connector> connectorDesc=new PluginDesc<>(Connector.class,regularVersion,pluginLoader);
    assertPluginDesc(connectorDesc,Connector.class,regularVersion,pluginLoader.location());
    PluginDesc<Converter> converterDesc=new PluginDesc<>(Converter.class,snaphotVersion,pluginLoader);
    assertPluginDesc(converterDesc,Converter.class,snaphotVersion,pluginLoader.location());
    PluginDesc<Transformation> transformDesc=new PluginDesc<>(Transformation.class,noVersion,pluginLoader);
    assertPluginDesc(transformDesc,Transformation.class,noVersion,pluginLoader.location());
  }
  @Test public void testPluginDescWithSystemClassLoader() throws Exception {
    String location="classpath";
    PluginDesc<SinkConnector> connectorDesc=new PluginDesc<>(SinkConnector.class,regularVersion,systemLoader);
    assertPluginDesc(connectorDesc,SinkConnector.class,regularVersion,location);
    PluginDesc<Converter> converterDesc=new PluginDesc<>(Converter.class,snaphotVersion,systemLoader);
    assertPluginDesc(converterDesc,Converter.class,snaphotVersion,location);
    PluginDesc<Transformation> transformDesc=new PluginDesc<>(Transformation.class,noVersion,systemLoader);
    assertPluginDesc(transformDesc,Transformation.class,noVersion,location);
  }
  @Test public void testPluginDescWithNullVersion() throws Exception {
    String nullVersion="null";
    PluginDesc<SourceConnector> connectorDesc=new PluginDesc<>(SourceConnector.class,null,pluginLoader);
    assertPluginDesc(connectorDesc,SourceConnector.class,nullVersion,pluginLoader.location());
    String location="classpath";
    PluginDesc<Converter> converterDesc=new PluginDesc<>(Converter.class,null,systemLoader);
    assertPluginDesc(converterDesc,Converter.class,nullVersion,location);
  }
  @Test public void testPluginDescEquality() throws Exception {
    PluginDesc<Connector> connectorDescPluginPath=new PluginDesc<>(Connector.class,snaphotVersion,pluginLoader);
    PluginDesc<Connector> connectorDescClasspath=new PluginDesc<>(Connector.class,snaphotVersion,systemLoader);
    assertEquals(connectorDescPluginPath,connectorDescClasspath);
    assertEquals(connectorDescPluginPath.hashCode(),connectorDescClasspath.hashCode());
    PluginDesc<Converter> converterDescPluginPath=new PluginDesc<>(Converter.class,noVersion,pluginLoader);
    PluginDesc<Converter> converterDescClasspath=new PluginDesc<>(Converter.class,noVersion,systemLoader);
    assertEquals(converterDescPluginPath,converterDescClasspath);
    assertEquals(converterDescPluginPath.hashCode(),converterDescClasspath.hashCode());
    PluginDesc<Transformation> transformDescPluginPath=new PluginDesc<>(Transformation.class,null,pluginLoader);
    PluginDesc<Transformation> transformDescClasspath=new PluginDesc<>(Transformation.class,noVersion,pluginLoader);
    assertNotEquals(transformDescPluginPath,transformDescClasspath);
  }
  @Test public void testPluginDescComparison() throws Exception {
    PluginDesc<Connector> connectorDescPluginPath=new PluginDesc<>(Connector.class,regularVersion,pluginLoader);
    PluginDesc<Connector> connectorDescClasspath=new PluginDesc<>(Connector.class,newerVersion,systemLoader);
    assertNewer(connectorDescPluginPath,connectorDescClasspath);
    PluginDesc<Converter> converterDescPluginPath=new PluginDesc<>(Converter.class,noVersion,pluginLoader);
    PluginDesc<Converter> converterDescClasspath=new PluginDesc<>(Converter.class,snaphotVersion,systemLoader);
    assertNewer(converterDescPluginPath,converterDescClasspath);
    PluginDesc<Transformation> transformDescPluginPath=new PluginDesc<>(Transformation.class,null,pluginLoader);
    PluginDesc<Transformation> transformDescClasspath=new PluginDesc<>(Transformation.class,regularVersion,systemLoader);
    assertNewer(transformDescPluginPath,transformDescClasspath);
  }
  private static <T>void assertPluginDesc(  PluginDesc<T> desc,  Class<? extends T> klass,  String version,  String location){
    assertEquals(desc.pluginClass(),klass);
    assertEquals(desc.className(),klass.getName());
    assertEquals(desc.version(),version);
    assertEquals(desc.type(),PluginType.from(klass));
    assertEquals(desc.typeName(),PluginType.from(klass).toString());
    assertEquals(desc.location(),location);
  }
  private static <T>void assertNewer(  PluginDesc<T> older,  PluginDesc<T> newer){
    assertTrue(newer + " should be newer than " + older,older.compareTo(newer) < 0);
  }
}
