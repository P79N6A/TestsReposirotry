public class ConnectorReconfigurationTest {
  @Test public void testDefaultReconfigure() throws Exception {
    TestConnector conn=new TestConnector(false);
    conn.reconfigure(Collections.<String,String>emptyMap());
    assertEquals(conn.stopOrder,0);
    assertEquals(conn.configureOrder,1);
  }
  @Test(expected=ConnectException.class) public void testReconfigureStopException() throws Exception {
    TestConnector conn=new TestConnector(true);
    conn.reconfigure(Collections.<String,String>emptyMap());
  }
private static class TestConnector extends Connector {
    private boolean stopException;
    private int order=0;
    public int stopOrder=-1;
    public int configureOrder=-1;
    public TestConnector(    boolean stopException){
      this.stopException=stopException;
    }
    @Override public String version(){
      return "1.0";
    }
    @Override public void start(    Map<String,String> props){
      configureOrder=order++;
    }
    @Override public Class<? extends Task> taskClass(){
      return null;
    }
    @Override public List<Map<String,String>> taskConfigs(    int count){
      return null;
    }
    @Override public void stop(){
      stopOrder=order++;
      if (stopException)       throw new ConnectException("error");
    }
    @Override public ConfigDef config(){
      return new ConfigDef();
    }
  }
}
