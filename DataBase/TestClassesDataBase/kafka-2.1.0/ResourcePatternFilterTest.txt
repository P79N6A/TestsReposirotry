public class ResourcePatternFilterTest {
  @Test public void shouldBeUnknownIfResourceTypeUnknown(){
    assertTrue(new ResourcePatternFilter(UNKNOWN,null,PatternType.LITERAL).isUnknown());
  }
  @Test public void shouldBeUnknownIfPatternTypeUnknown(){
    assertTrue(new ResourcePatternFilter(GROUP,null,PatternType.UNKNOWN).isUnknown());
  }
  @Test public void shouldNotMatchIfDifferentResourceType(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name",LITERAL).matches(new ResourcePattern(GROUP,"Name",LITERAL)));
  }
  @Test public void shouldNotMatchIfDifferentName(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Different",PREFIXED).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldNotMatchIfDifferentNameCase(){
    assertFalse(new ResourcePatternFilter(TOPIC,"NAME",LITERAL).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldNotMatchIfDifferentPatternType(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name",LITERAL).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchWhereResourceTypeIsAny(){
    assertTrue(new ResourcePatternFilter(ANY,"Name",PREFIXED).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchWhereResourceNameIsAny(){
    assertTrue(new ResourcePatternFilter(TOPIC,null,PREFIXED).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchWherePatternTypeIsAny(){
    assertTrue(new ResourcePatternFilter(TOPIC,null,PatternType.ANY).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchWherePatternTypeIsMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,null,PatternType.MATCH).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchLiteralIfExactMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name",LITERAL).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name",PatternType.ANY).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name",PatternType.MATCH).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldNotMatchLiteralIfNamePrefixed(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name-something",PatternType.MATCH).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldMatchLiteralWildcardIfExactMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"*",LITERAL).matches(new ResourcePattern(TOPIC,"*",LITERAL)));
  }
  @Test public void shouldNotMatchLiteralWildcardAgainstOtherName(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name",LITERAL).matches(new ResourcePattern(TOPIC,"*",LITERAL)));
  }
  @Test public void shouldNotMatchLiteralWildcardTheWayAround(){
    assertFalse(new ResourcePatternFilter(TOPIC,"*",LITERAL).matches(new ResourcePattern(TOPIC,"Name",LITERAL)));
  }
  @Test public void shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name",PatternType.ANY).matches(new ResourcePattern(TOPIC,"*",LITERAL)));
  }
  @Test public void shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name",PatternType.MATCH).matches(new ResourcePattern(TOPIC,"*",LITERAL)));
  }
  @Test public void shouldMatchPrefixedIfExactMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name",PREFIXED).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name",PREFIXED).matches(new ResourcePattern(TOPIC,"Name-something",PREFIXED)));
  }
  @Test public void shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name-something",PREFIXED).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny(){
    assertFalse(new ResourcePatternFilter(TOPIC,"Name-something",PatternType.ANY).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
  @Test public void shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch(){
    assertTrue(new ResourcePatternFilter(TOPIC,"Name-something",PatternType.MATCH).matches(new ResourcePattern(TOPIC,"Name",PREFIXED)));
  }
}
