public class ConsumerInterceptorsTest {
  private final int filterPartition1=5;
  private final int filterPartition2=6;
  private final String topic="test";
  private final int partition=1;
  private final TopicPartition tp=new TopicPartition(topic,partition);
  private final TopicPartition filterTopicPart1=new TopicPartition("test5",filterPartition1);
  private final TopicPartition filterTopicPart2=new TopicPartition("test6",filterPartition2);
  private final ConsumerRecord<Integer,Integer> consumerRecord=new ConsumerRecord<>(topic,partition,0,0L,TimestampType.CREATE_TIME,0L,0,0,1,1);
  private int onCommitCount=0;
  private int onConsumeCount=0;
  /** 
 * Test consumer interceptor that filters records in onConsume() intercept
 */
private class FilterConsumerInterceptor<K,V> implements ConsumerInterceptor<K,V> {
    private int filterPartition;
    private boolean throwExceptionOnConsume=false;
    private boolean throwExceptionOnCommit=false;
    FilterConsumerInterceptor(    int filterPartition){
      this.filterPartition=filterPartition;
    }
    @Override public void configure(    Map<String,?> configs){
    }
    @Override public ConsumerRecords<K,V> onConsume(    ConsumerRecords<K,V> records){
      onConsumeCount++;
      if (throwExceptionOnConsume)       throw new KafkaException("Injected exception in FilterConsumerInterceptor.onConsume.");
      Map<TopicPartition,List<ConsumerRecord<K,V>>> recordMap=new HashMap<>();
      for (      TopicPartition tp : records.partitions()) {
        if (tp.partition() != filterPartition)         recordMap.put(tp,records.records(tp));
      }
      return new ConsumerRecords<K,V>(recordMap);
    }
    @Override public void onCommit(    Map<TopicPartition,OffsetAndMetadata> offsets){
      onCommitCount++;
      if (throwExceptionOnCommit)       throw new KafkaException("Injected exception in FilterConsumerInterceptor.onCommit.");
    }
    @Override public void close(){
    }
    public void injectOnConsumeError(    boolean on){
      throwExceptionOnConsume=on;
    }
    public void injectOnCommitError(    boolean on){
      throwExceptionOnCommit=on;
    }
  }
  @Test public void testOnConsumeChain(){
    List<ConsumerInterceptor<Integer,Integer>> interceptorList=new ArrayList<>();
    FilterConsumerInterceptor<Integer,Integer> interceptor1=new FilterConsumerInterceptor<>(filterPartition1);
    FilterConsumerInterceptor<Integer,Integer> interceptor2=new FilterConsumerInterceptor<>(filterPartition2);
    interceptorList.add(interceptor1);
    interceptorList.add(interceptor2);
    ConsumerInterceptors<Integer,Integer> interceptors=new ConsumerInterceptors<>(interceptorList);
    Map<TopicPartition,List<ConsumerRecord<Integer,Integer>>> records=new HashMap<>();
    List<ConsumerRecord<Integer,Integer>> list1=new ArrayList<>();
    list1.add(consumerRecord);
    List<ConsumerRecord<Integer,Integer>> list2=new ArrayList<>();
    list2.add(new ConsumerRecord<>(filterTopicPart1.topic(),filterTopicPart1.partition(),0,0L,TimestampType.CREATE_TIME,0L,0,0,1,1));
    List<ConsumerRecord<Integer,Integer>> list3=new ArrayList<>();
    list3.add(new ConsumerRecord<>(filterTopicPart2.topic(),filterTopicPart2.partition(),0,0L,TimestampType.CREATE_TIME,0L,0,0,1,1));
    records.put(tp,list1);
    records.put(filterTopicPart1,list2);
    records.put(filterTopicPart2,list3);
    ConsumerRecords<Integer,Integer> consumerRecords=new ConsumerRecords<>(records);
    ConsumerRecords<Integer,Integer> interceptedRecords=interceptors.onConsume(consumerRecords);
    assertEquals(1,interceptedRecords.count());
    assertTrue(interceptedRecords.partitions().contains(tp));
    assertFalse(interceptedRecords.partitions().contains(filterTopicPart1));
    assertFalse(interceptedRecords.partitions().contains(filterTopicPart2));
    assertEquals(2,onConsumeCount);
    interceptor1.injectOnConsumeError(true);
    ConsumerRecords<Integer,Integer> partInterceptedRecs=interceptors.onConsume(consumerRecords);
    assertEquals(2,partInterceptedRecs.count());
    assertTrue(partInterceptedRecs.partitions().contains(filterTopicPart1));
    assertFalse(partInterceptedRecs.partitions().contains(filterTopicPart2));
    assertEquals(4,onConsumeCount);
    interceptor2.injectOnConsumeError(true);
    ConsumerRecords<Integer,Integer> noneInterceptedRecs=interceptors.onConsume(consumerRecords);
    assertEquals(noneInterceptedRecs,consumerRecords);
    assertEquals(3,noneInterceptedRecs.count());
    assertEquals(6,onConsumeCount);
    interceptors.close();
  }
  @Test public void testOnCommitChain(){
    List<ConsumerInterceptor<Integer,Integer>> interceptorList=new ArrayList<>();
    FilterConsumerInterceptor<Integer,Integer> interceptor1=new FilterConsumerInterceptor<>(filterPartition1);
    FilterConsumerInterceptor<Integer,Integer> interceptor2=new FilterConsumerInterceptor<>(filterPartition2);
    interceptorList.add(interceptor1);
    interceptorList.add(interceptor2);
    ConsumerInterceptors<Integer,Integer> interceptors=new ConsumerInterceptors<>(interceptorList);
    Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
    offsets.put(tp,new OffsetAndMetadata(0));
    interceptors.onCommit(offsets);
    assertEquals(2,onCommitCount);
    interceptor1.injectOnCommitError(true);
    interceptors.onCommit(offsets);
    assertEquals(4,onCommitCount);
    interceptors.close();
  }
}
