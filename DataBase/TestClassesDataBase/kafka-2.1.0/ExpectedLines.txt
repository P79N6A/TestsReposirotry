public static class ExpectedLines {
  List<String> expectedLines=new ArrayList<>();
  public ExpectedLines addLine(  String line){
    expectedLines.add(line);
    return this;
  }
  public ExpectedLines waitFor(  final String nodeName,  final CapturingCommandRunner runner) throws InterruptedException {
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return linesMatch(nodeName,runner.lines(nodeName));
      }
    }
,"failed to find the expected lines " + this.toString());
    return this;
  }
  private boolean linesMatch(  final String nodeName,  List<String> actualLines){
    int matchIdx=0, i=0;
    while (true) {
      if (matchIdx == expectedLines.size()) {
        log.debug("Got expected lines for {}",nodeName);
        return true;
      }
      if (i == actualLines.size()) {
        log.info("Failed to find the expected lines for {}.  First " + "missing line on index {}: {}",nodeName,matchIdx,expectedLines.get(matchIdx));
        return false;
      }
      String actualLine=actualLines.get(i++);
      String expectedLine=expectedLines.get(matchIdx);
      if (expectedLine.equals(actualLine)) {
        matchIdx++;
      }
 else {
        log.trace("Expected:\n'{}', Got:\n'{}'",expectedLine,actualLine);
        matchIdx=0;
      }
    }
  }
  @Override public String toString(){
    return Utils.join(expectedLines,", ");
  }
}
