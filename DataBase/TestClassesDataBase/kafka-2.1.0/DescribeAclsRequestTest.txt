public class DescribeAclsRequestTest {
  private static final short V0=0;
  private static final short V1=1;
  private static final AclBindingFilter LITERAL_FILTER=new AclBindingFilter(new ResourcePatternFilter(ResourceType.TOPIC,"foo",PatternType.LITERAL),new AccessControlEntryFilter("User:ANONYMOUS","127.0.0.1",AclOperation.READ,AclPermissionType.DENY));
  private static final AclBindingFilter PREFIXED_FILTER=new AclBindingFilter(new ResourcePatternFilter(ResourceType.GROUP,"prefix",PatternType.PREFIXED),new AccessControlEntryFilter("User:*","127.0.0.1",AclOperation.CREATE,AclPermissionType.ALLOW));
  private static final AclBindingFilter ANY_FILTER=new AclBindingFilter(new ResourcePatternFilter(ResourceType.GROUP,"bar",PatternType.ANY),new AccessControlEntryFilter("User:*","127.0.0.1",AclOperation.CREATE,AclPermissionType.ALLOW));
  private static final AclBindingFilter UNKNOWN_FILTER=new AclBindingFilter(new ResourcePatternFilter(ResourceType.UNKNOWN,"foo",PatternType.LITERAL),new AccessControlEntryFilter("User:ANONYMOUS","127.0.0.1",AclOperation.READ,AclPermissionType.DENY));
  @Test(expected=UnsupportedVersionException.class) public void shouldThrowOnV0IfPrefixed(){
    new DescribeAclsRequest(PREFIXED_FILTER,V0);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfUnknown(){
    new DescribeAclsRequest(UNKNOWN_FILTER,V0);
  }
  @Test public void shouldRoundTripLiteralV0(){
    final DescribeAclsRequest original=new DescribeAclsRequest(LITERAL_FILTER,V0);
    final Struct struct=original.toStruct();
    final DescribeAclsRequest result=new DescribeAclsRequest(struct,V0);
    assertRequestEquals(original,result);
  }
  @Test public void shouldRoundTripAnyV0AsLiteral(){
    final DescribeAclsRequest original=new DescribeAclsRequest(ANY_FILTER,V0);
    final DescribeAclsRequest expected=new DescribeAclsRequest(new AclBindingFilter(new ResourcePatternFilter(ANY_FILTER.patternFilter().resourceType(),ANY_FILTER.patternFilter().name(),PatternType.LITERAL),ANY_FILTER.entryFilter()),V0);
    final Struct struct=original.toStruct();
    final DescribeAclsRequest result=new DescribeAclsRequest(struct,V0);
    assertRequestEquals(expected,result);
  }
  @Test public void shouldRoundTripLiteralV1(){
    final DescribeAclsRequest original=new DescribeAclsRequest(LITERAL_FILTER,V1);
    final Struct struct=original.toStruct();
    final DescribeAclsRequest result=new DescribeAclsRequest(struct,V1);
    assertRequestEquals(original,result);
  }
  @Test public void shouldRoundTripPrefixedV1(){
    final DescribeAclsRequest original=new DescribeAclsRequest(PREFIXED_FILTER,V1);
    final Struct struct=original.toStruct();
    final DescribeAclsRequest result=new DescribeAclsRequest(struct,V1);
    assertRequestEquals(original,result);
  }
  @Test public void shouldRoundTripAnyV1(){
    final DescribeAclsRequest original=new DescribeAclsRequest(ANY_FILTER,V1);
    final Struct struct=original.toStruct();
    final DescribeAclsRequest result=new DescribeAclsRequest(struct,V1);
    assertRequestEquals(original,result);
  }
  private static void assertRequestEquals(  final DescribeAclsRequest original,  final DescribeAclsRequest actual){
    final AclBindingFilter originalFilter=original.filter();
    final AclBindingFilter acttualFilter=actual.filter();
    assertEquals(originalFilter,acttualFilter);
  }
}
