public class TimeWindowTest {
  private long start=50;
  private long end=100;
  private final TimeWindow window=new TimeWindow(start,end);
  private final SessionWindow sessionWindow=new SessionWindow(start,end);
  @Test(expected=IllegalArgumentException.class) public void endMustBeLargerThanStart(){
    new TimeWindow(start,start);
  }
  @Test public void shouldNotOverlapIfOtherWindowIsBeforeThisWindow(){
    assertFalse(window.overlap(new TimeWindow(0,25)));
    assertFalse(window.overlap(new TimeWindow(0,start - 1)));
    assertFalse(window.overlap(new TimeWindow(0,start)));
  }
  @Test public void shouldOverlapIfOtherWindowEndIsWithinThisWindow(){
    assertTrue(window.overlap(new TimeWindow(0,start + 1)));
    assertTrue(window.overlap(new TimeWindow(0,75)));
    assertTrue(window.overlap(new TimeWindow(0,end - 1)));
    assertTrue(window.overlap(new TimeWindow(start - 1,start + 1)));
    assertTrue(window.overlap(new TimeWindow(start - 1,75)));
    assertTrue(window.overlap(new TimeWindow(start - 1,end - 1)));
  }
  @Test public void shouldOverlapIfOtherWindowContainsThisWindow(){
    assertTrue(window.overlap(new TimeWindow(0,end)));
    assertTrue(window.overlap(new TimeWindow(0,end + 1)));
    assertTrue(window.overlap(new TimeWindow(0,150)));
    assertTrue(window.overlap(new TimeWindow(start - 1,end)));
    assertTrue(window.overlap(new TimeWindow(start - 1,end + 1)));
    assertTrue(window.overlap(new TimeWindow(start - 1,150)));
    assertTrue(window.overlap(new TimeWindow(start,end)));
    assertTrue(window.overlap(new TimeWindow(start,end + 1)));
    assertTrue(window.overlap(new TimeWindow(start,150)));
  }
  @Test public void shouldOverlapIfOtherWindowIsWithinThisWindow(){
    assertTrue(window.overlap(new TimeWindow(start,75)));
    assertTrue(window.overlap(new TimeWindow(start,end)));
    assertTrue(window.overlap(new TimeWindow(75,end)));
  }
  @Test public void shouldOverlapIfOtherWindowStartIsWithinThisWindow(){
    assertTrue(window.overlap(new TimeWindow(start,end + 1)));
    assertTrue(window.overlap(new TimeWindow(start,150)));
    assertTrue(window.overlap(new TimeWindow(75,end + 1)));
    assertTrue(window.overlap(new TimeWindow(75,150)));
  }
  @Test public void shouldNotOverlapIsOtherWindowIsAfterThisWindow(){
    assertFalse(window.overlap(new TimeWindow(end,end + 1)));
    assertFalse(window.overlap(new TimeWindow(end,150)));
    assertFalse(window.overlap(new TimeWindow(end + 1,150)));
    assertFalse(window.overlap(new TimeWindow(125,150)));
  }
  @Test(expected=IllegalArgumentException.class) public void cannotCompareTimeWindowWithDifferentWindowType(){
    window.overlap(sessionWindow);
  }
  @Test public void shouldReturnMatchedWindowsOrderedByTimestamp(){
    final TimeWindows windows=TimeWindows.of(ofMillis(12L)).advanceBy(ofMillis(5L));
    final Map<Long,TimeWindow> matched=windows.windowsFor(21L);
    final Long[] expected=matched.keySet().toArray(new Long[matched.size()]);
    assertEquals(expected[0].longValue(),10L);
    assertEquals(expected[1].longValue(),15L);
    assertEquals(expected[2].longValue(),20L);
  }
}
