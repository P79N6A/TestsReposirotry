public class OAuthBearerLoginModuleTest {
  public static final SaslExtensions RAISE_UNSUPPORTED_CB_EXCEPTION_FLAG=null;
private static class TestCallbackHandler implements AuthenticateCallbackHandler {
    private final OAuthBearerToken[] tokens;
    private int index=0;
    private int extensionsIndex=0;
    private final SaslExtensions[] extensions;
    public TestCallbackHandler(    OAuthBearerToken[] tokens,    SaslExtensions[] extensions){
      this.tokens=Objects.requireNonNull(tokens);
      this.extensions=extensions;
    }
    @Override public void handle(    Callback[] callbacks) throws IOException, UnsupportedCallbackException {
      for (      Callback callback : callbacks) {
        if (callback instanceof OAuthBearerTokenCallback)         try {
          handleCallback((OAuthBearerTokenCallback)callback);
        }
 catch (        KafkaException e) {
          throw new IOException(e.getMessage(),e);
        }
 else         if (callback instanceof SaslExtensionsCallback) {
          try {
            handleExtensionsCallback((SaslExtensionsCallback)callback);
          }
 catch (          KafkaException e) {
            throw new IOException(e.getMessage(),e);
          }
        }
 else         throw new UnsupportedCallbackException(callback);
      }
    }
    @Override public void configure(    Map<String,?> configs,    String saslMechanism,    List<AppConfigurationEntry> jaasConfigEntries){
    }
    @Override public void close(){
    }
    private void handleCallback(    OAuthBearerTokenCallback callback) throws IOException {
      if (callback.token() != null)       throw new IllegalArgumentException("Callback had a token already");
      if (tokens.length > index)       callback.token(tokens[index++]);
 else       throw new IOException("no more tokens");
    }
    private void handleExtensionsCallback(    SaslExtensionsCallback callback) throws IOException, UnsupportedCallbackException {
      if (extensions.length > extensionsIndex) {
        SaslExtensions extension=extensions[extensionsIndex++];
        if (extension == RAISE_UNSUPPORTED_CB_EXCEPTION_FLAG) {
          throw new UnsupportedCallbackException(callback);
        }
        callback.extensions(extension);
      }
 else       throw new IOException("no more extensions");
    }
  }
  @Test public void login1Commit1Login2Commit2Logout1Login3Commit3Logout2() throws LoginException {
    Subject subject=new Subject();
    Set<Object> privateCredentials=subject.getPrivateCredentials();
    Set<Object> publicCredentials=subject.getPublicCredentials();
    OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
    SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class),mock(SaslExtensions.class)};
    TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
    OAuthBearerLoginModule loginModule1=new OAuthBearerLoginModule();
    loginModule1.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    OAuthBearerLoginModule loginModule2=new OAuthBearerLoginModule();
    loginModule2.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    OAuthBearerLoginModule loginModule3=new OAuthBearerLoginModule();
    loginModule3.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.commit();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.login();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.commit();
    assertEquals(2,privateCredentials.size());
    assertEquals(2,publicCredentials.size());
    Iterator<Object> iterator=privateCredentials.iterator();
    Iterator<Object> publicIterator=publicCredentials.iterator();
    assertNotSame(tokens[2],iterator.next());
    assertNotSame(tokens[2],iterator.next());
    assertNotSame(extensions[2],publicIterator.next());
    assertNotSame(extensions[2],publicIterator.next());
    loginModule1.logout();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[1],privateCredentials.iterator().next());
    assertSame(extensions[1],publicCredentials.iterator().next());
    loginModule3.login();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[1],privateCredentials.iterator().next());
    assertSame(extensions[1],publicCredentials.iterator().next());
    loginModule3.commit();
    assertEquals(2,privateCredentials.size());
    assertEquals(2,publicCredentials.size());
    iterator=privateCredentials.iterator();
    publicIterator=publicCredentials.iterator();
    assertNotSame(tokens[0],iterator.next());
    assertNotSame(tokens[0],iterator.next());
    assertNotSame(extensions[0],publicIterator.next());
    assertNotSame(extensions[0],publicIterator.next());
    loginModule2.logout();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[2],privateCredentials.iterator().next());
    assertSame(extensions[2],publicCredentials.iterator().next());
    verifyZeroInteractions((Object[])tokens);
    verifyZeroInteractions((Object[])extensions);
  }
  @Test public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {
    Subject subject=new Subject();
    Set<Object> privateCredentials=subject.getPrivateCredentials();
    Set<Object> publicCredentials=subject.getPublicCredentials();
    OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
    SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class)};
    TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
    OAuthBearerLoginModule loginModule1=new OAuthBearerLoginModule();
    loginModule1.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    OAuthBearerLoginModule loginModule2=new OAuthBearerLoginModule();
    loginModule2.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.commit();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule1.logout();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule2.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule2.commit();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[1],privateCredentials.iterator().next());
    assertSame(extensions[1],publicCredentials.iterator().next());
    loginModule2.logout();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    verifyZeroInteractions((Object[])tokens);
    verifyZeroInteractions((Object[])extensions);
  }
  @Test public void loginAbortLoginCommitLogout() throws LoginException {
    Subject subject=new Subject();
    Set<Object> privateCredentials=subject.getPrivateCredentials();
    Set<Object> publicCredentials=subject.getPublicCredentials();
    OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
    SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class)};
    TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
    OAuthBearerLoginModule loginModule=new OAuthBearerLoginModule();
    loginModule.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule.abort();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule.commit();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[1],privateCredentials.iterator().next());
    assertSame(extensions[1],publicCredentials.iterator().next());
    loginModule.logout();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    verifyZeroInteractions((Object[])tokens);
    verifyZeroInteractions((Object[])extensions);
  }
  @Test public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {
    Subject subject=new Subject();
    Set<Object> privateCredentials=subject.getPrivateCredentials();
    Set<Object> publicCredentials=subject.getPublicCredentials();
    OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
    SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class),mock(SaslExtensions.class)};
    TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
    OAuthBearerLoginModule loginModule1=new OAuthBearerLoginModule();
    loginModule1.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    OAuthBearerLoginModule loginModule2=new OAuthBearerLoginModule();
    loginModule2.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    OAuthBearerLoginModule loginModule3=new OAuthBearerLoginModule();
    loginModule3.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.login();
    assertEquals(0,privateCredentials.size());
    assertEquals(0,publicCredentials.size());
    loginModule1.commit();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.login();
    assertEquals(1,privateCredentials.size());
    assertEquals(1,publicCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.abort();
    assertEquals(1,privateCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertEquals(1,publicCredentials.size());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.login();
    assertEquals(1,privateCredentials.size());
    assertSame(tokens[0],privateCredentials.iterator().next());
    assertEquals(1,publicCredentials.size());
    assertSame(extensions[0],publicCredentials.iterator().next());
    loginModule2.commit();
    assertEquals(2,privateCredentials.size());
    Iterator<Object> iterator=privateCredentials.iterator();
    assertNotSame(tokens[1],iterator.next());
    assertNotSame(tokens[1],iterator.next());
    assertEquals(2,publicCredentials.size());
    Iterator<Object> publicIterator=publicCredentials.iterator();
    assertNotSame(extensions[1],publicIterator.next());
    assertNotSame(extensions[1],publicIterator.next());
    loginModule1.logout();
    assertEquals(1,privateCredentials.size());
    assertSame(tokens[2],privateCredentials.iterator().next());
    assertEquals(1,publicCredentials.size());
    assertSame(extensions[2],publicCredentials.iterator().next());
    verifyZeroInteractions((Object[])tokens);
    verifyZeroInteractions((Object[])extensions);
  }
  /** 
 * 2.1.0 added customizable SASL extensions and a new callback type. Ensure that old, custom-written callbackHandlers that do not handle the callback work
 */
  @Test public void commitDoesNotThrowOnUnsupportedExtensionsCallback() throws LoginException {
    Subject subject=new Subject();
    OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
    TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,new SaslExtensions[]{RAISE_UNSUPPORTED_CB_EXCEPTION_FLAG});
    OAuthBearerLoginModule loginModule1=new OAuthBearerLoginModule();
    loginModule1.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
    loginModule1.login();
    loginModule1.commit();
    SaslExtensions extensions=subject.getPublicCredentials(SaslExtensions.class).iterator().next();
    assertNotNull(extensions);
    assertTrue(extensions.map().isEmpty());
    verifyZeroInteractions((Object[])tokens);
  }
}
