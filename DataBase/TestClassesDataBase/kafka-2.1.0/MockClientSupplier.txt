public class MockClientSupplier implements KafkaClientSupplier {
  private static final ByteArraySerializer BYTE_ARRAY_SERIALIZER=new ByteArraySerializer();
  private Cluster cluster;
  private String applicationId;
  public final List<MockProducer> producers=new LinkedList<>();
  public final MockConsumer<byte[],byte[]> consumer=new MockConsumer<>(OffsetResetStrategy.EARLIEST);
  public final MockConsumer<byte[],byte[]> restoreConsumer=new MockConsumer<>(OffsetResetStrategy.LATEST);
  public void setApplicationIdForProducer(  final String applicationId){
    this.applicationId=applicationId;
  }
  public void setClusterForAdminClient(  final Cluster cluster){
    this.cluster=cluster;
  }
  @Override public AdminClient getAdminClient(  final Map<String,Object> config){
    return new MockAdminClient(cluster.nodes(),cluster.nodeById(0));
  }
  @Override public Producer<byte[],byte[]> getProducer(  final Map<String,Object> config){
    if (applicationId != null) {
      assertThat((String)config.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG),startsWith(applicationId + "-"));
    }
 else {
      assertFalse(config.containsKey(ProducerConfig.TRANSACTIONAL_ID_CONFIG));
    }
    final MockProducer<byte[],byte[]> producer=new MockProducer<>(true,BYTE_ARRAY_SERIALIZER,BYTE_ARRAY_SERIALIZER);
    producers.add(producer);
    return producer;
  }
  @Override public Consumer<byte[],byte[]> getConsumer(  final Map<String,Object> config){
    return consumer;
  }
  @Override public Consumer<byte[],byte[]> getRestoreConsumer(  final Map<String,Object> config){
    return restoreConsumer;
  }
  @Override public Consumer<byte[],byte[]> getGlobalConsumer(  final Map<String,Object> config){
    return restoreConsumer;
  }
}
