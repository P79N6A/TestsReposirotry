public class JsonSerializationTest {
  @Test public void testDeserializationDoesNotProduceNulls() throws Exception {
    verify(new FilesUnreadableFaultSpec(0,0,null,null,null,0));
    verify(new Kibosh.KiboshControlFile(null));
    verify(new NetworkPartitionFaultSpec(0,0,null));
    verify(new ProcessStopFaultSpec(0,0,null,null));
    verify(new AgentStatusResponse(0,null));
    verify(new TasksResponse(null));
    verify(new WorkerDone(null,null,0,0,null,null));
    verify(new WorkerRunning(null,null,0,null));
    verify(new WorkerStopping(null,null,0,null));
    verify(new ProduceBenchSpec(0,0,null,null,0,0,null,null,null,null,null,null,null));
    verify(new RoundTripWorkloadSpec(0,0,null,null,null,null,null,null,0,null,null,0));
    verify(new TopicsSpec());
    verify(new PartitionsSpec(0,(short)0,null));
    Map<Integer,List<Integer>> partitionAssignments=new HashMap<Integer,List<Integer>>();
    partitionAssignments.put(0,Arrays.asList(1,2,3));
    partitionAssignments.put(1,Arrays.asList(1,2,3));
    verify(new PartitionsSpec(0,(short)0,partitionAssignments));
    verify(new PartitionsSpec(0,(short)0,null));
  }
  private <T>void verify(  T val1) throws Exception {
    byte[] bytes=JsonUtil.JSON_SERDE.writeValueAsBytes(val1);
    Class<T> clazz=(Class<T>)val1.getClass();
    T val2=JsonUtil.JSON_SERDE.readValue(bytes,clazz);
    for (    Field field : clazz.getDeclaredFields()) {
      boolean wasAccessible=field.isAccessible();
      field.setAccessible(true);
      assertNotNull("Field " + field + " was null.",field.get(val2));
      field.setAccessible(wasAccessible);
    }
  }
}
