public class ConfigTest {
  private static final ConfigEntry E1=new ConfigEntry("a","b");
  private static final ConfigEntry E2=new ConfigEntry("c","d");
  private Config config;
  @Before public void setUp(){
    final Collection<ConfigEntry> entries=new ArrayList<>();
    entries.add(E1);
    entries.add(E2);
    config=new Config(entries);
  }
  @Test public void shouldGetEntry(){
    assertThat(config.get("a"),is(E1));
    assertThat(config.get("c"),is(E2));
  }
  @Test public void shouldReturnNullOnGetUnknownEntry(){
    assertThat(config.get("unknown"),is(nullValue()));
  }
  @Test public void shouldGetAllEntries(){
    assertThat(config.entries().size(),is(2));
    assertThat(config.entries(),hasItems(E1,E2));
  }
  @Test public void shouldImplementEqualsProperly(){
    final Collection<ConfigEntry> entries=new ArrayList<>();
    entries.add(E1);
    assertThat(config,is(equalTo(config)));
    assertThat(config,is(equalTo(new Config(config.entries()))));
    assertThat(config,is(not(equalTo(new Config(entries)))));
    assertThat(config,is(not(equalTo((Object)"this"))));
  }
  @Test public void shouldImplementHashCodeProperly(){
    final Collection<ConfigEntry> entries=new ArrayList<>();
    entries.add(E1);
    assertThat(config.hashCode(),is(config.hashCode()));
    assertThat(config.hashCode(),is(new Config(config.entries()).hashCode()));
    assertThat(config.hashCode(),is(not(new Config(entries).hashCode())));
  }
  @Test public void shouldImplementToStringProperly(){
    assertThat(config.toString(),containsString(E1.toString()));
    assertThat(config.toString(),containsString(E2.toString()));
  }
}
