public class SaslChannelBuilderTest {
  @Test public void testCloseBeforeConfigureIsIdempotent(){
    SaslChannelBuilder builder=createChannelBuilder(SecurityProtocol.SASL_PLAINTEXT);
    builder.close();
    assertTrue(builder.loginManagers().isEmpty());
    builder.close();
    assertTrue(builder.loginManagers().isEmpty());
  }
  @Test public void testCloseAfterConfigIsIdempotent(){
    SaslChannelBuilder builder=createChannelBuilder(SecurityProtocol.SASL_PLAINTEXT);
    builder.configure(new HashMap<String,Object>());
    assertNotNull(builder.loginManagers().get("PLAIN"));
    builder.close();
    assertTrue(builder.loginManagers().isEmpty());
    builder.close();
    assertTrue(builder.loginManagers().isEmpty());
  }
  @Test public void testLoginManagerReleasedIfConfigureThrowsException(){
    SaslChannelBuilder builder=createChannelBuilder(SecurityProtocol.SASL_SSL);
    try {
      builder.configure(Collections.singletonMap(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,"1"));
      fail("Exception should have been thrown");
    }
 catch (    KafkaException e) {
      assertTrue(builder.loginManagers().isEmpty());
    }
    builder.close();
    assertTrue(builder.loginManagers().isEmpty());
  }
  private SaslChannelBuilder createChannelBuilder(  SecurityProtocol securityProtocol){
    TestJaasConfig jaasConfig=new TestJaasConfig();
    jaasConfig.addEntry("jaasContext",PlainLoginModule.class.getName(),new HashMap<String,Object>());
    JaasContext jaasContext=new JaasContext("jaasContext",JaasContext.Type.SERVER,jaasConfig,null);
    Map<String,JaasContext> jaasContexts=Collections.singletonMap("PLAIN",jaasContext);
    return new SaslChannelBuilder(Mode.CLIENT,jaasContexts,securityProtocol,new ListenerName("PLAIN"),false,"PLAIN",true,null,null);
  }
}
