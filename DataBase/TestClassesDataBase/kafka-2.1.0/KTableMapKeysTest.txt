public class KTableMapKeysTest {
  private final ConsumerRecordFactory<Integer,String> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new StringSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  @Test public void testMapKeysConvertingToStream(){
    final StreamsBuilder builder=new StreamsBuilder();
    final String topic1="topic_map_keys";
    final KTable<Integer,String> table1=builder.table(topic1,Consumed.with(Serdes.Integer(),Serdes.String()));
    final Map<Integer,String> keyMap=new HashMap<>();
    keyMap.put(1,"ONE");
    keyMap.put(2,"TWO");
    keyMap.put(3,"THREE");
    final KeyValueMapper<Integer,String,String> keyMapper=new KeyValueMapper<Integer,String,String>(){
      @Override public String apply(      final Integer key,      final String value){
        return keyMap.get(key);
      }
    }
;
    final KStream<String,String> convertedStream=table1.toStream(keyMapper);
    final String[] expected=new String[]{"ONE:V_ONE","TWO:V_TWO","THREE:V_THREE"};
    final int[] originalKeys=new int[]{1,2,3};
    final String[] values=new String[]{"V_ONE","V_TWO","V_THREE"};
    final MockProcessorSupplier<String,String> supplier=new MockProcessorSupplier<>();
    convertedStream.process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (int i=0; i < originalKeys.length; i++) {
        driver.pipeInput(recordFactory.create(topic1,originalKeys[i],values[i]));
      }
    }
     assertEquals(3,supplier.theCapturedProcessor().processed.size());
    for (int i=0; i < expected.length; i++) {
      assertEquals(expected[i],supplier.theCapturedProcessor().processed.get(i));
    }
  }
}
