public class HeartbeatTest {
  private int sessionTimeoutMs=300;
  private int heartbeatIntervalMs=100;
  private int maxPollIntervalMs=900;
  private long retryBackoffMs=10L;
  private MockTime time=new MockTime();
  private Heartbeat heartbeat=new Heartbeat(time,sessionTimeoutMs,heartbeatIntervalMs,maxPollIntervalMs,retryBackoffMs);
  @Test public void testShouldHeartbeat(){
    heartbeat.sentHeartbeat(time.milliseconds());
    time.sleep((long)((float)heartbeatIntervalMs * 1.1));
    assertTrue(heartbeat.shouldHeartbeat(time.milliseconds()));
  }
  @Test public void testShouldNotHeartbeat(){
    heartbeat.sentHeartbeat(time.milliseconds());
    time.sleep(heartbeatIntervalMs / 2);
    assertFalse(heartbeat.shouldHeartbeat(time.milliseconds()));
  }
  @Test public void testTimeToNextHeartbeat(){
    heartbeat.sentHeartbeat(time.milliseconds());
    assertEquals(heartbeatIntervalMs,heartbeat.timeToNextHeartbeat(time.milliseconds()));
    time.sleep(heartbeatIntervalMs);
    assertEquals(0,heartbeat.timeToNextHeartbeat(time.milliseconds()));
    time.sleep(heartbeatIntervalMs);
    assertEquals(0,heartbeat.timeToNextHeartbeat(time.milliseconds()));
  }
  @Test public void testSessionTimeoutExpired(){
    heartbeat.sentHeartbeat(time.milliseconds());
    time.sleep(sessionTimeoutMs + 5);
    assertTrue(heartbeat.sessionTimeoutExpired(time.milliseconds()));
  }
  @Test public void testResetSession(){
    heartbeat.sentHeartbeat(time.milliseconds());
    time.sleep(sessionTimeoutMs + 5);
    heartbeat.resetSessionTimeout();
    assertFalse(heartbeat.sessionTimeoutExpired(time.milliseconds()));
    time.sleep(maxPollIntervalMs + 1);
    heartbeat.resetSessionTimeout();
    assertTrue(heartbeat.pollTimeoutExpired(time.milliseconds()));
  }
  @Test public void testResetTimeouts(){
    time.sleep(maxPollIntervalMs);
    assertTrue(heartbeat.sessionTimeoutExpired(time.milliseconds()));
    assertEquals(0,heartbeat.timeToNextHeartbeat(time.milliseconds()));
    assertTrue(heartbeat.pollTimeoutExpired(time.milliseconds()));
    heartbeat.resetTimeouts();
    assertFalse(heartbeat.sessionTimeoutExpired(time.milliseconds()));
    assertEquals(heartbeatIntervalMs,heartbeat.timeToNextHeartbeat(time.milliseconds()));
    assertFalse(heartbeat.pollTimeoutExpired(time.milliseconds()));
  }
  @Test public void testPollTimeout(){
    assertFalse(heartbeat.pollTimeoutExpired(time.milliseconds()));
    time.sleep(maxPollIntervalMs / 2);
    assertFalse(heartbeat.pollTimeoutExpired(time.milliseconds()));
    time.sleep(maxPollIntervalMs / 2 + 1);
    assertTrue(heartbeat.pollTimeoutExpired(time.milliseconds()));
  }
}
