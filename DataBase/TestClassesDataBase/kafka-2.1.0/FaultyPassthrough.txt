static class FaultyPassthrough<R extends ConnectRecord<R>> implements Transformation<R> {
  private static final Logger log=LoggerFactory.getLogger(FaultyPassthrough.class);
  private static final String MOD_CONFIG="mod";
  private static final int MOD_CONFIG_DEFAULT=3;
  public static final ConfigDef CONFIG_DEF=new ConfigDef().define(MOD_CONFIG,ConfigDef.Type.INT,MOD_CONFIG_DEFAULT,ConfigDef.Importance.MEDIUM,"Pass records without failure only if timestamp % mod == 0");
  private int mod=MOD_CONFIG_DEFAULT;
  private int invocations=0;
  @Override public R apply(  R record){
    invocations++;
    if (invocations % mod == 0) {
      log.debug("Succeeding record: {} where invocations={}",record,invocations);
      return record;
    }
 else {
      log.debug("Failing record: {} at invocations={}",record,invocations);
      throw new RetriableException("Bad invocations " + invocations + " for mod "+ mod);
    }
  }
  @Override public ConfigDef config(){
    return CONFIG_DEF;
  }
  @Override public void close(){
    log.info("Shutting down transform");
  }
  @Override public void configure(  Map<String,?> configs){
    final SimpleConfig config=new SimpleConfig(CONFIG_DEF,configs);
    mod=Math.max(config.getInt(MOD_CONFIG),2);
    log.info("Configuring {}. Setting mod to {}",this.getClass(),mod);
  }
}
