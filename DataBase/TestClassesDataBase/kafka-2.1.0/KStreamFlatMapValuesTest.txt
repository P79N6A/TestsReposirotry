public class KStreamFlatMapValuesTest {
  private String topicName="topic";
  private final ConsumerRecordFactory<Integer,Integer> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new IntegerSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  @Test public void testFlatMapValues(){
    final StreamsBuilder builder=new StreamsBuilder();
    final ValueMapper<Number,Iterable<String>> mapper=new ValueMapper<Number,Iterable<String>>(){
      @Override public Iterable<String> apply(      final Number value){
        final ArrayList<String> result=new ArrayList<String>();
        result.add("v" + value);
        result.add("V" + value);
        return result;
      }
    }
;
    final int[] expectedKeys={0,1,2,3};
    final KStream<Integer,Integer> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.Integer()));
    final MockProcessorSupplier<Integer,String> supplier=new MockProcessorSupplier<>();
    stream.flatMapValues(mapper).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey,0L));
      }
    }
     final String[] expected={"0:v0","0:V0","1:v1","1:V1","2:v2","2:V2","3:v3","3:V3"};
    assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray());
  }
  @Test public void testFlatMapValuesWithKeys(){
    final StreamsBuilder builder=new StreamsBuilder();
    final ValueMapperWithKey<Integer,Number,Iterable<String>> mapper=new ValueMapperWithKey<Integer,Number,Iterable<String>>(){
      @Override public Iterable<String> apply(      final Integer readOnlyKey,      final Number value){
        final ArrayList<String> result=new ArrayList<>();
        result.add("v" + value);
        result.add("k" + readOnlyKey);
        return result;
      }
    }
;
    final int[] expectedKeys={0,1,2,3};
    final KStream<Integer,Integer> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.Integer()));
    final MockProcessorSupplier<Integer,String> supplier=new MockProcessorSupplier<>();
    stream.flatMapValues(mapper).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey,0L));
      }
    }
     final String[] expected={"0:v0","0:k0","1:v1","1:k1","2:v2","2:k2","3:v3","3:k3"};
    assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray());
  }
}
