public class KafkaLog4jAppenderTest {
  private Logger logger=Logger.getLogger(KafkaLog4jAppenderTest.class);
  @Before public void setup(){
    LogLog.setInternalDebugging(true);
  }
  @Test public void testKafkaLog4jConfigs(){
    Properties props=new Properties();
    props.put("log4j.rootLogger","INFO");
    props.put("log4j.appender.KAFKA","org.apache.kafka.log4jappender.KafkaLog4jAppender");
    props.put("log4j.appender.KAFKA.layout","org.apache.log4j.PatternLayout");
    props.put("log4j.appender.KAFKA.layout.ConversionPattern","%-5p: %c - %m%n");
    props.put("log4j.appender.KAFKA.Topic","test-topic");
    props.put("log4j.logger.kafka.log4j","INFO, KAFKA");
    try {
      PropertyConfigurator.configure(props);
      Assert.fail("Missing properties exception was expected !");
    }
 catch (    ConfigException ex) {
    }
    props=new Properties();
    props.put("log4j.rootLogger","INFO");
    props.put("log4j.appender.KAFKA","org.apache.kafka.log4jappender.KafkaLog4jAppender");
    props.put("log4j.appender.KAFKA.layout","org.apache.log4j.PatternLayout");
    props.put("log4j.appender.KAFKA.layout.ConversionPattern","%-5p: %c - %m%n");
    props.put("log4j.appender.KAFKA.brokerList","127.0.0.1:9093");
    props.put("log4j.logger.kafka.log4j","INFO, KAFKA");
    try {
      PropertyConfigurator.configure(props);
      Assert.fail("Missing properties exception was expected !");
    }
 catch (    ConfigException ex) {
    }
  }
  @Test public void testLog4jAppends(){
    PropertyConfigurator.configure(getLog4jConfig(false));
    for (int i=1; i <= 5; ++i) {
      logger.error(getMessage(i));
    }
    Assert.assertEquals(5,(getMockKafkaLog4jAppender()).getHistory().size());
  }
  @Test(expected=RuntimeException.class) public void testLog4jAppendsWithSyncSendAndSimulateProducerFailShouldThrowException(){
    Properties props=getLog4jConfig(true);
    props.put("log4j.appender.KAFKA.IgnoreExceptions","false");
    PropertyConfigurator.configure(props);
    MockKafkaLog4jAppender mockKafkaLog4jAppender=getMockKafkaLog4jAppender();
    replaceProducerWithMocked(mockKafkaLog4jAppender,false);
    logger.error(getMessage(0));
  }
  @Test public void testLog4jAppendsWithSyncSendWithoutIgnoringExceptionsShouldNotThrowException(){
    Properties props=getLog4jConfig(true);
    props.put("log4j.appender.KAFKA.IgnoreExceptions","false");
    PropertyConfigurator.configure(props);
    MockKafkaLog4jAppender mockKafkaLog4jAppender=getMockKafkaLog4jAppender();
    replaceProducerWithMocked(mockKafkaLog4jAppender,true);
    logger.error(getMessage(0));
  }
  @Test public void testLog4jAppendsWithRealProducerConfigWithSyncSendShouldNotThrowException(){
    Properties props=getLog4jConfigWithRealProducer(true);
    PropertyConfigurator.configure(props);
    logger.error(getMessage(0));
  }
  @Test(expected=RuntimeException.class) public void testLog4jAppendsWithRealProducerConfigWithSyncSendAndNotIgnoringExceptionsShouldThrowException(){
    Properties props=getLog4jConfigWithRealProducer(false);
    PropertyConfigurator.configure(props);
    logger.error(getMessage(0));
  }
  private void replaceProducerWithMocked(  MockKafkaLog4jAppender mockKafkaLog4jAppender,  boolean success){
    @SuppressWarnings("unchecked") MockProducer<byte[],byte[]> producer=EasyMock.niceMock(MockProducer.class);
    @SuppressWarnings("unchecked") Future<RecordMetadata> futureMock=EasyMock.niceMock(Future.class);
    try {
      if (!success)       EasyMock.expect(futureMock.get()).andThrow(new ExecutionException("simulated timeout",new TimeoutException()));
    }
 catch (    InterruptedException|ExecutionException e) {
    }
    EasyMock.expect(producer.send(EasyMock.anyObject())).andReturn(futureMock);
    EasyMock.replay(producer,futureMock);
    mockKafkaLog4jAppender.setKafkaProducer(producer);
    mockKafkaLog4jAppender.activateOptions();
  }
  private MockKafkaLog4jAppender getMockKafkaLog4jAppender(){
    return (MockKafkaLog4jAppender)Logger.getRootLogger().getAppender("KAFKA");
  }
  private byte[] getMessage(  int i){
    return ("test_" + i).getBytes(StandardCharsets.UTF_8);
  }
  private Properties getLog4jConfigWithRealProducer(  boolean ignoreExceptions){
    Properties props=new Properties();
    props.put("log4j.rootLogger","INFO, KAFKA");
    props.put("log4j.appender.KAFKA","org.apache.kafka.log4jappender.KafkaLog4jAppender");
    props.put("log4j.appender.KAFKA.layout","org.apache.log4j.PatternLayout");
    props.put("log4j.appender.KAFKA.layout.ConversionPattern","%-5p: %c - %m%n");
    props.put("log4j.appender.KAFKA.BrokerList","127.0.0.2:9093");
    props.put("log4j.appender.KAFKA.Topic","test-topic");
    props.put("log4j.appender.KAFKA.RequiredNumAcks","1");
    props.put("log4j.appender.KAFKA.SyncSend","true");
    props.put("log4j.appender.KAFKA.maxBlockMs","10");
    props.put("log4j.appender.KAFKA.IgnoreExceptions",Boolean.toString(ignoreExceptions));
    props.put("log4j.logger.kafka.log4j","INFO, KAFKA");
    return props;
  }
  private Properties getLog4jConfig(  boolean syncSend){
    Properties props=new Properties();
    props.put("log4j.rootLogger","INFO, KAFKA");
    props.put("log4j.appender.KAFKA","org.apache.kafka.log4jappender.MockKafkaLog4jAppender");
    props.put("log4j.appender.KAFKA.layout","org.apache.log4j.PatternLayout");
    props.put("log4j.appender.KAFKA.layout.ConversionPattern","%-5p: %c - %m%n");
    props.put("log4j.appender.KAFKA.BrokerList","127.0.0.1:9093");
    props.put("log4j.appender.KAFKA.Topic","test-topic");
    props.put("log4j.appender.KAFKA.RequiredNumAcks","1");
    props.put("log4j.appender.KAFKA.SyncSend",Boolean.toString(syncSend));
    props.put("log4j.logger.kafka.log4j","INFO, KAFKA");
    return props;
  }
}
