public class QueryableStoreProviderTest {
  private final String keyValueStore="key-value";
  private final String windowStore="window-store";
  private QueryableStoreProvider storeProvider;
  private HashMap<String,StateStore> globalStateStores;
  @Before public void before(){
    final StateStoreProviderStub theStoreProvider=new StateStoreProviderStub(false);
    theStoreProvider.addStore(keyValueStore,new NoOpReadOnlyStore<>());
    theStoreProvider.addStore(windowStore,new NoOpWindowStore());
    globalStateStores=new HashMap<>();
    storeProvider=new QueryableStoreProvider(Collections.<StateStoreProvider>singletonList(theStoreProvider),new GlobalStateStoreProvider(globalStateStores));
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowExceptionIfKVStoreDoesntExist(){
    storeProvider.getStore("not-a-store",QueryableStoreTypes.keyValueStore());
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowExceptionIfWindowStoreDoesntExist(){
    storeProvider.getStore("not-a-store",QueryableStoreTypes.windowStore());
  }
  @Test public void shouldReturnKVStoreWhenItExists(){
    assertNotNull(storeProvider.getStore(keyValueStore,QueryableStoreTypes.keyValueStore()));
  }
  @Test public void shouldReturnWindowStoreWhenItExists(){
    assertNotNull(storeProvider.getStore(windowStore,QueryableStoreTypes.windowStore()));
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowExceptionWhenLookingForWindowStoreWithDifferentType(){
    storeProvider.getStore(windowStore,QueryableStoreTypes.keyValueStore());
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowExceptionWhenLookingForKVStoreWithDifferentType(){
    storeProvider.getStore(keyValueStore,QueryableStoreTypes.windowStore());
  }
  @Test public void shouldFindGlobalStores(){
    globalStateStores.put("global",new NoOpReadOnlyStore<>());
    assertNotNull(storeProvider.getStore("global",QueryableStoreTypes.keyValueStore()));
  }
}
