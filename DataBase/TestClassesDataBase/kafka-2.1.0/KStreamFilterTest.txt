public class KStreamFilterTest {
  private final String topicName="topic";
  private final ConsumerRecordFactory<Integer,String> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new StringSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  private final Predicate<Integer,String> isMultipleOfThree=new Predicate<Integer,String>(){
    @Override public boolean test(    final Integer key,    final String value){
      return (key % 3) == 0;
    }
  }
;
  @Test public void testFilter(){
    final StreamsBuilder builder=new StreamsBuilder();
    final int[] expectedKeys=new int[]{1,2,3,4,5,6,7};
    final KStream<Integer,String> stream;
    final MockProcessorSupplier<Integer,String> supplier;
    supplier=new MockProcessorSupplier<>();
    stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    stream.filter(isMultipleOfThree).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,"V" + expectedKey));
      }
    }
     assertEquals(2,supplier.theCapturedProcessor().processed.size());
  }
  @Test public void testFilterNot(){
    final StreamsBuilder builder=new StreamsBuilder();
    final int[] expectedKeys=new int[]{1,2,3,4,5,6,7};
    final KStream<Integer,String> stream;
    final MockProcessorSupplier<Integer,String> supplier;
    supplier=new MockProcessorSupplier<>();
    stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    stream.filterNot(isMultipleOfThree).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,"V" + expectedKey));
      }
    }
     assertEquals(5,supplier.theCapturedProcessor().processed.size());
  }
  @Test public void testTypeVariance(){
    final Predicate<Number,Object> numberKeyPredicate=new Predicate<Number,Object>(){
      @Override public boolean test(      final Number key,      final Object value){
        return false;
      }
    }
;
    new StreamsBuilder().<Integer,String>stream("empty").filter(numberKeyPredicate).filterNot(numberKeyPredicate).to("nirvana");
  }
}
