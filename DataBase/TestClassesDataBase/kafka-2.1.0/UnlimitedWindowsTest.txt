public class UnlimitedWindowsTest {
  private static long anyStartTime=10L;
  @Test public void shouldSetWindowStartTime(){
    assertEquals(anyStartTime,UnlimitedWindows.of().startOn(ofEpochMilli(anyStartTime)).startMs);
  }
  @Test(expected=IllegalArgumentException.class) public void startTimeMustNotBeNegative(){
    UnlimitedWindows.of().startOn(ofEpochMilli(-1));
  }
  @Test public void shouldThrowOnUntil(){
    final UnlimitedWindows windowSpec=UnlimitedWindows.of();
    try {
      windowSpec.until(42);
      fail("should not allow to set window retention time");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void shouldIncludeRecordsThatHappenedOnWindowStart(){
    final UnlimitedWindows w=UnlimitedWindows.of().startOn(ofEpochMilli(anyStartTime));
    final Map<Long,UnlimitedWindow> matchedWindows=w.windowsFor(w.startMs);
    assertEquals(1,matchedWindows.size());
    assertEquals(new UnlimitedWindow(anyStartTime),matchedWindows.get(anyStartTime));
  }
  @Test public void shouldIncludeRecordsThatHappenedAfterWindowStart(){
    final UnlimitedWindows w=UnlimitedWindows.of().startOn(ofEpochMilli(anyStartTime));
    final long timestamp=w.startMs + 1;
    final Map<Long,UnlimitedWindow> matchedWindows=w.windowsFor(timestamp);
    assertEquals(1,matchedWindows.size());
    assertEquals(new UnlimitedWindow(anyStartTime),matchedWindows.get(anyStartTime));
  }
  @Test public void shouldExcludeRecordsThatHappenedBeforeWindowStart(){
    final UnlimitedWindows w=UnlimitedWindows.of().startOn(ofEpochMilli(anyStartTime));
    final long timestamp=w.startMs - 1;
    final Map<Long,UnlimitedWindow> matchedWindows=w.windowsFor(timestamp);
    assertTrue(matchedWindows.isEmpty());
  }
  @Test public void equalsAndHashcodeShouldBeValidForPositiveCases(){
    verifyEquality(UnlimitedWindows.of(),UnlimitedWindows.of());
    verifyEquality(UnlimitedWindows.of().startOn(ofEpochMilli(1)),UnlimitedWindows.of().startOn(ofEpochMilli(1)));
  }
  @Test public void equalsAndHashcodeShouldBeValidForNegativeCases(){
    verifyInEquality(UnlimitedWindows.of().startOn(ofEpochMilli(9)),UnlimitedWindows.of().startOn(ofEpochMilli(1)));
  }
}
