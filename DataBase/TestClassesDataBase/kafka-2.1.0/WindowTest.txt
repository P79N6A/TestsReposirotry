public class WindowTest {
static class TestWindow extends Window {
    TestWindow(    final long startMs,    final long endMs){
      super(startMs,endMs);
    }
    @Override public boolean overlap(    final Window other){
      return false;
    }
  }
static class TestWindow2 extends Window {
    TestWindow2(    final long startMs,    final long endMs){
      super(startMs,endMs);
    }
    @Override public boolean overlap(    final Window other){
      return false;
    }
  }
  private final TestWindow window=new TestWindow(5,10);
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfStartIsNegative(){
    new TestWindow(-1,0);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowIfEndIsSmallerThanStart(){
    new TestWindow(1,0);
  }
  @Test public void shouldBeEqualIfStartAndEndSame(){
    final TestWindow window2=new TestWindow(window.startMs,window.endMs);
    assertEquals(window,window);
    assertEquals(window,window2);
    assertEquals(window2,window);
  }
  @Test public void shouldNotBeEqualIfNull(){
    assertNotEquals(window,null);
  }
  @Test public void shouldNotBeEqualIfStartOrEndIsDifferent(){
    assertNotEquals(window,new TestWindow(0,window.endMs));
    assertNotEquals(window,new TestWindow(7,window.endMs));
    assertNotEquals(window,new TestWindow(window.startMs,7));
    assertNotEquals(window,new TestWindow(window.startMs,15));
    assertNotEquals(window,new TestWindow(7,8));
    assertNotEquals(window,new TestWindow(0,15));
  }
  @Test public void shouldNotBeEqualIfDifferentWindowType(){
    assertNotEquals(window,new TestWindow2(window.startMs,window.endMs));
  }
}
