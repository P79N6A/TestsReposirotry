public class ClientAuthenticationFailureTest {
  private static MockTime time=new MockTime(50);
  private NioEchoServer server;
  private Map<String,Object> saslServerConfigs;
  private Map<String,Object> saslClientConfigs;
  private final String topic="test";
  private TestJaasConfig testJaasConfig;
  @Before public void setup() throws Exception {
    LoginManager.closeAll();
    SecurityProtocol securityProtocol=SecurityProtocol.SASL_PLAINTEXT;
    saslServerConfigs=new HashMap<>();
    saslServerConfigs.put(BrokerSecurityConfigs.SASL_ENABLED_MECHANISMS_CONFIG,Arrays.asList("PLAIN"));
    saslClientConfigs=new HashMap<>();
    saslClientConfigs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,"SASL_PLAINTEXT");
    saslClientConfigs.put(SaslConfigs.SASL_MECHANISM,"PLAIN");
    testJaasConfig=TestJaasConfig.createConfiguration("PLAIN",Arrays.asList("PLAIN"));
    testJaasConfig.setClientOptions("PLAIN",TestJaasConfig.USERNAME,"anotherpassword");
    server=createEchoServer(securityProtocol);
  }
  @After public void teardown() throws Exception {
    if (server != null)     server.close();
  }
  @Test public void testConsumerWithInvalidCredentials(){
    Map<String,Object> props=new HashMap<>(saslClientConfigs);
    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:" + server.port());
    StringDeserializer deserializer=new StringDeserializer();
    try (KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props,deserializer,deserializer)){
      consumer.subscribe(Arrays.asList(topic));
      consumer.poll(Duration.ofSeconds(10));
      fail("Expected an authentication error!");
    }
 catch (    SaslAuthenticationException e) {
    }
catch (    Exception e) {
      throw new AssertionError("Expected only an authentication error, but another error occurred.",e);
    }
  }
  @Test public void testProducerWithInvalidCredentials(){
    Map<String,Object> props=new HashMap<>(saslClientConfigs);
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:" + server.port());
    StringSerializer serializer=new StringSerializer();
    try (KafkaProducer<String,String> producer=new KafkaProducer<>(props,serializer,serializer)){
      ProducerRecord<String,String> record=new ProducerRecord<>(topic,"message");
      producer.send(record).get();
      fail("Expected an authentication error!");
    }
 catch (    Exception e) {
      assertTrue("Expected SaslAuthenticationException, got " + e.getCause().getClass(),e.getCause() instanceof SaslAuthenticationException);
    }
  }
  @Test public void testAdminClientWithInvalidCredentials(){
    Map<String,Object> props=new HashMap<>(saslClientConfigs);
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:" + server.port());
    try (AdminClient client=AdminClient.create(props)){
      DescribeTopicsResult result=client.describeTopics(Collections.singleton("test"));
      result.all().get();
      fail("Expected an authentication error!");
    }
 catch (    Exception e) {
      assertTrue("Expected SaslAuthenticationException, got " + e.getCause().getClass(),e.getCause() instanceof SaslAuthenticationException);
    }
  }
  @Test public void testTransactionalProducerWithInvalidCredentials(){
    Map<String,Object> props=new HashMap<>(saslClientConfigs);
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:" + server.port());
    props.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG,"txclient-1");
    props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,"true");
    StringSerializer serializer=new StringSerializer();
    try (KafkaProducer<String,String> producer=new KafkaProducer<>(props,serializer,serializer)){
      producer.initTransactions();
      fail("Expected an authentication error!");
    }
 catch (    SaslAuthenticationException e) {
    }
  }
  private NioEchoServer createEchoServer(  SecurityProtocol securityProtocol) throws Exception {
    return createEchoServer(ListenerName.forSecurityProtocol(securityProtocol),securityProtocol);
  }
  private NioEchoServer createEchoServer(  ListenerName listenerName,  SecurityProtocol securityProtocol) throws Exception {
    return NetworkTestUtils.createEchoServer(listenerName,securityProtocol,new TestSecurityConfig(saslServerConfigs),new CredentialCache(),time);
  }
}
