public class AdminMetadataManagerTest {
  private final MockTime time=new MockTime();
  private final LogContext logContext=new LogContext();
  private final long refreshBackoffMs=100;
  private final long metadataExpireMs=60000;
  private final AdminMetadataManager mgr=new AdminMetadataManager(logContext,refreshBackoffMs,metadataExpireMs);
  @Test public void testMetadataReady(){
    assertFalse(mgr.isReady());
    assertEquals(0,mgr.metadataFetchDelayMs(time.milliseconds()));
    mgr.update(Cluster.bootstrap(Collections.singletonList(new InetSocketAddress("localhost",9999))),time.milliseconds());
    assertFalse(mgr.isReady());
    assertEquals(0,mgr.metadataFetchDelayMs(time.milliseconds()));
    mgr.update(mockCluster(),time.milliseconds());
    assertTrue(mgr.isReady());
    assertEquals(metadataExpireMs,mgr.metadataFetchDelayMs(time.milliseconds()));
    time.sleep(metadataExpireMs);
    assertEquals(0,mgr.metadataFetchDelayMs(time.milliseconds()));
  }
  @Test public void testMetadataRefreshBackoff(){
    mgr.transitionToUpdatePending(time.milliseconds());
    assertEquals(Long.MAX_VALUE,mgr.metadataFetchDelayMs(time.milliseconds()));
    mgr.updateFailed(new RuntimeException());
    assertEquals(refreshBackoffMs,mgr.metadataFetchDelayMs(time.milliseconds()));
    mgr.requestUpdate();
    assertEquals(refreshBackoffMs,mgr.metadataFetchDelayMs(time.milliseconds()));
    time.sleep(refreshBackoffMs);
    assertEquals(0,mgr.metadataFetchDelayMs(time.milliseconds()));
  }
  @Test public void testAuthenticationFailure(){
    mgr.transitionToUpdatePending(time.milliseconds());
    mgr.updateFailed(new AuthenticationException("Authentication failed"));
    assertEquals(refreshBackoffMs,mgr.metadataFetchDelayMs(time.milliseconds()));
    try {
      mgr.isReady();
      fail("Expected AuthenticationException to be thrown");
    }
 catch (    AuthenticationException e) {
    }
    mgr.update(mockCluster(),time.milliseconds());
    assertTrue(mgr.isReady());
  }
  private static Cluster mockCluster(){
    HashMap<Integer,Node> nodes=new HashMap<>();
    nodes.put(0,new Node(0,"localhost",8121));
    nodes.put(1,new Node(1,"localhost",8122));
    nodes.put(2,new Node(2,"localhost",8123));
    return new Cluster("mockClusterId",nodes.values(),Collections.<PartitionInfo>emptySet(),Collections.<String>emptySet(),Collections.<String>emptySet(),nodes.get(0));
  }
}
