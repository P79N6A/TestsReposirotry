public class ErrorsTest {
  @Test public void testUniqueErrorCodes(){
    Set<Short> codeSet=new HashSet<>();
    for (    Errors error : Errors.values()) {
      codeSet.add(error.code());
    }
    assertEquals("Error codes must be unique",codeSet.size(),Errors.values().length);
  }
  @Test public void testUniqueExceptions(){
    Set<Class> exceptionSet=new HashSet<>();
    for (    Errors error : Errors.values()) {
      if (error != Errors.NONE)       exceptionSet.add(error.exception().getClass());
    }
    assertEquals("Exceptions must be unique",exceptionSet.size(),Errors.values().length - 1);
  }
  @Test public void testExceptionsAreNotGeneric(){
    for (    Errors error : Errors.values()) {
      if (error != Errors.NONE)       assertNotEquals("Generic ApiException should not be used",error.exception().getClass(),ApiException.class);
    }
  }
  @Test public void testNoneException(){
    assertNull("The NONE error should not have an exception",Errors.NONE.exception());
  }
  @Test public void testForExceptionInheritance(){
class ExtendedTimeoutException extends TimeoutException {
    }
    Errors expectedError=Errors.forException(new TimeoutException());
    Errors actualError=Errors.forException(new ExtendedTimeoutException());
    assertEquals("forException should match super classes",expectedError,actualError);
  }
  @Test public void testForExceptionDefault(){
    Errors error=Errors.forException(new ApiException());
    assertEquals("forException should default to unknown",Errors.UNKNOWN_SERVER_ERROR,error);
  }
  @Test public void testExceptionName(){
    String exceptionName=Errors.UNKNOWN_SERVER_ERROR.exceptionName();
    assertEquals("org.apache.kafka.common.errors.UnknownServerException",exceptionName);
    exceptionName=Errors.NONE.exceptionName();
    assertNull(exceptionName);
    exceptionName=Errors.INVALID_TOPIC_EXCEPTION.exceptionName();
    assertEquals("org.apache.kafka.common.errors.InvalidTopicException",exceptionName);
  }
}
