/** 
 * This test ensures TopicPartition class is serializable and is serialization compatible. Note: this ensures that the current code can deserialize data serialized with older versions of the code, but not the reverse. That is, older code won't necessarily be able to deserialize data serialized with newer code.
 */
public class TopicPartitionTest {
  private String topicName="mytopic";
  private String fileName="serializedData/topicPartitionSerializedfile";
  private int partNum=5;
  private void checkValues(  TopicPartition deSerTP){
    assertEquals("partition number should be " + partNum + " but got "+ deSerTP.partition(),partNum,deSerTP.partition());
    assertEquals("topic should be " + topicName + " but got "+ deSerTP.topic(),topicName,deSerTP.topic());
  }
  @Test public void testSerializationRoundtrip() throws IOException, ClassNotFoundException {
    TopicPartition origTp=new TopicPartition(topicName,partNum);
    byte[] byteArray=Serializer.serialize(origTp);
    Object deserializedObject=Serializer.deserialize(byteArray);
    assertTrue(deserializedObject instanceof TopicPartition);
    checkValues((TopicPartition)deserializedObject);
  }
  @Test public void testTopiPartitionSerializationCompatibility() throws IOException, ClassNotFoundException {
    Object deserializedObject=Serializer.deserialize(fileName);
    assertTrue(deserializedObject instanceof TopicPartition);
    checkValues((TopicPartition)deserializedObject);
  }
}
