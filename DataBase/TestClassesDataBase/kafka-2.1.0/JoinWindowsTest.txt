public class JoinWindowsTest {
  private static final long ANY_SIZE=123L;
  private static final long ANY_OTHER_SIZE=456L;
  @Test public void validWindows(){
    JoinWindows.of(ofMillis(ANY_OTHER_SIZE)).before(ofMillis(ANY_SIZE)).before(ofMillis(0)).before(ofMillis(-ANY_SIZE)).before(ofMillis(-ANY_OTHER_SIZE));
    JoinWindows.of(ofMillis(ANY_OTHER_SIZE)).after(ofMillis(ANY_SIZE)).after(ofMillis(0)).after(ofMillis(-ANY_SIZE)).after(ofMillis(-ANY_OTHER_SIZE));
  }
  @Test(expected=IllegalArgumentException.class) public void timeDifferenceMustNotBeNegative(){
    JoinWindows.of(ofMillis(-1));
  }
  @Test public void endTimeShouldNotBeBeforeStart(){
    final JoinWindows windowSpec=JoinWindows.of(ofMillis(ANY_SIZE));
    try {
      windowSpec.after(ofMillis(-ANY_SIZE - 1));
      fail("window end time should not be before window start time");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void startTimeShouldNotBeAfterEnd(){
    final JoinWindows windowSpec=JoinWindows.of(ofMillis(ANY_SIZE));
    try {
      windowSpec.before(ofMillis(-ANY_SIZE - 1));
      fail("window start time should not be after window end time");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Deprecated @Test public void untilShouldSetMaintainDuration(){
    final JoinWindows windowSpec=JoinWindows.of(ofMillis(ANY_SIZE));
    final long windowSize=windowSpec.size();
    assertEquals(windowSize,windowSpec.until(windowSize).maintainMs());
  }
  @Deprecated @Test public void retentionTimeMustNoBeSmallerThanWindowSize(){
    final JoinWindows windowSpec=JoinWindows.of(ofMillis(ANY_SIZE));
    final long windowSize=windowSpec.size();
    try {
      windowSpec.until(windowSize - 1);
      fail("should not accept retention time smaller than window size");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void gracePeriodShouldEnforceBoundaries(){
    JoinWindows.of(ofMillis(3L)).grace(ofMillis(0L));
    try {
      JoinWindows.of(ofMillis(3L)).grace(ofMillis(-1L));
      fail("should not accept negatives");
    }
 catch (    final IllegalArgumentException e) {
    }
  }
  @Test public void equalsAndHashcodeShouldBeValidForPositiveCases(){
    verifyEquality(JoinWindows.of(ofMillis(3)),JoinWindows.of(ofMillis(3)));
    verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)),JoinWindows.of(ofMillis(3)).after(ofMillis(2)));
    verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)),JoinWindows.of(ofMillis(3)).before(ofMillis(2)));
    verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)),JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));
    verifyEquality(JoinWindows.of(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).until(60));
    verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
    verifyEquality(JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
  }
  @Test public void equalsAndHashcodeShouldBeValidForNegativeCases(){
    verifyInEquality(JoinWindows.of(ofMillis(9)),JoinWindows.of(ofMillis(3)));
    verifyInEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(9)),JoinWindows.of(ofMillis(3)).after(ofMillis(2)));
    verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)),JoinWindows.of(ofMillis(3)).before(ofMillis(2)));
    verifyInEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(9)),JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));
    verifyInEquality(JoinWindows.of(ofMillis(3)).until(90),JoinWindows.of(ofMillis(3)).until(60));
    verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(9)).after(ofMillis(2)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
    verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(9)).grace(ofMillis(3)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
    verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(9)).until(60),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
    verifyInEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(90),JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60));
  }
}
