/** 
 * Tests command line SSL setup for reset tool.
 */
@Category({IntegrationTest.class}) public class ResetIntegrationWithSslTest extends AbstractResetIntegrationTest {
  @ClassRule public static final EmbeddedKafkaCluster CLUSTER;
  private static final String TEST_ID="reset-with-ssl-integration-test";
  private static Map<String,Object> sslConfig;
static {
    final Properties brokerProps=new Properties();
    brokerProps.put(KafkaConfig$.MODULE$.ConnectionsMaxIdleMsProp(),-1L);
    try {
      sslConfig=TestSslUtils.createSslConfig(false,true,Mode.SERVER,TestUtils.tempFile(),"testCert");
      brokerProps.put(KafkaConfig$.MODULE$.ListenersProp(),"SSL://localhost:0");
      brokerProps.put(KafkaConfig$.MODULE$.InterBrokerListenerNameProp(),"SSL");
      brokerProps.putAll(sslConfig);
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
    CLUSTER=new EmbeddedKafkaCluster(1,brokerProps);
  }
  @Override Map<String,Object> getClientSslConfig(){
    return sslConfig;
  }
  @Before public void before() throws Exception {
    testId=TEST_ID;
    cluster=CLUSTER;
    prepareTest();
  }
  @After public void after() throws Exception {
    cleanupTest();
  }
  @Test public void testReprocessingFromScratchAfterResetWithoutIntermediateUserTopic() throws Exception {
    super.testReprocessingFromScratchAfterResetWithoutIntermediateUserTopic();
  }
  @Test public void testReprocessingFromScratchAfterResetWithIntermediateUserTopic() throws Exception {
    super.testReprocessingFromScratchAfterResetWithIntermediateUserTopic();
  }
}
