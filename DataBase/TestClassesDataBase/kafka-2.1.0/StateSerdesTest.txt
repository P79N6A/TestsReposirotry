public class StateSerdesTest {
  @Test(expected=NullPointerException.class) public void shouldThrowIfTopicNameIsNullForBuiltinTypes(){
    StateSerdes.withBuiltinTypes(null,byte[].class,byte[].class);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfKeyClassIsNullForBuiltinTypes(){
    StateSerdes.withBuiltinTypes("anyName",null,byte[].class);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfValueClassIsNullForBuiltinTypes(){
    StateSerdes.withBuiltinTypes("anyName",byte[].class,null);
  }
  @Test public void shouldReturnSerdesForBuiltInKeyAndValueTypesForBuiltinTypes(){
    final Class[] supportedBuildInTypes=new Class[]{String.class,Short.class,Integer.class,Long.class,Float.class,Double.class,byte[].class,ByteBuffer.class,Bytes.class};
    for (    final Class keyClass : supportedBuildInTypes) {
      for (      final Class valueClass : supportedBuildInTypes) {
        Assert.assertNotNull(StateSerdes.withBuiltinTypes("anyName",keyClass,valueClass));
      }
    }
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowForUnknownKeyTypeForBuiltinTypes(){
    StateSerdes.withBuiltinTypes("anyName",Class.class,byte[].class);
  }
  @Test(expected=IllegalArgumentException.class) public void shouldThrowForUnknownValueTypeForBuiltinTypes(){
    StateSerdes.withBuiltinTypes("anyName",byte[].class,Class.class);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfTopicNameIsNull(){
    new StateSerdes<>(null,Serdes.ByteArray(),Serdes.ByteArray());
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfKeyClassIsNull(){
    new StateSerdes<>("anyName",null,Serdes.ByteArray());
  }
  @Test(expected=NullPointerException.class) public void shouldThrowIfValueClassIsNull(){
    new StateSerdes<>("anyName",Serdes.ByteArray(),null);
  }
  @Test(expected=StreamsException.class) public void shouldThrowIfIncompatibleSerdeForValue() throws ClassNotFoundException {
    final Class myClass=Class.forName("java.lang.String");
    final StateSerdes<Object,Object> stateSerdes=new StateSerdes<Object,Object>("anyName",Serdes.serdeFrom(myClass),Serdes.serdeFrom(myClass));
    final Integer myInt=123;
    stateSerdes.rawValue(myInt);
  }
  @Test(expected=StreamsException.class) public void shouldThrowIfIncompatibleSerdeForKey() throws ClassNotFoundException {
    final Class myClass=Class.forName("java.lang.String");
    final StateSerdes<Object,Object> stateSerdes=new StateSerdes<Object,Object>("anyName",Serdes.serdeFrom(myClass),Serdes.serdeFrom(myClass));
    final Integer myInt=123;
    stateSerdes.rawKey(myInt);
  }
}
