public class TopicAdminTest {
  /** 
 * 0.11.0.0 clients can talk with older brokers, but the CREATE_TOPIC API was added in 0.10.1.0. That means, if our TopicAdmin talks to a pre 0.10.1 broker, it should receive an UnsupportedVersionException, should create no topics, and return false.
 */
  @Test public void returnNullWithApiVersionMismatch(){
    final NewTopic newTopic=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    Cluster cluster=createCluster(1);
    try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(cluster)){
      env.kafkaClient().setNode(cluster.controller());
      env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
      env.kafkaClient().prepareResponse(createTopicResponseWithUnsupportedVersion(newTopic));
      TopicAdmin admin=new TopicAdmin(null,env.adminClient());
      boolean created=admin.createTopic(newTopic);
      assertFalse(created);
    }
   }
  @Test public void returnNullWithClusterAuthorizationFailure(){
    final NewTopic newTopic=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    Cluster cluster=createCluster(1);
    try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(cluster)){
      env.kafkaClient().setNode(cluster.nodes().iterator().next());
      env.kafkaClient().prepareResponse(createTopicResponseWithClusterAuthorizationException(newTopic));
      TopicAdmin admin=new TopicAdmin(null,env.adminClient());
      boolean created=admin.createTopic(newTopic);
      assertFalse(created);
    }
   }
  @Test public void shouldNotCreateTopicWhenItAlreadyExists(){
    NewTopic newTopic=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    Cluster cluster=createCluster(1);
    try (MockAdminClient mockAdminClient=new MockAdminClient(cluster.nodes(),cluster.nodeById(0))){
      TopicPartitionInfo topicPartitionInfo=new TopicPartitionInfo(0,cluster.nodeById(0),cluster.nodes(),Collections.<Node>emptyList());
      mockAdminClient.addTopic(false,"myTopic",Collections.singletonList(topicPartitionInfo),null);
      TopicAdmin admin=new TopicAdmin(null,mockAdminClient);
      assertFalse(admin.createTopic(newTopic));
    }
   }
  @Test public void shouldCreateTopicWhenItDoesNotExist(){
    NewTopic newTopic=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    Cluster cluster=createCluster(1);
    try (MockAdminClient mockAdminClient=new MockAdminClient(cluster.nodes(),cluster.nodeById(0))){
      TopicAdmin admin=new TopicAdmin(null,mockAdminClient);
      assertTrue(admin.createTopic(newTopic));
    }
   }
  @Test public void shouldCreateOneTopicWhenProvidedMultipleDefinitionsWithSameTopicName(){
    NewTopic newTopic1=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    NewTopic newTopic2=TopicAdmin.defineTopic("myTopic").partitions(1).compacted().build();
    Cluster cluster=createCluster(1);
    try (MockAdminClient mockAdminClient=new MockAdminClient(cluster.nodes(),cluster.nodeById(0))){
      TopicAdmin admin=new TopicAdmin(null,mockAdminClient);
      Set<String> newTopicNames=admin.createTopics(newTopic1,newTopic2);
      assertEquals(1,newTopicNames.size());
      assertEquals(newTopic2.name(),newTopicNames.iterator().next());
    }
   }
  @Test public void shouldReturnFalseWhenSuppliedNullTopicDescription(){
    Cluster cluster=createCluster(1);
    try (MockAdminClient mockAdminClient=new MockAdminClient(cluster.nodes(),cluster.nodeById(0))){
      TopicAdmin admin=new TopicAdmin(null,mockAdminClient);
      boolean created=admin.createTopic(null);
      assertFalse(created);
    }
   }
  private Cluster createCluster(  int numNodes){
    HashMap<Integer,Node> nodes=new HashMap<>();
    for (int i=0; i < numNodes; ++i) {
      nodes.put(i,new Node(i,"localhost",8121 + i));
    }
    Cluster cluster=new Cluster("mockClusterId",nodes.values(),Collections.<PartitionInfo>emptySet(),Collections.<String>emptySet(),Collections.<String>emptySet(),nodes.get(0));
    return cluster;
  }
  private CreateTopicsResponse createTopicResponseWithUnsupportedVersion(  NewTopic... topics){
    return createTopicResponse(new ApiError(Errors.UNSUPPORTED_VERSION,"This version of the API is not supported"),topics);
  }
  private CreateTopicsResponse createTopicResponseWithClusterAuthorizationException(  NewTopic... topics){
    return createTopicResponse(new ApiError(Errors.CLUSTER_AUTHORIZATION_FAILED,"Not authorized to create topic(s)"),topics);
  }
  private CreateTopicsResponse createTopicResponse(  ApiError error,  NewTopic... topics){
    if (error == null)     error=new ApiError(Errors.NONE,"");
    Map<String,ApiError> topicResults=new HashMap<>();
    for (    NewTopic topic : topics) {
      topicResults.put(topic.name(),error);
    }
    return new CreateTopicsResponse(topicResults);
  }
}
