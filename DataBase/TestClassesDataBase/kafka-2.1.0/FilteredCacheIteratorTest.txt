public class FilteredCacheIteratorTest {
  private static final CacheFunction IDENTITY_FUNCTION=new CacheFunction(){
    @Override public Bytes key(    final Bytes cacheKey){
      return cacheKey;
    }
    @Override public Bytes cacheKey(    final Bytes key){
      return key;
    }
  }
;
  @SuppressWarnings("unchecked") private final InMemoryKeyValueStore<Bytes,LRUCacheEntry> store=new InMemoryKeyValueStore("name",null,null);
  private final KeyValue<Bytes,LRUCacheEntry> firstEntry=KeyValue.pair(Bytes.wrap("a".getBytes()),new LRUCacheEntry("1".getBytes()));
  private final List<KeyValue<Bytes,LRUCacheEntry>> entries=Utils.mkList(firstEntry,KeyValue.pair(Bytes.wrap("b".getBytes()),new LRUCacheEntry("2".getBytes())),KeyValue.pair(Bytes.wrap("c".getBytes()),new LRUCacheEntry("3".getBytes())));
  private FilteredCacheIterator allIterator;
  private FilteredCacheIterator firstEntryIterator;
  @Before public void before(){
    store.putAll(entries);
    final HasNextCondition allCondition=new HasNextCondition(){
      @Override public boolean hasNext(      final KeyValueIterator<Bytes,?> iterator){
        return iterator.hasNext();
      }
    }
;
    allIterator=new FilteredCacheIterator(new DelegatingPeekingKeyValueIterator<>("",store.all()),allCondition,IDENTITY_FUNCTION);
    final HasNextCondition firstEntryCondition=new HasNextCondition(){
      @Override public boolean hasNext(      final KeyValueIterator<Bytes,?> iterator){
        return iterator.hasNext() && iterator.peekNextKey().equals(firstEntry.key);
      }
    }
;
    firstEntryIterator=new FilteredCacheIterator(new DelegatingPeekingKeyValueIterator<>("",store.all()),firstEntryCondition,IDENTITY_FUNCTION);
  }
  @Test public void shouldAllowEntryMatchingHasNextCondition(){
    final List<KeyValue<Bytes,LRUCacheEntry>> keyValues=toList(allIterator);
    assertThat(keyValues,equalTo(entries));
  }
  @Test public void shouldPeekNextKey(){
    while (allIterator.hasNext()) {
      final Bytes nextKey=allIterator.peekNextKey();
      final KeyValue<Bytes,LRUCacheEntry> next=allIterator.next();
      assertThat(next.key,equalTo(nextKey));
    }
  }
  @Test public void shouldPeekNext(){
    while (allIterator.hasNext()) {
      final KeyValue<Bytes,LRUCacheEntry> peeked=allIterator.peekNext();
      final KeyValue<Bytes,LRUCacheEntry> next=allIterator.next();
      assertThat(peeked,equalTo(next));
    }
  }
  @Test public void shouldNotHaveNextIfHasNextConditionNotMet(){
    assertTrue(firstEntryIterator.hasNext());
    firstEntryIterator.next();
    assertFalse(firstEntryIterator.hasNext());
  }
  @Test public void shouldFilterEntriesNotMatchingHasNextCondition(){
    final List<KeyValue<Bytes,LRUCacheEntry>> keyValues=toList(firstEntryIterator);
    assertThat(keyValues,equalTo(Utils.mkList(firstEntry)));
  }
  @Test(expected=UnsupportedOperationException.class) public void shouldThrowUnsupportedOperationExeceptionOnRemove(){
    allIterator.remove();
  }
}
