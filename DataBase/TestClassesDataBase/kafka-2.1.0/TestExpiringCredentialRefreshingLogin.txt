private static class TestExpiringCredentialRefreshingLogin extends ExpiringCredentialRefreshingLogin {
  private ExpiringCredential expiringCredential;
  private ExpiringCredential tmpExpiringCredential;
  private final Time time;
  private final long lifetimeMillis;
  private final long absoluteLastRefreshTimeMs;
  private final boolean clientReloginAllowedBeforeLogout;
  public TestExpiringCredentialRefreshingLogin(  ExpiringCredentialRefreshConfig refreshConfig,  LoginContextFactory loginContextFactory,  Time time,  final long lifetimeMillis,  final long absoluteLastRefreshMs,  boolean clientReloginAllowedBeforeLogout){
    super("contextName",EMPTY_WILDCARD_CONFIGURATION,refreshConfig,null,TestExpiringCredentialRefreshingLogin.class,loginContextFactory,Objects.requireNonNull(time));
    this.time=time;
    this.lifetimeMillis=lifetimeMillis;
    this.absoluteLastRefreshTimeMs=absoluteLastRefreshMs;
    this.clientReloginAllowedBeforeLogout=clientReloginAllowedBeforeLogout;
  }
  public void createNewExpiringCredential(){
    if (!clientReloginAllowedBeforeLogout)     expiringCredential=internalNewExpiringCredential();
 else {
      boolean initialLogin=expiringCredential == null;
      if (initialLogin)       this.expiringCredential=internalNewExpiringCredential();
 else       this.tmpExpiringCredential=internalNewExpiringCredential();
    }
  }
  public void clearExpiringCredential(){
    if (!clientReloginAllowedBeforeLogout)     expiringCredential=null;
 else     expiringCredential=tmpExpiringCredential;
  }
  @Override public ExpiringCredential expiringCredential(){
    return expiringCredential;
  }
  private ExpiringCredential internalNewExpiringCredential(){
    return new ExpiringCredential(){
      private final long createMs=time.milliseconds();
      private final long expireTimeMs=createMs + lifetimeMillis;
      @Override public String principalName(){
        return "Created at " + new Date(createMs);
      }
      @Override public Long startTimeMs(){
        return createMs;
      }
      @Override public long expireTimeMs(){
        return expireTimeMs;
      }
      @Override public Long absoluteLastRefreshTimeMs(){
        return absoluteLastRefreshTimeMs;
      }
      @Override public String toString(){
        return String.format("startTimeMs=%d, expireTimeMs=%d, absoluteLastRefreshTimeMs=%s",startTimeMs(),expireTimeMs(),absoluteLastRefreshTimeMs());
      }
    }
;
  }
}
