public class DefaultKafkaPrincipalBuilderTest {
  @Test @SuppressWarnings("deprecation") public void testUseOldPrincipalBuilderForPlaintextIfProvided() throws Exception {
    TransportLayer transportLayer=mock(TransportLayer.class);
    Authenticator authenticator=mock(Authenticator.class);
    PrincipalBuilder oldPrincipalBuilder=mock(PrincipalBuilder.class);
    when(oldPrincipalBuilder.buildPrincipal(any(),any())).thenReturn(new DummyPrincipal("foo"));
    DefaultKafkaPrincipalBuilder builder=DefaultKafkaPrincipalBuilder.fromOldPrincipalBuilder(authenticator,transportLayer,oldPrincipalBuilder,null);
    KafkaPrincipal principal=builder.build(new PlaintextAuthenticationContext(InetAddress.getLocalHost(),SecurityProtocol.PLAINTEXT.name()));
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
    assertEquals("foo",principal.getName());
    builder.close();
    verify(oldPrincipalBuilder).buildPrincipal(transportLayer,authenticator);
    verify(oldPrincipalBuilder).close();
  }
  @Test public void testReturnAnonymousPrincipalForPlaintext() throws Exception {
    try (DefaultKafkaPrincipalBuilder builder=new DefaultKafkaPrincipalBuilder(null)){
      assertEquals(KafkaPrincipal.ANONYMOUS,builder.build(new PlaintextAuthenticationContext(InetAddress.getLocalHost(),SecurityProtocol.PLAINTEXT.name())));
    }
   }
  @Test @SuppressWarnings("deprecation") public void testUseOldPrincipalBuilderForSslIfProvided() throws Exception {
    TransportLayer transportLayer=mock(TransportLayer.class);
    Authenticator authenticator=mock(Authenticator.class);
    PrincipalBuilder oldPrincipalBuilder=mock(PrincipalBuilder.class);
    SSLSession session=mock(SSLSession.class);
    when(oldPrincipalBuilder.buildPrincipal(any(),any())).thenReturn(new DummyPrincipal("foo"));
    DefaultKafkaPrincipalBuilder builder=DefaultKafkaPrincipalBuilder.fromOldPrincipalBuilder(authenticator,transportLayer,oldPrincipalBuilder,null);
    KafkaPrincipal principal=builder.build(new SslAuthenticationContext(session,InetAddress.getLocalHost(),SecurityProtocol.PLAINTEXT.name()));
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
    assertEquals("foo",principal.getName());
    builder.close();
    verify(oldPrincipalBuilder).buildPrincipal(transportLayer,authenticator);
    verify(oldPrincipalBuilder).close();
  }
  @Test public void testUseSessionPeerPrincipalForSsl() throws Exception {
    SSLSession session=mock(SSLSession.class);
    when(session.getPeerPrincipal()).thenReturn(new DummyPrincipal("foo"));
    DefaultKafkaPrincipalBuilder builder=new DefaultKafkaPrincipalBuilder(null);
    KafkaPrincipal principal=builder.build(new SslAuthenticationContext(session,InetAddress.getLocalHost(),SecurityProtocol.PLAINTEXT.name()));
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
    assertEquals("foo",principal.getName());
    builder.close();
    verify(session,atLeastOnce()).getPeerPrincipal();
  }
  @Test public void testPrincipalBuilderScram() throws Exception {
    SaslServer server=mock(SaslServer.class);
    when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName());
    when(server.getAuthorizationID()).thenReturn("foo");
    DefaultKafkaPrincipalBuilder builder=new DefaultKafkaPrincipalBuilder(null);
    KafkaPrincipal principal=builder.build(new SaslAuthenticationContext(server,SecurityProtocol.SASL_PLAINTEXT,InetAddress.getLocalHost(),SecurityProtocol.SASL_PLAINTEXT.name()));
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
    assertEquals("foo",principal.getName());
    builder.close();
    verify(server,atLeastOnce()).getMechanismName();
    verify(server,atLeastOnce()).getAuthorizationID();
  }
  @Test public void testPrincipalBuilderGssapi() throws Exception {
    SaslServer server=mock(SaslServer.class);
    KerberosShortNamer kerberosShortNamer=mock(KerberosShortNamer.class);
    when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM);
    when(server.getAuthorizationID()).thenReturn("foo/host@REALM.COM");
    when(kerberosShortNamer.shortName(any())).thenReturn("foo");
    DefaultKafkaPrincipalBuilder builder=new DefaultKafkaPrincipalBuilder(kerberosShortNamer);
    KafkaPrincipal principal=builder.build(new SaslAuthenticationContext(server,SecurityProtocol.SASL_PLAINTEXT,InetAddress.getLocalHost(),SecurityProtocol.SASL_PLAINTEXT.name()));
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
    assertEquals("foo",principal.getName());
    builder.close();
    verify(server,atLeastOnce()).getMechanismName();
    verify(server,atLeastOnce()).getAuthorizationID();
    verify(kerberosShortNamer,atLeastOnce()).shortName(any());
  }
private static class DummyPrincipal implements Principal {
    private final String name;
    private DummyPrincipal(    String name){
      this.name=name;
    }
    @Override public String getName(){
      return name;
    }
  }
}
