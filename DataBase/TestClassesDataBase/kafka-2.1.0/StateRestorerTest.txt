public class StateRestorerTest {
  private static final long OFFSET_LIMIT=50;
  private final MockRestoreCallback callback=new MockRestoreCallback();
  private final MockStateRestoreListener reportingListener=new MockStateRestoreListener();
  private final CompositeRestoreListener compositeRestoreListener=new CompositeRestoreListener(callback);
  private final StateRestorer restorer=new StateRestorer(new TopicPartition("topic",1),compositeRestoreListener,null,OFFSET_LIMIT,true,"storeName");
  @Before public void setUp(){
    compositeRestoreListener.setUserRestoreListener(reportingListener);
  }
  @Test public void shouldCallRestoreOnRestoreCallback(){
    restorer.restore(Collections.singletonList(new ConsumerRecord<>("",0,0L,new byte[0],new byte[0])));
    assertThat(callback.restored.size(),equalTo(1));
  }
  @Test public void shouldBeCompletedIfRecordOffsetGreaterThanEndOffset(){
    assertTrue(restorer.hasCompleted(11,10));
  }
  @Test public void shouldBeCompletedIfRecordOffsetGreaterThanOffsetLimit(){
    assertTrue(restorer.hasCompleted(51,100));
  }
  @Test public void shouldBeCompletedIfEndOffsetAndRecordOffsetAreZero(){
    assertTrue(restorer.hasCompleted(0,0));
  }
  @Test public void shouldBeCompletedIfOffsetAndOffsetLimitAreZero(){
    final StateRestorer restorer=new StateRestorer(new TopicPartition("topic",1),compositeRestoreListener,null,0,true,"storeName");
    assertTrue(restorer.hasCompleted(0,10));
  }
  @Test public void shouldSetRestoredOffsetToMinOfLimitAndOffset(){
    restorer.setRestoredOffset(20);
    assertThat(restorer.restoredOffset(),equalTo(20L));
    restorer.setRestoredOffset(100);
    assertThat(restorer.restoredOffset(),equalTo(OFFSET_LIMIT));
  }
  @Test public void shouldSetStartingOffsetToMinOfLimitAndOffset(){
    restorer.setStartingOffset(20);
    assertThat(restorer.startingOffset(),equalTo(20L));
    restorer.setRestoredOffset(100);
    assertThat(restorer.restoredOffset(),equalTo(OFFSET_LIMIT));
  }
  @Test public void shouldReturnCorrectNumRestoredRecords(){
    restorer.setStartingOffset(20);
    restorer.setRestoredOffset(40);
    assertThat(restorer.restoredNumRecords(),equalTo(20L));
    restorer.setRestoredOffset(100);
    assertThat(restorer.restoredNumRecords(),equalTo(OFFSET_LIMIT - 20));
  }
}
