public class KStreamMapValuesTest {
  private String topicName="topic";
  private final MockProcessorSupplier<Integer,Integer> supplier=new MockProcessorSupplier<>();
  private final ConsumerRecordFactory<Integer,String> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new StringSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  @Test public void testFlatMapValues(){
    final StreamsBuilder builder=new StreamsBuilder();
    final ValueMapper<CharSequence,Integer> mapper=new ValueMapper<CharSequence,Integer>(){
      @Override public Integer apply(      final CharSequence value){
        return value.length();
      }
    }
;
    final int[] expectedKeys={1,10,100,1000};
    final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    stream.mapValues(mapper).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,Integer.toString(expectedKey)));
      }
    }
     final String[] expected={"1:1","10:2","100:3","1000:4"};
    assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray());
  }
  @Test public void testMapValuesWithKeys(){
    final StreamsBuilder builder=new StreamsBuilder();
    final ValueMapperWithKey<Integer,CharSequence,Integer> mapper=new ValueMapperWithKey<Integer,CharSequence,Integer>(){
      @Override public Integer apply(      final Integer readOnlyKey,      final CharSequence value){
        return value.length() + readOnlyKey;
      }
    }
;
    final int[] expectedKeys={1,10,100,1000};
    final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    stream.mapValues(mapper).process(supplier);
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      for (      final int expectedKey : expectedKeys) {
        driver.pipeInput(recordFactory.create(topicName,expectedKey,Integer.toString(expectedKey)));
      }
    }
     final String[] expected={"1:2","10:12","100:103","1000:1004"};
    assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray());
  }
}
