public class MockProcessor<K,V> extends AbstractProcessor<K,V> {
  public final ArrayList<String> processed=new ArrayList<>();
  public final ArrayList<K> processedKeys=new ArrayList<>();
  public final ArrayList<V> processedValues=new ArrayList<>();
  public final ArrayList<Long> punctuatedStreamTime=new ArrayList<>();
  public final ArrayList<Long> punctuatedSystemTime=new ArrayList<>();
  public Cancellable scheduleCancellable;
  private final PunctuationType punctuationType;
  private final long scheduleInterval;
  private boolean commitRequested=false;
  public MockProcessor(  final PunctuationType punctuationType,  final long scheduleInterval){
    this.punctuationType=punctuationType;
    this.scheduleInterval=scheduleInterval;
  }
  public MockProcessor(){
    this(PunctuationType.STREAM_TIME,-1);
  }
  @Override public void init(  final ProcessorContext context){
    super.init(context);
    if (scheduleInterval > 0L) {
      scheduleCancellable=context.schedule(Duration.ofMillis(scheduleInterval),punctuationType,new Punctuator(){
        @Override public void punctuate(        final long timestamp){
          if (punctuationType == PunctuationType.STREAM_TIME) {
            assertEquals(timestamp,context().timestamp());
          }
          assertEquals(-1,context().partition());
          assertEquals(-1L,context().offset());
          (punctuationType == PunctuationType.STREAM_TIME ? punctuatedStreamTime : punctuatedSystemTime).add(timestamp);
        }
      }
);
    }
  }
  @Override public void process(  final K key,  final V value){
    processedKeys.add(key);
    processedValues.add(value);
    processed.add((key == null ? "null" : key) + ":" + (value == null ? "null" : value));
    if (commitRequested) {
      context().commit();
      commitRequested=false;
    }
  }
  public void checkAndClearProcessResult(  final String... expected){
    assertEquals("the number of outputs:" + processed,expected.length,processed.size());
    for (int i=0; i < expected.length; i++) {
      assertEquals("output[" + i + "]:",expected[i],processed.get(i));
    }
    processed.clear();
  }
  public void requestCommit(){
    commitRequested=true;
  }
  public void checkEmptyAndClearProcessResult(){
    assertEquals("the number of outputs:",0,processed.size());
    processed.clear();
  }
  public void checkAndClearPunctuateResult(  final PunctuationType type,  final long... expected){
    final ArrayList<Long> punctuated=type == PunctuationType.STREAM_TIME ? punctuatedStreamTime : punctuatedSystemTime;
    assertEquals("the number of outputs:",expected.length,punctuated.size());
    for (int i=0; i < expected.length; i++) {
      assertEquals("output[" + i + "]:",expected[i],(long)punctuated.get(i));
    }
    processed.clear();
  }
}
