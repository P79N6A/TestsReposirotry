public class CommonClientConfigsTest {
private static class TestConfig extends AbstractConfig {
    private static final ConfigDef CONFIG;
static {
      CONFIG=new ConfigDef().define(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG,ConfigDef.Type.LONG,50L,atLeast(0L),ConfigDef.Importance.LOW,"").define(CommonClientConfigs.RECONNECT_BACKOFF_MAX_MS_CONFIG,ConfigDef.Type.LONG,1000L,atLeast(0L),ConfigDef.Importance.LOW,"");
    }
    @Override protected Map<String,Object> postProcessParsedConfig(    final Map<String,Object> parsedValues){
      return CommonClientConfigs.postProcessReconnectBackoffConfigs(this,parsedValues);
    }
    public TestConfig(    Map<?,?> props){
      super(CONFIG,props);
    }
  }
  @Test public void testExponentialBackoffDefaults() throws Exception {
    TestConfig defaultConf=new TestConfig(Collections.emptyMap());
    assertEquals(Long.valueOf(50L),defaultConf.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG));
    assertEquals(Long.valueOf(1000L),defaultConf.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MAX_MS_CONFIG));
    TestConfig bothSetConfig=new TestConfig(new HashMap<String,Object>(){
{
        put(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG,"123");
        put(CommonClientConfigs.RECONNECT_BACKOFF_MAX_MS_CONFIG,"12345");
      }
    }
);
    assertEquals(Long.valueOf(123L),bothSetConfig.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG));
    assertEquals(Long.valueOf(12345L),bothSetConfig.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MAX_MS_CONFIG));
    TestConfig reconnectBackoffSetConf=new TestConfig(new HashMap<String,Object>(){
{
        put(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG,"123");
      }
    }
);
    assertEquals(Long.valueOf(123L),reconnectBackoffSetConf.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MS_CONFIG));
    assertEquals(Long.valueOf(123L),reconnectBackoffSetConf.getLong(CommonClientConfigs.RECONNECT_BACKOFF_MAX_MS_CONFIG));
  }
}
