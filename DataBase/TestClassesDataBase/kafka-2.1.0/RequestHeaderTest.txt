public class RequestHeaderTest {
  @Test public void testSerdeControlledShutdownV0(){
    int correlationId=2342;
    ByteBuffer rawBuffer=ByteBuffer.allocate(32);
    rawBuffer.putShort(ApiKeys.CONTROLLED_SHUTDOWN.id);
    rawBuffer.putShort((short)0);
    rawBuffer.putInt(correlationId);
    rawBuffer.flip();
    RequestHeader deserialized=RequestHeader.parse(rawBuffer);
    assertEquals(ApiKeys.CONTROLLED_SHUTDOWN,deserialized.apiKey());
    assertEquals(0,deserialized.apiVersion());
    assertEquals(correlationId,deserialized.correlationId());
    assertEquals("",deserialized.clientId());
    Struct serialized=deserialized.toStruct();
    ByteBuffer serializedBuffer=toBuffer(serialized);
    assertEquals(ApiKeys.CONTROLLED_SHUTDOWN.id,serializedBuffer.getShort(0));
    assertEquals(0,serializedBuffer.getShort(2));
    assertEquals(correlationId,serializedBuffer.getInt(4));
    assertEquals(8,serializedBuffer.limit());
  }
  @Test public void testRequestHeader(){
    RequestHeader header=new RequestHeader(ApiKeys.FIND_COORDINATOR,(short)1,"",10);
    ByteBuffer buffer=toBuffer(header.toStruct());
    RequestHeader deserialized=RequestHeader.parse(buffer);
    assertEquals(header,deserialized);
  }
  @Test public void testRequestHeaderWithNullClientId(){
    RequestHeader header=new RequestHeader(ApiKeys.FIND_COORDINATOR,(short)1,null,10);
    Struct headerStruct=header.toStruct();
    ByteBuffer buffer=toBuffer(headerStruct);
    RequestHeader deserialized=RequestHeader.parse(buffer);
    assertEquals(header.apiKey(),deserialized.apiKey());
    assertEquals(header.apiVersion(),deserialized.apiVersion());
    assertEquals(header.correlationId(),deserialized.correlationId());
    assertEquals("",deserialized.clientId());
  }
}
