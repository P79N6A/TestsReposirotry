public abstract class NumberConverterTest<T extends Number> {
  private static final String TOPIC="topic";
  private static final String HEADER_NAME="header";
  private T[] samples;
  private Schema schema;
  private NumberConverter<T> converter;
  private Serializer<T> serializer;
  protected abstract T[] samples();
  protected abstract NumberConverter<T> createConverter();
  protected abstract Serializer<T> createSerializer();
  protected abstract Schema schema();
  @Before public void setup(){
    converter=createConverter();
    serializer=createSerializer();
    schema=schema();
    samples=samples();
  }
  @Test public void testConvertingSamplesToAndFromBytes() throws UnsupportedOperationException {
    for (    T sample : samples) {
      byte[] expected=serializer.serialize(TOPIC,sample);
      assertArrayEquals(expected,converter.fromConnectData(TOPIC,schema,sample));
      SchemaAndValue data=converter.toConnectData(TOPIC,expected);
      assertEquals(schema,data.schema());
      assertEquals(sample,data.value());
      assertArrayEquals(expected,converter.fromConnectHeader(TOPIC,HEADER_NAME,schema,sample));
      data=converter.toConnectHeader(TOPIC,HEADER_NAME,expected);
      assertEquals(schema,data.schema());
      assertEquals(sample,data.value());
    }
  }
  @Test(expected=DataException.class) public void testDeserializingDataWithTooManyBytes(){
    converter.toConnectData(TOPIC,new byte[10]);
  }
  @Test(expected=DataException.class) public void testDeserializingHeaderWithTooManyBytes(){
    converter.toConnectHeader(TOPIC,HEADER_NAME,new byte[10]);
  }
  @Test(expected=DataException.class) public void testSerializingIncorrectType(){
    converter.fromConnectData(TOPIC,schema,"not a valid number");
  }
  @Test(expected=DataException.class) public void testSerializingIncorrectHeader(){
    converter.fromConnectHeader(TOPIC,HEADER_NAME,schema,"not a valid number");
  }
  @Test public void testNullToBytes(){
    assertEquals(null,converter.fromConnectData(TOPIC,schema,null));
  }
  @Test public void testBytesNullToNumber(){
    SchemaAndValue data=converter.toConnectData(TOPIC,null);
    assertEquals(schema(),data.schema());
    assertNull(data.value());
  }
}
