/** 
 * Tests local state store and global application cleanup.
 */
@Category({IntegrationTest.class}) public class ResetIntegrationTest extends AbstractResetIntegrationTest {
  @ClassRule public static final EmbeddedKafkaCluster CLUSTER;
  private static final String TEST_ID="reset-integration-test";
static {
    final Properties brokerProps=new Properties();
    brokerProps.put(KafkaConfig$.MODULE$.ConnectionsMaxIdleMsProp(),-1L);
    CLUSTER=new EmbeddedKafkaCluster(1,brokerProps);
  }
  @Override Map<String,Object> getClientSslConfig(){
    return null;
  }
  @Before public void before() throws Exception {
    testId=TEST_ID;
    cluster=CLUSTER;
    prepareTest();
  }
  @After public void after() throws Exception {
    cleanupTest();
  }
  @Test public void testReprocessingFromScratchAfterResetWithoutIntermediateUserTopic() throws Exception {
    super.testReprocessingFromScratchAfterResetWithoutIntermediateUserTopic();
  }
  @Test public void testReprocessingFromScratchAfterResetWithIntermediateUserTopic() throws Exception {
    super.testReprocessingFromScratchAfterResetWithIntermediateUserTopic();
  }
  @Test public void testReprocessingFromFileAfterResetWithoutIntermediateUserTopic() throws Exception {
    super.testReprocessingFromFileAfterResetWithoutIntermediateUserTopic();
  }
  @Test public void testReprocessingFromDateTimeAfterResetWithoutIntermediateUserTopic() throws Exception {
    super.testReprocessingFromDateTimeAfterResetWithoutIntermediateUserTopic();
  }
  @Test public void testReprocessingByDurationAfterResetWithoutIntermediateUserTopic() throws Exception {
    super.testReprocessingByDurationAfterResetWithoutIntermediateUserTopic();
  }
  @Test public void shouldNotAllowToResetWhileStreamsRunning() throws Exception {
    super.shouldNotAllowToResetWhileStreamsIsRunning();
  }
  @Test public void shouldNotAllowToResetWhenInputTopicAbsent() throws Exception {
    super.shouldNotAllowToResetWhenInputTopicAbsent();
  }
  @Test public void shouldNotAllowToResetWhenIntermediateTopicAbsent() throws Exception {
    super.shouldNotAllowToResetWhenIntermediateTopicAbsent();
  }
}
