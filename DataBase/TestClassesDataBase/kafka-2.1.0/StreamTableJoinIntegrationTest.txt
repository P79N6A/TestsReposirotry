/** 
 * Tests all available joins of Kafka Streams DSL.
 */
@Category({IntegrationTest.class}) @RunWith(value=Parameterized.class) public class StreamTableJoinIntegrationTest extends AbstractJoinIntegrationTest {
  private KStream<Long,String> leftStream;
  private KTable<Long,String> rightTable;
  public StreamTableJoinIntegrationTest(  final boolean cacheEnabled){
    super(cacheEnabled);
  }
  @Before public void prepareTopology() throws InterruptedException {
    super.prepareEnvironment();
    appID="stream-table-join-integration-test";
    builder=new StreamsBuilder();
    rightTable=builder.table(INPUT_TOPIC_RIGHT);
    leftStream=builder.stream(INPUT_TOPIC_LEFT);
  }
  @Test public void testShouldAutoShutdownOnIncompleteMetadata() throws InterruptedException {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-incomplete");
    final KStream<Long,String> notExistStream=builder.stream(INPUT_TOPIC_LEFT + "-not-existed");
    final KTable<Long,String> aggregatedTable=notExistStream.leftJoin(rightTable,valueJoiner).groupBy((key,value) -> key).reduce((value1,value2) -> value1 + value2);
    aggregatedTable.toStream().to(OUTPUT_TOPIC);
    final KafkaStreamsWrapper streams=new KafkaStreamsWrapper(builder.build(),STREAMS_CONFIG);
    final IntegrationTestUtils.StateListenerStub listener=new IntegrationTestUtils.StateListenerStub();
    streams.setStreamThreadStateListener(listener);
    streams.start();
    TestUtils.waitForCondition(listener::revokedToPendingShutdownSeen,"Did not seen thread state transited to PENDING_SHUTDOWN");
    streams.close();
    assertEquals(listener.runningToRevokedSeen(),true);
    assertEquals(listener.revokedToPendingShutdownSeen(),true);
  }
  @Test public void testInner() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner");
    final List<List<String>> expectedResult=Arrays.asList(null,null,null,null,Collections.singletonList("B-a"),null,null,null,null,null,null,null,null,null,Collections.singletonList("D-d"));
    leftStream.join(rightTable,valueJoiner).to(OUTPUT_TOPIC);
    runTest(expectedResult);
  }
  @Test public void testLeft() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-left");
    final List<List<String>> expectedResult=Arrays.asList(null,null,Collections.singletonList("A-null"),null,Collections.singletonList("B-a"),null,null,null,Collections.singletonList("C-null"),null,null,null,null,null,Collections.singletonList("D-d"));
    leftStream.leftJoin(rightTable,valueJoiner).to(OUTPUT_TOPIC);
    runTest(expectedResult);
  }
}
