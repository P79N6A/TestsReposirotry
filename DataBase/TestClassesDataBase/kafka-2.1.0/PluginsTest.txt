public class PluginsTest {
  private static Map<String,String> pluginProps;
  private static Plugins plugins;
  private Map<String,String> props;
  private AbstractConfig config;
  private TestConverter converter;
  private TestHeaderConverter headerConverter;
  private TestInternalConverter internalConverter;
  @BeforeClass public static void beforeAll(){
    pluginProps=new HashMap<>();
    pluginProps.put(WorkerConfig.PLUGIN_PATH_CONFIG,"");
    plugins=new Plugins(pluginProps);
  }
  @Before public void setup(){
    props=new HashMap<>(pluginProps);
    props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,TestConverter.class.getName());
    props.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,TestConverter.class.getName());
    props.put("key.converter." + JsonConverterConfig.SCHEMAS_ENABLE_CONFIG,"true");
    props.put("value.converter." + JsonConverterConfig.SCHEMAS_ENABLE_CONFIG,"true");
    props.put("key.converter.extra.config","foo1");
    props.put("value.converter.extra.config","foo2");
    props.put(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,TestInternalConverter.class.getName());
    props.put(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,TestInternalConverter.class.getName());
    props.put("internal.key.converter.extra.config","bar1");
    props.put("internal.value.converter.extra.config","bar2");
    props.put(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,TestHeaderConverter.class.getName());
    props.put("header.converter.extra.config","baz");
    createConfig();
  }
  protected void createConfig(){
    this.config=new TestableWorkerConfig(props);
  }
  @Test public void shouldInstantiateAndConfigureConverters(){
    instantiateAndConfigureConverter(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.CURRENT_CLASSLOADER);
    assertEquals("true",converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
    assertEquals("foo1",converter.configs.get("extra.config"));
    instantiateAndConfigureConverter(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS);
    assertEquals("true",converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
    assertEquals("foo2",converter.configs.get("extra.config"));
  }
  @Test public void shouldInstantiateAndConfigureInternalConverters(){
    instantiateAndConfigureInternalConverter(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.CURRENT_CLASSLOADER);
    assertEquals(false,internalConverter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
    assertEquals("bar1",internalConverter.configs.get("extra.config"));
    instantiateAndConfigureInternalConverter(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS);
    assertEquals(false,internalConverter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
    assertEquals("bar2",internalConverter.configs.get("extra.config"));
  }
  @Test public void shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader(){
    assertNotNull(props.get(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG));
    HeaderConverter headerConverter=plugins.newHeaderConverter(config,WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.CURRENT_CLASSLOADER);
    assertNotNull(headerConverter);
    assertTrue(headerConverter instanceof TestHeaderConverter);
    this.headerConverter=(TestHeaderConverter)headerConverter;
    assertConverterType(ConverterType.HEADER,this.headerConverter.configs);
    assertEquals("baz",this.headerConverter.configs.get("extra.config"));
    headerConverter=plugins.newHeaderConverter(config,WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS);
    assertNotNull(headerConverter);
    assertTrue(headerConverter instanceof TestHeaderConverter);
    this.headerConverter=(TestHeaderConverter)headerConverter;
    assertConverterType(ConverterType.HEADER,this.headerConverter.configs);
    assertEquals("baz",this.headerConverter.configs.get("extra.config"));
  }
  @Test public void shouldInstantiateAndConfigureConnectRestExtension(){
    props.put(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG,TestConnectRestExtension.class.getName());
    createConfig();
    List<ConnectRestExtension> connectRestExtensions=plugins.newPlugins(config.getList(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG),config,ConnectRestExtension.class);
    assertNotNull(connectRestExtensions);
    assertEquals("One Rest Extension expected",1,connectRestExtensions.size());
    assertNotNull(connectRestExtensions.get(0));
    assertTrue("Should be instance of TestConnectRestExtension",connectRestExtensions.get(0) instanceof TestConnectRestExtension);
    assertNotNull(((TestConnectRestExtension)connectRestExtensions.get(0)).configs);
    assertEquals(config.originals(),((TestConnectRestExtension)connectRestExtensions.get(0)).configs);
  }
  @Test public void shouldInstantiateAndConfigureDefaultHeaderConverter(){
    props.remove(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG);
    createConfig();
    HeaderConverter headerConverter=plugins.newHeaderConverter(config,WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.CURRENT_CLASSLOADER);
    assertNull(headerConverter);
    headerConverter=plugins.newHeaderConverter(config,WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,ClassLoaderUsage.PLUGINS);
    assertNotNull(headerConverter);
    assertTrue(headerConverter instanceof SimpleHeaderConverter);
  }
  protected void instantiateAndConfigureConverter(  String configPropName,  ClassLoaderUsage classLoaderUsage){
    converter=(TestConverter)plugins.newConverter(config,configPropName,classLoaderUsage);
    assertNotNull(converter);
  }
  protected void instantiateAndConfigureHeaderConverter(  String configPropName){
    headerConverter=(TestHeaderConverter)plugins.newHeaderConverter(config,configPropName,ClassLoaderUsage.CURRENT_CLASSLOADER);
    assertNotNull(headerConverter);
  }
  protected void instantiateAndConfigureInternalConverter(  String configPropName,  ClassLoaderUsage classLoaderUsage){
    internalConverter=(TestInternalConverter)plugins.newConverter(config,configPropName,classLoaderUsage);
    assertNotNull(internalConverter);
  }
  protected void assertConverterType(  ConverterType type,  Map<String,?> props){
    assertEquals(type.getName(),props.get(ConverterConfig.TYPE_CONFIG));
  }
public static class TestableWorkerConfig extends WorkerConfig {
    public TestableWorkerConfig(    Map<String,String> props){
      super(WorkerConfig.baseConfigDef(),props);
    }
  }
public static class TestConverter implements Converter, Configurable {
    public Map<String,?> configs;
    public ConfigDef config(){
      return JsonConverterConfig.configDef();
    }
    @Override public void configure(    Map<String,?> configs){
      this.configs=configs;
      new JsonConverterConfig(configs);
    }
    @Override public void configure(    Map<String,?> configs,    boolean isKey){
      this.configs=configs;
    }
    @Override public byte[] fromConnectData(    String topic,    Schema schema,    Object value){
      return new byte[0];
    }
    @Override public SchemaAndValue toConnectData(    String topic,    byte[] value){
      return null;
    }
  }
public static class TestHeaderConverter implements HeaderConverter {
    public Map<String,?> configs;
    @Override public ConfigDef config(){
      return JsonConverterConfig.configDef();
    }
    @Override public void configure(    Map<String,?> configs){
      this.configs=configs;
      new JsonConverterConfig(configs);
    }
    @Override public byte[] fromConnectHeader(    String topic,    String headerKey,    Schema schema,    Object value){
      return new byte[0];
    }
    @Override public SchemaAndValue toConnectHeader(    String topic,    String headerKey,    byte[] value){
      return null;
    }
    @Override public void close() throws IOException {
    }
  }
public static class TestConnectRestExtension implements ConnectRestExtension {
    public Map<String,?> configs;
    @Override public void register(    ConnectRestExtensionContext restPluginContext){
    }
    @Override public void close() throws IOException {
    }
    @Override public void configure(    Map<String,?> configs){
      this.configs=configs;
    }
    @Override public String version(){
      return "test";
    }
  }
public static class TestInternalConverter extends JsonConverter {
    public Map<String,?> configs;
    public void configure(    Map<String,?> configs){
      this.configs=configs;
      super.configure(configs);
    }
  }
}
