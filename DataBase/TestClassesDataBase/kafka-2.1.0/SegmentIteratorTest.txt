public class SegmentIteratorTest {
  private final Segment segmentOne=new Segment("one","one",0);
  private final Segment segmentTwo=new Segment("two","window",1);
  private final HasNextCondition hasNextCondition=new HasNextCondition(){
    @Override public boolean hasNext(    final KeyValueIterator iterator){
      return iterator.hasNext();
    }
  }
;
  private InternalMockProcessorContext context;
  private SegmentIterator iterator=null;
  @Before public void before(){
    context=new InternalMockProcessorContext(TestUtils.tempDirectory(),Serdes.String(),Serdes.String(),new NoOpRecordCollector(),new ThreadCache(new LogContext("testCache "),0,new MockStreamsMetrics(new Metrics())));
    segmentOne.openDB(context);
    segmentTwo.openDB(context);
    segmentOne.put(Bytes.wrap("a".getBytes()),"1".getBytes());
    segmentOne.put(Bytes.wrap("b".getBytes()),"2".getBytes());
    segmentTwo.put(Bytes.wrap("c".getBytes()),"3".getBytes());
    segmentTwo.put(Bytes.wrap("d".getBytes()),"4".getBytes());
  }
  @After public void closeSegments(){
    if (iterator != null) {
      iterator.close();
      iterator=null;
    }
    segmentOne.close();
    segmentTwo.close();
  }
  @Test public void shouldIterateOverAllSegments(){
    iterator=new SegmentIterator(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap("a".getBytes()),Bytes.wrap("z".getBytes()));
    assertTrue(iterator.hasNext());
    assertEquals("a",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("a","1"),toStringKeyValue(iterator.next()));
    assertTrue(iterator.hasNext());
    assertEquals("b",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("b","2"),toStringKeyValue(iterator.next()));
    assertTrue(iterator.hasNext());
    assertEquals("c",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("c","3"),toStringKeyValue(iterator.next()));
    assertTrue(iterator.hasNext());
    assertEquals("d",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("d","4"),toStringKeyValue(iterator.next()));
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldNotThrowExceptionOnHasNextWhenStoreClosed(){
    iterator=new SegmentIterator(Collections.singletonList(segmentOne).iterator(),hasNextCondition,Bytes.wrap("a".getBytes()),Bytes.wrap("z".getBytes()));
    iterator.currentIterator=segmentOne.all();
    segmentOne.close();
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldOnlyIterateOverSegmentsInRange(){
    iterator=new SegmentIterator(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap("a".getBytes()),Bytes.wrap("b".getBytes()));
    assertTrue(iterator.hasNext());
    assertEquals("a",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("a","1"),toStringKeyValue(iterator.next()));
    assertTrue(iterator.hasNext());
    assertEquals("b",new String(iterator.peekNextKey().get()));
    assertEquals(KeyValue.pair("b","2"),toStringKeyValue(iterator.next()));
    assertFalse(iterator.hasNext());
  }
  @Test(expected=NoSuchElementException.class) public void shouldThrowNoSuchElementOnPeekNextKeyIfNoNext(){
    iterator=new SegmentIterator(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap("f".getBytes()),Bytes.wrap("h".getBytes()));
    iterator.peekNextKey();
  }
  @Test(expected=NoSuchElementException.class) public void shouldThrowNoSuchElementOnNextIfNoNext(){
    iterator=new SegmentIterator(Arrays.asList(segmentOne,segmentTwo).iterator(),hasNextCondition,Bytes.wrap("f".getBytes()),Bytes.wrap("h".getBytes()));
    iterator.next();
  }
  private KeyValue<String,String> toStringKeyValue(  final KeyValue<Bytes,byte[]> binaryKv){
    return KeyValue.pair(new String(binaryKv.key.get()),new String(binaryKv.value));
  }
}
