public class FullChangeSerdeTest {
  private final FullChangeSerde<String> serde=new FullChangeSerde<>(Serdes.String());
  @Test public void shouldRoundTripNull(){
    final byte[] serialized=serde.serializer().serialize(null,null);
    assertThat(serde.deserializer().deserialize(null,serialized),nullValue());
  }
  @Test public void shouldRoundTripNullChange(){
    final byte[] serialized=serde.serializer().serialize(null,new Change<>(null,null));
    assertThat(serde.deserializer().deserialize(null,serialized),is(new Change<>(null,null)));
  }
  @Test public void shouldRoundTripOldNull(){
    final byte[] serialized=serde.serializer().serialize(null,new Change<>("new",null));
    assertThat(serde.deserializer().deserialize(null,serialized),is(new Change<>("new",null)));
  }
  @Test public void shouldRoundTripNewNull(){
    final byte[] serialized=serde.serializer().serialize(null,new Change<>(null,"old"));
    assertThat(serde.deserializer().deserialize(null,serialized),is(new Change<>(null,"old")));
  }
  @Test public void shouldRoundTripChange(){
    final byte[] serialized=serde.serializer().serialize(null,new Change<>("new","old"));
    assertThat(serde.deserializer().deserialize(null,serialized),is(new Change<>("new","old")));
  }
  @SuppressWarnings("unchecked") @Test public void shouldConfigureSerde(){
    final Serde<Void> mock=EasyMock.mock(Serde.class);
    mock.configure(emptyMap(),false);
    EasyMock.expectLastCall();
    EasyMock.replay(mock);
    final FullChangeSerde<Void> serde=new FullChangeSerde<>(mock);
    serde.configure(emptyMap(),false);
    EasyMock.verify(mock);
  }
  @SuppressWarnings("unchecked") @Test public void shouldCloseSerde(){
    final Serde<Void> mock=EasyMock.mock(Serde.class);
    mock.close();
    EasyMock.expectLastCall();
    EasyMock.replay(mock);
    final FullChangeSerde<Void> serde=new FullChangeSerde<>(mock);
    serde.close();
    EasyMock.verify(mock);
  }
  @SuppressWarnings("unchecked") @Test public void shouldConfigureSerializer(){
    final Serde<Void> mockSerde=EasyMock.mock(Serde.class);
    final Serializer<Void> mockSerializer=EasyMock.mock(Serializer.class);
    EasyMock.expect(mockSerde.serializer()).andReturn(mockSerializer);
    EasyMock.replay(mockSerde);
    mockSerializer.configure(emptyMap(),false);
    EasyMock.expectLastCall();
    EasyMock.replay(mockSerializer);
    final Serializer<Change<Void>> serializer=new FullChangeSerde<>(mockSerde).serializer();
    serializer.configure(emptyMap(),false);
    EasyMock.verify(mockSerde);
    EasyMock.verify(mockSerializer);
  }
  @SuppressWarnings("unchecked") @Test public void shouldCloseSerializer(){
    final Serde<Void> mockSerde=EasyMock.mock(Serde.class);
    final Serializer<Void> mockSerializer=EasyMock.mock(Serializer.class);
    EasyMock.expect(mockSerde.serializer()).andReturn(mockSerializer);
    EasyMock.replay(mockSerde);
    mockSerializer.close();
    EasyMock.expectLastCall();
    EasyMock.replay(mockSerializer);
    final Serializer<Change<Void>> serializer=new FullChangeSerde<>(mockSerde).serializer();
    serializer.close();
    EasyMock.verify(mockSerde);
    EasyMock.verify(mockSerializer);
  }
  @SuppressWarnings("unchecked") @Test public void shouldConfigureDeserializer(){
    final Serde<Void> mockSerde=EasyMock.mock(Serde.class);
    final Deserializer<Void> mockDeserializer=EasyMock.mock(Deserializer.class);
    EasyMock.expect(mockSerde.deserializer()).andReturn(mockDeserializer);
    EasyMock.replay(mockSerde);
    mockDeserializer.configure(emptyMap(),false);
    EasyMock.expectLastCall();
    EasyMock.replay(mockDeserializer);
    final Deserializer<Change<Void>> serializer=new FullChangeSerde<>(mockSerde).deserializer();
    serializer.configure(emptyMap(),false);
    EasyMock.verify(mockSerde);
    EasyMock.verify(mockDeserializer);
  }
  @SuppressWarnings("unchecked") @Test public void shouldCloseDeserializer(){
    final Serde<Void> mockSerde=EasyMock.mock(Serde.class);
    final Deserializer<Void> mockDeserializer=EasyMock.mock(Deserializer.class);
    EasyMock.expect(mockSerde.deserializer()).andReturn(mockDeserializer);
    EasyMock.replay(mockSerde);
    mockDeserializer.close();
    EasyMock.expectLastCall();
    EasyMock.replay(mockDeserializer);
    final Deserializer<Change<Void>> serializer=new FullChangeSerde<>(mockSerde).deserializer();
    serializer.close();
    EasyMock.verify(mockSerde);
    EasyMock.verify(mockDeserializer);
  }
}
