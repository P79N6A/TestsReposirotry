/** 
 * A class that periodically produces records in a separate thread
 */
private class ProducerRunnable implements Runnable {
  private final String topic;
  private final List<String> inputValues;
  private final int numIterations;
  private int currIteration=0;
  boolean shutdown=false;
  ProducerRunnable(  final String topic,  final List<String> inputValues,  final int numIterations){
    this.topic=topic;
    this.inputValues=inputValues;
    this.numIterations=numIterations;
  }
  private synchronized void incrementIteration(){
    currIteration++;
  }
  synchronized int getCurrIteration(){
    return currIteration;
  }
  synchronized void shutdown(){
    shutdown=true;
  }
  @Override public void run(){
    final Properties producerConfig=new Properties();
    producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());
    producerConfig.put(ProducerConfig.ACKS_CONFIG,"all");
    producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class);
    producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class);
    try (final KafkaProducer<String,String> producer=new KafkaProducer<>(producerConfig,new StringSerializer(),new StringSerializer())){
      while (getCurrIteration() < numIterations && !shutdown) {
        for (        final String value : inputValues) {
          producer.send(new ProducerRecord<String,String>(topic,value));
        }
        incrementIteration();
      }
    }
   }
}
