public class InFlightRequestsTest {
  private InFlightRequests inFlightRequests;
  private int correlationId;
  private String dest="dest";
  @Before public void setup(){
    inFlightRequests=new InFlightRequests(12);
    correlationId=0;
  }
  @Test public void testCompleteLastSent(){
    int correlationId1=addRequest(dest);
    int correlationId2=addRequest(dest);
    assertEquals(2,inFlightRequests.count());
    assertEquals(correlationId2,inFlightRequests.completeLastSent(dest).header.correlationId());
    assertEquals(1,inFlightRequests.count());
    assertEquals(correlationId1,inFlightRequests.completeLastSent(dest).header.correlationId());
    assertEquals(0,inFlightRequests.count());
  }
  @Test public void testClearAll(){
    int correlationId1=addRequest(dest);
    int correlationId2=addRequest(dest);
    List<NetworkClient.InFlightRequest> clearedRequests=TestUtils.toList(this.inFlightRequests.clearAll(dest));
    assertEquals(0,inFlightRequests.count());
    assertEquals(2,clearedRequests.size());
    assertEquals(correlationId1,clearedRequests.get(0).header.correlationId());
    assertEquals(correlationId2,clearedRequests.get(1).header.correlationId());
  }
  @Test public void testTimedOutNodes(){
    Time time=new MockTime();
    addRequest("A",time.milliseconds(),50);
    addRequest("B",time.milliseconds(),200);
    addRequest("B",time.milliseconds(),100);
    time.sleep(50);
    assertEquals(Collections.emptyList(),inFlightRequests.nodesWithTimedOutRequests(time.milliseconds()));
    time.sleep(25);
    assertEquals(Collections.singletonList("A"),inFlightRequests.nodesWithTimedOutRequests(time.milliseconds()));
    time.sleep(50);
    assertEquals(Arrays.asList("A","B"),inFlightRequests.nodesWithTimedOutRequests(time.milliseconds()));
  }
  @Test public void testCompleteNext(){
    int correlationId1=addRequest(dest);
    int correlationId2=addRequest(dest);
    assertEquals(2,inFlightRequests.count());
    assertEquals(correlationId1,inFlightRequests.completeNext(dest).header.correlationId());
    assertEquals(1,inFlightRequests.count());
    assertEquals(correlationId2,inFlightRequests.completeNext(dest).header.correlationId());
    assertEquals(0,inFlightRequests.count());
  }
  @Test(expected=IllegalStateException.class) public void testCompleteNextThrowsIfNoInflights(){
    inFlightRequests.completeNext(dest);
  }
  @Test(expected=IllegalStateException.class) public void testCompleteLastSentThrowsIfNoInFlights(){
    inFlightRequests.completeLastSent(dest);
  }
  private int addRequest(  String destination){
    return addRequest(destination,0,10000);
  }
  private int addRequest(  String destination,  long sendTimeMs,  int requestTimeoutMs){
    int correlationId=this.correlationId;
    this.correlationId+=1;
    RequestHeader requestHeader=new RequestHeader(ApiKeys.METADATA,(short)0,"clientId",correlationId);
    NetworkClient.InFlightRequest ifr=new NetworkClient.InFlightRequest(requestHeader,requestTimeoutMs,0,destination,null,false,false,null,null,sendTimeMs);
    inFlightRequests.add(ifr);
    return correlationId;
  }
}
