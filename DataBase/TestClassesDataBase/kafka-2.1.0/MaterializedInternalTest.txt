@RunWith(EasyMockRunner.class) public class MaterializedInternalTest {
  @Mock(type=MockType.NICE) private InternalNameProvider nameProvider;
  @Mock(type=MockType.NICE) private KeyValueBytesStoreSupplier supplier;
  private final String prefix="prefix";
  @Test public void shouldGenerateStoreNameWithPrefixIfProvidedNameIsNull(){
    final String generatedName=prefix + "-store";
    EasyMock.expect(nameProvider.newStoreName(prefix)).andReturn(generatedName);
    EasyMock.replay(nameProvider);
    final MaterializedInternal<Object,Object,StateStore> materialized=new MaterializedInternal<>(Materialized.with(null,null));
    materialized.generateStoreNameIfNeeded(nameProvider,prefix);
    assertThat(materialized.storeName(),equalTo(generatedName));
    EasyMock.verify(nameProvider);
  }
  @Test public void shouldUseProvidedStoreNameWhenSet(){
    final String storeName="store-name";
    final MaterializedInternal<Object,Object,StateStore> materialized=new MaterializedInternal<>(Materialized.as(storeName));
    materialized.generateStoreNameIfNeeded(nameProvider,prefix);
    assertThat(materialized.storeName(),equalTo(storeName));
  }
  @Test public void shouldUseStoreNameOfSupplierWhenProvided(){
    final String storeName="other-store-name";
    EasyMock.expect(supplier.name()).andReturn(storeName).anyTimes();
    EasyMock.replay(supplier);
    final MaterializedInternal<Object,Object,KeyValueStore<Bytes,byte[]>> materialized=new MaterializedInternal<>(Materialized.as(supplier));
    materialized.generateStoreNameIfNeeded(nameProvider,prefix);
    assertThat(materialized.storeName(),equalTo(storeName));
  }
}
