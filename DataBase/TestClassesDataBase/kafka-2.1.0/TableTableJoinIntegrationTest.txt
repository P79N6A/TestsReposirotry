/** 
 * Tests all available joins of Kafka Streams DSL.
 */
@Category({IntegrationTest.class}) @RunWith(value=Parameterized.class) public class TableTableJoinIntegrationTest extends AbstractJoinIntegrationTest {
  private KTable<Long,String> leftTable;
  private KTable<Long,String> rightTable;
  public TableTableJoinIntegrationTest(  final boolean cacheEnabled){
    super(cacheEnabled);
  }
  @Before public void prepareTopology() throws InterruptedException {
    super.prepareEnvironment();
    appID="table-table-join-integration-test";
    builder=new StreamsBuilder();
    leftTable=builder.table(INPUT_TOPIC_LEFT,Materialized.<Long,String,KeyValueStore<Bytes,byte[]>>as("left").withLoggingDisabled());
    rightTable=builder.table(INPUT_TOPIC_RIGHT,Materialized.<Long,String,KeyValueStore<Bytes,byte[]>>as("right").withLoggingDisabled());
  }
  final private String expectedFinalJoinResult="D-d";
  final private String expectedFinalMultiJoinResult="D-d-d";
  final private String storeName=appID + "-store";
  private Materialized<Long,String,KeyValueStore<Bytes,byte[]>> materialized=Materialized.<Long,String,KeyValueStore<Bytes,byte[]>>as(storeName).withKeySerde(Serdes.Long()).withValueSerde(Serdes.String()).withCachingDisabled().withLoggingDisabled();
final private class CountingPeek implements ForeachAction<Long,String> {
    final private String expected;
    CountingPeek(    final boolean multiJoin){
      this.expected=multiJoin ? expectedFinalMultiJoinResult : expectedFinalJoinResult;
    }
    @Override public void apply(    final Long key,    final String value){
      numRecordsExpected++;
      if (expected.equals(value)) {
        final boolean ret=finalResultReached.compareAndSet(false,true);
        if (!ret) {
        }
      }
    }
  }
  @Test public void testInner() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner");
    if (cacheEnabled) {
      leftTable.join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(false)).to(OUTPUT_TOPIC);
      runTest(expectedFinalJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Collections.singletonList("A-a"),Collections.singletonList("B-a"),Collections.singletonList("B-b"),Collections.singletonList((String)null),null,null,Collections.singletonList("C-c"),Collections.singletonList((String)null),null,null,null,Collections.singletonList("D-d"));
      leftTable.join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testLeft() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-left");
    if (cacheEnabled) {
      leftTable.leftJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(false)).to(OUTPUT_TOPIC);
      runTest(expectedFinalJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,Collections.singletonList("A-null"),Collections.singletonList("A-a"),Collections.singletonList("B-a"),Collections.singletonList("B-b"),Collections.singletonList((String)null),null,Collections.singletonList("C-null"),Collections.singletonList("C-c"),Collections.singletonList("C-null"),Collections.singletonList((String)null),null,null,Collections.singletonList("D-d"));
      leftTable.leftJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testOuter() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-outer");
    if (cacheEnabled) {
      leftTable.outerJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(false)).to(OUTPUT_TOPIC);
      runTest(expectedFinalJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,Collections.singletonList("A-null"),Collections.singletonList("A-a"),Collections.singletonList("B-a"),Collections.singletonList("B-b"),Collections.singletonList("null-b"),Collections.singletonList((String)null),Collections.singletonList("C-null"),Collections.singletonList("C-c"),Collections.singletonList("C-null"),Collections.singletonList((String)null),null,Collections.singletonList("null-d"),Collections.singletonList("D-d"));
      leftTable.outerJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testInnerInner() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-inner");
    if (cacheEnabled) {
      leftTable.join(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList((String)null),null,null,Arrays.asList("C-c-c","C-c-c"),null,null,null,null,Collections.singletonList("D-d-d"));
      leftTable.join(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testInnerLeft() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-left");
    if (cacheEnabled) {
      leftTable.join(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList((String)null),null,null,Arrays.asList("C-c-c","C-c-c"),Collections.singletonList((String)null),null,null,null,Collections.singletonList("D-d-d"));
      leftTable.join(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testInnerOuter() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-outer");
    if (cacheEnabled) {
      leftTable.join(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList("null-b"),Collections.singletonList((String)null),null,Arrays.asList("C-c-c","C-c-c"),Arrays.asList((String)null,null),null,null,null,Arrays.asList("null-d","D-d-d"));
      leftTable.join(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testLeftInner() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-inner");
    if (cacheEnabled) {
      leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList((String)null),null,null,Arrays.asList("C-c-c","C-c-c"),Collections.singletonList((String)null),null,null,null,Collections.singletonList("D-d-d"));
      leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testLeftLeft() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-left");
    if (cacheEnabled) {
      leftTable.leftJoin(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-null-null","A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList((String)null),null,null,Arrays.asList("C-null-null","C-c-c","C-c-c"),Arrays.asList("C-null-null","C-null-null"),Collections.singletonList((String)null),null,null,Collections.singletonList("D-d-d"));
      leftTable.leftJoin(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testLeftOuter() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-outer");
    if (cacheEnabled) {
      leftTable.leftJoin(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-null-null","A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList("null-b"),Collections.singletonList((String)null),null,Arrays.asList("C-null-null","C-c-c","C-c-c"),Arrays.asList("C-null-null","C-null-null"),Collections.singletonList((String)null),null,null,Arrays.asList("null-d","D-d-d"));
      leftTable.leftJoin(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testOuterInner() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-inner");
    if (cacheEnabled) {
      leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList("null-b-b"),null,null,Arrays.asList("C-c-c","C-c-c"),Collections.singletonList((String)null),null,null,Arrays.asList("null-d-d","null-d-d"),Collections.singletonList("D-d-d"));
      leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testOuterLeft() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-left");
    if (cacheEnabled) {
      leftTable.outerJoin(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-null-null","A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList("null-b-b"),Collections.singletonList((String)null),null,Arrays.asList("C-null-null","C-c-c","C-c-c"),Arrays.asList("C-null-null","C-null-null"),Collections.singletonList((String)null),null,Arrays.asList("null-d-d","null-d-d"),Collections.singletonList("D-d-d"));
      leftTable.outerJoin(rightTable,valueJoiner).leftJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
  @Test public void testOuterOuter() throws Exception {
    STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + "-inner-outer");
    if (cacheEnabled) {
      leftTable.outerJoin(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC);
      runTest(expectedFinalMultiJoinResult,storeName);
    }
 else {
      final List<List<String>> expectedResult=Arrays.asList(null,null,null,Arrays.asList("A-null-null","A-a-a","A-a-a"),Collections.singletonList("B-a-a"),Arrays.asList("B-b-b","B-b-b"),Collections.singletonList("null-b-b"),Arrays.asList((String)null,null),null,Arrays.asList("C-null-null","C-c-c","C-c-c"),Arrays.asList("C-null-null","C-null-null"),Collections.singletonList((String)null),null,null,Arrays.asList("null-d-d","null-d-d","D-d-d"));
      leftTable.outerJoin(rightTable,valueJoiner).outerJoin(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC);
      runTest(expectedResult,storeName);
    }
  }
}
