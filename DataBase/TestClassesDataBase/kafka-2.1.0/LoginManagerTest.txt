public class LoginManagerTest {
  private Password dynamicPlainContext;
  private Password dynamicDigestContext;
  @Before public void setUp(){
    dynamicPlainContext=new Password(PlainLoginModule.class.getName() + " required user=\"plainuser\" password=\"plain-secret\";");
    dynamicDigestContext=new Password(TestDigestLoginModule.class.getName() + " required user=\"digestuser\" password=\"digest-secret\";");
    TestJaasConfig.createConfiguration("SCRAM-SHA-256",Collections.singletonList("SCRAM-SHA-256"));
  }
  @After public void tearDown(){
    LoginManager.closeAll();
  }
  @Test public void testClientLoginManager() throws Exception {
    Map<String,?> configs=Collections.singletonMap("sasl.jaas.config",dynamicPlainContext);
    JaasContext dynamicContext=JaasContext.loadClientContext(configs);
    JaasContext staticContext=JaasContext.loadClientContext(Collections.emptyMap());
    LoginManager dynamicLogin=LoginManager.acquireLoginManager(dynamicContext,"PLAIN",DefaultLogin.class,configs);
    assertEquals(dynamicPlainContext,dynamicLogin.cacheKey());
    LoginManager staticLogin=LoginManager.acquireLoginManager(staticContext,"SCRAM-SHA-256",DefaultLogin.class,configs);
    assertNotSame(dynamicLogin,staticLogin);
    assertEquals("KafkaClient",staticLogin.cacheKey());
    assertSame(dynamicLogin,LoginManager.acquireLoginManager(dynamicContext,"PLAIN",DefaultLogin.class,configs));
    assertSame(staticLogin,LoginManager.acquireLoginManager(staticContext,"SCRAM-SHA-256",DefaultLogin.class,configs));
    verifyLoginManagerRelease(dynamicLogin,2,dynamicContext,configs);
    verifyLoginManagerRelease(staticLogin,2,staticContext,configs);
  }
  @Test public void testServerLoginManager() throws Exception {
    Map<String,Object> configs=new HashMap<>();
    configs.put("plain.sasl.jaas.config",dynamicPlainContext);
    configs.put("digest-md5.sasl.jaas.config",dynamicDigestContext);
    ListenerName listenerName=new ListenerName("listener1");
    JaasContext plainJaasContext=JaasContext.loadServerContext(listenerName,"PLAIN",configs);
    JaasContext digestJaasContext=JaasContext.loadServerContext(listenerName,"DIGEST-MD5",configs);
    JaasContext scramJaasContext=JaasContext.loadServerContext(listenerName,"SCRAM-SHA-256",configs);
    LoginManager dynamicPlainLogin=LoginManager.acquireLoginManager(plainJaasContext,"PLAIN",DefaultLogin.class,configs);
    assertEquals(dynamicPlainContext,dynamicPlainLogin.cacheKey());
    LoginManager dynamicDigestLogin=LoginManager.acquireLoginManager(digestJaasContext,"DIGEST-MD5",DefaultLogin.class,configs);
    assertNotSame(dynamicPlainLogin,dynamicDigestLogin);
    assertEquals(dynamicDigestContext,dynamicDigestLogin.cacheKey());
    LoginManager staticScramLogin=LoginManager.acquireLoginManager(scramJaasContext,"SCRAM-SHA-256",DefaultLogin.class,configs);
    assertNotSame(dynamicPlainLogin,staticScramLogin);
    assertEquals("KafkaServer",staticScramLogin.cacheKey());
    assertSame(dynamicPlainLogin,LoginManager.acquireLoginManager(plainJaasContext,"PLAIN",DefaultLogin.class,configs));
    assertSame(dynamicDigestLogin,LoginManager.acquireLoginManager(digestJaasContext,"DIGEST-MD5",DefaultLogin.class,configs));
    assertSame(staticScramLogin,LoginManager.acquireLoginManager(scramJaasContext,"SCRAM-SHA-256",DefaultLogin.class,configs));
    verifyLoginManagerRelease(dynamicPlainLogin,2,plainJaasContext,configs);
    verifyLoginManagerRelease(dynamicDigestLogin,2,digestJaasContext,configs);
    verifyLoginManagerRelease(staticScramLogin,2,scramJaasContext,configs);
  }
  private void verifyLoginManagerRelease(  LoginManager loginManager,  int acquireCount,  JaasContext jaasContext,  Map<String,?> configs) throws Exception {
    for (int i=0; i < acquireCount - 1; i++)     loginManager.release();
    assertSame(loginManager,LoginManager.acquireLoginManager(jaasContext,"PLAIN",DefaultLogin.class,configs));
    for (int i=0; i < 2; i++)     loginManager.release();
    LoginManager newLoginManager=LoginManager.acquireLoginManager(jaasContext,"PLAIN",DefaultLogin.class,configs);
    assertNotSame(loginManager,newLoginManager);
    newLoginManager.release();
  }
}
