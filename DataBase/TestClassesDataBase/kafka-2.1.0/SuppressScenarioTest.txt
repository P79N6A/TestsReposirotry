public class SuppressScenarioTest {
  private static final StringDeserializer STRING_DESERIALIZER=new StringDeserializer();
  private static final StringSerializer STRING_SERIALIZER=new StringSerializer();
  private static final Serde<String> STRING_SERDE=Serdes.String();
  private static final LongDeserializer LONG_DESERIALIZER=new LongDeserializer();
  @Test public void shouldImmediatelyEmitEventsWithZeroEmitAfter(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<String,Long> valueCounts=builder.table("input",Consumed.with(STRING_SERDE,STRING_SERDE),Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(STRING_SERDE,STRING_SERDE).withCachingDisabled().withLoggingDisabled()).groupBy((k,v) -> new KeyValue<>(v,k),Grouped.with(STRING_SERDE,STRING_SERDE)).count();
    valueCounts.suppress(untilTimeLimit(ZERO,unbounded())).toStream().to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v2",1L));
      driver.pipeInput(recordFactory.create("input","k2","v1",2L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
      driver.pipeInput(recordFactory.create("input","x","x",3L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("x",1L,3L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("x",1L,3L)));
      driver.pipeInput(recordFactory.create("input","x","x",4L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("x",0L,4L),new KeyValueTimestamp<>("x",1L,4L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("x",0L,4L),new KeyValueTimestamp<>("x",1L,4L)));
    }
   }
  @Test public void shouldSuppressIntermediateEventsWithTimeLimit(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<String,Long> valueCounts=builder.table("input",Consumed.with(STRING_SERDE,STRING_SERDE),Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(STRING_SERDE,STRING_SERDE).withCachingDisabled().withLoggingDisabled()).groupBy((k,v) -> new KeyValue<>(v,k),Grouped.with(STRING_SERDE,STRING_SERDE)).count();
    valueCounts.suppress(untilTimeLimit(ofMillis(2L),unbounded())).toStream().to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v2",1L));
      driver.pipeInput(recordFactory.create("input","k2","v1",2L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("v1",1L,2L)));
      driver.pipeInput(recordFactory.create("input","tick","tick",3L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("tick",1L,3L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("v2",1L,1L)));
      driver.pipeInput(recordFactory.create("input","tick","tick",4L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("tick",0L,4L),new KeyValueTimestamp<>("tick",1L,4L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),emptyList());
    }
   }
  @Test public void shouldSuppressIntermediateEventsWithRecordLimit(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<String,Long> valueCounts=builder.table("input",Consumed.with(STRING_SERDE,STRING_SERDE),Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(STRING_SERDE,STRING_SERDE).withCachingDisabled().withLoggingDisabled()).groupBy((k,v) -> new KeyValue<>(v,k),Grouped.with(STRING_SERDE,STRING_SERDE)).count(Materialized.with(STRING_SERDE,Serdes.Long()));
    valueCounts.suppress(untilTimeLimit(ofMillis(Long.MAX_VALUE),maxRecords(1L).emitEarlyWhenFull())).toStream().to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    System.out.println(topology.describe());
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v2",1L));
      driver.pipeInput(recordFactory.create("input","k2","v1",2L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L)));
      driver.pipeInput(recordFactory.create("input","x","x",3L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("x",1L,3L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("v1",1L,2L)));
    }
   }
  @Test public void shouldSuppressIntermediateEventsWithBytesLimit(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<String,Long> valueCounts=builder.table("input",Consumed.with(STRING_SERDE,STRING_SERDE),Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(STRING_SERDE,STRING_SERDE).withCachingDisabled().withLoggingDisabled()).groupBy((k,v) -> new KeyValue<>(v,k),Grouped.with(STRING_SERDE,STRING_SERDE)).count();
    valueCounts.suppress(untilTimeLimit(Duration.ofMillis(Long.MAX_VALUE),maxBytes(200L).emitEarlyWhenFull())).toStream().to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    System.out.println(topology.describe());
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v2",1L));
      driver.pipeInput(recordFactory.create("input","k2","v1",2L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L)));
      driver.pipeInput(recordFactory.create("input","x","x",3L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("x",1L,3L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("v1",1L,2L)));
    }
   }
  @Test public void shouldSupportFinalResultsForTimeWindows(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<Windowed<String>,Long> valueCounts=builder.stream("input",Consumed.with(STRING_SERDE,STRING_SERDE)).groupBy((    String k,    String v) -> k,Grouped.with(STRING_SERDE,STRING_SERDE)).windowedBy(TimeWindows.of(2L).grace(ofMillis(1L))).count(Materialized.<String,Long,WindowStore<Bytes,byte[]>>as("counts").withCachingDisabled());
    valueCounts.suppress(untilWindowCloses(unbounded())).toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    System.out.println(topology.describe());
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",1L));
      driver.pipeInput(recordFactory.create("input","k1","v1",2L));
      driver.pipeInput(recordFactory.create("input","k1","v1",1L));
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",5L));
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/2]",1L,0L),new KeyValueTimestamp<>("[k1@0/2]",2L,1L),new KeyValueTimestamp<>("[k1@2/4]",1L,2L),new KeyValueTimestamp<>("[k1@0/2]",3L,1L),new KeyValueTimestamp<>("[k1@0/2]",4L,0L),new KeyValueTimestamp<>("[k1@4/6]",1L,5L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/2]",4L,0L),new KeyValueTimestamp<>("[k1@2/4]",1L,2L)));
    }
   }
  @Test public void shouldSupportFinalResultsForTimeWindowsWithLargeJump(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<Windowed<String>,Long> valueCounts=builder.stream("input",Consumed.with(STRING_SERDE,STRING_SERDE)).groupBy((    String k,    String v) -> k,Grouped.with(STRING_SERDE,STRING_SERDE)).windowedBy(TimeWindows.of(2L).grace(ofMillis(2L))).count(Materialized.<String,Long,WindowStore<Bytes,byte[]>>as("counts").withCachingDisabled().withKeySerde(STRING_SERDE));
    valueCounts.suppress(untilWindowCloses(unbounded())).toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    System.out.println(topology.describe());
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",1L));
      driver.pipeInput(recordFactory.create("input","k1","v1",2L));
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",3L));
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",4L));
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",30L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/2]",1L,0L),new KeyValueTimestamp<>("[k1@0/2]",2L,1L),new KeyValueTimestamp<>("[k1@2/4]",1L,2L),new KeyValueTimestamp<>("[k1@0/2]",3L,0L),new KeyValueTimestamp<>("[k1@2/4]",2L,3L),new KeyValueTimestamp<>("[k1@0/2]",4L,0L),new KeyValueTimestamp<>("[k1@4/6]",1L,4L),new KeyValueTimestamp<>("[k1@30/32]",1L,30L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/2]",4L,0L),new KeyValueTimestamp<>("[k1@2/4]",2L,3L),new KeyValueTimestamp<>("[k1@4/6]",1L,4L)));
    }
   }
  @Test public void shouldSupportFinalResultsForSessionWindows(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KTable<Windowed<String>,Long> valueCounts=builder.stream("input",Consumed.with(STRING_SERDE,STRING_SERDE)).groupBy((    String k,    String v) -> k,Grouped.with(STRING_SERDE,STRING_SERDE)).windowedBy(SessionWindows.with(5L).grace(ofMillis(5L))).count(Materialized.<String,Long,SessionStore<Bytes,byte[]>>as("counts").withCachingDisabled());
    valueCounts.suppress(untilWindowCloses(unbounded())).toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
    valueCounts.toStream().map((    final Windowed<String> k,    final Long v) -> new KeyValue<>(k.toString(),v)).to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
    final Topology topology=builder.build();
    System.out.println(topology.describe());
    final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
    try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
      driver.pipeInput(recordFactory.create("input","k1","v1",0L));
      driver.pipeInput(recordFactory.create("input","k1","v1",1L));
      driver.pipeInput(recordFactory.create("input","k1","v1",7L));
      driver.pipeInput(recordFactory.create("input","k1","v1",1L));
      driver.pipeInput(recordFactory.create("input","k1","v1",30L));
      verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/0]",1L,0L),new KeyValueTimestamp<>("[k1@0/0]",null,1L),new KeyValueTimestamp<>("[k1@0/1]",2L,1L),new KeyValueTimestamp<>("[k1@7/7]",1L,7L),new KeyValueTimestamp<>("[k1@30/30]",1L,30L)));
      verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/1]",2L,1L),new KeyValueTimestamp<>("[k1@7/7]",1L,7L)));
    }
   }
  private <K,V>void verify(  final List<ProducerRecord<K,V>> results,  final List<KeyValueTimestamp<K,V>> expectedResults){
    if (results.size() != expectedResults.size()) {
      throw new AssertionError(printRecords(results) + " != " + expectedResults);
    }
    final Iterator<KeyValueTimestamp<K,V>> expectedIterator=expectedResults.iterator();
    for (    final ProducerRecord<K,V> result : results) {
      final KeyValueTimestamp<K,V> expected=expectedIterator.next();
      try {
        OutputVerifier.compareKeyValueTimestamp(result,expected.key(),expected.value(),expected.timestamp());
      }
 catch (      final AssertionError e) {
        throw new AssertionError(printRecords(results) + " != " + expectedResults,e);
      }
    }
  }
  private <K,V>List<ProducerRecord<K,V>> drainProducerRecords(  final TopologyTestDriver driver,  final String topic,  final Deserializer<K> keyDeserializer,  final Deserializer<V> valueDeserializer){
    final List<ProducerRecord<K,V>> result=new LinkedList<>();
    for (ProducerRecord<K,V> next=driver.readOutput(topic,keyDeserializer,valueDeserializer); next != null; next=driver.readOutput(topic,keyDeserializer,valueDeserializer)) {
      result.add(next);
    }
    return new ArrayList<>(result);
  }
  private <K,V>String printRecords(  final List<ProducerRecord<K,V>> result){
    final StringBuilder resultStr=new StringBuilder();
    resultStr.append("[\n");
    for (    final ProducerRecord<?,?> record : result) {
      resultStr.append("  ").append(record.toString()).append("\n");
    }
    resultStr.append("]");
    return resultStr.toString();
  }
}
