public class WindowsTest {
private class TestWindows extends Windows {
    @Override public Map windowsFor(    final long timestamp){
      return null;
    }
    @Override public long size(){
      return 0;
    }
    public long gracePeriodMs(){
      return 0L;
    }
  }
  @SuppressWarnings("deprecation") @Test public void shouldSetWindowRetentionTime(){
    final int anyNotNegativeRetentionTime=42;
    assertEquals(anyNotNegativeRetentionTime,new TestWindows().until(anyNotNegativeRetentionTime).maintainMs());
  }
  @SuppressWarnings("deprecation") @Test(expected=IllegalArgumentException.class) public void numberOfSegmentsMustBeAtLeastTwo(){
    new TestWindows().segments(1);
  }
  @SuppressWarnings("deprecation") @Test(expected=IllegalArgumentException.class) public void retentionTimeMustNotBeNegative(){
    new TestWindows().until(-1);
  }
}
