public class InternalTopicConfigTest {
  @Test(expected=NullPointerException.class) public void shouldThrowIfNameIsNull(){
    new RepartitionTopicConfig(null,Collections.<String,String>emptyMap());
  }
  @Test(expected=InvalidTopicException.class) public void shouldThrowIfNameIsInvalid(){
    new RepartitionTopicConfig("foo bar baz",Collections.<String,String>emptyMap());
  }
  @Test public void shouldAugmentRetentionMsWithWindowedChangelog(){
    final WindowedChangelogTopicConfig topicConfig=new WindowedChangelogTopicConfig("name",Collections.<String,String>emptyMap());
    topicConfig.setRetentionMs(10);
    assertEquals("30",topicConfig.getProperties(Collections.<String,String>emptyMap(),20).get(TopicConfig.RETENTION_MS_CONFIG));
  }
  @Test public void shouldUseSuppliedConfigs(){
    final Map<String,String> configs=new HashMap<>();
    configs.put("retention.ms","1000");
    configs.put("retention.bytes","10000");
    final UnwindowedChangelogTopicConfig topicConfig=new UnwindowedChangelogTopicConfig("name",configs);
    final Map<String,String> properties=topicConfig.getProperties(Collections.<String,String>emptyMap(),0);
    assertEquals("1000",properties.get("retention.ms"));
    assertEquals("10000",properties.get("retention.bytes"));
  }
  @Test public void shouldUseSuppliedConfigsForRepartitionConfig(){
    final Map<String,String> configs=new HashMap<>();
    configs.put("retention.ms","1000");
    final RepartitionTopicConfig topicConfig=new RepartitionTopicConfig("name",configs);
    assertEquals("1000",topicConfig.getProperties(Collections.<String,String>emptyMap(),0).get(TopicConfig.RETENTION_MS_CONFIG));
  }
}
