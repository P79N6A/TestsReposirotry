/** 
 * Tests that transformations' configs can be composed with ConnectorConfig during its construction, ensuring no conflicting fields or other issues. This test appears here simply because it requires both connect-runtime and connect-transforms and connect-runtime already depends on connect-transforms.
 */
public class TransformationConfigTest {
  @Test public void testEmbeddedConfigCast(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",Cast.Value.class.getName());
    connProps.put("transforms.example.spec","int8");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigExtractField(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",ExtractField.Value.class.getName());
    connProps.put("transforms.example.field","field");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigFlatten(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",Flatten.Value.class.getName());
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigHoistField(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",HoistField.Value.class.getName());
    connProps.put("transforms.example.field","field");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigInsertField(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",InsertField.Value.class.getName());
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigMaskField(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",MaskField.Value.class.getName());
    connProps.put("transforms.example.fields","field");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigRegexRouter(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",RegexRouter.class.getName());
    connProps.put("transforms.example.regex","(.*)");
    connProps.put("transforms.example.replacement","prefix-$1");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigReplaceField(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",ReplaceField.Value.class.getName());
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigSetSchemaMetadata(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",SetSchemaMetadata.Value.class.getName());
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigTimestampConverter(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",TimestampConverter.Value.class.getName());
    connProps.put("transforms.example.target.type","unix");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigTimestampRouter(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",TimestampRouter.class.getName());
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
  @Test public void testEmbeddedConfigValueToKey(){
    HashMap<String,String> connProps=new HashMap<>();
    connProps.put("name","foo");
    connProps.put("connector.class",MockConnector.class.getName());
    connProps.put("transforms","example");
    connProps.put("transforms.example.type",ValueToKey.class.getName());
    connProps.put("transforms.example.fields","field");
    Plugins plugins=null;
    new ConnectorConfig(plugins,connProps);
  }
}
