public class KStreamPeekTest {
  private final String topicName="topic";
  private final ConsumerRecordFactory<Integer,String> recordFactory=new ConsumerRecordFactory<>(new IntegerSerializer(),new StringSerializer());
  private final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.Integer(),Serdes.String());
  @Test public void shouldObserveStreamElements(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    final List<KeyValue<Integer,String>> peekObserved=new ArrayList<>(), streamObserved=new ArrayList<>();
    stream.peek(collect(peekObserved)).foreach(collect(streamObserved));
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      final List<KeyValue<Integer,String>> expected=new ArrayList<>();
      for (int key=0; key < 32; key++) {
        final String value="V" + key;
        driver.pipeInput(recordFactory.create(topicName,key,value));
        expected.add(new KeyValue<>(key,value));
      }
      assertEquals(expected,peekObserved);
      assertEquals(expected,streamObserved);
    }
   }
  @Test public void shouldNotAllowNullAction(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
    try {
      stream.peek(null);
      fail("expected null action to throw NPE");
    }
 catch (    final NullPointerException expected) {
    }
  }
  private static <K,V>ForeachAction<K,V> collect(  final List<KeyValue<K,V>> into){
    return new ForeachAction<K,V>(){
      @Override public void apply(      final K key,      final V value){
        into.add(new KeyValue<>(key,value));
      }
    }
;
  }
}
