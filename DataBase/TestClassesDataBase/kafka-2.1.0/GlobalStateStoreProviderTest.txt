public class GlobalStateStoreProviderTest {
  @Test public void shouldReturnSingleItemListIfStoreExists(){
    final GlobalStateStoreProvider provider=new GlobalStateStoreProvider(Collections.<String,StateStore>singletonMap("global",new NoOpReadOnlyStore<>()));
    final List<ReadOnlyKeyValueStore<Object,Object>> stores=provider.stores("global",QueryableStoreTypes.keyValueStore());
    assertEquals(stores.size(),1);
  }
  @Test public void shouldReturnEmptyItemListIfStoreDoesntExist(){
    final GlobalStateStoreProvider provider=new GlobalStateStoreProvider(Collections.<String,StateStore>emptyMap());
    final List<ReadOnlyKeyValueStore<Object,Object>> stores=provider.stores("global",QueryableStoreTypes.keyValueStore());
    assertTrue(stores.isEmpty());
  }
  @Test(expected=InvalidStateStoreException.class) public void shouldThrowExceptionIfStoreIsntOpen(){
    final NoOpReadOnlyStore<Object,Object> store=new NoOpReadOnlyStore<>();
    store.close();
    final GlobalStateStoreProvider provider=new GlobalStateStoreProvider(Collections.<String,StateStore>singletonMap("global",store));
    provider.stores("global",QueryableStoreTypes.keyValueStore());
  }
}
