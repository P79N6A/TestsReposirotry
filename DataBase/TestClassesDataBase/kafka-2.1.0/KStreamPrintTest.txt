public class KStreamPrintTest {
  private ByteArrayOutputStream byteOutStream;
  private KeyValueMapper<Integer,String,String> mapper;
  private KStreamPrint kStreamPrint;
  private Processor printProcessor;
  @Before public void setUp() throws Exception {
    byteOutStream=new ByteArrayOutputStream();
    mapper=new KeyValueMapper<Integer,String,String>(){
      @Override public String apply(      final Integer key,      final String value){
        return String.format("%d, %s",key,value);
      }
    }
;
    kStreamPrint=new KStreamPrint<>(new PrintForeachAction<>(byteOutStream,mapper,"test-stream"));
    printProcessor=kStreamPrint.get();
    final ProcessorContext processorContext=EasyMock.createNiceMock(ProcessorContext.class);
    EasyMock.replay(processorContext);
    printProcessor.init(processorContext);
  }
  @Test @SuppressWarnings("unchecked") public void testPrintStreamWithProvidedKeyValueMapper(){
    final List<KeyValue<Integer,String>> inputRecords=Arrays.asList(new KeyValue<>(0,"zero"),new KeyValue<>(1,"one"),new KeyValue<>(2,"two"),new KeyValue<>(3,"three"));
    final String[] expectedResult={"[test-stream]: 0, zero","[test-stream]: 1, one","[test-stream]: 2, two","[test-stream]: 3, three"};
    doTest(inputRecords,expectedResult);
  }
  private void assertFlushData(  final String[] expectedResult,  final ByteArrayOutputStream byteOutStream){
    final String[] flushOutDatas=new String(byteOutStream.toByteArray(),Charset.forName("UTF-8")).split("\\r*\\n");
    for (int i=0; i < flushOutDatas.length; i++) {
      assertEquals(expectedResult[i],flushOutDatas[i]);
    }
  }
  @SuppressWarnings("unchecked") private <K,V>void doTest(  final List<KeyValue<K,V>> inputRecords,  final String[] expectedResult){
    for (    final KeyValue<K,V> record : inputRecords) {
      printProcessor.process(record.key,record.value);
    }
    printProcessor.close();
    assertFlushData(expectedResult,byteOutStream);
  }
}
