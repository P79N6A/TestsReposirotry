public class ScramCredentialUtilsTest {
  private ScramFormatter formatter;
  @Before public void setUp() throws NoSuchAlgorithmException {
    formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);
  }
  @Test public void stringConversion(){
    ScramCredential credential=formatter.generateCredential("password",1024);
    assertTrue("Salt must not be empty",credential.salt().length > 0);
    assertTrue("Stored key must not be empty",credential.storedKey().length > 0);
    assertTrue("Server key must not be empty",credential.serverKey().length > 0);
    ScramCredential credential2=ScramCredentialUtils.credentialFromString(ScramCredentialUtils.credentialToString(credential));
    assertArrayEquals(credential.salt(),credential2.salt());
    assertArrayEquals(credential.storedKey(),credential2.storedKey());
    assertArrayEquals(credential.serverKey(),credential2.serverKey());
    assertEquals(credential.iterations(),credential2.iterations());
  }
  @Test public void generateCredential(){
    ScramCredential credential1=formatter.generateCredential("password",4096);
    ScramCredential credential2=formatter.generateCredential("password",4096);
    assertNotEquals(ScramCredentialUtils.credentialToString(credential1),ScramCredentialUtils.credentialToString(credential2));
  }
  @Test(expected=IllegalArgumentException.class) public void invalidCredential(){
    ScramCredentialUtils.credentialFromString("abc");
  }
  @Test(expected=IllegalArgumentException.class) public void missingFields(){
    String cred=ScramCredentialUtils.credentialToString(formatter.generateCredential("password",2048));
    ScramCredentialUtils.credentialFromString(cred.substring(cred.indexOf(',')));
  }
  @Test(expected=IllegalArgumentException.class) public void extraneousFields(){
    String cred=ScramCredentialUtils.credentialToString(formatter.generateCredential("password",2048));
    ScramCredentialUtils.credentialFromString(cred + ",a=test");
  }
  @Test public void scramCredentialCache() throws Exception {
    CredentialCache cache=new CredentialCache();
    ScramCredentialUtils.createCache(cache,Arrays.asList("SCRAM-SHA-512","PLAIN"));
    assertNotNull("Cache not created for enabled mechanism",cache.cache(ScramMechanism.SCRAM_SHA_512.mechanismName(),ScramCredential.class));
    assertNull("Cache created for disabled mechanism",cache.cache(ScramMechanism.SCRAM_SHA_256.mechanismName(),ScramCredential.class));
    CredentialCache.Cache<ScramCredential> sha512Cache=cache.cache(ScramMechanism.SCRAM_SHA_512.mechanismName(),ScramCredential.class);
    ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_512);
    ScramCredential credentialA=formatter.generateCredential("password",4096);
    sha512Cache.put("userA",credentialA);
    assertEquals(credentialA,sha512Cache.get("userA"));
    assertNull("Invalid user credential",sha512Cache.get("userB"));
  }
}
