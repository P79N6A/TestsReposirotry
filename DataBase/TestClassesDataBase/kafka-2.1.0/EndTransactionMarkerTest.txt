public class EndTransactionMarkerTest {
  @Test(expected=IllegalArgumentException.class) public void testUnknownControlTypeNotAllowed(){
    new EndTransactionMarker(ControlRecordType.UNKNOWN,24);
  }
  @Test(expected=IllegalArgumentException.class) public void testCannotDeserializeUnknownControlType(){
    EndTransactionMarker.deserializeValue(ControlRecordType.UNKNOWN,ByteBuffer.wrap(new byte[0]));
  }
  @Test(expected=InvalidRecordException.class) public void testIllegalNegativeVersion(){
    ByteBuffer buffer=ByteBuffer.allocate(2);
    buffer.putShort((short)-1);
    buffer.flip();
    EndTransactionMarker.deserializeValue(ControlRecordType.ABORT,buffer);
  }
  @Test(expected=InvalidRecordException.class) public void testNotEnoughBytes(){
    EndTransactionMarker.deserializeValue(ControlRecordType.COMMIT,ByteBuffer.wrap(new byte[0]));
  }
  @Test public void testSerde(){
    int coordinatorEpoch=79;
    EndTransactionMarker marker=new EndTransactionMarker(ControlRecordType.COMMIT,coordinatorEpoch);
    ByteBuffer buffer=marker.serializeValue();
    EndTransactionMarker deserialized=EndTransactionMarker.deserializeValue(ControlRecordType.COMMIT,buffer);
    assertEquals(coordinatorEpoch,deserialized.coordinatorEpoch());
  }
  @Test public void testDeserializeNewerVersion(){
    int coordinatorEpoch=79;
    ByteBuffer buffer=ByteBuffer.allocate(8);
    buffer.putShort((short)5);
    buffer.putInt(coordinatorEpoch);
    buffer.putShort((short)0);
    buffer.flip();
    EndTransactionMarker deserialized=EndTransactionMarker.deserializeValue(ControlRecordType.COMMIT,buffer);
    assertEquals(coordinatorEpoch,deserialized.coordinatorEpoch());
  }
}
