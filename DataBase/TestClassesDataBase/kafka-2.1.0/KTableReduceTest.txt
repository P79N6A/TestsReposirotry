public class KTableReduceTest {
  @Test public void shouldAddAndSubtract(){
    final AbstractProcessorContext context=new InternalMockProcessorContext();
    final Processor<String,Change<Set<String>>> reduceProcessor=new KTableReduce<String,Set<String>>("myStore",this::unionNotNullArgs,this::differenceNotNullArgs).get();
    final InMemoryKeyValueStore<String,Set<String>> myStore=new InMemoryKeyValueStore<>("myStore",null,null);
    context.register(myStore,null);
    reduceProcessor.init(context);
    context.setCurrentNode(new ProcessorNode<>("reduce",reduceProcessor,singleton("myStore")));
    reduceProcessor.process("A",new Change<>(singleton("a"),null));
    assertEquals(singleton("a"),myStore.get("A"));
    reduceProcessor.process("A",new Change<>(singleton("b"),singleton("a")));
    assertEquals(singleton("b"),myStore.get("A"));
    reduceProcessor.process("A",new Change<>(null,singleton("b")));
    assertEquals(emptySet(),myStore.get("A"));
  }
  private Set<String> differenceNotNullArgs(  final Set<String> left,  final Set<String> right){
    assertNotNull(left);
    assertNotNull(right);
    final HashSet<String> strings=new HashSet<>(left);
    strings.removeAll(right);
    return strings;
  }
  private Set<String> unionNotNullArgs(  final Set<String> left,  final Set<String> right){
    assertNotNull(left);
    assertNotNull(right);
    final HashSet<String> strings=new HashSet<>();
    strings.addAll(left);
    strings.addAll(right);
    return strings;
  }
}
