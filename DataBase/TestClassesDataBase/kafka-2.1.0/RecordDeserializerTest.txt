public class RecordDeserializerTest {
  private final RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader("key","value".getBytes())});
  private final ConsumerRecord<byte[],byte[]> rawRecord=new ConsumerRecord<>("topic",1,1,10,TimestampType.LOG_APPEND_TIME,5L,3,5,new byte[0],new byte[0],headers);
  @SuppressWarnings("deprecation") @Test public void shouldReturnConsumerRecordWithDeserializedValueWhenNoExceptions(){
    final RecordDeserializer recordDeserializer=new RecordDeserializer(new TheSourceNode(false,false,"key","value"),null,new LogContext(),new Metrics().sensor("skipped-records"));
    final ConsumerRecord<Object,Object> record=recordDeserializer.deserialize(null,rawRecord);
    assertEquals(rawRecord.topic(),record.topic());
    assertEquals(rawRecord.partition(),record.partition());
    assertEquals(rawRecord.offset(),record.offset());
    assertEquals(rawRecord.checksum(),record.checksum());
    assertEquals("key",record.key());
    assertEquals("value",record.value());
    assertEquals(rawRecord.timestamp(),record.timestamp());
    assertEquals(TimestampType.CREATE_TIME,record.timestampType());
    assertEquals(rawRecord.headers(),record.headers());
  }
static class TheSourceNode extends SourceNode<Object,Object> {
    private final boolean keyThrowsException;
    private final boolean valueThrowsException;
    private final Object key;
    private final Object value;
    TheSourceNode(    final boolean keyThrowsException,    final boolean valueThrowsException,    final Object key,    final Object value){
      super("",Collections.<String>emptyList(),null,null);
      this.keyThrowsException=keyThrowsException;
      this.valueThrowsException=valueThrowsException;
      this.key=key;
      this.value=value;
    }
    @Override public Object deserializeKey(    final String topic,    final Headers headers,    final byte[] data){
      if (keyThrowsException) {
        throw new RuntimeException();
      }
      return key;
    }
    @Override public Object deserializeValue(    final String topic,    final Headers headers,    final byte[] data){
      if (valueThrowsException) {
        throw new RuntimeException();
      }
      return value;
    }
  }
}
