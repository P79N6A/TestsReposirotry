public class ReplaceFieldTest {
  private ReplaceField<SinkRecord> xform=new ReplaceField.Value<>();
  @After public void teardown(){
    xform.close();
  }
  @Test public void schemaless(){
    final Map<String,String> props=new HashMap<>();
    props.put("blacklist","dont");
    props.put("renames","abc:xyz,foo:bar");
    xform.configure(props);
    final Map<String,Object> value=new HashMap<>();
    value.put("dont","whatever");
    value.put("abc",42);
    value.put("foo",true);
    value.put("etc","etc");
    final SinkRecord record=new SinkRecord("test",0,null,null,null,value,0);
    final SinkRecord transformedRecord=xform.apply(record);
    final Map updatedValue=(Map)transformedRecord.value();
    assertEquals(3,updatedValue.size());
    assertEquals(42,updatedValue.get("xyz"));
    assertEquals(true,updatedValue.get("bar"));
    assertEquals("etc",updatedValue.get("etc"));
  }
  @Test public void withSchema(){
    final Map<String,String> props=new HashMap<>();
    props.put("whitelist","abc,foo");
    props.put("renames","abc:xyz,foo:bar");
    xform.configure(props);
    final Schema schema=SchemaBuilder.struct().field("dont",Schema.STRING_SCHEMA).field("abc",Schema.INT32_SCHEMA).field("foo",Schema.BOOLEAN_SCHEMA).field("etc",Schema.STRING_SCHEMA).build();
    final Struct value=new Struct(schema);
    value.put("dont","whatever");
    value.put("abc",42);
    value.put("foo",true);
    value.put("etc","etc");
    final SinkRecord record=new SinkRecord("test",0,null,null,schema,value,0);
    final SinkRecord transformedRecord=xform.apply(record);
    final Struct updatedValue=(Struct)transformedRecord.value();
    assertEquals(2,updatedValue.schema().fields().size());
    assertEquals(new Integer(42),updatedValue.getInt32("xyz"));
    assertEquals(true,updatedValue.getBoolean("bar"));
  }
}
