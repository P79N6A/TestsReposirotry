public class RequestContextTest {
  @Test public void testSerdeUnsupportedApiVersionRequest() throws Exception {
    int correlationId=23423;
    RequestHeader header=new RequestHeader(ApiKeys.API_VERSIONS,Short.MAX_VALUE,"",correlationId);
    RequestContext context=new RequestContext(header,"0",InetAddress.getLocalHost(),KafkaPrincipal.ANONYMOUS,new ListenerName("ssl"),SecurityProtocol.SASL_SSL);
    assertEquals(0,context.apiVersion());
    ByteBuffer requestBuffer=ByteBuffer.allocate(8);
    requestBuffer.putInt(3709234);
    requestBuffer.putInt(29034);
    requestBuffer.flip();
    RequestAndSize requestAndSize=context.parseRequest(requestBuffer);
    assertTrue(requestAndSize.request instanceof ApiVersionsRequest);
    ApiVersionsRequest request=(ApiVersionsRequest)requestAndSize.request;
    assertTrue(request.hasUnsupportedRequestVersion());
    Send send=context.buildResponse(new ApiVersionsResponse(0,Errors.UNSUPPORTED_VERSION,Collections.<ApiVersionsResponse.ApiVersion>emptyList()));
    ByteBufferChannel channel=new ByteBufferChannel(256);
    send.writeTo(channel);
    ByteBuffer responseBuffer=channel.buffer();
    responseBuffer.flip();
    responseBuffer.getInt();
    ResponseHeader responseHeader=ResponseHeader.parse(responseBuffer);
    assertEquals(correlationId,responseHeader.correlationId());
    Struct struct=ApiKeys.API_VERSIONS.parseResponse((short)0,responseBuffer);
    ApiVersionsResponse response=(ApiVersionsResponse)AbstractResponse.parseResponse(ApiKeys.API_VERSIONS,struct);
    assertEquals(Errors.UNSUPPORTED_VERSION,response.error());
    assertTrue(response.apiVersions().isEmpty());
  }
}
