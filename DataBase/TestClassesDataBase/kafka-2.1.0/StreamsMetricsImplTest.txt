public class StreamsMetricsImplTest {
  @Test(expected=NullPointerException.class) public void testNullMetrics(){
    new StreamsMetricsImpl(null,"");
  }
  @Test(expected=NullPointerException.class) public void testRemoveNullSensor(){
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(new Metrics(),"");
    streamsMetrics.removeSensor(null);
  }
  @Test public void testRemoveSensor(){
    final String sensorName="sensor1";
    final String scope="scope";
    final String entity="entity";
    final String operation="put";
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(new Metrics(),"");
    final Sensor sensor1=streamsMetrics.addSensor(sensorName,Sensor.RecordingLevel.DEBUG);
    streamsMetrics.removeSensor(sensor1);
    final Sensor sensor1a=streamsMetrics.addSensor(sensorName,Sensor.RecordingLevel.DEBUG,sensor1);
    streamsMetrics.removeSensor(sensor1a);
    final Sensor sensor2=streamsMetrics.addLatencyAndThroughputSensor(scope,entity,operation,Sensor.RecordingLevel.DEBUG);
    streamsMetrics.removeSensor(sensor2);
    final Sensor sensor3=streamsMetrics.addThroughputSensor(scope,entity,operation,Sensor.RecordingLevel.DEBUG);
    streamsMetrics.removeSensor(sensor3);
  }
  @Test public void testLatencyMetrics(){
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(new Metrics(),"");
    final int defaultMetrics=streamsMetrics.metrics().size();
    final String scope="scope";
    final String entity="entity";
    final String operation="put";
    final Sensor sensor1=streamsMetrics.addLatencyAndThroughputSensor(scope,entity,operation,Sensor.RecordingLevel.DEBUG);
    final int meterMetricsCount=2;
    final int otherMetricsCount=4;
    assertEquals(defaultMetrics + meterMetricsCount * 2 + otherMetricsCount,streamsMetrics.metrics().size());
    streamsMetrics.removeSensor(sensor1);
    assertEquals(defaultMetrics,streamsMetrics.metrics().size());
  }
  @Test public void testThroughputMetrics(){
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(new Metrics(),"");
    final int defaultMetrics=streamsMetrics.metrics().size();
    final String scope="scope";
    final String entity="entity";
    final String operation="put";
    final Sensor sensor1=streamsMetrics.addThroughputSensor(scope,entity,operation,Sensor.RecordingLevel.DEBUG);
    final int meterMetricsCount=2;
    assertEquals(defaultMetrics + meterMetricsCount * 2,streamsMetrics.metrics().size());
    streamsMetrics.removeSensor(sensor1);
    assertEquals(defaultMetrics,streamsMetrics.metrics().size());
  }
  @Test public void testTotalMetricDoesntDecrease(){
    final MockTime time=new MockTime(1);
    final MetricConfig config=new MetricConfig().timeWindow(1,TimeUnit.MILLISECONDS);
    final Metrics metrics=new Metrics(config,time);
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(metrics,"");
    final String scope="scope";
    final String entity="entity";
    final String operation="op";
    final Sensor sensor=streamsMetrics.addLatencyAndThroughputSensor(scope,entity,operation,Sensor.RecordingLevel.INFO);
    final double latency=100.0;
    final MetricName totalMetricName=metrics.metricName("op-total","stream-scope-metrics","","client-id","","scope-id","entity");
    final KafkaMetric totalMetric=metrics.metric(totalMetricName);
    for (int i=0; i < 10; i++) {
      assertEquals(i,Math.round(totalMetric.measurable().measure(config,time.milliseconds())));
      sensor.record(latency,time.milliseconds());
    }
  }
}
