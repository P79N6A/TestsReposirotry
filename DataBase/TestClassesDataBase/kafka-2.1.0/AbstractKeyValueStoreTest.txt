public abstract class AbstractKeyValueStoreTest {
  protected abstract <K,V>KeyValueStore<K,V> createKeyValueStore(  final ProcessorContext context);
  protected InternalMockProcessorContext context;
  protected KeyValueStore<Integer,String> store;
  protected KeyValueStoreTestDriver<Integer,String> driver;
  @Before public void before(){
    driver=KeyValueStoreTestDriver.create(Integer.class,String.class);
    context=(InternalMockProcessorContext)driver.context();
    context.setTime(10);
    store=createKeyValueStore(context);
  }
  @After public void after(){
    store.close();
    driver.clear();
  }
  private static Map<Integer,String> getContents(  final KeyValueIterator<Integer,String> iter){
    final HashMap<Integer,String> result=new HashMap<>();
    while (iter.hasNext()) {
      final KeyValue<Integer,String> entry=iter.next();
      result.put(entry.key,entry.value);
    }
    return result;
  }
  @Test public void shouldNotIncludeDeletedFromRangeResult(){
    store.close();
    final Serializer<String> serializer=new StringSerializer(){
      private int numCalls=0;
      @Override public byte[] serialize(      final String topic,      final String data){
        if (++numCalls > 3) {
          fail("Value serializer is called; it should never happen");
        }
        return super.serialize(topic,data);
      }
    }
;
    context.setValueSerde(Serdes.serdeFrom(serializer,new StringDeserializer()));
    store=createKeyValueStore(driver.context());
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.delete(0);
    store.delete(1);
    final Map<Integer,String> expectedContents=Collections.singletonMap(2,"two");
    assertEquals(expectedContents,getContents(store.all()));
  }
  @Test public void shouldDeleteIfSerializedValueIsNull(){
    store.close();
    final Serializer<String> serializer=new StringSerializer(){
      @Override public byte[] serialize(      final String topic,      final String data){
        if (data.equals("null")) {
          return null;
        }
        return super.serialize(topic,data);
      }
    }
;
    context.setValueSerde(Serdes.serdeFrom(serializer,new StringDeserializer()));
    store=createKeyValueStore(driver.context());
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.put(0,"null");
    store.put(1,"null");
    final Map<Integer,String> expectedContents=Collections.singletonMap(2,"two");
    assertEquals(expectedContents,getContents(store.all()));
  }
  @Test public void testPutGetRange(){
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.put(4,"four");
    store.put(5,"five");
    assertEquals(5,driver.sizeOf(store));
    assertEquals("zero",store.get(0));
    assertEquals("one",store.get(1));
    assertEquals("two",store.get(2));
    assertNull(store.get(3));
    assertEquals("four",store.get(4));
    assertEquals("five",store.get(5));
    store.delete(5);
    assertEquals(4,driver.sizeOf(store));
    store.flush();
    assertEquals("zero",driver.flushedEntryStored(0));
    assertEquals("one",driver.flushedEntryStored(1));
    assertEquals("two",driver.flushedEntryStored(2));
    assertEquals("four",driver.flushedEntryStored(4));
    assertEquals(null,driver.flushedEntryStored(5));
    assertEquals(false,driver.flushedEntryRemoved(0));
    assertEquals(false,driver.flushedEntryRemoved(1));
    assertEquals(false,driver.flushedEntryRemoved(2));
    assertEquals(false,driver.flushedEntryRemoved(4));
    assertEquals(true,driver.flushedEntryRemoved(5));
    final HashMap<Integer,String> expectedContents=new HashMap<>();
    expectedContents.put(2,"two");
    expectedContents.put(4,"four");
    assertEquals(expectedContents,getContents(store.range(2,4)));
    assertEquals(expectedContents,getContents(store.range(2,6)));
    expectedContents.put(0,"zero");
    expectedContents.put(1,"one");
    assertEquals(expectedContents,getContents(store.all()));
  }
  @Test public void testPutGetRangeWithDefaultSerdes(){
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.put(4,"four");
    store.put(5,"five");
    assertEquals(5,driver.sizeOf(store));
    assertEquals("zero",store.get(0));
    assertEquals("one",store.get(1));
    assertEquals("two",store.get(2));
    assertNull(store.get(3));
    assertEquals("four",store.get(4));
    assertEquals("five",store.get(5));
    store.delete(5);
    store.flush();
    assertEquals("zero",driver.flushedEntryStored(0));
    assertEquals("one",driver.flushedEntryStored(1));
    assertEquals("two",driver.flushedEntryStored(2));
    assertEquals("four",driver.flushedEntryStored(4));
    assertEquals(null,driver.flushedEntryStored(5));
    assertEquals(false,driver.flushedEntryRemoved(0));
    assertEquals(false,driver.flushedEntryRemoved(1));
    assertEquals(false,driver.flushedEntryRemoved(2));
    assertEquals(false,driver.flushedEntryRemoved(4));
    assertEquals(true,driver.flushedEntryRemoved(5));
  }
  @Test public void testRestore(){
    store.close();
    driver.addEntryToRestoreLog(0,"zero");
    driver.addEntryToRestoreLog(1,"one");
    driver.addEntryToRestoreLog(2,"two");
    driver.addEntryToRestoreLog(3,"three");
    store=createKeyValueStore(driver.context());
    context.restore(store.name(),driver.restoredEntries());
    assertEquals(0,driver.checkForRestoredEntries(store));
    assertEquals(4,driver.sizeOf(store));
  }
  @Test public void testRestoreWithDefaultSerdes(){
    store.close();
    driver.addEntryToRestoreLog(0,"zero");
    driver.addEntryToRestoreLog(1,"one");
    driver.addEntryToRestoreLog(2,"two");
    driver.addEntryToRestoreLog(3,"three");
    store=createKeyValueStore(driver.context());
    context.restore(store.name(),driver.restoredEntries());
    assertEquals(0,driver.checkForRestoredEntries(store));
    assertEquals(4,driver.sizeOf(store));
  }
  @Test public void testPutIfAbsent(){
    assertNull(store.putIfAbsent(0,"zero"));
    assertNull(store.putIfAbsent(1,"one"));
    assertNull(store.putIfAbsent(2,"two"));
    assertNull(store.putIfAbsent(4,"four"));
    assertEquals("four",store.putIfAbsent(4,"unexpected value"));
    assertEquals(4,driver.sizeOf(store));
    assertEquals("zero",store.get(0));
    assertEquals("one",store.get(1));
    assertEquals("two",store.get(2));
    assertNull(store.get(3));
    assertEquals("four",store.get(4));
    store.flush();
    assertEquals("zero",driver.flushedEntryStored(0));
    assertEquals("one",driver.flushedEntryStored(1));
    assertEquals("two",driver.flushedEntryStored(2));
    assertEquals("four",driver.flushedEntryStored(4));
    assertEquals(false,driver.flushedEntryRemoved(0));
    assertEquals(false,driver.flushedEntryRemoved(1));
    assertEquals(false,driver.flushedEntryRemoved(2));
    assertEquals(false,driver.flushedEntryRemoved(4));
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnPutNullKey(){
    store.put(null,"anyValue");
  }
  @Test public void shouldNotThrowNullPointerExceptionOnPutNullValue(){
    store.put(1,null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnPutIfAbsentNullKey(){
    store.putIfAbsent(null,"anyValue");
  }
  @Test public void shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue(){
    store.putIfAbsent(1,null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnPutAllNullKey(){
    store.putAll(Collections.singletonList(new KeyValue<Integer,String>(null,"anyValue")));
  }
  @Test public void shouldNotThrowNullPointerExceptionOnPutAllNullKey(){
    store.putAll(Collections.singletonList(new KeyValue<Integer,String>(1,null)));
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnDeleteNullKey(){
    store.delete(null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnGetNullKey(){
    store.get(null);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnRangeNullFromKey(){
    store.range(null,2);
  }
  @Test(expected=NullPointerException.class) public void shouldThrowNullPointerExceptionOnRangeNullToKey(){
    store.range(2,null);
  }
  @Test public void testSize(){
    assertEquals("A newly created store should have no entries",0,store.approximateNumEntries());
    store.put(0,"zero");
    store.put(1,"one");
    store.put(2,"two");
    store.put(4,"four");
    store.put(5,"five");
    store.flush();
    assertEquals(5,store.approximateNumEntries());
  }
  @Test public void shouldPutAll(){
    final List<KeyValue<Integer,String>> entries=new ArrayList<>();
    entries.add(new KeyValue<>(1,"one"));
    entries.add(new KeyValue<>(2,"two"));
    store.putAll(entries);
    final List<KeyValue<Integer,String>> allReturned=new ArrayList<>();
    final List<KeyValue<Integer,String>> expectedReturned=Arrays.asList(KeyValue.pair(1,"one"),KeyValue.pair(2,"two"));
    final Iterator<KeyValue<Integer,String>> iterator=store.all();
    while (iterator.hasNext()) {
      allReturned.add(iterator.next());
    }
    assertThat(allReturned,equalTo(expectedReturned));
  }
  @Test public void shouldDeleteFromStore(){
    store.put(1,"one");
    store.put(2,"two");
    store.delete(2);
    assertNull(store.get(2));
  }
}
