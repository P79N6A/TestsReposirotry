public class SubscriptionStateTest {
  private final SubscriptionState state=new SubscriptionState(OffsetResetStrategy.EARLIEST);
  private final String topic="test";
  private final String topic1="test1";
  private final TopicPartition tp0=new TopicPartition(topic,0);
  private final TopicPartition tp1=new TopicPartition(topic,1);
  private final TopicPartition t1p0=new TopicPartition(topic1,0);
  private final MockRebalanceListener rebalanceListener=new MockRebalanceListener();
  @Test public void partitionAssignment(){
    state.assignFromUser(singleton(tp0));
    assertEquals(singleton(tp0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    assertFalse(state.hasAllFetchPositions());
    state.seek(tp0,1);
    assertTrue(state.isFetchable(tp0));
    assertEquals(1L,state.position(tp0).longValue());
    state.assignFromUser(Collections.<TopicPartition>emptySet());
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    assertFalse(state.isAssigned(tp0));
    assertFalse(state.isFetchable(tp0));
  }
  @Test public void partitionAssignmentChangeOnTopicSubscription(){
    state.assignFromUser(new HashSet<>(Arrays.asList(tp0,tp1)));
    assertEquals(2,state.assignedPartitions().size());
    assertEquals(2,state.numAssignedPartitions());
    assertTrue(state.assignedPartitions().contains(tp0));
    assertTrue(state.assignedPartitions().contains(tp1));
    state.unsubscribe();
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    state.subscribe(singleton(topic1),rebalanceListener);
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    state.assignFromSubscribed(singleton(t1p0));
    assertEquals(singleton(t1p0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.subscribe(singleton(topic),rebalanceListener);
    assertEquals(singleton(t1p0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.unsubscribe();
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
  }
  @Test public void partitionAssignmentChangeOnPatternSubscription(){
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    state.subscribeFromPattern(new HashSet<>(Collections.singletonList(topic)));
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    state.assignFromSubscribed(singleton(tp1));
    assertEquals(singleton(tp1),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    assertEquals(singleton(topic),state.subscription());
    state.assignFromSubscribed(Collections.singletonList(t1p0));
    assertEquals(singleton(t1p0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    assertEquals(singleton(topic),state.subscription());
    state.subscribe(Pattern.compile(".*t"),rebalanceListener);
    assertEquals(singleton(t1p0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.subscribeFromPattern(singleton(topic));
    assertEquals(singleton(t1p0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.assignFromSubscribed(Collections.singletonList(tp0));
    assertEquals(singleton(tp0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    assertEquals(singleton(topic),state.subscription());
    state.unsubscribe();
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
  }
  @Test public void verifyAssignmentListener(){
    final AtomicReference<Set<TopicPartition>> assignmentRef=new AtomicReference<>();
    state.addListener(new SubscriptionState.Listener(){
      @Override public void onAssignment(      Set<TopicPartition> assignment){
        assignmentRef.set(assignment);
      }
    }
);
    Set<TopicPartition> userAssignment=Utils.mkSet(tp0,tp1);
    state.assignFromUser(userAssignment);
    assertEquals(userAssignment,assignmentRef.get());
    state.unsubscribe();
    assertEquals(Collections.emptySet(),assignmentRef.get());
    Set<TopicPartition> autoAssignment=Utils.mkSet(t1p0);
    state.subscribe(singleton(topic1),rebalanceListener);
    state.assignFromSubscribed(autoAssignment);
    assertEquals(autoAssignment,assignmentRef.get());
  }
  @Test public void partitionReset(){
    state.assignFromUser(singleton(tp0));
    state.seek(tp0,5);
    assertEquals(5L,(long)state.position(tp0));
    state.requestOffsetReset(tp0);
    assertFalse(state.isFetchable(tp0));
    assertTrue(state.isOffsetResetNeeded(tp0));
    assertEquals(null,state.position(tp0));
    state.seek(tp0,0);
    assertTrue(state.isFetchable(tp0));
    assertFalse(state.isOffsetResetNeeded(tp0));
  }
  @Test public void topicSubscription(){
    state.subscribe(singleton(topic),rebalanceListener);
    assertEquals(1,state.subscription().size());
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    assertTrue(state.partitionsAutoAssigned());
    state.assignFromSubscribed(singleton(tp0));
    state.seek(tp0,1);
    assertEquals(1L,state.position(tp0).longValue());
    state.assignFromSubscribed(singleton(tp1));
    assertTrue(state.isAssigned(tp1));
    assertFalse(state.isAssigned(tp0));
    assertFalse(state.isFetchable(tp1));
    assertEquals(singleton(tp1),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
  }
  @Test public void partitionPause(){
    state.assignFromUser(singleton(tp0));
    state.seek(tp0,100);
    assertTrue(state.isFetchable(tp0));
    state.pause(tp0);
    assertFalse(state.isFetchable(tp0));
    state.resume(tp0);
    assertTrue(state.isFetchable(tp0));
  }
  @Test(expected=IllegalStateException.class) public void invalidPositionUpdate(){
    state.subscribe(singleton(topic),rebalanceListener);
    state.assignFromSubscribed(singleton(tp0));
    state.position(tp0,0);
  }
  @Test(expected=IllegalArgumentException.class) public void cantAssignPartitionForUnsubscribedTopics(){
    state.subscribe(singleton(topic),rebalanceListener);
    state.assignFromSubscribed(Collections.singletonList(t1p0));
  }
  @Test(expected=IllegalArgumentException.class) public void cantAssignPartitionForUnmatchedPattern(){
    state.subscribe(Pattern.compile(".*t"),rebalanceListener);
    state.subscribeFromPattern(new HashSet<>(Collections.singletonList(topic)));
    state.assignFromSubscribed(Collections.singletonList(t1p0));
  }
  @Test(expected=IllegalStateException.class) public void cantChangePositionForNonAssignedPartition(){
    state.position(tp0,1);
  }
  @Test(expected=IllegalStateException.class) public void cantSubscribeTopicAndPattern(){
    state.subscribe(singleton(topic),rebalanceListener);
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
  }
  @Test(expected=IllegalStateException.class) public void cantSubscribePartitionAndPattern(){
    state.assignFromUser(singleton(tp0));
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
  }
  @Test(expected=IllegalStateException.class) public void cantSubscribePatternAndTopic(){
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
    state.subscribe(singleton(topic),rebalanceListener);
  }
  @Test(expected=IllegalStateException.class) public void cantSubscribePatternAndPartition(){
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
    state.assignFromUser(singleton(tp0));
  }
  @Test public void patternSubscription(){
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
    state.subscribeFromPattern(new HashSet<>(Arrays.asList(topic,topic1)));
    assertEquals("Expected subscribed topics count is incorrect",2,state.subscription().size());
  }
  @Test public void unsubscribeUserAssignment(){
    state.assignFromUser(new HashSet<>(Arrays.asList(tp0,tp1)));
    state.unsubscribe();
    state.subscribe(singleton(topic),rebalanceListener);
    assertEquals(singleton(topic),state.subscription());
  }
  @Test public void unsubscribeUserSubscribe(){
    state.subscribe(singleton(topic),rebalanceListener);
    state.unsubscribe();
    state.assignFromUser(singleton(tp0));
    assertEquals(singleton(tp0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
  }
  @Test public void unsubscription(){
    state.subscribe(Pattern.compile(".*"),rebalanceListener);
    state.subscribeFromPattern(new HashSet<>(Arrays.asList(topic,topic1)));
    state.assignFromSubscribed(singleton(tp1));
    assertEquals(singleton(tp1),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.unsubscribe();
    assertEquals(0,state.subscription().size());
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
    state.assignFromUser(singleton(tp0));
    assertEquals(singleton(tp0),state.assignedPartitions());
    assertEquals(1,state.numAssignedPartitions());
    state.unsubscribe();
    assertEquals(0,state.subscription().size());
    assertTrue(state.assignedPartitions().isEmpty());
    assertEquals(0,state.numAssignedPartitions());
  }
private static class MockRebalanceListener implements ConsumerRebalanceListener {
    public Collection<TopicPartition> revoked;
    public Collection<TopicPartition> assigned;
    public int revokedCount=0;
    public int assignedCount=0;
    @Override public void onPartitionsAssigned(    Collection<TopicPartition> partitions){
      this.assigned=partitions;
      assignedCount++;
    }
    @Override public void onPartitionsRevoked(    Collection<TopicPartition> partitions){
      this.revoked=partitions;
      revokedCount++;
    }
  }
}
