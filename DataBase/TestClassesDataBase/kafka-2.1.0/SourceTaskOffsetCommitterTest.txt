@RunWith(PowerMockRunner.class) public class SourceTaskOffsetCommitterTest extends ThreadedTest {
  private final ConcurrentHashMap committers=new ConcurrentHashMap<>();
  @Mock private ScheduledExecutorService executor;
  @Mock private Logger mockLog;
  @Mock private ScheduledFuture commitFuture;
  @Mock private ScheduledFuture taskFuture;
  @Mock private ConnectorTaskId taskId;
  @Mock private WorkerSourceTask task;
  private SourceTaskOffsetCommitter committer;
  private static final long DEFAULT_OFFSET_COMMIT_INTERVAL_MS=1000;
  @Override public void setup(){
    super.setup();
    Map<String,String> workerProps=new HashMap<>();
    workerProps.put("key.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("value.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.key.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.value.converter","org.apache.kafka.connect.json.JsonConverter");
    workerProps.put("internal.key.converter.schemas.enable","false");
    workerProps.put("internal.value.converter.schemas.enable","false");
    workerProps.put("offset.storage.file.filename","/tmp/connect.offsets");
    workerProps.put("offset.flush.interval.ms",Long.toString(DEFAULT_OFFSET_COMMIT_INTERVAL_MS));
    WorkerConfig config=new StandaloneConfig(workerProps);
    committer=new SourceTaskOffsetCommitter(config,executor,committers);
    Whitebox.setInternalState(SourceTaskOffsetCommitter.class,"log",mockLog);
  }
  @Test public void testSchedule(){
    Capture<Runnable> taskWrapper=EasyMock.newCapture();
    EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))).andReturn(commitFuture);
    PowerMock.replayAll();
    committer.schedule(taskId,task);
    assertTrue(taskWrapper.hasCaptured());
    assertNotNull(taskWrapper.getValue());
    assertEquals(singletonMap(taskId,commitFuture),committers);
    PowerMock.verifyAll();
  }
  @Test public void testClose() throws Exception {
    long timeoutMs=1000;
    executor.shutdown();
    PowerMock.expectLastCall();
    EasyMock.expect(executor.awaitTermination(eq(timeoutMs),eq(TimeUnit.MILLISECONDS))).andReturn(false);
    mockLog.error(EasyMock.anyString());
    PowerMock.expectLastCall();
    PowerMock.replayAll();
    committer.close(timeoutMs);
    PowerMock.verifyAll();
    PowerMock.resetAll();
    executor.shutdown();
    PowerMock.expectLastCall();
    EasyMock.expect(executor.awaitTermination(eq(timeoutMs),eq(TimeUnit.MILLISECONDS))).andThrow(new InterruptedException());
    PowerMock.replayAll();
    committer.close(timeoutMs);
    PowerMock.verifyAll();
  }
  @Test public void testRemove() throws Exception {
    PowerMock.replayAll();
    assertTrue(committers.isEmpty());
    committer.remove(taskId);
    assertTrue(committers.isEmpty());
    PowerMock.verifyAll();
    PowerMock.resetAll();
    EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);
    EasyMock.expect(taskFuture.isDone()).andReturn(false);
    EasyMock.expect(taskFuture.get()).andReturn(null);
    PowerMock.replayAll();
    committers.put(taskId,taskFuture);
    committer.remove(taskId);
    assertTrue(committers.isEmpty());
    PowerMock.verifyAll();
    PowerMock.resetAll();
    EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);
    EasyMock.expect(taskFuture.isDone()).andReturn(false);
    EasyMock.expect(taskFuture.get()).andThrow(new CancellationException());
    mockLog.trace(EasyMock.anyString(),EasyMock.<Object>anyObject());
    PowerMock.expectLastCall();
    PowerMock.replayAll();
    committers.put(taskId,taskFuture);
    committer.remove(taskId);
    assertTrue(committers.isEmpty());
    PowerMock.verifyAll();
    PowerMock.resetAll();
    EasyMock.expect(taskFuture.cancel(eq(false))).andReturn(false);
    EasyMock.expect(taskFuture.isDone()).andReturn(false);
    EasyMock.expect(taskFuture.get()).andThrow(new InterruptedException());
    PowerMock.replayAll();
    try {
      committers.put(taskId,taskFuture);
      committer.remove(taskId);
      fail("Expected ConnectException to be raised");
    }
 catch (    ConnectException e) {
    }
    PowerMock.verifyAll();
  }
}
