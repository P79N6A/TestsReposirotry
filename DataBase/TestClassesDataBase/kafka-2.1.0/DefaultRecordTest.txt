public class DefaultRecordTest {
  @Test public void testBasicSerde() throws IOException {
    Header[] headers=new Header[]{new RecordHeader("foo","value".getBytes()),new RecordHeader("bar",(byte[])null),new RecordHeader("\"A\\u00ea\\u00f1\\u00fcC\"","value".getBytes())};
    SimpleRecord[] records=new SimpleRecord[]{new SimpleRecord("hi".getBytes(),"there".getBytes()),new SimpleRecord(null,"there".getBytes()),new SimpleRecord("hi".getBytes(),null),new SimpleRecord(null,null),new SimpleRecord(15L,"hi".getBytes(),"there".getBytes(),headers)};
    for (    SimpleRecord record : records) {
      int baseSequence=723;
      long baseOffset=37;
      int offsetDelta=10;
      long baseTimestamp=System.currentTimeMillis();
      long timestampDelta=323;
      ByteBufferOutputStream out=new ByteBufferOutputStream(1024);
      DefaultRecord.writeTo(new DataOutputStream(out),offsetDelta,timestampDelta,record.key(),record.value(),record.headers());
      ByteBuffer buffer=out.buffer();
      buffer.flip();
      DefaultRecord logRecord=DefaultRecord.readFrom(buffer,baseOffset,baseTimestamp,baseSequence,null);
      assertNotNull(logRecord);
      assertEquals(baseOffset + offsetDelta,logRecord.offset());
      assertEquals(baseSequence + offsetDelta,logRecord.sequence());
      assertEquals(baseTimestamp + timestampDelta,logRecord.timestamp());
      assertEquals(record.key(),logRecord.key());
      assertEquals(record.value(),logRecord.value());
      assertArrayEquals(record.headers(),logRecord.headers());
      assertEquals(DefaultRecord.sizeInBytes(offsetDelta,timestampDelta,record.key(),record.value(),record.headers()),logRecord.sizeInBytes());
    }
  }
  @Test(expected=InvalidRecordException.class) public void testBasicSerdeInvalidHeaderCountTooHigh() throws IOException {
    Header[] headers=new Header[]{new RecordHeader("foo","value".getBytes()),new RecordHeader("bar",(byte[])null),new RecordHeader("\"A\\u00ea\\u00f1\\u00fcC\"","value".getBytes())};
    SimpleRecord record=new SimpleRecord(15L,"hi".getBytes(),"there".getBytes(),headers);
    int baseSequence=723;
    long baseOffset=37;
    int offsetDelta=10;
    long baseTimestamp=System.currentTimeMillis();
    long timestampDelta=323;
    ByteBufferOutputStream out=new ByteBufferOutputStream(1024);
    DefaultRecord.writeTo(new DataOutputStream(out),offsetDelta,timestampDelta,record.key(),record.value(),record.headers());
    ByteBuffer buffer=out.buffer();
    buffer.flip();
    buffer.put(14,(byte)8);
    DefaultRecord logRecord=DefaultRecord.readFrom(buffer,baseOffset,baseTimestamp,baseSequence,null);
    assertEquals(DefaultRecord.sizeInBytes(offsetDelta,timestampDelta,record.key(),record.value(),record.headers()),logRecord.sizeInBytes());
  }
  @Test(expected=InvalidRecordException.class) public void testBasicSerdeInvalidHeaderCountTooLow() throws IOException {
    Header[] headers=new Header[]{new RecordHeader("foo","value".getBytes()),new RecordHeader("bar",(byte[])null),new RecordHeader("\"A\\u00ea\\u00f1\\u00fcC\"","value".getBytes())};
    SimpleRecord record=new SimpleRecord(15L,"hi".getBytes(),"there".getBytes(),headers);
    int baseSequence=723;
    long baseOffset=37;
    int offsetDelta=10;
    long baseTimestamp=System.currentTimeMillis();
    long timestampDelta=323;
    ByteBufferOutputStream out=new ByteBufferOutputStream(1024);
    DefaultRecord.writeTo(new DataOutputStream(out),offsetDelta,timestampDelta,record.key(),record.value(),record.headers());
    ByteBuffer buffer=out.buffer();
    buffer.flip();
    buffer.put(14,(byte)4);
    DefaultRecord logRecord=DefaultRecord.readFrom(buffer,baseOffset,baseTimestamp,baseSequence,null);
    assertEquals(DefaultRecord.sizeInBytes(offsetDelta,timestampDelta,record.key(),record.value(),record.headers()),logRecord.sizeInBytes());
  }
  @Test(expected=InvalidRecordException.class) public void testInvalidKeySize(){
    byte attributes=0;
    long timestampDelta=2;
    int offsetDelta=1;
    int sizeOfBodyInBytes=100;
    int keySize=105;
    ByteBuffer buf=ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));
    ByteUtils.writeVarint(sizeOfBodyInBytes,buf);
    buf.put(attributes);
    ByteUtils.writeVarlong(timestampDelta,buf);
    ByteUtils.writeVarint(offsetDelta,buf);
    ByteUtils.writeVarint(keySize,buf);
    buf.position(buf.limit());
    buf.flip();
    DefaultRecord.readFrom(buf,0L,0L,RecordBatch.NO_SEQUENCE,null);
  }
  @Test(expected=InvalidRecordException.class) public void testInvalidValueSize() throws IOException {
    byte attributes=0;
    long timestampDelta=2;
    int offsetDelta=1;
    int sizeOfBodyInBytes=100;
    int valueSize=105;
    ByteBuffer buf=ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));
    ByteUtils.writeVarint(sizeOfBodyInBytes,buf);
    buf.put(attributes);
    ByteUtils.writeVarlong(timestampDelta,buf);
    ByteUtils.writeVarint(offsetDelta,buf);
    ByteUtils.writeVarint(-1,buf);
    ByteUtils.writeVarint(valueSize,buf);
    buf.position(buf.limit());
    buf.flip();
    DefaultRecord.readFrom(buf,0L,0L,RecordBatch.NO_SEQUENCE,null);
  }
  @Test(expected=InvalidRecordException.class) public void testUnderflowReadingTimestamp(){
    byte attributes=0;
    int sizeOfBodyInBytes=1;
    ByteBuffer buf=ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));
    ByteUtils.writeVarint(sizeOfBodyInBytes,buf);
    buf.put(attributes);
    buf.flip();
    DefaultRecord.readFrom(buf,0L,0L,RecordBatch.NO_SEQUENCE,null);
  }
  @Test(expected=InvalidRecordException.class) public void testUnderflowReadingVarlong(){
    byte attributes=0;
    int sizeOfBodyInBytes=2;
    ByteBuffer buf=ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes) + 1);
    ByteUtils.writeVarint(sizeOfBodyInBytes,buf);
    buf.put(attributes);
    ByteUtils.writeVarlong(156,buf);
    buf.position(buf.limit() - 1);
    buf.flip();
    DefaultRecord.readFrom(buf,0L,0L,RecordBatch.NO_SEQUENCE,null);
  }
  @Test(expected=InvalidRecordException.class) public void testInvalidVarlong(){
    byte attributes=0;
    int sizeOfBodyInBytes=11;
    ByteBuffer buf=ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes) + 1);
    ByteUtils.writeVarint(sizeOfBodyInBytes,buf);
    int recordStartPosition=buf.position();
    buf.put(attributes);
    ByteUtils.writeVarlong(Long.MAX_VALUE,buf);
    buf.put(recordStartPosition + 10,Byte.MIN_VALUE);
    buf.flip();
    DefaultRecord.readFrom(buf,0L,0L,RecordBatch.NO_SEQUENCE,null);
  }
  @Test public void testSerdeNoSequence() throws IOException {
    ByteBuffer key=ByteBuffer.wrap("hi".getBytes());
    ByteBuffer value=ByteBuffer.wrap("there".getBytes());
    long baseOffset=37;
    int offsetDelta=10;
    long baseTimestamp=System.currentTimeMillis();
    long timestampDelta=323;
    ByteBufferOutputStream out=new ByteBufferOutputStream(1024);
    DefaultRecord.writeTo(new DataOutputStream(out),offsetDelta,timestampDelta,key,value,new Header[0]);
    ByteBuffer buffer=out.buffer();
    buffer.flip();
    DefaultRecord record=DefaultRecord.readFrom(buffer,baseOffset,baseTimestamp,RecordBatch.NO_SEQUENCE,null);
    assertNotNull(record);
    assertEquals(RecordBatch.NO_SEQUENCE,record.sequence());
  }
}
