public class KerberosNameTest {
  @Test public void testParse() throws IOException {
    List<String> rules=Arrays.asList("RULE:[1:$1](App\\..*)s/App\\.(.*)/$1/g","RULE:[2:$1](App\\..*)s/App\\.(.*)/$1/g","DEFAULT");
    KerberosShortNamer shortNamer=KerberosShortNamer.fromUnparsedRules("REALM.COM",rules);
    KerberosName name=KerberosName.parse("App.service-name/example.com@REALM.COM");
    assertEquals("App.service-name",name.serviceName());
    assertEquals("example.com",name.hostName());
    assertEquals("REALM.COM",name.realm());
    assertEquals("service-name",shortNamer.shortName(name));
    name=KerberosName.parse("App.service-name@REALM.COM");
    assertEquals("App.service-name",name.serviceName());
    assertNull(name.hostName());
    assertEquals("REALM.COM",name.realm());
    assertEquals("service-name",shortNamer.shortName(name));
    name=KerberosName.parse("user/host@REALM.COM");
    assertEquals("user",name.serviceName());
    assertEquals("host",name.hostName());
    assertEquals("REALM.COM",name.realm());
    assertEquals("user",shortNamer.shortName(name));
  }
  @Test public void testToLowerCase() throws Exception {
    List<String> rules=Arrays.asList("RULE:[1:$1]/L","RULE:[2:$1](Test.*)s/ABC///L","RULE:[2:$1](ABC.*)s/ABC/XYZ/g/L","RULE:[2:$1](App\\..*)s/App\\.(.*)/$1/g/L","RULE:[2:$1]/L","DEFAULT");
    KerberosShortNamer shortNamer=KerberosShortNamer.fromUnparsedRules("REALM.COM",rules);
    KerberosName name=KerberosName.parse("User@REALM.COM");
    assertEquals("user",shortNamer.shortName(name));
    name=KerberosName.parse("TestABC/host@FOO.COM");
    assertEquals("test",shortNamer.shortName(name));
    name=KerberosName.parse("ABC_User_ABC/host@FOO.COM");
    assertEquals("xyz_user_xyz",shortNamer.shortName(name));
    name=KerberosName.parse("App.SERVICE-name/example.com@REALM.COM");
    assertEquals("service-name",shortNamer.shortName(name));
    name=KerberosName.parse("User/root@REALM.COM");
    assertEquals("user",shortNamer.shortName(name));
  }
  @Test public void testInvalidRules(){
    testInvalidRule(Arrays.asList("default"));
    testInvalidRule(Arrays.asList("DEFAUL"));
    testInvalidRule(Arrays.asList("DEFAULT/L"));
    testInvalidRule(Arrays.asList("DEFAULT/g"));
    testInvalidRule(Arrays.asList("rule:[1:$1]"));
    testInvalidRule(Arrays.asList("RULE:[1:$1/L"));
    testInvalidRule(Arrays.asList("RULE:[1:$1]/l"));
    testInvalidRule(Arrays.asList("RULE:[2:$1](ABC.*)s/ABC/XYZ/L/g"));
  }
  private void testInvalidRule(  List<String> rules){
    try {
      KerberosShortNamer.fromUnparsedRules("REALM.COM",rules);
      fail("should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
