public class TimerTest {
  private final MockTime time=new MockTime();
  @Test public void testTimerUpdate(){
    Timer timer=time.timer(500);
    assertEquals(500,timer.remainingMs());
    assertEquals(0,timer.elapsedMs());
    time.sleep(100);
    timer.update();
    assertEquals(400,timer.remainingMs());
    assertEquals(100,timer.elapsedMs());
    time.sleep(400);
    timer.update(time.milliseconds());
    assertEquals(0,timer.remainingMs());
    assertEquals(500,timer.elapsedMs());
    assertTrue(timer.isExpired());
    time.sleep(200);
    timer.update(time.milliseconds());
    assertTrue(timer.isExpired());
    assertEquals(0,timer.remainingMs());
    assertEquals(700,timer.elapsedMs());
  }
  @Test public void testTimerUpdateAndReset(){
    Timer timer=time.timer(500);
    timer.sleep(200);
    assertEquals(300,timer.remainingMs());
    assertEquals(200,timer.elapsedMs());
    timer.updateAndReset(400);
    assertEquals(400,timer.remainingMs());
    assertEquals(0,timer.elapsedMs());
    timer.sleep(400);
    assertTrue(timer.isExpired());
    timer.updateAndReset(200);
    assertEquals(200,timer.remainingMs());
    assertEquals(0,timer.elapsedMs());
    assertFalse(timer.isExpired());
  }
  @Test public void testTimerResetUsesCurrentTime(){
    Timer timer=time.timer(500);
    timer.sleep(200);
    assertEquals(300,timer.remainingMs());
    assertEquals(200,timer.elapsedMs());
    time.sleep(300);
    timer.reset(500);
    assertEquals(500,timer.remainingMs());
    timer.update();
    assertEquals(200,timer.remainingMs());
  }
  @Test public void testTimeoutOverflow(){
    Timer timer=time.timer(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE - timer.currentTimeMs(),timer.remainingMs());
    assertEquals(0,timer.elapsedMs());
  }
  @Test public void testNonMonotonicUpdate(){
    Timer timer=time.timer(100);
    long currentTimeMs=timer.currentTimeMs();
    timer.update(currentTimeMs - 1);
    assertEquals(currentTimeMs,timer.currentTimeMs());
    assertEquals(100,timer.remainingMs());
    assertEquals(0,timer.elapsedMs());
  }
  @Test public void testTimerSleep(){
    Timer timer=time.timer(500);
    long currentTimeMs=timer.currentTimeMs();
    timer.sleep(200);
    assertEquals(time.milliseconds(),timer.currentTimeMs());
    assertEquals(currentTimeMs + 200,timer.currentTimeMs());
    timer.sleep(1000);
    assertEquals(time.milliseconds(),timer.currentTimeMs());
    assertEquals(currentTimeMs + 500,timer.currentTimeMs());
    assertTrue(timer.isExpired());
  }
}
