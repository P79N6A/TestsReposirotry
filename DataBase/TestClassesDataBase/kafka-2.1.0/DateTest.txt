public class DateTest {
  private static final GregorianCalendar EPOCH;
  private static final GregorianCalendar EPOCH_PLUS_TEN_THOUSAND_DAYS;
  private static final GregorianCalendar EPOCH_PLUS_TIME_COMPONENT;
static {
    EPOCH=new GregorianCalendar(1970,Calendar.JANUARY,1,0,0,0);
    EPOCH.setTimeZone(TimeZone.getTimeZone("UTC"));
    EPOCH_PLUS_TIME_COMPONENT=new GregorianCalendar(1970,Calendar.JANUARY,1,0,0,1);
    EPOCH_PLUS_TIME_COMPONENT.setTimeZone(TimeZone.getTimeZone("UTC"));
    EPOCH_PLUS_TEN_THOUSAND_DAYS=new GregorianCalendar(1970,Calendar.JANUARY,1,0,0,0);
    EPOCH_PLUS_TEN_THOUSAND_DAYS.setTimeZone(TimeZone.getTimeZone("UTC"));
    EPOCH_PLUS_TEN_THOUSAND_DAYS.add(Calendar.DATE,10000);
  }
  @Test public void testBuilder(){
    Schema plain=Date.SCHEMA;
    assertEquals(Date.LOGICAL_NAME,plain.name());
    assertEquals(1,(Object)plain.version());
  }
  @Test public void testFromLogical(){
    assertEquals(0,Date.fromLogical(Date.SCHEMA,EPOCH.getTime()));
    assertEquals(10000,Date.fromLogical(Date.SCHEMA,EPOCH_PLUS_TEN_THOUSAND_DAYS.getTime()));
  }
  @Test(expected=DataException.class) public void testFromLogicalInvalidSchema(){
    Date.fromLogical(Date.builder().name("invalid").build(),EPOCH.getTime());
  }
  @Test(expected=DataException.class) public void testFromLogicalInvalidHasTimeComponents(){
    Date.fromLogical(Date.SCHEMA,EPOCH_PLUS_TIME_COMPONENT.getTime());
  }
  @Test public void testToLogical(){
    assertEquals(EPOCH.getTime(),Date.toLogical(Date.SCHEMA,0));
    assertEquals(EPOCH_PLUS_TEN_THOUSAND_DAYS.getTime(),Date.toLogical(Date.SCHEMA,10000));
  }
  @Test(expected=DataException.class) public void testToLogicalInvalidSchema(){
    Date.toLogical(Date.builder().name("invalid").build(),0);
  }
}
