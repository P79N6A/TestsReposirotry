public class ChannelBuildersTest {
  @Test public void testCreateOldPrincipalBuilder() throws Exception {
    TransportLayer transportLayer=mock(TransportLayer.class);
    Authenticator authenticator=mock(Authenticator.class);
    Map<String,Object> configs=new HashMap<>();
    configs.put(BrokerSecurityConfigs.PRINCIPAL_BUILDER_CLASS_CONFIG,OldPrincipalBuilder.class);
    KafkaPrincipalBuilder builder=ChannelBuilders.createPrincipalBuilder(configs,transportLayer,authenticator,null);
    assertTrue(OldPrincipalBuilder.configured);
    KafkaPrincipal principal=builder.build(new PlaintextAuthenticationContext(InetAddress.getLocalHost(),SecurityProtocol.PLAINTEXT.name()));
    assertEquals(OldPrincipalBuilder.PRINCIPAL_NAME,principal.getName());
    assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType());
  }
  @Test public void testCreateConfigurableKafkaPrincipalBuilder(){
    Map<String,Object> configs=new HashMap<>();
    configs.put(BrokerSecurityConfigs.PRINCIPAL_BUILDER_CLASS_CONFIG,ConfigurableKafkaPrincipalBuilder.class);
    KafkaPrincipalBuilder builder=ChannelBuilders.createPrincipalBuilder(configs,null,null,null);
    assertTrue(builder instanceof ConfigurableKafkaPrincipalBuilder);
    assertTrue(((ConfigurableKafkaPrincipalBuilder)builder).configured);
  }
@SuppressWarnings("deprecation") public static class OldPrincipalBuilder implements PrincipalBuilder {
    private static boolean configured=false;
    private static final String PRINCIPAL_NAME="bob";
    @Override public void configure(    Map<String,?> configs){
      configured=true;
    }
    @Override public Principal buildPrincipal(    TransportLayer transportLayer,    Authenticator authenticator) throws KafkaException {
      return new Principal(){
        @Override public String getName(){
          return PRINCIPAL_NAME;
        }
      }
;
    }
    @Override public void close() throws KafkaException {
    }
  }
public static class ConfigurableKafkaPrincipalBuilder implements KafkaPrincipalBuilder, Configurable {
    private boolean configured=false;
    @Override public void configure(    Map<String,?> configs){
      configured=true;
    }
    @Override public KafkaPrincipal build(    AuthenticationContext context){
      return null;
    }
  }
}
