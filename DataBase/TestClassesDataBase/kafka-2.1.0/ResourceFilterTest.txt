public class ResourceFilterTest {
  @Test public void shouldNotMatchIfDifferentResourceType(){
    assertFalse(new ResourceFilter(TOPIC,"Name").matches(new Resource(GROUP,"Name")));
  }
  @Test public void shouldNotMatchIfDifferentName(){
    assertFalse(new ResourceFilter(TOPIC,"Different").matches(new Resource(TOPIC,"Name")));
  }
  @Test public void shouldNotMatchIfDifferentNameCase(){
    assertFalse(new ResourceFilter(TOPIC,"NAME").matches(new Resource(TOPIC,"Name")));
  }
  @Test public void shouldMatchWhereResourceTypeIsAny(){
    assertTrue(new ResourceFilter(ANY,"Name").matches(new Resource(TOPIC,"Name")));
  }
  @Test public void shouldMatchWhereResourceNameIsAny(){
    assertTrue(new ResourceFilter(TOPIC,null).matches(new Resource(TOPIC,"Name")));
  }
  @Test public void shouldMatchIfExactMatch(){
    assertTrue(new ResourceFilter(TOPIC,"Name").matches(new Resource(TOPIC,"Name")));
  }
  @Test public void shouldMatchWildcardIfExactMatch(){
    assertTrue(new ResourceFilter(TOPIC,"*").matches(new Resource(TOPIC,"*")));
  }
  @Test public void shouldNotMatchWildcardAgainstOtherName(){
    assertFalse(new ResourceFilter(TOPIC,"Name").matches(new Resource(TOPIC,"*")));
  }
  @Test public void shouldNotMatchLiteralWildcardTheWayAround(){
    assertFalse(new ResourceFilter(TOPIC,"*").matches(new Resource(TOPIC,"Name")));
  }
}
