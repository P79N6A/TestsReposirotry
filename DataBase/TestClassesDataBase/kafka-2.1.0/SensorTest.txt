public class SensorTest {
  @Test public void testRecordLevelEnum(){
    Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;
    assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));
    assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));
    configLevel=Sensor.RecordingLevel.DEBUG;
    assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));
    assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));
    assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);
    assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);
  }
  @Test public void testShouldRecord(){
    MetricConfig debugConfig=new MetricConfig().recordLevel(Sensor.RecordingLevel.DEBUG);
    MetricConfig infoConfig=new MetricConfig().recordLevel(Sensor.RecordingLevel.INFO);
    Sensor infoSensor=new Sensor(null,"infoSensor",null,debugConfig,new SystemTime(),0,Sensor.RecordingLevel.INFO);
    assertTrue(infoSensor.shouldRecord());
    infoSensor=new Sensor(null,"infoSensor",null,debugConfig,new SystemTime(),0,Sensor.RecordingLevel.DEBUG);
    assertTrue(infoSensor.shouldRecord());
    Sensor debugSensor=new Sensor(null,"debugSensor",null,infoConfig,new SystemTime(),0,Sensor.RecordingLevel.INFO);
    assertTrue(debugSensor.shouldRecord());
    debugSensor=new Sensor(null,"debugSensor",null,infoConfig,new SystemTime(),0,Sensor.RecordingLevel.DEBUG);
    assertFalse(debugSensor.shouldRecord());
  }
  @Test public void testExpiredSensor(){
    MetricConfig config=new MetricConfig();
    Time mockTime=new MockTime();
    Metrics metrics=new Metrics(config,Arrays.asList((MetricsReporter)new JmxReporter()),mockTime,true);
    long inactiveSensorExpirationTimeSeconds=60L;
    Sensor sensor=new Sensor(metrics,"sensor",null,config,mockTime,inactiveSensorExpirationTimeSeconds,Sensor.RecordingLevel.INFO);
    assertTrue(sensor.add(metrics.metricName("test1","grp1"),new Avg()));
    Map<String,String> emptyTags=Collections.emptyMap();
    MetricName rateMetricName=new MetricName("rate","test","",emptyTags);
    MetricName totalMetricName=new MetricName("total","test","",emptyTags);
    Meter meter=new Meter(rateMetricName,totalMetricName);
    assertTrue(sensor.add(meter));
    mockTime.sleep(TimeUnit.SECONDS.toMillis(inactiveSensorExpirationTimeSeconds + 1));
    assertFalse(sensor.add(metrics.metricName("test3","grp1"),new Avg()));
    assertFalse(sensor.add(meter));
    metrics.close();
  }
  @Test public void testIdempotentAdd(){
    final Metrics metrics=new Metrics();
    final Sensor sensor=metrics.sensor("sensor");
    assertTrue(sensor.add(metrics.metricName("test-metric","test-group"),new Avg()));
    assertTrue(sensor.add(metrics.metricName("test-metric","test-group"),new Avg()));
    final Sensor anotherSensor=metrics.sensor("another-sensor");
    try {
      anotherSensor.add(metrics.metricName("test-metric","test-group"),new Avg());
      fail("should have thrown");
    }
 catch (    final IllegalArgumentException ignored) {
    }
    assertTrue(sensor.add(metrics.metricName("test-metric","test-group"),new Sum()));
    assertEquals(1,sensor.metrics().size());
    assertEquals(org.apache.kafka.common.metrics.stats.Avg.class,sensor.metrics().get(0).measurable().getClass());
  }
  /** 
 * The Sensor#checkQuotas should be thread-safe since the method may be used by many ReplicaFetcherThreads.
 */
  @Test public void testCheckQuotasInMultiThreads() throws InterruptedException, ExecutionException {
    final Metrics metrics=new Metrics(new MetricConfig().quota(Quota.upperBound(Double.MAX_VALUE)).timeWindow(1,TimeUnit.MILLISECONDS).samples(100));
    final Sensor sensor=metrics.sensor("sensor");
    assertTrue(sensor.add(metrics.metricName("test-metric","test-group"),new Rate()));
    final int threadCount=10;
    final CountDownLatch latch=new CountDownLatch(1);
    ExecutorService service=Executors.newFixedThreadPool(threadCount);
    List<Future<Throwable>> workers=new ArrayList<>(threadCount);
    boolean needShutdown=true;
    try {
      for (int i=0; i != threadCount; ++i) {
        final int index=i;
        workers.add(service.submit(new Callable<Throwable>(){
          @Override public Throwable call(){
            try {
              assertTrue(latch.await(5,TimeUnit.SECONDS));
              for (int j=0; j != 20; ++j) {
                sensor.record(j * index,System.currentTimeMillis() + j,false);
                sensor.checkQuotas();
              }
              return null;
            }
 catch (            Throwable e) {
              return e;
            }
          }
        }
));
      }
      latch.countDown();
      service.shutdown();
      assertTrue(service.awaitTermination(10,TimeUnit.SECONDS));
      needShutdown=false;
      for (      Future<Throwable> callable : workers) {
        assertTrue("If this failure happen frequently, we can try to increase the wait time",callable.isDone());
        assertNull("Sensor#checkQuotas SHOULD be thread-safe!",callable.get());
      }
    }
  finally {
      if (needShutdown) {
        service.shutdownNow();
      }
    }
  }
}
