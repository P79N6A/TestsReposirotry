public class TimestampTest {
  private static final GregorianCalendar EPOCH;
  private static final GregorianCalendar EPOCH_PLUS_MILLIS;
  private static final int NUM_MILLIS=2000000000;
  private static final long TOTAL_MILLIS=((long)NUM_MILLIS) * 2;
static {
    EPOCH=new GregorianCalendar(1970,Calendar.JANUARY,1,0,0,0);
    EPOCH.setTimeZone(TimeZone.getTimeZone("UTC"));
    EPOCH_PLUS_MILLIS=new GregorianCalendar(1970,Calendar.JANUARY,1,0,0,0);
    EPOCH_PLUS_MILLIS.setTimeZone(TimeZone.getTimeZone("UTC"));
    EPOCH_PLUS_MILLIS.add(Calendar.MILLISECOND,NUM_MILLIS);
    EPOCH_PLUS_MILLIS.add(Calendar.MILLISECOND,NUM_MILLIS);
  }
  @Test public void testBuilder(){
    Schema plain=Date.SCHEMA;
    assertEquals(Date.LOGICAL_NAME,plain.name());
    assertEquals(1,(Object)plain.version());
  }
  @Test public void testFromLogical(){
    assertEquals(0L,Timestamp.fromLogical(Timestamp.SCHEMA,EPOCH.getTime()));
    assertEquals(TOTAL_MILLIS,Timestamp.fromLogical(Timestamp.SCHEMA,EPOCH_PLUS_MILLIS.getTime()));
  }
  @Test(expected=DataException.class) public void testFromLogicalInvalidSchema(){
    Timestamp.fromLogical(Timestamp.builder().name("invalid").build(),EPOCH.getTime());
  }
  @Test public void testToLogical(){
    assertEquals(EPOCH.getTime(),Timestamp.toLogical(Timestamp.SCHEMA,0L));
    assertEquals(EPOCH_PLUS_MILLIS.getTime(),Timestamp.toLogical(Timestamp.SCHEMA,TOTAL_MILLIS));
  }
  @Test(expected=DataException.class) public void testToLogicalInvalidSchema(){
    Date.toLogical(Date.builder().name("invalid").build(),0);
  }
}
