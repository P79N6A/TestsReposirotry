public class PunctuationQueueTest {
  private final MockProcessorNode<String,String> node=new MockProcessorNode<>();
  private final PunctuationQueue queue=new PunctuationQueue();
  private final Punctuator punctuator=new Punctuator(){
    @Override public void punctuate(    final long timestamp){
      node.mockProcessor.punctuatedStreamTime.add(timestamp);
    }
  }
;
  @Test public void testPunctuationInterval(){
    final PunctuationSchedule sched=new PunctuationSchedule(node,0L,100L,punctuator);
    final long now=sched.timestamp - 100L;
    queue.schedule(sched);
    final ProcessorNodePunctuator processorNodePunctuator=new ProcessorNodePunctuator(){
      @Override public void punctuate(      final ProcessorNode node,      final long time,      final PunctuationType type,      final Punctuator punctuator){
        punctuator.punctuate(time);
      }
    }
;
    queue.mayPunctuate(now,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 99L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 100L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 199L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 200L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(2,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1001L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1002L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1100L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(4,node.mockProcessor.punctuatedStreamTime.size());
  }
  @Test public void testPunctuationIntervalCustomAlignment(){
    final PunctuationSchedule sched=new PunctuationSchedule(node,50L,100L,punctuator);
    final long now=sched.timestamp - 50L;
    queue.schedule(sched);
    final ProcessorNodePunctuator processorNodePunctuator=new ProcessorNodePunctuator(){
      @Override public void punctuate(      final ProcessorNode node,      final long time,      final PunctuationType type,      final Punctuator punctuator){
        punctuator.punctuate(time);
      }
    }
;
    queue.mayPunctuate(now,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 49L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 50L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 149L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 150L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(2,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1051L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1052L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 1150L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(4,node.mockProcessor.punctuatedStreamTime.size());
  }
  @Test public void testPunctuationIntervalCancelFromPunctuator(){
    final PunctuationSchedule sched=new PunctuationSchedule(node,0L,100L,punctuator);
    final long now=sched.timestamp - 100L;
    final Cancellable cancellable=queue.schedule(sched);
    final ProcessorNodePunctuator processorNodePunctuator=new ProcessorNodePunctuator(){
      @Override public void punctuate(      final ProcessorNode node,      final long time,      final PunctuationType type,      final Punctuator punctuator){
        punctuator.punctuate(time);
        cancellable.cancel();
      }
    }
;
    queue.mayPunctuate(now,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 100L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
    queue.mayPunctuate(now + 200L,PunctuationType.STREAM_TIME,processorNodePunctuator);
    assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
  }
private static class TestProcessor extends AbstractProcessor<String,String> {
    @Override public void init(    final ProcessorContext context){
    }
    @Override public void process(    final String key,    final String value){
    }
    @Override public void close(){
    }
  }
}
