public class GlobalKTableJoinsTest {
  private final StreamsBuilder builder=new StreamsBuilder();
  private final Map<String,String> results=new HashMap<>();
  private final String streamTopic="stream";
  private final String globalTopic="global";
  private GlobalKTable<String,String> global;
  private KStream<String,String> stream;
  private KeyValueMapper<String,String,String> keyValueMapper;
  private ForeachAction<String,String> action;
  @Before public void setUp(){
    final Consumed<String,String> consumed=Consumed.with(Serdes.String(),Serdes.String());
    global=builder.globalTable(globalTopic,consumed);
    stream=builder.stream(streamTopic,consumed);
    keyValueMapper=new KeyValueMapper<String,String,String>(){
      @Override public String apply(      final String key,      final String value){
        return value;
      }
    }
;
    action=new ForeachAction<String,String>(){
      @Override public void apply(      final String key,      final String value){
        results.put(key,value);
      }
    }
;
  }
  @Test public void shouldLeftJoinWithStream(){
    stream.leftJoin(global,keyValueMapper,MockValueJoiner.TOSTRING_JOINER).foreach(action);
    final Map<String,String> expected=new HashMap<>();
    expected.put("1","a+A");
    expected.put("2","b+B");
    expected.put("3","c+null");
    verifyJoin(expected);
  }
  @Test public void shouldInnerJoinWithStream(){
    stream.join(global,keyValueMapper,MockValueJoiner.TOSTRING_JOINER).foreach(action);
    final Map<String,String> expected=new HashMap<>();
    expected.put("1","a+A");
    expected.put("2","b+B");
    verifyJoin(expected);
  }
  private void verifyJoin(  final Map<String,String> expected){
    final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(new StringSerializer(),new StringSerializer());
    final Properties props=StreamsTestUtils.getStreamsConfig(Serdes.String(),Serdes.String());
    try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
      driver.pipeInput(recordFactory.create(globalTopic,"a","A"));
      driver.pipeInput(recordFactory.create(globalTopic,"b","B"));
      driver.pipeInput(recordFactory.create(streamTopic,"1","a"));
      driver.pipeInput(recordFactory.create(streamTopic,"2","b"));
      driver.pipeInput(recordFactory.create(streamTopic,"3","c"));
    }
     assertEquals(expected,results);
  }
}
