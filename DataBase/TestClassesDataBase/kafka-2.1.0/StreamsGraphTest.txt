public class StreamsGraphTest {
  private final Pattern repartitionTopicPattern=Pattern.compile("Sink: .*-repartition");
  @Test public void shouldBeAbleToBuildTopologyIncrementally(){
    final StreamsBuilder builder=new StreamsBuilder();
    final KStream<String,String> stream=builder.stream("topic");
    final KStream<String,String> streamII=builder.stream("other-topic");
    final ValueJoiner<String,String,String> valueJoiner=(v,v2) -> v + v2;
    final KStream<String,String> joinedStream=stream.join(streamII,valueJoiner,JoinWindows.of(ofMillis(5000)));
    assertEquals(expectedJoinedTopology,builder.build().describe().toString());
    final KStream<String,String> filteredJoinStream=joinedStream.filter((k,v) -> v.equals("foo"));
    assertEquals(expectedJoinedFilteredTopology,builder.build().describe().toString());
    filteredJoinStream.mapValues(v -> v + "some value").to("output-topic");
    assertEquals(expectedFullTopology,builder.build().describe().toString());
  }
  @Test public void shouldNotOptimizeWithValueOrKeyChangingOperatorsAfterInitialKeyChange(){
    final Topology attemptedOptimize=getTopologyWithChangingValuesAfterChangingKey(StreamsConfig.OPTIMIZE);
    final Topology noOptimization=getTopologyWithChangingValuesAfterChangingKey(StreamsConfig.NO_OPTIMIZATION);
    assertEquals(attemptedOptimize.describe().toString(),noOptimization.describe().toString());
    assertEquals(2,getCountOfRepartitionTopicsFound(attemptedOptimize.describe().toString()));
    assertEquals(2,getCountOfRepartitionTopicsFound(noOptimization.describe().toString()));
  }
  @Test public void shouldNotOptimizeWhenAThroughOperationIsDone(){
    final Topology attemptedOptimize=getTopologyWithThroughOperation(StreamsConfig.OPTIMIZE);
    final Topology noOptimziation=getTopologyWithThroughOperation(StreamsConfig.NO_OPTIMIZATION);
    assertEquals(attemptedOptimize.describe().toString(),noOptimziation.describe().toString());
    assertEquals(0,getCountOfRepartitionTopicsFound(attemptedOptimize.describe().toString()));
    assertEquals(0,getCountOfRepartitionTopicsFound(noOptimziation.describe().toString()));
  }
  private Topology getTopologyWithChangingValuesAfterChangingKey(  final String optimizeConfig){
    final StreamsBuilder builder=new StreamsBuilder();
    final Properties properties=new Properties();
    properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION,optimizeConfig);
    final KStream<String,String> inputStream=builder.stream("input");
    final KStream<String,String> mappedKeyStream=inputStream.selectKey((k,v) -> k + v);
    mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to("output");
    mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split("\\s"))).groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to("windowed-output");
    return builder.build(properties);
  }
  private Topology getTopologyWithThroughOperation(  final String optimizeConfig){
    final StreamsBuilder builder=new StreamsBuilder();
    final Properties properties=new Properties();
    properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION,optimizeConfig);
    final KStream<String,String> inputStream=builder.stream("input");
    final KStream<String,String> mappedKeyStream=inputStream.selectKey((k,v) -> k + v).through("through-topic");
    mappedKeyStream.groupByKey().count().toStream().to("output");
    mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to("windowed-output");
    return builder.build(properties);
  }
  private int getCountOfRepartitionTopicsFound(  final String topologyString){
    final Matcher matcher=repartitionTopicPattern.matcher(topologyString);
    final List<String> repartitionTopicsFound=new ArrayList<>();
    while (matcher.find()) {
      repartitionTopicsFound.add(matcher.group());
    }
    return repartitionTopicsFound.size();
  }
  private String expectedJoinedTopology="Topologies:\n" + "   Sub-topology: 0\n" + "    Source: KSTREAM-SOURCE-0000000000 (topics: [topic])\n"+ "      --> KSTREAM-WINDOWED-0000000002\n"+ "    Source: KSTREAM-SOURCE-0000000001 (topics: [other-topic])\n"+ "      --> KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-WINDOWED-0000000002 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-JOINTHIS-0000000004\n"+ "      <-- KSTREAM-SOURCE-0000000000\n"+ "    Processor: KSTREAM-WINDOWED-0000000003 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-JOINOTHER-0000000005\n"+ "      <-- KSTREAM-SOURCE-0000000001\n"+ "    Processor: KSTREAM-JOINOTHER-0000000005 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-JOINTHIS-0000000004 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000002\n"+ "    Processor: KSTREAM-MERGE-0000000006 (stores: [])\n"+ "      --> none\n"+ "      <-- KSTREAM-JOINTHIS-0000000004, KSTREAM-JOINOTHER-0000000005\n\n";
  private String expectedJoinedFilteredTopology="Topologies:\n" + "   Sub-topology: 0\n" + "    Source: KSTREAM-SOURCE-0000000000 (topics: [topic])\n"+ "      --> KSTREAM-WINDOWED-0000000002\n"+ "    Source: KSTREAM-SOURCE-0000000001 (topics: [other-topic])\n"+ "      --> KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-WINDOWED-0000000002 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-JOINTHIS-0000000004\n"+ "      <-- KSTREAM-SOURCE-0000000000\n"+ "    Processor: KSTREAM-WINDOWED-0000000003 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-JOINOTHER-0000000005\n"+ "      <-- KSTREAM-SOURCE-0000000001\n"+ "    Processor: KSTREAM-JOINOTHER-0000000005 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-JOINTHIS-0000000004 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000002\n"+ "    Processor: KSTREAM-MERGE-0000000006 (stores: [])\n"+ "      --> KSTREAM-FILTER-0000000007\n"+ "      <-- KSTREAM-JOINTHIS-0000000004, KSTREAM-JOINOTHER-0000000005\n"+ "    Processor: KSTREAM-FILTER-0000000007 (stores: [])\n"+ "      --> none\n"+ "      <-- KSTREAM-MERGE-0000000006\n\n";
  private String expectedFullTopology="Topologies:\n" + "   Sub-topology: 0\n" + "    Source: KSTREAM-SOURCE-0000000000 (topics: [topic])\n"+ "      --> KSTREAM-WINDOWED-0000000002\n"+ "    Source: KSTREAM-SOURCE-0000000001 (topics: [other-topic])\n"+ "      --> KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-WINDOWED-0000000002 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-JOINTHIS-0000000004\n"+ "      <-- KSTREAM-SOURCE-0000000000\n"+ "    Processor: KSTREAM-WINDOWED-0000000003 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-JOINOTHER-0000000005\n"+ "      <-- KSTREAM-SOURCE-0000000001\n"+ "    Processor: KSTREAM-JOINOTHER-0000000005 (stores: [KSTREAM-JOINTHIS-0000000004-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000003\n"+ "    Processor: KSTREAM-JOINTHIS-0000000004 (stores: [KSTREAM-JOINOTHER-0000000005-store])\n"+ "      --> KSTREAM-MERGE-0000000006\n"+ "      <-- KSTREAM-WINDOWED-0000000002\n"+ "    Processor: KSTREAM-MERGE-0000000006 (stores: [])\n"+ "      --> KSTREAM-FILTER-0000000007\n"+ "      <-- KSTREAM-JOINTHIS-0000000004, KSTREAM-JOINOTHER-0000000005\n"+ "    Processor: KSTREAM-FILTER-0000000007 (stores: [])\n"+ "      --> KSTREAM-MAPVALUES-0000000008\n"+ "      <-- KSTREAM-MERGE-0000000006\n"+ "    Processor: KSTREAM-MAPVALUES-0000000008 (stores: [])\n"+ "      --> KSTREAM-SINK-0000000009\n"+ "      <-- KSTREAM-FILTER-0000000007\n"+ "    Sink: KSTREAM-SINK-0000000009 (topic: output-topic)\n"+ "      <-- KSTREAM-MAPVALUES-0000000008\n\n";
}
