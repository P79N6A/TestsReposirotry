public class SaslServerAuthenticatorTest {
  @Test(expected=InvalidReceiveException.class) public void testOversizeRequest() throws IOException {
    TransportLayer transportLayer=mock(TransportLayer.class);
    Map<String,?> configs=Collections.singletonMap(BrokerSecurityConfigs.SASL_ENABLED_MECHANISMS_CONFIG,Collections.singletonList(SCRAM_SHA_256.mechanismName()));
    SaslServerAuthenticator authenticator=setupAuthenticator(configs,transportLayer,SCRAM_SHA_256.mechanismName());
    when(transportLayer.read(any(ByteBuffer.class))).then(invocation -> {
      invocation.<ByteBuffer>getArgument(0).putInt(SaslServerAuthenticator.MAX_RECEIVE_SIZE + 1);
      return 4;
    }
);
    authenticator.authenticate();
    verify(transportLayer).read(any(ByteBuffer.class));
  }
  @Test public void testUnexpectedRequestType() throws IOException {
    TransportLayer transportLayer=mock(TransportLayer.class);
    Map<String,?> configs=Collections.singletonMap(BrokerSecurityConfigs.SASL_ENABLED_MECHANISMS_CONFIG,Collections.singletonList(SCRAM_SHA_256.mechanismName()));
    SaslServerAuthenticator authenticator=setupAuthenticator(configs,transportLayer,SCRAM_SHA_256.mechanismName());
    final RequestHeader header=new RequestHeader(ApiKeys.METADATA,(short)0,"clientId",13243);
    final Struct headerStruct=header.toStruct();
    when(transportLayer.read(any(ByteBuffer.class))).then(invocation -> {
      invocation.<ByteBuffer>getArgument(0).putInt(headerStruct.sizeOf());
      return 4;
    }
).then(invocation -> {
      headerStruct.writeTo(invocation.getArgument(0));
      return headerStruct.sizeOf();
    }
);
    try {
      authenticator.authenticate();
      fail("Expected authenticate() to raise an exception");
    }
 catch (    IllegalSaslStateException e) {
    }
    verify(transportLayer,times(2)).read(any(ByteBuffer.class));
  }
  private SaslServerAuthenticator setupAuthenticator(  Map<String,?> configs,  TransportLayer transportLayer,  String mechanism) throws IOException {
    TestJaasConfig jaasConfig=new TestJaasConfig();
    jaasConfig.addEntry("jaasContext",PlainLoginModule.class.getName(),new HashMap<String,Object>());
    Map<String,JaasContext> jaasContexts=Collections.singletonMap(mechanism,new JaasContext("jaasContext",JaasContext.Type.SERVER,jaasConfig,null));
    Map<String,Subject> subjects=Collections.singletonMap(mechanism,new Subject());
    Map<String,AuthenticateCallbackHandler> callbackHandlers=Collections.singletonMap(mechanism,new SaslServerCallbackHandler());
    return new SaslServerAuthenticator(configs,callbackHandlers,"node",subjects,null,new ListenerName("ssl"),SecurityProtocol.SASL_SSL,transportLayer);
  }
}
