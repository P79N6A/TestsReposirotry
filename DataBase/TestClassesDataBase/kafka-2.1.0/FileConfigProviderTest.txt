public class FileConfigProviderTest {
  private FileConfigProvider configProvider;
  @Before public void setup(){
    configProvider=new TestFileConfigProvider();
  }
  @Test public void testGetAllKeysAtPath() throws Exception {
    ConfigData configData=configProvider.get("dummy");
    Map<String,String> result=new HashMap<>();
    result.put("testKey","testResult");
    result.put("testKey2","testResult2");
    assertEquals(result,configData.data());
    assertEquals(null,configData.ttl());
  }
  @Test public void testGetOneKeyAtPath() throws Exception {
    ConfigData configData=configProvider.get("dummy",Collections.singleton("testKey"));
    Map<String,String> result=new HashMap<>();
    result.put("testKey","testResult");
    assertEquals(result,configData.data());
    assertEquals(null,configData.ttl());
  }
  @Test public void testEmptyPath() throws Exception {
    ConfigData configData=configProvider.get("",Collections.singleton("testKey"));
    assertTrue(configData.data().isEmpty());
    assertEquals(null,configData.ttl());
  }
  @Test public void testEmptyPathWithKey() throws Exception {
    ConfigData configData=configProvider.get("");
    assertTrue(configData.data().isEmpty());
    assertEquals(null,configData.ttl());
  }
  @Test public void testNullPath() throws Exception {
    ConfigData configData=configProvider.get(null);
    assertTrue(configData.data().isEmpty());
    assertEquals(null,configData.ttl());
  }
  @Test public void testNullPathWithKey() throws Exception {
    ConfigData configData=configProvider.get(null,Collections.singleton("testKey"));
    assertTrue(configData.data().isEmpty());
    assertEquals(null,configData.ttl());
  }
public static class TestFileConfigProvider extends FileConfigProvider {
    @Override protected Reader reader(    String path) throws IOException {
      return new StringReader("testKey=testResult\ntestKey2=testResult2");
    }
  }
}
