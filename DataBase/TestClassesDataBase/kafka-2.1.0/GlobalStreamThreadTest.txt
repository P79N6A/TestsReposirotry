public class GlobalStreamThreadTest {
  private final InternalTopologyBuilder builder=new InternalTopologyBuilder();
  private final MockConsumer<byte[],byte[]> mockConsumer=new MockConsumer<>(OffsetResetStrategy.NONE);
  private final MockTime time=new MockTime();
  private final MockStateRestoreListener stateRestoreListener=new MockStateRestoreListener();
  private GlobalStreamThread globalStreamThread;
  private StreamsConfig config;
  private final static String GLOBAL_STORE_TOPIC_NAME="foo";
  private final static String GLOBAL_STORE_NAME="bar";
  private final TopicPartition topicPartition=new TopicPartition(GLOBAL_STORE_TOPIC_NAME,0);
  @SuppressWarnings("unchecked") @Before public void before(){
    final MaterializedInternal<Object,Object,KeyValueStore<Bytes,byte[]>> materialized=new MaterializedInternal<>(Materialized.with(null,null));
    materialized.generateStoreNameIfNeeded(new InternalNameProvider(){
      @Override public String newProcessorName(      final String prefix){
        return "processorName";
      }
      @Override public String newStoreName(      final String prefix){
        return GLOBAL_STORE_NAME;
      }
    }
,"store-");
    builder.addGlobalStore((StoreBuilder)new KeyValueStoreMaterializer<>(materialized).materialize().withLoggingDisabled(),"sourceName",null,null,null,GLOBAL_STORE_TOPIC_NAME,"processorName",new KTableSource<>(GLOBAL_STORE_NAME));
    final HashMap<String,Object> properties=new HashMap<>();
    properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"blah");
    properties.put(StreamsConfig.APPLICATION_ID_CONFIG,"blah");
    properties.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getAbsolutePath());
    config=new StreamsConfig(properties);
    globalStreamThread=new GlobalStreamThread(builder.rewriteTopology(config).buildGlobalStateTopology(),config,mockConsumer,new StateDirectory(config,time),0,new Metrics(),new MockTime(),"clientId",stateRestoreListener);
  }
  @Test public void shouldThrowStreamsExceptionOnStartupIfThereIsAStreamsException(){
    try {
      globalStreamThread.start();
      fail("Should have thrown StreamsException if start up failed");
    }
 catch (    final StreamsException e) {
    }
    assertFalse(globalStreamThread.stillRunning());
  }
  @SuppressWarnings("unchecked") @Test public void shouldThrowStreamsExceptionOnStartupIfExceptionOccurred(){
    final MockConsumer<byte[],byte[]> mockConsumer=new MockConsumer(OffsetResetStrategy.EARLIEST){
      @Override public List<PartitionInfo> partitionsFor(      final String topic){
        throw new RuntimeException("KABOOM!");
      }
    }
;
    globalStreamThread=new GlobalStreamThread(builder.buildGlobalStateTopology(),config,mockConsumer,new StateDirectory(config,time),0,new Metrics(),new MockTime(),"clientId",stateRestoreListener);
    try {
      globalStreamThread.start();
      fail("Should have thrown StreamsException if start up failed");
    }
 catch (    final StreamsException e) {
      assertThat(e.getCause(),instanceOf(RuntimeException.class));
      assertThat(e.getCause().getMessage(),equalTo("KABOOM!"));
    }
    assertFalse(globalStreamThread.stillRunning());
  }
  @Test public void shouldBeRunningAfterSuccessfulStart(){
    initializeConsumer();
    globalStreamThread.start();
    assertTrue(globalStreamThread.stillRunning());
  }
  @Test(timeout=30000) public void shouldStopRunningWhenClosedByUser() throws InterruptedException {
    initializeConsumer();
    globalStreamThread.start();
    globalStreamThread.shutdown();
    globalStreamThread.join();
    assertEquals(GlobalStreamThread.State.DEAD,globalStreamThread.state());
  }
  @Test public void shouldCloseStateStoresOnClose() throws InterruptedException {
    initializeConsumer();
    globalStreamThread.start();
    final StateStore globalStore=builder.globalStateStores().get(GLOBAL_STORE_NAME);
    assertTrue(globalStore.isOpen());
    globalStreamThread.shutdown();
    globalStreamThread.join();
    assertFalse(globalStore.isOpen());
  }
  @SuppressWarnings("unchecked") @Test public void shouldTransitionToDeadOnClose() throws InterruptedException {
    initializeConsumer();
    globalStreamThread.start();
    globalStreamThread.shutdown();
    globalStreamThread.join();
    assertEquals(GlobalStreamThread.State.DEAD,globalStreamThread.state());
  }
  @SuppressWarnings("unchecked") @Test public void shouldStayDeadAfterTwoCloses() throws InterruptedException {
    initializeConsumer();
    globalStreamThread.start();
    globalStreamThread.shutdown();
    globalStreamThread.join();
    globalStreamThread.shutdown();
    assertEquals(GlobalStreamThread.State.DEAD,globalStreamThread.state());
  }
  @SuppressWarnings("unchecked") @Test public void shouldTransitionToRunningOnStart() throws InterruptedException {
    initializeConsumer();
    globalStreamThread.start();
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return globalStreamThread.state() == RUNNING;
      }
    }
,10 * 1000,"Thread never started.");
    globalStreamThread.shutdown();
  }
  @Test public void shouldDieOnInvalidOffsetException() throws Exception {
    initializeConsumer();
    globalStreamThread.start();
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return globalStreamThread.state() == RUNNING;
      }
    }
,10 * 1000,"Thread never started.");
    mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition,1L));
    mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME,0,0L,"K1".getBytes(),"V1".getBytes()));
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return mockConsumer.position(topicPartition) == 1L;
      }
    }
,10 * 1000,"Input record never consumed");
    mockConsumer.setException(new InvalidOffsetException("Try Again!"){
      @Override public Set<TopicPartition> partitions(){
        return Collections.singleton(topicPartition);
      }
    }
);
    mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME,0,0L,"K1".getBytes(),"V1".getBytes()));
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return globalStreamThread.state() == DEAD;
      }
    }
,10 * 1000,"GlobalStreamThread should have died.");
  }
  private void initializeConsumer(){
    mockConsumer.updatePartitions(GLOBAL_STORE_TOPIC_NAME,Collections.singletonList(new PartitionInfo(GLOBAL_STORE_TOPIC_NAME,0,null,new Node[0],new Node[0])));
    mockConsumer.updateBeginningOffsets(Collections.singletonMap(topicPartition,0L));
    mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition,0L));
    mockConsumer.assign(Collections.singleton(topicPartition));
  }
}
