public class ProducerInterceptorsTest {
  private final TopicPartition tp=new TopicPartition("test",0);
  private final ProducerRecord<Integer,String> producerRecord=new ProducerRecord<>("test",0,1,"value");
  private int onAckCount=0;
  private int onErrorAckCount=0;
  private int onErrorAckWithTopicSetCount=0;
  private int onErrorAckWithTopicPartitionSetCount=0;
  private int onSendCount=0;
private class AppendProducerInterceptor implements ProducerInterceptor<Integer,String> {
    private String appendStr="";
    private boolean throwExceptionOnSend=false;
    private boolean throwExceptionOnAck=false;
    public AppendProducerInterceptor(    String appendStr){
      this.appendStr=appendStr;
    }
    @Override public void configure(    Map<String,?> configs){
    }
    @Override public ProducerRecord<Integer,String> onSend(    ProducerRecord<Integer,String> record){
      onSendCount++;
      if (throwExceptionOnSend)       throw new KafkaException("Injected exception in AppendProducerInterceptor.onSend");
      return new ProducerRecord<>(record.topic(),record.partition(),record.key(),record.value().concat(appendStr));
    }
    @Override public void onAcknowledgement(    RecordMetadata metadata,    Exception exception){
      onAckCount++;
      if (exception != null) {
        onErrorAckCount++;
        if (metadata != null && metadata.topic().length() >= 0) {
          onErrorAckWithTopicSetCount++;
          if (metadata.partition() >= 0)           onErrorAckWithTopicPartitionSetCount++;
        }
      }
      if (throwExceptionOnAck)       throw new KafkaException("Injected exception in AppendProducerInterceptor.onAcknowledgement");
    }
    @Override public void close(){
    }
    public void injectOnSendError(    boolean on){
      throwExceptionOnSend=on;
    }
    public void injectOnAcknowledgementError(    boolean on){
      throwExceptionOnAck=on;
    }
  }
  @Test public void testOnSendChain(){
    List<ProducerInterceptor<Integer,String>> interceptorList=new ArrayList<>();
    AppendProducerInterceptor interceptor1=new AppendProducerInterceptor("One");
    AppendProducerInterceptor interceptor2=new AppendProducerInterceptor("Two");
    interceptorList.add(interceptor1);
    interceptorList.add(interceptor2);
    ProducerInterceptors<Integer,String> interceptors=new ProducerInterceptors<>(interceptorList);
    ProducerRecord<Integer,String> interceptedRecord=interceptors.onSend(producerRecord);
    assertEquals(2,onSendCount);
    assertEquals(producerRecord.topic(),interceptedRecord.topic());
    assertEquals(producerRecord.partition(),interceptedRecord.partition());
    assertEquals(producerRecord.key(),interceptedRecord.key());
    assertEquals(interceptedRecord.value(),producerRecord.value().concat("One").concat("Two"));
    ProducerRecord<Integer,String> anotherRecord=interceptors.onSend(producerRecord);
    assertEquals(4,onSendCount);
    assertEquals(interceptedRecord,anotherRecord);
    interceptor1.injectOnSendError(true);
    ProducerRecord<Integer,String> partInterceptRecord=interceptors.onSend(producerRecord);
    assertEquals(6,onSendCount);
    assertEquals(partInterceptRecord.value(),producerRecord.value().concat("Two"));
    interceptor2.injectOnSendError(true);
    ProducerRecord<Integer,String> noInterceptRecord=interceptors.onSend(producerRecord);
    assertEquals(producerRecord,noInterceptRecord);
    interceptors.close();
  }
  @Test public void testOnAcknowledgementChain(){
    List<ProducerInterceptor<Integer,String>> interceptorList=new ArrayList<>();
    AppendProducerInterceptor interceptor1=new AppendProducerInterceptor("One");
    AppendProducerInterceptor interceptor2=new AppendProducerInterceptor("Two");
    interceptorList.add(interceptor1);
    interceptorList.add(interceptor2);
    ProducerInterceptors<Integer,String> interceptors=new ProducerInterceptors<>(interceptorList);
    RecordMetadata meta=new RecordMetadata(tp,0,0,0,Long.valueOf(0L),0,0);
    interceptors.onAcknowledgement(meta,null);
    assertEquals(2,onAckCount);
    interceptor1.injectOnAcknowledgementError(true);
    interceptors.onAcknowledgement(meta,null);
    assertEquals(4,onAckCount);
    interceptor2.injectOnAcknowledgementError(true);
    interceptors.onAcknowledgement(meta,null);
    assertEquals(6,onAckCount);
    interceptors.close();
  }
  @Test public void testOnAcknowledgementWithErrorChain(){
    List<ProducerInterceptor<Integer,String>> interceptorList=new ArrayList<>();
    AppendProducerInterceptor interceptor1=new AppendProducerInterceptor("One");
    interceptorList.add(interceptor1);
    ProducerInterceptors<Integer,String> interceptors=new ProducerInterceptors<>(interceptorList);
    interceptors.onSendError(producerRecord,new TopicPartition(producerRecord.topic(),producerRecord.partition()),new KafkaException("Test"));
    assertEquals(1,onErrorAckCount);
    assertEquals(1,onErrorAckWithTopicPartitionSetCount);
    interceptors.onSendError(producerRecord,null,new KafkaException("Test"));
    assertEquals(2,onErrorAckCount);
    assertEquals(2,onErrorAckWithTopicPartitionSetCount);
    ProducerRecord<Integer,String> record2=new ProducerRecord<>("test2",null,1,"value");
    interceptors.onSendError(record2,null,new KafkaException("Test"));
    assertEquals(3,onErrorAckCount);
    assertEquals(3,onErrorAckWithTopicSetCount);
    assertEquals(2,onErrorAckWithTopicPartitionSetCount);
    int reassignedPartition=producerRecord.partition() + 1;
    interceptors.onSendError(record2,new TopicPartition(record2.topic(),reassignedPartition),new KafkaException("Test"));
    assertEquals(4,onErrorAckCount);
    assertEquals(4,onErrorAckWithTopicSetCount);
    assertEquals(3,onErrorAckWithTopicPartitionSetCount);
    interceptors.onSendError(null,null,new KafkaException("Test"));
    assertEquals(5,onErrorAckCount);
    assertEquals(4,onErrorAckWithTopicSetCount);
    assertEquals(3,onErrorAckWithTopicPartitionSetCount);
    interceptors.close();
  }
}
