public class MeteredWindowStoreTest {
  private InternalMockProcessorContext context;
  @SuppressWarnings("unchecked") private final WindowStore<Bytes,byte[]> innerStoreMock=EasyMock.createNiceMock(WindowStore.class);
  private final MeteredWindowStore<String,String> store=new MeteredWindowStore<>(innerStoreMock,"scope",new MockTime(),Serdes.String(),new SerdeThatDoesntHandleNull());
{
    EasyMock.expect(innerStoreMock.name()).andReturn("mocked-store").anyTimes();
  }
  @Before public void setUp(){
    final Metrics metrics=new Metrics(new MetricConfig().recordLevel(Sensor.RecordingLevel.DEBUG));
    final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(metrics,"test");
    context=new InternalMockProcessorContext(TestUtils.tempDirectory(),Serdes.String(),Serdes.Long(),streamsMetrics,new StreamsConfig(StreamsTestUtils.getStreamsConfig()),new RecordCollector.Supplier(){
      @Override public RecordCollector recordCollector(){
        return new NoOpRecordCollector();
      }
    }
,new ThreadCache(new LogContext("testCache "),0,streamsMetrics));
  }
  @Test public void shouldRecordRestoreLatencyOnInit(){
    innerStoreMock.init(context,store);
    EasyMock.expectLastCall();
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"restore-total","stream-scope-metrics",singletonMap("scope-id","all")).metricValue());
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"restore-total","stream-scope-metrics",singletonMap("scope-id","mocked-store")).metricValue());
  }
  @Test public void shouldRecordPutLatency(){
    final byte[] bytes="a".getBytes();
    innerStoreMock.put(EasyMock.eq(Bytes.wrap(bytes)),EasyMock.<byte[]>anyObject(),EasyMock.eq(context.timestamp()));
    EasyMock.expectLastCall();
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    store.put("a","a");
    final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"put-total","stream-scope-metrics",singletonMap("scope-id","all")).metricValue());
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"put-total","stream-scope-metrics",singletonMap("scope-id","mocked-store")).metricValue());
    EasyMock.verify(innerStoreMock);
  }
  @Test public void shouldRecordFetchLatency(){
    EasyMock.expect(innerStoreMock.fetch(Bytes.wrap("a".getBytes()),1,1)).andReturn(KeyValueIterators.<byte[]>emptyWindowStoreIterator());
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    store.fetch("a",ofEpochMilli(1),ofEpochMilli(1)).close();
    final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"fetch-total","stream-scope-metrics",singletonMap("scope-id","all")).metricValue());
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"fetch-total","stream-scope-metrics",singletonMap("scope-id","mocked-store")).metricValue());
    EasyMock.verify(innerStoreMock);
  }
  @Test public void shouldRecordFetchRangeLatency(){
    EasyMock.expect(innerStoreMock.fetch(Bytes.wrap("a".getBytes()),Bytes.wrap("b".getBytes()),1,1)).andReturn(KeyValueIterators.<Windowed<Bytes>,byte[]>emptyIterator());
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    store.fetch("a","b",ofEpochMilli(1),ofEpochMilli(1)).close();
    final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"fetch-total","stream-scope-metrics",singletonMap("scope-id","all")).metricValue());
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"fetch-total","stream-scope-metrics",singletonMap("scope-id","mocked-store")).metricValue());
    EasyMock.verify(innerStoreMock);
  }
  @Test public void shouldRecordFlushLatency(){
    innerStoreMock.flush();
    EasyMock.expectLastCall();
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    store.flush();
    final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"flush-total","stream-scope-metrics",singletonMap("scope-id","all")).metricValue());
    assertEquals(1.0,getMetricByNameFilterByTags(metrics,"flush-total","stream-scope-metrics",singletonMap("scope-id","mocked-store")).metricValue());
    EasyMock.verify(innerStoreMock);
  }
  @Test public void shouldCloseUnderlyingStore(){
    innerStoreMock.close();
    EasyMock.expectLastCall();
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    store.close();
    EasyMock.verify(innerStoreMock);
  }
  @Test public void shouldNotExceptionIfFetchReturnsNull(){
    EasyMock.expect(innerStoreMock.fetch(Bytes.wrap("a".getBytes()),0)).andReturn(null);
    EasyMock.replay(innerStoreMock);
    store.init(context,store);
    assertNull(store.fetch("a",0));
  }
}
