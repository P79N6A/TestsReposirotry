private class MatchingBufferPool extends BufferPool {
  IdentityHashMap<ByteBuffer,Boolean> allocatedBuffers;
  MatchingBufferPool(  long totalSize,  int batchSize,  Metrics metrics,  Time time,  String metricGrpName){
    super(totalSize,batchSize,metrics,time,metricGrpName);
    allocatedBuffers=new IdentityHashMap<>();
  }
  @Override public ByteBuffer allocate(  int size,  long maxTimeToBlockMs) throws InterruptedException {
    ByteBuffer buffer=super.allocate(size,maxTimeToBlockMs);
    allocatedBuffers.put(buffer,Boolean.TRUE);
    return buffer;
  }
  @Override public void deallocate(  ByteBuffer buffer,  int size){
    if (!allocatedBuffers.containsKey(buffer)) {
      throw new IllegalStateException("Deallocating a buffer that is not allocated");
    }
    allocatedBuffers.remove(buffer);
    super.deallocate(buffer,size);
  }
  public boolean allMatch(){
    return allocatedBuffers.isEmpty();
  }
}
