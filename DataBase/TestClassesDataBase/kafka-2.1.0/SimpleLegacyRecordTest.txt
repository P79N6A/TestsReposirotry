public class SimpleLegacyRecordTest {
  @Test(expected=InvalidRecordException.class) public void testCompressedIterationWithNullValue() throws Exception {
    ByteBuffer buffer=ByteBuffer.allocate(128);
    DataOutputStream out=new DataOutputStream(new ByteBufferOutputStream(buffer));
    AbstractLegacyRecordBatch.writeHeader(out,0L,LegacyRecord.RECORD_OVERHEAD_V1);
    LegacyRecord.write(out,RecordBatch.MAGIC_VALUE_V1,1L,(byte[])null,null,CompressionType.GZIP,TimestampType.CREATE_TIME);
    buffer.flip();
    MemoryRecords records=MemoryRecords.readableRecords(buffer);
    if (records.records().iterator().hasNext())     fail("Iteration should have caused invalid record error");
  }
  @Test(expected=InvalidRecordException.class) public void testCompressedIterationWithEmptyRecords() throws Exception {
    ByteBuffer emptyCompressedValue=ByteBuffer.allocate(64);
    OutputStream gzipOutput=CompressionType.GZIP.wrapForOutput(new ByteBufferOutputStream(emptyCompressedValue),RecordBatch.MAGIC_VALUE_V1);
    gzipOutput.close();
    emptyCompressedValue.flip();
    ByteBuffer buffer=ByteBuffer.allocate(128);
    DataOutputStream out=new DataOutputStream(new ByteBufferOutputStream(buffer));
    AbstractLegacyRecordBatch.writeHeader(out,0L,LegacyRecord.RECORD_OVERHEAD_V1 + emptyCompressedValue.remaining());
    LegacyRecord.write(out,RecordBatch.MAGIC_VALUE_V1,1L,null,Utils.toArray(emptyCompressedValue),CompressionType.GZIP,TimestampType.CREATE_TIME);
    buffer.flip();
    MemoryRecords records=MemoryRecords.readableRecords(buffer);
    if (records.records().iterator().hasNext())     fail("Iteration should have caused invalid record error");
  }
  @Test(expected=InvalidRecordException.class) public void testIsValidWithTooSmallBuffer(){
    ByteBuffer buffer=ByteBuffer.allocate(2);
    LegacyRecord record=new LegacyRecord(buffer);
    assertFalse(record.isValid());
    record.ensureValid();
  }
  @Test(expected=InvalidRecordException.class) public void testIsValidWithChecksumMismatch(){
    ByteBuffer buffer=ByteBuffer.allocate(4);
    buffer.putInt(2);
    LegacyRecord record=new LegacyRecord(buffer);
    assertFalse(record.isValid());
    record.ensureValid();
  }
}
