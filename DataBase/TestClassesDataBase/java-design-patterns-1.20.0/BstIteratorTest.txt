@TestInstance(Lifecycle.PER_CLASS) class BstIteratorTest {
  private TreeNode<Integer> nonEmptyRoot;
  private TreeNode<Integer> emptyRoot;
  @BeforeAll void createTrees(){
    nonEmptyRoot=new TreeNode<>(5);
    nonEmptyRoot.insert(3);
    nonEmptyRoot.insert(7);
    nonEmptyRoot.insert(1);
    nonEmptyRoot.insert(4);
    nonEmptyRoot.insert(6);
    emptyRoot=null;
  }
  @Test void nextForEmptyTree(){
    BstIterator iter=new BstIterator<>(emptyRoot);
    assertThrows(NoSuchElementException.class,iter::next,"next() should throw an IllegalStateException if hasNext() is false.");
  }
  @Test void nextOverEntirePopulatedTree(){
    BstIterator iter=new BstIterator<>(nonEmptyRoot);
    assertEquals(1,iter.next().getVal(),"First Node is 1.");
    assertEquals(3,iter.next().getVal(),"Second Node is 3.");
    assertEquals(4,iter.next().getVal(),"Third Node is 4.");
    assertEquals(5,iter.next().getVal(),"Fourth Node is 5.");
    assertEquals(6,iter.next().getVal(),"Fifth Node is 6.");
    assertEquals(7,iter.next().getVal(),"Sixth Node is 7.");
  }
  @Test void hasNextForEmptyTree(){
    BstIterator iter=new BstIterator<>(emptyRoot);
    assertFalse(iter.hasNext(),"hasNext() should return false for empty tree.");
  }
  @Test void hasNextForPopulatedTree(){
    BstIterator iter=new BstIterator<>(nonEmptyRoot);
    assertTrue(iter.hasNext(),"hasNext() should return true for populated tree.");
  }
  @Test void nextAndHasNextOverEntirePopulatedTree(){
    BstIterator iter=new BstIterator<>(nonEmptyRoot);
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(1,iter.next().getVal(),"First Node is 1.");
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(3,iter.next().getVal(),"Second Node is 3.");
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(4,iter.next().getVal(),"Third Node is 4.");
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(5,iter.next().getVal(),"Fourth Node is 5.");
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(6,iter.next().getVal(),"Fifth Node is 6.");
    assertTrue(iter.hasNext(),"Iterator hasNext() should be true.");
    assertEquals(7,iter.next().getVal(),"Sixth Node is 7.");
    assertFalse(iter.hasNext(),"Iterator hasNext() should be false, end of tree.");
  }
}
