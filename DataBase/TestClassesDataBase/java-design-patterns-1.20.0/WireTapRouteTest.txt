/** 
 * Test class for <i>WireTapRoute</i>. <p> In order for it to work we have to mock endpoints we want to read/write to. To mock those we need to substitute original endpoint names to mocks. </p>
 */
@ExtendWith(SpringExtension.class) @SpringApplicationConfiguration(classes=WireTapRouteTest.class) @ActiveProfiles("test") @EnableAutoConfiguration @ComponentScan public class WireTapRouteTest {
  @EndpointInject(uri="{{entry}}") private ProducerTemplate entry;
  @EndpointInject(uri="{{endpoint}}") private MockEndpoint endpoint;
  @EndpointInject(uri="{{wireTapEndpoint}}") private MockEndpoint wireTapEndpoint;
  /** 
 * Test if both endpoints receive exactly one message containing the same, unchanged body.
 * @throws Exception in case of en exception during the test
 */
  @Test @DirtiesContext public void testWireTap() throws Exception {
    entry.sendBody("TEST");
    endpoint.expectedMessageCount(1);
    wireTapEndpoint.expectedMessageCount(1);
    endpoint.assertIsSatisfied();
    wireTapEndpoint.assertIsSatisfied();
    Message endpointIn=endpoint.getExchanges().get(0).getIn();
    Message wireTapEndpointIn=wireTapEndpoint.getExchanges().get(0).getIn();
    assertEquals("TEST",endpointIn.getBody());
    assertEquals("TEST",wireTapEndpointIn.getBody());
  }
}
