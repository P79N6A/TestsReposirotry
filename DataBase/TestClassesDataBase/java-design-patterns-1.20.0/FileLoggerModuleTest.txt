/** 
 * The Module pattern can be considered a Creational pattern and a Structural pattern. It manages the creation and organization of other elements, and groups them as the structural pattern does. An object that applies this pattern can provide the equivalent of a namespace, providing the initialization and finalization process of a static class or a class with static members with cleaner, more concise syntax and semantics. <p> The below example demonstrates a JUnit test for testing two different modules: File Logger and Console Logger
 */
public final class FileLoggerModuleTest {
  private static final Logger LOGGER=Logger.getLogger(FileLoggerModuleTest.class);
  private static final String OUTPUT_FILE="output.txt";
  private static final String ERROR_FILE="error.txt";
  private static final String MESSAGE="MESSAGE";
  private static final String ERROR="ERROR";
  /** 
 * This test verify that 'MESSAGE' is perfectly printed in output file
 * @throws IOException if program is not able to find log files (output.txt and error.txt)
 */
  @Test public void testFileMessage() throws IOException {
    final FileLoggerModule fileLoggerModule=FileLoggerModule.getSingleton();
    fileLoggerModule.prepare();
    fileLoggerModule.printString(MESSAGE);
    assertEquals(readFirstLine(OUTPUT_FILE),MESSAGE);
    fileLoggerModule.unprepare();
  }
  /** 
 * This test verify that nothing is printed in output file
 * @throws IOException if program is not able to find log files (output.txt and error.txt)
 */
  @Test public void testNoFileMessage() throws IOException {
    final FileLoggerModule fileLoggerModule=FileLoggerModule.getSingleton();
    fileLoggerModule.prepare();
    assertEquals(readFirstLine(OUTPUT_FILE),null);
    fileLoggerModule.unprepare();
  }
  /** 
 * This test verify that 'ERROR' is perfectly printed in error file
 * @throws FileNotFoundException if program is not able to find log files (output.txt anderror.txt)
 */
  @Test public void testFileErrorMessage() throws FileNotFoundException {
    final FileLoggerModule fileLoggerModule=FileLoggerModule.getSingleton();
    fileLoggerModule.prepare();
    fileLoggerModule.printErrorString(ERROR);
    assertEquals(readFirstLine(ERROR_FILE),ERROR);
    fileLoggerModule.unprepare();
  }
  /** 
 * This test verify that nothing is printed in error file
 * @throws FileNotFoundException if program is not able to find log files (output.txt anderror.txt)
 */
  @Test public void testNoFileErrorMessage() throws FileNotFoundException {
    final FileLoggerModule fileLoggerModule=FileLoggerModule.getSingleton();
    fileLoggerModule.prepare();
    assertEquals(readFirstLine(ERROR_FILE),null);
    fileLoggerModule.unprepare();
  }
  /** 
 * Utility method to read first line of a file
 * @param file as file name to be read
 * @return a string value as first line in file
 */
  private static final String readFirstLine(  final String file){
    String firstLine=null;
    BufferedReader bufferedReader=null;
    try {
      bufferedReader=new BufferedReader(new FileReader(file));
      while (bufferedReader.ready()) {
        firstLine=bufferedReader.readLine();
      }
      LOGGER.info("ModuleTest::readFirstLine() : firstLine : " + firstLine);
    }
 catch (    final IOException e) {
      LOGGER.error("ModuleTest::readFirstLine()",e);
    }
 finally {
      if (bufferedReader != null) {
        try {
          bufferedReader.close();
        }
 catch (        final IOException e) {
          LOGGER.error("ModuleTest::readFirstLine()",e);
        }
      }
    }
    return firstLine;
  }
}
