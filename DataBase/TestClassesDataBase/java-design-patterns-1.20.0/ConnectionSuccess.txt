/** 
 * Represents the scenario where DB connectivity is present.
 */
@Nested public class ConnectionSuccess {
  /** 
 * Setup for connection success scenario.
 * @throws Exception if any error occurs.
 */
  @BeforeEach public void setUp() throws Exception {
    JdbcDataSource dataSource=new JdbcDataSource();
    dataSource.setURL(DB_URL);
    dao=new DbCustomerDao(dataSource);
    boolean result=dao.add(existingCustomer);
    assertTrue(result);
  }
  /** 
 * Represents the scenario when DAO operations are being performed on a non existing customer.
 */
@Nested public class NonExistingCustomer {
    @Test public void addingShouldResultInSuccess() throws Exception {
      try (Stream<Customer> allCustomers=dao.getAll()){
        assumeTrue(allCustomers.count() == 1);
      }
       final Customer nonExistingCustomer=new Customer(2,"Robert","Englund");
      boolean result=dao.add(nonExistingCustomer);
      assertTrue(result);
      assertCustomerCountIs(2);
      assertEquals(nonExistingCustomer,dao.getById(nonExistingCustomer.getId()).get());
    }
    @Test public void deletionShouldBeFailureAndNotAffectExistingCustomers() throws Exception {
      final Customer nonExistingCustomer=new Customer(2,"Robert","Englund");
      boolean result=dao.delete(nonExistingCustomer);
      assertFalse(result);
      assertCustomerCountIs(1);
    }
    @Test public void updationShouldBeFailureAndNotAffectExistingCustomers() throws Exception {
      final int nonExistingId=getNonExistingCustomerId();
      final String newFirstname="Douglas";
      final String newLastname="MacArthur";
      final Customer customer=new Customer(nonExistingId,newFirstname,newLastname);
      boolean result=dao.update(customer);
      assertFalse(result);
      assertFalse(dao.getById(nonExistingId).isPresent());
    }
    @Test public void retrieveShouldReturnNoCustomer() throws Exception {
      assertFalse(dao.getById(getNonExistingCustomerId()).isPresent());
    }
  }
  /** 
 * Represents a scenario where DAO operations are being performed on an already existing customer.
 */
@Nested public class ExistingCustomer {
    @Test public void addingShouldResultInFailureAndNotAffectExistingCustomers() throws Exception {
      Customer existingCustomer=new Customer(1,"Freddy","Krueger");
      boolean result=dao.add(existingCustomer);
      assertFalse(result);
      assertCustomerCountIs(1);
      assertEquals(existingCustomer,dao.getById(existingCustomer.getId()).get());
    }
    @Test public void deletionShouldBeSuccessAndCustomerShouldBeNonAccessible() throws Exception {
      boolean result=dao.delete(existingCustomer);
      assertTrue(result);
      assertCustomerCountIs(0);
      assertFalse(dao.getById(existingCustomer.getId()).isPresent());
    }
    @Test public void updationShouldBeSuccessAndAccessingTheSameCustomerShouldReturnUpdatedInformation() throws Exception {
      final String newFirstname="Bernard";
      final String newLastname="Montgomery";
      final Customer customer=new Customer(existingCustomer.getId(),newFirstname,newLastname);
      boolean result=dao.update(customer);
      assertTrue(result);
      final Customer cust=dao.getById(existingCustomer.getId()).get();
      assertEquals(newFirstname,cust.getFirstName());
      assertEquals(newLastname,cust.getLastName());
    }
  }
}
