/** 
 * Represents a scenario where DAO operations are being performed on an already existing customer.
 */
@Nested public class ExistingCustomer {
  @Test public void addingShouldResultInFailureAndNotAffectExistingCustomers() throws Exception {
    Customer existingCustomer=new Customer(1,"Freddy","Krueger");
    boolean result=dao.add(existingCustomer);
    assertFalse(result);
    assertCustomerCountIs(1);
    assertEquals(existingCustomer,dao.getById(existingCustomer.getId()).get());
  }
  @Test public void deletionShouldBeSuccessAndCustomerShouldBeNonAccessible() throws Exception {
    boolean result=dao.delete(existingCustomer);
    assertTrue(result);
    assertCustomerCountIs(0);
    assertFalse(dao.getById(existingCustomer.getId()).isPresent());
  }
  @Test public void updationShouldBeSuccessAndAccessingTheSameCustomerShouldReturnUpdatedInformation() throws Exception {
    final String newFirstname="Bernard";
    final String newLastname="Montgomery";
    final Customer customer=new Customer(existingCustomer.getId(),newFirstname,newLastname);
    boolean result=dao.update(customer);
    assertTrue(result);
    final Customer cust=dao.getById(existingCustomer.getId()).get();
    assertEquals(newFirstname,cust.getFirstName());
    assertEquals(newLastname,cust.getLastName());
  }
}
