/** 
 * Test of the Callable In this test  {@link DateFormatCallable} is tested with only one thread (i.e. without concurrency situation)<p> An incorrect formatted date is passed to the Callable After a successful run 0 date values and 5 exceptions should be in the result object. 
 * @author Thomas Bauer, January 2017
 */
public class DateFormatCallableTestIncorrectDateFormat {
  /** 
 * Result object given back by DateFormatCallable -- Array with converted date values -- Array with thrown exceptions
 */
  static Result result;
  /** 
 * The date values created by the run of DateFormatRunnalbe. List will be filled in the setup() method
 */
  static List<String> createdExceptions=new ArrayList<String>();
  /** 
 * Expected number of date values in the date value list created by the run of DateFormatRunnalbe
 */
  int expectedCounterDateValues=0;
  /** 
 * Expected number of exceptions in the exception list created by the run of DateFormatRunnalbe. 
 */
  int expectedCounterExceptions=5;
  /** 
 * Expected content of the list containing the exceptions created by the run of DateFormatRunnalbe
 */
  List<String> expectedExceptions=Arrays.asList("class java.text.ParseException: Unparseable date: \"15.12.2015\"","class java.text.ParseException: Unparseable date: \"15.12.2015\"","class java.text.ParseException: Unparseable date: \"15.12.2015\"","class java.text.ParseException: Unparseable date: \"15.12.2015\"","class java.text.ParseException: Unparseable date: \"15.12.2015\"");
  /** 
 * Run Callable and prepare results for usage in the test methods
 */
  @BeforeAll public static void setup(){
    DateFormatCallable callableDf=new DateFormatCallable("dd/MM/yyyy","15.12.2015");
    ExecutorService executor=Executors.newCachedThreadPool();
    Future<Result> futureResult=executor.submit(callableDf);
    try {
      result=futureResult.get();
    }
 catch (    Exception e) {
      fail("Setup failed: " + e);
    }
    executor.shutdown();
  }
  /** 
 * Test Exceptions after the run of DateFormatRunnalbe. A correct run should deliver 5 times the same exception
 */
  @Test public void testExecptions(){
    assertEquals(expectedExceptions,result.getExceptionList());
  }
  /** 
 * Test number of dates in the list after the run of DateFormatRunnalbe. A correct run should deliver no date values
 */
  @Test public void testCounterDateValues(){
    assertEquals(expectedCounterDateValues,result.getDateList().size());
  }
  /** 
 * Test number of Exceptions in the list after the run of DateFormatRunnalbe. A correct run should  deliver 5 exceptions
 */
  @Test public void testCounterExceptions(){
    assertEquals(expectedCounterExceptions,result.getExceptionList().size());
  }
}
