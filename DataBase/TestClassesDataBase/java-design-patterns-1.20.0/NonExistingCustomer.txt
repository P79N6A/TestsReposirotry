/** 
 * Represents the scenario when DAO operations are being performed on a non existing customer.
 */
@Nested public class NonExistingCustomer {
  @Test public void addingShouldResultInSuccess() throws Exception {
    try (Stream<Customer> allCustomers=dao.getAll()){
      assumeTrue(allCustomers.count() == 1);
    }
     final Customer nonExistingCustomer=new Customer(2,"Robert","Englund");
    boolean result=dao.add(nonExistingCustomer);
    assertTrue(result);
    assertCustomerCountIs(2);
    assertEquals(nonExistingCustomer,dao.getById(nonExistingCustomer.getId()).get());
  }
  @Test public void deletionShouldBeFailureAndNotAffectExistingCustomers() throws Exception {
    final Customer nonExistingCustomer=new Customer(2,"Robert","Englund");
    boolean result=dao.delete(nonExistingCustomer);
    assertFalse(result);
    assertCustomerCountIs(1);
  }
  @Test public void updationShouldBeFailureAndNotAffectExistingCustomers() throws Exception {
    final int nonExistingId=getNonExistingCustomerId();
    final String newFirstname="Douglas";
    final String newLastname="MacArthur";
    final Customer customer=new Customer(nonExistingId,newFirstname,newLastname);
    boolean result=dao.update(customer);
    assertFalse(result);
    assertFalse(dao.getById(nonExistingId).isPresent());
  }
  @Test public void retrieveShouldReturnNoCustomer() throws Exception {
    assertFalse(dao.getById(getNonExistingCustomerId()).isPresent());
  }
}
