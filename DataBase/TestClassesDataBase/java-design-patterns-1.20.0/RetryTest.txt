/** 
 * Unit tests for  {@link Retry}.
 * @author George Aristy (george.aristy@gmail.com)
 */
public class RetryTest {
  /** 
 * Should contain all errors thrown.
 */
  @Test public void errors() throws Exception {
    final BusinessException e=new BusinessException("unhandled");
    final Retry<String> retry=new Retry<>(() -> {
      throw e;
    }
,2,0);
    try {
      retry.perform();
    }
 catch (    BusinessException ex) {
    }
    assertThat(retry.errors(),hasItem(e));
  }
  /** 
 * No exceptions will be ignored, hence final number of attempts should be 1 even if we're asking it to attempt twice.
 */
  @Test public void attempts(){
    final BusinessException e=new BusinessException("unhandled");
    final Retry<String> retry=new Retry<>(() -> {
      throw e;
    }
,2,0);
    try {
      retry.perform();
    }
 catch (    BusinessException ex) {
    }
    assertThat(retry.attempts(),is(1));
  }
  /** 
 * Final number of attempts should be equal to the number of attempts asked because we are  asking it to ignore the exception that will be thrown.
 */
  @Test public void ignore() throws Exception {
    final BusinessException e=new CustomerNotFoundException("customer not found");
    final Retry<String> retry=new Retry<>(() -> {
      throw e;
    }
,2,0,ex -> CustomerNotFoundException.class.isAssignableFrom(ex.getClass()));
    try {
      retry.perform();
    }
 catch (    BusinessException ex) {
    }
    assertThat(retry.attempts(),is(2));
  }
}
