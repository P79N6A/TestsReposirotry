/** 
 * Test Fixtures with Simple Objects
 */
public class SimpleObjectIntegTest extends SimpleAppIntegTest {
  @Inject FixtureScripts fixtureScripts;
  RecreateSimpleObjects fs;
  SimpleObject simpleObjectPojo;
  SimpleObject simpleObjectWrapped;
  @Before public void setUp() throws Exception {
    fs=new RecreateSimpleObjects().setNumber(1);
    fixtureScripts.runFixtureScript(fs,null);
    simpleObjectPojo=fs.getSimpleObjects().get(0);
    assertThat(simpleObjectPojo).isNotNull();
    simpleObjectWrapped=wrap(simpleObjectPojo);
  }
  /** 
 * Test Object Name accessibility
 */
public static class Name extends SimpleObjectIntegTest {
    @Test public void accessible() throws Exception {
      final String name=simpleObjectWrapped.getName();
      assertThat(name).isEqualTo(fs.names.get(0));
    }
    @Test public void cannotBeUpdatedDirectly() throws Exception {
      expectedExceptions.expect(DisabledException.class);
      simpleObjectWrapped.setName("new name");
    }
  }
  /** 
 * Test Validation of SimpleObject Names
 */
public static class UpdateName extends SimpleObjectIntegTest {
    @Test public void happyCase() throws Exception {
      simpleObjectWrapped.updateName("new name");
      assertThat(simpleObjectWrapped.getName()).isEqualTo("new name");
    }
    @Test public void failsValidation() throws Exception {
      expectedExceptions.expect(InvalidException.class);
      expectedExceptions.expectMessage("Exclamation mark is not allowed");
      simpleObjectWrapped.updateName("new name!");
    }
  }
  /** 
 * Test ContainerTitle generation based on SimpleObject Name
 */
public static class Title extends SimpleObjectIntegTest {
    @Inject DomainObjectContainer container;
    @Test public void interpolatesName() throws Exception {
      final String name=simpleObjectWrapped.getName();
      final String title=container.titleOf(simpleObjectWrapped);
      assertThat(title).isEqualTo("Object: " + name);
    }
  }
}
