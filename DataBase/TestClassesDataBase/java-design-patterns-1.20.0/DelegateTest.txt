/** 
 * Test for Delegation Pattern
 */
public class DelegateTest {
  private InMemoryAppender appender;
  @BeforeEach public void setUp(){
    appender=new InMemoryAppender();
  }
  @AfterEach public void tearDown(){
    appender.stop();
  }
  private static final String MESSAGE="Test Message Printed";
  @Test public void testCanonPrinter() throws Exception {
    PrinterController printerController=new PrinterController(new CanonPrinter());
    printerController.print(MESSAGE);
    assertEquals("Canon Printer : Test Message Printed",appender.getLastMessage());
  }
  @Test public void testHpPrinter() throws Exception {
    PrinterController printerController=new PrinterController(new HpPrinter());
    printerController.print(MESSAGE);
    assertEquals("HP Printer : Test Message Printed",appender.getLastMessage());
  }
  @Test public void testEpsonPrinter() throws Exception {
    PrinterController printerController=new PrinterController(new EpsonPrinter());
    printerController.print(MESSAGE);
    assertEquals("Epson Printer : Test Message Printed",appender.getLastMessage());
  }
  /** 
 * Logging Appender
 */
private class InMemoryAppender extends AppenderBase<ILoggingEvent> {
    private List<ILoggingEvent> log=new LinkedList<>();
    public InMemoryAppender(){
      ((Logger)LoggerFactory.getLogger("root")).addAppender(this);
      start();
    }
    @Override protected void append(    ILoggingEvent eventObject){
      log.add(eventObject);
    }
    public String getLastMessage(){
      return log.get(log.size() - 1).getFormattedMessage();
    }
    public int getLogSize(){
      return log.size();
    }
  }
}
