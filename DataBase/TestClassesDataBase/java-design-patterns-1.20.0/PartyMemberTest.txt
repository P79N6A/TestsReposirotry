/** 
 * Date: 12/19/15 - 10:13 PM
 * @author Jeroen Meulemeester
 */
public class PartyMemberTest {
  static Collection<Supplier<PartyMember>[]> dataProvider(){
    return Arrays.asList(new Supplier[]{Hobbit::new},new Supplier[]{Hunter::new},new Supplier[]{Rogue::new},new Supplier[]{Wizard::new});
  }
  private InMemoryAppender appender;
  @BeforeEach public void setUp(){
    appender=new InMemoryAppender(PartyMemberBase.class);
  }
  @AfterEach public void tearDown(){
    appender.stop();
  }
  /** 
 * Verify if a party action triggers the correct output to the std-Out
 */
  @ParameterizedTest @MethodSource("dataProvider") public void testPartyAction(  Supplier<PartyMember> memberSupplier){
    final PartyMember member=memberSupplier.get();
    for (    final Action action : Action.values()) {
      member.partyAction(action);
      assertEquals(member.toString() + " " + action.getDescription(),appender.getLastMessage());
    }
    assertEquals(Action.values().length,appender.getLogSize());
  }
  /** 
 * Verify if a member action triggers the expected interactions with the party class
 */
  @ParameterizedTest @MethodSource("dataProvider") public void testAct(  Supplier<PartyMember> memberSupplier){
    final PartyMember member=memberSupplier.get();
    member.act(Action.GOLD);
    assertEquals(0,appender.getLogSize());
    final Party party=mock(Party.class);
    member.joinedParty(party);
    assertEquals(member.toString() + " joins the party",appender.getLastMessage());
    for (    final Action action : Action.values()) {
      member.act(action);
      assertEquals(member.toString() + " " + action.toString(),appender.getLastMessage());
      verify(party).act(member,action);
    }
    assertEquals(Action.values().length + 1,appender.getLogSize());
  }
  /** 
 * Verify if  {@link PartyMemberBase#toString()} generate the expected output
 */
  @ParameterizedTest @MethodSource("dataProvider") public void testToString(  Supplier<PartyMember> memberSupplier) throws Exception {
    final PartyMember member=memberSupplier.get();
    final Class<? extends PartyMember> memberClass=member.getClass();
    assertEquals(memberClass.getSimpleName(),member.toString());
  }
private class InMemoryAppender extends AppenderBase<ILoggingEvent> {
    private List<ILoggingEvent> log=new LinkedList<>();
    public InMemoryAppender(    Class clazz){
      ((Logger)LoggerFactory.getLogger(clazz)).addAppender(this);
      start();
    }
    @Override protected void append(    ILoggingEvent eventObject){
      log.add(eventObject);
    }
    public int getLogSize(){
      return log.size();
    }
    public String getLastMessage(){
      return log.get(log.size() - 1).getFormattedMessage();
    }
  }
}
