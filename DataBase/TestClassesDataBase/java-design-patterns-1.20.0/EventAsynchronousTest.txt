/** 
 * Application test
 */
public class EventAsynchronousTest {
  App app;
  private static final Logger LOGGER=LoggerFactory.getLogger(EventAsynchronousTest.class);
  @BeforeEach public void setUp(){
    app=new App();
  }
  @Test public void testAsynchronousEvent(){
    EventManager eventManager=new EventManager();
    try {
      int aEventId=eventManager.createAsync(60);
      eventManager.start(aEventId);
      assertTrue(eventManager.getEventPool().size() == 1);
      assertTrue(eventManager.getEventPool().size() < EventManager.MAX_RUNNING_EVENTS);
      assertTrue(eventManager.numOfCurrentlyRunningSyncEvent() == -1);
      eventManager.cancel(aEventId);
      assertTrue(eventManager.getEventPool().size() == 0);
    }
 catch (    MaxNumOfEventsAllowedException|LongRunningEventException|EventDoesNotExistException e) {
      LOGGER.error(e.getMessage());
    }
  }
  @Test public void testSynchronousEvent(){
    EventManager eventManager=new EventManager();
    try {
      int sEventId=eventManager.create(60);
      eventManager.start(sEventId);
      assertTrue(eventManager.getEventPool().size() == 1);
      assertTrue(eventManager.getEventPool().size() < EventManager.MAX_RUNNING_EVENTS);
      assertTrue(eventManager.numOfCurrentlyRunningSyncEvent() != -1);
      eventManager.cancel(sEventId);
      assertTrue(eventManager.getEventPool().size() == 0);
    }
 catch (    MaxNumOfEventsAllowedException|LongRunningEventException|EventDoesNotExistException|InvalidOperationException e) {
      LOGGER.error(e.getMessage());
    }
  }
  @Test public void testUnsuccessfulSynchronousEvent() throws InvalidOperationException {
    assertThrows(InvalidOperationException.class,() -> {
      EventManager eventManager=new EventManager();
      try {
        int sEventId=eventManager.create(60);
        eventManager.start(sEventId);
        sEventId=eventManager.create(60);
        eventManager.start(sEventId);
      }
 catch (      MaxNumOfEventsAllowedException|LongRunningEventException|EventDoesNotExistException e) {
        LOGGER.error(e.getMessage());
      }
    }
);
  }
  @Test public void testFullSynchronousEvent(){
    EventManager eventManager=new EventManager();
    try {
      int eventTime=1;
      int sEventId=eventManager.create(eventTime);
      assertTrue(eventManager.getEventPool().size() == 1);
      eventManager.start(sEventId);
      long currentTime=System.currentTimeMillis();
      long endTime=currentTime + (eventTime + 2 * 1000);
      while (System.currentTimeMillis() < endTime) {
      }
      assertTrue(eventManager.getEventPool().size() == 0);
    }
 catch (    MaxNumOfEventsAllowedException|LongRunningEventException|EventDoesNotExistException|InvalidOperationException e) {
      LOGGER.error(e.getMessage());
    }
  }
  @Test public void testFullAsynchronousEvent(){
    EventManager eventManager=new EventManager();
    try {
      int eventTime=1;
      int aEventId1=eventManager.createAsync(eventTime);
      int aEventId2=eventManager.createAsync(eventTime);
      int aEventId3=eventManager.createAsync(eventTime);
      assertTrue(eventManager.getEventPool().size() == 3);
      eventManager.start(aEventId1);
      eventManager.start(aEventId2);
      eventManager.start(aEventId3);
      long currentTime=System.currentTimeMillis();
      long endTime=currentTime + (eventTime + 2 * 1000);
      while (System.currentTimeMillis() < endTime) {
      }
      assertTrue(eventManager.getEventPool().size() == 0);
    }
 catch (    MaxNumOfEventsAllowedException|LongRunningEventException|EventDoesNotExistException e) {
      LOGGER.error(e.getMessage());
    }
  }
}
