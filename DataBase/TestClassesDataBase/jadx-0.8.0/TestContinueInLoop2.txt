public class TestContinueInLoop2 extends IntegrationTest {
public static class TestCls {
    private static void test(    MethodNode mth,    BlockNode block){
      ExcHandlerAttr handlerAttr=block.get(AType.EXC_HANDLER);
      if (handlerAttr != null) {
        ExceptionHandler excHandler=handlerAttr.getHandler();
        excHandler.addBlock(block);
        for (        BlockNode node : BlockUtils.collectBlocksDominatedBy(block,block)) {
          excHandler.addBlock(node);
        }
        for (        BlockNode excBlock : excHandler.getBlocks()) {
          InstructionRemover remover=new InstructionRemover(mth,excBlock);
          for (          InsnNode insn : excBlock.getInstructions()) {
            if (insn.getType() == InsnType.MONITOR_ENTER) {
              break;
            }
            if (insn.getType() == InsnType.MONITOR_EXIT) {
              remover.add(insn);
            }
          }
          remover.perform();
          for (          InsnNode insn : excBlock.getInstructions()) {
            if (insn.getType() == InsnType.THROW) {
              CatchAttr catchAttr=insn.get(AType.CATCH_BLOCK);
              if (catchAttr != null) {
                TryCatchBlock handlerBlock=handlerAttr.getTryBlock();
                TryCatchBlock catchBlock=catchAttr.getTryBlock();
                if (handlerBlock != catchBlock) {
                  handlerBlock.merge(mth,catchBlock);
                  catchBlock.removeInsn(mth,insn);
                }
              }
            }
          }
        }
      }
    }
  }
  @Test public void test(){
    ClassNode cls=getClassNode(TestCls.class);
    String code=cls.getCode().toString();
    assertThat(code,containsOne("break;"));
    assertThat(code,not(containsString("continue;")));
  }
}
