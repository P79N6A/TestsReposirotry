public abstract class HttpSmokeTestCase extends ESIntegTestCase {
  private static String nodeTransportTypeKey;
  private static String nodeHttpTypeKey;
  private static String clientTypeKey;
  @SuppressWarnings("unchecked") @BeforeClass public static void setUpTransport(){
    nodeTransportTypeKey=getTypeKey(randomFrom(getTestTransportPlugin(),Netty4Plugin.class));
    nodeHttpTypeKey=getTypeKey(Netty4Plugin.class);
    clientTypeKey=getTypeKey(randomFrom(getTestTransportPlugin(),Netty4Plugin.class));
  }
  private static String getTypeKey(  Class<? extends Plugin> clazz){
    if (clazz.equals(MockTcpTransportPlugin.class)) {
      return MockTcpTransportPlugin.MOCK_TCP_TRANSPORT_NAME;
    }
 else {
      assert clazz.equals(Netty4Plugin.class);
      return Netty4Plugin.NETTY_TRANSPORT_NAME;
    }
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.TRANSPORT_TYPE_KEY,nodeTransportTypeKey).put(NetworkModule.HTTP_TYPE_KEY,nodeHttpTypeKey).put(NetworkModule.HTTP_ENABLED.getKey(),true).build();
  }
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Arrays.asList(getTestTransportPlugin(),Netty4Plugin.class);
  }
  @Override protected Collection<Class<? extends Plugin>> transportClientPlugins(){
    return Arrays.asList(getTestTransportPlugin(),Netty4Plugin.class);
  }
  @Override protected Settings transportClientSettings(){
    return Settings.builder().put(super.transportClientSettings()).put(NetworkModule.TRANSPORT_TYPE_KEY,clientTypeKey).build();
  }
  @Override protected boolean ignoreExternalCluster(){
    return true;
  }
}
