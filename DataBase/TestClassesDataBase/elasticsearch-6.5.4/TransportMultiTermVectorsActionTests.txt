public class TransportMultiTermVectorsActionTests extends ESTestCase {
  private static ThreadPool threadPool;
  private static TransportService transportService;
  private static ClusterService clusterService;
  private static TransportMultiTermVectorsAction transportAction;
  private static TransportShardMultiTermsVectorAction shardAction;
  @BeforeClass public static void beforeClass() throws Exception {
    threadPool=new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());
    transportService=new TransportService(Settings.EMPTY,mock(Transport.class),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,boundAddress -> DiscoveryNode.createLocal(Settings.builder().put("node.name","node1").build(),boundAddress.publishAddress(),randomBase64UUID()),null,emptySet()){
      @Override public TaskManager getTaskManager(){
        return taskManager;
      }
    }
;
    final Index index1=new Index("index1",randomBase64UUID());
    final ClusterState clusterState=ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName())).metaData(new MetaData.Builder().put(new IndexMetaData.Builder(index1.getName()).settings(Settings.builder().put("index.version.created",Version.CURRENT).put("index.number_of_shards",1).put("index.number_of_replicas",1).put(IndexMetaData.SETTING_INDEX_UUID,index1.getUUID())).putMapping("type1",XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_routing").field("required",false).endObject().endObject().endObject()),true,XContentType.JSON)).putMapping("type2",XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("type2").startObject("_routing").field("required",true).endObject().endObject().endObject()),true,XContentType.JSON)))).build();
    final ShardIterator shardIterator=mock(ShardIterator.class);
    when(shardIterator.shardId()).thenReturn(new ShardId(index1,randomInt()));
    final OperationRouting operationRouting=mock(OperationRouting.class);
    when(operationRouting.getShards(eq(clusterState),eq(index1.getName()),anyString(),anyString(),anyString())).thenReturn(shardIterator);
    when(operationRouting.shardId(eq(clusterState),eq(index1.getName()),anyString(),anyString())).thenReturn(new ShardId(index1,randomInt()));
    clusterService=mock(ClusterService.class);
    when(clusterService.localNode()).thenReturn(transportService.getLocalNode());
    when(clusterService.state()).thenReturn(clusterState);
    when(clusterService.operationRouting()).thenReturn(operationRouting);
    shardAction=new TransportShardMultiTermsVectorAction(Settings.EMPTY,clusterService,transportService,mock(IndicesService.class),threadPool,new ActionFilters(emptySet()),new Resolver()){
      @Override protected void doExecute(      Task task,      MultiTermVectorsShardRequest request,      ActionListener<MultiTermVectorsShardResponse> listener){
      }
    }
;
  }
  @AfterClass public static void afterClass(){
    ThreadPool.terminate(threadPool,30,TimeUnit.SECONDS);
    threadPool=null;
    transportService=null;
    clusterService=null;
    transportAction=null;
    shardAction=null;
  }
  public void testTransportMultiGetAction(){
    final Task task=createTask();
    final NodeClient client=new NodeClient(Settings.EMPTY,threadPool);
    final MultiTermVectorsRequestBuilder request=new MultiTermVectorsRequestBuilder(client,MultiTermVectorsAction.INSTANCE);
    request.add(new TermVectorsRequest("index1","type1","1"));
    request.add(new TermVectorsRequest("index1","type1","2"));
    final AtomicBoolean shardActionInvoked=new AtomicBoolean(false);
    transportAction=new TransportMultiTermVectorsAction(Settings.EMPTY,threadPool,transportService,clusterService,shardAction,new ActionFilters(emptySet()),new Resolver()){
      @Override protected void executeShardAction(      final ActionListener<MultiTermVectorsResponse> listener,      final AtomicArray<MultiTermVectorsItemResponse> responses,      final Map<ShardId,MultiTermVectorsShardRequest> shardRequests){
        shardActionInvoked.set(true);
        assertEquals(2,responses.length());
        assertNull(responses.get(0));
        assertNull(responses.get(1));
      }
    }
;
    transportAction.execute(task,request.request(),new ActionListenerAdapter());
    assertTrue(shardActionInvoked.get());
  }
  public void testTransportMultiGetAction_withMissingRouting(){
    final Task task=createTask();
    final NodeClient client=new NodeClient(Settings.EMPTY,threadPool);
    final MultiTermVectorsRequestBuilder request=new MultiTermVectorsRequestBuilder(client,MultiTermVectorsAction.INSTANCE);
    request.add(new TermVectorsRequest("index1","type2","1").routing("1"));
    request.add(new TermVectorsRequest("index1","type2","2"));
    final AtomicBoolean shardActionInvoked=new AtomicBoolean(false);
    transportAction=new TransportMultiTermVectorsAction(Settings.EMPTY,threadPool,transportService,clusterService,shardAction,new ActionFilters(emptySet()),new Resolver()){
      @Override protected void executeShardAction(      final ActionListener<MultiTermVectorsResponse> listener,      final AtomicArray<MultiTermVectorsItemResponse> responses,      final Map<ShardId,MultiTermVectorsShardRequest> shardRequests){
        shardActionInvoked.set(true);
        assertEquals(2,responses.length());
        assertNull(responses.get(0));
        assertThat(responses.get(1).getFailure().getCause(),instanceOf(RoutingMissingException.class));
        assertThat(responses.get(1).getFailure().getCause().getMessage(),equalTo("routing is required for [index1]/[type2]/[2]"));
      }
    }
;
    transportAction.execute(task,request.request(),new ActionListenerAdapter());
    assertTrue(shardActionInvoked.get());
  }
  private static Task createTask(){
    return new Task(randomLong(),"transport",MultiTermVectorsAction.NAME,"description",new TaskId(randomLong() + ":" + randomLong()),emptyMap());
  }
static class Resolver extends IndexNameExpressionResolver {
    Resolver(){
      super(Settings.EMPTY);
    }
    @Override public Index concreteSingleIndex(    ClusterState state,    IndicesRequest request){
      return new Index("index1",randomBase64UUID());
    }
  }
static class ActionListenerAdapter implements ActionListener<MultiTermVectorsResponse> {
    @Override public void onResponse(    MultiTermVectorsResponse response){
    }
    @Override public void onFailure(    Exception e){
    }
  }
}
