private static class PingProbe extends MockTransportService.Tracer {
  private final Set<Tuple<DiscoveryNode,Long>> inflightPings=Collections.newSetFromMap(new ConcurrentHashMap<>());
  private final Set<Tuple<DiscoveryNode,Long>> completedPings=Collections.newSetFromMap(new ConcurrentHashMap<>());
  private final CountDownLatch waitForPings;
  PingProbe(  int minCompletedPings){
    this.waitForPings=new CountDownLatch(minCompletedPings);
  }
  @Override public void requestSent(  DiscoveryNode node,  long requestId,  String action,  TransportRequestOptions options){
    if (MasterFaultDetection.MASTER_PING_ACTION_NAME.equals(action)) {
      inflightPings.add(Tuple.tuple(node,requestId));
    }
  }
  @Override public void receivedResponse(  long requestId,  DiscoveryNode sourceNode,  String action){
    if (MasterFaultDetection.MASTER_PING_ACTION_NAME.equals(action)) {
      Tuple<DiscoveryNode,Long> ping=Tuple.tuple(sourceNode,requestId);
      if (inflightPings.remove(ping)) {
        completedPings.add(ping);
        waitForPings.countDown();
      }
    }
  }
  public int completedPings(){
    return completedPings.size();
  }
  public void awaitMinCompletedPings() throws InterruptedException {
    waitForPings.await();
  }
}
