public class QueryProfilerTests extends ESTestCase {
  static Directory dir;
  static IndexReader reader;
  static ContextIndexSearcher searcher;
  @BeforeClass public static void setup() throws IOException {
    dir=newDirectory();
    RandomIndexWriter w=new RandomIndexWriter(random(),dir);
    final int numDocs=TestUtil.nextInt(random(),1,20);
    for (int i=0; i < numDocs; ++i) {
      final int numHoles=random().nextInt(5);
      for (int j=0; j < numHoles; ++j) {
        w.addDocument(new Document());
      }
      Document doc=new Document();
      doc.add(new StringField("foo","bar",Store.NO));
      w.addDocument(doc);
    }
    reader=w.getReader();
    w.close();
    Engine.Searcher engineSearcher=new Engine.Searcher("test",new IndexSearcher(reader),() -> {
    }
);
    searcher=new ContextIndexSearcher(engineSearcher,IndexSearcher.getDefaultQueryCache(),MAYBE_CACHE_POLICY);
  }
  @AfterClass public static void cleanup() throws IOException {
    IOUtils.close(reader,dir);
    dir=null;
    reader=null;
    searcher=null;
  }
  public void testBasic() throws IOException {
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    Query query=new TermQuery(new Term("foo","bar"));
    searcher.search(query,1);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdown=results.get(0).getTimeBreakdown();
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testConstantScoreQuery() throws IOException {
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    Query query=new ConstantScoreQuery(new TermQuery(new Term("foo","bar")));
    searcher.search(query,1);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdownConstantScoreQuery=results.get(0).getTimeBreakdown();
    assertEquals(1,results.get(0).getProfiledChildren().size());
    Map<String,Long> breakdownTermQuery=results.get(0).getProfiledChildren().get(0).getTimeBreakdown();
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertEquals(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue());
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testConstantScoreTotalHitsBeingCachedQuery() throws IOException {
    Query query=new ConstantScoreQuery(new TermQuery(new Term("foo","bar")));
    searcher.setQueryCache(IndexSearcher.getDefaultQueryCache());
    searcher.setQueryCachingPolicy(ALWAYS_CACHE_POLICY);
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    TotalHitCountCollector collector=new TotalHitCountCollector();
    searcher.search(query,collector);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdownConstantScoreQuery=results.get(0).getTimeBreakdown();
    assertEquals(1,results.get(0).getProfiledChildren().size());
    Map<String,Long> breakdownTermQuery=results.get(0).getProfiledChildren().get(0).getTimeBreakdown();
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testConstantScoreTotalHitsNotCachedQuery() throws IOException {
    Query query=new ConstantScoreQuery(new TermQuery(new Term("foo","bar")));
    searcher.setQueryCache(IndexSearcher.getDefaultQueryCache());
    searcher.setQueryCachingPolicy(NEVER_CACHE_POLICY);
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    TotalHitCountCollector collector=new TotalHitCountCollector();
    searcher.search(query,collector);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdownConstantScoreQuery=results.get(0).getTimeBreakdown();
    assertEquals(1,results.get(0).getProfiledChildren().size());
    Map<String,Long> breakdownTermQuery=results.get(0).getProfiledChildren().get(0).getTimeBreakdown();
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertEquals(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue());
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testConstantScoreTotalHitsCachedQuery() throws IOException {
    Query query=new ConstantScoreQuery(new TermQuery(new Term("foo","bar")));
    searcher.setQueryCache(IndexSearcher.getDefaultQueryCache());
    searcher.setQueryCachingPolicy(ALWAYS_CACHE_POLICY);
    TotalHitCountCollector collector=new TotalHitCountCollector();
    searcher.search(query,collector);
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    collector=new TotalHitCountCollector();
    searcher.search(query,collector);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdownConstantScoreQuery=results.get(0).getTimeBreakdown();
    assertEquals(1,results.get(0).getProfiledChildren().size());
    Map<String,Long> breakdownTermQuery=results.get(0).getProfiledChildren().get(0).getTimeBreakdown();
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testNoScoring() throws IOException {
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    Query query=new TermQuery(new Term("foo","bar"));
    searcher.search(query,1,Sort.INDEXORDER);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdown=results.get(0).getTimeBreakdown();
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(),equalTo(0L));
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testUseIndexStats() throws IOException {
    QueryProfiler profiler=new QueryProfiler();
    searcher.setProfiler(profiler);
    Query query=new TermQuery(new Term("foo","bar"));
    searcher.count(query);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(0,results.size());
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testApproximations() throws IOException {
    QueryProfiler profiler=new QueryProfiler();
    Engine.Searcher engineSearcher=new Engine.Searcher("test",new IndexSearcher(reader),reader::close);
    ContextIndexSearcher searcher=new ContextIndexSearcher(engineSearcher,null,MAYBE_CACHE_POLICY);
    searcher.setProfiler(profiler);
    Query query=new RandomApproximationQuery(new TermQuery(new Term("foo","bar")),random());
    searcher.count(query);
    List<ProfileResult> results=profiler.getTree();
    assertEquals(1,results.size());
    Map<String,Long> breakdown=results.get(0).getTimeBreakdown();
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(),greaterThan(0L));
    assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(),equalTo(0L));
    assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(),greaterThan(0L));
    long rewriteTime=profiler.getRewriteTime();
    assertThat(rewriteTime,greaterThan(0L));
  }
  public void testCollector() throws IOException {
    TotalHitCountCollector collector=new TotalHitCountCollector();
    ProfileCollector profileCollector=new ProfileCollector(collector);
    assertEquals(0,profileCollector.getTime());
    final LeafCollector leafCollector=profileCollector.getLeafCollector(reader.leaves().get(0));
    assertThat(profileCollector.getTime(),greaterThan(0L));
    long time=profileCollector.getTime();
    leafCollector.setScorer(null);
    assertThat(profileCollector.getTime(),greaterThan(time));
    time=profileCollector.getTime();
    leafCollector.collect(0);
    assertThat(profileCollector.getTime(),greaterThan(time));
  }
private static class DummyQuery extends Query {
    @Override public String toString(    String field){
      return getClass().getSimpleName();
    }
    @Override public boolean equals(    Object obj){
      return this == obj;
    }
    @Override public int hashCode(){
      return 0;
    }
    @Override public Weight createWeight(    IndexSearcher searcher,    boolean needsScores,    float boost) throws IOException {
      return new Weight(this){
        @Override public void extractTerms(        Set<Term> terms){
          throw new UnsupportedOperationException();
        }
        @Override public Explanation explain(        LeafReaderContext context,        int doc) throws IOException {
          throw new UnsupportedOperationException();
        }
        @Override public Scorer scorer(        LeafReaderContext context) throws IOException {
          throw new UnsupportedOperationException();
        }
        @Override public ScorerSupplier scorerSupplier(        LeafReaderContext context) throws IOException {
          return new ScorerSupplier(){
            @Override public Scorer get(            long loadCost) throws IOException {
              throw new UnsupportedOperationException();
            }
            @Override public long cost(){
              return 42;
            }
          }
;
        }
        @Override public boolean isCacheable(        LeafReaderContext ctx){
          return true;
        }
      }
;
    }
  }
  public void testScorerSupplier() throws IOException {
    Directory dir=newDirectory();
    IndexWriter w=new IndexWriter(dir,newIndexWriterConfig());
    w.addDocument(new Document());
    DirectoryReader reader=DirectoryReader.open(w);
    w.close();
    IndexSearcher s=newSearcher(reader);
    s.setQueryCache(null);
    Weight weight=s.createNormalizedWeight(new DummyQuery(),randomBoolean());
    expectThrows(UnsupportedOperationException.class,() -> weight.scorer(s.getIndexReader().leaves().get(0)));
    weight.scorerSupplier(s.getIndexReader().leaves().get(0));
    reader.close();
    dir.close();
  }
  private static final QueryCachingPolicy ALWAYS_CACHE_POLICY=new QueryCachingPolicy(){
    @Override public void onUse(    Query query){
    }
    @Override public boolean shouldCache(    Query query) throws IOException {
      return true;
    }
  }
;
  private static final QueryCachingPolicy NEVER_CACHE_POLICY=new QueryCachingPolicy(){
    @Override public void onUse(    Query query){
    }
    @Override public boolean shouldCache(    Query query) throws IOException {
      return false;
    }
  }
;
}
