public class DeprecationIssueTests extends ESTestCase {
  DeprecationIssue issue;
  static DeprecationIssue createTestInstance(){
    String details=randomBoolean() ? randomAlphaOfLength(10) : null;
    return new DeprecationIssue(randomFrom(Level.values()),randomAlphaOfLength(10),randomAlphaOfLength(10),details);
  }
  @Before public void setup(){
    issue=createTestInstance();
  }
  public void testEqualsAndHashCode(){
    DeprecationIssue other=new DeprecationIssue(issue.getLevel(),issue.getMessage(),issue.getUrl(),issue.getDetails());
    assertThat(issue,equalTo(other));
    assertThat(other,equalTo(issue));
    assertThat(issue.hashCode(),equalTo(other.hashCode()));
  }
  public void testSerialization() throws IOException {
    BytesStreamOutput out=new BytesStreamOutput();
    issue.writeTo(out);
    StreamInput in=out.bytes().streamInput();
    DeprecationIssue other=new DeprecationIssue(in);
    assertThat(issue,equalTo(other));
  }
  public void testToXContent() throws IOException {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    issue.toXContent(builder,EMPTY_PARAMS);
    Map<String,Object> toXContentMap=XContentHelper.convertToMap(BytesReference.bytes(builder),false,builder.contentType()).v2();
    String level=(String)toXContentMap.get("level");
    String message=(String)toXContentMap.get("message");
    String url=(String)toXContentMap.get("url");
    if (issue.getDetails() != null) {
      assertTrue(toXContentMap.containsKey("details"));
    }
    String details=(String)toXContentMap.get("details");
    DeprecationIssue other=new DeprecationIssue(Level.fromString(level),message,url,details);
    assertThat(issue,equalTo(other));
  }
}
