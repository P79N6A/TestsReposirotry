public class TestClustersPluginIT extends GradleIntegrationTestCase {
  public void testListClusters(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("listTestClusters","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.SUCCESS,result.task(":listTestClusters").getOutcome());
    assertOutputContains(result.getOutput(),"   * myTestCluster:");
  }
  public void testUseClusterByOne(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("user1","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.SUCCESS,result.task(":user1").getOutcome());
    assertOutputContains(result.getOutput(),"Starting cluster: myTestCluster","Stopping myTestCluster, number of claims is 0");
  }
  public void testUseClusterByOneWithDryRun(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("user1","-s","--dry-run").withPluginClasspath().build();
    assertNull(result.task(":user1"));
    assertOutputDoesNotContain(result.getOutput(),"Starting cluster: myTestCluster","Stopping myTestCluster, number of claims is 0");
  }
  public void testUseClusterByTwo(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("user1","user2","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.SUCCESS,result.task(":user1").getOutcome());
    assertEquals(TaskOutcome.SUCCESS,result.task(":user2").getOutcome());
    assertOutputContains(result.getOutput(),"Starting cluster: myTestCluster","Not stopping myTestCluster, since cluster still has 1 claim(s)","Stopping myTestCluster, number of claims is 0");
  }
  public void testUseClusterByUpToDateTask(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("upToDate1","upToDate2","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.UP_TO_DATE,result.task(":upToDate1").getOutcome());
    assertEquals(TaskOutcome.UP_TO_DATE,result.task(":upToDate2").getOutcome());
    assertOutputContains(result.getOutput(),"Not stopping myTestCluster, since cluster still has 1 claim(s)","cluster was not running: myTestCluster");
    assertOutputDoesNotContain(result.getOutput(),"Starting cluster: myTestCluster");
  }
  public void testUseClusterBySkippedTask(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("skipped1","skipped2","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.SKIPPED,result.task(":skipped1").getOutcome());
    assertEquals(TaskOutcome.SKIPPED,result.task(":skipped2").getOutcome());
    assertOutputContains(result.getOutput(),"Not stopping myTestCluster, since cluster still has 1 claim(s)","cluster was not running: myTestCluster");
    assertOutputDoesNotContain(result.getOutput(),"Starting cluster: myTestCluster");
  }
  public void tetUseClusterBySkippedAndWorkingTask(){
    BuildResult result=GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments("skipped1","user1","-s").withPluginClasspath().build();
    assertEquals(TaskOutcome.SKIPPED,result.task(":skipped1").getOutcome());
    assertEquals(TaskOutcome.SUCCESS,result.task(":user1").getOutcome());
    assertOutputContains(result.getOutput(),"> Task :user1","Starting cluster: myTestCluster","Stopping myTestCluster, number of claims is 0");
  }
}
