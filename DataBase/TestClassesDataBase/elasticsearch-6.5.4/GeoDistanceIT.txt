public class GeoDistanceIT extends ESIntegTestCase {
  private static final double src_lat=32.798;
  private static final double src_lon=-117.151;
  private static final double tgt_lat=32.81;
  private static final double tgt_lon=-117.21;
  private static final String tgt_geohash=GeoHashUtils.stringEncode(tgt_lon,tgt_lat);
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Collections.singletonList(CustomScriptPlugin.class);
  }
public static class CustomScriptPlugin extends MockScriptPlugin {
    @Override protected Map<String,Function<Map<String,Object>,Object>> pluginScripts(){
      Map<String,Function<Map<String,Object>,Object>> scripts=new HashMap<>();
      scripts.put("arcDistance",vars -> distanceScript(vars,location -> location.arcDistance(tgt_lat,tgt_lon)));
      scripts.put("arcDistanceGeoUtils",vars -> distanceScript(vars,location -> GeoUtils.arcDistance(location.getLat(),location.getLon(),tgt_lat,tgt_lon)));
      scripts.put("planeDistance",vars -> distanceScript(vars,location -> location.planeDistance(tgt_lat,tgt_lon)));
      scripts.put("geohashDistance",vars -> distanceScript(vars,location -> location.geohashDistance(tgt_geohash)));
      scripts.put("arcDistance(lat, lon + 360)/1000d",vars -> distanceScript(vars,location -> location.arcDistance(tgt_lat,tgt_lon + 360) / 1000d));
      scripts.put("arcDistance(lat + 360, lon)/1000d",vars -> distanceScript(vars,location -> location.arcDistance(tgt_lat + 360,tgt_lon) / 1000d));
      return scripts;
    }
    static Double distanceScript(    Map<String,Object> vars,    Function<ScriptDocValues.GeoPoints,Double> distance){
      Map<?,?> doc=(Map)vars.get("doc");
      return distance.apply((ScriptDocValues.GeoPoints)doc.get("location"));
    }
  }
  @Override protected boolean forbidPrivateIndexSettings(){
    return false;
  }
  @Before public void setupTestIndex() throws IOException {
    Version version=VersionUtils.randomVersionBetween(random(),Version.V_5_0_0,Version.CURRENT);
    Settings settings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type","geo_point");
    xContentBuilder.endObject().endObject().endObject().endObject();
    assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1",xContentBuilder));
    ensureGreen();
  }
  public void testDistanceScript() throws Exception {
    client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("name","TestPosition").startObject("location").field("lat",src_lat).field("lon",src_lon).endObject().endObject()).get();
    refresh();
    SearchResponse searchResponse1=client().prepareSearch().addStoredField("_source").addScriptField("distance",new Script(ScriptType.INLINE,CustomScriptPlugin.NAME,"arcDistance",Collections.emptyMap())).get();
    Double resultDistance1=searchResponse1.getHits().getHits()[0].getFields().get("distance").getValue();
    assertThat(resultDistance1,closeTo(GeoUtils.arcDistance(src_lat,src_lon,tgt_lat,tgt_lon),0.01d));
    SearchResponse searchResponse2=client().prepareSearch().addStoredField("_source").addScriptField("distance",new Script(ScriptType.INLINE,CustomScriptPlugin.NAME,"planeDistance",Collections.emptyMap())).get();
    Double resultDistance2=searchResponse2.getHits().getHits()[0].getFields().get("distance").getValue();
    assertThat(resultDistance2,closeTo(GeoUtils.planeDistance(src_lat,src_lon,tgt_lat,tgt_lon),0.01d));
    SearchResponse searchResponse4=client().prepareSearch().addStoredField("_source").addScriptField("distance",new Script(ScriptType.INLINE,CustomScriptPlugin.NAME,"geohashDistance",Collections.emptyMap())).get();
    Double resultDistance4=searchResponse4.getHits().getHits()[0].getFields().get("distance").getValue();
    assertThat(resultDistance4,closeTo(GeoUtils.arcDistance(src_lat,src_lon,GeoHashUtils.decodeLatitude(tgt_geohash),GeoHashUtils.decodeLongitude(tgt_geohash)),0.01d));
    SearchResponse searchResponse5=client().prepareSearch().addStoredField("_source").addScriptField("distance",new Script(ScriptType.INLINE,CustomScriptPlugin.NAME,"arcDistance(lat, lon + 360)/1000d",Collections.emptyMap())).get();
    Double resultArcDistance5=searchResponse5.getHits().getHits()[0].getFields().get("distance").getValue();
    assertThat(resultArcDistance5,closeTo(GeoUtils.arcDistance(src_lat,src_lon,tgt_lat,tgt_lon) / 1000d,0.01d));
    SearchResponse searchResponse6=client().prepareSearch().addStoredField("_source").addScriptField("distance",new Script(ScriptType.INLINE,CustomScriptPlugin.NAME,"arcDistance(lat + 360, lon)/1000d",Collections.emptyMap())).get();
    Double resultArcDistance6=searchResponse6.getHits().getHits()[0].getFields().get("distance").getValue();
    assertThat(resultArcDistance6,closeTo(GeoUtils.arcDistance(src_lat,src_lon,tgt_lat,tgt_lon) / 1000d,0.01d));
  }
  public void testGeoDistanceAggregation() throws IOException {
    client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("name","TestPosition").startObject("location").field("lat",src_lat).field("lon",src_lon).endObject().endObject()).get();
    refresh();
    SearchRequestBuilder search=client().prepareSearch("test");
    String name="TestPosition";
    search.setQuery(QueryBuilders.matchAllQuery()).setTypes("type1").addAggregation(AggregationBuilders.geoDistance(name,new GeoPoint(tgt_lat,tgt_lon)).field("location").unit(DistanceUnit.MILES).addRange(0,25000));
    search.setSize(0);
    SearchResponse response=search.get();
    Aggregations aggregations=response.getAggregations();
    assertNotNull(aggregations);
    InternalGeoDistance geoDistance=aggregations.get(name);
    assertNotNull(geoDistance);
    List<? extends Range.Bucket> buckets=((Range)geoDistance).getBuckets();
    assertNotNull("Buckets should not be null",buckets);
    assertEquals("Unexpected number of buckets",1,buckets.size());
    assertEquals("Unexpected doc count for geo distance",1,buckets.get(0).getDocCount());
  }
}
