/** 
 * This tests that configurations that contain two AD realms work correctly. The required behaviour is that users from both realms (directory servers) can be authenticated using just their userid (the AuthenticationService tries them in order)
 */
public class MultipleAdRealmIT extends AbstractAdLdapRealmTestCase {
  private static RealmConfig secondaryRealmConfig;
  @BeforeClass public static void setupSecondaryRealm(){
    final List<RealmConfig> configs=Arrays.stream(RealmConfig.values()).filter(config -> config.loginWithCommonName != AbstractAdLdapRealmTestCase.realmConfig.loginWithCommonName).filter(config -> config.name().startsWith("AD")).collect(Collectors.toList());
    secondaryRealmConfig=randomFrom(configs);
    LogManager.getLogger(MultipleAdRealmIT.class).info("running test with secondary realm configuration [{}], with direct group to role mapping [{}]. Settings [{}]",secondaryRealmConfig,secondaryRealmConfig.mapGroupsAsRoles,secondaryRealmConfig.settings);
    AbstractAdLdapRealmTestCase.roleMappings=realmConfig.selectRoleMappings(() -> true);
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    Settings.Builder builder=Settings.builder();
    builder.put(super.nodeSettings(nodeOrdinal));
    final List<RoleMappingEntry> secondaryRoleMappings=secondaryRealmConfig.selectRoleMappings(() -> true);
    final Settings secondarySettings=super.buildRealmSettings(secondaryRealmConfig,secondaryRoleMappings,getNodeTrustedCertificates());
    secondarySettings.keySet().forEach(name -> {
      String newName=name.replace(XPACK_SECURITY_AUTHC_REALMS_EXTERNAL,XPACK_SECURITY_AUTHC_REALMS_EXTERNAL + "2");
      builder.copy(newName,name,secondarySettings);
    }
);
    return builder.build();
  }
  /** 
 * Test that both realms support user login. Implementation wise, this means that if the first realm reject the authentication attempt, then the second realm will be tried. Because one realm is using "common name" (cn) for login, and the other uses the "userid" (sAMAccountName) [see {@link #setupSecondaryRealm()}], this is simply a matter of checking that we can authenticate with both identifiers.
 */
  public void testCanAuthenticateAgainstBothRealms() throws IOException {
    assertAccessAllowed("Natasha Romanoff","avengers");
    assertAccessAllowed("blackwidow","avengers");
  }
}
