public class SecurityNetty4ServerTransportTests extends ESTestCase {
  private Environment env;
  private SSLService sslService;
  @Before public void createSSLService() throws Exception {
    Path testnodeCert=getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt");
    Path testnodeKey=getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem");
    MockSecureSettings secureSettings=new MockSecureSettings();
    secureSettings.setString("xpack.ssl.secure_key_passphrase","testnode");
    Settings settings=Settings.builder().put("xpack.security.transport.ssl.enabled",true).put("xpack.ssl.key",testnodeKey).put("xpack.ssl.certificate",testnodeCert).setSecureSettings(secureSettings).put("path.home",createTempDir()).build();
    env=TestEnvironment.newEnvironment(settings);
    sslService=new SSLService(settings,env);
  }
  private SecurityNetty4Transport createTransport(){
    return createTransport(Settings.builder().put("xpack.security.transport.ssl.enabled",true).build());
  }
  private SecurityNetty4Transport createTransport(  Settings additionalSettings){
    final Settings settings=Settings.builder().put("xpack.security.transport.ssl.enabled",true).put(additionalSettings).build();
    return new SecurityNetty4ServerTransport(settings,mock(ThreadPool.class),new NetworkService(Collections.emptyList()),mock(BigArrays.class),mock(NamedWriteableRegistry.class),mock(CircuitBreakerService.class),null,sslService);
  }
  public void testThatProfileTakesDefaultSSLSetting() throws Exception {
    SecurityNetty4Transport transport=createTransport();
    ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine(),notNullValue());
  }
  public void testDefaultClientAuth() throws Exception {
    SecurityNetty4Transport transport=createTransport();
    ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(true));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(false));
  }
  public void testRequiredClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.REQUIRED.name(),SSLClientAuth.REQUIRED.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("xpack.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(true));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(false));
  }
  public void testNoClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.NONE.name(),SSLClientAuth.NONE.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("xpack.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(false));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(false));
  }
  public void testOptionalClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.OPTIONAL.name(),SSLClientAuth.OPTIONAL.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("xpack.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(false));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(true));
  }
  public void testProfileRequiredClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.REQUIRED.name(),SSLClientAuth.REQUIRED.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("transport.profiles.client.port","8000-9000").put("transport.profiles.client.xpack.security.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    ChannelHandler handler=transport.getServerChannelInitializer("client");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(true));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(false));
  }
  public void testProfileNoClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.NONE.name(),SSLClientAuth.NONE.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("transport.profiles.client.port","8000-9000").put("transport.profiles.client.xpack.security.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    ChannelHandler handler=transport.getServerChannelInitializer("client");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(false));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(false));
  }
  public void testProfileOptionalClientAuth() throws Exception {
    String value=randomFrom(SSLClientAuth.OPTIONAL.name(),SSLClientAuth.OPTIONAL.name().toLowerCase(Locale.ROOT));
    Settings settings=Settings.builder().put(env.settings()).put("transport.profiles.client.port","8000-9000").put("transport.profiles.client.xpack.security.ssl.client_authentication",value).build();
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    final ChannelHandler handler=transport.getServerChannelInitializer("client");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(),is(false));
    assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(),is(true));
  }
  public void testTransportSSLOverridesGlobalSSL() throws Exception {
    MockSecureSettings secureSettings=new MockSecureSettings();
    secureSettings.setString("xpack.security.transport.ssl.secure_key_passphrase","testnode");
    Settings.Builder builder=Settings.builder().put("xpack.security.transport.ssl.enabled",true).put("xpack.security.transport.ssl.key",getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem")).put("xpack.security.transport.ssl.certificate",getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).put("xpack.security.transport.ssl.client_authentication","none").put("xpack.ssl.certificate_authorities",getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).setSecureSettings(secureSettings).put("path.home",createTempDir());
    Settings settings=builder.build();
    env=TestEnvironment.newEnvironment(settings);
    sslService=new SSLService(settings,env);
    SecurityNetty4Transport transport=createTransport(settings);
    final ChannelHandler handler=transport.getServerChannelInitializer("default");
    final EmbeddedChannel ch=new EmbeddedChannel(handler);
    final SSLEngine engine=ch.pipeline().get(SslHandler.class).engine();
    assertFalse(engine.getNeedClientAuth());
    assertFalse(engine.getWantClientAuth());
    SSLConfiguration configuration=sslService.getSSLConfiguration("xpack.ssl");
    assertNotNull(configuration);
    final SSLEngine globalEngine=sslService.createSSLEngine(configuration,null,-1);
    assertTrue(globalEngine.getNeedClientAuth());
    assertFalse(globalEngine.getWantClientAuth());
  }
}
