/** 
 * Tests that requests with RefreshPolicy.WAIT_UNTIL will be visible when they return.
 */
public class WaitUntilRefreshIT extends ESIntegTestCase {
  @Override public Settings indexSettings(){
    return Settings.builder().put(super.indexSettings()).put("index.refresh_interval","40ms").build();
  }
  @Before public void createTestIndex(){
    createIndex("test");
  }
  public void testIndex(){
    IndexResponse index=client().prepareIndex("test","index","1").setSource("foo","bar").setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).get();
    assertEquals(RestStatus.CREATED,index.status());
    assertFalse("request shouldn't have forced a refresh",index.forcedRefresh());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get(),"1");
  }
  public void testDelete() throws InterruptedException, ExecutionException {
    indexRandom(true,client().prepareIndex("test","test","1").setSource("foo","bar"));
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get(),"1");
    DeleteResponse delete=client().prepareDelete("test","test","1").setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).get();
    assertEquals(DocWriteResponse.Result.DELETED,delete.getResult());
    assertFalse("request shouldn't have forced a refresh",delete.forcedRefresh());
    assertNoSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get());
  }
  public void testUpdate() throws InterruptedException, ExecutionException {
    indexRandom(true,client().prepareIndex("test","test","1").setSource("foo","bar"));
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get(),"1");
    UpdateResponse update=client().prepareUpdate("test","test","1").setDoc(Requests.INDEX_CONTENT_TYPE,"foo","baz").setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).get();
    assertEquals(2,update.getVersion());
    assertFalse("request shouldn't have forced a refresh",update.forcedRefresh());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","baz")).get(),"1");
    update=client().prepareUpdate("test","test","2").setDocAsUpsert(true).setDoc(Requests.INDEX_CONTENT_TYPE,"foo","cat").setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).get();
    assertEquals(1,update.getVersion());
    assertFalse("request shouldn't have forced a refresh",update.forcedRefresh());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","cat")).get(),"2");
    update=client().prepareUpdate("test","test","2").setScript(new Script(ScriptType.INLINE,"mockscript","delete_plz",emptyMap())).setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).get();
    assertEquals(2,update.getVersion());
    assertFalse("request shouldn't have forced a refresh",update.forcedRefresh());
    assertNoSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","cat")).get());
  }
  public void testBulk(){
    BulkRequestBuilder bulk=client().prepareBulk().setRefreshPolicy(RefreshPolicy.WAIT_UNTIL);
    bulk.add(client().prepareIndex("test","test","1").setSource("foo","bar"));
    assertBulkSuccess(bulk.get());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get(),"1");
    bulk=client().prepareBulk().setRefreshPolicy(RefreshPolicy.WAIT_UNTIL);
    bulk.add(client().prepareUpdate("test","test","1").setDoc(Requests.INDEX_CONTENT_TYPE,"foo","baz"));
    assertBulkSuccess(bulk.get());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","baz")).get(),"1");
    bulk=client().prepareBulk().setRefreshPolicy(RefreshPolicy.WAIT_UNTIL);
    bulk.add(client().prepareDelete("test","test","1"));
    assertBulkSuccess(bulk.get());
    assertNoSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get());
    bulk=client().prepareBulk().setRefreshPolicy(RefreshPolicy.WAIT_UNTIL);
    bulk.add(client().prepareDelete("test","test","1"));
    assertBulkSuccess(bulk.get());
  }
  /** 
 * Tests that an explicit request makes block_until_refresh return. It doesn't check that block_until_refresh doesn't return until the explicit refresh if the interval is -1 because we don't have that kind of control over refresh. It can happen all on its own.
 */
  public void testNoRefreshInterval() throws InterruptedException, ExecutionException {
    client().admin().indices().prepareUpdateSettings("test").setSettings(singletonMap("index.refresh_interval",-1)).get();
    ActionFuture<IndexResponse> index=client().prepareIndex("test","index","1").setSource("foo","bar").setRefreshPolicy(RefreshPolicy.WAIT_UNTIL).execute();
    while (false == index.isDone()) {
      client().admin().indices().prepareRefresh("test").get();
    }
    assertEquals(RestStatus.CREATED,index.get().status());
    assertFalse("request shouldn't have forced a refresh",index.get().forcedRefresh());
    assertSearchHits(client().prepareSearch("test").setQuery(matchQuery("foo","bar")).get(),"1");
  }
  private void assertBulkSuccess(  BulkResponse response){
    assertNoFailures(response);
    for (    BulkItemResponse item : response) {
      assertFalse("request shouldn't have forced a refresh",item.getResponse().forcedRefresh());
    }
  }
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return singleton(DeletePlzPlugin.class);
  }
public static class DeletePlzPlugin extends MockScriptPlugin {
    @Override public Map<String,Function<Map<String,Object>,Object>> pluginScripts(){
      return Collections.singletonMap("delete_plz",params -> {
        @SuppressWarnings("unchecked") Map<String,Object> ctx=(Map<String,Object>)params.get("ctx");
        ctx.put("op","delete");
        return null;
      }
);
    }
  }
}
