public class EvilBootstrapChecksTests extends ESTestCase {
  private String esEnforceBootstrapChecks=System.getProperty(ES_ENFORCE_BOOTSTRAP_CHECKS);
  @Override @Before public void setUp() throws Exception {
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    setEsEnforceBootstrapChecks(esEnforceBootstrapChecks);
    super.tearDown();
  }
  public void testEnforceBootstrapChecks() throws NodeValidationException {
    setEsEnforceBootstrapChecks("true");
    final List<BootstrapCheck> checks=Collections.singletonList(context -> BootstrapCheck.BootstrapCheckResult.failure("error"));
    final Logger logger=mock(Logger.class);
    final NodeValidationException e=expectThrows(NodeValidationException.class,() -> BootstrapChecks.check(new BootstrapContext(Settings.EMPTY,null),false,checks,logger));
    final Matcher<String> allOf=allOf(containsString("bootstrap checks failed"),containsString("error"));
    assertThat(e,hasToString(allOf));
    verify(logger).info("explicitly enforcing bootstrap checks");
    verifyNoMoreInteractions(logger);
  }
  public void testNonEnforcedBootstrapChecks() throws NodeValidationException {
    setEsEnforceBootstrapChecks(null);
    final Logger logger=mock(Logger.class);
    BootstrapChecks.check(new BootstrapContext(Settings.EMPTY,null),false,emptyList(),logger);
    verifyNoMoreInteractions(logger);
  }
  public void testInvalidValue(){
    final String value=randomAlphaOfLength(8);
    setEsEnforceBootstrapChecks(value);
    final boolean enforceLimits=randomBoolean();
    final IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> BootstrapChecks.check(new BootstrapContext(Settings.EMPTY,null),enforceLimits,emptyList()));
    final Matcher<String> matcher=containsString("[es.enforce.bootstrap.checks] must be [true] but was [" + value + "]");
    assertThat(e,hasToString(matcher));
  }
  @SuppressForbidden(reason="set or clear system property es.enforce.bootstrap.checks") public void setEsEnforceBootstrapChecks(  final String value){
    if (value == null) {
      System.clearProperty(ES_ENFORCE_BOOTSTRAP_CHECKS);
    }
 else {
      System.setProperty(ES_ENFORCE_BOOTSTRAP_CHECKS,value);
    }
  }
}
