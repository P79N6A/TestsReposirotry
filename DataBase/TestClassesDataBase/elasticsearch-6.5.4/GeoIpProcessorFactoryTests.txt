public class GeoIpProcessorFactoryTests extends ESTestCase {
  private static Map<String,DatabaseReaderLazyLoader> databaseReaders;
  @BeforeClass public static void loadDatabaseReaders() throws IOException {
    if (Constants.WINDOWS) {
      return;
    }
    Path configDir=createTempDir();
    Path geoIpConfigDir=configDir.resolve("ingest-geoip");
    Files.createDirectories(geoIpConfigDir);
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-City.mmdb")),geoIpConfigDir.resolve("GeoLite2-City.mmdb"));
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-Country.mmdb")),geoIpConfigDir.resolve("GeoLite2-Country.mmdb"));
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-ASN.mmdb")),geoIpConfigDir.resolve("GeoLite2-ASN.mmdb"));
    databaseReaders=IngestGeoIpPlugin.loadDatabaseReaders(geoIpConfigDir);
  }
  @AfterClass public static void closeDatabaseReaders() throws IOException {
    if (Constants.WINDOWS) {
      return;
    }
    for (    DatabaseReaderLazyLoader reader : databaseReaders.values()) {
      reader.close();
    }
    databaseReaders=null;
  }
  public void testBuildDefaults() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    String processorTag=randomAlphaOfLength(10);
    GeoIpProcessor processor=factory.create(null,processorTag,config);
    assertThat(processor.getTag(),equalTo(processorTag));
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("geoip"));
    assertThat(processor.getDbReader().getMetadata().getDatabaseType(),equalTo("GeoLite2-City"));
    assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_CITY_PROPERTIES));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testSetIgnoreMissing() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("ignore_missing",true);
    String processorTag=randomAlphaOfLength(10);
    GeoIpProcessor processor=factory.create(null,processorTag,config);
    assertThat(processor.getTag(),equalTo(processorTag));
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("geoip"));
    assertThat(processor.getDbReader().getMetadata().getDatabaseType(),equalTo("GeoLite2-City"));
    assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_CITY_PROPERTIES));
    assertTrue(processor.isIgnoreMissing());
  }
  public void testCountryBuildDefaults() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-Country.mmdb");
    String processorTag=randomAlphaOfLength(10);
    GeoIpProcessor processor=factory.create(null,processorTag,config);
    assertThat(processor.getTag(),equalTo(processorTag));
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("geoip"));
    assertThat(processor.getDbReader().getMetadata().getDatabaseType(),equalTo("GeoLite2-Country"));
    assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_COUNTRY_PROPERTIES));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testAsnBuildDefaults() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-ASN.mmdb");
    String processorTag=randomAlphaOfLength(10);
    GeoIpProcessor processor=factory.create(null,processorTag,config);
    assertThat(processor.getTag(),equalTo(processorTag));
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("geoip"));
    assertThat(processor.getDbReader().getMetadata().getDatabaseType(),equalTo("GeoLite2-ASN"));
    assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_ASN_PROPERTIES));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testBuildTargetField() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("target_field","_field");
    GeoIpProcessor processor=factory.create(null,null,config);
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("_field"));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testBuildDbFile() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-Country.mmdb");
    GeoIpProcessor processor=factory.create(null,null,config);
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getTargetField(),equalTo("geoip"));
    assertThat(processor.getDbReader().getMetadata().getDatabaseType(),equalTo("GeoLite2-Country"));
    assertThat(processor.getProperties(),sameInstance(GeoIpProcessor.Factory.DEFAULT_COUNTRY_PROPERTIES));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testBuildWithCountryDbAndAsnFields() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-Country.mmdb");
    EnumSet<GeoIpProcessor.Property> asnOnlyProperties=EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);
    asnOnlyProperties.remove(GeoIpProcessor.Property.IP);
    String asnProperty=RandomPicks.randomFrom(Randomness.get(),asnOnlyProperties).toString();
    config.put("properties",Collections.singletonList(asnProperty));
    Exception e=expectThrows(ElasticsearchParseException.class,() -> factory.create(null,null,config));
    assertThat(e.getMessage(),equalTo("[properties] illegal property value [" + asnProperty + "]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]"));
  }
  public void testBuildWithAsnDbAndCityFields() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-ASN.mmdb");
    EnumSet<GeoIpProcessor.Property> cityOnlyProperties=EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);
    cityOnlyProperties.remove(GeoIpProcessor.Property.IP);
    String cityProperty=RandomPicks.randomFrom(Randomness.get(),cityOnlyProperties).toString();
    config.put("properties",Collections.singletonList(cityProperty));
    Exception e=expectThrows(ElasticsearchParseException.class,() -> factory.create(null,null,config));
    assertThat(e.getMessage(),equalTo("[properties] illegal property value [" + cityProperty + "]. valid values are [IP, ASN, ORGANIZATION_NAME]"));
  }
  public void testBuildNonExistingDbFile() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","does-not-exist.mmdb");
    Exception e=expectThrows(ElasticsearchParseException.class,() -> factory.create(null,null,config));
    assertThat(e.getMessage(),equalTo("[database_file] database file [does-not-exist.mmdb] doesn't exist"));
  }
  public void testBuildFields() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Set<GeoIpProcessor.Property> properties=EnumSet.noneOf(GeoIpProcessor.Property.class);
    List<String> fieldNames=new ArrayList<>();
    int counter=0;
    int numFields=scaledRandomIntBetween(1,GeoIpProcessor.Property.values().length);
    for (    GeoIpProcessor.Property property : GeoIpProcessor.Property.ALL_CITY_PROPERTIES) {
      properties.add(property);
      fieldNames.add(property.name().toLowerCase(Locale.ROOT));
      if (++counter >= numFields) {
        break;
      }
    }
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("properties",fieldNames);
    GeoIpProcessor processor=factory.create(null,null,config);
    assertThat(processor.getField(),equalTo("_field"));
    assertThat(processor.getProperties(),equalTo(properties));
    assertFalse(processor.isIgnoreMissing());
  }
  public void testBuildIllegalFieldOption() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    Map<String,Object> config1=new HashMap<>();
    config1.put("field","_field");
    config1.put("properties",Collections.singletonList("invalid"));
    Exception e=expectThrows(ElasticsearchParseException.class,() -> factory.create(null,null,config1));
    assertThat(e.getMessage(),equalTo("[properties] illegal property value [invalid]. valid values are [IP, COUNTRY_ISO_CODE, " + "COUNTRY_NAME, CONTINENT_NAME, REGION_ISO_CODE, REGION_NAME, CITY_NAME, TIMEZONE, LOCATION]"));
    Map<String,Object> config2=new HashMap<>();
    config2.put("field","_field");
    config2.put("properties","invalid");
    e=expectThrows(ElasticsearchParseException.class,() -> factory.create(null,null,config2));
    assertThat(e.getMessage(),equalTo("[properties] property isn't a list, but of type [java.lang.String]"));
  }
  public void testLazyLoading() throws Exception {
    assumeFalse("windows deletion behavior is asinine",Constants.WINDOWS);
    Path configDir=createTempDir();
    Path geoIpConfigDir=configDir.resolve("ingest-geoip");
    Files.createDirectories(geoIpConfigDir);
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-City.mmdb")),geoIpConfigDir.resolve("GeoLite2-City.mmdb"));
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-Country.mmdb")),geoIpConfigDir.resolve("GeoLite2-Country.mmdb"));
    Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-ASN.mmdb")),geoIpConfigDir.resolve("GeoLite2-ASN.mmdb"));
    Map<String,DatabaseReaderLazyLoader> databaseReaders=IngestGeoIpPlugin.loadDatabaseReaders(geoIpConfigDir);
    GeoIpProcessor.Factory factory=new GeoIpProcessor.Factory(databaseReaders,new GeoIpCache(1000));
    for (    DatabaseReaderLazyLoader lazyLoader : databaseReaders.values()) {
      assertNull(lazyLoader.databaseReader.get());
    }
    Map<String,Object> config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-City.mmdb");
    factory.create(null,"_tag",config);
    config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-Country.mmdb");
    factory.create(null,"_tag",config);
    config=new HashMap<>();
    config.put("field","_field");
    config.put("database_file","GeoLite2-ASN.mmdb");
    factory.create(null,"_tag",config);
    for (    DatabaseReaderLazyLoader lazyLoader : databaseReaders.values()) {
      assertNotNull(lazyLoader.databaseReader.get());
    }
  }
}
