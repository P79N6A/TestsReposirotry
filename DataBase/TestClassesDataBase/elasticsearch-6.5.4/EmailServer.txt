/** 
 * An mini email smtp server that can be used for unit testing
 */
public class EmailServer {
  public static final String USERNAME="_user";
  public static final String PASSWORD="_passwd";
  private final List<Listener> listeners=new CopyOnWriteArrayList<>();
  private final SMTPServer server;
  public EmailServer(  String host,  final Logger logger){
    server=new SMTPServer(new SimpleMessageListenerAdapter(new SimpleMessageListener(){
      @Override public boolean accept(      String from,      String recipient){
        return true;
      }
      @Override public void deliver(      String from,      String recipient,      InputStream data) throws IOException {
        try {
          Session session=Session.getInstance(new Properties());
          MimeMessage msg=new MimeMessage(session,data);
          for (          Listener listener : listeners) {
            try {
              listener.on(msg);
            }
 catch (            Exception e) {
              logger.error("Unexpected failure",e);
              fail(e.getMessage());
            }
          }
        }
 catch (        MessagingException me) {
          throw new RuntimeException("could not create mime message",me);
        }
      }
    }
),new EasyAuthenticationHandlerFactory((user,passwd) -> {
      assertThat(user,is(USERNAME));
      assertThat(passwd,is(PASSWORD));
    }
));
    server.setHostName(host);
    server.setPort(0);
  }
  /** 
 * @return the port that the underlying server is listening on
 */
  public int port(){
    return server.getPort();
  }
  public void start(){
    AccessController.doPrivileged((PrivilegedAction<Void>)() -> {
      server.start();
      return null;
    }
);
  }
  public void stop(){
    server.stop();
    listeners.clear();
  }
  public void addListener(  Listener listener){
    listeners.add(listener);
  }
  public static EmailServer localhost(  final Logger logger){
    EmailServer server=new EmailServer("localhost",logger);
    server.start();
    return server;
  }
@FunctionalInterface public interface Listener {
    void on(    MimeMessage message) throws Exception ;
  }
}
