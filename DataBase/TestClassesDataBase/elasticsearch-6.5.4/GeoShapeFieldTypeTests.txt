public class GeoShapeFieldTypeTests extends FieldTypeTestCase {
  @Override protected MappedFieldType createDefaultFieldType(){
    return new GeoShapeFieldMapper.GeoShapeFieldType();
  }
  @Before public void setupProperties(){
    addModifier(new Modifier("tree",false){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setTree("quadtree");
      }
    }
);
    addModifier(new Modifier("strategy",false){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setStrategyName("term");
      }
    }
);
    addModifier(new Modifier("tree_levels",false){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setTreeLevels(10);
      }
    }
);
    addModifier(new Modifier("precision",false){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setPrecisionInMeters(20);
      }
    }
);
    addModifier(new Modifier("distance_error_pct",true){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setDefaultDistanceErrorPct(0.5);
      }
    }
);
    addModifier(new Modifier("orientation",true){
      @Override public void modify(      MappedFieldType ft){
        ((GeoShapeFieldMapper.GeoShapeFieldType)ft).setOrientation(ShapeBuilder.Orientation.LEFT);
      }
    }
);
  }
  /** 
 * Test for  {@link GeoShapeFieldType#setStrategyName(String)} that checks that {@link GeoShapeFieldType#pointsOnly()}gets set as a side effect when using SpatialStrategy.TERM
 */
  public void testSetStrategyName() throws IOException {
    GeoShapeFieldType fieldType=new GeoShapeFieldMapper.GeoShapeFieldType();
    assertFalse(fieldType.pointsOnly());
    fieldType.setStrategyName(SpatialStrategy.RECURSIVE.getStrategyName());
    assertFalse(fieldType.pointsOnly());
    fieldType.setStrategyName(SpatialStrategy.TERM.getStrategyName());
    assertTrue(fieldType.pointsOnly());
  }
}
