/** 
 * This test verifies that the _agg param is added correctly when the system property "es.aggregations.enable_scripted_metric_agg_param" is set to true.
 */
public class ScriptedMetricAggregatorAggStateV6CompatTests extends AggregatorTestCase {
  private static final String AGG_NAME="scriptedMetric";
  private static final Script INIT_SCRIPT=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"initScript",Collections.emptyMap());
  private static final Script MAP_SCRIPT=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"mapScript",Collections.emptyMap());
  private static final Script COMBINE_SCRIPT=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"combineScript",Collections.emptyMap());
  private static final Script INIT_SCRIPT_EXPLICIT_AGG=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"initScriptExplicitAgg",Collections.emptyMap());
  private static final Script MAP_SCRIPT_EXPLICIT_AGG=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"mapScriptExplicitAgg",Collections.emptyMap());
  private static final Script COMBINE_SCRIPT_EXPLICIT_AGG=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"combineScriptExplicitAgg",Collections.emptyMap());
  private static final String EXPLICIT_AGG_OBJECT="Explicit agg object";
  private static final Map<String,Function<Map<String,Object>,Object>> SCRIPTS=new HashMap<>();
  @BeforeClass @SuppressWarnings("unchecked") public static void initMockScripts(){
    SCRIPTS.put("initScript",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      Object state=vars.get("state");
      assertThat(agg,instanceOf(Map.class));
      assertThat(agg,sameInstance(state));
      return agg;
    }
);
    SCRIPTS.put("mapScript",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      Object state=vars.get("state");
      assertThat(agg,instanceOf(Map.class));
      assertThat(agg,sameInstance(state));
      return agg;
    }
);
    SCRIPTS.put("combineScript",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      Object state=vars.get("state");
      assertThat(agg,instanceOf(Map.class));
      assertThat(agg,sameInstance(state));
      return agg;
    }
);
    SCRIPTS.put("initScriptExplicitAgg",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      assertThat(agg,equalTo(EXPLICIT_AGG_OBJECT));
      return agg;
    }
);
    SCRIPTS.put("mapScriptExplicitAgg",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      assertThat(agg,equalTo(EXPLICIT_AGG_OBJECT));
      return agg;
    }
);
    SCRIPTS.put("combineScriptExplicitAgg",vars -> {
      Object agg=((Map<String,Object>)vars.get("params")).get("_agg");
      assertThat(agg,equalTo(EXPLICIT_AGG_OBJECT));
      return agg;
    }
);
  }
  /** 
 * Test that the _agg param is implicitly added
 */
  public void testWithImplicitAggParam() throws IOException {
    try (Directory directory=newDirectory()){
      Integer numDocs=10;
      try (RandomIndexWriter indexWriter=new RandomIndexWriter(random(),directory)){
        for (int i=0; i < numDocs; i++) {
          indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number",i)));
        }
      }
       try (IndexReader indexReader=DirectoryReader.open(directory)){
        ScriptedMetricAggregationBuilder aggregationBuilder=new ScriptedMetricAggregationBuilder(AGG_NAME);
        aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT);
        search(newSearcher(indexReader,true,true),new MatchAllDocsQuery(),aggregationBuilder);
      }
     }
     assertWarnings("Accessing variable [_agg] via [params._agg] from within a scripted metric agg init script " + "is deprecated in favor of using [state].","Accessing variable [_agg] via [params._agg] from within a scripted metric agg map script " + "is deprecated in favor of using [state].","Accessing variable [_agg] via [params._agg] from within a scripted metric agg combine script " + "is deprecated in favor of using [state].","[reduceScript] must be provided for metric aggregations.");
  }
  /** 
 * Test that an explicitly added _agg param is honored
 */
  public void testWithExplicitAggParam() throws IOException {
    try (Directory directory=newDirectory()){
      Integer numDocs=10;
      try (RandomIndexWriter indexWriter=new RandomIndexWriter(random(),directory)){
        for (int i=0; i < numDocs; i++) {
          indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number",i)));
        }
      }
       Map<String,Object> aggParams=new HashMap<>();
      aggParams.put("_agg",EXPLICIT_AGG_OBJECT);
      try (IndexReader indexReader=DirectoryReader.open(directory)){
        ScriptedMetricAggregationBuilder aggregationBuilder=new ScriptedMetricAggregationBuilder(AGG_NAME);
        aggregationBuilder.params(aggParams).initScript(INIT_SCRIPT_EXPLICIT_AGG).mapScript(MAP_SCRIPT_EXPLICIT_AGG).combineScript(COMBINE_SCRIPT_EXPLICIT_AGG);
        search(newSearcher(indexReader,true,true),new MatchAllDocsQuery(),aggregationBuilder);
      }
     }
     assertWarnings("Accessing variable [_agg] via [params._agg] from within a scripted metric agg init script " + "is deprecated in favor of using [state].","Accessing variable [_agg] via [params._agg] from within a scripted metric agg map script " + "is deprecated in favor of using [state].","Accessing variable [_agg] via [params._agg] from within a scripted metric agg combine script " + "is deprecated in favor of using [state].","[reduceScript] must be provided for metric aggregations.");
  }
  /** 
 * We cannot use Mockito for mocking QueryShardContext in this case because script-related methods (e.g. QueryShardContext#getLazyExecutableScript) is final and cannot be mocked
 */
  @Override protected QueryShardContext queryShardContextMock(  MapperService mapperService){
    MockScriptEngine scriptEngine=new MockScriptEngine(MockScriptEngine.NAME,SCRIPTS,Collections.emptyMap());
    Map<String,ScriptEngine> engines=Collections.singletonMap(scriptEngine.getType(),scriptEngine);
    ScriptService scriptService=new ScriptService(Settings.EMPTY,engines,ScriptModule.CORE_CONTEXTS);
    return new QueryShardContext(0,mapperService.getIndexSettings(),null,null,mapperService,null,scriptService,xContentRegistry(),writableRegistry(),null,null,System::currentTimeMillis,null);
  }
}
