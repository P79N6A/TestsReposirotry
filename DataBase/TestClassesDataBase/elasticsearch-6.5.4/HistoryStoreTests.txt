public class HistoryStoreTests extends ESTestCase {
  private HistoryStore historyStore;
  private Client client;
  @Before public void init(){
    Settings settings=Settings.builder().put("node.name",randomAlphaOfLength(10)).build();
    client=mock(Client.class);
    ThreadPool threadPool=mock(ThreadPool.class);
    when(client.threadPool()).thenReturn(threadPool);
    when(client.settings()).thenReturn(settings);
    when(threadPool.getThreadContext()).thenReturn(new ThreadContext(settings));
    BulkProcessor.Listener listener=mock(BulkProcessor.Listener.class);
    BulkProcessor bulkProcessor=BulkProcessor.builder(client,listener).setConcurrentRequests(0).setBulkActions(1).build();
    historyStore=new HistoryStore(settings,bulkProcessor);
  }
  public void testPut() throws Exception {
    DateTime now=new DateTime(0,UTC);
    Wid wid=new Wid("_name",now);
    String index=getHistoryIndexNameForTime(now);
    ScheduleTriggerEvent event=new ScheduleTriggerEvent(wid.watchId(),now,now);
    WatchRecord watchRecord=new WatchRecord.MessageWatchRecord(wid,event,ExecutionState.EXECUTED,null,randomAlphaOfLength(10));
    IndexResponse indexResponse=mock(IndexResponse.class);
    doAnswer(invocation -> {
      BulkRequest request=(BulkRequest)invocation.getArguments()[1];
      ActionListener<BulkResponse> listener=(ActionListener<BulkResponse>)invocation.getArguments()[2];
      IndexRequest indexRequest=(IndexRequest)request.requests().get(0);
      if (indexRequest.id().equals(wid.value()) && indexRequest.type().equals(HistoryStore.DOC_TYPE) && indexRequest.opType() == OpType.CREATE && indexRequest.index().equals(index)) {
        listener.onResponse(new BulkResponse(new BulkItemResponse[]{new BulkItemResponse(1,OpType.CREATE,indexResponse)},1));
      }
 else {
        listener.onFailure(new ElasticsearchException("test issue"));
      }
      return null;
    }
).when(client).bulk(any(),any());
    historyStore.put(watchRecord);
    verify(client).bulk(any(),any());
  }
  public void testIndexNameGeneration(){
    String indexTemplateVersion=INDEX_TEMPLATE_VERSION;
    assertThat(getHistoryIndexNameForTime(new DateTime(0,UTC)),equalTo(".watcher-history-" + indexTemplateVersion + "-1970.01.01"));
    assertThat(getHistoryIndexNameForTime(new DateTime(100000000000L,UTC)),equalTo(".watcher-history-" + indexTemplateVersion + "-1973.03.03"));
    assertThat(getHistoryIndexNameForTime(new DateTime(1416582852000L,UTC)),equalTo(".watcher-history-" + indexTemplateVersion + "-2014.11.21"));
    assertThat(getHistoryIndexNameForTime(new DateTime(2833165811000L,UTC)),equalTo(".watcher-history-" + indexTemplateVersion + "-2059.10.12"));
  }
  public void testStoreWithHideSecrets() throws Exception {
    HttpClient httpClient=mock(HttpClient.class);
    when(httpClient.execute(any(HttpRequest.class))).thenReturn(new HttpResponse(HttpStatus.SC_INTERNAL_SERVER_ERROR));
    final String username=randomFrom("admin","elastic","test");
    final String password=randomFrom("secret","supersecret","123456");
    final String url="https://" + randomFrom("localhost","internal-jira.elastic.co") + ":"+ randomFrom(80,8080,449,9443);
    Settings settings=Settings.builder().put("url",url).put("user",username).put("password",password).build();
    JiraAccount account=new JiraAccount("_account",settings,httpClient);
    JiraIssue jiraIssue=account.createIssue(singletonMap("foo","bar"),null);
    ActionWrapperResult result=new ActionWrapperResult(JiraAction.TYPE,new JiraAction.Executed(jiraIssue));
    DateTime now=new DateTime(0,UTC);
    Wid wid=new Wid("_name",now);
    Watch watch=mock(Watch.class);
    when(watch.id()).thenReturn("_id");
    when(watch.status()).thenReturn(new WatchStatus(now,singletonMap("_action",new ActionStatus(now))));
    WatchExecutionContext context=mock(WatchExecutionContext.class);
    when(context.id()).thenReturn(wid);
    when(context.triggerEvent()).thenReturn(new ScheduleTriggerEvent(wid.watchId(),now,now));
    when(context.vars()).thenReturn(emptyMap());
    when(context.watch()).thenReturn(watch);
    WatchExecutionResult watchExecutionResult=new WatchExecutionResult(context,0);
    WatchRecord watchRecord;
    if (randomBoolean()) {
      watchRecord=new WatchRecord.MessageWatchRecord(context,watchExecutionResult);
    }
 else {
      watchRecord=new WatchRecord.ExceptionWatchRecord(context,watchExecutionResult,new IllegalStateException());
    }
    watchRecord.result().actionsResults().put(JiraAction.TYPE,result);
    ArgumentCaptor<BulkRequest> requestCaptor=ArgumentCaptor.forClass(BulkRequest.class);
    doAnswer(invocation -> {
      ActionListener<BulkResponse> listener=(ActionListener<BulkResponse>)invocation.getArguments()[2];
      IndexResponse indexResponse=mock(IndexResponse.class);
      listener.onResponse(new BulkResponse(new BulkItemResponse[]{new BulkItemResponse(1,OpType.CREATE,indexResponse)},1));
      return null;
    }
).when(client).bulk(requestCaptor.capture(),any());
    if (randomBoolean()) {
      historyStore.put(watchRecord);
    }
 else {
      historyStore.forcePut(watchRecord);
    }
    assertThat(requestCaptor.getAllValues(),hasSize(1));
    assertThat(requestCaptor.getValue().requests().get(0),instanceOf(IndexRequest.class));
    IndexRequest capturedIndexRequest=(IndexRequest)requestCaptor.getValue().requests().get(0);
    String indexedJson=capturedIndexRequest.source().utf8ToString();
    assertThat(indexedJson,containsString(username));
    assertThat(indexedJson,not(containsString(password)));
  }
}
