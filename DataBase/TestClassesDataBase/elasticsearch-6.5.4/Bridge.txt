/** 
 * Creates two partitions with symmetric failures and a bridge node that can connect to both of the partitions
 */
public static class Bridge extends DisruptedLinks {
  private final String bridgeNode;
  private final Set<String> nodesSideOne;
  private final Set<String> nodesSideTwo;
  public Bridge(  String bridgeNode,  Set<String> nodesSideOne,  Set<String> nodesSideTwo){
    super(Collections.singleton(bridgeNode),nodesSideOne,nodesSideTwo);
    this.bridgeNode=bridgeNode;
    this.nodesSideOne=nodesSideOne;
    this.nodesSideTwo=nodesSideTwo;
    assert nodesSideOne.isEmpty() == false;
    assert nodesSideTwo.isEmpty() == false;
    assert Sets.haveEmptyIntersection(nodesSideOne,nodesSideTwo);
    assert nodesSideOne.contains(bridgeNode) == false && nodesSideTwo.contains(bridgeNode) == false;
  }
  public static Bridge random(  Random random,  String... nodes){
    return random(random,Sets.newHashSet(nodes));
  }
  public static Bridge random(  Random random,  Set<String> nodes){
    assert nodes.size() >= 3 : "bridge topology requires at least 3 nodes";
    String bridgeNode=RandomPicks.randomFrom(random,nodes);
    Set<String> nodesSideOne=new HashSet<>();
    Set<String> nodesSideTwo=new HashSet<>();
    for (    String node : nodes) {
      if (node.equals(bridgeNode) == false) {
        if (nodesSideOne.isEmpty()) {
          nodesSideOne.add(node);
        }
 else         if (nodesSideTwo.isEmpty()) {
          nodesSideTwo.add(node);
        }
 else         if (random.nextBoolean()) {
          nodesSideOne.add(node);
        }
 else {
          nodesSideTwo.add(node);
        }
      }
    }
    return new Bridge(bridgeNode,nodesSideOne,nodesSideTwo);
  }
  @Override public boolean disrupt(  String node1,  String node2){
    if (nodesSideOne.contains(node1) && nodesSideTwo.contains(node2)) {
      return true;
    }
    if (nodesSideOne.contains(node2) && nodesSideTwo.contains(node1)) {
      return true;
    }
    return false;
  }
  public String getBridgeNode(){
    return bridgeNode;
  }
  public Set<String> getNodesSideOne(){
    return nodesSideOne;
  }
  public Set<String> getNodesSideTwo(){
    return nodesSideTwo;
  }
  public String toString(){
    return "bridge partition (super connected node: [" + bridgeNode + "], partition 1: "+ nodesSideOne+ " and partition 2: "+ nodesSideTwo+ ")";
  }
}
