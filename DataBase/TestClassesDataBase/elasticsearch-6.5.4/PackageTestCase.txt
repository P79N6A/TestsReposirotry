@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class) public abstract class PackageTestCase extends PackagingTestCase {
  private static Installation installation;
  protected abstract Distribution distribution();
  @BeforeClass public static void cleanup(){
    installation=null;
    cleanEverything();
  }
  @Before public void onlyCompatibleDistributions(){
    assumeTrue("only compatible distributions",distribution().packaging.compatible);
  }
  public void test05InstallFailsWhenJavaMissing(){
    final Shell sh=new Shell();
    final Result java=sh.run("command -v java");
    final Path originalJavaPath=Paths.get(java.stdout.trim());
    final Path relocatedJavaPath=originalJavaPath.getParent().resolve("java.relocated");
    try {
      mv(originalJavaPath,relocatedJavaPath);
      final Result installResult=runInstallCommand(distribution());
      assertThat(installResult.exitCode,is(1));
      assertThat(installResult.stderr,containsString("could not find java; set JAVA_HOME or ensure java is in PATH"));
    }
  finally {
      mv(relocatedJavaPath,originalJavaPath);
    }
  }
  public void test10InstallPackage(){
    assertRemoved(distribution());
    installation=install(distribution());
    assertInstalled(distribution());
    verifyPackageInstallation(installation,distribution());
  }
  public void test20PluginsCommandWhenNoPlugins(){
    assumeThat(installation,is(notNullValue()));
    final Shell sh=new Shell();
    assertThat(sh.run(installation.bin("elasticsearch-plugin") + " list").stdout,isEmptyString());
  }
  public void test30InstallDoesNotStartServer(){
    assumeThat(installation,is(notNullValue()));
    final Shell sh=new Shell();
    assertThat(sh.run("ps aux").stdout,not(containsString("org.elasticsearch.bootstrap.Elasticsearch")));
  }
  public void test40StartServer() throws IOException {
    assumeThat(installation,is(notNullValue()));
    startElasticsearch();
    runElasticsearchTests();
    verifyPackageInstallation(installation,distribution());
  }
  public void test50Remove(){
    assumeThat(installation,is(notNullValue()));
    remove(distribution());
    final Shell sh=new Shell();
    assertThat(sh.run("ps aux").stdout,not(containsString("org.elasticsearch.bootstrap.Elasticsearch")));
    if (isSystemd()) {
      Platforms.onRPM(() -> {
        final int statusExitCode;
        if (getOsRelease().contains("ID=\"centos\"") || getOsRelease().contains("ID=\"ol\"")) {
          statusExitCode=4;
        }
 else {
          final Result versionResult=sh.run("systemctl --version");
          final Matcher matcher=Pattern.compile("^systemd (\\d+)\n").matcher(versionResult.stdout);
          matcher.find();
          final int version=Integer.parseInt(matcher.group(1));
          statusExitCode=version < 231 ? 3 : 4;
        }
        assertThat(sh.runIgnoreExitCode("systemctl status elasticsearch.service").exitCode,is(statusExitCode));
      }
);
      Platforms.onDPKG(() -> assertThat(sh.runIgnoreExitCode("systemctl status elasticsearch.service").exitCode,is(3)));
      assertThat(sh.runIgnoreExitCode("systemctl is-enabled elasticsearch.service").exitCode,is(1));
    }
    assertPathsDontExist(installation.bin,installation.lib,installation.modules,installation.plugins,installation.logs,installation.pidDir);
    Platforms.onDPKG(() -> assertTrue(Files.exists(SYSTEMD_SERVICE)));
    Platforms.onRPM(() -> assertFalse(Files.exists(SYSTEMD_SERVICE)));
  }
  public void test60Reinstall(){
    assumeThat(installation,is(notNullValue()));
    installation=install(distribution());
    assertInstalled(distribution());
    verifyPackageInstallation(installation,distribution());
    remove(distribution());
    assertRemoved(distribution());
  }
}
