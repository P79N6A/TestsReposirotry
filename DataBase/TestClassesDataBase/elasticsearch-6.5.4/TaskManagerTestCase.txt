/** 
 * The test case for unit testing task manager and related transport actions
 */
public abstract class TaskManagerTestCase extends ESTestCase {
  protected static ThreadPool threadPool;
  public static final Settings CLUSTER_SETTINGS=Settings.builder().put("cluster.name","test-cluster").build();
  protected TestNode[] testNodes;
  protected int nodesCount;
  @BeforeClass public static void beforeClass(){
    threadPool=new TestThreadPool(TransportTasksActionTests.class.getSimpleName());
  }
  @AfterClass public static void afterClass(){
    ThreadPool.terminate(threadPool,30,TimeUnit.SECONDS);
    threadPool=null;
  }
  public void setupTestNodes(  Settings settings){
    nodesCount=randomIntBetween(2,10);
    testNodes=new TestNode[nodesCount];
    for (int i=0; i < testNodes.length; i++) {
      testNodes[i]=new TestNode("node" + i,threadPool,settings);
    }
  }
  @After public final void shutdownTestNodes() throws Exception {
    for (    TestNode testNode : testNodes) {
      testNode.close();
    }
  }
static class NodeResponse extends BaseNodeResponse {
    protected NodeResponse(){
      super();
    }
    protected NodeResponse(    DiscoveryNode node){
      super(node);
    }
  }
static class NodesResponse extends BaseNodesResponse<NodeResponse> {
    protected NodesResponse(    ClusterName clusterName,    List<NodeResponse> nodes,    List<FailedNodeException> failures){
      super(clusterName,nodes,failures);
    }
    @Override protected List<NodeResponse> readNodesFrom(    StreamInput in) throws IOException {
      return in.readStreamableList(NodeResponse::new);
    }
    @Override protected void writeNodesTo(    StreamOutput out,    List<NodeResponse> nodes) throws IOException {
      out.writeStreamableList(nodes);
    }
    public int failureCount(){
      return failures().size();
    }
  }
  /** 
 * Simulates node-based task that can be used to block node tasks so they are guaranteed to be registered by task manager
 */
abstract class AbstractTestNodesAction<NodesRequest extends BaseNodesRequest<NodesRequest>,NodeRequest extends BaseNodeRequest> extends TransportNodesAction<NodesRequest,NodesResponse,NodeRequest,NodeResponse> {
    AbstractTestNodesAction(    Settings settings,    String actionName,    ThreadPool threadPool,    ClusterService clusterService,    TransportService transportService,    Supplier<NodesRequest> request,    Supplier<NodeRequest> nodeRequest){
      super(settings,actionName,threadPool,clusterService,transportService,new ActionFilters(new HashSet<>()),new IndexNameExpressionResolver(Settings.EMPTY),request,nodeRequest,ThreadPool.Names.GENERIC,NodeResponse.class);
    }
    @Override protected NodesResponse newResponse(    NodesRequest request,    List<NodeResponse> responses,    List<FailedNodeException> failures){
      return new NodesResponse(clusterService.getClusterName(),responses,failures);
    }
    @Override protected NodeResponse newNodeResponse(){
      return new NodeResponse();
    }
    @Override protected abstract NodeResponse nodeOperation(    NodeRequest request);
  }
public static class TestNode implements Releasable {
    public TestNode(    String name,    ThreadPool threadPool,    Settings settings){
      final Function<BoundTransportAddress,DiscoveryNode> boundTransportAddressDiscoveryNodeFunction=address -> {
        discoveryNode.set(new DiscoveryNode(name,address.publishAddress(),emptyMap(),emptySet(),Version.CURRENT));
        return discoveryNode.get();
      }
;
      transportService=new TransportService(settings,new MockTcpTransport(settings,threadPool,BigArrays.NON_RECYCLING_INSTANCE,new NoneCircuitBreakerService(),new NamedWriteableRegistry(ClusterModule.getNamedWriteables()),new NetworkService(Collections.emptyList())),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,boundTransportAddressDiscoveryNodeFunction,null,Collections.emptySet()){
        @Override protected TaskManager createTaskManager(        Settings settings,        ThreadPool threadPool,        Set<String> taskHeaders){
          if (MockTaskManager.USE_MOCK_TASK_MANAGER_SETTING.get(settings)) {
            return new MockTaskManager(settings,threadPool,taskHeaders);
          }
 else {
            return super.createTaskManager(settings,threadPool,taskHeaders);
          }
        }
      }
;
      transportService.start();
      clusterService=createClusterService(threadPool,discoveryNode.get());
      clusterService.addStateApplier(transportService.getTaskManager());
      IndexNameExpressionResolver indexNameExpressionResolver=new IndexNameExpressionResolver(settings);
      ActionFilters actionFilters=new ActionFilters(emptySet());
      transportListTasksAction=new TransportListTasksAction(settings,threadPool,clusterService,transportService,actionFilters,indexNameExpressionResolver);
      transportCancelTasksAction=new TransportCancelTasksAction(settings,threadPool,clusterService,transportService,actionFilters,indexNameExpressionResolver);
      transportService.acceptIncomingRequests();
    }
    public final ClusterService clusterService;
    public final TransportService transportService;
    private final SetOnce<DiscoveryNode> discoveryNode=new SetOnce<>();
    public final TransportListTasksAction transportListTasksAction;
    public final TransportCancelTasksAction transportCancelTasksAction;
    @Override public void close(){
      clusterService.close();
      transportService.close();
    }
    public String getNodeId(){
      return discoveryNode().getId();
    }
    public DiscoveryNode discoveryNode(){
      return discoveryNode.get();
    }
  }
  public static void connectNodes(  TestNode... nodes){
    DiscoveryNode[] discoveryNodes=new DiscoveryNode[nodes.length];
    for (int i=0; i < nodes.length; i++) {
      discoveryNodes[i]=nodes[i].discoveryNode();
    }
    DiscoveryNode master=discoveryNodes[0];
    for (    TestNode node : nodes) {
      setState(node.clusterService,ClusterStateCreationUtils.state(node.discoveryNode(),master,discoveryNodes));
    }
    for (    TestNode nodeA : nodes) {
      for (      TestNode nodeB : nodes) {
        nodeA.transportService.connectToNode(nodeB.discoveryNode());
      }
    }
  }
  public static RecordingTaskManagerListener[] setupListeners(  TestNode[] nodes,  String... actionMasks){
    RecordingTaskManagerListener[] listeners=new RecordingTaskManagerListener[nodes.length];
    for (int i=0; i < nodes.length; i++) {
      listeners[i]=new RecordingTaskManagerListener(nodes[i].getNodeId(),actionMasks);
      ((MockTaskManager)(nodes[i].transportService.getTaskManager())).addListener(listeners[i]);
    }
    return listeners;
  }
}
