public class WeightedAvgAggregationBuilderTests extends AbstractSerializingTestCase<WeightedAvgAggregationBuilder> {
  String aggregationName;
  @Before public void setupName(){
    aggregationName=randomAlphaOfLength(10);
  }
  @Override protected NamedXContentRegistry xContentRegistry(){
    SearchModule searchModule=new SearchModule(Settings.EMPTY,false,Collections.emptyList());
    return new NamedXContentRegistry(searchModule.getNamedXContents());
  }
  @Override protected WeightedAvgAggregationBuilder doParseInstance(  XContentParser parser) throws IOException {
    assertSame(XContentParser.Token.START_OBJECT,parser.nextToken());
    AggregatorFactories.Builder parsed=AggregatorFactories.parseAggregators(parser);
    assertThat(parsed.getAggregatorFactories(),hasSize(1));
    assertThat(parsed.getPipelineAggregatorFactories(),hasSize(0));
    WeightedAvgAggregationBuilder agg=(WeightedAvgAggregationBuilder)parsed.getAggregatorFactories().iterator().next();
    assertNull(parser.nextToken());
    assertNotNull(agg);
    return agg;
  }
  @Override protected WeightedAvgAggregationBuilder createTestInstance(){
    MultiValuesSourceFieldConfig valueConfig=new MultiValuesSourceFieldConfig.Builder().setFieldName("value_field").build();
    MultiValuesSourceFieldConfig weightConfig=new MultiValuesSourceFieldConfig.Builder().setFieldName("weight_field").build();
    WeightedAvgAggregationBuilder aggregationBuilder=new WeightedAvgAggregationBuilder(aggregationName).value(valueConfig).weight(weightConfig);
    return aggregationBuilder;
  }
  @Override protected Writeable.Reader<WeightedAvgAggregationBuilder> instanceReader(){
    return WeightedAvgAggregationBuilder::new;
  }
}
