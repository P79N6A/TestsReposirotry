public class GetSettingsActionTests extends ESTestCase {
  private TransportService transportService;
  private ClusterService clusterService;
  private ThreadPool threadPool;
  private SettingsFilter settingsFilter;
  private final String indexName="test_index";
  private TestTransportGetSettingsAction getSettingsAction;
class TestTransportGetSettingsAction extends TransportGetSettingsAction {
    TestTransportGetSettingsAction(){
      super(Settings.EMPTY,GetSettingsActionTests.this.transportService,GetSettingsActionTests.this.clusterService,GetSettingsActionTests.this.threadPool,settingsFilter,new ActionFilters(Collections.emptySet()),new Resolver(Settings.EMPTY),IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);
    }
    @Override protected void masterOperation(    GetSettingsRequest request,    ClusterState state,    ActionListener<GetSettingsResponse> listener){
      ClusterState stateWithIndex=ClusterStateCreationUtils.state(indexName,1,1);
      super.masterOperation(request,stateWithIndex,listener);
    }
  }
  @Before public void setUp() throws Exception {
    super.setUp();
    settingsFilter=new SettingsModule(Settings.EMPTY,emptyList(),emptyList(),emptySet()).getSettingsFilter();
    threadPool=new TestThreadPool("GetSettingsActionTests");
    clusterService=createClusterService(threadPool);
    CapturingTransport capturingTransport=new CapturingTransport();
    transportService=capturingTransport.createCapturingTransportService(clusterService.getSettings(),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,boundAddress -> clusterService.localNode(),null,Collections.emptySet());
    transportService.start();
    transportService.acceptIncomingRequests();
    getSettingsAction=new GetSettingsActionTests.TestTransportGetSettingsAction();
  }
  @After public void tearDown() throws Exception {
    ThreadPool.terminate(threadPool,30,TimeUnit.SECONDS);
    threadPool=null;
    clusterService.close();
    super.tearDown();
  }
  public void testIncludeDefaults(){
    GetSettingsRequest noDefaultsRequest=new GetSettingsRequest().indices(indexName);
    getSettingsAction.execute(null,noDefaultsRequest,ActionListener.wrap(noDefaultsResponse -> {
      assertNull("index.refresh_interval should be null as it was never set",noDefaultsResponse.getSetting(indexName,"index.refresh_interval"));
    }
,exception -> {
      throw new AssertionError(exception);
    }
));
    GetSettingsRequest defaultsRequest=new GetSettingsRequest().indices(indexName).includeDefaults(true);
    getSettingsAction.execute(null,defaultsRequest,ActionListener.wrap(defaultsResponse -> {
      assertNotNull("index.refresh_interval should be set as we are including defaults",defaultsResponse.getSetting(indexName,"index.refresh_interval"));
    }
,exception -> {
      throw new AssertionError(exception);
    }
));
  }
  public void testIncludeDefaultsWithFiltering(){
    GetSettingsRequest defaultsRequest=new GetSettingsRequest().indices(indexName).includeDefaults(true).names("index.refresh_interval");
    getSettingsAction.execute(null,defaultsRequest,ActionListener.wrap(defaultsResponse -> {
      assertNotNull("index.refresh_interval should be set as we are including defaults",defaultsResponse.getSetting(indexName,"index.refresh_interval"));
      assertNull("index.number_of_shards should be null as this query is filtered",defaultsResponse.getSetting(indexName,"index.number_of_shards"));
      assertNull("index.warmer.enabled should be null as this query is filtered",defaultsResponse.getSetting(indexName,"index.warmer.enabled"));
    }
,exception -> {
      throw new AssertionError(exception);
    }
));
  }
static class Resolver extends IndexNameExpressionResolver {
    Resolver(    Settings settings){
      super(settings);
    }
    @Override public String[] concreteIndexNames(    ClusterState state,    IndicesRequest request){
      return request.indices();
    }
    @Override public Index[] concreteIndices(    ClusterState state,    IndicesRequest request){
      Index[] out=new Index[request.indices().length];
      for (int x=0; x < out.length; x++) {
        out[x]=new Index(request.indices()[x],"_na_");
      }
      return out;
    }
  }
}
