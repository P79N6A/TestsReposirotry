/** 
 * Integration tests for the  {@code elasticsearch-migrate} shell command
 */
public class MigrateToolIT extends MigrateToolTestCase {
  @Before public void setupUpTest() throws Exception {
    Client client=getClient();
    SecurityClient c=new SecurityClient(client);
    PutUserResponse pur=c.preparePutUser("existing","s3kirt".toCharArray(),Hasher.BCRYPT,"role1","user").get();
    assertTrue(pur.created());
  }
  public void testRunMigrateTool() throws Exception {
    final String testConfigDir=System.getProperty("tests.config.dir");
    logger.info("--> CONF: {}",testConfigDir);
    final Path configPath=PathUtils.get(testConfigDir);
    Settings settings=Settings.builder().put("path.home",configPath.getParent()).build();
    String url="http://" + getHttpURL();
    logger.info("--> using URL: {}",url);
    MockTerminal t=new MockTerminal();
    ESNativeRealmMigrateTool.MigrateUserOrRoles muor=new ESNativeRealmMigrateTool.MigrateUserOrRoles();
    OptionParser parser=muor.getParser();
    OptionSet options=parser.parse("-u","test_admin","-p","x-pack-test-password","-U",url);
    muor.execute(t,options,new Environment(settings,configPath));
    logger.info("--> output:\n{}",t.getOutput());
    Client client=getClient();
    SecurityClient c=new SecurityClient(client);
    GetUsersResponse resp=c.prepareGetUsers("bob").get();
    assertTrue("user 'bob' should exist",resp.hasUsers());
    User bob=resp.users()[0];
    assertEquals(bob.principal(),"bob");
    assertArrayEquals(bob.roles(),new String[]{"actual_role"});
    resp=c.prepareGetUsers("existing").get();
    assertTrue("user should exist",resp.hasUsers());
    User existing=resp.users()[0];
    assertEquals(existing.principal(),"existing");
    assertArrayEquals(existing.roles(),new String[]{"role1","user"});
    GetRolesResponse roleResp=c.prepareGetRoles().names("actual_role").get();
    assertTrue("role should exist",roleResp.hasRoles());
    RoleDescriptor rd=roleResp.roles()[0];
    assertNotNull(rd);
    assertEquals(rd.getName(),"actual_role");
    assertArrayEquals(rd.getClusterPrivileges(),new String[]{"monitor"});
    assertArrayEquals(rd.getRunAs(),new String[]{"joe"});
    RoleDescriptor.IndicesPrivileges[] ips=rd.getIndicesPrivileges();
    assertEquals(ips.length,2);
    for (    RoleDescriptor.IndicesPrivileges ip : ips) {
      final FieldPermissions fieldPermissions=new FieldPermissions(new FieldPermissionsDefinition(ip.getGrantedFields(),ip.getDeniedFields()));
      if (Arrays.equals(ip.getIndices(),new String[]{"index1","index2"})) {
        assertArrayEquals(ip.getPrivileges(),new String[]{"read","write","create_index","indices:admin/refresh"});
        assertTrue(fieldPermissions.hasFieldLevelSecurity());
        assertTrue(fieldPermissions.grantsAccessTo("bar"));
        assertTrue(fieldPermissions.grantsAccessTo("foo"));
        assertNotNull(ip.getQuery());
        assertThat(ip.getQuery().iterator().next().utf8ToString(),containsString("{\"bool\":{\"must_not\":{\"match\":{\"hidden\":true}}}}"));
      }
 else {
        assertArrayEquals(ip.getIndices(),new String[]{"*"});
        assertArrayEquals(ip.getPrivileges(),new String[]{"read"});
        assertFalse(fieldPermissions.hasFieldLevelSecurity());
        assertNull(ip.getQuery());
      }
    }
    String token=basicAuthHeaderValue("bob",new SecureString("x-pack-test-password".toCharArray()));
    client.filterWithHeader(Collections.singletonMap("Authorization",token)).admin().indices().prepareCreate("index1").get();
    client.admin().cluster().health(Requests.clusterHealthRequest("index1").timeout(TimeValue.timeValueSeconds(30)).waitForYellowStatus().waitForEvents(Priority.LANGUID).waitForNoRelocatingShards(true)).actionGet();
    SearchResponse searchResp=client.filterWithHeader(Collections.singletonMap("Authorization",token)).prepareSearch("index1").get();
  }
}
