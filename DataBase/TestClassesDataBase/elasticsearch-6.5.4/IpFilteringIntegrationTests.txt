@ClusterScope(scope=Scope.SUITE,numDataNodes=0,numClientNodes=0,transportClientRatio=0.0) public class IpFilteringIntegrationTests extends SecurityIntegTestCase {
  private static int randomClientPort;
  @BeforeClass public static void getRandomPort(){
    randomClientPort=randomIntBetween(49000,65500);
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    String randomClientPortRange=randomClientPort + "-" + (randomClientPort + 100);
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.HTTP_ENABLED.getKey(),true).put("transport.profiles.client.port",randomClientPortRange).put("transport.profiles.client.bind_host","localhost").put("transport.profiles.client.xpack.security.filter.deny","_all").put(IPFilter.TRANSPORT_FILTER_DENY_SETTING.getKey(),"_all").build();
  }
  public void testThatIpFilteringIsIntegratedIntoNettyPipelineViaHttp() throws Exception {
    TransportAddress transportAddress=randomFrom(internalCluster().getDataNodeInstance(HttpServerTransport.class).boundAddress().boundAddresses());
    try (Socket socket=new Socket()){
      trySocketConnection(socket,transportAddress.address());
      assertThat(socket.isClosed(),is(true));
    }
   }
  public void testThatIpFilteringIsNotAppliedForDefaultTransport() throws Exception {
    Client client=internalCluster().transportClient();
    assertGreenClusterState(client);
  }
  public void testThatIpFilteringIsAppliedForProfile() throws Exception {
    try (Socket socket=new Socket()){
      trySocketConnection(socket,new InetSocketAddress(InetAddress.getLoopbackAddress(),getProfilePort("client")));
      assertThat(socket.isClosed(),is(true));
    }
   }
  @SuppressForbidden(reason="Allow opening socket for test") private void trySocketConnection(  Socket socket,  InetSocketAddress address) throws IOException {
    logger.info("connecting to {}",address);
    SocketAccess.doPrivileged(() -> socket.connect(address,500));
    assertThat(socket.isConnected(),is(true));
    try (OutputStream os=socket.getOutputStream()){
      os.write("fooooo".getBytes(StandardCharsets.UTF_8));
      os.flush();
    }
   }
  private static int getProfilePort(  String profile){
    TransportAddress transportAddress=randomFrom(internalCluster().getInstance(Transport.class).profileBoundAddresses().get(profile).boundAddresses());
    return transportAddress.address().getPort();
  }
}
