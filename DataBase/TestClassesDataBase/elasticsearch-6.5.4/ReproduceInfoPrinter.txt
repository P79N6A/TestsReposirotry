/** 
 * A  {@link RunListener} that emits a command you can use to re-run a failing test with the failing random seed to{@link System#err}.
 */
public class ReproduceInfoPrinter extends RunListener {
  protected final Logger logger=Loggers.getLogger(ESTestCase.class);
  @Override public void testStarted(  Description description) throws Exception {
    logger.trace("Test {} started",description.getDisplayName());
  }
  @Override public void testFinished(  Description description) throws Exception {
    logger.trace("Test {} finished",description.getDisplayName());
  }
  /** 
 * Are we in the integ test phase?
 */
  static boolean inVerifyPhase(){
    return Boolean.parseBoolean(System.getProperty("tests.verify.phase"));
  }
  @Override public void testFailure(  Failure failure) throws Exception {
    if (failure.getException() instanceof AssumptionViolatedException) {
      return;
    }
    final String gradlew=Constants.WINDOWS ? "gradlew" : "./gradlew";
    final StringBuilder b=new StringBuilder("REPRODUCE WITH: " + gradlew + " ");
    String task=System.getProperty("tests.task");
    b.append(task);
    GradleMessageBuilder gradleMessageBuilder=new GradleMessageBuilder(b);
    gradleMessageBuilder.appendAllOpts(failure.getDescription());
    if (ESClientYamlSuiteTestCase.class.isAssignableFrom(failure.getDescription().getTestClass())) {
      gradleMessageBuilder.appendClientYamlSuiteProperties();
    }
    printToErr(b.toString());
  }
  @SuppressForbidden(reason="printing repro info") private static void printToErr(  String s){
    System.err.println(s);
  }
protected static class GradleMessageBuilder extends ReproduceErrorMessageBuilder {
    public GradleMessageBuilder(    StringBuilder b){
      super(b);
    }
    @Override public ReproduceErrorMessageBuilder appendAllOpts(    Description description){
      super.appendAllOpts(description);
      if (description.getMethodName() != null) {
        super.appendOpt(SYSPROP_TESTMETHOD(),"\"" + description.getMethodName() + "\"");
      }
      return appendESProperties();
    }
    @Override public ReproduceErrorMessageBuilder appendEnvironmentSettings(){
      return this;
    }
    /** 
 * Append a single VM option.
 */
    @Override public ReproduceErrorMessageBuilder appendOpt(    String sysPropName,    String value){
      if (sysPropName.equals(SYSPROP_ITERATIONS())) {
        return this;
      }
      if (sysPropName.equals(SYSPROP_TESTMETHOD())) {
        return this;
      }
      if (sysPropName.equals(SYSPROP_PREFIX())) {
        return this;
      }
      if (Strings.hasLength(value)) {
        return super.appendOpt(sysPropName,value);
      }
      return this;
    }
    public ReproduceErrorMessageBuilder appendESProperties(){
      appendProperties("tests.es.logger.level");
      if (inVerifyPhase()) {
        appendProperties(ESIntegTestCase.TESTS_ENABLE_MOCK_MODULES);
      }
      appendProperties("tests.assertion.disabled","tests.security.manager","tests.nightly","tests.jvms","tests.client.ratio","tests.heap.size","tests.bwc","tests.bwc.version","build.snapshot");
      if (System.getProperty("tests.jvm.argline") != null && !System.getProperty("tests.jvm.argline").isEmpty()) {
        appendOpt("tests.jvm.argline","\"" + System.getProperty("tests.jvm.argline") + "\"");
      }
      appendOpt("tests.locale",Locale.getDefault().toLanguageTag());
      appendOpt("tests.timezone",TimeZone.getDefault().getID());
      appendOpt("tests.distribution",System.getProperty("tests.distribution"));
      appendOpt("compiler.java",System.getProperty("compiler.java"));
      appendOpt("runtime.java",System.getProperty("runtime.java"));
      appendOpt("javax.net.ssl.keyStorePassword",System.getProperty("javax.net.ssl.keyStorePassword"));
      appendOpt("javax.net.ssl.trustStorePassword",System.getProperty("javax.net.ssl.trustStorePassword"));
      return this;
    }
    public ReproduceErrorMessageBuilder appendClientYamlSuiteProperties(){
      return appendProperties(REST_TESTS_SUITE,REST_TESTS_BLACKLIST);
    }
    protected ReproduceErrorMessageBuilder appendProperties(    String... properties){
      for (      String sysPropName : properties) {
        if (Strings.hasLength(System.getProperty(sysPropName))) {
          appendOpt(sysPropName,System.getProperty(sysPropName));
        }
      }
      return this;
    }
  }
}
