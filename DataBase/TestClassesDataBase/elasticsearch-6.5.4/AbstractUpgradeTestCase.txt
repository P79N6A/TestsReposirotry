public abstract class AbstractUpgradeTestCase extends ESRestTestCase {
  private static final String BASIC_AUTH_VALUE=basicAuthHeaderValue("test_user",SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);
  @Override protected boolean preserveIndicesUponCompletion(){
    return true;
  }
  @Override protected boolean preserveReposUponCompletion(){
    return true;
  }
  @Override protected boolean preserveTemplatesUponCompletion(){
    return true;
  }
  @Override protected boolean preserveRollupJobsUponCompletion(){
    return true;
  }
  enum ClusterType {  OLD,   MIXED,   UPGRADED;   public static ClusterType parse(  String value){
switch (value) {
case "old_cluster":
      return OLD;
case "mixed_cluster":
    return MIXED;
case "upgraded_cluster":
  return UPGRADED;
default :
throw new AssertionError("unknown cluster type: " + value);
}
}
}
protected static final ClusterType CLUSTER_TYPE=ClusterType.parse(System.getProperty("tests.rest.suite"));
@Override protected Settings restClientSettings(){
return Settings.builder().put(ThreadContext.PREFIX + ".Authorization",BASIC_AUTH_VALUE).build();
}
protected Collection<String> templatesToWaitFor(){
return Collections.singletonList("security-index-template");
}
@Before public void setupForTests() throws Exception {
awaitBusy(() -> {
boolean success=true;
for (String template : templatesToWaitFor()) {
try {
  final boolean exists=adminClient().performRequest(new Request("HEAD","_template/" + template)).getStatusLine().getStatusCode() == 200;
  success&=exists;
  logger.debug("template [{}] exists [{}]",template,exists);
}
 catch (IOException e) {
  logger.warn("error calling template api",e);
}
}
return success;
}
);
}
}
