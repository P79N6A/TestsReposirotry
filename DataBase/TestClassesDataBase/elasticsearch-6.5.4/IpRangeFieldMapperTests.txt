public class IpRangeFieldMapperTests extends ESSingleNodeTestCase {
  private IndexService indexService;
  private DocumentMapperParser parser;
  @Before public void setup(){
    indexService=createIndex("test");
    parser=indexService.mapperService().documentMapperParser();
  }
  public void testStoreCidr() throws Exception {
    XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","ip_range").field("store",true);
    mapping=mapping.endObject().endObject().endObject().endObject();
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(Strings.toString(mapping)));
    assertEquals(Strings.toString(mapping),mapper.mappingSource().toString());
    final Map<String,String> cases=new HashMap<>();
    cases.put("192.168.0.0/15","192.169.255.255");
    cases.put("192.168.0.0/16","192.168.255.255");
    cases.put("192.168.0.0/17","192.168.127.255");
    for (    final Map.Entry<String,String> entry : cases.entrySet()) {
      ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field",entry.getKey()).endObject()),XContentType.JSON));
      IndexableField[] fields=doc.rootDoc().getFields("field");
      assertEquals(3,fields.length);
      IndexableField dvField=fields[0];
      assertEquals(DocValuesType.BINARY,dvField.fieldType().docValuesType());
      IndexableField pointField=fields[1];
      assertEquals(2,pointField.fieldType().pointDimensionCount());
      IndexableField storedField=fields[2];
      assertTrue(storedField.fieldType().stored());
      String strVal=InetAddresses.toAddrString(InetAddresses.forString("192.168.0.0")) + " : " + InetAddresses.toAddrString(InetAddresses.forString(entry.getValue()));
      assertThat(storedField.stringValue(),containsString(strVal));
    }
  }
}
