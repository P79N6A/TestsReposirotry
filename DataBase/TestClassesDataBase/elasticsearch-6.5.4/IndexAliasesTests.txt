public class IndexAliasesTests extends SecurityIntegTestCase {
  @Override protected String configUsers(){
    final String usersPasswdHashed=new String(getFastStoredHashAlgoForTests().hash(new SecureString("test123".toCharArray())));
    return super.configUsers() + "create_only:" + usersPasswdHashed+ "\n"+ "create_test_aliases_test:"+ usersPasswdHashed+ "\n"+ "create_test_aliases_alias:"+ usersPasswdHashed+ "\n"+ "create_test_aliases_test_alias:"+ usersPasswdHashed+ "\n"+ "aliases_only:"+ usersPasswdHashed+ "\n";
  }
  @Override protected String configUsersRoles(){
    return super.configUsersRoles() + "create_only:create_only\n" + "create_test_aliases_test:create_test_aliases_test\n"+ "create_test_aliases_alias:create_test_aliases_alias\n"+ "create_test_aliases_test_alias:create_test_aliases_test_alias\n"+ "aliases_only:aliases_only\n";
  }
  @Override protected String configRoles(){
    return super.configRoles() + "\n" + "create_only:\n"+ "  indices:\n"+ "    - names: '*'\n"+ "      privileges: [ create_index ]\n"+ "create_test_aliases_test:\n"+ "  indices:\n"+ "    - names: 'test_*'\n"+ "      privileges: [ create_index, 'indices:admin/aliases*' ]\n"+ "create_test_aliases_alias:\n"+ "  indices:\n"+ "    - names: 'test_*'\n"+ "      privileges: [ create_index ]\n"+ "    - names: 'alias_*'\n"+ "      privileges: [ 'indices:admin/aliases*' ]\n"+ "create_test_aliases_test_alias:\n"+ "  indices:\n"+ "    - names: 'test_*'\n"+ "      privileges: [ create_index ]\n"+ "    - names: [ 'alias_*', 'test_*' ]\n"+ "      privileges: [ 'indices:admin/aliases*' ]\n"+ "aliases_only:\n"+ "  indices:\n"+ "    - names: [ 'alias_*', 'test_*']\n"+ "      privileges: [ 'indices:admin/aliases*' ]\n";
  }
  @Before public void createBogusIndex(){
    if (randomBoolean()) {
      assertAcked(client().admin().indices().prepareCreate("index1").addAlias(new Alias("alias1")).addAlias(new Alias("alias2")));
    }
  }
  public void testCreateIndexThenAliasesCreateOnlyPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_only",new SecureString("test123".toCharArray())));
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareCreate("test_1").get());
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().addAlias("test_1","test_alias")::get,IndicesAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().addAlias("test_*","test_alias")::get,IndicesAliasesAction.NAME,"create_only");
  }
  public void testCreateIndexAndAliasesCreateOnlyPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_only",new SecureString("test123".toCharArray())));
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareCreate("test_1").addAlias(new Alias("test_2"))::get,IndicesAliasesAction.NAME,"create_only");
  }
  public void testDeleteAliasesCreateOnlyPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_only",new SecureString("test123".toCharArray())));
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","alias_1")::get,IndicesAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","alias_*")::get,IndicesAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","_all")::get,IndicesAliasesAction.NAME,"create_only");
  }
  public void testGetAliasesCreateOnlyPermissionStrict(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_only",new SecureString("test123".toCharArray())));
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("test_1").setIndices("test_1").setIndicesOptions(IndicesOptions.strictExpand())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("_all").setIndices("test_1").setIndicesOptions(IndicesOptions.strictExpand())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases().setIndices("test_1").setIndicesOptions(IndicesOptions.strictExpand())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("test_alias").setIndices("test_*").setIndicesOptions(IndicesOptions.strictExpand())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases()::get,GetAliasesAction.NAME,"create_only");
  }
  public void testGetAliasesCreateOnlyPermissionIgnoreUnavailable(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_only",new SecureString("test123".toCharArray())));
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("test_1").setIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("_all").setIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases().setIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases("test_alias").setIndices("test_*").setIndicesOptions(IndicesOptions.lenientExpandOpen())::get,GetAliasesAction.NAME,"create_only");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareGetAliases().setIndicesOptions(IndicesOptions.lenientExpandOpen())::get,GetAliasesAction.NAME,"create_only");
  }
  public void testCreateIndexThenAliasesCreateAndAliasesPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test",new SecureString("test123".toCharArray())));
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareCreate("test_1").get());
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareAliases().addAlias("test_1","test_alias").get());
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareAliases().addAlias("test_*","test_alias_2").get());
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().addAlias("test_1","alias_1").addAlias("test_1","test_alias")::get,IndicesAliasesAction.NAME,"create_test_aliases_test");
  }
  public void testCreateIndexAndAliasesCreateAndAliasesPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test",new SecureString("test123".toCharArray())));
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias")).get());
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareCreate("test_2").addAlias(new Alias("test_alias")).addAlias(new Alias("alias_2"))::get,IndicesAliasesAction.NAME,"create_test_aliases_test");
  }
  public void testDeleteAliasesCreateAndAliasesPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test",new SecureString("test123".toCharArray())));
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias_1")).addAlias(new Alias("test_alias_2")).addAlias(new Alias("test_alias_3")).addAlias(new Alias("test_alias_4")).get());
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","test_alias_1").get());
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_*","test_alias_2").get());
    assertAcked(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","test_alias_*").get());
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","test_alias_*")::get);
    assertThat(indexNotFoundException.toString(),containsString("[test_alias_*]"));
    indexNotFoundException=expectThrows(IndexNotFoundException.class,client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","_all")::get);
    assertThat(indexNotFoundException.toString(),containsString("[_all]"));
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1","alias_1")::get,IndicesAliasesAction.NAME,"create_test_aliases_test");
    assertThrowsAuthorizationException(client().filterWithHeader(headers).admin().indices().prepareAliases().removeAlias("test_1",new String[]{"_all","alias_1"})::get,IndicesAliasesAction.NAME,"create_test_aliases_test");
  }
  public void testGetAliasesCreateAndAliasesPermission(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias")).get());
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_alias").setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_alias").setIndices("test_*"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_alias"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("_all").setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_*").setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("_all").setIndices("_all"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases(),"test_1","test_alias");
    assertThrowsAuthorizationException(client.admin().indices().prepareGetAliases().setAliases("_all","alias_1")::get,GetAliasesAction.NAME,"create_test_aliases_test");
    assertThrowsAuthorizationException(client.admin().indices().prepareGetAliases().setAliases("alias_1")::get,GetAliasesAction.NAME,"create_test_aliases_test");
  }
  public void testCreateIndexThenAliasesCreateAndAliasesPermission2(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1"));
    assertThrowsAuthorizationException(client.admin().indices().prepareAliases().addAlias("test_1","test_alias")::get,IndicesAliasesAction.NAME,"create_test_aliases_alias");
    assertThrowsAuthorizationException(client.admin().indices().prepareAliases().addAlias("test_1","alias_1")::get,IndicesAliasesAction.NAME,"create_test_aliases_alias");
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareAliases().addAlias("test_*","alias_1")::get);
    assertThat(indexNotFoundException.toString(),containsString("[test_*]"));
  }
  public void testCreateIndexAndAliasesCreateAndAliasesPermission2(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertThrowsAuthorizationException(client.admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias"))::get,IndicesAliasesAction.NAME,"create_test_aliases_alias");
  }
  public void testDeleteAliasesCreateAndAliasesPermission2(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertThrowsAuthorizationException(client.admin().indices().prepareAliases().removeAlias("test_1","test_alias")::get,IndicesAliasesAction.NAME,"create_test_aliases_alias");
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareAliases().removeAlias("test_*","alias_1")::get);
  }
  public void testGetAliasesCreateAndAliasesPermission2(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1"));
    assertThrowsAuthorizationException(client.admin().indices().prepareGetAliases().setAliases("test_alias").setIndices("test_1")::get,GetAliasesAction.NAME,"create_test_aliases_alias");
    GetAliasesResponse getAliasesResponse=client.admin().indices().prepareGetAliases().setIndices("test_*").setAliases("test_alias").get();
    assertEquals(0,getAliasesResponse.getAliases().size());
    getAliasesResponse=client.admin().indices().prepareGetAliases().setAliases("test_alias").get();
    assertEquals(0,getAliasesResponse.getAliases().size());
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareGetAliases().setIndices("test_1").setAliases("test_*")::get);
    assertThat(indexNotFoundException.toString(),containsString("[test_*]"));
    indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareGetAliases().setIndices("test_1").setAliases("_all")::get);
    assertThat(indexNotFoundException.toString(),containsString("[_all]"));
    indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareGetAliases().setIndices("test_1")::get);
    assertThat(indexNotFoundException.toString(),containsString("[_all]"));
    indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareGetAliases()::get);
    assertThat(indexNotFoundException.toString(),containsString("[_all]"));
  }
  public void testCreateIndexThenAliasesCreateAndAliasesPermission3(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1"));
    assertAcked(client.admin().indices().prepareAliases().addAlias("test_1","test_alias"));
    assertAcked(client.admin().indices().prepareAliases().addAlias("test_1","alias_1"));
    assertAcked(client.admin().indices().prepareAliases().addAlias("test_*","alias_2"));
  }
  public void testCreateIndexAndAliasesCreateAndAliasesPermission3(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias")));
    assertAcked(client.admin().indices().prepareCreate("test_2").addAlias(new Alias("test_alias_2")).addAlias(new Alias("alias_2")));
  }
  public void testDeleteAliasesCreateAndAliasesPermission3(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias")).addAlias(new Alias("alias_1")).addAlias(new Alias("alias_2")).addAlias(new Alias("alias_3")));
    assertThrowsAuthorizationException(client.admin().indices().prepareAliases().removeAlias("test_1","non_authorized").removeAlias("test_1","test_alias")::get,IndicesAliasesAction.NAME,"create_test_aliases_test_alias");
    assertAcked(client.admin().indices().prepareAliases().removeAlias("test_1","alias_1"));
    assertAcked(client.admin().indices().prepareAliases().removeAlias("test_*","_all"));
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareAliases().removeAlias("test_1","_all")::get);
    assertThat(indexNotFoundException.toString(),containsString("[_all]"));
  }
  public void testGetAliasesCreateAndAliasesPermission3(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("create_test_aliases_test_alias",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    assertAcked(client.admin().indices().prepareCreate("test_1").addAlias(new Alias("test_alias")).addAlias(new Alias("alias_1")));
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_alias").setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("alias_1").setIndices("test_1"),"test_1","alias_1");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("alias_1").setIndices("test_*"),"test_1","alias_1");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("test_*").setIndices("test_1"),"test_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("_all").setIndices("test_1"),"test_1","alias_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("_all"),"test_1","alias_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setIndices("test_1"),"test_1","alias_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases(),"test_1","alias_1","test_alias");
    assertAliases(client.admin().indices().prepareGetAliases().setAliases("alias_*").setIndices("test_*"),"test_1","alias_1");
  }
  public void testCreateIndexAliasesOnlyPermission(){
    assertThrowsAuthorizationException(client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("aliases_only",new SecureString("test123".toCharArray())))).admin().indices().prepareCreate("test_1")::get,CreateIndexAction.NAME,"aliases_only");
  }
  public void testGetAliasesAliasesOnlyPermissionStrict(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("aliases_only",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    IndexNotFoundException indexNotFoundException=expectThrows(IndexNotFoundException.class,client.admin().indices().prepareGetAliases("alias_1").addIndices("test_1").setIndicesOptions(IndicesOptions.strictExpandOpen())::get);
    assertEquals("no such index",indexNotFoundException.getMessage());
    assertThrowsAuthorizationException(client.admin().indices().prepareGetAliases("non_authorized").addIndices("test_1").setIndicesOptions(IndicesOptions.strictExpandOpen())::get,GetAliasesAction.NAME,"aliases_only");
    assertThrowsAuthorizationException(client.admin().indices().prepareGetAliases("alias_1").addIndices("non_authorized").setIndicesOptions(IndicesOptions.strictExpandOpen())::get,GetAliasesAction.NAME,"aliases_only");
  }
  public void testGetAliasesAliasesOnlyPermissionIgnoreUnavailable(){
    Map<String,String> headers=Collections.singletonMap(BASIC_AUTH_HEADER,basicAuthHeaderValue("aliases_only",new SecureString("test123".toCharArray())));
    final Client client=client().filterWithHeader(headers);
    GetAliasesResponse getAliasesResponse=client.admin().indices().prepareGetAliases("alias_1").addIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen()).get();
    assertEquals(0,getAliasesResponse.getAliases().size());
    getAliasesResponse=client.admin().indices().prepareGetAliases("non_authorized").addIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen()).get();
    assertEquals(0,getAliasesResponse.getAliases().size());
    getAliasesResponse=client.admin().indices().prepareGetAliases("alias_1").addIndices("non_authorized").setIndicesOptions(IndicesOptions.lenientExpandOpen()).get();
    assertEquals(0,getAliasesResponse.getAliases().size());
  }
  private static void assertAliases(  GetAliasesRequestBuilder getAliasesRequestBuilder,  String index,  String... aliases){
    GetAliasesResponse getAliasesResponse=getAliasesRequestBuilder.get();
    assertThat(getAliasesResponse.getAliases().size(),equalTo(1));
    assertThat(getAliasesResponse.getAliases().get(index).size(),equalTo(aliases.length));
    for (int i=0; i < aliases.length; i++) {
      assertThat(getAliasesResponse.getAliases().get(index).get(i).alias(),equalTo(aliases[i]));
    }
  }
}
