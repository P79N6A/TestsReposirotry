public class RoleMappingFileBootstrapCheckTests extends ESTestCase {
  private static final String ROLE_MAPPING_FILE_SETTING=DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING.getKey();
  protected Settings settings;
  @Before public void init() throws IOException {
    settings=Settings.builder().put("resource.reload.interval.high","100ms").put("path.home",createTempDir()).build();
  }
  public void testBootstrapCheckOfValidFile(){
    Path file=getDataPath("role_mapping.yml");
    Settings ldapSettings=Settings.builder().put(ROLE_MAPPING_FILE_SETTING,file.toAbsolutePath()).build();
    RealmConfig config=new RealmConfig("ldap1",ldapSettings,settings,TestEnvironment.newEnvironment(settings),new ThreadContext(Settings.EMPTY));
    final BootstrapCheck check=RoleMappingFileBootstrapCheck.create(config);
    assertThat(check,notNullValue());
    assertThat(check.alwaysEnforce(),equalTo(true));
    assertFalse(check.check(new BootstrapContext(settings,null)).isFailure());
  }
  public void testBootstrapCheckOfMissingFile(){
    final String fileName=randomAlphaOfLength(10);
    Path file=createTempDir().resolve(fileName);
    Settings ldapSettings=Settings.builder().put(ROLE_MAPPING_FILE_SETTING,file.toAbsolutePath()).build();
    RealmConfig config=new RealmConfig("the-realm-name",ldapSettings,settings,TestEnvironment.newEnvironment(settings),new ThreadContext(Settings.EMPTY));
    final BootstrapCheck check=RoleMappingFileBootstrapCheck.create(config);
    assertThat(check,notNullValue());
    assertThat(check.alwaysEnforce(),equalTo(true));
    final BootstrapCheck.BootstrapCheckResult result=check.check(new BootstrapContext(settings,null));
    assertTrue(result.isFailure());
    assertThat(result.getMessage(),containsString("the-realm-name"));
    assertThat(result.getMessage(),containsString(fileName));
    assertThat(result.getMessage(),containsString("does not exist"));
  }
  public void testBootstrapCheckWithInvalidYaml() throws IOException {
    Path file=createTempFile("",".yml");
    Files.write(file,Collections.singletonList("junk"),StandardCharsets.UTF_16);
    Settings ldapSettings=Settings.builder().put(ROLE_MAPPING_FILE_SETTING,file.toAbsolutePath()).build();
    RealmConfig config=new RealmConfig("the-realm-name",ldapSettings,settings,TestEnvironment.newEnvironment(settings),new ThreadContext(Settings.EMPTY));
    final BootstrapCheck check=RoleMappingFileBootstrapCheck.create(config);
    assertThat(check,notNullValue());
    assertThat(check.alwaysEnforce(),equalTo(true));
    final BootstrapCheck.BootstrapCheckResult result=check.check(new BootstrapContext(settings,null));
    assertTrue(result.isFailure());
    assertThat(result.getMessage(),containsString("the-realm-name"));
    assertThat(result.getMessage(),containsString(file.toString()));
    assertThat(result.getMessage(),containsString("could not read"));
  }
  public void testBootstrapCheckWithInvalidDn() throws IOException {
    Path file=createTempFile("",".yml");
    Files.write(file,Collections.singletonList("role: not-a-dn"));
    Settings ldapSettings=Settings.builder().put(ROLE_MAPPING_FILE_SETTING,file.toAbsolutePath()).build();
    RealmConfig config=new RealmConfig("the-realm-name",ldapSettings,settings,TestEnvironment.newEnvironment(settings),new ThreadContext(Settings.EMPTY));
    final BootstrapCheck check=RoleMappingFileBootstrapCheck.create(config);
    assertThat(check,notNullValue());
    assertThat(check.alwaysEnforce(),equalTo(true));
    final BootstrapCheck.BootstrapCheckResult result=check.check(new BootstrapContext(settings,null));
    assertTrue(result.isFailure());
    assertThat(result.getMessage(),containsString("the-realm-name"));
    assertThat(result.getMessage(),containsString(file.toString()));
    assertThat(result.getMessage(),containsString("invalid DN"));
    assertThat(result.getMessage(),containsString("not-a-dn"));
  }
}
