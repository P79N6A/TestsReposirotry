public class MlInitializationServiceTests extends ESTestCase {
  private static final ClusterName CLUSTER_NAME=new ClusterName("my_cluster");
  private ThreadPool threadPool;
  private ExecutorService executorService;
  private ClusterService clusterService;
  private Client client;
  @Before public void setUpMocks(){
    threadPool=mock(ThreadPool.class);
    executorService=mock(ExecutorService.class);
    clusterService=mock(ClusterService.class);
    client=mock(Client.class);
    doAnswer(invocation -> {
      ((Runnable)invocation.getArguments()[0]).run();
      return null;
    }
).when(executorService).execute(any(Runnable.class));
    when(threadPool.executor(ThreadPool.Names.GENERIC)).thenReturn(executorService);
    ScheduledFuture scheduledFuture=mock(ScheduledFuture.class);
    when(threadPool.schedule(any(),any(),any())).thenReturn(scheduledFuture);
    when(clusterService.getClusterName()).thenReturn(CLUSTER_NAME);
  }
  public void testInitialize(){
    MlInitializationService initializationService=new MlInitializationService(Settings.EMPTY,threadPool,clusterService,client);
    ClusterState cs=ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id",new TransportAddress(InetAddress.getLoopbackAddress(),9200),Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).metaData(MetaData.builder()).build();
    initializationService.clusterChanged(new ClusterChangedEvent("_source",cs,cs));
    assertThat(initializationService.getDailyMaintenanceService().isStarted(),is(true));
  }
  public void testInitialize_noMasterNode(){
    MlInitializationService initializationService=new MlInitializationService(Settings.EMPTY,threadPool,clusterService,client);
    ClusterState cs=ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id",new TransportAddress(InetAddress.getLoopbackAddress(),9200),Version.CURRENT))).metaData(MetaData.builder()).build();
    initializationService.clusterChanged(new ClusterChangedEvent("_source",cs,cs));
    assertThat(initializationService.getDailyMaintenanceService(),is(nullValue()));
  }
  public void testInitialize_alreadyInitialized(){
    MlInitializationService initializationService=new MlInitializationService(Settings.EMPTY,threadPool,clusterService,client);
    ClusterState cs=ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id",new TransportAddress(InetAddress.getLoopbackAddress(),9200),Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE,new MlMetadata.Builder().build())).build();
    MlDailyMaintenanceService initialDailyMaintenanceService=mock(MlDailyMaintenanceService.class);
    initializationService.setDailyMaintenanceService(initialDailyMaintenanceService);
    initializationService.clusterChanged(new ClusterChangedEvent("_source",cs,cs));
    assertSame(initialDailyMaintenanceService,initializationService.getDailyMaintenanceService());
  }
  public void testNodeGoesFromMasterToNonMasterAndBack(){
    MlInitializationService initializationService=new MlInitializationService(Settings.EMPTY,threadPool,clusterService,client);
    MlDailyMaintenanceService initialDailyMaintenanceService=mock(MlDailyMaintenanceService.class);
    initializationService.setDailyMaintenanceService(initialDailyMaintenanceService);
    ClusterState masterCs=ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id",new TransportAddress(InetAddress.getLoopbackAddress(),9200),Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).metaData(MetaData.builder()).build();
    ClusterState noMasterCs=ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id",new TransportAddress(InetAddress.getLoopbackAddress(),9200),Version.CURRENT))).metaData(MetaData.builder()).build();
    initializationService.clusterChanged(new ClusterChangedEvent("_source",noMasterCs,masterCs));
    verify(initialDailyMaintenanceService).stop();
    initializationService.clusterChanged(new ClusterChangedEvent("_source",masterCs,noMasterCs));
    MlDailyMaintenanceService finalDailyMaintenanceService=initializationService.getDailyMaintenanceService();
    assertNotSame(initialDailyMaintenanceService,finalDailyMaintenanceService);
    assertThat(initializationService.getDailyMaintenanceService().isStarted(),is(true));
  }
}
