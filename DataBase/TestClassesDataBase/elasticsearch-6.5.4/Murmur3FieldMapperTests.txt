public class Murmur3FieldMapperTests extends ESSingleNodeTestCase {
  MapperRegistry mapperRegistry;
  IndexService indexService;
  DocumentMapperParser parser;
  @Before public void setup(){
    indexService=createIndex("test");
    mapperRegistry=new MapperRegistry(Collections.singletonMap(Murmur3FieldMapper.CONTENT_TYPE,new Murmur3FieldMapper.TypeParser()),Collections.emptyMap(),MapperPlugin.NOOP_FIELD_FILTER);
    Supplier<QueryShardContext> queryShardContext=() -> {
      return indexService.newQueryShardContext(0,null,() -> {
        throw new UnsupportedOperationException();
      }
,null);
    }
;
    parser=new DocumentMapperParser(indexService.getIndexSettings(),indexService.mapperService(),indexService.getIndexAnalyzers(),indexService.xContentRegistry(),indexService.similarityService(),mapperRegistry,queryShardContext);
  }
  @Override protected Collection<Class<? extends Plugin>> getPlugins(){
    return pluginList(InternalSettingsPlugin.class);
  }
  public void testDefaults() throws Exception {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","murmur3").endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    ParsedDocument parsedDoc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","value").endObject()),XContentType.JSON));
    IndexableField[] fields=parsedDoc.rootDoc().getFields("field");
    assertNotNull(fields);
    assertEquals(Arrays.toString(fields),1,fields.length);
    IndexableField field=fields[0];
    assertEquals(IndexOptions.NONE,field.fieldType().indexOptions());
    assertEquals(DocValuesType.SORTED_NUMERIC,field.fieldType().docValuesType());
  }
  public void testDocValuesSettingNotAllowed() throws Exception {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","murmur3").field("doc_values",false).endObject().endObject().endObject().endObject());
    try {
      parser.parse("type",new CompressedXContent(mapping));
      fail("expected a mapper parsing exception");
    }
 catch (    MapperParsingException e) {
      assertTrue(e.getMessage().contains("Setting [doc_values] cannot be modified"));
    }
    mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","murmur3").field("doc_values",true).endObject().endObject().endObject().endObject());
    try {
      parser.parse("type",new CompressedXContent(mapping));
      fail("expected a mapper parsing exception");
    }
 catch (    MapperParsingException e) {
      assertTrue(e.getMessage().contains("Setting [doc_values] cannot be modified"));
    }
  }
  public void testIndexSettingNotAllowed() throws Exception {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","murmur3").field("index","not_analyzed").endObject().endObject().endObject().endObject());
    try {
      parser.parse("type",new CompressedXContent(mapping));
      fail("expected a mapper parsing exception");
    }
 catch (    MapperParsingException e) {
      assertTrue(e.getMessage().contains("Setting [index] cannot be modified"));
    }
    mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","murmur3").field("index","no").endObject().endObject().endObject().endObject());
    try {
      parser.parse("type",new CompressedXContent(mapping));
      fail("expected a mapper parsing exception");
    }
 catch (    MapperParsingException e) {
      assertTrue(e.getMessage().contains("Setting [index] cannot be modified"));
    }
  }
  public void testEmptyName() throws Exception {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type","murmur3").endObject().endObject().endObject().endObject());
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> parser.parse("type",new CompressedXContent(mapping)));
    assertThat(e.getMessage(),containsString("name cannot be empty string"));
  }
}
