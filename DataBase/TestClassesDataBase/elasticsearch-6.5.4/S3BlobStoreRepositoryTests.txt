public class S3BlobStoreRepositoryTests extends ESBlobStoreRepositoryIntegTestCase {
  private static final ConcurrentMap<String,byte[]> blobs=new ConcurrentHashMap<>();
  private static String bucket;
  private static String accessKey;
  private static String secureKey;
  private static ByteSizeValue bufferSize;
  private static boolean serverSideEncryption;
  private static String cannedACL;
  private static String storageClass;
  @BeforeClass public static void setUpRepositorySettings(){
    bucket="bucket_" + randomAlphaOfLength(randomIntBetween(1,10)).toLowerCase(Locale.ROOT);
    accessKey="accessKey_" + randomAlphaOfLength(randomIntBetween(1,10)).toLowerCase(Locale.ROOT);
    secureKey="secureKey_" + randomAlphaOfLength(randomIntBetween(1,10)).toLowerCase(Locale.ROOT);
    bufferSize=new ByteSizeValue(randomIntBetween(5,50),ByteSizeUnit.MB);
    serverSideEncryption=randomBoolean();
    if (randomBoolean()) {
      cannedACL=randomFrom(CannedAccessControlList.values()).toString();
    }
    if (randomBoolean()) {
      storageClass=randomValueOtherThan(StorageClass.Glacier,() -> randomFrom(StorageClass.values())).toString();
    }
  }
  @AfterClass public static void wipeRepository(){
    blobs.clear();
  }
  @Override protected void createTestRepository(  final String name,  boolean verify){
    assertAcked(client().admin().cluster().preparePutRepository(name).setType(S3Repository.TYPE).setVerify(verify).setSettings(Settings.builder().put(S3Repository.BUCKET_SETTING.getKey(),bucket).put(S3Repository.BUFFER_SIZE_SETTING.getKey(),bufferSize).put(S3Repository.SERVER_SIDE_ENCRYPTION_SETTING.getKey(),serverSideEncryption).put(S3Repository.CANNED_ACL_SETTING.getKey(),cannedACL).put(S3Repository.STORAGE_CLASS_SETTING.getKey(),storageClass).put(S3Repository.ACCESS_KEY_SETTING.getKey(),accessKey).put(S3Repository.SECRET_KEY_SETTING.getKey(),secureKey)));
  }
  @Override protected void afterCreationCheck(  Repository repository){
    assertThat(repository,instanceOf(S3Repository.class));
  }
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Collections.singletonList(TestS3RepositoryPlugin.class);
  }
public static class TestS3RepositoryPlugin extends S3RepositoryPlugin {
    public TestS3RepositoryPlugin(    final Settings settings){
      super(settings);
    }
    @Override public Map<String,Repository.Factory> getRepositories(    final Environment env,    final NamedXContentRegistry registry){
      return Collections.singletonMap(S3Repository.TYPE,(metadata) -> new S3Repository(metadata,env.settings(),registry,new S3Service(env.settings()){
        @Override AmazonS3 buildClient(        S3ClientSettings clientSettings){
          return new MockAmazonS3(blobs,bucket,serverSideEncryption,cannedACL,storageClass);
        }
      }
));
    }
  }
  public void testInsecureRepositoryCredentials() throws Exception {
    final String repositoryName="testInsecureRepositoryCredentials";
    createAndCheckTestRepository(repositoryName);
    final NodeClient nodeClient=internalCluster().getInstance(NodeClient.class);
    final RestGetRepositoriesAction getRepoAction=new RestGetRepositoriesAction(Settings.EMPTY,mock(RestController.class),internalCluster().getInstance(SettingsFilter.class));
    final RestRequest getRepoRequest=new FakeRestRequest();
    getRepoRequest.params().put("repository",repositoryName);
    final CountDownLatch getRepoLatch=new CountDownLatch(1);
    final AtomicReference<AssertionError> getRepoError=new AtomicReference<>();
    getRepoAction.handleRequest(getRepoRequest,new AbstractRestChannel(getRepoRequest,true){
      @Override public void sendResponse(      RestResponse response){
        try {
          final String responseContent=response.content().utf8ToString();
          assertThat(responseContent,containsString(bucket));
          assertThat(responseContent,not(containsString(accessKey)));
          assertThat(responseContent,not(containsString(secureKey)));
        }
 catch (        final AssertionError ex) {
          getRepoError.set(ex);
        }
        getRepoLatch.countDown();
      }
    }
,nodeClient);
    getRepoLatch.await();
    if (getRepoError.get() != null) {
      throw getRepoError.get();
    }
  }
}
