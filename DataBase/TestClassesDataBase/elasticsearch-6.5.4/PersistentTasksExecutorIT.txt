@ESIntegTestCase.ClusterScope(scope=ESIntegTestCase.Scope.SUITE,minNumDataNodes=2) public class PersistentTasksExecutorIT extends ESIntegTestCase {
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Collections.singletonList(TestPersistentTasksPlugin.class);
  }
  @Override protected Collection<Class<? extends Plugin>> transportClientPlugins(){
    return nodePlugins();
  }
  protected boolean ignoreExternalCluster(){
    return true;
  }
  @After public void cleanup() throws Exception {
    assertNoRunningTasks();
  }
public static class WaitForPersistentTaskFuture<Params extends PersistentTaskParams> extends PlainActionFuture<PersistentTask<Params>> implements WaitForPersistentTaskListener<Params> {
  }
  public void testPersistentActionFailure() throws Exception {
    PersistentTasksService persistentTasksService=internalCluster().getInstance(PersistentTasksService.class);
    PlainActionFuture<PersistentTask<TestParams>> future=new PlainActionFuture<>();
    persistentTasksService.sendStartRequest(UUIDs.base64UUID(),TestPersistentTasksExecutor.NAME,new TestParams("Blah"),future);
    long allocationId=future.get().getAllocationId();
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(),equalTo(1));
    }
);
    TaskInfo firstRunningTask=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().get(0);
    logger.info("Found running task with id {} and parent {}",firstRunningTask.getId(),firstRunningTask.getParentTaskId());
    assertThat(firstRunningTask.getParentTaskId().getId(),equalTo(allocationId));
    assertThat(firstRunningTask.getParentTaskId().getNodeId(),equalTo("cluster"));
    logger.info("Failing the running task");
    assertThat(new TestTasksRequestBuilder(client()).setOperation("fail").setTaskId(firstRunningTask.getTaskId()).get().getTasks().size(),equalTo(1));
    logger.info("Waiting for persistent task with id {} to disappear",firstRunningTask.getId());
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks(),empty());
    }
);
  }
  public void testPersistentActionCompletion() throws Exception {
    PersistentTasksService persistentTasksService=internalCluster().getInstance(PersistentTasksService.class);
    PlainActionFuture<PersistentTask<TestParams>> future=new PlainActionFuture<>();
    String taskId=UUIDs.base64UUID();
    persistentTasksService.sendStartRequest(taskId,TestPersistentTasksExecutor.NAME,new TestParams("Blah"),future);
    long allocationId=future.get().getAllocationId();
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(),equalTo(1));
    }
);
    TaskInfo firstRunningTask=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").setDetailed(true).get().getTasks().get(0);
    logger.info("Found running task with id {} and parent {}",firstRunningTask.getId(),firstRunningTask.getParentTaskId());
    assertThat(firstRunningTask.getParentTaskId().getId(),equalTo(allocationId));
    assertThat(firstRunningTask.getParentTaskId().getNodeId(),equalTo("cluster"));
    assertThat(firstRunningTask.getDescription(),equalTo("id=" + taskId));
    if (randomBoolean()) {
      logger.info("Simulating errant completion notification");
      PlainActionFuture<PersistentTask<?>> failedCompletionNotificationFuture=new PlainActionFuture<>();
      persistentTasksService.sendCompletionRequest(taskId,Long.MAX_VALUE,null,failedCompletionNotificationFuture);
      assertThrows(failedCompletionNotificationFuture,ResourceNotFoundException.class);
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").setDetailed(true).get().getTasks().size(),equalTo(1));
    }
    stopOrCancelTask(firstRunningTask.getTaskId());
  }
  public void testPersistentActionWithNoAvailableNode() throws Exception {
    PersistentTasksService persistentTasksService=internalCluster().getInstance(PersistentTasksService.class);
    PlainActionFuture<PersistentTask<TestParams>> future=new PlainActionFuture<>();
    TestParams testParams=new TestParams("Blah");
    testParams.setExecutorNodeAttr("test");
    persistentTasksService.sendStartRequest(UUIDs.base64UUID(),TestPersistentTasksExecutor.NAME,testParams,future);
    String taskId=future.get().getId();
    Settings nodeSettings=Settings.builder().put(nodeSettings(0)).put("node.attr.test_attr","test").build();
    String newNode=internalCluster().startNode(nodeSettings);
    String newNodeId=internalCluster().clusterService(newNode).localNode().getId();
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(),equalTo(1));
    }
);
    TaskInfo taskInfo=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().get(0);
    assertThat(taskInfo.getTaskId().getNodeId(),equalTo(newNodeId));
    internalCluster().stopRandomNode(settings -> "test".equals(settings.get("node.attr.test_attr")));
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks(),empty());
    }
);
    PlainActionFuture<PersistentTask<?>> removeFuture=new PlainActionFuture<>();
    persistentTasksService.sendRemoveRequest(taskId,removeFuture);
    assertEquals(removeFuture.get().getId(),taskId);
  }
  public void testPersistentActionStatusUpdate() throws Exception {
    PersistentTasksService persistentTasksService=internalCluster().getInstance(PersistentTasksService.class);
    PlainActionFuture<PersistentTask<TestParams>> future=new PlainActionFuture<>();
    persistentTasksService.sendStartRequest(UUIDs.base64UUID(),TestPersistentTasksExecutor.NAME,new TestParams("Blah"),future);
    String taskId=future.get().getId();
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(),equalTo(1));
    }
);
    TaskInfo firstRunningTask=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().get(0);
    PersistentTasksCustomMetaData tasksInProgress=internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);
    assertThat(tasksInProgress.tasks().size(),equalTo(1));
    assertThat(tasksInProgress.tasks().iterator().next().getState(),nullValue());
    int numberOfUpdates=randomIntBetween(1,10);
    for (int i=0; i < numberOfUpdates; i++) {
      logger.info("Updating the task states");
      assertThat(new TestTasksRequestBuilder(client()).setOperation("update_status").setTaskId(firstRunningTask.getTaskId()).get().getTasks().size(),equalTo(1));
      int finalI=i;
      WaitForPersistentTaskFuture<?> future1=new WaitForPersistentTaskFuture<>();
      persistentTasksService.waitForPersistentTaskCondition(taskId,task -> task != null && task.getState() != null && task.getState().toString() != null && task.getState().toString().equals("{\"phase\":\"phase " + (finalI + 1) + "\"}"),TimeValue.timeValueSeconds(10),future1);
      assertThat(future1.get().getId(),equalTo(taskId));
    }
    WaitForPersistentTaskFuture<?> future1=new WaitForPersistentTaskFuture<>();
    persistentTasksService.waitForPersistentTaskCondition(taskId,task -> false,TimeValue.timeValueMillis(10),future1);
    assertThrows(future1,IllegalStateException.class,"timed out after 10ms");
    PlainActionFuture<PersistentTask<?>> failedUpdateFuture=new PlainActionFuture<>();
    persistentTasksService.sendUpdateStateRequest(taskId,-2,new State("should fail"),failedUpdateFuture);
    assertThrows(failedUpdateFuture,ResourceNotFoundException.class,"the task with id " + taskId + " and allocation id -2 doesn't exist");
    WaitForPersistentTaskFuture<?> future2=new WaitForPersistentTaskFuture<>();
    persistentTasksService.waitForPersistentTaskCondition(taskId,Objects::isNull,TimeValue.timeValueSeconds(10),future2);
    logger.info("Completing the running task");
    assertThat(new TestTasksRequestBuilder(client()).setOperation("finish").setTaskId(firstRunningTask.getTaskId()).get().getTasks().size(),equalTo(1));
    assertThat(future2.get(),nullValue());
  }
  public void testCreatePersistentTaskWithDuplicateId() throws Exception {
    PersistentTasksService persistentTasksService=internalCluster().getInstance(PersistentTasksService.class);
    PlainActionFuture<PersistentTask<TestParams>> future=new PlainActionFuture<>();
    String taskId=UUIDs.base64UUID();
    persistentTasksService.sendStartRequest(taskId,TestPersistentTasksExecutor.NAME,new TestParams("Blah"),future);
    future.get();
    PlainActionFuture<PersistentTask<TestParams>> future2=new PlainActionFuture<>();
    persistentTasksService.sendStartRequest(taskId,TestPersistentTasksExecutor.NAME,new TestParams("Blah"),future2);
    assertThrows(future2,ResourceAlreadyExistsException.class);
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(),equalTo(1));
    }
);
    TaskInfo firstRunningTask=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().get(0);
    logger.info("Completing the running task");
    assertThat(new TestTasksRequestBuilder(client()).setOperation("finish").setTaskId(firstRunningTask.getTaskId()).get().getTasks().size(),equalTo(1));
    logger.info("Waiting for persistent task with id {} to disappear",firstRunningTask.getId());
    assertBusy(() -> {
      assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks(),empty());
    }
);
  }
  private void stopOrCancelTask(  TaskId taskId){
    if (randomBoolean()) {
      logger.info("Completing the running task");
      assertThat(new TestTasksRequestBuilder(client()).setOperation("finish").setTaskId(taskId).get().getTasks().size(),equalTo(1));
    }
 else {
      logger.info("Cancelling the running task");
      assertThat(client().admin().cluster().prepareCancelTasks().setTaskId(taskId).get().getTasks().size(),equalTo(1));
    }
  }
  private void assertNoRunningTasks() throws Exception {
    assertBusy(() -> {
      List<TaskInfo> tasks=client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks();
      logger.info("Found {} tasks",tasks.size());
      assertThat(tasks.size(),equalTo(0));
      assertThat(((PersistentTasksCustomMetaData)internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)).tasks(),empty());
    }
);
  }
}
