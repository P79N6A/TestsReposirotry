public class TransportBulkActionTookTests extends ESTestCase {
  private static ThreadPool threadPool;
  private ClusterService clusterService;
  @BeforeClass public static void beforeClass(){
    threadPool=new TestThreadPool("TransportBulkActionTookTests");
  }
  @AfterClass public static void afterClass(){
    ThreadPool.terminate(threadPool,30,TimeUnit.SECONDS);
    threadPool=null;
  }
  @Before public void setUp() throws Exception {
    super.setUp();
    clusterService=createClusterService(threadPool);
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    clusterService.close();
  }
  private TransportBulkAction createAction(  boolean controlled,  AtomicLong expected){
    CapturingTransport capturingTransport=new CapturingTransport();
    TransportService transportService=capturingTransport.createCapturingTransportService(clusterService.getSettings(),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,boundAddress -> clusterService.localNode(),null,Collections.emptySet());
    transportService.start();
    transportService.acceptIncomingRequests();
    IndexNameExpressionResolver resolver=new Resolver(Settings.EMPTY);
    ActionFilters actionFilters=new ActionFilters(new HashSet<>());
    TransportCreateIndexAction createIndexAction=new TransportCreateIndexAction(Settings.EMPTY,transportService,clusterService,threadPool,null,actionFilters,resolver);
    if (controlled) {
      return new TestTransportBulkAction(Settings.EMPTY,threadPool,transportService,clusterService,null,createIndexAction,actionFilters,resolver,null,expected::get){
        @Override void executeBulk(        Task task,        BulkRequest bulkRequest,        long startTimeNanos,        ActionListener<BulkResponse> listener,        AtomicArray<BulkItemResponse> responses,        Map<String,IndexNotFoundException> indicesThatCannotBeCreated){
          expected.set(1000000);
          super.executeBulk(task,bulkRequest,startTimeNanos,listener,responses,indicesThatCannotBeCreated);
        }
      }
;
    }
 else {
      return new TestTransportBulkAction(Settings.EMPTY,threadPool,transportService,clusterService,null,createIndexAction,actionFilters,resolver,null,System::nanoTime){
        @Override void executeBulk(        Task task,        BulkRequest bulkRequest,        long startTimeNanos,        ActionListener<BulkResponse> listener,        AtomicArray<BulkItemResponse> responses,        Map<String,IndexNotFoundException> indicesThatCannotBeCreated){
          long elapsed=spinForAtLeastOneMillisecond();
          expected.set(elapsed);
          super.executeBulk(task,bulkRequest,startTimeNanos,listener,responses,indicesThatCannotBeCreated);
        }
      }
;
    }
  }
  public void testTookWithControlledClock() throws Exception {
    runTestTook(true);
  }
  public void testTookWithRealClock() throws Exception {
    runTestTook(false);
  }
  private void runTestTook(  boolean controlled) throws Exception {
    String bulkAction=copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk.json");
    if (Constants.WINDOWS) {
      bulkAction=Strings.replace(bulkAction,"\r\n","\n");
    }
    BulkRequest bulkRequest=new BulkRequest();
    bulkRequest.add(bulkAction.getBytes(StandardCharsets.UTF_8),0,bulkAction.length(),null,null,XContentType.JSON);
    AtomicLong expected=new AtomicLong();
    TransportBulkAction action=createAction(controlled,expected);
    action.doExecute(null,bulkRequest,new ActionListener<BulkResponse>(){
      @Override public void onResponse(      BulkResponse bulkItemResponses){
        if (controlled) {
          assertThat(bulkItemResponses.getTook().getMillis(),equalTo(TimeUnit.MILLISECONDS.convert(expected.get(),TimeUnit.NANOSECONDS)));
        }
 else {
          assertThat(bulkItemResponses.getTook().getMillis(),greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(expected.get(),TimeUnit.NANOSECONDS)));
        }
      }
      @Override public void onFailure(      Exception e){
      }
    }
);
  }
static class Resolver extends IndexNameExpressionResolver {
    Resolver(    Settings settings){
      super(settings);
    }
    @Override public String[] concreteIndexNames(    ClusterState state,    IndicesRequest request){
      return request.indices();
    }
  }
static class TestTransportBulkAction extends TransportBulkAction {
    TestTransportBulkAction(    Settings settings,    ThreadPool threadPool,    TransportService transportService,    ClusterService clusterService,    TransportShardBulkAction shardBulkAction,    TransportCreateIndexAction createIndexAction,    ActionFilters actionFilters,    IndexNameExpressionResolver indexNameExpressionResolver,    AutoCreateIndex autoCreateIndex,    LongSupplier relativeTimeProvider){
      super(settings,threadPool,transportService,clusterService,null,shardBulkAction,createIndexAction,actionFilters,indexNameExpressionResolver,autoCreateIndex,relativeTimeProvider);
    }
    @Override boolean needToCheck(){
      return randomBoolean();
    }
    @Override boolean shouldAutoCreate(    String index,    ClusterState state){
      return randomBoolean();
    }
  }
static class TestTransportCreateIndexAction extends TransportCreateIndexAction {
    TestTransportCreateIndexAction(    Settings settings,    TransportService transportService,    ClusterService clusterService,    ThreadPool threadPool,    MetaDataCreateIndexService createIndexService,    ActionFilters actionFilters,    IndexNameExpressionResolver indexNameExpressionResolver){
      super(settings,transportService,clusterService,threadPool,createIndexService,actionFilters,indexNameExpressionResolver);
    }
    @Override protected void doExecute(    Task task,    CreateIndexRequest request,    ActionListener<CreateIndexResponse> listener){
      listener.onResponse(newResponse());
    }
  }
}
