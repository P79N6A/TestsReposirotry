public class FieldCapabilitiesIT extends ESIntegTestCase {
  @Before public void setUp() throws Exception {
    super.setUp();
    XContentBuilder oldIndexMapping=XContentFactory.jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("distance").field("type","double").endObject().startObject("route_length_miles").field("type","alias").field("path","distance").endObject().startObject("playlist").field("type","text").endObject().startObject("secret_soundtrack").field("type","alias").field("path","playlist").endObject().endObject().endObject().endObject();
    assertAcked(prepareCreate("old_index").addMapping("_doc",oldIndexMapping));
    XContentBuilder newIndexMapping=XContentFactory.jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("distance").field("type","text").endObject().startObject("route_length_miles").field("type","double").endObject().endObject().endObject().endObject();
    assertAcked(prepareCreate("new_index").addMapping("_doc",newIndexMapping));
  }
public static class FieldFilterPlugin extends Plugin implements MapperPlugin {
    @Override public Function<String,Predicate<String>> getFieldFilter(){
      return index -> field -> !field.equals("playlist");
    }
  }
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Collections.singleton(FieldFilterPlugin.class);
  }
  public void testFieldAlias(){
    FieldCapabilitiesResponse response=client().prepareFieldCaps().setFields("distance","route_length_miles").execute().actionGet();
    assertTrue(response.get().containsKey("distance"));
    assertTrue(response.get().containsKey("route_length_miles"));
    Map<String,FieldCapabilities> distance=response.getField("distance");
    assertEquals(2,distance.size());
    assertTrue(distance.containsKey("double"));
    assertEquals(new FieldCapabilities("distance","double",true,true,new String[]{"old_index"},null,null),distance.get("double"));
    assertTrue(distance.containsKey("text"));
    assertEquals(new FieldCapabilities("distance","text",true,false,new String[]{"new_index"},null,null),distance.get("text"));
    Map<String,FieldCapabilities> routeLength=response.getField("route_length_miles");
    assertEquals(1,routeLength.size());
    assertTrue(routeLength.containsKey("double"));
    assertEquals(new FieldCapabilities("route_length_miles","double",true,true),routeLength.get("double"));
  }
  public void testFieldAliasWithWildcard(){
    FieldCapabilitiesResponse response=client().prepareFieldCaps().setFields("route*").execute().actionGet();
    assertEquals(1,response.get().size());
    assertTrue(response.get().containsKey("route_length_miles"));
  }
  public void testFieldAliasFiltering(){
    FieldCapabilitiesResponse response=client().prepareFieldCaps().setFields("secret-soundtrack","route_length_miles").execute().actionGet();
    assertEquals(1,response.get().size());
    assertTrue(response.get().containsKey("route_length_miles"));
  }
  public void testFieldAliasFilteringWithWildcard(){
    FieldCapabilitiesResponse response=client().prepareFieldCaps().setFields("distance","secret*").execute().actionGet();
    assertEquals(1,response.get().size());
    assertTrue(response.get().containsKey("distance"));
  }
}
