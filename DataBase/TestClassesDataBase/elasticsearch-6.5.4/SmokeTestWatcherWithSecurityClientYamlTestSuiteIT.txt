public class SmokeTestWatcherWithSecurityClientYamlTestSuiteIT extends ESClientYamlSuiteTestCase {
  private static final String TEST_ADMIN_USERNAME="test_admin";
  private static final String TEST_ADMIN_PASSWORD="x-pack-test-password";
  public SmokeTestWatcherWithSecurityClientYamlTestSuiteIT(  @Name("yaml") ClientYamlTestCandidate testCandidate){
    super(testCandidate);
  }
  @ParametersFactory public static Iterable<Object[]> parameters() throws Exception {
    return ESClientYamlSuiteTestCase.createParameters();
  }
  @Before public void startWatcher() throws Exception {
    getAdminExecutionContext().callApi("indices.delete",Collections.singletonMap("index",".watcher-history-*"),emptyList(),emptyMap());
    Request request=new Request("PUT","/index_not_allowed_to_read/doc/1");
    request.setJsonEntity("{\"foo\":\"bar\"}");
    adminClient().performRequest(request);
    assertBusy(() -> {
      ClientYamlTestResponse response=getAdminExecutionContext().callApi("xpack.watcher.stats",emptyMap(),emptyList(),emptyMap());
      String state=(String)response.evaluate("stats.0.watcher_state");
switch (state) {
case "stopped":
        ClientYamlTestResponse startResponse=getAdminExecutionContext().callApi("xpack.watcher.start",emptyMap(),emptyList(),emptyMap());
      boolean isAcknowledged=(boolean)startResponse.evaluate("acknowledged");
    assertThat(isAcknowledged,is(true));
  throw new AssertionError("waiting until stopped state reached started state");
case "stopping":
throw new AssertionError("waiting until stopping state reached stopped state to start again");
case "starting":
throw new AssertionError("waiting until starting state reached started state");
case "started":
break;
default :
throw new AssertionError("unknown state[" + state + "]");
}
}
);
assertBusy(() -> {
for (String template : WatcherIndexTemplateRegistryField.TEMPLATE_NAMES) {
ClientYamlTestResponse templateExistsResponse=getAdminExecutionContext().callApi("indices.exists_template",singletonMap("name",template),emptyList(),emptyMap());
assertThat(templateExistsResponse.getStatusCode(),is(200));
}
}
);
}
@After public void stopWatcher() throws Exception {
assertBusy(() -> {
ClientYamlTestResponse response=getAdminExecutionContext().callApi("xpack.watcher.stats",emptyMap(),emptyList(),emptyMap());
String state=(String)response.evaluate("stats.0.watcher_state");
switch (state) {
case "stopped":
break;
case "stopping":
throw new AssertionError("waiting until stopping state reached stopped state");
case "starting":
throw new AssertionError("waiting until starting state reached started state to stop");
case "started":
ClientYamlTestResponse stopResponse=getAdminExecutionContext().callApi("xpack.watcher.stop",emptyMap(),emptyList(),emptyMap());
boolean isAcknowledged=(boolean)stopResponse.evaluate("acknowledged");
assertThat(isAcknowledged,is(true));
throw new AssertionError("waiting until started state reached stopped state");
default :
throw new AssertionError("unknown state[" + state + "]");
}
}
);
}
@Override protected Settings restClientSettings(){
String token=basicAuthHeaderValue("watcher_manager",new SecureString("x-pack-test-password".toCharArray()));
return Settings.builder().put(ThreadContext.PREFIX + ".Authorization",token).build();
}
@Override protected Settings restAdminSettings(){
String token=basicAuthHeaderValue(TEST_ADMIN_USERNAME,new SecureString(TEST_ADMIN_PASSWORD.toCharArray()));
return Settings.builder().put(ThreadContext.PREFIX + ".Authorization",token).build();
}
}
