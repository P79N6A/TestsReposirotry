private static class ServiceHolder implements Closeable {
  private final IndexFieldDataService indexFieldDataService;
  private final SearchModule searchModule;
  private final NamedWriteableRegistry namedWriteableRegistry;
  private final NamedXContentRegistry xContentRegistry;
  private final ClientInvocationHandler clientInvocationHandler=new ClientInvocationHandler();
  private final IndexSettings idxSettings;
  private final SimilarityService similarityService;
  private final MapperService mapperService;
  private final BitsetFilterCache bitsetFilterCache;
  private final ScriptService scriptService;
  private final Client client;
  private final long nowInMillis;
  ServiceHolder(  Settings nodeSettings,  Settings indexSettings,  Collection<Class<? extends Plugin>> plugins,  long nowInMillis,  AbstractBuilderTestCase testCase) throws IOException {
    Environment env=InternalSettingsPreparer.prepareEnvironment(nodeSettings,null);
    this.nowInMillis=nowInMillis;
    PluginsService pluginsService;
    pluginsService=new PluginsService(nodeSettings,null,env.modulesFile(),env.pluginsFile(),plugins);
    client=(Client)Proxy.newProxyInstance(Client.class.getClassLoader(),new Class[]{Client.class},clientInvocationHandler);
    ScriptModule scriptModule=createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));
    List<Setting<?>> additionalSettings=pluginsService.getPluginSettings();
    SettingsModule settingsModule=new SettingsModule(nodeSettings,additionalSettings,pluginsService.getPluginSettingsFilter(),Collections.emptySet());
    searchModule=new SearchModule(nodeSettings,false,pluginsService.filterPlugins(SearchPlugin.class));
    IndicesModule indicesModule=new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));
    List<NamedWriteableRegistry.Entry> entries=new ArrayList<>();
    entries.addAll(indicesModule.getNamedWriteables());
    entries.addAll(searchModule.getNamedWriteables());
    namedWriteableRegistry=new NamedWriteableRegistry(entries);
    xContentRegistry=new NamedXContentRegistry(Stream.of(searchModule.getNamedXContents().stream()).flatMap(Function.identity()).collect(toList()));
    IndexScopedSettings indexScopedSettings=settingsModule.getIndexScopedSettings();
    idxSettings=IndexSettingsModule.newIndexSettings(index,indexSettings,indexScopedSettings);
    AnalysisModule analysisModule=new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings),emptyList());
    IndexAnalyzers indexAnalyzers=analysisModule.getAnalysisRegistry().build(idxSettings);
    scriptService=scriptModule.getScriptService();
    similarityService=new SimilarityService(idxSettings,null,Collections.emptyMap());
    MapperRegistry mapperRegistry=indicesModule.getMapperRegistry();
    mapperService=new MapperService(idxSettings,indexAnalyzers,xContentRegistry,similarityService,mapperRegistry,() -> createShardContext(null));
    IndicesFieldDataCache indicesFieldDataCache=new IndicesFieldDataCache(nodeSettings,new IndexFieldDataCache.Listener(){
    }
);
    indexFieldDataService=new IndexFieldDataService(idxSettings,indicesFieldDataCache,new NoneCircuitBreakerService(),mapperService);
    bitsetFilterCache=new BitsetFilterCache(idxSettings,new BitsetFilterCache.Listener(){
      @Override public void onCache(      ShardId shardId,      Accountable accountable){
      }
      @Override public void onRemoval(      ShardId shardId,      Accountable accountable){
      }
    }
);
    for (    String type : currentTypes) {
      mapperService.merge(type,new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,STRING_FIELD_NAME,"type=text",STRING_FIELD_NAME_2,"type=keyword",INT_FIELD_NAME,"type=integer",INT_RANGE_FIELD_NAME,"type=integer_range",DOUBLE_FIELD_NAME,"type=double",BOOLEAN_FIELD_NAME,"type=boolean",DATE_FIELD_NAME,"type=date",DATE_RANGE_FIELD_NAME,"type=date_range",OBJECT_FIELD_NAME,"type=object",GEO_POINT_FIELD_NAME,"type=geo_point",GEO_SHAPE_FIELD_NAME,"type=geo_shape"))),MapperService.MergeReason.MAPPING_UPDATE,false);
      if (idxSettings.isSingleType()) {
        mapperService.merge(type,new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,STRING_ALIAS_FIELD_NAME,"type=alias,path=" + STRING_FIELD_NAME,INT_ALIAS_FIELD_NAME,"type=alias,path=" + INT_FIELD_NAME,DATE_ALIAS_FIELD_NAME,"type=alias,path=" + DATE_FIELD_NAME,GEO_POINT_ALIAS_FIELD_NAME,"type=alias,path=" + GEO_POINT_FIELD_NAME))),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
 else {
        mapperService.merge(type,new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,STRING_ALIAS_FIELD_NAME,"type=text",INT_ALIAS_FIELD_NAME,"type=integer",DATE_ALIAS_FIELD_NAME,"type=date",GEO_POINT_ALIAS_FIELD_NAME,"type=geo_point"))),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
      mapperService.merge(type,new CompressedXContent("{\"properties\":{\"" + OBJECT_FIELD_NAME + "\":{\"type\":\"object\","+ "\"properties\":{\""+ DATE_FIELD_NAME+ "\":{\"type\":\"date\"},\""+ INT_FIELD_NAME+ "\":{\"type\":\"integer\"}}}}}"),MapperService.MergeReason.MAPPING_UPDATE,false);
    }
    testCase.initializeAdditionalMappings(mapperService);
  }
  @Override public void close() throws IOException {
  }
  QueryShardContext createShardContext(  IndexReader reader){
    return new QueryShardContext(0,idxSettings,bitsetFilterCache,indexFieldDataService::getForField,mapperService,similarityService,scriptService,xContentRegistry,namedWriteableRegistry,this.client,reader,() -> nowInMillis,null);
  }
  ScriptModule createScriptModule(  List<ScriptPlugin> scriptPlugins){
    if (scriptPlugins == null || scriptPlugins.isEmpty()) {
      return newTestScriptModule();
    }
    return new ScriptModule(Settings.EMPTY,scriptPlugins);
  }
}
