private static class ConstantScoreFunction extends ScoreFunction {
  final double value;
  protected ConstantScoreFunction(  double value){
    super(CombineFunction.REPLACE);
    this.value=value;
  }
  @Override public LeafScoreFunction getLeafScoreFunction(  LeafReaderContext ctx) throws IOException {
    return new LeafScoreFunction(){
      @Override public double score(      int docId,      float subQueryScore) throws IOException {
        return value;
      }
      @Override public Explanation explainScore(      int docId,      Explanation subQueryScore) throws IOException {
        return null;
      }
    }
;
  }
  @Override public boolean needsScores(){
    return false;
  }
  @Override protected boolean doEquals(  ScoreFunction other){
    return false;
  }
  @Override protected int doHashCode(){
    return 0;
  }
}
