public static class ThrowingFileChannel extends FilterFileChannel {
  private final FailSwitch fail;
  private final boolean partialWrite;
  private final boolean throwUnknownException;
  public ThrowingFileChannel(  FailSwitch fail,  boolean partialWrite,  boolean throwUnknownException,  FileChannel delegate) throws MockDirectoryWrapper.FakeIOException {
    super(delegate);
    this.fail=fail;
    this.partialWrite=partialWrite;
    this.throwUnknownException=throwUnknownException;
    if (fail.fail()) {
      throw new MockDirectoryWrapper.FakeIOException();
    }
  }
  @Override public int read(  ByteBuffer dst) throws IOException {
    if (fail.fail()) {
      throw new MockDirectoryWrapper.FakeIOException();
    }
    return super.read(dst);
  }
  @Override public long read(  ByteBuffer[] dsts,  int offset,  int length) throws IOException {
    if (fail.fail()) {
      throw new MockDirectoryWrapper.FakeIOException();
    }
    return super.read(dsts,offset,length);
  }
  @Override public long write(  ByteBuffer[] srcs,  int offset,  int length) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public int write(  ByteBuffer src,  long position) throws IOException {
    throw new UnsupportedOperationException();
  }
  public int write(  ByteBuffer src) throws IOException {
    if (fail.fail()) {
      if (partialWrite) {
        if (src.hasRemaining()) {
          final int pos=src.position();
          final int limit=src.limit();
          src.limit(randomIntBetween(pos,limit));
          super.write(src);
          src.limit(limit);
          src.position(pos);
          throw new IOException("__FAKE__ no space left on device");
        }
      }
      if (throwUnknownException) {
        throw new UnknownException();
      }
 else {
        throw new MockDirectoryWrapper.FakeIOException();
      }
    }
    return super.write(src);
  }
  @Override public void force(  boolean metaData) throws IOException {
    if (fail.fail()) {
      throw new MockDirectoryWrapper.FakeIOException();
    }
    super.force(metaData);
  }
  @Override public long position() throws IOException {
    if (fail.fail()) {
      throw new MockDirectoryWrapper.FakeIOException();
    }
    return super.position();
  }
}
