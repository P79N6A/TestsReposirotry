public static class State implements PersistentTaskState {
  private final String phase;
  public static final ConstructingObjectParser<State,Void> STATE_PARSER=new ConstructingObjectParser<>(TestPersistentTasksExecutor.NAME,args -> new State((String)args[0]));
static {
    STATE_PARSER.declareString(constructorArg(),new ParseField("phase"));
  }
  public State(  String phase){
    this.phase=requireNonNull(phase,"Phase cannot be null");
  }
  public State(  StreamInput in) throws IOException {
    phase=in.readString();
  }
  @Override public String getWriteableName(){
    return TestPersistentTasksExecutor.NAME;
  }
  @Override public XContentBuilder toXContent(  XContentBuilder builder,  Params params) throws IOException {
    builder.startObject();
    builder.field("phase",phase);
    builder.endObject();
    return builder;
  }
  public static PersistentTaskState fromXContent(  XContentParser parser) throws IOException {
    return STATE_PARSER.parse(parser,null);
  }
  @Override public boolean isFragment(){
    return false;
  }
  @Override public void writeTo(  StreamOutput out) throws IOException {
    out.writeString(phase);
  }
  @Override public String toString(){
    return Strings.toString(this);
  }
  @Override public boolean equals(  Object obj){
    if (obj == null || obj.getClass() != State.class) {
      return false;
    }
    State other=(State)obj;
    return phase.equals(other.phase);
  }
  @Override public int hashCode(){
    return phase.hashCode();
  }
}
