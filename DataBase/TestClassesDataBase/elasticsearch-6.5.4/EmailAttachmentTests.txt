public class EmailAttachmentTests extends AbstractWatcherIntegrationTestCase {
  private MockWebServer webServer=new MockWebServer();
  private MockResponse mockResponse=new MockResponse().setResponseCode(200).addHeader("Content-Type","application/foo").setBody("This is the content");
  private EmailServer server;
  @Override public void setUp() throws Exception {
    super.setUp();
    webServer.enqueue(mockResponse);
    webServer.start();
    server=EmailServer.localhost(logger);
  }
  @After public void cleanup() throws Exception {
    server.stop();
    webServer.close();
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("xpack.notification.email.account.test.smtp.auth",true).put("xpack.notification.email.account.test.smtp.user",EmailServer.USERNAME).put("xpack.notification.email.account.test.smtp.password",EmailServer.PASSWORD).put("xpack.notification.email.account.test.smtp.port",server.port()).put("xpack.notification.email.account.test.smtp.host","localhost").build();
  }
  public List<String> getAttachments(  MimeMessage message) throws Exception {
    Object content=message.getContent();
    if (content instanceof String)     return null;
    if (content instanceof Multipart) {
      Multipart multipart=(Multipart)content;
      List<String> result=new ArrayList<>();
      for (int i=0; i < multipart.getCount(); i++) {
        result.addAll(getAttachments(multipart.getBodyPart(i)));
      }
      return result;
    }
    return null;
  }
  private List<String> getAttachments(  BodyPart part) throws Exception {
    List<String> result=new ArrayList<>();
    Object content=part.getContent();
    if (content instanceof InputStream || content instanceof String) {
      if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()) || Strings.hasLength(part.getFileName())) {
        result.add(Streams.copyToString(new InputStreamReader(part.getInputStream(),StandardCharsets.UTF_8)));
        return result;
      }
 else {
        return new ArrayList<>();
      }
    }
    if (content instanceof Multipart) {
      Multipart multipart=(Multipart)content;
      for (int i=0; i < multipart.getCount(); i++) {
        BodyPart bodyPart=multipart.getBodyPart(i);
        result.addAll(getAttachments(bodyPart));
      }
    }
    return result;
  }
  public void testThatEmailAttachmentsAreSent() throws Exception {
    org.elasticsearch.xpack.watcher.notification.email.DataAttachment dataFormat=randomFrom(JSON,YAML);
    final CountDownLatch latch=new CountDownLatch(1);
    server.addListener(message -> {
      assertThat(message.getSubject(),equalTo("Subject"));
      List<String> attachments=getAttachments(message);
      if (dataFormat == YAML) {
        assertThat(attachments,hasItem(allOf(startsWith("---"),containsString("_test_id"))));
      }
 else {
        assertThat(attachments,hasItem(allOf(startsWith("{"),containsString("_test_id"))));
      }
      assertThat(attachments,hasItem(containsString("This is the content")));
      latch.countDown();
    }
);
    WatcherClient watcherClient=watcherClient();
    createIndex("idx");
    client().prepareIndex("idx","type").setSource("field","value").get();
    refresh();
    List<EmailAttachmentParser.EmailAttachment> attachments=new ArrayList<>();
    DataAttachment dataAttachment=DataAttachment.builder("my-id").dataAttachment(dataFormat).build();
    attachments.add(dataAttachment);
    HttpRequestTemplate requestTemplate=HttpRequestTemplate.builder("localhost",webServer.getPort()).path("/").scheme(Scheme.HTTP).build();
    HttpRequestAttachment httpRequestAttachment=HttpRequestAttachment.builder("other-id").httpRequestTemplate(requestTemplate).build();
    attachments.add(httpRequestAttachment);
    EmailAttachments emailAttachments=new EmailAttachments(attachments);
    XContentBuilder tmpBuilder=jsonBuilder();
    tmpBuilder.startObject();
    emailAttachments.toXContent(tmpBuilder,ToXContent.EMPTY_PARAMS);
    tmpBuilder.endObject();
    EmailTemplate.Builder emailBuilder=EmailTemplate.builder().from("_from").to("_to").subject("Subject");
    WatchSourceBuilder watchSourceBuilder=watchBuilder().trigger(schedule(interval(5,IntervalSchedule.Interval.Unit.SECONDS))).input(noneInput()).condition(InternalAlwaysCondition.INSTANCE).addAction("_email",emailAction(emailBuilder).setAuthentication(EmailServer.USERNAME,EmailServer.PASSWORD.toCharArray()).setAttachments(emailAttachments));
    watcherClient.preparePutWatch("_test_id").setSource(watchSourceBuilder).get();
    timeWarp().trigger("_test_id");
    refresh();
    SearchResponse searchResponse=client().prepareSearch(HistoryStoreField.INDEX_PREFIX_WITH_TEMPLATE + "*").setQuery(QueryBuilders.termQuery("watch_id","_test_id")).execute().actionGet();
    assertHitCount(searchResponse,1);
    if (!latch.await(5,TimeUnit.SECONDS)) {
      fail("waited too long for email to be received");
    }
  }
}
