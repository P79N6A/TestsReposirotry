class TestRequestHandler implements TransportRequestHandler<TestRequest> {
  private final TransportService service;
  TestRequestHandler(  TransportService service){
    this.service=service;
  }
  @Override public void messageReceived(  TestRequest request,  TransportChannel channel) throws Exception {
    if (randomBoolean()) {
      Thread.sleep(randomIntBetween(10,50));
    }
    if (fail.get()) {
      throw new IOException("forced failure");
    }
    if (randomBoolean() && request.resendCount++ < 20) {
      DiscoveryNode node=randomFrom(nodeA,nodeB,nodeC);
      logger.debug("send secondary request from {} to {} - {}",toNodeMap.get(service),node,request.info);
      service.sendRequest(node,"internal:action1",new TestRequest("secondary " + request.info),TransportRequestOptions.builder().withCompress(randomBoolean()).build(),new TransportResponseHandler<TestResponse>(){
        @Override public TestResponse newInstance(){
          return new TestResponse();
        }
        @Override public void handleResponse(        TestResponse response){
          try {
            if (randomBoolean()) {
              Thread.sleep(randomIntBetween(10,50));
            }
            logger.debug("send secondary response {}",response.info);
            channel.sendResponse(response);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public void handleException(        TransportException exp){
          try {
            logger.debug("send secondary exception response for request {}",request.info);
            channel.sendResponse(exp);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public String executor(){
          return randomBoolean() ? ThreadPool.Names.SAME : ThreadPool.Names.GENERIC;
        }
      }
);
    }
 else {
      logger.debug("send response for {}",request.info);
      channel.sendResponse(new TestResponse("Response for: " + request.info));
    }
  }
}
