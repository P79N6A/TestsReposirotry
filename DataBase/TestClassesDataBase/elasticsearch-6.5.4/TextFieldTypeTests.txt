public class TextFieldTypeTests extends FieldTypeTestCase {
  @Override protected MappedFieldType createDefaultFieldType(){
    return new TextFieldMapper.TextFieldType();
  }
  @Before public void setupProperties(){
    addModifier(new Modifier("fielddata",true){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        tft.setFielddata(tft.fielddata() == false);
      }
    }
);
    addModifier(new Modifier("fielddata_frequency_filter.min",true){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        tft.setFielddataMinFrequency(3);
      }
    }
);
    addModifier(new Modifier("fielddata_frequency_filter.max",true){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        tft.setFielddataMaxFrequency(0.2);
      }
    }
);
    addModifier(new Modifier("fielddata_frequency_filter.min_segment_size",true){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        tft.setFielddataMinSegmentSize(1000);
      }
    }
);
    addModifier(new Modifier("index_phrases",false){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        tft.setIndexPhrases(true);
      }
    }
);
    addModifier(new Modifier("index_prefixes",false){
      @Override public void modify(      MappedFieldType ft){
        TextFieldMapper.TextFieldType tft=(TextFieldMapper.TextFieldType)ft;
        TextFieldMapper.PrefixFieldType pft=tft.getPrefixFieldType();
        if (pft == null) {
          tft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType(ft.name(),3,3));
        }
 else {
          tft.setPrefixFieldType(null);
        }
      }
    }
);
  }
  public void testTermQuery(){
    MappedFieldType ft=createDefaultFieldType();
    ft.setName("field");
    ft.setIndexOptions(IndexOptions.DOCS);
    assertEquals(new TermQuery(new Term("field","foo")),ft.termQuery("foo",null));
    ft.setIndexOptions(IndexOptions.NONE);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> ft.termQuery("bar",null));
    assertEquals("Cannot search on field [field] since it is not indexed.",e.getMessage());
  }
  public void testTermsQuery(){
    MappedFieldType ft=createDefaultFieldType();
    ft.setName("field");
    ft.setIndexOptions(IndexOptions.DOCS);
    List<BytesRef> terms=new ArrayList<>();
    terms.add(new BytesRef("foo"));
    terms.add(new BytesRef("bar"));
    assertEquals(new TermInSetQuery("field",terms),ft.termsQuery(Arrays.asList("foo","bar"),null));
    ft.setIndexOptions(IndexOptions.NONE);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> ft.termsQuery(Arrays.asList("foo","bar"),null));
    assertEquals("Cannot search on field [field] since it is not indexed.",e.getMessage());
  }
  public void testRegexpQuery(){
    MappedFieldType ft=createDefaultFieldType();
    ft.setName("field");
    ft.setIndexOptions(IndexOptions.DOCS);
    assertEquals(new RegexpQuery(new Term("field","foo.*")),ft.regexpQuery("foo.*",0,10,null,null));
    ft.setIndexOptions(IndexOptions.NONE);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> ft.regexpQuery("foo.*",0,10,null,null));
    assertEquals("Cannot search on field [field] since it is not indexed.",e.getMessage());
  }
  public void testFuzzyQuery(){
    MappedFieldType ft=createDefaultFieldType();
    ft.setName("field");
    ft.setIndexOptions(IndexOptions.DOCS);
    assertEquals(new FuzzyQuery(new Term("field","foo"),2,1,50,true),ft.fuzzyQuery("foo",Fuzziness.fromEdits(2),1,50,true));
    ft.setIndexOptions(IndexOptions.NONE);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> ft.fuzzyQuery("foo",Fuzziness.fromEdits(2),1,50,true));
    assertEquals("Cannot search on field [field] since it is not indexed.",e.getMessage());
  }
}
