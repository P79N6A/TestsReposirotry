public abstract class CcrSingleNodeTestCase extends ESSingleNodeTestCase {
  @Override protected Settings nodeSettings(){
    Settings.Builder builder=Settings.builder();
    builder.put(XPackSettings.SECURITY_ENABLED.getKey(),false);
    builder.put(XPackSettings.MONITORING_ENABLED.getKey(),false);
    builder.put(XPackSettings.WATCHER_ENABLED.getKey(),false);
    builder.put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(),false);
    builder.put(XPackSettings.LOGSTASH_ENABLED.getKey(),false);
    builder.put(LicenseService.SELF_GENERATED_LICENSE_TYPE.getKey(),"trial");
    return builder.build();
  }
  @Override protected Collection<Class<? extends Plugin>> getPlugins(){
    return Collections.singletonList(LocalStateCcr.class);
  }
  @Before public void setupLocalRemote(){
    ClusterUpdateSettingsRequest updateSettingsRequest=new ClusterUpdateSettingsRequest();
    String address=getInstanceFromNode(TransportService.class).boundAddress().publishAddress().toString();
    updateSettingsRequest.transientSettings(Settings.builder().put("cluster.remote.local.seeds",address));
    assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet());
  }
  @After public void remoteLocalRemote() throws Exception {
    ClusterService clusterService=getInstanceFromNode(ClusterService.class);
    removeCCRRelatedMetadataFromClusterState(clusterService);
    ClusterUpdateSettingsRequest updateSettingsRequest=new ClusterUpdateSettingsRequest();
    updateSettingsRequest.transientSettings(Settings.builder().put("cluster.remote.local.seeds",(String)null));
    assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet());
  }
  protected ResumeFollowAction.Request getResumeFollowRequest(  String followerIndex){
    ResumeFollowAction.Request request=new ResumeFollowAction.Request();
    request.setFollowerIndex(followerIndex);
    request.setMaxRetryDelay(TimeValue.timeValueMillis(10));
    request.setReadPollTimeout(TimeValue.timeValueMillis(10));
    return request;
  }
  protected PutFollowAction.Request getPutFollowRequest(  String leaderIndex,  String followerIndex){
    PutFollowAction.Request request=new PutFollowAction.Request();
    request.setRemoteCluster("local");
    request.setLeaderIndex(leaderIndex);
    request.setFollowRequest(getResumeFollowRequest(followerIndex));
    return request;
  }
  protected void ensureEmptyWriteBuffers() throws Exception {
    assertBusy(() -> {
      FollowStatsAction.StatsResponses statsResponses=client().execute(FollowStatsAction.INSTANCE,new FollowStatsAction.StatsRequest()).actionGet();
      for (      FollowStatsAction.StatsResponse statsResponse : statsResponses.getStatsResponses()) {
        ShardFollowNodeTaskStatus status=statsResponse.status();
        assertThat(status.writeBufferOperationCount(),equalTo(0));
        assertThat(status.writeBufferSizeInBytes(),equalTo(0L));
      }
    }
);
  }
}
