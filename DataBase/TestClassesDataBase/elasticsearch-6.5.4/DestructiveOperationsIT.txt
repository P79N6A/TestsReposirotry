public class DestructiveOperationsIT extends ESIntegTestCase {
  @After public void afterTest(){
    Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),(String)null).build();
    assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  }
  public void testDeleteIndexIsRejected() throws Exception {
    Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),true).build();
    assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    createIndex("index1","1index");
    assertAcked(client().admin().indices().prepareDelete("1index").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareDelete("i*").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareDelete("_all").get());
  }
  public void testDeleteIndexDefaultBehaviour() throws Exception {
    if (randomBoolean()) {
      Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),false).build();
      assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    }
    createIndex("index1","1index");
    if (randomBoolean()) {
      assertAcked(client().admin().indices().prepareDelete("_all").get());
    }
 else {
      assertAcked(client().admin().indices().prepareDelete("*").get());
    }
    assertThat(client().admin().indices().prepareExists("_all").get().isExists(),equalTo(false));
  }
  public void testCloseIndexIsRejected() throws Exception {
    Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),true).build();
    assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    createIndex("index1","1index");
    assertAcked(client().admin().indices().prepareClose("1index").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareClose("i*").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareClose("_all").get());
  }
  public void testCloseIndexDefaultBehaviour() throws Exception {
    if (randomBoolean()) {
      Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),false).build();
      assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    }
    createIndex("index1","1index");
    if (randomBoolean()) {
      assertAcked(client().admin().indices().prepareClose("_all").get());
    }
 else {
      assertAcked(client().admin().indices().prepareClose("*").get());
    }
    ClusterState state=client().admin().cluster().prepareState().get().getState();
    for (    ObjectObjectCursor<String,IndexMetaData> indexMetaDataObjectObjectCursor : state.getMetaData().indices()) {
      assertEquals(IndexMetaData.State.CLOSE,indexMetaDataObjectObjectCursor.value.getState());
    }
  }
  public void testOpenIndexIsRejected() throws Exception {
    Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),true).build();
    assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    createIndex("index1","1index");
    assertAcked(client().admin().indices().prepareClose("1index","index1").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareOpen("i*").get());
    expectThrows(IllegalArgumentException.class,() -> client().admin().indices().prepareOpen("_all").get());
  }
  public void testOpenIndexDefaultBehaviour() throws Exception {
    if (randomBoolean()) {
      Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),false).build();
      assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
    }
    createIndex("index1","1index");
    assertAcked(client().admin().indices().prepareClose("1index","index1").get());
    if (randomBoolean()) {
      assertAcked(client().admin().indices().prepareOpen("_all").get());
    }
 else {
      assertAcked(client().admin().indices().prepareOpen("*").get());
    }
    ClusterState state=client().admin().cluster().prepareState().get().getState();
    for (    ObjectObjectCursor<String,IndexMetaData> indexMetaDataObjectObjectCursor : state.getMetaData().indices()) {
      assertEquals(IndexMetaData.State.OPEN,indexMetaDataObjectObjectCursor.value.getState());
    }
  }
}
