@TestLogging("org.elasticsearch.xpack.core.ssl.SSLService:TRACE") public class OpenLdapUserSearchSessionFactoryTests extends ESTestCase {
  private Settings globalSettings;
  private ThreadPool threadPool;
  private static final String LDAPCACERT_PATH="/ca.crt";
  @Before public void init() throws Exception {
    Path caPath=getDataPath(LDAPCACERT_PATH);
    globalSettings=Settings.builder().put("path.home",createTempDir()).put("xpack.ssl.certificate_authorities",caPath).build();
    threadPool=new TestThreadPool("LdapUserSearchSessionFactoryTests");
  }
  @After public void shutdown() throws InterruptedException {
    terminate(threadPool);
  }
  public void testUserSearchWithBindUserOpenLDAP() throws Exception {
    final boolean useSecureBindPassword=randomBoolean();
    String groupSearchBase="ou=people,dc=oldap,dc=test,dc=elasticsearch,dc=com";
    String userSearchBase="ou=people,dc=oldap,dc=test,dc=elasticsearch,dc=com";
    final Settings.Builder realmSettings=Settings.builder().put(LdapTestCase.buildLdapSettings(new String[]{OpenLdapTests.OPEN_LDAP_DNS_URL},Strings.EMPTY_ARRAY,groupSearchBase,LdapSearchScope.ONE_LEVEL)).put("user_search.base_dn",userSearchBase).put("group_search.user_attribute","uid").put("bind_dn","uid=blackwidow,ou=people,dc=oldap,dc=test,dc=elasticsearch,dc=com").put("user_search.pool.enabled",randomBoolean()).put("ssl.verification_mode","full");
    if (useSecureBindPassword) {
      final MockSecureSettings secureSettings=new MockSecureSettings();
      secureSettings.setString("secure_bind_password",OpenLdapTests.PASSWORD);
      realmSettings.setSecureSettings(secureSettings);
    }
 else {
      realmSettings.put("bind_password",OpenLdapTests.PASSWORD);
    }
    RealmConfig config=new RealmConfig("oldap-test",realmSettings.build(),globalSettings,TestEnvironment.newEnvironment(globalSettings),new ThreadContext(globalSettings));
    Settings.Builder builder=Settings.builder().put(globalSettings,false);
    builder.put(Settings.builder().put(config.settings(),false).normalizePrefix("xpack.security.authc.realms.oldap-test.").build());
    final MockSecureSettings secureSettings=new MockSecureSettings();
    if (useSecureBindPassword) {
      secureSettings.setString("xpack.security.authc.realms.oldap-test.secure_bind_password",OpenLdapTests.PASSWORD);
    }
    builder.setSecureSettings(secureSettings);
    Settings settings=builder.build();
    SSLService sslService=new SSLService(settings,TestEnvironment.newEnvironment(settings));
    String[] users=new String[]{"cap","hawkeye","hulk","ironman","thor"};
    try (LdapUserSearchSessionFactory sessionFactory=new LdapUserSearchSessionFactory(config,sslService,threadPool)){
      for (      String user : users) {
        try (LdapSession ldap=session(sessionFactory,user,new SecureString(OpenLdapTests.PASSWORD))){
          assertThat(ldap.userDn(),is(equalTo(new MessageFormat("uid={0},ou=people,dc=oldap,dc=test,dc=elasticsearch,dc=com",Locale.ROOT).format(new Object[]{user},new StringBuffer(),null).toString())));
          assertThat(groups(ldap),hasItem(containsString("Avengers")));
        }
         try (LdapSession ldap=unauthenticatedSession(sessionFactory,user)){
          assertThat(ldap.userDn(),is(equalTo(new MessageFormat("uid={0},ou=people,dc=oldap,dc=test,dc=elasticsearch,dc=com",Locale.ROOT).format(new Object[]{user},new StringBuffer(),null).toString())));
          assertThat(groups(ldap),hasItem(containsString("Avengers")));
        }
       }
    }
     if (useSecureBindPassword == false) {
      assertSettingDeprecationsAndWarnings(new Setting<?>[]{PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD});
    }
  }
  private MockSecureSettings newSecureSettings(  String key,  String value){
    MockSecureSettings secureSettings=new MockSecureSettings();
    secureSettings.setString(key,value);
    return secureSettings;
  }
  private LdapSession session(  SessionFactory factory,  String username,  SecureString password){
    PlainActionFuture<LdapSession> future=new PlainActionFuture<>();
    factory.session(username,password,future);
    return future.actionGet();
  }
  private List<String> groups(  LdapSession ldapSession){
    Objects.requireNonNull(ldapSession);
    PlainActionFuture<List<String>> future=new PlainActionFuture<>();
    ldapSession.groups(future);
    return future.actionGet();
  }
  private LdapSession unauthenticatedSession(  SessionFactory factory,  String username){
    PlainActionFuture<LdapSession> future=new PlainActionFuture<>();
    factory.unauthenticatedSession(username,future);
    return future.actionGet();
  }
}
