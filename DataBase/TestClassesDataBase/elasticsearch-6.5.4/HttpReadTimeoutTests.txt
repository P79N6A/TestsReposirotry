public class HttpReadTimeoutTests extends ESTestCase {
  private MockWebServer webServer=new MockWebServer();
  @Before public void init() throws Exception {
    webServer.start();
    webServer.enqueue(new MockResponse().setBeforeReplyDelay(TimeValue.timeValueSeconds(20)));
  }
  @After public void cleanup() throws Exception {
    webServer.close();
  }
  public void testDefaultTimeout() throws Exception {
    Environment environment=TestEnvironment.newEnvironment(Settings.builder().put("path.home",createTempDir()).build());
    HttpRequest request=HttpRequest.builder("localhost",webServer.getPort()).method(HttpMethod.POST).path("/").build();
    try (HttpClient httpClient=new HttpClient(Settings.EMPTY,new SSLService(environment.settings(),environment),null)){
      long start=System.nanoTime();
      expectThrows(SocketTimeoutException.class,() -> httpClient.execute(request));
      TimeValue timeout=TimeValue.timeValueNanos(System.nanoTime() - start);
      logger.info("http connection timed out after {}",timeout);
      assertThat(timeout.seconds(),greaterThan(8L));
      assertThat(timeout.seconds(),lessThan(12L));
    }
   }
  public void testDefaultTimeoutCustom() throws Exception {
    Environment environment=TestEnvironment.newEnvironment(Settings.builder().put("path.home",createTempDir()).build());
    HttpRequest request=HttpRequest.builder("localhost",webServer.getPort()).method(HttpMethod.POST).path("/").build();
    try (HttpClient httpClient=new HttpClient(Settings.builder().put("xpack.http.default_read_timeout","3s").build(),new SSLService(environment.settings(),environment),null)){
      long start=System.nanoTime();
      expectThrows(SocketTimeoutException.class,() -> httpClient.execute(request));
      TimeValue timeout=TimeValue.timeValueNanos(System.nanoTime() - start);
      logger.info("http connection timed out after {}",timeout);
      assertThat(timeout.seconds(),greaterThan(1L));
      assertThat(timeout.seconds(),lessThan(5L));
    }
   }
  public void testTimeoutCustomPerRequest() throws Exception {
    Environment environment=TestEnvironment.newEnvironment(Settings.builder().put("path.home",createTempDir()).build());
    HttpRequest request=HttpRequest.builder("localhost",webServer.getPort()).readTimeout(TimeValue.timeValueSeconds(3)).method(HttpMethod.POST).path("/").build();
    try (HttpClient httpClient=new HttpClient(Settings.builder().put("xpack.http.default_read_timeout","10s").build(),new SSLService(environment.settings(),environment),null)){
      long start=System.nanoTime();
      expectThrows(SocketTimeoutException.class,() -> httpClient.execute(request));
      TimeValue timeout=TimeValue.timeValueNanos(System.nanoTime() - start);
      logger.info("http connection timed out after {}",timeout);
      assertThat(timeout.seconds(),greaterThan(1L));
      assertThat(timeout.seconds(),lessThan(5L));
    }
   }
}
