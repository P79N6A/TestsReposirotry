public class MatchPhraseQueryIT extends ESIntegTestCase {
  private static final String INDEX="test";
  @Before public void setUp() throws Exception {
    super.setUp();
    CreateIndexRequestBuilder createIndexRequest=prepareCreate(INDEX).setSettings(Settings.builder().put(indexSettings()).put("index.analysis.analyzer.standard_stopwords.type","standard").putList("index.analysis.analyzer.standard_stopwords.stopwords","of","the","who"));
    assertAcked(createIndexRequest);
    ensureGreen();
  }
  public void testZeroTermsQuery() throws ExecutionException, InterruptedException {
    List<IndexRequestBuilder> indexRequests=getIndexRequests();
    indexRandom(true,false,indexRequests);
    MatchPhraseQueryBuilder baseQuery=QueryBuilders.matchPhraseQuery("name","the who").analyzer("standard_stopwords");
    MatchPhraseQueryBuilder matchNoneQuery=baseQuery.zeroTermsQuery(ZeroTermsQuery.NONE);
    SearchResponse matchNoneResponse=client().prepareSearch(INDEX).setQuery(matchNoneQuery).get();
    assertHitCount(matchNoneResponse,0L);
    MatchPhraseQueryBuilder matchAllQuery=baseQuery.zeroTermsQuery(ZeroTermsQuery.ALL);
    SearchResponse matchAllResponse=client().prepareSearch(INDEX).setQuery(matchAllQuery).get();
    assertHitCount(matchAllResponse,2L);
  }
  private List<IndexRequestBuilder> getIndexRequests(){
    List<IndexRequestBuilder> requests=new ArrayList<>();
    requests.add(client().prepareIndex(INDEX,"band").setSource("name","the beatles"));
    requests.add(client().prepareIndex(INDEX,"band").setSource("name","led zeppelin"));
    return requests;
  }
}
