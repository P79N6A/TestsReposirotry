public class BooleanFieldTypeTests extends FieldTypeTestCase {
  @Override protected MappedFieldType createDefaultFieldType(){
    return new BooleanFieldMapper.BooleanFieldType();
  }
  @Before public void setupProperties(){
    setDummyNullValue(true);
  }
  public void testValueFormat(){
    MappedFieldType ft=createDefaultFieldType();
    assertEquals(false,ft.docValueFormat(null,null).format(0));
    assertEquals(true,ft.docValueFormat(null,null).format(1));
  }
  public void testValueForSearch(){
    MappedFieldType ft=createDefaultFieldType();
    assertEquals(true,ft.valueForDisplay("T"));
    assertEquals(false,ft.valueForDisplay("F"));
    expectThrows(IllegalArgumentException.class,() -> ft.valueForDisplay(0));
    expectThrows(IllegalArgumentException.class,() -> ft.valueForDisplay("true"));
    expectThrows(IllegalArgumentException.class,() -> ft.valueForDisplay("G"));
  }
  public void testTermQuery(){
    MappedFieldType ft=createDefaultFieldType();
    ft.setName("field");
    ft.setIndexOptions(IndexOptions.DOCS);
    assertEquals(new TermQuery(new Term("field","T")),ft.termQuery("true",null));
    assertEquals(new TermQuery(new Term("field","F")),ft.termQuery("false",null));
    ft.setIndexOptions(IndexOptions.NONE);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> ft.termQuery("true",null));
    assertEquals("Cannot search on field [field] since it is not indexed.",e.getMessage());
  }
}
