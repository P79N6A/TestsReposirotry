public class HttpEmailAttachementParserTests extends ESTestCase {
  private HttpClient httpClient;
  private EmailAttachmentsParser emailAttachmentsParser;
  private Map<String,EmailAttachmentParser> attachmentParsers;
  @Before public void init() throws Exception {
    httpClient=mock(HttpClient.class);
    attachmentParsers=new HashMap<>();
    attachmentParsers.put(HttpEmailAttachementParser.TYPE,new HttpEmailAttachementParser(httpClient,new MockTextTemplateEngine()));
    emailAttachmentsParser=new EmailAttachmentsParser(attachmentParsers);
  }
  public void testSerializationWorks() throws Exception {
    HttpResponse response=new HttpResponse(200,"This is my response".getBytes(UTF_8));
    when(httpClient.execute(any(HttpRequest.class))).thenReturn(response);
    String id="some-id";
    XContentBuilder builder=jsonBuilder().startObject().startObject(id).startObject(HttpEmailAttachementParser.TYPE).startObject("request").field("scheme","http").field("host","test.de").field("port",80).field("method","get").field("path","/foo").startObject("params").endObject().startObject("headers").endObject().endObject();
    boolean configureContentType=randomBoolean();
    if (configureContentType) {
      builder.field("content_type","application/foo");
    }
    boolean isInline=randomBoolean();
    if (isInline) {
      builder.field("inline",true);
    }
    builder.endObject().endObject().endObject();
    XContentParser parser=createParser(builder);
    EmailAttachments emailAttachments=emailAttachmentsParser.parse(parser);
    assertThat(emailAttachments.getAttachments(),hasSize(1));
    XContentBuilder toXcontentBuilder=jsonBuilder().startObject();
    List<EmailAttachmentParser.EmailAttachment> attachments=new ArrayList<>(emailAttachments.getAttachments());
    attachments.get(0).toXContent(toXcontentBuilder,ToXContent.EMPTY_PARAMS);
    toXcontentBuilder.endObject();
    assertThat(Strings.toString(toXcontentBuilder),is(Strings.toString(builder)));
    assertThat(attachments.get(0).inline(),is(isInline));
  }
  public void testNonOkHttpCodeThrowsException() throws Exception {
    HttpResponse response=new HttpResponse(403,"This is my response".getBytes(UTF_8));
    when(httpClient.execute(any(HttpRequest.class))).thenReturn(response);
    HttpRequestTemplate requestTemplate=HttpRequestTemplate.builder("localhost",80).path("foo").build();
    HttpRequestAttachment attachment=new HttpRequestAttachment("someid",requestTemplate,false,null);
    WatchExecutionContext ctx=createWatchExecutionContext();
    ElasticsearchException exception=expectThrows(ElasticsearchException.class,() -> attachmentParsers.get(HttpEmailAttachementParser.TYPE).toAttachment(ctx,new Payload.Simple(),attachment));
    assertThat(exception.getMessage(),is("Watch[watch1] attachment[someid] HTTP error status host[localhost], port[80], " + "method[GET], path[foo], status[403]"));
  }
  public void testEmptyResponseThrowsException() throws Exception {
    HttpResponse response=new HttpResponse(200);
    when(httpClient.execute(any(HttpRequest.class))).thenReturn(response);
    HttpRequestTemplate requestTemplate=HttpRequestTemplate.builder("localhost",80).path("foo").build();
    HttpRequestAttachment attachment=new HttpRequestAttachment("someid",requestTemplate,false,null);
    WatchExecutionContext ctx=createWatchExecutionContext();
    ElasticsearchException exception=expectThrows(ElasticsearchException.class,() -> attachmentParsers.get(HttpEmailAttachementParser.TYPE).toAttachment(ctx,new Payload.Simple(),attachment));
    assertThat(exception.getMessage(),is("Watch[watch1] attachment[someid] HTTP empty response body host[localhost], port[80], " + "method[GET], path[foo], status[200]"));
  }
  public void testHttpClientThrowsException() throws Exception {
    when(httpClient.execute(any(HttpRequest.class))).thenThrow(new IOException("whatever"));
    HttpRequestTemplate requestTemplate=HttpRequestTemplate.builder("localhost",80).path("foo").build();
    HttpRequestAttachment attachment=new HttpRequestAttachment("someid",requestTemplate,false,null);
    WatchExecutionContext ctx=createWatchExecutionContext();
    IOException exception=expectThrows(IOException.class,() -> attachmentParsers.get(HttpEmailAttachementParser.TYPE).toAttachment(ctx,new Payload.Simple(),attachment));
    assertThat(exception.getMessage(),is("whatever"));
  }
  private WatchExecutionContext createWatchExecutionContext(){
    DateTime now=DateTime.now(DateTimeZone.UTC);
    Wid wid=new Wid(randomAlphaOfLength(5),now);
    Map<String,Object> metadata=MapBuilder.<String,Object>newMapBuilder().put("_key","_val").map();
    return mockExecutionContextBuilder("watch1").wid(wid).payload(new Payload.Simple()).time("watch1",now).metadata(metadata).buildMock();
  }
}
