private static final class ControlQuery extends Query {
  private final MemoryIndex memoryIndex;
  private final PercolateQuery.QueryStore queryStore;
  private ControlQuery(  MemoryIndex memoryIndex,  PercolateQuery.QueryStore queryStore){
    this.memoryIndex=memoryIndex;
    this.queryStore=queryStore;
  }
  @Override public Weight createWeight(  IndexSearcher searcher,  boolean needsScores,  float boost){
    final IndexSearcher percolatorIndexSearcher=memoryIndex.createSearcher();
    return new Weight(this){
      @Override public void extractTerms(      Set<Term> terms){
      }
      @Override public Explanation explain(      LeafReaderContext context,      int doc) throws IOException {
        Scorer scorer=scorer(context);
        if (scorer != null) {
          int result=scorer.iterator().advance(doc);
          if (result == doc) {
            return Explanation.match(scorer.score(),"ControlQuery");
          }
        }
        return Explanation.noMatch("ControlQuery");
      }
      @Override public String toString(){
        return "weight(" + ControlQuery.this + ")";
      }
      @Override public Scorer scorer(      LeafReaderContext context) throws IOException {
        float _score[]=new float[]{boost};
        DocIdSetIterator allDocs=DocIdSetIterator.all(context.reader().maxDoc());
        CheckedFunction<Integer,Query,IOException> leaf=queryStore.getQueries(context);
        FilteredDocIdSetIterator memoryIndexIterator=new FilteredDocIdSetIterator(allDocs){
          @Override protected boolean match(          int doc){
            try {
              Query query=leaf.apply(doc);
              TopDocs topDocs=percolatorIndexSearcher.search(query,1);
              if (topDocs.totalHits > 0) {
                if (needsScores) {
                  _score[0]=topDocs.scoreDocs[0].score;
                }
                return true;
              }
 else {
                return false;
              }
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
          }
        }
;
        return new Scorer(this){
          @Override public int docID(){
            return memoryIndexIterator.docID();
          }
          @Override public DocIdSetIterator iterator(){
            return memoryIndexIterator;
          }
          @Override public float score() throws IOException {
            return _score[0];
          }
        }
;
      }
      @Override public boolean isCacheable(      LeafReaderContext ctx){
        return false;
      }
    }
;
  }
  @Override public String toString(  String field){
    return "control{" + field + "}";
  }
  @Override public boolean equals(  Object obj){
    return sameClassAs(obj);
  }
  @Override public int hashCode(){
    return classHash();
  }
}
