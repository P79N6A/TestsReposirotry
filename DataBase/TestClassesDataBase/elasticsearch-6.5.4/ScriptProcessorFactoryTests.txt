public class ScriptProcessorFactoryTests extends ESTestCase {
  private ScriptProcessor.Factory factory;
  private static final Map<String,String> ingestScriptParamToType;
static {
    Map<String,String> map=new HashMap<>();
    map.put("id","stored");
    map.put("source","inline");
    ingestScriptParamToType=Collections.unmodifiableMap(map);
  }
  @Before public void init(){
    factory=new ScriptProcessor.Factory(mock(ScriptService.class));
  }
  public void testFactoryValidationWithDefaultLang() throws Exception {
    Map<String,Object> configMap=new HashMap<>();
    String randomType=randomFrom("id","source");
    configMap.put(randomType,"foo");
    ScriptProcessor processor=factory.create(null,randomAlphaOfLength(10),configMap);
    assertThat(processor.getScript().getLang(),equalTo(randomType.equals("id") ? null : Script.DEFAULT_SCRIPT_LANG));
    assertThat(processor.getScript().getType().toString(),equalTo(ingestScriptParamToType.get(randomType)));
    assertThat(processor.getScript().getParams(),equalTo(Collections.emptyMap()));
  }
  public void testFactoryValidationWithParams() throws Exception {
    Map<String,Object> configMap=new HashMap<>();
    String randomType=randomFrom("id","source");
    Map<String,Object> randomParams=Collections.singletonMap(randomAlphaOfLength(10),randomAlphaOfLength(10));
    configMap.put(randomType,"foo");
    configMap.put("params",randomParams);
    ScriptProcessor processor=factory.create(null,randomAlphaOfLength(10),configMap);
    assertThat(processor.getScript().getLang(),equalTo(randomType.equals("id") ? null : Script.DEFAULT_SCRIPT_LANG));
    assertThat(processor.getScript().getType().toString(),equalTo(ingestScriptParamToType.get(randomType)));
    assertThat(processor.getScript().getParams(),equalTo(randomParams));
  }
  public void testFactoryValidationForMultipleScriptingTypes() throws Exception {
    Map<String,Object> configMap=new HashMap<>();
    configMap.put("id","foo");
    configMap.put("source","bar");
    configMap.put("lang","mockscript");
    Exception exception=expectThrows(Exception.class,() -> factory.create(null,randomAlphaOfLength(10),configMap));
    assertThat(exception.getMessage(),containsString("Only one of [id] or [source] may be configured"));
  }
  public void testFactoryValidationAtLeastOneScriptingType() throws Exception {
    Map<String,Object> configMap=new HashMap<>();
    configMap.put("lang","mockscript");
    ElasticsearchException exception=expectThrows(ElasticsearchException.class,() -> factory.create(null,randomAlphaOfLength(10),configMap));
    assertThat(exception.getMessage(),is("Need [id] or [source] parameter to refer to scripts"));
  }
  public void testInlineBackcompat() throws Exception {
    Map<String,Object> configMap=new HashMap<>();
    configMap.put("inline","code");
    factory.create(null,randomAlphaOfLength(10),configMap);
    assertWarnings("Specifying script source with [inline] is deprecated, use [source] instead.");
  }
  public void testFactoryInvalidateWithInvalidCompiledScript() throws Exception {
    String randomType=randomFrom("source","id");
    ScriptService mockedScriptService=mock(ScriptService.class);
    ScriptException thrownException=new ScriptException("compile-time exception",new RuntimeException(),Collections.emptyList(),"script","mockscript");
    when(mockedScriptService.compile(any(),any())).thenThrow(thrownException);
    factory=new ScriptProcessor.Factory(mockedScriptService);
    Map<String,Object> configMap=new HashMap<>();
    configMap.put("lang","mockscript");
    configMap.put(randomType,"my_script");
    ElasticsearchException exception=expectThrows(ElasticsearchException.class,() -> factory.create(null,randomAlphaOfLength(10),configMap));
    assertThat(exception.getMessage(),is("compile-time exception"));
  }
}
