private class LookbackOnlyTestHelper {
  private String jobId;
  private String airlineVariant;
  private String dataIndex;
  private boolean addScriptedFields;
  private boolean shouldSucceedInput;
  private boolean shouldSucceedProcessing;
  LookbackOnlyTestHelper(  String jobId,  String dataIndex){
    this.jobId=jobId;
    this.dataIndex=dataIndex;
    this.shouldSucceedInput=true;
    this.shouldSucceedProcessing=true;
    this.airlineVariant="airline";
  }
  public LookbackOnlyTestHelper setAddScriptedFields(  boolean value){
    addScriptedFields=value;
    return this;
  }
  public LookbackOnlyTestHelper setAirlineVariant(  String airlineVariant){
    this.airlineVariant=airlineVariant;
    return this;
  }
  public LookbackOnlyTestHelper setShouldSucceedInput(  boolean value){
    shouldSucceedInput=value;
    return this;
  }
  public LookbackOnlyTestHelper setShouldSucceedProcessing(  boolean value){
    shouldSucceedProcessing=value;
    return this;
  }
  public void execute() throws Exception {
    createJob(jobId,airlineVariant);
    String datafeedId="datafeed-" + jobId;
    new DatafeedBuilder(datafeedId,jobId,dataIndex,"response").setScriptedFields(addScriptedFields ? "{\"airline\":{\"script\":{\"lang\":\"painless\",\"inline\":\"doc['airline'].value\"}}}" : null).build();
    openJob(client(),jobId);
    startDatafeedAndWaitUntilStopped(datafeedId);
    waitUntilJobIsClosed(jobId);
    Response jobStatsResponse=client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "/_stats"));
    String jobStatsResponseAsString=EntityUtils.toString(jobStatsResponse.getEntity());
    if (shouldSucceedInput) {
      assertThat(jobStatsResponseAsString,containsString("\"input_record_count\":2"));
    }
 else {
      assertThat(jobStatsResponseAsString,containsString("\"input_record_count\":0"));
    }
    if (shouldSucceedProcessing) {
      assertThat(jobStatsResponseAsString,containsString("\"processed_record_count\":2"));
    }
 else {
      assertThat(jobStatsResponseAsString,containsString("\"processed_record_count\":0"));
    }
    assertThat(jobStatsResponseAsString,containsString("\"missing_field_count\":0"));
  }
}
