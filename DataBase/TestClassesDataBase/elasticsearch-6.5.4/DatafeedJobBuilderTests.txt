public class DatafeedJobBuilderTests extends ESTestCase {
  private Client client;
  private Auditor auditor;
  private JobResultsProvider jobResultsProvider;
  private Consumer<Exception> taskHandler;
  private DatafeedJobBuilder datafeedJobBuilder;
  @Before public void init(){
    client=mock(Client.class);
    ThreadPool threadPool=mock(ThreadPool.class);
    when(client.threadPool()).thenReturn(threadPool);
    when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY));
    when(client.settings()).thenReturn(Settings.EMPTY);
    auditor=mock(Auditor.class);
    jobResultsProvider=mock(JobResultsProvider.class);
    taskHandler=mock(Consumer.class);
    datafeedJobBuilder=new DatafeedJobBuilder(client,jobResultsProvider,auditor,System::currentTimeMillis);
    Mockito.doAnswer(invocationOnMock -> {
      String jobId=(String)invocationOnMock.getArguments()[0];
      @SuppressWarnings("unchecked") Consumer<DataCounts> handler=(Consumer<DataCounts>)invocationOnMock.getArguments()[1];
      handler.accept(new DataCounts(jobId));
      return null;
    }
).when(jobResultsProvider).dataCounts(any(),any(),any());
    doAnswer(invocationOnMock -> {
      @SuppressWarnings("rawtypes") Consumer consumer=(Consumer)invocationOnMock.getArguments()[3];
      consumer.accept(new ResourceNotFoundException("dummy"));
      return null;
    }
).when(jobResultsProvider).bucketsViaInternalClient(any(),any(),any(),any());
  }
  public void testBuild_GivenScrollDatafeedAndNewJob() throws Exception {
    DataDescription.Builder dataDescription=new DataDescription.Builder();
    dataDescription.setTimeField("time");
    Job.Builder jobBuilder=DatafeedManagerTests.createDatafeedJob();
    jobBuilder.setDataDescription(dataDescription);
    DatafeedConfig datafeed=DatafeedManagerTests.createDatafeedConfig("datafeed1","foo").build();
    AtomicBoolean wasHandlerCalled=new AtomicBoolean(false);
    ActionListener<DatafeedJob> datafeedJobHandler=ActionListener.wrap(datafeedJob -> {
      assertThat(datafeedJob.isRunning(),is(true));
      assertThat(datafeedJob.isIsolated(),is(false));
      assertThat(datafeedJob.lastEndTimeMs(),is(nullValue()));
      wasHandlerCalled.compareAndSet(false,true);
    }
,e -> fail());
    datafeedJobBuilder.build(jobBuilder.build(new Date()),datafeed,datafeedJobHandler);
    assertBusy(() -> wasHandlerCalled.get());
  }
  public void testBuild_GivenScrollDatafeedAndOldJobWithLatestRecordTimestampAfterLatestBucket() throws Exception {
    DataDescription.Builder dataDescription=new DataDescription.Builder();
    dataDescription.setTimeField("time");
    Job.Builder jobBuilder=DatafeedManagerTests.createDatafeedJob();
    jobBuilder.setDataDescription(dataDescription);
    DatafeedConfig datafeed=DatafeedManagerTests.createDatafeedConfig("datafeed1","foo").build();
    givenLatestTimes(7_200_000L,3_600_000L);
    AtomicBoolean wasHandlerCalled=new AtomicBoolean(false);
    ActionListener<DatafeedJob> datafeedJobHandler=ActionListener.wrap(datafeedJob -> {
      assertThat(datafeedJob.isRunning(),is(true));
      assertThat(datafeedJob.isIsolated(),is(false));
      assertThat(datafeedJob.lastEndTimeMs(),equalTo(7_200_000L));
      wasHandlerCalled.compareAndSet(false,true);
    }
,e -> fail());
    datafeedJobBuilder.build(jobBuilder.build(new Date()),datafeed,datafeedJobHandler);
    assertBusy(() -> wasHandlerCalled.get());
  }
  public void testBuild_GivenScrollDatafeedAndOldJobWithLatestBucketAfterLatestRecordTimestamp() throws Exception {
    DataDescription.Builder dataDescription=new DataDescription.Builder();
    dataDescription.setTimeField("time");
    Job.Builder jobBuilder=DatafeedManagerTests.createDatafeedJob();
    jobBuilder.setDataDescription(dataDescription);
    DatafeedConfig datafeed=DatafeedManagerTests.createDatafeedConfig("datafeed1","foo").build();
    givenLatestTimes(3_800_000L,3_600_000L);
    AtomicBoolean wasHandlerCalled=new AtomicBoolean(false);
    ActionListener<DatafeedJob> datafeedJobHandler=ActionListener.wrap(datafeedJob -> {
      assertThat(datafeedJob.isRunning(),is(true));
      assertThat(datafeedJob.isIsolated(),is(false));
      assertThat(datafeedJob.lastEndTimeMs(),equalTo(7_199_999L));
      wasHandlerCalled.compareAndSet(false,true);
    }
,e -> fail());
    datafeedJobBuilder.build(jobBuilder.build(new Date()),datafeed,datafeedJobHandler);
    assertBusy(() -> wasHandlerCalled.get());
  }
  public void testBuild_GivenBucketsRequestFails(){
    DataDescription.Builder dataDescription=new DataDescription.Builder();
    dataDescription.setTimeField("time");
    Job.Builder jobBuilder=DatafeedManagerTests.createDatafeedJob();
    jobBuilder.setDataDescription(dataDescription);
    DatafeedConfig datafeed=DatafeedManagerTests.createDatafeedConfig("datafeed1","foo").build();
    Exception error=new RuntimeException("error");
    doAnswer(invocationOnMock -> {
      @SuppressWarnings("rawtypes") Consumer consumer=(Consumer)invocationOnMock.getArguments()[3];
      consumer.accept(error);
      return null;
    }
).when(jobResultsProvider).bucketsViaInternalClient(any(),any(),any(),any());
    datafeedJobBuilder.build(jobBuilder.build(new Date()),datafeed,ActionListener.wrap(datafeedJob -> fail(),taskHandler));
    verify(taskHandler).accept(error);
  }
  private void givenLatestTimes(  long latestRecordTimestamp,  long latestBucketTimestamp){
    Mockito.doAnswer(invocationOnMock -> {
      String jobId=(String)invocationOnMock.getArguments()[0];
      @SuppressWarnings("unchecked") Consumer<DataCounts> handler=(Consumer<DataCounts>)invocationOnMock.getArguments()[1];
      DataCounts dataCounts=new DataCounts(jobId);
      dataCounts.setLatestRecordTimeStamp(new Date(latestRecordTimestamp));
      handler.accept(dataCounts);
      return null;
    }
).when(jobResultsProvider).dataCounts(any(),any(),any());
    doAnswer(invocationOnMock -> {
      @SuppressWarnings("rawtypes") Consumer consumer=(Consumer)invocationOnMock.getArguments()[2];
      Bucket bucket=mock(Bucket.class);
      when(bucket.getTimestamp()).thenReturn(new Date(latestBucketTimestamp));
      QueryPage<Bucket> bucketQueryPage=new QueryPage(Collections.singletonList(bucket),1,Bucket.RESULTS_FIELD);
      consumer.accept(bucketQueryPage);
      return null;
    }
).when(jobResultsProvider).bucketsViaInternalClient(any(),any(),any(),any());
  }
}
