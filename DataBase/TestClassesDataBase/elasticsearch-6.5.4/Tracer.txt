private static class Tracer extends MockTransportService.Tracer {
  private final Set<String> actions;
  public volatile boolean sawRequestSent;
  public volatile boolean sawRequestReceived;
  public volatile boolean sawResponseSent;
  public volatile boolean sawErrorSent;
  public volatile boolean sawResponseReceived;
  public AtomicReference<CountDownLatch> expectedEvents=new AtomicReference<>();
  Tracer(  Set<String> actions){
    this.actions=actions;
  }
  @Override public void receivedRequest(  long requestId,  String action){
    super.receivedRequest(requestId,action);
    if (actions.contains(action)) {
      sawRequestReceived=true;
      expectedEvents.get().countDown();
    }
  }
  @Override public void requestSent(  DiscoveryNode node,  long requestId,  String action,  TransportRequestOptions options){
    super.requestSent(node,requestId,action,options);
    if (actions.contains(action)) {
      sawRequestSent=true;
      expectedEvents.get().countDown();
    }
  }
  @Override public void responseSent(  long requestId,  String action){
    super.responseSent(requestId,action);
    if (actions.contains(action)) {
      sawResponseSent=true;
      expectedEvents.get().countDown();
    }
  }
  @Override public void responseSent(  long requestId,  String action,  Throwable t){
    super.responseSent(requestId,action,t);
    if (actions.contains(action)) {
      sawErrorSent=true;
      expectedEvents.get().countDown();
    }
  }
  @Override public void receivedResponse(  long requestId,  DiscoveryNode sourceNode,  String action){
    super.receivedResponse(requestId,sourceNode,action);
    if (actions.contains(action)) {
      sawResponseReceived=true;
      expectedEvents.get().countDown();
    }
  }
  public void reset(  int expectedCount){
    sawRequestSent=false;
    sawRequestReceived=false;
    sawResponseSent=false;
    sawErrorSent=false;
    sawResponseReceived=false;
    expectedEvents.set(new CountDownLatch(expectedCount));
  }
}
