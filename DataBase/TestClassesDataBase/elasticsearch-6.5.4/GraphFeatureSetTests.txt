public class GraphFeatureSetTests extends ESTestCase {
  private XPackLicenseState licenseState;
  @Before public void init() throws Exception {
    licenseState=mock(XPackLicenseState.class);
  }
  public void testAvailable() throws Exception {
    GraphFeatureSet featureSet=new GraphFeatureSet(Settings.EMPTY,licenseState);
    boolean available=randomBoolean();
    when(licenseState.isGraphAllowed()).thenReturn(available);
    assertThat(featureSet.available(),is(available));
    PlainActionFuture<XPackFeatureSet.Usage> future=new PlainActionFuture<>();
    featureSet.usage(future);
    XPackFeatureSet.Usage usage=future.get();
    assertThat(usage.available(),is(available));
    BytesStreamOutput out=new BytesStreamOutput();
    usage.writeTo(out);
    XPackFeatureSet.Usage serializedUsage=new GraphFeatureSetUsage(out.bytes().streamInput());
    assertThat(serializedUsage.available(),is(available));
  }
  public void testEnabled() throws Exception {
    boolean enabled=randomBoolean();
    Settings.Builder settings=Settings.builder();
    if (enabled) {
      if (randomBoolean()) {
        settings.put("xpack.graph.enabled",enabled);
      }
    }
 else {
      settings.put("xpack.graph.enabled",enabled);
    }
    GraphFeatureSet featureSet=new GraphFeatureSet(settings.build(),licenseState);
    assertThat(featureSet.enabled(),is(enabled));
    PlainActionFuture<XPackFeatureSet.Usage> future=new PlainActionFuture<>();
    featureSet.usage(future);
    XPackFeatureSet.Usage usage=future.get();
    assertThat(usage.enabled(),is(enabled));
    BytesStreamOutput out=new BytesStreamOutput();
    usage.writeTo(out);
    XPackFeatureSet.Usage serializedUsage=new GraphFeatureSetUsage(out.bytes().streamInput());
    assertThat(serializedUsage.enabled(),is(enabled));
  }
}
