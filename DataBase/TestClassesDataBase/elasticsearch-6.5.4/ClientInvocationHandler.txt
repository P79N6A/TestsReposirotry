private static class ClientInvocationHandler implements InvocationHandler {
  AbstractBuilderTestCase delegate;
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    if (method.equals(Client.class.getMethod("get",GetRequest.class,ActionListener.class))) {
      GetResponse getResponse=delegate.executeGet((GetRequest)args[0]);
      ActionListener<GetResponse> listener=(ActionListener<GetResponse>)args[1];
      if (randomBoolean()) {
        listener.onResponse(getResponse);
      }
 else {
        new Thread(() -> listener.onResponse(getResponse)).start();
      }
      return null;
    }
 else     if (method.equals(Client.class.getMethod("multiTermVectors",MultiTermVectorsRequest.class))) {
      return new PlainActionFuture<MultiTermVectorsResponse>(){
        @Override public MultiTermVectorsResponse get() throws InterruptedException, ExecutionException {
          return delegate.executeMultiTermVectors((MultiTermVectorsRequest)args[0]);
        }
      }
;
    }
 else     if (method.equals(Object.class.getMethod("toString"))) {
      return "MockClient";
    }
    throw new UnsupportedOperationException("this test can't handle calls to: " + method);
  }
}
