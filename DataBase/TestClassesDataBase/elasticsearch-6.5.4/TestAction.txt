private class TestAction extends TransportReplicationAction<Request,Request,TestResponse> {
  private final boolean withDocumentFailureOnPrimary;
  private final boolean withDocumentFailureOnReplica;
  TestAction(  Settings settings,  String actionName,  TransportService transportService,  ClusterService clusterService,  ShardStateAction shardStateAction,  ThreadPool threadPool){
    super(settings,actionName,transportService,clusterService,mockIndicesService(clusterService),threadPool,shardStateAction,new ActionFilters(new HashSet<>()),new IndexNameExpressionResolver(Settings.EMPTY),Request::new,Request::new,ThreadPool.Names.SAME);
    this.withDocumentFailureOnPrimary=false;
    this.withDocumentFailureOnReplica=false;
  }
  TestAction(  Settings settings,  String actionName,  TransportService transportService,  ClusterService clusterService,  ShardStateAction shardStateAction,  ThreadPool threadPool,  boolean withDocumentFailureOnPrimary,  boolean withDocumentFailureOnReplica){
    super(settings,actionName,transportService,clusterService,mockIndicesService(clusterService),threadPool,shardStateAction,new ActionFilters(new HashSet<>()),new IndexNameExpressionResolver(Settings.EMPTY),Request::new,Request::new,ThreadPool.Names.SAME);
    this.withDocumentFailureOnPrimary=withDocumentFailureOnPrimary;
    this.withDocumentFailureOnReplica=withDocumentFailureOnReplica;
  }
  @Override protected TestResponse newResponseInstance(){
    return new TestResponse();
  }
  @Override protected PrimaryResult shardOperationOnPrimary(  Request shardRequest,  IndexShard primary) throws Exception {
    boolean executedBefore=shardRequest.processedOnPrimary.getAndSet(true);
    assert executedBefore == false : "request has already been executed on the primary";
    return new PrimaryResult(shardRequest,new TestResponse());
  }
  @Override protected ReplicaResult shardOperationOnReplica(  Request request,  IndexShard replica){
    request.processedOnReplicas.incrementAndGet();
    return new ReplicaResult();
  }
  @Override protected boolean resolveIndex(){
    return false;
  }
}
