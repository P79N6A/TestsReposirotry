class TestTaskBatcher extends TaskBatcher {
  TestTaskBatcher(  Logger logger,  PrioritizedEsThreadPoolExecutor threadExecutor){
    super(logger,threadExecutor);
  }
  @Override protected void run(  Object batchingKey,  List<? extends BatchedTask> tasks,  String tasksSummary){
    List<UpdateTask> updateTasks=(List)tasks;
    ((TestExecutor)batchingKey).execute(updateTasks.stream().map(t -> t.task).collect(Collectors.toList()));
    updateTasks.forEach(updateTask -> updateTask.listener.processed(updateTask.source));
  }
  @Override protected void onTimeout(  List<? extends BatchedTask> tasks,  TimeValue timeout){
    threadPool.generic().execute(() -> tasks.forEach(task -> ((UpdateTask)task).listener.onFailure(task.source,new ProcessClusterEventTimeoutException(timeout,task.source))));
  }
class UpdateTask extends BatchedTask {
    final TestListener listener;
    UpdateTask(    Priority priority,    String source,    Object task,    TestListener listener,    TestExecutor<?> executor){
      super(priority,source,executor,task);
      this.listener=listener;
    }
    @Override public String describeTasks(    List<? extends BatchedTask> tasks){
      return ((TestExecutor<Object>)batchingKey).describeTasks(tasks.stream().map(BatchedTask::getTask).collect(Collectors.toList()));
    }
  }
}
