@TimeoutSuite(millis=5 * TimeUnits.MINUTE) public class UpgradeClusterClientYamlTestSuiteIT extends ESClientYamlSuiteTestCase {
  /** 
 * Waits for the Machine Learning templates to be created by  {@link org.elasticsearch.plugins.MetaDataUpgrader}
 */
  @Before public void waitForTemplates() throws Exception {
    XPackRestTestHelper.waitForMlTemplates(client());
  }
  @AfterClass public static void upgradeSecurityIfNecessary() throws Exception {
    if (System.getProperty("tests.rest.suite").equals("old_cluster")) {
      Response response=client().performRequest("GET","_nodes");
      ObjectPath objectPath=ObjectPath.createFromResponse(response);
      Map<String,Object> nodesAsMap=objectPath.evaluate("nodes");
      Version oldVersion=Version.fromString(objectPath.evaluate("nodes." + nodesAsMap.keySet().iterator().next() + ".version"));
      if (oldVersion.major < Version.CURRENT.major) {
        client().performRequest("POST","/_xpack/migration/upgrade/.security");
      }
    }
  }
  @Override protected boolean preserveIndicesUponCompletion(){
    return true;
  }
  @Override protected boolean preserveTemplatesUponCompletion(){
    return true;
  }
  @Override protected boolean preserveRollupJobsUponCompletion(){
    return true;
  }
  public UpgradeClusterClientYamlTestSuiteIT(  ClientYamlTestCandidate testCandidate){
    super(testCandidate);
  }
  @ParametersFactory public static Iterable<Object[]> parameters() throws Exception {
    return createParameters();
  }
  @Override protected Settings restClientSettings(){
    String token="Basic " + Base64.getEncoder().encodeToString(("test_user:x-pack-test-password").getBytes(StandardCharsets.UTF_8));
    return Settings.builder().put(ThreadContext.PREFIX + ".Authorization",token).put(ESRestTestCase.CLIENT_RETRY_TIMEOUT,"90s").put(ESRestTestCase.CLIENT_SOCKET_TIMEOUT,"90s").build();
  }
}
