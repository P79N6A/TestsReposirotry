public class LeafDocLookupTests extends ESTestCase {
  private ScriptDocValues<?> docValues;
  private LeafDocLookup docLookup;
  @Before public void setUp() throws Exception {
    super.setUp();
    MappedFieldType fieldType=mock(MappedFieldType.class);
    when(fieldType.name()).thenReturn("field");
    when(fieldType.valueForDisplay(anyObject())).then(returnsFirstArg());
    MapperService mapperService=mock(MapperService.class);
    when(mapperService.fullName("field")).thenReturn(fieldType);
    when(mapperService.fullName("alias")).thenReturn(fieldType);
    docValues=mock(ScriptDocValues.class);
    AtomicFieldData atomicFieldData=mock(AtomicFieldData.class);
    doReturn(docValues).when(atomicFieldData).getScriptValues();
    IndexFieldData<?> fieldData=mock(IndexFieldData.class);
    when(fieldData.getFieldName()).thenReturn("field");
    doReturn(atomicFieldData).when(fieldData).load(anyObject());
    docLookup=new LeafDocLookup(mapperService,ignored -> fieldData,new String[]{"type"},null);
  }
  public void testBasicLookup(){
    ScriptDocValues<?> fetchedDocValues=docLookup.get("field");
    assertEquals(docValues,fetchedDocValues);
  }
  public void testLookupWithFieldAlias(){
    ScriptDocValues<?> fetchedDocValues=docLookup.get("alias");
    assertEquals(docValues,fetchedDocValues);
  }
}
