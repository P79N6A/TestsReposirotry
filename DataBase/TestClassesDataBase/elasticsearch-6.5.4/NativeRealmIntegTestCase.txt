/** 
 * Test case with method to handle the starting and stopping the stores for native users and roles
 */
public abstract class NativeRealmIntegTestCase extends SecurityIntegTestCase {
  @Before public void ensureNativeStoresStarted() throws Exception {
    assertSecurityIndexActive();
    if (shouldSetReservedUserPasswords()) {
      setupReservedPasswords();
    }
  }
  @After public void stopESNativeStores() throws Exception {
    deleteSecurityIndex();
    if (getCurrentClusterScope() == Scope.SUITE) {
      SecurityClient client=securityClient(internalCluster().transportClient());
      client.prepareClearRealmCache().get();
    }
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.HTTP_ENABLED.getKey(),true).build();
  }
  @Override public Set<String> excludeTemplates(){
    Set<String> templates=Sets.newHashSet(super.excludeTemplates());
    templates.add(SecurityIndexManager.SECURITY_TEMPLATE_NAME);
    return templates;
  }
  private SecureString reservedPassword=SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING;
  protected SecureString getReservedPassword(){
    return reservedPassword;
  }
  protected boolean shouldSetReservedUserPasswords(){
    return true;
  }
  public void setupReservedPasswords() throws IOException {
    setupReservedPasswords(getRestClient());
  }
  public void setupReservedPasswords(  RestClient restClient) throws IOException {
    logger.info("setting up reserved passwords for test");
{
      Request request=new Request("PUT","/_xpack/security/user/elastic/_password");
      request.setJsonEntity("{\"password\": \"" + new String(reservedPassword.getChars()) + "\"}");
      RequestOptions.Builder options=request.getOptions().toBuilder();
      options.addHeader("Authorization",UsernamePasswordToken.basicAuthHeaderValue(ElasticUser.NAME,BOOTSTRAP_PASSWORD));
      request.setOptions(options);
      restClient.performRequest(request);
    }
    RequestOptions.Builder optionsBuilder=RequestOptions.DEFAULT.toBuilder();
    optionsBuilder.addHeader("Authorization",UsernamePasswordToken.basicAuthHeaderValue(ElasticUser.NAME,reservedPassword));
    RequestOptions options=optionsBuilder.build();
    final List<String> usernames=Arrays.asList(KibanaUser.NAME,LogstashSystemUser.NAME,BeatsSystemUser.NAME,APMSystemUser.NAME,RemoteMonitoringUser.NAME);
    for (    String username : usernames) {
      Request request=new Request("PUT","/_xpack/security/user/" + username + "/_password");
      request.setJsonEntity("{\"password\": \"" + new String(reservedPassword.getChars()) + "\"}");
      request.setOptions(options);
      restClient.performRequest(request);
    }
    logger.info("setting up reserved passwords finished");
  }
}
