public class GoogleCloudStorageBlobStoreRepositoryTests extends ESBlobStoreRepositoryIntegTestCase {
  private static final String BUCKET="gcs-repository-test";
  private static final ConcurrentMap<String,byte[]> blobs=new ConcurrentHashMap<>();
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Collections.singletonList(MockGoogleCloudStoragePlugin.class);
  }
  @Override protected void createTestRepository(  String name,  boolean verify){
    assertAcked(client().admin().cluster().preparePutRepository(name).setType(GoogleCloudStorageRepository.TYPE).setVerify(verify).setSettings(Settings.builder().put("bucket",BUCKET).put("base_path",GoogleCloudStorageBlobStoreRepositoryTests.class.getSimpleName()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  }
  @Override protected void afterCreationCheck(  Repository repository){
    assertThat(repository,instanceOf(GoogleCloudStorageRepository.class));
  }
  @AfterClass public static void wipeRepository(){
    blobs.clear();
  }
public static class MockGoogleCloudStoragePlugin extends GoogleCloudStoragePlugin {
    public MockGoogleCloudStoragePlugin(    final Settings settings){
      super(settings);
    }
    @Override protected GoogleCloudStorageService createStorageService(    Settings settings){
      return new MockGoogleCloudStorageService(settings);
    }
  }
public static class MockGoogleCloudStorageService extends GoogleCloudStorageService {
    MockGoogleCloudStorageService(    Settings settings){
      super(settings);
    }
    @Override public Storage client(    String clientName){
      return new MockStorage(BUCKET,blobs);
    }
  }
  public void testChunkSize(){
    RepositoryMetaData repositoryMetaData=new RepositoryMetaData("repo",GoogleCloudStorageRepository.TYPE,Settings.EMPTY);
    ByteSizeValue chunkSize=GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE,repositoryMetaData);
    assertEquals(GoogleCloudStorageRepository.MAX_CHUNK_SIZE,chunkSize);
    final int size=randomIntBetween(1,100);
    repositoryMetaData=new RepositoryMetaData("repo",GoogleCloudStorageRepository.TYPE,Settings.builder().put("chunk_size",size + "mb").build());
    chunkSize=GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE,repositoryMetaData);
    assertEquals(new ByteSizeValue(size,ByteSizeUnit.MB),chunkSize);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> {
      final RepositoryMetaData repoMetaData=new RepositoryMetaData("repo",GoogleCloudStorageRepository.TYPE,Settings.builder().put("chunk_size","0").build());
      GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE,repoMetaData);
    }
);
    assertEquals("failed to parse value [0] for setting [chunk_size], must be >= [1b]",e.getMessage());
    e=expectThrows(IllegalArgumentException.class,() -> {
      final RepositoryMetaData repoMetaData=new RepositoryMetaData("repo",GoogleCloudStorageRepository.TYPE,Settings.builder().put("chunk_size","-1").build());
      GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE,repoMetaData);
    }
);
    assertEquals("failed to parse value [-1] for setting [chunk_size], must be >= [1b]",e.getMessage());
    e=expectThrows(IllegalArgumentException.class,() -> {
      final RepositoryMetaData repoMetaData=new RepositoryMetaData("repo",GoogleCloudStorageRepository.TYPE,Settings.builder().put("chunk_size","101mb").build());
      GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE,repoMetaData);
    }
);
    assertEquals("failed to parse value [101mb] for setting [chunk_size], must be <= [100mb]",e.getMessage());
  }
}
