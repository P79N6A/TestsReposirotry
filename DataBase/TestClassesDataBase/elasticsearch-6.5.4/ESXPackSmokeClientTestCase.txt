/** 
 * An abstract base class to run integration tests against an Elasticsearch cluster running outside of the test process. <p> You can define a list of transport addresses from where you can reach your cluster by setting "tests.cluster" system property. It defaults to "localhost:9300". If you run this from `gradle integTest` then it will start the clsuter for you and set up the property. <p> If you want to debug this module from your IDE, then start an external cluster by yourself, maybe with `gradle run`, then run JUnit. If you changed the default port, set "-Dtests.cluster=localhost:PORT" when running your test.
 */
@LuceneTestCase.SuppressSysoutChecks(bugUrl="we log a lot on purpose") public abstract class ESXPackSmokeClientTestCase extends LuceneTestCase {
  /** 
 * Key used to eventually switch to using an external cluster and provide its transport addresses
 */
  public static final String TESTS_CLUSTER="tests.cluster";
  protected static final Logger logger=LogManager.getLogger(ESXPackSmokeClientTestCase.class);
  private static final AtomicInteger counter=new AtomicInteger();
  private static Client client;
  private static String clusterAddresses;
  protected String index;
  private static Client startClient(  Path tempDir,  TransportAddress... transportAddresses){
    Settings.Builder builder=Settings.builder().put("node.name","qa_xpack_smoke_client_" + counter.getAndIncrement()).put("client.transport.ignore_cluster_name",true).put("xpack.security.enabled",false).put(Environment.PATH_HOME_SETTING.getKey(),tempDir);
    TransportClient client=new PreBuiltXPackTransportClient(builder.build()).addTransportAddresses(transportAddresses);
    logger.info("--> Elasticsearch Java TransportClient started");
    Exception clientException=null;
    try {
      ClusterHealthResponse health=client.admin().cluster().prepareHealth().get();
      logger.info("--> connected to [{}] cluster which is running [{}] node(s).",health.getClusterName(),health.getNumberOfNodes());
    }
 catch (    Exception e) {
      logger.error("Error getting cluster health",e);
      clientException=e;
    }
    assumeNoException("Sounds like your cluster is not running at " + clusterAddresses,clientException);
    return client;
  }
  private static Client startClient() throws IOException {
    String[] stringAddresses=clusterAddresses.split(",");
    TransportAddress[] transportAddresses=new TransportAddress[stringAddresses.length];
    int i=0;
    for (    String stringAddress : stringAddresses) {
      URL url=new URL("http://" + stringAddress);
      InetAddress inetAddress=InetAddress.getByName(url.getHost());
      transportAddresses[i++]=new TransportAddress(new InetSocketAddress(inetAddress,url.getPort()));
    }
    return startClient(createTempDir(),transportAddresses);
  }
  public static Client getClient(){
    if (client == null) {
      try {
        client=startClient();
      }
 catch (      IOException e) {
        logger.error("can not start the client",e);
      }
      assertThat(client,notNullValue());
    }
    return client;
  }
  @BeforeClass public static void initializeSettings(){
    clusterAddresses=System.getProperty(TESTS_CLUSTER);
    if (clusterAddresses == null || clusterAddresses.isEmpty()) {
      fail("Must specify " + TESTS_CLUSTER + " for smoke client test");
    }
  }
  @AfterClass public static void stopTransportClient(){
    if (client != null) {
      client.close();
      client=null;
    }
  }
  @Before public void defineIndexName(){
    doClean();
    index="qa-xpack-smoke-test-client-" + randomAsciiOfLength(10).toLowerCase(Locale.getDefault());
  }
  @After public void cleanIndex(){
    doClean();
  }
  private void doClean(){
    if (client != null) {
      try {
        client.admin().indices().prepareDelete(index).get();
      }
 catch (      Exception e) {
      }
    }
  }
}
