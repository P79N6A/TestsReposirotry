private static class DatafeedBuilder {
  String datafeedId;
  String jobId;
  String index;
  String type;
  boolean source;
  String scriptedFields;
  String aggregations;
  String authHeader=BASIC_AUTH_VALUE_SUPER_USER;
  String chunkingTimespan;
  DatafeedBuilder(  String datafeedId,  String jobId,  String index,  String type){
    this.datafeedId=datafeedId;
    this.jobId=jobId;
    this.index=index;
    this.type=type;
  }
  DatafeedBuilder setSource(  boolean enableSource){
    this.source=enableSource;
    return this;
  }
  DatafeedBuilder setScriptedFields(  String scriptedFields){
    this.scriptedFields=scriptedFields;
    return this;
  }
  DatafeedBuilder setAggregations(  String aggregations){
    this.aggregations=aggregations;
    return this;
  }
  DatafeedBuilder setAuthHeader(  String authHeader){
    this.authHeader=authHeader;
    return this;
  }
  DatafeedBuilder setChunkingTimespan(  String timespan){
    chunkingTimespan=timespan;
    return this;
  }
  Response build() throws IOException {
    Request request=new Request("PUT",MachineLearning.BASE_PATH + "datafeeds/" + datafeedId);
    request.setJsonEntity("{" + "\"job_id\": \"" + jobId + "\",\"indexes\":[\""+ index+ "\"],\"types\":[\""+ type+ "\"]"+ (source ? ",\"_source\":true" : "")+ (scriptedFields == null ? "" : ",\"script_fields\":" + scriptedFields)+ (aggregations == null ? "" : ",\"aggs\":" + aggregations)+ (chunkingTimespan == null ? "" : ",\"chunking_config\":{\"mode\":\"MANUAL\",\"time_span\":\"" + chunkingTimespan + "\"}")+ "}");
    RequestOptions.Builder options=request.getOptions().toBuilder();
    options.addHeader("Authorization",authHeader);
    request.setOptions(options);
    return client().performRequest(request);
  }
}
