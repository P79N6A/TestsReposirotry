public class SqlTranslateRequestTests extends AbstractSerializingTestCase<SqlTranslateRequest> {
  public Mode testMode;
  @Before public void setup(){
    testMode=randomFrom(Mode.values());
  }
  @Override protected SqlTranslateRequest createTestInstance(){
    return new SqlTranslateRequest(testMode,randomAlphaOfLength(10),Collections.emptyList(),randomFilterOrNull(random()),randomTimeZone(),between(1,Integer.MAX_VALUE),randomTV(),randomTV());
  }
  @Override protected Writeable.Reader<SqlTranslateRequest> instanceReader(){
    return SqlTranslateRequest::new;
  }
  private TimeValue randomTV(){
    return TimeValue.parseTimeValue(randomTimeValue(),null,"test");
  }
  @Override protected NamedWriteableRegistry getNamedWriteableRegistry(){
    SearchModule searchModule=new SearchModule(Settings.EMPTY,false,Collections.emptyList());
    return new NamedWriteableRegistry(searchModule.getNamedWriteables());
  }
  @Override protected NamedXContentRegistry xContentRegistry(){
    SearchModule searchModule=new SearchModule(Settings.EMPTY,false,Collections.emptyList());
    return new NamedXContentRegistry(searchModule.getNamedXContents());
  }
  @Override protected SqlTranslateRequest doParseInstance(  XContentParser parser){
    return SqlTranslateRequest.fromXContent(parser,testMode);
  }
  @Override protected SqlTranslateRequest mutateInstance(  SqlTranslateRequest instance) throws IOException {
    @SuppressWarnings("unchecked") Consumer<SqlTranslateRequest> mutator=randomFrom(request -> request.query(randomValueOtherThan(request.query(),() -> randomAlphaOfLength(5))),request -> request.timeZone(randomValueOtherThan(request.timeZone(),ESTestCase::randomTimeZone)),request -> request.fetchSize(randomValueOtherThan(request.fetchSize(),() -> between(1,Integer.MAX_VALUE))),request -> request.requestTimeout(randomValueOtherThan(request.requestTimeout(),this::randomTV)),request -> request.filter(randomValueOtherThan(request.filter(),() -> request.filter() == null ? randomFilter(random()) : randomFilterOrNull(random()))));
    SqlTranslateRequest newRequest=new SqlTranslateRequest(instance.mode(),instance.query(),instance.params(),instance.filter(),instance.timeZone(),instance.fetchSize(),instance.requestTimeout(),instance.pageTimeout());
    mutator.accept(newRequest);
    return newRequest;
  }
}
