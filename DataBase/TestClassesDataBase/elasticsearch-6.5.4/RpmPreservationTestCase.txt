@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class) public abstract class RpmPreservationTestCase extends PackagingTestCase {
  private static Installation installation;
  protected abstract Distribution distribution();
  @BeforeClass public static void cleanup(){
    installation=null;
    cleanEverything();
  }
  @Before public void onlyCompatibleDistributions(){
    assumeTrue("only rpm platforms",isRPM());
    assumeTrue("only compatible distributions",distribution().packaging.compatible);
  }
  public void test10Install(){
    assertRemoved(distribution());
    installation=install(distribution());
    assertInstalled(distribution());
    verifyPackageInstallation(installation,distribution());
  }
  public void test20Remove(){
    assumeThat(installation,is(notNullValue()));
    remove(distribution());
    assertFalse(Files.exists(installation.config));
    assertFalse(Files.exists(SYSVINIT_SCRIPT));
    assertFalse(Files.exists(installation.envFile));
  }
  public void test30PreserveConfig(){
    final Shell sh=new Shell();
    installation=install(distribution());
    assertInstalled(distribution());
    verifyPackageInstallation(installation,distribution());
    sh.run("echo foobar | " + installation.executables().elasticsearchKeystore + " add --stdin foo.bar");
    Stream.of("elasticsearch.yml","jvm.options","log4j2.properties").map(each -> installation.config(each)).forEach(path -> append(path,"# foo"));
    if (distribution().isDefault()) {
      Stream.of("role_mapping.yml","roles.yml","users","users_roles").map(each -> installation.config(each)).forEach(path -> append(path,"# foo"));
    }
    remove(distribution());
    assertRemoved(distribution());
    if (isSystemd()) {
      assertThat(sh.runIgnoreExitCode("systemctl is-enabled elasticsearch.service").exitCode,is(1));
    }
    assertPathsDontExist(installation.bin,installation.lib,installation.modules,installation.plugins,installation.logs,installation.pidDir,installation.envFile,SYSVINIT_SCRIPT,SYSTEMD_SERVICE);
    assertTrue(Files.exists(installation.config));
    assertTrue(Files.exists(installation.config("elasticsearch.keystore")));
    Stream.of("elasticsearch.yml","jvm.options","log4j2.properties").forEach(this::assertConfFilePreserved);
    if (distribution().isDefault()) {
      Stream.of("role_mapping.yml","roles.yml","users","users_roles").forEach(this::assertConfFilePreserved);
    }
  }
  private void assertConfFilePreserved(  String configFile){
    final Path original=installation.config(configFile);
    final Path saved=installation.config(configFile + ".rpmsave");
    assertFalse(original + " should not exist",Files.exists(original));
    assertTrue(saved + " should exist",Files.exists(saved));
  }
}
