static class DummySubCommand extends Command {
  final boolean throwsExceptionOnClose;
  final AtomicBoolean closeCalled=new AtomicBoolean();
  DummySubCommand(){
    this(false);
  }
  DummySubCommand(  final boolean throwsExceptionOnClose){
    super("A dummy subcommand",() -> {
    }
);
    this.throwsExceptionOnClose=throwsExceptionOnClose;
  }
  @Override protected void execute(  Terminal terminal,  OptionSet options) throws Exception {
    terminal.println("Arguments: " + options.nonOptionArguments().toString());
  }
  @Override public void close() throws IOException {
    if (this.closeCalled.compareAndSet(false,true) == false) {
      throw new IllegalStateException("DummySubCommand already closed");
    }
    if (throwsExceptionOnClose) {
      throw new IOException("Error occurred while closing DummySubCommand");
    }
  }
}
