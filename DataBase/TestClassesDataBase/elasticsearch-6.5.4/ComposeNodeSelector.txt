/** 
 * Selector that composes two selectors, running the "right" most selector first and then running the "left" selector on the results of the "right" selector.
 */
private static class ComposeNodeSelector implements NodeSelector {
  private final NodeSelector lhs;
  private final NodeSelector rhs;
  private ComposeNodeSelector(  NodeSelector lhs,  NodeSelector rhs){
    this.lhs=Objects.requireNonNull(lhs,"lhs is required");
    this.rhs=Objects.requireNonNull(rhs,"rhs is required");
  }
  @Override public void select(  Iterable<Node> nodes){
    rhs.select(nodes);
    lhs.select(nodes);
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComposeNodeSelector that=(ComposeNodeSelector)o;
    return Objects.equals(lhs,that.lhs) && Objects.equals(rhs,that.rhs);
  }
  @Override public int hashCode(){
    return Objects.hash(lhs,rhs);
  }
  @Override public String toString(){
    return lhs + "." + rhs;
  }
}
