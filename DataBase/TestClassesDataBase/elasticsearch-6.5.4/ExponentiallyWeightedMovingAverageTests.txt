/** 
 * Implements exponentially weighted moving averages (commonly abbreviated EWMA) for a single value.
 */
public class ExponentiallyWeightedMovingAverageTests extends ESTestCase {
  public void testEWMA(){
    final ExponentiallyWeightedMovingAverage ewma=new ExponentiallyWeightedMovingAverage(0.5,10);
    ewma.addValue(12);
    assertThat(ewma.getAverage(),equalTo(11.0));
    ewma.addValue(10);
    ewma.addValue(15);
    ewma.addValue(13);
    assertThat(ewma.getAverage(),equalTo(12.875));
  }
  public void testInvalidAlpha(){
    try {
      ExponentiallyWeightedMovingAverage ewma=new ExponentiallyWeightedMovingAverage(-0.5,10);
      fail("should have failed to create EWMA");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),equalTo("alpha must be greater or equal to 0 and less than or equal to 1"));
    }
    try {
      ExponentiallyWeightedMovingAverage ewma=new ExponentiallyWeightedMovingAverage(1.5,10);
      fail("should have failed to create EWMA");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),equalTo("alpha must be greater or equal to 0 and less than or equal to 1"));
    }
  }
  public void testConvergingToValue(){
    final ExponentiallyWeightedMovingAverage ewma=new ExponentiallyWeightedMovingAverage(0.5,10000);
    for (int i=0; i < 100000; i++) {
      ewma.addValue(1);
    }
    assertThat(ewma.getAverage(),lessThan(2.0));
  }
}
