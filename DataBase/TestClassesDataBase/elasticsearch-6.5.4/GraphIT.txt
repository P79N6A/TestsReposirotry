public class GraphIT extends ESRestHighLevelClientTestCase {
  @Before public void indexDocuments() throws IOException {
    Request doc1=new Request(HttpPut.METHOD_NAME,"/index1/type/1");
    doc1.setJsonEntity("{ \"num\":[1], \"const\":\"start\"}");
    client().performRequest(doc1);
    Request doc2=new Request(HttpPut.METHOD_NAME,"/index2/type/1");
    doc2.setJsonEntity("{\"num\":[1,2], \"const\":\"foo\"}");
    client().performRequest(doc2);
    Request doc3=new Request(HttpPut.METHOD_NAME,"/index2/type/2");
    doc3.setJsonEntity("{\"num\":[2,3], \"const\":\"foo\"}");
    client().performRequest(doc3);
    Request doc4=new Request(HttpPut.METHOD_NAME,"/index_no_field_data/type/2");
    doc4.setJsonEntity("{\"num\":\"string\", \"const\":\"foo\"}");
    client().performRequest(doc4);
    Request doc5=new Request(HttpPut.METHOD_NAME,"/index_no_field_data/type/2");
    doc5.setJsonEntity("{\"num\":[2,4], \"const\":\"foo\"}");
    client().performRequest(doc5);
    client().performRequest(new Request(HttpPost.METHOD_NAME,"/_refresh"));
  }
  public void testCleanExplore() throws Exception {
    GraphExploreRequest graphExploreRequest=new GraphExploreRequest();
    graphExploreRequest.indices("index1","index2");
    graphExploreRequest.useSignificance(false);
    int numHops=3;
    for (int i=0; i < numHops; i++) {
      QueryBuilder guidingQuery=null;
      if (i == 0) {
        guidingQuery=new TermQueryBuilder("const.keyword","start");
      }
 else       if (randomBoolean()) {
        guidingQuery=new TermQueryBuilder("const.keyword","foo");
      }
      Hop hop=graphExploreRequest.createNextHop(guidingQuery);
      VertexRequest vr=hop.addVertexRequest("num");
      vr.minDocCount(1);
    }
    Map<String,Integer> expectedTermsAndDepths=new HashMap<>();
    expectedTermsAndDepths.put("1",0);
    expectedTermsAndDepths.put("2",1);
    expectedTermsAndDepths.put("3",2);
    GraphExploreResponse exploreResponse=highLevelClient().graph().explore(graphExploreRequest,RequestOptions.DEFAULT);
    Map<String,Integer> actualTermsAndDepths=new HashMap<>();
    Collection<Vertex> v=exploreResponse.getVertices();
    for (    Vertex vertex : v) {
      actualTermsAndDepths.put(vertex.getTerm(),vertex.getHopDepth());
    }
    assertEquals(expectedTermsAndDepths,actualTermsAndDepths);
    assertThat(exploreResponse.isTimedOut(),Matchers.is(false));
    ShardOperationFailedException[] failures=exploreResponse.getShardFailures();
    assertThat(failures.length,Matchers.equalTo(0));
  }
  public void testBadExplore() throws Exception {
    GraphExploreRequest graphExploreRequest=new GraphExploreRequest();
    graphExploreRequest.indices("index1","index2","index_no_field_data");
    graphExploreRequest.useSignificance(false);
    int numHops=3;
    for (int i=0; i < numHops; i++) {
      QueryBuilder guidingQuery=null;
      if (i == 0) {
        guidingQuery=new TermQueryBuilder("const.keyword","start");
      }
 else       if (randomBoolean()) {
        guidingQuery=new TermQueryBuilder("const.keyword","foo");
      }
      Hop hop=graphExploreRequest.createNextHop(guidingQuery);
      VertexRequest vr=hop.addVertexRequest("num");
      vr.minDocCount(1);
    }
    Map<String,Integer> expectedTermsAndDepths=new HashMap<>();
    expectedTermsAndDepths.put("1",0);
    expectedTermsAndDepths.put("2",1);
    expectedTermsAndDepths.put("3",2);
    GraphExploreResponse exploreResponse=highLevelClient().graph().explore(graphExploreRequest,RequestOptions.DEFAULT);
    Map<String,Integer> actualTermsAndDepths=new HashMap<>();
    Collection<Vertex> v=exploreResponse.getVertices();
    for (    Vertex vertex : v) {
      actualTermsAndDepths.put(vertex.getTerm(),vertex.getHopDepth());
    }
    assertEquals(expectedTermsAndDepths,actualTermsAndDepths);
    assertThat(exploreResponse.isTimedOut(),Matchers.is(false));
    ShardOperationFailedException[] failures=exploreResponse.getShardFailures();
    assertThat(failures.length,Matchers.equalTo(1));
    assertTrue(failures[0].reason().contains("Fielddata is disabled"));
  }
}
