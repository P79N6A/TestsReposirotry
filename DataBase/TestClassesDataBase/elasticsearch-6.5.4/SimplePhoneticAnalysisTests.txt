public class SimplePhoneticAnalysisTests extends ESTestCase {
  private TestAnalysis analysis;
  @Before public void setup() throws IOException {
    String yaml="/org/elasticsearch/index/analysis/phonetic-1.yml";
    Settings settings=Settings.builder().loadFromStream(yaml,getClass().getResourceAsStream(yaml),false).put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build();
    this.analysis=createTestAnalysis(new Index("test","_na_"),settings,new AnalysisPhoneticPlugin());
  }
  public void testPhoneticTokenFilterFactory() throws IOException {
    TokenFilterFactory filterFactory=analysis.tokenFilter.get("phonetic");
    MatcherAssert.assertThat(filterFactory,instanceOf(PhoneticTokenFilterFactory.class));
  }
  public void testPhoneticTokenFilterBeiderMorseNoLanguage() throws IOException {
    TokenFilterFactory filterFactory=analysis.tokenFilter.get("beidermorsefilter");
    Tokenizer tokenizer=new WhitespaceTokenizer();
    tokenizer.setReader(new StringReader("ABADIAS"));
    String[] expected=new String[]{"abYdias","abYdios","abadia","abadiaS","abadias","abadio","abadioS","abadios","abodia","abodiaS","abodias","abodio","abodioS","abodios","avadias","avadios","avodias","avodios","obadia","obadiaS","obadias","obadio","obadioS","obadios","obodia","obodiaS","obodias","obodioS"};
    BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer),expected);
  }
  public void testPhoneticTokenFilterBeiderMorseWithLanguage() throws IOException {
    TokenFilterFactory filterFactory=analysis.tokenFilter.get("beidermorsefilterfrench");
    Tokenizer tokenizer=new WhitespaceTokenizer();
    tokenizer.setReader(new StringReader("Rimbault"));
    String[] expected=new String[]{"rimbD","rimbDlt","rimba","rimbalt","rimbo","rimbolt","rimbu","rimbult","rmbD","rmbDlt","rmba","rmbalt","rmbo","rmbolt","rmbu","rmbult"};
    BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer),expected);
  }
  public void testPhoneticTokenFilterDaitchMotokoff() throws IOException {
    TokenFilterFactory filterFactory=analysis.tokenFilter.get("daitch_mokotoff");
    Tokenizer tokenizer=new WhitespaceTokenizer();
    tokenizer.setReader(new StringReader("chauptman"));
    String[] expected=new String[]{"473660","573660"};
    assertThat(filterFactory.create(tokenizer),instanceOf(DaitchMokotoffSoundexFilter.class));
    BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer),expected);
  }
}
