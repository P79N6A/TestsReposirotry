public class PutRoleMappingRequestTests extends ESTestCase {
  private PutRoleMappingRequestBuilder builder;
  @Before public void setupBuilder(){
    final ElasticsearchClient client=Mockito.mock(ElasticsearchClient.class);
    builder=new PutRoleMappingRequestBuilder(client,PutRoleMappingAction.INSTANCE);
  }
  public void testValidateMissingName() throws Exception {
    final PutRoleMappingRequest request=builder.roles("superuser").expression(Mockito.mock(RoleMapperExpression.class)).request();
    assertValidationFailure(request,"name");
  }
  public void testValidateMissingRoles() throws Exception {
    final PutRoleMappingRequest request=builder.name("test").expression(Mockito.mock(RoleMapperExpression.class)).request();
    assertValidationFailure(request,"roles");
  }
  public void testValidateMissingRules() throws Exception {
    final PutRoleMappingRequest request=builder.name("test").roles("superuser").request();
    assertValidationFailure(request,"rules");
  }
  public void testValidateMetadataKeys() throws Exception {
    final PutRoleMappingRequest request=builder.name("test").roles("superuser").expression(Mockito.mock(RoleMapperExpression.class)).metadata(Collections.singletonMap("_secret",false)).request();
    assertValidationFailure(request,"metadata key");
  }
  private void assertValidationFailure(  PutRoleMappingRequest request,  String expectedMessage){
    final ValidationException ve=request.validate();
    assertThat(ve,notNullValue());
    assertThat(ve.getMessage(),containsString(expectedMessage));
  }
}
