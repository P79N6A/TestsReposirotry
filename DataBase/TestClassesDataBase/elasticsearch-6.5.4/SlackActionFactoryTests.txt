public class SlackActionFactoryTests extends ESTestCase {
  private SlackActionFactory factory;
  private SlackService service;
  @Before public void init() throws Exception {
    service=mock(SlackService.class);
    factory=new SlackActionFactory(mock(TextTemplateEngine.class),service);
  }
  public void testParseAction() throws Exception {
    SlackAccount account=mock(SlackAccount.class);
    when(service.getAccount("_account1")).thenReturn(account);
    SlackAction action=slackAction("_account1",createRandomTemplate()).build();
    XContentBuilder jsonBuilder=jsonBuilder().value(action);
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    SlackAction parsedAction=SlackAction.parse("_w1","_a1",parser);
    assertThat(parsedAction,is(action));
  }
  public void testParseActionUnknownAccount() throws Exception {
    SlackService service=new SlackService(Settings.EMPTY,null,new ClusterSettings(Settings.EMPTY,new HashSet<>(SlackService.getSettings())));
    factory=new SlackActionFactory(mock(TextTemplateEngine.class),service);
    SlackAction action=slackAction("_unknown",createRandomTemplate()).build();
    XContentBuilder jsonBuilder=jsonBuilder().value(action);
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    expectThrows(IllegalArgumentException.class,() -> factory.parseExecutable("_w1","_a1",parser));
  }
}
