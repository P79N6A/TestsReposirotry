public static class InterceptingTransportService implements TransportInterceptor {
public static class TestPlugin extends Plugin implements NetworkPlugin {
    public final InterceptingTransportService instance=new InterceptingTransportService();
    @Override public List<TransportInterceptor> getTransportInterceptors(    NamedWriteableRegistry namedWriteableRegistry,    ThreadContext threadContext){
      return Collections.singletonList(instance);
    }
  }
  private final Set<String> actions=new HashSet<>();
  private final Map<String,List<TransportRequest>> requests=new HashMap<>();
  @Override public <T extends TransportRequest>TransportRequestHandler<T> interceptHandler(  String action,  String executor,  boolean forceExecution,  TransportRequestHandler<T> actualHandler){
    return new InterceptingRequestHandler<>(action,actualHandler);
  }
  synchronized List<TransportRequest> consumeRequests(  String action){
    return requests.remove(action);
  }
  synchronized void interceptTransportActions(  String... actions){
    Collections.addAll(this.actions,actions);
  }
  synchronized void clearInterceptedActions(){
    actions.clear();
  }
private class InterceptingRequestHandler<T extends TransportRequest> implements TransportRequestHandler<T> {
    private final TransportRequestHandler<T> requestHandler;
    private final String action;
    InterceptingRequestHandler(    String action,    TransportRequestHandler<T> requestHandler){
      this.requestHandler=requestHandler;
      this.action=action;
    }
    @Override public void messageReceived(    T request,    TransportChannel channel,    Task task) throws Exception {
synchronized (InterceptingTransportService.this) {
        if (actions.contains(action)) {
          List<TransportRequest> requestList=requests.get(action);
          if (requestList == null) {
            requestList=new ArrayList<>();
            requestList.add(request);
            requests.put(action,requestList);
          }
 else {
            requestList.add(request);
          }
        }
      }
      requestHandler.messageReceived(request,channel,task);
    }
    @Override public void messageReceived(    T request,    TransportChannel channel) throws Exception {
      messageReceived(request,channel,null);
    }
  }
}
