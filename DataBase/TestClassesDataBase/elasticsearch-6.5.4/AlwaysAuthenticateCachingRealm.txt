static class AlwaysAuthenticateCachingRealm extends CachingUsernamePasswordRealm {
  public final AtomicInteger authInvocationCounter=new AtomicInteger(0);
  public final AtomicInteger lookupInvocationCounter=new AtomicInteger(0);
  private boolean usersEnabled=true;
  AlwaysAuthenticateCachingRealm(  Settings globalSettings,  ThreadPool threadPool){
    this(new RealmConfig("always-test",Settings.EMPTY,globalSettings,TestEnvironment.newEnvironment(globalSettings),threadPool.getThreadContext()),threadPool);
  }
  AlwaysAuthenticateCachingRealm(  RealmConfig config,  ThreadPool threadPool){
    super("always",config,threadPool);
  }
  void setUsersEnabled(  boolean usersEnabled){
    this.usersEnabled=usersEnabled;
  }
  @Override protected void doAuthenticate(  UsernamePasswordToken token,  ActionListener<AuthenticationResult> listener){
    authInvocationCounter.incrementAndGet();
    final User user=new User(token.principal(),new String[]{"testRole1","testRole2"},null,null,emptyMap(),usersEnabled);
    listener.onResponse(AuthenticationResult.success(user));
  }
  @Override protected void doLookupUser(  String username,  ActionListener<User> listener){
    lookupInvocationCounter.incrementAndGet();
    listener.onResponse(new User(username,new String[]{"lookupRole1","lookupRole2"}));
  }
}
