public class TransformInputTests extends ESTestCase {
  private ScriptService scriptService;
  @Before public void setupScriptService(){
    scriptService=WatcherMockScriptPlugin.newMockScriptService(Collections.singletonMap("1",s -> "2"));
  }
  public void testExecute(){
    Script script=new Script(ScriptType.INLINE,MockScriptEngine.NAME,"1",Collections.emptyMap(),Collections.emptyMap());
    ScriptTransform scriptTransform=ScriptTransform.builder(script).build();
    TransformInput transformInput=new TransformInput(scriptTransform);
    ExecutableTransform executableTransform=new ExecutableScriptTransform(scriptTransform,logger,scriptService);
    ExecutableInput input=new ExecutableTransformInput(transformInput,executableTransform);
    WatchExecutionContext ctx=WatcherTestUtils.mockExecutionContext("_id",Payload.EMPTY);
    Input.Result result=input.execute(ctx,new Payload.Simple());
    assertThat(result.payload().data().size(),is(1));
    assertThat(result.payload().data(),hasEntry("_value","2"));
  }
  public void testParserValid() throws Exception {
    Map<String,TransformFactory> transformFactories=Collections.singletonMap("script",new ScriptTransformFactory(scriptService));
    TransformRegistry registry=new TransformRegistry(transformFactories);
    TransformInputFactory factory=new TransformInputFactory(registry);
    XContentBuilder builder=jsonBuilder().startObject().startObject("script").field("lang",MockScriptEngine.NAME).field("source","1").endObject().endObject();
    XContentParser parser=createParser(builder);
    parser.nextToken();
    ExecutableTransformInput executableTransformInput=factory.parseExecutable("_id",parser);
    WatchExecutionContext ctx=WatcherTestUtils.mockExecutionContext("_id",Payload.EMPTY);
    TransformInput.Result result=executableTransformInput.execute(ctx,Payload.EMPTY);
    assertThat(result.payload().data().size(),is(1));
    assertThat(result.payload().data(),hasEntry("_value","2"));
  }
  public void testParserInvalid() throws Exception {
    XContentBuilder jsonBuilder=jsonBuilder().value("just a string");
    Map<String,TransformFactory> transformFactories=Collections.singletonMap("script",new ScriptTransformFactory(scriptService));
    TransformRegistry registry=new TransformRegistry(transformFactories);
    TransformInputFactory factory=new TransformInputFactory(registry);
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    expectThrows(ParsingException.class,() -> factory.parseInput("_id",parser));
  }
  public void testTransformResultToXContent() throws Exception {
    Map<String,Object> data=Collections.singletonMap("foo","bar");
    TransformInput.Result result=new TransformInput.Result(new Payload.Simple(data));
    try (XContentBuilder builder=jsonBuilder()){
      result.toXContent(builder,ToXContent.EMPTY_PARAMS);
    }
   }
  public void testTransformInputToXContentIsSameAsParsing() throws Exception {
    Map<String,TransformFactory> transformFactories=Collections.singletonMap("script",new ScriptTransformFactory(scriptService));
    TransformRegistry registry=new TransformRegistry(transformFactories);
    TransformInputFactory factory=new TransformInputFactory(registry);
    XContentBuilder jsonBuilder=jsonBuilder().startObject().startObject("script").field("source","1").field("lang","mockscript").endObject().endObject();
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    TransformInput transformInput=factory.parseInput("whatever",parser);
    XContentBuilder output=jsonBuilder();
    transformInput.toXContent(output,ToXContent.EMPTY_PARAMS);
    assertThat(Strings.toString(jsonBuilder),is(Strings.toString(output)));
  }
}
