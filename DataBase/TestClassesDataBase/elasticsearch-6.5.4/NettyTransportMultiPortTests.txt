public class NettyTransportMultiPortTests extends ESTestCase {
  private String host;
  @Before public void setup(){
    if (NetworkUtils.SUPPORTS_V6 && randomBoolean()) {
      host="::1";
    }
 else {
      host="127.0.0.1";
    }
  }
  public void testThatNettyCanBindToMultiplePorts() throws Exception {
    Settings settings=Settings.builder().put("network.host",host).put(TcpTransport.PORT.getKey(),22).put("transport.profiles.default.port",0).put("transport.profiles.client1.port",0).build();
    ThreadPool threadPool=new TestThreadPool("tst");
    try (TcpTransport transport=startTransport(settings,threadPool)){
      assertEquals(1,transport.profileBoundAddresses().size());
      assertEquals(1,transport.boundAddress().boundAddresses().length);
    }
  finally {
      terminate(threadPool);
    }
  }
  public void testThatDefaultProfileInheritsFromStandardSettings() throws Exception {
    Settings settings=Settings.builder().put("network.host",host).put(TcpTransport.PORT.getKey(),0).put("transport.profiles.client1.port",0).build();
    ThreadPool threadPool=new TestThreadPool("tst");
    try (TcpTransport transport=startTransport(settings,threadPool)){
      assertEquals(1,transport.profileBoundAddresses().size());
      assertEquals(1,transport.boundAddress().boundAddresses().length);
    }
  finally {
      terminate(threadPool);
    }
  }
  public void testThatProfileWithoutPortSettingsFails() throws Exception {
    Settings settings=Settings.builder().put("network.host",host).put(TcpTransport.PORT.getKey(),0).put("transport.profiles.client1.whatever","foo").build();
    ThreadPool threadPool=new TestThreadPool("tst");
    try {
      IllegalStateException ex=expectThrows(IllegalStateException.class,() -> startTransport(settings,threadPool));
      assertEquals("profile [client1] has no port configured",ex.getMessage());
    }
  finally {
      terminate(threadPool);
    }
  }
  public void testThatDefaultProfilePortOverridesGeneralConfiguration() throws Exception {
    Settings settings=Settings.builder().put("network.host",host).put(TcpTransport.PORT.getKey(),22).put("transport.profiles.default.port",0).build();
    ThreadPool threadPool=new TestThreadPool("tst");
    try (TcpTransport transport=startTransport(settings,threadPool)){
      assertEquals(0,transport.profileBoundAddresses().size());
      assertEquals(1,transport.boundAddress().boundAddresses().length);
    }
  finally {
      terminate(threadPool);
    }
  }
  private TcpTransport startTransport(  Settings settings,  ThreadPool threadPool){
    BigArrays bigArrays=new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService());
    TcpTransport transport=new Netty4Transport(settings,threadPool,new NetworkService(Collections.emptyList()),bigArrays,new NamedWriteableRegistry(Collections.emptyList()),new NoneCircuitBreakerService());
    transport.start();
    assertThat(transport.lifecycleState(),is(Lifecycle.State.STARTED));
    return transport;
  }
}
