/** 
 * Tests  {@link TimeoutRequestConfigCallback}.
 */
public class TimeoutRequestConfigCallbackTests extends ESTestCase {
  private final TimeValue connectTimeout=mock(TimeValue.class);
  private final int connectTimeoutMillis=randomInt();
  private final TimeValue socketTimeout=mock(TimeValue.class);
  private final int socketTimeoutMillis=randomInt();
  private final RequestConfig.Builder builder=mock(RequestConfig.Builder.class);
  @Before public void configureTimeouts(){
    when(connectTimeout.millis()).thenReturn((long)connectTimeoutMillis);
    when(socketTimeout.millis()).thenReturn((long)socketTimeoutMillis);
  }
  public void testCustomizeRequestConfig(){
    final TimeoutRequestConfigCallback callback=new TimeoutRequestConfigCallback(connectTimeout,socketTimeout);
    assertSame(builder,callback.customizeRequestConfig(builder));
    verify(builder).setConnectTimeout(connectTimeoutMillis);
    verify(builder).setSocketTimeout(socketTimeoutMillis);
  }
  public void testCustomizeRequestConfigWithOptionalParameters(){
    final TimeValue optionalConnectTimeout=randomFrom(connectTimeout,null);
    final TimeValue optionalSocketTimeout=optionalConnectTimeout != null ? randomFrom(socketTimeout,null) : socketTimeout;
    final TimeoutRequestConfigCallback callback=new TimeoutRequestConfigCallback(optionalConnectTimeout,optionalSocketTimeout);
    assertSame(builder,callback.customizeRequestConfig(builder));
    assertSame(optionalConnectTimeout,callback.getConnectTimeout());
    assertSame(optionalSocketTimeout,callback.getSocketTimeout());
    if (optionalConnectTimeout != null) {
      verify(builder).setConnectTimeout(connectTimeoutMillis);
    }
 else {
      verify(builder,never()).setConnectTimeout(anyInt());
    }
    if (optionalSocketTimeout != null) {
      verify(builder).setSocketTimeout(socketTimeoutMillis);
    }
 else {
      verify(builder,never()).setSocketTimeout(anyInt());
    }
  }
}
