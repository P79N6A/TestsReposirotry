/** 
 * Base test case for manipulating the ES keystore.
 */
@LuceneTestCase.SuppressFileSystems("*") public abstract class KeyStoreCommandTestCase extends CommandTestCase {
  Environment env;
  List<FileSystem> fileSystems=new ArrayList<>();
  @After public void closeMockFileSystems() throws IOException {
    IOUtils.close(fileSystems);
  }
  @Before public void setupEnv() throws IOException {
    env=setupEnv(true,fileSystems);
  }
  public static Environment setupEnv(  boolean posix,  List<FileSystem> fileSystems) throws IOException {
    final Configuration configuration;
    if (posix) {
      configuration=Configuration.unix().toBuilder().setAttributeViews("basic","owner","posix","unix").build();
    }
 else {
      configuration=Configuration.unix();
    }
    FileSystem fs=Jimfs.newFileSystem(configuration);
    fileSystems.add(fs);
    PathUtilsForTesting.installMock(fs);
    Path home=fs.getPath("/","test-home");
    Files.createDirectories(home.resolve("config"));
    return TestEnvironment.newEnvironment(Settings.builder().put("path.home",home).build());
  }
  KeyStoreWrapper createKeystore(  String password,  String... settings) throws Exception {
    KeyStoreWrapper keystore=KeyStoreWrapper.create();
    assertEquals(0,settings.length % 2);
    for (int i=0; i < settings.length; i+=2) {
      keystore.setString(settings[i],settings[i + 1].toCharArray());
    }
    keystore.save(env.configFile(),password.toCharArray());
    return keystore;
  }
  KeyStoreWrapper loadKeystore(  String password) throws Exception {
    KeyStoreWrapper keystore=KeyStoreWrapper.load(env.configFile());
    keystore.decrypt(password.toCharArray());
    return keystore;
  }
  void assertSecureString(  String setting,  String value) throws Exception {
    assertSecureString(loadKeystore(""),setting,value);
  }
  void assertSecureString(  KeyStoreWrapper keystore,  String setting,  String value) throws Exception {
    assertEquals(value,keystore.getString(setting).toString());
  }
  void assertSecureFile(  String setting,  Path file) throws Exception {
    assertSecureFile(loadKeystore(""),setting,file);
  }
  void assertSecureFile(  KeyStoreWrapper keystore,  String setting,  Path file) throws Exception {
    byte[] expectedBytes=Files.readAllBytes(file);
    try (InputStream input=keystore.getFile(setting)){
      for (int i=0; i < expectedBytes.length; ++i) {
        int got=input.read();
        int expected=Byte.toUnsignedInt(expectedBytes[i]);
        if (got < 0) {
          fail("Got EOF from keystore stream at position " + i + " but expected 0x"+ Integer.toHexString(expected));
        }
        assertEquals("Byte " + i,expected,got);
      }
      int eof=input.read();
      if (eof != -1) {
        fail("Found extra bytes in file stream from keystore, expected " + expectedBytes.length + " bytes but found 0x"+ Integer.toHexString(eof));
      }
    }
   }
}
