private static class AssertingListener implements ActionListener<BulkResponse> {
  private final CountDownLatch latch;
  private final AtomicInteger countOnResponseCalled=new AtomicInteger();
  private volatile Throwable lastFailure;
  private volatile BulkResponse response;
  private AssertingListener(){
    latch=new CountDownLatch(1);
  }
  public void awaitCallbacksCalled() throws InterruptedException {
    latch.await();
  }
  @Override public void onResponse(  BulkResponse bulkItemResponses){
    this.response=bulkItemResponses;
    countOnResponseCalled.incrementAndGet();
    latch.countDown();
  }
  @Override public void onFailure(  Exception e){
    this.lastFailure=e;
    latch.countDown();
  }
  public void assertOnResponseCalled(){
    assertThat(countOnResponseCalled.get(),equalTo(1));
  }
  public void assertResponseWithNumberOfItems(  int numItems){
    assertThat(response.getItems().length,equalTo(numItems));
  }
  public void assertResponseWithoutFailures(){
    assertThat(response,notNullValue());
    assertFalse("Response should not have failures",response.hasFailures());
  }
  public void assertResponseWithFailures(){
    assertThat(response,notNullValue());
    assertTrue("Response should have failures",response.hasFailures());
  }
  public void assertOnFailureNeverCalled(){
    assertThat(lastFailure,nullValue());
  }
}
