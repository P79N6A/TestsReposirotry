/** 
 * Mock  {@link NodesSniffer} implementation used for testing, which most of the times return a fixed node.It rarely throws exception or return an empty list of nodes, to make sure that such situations are properly handled. It also asserts that it never gets called concurrently, based on the assumption that only one sniff run can be run at a given point in time.
 */
private static class CountingNodesSniffer implements NodesSniffer {
  private final AtomicInteger runs=new AtomicInteger(0);
  private final AtomicInteger failures=new AtomicInteger(0);
  private final AtomicInteger emptyList=new AtomicInteger(0);
  @Override public List<Node> sniff() throws IOException {
    int run=runs.incrementAndGet();
    if (rarely()) {
      failures.incrementAndGet();
      throw new IOException("communication breakdown");
    }
    if (rarely()) {
      emptyList.incrementAndGet();
      return Collections.emptyList();
    }
    return buildNodes(run);
  }
  private static List<Node> buildNodes(  int run){
    int size=run % 5 + 1;
    assert size > 0;
    List<Node> nodes=new ArrayList<>(size);
    for (int i=0; i < size; i++) {
      nodes.add(new Node(new HttpHost("sniffed-" + run,9200 + i)));
    }
    return nodes;
  }
}
