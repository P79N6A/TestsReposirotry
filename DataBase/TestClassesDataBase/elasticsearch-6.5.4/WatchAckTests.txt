@TestLogging("org.elasticsearch.xpack.watcher:DEBUG") public class WatchAckTests extends AbstractWatcherIntegrationTestCase {
  private String id=randomAlphaOfLength(10);
  @Before public void indexTestDocument(){
    IndexResponse eventIndexResponse=client().prepareIndex("events","event",id).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).setSource("level","error").get();
    assertEquals(DocWriteResponse.Result.CREATED,eventIndexResponse.getResult());
  }
  public void testAckSingleAction() throws Exception {
    PutWatchResponse putWatchResponse=watcherClient().preparePutWatch().setId("_id").setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? *"))).input(searchInput(templateRequest(searchSource(),"events"))).condition(new CompareCondition("ctx.payload.hits.total",CompareCondition.Op.GT,0L)).transform(searchTransform(templateRequest(searchSource(),"events"))).addAction("_a1",indexAction("actions1","doc")).addAction("_a2",indexAction("actions2","doc")).defaultThrottlePeriod(new TimeValue(0,TimeUnit.SECONDS))).get();
    assertThat(putWatchResponse.isCreated(),is(true));
    assertThat(watcherClient().prepareWatcherStats().get().getWatchesCount(),is(1L));
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    AckWatchResponse ackResponse=watcherClient().prepareAckWatch("_id").setActionIds("_a1").get();
    assertThat(ackResponse.getStatus().actionStatus("_a1").ackStatus().state(),is(ActionStatus.AckStatus.State.ACKED));
    assertThat(ackResponse.getStatus().actionStatus("_a2").ackStatus().state(),is(ActionStatus.AckStatus.State.ACKABLE));
    refresh();
    long a1CountAfterAck=docCount("actions1","doc",matchAllQuery());
    long a2CountAfterAck=docCount("actions2","doc",matchAllQuery());
    assertThat(a1CountAfterAck,greaterThan(0L));
    assertThat(a2CountAfterAck,greaterThan(0L));
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    flush();
    refresh();
    long a1CountAfterPostAckFires=docCount("actions1","doc",matchAllQuery());
    assertThat(a1CountAfterPostAckFires,equalTo(a1CountAfterAck));
    long a2CountAfterPostAckFires=docCount("actions2","doc",matchAllQuery());
    assertThat(a2CountAfterPostAckFires,greaterThan(a2CountAfterAck));
    DeleteResponse response=client().prepareDelete("events","event",id).get();
    assertEquals(DocWriteResponse.Result.DELETED,response.getResult());
    refresh();
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    GetWatchResponse getWatchResponse=watcherClient().prepareGetWatch("_id").get();
    assertThat(getWatchResponse.isFound(),is(true));
    Watch parsedWatch=watchParser().parse(getWatchResponse.getId(),true,getWatchResponse.getSource().getBytes(),XContentType.JSON);
    assertThat(parsedWatch.status().actionStatus("_a1").ackStatus().state(),is(ActionStatus.AckStatus.State.AWAITS_SUCCESSFUL_EXECUTION));
    assertThat(parsedWatch.status().actionStatus("_a2").ackStatus().state(),is(ActionStatus.AckStatus.State.AWAITS_SUCCESSFUL_EXECUTION));
    long throttledCount=docCount(HistoryStoreField.INDEX_PREFIX_WITH_TEMPLATE + "*",null,matchQuery(WatchRecord.STATE.getPreferredName(),ExecutionState.ACKNOWLEDGED.id()));
    assertThat(throttledCount,greaterThan(0L));
  }
  public void testAckAllActions() throws Exception {
    PutWatchResponse putWatchResponse=watcherClient().preparePutWatch().setId("_id").setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? *"))).input(searchInput(templateRequest(searchSource(),"events"))).condition(new CompareCondition("ctx.payload.hits.total",CompareCondition.Op.GT,0L)).transform(searchTransform(templateRequest(searchSource(),"events"))).addAction("_a1",indexAction("actions1","doc")).addAction("_a2",indexAction("actions2","doc")).defaultThrottlePeriod(new TimeValue(0,TimeUnit.SECONDS))).get();
    assertThat(putWatchResponse.isCreated(),is(true));
    assertThat(watcherClient().prepareWatcherStats().get().getWatchesCount(),is(1L));
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    AckWatchRequestBuilder ackWatchRequestBuilder=watcherClient().prepareAckWatch("_id");
    if (randomBoolean()) {
      ackWatchRequestBuilder.setActionIds("_all");
    }
 else     if (randomBoolean()) {
      ackWatchRequestBuilder.setActionIds("_all","a1");
    }
    AckWatchResponse ackResponse=ackWatchRequestBuilder.get();
    assertThat(ackResponse.getStatus().actionStatus("_a1").ackStatus().state(),is(ActionStatus.AckStatus.State.ACKED));
    assertThat(ackResponse.getStatus().actionStatus("_a2").ackStatus().state(),is(ActionStatus.AckStatus.State.ACKED));
    refresh();
    long a1CountAfterAck=docCount("actions1","doc",matchAllQuery());
    long a2CountAfterAck=docCount("actions2","doc",matchAllQuery());
    assertThat(a1CountAfterAck,greaterThanOrEqualTo((long)1));
    assertThat(a2CountAfterAck,greaterThanOrEqualTo((long)1));
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    flush();
    refresh();
    long a1CountAfterPostAckFires=docCount("actions1","doc",matchAllQuery());
    assertThat(a1CountAfterPostAckFires,equalTo(a1CountAfterAck));
    long a2CountAfterPostAckFires=docCount("actions2","doc",matchAllQuery());
    assertThat(a2CountAfterPostAckFires,equalTo(a2CountAfterAck));
    DeleteResponse response=client().prepareDelete("events","event",id).get();
    assertEquals(DocWriteResponse.Result.DELETED,response.getResult());
    refresh();
    timeWarp().trigger("_id",4,TimeValue.timeValueSeconds(5));
    GetWatchResponse getWatchResponse=watcherClient().prepareGetWatch("_id").get();
    assertThat(getWatchResponse.isFound(),is(true));
    Watch parsedWatch=watchParser().parse(getWatchResponse.getId(),true,getWatchResponse.getSource().getBytes(),XContentType.JSON);
    assertThat(parsedWatch.status().actionStatus("_a1").ackStatus().state(),is(ActionStatus.AckStatus.State.AWAITS_SUCCESSFUL_EXECUTION));
    assertThat(parsedWatch.status().actionStatus("_a2").ackStatus().state(),is(ActionStatus.AckStatus.State.AWAITS_SUCCESSFUL_EXECUTION));
    long throttledCount=docCount(HistoryStoreField.INDEX_PREFIX_WITH_TEMPLATE + "*",null,matchQuery(WatchRecord.STATE.getPreferredName(),ExecutionState.ACKNOWLEDGED.id()));
    assertThat(throttledCount,greaterThan(0L));
  }
  public void testAckWithRestart() throws Exception {
    PutWatchResponse putWatchResponse=watcherClient().preparePutWatch().setId("_name").setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? *"))).input(searchInput(templateRequest(searchSource(),"events"))).condition(new CompareCondition("ctx.payload.hits.total",CompareCondition.Op.GT,0L)).transform(searchTransform(templateRequest(searchSource(),"events"))).addAction("_id",indexAction("actions","action"))).get();
    assertThat(putWatchResponse.isCreated(),is(true));
    assertThat(watcherClient().prepareWatcherStats().get().getWatchesCount(),is(1L));
    timeWarp().trigger("_name",4,TimeValue.timeValueSeconds(5));
    restartWatcherRandomly();
    AckWatchResponse ackResponse=watcherClient().prepareAckWatch("_name").get();
    assertThat(ackResponse.getStatus().actionStatus("_id").ackStatus().state(),is(ActionStatus.AckStatus.State.ACKED));
    refresh("actions");
    long countAfterAck=client().prepareSearch("actions").setTypes("action").setQuery(matchAllQuery()).get().getHits().getTotalHits();
    assertThat(countAfterAck,greaterThanOrEqualTo(1L));
    restartWatcherRandomly();
    GetWatchResponse watchResponse=watcherClient().getWatch(new GetWatchRequest("_name")).actionGet();
    assertThat(watchResponse.getStatus().actionStatus("_id").ackStatus().state(),Matchers.equalTo(ActionStatus.AckStatus.State.ACKED));
    refresh();
    GetResponse getResponse=client().get(new GetRequest(Watch.INDEX,Watch.DOC_TYPE,"_name")).actionGet();
    Watch indexedWatch=watchParser().parse("_name",true,getResponse.getSourceAsBytesRef(),XContentType.JSON);
    assertThat(watchResponse.getStatus().actionStatus("_id").ackStatus().state(),equalTo(indexedWatch.status().actionStatus("_id").ackStatus().state()));
    timeWarp().trigger("_name",4,TimeValue.timeValueSeconds(5));
    refresh("actions");
    long countAfterPostAckFires=docCount("actions","action",matchAllQuery());
    assertThat(countAfterPostAckFires,equalTo(countAfterAck));
  }
  private void restartWatcherRandomly() throws Exception {
    if (randomBoolean()) {
      stopWatcher();
      startWatcher();
    }
  }
}
