public class CreateIndexRequestBuilderTests extends ESTestCase {
  private static final String KEY="my.settings.key";
  private static final String VALUE="my.settings.value";
  private NoOpClient testClient;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    this.testClient=new NoOpClient(getTestName());
  }
  @Override @After public void tearDown() throws Exception {
    this.testClient.close();
    super.tearDown();
  }
  /** 
 * test setting the source with available setters
 */
  public void testSetSource() throws IOException {
    CreateIndexRequestBuilder builder=new CreateIndexRequestBuilder(this.testClient,CreateIndexAction.INSTANCE);
    builder.setSource("{\"" + KEY + "\" : \""+ VALUE+ "\"}",XContentType.JSON);
    assertEquals(VALUE,builder.request().settings().get(KEY));
    XContentBuilder xContent=XContentFactory.jsonBuilder().startObject().field(KEY,VALUE).endObject();
    xContent.close();
    builder.setSource(xContent);
    assertEquals(VALUE,builder.request().settings().get(KEY));
    ByteArrayOutputStream docOut=new ByteArrayOutputStream();
    XContentBuilder doc=XContentFactory.jsonBuilder(docOut).startObject().field(KEY,VALUE).endObject();
    doc.close();
    builder.setSource(docOut.toByteArray(),XContentType.JSON);
    assertEquals(VALUE,builder.request().settings().get(KEY));
    Map<String,String> settingsMap=new HashMap<>();
    settingsMap.put(KEY,VALUE);
    builder.setSettings(settingsMap);
    assertEquals(VALUE,builder.request().settings().get(KEY));
  }
  /** 
 * test setting the settings with available setters
 */
  public void testSetSettings() throws IOException {
    CreateIndexRequestBuilder builder=new CreateIndexRequestBuilder(this.testClient,CreateIndexAction.INSTANCE);
    builder.setSettings(Settings.builder().put(KEY,VALUE));
    assertEquals(VALUE,builder.request().settings().get(KEY));
    builder.setSettings("{\"" + KEY + "\" : \""+ VALUE+ "\"}",XContentType.JSON);
    assertEquals(VALUE,builder.request().settings().get(KEY));
    builder.setSettings(Settings.builder().put(KEY,VALUE));
    assertEquals(VALUE,builder.request().settings().get(KEY));
    builder.setSettings(Settings.builder().put(KEY,VALUE).build());
    assertEquals(VALUE,builder.request().settings().get(KEY));
    Map<String,String> settingsMap=new HashMap<>();
    settingsMap.put(KEY,VALUE);
    builder.setSettings(settingsMap);
    assertEquals(VALUE,builder.request().settings().get(KEY));
    XContentBuilder xContent=XContentFactory.jsonBuilder().startObject().field(KEY,VALUE).endObject();
    xContent.close();
    builder.setSettings(xContent);
    assertEquals(VALUE,builder.request().settings().get(KEY));
  }
}
