public class FieldNamesFieldTypeTests extends FieldTypeTestCase {
  @Override protected MappedFieldType createDefaultFieldType(){
    return new FieldNamesFieldMapper.FieldNamesFieldType();
  }
  @Before public void setupProperties(){
    addModifier(new Modifier("enabled",true){
      @Override public void modify(      MappedFieldType ft){
        FieldNamesFieldMapper.FieldNamesFieldType fnft=(FieldNamesFieldMapper.FieldNamesFieldType)ft;
        fnft.setEnabled(!fnft.isEnabled());
      }
    }
);
  }
  public void testTermQuery(){
    FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType=new FieldNamesFieldMapper.FieldNamesFieldType();
    fieldNamesFieldType.setName(FieldNamesFieldMapper.CONTENT_TYPE);
    KeywordFieldMapper.KeywordFieldType fieldType=new KeywordFieldMapper.KeywordFieldType();
    fieldType.setName("field_name");
    Settings settings=settings(Version.CURRENT).build();
    IndexSettings indexSettings=new IndexSettings(new IndexMetaData.Builder("foo").settings(settings).numberOfShards(1).numberOfReplicas(0).build(),settings);
    MapperService mapperService=mock(MapperService.class);
    when(mapperService.fullName("_field_names")).thenReturn(fieldNamesFieldType);
    when(mapperService.fullName("field_name")).thenReturn(fieldType);
    when(mapperService.simpleMatchToFullName("field_name")).thenReturn(Collections.singletonList("field_name"));
    QueryShardContext queryShardContext=new QueryShardContext(0,indexSettings,null,null,mapperService,null,null,null,null,null,null,() -> 0L,null);
    fieldNamesFieldType.setEnabled(true);
    Query termQuery=fieldNamesFieldType.termQuery("field_name",queryShardContext);
    assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.CONTENT_TYPE,"field_name")),termQuery);
    assertWarnings("terms query on the _field_names field is deprecated and will be removed, use exists query instead");
    fieldNamesFieldType.setEnabled(false);
    IllegalStateException e=expectThrows(IllegalStateException.class,() -> fieldNamesFieldType.termQuery("field_name",null));
    assertEquals("Cannot run [exists] queries if the [_field_names] field is disabled",e.getMessage());
  }
}
