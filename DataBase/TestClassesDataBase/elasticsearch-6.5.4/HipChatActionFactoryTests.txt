public class HipChatActionFactoryTests extends ESTestCase {
  private HipChatActionFactory factory;
  private HipChatService hipchatService;
  @Before public void init() throws Exception {
    hipchatService=mock(HipChatService.class);
    factory=new HipChatActionFactory(mock(TextTemplateEngine.class),hipchatService);
  }
  public void testParseAction() throws Exception {
    HipChatAccount account=mock(HipChatAccount.class);
    when(hipchatService.getAccount("_account1")).thenReturn(account);
    HipChatAction action=hipchatAction("_account1","_body").build();
    XContentBuilder jsonBuilder=jsonBuilder().value(action);
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    ExecutableHipChatAction parsedAction=factory.parseExecutable("_w1","_a1",parser);
    assertThat(parsedAction.action(),is(action));
    verify(account,times(1)).validateParsedTemplate("_w1","_a1",action.message);
  }
  public void testParseActionUnknownAccount() throws Exception {
    hipchatService=new HipChatService(Settings.EMPTY,null,new ClusterSettings(Settings.EMPTY,new HashSet<>(HipChatService.getSettings())));
    factory=new HipChatActionFactory(mock(TextTemplateEngine.class),hipchatService);
    HipChatAction action=hipchatAction("_unknown","_body").build();
    XContentBuilder jsonBuilder=jsonBuilder().value(action);
    XContentParser parser=createParser(jsonBuilder);
    parser.nextToken();
    expectThrows(IllegalArgumentException.class,() -> factory.parseExecutable("_w1","_a1",parser));
  }
}
