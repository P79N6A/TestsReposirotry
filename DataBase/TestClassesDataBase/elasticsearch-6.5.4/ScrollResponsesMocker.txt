private class ScrollResponsesMocker {
  private List<String[]> batches=new ArrayList<>();
  private long totalHits=0;
  private List<SearchResponse> responses=new ArrayList<>();
  ScrollResponsesMocker addBatch(  String... hits){
    totalHits+=hits.length;
    batches.add(hits);
    return this;
  }
  @SuppressWarnings("unchecked") void finishMock(){
    if (batches.isEmpty()) {
      givenInitialResponse();
      return;
    }
    givenInitialResponse(batches.get(0));
    for (int i=1; i < batches.size(); ++i) {
      givenNextResponse(batches.get(i));
    }
    if (responses.size() > 0) {
      ActionFuture<SearchResponse> first=wrapResponse(responses.get(0));
      if (responses.size() > 1) {
        List<ActionFuture> rest=new ArrayList<>();
        for (int i=1; i < responses.size(); ++i) {
          rest.add(wrapResponse(responses.get(i)));
        }
        when(client.searchScroll(searchScrollRequestCaptor.capture())).thenReturn(first,rest.toArray(new ActionFuture[rest.size() - 1]));
      }
 else {
        when(client.searchScroll(searchScrollRequestCaptor.capture())).thenReturn(first);
      }
    }
  }
  private void givenInitialResponse(  String... hits){
    SearchResponse searchResponse=createSearchResponseWithHits(hits);
    ActionFuture<SearchResponse> future=wrapResponse(searchResponse);
    when(future.actionGet()).thenReturn(searchResponse);
    when(client.search(searchRequestCaptor.capture())).thenReturn(future);
  }
  @SuppressWarnings("unchecked") private ActionFuture<SearchResponse> wrapResponse(  SearchResponse searchResponse){
    ActionFuture<SearchResponse> future=mock(ActionFuture.class);
    when(future.actionGet()).thenReturn(searchResponse);
    return future;
  }
  private void givenNextResponse(  String... hits){
    responses.add(createSearchResponseWithHits(hits));
  }
  private SearchResponse createSearchResponseWithHits(  String... hits){
    SearchHits searchHits=createHits(hits);
    SearchResponse searchResponse=mock(SearchResponse.class);
    when(searchResponse.getScrollId()).thenReturn(SCROLL_ID);
    when(searchResponse.getHits()).thenReturn(searchHits);
    return searchResponse;
  }
  private SearchHits createHits(  String... values){
    List<SearchHit> hits=new ArrayList<>();
    for (    String value : values) {
      hits.add(new SearchHitBuilder(randomInt()).setSource(value).build());
    }
    return new SearchHits(hits.toArray(new SearchHit[hits.size()]),totalHits,1.0f);
  }
}
