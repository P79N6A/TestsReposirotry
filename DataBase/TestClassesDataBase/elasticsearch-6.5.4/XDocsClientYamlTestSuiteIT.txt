public class XDocsClientYamlTestSuiteIT extends XPackRestIT {
  private static final String USER_TOKEN=basicAuthHeaderValue("test_admin",new SecureString("x-pack-test-password".toCharArray()));
  public XDocsClientYamlTestSuiteIT(  @Name("yaml") ClientYamlTestCandidate testCandidate){
    super(testCandidate);
  }
  @Override protected void afterIfFailed(  List<Throwable> errors){
    super.afterIfFailed(errors);
    String name=getTestName().split("=")[1];
    name=name.substring(0,name.length() - 1);
    name=name.replaceAll("/([^/]+)$",".asciidoc:$1");
    logger.error("This failing test was generated by documentation starting at {}. It may include many snippets. " + "See Elasticsearch's docs/README.asciidoc for an explanation of test generation.",name);
  }
  @Override protected boolean preserveTemplatesUponCompletion(){
    return true;
  }
  @Override protected ClientYamlTestClient initClientYamlTestClient(  final ClientYamlSuiteRestSpec restSpec,  final RestClient restClient,  final List<HttpHost> hosts,  final Version esVersion){
    return new ClientYamlDocsTestClient(restSpec,restClient,hosts,esVersion,this::getClientBuilderWithSniffedHosts);
  }
  /** 
 * All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.
 */
  @Override protected Settings restClientSettings(){
    return Settings.builder().put(ThreadContext.PREFIX + ".Authorization",USER_TOKEN).build();
  }
  /** 
 * Re-enables watcher after every test just in case any test disables it. One does.
 */
  @After public void reenableWatcher() throws Exception {
    if (isWatcherTest()) {
      assertBusy(() -> {
        ClientYamlTestResponse response=getAdminExecutionContext().callApi("xpack.watcher.stats",emptyMap(),emptyList(),emptyMap());
        String state=(String)response.evaluate("stats.0.watcher_state");
switch (state) {
case "stopped":
          ClientYamlTestResponse startResponse=getAdminExecutionContext().callApi("xpack.watcher.start",emptyMap(),emptyList(),emptyMap());
        boolean isAcknowledged=(boolean)startResponse.evaluate("acknowledged");
      assertThat(isAcknowledged,is(true));
    throw new AssertionError("waiting until stopped state reached started state");
case "stopping":
  throw new AssertionError("waiting until stopping state reached stopped state to start again");
case "starting":
throw new AssertionError("waiting until starting state reached started state");
case "started":
break;
default :
throw new AssertionError("unknown state[" + state + "]");
}
}
);
}
}
@Override protected boolean isWatcherTest(){
String testName=getTestName();
return testName != null && (testName.contains("watcher/") || testName.contains("watcher\\"));
}
@Override protected boolean isMonitoringTest(){
return false;
}
@Override protected boolean isMachineLearningTest(){
String testName=getTestName();
return testName != null && (testName.contains("ml/") || testName.contains("ml\\"));
}
/** 
 * Deletes users after every test just in case any test adds any.
 */
@After public void deleteUsers() throws Exception {
ClientYamlTestResponse response=getAdminExecutionContext().callApi("xpack.security.get_user",emptyMap(),emptyList(),emptyMap());
@SuppressWarnings("unchecked") Map<String,Object> users=(Map<String,Object>)response.getBody();
for (String user : users.keySet()) {
Map<?,?> metaDataMap=(Map<?,?>)((Map<?,?>)users.get(user)).get("metadata");
Boolean reserved=metaDataMap == null ? null : (Boolean)metaDataMap.get("_reserved");
if (reserved == null || reserved == false) {
logger.warn("Deleting leftover user {}",user);
getAdminExecutionContext().callApi("xpack.security.delete_user",singletonMap("username",user),emptyList(),emptyMap());
}
}
}
@Override protected boolean randomizeContentType(){
return false;
}
}
