/** 
 * Wraps an HAServiceTarget, keeping track of any HAServiceProtocol proxies it generates in order to close them at the end of the test lifecycle.
 */
private static class CloseableHAServiceTarget extends HAServiceTarget {
  private final HAServiceTarget delegate;
  private final List<HAServiceProtocol> protocolsToClose=new ArrayList<>();
  CloseableHAServiceTarget(  HAServiceTarget delegate){
    this.delegate=delegate;
  }
  @Override public InetSocketAddress getAddress(){
    return delegate.getAddress();
  }
  @Override public InetSocketAddress getHealthMonitorAddress(){
    return delegate.getHealthMonitorAddress();
  }
  @Override public InetSocketAddress getZKFCAddress(){
    return delegate.getZKFCAddress();
  }
  @Override public NodeFencer getFencer(){
    return delegate.getFencer();
  }
  @Override public void checkFencingConfigured() throws BadFencingConfigurationException {
    delegate.checkFencingConfigured();
  }
  @Override public HAServiceProtocol getProxy(  Configuration conf,  int timeoutMs) throws IOException {
    HAServiceProtocol proxy=delegate.getProxy(conf,timeoutMs);
    protocolsToClose.add(proxy);
    return proxy;
  }
  @Override public HAServiceProtocol getHealthMonitorProxy(  Configuration conf,  int timeoutMs) throws IOException {
    return delegate.getHealthMonitorProxy(conf,timeoutMs);
  }
  @Override public ZKFCProtocol getZKFCProxy(  Configuration conf,  int timeoutMs) throws IOException {
    return delegate.getZKFCProxy(conf,timeoutMs);
  }
  @Override public boolean isAutoFailoverEnabled(){
    return delegate.isAutoFailoverEnabled();
  }
  private void close(){
    for (    HAServiceProtocol protocol : protocolsToClose) {
      if (protocol instanceof HAServiceProtocolClientSideTranslatorPB) {
        ((HAServiceProtocolClientSideTranslatorPB)protocol).close();
      }
    }
  }
}
