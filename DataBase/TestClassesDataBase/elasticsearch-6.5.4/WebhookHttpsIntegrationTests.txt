public class WebhookHttpsIntegrationTests extends AbstractWatcherIntegrationTestCase {
  private MockWebServer webServer;
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    Path keyPath=getDataPath("/org/elasticsearch/xpack/security/keystore/testnode.pem");
    Path certPath=getDataPath("/org/elasticsearch/xpack/security/keystore/testnode.crt");
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("xpack.http.ssl.key",keyPath).put("xpack.http.ssl.certificate",certPath).put("xpack.http.ssl.keystore.password","testnode").build();
  }
  @Before public void startWebservice() throws Exception {
    Settings settings=getInstanceFromMaster(Settings.class);
    TestsSSLService sslService=new TestsSSLService(settings,getInstanceFromMaster(Environment.class));
    webServer=new MockWebServer(sslService.sslContext("xpack.http.ssl"),false);
    webServer.start();
  }
  @After public void stopWebservice() throws Exception {
    webServer.close();
  }
  public void testHttps() throws Exception {
    webServer.enqueue(new MockResponse().setResponseCode(200).setBody("body"));
    HttpRequestTemplate.Builder builder=HttpRequestTemplate.builder("localhost",webServer.getPort()).scheme(Scheme.HTTPS).path(new TextTemplate("/test/_id")).body(new TextTemplate("{key=value}")).method(HttpMethod.POST);
    watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput("key","value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_id",ActionBuilders.webhookAction(builder))).get();
    timeWarp().trigger("_id");
    refresh();
    assertWatchWithMinimumPerformedActionsCount("_id",1,false);
    assertThat(webServer.requests(),hasSize(1));
    assertThat(webServer.requests().get(0).getUri().getPath(),equalTo("/test/_id"));
    assertThat(webServer.requests().get(0).getBody(),equalTo("{key=value}"));
    SearchResponse response=searchWatchRecords(b -> b.setQuery(QueryBuilders.termQuery(WatchRecord.STATE.getPreferredName(),"executed")));
    assertNoFailures(response);
    XContentSource source=xContentSource(response.getHits().getAt(0).getSourceRef());
    String body=source.getValue("result.actions.0.webhook.response.body");
    assertThat(body,notNullValue());
    assertThat(body,is("body"));
    Number status=source.getValue("result.actions.0.webhook.response.status");
    assertThat(status,notNullValue());
    assertThat(status.intValue(),is(200));
  }
  public void testHttpsAndBasicAuth() throws Exception {
    webServer.enqueue(new MockResponse().setResponseCode(200).setBody("body"));
    HttpRequestTemplate.Builder builder=HttpRequestTemplate.builder("localhost",webServer.getPort()).scheme(Scheme.HTTPS).auth(new BasicAuth("_username","_password".toCharArray())).path(new TextTemplate("/test/_id")).body(new TextTemplate("{key=value}")).method(HttpMethod.POST);
    watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput("key","value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_id",ActionBuilders.webhookAction(builder))).get();
    timeWarp().trigger("_id");
    refresh();
    assertWatchWithMinimumPerformedActionsCount("_id",1,false);
    assertThat(webServer.requests(),hasSize(1));
    assertThat(webServer.requests().get(0).getUri().getPath(),equalTo("/test/_id"));
    assertThat(webServer.requests().get(0).getBody(),equalTo("{key=value}"));
    assertThat(webServer.requests().get(0).getHeader("Authorization"),equalTo("Basic X3VzZXJuYW1lOl9wYXNzd29yZA=="));
  }
}
