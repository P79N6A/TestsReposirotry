/** 
 * Stub for IndexNumericFieldData needed by some score functions. Returns 1 as value always.
 */
private static class IndexNumericFieldDataStub implements IndexNumericFieldData {
  @Override public NumericType getNumericType(){
    throw new UnsupportedOperationException(UNSUPPORTED);
  }
  @Override public String getFieldName(){
    return "test";
  }
  @Override public AtomicNumericFieldData load(  LeafReaderContext context){
    return new AtomicNumericFieldData(){
      @Override public SortedNumericDocValues getLongValues(){
        throw new UnsupportedOperationException(UNSUPPORTED);
      }
      @Override public SortedNumericDoubleValues getDoubleValues(){
        return new SortedNumericDoubleValues(){
          @Override public boolean advanceExact(          int docId){
            return true;
          }
          @Override public int docValueCount(){
            return 1;
          }
          @Override public double nextValue(){
            return 1d;
          }
        }
;
      }
      @Override public ScriptDocValues getScriptValues(){
        throw new UnsupportedOperationException(UNSUPPORTED);
      }
      @Override public SortedBinaryDocValues getBytesValues(){
        throw new UnsupportedOperationException(UNSUPPORTED);
      }
      @Override public long ramBytesUsed(){
        throw new UnsupportedOperationException(UNSUPPORTED);
      }
      @Override public Collection<Accountable> getChildResources(){
        throw new UnsupportedOperationException(UNSUPPORTED);
      }
      @Override public void close(){
      }
    }
;
  }
  @Override public AtomicNumericFieldData loadDirect(  LeafReaderContext context) throws Exception {
    throw new UnsupportedOperationException(UNSUPPORTED);
  }
  @Override public SortField sortField(  @Nullable Object missingValue,  MultiValueMode sortMode,  XFieldComparatorSource.Nested nested,  boolean reverse){
    throw new UnsupportedOperationException(UNSUPPORTED);
  }
  @Override public void clear(){
    throw new UnsupportedOperationException(UNSUPPORTED);
  }
  @Override public Index index(){
    throw new UnsupportedOperationException(UNSUPPORTED);
  }
}
