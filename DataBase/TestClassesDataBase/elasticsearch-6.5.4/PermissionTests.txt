public class PermissionTests extends ESTestCase {
  private Role permission;
  @Before public void init(){
    Role.Builder builder=Role.builder("test");
    builder.add(MONITOR,"test_*","/foo.*/");
    builder.add(READ,"baz_*foo","/fool.*bar/");
    builder.add(MONITOR,"/bar.*/");
    permission=builder.build();
  }
  public void testAllowedIndicesMatcherAction() throws Exception {
    testAllowedIndicesMatcher(permission.indices().allowedIndicesMatcher(GetAction.NAME));
  }
  public void testAllowedIndicesMatcherActionCaching() throws Exception {
    Predicate<String> matcher1=permission.indices().allowedIndicesMatcher(GetAction.NAME);
    Predicate<String> matcher2=permission.indices().allowedIndicesMatcher(GetAction.NAME);
    assertThat(matcher1,is(matcher2));
  }
  public void testBuildEmptyRole(){
    Role.Builder permission=Role.builder(new String[]{"some_role"});
    Role role=permission.build();
    assertThat(role,notNullValue());
    assertThat(role.cluster(),notNullValue());
    assertThat(role.indices(),notNullValue());
    assertThat(role.runAs(),notNullValue());
  }
  public void testRunAs(){
    Role permission=Role.builder("some_role").runAs(new Privilege("name","user1","run*")).build();
    assertThat(permission.runAs().check("user1"),is(true));
    assertThat(permission.runAs().check("user"),is(false));
    assertThat(permission.runAs().check("run" + randomAlphaOfLengthBetween(1,10)),is(true));
  }
  private void testAllowedIndicesMatcher(  Predicate<String> indicesMatcher){
    assertThat(indicesMatcher.test("foobar"),is(false));
    assertThat(indicesMatcher.test("fool"),is(false));
    assertThat(indicesMatcher.test("fool2bar"),is(true));
    assertThat(indicesMatcher.test("baz_foo"),is(true));
    assertThat(indicesMatcher.test("barbapapa"),is(false));
  }
}
