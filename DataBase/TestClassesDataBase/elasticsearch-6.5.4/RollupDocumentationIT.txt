public class RollupDocumentationIT extends ESRestHighLevelClientTestCase {
  @Before public void setUpDocs() throws IOException {
    final BulkRequest bulkRequest=new BulkRequest();
    bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
    for (int i=0; i < 50; i++) {
      final IndexRequest indexRequest=new IndexRequest("docs","doc");
      indexRequest.source(jsonBuilder().startObject().field("timestamp",String.format(Locale.ROOT,"2018-01-01T00:%02d:00Z",i)).field("hostname",0).field("datacenter",0).field("temperature",0).field("voltage",0).field("load",0).field("net_in",0).field("net_out",0).endObject());
      bulkRequest.add(indexRequest);
    }
    BulkResponse bulkResponse=highLevelClient().bulk(bulkRequest,RequestOptions.DEFAULT);
    assertEquals(RestStatus.OK,bulkResponse.status());
    assertFalse(bulkResponse.hasFailures());
    RefreshResponse refreshResponse=highLevelClient().indices().refresh(new RefreshRequest("docs"),RequestOptions.DEFAULT);
    assertEquals(0,refreshResponse.getFailedShards());
  }
  public void testCreateRollupJob() throws Exception {
    RestHighLevelClient client=highLevelClient();
    final String indexPattern="docs";
    final String rollupIndex="rollup";
    final String cron="*/1 * * * * ?";
    final int pageSize=100;
    final TimeValue timeout=null;
    DateHistogramGroupConfig dateHistogram=new DateHistogramGroupConfig("timestamp",DateHistogramInterval.HOUR,new DateHistogramInterval("7d"),"UTC");
    TermsGroupConfig terms=new TermsGroupConfig("hostname","datacenter");
    HistogramGroupConfig histogram=new HistogramGroupConfig(5L,"load","net_in","net_out");
    GroupConfig groups=new GroupConfig(dateHistogram,histogram,terms);
    List<MetricConfig> metrics=new ArrayList<>();
    metrics.add(new MetricConfig("temperature",Arrays.asList("min","max","sum")));
    metrics.add(new MetricConfig("voltage",Arrays.asList("avg","value_count")));
{
      String id="job_1";
      RollupJobConfig config=new RollupJobConfig(id,indexPattern,rollupIndex,cron,pageSize,groups,metrics,timeout);
      PutRollupJobRequest request=new PutRollupJobRequest(config);
      PutRollupJobResponse response=client.rollup().putRollupJob(request,RequestOptions.DEFAULT);
      boolean acknowledged=response.isAcknowledged();
      assertTrue(acknowledged);
    }
{
      String id="job_2";
      RollupJobConfig config=new RollupJobConfig(id,indexPattern,rollupIndex,cron,pageSize,groups,metrics,timeout);
      PutRollupJobRequest request=new PutRollupJobRequest(config);
      ActionListener<PutRollupJobResponse> listener=new ActionListener<PutRollupJobResponse>(){
        @Override public void onResponse(        PutRollupJobResponse response){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.rollup().putRollupJobAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
  }
  public void testGetRollupJob() throws Exception {
    testCreateRollupJob();
    RestHighLevelClient client=highLevelClient();
    GetRollupJobRequest getAll=new GetRollupJobRequest();
    GetRollupJobRequest getJob=new GetRollupJobRequest("job_1");
    GetRollupJobResponse response=client.rollup().getRollupJob(getJob,RequestOptions.DEFAULT);
    assertThat(response.getJobs(),hasSize(1));
    JobWrapper job=response.getJobs().get(0);
    RollupJobConfig config=job.getJob();
    RollupJobStatus status=job.getStatus();
    RollupIndexerJobStats stats=job.getStats();
    assertNotNull(config);
    assertNotNull(status);
    assertNotNull(status);
    ActionListener<GetRollupJobResponse> listener=new ActionListener<GetRollupJobResponse>(){
      @Override public void onResponse(      GetRollupJobResponse response){
      }
      @Override public void onFailure(      Exception e){
      }
    }
;
    final CountDownLatch latch=new CountDownLatch(1);
    listener=new LatchedActionListener<>(listener,latch);
    client.rollup().getRollupJobAsync(getJob,RequestOptions.DEFAULT,listener);
    assertTrue(latch.await(30L,TimeUnit.SECONDS));
  }
  public void testGetRollupCaps() throws Exception {
    RestHighLevelClient client=highLevelClient();
    DateHistogramGroupConfig dateHistogram=new DateHistogramGroupConfig("timestamp",DateHistogramInterval.HOUR,new DateHistogramInterval("7d"),"UTC");
    TermsGroupConfig terms=new TermsGroupConfig("hostname","datacenter");
    HistogramGroupConfig histogram=new HistogramGroupConfig(5L,"load","net_in","net_out");
    GroupConfig groups=new GroupConfig(dateHistogram,histogram,terms);
    List<MetricConfig> metrics=new ArrayList<>();
    metrics.add(new MetricConfig("temperature",Arrays.asList("min","max","sum")));
    metrics.add(new MetricConfig("voltage",Arrays.asList("avg","value_count")));
    final String indexPattern="docs";
    final String rollupIndexName="rollup";
    final String cron="*/1 * * * * ?";
    final int pageSize=100;
    final TimeValue timeout=null;
    String id="job_1";
    RollupJobConfig config=new RollupJobConfig(id,indexPattern,rollupIndexName,cron,pageSize,groups,metrics,timeout);
    PutRollupJobRequest request=new PutRollupJobRequest(config);
    PutRollupJobResponse response=client.rollup().putRollupJob(request,RequestOptions.DEFAULT);
    boolean acknowledged=response.isAcknowledged();
    assertTrue(acknowledged);
    ClusterHealthRequest healthRequest=new ClusterHealthRequest(config.getRollupIndex()).waitForYellowStatus();
    ClusterHealthResponse healthResponse=client.cluster().health(healthRequest,RequestOptions.DEFAULT);
    assertFalse(healthResponse.isTimedOut());
    assertThat(healthResponse.getStatus(),isOneOf(ClusterHealthStatus.YELLOW,ClusterHealthStatus.GREEN));
    GetRollupCapsRequest getRollupCapsRequest=new GetRollupCapsRequest("docs");
    GetRollupCapsResponse capsResponse=client.rollup().getRollupCapabilities(getRollupCapsRequest,RequestOptions.DEFAULT);
    Map<String,RollableIndexCaps> rolledPatterns=capsResponse.getJobs();
    RollableIndexCaps docsPattern=rolledPatterns.get("docs");
    String indexName=docsPattern.getIndexName();
    List<RollupJobCaps> rollupJobs=docsPattern.getJobCaps();
    RollupJobCaps jobCaps=rollupJobs.get(0);
    String jobID=jobCaps.getJobID();
    String rollupIndex=jobCaps.getRollupIndex();
    assert jobCaps.getIndexPattern().equals(indexName);
    Map<String,RollupJobCaps.RollupFieldCaps> fieldCaps=jobCaps.getFieldCaps();
    List<Map<String,Object>> timestampCaps=fieldCaps.get("timestamp").getAggs();
    assert timestampCaps.get(0).toString().equals("{agg=date_histogram, delay=7d, interval=1h, time_zone=UTC}");
    List<Map<String,Object>> temperatureCaps=fieldCaps.get("temperature").getAggs();
    assert temperatureCaps.toString().equals("[{agg=min}, {agg=max}, {agg=sum}]");
    assertThat(indexName,equalTo("docs"));
    assertThat(jobID,equalTo("job_1"));
    assertThat(rollupIndex,equalTo("rollup"));
    assertThat(fieldCaps.size(),equalTo(8));
    ActionListener<GetRollupCapsResponse> listener=new ActionListener<GetRollupCapsResponse>(){
      @Override public void onResponse(      GetRollupCapsResponse response){
      }
      @Override public void onFailure(      Exception e){
      }
    }
;
    final CountDownLatch latch=new CountDownLatch(1);
    listener=new LatchedActionListener<>(listener,latch);
    client.rollup().getRollupCapabilitiesAsync(getRollupCapsRequest,RequestOptions.DEFAULT,listener);
    assertTrue(latch.await(30L,TimeUnit.SECONDS));
  }
  @After public void wipeRollup() throws Exception {
    deleteRollupJobs();
    waitForPendingRollupTasks();
  }
  private void deleteRollupJobs() throws Exception {
    Response response=adminClient().performRequest(new Request("GET","/_xpack/rollup/job/_all"));
    Map<String,Object> jobs=entityAsMap(response);
    @SuppressWarnings("unchecked") List<Map<String,Object>> jobConfigs=(List<Map<String,Object>>)XContentMapValues.extractValue("jobs",jobs);
    if (jobConfigs == null) {
      return;
    }
    for (    Map<String,Object> jobConfig : jobConfigs) {
      @SuppressWarnings("unchecked") String jobId=(String)((Map<String,Object>)jobConfig.get("config")).get("id");
      Request request=new Request("DELETE","/_xpack/rollup/job/" + jobId);
      request.addParameter("ignore","404");
      adminClient().performRequest(request);
    }
  }
  private void waitForPendingRollupTasks() throws Exception {
    assertBusy(() -> {
      try {
        Request request=new Request("GET","/_cat/tasks");
        request.addParameter("detailed","true");
        Response response=adminClient().performRequest(request);
        try (BufferedReader responseReader=new BufferedReader(new InputStreamReader(response.getEntity().getContent(),StandardCharsets.UTF_8))){
          int activeTasks=0;
          String line;
          StringBuilder tasksListString=new StringBuilder();
          while ((line=responseReader.readLine()) != null) {
            if (line.startsWith("xpack/rollup/job") == true) {
              activeTasks++;
              tasksListString.append(line).append('\n');
            }
          }
          assertEquals(activeTasks + " active tasks found:\n" + tasksListString,0,activeTasks);
        }
       }
 catch (      IOException e) {
        throw new AssertionError("Error getting active tasks list",e);
      }
    }
);
  }
}
