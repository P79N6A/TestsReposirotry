public class WebhookIntegrationTests extends AbstractWatcherIntegrationTestCase {
  private MockWebServer webServer=new MockWebServer();
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("http.enabled",true).build();
  }
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    ArrayList<Class<? extends Plugin>> plugins=new ArrayList<>(super.nodePlugins());
    plugins.add(Netty4Plugin.class);
    return plugins;
  }
  @Before public void startWebservice() throws Exception {
    webServer.start();
  }
  @After public void stopWebservice() throws Exception {
    webServer.close();
  }
  public void testWebhook() throws Exception {
    webServer.enqueue(new MockResponse().setResponseCode(200).setBody("body"));
    HttpRequestTemplate.Builder builder=HttpRequestTemplate.builder("localhost",webServer.getPort()).path(new TextTemplate("/test/_id")).putParam("param1",new TextTemplate("value1")).putParam("watch_id",new TextTemplate("_id")).body(new TextTemplate("_body")).auth(new BasicAuth("user","pass".toCharArray())).method(HttpMethod.POST);
    watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput("key","value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_id",ActionBuilders.webhookAction(builder))).get();
    timeWarp().trigger("_id");
    refresh();
    assertWatchWithMinimumPerformedActionsCount("_id",1,false);
    assertThat(webServer.requests(),hasSize(1));
    assertThat(webServer.requests().get(0).getUri().getQuery(),anyOf(equalTo("watch_id=_id&param1=value1"),equalTo("param1=value1&watch_id=_id")));
    assertThat(webServer.requests().get(0).getBody(),is("_body"));
    SearchResponse response=searchWatchRecords(b -> QueryBuilders.termQuery(WatchRecord.STATE.getPreferredName(),"executed"));
    assertNoFailures(response);
    XContentSource source=xContentSource(response.getHits().getAt(0).getSourceRef());
    String body=source.getValue("result.actions.0.webhook.response.body");
    assertThat(body,notNullValue());
    assertThat(body,is("body"));
    Number status=source.getValue("result.actions.0.webhook.response.status");
    assertThat(status,notNullValue());
    assertThat(status.intValue(),is(200));
  }
  public void testWebhookWithBasicAuth() throws Exception {
    webServer.enqueue(new MockResponse().setResponseCode(200).setBody("body"));
    HttpRequestTemplate.Builder builder=HttpRequestTemplate.builder("localhost",webServer.getPort()).auth(new BasicAuth("_username","_password".toCharArray())).path(new TextTemplate("/test/_id")).putParam("param1",new TextTemplate("value1")).putParam("watch_id",new TextTemplate("_id")).body(new TextTemplate("_body")).method(HttpMethod.POST);
    watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput("key","value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_id",ActionBuilders.webhookAction(builder))).get();
    timeWarp().trigger("_id");
    refresh();
    assertWatchWithMinimumPerformedActionsCount("_id",1,false);
    assertThat(webServer.requests(),hasSize(1));
    assertThat(webServer.requests().get(0).getUri().getQuery(),anyOf(equalTo("watch_id=_id&param1=value1"),equalTo("param1=value1&watch_id=_id")));
    assertThat(webServer.requests().get(0).getBody(),is("_body"));
    assertThat(webServer.requests().get(0).getHeader("Authorization"),is(("Basic X3VzZXJuYW1lOl9wYXNzd29yZA==")));
  }
  public void testWebhookWithTimebasedIndex() throws Exception {
    assertAcked(client().admin().indices().prepareCreate("<logstash-{now/d}>").get());
    HttpServerTransport serverTransport=internalCluster().getDataNodeInstance(HttpServerTransport.class);
    TransportAddress publishAddress=serverTransport.boundAddress().publishAddress();
    String host=publishAddress.address().getHostString();
    HttpRequestTemplate.Builder builder=HttpRequestTemplate.builder(host,publishAddress.getPort()).path(new TextTemplate("/%3Clogstash-%7Bnow%2Fd%7D%3E/log/1")).body(new TextTemplate("{\"foo\":\"bar\"}")).putHeader("Content-Type",new TextTemplate("application/json")).method(HttpMethod.PUT);
    watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput("key","value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_id",ActionBuilders.webhookAction(builder))).get();
    watcherClient().prepareExecuteWatch("_id").get();
    GetResponse response=client().prepareGet("<logstash-{now/d}>","log","1").get();
    assertExists(response);
  }
}
