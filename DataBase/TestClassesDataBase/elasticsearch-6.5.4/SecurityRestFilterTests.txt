public class SecurityRestFilterTests extends ESTestCase {
  private AuthenticationService authcService;
  private RestChannel channel;
  private SecurityRestFilter filter;
  private XPackLicenseState licenseState;
  private RestHandler restHandler;
  @Before public void init() throws Exception {
    authcService=mock(AuthenticationService.class);
    channel=mock(RestChannel.class);
    licenseState=mock(XPackLicenseState.class);
    when(licenseState.isAuthAllowed()).thenReturn(true);
    restHandler=mock(RestHandler.class);
    filter=new SecurityRestFilter(licenseState,new ThreadContext(Settings.EMPTY),authcService,restHandler,false);
  }
  public void testProcess() throws Exception {
    RestRequest request=mock(RestRequest.class);
    Authentication authentication=mock(Authentication.class);
    doAnswer((i) -> {
      ActionListener callback=(ActionListener)i.getArguments()[1];
      callback.onResponse(authentication);
      return Void.TYPE;
    }
).when(authcService).authenticate(eq(request),any(ActionListener.class));
    filter.handleRequest(request,channel,null);
    verify(restHandler).handleRequest(request,channel,null);
    verifyZeroInteractions(channel);
  }
  public void testProcessBasicLicense() throws Exception {
    RestRequest request=mock(RestRequest.class);
    when(licenseState.isAuthAllowed()).thenReturn(false);
    filter.handleRequest(request,channel,null);
    verify(restHandler).handleRequest(request,channel,null);
    verifyZeroInteractions(channel,authcService);
  }
  public void testProcessAuthenticationError() throws Exception {
    RestRequest request=mock(RestRequest.class);
    Exception exception=authenticationError("failed authc");
    doAnswer((i) -> {
      ActionListener callback=(ActionListener)i.getArguments()[1];
      callback.onFailure(exception);
      return Void.TYPE;
    }
).when(authcService).authenticate(eq(request),any(ActionListener.class));
    when(channel.request()).thenReturn(request);
    when(channel.newErrorBuilder()).thenReturn(JsonXContent.contentBuilder());
    filter.handleRequest(request,channel,null);
    ArgumentCaptor<BytesRestResponse> response=ArgumentCaptor.forClass(BytesRestResponse.class);
    verify(channel).sendResponse(response.capture());
    assertEquals(RestStatus.UNAUTHORIZED,response.getValue().status());
    verifyZeroInteractions(restHandler);
  }
  public void testProcessOptionsMethod() throws Exception {
    RestRequest request=mock(RestRequest.class);
    when(request.method()).thenReturn(RestRequest.Method.OPTIONS);
    filter.handleRequest(request,channel,null);
    verify(restHandler).handleRequest(request,channel,null);
    verifyZeroInteractions(channel);
    verifyZeroInteractions(authcService);
  }
  public void testProcessFiltersBodyCorrectly() throws Exception {
    FakeRestRequest restRequest=new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(new BytesArray("{\"password\": \"" + SecuritySettingsSourceField.TEST_PASSWORD + "\", \"foo\": \"bar\"}"),XContentType.JSON).build();
    when(channel.request()).thenReturn(restRequest);
    SetOnce<RestRequest> handlerRequest=new SetOnce<>();
    restHandler=new FilteredRestHandler(){
      @Override public void handleRequest(      RestRequest request,      RestChannel channel,      NodeClient client) throws Exception {
        handlerRequest.set(request);
      }
      @Override public Set<String> getFilteredFields(){
        return Collections.singleton("password");
      }
    }
;
    SetOnce<RestRequest> authcServiceRequest=new SetOnce<>();
    doAnswer((i) -> {
      ActionListener callback=(ActionListener)i.getArguments()[1];
      authcServiceRequest.set((RestRequest)i.getArguments()[0]);
      callback.onResponse(new Authentication(XPackUser.INSTANCE,new RealmRef("test","test","t"),null));
      return Void.TYPE;
    }
).when(authcService).authenticate(any(RestRequest.class),any(ActionListener.class));
    filter=new SecurityRestFilter(licenseState,new ThreadContext(Settings.EMPTY),authcService,restHandler,false);
    filter.handleRequest(restRequest,channel,null);
    assertEquals(restRequest,handlerRequest.get());
    assertEquals(restRequest.content(),handlerRequest.get().content());
    Map<String,Object> original=XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY,DeprecationHandler.THROW_UNSUPPORTED_OPERATION,handlerRequest.get().content().streamInput()).map();
    assertEquals(2,original.size());
    assertEquals(SecuritySettingsSourceField.TEST_PASSWORD,original.get("password"));
    assertEquals("bar",original.get("foo"));
    assertNotEquals(restRequest,authcServiceRequest.get());
    assertNotEquals(restRequest.content(),authcServiceRequest.get().content());
    Map<String,Object> map=XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY,DeprecationHandler.THROW_UNSUPPORTED_OPERATION,authcServiceRequest.get().content().streamInput()).map();
    assertEquals(1,map.size());
    assertEquals("bar",map.get("foo"));
  }
private interface FilteredRestHandler extends RestHandler, RestRequestFilter {
  }
}
