public class ObjectMapperMergeTests extends ESTestCase {
  private static FieldMapper barFieldMapper=createTextFieldMapper("bar");
  private static FieldMapper bazFieldMapper=createTextFieldMapper("baz");
  private static RootObjectMapper rootObjectMapper=createRootObjectMapper("type1",true,ImmutableMap.of("disabled",createObjectMapper("disabled",false,emptyMap()),"foo",createObjectMapper("foo",true,ImmutableMap.of("bar",barFieldMapper))));
  @AfterClass public static void cleanupReferences(){
    barFieldMapper=null;
    bazFieldMapper=null;
    rootObjectMapper=null;
  }
  public void testMerge(){
    ObjectMapper mergeWith=createRootObjectMapper("type1",true,ImmutableMap.of("disabled",createObjectMapper("disabled",false,emptyMap()),"foo",createObjectMapper("foo",true,ImmutableMap.of("bar",barFieldMapper,"baz",bazFieldMapper))));
    final ObjectMapper merged=rootObjectMapper.merge(mergeWith,true);
    final ObjectMapper mergedFoo=(ObjectMapper)merged.getMapper("foo");
    assertThat(mergedFoo.getMapper("bar"),notNullValue());
    assertThat(mergedFoo.getMapper("baz"),notNullValue());
  }
  public void testMergeWhenDisablingField(){
    ObjectMapper mergeWith=createRootObjectMapper("type1",true,ImmutableMap.of("disabled",createObjectMapper("disabled",false,emptyMap()),"foo",createObjectMapper("foo",false,emptyMap())));
    MapperException e=expectThrows(MapperException.class,() -> rootObjectMapper.merge(mergeWith,true));
    assertEquals("Can't update attribute for type [type1.foo.enabled] in index mapping",e.getMessage());
  }
  public void testMergeWhenEnablingField(){
    ObjectMapper mergeWith=createRootObjectMapper("type1",true,ImmutableMap.of("disabled",createObjectMapper("disabled",true,emptyMap()),"foo",createObjectMapper("foo",true,ImmutableMap.of("bar",barFieldMapper))));
    MapperException e=expectThrows(MapperException.class,() -> rootObjectMapper.merge(mergeWith,true));
    assertEquals("Can't update attribute for type [type1.disabled.enabled] in index mapping",e.getMessage());
  }
  private static RootObjectMapper createRootObjectMapper(  String name,  boolean enabled,  Map<String,Mapper> mappers){
    final Settings indexSettings=Settings.builder().put(SETTING_VERSION_CREATED,Version.CURRENT).build();
    final Mapper.BuilderContext context=new Mapper.BuilderContext(indexSettings,new ContentPath());
    final RootObjectMapper rootObjectMapper=new RootObjectMapper.Builder(name).enabled(enabled).build(context);
    mappers.values().forEach(rootObjectMapper::putMapper);
    return rootObjectMapper;
  }
  private static ObjectMapper createObjectMapper(  String name,  boolean enabled,  Map<String,Mapper> mappers){
    final Settings indexSettings=Settings.builder().put(SETTING_VERSION_CREATED,Version.CURRENT).build();
    final Mapper.BuilderContext context=new Mapper.BuilderContext(indexSettings,new ContentPath());
    final ObjectMapper mapper=new ObjectMapper.Builder(name).enabled(enabled).build(context);
    mappers.values().forEach(mapper::putMapper);
    return mapper;
  }
  private static TextFieldMapper createTextFieldMapper(  String name){
    final TextFieldType fieldType=new TextFieldType();
    final Settings indexSettings=Settings.builder().put(SETTING_VERSION_CREATED,Version.CURRENT).build();
    return new TextFieldMapper(name,fieldType,fieldType,-1,true,null,indexSettings,MultiFields.empty(),CopyTo.empty());
  }
}
