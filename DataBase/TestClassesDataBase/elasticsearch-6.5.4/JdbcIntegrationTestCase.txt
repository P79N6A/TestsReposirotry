public abstract class JdbcIntegrationTestCase extends ESRestTestCase {
  @After public void checkSearchContent() throws Exception {
    assertNoSearchContexts();
  }
  /** 
 * Read an address for Elasticsearch suitable for the JDBC driver from the system properties.
 */
  public static String elasticsearchAddress(){
    String cluster=System.getProperty("tests.rest.cluster");
    return cluster.split(",")[0];
  }
  public Connection esJdbc() throws SQLException {
    return randomBoolean() ? useDriverManager() : useDataSource();
  }
  protected Connection useDriverManager() throws SQLException {
    String elasticsearchAddress=getProtocol() + "://" + elasticsearchAddress();
    String address="jdbc:es://" + elasticsearchAddress;
    Properties connectionProperties=connectionProperties();
    Connection connection=DriverManager.getConnection(address,connectionProperties);
    assertNotNull("The timezone should be specified",connectionProperties.getProperty(JdbcConfiguration.TIME_ZONE));
    return connection;
  }
  protected Connection useDataSource() throws SQLException {
    String elasticsearchAddress=getProtocol() + "://" + elasticsearchAddress();
    JdbcDataSource dataSource=new JdbcDataSource();
    String address="jdbc:es://" + elasticsearchAddress;
    dataSource.setUrl(address);
    Properties connectionProperties=connectionProperties();
    dataSource.setProperties(connectionProperties);
    Connection connection=dataSource.getConnection();
    assertNotNull("The timezone should be specified",connectionProperties.getProperty(JdbcConfiguration.TIME_ZONE));
    return connection;
  }
  public static void index(  String index,  CheckedConsumer<XContentBuilder,IOException> body) throws IOException {
    index(index,"1",body);
  }
  public static void index(  String index,  String documentId,  CheckedConsumer<XContentBuilder,IOException> body) throws IOException {
    Request request=new Request("PUT","/" + index + "/doc/"+ documentId);
    request.addParameter("refresh","true");
    XContentBuilder builder=JsonXContent.contentBuilder().startObject();
    body.accept(builder);
    builder.endObject();
    request.setJsonEntity(Strings.toString(builder));
    client().performRequest(request);
  }
  protected String clusterName(){
    try {
      String response=EntityUtils.toString(client().performRequest(new Request("GET","/")).getEntity());
      return XContentHelper.convertToMap(JsonXContent.jsonXContent,response,false).get("cluster_name").toString();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  /** 
 * The properties used to build the connection.
 */
  protected Properties connectionProperties(){
    Properties connectionProperties=new Properties();
    connectionProperties.put(JdbcConfiguration.TIME_ZONE,randomKnownTimeZone());
    return connectionProperties;
  }
  public static String randomKnownTimeZone(){
    Set<String> timeZones=new HashSet<>(JODA_TIMEZONE_IDS);
    timeZones.retainAll(JAVA_TIMEZONE_IDS);
    List<String> ids=new ArrayList<>(timeZones);
    Collections.sort(ids);
    return randomFrom(ids);
  }
}
