@TestLogging("org.elasticsearch.client:TRACE,tracer:TRACE") @AwaitsFix(bugUrl="https://github.com/elastic/x-pack-elasticsearch/issues/2920") public class MonitoringWithWatcherRestIT extends ESRestTestCase {
  @After public void cleanExporters() throws Exception {
    Request request=new Request("PUT","/_cluster/settings");
    request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").nullField("xpack.monitoring.exporters.*").endObject().endObject()));
    adminClient().performRequest(request);
    adminClient().performRequest(new Request("DELETE","/.watch*"));
  }
  public void testThatLocalExporterAddsWatches() throws Exception {
    String watchId=createMonitoringWatch();
    Request request=new Request("PUT","/_cluster/settings");
    request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").field("xpack.monitoring.exporters.my_local_exporter.type","local").field("xpack.monitoring.exporters.my_local_exporter.cluster_alerts.management.enabled",true).endObject().endObject()));
    adminClient().performRequest(request);
    assertTotalWatchCount(ClusterAlertsUtil.WATCH_IDS.length);
    assertMonitoringWatchHasBeenOverWritten(watchId);
  }
  public void testThatHttpExporterAddsWatches() throws Exception {
    String watchId=createMonitoringWatch();
    String httpHost=getHttpHost();
    Request request=new Request("PUT","/_cluster/settings");
    request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").field("xpack.monitoring.exporters.my_http_exporter.type","http").field("xpack.monitoring.exporters.my_http_exporter.host",httpHost).field("xpack.monitoring.exporters.my_http_exporter.cluster_alerts.management.enabled",true).endObject().endObject()));
    adminClient().performRequest(request);
    assertTotalWatchCount(ClusterAlertsUtil.WATCH_IDS.length);
    assertMonitoringWatchHasBeenOverWritten(watchId);
  }
  private void assertMonitoringWatchHasBeenOverWritten(  String watchId) throws Exception {
    ObjectPath path=ObjectPath.createFromResponse(client().performRequest(new Request("GET","/_xpack/watcher/watch/" + watchId)));
    String interval=path.evaluate("watch.trigger.schedule.interval");
    assertThat(interval,is("1m"));
  }
  private void assertTotalWatchCount(  int expectedWatches) throws Exception {
    assertBusy(() -> {
      assertOK(client().performRequest(new Request("POST","/.watches/_refresh")));
      ObjectPath path=ObjectPath.createFromResponse(client().performRequest(new Request("POST","/.watches/_count")));
      int count=path.evaluate("count");
      assertThat(count,is(expectedWatches));
    }
);
  }
  private String createMonitoringWatch() throws Exception {
    String clusterUUID=getClusterUUID();
    String watchId=clusterUUID + "_kibana_version_mismatch";
    Request request=new Request("PUT","/_xpack/watcher/watch/" + watchId);
    request.setJsonEntity(WatchSourceBuilders.watchBuilder().trigger(TriggerBuilders.schedule(new IntervalSchedule(new IntervalSchedule.Interval(1000,MINUTES)))).input(simpleInput()).addAction("logme",ActionBuilders.loggingAction("foo")).buildAsBytes(XContentType.JSON).utf8ToString());
    client().performRequest(request);
    return watchId;
  }
  private String getClusterUUID() throws Exception {
    Response response=client().performRequest(new Request("GET","/_cluster/state/metadata"));
    ObjectPath objectPath=ObjectPath.createFromResponse(response);
    String clusterUUID=objectPath.evaluate("metadata.cluster_uuid");
    return clusterUUID;
  }
  public String getHttpHost() throws IOException {
    ObjectPath path=ObjectPath.createFromResponse(client().performRequest(new Request("GET","/_cluster/state")));
    String masterNodeId=path.evaluate("master_node");
    ObjectPath nodesPath=ObjectPath.createFromResponse(client().performRequest(new Request("GET","/_nodes")));
    String httpHost=nodesPath.evaluate("nodes." + masterNodeId + ".http.publish_address");
    return httpHost;
  }
}
