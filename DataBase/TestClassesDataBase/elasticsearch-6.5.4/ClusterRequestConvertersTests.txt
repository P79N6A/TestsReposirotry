public class ClusterRequestConvertersTests extends ESTestCase {
  public void testClusterPutSettings() throws IOException {
    ClusterUpdateSettingsRequest request=new ClusterUpdateSettingsRequest();
    Map<String,String> expectedParams=new HashMap<>();
    RequestConvertersTests.setRandomMasterTimeout(request,expectedParams);
    RequestConvertersTests.setRandomTimeout(request::timeout,AcknowledgedRequest.DEFAULT_ACK_TIMEOUT,expectedParams);
    Request expectedRequest=ClusterRequestConverters.clusterPutSettings(request);
    Assert.assertEquals("/_cluster/settings",expectedRequest.getEndpoint());
    Assert.assertEquals(HttpPut.METHOD_NAME,expectedRequest.getMethod());
    Assert.assertEquals(expectedParams,expectedRequest.getParameters());
  }
  public void testClusterGetSettings() throws IOException {
    ClusterGetSettingsRequest request=new ClusterGetSettingsRequest();
    Map<String,String> expectedParams=new HashMap<>();
    RequestConvertersTests.setRandomMasterTimeout(request,expectedParams);
    request.includeDefaults(ESTestCase.randomBoolean());
    if (request.includeDefaults()) {
      expectedParams.put("include_defaults",String.valueOf(true));
    }
    Request expectedRequest=ClusterRequestConverters.clusterGetSettings(request);
    Assert.assertEquals("/_cluster/settings",expectedRequest.getEndpoint());
    Assert.assertEquals(HttpGet.METHOD_NAME,expectedRequest.getMethod());
    Assert.assertEquals(expectedParams,expectedRequest.getParameters());
  }
  public void testClusterHealth(){
    ClusterHealthRequest healthRequest=new ClusterHealthRequest();
    Map<String,String> expectedParams=new HashMap<>();
    setRandomLocal(healthRequest,expectedParams);
    String timeoutType=randomFrom("timeout","masterTimeout","both","none");
    String timeout=randomTimeValue();
    String masterTimeout=randomTimeValue();
switch (timeoutType) {
case "timeout":
      healthRequest.timeout(timeout);
    expectedParams.put("timeout",timeout);
  expectedParams.put("master_timeout",timeout);
break;
case "masterTimeout":
expectedParams.put("timeout","30s");
healthRequest.masterNodeTimeout(masterTimeout);
expectedParams.put("master_timeout",masterTimeout);
break;
case "both":
healthRequest.timeout(timeout);
expectedParams.put("timeout",timeout);
healthRequest.masterNodeTimeout(timeout);
expectedParams.put("master_timeout",timeout);
break;
case "none":
expectedParams.put("timeout","30s");
expectedParams.put("master_timeout","30s");
break;
default :
throw new UnsupportedOperationException();
}
setRandomWaitForActiveShards(healthRequest::waitForActiveShards,ActiveShardCount.NONE,expectedParams);
if (randomBoolean()) {
ClusterHealthRequest.Level level=randomFrom(ClusterHealthRequest.Level.values());
healthRequest.level(level);
expectedParams.put("level",level.name().toLowerCase(Locale.ROOT));
}
 else {
expectedParams.put("level","shards");
}
if (randomBoolean()) {
Priority priority=randomFrom(Priority.values());
healthRequest.waitForEvents(priority);
expectedParams.put("wait_for_events",priority.name().toLowerCase(Locale.ROOT));
}
if (randomBoolean()) {
ClusterHealthStatus status=randomFrom(ClusterHealthStatus.values());
healthRequest.waitForStatus(status);
expectedParams.put("wait_for_status",status.name().toLowerCase(Locale.ROOT));
}
if (randomBoolean()) {
boolean waitForNoInitializingShards=randomBoolean();
healthRequest.waitForNoInitializingShards(waitForNoInitializingShards);
if (waitForNoInitializingShards) {
expectedParams.put("wait_for_no_initializing_shards",Boolean.TRUE.toString());
}
}
if (randomBoolean()) {
boolean waitForNoRelocatingShards=randomBoolean();
healthRequest.waitForNoRelocatingShards(waitForNoRelocatingShards);
if (waitForNoRelocatingShards) {
expectedParams.put("wait_for_no_relocating_shards",Boolean.TRUE.toString());
}
}
String[] indices=randomBoolean() ? null : randomIndicesNames(0,5);
healthRequest.indices(indices);
Request request=ClusterRequestConverters.clusterHealth(healthRequest);
assertThat(request,CoreMatchers.notNullValue());
assertThat(request.getMethod(),equalTo(HttpGet.METHOD_NAME));
assertThat(request.getEntity(),nullValue());
if (indices != null && indices.length > 0) {
assertThat(request.getEndpoint(),equalTo("/_cluster/health/" + String.join(",",indices)));
}
 else {
assertThat(request.getEndpoint(),equalTo("/_cluster/health"));
}
assertThat(request.getParameters(),equalTo(expectedParams));
}
}
