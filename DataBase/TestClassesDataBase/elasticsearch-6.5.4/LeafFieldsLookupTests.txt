public class LeafFieldsLookupTests extends ESTestCase {
  private LeafFieldsLookup fieldsLookup;
  @Before public void setUp() throws Exception {
    super.setUp();
    IndexSettings indexSettings=new IndexSettings(IndexMetaData.builder("index").settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).build(),Settings.EMPTY);
    MappedFieldType fieldType=mock(MappedFieldType.class);
    when(fieldType.name()).thenReturn("field");
    when(fieldType.valueForDisplay(anyObject())).then(returnsFirstArg());
    MapperService mapperService=mock(MapperService.class);
    when(mapperService.getIndexSettings()).thenReturn(indexSettings);
    when(mapperService.fullName("field")).thenReturn(fieldType);
    when(mapperService.fullName("alias")).thenReturn(fieldType);
    FieldInfo mockFieldInfo=new FieldInfo("field",1,false,false,true,IndexOptions.NONE,DocValuesType.NONE,-1,Collections.emptyMap(),0,0,false);
    LeafReader leafReader=mock(LeafReader.class);
    doAnswer(invocation -> {
      Object[] args=invocation.getArguments();
      StoredFieldVisitor visitor=(StoredFieldVisitor)args[1];
      visitor.doubleField(mockFieldInfo,2.718);
      return null;
    }
).when(leafReader).document(anyInt(),any(StoredFieldVisitor.class));
    fieldsLookup=new LeafFieldsLookup(mapperService,new String[]{"type"},leafReader);
  }
  public void testBasicLookup(){
    FieldLookup fieldLookup=(FieldLookup)fieldsLookup.get("field");
    assertEquals("field",fieldLookup.fieldType().name());
    List<Object> values=fieldLookup.getValues();
    assertNotNull(values);
    assertEquals(1,values.size());
    assertEquals(2.718,values.get(0));
  }
  public void testLookupWithFieldAlias(){
    FieldLookup fieldLookup=(FieldLookup)fieldsLookup.get("alias");
    assertEquals("field",fieldLookup.fieldType().name());
    List<Object> values=fieldLookup.getValues();
    assertNotNull(values);
    assertEquals(1,values.size());
    assertEquals(2.718,values.get(0));
  }
}
