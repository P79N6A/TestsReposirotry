public class AggregatorFactoriesBuilderTests extends AbstractSerializingTestCase<AggregatorFactories.Builder> {
  private NamedWriteableRegistry namedWriteableRegistry;
  private NamedXContentRegistry namedXContentRegistry;
  @Before public void setUp() throws Exception {
    super.setUp();
    SearchModule searchModule=new SearchModule(Settings.EMPTY,false,emptyList());
    namedWriteableRegistry=new NamedWriteableRegistry(searchModule.getNamedWriteables());
    namedXContentRegistry=new NamedXContentRegistry(searchModule.getNamedXContents());
  }
  @Override protected NamedWriteableRegistry getNamedWriteableRegistry(){
    return namedWriteableRegistry;
  }
  @Override protected NamedXContentRegistry xContentRegistry(){
    return namedXContentRegistry;
  }
  @Override protected Builder doParseInstance(  XContentParser parser) throws IOException {
    assertThat(parser.nextToken(),equalTo(XContentParser.Token.START_OBJECT));
    AggregatorFactories.Builder builder=AggregatorFactories.parseAggregators(parser);
    return builder;
  }
  @Override protected Builder createTestInstance(){
    AggregatorFactories.Builder builder=new AggregatorFactories.Builder();
    Set<String> names=new HashSet<>();
    for (int i=0; i < randomIntBetween(1,20); ++i) {
      AggregationBuilder aggBuilder=getRandomAggregation();
      if (names.add(aggBuilder.getName())) {
        builder.addAggregator(aggBuilder);
      }
    }
    for (int i=0; i < randomIntBetween(0,20); ++i) {
      PipelineAggregationBuilder aggBuilder=getRandomPipelineAggregation();
      if (names.add(aggBuilder.getName())) {
        builder.addPipelineAggregator(aggBuilder);
      }
    }
    return builder;
  }
  @Override protected Reader<Builder> instanceReader(){
    return AggregatorFactories.Builder::new;
  }
  public void testUnorderedEqualsSubSet(){
    Set<String> names=new HashSet<>();
    List<AggregationBuilder> aggBuilders=new ArrayList<>();
    while (names.size() < 2) {
      AggregationBuilder aggBuilder=getRandomAggregation();
      if (names.add(aggBuilder.getName())) {
        aggBuilders.add(aggBuilder);
      }
    }
    AggregatorFactories.Builder builder1=new AggregatorFactories.Builder();
    AggregatorFactories.Builder builder2=new AggregatorFactories.Builder();
    builder1.addAggregator(aggBuilders.get(0));
    builder1.addAggregator(aggBuilders.get(1));
    builder2.addAggregator(aggBuilders.get(1));
    assertFalse(builder1.equals(builder2));
    assertFalse(builder2.equals(builder1));
    assertNotEquals(builder1.hashCode(),builder2.hashCode());
    builder2.addAggregator(aggBuilders.get(0));
    assertTrue(builder1.equals(builder2));
    assertTrue(builder2.equals(builder1));
    assertEquals(builder1.hashCode(),builder2.hashCode());
    builder1.addPipelineAggregator(getRandomPipelineAggregation());
    assertFalse(builder1.equals(builder2));
    assertFalse(builder2.equals(builder1));
    assertNotEquals(builder1.hashCode(),builder2.hashCode());
  }
  private static AggregationBuilder getRandomAggregation(){
    final int randomAggregatorPoolSize=4;
switch (randomIntBetween(1,randomAggregatorPoolSize)) {
case 1:
      return AggregationBuilders.avg(randomAlphaOfLengthBetween(3,10));
case 2:
    return AggregationBuilders.min(randomAlphaOfLengthBetween(3,10));
case 3:
  return AggregationBuilders.max(randomAlphaOfLengthBetween(3,10));
case 4:
return AggregationBuilders.sum(randomAlphaOfLengthBetween(3,10));
}
return null;
}
private static PipelineAggregationBuilder getRandomPipelineAggregation(){
String name=randomAlphaOfLengthBetween(3,20);
String bucketsPath=randomAlphaOfLengthBetween(3,20);
PipelineAggregationBuilder builder=new CumulativeSumPipelineAggregationBuilder(name,bucketsPath);
return builder;
}
}
