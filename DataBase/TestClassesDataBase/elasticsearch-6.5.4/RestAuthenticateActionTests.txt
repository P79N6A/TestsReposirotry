public class RestAuthenticateActionTests extends SecurityIntegTestCase {
  private static boolean anonymousEnabled;
  @BeforeClass public static void maybeEnableAnonymous(){
    anonymousEnabled=randomBoolean();
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    Settings.Builder builder=Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.HTTP_ENABLED.getKey(),true);
    if (anonymousEnabled) {
      builder.put(AnonymousUser.USERNAME_SETTING.getKey(),"anon").putList(AnonymousUser.ROLES_SETTING.getKey(),SecuritySettingsSource.TEST_ROLE,"foo").put(AuthorizationService.ANONYMOUS_AUTHORIZATION_EXCEPTION_SETTING.getKey(),false);
    }
    return builder.build();
  }
  public void testAuthenticateApi() throws Exception {
    Request request=new Request("GET","/_xpack/security/_authenticate");
    RequestOptions.Builder options=request.getOptions().toBuilder();
    options.addHeader("Authorization",basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));
    request.setOptions(options);
    ObjectPath objectPath=ObjectPath.createFromResponse(getRestClient().performRequest(request));
    assertThat(objectPath.evaluate("username").toString(),equalTo(SecuritySettingsSource.TEST_USER_NAME));
    @SuppressWarnings("unchecked") List<String> roles=objectPath.evaluate("roles");
    assertThat(roles.size(),is(1));
    assertThat(roles,contains(SecuritySettingsSource.TEST_ROLE));
  }
  public void testAuthenticateApiWithoutAuthentication() throws Exception {
    try {
      Response response=getRestClient().performRequest(new Request("GET","/_xpack/security/_authenticate"));
      if (anonymousEnabled) {
        assertThat(response.getStatusLine().getStatusCode(),is(200));
        ObjectPath objectPath=ObjectPath.createFromResponse(response);
        assertThat(objectPath.evaluate("username").toString(),equalTo("anon"));
        @SuppressWarnings("unchecked") List<String> roles=(List<String>)objectPath.evaluate("roles");
        assertThat(roles.size(),is(2));
        assertThat(roles,contains(SecuritySettingsSource.TEST_ROLE,"foo"));
      }
 else {
        fail("request should have failed");
      }
    }
 catch (    ResponseException e) {
      if (anonymousEnabled) {
        fail("request should have succeeded");
      }
 else {
        assertThat(e.getResponse().getStatusLine().getStatusCode(),is(401));
      }
    }
  }
}
