public class InternalCardinalityTests extends InternalAggregationTestCase<InternalCardinality> {
  private static List<HyperLogLogPlusPlus> algos;
  private static int p;
  @Override public void setUp() throws Exception {
    super.setUp();
    algos=new ArrayList<>();
    p=randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION,HyperLogLogPlusPlus.MAX_PRECISION);
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    Releasables.close(algos);
    algos.clear();
    algos=null;
  }
  @Override protected InternalCardinality createTestInstance(  String name,  List<PipelineAggregator> pipelineAggregators,  Map<String,Object> metaData){
    HyperLogLogPlusPlus hllpp=new HyperLogLogPlusPlus(p,new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService()),1);
    algos.add(hllpp);
    for (int i=0; i < 100; i++) {
      hllpp.collect(0,BitMixer.mix64(randomIntBetween(1,100)));
    }
    return new InternalCardinality(name,hllpp,pipelineAggregators,metaData);
  }
  @Override protected Reader<InternalCardinality> instanceReader(){
    return InternalCardinality::new;
  }
  @Override protected void assertReduced(  InternalCardinality reduced,  List<InternalCardinality> inputs){
    HyperLogLogPlusPlus[] algos=inputs.stream().map(InternalCardinality::getState).toArray(size -> new HyperLogLogPlusPlus[size]);
    if (algos.length > 0) {
      HyperLogLogPlusPlus result=algos[0];
      for (int i=1; i < algos.length; i++) {
        result.merge(0,algos[i],0);
      }
      assertEquals(result.cardinality(0),reduced.value(),0);
    }
  }
  @Override protected void assertFromXContent(  InternalCardinality aggregation,  ParsedAggregation parsedAggregation){
    assertTrue(parsedAggregation instanceof ParsedCardinality);
    ParsedCardinality parsed=(ParsedCardinality)parsedAggregation;
    assertEquals(aggregation.getValue(),parsed.getValue(),Double.MIN_VALUE);
    assertEquals(aggregation.getValueAsString(),parsed.getValueAsString());
  }
  @Override protected InternalCardinality mutateInstance(  InternalCardinality instance){
    String name=instance.getName();
    HyperLogLogPlusPlus state=instance.getState();
    List<PipelineAggregator> pipelineAggregators=instance.pipelineAggregators();
    Map<String,Object> metaData=instance.getMetaData();
switch (between(0,2)) {
case 0:
      name+=randomAlphaOfLength(5);
    break;
case 1:
  HyperLogLogPlusPlus newState=new HyperLogLogPlusPlus(state.precision(),new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService()),0);
newState.merge(0,state,0);
int extraValues=between(10,100);
for (int i=0; i < extraValues; i++) {
newState.collect(0,BitMixer.mix64(randomIntBetween(500,10000)));
}
algos.add(newState);
state=newState;
break;
case 2:
if (metaData == null) {
metaData=new HashMap<>(1);
}
 else {
metaData=new HashMap<>(instance.getMetaData());
}
metaData.put(randomAlphaOfLength(15),randomInt());
break;
default :
throw new AssertionError("Illegal randomisation branch");
}
return new InternalCardinality(name,state,pipelineAggregators,metaData);
}
}
