public class UpgradeSettingsIT extends ESSingleNodeTestCase {
  @After public void cleanup() throws Exception {
    client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().putNull("*")).setTransientSettings(Settings.builder().putNull("*")).get();
  }
  @Override protected Collection<Class<? extends Plugin>> getPlugins(){
    return Collections.singletonList(UpgradeSettingsPlugin.class);
  }
public static class UpgradeSettingsPlugin extends Plugin {
    static final Setting<String> oldSetting=Setting.simpleString("foo.old",Setting.Property.Dynamic,Setting.Property.NodeScope);
    static final Setting<String> newSetting=Setting.simpleString("foo.new",Setting.Property.Dynamic,Setting.Property.NodeScope);
    public UpgradeSettingsPlugin(){
    }
    @Override public List<Setting<?>> getSettings(){
      return Arrays.asList(oldSetting,newSetting);
    }
    @Override public List<SettingUpgrader<?>> getSettingUpgraders(){
      return Collections.singletonList(new SettingUpgrader<String>(){
        @Override public Setting<String> getSetting(){
          return oldSetting;
        }
        @Override public String getKey(        final String key){
          return "foo.new";
        }
        @Override public String getValue(        final String value){
          return "new." + value;
        }
      }
);
    }
  }
  public void testUpgradePersistentSettingsOnUpdate(){
    runUpgradeSettingsOnUpdateTest((settings,builder) -> builder.setPersistentSettings(settings),MetaData::persistentSettings);
  }
  public void testUpgradeTransientSettingsOnUpdate(){
    runUpgradeSettingsOnUpdateTest((settings,builder) -> builder.setTransientSettings(settings),MetaData::transientSettings);
  }
  private void runUpgradeSettingsOnUpdateTest(  final BiConsumer<Settings,ClusterUpdateSettingsRequestBuilder> consumer,  final Function<MetaData,Settings> settingsFunction){
    final String value=randomAlphaOfLength(8);
    final ClusterUpdateSettingsRequestBuilder builder=client().admin().cluster().prepareUpdateSettings();
    consumer.accept(Settings.builder().put("foo.old",value).build(),builder);
    builder.get();
    final ClusterStateResponse response=client().admin().cluster().prepareState().clear().setMetaData(true).get();
    assertFalse(UpgradeSettingsPlugin.oldSetting.exists(settingsFunction.apply(response.getState().metaData())));
    assertTrue(UpgradeSettingsPlugin.newSetting.exists(settingsFunction.apply(response.getState().metaData())));
    assertThat(UpgradeSettingsPlugin.newSetting.get(settingsFunction.apply(response.getState().metaData())),equalTo("new." + value));
  }
  public void testUpgradeRemoteClusterSettings(){
    final boolean skipUnavailable=randomBoolean();
    client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put("search.remote.foo.skip_unavailable",skipUnavailable).putList("search.remote.foo.seeds",Collections.singletonList("localhost:9200")).put("search.remote.foo.proxy","localhost:9200").build()).get();
    final ClusterStateResponse response=client().admin().cluster().prepareState().clear().setMetaData(true).get();
    final Settings settings=response.getState().metaData().persistentSettings();
    assertFalse(RemoteClusterService.SEARCH_REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace("foo").exists(settings));
    assertTrue(RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace("foo").exists(settings));
    assertThat(RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace("foo").get(settings),equalTo(skipUnavailable));
    assertFalse(RemoteClusterService.SEARCH_REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace("foo").exists(settings));
    assertTrue(RemoteClusterService.REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace("foo").exists(settings));
    assertThat(RemoteClusterService.REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace("foo").get(settings),equalTo(Collections.singletonList("localhost:9200")));
    assertFalse(RemoteClusterService.SEARCH_REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace("foo").exists(settings));
    assertTrue(RemoteClusterService.REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace("foo").exists(settings));
    assertThat(RemoteClusterService.REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace("foo").get(settings),equalTo("localhost:9200"));
  }
}
