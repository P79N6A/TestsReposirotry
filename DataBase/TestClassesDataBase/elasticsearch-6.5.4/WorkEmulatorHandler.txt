private class WorkEmulatorHandler extends SimpleChannelInboundHandler<HttpPipelinedRequest> {
  @Override protected void channelRead0(  final ChannelHandlerContext ctx,  final HttpPipelinedRequest pipelinedRequest) throws Exception {
    final QueryStringDecoder decoder;
    if (pipelinedRequest.last() instanceof FullHttpRequest) {
      final FullHttpRequest fullHttpRequest=(FullHttpRequest)pipelinedRequest.last();
      decoder=new QueryStringDecoder(fullHttpRequest.uri());
    }
 else {
      decoder=new QueryStringDecoder(AggregateUrisAndHeadersHandler.QUEUE_URI.poll());
    }
    final String uri=decoder.path().replace("/","");
    final ByteBuf content=Unpooled.copiedBuffer(uri,StandardCharsets.UTF_8);
    final DefaultFullHttpResponse httpResponse=new DefaultFullHttpResponse(HTTP_1_1,OK,content);
    httpResponse.headers().add(CONTENT_LENGTH,content.readableBytes());
    final CountDownLatch waitingLatch=new CountDownLatch(1);
    waitingRequests.put(uri,waitingLatch);
    final CountDownLatch finishingLatch=new CountDownLatch(1);
    finishingRequests.put(uri,finishingLatch);
    executorService.submit(() -> {
      try {
        waitingLatch.await(1000,TimeUnit.SECONDS);
        final ChannelPromise promise=ctx.newPromise();
        ctx.write(pipelinedRequest.createHttpResponse(httpResponse,promise),promise);
        finishingLatch.countDown();
      }
 catch (      InterruptedException e) {
        fail(e.toString());
      }
    }
);
  }
}
