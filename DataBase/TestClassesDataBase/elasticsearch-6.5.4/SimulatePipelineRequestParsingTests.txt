public class SimulatePipelineRequestParsingTests extends ESTestCase {
  private IngestService ingestService;
  @Before public void init() throws IOException {
    TestProcessor processor=new TestProcessor(ingestDocument -> {
    }
);
    CompoundProcessor pipelineCompoundProcessor=new CompoundProcessor(processor);
    Pipeline pipeline=new Pipeline(SIMULATED_PIPELINE_ID,null,null,pipelineCompoundProcessor);
    Map<String,Processor.Factory> registry=Collections.singletonMap("mock_processor",(factories,tag,config) -> processor);
    ingestService=mock(IngestService.class);
    when(ingestService.getPipeline(SIMULATED_PIPELINE_ID)).thenReturn(pipeline);
    when(ingestService.getProcessorFactories()).thenReturn(registry);
  }
  public void testParseUsingPipelineStore() throws Exception {
    int numDocs=randomIntBetween(1,10);
    Map<String,Object> requestContent=new HashMap<>();
    List<Map<String,Object>> docs=new ArrayList<>();
    List<Map<String,Object>> expectedDocs=new ArrayList<>();
    requestContent.put(Fields.DOCS,docs);
    for (int i=0; i < numDocs; i++) {
      Map<String,Object> doc=new HashMap<>();
      String index=randomAlphaOfLengthBetween(1,10);
      String type=randomAlphaOfLengthBetween(1,10);
      String id=randomAlphaOfLengthBetween(1,10);
      doc.put(INDEX.getFieldName(),index);
      doc.put(TYPE.getFieldName(),type);
      doc.put(ID.getFieldName(),id);
      String fieldName=randomAlphaOfLengthBetween(1,10);
      String fieldValue=randomAlphaOfLengthBetween(1,10);
      doc.put(Fields.SOURCE,Collections.singletonMap(fieldName,fieldValue));
      docs.add(doc);
      Map<String,Object> expectedDoc=new HashMap<>();
      expectedDoc.put(INDEX.getFieldName(),index);
      expectedDoc.put(TYPE.getFieldName(),type);
      expectedDoc.put(ID.getFieldName(),id);
      expectedDoc.put(Fields.SOURCE,Collections.singletonMap(fieldName,fieldValue));
      expectedDocs.add(expectedDoc);
    }
    SimulatePipelineRequest.Parsed actualRequest=SimulatePipelineRequest.parseWithPipelineId(SIMULATED_PIPELINE_ID,requestContent,false,ingestService);
    assertThat(actualRequest.isVerbose(),equalTo(false));
    assertThat(actualRequest.getDocuments().size(),equalTo(numDocs));
    Iterator<Map<String,Object>> expectedDocsIterator=expectedDocs.iterator();
    for (    IngestDocument ingestDocument : actualRequest.getDocuments()) {
      Map<String,Object> expectedDocument=expectedDocsIterator.next();
      Map<IngestDocument.MetaData,Object> metadataMap=ingestDocument.extractMetadata();
      assertThat(metadataMap.get(INDEX),equalTo(expectedDocument.get(INDEX.getFieldName())));
      assertThat(metadataMap.get(TYPE),equalTo(expectedDocument.get(TYPE.getFieldName())));
      assertThat(metadataMap.get(ID),equalTo(expectedDocument.get(ID.getFieldName())));
      assertThat(ingestDocument.getSourceAndMetadata(),equalTo(expectedDocument.get(Fields.SOURCE)));
    }
    assertThat(actualRequest.getPipeline().getId(),equalTo(SIMULATED_PIPELINE_ID));
    assertThat(actualRequest.getPipeline().getDescription(),nullValue());
    assertThat(actualRequest.getPipeline().getProcessors().size(),equalTo(1));
  }
  public void testParseWithProvidedPipeline() throws Exception {
    int numDocs=randomIntBetween(1,10);
    Map<String,Object> requestContent=new HashMap<>();
    List<Map<String,Object>> docs=new ArrayList<>();
    List<Map<String,Object>> expectedDocs=new ArrayList<>();
    requestContent.put(Fields.DOCS,docs);
    for (int i=0; i < numDocs; i++) {
      Map<String,Object> doc=new HashMap<>();
      Map<String,Object> expectedDoc=new HashMap<>();
      List<IngestDocument.MetaData> fields=Arrays.asList(INDEX,TYPE,ID,ROUTING,VERSION,VERSION_TYPE);
      for (      IngestDocument.MetaData field : fields) {
        if (field == VERSION) {
          Long value=randomLong();
          doc.put(field.getFieldName(),value);
          expectedDoc.put(field.getFieldName(),value);
        }
 else         if (field == VERSION_TYPE) {
          String value=VersionType.toString(randomFrom(VersionType.INTERNAL,VersionType.EXTERNAL,VersionType.EXTERNAL_GTE));
          doc.put(field.getFieldName(),value);
          expectedDoc.put(field.getFieldName(),value);
        }
 else {
          if (randomBoolean()) {
            String value=randomAlphaOfLengthBetween(1,10);
            doc.put(field.getFieldName(),value);
            expectedDoc.put(field.getFieldName(),value);
          }
 else {
            Integer value=randomIntBetween(1,1000000);
            doc.put(field.getFieldName(),value);
            expectedDoc.put(field.getFieldName(),String.valueOf(value));
          }
        }
      }
      String fieldName=randomAlphaOfLengthBetween(1,10);
      String fieldValue=randomAlphaOfLengthBetween(1,10);
      doc.put(Fields.SOURCE,Collections.singletonMap(fieldName,fieldValue));
      docs.add(doc);
      expectedDoc.put(Fields.SOURCE,Collections.singletonMap(fieldName,fieldValue));
      expectedDocs.add(expectedDoc);
    }
    Map<String,Object> pipelineConfig=new HashMap<>();
    List<Map<String,Object>> processors=new ArrayList<>();
    int numProcessors=randomIntBetween(1,10);
    for (int i=0; i < numProcessors; i++) {
      Map<String,Object> processorConfig=new HashMap<>();
      List<Map<String,Object>> onFailureProcessors=new ArrayList<>();
      int numOnFailureProcessors=randomIntBetween(0,1);
      for (int j=0; j < numOnFailureProcessors; j++) {
        onFailureProcessors.add(Collections.singletonMap("mock_processor",Collections.emptyMap()));
      }
      if (numOnFailureProcessors > 0) {
        processorConfig.put("on_failure",onFailureProcessors);
      }
      processors.add(Collections.singletonMap("mock_processor",processorConfig));
    }
    pipelineConfig.put("processors",processors);
    List<Map<String,Object>> onFailureProcessors=new ArrayList<>();
    int numOnFailureProcessors=randomIntBetween(0,1);
    for (int i=0; i < numOnFailureProcessors; i++) {
      onFailureProcessors.add(Collections.singletonMap("mock_processor",Collections.emptyMap()));
    }
    if (numOnFailureProcessors > 0) {
      pipelineConfig.put("on_failure",onFailureProcessors);
    }
    requestContent.put(Fields.PIPELINE,pipelineConfig);
    SimulatePipelineRequest.Parsed actualRequest=SimulatePipelineRequest.parse(requestContent,false,ingestService);
    assertThat(actualRequest.isVerbose(),equalTo(false));
    assertThat(actualRequest.getDocuments().size(),equalTo(numDocs));
    Iterator<Map<String,Object>> expectedDocsIterator=expectedDocs.iterator();
    for (    IngestDocument ingestDocument : actualRequest.getDocuments()) {
      Map<String,Object> expectedDocument=expectedDocsIterator.next();
      Map<IngestDocument.MetaData,Object> metadataMap=ingestDocument.extractMetadata();
      assertThat(metadataMap.get(INDEX),equalTo(expectedDocument.get(INDEX.getFieldName())));
      assertThat(metadataMap.get(TYPE),equalTo(expectedDocument.get(TYPE.getFieldName())));
      assertThat(metadataMap.get(ID),equalTo(expectedDocument.get(ID.getFieldName())));
      assertThat(metadataMap.get(ROUTING),equalTo(expectedDocument.get(ROUTING.getFieldName())));
      assertThat(metadataMap.get(VERSION),equalTo(expectedDocument.get(VERSION.getFieldName())));
      assertThat(metadataMap.get(VERSION_TYPE),equalTo(expectedDocument.get(VERSION_TYPE.getFieldName())));
      assertThat(ingestDocument.getSourceAndMetadata(),equalTo(expectedDocument.get(Fields.SOURCE)));
    }
    assertThat(actualRequest.getPipeline().getId(),equalTo(SIMULATED_PIPELINE_ID));
    assertThat(actualRequest.getPipeline().getDescription(),nullValue());
    assertThat(actualRequest.getPipeline().getProcessors().size(),equalTo(numProcessors));
  }
  public void testNullPipelineId(){
    Map<String,Object> requestContent=new HashMap<>();
    List<Map<String,Object>> docs=new ArrayList<>();
    requestContent.put(Fields.DOCS,docs);
    Exception e=expectThrows(IllegalArgumentException.class,() -> SimulatePipelineRequest.parseWithPipelineId(null,requestContent,false,ingestService));
    assertThat(e.getMessage(),equalTo("param [pipeline] is null"));
  }
  public void testNonExistentPipelineId(){
    String pipelineId=randomAlphaOfLengthBetween(1,10);
    Map<String,Object> requestContent=new HashMap<>();
    List<Map<String,Object>> docs=new ArrayList<>();
    requestContent.put(Fields.DOCS,docs);
    Exception e=expectThrows(IllegalArgumentException.class,() -> SimulatePipelineRequest.parseWithPipelineId(pipelineId,requestContent,false,ingestService));
    assertThat(e.getMessage(),equalTo("pipeline [" + pipelineId + "] does not exist"));
  }
}
