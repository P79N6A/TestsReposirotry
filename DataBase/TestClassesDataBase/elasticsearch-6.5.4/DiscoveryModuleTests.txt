public class DiscoveryModuleTests extends ESTestCase {
  private TransportService transportService;
  private NamedWriteableRegistry namedWriteableRegistry;
  private MasterService masterService;
  private ClusterApplier clusterApplier;
  private ThreadPool threadPool;
  private ClusterSettings clusterSettings;
public interface DummyHostsProviderPlugin extends DiscoveryPlugin {
    Map<String,Supplier<UnicastHostsProvider>> impl();
    @Override default Map<String,Supplier<UnicastHostsProvider>> getZenHostsProviders(    TransportService transportService,    NetworkService networkService){
      return impl();
    }
  }
public interface DummyDiscoveryPlugin extends DiscoveryPlugin {
    Map<String,Supplier<Discovery>> impl();
    @Override default Map<String,Supplier<Discovery>> getDiscoveryTypes(    ThreadPool threadPool,    TransportService transportService,    NamedWriteableRegistry namedWriteableRegistry,    MasterService masterService,    ClusterApplier clusterApplier,    ClusterSettings clusterSettings,    UnicastHostsProvider hostsProvider,    AllocationService allocationService){
      return impl();
    }
  }
  @Before public void setupDummyServices(){
    transportService=MockTransportService.createNewService(Settings.EMPTY,Version.CURRENT,null,null);
    masterService=mock(MasterService.class);
    namedWriteableRegistry=new NamedWriteableRegistry(Collections.emptyList());
    clusterApplier=mock(ClusterApplier.class);
    threadPool=mock(ThreadPool.class);
    clusterSettings=new ClusterSettings(Settings.EMPTY,ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);
  }
  @After public void clearDummyServices() throws IOException {
    IOUtils.close(transportService);
  }
  private DiscoveryModule newModule(  Settings settings,  List<DiscoveryPlugin> plugins){
    return new DiscoveryModule(settings,threadPool,transportService,namedWriteableRegistry,null,masterService,clusterApplier,clusterSettings,plugins,null,createTempDir().toAbsolutePath());
  }
  public void testDefaults(){
    DiscoveryModule module=newModule(Settings.EMPTY,Collections.emptyList());
    assertTrue(module.getDiscovery() instanceof ZenDiscovery);
  }
  public void testLazyConstructionDiscovery(){
    DummyDiscoveryPlugin plugin=() -> Collections.singletonMap("custom",() -> {
      throw new AssertionError("created discovery type which was not selected");
    }
);
    newModule(Settings.EMPTY,Collections.singletonList(plugin));
  }
  public void testRegisterDiscovery(){
    Settings settings=Settings.builder().put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(),"custom").build();
    DummyDiscoveryPlugin plugin=() -> Collections.singletonMap("custom",NoopDiscovery::new);
    DiscoveryModule module=newModule(settings,Collections.singletonList(plugin));
    assertTrue(module.getDiscovery() instanceof NoopDiscovery);
  }
  public void testUnknownDiscovery(){
    Settings settings=Settings.builder().put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(),"dne").build();
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> newModule(settings,Collections.emptyList()));
    assertEquals("Unknown discovery type [dne]",e.getMessage());
  }
  public void testDuplicateDiscovery(){
    DummyDiscoveryPlugin plugin1=() -> Collections.singletonMap("dup",() -> null);
    DummyDiscoveryPlugin plugin2=() -> Collections.singletonMap("dup",() -> null);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> newModule(Settings.EMPTY,Arrays.asList(plugin1,plugin2)));
    assertEquals("Cannot register discovery type [dup] twice",e.getMessage());
  }
  public void testHostsProvider(){
    Settings settings=Settings.builder().put(DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING.getKey(),"custom").build();
    AtomicBoolean created=new AtomicBoolean(false);
    DummyHostsProviderPlugin plugin=() -> Collections.singletonMap("custom",() -> {
      created.set(true);
      return hostsResolver -> Collections.emptyList();
    }
);
    newModule(settings,Collections.singletonList(plugin));
    assertTrue(created.get());
  }
  public void testUnknownHostsProvider(){
    Settings settings=Settings.builder().put(DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING.getKey(),"dne").build();
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> newModule(settings,Collections.emptyList()));
    assertEquals("Unknown zen hosts providers [dne]",e.getMessage());
  }
  public void testDuplicateHostsProvider(){
    DummyHostsProviderPlugin plugin1=() -> Collections.singletonMap("dup",() -> null);
    DummyHostsProviderPlugin plugin2=() -> Collections.singletonMap("dup",() -> null);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> newModule(Settings.EMPTY,Arrays.asList(plugin1,plugin2)));
    assertEquals("Cannot register zen hosts provider [dup] twice",e.getMessage());
  }
  public void testSettingsHostsProvider(){
    DummyHostsProviderPlugin plugin=() -> Collections.singletonMap("settings",() -> null);
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> newModule(Settings.EMPTY,Arrays.asList(plugin)));
    assertEquals("Cannot register zen hosts provider [settings] twice",e.getMessage());
  }
  public void testMultiHostsProvider(){
    AtomicBoolean created1=new AtomicBoolean(false);
    DummyHostsProviderPlugin plugin1=() -> Collections.singletonMap("provider1",() -> {
      created1.set(true);
      return hostsResolver -> Collections.emptyList();
    }
);
    AtomicBoolean created2=new AtomicBoolean(false);
    DummyHostsProviderPlugin plugin2=() -> Collections.singletonMap("provider2",() -> {
      created2.set(true);
      return hostsResolver -> Collections.emptyList();
    }
);
    AtomicBoolean created3=new AtomicBoolean(false);
    DummyHostsProviderPlugin plugin3=() -> Collections.singletonMap("provider3",() -> {
      created3.set(true);
      return hostsResolver -> Collections.emptyList();
    }
);
    Settings settings=Settings.builder().putList(DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING.getKey(),"provider1","provider3").build();
    newModule(settings,Arrays.asList(plugin1,plugin2,plugin3));
    assertTrue(created1.get());
    assertFalse(created2.get());
    assertTrue(created3.get());
  }
  public void testLazyConstructionHostsProvider(){
    DummyHostsProviderPlugin plugin=() -> Collections.singletonMap("custom",() -> {
      throw new AssertionError("created hosts provider which was not selected");
    }
);
    newModule(Settings.EMPTY,Collections.singletonList(plugin));
  }
  public void testJoinValidator(){
    BiConsumer<DiscoveryNode,ClusterState> consumer=(a,b) -> {
    }
;
    DiscoveryModule module=newModule(Settings.EMPTY,Collections.singletonList(new DiscoveryPlugin(){
      @Override public BiConsumer<DiscoveryNode,ClusterState> getJoinValidator(){
        return consumer;
      }
    }
));
    ZenDiscovery discovery=(ZenDiscovery)module.getDiscovery();
    Collection<BiConsumer<DiscoveryNode,ClusterState>> onJoinValidators=discovery.getOnJoinValidators();
    assertEquals(2,onJoinValidators.size());
    assertTrue(onJoinValidators.contains(consumer));
  }
}
