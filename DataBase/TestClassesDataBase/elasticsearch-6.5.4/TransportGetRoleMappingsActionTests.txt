public class TransportGetRoleMappingsActionTests extends ESTestCase {
  private NativeRoleMappingStore store;
  private TransportGetRoleMappingsAction action;
  private AtomicReference<Set<String>> namesRef;
  private List<ExpressionRoleMapping> result;
  @Before public void setupMocks(){
    store=mock(NativeRoleMappingStore.class);
    TransportService transportService=new TransportService(Settings.EMPTY,mock(Transport.class),null,TransportService.NOOP_TRANSPORT_INTERCEPTOR,x -> null,null,Collections.emptySet());
    action=new TransportGetRoleMappingsAction(Settings.EMPTY,mock(ThreadPool.class),mock(ActionFilters.class),mock(IndexNameExpressionResolver.class),transportService,store);
    namesRef=new AtomicReference<>(null);
    result=Collections.emptyList();
    doAnswer(invocation -> {
      Object[] args=invocation.getArguments();
      assert args.length == 2;
      namesRef.set((Set<String>)args[0]);
      ActionListener<List<ExpressionRoleMapping>> listener=(ActionListener)args[1];
      listener.onResponse(result);
      return null;
    }
).when(store).getRoleMappings(any(Set.class),any(ActionListener.class));
  }
  public void testGetSingleRole() throws Exception {
    final PlainActionFuture<GetRoleMappingsResponse> future=new PlainActionFuture<>();
    final GetRoleMappingsRequest request=new GetRoleMappingsRequest();
    request.setNames("everyone");
    final ExpressionRoleMapping mapping=mock(ExpressionRoleMapping.class);
    result=Collections.singletonList(mapping);
    action.doExecute(request,future);
    assertThat(future.get(),notNullValue());
    assertThat(future.get().mappings(),arrayContaining(mapping));
    assertThat(namesRef.get(),containsInAnyOrder("everyone"));
  }
  public void testGetMultipleNamedRoles() throws Exception {
    final PlainActionFuture<GetRoleMappingsResponse> future=new PlainActionFuture<>();
    final GetRoleMappingsRequest request=new GetRoleMappingsRequest();
    request.setNames("admin","engineering","sales","finance");
    final ExpressionRoleMapping mapping1=mock(ExpressionRoleMapping.class);
    final ExpressionRoleMapping mapping2=mock(ExpressionRoleMapping.class);
    final ExpressionRoleMapping mapping3=mock(ExpressionRoleMapping.class);
    result=Arrays.asList(mapping1,mapping2,mapping3);
    action.doExecute(request,future);
    final GetRoleMappingsResponse response=future.get();
    assertThat(response,notNullValue());
    assertThat(response.mappings(),arrayContainingInAnyOrder(mapping1,mapping2,mapping3));
    assertThat(namesRef.get(),containsInAnyOrder("admin","engineering","sales","finance"));
  }
  public void testGetAllRoles() throws Exception {
    final PlainActionFuture<GetRoleMappingsResponse> future=new PlainActionFuture<>();
    final GetRoleMappingsRequest request=new GetRoleMappingsRequest();
    request.setNames(Strings.EMPTY_ARRAY);
    final ExpressionRoleMapping mapping1=mock(ExpressionRoleMapping.class);
    final ExpressionRoleMapping mapping2=mock(ExpressionRoleMapping.class);
    final ExpressionRoleMapping mapping3=mock(ExpressionRoleMapping.class);
    result=Arrays.asList(mapping1,mapping2,mapping3);
    action.doExecute(request,future);
    final GetRoleMappingsResponse response=future.get();
    assertThat(response,notNullValue());
    assertThat(response.mappings(),arrayContainingInAnyOrder(mapping1,mapping2,mapping3));
    assertThat(namesRef.get(),Matchers.nullValue(Set.class));
  }
}
