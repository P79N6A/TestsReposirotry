private class RecoveryActionBlocker implements StubbableTransport.SendRequestBehavior {
  private final boolean dropRequests;
  private final String recoveryActionToBlock;
  private final CountDownLatch requestBlocked;
  RecoveryActionBlocker(  boolean dropRequests,  String recoveryActionToBlock,  CountDownLatch requestBlocked){
    this.dropRequests=dropRequests;
    this.recoveryActionToBlock=recoveryActionToBlock;
    this.requestBlocked=requestBlocked;
  }
  @Override public void sendRequest(  Transport.Connection connection,  long requestId,  String action,  TransportRequest request,  TransportRequestOptions options) throws IOException {
    if (recoveryActionToBlock.equals(action) || requestBlocked.getCount() == 0) {
      logger.info("--> preventing {} request",action);
      requestBlocked.countDown();
      if (dropRequests) {
        return;
      }
      throw new ConnectTransportException(connection.getNode(),"DISCONNECT: prevented " + action + " request");
    }
    connection.sendRequest(requestId,action,request,options);
  }
}
