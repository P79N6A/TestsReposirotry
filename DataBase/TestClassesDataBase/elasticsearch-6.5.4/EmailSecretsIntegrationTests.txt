public class EmailSecretsIntegrationTests extends AbstractWatcherIntegrationTestCase {
  private EmailServer server;
  private Boolean encryptSensitiveData;
  private byte[] encryptionKey;
  @Override public void setUp() throws Exception {
    super.setUp();
    server=EmailServer.localhost(logger);
  }
  @After public void cleanup() throws Exception {
    server.stop();
  }
  @Override protected Settings nodeSettings(  int nodeOrdinal){
    if (encryptSensitiveData == null) {
      encryptSensitiveData=randomBoolean();
      if (encryptSensitiveData) {
        encryptionKey=CryptoServiceTests.generateKey();
      }
    }
    Settings.Builder builder=Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("xpack.notification.email.account.test.smtp.auth",true).put("xpack.notification.email.account.test.smtp.port",server.port()).put("xpack.notification.email.account.test.smtp.host","localhost").put("xpack.watcher.encrypt_sensitive_data",encryptSensitiveData);
    if (encryptSensitiveData) {
      MockSecureSettings secureSettings=new MockSecureSettings();
      secureSettings.setFile(WatcherField.ENCRYPTION_KEY_SETTING.getKey(),encryptionKey);
      builder.setSecureSettings(secureSettings);
    }
    return builder.build();
  }
  public void testEmail() throws Exception {
    WatcherClient watcherClient=watcherClient();
    watcherClient.preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(cron("0 0 0 1 * ? 2020"))).input(simpleInput()).condition(InternalAlwaysCondition.INSTANCE).addAction("_email",ActionBuilders.emailAction(EmailTemplate.builder().from("_from").to("_to").subject("_subject")).setAuthentication(EmailServer.USERNAME,EmailServer.PASSWORD.toCharArray()))).get();
    GetResponse response=client().prepareGet(Watch.INDEX,Watch.DOC_TYPE,"_id").get();
    assertThat(response,notNullValue());
    assertThat(response.getId(),is("_id"));
    Map<String,Object> source=response.getSource();
    Object value=XContentMapValues.extractValue("actions._email.email.password",source);
    assertThat(value,notNullValue());
    if (encryptSensitiveData) {
      assertThat(value,not(is(EmailServer.PASSWORD)));
      MockSecureSettings mockSecureSettings=new MockSecureSettings();
      mockSecureSettings.setFile(WatcherField.ENCRYPTION_KEY_SETTING.getKey(),encryptionKey);
      Settings settings=Settings.builder().setSecureSettings(mockSecureSettings).build();
      CryptoService cryptoService=new CryptoService(settings);
      assertThat(new String(cryptoService.decrypt(((String)value).toCharArray())),is(EmailServer.PASSWORD));
    }
 else {
      assertThat(value,is(EmailServer.PASSWORD));
    }
    GetWatchResponse watchResponse=watcherClient.prepareGetWatch("_id").get();
    assertThat(watchResponse,notNullValue());
    assertThat(watchResponse.getId(),is("_id"));
    XContentSource contentSource=watchResponse.getSource();
    value=contentSource.getValue("actions._email.email.password");
    if (encryptSensitiveData) {
      assertThat(value.toString(),startsWith("::es_encrypted::"));
    }
 else {
      assertThat(value,is("::es_redacted::"));
    }
    stopWatcher();
    startWatcher();
    final CountDownLatch latch=new CountDownLatch(1);
    server.addListener(message -> {
      assertThat(message.getSubject(),is("_subject"));
      latch.countDown();
    }
);
    TriggerEvent triggerEvent=new ScheduleTriggerEvent(new DateTime(DateTimeZone.UTC),new DateTime(DateTimeZone.UTC));
    ExecuteWatchResponse executeResponse=watcherClient.prepareExecuteWatch("_id").setRecordExecution(false).setTriggerEvent(triggerEvent).setActionMode("_all",ActionExecutionMode.FORCE_EXECUTE).get();
    assertThat(executeResponse,notNullValue());
    contentSource=executeResponse.getRecordSource();
    value=contentSource.getValue("result.actions.0.status");
    assertThat(value,is("success"));
    if (!latch.await(5,TimeUnit.SECONDS)) {
      fail("waiting too long for the email to be sent");
    }
  }
}
