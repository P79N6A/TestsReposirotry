public class RankEvalRequestTests extends AbstractWireSerializingTestCase<RankEvalRequest> {
  private static RankEvalPlugin rankEvalPlugin=new RankEvalPlugin();
  @AfterClass public static void releasePluginResources() throws IOException {
    rankEvalPlugin.close();
  }
  @Override protected NamedXContentRegistry xContentRegistry(){
    return new NamedXContentRegistry(rankEvalPlugin.getNamedXContent());
  }
  @Override protected NamedWriteableRegistry getNamedWriteableRegistry(){
    return new NamedWriteableRegistry(rankEvalPlugin.getNamedWriteables());
  }
  @Override protected RankEvalRequest createTestInstance(){
    int numberOfIndices=randomInt(3);
    String[] indices=new String[numberOfIndices];
    for (int i=0; i < numberOfIndices; i++) {
      indices[i]=randomAlphaOfLengthBetween(5,10);
    }
    RankEvalRequest rankEvalRequest=new RankEvalRequest(RankEvalSpecTests.createTestItem(),indices);
    IndicesOptions indicesOptions=IndicesOptions.fromOptions(randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean());
    rankEvalRequest.indicesOptions(indicesOptions);
    return rankEvalRequest;
  }
  @Override protected Reader<RankEvalRequest> instanceReader(){
    return RankEvalRequest::new;
  }
  @Override protected RankEvalRequest mutateInstance(  RankEvalRequest instance) throws IOException {
    RankEvalRequest mutation=copyInstance(instance);
    List<Runnable> mutators=new ArrayList<>();
    mutators.add(() -> mutation.indices(ArrayUtils.concat(instance.indices(),new String[]{randomAlphaOfLength(10)})));
    mutators.add(() -> mutation.indicesOptions(randomValueOtherThan(instance.indicesOptions(),() -> IndicesOptions.fromOptions(randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean()))));
    mutators.add(() -> mutation.setRankEvalSpec(RankEvalSpecTests.mutateTestItem(instance.getRankEvalSpec())));
    randomFrom(mutators).run();
    return mutation;
  }
}
