private class InterceptingRequestHandler<T extends TransportRequest> implements TransportRequestHandler<T> {
  private final TransportRequestHandler<T> requestHandler;
  private final String action;
  InterceptingRequestHandler(  String action,  TransportRequestHandler<T> requestHandler){
    this.requestHandler=requestHandler;
    this.action=action;
  }
  @Override public void messageReceived(  T request,  TransportChannel channel,  Task task) throws Exception {
synchronized (InterceptingTransportService.this) {
      if (actions.contains(action)) {
        List<TransportRequest> requestList=requests.get(action);
        if (requestList == null) {
          requestList=new ArrayList<>();
          requestList.add(request);
          requests.put(action,requestList);
        }
 else {
          requestList.add(request);
        }
      }
    }
    requestHandler.messageReceived(request,channel,task);
  }
  @Override public void messageReceived(  T request,  TransportChannel channel) throws Exception {
    messageReceived(request,channel,null);
  }
}
