public class SearchInputTests extends ESTestCase {
  private ScriptService scriptService;
  private Client client;
  @Before public void setup(){
    Map<String,ScriptEngine> engines=new HashMap<>();
    engines.put(MockMustacheScriptEngine.NAME,new MockMustacheScriptEngine());
    Map<String,ScriptContext<?>> contexts=new HashMap<>();
    contexts.put(Watcher.SCRIPT_TEMPLATE_CONTEXT.name,Watcher.SCRIPT_TEMPLATE_CONTEXT);
    contexts.put(Watcher.SCRIPT_SEARCH_CONTEXT.name,Watcher.SCRIPT_SEARCH_CONTEXT);
    contexts.put(WatcherTransformScript.CONTEXT.name,WatcherTransformScript.CONTEXT);
    scriptService=new ScriptService(Settings.EMPTY,engines,contexts);
    ThreadPool threadPool=mock(ThreadPool.class);
    ThreadContext threadContext=new ThreadContext(Settings.EMPTY);
    when(threadPool.getThreadContext()).thenReturn(threadContext);
    client=mock(Client.class);
    when(client.threadPool()).thenReturn(threadPool);
  }
  public void testExecute() throws Exception {
    ArgumentCaptor<SearchRequest> requestCaptor=ArgumentCaptor.forClass(SearchRequest.class);
    PlainActionFuture<SearchResponse> searchFuture=PlainActionFuture.newFuture();
    SearchResponse searchResponse=new SearchResponse(InternalSearchResponse.empty(),"",1,1,0,1234,ShardSearchFailure.EMPTY_ARRAY,SearchResponse.Clusters.EMPTY);
    searchFuture.onResponse(searchResponse);
    when(client.search(requestCaptor.capture())).thenReturn(searchFuture);
    ArgumentCaptor<Map> headersCaptor=ArgumentCaptor.forClass(Map.class);
    when(client.filterWithHeader(headersCaptor.capture())).thenReturn(client);
    SearchSourceBuilder searchSourceBuilder=searchSource().query(boolQuery().must(matchQuery("event_type","a")));
    WatcherSearchTemplateRequest request=WatcherTestUtils.templateRequest(searchSourceBuilder);
    ExecutableSearchInput searchInput=new ExecutableSearchInput(new SearchInput(request,null,null,null),client,watcherSearchTemplateService(),TimeValue.timeValueMinutes(1));
    WatchExecutionContext ctx=WatcherTestUtils.createWatchExecutionContext();
    SearchInput.Result result=searchInput.execute(ctx,new Payload.Simple());
    assertThat(result.status(),is(Input.Result.Status.SUCCESS));
    SearchRequest searchRequest=requestCaptor.getValue();
    assertThat(searchRequest.searchType(),is(request.getSearchType()));
    assertThat(searchRequest.indicesOptions(),is(request.getIndicesOptions()));
    assertThat(searchRequest.indices(),is(arrayContainingInAnyOrder(request.getIndices())));
    assertThat(headersCaptor.getAllValues(),hasSize(0));
  }
  public void testDifferentSearchType() throws Exception {
    ArgumentCaptor<SearchRequest> requestCaptor=ArgumentCaptor.forClass(SearchRequest.class);
    PlainActionFuture<SearchResponse> searchFuture=PlainActionFuture.newFuture();
    SearchResponse searchResponse=new SearchResponse(InternalSearchResponse.empty(),"",1,1,0,1234,ShardSearchFailure.EMPTY_ARRAY,SearchResponse.Clusters.EMPTY);
    searchFuture.onResponse(searchResponse);
    when(client.search(requestCaptor.capture())).thenReturn(searchFuture);
    SearchSourceBuilder searchSourceBuilder=searchSource().query(boolQuery().must(matchQuery("event_type","a")));
    SearchType searchType=getRandomSupportedSearchType();
    WatcherSearchTemplateRequest request=WatcherTestUtils.templateRequest(searchSourceBuilder,searchType);
    ExecutableSearchInput searchInput=new ExecutableSearchInput(new SearchInput(request,null,null,null),client,watcherSearchTemplateService(),TimeValue.timeValueMinutes(1));
    WatchExecutionContext ctx=WatcherTestUtils.createWatchExecutionContext();
    SearchInput.Result result=searchInput.execute(ctx,new Payload.Simple());
    assertThat(result.status(),is(Input.Result.Status.SUCCESS));
    SearchRequest searchRequest=requestCaptor.getValue();
    assertThat(searchRequest.searchType(),is(request.getSearchType()));
    assertThat(searchRequest.indicesOptions(),is(request.getIndicesOptions()));
    assertThat(searchRequest.indices(),is(arrayContainingInAnyOrder(request.getIndices())));
  }
  public void testParserValid() throws Exception {
    SearchSourceBuilder source=searchSource().query(boolQuery().must(matchQuery("event_type","a")).must(rangeQuery("_timestamp").from("{{ctx.trigger.scheduled_time}}||-30s").to("{{ctx.trigger.triggered_time}}")));
    TimeValue timeout=randomBoolean() ? TimeValue.timeValueSeconds(randomInt(10)) : null;
    XContentBuilder builder=jsonBuilder().value(new SearchInput(WatcherTestUtils.templateRequest(source),null,timeout,null));
    XContentParser parser=createParser(builder);
    parser.nextToken();
    SearchInputFactory factory=new SearchInputFactory(Settings.EMPTY,client,xContentRegistry(),scriptService);
    SearchInput searchInput=factory.parseInput("_id",parser);
    assertEquals(SearchInput.TYPE,searchInput.type());
    assertThat(searchInput.getTimeout(),equalTo(timeout));
  }
  public void testThatEmptyRequestBodyWorks() throws Exception {
    ArgumentCaptor<SearchRequest> requestCaptor=ArgumentCaptor.forClass(SearchRequest.class);
    PlainActionFuture<SearchResponse> searchFuture=PlainActionFuture.newFuture();
    SearchResponse searchResponse=new SearchResponse(InternalSearchResponse.empty(),"",1,1,0,1234,ShardSearchFailure.EMPTY_ARRAY,SearchResponse.Clusters.EMPTY);
    searchFuture.onResponse(searchResponse);
    when(client.search(requestCaptor.capture())).thenReturn(searchFuture);
    try (XContentBuilder builder=jsonBuilder().startObject().startObject("request").startArray("indices").value("foo").endArray().endObject().endObject();XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY,DeprecationHandler.THROW_UNSUPPORTED_OPERATION,BytesReference.bytes(builder).streamInput())){
      parser.nextToken();
      SearchInputFactory factory=new SearchInputFactory(Settings.EMPTY,client,xContentRegistry(),scriptService);
      SearchInput input=factory.parseInput("my-watch",parser);
      assertThat(input.getRequest(),is(not(nullValue())));
      assertThat(input.getRequest().getSearchSource(),is(BytesArray.EMPTY));
      ExecutableSearchInput executableSearchInput=factory.createExecutable(input);
      WatchExecutionContext ctx=WatcherTestUtils.createWatchExecutionContext();
      SearchInput.Result result=executableSearchInput.execute(ctx,Payload.Simple.EMPTY);
      assertThat(result.status(),is(Input.Result.Status.SUCCESS));
      ToXContent.Params params=new ToXContent.MapParams(Collections.singletonMap("pretty","false"));
      assertThat(requestCaptor.getValue().source().toString(params),is("{}"));
    }
   }
  private WatcherSearchTemplateService watcherSearchTemplateService(){
    SearchModule module=new SearchModule(Settings.EMPTY,false,Collections.emptyList());
    return new WatcherSearchTemplateService(Settings.EMPTY,scriptService,new NamedXContentRegistry(module.getNamedXContents()));
  }
}
