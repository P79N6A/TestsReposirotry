public class DateProcessorFactoryTests extends ESTestCase {
  private DateProcessor.Factory factory;
  @Before public void init(){
    factory=new DateProcessor.Factory(TestTemplateService.instance());
  }
  public void testBuildDefaults() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("formats",Collections.singletonList("dd/MM/yyyyy"));
    String processorTag=randomAlphaOfLength(10);
    DateProcessor processor=factory.create(null,processorTag,config);
    assertThat(processor.getTag(),equalTo(processorTag));
    assertThat(processor.getField(),equalTo(sourceField));
    assertThat(processor.getTargetField(),equalTo(DateProcessor.DEFAULT_TARGET_FIELD));
    assertThat(processor.getFormats(),equalTo(Collections.singletonList("dd/MM/yyyyy")));
    assertNull(processor.getLocale());
    assertNull(processor.getTimezone());
  }
  public void testMatchFieldIsMandatory() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String targetField=randomAlphaOfLengthBetween(1,10);
    config.put("target_field",targetField);
    config.put("formats",Collections.singletonList("dd/MM/yyyyy"));
    try {
      factory.create(null,null,config);
      fail("processor creation should have failed");
    }
 catch (    ElasticsearchParseException e) {
      assertThat(e.getMessage(),containsString("[field] required property is missing"));
    }
  }
  public void testMatchFormatsIsMandatory() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    String targetField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("target_field",targetField);
    try {
      factory.create(null,null,config);
      fail("processor creation should have failed");
    }
 catch (    ElasticsearchParseException e) {
      assertThat(e.getMessage(),containsString("[formats] required property is missing"));
    }
  }
  public void testParseLocale() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("formats",Collections.singletonList("dd/MM/yyyyy"));
    Locale locale=randomFrom(Locale.GERMANY,Locale.FRENCH,Locale.ROOT);
    config.put("locale",locale.toLanguageTag());
    DateProcessor processor=factory.create(null,null,config);
    assertThat(processor.getLocale().newInstance(Collections.emptyMap()).execute(),equalTo(locale.toLanguageTag()));
  }
  public void testParseTimezone() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("formats",Collections.singletonList("dd/MM/yyyyy"));
    DateTimeZone timezone=randomDateTimeZone();
    config.put("timezone",timezone.getID());
    DateProcessor processor=factory.create(null,null,config);
    assertThat(processor.getTimezone().newInstance(Collections.emptyMap()).execute(),equalTo(timezone.getID()));
  }
  public void testParseMatchFormats() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("formats",Arrays.asList("dd/MM/yyyy","dd-MM-yyyy"));
    DateProcessor processor=factory.create(null,null,config);
    assertThat(processor.getFormats(),equalTo(Arrays.asList("dd/MM/yyyy","dd-MM-yyyy")));
  }
  public void testParseMatchFormatsFailure() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("formats","dd/MM/yyyy");
    try {
      factory.create(null,null,config);
      fail("processor creation should have failed");
    }
 catch (    ElasticsearchParseException e) {
      assertThat(e.getMessage(),containsString("[formats] property isn't a list, but of type [java.lang.String]"));
    }
  }
  public void testParseTargetField() throws Exception {
    Map<String,Object> config=new HashMap<>();
    String sourceField=randomAlphaOfLengthBetween(1,10);
    String targetField=randomAlphaOfLengthBetween(1,10);
    config.put("field",sourceField);
    config.put("target_field",targetField);
    config.put("formats",Arrays.asList("dd/MM/yyyy","dd-MM-yyyy"));
    DateProcessor processor=factory.create(null,null,config);
    assertThat(processor.getTargetField(),equalTo(targetField));
  }
}
