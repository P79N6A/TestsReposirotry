public class DeflateCompressedXContentTests extends ESTestCase {
  private final Compressor compressor=new DeflateCompressor();
  private void assertEquals(  CompressedXContent s1,  CompressedXContent s2){
    Assert.assertEquals(s1,s2);
    assertArrayEquals(s1.uncompressed(),s2.uncompressed());
    assertEquals(s1.hashCode(),s2.hashCode());
  }
  public void simpleTests() throws IOException {
    String str="---\nf:this is a simple string";
    CompressedXContent cstr=new CompressedXContent(str);
    assertThat(cstr.string(),equalTo(str));
    assertThat(new CompressedXContent(str),equalTo(cstr));
    String str2="---\nf:this is a simple string 2";
    CompressedXContent cstr2=new CompressedXContent(str2);
    assertThat(cstr2.string(),not(equalTo(str)));
    assertThat(new CompressedXContent(str2),not(equalTo(cstr)));
    assertEquals(new CompressedXContent(str2),cstr2);
  }
  public void testRandom() throws IOException {
    Random r=random();
    for (int i=0; i < 1000; i++) {
      String string=TestUtil.randomUnicodeString(r,10000);
      string="---\n" + string;
      CompressedXContent compressedXContent=new CompressedXContent(string);
      assertThat(compressedXContent.string(),equalTo(string));
    }
  }
  public void testDifferentCompressedRepresentation() throws Exception {
    byte[] b="---\nf:abcdefghijabcdefghij".getBytes("UTF-8");
    BytesStreamOutput bout=new BytesStreamOutput();
    StreamOutput out=compressor.streamOutput(bout);
    out.writeBytes(b);
    out.flush();
    out.writeBytes(b);
    out.close();
    final BytesReference b1=bout.bytes();
    bout=new BytesStreamOutput();
    out=compressor.streamOutput(bout);
    out.writeBytes(b);
    out.writeBytes(b);
    out.close();
    final BytesReference b2=bout.bytes();
    assertFalse(b1.equals(b2));
    assertArrayEquals(BytesReference.toBytes(b1),new CompressedXContent(b1).compressed());
    assertArrayEquals(BytesReference.toBytes(b2),new CompressedXContent(b2).compressed());
    assertEquals(new CompressedXContent(b1),new CompressedXContent(b2));
  }
  public void testHashCode() throws IOException {
    assertFalse(new CompressedXContent("{\"a\":\"b\"}").hashCode() == new CompressedXContent("{\"a\":\"c\"}").hashCode());
  }
}
