public class NodeEnvironmentEvilTests extends ESTestCase {
  private static boolean isPosix;
  @BeforeClass public static void checkPosix() throws IOException {
    isPosix=Files.getFileAttributeView(createTempFile(),PosixFileAttributeView.class) != null;
  }
  public void testMissingWritePermission() throws IOException {
    assumeTrue("posix filesystem",isPosix);
    final String[] tempPaths=tmpPaths();
    Path path=PathUtils.get(randomFrom(tempPaths));
    try (PosixPermissionsResetter attr=new PosixPermissionsResetter(path)){
      attr.setPermissions(new HashSet<>(Arrays.asList(PosixFilePermission.OTHERS_READ,PosixFilePermission.GROUP_READ,PosixFilePermission.OWNER_READ)));
      Settings build=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).putList(Environment.PATH_DATA_SETTING.getKey(),tempPaths).build();
      IOException ioException=expectThrows(IOException.class,() -> {
        new NodeEnvironment(build,TestEnvironment.newEnvironment(build),nodeId -> {
        }
);
      }
);
      assertTrue(ioException.getMessage(),ioException.getMessage().startsWith(path.toString()));
    }
   }
  public void testMissingWritePermissionOnIndex() throws IOException {
    assumeTrue("posix filesystem",isPosix);
    final String[] tempPaths=tmpPaths();
    Path path=PathUtils.get(randomFrom(tempPaths));
    Path fooIndex=path.resolve("nodes").resolve("0").resolve(NodeEnvironment.INDICES_FOLDER).resolve("foo");
    Files.createDirectories(fooIndex);
    try (PosixPermissionsResetter attr=new PosixPermissionsResetter(fooIndex)){
      attr.setPermissions(new HashSet<>(Arrays.asList(PosixFilePermission.OTHERS_READ,PosixFilePermission.GROUP_READ,PosixFilePermission.OWNER_READ)));
      Settings build=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).putList(Environment.PATH_DATA_SETTING.getKey(),tempPaths).build();
      IOException ioException=expectThrows(IOException.class,() -> {
        new NodeEnvironment(build,TestEnvironment.newEnvironment(build),nodeId -> {
        }
);
      }
);
      assertTrue(ioException.getMessage(),ioException.getMessage().startsWith("failed to test writes in data directory"));
    }
   }
  public void testMissingWritePermissionOnShard() throws IOException {
    assumeTrue("posix filesystem",isPosix);
    final String[] tempPaths=tmpPaths();
    Path path=PathUtils.get(randomFrom(tempPaths));
    Path fooIndex=path.resolve("nodes").resolve("0").resolve(NodeEnvironment.INDICES_FOLDER).resolve("foo");
    Path fooShard=fooIndex.resolve("0");
    Path fooShardIndex=fooShard.resolve("index");
    Path fooShardTranslog=fooShard.resolve("translog");
    Path fooShardState=fooShard.resolve("_state");
    Path pick=randomFrom(fooShard,fooShardIndex,fooShardTranslog,fooShardState);
    Files.createDirectories(pick);
    try (PosixPermissionsResetter attr=new PosixPermissionsResetter(pick)){
      attr.setPermissions(new HashSet<>(Arrays.asList(PosixFilePermission.OTHERS_READ,PosixFilePermission.GROUP_READ,PosixFilePermission.OWNER_READ)));
      Settings build=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).putList(Environment.PATH_DATA_SETTING.getKey(),tempPaths).build();
      IOException ioException=expectThrows(IOException.class,() -> {
        new NodeEnvironment(build,TestEnvironment.newEnvironment(build),nodeId -> {
        }
);
      }
);
      assertTrue(ioException.getMessage(),ioException.getMessage().startsWith("failed to test writes in data directory"));
    }
   }
}
