/** 
 * this class mimic behaviour of original  {@link Translog}
 */
static class InMemoryTranslog {
  private final Map<Long,Translog.Operation> operations=new HashMap<>();
  void add(  Translog.Operation operation){
    final Translog.Operation old=operations.put(operation.seqNo(),operation);
    assert old == null || old.primaryTerm() <= operation.primaryTerm();
  }
  void trimOperations(  long belowTerm,  long aboveSeqNo){
    for (final Iterator<Map.Entry<Long,Translog.Operation>> it=operations.entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry<Long,Translog.Operation> next=it.next();
      Translog.Operation op=next.getValue();
      boolean drop=op.primaryTerm() < belowTerm && op.seqNo() > aboveSeqNo;
      if (drop) {
        it.remove();
      }
    }
  }
  Collection<Translog.Operation> operations(){
    return operations.values();
  }
}
