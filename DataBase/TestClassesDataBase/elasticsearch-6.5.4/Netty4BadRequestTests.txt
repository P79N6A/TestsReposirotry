public class Netty4BadRequestTests extends ESTestCase {
  private NetworkService networkService;
  private MockBigArrays bigArrays;
  private ThreadPool threadPool;
  @Before public void setup() throws Exception {
    networkService=new NetworkService(Collections.emptyList());
    bigArrays=new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService());
    threadPool=new TestThreadPool("test");
  }
  @After public void shutdown() throws Exception {
    terminate(threadPool);
  }
  public void testBadParameterEncoding() throws Exception {
    final HttpServerTransport.Dispatcher dispatcher=new HttpServerTransport.Dispatcher(){
      @Override public void dispatchRequest(      RestRequest request,      RestChannel channel,      ThreadContext threadContext){
        fail();
      }
      @Override public void dispatchBadRequest(      RestRequest request,      RestChannel channel,      ThreadContext threadContext,      Throwable cause){
        try {
          final Exception e=cause instanceof Exception ? (Exception)cause : new ElasticsearchException(cause);
          channel.sendResponse(new BytesRestResponse(channel,RestStatus.BAD_REQUEST,e));
        }
 catch (        final IOException e) {
          throw new UncheckedIOException(e);
        }
      }
    }
;
    try (HttpServerTransport httpServerTransport=new Netty4HttpServerTransport(Settings.EMPTY,networkService,bigArrays,threadPool,xContentRegistry(),dispatcher)){
      httpServerTransport.start();
      final TransportAddress transportAddress=randomFrom(httpServerTransport.boundAddress().boundAddresses());
      try (Netty4HttpClient nettyHttpClient=new Netty4HttpClient()){
        final Collection<FullHttpResponse> responses=nettyHttpClient.get(transportAddress.address(),"/_cluster/settings?pretty=%");
        try {
          assertThat(responses,hasSize(1));
          assertThat(responses.iterator().next().status().code(),equalTo(400));
          final Collection<String> responseBodies=Netty4HttpClient.returnHttpResponseBodies(responses);
          assertThat(responseBodies,hasSize(1));
          assertThat(responseBodies.iterator().next(),containsString("\"type\":\"bad_parameter_exception\""));
          assertThat(responseBodies.iterator().next(),containsString("\"reason\":\"java.lang.IllegalArgumentException: unterminated escape sequence at end of string: %\""));
        }
  finally {
          responses.forEach(ReferenceCounted::release);
        }
      }
     }
   }
}
