final class Nodes extends HashMap<String,Node> {
  private String masterNodeId=null;
  public Node getMaster(){
    return get(masterNodeId);
  }
  public void setMasterNodeId(  String id){
    if (get(id) == null) {
      throw new IllegalArgumentException("node with id [" + id + "] not found. got:"+ toString());
    }
    masterNodeId=id;
  }
  public void add(  Node node){
    put(node.getId(),node);
  }
  public List<Node> getNewNodes(){
    Version bwcVersion=getBWCVersion();
    return values().stream().filter(n -> n.getVersion().after(bwcVersion)).collect(Collectors.toList());
  }
  public List<Node> getBWCNodes(){
    Version bwcVersion=getBWCVersion();
    return values().stream().filter(n -> n.getVersion().equals(bwcVersion)).collect(Collectors.toList());
  }
  public Version getBWCVersion(){
    if (isEmpty()) {
      throw new IllegalStateException("no nodes available");
    }
    return Version.fromId(values().stream().map(node -> node.getVersion().id).min(Integer::compareTo).get());
  }
  @Override public String toString(){
    return "Nodes{" + "masterNodeId='" + masterNodeId + "'\n"+ values().stream().map(Node::toString).collect(Collectors.joining("\n"))+ '}';
  }
}
