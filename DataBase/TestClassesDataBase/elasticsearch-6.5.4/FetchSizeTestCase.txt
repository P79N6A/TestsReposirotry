/** 
 * Tests for setting  {@link Statement#setFetchSize(int)} and{@link ResultSet#getFetchSize()}.
 */
public class FetchSizeTestCase extends JdbcIntegrationTestCase {
  @Before public void createTestIndex() throws IOException {
    Request request=new Request("PUT","/test");
    XContentBuilder createIndex=JsonXContent.contentBuilder().startObject();
    createIndex.startObject("mappings");
{
      createIndex.startObject("doc");
{
        createIndex.startObject("properties");
{
          createIndex.startObject("nested").field("type","nested");
          createIndex.startObject("properties");
          createIndex.startObject("inner_field").field("type","integer").endObject();
          createIndex.endObject();
          createIndex.endObject();
        }
        createIndex.endObject();
      }
      createIndex.endObject();
    }
    createIndex.endObject().endObject();
    request.setJsonEntity(Strings.toString(createIndex));
    client().performRequest(request);
    request=new Request("PUT","/test/doc/_bulk");
    request.addParameter("refresh","true");
    StringBuilder bulk=new StringBuilder();
    StringBuilder bulkLine;
    for (int i=0; i < 20; i++) {
      bulk.append("{\"index\":{}}\n");
      bulkLine=new StringBuilder("{\"test_field\":" + i);
      bulkLine.append(", \"nested\":[");
      for (int j=0; j <= i % 5; j++) {
        bulkLine.append("{\"inner_field\":" + j + "}"+ ((j == i % 5) ? "" : ","));
      }
      bulkLine.append("]");
      bulk.append(bulkLine).append("}\n");
    }
    request.setJsonEntity(bulk.toString());
    client().performRequest(request);
  }
  /** 
 * Test for  {@code SELECT} that is implemented as a scroll query.In this case the fetch size should be entirely respected.
 */
  public void testScroll() throws SQLException {
    try (Connection c=esJdbc();Statement s=c.createStatement()){
      s.setFetchSize(4);
      try (ResultSet rs=s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")){
        for (int i=0; i < 20; i++) {
          assertEquals(4,rs.getFetchSize());
          assertTrue("No more entries left after " + i,rs.next());
          assertEquals(i,rs.getInt(1));
        }
        assertFalse(rs.next());
      }
     }
   }
  /** 
 * Test for  {@code SELECT} that is implemented as a scroll query.In this test we don't retrieve all records and rely on close() to clean the cursor
 */
  public void testIncompleteScroll() throws Exception {
    try (Connection c=esJdbc();Statement s=c.createStatement()){
      s.setFetchSize(4);
      try (ResultSet rs=s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")){
        for (int i=0; i < 10; i++) {
          assertEquals(4,rs.getFetchSize());
          assertTrue("No more entries left after " + i,rs.next());
          assertEquals(i,rs.getInt(1));
        }
        assertTrue(rs.next());
      }
     }
     assertNoSearchContexts();
  }
  /** 
 * Test for  {@code SELECT} that is implemented as an aggregation.
 */
  public void testAggregation() throws SQLException {
    try (Connection c=esJdbc();Statement s=c.createStatement()){
      s.setFetchSize(4);
      try (ResultSet rs=s.executeQuery("SELECT test_field, COUNT(*) FROM test GROUP BY test_field")){
        for (int i=0; i < 20; i++) {
          assertEquals(4,rs.getFetchSize());
          assertTrue("No more entries left at " + i,rs.next());
          assertEquals(i,rs.getInt(1));
          assertEquals("Incorrect count returned",1,rs.getInt(2));
        }
        assertFalse(rs.next());
      }
     }
   }
  /** 
 * Test for nested documents.
 */
  public void testNestedDocuments() throws Exception {
    try (Connection c=esJdbc();Statement s=c.createStatement()){
      s.setFetchSize(5);
      try (ResultSet rs=s.executeQuery("SELECT test_field, nested.* FROM test ORDER BY test_field ASC")){
        assertTrue("Empty result set!",rs.next());
        for (int i=0; i < 20; i++) {
          assertEquals(15,rs.getFetchSize());
          assertNestedDocuments(rs,i);
        }
        assertFalse(rs.next());
      }
     }
     assertNoSearchContexts();
  }
  private void assertNestedDocuments(  ResultSet rs,  int i) throws SQLException {
    for (int j=0; j <= i % 5; j++) {
      assertEquals(i,rs.getInt(1));
      assertEquals(j,rs.getInt(2));
      assertTrue("No more entries left after row " + rs.getRow(),(i + j == 23 || rs.next()));
    }
  }
}
