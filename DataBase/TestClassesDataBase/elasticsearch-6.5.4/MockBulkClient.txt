private class MockBulkClient extends NoOpClient {
  private int numberOfCallsToFail;
  private MockBulkClient(  String testName,  int numberOfCallsToFail){
    super(testName);
    this.numberOfCallsToFail=numberOfCallsToFail;
  }
  @Override public ActionFuture<BulkResponse> bulk(  BulkRequest request){
    PlainActionFuture<BulkResponse> responseFuture=new PlainActionFuture<>();
    bulk(request,responseFuture);
    return responseFuture;
  }
  @Override public void bulk(  BulkRequest request,  ActionListener<BulkResponse> listener){
    if (false == expectedHeaders.equals(threadPool().getThreadContext().getHeaders())) {
      listener.onFailure(new RuntimeException("Expected " + expectedHeaders + " but got "+ threadPool().getThreadContext().getHeaders()));
      return;
    }
    boolean shouldFail=numberOfCallsToFail > 0;
    numberOfCallsToFail--;
    BulkItemResponse[] itemResponses=new BulkItemResponse[request.requests().size()];
    int itemToFail=randomInt(request.requests().size() - 1);
    for (int idx=0; idx < request.requests().size(); idx++) {
      if (shouldFail && (randomBoolean() || idx == itemToFail)) {
        itemResponses[idx]=failedResponse();
      }
 else {
        itemResponses[idx]=successfulResponse();
      }
    }
    listener.onResponse(new BulkResponse(itemResponses,1000L));
  }
  private BulkItemResponse successfulResponse(){
    return new BulkItemResponse(1,OpType.DELETE,new DeleteResponse());
  }
  private BulkItemResponse failedResponse(){
    return new BulkItemResponse(1,OpType.INDEX,new BulkItemResponse.Failure("test","test","1",new EsRejectedExecutionException("pool full")));
  }
}
