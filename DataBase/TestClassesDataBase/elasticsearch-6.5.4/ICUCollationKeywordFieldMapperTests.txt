public class ICUCollationKeywordFieldMapperTests extends ESSingleNodeTestCase {
  private static final String FIELD_TYPE="icu_collation_keyword";
  @Override protected Collection<Class<? extends Plugin>> getPlugins(){
    return Collections.singletonList(AnalysisICUPlugin.class);
  }
  private IndexService indexService;
  private DocumentMapperParser parser;
  @Before public void setup(){
    indexService=createIndex("test");
    parser=indexService.mapperService().documentMapperParser();
  }
  public void testDefaults() throws Exception {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    Collator collator=Collator.getInstance(ULocale.ROOT);
    RawCollationKey key=collator.getRawCollationKey("1234",null);
    BytesRef expected=new BytesRef(key.bytes,0,key.size);
    assertEquals(expected,fields[0].binaryValue());
    IndexableFieldType fieldType=fields[0].fieldType();
    assertThat(fieldType.omitNorms(),equalTo(true));
    assertFalse(fieldType.tokenized());
    assertFalse(fieldType.stored());
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS));
    assertThat(fieldType.storeTermVectors(),equalTo(false));
    assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
    assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
    assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
    assertEquals(DocValuesType.NONE,fieldType.docValuesType());
    assertEquals(expected,fields[1].binaryValue());
    fieldType=fields[1].fieldType();
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE));
    assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType());
  }
  public void testNullValue() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()),XContentType.JSON));
    assertArrayEquals(new IndexableField[0],doc.rootDoc().getFields("field"));
    mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("null_value","1234").endObject().endObject().endObject().endObject());
    mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(0,fields.length);
    doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()),XContentType.JSON));
    Collator collator=Collator.getInstance(ULocale.ROOT);
    RawCollationKey key=collator.getRawCollationKey("1234",null);
    BytesRef expected=new BytesRef(key.bytes,0,key.size);
    fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    assertEquals(expected,fields[0].binaryValue());
  }
  public void testEnableStore() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("store",true).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    assertTrue(fields[0].fieldType().stored());
  }
  public void testDisableIndex() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("index",false).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(1,fields.length);
    assertEquals(IndexOptions.NONE,fields[0].fieldType().indexOptions());
    assertEquals(DocValuesType.SORTED_SET,fields[0].fieldType().docValuesType());
  }
  public void testDisableDocValues() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("doc_values",false).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(1,fields.length);
    assertEquals(DocValuesType.NONE,fields[0].fieldType().docValuesType());
  }
  public void testMultipleValues() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field",Arrays.asList("1234","5678")).endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(4,fields.length);
    Collator collator=Collator.getInstance(ULocale.ROOT);
    RawCollationKey key=collator.getRawCollationKey("1234",null);
    BytesRef expected=new BytesRef(key.bytes,0,key.size);
    assertEquals(expected,fields[0].binaryValue());
    IndexableFieldType fieldType=fields[0].fieldType();
    assertThat(fieldType.omitNorms(),equalTo(true));
    assertFalse(fieldType.tokenized());
    assertFalse(fieldType.stored());
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS));
    assertThat(fieldType.storeTermVectors(),equalTo(false));
    assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
    assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
    assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
    assertEquals(DocValuesType.NONE,fieldType.docValuesType());
    assertEquals(expected,fields[1].binaryValue());
    fieldType=fields[1].fieldType();
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE));
    assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType());
    collator=Collator.getInstance(ULocale.ROOT);
    key=collator.getRawCollationKey("5678",null);
    expected=new BytesRef(key.bytes,0,key.size);
    assertEquals(expected,fields[2].binaryValue());
    fieldType=fields[2].fieldType();
    assertThat(fieldType.omitNorms(),equalTo(true));
    assertFalse(fieldType.tokenized());
    assertFalse(fieldType.stored());
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS));
    assertThat(fieldType.storeTermVectors(),equalTo(false));
    assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
    assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
    assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
    assertEquals(DocValuesType.NONE,fieldType.docValuesType());
    assertEquals(expected,fields[3].binaryValue());
    fieldType=fields[3].fieldType();
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE));
    assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType());
  }
  public void testIndexOptions() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("index_options","freqs").endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    assertEquals(IndexOptions.DOCS_AND_FREQS,fields[0].fieldType().indexOptions());
    for (    String indexOptions : Arrays.asList("positions","offsets")) {
      final String mapping2=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("index_options",indexOptions).endObject().endObject().endObject().endObject());
      IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> parser.parse("type",new CompressedXContent(mapping2)));
      assertEquals("The [" + FIELD_TYPE + "] field does not support positions, got [index_options]="+ indexOptions,e.getMessage());
    }
  }
  public void testEnableNorms() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("norms",true).endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","1234").endObject()),XContentType.JSON));
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    assertFalse(fields[0].fieldType().omitNorms());
  }
  public void testCollator() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("language","tr").field("strength","primary").endObject().endObject().endObject().endObject());
    DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
    assertEquals(mapping,mapper.mappingSource().toString());
    ParsedDocument doc=mapper.parse(SourceToParse.source("test","type","1",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field","I WİLL USE TURKİSH CASING").endObject()),XContentType.JSON));
    Collator collator=Collator.getInstance(new ULocale("tr"));
    collator.setStrength(Collator.PRIMARY);
    RawCollationKey key=collator.getRawCollationKey("ı will use turkish casıng",null);
    BytesRef expected=new BytesRef(key.bytes,0,key.size);
    IndexableField[] fields=doc.rootDoc().getFields("field");
    assertEquals(2,fields.length);
    assertEquals(expected,fields[0].binaryValue());
    IndexableFieldType fieldType=fields[0].fieldType();
    assertThat(fieldType.omitNorms(),equalTo(true));
    assertFalse(fieldType.tokenized());
    assertFalse(fieldType.stored());
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.DOCS));
    assertThat(fieldType.storeTermVectors(),equalTo(false));
    assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
    assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
    assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
    assertEquals(DocValuesType.NONE,fieldType.docValuesType());
    assertEquals(expected,fields[1].binaryValue());
    fieldType=fields[1].fieldType();
    assertThat(fieldType.indexOptions(),equalTo(IndexOptions.NONE));
    assertEquals(DocValuesType.SORTED_SET,fieldType.docValuesType());
  }
  public void testUpdateCollator() throws IOException {
    String mapping=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("language","tr").field("strength","primary").endObject().endObject().endObject().endObject());
    indexService.mapperService().merge("type",new CompressedXContent(mapping),MergeReason.MAPPING_UPDATE,randomBoolean());
    String mapping2=Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type",FIELD_TYPE).field("language","en").endObject().endObject().endObject().endObject());
    IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> indexService.mapperService().merge("type",new CompressedXContent(mapping2),MergeReason.MAPPING_UPDATE,randomBoolean()));
    assertEquals("Can't merge because of conflicts: [Cannot update language setting for [" + FIELD_TYPE + "], Cannot update strength setting for ["+ FIELD_TYPE+ "]]",e.getMessage());
  }
}
