public class EmailMessageIdTests extends ESTestCase {
  private EmailServer server;
  private TextTemplateEngine textTemplateEngine=new MockTextTemplateEngine();
  private HtmlSanitizer htmlSanitizer=new HtmlSanitizer(Settings.EMPTY);
  private EmailService emailService;
  private EmailAction emailAction;
  @Before public void startSmtpServer(){
    server=EmailServer.localhost(logger);
    Settings settings=Settings.builder().put("xpack.notification.email.account.test.smtp.auth",true).put("xpack.notification.email.account.test.smtp.user",EmailServer.USERNAME).put("xpack.notification.email.account.test.smtp.password",EmailServer.PASSWORD).put("xpack.notification.email.account.test.smtp.port",server.port()).put("xpack.notification.email.account.test.smtp.host","localhost").build();
    Set<Setting<?>> registeredSettings=new HashSet<>(ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);
    registeredSettings.addAll(EmailService.getSettings());
    ClusterSettings clusterSettings=new ClusterSettings(settings,registeredSettings);
    emailService=new EmailService(settings,null,clusterSettings);
    EmailTemplate emailTemplate=EmailTemplate.builder().from("from@example.org").to("to@example.org").subject("subject").textBody("body").build();
    emailAction=new EmailAction(emailTemplate,null,null,null,null,null);
  }
  @After public void stopSmtpServer(){
    server.stop();
  }
  public void testThatMessageIdIsUnique() throws Exception {
    List<MimeMessage> messages=new ArrayList<>();
    server.addListener(messages::add);
    ExecutableEmailAction firstEmailAction=new ExecutableEmailAction(emailAction,logger,emailService,textTemplateEngine,htmlSanitizer,Collections.emptyMap());
    ExecutableEmailAction secondEmailAction=new ExecutableEmailAction(emailAction,logger,emailService,textTemplateEngine,htmlSanitizer,Collections.emptyMap());
    WatchExecutionContext ctx=WatcherTestUtils.createWatchExecutionContext();
    firstEmailAction.execute("my_first_action_id",ctx,Payload.EMPTY);
    secondEmailAction.execute("my_second_action_id",ctx,Payload.EMPTY);
    assertThat(messages,hasSize(2));
    Set<String> messageIds=new HashSet<>();
    for (    MimeMessage message : messages) {
      messageIds.add(message.getMessageID());
    }
    assertThat(messageIds,hasSize(2));
  }
}
