/** 
 * Documentation for Licensing APIs in the high level java client. Code wrapped in  {@code tag} and {@code end} tags is included in the docs.
 */
public class LicensingDocumentationIT extends ESRestHighLevelClientTestCase {
  @BeforeClass public static void checkForSnapshot(){
    assumeTrue("Trial license used to rollback is only valid when tested against snapshot/test builds",Build.CURRENT.isSnapshot());
  }
  @After public void rollbackToTrial() throws IOException {
    putTrialLicense();
  }
  public void testLicense() throws Exception {
    RestHighLevelClient client=highLevelClient();
    String license="{\"license\": {\"uid\":\"893361dc-9749-4997-93cb-802e3d7fa4a8\",\"type\":\"gold\"," + "\"issue_date_in_millis\":1411948800000,\"expiry_date_in_millis\":1914278399999,\"max_nodes\":1,\"issued_to\":\"issued_to\"," + "\"issuer\":\"issuer\",\"signature\":\"AAAAAgAAAA3U8+YmnvwC+CWsV/mRAAABmC9ZN0hjZDBGYnVyRXpCOW5Bb3FjZDAxOWpSbTVoMVZwUzRxVk1PSm"+ "kxakxZdW5IMlhlTHNoN1N2MXMvRFk4d3JTZEx3R3RRZ0pzU3lobWJKZnQvSEFva0ppTHBkWkprZWZSQi9iNmRQNkw1SlpLN0lDalZCS095MXRGN1lIZlpYcVVTTn"+ "FrcTE2dzhJZmZrdFQrN3JQeGwxb0U0MXZ0dDJHSERiZTVLOHNzSDByWnpoZEphZHBEZjUrTVBxRENNSXNsWWJjZllaODdzVmEzUjNiWktNWGM5TUhQV2plaUo4Q1"+ "JOUml4MXNuL0pSOEhQaVB2azhmUk9QVzhFeTFoM1Q0RnJXSG53MWk2K055c28zSmRnVkF1b2JSQkFLV2VXUmVHNDZ2R3o2VE1qbVNQS2lxOHN5bUErZlNIWkZSVm"+ "ZIWEtaSU9wTTJENDVvT1NCYklacUYyK2FwRW9xa0t6dldMbmMzSGtQc3FWOTgzZ3ZUcXMvQkt2RUZwMFJnZzlvL2d2bDRWUzh6UG5pdENGWFRreXNKNkE9PQAAAQ"+ "Be8GfzDm6T537Iuuvjetb3xK5dvg0K5NQapv+rczWcQFxgCuzbF8plkgetP1aAGZP4uRESDQPMlOCsx4d0UqqAm9f7GbBQ3l93P+PogInPFeEH9NvOmaAQovmxVM"+ "9SE6DsDqlX4cXSO+bgWpXPTd2LmpoQc1fXd6BZ8GeuyYpVHVKp9hVU0tAYjw6HzYOE7+zuO1oJYOxElqy66AnIfkvHrvni+flym3tE7tDTgsDRaz7W3iBhaqiSnt"+ "EqabEkvHdPHQdSR99XGaEvnHO1paK01/35iZF6OXHsF7CCj+558GRXiVxzueOe7TsGSSt8g7YjZwV9bRCyU7oB4B/nidgI\"}}";
{
      PutLicenseRequest request=new PutLicenseRequest();
      request.setLicenseDefinition(license);
      request.setAcknowledge(false);
      PutLicenseResponse response=client.license().putLicense(request,RequestOptions.DEFAULT);
      LicensesStatus status=response.status();
      assertEquals(status,LicensesStatus.VALID);
      boolean acknowledged=response.isAcknowledged();
      String acknowledgeHeader=response.acknowledgeHeader();
      Map<String,String[]> acknowledgeMessages=response.acknowledgeMessages();
      assertFalse(acknowledged);
      assertThat(acknowledgeHeader,startsWith("This license update requires acknowledgement."));
      assertThat(acknowledgeMessages.keySet(),not(hasSize(0)));
    }
{
      PutLicenseRequest request=new PutLicenseRequest();
      ActionListener<PutLicenseResponse> listener=new ActionListener<PutLicenseResponse>(){
        @Override public void onResponse(        PutLicenseResponse putLicenseResponse){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.license().putLicenseAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
    if (Booleans.isTrue("true")) {
      return;
    }
{
      DeleteLicenseRequest request=new DeleteLicenseRequest();
      AcknowledgedResponse response=client.license().deleteLicense(request,RequestOptions.DEFAULT);
      boolean acknowledged=response.isAcknowledged();
      assertTrue(acknowledged);
    }
{
      DeleteLicenseRequest request=new DeleteLicenseRequest();
      ActionListener<AcknowledgedResponse> listener=new ActionListener<AcknowledgedResponse>(){
        @Override public void onResponse(        AcknowledgedResponse deleteLicenseResponse){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.license().deleteLicenseAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
  }
  public void testGetLicense() throws Exception {
    RestHighLevelClient client=highLevelClient();
{
      GetLicenseRequest request=new GetLicenseRequest();
      GetLicenseResponse response=client.license().getLicense(request,RequestOptions.DEFAULT);
      String currentLicense=response.getLicenseDefinition();
      assertThat(currentLicense,containsString("trial"));
      assertThat(currentLicense,containsString("client_rest-high-level_integTestCluster"));
    }
{
      GetLicenseRequest request=new GetLicenseRequest();
      ActionListener<GetLicenseResponse> listener=new ActionListener<GetLicenseResponse>(){
        @Override public void onResponse(        GetLicenseResponse indexResponse){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.license().getLicenseAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
{
      GetLicenseRequest request=new GetLicenseRequest();
      RequestOptions.Builder builder=RequestOptions.DEFAULT.toBuilder();
      builder.addHeader("Accept",randomFrom("application/smile","application/cbor"));
      RequestOptions options=builder.build();
      GetLicenseResponse response=client.license().getLicense(request,options);
      String currentLicense=response.getLicenseDefinition();
      assertThat(currentLicense,startsWith("{"));
      assertThat(currentLicense,containsString("trial"));
      assertThat(currentLicense,containsString("client_rest-high-level_integTestCluster"));
      assertThat(currentLicense,endsWith("}"));
    }
  }
  public void testStartTrial() throws Exception {
    RestHighLevelClient client=highLevelClient();
{
      StartTrialRequest request=new StartTrialRequest(true);
      StartTrialResponse response=client.license().startTrial(request,RequestOptions.DEFAULT);
      boolean acknowledged=response.isAcknowledged();
      boolean trialWasStarted=response.isTrialWasStarted();
      String licenseType=response.getLicenseType();
      String errorMessage=response.getErrorMessage();
      String acknowledgeHeader=response.getAcknowledgeHeader();
      Map<String,String[]> acknowledgeMessages=response.getAcknowledgeMessages();
      assertTrue(acknowledged);
      assertFalse(trialWasStarted);
      assertThat(licenseType,nullValue());
      assertThat(errorMessage,is("Operation failed: Trial was already activated."));
      assertThat(acknowledgeHeader,nullValue());
      assertThat(acknowledgeMessages,nullValue());
    }
{
      StartTrialRequest request=new StartTrialRequest();
      ActionListener<StartTrialResponse> listener=new ActionListener<StartTrialResponse>(){
        @Override public void onResponse(        StartTrialResponse response){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.license().startTrialAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
  }
  public void testPostStartBasic() throws Exception {
    RestHighLevelClient client=highLevelClient();
{
      StartBasicRequest request=new StartBasicRequest();
      StartBasicResponse response=client.license().startBasic(request,RequestOptions.DEFAULT);
      boolean acknowledged=response.isAcknowledged();
      boolean basicStarted=response.isBasicStarted();
      String errorMessage=response.getErrorMessage();
      String acknowledgeMessage=response.getAcknowledgeMessage();
      Map<String,String[]> acknowledgeMessages=response.getAcknowledgeMessages();
    }
{
      StartBasicRequest request=new StartBasicRequest();
      ActionListener<StartBasicResponse> listener=new ActionListener<StartBasicResponse>(){
        @Override public void onResponse(        StartBasicResponse indexResponse){
        }
        @Override public void onFailure(        Exception e){
        }
      }
;
      final CountDownLatch latch=new CountDownLatch(1);
      listener=new LatchedActionListener<>(listener,latch);
      client.license().startBasicAsync(request,RequestOptions.DEFAULT,listener);
      assertTrue(latch.await(30L,TimeUnit.SECONDS));
    }
  }
}
