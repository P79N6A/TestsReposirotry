/** 
 * This test checks, if an HTTP look-alike request (starting with an HTTP method and a space) actually returns text response instead of just dropping the connection
 */
public class Netty4SizeHeaderFrameDecoderTests extends ESTestCase {
  private final Settings settings=Settings.builder().put("node.name","NettySizeHeaderFrameDecoderTests").put(TcpTransport.BIND_HOST.getKey(),"127.0.0.1").put(TcpTransport.PORT.getKey(),"0").build();
  private ThreadPool threadPool;
  private Netty4Transport nettyTransport;
  private int port;
  private InetAddress host;
  @Before public void startThreadPool(){
    threadPool=new ThreadPool(settings);
    NetworkService networkService=new NetworkService(Collections.emptyList());
    BigArrays bigArrays=new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY),new NoneCircuitBreakerService());
    nettyTransport=new Netty4Transport(settings,threadPool,networkService,bigArrays,new NamedWriteableRegistry(Collections.emptyList()),new NoneCircuitBreakerService());
    nettyTransport.start();
    TransportAddress[] boundAddresses=nettyTransport.boundAddress().boundAddresses();
    TransportAddress transportAddress=(TransportAddress)randomFrom(boundAddresses);
    port=transportAddress.address().getPort();
    host=transportAddress.address().getAddress();
  }
  @After public void terminateThreadPool() throws InterruptedException {
    nettyTransport.stop();
    terminate(threadPool);
    threadPool=null;
  }
  public void testThatTextMessageIsReturnedOnHTTPLikeRequest() throws Exception {
    String randomMethod=randomFrom("GET","POST","PUT","DELETE","HEAD","OPTIONS","PATCH");
    String data=randomMethod + " / HTTP/1.1";
    try (Socket socket=new MockSocket(host,port)){
      socket.getOutputStream().write(data.getBytes(StandardCharsets.UTF_8));
      socket.getOutputStream().flush();
      try (BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),StandardCharsets.UTF_8))){
        assertThat(reader.readLine(),is("This is not an HTTP port"));
      }
     }
   }
  public void testThatNothingIsReturnedForOtherInvalidPackets() throws Exception {
    try (Socket socket=new MockSocket(host,port)){
      socket.getOutputStream().write("FOOBAR".getBytes(StandardCharsets.UTF_8));
      socket.getOutputStream().flush();
      assertThat(socket.getInputStream().read(),is(-1));
    }
   }
}
