public class TransportPreviewDatafeedActionTests extends ESTestCase {
  private DataExtractor dataExtractor;
  private ActionListener<PreviewDatafeedAction.Response> actionListener;
  private String capturedResponse;
  private Exception capturedFailure;
  @Before public void setUpTests(){
    dataExtractor=mock(DataExtractor.class);
    actionListener=mock(ActionListener.class);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocationOnMock) throws Throwable {
        PreviewDatafeedAction.Response response=(PreviewDatafeedAction.Response)invocationOnMock.getArguments()[0];
        capturedResponse=response.toString();
        return null;
      }
    }
).when(actionListener).onResponse(any());
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocationOnMock) throws Throwable {
        capturedFailure=(Exception)invocationOnMock.getArguments()[0];
        return null;
      }
    }
).when(actionListener).onFailure(any());
  }
  public void testBuildPreviewDatafeed_GivenNoAggregations(){
    DatafeedConfig.Builder datafeed=new DatafeedConfig.Builder("no_aggs_feed","job_foo");
    datafeed.setIndices(Collections.singletonList("my_index"));
    datafeed.setChunkingConfig(ChunkingConfig.newManual(TimeValue.timeValueHours(1)));
    DatafeedConfig previewDatafeed=TransportPreviewDatafeedAction.buildPreviewDatafeed(datafeed.build()).build();
    assertThat(previewDatafeed.getChunkingConfig(),equalTo(ChunkingConfig.newAuto()));
  }
  public void testBuildPreviewDatafeed_GivenAggregations(){
    DatafeedConfig.Builder datafeed=new DatafeedConfig.Builder("no_aggs_feed","job_foo");
    datafeed.setIndices(Collections.singletonList("my_index"));
    MaxAggregationBuilder maxTime=AggregationBuilders.max("time").field("time");
    datafeed.setAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.histogram("time").interval(300000).subAggregation(maxTime).field("time")));
    datafeed.setChunkingConfig(ChunkingConfig.newManual(TimeValue.timeValueHours(1)));
    DatafeedConfig previewDatafeed=TransportPreviewDatafeedAction.buildPreviewDatafeed(datafeed.build()).build();
    assertThat(previewDatafeed.getChunkingConfig(),not(equalTo(ChunkingConfig.newAuto())));
    assertThat(previewDatafeed.getChunkingConfig(),equalTo(datafeed.build().getChunkingConfig()));
  }
  public void testPreviewDatafed_GivenEmptyStream() throws IOException {
    when(dataExtractor.next()).thenReturn(Optional.empty());
    TransportPreviewDatafeedAction.previewDatafeed(dataExtractor,actionListener);
    assertThat(capturedResponse,equalTo("[]"));
    assertThat(capturedFailure,is(nullValue()));
    verify(dataExtractor).cancel();
  }
  public void testPreviewDatafed_GivenNonEmptyStream() throws IOException {
    String streamAsString="{\"a\":1, \"b\":2} {\"c\":3, \"d\":4}\n{\"e\":5, \"f\":6}";
    InputStream stream=new ByteArrayInputStream(streamAsString.getBytes(StandardCharsets.UTF_8));
    when(dataExtractor.next()).thenReturn(Optional.of(stream));
    TransportPreviewDatafeedAction.previewDatafeed(dataExtractor,actionListener);
    assertThat(capturedResponse,equalTo("[{\"a\":1, \"b\":2},{\"c\":3, \"d\":4},{\"e\":5, \"f\":6}]"));
    assertThat(capturedFailure,is(nullValue()));
    verify(dataExtractor).cancel();
  }
  public void testPreviewDatafed_GivenFailure() throws IOException {
    doThrow(new RuntimeException("failed")).when(dataExtractor).next();
    TransportPreviewDatafeedAction.previewDatafeed(dataExtractor,actionListener);
    assertThat(capturedResponse,is(nullValue()));
    assertThat(capturedFailure.getMessage(),equalTo("failed"));
    verify(dataExtractor).cancel();
  }
}
