@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class) public abstract class DebPreservationTestCase extends PackagingTestCase {
  private static Installation installation;
  protected abstract Distribution distribution();
  @BeforeClass public static void cleanup(){
    installation=null;
    cleanEverything();
  }
  @Before public void onlyCompatibleDistributions(){
    assumeTrue("only dpkg platforms",isDPKG());
    assumeTrue("only compatible distributions",distribution().packaging.compatible);
  }
  public void test10Install(){
    assertRemoved(distribution());
    installation=install(distribution());
    assertInstalled(distribution());
    verifyPackageInstallation(installation,distribution());
  }
  public void test20Remove(){
    assumeThat(installation,is(notNullValue()));
    remove(distribution());
    assertPathsExist(installation.config,installation.config("elasticsearch.yml"),installation.config("jvm.options"),installation.config("log4j2.properties"));
    if (distribution().isDefault()) {
      assertPathsExist(installation.config,installation.config("role_mapping.yml"),installation.config("roles.yml"),installation.config("users"),installation.config("users_roles"));
    }
    assertPathsDontExist(installation.config("elasticsearch.keystore"),installation.config(".elasticsearch.keystore.initial_md5sum"));
    assertPathsDontExist(Paths.get("/usr/share/doc/" + distribution().flavor.name),Paths.get("/usr/share/doc/" + distribution().flavor.name + "/copyright"));
    assertTrue(Files.exists(SYSVINIT_SCRIPT));
    assertTrue(Files.exists(installation.envFile));
  }
  public void test30Purge(){
    assumeThat(installation,is(notNullValue()));
    final Shell sh=new Shell();
    sh.run("dpkg --purge " + distribution().flavor.name);
    assertRemoved(distribution());
    assertPathsDontExist(installation.config,installation.envFile,SYSVINIT_SCRIPT);
    assertThat(packageStatus(distribution()).exitCode,is(1));
  }
}
