public class UpdateRequestTests extends ESTestCase {
  private UpdateHelper updateHelper;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    final Settings baseSettings=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toString()).build();
    final Map<String,Function<Map<String,Object>,Object>> scripts=new HashMap<>();
    scripts.put("ctx._source.update_timestamp = ctx._now",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      @SuppressWarnings("unchecked") final Map<String,Object> source=(Map<String,Object>)ctx.get("_source");
      source.put("update_timestamp",ctx.get("_now"));
      return null;
    }
);
    scripts.put("ctx._source.body = \"foo\"",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      @SuppressWarnings("unchecked") final Map<String,Object> source=(Map<String,Object>)ctx.get("_source");
      source.put("body","foo");
      return null;
    }
);
    scripts.put("ctx._timestamp = ctx._now",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      ctx.put("_timestamp",ctx.get("_now"));
      return null;
    }
);
    scripts.put("ctx.op = delete",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      ctx.put("op","delete");
      return null;
    }
);
    scripts.put("ctx.op = bad",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      ctx.put("op","bad");
      return null;
    }
);
    scripts.put("ctx.op = none",vars -> {
      @SuppressWarnings("unchecked") final Map<String,Object> ctx=(Map<String,Object>)vars.get("ctx");
      ctx.put("op","none");
      return null;
    }
);
    scripts.put("return",vars -> null);
    final MockScriptEngine engine=new MockScriptEngine("mock",scripts,Collections.emptyMap());
    Map<String,ScriptEngine> engines=Collections.singletonMap(engine.getType(),engine);
    ScriptService scriptService=new ScriptService(baseSettings,engines,ScriptModule.CORE_CONTEXTS);
    final Settings settings=settings(Version.CURRENT).build();
    updateHelper=new UpdateHelper(settings,scriptService);
  }
  public void testFromXContent() throws Exception {
    UpdateRequest request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().field("script","script1").endObject()));
    Script script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    Map<String,Object> params=script.getParams();
    assertThat(params,equalTo(emptyMap()));
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("script").field("source","script1").endObject().endObject()));
    script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    params=script.getParams();
    assertThat(params,equalTo(emptyMap()));
    request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("script").field("source","script1").startObject("params").field("param1","value1").endObject().endObject().endObject()));
    script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    params=script.getParams();
    assertThat(params,notNullValue());
    assertThat(params.size(),equalTo(1));
    assertThat(params.get("param1").toString(),equalTo("value1"));
    request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("script").startObject("params").field("param1","value1").endObject().field("source","script1").endObject().endObject()));
    script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    params=script.getParams();
    assertThat(params,notNullValue());
    assertThat(params.size(),equalTo(1));
    assertThat(params.get("param1").toString(),equalTo("value1"));
    request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("script").startObject("params").field("param1","value1").endObject().field("source","script1").endObject().startObject("upsert").field("field1","value1").startObject("compound").field("field2","value2").endObject().endObject().endObject()));
    script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    params=script.getParams();
    assertThat(params,notNullValue());
    assertThat(params.size(),equalTo(1));
    assertThat(params.get("param1").toString(),equalTo("value1"));
    Map<String,Object> upsertDoc=XContentHelper.convertToMap(request.upsertRequest().source(),true,request.upsertRequest().getContentType()).v2();
    assertThat(upsertDoc.get("field1").toString(),equalTo("value1"));
    assertThat(((Map)upsertDoc.get("compound")).get("field2").toString(),equalTo("value2"));
    request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("upsert").field("field1","value1").startObject("compound").field("field2","value2").endObject().endObject().startObject("script").startObject("params").field("param1","value1").endObject().field("source","script1").endObject().endObject()));
    script=request.script();
    assertThat(script,notNullValue());
    assertThat(script.getIdOrCode(),equalTo("script1"));
    assertThat(script.getType(),equalTo(ScriptType.INLINE));
    assertThat(script.getLang(),equalTo(Script.DEFAULT_SCRIPT_LANG));
    params=script.getParams();
    assertThat(params,notNullValue());
    assertThat(params.size(),equalTo(1));
    assertThat(params.get("param1").toString(),equalTo("value1"));
    upsertDoc=XContentHelper.convertToMap(request.upsertRequest().source(),true,request.upsertRequest().getContentType()).v2();
    assertThat(upsertDoc.get("field1").toString(),equalTo("value1"));
    assertThat(((Map)upsertDoc.get("compound")).get("field2").toString(),equalTo("value2"));
    request=new UpdateRequest("test","type","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1","value1").startObject("compound").field("field2","value2").endObject().endObject().endObject()));
    Map<String,Object> doc=request.doc().sourceAsMap();
    assertThat(doc.get("field1").toString(),equalTo("value1"));
    assertThat(((Map)doc.get("compound")).get("field2").toString(),equalTo("value2"));
  }
  public void testFieldsParsing() throws Exception {
    UpdateRequest request=new UpdateRequest("test","type1","1").fromXContent(createParser(JsonXContent.jsonXContent,new BytesArray("{\"doc\": {\"field1\": \"value1\"}, \"fields\": \"_source\"}")));
    assertThat(request.doc().sourceAsMap().get("field1").toString(),equalTo("value1"));
    assertThat(request.fields(),arrayContaining("_source"));
    request=new UpdateRequest("test","type2","2").fromXContent(createParser(JsonXContent.jsonXContent,new BytesArray("{\"doc\": {\"field2\": \"value2\"}, \"fields\": [\"field1\", \"field2\"]}")));
    assertThat(request.doc().sourceAsMap().get("field2").toString(),equalTo("value2"));
    assertThat(request.fields(),arrayContaining("field1","field2"));
  }
  public void testFetchSourceParsing() throws Exception {
    UpdateRequest request=new UpdateRequest("test","type1","1");
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().field("_source",true).endObject()));
    assertThat(request.fetchSource(),notNullValue());
    assertThat(request.fetchSource().includes().length,equalTo(0));
    assertThat(request.fetchSource().excludes().length,equalTo(0));
    assertThat(request.fetchSource().fetchSource(),equalTo(true));
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().field("_source",false).endObject()));
    assertThat(request.fetchSource(),notNullValue());
    assertThat(request.fetchSource().includes().length,equalTo(0));
    assertThat(request.fetchSource().excludes().length,equalTo(0));
    assertThat(request.fetchSource().fetchSource(),equalTo(false));
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().field("_source","path.inner.*").endObject()));
    assertThat(request.fetchSource(),notNullValue());
    assertThat(request.fetchSource().fetchSource(),equalTo(true));
    assertThat(request.fetchSource().includes().length,equalTo(1));
    assertThat(request.fetchSource().excludes().length,equalTo(0));
    assertThat(request.fetchSource().includes()[0],equalTo("path.inner.*"));
    request.fromXContent(createParser(XContentFactory.jsonBuilder().startObject().startObject("_source").field("includes","path.inner.*").field("excludes","another.inner.*").endObject().endObject()));
    assertThat(request.fetchSource(),notNullValue());
    assertThat(request.fetchSource().fetchSource(),equalTo(true));
    assertThat(request.fetchSource().includes().length,equalTo(1));
    assertThat(request.fetchSource().excludes().length,equalTo(1));
    assertThat(request.fetchSource().includes()[0],equalTo("path.inner.*"));
    assertThat(request.fetchSource().excludes()[0],equalTo("another.inner.*"));
  }
  public void testNowInScript() throws IOException {
    IndexRequest indexRequest=new IndexRequest("test","type1","2").source(jsonBuilder().startObject().field("foo","bar").endObject());
{
      UpdateRequest updateRequest=new UpdateRequest("test","type1","2").upsert(indexRequest).script(mockInlineScript("ctx._source.update_timestamp = ctx._now")).scriptedUpsert(true);
      long nowInMillis=randomNonNegativeLong();
      GetResult getResult=new GetResult("test","type1","2",0,false,null,null);
      UpdateHelper.Result result=updateHelper.prepare(new ShardId("test","_na_",0),updateRequest,getResult,() -> nowInMillis);
      Streamable action=result.action();
      assertThat(action,instanceOf(IndexRequest.class));
      IndexRequest indexAction=(IndexRequest)action;
      assertEquals(nowInMillis,indexAction.sourceAsMap().get("update_timestamp"));
    }
{
      UpdateRequest updateRequest=new UpdateRequest("test","type1","2").upsert(indexRequest).script(mockInlineScript("ctx._timestamp = ctx._now")).scriptedUpsert(true);
      GetResult getResult=new GetResult("test","type1","2",0,true,new BytesArray("{}"),null);
      UpdateHelper.Result result=updateHelper.prepare(new ShardId("test","_na_",0),updateRequest,getResult,() -> 42L);
      Streamable action=result.action();
      assertThat(action,instanceOf(IndexRequest.class));
    }
  }
  public void testIndexTimeout(){
    final GetResult getResult=new GetResult("test","type","1",0,true,new BytesArray("{\"f\":\"v\"}"),null);
    final UpdateRequest updateRequest=new UpdateRequest("test","type","1").script(mockInlineScript("return")).timeout(randomTimeValue());
    runTimeoutTest(getResult,updateRequest);
  }
  public void testDeleteTimeout(){
    final GetResult getResult=new GetResult("test","type","1",0,true,new BytesArray("{\"f\":\"v\"}"),null);
    final UpdateRequest updateRequest=new UpdateRequest("test","type","1").script(mockInlineScript("ctx.op = delete")).timeout(randomTimeValue());
    runTimeoutTest(getResult,updateRequest);
  }
  public void testUpsertTimeout() throws IOException {
    final boolean exists=randomBoolean();
    final BytesReference source=exists ? new BytesArray("{\"f\":\"v\"}") : null;
    final GetResult getResult=new GetResult("test","type","1",0,exists,source,null);
    final XContentBuilder sourceBuilder=jsonBuilder();
    sourceBuilder.startObject();
{
      sourceBuilder.field("f","v");
    }
    sourceBuilder.endObject();
    final IndexRequest upsert=new IndexRequest("test","type","1").source(sourceBuilder);
    final UpdateRequest updateRequest=new UpdateRequest("test","type","1").upsert(upsert).script(mockInlineScript("return")).timeout(randomTimeValue());
    runTimeoutTest(getResult,updateRequest);
  }
  private void runTimeoutTest(  final GetResult getResult,  final UpdateRequest updateRequest){
    final UpdateHelper.Result result=updateHelper.prepare(new ShardId("test","",0),updateRequest,getResult,ESTestCase::randomNonNegativeLong);
    final Streamable action=result.action();
    assertThat(action,instanceOf(ReplicationRequest.class));
    final ReplicationRequest request=(ReplicationRequest)action;
    assertThat(request.timeout(),equalTo(updateRequest.timeout()));
  }
  public void testToAndFromXContent() throws IOException {
    UpdateRequest updateRequest=new UpdateRequest();
    updateRequest.detectNoop(randomBoolean());
    if (randomBoolean()) {
      XContentType xContentType=randomFrom(XContentType.values());
      BytesReference source=RandomObjects.randomSource(random(),xContentType);
      updateRequest.doc(new IndexRequest().source(source,xContentType));
      updateRequest.docAsUpsert(randomBoolean());
    }
 else {
      ScriptType scriptType=randomFrom(ScriptType.values());
      String scriptLang=(scriptType != ScriptType.STORED) ? randomAlphaOfLength(10) : null;
      String scriptIdOrCode=randomAlphaOfLength(10);
      int nbScriptParams=randomIntBetween(0,5);
      Map<String,Object> scriptParams=new HashMap<>(nbScriptParams);
      for (int i=0; i < nbScriptParams; i++) {
        scriptParams.put(randomAlphaOfLength(5),randomAlphaOfLength(5));
      }
      updateRequest.script(new Script(scriptType,scriptLang,scriptIdOrCode,scriptParams));
      updateRequest.scriptedUpsert(randomBoolean());
    }
    if (randomBoolean()) {
      XContentType xContentType=randomFrom(XContentType.values());
      BytesReference source=RandomObjects.randomSource(random(),xContentType);
      updateRequest.upsert(new IndexRequest().source(source,xContentType));
    }
    if (randomBoolean()) {
      String[] fields=new String[randomIntBetween(0,5)];
      for (int i=0; i < fields.length; i++) {
        fields[i]=randomAlphaOfLength(5);
      }
      updateRequest.fields(fields);
    }
    if (randomBoolean()) {
      if (randomBoolean()) {
        updateRequest.fetchSource(randomBoolean());
      }
 else {
        String[] includes=new String[randomIntBetween(0,5)];
        for (int i=0; i < includes.length; i++) {
          includes[i]=randomAlphaOfLength(5);
        }
        String[] excludes=new String[randomIntBetween(0,5)];
        for (int i=0; i < excludes.length; i++) {
          excludes[i]=randomAlphaOfLength(5);
        }
        if (randomBoolean()) {
          updateRequest.fetchSource(includes,excludes);
        }
      }
    }
    XContentType xContentType=randomFrom(XContentType.values());
    boolean humanReadable=randomBoolean();
    BytesReference originalBytes=toShuffledXContent(updateRequest,xContentType,ToXContent.EMPTY_PARAMS,humanReadable);
    if (randomBoolean()) {
      try (XContentParser parser=createParser(xContentType.xContent(),originalBytes)){
        originalBytes=BytesReference.bytes(shuffleXContent(parser,randomBoolean()));
      }
     }
    UpdateRequest parsedUpdateRequest=new UpdateRequest();
    try (XContentParser parser=createParser(xContentType.xContent(),originalBytes)){
      parsedUpdateRequest.fromXContent(parser);
      assertNull(parser.nextToken());
    }
     assertEquals(updateRequest.detectNoop(),parsedUpdateRequest.detectNoop());
    assertEquals(updateRequest.docAsUpsert(),parsedUpdateRequest.docAsUpsert());
    assertEquals(updateRequest.docAsUpsert(),parsedUpdateRequest.docAsUpsert());
    assertEquals(updateRequest.script(),parsedUpdateRequest.script());
    assertEquals(updateRequest.scriptedUpsert(),parsedUpdateRequest.scriptedUpsert());
    assertArrayEquals(updateRequest.fields(),parsedUpdateRequest.fields());
    assertEquals(updateRequest.fetchSource(),parsedUpdateRequest.fetchSource());
    BytesReference finalBytes=toXContent(parsedUpdateRequest,xContentType,humanReadable);
    assertToXContentEquivalent(originalBytes,finalBytes,xContentType);
  }
  public void testToValidateUpsertRequestAndVersion(){
    UpdateRequest updateRequest=new UpdateRequest("index","type","id");
    updateRequest.version(1L);
    updateRequest.doc("{}",XContentType.JSON);
    updateRequest.upsert(new IndexRequest("index","type","id"));
    assertThat(updateRequest.validate().validationErrors(),contains("can't provide both upsert request and a version"));
  }
  public void testToValidateUpsertRequestWithVersion(){
    UpdateRequest updateRequest=new UpdateRequest("index","type","id");
    updateRequest.doc("{}",XContentType.JSON);
    updateRequest.upsert(new IndexRequest("index","type","1").version(1L));
    assertThat(updateRequest.validate().validationErrors(),contains("can't provide version in upsert request"));
  }
  public void testValidate(){
{
      UpdateRequest request=new UpdateRequest("index","type","id");
      request.doc("{}",XContentType.JSON);
      ActionRequestValidationException validate=request.validate();
      assertThat(validate,nullValue());
    }
{
      UpdateRequest request=new UpdateRequest("index",randomBoolean() ? "" : null,randomBoolean() ? "" : null);
      request.doc("{}",XContentType.JSON);
      ActionRequestValidationException validate=request.validate();
      assertThat(validate,not(nullValue()));
      assertThat(validate.validationErrors(),hasItems("type is missing","id is missing"));
    }
  }
  public void testParentAndRoutingExtraction() throws Exception {
    GetResult getResult=new GetResult("test","type","1",0,false,null,null);
    IndexRequest indexRequest=new IndexRequest("test","type","1");
    assertNull(UpdateHelper.calculateRouting(getResult,null));
    assertNull(UpdateHelper.calculateParent(getResult,null));
    assertNull(UpdateHelper.calculateRouting(getResult,indexRequest));
    assertNull(UpdateHelper.calculateParent(getResult,indexRequest));
    getResult=new GetResult("test","type","1",0,true,null,null);
    assertNull(UpdateHelper.calculateRouting(getResult,indexRequest));
    assertNull(UpdateHelper.calculateParent(getResult,indexRequest));
    Map<String,DocumentField> fields=new HashMap<>();
    fields.put("_parent",new DocumentField("_parent",Collections.singletonList("parent1")));
    fields.put("_routing",new DocumentField("_routing",Collections.singletonList("routing1")));
    getResult=new GetResult("test","type","1",0,true,null,fields);
    assertThat(UpdateHelper.calculateRouting(getResult,indexRequest),equalTo("routing1"));
    assertThat(UpdateHelper.calculateParent(getResult,indexRequest),equalTo("parent1"));
    indexRequest=new IndexRequest("test","type","1").parent("parent2").routing("routing2");
    assertThat(UpdateHelper.calculateRouting(getResult,indexRequest),equalTo("routing2"));
    assertThat(UpdateHelper.calculateParent(getResult,indexRequest),equalTo("parent2"));
  }
  @SuppressWarnings("deprecated") public void testCalculateUpdateVersion() throws Exception {
    long randomVersion=randomIntBetween(0,100);
    GetResult getResult=new GetResult("test","type","1",randomVersion,true,new BytesArray("{}"),null);
    UpdateRequest request=new UpdateRequest("test","type1","1");
    long version=UpdateHelper.calculateUpdateVersion(request,getResult);
    assertThat(version,equalTo(randomVersion));
    request=new UpdateRequest("test","type1","1").versionType(VersionType.FORCE).version(1337);
    version=UpdateHelper.calculateUpdateVersion(request,getResult);
    assertThat(version,equalTo(1337L));
  }
  public void testNoopDetection() throws Exception {
    ShardId shardId=new ShardId("test","",0);
    GetResult getResult=new GetResult("test","type","1",0,true,new BytesArray("{\"body\": \"foo\"}"),null);
    UpdateRequest request=new UpdateRequest("test","type1","1").fromXContent(createParser(JsonXContent.jsonXContent,new BytesArray("{\"doc\": {\"body\": \"foo\"}}")));
    UpdateHelper.Result result=updateHelper.prepareUpdateIndexRequest(shardId,request,getResult,true);
    assertThat(result.action(),instanceOf(UpdateResponse.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.NOOP));
    result=updateHelper.prepareUpdateIndexRequest(shardId,request,getResult,false);
    assertThat(result.action(),instanceOf(IndexRequest.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.UPDATED));
    assertThat(result.updatedSourceAsMap().get("body").toString(),equalTo("foo"));
    request=new UpdateRequest("test","type1","1").fromXContent(createParser(JsonXContent.jsonXContent,new BytesArray("{\"doc\": {\"body\": \"bar\"}}")));
    result=updateHelper.prepareUpdateIndexRequest(shardId,request,getResult,true);
    assertThat(result.action(),instanceOf(IndexRequest.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.UPDATED));
    assertThat(result.updatedSourceAsMap().get("body").toString(),equalTo("bar"));
  }
  public void testUpdateScript() throws Exception {
    ShardId shardId=new ShardId("test","",0);
    GetResult getResult=new GetResult("test","type","1",0,true,new BytesArray("{\"body\": \"bar\"}"),null);
    UpdateRequest request=new UpdateRequest("test","type1","1").script(mockInlineScript("ctx._source.body = \"foo\""));
    UpdateHelper.Result result=updateHelper.prepareUpdateScriptRequest(shardId,request,getResult,ESTestCase::randomNonNegativeLong);
    assertThat(result.action(),instanceOf(IndexRequest.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.UPDATED));
    assertThat(result.updatedSourceAsMap().get("body").toString(),equalTo("foo"));
    request=new UpdateRequest("test","type1","1").script(mockInlineScript("ctx.op = delete"));
    result=updateHelper.prepareUpdateScriptRequest(shardId,request,getResult,ESTestCase::randomNonNegativeLong);
    assertThat(result.action(),instanceOf(DeleteRequest.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.DELETED));
    boolean goodNoop=randomBoolean();
    if (goodNoop) {
      request=new UpdateRequest("test","type1","1").script(mockInlineScript("ctx.op = none"));
    }
 else {
      request=new UpdateRequest("test","type1","1").script(mockInlineScript("ctx.op = bad"));
    }
    result=updateHelper.prepareUpdateScriptRequest(shardId,request,getResult,ESTestCase::randomNonNegativeLong);
    assertThat(result.action(),instanceOf(UpdateResponse.class));
    assertThat(result.getResponseResult(),equalTo(DocWriteResponse.Result.NOOP));
  }
  public void testToString() throws IOException {
    UpdateRequest request=new UpdateRequest("test","type1","1").script(mockInlineScript("ctx._source.body = \"foo\""));
    assertThat(request.toString(),equalTo("update {[test][type1][1], doc_as_upsert[false], " + "script[Script{type=inline, lang='mock', idOrCode='ctx._source.body = \"foo\"', options={}, params={}}], " + "scripted_upsert[false], detect_noop[true]}"));
    request=new UpdateRequest("test","type1","1").fromXContent(createParser(JsonXContent.jsonXContent,new BytesArray("{\"doc\": {\"body\": \"bar\"}}")));
    assertThat(request.toString(),equalTo("update {[test][type1][1], doc_as_upsert[false], " + "doc[index {[null][null][null], source[{\"body\":\"bar\"}]}], scripted_upsert[false], detect_noop[true]}"));
  }
}
