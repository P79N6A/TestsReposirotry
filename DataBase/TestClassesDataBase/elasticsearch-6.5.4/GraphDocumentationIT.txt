public class GraphDocumentationIT extends ESRestHighLevelClientTestCase {
  @Before public void indexDocuments() throws IOException {
    Request doc1=new Request(HttpPut.METHOD_NAME,"/index1/type/1");
    doc1.setJsonEntity("{ \"participants\":[1,2], \"text\":\"let's start projectx\", \"attachment_md5\":\"324FHDGHFDG4564\"}");
    client().performRequest(doc1);
    Request doc2=new Request(HttpPut.METHOD_NAME,"/index2/type/2");
    doc2.setJsonEntity("{\"participants\":[2,3,4], \"text\":\"got something you both may be interested in\"}");
    client().performRequest(doc2);
    client().performRequest(new Request(HttpPost.METHOD_NAME,"/_refresh"));
  }
  @SuppressForbidden(reason="system out is ok for a documentation example") public void testExplore() throws Exception {
    RestHighLevelClient client=highLevelClient();
    GraphExploreRequest request=new GraphExploreRequest();
    request.indices("index1","index2");
    request.useSignificance(false);
    TermQueryBuilder startingQuery=new TermQueryBuilder("text","projectx");
    Hop hop1=request.createNextHop(startingQuery);
    VertexRequest people=hop1.addVertexRequest("participants");
    people.minDocCount(1);
    VertexRequest files=hop1.addVertexRequest("attachment_md5");
    files.minDocCount(1);
    Hop hop2=request.createNextHop(null);
    VertexRequest vr2=hop2.addVertexRequest("participants");
    vr2.minDocCount(5);
    GraphExploreResponse exploreResponse=client.graph().explore(request,RequestOptions.DEFAULT);
    Collection<Vertex> v=exploreResponse.getVertices();
    Collection<Connection> c=exploreResponse.getConnections();
    for (    Vertex vertex : v) {
      System.out.println(vertex.getField() + ":" + vertex.getTerm()+ " discovered at hop depth "+ vertex.getHopDepth());
    }
    for (    Connection link : c) {
      System.out.println(link.getFrom() + " -> " + link.getTo()+ " evidenced by "+ link.getDocCount()+ " docs");
    }
    Collection<Vertex> initialVertices=exploreResponse.getVertices();
    GraphExploreRequest expandRequest=new GraphExploreRequest();
    expandRequest.indices("index1","index2");
    Hop expandHop1=expandRequest.createNextHop(null);
    VertexRequest fromPeople=expandHop1.addVertexRequest("participants");
    for (    Vertex vertex : initialVertices) {
      if (vertex.getField().equals("participants")) {
        fromPeople.addInclude(vertex.getTerm(),1f);
      }
    }
    Hop expandHop2=expandRequest.createNextHop(null);
    VertexRequest newPeople=expandHop2.addVertexRequest("participants");
    for (    Vertex vertex : initialVertices) {
      if (vertex.getField().equals("participants")) {
        newPeople.addExclude(vertex.getTerm());
      }
    }
    GraphExploreResponse expandResponse=client.graph().explore(expandRequest,RequestOptions.DEFAULT);
  }
}
