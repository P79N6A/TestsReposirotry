public class WatcherFeatureSetTests extends ESTestCase {
  private XPackLicenseState licenseState;
  private Client client;
  @Before public void init() throws Exception {
    licenseState=mock(XPackLicenseState.class);
    client=mock(Client.class);
    ThreadPool threadPool=mock(ThreadPool.class);
    ThreadContext threadContext=new ThreadContext(Settings.EMPTY);
    when(threadPool.getThreadContext()).thenReturn(threadContext);
    when(client.threadPool()).thenReturn(threadPool);
  }
  public void testAvailable(){
    WatcherFeatureSet featureSet=new WatcherFeatureSet(Settings.EMPTY,licenseState,client);
    boolean available=randomBoolean();
    when(licenseState.isWatcherAllowed()).thenReturn(available);
    assertThat(featureSet.available(),is(available));
  }
  public void testEnabled(){
    boolean enabled=randomBoolean();
    Settings.Builder settings=Settings.builder();
    if (enabled) {
      if (randomBoolean()) {
        settings.put("xpack.watcher.enabled",enabled);
      }
    }
 else {
      settings.put("xpack.watcher.enabled",enabled);
    }
    WatcherFeatureSet featureSet=new WatcherFeatureSet(settings.build(),licenseState,client);
    assertThat(featureSet.enabled(),is(enabled));
  }
  public void testUsageStats() throws Exception {
    doAnswer(mock -> {
      ActionListener<WatcherStatsResponse> listener=(ActionListener<WatcherStatsResponse>)mock.getArguments()[2];
      List<WatcherStatsResponse.Node> nodes=new ArrayList<>();
      DiscoveryNode first=new DiscoveryNode("first",buildNewFakeTransportAddress(),Version.CURRENT);
      WatcherStatsResponse.Node firstNode=new WatcherStatsResponse.Node(first);
      Counters firstCounters=new Counters();
      firstCounters.inc("foo.foo",1);
      firstCounters.inc("foo.bar.baz",1);
      firstNode.setStats(firstCounters);
      nodes.add(firstNode);
      DiscoveryNode second=new DiscoveryNode("second",buildNewFakeTransportAddress(),Version.CURRENT);
      WatcherStatsResponse.Node secondNode=new WatcherStatsResponse.Node(second);
      Counters secondCounters=new Counters();
      secondCounters.inc("spam",1);
      secondCounters.inc("foo.bar.baz",4);
      secondNode.setStats(secondCounters);
      nodes.add(secondNode);
      listener.onResponse(new WatcherStatsResponse(new ClusterName("whatever"),new WatcherMetaData(false),nodes,Collections.emptyList()));
      return null;
    }
).when(client).execute(eq(WatcherStatsAction.INSTANCE),any(),any());
    PlainActionFuture<WatcherFeatureSet.Usage> future=new PlainActionFuture<>();
    new WatcherFeatureSet(Settings.EMPTY,licenseState,client).usage(future);
    WatcherFeatureSetUsage watcherUsage=(WatcherFeatureSetUsage)future.get();
    assertThat(watcherUsage.stats().keySet(),containsInAnyOrder("foo","spam"));
    long fooBarBaz=ObjectPath.eval("foo.bar.baz",watcherUsage.stats());
    assertThat(fooBarBaz,is(5L));
    long fooFoo=ObjectPath.eval("foo.foo",watcherUsage.stats());
    assertThat(fooFoo,is(1L));
    long spam=ObjectPath.eval("spam",watcherUsage.stats());
    assertThat(spam,is(1L));
    BytesStreamOutput out=new BytesStreamOutput();
    watcherUsage.writeTo(out);
    XPackFeatureSet.Usage serializedUsage=new WatcherFeatureSetUsage(out.bytes().streamInput());
    for (    XPackFeatureSet.Usage usage : Arrays.asList(watcherUsage,serializedUsage)) {
      XContentBuilder builder=jsonBuilder();
      usage.toXContent(builder,ToXContent.EMPTY_PARAMS);
      XContentSource source=new XContentSource(builder);
      assertThat(source.getValue("foo.bar.baz"),is(5));
      assertThat(source.getValue("spam"),is(1));
      assertThat(source.getValue("foo.foo"),is(1));
      assertThat(usage,instanceOf(WatcherFeatureSetUsage.class));
      WatcherFeatureSetUsage featureSetUsage=(WatcherFeatureSetUsage)usage;
      assertThat(featureSetUsage.stats().keySet(),containsInAnyOrder("foo","spam"));
    }
  }
}
