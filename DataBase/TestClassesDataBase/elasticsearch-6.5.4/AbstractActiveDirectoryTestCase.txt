public abstract class AbstractActiveDirectoryTestCase extends ESTestCase {
  public static final Boolean FOLLOW_REFERRALS=Booleans.parseBoolean(getFromEnv("TESTS_AD_FOLLOW_REFERRALS","false"));
  public static final String AD_LDAP_URL=getFromEnv("TESTS_AD_LDAP_URL","ldaps://localhost:61636");
  public static final String AD_LDAP_GC_URL=getFromEnv("TESTS_AD_LDAP_GC_URL","ldaps://localhost:63269");
  public static final String PASSWORD=getFromEnv("TESTS_AD_USER_PASSWORD","Passw0rd");
  public static final String AD_LDAP_PORT=getFromEnv("TESTS_AD_LDAP_PORT","61389");
  public static final String AD_LDAPS_PORT=getFromEnv("TESTS_AD_LDAPS_PORT","61636");
  public static final String AD_GC_LDAP_PORT=getFromEnv("TESTS_AD_GC_LDAP_PORT","63268");
  public static final String AD_GC_LDAPS_PORT=getFromEnv("TESTS_AD_GC_LDAPS_PORT","63269");
  public static final String AD_DOMAIN="ad.test.elasticsearch.com";
  protected SSLService sslService;
  protected Settings globalSettings;
  protected boolean useGlobalSSL;
  protected List<String> certificatePaths;
  @Before public void initializeSslSocketFactory() throws Exception {
    useGlobalSSL=randomBoolean();
    certificatePaths=new ArrayList<>();
    Files.walkFileTree(getDataPath("../ldap/support"),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        String fileName=file.getFileName().toString();
        if (fileName.endsWith(".crt")) {
          certificatePaths.add(getDataPath("../ldap/support/" + fileName).toString());
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
    Settings.Builder builder=Settings.builder().put("path.home",createTempDir());
    if (useGlobalSSL) {
      builder.putList("xpack.ssl.certificate_authorities",certificatePaths);
      builder.putList("xpack.security.authc.realms.bar.ssl.certificate_authorities",certificatePaths);
      builder.put("xpack.security.authc.realms.bar.ssl.verification_mode",VerificationMode.CERTIFICATE);
    }
 else {
      builder.putList("xpack.security.authc.realms.foo.ssl.certificate_authorities",certificatePaths);
      builder.put("xpack.security.authc.realms.foo.ssl.verification_mode",VerificationMode.FULL);
      builder.putList("xpack.security.authc.realms.bar.ssl.certificate_authorities",certificatePaths);
      builder.put("xpack.security.authc.realms.bar.ssl.verification_mode",VerificationMode.CERTIFICATE);
    }
    globalSettings=builder.build();
    Environment environment=TestEnvironment.newEnvironment(globalSettings);
    sslService=new SSLService(globalSettings,environment);
  }
  Settings buildAdSettings(  String ldapUrl,  String adDomainName,  String userSearchDN,  LdapSearchScope scope,  boolean hostnameVerification){
    Settings.Builder builder=Settings.builder().putList(SessionFactorySettings.URLS_SETTING,ldapUrl).put(ActiveDirectorySessionFactorySettings.AD_DOMAIN_NAME_SETTING,adDomainName).put(ActiveDirectorySessionFactorySettings.AD_USER_SEARCH_BASEDN_SETTING,userSearchDN).put(ActiveDirectorySessionFactorySettings.AD_USER_SEARCH_SCOPE_SETTING,scope).put(ActiveDirectorySessionFactorySettings.AD_LDAP_PORT_SETTING.getKey(),AD_LDAP_PORT).put(ActiveDirectorySessionFactorySettings.AD_LDAPS_PORT_SETTING.getKey(),AD_LDAPS_PORT).put(ActiveDirectorySessionFactorySettings.AD_GC_LDAP_PORT_SETTING.getKey(),AD_GC_LDAP_PORT).put(ActiveDirectorySessionFactorySettings.AD_GC_LDAPS_PORT_SETTING.getKey(),AD_GC_LDAPS_PORT).put("follow_referrals",FOLLOW_REFERRALS);
    if (randomBoolean()) {
      builder.put("ssl.verification_mode",hostnameVerification ? VerificationMode.FULL : VerificationMode.CERTIFICATE);
    }
 else {
      builder.put(SessionFactorySettings.HOSTNAME_VERIFICATION_SETTING,hostnameVerification);
    }
    if (useGlobalSSL == false) {
      builder.putList("ssl.certificate_authorities",certificatePaths);
    }
    return builder.build();
  }
  protected static void assertConnectionCanReconnect(  LDAPInterface conn){
    AccessController.doPrivileged(new PrivilegedAction<Void>(){
      @Override public Void run(){
        try {
          if (conn instanceof LDAPConnection) {
            ((LDAPConnection)conn).reconnect();
          }
 else           if (conn instanceof LDAPConnectionPool) {
            try (LDAPConnection c=((LDAPConnectionPool)conn).getConnection()){
              c.reconnect();
            }
           }
        }
 catch (        LDAPException e) {
          fail("Connection is not valid. It will not work on follow referral flow.");
        }
        return null;
      }
    }
);
  }
  private static String getFromEnv(  String envVar,  String defaultValue){
    final String value=System.getenv(envVar);
    return value == null ? defaultValue : value;
  }
}
