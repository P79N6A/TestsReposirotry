public class LicenseIT extends ESRestHighLevelClientTestCase {
  @BeforeClass public static void checkForSnapshot(){
    assumeTrue("Trial license used to rollback is only valid when tested against snapshot/test builds",Build.CURRENT.isSnapshot());
  }
  @After public void rollbackToTrial() throws IOException {
    putTrialLicense();
  }
  public void testStartTrial() throws Exception {
{
      final StartTrialRequest request=new StartTrialRequest();
      final StartTrialResponse response=highLevelClient().license().startTrial(request,RequestOptions.DEFAULT);
      assertThat(response.isAcknowledged(),equalTo(false));
      assertThat(response.isTrialWasStarted(),equalTo(false));
      assertThat(response.getLicenseType(),nullValue());
      assertThat(response.getErrorMessage(),equalTo("Operation failed: Needs acknowledgement."));
      assertThat(response.getAcknowledgeHeader(),containsString("This API initiates a free 30-day trial for all platinum features"));
      assertNotEmptyAcknowledgeMessages(response.getAcknowledgeMessages());
    }
{
      final StartTrialRequest request=new StartTrialRequest(true);
      final StartTrialResponse response=highLevelClient().license().startTrial(request,RequestOptions.DEFAULT);
      assertThat(response.isAcknowledged(),equalTo(true));
      assertThat(response.isTrialWasStarted(),equalTo(false));
      assertThat(response.getLicenseType(),nullValue());
      assertThat(response.getErrorMessage(),equalTo("Operation failed: Trial was already activated."));
      assertThat(response.getAcknowledgeHeader(),nullValue());
      assertThat(response.getAcknowledgeMessages(),nullValue());
    }
  }
  public static void putTrialLicense() throws IOException {
    assumeTrue("Trial license is only valid when tested against snapshot/test builds",Build.CURRENT.isSnapshot());
    final String licenseDefinition=Strings.toString(jsonBuilder().startObject().field("licenses",Arrays.asList(MapBuilder.<String,Object>newMapBuilder().put("uid","96fc37c6-6fc9-43e2-a40d-73143850cd72").put("type","trial").put("issue_date_in_millis","1539673368158").put("expiry_date_in_millis","2170393368158").put("max_nodes","5").put("issued_to","client_rest-high-level_integTestCluster").put("issuer","elasticsearch").put("start_date_in_millis","-1").put("signature","AAAABAAAAA3FXON9kGmNqmH+ASDWAAAAIAo5/x6hrsGh1GqqrJmy4qgmEC7gK0U4zQ6q5ZEMhm4jAAABAAcdKHL0BfM2uqTgT7BDuFxX5lb" + "t/bHDVJ421Wwgm5p3IMbw/W13iiAHz0hhDziF7acJbc/y65L+BKGtVC1gSSHeLDHaAD66VrjKxfc7VbGyJIAYBOdujf0rheurmaD3IcNo" + "/tWDjCdtTwrNziFkorsGcPadBP5Yc6csk3/Q74DlfiYweMBxLUfkBERwxwd5OQS6ujGvl/4bb8p5zXvOw8vMSaAXSXXnExP6lam+0934W"+ "0kHvU7IGk+fCUjOaiSWKSoE4TEcAtVNYj/oRoRtfQ1KQGpdCHxTHs1BimdZaG0nBHDsvhYlVVLSvHN6QzqsHWgFDG6JJxhtU872oTRSUHA=").immutableMap())).endObject());
    final PutLicenseRequest request=new PutLicenseRequest();
    request.setAcknowledge(true);
    request.setLicenseDefinition(licenseDefinition);
    final PutLicenseResponse response=highLevelClient().license().putLicense(request,RequestOptions.DEFAULT);
    assertThat(response.isAcknowledged(),equalTo(true));
    assertThat(response.status(),equalTo(LicensesStatus.VALID));
  }
  public void testStartBasic() throws Exception {
{
      final StartBasicRequest request=new StartBasicRequest();
      final StartBasicResponse response=highLevelClient().license().startBasic(request,RequestOptions.DEFAULT);
      assertThat(response.isAcknowledged(),equalTo(false));
      assertThat(response.isBasicStarted(),equalTo(false));
      assertThat(response.getErrorMessage(),equalTo("Operation failed: Needs acknowledgement."));
      assertThat(response.getAcknowledgeMessage(),containsString("This license update requires acknowledgement. " + "To acknowledge the license, please read the following messages and call /start_basic again"));
      assertNotEmptyAcknowledgeMessages(response.getAcknowledgeMessages());
    }
{
      final StartBasicRequest request=new StartBasicRequest(true);
      final StartBasicResponse response=highLevelClient().license().startBasic(request,RequestOptions.DEFAULT);
      assertThat(response.isAcknowledged(),equalTo(true));
      assertThat(response.isBasicStarted(),equalTo(true));
      assertThat(response.getErrorMessage(),nullValue());
      assertThat(response.getAcknowledgeMessage(),nullValue());
      assertThat(response.getAcknowledgeMessages().size(),equalTo(0));
    }
  }
  private static void assertNotEmptyAcknowledgeMessages(  Map<String,String[]> acknowledgeMessages){
    assertThat(acknowledgeMessages.entrySet(),not(empty()));
    for (    Map.Entry<String,String[]> entry : acknowledgeMessages.entrySet()) {
      assertThat(entry.getKey(),not(isEmptyOrNullString()));
      for (      String message : entry.getValue()) {
        assertThat(message,not(isEmptyOrNullString()));
      }
    }
  }
  public void testGetLicense() throws Exception {
    final GetLicenseRequest request=new GetLicenseRequest();
    final GetLicenseResponse response=highLevelClient().license().getLicense(request,RequestOptions.DEFAULT);
    final String licenseDefinition=response.getLicenseDefinition();
    assertThat(licenseDefinition,notNullValue());
    final XContentParser parser=createParser(JsonXContent.jsonXContent,licenseDefinition);
    final Map<String,Object> map=parser.map();
    assertThat(map.containsKey("license"),equalTo(true));
    @SuppressWarnings("unchecked") final Map<String,Object> license=(Map<String,Object>)map.get("license");
    assertThat(license.get("status"),equalTo("active"));
    assertThat(license.get("type"),equalTo("trial"));
  }
  public void testPutLicense() throws Exception {
    putTrialLicense();
  }
  public void testDeleteLicense() throws Exception {
    final DeleteLicenseRequest request=new DeleteLicenseRequest();
    final AcknowledgedResponse response=highLevelClient().license().deleteLicense(request,RequestOptions.DEFAULT);
    assertThat(response.isAcknowledged(),equalTo(true));
  }
}
