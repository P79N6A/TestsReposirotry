public class MlJobIT extends ESRestTestCase {
  private static final String BASIC_AUTH_VALUE=basicAuthHeaderValue("x_pack_rest_user",SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);
  @Override protected Settings restClientSettings(){
    return Settings.builder().put(super.restClientSettings()).put(ThreadContext.PREFIX + ".Authorization",BASIC_AUTH_VALUE).build();
  }
  @Override protected boolean preserveTemplatesUponCompletion(){
    return true;
  }
  public void testPutJob_GivenFarequoteConfig() throws Exception {
    Response response=createFarequoteJob("given-farequote-config-job");
    String responseAsString=EntityUtils.toString(response.getEntity());
    assertThat(responseAsString,containsString("\"job_id\":\"given-farequote-config-job\""));
  }
  public void testGetJob_GivenNoSuchJob() throws Exception {
    ResponseException e=expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/non-existing-job/_stats")));
    assertThat(e.getResponse().getStatusLine().getStatusCode(),equalTo(404));
    assertThat(e.getMessage(),containsString("No known job with id 'non-existing-job'"));
  }
  public void testGetJob_GivenJobExists() throws Exception {
    createFarequoteJob("get-job_given-job-exists-job");
    Response response=client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/get-job_given-job-exists-job/_stats"));
    String responseAsString=EntityUtils.toString(response.getEntity());
    assertThat(responseAsString,containsString("\"count\":1"));
    assertThat(responseAsString,containsString("\"job_id\":\"get-job_given-job-exists-job\""));
  }
  public void testGetJobs_GivenSingleJob() throws Exception {
    String jobId="get-jobs_given-single-job-job";
    createFarequoteJob(jobId);
    String explictAll=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/_all")).getEntity());
    assertThat(explictAll,containsString("\"count\":1"));
    assertThat(explictAll,containsString("\"job_id\":\"" + jobId + "\""));
    String implicitAll=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors")).getEntity());
    assertThat(implicitAll,containsString("\"count\":1"));
    assertThat(implicitAll,containsString("\"job_id\":\"" + jobId + "\""));
  }
  public void testGetJobs_GivenMultipleJobs() throws Exception {
    createFarequoteJob("given-multiple-jobs-job-1");
    createFarequoteJob("given-multiple-jobs-job-2");
    createFarequoteJob("given-multiple-jobs-job-3");
    String explicitAll=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/_all")).getEntity());
    assertThat(explicitAll,containsString("\"count\":3"));
    assertThat(explicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-1\""));
    assertThat(explicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-2\""));
    assertThat(explicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-3\""));
    String implicitAll=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors")).getEntity());
    assertThat(implicitAll,containsString("\"count\":3"));
    assertThat(implicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-1\""));
    assertThat(implicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-2\""));
    assertThat(implicitAll,containsString("\"job_id\":\"given-multiple-jobs-job-3\""));
  }
  private Response createFarequoteJob(  String jobId) throws IOException {
    Request request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId);
    request.setJsonEntity("{\n" + "    \"description\":\"Analysis of response time by airline\",\n" + "    \"analysis_config\" : {\n"+ "        \"bucket_span\": \"3600s\",\n"+ "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"responsetime\",\"by_field_name\":\"airline\"}]\n"+ "    },\n"+ "    \"data_description\" : {\n"+ "        \"field_delimiter\":\",\",\n"+ "        \"time_field\":\"time\",\n"+ "        \"time_format\":\"yyyy-MM-dd HH:mm:ssX\"\n"+ "    }\n"+ "}");
    return client().performRequest(request);
  }
  public void testCantCreateJobWithSameID() throws Exception {
    String jobTemplate="{\n" + "  \"analysis_config\" : {\n" + "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"responsetime\"}]\n"+ "    },\n"+ "  \"data_description\": {},\n"+ "  \"results_index_name\" : \"%s\"}";
    String jobId="cant-create-job-with-same-id-job";
    Request createJob1=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId);
    createJob1.setJsonEntity(String.format(Locale.ROOT,jobTemplate,"index-1"));
    client().performRequest(createJob1);
    Request createJob2=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId);
    createJob2.setJsonEntity(String.format(Locale.ROOT,jobTemplate,"index-2"));
    ResponseException e=expectThrows(ResponseException.class,() -> client().performRequest(createJob2));
    assertThat(e.getResponse().getStatusLine().getStatusCode(),equalTo(400));
    assertThat(e.getMessage(),containsString("The job cannot be created with the Id '" + jobId + "'. The Id is already used."));
  }
  public void testCreateJobsWithIndexNameOption() throws Exception {
    String jobTemplate="{\n" + "  \"analysis_config\" : {\n" + "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"responsetime\"}]\n"+ "    },\n"+ "  \"data_description\": {},\n"+ "  \"results_index_name\" : \"%s\"}";
    String jobId1="create-jobs-with-index-name-option-job-1";
    String indexName="non-default-index";
    Request createJob1=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1);
    createJob1.setJsonEntity(String.format(Locale.ROOT,jobTemplate,indexName));
    client().performRequest(createJob1);
    String jobId2="create-jobs-with-index-name-option-job-2";
    Request createJob2=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2);
    createJob2.setEntity(createJob1.getEntity());
    client().performRequest(createJob2);
    assertBusy(() -> {
      try {
        String aliasesResponse=EntityUtils.toString(client().performRequest(new Request("GET","/_aliases")).getEntity());
        assertThat(aliasesResponse,containsString("\"" + AnomalyDetectorsIndex.jobResultsAliasedName("custom-" + indexName) + "\":{\"aliases\":{"));
        assertThat(aliasesResponse,containsString("\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId1) + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\""+ jobId1+ "\",\"boost\":1.0}}}}"));
        assertThat(aliasesResponse,containsString("\"" + AnomalyDetectorsIndex.resultsWriteAlias(jobId1) + "\":{}"));
        assertThat(aliasesResponse,containsString("\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId2) + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\""+ jobId2+ "\",\"boost\":1.0}}}}"));
        assertThat(aliasesResponse,containsString("\"" + AnomalyDetectorsIndex.resultsWriteAlias(jobId2) + "\":{}"));
      }
 catch (      ResponseException e) {
        throw new AssertionError(e);
      }
    }
);
    String responseAsString=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(responseAsString,containsString(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName));
    assertThat(responseAsString,not(containsString(AnomalyDetectorsIndex.jobResultsAliasedName(jobId1))));
    assertThat(responseAsString,not(containsString(AnomalyDetectorsIndex.jobResultsAliasedName(jobId2))));
{
      String id=String.format(Locale.ROOT,"%s_bucket_%s_%s",jobId1,"1234",300);
      Request createResultRequest=new Request("PUT",AnomalyDetectorsIndex.jobResultsAliasedName(jobId1) + "/doc/" + id);
      createResultRequest.setJsonEntity(String.format(Locale.ROOT,"{\"job_id\":\"%s\", \"timestamp\": \"%s\", \"result_type\":\"bucket\", \"bucket_span\": \"%s\"}",jobId1,"1234",1));
      client().performRequest(createResultRequest);
      id=String.format(Locale.ROOT,"%s_bucket_%s_%s",jobId1,"1236",300);
      createResultRequest=new Request("PUT",AnomalyDetectorsIndex.jobResultsAliasedName(jobId1) + "/doc/" + id);
      createResultRequest.setJsonEntity(String.format(Locale.ROOT,"{\"job_id\":\"%s\", \"timestamp\": \"%s\", \"result_type\":\"bucket\", \"bucket_span\": \"%s\"}",jobId1,"1236",1));
      client().performRequest(createResultRequest);
      client().performRequest(new Request("POST","/_refresh"));
      responseAsString=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1+ "/results/buckets")).getEntity());
      assertThat(responseAsString,containsString("\"count\":2"));
      responseAsString=EntityUtils.toString(client().performRequest(new Request("GET",AnomalyDetectorsIndex.jobResultsAliasedName(jobId1) + "/doc/_search")).getEntity());
      assertThat(responseAsString,containsString("\"total\":2"));
    }
{
      String id=String.format(Locale.ROOT,"%s_bucket_%s_%s",jobId2,"1234",300);
      Request createResultRequest=new Request("PUT",AnomalyDetectorsIndex.jobResultsAliasedName(jobId2) + "/doc/" + id);
      createResultRequest.setJsonEntity(String.format(Locale.ROOT,"{\"job_id\":\"%s\", \"timestamp\": \"%s\", \"result_type\":\"bucket\", \"bucket_span\": \"%s\"}",jobId2,"1234",1));
      client().performRequest(createResultRequest);
      id=String.format(Locale.ROOT,"%s_bucket_%s_%s",jobId2,"1236",300);
      createResultRequest=new Request("PUT",AnomalyDetectorsIndex.jobResultsAliasedName(jobId2) + "/doc/" + id);
      createResultRequest.setJsonEntity(String.format(Locale.ROOT,"{\"job_id\":\"%s\", \"timestamp\": \"%s\", \"result_type\":\"bucket\", \"bucket_span\": \"%s\"}",jobId2,"1236",1));
      client().performRequest(createResultRequest);
      client().performRequest(new Request("POST","/_refresh"));
      responseAsString=EntityUtils.toString(client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2+ "/results/buckets")).getEntity());
      assertThat(responseAsString,containsString("\"count\":2"));
      responseAsString=EntityUtils.toString(client().performRequest(new Request("GET",AnomalyDetectorsIndex.jobResultsAliasedName(jobId2) + "/doc/_search")).getEntity());
      assertThat(responseAsString,containsString("\"total\":2"));
    }
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1));
    responseAsString=EntityUtils.toString(client().performRequest(new Request("GET","/_aliases")).getEntity());
    assertThat(responseAsString,not(containsString(AnomalyDetectorsIndex.jobResultsAliasedName(jobId1))));
    assertThat(responseAsString,containsString(AnomalyDetectorsIndex.jobResultsAliasedName(jobId2)));
    responseAsString=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(responseAsString,containsString(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName));
    client().performRequest(new Request("POST","/_refresh"));
    responseAsString=EntityUtils.toString(client().performRequest(new Request("GET",AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName+ "/_count")).getEntity());
    assertThat(responseAsString,containsString("\"count\":2"));
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2));
    responseAsString=EntityUtils.toString(client().performRequest(new Request("GET","/_aliases")).getEntity());
    assertThat(responseAsString,not(containsString(AnomalyDetectorsIndex.jobResultsAliasedName(jobId2))));
    client().performRequest(new Request("POST","/_refresh"));
    responseAsString=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(responseAsString,not(containsString(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName)));
  }
  public void testCreateJobInSharedIndexUpdatesMapping() throws Exception {
    String jobTemplate="{\n" + "  \"analysis_config\" : {\n" + "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"metric\", \"by_field_name\":\"%s\"}]\n"+ "    },\n"+ "  \"data_description\": {}\n"+ "}";
    String jobId1="create-job-in-shared-index-updates-mapping-job-1";
    String byFieldName1="responsetime";
    String jobId2="create-job-in-shared-index-updates-mapping-job-2";
    String byFieldName2="cpu-usage";
    Request createJob1Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1);
    createJob1Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName1));
    client().performRequest(createJob1Request);
    Request getResultsMappingRequest=new Request("GET",AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT + "/_mapping");
    getResultsMappingRequest.addParameter("pretty",null);
    String resultsMappingAfterJob1=EntityUtils.toString(client().performRequest(getResultsMappingRequest).getEntity());
    assertThat(resultsMappingAfterJob1,containsString(byFieldName1));
    assertThat(resultsMappingAfterJob1,not(containsString(byFieldName2)));
    Request createJob2Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2);
    createJob2Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName2));
    client().performRequest(createJob2Request);
    String resultsMappingAfterJob2=EntityUtils.toString(client().performRequest(getResultsMappingRequest).getEntity());
    assertThat(resultsMappingAfterJob2,containsString(byFieldName1));
    assertThat(resultsMappingAfterJob2,containsString(byFieldName2));
  }
  public void testCreateJobInCustomSharedIndexUpdatesMapping() throws Exception {
    String jobTemplate="{\n" + "  \"analysis_config\" : {\n" + "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"metric\", \"by_field_name\":\"%s\"}]\n"+ "  },\n"+ "  \"data_description\": {},\n"+ "  \"results_index_name\" : \"shared-index\"}";
    String jobId1="create-job-in-custom-shared-index-updates-mapping-job-1";
    String byFieldName1="responsetime";
    String jobId2="create-job-in-custom-shared-index-updates-mapping-job-2";
    String byFieldName2="cpu-usage";
    Request createJob1Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1);
    createJob1Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName1));
    client().performRequest(createJob1Request);
    Request getResultsMappingRequest=new Request("GET",AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-shared-index/_mapping");
    getResultsMappingRequest.addParameter("pretty",null);
    String resultsMappingAfterJob1=EntityUtils.toString(client().performRequest(getResultsMappingRequest).getEntity());
    assertThat(resultsMappingAfterJob1,containsString(byFieldName1));
    assertThat(resultsMappingAfterJob1,not(containsString(byFieldName2)));
    Request createJob2Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2);
    createJob2Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName2));
    client().performRequest(createJob2Request);
    String resultsMappingAfterJob2=EntityUtils.toString(client().performRequest(getResultsMappingRequest).getEntity());
    assertThat(resultsMappingAfterJob2,containsString(byFieldName1));
    assertThat(resultsMappingAfterJob2,containsString(byFieldName2));
  }
  public void testCreateJob_WithClashingFieldMappingsFails() throws Exception {
    String jobTemplate="{\n" + "  \"analysis_config\" : {\n" + "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"metric\", \"by_field_name\":\"%s\"}]\n"+ "    },\n"+ "  \"data_description\": {}\n"+ "}";
    String jobId1="job-with-response-field";
    String byFieldName1;
    String jobId2="job-will-fail-with-mapping-error-on-response-field";
    String byFieldName2;
    if (randomBoolean()) {
      byFieldName1="response";
      byFieldName2="response.time";
    }
 else {
      byFieldName1="response.time";
      byFieldName2="response";
    }
    Request createJob1Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId1);
    createJob1Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName1));
    client().performRequest(createJob1Request);
    Request createJob2Request=new Request("PUT",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2);
    createJob2Request.setJsonEntity(String.format(Locale.ROOT,jobTemplate,byFieldName2));
    ResponseException e=expectThrows(ResponseException.class,() -> client().performRequest(createJob2Request));
    assertThat(e.getMessage(),containsString("This job would cause a mapping clash with existing field [response] - " + "avoid the clash by assigning a dedicated results index"));
  }
  public void testDeleteJob() throws Exception {
    String jobId="delete-job-job";
    String indexName=AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT;
    createFarequoteJob(jobId);
    String indicesBeforeDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesBeforeDelete,containsString(indexName));
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));
    String indicesAfterDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesAfterDelete,containsString(indexName));
    waitUntilIndexIsEmpty(indexName);
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "/_stats")));
  }
  public void testDeleteJobAsync() throws Exception {
    String jobId="delete-job-async-job";
    String indexName=AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT;
    createFarequoteJob(jobId);
    String indicesBeforeDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesBeforeDelete,containsString(indexName));
    Response response=client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "?wait_for_completion=false"));
    String taskId=extractTaskId(response);
    Response taskResponse=client().performRequest(new Request("GET","_tasks/" + taskId + "?wait_for_completion=true"));
    assertThat(EntityUtils.toString(taskResponse.getEntity()),containsString("\"acknowledged\":true"));
    String indicesAfterDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesAfterDelete,containsString(indexName));
    waitUntilIndexIsEmpty(indexName);
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "/_stats")));
  }
  private void waitUntilIndexIsEmpty(  String indexName) throws Exception {
    assertBusy(() -> {
      try {
        String count=EntityUtils.toString(client().performRequest(new Request("GET",indexName + "/_count")).getEntity());
        assertThat(count,containsString("\"count\":0"));
      }
 catch (      Exception e) {
        fail(e.getMessage());
      }
    }
);
  }
  private static String extractTaskId(  Response response) throws IOException {
    String responseAsString=EntityUtils.toString(response.getEntity());
    Pattern matchTaskId=Pattern.compile(".*\"task\":.*\"(.*)\".*");
    Matcher taskIdMatcher=matchTaskId.matcher(responseAsString);
    assertTrue(taskIdMatcher.matches());
    return taskIdMatcher.group(1);
  }
  public void testDeleteJobAfterMissingIndex() throws Exception {
    String jobId="delete-job-after-missing-index-job";
    String aliasName=AnomalyDetectorsIndex.jobResultsAliasedName(jobId);
    String indexName=AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT;
    createFarequoteJob(jobId);
    String indicesBeforeDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesBeforeDelete,containsString(indexName));
    client().performRequest(new Request("DELETE",indexName));
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));
    String indicesAfterDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesAfterDelete,not(containsString(aliasName)));
    assertThat(indicesAfterDelete,not(containsString(indexName)));
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "/_stats")));
  }
  public void testDeleteJobAfterMissingAliases() throws Exception {
    String jobId="delete-job-after-missing-alias-job";
    String readAliasName=AnomalyDetectorsIndex.jobResultsAliasedName(jobId);
    String writeAliasName=AnomalyDetectorsIndex.resultsWriteAlias(jobId);
    String indexName=AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT;
    createFarequoteJob(jobId);
    assertBusy(() -> {
      try {
        String aliases=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/aliases")).getEntity());
        assertThat(aliases,containsString(readAliasName));
        assertThat(aliases,containsString(writeAliasName));
      }
 catch (      ResponseException e) {
        throw new AssertionError(e);
      }
    }
);
    client().performRequest(new Request("DELETE",indexName + "/_alias/" + readAliasName));
    client().performRequest(new Request("DELETE",indexName + "/_alias/" + writeAliasName));
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",indexName + "/_alias/" + readAliasName)));
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",indexName + "/_alias/" + writeAliasName)));
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));
  }
  public void testMultiIndexDelete() throws Exception {
    String jobId="multi-index-delete-job";
    String indexName=AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + AnomalyDetectorsIndexFields.RESULTS_INDEX_DEFAULT;
    createFarequoteJob(jobId);
    client().performRequest(new Request("PUT",indexName + "-001"));
    client().performRequest(new Request("PUT",indexName + "-002"));
    String indicesBeforeDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesBeforeDelete,containsString(indexName));
    assertThat(indicesBeforeDelete,containsString(indexName + "-001"));
    assertThat(indicesBeforeDelete,containsString(indexName + "-002"));
    Request createDoc0=new Request("PUT",indexName + "/doc/" + 123);
    createDoc0.setJsonEntity(String.format(Locale.ROOT,"{\"job_id\":\"%s\", \"timestamp\": \"%s\", \"bucket_span\":%d, \"result_type\":\"record\"}",jobId,123,1));
    client().performRequest(createDoc0);
    Request createDoc1=new Request("PUT",indexName + "-001/doc/" + 123);
    createDoc1.setEntity(createDoc0.getEntity());
    client().performRequest(createDoc1);
    Request createDoc2=new Request("PUT",indexName + "-002/doc/" + 123);
    createDoc2.setEntity(createDoc0.getEntity());
    client().performRequest(createDoc2);
    Request createDoc3=new Request("PUT",indexName + "/doc/" + 456);
    createDoc3.setEntity(createDoc0.getEntity());
    client().performRequest(createDoc3);
    client().performRequest(new Request("POST","/_refresh"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "/_count")).getEntity()),containsString("\"count\":2"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "-001/_count")).getEntity()),containsString("\"count\":1"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "-002/_count")).getEntity()),containsString("\"count\":1"));
    client().performRequest(new Request("DELETE",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));
    client().performRequest(new Request("POST","/_refresh"));
    String indicesAfterDelete=EntityUtils.toString(client().performRequest(new Request("GET","/_cat/indices")).getEntity());
    assertThat(indicesAfterDelete,containsString(indexName));
    assertThat(indicesAfterDelete,containsString(indexName + "-001"));
    assertThat(indicesAfterDelete,containsString(indexName + "-002"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "/_count")).getEntity()),containsString("\"count\":0"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "-001/_count")).getEntity()),containsString("\"count\":0"));
    assertThat(EntityUtils.toString(client().performRequest(new Request("GET",indexName + "-002/_count")).getEntity()),containsString("\"count\":0"));
    expectThrows(ResponseException.class,() -> client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId+ "/_stats")));
  }
  public void testDelete_multipleRequest() throws Exception {
    String jobId="delete-job-multiple-times";
    createFarequoteJob(jobId);
    ConcurrentMapLong<Response> responses=ConcurrentCollections.newConcurrentMapLong();
    ConcurrentMapLong<ResponseException> responseExceptions=ConcurrentCollections.newConcurrentMapLong();
    AtomicReference<IOException> ioe=new AtomicReference<>();
    AtomicInteger recreationGuard=new AtomicInteger(0);
    AtomicReference<Response> recreationResponse=new AtomicReference<>();
    AtomicReference<ResponseException> recreationException=new AtomicReference<>();
    Runnable deleteJob=() -> {
      boolean forceDelete=randomBoolean();
      try {
        String url=MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId;
        if (forceDelete) {
          url+="?force=true";
        }
        Response response=client().performRequest(new Request("DELETE",url));
        responses.put(Thread.currentThread().getId(),response);
      }
 catch (      ResponseException re) {
        responseExceptions.put(Thread.currentThread().getId(),re);
      }
catch (      IOException e) {
        ioe.set(e);
      }
      if (recreationGuard.getAndIncrement() == 0) {
        try {
          recreationResponse.set(createFarequoteJob(jobId));
        }
 catch (        ResponseException re) {
          recreationException.set(re);
        }
catch (        IOException e) {
          logger.error("Error trying to recreate the job",e);
          ioe.set(e);
        }
      }
    }
;
    int numThreads=5;
    Thread[] threads=new Thread[numThreads];
    for (int i=0; i < numThreads; i++) {
      threads[i]=new Thread(deleteJob);
    }
    for (int i=0; i < numThreads; i++) {
      threads[i].start();
    }
    for (int i=0; i < numThreads; i++) {
      threads[i].join();
    }
    if (ioe.get() != null) {
      assertNull(ioe.get().getMessage(),ioe.get());
    }
    assertEquals(numThreads,responses.size() + responseExceptions.size());
    for (    ResponseException re : responseExceptions.values()) {
      assertEquals(re.getMessage(),404,re.getResponse().getStatusLine().getStatusCode());
    }
    for (    Response response : responses.values()) {
      assertEquals(EntityUtils.toString(response.getEntity()),200,response.getStatusLine().getStatusCode());
    }
    assertNotNull(recreationResponse.get());
    assertEquals(EntityUtils.toString(recreationResponse.get().getEntity()),200,recreationResponse.get().getStatusLine().getStatusCode());
    if (recreationException.get() != null) {
      assertNull(recreationException.get().getMessage(),recreationException.get());
    }
    try {
      client().performRequest(new Request("GET",MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));
      String aliases=getAliases();
      assertThat(aliases,containsString("\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId) + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\""+ jobId+ "\",\"boost\":1.0}}}}"));
      assertThat(aliases,containsString("\"" + AnomalyDetectorsIndex.resultsWriteAlias(jobId) + "\":{}"));
    }
 catch (    ResponseException missingJobException) {
      assertThat(missingJobException.getResponse().getStatusLine().getStatusCode(),equalTo(404));
      String aliases=getAliases();
      assertThat(aliases,not(containsString("\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId) + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\""+ jobId+ "\",\"boost\":1.0}}}}")));
      assertThat(aliases,not(containsString("\"" + AnomalyDetectorsIndex.resultsWriteAlias(jobId) + "\":{}")));
    }
    assertEquals(numThreads,recreationGuard.get());
  }
  private String getAliases() throws IOException {
    Response response=client().performRequest(new Request("GET","/_aliases"));
    return EntityUtils.toString(response.getEntity());
  }
  @After public void clearMlState() throws Exception {
    new MlRestTestStateCleaner(logger,adminClient()).clearMlMetadata();
    ESRestTestCase.waitForPendingTasks(adminClient());
  }
}
