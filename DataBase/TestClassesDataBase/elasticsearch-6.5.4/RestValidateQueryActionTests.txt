public class RestValidateQueryActionTests extends AbstractSearchTestCase {
  private static ThreadPool threadPool=new TestThreadPool(RestValidateQueryActionTests.class.getName());
  private static NodeClient client=new NodeClient(Settings.EMPTY,threadPool);
  private static UsageService usageService=new UsageService(Settings.EMPTY);
  private static RestController controller=new RestController(Settings.EMPTY,emptySet(),null,client,null,usageService);
  private static RestValidateQueryAction action=new RestValidateQueryAction(Settings.EMPTY,controller);
  /** 
 * Configures  {@link NodeClient} to stub {@link ValidateQueryAction} transport action.<p> This lower level of validation is out of the scope of this test.
 */
  @BeforeClass public static void stubValidateQueryAction(){
    final TaskManager taskManager=new TaskManager(Settings.EMPTY,threadPool,Collections.emptySet());
    final TransportAction transportAction=new TransportAction(Settings.EMPTY,ValidateQueryAction.NAME,threadPool,new ActionFilters(Collections.emptySet()),null,taskManager){
      @Override protected void doExecute(      Task task,      ActionRequest request,      ActionListener listener){
      }
      @Override protected void doExecute(      ActionRequest request,      ActionListener listener){
      }
    }
;
    final Map<GenericAction,TransportAction> actions=new HashMap<>();
    actions.put(ValidateQueryAction.INSTANCE,transportAction);
    client.initialize(actions,() -> "local",null);
  }
  @AfterClass public static void terminateThreadPool() throws InterruptedException {
    terminate(threadPool);
    threadPool=null;
    client=null;
    usageService=null;
    controller=null;
    action=null;
  }
  public void testRestValidateQueryAction() throws Exception {
    final String content="{\"query\":{\"bool\":{\"must\":{\"term\":{\"user\":\"kimchy\"}}}}}";
    final RestRequest request=createRestRequest(content);
    final FakeRestChannel channel=new FakeRestChannel(request,true,0);
    action.handleRequest(request,channel,client);
    assertThat(channel.responses().get(),equalTo(0));
    assertThat(channel.errors().get(),equalTo(0));
    assertNull(channel.capturedResponse());
  }
  public void testRestValidateQueryAction_emptyQuery() throws Exception {
    final String content="{\"query\":{}}";
    final RestRequest request=createRestRequest(content);
    final FakeRestChannel channel=new FakeRestChannel(request,true,0);
    action.handleRequest(request,channel,client);
    assertThat(channel.responses().get(),equalTo(1));
    assertThat(channel.errors().get(),equalTo(0));
    assertThat(channel.capturedResponse().content().utf8ToString(),containsString("{\"valid\":false}"));
  }
  public void testRestValidateQueryAction_malformedQuery() throws Exception {
    final String content="{malformed_json}";
    final RestRequest request=createRestRequest(content);
    final FakeRestChannel channel=new FakeRestChannel(request,true,0);
    action.handleRequest(request,channel,client);
    assertThat(channel.responses().get(),equalTo(1));
    assertThat(channel.errors().get(),equalTo(0));
    assertThat(channel.capturedResponse().content().utf8ToString(),containsString("{\"valid\":false}"));
  }
  private RestRequest createRestRequest(  String content){
    return new FakeRestRequest.Builder(xContentRegistry()).withPath("index1/type1/_validate/query").withParams(emptyMap()).withContent(new BytesArray(content),XContentType.JSON).build();
  }
}
