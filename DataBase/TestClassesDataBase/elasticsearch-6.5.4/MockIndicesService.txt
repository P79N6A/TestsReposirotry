/** 
 * Mock for  {@link IndicesService}
 */
protected class MockIndicesService implements AllocatedIndices<MockIndexShard,MockIndexService> {
  private volatile Map<String,MockIndexService> indices=emptyMap();
  @Override public synchronized MockIndexService createIndex(  IndexMetaData indexMetaData,  List<IndexEventListener> buildInIndexListener) throws IOException {
    MockIndexService indexService=new MockIndexService(new IndexSettings(indexMetaData,Settings.EMPTY));
    indices=newMapBuilder(indices).put(indexMetaData.getIndexUUID(),indexService).immutableMap();
    return indexService;
  }
  @Override public IndexMetaData verifyIndexIsDeleted(  Index index,  ClusterState state){
    return null;
  }
  @Override public void deleteUnassignedIndex(  String reason,  IndexMetaData metaData,  ClusterState clusterState){
  }
  @Override public synchronized void removeIndex(  Index index,  IndexRemovalReason reason,  String extraInfo){
    if (hasIndex(index)) {
      Map<String,MockIndexService> newIndices=new HashMap<>(indices);
      newIndices.remove(index.getUUID());
      indices=unmodifiableMap(newIndices);
    }
  }
  @Override @Nullable public MockIndexService indexService(  Index index){
    return indices.get(index.getUUID());
  }
  @Override public MockIndexShard createShard(  ShardRouting shardRouting,  RecoveryState recoveryState,  PeerRecoveryTargetService recoveryTargetService,  PeerRecoveryTargetService.RecoveryListener recoveryListener,  RepositoriesService repositoriesService,  Consumer<IndexShard.ShardFailure> onShardFailure,  Consumer<ShardId> globalCheckpointSyncer) throws IOException {
    failRandomly();
    MockIndexService indexService=indexService(recoveryState.getShardId().getIndex());
    MockIndexShard indexShard=indexService.createShard(shardRouting);
    indexShard.recoveryState=recoveryState;
    return indexShard;
  }
  @Override public void processPendingDeletes(  Index index,  IndexSettings indexSettings,  TimeValue timeValue) throws IOException, InterruptedException {
  }
  private boolean hasIndex(  Index index){
    return indices.containsKey(index.getUUID());
  }
  @Override public Iterator<MockIndexService> iterator(){
    return indices.values().iterator();
  }
}
