private final class MockTransport implements Transport {
  private ResponseHandlers responseHandlers=new ResponseHandlers();
  private volatile boolean randomConnectionExceptions=false;
  private TransportMessageListener listener=new TransportMessageListener(){
  }
;
  @Override public <Request extends TransportRequest>void registerRequestHandler(  RequestHandlerRegistry<Request> reg){
  }
  @Override public RequestHandlerRegistry getRequestHandler(  String action){
    return null;
  }
  @Override public void addMessageListener(  TransportMessageListener listener){
    this.listener=listener;
  }
  @Override public boolean removeMessageListener(  TransportMessageListener listener){
    throw new UnsupportedOperationException();
  }
  @Override public BoundTransportAddress boundAddress(){
    return null;
  }
  @Override public Map<String,BoundTransportAddress> profileBoundAddresses(){
    return null;
  }
  @Override public TransportAddress[] addressesFromString(  String address,  int perAddressLimit){
    return new TransportAddress[0];
  }
  @Override public Connection openConnection(  DiscoveryNode node,  ConnectionProfile connectionProfile){
    if (connectionProfile == null) {
      if (randomConnectionExceptions && randomBoolean()) {
        throw new ConnectTransportException(node,"simulated");
      }
    }
    Connection connection=new Connection(){
      @Override public DiscoveryNode getNode(){
        return node;
      }
      @Override public void sendRequest(      long requestId,      String action,      TransportRequest request,      TransportRequestOptions options) throws TransportException {
      }
      @Override public void addCloseListener(      ActionListener<Void> listener){
      }
      @Override public void close(){
      }
      @Override public boolean isClosed(){
        return false;
      }
    }
;
    return connection;
  }
  @Override public List<String> getLocalAddresses(){
    return null;
  }
  @Override public Lifecycle.State lifecycleState(){
    return null;
  }
  @Override public void addLifecycleListener(  LifecycleListener listener){
  }
  @Override public void removeLifecycleListener(  LifecycleListener listener){
  }
  @Override public void start(){
  }
  @Override public void stop(){
  }
  @Override public void close(){
  }
  @Override public TransportStats getStats(){
    throw new UnsupportedOperationException();
  }
  @Override public ResponseHandlers getResponseHandlers(){
    return responseHandlers;
  }
}
