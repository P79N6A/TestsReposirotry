public static class TestNode implements Releasable {
  public TestNode(  String name,  ThreadPool threadPool,  Settings settings){
    final Function<BoundTransportAddress,DiscoveryNode> boundTransportAddressDiscoveryNodeFunction=address -> {
      discoveryNode.set(new DiscoveryNode(name,address.publishAddress(),emptyMap(),emptySet(),Version.CURRENT));
      return discoveryNode.get();
    }
;
    transportService=new TransportService(settings,new MockTcpTransport(settings,threadPool,BigArrays.NON_RECYCLING_INSTANCE,new NoneCircuitBreakerService(),new NamedWriteableRegistry(ClusterModule.getNamedWriteables()),new NetworkService(Collections.emptyList())),threadPool,TransportService.NOOP_TRANSPORT_INTERCEPTOR,boundTransportAddressDiscoveryNodeFunction,null,Collections.emptySet()){
      @Override protected TaskManager createTaskManager(      Settings settings,      ThreadPool threadPool,      Set<String> taskHeaders){
        if (MockTaskManager.USE_MOCK_TASK_MANAGER_SETTING.get(settings)) {
          return new MockTaskManager(settings,threadPool,taskHeaders);
        }
 else {
          return super.createTaskManager(settings,threadPool,taskHeaders);
        }
      }
    }
;
    transportService.start();
    clusterService=createClusterService(threadPool,discoveryNode.get());
    clusterService.addStateApplier(transportService.getTaskManager());
    IndexNameExpressionResolver indexNameExpressionResolver=new IndexNameExpressionResolver(settings);
    ActionFilters actionFilters=new ActionFilters(emptySet());
    transportListTasksAction=new TransportListTasksAction(settings,threadPool,clusterService,transportService,actionFilters,indexNameExpressionResolver);
    transportCancelTasksAction=new TransportCancelTasksAction(settings,threadPool,clusterService,transportService,actionFilters,indexNameExpressionResolver);
    transportService.acceptIncomingRequests();
  }
  public final ClusterService clusterService;
  public final TransportService transportService;
  private final SetOnce<DiscoveryNode> discoveryNode=new SetOnce<>();
  public final TransportListTasksAction transportListTasksAction;
  public final TransportCancelTasksAction transportCancelTasksAction;
  @Override public void close(){
    clusterService.close();
    transportService.close();
  }
  public String getNodeId(){
    return discoveryNode().getId();
  }
  public DiscoveryNode discoveryNode(){
    return discoveryNode.get();
  }
}
