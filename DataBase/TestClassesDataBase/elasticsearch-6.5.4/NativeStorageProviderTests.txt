public class NativeStorageProviderTests extends ESTestCase {
  public void testTmpStorage() throws IOException {
    Map<Path,Long> storage=new HashMap<>();
    Path tmpDir=createTempDir();
    storage.put(tmpDir,new ByteSizeValue(6,ByteSizeUnit.GB).getBytes());
    NativeStorageProvider storageProvider=createNativeStorageProvider(storage);
    Assert.assertNotNull(storageProvider.tryGetLocalTmpStorage(randomAlphaOfLengthBetween(4,10),new ByteSizeValue(100,ByteSizeUnit.BYTES)));
    Assert.assertNull(storageProvider.tryGetLocalTmpStorage(randomAlphaOfLengthBetween(4,10),new ByteSizeValue(1024 * 1024 * 1024 + 1,ByteSizeUnit.BYTES)));
    String id=randomAlphaOfLengthBetween(4,10);
    Path path=storageProvider.tryGetLocalTmpStorage(id,new ByteSizeValue(1,ByteSizeUnit.GB));
    Assert.assertNotNull(path);
    Assert.assertEquals(tmpDir.resolve("ml-local-data").resolve("tmp").resolve(id).toString(),path.toString());
  }
  public void testTmpStorageChooseDisk() throws IOException {
    Map<Path,Long> storage=new HashMap<>();
    Path tmpDir=createTempDir();
    Path disk1=tmpDir.resolve(randomAlphaOfLengthBetween(4,10));
    storage.put(disk1,new ByteSizeValue(1,ByteSizeUnit.GB).getBytes());
    Path disk2=tmpDir.resolve(randomAlphaOfLengthBetween(4,10));
    storage.put(disk2,new ByteSizeValue(20,ByteSizeUnit.GB).getBytes());
    NativeStorageProvider storageProvider=createNativeStorageProvider(storage);
    String id=randomAlphaOfLengthBetween(4,10);
    Path path=storageProvider.tryGetLocalTmpStorage(id,new ByteSizeValue(1,ByteSizeUnit.GB));
    Assert.assertNotNull(path);
    Assert.assertEquals(disk2.resolve("ml-local-data").resolve("tmp").resolve(id).toString(),path.toString());
  }
  public void testTmpStorageCleanup() throws IOException {
    Map<Path,Long> storage=new HashMap<>();
    Path tmpDir=createTempDir();
    storage.put(tmpDir,new ByteSizeValue(6,ByteSizeUnit.GB).getBytes());
    NativeStorageProvider storageProvider=createNativeStorageProvider(storage);
    String id=randomAlphaOfLengthBetween(4,10);
    Path path=storageProvider.tryGetLocalTmpStorage(id,new ByteSizeValue(1,ByteSizeUnit.KB));
    Assert.assertTrue(Files.exists(path));
    Path testFile=PathUtils.get(path.toString(),"testFile");
    BufferedWriter writer=Files.newBufferedWriter(testFile,StandardCharsets.UTF_8);
    writer.write("created by NativeStorageProviderTests::testTmpStorageDelete");
    writer.close();
    Assert.assertTrue(Files.exists(testFile));
    Assert.assertTrue(Files.isRegularFile(testFile));
    storageProvider.cleanupLocalTmpStorage(path);
    Assert.assertFalse(Files.exists(testFile));
    Assert.assertFalse(Files.exists(path));
  }
  public void testTmpStorageCleanupOnStart() throws IOException {
    Map<Path,Long> storage=new HashMap<>();
    Path tmpDir=createTempDir();
    storage.put(tmpDir,new ByteSizeValue(6,ByteSizeUnit.GB).getBytes());
    NativeStorageProvider storageProvider=createNativeStorageProvider(storage);
    String id=randomAlphaOfLengthBetween(4,10);
    Path path=storageProvider.tryGetLocalTmpStorage(id,new ByteSizeValue(1,ByteSizeUnit.KB));
    Assert.assertTrue(Files.exists(path));
    Path testFile=PathUtils.get(path.toString(),"testFile");
    BufferedWriter writer=Files.newBufferedWriter(testFile,StandardCharsets.UTF_8);
    writer.write("created by NativeStorageProviderTests::testTmpStorageWipe");
    writer.close();
    Assert.assertTrue(Files.exists(testFile));
    Assert.assertTrue(Files.isRegularFile(testFile));
    storageProvider=createNativeStorageProvider(storage);
    storageProvider.cleanupLocalTmpStorageInCaseOfUncleanShutdown();
    Assert.assertFalse(Files.exists(testFile));
    Assert.assertFalse(Files.exists(path));
  }
  private NativeStorageProvider createNativeStorageProvider(  Map<Path,Long> paths) throws IOException {
    Environment environment=mock(Environment.class);
    when(environment.dataFiles()).thenReturn(paths.keySet().toArray(new Path[paths.size()]));
    NativeStorageProvider storageProvider=spy(new NativeStorageProvider(environment,new ByteSizeValue(5,ByteSizeUnit.GB)));
    doAnswer(invocation -> {
      return paths.getOrDefault(invocation.getArguments()[0],Long.valueOf(0)).longValue();
    }
).when(storageProvider).getUsableSpace(any(Path.class));
    return storageProvider;
  }
}
