public class CustomQueryParserIT extends ESIntegTestCase {
  @Override protected Collection<Class<? extends Plugin>> nodePlugins(){
    return Arrays.asList(DummyQueryParserPlugin.class);
  }
  @Override protected Collection<Class<? extends Plugin>> transportClientPlugins(){
    return Arrays.asList(DummyQueryParserPlugin.class);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    createIndex("test");
    ensureGreen();
    client().prepareIndex("index","type","1").setSource("field","value").get();
    refresh();
  }
  @Override protected int numberOfShards(){
    return cluster().numDataNodes();
  }
  public void testCustomDummyQuery(){
    assertHitCount(client().prepareSearch("index").setQuery(new DummyQueryBuilder()).get(),1L);
  }
  public void testCustomDummyQueryWithinBooleanQuery(){
    assertHitCount(client().prepareSearch("index").setQuery(new BoolQueryBuilder().must(new DummyQueryBuilder())).get(),1L);
  }
  private static QueryShardContext queryShardContext(){
    IndicesService indicesService=internalCluster().getDataNodeInstance(IndicesService.class);
    return indicesService.indexServiceSafe(resolveIndex("index")).newQueryShardContext(randomInt(20),null,() -> {
      throw new UnsupportedOperationException();
    }
,null);
  }
  public void testConstantScoreParsesFilter() throws Exception {
    Query q=constantScoreQuery(new DummyQueryBuilder()).toQuery(queryShardContext());
    Query inner=((ConstantScoreQuery)q).getQuery();
    assertThat(inner,instanceOf(DummyQueryParserPlugin.DummyQuery.class));
    assertEquals(true,((DummyQueryParserPlugin.DummyQuery)inner).isFilter);
  }
  public void testBooleanParsesFilter() throws Exception {
    Query q=boolQuery().should(new DummyQueryBuilder()).must(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).toQuery(queryShardContext());
    assertThat(q,instanceOf(BooleanQuery.class));
    BooleanQuery bq=(BooleanQuery)q;
    assertEquals(4,bq.clauses().size());
    for (    BooleanClause clause : bq.clauses()) {
      DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
        assertEquals(true,dummy.isFilter);
      break;
case MUST:
case SHOULD:
    assertEquals(false,dummy.isFilter);
  break;
default :
throw new AssertionError();
}
}
q=boolQuery().should(new DummyQueryBuilder()).should(new DummyQueryBuilder()).must(new DummyQueryBuilder()).must(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).toQuery(queryShardContext());
assertThat(q,instanceOf(BooleanQuery.class));
bq=(BooleanQuery)q;
assertEquals(8,bq.clauses().size());
for (BooleanClause clause : bq.clauses()) {
DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
assertEquals(true,dummy.isFilter);
break;
case MUST:
case SHOULD:
assertEquals(false,dummy.isFilter);
break;
default :
throw new AssertionError();
}
}
}
}
