public class LoggingListenerTests extends ESTestCase {
  public void testTestRunStartedSupportsClassInDefaultPackage() throws Exception {
    LoggingListener loggingListener=new LoggingListener();
    Description description=Description.createTestDescription(Class.forName("Dummy"),"dummy");
    loggingListener.testRunStarted(description);
  }
  public void testCustomLevelPerMethod() throws Exception {
    LoggingListener loggingListener=new LoggingListener();
    Description suiteDescription=Description.createSuiteDescription(TestClass.class);
    Logger xyzLogger=Loggers.getLogger("xyz");
    Logger abcLogger=Loggers.getLogger("abc");
    final Level level=LogManager.getRootLogger().getLevel();
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    loggingListener.testRunStarted(suiteDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    Method method=TestClass.class.getMethod("annotatedTestMethod");
    TestLogging annotation=method.getAnnotation(TestLogging.class);
    Description testDescription=Description.createTestDescription(LoggingListenerTests.class,"annotatedTestMethod",annotation);
    loggingListener.testStarted(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(Level.TRACE));
    assertThat(abcLogger.getLevel(),equalTo(level));
    loggingListener.testFinished(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    loggingListener.testRunFinished(new Result());
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
  }
  public void testCustomLevelPerClass() throws Exception {
    LoggingListener loggingListener=new LoggingListener();
    Description suiteDescription=Description.createSuiteDescription(AnnotatedTestClass.class);
    Logger abcLogger=Loggers.getLogger("abc");
    Logger xyzLogger=Loggers.getLogger("xyz");
    Logger fooLogger=Loggers.getLogger("foo");
    Logger fooBarLogger=Loggers.getLogger("foo.bar");
    final Level level=LogManager.getRootLogger().getLevel();
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    assertThat(fooLogger.getLevel(),equalTo(level));
    assertThat(fooBarLogger.getLevel(),equalTo(level));
    loggingListener.testRunStarted(suiteDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooBarLogger.getLevel(),equalTo(Level.ERROR));
    Description testDescription=Description.createTestDescription(LoggingListenerTests.class,"test");
    loggingListener.testStarted(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooBarLogger.getLevel(),equalTo(Level.ERROR));
    loggingListener.testFinished(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooLogger.getLevel(),equalTo(Level.WARN));
    assertThat(fooBarLogger.getLevel(),equalTo(Level.ERROR));
    loggingListener.testRunFinished(new Result());
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    assertThat(fooLogger.getLevel(),equalTo(level));
    assertThat(fooBarLogger.getLevel(),equalTo(level));
  }
  public void testCustomLevelPerClassAndPerMethod() throws Exception {
    LoggingListener loggingListener=new LoggingListener();
    Description suiteDescription=Description.createSuiteDescription(AnnotatedTestClass.class);
    Logger abcLogger=Loggers.getLogger("abc");
    Logger xyzLogger=Loggers.getLogger("xyz");
    final Level level=LogManager.getRootLogger().getLevel();
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
    loggingListener.testRunStarted(suiteDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    Method method=TestClass.class.getMethod("annotatedTestMethod");
    TestLogging annotation=method.getAnnotation(TestLogging.class);
    Description testDescription=Description.createTestDescription(LoggingListenerTests.class,"annotatedTestMethod",annotation);
    loggingListener.testStarted(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(Level.TRACE));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    loggingListener.testFinished(testDescription);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    Method method2=TestClass.class.getMethod("annotatedTestMethod2");
    TestLogging annotation2=method2.getAnnotation(TestLogging.class);
    Description testDescription2=Description.createTestDescription(LoggingListenerTests.class,"annotatedTestMethod2",annotation2);
    loggingListener.testStarted(testDescription2);
    assertThat(xyzLogger.getLevel(),equalTo(Level.DEBUG));
    assertThat(abcLogger.getLevel(),equalTo(Level.TRACE));
    loggingListener.testFinished(testDescription2);
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(Level.WARN));
    loggingListener.testRunFinished(new Result());
    assertThat(xyzLogger.getLevel(),equalTo(level));
    assertThat(abcLogger.getLevel(),equalTo(level));
  }
  public void testInvalidClassTestLoggingAnnotation() throws Exception {
    final LoggingListener loggingListener=new LoggingListener();
    final Description suiteDescription=Description.createSuiteDescription(InvalidClass.class);
    final IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> loggingListener.testRunStarted(suiteDescription));
    assertThat(e.getMessage(),equalTo("invalid test logging annotation [abc]"));
  }
  public void testInvalidMethodTestLoggingAnnotation() throws Exception {
    final LoggingListener loggingListener=new LoggingListener();
    final Description suiteDescription=Description.createSuiteDescription(InvalidMethod.class);
    loggingListener.testRunStarted(suiteDescription);
    final Method method=InvalidMethod.class.getMethod("invalidMethod");
    final TestLogging annotation=method.getAnnotation(TestLogging.class);
    Description testDescription=Description.createTestDescription(InvalidMethod.class,"invalidMethod",annotation);
    final IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> loggingListener.testStarted(testDescription));
    assertThat(e.getMessage(),equalTo("invalid test logging annotation [abc:INFO:WARN]"));
  }
  /** 
 * Dummy class used to create a JUnit suite description that has the  {@link TestLogging} annotation.
 */
@TestLogging("abc:WARN,foo:WARN,foo.bar:ERROR") public static class AnnotatedTestClass {
  }
  /** 
 * Dummy class used to create a JUnit suite description that doesn't have the  {@link TestLogging} annotation, but its test methods haveit.
 */
public static class TestClass {
    @SuppressWarnings("unused") @TestLogging("xyz:TRACE,foo:WARN,foo.bar:ERROR") public void annotatedTestMethod(){
    }
    @SuppressWarnings("unused") @TestLogging("abc:TRACE,xyz:DEBUG") public void annotatedTestMethod2(){
    }
  }
  /** 
 * Dummy class with an invalid  {@link TestLogging} annotation.
 */
@TestLogging("abc") public static class InvalidClass {
  }
  /** 
 * Dummy class with an invalid  {@link TestLogging} annotation on a method.
 */
public static class InvalidMethod {
    @SuppressWarnings("unused") @TestLogging("abc:INFO:WARN") public void invalidMethod(){
    }
  }
}
