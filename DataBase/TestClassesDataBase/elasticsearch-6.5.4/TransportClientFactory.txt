static class TransportClientFactory {
  private final boolean sniff;
  private final Settings settings;
  private final Path baseDir;
  private final Collection<Class<? extends Plugin>> plugins;
  TransportClientFactory(  boolean sniff,  Settings settings,  Path baseDir,  Collection<Class<? extends Plugin>> plugins){
    this.sniff=sniff;
    this.settings=settings != null ? settings : Settings.EMPTY;
    this.baseDir=baseDir;
    this.plugins=plugins;
  }
  public Client client(  Node node,  String clusterName){
    TransportAddress addr=node.injector().getInstance(TransportService.class).boundAddress().publishAddress();
    Settings nodeSettings=node.settings();
    Builder builder=Settings.builder().put("client.transport.nodes_sampler_interval","1s").put(Environment.PATH_HOME_SETTING.getKey(),baseDir).put("node.name",TRANSPORT_CLIENT_PREFIX + node.settings().get("node.name")).put(ClusterName.CLUSTER_NAME_SETTING.getKey(),clusterName).put("client.transport.sniff",sniff).put("logger.prefix",nodeSettings.get("logger.prefix","")).put("logger.level",nodeSettings.get("logger.level","INFO")).put(settings);
    if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings)) {
      builder.put(NetworkModule.TRANSPORT_TYPE_SETTING.getKey(),NetworkModule.TRANSPORT_TYPE_SETTING.get(settings));
    }
 else {
      builder.put(NetworkModule.TRANSPORT_TYPE_SETTING.getKey(),getTestTransportType());
    }
    TransportClient client=new MockTransportClient(builder.build(),plugins);
    client.addTransportAddress(addr);
    return client;
  }
}
