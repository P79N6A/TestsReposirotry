public static class TestTasksResponse extends BaseTasksResponse {
  private List<TestTaskResponse> tasks;
  public TestTasksResponse(){
    super(null,null);
  }
  public TestTasksResponse(  List<TestTaskResponse> tasks,  List<TaskOperationFailure> taskFailures,  List<? extends FailedNodeException> nodeFailures){
    super(taskFailures,nodeFailures);
    this.tasks=tasks == null ? Collections.emptyList() : Collections.unmodifiableList(new ArrayList<>(tasks));
  }
  @Override public void readFrom(  StreamInput in) throws IOException {
    super.readFrom(in);
    tasks=in.readList(TestTaskResponse::new);
  }
  @Override public void writeTo(  StreamOutput out) throws IOException {
    super.writeTo(out);
    out.writeList(tasks);
  }
  public List<TestTaskResponse> getTasks(){
    return tasks;
  }
}
