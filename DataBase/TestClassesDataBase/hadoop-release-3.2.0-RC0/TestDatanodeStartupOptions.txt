/** 
 * This test verifies DataNode command line processing.
 */
public class TestDatanodeStartupOptions {
  private Configuration conf=null;
  /** 
 * Process the given arg list as command line arguments to the DataNode to make sure we get the expected result. If the expected result is success then further validate that the parsed startup option is the same as what was expected.
 * @param expectSuccess
 * @param expectedOption
 * @param conf
 * @param arg
 */
  private static void checkExpected(  boolean expectSuccess,  StartupOption expectedOption,  Configuration conf,  String... arg){
    String[] args=new String[arg.length];
    int i=0;
    for (    String currentArg : arg) {
      args[i++]=currentArg;
    }
    boolean returnValue=DataNode.parseArguments(args,conf);
    StartupOption option=DataNode.getStartupOption(conf);
    assertThat(returnValue,is(expectSuccess));
    if (expectSuccess) {
      assertThat(option,is(expectedOption));
    }
  }
  /** 
 * Reinitialize configuration before every test since DN stores the parsed StartupOption in the configuration.
 */
  @Before public void initConfiguration(){
    conf=new HdfsConfiguration();
  }
  /** 
 * A few options that should all parse successfully.
 */
  @Test(timeout=60000) public void testStartupSuccess(){
    checkExpected(true,StartupOption.REGULAR,conf);
    checkExpected(true,StartupOption.REGULAR,conf,"-regular");
    checkExpected(true,StartupOption.REGULAR,conf,"-REGULAR");
    checkExpected(true,StartupOption.ROLLBACK,conf,"-rollback");
  }
  /** 
 * A few options that should all fail to parse.
 */
  @Test(timeout=60000) public void testStartupFailure(){
    checkExpected(false,StartupOption.REGULAR,conf,"unknownoption");
    checkExpected(false,StartupOption.REGULAR,conf,"-regular -rollback");
  }
}
