/** 
 * Test StoragePolicySatisfy admin commands.
 */
public class TestStoragePolicySatisfyAdminCommands {
  private static final short REPL=1;
  private static final int SIZE=128;
  private Configuration conf=null;
  private MiniDFSCluster cluster=null;
  private DistributedFileSystem dfs=null;
  private StoragePolicySatisfier externalSps=null;
  @Before public void clusterSetUp() throws IOException, URISyntaxException {
    conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.EXTERNAL.toString());
    conf.setLong(DFSConfigKeys.DFS_SPS_DATANODE_CACHE_REFRESH_INTERVAL_MS,1000);
    StorageType[][] newtypes=new StorageType[][]{{StorageType.ARCHIVE,StorageType.DISK}};
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPL).storageTypes(newtypes).build();
    cluster.waitActive();
    dfs=cluster.getFileSystem();
    NameNodeConnector nnc=DFSTestUtil.getNameNodeConnector(conf,HdfsServerConstants.MOVER_ID_PATH,1,false);
    StoragePolicySatisfier externalSps=new StoragePolicySatisfier(conf);
    Context externalCtxt=new ExternalSPSContext(externalSps,nnc);
    externalSps.init(externalCtxt);
    externalSps.start(StoragePolicySatisfierMode.EXTERNAL);
  }
  @After public void clusterShutdown() throws IOException {
    if (dfs != null) {
      dfs.close();
      dfs=null;
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    if (externalSps != null) {
      externalSps.stopGracefully();
    }
  }
  @Test(timeout=30000) public void testStoragePolicySatisfierCommand() throws Exception {
    final String file="/testStoragePolicySatisfierCommand";
    DFSTestUtil.createFile(dfs,new Path(file),SIZE,REPL,0);
    final StoragePolicyAdmin admin=new StoragePolicyAdmin(conf);
    DFSTestUtil.toolRun(admin,"-getStoragePolicy -path " + file,0,"The storage policy of " + file + " is unspecified");
    DFSTestUtil.toolRun(admin,"-setStoragePolicy -path " + file + " -policy COLD",0,"Set storage policy COLD on " + file.toString());
    DFSTestUtil.toolRun(admin,"-satisfyStoragePolicy -path " + file,0,"Scheduled blocks to move based on the current storage policy on " + file.toString());
    DFSTestUtil.waitExpectedStorageType(file,StorageType.ARCHIVE,1,30000,dfs);
  }
}
