public static class TestDelegationTokenSecretManager extends AbstractDelegationTokenSecretManager<TestDelegationTokenIdentifier> {
  public boolean isStoreNewMasterKeyCalled=false;
  public boolean isRemoveStoredMasterKeyCalled=false;
  public boolean isStoreNewTokenCalled=false;
  public boolean isRemoveStoredTokenCalled=false;
  public boolean isUpdateStoredTokenCalled=false;
  public TestDelegationTokenSecretManager(  long delegationKeyUpdateInterval,  long delegationTokenMaxLifetime,  long delegationTokenRenewInterval,  long delegationTokenRemoverScanInterval){
    super(delegationKeyUpdateInterval,delegationTokenMaxLifetime,delegationTokenRenewInterval,delegationTokenRemoverScanInterval);
  }
  @Override public TestDelegationTokenIdentifier createIdentifier(){
    return new TestDelegationTokenIdentifier();
  }
  @Override protected byte[] createPassword(  TestDelegationTokenIdentifier t){
    return super.createPassword(t);
  }
  @Override protected void storeNewMasterKey(  DelegationKey key) throws IOException {
    isStoreNewMasterKeyCalled=true;
    super.storeNewMasterKey(key);
  }
  @Override protected void removeStoredMasterKey(  DelegationKey key){
    isRemoveStoredMasterKeyCalled=true;
    Assert.assertFalse(key.equals(allKeys.get(currentId)));
  }
  @Override protected void storeNewToken(  TestDelegationTokenIdentifier ident,  long renewDate) throws IOException {
    super.storeNewToken(ident,renewDate);
    isStoreNewTokenCalled=true;
  }
  @Override protected void removeStoredToken(  TestDelegationTokenIdentifier ident) throws IOException {
    super.removeStoredToken(ident);
    isRemoveStoredTokenCalled=true;
  }
  @Override protected void updateStoredToken(  TestDelegationTokenIdentifier ident,  long renewDate) throws IOException {
    super.updateStoredToken(ident,renewDate);
    isUpdateStoredTokenCalled=true;
  }
  public byte[] createPassword(  TestDelegationTokenIdentifier t,  DelegationKey key){
    return SecretManager.createPassword(t.getBytes(),key.getKey());
  }
  public Map<TestDelegationTokenIdentifier,DelegationTokenInformation> getAllTokens(){
    return currentTokens;
  }
  public DelegationKey getKey(  TestDelegationTokenIdentifier id){
    return allKeys.get(id.getMasterKeyId());
  }
}
