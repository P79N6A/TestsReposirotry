/** 
 * Test WebHDFS with multiple NameNodes
 */
public class TestWebHdfsWithMultipleNameNodes {
  static final Logger LOG=WebHdfsTestUtil.LOG;
  static private void setLogLevel(){
    GenericTestUtils.setLogLevel(LOG,Level.TRACE);
    GenericTestUtils.setLogLevel(NamenodeWebHdfsMethods.LOG,Level.TRACE);
    DFSTestUtil.setNameNodeLogLevel(org.apache.log4j.Level.TRACE);
  }
  private static final Configuration conf=new HdfsConfiguration();
  private static MiniDFSCluster cluster;
  private static WebHdfsFileSystem[] webhdfs;
  @BeforeClass public static void setupTest(){
    setLogLevel();
    try {
      setupCluster(4,3);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  private static void setupCluster(  final int nNameNodes,  final int nDataNodes) throws Exception {
    LOG.info("nNameNodes=" + nNameNodes + ", nDataNodes="+ nDataNodes);
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(nNameNodes)).numDataNodes(nDataNodes).build();
    cluster.waitActive();
    webhdfs=new WebHdfsFileSystem[nNameNodes];
    for (int i=0; i < webhdfs.length; i++) {
      final InetSocketAddress addr=cluster.getNameNode(i).getHttpAddress();
      final String uri=WebHdfsConstants.WEBHDFS_SCHEME + "://" + addr.getHostName()+ ":"+ addr.getPort()+ "/";
      webhdfs[i]=(WebHdfsFileSystem)FileSystem.get(new URI(uri),conf);
    }
  }
  @AfterClass public static void shutdownCluster(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  private static String createString(  String prefix,  int i){
    final String suffix="*********************".substring(0,i + 1);
    return prefix + i + suffix+ "\n";
  }
  private static String[] createStrings(  String prefix,  String name){
    final String[] strings=new String[webhdfs.length];
    for (int i=0; i < webhdfs.length; i++) {
      strings[i]=createString(prefix,i);
      LOG.info(name + "[" + i+ "] = "+ strings[i]);
    }
    return strings;
  }
  @Test public void testRedirect() throws Exception {
    final String dir="/testRedirect/";
    final String filename="file";
    final Path p=new Path(dir,filename);
    final String[] writeStrings=createStrings("write to webhdfs ","write");
    final String[] appendStrings=createStrings("append to webhdfs ","append");
    for (int i=0; i < webhdfs.length; i++) {
      final FSDataOutputStream out=webhdfs[i].create(p);
      out.write(writeStrings[i].getBytes());
      out.close();
    }
    for (int i=0; i < webhdfs.length; i++) {
      final long expected=writeStrings[i].length();
      Assert.assertEquals(expected,webhdfs[i].getFileStatus(p).getLen());
    }
    for (int i=0; i < webhdfs.length; i++) {
      final FSDataInputStream in=webhdfs[i].open(p);
      for (int c, j=0; (c=in.read()) != -1; j++) {
        Assert.assertEquals(writeStrings[i].charAt(j),c);
      }
      in.close();
    }
    for (int i=0; i < webhdfs.length; i++) {
      final FSDataOutputStream out=webhdfs[i].append(p);
      out.write(appendStrings[i].getBytes());
      out.close();
    }
    for (int i=0; i < webhdfs.length; i++) {
      final long expected=writeStrings[i].length() + appendStrings[i].length();
      Assert.assertEquals(expected,webhdfs[i].getFileStatus(p).getLen());
    }
    for (int i=0; i < webhdfs.length; i++) {
      final StringBuilder b=new StringBuilder();
      final FSDataInputStream in=webhdfs[i].open(p);
      for (int c; (c=in.read()) != -1; ) {
        b.append((char)c);
      }
      final int wlen=writeStrings[i].length();
      Assert.assertEquals(writeStrings[i],b.substring(0,wlen));
      Assert.assertEquals(appendStrings[i],b.substring(wlen));
      in.close();
    }
  }
}
