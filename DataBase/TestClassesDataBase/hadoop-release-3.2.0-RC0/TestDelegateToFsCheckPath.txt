/** 
 * The default port of DelegateToFileSystem is set from child file system.
 */
public class TestDelegateToFsCheckPath {
  @Test public void testCheckPathWithoutDefaultPort() throws URISyntaxException, IOException {
    URI uri=new URI("dummy://dummy-host");
    AbstractFileSystem afs=new DummyDelegateToFileSystem(uri,new UnOverrideDefaultPortFileSystem());
    afs.checkPath(new Path("dummy://dummy-host"));
  }
  @Test public void testCheckPathWithDefaultPort() throws URISyntaxException, IOException {
    URI uri=new URI(String.format("dummy://dummy-host:%d",OverrideDefaultPortFileSystem.DEFAULT_PORT));
    AbstractFileSystem afs=new DummyDelegateToFileSystem(uri,new OverrideDefaultPortFileSystem());
    afs.checkPath(new Path("dummy://dummy-host/user/john/test"));
  }
private static class DummyDelegateToFileSystem extends DelegateToFileSystem {
    public DummyDelegateToFileSystem(    URI uri,    FileSystem fs) throws URISyntaxException, IOException {
      super(uri,fs,new Configuration(),"dummy",false);
    }
  }
  /** 
 * UnOverrideDefaultPortFileSystem does not define default port. The default port defined by AbstractFilesystem is used in this case. (default 0).
 */
private static class UnOverrideDefaultPortFileSystem extends FileSystem {
    @Override public URI getUri(){
      return null;
    }
    @Override public FSDataInputStream open(    Path f,    int bufferSize) throws IOException {
      return null;
    }
    @Override public FSDataOutputStream create(    Path f,    FsPermission permission,    boolean overwrite,    int bufferSize,    short replication,    long blockSize,    Progressable progress) throws IOException {
      return null;
    }
    @Override public FSDataOutputStream append(    Path f,    int bufferSize,    Progressable progress) throws IOException {
      return null;
    }
    @Override public boolean rename(    Path src,    Path dst) throws IOException {
      return false;
    }
    @Override public boolean delete(    Path f,    boolean recursive) throws IOException {
      return false;
    }
    @Override public FileStatus[] listStatus(    Path f) throws FileNotFoundException, IOException {
      return new FileStatus[0];
    }
    @Override public void setWorkingDirectory(    Path newDir){
    }
    @Override public Path getWorkingDirectory(){
      return null;
    }
    @Override public boolean mkdirs(    Path f,    FsPermission permission) throws IOException {
      return false;
    }
    @Override public FileStatus getFileStatus(    Path f) throws IOException {
      return null;
    }
  }
  /** 
 * OverrideDefaultPortFileSystem defines default port.
 */
private static class OverrideDefaultPortFileSystem extends UnOverrideDefaultPortFileSystem {
    private static final int DEFAULT_PORT=1234;
    @Override public int getDefaultPort(){
      return DEFAULT_PORT;
    }
  }
}
