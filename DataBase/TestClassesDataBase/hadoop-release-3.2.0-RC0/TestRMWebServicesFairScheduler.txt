/** 
 * Tests RM Webservices fair scheduler resources.
 */
public class TestRMWebServicesFairScheduler extends JerseyTestBase {
  private static MockRM rm;
  private static YarnConfiguration conf;
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      bind(JAXBContextResolver.class);
      bind(RMWebServices.class);
      bind(GenericExceptionHandler.class);
      conf=new YarnConfiguration();
      conf.setClass(YarnConfiguration.RM_SCHEDULER,FairScheduler.class,ResourceScheduler.class);
      rm=new MockRM(conf);
      bind(ResourceManager.class).toInstance(rm);
      serve("/*").with(GuiceContainer.class);
    }
  }
static {
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestRMWebServicesFairScheduler(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.yarn.server.resourcemanager.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testClusterScheduler() throws JSONException {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    verifyClusterScheduler(json);
  }
  @Test public void testClusterSchedulerSlash() throws JSONException {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    verifyClusterScheduler(json);
  }
  @Test public void testClusterSchedulerWithSubQueues() throws JSONException {
    FairScheduler scheduler=(FairScheduler)rm.getResourceScheduler();
    QueueManager queueManager=scheduler.getQueueManager();
    queueManager.getLeafQueue("root.q.subqueue1",true);
    queueManager.getLeafQueue("root.q.subqueue2",true);
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    JSONArray subQueueInfo=json.getJSONObject("scheduler").getJSONObject("schedulerInfo").getJSONObject("rootQueue").getJSONObject("childQueues").getJSONArray("queue").getJSONObject(1).getJSONObject("childQueues").getJSONArray("queue");
    assertEquals(2,subQueueInfo.length());
    try {
      subQueueInfo.getJSONObject(1).getJSONObject("childQueues");
      fail("FairSchedulerQueueInfo should omit field 'childQueues'" + "if child queue is empty.");
    }
 catch (    JSONException je) {
      assertEquals("JSONObject[\"childQueues\"] not found.",je.getMessage());
    }
  }
  private void verifyClusterScheduler(  JSONObject json) throws JSONException {
    assertEquals("incorrect number of elements",1,json.length());
    JSONObject info=json.getJSONObject("scheduler");
    assertEquals("incorrect number of elements",1,info.length());
    info=info.getJSONObject("schedulerInfo");
    assertEquals("incorrect number of elements",2,info.length());
    JSONObject rootQueue=info.getJSONObject("rootQueue");
    assertEquals("root",rootQueue.getString("queueName"));
  }
}
