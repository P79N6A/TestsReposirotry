/** 
 * Test class for  {@link FederationPolicyInitializationContextValidator}.
 */
public class TestFederationPolicyInitializationContextValidator {
  private SubClusterPolicyConfiguration goodConfig;
  private SubClusterResolver goodSR;
  private FederationStateStoreFacade goodFacade;
  private SubClusterId goodHome;
  private FederationPolicyInitializationContext context;
  @Before public void setUp() throws Exception {
    goodFacade=FederationPoliciesTestUtil.initFacade();
    goodConfig=new MockPolicyManager().serializeConf();
    goodSR=FederationPoliciesTestUtil.initResolver();
    goodHome=SubClusterId.newInstance("homesubcluster");
    context=new FederationPolicyInitializationContext(goodConfig,goodSR,goodFacade,goodHome);
  }
  @Test public void correcInit() throws Exception {
    FederationPolicyInitializationContextValidator.validate(context,MockPolicyManager.class.getCanonicalName());
  }
  @Test(expected=FederationPolicyInitializationException.class) public void nullContext() throws Exception {
    FederationPolicyInitializationContextValidator.validate(null,MockPolicyManager.class.getCanonicalName());
  }
  @Test(expected=FederationPolicyInitializationException.class) public void nullType() throws Exception {
    FederationPolicyInitializationContextValidator.validate(context,null);
  }
  @Test(expected=FederationPolicyInitializationException.class) public void wrongType() throws Exception {
    FederationPolicyInitializationContextValidator.validate(context,"WrongType");
  }
  @Test(expected=FederationPolicyInitializationException.class) public void nullConf() throws Exception {
    context.setSubClusterPolicyConfiguration(null);
    FederationPolicyInitializationContextValidator.validate(context,MockPolicyManager.class.getCanonicalName());
  }
  @Test(expected=FederationPolicyInitializationException.class) public void nullResolver() throws Exception {
    context.setFederationSubclusterResolver(null);
    FederationPolicyInitializationContextValidator.validate(context,MockPolicyManager.class.getCanonicalName());
  }
  @Test(expected=FederationPolicyInitializationException.class) public void nullFacade() throws Exception {
    context.setFederationStateStoreFacade(null);
    FederationPolicyInitializationContextValidator.validate(context,MockPolicyManager.class.getCanonicalName());
  }
private class MockPolicyManager implements FederationPolicyManager {
    @Override public FederationAMRMProxyPolicy getAMRMPolicy(    FederationPolicyInitializationContext policyContext,    FederationAMRMProxyPolicy oldInstance) throws FederationPolicyInitializationException {
      return null;
    }
    @Override public FederationRouterPolicy getRouterPolicy(    FederationPolicyInitializationContext policyContext,    FederationRouterPolicy oldInstance) throws FederationPolicyInitializationException {
      return null;
    }
    @Override public SubClusterPolicyConfiguration serializeConf() throws FederationPolicyInitializationException {
      ByteBuffer buf=ByteBuffer.allocate(0);
      return SubClusterPolicyConfiguration.newInstance("queue1",this.getClass().getCanonicalName(),buf);
    }
    @Override public String getQueue(){
      return "default";
    }
    @Override public void setQueue(    String queue){
    }
  }
}
