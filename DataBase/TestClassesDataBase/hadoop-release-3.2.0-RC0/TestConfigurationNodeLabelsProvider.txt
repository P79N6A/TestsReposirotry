public class TestConfigurationNodeLabelsProvider extends NodeLabelTestBase {
  protected static File testRootDir=new File("target",TestConfigurationNodeLabelsProvider.class.getName() + "-localDir").getAbsoluteFile();
  final static File nodeLabelsConfigFile=new File(testRootDir,"yarn-site.xml");
  private static XMLPathClassLoader loader;
  private ConfigurationNodeLabelsProvider nodeLabelsProvider;
  private static ClassLoader classContextClassLoader;
  @BeforeClass public static void create(){
    classContextClassLoader=Thread.currentThread().getContextClassLoader();
    loader=new XMLPathClassLoader(TestConfigurationNodeLabelsProvider.class.getClassLoader());
    testRootDir.mkdirs();
    Thread.currentThread().setContextClassLoader(loader);
  }
  @Before public void setup(){
    nodeLabelsProvider=new ConfigurationNodeLabelsProvider();
  }
  @After public void tearDown() throws Exception {
    if (nodeLabelsProvider != null) {
      nodeLabelsProvider.close();
      nodeLabelsProvider.stop();
    }
  }
  @AfterClass public static void remove() throws Exception {
    if (classContextClassLoader != null) {
      Thread.currentThread().setContextClassLoader(classContextClassLoader);
    }
    if (testRootDir.exists()) {
      FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()),true);
    }
  }
  @Test public void testNodeLabelsFromConfig() throws IOException, InterruptedException {
    Configuration conf=new Configuration();
    modifyConf("A");
    nodeLabelsProvider.init(conf);
    nodeLabelsProvider.start();
    assertNLCollectionEquals(toNodeLabelSet("A"),nodeLabelsProvider.getDescriptors());
    TimerTask timerTask=nodeLabelsProvider.getTimerTask();
    modifyConf("X");
    timerTask.run();
    assertNLCollectionEquals(toNodeLabelSet("X"),nodeLabelsProvider.getDescriptors());
  }
  @Test public void testConfigForNoTimer() throws Exception {
    Configuration conf=new Configuration();
    modifyConf("A");
    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS,AbstractNodeDescriptorsProvider.DISABLE_NODE_DESCRIPTORS_PROVIDER_FETCH_TIMER);
    nodeLabelsProvider.init(conf);
    nodeLabelsProvider.start();
    Assert.assertNull("Timer is not expected to be" + " created when interval is configured as -1",nodeLabelsProvider.getScheduler());
    assertNLCollectionEquals(toNodeLabelSet("A"),nodeLabelsProvider.getDescriptors());
  }
  @Test public void testConfigTimer() throws Exception {
    Configuration conf=new Configuration();
    modifyConf("A");
    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS,1000);
    nodeLabelsProvider.init(conf);
    nodeLabelsProvider.start();
    assertNLCollectionEquals(toNodeLabelSet("A"),nodeLabelsProvider.getDescriptors());
    modifyConf("X");
    Thread.sleep(1500);
    assertNLCollectionEquals(toNodeLabelSet("X"),nodeLabelsProvider.getDescriptors());
  }
  private static void modifyConf(  String nodeLabels) throws FileNotFoundException, IOException {
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_PARTITION,nodeLabels);
    FileOutputStream confStream=new FileOutputStream(nodeLabelsConfigFile);
    conf.writeXml(confStream);
    IOUtils.closeQuietly(confStream);
  }
private static class XMLPathClassLoader extends ClassLoader {
    public XMLPathClassLoader(    ClassLoader wrapper){
      super(wrapper);
    }
    public URL getResource(    String name){
      if (name.equals(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)) {
        try {
          return nodeLabelsConfigFile.toURI().toURL();
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
          Assert.fail();
        }
      }
      return super.getResource(name);
    }
  }
}
