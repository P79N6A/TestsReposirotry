/** 
 * Test Base for Application Master Service Protocol.
 */
public abstract class ApplicationMasterServiceProtoTestBase extends ProtocolHATestBase {
  private ApplicationMasterProtocol amClient;
  private ApplicationAttemptId attemptId;
  protected void startupHAAndSetupClient() throws Exception {
    attemptId=this.cluster.createFakeApplicationAttemptId();
    Token<AMRMTokenIdentifier> appToken=this.cluster.getResourceManager().getRMContext().getAMRMTokenSecretManager().createAndGetAMRMToken(attemptId);
    appToken.setService(ClientRMProxy.getAMRMTokenService(this.conf));
    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));
    UserGroupInformation.getCurrentUser().addToken(appToken);
    syncToken(appToken);
    amClient=ClientRMProxy.createRMProxy(this.conf,ApplicationMasterProtocol.class);
  }
  @After public void shutDown(){
    if (this.amClient != null) {
      RPC.stopProxy(this.amClient);
    }
  }
  protected ApplicationMasterProtocol getAMClient(){
    return amClient;
  }
  private void syncToken(  Token<AMRMTokenIdentifier> token) throws IOException {
    for (int i=0; i < this.cluster.getNumOfResourceManager(); i++) {
      this.cluster.getResourceManager(i).getRMContext().getAMRMTokenSecretManager().addPersistedPassword(token);
    }
  }
}
