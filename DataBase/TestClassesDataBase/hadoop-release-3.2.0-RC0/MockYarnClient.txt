private static class MockYarnClient extends YarnClientImpl {
  private ApplicationReport mockReport;
  private List<ApplicationReport> reports;
  private HashMap<ApplicationId,List<ApplicationAttemptReport>> attempts=new HashMap<>();
  private HashMap<ApplicationAttemptId,List<ContainerReport>> containers=new HashMap<>();
  private HashMap<ApplicationAttemptId,List<ContainerReport>> containersFromAHS=new HashMap<>();
  GetApplicationsResponse mockAppResponse=mock(GetApplicationsResponse.class);
  GetApplicationAttemptsResponse mockAppAttemptsResponse=mock(GetApplicationAttemptsResponse.class);
  GetApplicationAttemptReportResponse mockAttemptResponse=mock(GetApplicationAttemptReportResponse.class);
  GetContainersResponse mockContainersResponse=mock(GetContainersResponse.class);
  GetContainerReportResponse mockContainerResponse=mock(GetContainerReportResponse.class);
  GetLabelsToNodesResponse mockLabelsToNodesResponse=mock(GetLabelsToNodesResponse.class);
  GetNodesToLabelsResponse mockNodeToLabelsResponse=mock(GetNodesToLabelsResponse.class);
  public MockYarnClient(){
    super();
    reports=createAppReports();
  }
  @Override public void start(){
    rmClient=mock(ApplicationClientProtocol.class);
    GetApplicationReportResponse mockResponse=mock(GetApplicationReportResponse.class);
    mockReport=mock(ApplicationReport.class);
    try {
      when(rmClient.getApplicationReport(any(GetApplicationReportRequest.class))).thenReturn(mockResponse);
      when(rmClient.getApplications(any(GetApplicationsRequest.class))).thenReturn(mockAppResponse);
      when(rmClient.forceKillApplication(any(KillApplicationRequest.class))).thenReturn(KillApplicationResponse.newInstance(false)).thenReturn(KillApplicationResponse.newInstance(true));
      when(rmClient.getApplicationAttemptReport(any(GetApplicationAttemptReportRequest.class))).thenReturn(mockAttemptResponse);
      when(rmClient.getApplicationAttempts(any(GetApplicationAttemptsRequest.class))).thenReturn(mockAppAttemptsResponse);
      when(rmClient.getContainers(any(GetContainersRequest.class))).thenReturn(mockContainersResponse);
      when(rmClient.getContainerReport(any(GetContainerReportRequest.class))).thenReturn(mockContainerResponse);
      when(rmClient.getLabelsToNodes(any(GetLabelsToNodesRequest.class))).thenReturn(mockLabelsToNodesResponse);
      when(rmClient.getNodeToLabels(any(GetNodesToLabelsRequest.class))).thenReturn(mockNodeToLabelsResponse);
      historyClient=mock(AHSClient.class);
    }
 catch (    Exception e) {
      Assert.fail("Unexpected exception caught: " + e);
    }
    when(mockResponse.getApplicationReport()).thenReturn(mockReport);
  }
  public ApplicationClientProtocol getRMClient(){
    return rmClient;
  }
  @Override public List<ApplicationReport> getApplications(  Set<String> applicationTypes,  EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException {
    when(mockAppResponse.getApplicationList()).thenReturn(getApplicationReports(reports,applicationTypes,applicationStates));
    return super.getApplications(applicationTypes,applicationStates);
  }
  @Override public void stop(){
  }
  public void setYarnApplicationState(  YarnApplicationState state){
    when(mockReport.getYarnApplicationState()).thenReturn(YarnApplicationState.NEW,YarnApplicationState.NEW_SAVING,YarnApplicationState.NEW_SAVING,state);
  }
  public List<ApplicationReport> getReports(){
    return this.reports;
  }
  private List<ApplicationReport> createAppReports(){
    ApplicationId applicationId=ApplicationId.newInstance(1234,5);
    ApplicationReport newApplicationReport=ApplicationReport.newInstance(applicationId,ApplicationAttemptId.newInstance(applicationId,1),"user","queue","appname","host",124,null,YarnApplicationState.RUNNING,"diagnostics","url",0,0,0,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.53789f,"YARN",null);
    List<ApplicationReport> applicationReports=new ArrayList<>();
    applicationReports.add(newApplicationReport);
    List<ApplicationAttemptReport> appAttempts=new ArrayList<>();
    ApplicationAttemptReport attempt=ApplicationAttemptReport.newInstance(ApplicationAttemptId.newInstance(applicationId,1),"host",124,"url","oUrl","diagnostics",YarnApplicationAttemptState.FINISHED,ContainerId.newContainerId(newApplicationReport.getCurrentApplicationAttemptId(),1),0,0);
    appAttempts.add(attempt);
    ApplicationAttemptReport attempt1=ApplicationAttemptReport.newInstance(ApplicationAttemptId.newInstance(applicationId,2),"host",124,"url","oUrl","diagnostics",YarnApplicationAttemptState.FINISHED,ContainerId.newContainerId(newApplicationReport.getCurrentApplicationAttemptId(),2));
    appAttempts.add(attempt1);
    attempts.put(applicationId,appAttempts);
    List<ContainerReport> containerReports=new ArrayList<>();
    ContainerReport container=ContainerReport.newInstance(ContainerId.newContainerId(attempt.getApplicationAttemptId(),1),null,NodeId.newInstance("host",1234),Priority.UNDEFINED,1234,5678,"diagnosticInfo","logURL",0,ContainerState.RUNNING,"http://" + NodeId.newInstance("host",2345).toString());
    containerReports.add(container);
    ContainerReport container1=ContainerReport.newInstance(ContainerId.newContainerId(attempt.getApplicationAttemptId(),2),null,NodeId.newInstance("host",1234),Priority.UNDEFINED,1234,5678,"diagnosticInfo","logURL",0,ContainerState.RUNNING,"http://" + NodeId.newInstance("host",2345).toString());
    containerReports.add(container1);
    containers.put(attempt.getApplicationAttemptId(),containerReports);
    List<ContainerReport> containerReportsForAHS=new ArrayList<>();
    container=ContainerReport.newInstance(ContainerId.newContainerId(attempt.getApplicationAttemptId(),1),null,NodeId.newInstance("host",1234),Priority.UNDEFINED,1234,5678,"diagnosticInfo","logURL",0,null,"http://" + NodeId.newInstance("host",2345).toString());
    containerReportsForAHS.add(container);
    container1=ContainerReport.newInstance(ContainerId.newContainerId(attempt.getApplicationAttemptId(),2),null,NodeId.newInstance("host",1234),Priority.UNDEFINED,1234,5678,"diagnosticInfo","HSlogURL",0,null,"http://" + NodeId.newInstance("host",2345).toString());
    containerReportsForAHS.add(container1);
    ContainerReport container2=ContainerReport.newInstance(ContainerId.newContainerId(attempt.getApplicationAttemptId(),3),null,NodeId.newInstance("host",1234),Priority.UNDEFINED,1234,5678,"diagnosticInfo","HSlogURL",0,ContainerState.COMPLETE,"http://" + NodeId.newInstance("host",2345).toString());
    containerReportsForAHS.add(container2);
    containersFromAHS.put(attempt.getApplicationAttemptId(),containerReportsForAHS);
    ApplicationId applicationId2=ApplicationId.newInstance(1234,6);
    ApplicationReport newApplicationReport2=ApplicationReport.newInstance(applicationId2,ApplicationAttemptId.newInstance(applicationId2,2),"user2","queue2","appname2","host2",125,null,YarnApplicationState.FINISHED,"diagnostics2","url2",2,2,2,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.63789f,"NON-YARN",null);
    applicationReports.add(newApplicationReport2);
    ApplicationId applicationId3=ApplicationId.newInstance(1234,7);
    ApplicationReport newApplicationReport3=ApplicationReport.newInstance(applicationId3,ApplicationAttemptId.newInstance(applicationId3,3),"user3","queue3","appname3","host3",126,null,YarnApplicationState.RUNNING,"diagnostics3","url3",3,3,3,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.73789f,"MAPREDUCE",null);
    applicationReports.add(newApplicationReport3);
    ApplicationId applicationId4=ApplicationId.newInstance(1234,8);
    ApplicationReport newApplicationReport4=ApplicationReport.newInstance(applicationId4,ApplicationAttemptId.newInstance(applicationId4,4),"user4","queue4","appname4","host4",127,null,YarnApplicationState.FAILED,"diagnostics4","url4",4,4,4,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.83789f,"NON-MAPREDUCE",null);
    applicationReports.add(newApplicationReport4);
    return applicationReports;
  }
  private List<ApplicationReport> getApplicationReports(  List<ApplicationReport> applicationReports,  Set<String> applicationTypes,  EnumSet<YarnApplicationState> applicationStates){
    List<ApplicationReport> appReports=new ArrayList<>();
    for (    ApplicationReport appReport : applicationReports) {
      if (applicationTypes != null && !applicationTypes.isEmpty()) {
        if (!applicationTypes.contains(appReport.getApplicationType())) {
          continue;
        }
      }
      if (applicationStates != null && !applicationStates.isEmpty()) {
        if (!applicationStates.contains(appReport.getYarnApplicationState())) {
          continue;
        }
      }
      appReports.add(appReport);
    }
    return appReports;
  }
  @Override public Map<String,Set<NodeId>> getLabelsToNodes() throws YarnException, IOException {
    when(mockLabelsToNodesResponse.getLabelsToNodes()).thenReturn(getLabelsToNodesMap());
    return super.getLabelsToNodes();
  }
  @Override public Map<String,Set<NodeId>> getLabelsToNodes(  Set<String> labels) throws YarnException, IOException {
    when(mockLabelsToNodesResponse.getLabelsToNodes()).thenReturn(getLabelsToNodesMap(labels));
    return super.getLabelsToNodes(labels);
  }
  public Map<String,Set<NodeId>> getLabelsToNodesMap(){
    Map<String,Set<NodeId>> map=new HashMap<>();
    Set<NodeId> setNodeIds=new HashSet<>(Arrays.asList(NodeId.newInstance("host1",0),NodeId.newInstance("host2",0)));
    map.put("x",setNodeIds);
    map.put("y",setNodeIds);
    map.put("z",setNodeIds);
    return map;
  }
  public Map<String,Set<NodeId>> getLabelsToNodesMap(  Set<String> labels){
    Map<String,Set<NodeId>> map=new HashMap<>();
    Set<NodeId> setNodeIds=new HashSet<>(Arrays.asList(NodeId.newInstance("host1",0),NodeId.newInstance("host2",0)));
    for (    String label : labels) {
      map.put(label,setNodeIds);
    }
    return map;
  }
  @Override public Map<NodeId,Set<String>> getNodeToLabels() throws YarnException, IOException {
    when(mockNodeToLabelsResponse.getNodeToLabels()).thenReturn(getNodeToLabelsMap());
    return super.getNodeToLabels();
  }
  public Map<NodeId,Set<String>> getNodeToLabelsMap(){
    Map<NodeId,Set<String>> map=new HashMap<>();
    Set<String> setNodeLabels=new HashSet<>(Arrays.asList("x","y"));
    map.put(NodeId.newInstance("host",0),setNodeLabels);
    return map;
  }
  @Override public List<ApplicationAttemptReport> getApplicationAttempts(  ApplicationId appId) throws YarnException, IOException {
    when(mockAppAttemptsResponse.getApplicationAttemptList()).thenReturn(getAttempts(appId));
    return super.getApplicationAttempts(appId);
  }
  @Override public ApplicationAttemptReport getApplicationAttemptReport(  ApplicationAttemptId appAttemptId) throws YarnException, IOException {
    when(mockAttemptResponse.getApplicationAttemptReport()).thenReturn(getAttempt(appAttemptId));
    return super.getApplicationAttemptReport(appAttemptId);
  }
  @Override public List<ContainerReport> getContainers(  ApplicationAttemptId appAttemptId) throws YarnException, IOException {
    when(mockContainersResponse.getContainerList()).thenReturn(getContainersReport(appAttemptId));
    when(historyClient.getContainers(any(ApplicationAttemptId.class))).thenReturn(getContainersFromAHS(appAttemptId));
    return super.getContainers(appAttemptId);
  }
  private List<ContainerReport> getContainersFromAHS(  ApplicationAttemptId appAttemptId){
    return containersFromAHS.get(appAttemptId);
  }
  @Override public ContainerReport getContainerReport(  ContainerId containerId) throws YarnException, IOException {
    try {
      ContainerReport container=getContainer(containerId,containers);
      when(mockContainerResponse.getContainerReport()).thenReturn(container);
    }
 catch (    YarnException e) {
      when(rmClient.getContainerReport(any(GetContainerReportRequest.class))).thenThrow(e).thenReturn(mockContainerResponse);
    }
    try {
      ContainerReport container=getContainer(containerId,containersFromAHS);
      when(historyClient.getContainerReport(any(ContainerId.class))).thenReturn(container);
    }
 catch (    YarnException e) {
      when(historyClient.getContainerReport(any(ContainerId.class))).thenThrow(e);
    }
    return super.getContainerReport(containerId);
  }
  public List<ApplicationAttemptReport> getAttempts(  ApplicationId appId){
    return attempts.get(appId);
  }
  public ApplicationAttemptReport getAttempt(  ApplicationAttemptId appAttemptId){
    return attempts.get(appAttemptId.getApplicationId()).get(0);
  }
  public List<ContainerReport> getContainersReport(  ApplicationAttemptId appAttemptId){
    return containers.get(appAttemptId);
  }
  private ContainerReport getContainer(  ContainerId containerId,  HashMap<ApplicationAttemptId,List<ContainerReport>> containersToAppAttemptMapping) throws YarnException {
    List<ContainerReport> containersForAppAttempt=containersToAppAttemptMapping.get(containerId.getApplicationAttemptId());
    if (containersForAppAttempt == null) {
      throw new ApplicationNotFoundException(containerId.getApplicationAttemptId().getApplicationId() + " is not found ");
    }
    Iterator<ContainerReport> iterator=containersForAppAttempt.iterator();
    while (iterator.hasNext()) {
      ContainerReport next=iterator.next();
      if (next.getContainerId().equals(containerId)) {
        return next;
      }
    }
    throw new ContainerNotFoundException(containerId + " is not found ");
  }
}
