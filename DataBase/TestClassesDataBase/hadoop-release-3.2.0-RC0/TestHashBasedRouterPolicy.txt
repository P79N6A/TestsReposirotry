/** 
 * Simple test class for the  {@link HashBasedRouterPolicy}. Tests that one of the active sub-cluster is chosen.
 */
public class TestHashBasedRouterPolicy extends BaseRouterPoliciesTest {
  private int numSubclusters=10;
  @Before public void setUp() throws Exception {
    setPolicy(new HashBasedRouterPolicy());
    setMockActiveSubclusters(numSubclusters);
    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(),getPolicyInfo(),getActiveSubclusters());
  }
  @Test public void testHashSpreadUniformlyAmongSubclusters() throws YarnException {
    SubClusterId chosen;
    Map<SubClusterId,AtomicLong> counter=new HashMap<>();
    for (    SubClusterId id : getActiveSubclusters().keySet()) {
      counter.put(id,new AtomicLong(0));
    }
    long jobPerSub=100;
    ApplicationSubmissionContext applicationSubmissionContext=mock(ApplicationSubmissionContext.class);
    for (int i=0; i < jobPerSub * numSubclusters; i++) {
      when(applicationSubmissionContext.getQueue()).thenReturn("queue" + i);
      chosen=((FederationRouterPolicy)getPolicy()).getHomeSubcluster(applicationSubmissionContext,null);
      counter.get(chosen).addAndGet(1);
    }
    for (    AtomicLong a : counter.values()) {
      Assert.assertEquals(a.get(),jobPerSub);
    }
  }
}
