/** 
 * Test symbolic links using LocalFs.
 */
abstract public class TestSymlinkLocalFS extends SymlinkBaseTest {
static {
    RawLocalFileSystem.useStatIfAvailable();
  }
  @Override protected String getScheme(){
    return "file";
  }
  @Override protected String testBaseDir1() throws IOException {
    return wrapper.getAbsoluteTestRootDir() + "/test1";
  }
  @Override protected String testBaseDir2() throws IOException {
    return wrapper.getAbsoluteTestRootDir() + "/test2";
  }
  @Override protected URI testURI(){
    try {
      return new URI("file:///");
    }
 catch (    URISyntaxException e) {
      return null;
    }
  }
  @Override public void testCreateDanglingLink() throws IOException {
    assumeNotWindows();
    super.testCreateDanglingLink();
  }
  @Override public void testCreateFileViaDanglingLinkParent() throws IOException {
    assumeNotWindows();
    super.testCreateFileViaDanglingLinkParent();
  }
  @Override public void testOpenResolvesLinks() throws IOException {
    assumeNotWindows();
    super.testOpenResolvesLinks();
  }
  @Override public void testRecursiveLinks() throws IOException {
    assumeNotWindows();
    super.testRecursiveLinks();
  }
  @Override public void testRenameDirToDanglingSymlink() throws IOException {
    assumeNotWindows();
    super.testRenameDirToDanglingSymlink();
  }
  @Override public void testStatDanglingLink() throws IOException {
    assumeNotWindows();
    super.testStatDanglingLink();
  }
  @Test(timeout=10000) public void testDanglingLinkFilePartQual() throws IOException {
    Path filePartQual=new Path(getScheme() + ":///doesNotExist");
    try {
      wrapper.getFileLinkStatus(filePartQual);
      fail("Got FileStatus for non-existant file");
    }
 catch (    FileNotFoundException f) {
    }
    try {
      wrapper.getLinkTarget(filePartQual);
      fail("Got link target for non-existant file");
    }
 catch (    FileNotFoundException f) {
    }
  }
  @Test(timeout=10000) public void testDanglingLink() throws IOException {
    assumeNotWindows();
    Path fileAbs=new Path(testBaseDir1() + "/file");
    Path fileQual=new Path(testURI().toString(),fileAbs);
    Path link=new Path(testBaseDir1() + "/linkToFile");
    Path linkQual=new Path(testURI().toString(),link.toString());
    wrapper.createSymlink(fileAbs,link,false);
    FileUtil.fullyDelete(new File(link.toUri().getPath()));
    wrapper.createSymlink(fileAbs,link,false);
    try {
      wrapper.getFileStatus(link);
      fail("Got FileStatus for dangling link");
    }
 catch (    FileNotFoundException f) {
    }
    UserGroupInformation user=UserGroupInformation.getCurrentUser();
    FileStatus fsd=wrapper.getFileLinkStatus(link);
    assertEquals(fileQual,fsd.getSymlink());
    assertTrue(fsd.isSymlink());
    assertFalse(fsd.isDirectory());
    assertEquals(user.getUserName(),fsd.getOwner());
    assertEquals(user.getGroupNames()[0],fsd.getGroup());
    assertEquals(linkQual,fsd.getPath());
    try {
      readFile(link);
      fail("Got FileStatus for dangling link");
    }
 catch (    FileNotFoundException f) {
    }
    createAndWriteFile(fileAbs);
    wrapper.getFileStatus(link);
  }
  @Test(timeout=10000) public void testGetLinkStatusPartQualTarget() throws IOException {
    Path fileAbs=new Path(testBaseDir1() + "/file");
    Path fileQual=new Path(testURI().toString(),fileAbs);
    Path dir=new Path(testBaseDir1());
    Path link=new Path(testBaseDir1() + "/linkToFile");
    Path dirNew=new Path(testBaseDir2());
    Path linkNew=new Path(testBaseDir2() + "/linkToFile");
    wrapper.delete(dirNew,true);
    createAndWriteFile(fileQual);
    wrapper.setWorkingDirectory(dir);
    wrapper.createSymlink(fileQual,link,false);
    assertEquals(fileQual,wrapper.getFileLinkStatus(link).getSymlink());
    wrapper.rename(dir,dirNew);
    assertEquals(fileQual,wrapper.getFileLinkStatus(linkNew).getSymlink());
    try {
      readFile(linkNew);
      fail("The link should be dangling now.");
    }
 catch (    FileNotFoundException x) {
    }
    Path anotherFs=new Path("hdfs://host:1000/dir/file");
    FileUtil.fullyDelete(new File(linkNew.toString()));
    try {
      wrapper.createSymlink(anotherFs,linkNew,false);
      fail("Created a local fs link to a non-local fs");
    }
 catch (    IOException x) {
    }
  }
  /** 
 * Test create symlink to . 
 */
  @Override public void testCreateLinkToDot() throws IOException {
    try {
      super.testCreateLinkToDot();
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  @Override public void testSetTimesSymlinkToFile() throws IOException {
    assumeTrue(!Shell.WINDOWS && !Shell.SOLARIS);
    super.testSetTimesSymlinkToFile();
  }
  @Override public void testSetTimesSymlinkToDir() throws IOException {
    assumeTrue(!Path.WINDOWS && !Shell.SOLARIS);
    super.testSetTimesSymlinkToDir();
  }
  @Override public void testSetTimesDanglingLink() throws IOException {
    assumeNotWindows();
    super.testSetTimesDanglingLink();
  }
}
