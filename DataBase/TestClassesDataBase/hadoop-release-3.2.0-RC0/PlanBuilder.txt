private static class PlanBuilder {
  private String sourcePath;
  private String destPath;
  private String sourceUUID;
  private String destUUID;
  private DiskBalancerCluster balancerCluster;
  private String nodeID;
  public PlanBuilder(  DiskBalancerCluster balancerCluster,  String nodeID){
    this.balancerCluster=balancerCluster;
    this.nodeID=nodeID;
  }
  public PlanBuilder setPathMap(  String sourcePath,  String destPath){
    this.sourcePath=sourcePath;
    this.destPath=destPath;
    return this;
  }
  public PlanBuilder setUUIDMap(  String sourceUUID,  String destUUID){
    this.sourceUUID=sourceUUID;
    this.destUUID=destUUID;
    return this;
  }
  public NodePlan build() throws Exception {
    final int dnIndex=0;
    Preconditions.checkNotNull(balancerCluster);
    Preconditions.checkState(nodeID.length() > 0);
    DiskBalancerDataNode node=balancerCluster.getNodes().get(dnIndex);
    node.setDataNodeUUID(nodeID);
    GreedyPlanner planner=new GreedyPlanner(10.0f,node);
    NodePlan plan=new NodePlan(node.getDataNodeName(),node.getDataNodePort());
    planner.balanceVolumeSet(node,node.getVolumeSets().get("DISK"),plan);
    setVolumeNames(plan);
    return plan;
  }
  private void setVolumeNames(  NodePlan plan){
    Iterator<Step> iter=plan.getVolumeSetPlans().iterator();
    while (iter.hasNext()) {
      MoveStep nextStep=(MoveStep)iter.next();
      nextStep.getSourceVolume().setPath(sourcePath);
      nextStep.getSourceVolume().setUuid(sourceUUID);
      nextStep.getDestinationVolume().setPath(destPath);
      nextStep.getDestinationVolume().setUuid(destUUID);
    }
  }
}
