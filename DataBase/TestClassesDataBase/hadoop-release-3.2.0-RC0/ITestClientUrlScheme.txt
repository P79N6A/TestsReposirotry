/** 
 * Parameterized test of ABFS CLIENT URL scheme verification.
 */
@RunWith(Parameterized.class) public class ITestClientUrlScheme extends AbstractAbfsIntegrationTest {
  @Parameterized.Parameter public boolean useSecureScheme;
  @Parameterized.Parameter(1) public boolean alwaysUseHttps;
  @Parameterized.Parameters public static Iterable<Object[]> params(){
    return Arrays.asList(new Object[][]{{false,false},{false,true},{true,true},{true,false}});
  }
  public ITestClientUrlScheme() throws Exception {
    super();
    Assume.assumeTrue("ITestClientUrlScheme is skipped because auth type is not SharedKey",getAuthType() == AuthType.SharedKey);
  }
  @Test public void testClientUrlScheme() throws Exception {
    String[] urlWithoutScheme=this.getTestUrl().split(":");
    String fsUrl;
    if (useSecureScheme) {
      fsUrl=FileSystemUriSchemes.ABFS_SECURE_SCHEME + ":" + urlWithoutScheme[1];
    }
 else {
      fsUrl=FileSystemUriSchemes.ABFS_SCHEME + ":" + urlWithoutScheme[1];
    }
    Configuration config=getRawConfiguration();
    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,fsUrl.toString());
    config.setBoolean(FS_AZURE_ALWAYS_USE_HTTPS,alwaysUseHttps);
    AbfsClient client=this.getFileSystem(config).getAbfsClient();
    Field baseUrlField=AbfsClient.class.getDeclaredField("baseUrl");
    baseUrlField.setAccessible(true);
    String url=((URL)baseUrlField.get(client)).toString();
    if (!useSecureScheme && !alwaysUseHttps) {
      Assert.assertTrue(url.startsWith(FileSystemUriSchemes.HTTP_SCHEME));
    }
 else {
      Assert.assertTrue(url.startsWith(FileSystemUriSchemes.HTTPS_SCHEME));
    }
  }
}
