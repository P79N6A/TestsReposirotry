class AMService extends AbstractService implements MRClientProtocol {
  protected Class<?> protocol;
  private InetSocketAddress bindAddress;
  private Server server;
  private final String hostAddress;
  public AMService(){
    this(AMHOSTADDRESS);
  }
  @Override public InetSocketAddress getConnectAddress(){
    return bindAddress;
  }
  public AMService(  String hostAddress){
    super("AMService");
    this.protocol=MRClientProtocol.class;
    this.hostAddress=hostAddress;
  }
  public void start(  Configuration conf){
    YarnRPC rpc=YarnRPC.create(conf);
    InetSocketAddress address=NetUtils.createSocketAddr(hostAddress);
    InetAddress hostNameResolved=null;
    try {
      address.getAddress();
      hostNameResolved=InetAddress.getLocalHost();
    }
 catch (    UnknownHostException e) {
      throw new YarnRuntimeException(e);
    }
    server=rpc.getServer(protocol,this,address,conf,null,1);
    server.start();
    this.bindAddress=NetUtils.getConnectAddress(server);
    super.start();
    amRunning=true;
  }
  @Override protected void serviceStop() throws Exception {
    if (server != null) {
      server.stop();
    }
    super.serviceStop();
    amRunning=false;
  }
  @Override public GetCountersResponse getCounters(  GetCountersRequest request) throws IOException {
    JobId jobID=request.getJobId();
    amContact=true;
    Counters counters=getMyCounters();
    GetCountersResponse response=recordFactory.newRecordInstance(GetCountersResponse.class);
    response.setCounters(counters);
    return response;
  }
  @Override public GetJobReportResponse getJobReport(  GetJobReportRequest request) throws IOException {
    amContact=true;
    JobReport jobReport=recordFactory.newRecordInstance(JobReport.class);
    jobReport.setJobId(request.getJobId());
    jobReport.setJobState(JobState.RUNNING);
    jobReport.setJobName("TestClientRedirect-jobname");
    jobReport.setUser("TestClientRedirect-user");
    jobReport.setStartTime(0L);
    jobReport.setFinishTime(1L);
    GetJobReportResponse response=recordFactory.newRecordInstance(GetJobReportResponse.class);
    response.setJobReport(jobReport);
    return response;
  }
  @Override public GetTaskReportResponse getTaskReport(  GetTaskReportRequest request) throws IOException {
    return null;
  }
  @Override public GetTaskAttemptReportResponse getTaskAttemptReport(  GetTaskAttemptReportRequest request) throws IOException {
    return null;
  }
  @Override public GetTaskAttemptCompletionEventsResponse getTaskAttemptCompletionEvents(  GetTaskAttemptCompletionEventsRequest request) throws IOException {
    return null;
  }
  @Override public GetTaskReportsResponse getTaskReports(  GetTaskReportsRequest request) throws IOException {
    return null;
  }
  @Override public GetDiagnosticsResponse getDiagnostics(  GetDiagnosticsRequest request) throws IOException {
    return null;
  }
  @Override public KillJobResponse killJob(  KillJobRequest request) throws IOException {
    return recordFactory.newRecordInstance(KillJobResponse.class);
  }
  @Override public KillTaskResponse killTask(  KillTaskRequest request) throws IOException {
    return null;
  }
  @Override public KillTaskAttemptResponse killTaskAttempt(  KillTaskAttemptRequest request) throws IOException {
    return null;
  }
  @Override public FailTaskAttemptResponse failTaskAttempt(  FailTaskAttemptRequest request) throws IOException {
    return null;
  }
  @Override public org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDelegationTokenResponse getDelegationToken(  org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDelegationTokenRequest request) throws IOException {
    return null;
  }
  @Override public org.apache.hadoop.mapreduce.v2.api.protocolrecords.RenewDelegationTokenResponse renewDelegationToken(  org.apache.hadoop.mapreduce.v2.api.protocolrecords.RenewDelegationTokenRequest request) throws IOException {
    return null;
  }
  @Override public org.apache.hadoop.mapreduce.v2.api.protocolrecords.CancelDelegationTokenResponse cancelDelegationToken(  org.apache.hadoop.mapreduce.v2.api.protocolrecords.CancelDelegationTokenRequest request) throws IOException {
    return null;
  }
}
