/** 
 * An thread that updates the metrics source every 1 JMX cache TTL
 */
private static class SourceUpdater implements Runnable {
  private MetricsSourceAdapter sa=null;
  private ScheduledFuture<?> future=null;
  private AtomicBoolean hasError=null;
  private static final Logger LOG=Logger.getLogger(SourceUpdater.class);
  public SourceUpdater(  MetricsSourceAdapter sourceAdapter,  AtomicBoolean err){
    sa=sourceAdapter;
    hasError=err;
  }
  public void setFuture(  ScheduledFuture<?> f){
    future=f;
  }
  @Override public void run(){
    MetricsCollectorImpl builder=new MetricsCollectorImpl();
    try {
      sa.getMetrics(builder,true);
      LOG.info("reset lastRecs");
    }
 catch (    Exception e) {
      hasError.set(true);
      LOG.error(e.getStackTrace());
    }
 finally {
      if (hasError.get()) {
        LOG.error("Hit error, stopping now");
        future.cancel(false);
      }
    }
  }
}
