/** 
 * Test class for  {@link PlacementConstraintTransformations}.
 */
public class TestPlacementConstraintTransformations {
  @Test public void testTargetConstraint(){
    AbstractConstraint sConstraintExpr=targetIn(NODE,allocationTag("hbase-m"));
    Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
    PlacementConstraint sConstraint=PlacementConstraints.build(sConstraintExpr);
    SpecializedConstraintTransformer specTransformer=new SpecializedConstraintTransformer(sConstraint);
    PlacementConstraint tConstraint=specTransformer.transform();
    AbstractConstraint tConstraintExpr=tConstraint.getConstraintExpr();
    Assert.assertTrue(tConstraintExpr instanceof TargetConstraint);
    SingleConstraint single=(SingleConstraint)sConstraintExpr;
    TargetConstraint target=(TargetConstraint)tConstraintExpr;
    Assert.assertEquals(single.toString(),target.toString());
    Assert.assertEquals(single.getScope(),target.getScope());
    Assert.assertEquals(TargetOperator.IN,target.getOp());
    Assert.assertEquals(single.getTargetExpressions(),target.getTargetExpressions());
    SingleConstraintTransformer singleTransformer=new SingleConstraintTransformer(tConstraint);
    sConstraint=singleTransformer.transform();
    sConstraintExpr=sConstraint.getConstraintExpr();
    Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
    single=(SingleConstraint)sConstraintExpr;
    Assert.assertEquals(target.getScope(),single.getScope());
    Assert.assertEquals(1,single.getMinCardinality());
    Assert.assertEquals(Integer.MAX_VALUE,single.getMaxCardinality());
    Assert.assertEquals(single.getTargetExpressions(),target.getTargetExpressions());
  }
  @Test public void testCardinalityConstraint(){
    CardinalityConstraint cardinality=new CardinalityConstraint(RACK,3,10,new HashSet<>(Arrays.asList("hb")));
    PlacementConstraint cConstraint=PlacementConstraints.build(cardinality);
    SingleConstraintTransformer singleTransformer=new SingleConstraintTransformer(cConstraint);
    PlacementConstraint sConstraint=singleTransformer.transform();
    AbstractConstraint sConstraintExpr=sConstraint.getConstraintExpr();
    Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
    SingleConstraint single=(SingleConstraint)sConstraintExpr;
    Assert.assertEquals(single.toString(),cardinality.toString());
    Assert.assertEquals(cardinality.getScope(),single.getScope());
    Assert.assertEquals(cardinality.getMinCardinality(),single.getMinCardinality());
    Assert.assertEquals(cardinality.getMaxCardinality(),single.getMaxCardinality());
    Assert.assertEquals(new HashSet<>(Arrays.asList(PlacementTargets.allocationTag("hb"))),single.getTargetExpressions());
  }
  @Test public void testTargetCardinalityConstraint(){
    AbstractConstraint constraintExpr=targetCardinality(RACK,3,10,allocationTag("zk"));
    Assert.assertTrue(constraintExpr instanceof SingleConstraint);
    PlacementConstraint constraint=PlacementConstraints.build(constraintExpr);
    SpecializedConstraintTransformer specTransformer=new SpecializedConstraintTransformer(constraint);
    PlacementConstraint newConstraint=specTransformer.transform();
    Assert.assertEquals(constraintExpr,newConstraint.getConstraintExpr());
  }
  @Test public void testCompositeConstraint(){
    AbstractConstraint constraintExpr=or(targetIn(RACK,allocationTag("spark")),maxCardinality(NODE,3),targetCardinality(RACK,2,10,allocationTag("zk")));
    Assert.assertTrue(constraintExpr instanceof Or);
    PlacementConstraint constraint=PlacementConstraints.build(constraintExpr);
    Or orExpr=(Or)constraintExpr;
    for (    AbstractConstraint child : orExpr.getChildren()) {
      Assert.assertTrue(child instanceof SingleConstraint);
    }
    SpecializedConstraintTransformer specTransformer=new SpecializedConstraintTransformer(constraint);
    PlacementConstraint specConstraint=specTransformer.transform();
    Or specOrExpr=(Or)specConstraint.getConstraintExpr();
    List<AbstractConstraint> specChildren=specOrExpr.getChildren();
    Assert.assertEquals(3,specChildren.size());
    Assert.assertTrue(specChildren.get(0) instanceof TargetConstraint);
    Assert.assertTrue(specChildren.get(1) instanceof SingleConstraint);
    Assert.assertTrue(specChildren.get(2) instanceof SingleConstraint);
    SingleConstraintTransformer singleTransformer=new SingleConstraintTransformer(specConstraint);
    PlacementConstraint simConstraint=singleTransformer.transform();
    Assert.assertTrue(simConstraint.getConstraintExpr() instanceof Or);
    Or simOrExpr=(Or)specConstraint.getConstraintExpr();
    for (    AbstractConstraint child : simOrExpr.getChildren()) {
      Assert.assertTrue(child instanceof SingleConstraint);
    }
  }
}
