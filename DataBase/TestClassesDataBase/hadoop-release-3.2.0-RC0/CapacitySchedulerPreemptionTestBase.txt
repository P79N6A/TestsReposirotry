public class CapacitySchedulerPreemptionTestBase {
  final int GB=1024;
  CapacitySchedulerConfiguration conf;
  RMNodeLabelsManager mgr;
  Clock clock;
  @Before void setUp() throws Exception {
    conf=new CapacitySchedulerConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
    conf.setClass(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,ProportionalCapacityPreemptionPolicy.class,SchedulingEditPolicy.class);
    conf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(this.conf);
    conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,100 * GB);
    conf.setInt(CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,0);
    conf.setFloat(CapacitySchedulerConfiguration.TOTAL_PREEMPTION_PER_ROUND,1.0f);
    conf.setFloat(CapacitySchedulerConfiguration.PREEMPTION_NATURAL_TERMINATION_FACTOR,1.0f);
    conf.setLong(CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,60000L);
    mgr=new NullRMNodeLabelsManager();
    mgr.init(this.conf);
    clock=mock(Clock.class);
    when(clock.getTime()).thenReturn(0L);
  }
  SchedulingEditPolicy getSchedulingEditPolicy(  MockRM rm){
    ResourceManager.RMActiveServices activeServices=rm.getRMActiveService();
    SchedulingMonitor mon=null;
    for (    Service service : activeServices.getServices()) {
      if (service instanceof SchedulingMonitor) {
        mon=(SchedulingMonitor)service;
        break;
      }
    }
    if (mon != null) {
      return mon.getSchedulingEditPolicy();
    }
    return null;
  }
  public void waitNumberOfLiveContainersFromApp(  FiCaSchedulerApp app,  int expected) throws InterruptedException {
    int waitNum=0;
    while (waitNum < 10) {
      System.out.println(app.getLiveContainers().size());
      if (app.getLiveContainers().size() == expected) {
        return;
      }
      Thread.sleep(100);
      waitNum++;
    }
    Assert.fail();
  }
  public void waitNumberOfReservedContainersFromApp(  FiCaSchedulerApp app,  int expected) throws InterruptedException {
    int waitNum=0;
    while (waitNum < 10) {
      System.out.println(app.getReservedContainers().size());
      if (app.getReservedContainers().size() == expected) {
        return;
      }
      Thread.sleep(100);
      waitNum++;
    }
    Assert.fail();
  }
  public void waitNumberOfLiveContainersOnNodeFromApp(  FiCaSchedulerNode node,  ApplicationAttemptId appId,  int expected) throws InterruptedException {
    int waitNum=0;
    int total=0;
    while (waitNum < 500) {
      total=0;
      for (      RMContainer c : node.getCopiedListOfRunningContainers()) {
        if (c.getApplicationAttemptId().equals(appId)) {
          total++;
        }
      }
      if (total == expected) {
        return;
      }
      Thread.sleep(10);
      waitNum++;
    }
    Assert.fail("Check #live-container-on-node-from-app, actual=" + total + " expected="+ expected);
  }
  public void checkNumberOfPreemptionCandidateFromApp(  ProportionalCapacityPreemptionPolicy policy,  int expected,  ApplicationAttemptId attemptId){
    int total=0;
    for (    RMContainer rmContainer : policy.getToPreemptContainers().keySet()) {
      if (rmContainer.getApplicationAttemptId().equals(attemptId)) {
        ++total;
      }
    }
    Assert.assertEquals(expected,total);
  }
}
