public class TestBlockMissingException {
  final static Logger LOG=LoggerFactory.getLogger("org.apache.hadoop.hdfs.TestBlockMissing");
  final static int NUM_DATANODES=3;
  Configuration conf;
  MiniDFSCluster dfs=null;
  DistributedFileSystem fileSys=null;
  /** 
 * Test DFS Raid
 */
  @Test public void testBlockMissingException() throws Exception {
    LOG.info("Test testBlockMissingException started.");
    long blockSize=1024L;
    int numBlocks=4;
    conf=new HdfsConfiguration();
    conf.setInt(HdfsClientConfigKeys.Retry.WINDOW_BASE_KEY,10);
    try {
      dfs=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build();
      dfs.waitActive();
      fileSys=dfs.getFileSystem();
      Path file1=new Path("/user/dhruba/raidtest/file1");
      createOldFile(fileSys,file1,1,numBlocks,blockSize);
      LocatedBlocks locations=null;
      locations=fileSys.dfs.getNamenode().getBlockLocations(file1.toString(),0,numBlocks * blockSize);
      LOG.info("Remove first block of file");
      dfs.corruptBlockOnDataNodesByDeletingBlockFile(locations.get(0).getBlock());
      validateFile(fileSys,file1);
    }
  finally {
      if (fileSys != null)       fileSys.close();
      if (dfs != null)       dfs.shutdown();
    }
    LOG.info("Test testBlockMissingException completed.");
  }
  private void createOldFile(  FileSystem fileSys,  Path name,  int repl,  int numBlocks,  long blocksize) throws IOException {
    FSDataOutputStream stm=fileSys.create(name,true,fileSys.getConf().getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY,4096),(short)repl,blocksize);
    final byte[] b=new byte[(int)blocksize];
    for (int i=0; i < numBlocks; i++) {
      stm.write(b);
    }
    stm.close();
  }
  private void validateFile(  FileSystem fileSys,  Path name) throws IOException {
    FSDataInputStream stm=fileSys.open(name);
    final byte[] b=new byte[4192];
    int num=0;
    boolean gotException=false;
    try {
      while (num >= 0) {
        num=stm.read(b);
        if (num < 0) {
          break;
        }
      }
    }
 catch (    BlockMissingException e) {
      gotException=true;
    }
    stm.close();
    assertTrue("Expected BlockMissingException ",gotException);
  }
}
