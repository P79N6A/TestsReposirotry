public class TestFileSystemCaching {
  @Test public void testCacheEnabled() throws Exception {
    Configuration conf=newConf();
    FileSystem fs1=FileSystem.get(new URI("cachedfile://a"),conf);
    FileSystem fs2=FileSystem.get(new URI("cachedfile://a"),conf);
    assertSame(fs1,fs2);
  }
private static class DefaultFs extends LocalFileSystem {
    URI uri;
    @Override public void initialize(    URI uri,    Configuration conf){
      this.uri=uri;
    }
    @Override public URI getUri(){
      return uri;
    }
  }
  @Test public void testDefaultFsUris() throws Exception {
    final Configuration conf=new Configuration();
    conf.set("fs.defaultfs.impl",DefaultFs.class.getName());
    final URI defaultUri=URI.create("defaultfs://host");
    FileSystem.setDefaultUri(conf,defaultUri);
    final FileSystem defaultFs=FileSystem.get(conf);
    assertEquals(defaultUri,defaultFs.getUri());
    assertSame(defaultFs,FileSystem.get(URI.create("defaultfs:/"),conf));
    assertSame(defaultFs,FileSystem.get(URI.create("defaultfs:///"),conf));
    assertSame(defaultFs,FileSystem.get(URI.create("defaultfs://host"),conf));
    assertNotSame(defaultFs,FileSystem.get(URI.create("defaultfs://host2"),conf));
    assertSame(defaultFs,FileSystem.get(URI.create("/"),conf));
    intercept(UnsupportedFileSystemException.class,() -> FileSystem.get(URI.create("//host"),conf));
    intercept(UnsupportedFileSystemException.class,() -> FileSystem.get(URI.create("//host2"),conf));
  }
public static class InitializeForeverFileSystem extends LocalFileSystem {
    final static Semaphore sem=new Semaphore(0);
    @Override public void initialize(    URI uri,    Configuration conf) throws IOException {
      sem.release();
      try {
        while (true) {
          Thread.sleep(1000);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  }
  @Test public void testCacheEnabledWithInitializeForeverFS() throws Exception {
    final Configuration conf=new Configuration();
    Thread t=new Thread(){
      @Override public void run(){
        conf.set("fs.localfs1.impl","org.apache.hadoop.fs." + "TestFileSystemCaching$InitializeForeverFileSystem");
        try {
          FileSystem.get(new URI("localfs1://a"),conf);
        }
 catch (        IOException|URISyntaxException e) {
          e.printStackTrace();
        }
      }
    }
;
    t.start();
    InitializeForeverFileSystem.sem.acquire();
    conf.set("fs.cachedfile.impl",FileSystem.getFileSystemClass("file",null).getName());
    FileSystem.get(new URI("cachedfile://a"),conf);
    t.interrupt();
    t.join();
  }
  @Test public void testCacheDisabled() throws Exception {
    Configuration conf=new Configuration();
    conf.set("fs.uncachedfile.impl",FileSystem.getFileSystemClass("file",null).getName());
    conf.setBoolean("fs.uncachedfile.impl.disable.cache",true);
    FileSystem fs1=FileSystem.get(new URI("uncachedfile://a"),conf);
    FileSystem fs2=FileSystem.get(new URI("uncachedfile://a"),conf);
    assertNotSame(fs1,fs2);
  }
  @SuppressWarnings("unchecked") @Test public <T extends TokenIdentifier>void testCacheForUgi() throws Exception {
    final Configuration conf=newConf();
    UserGroupInformation ugiA=UserGroupInformation.createRemoteUser("foo");
    UserGroupInformation ugiB=UserGroupInformation.createRemoteUser("bar");
    FileSystem fsA=getCachedFS(ugiA,conf);
    FileSystem fsA1=getCachedFS(ugiA,conf);
    assertSame(fsA,fsA1);
    FileSystem fsB=getCachedFS(ugiB,conf);
    assertNotSame(fsA,fsB);
    Token<T> t1=mock(Token.class);
    UserGroupInformation ugiA2=UserGroupInformation.createRemoteUser("foo");
    fsA=getCachedFS(ugiA2,conf);
    assertNotSame(fsA,fsA1);
    ugiA.addToken(t1);
    fsA=getCachedFS(ugiA,conf);
    assertSame(fsA,fsA1);
  }
  /** 
 * Get the cached filesystem for "cachedfile://a" for the supplied user
 * @param ugi user
 * @param conf configuration
 * @return the filesystem
 * @throws IOException failure to get/init
 * @throws InterruptedException part of the signature of UGI.doAs()
 */
  private FileSystem getCachedFS(  UserGroupInformation ugi,  Configuration conf) throws IOException, InterruptedException {
    return ugi.doAs((PrivilegedExceptionAction<FileSystem>)() -> FileSystem.get(new URI("cachedfile://a"),conf));
  }
  @Test public void testUserFS() throws Exception {
    final Configuration conf=newConf();
    FileSystem fsU1=FileSystem.get(new URI("cachedfile://a"),conf,"bar");
    FileSystem fsU2=FileSystem.get(new URI("cachedfile://a"),conf,"foo");
    assertNotSame(fsU1,fsU2);
  }
  private Configuration newConf() throws IOException {
    final Configuration conf=new Configuration();
    conf.set("fs.cachedfile.impl",FileSystem.getFileSystemClass("file",null).getName());
    return conf;
  }
  @Test public void testFsUniqueness() throws Exception {
    final Configuration conf=newConf();
    FileSystem fs1=FileSystem.get(conf);
    FileSystem fs2=FileSystem.get(conf);
    assertSame(fs1,fs2);
    fs1=FileSystem.newInstance(new URI("cachedfile://a"),conf,"bar");
    fs2=FileSystem.newInstance(new URI("cachedfile://a"),conf,"bar");
    assertTrue(fs1 != fs2 && !fs1.equals(fs2));
    fs1.close();
    fs2.close();
  }
  @Test public void testCloseAllForUGI() throws Exception {
    final Configuration conf=newConf();
    UserGroupInformation ugiA=UserGroupInformation.createRemoteUser("foo");
    FileSystem fsA=getCachedFS(ugiA,conf);
    FileSystem fsA1=getCachedFS(ugiA,conf);
    assertSame(fsA,fsA1);
    FileSystem.closeAllForUGI(ugiA);
    fsA1=getCachedFS(ugiA,conf);
    assertNotSame(fsA,fsA1);
  }
  @Test public void testDelete() throws IOException {
    FileSystem mockFs=mock(FileSystem.class);
    FileSystem fs=new FilterFileSystem(mockFs);
    Path path=new Path("/a");
    fs.delete(path,false);
    verify(mockFs).delete(eq(path),eq(false));
    reset(mockFs);
    fs.delete(path,true);
    verify(mockFs).delete(eq(path),eq(true));
  }
  @Test public void testDeleteOnExit() throws IOException {
    FileSystem mockFs=mock(FileSystem.class);
    Path path=new Path("/a");
    try (FileSystem fs=new FilterFileSystem(mockFs)){
      when(mockFs.getFileStatus(eq(path))).thenReturn(new FileStatus());
      assertTrue(fs.deleteOnExit(path));
      verify(mockFs).getFileStatus(eq(path));
      reset(mockFs);
      when(mockFs.getFileStatus(eq(path))).thenReturn(new FileStatus());
      fs.close();
    }
     verify(mockFs).getFileStatus(eq(path));
    verify(mockFs).delete(eq(path),eq(true));
  }
  @Test public void testDeleteOnExitFNF() throws IOException {
    FileSystem mockFs=mock(FileSystem.class);
    Path path;
    try (FileSystem fs=new FilterFileSystem(mockFs)){
      path=new Path("/a");
      assertFalse(fs.deleteOnExit(path));
      verify(mockFs).getFileStatus(eq(path));
      reset(mockFs);
      fs.close();
    }
     verify(mockFs,never()).getFileStatus(eq(path));
    verify(mockFs,never()).delete(any(Path.class),anyBoolean());
  }
  @Test public void testDeleteOnExitRemoved() throws IOException {
    FileSystem mockFs=mock(FileSystem.class);
    Path path;
    try (FileSystem fs=new FilterFileSystem(mockFs)){
      path=new Path("/a");
      when(mockFs.getFileStatus(eq(path))).thenReturn(new FileStatus());
      assertTrue(fs.deleteOnExit(path));
      verify(mockFs).getFileStatus(eq(path));
      reset(mockFs);
      fs.close();
    }
     verify(mockFs).getFileStatus(eq(path));
    verify(mockFs,never()).delete(any(Path.class),anyBoolean());
  }
  @Test public void testCancelDeleteOnExit() throws IOException {
    FileSystem mockFs=mock(FileSystem.class);
    try (FileSystem fs=new FilterFileSystem(mockFs)){
      Path path=new Path("/a");
      when(mockFs.getFileStatus(eq(path))).thenReturn(new FileStatus());
      assertTrue(fs.deleteOnExit(path));
      verify(mockFs).getFileStatus(eq(path));
      assertTrue(fs.cancelDeleteOnExit(path));
      assertFalse(fs.cancelDeleteOnExit(path));
      reset(mockFs);
      fs.close();
    }
     verify(mockFs,never()).getFileStatus(any(Path.class));
    verify(mockFs,never()).delete(any(Path.class),anyBoolean());
  }
  @Test public void testCacheIncludesURIUserInfo() throws Throwable {
    URI containerA=new URI("wasb://a@account.blob.core.windows.net");
    URI containerB=new URI("wasb://b@account.blob.core.windows.net");
    Configuration conf=new Configuration(false);
    FileSystem.Cache.Key keyA=new FileSystem.Cache.Key(containerA,conf);
    FileSystem.Cache.Key keyB=new FileSystem.Cache.Key(containerB,conf);
    assertNotEquals(keyA,keyB);
    assertNotEquals(keyA,new FileSystem.Cache.Key(new URI("wasb://account.blob.core.windows.net"),conf));
    assertEquals(keyA,new FileSystem.Cache.Key(new URI("wasb://A@account.blob.core.windows.net"),conf));
    assertNotEquals(keyA,new FileSystem.Cache.Key(new URI("wasb://a:password@account.blob.core.windows.net"),conf));
  }
}
