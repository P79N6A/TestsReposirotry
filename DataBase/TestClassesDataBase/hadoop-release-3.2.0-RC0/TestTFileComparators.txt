/** 
 * Byte arrays test case class using GZ compression codec, base class of none and LZO compression classes.
 */
public class TestTFileComparators {
  private static String ROOT=GenericTestUtils.getTestDir().getAbsolutePath();
  private final static int BLOCK_SIZE=512;
  private FileSystem fs;
  private Configuration conf;
  private Path path;
  private FSDataOutputStream out;
  private Writer writer;
  private String compression=Compression.Algorithm.GZ.getName();
  private String outputFile="TFileTestComparators";
  private int records1stBlock=4480;
  private int records2ndBlock=4263;
  @Before public void setUp() throws IOException {
    conf=new Configuration();
    path=new Path(ROOT,outputFile);
    fs=path.getFileSystem(conf);
    out=fs.create(path);
  }
  @After public void tearDown() throws IOException {
    fs.delete(path,true);
  }
  @Test public void testFailureBadComparatorNames() throws IOException {
    try {
      writer=new Writer(out,BLOCK_SIZE,compression,"badcmp",conf);
      Assert.fail("Failed to catch unsupported comparator names");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  @Test public void testFailureBadJClassNames() throws IOException {
    try {
      writer=new Writer(out,BLOCK_SIZE,compression,"jclass: some.non.existence.clazz",conf);
      Assert.fail("Failed to catch unsupported comparator names");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  @Test public void testFailureBadJClasses() throws IOException {
    try {
      writer=new Writer(out,BLOCK_SIZE,compression,"jclass:org.apache.hadoop.io.file.tfile.Chunk",conf);
      Assert.fail("Failed to catch unsupported comparator names");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  private void closeOutput() throws IOException {
    if (writer != null) {
      writer.close();
      writer=null;
    }
    if (out != null) {
      out.close();
      out=null;
    }
  }
}
