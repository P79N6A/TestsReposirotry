class DeadlockThread extends Thread {
  private Lock lock1=null;
  private Lock lock2=null;
  private Monitor mon1=null;
  private Monitor mon2=null;
  private boolean useSync;
  DeadlockThread(  String name,  Lock lock1,  Lock lock2){
    super(name);
    this.lock1=lock1;
    this.lock2=lock2;
    this.useSync=true;
  }
  DeadlockThread(  String name,  Monitor mon1,  Monitor mon2){
    super(name);
    this.mon1=mon1;
    this.mon2=mon2;
    this.useSync=false;
  }
  public void run(){
    if (useSync) {
      syncLock();
    }
 else {
      monitorLock();
    }
  }
  private void syncLock(){
    lock1.lock();
    try {
      try {
        barrier.await();
      }
 catch (      Exception e) {
      }
      goSyncDeadlock();
    }
  finally {
      lock1.unlock();
    }
  }
  private void goSyncDeadlock(){
    try {
      barrier.await();
    }
 catch (    Exception e) {
    }
    lock2.lock();
    throw new RuntimeException("should not reach here.");
  }
  private void monitorLock(){
synchronized (mon1) {
      try {
        barrier.await();
      }
 catch (      Exception e) {
      }
      goMonitorDeadlock();
    }
  }
  private void goMonitorDeadlock(){
    try {
      barrier.await();
    }
 catch (    Exception e) {
    }
synchronized (mon2) {
      throw new RuntimeException(getName() + " should not reach here.");
    }
  }
}
