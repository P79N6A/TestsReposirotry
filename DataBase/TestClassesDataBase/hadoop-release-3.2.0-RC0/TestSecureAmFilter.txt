/** 
 * Test AmIpFilter. Requests to a no declared hosts should has way through proxy. Another requests can be filtered with (without) user name.
 */
public class TestSecureAmFilter {
  private String proxyHost="localhost";
  private static final File TEST_ROOT_DIR=new File("target",TestSecureAmFilter.class.getName() + "-root");
  private static File httpSpnegoKeytabFile=new File(KerberosTestUtils.getKeytabFile());
  private static Configuration rmconf=new Configuration();
  private static String httpSpnegoPrincipal=KerberosTestUtils.getServerPrincipal();
  private static boolean miniKDCStarted=false;
  private static MiniKdc testMiniKDC;
  @BeforeClass public static void setUp(){
    rmconf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
    rmconf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    rmconf.setBoolean(YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,true);
    rmconf.set("hadoop.http.filter.initializers",RMAuthenticationFilterInitializer.class.getName());
    rmconf.set(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY,httpSpnegoPrincipal);
    rmconf.set(YarnConfiguration.RM_KEYTAB,httpSpnegoKeytabFile.getAbsolutePath());
    rmconf.set(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY,httpSpnegoKeytabFile.getAbsolutePath());
    UserGroupInformation.setConfiguration(rmconf);
    try {
      testMiniKDC=new MiniKdc(MiniKdc.createConf(),TEST_ROOT_DIR);
      setupKDC();
    }
 catch (    Exception e) {
      assertTrue("Couldn't create MiniKDC",false);
    }
  }
  @AfterClass public static void tearDown(){
    if (testMiniKDC != null) {
      testMiniKDC.stop();
    }
  }
  private static void setupKDC() throws Exception {
    if (!miniKDCStarted) {
      testMiniKDC.start();
      getKdc().createPrincipal(httpSpnegoKeytabFile,"HTTP/localhost");
      miniKDCStarted=true;
    }
  }
  private static MiniKdc getKdc(){
    return testMiniKDC;
  }
private class TestAmIpFilter extends AmIpFilter {
    private Set<String> proxyAddresses=null;
    protected Set<String> getProxyAddresses(){
      if (proxyAddresses == null) {
        proxyAddresses=new HashSet<String>();
      }
      proxyAddresses.add(proxyHost);
      return proxyAddresses;
    }
  }
  @Test public void testFindRedirectUrl() throws Exception {
    final String rm1="rm1";
    final String rm2="rm2";
    final String rm1Url=startSecureHttpServer();
    final String rm2Url="host2:8088";
    TestAmIpFilter filter=new TestAmIpFilter();
    TestAmIpFilter spy=Mockito.spy(filter);
    spy.proxyUriBases=new HashMap<>();
    spy.proxyUriBases.put(rm1,rm1Url);
    spy.proxyUriBases.put(rm2,rm2Url);
    spy.rmUrls=new String[]{rm1,rm2};
    assertTrue(spy.isValidUrl(rm1Url));
    assertFalse(spy.isValidUrl(rm2Url));
    assertEquals(spy.findRedirectUrl(),rm1Url);
  }
  private String startSecureHttpServer() throws Exception {
    HttpServer2.Builder builder=new HttpServer2.Builder().setName("test").setConf(rmconf).addEndpoint(new URI("http://localhost")).setACL(new AccessControlList(rmconf.get(YarnConfiguration.YARN_ADMIN_ACL,YarnConfiguration.DEFAULT_YARN_ADMIN_ACL)));
    builder.setUsernameConfKey(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY).setKeytabConfKey(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY).setSecurityEnabled(UserGroupInformation.isSecurityEnabled());
    HttpServer2 server=builder.build();
    server.start();
    URL baseUrl=new URL("http://" + NetUtils.getHostPortString(server.getConnectorAddress(0)));
    return baseUrl.toString();
  }
}
