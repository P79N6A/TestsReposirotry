/** 
 * This class tests various cases of the algorithms implemented in {@link MutableRollingAverages}.
 */
public class TestMutableRollingAverages {
  /** 
 * Tests if the results are correct if no samples are inserted, dry run of empty roll over.
 */
  @Test(timeout=30000) public void testRollingAveragesEmptyRollover() throws Exception {
    final MetricsRecordBuilder rb=mockMetricsRecordBuilder();
    try (MutableRollingAverages rollingAverages=new MutableRollingAverages("Time")){
      rollingAverages.replaceScheduledTask(2,5,TimeUnit.SECONDS);
      rollingAverages.snapshot(rb,true);
      verify(rb,never()).addGauge(info("FooRollingAvgTime","Rolling average time for foo"),(long)0);
      verify(rb,never()).addGauge(info("BarAvgTime","Rolling average time for bar"),(long)0);
      Thread.sleep(6000);
      rollingAverages.snapshot(rb,false);
      verify(rb,never()).addGauge(info("FooRollingAvgTime","Rolling average time for foo"),(long)0);
      verify(rb,never()).addGauge(info("BarAvgTime","Rolling average time for bar"),(long)0);
    }
   }
  /** 
 * Tests the case: <p> 5s interval and 2 sliding windows </p> <p> sample stream: 1000 times 1, 2, and 3, respectively, e.g. [1, 1...1], [2, 2...2] and [3, 3...3] </p>
 */
  @Test(timeout=30000) public void testRollingAveragesRollover() throws Exception {
    final MetricsRecordBuilder rb=mockMetricsRecordBuilder();
    final String name="foo2";
    final int windowSizeMs=5000;
    final int numWindows=2;
    final int numOpsPerIteration=1000;
    try (MutableRollingAverages rollingAverages=new MutableRollingAverages("Time")){
      rollingAverages.replaceScheduledTask(2,5000,TimeUnit.MILLISECONDS);
      final long start=Time.monotonicNow();
      for (int i=1; i <= 3; i++) {
        for (long j=1; j <= numOpsPerIteration; j++) {
          rollingAverages.add(name,i);
        }
        final long sleep=(start + (windowSizeMs * i) + 1000) - Time.monotonicNow();
        Thread.sleep(sleep);
        rollingAverages.snapshot(rb,false);
        final double rollingSum=numOpsPerIteration * (i > 1 ? (i - 1) : 0) + numOpsPerIteration * i;
        final long rollingTotal=i > 1 ? 2 * numOpsPerIteration : numOpsPerIteration;
        verify(rb).addGauge(info("[Foo2]RollingAvgTime","Rolling average time for foo2"),rollingSum / rollingTotal);
        verify(rb,times(i)).addGauge(eq(info("[Foo2]RollingAvgTime","Rolling average time for foo2")),anyDouble());
      }
    }
   }
  /** 
 * Test that MutableRollingAverages gives expected results after initialization.
 * @throws Exception
 */
  @Test(timeout=30000) public void testMutableRollingAveragesMetric() throws Exception {
    DummyTestMetric testMetric=new DummyTestMetric();
    testMetric.create();
    testMetric.add("metric1",100);
    testMetric.add("metric1",900);
    testMetric.add("metric2",1000);
    testMetric.add("metric2",1000);
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        testMetric.collectThreadLocalStates();
        return testMetric.getStats().size() > 0;
      }
    }
,500,5000);
    MetricsRecordBuilder rb=getMetrics(DummyTestMetric.METRIC_NAME);
    double metric1Avg=getDoubleGauge("[Metric1]RollingAvgTesting",rb);
    double metric2Avg=getDoubleGauge("[Metric2]RollingAvgTesting",rb);
    Assert.assertTrue("The rolling average of metric1 is not as expected",metric1Avg == 500.0);
    Assert.assertTrue("The rolling average of metric2 is not as expected",metric2Avg == 1000.0);
  }
class DummyTestMetric {
    @Metric(valueName="testing") private MutableRollingAverages rollingAverages;
    static final String METRIC_NAME="RollingAveragesTestMetric";
    protected void create(){
      DefaultMetricsSystem.instance().register(METRIC_NAME,"mutable rolling averages test",this);
      rollingAverages.replaceScheduledTask(10,1000,TimeUnit.MILLISECONDS);
    }
    void add(    String name,    long latency){
      rollingAverages.add(name,latency);
    }
    void collectThreadLocalStates(){
      rollingAverages.collectThreadLocalStates();
    }
    Map<String,Double> getStats(){
      return rollingAverages.getStats(0);
    }
  }
}
