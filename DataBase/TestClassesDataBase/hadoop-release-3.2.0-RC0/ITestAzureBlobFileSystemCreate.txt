/** 
 * Test create operation.
 */
public class ITestAzureBlobFileSystemCreate extends AbstractAbfsIntegrationTest {
  private static final Path TEST_FILE_PATH=new Path("testfile");
  private static final Path TEST_FOLDER_PATH=new Path("testFolder");
  private static final String TEST_CHILD_FILE="childFile";
  public ITestAzureBlobFileSystemCreate() throws Exception {
    super();
  }
  @Test public void testEnsureFileCreatedImmediately() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    FSDataOutputStream out=fs.create(TEST_FILE_PATH);
    try {
      assertIsFile(fs,TEST_FILE_PATH);
    }
  finally {
      out.close();
    }
    assertIsFile(fs,TEST_FILE_PATH);
  }
  @Test @SuppressWarnings("deprecation") public void testCreateNonRecursive() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path testFile=new Path(TEST_FOLDER_PATH,TEST_CHILD_FILE);
    try {
      fs.createNonRecursive(testFile,true,1024,(short)1,1024,null);
      fail("Should've thrown");
    }
 catch (    FileNotFoundException expected) {
    }
    fs.mkdirs(TEST_FOLDER_PATH);
    fs.createNonRecursive(testFile,true,1024,(short)1,1024,null).close();
    assertIsFile(fs,testFile);
  }
  @Test @SuppressWarnings("deprecation") public void testCreateNonRecursive1() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path testFile=new Path(TEST_FOLDER_PATH,TEST_CHILD_FILE);
    try {
      fs.createNonRecursive(testFile,FsPermission.getDefault(),EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE),1024,(short)1,1024,null);
      fail("Should've thrown");
    }
 catch (    FileNotFoundException expected) {
    }
    fs.mkdirs(TEST_FOLDER_PATH);
    fs.createNonRecursive(testFile,true,1024,(short)1,1024,null).close();
    assertIsFile(fs,testFile);
  }
  @Test @SuppressWarnings("deprecation") public void testCreateNonRecursive2() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path testFile=new Path(TEST_FOLDER_PATH,TEST_CHILD_FILE);
    try {
      fs.createNonRecursive(testFile,FsPermission.getDefault(),false,1024,(short)1,1024,null);
      fail("Should've thrown");
    }
 catch (    FileNotFoundException e) {
    }
    fs.mkdirs(TEST_FOLDER_PATH);
    fs.createNonRecursive(testFile,true,1024,(short)1,1024,null).close();
    assertIsFile(fs,testFile);
  }
}
