/** 
 * Test abandoning blocks, which clients do on pipeline creation failure.
 */
public class TestAbandonBlock {
  public static final Logger LOG=LoggerFactory.getLogger(TestAbandonBlock.class);
  private static final Configuration CONF=new HdfsConfiguration();
  static final String FILE_NAME_PREFIX="/" + TestAbandonBlock.class.getSimpleName() + "_";
  private MiniDFSCluster cluster;
  private DistributedFileSystem fs;
  @Before public void setUp() throws Exception {
    cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
    fs=cluster.getFileSystem();
    cluster.waitActive();
  }
  @After public void tearDown() throws Exception {
    if (fs != null) {
      fs.close();
      fs=null;
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testAbandonBlock() throws IOException {
    String src=FILE_NAME_PREFIX + "foo";
    FSDataOutputStream fout=fs.create(new Path(src),true,4096,(short)1,512L);
    for (int i=0; i < 1024; i++) {
      fout.write(123);
    }
    fout.hflush();
    long fileId=((DFSOutputStream)fout.getWrappedStream()).getFileId();
    DFSClient dfsclient=DFSClientAdapter.getDFSClient(fs);
    LocatedBlocks blocks=dfsclient.getNamenode().getBlockLocations(src,0,Integer.MAX_VALUE);
    int orginalNumBlocks=blocks.locatedBlockCount();
    LocatedBlock b=blocks.getLastLocatedBlock();
    dfsclient.getNamenode().abandonBlock(b.getBlock(),fileId,src,dfsclient.clientName);
    dfsclient.getNamenode().abandonBlock(b.getBlock(),fileId,src,dfsclient.clientName);
    fout.close();
    cluster.restartNameNode();
    blocks=dfsclient.getNamenode().getBlockLocations(src,0,Integer.MAX_VALUE);
    Assert.assertEquals("Blocks " + b + " has not been abandoned.",orginalNumBlocks,blocks.locatedBlockCount() + 1);
  }
  @Test public void testQuotaUpdatedWhenBlockAbandoned() throws IOException {
    fs.setQuota(new Path("/"),HdfsConstants.QUOTA_DONT_SET,3 * 1024 * 1024);
    String src=FILE_NAME_PREFIX + "test_quota1";
    FSDataOutputStream fout=fs.create(new Path(src),true,4096,(short)2,1024 * 1024);
    for (int i=0; i < 1024; i++) {
      fout.writeByte(123);
    }
    cluster.getDataNodes().get(0).shutdown();
    try {
      fout.close();
    }
 catch (    QuotaExceededException e) {
      fail("Unexpected quota exception when closing fout");
    }
  }
}
