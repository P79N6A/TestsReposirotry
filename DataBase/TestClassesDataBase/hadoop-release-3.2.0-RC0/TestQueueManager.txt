public class TestQueueManager {
  private FairSchedulerConfiguration conf;
  private QueueManager queueManager;
  private Set<FSQueue> notEmptyQueues;
  private FairScheduler scheduler;
  @Before public void setUp() throws Exception {
    conf=new FairSchedulerConfiguration();
    scheduler=mock(FairScheduler.class);
    AllocationConfiguration allocConf=new AllocationConfiguration(conf);
    allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.test");
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.test.childA");
    allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.test.childB");
    when(scheduler.getAllocationConfiguration()).thenReturn(allocConf);
    when(scheduler.getConf()).thenReturn(conf);
    when(scheduler.getResourceCalculator()).thenReturn(new DefaultResourceCalculator());
    SystemClock clock=SystemClock.getInstance();
    when(scheduler.getClock()).thenReturn(clock);
    notEmptyQueues=new HashSet<>();
    queueManager=new QueueManager(scheduler){
      @Override public boolean isEmpty(      FSQueue queue){
        return !notEmptyQueues.contains(queue);
      }
    }
;
    FSQueueMetrics.forQueue("root",null,true,conf);
    queueManager.initialize(conf);
  }
  @Test public void testReloadTurnsLeafQueueIntoParent() throws Exception {
    updateConfiguredLeafQueues(queueManager,"queue1");
    updateConfiguredLeafQueues(queueManager,"queue1.queue2");
    assertNull(queueManager.getLeafQueue("queue1",false));
    assertNotNull(queueManager.getLeafQueue("queue1.queue2",false));
    updateConfiguredLeafQueues(queueManager,"queue1");
    assertNull(queueManager.getLeafQueue("queue1.queue2",false));
    assertNotNull(queueManager.getLeafQueue("queue1",false));
    notEmptyQueues.add(queueManager.getLeafQueue("queue1",false));
    updateConfiguredLeafQueues(queueManager,"queue1.queue2");
    assertNull(queueManager.getLeafQueue("queue1.queue2",false));
    assertNotNull(queueManager.getLeafQueue("queue1",false));
    notEmptyQueues.clear();
    updateConfiguredLeafQueues(queueManager,"queue1.queue2");
    notEmptyQueues.add(queueManager.getQueue("root.queue1"));
    updateConfiguredLeafQueues(queueManager,"queue1");
    assertNotNull(queueManager.getLeafQueue("queue1.queue2",false));
    assertNull(queueManager.getLeafQueue("queue1",false));
    updateConfiguredLeafQueues(queueManager,"default.queue3");
    assertNull(queueManager.getLeafQueue("default.queue3",false));
    assertNotNull(queueManager.getLeafQueue("default",false));
  }
  @Test public void testReloadTurnsLeafToParentWithNoLeaf(){
    AllocationConfiguration allocConf=new AllocationConfiguration(conf);
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.queue1");
    queueManager.updateAllocationConfiguration(allocConf);
    assertNotNull(queueManager.getLeafQueue("root.queue1",false));
    notEmptyQueues.add(queueManager.getLeafQueue("root.queue1",false));
    allocConf=new AllocationConfiguration(conf);
    allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.queue1");
    queueManager.updateAllocationConfiguration(allocConf);
    assertNotNull(queueManager.getLeafQueue("root.queue1",false));
    assertNull(queueManager.getParentQueue("root.queue1",false));
    notEmptyQueues.clear();
    queueManager.updateAllocationConfiguration(allocConf);
    assertNull(queueManager.getLeafQueue("root.queue1",false));
    assertNotNull(queueManager.getParentQueue("root.queue1",false));
    assertTrue(queueManager.getParentQueue("root.queue1",false).getChildQueues().isEmpty());
  }
  @Test public void testCheckQueueNodeName(){
    assertFalse(queueManager.isQueueNameValid(""));
    assertFalse(queueManager.isQueueNameValid("  "));
    assertFalse(queueManager.isQueueNameValid(" a"));
    assertFalse(queueManager.isQueueNameValid("a "));
    assertFalse(queueManager.isQueueNameValid(" a "));
    assertFalse(queueManager.isQueueNameValid("\u00a0"));
    assertFalse(queueManager.isQueueNameValid("a\u00a0"));
    assertFalse(queueManager.isQueueNameValid("\u00a0a\u00a0"));
    assertTrue(queueManager.isQueueNameValid("a b"));
    assertTrue(queueManager.isQueueNameValid("a"));
  }
  private void updateConfiguredLeafQueues(  QueueManager queueMgr,  String... confLeafQueues){
    AllocationConfiguration allocConf=new AllocationConfiguration(conf);
    allocConf.configuredQueues.get(FSQueueType.LEAF).addAll(Sets.newHashSet(confLeafQueues));
    queueMgr.updateAllocationConfiguration(allocConf);
  }
  /** 
 * Test simple leaf queue creation.
 */
  @Test public void testCreateLeafQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q1=queueManager.createQueue("root.queue1",FSQueueType.LEAF);
    assertNotNull("Leaf queue root.queue1 was not created",queueManager.getLeafQueue("root.queue1",false));
    assertEquals("createQueue() returned wrong queue","root.queue1",q1.getName());
  }
  /** 
 * Test creation of a leaf queue and its parent.
 */
  @Test public void testCreateLeafQueueAndParent(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q2=queueManager.createQueue("root.queue1.queue2",FSQueueType.LEAF);
    assertNotNull("Parent queue root.queue1 was not created",queueManager.getParentQueue("root.queue1",false));
    assertNotNull("Leaf queue root.queue1.queue2 was not created",queueManager.getLeafQueue("root.queue1.queue2",false));
    assertEquals("createQueue() returned wrong queue","root.queue1.queue2",q2.getName());
  }
  /** 
 * Test creation of leaf and parent child queues when the parent queue has child defaults set. In this test we rely on the root.test, root.test.childA and root.test.childB queues that are created in the {@link #setUp()} method.
 */
  @Test public void testCreateQueueWithChildDefaults(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    queueManager.getQueue("root.test").setMaxChildQueueResource(new ConfigurableResource(Resources.createResource(8192,256)));
    FSQueue q1=queueManager.createQueue("root.test.childC",FSQueueType.LEAF);
    assertNotNull("Leaf queue root.test.childC was not created",queueManager.getLeafQueue("root.test.childC",false));
    assertEquals("createQueue() returned wrong queue","root.test.childC",q1.getName());
    assertEquals("Max resources for root.queue1 were not inherited from " + "parent's max child resources",Resources.createResource(8192,256),q1.getMaxShare());
    FSQueue q2=queueManager.createQueue("root.test.childD",FSQueueType.PARENT);
    assertNotNull("Leaf queue root.test.childD was not created",queueManager.getParentQueue("root.test.childD",false));
    assertEquals("createQueue() returned wrong queue","root.test.childD",q2.getName());
    assertEquals("Max resources for root.test.childD were not inherited " + "from parent's max child resources",Resources.createResource(8192,256),q2.getMaxShare());
    assertNotNull("Leaf queue root.test.childA was not created during setup",queueManager.getLeafQueue("root.test.childA",false));
    assertEquals("Max resources for root.test.childA were inherited from " + "parent's max child resources",Resources.unbounded(),queueManager.getLeafQueue("root.test.childA",false).getMaxShare());
    assertNotNull("Leaf queue root.test.childB was not created during setup",queueManager.getParentQueue("root.test.childB",false));
    assertEquals("Max resources for root.test.childB were inherited from " + "parent's max child resources",Resources.unbounded(),queueManager.getParentQueue("root.test.childB",false).getMaxShare());
  }
  /** 
 * Test creation of a leaf queue with no resource limits.
 */
  @Test public void testCreateLeafQueueWithDefaults(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    FSQueue q1=queueManager.createQueue("root.queue1",FSQueueType.LEAF);
    assertNotNull("Leaf queue root.queue1 was not created",queueManager.getLeafQueue("root.queue1",false));
    assertEquals("createQueue() returned wrong queue","root.queue1",q1.getName());
    assertEquals("Min resources were not set to default",Resources.createResource(0,0),q1.getMinShare());
    assertEquals("Max resources were not set to default",Resources.unbounded(),q1.getMaxShare());
  }
  /** 
 * Test creation of a simple parent queue.
 */
  @Test public void testCreateParentQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q1=queueManager.createQueue("root.queue1",FSQueueType.PARENT);
    assertNotNull("Parent queue root.queue1 was not created",queueManager.getParentQueue("root.queue1",false));
    assertEquals("createQueue() returned wrong queue","root.queue1",q1.getName());
  }
  /** 
 * Test creation of a parent queue and its parent.
 */
  @Test public void testCreateParentQueueAndParent(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q2=queueManager.createQueue("root.queue1.queue2",FSQueueType.PARENT);
    assertNotNull("Parent queue root.queue1 was not created",queueManager.getParentQueue("root.queue1",false));
    assertNotNull("Leaf queue root.queue1.queue2 was not created",queueManager.getParentQueue("root.queue1.queue2",false));
    assertEquals("createQueue() returned wrong queue","root.queue1.queue2",q2.getName());
  }
  @Test public void testRemovalOfDynamicLeafQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q1=queueManager.getLeafQueue("root.test.childB.dynamic1",true);
    assertNotNull("Queue root.test.childB.dynamic1 was not created",q1);
    assertEquals("createQueue() returned wrong queue","root.test.childB.dynamic1",q1.getName());
    assertTrue("root.test.childB.dynamic1 is not a dynamic queue",q1.isDynamic());
    notEmptyQueues.add(q1);
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.test.childB.dynamic1",false);
    assertNotNull("Queue root.test.childB.dynamic1 was deleted",q1);
    notEmptyQueues.remove(q1);
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.test.childB.dynamic1",false);
    assertNull("Queue root.test.childB.dynamic1 was not deleted",q1);
    assertNotNull("The static parent of root.test.childB.dynamic1 was deleted",queueManager.getParentQueue("root.test.childB",false));
  }
  @Test public void testRemovalOfDynamicParentQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q1=queueManager.getLeafQueue("root.parent1.dynamic1",true);
    assertNotNull("Queue root.parent1.dynamic1 was not created",q1);
    assertEquals("createQueue() returned wrong queue","root.parent1.dynamic1",q1.getName());
    assertTrue("root.parent1.dynamic1 is not a dynamic queue",q1.isDynamic());
    FSQueue p1=queueManager.getParentQueue("root.parent1",false);
    assertNotNull("Queue root.parent1 was not created",p1);
    assertTrue("root.parent1 is not a dynamic queue",p1.isDynamic());
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.parent1.dynamic1",false);
    p1=queueManager.getParentQueue("root.parent1",false);
    assertNull("Queue root.parent1.dynamic1 was not deleted",q1);
    assertNull("Queue root.parent1 was not deleted",p1);
  }
  @Test public void testNonEmptyDynamicQueueBecomingStaticQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSLeafQueue q1=queueManager.getLeafQueue("root.leaf1",true);
    assertNotNull("Queue root.leaf1 was not created",q1);
    assertEquals("createQueue() returned wrong queue","root.leaf1",q1.getName());
    assertTrue("root.leaf1 is not a dynamic queue",q1.isDynamic());
    notEmptyQueues.add(q1);
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.leaf1",false);
    assertNotNull("Queue root.leaf1 was deleted",q1);
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.leaf1");
    queueManager.updateAllocationConfiguration(allocConf);
    assertFalse("root.leaf1 is not a static queue",q1.isDynamic());
    notEmptyQueues.clear();
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.leaf1",false);
    assertNotNull("Queue root.leaf1 was deleted",q1);
    assertFalse("root.leaf1 is not a static queue",q1.isDynamic());
  }
  @Test public void testNonEmptyStaticQueueBecomingDynamicQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSLeafQueue q1=queueManager.getLeafQueue("root.test.childA",false);
    assertNotNull("Queue root.test.childA does not exist",q1);
    assertEquals("createQueue() returned wrong queue","root.test.childA",q1.getName());
    assertFalse("root.test.childA is not a static queue",q1.isDynamic());
    notEmptyQueues.add(q1);
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.test.childA",false);
    assertNotNull("Queue root.test.childA was deleted",q1);
    assertFalse("root.test.childA is not a dynamic queue",q1.isDynamic());
    for (    Set<String> queueNames : allocConf.configuredQueues.values()) {
      queueManager.setQueuesToDynamic(queueNames);
      queueNames.clear();
    }
    queueManager.updateAllocationConfiguration(allocConf);
    q1=queueManager.getLeafQueue("root.test.childA",false);
    assertNotNull("Queue root.test.childA was deleted",q1);
    assertTrue("root.test.childA is not a dynamic queue",q1.isDynamic());
    notEmptyQueues.remove(q1);
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getLeafQueue("root.test.childA",false);
    assertNull("Queue root.test.childA was not deleted",q1);
    FSParentQueue p1=queueManager.getParentQueue("root.test",false);
    assertNull("Queue root.test was not deleted",p1);
  }
  @Test public void testRemovalOfChildlessParentQueue(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSParentQueue q1=queueManager.getParentQueue("root.test.childB",false);
    assertNotNull("Queue root.test.childB was not created",q1);
    assertEquals("createQueue() returned wrong queue","root.test.childB",q1.getName());
    assertFalse("root.test.childB is a dynamic queue",q1.isDynamic());
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getParentQueue("root.test.childB",false);
    assertNotNull("Queue root.test.childB was deleted",q1);
    allocConf.configuredQueues.get(FSQueueType.PARENT).remove("root.test.childB");
    queueManager.updateAllocationConfiguration(allocConf);
    queueManager.setQueuesToDynamic(Collections.singleton("root.test.childB"));
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q1=queueManager.getParentQueue("root.leaf1",false);
    assertNull("Queue root.leaf1 was not deleted",q1);
  }
  @Test public void testQueueTypeChange(){
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager.updateAllocationConfiguration(allocConf);
    FSQueue q1=queueManager.getLeafQueue("root.parent1.leaf1",true);
    assertNotNull("Queue root.parent1.leaf1 was not created",q1);
    assertEquals("createQueue() returned wrong queue","root.parent1.leaf1",q1.getName());
    assertTrue("root.parent1.leaf1 is not a dynamic queue",q1.isDynamic());
    FSQueue p1=queueManager.getParentQueue("root.parent1",false);
    assertNotNull("Queue root.parent1 was not created",p1);
    assertTrue("root.parent1 is not a dynamic queue",p1.isDynamic());
    allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.parent1");
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.parent1.leaf1");
    queueManager.updateAllocationConfiguration(allocConf);
    q1=queueManager.getLeafQueue("root.parent1.leaf1",false);
    assertFalse("root.parent1.leaf1 is not a static queue",q1.isDynamic());
    p1=queueManager.getParentQueue("root.parent1",false);
    assertFalse("root.parent1 is not a static queue",p1.isDynamic());
    allocConf.configuredQueues.get(FSQueueType.PARENT).remove("root.parent1");
    allocConf.configuredQueues.get(FSQueueType.LEAF).remove("root.parent1.leaf1");
    queueManager.updateAllocationConfiguration(allocConf);
    queueManager.setQueuesToDynamic(ImmutableSet.of("root.parent1","root.parent1.leaf1"));
    q1=queueManager.getLeafQueue("root.parent1.leaf1",false);
    assertTrue("root.parent1.leaf1 is not a dynamic queue",q1.isDynamic());
    p1=queueManager.getParentQueue("root.parent1",false);
    assertTrue("root.parent1 is not a dynamic queue",p1.isDynamic());
  }
  @Test public void testApplicationAssignmentPreventsRemovalOfDynamicQueue() throws Exception {
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    queueManager=new QueueManager(scheduler);
    queueManager.initialize(conf);
    queueManager.updateAllocationConfiguration(allocConf);
    FSLeafQueue q=queueManager.getLeafQueue("root.leaf1",true);
    assertNotNull("root.leaf1 does not exist",q);
    assertTrue("root.leaf1 is not empty",queueManager.isEmpty(q));
    ApplicationId applicationId=ApplicationId.newInstance(1L,0);
    q.addAssignedApp(applicationId);
    q=queueManager.getLeafQueue("root.leaf1",false);
    assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q=queueManager.getLeafQueue("root.leaf1",false);
    assertNotNull("root.leaf1 has been removed",q);
    assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(applicationId,0);
    ActiveUsersManager activeUsersManager=Mockito.mock(ActiveUsersManager.class);
    RMContext rmContext=Mockito.mock(RMContext.class);
    FSAppAttempt appAttempt=new FSAppAttempt(scheduler,applicationAttemptId,"a_user",q,activeUsersManager,rmContext);
    q.addApp(appAttempt,true);
    queueManager.removeEmptyDynamicQueues();
    q=queueManager.getLeafQueue("root.leaf1",false);
    assertNotNull("root.leaf1 has been removed",q);
    assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
    q.removeApp(appAttempt);
    q=queueManager.getLeafQueue("root.leaf1",false);
    assertTrue("root.leaf1 is not empty",queueManager.isEmpty(q));
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q=queueManager.getLeafQueue("root.leaf1",false);
    assertNull("root.leaf1 has not been removed",q);
  }
  @Test public void testRemovalOfIncompatibleNonEmptyQueue() throws Exception {
    AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.a");
    scheduler.allocConf=allocConf;
    queueManager.updateAllocationConfiguration(allocConf);
    FSLeafQueue q=queueManager.getLeafQueue("root.a",true);
    assertNotNull("root.a does not exist",q);
    assertTrue("root.a is not empty",queueManager.isEmpty(q));
    notEmptyQueues.add(q);
    q=queueManager.getLeafQueue("root.a",false);
    assertNotNull("root.a does not exist",q);
    assertFalse("root.a is empty",queueManager.isEmpty(q));
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    q=queueManager.getLeafQueue("root.a",false);
    assertNotNull("root.a does not exist",q);
    allocConf.configuredQueues.get(FSQueueType.LEAF).remove("root.a");
    allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.a");
    allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.a.b");
    queueManager.updateAllocationConfiguration(allocConf);
    q=queueManager.getLeafQueue("root.a",false);
    assertNotNull("root.a has been removed",q);
    assertFalse("root.a is empty",queueManager.isEmpty(q));
    queueManager.removePendingIncompatibleQueues();
    q=queueManager.getLeafQueue("root.a",false);
    assertNotNull("root.a has been removed",q);
    assertFalse("root.a is empty",queueManager.isEmpty(q));
    notEmptyQueues.clear();
    queueManager.removePendingIncompatibleQueues();
    queueManager.removeEmptyDynamicQueues();
    FSParentQueue p=queueManager.getParentQueue("root.a",false);
    assertNotNull("root.a does not exist",p);
  }
}
