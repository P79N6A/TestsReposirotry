/** 
 * Unit test for AMRMProxyTokenSecretManager.
 */
public class TestAMRMProxyTokenSecretManager {
  private YarnConfiguration conf;
  private AMRMProxyTokenSecretManager secretManager;
  private NMMemoryStateStoreService stateStore;
  @Before public void setup(){
    conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
    stateStore=new NMMemoryStateStoreService();
    stateStore.init(conf);
    stateStore.start();
    secretManager=new AMRMProxyTokenSecretManager(stateStore);
    secretManager.init(conf);
    secretManager.start();
  }
  @After public void breakdown(){
    if (secretManager != null) {
      secretManager.stop();
    }
    if (stateStore != null) {
      stateStore.stop();
    }
  }
  @Test public void testNormalCase() throws IOException {
    ApplicationId appId=ApplicationId.newInstance(1,1);
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    Token<AMRMTokenIdentifier> localToken=secretManager.createAndGetAMRMToken(attemptId);
    AMRMTokenIdentifier identifier=secretManager.createIdentifier();
    identifier.readFields(new DataInputStream(new ByteArrayInputStream(localToken.getIdentifier())));
    secretManager.retrievePassword(identifier);
    secretManager.applicationMasterFinished(attemptId);
    try {
      secretManager.retrievePassword(identifier);
      Assert.fail("Expect InvalidToken exception");
    }
 catch (    InvalidToken e) {
    }
  }
  @Test public void testRecovery() throws IOException {
    ApplicationId appId=ApplicationId.newInstance(1,1);
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    Token<AMRMTokenIdentifier> localToken=secretManager.createAndGetAMRMToken(attemptId);
    AMRMTokenIdentifier identifier=secretManager.createIdentifier();
    identifier.readFields(new DataInputStream(new ByteArrayInputStream(localToken.getIdentifier())));
    secretManager.retrievePassword(identifier);
    secretManager.rollMasterKey();
    secretManager.stop();
    secretManager=new AMRMProxyTokenSecretManager(stateStore);
    secretManager.init(conf);
    secretManager.recover(stateStore.loadAMRMProxyState());
    secretManager.start();
    secretManager.createAndGetAMRMToken(attemptId);
    secretManager.retrievePassword(identifier);
    secretManager.activateNextMasterKey();
    secretManager.stop();
    secretManager=new AMRMProxyTokenSecretManager(stateStore);
    secretManager.init(conf);
    secretManager.recover(stateStore.loadAMRMProxyState());
    secretManager.start();
    secretManager.createAndGetAMRMToken(attemptId);
    try {
      secretManager.retrievePassword(identifier);
      Assert.fail("Expect InvalidToken exception because the " + "old master key should have expired");
    }
 catch (    InvalidToken e) {
    }
  }
}
