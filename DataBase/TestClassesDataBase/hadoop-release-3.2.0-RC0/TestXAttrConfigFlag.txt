/** 
 * Tests that the configuration flag that controls support for XAttrs is off and causes all attempted operations related to XAttrs to fail.  The NameNode can still load XAttrs from fsimage or edits.
 */
public class TestXAttrConfigFlag {
  private static final Path PATH=new Path("/path");
  private MiniDFSCluster cluster;
  private DistributedFileSystem fs;
  @Rule public ExpectedException exception=ExpectedException.none();
  @After public void shutdown() throws Exception {
    IOUtils.cleanup(null,fs);
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testSetXAttr() throws Exception {
    initCluster(true,false);
    fs.mkdirs(PATH);
    expectException();
    fs.setXAttr(PATH,"user.foo",null);
  }
  @Test public void testGetXAttrs() throws Exception {
    initCluster(true,false);
    fs.mkdirs(PATH);
    expectException();
    fs.getXAttrs(PATH);
  }
  @Test public void testRemoveXAttr() throws Exception {
    initCluster(true,false);
    fs.mkdirs(PATH);
    expectException();
    fs.removeXAttr(PATH,"user.foo");
  }
  @Test public void testEditLog() throws Exception {
    initCluster(true,true);
    fs.mkdirs(PATH);
    fs.setXAttr(PATH,"user.foo",null);
    restart(false,false);
  }
  @Test public void testFsImage() throws Exception {
    initCluster(true,true);
    fs.mkdirs(PATH);
    fs.setXAttr(PATH,"user.foo",null);
    restart(true,true);
    restart(false,false);
  }
  /** 
 * We expect an IOException, and we want the exception text to state the configuration key that controls XAttr support.
 */
  private void expectException(){
    exception.expect(IOException.class);
    exception.expectMessage(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY);
  }
  /** 
 * Initialize the cluster, wait for it to become active, and get FileSystem.
 * @param format if true, format the NameNode and DataNodes before starting up
 * @param xattrsEnabled if true, XAttr support is enabled
 * @throws Exception if any step fails
 */
  private void initCluster(  boolean format,  boolean xattrsEnabled) throws Exception {
    Configuration conf=new Configuration();
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY,xattrsEnabled);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(format).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
  }
  /** 
 * Restart the cluster, optionally saving a new checkpoint.
 * @param checkpoint boolean true to save a new checkpoint
 * @param xattrsEnabled if true, XAttr support is enabled
 * @throws Exception if restart fails
 */
  private void restart(  boolean checkpoint,  boolean xattrsEnabled) throws Exception {
    NameNode nameNode=cluster.getNameNode();
    if (checkpoint) {
      NameNodeAdapter.enterSafeMode(nameNode,false);
      NameNodeAdapter.saveNamespace(nameNode);
    }
    shutdown();
    initCluster(false,xattrsEnabled);
  }
}
