/** 
 * Test class for node configuration node attributes provider.
 */
public class TestConfigurationNodeAttributesProvider {
  private static File testRootDir=new File("target",TestConfigurationNodeAttributesProvider.class.getName() + "-localDir").getAbsoluteFile();
  private ConfigurationNodeAttributesProvider nodeAttributesProvider;
  @BeforeClass public static void create(){
    testRootDir.mkdirs();
  }
  @Before public void setup(){
    nodeAttributesProvider=new ConfigurationNodeAttributesProvider();
  }
  @After public void tearDown() throws Exception {
    if (nodeAttributesProvider != null) {
      nodeAttributesProvider.close();
      nodeAttributesProvider.stop();
    }
  }
  @AfterClass public static void remove() throws Exception {
    if (testRootDir.exists()) {
      FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()),true);
    }
  }
  @Test(timeout=30000L) public void testNodeAttributesFetchInterval() throws IOException, InterruptedException {
    Set<NodeAttribute> expectedAttributes1=new HashSet<>();
    expectedAttributes1.add(NodeAttribute.newInstance("test.io","host",NodeAttributeType.STRING,"host1"));
    Configuration conf=new Configuration();
    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS,1000);
    ConfigurationNodeAttributesProvider spyProvider=Mockito.spy(nodeAttributesProvider);
    Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes1);
    spyProvider.init(conf);
    spyProvider.start();
    Assert.assertEquals(expectedAttributes1,spyProvider.getDescriptors());
    Set<NodeAttribute> expectedAttributes2=new HashSet<>();
    expectedAttributes2.add(NodeAttribute.newInstance("test.io","os",NodeAttributeType.STRING,"windows"));
    Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes2);
    ArrayList<String> keysMet=new ArrayList<>();
    int numOfOldValue=0;
    int numOfNewValue=0;
    int times=5;
    while (times > 0) {
      Set<NodeAttribute> current=spyProvider.getDescriptors();
      Assert.assertEquals(1,current.size());
      String attributeName=current.iterator().next().getAttributeKey().getAttributeName();
      if ("host".equals(attributeName)) {
        numOfOldValue++;
      }
 else       if ("os".equals(attributeName)) {
        numOfNewValue++;
      }
      Thread.sleep(500);
      times--;
    }
    Assert.assertEquals(5,numOfNewValue + numOfOldValue);
    Assert.assertTrue(numOfOldValue > 0);
    Assert.assertTrue(numOfNewValue > 0);
  }
  @Test public void testDisableFetchNodeAttributes() throws IOException, InterruptedException {
    Set<NodeAttribute> expectedAttributes1=new HashSet<>();
    expectedAttributes1.add(NodeAttribute.newInstance("test.io","host",NodeAttributeType.STRING,"host1"));
    Configuration conf=new Configuration();
    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS,-1);
    ConfigurationNodeAttributesProvider spyProvider=Mockito.spy(nodeAttributesProvider);
    Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes1);
    spyProvider.init(conf);
    spyProvider.start();
    Assert.assertEquals(expectedAttributes1,spyProvider.getDescriptors());
    Set<NodeAttribute> expectedAttributes2=new HashSet<>();
    expectedAttributes2.add(NodeAttribute.newInstance("test.io","os",NodeAttributeType.STRING,"windows"));
    Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes2);
    try {
      GenericTestUtils.waitFor(() -> {
        Set<NodeAttribute> attributes=spyProvider.getDescriptors();
        return "os".equalsIgnoreCase(attributes.iterator().next().getAttributeKey().getAttributeName());
      }
,500,1000);
    }
 catch (    Exception e) {
      Assert.assertTrue(e instanceof TimeoutException);
      return;
    }
    Assert.fail("Expecting a failure in previous check!");
  }
  @Test public void testFetchAttributesFromConfiguration(){
    Configuration conf=new Configuration();
    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS,-1);
    conf.setStrings(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES,"");
  }
  @Test public void testParseConfiguration() throws IOException {
    String attributesStr="hostname,STRING,host1234:uptime,STRING,321543";
    Set<NodeAttribute> attributes=nodeAttributesProvider.parseAttributes(attributesStr);
    Assert.assertEquals(2,attributes.size());
    Iterator<NodeAttribute> ait=attributes.iterator();
    while (ait.hasNext()) {
      NodeAttribute attr=ait.next();
      NodeAttributeKey at=attr.getAttributeKey();
      if (at.getAttributeName().equals("hostname")) {
        Assert.assertEquals("hostname",at.getAttributeName());
        Assert.assertEquals(NodeAttribute.PREFIX_DISTRIBUTED,at.getAttributePrefix());
        Assert.assertEquals(NodeAttributeType.STRING,attr.getAttributeType());
        Assert.assertEquals("host1234",attr.getAttributeValue());
      }
 else       if (at.getAttributeName().equals("uptime")) {
        Assert.assertEquals("uptime",at.getAttributeName());
        Assert.assertEquals(NodeAttribute.PREFIX_DISTRIBUTED,at.getAttributePrefix());
        Assert.assertEquals(NodeAttributeType.STRING,attr.getAttributeType());
        Assert.assertEquals("321543",attr.getAttributeValue());
      }
 else {
        Assert.fail("Unexpected attribute");
      }
    }
    attributesStr="hostname,host1234";
    try {
      nodeAttributesProvider.parseAttributes(attributesStr);
      Assert.fail("Expecting a parsing failure");
    }
 catch (    IOException e) {
      Assert.assertNotNull(e);
      Assert.assertTrue(e.getMessage().contains("Invalid value"));
    }
    attributesStr="prefix/hostname,STRING,host1234";
    try {
      nodeAttributesProvider.parseAttributes(attributesStr);
      Assert.fail("Expecting a parsing failure");
    }
 catch (    IOException e) {
      Assert.assertNotNull(e);
      Assert.assertTrue(e.getMessage().contains("should not contain any prefix."));
    }
    attributesStr="hostname,T,host1234";
    try {
      nodeAttributesProvider.parseAttributes(attributesStr);
      Assert.fail("Expecting a parsing failure");
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.assertNotNull(e);
      Assert.assertTrue(e.getMessage().contains("Invalid node attribute type"));
    }
  }
}
