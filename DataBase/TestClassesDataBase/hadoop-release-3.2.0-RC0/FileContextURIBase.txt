/** 
 * <p> A collection of tests for the  {@link FileContext} to test path names passedas URIs. This test should be used for testing an instance of FileContext that has been initialized to a specific default FileSystem such a LocalFileSystem, HDFS,S3, etc, and where path names are passed that are URIs in a different FileSystem. </p> <p> To test a given  {@link FileSystem} implementation create a subclass of thistest and override  {@link #setUp()} to initialize the <code>fc1</code> and<code>fc2</code> The tests will do operations on fc1 that use a URI in fc2 {@link FileContext} instance variable.</p>
 */
public abstract class FileContextURIBase {
  private static final String basePath=GenericTestUtils.getTempPath("testContextURI");
  private static final Path BASE=new Path(basePath);
  private static final Pattern WIN_INVALID_FILE_NAME_PATTERN=Pattern.compile("^(.*?[<>\\:\"\\|\\?\\*].*?)|(.*?[ \\.])$");
  protected FileContext fc1;
  protected FileContext fc2;
  protected Path qualifiedPath(  String path,  FileContext fc){
    return fc.makeQualified(new Path(BASE,path));
  }
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
    if (fc2 != null) {
      fc2.delete(BASE,true);
    }
  }
  @Test public void testCreateFile() throws IOException {
    String fileNames[]={"testFile","test File","test*File","test#File","test1234","1234Test","test)File","test_File","()&^%$#@!~_+}{><?","  ","^ "};
    for (    String f : fileNames) {
      if (!isTestableFileNameOnPlatform(f)) {
        continue;
      }
      Path testPath=qualifiedPath(f,fc2);
      Assert.assertFalse(exists(fc2,testPath));
      createFile(fc1,testPath);
      Assert.assertTrue(exists(fc2,testPath));
    }
  }
  @Test public void testCreateFileWithNullName() throws IOException {
    String fileName=null;
    try {
      Path testPath=qualifiedPath(fileName,fc2);
      Assert.assertFalse(exists(fc2,testPath));
      createFile(fc1,testPath);
      Assert.fail("Create file with null name should throw IllegalArgumentException.");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testCreateExistingFile() throws IOException {
    String fileName="testFile";
    Path testPath=qualifiedPath(fileName,fc2);
    Assert.assertFalse(exists(fc2,testPath));
    createFile(fc1,testPath);
    try {
      createFile(fc2,testPath);
      Assert.fail("Create existing file should throw an IOException.");
    }
 catch (    IOException e) {
    }
    Assert.assertTrue(exists(fc2,testPath));
  }
  @Test public void testCreateFileInNonExistingDirectory() throws IOException {
    String fileName="testDir/testFile";
    Path testPath=qualifiedPath(fileName,fc2);
    Assert.assertFalse(exists(fc2,testPath));
    createFile(fc1,testPath);
    Assert.assertTrue(isDir(fc2,testPath.getParent()));
    Assert.assertEquals("testDir",testPath.getParent().getName());
    Assert.assertTrue(exists(fc2,testPath));
  }
  @Test public void testCreateDirectory() throws IOException {
    Path path=qualifiedPath("test/hadoop",fc2);
    Path falsePath=qualifiedPath("path/doesnot.exist",fc2);
    Path subDirPath=qualifiedPath("dir0",fc2);
    Assert.assertFalse(exists(fc1,path));
    Assert.assertFalse(isFile(fc1,path));
    Assert.assertFalse(isDir(fc1,path));
    fc1.mkdir(path,FsPermission.getDefault(),true);
    Assert.assertTrue(isDir(fc2,path));
    Assert.assertTrue(exists(fc2,path));
    Assert.assertFalse(isFile(fc2,path));
    fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
    fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
    fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
    Path parentDir=path.getParent();
    Assert.assertTrue(exists(fc2,parentDir));
    Assert.assertFalse(isFile(fc2,parentDir));
    Path grandparentDir=parentDir.getParent();
    Assert.assertTrue(exists(fc2,grandparentDir));
    Assert.assertFalse(isFile(fc2,grandparentDir));
    Assert.assertFalse(exists(fc2,falsePath));
    Assert.assertFalse(isDir(fc2,falsePath));
    String dirNames[]={"createTest/testDir","createTest/test Dir","deleteTest/test*Dir","deleteTest/test#Dir","deleteTest/test1234","deleteTest/test_DIr","deleteTest/1234Test","deleteTest/test)Dir","deleteTest/()&^%$#@!~_+}{><?","  ","^ "};
    for (    String f : dirNames) {
      if (!isTestableFileNameOnPlatform(f)) {
        continue;
      }
      Path testPath=qualifiedPath(f,fc2);
      Assert.assertFalse(exists(fc2,testPath));
      fc1.mkdir(testPath,FsPermission.getDefault(),true);
      Assert.assertTrue(exists(fc2,testPath));
      Assert.assertTrue(isDir(fc2,testPath));
    }
  }
  @Test public void testMkdirsFailsForSubdirectoryOfExistingFile() throws Exception {
    Path testDir=qualifiedPath("test/hadoop",fc2);
    Assert.assertFalse(exists(fc2,testDir));
    fc2.mkdir(testDir,FsPermission.getDefault(),true);
    Assert.assertTrue(exists(fc2,testDir));
    createFile(fc1,qualifiedPath("test/hadoop/file",fc2));
    Path testSubDir=qualifiedPath("test/hadoop/file/subdir",fc2);
    try {
      fc1.mkdir(testSubDir,FsPermission.getDefault(),true);
      Assert.fail("Should throw IOException.");
    }
 catch (    IOException e) {
    }
    Assert.assertFalse(exists(fc1,testSubDir));
    Path testDeepSubDir=qualifiedPath("test/hadoop/file/deep/sub/dir",fc1);
    try {
      fc2.mkdir(testDeepSubDir,FsPermission.getDefault(),true);
      Assert.fail("Should throw IOException.");
    }
 catch (    IOException e) {
    }
    Assert.assertFalse(exists(fc1,testDeepSubDir));
  }
  @Test public void testIsDirectory() throws IOException {
    String dirName="dirTest";
    String invalidDir="nonExistantDir";
    String rootDir="/";
    Path existingPath=qualifiedPath(dirName,fc2);
    Path nonExistingPath=qualifiedPath(invalidDir,fc2);
    Path pathToRootDir=qualifiedPath(rootDir,fc2);
    fc1.mkdir(existingPath,FsPermission.getDefault(),true);
    Assert.assertTrue(isDir(fc2,existingPath));
    Assert.assertTrue(isDir(fc2,pathToRootDir));
    Assert.assertFalse(isDir(fc2,nonExistingPath));
  }
  @Test public void testDeleteFile() throws IOException {
    Path testPath=qualifiedPath("testFile",fc2);
    Assert.assertFalse(exists(fc2,testPath));
    createFile(fc1,testPath);
    Assert.assertTrue(exists(fc2,testPath));
    fc2.delete(testPath,false);
    Assert.assertFalse(exists(fc2,testPath));
  }
  @Test public void testDeleteNonExistingFile() throws IOException {
    String testFileName="testFile";
    Path testPath=qualifiedPath(testFileName,fc2);
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
    createFile(fc1,testPath);
    Assert.assertTrue(exists(fc2,testPath));
    Assert.assertTrue(fc2.delete(testPath,false));
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
  }
  @Test public void testDeleteNonExistingFileInDir() throws IOException {
    String testFileInDir="testDir/testDir/TestFile";
    Path testPath=qualifiedPath(testFileInDir,fc2);
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
    createFile(fc1,testPath);
    Assert.assertTrue(exists(fc2,testPath));
    Assert.assertTrue(fc2.delete(testPath,false));
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
  }
  @Test public void testDeleteDirectory() throws IOException {
    String dirName="dirTest";
    Path testDirPath=qualifiedPath(dirName,fc2);
    Assert.assertFalse(exists(fc2,testDirPath));
    fc1.mkdir(testDirPath,FsPermission.getDefault(),true);
    Assert.assertTrue(exists(fc2,testDirPath));
    Assert.assertTrue(isDir(fc2,testDirPath));
    fc2.delete(testDirPath,true);
    Assert.assertFalse(isDir(fc2,testDirPath));
    String dirNames[]={"deleteTest/testDir","deleteTest/test Dir","deleteTest/test*Dir","deleteTest/test#Dir","deleteTest/test1234","deleteTest/1234Test","deleteTest/test)Dir","deleteTest/test_DIr","deleteTest/()&^%$#@!~_+}{><?","  ","^ "};
    for (    String f : dirNames) {
      if (!isTestableFileNameOnPlatform(f)) {
        continue;
      }
      Path testPath=qualifiedPath(f,fc2);
      Assert.assertFalse(exists(fc2,testPath));
      fc1.mkdir(testPath,FsPermission.getDefault(),true);
      Assert.assertTrue(exists(fc2,testPath));
      Assert.assertTrue(isDir(fc2,testPath));
      Assert.assertTrue(fc2.delete(testPath,true));
      Assert.assertFalse(exists(fc2,testPath));
      Assert.assertFalse(isDir(fc2,testPath));
    }
  }
  @Test public void testDeleteNonExistingDirectory() throws IOException {
    String testDirName="testFile";
    Path testPath=qualifiedPath(testDirName,fc2);
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
    fc1.mkdir(testPath,FsPermission.getDefault(),true);
    Assert.assertTrue(exists(fc2,testPath));
    Assert.assertTrue(fc2.delete(testPath,false));
    Assert.assertFalse(exists(fc2,testPath));
    Assert.assertFalse(fc2.delete(testPath,false));
  }
  @Test public void testModificationTime() throws IOException {
    String testFile="file1";
    long fc2ModificationTime, fc1ModificationTime;
    Path testPath=qualifiedPath(testFile,fc2);
    createFile(fc1,testPath);
    fc1ModificationTime=fc1.getFileStatus(testPath).getModificationTime();
    fc2ModificationTime=fc2.getFileStatus(testPath).getModificationTime();
    Assert.assertEquals(fc1ModificationTime,fc2ModificationTime);
  }
  @Test public void testFileStatus() throws IOException {
    String fileName="file1";
    Path path2=fc2.makeQualified(new Path(BASE,fileName));
    createFile(fc1,path2);
    FsStatus fc2Status=fc2.getFsStatus(path2);
    Assert.assertNotNull(fc2Status);
    Assert.assertTrue(fc2Status.getCapacity() > 0);
    Assert.assertTrue(fc2Status.getRemaining() > 0);
    Assert.assertTrue(fc2Status.getUsed() > 0);
  }
  @Test public void testGetFileStatusThrowsExceptionForNonExistentFile() throws Exception {
    String testFile="test/hadoop/fileDoesNotExist";
    Path testPath=qualifiedPath(testFile,fc2);
    try {
      fc1.getFileStatus(testPath);
      Assert.fail("Should throw FileNotFoundException");
    }
 catch (    FileNotFoundException e) {
    }
  }
  @Test public void testListStatusThrowsExceptionForNonExistentFile() throws Exception {
    String testFile="test/hadoop/file";
    Path testPath=qualifiedPath(testFile,fc2);
    try {
      fc1.listStatus(testPath);
      Assert.fail("Should throw FileNotFoundException");
    }
 catch (    FileNotFoundException fnfe) {
    }
  }
  @Test public void testListStatus() throws Exception {
    final String hPrefix="test/hadoop";
    final String[] dirs={hPrefix + "/a",hPrefix + "/b",hPrefix + "/c",hPrefix + "/1",hPrefix + "/#@#@",hPrefix + "/&*#$#$@234"};
    ArrayList<Path> testDirs=new ArrayList<Path>();
    for (    String d : dirs) {
      if (!isTestableFileNameOnPlatform(d)) {
        continue;
      }
      testDirs.add(qualifiedPath(d,fc2));
    }
    Assert.assertFalse(exists(fc1,testDirs.get(0)));
    for (    Path path : testDirs) {
      fc1.mkdir(path,FsPermission.getDefault(),true);
    }
    FileStatus[] paths=fc1.util().listStatus(qualifiedPath("test",fc1));
    Assert.assertEquals(1,paths.length);
    Assert.assertEquals(qualifiedPath(hPrefix,fc1),paths[0].getPath());
    paths=fc1.util().listStatus(qualifiedPath(hPrefix,fc1));
    Assert.assertEquals(testDirs.size(),paths.length);
    for (int i=0; i < testDirs.size(); i++) {
      boolean found=false;
      for (int j=0; j < paths.length; j++) {
        if (qualifiedPath(testDirs.get(i).toString(),fc1).equals(paths[j].getPath())) {
          found=true;
        }
      }
      Assert.assertTrue(testDirs.get(i) + " not found",found);
    }
    paths=fc1.util().listStatus(qualifiedPath(dirs[0],fc1));
    Assert.assertEquals(0,paths.length);
    RemoteIterator<FileStatus> pathsItor=fc1.listStatus(qualifiedPath("test",fc1));
    Assert.assertEquals(qualifiedPath(hPrefix,fc1),pathsItor.next().getPath());
    Assert.assertFalse(pathsItor.hasNext());
    pathsItor=fc1.listStatus(qualifiedPath(hPrefix,fc1));
    int dirLen=0;
    for (; pathsItor.hasNext(); dirLen++) {
      boolean found=false;
      FileStatus stat=pathsItor.next();
      for (int j=0; j < dirs.length; j++) {
        if (qualifiedPath(dirs[j],fc1).equals(stat.getPath())) {
          found=true;
          break;
        }
      }
      Assert.assertTrue(stat.getPath() + " not found",found);
    }
    Assert.assertEquals(testDirs.size(),dirLen);
    pathsItor=fc1.listStatus(qualifiedPath(dirs[0],fc1));
    Assert.assertFalse(pathsItor.hasNext());
  }
  /** 
 * Returns true if the argument is a file name that is testable on the platform currently running the test.  This is intended for use by tests so that they can skip checking file names that aren't supported by the underlying platform.  The current implementation specifically checks for patterns that are not valid file names on Windows when the tests are running on Windows.
 * @param fileName String file name to check
 * @return boolean true if the argument is valid as a file name
 */
  private static boolean isTestableFileNameOnPlatform(  String fileName){
    boolean valid=true;
    if (Shell.WINDOWS) {
      valid=!WIN_INVALID_FILE_NAME_PATTERN.matcher(fileName).matches();
    }
    return valid;
  }
}
