/** 
 * This class contains several utility functions for log aggregation tests.
 */
public final class TestContainerLogsUtils {
  private TestContainerLogsUtils(){
  }
  /** 
 * Utility function to create container log file and upload it into remote file system.
 * @param conf the configuration
 * @param fs the FileSystem
 * @param rootLogDir the root log directory
 * @param containerId the containerId
 * @param nodeId the nodeId
 * @param fileName the log file name
 * @param user the application user
 * @param content the log context
 * @param deletePreviousRemoteLogDir whether to delete remote log dir.
 * @throws IOException if we can not create log files locallyor we can not upload container logs into RemoteFS.
 */
  public static void createContainerLogFileInRemoteFS(  Configuration conf,  FileSystem fs,  String rootLogDir,  ContainerId containerId,  NodeId nodeId,  String fileName,  String user,  String content,  boolean deleteRemoteLogDir) throws Exception {
    UserGroupInformation ugi=UserGroupInformation.createRemoteUser(user);
    ApplicationId appId=containerId.getApplicationAttemptId().getApplicationId();
    List<String> rootLogDirList=new ArrayList<String>();
    rootLogDirList.add(rootLogDir);
    Path rootLogDirPath=new Path(rootLogDir);
    if (fs.exists(rootLogDirPath)) {
      fs.delete(rootLogDirPath,true);
    }
    assertTrue(fs.mkdirs(rootLogDirPath));
    Path appLogsDir=new Path(rootLogDirPath,appId.toString());
    if (fs.exists(appLogsDir)) {
      fs.delete(appLogsDir,true);
    }
    assertTrue(fs.mkdirs(appLogsDir));
    createContainerLogInLocalDir(appLogsDir,containerId,fs,fileName,content);
    Path path=new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR),user + "/logs/" + appId.toString());
    if (fs.exists(path) && deleteRemoteLogDir) {
      fs.delete(path,true);
    }
    assertTrue(fs.mkdirs(path));
    uploadContainerLogIntoRemoteDir(ugi,conf,rootLogDirList,nodeId,containerId,path,fs);
  }
  private static void createContainerLogInLocalDir(  Path appLogsDir,  ContainerId containerId,  FileSystem fs,  String fileName,  String content) throws IOException {
    Path containerLogsDir=new Path(appLogsDir,containerId.toString());
    if (fs.exists(containerLogsDir)) {
      fs.delete(containerLogsDir,true);
    }
    assertTrue(fs.mkdirs(containerLogsDir));
    Writer writer=new FileWriter(new File(containerLogsDir.toString(),fileName));
    writer.write(content);
    writer.close();
  }
  private static void uploadContainerLogIntoRemoteDir(  UserGroupInformation ugi,  Configuration configuration,  List<String> rootLogDirs,  NodeId nodeId,  ContainerId containerId,  Path appDir,  FileSystem fs) throws Exception {
    Path path=new Path(appDir,LogAggregationUtils.getNodeString(nodeId));
    LogAggregationFileControllerFactory factory=new LogAggregationFileControllerFactory(configuration);
    LogAggregationFileController fileController=factory.getFileControllerForWrite();
    try {
      Map<ApplicationAccessType,String> appAcls=new HashMap<>();
      appAcls.put(ApplicationAccessType.VIEW_APP,ugi.getUserName());
      ApplicationId appId=containerId.getApplicationAttemptId().getApplicationId();
      LogAggregationFileControllerContext context=new LogAggregationFileControllerContext(path,path,true,1000,appId,appAcls,nodeId,ugi);
      fileController.initializeWriter(context);
      fileController.write(new AggregatedLogFormat.LogKey(containerId),new AggregatedLogFormat.LogValue(rootLogDirs,containerId,ugi.getShortUserName()));
    }
  finally {
      fileController.closeWriter();
    }
  }
}
