public class TestLocalContainerLauncher {
  private static final Logger LOG=LoggerFactory.getLogger(TestLocalContainerLauncher.class);
  private static File testWorkDir;
  private static final String[] localDirs=new String[2];
  private static void delete(  File dir) throws IOException {
    Configuration conf=new Configuration();
    FileSystem fs=FileSystem.getLocal(conf);
    Path p=fs.makeQualified(new Path(dir.getAbsolutePath()));
    fs.delete(p,true);
  }
  @BeforeClass public static void setupTestDirs() throws IOException {
    testWorkDir=new File("target",TestLocalContainerLauncher.class.getCanonicalName());
    testWorkDir.delete();
    testWorkDir.mkdirs();
    testWorkDir=testWorkDir.getAbsoluteFile();
    for (int i=0; i < localDirs.length; i++) {
      final File dir=new File(testWorkDir,"local-" + i);
      dir.mkdirs();
      localDirs[i]=dir.toString();
    }
  }
  @AfterClass public static void cleanupTestDirs() throws IOException {
    if (testWorkDir != null) {
      delete(testWorkDir);
    }
  }
  @SuppressWarnings("rawtypes") @Test(timeout=10000) public void testKillJob() throws Exception {
    JobConf conf=new JobConf();
    AppContext context=mock(AppContext.class);
    final CountDownLatch isDone=new CountDownLatch(1);
    EventHandler<Event> handler=new EventHandler<Event>(){
      @Override public void handle(      Event event){
        LOG.info("handling event " + event.getClass() + " with type "+ event.getType());
        if (event instanceof TaskAttemptEvent) {
          if (event.getType() == TaskAttemptEventType.TA_CONTAINER_CLEANED) {
            isDone.countDown();
          }
        }
      }
    }
;
    when(context.getEventHandler()).thenReturn(handler);
    LocalContainerLauncher launcher=new LocalContainerLauncher(context,mock(TaskUmbilicalProtocol.class));
    launcher.init(conf);
    launcher.start();
    JobId jobId=MRBuilderUtils.newJobId(System.currentTimeMillis(),1,1);
    TaskId taskId=MRBuilderUtils.newTaskId(jobId,1,TaskType.MAP);
    TaskAttemptId taId=MRBuilderUtils.newTaskAttemptId(taskId,0);
    Job job=mock(Job.class);
    when(job.getTotalMaps()).thenReturn(1);
    when(job.getTotalReduces()).thenReturn(0);
    Map<JobId,Job> jobs=new HashMap<JobId,Job>();
    jobs.put(jobId,job);
    when(context.getAllJobs()).thenReturn(jobs);
    org.apache.hadoop.mapreduce.v2.app.job.Task ytask=mock(org.apache.hadoop.mapreduce.v2.app.job.Task.class);
    when(ytask.getType()).thenReturn(TaskType.MAP);
    when(job.getTask(taskId)).thenReturn(ytask);
    MapTask mapTask=mock(MapTask.class);
    when(mapTask.isMapOrReduce()).thenReturn(true);
    when(mapTask.isMapTask()).thenReturn(true);
    TaskAttemptID taskID=TypeConverter.fromYarn(taId);
    when(mapTask.getTaskID()).thenReturn(taskID);
    when(mapTask.getJobID()).thenReturn(taskID.getJobID());
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        LOG.info("sleeping for 5 minutes...");
        Thread.sleep(5 * 60 * 1000);
        return null;
      }
    }
).when(mapTask).run(isA(JobConf.class),isA(TaskUmbilicalProtocol.class));
    ContainerLauncherEvent launchEvent=new ContainerRemoteLaunchEvent(taId,null,createMockContainer(),mapTask);
    launcher.handle(launchEvent);
    Thread.sleep(200);
    ContainerLauncherEvent cleanupEvent=new ContainerLauncherEvent(taId,null,null,null,ContainerLauncher.EventType.CONTAINER_REMOTE_CLEANUP);
    launcher.handle(cleanupEvent);
    isDone.await();
    launcher.close();
  }
  private static Container createMockContainer(){
    Container container=mock(Container.class);
    NodeId nodeId=NodeId.newInstance("foo.bar.org",1234);
    when(container.getNodeId()).thenReturn(nodeId);
    return container;
  }
  @Test public void testRenameMapOutputForReduce() throws Exception {
    final JobConf conf=new JobConf();
    final MROutputFiles mrOutputFiles=new MROutputFiles();
    mrOutputFiles.setConf(conf);
    conf.set(MRConfig.LOCAL_DIR,localDirs[0].toString());
    final Path mapOut=mrOutputFiles.getOutputFileForWrite(1);
    conf.set(MRConfig.LOCAL_DIR,localDirs[1].toString());
    final Path mapOutIdx=mrOutputFiles.getOutputIndexFileForWrite(1);
    Assert.assertNotEquals("Paths must be different!",mapOut.getParent(),mapOutIdx.getParent());
    conf.setStrings(MRConfig.LOCAL_DIR,localDirs);
    final FileContext lfc=FileContext.getLocalFSFileContext(conf);
    lfc.create(mapOut,EnumSet.of(CREATE)).close();
    lfc.create(mapOutIdx,EnumSet.of(CREATE)).close();
    final JobId jobId=MRBuilderUtils.newJobId(12345L,1,2);
    final TaskId tid=MRBuilderUtils.newTaskId(jobId,0,TaskType.MAP);
    final TaskAttemptId taid=MRBuilderUtils.newTaskAttemptId(tid,0);
    LocalContainerLauncher.renameMapOutputForReduce(conf,taid,mrOutputFiles);
  }
}
