static class MockFileSystem extends RawLocalFileSystem {
  int numListLocatedStatusCalls=0;
  @Override public FileStatus[] listStatus(  Path f) throws FileNotFoundException, IOException {
    if (f.toString().equals("test:/a1")) {
      return new FileStatus[]{new FileStatus(0,true,1,150,150,new Path("test:/a1/a2")),new FileStatus(10,false,1,150,150,new Path("test:/a1/file1"))};
    }
 else     if (f.toString().equals("test:/a1/a2")) {
      return new FileStatus[]{new FileStatus(10,false,1,150,150,new Path("test:/a1/a2/file2")),new FileStatus(10,false,1,151,150,new Path("test:/a1/a2/file3"))};
    }
    return new FileStatus[0];
  }
  @Override public FileStatus[] globStatus(  Path pathPattern,  PathFilter filter) throws IOException {
    return new FileStatus[]{new FileStatus(10,true,1,150,150,pathPattern)};
  }
  @Override public FileStatus[] listStatus(  Path f,  PathFilter filter) throws FileNotFoundException, IOException {
    return this.listStatus(f);
  }
  @Override public BlockLocation[] getFileBlockLocations(  FileStatus file,  long start,  long len) throws IOException {
    return new BlockLocation[]{new BlockLocation(new String[]{"localhost:9866","otherhost:9866"},new String[]{"localhost","otherhost"},new String[]{"localhost"},new String[0],0,len,false)};
  }
  @Override protected RemoteIterator<LocatedFileStatus> listLocatedStatus(  Path f,  PathFilter filter) throws FileNotFoundException, IOException {
    ++numListLocatedStatusCalls;
    return super.listLocatedStatus(f,filter);
  }
}
