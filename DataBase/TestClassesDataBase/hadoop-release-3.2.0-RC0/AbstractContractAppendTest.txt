/** 
 * Test append -if supported
 */
public abstract class AbstractContractAppendTest extends AbstractFSContractTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(AbstractContractAppendTest.class);
  private Path testPath;
  private Path target;
  @Override public void setup() throws Exception {
    super.setup();
    skipIfUnsupported(SUPPORTS_APPEND);
    testPath=path("test");
    target=new Path(testPath,"target");
  }
  @Test public void testAppendToEmptyFile() throws Throwable {
    touch(getFileSystem(),target);
    byte[] dataset=dataset(256,'a','z');
    try (FSDataOutputStream outputStream=getFileSystem().append(target)){
      outputStream.write(dataset);
    }
     byte[] bytes=ContractTestUtils.readDataset(getFileSystem(),target,dataset.length);
    ContractTestUtils.compareByteArrays(dataset,bytes,dataset.length);
  }
  @Test public void testBuilderAppendToEmptyFile() throws Throwable {
    touch(getFileSystem(),target);
    byte[] dataset=dataset(256,'a','z');
    try (FSDataOutputStream outputStream=getFileSystem().appendFile(target).build()){
      outputStream.write(dataset);
    }
     byte[] bytes=ContractTestUtils.readDataset(getFileSystem(),target,dataset.length);
    ContractTestUtils.compareByteArrays(dataset,bytes,dataset.length);
  }
  @Test public void testAppendNonexistentFile() throws Throwable {
    try {
      FSDataOutputStream out=getFileSystem().append(target);
      out.close();
      fail("expected a failure");
    }
 catch (    Exception e) {
      handleExpectedException(e);
    }
  }
  @Test public void testAppendToExistingFile() throws Throwable {
    byte[] original=dataset(8192,'A','Z');
    byte[] appended=dataset(8192,'0','9');
    createFile(getFileSystem(),target,false,original);
    try (FSDataOutputStream out=getFileSystem().append(target)){
      out.write(appended);
    }
     byte[] bytes=ContractTestUtils.readDataset(getFileSystem(),target,original.length + appended.length);
    ContractTestUtils.validateFileContent(bytes,new byte[][]{original,appended});
  }
  @Test public void testBuilderAppendToExistingFile() throws Throwable {
    byte[] original=dataset(8192,'A','Z');
    byte[] appended=dataset(8192,'0','9');
    createFile(getFileSystem(),target,false,original);
    try (FSDataOutputStream out=getFileSystem().appendFile(target).build()){
      out.write(appended);
    }
     byte[] bytes=ContractTestUtils.readDataset(getFileSystem(),target,original.length + appended.length);
    ContractTestUtils.validateFileContent(bytes,new byte[][]{original,appended});
  }
  @Test public void testAppendMissingTarget() throws Throwable {
    try {
      FSDataOutputStream out=getFileSystem().append(target);
      out.close();
      fail("expected a failure");
    }
 catch (    Exception e) {
      handleExpectedException(e);
    }
  }
  @Test public void testRenameFileBeingAppended() throws Throwable {
    touch(getFileSystem(),target);
    assertPathExists("original file does not exist",target);
    byte[] dataset=dataset(256,'a','z');
    FSDataOutputStream outputStream=getFileSystem().append(target);
    outputStream.write(dataset);
    Path renamed=new Path(testPath,"renamed");
    rename(target,renamed);
    outputStream.close();
    String listing=ls(testPath);
    assertPathExists("renamed destination file does not exist",renamed);
    assertPathDoesNotExist("Source file found after rename during append:\n" + listing,target);
    byte[] bytes=ContractTestUtils.readDataset(getFileSystem(),renamed,dataset.length);
    ContractTestUtils.compareByteArrays(dataset,bytes,dataset.length);
  }
}
