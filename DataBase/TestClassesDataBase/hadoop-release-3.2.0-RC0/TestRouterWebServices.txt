/** 
 * Test class to validate the WebService interceptor model inside the Router.
 */
public class TestRouterWebServices extends BaseRouterWebServicesTest {
  private static final Logger LOG=LoggerFactory.getLogger(TestRouterWebServices.class);
  private String user="test1";
  /** 
 * Test that all requests get forwarded to the last interceptor in the chain get back the responses.
 */
  @Test public void testRouterWebServicesE2E() throws Exception {
    ClusterInfo clusterInfo=get(user);
    Assert.assertNotNull(clusterInfo);
    ClusterInfo clusterInfo2=getClusterInfo(user);
    Assert.assertNotNull(clusterInfo2);
    ClusterMetricsInfo clusterMetricsInfo=getClusterMetricsInfo(user);
    Assert.assertNotNull(clusterMetricsInfo);
    SchedulerTypeInfo schedulerTypeInfo=getSchedulerInfo(user);
    Assert.assertNotNull(schedulerTypeInfo);
    String dumpResult=dumpSchedulerLogs(user);
    Assert.assertNotNull(dumpResult);
    NodesInfo nodesInfo=getNodes(user);
    Assert.assertNotNull(nodesInfo);
    NodeInfo nodeInfo=getNode(user);
    Assert.assertNotNull(nodeInfo);
    AppsInfo appsInfo=getApps(user);
    Assert.assertNotNull(appsInfo);
    ActivitiesInfo activitiesInfo=getActivities(user);
    Assert.assertNotNull(activitiesInfo);
    AppActivitiesInfo appActiviesInfo=getAppActivities(user);
    Assert.assertNotNull(appActiviesInfo);
    ApplicationStatisticsInfo applicationStatisticsInfo=getAppStatistics(user);
    Assert.assertNotNull(applicationStatisticsInfo);
    AppInfo appInfo=getApp(user);
    Assert.assertNotNull(appInfo);
    AppState appState=getAppState(user);
    Assert.assertNotNull(appState);
    Response response=updateAppState(user);
    Assert.assertNotNull(response);
    NodeToLabelsInfo nodeToLabelsInfo=getNodeToLabels(user);
    Assert.assertNotNull(nodeToLabelsInfo);
    LabelsToNodesInfo labelsToNodesInfo=getLabelsToNodes(user);
    Assert.assertNotNull(labelsToNodesInfo);
    Response response2=replaceLabelsOnNodes(user);
    Assert.assertNotNull(response2);
    Response response3=replaceLabelsOnNode(user);
    Assert.assertNotNull(response3);
    NodeLabelsInfo nodeLabelsInfo=getClusterNodeLabels(user);
    Assert.assertNotNull(nodeLabelsInfo);
    Response response4=addToClusterNodeLabels(user);
    Assert.assertNotNull(response4);
    Response response5=removeFromCluserNodeLabels(user);
    Assert.assertNotNull(response5);
    NodeLabelsInfo nodeLabelsInfo2=getLabelsOnNode(user);
    Assert.assertNotNull(nodeLabelsInfo2);
    AppPriority appPriority=getAppPriority(user);
    Assert.assertNotNull(appPriority);
    Response response6=updateApplicationPriority(user);
    Assert.assertNotNull(response6);
    AppQueue appQueue=getAppQueue(user);
    Assert.assertNotNull(appQueue);
    Response response7=updateAppQueue(user);
    Assert.assertNotNull(response7);
    Response response8=createNewApplication(user);
    Assert.assertNotNull(response8);
    Response response9=submitApplication(user);
    Assert.assertNotNull(response9);
    Response response10=postDelegationToken(user);
    Assert.assertNotNull(response10);
    Response response11=postDelegationTokenExpiration(user);
    Assert.assertNotNull(response11);
    Response response12=cancelDelegationToken(user);
    Assert.assertNotNull(response12);
    Response response13=createNewReservation(user);
    Assert.assertNotNull(response13);
    Response response14=submitReservation(user);
    Assert.assertNotNull(response14);
    Response response15=updateReservation(user);
    Assert.assertNotNull(response15);
    Response response16=deleteReservation(user);
    Assert.assertNotNull(response16);
    Response response17=listReservation(user);
    Assert.assertNotNull(response17);
    AppTimeoutInfo appTimeoutInfo=getAppTimeout(user);
    Assert.assertNotNull(appTimeoutInfo);
    AppTimeoutsInfo appTimeoutsInfo=getAppTimeouts(user);
    Assert.assertNotNull(appTimeoutsInfo);
    Response response18=updateApplicationTimeout(user);
    Assert.assertNotNull(response18);
    AppAttemptsInfo appAttemptsInfo=getAppAttempts(user);
    Assert.assertNotNull(appAttemptsInfo);
    AppAttemptInfo appAttemptInfo=getAppAttempt(user);
    Assert.assertNotNull(appAttemptInfo);
    ContainersInfo containersInfo=getContainers(user);
    Assert.assertNotNull(containersInfo);
    ContainerInfo containerInfo=getContainer(user);
    Assert.assertNotNull(containerInfo);
  }
  /** 
 * Tests if the pipeline is created properly.
 */
  @Test public void testRequestInterceptorChainCreation() throws Exception {
    RESTRequestInterceptor root=super.getRouterWebServices().createRequestInterceptorChain();
    int index=0;
    while (root != null) {
switch (index) {
case 0:
case 1:
case 2:
        Assert.assertEquals(PassThroughRESTRequestInterceptor.class.getName(),root.getClass().getName());
      break;
case 3:
    Assert.assertEquals(MockRESTRequestInterceptor.class.getName(),root.getClass().getName());
  break;
default :
Assert.fail();
}
root=root.getNextInterceptor();
index++;
}
Assert.assertEquals("The number of interceptors in chain does not match",4,index);
}
/** 
 * Test if the different chains for users are generated, and LRU cache is working as expected.
 */
@Test public void testUsersChainMapWithLRUCache() throws YarnException, IOException, InterruptedException {
getInterceptorChain("test1");
getInterceptorChain("test2");
getInterceptorChain("test3");
getInterceptorChain("test4");
getInterceptorChain("test5");
getInterceptorChain("test6");
getInterceptorChain("test7");
getInterceptorChain("test8");
Map<String,RequestInterceptorChainWrapper> pipelines=getRouterWebServices().getPipelines();
Assert.assertEquals(8,pipelines.size());
getInterceptorChain("test9");
getInterceptorChain("test10");
getInterceptorChain("test1");
getInterceptorChain("test11");
Assert.assertEquals(10,pipelines.size());
RequestInterceptorChainWrapper chain=pipelines.get("test1");
Assert.assertNotNull("test1 should not be evicted",chain);
chain=pipelines.get("test2");
Assert.assertNull("test2 should have been evicted",chain);
}
/** 
 * This test validates if the RESTRequestInterceptor chain for the user can build and init correctly when a multi-client process begins to request RouterWebServices for the same user simultaneously.
 */
@Test public void testWebPipelineConcurrent() throws InterruptedException {
final String user="test1";
class ClientTestThread extends Thread {
private RESTRequestInterceptor interceptor;
@Override public void run(){
try {
interceptor=pipeline();
}
 catch (IOException|InterruptedException e) {
e.printStackTrace();
}
}
private RESTRequestInterceptor pipeline() throws IOException, InterruptedException {
return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RESTRequestInterceptor>(){
@Override public RESTRequestInterceptor run() throws Exception {
  RequestInterceptorChainWrapper wrapper=getInterceptorChain(user);
  RESTRequestInterceptor interceptor=wrapper.getRootInterceptor();
  Assert.assertNotNull(interceptor);
  LOG.info("init web interceptor success for user" + user);
  return interceptor;
}
}
);
}
}
ClientTestThread client1=new ClientTestThread();
ClientTestThread client2=new ClientTestThread();
client1.start();
client2.start();
client1.join();
client2.join();
Assert.assertNotNull(client1.interceptor);
Assert.assertNotNull(client2.interceptor);
Assert.assertTrue(client1.interceptor == client2.interceptor);
}
}
