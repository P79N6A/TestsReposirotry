private final class MRAppTestCleanup extends MRApp {
  int stagingDirCleanedup;
  int ContainerAllocatorStopped;
  int numStops;
  public MRAppTestCleanup(  int maps,  int reduces,  boolean autoComplete,  String testName,  boolean cleanOnStart){
    super(maps,reduces,autoComplete,testName,cleanOnStart);
    stagingDirCleanedup=0;
    ContainerAllocatorStopped=0;
    numStops=0;
  }
  @Override protected Job createJob(  Configuration conf,  JobStateInternal forcedState,  String diagnostic){
    UserGroupInformation currentUser=null;
    try {
      currentUser=UserGroupInformation.getCurrentUser();
    }
 catch (    IOException e) {
      throw new YarnRuntimeException(e);
    }
    Job newJob=new TestJob(getJobId(),getAttemptID(),conf,getDispatcher().getEventHandler(),getTaskAttemptListener(),getContext().getClock(),getCommitter(),isNewApiCommitter(),currentUser.getUserName(),getContext(),forcedState,diagnostic);
    ((AppContext)getContext()).getAllJobs().put(newJob.getID(),newJob);
    getDispatcher().register(JobFinishEvent.Type.class,createJobFinishEventHandler());
    return newJob;
  }
  @Override protected ContainerAllocator createContainerAllocator(  ClientService clientService,  AppContext context){
    return new TestCleanupContainerAllocator();
  }
private class TestCleanupContainerAllocator extends AbstractService implements ContainerAllocator {
    private MRAppContainerAllocator allocator;
    TestCleanupContainerAllocator(){
      super(TestCleanupContainerAllocator.class.getName());
      allocator=new MRAppContainerAllocator();
    }
    @Override public void handle(    ContainerAllocatorEvent event){
      allocator.handle(event);
    }
    @Override protected void serviceStop() throws Exception {
      numStops++;
      ContainerAllocatorStopped=numStops;
      super.serviceStop();
    }
  }
  @Override public RMHeartbeatHandler getRMHeartbeatHandler(){
    return getStubbedHeartbeatHandler(getContext());
  }
  @Override public void cleanupStagingDir() throws IOException {
    numStops++;
    stagingDirCleanedup=numStops;
  }
  @Override protected void sysexit(){
  }
}
