public class TestTimelineReaderWebServicesBasicAcl {
  private TimelineReaderManager manager;
  private static String adminUser="admin";
  private static UserGroupInformation adminUgi=UserGroupInformation.createRemoteUser(adminUser);
  private Configuration config;
  @Before public void setUp() throws Exception {
    config=new YarnConfiguration();
  }
  @After public void tearDown() throws Exception {
    if (manager != null) {
      manager.stop();
      manager=null;
    }
    config=null;
  }
  @Test public void testTimelineReaderManagerAclsWhenDisabled() throws Exception {
    config.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,false);
    config.set(YarnConfiguration.YARN_ADMIN_ACL,adminUser);
    manager=new TimelineReaderManager(null);
    manager.init(config);
    manager.start();
    Assert.assertTrue(manager.checkAccess(null));
    Assert.assertFalse(TimelineReaderWebServices.isDisplayEntityPerUserFilterEnabled(config));
  }
  @Test public void testTimelineReaderManagerAclsWhenEnabled() throws Exception {
    Configuration config=new YarnConfiguration();
    config.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
    config.setBoolean(YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,true);
    config.set(YarnConfiguration.YARN_ADMIN_ACL,adminUser);
    manager=new TimelineReaderManager(null);
    manager.init(config);
    manager.start();
    String user1="user1";
    String user2="user2";
    UserGroupInformation user1Ugi=UserGroupInformation.createRemoteUser(user1);
    UserGroupInformation user2Ugi=UserGroupInformation.createRemoteUser(user2);
    Assert.assertFalse(TimelineReaderWebServices.validateAuthUserWithEntityUser(manager,null,user1));
    try {
      TimelineReaderWebServices.checkAccess(manager,null,user1);
      Assert.fail("user1Ugi is not allowed to view user1");
    }
 catch (    ForbiddenException e) {
    }
    Assert.assertTrue(TimelineReaderWebServices.checkAccess(manager,adminUgi,user1));
    Assert.assertTrue(TimelineReaderWebServices.checkAccess(manager,adminUgi,user2));
    try {
      TimelineReaderWebServices.checkAccess(manager,user1Ugi,user2);
      Assert.fail("user1Ugi is not allowed to view user2");
    }
 catch (    ForbiddenException e) {
    }
    try {
      TimelineReaderWebServices.checkAccess(manager,user1Ugi,user2);
      Assert.fail("user2Ugi is not allowed to view user1");
    }
 catch (    ForbiddenException e) {
    }
    String userKey="user";
    Set<TimelineEntity> entities=createEntities(10,userKey);
    TimelineReaderWebServices.checkAccess(manager,adminUgi,entities,userKey,true);
    Assert.assertTrue(entities.size() == 10);
    entities=createEntities(5,userKey);
    TimelineReaderWebServices.checkAccess(manager,user1Ugi,entities,userKey,true);
    Assert.assertTrue(entities.size() == 1);
    Assert.assertEquals(user1,entities.iterator().next().getInfo().get(userKey));
    entities=createEntities(8,userKey);
    TimelineReaderWebServices.checkAccess(manager,user2Ugi,entities,userKey,true);
    Assert.assertTrue(entities.size() == 1);
    Assert.assertEquals(user2,entities.iterator().next().getInfo().get(userKey));
  }
  Set<TimelineEntity> createEntities(  int noOfUsers,  String userKey){
    Set<TimelineEntity> entities=new LinkedHashSet<>();
    for (int i=0; i < noOfUsers; i++) {
      TimelineEntity e=new TimelineEntity();
      e.setType("user" + i);
      e.setId("user" + i);
      e.getInfo().put(userKey,"user" + i);
      entities.add(e);
    }
    return entities;
  }
}
