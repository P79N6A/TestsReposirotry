public class TestResourceCalculatorUtils {
  @Test public void testComputeAvailableContainers() throws Exception {
    Resource clusterAvailableResources=Resource.newInstance(81920,40);
    Resource nonZeroResource=Resource.newInstance(1024,2);
    int expectedNumberOfContainersForMemory=80;
    int expectedNumberOfContainersForCPU=20;
    verifyDifferentResourceTypes(clusterAvailableResources,nonZeroResource,expectedNumberOfContainersForMemory,expectedNumberOfContainersForCPU);
    Resource zeroMemoryResource=Resource.newInstance(0,nonZeroResource.getVirtualCores());
    verifyDifferentResourceTypes(clusterAvailableResources,zeroMemoryResource,Integer.MAX_VALUE,expectedNumberOfContainersForCPU);
    Resource zeroCpuResource=Resource.newInstance(nonZeroResource.getMemorySize(),0);
    verifyDifferentResourceTypes(clusterAvailableResources,zeroCpuResource,expectedNumberOfContainersForMemory,expectedNumberOfContainersForMemory);
  }
  private void verifyDifferentResourceTypes(  Resource clusterAvailableResources,  Resource nonZeroResource,  int expectedNumberOfContainersForMemoryOnly,  int expectedNumberOfContainersOverall){
    Assert.assertEquals("Incorrect number of available containers for Memory",expectedNumberOfContainersForMemoryOnly,ResourceCalculatorUtils.computeAvailableContainers(clusterAvailableResources,nonZeroResource,EnumSet.of(SchedulerResourceTypes.MEMORY)));
    Assert.assertEquals("Incorrect number of available containers overall",expectedNumberOfContainersOverall,ResourceCalculatorUtils.computeAvailableContainers(clusterAvailableResources,nonZeroResource,EnumSet.of(SchedulerResourceTypes.CPU,SchedulerResourceTypes.MEMORY)));
  }
}
