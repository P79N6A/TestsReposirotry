/** 
 * Test class to handle various proto related tests for resources.
 */
public class TestResourcePBImpl {
  @Before public void setup() throws Exception {
    ResourceUtils.resetResourceTypes();
    String resourceTypesFile="resource-types-4.xml";
    Configuration conf=new YarnConfiguration();
    TestResourceUtils.setupResourceTypes(conf,resourceTypesFile);
  }
  @After public void teardown(){
    Configuration conf=new YarnConfiguration();
    File source=new File(conf.getClassLoader().getResource("resource-types-4.xml").getFile());
    File dest=new File(source.getParent(),"resource-types.xml");
    if (dest.exists()) {
      dest.delete();
    }
  }
  @Test public void testEmptyResourcePBInit() throws Exception {
    Resource res=new ResourcePBImpl();
    Assert.assertEquals(0,res.getMemorySize());
    Assert.assertEquals(ResourceInformation.MEMORY_MB.getUnits(),res.getResourceInformation(ResourceInformation.MEMORY_MB.getName()).getUnits());
    Assert.assertEquals(ResourceInformation.VCORES.getUnits(),res.getResourceInformation(ResourceInformation.VCORES.getName()).getUnits());
  }
  @Test public void testResourcePBInitFromOldPB() throws Exception {
    YarnProtos.ResourceProto proto=YarnProtos.ResourceProto.newBuilder().setMemory(1024).setVirtualCores(3).build();
    Resource res=new ResourcePBImpl(proto);
    Assert.assertEquals(1024,res.getMemorySize());
    Assert.assertEquals(3,res.getVirtualCores());
    Assert.assertEquals(ResourceInformation.MEMORY_MB.getUnits(),res.getResourceInformation(ResourceInformation.MEMORY_MB.getName()).getUnits());
    Assert.assertEquals(ResourceInformation.VCORES.getUnits(),res.getResourceInformation(ResourceInformation.VCORES.getName()).getUnits());
  }
  @Test @SuppressWarnings("deprecation") public void testGetMemory(){
    Resource res=new ResourcePBImpl();
    long memorySize=Integer.MAX_VALUE + 1L;
    res.setMemorySize(memorySize);
    assertEquals("No need to cast if both are long",memorySize,res.getMemorySize());
    assertEquals("Cast to Integer.MAX_VALUE if the long is greater than " + "Integer.MAX_VALUE",Integer.MAX_VALUE,res.getMemory());
  }
  @Test public void testGetVirtualCores(){
    Resource res=new ResourcePBImpl();
    long vcores=Integer.MAX_VALUE + 1L;
    res.getResourceInformation("vcores").setValue(vcores);
    assertEquals("No need to cast if both are long",vcores,res.getResourceInformation("vcores").getValue());
    assertEquals("Cast to Integer.MAX_VALUE if the long is greater than " + "Integer.MAX_VALUE",Integer.MAX_VALUE,res.getVirtualCores());
  }
  @Test public void testResourcePBWithExtraResources() throws Exception {
    YarnProtos.ResourceInformationProto riProto=YarnProtos.ResourceInformationProto.newBuilder().setType(YarnProtos.ResourceTypeInfoProto.newBuilder().setName("resource1").setType(YarnProtos.ResourceTypesProto.COUNTABLE).getType()).setValue(4).setUnits("T").setKey("resource1").build();
    YarnProtos.ResourceProto proto=YarnProtos.ResourceProto.newBuilder().setMemory(1024).setVirtualCores(3).addResourceValueMap(riProto).build();
    Resource res=new ResourcePBImpl(proto);
    Assert.assertEquals(4000,res.getResourceInformation("resource1").getValue());
    Assert.assertEquals("G",res.getResourceInformation("resource1").getUnits());
    YarnProtos.ResourceInformationProto riProto1=YarnProtos.ResourceInformationProto.newBuilder().setType(YarnProtos.ResourceTypeInfoProto.newBuilder().setName("resource2").setType(YarnProtos.ResourceTypesProto.COUNTABLE).getType()).setValue(4).setUnits("M").setKey("resource2").build();
    YarnProtos.ResourceProto proto1=YarnProtos.ResourceProto.newBuilder().setMemory(1024).setVirtualCores(3).addResourceValueMap(riProto1).build();
    Resource res1=new ResourcePBImpl(proto1);
    Assert.assertEquals(4000000000L,res1.getResourceInformation("resource2").getValue());
    Assert.assertEquals("m",res1.getResourceInformation("resource2").getUnits());
    YarnProtos.ResourceInformationProto riProto2=YarnProtos.ResourceInformationProto.newBuilder().setType(YarnProtos.ResourceTypeInfoProto.newBuilder().setName("resource1").setType(YarnProtos.ResourceTypesProto.COUNTABLE).getType()).setValue(3).setUnits("M").setKey("resource1").build();
    YarnProtos.ResourceProto proto2=YarnProtos.ResourceProto.newBuilder().setMemory(1024).setVirtualCores(3).addResourceValueMap(riProto2).build();
    Resource res2=new ResourcePBImpl(proto2);
    Assert.assertEquals(0,res2.getResourceInformation("resource1").getValue());
    Assert.assertEquals("G",res2.getResourceInformation("resource1").getUnits());
  }
}
