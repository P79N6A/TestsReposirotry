public class TestRMHAForNodeLabels extends RMHATestBase {
  public static final Log LOG=LogFactory.getLog(TestSubmitApplicationWithRMHA.class);
  @Before @Override public void setup() throws Exception {
    super.setup();
    File tempDir=File.createTempFile("nlb",".tmp");
    tempDir.delete();
    tempDir.mkdirs();
    tempDir.deleteOnExit();
    confForRM1.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    confForRM1.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDir.getAbsolutePath());
    confForRM2.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    confForRM2.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDir.getAbsolutePath());
  }
  @Test public void testRMHARecoverNodeLabels() throws Exception {
    startRMs();
    rm1.getRMContext().getNodeLabelManager().addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("a"),NodeLabel.newInstance("b"),NodeLabel.newInstance("c")));
    Map<NodeId,Set<String>> nodeToLabels=new HashMap<>();
    nodeToLabels.put(NodeId.newInstance("host1",0),ImmutableSet.of("a"));
    nodeToLabels.put(NodeId.newInstance("host2",0),ImmutableSet.of("b"));
    rm1.getRMContext().getNodeLabelManager().replaceLabelsOnNode(nodeToLabels);
    explicitFailover();
    Assert.assertTrue(rm2.getRMContext().getNodeLabelManager().getClusterNodeLabelNames().containsAll(ImmutableSet.of("a","b","c")));
    Assert.assertTrue(rm2.getRMContext().getNodeLabelManager().getNodeLabels().get(NodeId.newInstance("host1",0)).contains("a"));
    Assert.assertTrue(rm2.getRMContext().getNodeLabelManager().getNodeLabels().get(NodeId.newInstance("host2",0)).contains("b"));
  }
}
