/** 
 * Tests if StreamXmlRecordReader will read the next record, _after_ the end of a split if the split falls before the end of end-tag of a record. Also tests if StreamXmlRecordReader will read a record twice if end of a split is after few characters after the end-tag of a record but before the begin-tag of next record.
 */
public class TestStreamXmlMultipleRecords extends TestStreaming {
  private static final Logger LOG=LoggerFactory.getLogger(TestStreamXmlMultipleRecords.class);
  private boolean hasPerl=false;
  private long blockSize;
  private String isSlowMatch;
  private Configuration conf=null;
  private String myPerlMapper="perl -n -a -e 'print join(qq(\\n), map { qq($_\\t1) } @F), qq(\\n);'";
  private String myPerlReducer="perl -n -a -e '$freq{$F[0]}++; END { print qq(is\\t$freq{is}\\n); }'";
  public TestStreamXmlMultipleRecords() throws IOException {
    super();
    input="<line>This is a single line,\nand it is containing multiple" + " words.</line>                     <line>Only is appears more than" + " once.</line>\n";
    outputExpect="is\t3\n";
    map=myPerlMapper;
    reduce=myPerlReducer;
    hasPerl=UtilTest.hasPerlSupport();
  }
  @Override @Before public void setUp() throws IOException {
    super.setUp();
    FileSystem.closeAll();
  }
  @Override protected Configuration getConf(){
    conf=new Configuration();
    conf.setLong("fs.local.block.size",blockSize);
    return conf;
  }
  @Override protected String[] genArgs(){
    args.add("-inputreader");
    args.add("StreamXmlRecordReader,begin=<line>,end=</line>,slowmatch=" + isSlowMatch);
    return super.genArgs();
  }
  /** 
 * Tests if StreamXmlRecordReader will read the next record, _after_ the end of a split if the split falls before the end of end-tag of a record. Tests with slowmatch=false.
 * @throws Exception
 */
  @Test public void testStreamXmlMultiInnerFast() throws Exception {
    if (hasPerl) {
      blockSize=60;
      isSlowMatch="false";
      super.testCommandLine();
    }
 else {
      LOG.warn("No perl; skipping test.");
    }
  }
  /** 
 * Tests if StreamXmlRecordReader will read a record twice if end of a split is after few characters after the end-tag of a record but before the begin-tag of next record. Tests with slowmatch=false.
 * @throws Exception
 */
  @Test public void testStreamXmlMultiOuterFast() throws Exception {
    if (hasPerl) {
      blockSize=80;
      isSlowMatch="false";
      super.testCommandLine();
    }
 else {
      LOG.warn("No perl; skipping test.");
    }
  }
  /** 
 * Tests if StreamXmlRecordReader will read the next record, _after_ the end of a split if the split falls before the end of end-tag of a record. Tests with slowmatch=true.
 * @throws Exception
 */
  @Test public void testStreamXmlMultiInnerSlow() throws Exception {
    if (hasPerl) {
      blockSize=60;
      isSlowMatch="true";
      super.testCommandLine();
    }
 else {
      LOG.warn("No perl; skipping test.");
    }
  }
  /** 
 * Tests if StreamXmlRecordReader will read a record twice if end of a split is after few characters after the end-tag of a record but before the begin-tag of next record. Tests with slowmatch=true.
 * @throws Exception
 */
  @Test public void testStreamXmlMultiOuterSlow() throws Exception {
    if (hasPerl) {
      blockSize=80;
      isSlowMatch="true";
      super.testCommandLine();
    }
 else {
      LOG.warn("No perl; skipping test.");
    }
  }
  @Override @Test public void testCommandLine(){
  }
}
