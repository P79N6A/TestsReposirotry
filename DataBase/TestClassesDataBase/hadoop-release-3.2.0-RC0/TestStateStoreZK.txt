/** 
 * Test the ZooKeeper implementation of the State Store driver.
 */
public class TestStateStoreZK extends TestStateStoreDriverBase {
  private static TestingServer curatorTestingServer;
  private static CuratorFramework curatorFramework;
  private static String baseZNode;
  @BeforeClass public static void setupCluster() throws Exception {
    curatorTestingServer=new TestingServer();
    curatorTestingServer.start();
    String connectString=curatorTestingServer.getConnectString();
    curatorFramework=CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(new RetryNTimes(100,100)).build();
    curatorFramework.start();
    Configuration conf=getStateStoreConfiguration(StateStoreZooKeeperImpl.class);
    conf.set(CommonConfigurationKeys.ZK_ADDRESS,connectString);
    conf.setLong(RBFConfigKeys.FEDERATION_STORE_CONNECTION_TEST_MS,TimeUnit.HOURS.toMillis(1));
    baseZNode=conf.get(FEDERATION_STORE_ZK_PARENT_PATH,FEDERATION_STORE_ZK_PARENT_PATH_DEFAULT);
    getStateStore(conf);
  }
  @AfterClass public static void tearDownCluster(){
    curatorFramework.close();
    try {
      curatorTestingServer.stop();
    }
 catch (    IOException e) {
    }
  }
  @Before public void startup() throws IOException {
    removeAll(getStateStoreDriver());
  }
  private <T extends BaseRecord>String generateFakeZNode(  Class<T> recordClass) throws IOException {
    String nodeName=StateStoreUtils.getRecordName(recordClass);
    String primaryKey="test";
    if (nodeName != null) {
      return baseZNode + "/" + nodeName+ "/"+ primaryKey;
    }
    return null;
  }
  private void testGetNullRecord(  StateStoreDriver driver) throws Exception {
    testGetNullRecord(driver,MembershipState.class);
    testGetNullRecord(driver,MountTable.class);
    testGetNullRecord(driver,RouterState.class);
    testGetNullRecord(driver,DisabledNameservice.class);
  }
  private <T extends BaseRecord>void testGetNullRecord(  StateStoreDriver driver,  Class<T> recordClass) throws Exception {
    driver.removeAll(recordClass);
    String znode=generateFakeZNode(recordClass);
    assertNull(curatorFramework.checkExists().forPath(znode));
    curatorFramework.create().withMode(CreateMode.PERSISTENT).withACL(null).forPath(znode,null);
    assertNotNull(curatorFramework.checkExists().forPath(znode));
    driver.get(recordClass);
    assertNull(curatorFramework.checkExists().forPath(znode));
  }
  @Test public void testGetNullRecord() throws Exception {
    testGetNullRecord(getStateStoreDriver());
  }
  @Test public void testInsert() throws IllegalArgumentException, IllegalAccessException, IOException {
    testInsert(getStateStoreDriver());
  }
  @Test public void testUpdate() throws IllegalArgumentException, ReflectiveOperationException, IOException, SecurityException {
    testPut(getStateStoreDriver());
  }
  @Test public void testDelete() throws IllegalArgumentException, IllegalAccessException, IOException {
    testRemove(getStateStoreDriver());
  }
  @Test public void testFetchErrors() throws IllegalArgumentException, IllegalAccessException, IOException {
    testFetchErrors(getStateStoreDriver());
  }
}
