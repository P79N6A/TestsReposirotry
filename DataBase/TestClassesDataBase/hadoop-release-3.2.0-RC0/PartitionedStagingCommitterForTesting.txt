/** 
 * Subclass of the Partitioned Staging committer used in the test cases.
 */
private static final class PartitionedStagingCommitterForTesting extends PartitionedCommitterForTesting {
  private boolean aborted=false;
  private PartitionedStagingCommitterForTesting(  TaskAttemptContext context) throws IOException {
    super(OUTPUT_PATH,context);
  }
  @Override protected List<SinglePendingCommit> listPendingUploadsToCommit(  JobContext context) throws IOException {
    List<SinglePendingCommit> pending=Lists.newArrayList();
    for (    String dateint : Arrays.asList("20161115","20161116")) {
      for (      String hour : Arrays.asList("13","14")) {
        String key=OUTPUT_PREFIX + "/dateint=" + dateint+ "/hour="+ hour+ "/"+ UUID.randomUUID().toString()+ ".parquet";
        SinglePendingCommit commit=new SinglePendingCommit();
        commit.setBucket(BUCKET);
        commit.setDestinationKey(key);
        commit.setUri("s3a://" + BUCKET + "/"+ key);
        commit.setUploadId(UUID.randomUUID().toString());
        ArrayList<String> etags=new ArrayList<>();
        etags.add("tag1");
        commit.setEtags(etags);
        pending.add(commit);
      }
    }
    return pending;
  }
  @Override protected void abortJobInternal(  JobContext context,  boolean suppressExceptions) throws IOException {
    this.aborted=true;
    super.abortJobInternal(context,suppressExceptions);
  }
}
