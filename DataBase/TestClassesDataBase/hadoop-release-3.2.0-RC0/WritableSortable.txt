private static class WritableSortable implements IndexedSortable {
  private static Random r=new Random();
  private final int eob;
  private final int[] indices;
  private final int[] offsets;
  private final byte[] bytes;
  private final WritableComparator comparator;
  private final String[] check;
  private final long seed;
  public WritableSortable() throws IOException {
    this(100);
  }
  public WritableSortable(  int j) throws IOException {
    seed=r.nextLong();
    r.setSeed(seed);
    Text t=new Text();
    StringBuilder sb=new StringBuilder();
    indices=new int[j];
    offsets=new int[j];
    check=new String[j];
    DataOutputBuffer dob=new DataOutputBuffer();
    for (int i=0; i < j; ++i) {
      indices[i]=i;
      offsets[i]=dob.getLength();
      genRandom(t,r.nextInt(15) + 1,sb);
      t.write(dob);
      check[i]=t.toString();
    }
    eob=dob.getLength();
    bytes=dob.getData();
    comparator=WritableComparator.get(Text.class);
  }
  public long getSeed(){
    return seed;
  }
  private static void genRandom(  Text t,  int len,  StringBuilder sb){
    sb.setLength(0);
    for (int i=0; i < len; ++i) {
      sb.append(Integer.toString(r.nextInt(26) + 10,36));
    }
    t.set(sb.toString());
  }
  @Override public int compare(  int i,  int j){
    final int ii=indices[i];
    final int ij=indices[j];
    return comparator.compare(bytes,offsets[ii],((ii + 1 == indices.length) ? eob : offsets[ii + 1]) - offsets[ii],bytes,offsets[ij],((ij + 1 == indices.length) ? eob : offsets[ij + 1]) - offsets[ij]);
  }
  @Override public void swap(  int i,  int j){
    int tmp=indices[i];
    indices[i]=indices[j];
    indices[j]=tmp;
  }
  public String[] getValues(){
    return check;
  }
  public String[] getSorted() throws IOException {
    String[] ret=new String[indices.length];
    Text t=new Text();
    DataInputBuffer dib=new DataInputBuffer();
    for (int i=0; i < ret.length; ++i) {
      int ii=indices[i];
      dib.reset(bytes,offsets[ii],((ii + 1 == indices.length) ? eob : offsets[ii + 1]) - offsets[ii]);
      t.readFields(dib);
      ret[i]=t.toString();
    }
    return ret;
  }
}
