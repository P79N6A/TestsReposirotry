private class CustomedClientRMService extends ClientRMService {
  public CustomedClientRMService(  RMContext rmContext,  YarnScheduler scheduler,  RMAppManager rmAppManager,  ApplicationACLsManager applicationACLsManager,  QueueACLsManager queueACLsManager,  RMDelegationTokenSecretManager rmDTSecretManager){
    super(rmContext,scheduler,rmAppManager,applicationACLsManager,queueACLsManager,rmDTSecretManager);
  }
  @Override public GetNewApplicationResponse getNewApplication(  GetNewApplicationRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    GetNewApplicationResponse response=GetNewApplicationResponse.newInstance(createFakeAppId(),null,null);
    return response;
  }
  @Override public GetApplicationReportResponse getApplicationReport(  GetApplicationReportRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    ApplicationReport report=createFakeAppReport();
    GetApplicationReportResponse response=GetApplicationReportResponse.newInstance(report);
    return response;
  }
  @Override public GetClusterMetricsResponse getClusterMetrics(  GetClusterMetricsRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    GetClusterMetricsResponse response=GetClusterMetricsResponse.newInstance(createFakeYarnClusterMetrics());
    return response;
  }
  @Override public GetApplicationsResponse getApplications(  GetApplicationsRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    GetApplicationsResponse response=GetApplicationsResponse.newInstance(createFakeAppReports());
    return response;
  }
  @Override public GetClusterNodesResponse getClusterNodes(  GetClusterNodesRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    GetClusterNodesResponse response=GetClusterNodesResponse.newInstance(createFakeNodeReports());
    return response;
  }
  @Override public GetQueueInfoResponse getQueueInfo(  GetQueueInfoRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetQueueInfoResponse.newInstance(createFakeQueueInfo());
  }
  @Override public GetQueueUserAclsInfoResponse getQueueUserAcls(  GetQueueUserAclsInfoRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetQueueUserAclsInfoResponse.newInstance(createFakeQueueUserACLInfoList());
  }
  @Override public GetApplicationAttemptReportResponse getApplicationAttemptReport(  GetApplicationAttemptReportRequest request) throws YarnException, IOException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetApplicationAttemptReportResponse.newInstance(createFakeApplicationAttemptReport());
  }
  @Override public GetApplicationAttemptsResponse getApplicationAttempts(  GetApplicationAttemptsRequest request) throws YarnException, IOException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetApplicationAttemptsResponse.newInstance(createFakeApplicationAttemptReports());
  }
  @Override public GetContainerReportResponse getContainerReport(  GetContainerReportRequest request) throws YarnException, IOException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetContainerReportResponse.newInstance(createFakeContainerReport());
  }
  @Override public GetContainersResponse getContainers(  GetContainersRequest request) throws YarnException, IOException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetContainersResponse.newInstance(createFakeContainerReports());
  }
  @Override public SubmitApplicationResponse submitApplication(  SubmitApplicationRequest request) throws YarnException, IOException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return super.submitApplication(request);
  }
  @Override public KillApplicationResponse forceKillApplication(  KillApplicationRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return KillApplicationResponse.newInstance(true);
  }
  @Override public MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(  MoveApplicationAcrossQueuesRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return Records.newRecord(MoveApplicationAcrossQueuesResponse.class);
  }
  @Override public GetDelegationTokenResponse getDelegationToken(  GetDelegationTokenRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return GetDelegationTokenResponse.newInstance(createFakeToken());
  }
  @Override public RenewDelegationTokenResponse renewDelegationToken(  RenewDelegationTokenRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return RenewDelegationTokenResponse.newInstance(createNextExpirationTime());
  }
  @Override public CancelDelegationTokenResponse cancelDelegationToken(  CancelDelegationTokenRequest request) throws YarnException {
    resetStartFailoverFlag(true);
    Assert.assertTrue(waittingForFailOver());
    return CancelDelegationTokenResponse.newInstance();
  }
}
