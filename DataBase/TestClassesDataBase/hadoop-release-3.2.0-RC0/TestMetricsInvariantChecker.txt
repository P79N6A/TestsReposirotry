/** 
 * This class tests the  {@code MetricsInvariantChecker} by running it multipletime and reporting the time it takes to execute, as well as verifying that the invariant throws in case the invariants are not respected.
 */
public class TestMetricsInvariantChecker {
  public final static Logger LOG=Logger.getLogger(TestMetricsInvariantChecker.class);
  private MetricsSystem metricsSystem;
  private MetricsInvariantChecker ic;
  private Configuration conf;
  @Before public void setup(){
    this.metricsSystem=DefaultMetricsSystem.instance();
    JvmMetrics.initSingleton("ResourceManager",null);
    this.ic=new MetricsInvariantChecker();
    this.conf=new Configuration();
    conf.set(MetricsInvariantChecker.INVARIANTS_FILE,"src/test/resources/invariants.txt");
    conf.setBoolean(MetricsInvariantChecker.THROW_ON_VIOLATION,true);
    ic.init(conf,null,null);
  }
  @Test(timeout=5000) public void testManyRuns(){
    QueueMetrics qm=QueueMetrics.forQueue(metricsSystem,"root",null,false,conf);
    qm.setAvailableResourcesToQueue(RMNodeLabelsManager.NO_LABEL,Resource.newInstance(1,1));
    int numIterations=1000;
    long start=System.currentTimeMillis();
    for (int i=0; i < numIterations; i++) {
      ic.editSchedule();
    }
    long end=System.currentTimeMillis();
    System.out.println("Runtime per iteration (avg of " + numIterations + " iterations): "+ (end - start)+ " tot time");
  }
  @Test public void testViolation(){
    QueueMetrics qm=QueueMetrics.forQueue(metricsSystem,"root",null,false,conf);
    qm.setAvailableResourcesToQueue(RMNodeLabelsManager.NO_LABEL,Resource.newInstance(-1,-1));
    try {
      ic.editSchedule();
      fail();
    }
 catch (    InvariantViolationException i) {
    }
    conf.setBoolean(MetricsInvariantChecker.THROW_ON_VIOLATION,false);
    ic.init(conf,null,null);
    ic.editSchedule();
  }
}
