private static class TestMatrixEntry {
  final Map<Path,Boolean> protectedPaths=Maps.newHashMap();
  final Map<Path,Boolean> unProtectedPaths=Maps.newHashMap();
  private TestMatrixEntry(){
  }
  public static TestMatrixEntry get(){
    return new TestMatrixEntry();
  }
  public Collection<Path> getProtectedPaths(){
    return protectedPaths.keySet();
  }
  public Collection<Path> getUnprotectedPaths(){
    return unProtectedPaths.keySet();
  }
  /** 
 * Get all paths to be deleted in sorted order.
 * @return sorted collection of paths to be deleted.
 */
  @SuppressWarnings("unchecked") public Iterable<Path> getAllPathsToBeDeleted(){
    ArrayList<Path> combined=new ArrayList<>();
    combined.addAll(protectedPaths.keySet());
    combined.addAll(unProtectedPaths.keySet());
    Collections.sort(combined);
    return combined;
  }
  public boolean canPathBeDeleted(  Path path){
    return protectedPaths.containsKey(path) ? protectedPaths.get(path) : unProtectedPaths.get(path);
  }
  public TestMatrixEntry addProtectedDir(  String dir,  boolean canBeDeleted){
    protectedPaths.put(new Path(dir),canBeDeleted);
    return this;
  }
  public TestMatrixEntry addUnprotectedDir(  String dir,  boolean canBeDeleted){
    unProtectedPaths.put(new Path(dir),canBeDeleted);
    return this;
  }
  @Override public String toString(){
    return "TestMatrixEntry - ProtectedPaths=[" + Joiner.on(", ").join(protectedPaths.keySet()) + "]; UnprotectedPaths=["+ Joiner.on(", ").join(unProtectedPaths.keySet())+ "]";
  }
}
