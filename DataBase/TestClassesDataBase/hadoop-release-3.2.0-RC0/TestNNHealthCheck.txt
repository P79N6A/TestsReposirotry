public class TestNNHealthCheck {
  private MiniDFSCluster cluster;
  private Configuration conf;
  @Before public void setup(){
    conf=new Configuration();
  }
  @After public void shutdown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testNNHealthCheck() throws IOException {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).nnTopology(MiniDFSNNTopology.simpleHATopology()).build();
    doNNHealthCheckTest();
  }
  @Test public void testNNHealthCheckWithLifelineAddress() throws IOException {
    conf.set(DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY,"0.0.0.0:0");
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).nnTopology(MiniDFSNNTopology.simpleHATopology()).build();
    doNNHealthCheckTest();
  }
  private void doNNHealthCheckTest() throws IOException {
    MockNameNodeResourceChecker mockResourceChecker=new MockNameNodeResourceChecker(conf);
    cluster.getNameNode(0).getNamesystem().setNNResourceChecker(mockResourceChecker);
    NNHAServiceTarget haTarget=new NNHAServiceTarget(conf,DFSUtil.getNamenodeNameServiceId(conf),"nn1");
    final String expectedTargetString;
    if (conf.get(DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY + "." + DFSUtil.getNamenodeNameServiceId(conf)+ ".nn1") != null) {
      expectedTargetString=haTarget.getHealthMonitorAddress().toString();
    }
 else {
      expectedTargetString=haTarget.getAddress().toString();
    }
    assertTrue("Expected haTarget " + haTarget + " containing "+ expectedTargetString,haTarget.toString().contains(expectedTargetString));
    HAServiceProtocol rpc=haTarget.getHealthMonitorProxy(conf,conf.getInt(HA_HM_RPC_TIMEOUT_KEY,HA_HM_RPC_TIMEOUT_DEFAULT));
    rpc.monitorHealth();
    mockResourceChecker.setResourcesAvailable(false);
    try {
      rpc.monitorHealth();
      fail("Should not have succeeded in calling monitorHealth");
    }
 catch (    HealthCheckFailedException hcfe) {
      GenericTestUtils.assertExceptionContains("The NameNode has no resources available",hcfe);
    }
catch (    RemoteException re) {
      GenericTestUtils.assertExceptionContains("The NameNode has no resources available",re.unwrapRemoteException(HealthCheckFailedException.class));
    }
  }
}
