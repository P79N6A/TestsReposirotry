/** 
 * This testing is fairly lightweight.  Assumes HardLink routines will only be called when permissions etc are okay; no negative testing is provided. These tests all use  "src" as the source directory,  "tgt_one" as the target directory for single-file hardlinking, and "tgt_mult" as the target directory for multi-file hardlinking. Contents of them are/will be: dir:src:  files: x1, x2, x3 dir:tgt_one: files: x1 (linked to src/x1), y (linked to src/x2),  x3 (linked to src/x3), x11 (also linked to src/x1) dir:tgt_mult: files: x1, x2, x3 (all linked to same name in src/) NOTICE: This test class only tests the functionality of the OS upon which the test is run! (although you're pretty safe with the unix-like OS's, unless a typo sneaks in.)
 */
public class TestHardLink {
  final static private File TEST_DIR=GenericTestUtils.getTestDir("test/hl");
  private static String DIR="dir_";
  private static File src=new File(TEST_DIR,DIR + "src");
  private static File tgt_mult=new File(TEST_DIR,DIR + "tgt_mult");
  private static File tgt_one=new File(TEST_DIR,DIR + "tgt_one");
  private static File x1=new File(src,"x1");
  private static File x2=new File(src,"x2");
  private static File x3=new File(src,"x3");
  private static File x1_one=new File(tgt_one,"x1");
  private static File y_one=new File(tgt_one,"y");
  private static File x3_one=new File(tgt_one,"x3");
  private static File x11_one=new File(tgt_one,"x11");
  private static File x1_mult=new File(tgt_mult,"x1");
  private static File x2_mult=new File(tgt_mult,"x2");
  private static File x3_mult=new File(tgt_mult,"x3");
  private static String str1="11111";
  private static String str2="22222";
  private static String str3="33333";
  /** 
 * Assure clean environment for start of testing
 * @throws IOException
 */
  @BeforeClass public static void setupClean(){
    FileUtil.fullyDelete(src);
    FileUtil.fullyDelete(tgt_one);
    FileUtil.fullyDelete(tgt_mult);
    assertFalse(src.exists());
    assertFalse(tgt_one.exists());
    assertFalse(tgt_mult.exists());
  }
  /** 
 * Initialize clean environment for start of each test
 */
  @Before public void setupDirs() throws IOException {
    assertFalse(src.exists());
    assertFalse(tgt_one.exists());
    assertFalse(tgt_mult.exists());
    src.mkdirs();
    tgt_one.mkdirs();
    tgt_mult.mkdirs();
    makeNonEmptyFile(x1,str1);
    makeNonEmptyFile(x2,str2);
    makeNonEmptyFile(x3,str3);
    validateSetup();
  }
  /** 
 * validate that  {@link setupDirs()} produced the expected result
 */
  private void validateSetup() throws IOException {
    assertTrue(src.exists());
    assertEquals(3,src.list().length);
    assertTrue(x1.exists());
    assertTrue(x2.exists());
    assertTrue(x3.exists());
    assertTrue(fetchFileContents(x1).equals(str1));
    assertTrue(fetchFileContents(x2).equals(str2));
    assertTrue(fetchFileContents(x3).equals(str3));
    assertTrue(tgt_one.exists());
    assertTrue(tgt_mult.exists());
    assertEquals(0,tgt_one.list().length);
    assertEquals(0,tgt_mult.list().length);
  }
  /** 
 * validate that single-file link operations produced the expected results
 */
  private void validateTgtOne() throws IOException {
    assertTrue(tgt_one.exists());
    assertEquals(4,tgt_one.list().length);
    assertTrue(x1_one.exists());
    assertTrue(x11_one.exists());
    assertTrue(y_one.exists());
    assertTrue(x3_one.exists());
    assertTrue(fetchFileContents(x1_one).equals(str1));
    assertTrue(fetchFileContents(x11_one).equals(str1));
    assertTrue(fetchFileContents(y_one).equals(str2));
    assertTrue(fetchFileContents(x3_one).equals(str3));
  }
  /** 
 * validate that multi-file link operations produced the expected results
 */
  private void validateTgtMult() throws IOException {
    assertTrue(tgt_mult.exists());
    assertEquals(3,tgt_mult.list().length);
    assertTrue(x1_mult.exists());
    assertTrue(x2_mult.exists());
    assertTrue(x3_mult.exists());
    assertTrue(fetchFileContents(x1_mult).equals(str1));
    assertTrue(fetchFileContents(x2_mult).equals(str2));
    assertTrue(fetchFileContents(x3_mult).equals(str3));
  }
  @After public void tearDown() throws IOException {
    setupClean();
  }
  private void makeNonEmptyFile(  File file,  String contents) throws IOException {
    FileWriter fw=new FileWriter(file);
    fw.write(contents);
    fw.close();
  }
  private void appendToFile(  File file,  String contents) throws IOException {
    FileWriter fw=new FileWriter(file,true);
    fw.write(contents);
    fw.close();
  }
  private String fetchFileContents(  File file) throws IOException {
    char[] buf=new char[20];
    FileReader fr=new FileReader(file);
    int cnt=fr.read(buf);
    fr.close();
    char[] result=Arrays.copyOf(buf,cnt);
    return new String(result);
  }
  /** 
 * Sanity check the simplest case of HardLink.getLinkCount() to make sure we get back "1" for ordinary single-linked files. Tests with multiply-linked files are in later test cases.
 */
  @Test public void testGetLinkCount() throws IOException {
    assertEquals(1,getLinkCount(x1));
    assertEquals(1,getLinkCount(x2));
    assertEquals(1,getLinkCount(x3));
  }
  /** 
 * Test the single-file method HardLink.createHardLink(). Also tests getLinkCount() with values greater than one.
 */
  @Test public void testCreateHardLink() throws IOException {
    createHardLink(x1,x1_one);
    assertTrue(x1_one.exists());
    assertEquals(2,getLinkCount(x1));
    assertEquals(2,getLinkCount(x1_one));
    assertEquals(1,getLinkCount(x2));
    createHardLink(x2,y_one);
    createHardLink(x3,x3_one);
    assertEquals(2,getLinkCount(x2));
    assertEquals(2,getLinkCount(x3));
    createHardLink(x1,x11_one);
    assertEquals(3,getLinkCount(x1));
    assertEquals(3,getLinkCount(x1_one));
    assertEquals(3,getLinkCount(x11_one));
    validateTgtOne();
    appendToFile(x1_one,str3);
    assertTrue(fetchFileContents(x1_one).equals(str1 + str3));
    assertTrue(fetchFileContents(x11_one).equals(str1 + str3));
    assertTrue(fetchFileContents(x1).equals(str1 + str3));
  }
  @Test public void testCreateHardLinkMult() throws IOException {
    String[] fileNames=src.list();
    createHardLinkMult(src,fileNames,tgt_mult);
    assertEquals(2,getLinkCount(x1));
    assertEquals(2,getLinkCount(x2));
    assertEquals(2,getLinkCount(x3));
    assertEquals(2,getLinkCount(x1_mult));
    assertEquals(2,getLinkCount(x2_mult));
    assertEquals(2,getLinkCount(x3_mult));
    validateTgtMult();
    appendToFile(x1_mult,str3);
    assertTrue(fetchFileContents(x1_mult).equals(str1 + str3));
    assertTrue(fetchFileContents(x1).equals(str1 + str3));
  }
  /** 
 * Test createHardLinkMult() with empty list of files. We use an extended version of the method call, that returns the number of System exec calls made, which should be zero in this case.
 */
  @Test public void testCreateHardLinkMultEmptyList() throws IOException {
    String[] emptyList={};
    createHardLinkMult(src,emptyList,tgt_mult);
    validateSetup();
  }
  @Test public void testWindowsSyntax(){
class win extends HardLinkCGWin {
    }
    assertEquals(4,win.getLinkCountCommand.length);
    assertEquals(2,("%f").length());
    assertEquals(3,("\\%f").length());
    assertEquals("hardlink",win.getLinkCountCommand[1]);
    assertEquals(4,("-c%h").length());
  }
}
