private static class MyFifoScheduler extends FifoScheduler {
  public MyFifoScheduler(  RMContext rmContext){
    super();
    try {
      Configuration conf=new Configuration();
      init(conf);
      reinitialize(conf,rmContext);
    }
 catch (    IOException ie) {
      LOG.info("add application failed with ",ie);
      assert (false);
    }
  }
  List<ResourceRequest> lastAsk=null;
  List<ContainerId> lastRelease=null;
  List<String> lastBlacklistAdditions;
  List<String> lastBlacklistRemovals;
  Resource forceResourceLimit=null;
  @Override public synchronized Allocation allocate(  ApplicationAttemptId applicationAttemptId,  List<ResourceRequest> ask,  List<SchedulingRequest> schedulingRequests,  List<ContainerId> release,  List<String> blacklistAdditions,  List<String> blacklistRemovals,  ContainerUpdates updateRequests){
    List<ResourceRequest> askCopy=new ArrayList<ResourceRequest>();
    for (    ResourceRequest req : ask) {
      ResourceRequest reqCopy=ResourceRequest.newInstance(req.getPriority(),req.getResourceName(),req.getCapability(),req.getNumContainers(),req.getRelaxLocality());
      askCopy.add(reqCopy);
    }
    SecurityUtil.setTokenServiceUseIp(false);
    lastAsk=ask;
    lastRelease=release;
    lastBlacklistAdditions=blacklistAdditions;
    lastBlacklistRemovals=blacklistRemovals;
    Allocation allocation=super.allocate(applicationAttemptId,askCopy,schedulingRequests,release,blacklistAdditions,blacklistRemovals,updateRequests);
    if (forceResourceLimit != null) {
      allocation.setResourceLimit(forceResourceLimit);
    }
    return allocation;
  }
  public void forceResourceLimit(  Resource resource){
    this.forceResourceLimit=resource;
  }
}
