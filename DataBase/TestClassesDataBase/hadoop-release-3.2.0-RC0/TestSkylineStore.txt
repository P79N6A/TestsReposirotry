/** 
 * Test  {@link SkylineStore} class.
 */
public abstract class TestSkylineStore {
  /** 
 * Testing variables.
 */
  private SkylineStore skylineStore;
  private TreeMap<Long,Resource> resourceOverTime;
  private RLESparseResourceAllocation skylineList;
  private ReservationInterval riAdd;
  private Resource resource;
  protected abstract SkylineStore createSkylineStore();
  @Before public final void setup(){
    skylineStore=createSkylineStore();
    resourceOverTime=new TreeMap<>();
    resource=Resource.newInstance(1024 * 100,100);
  }
  private void compare(  final ResourceSkyline skyline1,  final ResourceSkyline skyline2){
    Assert.assertEquals(skyline1.getJobId(),skyline2.getJobId());
    Assert.assertEquals(skyline1.getJobInputDataSize(),skyline2.getJobInputDataSize(),0);
    Assert.assertEquals(skyline1.getJobSubmissionTime(),skyline2.getJobSubmissionTime());
    Assert.assertEquals(skyline1.getJobFinishTime(),skyline2.getJobFinishTime());
    Assert.assertEquals(skyline1.getContainerSpec().getMemorySize(),skyline2.getContainerSpec().getMemorySize());
    Assert.assertEquals(skyline1.getContainerSpec().getVirtualCores(),skyline2.getContainerSpec().getVirtualCores());
    Assert.assertEquals(true,skyline2.getSkylineList().equals(skyline1.getSkylineList()));
  }
  private void addToStore(  final RecurrenceId recurrenceId,  final ResourceSkyline resourceSkyline) throws SkylineStoreException {
    final List<ResourceSkyline> resourceSkylines=new ArrayList<>();
    resourceSkylines.add(resourceSkyline);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
    final List<ResourceSkyline> resourceSkylinesGet=skylineStore.getHistory(recurrenceId).get(recurrenceId);
    Assert.assertTrue(resourceSkylinesGet.contains(resourceSkyline));
  }
  private ResourceSkyline getSkyline(  final int n){
    skylineList=new RLESparseResourceAllocation(resourceOverTime,new DefaultResourceCalculator());
    for (int i=0; i < n; i++) {
      riAdd=new ReservationInterval(i * 10,(i + 1) * 10);
      skylineList.addInterval(riAdd,resource);
    }
    final ResourceSkyline resourceSkyline=new ResourceSkyline(Integer.toString(n),1024.5,0,20,resource,skylineList);
    return resourceSkyline;
  }
  @Test public final void testGetHistory() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    final ResourceSkyline resourceSkyline2=getSkyline(2);
    addToStore(recurrenceId1,resourceSkyline2);
    final RecurrenceId recurrenceId2=new RecurrenceId("FraudDetection","17/06/21 00:00:00");
    final ResourceSkyline resourceSkyline3=getSkyline(3);
    addToStore(recurrenceId2,resourceSkyline3);
    final ResourceSkyline resourceSkyline4=getSkyline(4);
    addToStore(recurrenceId2,resourceSkyline4);
    final RecurrenceId recurrenceId3=new RecurrenceId("Random","17/06/20 00:00:00");
    addToStore(recurrenceId3,resourceSkyline1);
    addToStore(recurrenceId3,resourceSkyline2);
    Map<RecurrenceId,List<ResourceSkyline>> jobHistory=skylineStore.getHistory(recurrenceId1);
    Assert.assertEquals(1,jobHistory.size());
    for (    final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
      Assert.assertEquals(recurrenceId1,entry.getKey());
      final List<ResourceSkyline> getSkylines=entry.getValue();
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline1,getSkylines.get(0));
      compare(resourceSkyline2,getSkylines.get(1));
    }
    RecurrenceId recurrenceIdTest=new RecurrenceId("FraudDetection","*");
    jobHistory=skylineStore.getHistory(recurrenceIdTest);
    Assert.assertEquals(2,jobHistory.size());
    for (    final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
      Assert.assertEquals(recurrenceId1.getPipelineId(),entry.getKey().getPipelineId());
      final List<ResourceSkyline> getSkylines=entry.getValue();
      if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
        Assert.assertEquals(2,getSkylines.size());
        compare(resourceSkyline1,getSkylines.get(0));
        compare(resourceSkyline2,getSkylines.get(1));
      }
 else {
        Assert.assertEquals(entry.getKey().getRunId(),"17/06/21 00:00:00");
        Assert.assertEquals(2,getSkylines.size());
        compare(resourceSkyline3,getSkylines.get(0));
        compare(resourceSkyline4,getSkylines.get(1));
      }
    }
    recurrenceIdTest=new RecurrenceId("*","some random runId");
    jobHistory=skylineStore.getHistory(recurrenceIdTest);
    Assert.assertEquals(3,jobHistory.size());
    for (    final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
      if (entry.getKey().getPipelineId().equals("FraudDetection")) {
        final List<ResourceSkyline> getSkylines=entry.getValue();
        if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
          Assert.assertEquals(2,getSkylines.size());
          compare(resourceSkyline1,getSkylines.get(0));
          compare(resourceSkyline2,getSkylines.get(1));
        }
 else {
          Assert.assertEquals(entry.getKey().getRunId(),"17/06/21 00:00:00");
          Assert.assertEquals(2,getSkylines.size());
          compare(resourceSkyline3,getSkylines.get(0));
          compare(resourceSkyline4,getSkylines.get(1));
        }
      }
 else {
        Assert.assertEquals("Random",entry.getKey().getPipelineId());
        Assert.assertEquals(entry.getKey().getRunId(),"17/06/20 00:00:00");
        final List<ResourceSkyline> getSkylines=entry.getValue();
        Assert.assertEquals(2,getSkylines.size());
        compare(resourceSkyline1,getSkylines.get(0));
        compare(resourceSkyline2,getSkylines.get(1));
      }
    }
    recurrenceIdTest=new RecurrenceId("some random pipelineId","some random runId");
    Assert.assertNull(skylineStore.getHistory(recurrenceIdTest));
  }
  @Test public final void testGetEstimation() throws SkylineStoreException {
    final RLESparseResourceAllocation skylineList2=new RLESparseResourceAllocation(resourceOverTime,new DefaultResourceCalculator());
    for (int i=0; i < 5; i++) {
      riAdd=new ReservationInterval(i * 10,(i + 1) * 10);
      skylineList2.addInterval(riAdd,resource);
    }
    skylineStore.addEstimation("FraudDetection",skylineList2);
    final RLESparseResourceAllocation estimation=skylineStore.getEstimation("FraudDetection");
    for (int i=0; i < 50; i++) {
      Assert.assertEquals(skylineList2.getCapacityAtTime(i),estimation.getCapacityAtTime(i));
    }
  }
  @Test(expected=NullRecurrenceIdException.class) public final void testGetNullRecurrenceId() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    final ResourceSkyline resourceSkyline2=getSkyline(2);
    addToStore(recurrenceId1,resourceSkyline2);
    final RecurrenceId recurrenceId2=new RecurrenceId("FraudDetection","17/06/21 00:00:00");
    final ResourceSkyline resourceSkyline3=getSkyline(3);
    addToStore(recurrenceId2,resourceSkyline3);
    final ResourceSkyline resourceSkyline4=getSkyline(4);
    addToStore(recurrenceId2,resourceSkyline4);
    final RecurrenceId recurrenceId3=new RecurrenceId("Random","17/06/20 00:00:00");
    addToStore(recurrenceId3,resourceSkyline1);
    addToStore(recurrenceId3,resourceSkyline2);
    skylineStore.getHistory(null);
  }
  @Test(expected=NullPipelineIdException.class) public final void testGetNullPipelineIdException() throws SkylineStoreException {
    skylineStore.getEstimation(null);
  }
  @Test public final void testAddNormal() throws SkylineStoreException {
    final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId,resourceSkyline1);
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    resourceSkylines.add(null);
    final ResourceSkyline resourceSkyline2=getSkyline(2);
    resourceSkylines.add(resourceSkyline2);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
    final Map<RecurrenceId,List<ResourceSkyline>> jobHistory=skylineStore.getHistory(recurrenceId);
    Assert.assertEquals(1,jobHistory.size());
    for (    final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
      Assert.assertEquals(recurrenceId,entry.getKey());
      final List<ResourceSkyline> getSkylines=entry.getValue();
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline1,getSkylines.get(0));
      compare(resourceSkyline2,getSkylines.get(1));
    }
  }
  @Test(expected=NullRecurrenceIdException.class) public final void testAddNullRecurrenceId() throws SkylineStoreException {
    final RecurrenceId recurrenceIdNull=null;
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    skylineStore.addHistory(recurrenceIdNull,resourceSkylines);
  }
  @Test(expected=NullResourceSkylineException.class) public final void testAddNullResourceSkyline() throws SkylineStoreException {
    final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    skylineStore.addHistory(recurrenceId,null);
  }
  @Test(expected=DuplicateRecurrenceIdException.class) public final void testAddDuplicateRecurrenceId() throws SkylineStoreException {
    final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
  }
  @Test(expected=NullPipelineIdException.class) public final void testAddNullPipelineIdException() throws SkylineStoreException {
    final RLESparseResourceAllocation skylineList2=new RLESparseResourceAllocation(resourceOverTime,new DefaultResourceCalculator());
    for (int i=0; i < 5; i++) {
      riAdd=new ReservationInterval(i * 10,(i + 1) * 10);
      skylineList2.addInterval(riAdd,resource);
    }
    skylineStore.addEstimation(null,skylineList2);
  }
  @Test(expected=NullRLESparseResourceAllocationException.class) public final void testAddNullRLESparseResourceAllocationExceptionException() throws SkylineStoreException {
    skylineStore.addEstimation("FraudDetection",null);
  }
  @Test public final void testDeleteNormal() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    final ResourceSkyline resourceSkyline2=getSkyline(2);
    addToStore(recurrenceId1,resourceSkyline2);
    skylineStore.deleteHistory(recurrenceId1);
  }
  @Test(expected=NullRecurrenceIdException.class) public final void testDeleteNullRecurrenceId() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    skylineStore.deleteHistory(null);
  }
  @Test(expected=RecurrenceIdNotFoundException.class) public final void testDeleteRecurrenceIdNotFound() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    final RecurrenceId recurrenceIdInvalid=new RecurrenceId("Some random pipelineId","Some random runId");
    skylineStore.deleteHistory(recurrenceIdInvalid);
  }
  @Test public final void testUpdateNormal() throws SkylineStoreException {
    final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    addToStore(recurrenceId1,resourceSkyline1);
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline2=getSkyline(2);
    resourceSkylines.add(resourceSkyline1);
    resourceSkylines.add(resourceSkyline2);
    skylineStore.updateHistory(recurrenceId1,resourceSkylines);
    final Map<RecurrenceId,List<ResourceSkyline>> jobHistory=skylineStore.getHistory(recurrenceId1);
    Assert.assertEquals(1,jobHistory.size());
    for (    final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
      Assert.assertEquals(recurrenceId1,entry.getKey());
      final List<ResourceSkyline> getSkylines=entry.getValue();
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline1,getSkylines.get(0));
      compare(resourceSkyline2,getSkylines.get(1));
    }
  }
  @Test(expected=NullRecurrenceIdException.class) public final void testUpdateNullRecurrenceId() throws SkylineStoreException {
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    final ArrayList<ResourceSkyline> resourceSkylinesInvalid=new ArrayList<ResourceSkyline>();
    resourceSkylinesInvalid.add(null);
    skylineStore.updateHistory(null,resourceSkylines);
  }
  @Test(expected=NullResourceSkylineException.class) public final void testUpdateNullResourceSkyline() throws SkylineStoreException {
    final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    final ArrayList<ResourceSkyline> resourceSkylinesInvalid=new ArrayList<ResourceSkyline>();
    resourceSkylinesInvalid.add(null);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
    skylineStore.updateHistory(recurrenceId,null);
  }
  @Test(expected=EmptyResourceSkylineException.class) public final void testUpdateEmptyRecurrenceId() throws SkylineStoreException {
    final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    final ArrayList<ResourceSkyline> resourceSkylinesInvalid=new ArrayList<ResourceSkyline>();
    resourceSkylinesInvalid.add(null);
    skylineStore.addHistory(recurrenceId,resourceSkylines);
    skylineStore.updateHistory(recurrenceId,resourceSkylinesInvalid);
  }
  @Test(expected=RecurrenceIdNotFoundException.class) public final void testUpdateRecurrenceIdNotFound() throws SkylineStoreException {
    final ArrayList<ResourceSkyline> resourceSkylines=new ArrayList<ResourceSkyline>();
    final ResourceSkyline resourceSkyline1=getSkyline(1);
    resourceSkylines.add(resourceSkyline1);
    final RecurrenceId recurrenceIdInvalid=new RecurrenceId("Some random pipelineId","Some random runId");
    final ArrayList<ResourceSkyline> resourceSkylinesInvalid=new ArrayList<ResourceSkyline>();
    resourceSkylinesInvalid.add(null);
    skylineStore.updateHistory(recurrenceIdInvalid,resourceSkylines);
  }
  @After public final void cleanUp(){
    skylineStore=null;
    resourceOverTime.clear();
    resourceOverTime=null;
    skylineList=null;
    riAdd=null;
    resource=null;
  }
}
