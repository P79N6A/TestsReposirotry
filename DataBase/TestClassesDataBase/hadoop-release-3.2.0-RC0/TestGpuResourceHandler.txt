public class TestGpuResourceHandler {
  private CGroupsHandler mockCGroupsHandler;
  private PrivilegedOperationExecutor mockPrivilegedExecutor;
  private GpuResourceHandlerImpl gpuResourceHandler;
  private NMStateStoreService mockNMStateStore;
  private ConcurrentHashMap<ContainerId,Container> runningContainersMap;
  @Before public void setup(){
    TestResourceUtils.addNewTypesToResources(ResourceInformation.GPU_URI);
    mockCGroupsHandler=mock(CGroupsHandler.class);
    mockPrivilegedExecutor=mock(PrivilegedOperationExecutor.class);
    mockNMStateStore=mock(NMStateStoreService.class);
    Configuration conf=new Configuration();
    Context nmctx=mock(Context.class);
    when(nmctx.getNMStateStore()).thenReturn(mockNMStateStore);
    when(nmctx.getConf()).thenReturn(conf);
    runningContainersMap=new ConcurrentHashMap<>();
    when(nmctx.getContainers()).thenReturn(runningContainersMap);
    gpuResourceHandler=new GpuResourceHandlerImpl(nmctx,mockCGroupsHandler,mockPrivilegedExecutor);
  }
  @Test public void testBootStrap() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0");
    GpuDiscoverer.getInstance().initialize(conf);
    gpuResourceHandler.bootstrap(conf);
    verify(mockCGroupsHandler,times(1)).initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);
  }
  private static ContainerId getContainerId(  int id){
    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L,1),1),id);
  }
  private static Container mockContainerWithGpuRequest(  int id,  int numGpuRequest,  boolean dockerContainerEnabled){
    Container c=mock(Container.class);
    when(c.getContainerId()).thenReturn(getContainerId(id));
    Resource res=Resource.newInstance(1024,1);
    ResourceMappings resMapping=new ResourceMappings();
    res.setResourceValue(ResourceInformation.GPU_URI,numGpuRequest);
    when(c.getResource()).thenReturn(res);
    when(c.getResourceMappings()).thenReturn(resMapping);
    ContainerLaunchContext clc=mock(ContainerLaunchContext.class);
    Map<String,String> env=new HashMap<>();
    if (dockerContainerEnabled) {
      env.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE,"docker");
    }
    when(clc.getEnvironment()).thenReturn(env);
    when(c.getLaunchContext()).thenReturn(clc);
    return c;
  }
  private static Container mockContainerWithGpuRequest(  int id,  int numGpuRequest){
    return mockContainerWithGpuRequest(id,numGpuRequest,false);
  }
  private void verifyDeniedDevices(  ContainerId containerId,  List<GpuDevice> deniedDevices) throws ResourceHandlerException, PrivilegedOperationException {
    verify(mockCGroupsHandler,times(1)).createCGroup(CGroupsHandler.CGroupController.DEVICES,containerId.toString());
    if (null != deniedDevices && !deniedDevices.isEmpty()) {
      List<Integer> deniedDevicesMinorNumber=new ArrayList<>();
      for (      GpuDevice deniedDevice : deniedDevices) {
        deniedDevicesMinorNumber.add(deniedDevice.getMinorNumber());
      }
      verify(mockPrivilegedExecutor,times(1)).executePrivilegedOperation(new PrivilegedOperation(PrivilegedOperation.OperationType.GPU,Arrays.asList(GpuResourceHandlerImpl.CONTAINER_ID_CLI_OPTION,containerId.toString(),GpuResourceHandlerImpl.EXCLUDED_GPUS_CLI_OPTION,StringUtils.join(",",deniedDevicesMinorNumber))),true);
    }
  }
  private void commonTestAllocation(  boolean dockerContainerEnabled) throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:3,3:4");
    GpuDiscoverer.getInstance().initialize(conf);
    gpuResourceHandler.bootstrap(conf);
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
    gpuResourceHandler.preStart(mockContainerWithGpuRequest(1,3,dockerContainerEnabled));
    if (dockerContainerEnabled) {
      verifyDeniedDevices(getContainerId(1),Collections.emptyList());
    }
 else {
      verifyDeniedDevices(getContainerId(1),Arrays.asList(new GpuDevice(3,4)));
    }
    boolean failedToAllocate=false;
    try {
      gpuResourceHandler.preStart(mockContainerWithGpuRequest(2,2,dockerContainerEnabled));
    }
 catch (    ResourceHandlerException e) {
      failedToAllocate=true;
    }
    Assert.assertTrue(failedToAllocate);
    gpuResourceHandler.preStart(mockContainerWithGpuRequest(3,1,dockerContainerEnabled));
    if (dockerContainerEnabled) {
      verifyDeniedDevices(getContainerId(3),Collections.emptyList());
    }
 else {
      verifyDeniedDevices(getContainerId(3),Arrays.asList(new GpuDevice(0,0),new GpuDevice(1,1),new GpuDevice(2,3)));
    }
    gpuResourceHandler.preStart(mockContainerWithGpuRequest(4,0,dockerContainerEnabled));
    if (dockerContainerEnabled) {
      verifyDeniedDevices(getContainerId(4),Collections.emptyList());
    }
 else {
      verifyDeniedDevices(getContainerId(4),Arrays.asList(new GpuDevice(0,0),new GpuDevice(1,1),new GpuDevice(2,3),new GpuDevice(3,4)));
    }
    gpuResourceHandler.postComplete(getContainerId(1));
    verify(mockCGroupsHandler,times(1)).createCGroup(CGroupsHandler.CGroupController.DEVICES,getContainerId(1).toString());
    Assert.assertEquals(3,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
    gpuResourceHandler.postComplete(getContainerId(3));
    verify(mockCGroupsHandler,times(1)).createCGroup(CGroupsHandler.CGroupController.DEVICES,getContainerId(3).toString());
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
  }
  @Test public void testAllocationWhenDockerContainerEnabled() throws Exception {
    commonTestAllocation(true);
  }
  @Test public void testAllocation() throws Exception {
    commonTestAllocation(false);
  }
  @SuppressWarnings("unchecked") @Test public void testAssignedGpuWillBeCleanedupWhenStoreOpFails() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:3,3:4");
    GpuDiscoverer.getInstance().initialize(conf);
    gpuResourceHandler.bootstrap(conf);
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
    doThrow(new IOException("Exception ...")).when(mockNMStateStore).storeAssignedResources(any(Container.class),anyString(),anyList());
    boolean exception=false;
    try {
      gpuResourceHandler.preStart(mockContainerWithGpuRequest(1,3));
    }
 catch (    ResourceHandlerException e) {
      exception=true;
    }
    Assert.assertTrue("preStart should throw exception",exception);
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
  }
  @Test public void testAllocationWithoutAllowedGpus() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES," ");
    GpuDiscoverer.getInstance().initialize(conf);
    try {
      gpuResourceHandler.bootstrap(conf);
      Assert.fail("Should fail because no GPU available");
    }
 catch (    ResourceHandlerException e) {
    }
    gpuResourceHandler.preStart(mockContainerWithGpuRequest(1,0));
    verifyDeniedDevices(getContainerId(1),Collections.emptyList());
    boolean failedToAllocate=false;
    try {
      gpuResourceHandler.preStart(mockContainerWithGpuRequest(2,1));
    }
 catch (    ResourceHandlerException e) {
      failedToAllocate=true;
    }
    Assert.assertTrue(failedToAllocate);
    gpuResourceHandler.postComplete(getContainerId(1));
    verify(mockCGroupsHandler,times(1)).createCGroup(CGroupsHandler.CGroupController.DEVICES,getContainerId(1).toString());
    Assert.assertEquals(0,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
  }
  @Test public void testAllocationStored() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:3,3:4");
    GpuDiscoverer.getInstance().initialize(conf);
    gpuResourceHandler.bootstrap(conf);
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
    Container container=mockContainerWithGpuRequest(1,3);
    gpuResourceHandler.preStart(container);
    verify(mockNMStateStore).storeAssignedResources(container,ResourceInformation.GPU_URI,Arrays.asList(new GpuDevice(0,0),new GpuDevice(1,1),new GpuDevice(2,3)));
    verifyDeniedDevices(getContainerId(1),Arrays.asList(new GpuDevice(3,4)));
    container=mockContainerWithGpuRequest(2,0);
    gpuResourceHandler.preStart(container);
    verifyDeniedDevices(getContainerId(2),Arrays.asList(new GpuDevice(0,0),new GpuDevice(1,1),new GpuDevice(2,3),new GpuDevice(3,4)));
    Assert.assertEquals(0,container.getResourceMappings().getAssignedResources(ResourceInformation.GPU_URI).size());
    verify(mockNMStateStore,never()).storeAssignedResources(eq(container),eq(ResourceInformation.GPU_URI),anyList());
  }
  @Test public void testAllocationStoredWithNULLStateStore() throws Exception {
    NMNullStateStoreService mockNMNULLStateStore=mock(NMNullStateStoreService.class);
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:3,3:4");
    Context nmnctx=mock(Context.class);
    when(nmnctx.getNMStateStore()).thenReturn(mockNMNULLStateStore);
    when(nmnctx.getConf()).thenReturn(conf);
    GpuResourceHandlerImpl gpuNULLStateResourceHandler=new GpuResourceHandlerImpl(nmnctx,mockCGroupsHandler,mockPrivilegedExecutor);
    GpuDiscoverer.getInstance().initialize(conf);
    gpuNULLStateResourceHandler.bootstrap(conf);
    Assert.assertEquals(4,gpuNULLStateResourceHandler.getGpuAllocator().getAvailableGpus());
    Container container=mockContainerWithGpuRequest(1,3);
    gpuNULLStateResourceHandler.preStart(container);
    verify(nmnctx.getNMStateStore()).storeAssignedResources(container,ResourceInformation.GPU_URI,Arrays.asList(new GpuDevice(0,0),new GpuDevice(1,1),new GpuDevice(2,3)));
  }
  @Test public void testRecoverResourceAllocation() throws Exception {
    Configuration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES,"0:0,1:1,2:3,3:4");
    GpuDiscoverer.getInstance().initialize(conf);
    gpuResourceHandler.bootstrap(conf);
    Assert.assertEquals(4,gpuResourceHandler.getGpuAllocator().getAvailableGpus());
    Container nmContainer=mock(Container.class);
    ResourceMappings rmap=new ResourceMappings();
    ResourceMappings.AssignedResources ar=new ResourceMappings.AssignedResources();
    ar.updateAssignedResources(Arrays.asList(new GpuDevice(1,1),new GpuDevice(2,3)));
    rmap.addAssignedResources(ResourceInformation.GPU_URI,ar);
    when(nmContainer.getResourceMappings()).thenReturn(rmap);
    runningContainersMap.put(getContainerId(1),nmContainer);
    gpuResourceHandler.reacquireContainer(getContainerId(1));
    Map<GpuDevice,ContainerId> deviceAllocationMapping=gpuResourceHandler.getGpuAllocator().getDeviceAllocationMappingCopy();
    Assert.assertEquals(2,deviceAllocationMapping.size());
    Assert.assertTrue(deviceAllocationMapping.keySet().contains(new GpuDevice(1,1)));
    Assert.assertTrue(deviceAllocationMapping.keySet().contains(new GpuDevice(2,3)));
    Assert.assertEquals(deviceAllocationMapping.get(new GpuDevice(1,1)),getContainerId(1));
    nmContainer=mock(Container.class);
    rmap=new ResourceMappings();
    ar=new ResourceMappings.AssignedResources();
    ar.updateAssignedResources(Arrays.asList(new GpuDevice(3,4),new GpuDevice(4,5)));
    rmap.addAssignedResources(ResourceInformation.GPU_URI,ar);
    when(nmContainer.getResourceMappings()).thenReturn(rmap);
    runningContainersMap.put(getContainerId(2),nmContainer);
    boolean caughtException=false;
    try {
      gpuResourceHandler.reacquireContainer(getContainerId(1));
    }
 catch (    ResourceHandlerException e) {
      caughtException=true;
    }
    Assert.assertTrue("Should fail since requested device Id is not in allowed list",caughtException);
    deviceAllocationMapping=gpuResourceHandler.getGpuAllocator().getDeviceAllocationMappingCopy();
    Assert.assertEquals(2,deviceAllocationMapping.size());
    Assert.assertTrue(deviceAllocationMapping.keySet().containsAll(Arrays.asList(new GpuDevice(1,1),new GpuDevice(2,3))));
    Assert.assertEquals(deviceAllocationMapping.get(new GpuDevice(1,1)),getContainerId(1));
    nmContainer=mock(Container.class);
    rmap=new ResourceMappings();
    ar=new ResourceMappings.AssignedResources();
    ar.updateAssignedResources(Arrays.asList(new GpuDevice(3,4),new GpuDevice(2,3)));
    rmap.addAssignedResources("gpu",ar);
    when(nmContainer.getResourceMappings()).thenReturn(rmap);
    runningContainersMap.put(getContainerId(2),nmContainer);
    caughtException=false;
    try {
      gpuResourceHandler.reacquireContainer(getContainerId(1));
    }
 catch (    ResourceHandlerException e) {
      caughtException=true;
    }
    Assert.assertTrue("Should fail since requested device Id is not in allowed list",caughtException);
    deviceAllocationMapping=gpuResourceHandler.getGpuAllocator().getDeviceAllocationMappingCopy();
    Assert.assertEquals(2,deviceAllocationMapping.size());
    Assert.assertTrue(deviceAllocationMapping.keySet().containsAll(Arrays.asList(new GpuDevice(1,1),new GpuDevice(2,3))));
    Assert.assertEquals(deviceAllocationMapping.get(new GpuDevice(1,1)),getContainerId(1));
  }
}
