/** 
 * Tests for  {@link DatasetVolumeChecker} when the {@link FsVolumeSpi#check}method returns different values of  {@link VolumeCheckResult}.
 */
@RunWith(Parameterized.class) public class TestDatasetVolumeChecker {
  public static final Logger LOG=LoggerFactory.getLogger(TestDatasetVolumeChecker.class);
  @Rule public TestName testName=new TestName();
  /** 
 * Run each test case for each possible value of  {@link VolumeCheckResult}. Including "null" for 'throw exception'.
 * @return
 */
  @Parameters(name="{0}") public static Collection<Object[]> data(){
    List<Object[]> values=new ArrayList<>();
    for (    VolumeCheckResult result : VolumeCheckResult.values()) {
      values.add(new Object[]{result});
    }
    values.add(new Object[]{null});
    return values;
  }
  /** 
 * When null, the check call should throw an exception.
 */
  private final VolumeCheckResult expectedVolumeHealth;
  private static final int NUM_VOLUMES=2;
  public TestDatasetVolumeChecker(  VolumeCheckResult expectedVolumeHealth){
    this.expectedVolumeHealth=expectedVolumeHealth;
  }
  /** 
 * Test  {@link DatasetVolumeChecker#checkVolume} propagates thecheck to the delegate checker.
 * @throws Exception
 */
  @Test(timeout=10000) public void testCheckOneVolume() throws Exception {
    LOG.info("Executing {}",testName.getMethodName());
    final FsVolumeSpi volume=makeVolumes(1,expectedVolumeHealth).get(0);
    final DatasetVolumeChecker checker=new DatasetVolumeChecker(new HdfsConfiguration(),new FakeTimer());
    checker.setDelegateChecker(new DummyChecker());
    final AtomicLong numCallbackInvocations=new AtomicLong(0);
    boolean result=checker.checkVolume(volume,new DatasetVolumeChecker.Callback(){
      @Override public void call(      Set<FsVolumeSpi> healthyVolumes,      Set<FsVolumeSpi> failedVolumes){
        numCallbackInvocations.incrementAndGet();
        if (expectedVolumeHealth != null && expectedVolumeHealth != FAILED) {
          assertThat(healthyVolumes.size(),is(1));
          assertThat(failedVolumes.size(),is(0));
        }
 else {
          assertThat(healthyVolumes.size(),is(0));
          assertThat(failedVolumes.size(),is(1));
        }
      }
    }
);
    GenericTestUtils.waitFor(() -> numCallbackInvocations.get() > 0,5,10000);
    verify(volume,times(1)).check(anyObject());
    if (result) {
      assertThat(numCallbackInvocations.get(),is(1L));
    }
  }
  /** 
 * Test  {@link DatasetVolumeChecker#checkAllVolumes} propagateschecks for all volumes to the delegate checker.
 * @throws Exception
 */
  @Test(timeout=10000) public void testCheckAllVolumes() throws Exception {
    LOG.info("Executing {}",testName.getMethodName());
    final List<FsVolumeSpi> volumes=makeVolumes(NUM_VOLUMES,expectedVolumeHealth);
    final FsDatasetSpi<FsVolumeSpi> dataset=makeDataset(volumes);
    final DatasetVolumeChecker checker=new DatasetVolumeChecker(new HdfsConfiguration(),new FakeTimer());
    checker.setDelegateChecker(new DummyChecker());
    Set<FsVolumeSpi> failedVolumes=checker.checkAllVolumes(dataset);
    LOG.info("Got back {} failed volumes",failedVolumes.size());
    if (expectedVolumeHealth == null || expectedVolumeHealth == FAILED) {
      assertThat(failedVolumes.size(),is(NUM_VOLUMES));
    }
 else {
      assertTrue(failedVolumes.isEmpty());
    }
    for (    FsVolumeSpi volume : volumes) {
      verify(volume,times(1)).check(anyObject());
    }
  }
  /** 
 * A checker to wraps the result of  {@link FsVolumeSpi#check} inan ImmediateFuture.
 */
static class DummyChecker implements AsyncChecker<VolumeCheckContext,VolumeCheckResult> {
    @Override public Optional<ListenableFuture<VolumeCheckResult>> schedule(    Checkable<VolumeCheckContext,VolumeCheckResult> target,    VolumeCheckContext context){
      try {
        return Optional.of(Futures.immediateFuture(target.check(context)));
      }
 catch (      Exception e) {
        LOG.info("check routine threw exception " + e);
        return Optional.of(Futures.immediateFailedFuture(e));
      }
    }
    @Override public void shutdownAndWait(    long timeout,    TimeUnit timeUnit) throws InterruptedException {
    }
  }
  /** 
 * Create a dataset with the given volumes.
 */
  static FsDatasetSpi<FsVolumeSpi> makeDataset(  List<FsVolumeSpi> volumes) throws Exception {
    final FsDatasetSpi<FsVolumeSpi> dataset=mock(FsDatasetSpi.class);
    final FsDatasetSpi.FsVolumeReferences references=new FsDatasetSpi.FsVolumeReferences(volumes);
    when(dataset.getFsVolumeReferences()).thenReturn(references);
    return dataset;
  }
  static List<FsVolumeSpi> makeVolumes(  int numVolumes,  VolumeCheckResult health) throws Exception {
    final List<FsVolumeSpi> volumes=new ArrayList<>(numVolumes);
    for (int i=0; i < numVolumes; ++i) {
      final FsVolumeSpi volume=mock(FsVolumeSpi.class);
      final FsVolumeReference reference=mock(FsVolumeReference.class);
      final StorageLocation location=mock(StorageLocation.class);
      when(reference.getVolume()).thenReturn(volume);
      when(volume.obtainReference()).thenReturn(reference);
      when(volume.getStorageLocation()).thenReturn(location);
      if (health != null) {
        when(volume.check(anyObject())).thenReturn(health);
      }
 else {
        final DiskErrorException de=new DiskErrorException("Fake Exception");
        when(volume.check(anyObject())).thenThrow(de);
      }
      volumes.add(volume);
    }
    return volumes;
  }
}
