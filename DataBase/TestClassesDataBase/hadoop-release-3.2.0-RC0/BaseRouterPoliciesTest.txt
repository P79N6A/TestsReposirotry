/** 
 * Base class for router policies tests, tests for null input cases.
 */
public abstract class BaseRouterPoliciesTest extends BaseFederationPoliciesTest {
  @Test public void testNullQueueRouting() throws YarnException {
    FederationRouterPolicy localPolicy=(FederationRouterPolicy)getPolicy();
    ApplicationSubmissionContext applicationSubmissionContext=ApplicationSubmissionContext.newInstance(null,null,null,null,null,false,false,0,Resources.none(),null,false,null,null);
    SubClusterId chosen=localPolicy.getHomeSubcluster(applicationSubmissionContext,null);
    Assert.assertNotNull(chosen);
  }
  @Test(expected=FederationPolicyException.class) public void testNullAppContext() throws YarnException {
    ((FederationRouterPolicy)getPolicy()).getHomeSubcluster(null,null);
  }
  @Test public void testBlacklistSubcluster() throws YarnException {
    FederationRouterPolicy localPolicy=(FederationRouterPolicy)getPolicy();
    ApplicationSubmissionContext applicationSubmissionContext=ApplicationSubmissionContext.newInstance(null,null,null,null,null,false,false,0,Resources.none(),null,false,null,null);
    Map<SubClusterId,SubClusterInfo> activeSubClusters=getActiveSubclusters();
    if (activeSubClusters != null && activeSubClusters.size() > 1 && !(localPolicy instanceof RejectRouterPolicy)) {
      Random random=new Random();
      List<SubClusterId> blacklistSubclusters=new ArrayList<SubClusterId>(activeSubClusters.keySet());
      SubClusterId removed=blacklistSubclusters.remove(random.nextInt(blacklistSubclusters.size()));
      getPolicyInfo().getRouterPolicyWeights().put(new SubClusterIdInfo(removed),1.0f);
      FederationPoliciesTestUtil.initializePolicyContext(getPolicy(),getPolicyInfo(),getActiveSubclusters());
      SubClusterId chosen=localPolicy.getHomeSubcluster(applicationSubmissionContext,blacklistSubclusters);
      Assert.assertNotNull(chosen);
      Assert.assertEquals(removed,chosen);
    }
  }
  /** 
 * This test validates the correctness of blacklist logic in case the cluster has no active subclusters.
 */
  @Test public void testAllBlacklistSubcluster() throws YarnException {
    FederationRouterPolicy localPolicy=(FederationRouterPolicy)getPolicy();
    ApplicationSubmissionContext applicationSubmissionContext=ApplicationSubmissionContext.newInstance(null,null,null,null,null,false,false,0,Resources.none(),null,false,null,null);
    Map<SubClusterId,SubClusterInfo> activeSubClusters=getActiveSubclusters();
    if (activeSubClusters != null && activeSubClusters.size() > 1 && !(localPolicy instanceof RejectRouterPolicy)) {
      List<SubClusterId> blacklistSubclusters=new ArrayList<SubClusterId>(activeSubClusters.keySet());
      try {
        localPolicy.getHomeSubcluster(applicationSubmissionContext,blacklistSubclusters);
        Assert.fail();
      }
 catch (      YarnException e) {
        Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));
      }
    }
  }
}
