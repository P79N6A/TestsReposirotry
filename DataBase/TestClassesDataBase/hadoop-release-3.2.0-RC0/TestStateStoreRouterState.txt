/** 
 * Test the basic  {@link StateStoreService} {@link RouterStore} functionality.
 */
public class TestStateStoreRouterState extends TestStateStoreBase {
  private static RouterStore routerStore;
  @BeforeClass public static void create(){
    getConf().setTimeDuration(RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,5,TimeUnit.SECONDS);
  }
  @Before public void setup() throws IOException, InterruptedException {
    if (routerStore == null) {
      routerStore=getStateStore().getRegisteredRecordStore(RouterStore.class);
    }
    assertTrue(clearRecords(getStateStore(),RouterState.class));
  }
  @Test public void testStateStoreDisconnected() throws Exception {
    getStateStore().closeDriver();
    assertEquals(false,getStateStore().isDriverReady());
    GetRouterRegistrationRequest getSingleRequest=GetRouterRegistrationRequest.newInstance();
    verifyException(routerStore,"getRouterRegistration",StateStoreUnavailableException.class,new Class[]{GetRouterRegistrationRequest.class},new Object[]{getSingleRequest});
    GetRouterRegistrationsRequest getRequest=GetRouterRegistrationsRequest.newInstance();
    routerStore.loadCache(true);
    verifyException(routerStore,"getRouterRegistrations",StateStoreUnavailableException.class,new Class[]{GetRouterRegistrationsRequest.class},new Object[]{getRequest});
    RouterHeartbeatRequest hbRequest=RouterHeartbeatRequest.newInstance(RouterState.newInstance("test",0,RouterServiceState.UNINITIALIZED));
    verifyException(routerStore,"routerHeartbeat",StateStoreUnavailableException.class,new Class[]{RouterHeartbeatRequest.class},new Object[]{hbRequest});
  }
  @Test public void testUpdateRouterStatus() throws IllegalStateException, IOException {
    long dateStarted=Time.now();
    String address="testaddress";
    RouterHeartbeatRequest request=RouterHeartbeatRequest.newInstance(RouterState.newInstance(address,dateStarted,RouterServiceState.RUNNING));
    assertTrue(routerStore.routerHeartbeat(request).getStatus());
    GetRouterRegistrationRequest getRequest=GetRouterRegistrationRequest.newInstance(address);
    RouterState record=routerStore.getRouterRegistration(getRequest).getRouter();
    assertNotNull(record);
    assertEquals(RouterServiceState.RUNNING,record.getStatus());
    assertEquals(address,record.getAddress());
    assertEquals(FederationUtil.getCompileInfo(),record.getCompileInfo());
    assertFalse(record.getVersion().isEmpty());
  }
  @Test public void testRouterStateExpired() throws IOException, InterruptedException {
    long dateStarted=Time.now();
    String address="testaddress";
    RouterHeartbeatRequest request=RouterHeartbeatRequest.newInstance(RouterState.newInstance(address,dateStarted,RouterServiceState.RUNNING));
    assertTrue(routerStore.routerHeartbeat(request).getStatus());
    GetRouterRegistrationRequest getRequest=GetRouterRegistrationRequest.newInstance(address);
    RouterState record=routerStore.getRouterRegistration(getRequest).getRouter();
    assertNotNull(record);
    Thread.sleep(6000);
    RouterState r=routerStore.getRouterRegistration(getRequest).getRouter();
    assertEquals(RouterServiceState.EXPIRED,r.getStatus());
    assertTrue(routerStore.routerHeartbeat(request).getStatus());
    r=routerStore.getRouterRegistration(getRequest).getRouter();
    assertEquals(RouterServiceState.RUNNING,r.getStatus());
  }
  @Test public void testGetAllRouterStates() throws StateStoreUnavailableException, IOException {
    RouterHeartbeatRequest heartbeatRequest1=RouterHeartbeatRequest.newInstance(RouterState.newInstance("testaddress1",Time.now(),RouterServiceState.RUNNING));
    assertTrue(routerStore.routerHeartbeat(heartbeatRequest1).getStatus());
    RouterHeartbeatRequest heartbeatRequest2=RouterHeartbeatRequest.newInstance(RouterState.newInstance("testaddress2",Time.now(),RouterServiceState.RUNNING));
    assertTrue(routerStore.routerHeartbeat(heartbeatRequest2).getStatus());
    routerStore.loadCache(true);
    GetRouterRegistrationsRequest request=GetRouterRegistrationsRequest.newInstance();
    List<RouterState> entries=routerStore.getRouterRegistrations(request).getRouters();
    assertEquals(2,entries.size());
    Collections.sort(entries);
    assertEquals("testaddress1",entries.get(0).getAddress());
    assertEquals("testaddress2",entries.get(1).getAddress());
    assertEquals(RouterServiceState.RUNNING,entries.get(0).getStatus());
    assertEquals(RouterServiceState.RUNNING,entries.get(1).getStatus());
  }
}
