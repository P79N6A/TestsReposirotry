public class TestBlockPoolManager {
  private static final Logger LOG=LoggerFactory.getLogger(TestBlockPoolManager.class);
  private final DataNode mockDN=Mockito.mock(DataNode.class);
  private BlockPoolManager bpm;
  private final StringBuilder log=new StringBuilder();
  private int mockIdx=1;
  @Before public void setupBPM(){
    bpm=new BlockPoolManager(mockDN){
      @Override protected BPOfferService createBPOS(      final String nameserviceId,      List<InetSocketAddress> nnAddrs,      List<InetSocketAddress> lifelineNnAddrs){
        final int idx=mockIdx++;
        doLog("create #" + idx);
        final BPOfferService bpos=Mockito.mock(BPOfferService.class);
        Mockito.doReturn("Mock BPOS #" + idx).when(bpos).toString();
        try {
          Mockito.doAnswer(new Answer<Void>(){
            @Override public Void answer(            InvocationOnMock invocation) throws Throwable {
              doLog("refresh #" + idx);
              return null;
            }
          }
).when(bpos).refreshNNList(Mockito.<ArrayList<InetSocketAddress>>any(),Mockito.<ArrayList<InetSocketAddress>>any());
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        Mockito.doAnswer(new Answer<Void>(){
          @Override public Void answer(          InvocationOnMock invocation) throws Throwable {
            doLog("stop #" + idx);
            bpm.remove(bpos);
            return null;
          }
        }
).when(bpos).stop();
        return bpos;
      }
    }
;
  }
  private void doLog(  String string){
synchronized (log) {
      LOG.info(string);
      log.append(string).append("\n");
    }
  }
  @Test public void testSimpleSingleNS() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY,"hdfs://mock1:8020");
    bpm.refreshNamenodes(conf);
    assertEquals("create #1\n",log.toString());
  }
  @Test public void testFederationRefresh() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1,ns2");
    addNN(conf,"ns1","mock1:8020");
    addNN(conf,"ns2","mock1:8020");
    bpm.refreshNamenodes(conf);
    assertEquals("create #1\n" + "create #2\n",log.toString());
    log.setLength(0);
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns2");
    bpm.refreshNamenodes(conf);
    assertEquals("stop #1\n" + "refresh #2\n",log.toString());
    log.setLength(0);
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1,ns2");
    bpm.refreshNamenodes(conf);
    assertEquals("create #3\n" + "refresh #2\n",log.toString());
  }
  @Test public void testInternalNameService() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1,ns2,ns3");
    addNN(conf,"ns1","mock1:8020");
    addNN(conf,"ns2","mock1:8020");
    addNN(conf,"ns3","mock1:8020");
    conf.set(DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY,"ns1");
    bpm.refreshNamenodes(conf);
    assertEquals("create #1\n",log.toString());
    @SuppressWarnings("unchecked") Map<String,BPOfferService> map=(Map<String,BPOfferService>)Whitebox.getInternalState(bpm,"bpByNameserviceId");
    Assert.assertFalse(map.containsKey("ns2"));
    Assert.assertFalse(map.containsKey("ns3"));
    Assert.assertTrue(map.containsKey("ns1"));
    log.setLength(0);
  }
  private static void addNN(  Configuration conf,  String ns,  String addr){
    String key=DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY,ns);
    conf.set(key,addr);
  }
}
