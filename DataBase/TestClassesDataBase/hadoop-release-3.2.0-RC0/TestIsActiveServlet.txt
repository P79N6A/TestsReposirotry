/** 
 * Test if the  {@link IsActiveServlet} returns the right answer if theunderlying service is active.
 */
public class TestIsActiveServlet {
  private IsActiveServlet servlet;
  private HttpServletRequest req;
  private HttpServletResponse resp;
  private ByteArrayOutputStream respOut;
  @Before public void setUp() throws Exception {
    req=mock(HttpServletRequest.class);
    resp=mock(HttpServletResponse.class);
    respOut=new ByteArrayOutputStream();
    PrintWriter writer=new PrintWriter(respOut);
    when(resp.getWriter()).thenReturn(writer);
  }
  @Test public void testSucceedsOnActive() throws IOException {
    servlet=new IsActiveServlet(){
      @Override protected boolean isActive(){
        return true;
      }
    }
;
    String response=doGet();
    verify(resp,never()).sendError(anyInt(),anyString());
    assertEquals(IsActiveServlet.RESPONSE_ACTIVE,response);
  }
  @Test public void testFailsOnInactive() throws IOException {
    servlet=new IsActiveServlet(){
      @Override protected boolean isActive(){
        return false;
      }
    }
;
    doGet();
    verify(resp,atLeastOnce()).sendError(eq(HttpServletResponse.SC_METHOD_NOT_ALLOWED),eq(IsActiveServlet.RESPONSE_NOT_ACTIVE));
  }
  private String doGet() throws IOException {
    servlet.doGet(req,resp);
    return new String(respOut.toByteArray(),"UTF-8");
  }
}
