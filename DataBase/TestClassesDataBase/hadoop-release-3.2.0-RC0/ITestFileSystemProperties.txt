/** 
 * Test FileSystemProperties.
 */
public class ITestFileSystemProperties extends AbstractAbfsIntegrationTest {
  private static final int TEST_DATA=100;
  private static final Path TEST_PATH=new Path("/testfile");
  public ITestFileSystemProperties() throws Exception {
  }
  @Test public void testReadWriteBytesToFileAndEnsureThreadPoolCleanup() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    testWriteOneByteToFileAndEnsureThreadPoolCleanup();
    try (FSDataInputStream inputStream=fs.open(TEST_PATH,4 * 1024 * 1024)){
      int i=inputStream.read();
      assertEquals(TEST_DATA,i);
    }
   }
  @Test public void testWriteOneByteToFileAndEnsureThreadPoolCleanup() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    try (FSDataOutputStream stream=fs.create(TEST_PATH)){
      stream.write(TEST_DATA);
    }
     FileStatus fileStatus=fs.getFileStatus(TEST_PATH);
    assertEquals(1,fileStatus.getLen());
  }
  @Test public void testBase64FileSystemProperties() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final Hashtable<String,String> properties=new Hashtable<>();
    properties.put("key","{ value: value }");
    fs.getAbfsStore().setFilesystemProperties(properties);
    Hashtable<String,String> fetchedProperties=fs.getAbfsStore().getFilesystemProperties();
    assertEquals(properties,fetchedProperties);
  }
  @Test public void testBase64PathProperties() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final Hashtable<String,String> properties=new Hashtable<>();
    properties.put("key","{ value: valueTest }");
    touch(TEST_PATH);
    fs.getAbfsStore().setPathProperties(TEST_PATH,properties);
    Hashtable<String,String> fetchedProperties=fs.getAbfsStore().getPathProperties(TEST_PATH);
    assertEquals(properties,fetchedProperties);
  }
  @Test(expected=Exception.class) public void testBase64InvalidFileSystemProperties() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final Hashtable<String,String> properties=new Hashtable<>();
    properties.put("key","{ value: value歲 }");
    fs.getAbfsStore().setFilesystemProperties(properties);
    Hashtable<String,String> fetchedProperties=fs.getAbfsStore().getFilesystemProperties();
    assertEquals(properties,fetchedProperties);
  }
  @Test(expected=Exception.class) public void testBase64InvalidPathProperties() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final Hashtable<String,String> properties=new Hashtable<>();
    properties.put("key","{ value: valueTest兩 }");
    touch(TEST_PATH);
    fs.getAbfsStore().setPathProperties(TEST_PATH,properties);
    Hashtable<String,String> fetchedProperties=fs.getAbfsStore().getPathProperties(TEST_PATH);
    assertEquals(properties,fetchedProperties);
  }
  @Test public void testSetFileSystemProperties() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final Hashtable<String,String> properties=new Hashtable<>();
    properties.put("containerForDevTest","true");
    fs.getAbfsStore().setFilesystemProperties(properties);
    Hashtable<String,String> fetchedProperties=fs.getAbfsStore().getFilesystemProperties();
    assertEquals(properties,fetchedProperties);
  }
}
