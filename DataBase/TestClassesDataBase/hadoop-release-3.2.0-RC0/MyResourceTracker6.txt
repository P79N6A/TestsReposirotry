private class MyResourceTracker6 implements ResourceTracker {
  private long rmStartIntervalMS;
  private boolean rmNeverStart;
  private final long waitStartTime;
  public MyResourceTracker6(  long rmStartIntervalMS,  boolean rmNeverStart){
    this.rmStartIntervalMS=rmStartIntervalMS;
    this.rmNeverStart=rmNeverStart;
    this.waitStartTime=System.currentTimeMillis();
  }
  @Override public RegisterNodeManagerResponse registerNodeManager(  RegisterNodeManagerRequest request) throws YarnException, IOException, IOException {
    if (System.currentTimeMillis() - waitStartTime <= rmStartIntervalMS || rmNeverStart) {
      throw new java.net.ConnectException("Faking RM start failure as start " + "delay timer has not expired.");
    }
 else {
      NodeId nodeId=request.getNodeId();
      Resource resource=request.getResource();
      LOG.info("Registering " + nodeId.toString());
      InetSocketAddress expected=NetUtils.getConnectAddress(conf.getSocketAddr(YarnConfiguration.NM_ADDRESS,null,-1));
      Assert.assertEquals(NetUtils.getHostPortString(expected),nodeId.toString());
      Assert.assertEquals(5 * 1024,resource.getMemorySize());
      registeredNodes.add(nodeId);
      RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
      triggered=true;
      return response;
    }
  }
  @Override public NodeHeartbeatResponse nodeHeartbeat(  NodeHeartbeatRequest request) throws YarnException, IOException {
    NodeStatus nodeStatus=request.getNodeStatus();
    nodeStatus.setResponseId(heartBeatID++);
    NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,NodeAction.NORMAL,null,null,null,null,1000L);
    return nhResponse;
  }
  @Override public UnRegisterNodeManagerResponse unRegisterNodeManager(  UnRegisterNodeManagerRequest request) throws YarnException, IOException {
    return recordFactory.newRecordInstance(UnRegisterNodeManagerResponse.class);
  }
}
