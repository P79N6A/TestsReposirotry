/** 
 * Tests which look at fsck recovery.
 */
public class TestWasbFsck extends AbstractWasbTestWithTimeout {
  private AzureBlobStorageTestAccount testAccount;
  private FileSystem fs;
  private InMemoryBlockBlobStore backingStore;
  @Before public void setUp() throws Exception {
    testAccount=AzureBlobStorageTestAccount.createMock();
    fs=testAccount.getFileSystem();
    backingStore=testAccount.getMockStorage().getBackingStore();
  }
  @After public void tearDown() throws Exception {
    testAccount.cleanup();
    fs=null;
    backingStore=null;
  }
  /** 
 * Counts the number of temporary blobs in the backing store.
 */
  private int getNumTempBlobs(){
    int count=0;
    for (    String key : backingStore.getKeys()) {
      if (key.contains(NativeAzureFileSystem.AZURE_TEMP_FOLDER)) {
        count++;
      }
    }
    return count;
  }
  /** 
 * Tests that we recover files properly
 */
  @Test @Ignore public void testRecover() throws Exception {
    Path danglingFile=new Path("/crashedInTheMiddle");
    FSDataOutputStream stream=fs.create(danglingFile);
    stream.write(new byte[]{1,2,3});
    stream.flush();
    FileStatus fileStatus=fs.getFileStatus(danglingFile);
    assertNotNull(fileStatus);
    assertEquals(0,fileStatus.getLen());
    assertEquals(1,getNumTempBlobs());
    runFsck("-move");
    fileStatus=fs.getFileStatus(new Path("/lost+found",danglingFile.getName()));
    assertNotNull(fileStatus);
    assertEquals(3,fileStatus.getLen());
    assertEquals(0,getNumTempBlobs());
    assertFalse(fs.exists(danglingFile));
  }
  private void runFsck(  String command) throws Exception {
    Configuration conf=fs.getConf();
    conf.setInt(NativeAzureFileSystem.AZURE_TEMP_EXPIRY_PROPERTY_NAME,0);
    WasbFsck fsck=new WasbFsck(conf);
    fsck.setMockFileSystemForTesting(fs);
    fsck.run(new String[]{AzureBlobStorageTestAccount.MOCK_WASB_URI,command});
  }
  /** 
 * Tests that we delete dangling files properly
 */
  @Test public void testDelete() throws Exception {
    Path danglingFile=new Path("/crashedInTheMiddle");
    FSDataOutputStream stream=fs.create(danglingFile);
    stream.write(new byte[]{1,2,3});
    stream.flush();
    FileStatus fileStatus=fs.getFileStatus(danglingFile);
    assertNotNull(fileStatus);
    assertEquals(0,fileStatus.getLen());
    assertEquals(1,getNumTempBlobs());
    runFsck("-delete");
    assertEquals(0,getNumTempBlobs());
    assertFalse(fs.exists(danglingFile));
  }
}
