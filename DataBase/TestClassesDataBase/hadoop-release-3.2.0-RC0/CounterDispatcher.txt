private static class CounterDispatcher extends AsyncDispatcher {
  private Map<ApplicationId,Integer> counts=new HashMap<ApplicationId,Integer>();
  @SuppressWarnings("rawtypes") @Override protected void dispatch(  Event event){
    if (event instanceof WritingApplicationHistoryEvent) {
      WritingApplicationHistoryEvent ashEvent=(WritingApplicationHistoryEvent)event;
switch (ashEvent.getType()) {
case APP_START:
        incrementCounts(((WritingApplicationStartEvent)event).getApplicationId());
      break;
case APP_FINISH:
    incrementCounts(((WritingApplicationFinishEvent)event).getApplicationId());
  break;
case APP_ATTEMPT_START:
incrementCounts(((WritingApplicationAttemptStartEvent)event).getApplicationAttemptId().getApplicationId());
break;
case APP_ATTEMPT_FINISH:
incrementCounts(((WritingApplicationAttemptFinishEvent)event).getApplicationAttemptId().getApplicationId());
break;
case CONTAINER_START:
incrementCounts(((WritingContainerStartEvent)event).getContainerId().getApplicationAttemptId().getApplicationId());
break;
case CONTAINER_FINISH:
incrementCounts(((WritingContainerFinishEvent)event).getContainerId().getApplicationAttemptId().getApplicationId());
break;
}
}
super.dispatch(event);
}
private void incrementCounts(ApplicationId appId){
Integer val=counts.get(appId);
if (val == null) {
counts.put(appId,1);
}
 else {
counts.put(appId,val + 1);
}
}
}
