public class TestTeraSort extends HadoopTestCase {
  private static final Logger LOG=LoggerFactory.getLogger(TestTeraSort.class);
  public TestTeraSort() throws IOException {
    super(LOCAL_MR,LOCAL_FS,1,1);
  }
  @After public void tearDown() throws Exception {
    getFileSystem().delete(TEST_DIR,true);
    super.tearDown();
  }
  private static final Path TEST_DIR=new Path(new File(System.getProperty("test.build.data","/tmp"),"terasort").getAbsoluteFile().toURI().toString());
  private static final Path SORT_INPUT_PATH=new Path(TEST_DIR,"sortin");
  private static final Path SORT_OUTPUT_PATH=new Path(TEST_DIR,"sortout");
  private static final Path TERA_OUTPUT_PATH=new Path(TEST_DIR,"validate");
  private static final String NUM_ROWS="100";
  private void runTeraGen(  Configuration conf,  Path sortInput) throws Exception {
    String[] genArgs={NUM_ROWS,sortInput.toString()};
    assertEquals(ToolRunner.run(conf,new TeraGen(),genArgs),0);
  }
  private void runTeraSort(  Configuration conf,  Path sortInput,  Path sortOutput) throws Exception {
    String[] sortArgs={sortInput.toString(),sortOutput.toString()};
    assertEquals(ToolRunner.run(conf,new TeraSort(),sortArgs),0);
  }
  private void runTeraValidator(  Configuration job,  Path sortOutput,  Path valOutput) throws Exception {
    String[] svArgs={sortOutput.toString(),valOutput.toString()};
    assertEquals(ToolRunner.run(job,new TeraValidate(),svArgs),0);
  }
  @Test public void testTeraSort() throws Exception {
    runTeraGen(createJobConf(),SORT_INPUT_PATH);
    try {
      runTeraGen(createJobConf(),SORT_INPUT_PATH);
      fail("Teragen output overwritten!");
    }
 catch (    FileAlreadyExistsException fae) {
      LOG.info("Expected exception: ",fae);
    }
    runTeraSort(createJobConf(),SORT_INPUT_PATH,SORT_OUTPUT_PATH);
    try {
      runTeraSort(createJobConf(),SORT_INPUT_PATH,SORT_OUTPUT_PATH);
      fail("Terasort output overwritten!");
    }
 catch (    FileAlreadyExistsException fae) {
      LOG.info("Expected exception: ",fae);
    }
    runTeraValidator(createJobConf(),SORT_OUTPUT_PATH,TERA_OUTPUT_PATH);
  }
  @Test public void testTeraSortWithLessThanTwoArgs() throws Exception {
    String[] args=new String[1];
    assertEquals(new TeraSort().run(args),2);
  }
}
