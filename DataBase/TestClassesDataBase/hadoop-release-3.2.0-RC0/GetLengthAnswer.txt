private static class GetLengthAnswer implements Answer<GetReplicaVisibleLengthResponseProto> {
  final BlockTokenSecretManager sm;
  final BlockTokenIdentifier ident;
  public GetLengthAnswer(  BlockTokenSecretManager sm,  BlockTokenIdentifier ident){
    this.sm=sm;
    this.ident=ident;
  }
  @Override public GetReplicaVisibleLengthResponseProto answer(  InvocationOnMock invocation) throws IOException {
    Object args[]=invocation.getArguments();
    assertEquals(2,args.length);
    GetReplicaVisibleLengthRequestProto req=(GetReplicaVisibleLengthRequestProto)args[1];
    Set<TokenIdentifier> tokenIds=UserGroupInformation.getCurrentUser().getTokenIdentifiers();
    assertEquals("Only one BlockTokenIdentifier expected",1,tokenIds.size());
    long result=0;
    for (    TokenIdentifier tokenId : tokenIds) {
      BlockTokenIdentifier id=(BlockTokenIdentifier)tokenId;
      LOG.info("Got: " + id.toString());
      assertTrue("Received BlockTokenIdentifier is wrong",ident.equals(id));
      sm.checkAccess(id,null,PBHelperClient.convert(req.getBlock()),BlockTokenIdentifier.AccessMode.WRITE,new StorageType[]{StorageType.DEFAULT},null);
      result=id.getBlockId();
    }
    return GetReplicaVisibleLengthResponseProto.newBuilder().setLength(result).build();
  }
}
