/** 
 * Tests that block storage movement attempt failures are reported from DN and processed them correctly or not.
 */
public class TestBlockStorageMovementAttemptedItems {
  private BlockStorageMovementAttemptedItems bsmAttemptedItems;
  private BlockStorageMovementNeeded unsatisfiedStorageMovementFiles;
  private final int selfRetryTimeout=500;
  @Before public void setup() throws Exception {
    Configuration config=new HdfsConfiguration();
    Context ctxt=Mockito.mock(ExternalSPSContext.class);
    SPSService sps=new StoragePolicySatisfier(config);
    Mockito.when(ctxt.isRunning()).thenReturn(true);
    Mockito.when(ctxt.isInSafeMode()).thenReturn(false);
    Mockito.when(ctxt.isFileExist(Mockito.anyLong())).thenReturn(true);
    unsatisfiedStorageMovementFiles=new BlockStorageMovementNeeded(ctxt);
    bsmAttemptedItems=new BlockStorageMovementAttemptedItems(sps,unsatisfiedStorageMovementFiles,ctxt);
  }
  @After public void teardown(){
    if (bsmAttemptedItems != null) {
      bsmAttemptedItems.stop();
      bsmAttemptedItems.stopGracefully();
    }
  }
  private boolean checkItemMovedForRetry(  Long item,  long retryTimeout) throws InterruptedException {
    long stopTime=monotonicNow() + (retryTimeout * 2);
    boolean isItemFound=false;
    while (monotonicNow() < (stopTime)) {
      ItemInfo ele=null;
      while ((ele=unsatisfiedStorageMovementFiles.get()) != null) {
        if (item == ele.getFile()) {
          isItemFound=true;
          break;
        }
      }
      if (!isItemFound) {
        Thread.sleep(100);
      }
 else {
        break;
      }
    }
    return isItemFound;
  }
  /** 
 * Verify that moved blocks reporting should queued up the block info.
 */
  @Test(timeout=30000) public void testAddReportedMoveAttemptFinishedBlocks() throws Exception {
    Long item=new Long(1234);
    Block block=new Block(item);
    DatanodeInfo dnInfo=DFSTestUtil.getLocalDatanodeInfo(9867);
    Set<StorageTypeNodePair> locs=new HashSet<>();
    locs.add(new StorageTypeNodePair(StorageType.ARCHIVE,dnInfo));
    Map<Block,Set<StorageTypeNodePair>> blocksMap=new HashMap<>();
    blocksMap.put(block,locs);
    bsmAttemptedItems.add(0L,0L,0L,blocksMap,0);
    bsmAttemptedItems.notifyReportedBlock(dnInfo,StorageType.ARCHIVE,block);
    assertEquals("Failed to receive result!",1,bsmAttemptedItems.getMovementFinishedBlocksCount());
  }
  /** 
 * Verify empty moved blocks reporting queue.
 */
  @Test(timeout=30000) public void testNoBlockMovementAttemptFinishedReportAdded() throws Exception {
    bsmAttemptedItems.start();
    Long item=new Long(1234);
    Block block=new Block(item);
    DatanodeInfo dnInfo=DFSTestUtil.getLocalDatanodeInfo(9867);
    Set<StorageTypeNodePair> locs=new HashSet<>();
    locs.add(new StorageTypeNodePair(StorageType.ARCHIVE,dnInfo));
    Map<Block,Set<StorageTypeNodePair>> blocksMap=new HashMap<>();
    blocksMap.put(block,locs);
    bsmAttemptedItems.add(0L,0L,0L,blocksMap,0);
    assertEquals("Shouldn't receive result",0,bsmAttemptedItems.getMovementFinishedBlocksCount());
    assertEquals("Item doesn't exist in the attempted list",1,bsmAttemptedItems.getAttemptedItemsCount());
  }
  /** 
 * Partial block movement with BlockMovementStatus#DN_BLK_STORAGE_MOVEMENT_SUCCESS. Here, first occurrence is #blockStorageMovementReportedItemsCheck() and then #blocksStorageMovementUnReportedItemsCheck().
 */
  @Test(timeout=30000) public void testPartialBlockMovementShouldBeRetried1() throws Exception {
    Long item=new Long(1234);
    Block block1=new Block(item);
    Block block2=new Block(5678L);
    Long trackID=0L;
    DatanodeInfo dnInfo=DFSTestUtil.getLocalDatanodeInfo(9867);
    Set<StorageTypeNodePair> locs=new HashSet<>();
    locs.add(new StorageTypeNodePair(StorageType.ARCHIVE,dnInfo));
    Map<Block,Set<StorageTypeNodePair>> blocksMap=new HashMap<>();
    blocksMap.put(block1,locs);
    blocksMap.put(block2,locs);
    bsmAttemptedItems.add(trackID,trackID,0L,blocksMap,0);
    bsmAttemptedItems.notifyReportedBlock(dnInfo,StorageType.ARCHIVE,block1);
    bsmAttemptedItems.start();
    assertTrue("Failed to add to the retry list",checkItemMovedForRetry(trackID,5000));
    assertEquals("Failed to remove from the attempted list",0,bsmAttemptedItems.getAttemptedItemsCount());
  }
  /** 
 * Partial block movement. Here, first occurrence is #blocksStorageMovementUnReportedItemsCheck() and then #blockStorageMovementReportedItemsCheck().
 */
  @Test(timeout=30000) public void testPartialBlockMovementShouldBeRetried2() throws Exception {
    Long item=new Long(1234);
    Block block=new Block(item);
    Long trackID=0L;
    DatanodeInfo dnInfo=DFSTestUtil.getLocalDatanodeInfo(9867);
    Set<StorageTypeNodePair> locs=new HashSet<>();
    locs.add(new StorageTypeNodePair(StorageType.ARCHIVE,dnInfo));
    Map<Block,Set<StorageTypeNodePair>> blocksMap=new HashMap<>();
    blocksMap.put(block,locs);
    bsmAttemptedItems.add(trackID,trackID,0L,blocksMap,0);
    bsmAttemptedItems.notifyReportedBlock(dnInfo,StorageType.ARCHIVE,block);
    Thread.sleep(selfRetryTimeout * 2);
    bsmAttemptedItems.blocksStorageMovementUnReportedItemsCheck();
    bsmAttemptedItems.blockStorageMovementReportedItemsCheck();
    assertTrue("Failed to add to the retry list",checkItemMovedForRetry(trackID,5000));
    assertEquals("Failed to remove from the attempted list",0,bsmAttemptedItems.getAttemptedItemsCount());
  }
  /** 
 * Partial block movement with only BlocksStorageMoveAttemptFinished report and storageMovementAttemptedItems list is empty.
 */
  @Test(timeout=30000) public void testPartialBlockMovementWithEmptyAttemptedQueue() throws Exception {
    Long item=new Long(1234);
    Block block=new Block(item);
    Long trackID=0L;
    DatanodeInfo dnInfo=DFSTestUtil.getLocalDatanodeInfo(9867);
    Set<StorageTypeNodePair> locs=new HashSet<>();
    locs.add(new StorageTypeNodePair(StorageType.ARCHIVE,dnInfo));
    Map<Block,Set<StorageTypeNodePair>> blocksMap=new HashMap<>();
    blocksMap.put(block,locs);
    bsmAttemptedItems.add(trackID,trackID,0L,blocksMap,0);
    bsmAttemptedItems.notifyReportedBlock(dnInfo,StorageType.ARCHIVE,block);
    assertFalse("Should not add in queue again if it is not there in" + " storageMovementAttemptedItems",checkItemMovedForRetry(trackID,5000));
    assertEquals("Failed to remove from the attempted list",1,bsmAttemptedItems.getAttemptedItemsCount());
  }
}
