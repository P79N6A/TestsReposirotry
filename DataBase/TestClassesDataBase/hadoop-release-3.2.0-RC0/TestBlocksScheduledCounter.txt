/** 
 * This class tests DatanodeDescriptor.getBlocksScheduled() at the NameNode. This counter is supposed to keep track of blocks currently scheduled to a datanode.
 */
public class TestBlocksScheduledCounter {
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  @After public void tearDown() throws IOException {
    if (fs != null) {
      fs.close();
      fs=null;
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testBlocksScheduledCounter() throws IOException {
    cluster=new MiniDFSCluster.Builder(new HdfsConfiguration()).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    FSDataOutputStream out=fs.create(new Path("/testBlockScheduledCounter"));
    for (int i=0; i < 1024; i++) {
      out.write(i);
    }
    out.hflush();
    ArrayList<DatanodeDescriptor> dnList=new ArrayList<DatanodeDescriptor>();
    final DatanodeManager dm=cluster.getNamesystem().getBlockManager().getDatanodeManager();
    dm.fetchDatanodes(dnList,dnList,false);
    DatanodeDescriptor dn=dnList.get(0);
    assertEquals(1,dn.getBlocksScheduled());
    out.close();
    assertEquals(0,dn.getBlocksScheduled());
  }
  /** 
 * Abandon block should decrement the scheduledBlocks count for the dataNode.
 */
  @Test public void testScheduledBlocksCounterShouldDecrementOnAbandonBlock() throws Exception {
    cluster=new MiniDFSCluster.Builder(new HdfsConfiguration()).numDataNodes(2).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    DatanodeManager datanodeManager=cluster.getNamesystem().getBlockManager().getDatanodeManager();
    ArrayList<DatanodeDescriptor> dnList=new ArrayList<DatanodeDescriptor>();
    datanodeManager.fetchDatanodes(dnList,dnList,false);
    for (    DatanodeDescriptor descriptor : dnList) {
      assertEquals("Blocks scheduled should be 0 for " + descriptor.getName(),0,descriptor.getBlocksScheduled());
    }
    cluster.getDataNodes().get(0).shutdown();
    FSDataOutputStream out=fs.create(new Path("/testBlockScheduledCounter"),(short)2);
    for (int i=0; i < 1024; i++) {
      out.write(i);
    }
    out.hflush();
    DatanodeDescriptor abandonedDn=datanodeManager.getDatanode(cluster.getDataNodes().get(0).getDatanodeId());
    assertEquals("for the abandoned dn scheduled counts should be 0",0,abandonedDn.getBlocksScheduled());
    for (    DatanodeDescriptor descriptor : dnList) {
      if (descriptor.equals(abandonedDn)) {
        continue;
      }
      assertEquals("Blocks scheduled should be 1 for " + descriptor.getName(),1,descriptor.getBlocksScheduled());
    }
    out.close();
    for (    DatanodeDescriptor descriptor : dnList) {
      assertEquals("Blocks scheduled should be 0 for " + descriptor.getName(),0,descriptor.getBlocksScheduled());
    }
  }
}
