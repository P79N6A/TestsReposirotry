/** 
 * This is the full filesystem contract test -which requires the Default config set up to point to a filesystem. Some of the tests override the base class tests -these are where SwiftFS does not implement those features, or when the behavior of SwiftFS does not match the normal contract -which normally means that directories and equal files are being treated as equal.
 */
public class TestSwiftFileSystemContract extends FileSystemContractBaseTest {
  private static final Logger LOG=LoggerFactory.getLogger(TestSwiftFileSystemContract.class);
  /** 
 * Override this if the filesystem is not case sensitive
 * @return true if the case detection/preservation tests should run
 */
  protected boolean filesystemIsCaseSensitive(){
    return false;
  }
  @Before public void setUp() throws Exception {
    final URI uri=getFilesystemURI();
    final Configuration conf=new Configuration();
    fs=createSwiftFS();
    try {
      fs.initialize(uri,conf);
    }
 catch (    IOException e) {
      fs=null;
      throw e;
    }
  }
  protected URI getFilesystemURI() throws URISyntaxException, IOException {
    return SwiftTestUtils.getServiceURI(new Configuration());
  }
  protected SwiftNativeFileSystem createSwiftFS() throws IOException {
    SwiftNativeFileSystem swiftNativeFileSystem=new SwiftNativeFileSystem();
    return swiftNativeFileSystem;
  }
  @Test public void testMkdirsFailsForSubdirectoryOfExistingFile() throws Exception {
    Path testDir=path("/test/hadoop");
    assertFalse(fs.exists(testDir));
    assertTrue(fs.mkdirs(testDir));
    assertTrue(fs.exists(testDir));
    Path filepath=path("/test/hadoop/file");
    SwiftTestUtils.writeTextFile(fs,filepath,"hello, world",false);
    Path testSubDir=new Path(filepath,"subdir");
    SwiftTestUtils.assertPathDoesNotExist(fs,"subdir before mkdir",testSubDir);
    try {
      fs.mkdirs(testSubDir);
      fail("Should throw IOException.");
    }
 catch (    ParentNotDirectoryException e) {
    }
    SwiftTestUtils.assertPathDoesNotExist(fs,"subdir after mkdir",testSubDir);
    Path testDeepSubDir=path("/test/hadoop/file/deep/sub/dir");
    try {
      fs.mkdirs(testDeepSubDir);
      fail("Should throw IOException.");
    }
 catch (    ParentNotDirectoryException e) {
    }
    SwiftTestUtils.assertPathDoesNotExist(fs,"testDeepSubDir  after mkdir",testDeepSubDir);
  }
  @Test public void testWriteReadAndDeleteEmptyFile() throws Exception {
    try {
      super.testWriteReadAndDeleteEmptyFile();
    }
 catch (    AssertionError e) {
      SwiftTestUtils.downgrade("empty files get mistaken for directories",e);
    }
  }
  @Test public void testMkdirsWithUmask() throws Exception {
  }
  @Test public void testZeroByteFilesAreFiles() throws Exception {
  }
}
