/** 
 * Test class for  {@link PlacementConstraintToProtoConverter} and{@link PlacementConstraintFromProtoConverter}.
 */
public class TestPlacementConstraintPBConversion {
  @Test public void testTargetConstraintProtoConverter(){
    AbstractConstraint sConstraintExpr=targetIn(NODE,allocationTag("hbase-m"));
    Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
    SingleConstraint single=(SingleConstraint)sConstraintExpr;
    PlacementConstraint sConstraint=PlacementConstraints.build(sConstraintExpr);
    PlacementConstraintToProtoConverter toProtoConverter=new PlacementConstraintToProtoConverter(sConstraint);
    PlacementConstraintProto protoConstraint=toProtoConverter.convert();
    Assert.assertTrue(protoConstraint.hasSimpleConstraint());
    Assert.assertFalse(protoConstraint.hasCompositeConstraint());
    SimplePlacementConstraintProto sProto=protoConstraint.getSimpleConstraint();
    Assert.assertEquals(single.getScope(),sProto.getScope());
    Assert.assertEquals(single.getMinCardinality(),sProto.getMinCardinality());
    Assert.assertEquals(single.getMaxCardinality(),sProto.getMaxCardinality());
    Assert.assertEquals(single.getTargetExpressions().size(),sProto.getTargetExpressionsList().size());
    PlacementConstraintFromProtoConverter fromProtoConverter=new PlacementConstraintFromProtoConverter(protoConstraint);
    PlacementConstraint newConstraint=fromProtoConverter.convert();
    AbstractConstraint newConstraintExpr=newConstraint.getConstraintExpr();
    Assert.assertTrue(newConstraintExpr instanceof SingleConstraint);
    SingleConstraint newSingle=(SingleConstraint)newConstraintExpr;
    Assert.assertEquals(single.getScope(),newSingle.getScope());
    Assert.assertEquals(single.getMinCardinality(),newSingle.getMinCardinality());
    Assert.assertEquals(single.getMaxCardinality(),newSingle.getMaxCardinality());
    Assert.assertEquals(single.getTargetExpressions(),newSingle.getTargetExpressions());
  }
  @Test public void testCardinalityConstraintProtoConverter(){
    AbstractConstraint sConstraintExpr=cardinality(RACK,3,10);
    Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
    SingleConstraint single=(SingleConstraint)sConstraintExpr;
    PlacementConstraint sConstraint=PlacementConstraints.build(sConstraintExpr);
    PlacementConstraintToProtoConverter toProtoConverter=new PlacementConstraintToProtoConverter(sConstraint);
    PlacementConstraintProto protoConstraint=toProtoConverter.convert();
    compareSimpleConstraintToProto(single,protoConstraint);
    PlacementConstraintFromProtoConverter fromProtoConverter=new PlacementConstraintFromProtoConverter(protoConstraint);
    PlacementConstraint newConstraint=fromProtoConverter.convert();
    AbstractConstraint newConstraintExpr=newConstraint.getConstraintExpr();
    Assert.assertTrue(newConstraintExpr instanceof SingleConstraint);
    SingleConstraint newSingle=(SingleConstraint)newConstraintExpr;
    compareSimpleConstraints(single,newSingle);
  }
  @Test public void testCompositeConstraintProtoConverter(){
    AbstractConstraint constraintExpr=or(targetIn(RACK,allocationTag("spark")),maxCardinality(NODE,3),targetCardinality(RACK,2,10,allocationTag("zk")));
    Assert.assertTrue(constraintExpr instanceof Or);
    PlacementConstraint constraint=PlacementConstraints.build(constraintExpr);
    Or orExpr=(Or)constraintExpr;
    PlacementConstraintToProtoConverter toProtoConverter=new PlacementConstraintToProtoConverter(constraint);
    PlacementConstraintProto protoConstraint=toProtoConverter.convert();
    Assert.assertFalse(protoConstraint.hasSimpleConstraint());
    Assert.assertTrue(protoConstraint.hasCompositeConstraint());
    CompositePlacementConstraintProto cProto=protoConstraint.getCompositeConstraint();
    Assert.assertEquals(CompositeType.OR,cProto.getCompositeType());
    Assert.assertEquals(3,cProto.getChildConstraintsCount());
    Assert.assertEquals(0,cProto.getTimedChildConstraintsCount());
    Iterator<AbstractConstraint> orChildren=orExpr.getChildren().iterator();
    Iterator<PlacementConstraintProto> orProtoChildren=cProto.getChildConstraintsList().iterator();
    while (orChildren.hasNext() && orProtoChildren.hasNext()) {
      AbstractConstraint orChild=orChildren.next();
      PlacementConstraintProto orProtoChild=orProtoChildren.next();
      compareSimpleConstraintToProto((SingleConstraint)orChild,orProtoChild);
    }
    PlacementConstraintFromProtoConverter fromProtoConverter=new PlacementConstraintFromProtoConverter(protoConstraint);
    PlacementConstraint newConstraint=fromProtoConverter.convert();
    AbstractConstraint newConstraintExpr=newConstraint.getConstraintExpr();
    Assert.assertTrue(newConstraintExpr instanceof Or);
    Or newOrExpr=(Or)newConstraintExpr;
    Assert.assertEquals(3,newOrExpr.getChildren().size());
    orChildren=orExpr.getChildren().iterator();
    Iterator<AbstractConstraint> newOrChildren=newOrExpr.getChildren().iterator();
    while (orChildren.hasNext() && newOrChildren.hasNext()) {
      AbstractConstraint orChild=orChildren.next();
      AbstractConstraint newOrChild=newOrChildren.next();
      compareSimpleConstraints((SingleConstraint)orChild,(SingleConstraint)newOrChild);
    }
  }
  private void compareSimpleConstraintToProto(  SingleConstraint constraint,  PlacementConstraintProto proto){
    Assert.assertTrue(proto.hasSimpleConstraint());
    Assert.assertFalse(proto.hasCompositeConstraint());
    SimplePlacementConstraintProto sProto=proto.getSimpleConstraint();
    Assert.assertEquals(constraint.getScope(),sProto.getScope());
    Assert.assertEquals(constraint.getMinCardinality(),sProto.getMinCardinality());
    Assert.assertEquals(constraint.getMaxCardinality(),sProto.getMaxCardinality());
    Assert.assertEquals(constraint.getTargetExpressions().size(),sProto.getTargetExpressionsList().size());
  }
  private void compareSimpleConstraints(  SingleConstraint single,  SingleConstraint newSingle){
    Assert.assertEquals(single.getScope(),newSingle.getScope());
    Assert.assertEquals(single.getMinCardinality(),newSingle.getMinCardinality());
    Assert.assertEquals(single.getMaxCardinality(),newSingle.getMaxCardinality());
    Assert.assertEquals(single.getTargetExpressions(),newSingle.getTargetExpressions());
  }
}
