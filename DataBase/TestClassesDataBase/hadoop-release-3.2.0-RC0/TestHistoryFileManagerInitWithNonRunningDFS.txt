/** 
 * Test service initialization of HistoryFileManager when HDFS is not running normally (either in start phase or in safe mode).
 */
public class TestHistoryFileManagerInitWithNonRunningDFS {
  private static final String CLUSTER_BASE_DIR=MiniDFSCluster.getBaseDirectory();
  /** 
 * Verify if JHS keeps retrying to connect to HDFS, if the name node is in safe mode, when it creates history directories during service initialization. The expected behavior of JHS is to keep retrying for a time limit as specified by JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME, and give up by throwing a YarnRuntimeException with a time out message.
 */
  @Test public void testKeepRetryingWhileNameNodeInSafeMode() throws Exception {
    Configuration conf=new Configuration();
    final long maxJhsWaitTime=500;
    conf.setLong(JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,maxJhsWaitTime);
    conf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR,CLUSTER_BASE_DIR);
    MiniDFSCluster dfsCluster=new MiniDFSCluster.Builder(conf).build();
    try {
      dfsCluster.getFileSystem().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER);
      Assert.assertTrue(dfsCluster.getFileSystem().isInSafeMode());
      HistoryFileManager hfm=new HistoryFileManager();
      hfm.serviceInit(conf);
      Assert.fail("History File Manager did not retry to connect to name node");
    }
 catch (    YarnRuntimeException yex) {
      String expectedExceptionMsg="Timed out '" + maxJhsWaitTime + "ms' waiting for FileSystem to become available";
      Assert.assertEquals("Unexpected reconnect timeout exception message",expectedExceptionMsg,yex.getMessage());
    }
 finally {
      dfsCluster.shutdown(true);
    }
  }
}
