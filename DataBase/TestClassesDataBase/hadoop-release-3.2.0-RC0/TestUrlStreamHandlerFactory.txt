/** 
 * Test of the URL stream handler factory.
 */
public class TestUrlStreamHandlerFactory {
  private static final int RUNS=20;
  private static final int THREADS=10;
  private static final int TASKS=200;
  @Rule public Timeout globalTimeout=new Timeout(30000);
  @Test public void testConcurrency() throws Exception {
    for (int i=0; i < RUNS; i++) {
      singleRun();
    }
  }
  private void singleRun() throws Exception {
    final FsUrlStreamHandlerFactory factory=new FsUrlStreamHandlerFactory();
    final Random random=new Random();
    ExecutorService executor=Executors.newFixedThreadPool(THREADS);
    ArrayList<Future<?>> futures=new ArrayList<Future<?>>(TASKS);
    for (int i=0; i < TASKS; i++) {
      final int aux=i;
      futures.add(executor.submit(new Runnable(){
        @Override public void run(){
          int rand=aux + random.nextInt(3);
          factory.createURLStreamHandler(String.valueOf(rand));
        }
      }
));
    }
    executor.shutdown();
    for (    Future future : futures) {
      if (!future.isDone()) {
        break;
      }
      future.get();
    }
  }
  @Test public void testFsUrlStreamHandlerFactory() throws IOException {
    File myFile=new File(GenericTestUtils.getTestDir(),"foo bar.txt");
    myFile.createNewFile();
    URL myUrl=myFile.toURI().toURL();
    myUrl.openStream().close();
    URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());
    URL myUrl2=myFile.toURI().toURL();
    myUrl2.openStream();
  }
}
