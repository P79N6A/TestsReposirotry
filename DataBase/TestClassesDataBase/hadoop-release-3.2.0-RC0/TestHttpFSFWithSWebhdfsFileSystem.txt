@RunWith(value=Parameterized.class) public class TestHttpFSFWithSWebhdfsFileSystem extends TestHttpFSWithHttpFSFileSystem {
  private static String classpathDir;
  private static final String BASEDIR=GenericTestUtils.getTempPath(UUID.randomUUID().toString());
  private static String keyStoreDir;
  private static Configuration sslConf;
{
    URL url=Thread.currentThread().getContextClassLoader().getResource("classutils.txt");
    classpathDir=url.toExternalForm();
    if (classpathDir.startsWith("file:")) {
      classpathDir=classpathDir.substring("file:".length());
      classpathDir=classpathDir.substring(0,classpathDir.length() - "/classutils.txt".length());
    }
 else {
      throw new RuntimeException("Cannot find test classes dir");
    }
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    keyStoreDir=new File(BASEDIR).getAbsolutePath();
    try {
      sslConf=new Configuration();
      KeyStoreTestUtil.setupSSLConfig(keyStoreDir,classpathDir,sslConf,false);
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
    jettyTestHelper=new TestJettyHelper("jks",keyStoreDir + "/serverKS.jks","serverP");
  }
  @AfterClass public static void cleanUp() throws Exception {
    new File(classpathDir,"ssl-client.xml").delete();
    new File(classpathDir,"ssl-server.xml").delete();
    KeyStoreTestUtil.cleanupSSLConfig(keyStoreDir,classpathDir);
  }
  public TestHttpFSFWithSWebhdfsFileSystem(  Operation operation){
    super(operation);
  }
  @Override protected Class getFileSystemClass(){
    return SWebHdfsFileSystem.class;
  }
  @Override protected String getScheme(){
    return "swebhdfs";
  }
  @Override protected FileSystem getHttpFSFileSystem() throws Exception {
    Configuration conf=new Configuration(sslConf);
    conf.set("fs.swebhdfs.impl",getFileSystemClass().getName());
    URI uri=new URI("swebhdfs://" + TestJettyHelper.getJettyURL().toURI().getAuthority());
    return FileSystem.get(uri,conf);
  }
}
