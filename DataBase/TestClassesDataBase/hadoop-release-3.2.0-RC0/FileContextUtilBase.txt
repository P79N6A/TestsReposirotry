/** 
 * <p> A collection of Util tests for the  {@link FileContext#util()}. This test should be used for testing an instance of  {@link FileContext#util()}that has been initialized to a specific default FileSystem such a LocalFileSystem, HDFS,S3, etc. </p> <p> To test a given  {@link FileSystem} implementation create a subclass of thistest and override  {@link #setUp()} to initialize the <code>fc</code> {@link FileContext} instance variable.</p>
 */
public abstract class FileContextUtilBase {
  protected final FileContextTestHelper fileContextTestHelper=new FileContextTestHelper();
  protected FileContext fc;
{
    try {
      GenericTestUtils.setLogLevel(FileSystem.LOG,Level.DEBUG);
    }
 catch (    Exception e) {
      System.out.println("Cannot change log level\n" + StringUtils.stringifyException(e));
    }
  }
  @Before public void setUp() throws Exception {
    fc.mkdir(fileContextTestHelper.getTestRootPath(fc),FileContext.DEFAULT_PERM,true);
  }
  @After public void tearDown() throws Exception {
    if (fc != null) {
      fc.delete(fileContextTestHelper.getTestRootPath(fc),true);
    }
  }
  @Test public void testFcCopy() throws Exception {
    final String ts="some random text";
    Path file1=fileContextTestHelper.getTestRootPath(fc,"file1");
    Path file2=fileContextTestHelper.getTestRootPath(fc,"file2");
    writeFile(fc,file1,ts.getBytes());
    assertTrue(fc.util().exists(file1));
    fc.util().copy(file1,file2);
    assertTrue("Failed to copy file2  ",fc.util().exists(file2));
    assertTrue("Copied files does not match ",Arrays.equals(ts.getBytes(),readFile(fc,file2,ts.getBytes().length)));
  }
  @Test public void testRecursiveFcCopy() throws Exception {
    final String ts="some random text";
    Path dir1=fileContextTestHelper.getTestRootPath(fc,"dir1");
    Path dir2=fileContextTestHelper.getTestRootPath(fc,"dir2");
    Path file1=new Path(dir1,"file1");
    fc.mkdir(dir1,null,false);
    writeFile(fc,file1,ts.getBytes());
    assertTrue(fc.util().exists(file1));
    Path file2=new Path(dir2,"file1");
    fc.util().copy(dir1,dir2);
    assertTrue("Failed to copy file2  ",fc.util().exists(file2));
    assertTrue("Copied files does not match ",Arrays.equals(ts.getBytes(),readFile(fc,file2,ts.getBytes().length)));
  }
}
