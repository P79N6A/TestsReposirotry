/** 
 * Test permission operations.
 */
@RunWith(Parallelized.class) public class ITestAzureBlobFileSystemPermission extends AbstractAbfsIntegrationTest {
  private static Path testRoot=new Path("/test");
  private static final String DEFAULT_UMASK_VALUE="027";
  private static final FsPermission DEFAULT_UMASK_PERMISSION=new FsPermission(DEFAULT_UMASK_VALUE);
  private static final int KILOBYTE=1024;
  private FsPermission permission;
  private Path path;
  public ITestAzureBlobFileSystemPermission(  FsPermission testPermission) throws Exception {
    super();
    permission=testPermission;
  }
  @Parameterized.Parameters(name="{0}") public static Collection abfsCreateNonRecursiveTestData() throws Exception {
    final Collection<Object[]> datas=new ArrayList<>();
    for (    FsAction g : FsAction.values()) {
      for (      FsAction o : FsAction.values()) {
        datas.add(new Object[]{new FsPermission(FsAction.ALL,g,o)});
      }
    }
    return datas;
  }
  @Test public void testFilePermission() throws Exception {
    final AzureBlobFileSystem fs=this.getFileSystem();
    Assume.assumeTrue(fs.getIsNamespaceEnabled());
    fs.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,DEFAULT_UMASK_VALUE);
    path=new Path(testRoot,UUID.randomUUID().toString());
    fs.mkdirs(path.getParent(),new FsPermission(FsAction.ALL,FsAction.NONE,FsAction.NONE));
    fs.removeDefaultAcl(path.getParent());
    fs.create(path,permission,true,KILOBYTE,(short)1,KILOBYTE - 1,null);
    FileStatus status=fs.getFileStatus(path);
    Assert.assertEquals(permission.applyUMask(DEFAULT_UMASK_PERMISSION),status.getPermission());
  }
  @Test public void testFolderPermission() throws Exception {
    final AzureBlobFileSystem fs=this.getFileSystem();
    Assume.assumeTrue(fs.getIsNamespaceEnabled());
    fs.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"027");
    path=new Path(testRoot,UUID.randomUUID().toString());
    fs.mkdirs(path.getParent(),new FsPermission(FsAction.ALL,FsAction.WRITE,FsAction.NONE));
    fs.removeDefaultAcl(path.getParent());
    fs.mkdirs(path,permission);
    FileStatus status=fs.getFileStatus(path);
    Assert.assertEquals(permission.applyUMask(DEFAULT_UMASK_PERMISSION),status.getPermission());
  }
}
