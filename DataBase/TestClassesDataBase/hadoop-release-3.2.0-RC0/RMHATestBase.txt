public abstract class RMHATestBase extends ClientBaseWithFixes {
  private static final int ZK_TIMEOUT_MS=5000;
  private static StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  protected Configuration configuration=new YarnConfiguration();
  static MockRM rm1=null;
  static MockRM rm2=null;
  Configuration confForRM1;
  Configuration confForRM2;
  @Before public void setup() throws Exception {
    configuration.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    configuration.set(YarnConfiguration.RM_HA_IDS,"rm1,rm2");
    configuration.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
    configuration.set(YarnConfiguration.RM_STORE,ZKRMStateStore.class.getName());
    configuration.set(CommonConfigurationKeys.ZK_ADDRESS,hostPort);
    configuration.setInt(CommonConfigurationKeys.ZK_TIMEOUT_MS,ZK_TIMEOUT_MS);
    configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
    configuration.set(YarnConfiguration.RM_CLUSTER_ID,"test-yarn-cluster");
    int base=100;
    for (    String confKey : YarnConfiguration.getServiceAddressConfKeys(configuration)) {
      configuration.set(HAUtil.addSuffix(confKey,"rm1"),"0.0.0.0:" + (base + 20));
      configuration.set(HAUtil.addSuffix(confKey,"rm2"),"0.0.0.0:" + (base + 40));
      base=base * 2;
    }
    confForRM1=new Configuration(configuration);
    confForRM1.set(YarnConfiguration.RM_HA_ID,"rm1");
    confForRM2=new Configuration(configuration);
    confForRM2.set(YarnConfiguration.RM_HA_ID,"rm2");
  }
  @After public void teardown(){
    if (rm1 != null) {
      rm1.stop();
    }
    if (rm2 != null) {
      rm2.stop();
    }
  }
  protected MockAM launchAM(  RMApp app,  MockRM rm,  MockNM nm) throws Exception {
    RMAppAttempt attempt=app.getCurrentAppAttempt();
    nm.nodeHeartbeat(true);
    ((AbstractYarnScheduler)rm.getResourceScheduler()).update();
    MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
    am.registerAppAttempt();
    rm.waitForState(app.getApplicationId(),RMAppState.RUNNING);
    rm.waitForState(app.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.RUNNING);
    return am;
  }
  private MockRM initMockRMWithOldConf(  Configuration confForRM1){
    return new MockRM(confForRM1,null,false,false){
      @Override protected AdminService createAdminService(){
        return new AdminService(this){
          @Override protected void startServer(){
          }
          @Override protected void stopServer(){
          }
          @Override protected Configuration loadNewConfiguration() throws IOException, YarnException {
            return confForRM1;
          }
        }
;
      }
    }
;
  }
  protected void startRMs() throws IOException {
    rm1=initMockRMWithOldConf(confForRM1);
    rm2=initMockRMWithOldConf(confForRM2);
    startRMs(rm1,confForRM1,rm2,confForRM2);
  }
  protected void startRMsWithCustomizedRMAppManager() throws IOException {
    final Configuration conf1=new Configuration(confForRM1);
    rm1=new MockRM(conf1){
      @Override protected RMAppManager createRMAppManager(){
        return new MyRMAppManager(this.rmContext,this.scheduler,this.masterService,this.applicationACLsManager,conf1);
      }
    }
;
    rm2=new MockRM(confForRM2);
    startRMs(rm1,conf1,rm2,confForRM2);
  }
private static class MyRMAppManager extends RMAppManager {
    private Configuration conf;
    private RMContext rmContext;
    public MyRMAppManager(    RMContext context,    YarnScheduler scheduler,    ApplicationMasterService masterService,    ApplicationACLsManager applicationACLsManager,    Configuration conf){
      super(context,scheduler,masterService,applicationACLsManager,conf);
      this.conf=conf;
      this.rmContext=context;
    }
    @Override protected void submitApplication(    ApplicationSubmissionContext submissionContext,    long submitTime,    String user) throws YarnException {
      RMAppImpl application=new RMAppImpl(submissionContext.getApplicationId(),this.rmContext,this.conf,submissionContext.getApplicationName(),user,submissionContext.getQueue(),submissionContext,this.rmContext.getScheduler(),this.rmContext.getApplicationMasterService(),submitTime,submissionContext.getApplicationType(),submissionContext.getApplicationTags(),null);
      this.rmContext.getRMApps().put(submissionContext.getApplicationId(),application);
    }
  }
  protected boolean isFinalState(  RMAppState state){
    return state.equals(RMAppState.FINISHING) || state.equals(RMAppState.FINISHED) || state.equals(RMAppState.FAILED)|| state.equals(RMAppState.KILLED);
  }
  protected void explicitFailover() throws IOException {
    rm1.adminService.transitionToStandby(requestInfo);
    rm2.adminService.transitionToActive(requestInfo);
    Assert.assertTrue(rm1.getRMContext().getHAServiceState() == HAServiceState.STANDBY);
    Assert.assertTrue(rm2.getRMContext().getHAServiceState() == HAServiceState.ACTIVE);
  }
  protected void startRMs(  MockRM rm1,  Configuration confForRM1,  MockRM rm2,  Configuration confForRM2) throws IOException {
    rm1.init(confForRM1);
    rm1.start();
    Assert.assertTrue(rm1.getRMContext().getHAServiceState() == HAServiceState.STANDBY);
    rm2.init(confForRM2);
    rm2.start();
    Assert.assertTrue(rm2.getRMContext().getHAServiceState() == HAServiceState.STANDBY);
    rm1.adminService.transitionToActive(requestInfo);
    Assert.assertTrue(rm1.getRMContext().getHAServiceState() == HAServiceState.ACTIVE);
  }
}
