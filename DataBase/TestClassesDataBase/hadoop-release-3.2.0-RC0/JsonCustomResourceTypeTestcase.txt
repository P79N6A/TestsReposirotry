/** 
 * This class hides the implementation details of how to verify the structure of JSON responses. Tests should only provide the path of the {@link WebResource}, the response from the resource and the verifier Consumer to {@link JsonCustomResourceTypeTestcase#verify(Consumer)}. An instance of {@link JSONObject} will be passed to that consumer to be able toverify the response.
 */
public class JsonCustomResourceTypeTestcase {
  private static final Logger LOG=LoggerFactory.getLogger(JsonCustomResourceTypeTestcase.class);
  private final WebResource path;
  private final BufferedClientResponse response;
  private final JSONObject parsedResponse;
  public JsonCustomResourceTypeTestcase(  WebResource path,  BufferedClientResponse response){
    this.path=path;
    verifyStatus(response);
    this.response=response;
    this.parsedResponse=response.getEntity(JSONObject.class);
  }
  private void verifyStatus(  BufferedClientResponse response){
    String responseStr=response.getEntity(String.class);
    assertEquals("HTTP status should be 200, " + "status info: " + response.getStatusInfo() + " response as string: "+ responseStr,200,response.getStatus());
  }
  public void verify(  Consumer<JSONObject> verifier){
    assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
    logResponse();
    String responseStr=response.getEntity(String.class);
    if (responseStr == null || responseStr.isEmpty()) {
      throw new IllegalStateException("Response is null or empty!");
    }
    verifier.accept(parsedResponse);
  }
  private void logResponse(){
    String responseStr=response.getEntity(String.class);
    LOG.info("Raw response from service URL {}: {}",path.toString(),responseStr);
    LOG.info("Parsed response from service URL {}: {}",path.toString(),parsedResponse);
  }
}
