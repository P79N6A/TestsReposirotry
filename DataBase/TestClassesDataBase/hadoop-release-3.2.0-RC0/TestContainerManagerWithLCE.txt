public class TestContainerManagerWithLCE extends TestContainerManager {
  private static final Logger LOG=LoggerFactory.getLogger(TestContainerManagerWithLCE.class);
  public TestContainerManagerWithLCE() throws UnsupportedFileSystemException {
    super();
  }
static {
    localDir=new File("target",TestContainerManagerWithLCE.class.getName() + "-localDir").getAbsoluteFile();
    tmpDir=new File("target",TestContainerManagerWithLCE.class.getName() + "-tmpDir");
  }
  @Override public void setup() throws IOException {
    Assume.assumeTrue("LCE binary path is not passed. Not running the test",shouldRunTest());
    super.setup();
    localFS.setPermission(new Path(localDir.getCanonicalPath()),new FsPermission((short)0777));
    localFS.setPermission(new Path(tmpDir.getCanonicalPath()),new FsPermission((short)0777));
  }
  @After @Override public void tearDown() throws IOException, InterruptedException {
    if (shouldRunTest()) {
      super.tearDown();
    }
  }
  private boolean shouldRunTest(){
    return System.getProperty(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH) != null;
  }
  @Override protected ContainerExecutor createContainerExecutor(){
    super.conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH,System.getProperty(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH));
    LinuxContainerExecutor linuxContainerExecutor=new LinuxContainerExecutor();
    linuxContainerExecutor.setConf(super.conf);
    return linuxContainerExecutor;
  }
}
