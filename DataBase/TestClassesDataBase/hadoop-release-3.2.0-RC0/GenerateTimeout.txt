/** 
 * Returns  {@code TimeoutException} on a timeout. Ifthere was a inner class passed in, includes it as the inner failure.
 */
public static class GenerateTimeout implements TimeoutHandler {
  private final String message;
  public GenerateTimeout(  String message){
    this.message=message;
  }
  public GenerateTimeout(){
    this("timeout");
  }
  /** 
 * Evaluate operation creates a new  {@code TimeoutException}.
 * @param timeoutMillis timeout in millis
 * @param caught optional caught exception
 * @return TimeoutException
 */
  @Override public Throwable evaluate(  int timeoutMillis,  Throwable caught) throws Throwable {
    String s=String.format("%s: after %d millis",message,timeoutMillis);
    String caughtText=caught != null ? ("; " + robustToString(caught)) : "";
    return (new TimeoutException(s + caughtText).initCause(caught));
  }
}
