public class TestRoundRobinVolumeChoosingPolicy {
  @Test public void testRR() throws Exception {
    @SuppressWarnings("unchecked") final RoundRobinVolumeChoosingPolicy<FsVolumeSpi> policy=ReflectionUtils.newInstance(RoundRobinVolumeChoosingPolicy.class,null);
    testRR(policy);
  }
  public static void testRR(  VolumeChoosingPolicy<FsVolumeSpi> policy) throws Exception {
    final List<FsVolumeSpi> volumes=new ArrayList<FsVolumeSpi>();
    volumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(volumes.get(0).getAvailable()).thenReturn(100L);
    volumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(volumes.get(1).getAvailable()).thenReturn(200L);
    Assert.assertEquals(volumes.get(0),policy.chooseVolume(volumes,0,null));
    Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,0,null));
    Assert.assertEquals(volumes.get(0),policy.chooseVolume(volumes,0,null));
    Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,0,null));
    Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,150,null));
    try {
      policy.chooseVolume(volumes,Long.MAX_VALUE,null);
      Assert.fail();
    }
 catch (    IOException e) {
    }
  }
  @Test public void testRRPolicyExceptionMessage() throws Exception {
    final RoundRobinVolumeChoosingPolicy<FsVolumeSpi> policy=new RoundRobinVolumeChoosingPolicy<FsVolumeSpi>();
    testRRPolicyExceptionMessage(policy);
  }
  public static void testRRPolicyExceptionMessage(  VolumeChoosingPolicy<FsVolumeSpi> policy) throws Exception {
    final List<FsVolumeSpi> volumes=new ArrayList<FsVolumeSpi>();
    volumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(volumes.get(0).getAvailable()).thenReturn(500L);
    volumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(volumes.get(1).getAvailable()).thenReturn(600L);
    int blockSize=700;
    try {
      policy.chooseVolume(volumes,blockSize,null);
      Assert.fail("expected to throw DiskOutOfSpaceException");
    }
 catch (    DiskOutOfSpaceException e) {
      Assert.assertEquals("Not returnig the expected message","Out of space: The volume with the most available space (=" + 600 + " B) is less than the block size (="+ blockSize+ " B).",e.getMessage());
    }
  }
  @Test public void testRRPolicyWithStorageTypes() throws Exception {
    final RoundRobinVolumeChoosingPolicy<FsVolumeSpi> policy=new RoundRobinVolumeChoosingPolicy<FsVolumeSpi>();
    testRRPolicyWithStorageTypes(policy);
  }
  public static void testRRPolicyWithStorageTypes(  VolumeChoosingPolicy<FsVolumeSpi> policy) throws Exception {
    final List<FsVolumeSpi> diskVolumes=new ArrayList<FsVolumeSpi>();
    final List<FsVolumeSpi> ssdVolumes=new ArrayList<FsVolumeSpi>();
    diskVolumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(diskVolumes.get(0).getStorageType()).thenReturn(StorageType.DISK);
    Mockito.when(diskVolumes.get(0).getAvailable()).thenReturn(100L);
    diskVolumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(diskVolumes.get(1).getStorageType()).thenReturn(StorageType.DISK);
    Mockito.when(diskVolumes.get(1).getAvailable()).thenReturn(100L);
    ssdVolumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(ssdVolumes.get(0).getStorageType()).thenReturn(StorageType.SSD);
    Mockito.when(ssdVolumes.get(0).getAvailable()).thenReturn(200L);
    ssdVolumes.add(Mockito.mock(FsVolumeSpi.class));
    Mockito.when(ssdVolumes.get(1).getStorageType()).thenReturn(StorageType.SSD);
    Mockito.when(ssdVolumes.get(1).getAvailable()).thenReturn(100L);
    Assert.assertEquals(diskVolumes.get(0),policy.chooseVolume(diskVolumes,0,null));
    Assert.assertEquals(ssdVolumes.get(0),policy.chooseVolume(ssdVolumes,0,null));
    Assert.assertEquals(ssdVolumes.get(0),policy.chooseVolume(ssdVolumes,150L,null));
    Assert.assertEquals(diskVolumes.get(1),policy.chooseVolume(diskVolumes,0,null));
    Assert.assertEquals(diskVolumes.get(0),policy.chooseVolume(diskVolumes,50L,null));
    try {
      policy.chooseVolume(diskVolumes,200L,null);
      Assert.fail("Should throw an DiskOutOfSpaceException before this!");
    }
 catch (    DiskOutOfSpaceException e) {
    }
  }
}
