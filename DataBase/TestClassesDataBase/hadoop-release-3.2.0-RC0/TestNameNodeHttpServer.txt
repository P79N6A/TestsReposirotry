@RunWith(value=Parameterized.class) public class TestNameNodeHttpServer {
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestNameNodeHttpServer.class.getSimpleName());
  private static String keystoresDir;
  private static String sslConfDir;
  private static Configuration conf;
  private static URLConnectionFactory connectionFactory;
  @Parameters public static Collection<Object[]> policy(){
    Object[][] params=new Object[][]{{HttpConfig.Policy.HTTP_ONLY},{HttpConfig.Policy.HTTPS_ONLY},{HttpConfig.Policy.HTTP_AND_HTTPS}};
    return Arrays.asList(params);
  }
  private final HttpConfig.Policy policy;
  public TestNameNodeHttpServer(  Policy policy){
    super();
    this.policy=policy;
  }
  @BeforeClass public static void setUp() throws Exception {
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    conf=new Configuration();
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestNameNodeHttpServer.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
    connectionFactory=URLConnectionFactory.newDefaultURLConnectionFactory(conf);
    conf.set(DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
    conf.set(DFSConfigKeys.DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
  }
  @AfterClass public static void tearDown() throws Exception {
    FileUtil.fullyDelete(new File(BASEDIR));
    KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
  }
  @Test public void testHttpPolicy() throws Exception {
    conf.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,policy.name());
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    InetSocketAddress addr=InetSocketAddress.createUnresolved("localhost",0);
    NameNodeHttpServer server=null;
    try {
      server=new NameNodeHttpServer(conf,null,addr);
      server.start();
      Assert.assertTrue(implies(policy.isHttpEnabled(),canAccess("http",server.getHttpAddress())));
      Assert.assertTrue(implies(!policy.isHttpEnabled(),server.getHttpAddress() == null));
      Assert.assertTrue(implies(policy.isHttpsEnabled(),canAccess("https",server.getHttpsAddress())));
      Assert.assertTrue(implies(!policy.isHttpsEnabled(),server.getHttpsAddress() == null));
    }
  finally {
      if (server != null) {
        server.stop();
      }
    }
  }
  private static boolean canAccess(  String scheme,  InetSocketAddress addr){
    if (addr == null)     return false;
    try {
      URL url=new URL(scheme + "://" + NetUtils.getHostPortString(addr));
      URLConnection conn=connectionFactory.openConnection(url);
      conn.connect();
      conn.getContent();
    }
 catch (    Exception e) {
      return false;
    }
    return true;
  }
  private static boolean implies(  boolean a,  boolean b){
    return !a || b;
  }
}
