public class TestHost2NodesMap {
  private final Host2NodesMap map=new Host2NodesMap();
  private DatanodeDescriptor dataNodes[];
  @Before public void setup(){
    dataNodes=new DatanodeDescriptor[]{DFSTestUtil.getDatanodeDescriptor("1.1.1.1","/d1/r1"),DFSTestUtil.getDatanodeDescriptor("2.2.2.2","/d1/r1"),DFSTestUtil.getDatanodeDescriptor("3.3.3.3","/d1/r2"),DFSTestUtil.getDatanodeDescriptor("3.3.3.3",5021,"/d1/r2")};
    for (    DatanodeDescriptor node : dataNodes) {
      map.add(node);
    }
    map.add(null);
  }
  @Test public void testContains() throws Exception {
    DatanodeDescriptor nodeNotInMap=DFSTestUtil.getDatanodeDescriptor("3.3.3.3","/d1/r4");
    for (int i=0; i < dataNodes.length; i++) {
      assertTrue(map.contains(dataNodes[i]));
    }
    assertFalse(map.contains(null));
    assertFalse(map.contains(nodeNotInMap));
  }
  @Test public void testGetDatanodeByHost() throws Exception {
    assertEquals(map.getDatanodeByHost("1.1.1.1"),dataNodes[0]);
    assertEquals(map.getDatanodeByHost("2.2.2.2"),dataNodes[1]);
    DatanodeDescriptor node=map.getDatanodeByHost("3.3.3.3");
    assertTrue(node == dataNodes[2] || node == dataNodes[3]);
    assertNull(map.getDatanodeByHost("4.4.4.4"));
  }
  @Test public void testRemove() throws Exception {
    DatanodeDescriptor nodeNotInMap=DFSTestUtil.getDatanodeDescriptor("3.3.3.3","/d1/r4");
    assertFalse(map.remove(nodeNotInMap));
    assertTrue(map.remove(dataNodes[0]));
    assertTrue(map.getDatanodeByHost("1.1.1.1.") == null);
    assertTrue(map.getDatanodeByHost("2.2.2.2") == dataNodes[1]);
    DatanodeDescriptor node=map.getDatanodeByHost("3.3.3.3");
    assertTrue(node == dataNodes[2] || node == dataNodes[3]);
    assertNull(map.getDatanodeByHost("4.4.4.4"));
    assertTrue(map.remove(dataNodes[2]));
    assertNull(map.getDatanodeByHost("1.1.1.1"));
    assertEquals(map.getDatanodeByHost("2.2.2.2"),dataNodes[1]);
    assertEquals(map.getDatanodeByHost("3.3.3.3"),dataNodes[3]);
    assertTrue(map.remove(dataNodes[3]));
    assertNull(map.getDatanodeByHost("1.1.1.1"));
    assertEquals(map.getDatanodeByHost("2.2.2.2"),dataNodes[1]);
    assertNull(map.getDatanodeByHost("3.3.3.3"));
    assertFalse(map.remove(null));
    assertTrue(map.remove(dataNodes[1]));
    assertFalse(map.remove(dataNodes[1]));
  }
}
