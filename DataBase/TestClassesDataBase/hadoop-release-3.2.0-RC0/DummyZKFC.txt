static class DummyZKFC extends ZKFailoverController {
  private static final String DUMMY_CLUSTER="dummy-cluster";
  public static final String SCOPED_PARENT_ZNODE=ZKFailoverController.ZK_PARENT_ZNODE_DEFAULT + "/" + DUMMY_CLUSTER;
  private static final String LOCK_ZNODE=SCOPED_PARENT_ZNODE + "/" + ActiveStandbyElector.LOCK_FILENAME;
  private final DummyHAService localTarget;
  public DummyZKFC(  Configuration conf,  DummyHAService localTarget){
    super(conf,localTarget);
    this.localTarget=localTarget;
  }
  @Override protected byte[] targetToData(  HAServiceTarget target){
    return Ints.toByteArray(((DummyHAService)target).index);
  }
  @Override protected HAServiceTarget dataToTarget(  byte[] data){
    int index=Ints.fromByteArray(data);
    return DummyHAService.getInstance(index);
  }
  @Override protected void loginAsFCUser() throws IOException {
  }
  @Override protected String getScopeInsideParentNode(){
    return DUMMY_CLUSTER;
  }
  @Override protected void checkRpcAdminAccess() throws AccessControlException {
  }
  @Override protected InetSocketAddress getRpcAddressToBindTo(){
    return new InetSocketAddress(0);
  }
  @Override protected void initRPC() throws IOException {
    super.initRPC();
    localTarget.zkfcProxy=this.getRpcServerForTests();
  }
  @Override protected PolicyProvider getPolicyProvider(){
    return null;
  }
  @Override protected List<HAServiceTarget> getAllOtherNodes(){
    List<HAServiceTarget> services=new ArrayList<HAServiceTarget>(DummyHAService.instances.size());
    for (    DummyHAService service : DummyHAService.instances) {
      if (service != this.localTarget) {
        services.add(service);
      }
    }
    return services;
  }
}
