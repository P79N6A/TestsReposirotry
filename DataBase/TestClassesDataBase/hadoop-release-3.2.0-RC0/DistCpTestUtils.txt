/** 
 * Utility class for DistCpTests
 */
public class DistCpTestUtils {
  /** 
 * Asserts the XAttrs returned by getXAttrs for a specific path match an expected set of XAttrs.
 * @param path String path to check
 * @param fs FileSystem to use for the path
 * @param expectedXAttrs XAttr[] expected xAttrs
 * @throws Exception if there is any error
 */
  public static void assertXAttrs(  Path path,  FileSystem fs,  Map<String,byte[]> expectedXAttrs) throws Exception {
    Map<String,byte[]> xAttrs=fs.getXAttrs(path);
    assertEquals(path.toString(),expectedXAttrs.size(),xAttrs.size());
    Iterator<Entry<String,byte[]>> i=expectedXAttrs.entrySet().iterator();
    while (i.hasNext()) {
      Entry<String,byte[]> e=i.next();
      String name=e.getKey();
      byte[] value=e.getValue();
      if (value == null) {
        assertTrue(xAttrs.containsKey(name) && xAttrs.get(name) == null);
      }
 else {
        assertArrayEquals(value,xAttrs.get(name));
      }
    }
  }
  /** 
 * Runs distcp from src to dst, preserving XAttrs. Asserts the expected exit code.
 * @param exitCode expected exit code
 * @param src distcp src path
 * @param dst distcp destination
 * @param options distcp command line options
 * @param conf Configuration to use
 * @throws Exception if there is any error
 */
  public static void assertRunDistCp(  int exitCode,  String src,  String dst,  String options,  Configuration conf) throws Exception {
    assertRunDistCp(exitCode,src,dst,options == null ? new String[0] : options.trim().split(" "),conf);
  }
  private static void assertRunDistCp(  int exitCode,  String src,  String dst,  String[] options,  Configuration conf) throws Exception {
    DistCp distCp=new DistCp(conf,null);
    String[] optsArr=new String[options.length + 2];
    System.arraycopy(options,0,optsArr,0,options.length);
    optsArr[optsArr.length - 2]=src;
    optsArr[optsArr.length - 1]=dst;
    assertEquals(exitCode,ToolRunner.run(conf,distCp,optsArr));
  }
}
