public class TestRMStateStoreUtils {
  @Test public void testReadRMDelegationTokenIdentifierData() throws Exception {
    testReadRMDelegationTokenIdentifierData(false);
  }
  @Test public void testReadRMDelegationTokenIdentifierDataOldFormat() throws Exception {
    testReadRMDelegationTokenIdentifierData(true);
  }
  public void testReadRMDelegationTokenIdentifierData(  boolean oldFormat) throws Exception {
    RMDelegationTokenIdentifier token=new RMDelegationTokenIdentifier(new Text("alice"),new Text("bob"),new Text("colin"));
    token.setIssueDate(123);
    token.setMasterKeyId(321);
    token.setMaxDate(314);
    token.setSequenceNumber(12345);
    DataInputBuffer inBuf=new DataInputBuffer();
    if (oldFormat) {
      DataOutputBuffer outBuf=new DataOutputBuffer();
      token.writeInOldFormat(outBuf);
      outBuf.writeLong(42);
      inBuf.reset(outBuf.getData(),0,outBuf.getLength());
    }
 else {
      RMDelegationTokenIdentifierData tokenIdentifierData=new RMDelegationTokenIdentifierData(token,42);
      byte[] data=tokenIdentifierData.toByteArray();
      inBuf.reset(data,0,data.length);
    }
    RMDelegationTokenIdentifierData identifierData=RMStateStoreUtils.readRMDelegationTokenIdentifierData(inBuf);
    assertEquals("Found unexpected data still in the InputStream",-1,inBuf.read());
    RMDelegationTokenIdentifier identifier=identifierData.getTokenIdentifier();
    assertEquals("alice",identifier.getUser().getUserName());
    assertEquals(new Text("bob"),identifier.getRenewer());
    assertEquals("colin",identifier.getUser().getRealUser().getUserName());
    assertEquals(123,identifier.getIssueDate());
    assertEquals(321,identifier.getMasterKeyId());
    assertEquals(314,identifier.getMaxDate());
    assertEquals(12345,identifier.getSequenceNumber());
    assertEquals(42,identifierData.getRenewDate());
  }
}
