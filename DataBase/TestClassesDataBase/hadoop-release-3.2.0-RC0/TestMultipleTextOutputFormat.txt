public class TestMultipleTextOutputFormat {
  private static JobConf defaultConf=new JobConf();
  private static FileSystem localFs=null;
static {
    try {
      localFs=FileSystem.getLocal(defaultConf);
    }
 catch (    IOException e) {
      throw new RuntimeException("init failure",e);
    }
  }
  private static String attempt="attempt_200707121733_0001_m_000000_0";
  private static Path workDir=new Path(new Path(new Path(System.getProperty("test.build.data","."),"data"),FileOutputCommitter.TEMP_DIR_NAME),"_" + attempt);
  private static void writeData(  RecordWriter<Text,Text> rw) throws IOException {
    for (int i=10; i < 40; i++) {
      String k="" + i;
      String v="" + i;
      rw.write(new Text(k),new Text(v));
    }
  }
static class KeyBasedMultipleTextOutputFormat extends MultipleTextOutputFormat<Text,Text> {
    protected String generateFileNameForKeyValue(    Text key,    Text v,    String name){
      return key.toString().substring(0,1) + "-" + name;
    }
  }
  private static void test1(  JobConf job) throws IOException {
    FileSystem fs=FileSystem.getLocal(job);
    String name="part-00000";
    KeyBasedMultipleTextOutputFormat theOutputFormat=new KeyBasedMultipleTextOutputFormat();
    RecordWriter<Text,Text> rw=theOutputFormat.getRecordWriter(fs,job,name,null);
    writeData(rw);
    rw.close(null);
  }
  private static void test2(  JobConf job) throws IOException {
    FileSystem fs=FileSystem.getLocal(job);
    String name="part-00000";
    job.set(JobContext.MAP_INPUT_FILE,"1/2/3");
    job.set("mapred.outputformat.numOfTrailingLegs","2");
    MultipleTextOutputFormat<Text,Text> theOutputFormat=new MultipleTextOutputFormat<Text,Text>();
    RecordWriter<Text,Text> rw=theOutputFormat.getRecordWriter(fs,job,name,null);
    writeData(rw);
    rw.close(null);
  }
  @Test public void testFormat() throws Exception {
    JobConf job=new JobConf();
    job.set(JobContext.TASK_ATTEMPT_ID,attempt);
    FileOutputFormat.setOutputPath(job,workDir.getParent().getParent());
    FileOutputFormat.setWorkOutputPath(job,workDir);
    FileSystem fs=workDir.getFileSystem(job);
    if (!fs.mkdirs(workDir)) {
      fail("Failed to create output directory");
    }
    TestMultipleTextOutputFormat.test1(job);
    TestMultipleTextOutputFormat.test2(job);
    String file_11="1-part-00000";
    File expectedFile_11=new File(new Path(workDir,file_11).toString());
    StringBuffer expectedOutput=new StringBuffer();
    for (int i=10; i < 20; i++) {
      expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
    }
    String output=UtilsForTests.slurp(expectedFile_11);
    assertEquals(output,expectedOutput.toString());
    String file_12="2-part-00000";
    File expectedFile_12=new File(new Path(workDir,file_12).toString());
    expectedOutput=new StringBuffer();
    for (int i=20; i < 30; i++) {
      expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
    }
    output=UtilsForTests.slurp(expectedFile_12);
    assertEquals(output,expectedOutput.toString());
    String file_13="3-part-00000";
    File expectedFile_13=new File(new Path(workDir,file_13).toString());
    expectedOutput=new StringBuffer();
    for (int i=30; i < 40; i++) {
      expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
    }
    output=UtilsForTests.slurp(expectedFile_13);
    assertEquals(output,expectedOutput.toString());
    String file_2="2/3";
    File expectedFile_2=new File(new Path(workDir,file_2).toString());
    expectedOutput=new StringBuffer();
    for (int i=10; i < 40; i++) {
      expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
    }
    output=UtilsForTests.slurp(expectedFile_2);
    assertEquals(output,expectedOutput.toString());
  }
}
