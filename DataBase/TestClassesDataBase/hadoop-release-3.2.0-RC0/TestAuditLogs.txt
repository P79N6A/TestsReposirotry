/** 
 * A JUnit test that audit logs are generated
 */
@RunWith(Parameterized.class) public class TestAuditLogs {
  static final String auditLogFile=PathUtils.getTestDirName(TestAuditLogs.class) + "/TestAuditLogs-audit.log";
  final boolean useAsyncLog;
  final boolean useAsyncEdits;
  @Parameters public static Collection<Object[]> data(){
    Collection<Object[]> params=new ArrayList<Object[]>();
    params.add(new Object[]{Boolean.FALSE,Boolean.FALSE});
    params.add(new Object[]{Boolean.TRUE,Boolean.FALSE});
    params.add(new Object[]{Boolean.FALSE,Boolean.TRUE});
    params.add(new Object[]{Boolean.TRUE,Boolean.TRUE});
    return params;
  }
  public TestAuditLogs(  boolean useAsyncLog,  boolean useAsyncEdits){
    this.useAsyncLog=useAsyncLog;
    this.useAsyncEdits=useAsyncEdits;
  }
  static final Pattern auditPattern=Pattern.compile("allowed=.*?\\s" + "ugi=.*?\\s" + "ip=/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\s"+ "cmd=.*?\\ssrc=.*?\\sdst=null\\s"+ "perm=.*?");
  static final Pattern successPattern=Pattern.compile(".*allowed=true.*");
  static final Pattern webOpenPattern=Pattern.compile(".*cmd=open.*proto=webhdfs.*");
  static final String username="bob";
  static final String[] groups={"group1"};
  static final String fileName="/srcdat";
  DFSTestUtil util;
  MiniDFSCluster cluster;
  FileSystem fs;
  String fnames[];
  Configuration conf;
  UserGroupInformation userGroupInfo;
  @Before public void setupCluster() throws Exception {
    configureAuditLogs();
    conf=new HdfsConfiguration();
    final long precision=1L;
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,precision);
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_AUDIT_LOG_ASYNC_KEY,useAsyncLog);
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_EDITS_ASYNC_LOGGING,useAsyncEdits);
    util=new DFSTestUtil.Builder().setName("TestAuditAllowed").setNumFiles(20).build();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
    fs=cluster.getFileSystem();
    util.createFiles(fs,fileName);
    Logger logger=((Log4JLogger)FSNamesystem.auditLog).getLogger();
    @SuppressWarnings("unchecked") List<Appender> appenders=Collections.list(logger.getAllAppenders());
    assertEquals(1,appenders.size());
    assertEquals(useAsyncLog,appenders.get(0) instanceof AsyncAppender);
    fnames=util.getFileNames(fileName);
    util.waitReplication(fs,fileName,(short)3);
    userGroupInfo=UserGroupInformation.createUserForTesting(username,groups);
  }
  @After public void teardownCluster() throws Exception {
    util.cleanup(fs,"/srcdat");
    if (fs != null) {
      fs.close();
      fs=null;
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * test that allowed operation puts proper entry in audit log 
 */
  @Test public void testAuditAllowed() throws Exception {
    final Path file=new Path(fnames[0]);
    FileSystem userfs=DFSTestUtil.getFileSystemAs(userGroupInfo,conf);
    setupAuditLogs();
    InputStream istream=userfs.open(file);
    int val=istream.read();
    istream.close();
    verifyAuditLogs(true);
    assertTrue("failed to read from file",val >= 0);
  }
  /** 
 * test that allowed stat puts proper entry in audit log 
 */
  @Test public void testAuditAllowedStat() throws Exception {
    final Path file=new Path(fnames[0]);
    FileSystem userfs=DFSTestUtil.getFileSystemAs(userGroupInfo,conf);
    setupAuditLogs();
    FileStatus st=userfs.getFileStatus(file);
    verifyAuditLogs(true);
    assertTrue("failed to stat file",st != null && st.isFile());
  }
  /** 
 * test that denied operation puts proper entry in audit log 
 */
  @Test public void testAuditDenied() throws Exception {
    final Path file=new Path(fnames[0]);
    FileSystem userfs=DFSTestUtil.getFileSystemAs(userGroupInfo,conf);
    fs.setPermission(file,new FsPermission((short)0600));
    fs.setOwner(file,"root",null);
    setupAuditLogs();
    try {
      userfs.open(file);
      fail("open must not succeed");
    }
 catch (    AccessControlException e) {
      System.out.println("got access denied, as expected.");
    }
    verifyAuditLogs(false);
  }
  /** 
 * test that access via webhdfs puts proper entry in audit log 
 */
  @Test public void testAuditWebHdfs() throws Exception {
    final Path file=new Path(fnames[0]);
    fs.setPermission(file,new FsPermission((short)0644));
    fs.setOwner(file,"root",null);
    setupAuditLogs();
    WebHdfsFileSystem webfs=WebHdfsTestUtil.getWebHdfsFileSystemAs(userGroupInfo,conf,WebHdfsConstants.WEBHDFS_SCHEME);
    InputStream istream=webfs.open(file);
    int val=istream.read();
    istream.close();
    verifyAuditLogsRepeat(true,3);
    assertTrue("failed to read from file",val >= 0);
  }
  /** 
 * test that stat via webhdfs puts proper entry in audit log 
 */
  @Test public void testAuditWebHdfsStat() throws Exception {
    final Path file=new Path(fnames[0]);
    fs.setPermission(file,new FsPermission((short)0644));
    fs.setOwner(file,"root",null);
    setupAuditLogs();
    WebHdfsFileSystem webfs=WebHdfsTestUtil.getWebHdfsFileSystemAs(userGroupInfo,conf,WebHdfsConstants.WEBHDFS_SCHEME);
    FileStatus st=webfs.getFileStatus(file);
    verifyAuditLogs(true);
    assertTrue("failed to stat file",st != null && st.isFile());
  }
  /** 
 * test that denied access via webhdfs puts proper entry in audit log 
 */
  @Test public void testAuditWebHdfsDenied() throws Exception {
    final Path file=new Path(fnames[0]);
    fs.setPermission(file,new FsPermission((short)0600));
    fs.setOwner(file,"root",null);
    setupAuditLogs();
    try {
      WebHdfsFileSystem webfs=WebHdfsTestUtil.getWebHdfsFileSystemAs(userGroupInfo,conf,WebHdfsConstants.WEBHDFS_SCHEME);
      InputStream istream=webfs.open(file);
      int val=istream.read();
      fail("open+read must not succeed, got " + val);
    }
 catch (    AccessControlException E) {
      System.out.println("got access denied, as expected.");
    }
    verifyAuditLogsRepeat(false,2);
  }
  /** 
 * test that open via webhdfs puts proper entry in audit log 
 */
  @Test public void testAuditWebHdfsOpen() throws Exception {
    final Path file=new Path(fnames[0]);
    fs.setPermission(file,new FsPermission((short)0644));
    fs.setOwner(file,"root",null);
    setupAuditLogs();
    WebHdfsFileSystem webfs=WebHdfsTestUtil.getWebHdfsFileSystemAs(userGroupInfo,conf,WebHdfsConstants.WEBHDFS_SCHEME);
    webfs.open(file).read();
    verifyAuditLogsCheckPattern(true,3,webOpenPattern);
  }
  /** 
 * make sure that "\r\n" isn't made into a newline in audit log 
 */
  @Test public void testAuditCharacterEscape() throws Exception {
    final Path file=new Path("foo" + "\r\n" + "bar");
    setupAuditLogs();
    fs.create(file);
    verifyAuditLogsRepeat(true,1);
  }
  /** 
 * Sets up log4j logger for auditlogs 
 */
  private void setupAuditLogs() throws IOException {
    Logger logger=((Log4JLogger)FSNamesystem.auditLog).getLogger();
    logger.setLevel(Level.INFO);
  }
  private void configureAuditLogs() throws IOException {
    LogManager.shutdown();
    File file=new File(auditLogFile);
    if (file.exists()) {
      assertTrue(file.delete());
    }
    Logger logger=((Log4JLogger)FSNamesystem.auditLog).getLogger();
    logger.setLevel(Level.OFF);
    PatternLayout layout=new PatternLayout("%m%n");
    RollingFileAppender appender=new RollingFileAppender(layout,auditLogFile);
    logger.addAppender(appender);
  }
  private void verifyAuditLogs(  boolean expectSuccess) throws IOException {
    verifyAuditLogsRepeat(expectSuccess,1);
  }
  private void verifyAuditLogsRepeat(  boolean expectSuccess,  int ndupe) throws IOException {
    Logger logger=((Log4JLogger)FSNamesystem.auditLog).getLogger();
    logger.setLevel(Level.OFF);
    Enumeration<?> appenders=logger.getAllAppenders();
    while (appenders.hasMoreElements()) {
      Appender appender=(Appender)appenders.nextElement();
      appender.close();
    }
    BufferedReader reader=new BufferedReader(new FileReader(auditLogFile));
    String line=null;
    boolean ret=true;
    try {
      for (int i=0; i < ndupe; i++) {
        line=reader.readLine();
        assertNotNull(line);
        assertTrue("Expected audit event not found in audit log",auditPattern.matcher(line).matches());
        ret&=successPattern.matcher(line).matches();
      }
      assertNull("Unexpected event in audit log",reader.readLine());
      assertTrue("Expected success=" + expectSuccess,ret == expectSuccess);
    }
  finally {
      reader.close();
    }
  }
  private void verifyAuditLogsCheckPattern(  boolean expectSuccess,  int ndupe,  Pattern pattern) throws IOException {
    Logger logger=((Log4JLogger)FSNamesystem.auditLog).getLogger();
    logger.setLevel(Level.OFF);
    Enumeration<?> appenders=logger.getAllAppenders();
    while (appenders.hasMoreElements()) {
      Appender appender=(Appender)appenders.nextElement();
      appender.close();
    }
    BufferedReader reader=new BufferedReader(new FileReader(auditLogFile));
    String line=null;
    boolean ret=true;
    boolean patternMatches=false;
    try {
      for (int i=0; i < ndupe; i++) {
        line=reader.readLine();
        assertNotNull(line);
        patternMatches|=pattern.matcher(line).matches();
        ret&=successPattern.matcher(line).matches();
      }
      assertNull("Unexpected event in audit log",reader.readLine());
      assertTrue("Expected audit event not found in audit log",patternMatches);
      assertTrue("Expected success=" + expectSuccess,ret == expectSuccess);
    }
  finally {
      reader.close();
    }
  }
}
