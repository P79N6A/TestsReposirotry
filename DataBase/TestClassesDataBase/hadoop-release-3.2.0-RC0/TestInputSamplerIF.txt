static class TestInputSamplerIF extends InputFormat<IntWritable,NullWritable> {
  final int maxDepth;
  final ArrayList<InputSplit> splits=new ArrayList<InputSplit>();
  TestInputSamplerIF(  int maxDepth,  int numSplits,  int... splitInit){
    this.maxDepth=maxDepth;
    assert splitInit.length == numSplits;
    for (int i=0; i < numSplits; ++i) {
      splits.add(new SequentialSplit(splitInit[i]));
    }
  }
  public List<InputSplit> getSplits(  JobContext context) throws IOException, InterruptedException {
    return splits;
  }
  public RecordReader<IntWritable,NullWritable> createRecordReader(  final InputSplit split,  TaskAttemptContext context) throws IOException, InterruptedException {
    return new RecordReader<IntWritable,NullWritable>(){
      private int maxVal;
      private final IntWritable i=new IntWritable();
      public void initialize(      InputSplit split,      TaskAttemptContext context) throws IOException, InterruptedException {
        i.set(((SequentialSplit)split).getInit() - 1);
        maxVal=i.get() + maxDepth + 1;
      }
      public boolean nextKeyValue(){
        i.set(i.get() + 1);
        return i.get() < maxVal;
      }
      public IntWritable getCurrentKey(){
        return i;
      }
      public NullWritable getCurrentValue(){
        return NullWritable.get();
      }
      public float getProgress(){
        return 1.0f;
      }
      public void close(){
      }
    }
;
  }
}
