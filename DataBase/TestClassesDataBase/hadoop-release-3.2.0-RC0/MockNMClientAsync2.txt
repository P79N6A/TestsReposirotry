private class MockNMClientAsync2 extends NMClientAsyncImpl {
  private CyclicBarrier barrierA;
  private CyclicBarrier barrierB;
  protected MockNMClientAsync2(  CyclicBarrier barrierA,  CyclicBarrier barrierB,  CyclicBarrier barrierC) throws YarnException, IOException {
    super(MockNMClientAsync2.class.getName(),mockNMClient(0),new TestCallbackHandler2(barrierC));
    this.barrierA=barrierA;
    this.barrierB=barrierB;
  }
private class MockContainerEventProcessor extends ContainerEventProcessor {
    public MockContainerEventProcessor(    ContainerEvent event){
      super(event);
    }
    @Override public void run(){
      try {
        if (event.getType() == ContainerEventType.START_CONTAINER) {
          barrierA.await();
          barrierB.await();
        }
        super.run();
        if (event.getType() == ContainerEventType.STOP_CONTAINER) {
          barrierB.await();
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      BrokenBarrierException e) {
        e.printStackTrace();
      }
    }
  }
  @Override protected ContainerEventProcessor getContainerEventProcessor(  ContainerEvent event){
    return new MockContainerEventProcessor(event);
  }
}
