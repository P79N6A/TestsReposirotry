/** 
 * Verify that incremental block reports are generated in response to block additions/deletions.
 */
public class TestIncrementalBlockReports {
  public static final Logger LOG=LoggerFactory.getLogger(TestIncrementalBlockReports.class);
  private static final short DN_COUNT=1;
  private static final long DUMMY_BLOCK_ID=5678;
  private static final long DUMMY_BLOCK_LENGTH=1024 * 1024;
  private static final long DUMMY_BLOCK_GENSTAMP=1000;
  private MiniDFSCluster cluster=null;
  private Configuration conf;
  private NameNode singletonNn;
  private DataNode singletonDn;
  private BPOfferService bpos;
  private BPServiceActor actor;
  private String storageUuid;
  @Before public void startCluster() throws IOException {
    conf=new HdfsConfiguration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(DN_COUNT).build();
    singletonNn=cluster.getNameNode();
    singletonDn=cluster.getDataNodes().get(0);
    bpos=singletonDn.getAllBpOs().get(0);
    actor=bpos.getBPServiceActors().get(0);
    try (FsDatasetSpi.FsVolumeReferences volumes=singletonDn.getFSDataset().getFsVolumeReferences()){
      storageUuid=volumes.get(0).getStorageID();
    }
   }
  private static Block getDummyBlock(){
    return new Block(DUMMY_BLOCK_ID,DUMMY_BLOCK_LENGTH,DUMMY_BLOCK_GENSTAMP);
  }
  /** 
 * Inject a fake 'received' block into the BPServiceActor state.
 */
  private void injectBlockReceived(){
    ReceivedDeletedBlockInfo rdbi=new ReceivedDeletedBlockInfo(getDummyBlock(),BlockStatus.RECEIVED_BLOCK,null);
    DatanodeStorage s=singletonDn.getFSDataset().getStorage(storageUuid);
    actor.getIbrManager().notifyNamenodeBlock(rdbi,s,false);
  }
  /** 
 * Inject a fake 'deleted' block into the BPServiceActor state.
 */
  private void injectBlockDeleted(){
    ReceivedDeletedBlockInfo rdbi=new ReceivedDeletedBlockInfo(getDummyBlock(),BlockStatus.DELETED_BLOCK,null);
    actor.getIbrManager().addRDBI(rdbi,singletonDn.getFSDataset().getStorage(storageUuid));
  }
  /** 
 * Spy on calls from the DN to the NN.
 * @return spy object that can be used for Mockito verification.
 */
  DatanodeProtocolClientSideTranslatorPB spyOnDnCallsToNn(){
    return InternalDataNodeTestUtils.spyOnBposToNN(singletonDn,singletonNn);
  }
  /** 
 * Ensure that an IBR is generated immediately for a block received by the DN.
 * @throws InterruptedException
 * @throws IOException
 */
  @Test(timeout=60000) public void testReportBlockReceived() throws InterruptedException, IOException {
    try {
      DatanodeProtocolClientSideTranslatorPB nnSpy=spyOnDnCallsToNn();
      injectBlockReceived();
      Thread.sleep(2000);
      Mockito.verify(nnSpy,times(1)).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
    }
  finally {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * Ensure that a delayed IBR is generated for a block deleted on the DN.
 * @throws InterruptedException
 * @throws IOException
 */
  @Test(timeout=60000) public void testReportBlockDeleted() throws InterruptedException, IOException {
    try {
      DataNodeTestUtils.triggerBlockReport(singletonDn);
      DatanodeProtocolClientSideTranslatorPB nnSpy=spyOnDnCallsToNn();
      injectBlockDeleted();
      Thread.sleep(2000);
      Mockito.verify(nnSpy,times(0)).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
      DataNodeTestUtils.triggerHeartbeat(singletonDn);
      Thread.sleep(2000);
      Mockito.verify(nnSpy,times(1)).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
    }
  finally {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * Add a received block entry and then replace it. Ensure that a single IBR is generated and that pending receive request state is cleared. This test case verifies the failure in HDFS-5922.
 * @throws InterruptedException
 * @throws IOException
 */
  @Test(timeout=60000) public void testReplaceReceivedBlock() throws InterruptedException, IOException {
    try {
      DatanodeProtocolClientSideTranslatorPB nnSpy=spyOnDnCallsToNn();
      injectBlockReceived();
      injectBlockReceived();
      Thread.sleep(2000);
      Mockito.verify(nnSpy,atLeastOnce()).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
      assertFalse(actor.getIbrManager().sendImmediately());
    }
  finally {
      cluster.shutdown();
      cluster=null;
    }
  }
}
