/** 
 * Unit tests for node attribute manager.
 */
public class TestNodeAttributesManager {
  private NodeAttributesManager attributesManager;
  private final static String[] PREFIXES=new String[]{"yarn.test1.io","yarn.test2.io","yarn.test3.io"};
  private final static String[] HOSTNAMES=new String[]{"host1","host2","host3"};
  @Before public void init() throws IOException {
    Configuration conf=new Configuration();
    attributesManager=new NodeAttributesManagerImpl();
    conf.setClass(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_IMPL_CLASS,FileSystemNodeAttributeStore.class,NodeAttributeStore.class);
    conf=NodeAttributeTestUtils.getRandomDirConf(conf);
    attributesManager.init(conf);
    attributesManager.start();
  }
  @After public void cleanUp(){
    if (attributesManager != null) {
      attributesManager.stop();
    }
  }
  private Set<NodeAttribute> createAttributesForTest(  String attributePrefix,  int numOfAttributes,  String attributeNamePrefix,  String attributeValuePrefix){
    Set<NodeAttribute> attributes=new HashSet<>();
    for (int i=0; i < numOfAttributes; i++) {
      NodeAttribute attribute=NodeAttribute.newInstance(attributePrefix,attributeNamePrefix + "_" + i,NodeAttributeType.STRING,attributeValuePrefix + "_" + i);
      attributes.add(attribute);
    }
    return attributes;
  }
  private boolean sameAttributeSet(  Set<NodeAttribute> set1,  Set<NodeAttribute> set2){
    return Sets.difference(set1,set2).isEmpty();
  }
  @Test public void testAddNodeAttributes() throws IOException {
    Map<String,Set<NodeAttribute>> toAddAttributes=new HashMap<>();
    Map<NodeAttribute,AttributeValue> nodeAttributes;
    toAddAttributes.put(HOSTNAMES[0],createAttributesForTest(PREFIXES[0],3,"A","host1_v1"));
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(3,nodeAttributes.size());
    Assert.assertTrue(sameAttributeSet(toAddAttributes.get(HOSTNAMES[0]),nodeAttributes.keySet()));
    toAddAttributes.clear();
    toAddAttributes.put(HOSTNAMES[1],createAttributesForTest(PREFIXES[0],2,"A","host2_v1"));
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(3,nodeAttributes.size());
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[1]);
    Assert.assertEquals(2,nodeAttributes.size());
    Assert.assertTrue(sameAttributeSet(toAddAttributes.get(HOSTNAMES[1]),nodeAttributes.keySet()));
    Set<NodeAttribute> clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[0]));
    Assert.assertEquals(3,clusterAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet("non_exist_prefix"));
    Assert.assertEquals(0,clusterAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(null);
    Assert.assertEquals(3,clusterAttributes.size());
    toAddAttributes.clear();
    toAddAttributes.put(HOSTNAMES[0],createAttributesForTest(PREFIXES[1],10,"C","host1_v2"));
    toAddAttributes.put(HOSTNAMES[1],createAttributesForTest(PREFIXES[1],20,"C","host1_v2"));
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(13,nodeAttributes.size());
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[1]);
    Assert.assertEquals(22,nodeAttributes.size());
  }
  @Test public void testRemoveNodeAttributes() throws IOException {
    Map<String,Set<NodeAttribute>> toAddAttributes=new HashMap<>();
    Map<String,Set<NodeAttribute>> toRemoveAttributes=new HashMap<>();
    Set<NodeAttribute> allAttributesPerPrefix=new HashSet<>();
    Map<NodeAttribute,AttributeValue> nodeAttributes;
    Set<NodeAttribute> host1set=new HashSet<>();
    Set<NodeAttribute> host1set1=createAttributesForTest(PREFIXES[0],3,"A","host1_v1");
    Set<NodeAttribute> host1set2=createAttributesForTest(PREFIXES[1],5,"B","host1_v1");
    host1set.addAll(host1set1);
    host1set.addAll(host1set2);
    Set<NodeAttribute> host2set=new HashSet<>();
    Set<NodeAttribute> host2set1=createAttributesForTest(PREFIXES[0],2,"A","host2_v1");
    Set<NodeAttribute> host2set2=createAttributesForTest(PREFIXES[2],2,"C","host2_v3");
    host2set.addAll(host2set1);
    host2set.addAll(host2set2);
    toAddAttributes.put(HOSTNAMES[0],host1set);
    toAddAttributes.put(HOSTNAMES[1],host2set);
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(8,nodeAttributes.size());
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[1]);
    Assert.assertEquals(4,nodeAttributes.size());
    allAttributesPerPrefix=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[0]));
    Assert.assertEquals(3,allAttributesPerPrefix.size());
    allAttributesPerPrefix=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[1]));
    Assert.assertEquals(5,allAttributesPerPrefix.size());
    allAttributesPerPrefix=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[2]));
    Assert.assertEquals(2,allAttributesPerPrefix.size());
    Set<NodeAttribute> attributes2rm1=new HashSet<>();
    attributes2rm1.add(NodeAttribute.newInstance(PREFIXES[0],"A_2",NodeAttributeType.STRING,"anyValue"));
    toRemoveAttributes.put(HOSTNAMES[0],attributes2rm1);
    attributesManager.removeNodeAttributes(toRemoveAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(7,nodeAttributes.size());
    attributes2rm1.clear();
    toRemoveAttributes.clear();
    attributes2rm1.add(NodeAttribute.newInstance(PREFIXES[0],"non_exist_name",NodeAttributeType.STRING,"anyValue"));
    toRemoveAttributes.put(HOSTNAMES[0],attributes2rm1);
    attributesManager.removeNodeAttributes(toRemoveAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(7,nodeAttributes.size());
    Set<NodeAttribute> attributes2rm2=new HashSet<>();
    attributes2rm2.add(NodeAttribute.newInstance(PREFIXES[0],"A_2",NodeAttributeType.STRING,"anyValue"));
    toRemoveAttributes.clear();
    toRemoveAttributes.put(HOSTNAMES[1],attributes2rm2);
    attributesManager.removeNodeAttributes(toRemoveAttributes);
    allAttributesPerPrefix=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[0]));
    Assert.assertEquals(2,allAttributesPerPrefix.size());
  }
  @Test public void testReplaceNodeAttributes() throws IOException {
    Map<String,Set<NodeAttribute>> toAddAttributes=new HashMap<>();
    Map<String,Set<NodeAttribute>> toReplaceMap=new HashMap<>();
    Map<NodeAttribute,AttributeValue> nodeAttributes;
    Set<NodeAttribute> filteredAttributes;
    Set<NodeAttribute> clusterAttributes;
    toAddAttributes.put(HOSTNAMES[0],createAttributesForTest(PREFIXES[0],3,"A","host1_v1"));
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(3,nodeAttributes.size());
    toAddAttributes.clear();
    toAddAttributes.put(HOSTNAMES[0],createAttributesForTest(NodeAttribute.PREFIX_DISTRIBUTED,10,"dist-node-attribute","dist_v1"));
    attributesManager.addNodeAttributes(toAddAttributes);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(13,nodeAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(NodeAttribute.PREFIX_DISTRIBUTED,PREFIXES[0]));
    Assert.assertEquals(13,clusterAttributes.size());
    Set<NodeAttribute> toReplaceAttributes=createAttributesForTest(NodeAttribute.PREFIX_DISTRIBUTED,5,"dist-node-attribute","dist_v2");
    attributesManager.replaceNodeAttributes(NodeAttribute.PREFIX_DISTRIBUTED,ImmutableMap.of(HOSTNAMES[0],toReplaceAttributes));
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(8,nodeAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(NodeAttribute.PREFIX_DISTRIBUTED,PREFIXES[0]));
    Assert.assertEquals(8,clusterAttributes.size());
    filteredAttributes=NodeLabelUtil.filterAttributesByPrefix(nodeAttributes.keySet(),NodeAttribute.PREFIX_DISTRIBUTED);
    Assert.assertEquals(5,filteredAttributes.size());
    Assert.assertTrue(filteredAttributes.stream().allMatch(nodeAttribute -> nodeAttribute.getAttributeValue().startsWith("dist_v2")));
    filteredAttributes=NodeLabelUtil.filterAttributesByPrefix(nodeAttributes.keySet(),PREFIXES[0]);
    Assert.assertEquals(3,filteredAttributes.size());
    toReplaceAttributes=createAttributesForTest(NodeAttribute.PREFIX_DISTRIBUTED,1,"dist-node-attribute-v2","dist_v3");
    attributesManager.replaceNodeAttributes(NodeAttribute.PREFIX_DISTRIBUTED,ImmutableMap.of(HOSTNAMES[0],toReplaceAttributes));
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(4,nodeAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(NodeAttribute.PREFIX_DISTRIBUTED));
    Assert.assertEquals(1,clusterAttributes.size());
    NodeAttribute attr=clusterAttributes.iterator().next();
    Assert.assertEquals("dist-node-attribute-v2_0",attr.getAttributeKey().getAttributeName());
    Assert.assertEquals(NodeAttribute.PREFIX_DISTRIBUTED,attr.getAttributeKey().getAttributePrefix());
    Assert.assertEquals("dist_v3_0",attr.getAttributeValue());
    toReplaceMap.put(HOSTNAMES[0],createAttributesForTest(PREFIXES[1],2,"B","B_v1"));
    attributesManager.replaceNodeAttributes(null,toReplaceMap);
    nodeAttributes=attributesManager.getAttributesForNode(HOSTNAMES[0]);
    Assert.assertEquals(2,nodeAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(PREFIXES[1]));
    Assert.assertEquals(2,clusterAttributes.size());
    clusterAttributes=attributesManager.getClusterNodeAttributes(Sets.newHashSet(NodeAttribute.PREFIX_DISTRIBUTED));
    Assert.assertEquals(0,clusterAttributes.size());
  }
}
