@RunWith(value=Parameterized.class) public class TestJobHistoryEntities {
  private final String historyFileName="job_1329348432655_0001-1329348443227-user-Sleep+job-1329348468601-10-1-SUCCEEDED-default.jhist";
  private final String historyFileNameZeroReduceTasks="job_1416424547277_0002-1416424775281-root-TeraGen-1416424785433-2-0-SUCCEEDED-default-1416424779349.jhist";
  private final String confFileName="job_1329348432655_0001_conf.xml";
  private final Configuration conf=new Configuration();
  private final JobACLsManager jobAclsManager=new JobACLsManager(conf);
  private boolean loadTasks;
  private JobId jobId=MRBuilderUtils.newJobId(1329348432655l,1,1);
  Path fullHistoryPath=new Path(this.getClass().getClassLoader().getResource(historyFileName).getFile());
  Path fullHistoryPathZeroReduces=new Path(this.getClass().getClassLoader().getResource(historyFileNameZeroReduceTasks).getFile());
  Path fullConfPath=new Path(this.getClass().getClassLoader().getResource(confFileName).getFile());
  private CompletedJob completedJob;
  public TestJobHistoryEntities(  boolean loadTasks) throws Exception {
    this.loadTasks=loadTasks;
  }
  @Parameters public static Collection<Object[]> data(){
    List<Object[]> list=new ArrayList<Object[]>(2);
    list.add(new Object[]{true});
    list.add(new Object[]{false});
    return list;
  }
  @Test(timeout=100000) public void testCompletedJob() throws Exception {
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    when(info.getHistoryFile()).thenReturn(fullHistoryPath);
    completedJob=new CompletedJob(conf,jobId,fullHistoryPath,loadTasks,"user",info,jobAclsManager);
    assertEquals(loadTasks,completedJob.tasksLoaded.get());
    assertEquals(1,completedJob.getAMInfos().size());
    assertEquals(10,completedJob.getCompletedMaps());
    assertEquals(1,completedJob.getCompletedReduces());
    assertEquals(12,completedJob.getTasks().size());
    assertEquals(true,completedJob.tasksLoaded.get());
    assertEquals(10,completedJob.getTasks(TaskType.MAP).size());
    assertEquals(2,completedJob.getTasks(TaskType.REDUCE).size());
    assertEquals("user",completedJob.getUserName());
    assertEquals(JobState.SUCCEEDED,completedJob.getState());
    JobReport jobReport=completedJob.getReport();
    assertEquals("user",jobReport.getUser());
    assertEquals(JobState.SUCCEEDED,jobReport.getJobState());
    assertEquals(fullHistoryPath.toString(),jobReport.getHistoryFile());
  }
  @Test(timeout=100000) public void testCopmletedJobReportWithZeroTasks() throws Exception {
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    when(info.getHistoryFile()).thenReturn(fullHistoryPathZeroReduces);
    completedJob=new CompletedJob(conf,jobId,fullHistoryPathZeroReduces,loadTasks,"user",info,jobAclsManager);
    JobReport jobReport=completedJob.getReport();
    assertEquals(0,completedJob.getTotalReduces());
    assertEquals(0,completedJob.getCompletedReduces());
    assertEquals(1.0,jobReport.getReduceProgress(),0.001);
    assertEquals(fullHistoryPathZeroReduces.toString(),jobReport.getHistoryFile());
  }
  @Test(timeout=10000) public void testCompletedTask() throws Exception {
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    completedJob=new CompletedJob(conf,jobId,fullHistoryPath,loadTasks,"user",info,jobAclsManager);
    TaskId mt1Id=MRBuilderUtils.newTaskId(jobId,0,TaskType.MAP);
    TaskId rt1Id=MRBuilderUtils.newTaskId(jobId,0,TaskType.REDUCE);
    Map<TaskId,Task> mapTasks=completedJob.getTasks(TaskType.MAP);
    Map<TaskId,Task> reduceTasks=completedJob.getTasks(TaskType.REDUCE);
    assertEquals(10,mapTasks.size());
    assertEquals(2,reduceTasks.size());
    Task mt1=mapTasks.get(mt1Id);
    assertEquals(1,mt1.getAttempts().size());
    assertEquals(TaskState.SUCCEEDED,mt1.getState());
    TaskReport mt1Report=mt1.getReport();
    assertEquals(TaskState.SUCCEEDED,mt1Report.getTaskState());
    assertEquals(mt1Id,mt1Report.getTaskId());
    Task rt1=reduceTasks.get(rt1Id);
    assertEquals(1,rt1.getAttempts().size());
    assertEquals(TaskState.SUCCEEDED,rt1.getState());
    TaskReport rt1Report=rt1.getReport();
    assertEquals(TaskState.SUCCEEDED,rt1Report.getTaskState());
    assertEquals(rt1Id,rt1Report.getTaskId());
  }
  @Test(timeout=10000) public void testCompletedTaskAttempt() throws Exception {
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    completedJob=new CompletedJob(conf,jobId,fullHistoryPath,loadTasks,"user",info,jobAclsManager);
    TaskId mt1Id=MRBuilderUtils.newTaskId(jobId,0,TaskType.MAP);
    TaskId rt1Id=MRBuilderUtils.newTaskId(jobId,0,TaskType.REDUCE);
    TaskAttemptId mta1Id=MRBuilderUtils.newTaskAttemptId(mt1Id,0);
    TaskAttemptId rta1Id=MRBuilderUtils.newTaskAttemptId(rt1Id,0);
    Task mt1=completedJob.getTask(mt1Id);
    Task rt1=completedJob.getTask(rt1Id);
    TaskAttempt mta1=mt1.getAttempt(mta1Id);
    assertEquals(TaskAttemptState.SUCCEEDED,mta1.getState());
    assertEquals("localhost:45454",mta1.getAssignedContainerMgrAddress());
    assertEquals("localhost:9999",mta1.getNodeHttpAddress());
    TaskAttemptReport mta1Report=mta1.getReport();
    assertEquals(TaskAttemptState.SUCCEEDED,mta1Report.getTaskAttemptState());
    assertEquals("localhost",mta1Report.getNodeManagerHost());
    assertEquals(45454,mta1Report.getNodeManagerPort());
    assertEquals(9999,mta1Report.getNodeManagerHttpPort());
    TaskAttempt rta1=rt1.getAttempt(rta1Id);
    assertEquals(TaskAttemptState.SUCCEEDED,rta1.getState());
    assertEquals("localhost:45454",rta1.getAssignedContainerMgrAddress());
    assertEquals("localhost:9999",rta1.getNodeHttpAddress());
    TaskAttemptReport rta1Report=rta1.getReport();
    assertEquals(TaskAttemptState.SUCCEEDED,rta1Report.getTaskAttemptState());
    assertEquals("localhost",rta1Report.getNodeManagerHost());
    assertEquals(45454,rta1Report.getNodeManagerPort());
    assertEquals(9999,rta1Report.getNodeManagerHttpPort());
  }
  /** 
 * Simple test of some methods of CompletedJob
 * @throws Exception
 */
  @Test(timeout=30000) public void testGetTaskAttemptCompletionEvent() throws Exception {
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    completedJob=new CompletedJob(conf,jobId,fullHistoryPath,loadTasks,"user",info,jobAclsManager);
    TaskCompletionEvent[] events=completedJob.getMapAttemptCompletionEvents(0,1000);
    assertEquals(10,completedJob.getMapAttemptCompletionEvents(0,10).length);
    int currentEventId=0;
    for (    TaskCompletionEvent taskAttemptCompletionEvent : events) {
      int eventId=taskAttemptCompletionEvent.getEventId();
      assertTrue(eventId >= currentEventId);
      currentEventId=eventId;
    }
    assertNull(completedJob.loadConfFile());
    assertEquals("Sleep job",completedJob.getName());
    assertEquals("default",completedJob.getQueueName());
    assertEquals(1.0,completedJob.getProgress(),0.001);
    assertEquals(12,completedJob.getTaskAttemptCompletionEvents(0,1000).length);
    assertEquals(10,completedJob.getTaskAttemptCompletionEvents(0,10).length);
    assertEquals(7,completedJob.getTaskAttemptCompletionEvents(5,10).length);
    assertEquals(1,completedJob.getDiagnostics().size());
    assertEquals("",completedJob.getDiagnostics().get(0));
    assertEquals(0,completedJob.getJobACLs().size());
  }
  @Test(timeout=30000) public void testCompletedJobWithDiagnostics() throws Exception {
    final String jobError="Job Diagnostics";
    JobInfo jobInfo=spy(new JobInfo());
    when(jobInfo.getErrorInfo()).thenReturn(jobError);
    when(jobInfo.getJobStatus()).thenReturn(JobState.FAILED.toString());
    when(jobInfo.getAMInfos()).thenReturn(Collections.<JobHistoryParser.AMInfo>emptyList());
    final JobHistoryParser mockParser=mock(JobHistoryParser.class);
    when(mockParser.parse()).thenReturn(jobInfo);
    HistoryFileInfo info=mock(HistoryFileInfo.class);
    when(info.getConfFile()).thenReturn(fullConfPath);
    when(info.getHistoryFile()).thenReturn(fullHistoryPath);
    CompletedJob job=new CompletedJob(conf,jobId,fullHistoryPath,loadTasks,"user",info,jobAclsManager){
      @Override protected JobHistoryParser createJobHistoryParser(      Path historyFileAbsolute) throws IOException {
        return mockParser;
      }
    }
;
    assertEquals(jobError,job.getReport().getDiagnostics());
  }
}
