public class TestWritableSerialization {
  private static final Configuration conf=new Configuration();
  @Test public void testWritableSerialization() throws Exception {
    Text before=new Text("test writable");
    Text after=SerializationTestUtil.testSerialization(conf,before);
    assertEquals(before,after);
  }
  @Test public void testWritableConfigurable() throws Exception {
    conf.set(CONF_TEST_KEY,CONF_TEST_VALUE);
    FooGenericWritable generic=new FooGenericWritable();
    generic.setConf(conf);
    Baz baz=new Baz();
    generic.set(baz);
    Baz result=SerializationTestUtil.testSerialization(conf,baz);
    assertEquals(baz,result);
    assertNotNull(result.getConf());
  }
  @Test @SuppressWarnings({"rawtypes","unchecked"}) public void testWritableComparatorJavaSerialization() throws Exception {
    Serialization ser=new JavaSerialization();
    Serializer<TestWC> serializer=ser.getSerializer(TestWC.class);
    DataOutputBuffer dob=new DataOutputBuffer();
    serializer.open(dob);
    TestWC orig=new TestWC(0);
    serializer.serialize(orig);
    serializer.close();
    Deserializer<TestWC> deserializer=ser.getDeserializer(TestWC.class);
    DataInputBuffer dib=new DataInputBuffer();
    dib.reset(dob.getData(),0,dob.getLength());
    deserializer.open(dib);
    TestWC deser=deserializer.deserialize(null);
    deserializer.close();
    assertEquals(orig,deser);
  }
static class TestWC extends WritableComparator implements Serializable {
    static final long serialVersionUID=0x4344;
    final int val;
    TestWC(){
      this(7);
    }
    TestWC(    int val){
      this.val=val;
    }
    @Override public boolean equals(    Object o){
      if (o instanceof TestWC) {
        return ((TestWC)o).val == val;
      }
      return false;
    }
    @Override public int hashCode(){
      return val;
    }
  }
}
