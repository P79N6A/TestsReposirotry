public class TestCommonNodeLabelsManager extends NodeLabelTestBase {
  DummyCommonNodeLabelsManager mgr=null;
  @Before public void before(){
    mgr=new DummyCommonNodeLabelsManager();
    Configuration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    mgr.init(conf);
    mgr.start();
  }
  @After public void after(){
    mgr.stop();
  }
  @Test(timeout=5000) public void testAddRemovelabel() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("hello"));
    verifyNodeLabelAdded(Sets.newHashSet("hello"),mgr.lastAddedlabels);
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("world"));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("hello1","world1"));
    verifyNodeLabelAdded(Sets.newHashSet("hello1","world1"),mgr.lastAddedlabels);
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Sets.newHashSet("hello","world","hello1","world1")));
    try {
      mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("hello1",false)));
      Assert.fail("IOException not thrown on exclusivity change of labels");
    }
 catch (    Exception e) {
      Assert.assertTrue("IOException is expected when exclusivity is modified",e instanceof IOException);
    }
    try {
      mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("hello1",true)));
    }
 catch (    Exception e) {
      Assert.assertFalse("IOException not expected when no change in exclusivity",e instanceof IOException);
    }
    for (    String p : Arrays.asList(null,CommonNodeLabelsManager.NO_LABEL,"xx")) {
      boolean caught=false;
      try {
        mgr.removeFromClusterNodeLabels(Arrays.asList(p));
      }
 catch (      IOException e) {
        caught=true;
      }
      Assert.assertTrue("remove label should fail " + "when label is null/empty/non-existed",caught);
    }
    mgr.removeFromClusterNodeLabels(Arrays.asList("hello"));
    assertCollectionEquals(Sets.newHashSet("hello"),mgr.lastRemovedlabels);
    Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("world","hello1","world1")));
    mgr.removeFromClusterNodeLabels(Arrays.asList("hello1","world1","world"));
    Assert.assertTrue(mgr.lastRemovedlabels.containsAll(Sets.newHashSet("hello1","world1","world")));
    Assert.assertTrue(mgr.getClusterNodeLabelNames().isEmpty());
  }
  @Test(timeout=5000) public void testAddlabelWithCase() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("HeLlO"));
    verifyNodeLabelAdded(Sets.newHashSet("HeLlO"),mgr.lastAddedlabels);
    Assert.assertFalse(mgr.getClusterNodeLabelNames().containsAll(Arrays.asList("hello")));
  }
  @Test(timeout=5000) public void testAddlabelWithExclusivity() throws Exception {
    mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("a",false),NodeLabel.newInstance("b",true)));
    Assert.assertFalse(mgr.isExclusiveNodeLabel("a"));
    Assert.assertTrue(mgr.isExclusiveNodeLabel("b"));
  }
  @Test(timeout=5000) public void testAddInvalidlabel() throws IOException {
    boolean caught=false;
    try {
      Set<String> set=new HashSet<String>();
      set.add(null);
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(set);
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("null label should not add to repo",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(CommonNodeLabelsManager.NO_LABEL));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("empty label should not add to repo",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("-?"));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("invalid label character should not add to repo",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(StringUtils.repeat("c",257)));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("too long label should not add to repo",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("-aaabbb"));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("label cannot start with \"-\"",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("_aaabbb"));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("label cannot start with \"_\"",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("a^aabbb"));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("label cannot contains other chars like ^[] ...",caught);
    caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("aa[a]bbb"));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("label cannot contains other chars like ^[] ...",caught);
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=5000) public void testAddReplaceRemoveLabelsOnNodes() throws Exception {
    boolean caught=false;
    try {
      mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("node"),toSet("label")));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("trying to set a label to a node but " + "label doesn't exist in repository should fail",caught);
    try {
      mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId(CommonNodeLabelsManager.NO_LABEL),toSet("label")));
    }
 catch (    IOException e) {
      caught=true;
    }
    Assert.assertTrue("trying to add a empty node but succeeded",caught);
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n2"),toSet("p3")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p2"),toNodeId("n2"),toSet("p3")));
    assertMapEquals(mgr.lastNodeToLabels,ImmutableMap.of(toNodeId("n2"),toSet("p3")));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n1"),toSet("p1")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p3"),toNodeId("n3"),toSet("p3")));
    assertMapEquals(mgr.lastNodeToLabels,ImmutableMap.of(toNodeId("n3"),toSet("p3"),toNodeId("n1"),toSet("p1")));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p3"),toNodeId("n3"),toSet("p3")));
    assertMapEquals(mgr.lastNodeToLabels,ImmutableMap.of(toNodeId("n1"),CommonNodeLabelsManager.EMPTY_STRING_SET));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p3"),toNodeId("n3"),toSet("p3")));
    assertMapEquals(mgr.lastNodeToLabels,ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p3"),toNodeId("n3"),toSet("p3")));
    Assert.assertEquals(0,mgr.getNodeLabels().size());
    assertMapEquals(mgr.lastNodeToLabels,ImmutableMap.of(toNodeId("n1"),CommonNodeLabelsManager.EMPTY_STRING_SET,toNodeId("n2"),CommonNodeLabelsManager.EMPTY_STRING_SET,toNodeId("n3"),CommonNodeLabelsManager.EMPTY_STRING_SET));
  }
  @Test(timeout=5000) public void testRemovelabelWithNodes() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n2"),toSet("p2")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n3"),toSet("p3")));
    mgr.removeFromClusterNodeLabels(ImmutableSet.of("p1"));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n2"),toSet("p2"),toNodeId("n3"),toSet("p3")));
    assertCollectionEquals(Arrays.asList("p1"),mgr.lastRemovedlabels);
    mgr.removeFromClusterNodeLabels(ImmutableSet.of("p2","p3"));
    Assert.assertTrue(mgr.getNodeLabels().isEmpty());
    Assert.assertTrue(mgr.getClusterNodeLabelNames().isEmpty());
    assertCollectionEquals(Arrays.asList("p2","p3"),mgr.lastRemovedlabels);
  }
  @Test(timeout=5000) public void testTrimLabelsWhenAddRemoveNodeLabels() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet(" p1"));
    assertCollectionEquals(toSet("p1"),mgr.getClusterNodeLabelNames());
    mgr.removeFromClusterNodeLabels(toSet("p1 "));
    Assert.assertTrue(mgr.getClusterNodeLabelNames().isEmpty());
  }
  @Test(timeout=5000) public void testTrimLabelsWhenModifyLabelsOnNodes() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet(" p1","p2"));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1 ")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet(" p2")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p2")));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1"),toSet("  p2 ")));
    Assert.assertTrue(mgr.getNodeLabels().isEmpty());
  }
  @Test(timeout=5000) public void testReplaceLabelsOnHostsShouldUpdateNodesBelongTo() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p2"),toNodeId("n1:2"),toSet("p2")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n1:1"),toSet("p2"),toNodeId("n1:2"),toSet("p2")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    assertMapEquals(mgr.getNodeLabels(),ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n1:1"),toSet("p1"),toNodeId("n1:2"),toSet("p1")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p2")));
  }
  private void assertNodeLabelsDisabledErrorMessage(  IOException e){
    Assert.assertEquals(CommonNodeLabelsManager.NODE_LABELS_NOT_ENABLED_ERR,e.getMessage());
  }
  @Test(timeout=5000) public void testNodeLabelsDisabled() throws IOException {
    DummyCommonNodeLabelsManager mgr=new DummyCommonNodeLabelsManager();
    Configuration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,false);
    mgr.init(conf);
    mgr.start();
    boolean caught=false;
    try {
      mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x"));
    }
 catch (    IOException e) {
      assertNodeLabelsDisabledErrorMessage(e);
      caught=true;
    }
    Assert.assertTrue(caught);
    caught=false;
    try {
      mgr.removeFromClusterNodeLabels(ImmutableSet.of("x"));
    }
 catch (    IOException e) {
      assertNodeLabelsDisabledErrorMessage(e);
      caught=true;
    }
    Assert.assertTrue(caught);
    caught=false;
    try {
      mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("host",0),CommonNodeLabelsManager.EMPTY_STRING_SET));
    }
 catch (    IOException e) {
      assertNodeLabelsDisabledErrorMessage(e);
      caught=true;
    }
    Assert.assertTrue(caught);
    caught=false;
    try {
      mgr.removeLabelsFromNode(ImmutableMap.of(NodeId.newInstance("host",0),CommonNodeLabelsManager.EMPTY_STRING_SET));
    }
 catch (    IOException e) {
      assertNodeLabelsDisabledErrorMessage(e);
      caught=true;
    }
    Assert.assertTrue(caught);
    caught=false;
    try {
      mgr.replaceLabelsOnNode(ImmutableMap.of(NodeId.newInstance("host",0),CommonNodeLabelsManager.EMPTY_STRING_SET));
    }
 catch (    IOException e) {
      assertNodeLabelsDisabledErrorMessage(e);
      caught=true;
    }
    Assert.assertTrue(caught);
    caught=false;
    mgr.close();
  }
  @Test(timeout=5000) public void testLabelsToNodes() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    Map<String,Set<NodeId>> labelsToNodes=mgr.getLabelsToNodes();
    assertLabelsToNodesEquals(labelsToNodes,ImmutableMap.of("p1",toSet(toNodeId("n1"))));
    assertLabelsToNodesEquals(labelsToNodes,transposeNodeToLabels(mgr.getNodeLabels()));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p2"),toNodeId("n1:2"),toSet("p2")));
    labelsToNodes=mgr.getLabelsToNodes();
    assertLabelsToNodesEquals(labelsToNodes,ImmutableMap.of("p1",toSet(toNodeId("n1")),"p2",toSet(toNodeId("n1:1"),toNodeId("n1:2"))));
    assertLabelsToNodesEquals(labelsToNodes,transposeNodeToLabels(mgr.getNodeLabels()));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    labelsToNodes=mgr.getLabelsToNodes();
    assertLabelsToNodesEquals(labelsToNodes,ImmutableMap.of("p1",toSet(toNodeId("n1"),toNodeId("n1:1"),toNodeId("n1:2"))));
    assertLabelsToNodesEquals(labelsToNodes,transposeNodeToLabels(mgr.getNodeLabels()));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p2")));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n2"),toSet("p3")));
    labelsToNodes=mgr.getLabelsToNodes();
    assertLabelsToNodesEquals(labelsToNodes,ImmutableMap.of("p1",toSet(toNodeId("n1"),toNodeId("n1:2")),"p2",toSet(toNodeId("n1:1")),"p3",toSet(toNodeId("n2"))));
    assertLabelsToNodesEquals(labelsToNodes,transposeNodeToLabels(mgr.getNodeLabels()));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n2"),toSet("p3")));
    labelsToNodes=mgr.getLabelsToNodes();
    assertLabelsToNodesEquals(labelsToNodes,ImmutableMap.of("p1",toSet(toNodeId("n1"),toNodeId("n1:2")),"p2",toSet(toNodeId("n1:1"))));
    assertLabelsToNodesEquals(labelsToNodes,transposeNodeToLabels(mgr.getNodeLabels()));
  }
  @Test(timeout=5000) public void testLabelsToNodesForSelectedLabels() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n1:2"),toSet("p2")));
    Set<String> setlabels=new HashSet<String>(Arrays.asList(new String[]{"p1"}));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p1",toSet(toNodeId("n1:1"))));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p3")));
    assertTrue(mgr.getLabelsToNodes(setlabels).isEmpty());
    setlabels=new HashSet<String>(Arrays.asList(new String[]{"p2","p3"}));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p3",toSet(toNodeId("n1"),toNodeId("n1:1"),toNodeId("n1:2"))));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n2"),toSet("p2")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p2",toSet(toNodeId("n2")),"p3",toSet(toNodeId("n1"),toNodeId("n1:1"),toNodeId("n1:2"))));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1"),toSet("p3")));
    setlabels=new HashSet<String>(Arrays.asList(new String[]{"p1","p2","p3"}));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p2",toSet(toNodeId("n2"))));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n3"),toSet("p1")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p1",toSet(toNodeId("n3")),"p2",toSet(toNodeId("n2"))));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n2:2"),toSet("p3")));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p1",toSet(toNodeId("n3")),"p2",toSet(toNodeId("n2")),"p3",toSet(toNodeId("n2:2"))));
    setlabels=new HashSet<String>(Arrays.asList(new String[]{"p1"}));
    assertLabelsToNodesEquals(mgr.getLabelsToNodes(setlabels),ImmutableMap.of("p1",toSet(toNodeId("n3"))));
  }
  @Test(timeout=5000) public void testNoMoreThanOneLabelExistedInOneHost() throws IOException {
    boolean failed=false;
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    try {
      mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1","p2")));
    }
 catch (    IOException e) {
      failed=true;
    }
    Assert.assertTrue("Should failed when set > 1 labels on a host",failed);
    try {
      mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1","p2")));
    }
 catch (    IOException e) {
      failed=true;
    }
    Assert.assertTrue("Should failed when add > 1 labels on a host",failed);
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    try {
      mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
    }
 catch (    IOException e) {
      failed=true;
    }
    Assert.assertTrue("Should failed when #labels > 1 on a host after add",failed);
  }
  private void verifyNodeLabelAdded(  Set<String> expectedAddedLabelNames,  Collection<NodeLabel> addedNodeLabels){
    Assert.assertEquals(expectedAddedLabelNames.size(),addedNodeLabels.size());
    for (    NodeLabel label : addedNodeLabels) {
      Assert.assertTrue(expectedAddedLabelNames.contains(label.getName()));
    }
  }
  @Test(timeout=5000) public void testReplaceLabelsOnNodeInDistributedMode() throws Exception {
    mgr.stop();
    mgr=new DummyCommonNodeLabelsManager();
    Configuration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    conf.set(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE);
    mgr.init(conf);
    mgr.start();
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    Set<String> labelsByNode=mgr.getLabelsByNode(toNodeId("n1"));
    Assert.assertNull("Labels are not expected to be written to the NodeLabelStore",mgr.lastNodeToLabels);
    Assert.assertNotNull("Updated labels should be available from the Mgr",labelsByNode);
    Assert.assertTrue(labelsByNode.contains("p1"));
  }
  @Test(timeout=5000) public void testLabelsInfoToNodes() throws IOException {
    mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("p1",false),NodeLabel.newInstance("p2",true),NodeLabel.newInstance("p3",true)));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
    Map<NodeLabel,Set<NodeId>> labelsToNodes=mgr.getLabelsInfoToNodes();
    assertLabelsInfoToNodesEquals(labelsToNodes,ImmutableMap.of(NodeLabel.newInstance("p1",false),toSet(toNodeId("n1"))));
  }
  @Test(timeout=5000) public void testGetNodeLabelsInfo() throws IOException {
    mgr.addToCluserNodeLabels(Arrays.asList(NodeLabel.newInstance("p1",false),NodeLabel.newInstance("p2",true),NodeLabel.newInstance("p3",false)));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n2"),toSet("p3")));
    assertLabelInfoMapEquals(mgr.getNodeLabelsInfo(),ImmutableMap.of(toNodeId("n1"),toSet(NodeLabel.newInstance("p2",true)),toNodeId("n2"),toSet(NodeLabel.newInstance("p3",false))));
  }
}
