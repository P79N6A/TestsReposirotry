/** 
 * Tests for  {@link SlidingWindowRetryPolicy}.
 */
public class TestSlidingWindowRetryPolicy {
  private ControlledClock clock;
  private SlidingWindowRetryPolicy retryPolicy;
  @Before public void setup(){
    clock=new ControlledClock();
    retryPolicy=new SlidingWindowRetryPolicy(clock);
  }
  @Test public void testNeverRetry(){
    ContainerRetryContext retryContext=ContainerRetryContext.NEVER_RETRY_CONTEXT;
    Assert.assertFalse("never retry",retryPolicy.shouldRetry(new SlidingWindowRetryPolicy.RetryContext(retryContext),12));
  }
  @Test public void testAlwaysRetry(){
    ContainerRetryContext retryContext=ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS,null,-1,0,10);
    Assert.assertTrue("always retry",retryPolicy.shouldRetry(new SlidingWindowRetryPolicy.RetryContext(retryContext),12));
  }
  @Test public void testFailuresValidityInterval(){
    ContainerRetryContext retryContext=ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS,null,1,0,10);
    SlidingWindowRetryPolicy.RetryContext windowRetryContext=new SlidingWindowRetryPolicy.RetryContext(retryContext);
    Assert.assertTrue("retry 1",retryPolicy.shouldRetry(windowRetryContext,12));
    retryPolicy.updateRetryContext(windowRetryContext);
    clock.setTime(20);
    Assert.assertTrue("retry 2",retryPolicy.shouldRetry(windowRetryContext,12));
    retryPolicy.updateRetryContext(windowRetryContext);
    clock.setTime(40);
    Assert.assertTrue("retry 3",retryPolicy.shouldRetry(windowRetryContext,12));
    retryPolicy.updateRetryContext(windowRetryContext);
    clock.setTime(45);
    Assert.assertFalse("retry failed",retryPolicy.shouldRetry(windowRetryContext,12));
  }
}
