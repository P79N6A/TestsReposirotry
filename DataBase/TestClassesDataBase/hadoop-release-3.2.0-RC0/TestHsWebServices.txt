/** 
 * Test the History Server info web services api's. Also test non-existent urls. /ws/v1/history /ws/v1/history/info
 */
public class TestHsWebServices extends JerseyTestBase {
  private static Configuration conf=new Configuration();
  private static HistoryContext appContext;
  private static HsWebApp webApp;
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      appContext=new MockHistoryContext(0,1,1,1);
      JobHistory jobHistoryService=new JobHistory();
      HistoryContext historyContext=(HistoryContext)jobHistoryService;
      webApp=new HsWebApp(historyContext);
      bind(JAXBContextResolver.class);
      bind(HsWebServices.class);
      bind(GenericExceptionHandler.class);
      bind(WebApp.class).toInstance(webApp);
      bind(AppContext.class).toInstance(appContext);
      bind(HistoryContext.class).toInstance(appContext);
      bind(Configuration.class).toInstance(conf);
      serve("/*").with(GuiceContainer.class);
    }
  }
static {
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestHsWebServices(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.mapreduce.v2.hs.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testHS() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testHSSlash() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testHSDefault() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history/").get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testHSXML() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    String xml=response.getEntity(String.class);
    verifyHSInfoXML(xml,appContext);
  }
  @Test public void testInfo() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").path("info").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testInfoSlash() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").path("info/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testInfoDefault() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").path("info/").get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyHSInfo(json.getJSONObject("historyInfo"),appContext);
  }
  @Test public void testInfoXML() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("history").path("info/").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    String xml=response.getEntity(String.class);
    verifyHSInfoXML(xml,appContext);
  }
  @Test public void testInvalidUri() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("history").path("bogus").accept(MediaType.APPLICATION_JSON).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.NOT_FOUND,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  @Test public void testInvalidUri2() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("invalid").accept(MediaType.APPLICATION_JSON).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.NOT_FOUND,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  @Test public void testInvalidAccept() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("history").accept(MediaType.TEXT_PLAIN).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.INTERNAL_SERVER_ERROR,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  public void verifyHsInfoGeneric(  String hadoopVersionBuiltOn,  String hadoopBuildVersion,  String hadoopVersion,  long startedon){
    WebServicesTestUtils.checkStringMatch("hadoopVersionBuiltOn",VersionInfo.getDate(),hadoopVersionBuiltOn);
    WebServicesTestUtils.checkStringEqual("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion);
    WebServicesTestUtils.checkStringMatch("hadoopVersion",VersionInfo.getVersion(),hadoopVersion);
    assertEquals("startedOn doesn't match: ",JobHistoryServer.historyServerTimeStamp,startedon);
  }
  public void verifyHSInfo(  JSONObject info,  AppContext ctx) throws JSONException {
    assertEquals("incorrect number of elements",4,info.length());
    verifyHsInfoGeneric(info.getString("hadoopVersionBuiltOn"),info.getString("hadoopBuildVersion"),info.getString("hadoopVersion"),info.getLong("startedOn"));
  }
  public void verifyHSInfoXML(  String xml,  AppContext ctx) throws JSONException, Exception {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(xml));
    Document dom=db.parse(is);
    NodeList nodes=dom.getElementsByTagName("historyInfo");
    assertEquals("incorrect number of elements",1,nodes.getLength());
    for (int i=0; i < nodes.getLength(); i++) {
      Element element=(Element)nodes.item(i);
      verifyHsInfoGeneric(WebServicesTestUtils.getXmlString(element,"hadoopVersionBuiltOn"),WebServicesTestUtils.getXmlString(element,"hadoopBuildVersion"),WebServicesTestUtils.getXmlString(element,"hadoopVersion"),WebServicesTestUtils.getXmlLong(element,"startedOn"));
    }
  }
}
