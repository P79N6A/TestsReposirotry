public class TestSwiftFileSystemExtendedContract extends SwiftFileSystemBaseTest {
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testOpenNonExistingFile() throws IOException {
    final Path p=new Path("/test/testOpenNonExistingFile");
    try {
      final FSDataInputStream in=fs.open(p);
      in.close();
      fail("didn't expect to get here");
    }
 catch (    FileNotFoundException fnfe) {
      LOG.debug("Expected: " + fnfe,fnfe);
    }
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testFilesystemHasURI() throws Throwable {
    assertNotNull(fs.getUri());
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testCreateFile() throws Exception {
    final Path f=new Path("/test/testCreateFile");
    final FSDataOutputStream fsDataOutputStream=fs.create(f);
    fsDataOutputStream.close();
    assertExists("created file",f);
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testWriteReadFile() throws Exception {
    final Path f=new Path("/test/test");
    final FSDataOutputStream fsDataOutputStream=fs.create(f);
    final String message="Test string";
    fsDataOutputStream.write(message.getBytes());
    fsDataOutputStream.close();
    assertExists("created file",f);
    FSDataInputStream open=null;
    try {
      open=fs.open(f);
      final byte[] bytes=new byte[512];
      final int read=open.read(bytes);
      final byte[] buffer=new byte[read];
      System.arraycopy(bytes,0,buffer,0,read);
      assertEquals(message,new String(buffer));
    }
  finally {
      fs.delete(f,false);
      IOUtils.closeStream(open);
    }
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testConfDefinesFilesystem() throws Throwable {
    Configuration conf=new Configuration();
    SwiftTestUtils.getServiceURI(conf);
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testConfIsValid() throws Throwable {
    Configuration conf=new Configuration();
    URI fsURI=SwiftTestUtils.getServiceURI(conf);
    RestClientBindings.bind(fsURI,conf);
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testGetSchemeImplemented() throws Throwable {
    String scheme=fs.getScheme();
    assertEquals(SwiftNativeFileSystem.SWIFT,scheme);
  }
  /** 
 * Assert that a filesystem is case sensitive. This is done by creating a mixed-case filename and asserting that its lower case version is not there.
 * @throws Exception failures
 */
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testFilesystemIsCaseSensitive() throws Exception {
    String mixedCaseFilename="/test/UPPER.TXT";
    Path upper=path(mixedCaseFilename);
    Path lower=path(StringUtils.toLowerCase(mixedCaseFilename));
    assertFalse("File exists" + upper,fs.exists(upper));
    assertFalse("File exists" + lower,fs.exists(lower));
    FSDataOutputStream out=fs.create(upper);
    out.writeUTF("UPPER");
    out.close();
    FileStatus upperStatus=fs.getFileStatus(upper);
    assertExists("Original upper case file" + upper,upper);
    assertPathDoesNotExist("lower case file",lower);
    out=fs.create(lower);
    out.writeUTF("l");
    out.close();
    assertExists("lower case file",lower);
    assertExists("Original upper case file " + upper,upper);
    FileStatus newStatus=fs.getFileStatus(upper);
    assertEquals("Expected status:" + upperStatus + " actual status "+ newStatus,upperStatus.getLen(),newStatus.getLen());
  }
}
