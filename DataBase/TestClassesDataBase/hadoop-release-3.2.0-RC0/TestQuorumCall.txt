public class TestQuorumCall {
  @Test(timeout=10000) public void testQuorums() throws Exception {
    Map<String,SettableFuture<String>> futures=ImmutableMap.of("f1",SettableFuture.<String>create(),"f2",SettableFuture.<String>create(),"f3",SettableFuture.<String>create());
    QuorumCall<String,String> q=QuorumCall.create(futures);
    assertEquals(0,q.countResponses());
    futures.get("f1").set("first future");
    q.waitFor(1,0,0,100000,"test");
    q.waitFor(0,1,0,100000,"test");
    assertEquals(1,q.countResponses());
    futures.get("f2").setException(new Exception("error"));
    assertEquals(2,q.countResponses());
    futures.get("f3").set("second future");
    q.waitFor(3,0,100,100000,"test");
    q.waitFor(0,2,100,100000,"test");
    assertEquals(3,q.countResponses());
    assertEquals("f1=first future,f3=second future",Joiner.on(",").withKeyValueSeparator("=").join(new TreeMap<String,String>(q.getResults())));
    try {
      q.waitFor(0,4,100,10,"test");
      fail("Didn't time out waiting for more responses than came back");
    }
 catch (    TimeoutException te) {
    }
  }
  @Test(timeout=10000) public void testQuorumFailsWithoutResponse() throws Exception {
    Map<String,SettableFuture<String>> futures=ImmutableMap.of("f1",SettableFuture.<String>create());
    QuorumCall<String,String> q=QuorumCall.create(futures);
    assertEquals("The number of quorum calls for which a response has been" + " received should be 0",0,q.countResponses());
    try {
      q.waitFor(0,1,100,10,"test");
      fail("Didn't time out waiting for more responses than came back");
    }
 catch (    TimeoutException te) {
    }
  }
  @Test(timeout=10000) public void testQuorumSucceedsWithLongPause() throws Exception {
    final Map<String,SettableFuture<String>> futures=ImmutableMap.of("f1",SettableFuture.<String>create());
    FakeTimer timer=new FakeTimer(){
      private int callCount=0;
      @Override public long monotonicNowNanos(){
        callCount++;
        if (callCount == 1) {
          long old=super.monotonicNowNanos();
          advance(1000000);
          return old;
        }
 else         if (callCount == 10) {
          futures.get("f1").set("first future");
          return super.monotonicNowNanos();
        }
 else {
          return super.monotonicNowNanos();
        }
      }
    }
;
    QuorumCall<String,String> q=QuorumCall.create(futures,timer);
    assertEquals(0,q.countResponses());
    q.waitFor(1,0,0,3000,"test");
  }
}
