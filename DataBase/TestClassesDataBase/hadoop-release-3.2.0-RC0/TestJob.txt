class TestJob extends JobImpl {
  private final TestInitTransition initTransition=new TestInitTransition(maps,reduces);
  StateMachineFactory<JobImpl,JobStateInternal,JobEventType,JobEvent> localFactory=stateMachineFactory.addTransition(JobStateInternal.NEW,EnumSet.of(JobStateInternal.INITED,JobStateInternal.FAILED),JobEventType.JOB_INIT,initTransition);
  private final StateMachine<JobStateInternal,JobEventType,JobEvent> localStateMachine;
  @Override protected StateMachine<JobStateInternal,JobEventType,JobEvent> getStateMachine(){
    return localStateMachine;
  }
  @SuppressWarnings("rawtypes") public TestJob(  JobId jobId,  ApplicationAttemptId applicationAttemptId,  Configuration conf,  EventHandler eventHandler,  TaskAttemptListener taskAttemptListener,  Clock clock,  OutputCommitter committer,  boolean newApiCommitter,  String user,  AppContext appContext,  JobStateInternal forcedState,  String diagnostic){
    super(jobId,getApplicationAttemptId(applicationId,getStartCount()),conf,eventHandler,taskAttemptListener,new JobTokenSecretManager(),new Credentials(),clock,getCompletedTaskFromPreviousRun(),metrics,committer,newApiCommitter,user,System.currentTimeMillis(),getAllAMInfos(),appContext,forcedState,diagnostic);
    localStateMachine=localFactory.make(this);
  }
}
