/** 
 * A JUnit for testing availability and accessibility of shuffle related API. It is needed for maintaining comptability with external sub-classes of ShuffleConsumerPlugin and AuxiliaryService(s) like ShuffleHandler. The importance of this test is for preserving API with 3rd party plugins.
 */
public class TestShufflePlugin<K,V> {
static class TestShuffleConsumerPlugin<K,V> implements ShuffleConsumerPlugin<K,V> {
    @Override public void init(    ShuffleConsumerPlugin.Context<K,V> context){
      context.getReduceId();
      context.getJobConf();
      context.getLocalFS();
      context.getUmbilical();
      context.getLocalDirAllocator();
      context.getReporter();
      context.getCodec();
      context.getCombinerClass();
      context.getCombineCollector();
      context.getSpilledRecordsCounter();
      context.getReduceCombineInputCounter();
      context.getShuffledMapsCounter();
      context.getReduceShuffleBytes();
      context.getFailedShuffleCounter();
      context.getMergedMapOutputsCounter();
      context.getStatus();
      context.getCopyPhase();
      context.getMergePhase();
      context.getReduceTask();
      context.getMapOutputFile();
    }
    @Override public void close(){
    }
    @Override public RawKeyValueIterator run() throws java.io.IOException, java.lang.InterruptedException {
      return null;
    }
  }
  @Test public void testPluginAbility(){
    try {
      JobConf jobConf=new JobConf();
      jobConf.setClass(MRConfig.SHUFFLE_CONSUMER_PLUGIN,TestShufflePlugin.TestShuffleConsumerPlugin.class,ShuffleConsumerPlugin.class);
      ShuffleConsumerPlugin shuffleConsumerPlugin=null;
      Class<? extends ShuffleConsumerPlugin> clazz=jobConf.getClass(MRConfig.SHUFFLE_CONSUMER_PLUGIN,Shuffle.class,ShuffleConsumerPlugin.class);
      assertNotNull("Unable to get " + MRConfig.SHUFFLE_CONSUMER_PLUGIN,clazz);
      shuffleConsumerPlugin=ReflectionUtils.newInstance(clazz,jobConf);
      assertNotNull("Unable to load " + MRConfig.SHUFFLE_CONSUMER_PLUGIN,shuffleConsumerPlugin);
    }
 catch (    Exception e) {
      assertTrue("Threw exception:" + e,false);
    }
  }
  @Test public void testConsumerApi(){
    JobConf jobConf=new JobConf();
    ShuffleConsumerPlugin<K,V> shuffleConsumerPlugin=new TestShuffleConsumerPlugin<K,V>();
    ReduceTask mockReduceTask=mock(ReduceTask.class);
    TaskUmbilicalProtocol mockUmbilical=mock(TaskUmbilicalProtocol.class);
    Reporter mockReporter=mock(Reporter.class);
    FileSystem mockFileSystem=mock(FileSystem.class);
    Class<? extends org.apache.hadoop.mapred.Reducer> combinerClass=jobConf.getCombinerClass();
    @SuppressWarnings("unchecked") CombineOutputCollector<K,V> mockCombineOutputCollector=(CombineOutputCollector<K,V>)mock(CombineOutputCollector.class);
    org.apache.hadoop.mapreduce.TaskAttemptID mockTaskAttemptID=mock(org.apache.hadoop.mapreduce.TaskAttemptID.class);
    LocalDirAllocator mockLocalDirAllocator=mock(LocalDirAllocator.class);
    CompressionCodec mockCompressionCodec=mock(CompressionCodec.class);
    Counter mockCounter=mock(Counter.class);
    TaskStatus mockTaskStatus=mock(TaskStatus.class);
    Progress mockProgress=mock(Progress.class);
    MapOutputFile mockMapOutputFile=mock(MapOutputFile.class);
    Task mockTask=mock(Task.class);
    try {
      String[] dirs=jobConf.getLocalDirs();
      ShuffleConsumerPlugin.Context<K,V> context=new ShuffleConsumerPlugin.Context<K,V>(mockTaskAttemptID,jobConf,mockFileSystem,mockUmbilical,mockLocalDirAllocator,mockReporter,mockCompressionCodec,combinerClass,mockCombineOutputCollector,mockCounter,mockCounter,mockCounter,mockCounter,mockCounter,mockCounter,mockTaskStatus,mockProgress,mockProgress,mockTask,mockMapOutputFile,null);
      shuffleConsumerPlugin.init(context);
      shuffleConsumerPlugin.run();
      shuffleConsumerPlugin.close();
    }
 catch (    Exception e) {
      assertTrue("Threw exception:" + e,false);
    }
    mockReduceTask.getTaskID();
    mockReduceTask.getJobID();
    mockReduceTask.getNumMaps();
    mockReduceTask.getPartition();
    mockReporter.progress();
  }
  @Test public void testProviderApi(){
    LocalDirAllocator mockLocalDirAllocator=mock(LocalDirAllocator.class);
    JobConf mockJobConf=mock(JobConf.class);
    try {
      mockLocalDirAllocator.getLocalPathToRead("",mockJobConf);
    }
 catch (    Exception e) {
      assertTrue("Threw exception:" + e,false);
    }
  }
}
