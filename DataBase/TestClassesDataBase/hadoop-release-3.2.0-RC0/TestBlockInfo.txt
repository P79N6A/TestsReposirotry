/** 
 * This class provides tests for BlockInfo class, which is used in BlocksMap. The test covers BlockList.listMoveToHead, used for faster block report processing in DatanodeDescriptor.reportDiff.
 */
public class TestBlockInfo {
  private static final Logger LOG=LoggerFactory.getLogger("org.apache.hadoop.hdfs.TestBlockInfo");
  @Test public void testIsDeleted(){
    BlockInfo blockInfo=new BlockInfoContiguous((short)3);
    BlockCollection bc=Mockito.mock(BlockCollection.class);
    blockInfo.setBlockCollectionId(1000);
    Assert.assertFalse(blockInfo.isDeleted());
    blockInfo.setBlockCollectionId(INVALID_INODE_ID);
    Assert.assertTrue(blockInfo.isDeleted());
  }
  @Test public void testAddStorage() throws Exception {
    BlockInfo blockInfo=new BlockInfoContiguous((short)3);
    final DatanodeStorageInfo storage=DFSTestUtil.createDatanodeStorageInfo("storageID","127.0.0.1");
    boolean added=blockInfo.addStorage(storage,blockInfo);
    Assert.assertTrue(added);
    Assert.assertEquals(storage,blockInfo.getStorageInfo(0));
  }
  @Test public void testReplaceStorage() throws Exception {
    final DatanodeStorageInfo storage1=DFSTestUtil.createDatanodeStorageInfo("storageID1","127.0.0.1");
    final DatanodeStorageInfo storage2=new DatanodeStorageInfo(storage1.getDatanodeDescriptor(),new DatanodeStorage("storageID2"));
    final int NUM_BLOCKS=10;
    BlockInfo[] blockInfos=new BlockInfo[NUM_BLOCKS];
    for (int i=0; i < NUM_BLOCKS; ++i) {
      blockInfos[i]=new BlockInfoContiguous((short)3);
      storage1.addBlock(blockInfos[i]);
    }
    boolean added=storage2.addBlock(blockInfos[NUM_BLOCKS / 2]) == AddBlockResult.ADDED;
    Assert.assertThat(added,is(false));
    Assert.assertThat(blockInfos[NUM_BLOCKS / 2].getStorageInfo(0),is(storage2));
  }
  @Test(expected=IllegalArgumentException.class) public void testAddStorageWithDifferentBlock() throws Exception {
    BlockInfo blockInfo1=new BlockInfoContiguous(new Block(1000L),(short)3);
    BlockInfo blockInfo2=new BlockInfoContiguous(new Block(1001L),(short)3);
    final DatanodeStorageInfo storage=DFSTestUtil.createDatanodeStorageInfo("storageID","127.0.0.1");
    blockInfo1.addStorage(storage,blockInfo2);
  }
}
