/** 
 * Test class for  {@link BoundedAppender}.
 */
public class TestBoundedAppender {
  @Rule public ExpectedException expected=ExpectedException.none();
  @Test public void initWithZeroLimitThrowsException(){
    expected.expect(IllegalArgumentException.class);
    expected.expectMessage("limit should be positive");
    new BoundedAppender(0);
  }
  @Test public void nullAppendedNullStringRead(){
    final BoundedAppender boundedAppender=new BoundedAppender(4);
    boundedAppender.append(null);
    assertEquals("null appended, \"null\" read","null",boundedAppender.toString());
  }
  @Test public void appendBelowLimitOnceValueIsReadCorrectly(){
    final BoundedAppender boundedAppender=new BoundedAppender(2);
    boundedAppender.append("ab");
    assertEquals("value appended is read correctly","ab",boundedAppender.toString());
  }
  @Test public void appendValuesBelowLimitAreReadCorrectlyInFifoOrder(){
    final BoundedAppender boundedAppender=new BoundedAppender(3);
    boundedAppender.append("ab");
    boundedAppender.append("cd");
    boundedAppender.append("e");
    boundedAppender.append("fg");
    assertEquals("last values appended fitting limit are read correctly",String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,3,7,"efg"),boundedAppender.toString());
  }
  @Test public void appendLastAboveLimitPreservesLastMessagePostfix(){
    final BoundedAppender boundedAppender=new BoundedAppender(3);
    boundedAppender.append("ab");
    boundedAppender.append("cde");
    boundedAppender.append("fghij");
    assertEquals("last value appended above limit postfix is read correctly",String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,3,10,"hij"),boundedAppender.toString());
  }
  @Test public void appendMiddleAboveLimitPreservesLastMessageAndMiddlePostfix(){
    final BoundedAppender boundedAppender=new BoundedAppender(3);
    boundedAppender.append("ab");
    boundedAppender.append("cde");
    assertEquals("last value appended above limit postfix is read correctly",String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,3,5,"cde"),boundedAppender.toString());
    boundedAppender.append("fg");
    assertEquals("middle value appended above limit postfix and last value are " + "read correctly",String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,3,7,"efg"),boundedAppender.toString());
    boundedAppender.append("hijkl");
    assertEquals("last value appended above limit postfix is read correctly",String.format(BoundedAppender.TRUNCATED_MESSAGES_TEMPLATE,3,12,"jkl"),boundedAppender.toString());
  }
}
