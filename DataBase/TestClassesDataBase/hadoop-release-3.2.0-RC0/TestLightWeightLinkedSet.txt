public class TestLightWeightLinkedSet {
  private static final Logger LOG=LoggerFactory.getLogger("org.apache.hadoop.hdfs.TestLightWeightLinkedSet");
  private final ArrayList<Integer> list=new ArrayList<Integer>();
  private final int NUM=100;
  private LightWeightLinkedSet<Integer> set;
  private Random rand;
  @Before public void setUp(){
    float maxF=LightWeightLinkedSet.DEFAULT_MAX_LOAD_FACTOR;
    float minF=LightWeightLinkedSet.DEFAUT_MIN_LOAD_FACTOR;
    int initCapacity=LightWeightLinkedSet.MINIMUM_CAPACITY;
    rand=new Random(Time.now());
    list.clear();
    for (int i=0; i < NUM; i++) {
      list.add(rand.nextInt());
    }
    set=new LightWeightLinkedSet<Integer>(initCapacity,maxF,minF);
  }
  @Test public void testEmptyBasic(){
    LOG.info("Test empty basic");
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    assertNull(set.pollFirst());
    assertEquals(0,set.pollAll().size());
    assertEquals(0,set.pollN(10).size());
    LOG.info("Test empty - DONE");
  }
  @Test public void testOneElementBasic(){
    LOG.info("Test one element basic");
    set.add(list.get(0));
    assertEquals(1,set.size());
    assertFalse(set.isEmpty());
    Iterator<Integer> iter=set.iterator();
    assertTrue(iter.hasNext());
    assertEquals(list.get(0),iter.next());
    assertFalse(iter.hasNext());
    LOG.info("Test one element basic - DONE");
  }
  @Test public void testMultiBasic(){
    LOG.info("Test multi element basic");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    assertEquals(list.size(),set.size());
    for (    Integer i : list) {
      assertTrue(set.contains(i));
    }
    for (    Integer i : list) {
      assertFalse(set.add(i));
    }
    for (    Integer i : list) {
      assertTrue(set.contains(i));
    }
    Iterator<Integer> iter=set.iterator();
    int num=0;
    while (iter.hasNext()) {
      assertEquals(list.get(num++),iter.next());
    }
    assertEquals(list.size(),num);
    LOG.info("Test multi element basic - DONE");
  }
  @Test public void testRemoveOne(){
    LOG.info("Test remove one");
    assertTrue(set.add(list.get(0)));
    assertEquals(1,set.size());
    assertTrue(set.remove(list.get(0)));
    assertEquals(0,set.size());
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertNull(set.pollFirst());
    assertEquals(0,set.pollAll().size());
    assertEquals(0,set.pollN(10).size());
    assertTrue(set.add(list.get(0)));
    assertEquals(1,set.size());
    iter=set.iterator();
    assertTrue(iter.hasNext());
    LOG.info("Test remove one - DONE");
  }
  @Test public void testRemoveMulti(){
    LOG.info("Test remove multi");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (int i=0; i < NUM / 2; i++) {
      assertTrue(set.remove(list.get(i)));
    }
    for (int i=0; i < NUM / 2; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    for (int i=NUM / 2; i < NUM; i++) {
      assertTrue(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    int num=NUM / 2;
    while (iter.hasNext()) {
      assertEquals(list.get(num++),iter.next());
    }
    assertEquals(num,NUM);
    LOG.info("Test remove multi - DONE");
  }
  @Test public void testRemoveAll(){
    LOG.info("Test remove all");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (int i=0; i < NUM; i++) {
      assertTrue(set.remove(list.get(i)));
    }
    for (int i=0; i < NUM; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    assertTrue(set.isEmpty());
    LOG.info("Test remove all - DONE");
  }
  @Test public void testPollOneElement(){
    LOG.info("Test poll one element");
    set.add(list.get(0));
    assertEquals(list.get(0),set.pollFirst());
    assertNull(set.pollFirst());
    LOG.info("Test poll one element - DONE");
  }
  @Test public void testPollMulti(){
    LOG.info("Test poll multi");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    for (int i=0; i < NUM / 2; i++) {
      assertEquals(list.get(i),set.pollFirst());
    }
    assertEquals(NUM / 2,set.size());
    for (int i=0; i < NUM / 2; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    for (int i=NUM / 2; i < NUM; i++) {
      assertTrue(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    int num=NUM / 2;
    while (iter.hasNext()) {
      assertEquals(list.get(num++),iter.next());
    }
    assertEquals(num,NUM);
    for (int i=0; i < NUM / 2; i++) {
      assertTrue(set.add(list.get(i)));
    }
    assertEquals(NUM,set.size());
    for (int i=NUM / 2; i < NUM; i++) {
      assertEquals(list.get(i),set.pollFirst());
    }
    for (int i=0; i < NUM / 2; i++) {
      assertEquals(list.get(i),set.pollFirst());
    }
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    LOG.info("Test poll multi - DONE");
  }
  @Test public void testPollAll(){
    LOG.info("Test poll all");
    for (    Integer i : list) {
      assertTrue(set.add(i));
    }
    while (set.pollFirst() != null)     ;
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    for (int i=0; i < NUM; i++) {
      assertFalse(set.contains(list.get(i)));
    }
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    LOG.info("Test poll all - DONE");
  }
  @Test public void testPollNOne(){
    LOG.info("Test pollN one");
    set.add(list.get(0));
    List<Integer> l=set.pollN(10);
    assertEquals(1,l.size());
    assertEquals(list.get(0),l.get(0));
    LOG.info("Test pollN one - DONE");
  }
  @Test public void testPollNMulti(){
    LOG.info("Test pollN multi");
    set.addAll(list);
    List<Integer> l=set.pollN(10);
    assertEquals(10,l.size());
    for (int i=0; i < 10; i++) {
      assertEquals(list.get(i),l.get(i));
    }
    l=set.pollN(1000);
    assertEquals(NUM - 10,l.size());
    for (int i=10; i < NUM; i++) {
      assertEquals(list.get(i),l.get(i - 10));
    }
    assertTrue(set.isEmpty());
    assertEquals(0,set.size());
    LOG.info("Test pollN multi - DONE");
  }
  @Test public void testClear(){
    LOG.info("Test clear");
    set.addAll(list);
    assertEquals(NUM,set.size());
    assertFalse(set.isEmpty());
    Iterator<Integer> bkmrkIt=set.getBookmark();
    for (int i=0; i < set.size() / 2 + 1; i++) {
      bkmrkIt.next();
    }
    assertTrue(bkmrkIt.hasNext());
    set.clear();
    assertEquals(0,set.size());
    assertTrue(set.isEmpty());
    bkmrkIt=set.getBookmark();
    assertFalse(bkmrkIt.hasNext());
    assertEquals(0,set.pollAll().size());
    assertEquals(0,set.pollN(10).size());
    assertNull(set.pollFirst());
    Iterator<Integer> iter=set.iterator();
    assertFalse(iter.hasNext());
    LOG.info("Test clear - DONE");
  }
  @Test public void testOther(){
    LOG.info("Test other");
    assertTrue(set.addAll(list));
    Integer[] array=set.toArray(new Integer[0]);
    assertEquals(NUM,array.length);
    for (int i=0; i < array.length; i++) {
      assertTrue(list.contains(array[i]));
    }
    assertEquals(NUM,set.size());
    Object[] array2=set.toArray();
    assertEquals(NUM,array2.length);
    for (int i=0; i < array2.length; i++) {
      assertTrue(list.contains(array2[i]));
    }
    LOG.info("Test capacity - DONE");
  }
  @Test(timeout=60000) public void testGetBookmarkReturnsBookmarkIterator(){
    LOG.info("Test getBookmark returns proper iterator");
    assertTrue(set.addAll(list));
    Iterator<Integer> bookmark=set.getBookmark();
    assertEquals(bookmark.next(),list.get(0));
    final int numAdvance=list.size() / 2;
    for (int i=1; i < numAdvance; i++) {
      bookmark.next();
    }
    Iterator<Integer> bookmark2=set.getBookmark();
    assertEquals(bookmark2.next(),list.get(numAdvance));
  }
  @Test(timeout=60000) public void testBookmarkAdvancesOnRemoveOfSameElement(){
    LOG.info("Test that the bookmark advances if we remove its element.");
    assertTrue(set.add(list.get(0)));
    assertTrue(set.add(list.get(1)));
    assertTrue(set.add(list.get(2)));
    Iterator<Integer> it=set.getBookmark();
    assertEquals(it.next(),list.get(0));
    set.remove(list.get(1));
    it=set.getBookmark();
    assertEquals(it.next(),list.get(2));
  }
  @Test(timeout=60000) public void testBookmarkSetToHeadOnAddToEmpty(){
    LOG.info("Test bookmark is set after adding to previously empty set.");
    Iterator<Integer> it=set.getBookmark();
    assertFalse(it.hasNext());
    set.add(list.get(0));
    set.add(list.get(1));
    it=set.getBookmark();
    assertTrue(it.hasNext());
    assertEquals(it.next(),list.get(0));
    assertEquals(it.next(),list.get(1));
    assertFalse(it.hasNext());
  }
  @Test(timeout=60000) public void testResetBookmarkPlacesBookmarkAtHead(){
    set.addAll(list);
    Iterator<Integer> it=set.getBookmark();
    final int numAdvance=set.size() / 2;
    for (int i=0; i < numAdvance; i++) {
      it.next();
    }
    assertEquals(it.next(),list.get(numAdvance));
    set.resetBookmark();
    it=set.getBookmark();
    assertEquals(it.next(),list.get(0));
  }
}
