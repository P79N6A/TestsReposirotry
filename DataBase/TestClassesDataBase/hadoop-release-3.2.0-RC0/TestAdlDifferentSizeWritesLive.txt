/** 
 * Verify data integrity with different data sizes with buffer size.
 */
@RunWith(Parallelized.class) public class TestAdlDifferentSizeWritesLive {
  private static Random rand=new Random();
  private int totalSize;
  private int chunkSize;
  public TestAdlDifferentSizeWritesLive(  int totalSize,  int chunkSize){
    this.totalSize=totalSize;
    this.chunkSize=chunkSize;
  }
  public static byte[] getRandomByteArrayData(  int size){
    byte[] b=new byte[size];
    rand.nextBytes(b);
    return b;
  }
  @Parameterized.Parameters(name="{index}: Data Size [{0}] ; Chunk Size " + "[{1}]") public static Collection testDataForIntegrityTest(){
    return Arrays.asList(new Object[][]{{4 * 1024,1 * 1024},{4 * 1024,7 * 1024},{4 * 1024,10},{2 * 1024,10},{1 * 1024,10},{100,1},{4 * 1024,1 * 1024},{7 * 1024,2 * 1024},{9 * 1024,2 * 1024},{10 * 1024,3 * 1024},{10 * 1024,1 * 1024},{10 * 1024,8 * 1024}});
  }
  @BeforeClass public static void cleanUpParent() throws IOException, URISyntaxException {
    if (AdlStorageConfiguration.isContractTestEnabled()) {
      Path path=new Path("/test/dataIntegrityCheck/");
      FileSystem fs=AdlStorageConfiguration.createStorageConnector();
      fs.delete(path,true);
    }
  }
  @Before public void setup() throws Exception {
    org.junit.Assume.assumeTrue(AdlStorageConfiguration.isContractTestEnabled());
  }
  @Test public void testDataIntegrity() throws IOException {
    Path path=new Path("/test/dataIntegrityCheck/" + UUID.randomUUID().toString());
    FileSystem fs=null;
    AdlStorageConfiguration.getConfiguration().setInt(WRITE_BUFFER_SIZE_KEY,4 * 1024);
    try {
      fs=AdlStorageConfiguration.createStorageConnector();
    }
 catch (    URISyntaxException e) {
      throw new IllegalStateException("Can not initialize ADL FileSystem. " + "Please check test.fs.adl.name property.",e);
    }
    byte[] expectedData=getRandomByteArrayData(totalSize);
    FSDataOutputStream out=fs.create(path,true);
    int iteration=totalSize / chunkSize;
    int reminderIteration=totalSize % chunkSize;
    int offset=0;
    for (int i=0; i < iteration; ++i) {
      out.write(expectedData,offset,chunkSize);
      offset+=chunkSize;
    }
    out.write(expectedData,offset,reminderIteration);
    out.close();
    byte[] actualData=new byte[totalSize];
    FSDataInputStream in=fs.open(path);
    in.readFully(0,actualData);
    in.close();
    Assert.assertArrayEquals(expectedData,actualData);
    Assert.assertTrue(fs.delete(path,true));
  }
}
