/** 
 * Test WebHDFS which provides data locality using HTTP redirection.
 */
public class TestWebHdfsDataLocality {
  static final Logger LOG=LoggerFactory.getLogger(TestWebHdfsDataLocality.class);
{
    DFSTestUtil.setNameNodeLogLevel(Level.ALL);
  }
  private static final String RACK0="/rack0";
  private static final String RACK1="/rack1";
  private static final String RACK2="/rack2";
  private static final String LOCALHOST=InetAddress.getLoopbackAddress().getHostName();
  @Rule public final ExpectedException exception=ExpectedException.none();
  @Test public void testDataLocality() throws Exception {
    final Configuration conf=WebHdfsTestUtil.createConf();
    final String[] racks={RACK0,RACK0,RACK1,RACK1,RACK2,RACK2};
    final int nDataNodes=racks.length;
    LOG.info("nDataNodes=" + nDataNodes + ", racks="+ Arrays.asList(racks));
    final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(nDataNodes).racks(racks).build();
    try {
      cluster.waitActive();
      final DistributedFileSystem dfs=cluster.getFileSystem();
      final NameNode namenode=cluster.getNameNode();
      final DatanodeManager dm=namenode.getNamesystem().getBlockManager().getDatanodeManager();
      LOG.info("dm=" + dm);
      final long blocksize=DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT;
      final String f="/foo";
{
        for (int i=0; i < nDataNodes; i++) {
          final DataNode dn=cluster.getDataNodes().get(i);
          final String ipAddr=dm.getDatanode(dn.getDatanodeId()).getIpAddr();
          final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,PutOpParam.Op.CREATE,-1L,blocksize,null,LOCALHOST,null);
          Assert.assertEquals(ipAddr,chosen.getIpAddr());
        }
      }
      final Path p=new Path(f);
      final FSDataOutputStream out=dfs.create(p,(short)1);
      out.write(1);
      out.close();
      final LocatedBlocks locatedblocks=NameNodeAdapter.getBlockLocations(namenode,f,0,1);
      final List<LocatedBlock> lb=locatedblocks.getLocatedBlocks();
      Assert.assertEquals(1,lb.size());
      final DatanodeInfo[] locations=lb.get(0).getLocations();
      Assert.assertEquals(1,locations.length);
      final DatanodeInfo expected=locations[0];
{
        final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
        final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.GETFILECHECKSUM,-1L,blocksize,null,LOCALHOST,status);
        Assert.assertEquals(expected,chosen);
      }
{
        final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
        final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.OPEN,0,blocksize,null,LOCALHOST,status);
        Assert.assertEquals(expected,chosen);
      }
{
        final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
        final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,PostOpParam.Op.APPEND,-1L,blocksize,null,LOCALHOST,status);
        Assert.assertEquals(expected,chosen);
      }
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test public void testExcludeDataNodes() throws Exception {
    final Configuration conf=WebHdfsTestUtil.createConf();
    final String[] racks={RACK0,RACK0,RACK1,RACK1,RACK2,RACK2};
    final String[] hosts={"DataNode1","DataNode2","DataNode3","DataNode4","DataNode5","DataNode6"};
    final int nDataNodes=hosts.length;
    LOG.info("nDataNodes=" + nDataNodes + ", racks="+ Arrays.asList(racks)+ ", hosts="+ Arrays.asList(hosts));
    final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build();
    try {
      cluster.waitActive();
      final DistributedFileSystem dfs=cluster.getFileSystem();
      final NameNode namenode=cluster.getNameNode();
      final DatanodeManager dm=namenode.getNamesystem().getBlockManager().getDatanodeManager();
      LOG.info("dm=" + dm);
      final long blocksize=DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT;
      final String f="/foo";
      final Path p=new Path(f);
      final FSDataOutputStream out=dfs.create(p,(short)3);
      out.write(1);
      out.close();
      final LocatedBlocks locatedblocks=NameNodeAdapter.getBlockLocations(namenode,f,0,1);
      final List<LocatedBlock> lb=locatedblocks.getLocatedBlocks();
      Assert.assertEquals(1,lb.size());
      final DatanodeInfo[] locations=lb.get(0).getLocations();
      Assert.assertEquals(3,locations.length);
      StringBuffer sb=new StringBuffer();
      for (int i=0; i < 2; i++) {
        sb.append(locations[i].getXferAddr());
{
          final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
          final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.GETFILECHECKSUM,-1L,blocksize,sb.toString(),LOCALHOST,status);
          for (int j=0; j <= i; j++) {
            Assert.assertNotEquals(locations[j].getHostName(),chosen.getHostName());
          }
        }
{
          final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
          final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.OPEN,0,blocksize,sb.toString(),LOCALHOST,status);
          for (int j=0; j <= i; j++) {
            Assert.assertNotEquals(locations[j].getHostName(),chosen.getHostName());
          }
        }
{
          final HdfsFileStatus status=dfs.getClient().getFileInfo(f);
          final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,PostOpParam.Op.APPEND,-1L,blocksize,sb.toString(),LOCALHOST,status);
          for (int j=0; j <= i; j++) {
            Assert.assertNotEquals(locations[j].getHostName(),chosen.getHostName());
          }
        }
        sb.append(",");
      }
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test public void testChooseDatanodeBeforeNamesystemInit() throws Exception {
    NameNode nn=mock(NameNode.class);
    when(nn.getNamesystem()).thenReturn(null);
    exception.expect(IOException.class);
    exception.expectMessage("Namesystem has not been initialized yet.");
    NamenodeWebHdfsMethods.chooseDatanode(nn,"/path",PutOpParam.Op.CREATE,0,DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT,null,LOCALHOST,null);
  }
}
