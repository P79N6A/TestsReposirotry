public class TestDFSRename {
  static int countLease(  MiniDFSCluster cluster){
    return NameNodeAdapter.getLeaseManager(cluster.getNamesystem()).countLease();
  }
  final Path dir=new Path("/test/rename/");
  void list(  FileSystem fs,  String name) throws IOException {
    FileSystem.LOG.info("\n\n" + name);
    for (    FileStatus s : fs.listStatus(dir)) {
      FileSystem.LOG.info("" + s.getPath());
    }
  }
  static void createFile(  FileSystem fs,  Path f) throws IOException {
    DataOutputStream a_out=fs.create(f);
    a_out.writeBytes("something");
    a_out.close();
  }
  @Test public void testRename() throws Exception {
    Configuration conf=new HdfsConfiguration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    try {
      FileSystem fs=cluster.getFileSystem();
      assertTrue(fs.mkdirs(dir));
{
        Path a=new Path(dir,"a");
        Path aa=new Path(dir,"aa");
        Path b=new Path(dir,"b");
        createFile(fs,a);
        assertEquals(0,countLease(cluster));
        DataOutputStream aa_out=fs.create(aa);
        aa_out.writeBytes("something");
        assertEquals(1,countLease(cluster));
        list(fs,"rename0");
        fs.rename(a,b);
        list(fs,"rename1");
        aa_out.writeBytes(" more");
        aa_out.close();
        list(fs,"rename2");
        assertEquals(0,countLease(cluster));
      }
{
        Path dstPath=new Path("/c/d");
        assertFalse(fs.exists(dstPath));
        assertFalse(fs.rename(dir,dstPath));
      }
{
        Path src=new Path("/a/b");
        Path dst=new Path("/a/b/c");
        createFile(fs,new Path(src,"foo"));
        assertFalse(fs.rename(src,dst));
        assertFalse(fs.rename(src.getParent(),dst.getParent()));
      }
{
        Path src=new Path("/testPrefix");
        Path dst=new Path("/testPrefixfile");
        createFile(fs,src);
        assertTrue(fs.rename(src,dst));
      }
{
        Path src=new Path("/a/b/c");
        createFile(fs,src);
        assertTrue(fs.rename(src,src));
        assertFalse(fs.rename(new Path("/a/b"),new Path("/a/b/")));
        assertTrue(fs.rename(src,new Path("/a/b/c/")));
      }
      fs.delete(dir,true);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  /** 
 * Check the blocks of dst file are cleaned after rename with overwrite Restart NN to check the rename successfully
 */
  @Test(timeout=120000) public void testRenameWithOverwrite() throws Exception {
    final short replFactor=2;
    final long blockSize=512;
    Configuration conf=new Configuration();
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replFactor).build();
    DistributedFileSystem dfs=cluster.getFileSystem();
    try {
      long fileLen=blockSize * 3;
      String src="/foo/src";
      String dst="/foo/dst";
      Path srcPath=new Path(src);
      Path dstPath=new Path(dst);
      DFSTestUtil.createFile(dfs,srcPath,fileLen,replFactor,1);
      DFSTestUtil.createFile(dfs,dstPath,fileLen,replFactor,1);
      LocatedBlocks lbs=NameNodeAdapter.getBlockLocations(cluster.getNameNode(),dst,0,fileLen);
      BlockManager bm=NameNodeAdapter.getNamesystem(cluster.getNameNode()).getBlockManager();
      assertTrue(bm.getStoredBlock(lbs.getLocatedBlocks().get(0).getBlock().getLocalBlock()) != null);
      dfs.rename(srcPath,dstPath,Rename.OVERWRITE);
      assertTrue(bm.getStoredBlock(lbs.getLocatedBlocks().get(0).getBlock().getLocalBlock()) == null);
      cluster.restartNameNodes();
      assertFalse(dfs.exists(srcPath));
      assertTrue(dfs.exists(dstPath));
    }
  finally {
      if (dfs != null) {
        dfs.close();
      }
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
}
