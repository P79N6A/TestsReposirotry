public static class SyntheticReplicaAccessorBuilder extends ReplicaAccessorBuilder {
  String fileName;
  long blockId;
  String blockPoolId;
  long genstamp;
  boolean verifyChecksum;
  String clientName;
  boolean allowShortCircuit;
  long visibleLength;
  Configuration conf;
  @Override public ReplicaAccessorBuilder setFileName(  String fileName){
    this.fileName=fileName;
    return this;
  }
  @Override public ReplicaAccessorBuilder setBlock(  long blockId,  String blockPoolId){
    this.blockId=blockId;
    this.blockPoolId=blockPoolId;
    return this;
  }
  @Override public ReplicaAccessorBuilder setGenerationStamp(  long genstamp){
    this.genstamp=genstamp;
    return this;
  }
  @Override public ReplicaAccessorBuilder setVerifyChecksum(  boolean verifyChecksum){
    this.verifyChecksum=verifyChecksum;
    return this;
  }
  @Override public ReplicaAccessorBuilder setClientName(  String clientName){
    this.clientName=clientName;
    return this;
  }
  @Override public ReplicaAccessorBuilder setAllowShortCircuitReads(  boolean allowShortCircuit){
    this.allowShortCircuit=allowShortCircuit;
    return this;
  }
  @Override public ReplicaAccessorBuilder setVisibleLength(  long visibleLength){
    this.visibleLength=visibleLength;
    return this;
  }
  @Override public ReplicaAccessorBuilder setConfiguration(  Configuration conf){
    this.conf=conf;
    return this;
  }
  @Override public ReplicaAccessorBuilder setBlockAccessToken(  byte[] token){
    return this;
  }
  @Override public ReplicaAccessor build(){
    if (visibleLength < 1024) {
      LOG.info("SyntheticReplicaAccessorFactory returning null for a " + "smaller replica with size " + visibleLength);
      return null;
    }
    return new SyntheticReplicaAccessor(this);
  }
}
