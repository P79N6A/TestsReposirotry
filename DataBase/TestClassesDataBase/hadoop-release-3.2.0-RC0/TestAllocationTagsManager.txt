/** 
 * Test functionality of AllocationTagsManager.
 */
public class TestAllocationTagsManager {
  private RMContext rmContext;
  @Before public void setup(){
    MockRM rm=new MockRM();
    rm.start();
    MockNodes.resetHostIds();
    List<RMNode> rmNodes=MockNodes.newNodes(2,4,Resource.newInstance(4096,4));
    for (    RMNode rmNode : rmNodes) {
      rm.getRMContext().getRMNodes().putIfAbsent(rmNode.getNodeID(),rmNode);
    }
    rmContext=rm.getRMContext();
  }
  @Test public void testMultipleAddRemoveContainer(){
    AllocationTagsManager atm=new AllocationTagsManager(rmContext);
    NodeId nodeId=NodeId.fromString("host1:123");
    ContainerId cid1=TestUtils.getMockContainerId(1,1);
    ContainerId cid2=TestUtils.getMockContainerId(1,2);
    ContainerId cid3=TestUtils.getMockContainerId(1,3);
    Set<String> tags1=ImmutableSet.of("mapper","reducer");
    Set<String> tags2=ImmutableSet.of("mapper");
    Set<String> tags3=ImmutableSet.of("zk");
    atm.addContainer(nodeId,cid1,tags1);
    atm.addContainer(nodeId,cid2,tags2);
    atm.addContainer(nodeId,cid3,tags3);
    Assert.assertEquals(2L,(long)atm.getAllocationTagsWithCount(nodeId).get("mapper"));
    Assert.assertEquals(1L,(long)atm.getAllocationTagsWithCount(nodeId).get("reducer"));
    atm.removeContainer(nodeId,cid1,tags1);
    Assert.assertEquals(1L,(long)atm.getAllocationTagsWithCount(nodeId).get("mapper"));
    Assert.assertNull(atm.getAllocationTagsWithCount(nodeId).get("reducer"));
    atm.removeContainer(nodeId,cid1,tags1);
    Assert.assertNull(atm.getAllocationTagsWithCount(nodeId).get("mapper"));
    Assert.assertNull(atm.getAllocationTagsWithCount(nodeId).get("reducer"));
  }
  @Test public void testAllocationTagsManagerSimpleCases() throws InvalidAllocationTagsQueryException {
    AllocationTagsManager atm=new AllocationTagsManager(rmContext);
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(NodeId.fromString("host1:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper")),Long::max));
    Assert.assertEquals(2,atm.getRackCardinality("rack0",TestUtils.getMockApplicationId(1),"mapper"));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::min));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::max));
    Assert.assertEquals(3,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::sum));
    Assert.assertEquals(1,atm.getNodeCardinality(NodeId.fromString("host2:123"),TestUtils.getMockApplicationId(1),"mapper"));
    Assert.assertEquals(2,atm.getNodeCardinality(NodeId.fromString("host2:123"),TestUtils.getMockApplicationId(1),"reducer"));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("no_existed","reducer")),Long::min));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),null),Long::max));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),null),Long::max));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::max));
    Assert.assertEquals(4,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createGlobalAllocationTags(ImmutableSet.of()),Long::sum));
    Assert.assertEquals(3,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::sum));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(2),ImmutableSet.of()),Long::sum));
    atm.removeContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
    atm.removeContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host1:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper")),Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::min));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of("mapper","reducer")),Long::sum));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of(TestUtils.getMockApplicationId(1).toString())),Long::max));
    Assert.assertEquals(0,atm.getNodeCardinality(NodeId.fromString("host2:123"),TestUtils.getMockApplicationId(1),TestUtils.getMockApplicationId(1).toString()));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createGlobalAllocationTags(ImmutableSet.of()),Long::sum));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::sum));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::sum));
  }
  @Test public void testAllocationTagsManagerRackMapping() throws InvalidAllocationTagsQueryException {
    AllocationTagsManager atm=new AllocationTagsManager(rmContext);
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,2),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(2,4),ImmutableSet.of("reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    Assert.assertEquals(1,atm.getRackCardinality("rack0",TestUtils.getMockApplicationId(1),"mapper"));
    Assert.assertEquals(2,atm.getRackCardinality("rack0",TestUtils.getMockApplicationId(2),"reducer"));
    Assert.assertEquals(3,atm.getRackCardinality("rack0",null,"reducer"));
    Assert.assertEquals(1,atm.getRackCardinalityByOp("rack0",AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::max));
    Assert.assertEquals(1,atm.getRackCardinalityByOp("rack0",AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),ImmutableSet.of()),Long::min));
    Assert.assertEquals(3,atm.getRackCardinalityByOp("rack0",AllocationTags.createGlobalAllocationTags(ImmutableSet.of()),Long::max));
  }
  @Test public void testAllocationTagsManagerMemoryAfterCleanup(){
    AllocationTagsManager atm=new AllocationTagsManager(rmContext);
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    atm.removeContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
    atm.removeContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
    atm.removeContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    Assert.assertEquals(0,atm.getGlobalNodeMapping().getTypeToTagsWithCount().size());
    Assert.assertEquals(0,atm.getPerAppNodeMappings().size());
    Assert.assertEquals(0,atm.getGlobalRackMapping().getTypeToTagsWithCount().size());
    Assert.assertEquals(0,atm.getPerAppRackMappings().size());
  }
  @Test public void testQueryCardinalityWithIllegalParameters(){
    AllocationTagsManager atm=new AllocationTagsManager(rmContext);
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
    atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
    atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
    boolean caughtException=false;
    try {
      atm.getNodeCardinalityByOp(null,AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(2),ImmutableSet.of("mapper")),Long::min);
    }
 catch (    InvalidAllocationTagsQueryException e1) {
      caughtException=true;
    }
    Assert.assertTrue("should fail because of nodeId specified",caughtException);
    caughtException=false;
    try {
      atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(2),ImmutableSet.of("mapper")),null);
    }
 catch (    InvalidAllocationTagsQueryException e1) {
      caughtException=true;
    }
    Assert.assertTrue("should fail because of nodeId specified",caughtException);
  }
  @Test public void testNodeAllocationTagsAggregation() throws InvalidAllocationTagsQueryException {
    RMContext mockContext=Mockito.spy(rmContext);
    ApplicationId app1=TestUtils.getMockApplicationId(1);
    ApplicationId app2=TestUtils.getMockApplicationId(2);
    ApplicationId app3=TestUtils.getMockApplicationId(3);
    NodeId host1=NodeId.fromString("host1:123");
    NodeId host2=NodeId.fromString("host2:123");
    NodeId host3=NodeId.fromString("host3:123");
    ConcurrentMap<ApplicationId,RMApp> allApps=new ConcurrentHashMap<>();
    allApps.put(app1,new MockRMApp(123,1000,RMAppState.NEW,"userA",ImmutableSet.of("")));
    allApps.put(app2,new MockRMApp(124,1001,RMAppState.NEW,"userA",ImmutableSet.of("")));
    allApps.put(app3,new MockRMApp(125,1002,RMAppState.NEW,"userA",ImmutableSet.of("")));
    Mockito.when(mockContext.getRMApps()).thenReturn(allApps);
    AllocationTagsManager atm=new AllocationTagsManager(mockContext);
    atm.addContainer(host1,TestUtils.getMockContainerId(1,1),ImmutableSet.of("A","B"));
    atm.addContainer(host1,TestUtils.getMockContainerId(1,2),ImmutableSet.of("A"));
    atm.addContainer(host1,TestUtils.getMockContainerId(2,1),ImmutableSet.of("A"));
    atm.addContainer(host1,TestUtils.getMockContainerId(2,2),ImmutableSet.of("A"));
    atm.addContainer(host1,TestUtils.getMockContainerId(2,3),ImmutableSet.of("A"));
    atm.addContainer(host1,TestUtils.getMockContainerId(3,1),ImmutableSet.of("A"));
    atm.addContainer(host2,TestUtils.getMockContainerId(1,3),ImmutableSet.of("C"));
    atm.addContainer(host2,TestUtils.getMockContainerId(2,4),ImmutableSet.of("A"));
    atm.addContainer(host2,TestUtils.getMockContainerId(2,5),ImmutableSet.of("B"));
    atm.addContainer(host2,TestUtils.getMockContainerId(2,6),ImmutableSet.of("B"));
    atm.addContainer(host2,TestUtils.getMockContainerId(3,2),ImmutableSet.of("B"));
    atm.addContainer(host3,TestUtils.getMockContainerId(2,7),ImmutableSet.of("D"));
    atm.addContainer(host3,TestUtils.getMockContainerId(3,3),ImmutableSet.of("D"));
    TargetApplications ta=new TargetApplications(app1,ImmutableSet.of(app1,app2,app3));
    AllocationTags tags=AllocationTags.createSingleAppAllocationTags(app1,ImmutableSet.of("A","C"));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(host1,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host2,tags,Long::min));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::min));
    tags=AllocationTags.createOtherAppAllocationTags(app1,ImmutableSet.of("A","B"));
    Assert.assertEquals(4,atm.getNodeCardinalityByOp(host1,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
    Assert.assertEquals(4,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
    tags=AllocationTags.createSingleAppAllocationTags(app2,ImmutableSet.of("A","B"));
    Assert.assertEquals(3,atm.getNodeCardinalityByOp(host1,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
    Assert.assertEquals(2,atm.getNodeCardinalityByOp(host2,tags,Long::max));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::min));
    Assert.assertEquals(3,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
    tags=AllocationTags.createGlobalAllocationTags(ImmutableSet.of("A"));
    Assert.assertEquals(6,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::sum));
    tags=AllocationTags.createGlobalAllocationTags(ImmutableSet.of("A","B"));
    Assert.assertEquals(7,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
    Assert.assertEquals(4,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::sum));
    Assert.assertEquals(6,atm.getNodeCardinalityByOp(host1,tags,Long::max));
    Assert.assertEquals(3,atm.getNodeCardinalityByOp(host2,tags,Long::max));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::max));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(host1,tags,Long::min));
    Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::min));
    Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::min));
  }
}
