public class CombinerTest {
  private FileSystem fs;
  private String inputpath;
  private String nativeoutputpath;
  private String hadoopoutputpath;
  @Test public void testWordCountCombiner() throws Exception {
    final Configuration nativeConf=ScenarioConfiguration.getNativeConfiguration();
    nativeConf.addResource(TestConstants.COMBINER_CONF_PATH);
    final Job nativejob=getJob("nativewordcount",nativeConf,inputpath,nativeoutputpath);
    final Configuration commonConf=ScenarioConfiguration.getNormalConfiguration();
    commonConf.addResource(TestConstants.COMBINER_CONF_PATH);
    final Job normaljob=getJob("normalwordcount",commonConf,inputpath,hadoopoutputpath);
    assertTrue(nativejob.waitForCompletion(true));
    assertTrue(normaljob.waitForCompletion(true));
    assertEquals(true,ResultVerifier.verify(nativeoutputpath,hadoopoutputpath));
    ResultVerifier.verifyCounters(normaljob,nativejob,true);
  }
  @Before public void startUp() throws Exception {
    Assume.assumeTrue(NativeCodeLoader.isNativeCodeLoaded());
    Assume.assumeTrue(NativeRuntime.isNativeLibraryLoaded());
    final ScenarioConfiguration conf=new ScenarioConfiguration();
    conf.addcombinerConf();
    this.fs=FileSystem.get(conf);
    this.inputpath=TestConstants.NATIVETASK_COMBINER_TEST_INPUTDIR + "/wordcount";
    if (!fs.exists(new Path(inputpath))) {
      new TestInputFile(conf.getInt(TestConstants.NATIVETASK_COMBINER_WORDCOUNT_FILESIZE,1000000),Text.class.getName(),Text.class.getName(),conf).createSequenceTestFile(inputpath,1,(byte)('a'));
    }
    this.nativeoutputpath=TestConstants.NATIVETASK_COMBINER_TEST_NATIVE_OUTPUTDIR + "/nativewordcount";
    this.hadoopoutputpath=TestConstants.NATIVETASK_COMBINER_TEST_NORMAL_OUTPUTDIR + "/normalwordcount";
  }
  @AfterClass public static void cleanUp() throws IOException {
    final FileSystem fs=FileSystem.get(new ScenarioConfiguration());
    fs.delete(new Path(TestConstants.NATIVETASK_COMBINER_TEST_DIR),true);
    fs.close();
  }
  protected static Job getJob(  String jobname,  Configuration inputConf,  String inputpath,  String outputpath) throws Exception {
    final Configuration conf=new Configuration(inputConf);
    conf.set("fileoutputpath",outputpath);
    final FileSystem fs=FileSystem.get(conf);
    if (fs.exists(new Path(outputpath))) {
      fs.delete(new Path(outputpath),true);
    }
    fs.close();
    final Job job=Job.getInstance(conf,jobname);
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    FileInputFormat.addInputPath(job,new Path(inputpath));
    FileOutputFormat.setOutputPath(job,new Path(outputpath));
    return job;
  }
}
