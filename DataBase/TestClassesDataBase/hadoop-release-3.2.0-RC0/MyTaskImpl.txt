class MyTaskImpl implements Task {
  private final TaskId taskID;
  private final Map<TaskAttemptId,TaskAttempt> attempts=new ConcurrentHashMap<TaskAttemptId,TaskAttempt>(4);
  MyTaskImpl(  JobId jobID,  int index,  TaskType type){
    taskID=recordFactory.newRecordInstance(TaskId.class);
    taskID.setId(index);
    taskID.setTaskType(type);
    taskID.setJobId(jobID);
  }
  void addAttempt(){
    TaskAttempt taskAttempt=new MyTaskAttemptImpl(taskID,attempts.size(),clock);
    TaskAttemptId taskAttemptID=taskAttempt.getID();
    attempts.put(taskAttemptID,taskAttempt);
    System.out.println("TLTRE.MyTaskImpl.addAttempt " + getID());
    SpeculatorEvent event=new SpeculatorEvent(taskID,+1);
    dispatcher.getEventHandler().handle(event);
  }
  @Override public TaskId getID(){
    return taskID;
  }
  @Override public TaskReport getReport(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Counters getCounters(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public float getProgress(){
    float result=0.0F;
    for (    TaskAttempt attempt : attempts.values()) {
      result=Math.max(result,attempt.getProgress());
    }
    return result;
  }
  @Override public TaskType getType(){
    return taskID.getTaskType();
  }
  @Override public Map<TaskAttemptId,TaskAttempt> getAttempts(){
    Map<TaskAttemptId,TaskAttempt> result=new HashMap<TaskAttemptId,TaskAttempt>(attempts.size());
    result.putAll(attempts);
    return result;
  }
  @Override public TaskAttempt getAttempt(  TaskAttemptId attemptID){
    return attempts.get(attemptID);
  }
  @Override public boolean isFinished(){
    for (    TaskAttempt attempt : attempts.values()) {
      if (attempt.getState() == TaskAttemptState.SUCCEEDED) {
        return true;
      }
    }
    return false;
  }
  @Override public boolean canCommit(  TaskAttemptId taskAttemptID){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public TaskState getState(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
}
