public class TestLocalContainerAllocator {
  @Test public void testRMConnectionRetry() throws Exception {
    ApplicationMasterProtocol mockScheduler=mock(ApplicationMasterProtocol.class);
    when(mockScheduler.allocate(isA(AllocateRequest.class))).thenThrow(RPCUtil.getRemoteException(new IOException("forcefail")));
    Configuration conf=new Configuration();
    LocalContainerAllocator lca=new StubbedLocalContainerAllocator(mockScheduler);
    lca.init(conf);
    lca.start();
    try {
      lca.heartbeat();
      Assert.fail("heartbeat was supposed to throw");
    }
 catch (    YarnException e) {
    }
 finally {
      lca.stop();
    }
    conf.setLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,0);
    lca=new StubbedLocalContainerAllocator(mockScheduler);
    lca.init(conf);
    lca.start();
    try {
      lca.heartbeat();
      Assert.fail("heartbeat was supposed to throw");
    }
 catch (    YarnRuntimeException e) {
    }
 finally {
      lca.stop();
    }
  }
  @Test public void testAllocResponseId() throws Exception {
    ApplicationMasterProtocol scheduler=new MockScheduler();
    Configuration conf=new Configuration();
    LocalContainerAllocator lca=new StubbedLocalContainerAllocator(scheduler);
    lca.init(conf);
    lca.start();
    lca.heartbeat();
    lca.heartbeat();
    lca.close();
  }
  @Test public void testAMRMTokenUpdate() throws Exception {
    Configuration conf=new Configuration();
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(ApplicationId.newInstance(1,1),1);
    AMRMTokenIdentifier oldTokenId=new AMRMTokenIdentifier(attemptId,1);
    AMRMTokenIdentifier newTokenId=new AMRMTokenIdentifier(attemptId,2);
    Token<AMRMTokenIdentifier> oldToken=new Token<AMRMTokenIdentifier>(oldTokenId.getBytes(),"oldpassword".getBytes(),oldTokenId.getKind(),new Text());
    Token<AMRMTokenIdentifier> newToken=new Token<AMRMTokenIdentifier>(newTokenId.getBytes(),"newpassword".getBytes(),newTokenId.getKind(),new Text());
    MockScheduler scheduler=new MockScheduler();
    scheduler.amToken=newToken;
    final LocalContainerAllocator lca=new StubbedLocalContainerAllocator(scheduler);
    lca.init(conf);
    lca.start();
    UserGroupInformation testUgi=UserGroupInformation.createUserForTesting("someuser",new String[0]);
    testUgi.addToken(oldToken);
    testUgi.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        lca.heartbeat();
        return null;
      }
    }
);
    lca.close();
    int tokenCount=0;
    Token<? extends TokenIdentifier> ugiToken=null;
    for (    Token<? extends TokenIdentifier> token : testUgi.getTokens()) {
      if (AMRMTokenIdentifier.KIND_NAME.equals(token.getKind())) {
        ugiToken=token;
        ++tokenCount;
      }
    }
    Assert.assertEquals("too many AMRM tokens",1,tokenCount);
    Assert.assertArrayEquals("token identifier not updated",newToken.getIdentifier(),ugiToken.getIdentifier());
    Assert.assertArrayEquals("token password not updated",newToken.getPassword(),ugiToken.getPassword());
    Assert.assertEquals("AMRM token service not updated",new Text(ClientRMProxy.getAMRMTokenService(conf)),ugiToken.getService());
  }
  @Test public void testAllocatedContainerResourceIsNotNull(){
    ArgumentCaptor<TaskAttemptContainerAssignedEvent> containerAssignedCaptor=ArgumentCaptor.forClass(TaskAttemptContainerAssignedEvent.class);
    @SuppressWarnings("unchecked") EventHandler<Event> eventHandler=mock(EventHandler.class);
    AppContext context=mock(AppContext.class);
    when(context.getEventHandler()).thenReturn(eventHandler);
    ContainerId containerId=ContainerId.fromString("container_1427562107907_0002_01_000001");
    LocalContainerAllocator containerAllocator=new LocalContainerAllocator(mock(ClientService.class),context,"localhost",-1,-1,containerId);
    ContainerAllocatorEvent containerAllocatorEvent=createContainerRequestEvent();
    containerAllocator.handle(containerAllocatorEvent);
    verify(eventHandler,times(1)).handle(containerAssignedCaptor.capture());
    Container container=containerAssignedCaptor.getValue().getContainer();
    Resource containerResource=container.getResource();
    Assert.assertNotNull(containerResource);
    Assert.assertEquals(containerResource.getMemorySize(),0);
    Assert.assertEquals(containerResource.getVirtualCores(),0);
  }
  private static ContainerAllocatorEvent createContainerRequestEvent(){
    TaskAttemptId taskAttemptId=mock(TaskAttemptId.class);
    TaskId taskId=mock(TaskId.class);
    when(taskAttemptId.getTaskId()).thenReturn(taskId);
    return new ContainerAllocatorEvent(taskAttemptId,ContainerAllocator.EventType.CONTAINER_REQ);
  }
private static class StubbedLocalContainerAllocator extends LocalContainerAllocator {
    private ApplicationMasterProtocol scheduler;
    public StubbedLocalContainerAllocator(    ApplicationMasterProtocol scheduler){
      super(mock(ClientService.class),createAppContext(),"nmhost",1,2,null);
      this.scheduler=scheduler;
    }
    @Override protected void register(){
    }
    @Override protected void unregister(){
    }
    @Override protected void startAllocatorThread(){
      allocatorThread=new Thread();
    }
    @Override protected ApplicationMasterProtocol createSchedulerProxy(){
      return scheduler;
    }
    private static AppContext createAppContext(){
      ApplicationId appId=ApplicationId.newInstance(1,1);
      ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
      Job job=mock(Job.class);
      @SuppressWarnings("unchecked") EventHandler<Event> eventHandler=mock(EventHandler.class);
      AppContext ctx=mock(AppContext.class);
      when(ctx.getApplicationID()).thenReturn(appId);
      when(ctx.getApplicationAttemptId()).thenReturn(attemptId);
      when(ctx.getJob(isA(JobId.class))).thenReturn(job);
      when(ctx.getClusterInfo()).thenReturn(new ClusterInfo(Resource.newInstance(10240,1)));
      when(ctx.getEventHandler()).thenReturn(eventHandler);
      return ctx;
    }
  }
private static class MockScheduler implements ApplicationMasterProtocol {
    int responseId=0;
    Token<AMRMTokenIdentifier> amToken=null;
    @Override public RegisterApplicationMasterResponse registerApplicationMaster(    RegisterApplicationMasterRequest request) throws YarnException, IOException {
      return null;
    }
    @Override public FinishApplicationMasterResponse finishApplicationMaster(    FinishApplicationMasterRequest request) throws YarnException, IOException {
      return null;
    }
    @Override public AllocateResponse allocate(    AllocateRequest request) throws YarnException, IOException {
      Assert.assertEquals("response ID mismatch",responseId,request.getResponseId());
      ++responseId;
      org.apache.hadoop.yarn.api.records.Token yarnToken=null;
      if (amToken != null) {
        yarnToken=org.apache.hadoop.yarn.api.records.Token.newInstance(amToken.getIdentifier(),amToken.getKind().toString(),amToken.getPassword(),amToken.getService().toString());
      }
      AllocateResponse response=AllocateResponse.newInstance(responseId,Collections.<ContainerStatus>emptyList(),Collections.<Container>emptyList(),Collections.<NodeReport>emptyList(),Resources.none(),null,1,null,Collections.<NMToken>emptyList(),yarnToken,Collections.<UpdatedContainer>emptyList());
      response.setApplicationPriority(Priority.newInstance(0));
      return response;
    }
  }
}
