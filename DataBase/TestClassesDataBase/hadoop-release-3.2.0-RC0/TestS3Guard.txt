/** 
 * Tests for the  {@link S3Guard} utility class.
 */
public class TestS3Guard extends Assert {
  /** 
 * Basic test to ensure results from S3 and MetadataStore are merged correctly.
 */
  @Test public void testDirListingUnion() throws Exception {
    MetadataStore ms=new LocalMetadataStore();
    Path dirPath=new Path("s3a://bucket/dir");
    PathMetadata m1=makePathMeta("s3a://bucket/dir/ms-file1",false);
    PathMetadata m2=makePathMeta("s3a://bucket/dir/ms-file2",false);
    DirListingMetadata dirMeta=new DirListingMetadata(dirPath,Arrays.asList(m1,m2),false);
    List<FileStatus> s3Listing=Arrays.asList(makeFileStatus("s3a://bucket/dir/s3-file3",false),makeFileStatus("s3a://bucket/dir/s3-file4",false));
    FileStatus[] result=S3Guard.dirListingUnion(ms,dirPath,s3Listing,dirMeta,false);
    assertEquals("listing length",4,result.length);
    assertContainsPath(result,"s3a://bucket/dir/ms-file1");
    assertContainsPath(result,"s3a://bucket/dir/ms-file2");
    assertContainsPath(result,"s3a://bucket/dir/s3-file3");
    assertContainsPath(result,"s3a://bucket/dir/s3-file4");
  }
  void assertContainsPath(  FileStatus[] statuses,  String pathStr){
    assertTrue("listing doesn't contain " + pathStr,containsPath(statuses,pathStr));
  }
  boolean containsPath(  FileStatus[] statuses,  String pathStr){
    for (    FileStatus s : statuses) {
      if (s.getPath().toString().equals(pathStr)) {
        return true;
      }
    }
    return false;
  }
  private PathMetadata makePathMeta(  String pathStr,  boolean isDir){
    return new PathMetadata(makeFileStatus(pathStr,isDir));
  }
  private FileStatus makeFileStatus(  String pathStr,  boolean isDir){
    Path p=new Path(pathStr);
    if (isDir) {
      return new FileStatus(0,true,1,1,System.currentTimeMillis(),p);
    }
 else {
      return new FileStatus(100,false,1,1,System.currentTimeMillis(),p);
    }
  }
}
