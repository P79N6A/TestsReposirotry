class TestZKRMStateStoreTester implements RMStateStoreHelper {
  TestZKRMStateStoreInternal store;
  String workingZnode;
class TestZKRMStateStoreInternal extends ZKRMStateStore {
    TestZKRMStateStoreInternal(    Configuration conf,    String workingZnode) throws Exception {
      setResourceManager(new ResourceManager());
      init(conf);
      dispatcher.disableExitOnDispatchException();
      start();
      assertTrue(znodeWorkingPath.equals(workingZnode));
    }
    private String getVersionNode(){
      return znodeWorkingPath + "/" + ROOT_ZNODE_NAME+ "/"+ VERSION_NODE;
    }
    @Override public Version getCurrentVersion(){
      return CURRENT_VERSION_INFO;
    }
    private String getAppNode(    String appId,    int splitIdx){
      String rootPath=workingZnode + "/" + ROOT_ZNODE_NAME+ "/"+ RM_APP_ROOT;
      String appPath=appId;
      if (splitIdx != 0) {
        int idx=appId.length() - splitIdx;
        appPath=appId.substring(0,idx) + "/" + appId.substring(idx);
        return rootPath + "/" + RM_APP_ROOT_HIERARCHIES+ "/"+ Integer.toString(splitIdx)+ "/"+ appPath;
      }
      return rootPath + "/" + appPath;
    }
    private String getAppNode(    String appId){
      return getAppNode(appId,0);
    }
    private String getAttemptNode(    String appId,    String attemptId){
      return getAppNode(appId) + "/" + attemptId;
    }
    /** 
 * Emulating retrying createRootDir not to raise NodeExist exception
 * @throws Exception
 */
    private void testRetryingCreateRootDir() throws Exception {
      create(znodeWorkingPath);
    }
    private String getDelegationTokenNode(    int rmDTSequenceNumber,    int splitIdx){
      String rootPath=workingZnode + "/" + ROOT_ZNODE_NAME+ "/"+ RM_DT_SECRET_MANAGER_ROOT+ "/"+ RMStateStore.RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME;
      String nodeName=DELEGATION_TOKEN_PREFIX;
      if (splitIdx == 0) {
        nodeName+=rmDTSequenceNumber;
      }
 else {
        nodeName+=String.format("%04d",rmDTSequenceNumber);
      }
      String path=nodeName;
      if (splitIdx != 0) {
        int idx=nodeName.length() - splitIdx;
        path=splitIdx + "/" + nodeName.substring(0,idx)+ "/"+ nodeName.substring(idx);
      }
      return rootPath + "/" + path;
    }
  }
  private RMStateStore createStore(  Configuration conf) throws Exception {
    workingZnode="/jira/issue/3077/rmstore";
    conf.set(CommonConfigurationKeys.ZK_ADDRESS,curatorTestingServer.getConnectString());
    conf.set(YarnConfiguration.ZK_RM_STATE_STORE_PARENT_PATH,workingZnode);
    conf.setLong(YarnConfiguration.RM_EPOCH,epoch);
    conf.setLong(YarnConfiguration.RM_EPOCH_RANGE,getEpochRange());
    this.store=new TestZKRMStateStoreInternal(conf,workingZnode);
    return this.store;
  }
  public RMStateStore getRMStateStore(  Configuration conf) throws Exception {
    return createStore(conf);
  }
  @Override public RMStateStore getRMStateStore() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    return createStore(conf);
  }
  @Override public boolean isFinalStateValid() throws Exception {
    return 1 == curatorFramework.getChildren().forPath(store.znodeWorkingPath).size();
  }
  @Override public void writeVersion(  Version version) throws Exception {
    curatorFramework.setData().withVersion(-1).forPath(store.getVersionNode(),((VersionPBImpl)version).getProto().toByteArray());
  }
  @Override public Version getCurrentVersion() throws Exception {
    return store.getCurrentVersion();
  }
  @Override public boolean appExists(  RMApp app) throws Exception {
    String appIdPath=app.getApplicationId().toString();
    int split=store.getConfig().getInt(YarnConfiguration.ZK_APPID_NODE_SPLIT_INDEX,YarnConfiguration.DEFAULT_ZK_APPID_NODE_SPLIT_INDEX);
    return null != curatorFramework.checkExists().forPath(store.getAppNode(appIdPath,split));
  }
  @Override public boolean attemptExists(  RMAppAttempt attempt) throws Exception {
    ApplicationAttemptId attemptId=attempt.getAppAttemptId();
    return null != curatorFramework.checkExists().forPath(store.getAttemptNode(attemptId.getApplicationId().toString(),attemptId.toString()));
  }
  public boolean delegationTokenExists(  RMDelegationTokenIdentifier token,  int index) throws Exception {
    int rmDTSequenceNumber=token.getSequenceNumber();
    return curatorFramework.checkExists().forPath(store.getDelegationTokenNode(rmDTSequenceNumber,index)) != null;
  }
  public int getDelegationTokenNodeSplitIndex(){
    return store.delegationTokenNodeSplitIndex;
  }
}
