/** 
 * A JobHistory stub that treat all jobs as oversized and therefore will not parse their job history files but return a UnparseJob instance.
 */
static class JobHistoryStubWithAllOversizeJobs extends JobHistory {
  private final int maxAllowedTaskNum;
  public JobHistoryStubWithAllOversizeJobs(  int maxAllowedTaskNum){
    this.maxAllowedTaskNum=maxAllowedTaskNum;
  }
  @Override protected HistoryFileManager createHistoryFileManager(){
    HistoryFileManager historyFileManager;
    try {
      HistoryFileInfo historyFileInfo=createUnparsedJobHistoryFileInfo(maxAllowedTaskNum);
      historyFileManager=mock(HistoryFileManager.class);
      when(historyFileManager.getFileInfo(any(JobId.class))).thenReturn(historyFileInfo);
    }
 catch (    IOException ex) {
      historyFileManager=super.createHistoryFileManager();
    }
    return historyFileManager;
  }
  private static HistoryFileInfo createUnparsedJobHistoryFileInfo(  int maxAllowedTaskNum) throws IOException {
    HistoryFileInfo fileInfo=mock(HistoryFileInfo.class);
    UnparsedJob unparsedJob=mock(UnparsedJob.class);
    when(unparsedJob.getMaxTasksAllowed()).thenReturn(maxAllowedTaskNum);
    when(unparsedJob.getTotalMaps()).thenReturn(maxAllowedTaskNum);
    when(unparsedJob.getTotalReduces()).thenReturn(maxAllowedTaskNum);
    when(fileInfo.loadJob()).thenReturn(unparsedJob);
    return fileInfo;
  }
}
