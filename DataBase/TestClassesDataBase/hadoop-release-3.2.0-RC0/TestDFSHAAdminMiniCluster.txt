/** 
 * Tests for HAAdmin command with  {@link MiniDFSCluster} set up in HA mode.
 */
public class TestDFSHAAdminMiniCluster {
static {
    GenericTestUtils.setLogLevel(LoggerFactory.getLogger(HAAdmin.class),Level.TRACE);
  }
  private static final Logger LOG=LoggerFactory.getLogger(TestDFSHAAdminMiniCluster.class);
  private MiniDFSCluster cluster;
  private Configuration conf;
  private DFSHAAdmin tool;
  private final ByteArrayOutputStream errOutBytes=new ByteArrayOutputStream();
  private String errOutput;
  private int nn1Port;
  @Before public void setup() throws IOException {
    conf=new Configuration();
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
    tool=new DFSHAAdmin();
    tool.setConf(conf);
    tool.setErrOut(new PrintStream(errOutBytes));
    cluster.waitActive();
    nn1Port=cluster.getNameNodePort(0);
  }
  @After public void shutdown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testGetServiceState() throws Exception {
    assertEquals(0,runTool("-getServiceState","nn1"));
    assertEquals(0,runTool("-getServiceState","nn2"));
    cluster.transitionToActive(0);
    assertEquals(0,runTool("-getServiceState","nn1"));
    NameNodeAdapter.enterSafeMode(cluster.getNameNode(0),false);
    assertEquals(0,runTool("-getServiceState","nn1"));
  }
  @Test public void testStateTransition() throws Exception {
    NameNode nnode1=cluster.getNameNode(0);
    assertTrue(nnode1.isStandbyState());
    assertEquals(0,runTool("-transitionToActive","nn1"));
    assertFalse(nnode1.isStandbyState());
    assertEquals(0,runTool("-transitionToStandby","nn1"));
    assertTrue(nnode1.isStandbyState());
    NameNode nnode2=cluster.getNameNode(1);
    assertTrue(nnode2.isStandbyState());
    assertEquals(0,runTool("-transitionToActive","nn2"));
    assertFalse(nnode2.isStandbyState());
    assertEquals(0,runTool("-transitionToStandby","nn2"));
    assertTrue(nnode2.isStandbyState());
  }
  @Test public void testTryFailoverToSafeMode() throws Exception {
    conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,TestDFSHAAdmin.getFencerTrueCommand());
    tool.setConf(conf);
    NameNodeAdapter.enterSafeMode(cluster.getNameNode(0),false);
    assertEquals(-1,runTool("-failover","nn2","nn1"));
    assertTrue("Bad output: " + errOutput,errOutput.contains("is not ready to become active: " + "The NameNode is in safemode"));
  }
  /** 
 * Test failover with various options
 */
  @Test public void testFencer() throws Exception {
    assertEquals(-1,runTool("-failover","nn1","nn2"));
    File tmpFile=File.createTempFile("testFencer",".txt");
    tmpFile.deleteOnExit();
    if (Shell.WINDOWS) {
      conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"shell(echo %target_nameserviceid%.%target_namenodeid% " + "%target_port% %dfs_ha_namenode_id% > " + tmpFile.getAbsolutePath() + ")");
    }
 else {
      conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"shell(echo -n $target_nameserviceid.$target_namenodeid " + "$target_port $dfs_ha_namenode_id > " + tmpFile.getAbsolutePath() + ")");
    }
    tool.setConf(conf);
    assertEquals(0,runTool("-transitionToActive","nn1"));
    assertEquals(0,runTool("-failover","nn1","nn2"));
    assertEquals(0,runTool("-ns","minidfs-ns","-failover","nn2","nn1"));
    assertEquals("",Files.toString(tmpFile,Charsets.UTF_8));
    assertEquals(0,runTool("-failover","nn1","nn2","--forcefence"));
    String fenceCommandOutput=Files.toString(tmpFile,Charsets.UTF_8).replaceAll(" *[\r\n]+","");
    assertEquals("minidfs-ns.nn1 " + nn1Port + " nn1",fenceCommandOutput);
    tmpFile.delete();
    assertEquals(0,runTool("-failover","nn2","nn1","--forceactive"));
    assertFalse(tmpFile.exists());
    conf.unset(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY);
    tool.setConf(conf);
    assertEquals(-1,runTool("-failover","nn1","nn2","--forcefence"));
    assertFalse(tmpFile.exists());
    conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"foobar!");
    tool.setConf(conf);
    assertEquals(-1,runTool("-failover","nn1","nn2","--forcefence"));
    assertFalse(tmpFile.exists());
    conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,TestDFSHAAdmin.getFencerTrueCommand());
    tool.setConf(conf);
    assertEquals(0,runTool("-failover","--forcefence","nn1","nn2"));
  }
  @Test public void testCheckHealth() throws Exception {
    assertEquals(0,runTool("-checkHealth","nn1"));
    assertEquals(0,runTool("-checkHealth","nn2"));
  }
  /** 
 * Test case to check whether both the name node is active or not
 * @throws Exception
 */
  @Test public void testTransitionToActiveWhenOtherNamenodeisActive() throws Exception {
    NameNode nn1=cluster.getNameNode(0);
    NameNode nn2=cluster.getNameNode(1);
    if (nn1.getState() != null && !nn1.getState().equals(HAServiceState.STANDBY.name())) {
      cluster.transitionToStandby(0);
    }
    if (nn2.getState() != null && !nn2.getState().equals(HAServiceState.STANDBY.name())) {
      cluster.transitionToStandby(1);
    }
    assertTrue(nn1.isStandbyState());
    assertTrue(nn2.isStandbyState());
    runTool("-transitionToActive","nn1");
    runTool("-transitionToActive","nn2");
    assertFalse("Both namenodes cannot be active",nn1.isActiveState() && nn2.isActiveState());
    cluster.shutdownNameNode(0);
    if (nn2.getState() != null && !nn2.getState().equals(HAServiceState.STANDBY.name())) {
      cluster.transitionToStandby(1);
    }
    assertTrue(nn2.isStandbyState());
    assertFalse(cluster.isNameNodeUp(0));
    runTool("-transitionToActive","nn2","--forceactive");
    assertTrue("Namenode nn2 should be active",nn2.isActiveState());
  }
  private int runTool(  String... args) throws Exception {
    errOutBytes.reset();
    LOG.info("Running: DFSHAAdmin " + Joiner.on(" ").join(args));
    int ret=tool.run(args);
    errOutput=new String(errOutBytes.toByteArray(),Charsets.UTF_8);
    LOG.info("Output:\n" + errOutput);
    return ret;
  }
}
