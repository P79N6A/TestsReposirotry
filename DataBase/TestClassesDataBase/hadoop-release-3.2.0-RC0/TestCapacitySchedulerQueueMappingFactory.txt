public class TestCapacitySchedulerQueueMappingFactory {
  private static final String QUEUE_MAPPING_NAME="app-name";
  private static final String QUEUE_MAPPING_RULE_APP_NAME="org.apache.hadoop.yarn.server.resourcemanager.placement.AppNameMappingPlacementRule";
  private static final String QUEUE_MAPPING_RULE_USER_GROUP="org.apache.hadoop.yarn.server.resourcemanager.placement.UserGroupMappingPlacementRule";
  public static final String USER="user_";
  public static final String PARENT_QUEUE="c";
  private MockRM mockRM=null;
  public static CapacitySchedulerConfiguration setupQueueMappingsForRules(  CapacitySchedulerConfiguration conf,  String parentQueue,  boolean overrideWithQueueMappings,  int[] sourceIds){
    List<String> queuePlacementRules=new ArrayList<>();
    queuePlacementRules.add(QUEUE_MAPPING_RULE_USER_GROUP);
    queuePlacementRules.add(QUEUE_MAPPING_RULE_APP_NAME);
    conf.setQueuePlacementRules(queuePlacementRules);
    List<UserGroupMappingPlacementRule.QueueMapping> existingMappingsForUG=conf.getQueueMappings();
    List<UserGroupMappingPlacementRule.QueueMapping> queueMappingsForUG=new ArrayList<>();
    for (int i=0; i < sourceIds.length; i++) {
      UserGroupMappingPlacementRule.QueueMapping userQueueMapping=new UserGroupMappingPlacementRule.QueueMapping(UserGroupMappingPlacementRule.QueueMapping.MappingType.USER,USER + sourceIds[i],getQueueMapping(parentQueue,USER + sourceIds[i]));
      queueMappingsForUG.add(userQueueMapping);
    }
    existingMappingsForUG.addAll(queueMappingsForUG);
    conf.setQueueMappings(existingMappingsForUG);
    List<QueueMappingEntity> existingMappingsForAN=conf.getQueueMappingEntity(QUEUE_MAPPING_NAME);
    List<QueueMappingEntity> queueMappingsForAN=new ArrayList<>();
    for (int i=0; i < sourceIds.length; i++) {
      QueueMappingEntity queueMapping=new QueueMappingEntity(USER + sourceIds[i],getQueueMapping(parentQueue,USER + sourceIds[i]));
      queueMappingsForAN.add(queueMapping);
    }
    existingMappingsForAN.addAll(queueMappingsForAN);
    conf.setQueueMappingEntities(existingMappingsForAN,QUEUE_MAPPING_NAME);
    conf.setOverrideWithQueueMappings(overrideWithQueueMappings);
    return conf;
  }
  @Test public void testUpdatePlacementRulesFactory() throws Exception {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    setupQueueConfiguration(conf);
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    setupQueueMappingsForRules(conf,PARENT_QUEUE,true,new int[]{1,2,3});
    mockRM=new MockRM(conf);
    CapacityScheduler cs=(CapacityScheduler)mockRM.getResourceScheduler();
    cs.updatePlacementRules();
    mockRM.start();
    cs.start();
    List<PlacementRule> rules=cs.getRMContext().getQueuePlacementManager().getPlacementRules();
    List<String> placementRuleNames=new ArrayList<>();
    for (    PlacementRule pr : rules) {
      placementRuleNames.add(pr.getName());
    }
    assertThat(placementRuleNames,hasItems(QUEUE_MAPPING_RULE_USER_GROUP));
    assertThat(placementRuleNames,hasItems(QUEUE_MAPPING_RULE_APP_NAME));
  }
}
