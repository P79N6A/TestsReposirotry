/** 
 * This class is responsible for testing ContentSummary, ListStatus on file/folder.
 */
public class TestMetadata {
  private FileSystem adlStore;
  private Path parent;
  public TestMetadata(){
    parent=new Path("test");
  }
  @Before public void setUp() throws Exception {
    Assume.assumeTrue(AdlStorageConfiguration.isContractTestEnabled());
    adlStore=AdlStorageConfiguration.createStorageConnector();
  }
  @After public void cleanUp() throws Exception {
    if (AdlStorageConfiguration.isContractTestEnabled()) {
      adlStore.delete(parent,true);
    }
  }
  @Test public void testContentSummaryOnFile() throws IOException {
    Path child=new Path(UUID.randomUUID().toString());
    Path testFile=new Path(parent,child);
    OutputStream out=adlStore.create(testFile);
    for (int i=0; i < 1024; ++i) {
      out.write(97);
    }
    out.close();
    Assert.assertTrue(adlStore.isFile(testFile));
    ContentSummary summary=adlStore.getContentSummary(testFile);
    Assert.assertEquals(1024,summary.getSpaceConsumed());
    Assert.assertEquals(1,summary.getFileCount());
    Assert.assertEquals(0,summary.getDirectoryCount());
    Assert.assertEquals(1024,summary.getLength());
  }
  @Test public void testContentSummaryOnFolder() throws IOException {
    Path child=new Path(UUID.randomUUID().toString());
    Path testFile=new Path(parent,child);
    OutputStream out=adlStore.create(testFile);
    for (int i=0; i < 1024; ++i) {
      out.write(97);
    }
    out.close();
    Assert.assertTrue(adlStore.isFile(testFile));
    ContentSummary summary=adlStore.getContentSummary(parent);
    Assert.assertEquals(1024,summary.getSpaceConsumed());
    Assert.assertEquals(1,summary.getFileCount());
    Assert.assertEquals(1,summary.getDirectoryCount());
    Assert.assertEquals(1024,summary.getLength());
  }
  @Test public void listStatusOnFile() throws IOException {
    Path path=new Path(parent,"a.txt");
    FileSystem fs=adlStore;
    fs.createNewFile(path);
    Assert.assertTrue(fs.isFile(path));
    FileStatus[] statuses=fs.listStatus(path);
    Assert.assertEquals(path.makeQualified(fs.getUri(),fs.getWorkingDirectory()),statuses[0].getPath());
  }
  @Test public void testUserRepresentationConfiguration() throws IOException {
    Path path=new Path(parent,"a.txt");
    AdlFileSystem fs=(AdlFileSystem)adlStore;
    fs.setUserGroupRepresentationAsUPN(false);
    fs.createNewFile(path);
    Assert.assertTrue(fs.isFile(path));
    FileStatus fileStatus=fs.getFileStatus(path);
    UUID.fromString(fileStatus.getGroup());
    UUID.fromString(fileStatus.getOwner());
    fs.setUserGroupRepresentationAsUPN(true);
    fileStatus=fs.getFileStatus(path);
    try {
      UUID.fromString(fileStatus.getGroup());
      UUID.fromString(fileStatus.getOwner());
      fail("Expected user friendly name to be non guid value.");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
