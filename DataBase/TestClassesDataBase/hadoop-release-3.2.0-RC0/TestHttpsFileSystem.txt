public class TestHttpsFileSystem {
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestHttpsFileSystem.class.getSimpleName());
  private static MiniDFSCluster cluster;
  private static Configuration conf;
  private static String keystoresDir;
  private static String sslConfDir;
  private static String nnAddr;
  @BeforeClass public static void setUp() throws Exception {
    conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    conf.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestHttpsFileSystem.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
    conf.set(DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
    conf.set(DFSConfigKeys.DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    OutputStream os=cluster.getFileSystem().create(new Path("/test"));
    os.write(23);
    os.close();
    InetSocketAddress addr=cluster.getNameNode().getHttpsAddress();
    nnAddr=NetUtils.getHostPortString(addr);
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,nnAddr);
  }
  @AfterClass public static void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
    FileUtil.fullyDelete(new File(BASEDIR));
    KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
  }
  @Test public void testSWebHdfsFileSystem() throws Exception {
    FileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,"swebhdfs");
    final Path f=new Path("/testswebhdfs");
    FSDataOutputStream os=fs.create(f);
    os.write(23);
    os.close();
    Assert.assertTrue(fs.exists(f));
    InputStream is=fs.open(f);
    Assert.assertEquals(23,is.read());
    is.close();
    fs.close();
  }
}
