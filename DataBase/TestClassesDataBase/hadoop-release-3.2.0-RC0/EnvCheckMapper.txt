private static class EnvCheckMapper extends MapReduceBase implements Mapper<WritableComparable,Writable,WritableComparable,Writable> {
  @Override @SuppressWarnings("deprecation") public void configure(  JobConf job){
    boolean oldConfigs=job.getBoolean(OLD_CONFIGS,false);
    if (oldConfigs) {
      String javaOpts=job.get(JobConf.MAPRED_TASK_JAVA_OPTS);
      assertNotNull(JobConf.MAPRED_TASK_JAVA_OPTS + " is null!",javaOpts);
      assertEquals(JobConf.MAPRED_TASK_JAVA_OPTS + " has value of: " + javaOpts,javaOpts,TASK_OPTS_VAL);
    }
 else {
      String mapJavaOpts=job.get(JobConf.MAPRED_MAP_TASK_JAVA_OPTS);
      assertNotNull(JobConf.MAPRED_MAP_TASK_JAVA_OPTS + " is null!",mapJavaOpts);
      assertEquals(JobConf.MAPRED_MAP_TASK_JAVA_OPTS + " has value of: " + mapJavaOpts,mapJavaOpts,MAP_OPTS_VAL);
    }
    checkEnv("LANG","en_us_8859_1","noappend");
    checkEnv("MY_PATH","/tmp","noappend");
    checkEnv("NEW_PATH",File.pathSeparator + "/tmp","noappend");
    String jobLocalDir=job.get(MRJobConfig.JOB_LOCAL_DIR);
    assertNotNull(MRJobConfig.JOB_LOCAL_DIR + " is null",jobLocalDir);
  }
  public void map(  WritableComparable key,  Writable value,  OutputCollector<WritableComparable,Writable> out,  Reporter reporter) throws IOException {
  }
}
