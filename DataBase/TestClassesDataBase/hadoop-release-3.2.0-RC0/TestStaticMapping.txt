/** 
 * Test the static mapping class. Because the map is actually static, this map needs to be reset for every test
 */
public class TestStaticMapping extends Assert {
  private static final Logger LOG=LoggerFactory.getLogger(TestStaticMapping.class);
  /** 
 * Reset the map then create a new instance of the  {@link StaticMapping}class with a null configuration
 * @return a new instance
 */
  private StaticMapping newInstance(){
    StaticMapping.resetMap();
    return new StaticMapping();
  }
  /** 
 * Reset the map then create a new instance of the  {@link StaticMapping}class with the topology script in the configuration set to the parameter
 * @param script a (never executed) script, can be null
 * @return a new instance
 */
  private StaticMapping newInstance(  String script){
    StaticMapping mapping=newInstance();
    mapping.setConf(createConf(script));
    return mapping;
  }
  /** 
 * Create a configuration with a specific topology script
 * @param script a (never executed) script, can be null
 * @return a configuration
 */
  private Configuration createConf(  String script){
    Configuration conf=new Configuration();
    if (script != null) {
      conf.set(CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY,script);
    }
 else {
      conf.unset(CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY);
    }
    return conf;
  }
  private void assertSingleSwitch(  DNSToSwitchMapping mapping){
    assertEquals("Expected a single switch mapping " + mapping,true,AbstractDNSToSwitchMapping.isMappingSingleSwitch(mapping));
  }
  private void assertMultiSwitch(  DNSToSwitchMapping mapping){
    assertEquals("Expected a multi switch mapping " + mapping,false,AbstractDNSToSwitchMapping.isMappingSingleSwitch(mapping));
  }
  protected void assertMapSize(  AbstractDNSToSwitchMapping switchMapping,  int expectedSize){
    assertEquals("Expected two entries in the map " + switchMapping.dumpTopology(),expectedSize,switchMapping.getSwitchMap().size());
  }
  private List<String> createQueryList(){
    List<String> l1=new ArrayList<String>(2);
    l1.add("n1");
    l1.add("unknown");
    return l1;
  }
  @Test public void testStaticIsSingleSwitchOnNullScript() throws Throwable {
    StaticMapping mapping=newInstance(null);
    mapping.setConf(createConf(null));
    assertSingleSwitch(mapping);
  }
  @Test public void testStaticIsMultiSwitchOnScript() throws Throwable {
    StaticMapping mapping=newInstance("ls");
    assertMultiSwitch(mapping);
  }
  @Test public void testAddResolveNodes() throws Throwable {
    StaticMapping mapping=newInstance();
    StaticMapping.addNodeToRack("n1","/r1");
    List<String> queryList=createQueryList();
    List<String> resolved=mapping.resolve(queryList);
    assertEquals(2,resolved.size());
    assertEquals("/r1",resolved.get(0));
    assertEquals(NetworkTopology.DEFAULT_RACK,resolved.get(1));
    Map<String,String> switchMap=mapping.getSwitchMap();
    String topology=mapping.dumpTopology();
    LOG.info(topology);
    assertEquals(topology,1,switchMap.size());
    assertEquals(topology,"/r1",switchMap.get("n1"));
  }
  /** 
 * Verify that a configuration string builds a topology
 */
  @Test public void testReadNodesFromConfig() throws Throwable {
    StaticMapping mapping=newInstance();
    Configuration conf=new Configuration();
    conf.set(StaticMapping.KEY_HADOOP_CONFIGURED_NODE_MAPPING,"n1=/r1,n2=/r2");
    mapping.setConf(conf);
    assertSingleSwitch(mapping);
    List<String> l1=new ArrayList<String>(3);
    l1.add("n1");
    l1.add("unknown");
    l1.add("n2");
    List<String> resolved=mapping.resolve(l1);
    assertEquals(3,resolved.size());
    assertEquals("/r1",resolved.get(0));
    assertEquals(NetworkTopology.DEFAULT_RACK,resolved.get(1));
    assertEquals("/r2",resolved.get(2));
    Map<String,String> switchMap=mapping.getSwitchMap();
    String topology=mapping.dumpTopology();
    LOG.info(topology);
    assertEquals(topology,2,switchMap.size());
    assertEquals(topology,"/r1",switchMap.get("n1"));
    assertNull(topology,switchMap.get("unknown"));
  }
  /** 
 * Verify that if the inner mapping is single-switch, so is the cached one
 * @throws Throwable on any problem
 */
  @Test public void testCachingRelaysSingleSwitchQueries() throws Throwable {
    StaticMapping staticMapping=newInstance(null);
    assertSingleSwitch(staticMapping);
    CachedDNSToSwitchMapping cachedMap=new CachedDNSToSwitchMapping(staticMapping);
    LOG.info("Mapping: " + cachedMap + "\n"+ cachedMap.dumpTopology());
    assertSingleSwitch(cachedMap);
  }
  /** 
 * Verify that if the inner mapping is multi-switch, so is the cached one
 * @throws Throwable on any problem
 */
  @Test public void testCachingRelaysMultiSwitchQueries() throws Throwable {
    StaticMapping staticMapping=newInstance("top");
    assertMultiSwitch(staticMapping);
    CachedDNSToSwitchMapping cachedMap=new CachedDNSToSwitchMapping(staticMapping);
    LOG.info("Mapping: " + cachedMap + "\n"+ cachedMap.dumpTopology());
    assertMultiSwitch(cachedMap);
  }
  /** 
 * This test verifies that resultion queries get relayed to the inner rack
 * @throws Throwable on any problem
 */
  @Test public void testCachingRelaysResolveQueries() throws Throwable {
    StaticMapping mapping=newInstance();
    mapping.setConf(createConf("top"));
    StaticMapping staticMapping=mapping;
    CachedDNSToSwitchMapping cachedMap=new CachedDNSToSwitchMapping(staticMapping);
    assertMapSize(cachedMap,0);
    StaticMapping.addNodeToRack("n1","/r1");
    assertMapSize(staticMapping,1);
    assertMapSize(cachedMap,0);
    cachedMap.resolve(createQueryList());
    assertMapSize(cachedMap,2);
  }
  /** 
 * This test verifies that resultion queries get relayed to the inner rack
 * @throws Throwable on any problem
 */
  @Test public void testCachingCachesNegativeEntries() throws Throwable {
    StaticMapping staticMapping=newInstance();
    CachedDNSToSwitchMapping cachedMap=new CachedDNSToSwitchMapping(staticMapping);
    assertMapSize(cachedMap,0);
    assertMapSize(staticMapping,0);
    List<String> resolved=cachedMap.resolve(createQueryList());
    assertMapSize(staticMapping,0);
    assertMapSize(cachedMap,2);
  }
}
