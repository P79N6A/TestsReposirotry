/** 
 * Tests for some aspects of the committer factory. All tests are grouped into one single test so that only one S3A FS client is set up and used for the entire run. Saves time and money.
 */
public class ITestS3ACommitterFactory extends AbstractCommitITest {
  protected static final String INVALID_NAME="invalid-name";
  /** 
 * Counter to guarantee that even in parallel test runs, no job has the same ID.
 */
  private String jobId;
  private String attempt0;
  private TaskAttemptID taskAttempt0;
  private Path outDir;
  private S3ACommitterFactory factory;
  private TaskAttemptContext tContext;
  /** 
 * Parameterized list of bindings of committer name in config file to expected class instantiated.
 */
  private static final Object[][] bindings={{COMMITTER_NAME_FILE,FileOutputCommitter.class},{COMMITTER_NAME_DIRECTORY,DirectoryStagingCommitter.class},{COMMITTER_NAME_PARTITIONED,PartitionedStagingCommitter.class},{InternalCommitterConstants.COMMITTER_NAME_STAGING,StagingCommitter.class},{COMMITTER_NAME_MAGIC,MagicS3GuardCommitter.class}};
  /** 
 * This is a ref to the FS conf, so changes here are visible to callers querying the FS config.
 */
  private Configuration filesystemConfRef;
  private Configuration taskConfRef;
  @Override public void setup() throws Exception {
    super.setup();
    jobId=randomJobId();
    attempt0="attempt_" + jobId + "_m_000000_0";
    taskAttempt0=TaskAttemptID.forName(attempt0);
    outDir=path(getMethodName());
    factory=new S3ACommitterFactory();
    Configuration conf=new Configuration();
    conf.set(FileOutputFormat.OUTDIR,outDir.toUri().toString());
    conf.set(MRJobConfig.TASK_ATTEMPT_ID,attempt0);
    conf.setInt(MRJobConfig.APPLICATION_ATTEMPT_ID,1);
    filesystemConfRef=getFileSystem().getConf();
    tContext=new TaskAttemptContextImpl(conf,taskAttempt0);
    taskConfRef=tContext.getConfiguration();
  }
  @Test public void testEverything() throws Throwable {
    testImplicitFileBinding();
    testBindingsInTask();
    testBindingsInFSConfig();
    testInvalidFileBinding();
    testInvalidTaskBinding();
  }
  /** 
 * Verify that if all config options are unset, the FileOutputCommitter is returned.
 */
  public void testImplicitFileBinding() throws Throwable {
    taskConfRef.unset(FS_S3A_COMMITTER_NAME);
    filesystemConfRef.unset(FS_S3A_COMMITTER_NAME);
    assertFactoryCreatesExpectedCommitter(FileOutputCommitter.class);
  }
  /** 
 * Verify that task bindings are picked up.
 */
  public void testBindingsInTask() throws Throwable {
    filesystemConfRef.set(FS_S3A_COMMITTER_NAME,"INVALID");
    taskConfRef.set(FS_S3A_COMMITTER_NAME,COMMITTER_NAME_FILE);
    assertFactoryCreatesExpectedCommitter(FileOutputCommitter.class);
    for (    Object[] binding : bindings) {
      taskConfRef.set(FS_S3A_COMMITTER_NAME,(String)binding[0]);
      assertFactoryCreatesExpectedCommitter((Class)binding[1]);
    }
  }
  /** 
 * Verify that FS bindings are picked up.
 */
  public void testBindingsInFSConfig() throws Throwable {
    taskConfRef.unset(FS_S3A_COMMITTER_NAME);
    filesystemConfRef.set(FS_S3A_COMMITTER_NAME,COMMITTER_NAME_FILE);
    assertFactoryCreatesExpectedCommitter(FileOutputCommitter.class);
    for (    Object[] binding : bindings) {
      taskConfRef.set(FS_S3A_COMMITTER_NAME,(String)binding[0]);
      assertFactoryCreatesExpectedCommitter((Class)binding[1]);
    }
  }
  /** 
 * Create an invalid committer via the FS binding,
 */
  public void testInvalidFileBinding() throws Throwable {
    taskConfRef.unset(FS_S3A_COMMITTER_NAME);
    filesystemConfRef.set(FS_S3A_COMMITTER_NAME,INVALID_NAME);
    LambdaTestUtils.intercept(PathCommitException.class,INVALID_NAME,() -> createCommitter());
  }
  /** 
 * Create an invalid committer via the task attempt.
 */
  public void testInvalidTaskBinding() throws Throwable {
    filesystemConfRef.unset(FS_S3A_COMMITTER_NAME);
    taskConfRef.set(FS_S3A_COMMITTER_NAME,INVALID_NAME);
    LambdaTestUtils.intercept(PathCommitException.class,INVALID_NAME,() -> createCommitter());
  }
  /** 
 * Assert that the factory creates the expected committer.
 * @param expected expected committer class.
 * @throws IOException IO failure.
 */
  protected void assertFactoryCreatesExpectedCommitter(  final Class expected) throws IOException {
    assertEquals("Wrong Committer from factory",expected,createCommitter().getClass());
  }
  /** 
 * Create a committer.
 * @return the committer
 * @throws IOException IO failure.
 */
  private PathOutputCommitter createCommitter() throws IOException {
    return factory.createOutputCommitter(outDir,tContext);
  }
}
