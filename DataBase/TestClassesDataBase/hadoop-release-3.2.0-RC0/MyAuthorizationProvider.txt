public static class MyAuthorizationProvider extends INodeAttributeProvider {
public static class MyAccessControlEnforcer implements AccessControlEnforcer {
    AccessControlEnforcer ace;
    public MyAccessControlEnforcer(    AccessControlEnforcer defaultEnforcer){
      this.ace=defaultEnforcer;
    }
    @Override public void checkPermission(    String fsOwner,    String supergroup,    UserGroupInformation ugi,    INodeAttributes[] inodeAttrs,    INode[] inodes,    byte[][] pathByNameArr,    int snapshotId,    String path,    int ancestorIndex,    boolean doCheckOwner,    FsAction ancestorAccess,    FsAction parentAccess,    FsAction access,    FsAction subAccess,    boolean ignoreEmptyDir) throws AccessControlException {
      if (ancestorIndex > 1 && inodes[1].getLocalName().equals("user") && inodes[2].getLocalName().equals("acl")) {
        this.ace.checkPermission(fsOwner,supergroup,ugi,inodeAttrs,inodes,pathByNameArr,snapshotId,path,ancestorIndex,doCheckOwner,ancestorAccess,parentAccess,access,subAccess,ignoreEmptyDir);
      }
      CALLED.add("checkPermission|" + ancestorAccess + "|"+ parentAccess+ "|"+ access);
    }
  }
  @Override public void start(){
    CALLED.add("start");
  }
  @Override public void stop(){
    CALLED.add("stop");
  }
  @Override public INodeAttributes getAttributes(  String[] pathElements,  final INodeAttributes inode){
    CALLED.add("getAttributes");
    final boolean useDefault=useDefault(pathElements);
    final boolean useNullAcl=useNullAclFeature(pathElements);
    return new INodeAttributes(){
      @Override public boolean isDirectory(){
        return inode.isDirectory();
      }
      @Override public byte[] getLocalNameBytes(){
        return inode.getLocalNameBytes();
      }
      @Override public String getUserName(){
        return (useDefault) ? inode.getUserName() : "foo";
      }
      @Override public String getGroupName(){
        return (useDefault) ? inode.getGroupName() : "bar";
      }
      @Override public FsPermission getFsPermission(){
        return (useDefault) ? inode.getFsPermission() : new FsPermission(getFsPermissionShort());
      }
      @Override public short getFsPermissionShort(){
        return (useDefault) ? inode.getFsPermissionShort() : (short)getPermissionLong();
      }
      @Override public long getPermissionLong(){
        return (useDefault) ? inode.getPermissionLong() : (long)PROVIDER_PERMISSION;
      }
      @Override public AclFeature getAclFeature(){
        AclFeature f;
        if (useNullAcl) {
          int[] entries=new int[0];
          f=new AclFeature(entries);
        }
 else         if (useDefault) {
          f=inode.getAclFeature();
        }
 else {
          AclEntry acl=new AclEntry.Builder().setType(AclEntryType.GROUP).setPermission(FsAction.ALL).setName("xxx").build();
          f=new AclFeature(AclEntryStatusFormat.toInt(Lists.newArrayList(acl)));
        }
        return f;
      }
      @Override public XAttrFeature getXAttrFeature(){
        XAttrFeature x;
        if (useDefault) {
          x=inode.getXAttrFeature();
        }
 else {
          x=new XAttrFeature(ImmutableList.copyOf(Lists.newArrayList(new XAttr.Builder().setName("test").setValue(new byte[]{1,2}).build())));
        }
        return x;
      }
      @Override public long getModificationTime(){
        return (useDefault) ? inode.getModificationTime() : 0;
      }
      @Override public long getAccessTime(){
        return (useDefault) ? inode.getAccessTime() : 0;
      }
    }
;
  }
  @Override public AccessControlEnforcer getExternalAccessControlEnforcer(  AccessControlEnforcer defaultEnforcer){
    return new MyAccessControlEnforcer(defaultEnforcer);
  }
  private boolean useDefault(  String[] pathElements){
    return (pathElements.length < 2) || !(pathElements[0].equals("user") && pathElements[1].equals("authz"));
  }
  private boolean useNullAclFeature(  String[] pathElements){
    return (pathElements.length > 2) && pathElements[1].equals("user") && pathElements[2].equals("acl");
  }
}
