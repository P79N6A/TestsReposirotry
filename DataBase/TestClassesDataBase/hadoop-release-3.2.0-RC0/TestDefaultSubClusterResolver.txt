/** 
 * Test  {@link SubClusterResolver} against correct and malformed Federationmachine lists.
 */
public class TestDefaultSubClusterResolver {
  private static YarnConfiguration conf;
  private static SubClusterResolver resolver;
  public static void setUpGoodFile(){
    conf=new YarnConfiguration();
    resolver=new DefaultSubClusterResolverImpl();
    URL url=Thread.currentThread().getContextClassLoader().getResource("nodes");
    if (url == null) {
      throw new RuntimeException("Could not find 'nodes' dummy file in classpath");
    }
    File file=new File(url.getPath());
    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST,file.getPath());
    resolver.setConf(conf);
    resolver.load();
  }
  private void setUpMalformedFile(){
    conf=new YarnConfiguration();
    resolver=new DefaultSubClusterResolverImpl();
    URL url=Thread.currentThread().getContextClassLoader().getResource("nodes-malformed");
    if (url == null) {
      throw new RuntimeException("Could not find 'nodes-malformed' dummy file in classpath");
    }
    File file=new File(url.getPath());
    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST,file.getPath());
    resolver.setConf(conf);
    resolver.load();
  }
  private void setUpNonExistentFile(){
    conf=new YarnConfiguration();
    resolver=new DefaultSubClusterResolverImpl();
    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST,"fileDoesNotExist");
    resolver.setConf(conf);
    resolver.load();
  }
  @Test public void testGetSubClusterForNode() throws YarnException {
    setUpGoodFile();
    Assert.assertEquals(SubClusterId.newInstance("subcluster1"),resolver.getSubClusterForNode("node1"));
    Assert.assertEquals(SubClusterId.newInstance("subcluster2"),resolver.getSubClusterForNode("node2"));
    Assert.assertEquals(SubClusterId.newInstance("subcluster3"),resolver.getSubClusterForNode("node3"));
    try {
      resolver.getSubClusterForNode("nodeDoesNotExist");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot find subClusterId for node"));
    }
  }
  @Test public void testGetSubClusterForNodeMalformedFile() throws YarnException {
    setUpMalformedFile();
    try {
      resolver.getSubClusterForNode("node1");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot find subClusterId for node"));
    }
    try {
      resolver.getSubClusterForNode("node2");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot find subClusterId for node"));
    }
    Assert.assertEquals(SubClusterId.newInstance("subcluster3"),resolver.getSubClusterForNode("node3"));
    try {
      resolver.getSubClusterForNode("nodeDoesNotExist");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot find subClusterId for node"));
    }
  }
  @Test public void testGetSubClusterForNodeNoFile() throws YarnException {
    setUpNonExistentFile();
    try {
      resolver.getSubClusterForNode("node1");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot find subClusterId for node"));
    }
  }
  @Test public void testGetSubClustersForRack() throws YarnException {
    setUpGoodFile();
    Set<SubClusterId> rack1Expected=new HashSet<SubClusterId>();
    rack1Expected.add(SubClusterId.newInstance("subcluster1"));
    rack1Expected.add(SubClusterId.newInstance("subcluster2"));
    Set<SubClusterId> rack2Expected=new HashSet<SubClusterId>();
    rack2Expected.add(SubClusterId.newInstance("subcluster3"));
    Assert.assertEquals(rack1Expected,resolver.getSubClustersForRack("rack1"));
    Assert.assertEquals(rack2Expected,resolver.getSubClustersForRack("rack2"));
    try {
      resolver.getSubClustersForRack("rackDoesNotExist");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot resolve rack"));
    }
  }
  @Test public void testGetSubClustersForRackNoFile() throws YarnException {
    setUpNonExistentFile();
    try {
      resolver.getSubClustersForRack("rack1");
      Assert.fail();
    }
 catch (    YarnException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot resolve rack"));
    }
  }
}
