public class TestRMNodeLabelsManager extends NodeLabelTestBase {
  private final Resource EMPTY_RESOURCE=Resource.newInstance(0,0);
  private final Resource SMALL_RESOURCE=Resource.newInstance(100,0);
  private final Resource LARGE_NODE=Resource.newInstance(1000,0);
  NullRMNodeLabelsManager mgr=null;
  RMNodeLabelsManager lmgr=null;
  boolean checkQueueCall=false;
  @Before public void before(){
    mgr=new NullRMNodeLabelsManager();
    Configuration conf=new Configuration();
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    mgr.init(conf);
    mgr.start();
  }
  @After public void after(){
    mgr.stop();
  }
  @Test(timeout=5000) public void testGetLabelResourceWhenNodeActiveDeactive() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2"),toNodeId("n3"),toSet("p3")));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),EMPTY_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p2",null),EMPTY_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p3",null),EMPTY_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,null),EMPTY_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",2),LARGE_NODE);
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),Resources.add(SMALL_RESOURCE,LARGE_NODE));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p4"));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),Resources.add(SMALL_RESOURCE,LARGE_NODE));
    Assert.assertEquals(mgr.getResourceByLabel("p4",null),EMPTY_RESOURCE);
    mgr.updateNodeResource(NodeId.newInstance("n1",2),SMALL_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),Resources.multiply(SMALL_RESOURCE,2));
    mgr.deactivateNode(NodeId.newInstance("n1",1));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),SMALL_RESOURCE);
    mgr.deactivateNode(NodeId.newInstance("n1",2));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),EMPTY_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",2),LARGE_NODE);
    mgr.removeFromClusterNodeLabels(ImmutableSet.of("p1"));
    Assert.assertEquals(mgr.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,null),Resources.add(SMALL_RESOURCE,LARGE_NODE));
  }
  @Test(timeout=5000) public void testActivateNodeManagerWithZeroPort() throws Exception {
    mgr.activateNode(NodeId.newInstance("n1",0),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",2),LARGE_NODE);
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=5000) public void testGetLabelResource() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2"),toNodeId("n3"),toSet("p3")));
    mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n2",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n3",1),SMALL_RESOURCE);
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),EMPTY_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p2",null),Resources.multiply(SMALL_RESOURCE,2));
    Assert.assertEquals(mgr.getResourceByLabel("p3",null),SMALL_RESOURCE);
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p4","p5","p6"));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n4"),toSet("p1"),toNodeId("n5"),toSet("p2"),toNodeId("n6"),toSet("p3"),toNodeId("n7"),toSet("p4"),toNodeId("n8"),toSet("p5")));
    mgr.activateNode(NodeId.newInstance("n4",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n5",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n6",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n7",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n8",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n9",1),SMALL_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),SMALL_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel("p2",null),Resources.multiply(SMALL_RESOURCE,3));
    Assert.assertEquals(mgr.getResourceByLabel("p3",null),Resources.multiply(SMALL_RESOURCE,2));
    Assert.assertEquals(mgr.getResourceByLabel("p4",null),Resources.multiply(SMALL_RESOURCE,1));
    Assert.assertEquals(mgr.getResourceByLabel("p5",null),Resources.multiply(SMALL_RESOURCE,1));
    Assert.assertEquals(mgr.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,null),Resources.multiply(SMALL_RESOURCE,1));
    mgr.replaceLabelsOnNode((Map)ImmutableMap.of(toNodeId("n4"),toSet("p2"),toNodeId("n7"),RMNodeLabelsManager.EMPTY_STRING_SET,toNodeId("n5"),toSet("p1"),toNodeId("n8"),RMNodeLabelsManager.EMPTY_STRING_SET,toNodeId("n9"),toSet("p1")));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),Resources.multiply(SMALL_RESOURCE,2));
    Assert.assertEquals(mgr.getResourceByLabel("p2",null),Resources.multiply(SMALL_RESOURCE,3));
    Assert.assertEquals(mgr.getResourceByLabel("p3",null),Resources.multiply(SMALL_RESOURCE,2));
    Assert.assertEquals(mgr.getResourceByLabel("p4",null),Resources.multiply(SMALL_RESOURCE,0));
    Assert.assertEquals(mgr.getResourceByLabel("p5",null),Resources.multiply(SMALL_RESOURCE,0));
    Assert.assertEquals(mgr.getResourceByLabel("",null),Resources.multiply(SMALL_RESOURCE,2));
  }
  @Test(timeout=5000) public void testGetQueueResource() throws Exception {
    Resource clusterResource=Resource.newInstance(9999,1);
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("red","blue","yellow"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("host1"),toSet("red")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("host2"),toSet("blue")));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("host3"),toSet("yellow")));
    mgr.activateNode(NodeId.newInstance("host1",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("host2",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("host3",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("host4",1),SMALL_RESOURCE);
    Set<String> q1Label=toSet("red","blue");
    Set<String> q2Label=toSet("blue","yellow");
    Set<String> q3Label=toSet("yellow");
    Set<String> q4Label=RMNodeLabelsManager.EMPTY_STRING_SET;
    Set<String> q5Label=toSet(RMNodeLabelsManager.ANY);
    Map<String,Set<String>> queueToLabels=new HashMap<String,Set<String>>();
    queueToLabels.put("Q1",q1Label);
    queueToLabels.put("Q2",q2Label);
    queueToLabels.put("Q3",q3Label);
    queueToLabels.put("Q4",q4Label);
    queueToLabels.put("Q5",q5Label);
    mgr.reinitializeQueueLabels(queueToLabels);
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,1),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
    mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("host2"),toSet("blue")));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
    mgr.deactivateNode(NodeId.newInstance("host1",1));
    mgr.deactivateNode(NodeId.newInstance("host3",1));
    mgr.activateNode(NodeId.newInstance("host3",1),SMALL_RESOURCE);
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
    q1Label=toSet("blue");
    q2Label=toSet("blue","red");
    q3Label=toSet("red");
    q4Label=RMNodeLabelsManager.EMPTY_STRING_SET;
    q5Label=toSet(RMNodeLabelsManager.ANY);
    queueToLabels.clear();
    queueToLabels.put("Q1",q1Label);
    queueToLabels.put("Q2",q2Label);
    queueToLabels.put("Q3",q3Label);
    queueToLabels.put("Q4",q4Label);
    queueToLabels.put("Q5",q5Label);
    mgr.reinitializeQueueLabels(queueToLabels);
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,2),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
    mgr.activateNode(NodeId.newInstance("host3",2),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("host3",3),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("host4",2),SMALL_RESOURCE);
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,3),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
    mgr.deactivateNode(NodeId.newInstance("host3",3));
    mgr.deactivateNode(NodeId.newInstance("host4",2));
    mgr.deactivateNode(NodeId.newInstance("host4",1));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,1),mgr.getQueueResource("Q1",q1Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,1),mgr.getQueueResource("Q2",q2Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,1),mgr.getQueueResource("Q3",q3Label,clusterResource));
    Assert.assertEquals(Resources.multiply(SMALL_RESOURCE,1),mgr.getQueueResource("Q4",q4Label,clusterResource));
    Assert.assertEquals(clusterResource,mgr.getQueueResource("Q5",q5Label,clusterResource));
  }
  @Test(timeout=5000) public void testGetLabelResourceWhenMultipleNMsExistingInSameHost() throws IOException {
    mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",2),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",3),SMALL_RESOURCE);
    mgr.activateNode(NodeId.newInstance("n1",4),SMALL_RESOURCE);
    Assert.assertEquals(mgr.getResourceByLabel(CommonNodeLabelsManager.NO_LABEL,null),Resources.multiply(SMALL_RESOURCE,4));
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1"));
    mgr.addLabelsToNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n1:2"),toSet("p1")));
    Assert.assertEquals(mgr.getResourceByLabel(CommonNodeLabelsManager.NO_LABEL,null),Resources.multiply(SMALL_RESOURCE,2));
    Assert.assertEquals(mgr.getResourceByLabel("p1",null),Resources.multiply(SMALL_RESOURCE,2));
  }
  @Test(timeout=5000) public void testRemoveLabelsFromNode() throws Exception {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1"),toNodeId("n2"),toSet("p2"),toNodeId("n3"),toSet("p3")));
    mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
    try {
      mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
      Assert.fail("removeLabelsFromNode should trigger IOException");
    }
 catch (    IOException e) {
    }
    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
    try {
      mgr.removeLabelsFromNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
    }
 catch (    IOException e) {
      Assert.fail("IOException from removeLabelsFromNode " + e);
    }
  }
private static class SchedulerEventHandler implements EventHandler<SchedulerEvent> {
    Map<NodeId,Set<String>> updatedNodeToLabels=new HashMap<>();
    boolean receivedEvent;
    @Override public void handle(    SchedulerEvent event){
switch (event.getType()) {
case NODE_LABELS_UPDATE:
        receivedEvent=true;
      updatedNodeToLabels=((NodeLabelsUpdateSchedulerEvent)event).getUpdatedNodeToLabels();
    break;
default :
  break;
}
}
}
@Test public void testReplaceLabelsFromNode() throws Exception {
RMContext rmContext=mock(RMContext.class);
Dispatcher syncDispatcher=new InlineDispatcher();
SchedulerEventHandler schedEventsHandler=new SchedulerEventHandler();
syncDispatcher.register(SchedulerEventType.class,schedEventsHandler);
when(rmContext.getDispatcher()).thenReturn(syncDispatcher);
mgr.setRMContext(rmContext);
mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
mgr.activateNode(NodeId.newInstance("n2",1),SMALL_RESOURCE);
mgr.activateNode(NodeId.newInstance("n3",1),SMALL_RESOURCE);
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n2:1"),toSet("p2"),toNodeId("n3"),toSet("p3")));
assertTrue("Event should be sent when there is change in labels",schedEventsHandler.receivedEvent);
assertEquals("3 node label mapping modified",3,schedEventsHandler.updatedNodeToLabels.size());
ImmutableMap<NodeId,Set<String>> modifiedMap=ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n2:1"),toSet("p2"),toNodeId("n3:1"),toSet("p3"));
assertEquals("Node label mapping is not matching",modifiedMap,schedEventsHandler.updatedNodeToLabels);
schedEventsHandler.receivedEvent=false;
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
assertFalse("No event should be sent when there is no change in labels",schedEventsHandler.receivedEvent);
schedEventsHandler.receivedEvent=false;
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n2:1"),toSet("p1"),toNodeId("n3"),toSet("p3")));
assertTrue("Event should be sent when there is change in labels",schedEventsHandler.receivedEvent);
assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
assertCollectionEquals(toSet("p1"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n2:1")));
schedEventsHandler.receivedEvent=false;
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n3"),toSet("p2")));
assertTrue("Event should be sent when there is change in labels @ HOST",schedEventsHandler.receivedEvent);
assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
assertCollectionEquals(toSet("p2"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n3:1")));
schedEventsHandler.receivedEvent=false;
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
assertTrue("Event should be sent when labels are modified at host though labels were set @ NM level",schedEventsHandler.receivedEvent);
assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
assertCollectionEquals(toSet("p2"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n1:1")));
schedEventsHandler.receivedEvent=false;
}
@Test(timeout=5000) public void testGetLabelsOnNodesWhenNodeActiveDeactive() throws Exception {
mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
mgr.activateNode(toNodeId("n1:1"),SMALL_RESOURCE);
assertCollectionEquals(toSet("p1"),mgr.getNodeLabels().get(toNodeId("n1:1")));
mgr.deactivateNode(toNodeId("n1:1"));
assertCollectionEquals(toSet("p1"),mgr.getNodeLabels().get(toNodeId("n1:1")));
assertCollectionEquals(toSet("p2"),mgr.getNodeLabels().get(toNodeId("n1")));
mgr.activateNode(toNodeId("n1:2"),SMALL_RESOURCE);
assertCollectionEquals(toSet("p2"),mgr.getNodeLabels().get(toNodeId("n1:2")));
mgr.deactivateNode(toNodeId("n1:2"));
Assert.assertNull(mgr.getNodeLabels().get(toNodeId("n1:2")));
assertCollectionEquals(toSet("p2"),mgr.getNodeLabels().get(toNodeId("n1")));
mgr.activateNode(toNodeId("n1:2"),SMALL_RESOURCE);
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p3")));
assertCollectionEquals(toSet("p3"),mgr.getNodeLabels().get(toNodeId("n1:2")));
mgr.deactivateNode(toNodeId("n1:2"));
Assert.assertNull(mgr.getNodeLabels().get(toNodeId("n1:2")));
assertCollectionEquals(toSet("p3"),mgr.getNodeLabels().get(toNodeId("n1")));
}
private void checkNodeLabelInfo(List<RMNodeLabel> infos,String labelName,int activeNMs,int memory){
for (RMNodeLabel info : infos) {
if (info.getLabelName().equals(labelName)) {
Assert.assertEquals(activeNMs,info.getNumActiveNMs());
Assert.assertEquals(memory,info.getResource().getMemorySize());
return;
}
}
Assert.fail("Failed to find info has label=" + labelName);
}
@Test(timeout=5000) public void testPullRMNodeLabelsInfo() throws IOException {
mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("x","y","z"));
mgr.activateNode(NodeId.newInstance("n1",1),Resource.newInstance(10,0));
mgr.activateNode(NodeId.newInstance("n2",1),Resource.newInstance(10,0));
mgr.activateNode(NodeId.newInstance("n3",1),Resource.newInstance(10,0));
mgr.activateNode(NodeId.newInstance("n4",1),Resource.newInstance(10,0));
mgr.activateNode(NodeId.newInstance("n5",1),Resource.newInstance(10,0));
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("x"),toNodeId("n2"),toSet("x"),toNodeId("n3"),toSet("y")));
List<RMNodeLabel> infos=mgr.pullRMNodeLabelsInfo();
Assert.assertEquals(4,infos.size());
checkNodeLabelInfo(infos,RMNodeLabelsManager.NO_LABEL,2,20);
checkNodeLabelInfo(infos,"x",2,20);
checkNodeLabelInfo(infos,"y",1,10);
checkNodeLabelInfo(infos,"z",0,0);
}
@Test(timeout=60000) public void testcheckRemoveFromClusterNodeLabelsOfQueue() throws Exception {
lmgr=new RMNodeLabelsManager();
Configuration conf=new Configuration();
File tempDir=File.createTempFile("nlb",".tmp");
tempDir.delete();
tempDir.mkdirs();
tempDir.deleteOnExit();
conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDir.getAbsolutePath());
conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
conf.set(YarnConfiguration.RM_SCHEDULER,"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler");
Configuration withQueueLabels=getConfigurationWithQueueLabels(conf);
MockRM rm=initRM(conf);
lmgr.addToCluserNodeLabels(toSet(NodeLabel.newInstance("x",false)));
lmgr.removeFromClusterNodeLabels(Arrays.asList(new String[]{"x"}));
lmgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("x"));
rm.stop();
class TestRMLabelManger extends RMNodeLabelsManager {
@Override protected void checkRemoveFromClusterNodeLabelsOfQueue(Collection<String> labelsToRemove) throws IOException {
checkQueueCall=true;
}
}
lmgr=new TestRMLabelManger();
MockRM rm2=initRM(withQueueLabels);
Assert.assertFalse("checkRemoveFromClusterNodeLabelsOfQueue should not be called" + "on recovery",checkQueueCall);
lmgr.removeFromClusterNodeLabels(Arrays.asList(new String[]{"x"}));
Assert.assertTrue("checkRemoveFromClusterNodeLabelsOfQueue should be called " + "since its not recovery",checkQueueCall);
rm2.stop();
}
private MockRM initRM(Configuration conf){
MockRM rm=new MockRM(conf){
@Override public RMNodeLabelsManager createNodeLabelManager(){
return lmgr;
}
}
;
rm.getRMContext().setNodeLabelManager(lmgr);
rm.start();
Assert.assertEquals(Service.STATE.STARTED,rm.getServiceState());
return rm;
}
private Configuration getConfigurationWithQueueLabels(Configuration config){
CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration(config);
conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a"});
conf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
final String A=CapacitySchedulerConfiguration.ROOT + ".a";
conf.setCapacity(A,100);
conf.setAccessibleNodeLabels(A,ImmutableSet.of("x"));
conf.setCapacityByLabel(A,"x",100);
return conf;
}
@Test(timeout=5000) public void testLabelsToNodesOnNodeActiveDeactive() throws Exception {
mgr.activateNode(NodeId.newInstance("n1",1),Resource.newInstance(10,0));
Assert.assertTrue(mgr.getLabelsToNodes().isEmpty());
assertLabelsToNodesEquals(mgr.getLabelsToNodes(),transposeNodeToLabels(mgr.getNodeLabels()));
mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1"));
mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p1")));
Assert.assertEquals(2,mgr.getLabelsToNodes().get("p1").size());
assertLabelsToNodesEquals(mgr.getLabelsToNodes(),transposeNodeToLabels(mgr.getNodeLabels()));
mgr.activateNode(NodeId.newInstance("n1",2),Resource.newInstance(10,0));
Assert.assertEquals(3,mgr.getLabelsToNodes().get("p1").size());
assertLabelsToNodesEquals(mgr.getLabelsToNodes(),transposeNodeToLabels(mgr.getNodeLabels()));
mgr.deactivateNode(NodeId.newInstance("n1",1));
Assert.assertEquals(2,mgr.getLabelsToNodes().get("p1").size());
assertLabelsToNodesEquals(mgr.getLabelsToNodes(),transposeNodeToLabels(mgr.getNodeLabels()));
}
@Test(timeout=60000) public void testBackwardsCompatableMirror() throws Exception {
lmgr=new RMNodeLabelsManager();
Configuration conf=new Configuration();
File tempDir=File.createTempFile("nlb",".tmp");
tempDir.delete();
tempDir.mkdirs();
tempDir.deleteOnExit();
String tempDirName=tempDir.getAbsolutePath();
conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDirName);
byte[] contents={0x09,0x0A,0x01,0x61,0x0A,0x01,0x62,0x0A,0x01,0x63,0x20,0x0A,0x0E,0x0A,0x09,0x0A,0x05,0x68,0x6F,0x73,0x74,0x32,0x10,0x00,0x12,0x01,0x62,0x0A,0x0E,0x0A,0x09,0x0A,0x05,0x68,0x6F,0x73,0x74,0x31,0x10,0x00,0x12,0x01,0x61};
File file=new File(tempDirName + "/nodelabel.mirror");
file.createNewFile();
FileOutputStream stream=new FileOutputStream(file);
stream.write(contents);
stream.close();
conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
conf.set(YarnConfiguration.RM_SCHEDULER,"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler");
Configuration withQueueLabels=getConfigurationWithQueueLabels(conf);
MockRM rm=initRM(withQueueLabels);
Set<String> labelNames=lmgr.getClusterNodeLabelNames();
Map<String,Set<NodeId>> labeledNodes=lmgr.getLabelsToNodes();
Assert.assertTrue(labelNames.contains("a"));
Assert.assertTrue(labelNames.contains("b"));
Assert.assertTrue(labelNames.contains("c"));
Assert.assertTrue(labeledNodes.get("a").contains(NodeId.newInstance("host1",0)));
Assert.assertTrue(labeledNodes.get("b").contains(NodeId.newInstance("host2",0)));
rm.stop();
}
}
