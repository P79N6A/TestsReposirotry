public class TestMultithreadedMapper extends HadoopTestCase {
  public TestMultithreadedMapper() throws IOException {
    super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);
  }
  @Test public void testOKRun() throws Exception {
    run(false,false);
  }
  @Test public void testIOExRun() throws Exception {
    run(true,false);
  }
  @Test public void testRuntimeExRun() throws Exception {
    run(false,true);
  }
  private void run(  boolean ioEx,  boolean rtEx) throws Exception {
    String localPathRoot=System.getProperty("test.build.data","/tmp");
    Path inDir=new Path(localPathRoot,"testing/mt/input");
    Path outDir=new Path(localPathRoot,"testing/mt/output");
    Configuration conf=createJobConf();
    if (ioEx) {
      conf.setBoolean("multithreaded.ioException",true);
    }
    if (rtEx) {
      conf.setBoolean("multithreaded.runtimeException",true);
    }
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1);
    job.setJobName("mt");
    job.setMapperClass(MultithreadedMapper.class);
    MultithreadedMapper.setMapperClass(job,IDMap.class);
    MultithreadedMapper.setNumberOfThreads(job,2);
    job.setReducerClass(Reducer.class);
    job.waitForCompletion(true);
    if (job.isSuccessful()) {
      assertFalse(ioEx || rtEx);
    }
 else {
      assertTrue(ioEx || rtEx);
    }
  }
public static class IDMap extends Mapper<LongWritable,Text,LongWritable,Text> {
    private boolean ioEx=false;
    private boolean rtEx=false;
    public void setup(    Context context){
      ioEx=context.getConfiguration().getBoolean("multithreaded.ioException",false);
      rtEx=context.getConfiguration().getBoolean("multithreaded.runtimeException",false);
    }
    public void map(    LongWritable key,    Text value,    Context context) throws IOException, InterruptedException {
      if (ioEx) {
        throw new IOException();
      }
      if (rtEx) {
        throw new RuntimeException();
      }
      super.map(key,value,context);
    }
  }
}
