private static class TestContext implements Closeable {
  final int numNameServices;
  final MiniDFSCluster cluster;
  final DistributedFileSystem[] dfs;
  final String[] bpids;
  final DataNode datanode;
  final BlockScanner blockScanner;
  final FsDatasetSpi<? extends FsVolumeSpi> data;
  final FsDatasetSpi.FsVolumeReferences volumes;
  TestContext(  Configuration conf,  int numNameServices) throws Exception {
    this.numNameServices=numNameServices;
    File basedir=new File(GenericTestUtils.getRandomizedTempPath());
    MiniDFSCluster.Builder bld=new MiniDFSCluster.Builder(conf,basedir).numDataNodes(1).storagesPerDatanode(1);
    if (numNameServices > 1) {
      bld.nnTopology(MiniDFSNNTopology.simpleFederatedTopology(numNameServices));
    }
    cluster=bld.build();
    cluster.waitActive();
    dfs=new DistributedFileSystem[numNameServices];
    for (int i=0; i < numNameServices; i++) {
      dfs[i]=cluster.getFileSystem(i);
    }
    bpids=new String[numNameServices];
    for (int i=0; i < numNameServices; i++) {
      bpids[i]=cluster.getNamesystem(i).getBlockPoolId();
    }
    datanode=cluster.getDataNodes().get(0);
    blockScanner=datanode.getBlockScanner();
    for (int i=0; i < numNameServices; i++) {
      dfs[i].mkdirs(new Path("/test"));
    }
    data=datanode.getFSDataset();
    volumes=data.getFsVolumeReferences();
  }
  @Override public void close() throws IOException {
    volumes.close();
    if (cluster != null) {
      for (int i=0; i < numNameServices; i++) {
        dfs[i].delete(new Path("/test"),true);
        dfs[i].close();
      }
      cluster.shutdown();
    }
  }
  public void createFiles(  int nsIdx,  int numFiles,  int length) throws Exception {
    for (int blockIdx=0; blockIdx < numFiles; blockIdx++) {
      DFSTestUtil.createFile(dfs[nsIdx],getPath(blockIdx),length,(short)1,123L);
    }
  }
  public Path getPath(  int fileIdx){
    return new Path("/test/" + fileIdx);
  }
  public ExtendedBlock getFileBlock(  int nsIdx,  int fileIdx) throws Exception {
    return DFSTestUtil.getFirstBlock(dfs[nsIdx],getPath(fileIdx));
  }
  public MaterializedReplica getMaterializedReplica(  int nsIdx,  int fileIdx) throws Exception {
    return cluster.getMaterializedReplica(0,getFileBlock(nsIdx,fileIdx));
  }
}
