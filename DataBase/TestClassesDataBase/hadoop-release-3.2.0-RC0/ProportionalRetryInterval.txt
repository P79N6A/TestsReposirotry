/** 
 * Gradually increase the sleep time by the initial interval, until the limit set by  {@code maxIntervalMillis} is reached.
 */
public static class ProportionalRetryInterval implements Callable<Integer> {
  private final int intervalMillis;
  private final int maxIntervalMillis;
  private int current;
  private int invocationCount=0;
  public ProportionalRetryInterval(  int intervalMillis,  int maxIntervalMillis){
    Preconditions.checkArgument(intervalMillis > 0);
    Preconditions.checkArgument(maxIntervalMillis > 0);
    this.intervalMillis=intervalMillis;
    this.current=intervalMillis;
    this.maxIntervalMillis=maxIntervalMillis;
  }
  @Override public Integer call() throws Exception {
    invocationCount++;
    int last=current;
    if (last < maxIntervalMillis) {
      current+=intervalMillis;
    }
    return last;
  }
  public int getInvocationCount(){
    return invocationCount;
  }
  @Override public String toString(){
    final StringBuilder sb=new StringBuilder("ProportionalRetryInterval{");
    sb.append("interval=").append(intervalMillis);
    sb.append(", current=").append(current);
    sb.append(", limit=").append(maxIntervalMillis);
    sb.append(", invocationCount=").append(invocationCount);
    sb.append('}');
    return sb.toString();
  }
}
