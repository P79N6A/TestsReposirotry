/** 
 * FileSystem methods that must not be overwritten by {@link FilterFileSystem}. Either because there is a default implementation already available or because it is not relevant.
 */
public static interface MustNotImplement {
  public BlockLocation[] getFileBlockLocations(  Path p,  long start,  long len);
  public FSDataOutputStream append(  Path f) throws IOException ;
  public FSDataOutputStream append(  Path f,  int bufferSize) throws IOException ;
  public long getLength(  Path f);
  public boolean exists(  Path f);
  public boolean isDirectory(  Path f);
  public boolean isFile(  Path f);
  public boolean createNewFile(  Path f);
  public FSDataOutputStream createNonRecursive(  Path f,  boolean overwrite,  int bufferSize,  short replication,  long blockSize,  Progressable progress) throws IOException ;
  public FSDataOutputStream createNonRecursive(  Path f,  FsPermission permission,  boolean overwrite,  int bufferSize,  short replication,  long blockSize,  Progressable progress) throws IOException ;
  public boolean mkdirs(  Path f);
  public FSDataInputStream open(  Path f);
  public FSDataInputStream open(  PathHandle f);
  public FSDataOutputStream create(  Path f);
  public FSDataOutputStream create(  Path f,  boolean overwrite);
  public FSDataOutputStream create(  Path f,  Progressable progress);
  public FSDataOutputStream create(  Path f,  short replication);
  public FSDataOutputStream create(  Path f,  short replication,  Progressable progress);
  public FSDataOutputStream create(  Path f,  boolean overwrite,  int bufferSize);
  public FSDataOutputStream create(  Path f,  boolean overwrite,  int bufferSize,  Progressable progress);
  public FSDataOutputStream create(  Path f,  boolean overwrite,  int bufferSize,  short replication,  long blockSize);
  public FSDataOutputStream create(  Path f,  boolean overwrite,  int bufferSize,  short replication,  long blockSize,  Progressable progress);
  public FSDataOutputStream create(  Path f,  FsPermission permission,  EnumSet<CreateFlag> flags,  int bufferSize,  short replication,  long blockSize,  Progressable progress);
  public String getName();
  public boolean delete(  Path f);
  public short getReplication(  Path src);
  public void processDeleteOnExit();
  public FsStatus getStatus();
  public FileStatus[] listStatus(  Path f,  PathFilter filter);
  public FileStatus[] listStatusBatch(  Path f,  byte[] token);
  public FileStatus[] listStatus(  Path[] files);
  public FileStatus[] listStatus(  Path[] files,  PathFilter filter);
  public FileStatus[] globStatus(  Path pathPattern);
  public FileStatus[] globStatus(  Path pathPattern,  PathFilter filter);
  public Iterator<LocatedFileStatus> listFiles(  Path path,  boolean isRecursive);
  public void copyFromLocalFile(  Path src,  Path dst);
  public void moveFromLocalFile(  Path[] srcs,  Path dst);
  public void moveFromLocalFile(  Path src,  Path dst);
  public void copyToLocalFile(  Path src,  Path dst);
  public void copyToLocalFile(  boolean delSrc,  Path src,  Path dst,  boolean useRawLocalFileSystem);
  public void moveToLocalFile(  Path src,  Path dst);
  public long getBlockSize(  Path f);
  public FSDataOutputStream primitiveCreate(  Path f,  EnumSet<CreateFlag> createFlag,  CreateOpts... opts);
  public void primitiveMkdir(  Path f,  FsPermission absolutePermission,  boolean createParent);
  public int getDefaultPort();
  public String getCanonicalServiceName();
  public Token<?> getDelegationToken(  String renewer) throws IOException ;
  public DelegationTokenIssuer[] getAdditionalTokenIssuers() throws IOException ;
  public boolean deleteOnExit(  Path f) throws IOException ;
  public boolean cancelDeleteOnExit(  Path f) throws IOException ;
  public Token<?>[] addDelegationTokens(  String renewer,  Credentials creds) throws IOException ;
  public String getScheme();
  public Path fixRelativePart(  Path p);
  public ContentSummary getContentSummary(  Path f);
  public QuotaUsage getQuotaUsage(  Path f);
  StorageStatistics getStorageStatistics();
}
