/** 
 * Unit test for supporting method-name based compatible RPCs. 
 */
public class TestRPCCompatibility {
  private static final String ADDRESS="0.0.0.0";
  private static InetSocketAddress addr;
  private static RPC.Server server;
  private ProtocolProxy<?> proxy;
  public static final Logger LOG=LoggerFactory.getLogger(TestRPCCompatibility.class);
  private static Configuration conf=new Configuration();
public interface TestProtocol0 extends VersionedProtocol {
    public static final long versionID=0L;
    void ping() throws IOException ;
  }
public interface TestProtocol1 extends TestProtocol0 {
    String echo(    String value) throws IOException ;
  }
@ProtocolInfo(protocolName="org.apache.hadoop.ipc.TestRPCCompatibility$TestProtocol1") public interface TestProtocol2 extends TestProtocol1 {
    int echo(    int value) throws IOException ;
  }
public static class TestImpl0 implements TestProtocol0 {
    @Override public long getProtocolVersion(    String protocol,    long clientVersion) throws IOException {
      return versionID;
    }
    @SuppressWarnings("unchecked") @Override public ProtocolSignature getProtocolSignature(    String protocol,    long clientVersion,    int clientMethodsHashCode) throws IOException {
      Class<? extends VersionedProtocol> inter;
      try {
        inter=(Class<? extends VersionedProtocol>)getClass().getGenericInterfaces()[0];
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
      return ProtocolSignature.getProtocolSignature(clientMethodsHashCode,getProtocolVersion(protocol,clientVersion),inter);
    }
    @Override public void ping(){
      return;
    }
  }
public static class TestImpl1 extends TestImpl0 implements TestProtocol1 {
    @Override public String echo(    String value){
      return value;
    }
    @Override public long getProtocolVersion(    String protocol,    long clientVersion) throws IOException {
      return TestProtocol1.versionID;
    }
  }
public static class TestImpl2 extends TestImpl1 implements TestProtocol2 {
    @Override public int echo(    int value){
      return value;
    }
    @Override public long getProtocolVersion(    String protocol,    long clientVersion) throws IOException {
      return TestProtocol2.versionID;
    }
  }
  @Before public void setUp(){
    ProtocolSignature.resetCache();
    RPC.setProtocolEngine(conf,TestProtocol0.class,ProtobufRpcEngine.class);
    RPC.setProtocolEngine(conf,TestProtocol1.class,ProtobufRpcEngine.class);
    RPC.setProtocolEngine(conf,TestProtocol2.class,ProtobufRpcEngine.class);
    RPC.setProtocolEngine(conf,TestProtocol3.class,ProtobufRpcEngine.class);
    RPC.setProtocolEngine(conf,TestProtocol4.class,ProtobufRpcEngine.class);
  }
  @After public void tearDown(){
    if (proxy != null) {
      RPC.stopProxy(proxy.getProxy());
      proxy=null;
    }
    if (server != null) {
      server.stop();
      server=null;
    }
  }
public interface TestProtocol3 {
    int echo(    String value);
    int echo(    int value);
    int echo_alias(    int value);
    int echo(    int value1,    int value2);
  }
  @Test public void testHashCode() throws Exception {
    Method strMethod=TestProtocol3.class.getMethod("echo",String.class);
    int stringEchoHash=ProtocolSignature.getFingerprint(strMethod);
    Method intMethod=TestProtocol3.class.getMethod("echo",int.class);
    int intEchoHash=ProtocolSignature.getFingerprint(intMethod);
    assertFalse(stringEchoHash == intEchoHash);
    int intEchoHash1=ProtocolSignature.getFingerprint(TestProtocol2.class.getMethod("echo",int.class));
    assertEquals(intEchoHash,intEchoHash1);
    int stringEchoHash1=ProtocolSignature.getFingerprint(TestProtocol2.class.getMethod("echo",String.class));
    assertFalse(stringEchoHash == stringEchoHash1);
    int intEchoHashAlias=ProtocolSignature.getFingerprint(TestProtocol3.class.getMethod("echo_alias",int.class));
    assertFalse(intEchoHash == intEchoHashAlias);
    int intEchoHash2=ProtocolSignature.getFingerprint(TestProtocol3.class.getMethod("echo",int.class,int.class));
    assertFalse(intEchoHash == intEchoHash2);
    int hash1=ProtocolSignature.getFingerprint(new Method[]{intMethod,strMethod});
    int hash2=ProtocolSignature.getFingerprint(new Method[]{strMethod,intMethod});
    assertEquals(hash1,hash2);
  }
@ProtocolInfo(protocolName="org.apache.hadoop.ipc.TestRPCCompatibility$TestProtocol1") public interface TestProtocol4 extends TestProtocol2 {
    public static final long versionID=4L;
    @Override int echo(    int value) throws IOException ;
  }
}
