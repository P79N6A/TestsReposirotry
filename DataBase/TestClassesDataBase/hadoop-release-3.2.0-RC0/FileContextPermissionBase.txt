/** 
 * <p> A collection of permission tests for the  {@link FileContext}. This test should be used for testing an instance of FileContext that has been initialized to a specific default FileSystem such a LocalFileSystem, HDFS,S3, etc. </p> <p> To test a given  {@link FileSystem} implementation create a subclass of thistest and override  {@link #setUp()} to initialize the <code>fc</code> {@link FileContext} instance variable.Since this a junit 4 you can also do a single setup before  the start of any tests. E.g.
 * @BeforeClass   public static void clusterSetupAtBegining()
 * @AfterClass    public static void ClusterShutdownAtEnd()</p>
 */
public abstract class FileContextPermissionBase {
{
    try {
      GenericTestUtils.setLogLevel(FileSystem.LOG,Level.DEBUG);
    }
 catch (    Exception e) {
      System.out.println("Cannot change log level\n" + StringUtils.stringifyException(e));
    }
  }
  protected FileContextTestHelper fileContextTestHelper;
  protected FileContext fc;
  protected FileContextTestHelper getFileContextHelper(){
    return new FileContextTestHelper();
  }
  protected abstract FileContext getFileContext() throws Exception ;
  @Before public void setUp() throws Exception {
    fileContextTestHelper=getFileContextHelper();
    fc=getFileContext();
    fc.mkdir(fileContextTestHelper.getTestRootPath(fc),FileContext.DEFAULT_PERM,true);
  }
  @After public void tearDown() throws Exception {
    fc.delete(fileContextTestHelper.getTestRootPath(fc),true);
  }
  private void cleanupFile(  FileContext fc,  Path name) throws IOException {
    Assert.assertTrue(exists(fc,name));
    fc.delete(name,true);
    Assert.assertTrue(!exists(fc,name));
  }
  @Test public void testCreatePermission() throws IOException {
    assumeNotWindows();
    String filename="foo";
    Path f=fileContextTestHelper.getTestRootPath(fc,filename);
    fileContextTestHelper.createFile(fc,filename);
    doFilePermissionCheck(FileContext.FILE_DEFAULT_PERM.applyUMask(fc.getUMask()),fc.getFileStatus(f).getPermission());
  }
  @Test public void testSetPermission() throws IOException {
    assumeNotWindows();
    String filename="foo";
    Path f=fileContextTestHelper.getTestRootPath(fc,filename);
    createFile(fc,f);
    try {
      FsPermission all=new FsPermission((short)0777);
      FsPermission none=new FsPermission((short)0);
      fc.setPermission(f,none);
      doFilePermissionCheck(none,fc.getFileStatus(f).getPermission());
      fc.setPermission(f,all);
      doFilePermissionCheck(all,fc.getFileStatus(f).getPermission());
    }
  finally {
      cleanupFile(fc,f);
    }
  }
  @Test public void testSetOwner() throws IOException {
    assumeNotWindows();
    String filename="bar";
    Path f=fileContextTestHelper.getTestRootPath(fc,filename);
    createFile(fc,f);
    List<String> groups=null;
    try {
      groups=getGroups();
      System.out.println(filename + ": " + fc.getFileStatus(f).getPermission());
    }
 catch (    IOException e) {
      System.out.println(StringUtils.stringifyException(e));
      System.out.println("Cannot run test");
      return;
    }
    if (groups == null || groups.size() < 1) {
      System.out.println("Cannot run test: need at least one group.  groups=" + groups);
      return;
    }
    try {
      String g0=groups.get(0);
      fc.setOwner(f,null,g0);
      Assert.assertEquals(g0,fc.getFileStatus(f).getGroup());
      if (groups.size() > 1) {
        String g1=groups.get(1);
        fc.setOwner(f,null,g1);
        Assert.assertEquals(g1,fc.getFileStatus(f).getGroup());
      }
 else {
        System.out.println("Not testing changing the group since user " + "belongs to only one group.");
      }
      try {
        fc.setOwner(f,null,null);
        fail("Exception expected.");
      }
 catch (      IllegalArgumentException iae) {
      }
    }
  finally {
      cleanupFile(fc,f);
    }
  }
  @Test public void testUgi() throws IOException, InterruptedException {
    UserGroupInformation otherUser=UserGroupInformation.createRemoteUser("otherUser");
    FileContext newFc=otherUser.doAs(new PrivilegedExceptionAction<FileContext>(){
      @Override public FileContext run() throws Exception {
        FileContext newFc=FileContext.getFileContext();
        return newFc;
      }
    }
);
    assertEquals("otherUser",newFc.getUgi().getUserName());
  }
  static List<String> getGroups() throws IOException {
    List<String> a=new ArrayList<String>();
    String s=Shell.execCommand(Shell.getGroupsCommand());
    for (StringTokenizer t=new StringTokenizer(s); t.hasMoreTokens(); ) {
      a.add(t.nextToken());
    }
    return a;
  }
  void doFilePermissionCheck(  FsPermission expectedPerm,  FsPermission actualPerm){
    Assert.assertEquals(expectedPerm.applyUMask(getFileMask()),actualPerm);
  }
  static final FsPermission FILE_MASK_ZERO=new FsPermission((short)0);
  FsPermission getFileMask(){
    return FILE_MASK_ZERO;
  }
}
