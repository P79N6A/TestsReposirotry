public class TestProportionalCapacityPreemptionPolicyInterQueueWithDRF extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    rc=new DominantResourceCalculator();
    when(cs.getResourceCalculator()).thenReturn(rc);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testInterQueuePreemptionWithMultipleResource() throws Exception {
    String labelsConfig="=100:200,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100:200 100:200 100:200 100:200]);" + "-a(=[50:100 100:200 40:80 30:70]);" + "-b(=[50:100 100:200 60:120 40:50])";
    String appsConfig="a\t(1,2:4,n1,,20,false);" + "b\t(1,2:4,n1,,30,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig,true);
    policy.editSchedule();
    verify(mDisp,never()).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(5)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testInterQueuePreemptionWithNaturalTerminationFactor() throws Exception {
    conf.setFloat(CapacitySchedulerConfiguration.PREEMPTION_NATURAL_TERMINATION_FACTOR,(float)0.2);
    String labelsConfig="=100:50,true;";
    String nodesConfig="n1= res=100:50";
    String queuesConfig="root(=[100:50 100:50 50:50 0:0]);" + "-a(=[50:25 100:50 50:50 0:0]);" + "-b(=[50:25 50:25 0:0 2:1]);";
    String appsConfig="a\t(1,2:1,n1,,50,false);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void test3ResourceTypesInterQueuePreemption() throws IOException {
    String RESOURCE_1="res1";
    riMap.put(RESOURCE_1,ResourceInformation.newInstance(RESOURCE_1,"",0,ResourceTypes.COUNTABLE,0,Integer.MAX_VALUE));
    ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
    String labelsConfig="=30:18:6,true;";
    String nodesConfig="n1= res=30:18:6;";
    String queuesConfig="root(=[30:18:6 30:18:6 12:12:6 1:1:1]);" + "-a(=[10:7:2 10:6:3 6:6:3 0:0:0]);" + "-b(=[10:6:2 10:6:3 6:6:3 0:0:0]);"+ "-c(=[10:5:2 10:6:2 0:0:0 1:1:1])";
    String appsConfig="a\t" + "(1,2:2:1,n1,,3,false);" + "b\t"+ "(1,2:2:1,n1,,3,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
}
