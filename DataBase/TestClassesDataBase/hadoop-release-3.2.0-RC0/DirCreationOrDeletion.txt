/** 
 * Directory creation or deletion.
 */
class DirCreationOrDeletion extends Modification {
  private final TestDirectoryTree.Node node;
  private final boolean isCreation;
  private final Path changedPath;
  private final HashMap<Path,FileStatus> statusMap;
  DirCreationOrDeletion(  Path file,  FileSystem fs,  TestDirectoryTree.Node node,  boolean isCreation){
    super(file,fs,"dircreation");
    this.node=node;
    this.isCreation=isCreation || node.nonSnapshotChildren.isEmpty();
    if (this.isCreation) {
      changedPath=new Path(node.nodePath,"sub" + node.nonSnapshotChildren.size());
    }
 else {
      changedPath=node.nonSnapshotChildren.get(node.nonSnapshotChildren.size() - 1).nodePath;
    }
    this.statusMap=new HashMap<Path,FileStatus>();
  }
  @Override void loadSnapshots() throws Exception {
    for (    Path snapshotRoot : snapshotList) {
      Path snapshotDir=SnapshotTestHelper.getSnapshotFile(snapshotRoot,changedPath);
      if (snapshotDir != null) {
        FileStatus status=fs.exists(snapshotDir) ? fs.getFileStatus(snapshotDir) : null;
        statusMap.put(snapshotDir,status);
        Path snapshotFile=new Path(snapshotDir,"file0");
        status=fs.exists(snapshotFile) ? fs.getFileStatus(snapshotFile) : null;
        statusMap.put(snapshotFile,status);
      }
    }
  }
  @Override void modify() throws Exception {
    if (isCreation) {
      TestDirectoryTree.Node newChild=new TestDirectoryTree.Node(changedPath,node.level + 1,node,hdfs);
      newChild.initFileList(hdfs,node.nodePath.getName(),BLOCKSIZE,REPLICATION,seed,2);
      node.nonSnapshotChildren.add(newChild);
    }
 else {
      TestDirectoryTree.Node childToDelete=node.nonSnapshotChildren.remove(node.nonSnapshotChildren.size() - 1);
      hdfs.delete(childToDelete.nodePath,true);
    }
  }
  @Override void checkSnapshots() throws Exception {
    for (    Path snapshot : statusMap.keySet()) {
      FileStatus currentStatus=fs.exists(snapshot) ? fs.getFileStatus(snapshot) : null;
      FileStatus originalStatus=statusMap.get(snapshot);
      assertEquals(currentStatus,originalStatus);
      if (currentStatus != null) {
        assertEquals(currentStatus.toString(),originalStatus.toString());
      }
    }
  }
}
