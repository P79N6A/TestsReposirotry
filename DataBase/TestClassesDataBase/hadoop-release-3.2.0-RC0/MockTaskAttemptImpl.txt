private class MockTaskAttemptImpl extends TaskAttemptImpl {
  private float progress=0;
  private TaskAttemptState state=TaskAttemptState.NEW;
  boolean rescheduled=false;
  boolean containerAssigned=false;
  private TaskType taskType;
  private Counters attemptCounters=TaskAttemptImpl.EMPTY_COUNTERS;
  public MockTaskAttemptImpl(  TaskId taskId,  int id,  EventHandler eventHandler,  TaskAttemptListener taskAttemptListener,  Path jobFile,  int partition,  JobConf conf,  Token<JobTokenIdentifier> jobToken,  Credentials credentials,  Clock clock,  AppContext appContext,  TaskType taskType){
    super(taskId,id,eventHandler,taskAttemptListener,jobFile,partition,conf,dataLocations,jobToken,credentials,clock,appContext);
    this.taskType=taskType;
  }
  public void assignContainer(){
    containerAssigned=true;
  }
  @Override boolean isContainerAssigned(){
    return containerAssigned;
  }
  public TaskAttemptId getAttemptId(){
    return getID();
  }
  @Override protected Task createRemoteTask(){
    return new MockTask(taskType);
  }
  public float getProgress(){
    return progress;
  }
  public void setProgress(  float progress){
    this.progress=progress;
  }
  public void setState(  TaskAttemptState state){
    this.state=state;
  }
  @Override public TaskAttemptState getState(){
    return state;
  }
  public boolean getRescheduled(){
    return this.rescheduled;
  }
  public void setRescheduled(  boolean rescheduled){
    this.rescheduled=rescheduled;
  }
  @Override public Counters getCounters(){
    return attemptCounters;
  }
  public void setCounters(  Counters counters){
    attemptCounters=counters;
  }
}
