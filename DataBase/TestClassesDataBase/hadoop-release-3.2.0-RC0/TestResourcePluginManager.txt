public class TestResourcePluginManager extends NodeManagerTestBase {
  private NodeManager nm;
  ResourcePluginManager stubResourcePluginmanager(){
    final ResourcePluginManager rpm=mock(ResourcePluginManager.class);
    Map<String,ResourcePlugin> plugins=new HashMap<>();
    ResourcePlugin resourcePlugin=mock(ResourcePlugin.class);
    NodeResourceUpdaterPlugin nodeResourceUpdaterPlugin=mock(NodeResourceUpdaterPlugin.class);
    when(resourcePlugin.getNodeResourceHandlerInstance()).thenReturn(nodeResourceUpdaterPlugin);
    plugins.put("resource1",resourcePlugin);
    resourcePlugin=mock(ResourcePlugin.class);
    when(resourcePlugin.createResourceHandler(any(Context.class),any(CGroupsHandler.class),any(PrivilegedOperationExecutor.class))).thenReturn(new CustomizedResourceHandler());
    plugins.put("resource2",resourcePlugin);
    when(rpm.getNameToPlugins()).thenReturn(plugins);
    return rpm;
  }
  @After public void tearDown(){
    if (nm != null) {
      try {
        ServiceOperations.stop(nm);
      }
 catch (      Throwable t) {
      }
    }
  }
private class CustomizedResourceHandler implements ResourceHandler {
    @Override public List<PrivilegedOperation> bootstrap(    Configuration configuration) throws ResourceHandlerException {
      return null;
    }
    @Override public List<PrivilegedOperation> preStart(    Container container) throws ResourceHandlerException {
      return null;
    }
    @Override public List<PrivilegedOperation> reacquireContainer(    ContainerId containerId) throws ResourceHandlerException {
      return null;
    }
    @Override public List<PrivilegedOperation> updateContainer(    Container container) throws ResourceHandlerException {
      return null;
    }
    @Override public List<PrivilegedOperation> postComplete(    ContainerId containerId) throws ResourceHandlerException {
      return null;
    }
    @Override public List<PrivilegedOperation> teardown() throws ResourceHandlerException {
      return null;
    }
  }
private class MyMockNM extends NodeManager {
    private final ResourcePluginManager rpm;
    public MyMockNM(    ResourcePluginManager rpm){
      this.rpm=rpm;
    }
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      ((NodeManager.NMContext)context).setResourcePluginManager(rpm);
      return new BaseNodeStatusUpdaterForTest(context,dispatcher,healthChecker,metrics,new BaseResourceTrackerForTest());
    }
    @Override protected ContainerManagerImpl createContainerManager(    Context context,    ContainerExecutor exec,    DeletionService del,    NodeStatusUpdater nodeStatusUpdater,    ApplicationACLsManager aclsManager,    LocalDirsHandlerService diskhandler){
      return new MyContainerManager(context,exec,del,nodeStatusUpdater,metrics,diskhandler);
    }
    @Override protected ResourcePluginManager createResourcePluginManager(){
      return rpm;
    }
  }
public class MyLCE extends LinuxContainerExecutor {
    private PrivilegedOperationExecutor poe=mock(PrivilegedOperationExecutor.class);
    @Override protected PrivilegedOperationExecutor getPrivilegedOperationExecutor(){
      return poe;
    }
  }
  @Test(timeout=30000) public void testResourcePluginManagerInitialization() throws Exception {
    final ResourcePluginManager rpm=stubResourcePluginmanager();
    nm=new MyMockNM(rpm);
    YarnConfiguration conf=createNMConfig();
    nm.init(conf);
    verify(rpm,times(1)).initialize(any(Context.class));
  }
  @Test(timeout=30000) public void testNodeStatusUpdaterWithResourcePluginsEnabled() throws Exception {
    final ResourcePluginManager rpm=stubResourcePluginmanager();
    nm=new MyMockNM(rpm);
    YarnConfiguration conf=createNMConfig();
    nm.init(conf);
    nm.start();
    NodeResourceUpdaterPlugin nodeResourceUpdaterPlugin=rpm.getNameToPlugins().get("resource1").getNodeResourceHandlerInstance();
    verify(nodeResourceUpdaterPlugin,times(1)).updateConfiguredResource(any(Resource.class));
  }
  @Test(timeout=30000) public void testLinuxContainerExecutorWithResourcePluginsEnabled() throws Exception {
    final ResourcePluginManager rpm=stubResourcePluginmanager();
    final LinuxContainerExecutor lce=new MyLCE();
    nm=new NodeManager(){
      @Override protected NodeStatusUpdater createNodeStatusUpdater(      Context context,      Dispatcher dispatcher,      NodeHealthCheckerService healthChecker){
        ((NMContext)context).setResourcePluginManager(rpm);
        return new BaseNodeStatusUpdaterForTest(context,dispatcher,healthChecker,metrics,new BaseResourceTrackerForTest());
      }
      @Override protected ContainerManagerImpl createContainerManager(      Context context,      ContainerExecutor exec,      DeletionService del,      NodeStatusUpdater nodeStatusUpdater,      ApplicationACLsManager aclsManager,      LocalDirsHandlerService diskhandler){
        return new MyContainerManager(context,exec,del,nodeStatusUpdater,metrics,diskhandler);
      }
      @Override protected ContainerExecutor createContainerExecutor(      Configuration conf){
        ((NMContext)this.getNMContext()).setResourcePluginManager(rpm);
        lce.setConf(conf);
        return lce;
      }
    }
;
    YarnConfiguration conf=createNMConfig();
    nm.init(conf);
    nm.start();
    ResourceHandler handler=lce.getResourceHandler();
    Assert.assertNotNull(handler);
    Assert.assertTrue(handler instanceof ResourceHandlerChain);
    boolean newHandlerAdded=false;
    for (    ResourceHandler h : ((ResourceHandlerChain)handler).getResourceHandlerList()) {
      if (h instanceof CustomizedResourceHandler) {
        newHandlerAdded=true;
        break;
      }
    }
    Assert.assertTrue("New ResourceHandler should be added",newHandlerAdded);
  }
}
