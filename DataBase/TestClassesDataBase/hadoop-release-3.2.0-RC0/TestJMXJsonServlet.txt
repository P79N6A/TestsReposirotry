public class TestJMXJsonServlet extends HttpServerFunctionalTest {
  private static HttpServer2 server;
  private static URL baseUrl;
  @BeforeClass public static void setup() throws Exception {
    server=createTestServer();
    server.start();
    baseUrl=getServerURL(server);
  }
  @AfterClass public static void cleanup() throws Exception {
    server.stop();
  }
  public static void assertReFind(  String re,  String value){
    Pattern p=Pattern.compile(re);
    Matcher m=p.matcher(value);
    assertTrue("'" + p + "' does not match "+ value,m.find());
  }
  @Test public void testQuery() throws Exception {
    String result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Runtime"));
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Runtime\"",result);
    assertReFind("\"modelerType\"",result);
    result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Memory"));
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    assertReFind("\"modelerType\"",result);
    result=readOutput(new URL(baseUrl,"/jmx"));
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::HeapMemoryUsage"));
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    assertReFind("\"committed\"\\s*:",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::"));
    assertReFind("\"ERROR\"",result);
    HttpURLConnection conn=(HttpURLConnection)new URL(baseUrl,"/jmx?qry=java.lang:type=Memory").openConnection();
    assertEquals("GET",conn.getHeaderField(ACCESS_CONTROL_ALLOW_METHODS));
    assertNotNull(conn.getHeaderField(ACCESS_CONTROL_ALLOW_ORIGIN));
  }
  @Test public void testTraceRequest() throws IOException {
    URL url=new URL(baseUrl,"/jmx");
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod("TRACE");
    assertEquals("Unexpected response code",HttpServletResponse.SC_METHOD_NOT_ALLOWED,conn.getResponseCode());
  }
}
