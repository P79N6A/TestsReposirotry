/** 
 * Test whether or not encryption settings propagate by choosing an invalid one. We expect the S3AFileSystem to fail to initialize.
 */
@Ignore public class ITestS3AEncryptionAlgorithmValidation extends AbstractS3ATestBase {
  @Test public void testEncryptionAlgorithmSetToDES() throws Throwable {
    assumeEnabled();
    intercept(IOException.class,"Unknown Server Side algorithm DES",() -> {
      Configuration conf=super.createConfiguration();
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_ALGORITHM,"DES");
      S3AContract contract=(S3AContract)createContract(conf);
      contract.init();
      FileSystem fileSystem=contract.getTestFileSystem();
      assertNotNull("null filesystem",fileSystem);
      URI fsURI=fileSystem.getUri();
      LOG.info("Test filesystem = {} implemented by {}",fsURI,fileSystem);
      assertEquals("wrong filesystem of " + fsURI,contract.getScheme(),fsURI.getScheme());
      fileSystem.initialize(fsURI,conf);
      throw new Exception("Do not reach here");
    }
);
  }
  @Test public void testEncryptionAlgorithmSSECWithNoEncryptionKey() throws Throwable {
    assumeEnabled();
    intercept(IllegalArgumentException.class,"The value of property " + Constants.SERVER_SIDE_ENCRYPTION_KEY + " must not be null",() -> {
      Configuration conf=super.createConfiguration();
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_ALGORITHM,S3AEncryptionMethods.SSE_C.getMethod());
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_KEY,null);
      S3AContract contract=(S3AContract)createContract(conf);
      contract.init();
      FileSystem fileSystem=contract.getTestFileSystem();
      assertNotNull("null filesystem",fileSystem);
      URI fsURI=fileSystem.getUri();
      LOG.info("Test filesystem = {} implemented by {}",fsURI,fileSystem);
      assertEquals("wrong filesystem of " + fsURI,contract.getScheme(),fsURI.getScheme());
      fileSystem.initialize(fsURI,conf);
      throw new Exception("Do not reach here");
    }
);
  }
  @Test public void testEncryptionAlgorithmSSECWithBlankEncryptionKey() throws Throwable {
    intercept(IOException.class,S3AUtils.SSE_C_NO_KEY_ERROR,() -> {
      Configuration conf=super.createConfiguration();
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_ALGORITHM,S3AEncryptionMethods.SSE_C.getMethod());
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_KEY,"");
      S3AContract contract=(S3AContract)createContract(conf);
      contract.init();
      FileSystem fileSystem=contract.getTestFileSystem();
      assertNotNull("null filesystem",fileSystem);
      URI fsURI=fileSystem.getUri();
      LOG.info("Test filesystem = {} implemented by {}",fsURI,fileSystem);
      assertEquals("wrong filesystem of " + fsURI,contract.getScheme(),fsURI.getScheme());
      fileSystem.initialize(fsURI,conf);
      throw new Exception("Do not reach here");
    }
);
  }
  @Test public void testEncryptionAlgorithmSSES3WithEncryptionKey() throws Throwable {
    assumeEnabled();
    intercept(IOException.class,S3AUtils.SSE_S3_WITH_KEY_ERROR,() -> {
      Configuration conf=super.createConfiguration();
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_ALGORITHM,S3AEncryptionMethods.SSE_S3.getMethod());
      conf.set(Constants.SERVER_SIDE_ENCRYPTION_KEY,"4niV/jPK5VFRHY+KNb6wtqYd4xXyMgdJ9XQJpcQUVbs=");
      S3AContract contract=(S3AContract)createContract(conf);
      contract.init();
      FileSystem fileSystem=contract.getTestFileSystem();
      assertNotNull("null filesystem",fileSystem);
      URI fsURI=fileSystem.getUri();
      LOG.info("Test filesystem = {} implemented by {}",fsURI,fileSystem);
      assertEquals("wrong filesystem of " + fsURI,contract.getScheme(),fsURI.getScheme());
      fileSystem.initialize(fsURI,conf);
      throw new Exception("Do not reach here");
    }
);
  }
  /** 
 * Make this a no-op so test setup doesn't fail.
 * @param path path path
 * @throws IOException on any failure
 */
  @Override protected void mkdirs(  Path path) throws IOException {
  }
}
