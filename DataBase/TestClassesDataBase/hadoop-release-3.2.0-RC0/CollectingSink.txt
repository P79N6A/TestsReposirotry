private static class CollectingSink implements MetricsSink {
  private final AtomicLong[] collected;
  public CollectingSink(  int capacity){
    collected=new AtomicLong[capacity];
    for (int i=0; i < capacity; i++) {
      collected[i]=new AtomicLong();
    }
  }
  @Override public void init(  SubsetConfiguration conf){
  }
  @Override public void putMetrics(  MetricsRecord record){
    final String prefix="threadSourceRec";
    if (record.name().startsWith(prefix)) {
      final int recordNumber=Integer.parseInt(record.name().substring(prefix.length()));
      ArrayList<String> names=new ArrayList<String>();
      for (      AbstractMetric m : record.metrics()) {
        if (m.name().equalsIgnoreCase("g1")) {
          collected[recordNumber].set(m.value().longValue());
          return;
        }
        names.add(m.name());
      }
    }
  }
  @Override public void flush(){
  }
}
