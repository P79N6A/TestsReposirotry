public class TestJobSummary {
  private static final Logger LOG=LoggerFactory.getLogger(TestJobSummary.class);
  private JobSummary summary=new JobSummary();
  @Before public void before(){
    JobId mockJobId=mock(JobId.class);
    when(mockJobId.toString()).thenReturn("testJobId");
    summary.setJobId(mockJobId);
    summary.setJobSubmitTime(2L);
    summary.setJobLaunchTime(3L);
    summary.setFirstMapTaskLaunchTime(4L);
    summary.setFirstReduceTaskLaunchTime(5L);
    summary.setJobFinishTime(6L);
    summary.setNumSucceededMaps(1);
    summary.setNumFailedMaps(0);
    summary.setNumSucceededReduces(1);
    summary.setNumFailedReduces(0);
    summary.setNumKilledMaps(0);
    summary.setNumKilledReduces(0);
    summary.setUser("testUser");
    summary.setQueue("testQueue");
    summary.setJobStatus("testJobStatus");
    summary.setMapSlotSeconds(7);
    summary.setReduceSlotSeconds(8);
    summary.setJobName("testName");
  }
  @Test public void testEscapeJobSummary(){
    summary.setJobName("aa\rbb\ncc\r\ndd");
    String out=summary.getJobSummaryString();
    LOG.info("summary: " + out);
    Assert.assertFalse(out.contains("\r"));
    Assert.assertFalse(out.contains("\n"));
    Assert.assertTrue(out.contains("aa\\rbb\\ncc\\r\\ndd"));
  }
}
