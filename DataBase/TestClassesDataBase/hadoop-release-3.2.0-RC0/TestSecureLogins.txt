/** 
 * Verify that logins work
 */
public class TestSecureLogins extends AbstractSecureRegistryTest {
  private static final Logger LOG=LoggerFactory.getLogger(TestSecureLogins.class);
  @Test public void testHasRealm() throws Throwable {
    assertNotNull(getRealm());
    LOG.info("ZK principal = {}",getPrincipalAndRealm(ZOOKEEPER_LOCALHOST));
  }
  @Test public void testJaasFileSetup() throws Throwable {
    assertNotNull("jaasFile",jaasFile);
    String confFilename=System.getProperty(Environment.JAAS_CONF_KEY);
    assertEquals(jaasFile.getAbsolutePath(),confFilename);
  }
  @Test public void testJaasFileBinding() throws Throwable {
    assertNotNull("jaasFile",jaasFile);
    RegistrySecurity.bindJVMtoJAASFile(jaasFile);
    String confFilename=System.getProperty(Environment.JAAS_CONF_KEY);
    assertEquals(jaasFile.getAbsolutePath(),confFilename);
  }
  @Test public void testClientLogin() throws Throwable {
    LoginContext client=login(ALICE_LOCALHOST,ALICE_CLIENT_CONTEXT,keytab_alice);
    try {
      logLoginDetails(ALICE_LOCALHOST,client);
      String confFilename=System.getProperty(Environment.JAAS_CONF_KEY);
      assertNotNull("Unset: " + Environment.JAAS_CONF_KEY,confFilename);
      String config=FileUtils.readFileToString(new File(confFilename));
      LOG.info("{}=\n{}",confFilename,config);
      RegistrySecurity.setZKSaslClientProperties(ALICE,ALICE_CLIENT_CONTEXT);
    }
  finally {
      client.logout();
    }
  }
  @Test public void testZKServerContextLogin() throws Throwable {
    LoginContext client=login(ZOOKEEPER_LOCALHOST,ZOOKEEPER_SERVER_CONTEXT,keytab_zk);
    logLoginDetails(ZOOKEEPER_LOCALHOST,client);
    client.logout();
  }
  @Test public void testServerLogin() throws Throwable {
    LoginContext loginContext=createLoginContextZookeeperLocalhost();
    loginContext.login();
    loginContext.logout();
  }
  public LoginContext createLoginContextZookeeperLocalhost() throws LoginException {
    String principalAndRealm=getPrincipalAndRealm(ZOOKEEPER_LOCALHOST);
    Set<Principal> principals=new HashSet<Principal>();
    principals.add(new KerberosPrincipal(ZOOKEEPER_LOCALHOST));
    Subject subject=new Subject(false,principals,new HashSet<Object>(),new HashSet<Object>());
    return new LoginContext("",subject,null,KerberosConfiguration.createServerConfig(ZOOKEEPER_LOCALHOST,keytab_zk));
  }
  @Test public void testKerberosAuth() throws Throwable {
    File krb5conf=getKdc().getKrb5conf();
    String krbConfig=FileUtils.readFileToString(krb5conf);
    LOG.info("krb5.conf at {}:\n{}",krb5conf,krbConfig);
    Subject subject=new Subject();
    Class<?> kerb5LoginClass=Class.forName(KerberosUtil.getKrb5LoginModuleName());
    Constructor<?> kerb5LoginConstr=kerb5LoginClass.getConstructor();
    Object kerb5LoginObject=kerb5LoginConstr.newInstance();
    final Map<String,String> options=new HashMap<String,String>();
    options.put("debug","true");
    if (IBM_JAVA) {
      options.put("useKeytab",keytab_alice.getAbsolutePath().startsWith("file://") ? keytab_alice.getAbsolutePath() : "file://" + keytab_alice.getAbsolutePath());
      options.put("principal",ALICE_LOCALHOST);
      options.put("refreshKrb5Config","true");
      options.put("credsType","both");
      String ticketCache=System.getenv("KRB5CCNAME");
      if (ticketCache != null) {
        System.setProperty("KRB5CCNAME",ticketCache);
        options.put("useDefaultCcache","true");
        options.put("renewTGT","true");
      }
    }
 else {
      options.put("keyTab",keytab_alice.getAbsolutePath());
      options.put("principal",ALICE_LOCALHOST);
      options.put("doNotPrompt","true");
      options.put("isInitiator","true");
      options.put("refreshKrb5Config","true");
      options.put("renewTGT","true");
      options.put("storeKey","true");
      options.put("useKeyTab","true");
      options.put("useTicketCache","true");
    }
    Method methodInitialize=kerb5LoginObject.getClass().getMethod("initialize",Subject.class,CallbackHandler.class,Map.class,Map.class);
    methodInitialize.invoke(kerb5LoginObject,subject,null,new HashMap<String,String>(),options);
    Method methodLogin=kerb5LoginObject.getClass().getMethod("login");
    boolean loginOk=(Boolean)methodLogin.invoke(kerb5LoginObject);
    assertTrue("Failed to login",loginOk);
    Method methodCommit=kerb5LoginObject.getClass().getMethod("commit");
    boolean commitOk=(Boolean)methodCommit.invoke(kerb5LoginObject);
    assertTrue("Failed to Commit",commitOk);
  }
  @Test public void testDefaultRealmValid() throws Throwable {
    String defaultRealm=KerberosUtil.getDefaultRealm();
    assertNotEmpty("No default Kerberos Realm",defaultRealm);
    LOG.info("Default Realm '{}'",defaultRealm);
  }
  @Test public void testKerberosRulesValid() throws Throwable {
    assertTrue("!KerberosName.hasRulesBeenSet()",KerberosName.hasRulesBeenSet());
    String rules=KerberosName.getRules();
    assertEquals(kerberosRule,rules);
    LOG.info(rules);
  }
  @Test public void testValidKerberosName() throws Throwable {
    new HadoopKerberosName(ZOOKEEPER).getShortName();
    new HadoopKerberosName(ZOOKEEPER_LOCALHOST).getShortName();
    new HadoopKerberosName(ZOOKEEPER_REALM).getShortName();
  }
  @Test public void testUGILogin() throws Throwable {
    UserGroupInformation ugi=loginUGI(ZOOKEEPER,keytab_zk);
    RegistrySecurity.UgiInfo ugiInfo=new RegistrySecurity.UgiInfo(ugi);
    LOG.info("logged in as: {}",ugiInfo);
    assertTrue("security is not enabled: " + ugiInfo,UserGroupInformation.isSecurityEnabled());
    assertTrue("login is keytab based: " + ugiInfo,ugi.isFromKeytab());
    ACL acl=ugi.doAs(new PrivilegedExceptionAction<ACL>(){
      @Override public ACL run() throws Exception {
        return registrySecurity.createSaslACLFromCurrentUser(0);
      }
    }
);
    assertEquals(ZOOKEEPER_REALM,acl.getId().getId());
    assertEquals(ZookeeperConfigOptions.SCHEME_SASL,acl.getId().getScheme());
    registrySecurity.addSystemACL(acl);
  }
}
