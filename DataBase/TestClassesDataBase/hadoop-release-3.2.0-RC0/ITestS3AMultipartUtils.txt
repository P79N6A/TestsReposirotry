/** 
 * Tests for  {@link MultipartUtils}.
 */
public class ITestS3AMultipartUtils extends AbstractS3ATestBase {
  private static final int UPLOAD_LEN=1024;
  private static final String PART_FILENAME_BASE="pending-part";
  private static final int LIST_BATCH_SIZE=2;
  private static final int NUM_KEYS=5;
  @Override protected Configuration createConfiguration(){
    Configuration conf=super.createConfiguration();
    S3ATestUtils.disableFilesystemCaching(conf);
    conf.setInt(Constants.MAX_PAGING_KEYS,LIST_BATCH_SIZE);
    return conf;
  }
  /** 
 * Main test case for upload part listing and iterator paging.
 * @throws Exception on failure.
 */
  @Test public void testListMultipartUploads() throws Exception {
    S3AFileSystem fs=getFileSystem();
    Set<MultipartTestUtils.IdKey> keySet=new HashSet<>();
    try {
      for (int i=0; i < NUM_KEYS; i++) {
        Path filePath=getPartFilename(i);
        String key=fs.pathToKey(filePath);
        describe("creating upload part with key %s",key);
        MultipartTestUtils.IdKey idKey=MultipartTestUtils.createPartUpload(fs,key,UPLOAD_LEN,1);
        keySet.add(idKey);
      }
      describe("Verifying upload list by prefix");
      MultipartUtils.UploadIterator uploads=fs.listUploads(getPartPrefix(fs));
      assertUploadsPresent(uploads,keySet);
      describe("Verifying list all uploads");
      uploads=fs.listUploads(null);
      assertUploadsPresent(uploads,keySet);
    }
  finally {
      MultipartTestUtils.cleanupParts(fs,keySet);
    }
  }
  /** 
 * Assert that all provided multipart uploads are contained in the upload iterator's results.
 * @param list upload iterator
 * @param ourUploads set up uploads that should be present
 * @throws IOException on I/O error
 */
  private void assertUploadsPresent(  MultipartUtils.UploadIterator list,  Set<MultipartTestUtils.IdKey> ourUploads) throws IOException {
    Set<MultipartTestUtils.IdKey> uploads=new HashSet<>(ourUploads);
    while (list.hasNext()) {
      MultipartTestUtils.IdKey listing=toIdKey(list.next());
      if (uploads.contains(listing)) {
        LOG.debug("Matched: {},{}",listing.getKey(),listing.getUploadId());
        uploads.remove(listing);
      }
 else {
        LOG.debug("Not our upload {},{}",listing.getKey(),listing.getUploadId());
      }
    }
    assertTrue("Not all our uploads were listed",uploads.isEmpty());
  }
  private MultipartTestUtils.IdKey toIdKey(  MultipartUpload mu){
    return new MultipartTestUtils.IdKey(mu.getKey(),mu.getUploadId());
  }
  private Path getPartFilename(  int index) throws IOException {
    return path(String.format("%s-%d",PART_FILENAME_BASE,index));
  }
  private String getPartPrefix(  S3AFileSystem fs) throws IOException {
    return fs.pathToKey(path("blah").getParent());
  }
}
