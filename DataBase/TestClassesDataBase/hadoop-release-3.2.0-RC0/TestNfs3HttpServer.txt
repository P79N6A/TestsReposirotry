public class TestNfs3HttpServer {
  private static final String BASEDIR=GenericTestUtils.getTempPath(TestNfs3HttpServer.class.getSimpleName());
  private static NfsConfiguration conf=new NfsConfiguration();
  private static MiniDFSCluster cluster;
  private static String keystoresDir;
  private static String sslConfDir;
  @BeforeClass public static void setUp() throws Exception {
    conf.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTP_AND_HTTPS.name());
    conf.set(NfsConfigKeys.NFS_HTTP_ADDRESS_KEY,"localhost:0");
    conf.set(NfsConfigKeys.NFS_HTTPS_ADDRESS_KEY,"localhost:0");
    conf.setInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY,0);
    conf.setInt(NfsConfigKeys.DFS_NFS_MOUNTD_PORT_KEY,0);
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestNfs3HttpServer.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
  }
  @AfterClass public static void tearDown() throws Exception {
    FileUtil.fullyDelete(new File(BASEDIR));
    if (cluster != null) {
      cluster.shutdown();
    }
    KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
  }
  @Test public void testHttpServer() throws Exception {
    Nfs3 nfs=new Nfs3(conf);
    nfs.startServiceInternal(false);
    RpcProgramNfs3 nfsd=(RpcProgramNfs3)nfs.getRpcProgram();
    Nfs3HttpServer infoServer=nfsd.getInfoServer();
    String urlRoot=infoServer.getServerURI().toString();
    String pageContents=DFSTestUtil.urlGet(new URL(urlRoot + "/jmx"));
    assertTrue("Bad contents: " + pageContents,pageContents.contains("java.lang:type="));
    System.out.println("pc:" + pageContents);
    int port=infoServer.getSecurePort();
    assertTrue("Can't get https port",port > 0);
  }
}
