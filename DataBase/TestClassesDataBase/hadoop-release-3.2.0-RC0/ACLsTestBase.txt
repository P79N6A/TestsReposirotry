public abstract class ACLsTestBase {
  protected static final String COMMON_USER="common_user";
  protected static final String QUEUE_A_USER="queueA_user";
  protected static final String QUEUE_B_USER="queueB_user";
  protected static final String QUEUE_A_GROUP="queueA_group";
  protected static final String QUEUE_B_GROUP="queueB_group";
  protected static final String ROOT_ADMIN="root_admin";
  protected static final String QUEUE_A_ADMIN="queueA_admin";
  protected static final String QUEUE_B_ADMIN="queueB_admin";
  protected static final String QUEUEA="queueA";
  protected static final String QUEUEB="queueB";
  protected static final String QUEUEC="queueC";
  protected static final Log LOG=LogFactory.getLog(TestApplicationACLs.class);
  protected MockRM resourceManager;
  Configuration conf;
  YarnRPC rpc;
  InetSocketAddress rmAddress;
  @Before public void setup() throws InterruptedException, IOException {
    conf=createConfiguration();
    rpc=YarnRPC.create(conf);
    rmAddress=conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,YarnConfiguration.DEFAULT_RM_ADDRESS,YarnConfiguration.DEFAULT_RM_PORT);
    AccessControlList adminACL=new AccessControlList("");
    conf.set(YarnConfiguration.YARN_ADMIN_ACL,adminACL.getAclString());
    conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
    resourceManager=new MockRM(conf){
      protected ClientRMService createClientRMService(){
        return new ClientRMService(getRMContext(),this.scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,getRMContext().getRMDelegationTokenSecretManager());
      }
      @Override protected void doSecureLogin() throws IOException {
      }
    }
;
    new Thread(){
      public void run(){
        resourceManager.start();
      }
    }
.start();
    int waitCount=0;
    while (resourceManager.getServiceState() == STATE.INITED && waitCount++ < 60) {
      LOG.info("Waiting for RM to start...");
      Thread.sleep(1500);
    }
    if (resourceManager.getServiceState() != STATE.STARTED) {
      throw new IOException("ResourceManager failed to start. Final state is " + resourceManager.getServiceState());
    }
  }
  protected ApplicationClientProtocol getRMClientForUser(  String user) throws IOException, InterruptedException {
    UserGroupInformation userUGI=UserGroupInformation.createRemoteUser(user);
    ApplicationClientProtocol userClient=userUGI.doAs(new PrivilegedExceptionAction<ApplicationClientProtocol>(){
      @Override public ApplicationClientProtocol run() throws Exception {
        return (ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
      }
    }
);
    return userClient;
  }
  protected abstract Configuration createConfiguration() throws IOException ;
}
