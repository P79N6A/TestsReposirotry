private static class MockScheduler implements ApplicationMasterProtocol {
  ApplicationAttemptId attemptId;
  long nextContainerId=10;
  List<ResourceRequest> lastAsk=null;
  int lastAnyAskMap=0;
  int lastAnyAskReduce=0;
  List<ContainerStatus> containersToComplete=new ArrayList<ContainerStatus>();
  List<Container> containersToAllocate=new ArrayList<Container>();
  public MockScheduler(  ApplicationAttemptId attemptId){
    this.attemptId=attemptId;
  }
  @Override public RegisterApplicationMasterResponse registerApplicationMaster(  RegisterApplicationMasterRequest request) throws YarnException, IOException {
    return RegisterApplicationMasterResponse.newInstance(Resource.newInstance(512,1),Resource.newInstance(512000,1024),Collections.emptyMap(),ByteBuffer.wrap("fake_key".getBytes()),Collections.<Container>emptyList(),"default",Collections.<NMToken>emptyList());
  }
  @Override public FinishApplicationMasterResponse finishApplicationMaster(  FinishApplicationMasterRequest request) throws YarnException, IOException {
    return FinishApplicationMasterResponse.newInstance(false);
  }
  @Override public AllocateResponse allocate(  AllocateRequest request) throws YarnException, IOException {
    lastAsk=request.getAskList();
    for (    ResourceRequest req : lastAsk) {
      if (ResourceRequest.ANY.equals(req.getResourceName())) {
        Priority priority=req.getPriority();
        if (priority.equals(RMContainerAllocator.PRIORITY_MAP)) {
          lastAnyAskMap=req.getNumContainers();
        }
 else         if (priority.equals(RMContainerAllocator.PRIORITY_REDUCE)) {
          lastAnyAskReduce=req.getNumContainers();
        }
      }
    }
    AllocateResponse response=AllocateResponse.newInstance(request.getResponseId(),containersToComplete,containersToAllocate,Collections.<NodeReport>emptyList(),Resource.newInstance(512000,1024),null,10,null,Collections.<NMToken>emptyList());
    response.setApplicationPriority(Priority.newInstance(0));
    containersToComplete.clear();
    containersToAllocate.clear();
    return response;
  }
  public ContainerId assignContainer(  String nodeName,  boolean isReduce){
    ContainerId containerId=ContainerId.newContainerId(attemptId,nextContainerId++);
    Priority priority=isReduce ? RMContainerAllocator.PRIORITY_REDUCE : RMContainerAllocator.PRIORITY_MAP;
    Container container=Container.newInstance(containerId,NodeId.newInstance(nodeName,1234),nodeName + ":5678",Resource.newInstance(1024,1),priority,null);
    containersToAllocate.add(container);
    return containerId;
  }
  public void completeContainer(  ContainerId containerId){
    containersToComplete.add(ContainerStatus.newInstance(containerId,ContainerState.COMPLETE,"",0));
  }
}
