@SuppressWarnings("unchecked") public class TestLdapGroupsMappingWithPosixGroup extends TestLdapGroupsMappingBase {
  @Before public void setupMocks() throws NamingException {
    Attribute uidNumberAttr=mock(Attribute.class);
    Attribute gidNumberAttr=mock(Attribute.class);
    Attribute uidAttr=mock(Attribute.class);
    Attributes attributes=getAttributes();
    when(uidAttr.get()).thenReturn("some_user");
    when(uidNumberAttr.get()).thenReturn("700");
    when(gidNumberAttr.get()).thenReturn("600");
    when(attributes.get(eq("uid"))).thenReturn(uidAttr);
    when(attributes.get(eq("uidNumber"))).thenReturn(uidNumberAttr);
    when(attributes.get(eq("gidNumber"))).thenReturn(gidNumberAttr);
  }
  @Test public void testGetGroups() throws IOException, NamingException {
    when(getContext().search(anyString(),contains("posix"),any(Object[].class),any(SearchControls.class))).thenReturn(getUserNames(),getGroupNames());
    doTestGetGroups(Arrays.asList(getTestGroups()),2);
  }
  private void doTestGetGroups(  List<String> expectedGroups,  int searchTimes) throws IOException, NamingException {
    Configuration conf=new Configuration();
    conf.set(LdapGroupsMapping.LDAP_URL_KEY,"ldap://test");
    conf.set(LdapGroupsMapping.GROUP_SEARCH_FILTER_KEY,"(objectClass=posixGroup)(cn={0})");
    conf.set(LdapGroupsMapping.USER_SEARCH_FILTER_KEY,"(objectClass=posixAccount)");
    conf.set(LdapGroupsMapping.GROUP_MEMBERSHIP_ATTR_KEY,"memberUid");
    conf.set(LdapGroupsMapping.POSIX_UID_ATTR_KEY,"uidNumber");
    conf.set(LdapGroupsMapping.POSIX_GID_ATTR_KEY,"gidNumber");
    conf.set(LdapGroupsMapping.GROUP_NAME_ATTR_KEY,"cn");
    LdapGroupsMapping groupsMapping=getGroupsMapping();
    groupsMapping.setConf(conf);
    List<String> groups=groupsMapping.getGroups("some_user");
    Assert.assertEquals(expectedGroups,groups);
    groupsMapping.getConf().set(LdapGroupsMapping.POSIX_UID_ATTR_KEY,"uid");
    Assert.assertEquals(expectedGroups,groups);
    verify(getContext(),times(searchTimes)).search(anyString(),anyString(),any(Object[].class),any(SearchControls.class));
  }
}
