/** 
 * Test class for IntraQueuePreemption scenarios.
 */
public class TestProportionalCapacityPreemptionPolicyIntraQueueWithDRF extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,true);
    rc=new DominantResourceCalculator();
    when(cs.getResourceCalculator()).thenReturn(rc);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testSimpleIntraQueuePreemptionWithVCoreResource() throws IOException {
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100:50,true;";
    String nodesConfig="n1= res=100:50";
    String queuesConfig="root(=[100:50 100:50 80:40 120:60 0]);" + "-a(=[10:5 100:50 10:5 50:25 0]);" + "-b(=[40:20 100:50 40:20 60:30 0]);"+ "-c(=[20:10 100:50 10:5 10:5 0]);"+ "-d(=[30:15 100:50 20:10 0 0])";
    String appsConfig="a\t" + "(1,1:1,n1,,5,false,25:25);" + "a\t"+ "(1,1:1,n1,,5,false,25:25);"+ "b\t"+ "(4,1:1,n1,,36,false,20:20);"+ "b\t"+ "(4,1:1,n1,,2,false,10:10);"+ "b\t"+ "(5,1:1,n1,,1,false,10:10);"+ "b\t"+ "(6,1:1,n1,,1,false,10:10);"+ "c\t"+ "(1,1:1,n1,,10,false,10:10);"+ "d\t"+ "(1,1:1,n1,,20,false,0)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(3)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testIntraQueuePreemptionWithDominantVCoreResource() throws IOException {
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100:200,true;";
    String nodesConfig="n1= res=100:200";
    String queuesConfig="root(=[100:50 100:50 50:40 110:60 0]);" + "-a(=[40:20 100:50 9:9 50:30 0]);" + "-b(=[60:30 100:50 40:30 60:30 0]);";
    String appsConfig="a\t" + "(1,2:1,n1,,4,false,25:25);" + "a\t"+ "(1,1:3,n1,,2,false,25:25);"+ "b\t"+ "(4,2:1,n1,,10,false,20:20);"+ "b\t"+ "(4,1:2,n1,,5,false,10:10);"+ "b\t"+ "(5,1:1,n1,,5,false,30:20);"+ "b\t"+ "(6,2:1,n1,,5,false,30:20);";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(5))));
  }
}
