/** 
 * Test S3A Failure translation, including a functional test generating errors during stream IO.
 */
public class ITestS3AFailureHandling extends AbstractS3ATestBase {
  private static final Logger LOG=LoggerFactory.getLogger(ITestS3AFailureHandling.class);
  @Override protected Configuration createConfiguration(){
    Configuration conf=super.createConfiguration();
    S3ATestUtils.disableFilesystemCaching(conf);
    conf.setBoolean(Constants.ENABLE_MULTI_DELETE,true);
    return conf;
  }
  @Test public void testReadFileChanged() throws Throwable {
    describe("overwrite a file with a shorter one during a read, seek");
    final int fullLength=8192;
    final byte[] fullDataset=dataset(fullLength,'a',32);
    final int shortLen=4096;
    final byte[] shortDataset=dataset(shortLen,'A',32);
    final FileSystem fs=getFileSystem();
    final Path testpath=path("readFileToChange.txt");
    writeDataset(fs,testpath,fullDataset,fullDataset.length,1024,false);
    try (FSDataInputStream instream=fs.open(testpath)){
      instream.seek(fullLength - 16);
      assertTrue("no data to read",instream.read() >= 0);
      writeDataset(fs,testpath,shortDataset,shortDataset.length,1024,true);
      eventually(30 * 1000,1000,() -> {
        assertEquals(shortLen,fs.getFileStatus(testpath).getLen());
      }
);
      instream.seek(shortLen + 1024);
      int c=instream.read();
      assertIsEOF("read()",c);
      byte[] buf=new byte[256];
      assertIsEOF("read(buffer)",instream.read(buf));
      assertIsEOF("read(offset)",instream.read(instream.getPos(),buf,0,buf.length));
      intercept(EOFException.class,"","readfully",() -> instream.readFully(shortLen + 512,buf));
      assertIsEOF("read(offset)",instream.read(shortLen + 510,buf,0,buf.length));
      instream.seek(shortLen - 256);
      fs.delete(testpath,false);
      intercept(FileNotFoundException.class,"","read()",() -> instream.read());
      intercept(FileNotFoundException.class,"","readfully",() -> instream.readFully(2048,buf));
    }
   }
  /** 
 * Assert that a read operation returned an EOF value.
 * @param operation specific operation
 * @param readResult result
 */
  private void assertIsEOF(  String operation,  int readResult){
    assertEquals("Expected EOF from " + operation + "; got char "+ (char)readResult,-1,readResult);
  }
  @Test public void testMultiObjectDeleteNoFile() throws Throwable {
    describe("Deleting a missing object");
    removeKeys(getFileSystem(),"ITestS3AFailureHandling/missingFile");
  }
  private void removeKeys(  S3AFileSystem fileSystem,  String... keys) throws IOException {
    List<DeleteObjectsRequest.KeyVersion> request=new ArrayList<>(keys.length);
    for (    String key : keys) {
      request.add(new DeleteObjectsRequest.KeyVersion(key));
    }
    fileSystem.removeKeys(request,false,false);
  }
  @Test public void testMultiObjectDeleteSomeFiles() throws Throwable {
    Path valid=path("ITestS3AFailureHandling/validFile");
    touch(getFileSystem(),valid);
    NanoTimer timer=new NanoTimer();
    removeKeys(getFileSystem(),getFileSystem().pathToKey(valid),"ITestS3AFailureHandling/missingFile");
    timer.end("removeKeys");
  }
  @Test public void testMultiObjectDeleteNoPermissions() throws Throwable {
    Configuration conf=getConfiguration();
    String csvFile=conf.getTrimmed(KEY_CSVTEST_FILE,DEFAULT_CSVTEST_FILE);
    Assume.assumeTrue("CSV test file is not the default",DEFAULT_CSVTEST_FILE.equals(csvFile));
    Path testFile=new Path(csvFile);
    S3AFileSystem fs=(S3AFileSystem)testFile.getFileSystem(conf);
    intercept(MultiObjectDeleteException.class,() -> removeKeys(fs,fs.pathToKey(testFile)));
  }
}
