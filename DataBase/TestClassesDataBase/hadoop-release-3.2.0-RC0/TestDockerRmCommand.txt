/** 
 * Tests the docker rm command and any command line arguments.
 */
public class TestDockerRmCommand {
  private DockerRmCommand dockerRmCommand;
  private DockerRmCommand dockerRmCommandWithCgroupArg;
  private DockerRmCommand dockerRmCommandWithEmptyCgroupArg;
  private static final String CONTAINER_NAME="foo";
  private static final String CGROUP_HIERARCHY_NAME="hadoop-yarn";
  @Before public void setUp(){
    dockerRmCommand=new DockerRmCommand(CONTAINER_NAME,null);
    dockerRmCommandWithCgroupArg=new DockerRmCommand(CONTAINER_NAME,CGROUP_HIERARCHY_NAME);
    dockerRmCommandWithEmptyCgroupArg=new DockerRmCommand(CONTAINER_NAME,"");
  }
  @Test public void testGetCommandOption(){
    assertEquals("rm",dockerRmCommand.getCommandOption());
  }
  @Test public void testGetCommandWithArguments(){
    assertEquals("rm",StringUtils.join(",",dockerRmCommand.getDockerCommandWithArguments().get("docker-command")));
    assertEquals("foo",StringUtils.join(",",dockerRmCommand.getDockerCommandWithArguments().get("name")));
    assertEquals(2,dockerRmCommand.getDockerCommandWithArguments().size());
  }
  @Test public void testGetCommandWithCgroup(){
    assertEquals("rm",StringUtils.join(",",dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get("docker-command")));
    assertEquals("foo",StringUtils.join(",",dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get("name")));
    assertEquals(CGROUP_HIERARCHY_NAME,StringUtils.join(",",dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get("hierarchy")));
    assertEquals(3,dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().size());
  }
  @Test public void testGetCommandWithEmptyCgroup(){
    assertEquals("rm",StringUtils.join(",",dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().get("docker-command")));
    assertEquals("foo",StringUtils.join(",",dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().get("name")));
    assertEquals(2,dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().size());
  }
}
