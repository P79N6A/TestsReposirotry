private class TestDeleteHelper {
  private FileEntry[] fileEntries;
  private FileEntry deleteEntry;
  private String cmdAndOptions;
  private boolean expectedToDelete;
  final String doAsGroup;
  final UserGroupInformation userUgi;
  public TestDeleteHelper(  FileEntry[] fileEntries,  FileEntry deleteEntry,  String cmdAndOptions,  String doAsUser,  boolean expectedToDelete){
    this.fileEntries=fileEntries;
    this.deleteEntry=deleteEntry;
    this.cmdAndOptions=cmdAndOptions;
    this.expectedToDelete=expectedToDelete;
    doAsGroup=doAsUser.equals("hdfs") ? "supergroup" : "users";
    userUgi=createUGI(doAsUser,doAsGroup);
  }
  public void execute(  Configuration conf,  FileSystem fs) throws Exception {
    fs.mkdirs(new Path(TEST_ROOT));
    createFiles(fs,TEST_ROOT,fileEntries);
    final FsShell fsShell=new FsShell(conf);
    final String deletePath=TEST_ROOT + "/" + deleteEntry.getPath();
    String[] tmpCmdOpts=StringUtils.split(cmdAndOptions);
    ArrayList<String> tmpArray=new ArrayList<String>(Arrays.asList(tmpCmdOpts));
    tmpArray.add(deletePath);
    final String[] cmdOpts=tmpArray.toArray(new String[tmpArray.size()]);
    userUgi.doAs(new PrivilegedExceptionAction<String>(){
      public String run() throws Exception {
        return execCmd(fsShell,cmdOpts);
      }
    }
);
    boolean deleted=!fs.exists(new Path(deletePath));
    assertEquals(expectedToDelete,deleted);
    deldir(fs,TEST_ROOT);
  }
}
