public class TestMRAppMaster {
  private static final Logger LOG=LoggerFactory.getLogger(TestMRAppMaster.class);
  private static final Path TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","target/test-dir"));
  private static final Path testDir=new Path(TEST_ROOT_DIR,TestMRAppMaster.class.getName() + "-tmpDir");
  static String stagingDir=new Path(testDir,"staging").toString();
  private static FileContext localFS=null;
  @BeforeClass public static void setup() throws AccessControlException, FileNotFoundException, IllegalArgumentException, IOException {
    DefaultMetricsSystem.setMiniClusterMode(true);
    File dir=new File(stagingDir);
    stagingDir=dir.getAbsolutePath();
    localFS=FileContext.getLocalFSFileContext();
    localFS.delete(testDir,true);
    new File(testDir.toString()).mkdir();
  }
  @Before public void prepare() throws IOException {
    File dir=new File(stagingDir);
    if (dir.exists()) {
      FileUtils.deleteDirectory(dir);
    }
    dir.mkdirs();
  }
  @AfterClass public static void cleanup() throws IOException {
    localFS.delete(testDir,true);
  }
  @Test public void testMRAppMasterForDifferentUser() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000001";
    String containerIdStr="container_1317529182569_0004_000001_1";
    String userName="TestAppMasterUser";
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMasterTest appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis());
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    Path userPath=new Path(stagingDir,userName);
    Path userStagingPath=new Path(userPath,".staging");
    assertEquals(userStagingPath.toString(),appMaster.stagingDirPath.toString());
  }
  @Test public void testMRAppMasterMidLock() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    conf.setInt(org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.FILEOUTPUTCOMMITTER_ALGORITHM_VERSION,1);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    JobId jobId=TypeConverter.toYarn(TypeConverter.fromYarn(applicationAttemptId.getApplicationId()));
    Path start=MRApps.getStartJobCommitFile(conf,userName,jobId);
    FileSystem fs=FileSystem.get(conf);
    fs.create(start).close();
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMaster appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,false);
    boolean caught=false;
    try {
      MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    }
 catch (    IOException e) {
      LOG.info("Caught expected Exception",e);
      caught=true;
    }
    assertTrue(caught);
    assertTrue(appMaster.errorHappenedShutDown);
    assertEquals(JobStateInternal.ERROR,appMaster.forcedState);
    appMaster.stop();
    verifyFailedStatus((MRAppMasterTest)appMaster,"FAILED");
  }
  @Test public void testMRAppMasterJobLaunchTime() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    conf.setInt(MRJobConfig.NUM_REDUCES,0);
    conf.set(JHAdminConfig.MR_HS_JHIST_FORMAT,"json");
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    JobId jobId=TypeConverter.toYarn(TypeConverter.fromYarn(applicationAttemptId.getApplicationId()));
    File dir=new File(MRApps.getStagingAreaDir(conf,userName).toString(),jobId.toString());
    dir.mkdirs();
    File historyFile=new File(JobHistoryUtils.getStagingJobHistoryFile(new Path(dir.toURI().toString()),jobId,(applicationAttemptId.getAttemptId() - 1)).toUri().getRawPath());
    historyFile.createNewFile();
    FSDataOutputStream out=new FSDataOutputStream(new FileOutputStream(historyFile),null);
    EventWriter writer=new EventWriter(out,EventWriter.WriteMode.JSON);
    writer.close();
    FileSystem fs=FileSystem.get(conf);
    JobSplitWriter.createSplitFiles(new Path(dir.getAbsolutePath()),conf,fs,new org.apache.hadoop.mapred.InputSplit[0]);
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMasterTestLaunchTime appMaster=new MRAppMasterTestLaunchTime(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis());
    MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    appMaster.stop();
    assertTrue("Job launch time should not be negative.",appMaster.jobLaunchTime.get() >= 0);
  }
  @Test public void testMRAppMasterSuccessLock() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    JobId jobId=TypeConverter.toYarn(TypeConverter.fromYarn(applicationAttemptId.getApplicationId()));
    Path start=MRApps.getStartJobCommitFile(conf,userName,jobId);
    Path end=MRApps.getEndJobCommitSuccessFile(conf,userName,jobId);
    FileSystem fs=FileSystem.get(conf);
    fs.create(start).close();
    fs.create(end).close();
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMaster appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,false);
    boolean caught=false;
    try {
      MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    }
 catch (    IOException e) {
      LOG.info("Caught expected Exception",e);
      caught=true;
    }
    assertTrue(caught);
    assertTrue(appMaster.errorHappenedShutDown);
    assertEquals(JobStateInternal.SUCCEEDED,appMaster.forcedState);
    appMaster.stop();
    verifyFailedStatus((MRAppMasterTest)appMaster,"SUCCEEDED");
  }
  @Test public void testMRAppMasterFailLock() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    JobId jobId=TypeConverter.toYarn(TypeConverter.fromYarn(applicationAttemptId.getApplicationId()));
    Path start=MRApps.getStartJobCommitFile(conf,userName,jobId);
    Path end=MRApps.getEndJobCommitFailureFile(conf,userName,jobId);
    FileSystem fs=FileSystem.get(conf);
    fs.create(start).close();
    fs.create(end).close();
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMaster appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,false);
    boolean caught=false;
    try {
      MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    }
 catch (    IOException e) {
      LOG.info("Caught expected Exception",e);
      caught=true;
    }
    assertTrue(caught);
    assertTrue(appMaster.errorHappenedShutDown);
    assertEquals(JobStateInternal.FAILED,appMaster.forcedState);
    appMaster.stop();
    verifyFailedStatus((MRAppMasterTest)appMaster,"FAILED");
  }
  @Test public void testMRAppMasterMissingStaging() throws IOException, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    File dir=new File(stagingDir);
    if (dir.exists()) {
      FileUtils.deleteDirectory(dir);
    }
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    MRAppMaster appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,false);
    boolean caught=false;
    try {
      MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    }
 catch (    IOException e) {
      LOG.info("Caught expected Exception",e);
      caught=true;
    }
    assertTrue(caught);
    assertTrue(appMaster.errorHappenedShutDown);
    assertEquals(JobStateInternal.ERROR,appMaster.forcedState);
    appMaster.stop();
  }
  @Test(timeout=30000) public void testMRAppMasterMaxAppAttempts() throws IOException, InterruptedException {
    Boolean[] expectedBools=new Boolean[]{false,false,false};
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    File stagingDir=new File(MRApps.getStagingAreaDir(conf,userName).toString());
    stagingDir.mkdirs();
    for (int i=0; i < expectedBools.length; ++i) {
      MRAppMasterTest appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,true);
      MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
      assertEquals("isLastAMRetry is correctly computed.",expectedBools[i],appMaster.isLastAMRetry());
    }
  }
  @SuppressWarnings({"rawtypes","unchecked"}) private static void setNewEnvironmentHack(  Map<String,String> newenv) throws Exception {
    try {
      Class<?> cl=Class.forName("java.lang.ProcessEnvironment");
      Field field=cl.getDeclaredField("theEnvironment");
      field.setAccessible(true);
      Map<String,String> env=(Map<String,String>)field.get(null);
      env.clear();
      env.putAll(newenv);
      Field ciField=cl.getDeclaredField("theCaseInsensitiveEnvironment");
      ciField.setAccessible(true);
      Map<String,String> cienv=(Map<String,String>)ciField.get(null);
      cienv.clear();
      cienv.putAll(newenv);
    }
 catch (    NoSuchFieldException e) {
      Class[] classes=Collections.class.getDeclaredClasses();
      Map<String,String> env=System.getenv();
      for (      Class cl : classes) {
        if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
          Field field=cl.getDeclaredField("m");
          field.setAccessible(true);
          Object obj=field.get(env);
          Map<String,String> map=(Map<String,String>)obj;
          map.clear();
          map.putAll(newenv);
        }
      }
    }
  }
  @Test public void testMRAppMasterCredentials() throws Exception {
    GenericTestUtils.setRootLogLevel(Level.DEBUG);
    Credentials credentials=new Credentials();
    byte[] identifier="MyIdentifier".getBytes();
    byte[] password="MyPassword".getBytes();
    Text kind=new Text("MyTokenKind");
    Text service=new Text("host:port");
    Token<? extends TokenIdentifier> myToken=new Token<TokenIdentifier>(identifier,password,kind,service);
    Text tokenAlias=new Text("myToken");
    credentials.addToken(tokenAlias,myToken);
    Text appTokenService=new Text("localhost:0");
    Token<AMRMTokenIdentifier> appToken=new Token<AMRMTokenIdentifier>(identifier,password,AMRMTokenIdentifier.KIND_NAME,appTokenService);
    credentials.addToken(appTokenService,appToken);
    Text keyAlias=new Text("mySecretKeyAlias");
    credentials.addSecretKey(keyAlias,"mySecretKey".getBytes());
    Token<? extends TokenIdentifier> storedToken=credentials.getToken(tokenAlias);
    JobConf conf=new JobConf();
    Path tokenFilePath=new Path(testDir,"tokens-file");
    Map<String,String> newEnv=new HashMap<String,String>();
    newEnv.put(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION,tokenFilePath.toUri().getPath());
    setNewEnvironmentHack(newEnv);
    credentials.writeTokenStorageFile(tokenFilePath,conf);
    ApplicationId appId=ApplicationId.newInstance(12345,56);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(appId,1);
    ContainerId containerId=ContainerId.newContainerId(applicationAttemptId,546);
    String userName=UserGroupInformation.getCurrentUser().getShortUserName();
    File stagingDir=new File(MRApps.getStagingAreaDir(conf,userName).toString());
    stagingDir.mkdirs();
    UserGroupInformation.setLoginUser(null);
    MRAppMasterTest appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,true);
    MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    Credentials appMasterCreds=appMaster.getCredentials();
    Assert.assertNotNull(appMasterCreds);
    Assert.assertEquals(1,appMasterCreds.numberOfSecretKeys());
    Assert.assertEquals(1,appMasterCreds.numberOfTokens());
    Token<? extends TokenIdentifier> usedToken=appMasterCreds.getToken(tokenAlias);
    Assert.assertNotNull(usedToken);
    Assert.assertEquals(storedToken,usedToken);
    byte[] usedKey=appMasterCreds.getSecretKey(keyAlias);
    Assert.assertNotNull(usedKey);
    Assert.assertEquals("mySecretKey",new String(usedKey));
    Credentials confCredentials=conf.getCredentials();
    Assert.assertEquals(1,confCredentials.numberOfSecretKeys());
    Assert.assertEquals(1,confCredentials.numberOfTokens());
    Assert.assertEquals(storedToken,confCredentials.getToken(tokenAlias));
    Assert.assertEquals("mySecretKey",new String(confCredentials.getSecretKey(keyAlias)));
    Credentials ugiCredentials=appMaster.getUgi().getCredentials();
    Assert.assertEquals(1,ugiCredentials.numberOfSecretKeys());
    Assert.assertEquals(2,ugiCredentials.numberOfTokens());
    Assert.assertEquals(storedToken,ugiCredentials.getToken(tokenAlias));
    Assert.assertEquals(appToken,ugiCredentials.getToken(appTokenService));
    Assert.assertEquals("mySecretKey",new String(ugiCredentials.getSecretKey(keyAlias)));
  }
  @Test public void testMRAppMasterShutDownJob() throws Exception, InterruptedException {
    String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
    String containerIdStr="container_1317529182569_0004_000002_1";
    String userName="TestAppMasterUser";
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.fromString(applicationAttemptIdStr);
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    JobConf conf=new JobConf();
    conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
    File stagingDir=new File(MRApps.getStagingAreaDir(conf,userName).toString());
    stagingDir.mkdirs();
    MRAppMasterTest appMaster=spy(new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),false,true));
    MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
    doReturn(conf).when(appMaster).getConfig();
    appMaster.isLastAMRetry=true;
    doNothing().when(appMaster).serviceStop();
    appMaster.shutDownJob();
    Assert.assertTrue("Expected shutDownJob to terminate.",ExitUtil.terminateCalled());
    Assert.assertEquals("Expected shutDownJob to exit with status code of 0.",0,ExitUtil.getFirstExitException().status);
    ExitUtil.resetFirstExitException();
    String msg="Injected Exception";
    doThrow(new RuntimeException(msg)).when(appMaster).notifyIsLastAMRetry(anyBoolean());
    appMaster.shutDownJob();
    assertTrue("Expected message from ExitUtil.ExitException to be " + msg,ExitUtil.getFirstExitException().getMessage().contains(msg));
    Assert.assertEquals("Expected shutDownJob to exit with status code of 1.",1,ExitUtil.getFirstExitException().status);
  }
  private void verifyFailedStatus(  MRAppMasterTest appMaster,  String expectedJobState){
    ArgumentCaptor<JobHistoryEvent> captor=ArgumentCaptor.forClass(JobHistoryEvent.class);
    verify(appMaster.spyHistoryService,times(2)).handleEvent(captor.capture());
    HistoryEvent event=captor.getValue().getHistoryEvent();
    assertTrue(event instanceof JobUnsuccessfulCompletionEvent);
    assertEquals(((JobUnsuccessfulCompletionEvent)event).getStatus(),expectedJobState);
  }
}
