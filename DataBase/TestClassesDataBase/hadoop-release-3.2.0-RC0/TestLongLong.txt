public class TestLongLong {
  static final Random RAN=new Random();
  static final long MASK=(1L << (LongLong.SIZE >> 1)) - 1;
  static long nextPositiveLong(){
    return RAN.nextLong() & MASK;
  }
  static void verifyMultiplication(  long a,  long b){
    final LongLong ll=LongLong.multiplication(new LongLong(),a,b);
    final BigInteger bi=BigInteger.valueOf(a).multiply(BigInteger.valueOf(b));
    final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);
    Assert.assertEquals(s,bi,ll.toBigInteger());
  }
  @Test public void testMultiplication(){
    for (int i=0; i < 100; i++) {
      final long a=nextPositiveLong();
      final long b=nextPositiveLong();
      verifyMultiplication(a,b);
    }
    final long max=Long.MAX_VALUE & MASK;
    verifyMultiplication(max,max);
  }
  static void verifyRightShift(  long a,  long b){
    final LongLong ll=new LongLong().set(a,b);
    final BigInteger bi=ll.toBigInteger();
    for (int i=0; i < LongLong.SIZE >> 1; i++) {
      final long result=ll.shiftRight(i) & MASK;
      final long expected=bi.shiftRight(i).longValue() & MASK;
      final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);
      Assert.assertEquals(s,expected,result);
    }
    final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);
    Assert.assertEquals(s,bi,ll.toBigInteger());
  }
  @Test public void testRightShift(){
    for (int i=0; i < 1000; i++) {
      final long a=nextPositiveLong();
      final long b=nextPositiveLong();
      verifyMultiplication(a,b);
    }
  }
}
