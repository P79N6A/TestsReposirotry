/** 
 * Test class for @DefaultImpersonationProvider
 */
public class TestDefaultImpersonationProvider {
  private String proxyUser;
  private String user;
  private DefaultImpersonationProvider provider;
  private UserGroupInformation userGroupInformation=Mockito.mock(UserGroupInformation.class);
  private UserGroupInformation realUserUGI=Mockito.mock(UserGroupInformation.class);
  private Configuration conf;
  @Rule public Timeout globalTimeout=new Timeout(10000);
  @Before public void setup(){
    conf=new Configuration();
    provider=new DefaultImpersonationProvider();
    conf.set("hadoop.proxyuser.fakeuser.groups","*");
    conf.set("hadoop.proxyuser.fakeuser.hosts","*");
    conf.set("hadoop.proxyuser.test.user.groups","*");
    conf.set("hadoop.proxyuser.test.user.hosts","*");
    conf.set("hadoop.proxyuser.test user2.groups","*");
    conf.set("hadoop.proxyuser.test user2.hosts","*");
    provider.setConf(conf);
    provider.init(ProxyUsers.CONF_HADOOP_PROXYUSER);
  }
  @Test public void testAuthorizationSuccess() throws AuthorizationException {
    proxyUser="fakeuser";
    user="dummyUser";
    when(realUserUGI.getShortUserName()).thenReturn(proxyUser);
    when(userGroupInformation.getRealUser()).thenReturn(realUserUGI);
    provider.authorize(userGroupInformation,"2.2.2.2");
    user="somerandomuser";
    proxyUser="test.user";
    when(realUserUGI.getShortUserName()).thenReturn(proxyUser);
    when(userGroupInformation.getRealUser()).thenReturn(realUserUGI);
    provider.authorize(userGroupInformation,"2.2.2.2");
  }
  @Test public void testAuthorizationFailure() throws Exception {
    user="dummyUser";
    proxyUser="test user2";
    when(realUserUGI.getShortUserName()).thenReturn(proxyUser);
    when(realUserUGI.getUserName()).thenReturn(proxyUser);
    when(userGroupInformation.getUserName()).thenReturn(user);
    when(userGroupInformation.getRealUser()).thenReturn(realUserUGI);
    LambdaTestUtils.intercept(AuthorizationException.class,"User: " + proxyUser + " is not allowed to impersonate "+ user,() -> provider.authorize(userGroupInformation,"2.2.2.2"));
  }
  @After public void clear(){
    provider=null;
    conf=null;
    userGroupInformation=null;
    realUserUGI=null;
  }
}
