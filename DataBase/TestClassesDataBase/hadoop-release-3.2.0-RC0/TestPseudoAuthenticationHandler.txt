public class TestPseudoAuthenticationHandler {
  @Test public void testInit() throws Exception {
    PseudoAuthenticationHandler handler=new PseudoAuthenticationHandler();
    try {
      Properties props=new Properties();
      props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,"false");
      handler.init(props);
      Assert.assertEquals(false,handler.getAcceptAnonymous());
    }
  finally {
      handler.destroy();
    }
  }
  @Test public void testType() throws Exception {
    PseudoAuthenticationHandler handler=new PseudoAuthenticationHandler();
    Assert.assertEquals(PseudoAuthenticationHandler.TYPE,handler.getType());
  }
  @Test public void testAnonymousOn() throws Exception {
    PseudoAuthenticationHandler handler=new PseudoAuthenticationHandler();
    try {
      Properties props=new Properties();
      props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,"true");
      handler.init(props);
      HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
      HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
      AuthenticationToken token=handler.authenticate(request,response);
      Assert.assertEquals(AuthenticationToken.ANONYMOUS,token);
    }
  finally {
      handler.destroy();
    }
  }
  @Test public void testAnonymousOff() throws Exception {
    PseudoAuthenticationHandler handler=new PseudoAuthenticationHandler();
    try {
      Properties props=new Properties();
      props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,"false");
      handler.init(props);
      HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
      HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
      AuthenticationToken token=handler.authenticate(request,response);
      Assert.assertNull(token);
    }
  finally {
      handler.destroy();
    }
  }
  private void _testUserName(  boolean anonymous) throws Exception {
    PseudoAuthenticationHandler handler=new PseudoAuthenticationHandler();
    try {
      Properties props=new Properties();
      props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,Boolean.toString(anonymous));
      handler.init(props);
      HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
      HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
      Mockito.when(request.getQueryString()).thenReturn(PseudoAuthenticator.USER_NAME + "=" + "user");
      AuthenticationToken token=handler.authenticate(request,response);
      Assert.assertNotNull(token);
      Assert.assertEquals("user",token.getUserName());
      Assert.assertEquals("user",token.getName());
      Assert.assertEquals(PseudoAuthenticationHandler.TYPE,token.getType());
    }
  finally {
      handler.destroy();
    }
  }
  @Test public void testUserNameAnonymousOff() throws Exception {
    _testUserName(false);
  }
  @Test public void testUserNameAnonymousOn() throws Exception {
    _testUserName(true);
  }
}
