/** 
 * Tests for the  {@link AllocationBasedResourceUtilizationTracker} class.
 */
public class TestAllocationBasedResourceUtilizationTracker {
  private ContainerScheduler mockContainerScheduler;
  @Before public void setup(){
    mockContainerScheduler=mock(ContainerScheduler.class);
    ContainersMonitor containersMonitor=new ContainersMonitorImpl(mock(ContainerExecutor.class),mock(AsyncDispatcher.class),mock(Context.class));
    YarnConfiguration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.NM_PMEM_MB,1024);
    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,true);
    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,true);
    conf.setFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,2.0f);
    conf.setInt(YarnConfiguration.NM_VCORES,8);
    containersMonitor.init(conf);
    when(mockContainerScheduler.getContainersMonitor()).thenReturn(containersMonitor);
  }
  /** 
 * Node has capacity for 1024 MB and 8 cores. Saturate the node. When full the hasResourceAvailable should return false.
 */
  @Test public void testHasResourcesAvailable(){
    AllocationBasedResourceUtilizationTracker tracker=new AllocationBasedResourceUtilizationTracker(mockContainerScheduler);
    Container testContainer=mock(Container.class);
    when(testContainer.getResource()).thenReturn(Resource.newInstance(512,4));
    for (int i=0; i < 2; i++) {
      Assert.assertTrue(tracker.hasResourcesAvailable(testContainer));
      tracker.addContainerResources(testContainer);
    }
    Assert.assertFalse(tracker.hasResourcesAvailable(testContainer));
  }
  /** 
 * Test the case where the current allocation has been truncated to 0.8888891 (8/9 cores used). Request 1 additional core - hasEnoughCpu should return true.
 */
  @Test public void testHasEnoughCpu(){
    AllocationBasedResourceUtilizationTracker tracker=new AllocationBasedResourceUtilizationTracker(mockContainerScheduler);
    float currentAllocation=0.8888891f;
    long totalCores=9;
    int alreadyUsedCores=8;
    Assert.assertTrue(tracker.hasEnoughCpu(currentAllocation,totalCores,(int)totalCores - alreadyUsedCores));
    Assert.assertFalse(tracker.hasEnoughCpu(currentAllocation,totalCores,(int)totalCores - alreadyUsedCores + 1));
  }
}
