/** 
 * Tests covering the classpath command-line utility.
 */
public class TestClasspath {
  private static final Logger LOG=LoggerFactory.getLogger(TestClasspath.class);
  private static final File TEST_DIR=GenericTestUtils.getTestDir("TestClasspath");
  private static final Charset UTF8=Charset.forName("UTF-8");
static {
    ExitUtil.disableSystemExit();
  }
  private PrintStream oldStdout, oldStderr;
  private ByteArrayOutputStream stdout, stderr;
  private PrintStream printStdout, printStderr;
  @Before public void setUp(){
    assertTrue(FileUtil.fullyDelete(TEST_DIR));
    assertTrue(TEST_DIR.mkdirs());
    oldStdout=System.out;
    oldStderr=System.err;
    stdout=new ByteArrayOutputStream();
    printStdout=new PrintStream(stdout);
    System.setOut(printStdout);
    stderr=new ByteArrayOutputStream();
    printStderr=new PrintStream(stderr);
    System.setErr(printStderr);
  }
  @After public void tearDown(){
    System.setOut(oldStdout);
    System.setErr(oldStderr);
    IOUtils.cleanupWithLogger(LOG,printStdout,printStderr);
    assertTrue(FileUtil.fullyDelete(TEST_DIR));
  }
  @Test public void testGlob(){
    Classpath.main(new String[]{"--glob"});
    String strOut=new String(stdout.toByteArray(),UTF8);
    assertEquals(System.getProperty("java.class.path"),strOut.trim());
    assertTrue(stderr.toByteArray().length == 0);
  }
  @Test public void testJar() throws IOException {
    File file=new File(TEST_DIR,"classpath.jar");
    Classpath.main(new String[]{"--jar",file.getAbsolutePath()});
    assertTrue(stdout.toByteArray().length == 0);
    assertTrue(stderr.toByteArray().length == 0);
    assertTrue(file.exists());
    assertJar(file);
  }
  @Test public void testJarReplace() throws IOException {
    testJar();
    testJar();
  }
  @Test public void testJarFileMissing() throws IOException {
    try {
      Classpath.main(new String[]{"--jar"});
      fail("expected exit");
    }
 catch (    ExitUtil.ExitException e) {
      assertTrue(stdout.toByteArray().length == 0);
      String strErr=new String(stderr.toByteArray(),UTF8);
      assertTrue(strErr.contains("requires path of jar"));
    }
  }
  @Test public void testHelp(){
    Classpath.main(new String[]{"--help"});
    String strOut=new String(stdout.toByteArray(),UTF8);
    assertTrue(strOut.contains("Prints the classpath"));
    assertTrue(stderr.toByteArray().length == 0);
  }
  @Test public void testHelpShort(){
    Classpath.main(new String[]{"-h"});
    String strOut=new String(stdout.toByteArray(),UTF8);
    assertTrue(strOut.contains("Prints the classpath"));
    assertTrue(stderr.toByteArray().length == 0);
  }
  @Test public void testUnrecognized(){
    try {
      Classpath.main(new String[]{"--notarealoption"});
      fail("expected exit");
    }
 catch (    ExitUtil.ExitException e) {
      assertTrue(stdout.toByteArray().length == 0);
      String strErr=new String(stderr.toByteArray(),UTF8);
      assertTrue(strErr.contains("unrecognized option"));
    }
  }
  /** 
 * Asserts that the specified file is a jar file with a manifest containing a non-empty classpath attribute.
 * @param file File to check
 * @throws IOException if there is an I/O error
 */
  private static void assertJar(  File file) throws IOException {
    JarFile jarFile=null;
    try {
      jarFile=new JarFile(file);
      Manifest manifest=jarFile.getManifest();
      assertNotNull(manifest);
      Attributes mainAttributes=manifest.getMainAttributes();
      assertNotNull(mainAttributes);
      assertTrue(mainAttributes.containsKey(Attributes.Name.CLASS_PATH));
      String classPathAttr=mainAttributes.getValue(Attributes.Name.CLASS_PATH);
      assertNotNull(classPathAttr);
      assertFalse(classPathAttr.isEmpty());
    }
  finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        IOException e) {
          LOG.warn("exception closing jarFile: " + jarFile,e);
        }
      }
    }
  }
}
