public class TestJvmMetrics {
  @Rule public Timeout timeout=new Timeout(30000);
  private JvmPauseMonitor pauseMonitor;
  private GcTimeMonitor gcTimeMonitor;
  /** 
 * Robust shutdown of the monitors if they haven't been stopped already.
 */
  @After public void teardown(){
    ServiceOperations.stop(pauseMonitor);
    if (gcTimeMonitor != null) {
      gcTimeMonitor.shutdown();
    }
  }
  @Test public void testJvmPauseMonitorPresence(){
    pauseMonitor=new JvmPauseMonitor();
    pauseMonitor.init(new Configuration());
    pauseMonitor.start();
    JvmMetrics jvmMetrics=new JvmMetrics("test","test");
    jvmMetrics.setPauseMonitor(pauseMonitor);
    MetricsRecordBuilder rb=getMetrics(jvmMetrics);
    MetricsCollector mc=rb.parent();
    verify(mc).addRecord(JvmMetrics);
    verify(rb).tag(ProcessName,"test");
    verify(rb).tag(SessionId,"test");
    for (    JvmMetricsInfo info : JvmMetricsInfo.values()) {
      if (info.name().startsWith("Mem")) {
        verify(rb).addGauge(eq(info),anyFloat());
      }
 else       if (info.name().startsWith("Gc") && !info.name().equals("GcTimePercentage")) {
        verify(rb).addCounter(eq(info),anyLong());
      }
 else       if (info.name().startsWith("Threads")) {
        verify(rb).addGauge(eq(info),anyInt());
      }
 else       if (info.name().startsWith("Log")) {
        verify(rb).addCounter(eq(info),anyLong());
      }
    }
  }
  @Test public void testGcTimeMonitorPresence(){
    gcTimeMonitor=new GcTimeMonitor(60000,1000,70,null);
    gcTimeMonitor.start();
    JvmMetrics jvmMetrics=new JvmMetrics("test","test");
    jvmMetrics.setGcTimeMonitor(gcTimeMonitor);
    MetricsRecordBuilder rb=getMetrics(jvmMetrics);
    MetricsCollector mc=rb.parent();
    verify(mc).addRecord(JvmMetrics);
    verify(rb).tag(ProcessName,"test");
    verify(rb).tag(SessionId,"test");
    for (    JvmMetricsInfo info : JvmMetricsInfo.values()) {
      if (info.name().equals("GcTimePercentage")) {
        verify(rb).addGauge(eq(info),anyInt());
      }
    }
  }
  @Test public void testDoubleStop() throws Throwable {
    pauseMonitor=new JvmPauseMonitor();
    pauseMonitor.init(new Configuration());
    pauseMonitor.start();
    pauseMonitor.stop();
    pauseMonitor.stop();
  }
  @Test public void testDoubleStart() throws Throwable {
    pauseMonitor=new JvmPauseMonitor();
    pauseMonitor.init(new Configuration());
    pauseMonitor.start();
    pauseMonitor.start();
    pauseMonitor.stop();
  }
  @Test public void testStopBeforeStart() throws Throwable {
    pauseMonitor=new JvmPauseMonitor();
    try {
      pauseMonitor.init(new Configuration());
      pauseMonitor.stop();
      pauseMonitor.start();
      Assert.fail("Expected an exception, got " + pauseMonitor);
    }
 catch (    ServiceStateException e) {
      GenericTestUtils.assertExceptionContains("cannot enter state",e);
    }
  }
  @Test public void testStopBeforeInit() throws Throwable {
    pauseMonitor=new JvmPauseMonitor();
    try {
      pauseMonitor.stop();
      pauseMonitor.init(new Configuration());
      Assert.fail("Expected an exception, got " + pauseMonitor);
    }
 catch (    ServiceStateException e) {
      GenericTestUtils.assertExceptionContains("cannot enter state",e);
    }
  }
  @Test public void testGcTimeMonitor(){
class Alerter implements GcTimeMonitor.GcTimeAlertHandler {
      private volatile int numAlerts;
      private volatile int maxGcTimePercentage;
      @Override public void alert(      GcTimeMonitor.GcData gcData){
        numAlerts++;
        if (gcData.getGcTimePercentage() > maxGcTimePercentage) {
          maxGcTimePercentage=gcData.getGcTimePercentage();
        }
      }
    }
    Alerter alerter=new Alerter();
    int alertGcPerc=10;
    gcTimeMonitor=new GcTimeMonitor(60 * 1000,100,alertGcPerc,alerter);
    gcTimeMonitor.start();
    int maxGcTimePercentage=0;
    long gcCount=0;
    List<String> garbageStrings=new ArrayList<>();
    long startTime=System.currentTimeMillis();
    while (System.currentTimeMillis() - startTime < 1000) {
      for (int j=0; j < 100000; j++) {
        garbageStrings.add("Long string prefix just to fill memory with garbage " + j);
      }
      garbageStrings.clear();
      System.gc();
      GcTimeMonitor.GcData gcData=gcTimeMonitor.getLatestGcData();
      int gcTimePercentage=gcData.getGcTimePercentage();
      if (gcTimePercentage > maxGcTimePercentage) {
        maxGcTimePercentage=gcTimePercentage;
      }
      gcCount=gcData.getAccumulatedGcCount();
    }
    Assert.assertTrue(maxGcTimePercentage > 0);
    Assert.assertTrue(gcCount > 0);
    Assert.assertTrue(alerter.numAlerts > 0);
    Assert.assertTrue(alerter.maxGcTimePercentage >= alertGcPerc);
  }
  @Test public void testJvmMetricsSingletonWithSameProcessName(){
    JvmMetrics jvmMetrics1=org.apache.hadoop.metrics2.source.JvmMetrics.initSingleton("test",null);
    JvmMetrics jvmMetrics2=org.apache.hadoop.metrics2.source.JvmMetrics.initSingleton("test",null);
    Assert.assertEquals("initSingleton should return the singleton instance",jvmMetrics1,jvmMetrics2);
  }
  @Test public void testJvmMetricsSingletonWithDifferentProcessNames(){
    final String process1Name="process1";
    JvmMetrics jvmMetrics1=org.apache.hadoop.metrics2.source.JvmMetrics.initSingleton(process1Name,null);
    final String process2Name="process2";
    JvmMetrics jvmMetrics2=org.apache.hadoop.metrics2.source.JvmMetrics.initSingleton(process2Name,null);
    Assert.assertEquals("initSingleton should return the singleton instance",jvmMetrics1,jvmMetrics2);
    Assert.assertEquals("unexpected process name of the singleton instance",process1Name,jvmMetrics1.processName);
    Assert.assertEquals("unexpected process name of the singleton instance",process1Name,jvmMetrics2.processName);
  }
}
