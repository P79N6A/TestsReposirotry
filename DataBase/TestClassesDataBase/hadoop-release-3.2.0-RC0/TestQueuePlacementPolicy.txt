public class TestQueuePlacementPolicy {
  private final static Configuration conf=new Configuration();
  private Map<FSQueueType,Set<String>> configuredQueues;
  @BeforeClass public static void setup(){
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
  }
  @Before public void initTest(){
    configuredQueues=new HashMap<FSQueueType,Set<String>>();
    for (    FSQueueType type : FSQueueType.values()) {
      configuredQueues.put(type,new HashSet<String>());
    }
  }
  @Test public void testSpecifiedUserPolicy() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='user' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.specifiedq",policy.assignAppToQueue("specifiedq","someuser"));
    assertEquals("root.someuser",policy.assignAppToQueue("default","someuser"));
    assertEquals("root.otheruser",policy.assignAppToQueue("default","otheruser"));
  }
  @Test public void testNoCreate() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='user' create=\"false\" />");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    configuredQueues.get(FSQueueType.LEAF).add("root.someuser");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.specifiedq",policy.assignAppToQueue("specifiedq","someuser"));
    assertEquals("root.someuser",policy.assignAppToQueue("default","someuser"));
    assertEquals("root.specifiedq",policy.assignAppToQueue("specifiedq","otheruser"));
    assertEquals("root.default",policy.assignAppToQueue("default","otheruser"));
  }
  @Test public void testSpecifiedThenReject() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='reject' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.specifiedq",policy.assignAppToQueue("specifiedq","someuser"));
    assertEquals(null,policy.assignAppToQueue("default","someuser"));
  }
  @Test(expected=AllocationConfigurationException.class) public void testOmittedTerminalRule() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='user' create=\"false\" />");
    sb.append("</queuePlacementPolicy>");
    parse(sb.toString());
  }
  @Test(expected=AllocationConfigurationException.class) public void testTerminalRuleInMiddle() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='default' />");
    sb.append("  <rule name='user' />");
    sb.append("</queuePlacementPolicy>");
    parse(sb.toString());
  }
  @Test public void testTerminals() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='secondaryGroupExistingQueue' create='true'/>");
    sb.append("  <rule name='default' queue='otherdefault' create='false'/>");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    try {
      policy.assignAppToQueue("root.otherdefault","user1");
      fail("Expect exception from having default rule with create=\'false\'");
    }
 catch (    IllegalStateException se) {
    }
  }
  @Test public void testDefaultRuleWithQueueAttribute() throws Exception {
    configuredQueues.get(FSQueueType.LEAF).add("root.someDefaultQueue");
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' create='false' />");
    sb.append("  <rule name='default' queue='root.someDefaultQueue'/>");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.someDefaultQueue",policy.assignAppToQueue("root.default","user1"));
  }
  @Test public void testNestedUserQueueParsingErrors(){
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='nestedUserQueue'/>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    assertIfExceptionThrown(sb);
    sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='unknownRule'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    assertIfExceptionThrown(sb);
  }
  private void assertIfExceptionThrown(  StringBuffer sb){
    Throwable th=null;
    try {
      parse(sb.toString());
    }
 catch (    Exception e) {
      th=e;
    }
    assertTrue(th instanceof AllocationConfigurationException);
  }
  @Test public void testNestedUserQueueParsing() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='primaryGroup'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    Throwable th=null;
    try {
      parse(sb.toString());
    }
 catch (    Exception e) {
      th=e;
    }
    assertNull(th);
  }
  @Test public void testNestedUserQueuePrimaryGroup() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' create='false' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='primaryGroup'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.user1group.user1",policy.assignAppToQueue("root.default","user1"));
    configuredQueues.get(FSQueueType.LEAF).add("root.specifiedq");
    assertEquals("root.specifiedq",policy.assignAppToQueue("root.specifiedq","user2"));
    configuredQueues.get(FSQueueType.LEAF).add("root.user3group");
    assertEquals("root.default",policy.assignAppToQueue("root.default","user3"));
  }
  @Test public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='primaryGroup' create='false'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.default",policy.assignAppToQueue("root.default","user1"));
    configuredQueues.get(FSQueueType.PARENT).add("root.user1group");
    policy=parse(sb.toString());
    assertEquals("root.user1group.user1",policy.assignAppToQueue("root.default","user1"));
    sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='nestedUserQueue' create='false'>");
    sb.append("       <rule name='primaryGroup' create='false'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    assertEquals("root.default",policy.assignAppToQueue("root.default","user2"));
    configuredQueues.get(FSQueueType.PARENT).add("root.user2group");
    configuredQueues.get(FSQueueType.LEAF).add("root.user2group.user2");
    policy=parse(sb.toString());
    assertEquals("root.user2group.user2",policy.assignAppToQueue("root.default","user2"));
  }
  @Test public void testNestedUserQueueSecondaryGroup() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='secondaryGroupExistingQueue'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.default",policy.assignAppToQueue("root.default","user1"));
    configuredQueues.get(FSQueueType.PARENT).add("root.user1subgroup1");
    policy=parse(sb.toString());
    assertEquals("root.user1subgroup1.user1",policy.assignAppToQueue("root.default","user1"));
  }
  @Test public void testNestedUserQueueSpecificRule() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='specified' create='false'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    configuredQueues.get(FSQueueType.PARENT).add("root.parent1");
    configuredQueues.get(FSQueueType.PARENT).add("root.parent2");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.parent1.user1",policy.assignAppToQueue("root.parent1","user1"));
    assertEquals("root.parent2.user2",policy.assignAppToQueue("root.parent2","user2"));
  }
  @Test public void testNestedUserQueueDefaultRule() throws Exception {
    configuredQueues.get(FSQueueType.PARENT).add("root.parentq");
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' create='false' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='default' queue='root.parentq'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.parentq.user1",policy.assignAppToQueue("root.default","user1"));
  }
  @Test public void testUserContainsPeriod() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='user' />");
    sb.append("</queuePlacementPolicy>");
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.first_dot_last",policy.assignAppToQueue("default","first.last"));
    sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' create='false' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='default'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    policy=parse(sb.toString());
    assertEquals("root.default.first_dot_last",policy.assignAppToQueue("root.default","first.last"));
  }
  @Test public void testGroupContainsPeriod() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='specified' create='false' />");
    sb.append("  <rule name='nestedUserQueue'>");
    sb.append("       <rule name='primaryGroup'/>");
    sb.append("  </rule>");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,PeriodGroupsMapping.class,GroupMappingServiceProvider.class);
    QueuePlacementPolicy policy=parse(sb.toString());
    assertEquals("root.user1_dot_group.user1",policy.assignAppToQueue("root.default","user1"));
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
  }
  @Test(expected=IOException.class) public void testEmptyGroupsPrimaryGroupRule() throws Exception {
    StringBuffer sb=new StringBuffer();
    sb.append("<queuePlacementPolicy>");
    sb.append("  <rule name='primaryGroup' create=\"false\" />");
    sb.append("  <rule name='default' />");
    sb.append("</queuePlacementPolicy>");
    conf.setStrings(CommonConfigurationKeys.HADOOP_USER_GROUP_STATIC_OVERRIDES,"emptygroupuser=");
    QueuePlacementPolicy policy=parse(sb.toString());
    policy.assignAppToQueue(null,"emptygroupuser");
  }
  private QueuePlacementPolicy parse(  String str) throws Exception {
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    docBuilderFactory.setIgnoringComments(true);
    DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    Document doc=builder.parse(IOUtils.toInputStream(str));
    Element root=doc.getDocumentElement();
    return QueuePlacementPolicy.fromXml(root,configuredQueues,conf);
  }
}
