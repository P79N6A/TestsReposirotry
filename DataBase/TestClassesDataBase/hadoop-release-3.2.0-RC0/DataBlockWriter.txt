class DataBlockWriter implements Runnable {
  Thread runner;
  AzureBlobStorageTestAccount writerStorageAccount;
  String key;
  boolean done=false;
  /** 
 * Constructor captures the test account.
 * @param testAccount
 */
  public DataBlockWriter(  AzureBlobStorageTestAccount testAccount,  String key){
    writerStorageAccount=testAccount;
    this.key=key;
  }
  /** 
 * Start writing blocks to Azure storage.
 */
  public void startWriting(){
    runner=new Thread(this);
    runner.start();
  }
  /** 
 * Stop writing blocks to Azure storage.
 */
  public void stopWriting(){
    done=true;
  }
  /** 
 * Implementation of the runnable interface. The run method is a tight loop which repeatedly updates the blob with a 4 MB block.
 */
  public void run(){
    byte[] dataBlockWrite=new byte[UPLOAD_BLOCK_SIZE];
    OutputStream outputStream=null;
    try {
      for (int i=0; !done; i++) {
        outputStream=writerStorageAccount.getStore().storefile(key,new PermissionStatus("","",FsPermission.getDefault()),key);
        Arrays.fill(dataBlockWrite,(byte)(i % 256));
        for (int j=0; j < NUMBER_OF_BLOCKS; j++) {
          outputStream.write(dataBlockWrite);
        }
        outputStream.flush();
        outputStream.close();
      }
    }
 catch (    AzureException e) {
      LOG.error("DatablockWriter thread encountered a storage exception." + e.getMessage(),e);
    }
catch (    IOException e) {
      LOG.error("DatablockWriter thread encountered an I/O exception." + e.getMessage(),e);
    }
  }
}
