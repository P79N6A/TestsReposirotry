@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class ITestNativeFileSystemStatistics extends AbstractWasbTestWithTimeout {
  @Test public void test_001_NativeAzureFileSystemMocked() throws Exception {
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.createMock();
    assumeNotNull(testAccount);
    testStatisticsWithAccount(testAccount);
  }
  @Test public void test_002_NativeAzureFileSystemPageBlobLive() throws Exception {
    Configuration conf=new Configuration();
    conf.set(AzureNativeFileSystemStore.KEY_PAGE_BLOB_DIRECTORIES,"/");
    conf.set(AzureNativeFileSystemStore.KEY_ATOMIC_RENAME_DIRECTORIES,"/");
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.create(conf);
    assumeNotNull(testAccount);
    testStatisticsWithAccount(testAccount);
  }
  @Test public void test_003_NativeAzureFileSystem() throws Exception {
    AzureBlobStorageTestAccount testAccount=AzureBlobStorageTestAccount.create();
    assumeNotNull(testAccount);
    testStatisticsWithAccount(testAccount);
  }
  private void testStatisticsWithAccount(  AzureBlobStorageTestAccount testAccount) throws Exception {
    assumeNotNull(testAccount);
    NativeAzureFileSystem fs=testAccount.getFileSystem();
    testStatistics(fs);
    cleanupTestAccount(testAccount);
  }
  /** 
 * When tests are ran in parallel, this tests will fail because FileSystem.Statistics is per FileSystem class.
 */
  @SuppressWarnings("deprecation") private void testStatistics(  NativeAzureFileSystem fs) throws Exception {
    FileSystem.clearStatistics();
    FileSystem.Statistics stats=FileSystem.getStatistics("wasb",NativeAzureFileSystem.class);
    assertEquals(0,stats.getBytesRead());
    assertEquals(0,stats.getBytesWritten());
    Path newFile=new Path("testStats");
    writeStringToFile(fs,newFile,"12345678");
    assertEquals(8,stats.getBytesWritten());
    assertEquals(0,stats.getBytesRead());
    String readBack=readStringFromFile(fs,newFile);
    assertEquals("12345678",readBack);
    assertEquals(8,stats.getBytesRead());
    assertEquals(8,stats.getBytesWritten());
    assertTrue(fs.delete(newFile,true));
    assertEquals(8,stats.getBytesRead());
    assertEquals(8,stats.getBytesWritten());
  }
}
