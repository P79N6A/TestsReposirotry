public class TestApplicationLimitsByPartition {
  final static int GB=1024;
  LeafQueue queue;
  RMNodeLabelsManager mgr;
  private YarnConfiguration conf;
  private final ResourceCalculator resourceCalculator=new DefaultResourceCalculator();
  @Before public void setUp() throws IOException {
    conf=new YarnConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    mgr=new NullRMNodeLabelsManager();
    mgr.init(conf);
  }
  private void simpleNodeLabelMappingToManager() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
    mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),TestUtils.toSet("x"),NodeId.newInstance("h2",0),TestUtils.toSet("y")));
  }
  private void complexNodeLabelMappingToManager() throws IOException {
    mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
    mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),TestUtils.toSet("x"),NodeId.newInstance("h2",0),TestUtils.toSet("y"),NodeId.newInstance("h3",0),TestUtils.toSet("y"),NodeId.newInstance("h4",0),TestUtils.toSet("z"),NodeId.newInstance("h5",0),RMNodeLabelsManager.EMPTY_STRING_SET));
  }
  @Test(timeout=120000) public void testAMResourceLimitWithLabels() throws Exception {
    simpleNodeLabelMappingToManager();
    CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    final String C1=CapacitySchedulerConfiguration.ROOT + ".c" + ".c1";
    config.setMaximumAMResourcePercentPerPartition(A1,"x",0.2f);
    config.setMaximumApplicationMasterResourcePerQueuePercent(C1,0.2f);
    MockRM rm1=new MockRM(config){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
    rm1.registerNode("h2:1234",10 * GB);
    MockNM nm3=rm1.registerNode("h3:1234",10 * GB);
    RMApp app1=rm1.submitApp(GB,"app","user",null,"a1","x");
    RMApp app2=rm1.submitApp(GB,"app","user",null,"a1","x");
    RMApp pendingApp=rm1.submitApp(GB,"app","user",null,"a1","x");
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(2,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    Assert.assertTrue("AM diagnostics not set properly",app1.getDiagnostics().toString().contains(AMState.ACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",app2.getDiagnostics().toString().contains(AMState.ACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(AMState.INACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(CSAMContainerLaunchDiagnosticsConstants.QUEUE_AM_RESOURCE_LIMIT_EXCEED));
    RMApp app3=rm1.submitApp(GB,"app","user",null,"c1");
    MockRM.launchAndRegisterAM(app3,rm1,nm3);
    RMApp app4=rm1.submitApp(GB,"app","user",null,"c1");
    MockRM.launchAndRegisterAM(app4,rm1,nm3);
    pendingApp=rm1.submitApp(GB,"app","user",null,"c1");
    leafQueue=(LeafQueue)cs.getQueue("c1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(2,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(AMState.INACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(CSAMContainerLaunchDiagnosticsConstants.QUEUE_AM_RESOURCE_LIMIT_EXCEED));
    rm1.killApp(app3.getApplicationId());
    Thread.sleep(1000);
    Assert.assertEquals(2,leafQueue.getNumActiveApplications());
    Assert.assertEquals(0,leafQueue.getNumPendingApplications());
    rm1.close();
  }
  @Test(timeout=120000) public void testAtleastOneAMRunPerPartition() throws Exception {
    simpleNodeLabelMappingToManager();
    CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    final String C1=CapacitySchedulerConfiguration.ROOT + ".c" + ".c1";
    config.setMaximumAMResourcePercentPerPartition(A1,"x",0.15f);
    config.setMaximumApplicationMasterResourcePerQueuePercent(C1,0.15f);
    MockRM rm1=new MockRM(config){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
    rm1.registerNode("h2:1234",10 * GB);
    MockNM nm3=rm1.registerNode("h3:1234",10 * GB);
    RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"a1","x");
    MockRM.launchAndRegisterAM(app1,rm1,nm1);
    rm1.submitApp(GB,"app","user",null,"a1","x");
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(1,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    RMApp app3=rm1.submitApp(2 * GB,"app","user",null,"c1");
    MockRM.launchAndRegisterAM(app3,rm1,nm3);
    rm1.submitApp(GB,"app","user",null,"c1");
    leafQueue=(LeafQueue)cs.getQueue("c1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(1,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    rm1.close();
  }
  @Test(timeout=120000) public void testDefaultAMLimitFromQueueForPartition() throws Exception {
    simpleNodeLabelMappingToManager();
    CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    config.setMaximumApplicationMasterResourcePerQueuePercent(A1,0.2f);
    MockRM rm1=new MockRM(config){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
    rm1.registerNode("h2:1234",10 * GB);
    rm1.registerNode("h3:1234",10 * GB);
    RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"a1","x");
    RMApp pendingApp=rm1.submitApp(GB,"app","user",null,"a1","x");
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(1,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    Assert.assertTrue("AM diagnostics not set properly",app1.getDiagnostics().toString().contains(AMState.ACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(AMState.INACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(CSAMContainerLaunchDiagnosticsConstants.QUEUE_AM_RESOURCE_LIMIT_EXCEED));
    rm1.close();
  }
  @Test(timeout=120000) public void testUserAMResourceLimitWithLabels() throws Exception {
    final String user_0="user_0";
    final String user_1="user_1";
    simpleNodeLabelMappingToManager();
    CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    config.setMaximumAMResourcePercentPerPartition(A1,"x",0.4f);
    config.setUserLimit(A1,50);
    MockRM rm1=new MockRM(config){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
    rm1.registerNode("h2:1234",10 * GB);
    rm1.registerNode("h3:1234",10 * GB);
    RMApp app1=rm1.submitApp(GB,"app",user_0,null,"a1","x");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
    am1.allocate("*",1 * GB,15,new ArrayList<ContainerId>(),"");
    RMApp app2=rm1.submitApp(GB,"app",user_1,null,"a1","x");
    MockRM.launchAndRegisterAM(app2,rm1,nm1);
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(2,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumActiveApplications(user_0));
    Assert.assertEquals(0,leafQueue.getNumPendingApplications());
    RMApp app3=rm1.submitApp(GB,"app",user_1,null,"a1","x");
    MockAM am2=MockRM.launchAndRegisterAM(app3,rm1,nm1);
    am2.allocate("*",1 * GB,10,new ArrayList<ContainerId>(),"");
    RMApp pendingApp=rm1.submitApp(GB,"app",user_1,null,"a1","x");
    Assert.assertEquals(3,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumActiveApplications(user_0));
    Assert.assertEquals(2,leafQueue.getNumActiveApplications(user_1));
    Assert.assertEquals(1,leafQueue.getNumPendingApplications(user_1));
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(AMState.INACTIVATED.getDiagnosticMessage()));
    Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(CSAMContainerLaunchDiagnosticsConstants.USER_AM_RESOURCE_LIMIT_EXCEED));
    rm1.close();
  }
  @Test public void testAMResourceLimitForMultipleApplications() throws Exception {
    complexNodeLabelMappingToManager();
    CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getComplexConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    final String B1=CapacitySchedulerConfiguration.ROOT + ".b" + ".b1";
    config.setMaximumAMResourcePercentPerPartition(A1,"y",0.25f);
    config.setMaximumApplicationMasterResourcePerQueuePercent(B1,0.15f);
    MockRM rm1=new MockRM(config){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm1.getRMContext().setNodeLabelManager(mgr);
    rm1.start();
    rm1.registerNode("h1:1234",10 * GB);
    MockNM nm2=rm1.registerNode("h2:1234",10 * GB);
    MockNM nm3=rm1.registerNode("h3:1234",10 * GB);
    rm1.registerNode("h4:1234",10 * GB);
    MockNM nm5=rm1.registerNode("h5:1234",10 * GB);
    RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"a1","y");
    MockRM.launchAndRegisterAM(app1,rm1,nm2);
    RMApp app2=rm1.submitApp(GB,"app","user",null,"a1","y");
    MockRM.launchAndRegisterAM(app2,rm1,nm3);
    rm1.submitApp(GB,"app","user",null,"a1","y");
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(2,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    RMApp app3=rm1.submitApp(GB,"app","user",null,"b1");
    MockRM.launchAndRegisterAM(app3,rm1,nm5);
    rm1.submitApp(GB,"app","user",null,"b1");
    leafQueue=(LeafQueue)cs.getQueue("b1");
    Assert.assertNotNull(leafQueue);
    Assert.assertEquals(1,leafQueue.getNumActiveApplications());
    Assert.assertEquals(1,leafQueue.getNumPendingApplications());
    rm1.close();
  }
  @Test public void testHeadroom() throws Exception {
    simpleNodeLabelMappingToManager();
    CapacitySchedulerConfiguration csConf=(CapacitySchedulerConfiguration)TestUtils.getComplexConfigurationWithQueueLabels(conf);
    final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
    final String B2=CapacitySchedulerConfiguration.ROOT + ".b" + ".b2";
    csConf.setUserLimit(A1,25);
    csConf.setUserLimit(B2,25);
    YarnConfiguration conf=new YarnConfiguration();
    CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
    when(csContext.getConfiguration()).thenReturn(csConf);
    when(csContext.getConf()).thenReturn(conf);
    when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB));
    when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB));
    when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
    RMContext rmContext=TestUtils.getMockRMContext();
    RMContext spyRMContext=spy(rmContext);
    when(spyRMContext.getNodeLabelManager()).thenReturn(mgr);
    when(csContext.getRMContext()).thenReturn(spyRMContext);
    when(csContext.getPreemptionManager()).thenReturn(new PreemptionManager());
    mgr.activateNode(NodeId.newInstance("h0",0),Resource.newInstance(160 * GB,16));
    mgr.activateNode(NodeId.newInstance("h1",0),Resource.newInstance(160 * GB,16));
    mgr.activateNode(NodeId.newInstance("h2",0),Resource.newInstance(160 * GB,16));
    Resource clusterResource=Resources.createResource(160 * GB);
    when(csContext.getClusterResource()).thenReturn(clusterResource);
    Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
    CSQueue rootQueue=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
    rootQueue.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    ResourceUsage queueResUsage=rootQueue.getQueueResourceUsage();
    when(csContext.getClusterResourceUsage()).thenReturn(queueResUsage);
    LeafQueue queue=TestLeafQueue.stubLeafQueue((LeafQueue)queues.get("b2"));
    queue.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    String rack_0="rack_0";
    FiCaSchedulerNode node_0=TestUtils.getMockNode("h0",rack_0,0,160 * GB);
    FiCaSchedulerNode node_1=TestUtils.getMockNode("h1",rack_0,0,160 * GB);
    final String user_0="user_0";
    final String user_1="user_1";
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
    ConcurrentMap<ApplicationId,RMApp> spyApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
    RMApp rmApp=mock(RMApp.class);
    ResourceRequest amResourceRequest=mock(ResourceRequest.class);
    Resource amResource=Resources.createResource(0,0);
    when(amResourceRequest.getCapability()).thenReturn(amResource);
    when(rmApp.getAMResourceRequests()).thenReturn(Collections.singletonList(amResourceRequest));
    Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
    when(spyRMContext.getRMApps()).thenReturn(spyApps);
    RMAppAttempt rmAppAttempt=mock(RMAppAttempt.class);
    when(rmApp.getRMAppAttempt((ApplicationAttemptId)Matchers.any())).thenReturn(rmAppAttempt);
    when(rmApp.getCurrentAppAttempt()).thenReturn(rmAppAttempt);
    Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
    Mockito.doReturn(true).when(spyApps).containsKey((ApplicationId)Matchers.any());
    Priority priority_1=TestUtils.createMockPriority(1);
    final ApplicationAttemptId appAttemptId_0_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0_0=new FiCaSchedulerApp(appAttemptId_0_0,user_0,queue,queue.getAbstractUsersManager(),spyRMContext);
    queue.submitApplicationAttempt(app_0_0,user_0);
    List<ResourceRequest> app_0_0_requests=new ArrayList<ResourceRequest>();
    app_0_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
    app_0_0.updateResourceRequests(app_0_0_requests);
    queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    Resource expectedHeadroom=Resources.createResource((int)(0.5 * 0.9 * 160* 0.25) * GB,1);
    assertEquals(expectedHeadroom,app_0_0.getHeadroom());
    final ApplicationAttemptId appAttemptId_0_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_0_1=new FiCaSchedulerApp(appAttemptId_0_1,user_0,queue,queue.getAbstractUsersManager(),spyRMContext);
    queue.submitApplicationAttempt(app_0_1,user_0);
    List<ResourceRequest> app_0_1_requests=new ArrayList<ResourceRequest>();
    app_0_1_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
    app_0_1.updateResourceRequests(app_0_1_requests);
    app_0_1_requests.clear();
    app_0_1_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory,"y"));
    app_0_1.updateResourceRequests(app_0_1_requests);
    queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    queue.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    assertEquals(expectedHeadroom,app_0_0.getHeadroom());
    Resource expectedHeadroomWithReqInY=Resources.add(Resources.createResource((int)(0.25 * 0.5 * 160) * GB,1),expectedHeadroom);
    assertEquals(expectedHeadroomWithReqInY,app_0_1.getHeadroom());
    final ApplicationAttemptId appAttemptId_1_0=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_1_0=new FiCaSchedulerApp(appAttemptId_1_0,user_1,queue,queue.getAbstractUsersManager(),spyRMContext);
    queue.submitApplicationAttempt(app_1_0,user_1);
    List<ResourceRequest> app_1_0_requests=new ArrayList<ResourceRequest>();
    app_1_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
    app_1_0.updateResourceRequests(app_1_0_requests);
    app_1_0_requests.clear();
    app_1_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory,"y"));
    app_1_0.updateResourceRequests(app_1_0_requests);
    queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    expectedHeadroom=Resources.createResource((int)(0.5 * 0.9 * 160* 0.25) * GB,1);
    expectedHeadroomWithReqInY=Resources.add(Resources.createResource((int)(0.25 * 0.5 * 160) * GB,1),expectedHeadroom);
    assertEquals(expectedHeadroom,app_0_0.getHeadroom());
    assertEquals(expectedHeadroomWithReqInY,app_0_1.getHeadroom());
    assertEquals(expectedHeadroomWithReqInY,app_1_0.getHeadroom());
  }
}
