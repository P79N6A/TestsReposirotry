public class TestAppReportFetcher {
  static ApplicationHistoryProtocol historyManager;
  static Configuration conf=new Configuration();
  private static ApplicationClientProtocol appManager;
  private static AppReportFetcher fetcher;
  private final String appNotFoundExceptionMsg="APP NOT FOUND";
  @After public void cleanUp(){
    historyManager=null;
    appManager=null;
    fetcher=null;
  }
  public void testHelper(  boolean isAHSEnabled) throws YarnException, IOException {
    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,isAHSEnabled);
    appManager=Mockito.mock(ApplicationClientProtocol.class);
    Mockito.when(appManager.getApplicationReport(Mockito.any(GetApplicationReportRequest.class))).thenThrow(new ApplicationNotFoundException(appNotFoundExceptionMsg));
    fetcher=new AppReportFetcherForTest(conf,appManager);
    ApplicationId appId=ApplicationId.newInstance(0,0);
    fetcher.getApplicationReport(appId);
  }
  @Test public void testFetchReportAHSEnabled() throws YarnException, IOException {
    testHelper(true);
    Mockito.verify(historyManager,Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));
    Mockito.verify(appManager,Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));
  }
  @Test public void testFetchReportAHSDisabled() throws YarnException, IOException {
    try {
      testHelper(false);
    }
 catch (    ApplicationNotFoundException e) {
      Assert.assertTrue(e.getMessage() == appNotFoundExceptionMsg);
    }
    Mockito.verify(appManager,Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));
    if (historyManager != null) {
      Assert.fail("HistoryManager should be null as AHS is disabled");
    }
  }
static class AppReportFetcherForTest extends AppReportFetcher {
    public AppReportFetcherForTest(    Configuration conf,    ApplicationClientProtocol acp){
      super(conf,acp);
    }
    @Override protected ApplicationHistoryProtocol getAHSProxy(    Configuration conf) throws IOException {
      GetApplicationReportResponse resp=Mockito.mock(GetApplicationReportResponse.class);
      historyManager=Mockito.mock(ApplicationHistoryProtocol.class);
      try {
        Mockito.when(historyManager.getApplicationReport(Mockito.any(GetApplicationReportRequest.class))).thenReturn(resp);
      }
 catch (      YarnException e) {
        e.printStackTrace();
      }
      return historyManager;
    }
  }
}
