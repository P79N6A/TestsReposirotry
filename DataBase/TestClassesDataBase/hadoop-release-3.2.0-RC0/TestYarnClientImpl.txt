/** 
 * This class is to test class  {@link YarnClientImpl ).}
 */
public class TestYarnClientImpl extends ParameterizedSchedulerTestBase {
  public TestYarnClientImpl(  SchedulerType type) throws IOException {
    super(type);
  }
  @Before public void setup(){
    QueueMetrics.clearQueueMetrics();
    DefaultMetricsSystem.setMiniClusterMode(true);
  }
  @Test public void testStartWithTimelineV15(){
    Configuration conf=getConf();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,1.5f);
    YarnClientImpl client=(YarnClientImpl)YarnClient.createYarnClient();
    client.init(conf);
    client.start();
    client.stop();
  }
  @Test public void testAsyncAPIPollTimeout(){
    testAsyncAPIPollTimeoutHelper(null,false);
    testAsyncAPIPollTimeoutHelper(0L,true);
    testAsyncAPIPollTimeoutHelper(1L,true);
  }
  private void testAsyncAPIPollTimeoutHelper(  Long valueForTimeout,  boolean expectedTimeoutEnforcement){
    YarnClientImpl client=new YarnClientImpl();
    try {
      Configuration conf=getConf();
      if (valueForTimeout != null) {
        conf.setLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,valueForTimeout);
      }
      client.init(conf);
      Assert.assertEquals(expectedTimeoutEnforcement,client.enforceAsyncAPITimeout());
    }
  finally {
      IOUtils.closeQuietly(client);
    }
  }
  @Test public void testBestEffortTimelineDelegationToken() throws Exception {
    Configuration conf=getConf();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS,conf);
    YarnClientImpl client=spy(new YarnClientImpl(){
      @Override TimelineClient createTimelineClient() throws IOException, YarnException {
        timelineClient=mock(TimelineClient.class);
        when(timelineClient.getDelegationToken(any(String.class))).thenThrow(new RuntimeException("Best effort test exception"));
        return timelineClient;
      }
    }
);
    client.init(conf);
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,true);
    client.serviceInit(conf);
    client.getTimelineDelegationToken();
    try {
      conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,false);
      client.serviceInit(conf);
      client.getTimelineDelegationToken();
      Assert.fail("Get delegation token should have thrown an exception");
    }
 catch (    IOException e) {
    }
  }
  @Test public void testAutomaticTimelineDelegationTokenLoading() throws Exception {
    Configuration conf=getConf();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS,conf);
    TimelineDelegationTokenIdentifier timelineDT=new TimelineDelegationTokenIdentifier();
    final Token<TimelineDelegationTokenIdentifier> dToken=new Token<>(timelineDT.getBytes(),new byte[0],timelineDT.getKind(),new Text());
    YarnClientImpl client=spy(new YarnClientImpl(){
      @Override TimelineClient createTimelineClient() throws IOException, YarnException {
        timelineClient=mock(TimelineClient.class);
        when(timelineClient.getDelegationToken(any(String.class))).thenReturn(dToken);
        return timelineClient;
      }
      @Override protected void serviceStart(){
        rmClient=mock(ApplicationClientProtocol.class);
      }
      @Override protected void serviceStop(){
      }
      @Override public ApplicationReport getApplicationReport(      ApplicationId appId){
        ApplicationReport report=mock(ApplicationReport.class);
        when(report.getYarnApplicationState()).thenReturn(YarnApplicationState.RUNNING);
        return report;
      }
      @Override public boolean isSecurityEnabled(){
        return true;
      }
    }
);
    client.init(conf);
    client.start();
    try {
      for (int i=0; i < 2; ++i) {
        ApplicationSubmissionContext context=mock(ApplicationSubmissionContext.class);
        ApplicationId applicationId=ApplicationId.newInstance(0,i + 1);
        when(context.getApplicationId()).thenReturn(applicationId);
        DataOutputBuffer dob=new DataOutputBuffer();
        Credentials credentials=new Credentials();
        if (i == 0) {
          credentials.addToken(client.timelineService,dToken);
        }
        credentials.writeTokenStorageToStream(dob);
        ByteBuffer tokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
        ContainerLaunchContext clc=ContainerLaunchContext.newInstance(null,null,null,null,tokens,null);
        when(context.getAMContainerSpec()).thenReturn(clc);
        client.submitApplication(context);
        if (i == 0) {
          verify(client,never()).getTimelineDelegationToken();
        }
        credentials=new Credentials();
        DataInputByteBuffer dibb=new DataInputByteBuffer();
        tokens=clc.getTokens();
        if (tokens != null) {
          dibb.reset(tokens);
          credentials.readTokenStorageStream(dibb);
          tokens.rewind();
        }
        Collection<Token<? extends TokenIdentifier>> dTokens=credentials.getAllTokens();
        Assert.assertEquals(1,dTokens.size());
        Assert.assertEquals(dToken,dTokens.iterator().next());
      }
    }
  finally {
      client.stop();
    }
  }
  @Test public void testParseTimelineDelegationTokenRenewer(){
    YarnClientImpl client=(YarnClientImpl)YarnClient.createYarnClient();
    Configuration conf=getConf();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    conf.set(YarnConfiguration.RM_PRINCIPAL,"rm/_HOST@EXAMPLE.COM");
    conf.set(YarnConfiguration.RM_ADDRESS,"localhost:8188");
    try {
      client.init(conf);
      client.start();
      Assert.assertEquals("rm/localhost@EXAMPLE.COM",client.timelineDTRenewer);
    }
  finally {
      client.stop();
    }
  }
}
