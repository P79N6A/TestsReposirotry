public static class SyntheticReplicaAccessor extends ReplicaAccessor {
  final long length;
  final byte contents[];
  final SyntheticReplicaAccessorBuilder builder;
  long totalRead=0;
  int numCloses=0;
  String error="";
  String prefix="";
  final long genstamp;
  SyntheticReplicaAccessor(  SyntheticReplicaAccessorBuilder builder){
    this.length=builder.visibleLength;
    this.contents=DFSTestUtil.calculateFileContentsFromSeed(SEED,Ints.checkedCast(length));
    this.builder=builder;
    this.genstamp=builder.genstamp;
    String uuid=this.builder.conf.get(SYNTHETIC_BLOCK_READER_TEST_UUID_KEY);
    LinkedList<SyntheticReplicaAccessor> accessorsList=accessors.get(uuid);
    if (accessorsList == null) {
      accessorsList=new LinkedList<SyntheticReplicaAccessor>();
    }
    accessorsList.add(this);
    accessors.put(uuid,accessorsList);
  }
  @Override public synchronized int read(  long pos,  byte[] buf,  int off,  int len) throws IOException {
    if (pos > Integer.MAX_VALUE) {
      return 0;
    }
 else     if (pos < 0) {
      addError("Attempted to read from a location that was less " + "than 0 at " + pos);
      return 0;
    }
    int i=off, nread=0, ipos;
    for (ipos=(int)pos; (ipos < contents.length) && (nread < len); ipos++) {
      buf[i++]=contents[ipos];
      nread++;
      totalRead++;
      LOG.info("ipos = " + ipos + ", contents.length = "+ contents.length+ ", nread = "+ nread+ ", len = "+ len);
    }
    if ((nread == 0) && (ipos >= contents.length)) {
      return -1;
    }
    return nread;
  }
  @Override public synchronized int read(  long pos,  ByteBuffer buf) throws IOException {
    if (pos > Integer.MAX_VALUE) {
      return 0;
    }
 else     if (pos < 0) {
      addError("Attempted to read from a location that was less " + "than 0 at " + pos);
      return 0;
    }
    int i=0, nread=0, ipos;
    for (ipos=(int)pos; ipos < contents.length; ipos++) {
      try {
        buf.put(contents[ipos]);
      }
 catch (      BufferOverflowException bos) {
        break;
      }
      nread++;
      totalRead++;
    }
    if ((nread == 0) && (ipos >= contents.length)) {
      return -1;
    }
    return nread;
  }
  @Override public synchronized void close() throws IOException {
    numCloses++;
  }
  @Override public boolean isLocal(){
    return true;
  }
  @Override public boolean isShortCircuit(){
    return true;
  }
  @Override public int getNetworkDistance(){
    return 0;
  }
  synchronized String getError(){
    return error;
  }
  long getGenerationStamp(){
    return genstamp;
  }
  synchronized void addError(  String text){
    LOG.error("SyntheticReplicaAccessor error: " + text);
    error=error + prefix + text;
    prefix="; ";
  }
}
