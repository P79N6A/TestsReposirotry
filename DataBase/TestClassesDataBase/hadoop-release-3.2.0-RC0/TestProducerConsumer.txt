public class TestProducerConsumer {
public class CopyProcessor implements WorkRequestProcessor<Integer,Integer> {
    public WorkReport<Integer> processItem(    WorkRequest<Integer> workRequest){
      Integer item=new Integer(workRequest.getItem());
      return new WorkReport<Integer>(item,0,true);
    }
  }
public class ExceptionProcessor implements WorkRequestProcessor<Integer,Integer> {
    @SuppressWarnings("null") public WorkReport<Integer> processItem(    WorkRequest<Integer> workRequest){
      try {
        Integer item=null;
        item.intValue();
        return new WorkReport<Integer>(item,0,true);
      }
 catch (      Exception e) {
        Integer item=new Integer(workRequest.getItem());
        return new WorkReport<Integer>(item,1,false,e);
      }
    }
  }
  @Test public void testSimpleProducerConsumer(){
    ProducerConsumer<Integer,Integer> worker=new ProducerConsumer<Integer,Integer>(1);
    worker.addWorker(new CopyProcessor());
    worker.put(new WorkRequest<Integer>(42));
    try {
      WorkReport<Integer> report=worker.take();
      Assert.assertEquals(42,report.getItem().intValue());
    }
 catch (    InterruptedException ie) {
      Assert.assertTrue(false);
    }
    worker.shutdown();
  }
  @Test public void testMultipleProducerConsumer(){
    ProducerConsumer<Integer,Integer> workers=new ProducerConsumer<Integer,Integer>(10);
    for (int i=0; i < 10; i++) {
      workers.addWorker(new CopyProcessor());
    }
    int sum=0;
    int numRequests=2000;
    for (int i=0; i < numRequests; i++) {
      workers.put(new WorkRequest<Integer>(i + 42));
      sum+=i + 42;
    }
    int numReports=0;
    while (workers.getWorkCnt() > 0) {
      WorkReport<Integer> report=workers.blockingTake();
      sum-=report.getItem().intValue();
      numReports++;
    }
    Assert.assertEquals(0,sum);
    Assert.assertEquals(numRequests,numReports);
    workers.shutdown();
  }
  @Test public void testExceptionProducerConsumer(){
    ProducerConsumer<Integer,Integer> worker=new ProducerConsumer<Integer,Integer>(1);
    worker.addWorker(new ExceptionProcessor());
    worker.put(new WorkRequest<Integer>(42));
    try {
      WorkReport<Integer> report=worker.take();
      Assert.assertEquals(42,report.getItem().intValue());
      Assert.assertFalse(report.getSuccess());
      Assert.assertNotNull(report.getException());
    }
 catch (    InterruptedException ie) {
      Assert.assertTrue(false);
    }
    worker.shutdown();
  }
  @Test public void testSimpleProducerConsumerShutdown() throws InterruptedException, TimeoutException {
    ProducerConsumer<Integer,Integer> worker=new ProducerConsumer<Integer,Integer>(1);
    worker.addWorker(new CopyProcessor());
    worker.shutdown();
    GenericTestUtils.waitForThreadTermination("pool-.*-thread.*",100,10000);
  }
  @Test(timeout=10000) public void testMultipleProducerConsumerShutdown() throws InterruptedException, TimeoutException {
    int numWorkers=10;
    final ProducerConsumer<Integer,Integer> worker=new ProducerConsumer<Integer,Integer>(numWorkers);
    for (int i=0; i < numWorkers; i++) {
      worker.addWorker(new CopyProcessor());
    }
class SourceThread extends Thread {
      public void run(){
        while (true) {
          try {
            worker.put(new WorkRequest<Integer>(42));
            Thread.sleep(1);
          }
 catch (          InterruptedException ie) {
            return;
          }
        }
      }
    }
    ;
    SourceThread source=new SourceThread();
    source.start();
class SinkThread extends Thread {
      public void run(){
        try {
          while (true) {
            WorkReport<Integer> report=worker.take();
            Assert.assertEquals(42,report.getItem().intValue());
          }
        }
 catch (        InterruptedException ie) {
          return;
        }
      }
    }
    ;
    SinkThread sink=new SinkThread();
    sink.start();
    Thread.sleep(1000);
    source.interrupt();
    while (worker.hasWork()) {
      Thread.sleep(1);
    }
    worker.shutdown();
    GenericTestUtils.waitForThreadTermination("pool-.*-thread.*",100,10000);
    sink.interrupt();
    source.join();
    sink.join();
  }
}
