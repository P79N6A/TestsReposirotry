/** 
 * Test class for the various static methods in {@link org.apache.hadoop.yarn.api.resource.PlacementConstraints}.
 */
public class TestPlacementConstraints {
  @Test public void testNodeAffinityToTag(){
    AbstractConstraint constraintExpr=targetIn(NODE,allocationTag("hbase-m"));
    SingleConstraint sConstraint=(SingleConstraint)constraintExpr;
    Assert.assertEquals(NODE,sConstraint.getScope());
    Assert.assertEquals(1,sConstraint.getMinCardinality());
    Assert.assertEquals(Integer.MAX_VALUE,sConstraint.getMaxCardinality());
    Assert.assertEquals(1,sConstraint.getTargetExpressions().size());
    TargetExpression tExpr=sConstraint.getTargetExpressions().iterator().next();
    Assert.assertEquals(AllocationTagNamespaceType.SELF.toString(),tExpr.getTargetKey());
    Assert.assertEquals(TargetType.ALLOCATION_TAG,tExpr.getTargetType());
    Assert.assertEquals(1,tExpr.getTargetValues().size());
    Assert.assertEquals("hbase-m",tExpr.getTargetValues().iterator().next());
    PlacementConstraint constraint=PlacementConstraints.build(constraintExpr);
    Assert.assertNotNull(constraint.getConstraintExpr());
  }
  @Test public void testNodeAntiAffinityToAttribute(){
    AbstractConstraint constraintExpr=targetNotIn(NODE,nodeAttribute("java","1.8"));
    SingleConstraint sConstraint=(SingleConstraint)constraintExpr;
    Assert.assertEquals(NODE,sConstraint.getScope());
    Assert.assertEquals(0,sConstraint.getMinCardinality());
    Assert.assertEquals(0,sConstraint.getMaxCardinality());
    Assert.assertEquals(1,sConstraint.getTargetExpressions().size());
    TargetExpression tExpr=sConstraint.getTargetExpressions().iterator().next();
    Assert.assertEquals("java",tExpr.getTargetKey());
    Assert.assertEquals(TargetType.NODE_ATTRIBUTE,tExpr.getTargetType());
    Assert.assertEquals(1,tExpr.getTargetValues().size());
    Assert.assertEquals("1.8",tExpr.getTargetValues().iterator().next());
  }
  @Test public void testAndConstraint(){
    AbstractConstraint constraintExpr=and(targetIn(RACK,allocationTag("spark")),maxCardinality(NODE,3,"spark"),targetCardinality(RACK,2,10,allocationTag("zk")));
    And andExpr=(And)constraintExpr;
    Assert.assertEquals(3,andExpr.getChildren().size());
    SingleConstraint sConstr=(SingleConstraint)andExpr.getChildren().get(0);
    TargetExpression tExpr=sConstr.getTargetExpressions().iterator().next();
    Assert.assertEquals("spark",tExpr.getTargetValues().iterator().next());
    sConstr=(SingleConstraint)andExpr.getChildren().get(1);
    Assert.assertEquals(0,sConstr.getMinCardinality());
    Assert.assertEquals(3,sConstr.getMaxCardinality());
    sConstr=(SingleConstraint)andExpr.getChildren().get(2);
    Assert.assertEquals(2,sConstr.getMinCardinality());
    Assert.assertEquals(10,sConstr.getMaxCardinality());
  }
}
