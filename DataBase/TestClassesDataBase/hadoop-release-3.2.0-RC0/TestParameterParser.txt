public class TestParameterParser {
  private static final String LOGICAL_NAME="minidfs";
  @Test public void testDeserializeHAToken() throws IOException {
    Configuration conf=DFSTestUtil.newHAConfiguration(LOGICAL_NAME);
    final Token<DelegationTokenIdentifier> token=new Token<DelegationTokenIdentifier>();
    QueryStringDecoder decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + "/?" + NamenodeAddressParam.NAME+ "="+ LOGICAL_NAME+ "&"+ DelegationParam.NAME+ "="+ token.encodeToUrlString());
    ParameterParser testParser=new ParameterParser(decoder,conf);
    final Token<DelegationTokenIdentifier> tok2=testParser.delegationToken();
    Assert.assertTrue(HAUtilClient.isTokenForLogicalUri(tok2));
  }
  @Test public void testDecodePath(){
    final String ESCAPED_PATH="/test%25+1%26%3Dtest?op=OPEN&foo=bar";
    final String EXPECTED_PATH="/test%+1&=test";
    Configuration conf=new Configuration();
    QueryStringDecoder decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + ESCAPED_PATH);
    ParameterParser testParser=new ParameterParser(decoder,conf);
    Assert.assertEquals(EXPECTED_PATH,testParser.path());
  }
  @Test public void testCreateFlag(){
    final String path="/test1?createflag=append,sync_block";
    Configuration conf=new Configuration();
    QueryStringDecoder decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path);
    ParameterParser testParser=new ParameterParser(decoder,conf);
    EnumSet<CreateFlag> actual=testParser.createFlag();
    EnumSet<CreateFlag> expected=EnumSet.of(CreateFlag.APPEND,CreateFlag.SYNC_BLOCK);
    Assert.assertEquals(expected.toString(),actual.toString());
    final String path1="/test1?createflag=append";
    decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path1);
    testParser=new ParameterParser(decoder,conf);
    actual=testParser.createFlag();
    expected=EnumSet.of(CreateFlag.APPEND);
    Assert.assertEquals(expected,actual);
    final String path2="/test1";
    decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path2);
    testParser=new ParameterParser(decoder,conf);
    actual=testParser.createFlag();
    Assert.assertEquals(0,actual.size());
    final String path3="/test1?createflag=create,overwrite";
    decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path3);
    testParser=new ParameterParser(decoder,conf);
    actual=testParser.createFlag();
    expected=EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE);
    Assert.assertEquals(expected.toString(),actual.toString());
    final String path4="/test1?createflag=";
    decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path4);
    testParser=new ParameterParser(decoder,conf);
    actual=testParser.createFlag();
    Assert.assertEquals(0,actual.size());
    try {
      final String path5="/test1?createflag=overwrite,";
      decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path5);
      testParser=new ParameterParser(decoder,conf);
      actual=testParser.createFlag();
      fail("It should throw Illegal Argument Exception");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("No enum constant",e);
    }
    try {
      final String path6="/test1?createflag=,";
      decoder=new QueryStringDecoder(WebHdfsHandler.WEBHDFS_PREFIX + path6);
      testParser=new ParameterParser(decoder,conf);
      actual=testParser.createFlag();
      fail("It should throw Illegal Argument Exception");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("No enum constant",e);
    }
  }
  @Test public void testOffset() throws IOException {
    final long X=42;
    long offset=new OffsetParam(Long.toString(X)).getOffset();
    Assert.assertEquals("OffsetParam: ",X,offset);
    offset=new OffsetParam((String)null).getOffset();
    Assert.assertEquals("OffsetParam with null should have defaulted to 0",0,offset);
    try {
      offset=new OffsetParam("abc").getValue();
      Assert.fail("OffsetParam with nondigit value should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
}
