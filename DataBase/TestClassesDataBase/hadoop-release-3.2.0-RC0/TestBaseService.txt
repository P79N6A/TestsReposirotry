public class TestBaseService extends HTestCase {
public static class MyService extends BaseService {
    static Boolean INIT;
    public MyService(){
      super("myservice");
    }
    @Override protected void init() throws ServiceException {
      INIT=true;
    }
    @Override public Class getInterface(){
      return null;
    }
  }
  @Test public void baseService() throws Exception {
    BaseService service=new MyService();
    assertNull(service.getInterface());
    assertEquals(service.getPrefix(),"myservice");
    assertEquals(service.getServiceDependencies().length,0);
    Server server=Mockito.mock(Server.class);
    Configuration conf=new Configuration(false);
    conf.set("server.myservice.foo","FOO");
    conf.set("server.myservice1.bar","BAR");
    Mockito.when(server.getConfig()).thenReturn(conf);
    Mockito.when(server.getPrefixedName("myservice.foo")).thenReturn("server.myservice.foo");
    Mockito.when(server.getPrefixedName("myservice.")).thenReturn("server.myservice.");
    service.init(server);
    assertEquals(service.getPrefixedName("foo"),"server.myservice.foo");
    assertEquals(service.getServiceConfig().size(),1);
    assertEquals(service.getServiceConfig().get("foo"),"FOO");
    assertTrue(MyService.INIT);
  }
}
