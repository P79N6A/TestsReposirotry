private class TestMRApp extends MRAppMaster {
  ContainerAllocator allocator;
  boolean testIsLastAMRetry=false;
  JobStateInternal jobStateInternal;
  boolean crushUnregistration=false;
  public TestMRApp(  ApplicationAttemptId applicationAttemptId,  ContainerAllocator allocator){
    super(applicationAttemptId,ContainerId.newContainerId(applicationAttemptId,1),"testhost",2222,3333,System.currentTimeMillis());
    this.allocator=allocator;
    this.successfullyUnregistered.set(true);
  }
  public TestMRApp(  ApplicationAttemptId applicationAttemptId,  ContainerAllocator allocator,  JobStateInternal jobStateInternal,  int maxAppAttempts){
    this(applicationAttemptId,allocator);
    this.jobStateInternal=jobStateInternal;
  }
  @Override protected FileSystem getFileSystem(  Configuration conf){
    return fs;
  }
  @Override protected ContainerAllocator createContainerAllocator(  final ClientService clientService,  final AppContext context){
    if (allocator == null) {
      if (crushUnregistration) {
        return new CustomContainerAllocator(context);
      }
 else {
        return super.createContainerAllocator(clientService,context);
      }
    }
    return allocator;
  }
  @Override protected Job createJob(  Configuration conf,  JobStateInternal forcedState,  String diagnostic){
    JobImpl jobImpl=mock(JobImpl.class);
    when(jobImpl.getInternalState()).thenReturn(this.jobStateInternal);
    when(jobImpl.getAllCounters()).thenReturn(new Counters());
    JobID jobID=JobID.forName("job_1234567890000_0001");
    JobId jobId=TypeConverter.toYarn(jobID);
    when(jobImpl.getID()).thenReturn(jobId);
    ((AppContext)getContext()).getAllJobs().put(jobImpl.getID(),jobImpl);
    return jobImpl;
  }
  @Override public void serviceStart() throws Exception {
    super.serviceStart();
    DefaultMetricsSystem.shutdown();
  }
  @Override public void notifyIsLastAMRetry(  boolean isLastAMRetry){
    testIsLastAMRetry=isLastAMRetry;
    super.notifyIsLastAMRetry(isLastAMRetry);
  }
  @Override public RMHeartbeatHandler getRMHeartbeatHandler(){
    return getStubbedHeartbeatHandler(getContext());
  }
  @Override protected void sysexit(){
  }
  @Override public Configuration getConfig(){
    return conf;
  }
  @Override protected void initJobCredentialsAndUGI(  Configuration conf){
  }
  public boolean getTestIsLastAMRetry(){
    return testIsLastAMRetry;
  }
private class CustomContainerAllocator extends RMCommunicator implements ContainerAllocator {
    public CustomContainerAllocator(    AppContext context){
      super(null,context);
    }
    @Override public void serviceInit(    Configuration conf){
    }
    @Override public void serviceStart(){
    }
    @Override public void serviceStop(){
      unregister();
    }
    @Override protected void doUnregistration() throws YarnException, IOException, InterruptedException {
      throw new YarnException("test exception");
    }
    @Override protected void heartbeat() throws Exception {
    }
    @Override public void handle(    ContainerAllocatorEvent event){
    }
  }
}
