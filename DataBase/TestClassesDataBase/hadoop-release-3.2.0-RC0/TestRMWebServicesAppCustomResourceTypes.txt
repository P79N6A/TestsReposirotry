/** 
 * This test verifies that custom resource types are correctly serialized to XML and JSON when HTTP GET request is sent to the resource: ws/v1/cluster/apps.
 */
public class TestRMWebServicesAppCustomResourceTypes extends JerseyTestBase {
  private static MockRM rm;
  private static final int CONTAINER_MB=1024;
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      bind(JAXBContextResolver.class);
      bind(RMWebServices.class);
      bind(GenericExceptionHandler.class);
      Configuration conf=new Configuration();
      conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
      conf.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
      initResourceTypes(conf);
      rm=new MockRM(conf);
      bind(ResourceManager.class).toInstance(rm);
      serve("/*").with(GuiceContainer.class);
    }
    private void initResourceTypes(    Configuration conf){
      conf.set(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,CustomResourceTypesConfigurationProvider.class.getName());
      ResourceUtils.resetResourceTypes(conf);
    }
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    createInjectorForWebServletModule();
  }
  private void createInjectorForWebServletModule(){
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestRMWebServicesAppCustomResourceTypes(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.yarn.server.resourcemanager.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  private WebResource getWebResourcePathForApp(  RMApp app1,  WebResource r){
    return r.path("ws").path("v1").path("cluster").path("apps").path(String.valueOf(app1.getApplicationId().toString()));
  }
  @Test public void testRunningAppXml() throws Exception {
    rm.start();
    MockNM amNodeManager=rm.registerNode("127.0.0.1:1234",2048);
    RMApp app1=rm.submitApp(CONTAINER_MB,"testwordcount","user1");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm,amNodeManager);
    am1.allocate("*",2048,1,new ArrayList<>());
    amNodeManager.nodeHeartbeat(true);
    WebResource r=resource();
    WebResource path=getWebResourcePathForApp(app1,r);
    ClientResponse response=path.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    XmlCustomResourceTypeTestCase testCase=new XmlCustomResourceTypeTestCase(path,new BufferedClientResponse(response));
    testCase.verify(document -> {
      NodeList appArray=document.getElementsByTagName("app");
      assertEquals("incorrect number of app elements",1,appArray.getLength());
      verifyAppsXML(appArray,app1,rm);
    }
);
    rm.stop();
  }
  @Test public void testRunningAppJson() throws Exception {
    rm.start();
    MockNM amNodeManager=rm.registerNode("127.0.0.1:1234",2048);
    RMApp app1=rm.submitApp(CONTAINER_MB,"testwordcount","user1");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm,amNodeManager);
    am1.allocate("*",2048,1,new ArrayList<>());
    amNodeManager.nodeHeartbeat(true);
    WebResource r=resource();
    WebResource path=getWebResourcePathForApp(app1,r);
    ClientResponse response=path.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    JsonCustomResourceTypeTestcase testCase=new JsonCustomResourceTypeTestcase(path,new BufferedClientResponse(response));
    testCase.verify(json -> {
      try {
        assertEquals("incorrect number of app elements",1,json.length());
        JSONObject app=json.getJSONObject("app");
        verifyAppInfoJson(app,app1,rm);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
);
    rm.stop();
  }
}
