/** 
 * Tests timeline authentication filter based security for timeline service v2.
 */
@RunWith(Parameterized.class) public class TestTimelineAuthFilterForV2 {
  private static final String FOO_USER="foo";
  private static final String HTTP_USER="HTTP";
  private static final File TEST_ROOT_DIR=new File(System.getProperty("test.build.dir","target" + File.separator + "test-dir"),UUID.randomUUID().toString());
  private static final String BASEDIR=System.getProperty("test.build.dir","target/test-dir") + "/" + TestTimelineAuthFilterForV2.class.getSimpleName();
  private static File httpSpnegoKeytabFile=new File(KerberosTestUtils.getKeytabFile());
  private static String httpSpnegoPrincipal=KerberosTestUtils.getServerPrincipal();
  @Parameterized.Parameters public static Collection<Object[]> params(){
    return Arrays.asList(new Object[][]{{false,true},{false,false},{true,false},{true,true}});
  }
  private static MiniKdc testMiniKDC;
  private static String keystoresDir;
  private static String sslConfDir;
  private static Configuration conf;
  private static UserGroupInformation nonKerberosUser;
static {
    try {
      nonKerberosUser=UserGroupInformation.getCurrentUser();
    }
 catch (    IOException e) {
    }
  }
  private boolean withSsl;
  private boolean withKerberosLogin;
  private NodeTimelineCollectorManager collectorManager;
  private PerNodeTimelineCollectorsAuxService auxService;
  public TestTimelineAuthFilterForV2(  boolean withSsl,  boolean withKerberosLogin){
    this.withSsl=withSsl;
    this.withKerberosLogin=withKerberosLogin;
  }
  @BeforeClass public static void setup(){
    try {
      testMiniKDC=new MiniKdc(MiniKdc.createConf(),TEST_ROOT_DIR);
      testMiniKDC.start();
      testMiniKDC.createPrincipal(httpSpnegoKeytabFile,HTTP_USER + "/localhost");
    }
 catch (    Exception e) {
      fail("Couldn't setup MiniKDC.");
    }
    try {
      conf=new Configuration(false);
      conf.setStrings(TimelineAuthenticationFilterInitializer.PREFIX + "type","kerberos");
      conf.set(TimelineAuthenticationFilterInitializer.PREFIX + KerberosAuthenticationHandler.PRINCIPAL,httpSpnegoPrincipal);
      conf.set(TimelineAuthenticationFilterInitializer.PREFIX + KerberosAuthenticationHandler.KEYTAB,httpSpnegoKeytabFile.getAbsolutePath());
      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
      conf.set(YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL,httpSpnegoPrincipal);
      conf.set(YarnConfiguration.TIMELINE_SERVICE_KEYTAB,httpSpnegoKeytabFile.getAbsolutePath());
      conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
      conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,2.0f);
      conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS,FileSystemTimelineWriterImpl.class,TimelineWriter.class);
      conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST,"localhost");
      conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT,TEST_ROOT_DIR.getAbsolutePath());
      conf.set("hadoop.proxyuser.HTTP.hosts","*");
      conf.set("hadoop.proxyuser.HTTP.users",FOO_USER);
      UserGroupInformation.setConfiguration(conf);
    }
 catch (    Exception e) {
      fail("Couldn't setup TimelineServer V2.");
    }
  }
  @Before public void initialize() throws Exception {
    if (withSsl) {
      conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
      File base=new File(BASEDIR);
      FileUtil.fullyDelete(base);
      base.mkdirs();
      keystoresDir=new File(BASEDIR).getAbsolutePath();
      sslConfDir=KeyStoreTestUtil.getClasspathDir(TestTimelineAuthFilterForV2.class);
      KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
    }
 else {
      conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,HttpConfig.Policy.HTTP_ONLY.name());
    }
    if (!withKerberosLogin) {
      conf.setLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL,100);
      conf.setLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME,4000);
    }
    UserGroupInformation.setConfiguration(conf);
    collectorManager=new DummyNodeTimelineCollectorManager();
    auxService=PerNodeTimelineCollectorsAuxService.launchServer(new String[0],collectorManager,conf);
    if (withKerberosLogin) {
      SecurityUtil.login(conf,YarnConfiguration.TIMELINE_SERVICE_KEYTAB,YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL,"localhost");
    }
    ApplicationId appId=ApplicationId.newInstance(0,1);
    auxService.addApplicationIfAbsent(appId,UserGroupInformation.getCurrentUser().getUserName());
    if (!withKerberosLogin) {
      AppLevelTimelineCollector collector=(AppLevelTimelineCollector)collectorManager.get(appId);
      Token<TimelineDelegationTokenIdentifier> token=collector.getDelegationTokenForApp();
      token.setService(new Text("localhost" + token.getService().toString().substring(token.getService().toString().indexOf(":"))));
      UserGroupInformation.getCurrentUser().addToken(token);
    }
  }
  private TimelineV2Client createTimelineClientForUGI(  ApplicationId appId){
    TimelineV2Client client=TimelineV2Client.createTimelineClient(ApplicationId.newInstance(0,1));
    String restBindAddr=collectorManager.getRestServerBindAddress();
    String addr="localhost" + restBindAddr.substring(restBindAddr.indexOf(":"));
    client.setTimelineCollectorInfo(CollectorInfo.newInstance(addr));
    client.init(conf);
    client.start();
    return client;
  }
  @AfterClass public static void tearDown() throws Exception {
    if (testMiniKDC != null) {
      testMiniKDC.stop();
    }
    FileUtil.fullyDelete(TEST_ROOT_DIR);
  }
  @After public void destroy() throws Exception {
    if (auxService != null) {
      auxService.stop();
    }
    if (withSsl) {
      KeyStoreTestUtil.cleanupSSLConfig(keystoresDir,sslConfDir);
      FileUtil.fullyDelete(new File(BASEDIR));
    }
    if (withKerberosLogin) {
      UserGroupInformation.getCurrentUser().logoutUserFromKeytab();
    }
    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(nonKerberosUser.getUserName()));
  }
  private static TimelineEntity createEntity(  String id,  String type){
    TimelineEntity entityToStore=new TimelineEntity();
    entityToStore.setId(id);
    entityToStore.setType(type);
    entityToStore.setCreatedTime(0L);
    return entityToStore;
  }
  private static void verifyEntity(  File entityTypeDir,  String id,  String type) throws IOException {
    File entityFile=new File(entityTypeDir,id + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);
    assertTrue(entityFile.exists());
    TimelineEntity entity=readEntityFile(entityFile);
    assertNotNull(entity);
    assertEquals(id,entity.getId());
    assertEquals(type,entity.getType());
  }
  private static TimelineEntity readEntityFile(  File entityFile) throws IOException {
    BufferedReader reader=null;
    String strLine;
    try {
      reader=new BufferedReader(new FileReader(entityFile));
      while ((strLine=reader.readLine()) != null) {
        if (strLine.trim().length() > 0) {
          return FileSystemTimelineReaderImpl.getTimelineRecordFromJSON(strLine.trim(),TimelineEntity.class);
        }
      }
      return null;
    }
  finally {
      reader.close();
    }
  }
  private void publishAndVerifyEntity(  ApplicationId appId,  File entityTypeDir,  String entityType,  int numEntities) throws Exception {
    TimelineV2Client client=createTimelineClientForUGI(appId);
    try {
      client.putEntities(createEntity("entity1",entityType));
      assertEquals(numEntities,entityTypeDir.listFiles().length);
      verifyEntity(entityTypeDir,"entity1",entityType);
      client.putEntitiesAsync(createEntity("entity2",entityType));
    }
  finally {
      client.stop();
    }
  }
  private boolean publishWithRetries(  ApplicationId appId,  File entityTypeDir,  String entityType,  int numEntities) throws Exception {
    for (int i=0; i < 10; i++) {
      try {
        publishAndVerifyEntity(appId,entityTypeDir,entityType,numEntities);
      }
 catch (      YarnException e) {
        Thread.sleep(50);
        continue;
      }
      return true;
    }
    return false;
  }
  @Test public void testPutTimelineEntities() throws Exception {
    final String entityType="dummy_type";
    ApplicationId appId=ApplicationId.newInstance(0,1);
    File entityTypeDir=new File(TEST_ROOT_DIR.getAbsolutePath() + File.separator + "entities"+ File.separator+ YarnConfiguration.DEFAULT_RM_CLUSTER_ID+ File.separator+ UserGroupInformation.getCurrentUser().getUserName()+ File.separator+ "test_flow_name"+ File.separator+ "test_flow_version"+ File.separator+ "1"+ File.separator+ appId.toString()+ File.separator+ entityType);
    try {
      if (withKerberosLogin) {
        KerberosTestUtils.doAs(HTTP_USER + "/localhost",new Callable<Void>(){
          @Override public Void call() throws Exception {
            publishAndVerifyEntity(appId,entityTypeDir,entityType,1);
            return null;
          }
        }
);
      }
 else {
        assertTrue("Entities should have been published successfully.",publishWithRetries(appId,entityTypeDir,entityType,1));
        AppLevelTimelineCollector collector=(AppLevelTimelineCollector)collectorManager.get(appId);
        Token<TimelineDelegationTokenIdentifier> token=collector.getDelegationTokenForApp();
        assertNotNull(token);
        Thread.sleep(1000);
        assertTrue("Entities should have been published successfully.",publishWithRetries(appId,entityTypeDir,entityType,2));
        assertNotNull(collector);
        verify(collectorManager.getTokenManagerService(),atLeastOnce()).renewToken(eq(collector.getDelegationTokenForApp()),any(String.class));
        Thread.sleep(3000);
        for (int i=0; i < 40; i++) {
          if (!token.equals(collector.getDelegationTokenForApp())) {
            break;
          }
          Thread.sleep(50);
        }
        assertNotEquals("Token should have been regenerated.",token,collector.getDelegationTokenForApp());
        Thread.sleep(1000);
        try {
          publishAndVerifyEntity(appId,entityTypeDir,entityType,2);
          fail("Exception should have been thrown due to Invalid Token.");
        }
 catch (        YarnException e) {
          assertTrue("Exception thrown should have been due to Invalid Token.",e.getCause().getMessage().contains("InvalidToken"));
        }
        Token<TimelineDelegationTokenIdentifier> regeneratedToken=collector.getDelegationTokenForApp();
        regeneratedToken.setService(new Text("localhost" + regeneratedToken.getService().toString().substring(regeneratedToken.getService().toString().indexOf(":"))));
        UserGroupInformation.getCurrentUser().addToken(regeneratedToken);
        assertTrue("Entities should have been published successfully.",publishWithRetries(appId,entityTypeDir,entityType,2));
        verify(collectorManager.getTokenManagerService(),times(2)).generateToken(any(UserGroupInformation.class),any(String.class));
        assertEquals(1,((DummyNodeTimelineCollectorManager)collectorManager).getTokenExpiredCnt());
      }
      for (int i=0; i < 50; i++) {
        if (entityTypeDir.listFiles().length == 2) {
          break;
        }
        Thread.sleep(50);
      }
      assertEquals(2,entityTypeDir.listFiles().length);
      verifyEntity(entityTypeDir,"entity2",entityType);
      AppLevelTimelineCollector collector=(AppLevelTimelineCollector)collectorManager.get(appId);
      assertNotNull(collector);
      auxService.removeApplication(appId);
      verify(collectorManager.getTokenManagerService()).cancelToken(eq(collector.getDelegationTokenForApp()),any(String.class));
    }
  finally {
      FileUtils.deleteQuietly(entityTypeDir);
    }
  }
private static class DummyNodeTimelineCollectorManager extends NodeTimelineCollectorManager {
    private volatile int tokenExpiredCnt=0;
    DummyNodeTimelineCollectorManager(){
      super();
    }
    private int getTokenExpiredCnt(){
      return tokenExpiredCnt;
    }
    @Override protected TimelineV2DelegationTokenSecretManagerService createTokenManagerService(){
      return spy(new TimelineV2DelegationTokenSecretManagerService(){
        @Override protected AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> createTimelineDelegationTokenSecretManager(        long secretKeyInterval,        long tokenMaxLifetime,        long tokenRenewInterval,        long tokenRemovalScanInterval){
          return spy(new TimelineV2DelegationTokenSecretManager(secretKeyInterval,tokenMaxLifetime,tokenRenewInterval,2000L){
            @Override protected void logExpireToken(            TimelineDelegationTokenIdentifier ident) throws IOException {
              tokenExpiredCnt++;
            }
          }
);
        }
      }
);
    }
    @Override protected CollectorNodemanagerProtocol getNMCollectorService(){
      CollectorNodemanagerProtocol protocol=mock(CollectorNodemanagerProtocol.class);
      try {
        GetTimelineCollectorContextResponse response=GetTimelineCollectorContextResponse.newInstance(UserGroupInformation.getCurrentUser().getUserName(),"test_flow_name","test_flow_version",1L);
        when(protocol.getTimelineCollectorContext(any(GetTimelineCollectorContextRequest.class))).thenReturn(response);
      }
 catch (      YarnException|IOException e) {
        fail();
      }
      return protocol;
    }
  }
}
