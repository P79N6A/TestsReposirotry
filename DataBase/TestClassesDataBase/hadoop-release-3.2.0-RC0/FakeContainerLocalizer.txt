class FakeContainerLocalizer extends ContainerLocalizer {
  private FakeLongDownload downloader;
  FakeContainerLocalizer(  FileContext lfs,  String user,  String appId,  String localizerId,  List<Path> localDirs,  RecordFactory recordFactory) throws IOException {
    super(lfs,user,appId,localizerId,localDirs,recordFactory);
  }
  FakeLongDownload getDownloader(){
    return downloader;
  }
  @Override Callable<Path> download(  Path path,  LocalResource rsrc,  UserGroupInformation ugi) throws IOException {
    downloader=new FakeLongDownload(Mockito.mock(FileContext.class),ugi,new Configuration(),path,rsrc);
    return downloader;
  }
class FakeLongDownload extends ContainerLocalizer.FSDownloadWrapper {
    private final Path localPath;
    private Shell.ShellCommandExecutor shexc;
    FakeLongDownload(    FileContext files,    UserGroupInformation ugi,    Configuration conf,    Path destDirPath,    LocalResource resource){
      super(files,ugi,conf,destDirPath,resource);
      this.localPath=new Path("file:///localcache");
    }
    Shell.ShellCommandExecutor getShexc(){
      return shexc;
    }
    @Override public Path doDownloadCall() throws IOException {
      String sleepCommand="sleep 30";
      String[] shellCmd={"bash","-c",sleepCommand};
      shexc=new Shell.ShellCommandExecutor(shellCmd);
      shexc.execute();
      return localPath;
    }
  }
}
