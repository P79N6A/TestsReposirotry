public class TestQueueMappings {
  private static final Log LOG=LogFactory.getLog(TestQueueMappings.class);
  private static final String Q1="q1";
  private static final String Q2="q2";
  private final static String Q1_PATH=CapacitySchedulerConfiguration.ROOT + "." + Q1;
  private final static String Q2_PATH=CapacitySchedulerConfiguration.ROOT + "." + Q2;
  private CapacityScheduler cs;
  private YarnConfiguration conf;
  @Before public void setup(){
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    setupQueueConfiguration(csConf);
    conf=new YarnConfiguration(csConf);
    cs=new CapacityScheduler();
    RMContext rmContext=TestUtils.getMockRMContext();
    cs.setConf(conf);
    cs.setRMContext(rmContext);
    cs.init(conf);
    cs.start();
  }
  private void setupQueueConfiguration(  CapacitySchedulerConfiguration conf){
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{Q1,Q2});
    conf.setCapacity(Q1_PATH,10);
    conf.setCapacity(Q2_PATH,90);
    LOG.info("Setup top-level queues q1 and q2");
  }
  @Test public void testQueueMappingSpecifyingNotExistedQueue(){
    conf.set(CapacitySchedulerConfiguration.QUEUE_MAPPING,"u:user:non_existent_queue");
    boolean fail=false;
    try {
      cs.reinitialize(conf,null);
    }
 catch (    IOException ioex) {
      fail=true;
    }
    Assert.assertTrue("queue initialization failed for non-existent q",fail);
  }
  @Test public void testQueueMappingTrimSpaces() throws IOException {
    conf.set(CapacitySchedulerConfiguration.QUEUE_MAPPING,"    u : a : " + Q1);
    cs.reinitialize(conf,null);
    checkQMapping(new QueueMapping(MappingType.USER,"a",Q1));
  }
  @Test(timeout=60000) public void testQueueMappingParsingInvalidCases() throws Exception {
    checkInvalidQMapping(conf,cs,"x:a:b","invalid specifier");
    checkInvalidQMapping(conf,cs,"u:a","no queue specified");
    checkInvalidQMapping(conf,cs,"g:a","no queue specified");
    checkInvalidQMapping(conf,cs,"u:a:b,g:a","multiple mappings with invalid mapping");
    checkInvalidQMapping(conf,cs,"u:a:b,g:a:d:e","too many path segments");
    checkInvalidQMapping(conf,cs,"u::","empty source and queue");
    checkInvalidQMapping(conf,cs,"u:","missing source missing queue");
    checkInvalidQMapping(conf,cs,"u:a:","empty source missing q");
  }
  private void checkInvalidQMapping(  YarnConfiguration conf,  CapacityScheduler cs,  String mapping,  String reason) throws IOException {
    boolean fail=false;
    try {
      conf.set(CapacitySchedulerConfiguration.QUEUE_MAPPING,mapping);
      cs.reinitialize(conf,null);
    }
 catch (    IOException ex) {
      fail=true;
    }
    Assert.assertTrue("invalid mapping did not throw exception for " + reason,fail);
  }
  private void checkQMapping(  QueueMapping expected) throws IOException {
    UserGroupMappingPlacementRule rule=(UserGroupMappingPlacementRule)cs.getRMContext().getQueuePlacementManager().getPlacementRules().get(0);
    QueueMapping queueMapping=rule.getQueueMappings().get(0);
    Assert.assertEquals(queueMapping,expected);
  }
}
