public class TestServiceAuthorization {
  private static final String ACL_CONFIG="test.protocol.acl";
  private static final String ACL_CONFIG1="test.protocol1.acl";
  private static final String ADDRESS="0.0.0.0";
  private static final String HOST_CONFIG="test.protocol.hosts";
  private static final String BLOCKED_HOST_CONFIG="test.protocol.hosts.blocked";
  private static final String AUTHORIZED_IP="1.2.3.4";
  private static final String UNAUTHORIZED_IP="1.2.3.5";
  private static final String IP_RANGE="10.222.0.0/16,10.113.221.221";
public interface TestProtocol1 extends TestProtocol {
  }
private static class TestPolicyProvider extends PolicyProvider {
    @Override public Service[] getServices(){
      return new Service[]{new Service(ACL_CONFIG,TestProtocol.class),new Service(ACL_CONFIG1,TestProtocol1.class)};
    }
  }
  @Test public void testDefaultAcl(){
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    conf.set(ACL_CONFIG,"user1 group1");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    AccessControlList acl=serviceAuthorizationManager.getProtocolsAcls(TestProtocol.class);
    assertEquals("user1 group1",acl.getAclString());
    acl=serviceAuthorizationManager.getProtocolsAcls(TestProtocol1.class);
    assertEquals(AccessControlList.WILDCARD_ACL_VALUE,acl.getAclString());
    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,"user2 group2");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    acl=serviceAuthorizationManager.getProtocolsAcls(TestProtocol.class);
    assertEquals("user1 group1",acl.getAclString());
    acl=serviceAuthorizationManager.getProtocolsAcls(TestProtocol1.class);
    assertEquals("user2 group2",acl.getAclString());
  }
  @Test public void testBlockedAcl() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    conf.set(ACL_CONFIG,"user1 group1");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"drwho2 group3");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"drwho group3");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
      fail();
    }
 catch (    AuthorizationException e) {
    }
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"drwho2 group3");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"drwho2 group2");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
      fail();
    }
 catch (    AuthorizationException e) {
    }
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
  }
  @Test public void testDefaultBlockedAcl() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol1.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL,"user2 group2");
    conf.set(ACL_CONFIG + ServiceAuthorizationManager.BLOCKED,"user2");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(ADDRESS));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol1.class,conf,InetAddress.getByName(ADDRESS));
      fail();
    }
 catch (    AuthorizationException e) {
    }
  }
  @Test public void testMachineList() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    conf.set(HOST_CONFIG,"1.2.3.4");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(AUTHORIZED_IP));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(UNAUTHORIZED_IP));
      fail();
    }
 catch (    AuthorizationException e) {
    }
  }
  @Test public void testDefaultMachineList() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(UNAUTHORIZED_IP));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set("security.service.authorization.default.hosts",IP_RANGE);
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName(UNAUTHORIZED_IP));
      fail();
    }
 catch (    AuthorizationException e) {
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("10.222.0.0"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
  }
  @Test public void testBlockedMachineList() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("10.222.0.0"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set(BLOCKED_HOST_CONFIG,IP_RANGE);
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("10.222.0.0"));
      fail();
    }
 catch (    AuthorizationException e) {
    }
    conf.set(BLOCKED_HOST_CONFIG,"");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("10.222.0.0"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
  }
  @Test public void testDefaultBlockedMachineList() throws UnknownHostException {
    UserGroupInformation drwho=UserGroupInformation.createUserForTesting("drwho@EXAMPLE.COM",new String[]{"group1","group2"});
    ServiceAuthorizationManager serviceAuthorizationManager=new ServiceAuthorizationManager();
    Configuration conf=new Configuration();
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol1.class,conf,InetAddress.getByName("10.222.0.0"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    conf.set("security.service.authorization.default.hosts.blocked",IP_RANGE);
    conf.set(BLOCKED_HOST_CONFIG,"1.2.3.4");
    serviceAuthorizationManager.refresh(conf,new TestPolicyProvider());
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("10.222.0.0"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol.class,conf,InetAddress.getByName("1.2.3.4"));
      fail();
    }
 catch (    AuthorizationException e) {
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol1.class,conf,InetAddress.getByName("1.2.3.4"));
    }
 catch (    AuthorizationException e) {
      fail();
    }
    try {
      serviceAuthorizationManager.authorize(drwho,TestProtocol1.class,conf,InetAddress.getByName("10.222.0.0"));
      fail();
    }
 catch (    AuthorizationException e) {
    }
  }
}
