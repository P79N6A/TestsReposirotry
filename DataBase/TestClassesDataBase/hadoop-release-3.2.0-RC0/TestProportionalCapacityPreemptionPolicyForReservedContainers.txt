public class TestProportionalCapacityPreemptionPolicyForReservedContainers extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_SELECT_CANDIDATES_FOR_RESERVED_CONTAINERS,true);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testPreemptionForSimpleReservedContainer() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 100 9 9]);" + "-a(=[50 100 90 0]);" + "-b(=[50 100 10 9 9])";
    String appsConfig="a\t" + "(1,1,n1,,45,false)" + "(1,1,n2,,45,false);"+ "b\t"+ "(1,1,n1,,1,false)"+ "(1,9,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testUseReservedAndFifoSelectorTogether() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 100 70 10]);" + "-a(=[30 100 45 0]);" + "-b(=[70 100 55 70 50])";
    String appsConfig="a\t" + "(1,1,n2,,35,false)" + "(1,1,n1,,10,false);"+ "b\t"+ "(1,1,n2,,5,false)"+ "(1,50,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(15)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(5)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n2",1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testReservedSelectorSkipsAMContainer() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 100 70 10]);" + "-a(=[30 100 45 0]);" + "-b(=[70 100 55 70 50])";
    String appsConfig="a\t" + "(1,1,n1,,10,false)" + "(1,1,n2,,35,false);"+ "b\t"+ "(1,1,n2,,5,false)"+ "(1,50,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(15)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(15)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n2",1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testPreemptionForReservedContainerRespectGuaranteedResource() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 100 9 9]);" + "-a(=[85 100 90 0]);" + "-b(=[15 100 10 9 9])";
    String appsConfig="a\t" + "(1,1,n1,,45,false)" + "(1,1,n2,,45,false);"+ "b\t"+ "(1,1,n1,,1,false)"+ "(1,9,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testPreemptionForReservedContainerWhichHasAvailableResource() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 99 9 9]);" + "-a(=[50 100 90 0]);" + "-b(=[50 100 9 9 9])";
    String appsConfig="a\t" + "(1,1,n1,,45,false)" + "(1,1,n2,,45,false);"+ "b\t"+ "(1,9,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n2",1))));
  }
  @Test public void testPreemptionForReservedContainerWhichHasNondivisibleAvailableResource() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=50;" + "n2= res=50";
    String queuesConfig="root(=[100 100 99 9 9]);" + "-a(=[50 100 90 0]);" + "-b(=[50 100 9 9 9])";
    String appsConfig="a\t" + "(1,2,n1,,24,false)" + "(1,2,n2,,23,false);"+ "b\t"+ "(1,9,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n2",1))));
  }
  @Test public void testPreemptionForReservedContainerRespectAvailableResources() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=25;" + "n2= res=25;" + "n3= res=25;"+ "n4= res=25;";
    String queuesConfig="root(=[100 100 89 9 9]);" + "-a(=[50 100 80 0]);" + "-b(=[50 100 9 9 9])";
    String appsConfig="a\t" + "(1,2,n1,,10,false)" + "(1,2,n2,,10,false)"+ "(1,2,n3,,10,false)"+ "(1,2,n4,,10,false);"+ "b\t"+ "(1,9,n1,,1,true)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n1",1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n2",1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n3",1))));
    verify(mDisp,times(0)).handle(argThat(new IsPreemptionRequestForQueueAndNode(getAppAttemptId(1),"a",NodeId.newInstance("n4",1))));
  }
}
