private static class MockJobForAcls implements Job {
  private Job mockJob;
  private Configuration conf;
  private Map<JobACL,AccessControlList> jobAcls;
  private JobACLsManager aclsMgr;
  public MockJobForAcls(  Job mockJob,  Configuration conf){
    this.mockJob=mockJob;
    this.conf=conf;
    AccessControlList viewAcl=new AccessControlList(FRIENDLY_USER);
    this.jobAcls=new HashMap<JobACL,AccessControlList>();
    this.jobAcls.put(JobACL.VIEW_JOB,viewAcl);
    this.aclsMgr=new JobACLsManager(conf);
  }
  @Override public JobId getID(){
    return mockJob.getID();
  }
  @Override public String getName(){
    return mockJob.getName();
  }
  @Override public JobState getState(){
    return mockJob.getState();
  }
  @Override public JobReport getReport(){
    return mockJob.getReport();
  }
  @Override public Counters getAllCounters(){
    return mockJob.getAllCounters();
  }
  @Override public Map<TaskId,Task> getTasks(){
    return mockJob.getTasks();
  }
  @Override public Map<TaskId,Task> getTasks(  TaskType taskType){
    return mockJob.getTasks(taskType);
  }
  @Override public Task getTask(  TaskId taskID){
    return mockJob.getTask(taskID);
  }
  @Override public List<String> getDiagnostics(){
    return mockJob.getDiagnostics();
  }
  @Override public int getTotalMaps(){
    return mockJob.getTotalMaps();
  }
  @Override public int getTotalReduces(){
    return mockJob.getTotalReduces();
  }
  @Override public int getCompletedMaps(){
    return mockJob.getCompletedMaps();
  }
  @Override public int getCompletedReduces(){
    return mockJob.getCompletedReduces();
  }
  @Override public float getProgress(){
    return mockJob.getProgress();
  }
  @Override public boolean isUber(){
    return mockJob.isUber();
  }
  @Override public String getUserName(){
    return mockJob.getUserName();
  }
  @Override public String getQueueName(){
    return mockJob.getQueueName();
  }
  @Override public Path getConfFile(){
    return new Path("/some/path/to/conf");
  }
  @Override public Configuration loadConfFile() throws IOException {
    return conf;
  }
  @Override public Map<JobACL,AccessControlList> getJobACLs(){
    return jobAcls;
  }
  @Override public TaskAttemptCompletionEvent[] getTaskAttemptCompletionEvents(  int fromEventId,  int maxEvents){
    return mockJob.getTaskAttemptCompletionEvents(fromEventId,maxEvents);
  }
  @Override public TaskCompletionEvent[] getMapAttemptCompletionEvents(  int startIndex,  int maxEvents){
    return mockJob.getMapAttemptCompletionEvents(startIndex,maxEvents);
  }
  @Override public List<AMInfo> getAMInfos(){
    return mockJob.getAMInfos();
  }
  @Override public boolean checkAccess(  UserGroupInformation callerUGI,  JobACL jobOperation){
    return aclsMgr.checkAccess(callerUGI,jobOperation,this.getUserName(),jobAcls.get(jobOperation));
  }
  @Override public void setQueueName(  String queueName){
  }
  @Override public void setJobPriority(  Priority priority){
  }
  @Override public int getFailedMaps(){
    return mockJob.getFailedMaps();
  }
  @Override public int getFailedReduces(){
    return mockJob.getFailedReduces();
  }
  @Override public int getKilledMaps(){
    return mockJob.getKilledMaps();
  }
  @Override public int getKilledReduces(){
    return mockJob.getKilledReduces();
  }
}
