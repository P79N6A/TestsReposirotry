public class TestChRootedFs {
  FileContextTestHelper fileContextTestHelper=new FileContextTestHelper();
  FileContext fc;
  FileContext fcTarget;
  Path chrootedTo;
  @Before public void setUp() throws Exception {
    fcTarget=FileContext.getLocalFSFileContext();
    chrootedTo=fileContextTestHelper.getAbsoluteTestRootPath(fcTarget);
    fcTarget.delete(chrootedTo,true);
    fcTarget.mkdir(chrootedTo,FileContext.DEFAULT_PERM,true);
    Configuration conf=new Configuration();
    fc=FileContext.getFileContext(new ChRootedFs(fcTarget.getDefaultFileSystem(),chrootedTo),conf);
  }
  @After public void tearDown() throws Exception {
    fcTarget.delete(chrootedTo,true);
  }
  @Test public void testBasicPaths(){
    URI uri=fc.getDefaultFileSystem().getUri();
    Assert.assertEquals(chrootedTo.toUri(),uri);
    Assert.assertEquals(fc.makeQualified(new Path(System.getProperty("user.home"))),fc.getWorkingDirectory());
    Assert.assertEquals(fc.makeQualified(new Path(System.getProperty("user.home"))),fc.getHomeDirectory());
    Assert.assertEquals(new Path("/foo/bar").makeQualified(FsConstants.LOCAL_FS_URI,null),fc.makeQualified(new Path("/foo/bar")));
  }
  /** 
 * Test modify operations (create, mkdir, delete, etc)  Verify the operation via chrootedfs (ie fc) and *also* via the target file system (ie fclocal) that has been chrooted.
 */
  @Test public void testCreateDelete() throws IOException {
    fileContextTestHelper.createFileNonRecursive(fc,"/foo");
    Assert.assertTrue(isFile(fc,new Path("/foo")));
    Assert.assertTrue(isFile(fcTarget,new Path(chrootedTo,"foo")));
    fileContextTestHelper.createFile(fc,"/newDir/foo");
    Assert.assertTrue(isFile(fc,new Path("/newDir/foo")));
    Assert.assertTrue(isFile(fcTarget,new Path(chrootedTo,"newDir/foo")));
    Assert.assertTrue(fc.delete(new Path("/newDir/foo"),false));
    Assert.assertFalse(exists(fc,new Path("/newDir/foo")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"newDir/foo")));
    fileContextTestHelper.createFile(fc,"/newDir/newDir2/foo");
    Assert.assertTrue(isFile(fc,new Path("/newDir/newDir2/foo")));
    Assert.assertTrue(isFile(fcTarget,new Path(chrootedTo,"newDir/newDir2/foo")));
    Assert.assertTrue(fc.delete(new Path("/newDir/newDir2/foo"),false));
    Assert.assertFalse(exists(fc,new Path("/newDir/newDir2/foo")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"newDir/newDir2/foo")));
  }
  @Test public void testMkdirDelete() throws IOException {
    fc.mkdir(fileContextTestHelper.getTestRootPath(fc,"/dirX"),FileContext.DEFAULT_PERM,false);
    Assert.assertTrue(isDir(fc,new Path("/dirX")));
    Assert.assertTrue(isDir(fcTarget,new Path(chrootedTo,"dirX")));
    fc.mkdir(fileContextTestHelper.getTestRootPath(fc,"/dirX/dirY"),FileContext.DEFAULT_PERM,false);
    Assert.assertTrue(isDir(fc,new Path("/dirX/dirY")));
    Assert.assertTrue(isDir(fcTarget,new Path(chrootedTo,"dirX/dirY")));
    Assert.assertTrue(fc.delete(new Path("/dirX/dirY"),false));
    Assert.assertFalse(exists(fc,new Path("/dirX/dirY")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"dirX/dirY")));
    Assert.assertTrue(fc.delete(new Path("/dirX"),false));
    Assert.assertFalse(exists(fc,new Path("/dirX")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"dirX")));
  }
  @Test public void testRename() throws IOException {
    fileContextTestHelper.createFile(fc,"/newDir/foo");
    fc.rename(new Path("/newDir/foo"),new Path("/newDir/fooBar"));
    Assert.assertFalse(exists(fc,new Path("/newDir/foo")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"newDir/foo")));
    Assert.assertTrue(isFile(fc,fileContextTestHelper.getTestRootPath(fc,"/newDir/fooBar")));
    Assert.assertTrue(isFile(fcTarget,new Path(chrootedTo,"newDir/fooBar")));
    fc.mkdir(new Path("/newDir/dirFoo"),FileContext.DEFAULT_PERM,false);
    fc.rename(new Path("/newDir/dirFoo"),new Path("/newDir/dirFooBar"));
    Assert.assertFalse(exists(fc,new Path("/newDir/dirFoo")));
    Assert.assertFalse(exists(fcTarget,new Path(chrootedTo,"newDir/dirFoo")));
    Assert.assertTrue(isDir(fc,fileContextTestHelper.getTestRootPath(fc,"/newDir/dirFooBar")));
    Assert.assertTrue(isDir(fcTarget,new Path(chrootedTo,"newDir/dirFooBar")));
  }
  /** 
 * We would have liked renames across file system to fail but  Unfortunately there is not way to distinguish the two file systems 
 * @throws IOException
 */
  @Test public void testRenameAcrossFs() throws IOException {
    fc.mkdir(new Path("/newDir/dirFoo"),FileContext.DEFAULT_PERM,true);
    fc.rename(new Path("/newDir/dirFoo"),new Path("file:///dirFooBar"));
    FileContextTestHelper.isDir(fc,new Path("/dirFooBar"));
  }
  @Test public void testList() throws IOException {
    FileStatus fs=fc.getFileStatus(new Path("/"));
    Assert.assertTrue(fs.isDirectory());
    Assert.assertEquals(fs.getPath(),chrootedTo);
    FileStatus[] dirPaths=fc.util().listStatus(new Path("/"));
    Assert.assertEquals(0,dirPaths.length);
    fileContextTestHelper.createFileNonRecursive(fc,"/foo");
    fileContextTestHelper.createFileNonRecursive(fc,"/bar");
    fc.mkdir(new Path("/dirX"),FileContext.DEFAULT_PERM,false);
    fc.mkdir(fileContextTestHelper.getTestRootPath(fc,"/dirY"),FileContext.DEFAULT_PERM,false);
    fc.mkdir(new Path("/dirX/dirXX"),FileContext.DEFAULT_PERM,false);
    dirPaths=fc.util().listStatus(new Path("/"));
    Assert.assertEquals(4,dirPaths.length);
    fs=fileContextTestHelper.containsPath(fcTarget,"foo",dirPaths);
    Assert.assertNotNull(fs);
    Assert.assertTrue(fs.isFile());
    fs=fileContextTestHelper.containsPath(fcTarget,"bar",dirPaths);
    Assert.assertNotNull(fs);
    Assert.assertTrue(fs.isFile());
    fs=fileContextTestHelper.containsPath(fcTarget,"dirX",dirPaths);
    Assert.assertNotNull(fs);
    Assert.assertTrue(fs.isDirectory());
    fs=fileContextTestHelper.containsPath(fcTarget,"dirY",dirPaths);
    Assert.assertNotNull(fs);
    Assert.assertTrue(fs.isDirectory());
  }
  @Test public void testWorkingDirectory() throws Exception {
    fc.mkdir(new Path("/testWd"),FileContext.DEFAULT_PERM,false);
    Path workDir=new Path("/testWd");
    Path fqWd=fc.makeQualified(workDir);
    fc.setWorkingDirectory(workDir);
    Assert.assertEquals(fqWd,fc.getWorkingDirectory());
    fc.setWorkingDirectory(new Path("."));
    Assert.assertEquals(fqWd,fc.getWorkingDirectory());
    fc.setWorkingDirectory(new Path(".."));
    Assert.assertEquals(fqWd.getParent(),fc.getWorkingDirectory());
    workDir=new Path("/testWd");
    fqWd=fc.makeQualified(workDir);
    fc.setWorkingDirectory(workDir);
    Assert.assertEquals(fqWd,fc.getWorkingDirectory());
    Path relativeDir=new Path("existingDir1");
    Path absoluteDir=new Path(workDir,"existingDir1");
    fc.mkdir(absoluteDir,FileContext.DEFAULT_PERM,true);
    Path fqAbsoluteDir=fc.makeQualified(absoluteDir);
    fc.setWorkingDirectory(relativeDir);
    Assert.assertEquals(fqAbsoluteDir,fc.getWorkingDirectory());
    absoluteDir=new Path("/test/existingDir2");
    fqAbsoluteDir=fc.makeQualified(absoluteDir);
    fc.mkdir(absoluteDir,FileContext.DEFAULT_PERM,true);
    fc.setWorkingDirectory(absoluteDir);
    Assert.assertEquals(fqAbsoluteDir,fc.getWorkingDirectory());
    Path absolutePath=new Path(absoluteDir,"foo");
    fc.create(absolutePath,EnumSet.of(CreateFlag.CREATE)).close();
    fc.open(new Path("foo")).close();
    fc.mkdir(new Path("newDir"),FileContext.DEFAULT_PERM,true);
    Assert.assertTrue(isDir(fc,new Path(absoluteDir,"newDir")));
    absoluteDir=fileContextTestHelper.getTestRootPath(fc,"nonexistingPath");
    try {
      fc.setWorkingDirectory(absoluteDir);
      Assert.fail("cd to non existing dir should have failed");
    }
 catch (    Exception e) {
    }
    final String LOCAL_FS_ROOT_URI="file:///tmp/test";
    absoluteDir=new Path(LOCAL_FS_ROOT_URI + "/existingDir");
    fc.mkdir(absoluteDir,FileContext.DEFAULT_PERM,true);
    fc.setWorkingDirectory(absoluteDir);
    Assert.assertEquals(absoluteDir,fc.getWorkingDirectory());
  }
  @Test public void testResolvePath() throws IOException {
    Assert.assertEquals(chrootedTo,fc.getDefaultFileSystem().resolvePath(new Path("/")));
    fileContextTestHelper.createFile(fc,"/foo");
    Assert.assertEquals(new Path(chrootedTo,"foo"),fc.getDefaultFileSystem().resolvePath(new Path("/foo")));
  }
  @Test(expected=FileNotFoundException.class) public void testResolvePathNonExisting() throws IOException {
    fc.getDefaultFileSystem().resolvePath(new Path("/nonExisting"));
  }
  @Test public void testIsValidNameValidInBaseFs() throws Exception {
    AbstractFileSystem baseFs=Mockito.spy(fc.getDefaultFileSystem());
    ChRootedFs chRootedFs=new ChRootedFs(baseFs,new Path("/chroot"));
    Mockito.doReturn(true).when(baseFs).isValidName(Mockito.anyString());
    Assert.assertTrue(chRootedFs.isValidName("/test"));
    Mockito.verify(baseFs).isValidName("/chroot/test");
  }
  @Test public void testIsValidNameInvalidInBaseFs() throws Exception {
    AbstractFileSystem baseFs=Mockito.spy(fc.getDefaultFileSystem());
    ChRootedFs chRootedFs=new ChRootedFs(baseFs,new Path("/chroot"));
    Mockito.doReturn(false).when(baseFs).isValidName(Mockito.anyString());
    Assert.assertFalse(chRootedFs.isValidName("/test"));
    Mockito.verify(baseFs).isValidName("/chroot/test");
  }
  @Test(timeout=30000) public void testCreateSnapshot() throws Exception {
    Path snapRootPath=new Path("/snapPath");
    Path chRootedSnapRootPath=new Path(Path.getPathWithoutSchemeAndAuthority(chrootedTo),"snapPath");
    AbstractFileSystem baseFs=Mockito.spy(fc.getDefaultFileSystem());
    ChRootedFs chRootedFs=new ChRootedFs(baseFs,chrootedTo);
    Mockito.doReturn(snapRootPath).when(baseFs).createSnapshot(chRootedSnapRootPath,"snap1");
    Assert.assertEquals(snapRootPath,chRootedFs.createSnapshot(snapRootPath,"snap1"));
    Mockito.verify(baseFs).createSnapshot(chRootedSnapRootPath,"snap1");
  }
  @Test(timeout=30000) public void testDeleteSnapshot() throws Exception {
    Path snapRootPath=new Path("/snapPath");
    Path chRootedSnapRootPath=new Path(Path.getPathWithoutSchemeAndAuthority(chrootedTo),"snapPath");
    AbstractFileSystem baseFs=Mockito.spy(fc.getDefaultFileSystem());
    ChRootedFs chRootedFs=new ChRootedFs(baseFs,chrootedTo);
    Mockito.doNothing().when(baseFs).deleteSnapshot(chRootedSnapRootPath,"snap1");
    chRootedFs.deleteSnapshot(snapRootPath,"snap1");
    Mockito.verify(baseFs).deleteSnapshot(chRootedSnapRootPath,"snap1");
  }
  @Test(timeout=30000) public void testRenameSnapshot() throws Exception {
    Path snapRootPath=new Path("/snapPath");
    Path chRootedSnapRootPath=new Path(Path.getPathWithoutSchemeAndAuthority(chrootedTo),"snapPath");
    AbstractFileSystem baseFs=Mockito.spy(fc.getDefaultFileSystem());
    ChRootedFs chRootedFs=new ChRootedFs(baseFs,chrootedTo);
    Mockito.doNothing().when(baseFs).renameSnapshot(chRootedSnapRootPath,"snapOldName","snapNewName");
    chRootedFs.renameSnapshot(snapRootPath,"snapOldName","snapNewName");
    Mockito.verify(baseFs).renameSnapshot(chRootedSnapRootPath,"snapOldName","snapNewName");
  }
}
