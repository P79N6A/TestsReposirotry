static class SimpleElement implements IntrusiveCollection.Element {
  private Map<IntrusiveCollection<? extends Element>,Element> prevMap, nextMap;
  private Map<IntrusiveCollection<? extends Element>,Boolean> isMemberMap;
  public SimpleElement(){
    prevMap=new HashMap<>();
    nextMap=new HashMap<>();
    isMemberMap=new HashMap<>();
  }
  @Override public void insertInternal(  IntrusiveCollection<? extends Element> list,  Element prev,  Element next){
    isMemberMap.put(list,true);
    prevMap.put(list,prev);
    nextMap.put(list,next);
  }
  @Override public void setPrev(  IntrusiveCollection<? extends Element> list,  Element prev){
    prevMap.put(list,prev);
  }
  @Override public void setNext(  IntrusiveCollection<? extends Element> list,  Element next){
    nextMap.put(list,next);
  }
  @Override public void removeInternal(  IntrusiveCollection<? extends Element> list){
    prevMap.remove(list);
    nextMap.remove(list);
    isMemberMap.remove(list);
  }
  @Override public Element getPrev(  IntrusiveCollection<? extends Element> list){
    return prevMap.getOrDefault(list,null);
  }
  @Override public Element getNext(  IntrusiveCollection<? extends Element> list){
    return nextMap.getOrDefault(list,null);
  }
  @Override public boolean isInList(  IntrusiveCollection<? extends Element> list){
    return isMemberMap.getOrDefault(list,false);
  }
}
