/** 
 * Unit tests for BoundedByteArrayOutputStream 
 */
public class TestBoundedByteArrayOutputStream {
  private static final int SIZE=1024;
  private static final byte[] INPUT=new byte[SIZE];
static {
    new Random().nextBytes(INPUT);
  }
  @Test public void testBoundedStream() throws IOException {
    BoundedByteArrayOutputStream stream=new BoundedByteArrayOutputStream(SIZE);
    stream.write(INPUT,0,SIZE);
    assertTrue("Array Contents Mismatch",Arrays.equals(INPUT,stream.getBuffer()));
    boolean caughtException=false;
    try {
      stream.write(INPUT[0]);
    }
 catch (    Exception e) {
      caughtException=true;
    }
    assertTrue("Writing beyond limit did not throw an exception",caughtException);
    stream.reset();
    assertTrue("Limit did not get reset correctly",(stream.getLimit() == SIZE));
    stream.write(INPUT,0,SIZE);
    assertTrue("Array Contents Mismatch",Arrays.equals(INPUT,stream.getBuffer()));
    caughtException=false;
    try {
      stream.write(INPUT[0]);
    }
 catch (    Exception e) {
      caughtException=true;
    }
    stream.reset(SIZE - 1);
    assertTrue("Limit did not get reset correctly",(stream.getLimit() == SIZE - 1));
    caughtException=false;
    try {
      stream.write(INPUT,0,SIZE);
    }
 catch (    Exception e) {
      caughtException=true;
    }
    assertTrue("Writing beyond limit did not throw an exception",caughtException);
  }
static class ResettableBoundedByteArrayOutputStream extends BoundedByteArrayOutputStream {
    public ResettableBoundedByteArrayOutputStream(    int capacity){
      super(capacity);
    }
    public void resetBuffer(    byte[] buf,    int offset,    int length){
      super.resetBuffer(buf,offset,length);
    }
  }
  @Test public void testResetBuffer() throws IOException {
    ResettableBoundedByteArrayOutputStream stream=new ResettableBoundedByteArrayOutputStream(SIZE);
    stream.write(INPUT,0,SIZE);
    assertTrue("Array Contents Mismatch",Arrays.equals(INPUT,stream.getBuffer()));
    boolean caughtException=false;
    try {
      stream.write(INPUT[0]);
    }
 catch (    Exception e) {
      caughtException=true;
    }
    assertTrue("Writing beyond limit did not throw an exception",caughtException);
    byte[] newBuf=new byte[SIZE];
    stream.resetBuffer(newBuf,0,newBuf.length);
    assertTrue("Limit did not get reset correctly",(stream.getLimit() == SIZE));
    stream.write(INPUT,0,SIZE);
    assertTrue("Array Contents Mismatch",Arrays.equals(INPUT,stream.getBuffer()));
    caughtException=false;
    try {
      stream.write(INPUT[0]);
    }
 catch (    Exception e) {
      caughtException=true;
    }
    assertTrue("Writing beyond limit did not throw an exception",caughtException);
  }
}
