static class FileTree {
  private final FileSystem fs;
  private final String root;
  private final Path rootdir;
  private int fcount=0;
  Path createSmallFile(  Path dir) throws IOException {
    final Path f=new Path(dir,"f" + ++fcount);
    Assert.assertTrue(!fs.exists(f));
    final DataOutputStream out=fs.create(f);
    try {
      out.writeBytes("createSmallFile: f=" + f);
    }
  finally {
      out.close();
    }
    Assert.assertTrue(fs.exists(f));
    return f;
  }
  Path mkdir(  Path dir) throws IOException {
    Assert.assertTrue(fs.mkdirs(dir));
    Assert.assertTrue(fs.getFileStatus(dir).isDirectory());
    return dir;
  }
  FileTree(  FileSystem fs,  String name) throws IOException {
    this.fs=fs;
    this.root="/test/" + name;
    this.rootdir=mkdir(new Path(root));
    for (int i=0; i < 3; i++) {
      createSmallFile(rootdir);
    }
    for (int i=0; i < NUN_SUBS; i++) {
      final Path sub=mkdir(new Path(root,"sub" + i));
      int num_files=RANDOM.nextInt(3);
      for (int j=0; j < num_files; j++) {
        createSmallFile(sub);
      }
    }
    System.out.println("rootdir = " + rootdir);
  }
}
