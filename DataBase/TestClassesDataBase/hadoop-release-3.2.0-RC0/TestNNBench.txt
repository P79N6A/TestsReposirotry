public class TestNNBench extends HadoopTestCase {
  private static final String BASE_DIR=new File(System.getProperty("test.build.data","build/test/data"),"NNBench").getAbsolutePath();
  public TestNNBench() throws IOException {
    super(LOCAL_MR,LOCAL_FS,1,1);
  }
  @After public void tearDown() throws Exception {
    getFileSystem().delete(new Path(BASE_DIR),true);
    getFileSystem().delete(new Path(NNBench.DEFAULT_RES_FILE_NAME),true);
    super.tearDown();
  }
  @Test(timeout=30000) public void testNNBenchCreateReadAndDelete() throws Exception {
    runNNBench(createJobConf(),"create_write");
    Path path=new Path(BASE_DIR + "/data/file_0_0");
    assertTrue("create_write should create the file",getFileSystem().exists(path));
    runNNBench(createJobConf(),"open_read");
    runNNBench(createJobConf(),"delete");
    assertFalse("Delete operation should delete the file",getFileSystem().exists(path));
  }
  @Test(timeout=30000) public void testNNBenchCreateAndRename() throws Exception {
    runNNBench(createJobConf(),"create_write");
    Path path=new Path(BASE_DIR + "/data/file_0_0");
    assertTrue("create_write should create the file",getFileSystem().exists(path));
    runNNBench(createJobConf(),"rename");
    Path renamedPath=new Path(BASE_DIR + "/data/file_0_r_0");
    assertFalse("Rename should rename the file",getFileSystem().exists(path));
    assertTrue("Rename should rename the file",getFileSystem().exists(renamedPath));
  }
  private void runNNBench(  Configuration conf,  String operation) throws Exception {
    String[] genArgs={"-operation",operation,"-baseDir",BASE_DIR,"-startTime","" + (Time.now() / 1000 + 3)};
    assertEquals(0,ToolRunner.run(conf,new NNBench(),genArgs));
  }
}
