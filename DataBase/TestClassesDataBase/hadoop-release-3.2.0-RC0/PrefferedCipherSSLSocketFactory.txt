private class PrefferedCipherSSLSocketFactory extends SSLSocketFactory {
  private final SSLSocketFactory delegateSocketFactory;
  private final String[] enabledCipherSuites;
  public PrefferedCipherSSLSocketFactory(  SSLSocketFactory sslSocketFactory,  String[] pEnabledCipherSuites){
    delegateSocketFactory=sslSocketFactory;
    if (null != pEnabledCipherSuites && pEnabledCipherSuites.length > 0) {
      enabledCipherSuites=pEnabledCipherSuites;
    }
 else {
      enabledCipherSuites=null;
    }
  }
  @Override public String[] getDefaultCipherSuites(){
    return delegateSocketFactory.getDefaultCipherSuites();
  }
  @Override public String[] getSupportedCipherSuites(){
    return delegateSocketFactory.getSupportedCipherSuites();
  }
  @Override public Socket createSocket(  Socket socket,  String string,  int i,  boolean bln) throws IOException {
    SSLSocket sslSocket=(SSLSocket)delegateSocketFactory.createSocket(socket,string,i,bln);
    if (null != enabledCipherSuites) {
      sslSocket.setEnabledCipherSuites(enabledCipherSuites);
    }
    return sslSocket;
  }
  @Override public Socket createSocket(  String string,  int i) throws IOException, UnknownHostException {
    SSLSocket sslSocket=(SSLSocket)delegateSocketFactory.createSocket(string,i);
    if (null != enabledCipherSuites) {
      sslSocket.setEnabledCipherSuites(enabledCipherSuites);
    }
    return sslSocket;
  }
  @Override public Socket createSocket(  String string,  int i,  InetAddress ia,  int i1) throws IOException, UnknownHostException {
    SSLSocket sslSocket=(SSLSocket)delegateSocketFactory.createSocket(string,i,ia,i1);
    if (null != enabledCipherSuites) {
      sslSocket.setEnabledCipherSuites(enabledCipherSuites);
    }
    return sslSocket;
  }
  @Override public Socket createSocket(  InetAddress ia,  int i) throws IOException {
    SSLSocket sslSocket=(SSLSocket)delegateSocketFactory.createSocket(ia,i);
    if (null != enabledCipherSuites) {
      sslSocket.setEnabledCipherSuites(enabledCipherSuites);
    }
    return sslSocket;
  }
  @Override public Socket createSocket(  InetAddress ia,  int i,  InetAddress ia1,  int i1) throws IOException {
    SSLSocket sslSocket=(SSLSocket)delegateSocketFactory.createSocket(ia,i,ia1,i1);
    if (null != enabledCipherSuites) {
      sslSocket.setEnabledCipherSuites(enabledCipherSuites);
    }
    return sslSocket;
  }
}
