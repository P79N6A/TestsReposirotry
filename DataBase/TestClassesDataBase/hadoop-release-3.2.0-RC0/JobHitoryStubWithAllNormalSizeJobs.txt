/** 
 * A JobHistory stub that treats all jobs as normal size and therefore will return a CompletedJob on HistoryFileInfo.loadJob().
 */
static class JobHitoryStubWithAllNormalSizeJobs extends JobHistory {
  @Override public HistoryFileManager createHistoryFileManager(){
    HistoryFileManager historyFileManager;
    try {
      HistoryFileInfo historyFileInfo=createParsedJobHistoryFileInfo();
      historyFileManager=mock(HistoryFileManager.class);
      when(historyFileManager.getFileInfo(any(JobId.class))).thenReturn(historyFileInfo);
    }
 catch (    IOException ex) {
      historyFileManager=super.createHistoryFileManager();
    }
    return historyFileManager;
  }
  private static HistoryFileInfo createParsedJobHistoryFileInfo() throws IOException {
    HistoryFileInfo fileInfo=mock(HistoryFileInfo.class);
    CompletedJob job=createFakeCompletedJob();
    when(fileInfo.loadJob()).thenReturn(job);
    return fileInfo;
  }
  private static CompletedJob createFakeCompletedJob(){
    CompletedJob job=mock(CompletedJob.class);
    when(job.getTotalMaps()).thenReturn(0);
    when(job.getCompletedMaps()).thenReturn(0);
    when(job.getTotalReduces()).thenReturn(0);
    when(job.getCompletedReduces()).thenReturn(0);
    JobId jobId=createFakeJobId();
    when(job.getID()).thenReturn(jobId);
    JobReport jobReport=mock(JobReport.class);
    when(jobReport.getSubmitTime()).thenReturn(-1L);
    when(jobReport.getStartTime()).thenReturn(-1L);
    when(jobReport.getFinishTime()).thenReturn(-1L);
    when(job.getReport()).thenReturn(jobReport);
    when(job.getAMInfos()).thenReturn(new ArrayList<AMInfo>());
    when(job.getDiagnostics()).thenReturn(new ArrayList<String>());
    when(job.getName()).thenReturn("fake completed job");
    when(job.getQueueName()).thenReturn("default");
    when(job.getUserName()).thenReturn("junit");
    when(job.getState()).thenReturn(JobState.ERROR);
    when(job.getAllCounters()).thenReturn(new Counters());
    when(job.getTasks()).thenReturn(new HashMap<TaskId,Task>());
    return job;
  }
  private static JobId createFakeJobId(){
    JobId jobId=new JobIdPBImpl();
    jobId.setId(0);
    ApplicationId appId=mock(ApplicationId.class);
    when(appId.getClusterTimestamp()).thenReturn(0L);
    when(appId.getId()).thenReturn(0);
    jobId.setAppId(appId);
    return jobId;
  }
}
