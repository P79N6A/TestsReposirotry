/** 
 * This test makes sure that "DU" does not get to run on each call to getUsed 
 */
public class TestDU {
  final static private File DU_DIR=GenericTestUtils.getTestDir("dutmp");
  @Before public void setUp(){
    FileUtil.fullyDelete(DU_DIR);
    assertTrue(DU_DIR.mkdirs());
  }
  @After public void tearDown() throws IOException {
    FileUtil.fullyDelete(DU_DIR);
  }
  private void createFile(  File newFile,  int size) throws IOException {
    Random random=new Random();
    byte[] data=new byte[size];
    random.nextBytes(data);
    newFile.createNewFile();
    RandomAccessFile file=new RandomAccessFile(newFile,"rws");
    file.write(data);
    file.getFD().sync();
    file.close();
  }
  /** 
 * Verify that du returns expected used space for a file. We assume here that if a file system crates a file of size that is a multiple of the block size in this file system, then the used size for the file will be exactly that size. This is true for most file systems.
 * @throws IOException
 * @throws InterruptedException
 */
  @Test public void testDU() throws IOException, InterruptedException {
    final int writtenSize=32 * 1024;
    final int slack=4 * 1024;
    File file=new File(DU_DIR,"data");
    createFile(file,writtenSize);
    Thread.sleep(5000);
    DU du=new DU(file,10000,0,-1);
    du.init();
    long duSize=du.getUsed();
    du.close();
    assertTrue("Invalid on-disk size",duSize >= writtenSize && writtenSize <= (duSize + slack));
    du=new DU(file,0,1,-1);
    du.init();
    duSize=du.getUsed();
    du.close();
    assertTrue("Invalid on-disk size",duSize >= writtenSize && writtenSize <= (duSize + slack));
    du=new DU(file,10000,0,-1);
    du.init();
    duSize=du.getUsed();
    assertTrue("Invalid on-disk size",duSize >= writtenSize && writtenSize <= (duSize + slack));
  }
  @Test public void testDUGetUsedWillNotReturnNegative() throws IOException {
    File file=new File(DU_DIR,"data");
    assertTrue(file.createNewFile());
    Configuration conf=new Configuration();
    conf.setLong(CommonConfigurationKeys.FS_DU_INTERVAL_KEY,10000L);
    DU du=new DU(file,10000L,0,-1);
    du.incDfsUsed(-Long.MAX_VALUE);
    long duSize=du.getUsed();
    assertTrue(String.valueOf(duSize),duSize >= 0L);
  }
  @Test public void testDUSetInitialValue() throws IOException {
    File file=new File(DU_DIR,"dataX");
    createFile(file,8192);
    DU du=new DU(file,3000,0,1024);
    du.init();
    assertTrue("Initial usage setting not honored",du.getUsed() == 1024);
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException ie) {
    }
    assertTrue("Usage didn't get updated",du.getUsed() == 8192);
  }
}
