public class TestClusterId {
  private static final Logger LOG=LoggerFactory.getLogger(TestClusterId.class);
  File hdfsDir;
  Configuration config;
  private String getClusterId(  Configuration config) throws IOException {
    Collection<URI> dirsToFormat=FSNamesystem.getNamespaceDirs(config);
    List<URI> editsToFormat=FSNamesystem.getNamespaceEditsDirs(config);
    FSImage fsImage=new FSImage(config,dirsToFormat,editsToFormat);
    Iterator<StorageDirectory> sdit=fsImage.getStorage().dirIterator(NNStorage.NameNodeDirType.IMAGE);
    StorageDirectory sd=sdit.next();
    Properties props=Storage.readPropertiesFile(sd.getVersionFile());
    String cid=null;
    if (props != null) {
      cid=props.getProperty("clusterID");
    }
    LOG.info("successfully formated : sd=" + sd.getCurrentDir() + ";cid="+ cid);
    return cid;
  }
  @Before public void setUp() throws IOException {
    ExitUtil.disableSystemExit();
    String baseDir=PathUtils.getTestDirName(getClass());
    hdfsDir=new File(baseDir,"dfs/name");
    if (hdfsDir.exists() && !FileUtil.fullyDelete(hdfsDir)) {
      throw new IOException("Could not delete test directory '" + hdfsDir + "'");
    }
    LOG.info("hdfsdir is " + hdfsDir.getAbsolutePath());
    StartupOption.FORMAT.setForceFormat(false);
    StartupOption.FORMAT.setInteractiveFormat(true);
    config=new Configuration();
    config.set(DFS_NAMENODE_NAME_DIR_KEY,hdfsDir.getPath());
  }
  @After public void tearDown() throws IOException {
    if (hdfsDir.exists() && !FileUtil.fullyDelete(hdfsDir)) {
      throw new IOException("Could not tearDown test directory '" + hdfsDir + "'");
    }
  }
  @Test public void testFormatClusterIdOption() throws IOException {
    NameNode.format(config);
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
    StartupOption.FORMAT.setClusterId("mycluster");
    NameNode.format(config);
    cid=getClusterId(config);
    assertTrue("ClusterId didn't match",cid.equals("mycluster"));
    StartupOption.FORMAT.setClusterId("");
    NameNode.format(config);
    String newCid=getClusterId(config);
    assertFalse("ClusterId should not be the same",newCid.equals(cid));
  }
  /** 
 * Test namenode format with -format option. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormat() throws IOException {
    String[] argv={"-format"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -format option when an empty name directory exists. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormatWithEmptyDir() throws IOException {
    if (!hdfsDir.mkdirs()) {
      fail("Failed to create dir " + hdfsDir.getPath());
    }
    String[] argv={"-format"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -format -force options when name directory exists. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormatWithForce() throws IOException {
    if (!hdfsDir.mkdirs()) {
      fail("Failed to create dir " + hdfsDir.getPath());
    }
    String[] argv={"-format","-force"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -format -force -clusterid option when name directory exists. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormatWithForceAndClusterId() throws IOException {
    if (!hdfsDir.mkdirs()) {
      fail("Failed to create dir " + hdfsDir.getPath());
    }
    String myId="testFormatWithForceAndClusterId";
    String[] argv={"-format","-force","-clusterid",myId};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cId=getClusterId(config);
    assertEquals("ClusterIds do not match",myId,cId);
  }
  /** 
 * Test namenode format with -clusterid -force option. Format command should fail as no cluster id was provided.
 * @throws IOException
 */
  @Test public void testFormatWithInvalidClusterIdOption() throws IOException {
    String[] argv={"-format","-clusterid","-force"};
    PrintStream origErr=System.err;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stdErr=new PrintStream(baos);
    System.setErr(stdErr);
    try {
      NameNode.createNameNode(argv,config);
      assertTrue(baos.toString("UTF-8").contains("Usage: hdfs namenode"));
    }
  finally {
      System.setErr(origErr);
    }
    File version=new File(hdfsDir,"current/VERSION");
    assertFalse("Check version should not exist",version.exists());
  }
  /** 
 * Test namenode format with -format -clusterid options. Format should fail was no clusterid was sent.
 * @throws IOException
 */
  @Test public void testFormatWithNoClusterIdOption() throws IOException {
    String[] argv={"-format","-clusterid"};
    PrintStream origErr=System.err;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stdErr=new PrintStream(baos);
    System.setErr(stdErr);
    try {
      NameNode.createNameNode(argv,config);
      assertTrue(baos.toString("UTF-8").contains("Usage: hdfs namenode"));
    }
  finally {
      System.setErr(origErr);
    }
    File version=new File(hdfsDir,"current/VERSION");
    assertFalse("Check version should not exist",version.exists());
  }
  /** 
 * Test namenode format with -format -clusterid and empty clusterid. Format should fail as no valid if was provided.
 * @throws IOException
 */
  @Test public void testFormatWithEmptyClusterIdOption() throws IOException {
    String[] argv={"-format","-clusterid",""};
    PrintStream origErr=System.err;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream stdErr=new PrintStream(baos);
    System.setErr(stdErr);
    try {
      NameNode.createNameNode(argv,config);
      assertTrue(baos.toString("UTF-8").contains("Usage: hdfs namenode"));
    }
  finally {
      System.setErr(origErr);
    }
    File version=new File(hdfsDir,"current/VERSION");
    assertFalse("Check version should not exist",version.exists());
  }
  /** 
 * Test namenode format with -format -nonInteractive options when a non empty name directory exists. Format should not succeed.
 * @throws IOException
 */
  @Test public void testFormatWithNonInteractive() throws IOException {
    File data=new File(hdfsDir,"file");
    if (!data.mkdirs()) {
      fail("Failed to create dir " + data.getPath());
    }
    String[] argv={"-format","-nonInteractive"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have been aborted with exit code 1",1,e.status);
    }
    File version=new File(hdfsDir,"current/VERSION");
    assertFalse("Check version should not exist",version.exists());
  }
  /** 
 * Test namenode format with -format -nonInteractive options when name directory does not exist. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormatWithNonInteractiveNameDirDoesNotExit() throws IOException {
    String[] argv={"-format","-nonInteractive"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -force -nonInteractive -force option. Format should succeed.
 * @throws IOException
 */
  @Test public void testFormatWithNonInteractiveAndForce() throws IOException {
    if (!hdfsDir.mkdirs()) {
      fail("Failed to create dir " + hdfsDir.getPath());
    }
    String[] argv={"-format","-nonInteractive","-force"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -format option when a non empty name directory exists. Enter Y when prompted and the format should succeed.
 * @throws IOException
 * @throws InterruptedException
 */
  @Test public void testFormatWithoutForceEnterYes() throws IOException, InterruptedException {
    File data=new File(hdfsDir,"file");
    if (!data.mkdirs()) {
      fail("Failed to create dir " + data.getPath());
    }
    InputStream origIn=System.in;
    ByteArrayInputStream bins=new ByteArrayInputStream("Y\n".getBytes());
    System.setIn(bins);
    String[] argv={"-format"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should have succeeded",0,e.status);
    }
    System.setIn(origIn);
    String cid=getClusterId(config);
    assertTrue("Didn't get new ClusterId",(cid != null && !cid.equals("")));
  }
  /** 
 * Test namenode format with -format option when a non empty name directory exists. Enter N when prompted and format should be aborted.
 * @throws IOException
 * @throws InterruptedException
 */
  @Test public void testFormatWithoutForceEnterNo() throws IOException, InterruptedException {
    File data=new File(hdfsDir,"file");
    if (!data.mkdirs()) {
      fail("Failed to create dir " + data.getPath());
    }
    InputStream origIn=System.in;
    ByteArrayInputStream bins=new ByteArrayInputStream("N\n".getBytes());
    System.setIn(bins);
    String[] argv={"-format"};
    try {
      NameNode.createNameNode(argv,config);
      fail("createNameNode() did not call System.exit()");
    }
 catch (    ExitException e) {
      assertEquals("Format should not have succeeded",1,e.status);
    }
    System.setIn(origIn);
    File version=new File(hdfsDir,"current/VERSION");
    assertFalse("Check version should not exist",version.exists());
  }
  /** 
 * Test NameNode format failure when reformat is disabled and metadata directories exist.
 */
  @Test public void testNNFormatFailure() throws Exception {
    NameNode.initMetrics(config,NamenodeRole.NAMENODE);
    DFSTestUtil.formatNameNode(config);
    config.setBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,true);
    try {
      NameNode.format(config);
      fail("NN format should fail.");
    }
 catch (    NameNodeFormatException e) {
      GenericTestUtils.assertExceptionContains("NameNode format aborted as " + "reformat is disabled for this cluster",e);
    }
  }
  /** 
 * Test NameNode format when reformat is disabled and metadata directories do not exist.
 */
  @Test public void testNNFormatSuccess() throws Exception {
    NameNode.initMetrics(config,NamenodeRole.NAMENODE);
    config.setBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,true);
    DFSTestUtil.formatNameNode(config);
  }
}
