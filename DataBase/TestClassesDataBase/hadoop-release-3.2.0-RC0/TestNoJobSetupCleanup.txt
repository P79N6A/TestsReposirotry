@Ignore public class TestNoJobSetupCleanup extends HadoopTestCase {
  private static String TEST_ROOT_DIR=new File(System.getProperty("test.build.data","/tmp")).toURI().toString().replace(' ','+');
  private final Path inDir=new Path(TEST_ROOT_DIR,"./wc/input");
  private final Path outDir=new Path(TEST_ROOT_DIR,"./wc/output");
  public TestNoJobSetupCleanup() throws IOException {
    super(HadoopTestCase.CLUSTER_MR,HadoopTestCase.LOCAL_FS,2,2);
  }
  private Job submitAndValidateJob(  Configuration conf,  int numMaps,  int numReds) throws IOException, InterruptedException, ClassNotFoundException {
    Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,numMaps,numReds);
    job.setJobSetupCleanupNeeded(false);
    job.setOutputFormatClass(MyOutputFormat.class);
    job.waitForCompletion(true);
    assertTrue(job.isSuccessful());
    assertTrue(job.getTaskReports(TaskType.JOB_SETUP).length == 0);
    assertTrue(job.getTaskReports(TaskType.JOB_CLEANUP).length == 0);
    assertTrue(job.getTaskReports(TaskType.MAP).length == numMaps);
    assertTrue(job.getTaskReports(TaskType.REDUCE).length == numReds);
    FileSystem fs=FileSystem.get(conf);
    assertTrue("Job output directory doesn't exit!",fs.exists(outDir));
    String tempWorkingPathStr=outDir + Path.SEPARATOR + "_temporary"+ Path.SEPARATOR+ "0";
    Path tempWorkingPath=new Path(tempWorkingPathStr);
    FileStatus[] list=fs.listStatus(tempWorkingPath,new OutputFilter());
    int numPartFiles=numReds == 0 ? numMaps : numReds;
    assertTrue("Number of part-files is " + list.length + " and not "+ numPartFiles,list.length == numPartFiles);
    return job;
  }
  @Test public void testNoJobSetupCleanup() throws Exception {
    try {
      Configuration conf=createJobConf();
      submitAndValidateJob(conf,1,1);
      submitAndValidateJob(conf,1,0);
      submitAndValidateJob(conf,0,0);
      submitAndValidateJob(conf,0,1);
    }
  finally {
      tearDown();
    }
  }
public static class MyOutputFormat extends TextOutputFormat {
    public void checkOutputSpecs(    JobContext job) throws FileAlreadyExistsException, IOException {
      super.checkOutputSpecs(job);
      TaskAttemptID tid=new TaskAttemptID("jt",1,TaskType.JOB_SETUP,0,0);
      getOutputCommitter(new TaskAttemptContextImpl(job.getConfiguration(),tid)).setupJob(job);
    }
  }
private static class OutputFilter implements PathFilter {
    public boolean accept(    Path path){
      return !(path.getName().startsWith("_"));
    }
  }
}
