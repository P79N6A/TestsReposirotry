public class TestDFSClientCache {
  @Test public void testEviction() throws IOException {
    NfsConfiguration conf=new NfsConfiguration();
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY,"hdfs://localhost");
    final int MAX_CACHE_SIZE=1;
    DFSClientCache cache=new DFSClientCache(conf,MAX_CACHE_SIZE);
    int namenodeId=Nfs3Utils.getNamenodeId(conf);
    DFSClient c1=cache.getDfsClient("test1",namenodeId);
    assertTrue(cache.getDfsClient("test1",namenodeId).toString().contains("ugi=test1"));
    assertEquals(c1,cache.getDfsClient("test1",namenodeId));
    assertFalse(isDfsClientClose(c1));
    cache.getDfsClient("test2",namenodeId);
    assertTrue(isDfsClientClose(c1));
    assertTrue("cache size should be the max size or less",cache.getClientCache().size() <= MAX_CACHE_SIZE);
  }
  @Test public void testGetUserGroupInformationSecure() throws IOException {
    String userName="user1";
    String currentUser="test-user";
    NfsConfiguration conf=new NfsConfiguration();
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY,"hdfs://localhost");
    UserGroupInformation currentUserUgi=UserGroupInformation.createRemoteUser(currentUser);
    currentUserUgi.setAuthenticationMethod(KERBEROS);
    UserGroupInformation.setLoginUser(currentUserUgi);
    DFSClientCache cache=new DFSClientCache(conf);
    UserGroupInformation ugiResult=cache.getUserGroupInformation(userName,currentUserUgi);
    assertThat(ugiResult.getUserName(),is(userName));
    assertThat(ugiResult.getRealUser(),is(currentUserUgi));
    assertThat(ugiResult.getAuthenticationMethod(),is(UserGroupInformation.AuthenticationMethod.PROXY));
  }
  @Test public void testGetUserGroupInformation() throws IOException {
    String userName="user1";
    String currentUser="currentUser";
    UserGroupInformation currentUserUgi=UserGroupInformation.createUserForTesting(currentUser,new String[0]);
    NfsConfiguration conf=new NfsConfiguration();
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY,"hdfs://localhost");
    DFSClientCache cache=new DFSClientCache(conf);
    UserGroupInformation ugiResult=cache.getUserGroupInformation(userName,currentUserUgi);
    assertThat(ugiResult.getUserName(),is(userName));
    assertThat(ugiResult.getRealUser(),is(currentUserUgi));
    assertThat(ugiResult.getAuthenticationMethod(),is(UserGroupInformation.AuthenticationMethod.PROXY));
  }
  private static boolean isDfsClientClose(  DFSClient c){
    try {
      c.exists("");
    }
 catch (    IOException e) {
      return e.getMessage().equals("Filesystem closed");
    }
    return false;
  }
}
