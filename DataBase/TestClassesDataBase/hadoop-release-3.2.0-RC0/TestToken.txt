/** 
 * Unit tests for Token 
 */
public class TestToken {
  static boolean isEqual(  Object a,  Object b){
    return a == null ? b == null : a.equals(b);
  }
  static boolean checkEqual(  Token<TokenIdentifier> a,  Token<TokenIdentifier> b){
    return Arrays.equals(a.getIdentifier(),b.getIdentifier()) && Arrays.equals(a.getPassword(),b.getPassword()) && isEqual(a.getKind(),b.getKind())&& isEqual(a.getService(),b.getService());
  }
  /** 
 * Test token serialization
 */
  @Test public void testTokenSerialization() throws IOException {
    Token<TokenIdentifier> sourceToken=new Token<TokenIdentifier>();
    sourceToken.setService(new Text("service"));
    DataOutputBuffer out=new DataOutputBuffer();
    sourceToken.write(out);
    DataInputBuffer in=new DataInputBuffer();
    in.reset(out.getData(),out.getLength());
    Token<TokenIdentifier> destToken=new Token<TokenIdentifier>();
    destToken.readFields(in);
    assertTrue(checkEqual(sourceToken,destToken));
  }
  private static void checkUrlSafe(  String str) throws Exception {
    int len=str.length();
    for (int i=0; i < len; ++i) {
      char ch=str.charAt(i);
      if (ch == '-')       continue;
      if (ch == '_')       continue;
      if (ch >= '0' && ch <= '9')       continue;
      if (ch >= 'A' && ch <= 'Z')       continue;
      if (ch >= 'a' && ch <= 'z')       continue;
      fail("Encoded string " + str + " has invalid character at position "+ i);
    }
  }
  @Test public void testEncodeWritable() throws Exception {
    String[] values=new String[]{"","a","bb","ccc","dddd","eeeee","ffffff","ggggggg","hhhhhhhh","iiiiiiiii","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM" + "NOPQRSTUVWXYZ01234567890!@#$%^&*()-=_+[]{}|;':,./<>?"};
    Token<AbstractDelegationTokenIdentifier> orig;
    Token<AbstractDelegationTokenIdentifier> copy=new Token<AbstractDelegationTokenIdentifier>();
    for (int i=0; i < values.length; ++i) {
      String val=values[i];
      System.out.println("Input = " + val);
      orig=new Token<AbstractDelegationTokenIdentifier>(val.getBytes(),val.getBytes(),new Text(val),new Text(val));
      String encode=orig.encodeToUrlString();
      copy.decodeFromUrlString(encode);
      assertEquals(orig,copy);
      checkUrlSafe(encode);
    }
  }
  @Test public void testDecodeWritableArgSanityCheck() throws Exception {
    Token<AbstractDelegationTokenIdentifier> token=new Token<AbstractDelegationTokenIdentifier>();
    try {
      token.decodeFromUrlString(null);
      fail("Should have thrown HadoopIllegalArgumentException");
    }
 catch (    HadoopIllegalArgumentException e) {
      Token.LOG.info("Test decodeWritable() sanity check success.");
    }
  }
  @Test public void testDecodeIdentifier() throws IOException {
    TestDelegationTokenSecretManager secretManager=new TestDelegationTokenSecretManager(0,0,0,0);
    secretManager.startThreads();
    TestDelegationTokenIdentifier id=new TestDelegationTokenIdentifier(new Text("owner"),new Text("renewer"),new Text("realUser"));
    Token<TestDelegationTokenIdentifier> token=new Token<TestDelegationTokenIdentifier>(id,secretManager);
    TokenIdentifier idCopy=token.decodeIdentifier();
    assertNotSame(id,idCopy);
    assertEquals(id,idCopy);
  }
}
