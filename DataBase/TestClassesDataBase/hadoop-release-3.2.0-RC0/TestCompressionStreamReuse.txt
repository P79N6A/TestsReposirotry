public class TestCompressionStreamReuse {
  private static final Logger LOG=LoggerFactory.getLogger(TestCompressionStreamReuse.class);
  private Configuration conf=new Configuration();
  private int count=10000;
  private int seed=new Random().nextInt();
  @Test public void testBZip2Codec() throws IOException {
    resetStateTest(conf,seed,count,"org.apache.hadoop.io.compress.BZip2Codec");
  }
  @Test public void testGzipCompressStreamReuse() throws IOException {
    resetStateTest(conf,seed,count,"org.apache.hadoop.io.compress.GzipCodec");
  }
  @Test public void testZStandardCompressStreamReuse() throws IOException {
    assumeTrue(ZStandardCodec.isNativeCodeLoaded());
    resetStateTest(conf,seed,count,"org.apache.hadoop.io.compress.ZStandardCodec");
  }
  @Test public void testGzipCompressStreamReuseWithParam() throws IOException {
    Configuration conf=new Configuration(this.conf);
    ZlibFactory.setCompressionLevel(conf,CompressionLevel.BEST_COMPRESSION);
    ZlibFactory.setCompressionStrategy(conf,CompressionStrategy.HUFFMAN_ONLY);
    resetStateTest(conf,seed,count,"org.apache.hadoop.io.compress.GzipCodec");
  }
  private void resetStateTest(  Configuration conf,  int seed,  int count,  String codecClass) throws IOException {
    CompressionCodec codec=null;
    try {
      codec=(CompressionCodec)ReflectionUtils.newInstance(conf.getClassByName(codecClass),conf);
    }
 catch (    ClassNotFoundException cnfe) {
      throw new IOException("Illegal codec!");
    }
    LOG.info("Created a Codec object of type: " + codecClass);
    DataOutputBuffer data=new DataOutputBuffer();
    RandomDatum.Generator generator=new RandomDatum.Generator(seed);
    for (int i=0; i < count; ++i) {
      generator.next();
      RandomDatum key=generator.getKey();
      RandomDatum value=generator.getValue();
      key.write(data);
      value.write(data);
    }
    LOG.info("Generated " + count + " records");
    DataOutputBuffer compressedDataBuffer=new DataOutputBuffer();
    DataOutputStream deflateOut=new DataOutputStream(new BufferedOutputStream(compressedDataBuffer));
    CompressionOutputStream deflateFilter=codec.createOutputStream(deflateOut);
    deflateFilter.write(data.getData(),0,data.getLength());
    deflateFilter.finish();
    deflateFilter.flush();
    LOG.info("Finished compressing data");
    deflateFilter.resetState();
    LOG.info("Finished reseting deflator");
    data.reset();
    generator=new RandomDatum.Generator(seed);
    for (int i=0; i < count; ++i) {
      generator.next();
      RandomDatum key=generator.getKey();
      RandomDatum value=generator.getValue();
      key.write(data);
      value.write(data);
    }
    DataInputBuffer originalData=new DataInputBuffer();
    DataInputStream originalIn=new DataInputStream(new BufferedInputStream(originalData));
    originalData.reset(data.getData(),0,data.getLength());
    compressedDataBuffer.reset();
    deflateOut=new DataOutputStream(new BufferedOutputStream(compressedDataBuffer));
    deflateFilter=codec.createOutputStream(deflateOut);
    deflateFilter.write(data.getData(),0,data.getLength());
    deflateFilter.finish();
    deflateFilter.flush();
    LOG.info("Finished re-compressing data");
    DataInputBuffer deCompressedDataBuffer=new DataInputBuffer();
    deCompressedDataBuffer.reset(compressedDataBuffer.getData(),0,compressedDataBuffer.getLength());
    CompressionInputStream inflateFilter=codec.createInputStream(deCompressedDataBuffer);
    DataInputStream inflateIn=new DataInputStream(new BufferedInputStream(inflateFilter));
    for (int i=0; i < count; ++i) {
      RandomDatum k1=new RandomDatum();
      RandomDatum v1=new RandomDatum();
      k1.readFields(originalIn);
      v1.readFields(originalIn);
      RandomDatum k2=new RandomDatum();
      RandomDatum v2=new RandomDatum();
      k2.readFields(inflateIn);
      v2.readFields(inflateIn);
      assertTrue("original and compressed-then-decompressed-output not equal",k1.equals(k2) && v1.equals(v2));
    }
    LOG.info("SUCCESS! Completed checking " + count + " records");
  }
}
