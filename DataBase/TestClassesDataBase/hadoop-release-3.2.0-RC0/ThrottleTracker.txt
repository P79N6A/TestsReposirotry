/** 
 * Something to track throttles. The constructor sets the counters to the current count in the DDB table; a call to  {@link #reset()} will set it to the latest values.The  {@link #probe()} will pick up the latest values to compare them withthe original counts.
 */
private class ThrottleTracker {
  private long writeThrottleEventOrig=ddbms.getWriteThrottleEventCount();
  private long readThrottleEventOrig=ddbms.getReadThrottleEventCount();
  private long batchWriteThrottleCountOrig=ddbms.getBatchWriteCapacityExceededCount();
  private long readThrottles;
  private long writeThrottles;
  private long batchThrottles;
  ThrottleTracker(){
    reset();
  }
  /** 
 * Reset the counters.
 */
  private synchronized void reset(){
    writeThrottleEventOrig=ddbms.getWriteThrottleEventCount();
    readThrottleEventOrig=ddbms.getReadThrottleEventCount();
    batchWriteThrottleCountOrig=ddbms.getBatchWriteCapacityExceededCount();
  }
  /** 
 * Update the latest throttle count; synchronized.
 * @return true if throttling has been detected.
 */
  private synchronized boolean probe(){
    readThrottles=ddbms.getReadThrottleEventCount() - readThrottleEventOrig;
    writeThrottles=ddbms.getWriteThrottleEventCount() - writeThrottleEventOrig;
    batchThrottles=ddbms.getBatchWriteCapacityExceededCount() - batchWriteThrottleCountOrig;
    return isThrottlingDetected();
  }
  @Override public String toString(){
    return String.format("Tracker with read throttle events = %d;" + " write events = %d;" + " batch throttles = %d",readThrottles,writeThrottles,batchThrottles);
  }
  /** 
 * Assert that throttling has been detected.
 */
  void assertThrottlingDetected(){
    assertTrue("No throttling detected in " + this + " against "+ ddbms.toString(),isThrottlingDetected());
  }
  /** 
 * Has there been any throttling on an operation?
 * @return true iff read, write or batch operations were throttled.
 */
  private boolean isThrottlingDetected(){
    return readThrottles > 0 || writeThrottles > 0 || batchThrottles > 0;
  }
}
