@RunWith(MockitoJUnitRunner.class) public class TestTask {
  @Mock private TaskUmbilicalProtocol umbilical;
  @Mock private AMFeedback feedback;
  private Task task;
  @Before public void setup(){
    task=new StubTask();
    ExitUtil.disableSystemExit();
  }
  @Test public void testStatusUpdateDoesNotExitInUberMode() throws Exception {
    setupTest(true);
    task.statusUpdate(umbilical);
  }
  @Test(expected=ExitException.class) public void testStatusUpdateExitsInNonUberMode() throws Exception {
    setupTest(false);
    task.statusUpdate(umbilical);
  }
  private void setupTest(  boolean uberized) throws IOException, InterruptedException {
    Configuration conf=new Configuration(false);
    conf.setBoolean("mapreduce.task.uberized",uberized);
    task.setConf(conf);
    when(umbilical.statusUpdate(any(TaskAttemptID.class),any(TaskStatus.class))).thenReturn(feedback);
    when(feedback.getTaskFound()).thenReturn(false,true);
  }
public class StubTask extends Task {
    @Override public void run(    JobConf job,    TaskUmbilicalProtocol umbilical) throws IOException, ClassNotFoundException, InterruptedException {
    }
    @Override public boolean isMapTask(){
      return false;
    }
  }
}
