class MyJobImpl implements Job {
  private final JobId jobID;
  private final Map<TaskId,Task> allTasks=new HashMap<TaskId,Task>();
  private final Map<TaskId,Task> mapTasks=new HashMap<TaskId,Task>();
  private final Map<TaskId,Task> reduceTasks=new HashMap<TaskId,Task>();
  MyJobImpl(  JobId jobID,  int numMaps,  int numReduces){
    this.jobID=jobID;
    for (int i=0; i < numMaps; ++i) {
      Task newTask=new MyTaskImpl(jobID,i,TaskType.MAP);
      mapTasks.put(newTask.getID(),newTask);
      allTasks.put(newTask.getID(),newTask);
    }
    for (int i=0; i < numReduces; ++i) {
      Task newTask=new MyTaskImpl(jobID,i,TaskType.REDUCE);
      reduceTasks.put(newTask.getID(),newTask);
      allTasks.put(newTask.getID(),newTask);
    }
    for (    Task task : allTasks.values()) {
      MyTaskImpl myTaskImpl=(MyTaskImpl)task;
      myTaskImpl.addAttempt();
    }
  }
  @Override public JobId getID(){
    return jobID;
  }
  @Override public JobState getState(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public JobReport getReport(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public float getProgress(){
    return 0;
  }
  @Override public Counters getAllCounters(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Map<TaskId,Task> getTasks(){
    return allTasks;
  }
  @Override public Map<TaskId,Task> getTasks(  TaskType taskType){
    return taskType == TaskType.MAP ? mapTasks : reduceTasks;
  }
  @Override public Task getTask(  TaskId taskID){
    return allTasks.get(taskID);
  }
  @Override public List<String> getDiagnostics(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public int getCompletedMaps(){
    return completedMaps.get();
  }
  @Override public int getCompletedReduces(){
    return completedReduces.get();
  }
  @Override public TaskAttemptCompletionEvent[] getTaskAttemptCompletionEvents(  int fromEventId,  int maxEvents){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public TaskCompletionEvent[] getMapAttemptCompletionEvents(  int startIndex,  int maxEvents){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public String getName(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public String getQueueName(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public int getTotalMaps(){
    return mapTasks.size();
  }
  @Override public int getTotalReduces(){
    return reduceTasks.size();
  }
  @Override public boolean isUber(){
    return false;
  }
  @Override public boolean checkAccess(  UserGroupInformation callerUGI,  JobACL jobOperation){
    return true;
  }
  @Override public String getUserName(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Path getConfFile(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Map<JobACL,AccessControlList> getJobACLs(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public List<AMInfo> getAMInfos(){
    throw new UnsupportedOperationException("Not supported yet.");
  }
  @Override public Configuration loadConfFile(){
    throw new UnsupportedOperationException();
  }
  @Override public void setQueueName(  String queueName){
  }
  @Override public void setJobPriority(  Priority priority){
  }
  @Override public int getFailedMaps(){
    return 0;
  }
  @Override public int getFailedReduces(){
    return 0;
  }
  @Override public int getKilledMaps(){
    return 0;
  }
  @Override public int getKilledReduces(){
    return 0;
  }
}
