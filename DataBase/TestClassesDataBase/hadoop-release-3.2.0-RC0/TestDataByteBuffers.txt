public class TestDataByteBuffers {
  private static final Random RAND=new Random(31L);
  private static void readJunk(  DataInput in,  int iter) throws IOException {
    RAND.setSeed(31L);
    for (int i=0; i < iter; ++i) {
switch (RAND.nextInt(7)) {
case 0:
        assertEquals((byte)(RAND.nextInt() & 0xFF),in.readByte());
      break;
case 1:
    assertEquals((short)(RAND.nextInt() & 0xFFFF),in.readShort());
  break;
case 2:
assertEquals(RAND.nextInt(),in.readInt());
break;
case 3:
assertEquals(RAND.nextLong(),in.readLong());
break;
case 4:
assertEquals(Double.doubleToLongBits(RAND.nextDouble()),Double.doubleToLongBits(in.readDouble()));
break;
case 5:
assertEquals(Float.floatToIntBits(RAND.nextFloat()),Float.floatToIntBits(in.readFloat()));
break;
case 6:
int len=RAND.nextInt(1024);
byte[] vb=new byte[len];
RAND.nextBytes(vb);
byte[] b=new byte[len];
in.readFully(b,0,len);
assertArrayEquals(vb,b);
break;
default :
throw new IOException();
}
}
}
private static void writeJunk(DataOutput out,int iter) throws IOException {
RAND.setSeed(31L);
for (int i=0; i < iter; ++i) {
switch (RAND.nextInt(7)) {
case 0:
out.writeByte(RAND.nextInt());
break;
case 1:
out.writeShort((short)(RAND.nextInt() & 0xFFFF));
break;
case 2:
out.writeInt(RAND.nextInt());
break;
case 3:
out.writeLong(RAND.nextLong());
break;
case 4:
out.writeDouble(RAND.nextDouble());
break;
case 5:
out.writeFloat(RAND.nextFloat());
break;
case 6:
byte[] b=new byte[RAND.nextInt(1024)];
RAND.nextBytes(b);
out.write(b);
break;
default :
throw new IOException();
}
}
}
@Test public void testBaseBuffers() throws IOException {
DataOutputBuffer dob=new DataOutputBuffer();
writeJunk(dob,1000);
DataInputBuffer dib=new DataInputBuffer();
dib.reset(dob.getData(),0,dob.getLength());
readJunk(dib,1000);
dob.reset();
writeJunk(dob,1000);
dib.reset(dob.getData(),0,dob.getLength());
readJunk(dib,1000);
}
@Test public void testDataInputByteBufferCompatibility() throws IOException {
DataOutputBuffer dob=new DataOutputBuffer();
writeJunk(dob,1000);
ByteBuffer buf=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
DataInputByteBuffer dib=new DataInputByteBuffer();
dib.reset(buf);
readJunk(dib,1000);
}
}
