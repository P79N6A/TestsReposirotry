/** 
 * Class for testing  {@link NameNodeStatusMXBean} implementation.
 */
public class TestNameNodeStatusMXBean {
  public static final Logger LOG=LoggerFactory.getLogger(TestNameNodeStatusMXBean.class);
  @Test(timeout=120000L) public void testNameNodeStatusMXBean() throws Exception {
    Configuration conf=new Configuration();
    MiniDFSCluster cluster=null;
    try {
      cluster=new MiniDFSCluster.Builder(conf).build();
      cluster.waitActive();
      NameNode nn=cluster.getNameNode();
      MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
      ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeStatus");
      String nnRole=(String)mbs.getAttribute(mxbeanName,"NNRole");
      Assert.assertEquals(nn.getNNRole(),nnRole);
      String state=(String)mbs.getAttribute(mxbeanName,"State");
      Assert.assertEquals(nn.getState(),state);
      String hostAndPort=(String)mbs.getAttribute(mxbeanName,"HostAndPort");
      Assert.assertEquals(nn.getHostAndPort(),hostAndPort);
      boolean securityEnabled=(boolean)mbs.getAttribute(mxbeanName,"SecurityEnabled");
      Assert.assertEquals(nn.isSecurityEnabled(),securityEnabled);
      long lastHATransitionTime=(long)mbs.getAttribute(mxbeanName,"LastHATransitionTime");
      Assert.assertEquals(nn.getLastHATransitionTime(),lastHATransitionTime);
      long bytesWithFutureGenerationStamps=(long)mbs.getAttribute(mxbeanName,"BytesWithFutureGenerationStamps");
      Assert.assertEquals(nn.getBytesWithFutureGenerationStamps(),bytesWithFutureGenerationStamps);
      String slowPeersReport=(String)mbs.getAttribute(mxbeanName,"SlowPeersReport");
      Assert.assertEquals(nn.getSlowPeersReport(),slowPeersReport);
      String slowDisksReport=(String)mbs.getAttribute(mxbeanName,"SlowDisksReport");
      Assert.assertEquals(nn.getSlowDisksReport(),slowDisksReport);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  @Test public void testNameNodeMXBeanSlowDisksEnabled() throws Exception {
    Configuration conf=new Configuration();
    conf.setInt(DFSConfigKeys.DFS_DATANODE_FILEIO_PROFILING_SAMPLING_PERCENTAGE_KEY,100);
    conf.setTimeDuration(DFSConfigKeys.DFS_DATANODE_OUTLIERS_REPORT_INTERVAL_KEY,1000,TimeUnit.MILLISECONDS);
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
    try {
      List<DataNode> datanodes=cluster.getDataNodes();
      Assert.assertEquals(datanodes.size(),1);
      DataNode datanode=datanodes.get(0);
      String slowDiskPath="test/data1/slowVolume";
      datanode.getDiskMetrics().addSlowDiskForTesting(slowDiskPath,null);
      NameNode nn=cluster.getNameNode();
      DatanodeManager datanodeManager=nn.getNamesystem().getBlockManager().getDatanodeManager();
      MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
      ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeStatus");
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          return (datanodeManager.getSlowDisksReport() != null);
        }
      }
,1000,100000);
      String slowDisksReport=(String)mbs.getAttribute(mxbeanName,"SlowDisksReport");
      Assert.assertEquals(datanodeManager.getSlowDisksReport(),slowDisksReport);
      Assert.assertTrue(slowDisksReport.contains(slowDiskPath));
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
}
