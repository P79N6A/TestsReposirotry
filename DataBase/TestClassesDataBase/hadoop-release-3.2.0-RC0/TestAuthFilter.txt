public class TestAuthFilter {
private static class DummyFilterConfig implements FilterConfig {
    final Map<String,String> map;
    DummyFilterConfig(    Map<String,String> map){
      this.map=map;
    }
    @Override public String getFilterName(){
      return "dummy";
    }
    @Override public String getInitParameter(    String arg0){
      return map.get(arg0);
    }
    @Override public Enumeration<String> getInitParameterNames(){
      return Collections.enumeration(map.keySet());
    }
    @Override public ServletContext getServletContext(){
      return null;
    }
  }
  @Test public void testGetConfiguration() throws ServletException {
    AuthFilter filter=new AuthFilter();
    Map<String,String> m=new HashMap<String,String>();
    m.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,"xyz/thehost@REALM");
    m.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY,"thekeytab");
    FilterConfig config=new DummyFilterConfig(m);
    Properties p=filter.getConfiguration("random",config);
    Assert.assertEquals("xyz/thehost@REALM",p.getProperty("kerberos.principal"));
    Assert.assertEquals("thekeytab",p.getProperty("kerberos.keytab"));
    Assert.assertEquals("true",p.getProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED));
  }
  @Test public void testGetSimpleAuthDisabledConfiguration() throws ServletException {
    AuthFilter filter=new AuthFilter();
    Map<String,String> m=new HashMap<String,String>();
    m.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_SIMPLE_ANONYMOUS_ALLOWED,"false");
    FilterConfig config=new DummyFilterConfig(m);
    Properties p=filter.getConfiguration("random",config);
    Assert.assertEquals("false",p.getProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED));
  }
  @Test public void testGetSimpleAuthDefaultConfiguration() throws ServletException {
    AuthFilter filter=new AuthFilter();
    Map<String,String> m=new HashMap<String,String>();
    FilterConfig config=new DummyFilterConfig(m);
    Properties p=filter.getConfiguration("random",config);
    Assert.assertEquals("true",p.getProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED));
  }
  @Test public void testGetCustomAuthConfiguration() throws ServletException {
    AuthFilter filter=new AuthFilter();
    Map<String,String> m=new HashMap<String,String>();
    m.put(AuthFilter.CONF_PREFIX + AuthFilter.AUTH_TYPE,"com.yourclass");
    m.put(AuthFilter.CONF_PREFIX + "alt-kerberos.param","value");
    FilterConfig config=new DummyFilterConfig(m);
    Properties p=filter.getConfiguration(AuthFilter.CONF_PREFIX,config);
    Assert.assertEquals("com.yourclass",p.getProperty(AuthFilter.AUTH_TYPE));
    Assert.assertEquals("value",p.getProperty("alt-kerberos.param"));
  }
}
