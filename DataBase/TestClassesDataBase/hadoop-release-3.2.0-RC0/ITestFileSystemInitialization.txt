/** 
 * Test AzureBlobFileSystem initialization.
 */
public class ITestFileSystemInitialization extends AbstractAbfsIntegrationTest {
  public ITestFileSystemInitialization() throws Exception {
    super();
  }
  @Test public void ensureAzureBlobFileSystemIsInitialized() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final String accountName=getAccountName();
    final String filesystem=getFileSystemName();
    String scheme=this.getAuthType() == AuthType.SharedKey ? FileSystemUriSchemes.ABFS_SCHEME : FileSystemUriSchemes.ABFS_SECURE_SCHEME;
    assertEquals(fs.getUri(),new URI(scheme,filesystem + "@" + accountName,null,null,null));
    assertNotNull("working directory",fs.getWorkingDirectory());
  }
  @Test public void ensureSecureAzureBlobFileSystemIsInitialized() throws Exception {
    final String accountName=getAccountName();
    final String filesystem=getFileSystemName();
    final URI defaultUri=new URI(FileSystemUriSchemes.ABFS_SECURE_SCHEME,filesystem + "@" + accountName,null,null,null);
    Configuration rawConfig=getRawConfiguration();
    rawConfig.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,defaultUri.toString());
    try (SecureAzureBlobFileSystem fs=(SecureAzureBlobFileSystem)FileSystem.newInstance(rawConfig)){
      assertEquals(fs.getUri(),new URI(FileSystemUriSchemes.ABFS_SECURE_SCHEME,filesystem + "@" + accountName,null,null,null));
      assertNotNull("working directory",fs.getWorkingDirectory());
    }
   }
}
