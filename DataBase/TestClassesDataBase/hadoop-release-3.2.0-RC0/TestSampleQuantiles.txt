public class TestSampleQuantiles {
  static final Quantile[] quantiles={new Quantile(0.50,0.050),new Quantile(0.75,0.025),new Quantile(0.90,0.010),new Quantile(0.95,0.005),new Quantile(0.99,0.001)};
  SampleQuantiles estimator;
  @Before public void init(){
    estimator=new SampleQuantiles(quantiles);
  }
  /** 
 * Check that the counts of the number of items in the window and sample are incremented correctly as items are added.
 */
  @Test public void testCount() throws IOException {
    assertEquals(estimator.getCount(),0);
    assertEquals(estimator.getSampleCount(),0);
    assertNull(estimator.snapshot());
    estimator.insert(1337);
    assertEquals(estimator.getCount(),1);
    estimator.snapshot();
    assertEquals(estimator.getSampleCount(),1);
    assertEquals("50.00 %ile +/- 5.00%: 1337\n" + "75.00 %ile +/- 2.50%: 1337\n" + "90.00 %ile +/- 1.00%: 1337\n"+ "95.00 %ile +/- 0.50%: 1337\n"+ "99.00 %ile +/- 0.10%: 1337",estimator.toString());
  }
  /** 
 * Check that counts and quantile estimates are correctly reset after a call to  {@link SampleQuantiles#clear()}.
 */
  @Test public void testClear() throws IOException {
    for (int i=0; i < 1000; i++) {
      estimator.insert(i);
    }
    estimator.clear();
    assertEquals(estimator.getCount(),0);
    assertEquals(estimator.getSampleCount(),0);
    assertNull(estimator.snapshot());
  }
  /** 
 * Correctness test that checks that absolute error of the estimate is within specified error bounds for some randomly permuted streams of items.
 */
  @Test public void testQuantileError() throws IOException {
    final int count=100000;
    Random r=new Random(0xDEADDEAD);
    Long[] values=new Long[count];
    for (int i=0; i < count; i++) {
      values[i]=(long)(i + 1);
    }
    for (int i=0; i < 10; i++) {
      System.out.println("Starting run " + i);
      Collections.shuffle(Arrays.asList(values),r);
      estimator.clear();
      for (int j=0; j < count; j++) {
        estimator.insert(values[j]);
      }
      Map<Quantile,Long> snapshot;
      snapshot=estimator.snapshot();
      for (      Quantile q : quantiles) {
        long actual=(long)(q.quantile * count);
        long error=(long)(q.error * count);
        long estimate=snapshot.get(q);
        System.out.println(String.format("Expected %d with error %d, estimated %d",actual,error,estimate));
        assertTrue(estimate <= actual + error);
        assertTrue(estimate >= actual - error);
      }
    }
  }
}
