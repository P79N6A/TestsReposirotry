/** 
 * TestCase for  {@link GenericWritable} class.
 * @see TestWritable#testWritable(Writable)
 */
public class TestGenericWritable {
  private Configuration conf;
  public static final String CONF_TEST_KEY="test.generic.writable";
  public static final String CONF_TEST_VALUE="dummy";
  @Before public void setUp() throws Exception {
    conf=new Configuration();
    conf.set(CONF_TEST_KEY,CONF_TEST_VALUE);
  }
  /** 
 * Dummy class for testing  {@link GenericWritable} 
 */
public static class Foo implements Writable {
    private String foo="foo";
    @Override public void readFields(    DataInput in) throws IOException {
      foo=Text.readString(in);
    }
    @Override public void write(    DataOutput out) throws IOException {
      Text.writeString(out,foo);
    }
    @Override public boolean equals(    Object obj){
      if (!(obj instanceof Foo))       return false;
      return this.foo.equals(((Foo)obj).foo);
    }
  }
  /** 
 * Dummy class for testing  {@link GenericWritable} 
 */
public static class Bar implements Writable, Configurable {
    private int bar=42;
    private Configuration conf=null;
    @Override public void readFields(    DataInput in) throws IOException {
      bar=in.readInt();
    }
    @Override public void write(    DataOutput out) throws IOException {
      out.writeInt(bar);
    }
    @Override public Configuration getConf(){
      return conf;
    }
    @Override public void setConf(    Configuration conf){
      this.conf=conf;
    }
    @Override public boolean equals(    Object obj){
      if (!(obj instanceof Bar))       return false;
      return this.bar == ((Bar)obj).bar;
    }
  }
  /** 
 * Dummy class for testing  {@link GenericWritable} 
 */
public static class Baz extends Bar {
    @Override public void readFields(    DataInput in) throws IOException {
      super.readFields(in);
      assertEquals("Configuration is not set for the wrapped object",CONF_TEST_VALUE,getConf().get(CONF_TEST_KEY));
    }
    @Override public void write(    DataOutput out) throws IOException {
      super.write(out);
    }
  }
  /** 
 * Dummy class for testing  {@link GenericWritable} 
 */
public static class FooGenericWritable extends GenericWritable {
    @Override @SuppressWarnings("unchecked") protected Class<? extends Writable>[] getTypes(){
      return new Class[]{Foo.class,Bar.class,Baz.class};
    }
    @Override public boolean equals(    Object obj){
      if (!(obj instanceof FooGenericWritable))       return false;
      return get().equals(((FooGenericWritable)obj).get());
    }
  }
  @Test public void testFooWritable() throws Exception {
    System.out.println("Testing Writable wrapped in GenericWritable");
    FooGenericWritable generic=new FooGenericWritable();
    generic.setConf(conf);
    Foo foo=new Foo();
    generic.set(foo);
    TestWritable.testWritable(generic);
  }
  @Test public void testBarWritable() throws Exception {
    System.out.println("Testing Writable, Configurable wrapped in GenericWritable");
    FooGenericWritable generic=new FooGenericWritable();
    generic.setConf(conf);
    Bar bar=new Bar();
    bar.setConf(conf);
    generic.set(bar);
    FooGenericWritable after=(FooGenericWritable)TestWritable.testWritable(generic,conf);
    System.out.println("Testing if Configuration is passed to wrapped classes");
    assertTrue(after.get() instanceof Configurable);
    assertNotNull(((Configurable)after.get()).getConf());
  }
  @Test public void testBazWritable() throws Exception {
    System.out.println("Testing for GenericWritable to find class names");
    FooGenericWritable generic=new FooGenericWritable();
    generic.setConf(conf);
    Baz baz=new Baz();
    generic.set(baz);
    TestWritable.testWritable(generic,conf);
  }
  @Test public void testSet() throws Exception {
    Foo foo=new Foo();
    FooGenericWritable generic=new FooGenericWritable();
    generic.set(foo);
    try {
      generic=new FooGenericWritable();
      generic.set(new IntWritable(1));
      fail("Generic writable should have thrown an exception for a Writable not registered");
    }
 catch (    RuntimeException e) {
    }
  }
  @Test public void testGet() throws Exception {
    Foo foo=new Foo();
    FooGenericWritable generic=new FooGenericWritable();
    generic.set(foo);
    assertEquals(foo,generic.get());
  }
}
