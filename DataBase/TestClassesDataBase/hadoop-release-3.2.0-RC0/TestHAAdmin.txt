public class TestHAAdmin {
  private static final Logger LOG=LoggerFactory.getLogger(TestHAAdmin.class);
  private HAAdmin tool;
  private ByteArrayOutputStream errOutBytes=new ByteArrayOutputStream();
  private ByteArrayOutputStream outBytes=new ByteArrayOutputStream();
  private String errOutput;
  private String output;
  @Before public void setup() throws IOException {
    tool=new HAAdmin(){
      @Override protected HAServiceTarget resolveTarget(      String target){
        return new DummyHAService(HAServiceState.STANDBY,new InetSocketAddress("dummy",12345));
      }
    }
;
    tool.setConf(new Configuration());
    tool.errOut=new PrintStream(errOutBytes);
    tool.out=new PrintStream(outBytes);
  }
  private void assertOutputContains(  String string){
    if (!errOutput.contains(string) && !output.contains(string)) {
      fail("Expected output to contain '" + string + "' but err_output was:\n"+ errOutput+ "\n and output was: \n"+ output);
    }
  }
  @Test public void testAdminUsage() throws Exception {
    assertEquals(-1,runTool());
    assertOutputContains("Usage:");
    assertOutputContains("-transitionToActive");
    assertEquals(-1,runTool("badCommand"));
    assertOutputContains("Bad command 'badCommand'");
    assertEquals(-1,runTool("-badCommand"));
    assertOutputContains("badCommand: Unknown");
    assertEquals(-1,runTool("-transitionToActive"));
    assertOutputContains("transitionToActive: incorrect number of arguments");
    assertEquals(-1,runTool("-transitionToActive","x","y"));
    assertOutputContains("transitionToActive: incorrect number of arguments");
    assertEquals(-1,runTool("-failover"));
    assertOutputContains("failover: incorrect arguments");
    assertOutputContains("failover: incorrect arguments");
    assertEquals(-1,runTool("-failover","foo:1234"));
    assertOutputContains("failover: incorrect arguments");
  }
  @Test public void testHelp() throws Exception {
    assertEquals(0,runTool("-help"));
    assertEquals(0,runTool("-help","transitionToActive"));
    assertOutputContains("Transitions the service into Active");
  }
  private Object runTool(  String... args) throws Exception {
    errOutBytes.reset();
    outBytes.reset();
    LOG.info("Running: HAAdmin " + Joiner.on(" ").join(args));
    int ret=tool.run(args);
    errOutput=new String(errOutBytes.toByteArray(),Charsets.UTF_8);
    output=new String(outBytes.toByteArray(),Charsets.UTF_8);
    LOG.info("Err_output:\n" + errOutput + "\nOutput:\n"+ output);
    return ret;
  }
}
