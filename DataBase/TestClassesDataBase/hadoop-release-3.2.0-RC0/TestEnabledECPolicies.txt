/** 
 * Test that ErasureCodingPolicyManager correctly parses the set of enabled erasure coding policies from configuration and exposes this information.
 */
public class TestEnabledECPolicies {
  @Rule public Timeout testTimeout=new Timeout(60000);
  private void expectInvalidPolicy(  String value){
    HdfsConfiguration conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,value);
    try {
      ErasureCodingPolicyManager.getInstance().init(conf);
      fail("Expected exception when instantiating ECPolicyManager");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("is not a valid policy",e);
    }
  }
  private void expectValidPolicy(  String value,  final int numEnabled) throws Exception {
    HdfsConfiguration conf=new HdfsConfiguration();
    ErasureCodingPolicyManager manager=ErasureCodingPolicyManager.getInstance();
    manager.init(conf);
    manager.enablePolicy(value);
    assertEquals("Incorrect number of enabled policies",numEnabled,manager.getEnabledPolicies().length);
  }
  @Test public void testDefaultPolicy() throws Exception {
    HdfsConfiguration conf=new HdfsConfiguration();
    String defaultECPolicies=conf.get(DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);
    expectValidPolicy(defaultECPolicies,1);
  }
  @Test public void testInvalid() throws Exception {
    expectInvalidPolicy("not-a-policy");
    expectInvalidPolicy("not-a-policy," + StripedFileTestUtil.getDefaultECPolicy().getName());
    expectInvalidPolicy(StripedFileTestUtil.getDefaultECPolicy().getName() + ", not-a-policy");
    expectInvalidPolicy("not-a-policy, ");
    expectInvalidPolicy("     ,not-a-policy, ");
  }
  @Test public void testValid() throws Exception {
    String ecPolicyName=StripedFileTestUtil.getDefaultECPolicy().getName();
    expectValidPolicy(ecPolicyName,1);
  }
  @Test public void testGetPolicies() throws Exception {
    ErasureCodingPolicy[] enabledPolicies;
    enabledPolicies=new ErasureCodingPolicy[]{};
    testGetPolicies(enabledPolicies);
    enabledPolicies=new ErasureCodingPolicy[]{SystemErasureCodingPolicies.getPolicies().get(1)};
    testGetPolicies(enabledPolicies);
    enabledPolicies=new ErasureCodingPolicy[]{SystemErasureCodingPolicies.getPolicies().get(1),SystemErasureCodingPolicies.getPolicies().get(2)};
    testGetPolicies(enabledPolicies);
  }
  private void testGetPolicies(  ErasureCodingPolicy[] enabledPolicies) throws Exception {
    HdfsConfiguration conf=new HdfsConfiguration();
    ErasureCodingPolicyManager manager=ErasureCodingPolicyManager.getInstance();
    manager.init(conf);
    for (    ErasureCodingPolicy p : enabledPolicies) {
      manager.enablePolicy(p.getName());
    }
    Set<String> found=new HashSet<>();
    for (    ErasureCodingPolicy p : manager.getEnabledPolicies()) {
      Assert.assertFalse("Duplicate policy name found: " + p.getName(),found.contains(p.getName()));
      found.add(p.getName());
    }
    for (    ErasureCodingPolicy p : enabledPolicies) {
      Assert.assertTrue("Did not find specified EC policy " + p.getName(),found.contains(p.getName()));
    }
    Assert.assertEquals(enabledPolicies.length,found.size() - 1);
    for (    ErasureCodingPolicy p : SystemErasureCodingPolicies.getPolicies()) {
      if (found.contains(p.getName())) {
        Assert.assertNotNull("getEnabledPolicyByName did not find enabled policy" + p.getName(),manager.getEnabledPolicyByName(p.getName()));
      }
 else {
        Assert.assertNull("getEnabledPolicyByName found disabled policy " + p.getName(),manager.getEnabledPolicyByName(p.getName()));
      }
    }
  }
}
