private class ResourceTrackerForLabels implements ResourceTracker {
  int heartbeatID=0;
  Set<NodeLabel> labels;
  private boolean receivedNMHeartbeat=false;
  private boolean receivedNMRegister=false;
  private MasterKey createMasterKey(){
    MasterKey masterKey=new MasterKeyPBImpl();
    masterKey.setKeyId(123);
    masterKey.setBytes(ByteBuffer.wrap(new byte[]{new Integer(123).byteValue()}));
    return masterKey;
  }
  @Override public RegisterNodeManagerResponse registerNodeManager(  RegisterNodeManagerRequest request) throws YarnException, IOException {
    labels=request.getNodeLabels();
    RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
    response.setNodeAction(NodeAction.NORMAL);
    response.setContainerTokenMasterKey(createMasterKey());
    response.setNMTokenMasterKey(createMasterKey());
    response.setAreNodeLabelsAcceptedByRM(labels != null);
synchronized (ResourceTrackerForLabels.class) {
      receivedNMRegister=true;
      ResourceTrackerForLabels.class.notifyAll();
    }
    return response;
  }
  public void waitTillHeartbeat() throws InterruptedException {
    if (receivedNMHeartbeat) {
      return;
    }
    int i=15;
    while (!receivedNMHeartbeat && i > 0) {
synchronized (ResourceTrackerForLabels.class) {
        if (!receivedNMHeartbeat) {
          System.out.println("In ResourceTrackerForLabels waiting for heartbeat : " + System.currentTimeMillis());
          ResourceTrackerForLabels.class.wait(200);
          i--;
        }
      }
    }
    if (!receivedNMHeartbeat) {
      Assert.fail("Heartbeat dint receive even after waiting");
    }
  }
  public void waitTillRegister() throws InterruptedException {
    if (receivedNMRegister) {
      return;
    }
    while (!receivedNMRegister) {
synchronized (ResourceTrackerForLabels.class) {
        ResourceTrackerForLabels.class.wait();
      }
    }
  }
  /** 
 * Flag to indicate received any
 */
  public void resetNMHeartbeatReceiveFlag(){
synchronized (ResourceTrackerForLabels.class) {
      receivedNMHeartbeat=false;
    }
  }
  @Override public NodeHeartbeatResponse nodeHeartbeat(  NodeHeartbeatRequest request) throws YarnException, IOException {
    System.out.println("RTS receive heartbeat : " + System.currentTimeMillis());
    labels=request.getNodeLabels();
    NodeStatus nodeStatus=request.getNodeStatus();
    nodeStatus.setResponseId(heartbeatID++);
    NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartbeatID,NodeAction.NORMAL,null,null,null,null,1000L);
    nhResponse.setNextHeartBeatInterval(Long.MAX_VALUE);
    nhResponse.setAreNodeLabelsAcceptedByRM(labels != null);
synchronized (ResourceTrackerForLabels.class) {
      receivedNMHeartbeat=true;
      ResourceTrackerForLabels.class.notifyAll();
    }
    return nhResponse;
  }
  @Override public UnRegisterNodeManagerResponse unRegisterNodeManager(  UnRegisterNodeManagerRequest request) throws YarnException, IOException {
    return null;
  }
}
