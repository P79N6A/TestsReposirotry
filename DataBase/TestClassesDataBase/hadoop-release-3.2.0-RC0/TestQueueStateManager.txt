/** 
 * Test QueueStateManager.
 */
public class TestQueueStateManager {
  private static final String Q1="q1";
  private static final String Q2="q2";
  private static final String Q3="q3";
  private final static String Q1_PATH=CapacitySchedulerConfiguration.ROOT + "." + Q1;
  private final static String Q2_PATH=Q1_PATH + "." + Q2;
  private final static String Q3_PATH=Q1_PATH + "." + Q3;
  private CapacityScheduler cs;
  private YarnConfiguration conf;
  @Test public void testQueueStateManager() throws AccessControlException, YarnException {
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{Q1});
    csConf.setQueues(Q1_PATH,new String[]{Q2,Q3});
    csConf.setCapacity(Q1_PATH,100);
    csConf.setCapacity(Q2_PATH,50);
    csConf.setCapacity(Q3_PATH,50);
    conf=new YarnConfiguration(csConf);
    cs=new CapacityScheduler();
    RMContext rmContext=TestUtils.getMockRMContext();
    cs.setConf(conf);
    cs.setRMContext(rmContext);
    cs.init(conf);
    @SuppressWarnings("rawtypes") QueueStateManager stateManager=cs.getCapacitySchedulerQueueManager().getQueueStateManager();
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q1).getState());
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q2).getState());
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q3).getState());
    stateManager.stopQueue(Q2);
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
    stateManager.stopQueue(Q1);
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q1).getState());
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q3).getState());
    Assert.assertTrue(stateManager.canDelete(Q1));
    Assert.assertTrue(stateManager.canDelete(Q2));
    Assert.assertTrue(stateManager.canDelete(Q3));
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
    stateManager.activateQueue(Q1);
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q1).getState());
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q3).getState());
    stateManager.activateQueue(Q2);
    stateManager.activateQueue(Q3);
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q2).getState());
    Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q3).getState());
    Assert.assertFalse(stateManager.canDelete(Q1));
    Assert.assertFalse(stateManager.canDelete(Q2));
    Assert.assertFalse(stateManager.canDelete(Q3));
    ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
    String userName="testUser";
    cs.getQueue(Q2).submitApplication(appId,userName,Q2);
    FiCaSchedulerApp app=getMockApplication(appId,userName,Resources.createResource(4,0));
    cs.getQueue(Q2).submitApplicationAttempt(app,userName);
    stateManager.stopQueue(Q1);
    Assert.assertEquals(QueueState.DRAINING,cs.getQueue(Q1).getState());
    Assert.assertEquals(QueueState.DRAINING,cs.getQueue(Q2).getState());
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q3).getState());
    cs.getQueue(Q2).finishApplicationAttempt(app,Q2);
    cs.getQueue(Q2).finishApplication(appId,userName);
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q1).getState());
    Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
  }
  private FiCaSchedulerApp getMockApplication(  ApplicationId appId,  String user,  Resource amResource){
    FiCaSchedulerApp application=mock(FiCaSchedulerApp.class);
    ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(appId,0);
    doReturn(applicationAttemptId.getApplicationId()).when(application).getApplicationId();
    doReturn(applicationAttemptId).when(application).getApplicationAttemptId();
    doReturn(user).when(application).getUser();
    doReturn(amResource).when(application).getAMResource();
    doReturn(Priority.newInstance(0)).when(application).getPriority();
    doReturn(CommonNodeLabelsManager.NO_LABEL).when(application).getAppAMNodePartitionName();
    doReturn(amResource).when(application).getAMResource(CommonNodeLabelsManager.NO_LABEL);
    when(application.compareInputOrderTo(any(FiCaSchedulerApp.class))).thenCallRealMethod();
    return application;
  }
}
