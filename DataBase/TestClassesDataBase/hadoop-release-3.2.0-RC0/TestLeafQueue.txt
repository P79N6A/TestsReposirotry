public class TestLeafQueue {
  private final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  private static final Log LOG=LogFactory.getLog(TestLeafQueue.class);
  RMContext rmContext;
  RMContext spyRMContext;
  ResourceRequest amResourceRequest;
  CapacityScheduler cs;
  CapacitySchedulerConfiguration csConf;
  CapacitySchedulerContext csContext;
  CSQueue root;
  Map<String,CSQueue> queues;
  final static int GB=1024;
  final static String DEFAULT_RACK="/default";
  private final ResourceCalculator resourceCalculator=new DefaultResourceCalculator();
  private final ResourceCalculator dominantResourceCalculator=new DominantResourceCalculator();
  @Before public void setUp() throws Exception {
    setUpInternal(resourceCalculator);
  }
  private void setUpWithDominantResourceCalculator() throws Exception {
    setUpInternal(dominantResourceCalculator);
  }
  private void setUpInternal(  ResourceCalculator rC) throws Exception {
    CapacityScheduler spyCs=new CapacityScheduler();
    queues=new HashMap<String,CSQueue>();
    cs=spy(spyCs);
    rmContext=TestUtils.getMockRMContext();
    spyRMContext=spy(rmContext);
    ConcurrentMap<ApplicationId,RMApp> spyApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
    RMApp rmApp=mock(RMApp.class);
    when(rmApp.getRMAppAttempt((ApplicationAttemptId)Matchers.any())).thenReturn(null);
    amResourceRequest=mock(ResourceRequest.class);
    when(amResourceRequest.getCapability()).thenReturn(Resources.createResource(0,0));
    when(rmApp.getAMResourceRequests()).thenReturn(Collections.singletonList(amResourceRequest));
    Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
    when(spyRMContext.getRMApps()).thenReturn(spyApps);
    csConf=new CapacitySchedulerConfiguration();
    csConf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
    csConf.setBoolean(CapacitySchedulerConfiguration.RESERVE_CONT_LOOK_ALL_NODES,false);
    final String newRoot="root" + System.currentTimeMillis();
    setupQueueConfiguration(csConf,newRoot);
    YarnConfiguration conf=new YarnConfiguration();
    cs.setConf(conf);
    csContext=mock(CapacitySchedulerContext.class);
    when(csContext.getConfiguration()).thenReturn(csConf);
    when(csContext.getConf()).thenReturn(conf);
    when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
    when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB,32));
    when(csContext.getClusterResource()).thenReturn(Resources.createResource(100 * 16 * GB,100 * 32));
    when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
    when(csContext.getPreemptionManager()).thenReturn(new PreemptionManager());
    when(csContext.getResourceCalculator()).thenReturn(rC);
    when(csContext.getRMContext()).thenReturn(rmContext);
    RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(conf);
    containerTokenSecretManager.rollMasterKey();
    when(csContext.getContainerTokenSecretManager()).thenReturn(containerTokenSecretManager);
    root=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,ROOT,queues,queues,TestUtils.spyHook);
    root.updateClusterResource(Resources.createResource(100 * 16 * GB,100 * 32),new ResourceLimits(Resources.createResource(100 * 16 * GB,100 * 32)));
    ResourceUsage queueResUsage=root.getQueueResourceUsage();
    when(csContext.getClusterResourceUsage()).thenReturn(queueResUsage);
    cs.setRMContext(spyRMContext);
    cs.init(csConf);
    cs.setResourceCalculator(rC);
    cs.start();
    when(spyRMContext.getScheduler()).thenReturn(cs);
    when(spyRMContext.getYarnConfiguration()).thenReturn(new YarnConfiguration());
    when(cs.getNumClusterNodes()).thenReturn(3);
  }
  private static final String A="a";
  private static final String B="b";
  private static final String C="c";
  private static final String C1="c1";
  private static final String D="d";
  private static final String E="e";
  private void setupQueueConfiguration(  CapacitySchedulerConfiguration conf,  final String newRoot){
    conf.setQueues(ROOT,new String[]{newRoot});
    conf.setMaximumCapacity(ROOT,100);
    conf.setAcl(ROOT,QueueACL.SUBMIT_APPLICATIONS," ");
    final String Q_newRoot=ROOT + "." + newRoot;
    conf.setQueues(Q_newRoot,new String[]{A,B,C,D,E});
    conf.setCapacity(Q_newRoot,100);
    conf.setMaximumCapacity(Q_newRoot,100);
    conf.setAcl(Q_newRoot,QueueACL.SUBMIT_APPLICATIONS," ");
    final String Q_A=Q_newRoot + "." + A;
    conf.setCapacity(Q_A,8.5f);
    conf.setMaximumCapacity(Q_A,20);
    conf.setAcl(Q_A,QueueACL.SUBMIT_APPLICATIONS,"*");
    final String Q_B=Q_newRoot + "." + B;
    conf.setCapacity(Q_B,80);
    conf.setMaximumCapacity(Q_B,99);
    conf.setAcl(Q_B,QueueACL.SUBMIT_APPLICATIONS,"*");
    final String Q_C=Q_newRoot + "." + C;
    conf.setCapacity(Q_C,1.5f);
    conf.setMaximumCapacity(Q_C,10);
    conf.setAcl(Q_C,QueueACL.SUBMIT_APPLICATIONS," ");
    conf.setQueues(Q_C,new String[]{C1});
    final String Q_C1=Q_C + "." + C1;
    conf.setCapacity(Q_C1,100);
    final String Q_D=Q_newRoot + "." + D;
    conf.setCapacity(Q_D,9);
    conf.setMaximumCapacity(Q_D,11);
    conf.setAcl(Q_D,QueueACL.SUBMIT_APPLICATIONS,"user_d");
    final String Q_E=Q_newRoot + "." + E;
    conf.setCapacity(Q_E,1);
    conf.setMaximumCapacity(Q_E,1);
    conf.setAcl(Q_E,QueueACL.SUBMIT_APPLICATIONS,"user_e");
  }
  static LeafQueue stubLeafQueue(  LeafQueue queue){
    CSQueue parent=queue.getParent();
    doNothing().when(parent).completedContainer(any(Resource.class),any(FiCaSchedulerApp.class),any(FiCaSchedulerNode.class),any(RMContainer.class),any(ContainerStatus.class),any(RMContainerEventType.class),any(CSQueue.class),anyBoolean());
    doReturn(true).when(parent).accept(any(Resource.class),any(ResourceCommitRequest.class));
    doNothing().when(parent).apply(any(Resource.class),any(ResourceCommitRequest.class));
    return queue;
  }
  @Test public void testInitializeQueue() throws Exception {
    final float epsilon=1e-5f;
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    assertEquals(0.085,a.getCapacity(),epsilon);
    assertEquals(0.085,a.getAbsoluteCapacity(),epsilon);
    assertEquals(0.2,a.getMaximumCapacity(),epsilon);
    assertEquals(0.2,a.getAbsoluteMaximumCapacity(),epsilon);
    LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
    assertEquals(0.80,b.getCapacity(),epsilon);
    assertEquals(0.80,b.getAbsoluteCapacity(),epsilon);
    assertEquals(0.99,b.getMaximumCapacity(),epsilon);
    assertEquals(0.99,b.getAbsoluteMaximumCapacity(),epsilon);
    ParentQueue c=(ParentQueue)queues.get(C);
    assertEquals(0.015,c.getCapacity(),epsilon);
    assertEquals(0.015,c.getAbsoluteCapacity(),epsilon);
    assertEquals(0.1,c.getMaximumCapacity(),epsilon);
    assertEquals(0.1,c.getAbsoluteMaximumCapacity(),epsilon);
    Resource clusterResource=Resource.newInstance(50 * GB,50);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    assertEquals(Resource.newInstance(1 * GB,1),a.calculateAndGetAMResourceLimit());
    assertEquals(Resource.newInstance(5 * GB,1),b.calculateAndGetAMResourceLimit());
  }
  @Test public void testSingleQueueOneUserMetrics() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(B));
    final String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals((int)(node_0.getTotalResource().getMemorySize() * a.getCapacity()) - (1 * GB),a.getMetrics().getAvailableMB());
  }
  @Test public void testUserQueueAcl() throws Exception {
    LeafQueue d=stubLeafQueue((LeafQueue)queues.get(D));
    final String user_d="user_d";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,1);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_d,d,null,spyRMContext);
    d.submitApplicationAttempt(app_0,user_d);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(0,2);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_d,d,null,spyRMContext);
    d.submitApplicationAttempt(app_1,user_d);
  }
  @Test public void testPolicyConfiguration() throws Exception {
    CapacitySchedulerConfiguration testConf=new CapacitySchedulerConfiguration();
    String tproot=ROOT + "." + "testPolicyRoot"+ System.currentTimeMillis();
    OrderingPolicy<FiCaSchedulerApp> comPol=testConf.<FiCaSchedulerApp>getAppOrderingPolicy(tproot);
  }
  @Test public void testAppAttemptMetrics() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(B));
    final String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,1);
    AppAddedSchedulerEvent addAppEvent=new AppAddedSchedulerEvent(appAttemptId_0.getApplicationId(),a.getQueueName(),user_0);
    cs.handle(addAppEvent);
    AppAttemptAddedSchedulerEvent addAttemptEvent=new AppAttemptAddedSchedulerEvent(appAttemptId_0,false);
    cs.handle(addAttemptEvent);
    AppAttemptRemovedSchedulerEvent event=new AppAttemptRemovedSchedulerEvent(appAttemptId_0,RMAppAttemptState.FAILED,false);
    cs.handle(event);
    assertEquals(0,a.getMetrics().getAppsPending());
    assertEquals(0,a.getMetrics().getAppsFailed());
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(0,2);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,null,spyRMContext);
    app_1.setAMResource(Resource.newInstance(100,1));
    a.submitApplicationAttempt(app_1,user_0);
    assertEquals(1,a.getMetrics().getAppsSubmitted());
    assertEquals(1,a.getMetrics().getAppsPending());
    assertEquals(1,a.getUser(user_0).getActiveApplications());
    assertEquals(app_1.getAMResource().getMemorySize(),a.getMetrics().getUsedAMResourceMB());
    assertEquals(app_1.getAMResource().getVirtualCores(),a.getMetrics().getUsedAMResourceVCores());
    event=new AppAttemptRemovedSchedulerEvent(appAttemptId_0,RMAppAttemptState.FINISHED,false);
    cs.handle(event);
    AppRemovedSchedulerEvent rEvent=new AppRemovedSchedulerEvent(appAttemptId_0.getApplicationId(),RMAppState.FINISHED);
    cs.handle(rEvent);
    assertEquals(1,a.getMetrics().getAppsSubmitted());
    assertEquals(0,a.getMetrics().getAppsPending());
    assertEquals(0,a.getMetrics().getAppsFailed());
    assertEquals(1,a.getMetrics().getAppsCompleted());
    QueueMetrics userMetrics=a.getMetrics().getUserMetrics(user_0);
    assertEquals(1,userMetrics.getAppsSubmitted());
  }
  @Test public void testFairConfiguration() throws Exception {
    CapacitySchedulerConfiguration testConf=new CapacitySchedulerConfiguration();
    String tproot=ROOT + "." + "testPolicyRoot"+ System.currentTimeMillis();
    OrderingPolicy<FiCaSchedulerApp> schedOrder=testConf.<FiCaSchedulerApp>getAppOrderingPolicy(tproot);
    String policyType=CapacitySchedulerConfiguration.PREFIX + tproot + "."+ CapacitySchedulerConfiguration.ORDERING_POLICY;
    testConf.set(policyType,CapacitySchedulerConfiguration.FAIR_APP_ORDERING_POLICY);
    schedOrder=testConf.<FiCaSchedulerApp>getAppOrderingPolicy(tproot);
    FairOrderingPolicy fop=(FairOrderingPolicy<FiCaSchedulerApp>)schedOrder;
    assertFalse(fop.getSizeBasedWeight());
    String sbwConfig=CapacitySchedulerConfiguration.PREFIX + tproot + "."+ CapacitySchedulerConfiguration.ORDERING_POLICY+ "."+ FairOrderingPolicy.ENABLE_SIZE_BASED_WEIGHT;
    testConf.set(sbwConfig,"true");
    schedOrder=testConf.<FiCaSchedulerApp>getAppOrderingPolicy(tproot);
    fop=(FairOrderingPolicy<FiCaSchedulerApp>)schedOrder;
    assertTrue(fop.getSizeBasedWeight());
  }
  @Test public void testSingleQueueWithOneUser() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    final String user_0="user_0";
    AbstractUsersManager activeUserManager=a.getAbstractUsersManager();
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,activeUserManager,spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,activeUserManager,spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
    assertEquals(0 * GB,a.getMetrics().getAvailableMB());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
    a.setUserLimitFactor(10);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(3 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(3 * GB,a.getMetrics().getAllocatedMB());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
    a.setMaxCapacity(0.5f);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
    for (    RMContainer rmContainer : app_0.getLiveContainers()) {
      a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
    for (    RMContainer rmContainer : app_1.getLiveContainers()) {
      a.completedContainer(clusterResource,app_1,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    assertEquals(0 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(0 * GB,a.getMetrics().getAllocatedMB());
    assertEquals((int)(a.getCapacity() * node_0.getTotalResource().getMemorySize()),a.getMetrics().getAvailableMB());
  }
  @Test public void testDRFUsageRatioRounding() throws Exception {
    CSAssignment assign;
    setUpWithDominantResourceCalculator();
    LeafQueue b=stubLeafQueue((LeafQueue)queues.get(E));
    final String user0="user_0";
    final ApplicationAttemptId appAttemptId0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app0=new FiCaSchedulerApp(appAttemptId0,user0,b,b.getAbstractUsersManager(),spyRMContext);
    b.submitApplicationAttempt(app0,user0);
    String host0="127.0.0.1";
    FiCaSchedulerNode node0=TestUtils.getMockNode(host0,DEFAULT_RACK,0,80 * GB,100);
    int numNodes=1000;
    Resource clusterResource=Resources.createResource(numNodes * (80 * GB),numNodes * 100);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    b.setUserLimit(50);
    b.setUserLimitFactor(1000000);
    b.setMaxCapacity(1.0f);
    b.setAbsoluteCapacity(0.00001f);
    Priority priority=TestUtils.createMockPriority(1);
    app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,20 * GB,29,1,true,priority,recordFactory,NO_LABEL)));
    assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,10 * GB,29,2,true,priority,recordFactory,NO_LABEL)));
    assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    assertTrue("Still within limits, should assign",assign.getResource().getMemorySize() > 0);
  }
  private void applyCSAssignment(  Resource clusterResource,  CSAssignment assign,  LeafQueue q,  final Map<NodeId,FiCaSchedulerNode> nodes,  final Map<ApplicationAttemptId,FiCaSchedulerApp> apps) throws IOException {
    TestUtils.applyResourceCommitRequest(clusterResource,assign,nodes,apps);
  }
  @Test public void testDRFUserLimits() throws Exception {
    setUpWithDominantResourceCalculator();
    LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
    b.setMaxCapacity(1.0f);
    final String user0="user_0";
    final String user1="user_1";
    final ApplicationAttemptId appAttemptId0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app0=new FiCaSchedulerApp(appAttemptId0,user0,b,b.getAbstractUsersManager(),spyRMContext);
    b.submitApplicationAttempt(app0,user0);
    final ApplicationAttemptId appAttemptId2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app2=new FiCaSchedulerApp(appAttemptId2,user1,b,b.getAbstractUsersManager(),spyRMContext);
    b.submitApplicationAttempt(app2,user1);
    String host0="127.0.0.1";
    FiCaSchedulerNode node0=TestUtils.getMockNode(host0,DEFAULT_RACK,0,8 * GB,100);
    String host1="127.0.0.2";
    FiCaSchedulerNode node1=TestUtils.getMockNode(host1,DEFAULT_RACK,0,8 * GB,100);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node0.getNodeID(),node0,node1.getNodeID(),node1);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app0.getApplicationAttemptId(),app0,app2.getApplicationAttemptId(),app2);
    int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 100);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    when(csContext.getClusterResource()).thenReturn(clusterResource);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,40,10,true,priority,recordFactory,NO_LABEL)));
    app2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,10,10,true,priority,recordFactory,NO_LABEL)));
    b.setUserLimit(50);
    b.setUserLimitFactor(2);
    User queueUser0=b.getUser(user0);
    User queueUser1=b.getUser(user1);
    assertEquals("There should 2 active users!",2,b.getAbstractUsersManager().getNumActiveUsers());
    CSAssignment assign;
    do {
      assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
      LOG.info(assign.toString());
      applyCSAssignment(clusterResource,assign,b,nodes,apps);
    }
 while (assign.getResource().getMemorySize() > 0 && assign.getAssignmentInformation().getNumReservations() == 0);
    do {
      assign=b.assignContainers(clusterResource,node1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
      applyCSAssignment(clusterResource,assign,b,nodes,apps);
    }
 while (assign.getResource().getMemorySize() > 0 && assign.getAssignmentInformation().getNumReservations() == 0);
    assertTrue("Verify user_0 got resources ",queueUser0.getUsed().getMemorySize() > 0);
    assertTrue("Verify user_1 got resources ",queueUser1.getUsed().getMemorySize() > 0);
    assertTrue("Expected AbsoluteUsedCapacity > 0.95, got: " + b.getAbsoluteUsedCapacity(),b.getAbsoluteUsedCapacity() > 0.95);
    float expectedRatio=queueUser0.getUsed().getVirtualCores() / (numNodes * 100.0f) + queueUser1.getUsed().getMemorySize() / (numNodes * 8.0f * GB);
    assertEquals(expectedRatio,b.getUsersManager().getUsageRatio(""),0.001);
    numNodes=3;
    clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 100);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    expectedRatio=queueUser0.getUsed().getVirtualCores() / (numNodes * 100.0f) + queueUser1.getUsed().getMemorySize() / (numNodes * 8.0f * GB);
    assertEquals(expectedRatio,b.getUsersManager().getUsageRatio(""),0.001);
  }
  @Test public void testUserLimits() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    when(csContext.getClusterResource()).thenReturn(Resources.createResource(16 * GB,32));
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_1,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,3 * GB,2,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    a.setUserLimit(50);
    a.setUserLimitFactor(2);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    assertEquals(2,a.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(3 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(7 * GB,a.getUsedResources().getMemorySize());
    assertEquals(6 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals("There should only be 1 active user!",1,a.getAbstractUsersManager().getNumActiveUsers());
  }
  @Test public void testUserSpecificUserLimits() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    csConf.setUserLimit(a.getQueuePath(),50);
    csConf.setFloat("yarn.scheduler.capacity." + a.getQueuePath() + ".user-settings.user_0."+ CapacitySchedulerConfiguration.USER_WEIGHT,1.5f);
    when(csContext.getClusterResource()).thenReturn(Resources.createResource(16 * GB,32));
    Assert.assertNull(a.getUserWeights().get("user_0"));
    a.reinitialize(a,csContext.getClusterResource());
    assertEquals(1.5,a.getUserWeights().get("user_0").floatValue(),0.0);
    a.setMaxCapacity(1.0f);
    a.setUserLimit(50);
    a.setUserLimitFactor(2);
    final String user_0="user_0";
    final String user_1="user_1";
    a.getUsersManager().getUserAndAddIfAbsent(user_0).setWeight(1.5f);
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_1,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,3,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    assertEquals(2,a.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(4 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(8 * GB,a.getUsedResources().getMemorySize());
    assertEquals(8 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(9 * GB,a.getUsedResources().getMemorySize());
    assertEquals(8 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_0.getTotalPendingRequestsPerPartition().get("").getMemorySize());
    assertEquals(1 * GB,app_1.getTotalPendingRequestsPerPartition().get("").getMemorySize());
  }
  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testComputeUserLimitAndSetHeadroom() throws IOException {
    LeafQueue qb=stubLeafQueue((LeafQueue)queues.get(B));
    qb.setMaxCapacity(1.0f);
    final String user_0="user_0";
    final String user_1="user_1";
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),1);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    CapacitySchedulerQueueManager mockCapacitySchedulerQueueManager=mock(CapacitySchedulerQueueManager.class);
    QueueStateManager mockQueueStateManager=mock(QueueStateManager.class);
    when(mockCapacitySchedulerQueueManager.getQueueStateManager()).thenReturn(mockQueueStateManager);
    when(csContext.getCapacitySchedulerQueueManager()).thenReturn(mockCapacitySchedulerQueueManager);
    qb.setUserLimit(100);
    qb.setUserLimitFactor(1);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,qb,qb.getAbstractUsersManager(),spyRMContext);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=new HashMap<>();
    apps.put(app_0.getApplicationAttemptId(),app_0);
    qb.submitApplicationAttempt(app_0,user_0);
    Priority u0Priority=TestUtils.createMockPriority(1);
    SchedulerRequestKey u0SchedKey=toSchedulerKey(u0Priority);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,u0Priority,recordFactory)));
    assertEquals("There should only be 1 active user!",1,qb.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,qb.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),qb,nodes,apps);
    qb.computeUserLimitAndSetHeadroom(app_0,clusterResource,"",SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,null);
    assertEquals(9 * GB,app_0.getHeadroom().getMemorySize());
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,qb,qb.getAbstractUsersManager(),spyRMContext);
    apps.put(app_2.getApplicationAttemptId(),app_2);
    Priority u1Priority=TestUtils.createMockPriority(2);
    SchedulerRequestKey u1SchedKey=toSchedulerKey(u1Priority);
    app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,u1Priority,recordFactory)));
    qb.submitApplicationAttempt(app_2,user_1);
    applyCSAssignment(clusterResource,qb.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),qb,nodes,apps);
    qb.computeUserLimitAndSetHeadroom(app_0,clusterResource,"",SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,null);
    assertEquals(8 * GB,qb.getUsedResources().getMemorySize());
    assertEquals(4 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(8 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(4 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(8 * GB,app_2.getHeadroom().getMemorySize());
    qb.finishApplication(app_0.getApplicationId(),user_0);
    qb.finishApplication(app_2.getApplicationId(),user_1);
    qb.releaseResource(clusterResource,app_0,Resource.newInstance(4 * GB,1),null,null);
    qb.releaseResource(clusterResource,app_2,Resource.newInstance(4 * GB,1),null,null);
    qb.setUserLimit(50);
    qb.setUserLimitFactor(1);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,qb,qb.getAbstractUsersManager(),spyRMContext);
    apps.put(app_1.getApplicationAttemptId(),app_1);
    final ApplicationAttemptId appAttemptId_3=TestUtils.getMockApplicationAttemptId(3,0);
    FiCaSchedulerApp app_3=new FiCaSchedulerApp(appAttemptId_3,user_1,qb,qb.getAbstractUsersManager(),spyRMContext);
    apps.put(app_3.getApplicationAttemptId(),app_3);
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,u0Priority,recordFactory)));
    app_3.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,u1Priority,recordFactory)));
    qb.submitApplicationAttempt(app_1,user_0);
    qb.submitApplicationAttempt(app_3,user_1);
    applyCSAssignment(clusterResource,qb.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),qb,nodes,apps);
    applyCSAssignment(clusterResource,qb.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),qb,nodes,apps);
    qb.computeUserLimitAndSetHeadroom(app_3,clusterResource,"",SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,null);
    assertEquals(4 * GB,qb.getUsedResources().getMemorySize());
    assertEquals(5 * GB,app_3.getHeadroom().getMemorySize());
    assertEquals(5 * GB,app_1.getHeadroom().getMemorySize());
    final ApplicationAttemptId appAttemptId_4=TestUtils.getMockApplicationAttemptId(4,0);
    FiCaSchedulerApp app_4=new FiCaSchedulerApp(appAttemptId_4,user_0,qb,qb.getAbstractUsersManager(),spyRMContext);
    apps.put(app_4.getApplicationAttemptId(),app_4);
    qb.submitApplicationAttempt(app_4,user_0);
    app_4.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,6 * GB,1,true,u0Priority,recordFactory)));
    applyCSAssignment(clusterResource,qb.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),qb,nodes,apps);
    qb.computeUserLimitAndSetHeadroom(app_4,clusterResource,"",SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,null);
    qb.computeUserLimitAndSetHeadroom(app_3,clusterResource,"",SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,null);
    assertEquals(6 * GB,app_3.getHeadroom().getMemorySize());
    assertEquals(10 * GB,qb.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_4.getHeadroom().getMemorySize());
  }
  @Test public void testHeadroomWithMaxCap() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_2,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1,app_2.getApplicationAttemptId(),app_2);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),1);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    a.setUserLimit(50);
    a.setUserLimitFactor(2);
    ParentQueue root=(ParentQueue)queues.get(CapacitySchedulerConfiguration.ROOT);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    assertEquals("There should only be 1 active user!",1,a.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(1 * GB,app_1.getHeadroom().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(3 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(0 * GB,app_1.getHeadroom().getMemorySize());
    a.setMaxCapacity(.1f);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
    assertEquals(2,a.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(3 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(0 * GB,app_1.getHeadroom().getMemorySize());
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,0,true,priority,recordFactory)));
    assertEquals(1,a.getAbstractUsersManager().getNumActiveUsers());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(0 * GB,app_2.getHeadroom().getMemorySize());
  }
  @Test public void testUserHeadroomMultiApp() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_2,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,16 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,16 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1,app_2.getApplicationAttemptId(),app_2);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (16 * GB),1);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(2 * GB,app_1.getHeadroom().getMemorySize());
    assertEquals(3 * GB,app_2.getHeadroom().getMemorySize());
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(1 * GB,app_1.getHeadroom().getMemorySize());
    assertEquals(3 * GB,app_2.getHeadroom().getMemorySize());
    RMContainer rmContainer=app_0.getLiveContainers().iterator().next();
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    assertEquals(2 * GB,app_0.getHeadroom().getMemorySize());
    assertEquals(2 * GB,app_1.getHeadroom().getMemorySize());
  }
  @Test public void testSingleQueueWithMultipleUsers() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    final String user_0="user_0";
    final String user_1="user_1";
    final String user_2="user_2";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_2,user_1);
    final ApplicationAttemptId appAttemptId_3=TestUtils.getMockApplicationAttemptId(3,0);
    FiCaSchedulerApp app_3=new FiCaSchedulerApp(appAttemptId_3,user_2,a,a.getAbstractUsersManager(),spyRMContext);
    a.submitApplicationAttempt(app_3,user_2);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1,app_2.getApplicationAttemptId(),app_2,app_3.getApplicationAttemptId(),app_3);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    when(csContext.getClusterResource()).thenReturn(clusterResource);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,10,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,10,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    a.setUserLimit(25);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,3 * GB,1,true,priority,recordFactory)));
    app_3.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    a.setUserLimitFactor(10);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(5 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(6 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    a.setMaxCapacity(0.5f);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(6 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    a.setMaxCapacity(1.0f);
    a.setUserLimitFactor(1);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(7 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(8 * GB,a.getUsedResources().getMemorySize());
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_3.getCurrentConsumption().getMemorySize());
    for (    RMContainer rmContainer : app_0.getLiveContainers()) {
      a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    assertEquals(5 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(3 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_3.getCurrentConsumption().getMemorySize());
    for (    RMContainer rmContainer : app_2.getLiveContainers()) {
      a.completedContainer(clusterResource,app_2,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_3.getCurrentConsumption().getMemorySize());
    for (    RMContainer rmContainer : app_3.getLiveContainers()) {
      a.completedContainer(clusterResource,app_3,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    assertEquals(0 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  }
  @Test public void testReservation() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,4 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=2;
    Resource clusterResource=Resources.createResource(numNodes * (4 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
    assertEquals(0 * GB,a.getMetrics().getAvailableMB());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(6 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(2 * GB,node_0.getAllocatedResource().getMemorySize());
    assertEquals(4 * GB,a.getMetrics().getReservedMB());
    assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
    RMContainer rmContainer=app_0.getLiveContainers().iterator().next();
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(5 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(1 * GB,node_0.getAllocatedResource().getMemorySize());
    assertEquals(4 * GB,a.getMetrics().getReservedMB());
    assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
    rmContainer=app_0.getLiveContainers().iterator().next();
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(4 * GB,node_0.getAllocatedResource().getMemorySize());
    assertEquals(0 * GB,a.getMetrics().getReservedMB());
    assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
  }
  @Test public void testReservationExchange() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setMaxCapacity(1.0f);
    a.setUserLimitFactor(10);
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_1);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,4 * GB);
    String host_1="127.0.0.2";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,4 * GB);
    when(csContext.getNode(node_0.getNodeID())).thenReturn(node_0);
    when(csContext.getNode(node_1.getNodeID())).thenReturn(node_1);
    when(csContext.getClusterResource()).thenReturn(Resource.newInstance(8,1));
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
    final int numNodes=3;
    Resource clusterResource=Resources.createResource(numNodes * (4 * GB),numNodes * 16);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(4 * GB,16));
    when(a.getMaximumAllocation()).thenReturn(Resources.createResource(4 * GB,16));
    when(a.getMinimumAllocationFactor()).thenReturn(0.25f);
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(1 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(2 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(6 * GB,a.getUsedResources().getMemorySize());
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(2 * GB,node_0.getAllocatedResource().getMemorySize());
    RMContainer rmContainer=app_0.getLiveContainers().iterator().next();
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(5 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(1 * GB,node_0.getAllocatedResource().getMemorySize());
    assertEquals(1,app_1.getReReservations(toSchedulerKey(priority)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(5 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(1 * GB,node_0.getAllocatedResource().getMemorySize());
    assertEquals(2,app_1.getReReservations(toSchedulerKey(priority)));
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(9 * GB,a.getUsedResources().getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(4 * GB,node_1.getAllocatedResource().getMemorySize());
    assertEquals(2,app_1.getReReservations(toSchedulerKey(priority)));
    rmContainer=app_0.getLiveContainers().iterator().next();
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    assertEquals(4 * GB,a.getUsedResources().getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(4 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentReservation().getMemorySize());
    assertEquals(0 * GB,node_0.getAllocatedResource().getMemorySize());
  }
  private void verifyContainerAllocated(  CSAssignment assignment,  NodeType nodeType){
    Assert.assertTrue(Resources.greaterThan(resourceCalculator,null,assignment.getResource(),Resources.none()));
    Assert.assertTrue(assignment.getAssignmentInformation().getNumAllocations() > 0);
    Assert.assertEquals(nodeType,assignment.getType());
  }
  private void verifyNoContainerAllocated(  CSAssignment assignment){
    Assert.assertTrue(Resources.equals(assignment.getResource(),Resources.none()));
    Assert.assertTrue(assignment.getAssignmentInformation().getNumAllocations() == 0);
  }
  @Test public void testLocalityScheduling() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(B));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    String host_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,8 * GB);
    String host_1="127.0.0.2";
    String rack_1="rack_1";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,rack_1,0,8 * GB);
    String host_2="127.0.0.3";
    String rack_2="rack_2";
    FiCaSchedulerNode node_2=TestUtils.getMockNode(host_2,rack_2,0,8 * GB);
    String host_3="127.0.0.4";
    FiCaSchedulerNode node_3=TestUtils.getMockNode(host_3,rack_1,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1,node_2.getNodeID(),node_2,node_3.getNodeID(),node_3);
    final int numNodes=3;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    CSAssignment assignment=null;
    SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(2,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(3,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
    assertEquals(4,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(2,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,3,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,4,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    assertEquals(4,app_0.getOutstandingAsksCount(schedulerKey));
    doReturn(true).when(a).getRackLocalityFullReset();
    doReturn(1).when(a).getNodeLocalityDelay();
    assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(4,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    doReturn(false).when(a).getRackLocalityFullReset();
    assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
    assertEquals(2,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(2,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
    assertEquals(3,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey));
    app_0.resetSchedulingOpportunities(schedulerKey);
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,100,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,100,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,100,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    for (int i=0; i < numNodes; i++) {
      assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
      applyCSAssignment(clusterResource,assignment,a,nodes,apps);
      verifyNoContainerAllocated(assignment);
      assertEquals(i + 1,app_0.getSchedulingOpportunities(schedulerKey));
    }
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
    assertEquals(numNodes + 1,app_0.getSchedulingOpportunities(schedulerKey));
  }
  @Test public void testRackLocalityDelayScheduling() throws Exception {
    csConf.setInt(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,2);
    csConf.setInt(CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,1);
    Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
    CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,ROOT,newQueues,queues,TestUtils.spyHook);
    root.reinitialize(newRoot,cs.getClusterResource());
    LeafQueue a=stubLeafQueue((LeafQueue)newQueues.get(B));
    assertEquals(2,a.getNodeLocalityDelay());
    assertEquals(1,a.getRackLocalityAdditionalDelay());
    String user1="user_1";
    final ApplicationAttemptId appAttemptId1=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app1=new FiCaSchedulerApp(appAttemptId1,user1,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app1,user1);
    String host1="127.0.0.1";
    String host2="127.0.0.2";
    String host3="127.0.0.3";
    String host4="127.0.0.4";
    String rack1="rack_1";
    String rack2="rack_2";
    String rack3="rack_3";
    FiCaSchedulerNode node2=TestUtils.getMockNode(host3,rack2,0,8 * GB);
    FiCaSchedulerNode node3=TestUtils.getMockNode(host4,rack3,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app1.getApplicationAttemptId(),app1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node2.getNodeID(),node2,node3.getNodeID(),node3);
    final int numNodes=5;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(spyRMContext.getScheduler().getNumClusterNodes()).thenReturn(numNodes);
    newRoot.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    List<ResourceRequest> app1Requests1=new ArrayList<ResourceRequest>();
    app1Requests1.add(TestUtils.createResourceRequest(host1,1 * GB,1,true,priority,recordFactory));
    app1Requests1.add(TestUtils.createResourceRequest(rack1,1 * GB,1,true,priority,recordFactory));
    app1Requests1.add(TestUtils.createResourceRequest(host2,1 * GB,1,true,priority,recordFactory));
    app1Requests1.add(TestUtils.createResourceRequest(rack2,1 * GB,1,true,priority,recordFactory));
    app1Requests1.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory));
    app1.updateResourceRequests(app1Requests1);
    CSAssignment assignment=null;
    SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
    assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(1,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(2,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(0,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(2,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.RACK_LOCAL,assignment.getType());
    a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(3,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(2,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(4,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.OFF_SWITCH,assignment.getType());
    doReturn(10).when(a).getRackLocalityAdditionalDelay();
    assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(5,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.NODE_LOCAL,assignment.getType());
    assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    assertEquals(6,app1.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app1.getOutstandingAsksCount(schedulerKey));
    assertEquals(NodeType.OFF_SWITCH,assignment.getType());
  }
  @Test public void testApplicationPriorityScheduling() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    String host_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,8 * GB);
    String host_1="127.0.0.2";
    String rack_1="rack_1";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,rack_1,0,8 * GB);
    String host_2="127.0.0.3";
    String rack_2="rack_2";
    FiCaSchedulerNode node_2=TestUtils.getMockNode(host_2,rack_2,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1,node_2.getNodeID(),node_2);
    final int numNodes=3;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),1);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    Priority priority_1=TestUtils.createMockPriority(1);
    SchedulerRequestKey schedulerKey1=toSchedulerKey(priority_1);
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,1,true,priority_1,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority_1,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority_1,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority_1,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
    Priority priority_2=TestUtils.createMockPriority(2);
    SchedulerRequestKey schedulerKey2=toSchedulerKey(priority_2);
    app_0_requests_0.add(TestUtils.createResourceRequest(host_2,2 * GB,1,true,priority_2,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_2,2 * GB,1,true,priority_2,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority_2,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    CSAssignment assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey1));
    assertEquals(2,app_0.getOutstandingAsksCount(schedulerKey1));
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey2));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey2));
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(2,app_0.getSchedulingOpportunities(schedulerKey1));
    assertEquals(2,app_0.getOutstandingAsksCount(schedulerKey1));
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey2));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey2));
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
    assertEquals(3,app_0.getSchedulingOpportunities(schedulerKey1));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey1));
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey2));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey2));
    assignment=a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey1));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey1));
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey2));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey2));
    assignment=a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey1));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey1));
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey2));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey2));
  }
  @Test public void testSchedulingConstraints() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    String host_0_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0_0=TestUtils.getMockNode(host_0_0,rack_0,0,8 * GB);
    String host_0_1="127.0.0.2";
    FiCaSchedulerNode node_0_1=TestUtils.getMockNode(host_0_1,rack_0,0,8 * GB);
    String host_1_0="127.0.0.3";
    String rack_1="rack_1";
    FiCaSchedulerNode node_1_0=TestUtils.getMockNode(host_1_0,rack_1,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0_0.getNodeID(),node_0_0,node_0_1.getNodeID(),node_0_1,node_1_0.getNodeID(),node_1_0);
    final int numNodes=3;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    CSAssignment assignment=a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_1_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey));
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    assignment=a.assignContainers(clusterResource,node_0_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_1_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey));
  }
  @Test(timeout=30000) public void testActivateApplicationAfterQueueRefresh() throws Exception {
    LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
    final String user_e="user_e";
    when(amResourceRequest.getCapability()).thenReturn(Resources.createResource(1 * GB,0));
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_0,user_e);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_1,user_e);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_2,user_e);
    assertEquals(2,e.getNumActiveApplications());
    assertEquals(1,e.getNumPendingApplications());
    csConf.setDouble(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,CapacitySchedulerConfiguration.DEFAULT_MAXIMUM_APPLICATIONMASTERS_RESOURCE_PERCENT * 2);
    Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
    CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,ROOT,newQueues,queues,TestUtils.spyHook);
    queues=newQueues;
    root.reinitialize(newRoot,csContext.getClusterResource());
    assertEquals(3,e.getNumActiveApplications());
    assertEquals(0,e.getNumPendingApplications());
  }
  @Test(timeout=30000) public void testLocalityDelaysAfterQueueRefresh() throws Exception {
    LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
    assertEquals(40,e.getNodeLocalityDelay());
    assertEquals(-1,e.getRackLocalityAdditionalDelay());
    csConf.setInt(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,60);
    csConf.setInt(CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,600);
    Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
    CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,ROOT,newQueues,queues,TestUtils.spyHook);
    root.reinitialize(newRoot,cs.getClusterResource());
    assertEquals(60,e.getNodeLocalityDelay());
    assertEquals(600,e.getRackLocalityAdditionalDelay());
  }
  @Test(timeout=30000) public void testActivateApplicationByUpdatingClusterResource() throws Exception {
    LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
    final String user_e="user_e";
    when(amResourceRequest.getCapability()).thenReturn(Resources.createResource(1 * GB,0));
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_0,user_e);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_1,user_e);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_e,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_2,user_e);
    assertEquals(2,e.getNumActiveApplications());
    assertEquals(1,e.getNumPendingApplications());
    Resource clusterResource=Resources.createResource(200 * 16 * GB,100 * 32);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    assertEquals(3,e.getNumActiveApplications());
    assertEquals(0,e.getNumPendingApplications());
  }
  public boolean hasQueueACL(  List<QueueUserACLInfo> aclInfos,  QueueACL acl){
    for (    QueueUserACLInfo aclInfo : aclInfos) {
      if (aclInfo.getUserAcls().contains(acl)) {
        return true;
      }
    }
    return false;
  }
  @Test public void testInheritedQueueAcls() throws IOException {
    UserGroupInformation user=UserGroupInformation.getCurrentUser();
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
    ParentQueue c=(ParentQueue)queues.get(C);
    LeafQueue c1=stubLeafQueue((LeafQueue)queues.get(C1));
    assertFalse(root.hasAccess(QueueACL.SUBMIT_APPLICATIONS,user));
    assertTrue(a.hasAccess(QueueACL.SUBMIT_APPLICATIONS,user));
    assertTrue(b.hasAccess(QueueACL.SUBMIT_APPLICATIONS,user));
    assertFalse(c.hasAccess(QueueACL.SUBMIT_APPLICATIONS,user));
    assertFalse(c1.hasAccess(QueueACL.SUBMIT_APPLICATIONS,user));
    assertTrue(hasQueueACL(a.getQueueUserAclInfo(user),QueueACL.SUBMIT_APPLICATIONS));
    assertTrue(hasQueueACL(b.getQueueUserAclInfo(user),QueueACL.SUBMIT_APPLICATIONS));
    assertFalse(hasQueueACL(c.getQueueUserAclInfo(user),QueueACL.SUBMIT_APPLICATIONS));
    assertFalse(hasQueueACL(c1.getQueueUserAclInfo(user),QueueACL.SUBMIT_APPLICATIONS));
  }
  @Test public void testLocalityConstraints() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    String host_0_0="127.0.0.1";
    String rack_0="rack_0";
    String host_0_1="127.0.0.2";
    FiCaSchedulerNode node_0_1=TestUtils.getMockNode(host_0_1,rack_0,0,8 * GB);
    String host_1_0="127.0.0.3";
    String rack_1="rack_1";
    FiCaSchedulerNode node_1_0=TestUtils.getMockNode(host_1_0,rack_1,0,8 * GB);
    String host_1_1="127.0.0.4";
    FiCaSchedulerNode node_1_1=TestUtils.getMockNode(host_1_1,rack_1,0,8 * GB);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0_1.getNodeID(),node_0_1,node_1_0.getNodeID(),node_1_0,node_1_1.getNodeID(),node_1_1);
    final int numNodes=4;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 1);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,false,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,false,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0.updateBlacklist(Collections.singletonList(host_0_0),null);
    app_0_requests_0.clear();
    CSAssignment assignment=a.assignContainers(clusterResource,node_0_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assignment=a.assignContainers(clusterResource,node_1_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0.updateBlacklist(Collections.singletonList(host_1_1),null);
    app_0_requests_0.clear();
    assignment=a.assignContainers(clusterResource,node_1_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0.updateBlacklist(Collections.singletonList(rack_1),Collections.singletonList(host_1_1));
    app_0_requests_0.clear();
    assignment=a.assignContainers(clusterResource,node_1_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0.updateBlacklist(null,Collections.singletonList(rack_1));
    app_0_requests_0.clear();
    assignment=a.assignContainers(clusterResource,node_1_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyNoContainerAllocated(assignment);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(1,app_0.getOutstandingAsksCount(schedulerKey));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,false,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,false,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_0_requests_0.clear();
    assignment=a.assignContainers(clusterResource,node_1_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(0,app_0.getOutstandingAsksCount(schedulerKey));
  }
  @Test public void testMaxAMResourcePerQueuePercentAfterQueueRefresh() throws Exception {
    Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    final String newRootName="root" + System.currentTimeMillis();
    setupQueueConfiguration(csConf,newRootName);
    Resource clusterResource=Resources.createResource(100 * 16 * GB,100 * 32);
    CapacitySchedulerContext csContext=mockCSContext(csConf,clusterResource);
    when(csContext.getRMContext()).thenReturn(rmContext);
    csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.1f);
    CSQueue root;
    root=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
    assertEquals(0.1f,b.getMaxAMResourcePerQueuePercent(),1e-3f);
    assertEquals(b.calculateAndGetAMResourceLimit(),Resources.createResource(159 * GB,1));
    csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.2f);
    clusterResource=Resources.createResource(100 * 20 * GB,100 * 32);
    Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
    CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,newQueues,queues,TestUtils.spyHook);
    root.reinitialize(newRoot,clusterResource);
    b=stubLeafQueue((LeafQueue)newQueues.get(B));
    assertEquals(b.calculateAndGetAMResourceLimit(),Resources.createResource(320 * GB,1));
  }
  @Test public void testAllocateContainerOnNodeWithoutOffSwitchSpecified() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(B));
    final String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Arrays.asList(TestUtils.createResourceRequest("127.0.0.1",1 * GB,3,true,priority,recordFactory),TestUtils.createResourceRequest(DEFAULT_RACK,1 * GB,3,true,priority,recordFactory)));
    try {
      applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    }
 catch (    NullPointerException e) {
      Assert.fail("NPE when allocating container on node but " + "forget to set off-switch request should be handled");
    }
  }
  @Test public void testFifoAssignment() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    a.setOrderingPolicy(new FifoOrderingPolicy<FiCaSchedulerApp>());
    String host_0_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0_0=TestUtils.getMockNode(host_0_0,rack_0,0,16 * GB);
    final int numNodes=4;
    Resource clusterResource=Resources.createResource(numNodes * (16 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=spy(new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext,Priority.newInstance(3),false));
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=spy(new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext,Priority.newInstance(5),false));
    a.submitApplicationAttempt(app_1,user_0);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0_0.getNodeID(),node_0_0);
    Priority priority=TestUtils.createMockPriority(1);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    List<ResourceRequest> app_1_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_1_requests_0.clear();
    app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_1.updateResourceRequests(app_1_requests_0);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_1_requests_0.clear();
    app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_1.updateResourceRequests(app_1_requests_0);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
    Assert.assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
  }
  @Test public void testConcurrentAccess() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    MockRM rm=new MockRM();
    rm.init(conf);
    rm.start();
    final String queue="default";
    final String user="user";
    CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
    final LeafQueue defaultQueue=(LeafQueue)cs.getQueue(queue);
    final List<FiCaSchedulerApp> listOfApps=createListOfApps(10000,user,defaultQueue);
    final CyclicBarrier cb=new CyclicBarrier(2);
    final List<ConcurrentModificationException> conException=new ArrayList<ConcurrentModificationException>();
    Thread submitAndRemove=new Thread(new Runnable(){
      @Override public void run(){
        for (        FiCaSchedulerApp fiCaSchedulerApp : listOfApps) {
          defaultQueue.submitApplicationAttempt(fiCaSchedulerApp,user);
        }
        try {
          cb.await();
        }
 catch (        Exception e) {
        }
        for (        FiCaSchedulerApp fiCaSchedulerApp : listOfApps) {
          defaultQueue.finishApplicationAttempt(fiCaSchedulerApp,queue);
        }
      }
    }
,"SubmitAndRemoveApplicationAttempt Thread");
    Thread getAppsInQueue=new Thread(new Runnable(){
      List<ApplicationAttemptId> apps=new ArrayList<ApplicationAttemptId>();
      @Override public void run(){
        try {
          try {
            cb.await();
          }
 catch (          Exception e) {
          }
          defaultQueue.collectSchedulerApplications(apps);
        }
 catch (        ConcurrentModificationException e) {
          conException.add(e);
        }
      }
    }
,"GetAppsInQueue Thread");
    submitAndRemove.start();
    getAppsInQueue.start();
    submitAndRemove.join();
    getAppsInQueue.join();
    assertTrue("ConcurrentModificationException is thrown",conException.isEmpty());
    rm.stop();
  }
  @Test public void testFairAssignment() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    OrderingPolicy<FiCaSchedulerApp> schedulingOrder=new FairOrderingPolicy<FiCaSchedulerApp>();
    a.setOrderingPolicy(schedulingOrder);
    String host_0_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0_0=TestUtils.getMockNode(host_0_0,rack_0,0,16 * GB);
    final int numNodes=4;
    Resource clusterResource=Resources.createResource(numNodes * (16 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=spy(new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext));
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=spy(new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext));
    a.submitApplicationAttempt(app_1,user_0);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0_0.getNodeID(),node_0_0);
    Priority priority=TestUtils.createMockPriority(1);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    List<ResourceRequest> app_1_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_1_requests_0.clear();
    app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_1.updateResourceRequests(app_1_requests_0);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    app_0_requests_0.clear();
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    app_1_requests_0.clear();
    app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_1.updateResourceRequests(app_1_requests_0);
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    Assert.assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
    Assert.assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
  }
  @Test public void testLocalityDelaySkipsApplication() throws Exception {
    LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
    String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
    a.submitApplicationAttempt(app_1,user_0);
    String host_0="127.0.0.1";
    String rack_0="rack_0";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,8 * GB);
    String host_1="127.0.0.2";
    String rack_1="rack_1";
    FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,rack_1,0,8 * GB);
    String host_2="127.0.0.3";
    String rack_2="rack_2";
    FiCaSchedulerNode node_2=TestUtils.getMockNode(host_2,rack_2,0,8 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1,node_2.getNodeID(),node_2);
    final int numNodes=3;
    Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
    List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
    app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
    app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory));
    app_0.updateResourceRequests(app_0_requests_0);
    List<ResourceRequest> app_1_requests_0=new ArrayList<ResourceRequest>();
    app_1_requests_0.add(TestUtils.createResourceRequest(host_2,1 * GB,1,true,priority,recordFactory));
    app_1_requests_0.add(TestUtils.createResourceRequest(rack_2,1 * GB,1,true,priority,recordFactory));
    app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
    app_1.updateResourceRequests(app_1_requests_0);
    CSAssignment assignment=null;
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assignment,a,nodes,apps);
    verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
    assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
    assertEquals(3,app_0.getOutstandingAsksCount(schedulerKey));
    assertEquals(0,app_0.getLiveContainers().size());
    assertEquals(1,app_1.getLiveContainers().size());
  }
  @Test public void testGetTotalPendingResourcesConsideringUserLimitOneUser() throws Exception {
    LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
    e.setMaxCapacity(1.0f);
    e.setUserLimit(1000);
    final String user_0="user_0";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_1,user_0);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,100 * GB);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (100 * GB),numNodes * 128);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    e.setUserLimitFactor(10.0f);
    assertEquals(3 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    for (    RMContainer rmContainer : app_0.getLiveContainers()) {
      e.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    for (    RMContainer rmContainer : app_1.getLiveContainers()) {
      e.completedContainer(clusterResource,app_1,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
  }
  @Test public void testGetTotalPendingResourcesConsideringUserLimitTwoUsers() throws Exception {
    LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
    e.setMaxCapacity(1.0f);
    e.setUserLimit(1000);
    final String user_0="user_0";
    final String user_1="user_1";
    final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
    FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_0,user_0);
    final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
    FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_1,user_0);
    final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
    FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_2,user_1);
    final ApplicationAttemptId appAttemptId_3=TestUtils.getMockApplicationAttemptId(3,0);
    FiCaSchedulerApp app_3=new FiCaSchedulerApp(appAttemptId_3,user_1,e,mock(ActiveUsersManager.class),spyRMContext);
    e.submitApplicationAttempt(app_3,user_1);
    Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1,app_2.getApplicationAttemptId(),app_2,app_3.getApplicationAttemptId(),app_3);
    String host_0="127.0.0.1";
    FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,100 * GB);
    Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
    final int numNodes=1;
    Resource clusterResource=Resources.createResource(numNodes * (100 * GB),numNodes * 128);
    when(csContext.getNumClusterNodes()).thenReturn(numNodes);
    root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
    Priority priority=TestUtils.createMockPriority(1);
    app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
    app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    priority=TestUtils.createMockPriority(1);
    app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
    app_3.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
    assertEquals(2 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    long app_0_consumption=app_0.getCurrentConsumption().getMemorySize();
    assertEquals(1 * GB,app_0_consumption);
    long app_1_consumption=app_1.getCurrentConsumption().getMemorySize();
    assertEquals(1 * GB,app_1_consumption);
    long app_2_consumption=app_2.getCurrentConsumption().getMemorySize();
    assertEquals(2 * GB,app_2_consumption);
    long app_3_consumption=app_3.getCurrentConsumption().getMemorySize();
    assertEquals(0 * GB,app_3_consumption);
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(app_0_consumption,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(app_1_consumption,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(app_2_consumption,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(app_3_consumption,app_3.getCurrentConsumption().getMemorySize());
    e.setUserLimitFactor(10.0f);
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
    applyCSAssignment(clusterResource,e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),e,nodes,apps);
    assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,NO_LABEL,false).getMemorySize());
    assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
    assertEquals(2 * GB,app_2.getCurrentConsumption().getMemorySize());
    assertEquals(1 * GB,app_3.getCurrentConsumption().getMemorySize());
    for (    RMContainer rmContainer : app_0.getLiveContainers()) {
      e.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
    for (    RMContainer rmContainer : app_1.getLiveContainers()) {
      e.completedContainer(clusterResource,app_1,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
    }
  }
  private List<FiCaSchedulerApp> createListOfApps(  int noOfApps,  String user,  LeafQueue defaultQueue){
    List<FiCaSchedulerApp> appsLists=new ArrayList<FiCaSchedulerApp>();
    for (int i=0; i < noOfApps; i++) {
      ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(i,0);
      FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user,defaultQueue,mock(ActiveUsersManager.class),spyRMContext);
      appsLists.add(app_0);
    }
    return appsLists;
  }
  private CapacitySchedulerContext mockCSContext(  CapacitySchedulerConfiguration csConf,  Resource clusterResource){
    CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
    when(csContext.getConfiguration()).thenReturn(csConf);
    when(csContext.getConf()).thenReturn(new YarnConfiguration());
    when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
    when(csContext.getClusterResource()).thenReturn(clusterResource);
    when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
    when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(2 * GB,2));
    when(csContext.getPreemptionManager()).thenReturn(new PreemptionManager());
    return csContext;
  }
  @Test public void testApplicationQueuePercent() throws Exception {
    Resource res=Resource.newInstance(10 * 1024,10);
    CapacityScheduler scheduler=mock(CapacityScheduler.class);
    when(scheduler.getClusterResource()).thenReturn(res);
    when(scheduler.getResourceCalculator()).thenReturn(new DefaultResourceCalculator());
    ApplicationAttemptId appAttId=createAppAttemptId(0,0);
    RMContext rmContext=mock(RMContext.class);
    when(rmContext.getEpoch()).thenReturn(3L);
    when(rmContext.getScheduler()).thenReturn(scheduler);
    when(rmContext.getRMApps()).thenReturn(new ConcurrentHashMap<ApplicationId,RMApp>());
    RMNodeLabelsManager nlm=mock(RMNodeLabelsManager.class);
    when(nlm.getResourceByLabel(any(),any())).thenReturn(res);
    when(rmContext.getNodeLabelManager()).thenReturn(nlm);
    Queue queue=createQueue("test",null,1.0f,1.0f,res);
    final String user="user1";
    FiCaSchedulerApp app=new FiCaSchedulerApp(appAttId,user,queue,queue.getAbstractUsersManager(),rmContext);
    Resource requestedResource=Resource.newInstance(1536,2);
    app.getAppAttemptResourceUsage().incUsed(requestedResource);
    assertEquals(15.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
    assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
    queue=createQueue("test2",null,0.5f,0.5f,Resources.divideAndCeil(dominantResourceCalculator,res,2));
    app=new FiCaSchedulerApp(appAttId,user,queue,queue.getAbstractUsersManager(),rmContext);
    app.getAppAttemptResourceUsage().incUsed(requestedResource);
    assertEquals(30.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
    assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
    AbstractCSQueue qChild=createQueue("test2.1",queue,0.5f,0.25f,Resources.divideAndCeil(dominantResourceCalculator,res,4));
    app=new FiCaSchedulerApp(appAttId,user,qChild,qChild.getAbstractUsersManager(),rmContext);
    app.getAppAttemptResourceUsage().incUsed(requestedResource);
    assertEquals(60.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
    assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
  }
  @Test public void testSetupQueueConfigsWithSpecifiedConfiguration() throws IOException {
    try {
      CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration(new Configuration(false),false);
      final String leafQueueName="testSetupQueueConfigsWithSpecifiedConfiguration";
      assertEquals(0,conf.size());
      conf.setNodeLocalityDelay(60);
      conf.setCapacity(ROOT + DOT + leafQueueName,10);
      conf.setMaximumCapacity(ROOT + DOT + leafQueueName,100);
      conf.setUserLimitFactor(ROOT + DOT + leafQueueName,0.1f);
      csConf.setNodeLocalityDelay(30);
      csConf.setGlobalMaximumApplicationsPerQueue(20);
      LeafQueue leafQueue=new LeafQueue(csContext,conf,leafQueueName,cs.getRootQueue(),null);
      assertEquals(30,leafQueue.getNodeLocalityDelay());
      assertEquals(20,leafQueue.getMaxApplications());
      assertEquals(2,leafQueue.getMaxApplicationsPerUser());
      conf.setMaximumAMResourcePercentPerPartition(leafQueue.getQueueName(),NO_LABEL,10);
      conf.setMaximumCapacity(leafQueue.getQueueName(),10);
      assertEquals(0.1,leafQueue.getMaxAMResourcePerQueuePercent(),EPSILON);
      assertEquals(1,leafQueue.getMaximumCapacity(),EPSILON);
      assertEquals(0.1,leafQueue.getCapacity(),EPSILON);
      assertEquals(0.1,leafQueue.getAbsoluteCapacity(),EPSILON);
      assertEquals(1.0,leafQueue.getAbsoluteMaximumCapacity(),EPSILON);
    }
  finally {
      csConf.setNodeLocalityDelay(CapacitySchedulerConfiguration.DEFAULT_NODE_LOCALITY_DELAY);
      csConf.setGlobalMaximumApplicationsPerQueue((int)CapacitySchedulerConfiguration.UNDEFINED);
    }
  }
  private ApplicationAttemptId createAppAttemptId(  int appId,  int attemptId){
    ApplicationId appIdImpl=ApplicationId.newInstance(0,appId);
    ApplicationAttemptId attId=ApplicationAttemptId.newInstance(appIdImpl,attemptId);
    return attId;
  }
  private AbstractCSQueue createQueue(  String name,  Queue parent,  float capacity,  float absCap,  Resource res){
    CSQueueMetrics metrics=CSQueueMetrics.forQueue(name,parent,false,cs.getConf());
    QueueInfo queueInfo=QueueInfo.newInstance(name,capacity,1.0f,0,null,null,QueueState.RUNNING,null,"",null,false,null,false);
    ActiveUsersManager activeUsersManager=new ActiveUsersManager(metrics);
    AbstractCSQueue queue=mock(AbstractCSQueue.class);
    when(queue.getMetrics()).thenReturn(metrics);
    when(queue.getAbstractUsersManager()).thenReturn(activeUsersManager);
    when(queue.getQueueInfo(false,false)).thenReturn(queueInfo);
    QueueCapacities qCaps=mock(QueueCapacities.class);
    when(qCaps.getAbsoluteCapacity(any())).thenReturn(absCap);
    when(queue.getQueueCapacities()).thenReturn(qCaps);
    QueueResourceQuotas qQuotas=mock(QueueResourceQuotas.class);
    when(qQuotas.getConfiguredMinResource(any())).thenReturn(res);
    when(qQuotas.getConfiguredMaxResource(any())).thenReturn(res);
    when(qQuotas.getEffectiveMinResource(any())).thenReturn(res);
    when(qQuotas.getEffectiveMaxResource(any())).thenReturn(res);
    when(queue.getQueueResourceQuotas()).thenReturn(qQuotas);
    when(queue.getEffectiveCapacity(any())).thenReturn(res);
    return queue;
  }
  @After public void tearDown() throws Exception {
    if (cs != null) {
      cs.stop();
    }
  }
}
