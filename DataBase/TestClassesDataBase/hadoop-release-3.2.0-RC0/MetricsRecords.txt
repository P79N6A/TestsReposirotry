/** 
 * Utility class mainly for tests
 */
public class MetricsRecords {
  public static void assertTag(  MetricsRecord record,  String tagName,  String expectedValue){
    MetricsTag processIdTag=getFirstTagByName(record,tagName);
    assertNotNull(processIdTag);
    assertEquals(expectedValue,processIdTag.value());
  }
  public static void assertMetric(  MetricsRecord record,  String metricName,  Number expectedValue){
    AbstractMetric resourceLimitMetric=getFirstMetricByName(record,metricName);
    assertNotNull(resourceLimitMetric);
    assertEquals(expectedValue,resourceLimitMetric.value());
  }
  public static Number getMetricValueByName(  MetricsRecord record,  String metricName){
    AbstractMetric resourceLimitMetric=getFirstMetricByName(record,metricName);
    assertNotNull(resourceLimitMetric);
    return resourceLimitMetric.value();
  }
  public static void assertMetricNotNull(  MetricsRecord record,  String metricName){
    AbstractMetric resourceLimitMetric=getFirstMetricByName(record,metricName);
    assertNotNull("Metric " + metricName + " doesn't exist",resourceLimitMetric);
  }
  private static MetricsTag getFirstTagByName(  MetricsRecord record,  String name){
    return Iterables.getFirst(Iterables.filter(record.tags(),new MetricsTagPredicate(name)),null);
  }
  private static AbstractMetric getFirstMetricByName(  MetricsRecord record,  String name){
    return Iterables.getFirst(Iterables.filter(record.metrics(),new AbstractMetricPredicate(name)),null);
  }
private static class MetricsTagPredicate implements Predicate<MetricsTag> {
    private String tagName;
    public MetricsTagPredicate(    String tagName){
      this.tagName=tagName;
    }
    @Override public boolean apply(    MetricsTag input){
      return input.name().equals(tagName);
    }
  }
private static class AbstractMetricPredicate implements Predicate<AbstractMetric> {
    private String metricName;
    public AbstractMetricPredicate(    String metricName){
      this.metricName=metricName;
    }
    @Override public boolean apply(    AbstractMetric input){
      return input.name().equals(metricName);
    }
  }
}
