abstract class PermissionVerifier {
  protected Path path;
  protected short ancestorPermission;
  protected short parentPermission;
  private short permission;
  protected short requiredAncestorPermission;
  protected short requiredParentPermission;
  protected short requiredPermission;
  final static protected short opAncestorPermission=SEARCH_MASK;
  protected short opParentPermission;
  protected short opPermission;
  protected UserGroupInformation ugi;
  protected void set(  Path path,  short ancestorPermission,  short parentPermission,  short permission){
    this.path=path;
    this.ancestorPermission=ancestorPermission;
    this.parentPermission=parentPermission;
    this.permission=permission;
    setOpPermission();
    this.ugi=null;
  }
  void verifyPermission(  UserGroupInformation ugi) throws IOException {
    if (this.ugi != ugi) {
      setRequiredPermissions(ugi);
      this.ugi=ugi;
    }
    try {
      try {
        call();
        assertFalse(expectPermissionDeny());
      }
 catch (      AccessControlException e) {
        assertTrue(expectPermissionDeny());
      }
    }
 catch (    AssertionError ae) {
      logPermissions();
      throw ae;
    }
  }
  /** 
 * Log the permissions and required permissions 
 */
  protected void logPermissions(){
    LOG.info("required ancestor permission:" + Integer.toOctalString(requiredAncestorPermission));
    LOG.info("ancestor permission: " + Integer.toOctalString(ancestorPermission));
    LOG.info("required parent permission:" + Integer.toOctalString(requiredParentPermission));
    LOG.info("parent permission: " + Integer.toOctalString(parentPermission));
    LOG.info("required permission:" + Integer.toOctalString(requiredPermission));
    LOG.info("permission: " + Integer.toOctalString(permission));
  }
  protected boolean expectPermissionDeny(){
    return (requiredPermission & permission) != requiredPermission || (requiredParentPermission & parentPermission) != requiredParentPermission || (requiredAncestorPermission & ancestorPermission) != requiredAncestorPermission;
  }
  protected void setRequiredPermissions(  UserGroupInformation ugi){
    if (SUPERUSER.equals(ugi)) {
      requiredAncestorPermission=SUPER_MASK;
      requiredParentPermission=SUPER_MASK;
      requiredPermission=SUPER_MASK;
    }
 else     if (USER1.equals(ugi)) {
      requiredAncestorPermission=(short)(opAncestorPermission & OWNER_MASK);
      requiredParentPermission=(short)(opParentPermission & OWNER_MASK);
      requiredPermission=(short)(opPermission & OWNER_MASK);
    }
 else     if (USER2.equals(ugi)) {
      requiredAncestorPermission=(short)(opAncestorPermission & GROUP_MASK);
      requiredParentPermission=(short)(opParentPermission & GROUP_MASK);
      requiredPermission=(short)(opPermission & GROUP_MASK);
    }
 else     if (USER3.equals(ugi)) {
      requiredAncestorPermission=(short)(opAncestorPermission & OTHER_MASK);
      requiredParentPermission=(short)(opParentPermission & OTHER_MASK);
      requiredPermission=(short)(opPermission & OTHER_MASK);
    }
 else {
      throw new IllegalArgumentException("Non-supported user: " + ugi);
    }
  }
  abstract void setOpPermission();
  abstract void call() throws IOException ;
}
