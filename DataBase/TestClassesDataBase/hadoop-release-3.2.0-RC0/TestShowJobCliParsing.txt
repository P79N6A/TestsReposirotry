public class TestShowJobCliParsing {
  @Before public void before(){
    SubmarineLogs.verboseOff();
  }
  @Test public void testPrintHelp(){
    MockClientContext mockClientContext=new MockClientContext();
    ShowJobCli showJobCli=new ShowJobCli(mockClientContext);
    showJobCli.printUsages();
  }
  @Test public void testShowJob() throws InterruptedException, SubmarineException, YarnException, ParseException, IOException {
    MockClientContext mockClientContext=new MockClientContext();
    ShowJobCli showJobCli=new ShowJobCli(mockClientContext){
      @Override protected void getAndPrintJobInfo(){
      }
    }
;
    showJobCli.run(new String[]{"--name","my-job"});
    ShowJobParameters parameters=showJobCli.getParameters();
    Assert.assertEquals(parameters.getName(),"my-job");
  }
  private Map<String,String> getMockJobInfo(  String jobName){
    Map<String,String> map=new HashMap<>();
    map.put(StorageKeyConstants.APPLICATION_ID,ApplicationId.newInstance(1234L,1).toString());
    map.put(StorageKeyConstants.JOB_RUN_ARGS,"job run 123456");
    map.put(StorageKeyConstants.INPUT_PATH,"hdfs://" + jobName);
    return map;
  }
  @Test public void testSimpleShowJob() throws InterruptedException, SubmarineException, YarnException, ParseException, IOException {
    SubmarineStorage storage=new MemorySubmarineStorage();
    MockClientContext mockClientContext=new MockClientContext();
    RuntimeFactory runtimeFactory=mock(RuntimeFactory.class);
    when(runtimeFactory.getSubmarineStorage()).thenReturn(storage);
    mockClientContext.setRuntimeFactory(runtimeFactory);
    ShowJobCli showJobCli=new ShowJobCli(mockClientContext);
    try {
      showJobCli.run(new String[]{"--name","my-job"});
    }
 catch (    IOException e) {
    }
    storage.addNewJob("my-job",getMockJobInfo("my-job"));
    showJobCli.run(new String[]{"--name","my-job"});
  }
}
