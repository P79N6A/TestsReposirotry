/** 
 * Verify truncate through ViewFileSystem functionality.
 */
public class TestViewFileSystemWithTruncate {
  private static MiniDFSCluster cluster;
  private static Configuration clusterConf=new Configuration();
  private static FileSystem fHdfs;
  private FileSystem fsView;
  private Configuration fsViewConf;
  private FileSystem fsTarget;
  private Path targetTestRoot, mountOnNn1;
  private FileSystemTestHelper fileSystemTestHelper=new FileSystemTestHelper("/tmp/TestViewFileSystemWithXAttrs");
  @BeforeClass public static void clusterSetupAtBeginning() throws IOException {
    cluster=new MiniDFSCluster.Builder(clusterConf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(2)).numDataNodes(2).build();
    cluster.waitClusterUp();
    fHdfs=cluster.getFileSystem(0);
  }
  @AfterClass public static void clusterShutdownAtEnd() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Before public void setUp() throws Exception {
    fsTarget=fHdfs;
    targetTestRoot=fileSystemTestHelper.getAbsoluteTestRootPath(fsTarget);
    fsTarget.delete(targetTestRoot,true);
    fsTarget.mkdirs(targetTestRoot);
    fsViewConf=ViewFileSystemTestSetup.createConfig();
    setupMountPoints();
    fsView=FileSystem.get(FsConstants.VIEWFS_URI,fsViewConf);
  }
  private void setupMountPoints(){
    mountOnNn1=new Path("/mountOnNn1");
    ConfigUtil.addLink(fsViewConf,mountOnNn1.toString(),targetTestRoot.toUri());
  }
  @After public void tearDown() throws Exception {
    fsTarget.delete(fileSystemTestHelper.getTestRootPath(fsTarget),true);
  }
  @Test(timeout=30000) public void testTruncateWithViewFileSystem() throws Exception {
    Path filePath=new Path(mountOnNn1 + "/ttest");
    Path hdfFilepath=new Path("/tmp/TestViewFileSystemWithXAttrs/ttest");
    FSDataOutputStream out=fsView.create(filePath);
    out.writeBytes("drtatedasfdasfgdfas");
    out.close();
    int newLength=10;
    boolean isReady=fsView.truncate(filePath,newLength);
    if (!isReady) {
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          try {
            return cluster.getFileSystem(0).isFileClosed(hdfFilepath);
          }
 catch (          IOException e) {
            return false;
          }
        }
      }
,100,60 * 1000);
    }
    assertEquals(newLength,fsView.getFileStatus(filePath).getLen());
  }
}
