/** 
 * The contract of Router-based Federated HDFS This changes its feature set from platform for platform -the default set is updated during initialization.
 */
public class RouterWebHDFSContract extends HDFSContract {
  public static final Logger LOG=LoggerFactory.getLogger(WebHdfsFileSystem.class);
  public static final String CONTRACT_WEBHDFS_XML="contract/webhdfs.xml";
  private static MiniRouterDFSCluster cluster;
  public RouterWebHDFSContract(  Configuration conf){
    super(conf);
    addConfResource(CONTRACT_WEBHDFS_XML);
  }
  public static void createCluster() throws IOException {
    try {
      HdfsConfiguration conf=new HdfsConfiguration();
      conf.addResource(CONTRACT_HDFS_XML);
      conf.addResource(CONTRACT_WEBHDFS_XML);
      cluster=new MiniRouterDFSCluster(true,2);
      cluster.startCluster();
      cluster.startRouters();
      cluster.registerNamenodes();
      cluster.waitNamenodeRegistration();
      cluster.installMockLocations();
      if (cluster.isHighAvailability()) {
        for (        String ns : cluster.getNameservices()) {
          cluster.switchToActive(ns,NAMENODES[0]);
          cluster.switchToStandby(ns,NAMENODES[1]);
        }
      }
      cluster.waitActiveNamespaces();
    }
 catch (    Exception e) {
      cluster=null;
      throw new IOException("Cannot start federated cluster",e);
    }
  }
  public static void destroyCluster(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  public static MiniDFSCluster getCluster(){
    return cluster.getCluster();
  }
  @Override public FileSystem getTestFileSystem() throws IOException {
    return getFileSystem();
  }
  public static FileSystem getFileSystem() throws IOException {
    Assert.assertNotNull("cluster not created",cluster);
    try {
      RouterContext router=cluster.getRandomRouter();
      String uriStr=WebHdfsConstants.WEBHDFS_SCHEME + "://" + router.getHttpAddress();
      URI uri=new URI(uriStr);
      Configuration conf=new HdfsConfiguration();
      return FileSystem.get(uri,conf);
    }
 catch (    URISyntaxException e) {
      LOG.error("Cannot create URI for the WebHDFS filesystem",e);
    }
    return null;
  }
  @Override public String getScheme(){
    return WebHdfsConstants.WEBHDFS_SCHEME;
  }
}
