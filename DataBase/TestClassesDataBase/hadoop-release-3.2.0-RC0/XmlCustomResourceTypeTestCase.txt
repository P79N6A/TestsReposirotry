/** 
 * This class hides the implementation details of how to verify the structure of XML responses. Tests should only provide the path of the {@link WebResource}, the response from the resource and the verifier Consumer to {@link XmlCustomResourceTypeTestCase#verify(Consumer)}. An instance of {@link JSONObject} will be passed to that consumer to be able toverify the response.
 */
public class XmlCustomResourceTypeTestCase {
  private static final Logger LOG=LoggerFactory.getLogger(XmlCustomResourceTypeTestCase.class);
  private WebResource path;
  private BufferedClientResponse response;
  private Document parsedResponse;
  public XmlCustomResourceTypeTestCase(  WebResource path,  BufferedClientResponse response){
    this.path=path;
    verifyStatus(response);
    this.response=response;
  }
  private void verifyStatus(  BufferedClientResponse response){
    String responseStr=response.getEntity(String.class);
    assertEquals("HTTP status should be 200, " + "status info: " + response.getStatusInfo() + " response as string: "+ responseStr,200,response.getStatus());
  }
  public void verify(  Consumer<Document> verifier){
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    parsedResponse=parseXml(response);
    logResponse(parsedResponse);
    verifier.accept(parsedResponse);
  }
  private Document parseXml(  BufferedClientResponse response){
    try {
      String xml=response.getEntity(String.class);
      DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();
      InputSource is=new InputSource();
      is.setCharacterStream(new StringReader(xml));
      return db.parse(is);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  private void logResponse(  Document doc){
    String responseStr=response.getEntity(String.class);
    LOG.info("Raw response from service URL {}: {}",path.toString(),responseStr);
    LOG.info("Parsed response from service URL {}: {}",path.toString(),toXml(doc));
  }
  public static String toXml(  Node node){
    StringWriter writer;
    try {
      TransformerFactory tf=TransformerFactory.newInstance();
      Transformer transformer=tf.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT,"yes");
      transformer.setOutputProperty("{http://xml.apache.org/xslt}indent" + "-amount","2");
      writer=new StringWriter();
      transformer.transform(new DOMSource(node),new StreamResult(writer));
    }
 catch (    TransformerException e) {
      throw new RuntimeException(e);
    }
    return writer.getBuffer().toString();
  }
}
