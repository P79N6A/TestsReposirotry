@RunWith(Parameterized.class) public class TestQueueCapacities {
  private static final Log LOG=LogFactory.getLog(TestQueueCapacities.class);
  private String suffix;
  @Parameterized.Parameters public static Collection<String[]> getParameters(){
    return Arrays.asList(new String[][]{{"Capacity"},{"AbsoluteCapacity"},{"UsedCapacity"},{"AbsoluteUsedCapacity"},{"MaximumCapacity"},{"AbsoluteMaximumCapacity"},{"MaxAMResourcePercentage"},{"ReservedCapacity"},{"AbsoluteReservedCapacity"}});
  }
  public TestQueueCapacities(  String suffix){
    this.suffix=suffix;
  }
  private static float get(  QueueCapacities obj,  String suffix,  String label) throws Exception {
    return executeByName(obj,"get" + suffix,label,-1f);
  }
  private static void set(  QueueCapacities obj,  String suffix,  String label,  float value) throws Exception {
    executeByName(obj,"set" + suffix,label,value);
  }
  private static float executeByName(  QueueCapacities obj,  String methodName,  String label,  float value) throws Exception {
    if (methodName.startsWith("get")) {
      float result;
      if (label == null) {
        Method method=QueueCapacities.class.getDeclaredMethod(methodName);
        result=(float)method.invoke(obj);
      }
 else {
        Method method=QueueCapacities.class.getDeclaredMethod(methodName,String.class);
        result=(float)method.invoke(obj,label);
      }
      return result;
    }
 else {
      if (label == null) {
        Method method=QueueCapacities.class.getDeclaredMethod(methodName,Float.TYPE);
        method.invoke(obj,value);
      }
 else {
        Method method=QueueCapacities.class.getDeclaredMethod(methodName,String.class,Float.TYPE);
        method.invoke(obj,label,value);
      }
      return -1f;
    }
  }
  private void internalTestModifyAndRead(  String label) throws Exception {
    QueueCapacities qc=new QueueCapacities(false);
    Assert.assertEquals(0f,get(qc,suffix,label),1e-8);
    set(qc,suffix,label,1f);
    Assert.assertEquals(1f,get(qc,suffix,label),1e-8);
    set(qc,suffix,label,2f);
    Assert.assertEquals(2f,get(qc,suffix,label),1e-8);
  }
  void check(  int mem,  int cpu,  Resource res){
    Assert.assertEquals(mem,res.getMemorySize());
    Assert.assertEquals(cpu,res.getVirtualCores());
  }
  @Test public void testModifyAndRead() throws Exception {
    LOG.info("Test - " + suffix);
    internalTestModifyAndRead(null);
    internalTestModifyAndRead("label");
  }
}
