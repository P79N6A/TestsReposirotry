/** 
 * Test the FileSystem (e.g., HDFS) implementation of the State Store driver.
 */
public class TestStateStoreFileSystem extends TestStateStoreDriverBase {
  private static MiniDFSCluster dfsCluster;
  @BeforeClass public static void setupCluster() throws Exception {
    Configuration conf=FederationStateStoreTestUtils.getStateStoreConfiguration(StateStoreFileSystemImpl.class);
    conf.set(StateStoreFileSystemImpl.FEDERATION_STORE_FS_PATH,"/hdfs-federation/");
    MiniDFSCluster.Builder builder=new MiniDFSCluster.Builder(conf);
    builder.numDataNodes(1);
    dfsCluster=builder.build();
    dfsCluster.waitClusterUp();
    getStateStore(conf);
  }
  @AfterClass public static void tearDownCluster(){
    if (dfsCluster != null) {
      dfsCluster.shutdown();
    }
  }
  @Before public void startup() throws IOException {
    removeAll(getStateStoreDriver());
  }
  @Test public void testInsert() throws IllegalArgumentException, IllegalAccessException, IOException {
    testInsert(getStateStoreDriver());
  }
  @Test public void testUpdate() throws IllegalArgumentException, IOException, SecurityException, ReflectiveOperationException {
    testPut(getStateStoreDriver());
  }
  @Test public void testDelete() throws IllegalArgumentException, IllegalAccessException, IOException {
    testRemove(getStateStoreDriver());
  }
  @Test public void testFetchErrors() throws IllegalArgumentException, IllegalAccessException, IOException {
    testFetchErrors(getStateStoreDriver());
  }
  @Test public void testMetrics() throws IllegalArgumentException, IllegalAccessException, IOException {
    testMetrics(getStateStoreDriver());
  }
}
