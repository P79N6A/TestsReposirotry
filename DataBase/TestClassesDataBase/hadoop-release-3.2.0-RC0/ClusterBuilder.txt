/** 
 * Helper class that allows us to create different kinds of MiniDFSClusters and populate data.
 */
static class ClusterBuilder {
  private Configuration conf;
  private int blockSize;
  private int numDatanodes;
  private int fileLen;
  private int blockCount;
  private int diskCount;
  private long[] capacities;
  public ClusterBuilder setConf(  Configuration conf){
    this.conf=conf;
    return this;
  }
  public ClusterBuilder setBlockSize(  int blockSize){
    this.blockSize=blockSize;
    return this;
  }
  public ClusterBuilder setNumDatanodes(  int datanodeCount){
    this.numDatanodes=datanodeCount;
    return this;
  }
  public ClusterBuilder setBlockCount(  int blockCount){
    this.blockCount=blockCount;
    return this;
  }
  public ClusterBuilder setDiskCount(  int diskCount){
    this.diskCount=diskCount;
    return this;
  }
  private ClusterBuilder setCapacities(  final long[] caps){
    this.capacities=caps;
    return this;
  }
  private StorageType[] getStorageTypes(  int diskCount){
    Preconditions.checkState(diskCount > 0);
    StorageType[] array=new StorageType[diskCount];
    for (int x=0; x < diskCount; x++) {
      array[x]=StorageType.DISK;
    }
    return array;
  }
  public MiniDFSCluster build() throws IOException, TimeoutException, InterruptedException {
    Preconditions.checkNotNull(this.conf);
    Preconditions.checkState(blockSize > 0);
    Preconditions.checkState(numDatanodes > 0);
    fileLen=blockCount * blockSize;
    Preconditions.checkState(fileLen > 0);
    conf.setBoolean(DFSConfigKeys.DFS_DISK_BALANCER_ENABLED,true);
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
    conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,blockSize);
    conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
    final String fileName="/tmp.txt";
    Path filePath=new Path(fileName);
    fileLen=blockCount * blockSize;
    MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).storageCapacities(capacities).storageTypes(getStorageTypes(diskCount)).storagesPerDatanode(diskCount).build();
    generateData(filePath,cluster);
    cluster.restartDataNodes();
    cluster.waitActive();
    return cluster;
  }
  private void generateData(  Path filePath,  MiniDFSCluster cluster) throws IOException, InterruptedException, TimeoutException {
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem(0);
    TestBalancer.createFile(cluster,filePath,fileLen,(short)1,numDatanodes - 1);
    DFSTestUtil.waitReplication(fs,filePath,(short)1);
    cluster.restartDataNodes();
    cluster.waitActive();
  }
}
