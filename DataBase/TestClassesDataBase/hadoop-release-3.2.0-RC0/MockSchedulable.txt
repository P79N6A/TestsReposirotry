private class MockSchedulable implements Schedulable {
  private Resource minShare;
  private Resource demand;
  private String name;
  private long startTime;
  private Resource usage;
  private float weights;
  public MockSchedulable(  Resource minShare,  Resource demand,  String name,  long startTime,  Resource usage,  float weights){
    this.minShare=minShare;
    this.demand=demand;
    this.name=name;
    this.startTime=startTime;
    this.usage=usage;
    this.weights=weights;
  }
  @Override public String getName(){
    return name;
  }
  @Override public Resource getDemand(){
    return demand;
  }
  @Override public Resource getResourceUsage(){
    return usage;
  }
  @Override public Resource getMinShare(){
    return minShare;
  }
  @Override public float getWeight(){
    return weights;
  }
  @Override public long getStartTime(){
    return startTime;
  }
  @Override public Resource getMaxShare(){
    throw new UnsupportedOperationException();
  }
  @Override public Priority getPriority(){
    throw new UnsupportedOperationException();
  }
  @Override public void updateDemand(){
    throw new UnsupportedOperationException();
  }
  @Override public Resource assignContainer(  FSSchedulerNode node){
    throw new UnsupportedOperationException();
  }
  @Override public Resource getFairShare(){
    throw new UnsupportedOperationException();
  }
  @Override public void setFairShare(  Resource fairShare){
    throw new UnsupportedOperationException();
  }
  @Override public String toString(){
    return "{name:" + name + ", start:"+ startTime+ ", usage:"+ usage+ ", weights:"+ weights+ ", demand:"+ demand+ ", minShare:"+ minShare+ "}";
  }
  @Override public boolean isPreemptable(){
    return true;
  }
}
