public class ReservationSystemTestUtil {
  private static Random rand=new Random();
  public final static String reservationQ="dedicated";
  public static ReservationId getNewReservationId(){
    return ReservationId.newInstance(rand.nextLong(),rand.nextLong());
  }
  public static ReservationSchedulerConfiguration createConf(  String reservationQ,  long timeWindow,  float instConstraint,  float avgConstraint){
    ReservationSchedulerConfiguration realConf=new CapacitySchedulerConfiguration();
    ReservationSchedulerConfiguration conf=spy(realConf);
    when(conf.getReservationWindow(reservationQ)).thenReturn(timeWindow);
    when(conf.getInstantaneousMaxCapacity(reservationQ)).thenReturn(instConstraint);
    when(conf.getAverageCapacity(reservationQ)).thenReturn(avgConstraint);
    return conf;
  }
  public static void validateReservationQueue(  AbstractReservationSystem reservationSystem,  String planQName){
    Plan plan=reservationSystem.getPlan(planQName);
    Assert.assertNotNull(plan);
    Assert.assertTrue(plan instanceof InMemoryPlan);
    Assert.assertEquals(planQName,plan.getQueueName());
    Assert.assertEquals(8192,plan.getTotalCapacity().getMemorySize());
    Assert.assertTrue(plan.getReservationAgent() instanceof AlignedPlannerWithGreedy);
    Assert.assertTrue(plan.getSharingPolicy() instanceof CapacityOverTimePolicy);
  }
  public static void setupFSAllocationFile(  String allocationFile) throws IOException {
    PrintWriter out=new PrintWriter(new FileWriter(allocationFile));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"default\">");
    out.println("<weight>1</weight>");
    out.println("</queue>");
    out.println("<queue name=\"a\">");
    out.println("<weight>1</weight>");
    out.println("<queue name=\"a1\">");
    out.println("<weight>3</weight>");
    out.println("</queue>");
    out.println("<queue name=\"a2\">");
    out.println("<weight>7</weight>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("<queue name=\"dedicated\">");
    out.println("<reservation></reservation>");
    out.println("<weight>8</weight>");
    out.println("</queue>");
    out.println("<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>");
    out.println("</allocations>");
    out.close();
  }
  public static void updateFSAllocationFile(  String allocationFile) throws IOException {
    PrintWriter out=new PrintWriter(new FileWriter(allocationFile));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    out.println("<queue name=\"default\">");
    out.println("<weight>5</weight>");
    out.println("</queue>");
    out.println("<queue name=\"a\">");
    out.println("<weight>5</weight>");
    out.println("<queue name=\"a1\">");
    out.println("<weight>3</weight>");
    out.println("</queue>");
    out.println("<queue name=\"a2\">");
    out.println("<weight>7</weight>");
    out.println("</queue>");
    out.println("</queue>");
    out.println("<queue name=\"dedicated\">");
    out.println("<reservation></reservation>");
    out.println("<weight>10</weight>");
    out.println("</queue>");
    out.println("<queue name=\"reservation\">");
    out.println("<reservation></reservation>");
    out.println("<weight>80</weight>");
    out.println("</queue>");
    out.println("<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>");
    out.println("</allocations>");
    out.close();
  }
  public static FairScheduler setupFairScheduler(  RMContext rmContext,  Configuration conf,  int numContainers) throws IOException {
    FairScheduler scheduler=new FairScheduler();
    scheduler.setRMContext(rmContext);
    when(rmContext.getScheduler()).thenReturn(scheduler);
    scheduler.init(conf);
    scheduler.start();
    scheduler.reinitialize(conf,rmContext);
    Resource resource=ReservationSystemTestUtil.calculateClusterResource(numContainers);
    RMNode node1=MockNodes.newNodeInfo(1,resource,1,"127.0.0.1");
    NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
    scheduler.handle(nodeEvent1);
    return scheduler;
  }
  public static ReservationDefinition createSimpleReservationDefinition(  long arrival,  long deadline,  long duration){
    return createSimpleReservationDefinition(arrival,deadline,duration,1);
  }
  public static ReservationDefinition createSimpleReservationDefinition(  long arrival,  long deadline,  long duration,  int parallelism){
    return createSimpleReservationDefinition(arrival,deadline,duration,parallelism,null);
  }
  public static ReservationDefinition createSimpleReservationDefinition(  long arrival,  long deadline,  long duration,  int parallelism,  String recurrenceExpression){
    ReservationRequest r=ReservationRequest.newInstance(Resource.newInstance(1024,1),parallelism,parallelism,duration);
    ReservationDefinition rDef=new ReservationDefinitionPBImpl();
    ReservationRequests reqs=new ReservationRequestsPBImpl();
    reqs.setReservationResources(Collections.singletonList(r));
    reqs.setInterpreter(ReservationRequestInterpreter.R_ALL);
    rDef.setReservationRequests(reqs);
    rDef.setArrival(arrival);
    rDef.setDeadline(deadline);
    if (recurrenceExpression != null) {
      rDef.setRecurrenceExpression(recurrenceExpression);
    }
    return rDef;
  }
  public static ReservationSubmissionRequest createSimpleReservationRequest(  ReservationId reservationId,  int numContainers,  long arrival,  long deadline,  long duration){
    return createSimpleReservationRequest(reservationId,numContainers,arrival,deadline,duration,Priority.UNDEFINED);
  }
  public static ReservationSubmissionRequest createSimpleReservationRequest(  ReservationId reservationId,  int numContainers,  long arrival,  long deadline,  long duration,  Priority priority){
    ReservationRequest r=ReservationRequest.newInstance(Resource.newInstance(1024,1),numContainers,1,duration);
    ReservationRequests reqs=ReservationRequests.newInstance(Collections.singletonList(r),ReservationRequestInterpreter.R_ALL);
    ReservationDefinition rDef=ReservationDefinition.newInstance(arrival,deadline,reqs,"testClientRMService#reservation","0",priority);
    ReservationSubmissionRequest request=ReservationSubmissionRequest.newInstance(rDef,reservationQ,reservationId);
    return request;
  }
  public static RMContext createMockRMContext(){
    RMContext context=mock(RMContext.class);
    when(context.getStateStore()).thenReturn(new MemoryRMStateStore());
    return context;
  }
  public CapacityScheduler mockCapacityScheduler(  int numContainers) throws IOException {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    setupQueueConfiguration(conf);
    CapacityScheduler cs=Mockito.spy(new CapacityScheduler());
    cs.setConf(new YarnConfiguration());
    RMContext mockRmContext=createRMContext(conf);
    cs.setRMContext(mockRmContext);
    try {
      cs.serviceInit(conf);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    initializeRMContext(numContainers,cs,mockRmContext);
    return cs;
  }
  @SuppressWarnings("rawtypes") public static void initializeRMContext(  int numContainers,  AbstractYarnScheduler scheduler,  RMContext mockRMContext){
    when(mockRMContext.getScheduler()).thenReturn(scheduler);
    Resource r=calculateClusterResource(numContainers);
    doReturn(r).when(scheduler).getClusterResource();
  }
  public static RMContext createRMContext(  Configuration conf){
    RMContext mockRmContext=Mockito.spy(new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null));
    RMNodeLabelsManager nlm=mock(RMNodeLabelsManager.class);
    when(nlm.getQueueResource(any(String.class),anySetOf(String.class),any(Resource.class))).thenAnswer(new Answer<Resource>(){
      @Override public Resource answer(      InvocationOnMock invocation) throws Throwable {
        Object[] args=invocation.getArguments();
        return (Resource)args[2];
      }
    }
);
    when(nlm.getResourceByLabel(any(String.class),any(Resource.class))).thenAnswer(new Answer<Resource>(){
      @Override public Resource answer(      InvocationOnMock invocation) throws Throwable {
        Object[] args=invocation.getArguments();
        return (Resource)args[1];
      }
    }
);
    mockRmContext.setNodeLabelManager(nlm);
    mockRmContext.setMultiNodeSortingManager(mock(MultiNodeSortingManager.class));
    return mockRmContext;
  }
  public static void setupQueueConfiguration(  CapacitySchedulerConfiguration conf){
    final String defQ=CapacitySchedulerConfiguration.ROOT + ".default";
    conf.setCapacity(defQ,10);
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"default","a",reservationQ});
    final String A=CapacitySchedulerConfiguration.ROOT + ".a";
    conf.setCapacity(A,10);
    final String dedicated=CapacitySchedulerConfiguration.ROOT + CapacitySchedulerConfiguration.DOT + reservationQ;
    conf.setCapacity(dedicated,80);
    conf.setReservable(dedicated,true);
    final String A1=A + ".a1";
    final String A2=A + ".a2";
    conf.setQueues(A,new String[]{"a1","a2"});
    conf.setCapacity(A1,30);
    conf.setCapacity(A2,70);
  }
  public static void setupDynamicQueueConfiguration(  CapacitySchedulerConfiguration conf){
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{reservationQ});
    final String dedicated=CapacitySchedulerConfiguration.ROOT + CapacitySchedulerConfiguration.DOT + reservationQ;
    conf.setCapacity(dedicated,100);
    conf.setReservable(dedicated,true);
  }
  public static String getFullReservationQueueName(){
    return CapacitySchedulerConfiguration.ROOT + CapacitySchedulerConfiguration.DOT + reservationQ;
  }
  public static String getReservationQueueName(){
    return reservationQ;
  }
  public static void updateQueueConfiguration(  CapacitySchedulerConfiguration conf,  String newQ){
    final String prefix=CapacitySchedulerConfiguration.ROOT + CapacitySchedulerConfiguration.DOT;
    final String defQ=prefix + "default";
    conf.setCapacity(defQ,5);
    conf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"default","a",reservationQ,newQ});
    final String A=prefix + "a";
    conf.setCapacity(A,5);
    final String dedicated=prefix + reservationQ;
    conf.setCapacity(dedicated,10);
    conf.setReservable(dedicated,true);
    conf.setCapacity(prefix + newQ,80);
    conf.setReservable(prefix + newQ,true);
    final String A1=A + ".a1";
    final String A2=A + ".a2";
    conf.setQueues(A,new String[]{"a1","a2"});
    conf.setCapacity(A1,30);
    conf.setCapacity(A2,70);
  }
  public static ReservationDefinition generateRandomRR(  Random rand,  long i){
    rand.setSeed(i);
    long now=System.currentTimeMillis();
    long arrival=rand.nextInt(12 * 3600 * 1000);
    long deadline=arrival + rand.nextInt(24 * 3600 * 1000);
    ReservationDefinition rr=new ReservationDefinitionPBImpl();
    rr.setArrival(now + arrival);
    rr.setDeadline(now + deadline);
    int gang=1 + rand.nextInt(9);
    int par=(rand.nextInt(1000) + 1) * gang;
    long dur=rand.nextInt(2 * 3600 * 1000);
    ReservationRequest r=ReservationRequest.newInstance(Resource.newInstance(1024,1),par,gang,dur);
    ReservationRequests reqs=new ReservationRequestsPBImpl();
    reqs.setReservationResources(Collections.singletonList(r));
    rand.nextInt(3);
    ReservationRequestInterpreter[] type=ReservationRequestInterpreter.values();
    reqs.setInterpreter(type[rand.nextInt(type.length)]);
    rr.setReservationRequests(reqs);
    return rr;
  }
  public static Map<ReservationInterval,Resource> generateAllocation(  long startTime,  long step,  int[] alloc){
    return generateAllocation(startTime,step,alloc,null);
  }
  public static Map<ReservationInterval,Resource> generateAllocation(  long startTime,  long step,  int[] alloc,  String recurrenceExpression){
    Map<ReservationInterval,Resource> req=new TreeMap<>();
    long period=0;
    if (recurrenceExpression != null) {
      period=Long.parseLong(recurrenceExpression);
    }
    long rStart;
    long rEnd;
    for (int j=0; j < 86400000; j+=period) {
      for (int i=0; i < alloc.length; i++) {
        rStart=(startTime + i * step) + j * period;
        rEnd=(startTime + (i + 1) * step) + j * period;
        if (period > 0) {
          rStart=rStart % period + j * period;
          rEnd=rEnd % period + j * period;
          if (rStart > rEnd) {
            continue;
          }
        }
        req.put(new ReservationInterval(rStart,rEnd),ReservationSystemUtil.toResource(ReservationRequest.newInstance(Resource.newInstance(1024,1),alloc[i])));
      }
      if (period == 0) {
        break;
      }
    }
    return req;
  }
  public static RLESparseResourceAllocation generateRLESparseResourceAllocation(  int[] alloc,  long[] timeSteps){
    TreeMap<Long,Resource> allocationsMap=new TreeMap<>();
    for (int i=0; i < alloc.length; i++) {
      allocationsMap.put(timeSteps[i],Resource.newInstance(alloc[i],alloc[i]));
    }
    RLESparseResourceAllocation rleVector=new RLESparseResourceAllocation(allocationsMap,new DefaultResourceCalculator());
    return rleVector;
  }
  public static Resource calculateClusterResource(  int numContainers){
    return Resource.newInstance(numContainers * 1024,numContainers);
  }
  public static Map<ReservationInterval,Resource> toAllocation(  RLESparseResourceAllocation rle,  long start,  long end){
    Map<ReservationInterval,Resource> resAlloc=new TreeMap<>();
    for (    Map.Entry<Long,Resource> e : rle.getCumulative().entrySet()) {
      Long nextKey=rle.getCumulative().higherKey(e.getKey());
      if (nextKey == null) {
        break;
      }
 else {
        if (e.getKey() >= start && e.getKey() <= end && nextKey >= start && nextKey <= end) {
          resAlloc.put(new ReservationInterval(e.getKey(),nextKey),e.getValue());
        }
      }
    }
    return resAlloc;
  }
}
