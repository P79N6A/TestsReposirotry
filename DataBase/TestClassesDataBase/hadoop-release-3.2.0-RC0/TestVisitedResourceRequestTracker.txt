public class TestVisitedResourceRequestTracker {
  private final ClusterNodeTracker<FSSchedulerNode> nodeTracker=new ClusterNodeTracker<>();
  private final ResourceRequest anyRequest, rackRequest, node1Request, node2Request;
  private final String NODE_VISITED="The node is already visited. ";
  private final String RACK_VISITED="The rack is already visited. ";
  private final String ANY_VISITED="ANY is already visited. ";
  private final String NODE_FAILURE="The node is visited again.";
  private final String RACK_FAILURE="The rack is visited again.";
  private final String ANY_FAILURE="ANY is visited again.";
  private final String FIRST_CALL_FAILURE="First call to visit failed.";
  public TestVisitedResourceRequestTracker(){
    List<RMNode> rmNodes=MockNodes.newNodes(1,2,Resources.createResource(8192,8));
    FSSchedulerNode node1=new FSSchedulerNode(rmNodes.get(0),false);
    nodeTracker.addNode(node1);
    node1Request=createRR(node1.getNodeName(),1);
    FSSchedulerNode node2=new FSSchedulerNode(rmNodes.get(1),false);
    node2Request=createRR(node2.getNodeName(),1);
    nodeTracker.addNode(node2);
    anyRequest=createRR(ResourceRequest.ANY,2);
    rackRequest=createRR(node1.getRackName(),2);
  }
  private ResourceRequest createRR(  String resourceName,  int count){
    return ResourceRequest.newInstance(Priority.UNDEFINED,resourceName,Resources.none(),count);
  }
  @Test public void testVisitAnyRequestFirst(){
    VisitedResourceRequestTracker tracker=new VisitedResourceRequestTracker(nodeTracker);
    assertTrue(FIRST_CALL_FAILURE,tracker.visit(anyRequest));
    assertFalse(ANY_VISITED + RACK_FAILURE,tracker.visit(rackRequest));
    assertFalse(ANY_VISITED + NODE_FAILURE,tracker.visit(node1Request));
    assertFalse(ANY_VISITED + NODE_FAILURE,tracker.visit(node2Request));
  }
  @Test public void testVisitRackRequestFirst(){
    VisitedResourceRequestTracker tracker=new VisitedResourceRequestTracker(nodeTracker);
    assertTrue(FIRST_CALL_FAILURE,tracker.visit(rackRequest));
    assertFalse(RACK_VISITED + ANY_FAILURE,tracker.visit(anyRequest));
    assertFalse(RACK_VISITED + NODE_FAILURE,tracker.visit(node1Request));
    assertFalse(RACK_VISITED + NODE_FAILURE,tracker.visit(node2Request));
  }
  @Test public void testVisitNodeRequestFirst(){
    VisitedResourceRequestTracker tracker=new VisitedResourceRequestTracker(nodeTracker);
    assertTrue(FIRST_CALL_FAILURE,tracker.visit(node1Request));
    assertFalse(NODE_VISITED + ANY_FAILURE,tracker.visit(anyRequest));
    assertFalse(NODE_VISITED + RACK_FAILURE,tracker.visit(rackRequest));
    assertTrue(NODE_VISITED + "Different node visit failed",tracker.visit(node2Request));
  }
}
