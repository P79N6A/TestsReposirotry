private static class DummyFs extends FileSystem implements DelegationTokenRenewer.Renewable, TokenAspect.TokenManagementDelegator {
  private static final Text TOKEN_KIND=new Text("DummyFS Token");
  private boolean emulateSecurityEnabled;
  private TokenAspect<DummyFs> tokenAspect;
  private final UserGroupInformation ugi=UserGroupInformation.createUserForTesting("foo",new String[]{"bar"});
  private URI uri;
  @Override public FSDataOutputStream append(  Path f,  int bufferSize,  Progressable progress) throws IOException {
    return null;
  }
  @Override public void cancelDelegationToken(  Token<?> token) throws IOException {
  }
  @Override public FSDataOutputStream create(  Path f,  FsPermission permission,  boolean overwrite,  int bufferSize,  short replication,  long blockSize,  Progressable progress) throws IOException {
    return null;
  }
  @Override public boolean delete(  Path f,  boolean recursive) throws IOException {
    return false;
  }
  @Override public URI getCanonicalUri(){
    return super.getCanonicalUri();
  }
  @Override public FileStatus getFileStatus(  Path f) throws IOException {
    return null;
  }
  @Override public Token<?> getRenewToken(){
    return null;
  }
  @Override public URI getUri(){
    return uri;
  }
  @Override public Path getWorkingDirectory(){
    return null;
  }
  @Override public void initialize(  URI name,  Configuration conf) throws IOException {
    super.initialize(name,conf);
    setConf(conf);
    this.uri=URI.create(name.getScheme() + "://" + name.getAuthority());
    tokenAspect=new TokenAspect<DummyFs>(this,SecurityUtil.buildTokenService(uri),TOKEN_KIND);
    if (emulateSecurityEnabled || UserGroupInformation.isSecurityEnabled()) {
      tokenAspect.initDelegationToken(ugi);
    }
  }
  @Override public FileStatus[] listStatus(  Path f) throws IOException {
    return new FileStatus[0];
  }
  @Override public boolean mkdirs(  Path f,  FsPermission permission) throws IOException {
    return false;
  }
  @Override public FSDataInputStream open(  Path f,  int bufferSize) throws IOException {
    return null;
  }
  @Override public boolean rename(  Path src,  Path dst) throws IOException {
    return false;
  }
  @Override public long renewDelegationToken(  Token<?> token) throws IOException {
    return 0;
  }
  @Override public <T extends TokenIdentifier>void setDelegationToken(  Token<T> token){
  }
  @Override public void setWorkingDirectory(  Path new_dir){
  }
}
