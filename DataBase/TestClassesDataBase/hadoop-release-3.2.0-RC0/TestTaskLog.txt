/** 
 * TestCounters checks the sanity and recoverability of Queue
 */
public class TestTaskLog {
  private static final String testDirName=TestTaskLog.class.getSimpleName();
  private static final String testDir=System.getProperty("test.build.data","target" + File.separatorChar + "test-dir") + File.separatorChar + testDirName;
  @AfterClass public static void cleanup(){
    FileUtil.fullyDelete(new File(testDir));
  }
  /** 
 * test TaskAttemptID
 * @throws IOException
 */
  @Test(timeout=50000) public void testTaskLog() throws IOException {
    System.setProperty(YarnConfiguration.YARN_APP_CONTAINER_LOG_DIR,"testString");
    assertEquals(TaskLog.getMRv2LogDir(),"testString");
    TaskAttemptID taid=mock(TaskAttemptID.class);
    JobID jid=new JobID("job",1);
    when(taid.getJobID()).thenReturn(jid);
    when(taid.toString()).thenReturn("JobId");
    File f=TaskLog.getTaskLogFile(taid,true,LogName.STDOUT);
    assertTrue(f.getAbsolutePath().endsWith("testString" + File.separatorChar + "stdout"));
    File indexFile=TaskLog.getIndexFile(taid,true);
    if (!indexFile.getParentFile().exists()) {
      indexFile.getParentFile().mkdirs();
    }
    indexFile.delete();
    indexFile.createNewFile();
    TaskLog.syncLogs(testDir,taid,true);
    assertTrue(indexFile.getAbsolutePath().endsWith("userlogs" + File.separatorChar + "job_job_0001"+ File.separatorChar+ "JobId.cleanup"+ File.separatorChar+ "log.index"));
    f=TaskLog.getRealTaskLogFileLocation(taid,true,LogName.DEBUGOUT);
    if (f != null) {
      assertTrue(f.getAbsolutePath().endsWith(testDirName + File.separatorChar + "debugout"));
      FileUtils.copyFile(indexFile,f);
    }
    assertTrue(TaskLog.obtainLogDirOwner(taid).length() > 0);
    assertTrue(readTaskLog(TaskLog.LogName.DEBUGOUT,taid,true).length() > 0);
  }
  private String readTaskLog(  TaskLog.LogName filter,  org.apache.hadoop.mapred.TaskAttemptID taskId,  boolean isCleanup) throws IOException {
    StringBuilder result=new StringBuilder();
    int res;
    InputStream taskLogReader=new TaskLog.Reader(taskId,filter,0,-1,isCleanup);
    byte[] b=new byte[65536];
    while (true) {
      res=taskLogReader.read(b);
      if (res > 0) {
        result.append(new String(b));
      }
 else {
        break;
      }
    }
    taskLogReader.close();
    String str=result.toString();
    str=str.trim();
    return str;
  }
  /** 
 * test without TASK_LOG_DIR
 * @throws IOException
 */
  @Test(timeout=50000) public void testTaskLogWithoutTaskLogDir() throws IOException {
    System.clearProperty(YarnConfiguration.YARN_APP_CONTAINER_LOG_DIR);
    assertEquals(TaskLog.getMRv2LogDir(),null);
    TaskAttemptID taid=mock(TaskAttemptID.class);
    JobID jid=new JobID("job",1);
    when(taid.getJobID()).thenReturn(jid);
    when(taid.toString()).thenReturn("JobId");
    File f=TaskLog.getTaskLogFile(taid,true,LogName.STDOUT);
    assertTrue(f.getAbsolutePath().endsWith("stdout"));
  }
}
