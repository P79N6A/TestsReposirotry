/** 
 * Tests for default probe.
 */
@RunWith(Parameterized.class) public class TestDefaultProbe {
  private final DefaultProbe probe;
  public TestDefaultProbe(  Probe probe){
    this.probe=(DefaultProbe)probe;
  }
  @Parameterized.Parameters public static Collection<Object[]> data(){
    Probe p1=MonitorUtils.getProbe(null);
    ReadinessCheck rc2=new ReadinessCheck().type(ReadinessCheck.TypeEnum.DEFAULT).properties(Collections.singletonMap(MonitorKeys.DEFAULT_PROBE_DNS_CHECK_ENABLED,"true"));
    Probe p2=MonitorUtils.getProbe(rc2);
    Map<String,String> props=new HashMap<>();
    props.put(MonitorKeys.DEFAULT_PROBE_DNS_CHECK_ENABLED,"true");
    props.put(MonitorKeys.DEFAULT_PROBE_DNS_ADDRESS,"8.8.8.8");
    ReadinessCheck rc3=new ReadinessCheck().type(ReadinessCheck.TypeEnum.DEFAULT).properties(props);
    Probe p3=MonitorUtils.getProbe(rc3);
    return Arrays.asList(new Object[][]{{p1},{p2},{p3}});
  }
  @Test public void testDefaultProbe(){
    ComponentInstance componentInstance=createMockComponentInstance("example.com");
    checkPingResults(probe,componentInstance,false);
    componentInstance=createMockComponentInstance("bad.dns.test");
    checkPingResults(probe,componentInstance,probe.isDnsCheckEnabled());
  }
  private static void checkPingResults(  Probe probe,  ComponentInstance componentInstance,  boolean expectDNSCheckFailure){
    ProbeStatus probeStatus=probe.ping(componentInstance);
    assertFalse("Expected failure for " + probeStatus.toString(),probeStatus.isSuccess());
    assertTrue("Expected IP failure for " + probeStatus.toString(),probeStatus.toString().contains(componentInstance.getCompInstanceName() + ": IP is not available yet"));
    probeStatus=probe.ping(componentInstance);
    assertFalse("Expected failure for " + probeStatus.toString(),probeStatus.isSuccess());
    assertTrue("Expected IP failure for " + probeStatus.toString(),probeStatus.toString().contains(componentInstance.getCompInstanceName() + ": IP is not available yet"));
    probeStatus=probe.ping(componentInstance);
    if (expectDNSCheckFailure) {
      assertFalse("Expected failure for " + probeStatus.toString(),probeStatus.isSuccess());
      assertTrue("Expected DNS failure for " + probeStatus.toString(),probeStatus.toString().contains(componentInstance.getCompInstanceName() + ": DNS checking is enabled, but lookup" + " for "+ componentInstance.getHostname()+ " is not available "+ "yet"));
    }
 else {
      assertTrue("Expected success for " + probeStatus.toString(),probeStatus.isSuccess());
    }
  }
  private static ComponentInstance createMockComponentInstance(  String hostname){
    ComponentInstance componentInstance=mock(ComponentInstance.class);
    when(componentInstance.getHostname()).thenReturn(hostname);
    when(componentInstance.getCompInstanceName()).thenReturn("comp-0");
    when(componentInstance.getContainerStatus()).thenAnswer(new Answer<ContainerStatus>(){
      private int count=0;
      @Override public ContainerStatus answer(      InvocationOnMock invocationOnMock){
        count++;
        if (count == 1) {
          return null;
        }
 else         if (count == 2) {
          ContainerStatus containerStatus=mock(ContainerStatus.class);
          when(containerStatus.getIPs()).thenReturn(null);
          return containerStatus;
        }
 else {
          ContainerStatus containerStatus=mock(ContainerStatus.class);
          when(containerStatus.getIPs()).thenReturn(Collections.singletonList("1.2.3.4"));
          return containerStatus;
        }
      }
    }
);
    return componentInstance;
  }
}
