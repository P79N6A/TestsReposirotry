/** 
 * Test the history server Rest API for getting the job conf. This requires created a temporary configuration file. /ws/v1/history/mapreduce/jobs/{jobid}/conf
 */
public class TestHsWebServicesJobConf extends JerseyTestBase {
  private static Configuration conf=new Configuration();
  private static HistoryContext appContext;
  private static HsWebApp webApp;
  private static File testConfDir=new File("target",TestHsWebServicesJobConf.class.getSimpleName() + "confDir");
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      Path confPath=new Path(testConfDir.toString(),MRJobConfig.JOB_CONF_FILE);
      Configuration config=new Configuration();
      FileSystem localFs;
      try {
        localFs=FileSystem.getLocal(config);
        confPath=localFs.makeQualified(confPath);
        OutputStream out=localFs.create(confPath);
        try {
          conf.writeXml(out);
        }
  finally {
          out.close();
        }
        if (!localFs.exists(confPath)) {
          fail("error creating config file: " + confPath);
        }
      }
 catch (      IOException e) {
        fail("error creating config file: " + e.getMessage());
      }
      appContext=new MockHistoryContext(0,2,1,confPath);
      webApp=mock(HsWebApp.class);
      when(webApp.name()).thenReturn("hsmockwebapp");
      bind(JAXBContextResolver.class);
      bind(HsWebServices.class);
      bind(GenericExceptionHandler.class);
      bind(WebApp.class).toInstance(webApp);
      bind(AppContext.class).toInstance(appContext);
      bind(HistoryContext.class).toInstance(appContext);
      bind(Configuration.class).toInstance(conf);
      serve("/*").with(GuiceContainer.class);
    }
  }
static {
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    testConfDir.mkdir();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @AfterClass static public void stop(){
    FileUtil.fullyDelete(testConfDir);
  }
  public TestHsWebServicesJobConf(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.mapreduce.v2.hs.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testJobConf() throws JSONException, Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("conf").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
      assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
      JSONObject json=response.getEntity(JSONObject.class);
      assertEquals("incorrect number of elements",1,json.length());
      JSONObject info=json.getJSONObject("conf");
      verifyHsJobConf(info,jobsMap.get(id));
    }
  }
  @Test public void testJobConfSlash() throws JSONException, Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("conf/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
      assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
      JSONObject json=response.getEntity(JSONObject.class);
      assertEquals("incorrect number of elements",1,json.length());
      JSONObject info=json.getJSONObject("conf");
      verifyHsJobConf(info,jobsMap.get(id));
    }
  }
  @Test public void testJobConfDefault() throws JSONException, Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("conf").get(ClientResponse.class);
      assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
      JSONObject json=response.getEntity(JSONObject.class);
      assertEquals("incorrect number of elements",1,json.length());
      JSONObject info=json.getJSONObject("conf");
      verifyHsJobConf(info,jobsMap.get(id));
    }
  }
  @Test public void testJobConfXML() throws JSONException, Exception {
    WebResource r=resource();
    Map<JobId,Job> jobsMap=appContext.getAllJobs();
    for (    JobId id : jobsMap.keySet()) {
      String jobId=MRApps.toString(id);
      ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("conf").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
      assertEquals(MediaType.APPLICATION_XML_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
      String xml=response.getEntity(String.class);
      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      DocumentBuilder db=dbf.newDocumentBuilder();
      InputSource is=new InputSource();
      is.setCharacterStream(new StringReader(xml));
      Document dom=db.parse(is);
      NodeList info=dom.getElementsByTagName("conf");
      verifyHsJobConfXML(info,jobsMap.get(id));
    }
  }
  public void verifyHsJobConf(  JSONObject info,  Job job) throws JSONException {
    assertEquals("incorrect number of elements",2,info.length());
    WebServicesTestUtils.checkStringMatch("path",job.getConfFile().toString(),info.getString("path"));
    JSONArray properties=info.getJSONArray("property");
    for (int i=0; i < properties.length(); i++) {
      JSONObject prop=properties.getJSONObject(i);
      String name=prop.getString("name");
      String value=prop.getString("value");
      assertTrue("name not set",(name != null && !name.isEmpty()));
      assertTrue("value not set",(value != null && !value.isEmpty()));
    }
  }
  public void verifyHsJobConfXML(  NodeList nodes,  Job job){
    assertEquals("incorrect number of elements",1,nodes.getLength());
    for (int i=0; i < nodes.getLength(); i++) {
      Element element=(Element)nodes.item(i);
      WebServicesTestUtils.checkStringMatch("path",job.getConfFile().toString(),WebServicesTestUtils.getXmlString(element,"path"));
      NodeList properties=element.getElementsByTagName("property");
      for (int j=0; j < properties.getLength(); j++) {
        Element property=(Element)properties.item(j);
        assertNotNull("should have counters in the web service info",property);
        String name=WebServicesTestUtils.getXmlString(property,"name");
        String value=WebServicesTestUtils.getXmlString(property,"value");
        assertTrue("name not set",(name != null && !name.isEmpty()));
        assertTrue("name not set",(value != null && !value.isEmpty()));
      }
    }
  }
}
