public class TestTableMapping {
  private String hostName1="1.2.3.4";
  private String hostName2="5.6.7.8";
  @Test public void testResolve() throws IOException {
    File mapFile=File.createTempFile(getClass().getSimpleName() + ".testResolve",".txt");
    Files.write(hostName1 + " /rack1\n" + hostName2+ "\t/rack2\n",mapFile,Charsets.UTF_8);
    mapFile.deleteOnExit();
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,mapFile.getCanonicalPath());
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals("/rack1",result.get(0));
    assertEquals("/rack2",result.get(1));
  }
  @Test public void testTableCaching() throws IOException {
    File mapFile=File.createTempFile(getClass().getSimpleName() + ".testTableCaching",".txt");
    Files.write(hostName1 + " /rack1\n" + hostName2+ "\t/rack2\n",mapFile,Charsets.UTF_8);
    mapFile.deleteOnExit();
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,mapFile.getCanonicalPath());
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result1=mapping.resolve(names);
    assertEquals(names.size(),result1.size());
    assertEquals("/rack1",result1.get(0));
    assertEquals("/rack2",result1.get(1));
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,"some bad value for a file");
    List<String> result2=mapping.resolve(names);
    assertEquals(result1,result2);
  }
  @Test public void testNoFile(){
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals(NetworkTopology.DEFAULT_RACK,result.get(0));
    assertEquals(NetworkTopology.DEFAULT_RACK,result.get(1));
  }
  @Test public void testFileDoesNotExist(){
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,"/this/file/does/not/exist");
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals(result.get(0),NetworkTopology.DEFAULT_RACK);
    assertEquals(result.get(1),NetworkTopology.DEFAULT_RACK);
  }
  @Test public void testClearingCachedMappings() throws IOException {
    File mapFile=File.createTempFile(getClass().getSimpleName() + ".testClearingCachedMappings",".txt");
    Files.write(hostName1 + " /rack1\n" + hostName2+ "\t/rack2\n",mapFile,Charsets.UTF_8);
    mapFile.deleteOnExit();
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,mapFile.getCanonicalPath());
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals("/rack1",result.get(0));
    assertEquals("/rack2",result.get(1));
    Files.write("",mapFile,Charsets.UTF_8);
    mapping.reloadCachedMappings();
    names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals(NetworkTopology.DEFAULT_RACK,result.get(0));
    assertEquals(NetworkTopology.DEFAULT_RACK,result.get(1));
  }
  @Test(timeout=60000) public void testBadFile() throws IOException {
    File mapFile=File.createTempFile(getClass().getSimpleName() + ".testBadFile",".txt");
    Files.write("bad contents",mapFile,Charsets.UTF_8);
    mapFile.deleteOnExit();
    TableMapping mapping=new TableMapping();
    Configuration conf=new Configuration();
    conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,mapFile.getCanonicalPath());
    mapping.setConf(conf);
    List<String> names=new ArrayList<String>();
    names.add(hostName1);
    names.add(hostName2);
    List<String> result=mapping.resolve(names);
    assertEquals(names.size(),result.size());
    assertEquals(result.get(0),NetworkTopology.DEFAULT_RACK);
    assertEquals(result.get(1),NetworkTopology.DEFAULT_RACK);
  }
}
