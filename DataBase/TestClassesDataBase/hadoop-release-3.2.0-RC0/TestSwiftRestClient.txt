public class TestSwiftRestClient implements SwiftTestConstants {
  private static final Logger LOG=LoggerFactory.getLogger(TestSwiftRestClient.class);
  private Configuration conf;
  private boolean runTests;
  private URI serviceURI;
  @Before public void setup() throws IOException {
    conf=new Configuration();
    runTests=SwiftTestUtils.hasServiceURI(conf);
    if (runTests) {
      serviceURI=SwiftTestUtils.getServiceURI(conf);
    }
  }
  protected void assumeEnabled(){
    Assume.assumeTrue(runTests);
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testCreate() throws Throwable {
    assumeEnabled();
    SwiftRestClient client=createClient();
  }
  private SwiftRestClient createClient() throws IOException {
    return SwiftRestClient.getInstance(serviceURI,conf);
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testAuthenticate() throws Throwable {
    assumeEnabled();
    SwiftRestClient client=createClient();
    client.authenticate();
  }
  @Test(timeout=SWIFT_TEST_TIMEOUT) public void testPutAndDelete() throws Throwable {
    assumeEnabled();
    SwiftRestClient client=createClient();
    client.authenticate();
    Path path=new Path("restTestPutAndDelete");
    SwiftObjectPath sobject=SwiftObjectPath.fromPath(serviceURI,path);
    byte[] stuff=new byte[1];
    stuff[0]='a';
    client.upload(sobject,new ByteArrayInputStream(stuff),stuff.length);
    Duration head=new Duration();
    Header[] responseHeaders=client.headRequest("expect success",sobject,SwiftRestClient.NEWEST);
    head.finished();
    LOG.info("head request duration " + head);
    for (    Header header : responseHeaders) {
      LOG.info(header.toString());
    }
    client.delete(sobject);
    try {
      Header[] headers=client.headRequest("expect fail",sobject,SwiftRestClient.NEWEST);
      Assert.fail("Expected deleted file, but object is still present: " + sobject);
    }
 catch (    FileNotFoundException e) {
    }
    for (    DurationStats stats : client.getOperationStatistics()) {
      LOG.info(stats.toString());
    }
  }
}
