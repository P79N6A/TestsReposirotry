public class TestProportionalCapacityPreemptionPolicyIntraQueueFairOrdering extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,true);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testIntraQueuePreemptionFairOrderingPolicyEnabledOneAppPerUser() throws IOException {
    conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".a.ordering-policy","fair");
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)1.0);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 1 0]);" + "-a(=[100 100 100 1 0])";
    String appsConfig="a\t" + "(1,1,n1,,60,false,0,user1);" + "a\t"+ "(1,1,n1,,40,false,0,user2);"+ "a\t"+ "(1,1,n1,,0,false,20,user3)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testIntraQueuePreemptionFifoOrderingPolicyEnabled() throws IOException {
    conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".a.ordering-policy","fifo");
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)1.0);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 1 0]);" + "-a(=[100 100 100 1 0])";
    String appsConfig="a\t" + "(1,1,n1,,60,false,0,user1);" + "a\t"+ "(1,1,n1,,40,false,0,user2);"+ "a\t"+ "(1,1,n1,,0,false,5,user3)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    appsConfig="a\t" + "(1,1,n1,,60,false,0,user1);" + "a\t"+ "(1,1,n1,,35,false,0,user2);"+ "a\t"+ "(1,1,n1,,5,false,15,user3)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(15)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testIntraQueuePreemptionFairOrderingPolicyMulitipleAppsPerUser() throws IOException {
    conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".a.ordering-policy","fair");
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)1.0);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 1 0]);" + "-a(=[100 100 100 1 0])";
    String appsConfig="a\t" + "(1,1,n1,,35,false,0,user1);" + "a\t"+ "(1,1,n1,,25,false,0,user1);"+ "a\t"+ "(1,1,n1,,40,false,0,user2);"+ "a\t"+ "(1,1,n1,,0,false,20,user3)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testIntraQueuePreemptionFifoOrderingPolicyMultipleAppsPerUser() throws IOException {
    conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".a.ordering-policy","fifo");
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)1.0);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 1 0]);" + "-a(=[100 100 100 1 0])";
    String appsConfig="a\t" + "(1,1,n1,,40,false,0,user1);" + "a\t"+ "(1,1,n1,,20,false,0,user1);"+ "a\t"+ "(1,1,n1,,40,false,0,user3);"+ "a\t"+ "(1,1,n1,,0,false,25,user4)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(19)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
}
