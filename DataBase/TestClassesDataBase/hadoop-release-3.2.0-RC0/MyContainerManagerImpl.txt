private static final class MyContainerManagerImpl implements ContainerManagementProtocol {
  boolean launched=false;
  boolean cleanedup=false;
  String attemptIdAtContainerManager=null;
  String containerIdAtContainerManager=null;
  String nmHostAtContainerManager=null;
  long submitTimeAtContainerManager;
  int maxAppAttempts;
  @Override public StartContainersResponse startContainers(  StartContainersRequest requests) throws YarnException {
    StartContainerRequest request=requests.getStartContainerRequests().get(0);
    LOG.info("Container started by MyContainerManager: " + request);
    launched=true;
    Map<String,String> env=request.getContainerLaunchContext().getEnvironment();
    Token containerToken=request.getContainerToken();
    ContainerTokenIdentifier tokenId=null;
    try {
      tokenId=BuilderUtils.newContainerTokenIdentifier(containerToken);
    }
 catch (    IOException e) {
      throw RPCUtil.getRemoteException(e);
    }
    ContainerId containerId=tokenId.getContainerID();
    containerIdAtContainerManager=containerId.toString();
    attemptIdAtContainerManager=containerId.getApplicationAttemptId().toString();
    nmHostAtContainerManager=tokenId.getNmHostAddress();
    submitTimeAtContainerManager=Long.parseLong(env.get(ApplicationConstants.APP_SUBMIT_TIME_ENV));
    maxAppAttempts=YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS;
    return StartContainersResponse.newInstance(new HashMap<String,ByteBuffer>(),new ArrayList<ContainerId>(),new HashMap<ContainerId,SerializedException>());
  }
  @Override public StopContainersResponse stopContainers(  StopContainersRequest request) throws YarnException {
    LOG.info("Container cleaned up by MyContainerManager");
    cleanedup=true;
    return null;
  }
  @Override public GetContainerStatusesResponse getContainerStatuses(  GetContainerStatusesRequest request) throws YarnException {
    return null;
  }
  @Override @Deprecated public IncreaseContainersResourceResponse increaseContainersResource(  IncreaseContainersResourceRequest request) throws YarnException {
    return null;
  }
  @Override public SignalContainerResponse signalToContainer(  SignalContainerRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ResourceLocalizationResponse localize(  ResourceLocalizationRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ReInitializeContainerResponse reInitializeContainer(  ReInitializeContainerRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public RestartContainerResponse restartContainer(  ContainerId containerId) throws YarnException, IOException {
    return null;
  }
  @Override public RollbackResponse rollbackLastReInitialization(  ContainerId containerId) throws YarnException, IOException {
    return null;
  }
  @Override public CommitResponse commitLastReInitialization(  ContainerId containerId) throws YarnException, IOException {
    return null;
  }
  @Override public ContainerUpdateResponse updateContainer(  ContainerUpdateRequest request) throws YarnException, IOException {
    return null;
  }
}
