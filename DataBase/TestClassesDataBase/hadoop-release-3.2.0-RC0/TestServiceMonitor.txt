public class TestServiceMonitor extends ServiceTestUtils {
  private File basedir;
  YarnConfiguration conf=new YarnConfiguration();
  TestingCluster zkCluster;
  @Before public void setup() throws Exception {
    basedir=new File("target","apps");
    if (basedir.exists()) {
      FileUtils.deleteDirectory(basedir);
    }
 else {
      basedir.mkdirs();
    }
    conf.setLong(YarnServiceConf.READINESS_CHECK_INTERVAL,2);
    zkCluster=new TestingCluster(1);
    zkCluster.start();
    conf.set(KEY_REGISTRY_ZK_QUORUM,zkCluster.getConnectString());
    System.out.println("ZK cluster: " + zkCluster.getConnectString());
  }
  @After public void tearDown() throws IOException {
    if (basedir != null) {
      FileUtils.deleteDirectory(basedir);
    }
    if (zkCluster != null) {
      zkCluster.stop();
    }
  }
  @Test public void testComponentDependency() throws Exception {
    ApplicationId applicationId=ApplicationId.newInstance(123456,1);
    Service exampleApp=new Service();
    exampleApp.setVersion("v1");
    exampleApp.setId(applicationId.toString());
    exampleApp.setName("testComponentDependency");
    exampleApp.addComponent(createComponent("compa",1,"sleep 1000"));
    Component compb=createComponent("compb",1,"sleep 1000");
    compb.setDependencies(Collections.singletonList("compa"));
    exampleApp.addComponent(compb);
    MockServiceAM am=new MockServiceAM(exampleApp);
    am.init(conf);
    am.start();
    Assert.assertTrue(am.getComponent("compa").areDependenciesReady());
    Assert.assertFalse(am.getComponent("compb").areDependenciesReady());
    am.feedContainerToComp(exampleApp,1,"compa");
    am.waitForDependenciesSatisfied("compb");
    am.feedContainerToComp(exampleApp,2,"compb");
    am.flexComponent("compa",2);
    am.waitForNumDesiredContainers("compa",2);
    Assert.assertFalse(am.getComponent("compb").areDependenciesReady());
    am.stop();
  }
}
