/** 
 * Test compatibility between ABFS client and WASB client.
 */
public class ITestWasbAbfsCompatibility extends AbstractAbfsIntegrationTest {
  private static final String WASB_TEST_CONTEXT="wasb test file";
  private static final String ABFS_TEST_CONTEXT="abfs test file";
  private static final String TEST_CONTEXT="THIS IS FOR TEST";
  private static final Logger LOG=LoggerFactory.getLogger(ITestWasbAbfsCompatibility.class);
  public ITestWasbAbfsCompatibility() throws Exception {
    Assume.assumeFalse("Emulator is not supported",isIPAddress());
    Assume.assumeTrue(this.getAuthType() == AuthType.SharedKey);
  }
  @Test public void testListFileStatus() throws Exception {
    AzureBlobFileSystem fs=getFileSystem();
    Assume.assumeFalse(fs.getIsNamespaceEnabled());
    NativeAzureFileSystem wasb=getWasbFileSystem();
    Path path1=new Path("/testfiles/~12/!008/3/abFsTestfile");
    try (FSDataOutputStream abfsStream=fs.create(path1,true)){
      abfsStream.write(ABFS_TEST_CONTEXT.getBytes());
      abfsStream.flush();
      abfsStream.hsync();
    }
     Path path2=new Path("/testfiles/~12/!008/3/nativeFsTestfile");
    LOG.info("{}",wasb.getUri());
    try (FSDataOutputStream nativeFsStream=wasb.create(path2,true)){
      nativeFsStream.write(WASB_TEST_CONTEXT.getBytes());
      nativeFsStream.flush();
      nativeFsStream.hsync();
    }
     FileStatus[] abfsFileStatus=fs.listStatus(new Path("/testfiles/~12/!008/3/"));
    FileStatus[] nativeFsFileStatus=wasb.listStatus(new Path("/testfiles/~12/!008/3/"));
    assertEquals(2,abfsFileStatus.length);
    assertEquals(2,nativeFsFileStatus.length);
  }
  @Test public void testReadFile() throws Exception {
    boolean[] createFileWithAbfs=new boolean[]{false,true,false,true};
    boolean[] readFileWithAbfs=new boolean[]{false,true,true,false};
    AzureBlobFileSystem abfs=getFileSystem();
    Assume.assumeFalse(abfs.getIsNamespaceEnabled());
    NativeAzureFileSystem wasb=getWasbFileSystem();
    for (int i=0; i < 4; i++) {
      Path path=new Path("/testReadFile/~12/!008/testfile" + i);
      final FileSystem createFs=createFileWithAbfs[i] ? abfs : wasb;
      try (FSDataOutputStream nativeFsStream=createFs.create(path,true)){
        nativeFsStream.write(TEST_CONTEXT.getBytes());
        nativeFsStream.flush();
        nativeFsStream.hsync();
      }
       ContractTestUtils.assertIsFile(createFs,path);
      final FileSystem readFs=readFileWithAbfs[i] ? abfs : wasb;
      try (BufferedReader br=new BufferedReader(new InputStreamReader(readFs.open(path)))){
        String line=br.readLine();
        assertEquals("Wrong text from " + readFs,TEST_CONTEXT,line);
      }
       assertDeleted(readFs,path,true);
    }
  }
  @Test public void testDir() throws Exception {
    boolean[] createDirWithAbfs=new boolean[]{false,true,false,true};
    boolean[] readDirWithAbfs=new boolean[]{false,true,true,false};
    AzureBlobFileSystem abfs=getFileSystem();
    Assume.assumeFalse(abfs.getIsNamespaceEnabled());
    NativeAzureFileSystem wasb=getWasbFileSystem();
    for (int i=0; i < 4; i++) {
      Path path=new Path("/testDir/t" + i);
      final FileSystem createFs=createDirWithAbfs[i] ? abfs : wasb;
      assertTrue(createFs.mkdirs(path));
      assertPathExists(createFs,"Created dir not found with " + createFs,path);
      final FileSystem readFs=readDirWithAbfs[i] ? abfs : wasb;
      assertPathExists(readFs,"Created dir not found with " + readFs,path);
      assertIsDirectory(readFs,path);
      assertDeleted(readFs,path,true);
    }
  }
  @Test public void testUrlConversion(){
    String abfsUrl="abfs://abcde-1111-1111-1111-1111@xxxx.dfs.xxx.xxx.xxxx.xxxx";
    String wabsUrl="wasb://abcde-1111-1111-1111-1111@xxxx.blob.xxx.xxx.xxxx.xxxx";
    assertEquals(abfsUrl,wasbUrlToAbfsUrl(wabsUrl));
    assertEquals(wabsUrl,abfsUrlToWasbUrl(abfsUrl));
  }
  @Test public void testSetWorkingDirectory() throws Exception {
    AzureBlobFileSystem abfs=getFileSystem();
    Assume.assumeFalse(abfs.getIsNamespaceEnabled());
    NativeAzureFileSystem wasb=getWasbFileSystem();
    Path d1d4=new Path("/d1/d2/d3/d4");
    assertMkdirs(abfs,d1d4);
    Path path1=new Path("/d1/d2");
    wasb.setWorkingDirectory(path1);
    abfs.setWorkingDirectory(path1);
    assertEquals(path1,wasb.getWorkingDirectory());
    assertEquals(path1,abfs.getWorkingDirectory());
    Path path2=new Path("d3/d4");
    wasb.setWorkingDirectory(path2);
    abfs.setWorkingDirectory(path2);
    Path path3=d1d4;
    assertEquals(path3,wasb.getWorkingDirectory());
    assertEquals(path3,abfs.getWorkingDirectory());
  }
}
