public class TestAsyncDispatcher {
  @SuppressWarnings({"unchecked","rawtypes"}) @Test(timeout=10000) public void testDispatcherOnCloseIfQueueEmpty() throws Exception {
    BlockingQueue<Event> eventQueue=spy(new LinkedBlockingQueue<Event>());
    Event event=mock(Event.class);
    doThrow(new InterruptedException()).when(eventQueue).put(event);
    DrainDispatcher disp=new DrainDispatcher(eventQueue);
    disp.init(new Configuration());
    disp.setDrainEventsOnStop();
    disp.start();
    disp.waitForEventThreadToWait();
    try {
      disp.getEventHandler().handle(event);
      Assert.fail("Expected YarnRuntimeException");
    }
 catch (    YarnRuntimeException e) {
      Assert.assertTrue(e.getCause() instanceof InterruptedException);
    }
    Assert.assertTrue("Event Queue should have been empty",eventQueue.isEmpty());
    disp.close();
  }
  @Test(timeout=10000) public void testDispatchStopOnTimeout() throws Exception {
    BlockingQueue<Event> eventQueue=new LinkedBlockingQueue<Event>();
    eventQueue=spy(eventQueue);
    when(eventQueue.isEmpty()).thenReturn(false);
    YarnConfiguration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.DISPATCHER_DRAIN_EVENTS_TIMEOUT,2000);
    DrainDispatcher disp=new DrainDispatcher(eventQueue);
    disp.init(conf);
    disp.setDrainEventsOnStop();
    disp.start();
    disp.waitForEventThreadToWait();
    disp.close();
  }
@SuppressWarnings("rawtypes") private static class DummyHandler implements EventHandler<Event> {
    @Override public void handle(    Event event){
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  private enum DummyType {  DUMMY}
  @SuppressWarnings({"rawtypes","unchecked"}) private void dispatchDummyEvents(  Dispatcher disp,  int count){
    for (int i=0; i < count; i++) {
      Event event=mock(Event.class);
      when(event.getType()).thenReturn(DummyType.DUMMY);
      disp.getEventHandler().handle(event);
    }
  }
  @SuppressWarnings({"rawtypes"}) @Test(timeout=10000) public void testDrainDispatcherDrainEventsOnStop() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    conf.setInt(YarnConfiguration.DISPATCHER_DRAIN_EVENTS_TIMEOUT,2000);
    BlockingQueue<Event> queue=new LinkedBlockingQueue<Event>();
    DrainDispatcher disp=new DrainDispatcher(queue);
    disp.init(conf);
    disp.register(DummyType.class,new DummyHandler());
    disp.setDrainEventsOnStop();
    disp.start();
    disp.waitForEventThreadToWait();
    dispatchDummyEvents(disp,2);
    disp.close();
    assertEquals(0,queue.size());
  }
}
