private static class MyKeyProvider extends KeyProvider {
  private String algorithm;
  private int size;
  private byte[] material;
  public MyKeyProvider(  Configuration conf){
    super(conf);
  }
  @Override public KeyVersion getKeyVersion(  String versionName) throws IOException {
    return null;
  }
  @Override public List<String> getKeys() throws IOException {
    return null;
  }
  @Override public List<KeyVersion> getKeyVersions(  String name) throws IOException {
    return null;
  }
  @Override public Metadata getMetadata(  String name) throws IOException {
    if (!"unknown".equals(name)) {
      return new Metadata(CIPHER,128,"description",null,new Date(),0);
    }
    return null;
  }
  @Override public KeyVersion createKey(  String name,  byte[] material,  Options options) throws IOException {
    this.material=material;
    return null;
  }
  @Override public void deleteKey(  String name) throws IOException {
  }
  @Override public KeyVersion rollNewVersion(  String name,  byte[] material) throws IOException {
    this.material=material;
    return null;
  }
  @Override public void flush() throws IOException {
  }
  @Override protected byte[] generateKey(  int size,  String algorithm) throws NoSuchAlgorithmException {
    this.size=size;
    this.algorithm=algorithm;
    return super.generateKey(size,algorithm);
  }
}
