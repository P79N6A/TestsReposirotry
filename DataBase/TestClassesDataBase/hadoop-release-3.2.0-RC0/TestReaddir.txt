/** 
 * Test READDIR and READDIRPLUS request with zero, nonzero cookies
 */
public class TestReaddir {
  static NfsConfiguration config=new NfsConfiguration();
  static MiniDFSCluster cluster=null;
  static DistributedFileSystem hdfs;
  static NameNode nn;
  static RpcProgramNfs3 nfsd;
  static String testdir="/tmp";
  static SecurityHandler securityHandler;
  @BeforeClass public static void setup() throws Exception {
    String currentUser=System.getProperty("user.name");
    config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser),"*");
    config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser),"*");
    ProxyUsers.refreshSuperUserGroupsConfiguration(config);
    cluster=new MiniDFSCluster.Builder(config).numDataNodes(1).build();
    cluster.waitActive();
    hdfs=cluster.getFileSystem();
    nn=cluster.getNameNode();
    config.setInt("nfs3.mountd.port",0);
    config.setInt("nfs3.server.port",0);
    Nfs3 nfs3=new Nfs3(config);
    nfs3.startServiceInternal(false);
    nfsd=(RpcProgramNfs3)nfs3.getRpcProgram();
    securityHandler=Mockito.mock(SecurityHandler.class);
    Mockito.when(securityHandler.getUser()).thenReturn(System.getProperty("user.name"));
  }
  @AfterClass public static void shutdown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Before public void createFiles() throws IllegalArgumentException, IOException {
    hdfs.delete(new Path(testdir),true);
    hdfs.mkdirs(new Path(testdir));
    DFSTestUtil.createFile(hdfs,new Path(testdir + "/f1"),0,(short)1,0);
    DFSTestUtil.createFile(hdfs,new Path(testdir + "/f2"),0,(short)1,0);
    DFSTestUtil.createFile(hdfs,new Path(testdir + "/f3"),0,(short)1,0);
  }
  @Test public void testReaddirBasic() throws IOException {
    HdfsFileStatus status=nn.getRpcServer().getFileInfo(testdir);
    long dirId=status.getFileId();
    int namenodeId=Nfs3Utils.getNamenodeId(config);
    XDR xdr_req=new XDR();
    FileHandle handle=new FileHandle(dirId,namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeInt(100);
    READDIR3Response response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    List<Entry3> dirents=response.getDirList().getEntries();
    assertTrue(dirents.size() == 5);
    status=nn.getRpcServer().getFileInfo(testdir + "/f2");
    long f2Id=status.getFileId();
    xdr_req=new XDR();
    handle=new FileHandle(dirId,namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(f2Id);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeInt(100);
    response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    dirents=response.getDirList().getEntries();
    assertTrue(dirents.size() == 1);
    Entry3 entry=dirents.get(0);
    assertTrue(entry.getName().equals("f3"));
    hdfs.delete(new Path(testdir + "/f2"),false);
    response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    dirents=response.getDirList().getEntries();
    assertTrue(dirents.size() == 2);
  }
  @Test public void testReaddirPlus() throws IOException {
    HdfsFileStatus status=nn.getRpcServer().getFileInfo(testdir);
    long dirId=status.getFileId();
    int namenodeId=Nfs3Utils.getNamenodeId(config);
    XDR xdr_req=new XDR();
    FileHandle handle=new FileHandle(dirId,namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeInt(100);
    xdr_req.writeInt(1000);
    READDIRPLUS3Response responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    List<EntryPlus3> direntPlus=responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 5);
    status=nn.getRpcServer().getFileInfo(testdir + "/f2");
    long f2Id=status.getFileId();
    xdr_req=new XDR();
    handle=new FileHandle(dirId,namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(f2Id);
    xdr_req.writeLongAsHyper(0);
    xdr_req.writeInt(100);
    xdr_req.writeInt(1000);
    responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    direntPlus=responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 1);
    EntryPlus3 entryPlus=direntPlus.get(0);
    assertTrue(entryPlus.getName().equals("f3"));
    hdfs.delete(new Path(testdir + "/f2"),false);
    responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
    direntPlus=responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 2);
  }
}
