/** 
 * Unit test for  {@link TestShuffleClientMetrics}.
 */
public class TestShuffleClientMetrics {
  private static final String TEST_JOB_NAME="Test job name";
  private static final String TEST_JOB_ID="Test job id";
  private static final String TEST_TASK_ID="Test task id";
  private static final String TEST_USER_NAME="Test user name";
  @Test public void testShuffleMetricsTags(){
    JobID jobID=mock(JobID.class);
    when(jobID.toString()).thenReturn(TEST_JOB_ID);
    TaskAttemptID reduceId=mock(TaskAttemptID.class);
    when(reduceId.getJobID()).thenReturn(jobID);
    when(reduceId.toString()).thenReturn(TEST_TASK_ID);
    JobConf jobConf=mock(JobConf.class);
    when(jobConf.getUser()).thenReturn(TEST_USER_NAME);
    when(jobConf.getJobName()).thenReturn(TEST_JOB_NAME);
    ShuffleClientMetrics shuffleClientMetrics=ShuffleClientMetrics.create(reduceId,jobConf);
    MetricsTag userMetrics=shuffleClientMetrics.getMetricsRegistry().getTag("user");
    assertEquals(TEST_USER_NAME,userMetrics.value());
    MetricsTag jobNameMetrics=shuffleClientMetrics.getMetricsRegistry().getTag("jobName");
    assertEquals(TEST_JOB_NAME,jobNameMetrics.value());
    MetricsTag jobIdMetrics=shuffleClientMetrics.getMetricsRegistry().getTag("jobId");
    assertEquals(TEST_JOB_ID,jobIdMetrics.value());
    MetricsTag taskIdMetrics=shuffleClientMetrics.getMetricsRegistry().getTag("taskId");
    assertEquals(TEST_TASK_ID,taskIdMetrics.value());
  }
}
