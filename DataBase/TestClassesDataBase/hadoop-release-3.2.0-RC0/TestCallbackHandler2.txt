private class TestCallbackHandler2 extends NMClientAsync.AbstractCallbackHandler {
  private CyclicBarrier barrierC;
  private AtomicBoolean exceptionOccurred=new AtomicBoolean(false);
  public TestCallbackHandler2(  CyclicBarrier barrierC){
    this.barrierC=barrierC;
  }
  @Override public void onContainerStarted(  ContainerId containerId,  Map<String,ByteBuffer> allServiceResponse){
  }
  @Override public void onContainerStatusReceived(  ContainerId containerId,  ContainerStatus containerStatus){
  }
  @Deprecated @Override public void onContainerResourceIncreased(  ContainerId containerId,  Resource resource){
  }
  @Override public void onContainerResourceUpdated(  ContainerId containerId,  Resource resource){
  }
  @Override public void onContainerStopped(  ContainerId containerId){
  }
  @Override public void onStartContainerError(  ContainerId containerId,  Throwable t){
    if (!t.getMessage().equals(NMClientAsyncImpl.StatefulContainer.OutOfOrderTransition.STOP_BEFORE_START_ERROR_MSG)) {
      exceptionOccurred.set(true);
      return;
    }
    try {
      barrierC.await();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    BrokenBarrierException e) {
      e.printStackTrace();
    }
  }
  @Override public void onGetContainerStatusError(  ContainerId containerId,  Throwable t){
  }
  @Deprecated @Override public void onIncreaseContainerResourceError(  ContainerId containerId,  Throwable t){
  }
  @Override public void onUpdateContainerResourceError(  ContainerId containerId,  Throwable t){
  }
  @Override public void onStopContainerError(  ContainerId containerId,  Throwable t){
  }
}
