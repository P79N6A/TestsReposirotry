/** 
 * A dummy  {@link DiskChecker#FileIoProvider} that can throw a programmablenumber of times.
 */
private static class TestFileIoProvider implements FileIoProvider {
  private final AtomicInteger numCreateCalls=new AtomicInteger(0);
  private final AtomicInteger numWriteCalls=new AtomicInteger(0);
  private final int numTimesToThrowOnCreate;
  private final int numTimesToThrowOnWrite;
  public TestFileIoProvider(  int numTimesToThrowOnCreate,  int numTimesToThrowOnWrite){
    this.numTimesToThrowOnCreate=numTimesToThrowOnCreate;
    this.numTimesToThrowOnWrite=numTimesToThrowOnWrite;
  }
  /** 
 * {@inheritDoc}
 */
  @Override public FileOutputStream get(  File f) throws FileNotFoundException {
    if (numCreateCalls.getAndIncrement() < numTimesToThrowOnCreate) {
      throw new FileNotFoundException("Dummy exception for testing");
    }
    return new FileOutputStream(f);
  }
  /** 
 * {@inheritDoc}
 */
  @Override public void write(  FileOutputStream fos,  byte[] data) throws IOException {
    if (numWriteCalls.getAndIncrement() < numTimesToThrowOnWrite) {
      throw new IOException("Dummy exception for testing");
    }
    fos.write(data);
  }
}
