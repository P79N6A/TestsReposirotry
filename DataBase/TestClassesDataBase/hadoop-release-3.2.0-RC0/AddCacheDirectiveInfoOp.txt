/** 
 * addCacheDirective 
 */
class AddCacheDirectiveInfoOp extends AtMostOnceOp {
  private final CacheDirectiveInfo directive;
  private Long result;
  AddCacheDirectiveInfoOp(  DFSClient client,  CacheDirectiveInfo directive){
    super("addCacheDirective",client);
    this.directive=directive;
  }
  @Override void prepare() throws Exception {
    expectedUpdateCount++;
    dfs.addCachePool(new CachePoolInfo(directive.getPool()));
  }
  @Override void invoke() throws Exception {
    expectedUpdateCount++;
    result=client.addCacheDirective(directive,EnumSet.of(CacheFlag.FORCE));
  }
  @Override boolean checkNamenodeBeforeReturn() throws Exception {
    for (int i=0; i < CHECKTIMES; i++) {
      RemoteIterator<CacheDirectiveEntry> iter=dfs.listCacheDirectives(new CacheDirectiveInfo.Builder().setPool(directive.getPool()).setPath(directive.getPath()).build());
      if (iter.hasNext()) {
        return true;
      }
      Thread.sleep(1000);
    }
    return false;
  }
  @Override Object getResult(){
    return result;
  }
}
