public class TestSignalContainer {
  private static final Log LOG=LogFactory.getLog(TestSignalContainer.class);
  @Test public void testSignalRequestDeliveryToNM() throws Exception {
    Logger rootLogger=LogManager.getRootLogger();
    rootLogger.setLevel(Level.DEBUG);
    MockRM rm=new MockRM();
    FairScheduler fs=null;
    if (rm.getResourceScheduler().getClass() == FairScheduler.class) {
      fs=(FairScheduler)rm.getResourceScheduler();
    }
    rm.start();
    MockNM nm1=rm.registerNode("h1:1234",5000);
    RMApp app=rm.submitApp(2000);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt=app.getCurrentAppAttempt();
    MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
    am.registerAppAttempt();
    final int request=2;
    am.allocate("h1",1000,request,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    List<Container> conts=new ArrayList<>(request);
    int waitCount=0;
    while (conts.size() < request && waitCount++ < 200) {
      LOG.info("Got " + conts.size() + " containers. Waiting to get "+ request);
      Thread.sleep(100);
      List<Container> allocation=am.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
      conts.addAll(allocation);
      if (fs != null) {
        nm1.nodeHeartbeat(true);
      }
    }
    Assert.assertEquals(request,conts.size());
    for (    Container container : conts) {
      rm.signalToContainer(container.getId(),SignalContainerCommand.OUTPUT_THREAD_DUMP);
    }
    NodeHeartbeatResponse resp;
    List<SignalContainerRequest> contsToSignal;
    int signaledConts=0;
    waitCount=0;
    while (signaledConts < request && waitCount++ < 200) {
      LOG.info("Waiting to get signalcontainer events.. signaledConts: " + signaledConts);
      resp=nm1.nodeHeartbeat(true);
      contsToSignal=resp.getContainersToSignalList();
      signaledConts+=contsToSignal.size();
      Thread.sleep(100);
    }
    Assert.assertEquals(request,signaledConts);
    am.unregisterAppAttempt();
    nm1.nodeHeartbeat(attempt.getAppAttemptId(),1,ContainerState.COMPLETE);
    rm.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FINISHED);
    rm.stop();
  }
}
