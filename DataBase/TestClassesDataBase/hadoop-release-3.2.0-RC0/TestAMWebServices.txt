/** 
 * Test the MapReduce Application master info web services api's. Also test non-existent urls. /ws/v1/mapreduce /ws/v1/mapreduce/info
 */
public class TestAMWebServices extends JerseyTestBase {
  private static Configuration conf=new Configuration();
  private static MockAppContext appContext;
private static class WebServletModule extends ServletModule {
    @Override protected void configureServlets(){
      appContext=new MockAppContext(0,1,1,1);
      appContext.setBlacklistedNodes(Sets.newHashSet("badnode1","badnode2"));
      bind(JAXBContextResolver.class);
      bind(AMWebServices.class);
      bind(GenericExceptionHandler.class);
      bind(AppContext.class).toInstance(appContext);
      bind(Configuration.class).toInstance(conf);
      serve("/*").with(GuiceContainer.class);
    }
  }
static {
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));
  }
  public TestAMWebServices(){
    super(new WebAppDescriptor.Builder("org.apache.hadoop.mapreduce.v2.app.webapp").contextListenerClass(GuiceServletConfig.class).filterClass(com.google.inject.servlet.GuiceFilter.class).contextPath("jersey-guice-filter").servletPath("/").build());
  }
  @Test public void testAM() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testAMSlash() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testAMDefault() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce/").get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testAMXML() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    String xml=response.getEntity(String.class);
    verifyAMInfoXML(xml,appContext);
  }
  @Test public void testInfo() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("info").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testInfoSlash() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("info/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testInfoDefault() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("info/").get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyAMInfo(json.getJSONObject("info"),appContext);
  }
  @Test public void testInfoXML() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("info/").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    String xml=response.getEntity(String.class);
    verifyAMInfoXML(xml,appContext);
  }
  @Test public void testInvalidUri() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("mapreduce").path("bogus").accept(MediaType.APPLICATION_JSON).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.NOT_FOUND,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  @Test public void testInvalidUri2() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("invalid").accept(MediaType.APPLICATION_JSON).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.NOT_FOUND,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  @Test public void testInvalidAccept() throws JSONException, Exception {
    WebResource r=resource();
    String responseStr="";
    try {
      responseStr=r.path("ws").path("v1").path("mapreduce").accept(MediaType.TEXT_PLAIN).get(String.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertResponseStatusCode(Status.INTERNAL_SERVER_ERROR,response.getStatusInfo());
      WebServicesTestUtils.checkStringMatch("error string exists and shouldn't","",responseStr);
    }
  }
  @Test public void testBlacklistedNodes() throws JSONException, Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("blacklistednodes").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    verifyBlacklistedNodesInfo(json,appContext);
  }
  @Test public void testBlacklistedNodesXML() throws Exception {
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("mapreduce").path("blacklistednodes").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8,response.getType().toString());
    String xml=response.getEntity(String.class);
    verifyBlacklistedNodesInfoXML(xml,appContext);
  }
  public void verifyAMInfo(  JSONObject info,  AppContext ctx) throws JSONException {
    assertEquals("incorrect number of elements",5,info.length());
    verifyAMInfoGeneric(ctx,info.getString("appId"),info.getString("user"),info.getString("name"),info.getLong("startedOn"),info.getLong("elapsedTime"));
  }
  public void verifyAMInfoXML(  String xml,  AppContext ctx) throws JSONException, Exception {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(xml));
    Document dom=db.parse(is);
    NodeList nodes=dom.getElementsByTagName("info");
    assertEquals("incorrect number of elements",1,nodes.getLength());
    for (int i=0; i < nodes.getLength(); i++) {
      Element element=(Element)nodes.item(i);
      verifyAMInfoGeneric(ctx,WebServicesTestUtils.getXmlString(element,"appId"),WebServicesTestUtils.getXmlString(element,"user"),WebServicesTestUtils.getXmlString(element,"name"),WebServicesTestUtils.getXmlLong(element,"startedOn"),WebServicesTestUtils.getXmlLong(element,"elapsedTime"));
    }
  }
  public void verifyAMInfoGeneric(  AppContext ctx,  String id,  String user,  String name,  long startedOn,  long elapsedTime){
    WebServicesTestUtils.checkStringMatch("id",ctx.getApplicationID().toString(),id);
    WebServicesTestUtils.checkStringMatch("user",ctx.getUser().toString(),user);
    WebServicesTestUtils.checkStringMatch("name",ctx.getApplicationName(),name);
    assertEquals("startedOn incorrect",ctx.getStartTime(),startedOn);
    assertTrue("elapsedTime not greater then 0",(elapsedTime > 0));
  }
  public void verifyBlacklistedNodesInfo(  JSONObject blacklist,  AppContext ctx) throws JSONException, Exception {
    JSONArray array=blacklist.getJSONArray("blacklistedNodes");
    assertEquals(array.length(),ctx.getBlacklistedNodes().size());
    for (int i=0; i < array.length(); i++) {
      assertTrue(ctx.getBlacklistedNodes().contains(array.getString(i)));
    }
  }
  public void verifyBlacklistedNodesInfoXML(  String xml,  AppContext ctx) throws JSONException, Exception {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(xml));
    Document dom=db.parse(is);
    NodeList infonodes=dom.getElementsByTagName("blacklistednodesinfo");
    assertEquals("incorrect number of elements",1,infonodes.getLength());
    NodeList nodes=dom.getElementsByTagName("blacklistedNodes");
    Set<String> blacklistedNodes=ctx.getBlacklistedNodes();
    assertEquals("incorrect number of elements",blacklistedNodes.size(),nodes.getLength());
    for (int i=0; i < nodes.getLength(); i++) {
      Element element=(Element)nodes.item(i);
      assertTrue(blacklistedNodes.contains(element.getFirstChild().getNodeValue()));
    }
  }
}
