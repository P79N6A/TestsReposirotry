/** 
 * Unit test for  {@link KMSClientProvider} class.
 */
public class TestKMSClientProvider {
  public static final Logger LOG=LoggerFactory.getLogger(TestKMSClientProvider.class);
  private final Token token=new Token();
  private final Token oldToken=new Token();
  private final String urlString="https://host:16000/kms";
  private final String providerUriString="kms://https@host:16000/kms";
  private final String oldTokenService="host:16000";
  @Rule public Timeout globalTimeout=new Timeout(60000);
{
    GenericTestUtils.setLogLevel(KMSClientProvider.LOG,Level.TRACE);
  }
  @Before public void setup(){
    SecurityUtil.setTokenServiceUseIp(false);
    token.setKind(TOKEN_KIND);
    token.setService(new Text(providerUriString));
    oldToken.setKind(TOKEN_KIND);
    oldToken.setService(new Text(oldTokenService));
  }
  @Test public void testSelectDelegationToken() throws Exception {
    final Credentials creds=new Credentials();
    creds.addToken(new Text(providerUriString),token);
    assertNull(KMSClientProvider.selectDelegationToken(creds,null));
    assertNull(KMSClientProvider.selectDelegationToken(creds,new Text(oldTokenService)));
    assertEquals(token,KMSClientProvider.selectDelegationToken(creds,new Text(providerUriString)));
  }
  @Test public void testSelectTokenOldService() throws Exception {
    final Configuration conf=new Configuration();
    final URI uri=new URI(providerUriString);
    final KMSClientProvider kp=new KMSClientProvider(uri,conf);
    try {
      final Credentials creds=new Credentials();
      creds.addToken(new Text(oldTokenService),oldToken);
      final Token t=kp.selectDelegationToken(creds);
      assertEquals(oldToken,t);
    }
  finally {
      kp.close();
    }
  }
  @Test public void testSelectTokenWhenBothExist() throws Exception {
    final Credentials creds=new Credentials();
    final Configuration conf=new Configuration();
    final URI uri=new URI(providerUriString);
    final KMSClientProvider kp=new KMSClientProvider(uri,conf);
    try {
      creds.addToken(token.getService(),token);
      creds.addToken(oldToken.getService(),oldToken);
      final Token t=kp.selectDelegationToken(creds);
      assertEquals("new token should be selected when both exist",token,t);
    }
  finally {
      kp.close();
    }
  }
  @Test public void testURLSelectTokenUriFormat() throws Exception {
    testURLSelectToken(token);
  }
  @Test public void testURLSelectTokenIpPort() throws Exception {
    testURLSelectToken(oldToken);
  }
  private void testURLSelectToken(  final Token tok) throws URISyntaxException, IOException {
    final Configuration conf=new Configuration();
    final URI uri=new URI(providerUriString);
    final KMSClientProvider kp=new KMSClientProvider(uri,conf);
    final DelegationTokenAuthenticatedURL url=kp.createAuthenticatedURL();
    final Credentials creds=new Credentials();
    creds.addToken(tok.getService(),tok);
    final Token chosen=url.selectDelegationToken(new URL(urlString),creds);
    assertEquals(tok,chosen);
  }
}
