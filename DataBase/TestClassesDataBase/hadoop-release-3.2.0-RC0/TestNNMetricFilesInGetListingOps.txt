/** 
 * Test case for FilesInGetListingOps metric in Namenode
 */
public class TestNNMetricFilesInGetListingOps {
  private static final Configuration CONF=new HdfsConfiguration();
  private static final String NN_METRICS="NameNodeActivity";
static {
    CONF.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,100);
    CONF.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,1);
    CONF.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
    CONF.setInt(DFSConfigKeys.DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY,1);
  }
  private MiniDFSCluster cluster;
  private DistributedFileSystem fs;
  private final Random rand=new Random();
  @Before public void setUp() throws Exception {
    cluster=new MiniDFSCluster.Builder(CONF).build();
    cluster.waitActive();
    cluster.getNameNode();
    fs=cluster.getFileSystem();
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  /** 
 * create a file with a length of <code>fileLen</code> 
 */
  private void createFile(  String fileName,  long fileLen,  short replicas) throws IOException {
    Path filePath=new Path(fileName);
    DFSTestUtil.createFile(fs,filePath,fileLen,replicas,rand.nextLong());
  }
  @Test public void testFilesInGetListingOps() throws Exception {
    createFile("/tmp1/t1",3200,(short)3);
    createFile("/tmp1/t2",3200,(short)3);
    createFile("/tmp2/t1",3200,(short)3);
    createFile("/tmp2/t2",3200,(short)3);
    cluster.getNameNodeRpc().getListing("/tmp1",HdfsFileStatus.EMPTY_NAME,false);
    assertCounter("FilesInGetListingOps",2L,getMetrics(NN_METRICS));
    cluster.getNameNodeRpc().getListing("/tmp2",HdfsFileStatus.EMPTY_NAME,false);
    assertCounter("FilesInGetListingOps",4L,getMetrics(NN_METRICS));
  }
}
