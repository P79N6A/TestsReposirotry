/** 
 * Contains all value verifications that are needed to verify  {@link AppInfo}XML documents.
 */
public final class AppInfoXmlVerifications {
  private AppInfoXmlVerifications(){
  }
  /** 
 * Tests whether  {@link AppInfo} representation object contains the requiredvalues as per defined in the specified app parameter.
 * @param info
 * @param app  an RMApp instance that contains the required values
 */
  public static void verify(  Element info,  RMApp app){
    checkStringMatch("id",app.getApplicationId().toString(),getXmlString(info,"id"));
    checkStringMatch("user",app.getUser(),getXmlString(info,"user"));
    checkStringMatch("name",app.getName(),getXmlString(info,"name"));
    checkStringMatch("applicationType",app.getApplicationType(),getXmlString(info,"applicationType"));
    checkStringMatch("queue",app.getQueue(),getXmlString(info,"queue"));
    assertEquals("priority doesn't match",0,getXmlInt(info,"priority"));
    checkStringMatch("state",app.getState().toString(),getXmlString(info,"state"));
    checkStringMatch("finalStatus",app.getFinalApplicationStatus().toString(),getXmlString(info,"finalStatus"));
    assertEquals("progress doesn't match",0,getXmlFloat(info,"progress"),0.0);
    if ("UNASSIGNED".equals(getXmlString(info,"trackingUI"))) {
      checkStringMatch("trackingUI","UNASSIGNED",getXmlString(info,"trackingUI"));
    }
    WebServicesTestUtils.checkStringEqual("diagnostics",app.getDiagnostics().toString(),getXmlString(info,"diagnostics"));
    assertEquals("clusterId doesn't match",ResourceManager.getClusterTimeStamp(),getXmlLong(info,"clusterId"));
    assertEquals("startedTime doesn't match",app.getStartTime(),getXmlLong(info,"startedTime"));
    assertEquals("finishedTime doesn't match",app.getFinishTime(),getXmlLong(info,"finishedTime"));
    assertTrue("elapsed time not greater than 0",getXmlLong(info,"elapsedTime") > 0);
    checkStringMatch("amHostHttpAddress",app.getCurrentAppAttempt().getMasterContainer().getNodeHttpAddress(),getXmlString(info,"amHostHttpAddress"));
    assertTrue("amContainerLogs doesn't match",getXmlString(info,"amContainerLogs").startsWith("http://"));
    assertTrue("amContainerLogs doesn't contain user info",getXmlString(info,"amContainerLogs").endsWith("/" + app.getUser()));
    assertEquals("allocatedMB doesn't match",1024,getXmlInt(info,"allocatedMB"));
    assertEquals("allocatedVCores doesn't match",1,getXmlInt(info,"allocatedVCores"));
    assertEquals("queueUsagePerc doesn't match",50.0f,getXmlFloat(info,"queueUsagePercentage"),0.01f);
    assertEquals("clusterUsagePerc doesn't match",50.0f,getXmlFloat(info,"clusterUsagePercentage"),0.01f);
    assertEquals("numContainers doesn't match",1,getXmlInt(info,"runningContainers"));
    assertNotNull("preemptedResourceSecondsMap should not be null",info.getElementsByTagName("preemptedResourceSecondsMap"));
    assertEquals("preemptedResourceMB doesn't match",app.getRMAppMetrics().getResourcePreempted().getMemorySize(),getXmlInt(info,"preemptedResourceMB"));
    assertEquals("preemptedResourceVCores doesn't match",app.getRMAppMetrics().getResourcePreempted().getVirtualCores(),getXmlInt(info,"preemptedResourceVCores"));
    assertEquals("numNonAMContainerPreempted doesn't match",app.getRMAppMetrics().getNumNonAMContainersPreempted(),getXmlInt(info,"numNonAMContainerPreempted"));
    assertEquals("numAMContainerPreempted doesn't match",app.getRMAppMetrics().getNumAMContainersPreempted(),getXmlInt(info,"numAMContainerPreempted"));
    assertEquals("Log aggregation Status doesn't match",app.getLogAggregationStatusForAppReport().toString(),getXmlString(info,"logAggregationStatus"));
    assertEquals("unmanagedApplication doesn't match",app.getApplicationSubmissionContext().getUnmanagedAM(),getXmlBoolean(info,"unmanagedApplication"));
    assertEquals("unmanagedApplication doesn't match",app.getApplicationSubmissionContext().getNodeLabelExpression(),getXmlString(info,"appNodeLabelExpression"));
    assertEquals("unmanagedApplication doesn't match",app.getAMResourceRequests().get(0).getNodeLabelExpression(),getXmlString(info,"amNodeLabelExpression"));
    assertEquals("amRPCAddress",AppInfo.getAmRPCAddressFromRMAppAttempt(app.getCurrentAppAttempt()),getXmlString(info,"amRPCAddress"));
  }
}
