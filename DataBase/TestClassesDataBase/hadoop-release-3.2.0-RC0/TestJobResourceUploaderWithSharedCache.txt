/** 
 * Tests the JobResourceUploader class with the shared cache.
 */
public class TestJobResourceUploaderWithSharedCache {
  protected static final Logger LOG=LoggerFactory.getLogger(TestJobResourceUploaderWithSharedCache.class);
  private static MiniDFSCluster dfs;
  private static FileSystem localFs;
  private static FileSystem remoteFs;
  private static Configuration conf=new Configuration();
  private static Path testRootDir;
  private static Path remoteStagingDir=new Path(MRJobConfig.DEFAULT_MR_AM_STAGING_DIR);
  private String input="roses.are.red\nviolets.are.blue\nbunnies.are.pink\n";
  @Before public void cleanup() throws Exception {
    remoteFs.delete(remoteStagingDir,true);
  }
  @BeforeClass public static void setup() throws IOException {
    localFs=FileSystem.getLocal(conf);
    testRootDir=new Path("target",TestJobResourceUploaderWithSharedCache.class.getName() + "-tmpDir").makeQualified(localFs.getUri(),localFs.getWorkingDirectory());
    dfs=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build();
    remoteFs=dfs.getFileSystem();
  }
  @AfterClass public static void tearDown(){
    try {
      if (localFs != null) {
        localFs.close();
      }
      if (remoteFs != null) {
        remoteFs.close();
      }
      if (dfs != null) {
        dfs.shutdown();
      }
    }
 catch (    IOException ioe) {
      LOG.info("IO exception in closing file system");
      ioe.printStackTrace();
    }
  }
private class MyFileUploader extends JobResourceUploader {
    private SharedCacheClient mockscClient=mock(SharedCacheClient.class);
    private SharedCacheClient scClient=SharedCacheClient.createSharedCacheClient();
    MyFileUploader(    FileSystem submitFs,    Configuration conf) throws IOException {
      super(submitFs,false);
      scClient.init(conf);
      when(mockscClient.getFileChecksum(any(Path.class))).thenAnswer(new Answer<String>(){
        @Override public String answer(        InvocationOnMock invocation) throws Throwable {
          Path file=(Path)invocation.getArguments()[0];
          return scClient.getFileChecksum(file);
        }
      }
);
    }
    public void mockFileInSharedCache(    Path localFile,    URL remoteFile) throws YarnException, IOException {
      when(mockscClient.use(any(ApplicationId.class),eq(scClient.getFileChecksum(localFile)))).thenReturn(remoteFile);
    }
    @Override protected SharedCacheClient createSharedCacheClient(    Configuration c){
      return mockscClient;
    }
  }
  @Test public void testSharedCacheDisabled() throws Exception {
    JobConf jobConf=createJobConf();
    Job job=new Job(jobConf);
    job.setJobID(new JobID("567789",1));
    uploadFilesToRemoteFS(job,jobConf,0,0,0,false);
  }
  @Test public void testSharedCacheEnabled() throws Exception {
    JobConf jobConf=createJobConf();
    jobConf.set(MRJobConfig.SHARED_CACHE_MODE,"enabled");
    Job job=new Job(jobConf);
    job.setJobID(new JobID("567789",1));
    uploadFilesToRemoteFS(job,jobConf,8,3,2,false);
  }
  @Test public void testSharedCacheEnabledWithJobJarInSharedCache() throws Exception {
    JobConf jobConf=createJobConf();
    jobConf.set(MRJobConfig.SHARED_CACHE_MODE,"enabled");
    Job job=new Job(jobConf);
    job.setJobID(new JobID("567789",1));
    uploadFilesToRemoteFS(job,jobConf,8,3,2,true);
  }
  @Test public void testSharedCacheArchivesAndLibjarsEnabled() throws Exception {
    JobConf jobConf=createJobConf();
    jobConf.set(MRJobConfig.SHARED_CACHE_MODE,"archives,libjars");
    Job job=new Job(jobConf);
    job.setJobID(new JobID("567789",1));
    uploadFilesToRemoteFS(job,jobConf,5,1,2,true);
  }
  private JobConf createJobConf(){
    JobConf jobConf=new JobConf();
    jobConf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
    jobConf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED,true);
    jobConf.set(CommonConfigurationKeys.FS_DEFAULT_NAME_KEY,remoteFs.getUri().toString());
    return jobConf;
  }
  private Path copyToRemote(  Path jar) throws IOException {
    Path remoteFile=new Path("/tmp",jar.getName());
    remoteFs.copyFromLocalFile(jar,remoteFile);
    return remoteFile;
  }
  private void makeJarAvailableInSharedCache(  Path jar,  MyFileUploader fileUploader) throws YarnException, IOException {
    Path remoteFile=copyToRemote(jar);
    fileUploader.mockFileInSharedCache(jar,URL.fromPath(remoteFile));
  }
  private void uploadFilesToRemoteFS(  Job job,  JobConf jobConf,  int useCallCountExpected,  int numOfFilesShouldBeUploadedToSharedCacheExpected,  int numOfArchivesShouldBeUploadedToSharedCacheExpected,  boolean jobJarInSharedCacheBeforeUpload) throws Exception {
    MyFileUploader fileUploader=new MyFileUploader(remoteFs,jobConf);
    SharedCacheConfig sharedCacheConfig=new SharedCacheConfig();
    sharedCacheConfig.init(jobConf);
    Path firstFile=createTempFile("first-input-file","x");
    Path secondFile=createTempFile("second-input-file","xx");
    boolean fileAdded=Job.addFileToSharedCache(firstFile.toUri(),jobConf);
    assertEquals(sharedCacheConfig.isSharedCacheFilesEnabled(),fileAdded);
    if (!fileAdded) {
      Path remoteFile=copyToRemote(firstFile);
      job.addCacheFile(remoteFile.toUri());
    }
    jobConf.set("tmpfiles",secondFile.toString());
    Path firstJar=makeJar(new Path(testRootDir,"distributed.first.jar"),1);
    Path secondJar=makeJar(new Path(testRootDir,"distributed.second.jar"),2);
    Path thirdJar=new Path(testRootDir,"distributed.third.jar");
    localFs.copyFromLocalFile(secondJar,thirdJar);
    makeJarAvailableInSharedCache(secondJar,fileUploader);
    boolean libjarAdded=Job.addFileToSharedCacheAndClasspath(firstJar.toUri(),jobConf);
    assertEquals(sharedCacheConfig.isSharedCacheLibjarsEnabled(),libjarAdded);
    if (!libjarAdded) {
      Path remoteJar=copyToRemote(firstJar);
      job.addFileToClassPath(remoteJar);
    }
    jobConf.set("tmpjars",secondJar.toString() + "," + thirdJar.toString());
    Path firstArchive=makeArchive("first-archive.zip","first-file");
    Path secondArchive=makeArchive("second-archive.zip","second-file");
    boolean archiveAdded=Job.addArchiveToSharedCache(firstArchive.toUri(),jobConf);
    assertEquals(sharedCacheConfig.isSharedCacheArchivesEnabled(),archiveAdded);
    if (!archiveAdded) {
      Path remoteArchive=copyToRemote(firstArchive);
      job.addCacheArchive(remoteArchive.toUri());
    }
    jobConf.set("tmparchives",secondArchive.toString());
    Path jobJar=makeJar(new Path(testRootDir,"test-job.jar"),4);
    if (jobJarInSharedCacheBeforeUpload) {
      makeJarAvailableInSharedCache(jobJar,fileUploader);
    }
    jobConf.setJar(jobJar.toString());
    fileUploader.uploadResources(job,remoteStagingDir);
    verify(fileUploader.mockscClient,times(useCallCountExpected)).use(any(ApplicationId.class),anyString());
    int numOfFilesShouldBeUploadedToSharedCache=0;
    Map<String,Boolean> filesSharedCacheUploadPolicies=Job.getFileSharedCacheUploadPolicies(jobConf);
    for (    Boolean policy : filesSharedCacheUploadPolicies.values()) {
      if (policy) {
        numOfFilesShouldBeUploadedToSharedCache++;
      }
    }
    assertEquals(numOfFilesShouldBeUploadedToSharedCacheExpected,numOfFilesShouldBeUploadedToSharedCache);
    int numOfArchivesShouldBeUploadedToSharedCache=0;
    Map<String,Boolean> archivesSharedCacheUploadPolicies=Job.getArchiveSharedCacheUploadPolicies(jobConf);
    for (    Boolean policy : archivesSharedCacheUploadPolicies.values()) {
      if (policy) {
        numOfArchivesShouldBeUploadedToSharedCache++;
      }
    }
    assertEquals(numOfArchivesShouldBeUploadedToSharedCacheExpected,numOfArchivesShouldBeUploadedToSharedCache);
  }
  private Path createTempFile(  String filename,  String contents) throws IOException {
    Path path=new Path(testRootDir,filename);
    FSDataOutputStream os=localFs.create(path);
    os.writeBytes(contents);
    os.close();
    localFs.setPermission(path,new FsPermission("700"));
    return path;
  }
  private Path makeJar(  Path p,  int index) throws FileNotFoundException, IOException {
    FileOutputStream fos=new FileOutputStream(new File(p.toUri().getPath()));
    JarOutputStream jos=new JarOutputStream(fos);
    ZipEntry ze=new ZipEntry("distributed.jar.inside" + index);
    jos.putNextEntry(ze);
    jos.write(("inside the jar!" + index).getBytes());
    jos.closeEntry();
    jos.close();
    localFs.setPermission(p,new FsPermission("700"));
    return p;
  }
  private Path makeArchive(  String archiveFile,  String filename) throws Exception {
    Path archive=new Path(testRootDir,archiveFile);
    Path file=new Path(testRootDir,filename);
    DataOutputStream out=localFs.create(archive);
    ZipOutputStream zos=new ZipOutputStream(out);
    ZipEntry ze=new ZipEntry(file.toString());
    zos.putNextEntry(ze);
    zos.write(input.getBytes("UTF-8"));
    zos.closeEntry();
    zos.close();
    return archive;
  }
}
