/** 
 * This class tests hadoopStreaming in MapReduce local mode.
 */
public class TestStreamDataProtocol {
  protected File INPUT_FILE=new File("input_for_data_protocol_test.txt");
  protected File OUTPUT_DIR=new File("out_for_data_protocol_test");
  protected String input="roses.smell.good\nroses.look.good\nroses.need.care\nroses.attract.bees\nroses.are.red\nroses.are.not.blue\nbunnies.are.pink\nbunnies.run.fast\nbunnies.have.short.tail\nbunnies.have.long.ears\n";
  protected String map=UtilTest.makeJavaCommand(TrApp.class,new String[]{".","."});
  protected String reduce="org.apache.hadoop.streaming.ValueCountReduce";
  protected String outputExpect="bunnies.are\t1\nbunnies.have\t2\nbunnies.run\t1\nroses.are\t2\nroses.attract\t1\nroses.look\t1\nroses.need\t1\nroses.smell\t1\n";
  private StreamJob job;
  public TestStreamDataProtocol() throws IOException {
    UtilTest utilTest=new UtilTest(getClass().getName());
    utilTest.checkUserDir();
    utilTest.redirectIfAntJunit();
  }
  protected void createInput() throws IOException {
    DataOutputStream out=new DataOutputStream(new FileOutputStream(INPUT_FILE.getAbsoluteFile()));
    out.write(input.getBytes("UTF-8"));
    out.close();
  }
  protected String[] genArgs(){
    return new String[]{"-input",INPUT_FILE.getAbsolutePath(),"-output",OUTPUT_DIR.getAbsolutePath(),"-mapper",map,"-reducer",reduce,"-partitioner",KeyFieldBasedPartitioner.class.getCanonicalName(),"-jobconf","stream.map.output.field.separator=.","-jobconf","stream.num.map.output.key.fields=2","-jobconf","mapreduce.map.output.key.field.separator=.","-jobconf","num.key.fields.for.partition=1","-jobconf","mapreduce.job.reduces=2","-jobconf","mapreduce.task.files.preserve.failedtasks=true","-jobconf","stream.tmpdir=" + System.getProperty("test.build.data","/tmp")};
  }
  @Test public void testCommandLine() throws Exception {
    try {
      FileUtil.fullyDelete(OUTPUT_DIR.getAbsoluteFile());
    }
 catch (    Exception e) {
    }
    try {
      createInput();
      boolean mayExit=false;
      job=new StreamJob(genArgs(),mayExit);
      job.go();
      File outFile=new File(OUTPUT_DIR,"part-00000").getAbsoluteFile();
      String output=StreamUtil.slurp(outFile);
      outFile.delete();
      System.err.println("outEx1=" + outputExpect);
      System.err.println("  out1=" + output);
      System.err.println("  equals=" + outputExpect.compareTo(output));
      assertEquals(outputExpect,output);
    }
  finally {
      INPUT_FILE.delete();
      FileUtil.fullyDelete(OUTPUT_DIR.getAbsoluteFile());
    }
  }
  public static void main(  String[] args) throws Exception {
    new TestStreamDataProtocol().testCommandLine();
  }
}
