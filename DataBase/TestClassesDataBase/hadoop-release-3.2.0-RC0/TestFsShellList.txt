/** 
 * Test FsShell -ls command.
 */
public class TestFsShellList {
  private static Configuration conf;
  private static FsShell shell;
  private static LocalFileSystem lfs;
  private static Path testRootDir;
  @BeforeClass public static void setup() throws Exception {
    conf=new Configuration();
    shell=new FsShell(conf);
    lfs=FileSystem.getLocal(conf);
    lfs.setVerifyChecksum(true);
    lfs.setWriteChecksum(true);
    String root=System.getProperty("test.build.data","test/build/data");
    testRootDir=lfs.makeQualified(new Path(root,"testFsShellList"));
    assertThat(lfs.mkdirs(testRootDir),is(true));
  }
  @AfterClass public static void teardown() throws Exception {
    lfs.delete(testRootDir,true);
  }
  private void createFile(  Path filePath) throws Exception {
    FSDataOutputStream out=lfs.create(filePath);
    out.writeChars("I am " + filePath);
    out.close();
    assertThat(lfs.exists(lfs.getChecksumFile(filePath)),is(true));
  }
  @Test public void testList() throws Exception {
    createFile(new Path(testRootDir,"abc"));
    String[] lsArgv=new String[]{"-ls",testRootDir.toString()};
    assertThat(shell.run(lsArgv),is(0));
    createFile(new Path(testRootDir,"abc\bd\tef"));
    createFile(new Path(testRootDir,"ghi"));
    createFile(new Path(testRootDir,"qq\r123"));
    lsArgv=new String[]{"-ls",testRootDir.toString()};
    assertThat(shell.run(lsArgv),is(0));
    lsArgv=new String[]{"-ls","-q",testRootDir.toString()};
    assertThat(shell.run(lsArgv),is(0));
  }
  @Test(expected=IllegalArgumentException.class) public void testListWithUGI() throws Exception {
    FsShell fsShell=new FsShell(new Configuration());
    fsShell.getConf().set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"DUMMYAUTH");
    String[] lsArgv=new String[]{"-ls",testRootDir.toString()};
    fsShell.run(lsArgv);
  }
}
