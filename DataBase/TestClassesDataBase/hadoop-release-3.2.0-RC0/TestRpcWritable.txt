public class TestRpcWritable {
  static Writable writable=new LongWritable(Time.now());
  static Message message1=EchoRequestProto.newBuilder().setMessage("testing1").build();
  static Message message2=EchoRequestProto.newBuilder().setMessage("testing2").build();
  @Test public void testWritableWrapper() throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    writable.write(new DataOutputStream(baos));
    ByteBuffer bb=ByteBuffer.wrap(baos.toByteArray());
    LongWritable actual=RpcWritable.wrap(new LongWritable()).readFrom(bb);
    Assert.assertEquals(writable,actual);
    Assert.assertEquals(0,bb.remaining());
  }
  @Test public void testProtobufWrapper() throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    message1.writeDelimitedTo(baos);
    ByteBuffer bb=ByteBuffer.wrap(baos.toByteArray());
    Message actual=RpcWritable.wrap(EchoRequestProto.getDefaultInstance()).readFrom(bb);
    Assert.assertEquals(message1,actual);
    Assert.assertEquals(0,bb.remaining());
  }
  @Test public void testBufferWrapper() throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream dos=new DataOutputStream(baos);
    message1.writeDelimitedTo(dos);
    message2.writeDelimitedTo(dos);
    writable.write(dos);
    ByteBuffer bb=ByteBuffer.wrap(baos.toByteArray());
    RpcWritable.Buffer buf=RpcWritable.Buffer.wrap(bb);
    Assert.assertEquals(baos.size(),bb.remaining());
    Assert.assertEquals(baos.size(),buf.remaining());
    Object actual=buf.getValue(EchoRequestProto.getDefaultInstance());
    Assert.assertEquals(message1,actual);
    Assert.assertTrue(bb.remaining() > 0);
    Assert.assertEquals(bb.remaining(),buf.remaining());
    actual=buf.getValue(EchoRequestProto.getDefaultInstance());
    Assert.assertEquals(message2,actual);
    Assert.assertTrue(bb.remaining() > 0);
    Assert.assertEquals(bb.remaining(),buf.remaining());
    actual=buf.newInstance(LongWritable.class,null);
    Assert.assertEquals(writable,actual);
    Assert.assertEquals(0,bb.remaining());
    Assert.assertEquals(0,buf.remaining());
  }
  @Test public void testBufferWrapperNested() throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream dos=new DataOutputStream(baos);
    writable.write(dos);
    message1.writeDelimitedTo(dos);
    message2.writeDelimitedTo(dos);
    ByteBuffer bb=ByteBuffer.wrap(baos.toByteArray());
    RpcWritable.Buffer buf1=RpcWritable.Buffer.wrap(bb);
    Assert.assertEquals(baos.size(),bb.remaining());
    Assert.assertEquals(baos.size(),buf1.remaining());
    Object actual=buf1.newInstance(LongWritable.class,null);
    Assert.assertEquals(writable,actual);
    int left=bb.remaining();
    Assert.assertTrue(left > 0);
    Assert.assertEquals(left,buf1.remaining());
    RpcWritable.Buffer buf2=buf1.newInstance(RpcWritable.Buffer.class,null);
    Assert.assertEquals(0,bb.remaining());
    Assert.assertEquals(0,buf1.remaining());
    Assert.assertEquals(left,buf2.remaining());
    actual=buf2.getValue(EchoRequestProto.getDefaultInstance());
    Assert.assertEquals(message1,actual);
    Assert.assertTrue(buf2.remaining() > 0);
    actual=buf2.getValue(EchoRequestProto.getDefaultInstance());
    Assert.assertEquals(message2,actual);
    Assert.assertEquals(0,buf2.remaining());
  }
}
