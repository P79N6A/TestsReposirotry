/** 
 * This test checks that the JournalNode respects the following keys. - DFS_JOURNALNODE_RPC_BIND_HOST_KEY - DFS_JOURNALNODE_HTTP_BIND_HOST_KEY - DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY
 */
public class TestJournalNodeRespectsBindHostKeys {
  public static final Logger LOG=LoggerFactory.getLogger(TestJournalNodeRespectsBindHostKeys.class);
  private static final String WILDCARD_ADDRESS="0.0.0.0";
  private static final String LOCALHOST_SERVER_ADDRESS="127.0.0.1:0";
  private static final int NUM_JN=1;
  private HdfsConfiguration conf;
  private MiniJournalCluster jCluster;
  private JournalNode jn;
  @Before public void setUp(){
    conf=new HdfsConfiguration();
  }
  @After public void tearDown() throws IOException {
    if (jCluster != null) {
      jCluster.shutdown();
      jCluster=null;
    }
  }
  private static String getRpcServerAddress(  JournalNode jn){
    JournalNodeRpcServer rpcServer=jn.getRpcServer();
    return rpcServer.getRpcServer().getListenerAddress().getAddress().toString();
  }
  @Test(timeout=300000) public void testRpcBindHostKey() throws IOException {
    LOG.info("Testing without " + DFS_JOURNALNODE_RPC_BIND_HOST_KEY);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    String address=getRpcServerAddress(jn);
    assertThat("Bind address not expected to be wildcard by default.",address,not("/" + WILDCARD_ADDRESS));
    LOG.info("Testing with " + DFS_JOURNALNODE_RPC_BIND_HOST_KEY);
    conf.set(DFS_JOURNALNODE_RPC_BIND_HOST_KEY,WILDCARD_ADDRESS);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    address=getRpcServerAddress(jn);
    assertThat("Bind address " + address + " is not wildcard.",address,is("/" + WILDCARD_ADDRESS));
  }
  @Test(timeout=300000) public void testHttpBindHostKey() throws IOException {
    LOG.info("Testing without " + DFS_JOURNALNODE_HTTP_BIND_HOST_KEY);
    conf.set(DFS_JOURNALNODE_HTTP_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    String address=jn.getHttpAddress().toString();
    assertFalse("HTTP Bind address not expected to be wildcard by default.",address.startsWith(WILDCARD_ADDRESS));
    LOG.info("Testing with " + DFS_JOURNALNODE_HTTP_BIND_HOST_KEY);
    conf.set(DFS_JOURNALNODE_HTTP_BIND_HOST_KEY,WILDCARD_ADDRESS);
    conf.set(DFS_JOURNALNODE_HTTP_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    address=jn.getHttpAddress().toString();
    assertTrue("HTTP Bind address " + address + " is not wildcard.",address.startsWith(WILDCARD_ADDRESS));
  }
  private static final String BASEDIR=System.getProperty("test.build.dir","target/test-dir") + "/" + TestJournalNodeRespectsBindHostKeys.class.getSimpleName();
  private static void setupSsl() throws Exception {
    Configuration conf=new Configuration();
    conf.set(DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    conf.set(DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,"localhost:0");
    conf.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    assertTrue(base.mkdirs());
    final String keystoresDir=new File(BASEDIR).getAbsolutePath();
    final String sslConfDir=KeyStoreTestUtil.getClasspathDir(TestJournalNodeRespectsBindHostKeys.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
  }
  /** 
 * HTTPS test is different since we need to setup SSL configuration. NN also binds the wildcard address for HTTPS port by default so we must pick a different host/port combination.
 * @throws Exception
 */
  @Test(timeout=300000) public void testHttpsBindHostKey() throws Exception {
    LOG.info("Testing behavior without " + DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY);
    setupSsl();
    conf.set(DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    conf.set(DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    String address=jn.getHttpsAddress().toString();
    assertFalse("HTTP Bind address not expected to be wildcard by default.",address.startsWith(WILDCARD_ADDRESS));
    LOG.info("Testing behavior with " + DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY);
    conf.set(DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY,WILDCARD_ADDRESS);
    conf.set(DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,LOCALHOST_SERVER_ADDRESS);
    jCluster=new MiniJournalCluster.Builder(conf).format(true).numJournalNodes(NUM_JN).build();
    jn=jCluster.getJournalNode(0);
    address=jn.getHttpsAddress().toString();
    assertTrue("HTTP Bind address " + address + " is not wildcard.",address.startsWith(WILDCARD_ADDRESS));
  }
}
