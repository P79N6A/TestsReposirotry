/** 
 * The administrator interface of the  {@link Router} implemented by{@link RouterAdminServer}.
 */
public class TestRouterAdmin {
  private static StateStoreDFSCluster cluster;
  private static RouterContext routerContext;
  public static final String RPC_BEAN="Hadoop:service=Router,name=FederationRPC";
  private static List<MountTable> mockMountTable;
  private static StateStoreService stateStore;
  @BeforeClass public static void globalSetUp() throws Exception {
    cluster=new StateStoreDFSCluster(false,1);
    Configuration conf=new RouterConfigBuilder().stateStore().admin().rpc().build();
    cluster.addRouterOverrides(conf);
    cluster.startRouters();
    routerContext=cluster.getRandomRouter();
    mockMountTable=cluster.generateMockMountTable();
    Router router=routerContext.getRouter();
    stateStore=router.getStateStore();
    ActiveNamenodeResolver membership=router.getNamenodeResolver();
    membership.registerNamenode(createNamenodeReport("ns0","nn1",HAServiceState.ACTIVE));
    membership.registerNamenode(createNamenodeReport("ns1","nn1",HAServiceState.ACTIVE));
    stateStore.refreshCaches(true);
    RouterRpcServer spyRpcServer=Mockito.spy(routerContext.getRouter().createRpcServer());
    Whitebox.setInternalState(routerContext.getRouter(),"rpcServer",spyRpcServer);
    Mockito.doReturn(null).when(spyRpcServer).getFileInfo(Mockito.anyString());
  }
  @AfterClass public static void tearDown(){
    cluster.stopRouter(routerContext);
  }
  @Before public void testSetup() throws Exception {
    assertTrue(synchronizeRecords(stateStore,mockMountTable,MountTable.class));
    routerContext.resetAdminClient();
  }
  @Test public void testAddMountTable() throws IOException {
    MountTable newEntry=MountTable.newInstance("/testpath",Collections.singletonMap("ns0","/testdir"),Time.now(),Time.now());
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> records=getMountTableEntries(mountTable);
    assertEquals(records.size(),mockMountTable.size());
    AddMountTableEntryRequest addRequest=AddMountTableEntryRequest.newInstance(newEntry);
    AddMountTableEntryResponse addResponse=mountTable.addMountTableEntry(addRequest);
    assertTrue(addResponse.getStatus());
    List<MountTable> records2=getMountTableEntries(mountTable);
    assertEquals(records2.size(),mockMountTable.size() + 1);
  }
  @Test public void testAddDuplicateMountTable() throws IOException {
    MountTable newEntry=MountTable.newInstance("/testpath",Collections.singletonMap("ns0","/testdir"),Time.now(),Time.now());
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> entries1=getMountTableEntries(mountTable);
    assertEquals(entries1.size(),mockMountTable.size());
    AddMountTableEntryRequest addRequest=AddMountTableEntryRequest.newInstance(newEntry);
    AddMountTableEntryResponse addResponse=mountTable.addMountTableEntry(addRequest);
    assertTrue(addResponse.getStatus());
    List<MountTable> entries2=getMountTableEntries(mountTable);
    assertEquals(entries2.size(),mockMountTable.size() + 1);
    AddMountTableEntryResponse addResponse2=mountTable.addMountTableEntry(addRequest);
    assertFalse(addResponse2.getStatus());
  }
  @Test public void testAddReadOnlyMountTable() throws IOException {
    MountTable newEntry=MountTable.newInstance("/readonly",Collections.singletonMap("ns0","/testdir"),Time.now(),Time.now());
    newEntry.setReadOnly(true);
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> records=getMountTableEntries(mountTable);
    assertEquals(records.size(),mockMountTable.size());
    AddMountTableEntryRequest addRequest=AddMountTableEntryRequest.newInstance(newEntry);
    AddMountTableEntryResponse addResponse=mountTable.addMountTableEntry(addRequest);
    assertTrue(addResponse.getStatus());
    List<MountTable> records2=getMountTableEntries(mountTable);
    assertEquals(records2.size(),mockMountTable.size() + 1);
    MountTable record=getMountTableEntry("/readonly");
    assertEquals("/readonly",record.getSourcePath());
    assertTrue(record.isReadOnly());
    RemoveMountTableEntryRequest removeRequest=RemoveMountTableEntryRequest.newInstance("/readonly");
    RemoveMountTableEntryResponse removeResponse=mountTable.removeMountTableEntry(removeRequest);
    assertTrue(removeResponse.getStatus());
  }
  @Test public void testAddOrderMountTable() throws IOException {
    testAddOrderMountTable(DestinationOrder.HASH);
    testAddOrderMountTable(DestinationOrder.LOCAL);
    testAddOrderMountTable(DestinationOrder.RANDOM);
    testAddOrderMountTable(DestinationOrder.HASH_ALL);
  }
  private void testAddOrderMountTable(  final DestinationOrder order) throws IOException {
    final String mnt="/" + order;
    MountTable newEntry=MountTable.newInstance(mnt,Collections.singletonMap("ns0","/testdir"),Time.now(),Time.now());
    newEntry.setDestOrder(order);
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    AddMountTableEntryRequest addRequest;
    AddMountTableEntryResponse addResponse;
    addRequest=AddMountTableEntryRequest.newInstance(newEntry);
    addResponse=mountTable.addMountTableEntry(addRequest);
    assertTrue(addResponse.getStatus());
    MountTable record=getMountTableEntry(mnt);
    assertEquals(mnt,record.getSourcePath());
    assertEquals(order,record.getDestOrder());
    RemoveMountTableEntryRequest removeRequest=RemoveMountTableEntryRequest.newInstance(mnt);
    RemoveMountTableEntryResponse removeResponse=mountTable.removeMountTableEntry(removeRequest);
    assertTrue(removeResponse.getStatus());
  }
  @Test public void testRemoveMountTable() throws IOException {
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> entries1=getMountTableEntries(mountTable);
    assertEquals(entries1.size(),mockMountTable.size());
    RemoveMountTableEntryRequest removeRequest=RemoveMountTableEntryRequest.newInstance("/");
    mountTable.removeMountTableEntry(removeRequest);
    List<MountTable> entries2=getMountTableEntries(mountTable);
    assertEquals(entries2.size(),mockMountTable.size() - 1);
  }
  @Test public void testEditMountTable() throws IOException {
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    MountTable entry=getMountTableEntry("/");
    assertEquals(Collections.singletonList(new RemoteLocation("ns0","/","/")),entry.getDestinations());
    MountTable updatedEntry=MountTable.newInstance("/",Collections.singletonMap("ns1","/"),Time.now(),Time.now());
    UpdateMountTableEntryRequest updateRequest=UpdateMountTableEntryRequest.newInstance(updatedEntry);
    mountTable.updateMountTableEntry(updateRequest);
    entry=getMountTableEntry("/");
    assertEquals(Collections.singletonList(new RemoteLocation("ns1","/","/")),entry.getDestinations());
  }
  @Test public void testGetMountTable() throws IOException {
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> entries=getMountTableEntries(mountTable);
    assertEquals(mockMountTable.size(),entries.size());
    int matches=0;
    for (    MountTable e : entries) {
      for (      MountTable entry : mockMountTable) {
        assertEquals(e.getDestinations().size(),1);
        assertNotNull(e.getDateCreated());
        assertNotNull(e.getDateModified());
        if (entry.getSourcePath().equals(e.getSourcePath())) {
          matches++;
        }
      }
    }
    assertEquals(matches,mockMountTable.size());
  }
  @Test public void testGetSingleMountTableEntry() throws IOException {
    MountTable entry=getMountTableEntry("/ns0");
    assertNotNull(entry);
    assertEquals(entry.getSourcePath(),"/ns0");
  }
  /** 
 * Gets an existing mount table record in the state store.
 * @param mount The mount point of the record to remove.
 * @return The matching record if found, null if it is not found.
 * @throws IOException If the state store could not be accessed.
 */
  private MountTable getMountTableEntry(  final String mount) throws IOException {
    stateStore.loadCache(MountTableStoreImpl.class,true);
    GetMountTableEntriesRequest request=GetMountTableEntriesRequest.newInstance(mount);
    RouterClient client=routerContext.getAdminClient();
    MountTableManager mountTable=client.getMountTableManager();
    List<MountTable> results=getMountTableEntries(mountTable,request);
    if (results.size() > 0) {
      return results.get(0);
    }
    return null;
  }
  private List<MountTable> getMountTableEntries(  MountTableManager mountTable) throws IOException {
    GetMountTableEntriesRequest request=GetMountTableEntriesRequest.newInstance("/");
    return getMountTableEntries(mountTable,request);
  }
  private List<MountTable> getMountTableEntries(  MountTableManager mountTable,  GetMountTableEntriesRequest request) throws IOException {
    stateStore.loadCache(MountTableStoreImpl.class,true);
    GetMountTableEntriesResponse response=mountTable.getMountTableEntries(request);
    return response.getEntries();
  }
  @Test public void testNameserviceManager() throws IOException {
    RouterClient client=routerContext.getAdminClient();
    NameserviceManager nsManager=client.getNameserviceManager();
    Set<String> disabled=getDisabledNameservices(nsManager);
    assertTrue(disabled.isEmpty());
    DisableNameserviceRequest disableReq=DisableNameserviceRequest.newInstance("ns0");
    DisableNameserviceResponse disableResp=nsManager.disableNameservice(disableReq);
    assertTrue(disableResp.getStatus());
    disabled=getDisabledNameservices(nsManager);
    assertEquals(1,disabled.size());
    assertTrue(disabled.contains("ns0"));
    EnableNameserviceRequest enableReq=EnableNameserviceRequest.newInstance("ns0");
    EnableNameserviceResponse enableResp=nsManager.enableNameservice(enableReq);
    assertTrue(enableResp.getStatus());
    disabled=getDisabledNameservices(nsManager);
    assertTrue(disabled.isEmpty());
    disableReq=DisableNameserviceRequest.newInstance("nsunknown");
    disableResp=nsManager.disableNameservice(disableReq);
    assertFalse(disableResp.getStatus());
  }
  @Test public void testNameserviceManagerUnauthorized() throws Exception {
    final String username="baduser";
    UserGroupInformation user=UserGroupInformation.createRemoteUser(username);
    user.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        RouterClient client=routerContext.getAdminClient();
        NameserviceManager nameservices=client.getNameserviceManager();
        DisableNameserviceRequest disableReq=DisableNameserviceRequest.newInstance("ns0");
        try {
          nameservices.disableNameservice(disableReq);
          fail("We should not be able to disable nameservices");
        }
 catch (        IOException ioe) {
          assertExceptionContains(username + " is not a super user",ioe);
        }
        return null;
      }
    }
);
  }
  private Set<String> getDisabledNameservices(  NameserviceManager nsManager) throws IOException {
    stateStore.loadCache(DisabledNameserviceStoreImpl.class,true);
    GetDisabledNameservicesRequest getReq=GetDisabledNameservicesRequest.newInstance();
    GetDisabledNameservicesResponse response=nsManager.getDisabledNameservices(getReq);
    return response.getNameservices();
  }
}
