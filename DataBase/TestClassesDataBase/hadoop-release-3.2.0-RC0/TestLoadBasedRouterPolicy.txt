/** 
 * Simple test class for the  {@link LoadBasedRouterPolicy}. Test that the load is properly considered for allocation.
 */
public class TestLoadBasedRouterPolicy extends BaseRouterPoliciesTest {
  @Before public void setUp() throws Exception {
    setPolicy(new LoadBasedRouterPolicy());
    setPolicyInfo(new WeightedPolicyInfo());
    Map<SubClusterIdInfo,Float> routerWeights=new HashMap<>();
    Map<SubClusterIdInfo,Float> amrmWeights=new HashMap<>();
    for (int i=0; i < 20; i++) {
      SubClusterIdInfo sc=new SubClusterIdInfo(String.format("sc%02d",i));
      SubClusterInfo federationSubClusterInfo=SubClusterInfo.newInstance(sc.toId(),null,null,null,null,-1,SubClusterState.SC_RUNNING,-1,generateClusterMetricsInfo(i));
      getActiveSubclusters().put(sc.toId(),federationSubClusterInfo);
      float weight=getRand().nextInt(2);
      if (i == 5) {
        weight=1.0f;
      }
      if (i <= 5 || getRand().nextFloat() > 0.05f) {
        routerWeights.put(sc,weight);
        amrmWeights.put(sc,weight);
      }
    }
    getPolicyInfo().setRouterPolicyWeights(routerWeights);
    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);
    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(),getPolicyInfo(),getActiveSubclusters());
  }
  private String generateClusterMetricsInfo(  int id){
    long mem=1024 * getRand().nextInt(277 * 100 - 1);
    if (id == 5) {
      mem=1024 * 277 * 100;
    }
    String clusterMetrics="{\"clusterMetrics\":{\"appsSubmitted\":65," + "\"appsCompleted\":64," + "\"appsPending\":0,\"appsRunning\":0,\"appsFailed\":0,"+ "\"appsKilled\":1,\"reservedMB\":0,\"availableMB\":" + mem + ","+ "\"allocatedMB\":0,\"reservedVirtualCores\":0,"+ "\"availableVirtualCores\":2216,\"allocatedVirtualCores\":0,"+ "\"containersAllocated\":0,\"containersReserved\":0,"+ "\"containersPending\":0,\"totalMB\":28364800,"+ "\"totalVirtualCores\":2216,\"totalNodes\":278,\"lostNodes\":1,"+ "\"unhealthyNodes\":0,\"decommissionedNodes\":0,"+ "\"rebootedNodes\":0,\"activeNodes\":277}}\n";
    return clusterMetrics;
  }
  @Test public void testLoadIsRespected() throws YarnException {
    SubClusterId chosen=((FederationRouterPolicy)getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(),null);
    Assert.assertEquals("sc05",chosen.getId());
  }
}
