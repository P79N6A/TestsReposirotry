public class TestDatanodeRegister {
  public static final Logger LOG=LoggerFactory.getLogger(TestDatanodeRegister.class);
  private static final InetSocketAddress INVALID_ADDR=new InetSocketAddress("127.0.0.1",1);
  private BPServiceActor actor;
  NamespaceInfo fakeNsInfo;
  DNConf mockDnConf;
  @Before public void setUp() throws IOException {
    mockDnConf=mock(DNConf.class);
    doReturn(VersionInfo.getVersion()).when(mockDnConf).getMinimumNameNodeVersion();
    DataNode mockDN=mock(DataNode.class);
    doReturn(true).when(mockDN).shouldRun();
    doReturn(mockDnConf).when(mockDN).getDnConf();
    BPOfferService mockBPOS=mock(BPOfferService.class);
    doReturn(mockDN).when(mockBPOS).getDataNode();
    actor=new BPServiceActor(INVALID_ADDR,null,mockBPOS);
    fakeNsInfo=mock(NamespaceInfo.class);
    doReturn(VersionInfo.getVersion()).when(fakeNsInfo).getSoftwareVersion();
    doReturn(HdfsServerConstants.NAMENODE_LAYOUT_VERSION).when(fakeNsInfo).getLayoutVersion();
    DatanodeProtocolClientSideTranslatorPB fakeDnProt=mock(DatanodeProtocolClientSideTranslatorPB.class);
    when(fakeDnProt.versionRequest()).thenReturn(fakeNsInfo);
    actor.setNameNode(fakeDnProt);
  }
  @Test public void testSoftwareVersionDifferences() throws Exception {
    assertEquals(VersionInfo.getVersion(),actor.retrieveNamespaceInfo().getSoftwareVersion());
    doReturn("4.0.0").when(fakeNsInfo).getSoftwareVersion();
    doReturn("3.0.0").when(mockDnConf).getMinimumNameNodeVersion();
    assertEquals("4.0.0",actor.retrieveNamespaceInfo().getSoftwareVersion());
    doReturn("3.0.0").when(fakeNsInfo).getSoftwareVersion();
    doReturn("4.0.0").when(mockDnConf).getMinimumNameNodeVersion();
    try {
      actor.retrieveNamespaceInfo();
      fail("Should have thrown an exception for NN with too-low version");
    }
 catch (    IncorrectVersionException ive) {
      GenericTestUtils.assertExceptionContains("The reported NameNode version is too low",ive);
      LOG.info("Got expected exception",ive);
    }
  }
  @Test public void testDifferentLayoutVersions() throws Exception {
    assertEquals(HdfsServerConstants.NAMENODE_LAYOUT_VERSION,actor.retrieveNamespaceInfo().getLayoutVersion());
    doReturn(HdfsServerConstants.NAMENODE_LAYOUT_VERSION * 1000).when(fakeNsInfo).getLayoutVersion();
    try {
      actor.retrieveNamespaceInfo();
    }
 catch (    IOException e) {
      fail("Should not fail to retrieve NS info from DN with different layout version");
    }
  }
}
