/** 
 * Test read, write and seek. Uses package-private methods in AbfsConfiguration, which is why it is in this package.
 */
@RunWith(Parameterized.class) public class ITestAbfsReadWriteAndSeek extends AbstractAbfsScaleTest {
  private static final Path TEST_PATH=new Path("/testfile");
  @Parameterized.Parameters(name="Size={0}") public static Iterable<Object[]> sizes(){
    return Arrays.asList(new Object[][]{{MIN_BUFFER_SIZE},{DEFAULT_READ_BUFFER_SIZE},{MAX_BUFFER_SIZE}});
  }
  private final int size;
  public ITestAbfsReadWriteAndSeek(  final int size) throws Exception {
    this.size=size;
  }
  @Test public void testReadAndWriteWithDifferentBufferSizesAndSeek() throws Exception {
    testReadWriteAndSeek(size);
  }
  private void testReadWriteAndSeek(  int bufferSize) throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final AbfsConfiguration abfsConfiguration=fs.getAbfsStore().getAbfsConfiguration();
    abfsConfiguration.setWriteBufferSize(bufferSize);
    abfsConfiguration.setReadBufferSize(bufferSize);
    final byte[] b=new byte[2 * bufferSize];
    new Random().nextBytes(b);
    try (FSDataOutputStream stream=fs.create(TEST_PATH)){
      stream.write(b);
    }
     final byte[] readBuffer=new byte[2 * bufferSize];
    int result;
    try (FSDataInputStream inputStream=fs.open(TEST_PATH)){
      inputStream.seek(bufferSize);
      result=inputStream.read(readBuffer,bufferSize,bufferSize);
      assertNotEquals(-1,result);
      inputStream.seek(0);
      result=inputStream.read(readBuffer,0,bufferSize);
    }
     assertNotEquals("data read in final read()",-1,result);
    assertArrayEquals(readBuffer,b);
  }
}
