public class TestPeerCache {
  static final Logger LOG=LoggerFactory.getLogger(TestPeerCache.class);
private static class FakePeer implements Peer {
    private boolean closed=false;
    private final boolean hasDomain;
    private final DatanodeID dnId;
    public FakePeer(    DatanodeID dnId,    boolean hasDomain){
      this.dnId=dnId;
      this.hasDomain=hasDomain;
    }
    @Override public ReadableByteChannel getInputStreamChannel(){
      throw new UnsupportedOperationException();
    }
    @Override public void setReadTimeout(    int timeoutMs) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public int getReceiveBufferSize() throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public boolean getTcpNoDelay() throws IOException {
      return false;
    }
    @Override public void setWriteTimeout(    int timeoutMs) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public boolean isClosed(){
      return closed;
    }
    @Override public void close() throws IOException {
      closed=true;
    }
    @Override public String getRemoteAddressString(){
      return dnId.getInfoAddr();
    }
    @Override public String getLocalAddressString(){
      return "127.0.0.1:123";
    }
    @Override public InputStream getInputStream() throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public OutputStream getOutputStream() throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public boolean isLocal(){
      return true;
    }
    @Override public String toString(){
      return "FakePeer(dnId=" + dnId + ")";
    }
    @Override public DomainSocket getDomainSocket(){
      if (!hasDomain)       return null;
      return Mockito.mock(DomainSocket.class,new Answer<Object>(){
        @Override public Object answer(        InvocationOnMock invocation) throws Throwable {
          throw new RuntimeException("injected fault.");
        }
      }
);
    }
    @Override public boolean equals(    Object o){
      if (!(o instanceof FakePeer))       return false;
      FakePeer other=(FakePeer)o;
      return hasDomain == other.hasDomain && dnId.equals(other.dnId);
    }
    @Override public int hashCode(){
      return dnId.hashCode() ^ (hasDomain ? 1 : 0);
    }
    @Override public boolean hasSecureChannel(){
      return false;
    }
  }
  @Test public void testAddAndRetrieve() throws Exception {
    PeerCache cache=new PeerCache(3,100000);
    DatanodeID dnId=new DatanodeID("192.168.0.1","fakehostname","fake_datanode_id",100,101,102,103);
    FakePeer peer=new FakePeer(dnId,false);
    cache.put(dnId,peer);
    assertTrue(!peer.isClosed());
    assertEquals(1,cache.size());
    assertEquals(peer,cache.get(dnId,false));
    assertEquals(0,cache.size());
    cache.close();
  }
  @Test public void testExpiry() throws Exception {
    final int CAPACITY=3;
    final int EXPIRY_PERIOD=10;
    PeerCache cache=new PeerCache(CAPACITY,EXPIRY_PERIOD);
    DatanodeID dnIds[]=new DatanodeID[CAPACITY];
    FakePeer peers[]=new FakePeer[CAPACITY];
    for (int i=0; i < CAPACITY; ++i) {
      dnIds[i]=new DatanodeID("192.168.0.1","fakehostname_" + i,"fake_datanode_id",100,101,102,103);
      peers[i]=new FakePeer(dnIds[i],false);
    }
    for (int i=0; i < CAPACITY; ++i) {
      cache.put(dnIds[i],peers[i]);
    }
    Thread.sleep(EXPIRY_PERIOD * 50);
    assertEquals(0,cache.size());
    for (int i=0; i < CAPACITY; ++i) {
      assertTrue(peers[i].isClosed());
    }
    Thread.sleep(EXPIRY_PERIOD * 50);
    cache.close();
  }
  @Test public void testEviction() throws Exception {
    final int CAPACITY=3;
    PeerCache cache=new PeerCache(CAPACITY,100000);
    DatanodeID dnIds[]=new DatanodeID[CAPACITY + 1];
    FakePeer peers[]=new FakePeer[CAPACITY + 1];
    for (int i=0; i < dnIds.length; ++i) {
      dnIds[i]=new DatanodeID("192.168.0.1","fakehostname_" + i,"fake_datanode_id_" + i,100,101,102,103);
      peers[i]=new FakePeer(dnIds[i],false);
    }
    for (int i=0; i < CAPACITY; ++i) {
      cache.put(dnIds[i],peers[i]);
    }
    assertEquals(CAPACITY,cache.size());
    cache.put(dnIds[CAPACITY],peers[CAPACITY]);
    assertEquals(CAPACITY,cache.size());
    assertSame(null,cache.get(dnIds[0],false));
    for (int i=1; i < CAPACITY; ++i) {
      Peer peer=cache.get(dnIds[i],false);
      assertSame(peers[i],peer);
      assertTrue(!peer.isClosed());
      peer.close();
    }
    assertEquals(1,cache.size());
    cache.close();
  }
  @Test public void testMultiplePeersWithSameKey() throws Exception {
    final int CAPACITY=3;
    PeerCache cache=new PeerCache(CAPACITY,100000);
    DatanodeID dnId=new DatanodeID("192.168.0.1","fakehostname","fake_datanode_id",100,101,102,103);
    HashMultiset<FakePeer> peers=HashMultiset.create(CAPACITY);
    for (int i=0; i < CAPACITY; ++i) {
      FakePeer peer=new FakePeer(dnId,false);
      peers.add(peer);
      cache.put(dnId,peer);
    }
    assertEquals(CAPACITY,cache.size());
    while (!peers.isEmpty()) {
      Peer peer=cache.get(dnId,false);
      assertTrue(peer != null);
      assertTrue(!peer.isClosed());
      peers.remove(peer);
    }
    assertEquals(0,cache.size());
    cache.close();
  }
  @Test public void testDomainSocketPeers() throws Exception {
    final int CAPACITY=3;
    PeerCache cache=new PeerCache(CAPACITY,100000);
    DatanodeID dnId=new DatanodeID("192.168.0.1","fakehostname","fake_datanode_id",100,101,102,103);
    HashMultiset<FakePeer> peers=HashMultiset.create(CAPACITY);
    for (int i=0; i < CAPACITY; ++i) {
      FakePeer peer=new FakePeer(dnId,i == CAPACITY - 1);
      peers.add(peer);
      cache.put(dnId,peer);
    }
    assertEquals(CAPACITY,cache.size());
    Peer peer=cache.get(dnId,true);
    assertTrue(peer.getDomainSocket() != null);
    peers.remove(peer);
    peer=cache.get(dnId,true);
    assertTrue(peer == null);
    while (!peers.isEmpty()) {
      peer=cache.get(dnId,false);
      assertTrue(peer != null);
      assertTrue(!peer.isClosed());
      peers.remove(peer);
    }
    assertEquals(0,cache.size());
    cache.close();
  }
}
