/** 
 * Test the  {@link RollingFileSystemSink} class in the context of the local filesystem.
 */
public class TestRollingFileSystemSinkWithLocal extends RollingFileSystemSinkTestBase {
  /** 
 * Test writing logs to the local file system.
 * @throws Exception when things break
 */
  @Test public void testWrite() throws Exception {
    String path=methodDir.toURI().toString();
    MetricsSystem ms=initMetricsSystem(path,false,false);
    assertMetricsContents(doWriteTest(ms,path,1));
  }
  /** 
 * Test writing logs to the local file system with the sink set to ignore errors.
 * @throws Exception when things break
 */
  @Test public void testSilentWrite() throws Exception {
    String path=methodDir.toURI().toString();
    MetricsSystem ms=initMetricsSystem(path,true,false);
    assertMetricsContents(doWriteTest(ms,path,1));
  }
  /** 
 * Test writing logs to HDFS when the log file already exists.
 * @throws Exception when things break
 */
  @Test public void testExistingWrite() throws Exception {
    String path=methodDir.toURI().toString();
    assertMetricsContents(doAppendTest(path,false,false,2));
  }
  /** 
 * Test writing logs to HDFS when the log file and the .1 log file already exist.
 * @throws Exception when things break
 */
  @Test public void testExistingWrite2() throws Exception {
    String path=methodDir.toURI().toString();
    MetricsSystem ms=initMetricsSystem(path,false,false);
    preCreateLogFile(path,2);
    assertMetricsContents(doWriteTest(ms,path,3));
  }
  /** 
 * Test writing logs to HDFS with ignore errors enabled when the log file already exists.
 * @throws Exception when things break
 */
  @Test public void testSilentExistingWrite() throws Exception {
    String path=methodDir.toURI().toString();
    assertMetricsContents(doAppendTest(path,false,false,2));
  }
  /** 
 * Test that writing fails when the directory isn't writable.
 */
  @Test public void testFailedWrite(){
    String path=methodDir.toURI().toString();
    MetricsSystem ms=initMetricsSystem(path,false,false);
    new MyMetrics1().registerWith(ms);
    assertTrue(FileUtil.setWritable(methodDir,false));
    MockSink.errored=false;
    try {
      ms.publishMetricsNow();
      assertTrue("No exception was generated while writing metrics " + "even though the target directory was not writable",MockSink.errored);
      ms.stop();
      ms.shutdown();
    }
  finally {
      methodDir.setWritable(true);
    }
  }
  /** 
 * Test that writing fails silently when the directory is not writable.
 */
  @Test public void testSilentFailedWrite(){
    String path=methodDir.toURI().toString();
    MetricsSystem ms=initMetricsSystem(path,true,false);
    new MyMetrics1().registerWith(ms);
    assertTrue(FileUtil.setWritable(methodDir,false));
    MockSink.errored=false;
    try {
      ms.publishMetricsNow();
      assertFalse("An exception was generated while writing metrics " + "when the target directory was not writable, even though the " + "sink is set to ignore errors",MockSink.errored);
      ms.stop();
      ms.shutdown();
    }
  finally {
      methodDir.setWritable(true);
    }
  }
}
