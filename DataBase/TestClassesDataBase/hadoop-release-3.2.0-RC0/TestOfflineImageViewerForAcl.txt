/** 
 * Tests OfflineImageViewer if the input fsimage has HDFS ACLs
 */
public class TestOfflineImageViewerForAcl {
  private static final Logger LOG=LoggerFactory.getLogger(TestOfflineImageViewerForAcl.class);
  private static File originalFsimage=null;
  final static HashMap<String,AclStatus> writtenAcls=Maps.newHashMap();
  /** 
 * Create a populated namespace for later testing. Save its contents to a data structure and store its fsimage location. We only want to generate the fsimage file once and use it for multiple tests.
 */
  @BeforeClass public static void createOriginalFSImage() throws IOException {
    MiniDFSCluster cluster=null;
    try {
      Configuration conf=new Configuration();
      conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,true);
      cluster=new MiniDFSCluster.Builder(conf).build();
      cluster.waitActive();
      DistributedFileSystem hdfs=cluster.getFileSystem();
      Path dir=new Path("/dirWithNoAcl");
      hdfs.mkdirs(dir);
      writtenAcls.put(dir.toString(),hdfs.getAclStatus(dir));
      dir=new Path("/dirWithDefaultAcl");
      hdfs.mkdirs(dir);
      hdfs.setAcl(dir,Lists.newArrayList(aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",ALL),aclEntry(DEFAULT,GROUP,READ_EXECUTE),aclEntry(DEFAULT,OTHER,NONE)));
      writtenAcls.put(dir.toString(),hdfs.getAclStatus(dir));
      Path file=new Path("/noAcl");
      FSDataOutputStream o=hdfs.create(file);
      o.write(23);
      o.close();
      writtenAcls.put(file.toString(),hdfs.getAclStatus(file));
      file=new Path("/withAcl");
      o=hdfs.create(file);
      o.write(23);
      o.close();
      hdfs.setAcl(file,Lists.newArrayList(aclEntry(ACCESS,USER,READ_WRITE),aclEntry(ACCESS,USER,"foo",READ),aclEntry(ACCESS,GROUP,READ),aclEntry(ACCESS,OTHER,NONE)));
      writtenAcls.put(file.toString(),hdfs.getAclStatus(file));
      file=new Path("/withSeveralAcls");
      o=hdfs.create(file);
      o.write(23);
      o.close();
      hdfs.setAcl(file,Lists.newArrayList(aclEntry(ACCESS,USER,READ_WRITE),aclEntry(ACCESS,USER,"foo",READ_WRITE),aclEntry(ACCESS,USER,"bar",READ),aclEntry(ACCESS,GROUP,READ),aclEntry(ACCESS,GROUP,"group",READ),aclEntry(ACCESS,OTHER,NONE)));
      writtenAcls.put(file.toString(),hdfs.getAclStatus(file));
      hdfs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER,false);
      hdfs.saveNamespace();
      originalFsimage=FSImageTestUtil.findLatestImageFile(FSImageTestUtil.getFSImage(cluster.getNameNode()).getStorage().getStorageDir(0));
      if (originalFsimage == null) {
        throw new RuntimeException("Didn't generate or can't find fsimage");
      }
      LOG.debug("original FS image file is " + originalFsimage);
    }
  finally {
      if (cluster != null)       cluster.shutdown();
    }
  }
  @AfterClass public static void deleteOriginalFSImage() throws IOException {
    if (originalFsimage != null && originalFsimage.exists()) {
      originalFsimage.delete();
    }
  }
  @Test public void testWebImageViewerForAcl() throws Exception {
    WebImageViewer viewer=new WebImageViewer(NetUtils.createSocketAddr("localhost:0"));
    try {
      viewer.initServer(originalFsimage.getAbsolutePath());
      int port=viewer.getPort();
      URI uri=new URI("webhdfs://localhost:" + String.valueOf(port));
      Configuration conf=new Configuration();
      WebHdfsFileSystem webhdfs=(WebHdfsFileSystem)FileSystem.get(uri,conf);
      AclStatus acl=webhdfs.getAclStatus(new Path("/dirWithNoAcl"));
      assertEquals(writtenAcls.get("/dirWithNoAcl"),acl);
      acl=webhdfs.getAclStatus(new Path("/dirWithDefaultAcl"));
      assertEquals(writtenAcls.get("/dirWithDefaultAcl"),acl);
      acl=webhdfs.getAclStatus(new Path("/noAcl"));
      assertEquals(writtenAcls.get("/noAcl"),acl);
      acl=webhdfs.getAclStatus(new Path("/withAcl"));
      assertEquals(writtenAcls.get("/withAcl"),acl);
      acl=webhdfs.getAclStatus(new Path("/withSeveralAcls"));
      assertEquals(writtenAcls.get("/withSeveralAcls"),acl);
      URL url=new URL("http://localhost:" + port + "/webhdfs/v1/invalid/?op=GETACLSTATUS");
      HttpURLConnection connection=(HttpURLConnection)url.openConnection();
      connection.setRequestMethod("GET");
      connection.connect();
      assertEquals(HttpURLConnection.HTTP_NOT_FOUND,connection.getResponseCode());
    }
  finally {
      viewer.close();
    }
  }
  @Test public void testPBImageXmlWriterForAcl() throws Exception {
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    PrintStream o=new PrintStream(output);
    PBImageXmlWriter v=new PBImageXmlWriter(new Configuration(),o);
    v.visit(new RandomAccessFile(originalFsimage,"r"));
    SAXParserFactory spf=SAXParserFactory.newInstance();
    SAXParser parser=spf.newSAXParser();
    final String xml=output.toString();
    parser.parse(new InputSource(new StringReader(xml)),new DefaultHandler());
  }
  @Test public void testPBDelimitedWriterForAcl() throws Exception {
    final String DELIMITER="\t";
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    try (PrintStream o=new PrintStream(output)){
      PBImageDelimitedTextWriter v=new PBImageDelimitedTextWriter(o,DELIMITER,"");
      v.visit(new RandomAccessFile(originalFsimage,"r"));
    }
     try (ByteArrayInputStream input=new ByteArrayInputStream(output.toByteArray());BufferedReader reader=new BufferedReader(new InputStreamReader(input))){
      String line;
      boolean header=true;
      while ((line=reader.readLine()) != null) {
        String[] fields=line.split(DELIMITER);
        if (!header) {
          String filePath=fields[0];
          String permission=fields[9];
          if (!filePath.equals("/")) {
            boolean hasAcl=!filePath.toLowerCase().contains("noacl");
            assertEquals(hasAcl,permission.endsWith("+"));
          }
        }
        header=false;
      }
    }
   }
}
