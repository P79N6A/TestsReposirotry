/** 
 * Test class to validate the ClientRM Service inside the Router.
 */
public class TestRouterClientRMService extends BaseRouterClientRMTest {
  private static final Logger LOG=LoggerFactory.getLogger(TestRouterClientRMService.class);
  /** 
 * Tests if the pipeline is created properly.
 */
  @Test public void testRequestInterceptorChainCreation() throws Exception {
    ClientRequestInterceptor root=super.getRouterClientRMService().createRequestInterceptorChain();
    int index=0;
    while (root != null) {
switch (index) {
case 0:
case 1:
case 2:
        Assert.assertEquals(PassThroughClientRequestInterceptor.class.getName(),root.getClass().getName());
      break;
case 3:
    Assert.assertEquals(MockClientRequestInterceptor.class.getName(),root.getClass().getName());
  break;
default :
Assert.fail();
}
root=root.getNextInterceptor();
index++;
}
Assert.assertEquals("The number of interceptors in chain does not match",4,index);
}
/** 
 * Test if the RouterClientRM forwards all the requests to the MockRM and get back the responses.
 */
@Test public void testRouterClientRMServiceE2E() throws Exception {
String user="test1";
LOG.info("testRouterClientRMServiceE2E - Get New Application");
GetNewApplicationResponse responseGetNewApp=getNewApplication(user);
Assert.assertNotNull(responseGetNewApp);
LOG.info("testRouterClientRMServiceE2E - Submit Application");
SubmitApplicationResponse responseSubmitApp=submitApplication(responseGetNewApp.getApplicationId(),user);
Assert.assertNotNull(responseSubmitApp);
LOG.info("testRouterClientRMServiceE2E - Kill Application");
KillApplicationResponse responseKillApp=forceKillApplication(responseGetNewApp.getApplicationId(),user);
Assert.assertNotNull(responseKillApp);
LOG.info("testRouterClientRMServiceE2E - Get Cluster Metrics");
GetClusterMetricsResponse responseGetClusterMetrics=getClusterMetrics(user);
Assert.assertNotNull(responseGetClusterMetrics);
LOG.info("testRouterClientRMServiceE2E - Get Cluster Nodes");
GetClusterNodesResponse responseGetClusterNodes=getClusterNodes(user);
Assert.assertNotNull(responseGetClusterNodes);
LOG.info("testRouterClientRMServiceE2E - Get Queue Info");
GetQueueInfoResponse responseGetQueueInfo=getQueueInfo(user);
Assert.assertNotNull(responseGetQueueInfo);
LOG.info("testRouterClientRMServiceE2E - Get Queue User");
GetQueueUserAclsInfoResponse responseGetQueueUser=getQueueUserAcls(user);
Assert.assertNotNull(responseGetQueueUser);
LOG.info("testRouterClientRMServiceE2E - Get Cluster Node");
GetClusterNodeLabelsResponse responseGetClusterNode=getClusterNodeLabels(user);
Assert.assertNotNull(responseGetClusterNode);
LOG.info("testRouterClientRMServiceE2E - Move Application Across Queues");
MoveApplicationAcrossQueuesResponse responseMoveApp=moveApplicationAcrossQueues(user,responseGetNewApp.getApplicationId());
Assert.assertNotNull(responseMoveApp);
LOG.info("testRouterClientRMServiceE2E - Get New Reservation");
GetNewReservationResponse getNewReservationResponse=getNewReservation(user);
LOG.info("testRouterClientRMServiceE2E - Submit Reservation");
ReservationSubmissionResponse responseSubmitReser=submitReservation(user,getNewReservationResponse.getReservationId());
Assert.assertNotNull(responseSubmitReser);
LOG.info("testRouterClientRMServiceE2E - Update Reservation");
ReservationUpdateResponse responseUpdateReser=updateReservation(user,getNewReservationResponse.getReservationId());
Assert.assertNotNull(responseUpdateReser);
LOG.info("testRouterClientRMServiceE2E - Delete Reservation");
ReservationDeleteResponse responseDeleteReser=deleteReservation(user,getNewReservationResponse.getReservationId());
Assert.assertNotNull(responseDeleteReser);
}
/** 
 * Test if the different chains for users are generated, and LRU cache is working as expected.
 */
@Test public void testUsersChainMapWithLRUCache() throws YarnException, IOException, InterruptedException {
Map<String,RequestInterceptorChainWrapper> pipelines;
RequestInterceptorChainWrapper chain;
getNewApplication("test1");
getNewApplication("test2");
getNewApplication("test3");
getNewApplication("test4");
getNewApplication("test5");
getNewApplication("test6");
getNewApplication("test7");
getNewApplication("test8");
pipelines=super.getRouterClientRMService().getPipelines();
Assert.assertEquals(8,pipelines.size());
getNewApplication("test9");
getNewApplication("test10");
getNewApplication("test1");
getNewApplication("test11");
Assert.assertEquals(10,pipelines.size());
chain=pipelines.get("test1");
Assert.assertNotNull("test1 should not be evicted",chain);
chain=pipelines.get("test2");
Assert.assertNull("test2 should have been evicted",chain);
}
/** 
 * This test validates if the ClientRequestInterceptor chain for the user can build and init correctly when a multi-client process begins to request RouterClientRMService for the same user simultaneously.
 */
@Test public void testClientPipelineConcurrent() throws InterruptedException {
final String user="test1";
class ClientTestThread extends Thread {
private ClientRequestInterceptor interceptor;
@Override public void run(){
try {
interceptor=pipeline();
}
 catch (IOException|InterruptedException e) {
e.printStackTrace();
}
}
private ClientRequestInterceptor pipeline() throws IOException, InterruptedException {
return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ClientRequestInterceptor>(){
@Override public ClientRequestInterceptor run() throws Exception {
  RequestInterceptorChainWrapper wrapper=getRouterClientRMService().getInterceptorChain();
  ClientRequestInterceptor interceptor=wrapper.getRootInterceptor();
  Assert.assertNotNull(interceptor);
  LOG.info("init client interceptor success for user " + user);
  return interceptor;
}
}
);
}
}
ClientTestThread client1=new ClientTestThread();
ClientTestThread client2=new ClientTestThread();
client1.start();
client2.start();
client1.join();
client2.join();
Assert.assertNotNull(client1.interceptor);
Assert.assertNotNull(client2.interceptor);
Assert.assertTrue(client1.interceptor == client2.interceptor);
}
}
