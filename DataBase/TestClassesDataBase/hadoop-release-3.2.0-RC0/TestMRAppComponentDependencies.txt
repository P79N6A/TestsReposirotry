public class TestMRAppComponentDependencies {
  @Test(timeout=20000) public void testComponentStopOrder() throws Exception {
    @SuppressWarnings("resource") TestMRApp app=new TestMRApp(1,1,true,this.getClass().getName(),true);
    JobImpl job=(JobImpl)app.submit(new Configuration());
    app.waitForState(job,JobState.SUCCEEDED);
    app.verifyCompleted();
    int waitTime=20 * 1000;
    while (waitTime > 0 && app.numStops < 2) {
      Thread.sleep(100);
      waitTime-=100;
    }
    Assert.assertEquals(1,app.JobHistoryEventHandlerStopped);
    Assert.assertEquals(2,app.clientServiceStopped);
  }
private final class TestMRApp extends MRApp {
    int JobHistoryEventHandlerStopped;
    int clientServiceStopped;
    int numStops;
    public TestMRApp(    int maps,    int reduces,    boolean autoComplete,    String testName,    boolean cleanOnStart){
      super(maps,reduces,autoComplete,testName,cleanOnStart);
      JobHistoryEventHandlerStopped=0;
      clientServiceStopped=0;
      numStops=0;
    }
    @Override protected Job createJob(    Configuration conf,    JobStateInternal forcedState,    String diagnostic){
      UserGroupInformation currentUser=null;
      try {
        currentUser=UserGroupInformation.getCurrentUser();
      }
 catch (      IOException e) {
        throw new YarnRuntimeException(e);
      }
      Job newJob=new TestJob(getJobId(),getAttemptID(),conf,getDispatcher().getEventHandler(),getTaskAttemptListener(),getContext().getClock(),getCommitter(),isNewApiCommitter(),currentUser.getUserName(),getContext(),forcedState,diagnostic);
      ((AppContext)getContext()).getAllJobs().put(newJob.getID(),newJob);
      getDispatcher().register(JobFinishEvent.Type.class,createJobFinishEventHandler());
      return newJob;
    }
    @Override protected ClientService createClientService(    AppContext context){
      return new MRClientService(context){
        @Override public void serviceStop() throws Exception {
          numStops++;
          clientServiceStopped=numStops;
          super.serviceStop();
        }
      }
;
    }
    @Override protected EventHandler<JobHistoryEvent> createJobHistoryHandler(    AppContext context){
      return new JobHistoryEventHandler(context,getStartCount()){
        @Override public void serviceStop() throws Exception {
          numStops++;
          JobHistoryEventHandlerStopped=numStops;
          super.serviceStop();
        }
      }
;
    }
  }
}
