public class TestApps {
  @Test public void testSetEnvFromInputString(){
    Map<String,String> environment=new HashMap<String,String>();
    environment.put("JAVA_HOME","/path/jdk");
    String goodEnv="a1=1,b_2=2,_c=3,d=4,e=,f_win=%JAVA_HOME%" + ",g_nix=$JAVA_HOME";
    Apps.setEnvFromInputString(environment,goodEnv,File.pathSeparator);
    assertEquals("1",environment.get("a1"));
    assertEquals("2",environment.get("b_2"));
    assertEquals("3",environment.get("_c"));
    assertEquals("4",environment.get("d"));
    assertEquals("",environment.get("e"));
    if (Shell.WINDOWS) {
      assertEquals("$JAVA_HOME",environment.get("g_nix"));
      assertEquals("/path/jdk",environment.get("f_win"));
    }
 else {
      assertEquals("/path/jdk",environment.get("g_nix"));
      assertEquals("%JAVA_HOME%",environment.get("f_win"));
    }
    String badEnv="1,,2=a=b,3=a=,4==,5==a,==,c-3=3,=";
    environment.clear();
    Apps.setEnvFromInputString(environment,badEnv,File.pathSeparator);
    assertEquals(environment.size(),0);
    environment.clear();
    Apps.setEnvFromInputString(environment,"b1,e1==,e2=a1=a2,b2",File.pathSeparator);
    assertEquals("=",environment.get("e1"));
    assertEquals("a1=a2",environment.get("e2"));
  }
  @Test public void testSetEnvFromInputProperty(){
    Configuration conf=new Configuration(false);
    Map<String,String> env=new HashMap<>();
    String propName="mapreduce.map.env";
    String defaultPropName="mapreduce.child.env";
    conf.set(propName,"env1=env1_val,env2=env2_val,env3=env3_val");
    conf.set(propName + ".env4","env4_val");
    conf.set(propName + ".env2","new_env2_val");
    conf.set(defaultPropName,"env1=def1_val,env2=def2_val,env3=def3_val");
    String defaultPropValue=conf.get(defaultPropName);
    conf.set(defaultPropName + ".env4","def4_val");
    conf.set(defaultPropName + ".env2","new_def2_val");
    Apps.setEnvFromInputProperty(env,propName,defaultPropValue,conf,File.pathSeparator);
    assertEquals("env1_val",env.get("env1"));
    assertEquals("env3_val",env.get("env3"));
    assertEquals("env4_val",env.get("env4"));
    assertEquals("new_env2_val",env.get("env2"));
  }
  @Test public void testSetEnvFromInputPropertyDefault(){
    Configuration conf=new Configuration(false);
    Map<String,String> env=new HashMap<>();
    String propName="mapreduce.map.env";
    String defaultPropName="mapreduce.child.env";
    conf.set(propName,"env1=env1_val,env2=env2_val,env3=env3_val");
    conf.set(propName + ".env4","env4_val");
    conf.set(propName + ".env2","new_env2_val");
    conf.set(defaultPropName,"env1=def1_val,env2=def2_val,env3=def3_val");
    String defaultPropValue=conf.get(defaultPropName);
    conf.set(defaultPropName + ".env4","def4_val");
    conf.set(defaultPropName + ".env2","new_def2_val");
    String bogusProp=propName + "bogus";
    Apps.setEnvFromInputProperty(env,bogusProp,defaultPropValue,conf,File.pathSeparator);
    assertEquals("def1_val",env.get("env1"));
    assertEquals("def2_val",env.get("env2"));
    assertEquals("def3_val",env.get("env3"));
    assertNull(env.get("env4"));
  }
  @Test public void testSetEnvFromInputPropertyOverrideDefault(){
    Configuration conf=new Configuration(false);
    Map<String,String> env=new HashMap<>();
    String propName="mapreduce.reduce.env";
    conf.set(propName + ".env2","new2_val");
    conf.set(propName + ".env4","new4_val");
    String defaultPropName="mapreduce.child.env";
    conf.set(defaultPropName,"env1=def1_val,env2=def2_val,env3=def3_val");
    String defaultPropValue=conf.get(defaultPropName);
    conf.set(defaultPropName + ".env4","def4_val");
    conf.set(defaultPropName + ".env2","new_def2_val");
    Apps.setEnvFromInputProperty(env,propName,defaultPropValue,conf,File.pathSeparator);
    assertEquals("def1_val",env.get("env1"));
    assertEquals("def3_val",env.get("env3"));
    assertEquals("new4_val",env.get("env4"));
    assertEquals("new2_val",env.get("env2"));
  }
  @Test public void testSetEnvFromInputPropertyCommas(){
    Configuration conf=new Configuration(false);
    Map<String,String> env=new HashMap<>();
    String propName="mapreduce.reduce.env";
    conf.set(propName,"env1=env1_val,env2=env2_val,env3=env3_val");
    conf.set(propName + ".env2","new2_val1,new2_val2,new2_val3");
    conf.set(propName + ".env4","new4_valwith=equals");
    String defaultPropName="mapreduce.child.env";
    conf.set(defaultPropName,"env1=def1_val,env2=def2_val,env3=def3_val");
    String defaultPropValue=conf.get(defaultPropName);
    Apps.setEnvFromInputProperty(env,propName,defaultPropValue,conf,File.pathSeparator);
    assertEquals("env1_val",env.get("env1"));
    assertEquals("env3_val",env.get("env3"));
    assertEquals("new4_valwith=equals",env.get("env4"));
    assertEquals("new2_val1,new2_val2,new2_val3",env.get("env2"));
  }
  @Test public void testSetEnvFromInputPropertyNull(){
    Configuration conf=new Configuration(false);
    Map<String,String> env=new HashMap<>();
    String propName="mapreduce.map.env";
    String defaultPropName="mapreduce.child.env";
    conf.set(propName,"env1=env1_val,env2=env2_val,env3=env3_val");
    conf.set(propName + ".env4","env4_val");
    conf.set(propName + ".env2","new_env2_val");
    conf.set(defaultPropName,"env1=def1_val,env2=def2_val,env3=def3_val");
    String defaultPropValue=conf.get(defaultPropName);
    conf.set(defaultPropName + ".env4","def4_val");
    conf.set(defaultPropName + ".env2","new_def2_val");
    Apps.setEnvFromInputProperty(env,"bogus1",null,conf,File.pathSeparator);
    assertTrue(env.isEmpty());
  }
}
