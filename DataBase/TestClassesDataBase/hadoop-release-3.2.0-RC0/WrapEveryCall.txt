private static abstract class WrapEveryCall<T> implements Answer<T> {
  private final Object realObj;
  WrapEveryCall(  Object realObj){
    this.realObj=realObj;
  }
  @SuppressWarnings("unchecked") @Override public T answer(  InvocationOnMock invocation) throws Throwable {
    if (!Closeable.class.equals(invocation.getMethod().getDeclaringClass())) {
      beforeCall(invocation);
    }
    boolean success=false;
    try {
      T ret=(T)invocation.getMethod().invoke(realObj,invocation.getArguments());
      success=true;
      return ret;
    }
 catch (    InvocationTargetException ite) {
      throw ite.getCause();
    }
 finally {
      afterCall(invocation,success);
    }
  }
  abstract void beforeCall(  InvocationOnMock invocation) throws Exception ;
  void afterCall(  InvocationOnMock invocation,  boolean succeeded){
  }
}
