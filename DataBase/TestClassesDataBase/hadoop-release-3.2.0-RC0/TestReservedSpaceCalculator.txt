/** 
 * Unit testing for different types of ReservedSpace calculators.
 */
public class TestReservedSpaceCalculator {
  private Configuration conf;
  private DF usage;
  private ReservedSpaceCalculator reserved;
  @Before public void setUp(){
    conf=new Configuration();
    usage=Mockito.mock(DF.class);
  }
  @Test public void testReservedSpaceAbsolute(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorAbsolute.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY,900);
    checkReserved(StorageType.DISK,10000,900);
    checkReserved(StorageType.SSD,10000,900);
    checkReserved(StorageType.ARCHIVE,10000,900);
  }
  @Test public void testReservedSpaceAbsolutePerStorageType(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorAbsolute.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".disk",500);
    checkReserved(StorageType.DISK,2300,500);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".ssd",750);
    checkReserved(StorageType.SSD,1550,750);
  }
  @Test public void testReservedSpacePercentage(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorPercentage.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY,10);
    checkReserved(StorageType.DISK,10000,1000);
    checkReserved(StorageType.SSD,10000,1000);
    checkReserved(StorageType.ARCHIVE,10000,1000);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY,50);
    checkReserved(StorageType.DISK,4000,2000);
    checkReserved(StorageType.SSD,4000,2000);
    checkReserved(StorageType.ARCHIVE,4000,2000);
  }
  @Test public void testReservedSpacePercentagePerStorageType(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorPercentage.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".disk",20);
    checkReserved(StorageType.DISK,1600,320);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".ssd",50);
    checkReserved(StorageType.SSD,8001,4000);
  }
  @Test public void testReservedSpaceConservativePerStorageType(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorConservative.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".disk",800);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".disk",20);
    checkReserved(StorageType.DISK,1600,800);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".archive",1300);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".archive",50);
    checkReserved(StorageType.ARCHIVE,6200,3100);
  }
  @Test public void testReservedSpaceAggresivePerStorageType(){
    conf.setClass(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,ReservedSpaceCalculatorAggressive.class,ReservedSpaceCalculator.class);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".ram_disk",100);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".ram_disk",10);
    checkReserved(StorageType.RAM_DISK,1600,100);
    conf.setLong(DFS_DATANODE_DU_RESERVED_KEY + ".archive",20000);
    conf.setLong(DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY + ".archive",5);
    checkReserved(StorageType.ARCHIVE,100000,5000);
  }
  @Test(expected=IllegalStateException.class) public void testInvalidCalculator(){
    conf.set(DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY,"INVALIDTYPE");
    reserved=new ReservedSpaceCalculator.Builder(conf).setUsage(usage).setStorageType(StorageType.DISK).build();
  }
  private void checkReserved(  StorageType storageType,  long totalCapacity,  long reservedExpected){
    when(usage.getCapacity()).thenReturn(totalCapacity);
    reserved=new ReservedSpaceCalculator.Builder(conf).setUsage(usage).setStorageType(storageType).build();
    assertEquals(reservedExpected,reserved.getReserved());
  }
}
