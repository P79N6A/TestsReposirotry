/** 
 * Simple test class for the  {@link PriorityRouterPolicy}. Tests that the weights are correctly used for ordering the choice of sub-clusters.
 */
public class TestPriorityRouterPolicy extends BaseRouterPoliciesTest {
  @Before public void setUp() throws Exception {
    setPolicy(new PriorityRouterPolicy());
    setPolicyInfo(new WeightedPolicyInfo());
    Map<SubClusterIdInfo,Float> routerWeights=new HashMap<>();
    Map<SubClusterIdInfo,Float> amrmWeights=new HashMap<>();
    for (int i=0; i < 20; i++) {
      SubClusterIdInfo sc=new SubClusterIdInfo("sc" + i);
      if (getRand().nextFloat() < 0.95f || i == 5) {
        SubClusterInfo sci=mock(SubClusterInfo.class);
        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);
        when(sci.getSubClusterId()).thenReturn(sc.toId());
        getActiveSubclusters().put(sc.toId(),sci);
      }
      float weight=getRand().nextFloat();
      if (i == 5) {
        weight=1.1f;
      }
      if (i <= 5 || getRand().nextFloat() > 0.05f) {
        routerWeights.put(sc,weight);
        amrmWeights.put(sc,weight);
      }
    }
    getPolicyInfo().setRouterPolicyWeights(routerWeights);
    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);
    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(),getPolicyInfo(),getActiveSubclusters());
  }
  @Test public void testPickLowestWeight() throws YarnException {
    SubClusterId chosen=((FederationRouterPolicy)getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(),null);
    Assert.assertEquals("sc5",chosen.getId());
  }
}
