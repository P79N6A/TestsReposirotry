private static class StubbedLocalContainerAllocator extends LocalContainerAllocator {
  private ApplicationMasterProtocol scheduler;
  public StubbedLocalContainerAllocator(  ApplicationMasterProtocol scheduler){
    super(mock(ClientService.class),createAppContext(),"nmhost",1,2,null);
    this.scheduler=scheduler;
  }
  @Override protected void register(){
  }
  @Override protected void unregister(){
  }
  @Override protected void startAllocatorThread(){
    allocatorThread=new Thread();
  }
  @Override protected ApplicationMasterProtocol createSchedulerProxy(){
    return scheduler;
  }
  private static AppContext createAppContext(){
    ApplicationId appId=ApplicationId.newInstance(1,1);
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    Job job=mock(Job.class);
    @SuppressWarnings("unchecked") EventHandler<Event> eventHandler=mock(EventHandler.class);
    AppContext ctx=mock(AppContext.class);
    when(ctx.getApplicationID()).thenReturn(appId);
    when(ctx.getApplicationAttemptId()).thenReturn(attemptId);
    when(ctx.getJob(isA(JobId.class))).thenReturn(job);
    when(ctx.getClusterInfo()).thenReturn(new ClusterInfo(Resource.newInstance(10240,1)));
    when(ctx.getEventHandler()).thenReturn(eventHandler);
    return ctx;
  }
}
