/** 
 * Extends  {@link MiniDFSCluster} to correctly configure the InMemoryAliasMap.
 */
private static class MiniDFSClusterAliasMap extends MiniDFSCluster {
  private Map<String,Collection<URI>> formattedDirsByNamespaceId;
  private Set<Integer> completedNNs;
  MiniDFSClusterAliasMap(  MiniDFSCluster.Builder builder) throws IOException {
    super(builder);
  }
  @Override protected void initNameNodeConf(  Configuration conf,  String nameserviceId,  int nsIndex,  String nnId,  boolean manageNameDfsDirs,  boolean enableManagedDfsDirsRedundancy,  int nnIndex) throws IOException {
    if (formattedDirsByNamespaceId == null) {
      formattedDirsByNamespaceId=new HashMap<>();
      completedNNs=new HashSet<>();
    }
    super.initNameNodeConf(conf,nameserviceId,nsIndex,nnId,manageNameDfsDirs,enableManagedDfsDirsRedundancy,nnIndex);
    if (providedNameservice.equals(nameserviceId)) {
      conf.setBoolean(DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED,true);
      String directory=conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR);
      if (directory == null) {
        throw new IllegalArgumentException("In-memory alias map configured" + "with the proper location; Set " + DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR);
      }
      String dirName=new Path(directory).getName();
      String nnDir=conf.getTrimmedStringCollection(DFS_NAMENODE_NAME_DIR_KEY).iterator().next();
      conf.set(DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR,new File(new Path(nnDir,dirName).toUri()).getAbsolutePath());
      conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_PROVIDED_ENABLED,true);
    }
 else {
      if (!completedNNs.contains(nnIndex)) {
        Collection<URI> namespaceDirs=FSNamesystem.getNamespaceDirs(conf);
        if (formattedDirsByNamespaceId.containsKey(nameserviceId)) {
          copyNameDirs(formattedDirsByNamespaceId.get(nameserviceId),namespaceDirs,conf);
        }
 else {
          for (          URI nameDirUri : namespaceDirs) {
            File nameDir=new File(nameDirUri);
            if (nameDir.exists() && !FileUtil.fullyDelete(nameDir)) {
              throw new IOException("Could not fully delete " + nameDir);
            }
          }
          HdfsServerConstants.StartupOption.FORMAT.setClusterId(clusterID);
          DFSTestUtil.formatNameNode(conf);
          formattedDirsByNamespaceId.put(nameserviceId,namespaceDirs);
        }
        conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_PROVIDED_ENABLED,false);
        completedNNs.add(nnIndex);
      }
    }
  }
}
