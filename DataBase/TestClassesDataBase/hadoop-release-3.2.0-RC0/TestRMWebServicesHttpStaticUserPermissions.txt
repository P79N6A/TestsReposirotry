public class TestRMWebServicesHttpStaticUserPermissions {
  private static final File testRootDir=new File("target",TestRMWebServicesHttpStaticUserPermissions.class.getName() + "-root");
  private static File spnegoKeytabFile=new File(KerberosTestUtils.getKeytabFile());
  private static String spnegoPrincipal=KerberosTestUtils.getServerPrincipal();
  private static MiniKdc testMiniKDC;
  private static MockRM rm;
static class Helper {
    String method;
    String requestBody;
    Helper(    String method,    String requestBody){
      this.method=method;
      this.requestBody=requestBody;
    }
  }
  @BeforeClass public static void setUp(){
    try {
      testMiniKDC=new MiniKdc(MiniKdc.createConf(),testRootDir);
      setupKDC();
      setupAndStartRM();
    }
 catch (    Exception e) {
      fail("Couldn't create MiniKDC");
    }
  }
  @AfterClass public static void tearDown(){
    if (testMiniKDC != null) {
      testMiniKDC.stop();
    }
    if (rm != null) {
      rm.stop();
    }
  }
  public TestRMWebServicesHttpStaticUserPermissions() throws Exception {
    super();
  }
  private static void setupAndStartRM() throws Exception {
    Configuration rmconf=new Configuration();
    rmconf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    rmconf.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
    rmconf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
    rmconf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    rmconf.set(YarnConfiguration.RM_PRINCIPAL,spnegoPrincipal);
    rmconf.set(YarnConfiguration.RM_KEYTAB,spnegoKeytabFile.getAbsolutePath());
    rmconf.setBoolean("mockrm.webapp.enabled",true);
    UserGroupInformation.setConfiguration(rmconf);
    rm=new MockRM(rmconf);
    rm.start();
  }
  private static void setupKDC() throws Exception {
    testMiniKDC.start();
    testMiniKDC.createPrincipal(spnegoKeytabFile,"HTTP/localhost","client",UserGroupInformation.getLoginUser().getShortUserName(),"client2");
  }
  @Test public void testWebServiceAccess() throws Exception {
    ApplicationSubmissionContextInfo app=new ApplicationSubmissionContextInfo();
    String appid="application_123_0";
    app.setApplicationId(appid);
    String submitAppRequestBody=TestRMWebServicesDelegationTokenAuthentication.getMarshalledAppInfo(app);
    URL url=new URL("http://localhost:8088/ws/v1/cluster/apps");
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    TestRMWebServicesDelegationTokenAuthentication.setupConn(conn,"GET","","");
    try {
      conn.getInputStream();
      assertEquals(Status.OK.getStatusCode(),conn.getResponseCode());
    }
 catch (    IOException e) {
      fail("Got " + conn.getResponseCode() + " instead of 200 accessing "+ url.toString());
    }
    conn.disconnect();
    Map<String,Helper> urlRequestMap=new HashMap<String,Helper>();
    String killAppRequestBody="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" + "<appstate>\n" + "  <state>KILLED</state>\n"+ "</appstate>";
    urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps",new Helper("POST",submitAppRequestBody));
    urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps/new-application",new Helper("POST",""));
    urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps/app_123_1/state",new Helper("PUT",killAppRequestBody));
    for (    Map.Entry<String,Helper> entry : urlRequestMap.entrySet()) {
      URL reqURL=new URL(entry.getKey());
      conn=(HttpURLConnection)reqURL.openConnection();
      String method=entry.getValue().method;
      String body=entry.getValue().requestBody;
      TestRMWebServicesDelegationTokenAuthentication.setupConn(conn,method,"application/xml",body);
      try {
        conn.getInputStream();
        fail("Request " + entry.getKey() + "succeeded but should have failed");
      }
 catch (      IOException e) {
        assertEquals(Status.FORBIDDEN.getStatusCode(),conn.getResponseCode());
        InputStream errorStream=conn.getErrorStream();
        String error="";
        BufferedReader reader=new BufferedReader(new InputStreamReader(errorStream,"UTF8"));
        for (String line; (line=reader.readLine()) != null; ) {
          error+=line;
        }
        reader.close();
        errorStream.close();
        JSONObject errResponse=new JSONObject(error);
        JSONObject remoteException=errResponse.getJSONObject("RemoteException");
        assertEquals("java.lang.Exception: The default static user cannot carry out " + "this operation.",remoteException.getString("message"));
      }
      conn.disconnect();
    }
  }
}
