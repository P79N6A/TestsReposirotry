/** 
 * Test class for IntraQueuePreemption scenarios.
 */
public class TestProportionalCapacityPreemptionPolicyIntraQueue extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,true);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testSimpleIntraQueuePreemption() throws IOException {
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 79 110 0]);" + "-a(=[11 100 11 50 0]);" + "-b(=[40 100 38 50 0]);"+ "-c(=[20 100 10 10 0]);"+ "-d(=[29 100 20 0 0])";
    String appsConfig="a\t" + "(1,1,n1,,6,false,25);" + "a\t"+ "(1,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,34,false,20);"+ "b\t"+ "(4,1,n1,,2,false,10);"+ "b\t"+ "(5,1,n1,,1,false,10);"+ "b\t"+ "(6,1,n1,,1,false,10);"+ "c\t"+ "(1,1,n1,,10,false,10);"+ "d\t"+ "(1,1,n1,,20,false,0)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(7)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNoIntraQueuePreemptionWithPreemptionDisabledOnQueues() throws IOException {
    conf.setPreemptionDisabled("root.a",true);
    conf.setPreemptionDisabled("root.b",true);
    conf.setPreemptionDisabled("root.c",true);
    conf.setPreemptionDisabled("root.d",true);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 110 0]);" + "-a(=[11 100 11 50 0]);" + "-b(=[40 100 38 50 0]);"+ "-c(=[20 100 10 10 0]);"+ "-d(=[29 100 20 0 0])";
    String appsConfig="a\t" + "(1,1,n1,,6,false,25);" + "a\t"+ "(1,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,34,false,20);"+ "b\t"+ "(4,1,n1,,2,false,10);"+ "b\t"+ "(5,1,n1,,1,false,10);"+ "b\t"+ "(6,1,n1,,1,false,10);"+ "c\t"+ "(1,1,n1,,10,false,10);"+ "d\t"+ "(1,1,n1,,20,false,0)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNoPreemptionForSamePriorityApps() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 120 0]);" + "-a(=[10 100 10 50 0]);" + "-b(=[40 100 40 60 0]);"+ "-c(=[20 100 10 10 0]);"+ "-d(=[30 100 20 0 0])";
    String appsConfig="a\t" + "(1,1,n1,,6,false,25);" + "a\t"+ "(1,1,n1,,5,false,25);"+ "b\t"+ "(1,1,n1,,34,false,20);"+ "b\t"+ "(1,1,n1,,2,false,10);"+ "b\t"+ "(1,1,n1,,1,false,20);"+ "b\t"+ "(1,1,n1,,1,false,10);"+ "c\t"+ "(1,1,n1,,10,false,10);"+ "d\t"+ "(1,1,n1,,20,false,0)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(5))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(6))));
  }
  @Test public void testNoPreemptionWhenQueueIsUnderCapacityLimit() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 35 80 0]);" + "-a(=[40 100 10 50 0]);" + "-b(=[60 100 25 30 0])";
    String appsConfig="a\t" + "(1,1,n1,,5,false,25);" + "a\t"+ "(2,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,40,false,20);"+ "b\t"+ "(6,1,n1,,5,false,20)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
  }
  @Test public void testLimitPreemptionWithMaxIntraQueuePreemptableLimit() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 55 170 0]);" + "-a(=[40 100 10 50 0]);" + "-b(=[60 100 45 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,5,false,25);" + "a\t"+ "(2,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,40,false,20);"+ "b\t"+ "(6,1,n1,,5,false,100)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(30)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testLimitPreemptionWithTotalPreemptedResourceAllowed() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.TOTAL_PREEMPTION_PER_ROUND,(float)0.1);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 55 170 0]);" + "-a(=[40 100 10 50 0]);" + "-b(=[60 100 45 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,5,false,25);" + "a\t"+ "(2,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,40,false,20);"+ "b\t"+ "(6,1,n1,,5,false,100)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(10)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testAlreadySelectedContainerFromInterQueuePreemption() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 95 170 0]);" + "-a(=[60 100 70 35 0]);" + "-b(=[40 100 25 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,50,false,15);" + "a\t"+ "(2,1,n1,,20,false,20);"+ "b\t"+ "(4,1,n1,,20,false,20);"+ "b\t"+ "(4,1,n1,,5,false,100)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,never()).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testSkipAMContainersInInterQueuePreemption() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 170 0]);" + "-a(=[60 100 60 50 0]);" + "-b(=[40 100 40 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,30,false,10);" + "a\t"+ "(1,1,n1,,10,false,20);"+ "a\t"+ "(2,1,n1,,20,false,20);"+ "b\t"+ "(4,1,n1,,20,false,20);"+ "b\t"+ "(4,1,n1,,20,false,100)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(11)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testSkipAMContainersInInterQueuePreemptionSingleApp() throws IOException {
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 170 0]);" + "-a(=[50 100 50 50 0]);" + "-b(=[50 100 50 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,10,false,10);" + "a\t"+ "(2,1,n1,,40,false,10);"+ "b\t"+ "(4,1,n1,,20,false,20);"+ "b\t"+ "(4,1,n1,,30,false,100)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,never()).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNoPreemptionForSingleApp() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 20 50 0]);" + "-a(=[60 100 20 50 0]);" + "-b(=[40 100 0 0 0])";
    String appsConfig="a\t" + "(4,1,n1,,20,false,50)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testOverutilizedQueueResourceWithInterQueuePreemption() throws IOException {
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 70 0]);" + "-a(=[20 100 100 30 0]);" + "-b(=[80 100 0 20 0])";
    String appsConfig="a\t" + "(1,1,n1,,50,false,0);" + "a\t"+ "(3,1,n1,,50,false,30);"+ "b\t"+ "(4,1,n1,,0,false,20)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNodePartitionIntraQueuePreemption() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 50 50],x=[50 100 50 50]);" + "-b(=[50 100 50 50],x=[50 100 50 50])";
    String appsConfig="a\t" + "(1,1,n1,x,50,false,10);" + "a\t"+ "(2,1,n1,x,0,false,20);"+ "a\t"+ "(1,1,n2,,50,false);"+ "b\t"+ "(1,1,n1,x,50,false);"+ "b\t"+ "(1,1,n2,,50,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(20)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testComplexIntraQueuePreemption() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.TOTAL_PREEMPTION_PER_ROUND,(float)0.5);
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 75 130 0]);" + "-a(=[10 100 5 50 0]);" + "-b(=[40 100 35 60 0]);"+ "-c(=[20 100 10 10 0]);"+ "-d(=[30 100 25 10 0])";
    String appsConfig="a\t" + "(1,1,n1,,5,false,25);" + "a\t"+ "(4,1,n1,,0,false,25);"+ "a\t"+ "(5,1,n1,,0,false,2);"+ "b\t"+ "(3,1,n1,,5,false,20);"+ "b\t"+ "(4,1,n1,,15,false,10);"+ "b\t"+ "(4,1,n1,,10,false,10);"+ "b\t"+ "(5,1,n1,,3,false,5);"+ "b\t"+ "(5,1,n1,,0,false,2);"+ "b\t"+ "(6,1,n1,,2,false,10);"+ "c\t"+ "(1,1,n1,,8,false,10);"+ "c\t"+ "(1,1,n1,,2,false,5);"+ "c\t"+ "(2,1,n1,,0,false,3);"+ "d\t"+ "(2,1,n1,,25,false,0);"+ "d\t"+ "(1,1,n1,,0,false,20)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(6))));
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(5))));
    verify(mDisp,times(2)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(10))));
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(11))));
  }
  @Test public void testIntraQueuePreemptionWithTwoUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 55 170 0]);" + "-a(=[60 100 10 50 0]);" + "-b(=[40 100 40 120 0])";
    String appsConfig="a\t" + "(1,1,n1,,5,false,25);" + "a\t"+ "(2,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,35,false,20,user1);"+ "b\t"+ "(6,1,n1,,5,false,30,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(14)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testComplexNodePartitionIntraQueuePreemption() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;" + "x=100,true";
    String nodesConfig="n1=x;" + "n2=";
    String queuesConfig="root(=[100 100 100 100],x=[100 100 100 100]);" + "-a(=[50 100 50 50],x=[50 100 40 50]);" + "-b(=[50 100 35 50],x=[50 100 50 50])";
    String appsConfig="a\t" + "(1,1,n1,x,35,false,10);" + "a\t"+ "(1,1,n1,x,5,false,10);"+ "a\t"+ "(2,1,n1,x,0,false,20);"+ "a\t"+ "(1,1,n2,,50,false);"+ "b\t"+ "(1,1,n1,x,50,false);"+ "b\t"+ "(1,1,n2,,25,false);"+ "b\t"+ "(1,1,n2,,3,false);"+ "b\t"+ "(1,1,n2,,2,false);"+ "b\t"+ "(5,1,n2,,5,false,30)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(16)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(4)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(1)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(8))));
    verify(mDisp,times(2)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(7))));
    verify(mDisp,times(22)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(6))));
  }
  @Test public void testIntraQueuePreemptionAfterQueueDropped() throws IOException {
    conf.set(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ORDER_POLICY,"priority_first");
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 79 110 0]);" + "-a(=[11 100 11 50 0]);" + "-b(=[40 100 38 50 0]);"+ "-c(=[20 100 10 10 0]);"+ "-d(=[29 100 20 0 0])";
    String appsConfig="a\t" + "(1,1,n1,,6,false,25);" + "a\t"+ "(1,1,n1,,5,false,25);"+ "b\t"+ "(4,1,n1,,34,false,20);"+ "b\t"+ "(4,1,n1,,2,false,10);"+ "b\t"+ "(5,1,n1,,1,false,10);"+ "b\t"+ "(6,1,n1,,1,false,10);"+ "c\t"+ "(1,1,n1,,10,false,10);"+ "d\t"+ "(1,1,n1,,20,false,0)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    queuesConfig="root(=[100 100 69 100 0]);" + "-a(=[11 100 11 50 0]);" + "-b(=[40 100 38 50 0]);"+ "-d(=[49 100 20 0 0])";
    updateQueueConfig(queuesConfig);
    policy.editSchedule();
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
    verify(mDisp,times(7)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
}
