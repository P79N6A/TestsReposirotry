private static class TestMergeThread extends MergeThread<InMemoryMapOutput<Text,Text>,Text,Text> {
  private AtomicInteger numMerges;
  private CyclicBarrier mergeStart;
  private CyclicBarrier mergeComplete;
  public TestMergeThread(  MergeManagerImpl<Text,Text> mergeManager,  ExceptionReporter reporter){
    super(mergeManager,Integer.MAX_VALUE,reporter);
    numMerges=new AtomicInteger(0);
  }
  public synchronized void setSyncBarriers(  CyclicBarrier mergeStart,  CyclicBarrier mergeComplete){
    this.mergeStart=mergeStart;
    this.mergeComplete=mergeComplete;
  }
  public int getNumMerges(){
    return numMerges.get();
  }
  @Override public void merge(  List<InMemoryMapOutput<Text,Text>> inputs) throws IOException {
synchronized (this) {
      numMerges.incrementAndGet();
      for (      InMemoryMapOutput<Text,Text> input : inputs) {
        manager.unreserve(input.getSize());
      }
    }
    try {
      mergeStart.await();
      mergeComplete.await();
    }
 catch (    InterruptedException e) {
    }
catch (    BrokenBarrierException e) {
    }
  }
}
