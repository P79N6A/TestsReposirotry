/** 
 * Basic unit tests for the SCM Admin Protocol Service and SCMAdmin.
 */
public class TestSCMAdminProtocolService {
  static SCMAdminProtocolService service;
  static SCMAdminProtocol SCMAdminProxy;
  static SCMAdminProtocol mockAdmin;
  static SCMAdmin adminCLI;
  static SCMStore store;
  static CleanerService cleaner;
  private final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  @Before public void startUp(){
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.SCM_STORE_CLASS,InMemorySCMStore.class.getName());
    cleaner=mock(CleanerService.class);
    service=spy(new SCMAdminProtocolService(cleaner));
    service.init(conf);
    service.start();
    YarnRPC rpc=YarnRPC.create(new Configuration());
    InetSocketAddress scmAddress=conf.getSocketAddr(YarnConfiguration.SCM_ADMIN_ADDRESS,YarnConfiguration.DEFAULT_SCM_ADMIN_ADDRESS,YarnConfiguration.DEFAULT_SCM_ADMIN_PORT);
    SCMAdminProxy=(SCMAdminProtocol)rpc.getProxy(SCMAdminProtocol.class,scmAddress,conf);
    mockAdmin=mock(SCMAdminProtocol.class);
    adminCLI=new SCMAdmin(new Configuration()){
      @Override protected SCMAdminProtocol createSCMAdminProtocol() throws IOException {
        return mockAdmin;
      }
    }
;
  }
  @After public void cleanUpTest(){
    if (service != null) {
      service.stop();
    }
    if (SCMAdminProxy != null) {
      RPC.stopProxy(SCMAdminProxy);
    }
  }
  @Test public void testRunCleanerTask() throws Exception {
    doNothing().when(cleaner).runCleanerTask();
    RunSharedCacheCleanerTaskRequest request=recordFactory.newRecordInstance(RunSharedCacheCleanerTaskRequest.class);
    RunSharedCacheCleanerTaskResponse response=SCMAdminProxy.runCleanerTask(request);
    Assert.assertTrue("cleaner task request isn't accepted",response.getAccepted());
    verify(service,times(1)).runCleanerTask(any(RunSharedCacheCleanerTaskRequest.class));
  }
  @Test public void testRunCleanerTaskCLI() throws Exception {
    String[] args={"-runCleanerTask"};
    RunSharedCacheCleanerTaskResponse rp=new RunSharedCacheCleanerTaskResponsePBImpl();
    rp.setAccepted(true);
    when(mockAdmin.runCleanerTask(isA(RunSharedCacheCleanerTaskRequest.class))).thenReturn(rp);
    assertEquals(0,adminCLI.run(args));
    rp.setAccepted(false);
    when(mockAdmin.runCleanerTask(isA(RunSharedCacheCleanerTaskRequest.class))).thenReturn(rp);
    assertEquals(1,adminCLI.run(args));
    verify(mockAdmin,times(2)).runCleanerTask(any(RunSharedCacheCleanerTaskRequest.class));
  }
}
