/** 
 * Test class for verification of RollingLevelDB. 
 */
public class TestRollingLevelDB {
  private Configuration conf=new YarnConfiguration();
  private FileSystem lfs;
  private MyRollingLevelDB rollingLevelDB;
  /** 
 * RollingLevelDB for testing that has a setting current time. 
 */
public static class MyRollingLevelDB extends RollingLevelDB {
    private long currentTimeMillis;
    MyRollingLevelDB(){
      super("Test");
      this.currentTimeMillis=System.currentTimeMillis();
    }
    @Override protected long currentTimeMillis(){
      return currentTimeMillis;
    }
    public void setCurrentTimeMillis(    long time){
      this.currentTimeMillis=time;
    }
  }
  @Before public void setup() throws Exception {
    lfs=FileSystem.getLocal(conf);
    File fsPath=new File("target",this.getClass().getSimpleName() + "-tmpDir").getAbsoluteFile();
    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH,fsPath.getAbsolutePath());
    lfs.delete(new Path(fsPath.getAbsolutePath()),true);
    rollingLevelDB=new MyRollingLevelDB();
  }
  @Test public void testInsertAfterRollPeriodRollsDB() throws Exception {
    rollingLevelDB.init(conf);
    long now=rollingLevelDB.currentTimeMillis();
    DB db=rollingLevelDB.getDBForStartTime(now);
    long startTime=rollingLevelDB.getStartTimeFor(db);
    Assert.assertEquals("Received level db for incorrect start time",rollingLevelDB.computeCurrentCheckMillis(now),startTime);
    now=rollingLevelDB.getNextRollingTimeMillis();
    rollingLevelDB.setCurrentTimeMillis(now);
    db=rollingLevelDB.getDBForStartTime(now);
    startTime=rollingLevelDB.getStartTimeFor(db);
    Assert.assertEquals("Received level db for incorrect start time",rollingLevelDB.computeCurrentCheckMillis(now),startTime);
  }
  @Test public void testInsertForPreviousPeriodAfterRollPeriodRollsDB() throws Exception {
    rollingLevelDB.init(conf);
    long now=rollingLevelDB.currentTimeMillis();
    now=rollingLevelDB.computeCurrentCheckMillis(now);
    rollingLevelDB.setCurrentTimeMillis(now);
    DB db=rollingLevelDB.getDBForStartTime(now - 1);
    long startTime=rollingLevelDB.getStartTimeFor(db);
    Assert.assertEquals("Received level db for incorrect start time",rollingLevelDB.computeCurrentCheckMillis(now - 1),startTime);
  }
}
