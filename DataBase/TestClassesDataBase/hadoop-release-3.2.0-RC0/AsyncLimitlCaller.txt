static class AsyncLimitlCaller extends Thread {
  private Client client;
  private InetSocketAddress server;
  private int count;
  private boolean failed;
  Map<Integer,Future<LongWritable>> returnFutures=new HashMap<Integer,Future<LongWritable>>();
  Map<Integer,Long> expectedValues=new HashMap<Integer,Long>();
  int start=0, end=0;
  int getStart(){
    return start;
  }
  int getEnd(){
    return end;
  }
  int getCount(){
    return count;
  }
  public AsyncLimitlCaller(  Client client,  InetSocketAddress server,  int count){
    this(0,client,server,count);
  }
  final int callerId;
  public AsyncLimitlCaller(  int callerId,  Client client,  InetSocketAddress server,  int count){
    this.client=client;
    this.server=server;
    this.count=count;
    Client.setAsynchronousMode(true);
    this.callerId=callerId;
  }
  @Override public void run(){
    Client.setAsynchronousMode(true);
    for (int i=0; i < count; i++) {
      try {
        final long param=TestIPC.RANDOM.nextLong();
        runCall(i,param);
      }
 catch (      Exception e) {
        LOG.error(String.format("Caller-%d Call-%d caught: %s",callerId,i,StringUtils.stringifyException(e)));
        failed=true;
      }
    }
  }
  private void runCall(  final int idx,  final long param) throws InterruptedException, ExecutionException, IOException {
    for (; ; ) {
      try {
        doCall(idx,param);
        return;
      }
 catch (      AsyncCallLimitExceededException e) {
        start=end;
        end=idx;
        waitForReturnValues(start,end);
      }
    }
  }
  private void doCall(  final int idx,  final long param) throws IOException {
    TestIPC.call(client,param,server,conf);
    returnFutures.put(idx,getAsyncRpcResponseFuture());
    expectedValues.put(idx,param);
  }
  private void waitForReturnValues(  final int start,  final int end) throws InterruptedException, ExecutionException {
    for (int i=start; i < end; i++) {
      LongWritable value=returnFutures.get(i).get();
      if (expectedValues.get(i) != value.get()) {
        LOG.error(String.format("Caller-%d Call-%d failed!",callerId,i));
        failed=true;
        break;
      }
    }
  }
}
