public class TestLogInfo {
  private static final Path TEST_ROOT_DIR=new Path(System.getProperty("test.build.data",System.getProperty("java.io.tmpdir")),TestLogInfo.class.getSimpleName());
  private static final String TEST_ATTEMPT_DIR_NAME="test_app";
  private static final String TEST_ENTITY_FILE_NAME="test_entity";
  private static final String TEST_DOMAIN_FILE_NAME="test_domain";
  private static final String TEST_BROKEN_FILE_NAME="test_broken";
  private Configuration config=new YarnConfiguration();
  private MiniDFSCluster hdfsCluster;
  private FileSystem fs;
  private FileContext fc;
  private FileContextTestHelper fileContextTestHelper=new FileContextTestHelper("/tmp/TestLogInfo");
  private ObjectMapper objMapper;
  private JsonFactory jsonFactory=new JsonFactory();
  private JsonGenerator jsonGenerator;
  private FSDataOutputStream outStream=null;
  private FSDataOutputStream outStreamDomain=null;
  private TimelineDomain testDomain;
  private static final short FILE_LOG_DIR_PERMISSIONS=0770;
  @Before public void setup() throws Exception {
    config.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR,TEST_ROOT_DIR.toString());
    HdfsConfiguration hdfsConfig=new HdfsConfiguration();
    hdfsCluster=new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();
    fs=hdfsCluster.getFileSystem();
    fc=FileContext.getFileContext(hdfsCluster.getURI(0),config);
    Path testAppDirPath=getTestRootPath(TEST_ATTEMPT_DIR_NAME);
    fs.mkdirs(testAppDirPath,new FsPermission(FILE_LOG_DIR_PERMISSIONS));
    objMapper=PluginStoreTestUtils.createObjectMapper();
    TimelineEntities testEntities=PluginStoreTestUtils.generateTestEntities();
    writeEntitiesLeaveOpen(testEntities,new Path(testAppDirPath,TEST_ENTITY_FILE_NAME));
    testDomain=new TimelineDomain();
    testDomain.setId("domain_1");
    testDomain.setReaders(UserGroupInformation.getLoginUser().getUserName());
    testDomain.setOwner(UserGroupInformation.getLoginUser().getUserName());
    testDomain.setDescription("description");
    writeDomainLeaveOpen(testDomain,new Path(testAppDirPath,TEST_DOMAIN_FILE_NAME));
    writeBrokenFile(new Path(testAppDirPath,TEST_BROKEN_FILE_NAME));
  }
  @After public void tearDown() throws Exception {
    jsonGenerator.close();
    outStream.close();
    outStreamDomain.close();
    hdfsCluster.shutdown();
  }
  @Test public void testMatchesGroupId() throws Exception {
    String testGroupId="app1_group1";
    EntityLogInfo testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app1_group1",UserGroupInformation.getLoginUser().getUserName());
    assertTrue(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"test_app1_group1",UserGroupInformation.getLoginUser().getUserName());
    assertTrue(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app2_group1",UserGroupInformation.getLoginUser().getUserName());
    assertFalse(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app1_group2",UserGroupInformation.getLoginUser().getUserName());
    assertFalse(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app1_group12",UserGroupInformation.getLoginUser().getUserName());
    assertFalse(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app1_group1_2",UserGroupInformation.getLoginUser().getUserName());
    assertTrue(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app1_group1.dat",UserGroupInformation.getLoginUser().getUserName());
    assertTrue(testLogInfo.matchesGroupId(testGroupId));
    testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,"app2",UserGroupInformation.getLoginUser().getUserName());
    assertFalse(testLogInfo.matchesGroupId(testGroupId));
  }
  @Test public void testParseEntity() throws Exception {
    TimelineDataManager tdm=PluginStoreTestUtils.getTdmWithMemStore(config);
    EntityLogInfo testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,TEST_ENTITY_FILE_NAME,UserGroupInformation.getLoginUser().getUserName());
    testLogInfo.parseForStore(tdm,getTestRootPath(),true,jsonFactory,objMapper,fs);
    PluginStoreTestUtils.verifyTestEntities(tdm);
    TimelineEntity entityNew=PluginStoreTestUtils.createEntity("id_3","type_3",789l,null,null,null,null,"domain_id_1");
    TimelineEntities entityList=new TimelineEntities();
    entityList.addEntity(entityNew);
    writeEntitiesLeaveOpen(entityList,new Path(getTestRootPath(TEST_ATTEMPT_DIR_NAME),TEST_ENTITY_FILE_NAME));
    testLogInfo.parseForStore(tdm,getTestRootPath(),true,jsonFactory,objMapper,fs);
    TimelineEntity entity3=tdm.getEntity(entityNew.getEntityType(),entityNew.getEntityId(),EnumSet.allOf(TimelineReader.Field.class),UserGroupInformation.getLoginUser());
    assertNotNull(entity3);
    assertEquals("Failed to read out entity new",entityNew.getStartTime(),entity3.getStartTime());
    tdm.close();
  }
  @Test public void testParseBrokenEntity() throws Exception {
    TimelineDataManager tdm=PluginStoreTestUtils.getTdmWithMemStore(config);
    EntityLogInfo testLogInfo=new EntityLogInfo(TEST_ATTEMPT_DIR_NAME,TEST_BROKEN_FILE_NAME,UserGroupInformation.getLoginUser().getUserName());
    DomainLogInfo domainLogInfo=new DomainLogInfo(TEST_ATTEMPT_DIR_NAME,TEST_BROKEN_FILE_NAME,UserGroupInformation.getLoginUser().getUserName());
    testLogInfo.parseForStore(tdm,getTestRootPath(),true,jsonFactory,objMapper,fs);
    domainLogInfo.parseForStore(tdm,getTestRootPath(),true,jsonFactory,objMapper,fs);
    tdm.close();
  }
  @Test public void testParseDomain() throws Exception {
    TimelineDataManager tdm=PluginStoreTestUtils.getTdmWithMemStore(config);
    DomainLogInfo domainLogInfo=new DomainLogInfo(TEST_ATTEMPT_DIR_NAME,TEST_DOMAIN_FILE_NAME,UserGroupInformation.getLoginUser().getUserName());
    domainLogInfo.parseForStore(tdm,getTestRootPath(),true,jsonFactory,objMapper,fs);
    TimelineDomain resultDomain=tdm.getDomain("domain_1",UserGroupInformation.getLoginUser());
    assertNotNull(resultDomain);
    assertEquals(testDomain.getReaders(),resultDomain.getReaders());
    assertEquals(testDomain.getOwner(),resultDomain.getOwner());
    assertEquals(testDomain.getDescription(),resultDomain.getDescription());
  }
  private void writeBrokenFile(  Path logPath) throws IOException {
    FSDataOutputStream out=null;
    try {
      String broken="{ broken { [[]} broken";
      out=PluginStoreTestUtils.createLogFile(logPath,fs);
      out.write(broken.getBytes(Charset.forName("UTF-8")));
      out.close();
      out=null;
    }
  finally {
      if (out != null) {
        out.close();
      }
    }
  }
  private void writeEntitiesLeaveOpen(  TimelineEntities entities,  Path logPath) throws IOException {
    if (outStream == null) {
      outStream=PluginStoreTestUtils.createLogFile(logPath,fs);
      jsonGenerator=new JsonFactory().createGenerator((OutputStream)outStream);
      jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter("\n"));
    }
    for (    TimelineEntity entity : entities.getEntities()) {
      objMapper.writeValue(jsonGenerator,entity);
    }
    outStream.hflush();
  }
  private void writeDomainLeaveOpen(  TimelineDomain domain,  Path logPath) throws IOException {
    if (outStreamDomain == null) {
      outStreamDomain=PluginStoreTestUtils.createLogFile(logPath,fs);
    }
    JsonGenerator jsonGeneratorLocal=new JsonFactory().createGenerator((OutputStream)outStreamDomain);
    jsonGeneratorLocal.setPrettyPrinter(new MinimalPrettyPrinter("\n"));
    objMapper.writeValue(jsonGeneratorLocal,domain);
    outStreamDomain.hflush();
  }
  private Path getTestRootPath(){
    return fileContextTestHelper.getTestRootPath(fc);
  }
  private Path getTestRootPath(  String pathString){
    return fileContextTestHelper.getTestRootPath(fc,pathString);
  }
}
