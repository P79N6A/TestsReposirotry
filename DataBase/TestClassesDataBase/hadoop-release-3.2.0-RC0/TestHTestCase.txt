public class TestHTestCase extends HTestCase {
  @Test(expected=IllegalStateException.class) public void testDirNoAnnotation() throws Exception {
    TestDirHelper.getTestDir();
  }
  @Test(expected=IllegalStateException.class) public void testJettyNoAnnotation() throws Exception {
    TestJettyHelper.getJettyServer();
  }
  @Test(expected=IllegalStateException.class) public void testJettyNoAnnotation2() throws Exception {
    TestJettyHelper.getJettyURL();
  }
  @Test @TestDir public void testDirAnnotation() throws Exception {
    assertNotNull(TestDirHelper.getTestDir());
  }
  @Test public void waitFor(){
    long start=Time.now();
    long waited=waitFor(1000,new Predicate(){
      @Override public boolean evaluate() throws Exception {
        return true;
      }
    }
);
    long end=Time.now();
    assertEquals(waited,0,50);
    assertEquals(end - start - waited,0,50);
  }
  @Test public void waitForTimeOutRatio1(){
    setWaitForRatio(1);
    long start=Time.now();
    long waited=waitFor(200,new Predicate(){
      @Override public boolean evaluate() throws Exception {
        return false;
      }
    }
);
    long end=Time.now();
    assertEquals(waited,-1);
    assertEquals(end - start,200,50);
  }
  @Test public void waitForTimeOutRatio2(){
    setWaitForRatio(2);
    long start=Time.now();
    long waited=waitFor(200,new Predicate(){
      @Override public boolean evaluate() throws Exception {
        return false;
      }
    }
);
    long end=Time.now();
    assertEquals(waited,-1);
    assertEquals(end - start,200 * getWaitForRatio(),50 * getWaitForRatio());
  }
  @Test public void sleepRatio1(){
    setWaitForRatio(1);
    long start=Time.now();
    sleep(100);
    long end=Time.now();
    assertEquals(end - start,100,50);
  }
  @Test public void sleepRatio2(){
    setWaitForRatio(1);
    long start=Time.now();
    sleep(100);
    long end=Time.now();
    assertEquals(end - start,100 * getWaitForRatio(),50 * getWaitForRatio());
  }
public static class MyServlet extends HttpServlet {
    @Override protected void doGet(    HttpServletRequest req,    HttpServletResponse resp) throws ServletException, IOException {
      resp.getWriter().write("foo");
    }
  }
  @Test @TestJetty public void testJetty() throws Exception {
    ServletContextHandler context=new ServletContextHandler();
    context.setContextPath("/");
    context.addServlet(MyServlet.class,"/bar");
    Server server=TestJettyHelper.getJettyServer();
    server.setHandler(context);
    server.start();
    URL url=new URL(TestJettyHelper.getJettyURL(),"/bar");
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_OK);
    BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    assertEquals(reader.readLine(),"foo");
    reader.close();
  }
  @Test @TestException(exception=RuntimeException.class) public void testException0(){
    throw new RuntimeException("foo");
  }
  @Test @TestException(exception=RuntimeException.class,msgRegExp=".o.") public void testException1(){
    throw new RuntimeException("foo");
  }
}
