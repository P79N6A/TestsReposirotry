/** 
 * Router context.
 */
public class RouterContext {
  private Router router;
  private FileContext fileContext;
  private String nameserviceId;
  private String namenodeId;
  private int rpcPort;
  private int httpPort;
  private DFSClient client;
  private Configuration conf;
  private RouterClient adminClient;
  private URI fileSystemUri;
  public RouterContext(  Configuration conf,  String nsId,  String nnId){
    this.conf=conf;
    this.nameserviceId=nsId;
    this.namenodeId=nnId;
    this.router=new Router();
    this.router.init(conf);
  }
  public Router getRouter(){
    return this.router;
  }
  public String getNameserviceId(){
    return this.nameserviceId;
  }
  public String getNamenodeId(){
    return this.namenodeId;
  }
  public int getRpcPort(){
    return this.rpcPort;
  }
  public int getHttpPort(){
    return this.httpPort;
  }
  public FileContext getFileContext(){
    return this.fileContext;
  }
  public URI getFileSystemURI(){
    return fileSystemUri;
  }
  public String getHttpAddress(){
    InetSocketAddress httpAddress=router.getHttpServerAddress();
    return NetUtils.getHostPortString(httpAddress);
  }
  public void initRouter() throws URISyntaxException {
    InetSocketAddress rpcAddress=router.getRpcServerAddress();
    if (rpcAddress != null) {
      this.rpcPort=rpcAddress.getPort();
      this.fileSystemUri=URI.create("hdfs://" + NetUtils.getHostPortString(rpcAddress));
      DistributedFileSystem.setDefaultUri(conf,fileSystemUri);
      try {
        this.fileContext=FileContext.getFileContext(conf);
      }
 catch (      UnsupportedFileSystemException e) {
        this.fileContext=null;
      }
    }
    InetSocketAddress httpAddress=router.getHttpServerAddress();
    if (httpAddress != null) {
      this.httpPort=httpAddress.getPort();
    }
  }
  public FileSystem getFileSystem() throws IOException {
    return DistributedFileSystem.get(conf);
  }
  public DFSClient getClient(  UserGroupInformation user) throws IOException, URISyntaxException, InterruptedException {
    LOG.info("Connecting to router at {}",fileSystemUri);
    return user.doAs(new PrivilegedExceptionAction<DFSClient>(){
      @Override public DFSClient run() throws IOException {
        return new DFSClient(fileSystemUri,conf);
      }
    }
);
  }
  public RouterClient getAdminClient() throws IOException {
    if (adminClient == null) {
      InetSocketAddress routerSocket=router.getAdminServerAddress();
      LOG.info("Connecting to router admin at {}",routerSocket);
      adminClient=new RouterClient(routerSocket,conf);
    }
    return adminClient;
  }
  public void resetAdminClient(){
    adminClient=null;
  }
  public DFSClient getClient() throws IOException, URISyntaxException {
    if (client == null) {
      LOG.info("Connecting to router at {}",fileSystemUri);
      client=new DFSClient(fileSystemUri,conf);
    }
    return client;
  }
  public Configuration getConf(){
    return conf;
  }
}
