public class TestContentSummary {
  @Test public void testConstructorEmpty(){
    ContentSummary contentSummary=new ContentSummary.Builder().build();
    assertEquals("getLength",0,contentSummary.getLength());
    assertEquals("getFileCount",0,contentSummary.getFileCount());
    assertEquals("getDirectoryCount",0,contentSummary.getDirectoryCount());
    assertEquals("getQuota",-1,contentSummary.getQuota());
    assertEquals("getSpaceConsumed",0,contentSummary.getSpaceConsumed());
    assertEquals("getSpaceQuota",-1,contentSummary.getSpaceQuota());
  }
  @Test public void testConstructorWithQuota(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66666;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    assertEquals("getLength",length,contentSummary.getLength());
    assertEquals("getFileCount",fileCount,contentSummary.getFileCount());
    assertEquals("getDirectoryCount",directoryCount,contentSummary.getDirectoryCount());
    assertEquals("getQuota",quota,contentSummary.getQuota());
    assertEquals("getSpaceConsumed",spaceConsumed,contentSummary.getSpaceConsumed());
    assertEquals("getSpaceQuota",spaceQuota,contentSummary.getSpaceQuota());
  }
  @Test public void testConstructorNoQuota(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).spaceConsumed(length).build();
    assertEquals("getLength",length,contentSummary.getLength());
    assertEquals("getFileCount",fileCount,contentSummary.getFileCount());
    assertEquals("getDirectoryCount",directoryCount,contentSummary.getDirectoryCount());
    assertEquals("getQuota",-1,contentSummary.getQuota());
    assertEquals("getSpaceConsumed",length,contentSummary.getSpaceConsumed());
    assertEquals("getSpaceQuota",-1,contentSummary.getSpaceQuota());
  }
  @Test public void testWrite() throws IOException {
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66666;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    DataOutput out=mock(DataOutput.class);
    InOrder inOrder=inOrder(out);
    contentSummary.write(out);
    inOrder.verify(out).writeLong(length);
    inOrder.verify(out).writeLong(fileCount);
    inOrder.verify(out).writeLong(directoryCount);
    inOrder.verify(out).writeLong(quota);
    inOrder.verify(out).writeLong(spaceConsumed);
    inOrder.verify(out).writeLong(spaceQuota);
  }
  @Test public void testReadFields() throws IOException {
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66666;
    ContentSummary contentSummary=new ContentSummary.Builder().build();
    DataInput in=mock(DataInput.class);
    when(in.readLong()).thenReturn(length).thenReturn(fileCount).thenReturn(directoryCount).thenReturn(quota).thenReturn(spaceConsumed).thenReturn(spaceQuota);
    contentSummary.readFields(in);
    assertEquals("getLength",length,contentSummary.getLength());
    assertEquals("getFileCount",fileCount,contentSummary.getFileCount());
    assertEquals("getDirectoryCount",directoryCount,contentSummary.getDirectoryCount());
    assertEquals("getQuota",quota,contentSummary.getQuota());
    assertEquals("getSpaceConsumed",spaceConsumed,contentSummary.getSpaceConsumed());
    assertEquals("getSpaceQuota",spaceQuota,contentSummary.getSpaceQuota());
  }
  @Test public void testGetHeaderWithQuota(){
    String header="       QUOTA       REM_QUOTA     SPACE_QUOTA " + "REM_SPACE_QUOTA    DIR_COUNT   FILE_COUNT       CONTENT_SIZE ";
    assertEquals(header,ContentSummary.getHeader(true));
  }
  @Test public void testGetHeaderNoQuota(){
    String header="   DIR_COUNT   FILE_COUNT       CONTENT_SIZE ";
    assertEquals(header,ContentSummary.getHeader(false));
  }
  @Test public void testToStringWithQuota(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66665;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    String expected="       44444          -11111           66665           11110" + "        33333        22222              11111 ";
    assertEquals(expected,contentSummary.toString(true));
  }
  @Test public void testToStringNoQuota(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).build();
    String expected="        none             inf            none" + "             inf        33333        22222              11111 ";
    assertEquals(expected,contentSummary.toString(true));
  }
  @Test public void testToStringNoShowQuota(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66665;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    String expected="       33333        22222              11111 ";
    assertEquals(expected,contentSummary.toString(false));
  }
  @Test public void testToString(){
    long length=11111;
    long fileCount=22222;
    long directoryCount=33333;
    long quota=44444;
    long spaceConsumed=55555;
    long spaceQuota=66665;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    String expected="       44444          -11111           66665" + "           11110        33333        22222              11111 ";
    assertEquals(expected,contentSummary.toString());
  }
  @Test public void testToStringHumanWithQuota(){
    long length=Long.MAX_VALUE;
    long fileCount=222222222;
    long directoryCount=33333;
    long quota=222256578;
    long spaceConsumed=1073741825;
    long spaceQuota=1;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    String expected="     212.0 M            1023               1 " + "           -1 G       32.6 K      211.9 M              8.0 E ";
    assertEquals(expected,contentSummary.toString(true,true));
  }
  @Test public void testToStringHumanNoShowQuota(){
    long length=Long.MAX_VALUE;
    long fileCount=222222222;
    long directoryCount=33333;
    long quota=222256578;
    long spaceConsumed=55555;
    long spaceQuota=Long.MAX_VALUE;
    ContentSummary contentSummary=new ContentSummary.Builder().length(length).fileCount(fileCount).directoryCount(directoryCount).quota(quota).spaceConsumed(spaceConsumed).spaceQuota(spaceQuota).build();
    String expected="      32.6 K      211.9 M              8.0 E ";
    assertEquals(expected,contentSummary.toString(false,true));
  }
}
