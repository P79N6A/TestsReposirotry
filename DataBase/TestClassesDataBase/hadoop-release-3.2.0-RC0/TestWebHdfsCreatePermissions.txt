/** 
 * Test WebHDFS files/directories creation to make sure it follows same rules from dfs CLI for specifying files/directories permissions.
 */
public class TestWebHdfsCreatePermissions {
  static final Logger LOG=LoggerFactory.getLogger(TestWebHdfsCreatePermissions.class);
{
    DFSTestUtil.setNameNodeLogLevel(Level.ALL);
  }
  private MiniDFSCluster cluster;
  @Before public void initializeMiniDFSCluster() throws Exception {
    final Configuration conf=WebHdfsTestUtil.createConf();
    this.cluster=new MiniDFSCluster.Builder(conf).build();
  }
  @After public void tearDown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  private void testPermissions(  int expectedResponse,  String expectedPermission,  String path,  String... params) throws Exception {
    final String user=System.getProperty("user.name");
    final StringBuilder uri=new StringBuilder(cluster.getHttpUri(0));
    uri.append("/webhdfs/v1").append(path).append("?user.name=").append(user).append("&");
    for (    String param : params) {
      uri.append(param).append("&");
    }
    LOG.info(uri.toString());
    try {
      URL url=new URL(uri.toString());
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      conn.setRequestMethod("PUT");
      Assert.assertEquals(expectedResponse,conn.getResponseCode());
      NamenodeProtocols namenode=cluster.getNameNode().getRpcServer();
      FsPermission resultingPermission=namenode.getFileInfo(path).getPermission();
      Assert.assertEquals(expectedPermission,resultingPermission.toString());
    }
  finally {
      cluster.shutdown();
    }
  }
  @Test public void testCreateDirNoPermissions() throws Exception {
    testPermissions(HttpURLConnection.HTTP_OK,"rwxr-xr-x","/path","op=MKDIRS");
  }
  @Test public void testCreateDir777Permissions() throws Exception {
    testPermissions(HttpURLConnection.HTTP_OK,"rwxrwxrwx","/test777","op=MKDIRS&permission=777");
  }
  @Test public void testCreateFileNoPermissions() throws Exception {
    testPermissions(HttpURLConnection.HTTP_CREATED,"rw-r--r--","/test-file","op=CREATE");
  }
  @Test public void testCreateFile666Permissions() throws Exception {
    testPermissions(HttpURLConnection.HTTP_CREATED,"rw-rw-rw-","/test-file","op=CREATE&permission=666");
  }
}
