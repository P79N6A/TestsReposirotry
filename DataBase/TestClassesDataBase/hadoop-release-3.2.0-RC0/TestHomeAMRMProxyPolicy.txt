/** 
 * Simple test class for the  {@link HomeAMRMProxyPolicy}.
 */
public class TestHomeAMRMProxyPolicy extends BaseFederationPoliciesTest {
  private static final int NUM_SUBCLUSTERS=4;
  private static final String HOME_SC_NAME="sc2";
  private static final SubClusterId HOME_SC_ID=SubClusterId.newInstance(HOME_SC_NAME);
  @Before public void setUp() throws Exception {
    setPolicy(new HomeAMRMProxyPolicy());
    setPolicyInfo(mock(WeightedPolicyInfo.class));
    for (int i=0; i < NUM_SUBCLUSTERS; i++) {
      SubClusterIdInfo sc=new SubClusterIdInfo("sc" + i);
      SubClusterInfo sci=mock(SubClusterInfo.class);
      when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);
      when(sci.getSubClusterId()).thenReturn(sc.toId());
      getActiveSubclusters().put(sc.toId(),sci);
    }
    initializePolicyContext(getPolicy(),mock(WeightedPolicyInfo.class),getActiveSubclusters(),HOME_SC_NAME);
  }
  @Test public void testSplitAllocateRequest() throws YarnException {
    String[] hosts=new String[]{"host0","host1","host2","host3"};
    List<ResourceRequest> resourceRequests=createResourceRequests(hosts,2 * 1024,2,1,3,null,false);
    HomeAMRMProxyPolicy federationPolicy=(HomeAMRMProxyPolicy)getPolicy();
    Map<SubClusterId,List<ResourceRequest>> response=federationPolicy.splitResourceRequests(resourceRequests);
    assertEquals(1,response.size());
    assertNotNull(response.get(HOME_SC_ID));
    assertEquals(9,response.get(HOME_SC_ID).size());
  }
  @Test public void testHomeSubclusterNotActive() throws YarnException {
    initializePolicyContext(getPolicy(),mock(WeightedPolicyInfo.class),getActiveSubclusters(),"badsc");
    try {
      String[] hosts=new String[]{"host0","host1","host2","host3"};
      List<ResourceRequest> resourceRequests=createResourceRequests(hosts,2 * 1024,2,1,3,null,false);
      HomeAMRMProxyPolicy federationPolicy=(HomeAMRMProxyPolicy)getPolicy();
      federationPolicy.splitResourceRequests(resourceRequests);
      fail("It should fail when the home subcluster is not active");
    }
 catch (    FederationPolicyException e) {
      GenericTestUtils.assertExceptionContains("is not active",e);
    }
  }
}
