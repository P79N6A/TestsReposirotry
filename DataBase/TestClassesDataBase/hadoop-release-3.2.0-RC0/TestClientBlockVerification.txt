public class TestClientBlockVerification {
  static BlockReaderTestUtil util=null;
  static final Path TEST_FILE=new Path("/test.file");
  static final int FILE_SIZE_K=256;
  static LocatedBlock testBlock=null;
static {
    GenericTestUtils.setLogLevel(BlockReaderRemote.LOG,Level.ALL);
  }
  @BeforeClass public static void setupCluster() throws Exception {
    final int REPLICATION_FACTOR=1;
    util=new BlockReaderTestUtil(REPLICATION_FACTOR);
    util.writeFile(TEST_FILE,FILE_SIZE_K);
    List<LocatedBlock> blkList=util.getFileBlocks(TEST_FILE,FILE_SIZE_K);
    testBlock=blkList.get(0);
  }
  /** 
 * Verify that if we read an entire block, we send CHECKSUM_OK
 */
  @Test public void testBlockVerification() throws Exception {
    BlockReaderRemote reader=(BlockReaderRemote)spy(util.getBlockReader(testBlock,0,FILE_SIZE_K * 1024));
    util.readAndCheckEOS(reader,FILE_SIZE_K * 1024,true);
    verify(reader).sendReadResult(Status.CHECKSUM_OK);
    reader.close();
  }
  /** 
 * Test that if we do an incomplete read, we don't call CHECKSUM_OK
 */
  @Test public void testIncompleteRead() throws Exception {
    BlockReaderRemote reader=(BlockReaderRemote)spy(util.getBlockReader(testBlock,0,FILE_SIZE_K * 1024));
    util.readAndCheckEOS(reader,FILE_SIZE_K / 2 * 1024,false);
    verify(reader,never()).sendReadResult(Status.CHECKSUM_OK);
    reader.close();
  }
  /** 
 * Test that if we ask for a half block, and read it all, we *do send CHECKSUM_OK. The DN takes care of knowing whether it was the whole block or not.
 */
  @Test public void testCompletePartialRead() throws Exception {
    BlockReaderRemote reader=(BlockReaderRemote)spy(util.getBlockReader(testBlock,0,FILE_SIZE_K * 1024 / 2));
    util.readAndCheckEOS(reader,FILE_SIZE_K * 1024 / 2,true);
    verify(reader).sendReadResult(Status.CHECKSUM_OK);
    reader.close();
  }
  /** 
 * Test various unaligned reads to make sure that we properly account even when we don't start or end on a checksum boundary
 */
  @Test public void testUnalignedReads() throws Exception {
    int startOffsets[]=new int[]{0,3,129};
    int lengths[]=new int[]{30,300,512,513,1025};
    for (    int startOffset : startOffsets) {
      for (      int length : lengths) {
        DFSClient.LOG.info("Testing startOffset = " + startOffset + " and "+ " len="+ length);
        BlockReaderRemote reader=(BlockReaderRemote)spy(util.getBlockReader(testBlock,startOffset,length));
        util.readAndCheckEOS(reader,length,true);
        verify(reader).sendReadResult(Status.CHECKSUM_OK);
        reader.close();
      }
    }
  }
  @AfterClass public static void teardownCluster() throws Exception {
    util.shutdown();
  }
}
