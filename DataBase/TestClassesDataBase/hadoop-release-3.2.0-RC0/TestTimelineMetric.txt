public class TestTimelineMetric {
  @Test public void testTimelineMetricAggregation(){
    long ts=System.currentTimeMillis();
    TimelineMetric m1=getSingleValueMetric("MEGA_BYTES_MILLIS",TimelineMetricOperation.SUM,ts,10000L);
    TimelineMetric aggregatedMetric=TimelineMetric.aggregateTo(m1,null);
    assertEquals(10000L,aggregatedMetric.getSingleDataValue());
    TimelineMetric m2=getSingleValueMetric("MEGA_BYTES_MILLIS",TimelineMetricOperation.SUM,ts,20000L);
    aggregatedMetric=TimelineMetric.aggregateTo(m2,aggregatedMetric);
    assertEquals(30000L,aggregatedMetric.getSingleDataValue());
    Map<Object,Object> state=new HashMap<>();
    state.put(TimelineMetricOperation.PREV_METRIC_STATE_KEY,m2);
    TimelineMetric m2New=getSingleValueMetric("MEGA_BYTES_MILLIS",TimelineMetricOperation.SUM,ts,10000L);
    aggregatedMetric=TimelineMetric.aggregateTo(m2New,aggregatedMetric,state);
    assertEquals(20000L,aggregatedMetric.getSingleDataValue());
    TimelineMetric m3=getSingleValueMetric("TRANSFER_RATE",TimelineMetricOperation.MAX,ts,150L);
    TimelineMetric aggregatedMax=TimelineMetric.aggregateTo(m3,null);
    assertEquals(150L,aggregatedMax.getSingleDataValue());
    TimelineMetric m4=getSingleValueMetric("TRANSFER_RATE",TimelineMetricOperation.MAX,ts,170L);
    aggregatedMax=TimelineMetric.aggregateTo(m4,aggregatedMax);
    assertEquals(170L,aggregatedMax.getSingleDataValue());
    TimelineMetric m5=getSingleValueMetric("TRANSFER_RATE",TimelineMetricOperation.AVG,ts,150L);
    try {
      TimelineMetric.aggregateTo(m5,null);
      fail("Taking average among metrics is not supported! ");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  private static TimelineMetric getSingleValueMetric(  String id,  TimelineMetricOperation op,  long timestamp,  long value){
    TimelineMetric m=new TimelineMetric();
    m.setId(id);
    m.setType(Type.SINGLE_VALUE);
    m.setRealtimeAggregationOp(op);
    Map<Long,Number> metricValues=new HashMap<Long,Number>();
    metricValues.put(timestamp,value);
    m.setValues(metricValues);
    return m;
  }
  private static TimelineMetric getTimeSeriesMetric(  String id,  TimelineMetricOperation op,  Map<Long,Number> metricValues){
    TimelineMetric m=new TimelineMetric();
    m.setId(id);
    m.setType(Type.TIME_SERIES);
    m.setRealtimeAggregationOp(op);
    m.setValues(metricValues);
    return m;
  }
}
