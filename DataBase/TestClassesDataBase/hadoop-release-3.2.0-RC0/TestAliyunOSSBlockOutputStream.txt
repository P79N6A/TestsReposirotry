/** 
 * Tests regular and multi-part upload functionality for AliyunOSSBlockOutputStream.
 */
public class TestAliyunOSSBlockOutputStream {
  private FileSystem fs;
  private static String testRootPath=AliyunOSSTestUtils.generateUniqueTestPath();
  @Rule public Timeout testTimeout=new Timeout(30 * 60 * 1000);
  @Before public void setUp() throws Exception {
    Configuration conf=new Configuration();
    conf.setLong(Constants.MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,5 * 1024 * 1024);
    conf.setInt(Constants.MULTIPART_UPLOAD_PART_SIZE_KEY,1024 * 1024);
    conf.setInt(IO_CHUNK_BUFFER_SIZE,conf.getInt(Constants.MULTIPART_UPLOAD_PART_SIZE_KEY,0));
    conf.setInt(Constants.UPLOAD_ACTIVE_BLOCKS_KEY,20);
    fs=AliyunOSSTestUtils.createTestFileSystem(conf);
  }
  @After public void tearDown() throws Exception {
    if (fs != null) {
      fs.delete(new Path(testRootPath),true);
    }
  }
  private Path getTestPath(){
    return new Path(testRootPath + "/test-aliyun-oss");
  }
  @Test public void testZeroByteUpload() throws IOException {
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),0);
  }
  @Test public void testRegularUpload() throws IOException {
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),1024 * 1024 - 1);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),1024 * 1024);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),1024 * 1024 + 1);
  }
  @Test public void testMultiPartUpload() throws IOException {
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),6 * 1024 * 1024 - 1);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),6 * 1024 * 1024);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),6 * 1024 * 1024 + 1);
  }
  @Test public void testMultiPartUploadConcurrent() throws IOException {
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),50 * 1024 * 1024 - 1);
  }
  @Test public void testHugeUpload() throws IOException {
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),MULTIPART_UPLOAD_PART_SIZE_DEFAULT - 1);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),MULTIPART_UPLOAD_PART_SIZE_DEFAULT);
    ContractTestUtils.createAndVerifyFile(fs,getTestPath(),MULTIPART_UPLOAD_PART_SIZE_DEFAULT + 1);
  }
  @Test public void testMultiPartUploadLimit() throws IOException {
    long partSize1=AliyunOSSUtils.calculatePartSize(10 * 1024,100 * 1024);
    assert (10 * 1024 / partSize1 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);
    long partSize2=AliyunOSSUtils.calculatePartSize(200 * 1024,100 * 1024);
    assert (200 * 1024 / partSize2 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);
    long partSize3=AliyunOSSUtils.calculatePartSize(10000 * 100 * 1024,100 * 1024);
    assert (10000 * 100 * 1024 / partSize3 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);
    long partSize4=AliyunOSSUtils.calculatePartSize(10001 * 100 * 1024,100 * 1024);
    assert (10001 * 100 * 1024 / partSize4 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);
  }
}
