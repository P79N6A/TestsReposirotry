/** 
 * Tests of the S3A FileSystem which is closed; just make sure that that basic file Ops fail meaningfully.
 */
public class ITestS3AClosedFS extends AbstractS3ATestBase {
  private Path root=new Path("/");
  @Override public void setup() throws Exception {
    super.setup();
    root=getFileSystem().makeQualified(new Path("/"));
    getFileSystem().close();
  }
  @Override public void teardown(){
  }
  @Test public void testClosedGetFileStatus() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().getFileStatus(root));
  }
  @Test public void testClosedListStatus() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().listStatus(root));
  }
  @Test public void testClosedListFile() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().listFiles(root,false));
  }
  @Test public void testClosedListLocatedStatus() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().listLocatedStatus(root));
  }
  @Test public void testClosedCreate() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().create(path("to-create")).close());
  }
  @Test public void testClosedDelete() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().delete(path("to-delete"),false));
  }
  @Test public void testClosedOpen() throws Exception {
    intercept(IOException.class,E_FS_CLOSED,() -> getFileSystem().open(path("to-open")));
  }
}
