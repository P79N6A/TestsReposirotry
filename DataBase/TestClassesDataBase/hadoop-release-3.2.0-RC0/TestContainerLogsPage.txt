public class TestContainerLogsPage {
  private NodeHealthCheckerService createNodeHealthCheckerService(  Configuration conf){
    NodeHealthScriptRunner scriptRunner=NodeManager.getNodeHealthScriptRunner(conf);
    LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
    return new NodeHealthCheckerService(scriptRunner,dirsHandler);
  }
  @Test(timeout=30000) public void testContainerLogDirs() throws IOException, YarnException {
    File absLogDir=new File("target",TestNMWebServer.class.getSimpleName() + "LogDir").getAbsoluteFile();
    String logdirwithFile=absLogDir.toURI().toString();
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_LOG_DIRS,logdirwithFile);
    NodeHealthCheckerService healthChecker=createNodeHealthCheckerService(conf);
    healthChecker.init(conf);
    LocalDirsHandlerService dirsHandler=healthChecker.getDiskHandler();
    NMContext nmContext=new NodeManager.NMContext(null,null,dirsHandler,new ApplicationACLsManager(conf),new NMNullStateStoreService(),false,conf);
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(conf);
    String user="nobody";
    long clusterTimeStamp=1234;
    ApplicationId appId=BuilderUtils.newApplicationId(recordFactory,clusterTimeStamp,1);
    Application app=mock(Application.class);
    when(app.getUser()).thenReturn(user);
    when(app.getAppId()).thenReturn(appId);
    ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
    ContainerId container1=BuilderUtils.newContainerId(recordFactory,appId,appAttemptId,0);
    nmContext.getApplications().put(appId,app);
    MockContainer container=new MockContainer(appAttemptId,new AsyncDispatcher(),conf,user,appId,1);
    container.setState(ContainerState.RUNNING);
    nmContext.getContainers().put(container1,container);
    List<File> files=null;
    files=ContainerLogsUtils.getContainerLogDirs(container1,user,nmContext);
    Assert.assertTrue(!(files.get(0).toString().contains("file:")));
    nmContext.getContainers().remove(container1);
    Assert.assertNull(nmContext.getContainers().get(container1));
    files=ContainerLogsUtils.getContainerLogDirs(container1,user,nmContext);
    Assert.assertTrue(!(files.get(0).toString().contains("file:")));
    LocalDirsHandlerService dirsHandlerForFullDisk=spy(dirsHandler);
    when(dirsHandlerForFullDisk.getLogDirs()).thenReturn(new ArrayList<String>());
    when(dirsHandlerForFullDisk.getLogDirsForRead()).thenReturn(Arrays.asList(new String[]{absLogDir.getAbsolutePath()}));
    nmContext=new NodeManager.NMContext(null,null,dirsHandlerForFullDisk,new ApplicationACLsManager(conf),new NMNullStateStoreService(),false,conf);
    nmContext.getApplications().put(appId,app);
    container.setState(ContainerState.RUNNING);
    nmContext.getContainers().put(container1,container);
    List<File> dirs=ContainerLogsUtils.getContainerLogDirs(container1,user,nmContext);
    File containerLogDir=new File(absLogDir,appId + "/" + container1);
    Assert.assertTrue(dirs.contains(containerLogDir));
  }
  @Test(timeout=30000) public void testContainerLogFile() throws IOException, YarnException {
    File absLogDir=new File("target",TestNMWebServer.class.getSimpleName() + "LogDir").getAbsoluteFile();
    String logdirwithFile=absLogDir.toURI().toString();
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_LOG_DIRS,logdirwithFile);
    conf.setFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE,0.0f);
    LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
    dirsHandler.init(conf);
    NMContext nmContext=new NodeManager.NMContext(null,null,dirsHandler,new ApplicationACLsManager(conf),new NMNullStateStoreService(),false,conf);
    String user="nobody";
    long clusterTimeStamp=1234;
    ApplicationId appId=BuilderUtils.newApplicationId(clusterTimeStamp,1);
    Application app=mock(Application.class);
    when(app.getUser()).thenReturn(user);
    when(app.getAppId()).thenReturn(appId);
    ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
    ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
    nmContext.getApplications().put(appId,app);
    MockContainer container=new MockContainer(appAttemptId,new AsyncDispatcher(),conf,user,appId,1);
    container.setState(ContainerState.RUNNING);
    nmContext.getContainers().put(containerId,container);
    File containerLogDir=new File(absLogDir,ContainerLaunch.getRelativeContainerLogDir(appId.toString(),containerId.toString()));
    containerLogDir.mkdirs();
    String fileName="fileName";
    File containerLogFile=new File(containerLogDir,fileName);
    containerLogFile.createNewFile();
    File file=ContainerLogsUtils.getContainerLogFile(containerId,fileName,user,nmContext);
    Assert.assertEquals(containerLogFile.toURI().toString(),file.toURI().toString());
    FileUtil.fullyDelete(absLogDir);
  }
  @Test(timeout=10000) public void testContainerLogPageAccess() throws IOException {
    assumeTrue(NativeIO.isAvailable());
    String user="randomUser" + System.currentTimeMillis();
    File absLogDir=null, appDir=null, containerDir=null, syslog=null;
    try {
      absLogDir=new File("target",TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile();
      absLogDir.mkdir();
      Configuration conf=new Configuration();
      conf.set(YarnConfiguration.NM_LOG_DIRS,absLogDir.toURI().toString());
      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
      UserGroupInformation.setConfiguration(conf);
      NodeHealthCheckerService healthChecker=createNodeHealthCheckerService(conf);
      healthChecker.init(conf);
      LocalDirsHandlerService dirsHandler=healthChecker.getDiskHandler();
      RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(conf);
      long clusterTimeStamp=1234;
      ApplicationId appId=BuilderUtils.newApplicationId(recordFactory,clusterTimeStamp,1);
      Application app=mock(Application.class);
      when(app.getAppId()).thenReturn(appId);
      when(app.getUser()).thenReturn(user);
      ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
      ContainerId container1=BuilderUtils.newContainerId(recordFactory,appId,appAttemptId,0);
      appDir=new File(absLogDir,appId.toString());
      appDir.mkdir();
      containerDir=new File(appDir,container1.toString());
      containerDir.mkdir();
      syslog=new File(containerDir,"syslog");
      syslog.createNewFile();
      BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(syslog));
      out.write("Log file Content".getBytes());
      out.close();
      Context context=mock(Context.class);
      ConcurrentMap<ApplicationId,Application> appMap=new ConcurrentHashMap<ApplicationId,Application>();
      appMap.put(appId,app);
      when(context.getApplications()).thenReturn(appMap);
      ConcurrentHashMap<ContainerId,Container> containers=new ConcurrentHashMap<ContainerId,Container>();
      when(context.getContainers()).thenReturn(containers);
      when(context.getLocalDirsHandler()).thenReturn(dirsHandler);
      when(context.getConf()).thenReturn(conf);
      MockContainer container=new MockContainer(appAttemptId,new AsyncDispatcher(),conf,user,appId,1);
      container.setState(ContainerState.RUNNING);
      context.getContainers().put(container1,container);
      ContainersLogsBlock cLogsBlock=new ContainersLogsBlock(context);
      Map<String,String> params=new HashMap<String,String>();
      params.put(YarnWebParams.CONTAINER_ID,container1.toString());
      params.put(YarnWebParams.CONTAINER_LOG_TYPE,"syslog");
      Injector injector=WebAppTests.testPage(ContainerLogsPage.class,ContainersLogsBlock.class,cLogsBlock,params,(Module[])null);
      PrintWriter spyPw=WebAppTests.getPrintWriter(injector);
      verify(spyPw).write("Exception reading log file. Application submitted by '" + user + "' doesn't own requested log file : syslog");
    }
  finally {
      if (syslog != null) {
        syslog.delete();
      }
      if (containerDir != null) {
        containerDir.delete();
      }
      if (appDir != null) {
        appDir.delete();
      }
      if (absLogDir != null) {
        absLogDir.delete();
      }
    }
  }
  @Test public void testLogDirWithDriveLetter() throws Exception {
    LocalDirsHandlerService localDirs=mock(LocalDirsHandlerService.class);
    List<String> logDirs=new ArrayList<String>();
    logDirs.add("F:/nmlogs");
    when(localDirs.getLogDirsForRead()).thenReturn(logDirs);
    ApplicationIdPBImpl appId=mock(ApplicationIdPBImpl.class);
    when(appId.toString()).thenReturn("app_id_1");
    ApplicationAttemptIdPBImpl appAttemptId=mock(ApplicationAttemptIdPBImpl.class);
    when(appAttemptId.getApplicationId()).thenReturn(appId);
    ContainerId containerId=mock(ContainerIdPBImpl.class);
    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);
    List<File> logDirFiles=ContainerLogsUtils.getContainerLogDirs(containerId,localDirs);
    Assert.assertTrue("logDir lost drive letter " + logDirFiles.get(0),logDirFiles.get(0).toString().indexOf("F:" + File.separator + "nmlogs") > -1);
  }
  @Test public void testLogFileWithDriveLetter() throws Exception {
    ContainerImpl container=mock(ContainerImpl.class);
    ApplicationIdPBImpl appId=mock(ApplicationIdPBImpl.class);
    when(appId.toString()).thenReturn("appId");
    Application app=mock(Application.class);
    when(app.getAppId()).thenReturn(appId);
    ApplicationAttemptIdPBImpl appAttemptId=mock(ApplicationAttemptIdPBImpl.class);
    when(appAttemptId.getApplicationId()).thenReturn(appId);
    ConcurrentMap<ApplicationId,Application> applications=new ConcurrentHashMap<ApplicationId,Application>();
    applications.put(appId,app);
    ContainerId containerId=mock(ContainerIdPBImpl.class);
    when(containerId.toString()).thenReturn("containerId");
    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);
    ConcurrentMap<ContainerId,Container> containers=new ConcurrentHashMap<ContainerId,Container>();
    containers.put(containerId,container);
    LocalDirsHandlerService localDirs=mock(LocalDirsHandlerService.class);
    when(localDirs.getLogPathToRead("appId" + Path.SEPARATOR + "containerId"+ Path.SEPARATOR+ "fileName")).thenReturn(new Path("F:/nmlogs/appId/containerId/fileName"));
    NMContext context=mock(NMContext.class);
    when(context.getLocalDirsHandler()).thenReturn(localDirs);
    when(context.getApplications()).thenReturn(applications);
    when(context.getContainers()).thenReturn(containers);
    File logFile=ContainerLogsUtils.getContainerLogFile(containerId,"fileName",null,context);
    Assert.assertTrue("logFile lost drive letter " + logFile,logFile.toString().indexOf("F:" + File.separator + "nmlogs") > -1);
  }
}
