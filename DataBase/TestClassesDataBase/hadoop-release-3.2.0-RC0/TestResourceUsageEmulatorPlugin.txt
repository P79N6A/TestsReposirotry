/** 
 * A  {@link ResourceUsageEmulatorPlugin} implementation for testing purpose.It essentially creates a file named 'test' in the test directory.
 */
static class TestResourceUsageEmulatorPlugin implements ResourceUsageEmulatorPlugin {
  static final Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp"));
  static final Path tempDir=new Path(rootTempDir,"TestResourceUsageEmulatorPlugin");
  static final String DEFAULT_IDENTIFIER="test";
  private Path touchPath=null;
  private FileSystem fs=null;
  @Override public void emulate() throws IOException, InterruptedException {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
    }
    try {
      fs.delete(touchPath,false);
      fs.create(touchPath).close();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  protected String getIdentifier(){
    return DEFAULT_IDENTIFIER;
  }
  private static Path getFilePath(  String id){
    return new Path(tempDir,id);
  }
  private static Path getInitFilePath(  String id){
    return new Path(tempDir,id + ".init");
  }
  @Override public void initialize(  Configuration conf,  ResourceUsageMetrics metrics,  ResourceCalculatorPlugin monitor,  Progressive progress){
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
    }
    try {
      fs=FileSystem.getLocal(conf);
      Path initPath=getInitFilePath(getIdentifier());
      fs.delete(initPath,false);
      fs.create(initPath).close();
      touchPath=getFilePath(getIdentifier());
      fs.delete(touchPath,false);
    }
 catch (    Exception e) {
    }
 finally {
      if (fs != null) {
        try {
          fs.deleteOnExit(tempDir);
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
  static long testInitialization(  String id,  Configuration conf) throws IOException {
    Path testPath=getInitFilePath(id);
    FileSystem fs=FileSystem.getLocal(conf);
    return fs.exists(testPath) ? fs.getFileStatus(testPath).getModificationTime() : 0;
  }
  static long testEmulation(  String id,  Configuration conf) throws IOException {
    Path testPath=getFilePath(id);
    FileSystem fs=FileSystem.getLocal(conf);
    return fs.exists(testPath) ? fs.getFileStatus(testPath).getModificationTime() : 0;
  }
  @Override public float getProgress(){
    try {
      return fs.exists(touchPath) ? 1.0f : 0f;
    }
 catch (    IOException ioe) {
    }
    return 0f;
  }
}
