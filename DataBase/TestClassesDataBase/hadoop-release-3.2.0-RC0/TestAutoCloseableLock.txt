/** 
 * A test class for AutoCloseableLock.
 */
public class TestAutoCloseableLock {
  /** 
 * Test the basic lock and unlock operation.
 */
  @Test public void testLockAcquireRelease(){
    AutoCloseableLock lock=new AutoCloseableLock();
    AutoCloseableLock newlock=lock.acquire();
    assertEquals(newlock,lock);
    assertTrue(lock.isLocked());
    lock.release();
    assertFalse(lock.isLocked());
  }
  /** 
 * Test when lock is acquired, no other thread can lock it.
 * @throws Exception
 */
  @Test public void testMultipleThread() throws Exception {
    AutoCloseableLock lock=new AutoCloseableLock();
    lock.acquire();
    assertTrue(lock.isLocked());
    Thread competingThread=new Thread(){
      @Override public void run(){
        assertTrue(lock.isLocked());
        assertFalse(lock.tryLock());
      }
    }
;
    competingThread.start();
    competingThread.join();
    assertTrue(lock.isLocked());
    lock.release();
    assertFalse(lock.isLocked());
  }
  /** 
 * Test the correctness under try-with-resource syntax.
 * @throws Exception
 */
  @Test public void testTryWithResourceSyntax() throws Exception {
    AutoCloseableLock lock=new AutoCloseableLock();
    try (AutoCloseableLock localLock=lock.acquire()){
      assertEquals(localLock,lock);
      assertTrue(lock.isLocked());
      Thread competingThread=new Thread(){
        @Override public void run(){
          assertTrue(lock.isLocked());
          assertFalse(lock.tryLock());
        }
      }
;
      competingThread.start();
      competingThread.join();
      assertTrue(localLock.isLocked());
    }
     assertFalse(lock.isLocked());
  }
}
