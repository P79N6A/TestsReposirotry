public class TestClientRMProxy {
  @Test public void testGetRMDelegationTokenService(){
    String defaultRMAddress=YarnConfiguration.DEFAULT_RM_ADDRESS;
    YarnConfiguration conf=new YarnConfiguration();
    Text tokenService=ClientRMProxy.getRMDelegationTokenService(conf);
    String[] services=tokenService.toString().split(",");
    assertEquals(1,services.length);
    for (    String service : services) {
      assertTrue("Incorrect token service name",service.contains(defaultRMAddress));
    }
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_IDS,"rm1,rm2");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm1"),"0.0.0.0");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm2"),"0.0.0.0");
    tokenService=ClientRMProxy.getRMDelegationTokenService(conf);
    services=tokenService.toString().split(",");
    assertEquals(2,services.length);
    for (    String service : services) {
      assertTrue("Incorrect token service name",service.contains(defaultRMAddress));
    }
  }
  @Test public void testGetAMRMTokenService(){
    String defaultRMAddress=YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS;
    YarnConfiguration conf=new YarnConfiguration();
    Text tokenService=ClientRMProxy.getAMRMTokenService(conf);
    String[] services=tokenService.toString().split(",");
    assertEquals(1,services.length);
    for (    String service : services) {
      assertTrue("Incorrect token service name",service.contains(defaultRMAddress));
    }
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_IDS,"rm1,rm2");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm1"),"0.0.0.0");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm2"),"0.0.0.0");
    tokenService=ClientRMProxy.getAMRMTokenService(conf);
    services=tokenService.toString().split(",");
    assertEquals(2,services.length);
    for (    String service : services) {
      assertTrue("Incorrect token service name",service.contains(defaultRMAddress));
    }
  }
  /** 
 * Verify that the RPC layer is always created using the correct UGI from the RMProxy.  It should always use the UGI from creation in subsequent uses, even outside of a doAs.
 * @throws Exception an Exception occurred
 */
  @Test public void testProxyUserCorrectUGI() throws Exception {
    final YarnConfiguration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
    conf.set(YarnConfiguration.RM_HA_IDS,"rm1,rm2");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm1"),"0.0.0.0");
    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,"rm2"),"0.0.0.0");
    conf.setLong(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS,2);
    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,2);
    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,2);
    conf.setClass(YarnConfiguration.IPC_RPC_IMPL,UGICapturingHadoopYarnProtoRPC.class,YarnRPC.class);
    UserGroupInformation realUser=UserGroupInformation.getCurrentUser();
    UserGroupInformation proxyUser=UserGroupInformation.createProxyUserForTesting("proxy",realUser,new String[]{"group1"});
    ApplicationClientProtocol rmProxy=proxyUser.doAs(new PrivilegedExceptionAction<ApplicationClientProtocol>(){
      @Override public ApplicationClientProtocol run() throws Exception {
        return ClientRMProxy.createRMProxy(conf,ApplicationClientProtocol.class);
      }
    }
);
    assertUGI();
    GetNewApplicationRequest request=Records.newRecord(GetNewApplicationRequest.class);
    UGICapturingHadoopYarnProtoRPC.lastCurrentUser=null;
    try {
      rmProxy.getNewApplication(request);
    }
 catch (    IOException ioe) {
    }
    assertUGI();
  }
  private void assertUGI() throws IOException {
    UserGroupInformation lastCurrentUser=UGICapturingHadoopYarnProtoRPC.lastCurrentUser;
    assertNotNull(lastCurrentUser);
    assertEquals("proxy",lastCurrentUser.getShortUserName());
    Assert.assertEquals(UserGroupInformation.AuthenticationMethod.PROXY,lastCurrentUser.getAuthenticationMethod());
    assertEquals(UserGroupInformation.getCurrentUser(),lastCurrentUser.getRealUser());
    UGICapturingHadoopYarnProtoRPC.lastCurrentUser=null;
  }
  /** 
 * Subclass of  {@link HadoopYarnProtoRPC} which captures the current UGI ina static variable.  Used by  {@link #testProxyUserCorrectUGI()}.
 */
public static class UGICapturingHadoopYarnProtoRPC extends HadoopYarnProtoRPC {
    static UserGroupInformation lastCurrentUser=null;
    @Override public Object getProxy(    Class protocol,    InetSocketAddress addr,    Configuration conf){
      UserGroupInformation currentUser=null;
      try {
        currentUser=UserGroupInformation.getCurrentUser();
      }
 catch (      IOException ioe) {
        Assert.fail("Unable to get current user\n" + StringUtils.stringifyException(ioe));
      }
      lastCurrentUser=currentUser;
      return super.getProxy(protocol,addr,conf);
    }
  }
}
