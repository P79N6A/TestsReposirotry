public class TestSleepJob extends CommonJobTest {
  public static final Logger LOG=getLogger(Gridmix.class);
static {
    GenericTestUtils.setLogLevel(getLogger("org.apache.hadoop.mapred.gridmix"),Level.DEBUG);
  }
  static GridmixJobSubmissionPolicy policy=GridmixJobSubmissionPolicy.REPLAY;
  @BeforeClass public static void init() throws IOException {
    GridmixTestUtils.initCluster(TestSleepJob.class);
  }
  @AfterClass public static void shutDown() throws IOException {
    GridmixTestUtils.shutdownCluster();
  }
  @Test public void testMapTasksOnlySleepJobs() throws Exception {
    Configuration configuration=GridmixTestUtils.mrvl.getConfig();
    DebugJobProducer jobProducer=new DebugJobProducer(5,configuration);
    configuration.setBoolean(SleepJob.SLEEPJOB_MAPTASK_ONLY,true);
    UserGroupInformation ugi=UserGroupInformation.getLoginUser();
    JobStory story;
    int seq=1;
    while ((story=jobProducer.getNextJob()) != null) {
      GridmixJob gridmixJob=JobCreator.SLEEPJOB.createGridmixJob(configuration,0,story,new Path("ignored"),ugi,seq++);
      gridmixJob.buildSplits(null);
      Job job=gridmixJob.call();
      assertEquals(0,job.getNumReduceTasks());
    }
    jobProducer.close();
    assertEquals(6,seq);
  }
  @Test public void testRandomLocation() throws Exception {
    UserGroupInformation ugi=UserGroupInformation.getLoginUser();
    testRandomLocation(1,10,ugi);
    testRandomLocation(2,10,ugi);
  }
  @Test public void testSerialSubmit() throws Exception {
    policy=GridmixJobSubmissionPolicy.SERIAL;
    LOG.info("Serial started at " + System.currentTimeMillis());
    doSubmission(JobCreator.SLEEPJOB.name(),false);
    LOG.info("Serial ended at " + System.currentTimeMillis());
  }
  @Test public void testReplaySubmit() throws Exception {
    policy=GridmixJobSubmissionPolicy.REPLAY;
    LOG.info(" Replay started at " + System.currentTimeMillis());
    doSubmission(JobCreator.SLEEPJOB.name(),false);
    LOG.info(" Replay ended at " + System.currentTimeMillis());
  }
  @Test public void testStressSubmit() throws Exception {
    policy=GridmixJobSubmissionPolicy.STRESS;
    LOG.info(" Replay started at " + System.currentTimeMillis());
    doSubmission(JobCreator.SLEEPJOB.name(),false);
    LOG.info(" Replay ended at " + System.currentTimeMillis());
  }
  private void testRandomLocation(  int locations,  int njobs,  UserGroupInformation ugi) throws Exception {
    Configuration configuration=new Configuration();
    DebugJobProducer jobProducer=new DebugJobProducer(njobs,configuration);
    Configuration jconf=GridmixTestUtils.mrvl.getConfig();
    jconf.setInt(JobCreator.SLEEPJOB_RANDOM_LOCATIONS,locations);
    JobStory story;
    int seq=1;
    while ((story=jobProducer.getNextJob()) != null) {
      GridmixJob gridmixJob=JobCreator.SLEEPJOB.createGridmixJob(jconf,0,story,new Path("ignored"),ugi,seq++);
      gridmixJob.buildSplits(null);
      List<InputSplit> splits=new SleepJob.SleepInputFormat().getSplits(gridmixJob.getJob());
      for (      InputSplit split : splits) {
        assertEquals(locations,split.getLocations().length);
      }
    }
    jobProducer.close();
  }
}
