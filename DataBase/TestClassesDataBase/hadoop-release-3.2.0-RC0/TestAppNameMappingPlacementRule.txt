public class TestAppNameMappingPlacementRule {
  private static final String APP_NAME="DistributedShell";
  private YarnConfiguration conf=new YarnConfiguration();
  @Before public void setup(){
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
  }
  private void verifyQueueMapping(  QueueMappingEntity queueMapping,  String user,  String expectedQueue) throws YarnException {
    verifyQueueMapping(queueMapping,user,queueMapping.getQueue(),expectedQueue,false);
  }
  private void verifyQueueMapping(  QueueMappingEntity queueMapping,  String user,  String inputQueue,  String expectedQueue,  boolean overwrite) throws YarnException {
    AppNameMappingPlacementRule rule=new AppNameMappingPlacementRule(overwrite,Arrays.asList(queueMapping));
    ApplicationSubmissionContext asc=Records.newRecord(ApplicationSubmissionContext.class);
    if (inputQueue.equals("%application")) {
      inputQueue=APP_NAME;
    }
    asc.setQueue(inputQueue);
    String appName=queueMapping.getSource();
    if (appName.equals("%application")) {
      appName=APP_NAME;
    }
    asc.setApplicationName(appName);
    ApplicationPlacementContext ctx=rule.getPlacementForApp(asc,user);
    Assert.assertEquals(expectedQueue,ctx != null ? ctx.getQueue() : inputQueue);
  }
  @Test public void testMapping() throws YarnException {
    verifyQueueMapping(new QueueMappingEntity(APP_NAME,"q1"),"user_1","q1");
    verifyQueueMapping(new QueueMappingEntity("%application","q2"),"user_1","q2");
    verifyQueueMapping(new QueueMappingEntity("%application","%application"),"user_1",APP_NAME);
    verifyQueueMapping(new QueueMappingEntity(APP_NAME,"q1"),"1","q2","q1",true);
    verifyQueueMapping(new QueueMappingEntity(APP_NAME,"q1"),"1","q2","q2",false);
  }
}
