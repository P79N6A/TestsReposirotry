public class TestAddOverReplicatedStripedBlocks {
  private MiniDFSCluster cluster;
  private DistributedFileSystem fs;
  private final Path dirPath=new Path("/striped");
  private Path filePath=new Path(dirPath,"file");
  private final ErasureCodingPolicy ecPolicy=StripedFileTestUtil.getDefaultECPolicy();
  private final short dataBlocks=(short)ecPolicy.getNumDataUnits();
  private final short parityBlocks=(short)ecPolicy.getNumParityUnits();
  private final short groupSize=(short)(dataBlocks + parityBlocks);
  private final int cellSize=ecPolicy.getCellSize();
  private final int stripesPerBlock=4;
  private final int blockSize=stripesPerBlock * cellSize;
  private final int numDNs=groupSize + 3;
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @Before public void setup() throws IOException {
    Configuration conf=new Configuration();
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,0);
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY,1);
    conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
    SimulatedFSDataset.setFactory(conf);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    fs.enableErasureCodingPolicy(ecPolicy.getName());
    fs.mkdirs(dirPath);
    fs.getClient().setErasureCodingPolicy(dirPath.toString(),ecPolicy.getName());
  }
  @After public void tearDown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testProcessOverReplicatedStripedBlock() throws Exception {
    long fileLen=dataBlocks * blockSize;
    DFSTestUtil.createStripedFile(cluster,filePath,null,1,stripesPerBlock,false);
    LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
    long gs=bg.getBlock().getGenerationStamp();
    String bpid=bg.getBlock().getBlockPoolId();
    long groupId=bg.getBlock().getBlockId();
    Block blk=new Block(groupId,blockSize,gs);
    for (int i=0; i < groupSize; i++) {
      blk.setBlockId(groupId + i);
      cluster.injectBlocks(i,Arrays.asList(blk),bpid);
    }
    cluster.triggerBlockReports();
    blk.setBlockId(groupId);
    cluster.injectBlocks(numDNs - 3,Arrays.asList(blk),bpid);
    cluster.injectBlocks(numDNs - 2,Arrays.asList(blk),bpid);
    blk.setBlockId(groupId + dataBlocks);
    cluster.injectBlocks(numDNs - 1,Arrays.asList(blk),bpid);
    cluster.triggerBlockReports();
    cluster.triggerHeartbeats();
    cluster.triggerHeartbeats();
    cluster.triggerBlockReports();
    lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    StripedFileTestUtil.verifyLocatedStripedBlocks(lbs,groupSize);
  }
  @Test public void testProcessOverReplicatedSBSmallerThanFullBlocks() throws Exception {
    int fileLen=cellSize * (dataBlocks - 1);
    byte[] content=new byte[fileLen];
    DFSTestUtil.writeFile(fs,filePath,new String(content));
    LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
    long gs=bg.getBlock().getGenerationStamp();
    String bpid=bg.getBlock().getBlockPoolId();
    long groupId=bg.getBlock().getBlockId();
    Block blk=new Block(groupId,blockSize,gs);
    cluster.triggerBlockReports();
    List<DatanodeInfo> infos=Arrays.asList(bg.getLocations());
    blk.setBlockId(groupId);
    List<DataNode> dataNodeList=cluster.getDataNodes();
    for (int i=0; i < numDNs; i++) {
      if (!infos.contains(dataNodeList.get(i).getDatanodeId())) {
        cluster.injectBlocks(i,Arrays.asList(blk),bpid);
        System.out.println("XXX: inject block into datanode " + i);
      }
    }
    cluster.triggerBlockReports();
    cluster.triggerHeartbeats();
    cluster.triggerHeartbeats();
    cluster.triggerBlockReports();
    lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    StripedFileTestUtil.verifyLocatedStripedBlocks(lbs,groupSize - 1);
  }
  @Test public void testProcessOverReplicatedAndCorruptStripedBlock() throws Exception {
    long fileLen=dataBlocks * blockSize;
    DFSTestUtil.createStripedFile(cluster,filePath,null,1,stripesPerBlock,false);
    LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
    long gs=bg.getBlock().getGenerationStamp();
    String bpid=bg.getBlock().getBlockPoolId();
    long groupId=bg.getBlock().getBlockId();
    Block blk=new Block(groupId,blockSize,gs);
    BlockInfoStriped blockInfo=new BlockInfoStriped(blk,StripedFileTestUtil.getDefaultECPolicy());
    for (int i=0; i < groupSize; i++) {
      blk.setBlockId(groupId + i);
      cluster.injectBlocks(i,Arrays.asList(blk),bpid);
    }
    cluster.triggerBlockReports();
    BlockManager bm=cluster.getNamesystem().getBlockManager();
    List<DatanodeInfo> infos=Arrays.asList(bg.getLocations());
    List<String> storages=Arrays.asList(bg.getStorageIDs());
    cluster.getNamesystem().writeLock();
    try {
      bm.findAndMarkBlockAsCorrupt(lbs.getLastLocatedBlock().getBlock(),infos.get(0),storages.get(0),"TEST");
    }
  finally {
      cluster.getNamesystem().writeUnlock();
    }
    assertEquals(1,bm.countNodes(bm.getStoredBlock(blockInfo)).corruptReplicas());
    blk.setBlockId(groupId + 2);
    cluster.injectBlocks(numDNs - 3,Arrays.asList(blk),bpid);
    cluster.injectBlocks(numDNs - 2,Arrays.asList(blk),bpid);
    cluster.triggerBlockReports();
    lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    bg=(LocatedStripedBlock)(lbs.get(0));
    assertEquals(groupSize + 1,bg.getBlockIndices().length);
    assertEquals(groupSize + 1,bg.getLocations().length);
    BitSet set=new BitSet(groupSize);
    for (    byte index : bg.getBlockIndices()) {
      set.set(index);
    }
    Assert.assertFalse(set.get(0));
    for (int i=1; i < groupSize; i++) {
      assertTrue(set.get(i));
    }
  }
  @Ignore @Test public void testProcessOverReplicatedAndMissingStripedBlock() throws Exception {
    long fileLen=cellSize * dataBlocks;
    DFSTestUtil.createStripedFile(cluster,filePath,null,1,stripesPerBlock,false);
    LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
    long gs=bg.getBlock().getGenerationStamp();
    String bpid=bg.getBlock().getBlockPoolId();
    long groupId=bg.getBlock().getBlockId();
    Block blk=new Block(groupId,blockSize,gs);
    for (int i=0; i < groupSize - 1; i++) {
      blk.setBlockId(groupId + i);
      cluster.injectBlocks(i,Arrays.asList(blk),bpid);
    }
    cluster.triggerBlockReports();
    blk.setBlockId(groupId + 2);
    cluster.injectBlocks(numDNs - 3,Arrays.asList(blk),bpid);
    cluster.injectBlocks(numDNs - 2,Arrays.asList(blk),bpid);
    cluster.triggerBlockReports();
    Thread.sleep(2000);
    cluster.triggerHeartbeats();
    cluster.triggerHeartbeats();
    cluster.triggerBlockReports();
    lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
    bg=(LocatedStripedBlock)(lbs.get(0));
    assertEquals(groupSize + 1,bg.getBlockIndices().length);
    assertEquals(groupSize + 1,bg.getLocations().length);
    BitSet set=new BitSet(groupSize);
    for (    byte index : bg.getBlockIndices()) {
      set.set(index);
    }
    Assert.assertFalse(set.get(groupSize - 1));
    for (int i=0; i < groupSize - 1; i++) {
      assertTrue(set.get(i));
    }
  }
}
