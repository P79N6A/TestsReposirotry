public class TestRMHAForAsyncScheduler extends RMHATestBase {
  private TestCapacitySchedulerAsyncScheduling.NMHeartbeatThread nmHeartbeatThread=null;
  @Before @Override public void setup() throws Exception {
    super.setup();
    confForRM1.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
    confForRM1.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    confForRM1.setBoolean(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE,true);
    confForRM2.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
    confForRM2.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    confForRM2.setBoolean(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE,true);
  }
  private void keepNMHeartbeat(  List<MockNM> mockNMs,  int interval){
    if (nmHeartbeatThread != null) {
      nmHeartbeatThread.setShouldStop();
      nmHeartbeatThread=null;
    }
    nmHeartbeatThread=new TestCapacitySchedulerAsyncScheduling.NMHeartbeatThread(mockNMs,interval);
    nmHeartbeatThread.start();
  }
  private void pauseNMHeartbeat(){
    if (nmHeartbeatThread != null) {
      nmHeartbeatThread.setShouldStop();
      nmHeartbeatThread=null;
    }
  }
  @Test(timeout=60000) public void testAsyncScheduleThreadStateAfterRMHATransit() throws Exception {
    startRMs();
    MockNM nm=rm1.registerNode("192.1.1.1:1234",8192,8);
    RMApp app1=submitAppAndCheckLaunched(rm1);
    keepNMHeartbeat(Arrays.asList(nm),1000);
    explicitFailover();
    checkAsyncSchedulerThreads(Thread.currentThread());
    pauseNMHeartbeat();
    nm=rm2.registerNode("192.1.1.1:1234",8192,8);
    keepNMHeartbeat(Arrays.asList(nm),1000);
    rm2.waitForState(app1.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.LAUNCHED);
    rm2.killApp(app1.getApplicationId());
    RMApp app2=submitAppAndCheckLaunched(rm2);
    pauseNMHeartbeat();
    HAServiceProtocol.StateChangeRequestInfo requestInfo=new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
    rm2.adminService.transitionToStandby(requestInfo);
    rm1.adminService.transitionToActive(requestInfo);
    Assert.assertTrue(rm2.getRMContext().getHAServiceState() == HAServiceProtocol.HAServiceState.STANDBY);
    Assert.assertTrue(rm1.getRMContext().getHAServiceState() == HAServiceProtocol.HAServiceState.ACTIVE);
    checkAsyncSchedulerThreads(Thread.currentThread());
    nm=rm1.registerNode("192.1.1.1:1234",8192,8);
    keepNMHeartbeat(Arrays.asList(nm),1000);
    rm1.waitForState(app2.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.LAUNCHED);
    rm1.killApp(app2.getApplicationId());
    submitAppAndCheckLaunched(rm1);
    pauseNMHeartbeat();
    rm1.stop();
    rm2.stop();
  }
  private RMApp submitAppAndCheckLaunched(  MockRM rm) throws Exception {
    RMApp app=rm.submitApp(200,"",UserGroupInformation.getCurrentUser().getShortUserName(),null,false,"default",configuration.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null,null,false,false);
    rm.waitForState(app.getApplicationId(),RMAppState.ACCEPTED);
    RMAppAttempt attempt=app.getCurrentAppAttempt();
    rm.sendAMLaunched(attempt.getAppAttemptId());
    rm.waitForState(app.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.LAUNCHED);
    return app;
  }
  /** 
 * Make sure the state of async-scheduler threads is correct
 * @param currentThread
 */
  private void checkAsyncSchedulerThreads(  Thread currentThread){
    ThreadGroup threadGroup=currentThread.getThreadGroup();
    while (threadGroup.getParent() != null) {
      threadGroup=threadGroup.getParent();
    }
    Thread[] threads=new Thread[threadGroup.activeCount()];
    threadGroup.enumerate(threads);
    int numAsyncScheduleThread=0;
    int numResourceCommitterService=0;
    Thread asyncScheduleThread=null;
    Thread resourceCommitterService=null;
    for (    Thread thread : threads) {
      StackTraceElement[] stackTrace=thread.getStackTrace();
      if (stackTrace.length > 0) {
        String stackBottom=stackTrace[stackTrace.length - 1].toString();
        if (stackBottom.contains("AsyncScheduleThread.run")) {
          numAsyncScheduleThread++;
          asyncScheduleThread=thread;
        }
 else         if (stackBottom.contains("ResourceCommitterService.run")) {
          numResourceCommitterService++;
          resourceCommitterService=thread;
        }
      }
    }
    Assert.assertEquals(1,numResourceCommitterService);
    Assert.assertEquals(1,numAsyncScheduleThread);
    Assert.assertNotNull(asyncScheduleThread);
    Assert.assertNotNull(resourceCommitterService);
  }
}
