/** 
 * a simple reconfigurable class
 */
public static class ReconfigurableDummy extends ReconfigurableBase implements Runnable {
  public volatile boolean running=true;
  public ReconfigurableDummy(  Configuration conf){
    super(conf);
  }
  @Override protected Configuration getNewConf(){
    return new Configuration();
  }
  @Override public Collection<String> getReconfigurableProperties(){
    return Arrays.asList(PROP1,PROP2,PROP4);
  }
  @Override public synchronized String reconfigurePropertyImpl(  String property,  String newVal) throws ReconfigurationException {
    return newVal;
  }
  /** 
 * Run until PROP1 is no longer VAL1.
 */
  @Override public void run(){
    while (running && getConf().get(PROP1).equals(VAL1)) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
}
