/** 
 * A test class for InstrumentedLock.
 */
public class TestInstrumentedLock {
  static final Logger LOG=LoggerFactory.getLogger(TestInstrumentedLock.class);
  @Rule public TestName name=new TestName();
  /** 
 * Test exclusive access of the lock.
 * @throws Exception
 */
  @Test(timeout=10000) public void testMultipleThread() throws Exception {
    String testname=name.getMethodName();
    InstrumentedLock lock=new InstrumentedLock(testname,LOG,0,300);
    lock.lock();
    try {
      Thread competingThread=new Thread(){
        @Override public void run(){
          assertFalse(lock.tryLock());
        }
      }
;
      competingThread.start();
      competingThread.join();
    }
  finally {
      lock.unlock();
    }
  }
  /** 
 * Test the correctness with try-with-resource syntax.
 * @throws Exception
 */
  @Test(timeout=10000) public void testTryWithResourceSyntax() throws Exception {
    String testname=name.getMethodName();
    final AtomicReference<Thread> lockThread=new AtomicReference<>(null);
    Lock lock=new InstrumentedLock(testname,LOG,0,300){
      @Override public void lock(){
        super.lock();
        lockThread.set(Thread.currentThread());
      }
      @Override public void unlock(){
        super.unlock();
        lockThread.set(null);
      }
    }
;
    AutoCloseableLock acl=new AutoCloseableLock(lock);
    try (AutoCloseable localLock=acl.acquire()){
      assertEquals(acl,localLock);
      Thread competingThread=new Thread(){
        @Override public void run(){
          assertNotEquals(Thread.currentThread(),lockThread.get());
          assertFalse(lock.tryLock());
        }
      }
;
      competingThread.start();
      competingThread.join();
      assertEquals(Thread.currentThread(),lockThread.get());
    }
     assertNull(lockThread.get());
  }
  /** 
 * Test the lock logs warning when lock held time is greater than threshold and not log warning otherwise.
 * @throws Exception
 */
  @Test(timeout=10000) public void testLockLongHoldingReport() throws Exception {
    String testname=name.getMethodName();
    final AtomicLong time=new AtomicLong(0);
    Timer mclock=new Timer(){
      @Override public long monotonicNow(){
        return time.get();
      }
    }
;
    Lock mlock=mock(Lock.class);
    final AtomicLong wlogged=new AtomicLong(0);
    final AtomicLong wsuppresed=new AtomicLong(0);
    InstrumentedLock lock=new InstrumentedLock(testname,LOG,mlock,2000,300,mclock){
      @Override void logWarning(      long lockHeldTime,      long suppressed){
        wlogged.incrementAndGet();
        wsuppresed.set(suppressed);
      }
    }
;
    lock.lock();
    time.set(200);
    lock.unlock();
    assertEquals(0,wlogged.get());
    assertEquals(0,wsuppresed.get());
    lock.lock();
    time.set(700);
    lock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    lock.lock();
    time.set(1100);
    lock.unlock();
    assertEquals(1,wlogged.get());
    assertEquals(0,wsuppresed.get());
    time.set(2400);
    lock.lock();
    time.set(2800);
    lock.unlock();
    assertEquals(2,wlogged.get());
    assertEquals(1,wsuppresed.get());
  }
}
