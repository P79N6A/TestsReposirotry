/** 
 * Progress callback from AWS. Likely to come in on a different thread.
 */
private final class ProgressCallback implements Progressable, ProgressListener {
  private AtomicLong bytesTransferred=new AtomicLong(0);
  private AtomicInteger failures=new AtomicInteger(0);
  private final ContractTestUtils.NanoTimer timer;
  private ProgressCallback(  NanoTimer timer){
    this.timer=timer;
  }
  @Override public void progress(){
  }
  @Override public void progressChanged(  ProgressEvent progressEvent){
    ProgressEventType eventType=progressEvent.getEventType();
    if (eventType.isByteCountEvent()) {
      bytesTransferred.addAndGet(progressEvent.getBytesTransferred());
    }
switch (eventType) {
case TRANSFER_PART_FAILED_EVENT:
      failures.incrementAndGet();
    LOG.warn("Transfer failure");
  break;
case TRANSFER_PART_COMPLETED_EVENT:
long elapsedTime=timer.elapsedTime();
double elapsedTimeS=elapsedTime / 1.0e9;
long written=bytesTransferred.get();
long writtenMB=written / _1MB;
LOG.info(String.format("Event %s; total uploaded=%d MB in %.1fs;" + " effective upload bandwidth = %.2f MB/s",progressEvent,writtenMB,elapsedTimeS,writtenMB / elapsedTimeS));
break;
default :
if (eventType.isByteCountEvent()) {
LOG.debug("Event {}",progressEvent);
}
 else {
LOG.info("Event {}",progressEvent);
}
break;
}
}
@Override public String toString(){
String sb="ProgressCallback{" + "bytesTransferred=" + bytesTransferred + ", failures="+ failures+ '}';
return sb;
}
private void verifyNoFailures(String operation){
assertEquals("Failures in " + operation + ": "+ this,0,failures.get());
}
}
