public class TestRMRestart extends ParameterizedSchedulerTestBase {
  private static final Log LOG=LogFactory.getLog(TestRMRestart.class);
  private final static File TEMP_DIR=new File(System.getProperty("test.build.data","/tmp"),"decommision");
  private File hostFile=new File(TEMP_DIR + File.separator + "hostFile.txt");
  private YarnConfiguration conf;
  private static InetSocketAddress rmAddr;
  private List<MockRM> rms=new ArrayList<MockRM>();
  public TestRMRestart(  SchedulerType type) throws IOException {
    super(type);
  }
  @Before public void setup() throws IOException {
    conf=getConf();
    Logger rootLogger=LogManager.getRootLogger();
    rootLogger.setLevel(Level.DEBUG);
    UserGroupInformation.setConfiguration(conf);
    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,false);
    conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS,FileSystemTimelineWriterImpl.class,TimelineWriter.class);
    rmAddr=new InetSocketAddress("localhost",8032);
    Assert.assertTrue(YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS > 1);
  }
  @After public void tearDown(){
    for (    MockRM rm : rms) {
      rm.stop();
    }
    rms.clear();
    TEMP_DIR.delete();
  }
  /** 
 * @return a new MockRM that will be stopped at the end of the test.
 */
  private MockRM createMockRM(  YarnConfiguration conf,  RMStateStore store){
    MockRM rm=new MockRM(conf,store);
    rms.add(rm);
    return rm;
  }
  private MockRM createMockRM(  YarnConfiguration config){
    MockRM rm=new MockRM(config);
    rms.add(rm);
    return rm;
  }
  @Test(timeout=180000) public void testRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    MockNM nm2=new MockNM("127.0.0.2:5678",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    nm2.registerNode();
    RMApp app0=rm1.submitApp(200);
    RMAppAttempt attempt0=app0.getCurrentAppAttempt();
    Assert.assertEquals(1,rmAppState.size());
    nm1.nodeHeartbeat(true);
    MockAM am0=rm1.sendAMLaunched(attempt0.getAppAttemptId());
    am0.registerAppAttempt();
    finishApplicationMaster(app0,rm1,nm1,am0);
    RMApp app1=rm1.submitApp(200);
    ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
    Assert.assertNotNull(appState);
    Assert.assertEquals(0,appState.getAttemptCount());
    Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app1.getApplicationSubmissionContext().getApplicationId());
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    ApplicationAttemptId attemptId1=attempt1.getAppAttemptId();
    rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    Assert.assertEquals(1,appState.getAttemptCount());
    ApplicationAttemptStateData attemptState=appState.getAttempt(attemptId1);
    Assert.assertNotNull(attemptState);
    Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
    MockAM am1=rm1.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    am1.allocate("127.0.0.1",1000,1,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    List<Container> conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (conts.size() == 0) {
      nm1.nodeHeartbeat(true);
      conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
      Thread.sleep(500);
    }
    RMApp app2=rm1.submitApp(200);
    appState=rmAppState.get(app2.getApplicationId());
    Assert.assertNotNull(appState);
    Assert.assertEquals(0,appState.getAttemptCount());
    Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app2.getApplicationSubmissionContext().getApplicationId());
    RMApp appUnmanaged=rm1.submitApp(200,"someApp","someUser",null,true,null,conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS),null);
    ApplicationAttemptId unmanagedAttemptId=appUnmanaged.getCurrentAppAttempt().getAppAttemptId();
    ApplicationId unmanagedAppId=appUnmanaged.getApplicationId();
    appState=rmAppState.get(unmanagedAppId);
    Assert.assertNotNull(appState);
    rm1.waitForState(unmanagedAttemptId,RMAppAttemptState.LAUNCHED);
    rm1.waitForState(unmanagedAppId,RMAppState.ACCEPTED);
    Assert.assertEquals(1,appState.getAttemptCount());
    Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),appUnmanaged.getApplicationSubmissionContext().getApplicationId());
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    nm1.setResourceTrackerService(rm2.getResourceTrackerService());
    nm2.setResourceTrackerService(rm2.getResourceTrackerService());
    Assert.assertEquals(4,rm2.getRMContext().getRMApps().size());
    rm2.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
    rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FINISHED);
    RMApp loadedApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
    Assert.assertNotNull(loadedApp1);
    Assert.assertEquals(1,loadedApp1.getAppAttempts().size());
    Assert.assertEquals(app1.getApplicationSubmissionContext().getApplicationId(),loadedApp1.getApplicationSubmissionContext().getApplicationId());
    RMApp loadedApp2=rm2.getRMContext().getRMApps().get(app2.getApplicationId());
    Assert.assertNotNull(loadedApp2);
    Assert.assertEquals(app2.getApplicationSubmissionContext().getApplicationId(),loadedApp2.getApplicationSubmissionContext().getApplicationId());
    rm2.waitForState(loadedApp1.getApplicationId(),RMAppState.ACCEPTED);
    rm2.waitForState(loadedApp2.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(1,loadedApp1.getAppAttempts().size());
    Assert.assertEquals(1,loadedApp2.getAppAttempts().size());
    am1.setAMRMProtocol(rm2.getApplicationMasterService(),rm2.getRMContext());
    try {
      am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>());
      Assert.fail();
    }
 catch (    ApplicationAttemptNotFoundException e) {
      Assert.assertTrue(e instanceof ApplicationAttemptNotFoundException);
    }
    NodeHeartbeatResponse hbResponse=nm1.nodeHeartbeat(true);
    Assert.assertEquals(NodeAction.RESYNC,hbResponse.getNodeAction());
    hbResponse=nm2.nodeHeartbeat(true);
    Assert.assertEquals(NodeAction.RESYNC,hbResponse.getNodeAction());
    nm1=new MockNM("127.0.0.1:1234",15120,rm2.getResourceTrackerService());
    nm2=new MockNM("127.0.0.2:5678",15120,rm2.getResourceTrackerService());
    NMContainerStatus status=TestRMRestart.createNMContainerStatus(loadedApp1.getCurrentAppAttempt().getAppAttemptId(),1,ContainerState.COMPLETE);
    nm1.registerNode(Arrays.asList(status),null);
    nm2.registerNode();
    rm2.waitForState(loadedApp1.getApplicationId(),RMAppState.ACCEPTED);
    int timeoutSecs=0;
    while (loadedApp1.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {
      ;
      Thread.sleep(200);
    }
    hbResponse=nm1.nodeHeartbeat(true);
    Assert.assertTrue(NodeAction.RESYNC != hbResponse.getNodeAction());
    hbResponse=nm2.nodeHeartbeat(true);
    Assert.assertTrue(NodeAction.RESYNC != hbResponse.getNodeAction());
    attempt1=loadedApp1.getCurrentAppAttempt();
    attemptId1=attempt1.getAppAttemptId();
    ((AbstractYarnScheduler)rm2.getResourceScheduler()).update();
    rm2.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    appState=rmAppState.get(loadedApp1.getApplicationId());
    attemptState=appState.getAttempt(attemptId1);
    Assert.assertNotNull(attemptState);
    Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
    MockNM am1Node=nm1;
    if (attemptState.getMasterContainer().getNodeId().toString().contains("127.0.0.2")) {
      am1Node=nm2;
    }
    RMAppAttempt attempt2=loadedApp2.getCurrentAppAttempt();
    ApplicationAttemptId attemptId2=attempt2.getAppAttemptId();
    rm2.waitForState(attemptId2,RMAppAttemptState.ALLOCATED);
    appState=rmAppState.get(loadedApp2.getApplicationId());
    attemptState=appState.getAttempt(attemptId2);
    Assert.assertNotNull(attemptState);
    Assert.assertEquals(BuilderUtils.newContainerId(attemptId2,1),attemptState.getMasterContainer().getId());
    MockNM am2Node=nm1;
    if (attemptState.getMasterContainer().getNodeId().toString().contains("127.0.0.2")) {
      am2Node=nm2;
    }
    am1=rm2.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    MockAM am2=rm2.sendAMLaunched(attempt2.getAppAttemptId());
    am2.registerAppAttempt();
    am1.allocate("127.0.0.1",1000,3,new ArrayList<ContainerId>());
    am2.allocate("127.0.0.2",1000,1,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    nm2.nodeHeartbeat(true);
    conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (conts.size() == 0) {
      nm1.nodeHeartbeat(true);
      nm2.nodeHeartbeat(true);
      conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
      Thread.sleep(500);
    }
    finishApplicationMaster(loadedApp1,rm2,am1Node,am1);
    finishApplicationMaster(loadedApp2,rm2,am2Node,am2);
    rm2.stop();
    rm1.stop();
    Assert.assertEquals(4,rmAppState.size());
  }
  @Test(timeout=60000) public void testAppReportNodeLabelRMRestart() throws Exception {
    if (getSchedulerType() != SchedulerType.CAPACITY) {
      return;
    }
    YarnConfiguration newConf=new YarnConfiguration(conf);
    newConf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    MockRM rm1=createMockRM(newConf);
    NodeLabel amLabel=NodeLabel.newInstance("AMLABEL");
    NodeLabel appLabel=NodeLabel.newInstance("APPLABEL");
    List<NodeLabel> labels=new ArrayList<>();
    labels.add(amLabel);
    labels.add(appLabel);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    rm1.start();
    rm1.getAdminService().addToClusterNodeLabels(AddToClusterNodeLabelsRequest.newInstance(labels));
    ResourceRequest amResourceRequest=ResourceRequest.newInstance(Priority.newInstance(0),ResourceRequest.ANY,Resource.newInstance(200,1),1,true,amLabel.getName());
    ArrayList resReqs=new ArrayList<>();
    resReqs.add(amResourceRequest);
    RMApp app0=rm1.submitApp(resReqs,appLabel.getName());
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
    ApplicationReport appReport=rm2.getClientRMService().getApplicationReport(GetApplicationReportRequest.newInstance(app0.getApplicationId())).getApplicationReport();
    Assert.assertEquals(amLabel.getName(),appReport.getAmNodeLabelExpression());
    Assert.assertEquals(appLabel.getName(),appReport.getAppNodeLabelExpression());
    rm1.stop();
    rm2.stop();
  }
  @Test(timeout=60000) public void testUnManagedRMRestart() throws Exception {
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    rm1.start();
    RMApp app0=rm1.submitApp(null,"name","user",new HashMap<>(),true,"default");
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
    ApplicationReport appReport=rm2.getClientRMService().getApplicationReport(GetApplicationReportRequest.newInstance(app0.getApplicationId())).getApplicationReport();
    Assert.assertEquals(true,appReport.isUnmanagedApp());
    rm1.stop();
    rm2.stop();
  }
  @Test(timeout=60000) public void testRMRestartAppRunningAMFailed() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",true,true);
    MockAM am0=launchAM(app0,rm1,nm1);
    nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    ApplicationStateData appState=rmAppState.get(app0.getApplicationId());
    Assert.assertEquals(RMAppAttemptState.FAILED,appState.getAttempt(am0.getApplicationAttemptId()).getState());
    Assert.assertNull(rmAppState.get(app0.getApplicationId()).getState());
    rm1.waitForState(app0.getApplicationId(),RMAppState.ACCEPTED);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  }
  @Test(timeout=60000) public void testRMRestartWaitForPreviousAMToFinish() throws Exception {
    YarnConfiguration conf=new YarnConfiguration(this.conf);
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,40);
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    AbstractYarnScheduler ys=(AbstractYarnScheduler)rm1.getResourceScheduler();
    MockNM nm1=new MockNM("127.0.0.1:1234",16382,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app1=rm1.submitApp(200);
    rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
    MockAM am1=launchAM(app1,rm1,nm1);
    nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(ys,am1.getApplicationAttemptId());
    MockAM am2=launchAM(app1,rm1,nm1);
    Assert.assertEquals(1,rmAppState.size());
    Assert.assertEquals(app1.getState(),RMAppState.RUNNING);
    Assert.assertEquals(app1.getAppAttempts().get(app1.getCurrentAppAttempt().getAppAttemptId()).getAppAttemptState(),RMAppAttemptState.RUNNING);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    nm1.setResourceTrackerService(rm2.getResourceTrackerService());
    NodeHeartbeatResponse res=nm1.nodeHeartbeat(true);
    Assert.assertEquals(NodeAction.RESYNC,res.getNodeAction());
    RMApp rmApp=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
    rm2.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(RMAppState.ACCEPTED,rmApp.getState());
    Assert.assertEquals(2,rmApp.getAppAttempts().size());
    rm2.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    rm2.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.LAUNCHED);
    Assert.assertEquals(RMAppAttemptState.FAILED,rmApp.getAppAttempts().get(am1.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(RMAppAttemptState.LAUNCHED,rmApp.getAppAttempts().get(am2.getApplicationAttemptId()).getAppAttemptState());
    NMContainerStatus status=TestRMRestart.createNMContainerStatus(am2.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    nm1.registerNode(Arrays.asList(status),null);
    rm2.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    ys=(AbstractYarnScheduler)rm2.getResourceScheduler();
    TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(ys,am2.getApplicationAttemptId());
    launchAM(rmApp,rm2,nm1);
    Assert.assertEquals(3,rmApp.getAppAttempts().size());
    rm2.waitForState(rmApp.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.RUNNING);
    conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,10000);
    MockRM rm3=createMockRM(conf,memStore);
    rm3.start();
    nm1.setResourceTrackerService(rm3.getResourceTrackerService());
    rmApp=rm3.getRMContext().getRMApps().get(app1.getApplicationId());
    rm3.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(rmApp.getState(),RMAppState.ACCEPTED);
    Assert.assertEquals(3,rmApp.getAppAttempts().size());
    rm3.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    rm3.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    ApplicationAttemptId latestAppAttemptId=rmApp.getCurrentAppAttempt().getAppAttemptId();
    rm3.waitForState(latestAppAttemptId,RMAppAttemptState.LAUNCHED);
    Assert.assertEquals(RMAppAttemptState.FAILED,rmApp.getAppAttempts().get(am1.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(RMAppAttemptState.FAILED,rmApp.getAppAttempts().get(am2.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(RMAppAttemptState.LAUNCHED,rmApp.getAppAttempts().get(latestAppAttemptId).getAppAttemptState());
    rm3.waitForState(latestAppAttemptId,RMAppAttemptState.FAILED);
    rm3.waitForState(rmApp.getApplicationId(),RMAppState.ACCEPTED);
    final int maxRetry=10;
    final RMApp rmAppForCheck=rmApp;
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return new Boolean(rmAppForCheck.getAppAttempts().size() == 4);
      }
    }
,100,maxRetry * 100);
    Assert.assertEquals(RMAppAttemptState.FAILED,rmApp.getAppAttempts().get(latestAppAttemptId).getAppAttemptState());
    latestAppAttemptId=rmApp.getCurrentAppAttempt().getAppAttemptId();
    RMApp app2=rm3.submitApp(200);
    rm3.waitForState(app2.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(1,app2.getAppAttempts().size());
    Assert.assertEquals(0,memStore.getState().getApplicationState().get(app2.getApplicationId()).getAttemptCount());
    MockRM rm4=createMockRM(conf,memStore);
    rm4.start();
    rmApp=rm4.getRMContext().getRMApps().get(app1.getApplicationId());
    rm4.waitForState(rmApp.getApplicationId(),RMAppState.ACCEPTED);
    int timeoutSecs=0;
    while (rmApp.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {
      Thread.sleep(200);
    }
    Assert.assertEquals(4,rmApp.getAppAttempts().size());
    Assert.assertEquals(RMAppState.ACCEPTED,rmApp.getState());
    rm4.waitForState(latestAppAttemptId,RMAppAttemptState.SCHEDULED);
    Assert.assertEquals(RMAppAttemptState.SCHEDULED,rmApp.getAppAttempts().get(latestAppAttemptId).getAppAttemptState());
    app2=rm4.getRMContext().getRMApps().get(app2.getApplicationId());
    rm4.waitForState(app2.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(RMAppState.ACCEPTED,app2.getState());
    Assert.assertEquals(1,app2.getAppAttempts().size());
    rm4.waitForState(app2.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.SCHEDULED);
    Assert.assertEquals(RMAppAttemptState.SCHEDULED,app2.getCurrentAppAttempt().getAppAttemptState());
  }
  @Test(timeout=60000) public void testRMRestartWaitForPreviousSucceededAttempt() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    MemoryRMStateStore memStore=new MockMemoryRMStateStore(){
      int count=0;
      @Override public void updateApplicationStateInternal(      ApplicationId appId,      ApplicationStateData appStateData) throws Exception {
        if (count == 0) {
          LOG.info(appId + " final state is not saved.");
          count++;
        }
 else {
          super.updateApplicationStateInternal(appId,appStateData);
        }
      }
    }
;
    memStore.init(conf);
    RMState rmState=memStore.getState();
    Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
    MockRM rm1=createMockRM(conf,memStore);
    rm1.start();
    MockNM nm1=rm1.registerNode("127.0.0.1:1234",15120);
    RMApp app0=rm1.submitApp(200);
    MockAM am0=MockRM.launchAndRegisterAM(app0,rm1,nm1);
    FinishApplicationMasterRequest req=FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"","");
    am0.unregisterAppAttempt(req,true);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FINISHING);
    Assert.assertNull(rmAppState.get(app0.getApplicationId()).getState());
    MockRM rm2=createMockRM(conf,memStore);
    nm1.setResourceTrackerService(rm2.getResourceTrackerService());
    rm2.start();
    rm2.waitForState(app0.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.FINISHED);
    rm2.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
    Assert.assertEquals(RMAppState.FINISHED,rmAppState.get(app0.getApplicationId()).getState());
  }
  @Test(timeout=60000) public void testRMRestartFailedApp() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
    MockRM rm1=createMockRM(conf);
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    rm1.waitForState(app0.getApplicationId(),RMAppState.FAILED);
    ApplicationStateData appState=rmAppState.get(app0.getApplicationId());
    Assert.assertEquals(RMAppState.FAILED,appState.getState());
    Assert.assertEquals(RMAppAttemptState.FAILED,appState.getAttempt(am0.getApplicationAttemptId()).getState());
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    RMApp loadedApp0=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
    rm2.waitForState(app0.getApplicationId(),RMAppState.FAILED);
    rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    Assert.assertEquals(app0.getUser(),loadedApp0.getUser());
    Assert.assertEquals(1,loadedApp0.getAppAttempts().size());
    verifyAppReportAfterRMRestart(app0,rm2);
    Assert.assertTrue(app0.getDiagnostics().toString().contains("Failing the application."));
  }
  @Test(timeout=60000) public void testRMRestartKilledApp() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.KILLED);
    ApplicationStateData appState=rmAppState.get(app0.getApplicationId());
    Assert.assertEquals(RMAppState.KILLED,appState.getState());
    Assert.assertEquals(RMAppAttemptState.KILLED,appState.getAttempt(am0.getApplicationAttemptId()).getState());
    String trackingUrl=app0.getCurrentAppAttempt().getOriginalTrackingUrl();
    Assert.assertNotNull(trackingUrl);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    RMApp loadedApp0=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
    rm2.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.KILLED);
    Assert.assertEquals(1,loadedApp0.getAppAttempts().size());
    ApplicationReport appReport=verifyAppReportAfterRMRestart(app0,rm2);
    Assert.assertEquals(app0.getDiagnostics().toString(),appReport.getDiagnostics());
    Assert.assertEquals(trackingUrl,loadedApp0.getCurrentAppAttempt().getOriginalTrackingUrl());
  }
  @Test(timeout=60000) public void testRMRestartKilledAppWithNoAttempts() throws Exception {
    MockMemoryRMStateStore memStore=new MockMemoryRMStateStore(){
      @Override public synchronized void storeApplicationAttemptStateInternal(      ApplicationAttemptId appAttemptId,      ApplicationAttemptStateData attemptState) throws Exception {
      }
      @Override public synchronized void updateApplicationAttemptStateInternal(      ApplicationAttemptId appAttemptId,      ApplicationAttemptStateData attemptState) throws Exception {
      }
    }
;
    memStore.init(conf);
    MockRM rm1=createMockRM(conf,memStore);
    rm1.start();
    RMApp app0=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    RMApp loadedApp0=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
    rm2.waitForState(loadedApp0.getApplicationId(),RMAppState.KILLED);
    Assert.assertTrue(loadedApp0.getAppAttempts().size() == 0);
  }
  @Test(timeout=60000) public void testRMRestartSucceededApp() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    FinishApplicationMasterRequest req=FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"diagnostics","trackingUrl");
    finishApplicationMaster(app0,rm1,nm1,am0,req);
    ApplicationStateData appState=rmAppState.get(app0.getApplicationId());
    ApplicationAttemptStateData attemptState0=appState.getAttempt(am0.getApplicationAttemptId());
    Assert.assertEquals("diagnostics",attemptState0.getDiagnostics());
    Assert.assertEquals(FinalApplicationStatus.SUCCEEDED,attemptState0.getFinalApplicationStatus());
    Assert.assertEquals("trackingUrl",attemptState0.getFinalTrackingUrl());
    Assert.assertEquals(app0.getFinishTime(),appState.getFinishTime());
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    ApplicationReport appReport=verifyAppReportAfterRMRestart(app0,rm2);
    Assert.assertEquals(FinalApplicationStatus.SUCCEEDED,appReport.getFinalApplicationStatus());
    Assert.assertEquals("trackingUrl",appReport.getOriginalTrackingUrl());
  }
  @Test(timeout=60000) public void testRMRestartGetApplicationList() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
    MockRM rm1=new MockRM(conf){
      @Override protected SystemMetricsPublisher createSystemMetricsPublisher(){
        return spy(super.createSystemMetricsPublisher());
      }
    }
;
    rms.add(rm1);
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    RMApp app0=rm1.submitApp(200,"name","user",null,false,"default",1,null,"myType");
    MockAM am0=launchAM(app0,rm1,nm1);
    finishApplicationMaster(app0,rm1,nm1,am0);
    RMApp app1=rm1.submitApp(200,"name","user",null,false,"default",1,null,"myType");
    MockAM am1=launchAM(app1,rm1,nm1);
    nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
    RMApp app2=rm1.submitApp(200,"name","user",null,false,"default",1,null,"myType");
    MockAM am2=launchAM(app2,rm1,nm1);
    rm1.killApp(app2.getApplicationId());
    rm1.waitForState(app2.getApplicationId(),RMAppState.KILLED);
    rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.KILLED);
    verify(rm1.getRMContext().getSystemMetricsPublisher(),Mockito.times(3)).appCreated(any(RMApp.class),anyLong());
    MockRM rm2=new MockRM(conf,memStore){
      @Override protected RMAppManager createRMAppManager(){
        return spy(super.createRMAppManager());
      }
      @Override protected SystemMetricsPublisher createSystemMetricsPublisher(){
        return spy(super.createSystemMetricsPublisher());
      }
    }
;
    rms.add(rm2);
    rm2.start();
    verify(rm2.getRMContext().getSystemMetricsPublisher(),Mockito.times(3)).appCreated(any(RMApp.class),anyLong());
    GetApplicationsRequest request1=GetApplicationsRequest.newInstance(EnumSet.of(YarnApplicationState.FINISHED,YarnApplicationState.KILLED,YarnApplicationState.FAILED));
    GetApplicationsResponse response1=rm2.getClientRMService().getApplications(request1);
    List<ApplicationReport> appList1=response1.getApplicationList();
    boolean forApp0=false, forApp1=false, forApp2=false;
    for (    ApplicationReport report : appList1) {
      if (report.getApplicationId().equals(app0.getApplicationId())) {
        Assert.assertEquals(YarnApplicationState.FINISHED,report.getYarnApplicationState());
        forApp0=true;
      }
      if (report.getApplicationId().equals(app1.getApplicationId())) {
        Assert.assertEquals(YarnApplicationState.FAILED,report.getYarnApplicationState());
        forApp1=true;
      }
      if (report.getApplicationId().equals(app2.getApplicationId())) {
        Assert.assertEquals(YarnApplicationState.KILLED,report.getYarnApplicationState());
        forApp2=true;
      }
    }
    Assert.assertTrue(forApp0 && forApp1 && forApp2);
    Set<String> appTypes=new HashSet<String>();
    appTypes.add("myType");
    GetApplicationsRequest request2=GetApplicationsRequest.newInstance(appTypes);
    GetApplicationsResponse response2=rm2.getClientRMService().getApplications(request2);
    List<ApplicationReport> appList2=response2.getApplicationList();
    Assert.assertTrue(3 == appList2.size());
    verify(rm2.getRMAppManager(),timeout(1000).times(3)).logApplicationSummary(isA(ApplicationId.class));
  }
  private MockAM launchAM(  RMApp app,  MockRM rm,  MockNM nm) throws Exception {
    RMAppAttempt attempt=MockRM.waitForAttemptScheduled(app,rm);
    nm.nodeHeartbeat(true);
    MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
    am.registerAppAttempt();
    rm.waitForState(app.getApplicationId(),RMAppState.RUNNING);
    return am;
  }
  private ApplicationReport verifyAppReportAfterRMRestart(  RMApp app,  MockRM rm) throws Exception {
    GetApplicationReportRequest reportRequest=GetApplicationReportRequest.newInstance(app.getApplicationId());
    GetApplicationReportResponse response=rm.getClientRMService().getApplicationReport(reportRequest);
    ApplicationReport report=response.getApplicationReport();
    Assert.assertEquals(app.getStartTime(),report.getStartTime());
    Assert.assertEquals(app.getFinishTime(),report.getFinishTime());
    Assert.assertEquals(app.createApplicationState(),report.getYarnApplicationState());
    Assert.assertTrue(1 == report.getProgress());
    return response.getApplicationReport();
  }
  private void finishApplicationMaster(  RMApp rmApp,  MockRM rm,  MockNM nm,  MockAM am) throws Exception {
    final FinishApplicationMasterRequest req=FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"","");
    finishApplicationMaster(rmApp,rm,nm,am,req);
  }
  private void finishApplicationMaster(  RMApp rmApp,  MockRM rm,  MockNM nm,  MockAM am,  FinishApplicationMasterRequest req) throws Exception {
    RMState rmState=((MemoryRMStateStore)rm.getRMContext().getStateStore()).getState();
    Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
    am.unregisterAppAttempt(req,true);
    rm.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FINISHING);
    nm.nodeHeartbeat(am.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FINISHED);
    rm.waitForState(rmApp.getApplicationId(),RMAppState.FINISHED);
    ApplicationStateData appState=rmAppState.get(rmApp.getApplicationId());
    Assert.assertEquals(RMAppState.FINISHED,appState.getState());
    Assert.assertEquals(RMAppAttemptState.FINISHED,appState.getAttempt(am.getApplicationAttemptId()).getState());
  }
  @Test(timeout=60000) public void testRMRestartOnMaxAppAttempts() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",1,null);
    RMApp app2=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null);
    ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
    Assert.assertNotNull(appState);
    Assert.assertEquals(0,appState.getAttemptCount());
    Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app1.getApplicationSubmissionContext().getApplicationId());
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt=app1.getCurrentAppAttempt();
    ApplicationAttemptId attemptId1=attempt.getAppAttemptId();
    rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    Assert.assertEquals(1,appState.getAttemptCount());
    ApplicationAttemptStateData attemptState=appState.getAttempt(attemptId1);
    Assert.assertNotNull(attemptState);
    Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
    conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,3000);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    Assert.assertEquals(2,rm2.getRMContext().getRMApps().get(app2.getApplicationId()).getMaxAppAttempts());
    Assert.assertEquals(2,rm2.getRMContext().getRMApps().size());
    rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
    rm2.waitForState(app2.getApplicationId(),RMAppState.ACCEPTED);
    Assert.assertEquals(RMAppState.FAILED,rmAppState.get(app1.getApplicationId()).getState());
    Assert.assertNull(rmAppState.get(app2.getApplicationId()).getState());
  }
  @Test(timeout=60000) public void testRMRestartTimelineCollectorContext() throws Exception {
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,2.0f);
    MockRM rm1=null;
    MockRM rm2=null;
    try {
      rm1=createMockRM(conf);
      rm1.start();
      MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
      Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
      MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
      nm1.registerNode();
      RMApp app=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null);
      ApplicationStateData appState=rmAppState.get(app.getApplicationId());
      Assert.assertNotNull(appState);
      Assert.assertEquals(0,appState.getAttemptCount());
      Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app.getApplicationSubmissionContext().getApplicationId());
      nm1.nodeHeartbeat(true);
      RMAppAttempt attempt=app.getCurrentAppAttempt();
      ApplicationAttemptId attemptId1=attempt.getAppAttemptId();
      rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
      ApplicationId appId=app.getApplicationId();
      TimelineCollectorContext contextBeforeRestart=rm1.getRMContext().getRMTimelineCollectorManager().get(appId).getTimelineEntityContext();
      rm2=createMockRM(conf,memStore);
      rm2.start();
      Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
      rm2.waitForState(app.getApplicationId(),RMAppState.ACCEPTED);
      TimelineCollectorContext contextAfterRestart=rm2.getRMContext().getRMTimelineCollectorManager().get(appId).getTimelineEntityContext();
      Assert.assertEquals("Collector contexts for an app should be same " + "across restarts",contextBeforeRestart,contextAfterRestart);
    }
  finally {
      conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,false);
      if (rm1 != null) {
        rm1.close();
      }
      if (rm2 != null) {
        rm2.close();
      }
    }
  }
  @Test(timeout=60000) public void testDelegationTokenRestoredInDelegationTokenRenewer() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
    MockRM rm1=new TestSecurityMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    HashSet<Token<RMDelegationTokenIdentifier>> tokenSet=new HashSet<Token<RMDelegationTokenIdentifier>>();
    Credentials ts=new Credentials();
    Text userText1=new Text("user1");
    RMDelegationTokenIdentifier dtId1=new RMDelegationTokenIdentifier(userText1,new Text("renewer1"),userText1);
    Token<RMDelegationTokenIdentifier> token1=new Token<RMDelegationTokenIdentifier>(dtId1,rm1.getRMContext().getRMDelegationTokenSecretManager());
    SecurityUtil.setTokenService(token1,rmAddr);
    ts.addToken(userText1,token1);
    tokenSet.add(token1);
    Text userText2=new Text("user2");
    RMDelegationTokenIdentifier dtId2=new RMDelegationTokenIdentifier(userText2,new Text("renewer2"),userText2);
    Token<RMDelegationTokenIdentifier> token2=new Token<RMDelegationTokenIdentifier>(dtId2,rm1.getRMContext().getRMDelegationTokenSecretManager());
    SecurityUtil.setTokenService(token2,rmAddr);
    ts.addToken(userText2,token2);
    tokenSet.add(token2);
    RMApp app=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",1,ts);
    ApplicationStateData appState=rmAppState.get(app.getApplicationId());
    Assert.assertNotNull(appState);
    Assert.assertEquals(tokenSet,rm1.getRMContext().getDelegationTokenRenewer().getDelegationTokens());
    DataOutputBuffer dob=new DataOutputBuffer();
    ts.writeTokenStorageToStream(dob);
    ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    securityTokens.rewind();
    Assert.assertEquals(securityTokens,appState.getApplicationSubmissionContext().getAMContainerSpec().getTokens());
    MockRM rm2=new TestSecurityMockRM(conf,memStore);
    rm2.start();
    waitForTokensToBeRenewed(rm2,tokenSet);
    Assert.assertEquals(tokenSet,rm2.getRMContext().getDelegationTokenRenewer().getDelegationTokens());
  }
  private void waitForTokensToBeRenewed(  MockRM rm2,  HashSet<Token<RMDelegationTokenIdentifier>> tokenSet) throws Exception {
    int waitCnt=100;
    while (waitCnt-- > 0) {
      if (tokenSet.equals(rm2.getRMContext().getDelegationTokenRenewer().getDelegationTokens())) {
        break;
      }
 else {
        Thread.sleep(10);
      }
    }
  }
  @Test(timeout=60000) public void testAppAttemptTokensRestoredOnRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
    MockRM rm1=new TestSecurityMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("0.0.0.0:4321",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),"default");
    ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
    Assert.assertNotNull(appState);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    ApplicationAttemptId attemptId1=attempt1.getAppAttemptId();
    rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    ApplicationAttemptStateData attemptState=appState.getAttempt(attemptId1);
    Assert.assertNotNull(attemptState);
    Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
    byte[] clientTokenMasterKey=attempt1.getClientTokenMasterKey().getEncoded();
    Credentials savedCredentials=attemptState.getAppAttemptTokens();
    Assert.assertArrayEquals("client token master key not saved",clientTokenMasterKey,savedCredentials.getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
    MockRM rm2=new TestSecurityMockRM(conf,memStore);
    rm2.start();
    RMApp loadedApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
    RMAppAttempt loadedAttempt1=loadedApp1.getRMAppAttempt(attemptId1);
    Assert.assertNotNull(loadedAttempt1);
    Assert.assertEquals("client token master key not restored",attempt1.getClientTokenMasterKey(),loadedAttempt1.getClientTokenMasterKey());
    Assert.assertArrayEquals(clientTokenMasterKey,rm2.getClientToAMTokenSecretManager().getMasterKey(attemptId1).getEncoded());
    Token<AMRMTokenIdentifier> amrmToken=loadedAttempt1.getAMRMToken();
    Assert.assertArrayEquals(amrmToken.getPassword(),rm2.getRMContext().getAMRMTokenSecretManager().retrievePassword(amrmToken.decodeIdentifier()));
  }
  @Test(timeout=60000) public void testRMDelegationTokenRestoredOnRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    conf.set(YarnConfiguration.RM_ADDRESS,"localhost:8032");
    UserGroupInformation.setConfiguration(conf);
    MockRM rm1=new TestSecurityMockRM(conf);
    rm1.start();
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    RMState rmState=memStore.getState();
    Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
    Map<RMDelegationTokenIdentifier,Long> rmDTState=rmState.getRMDTSecretManagerState().getTokenState();
    Set<DelegationKey> rmDTMasterKeyState=rmState.getRMDTSecretManagerState().getMasterKeyState();
    Credentials ts=new Credentials();
    GetDelegationTokenRequest request1=GetDelegationTokenRequest.newInstance("renewer1");
    UserGroupInformation.getCurrentUser().setAuthenticationMethod(AuthMethod.KERBEROS);
    GetDelegationTokenResponse response1=rm1.getClientRMService().getDelegationToken(request1);
    org.apache.hadoop.yarn.api.records.Token delegationToken1=response1.getRMDelegationToken();
    Token<RMDelegationTokenIdentifier> token1=ConverterUtils.convertFromYarn(delegationToken1,rmAddr);
    RMDelegationTokenIdentifier dtId1=token1.decodeIdentifier();
    HashSet<RMDelegationTokenIdentifier> tokenIdentSet=new HashSet<RMDelegationTokenIdentifier>();
    ts.addToken(token1.getService(),token1);
    tokenIdentSet.add(dtId1);
    RMApp app=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",1,ts);
    ApplicationStateData appState=rmAppState.get(app.getApplicationId());
    Assert.assertNotNull(appState);
    Set<DelegationKey> allKeysRM1=rm1.getRMContext().getRMDelegationTokenSecretManager().getAllMasterKeys();
    Assert.assertEquals(allKeysRM1,rmDTMasterKeyState);
    Map<RMDelegationTokenIdentifier,Long> allTokensRM1=rm1.getRMContext().getRMDelegationTokenSecretManager().getAllTokens();
    Assert.assertEquals(tokenIdentSet,allTokensRM1.keySet());
    Assert.assertEquals(allTokensRM1,rmDTState);
    Assert.assertEquals(rm1.getRMContext().getRMDelegationTokenSecretManager().getLatestDTSequenceNumber(),rmState.getRMDTSecretManagerState().getDTSequenceNumber());
    GetDelegationTokenRequest request2=GetDelegationTokenRequest.newInstance("renewer2");
    GetDelegationTokenResponse response2=rm1.getClientRMService().getDelegationToken(request2);
    org.apache.hadoop.yarn.api.records.Token delegationToken2=response2.getRMDelegationToken();
    Token<RMDelegationTokenIdentifier> token2=ConverterUtils.convertFromYarn(delegationToken2,rmAddr);
    RMDelegationTokenIdentifier dtId2=token2.decodeIdentifier();
    try {
      rm1.getRMContext().getRMDelegationTokenSecretManager().cancelToken(token2,UserGroupInformation.getCurrentUser().getUserName());
    }
 catch (    Exception e) {
      Assert.fail();
    }
    Assert.assertEquals(rm1.getRMContext().getRMDelegationTokenSecretManager().getLatestDTSequenceNumber(),dtId2.getSequenceNumber());
    Assert.assertFalse(rmDTState.containsKey(dtId2));
    MockRM rm2=new TestSecurityMockRM(conf,memStore);
    rm2.start();
    Map<RMDelegationTokenIdentifier,Long> allTokensRM2=rm2.getRMContext().getRMDelegationTokenSecretManager().getAllTokens();
    Assert.assertEquals(allTokensRM2.keySet(),allTokensRM1.keySet());
    Assert.assertTrue(rm2.getRMContext().getRMDelegationTokenSecretManager().getAllMasterKeys().containsAll(allKeysRM1));
    Assert.assertEquals(rm1.getRMContext().getRMDelegationTokenSecretManager().getLatestDTSequenceNumber(),rm2.getRMContext().getRMDelegationTokenSecretManager().getLatestDTSequenceNumber());
    Long renewDateBeforeRenew=allTokensRM2.get(dtId1);
    try {
      Thread.sleep(1);
      rm2.getRMContext().getRMDelegationTokenSecretManager().renewToken(token1,"renewer1");
    }
 catch (    Exception e) {
      Assert.fail();
    }
    allTokensRM2=rm2.getRMContext().getRMDelegationTokenSecretManager().getAllTokens();
    Long renewDateAfterRenew=allTokensRM2.get(dtId1);
    Assert.assertTrue(renewDateAfterRenew > renewDateBeforeRenew);
    Assert.assertTrue(rmDTState.containsValue(renewDateAfterRenew));
    Assert.assertFalse(rmDTState.containsValue(renewDateBeforeRenew));
    try {
      rm2.getRMContext().getRMDelegationTokenSecretManager().cancelToken(token1,UserGroupInformation.getCurrentUser().getUserName());
    }
 catch (    Exception e) {
      Assert.fail();
    }
    allTokensRM2=rm2.getRMContext().getRMDelegationTokenSecretManager().getAllTokens();
    Assert.assertFalse(allTokensRM2.containsKey(dtId1));
    Assert.assertFalse(rmDTState.containsKey(dtId1));
  }
  @Test(timeout=60000) public void testAppSubmissionWithOldDelegationTokenAfterRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    conf.set(YarnConfiguration.RM_ADDRESS,"localhost:8032");
    UserGroupInformation.setConfiguration(conf);
    MockRM rm1=new TestSecurityMockRM(conf);
    rm1.start();
    GetDelegationTokenRequest request1=GetDelegationTokenRequest.newInstance("renewer1");
    UserGroupInformation.getCurrentUser().setAuthenticationMethod(AuthMethod.KERBEROS);
    GetDelegationTokenResponse response1=rm1.getClientRMService().getDelegationToken(request1);
    Token<RMDelegationTokenIdentifier> token1=ConverterUtils.convertFromYarn(response1.getRMDelegationToken(),rmAddr);
    MockRM rm2=new TestSecurityMockRM(conf,rm1.getRMStateStore());
    rm2.start();
    Credentials ts=new Credentials();
    ts.addToken(token1.getService(),token1);
    RMApp app=rm2.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",1,ts);
    rm2.waitForState(app.getApplicationId(),RMAppState.ACCEPTED);
  }
  @Test(timeout=60000) public void testRMStateStoreDispatcherDrainedOnRMStop() throws Exception {
    MemoryRMStateStore memStore=new MemoryRMStateStore(){
      volatile boolean wait=true;
      @Override public void serviceStop() throws Exception {
        wait=false;
        super.serviceStop();
      }
      @Override protected void handleStoreEvent(      RMStateStoreEvent event){
        if (!(event instanceof RMStateStoreAMRMTokenEvent) && !(event instanceof RMStateStoreRMDTEvent) && !(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
          while (wait)           ;
        }
        super.handleStoreEvent(event);
      }
    }
;
    memStore.init(conf);
    final MockRM rm1=createMockRM(conf,memStore);
    rm1.disableDrainEventsImplicitly();
    rm1.start();
    final ArrayList<RMApp> appList=new ArrayList<RMApp>();
    final int NUM_APPS=5;
    for (int i=0; i < NUM_APPS; i++) {
      RMApp app=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
      appList.add(app);
      rm1.waitForState(app.getApplicationId(),RMAppState.NEW_SAVING);
    }
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    Assert.assertTrue(rmAppState.size() == 0);
    rm1.stop();
    for (    RMApp app : appList) {
      ApplicationStateData appState=rmAppState.get(app.getApplicationId());
      Assert.assertNotNull(appState);
      Assert.assertEquals(0,appState.getAttemptCount());
      Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app.getApplicationSubmissionContext().getApplicationId());
    }
    Assert.assertTrue(rmAppState.size() == NUM_APPS);
  }
  @Test(timeout=60000) public void testFinishedAppRemovalAfterRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS,1);
    MockRM rm1=createMockRM(conf);
    rm1.start();
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    RMState rmState=memStore.getState();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    finishApplicationMaster(app0,rm1,nm1,am0);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    nm1.setResourceTrackerService(rm2.getResourceTrackerService());
    nm1=rm2.registerNode("127.0.0.1:1234",15120);
    Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
    Assert.assertEquals(RMAppState.FINISHED,rmAppState.get(app0.getApplicationId()).getState());
    rm2.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
    RMApp app1=rm2.submitApp(200);
    MockAM am1=launchAM(app1,rm2,nm1);
    finishApplicationMaster(app1,rm2,nm1,am1);
    rm2.drainEvents();
    Assert.assertNull(rm2.getRMContext().getRMApps().get(app0.getApplicationId()));
    Assert.assertNull(rmAppState.get(app0.getApplicationId()));
  }
  @Test(timeout=10000) public void testRMShutdown() throws Exception {
    MemoryRMStateStore memStore=new MockMemoryRMStateStore(){
      @Override public synchronized void checkVersion() throws Exception {
        throw new Exception("Invalid version.");
      }
    }
;
    memStore.init(conf);
    MockRM rm1=null;
    try {
      rm1=createMockRM(conf,memStore);
      rm1.start();
      Assert.fail();
    }
 catch (    Exception e) {
      Assert.assertTrue(e.getMessage().contains("Invalid version."));
    }
    Assert.assertTrue(rm1.getServiceState() == STATE.STOPPED);
  }
  @Test(timeout=60000) public void testClientRetryOnKillingApplication() throws Exception {
    MemoryRMStateStore memStore=new TestMemoryRMStateStore();
    memStore.init(conf);
    MockRM rm1=createMockRM(conf,memStore);
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app1=rm1.submitApp(200,"name","user",null,false,"default",1,null,"myType");
    MockAM am1=launchAM(app1,rm1,nm1);
    KillApplicationResponse response;
    int count=0;
    while (true) {
      response=rm1.killApp(app1.getApplicationId());
      if (response.getIsKillCompleted()) {
        break;
      }
      Thread.sleep(100);
      count++;
    }
    Assert.assertTrue(count >= 1);
    rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.KILLED);
    rm1.waitForState(app1.getApplicationId(),RMAppState.KILLED);
    Assert.assertEquals(1,((TestMemoryRMStateStore)memStore).updateAttempt);
    Assert.assertEquals(2,((TestMemoryRMStateStore)memStore).updateApp);
  }
  @Test(timeout=20000) public void testAppFailedOnSubmissionSavedInStateStore() throws Exception {
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
    MockRM rm1=new TestSecurityMockRM(conf){
class TestDelegationTokenRenewer extends DelegationTokenRenewer {
        public void addApplicationAsync(        ApplicationId applicationId,        Credentials ts,        boolean shouldCancelAtEnd,        String user,        Configuration appConf){
          throw new RuntimeException("failed to submit app");
        }
      }
      @Override protected DelegationTokenRenewer createDelegationTokenRenewer(){
        return new TestDelegationTokenRenewer();
      }
    }
;
    rm1.start();
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    RMApp app1=null;
    try {
      app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
      Assert.fail();
    }
 catch (    Exception e) {
    }
    app1=rm1.getRMContext().getRMApps().values().iterator().next();
    rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
    Assert.assertEquals(RMAppState.FAILED,memStore.getState().getApplicationState().get(app1.getApplicationId()).getState());
    MockRM rm2=new TestSecurityMockRM(conf,memStore);
    rm2.start();
    rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  }
  @Test(timeout=20000) public void testAppRecoveredInOrderOnRMRestart() throws Exception {
    MemoryRMStateStore memStore=new MemoryRMStateStore();
    memStore.init(conf);
    for (int i=10; i > 0; i--) {
      ApplicationStateData appState=mock(ApplicationStateData.class);
      ApplicationSubmissionContext context=mock(ApplicationSubmissionContext.class);
      when(appState.getApplicationSubmissionContext()).thenReturn(context);
      when(context.getApplicationId()).thenReturn(ApplicationId.newInstance(1234,i));
      memStore.getState().getApplicationState().put(appState.getApplicationSubmissionContext().getApplicationId(),appState);
    }
    MockRM rm1=new MockRM(conf,memStore){
      @Override protected RMAppManager createRMAppManager(){
        return new TestRMAppManager(this.rmContext,this.scheduler,this.masterService,this.applicationACLsManager,conf);
      }
class TestRMAppManager extends RMAppManager {
        ApplicationId prevId=ApplicationId.newInstance(1234,0);
        public TestRMAppManager(        RMContext context,        YarnScheduler scheduler,        ApplicationMasterService masterService,        ApplicationACLsManager applicationACLsManager,        Configuration conf){
          super(context,scheduler,masterService,applicationACLsManager,conf);
        }
        @Override protected void recoverApplication(        ApplicationStateData appState,        RMState rmState) throws Exception {
          Assert.assertTrue(rmState.getApplicationState().size() > 0);
          Assert.assertTrue(appState.getApplicationSubmissionContext().getApplicationId().compareTo(prevId) > 0);
          prevId=appState.getApplicationSubmissionContext().getApplicationId();
        }
      }
    }
;
    try {
      rm1.start();
    }
  finally {
      rm1.stop();
    }
  }
  @SuppressWarnings("resource") @Test(timeout=60000) public void testQueueMetricsOnRMRestart() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    QueueMetrics qm1=rm1.getResourceScheduler().getRootQueueMetrics();
    resetQueueMetrics(qm1);
    assertQueueMetrics(qm1,0,0,0,0);
    RMApp app1=rm1.submitApp(200);
    rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    ApplicationAttemptId attemptId1=attempt1.getAppAttemptId();
    rm1.waitForState(attemptId1,RMAppAttemptState.SCHEDULED);
    assertQueueMetrics(qm1,1,1,0,0);
    nm1.nodeHeartbeat(true);
    rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    MockAM am1=rm1.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    am1.allocate("127.0.0.1",1000,1,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    List<Container> conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (conts.size() == 0) {
      nm1.nodeHeartbeat(true);
      conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
      Thread.sleep(500);
    }
    assertQueueMetrics(qm1,1,0,1,0);
    MockRM rm2=createMockRM(conf,rm1.getRMStateStore());
    QueueMetrics qm2=rm2.getResourceScheduler().getRootQueueMetrics();
    resetQueueMetrics(qm2);
    assertQueueMetrics(qm2,0,0,0,0);
    rm2.start();
    nm1.setResourceTrackerService(rm2.getResourceTrackerService());
    RMApp loadedApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
    nm1.nodeHeartbeat(true);
    nm1=new MockNM("127.0.0.1:1234",15120,rm2.getResourceTrackerService());
    NMContainerStatus status=TestRMRestart.createNMContainerStatus(loadedApp1.getCurrentAppAttempt().getAppAttemptId(),1,ContainerState.COMPLETE);
    nm1.registerNode(Arrays.asList(status),null);
    while (loadedApp1.getAppAttempts().size() != 2) {
      Thread.sleep(200);
    }
    attempt1=loadedApp1.getCurrentAppAttempt();
    attemptId1=attempt1.getAppAttemptId();
    rm2.waitForState(attemptId1,RMAppAttemptState.SCHEDULED);
    assertQueueMetrics(qm2,1,1,0,0);
    nm1.nodeHeartbeat(true);
    rm2.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
    assertQueueMetrics(qm2,1,0,1,0);
    am1=rm2.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    am1.allocate("127.0.0.1",1000,3,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (conts.size() == 0) {
      nm1.nodeHeartbeat(true);
      conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
      Thread.sleep(500);
    }
    finishApplicationMaster(loadedApp1,rm2,nm1,am1);
    rm2.waitForAppRemovedFromScheduler(loadedApp1.getApplicationId());
    assertQueueMetrics(qm2,1,0,0,1);
  }
  private int appsSubmittedCarryOn=0;
  private int appsPendingCarryOn=0;
  private int appsRunningCarryOn=0;
  private int appsCompletedCarryOn=0;
  private void resetQueueMetrics(  QueueMetrics qm){
    appsSubmittedCarryOn=qm.getAppsSubmitted();
    appsPendingCarryOn=qm.getAppsPending();
    appsRunningCarryOn=qm.getAppsRunning();
    appsCompletedCarryOn=qm.getAppsCompleted();
  }
  private void assertQueueMetrics(  QueueMetrics qm,  int appsSubmitted,  int appsPending,  int appsRunning,  int appsCompleted){
    Assert.assertEquals(appsSubmitted + appsSubmittedCarryOn,qm.getAppsSubmitted());
    Assert.assertEquals(appsPending + appsPendingCarryOn,qm.getAppsPending());
    Assert.assertEquals(appsRunning + appsRunningCarryOn,qm.getAppsRunning());
    Assert.assertEquals(appsCompleted + appsCompletedCarryOn,qm.getAppsCompleted());
  }
  @Test(timeout=60000) public void testDecomissionedNMsMetricsOnRMRestart() throws Exception {
    conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,hostFile.getAbsolutePath());
    writeToHostsFile("");
    MockRM rm1=null, rm2=null;
    try {
      rm1=new MockRM(conf);
      rm1.start();
      MockNM nm1=rm1.registerNode("localhost:1234",8000);
      MockNM nm2=rm1.registerNode("host2:1234",8000);
      Resource expectedCapability=Resource.newInstance(nm1.getMemory(),nm1.getvCores());
      String expectedVersion=nm1.getVersion();
      Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
      String ip=NetUtils.normalizeHostName("localhost");
      writeToHostsFile("host2",ip);
      rm1.getNodesListManager().refreshNodes(conf);
      NodeHeartbeatResponse nodeHeartbeat=nm1.nodeHeartbeat(true);
      Assert.assertTrue(NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
      nodeHeartbeat=nm2.nodeHeartbeat(true);
      Assert.assertTrue("The decommisioned metrics are not updated",NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
      rm1.drainEvents();
      Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
      verifyNodesAfterDecom(rm1,2,expectedCapability,expectedVersion);
      rm1.stop();
      rm1=null;
      Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
      rm2=new MockRM(conf);
      rm2.start();
      rm2.drainEvents();
      Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
      verifyNodesAfterDecom(rm2,2,Resource.newInstance(0,0),"unknown");
    }
  finally {
      if (rm1 != null) {
        rm1.stop();
      }
      if (rm2 != null) {
        rm2.stop();
      }
    }
  }
  private void verifyNodesAfterDecom(  MockRM rm,  int numNodes,  Resource expectedCapability,  String expectedVersion){
    ConcurrentMap<NodeId,RMNode> inactiveRMNodes=rm.getRMContext().getInactiveRMNodes();
    Assert.assertEquals(numNodes,inactiveRMNodes.size());
    for (    RMNode rmNode : inactiveRMNodes.values()) {
      Assert.assertEquals(expectedCapability,rmNode.getTotalCapability());
      Assert.assertEquals(expectedVersion,rmNode.getNodeManagerVersion());
    }
  }
  @Test(timeout=20000) public void testSynchronouslyRenewDTOnRecovery() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    MockRM rm1=createMockRM(conf);
    rm1.start();
    final MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    final MockAM am0=MockRM.launchAndRegisterAM(app0,rm1,nm1);
    MockRM rm2=new MockRM(conf,rm1.getRMStateStore()){
      @Override protected ResourceTrackerService createResourceTrackerService(){
        return new ResourceTrackerService(this.rmContext,this.nodesListManager,this.nmLivelinessMonitor,this.rmContext.getContainerTokenSecretManager(),this.rmContext.getNMTokenSecretManager()){
          @Override protected void serviceStart() throws Exception {
            super.serviceStart();
            nm1.setResourceTrackerService(getResourceTrackerService());
            NMContainerStatus status=TestRMRestart.createNMContainerStatus(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
            nm1.registerNode(Arrays.asList(status),null);
          }
        }
;
      }
    }
;
    try {
      rm2.start();
      RMApp loadedApp0=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
      int timeoutSecs=0;
      while (loadedApp0.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {
        Thread.sleep(200);
      }
      MockAM am1=MockRM.launchAndRegisterAM(loadedApp0,rm2,nm1);
      MockRM.finishAMAndVerifyAppState(loadedApp0,rm2,nm1,am1);
    }
  finally {
      rm2.stop();
    }
  }
  private void writeToHostsFile(  String... hosts) throws IOException {
    if (!hostFile.exists()) {
      TEMP_DIR.mkdirs();
      hostFile.createNewFile();
    }
    FileOutputStream fStream=null;
    try {
      fStream=new FileOutputStream(hostFile);
      for (int i=0; i < hosts.length; i++) {
        fStream.write(hosts[i].getBytes());
        fStream.write(System.getProperty("line.separator").getBytes());
      }
    }
  finally {
      if (fStream != null) {
        IOUtils.closeStream(fStream);
        fStream=null;
      }
    }
  }
  public static NMContainerStatus createNMContainerStatus(  ApplicationAttemptId appAttemptId,  int id,  ContainerState containerState){
    return createNMContainerStatus(appAttemptId,id,containerState,RMNodeLabelsManager.NO_LABEL);
  }
  public static NMContainerStatus createNMContainerStatus(  ApplicationAttemptId appAttemptId,  int id,  ContainerState containerState,  String nodeLabelExpression){
    ContainerId containerId=ContainerId.newContainerId(appAttemptId,id);
    NMContainerStatus containerReport=NMContainerStatus.newInstance(containerId,0,containerState,Resource.newInstance(1024,1),"recover container",0,Priority.newInstance(0),0,nodeLabelExpression,ExecutionType.GUARANTEED,-1);
    return containerReport;
  }
public class TestMemoryRMStateStore extends MemoryRMStateStore {
    int count=0;
    public int updateApp=0;
    public int updateAttempt=0;
    @Override public void updateApplicationStateInternal(    ApplicationId appId,    ApplicationStateData appStateData) throws Exception {
      updateApp=++count;
      super.updateApplicationStateInternal(appId,appStateData);
    }
    @Override public synchronized void updateApplicationAttemptStateInternal(    ApplicationAttemptId attemptId,    ApplicationAttemptStateData attemptStateData) throws Exception {
      updateAttempt=++count;
      super.updateApplicationAttemptStateInternal(attemptId,attemptStateData);
    }
  }
public static class TestSecurityMockRM extends MockRM {
    public TestSecurityMockRM(    Configuration conf,    RMStateStore store){
      super(conf,store);
    }
    public TestSecurityMockRM(    Configuration conf){
      super(conf);
    }
    @Override public void init(    Configuration conf){
      RMDelegationTokenIdentifier.Renewer.setSecretManager(null,null);
      super.init(conf);
    }
    @Override protected ClientRMService createClientRMService(){
      return new ClientRMService(getRMContext(),getResourceScheduler(),rmAppManager,applicationACLsManager,null,getRMContext().getRMDelegationTokenSecretManager()){
        @Override protected void serviceStart() throws Exception {
        }
        @Override protected void serviceStop() throws Exception {
        }
      }
;
    }
    @Override protected void doSecureLogin() throws IOException {
    }
  }
  @Test(timeout=20000) public void testRMRestartRecoveringNodeLabelManager() throws Exception {
    File nodeLabelFsStoreDir=new File("target",this.getClass().getSimpleName() + "-testRMRestartRecoveringNodeLabelManager");
    if (nodeLabelFsStoreDir.exists()) {
      FileUtils.deleteDirectory(nodeLabelFsStoreDir);
    }
    nodeLabelFsStoreDir.deleteOnExit();
    String nodeLabelFsStoreDirURI=nodeLabelFsStoreDir.toURI().toString();
    conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,nodeLabelFsStoreDirURI);
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    MockRM rm1=new MockRM(conf){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    rm1.init(conf);
    rm1.start();
    RMNodeLabelsManager nodeLabelManager=rm1.getRMContext().getNodeLabelManager();
    Set<String> clusterNodeLabels=new HashSet<String>();
    clusterNodeLabels.add("x");
    clusterNodeLabels.add("y");
    clusterNodeLabels.add("z");
    nodeLabelManager.addToCluserNodeLabelsWithDefaultExclusivity(clusterNodeLabels);
    NodeId n1=NodeId.newInstance("h1",0);
    nodeLabelManager.addLabelsToNode(ImmutableMap.of(n1,toSet("x")));
    clusterNodeLabels.remove("z");
    nodeLabelManager.removeFromClusterNodeLabels(toSet("z"));
    nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n1,toSet("y")));
    int count=10;
    while (count-- > 0) {
      if (nodeLabelManager.getNodeLabels().size() > 0) {
        break;
      }
      Thread.sleep(500);
    }
    Assert.assertEquals(clusterNodeLabels.size(),nodeLabelManager.getClusterNodeLabelNames().size());
    Map<NodeId,Set<String>> nodeLabels=nodeLabelManager.getNodeLabels();
    Assert.assertEquals(1,nodeLabelManager.getNodeLabels().size());
    Assert.assertTrue(nodeLabels.get(n1).equals(toSet("y")));
    MockRM rm2=new MockRM(conf,rm1.getRMStateStore()){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    rm2.init(conf);
    rm2.start();
    nodeLabelManager=rm2.getRMContext().getNodeLabelManager();
    Assert.assertEquals(clusterNodeLabels.size(),nodeLabelManager.getClusterNodeLabelNames().size());
    nodeLabels=nodeLabelManager.getNodeLabels();
    Assert.assertEquals(1,nodeLabelManager.getNodeLabels().size());
    Assert.assertTrue(nodeLabels.get(n1).equals(toSet("y")));
    rm1.stop();
    rm2.stop();
  }
  @Test(timeout=60000) public void testRMRestartFailAppAttempt() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    int maxAttempt=conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    MockAM am0=launchAM(app0,rm1,nm1);
    ApplicationId applicationId=app0.getApplicationId();
    ApplicationAttemptId appAttemptId1=app0.getCurrentAppAttempt().getAppAttemptId();
    Assert.assertEquals(1,appAttemptId1.getAttemptId());
    rm1.failApplicationAttempt(appAttemptId1);
    rm1.waitForState(appAttemptId1,RMAppAttemptState.FAILED);
    rm1.waitForState(applicationId,RMAppState.ACCEPTED);
    ApplicationAttemptId appAttemptId2=app0.getCurrentAppAttempt().getAppAttemptId();
    Assert.assertEquals(2,appAttemptId2.getAttemptId());
    rm1.waitForState(appAttemptId2,RMAppAttemptState.SCHEDULED);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    RMApp loadedApp0=rm2.getRMContext().getRMApps().get(applicationId);
    rm2.waitForState(applicationId,RMAppState.ACCEPTED);
    rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    Thread.sleep(1000);
    Assert.assertEquals(2,loadedApp0.getAppAttempts().size());
    rm2.waitForState(appAttemptId2,RMAppAttemptState.SCHEDULED);
    appAttemptId2=loadedApp0.getCurrentAppAttempt().getAppAttemptId();
    Assert.assertEquals(2,appAttemptId2.getAttemptId());
    rm2.failApplicationAttempt(appAttemptId2);
    rm2.waitForState(appAttemptId2,RMAppAttemptState.FAILED);
    rm2.waitForState(applicationId,RMAppState.FAILED);
    Assert.assertEquals(maxAttempt,loadedApp0.getAppAttempts().size());
  }
  private <E>Set<E> toSet(  E... elements){
    Set<E> set=Sets.newHashSet(elements);
    return set;
  }
  @Test(timeout=20000) public void testRMRestartNodeMapping() throws Exception {
    File nodeLabelFsStoreDir=new File("target",this.getClass().getSimpleName() + "-testRMRestartNodeMapping");
    if (nodeLabelFsStoreDir.exists()) {
      FileUtils.deleteDirectory(nodeLabelFsStoreDir);
    }
    nodeLabelFsStoreDir.deleteOnExit();
    String nodeLabelFsStoreDirURI=nodeLabelFsStoreDir.toURI().toString();
    conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,nodeLabelFsStoreDirURI);
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    MockRM rm1=new MockRM(conf){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    rm1.init(conf);
    rm1.start();
    RMNodeLabelsManager nodeLabelManager=rm1.getRMContext().getNodeLabelManager();
    Set<String> clusterNodeLabels=new HashSet<String>();
    clusterNodeLabels.add("x");
    clusterNodeLabels.add("y");
    nodeLabelManager.addToCluserNodeLabelsWithDefaultExclusivity(clusterNodeLabels);
    NodeId n1=NodeId.newInstance("h1",1234);
    NodeId n2=NodeId.newInstance("h1",1235);
    NodeId nihost=NodeId.newInstance("h1",0);
    nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n1,toSet("x")));
    nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n2,toSet("x")));
    nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(nihost,toSet("y")));
    nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n1,toSet("x")));
    MockRM rm2=null;
    for (int i=0; i < 2; i++) {
      rm2=new MockRM(conf,rm1.getRMStateStore()){
        @Override protected RMNodeLabelsManager createNodeLabelManager(){
          RMNodeLabelsManager mgr=new RMNodeLabelsManager();
          mgr.init(getConfig());
          return mgr;
        }
      }
;
      rm2.init(conf);
      rm2.start();
      nodeLabelManager=rm2.getRMContext().getNodeLabelManager();
      Map<String,Set<NodeId>> labelsToNodes=nodeLabelManager.getLabelsToNodes(toSet("x"));
      Assert.assertEquals(1,null == labelsToNodes.get("x") ? 0 : labelsToNodes.get("x").size());
    }
    rm1.stop();
    rm2.stop();
  }
  @Test(timeout=120000) public void testRMRestartAfterPreemption() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
    if (!getSchedulerType().equals(SchedulerType.CAPACITY)) {
      return;
    }
    MockRM rm1=new MockRM(conf);
    rm1.start();
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    int CONTAINER_MEMORY=1024;
    RMApp app0=rm1.submitApp(CONTAINER_MEMORY);
    MockAM am0=MockRM.launchAM(app0,rm1,nm1);
    nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(cs,am0.getApplicationAttemptId());
    for (int i=0; i < 4; i++) {
      am0=MockRM.launchAM(app0,rm1,nm1);
      am0.registerAppAttempt();
      FiCaSchedulerApp schedulerAppAttempt=cs.getSchedulerApplications().get(app0.getApplicationId()).getCurrentAppAttempt();
      cs.markContainerForKillable(schedulerAppAttempt.getRMContainer(app0.getCurrentAppAttempt().getMasterContainer().getId()));
      rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FAILED);
      TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(cs,am0.getApplicationAttemptId());
    }
    am0=MockRM.launchAM(app0,rm1,nm1);
    am0.registerAppAttempt();
    rm1.killApp(app0.getApplicationId());
    rm1.waitForState(app0.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.KILLED);
    MockRM rm2=null;
    try {
      rm2=new MockRM(conf,memStore);
      rm2.start();
      Assert.assertTrue("RM start successfully",true);
    }
 catch (    Exception e) {
      LOG.debug("Exception on start",e);
      Assert.fail("RM should start with out any issue");
    }
 finally {
      rm1.stop();
    }
  }
  @Test(timeout=60000) public void testRMRestartOnMissingAttempts() throws Exception {
    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,5);
    MockRM rm1=createMockRM(conf);
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
    nm1.registerNode();
    RMApp app0=rm1.submitApp(200);
    ApplicationStateData app0State=memStore.getState().getApplicationState().get(app0.getApplicationId());
    MockAM am0=launchAndFailAM(app0,rm1,nm1);
    MockAM am1=launchAndFailAM(app0,rm1,nm1);
    MockAM am2=launchAndFailAM(app0,rm1,nm1);
    MockAM am3=launchAM(app0,rm1,nm1);
    memStore.removeApplicationAttemptInternal(am1.getApplicationAttemptId());
    ApplicationAttemptStateData am2State=app0State.getAttempt(am2.getApplicationAttemptId());
    am2State.setState(null);
    MockRM rm2=createMockRM(conf,memStore);
    rm2.start();
    Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
    RMApp recoveredApp0=rm2.getRMContext().getRMApps().values().iterator().next();
    Map<ApplicationAttemptId,RMAppAttempt> recoveredAppAttempts=recoveredApp0.getAppAttempts();
    Assert.assertEquals(3,recoveredAppAttempts.size());
    Assert.assertEquals(RMAppAttemptState.FAILED,recoveredAppAttempts.get(am0.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(RMAppAttemptState.FAILED,recoveredAppAttempts.get(am2.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(RMAppAttemptState.LAUNCHED,recoveredAppAttempts.get(am3.getApplicationAttemptId()).getAppAttemptState());
    Assert.assertEquals(5,((RMAppImpl)app0).getNextAttemptId());
  }
  private MockAM launchAndFailAM(  RMApp app,  MockRM rm,  MockNM nm) throws Exception {
    MockAM am=launchAM(app,rm,nm);
    nm.nodeHeartbeat(am.getApplicationAttemptId(),1,ContainerState.COMPLETE);
    rm.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FAILED);
    return am;
  }
  @Test(timeout=60000) public void testRMRestartAfterNodeLabelDisabled() throws Exception {
    if (getSchedulerType() != SchedulerType.CAPACITY) {
      return;
    }
    File nodeLabelFsStoreDir=new File("target",this.getClass().getSimpleName() + "-testRMRestartAfterNodeLabelDisabled");
    if (nodeLabelFsStoreDir.exists()) {
      FileUtils.deleteDirectory(nodeLabelFsStoreDir);
    }
    nodeLabelFsStoreDir.deleteOnExit();
    String nodeLabelFsStoreDirURI=nodeLabelFsStoreDir.toURI().toString();
    conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,nodeLabelFsStoreDirURI);
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
    MockRM rm1=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf)){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    rm1.start();
    MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
    Set<String> clusterNodeLabels=new HashSet<String>();
    clusterNodeLabels.add("x");
    RMNodeLabelsManager nodeLabelManager=rm1.getRMContext().getNodeLabelManager();
    nodeLabelManager.addToCluserNodeLabelsWithDefaultExclusivity(clusterNodeLabels);
    nodeLabelManager.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
    MockNM nm1=rm1.registerNode("h1:1234",8000);
    RMApp app1=rm1.submitApp(200,"someApp","someUser",null,"a1","x");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
    ContainerId amContainerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
    Assert.assertEquals("x",rm1.getRMContext().getScheduler().getRMContainer(amContainerId1).getNodeLabelExpression());
    finishApplicationMaster(app1,rm1,nm1,am1);
    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,false);
    MockRM rm2=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf),memStore){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    try {
      rm2.start();
      Assert.assertTrue("RM start successfully",true);
      Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
    }
 catch (    Exception e) {
      LOG.debug("Exception on start",e);
      Assert.fail("RM should start without any issue");
    }
 finally {
      rm1.stop();
      rm2.stop();
    }
  }
  @Test(timeout=20000) public void testRMRestartAfterPriorityChangesInAllocatedResponse() throws Exception {
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,false);
    conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
    MockRM rm=new TestSecurityMockRM(conf);
    rm.start();
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm.getRMStateStore();
    MockNM nm1=rm.registerNode("127.0.0.1:1234",6 * 1024);
    Priority appPriority1=Priority.newInstance(5);
    RMApp app1=rm.submitApp(2048,appPriority1,getCreds(),getTokensConf());
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    AllocateRequestPBImpl allocateRequest=new AllocateRequestPBImpl();
    List<ContainerId> release=new ArrayList<ContainerId>();
    List<ResourceRequest> ask=new ArrayList<ResourceRequest>();
    allocateRequest.setReleaseList(release);
    allocateRequest.setAskList(ask);
    AllocateResponse response1=am1.allocate(allocateRequest);
    Assert.assertEquals(appPriority1,response1.getApplicationPriority());
    Priority appPriority2=Priority.newInstance(8);
    UserGroupInformation ugi=UserGroupInformation.createRemoteUser(app1.getUser());
    rm.getRMAppManager().updateApplicationPriority(ugi,app1.getApplicationId(),appPriority2);
    AllocateResponse response2=am1.allocate(allocateRequest);
    Assert.assertEquals(appPriority2,response2.getApplicationPriority());
    Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
    ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
    Assert.assertEquals(getTokensConf(),appState.getApplicationSubmissionContext().getAMContainerSpec().getTokensConf());
    MockRM rm2=new TestSecurityMockRM(conf,memStore);
    rm2.start();
    AllocateResponse response3=am1.allocate(allocateRequest);
    Assert.assertEquals(appPriority2,response3.getApplicationPriority());
    Map<ApplicationId,ApplicationStateData> rmAppStateNew=memStore.getState().getApplicationState();
    ApplicationStateData appStateNew=rmAppStateNew.get(app1.getApplicationId());
    Assert.assertEquals(getTokensConf(),appStateNew.getApplicationSubmissionContext().getAMContainerSpec().getTokensConf());
    rm.stop();
    rm2.stop();
  }
  @Test(timeout=20000) public void testRMRestartAfterUpdateTrackingUrl() throws Exception {
    MockRM rm=new MockRM(conf);
    rm.start();
    MemoryRMStateStore memStore=(MemoryRMStateStore)rm.getRMStateStore();
    MockNM nm1=rm.registerNode("127.0.0.1:1234",6 * 1024);
    RMApp app1=rm.submitApp(2048);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    AllocateRequestPBImpl allocateRequest=new AllocateRequestPBImpl();
    String newTrackingUrl="hadoop.apache.org";
    allocateRequest.setTrackingUrl(newTrackingUrl);
    am1.allocate(allocateRequest);
    Assert.assertEquals(newTrackingUrl,rm.getRMContext().getRMApps().get(app1.getApplicationId()).getOriginalTrackingUrl());
    Assert.assertEquals(newTrackingUrl,rm.getRMContext().getRMApps().get(app1.getApplicationId()).getCurrentAppAttempt().getOriginalTrackingUrl());
    Assert.assertEquals(newTrackingUrl,memStore.getState().getApplicationState().get(app1.getApplicationId()).getAttempt(attempt1.getAppAttemptId()).getFinalTrackingUrl());
    MockRM rm2=new MockRM(conf,memStore);
    rm2.start();
    Assert.assertEquals(newTrackingUrl,rm.getRMContext().getRMApps().get(app1.getApplicationId()).getOriginalTrackingUrl());
    Assert.assertEquals(newTrackingUrl,rm.getRMContext().getRMApps().get(app1.getApplicationId()).getCurrentAppAttempt().getOriginalTrackingUrl());
    rm.stop();
    rm2.stop();
  }
  private Credentials getCreds() throws IOException {
    Credentials ts=new Credentials();
    DataOutputBuffer dob=new DataOutputBuffer();
    ts.writeTokenStorageToStream(dob);
    return ts;
  }
  private ByteBuffer getTokensConf() throws IOException {
    DataOutputBuffer dob=new DataOutputBuffer();
    Configuration appConf=new Configuration(false);
    appConf.clear();
    appConf.set("dfs.nameservices","mycluster1,mycluster2");
    appConf.set("dfs.namenode.rpc-address.mycluster2.nn1","123.0.0.1");
    appConf.set("dfs.namenode.rpc-address.mycluster3.nn2","123.0.0.2");
    appConf.write(dob);
    ByteBuffer tokenConf=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    return tokenConf;
  }
}
