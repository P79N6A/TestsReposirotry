/** 
 * updatePipeline 
 */
class UpdatePipelineOp extends AtMostOnceOp {
  private final String file;
  private ExtendedBlock oldBlock;
  private ExtendedBlock newBlock;
  private DatanodeInfo[] nodes;
  private FSDataOutputStream out;
  public UpdatePipelineOp(  DFSClient client,  String file){
    super("updatePipeline",client);
    this.file=file;
  }
  @Override void prepare() throws Exception {
    final Path filePath=new Path(file);
    DFSTestUtil.createFile(dfs,filePath,BlockSize,DataNodes,0);
    out=this.client.append(file,BlockSize,EnumSet.of(CreateFlag.APPEND),null,null);
    byte[] appendContent=new byte[100];
    new Random().nextBytes(appendContent);
    out.write(appendContent);
    ((HdfsDataOutputStream)out).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
    LocatedBlocks blks=dfs.getClient().getLocatedBlocks(file,BlockSize + 1);
    assertEquals(1,blks.getLocatedBlocks().size());
    nodes=blks.get(0).getLocations();
    oldBlock=blks.get(0).getBlock();
    LocatedBlock newLbk=client.getNamenode().updateBlockForPipeline(oldBlock,client.getClientName());
    newBlock=new ExtendedBlock(oldBlock.getBlockPoolId(),oldBlock.getBlockId(),oldBlock.getNumBytes(),newLbk.getBlock().getGenerationStamp());
  }
  @Override void invoke() throws Exception {
    DatanodeInfo[] newNodes=new DatanodeInfo[2];
    newNodes[0]=nodes[0];
    newNodes[1]=nodes[1];
    final DatanodeManager dm=cluster.getNamesystem(0).getBlockManager().getDatanodeManager();
    final String storageID1=dm.getDatanode(newNodes[0]).getStorageInfos()[0].getStorageID();
    final String storageID2=dm.getDatanode(newNodes[1]).getStorageInfos()[0].getStorageID();
    String[] storageIDs={storageID1,storageID2};
    client.getNamenode().updatePipeline(client.getClientName(),oldBlock,newBlock,newNodes,storageIDs);
    DFSTestUtil.abortStream((DFSOutputStream)out.getWrappedStream());
  }
  @Override boolean checkNamenodeBeforeReturn() throws Exception {
    INodeFile fileNode=cluster.getNamesystem(0).getFSDirectory().getINode4Write(file).asFile();
    BlockInfo blkUC=(fileNode.getBlocks())[1];
    int datanodeNum=blkUC.getUnderConstructionFeature().getExpectedStorageLocations().length;
    for (int i=0; i < CHECKTIMES && datanodeNum != 2; i++) {
      Thread.sleep(1000);
      datanodeNum=blkUC.getUnderConstructionFeature().getExpectedStorageLocations().length;
    }
    return datanodeNum == 2;
  }
  @Override Object getResult(){
    return null;
  }
}
