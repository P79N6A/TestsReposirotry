/** 
 * Test class for IntraQueuePreemption scenarios.
 */
public class TestProportionalCapacityPreemptionPolicyIntraQueueUserLimit extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Before public void setup(){
    super.setup();
    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,true);
    policy=new ProportionalCapacityPreemptionPolicy(rmContext,cs,mClock);
  }
  @Test public void testSimpleIntraQueuePreemptionWithTwoUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 30 0]);" + "-a(=[100 100 100 30 0])";
    String appsConfig="a\t" + "(1,1,n1,,100,false,0,user1);" + "a\t"+ "(1,1,n1,,0,false,30,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(30)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testNoIntraQueuePreemptionWithSingleUser() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 30 0]);" + "-a(=[100 100 100 30 0])";
    String appsConfig="a\t" + "(1,1,n1,,100,false,0,user1);" + "a\t"+ "(1,1,n1,,0,false,30,user1)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testNoIntraQueuePreemptionWithTwoUserUnderUserLimit() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 30 0]);" + "-a(=[100 100 80 30 0])";
    String appsConfig="a\t" + "(1,1,n1,,50,false,0,user1);" + "a\t"+ "(1,1,n1,,30,false,30,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testSimpleIntraQueuePreemptionWithTwoUsersWithAppPriority() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 30 0]);" + "-a(=[100 100 100 30 0])";
    String appsConfig="a\t" + "(2,1,n1,,100,false,0,user1);" + "a\t"+ "(1,1,n1,,0,false,30,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(30)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testIntraQueuePreemptionOfUserLimitWithMultipleApps() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 90 0]);" + "-a(=[100 100 80 90 0])";
    String appsConfig="a\t" + "(1,1,n1,,30,false,30,user1);" + "a\t"+ "(1,1,n1,,20,false,20,user2);"+ "a\t"+ "(1,1,n1,,30,false,30,user1);"+ "a\t"+ "(1,1,n1,,0,false,10,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  }
  @Test public void testNoPreemptionOfUserLimitWithMultipleAppsAndSameUser() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 90 0]);" + "-a(=[100 100 80 90 0])";
    String appsConfig="a\t" + "(1,1,n1,,30,false,20,user1);" + "a\t"+ "(1,1,n1,,20,false,20,user1);"+ "a\t"+ "(1,1,n1,,30,false,30,user1);"+ "a\t"+ "(1,1,n1,,0,false,10,user1)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
  }
  @Test public void testIntraQueuePreemptionOfUserLimitWitAppsOfDifferentPriority() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 80 60 0]);" + "-a(=[100 100 80 60 0])";
    String appsConfig="a\t" + "(3,1,n1,,30,false,30,user1);" + "a\t"+ "(1,1,n1,,20,false,20,user2);"+ "a\t"+ "(4,1,n1,,30,false,0,user1);"+ "a\t"+ "(1,1,n1,,0,false,10,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testIntraQueuePreemptionOfUserLimitInTwoQueues() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 90 80 0]);" + "-a(=[60 100 55 60 0]);" + "-b(=[40 100 35 20 0])";
    String appsConfig="a\t" + "(3,1,n1,,20,false,30,user1);" + "a\t"+ "(1,1,n1,,20,false,20,user2);"+ "a\t"+ "(4,1,n1,,15,false,0,user1);"+ "a\t"+ "(1,1,n1,,0,false,10,user2);"+ "b\t"+ "(3,1,n1,,25,false,10,user1);"+ "b\t"+ "(1,1,n1,,10,false,10,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(4)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(5))));
  }
  @Test public void testIntraQueuePreemptionWithTwoRequestingUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 20 0]);" + "-a(=[100 100 100 20 0])";
    String appsConfig="a\t" + "(1,1,n1,,60,false,10,user1);" + "a\t"+ "(1,1,n1,,40,false,10,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(9)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNoIntraQueuePreemptionIfBelowUserLimitAndLowPriorityExtraUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.7);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 10 0]);" + "-a(=[100 100 100 10 0])";
    String appsConfig="a\t(1,1,n1,,50,false,0,user1)\t50;" + "a\t(1,1,n1,,50,false,0,user2)\t50;" + "a\t(0,1,n1,,0,false,10,user3)\t50";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNoIntraQueuePreemptionIfBelowUserLimitAndSamePriorityExtraUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.7);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 10 0]);" + "-a(=[100 100 100 10 0])";
    String appsConfig="a\t(1,1,n1,,50,false,0,user1)\t50;" + "a\t(1,1,n1,,50,false,0,user2)\t50;" + "a\t(1,1,n1,,0,false,10,user3)\t50";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNoIntraQueuePreemptionIfBelowUserLimitAndHighPriorityExtraUsers() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.7);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 10 0]);" + "-a(=[100 100 100 10 0])";
    String appsConfig="a\t(1,1,n1,,50,false,0,user1)\t50;" + "a\t(1,1,n1,,50,false,0,user2)\t50;" + "a\t(5,1,n1,,0,false,10,user3)\t50";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testNoIntraQueuePreemptionWithUserLimitDeadzone() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 20 0]);" + "-a(=[100 100 100 20 0])";
    String appsConfig="a\t" + "(1,3,n1,,20,false,10,user1);" + "a\t"+ "(1,1,n1,,40,false,10,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(3)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  }
  @Test public void testIntraQueuePreemptionWithUserLimitDeadzoneAndPriority() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 20 0]);" + "-a(=[100 100 100 20 0])";
    String appsConfig="a\t" + "(1,3,n1,,20,false,10,user1);" + "a\t"+ "(2,1,n1,,0,false,10,user1);"+ "a\t"+ "(1,1,n1,,40,false,20,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(3)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
    verify(mDisp,times(0)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    appsConfig="a\t" + "(1,3,n1,,17,false,10,user1);" + "a\t"+ "(2,1,n1,,0,false,10,user1);"+ "a\t"+ "(1,1,n1,,49,false,11,user2)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(3)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
  @Test public void testSimpleIntraQueuePreemptionOneUserUnderOneUserAtOneUserAbove() throws IOException {
    conf.setFloat(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_MAX_ALLOWABLE_LIMIT,(float)0.5);
    String labelsConfig="=100,true;";
    String nodesConfig="n1= res=100";
    String queuesConfig="root(=[100 100 100 1 0]);" + "-a(=[100 100 100 1 0])";
    String appsConfig="a\t" + "(1,1,n1,,65,false,0,user1);" + "a\t"+ "(1,1,n1,,35,false,0,user2);"+ "a\t"+ "(1,1,n1,,0,false,1,user3)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(1)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  }
}
