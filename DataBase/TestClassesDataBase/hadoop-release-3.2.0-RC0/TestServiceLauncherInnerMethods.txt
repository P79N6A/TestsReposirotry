/** 
 * Test the inner launcher methods.
 */
@SuppressWarnings("ThrowableResultOfMethodCallIgnored") public class TestServiceLauncherInnerMethods extends AbstractServiceLauncherTestBase {
  @Test public void testLaunchService() throws Throwable {
    ServiceLauncher<NoArgsAllowedService> launcher=launchService(NoArgsAllowedService.class,new Configuration());
    NoArgsAllowedService service=launcher.getService();
    assertNotNull("null service from " + launcher,service);
    service.stop();
  }
  @Test public void testLaunchServiceArgs() throws Throwable {
    launchExpectingException(NoArgsAllowedService.class,new Configuration(),"arguments",EXIT_COMMAND_ARGUMENT_ERROR,"one","two");
  }
  @Test public void testAccessLaunchedService() throws Throwable {
    ServiceLauncher<LaunchableRunningService> launcher=launchService(LaunchableRunningService.class,new Configuration());
    LaunchableRunningService service=launcher.getService();
    assertInState(service,Service.STATE.STARTED);
    service.failInRun=true;
    service.setExitCode(EXIT_CONNECTIVITY_PROBLEM);
    assertEquals(EXIT_CONNECTIVITY_PROBLEM,service.execute());
  }
  @Test public void testLaunchThrowableRaised() throws Throwable {
    launchExpectingException(ExceptionInExecuteLaunchableService.class,new Configuration(),"java.lang.OutOfMemoryError",EXIT_EXCEPTION_THROWN,ExceptionInExecuteLaunchableService.ARG_THROWABLE);
  }
  @Test public void testBreakableServiceLifecycle() throws Throwable {
    ServiceLauncher<BreakableService> launcher=launchService(BreakableService.class,new Configuration());
    BreakableService service=launcher.getService();
    assertNotNull("null service from " + launcher,service);
    service.stop();
  }
  @Test public void testConfigLoading() throws Throwable {
    ServiceLauncher<BreakableService> launcher=new ServiceLauncher<>("BreakableService");
    List<String> configurationsToCreate=launcher.getConfigurationsToCreate();
    assertTrue(configurationsToCreate.size() > 1);
    int created=launcher.loadConfigurationClasses();
    assertEquals(1,created);
  }
}
