public class TestInterns {
  @Test public void testInfo(){
    MetricsInfo info=info("m","m desc");
    assertSame("same info",info,info("m","m desc"));
  }
  @Test public void testTag(){
    MetricsTag tag=tag("t","t desc","t value");
    assertSame("same tag",tag,tag("t","t desc","t value"));
  }
  @Test public void testInfoOverflow(){
    MetricsInfo i0=info("m0","m desc");
    for (int i=0; i < MAX_INFO_NAMES + 1; ++i) {
      info("m" + i,"m desc");
      if (i < MAX_INFO_NAMES) {
        assertSame("m0 is still there",i0,info("m0","m desc"));
      }
    }
    assertNotSame("m0 is gone",i0,info("m0","m desc"));
    MetricsInfo i1=info("m1","m desc");
    for (int i=0; i < MAX_INFO_DESCS; ++i) {
      info("m1","m desc" + i);
      if (i < MAX_INFO_DESCS - 1) {
        assertSame("i1 is still there",i1,info("m1","m desc"));
      }
    }
    assertNotSame("i1 is gone",i1,info("m1","m desc"));
  }
  @Test public void testTagOverflow(){
    MetricsTag t0=tag("t0","t desc","t value");
    for (int i=0; i < MAX_TAG_NAMES + 1; ++i) {
      tag("t" + i,"t desc","t value");
      if (i < MAX_TAG_NAMES) {
        assertSame("t0 still there",t0,tag("t0","t desc","t value"));
      }
    }
    assertNotSame("t0 is gone",t0,tag("t0","t desc","t value"));
    MetricsTag t1=tag("t1","t desc","t value");
    for (int i=0; i < MAX_TAG_VALUES; ++i) {
      tag("t1","t desc","t value" + i);
      if (i < MAX_TAG_VALUES - 1) {
        assertSame("t1 is still there",t1,tag("t1","t desc","t value"));
      }
    }
    assertNotSame("t1 is gone",t1,tag("t1","t desc","t value"));
  }
}
