public class TestHdfsCryptoStreams extends CryptoStreamsTestBase {
  private static MiniDFSCluster dfsCluster;
  private static FileSystem fs;
  private static int pathCount=0;
  private static Path path;
  private static Path file;
  @BeforeClass public static void init() throws Exception {
    Configuration conf=new HdfsConfiguration();
    dfsCluster=new MiniDFSCluster.Builder(conf).build();
    dfsCluster.waitClusterUp();
    fs=dfsCluster.getFileSystem();
    codec=CryptoCodec.getInstance(conf);
  }
  @AfterClass public static void shutdown() throws Exception {
    if (dfsCluster != null) {
      dfsCluster.shutdown();
    }
  }
  @Before @Override public void setUp() throws IOException {
    ++pathCount;
    path=new Path("/p" + pathCount);
    file=new Path(path,"file");
    FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0700));
    super.setUp();
  }
  @After public void cleanUp() throws IOException {
    fs.delete(path,true);
  }
  @Override protected OutputStream getOutputStream(  int bufferSize,  byte[] key,  byte[] iv) throws IOException {
    return new CryptoFSDataOutputStream(fs.create(file),codec,bufferSize,key,iv);
  }
  @Override protected InputStream getInputStream(  int bufferSize,  byte[] key,  byte[] iv) throws IOException {
    return new CryptoFSDataInputStream(fs.open(file),codec,bufferSize,key,iv);
  }
}
