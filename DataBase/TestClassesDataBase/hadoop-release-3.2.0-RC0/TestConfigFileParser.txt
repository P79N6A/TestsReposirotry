class TestConfigFileParser extends DefaultHandler {
  String charString=null;
  CLITestData td=null;
  ArrayList<CLICommand> testCommands=null;
  ArrayList<CLICommand> cleanupCommands=null;
  boolean runOnWindows=true;
  @Override public void startDocument() throws SAXException {
    testsFromConfigFile=new ArrayList<CLITestData>();
  }
  @Override public void startElement(  String uri,  String localName,  String qName,  Attributes attributes) throws SAXException {
    if (qName.equals("test")) {
      td=new CLITestData();
    }
 else     if (qName.equals("test-commands")) {
      testCommands=new ArrayList<CLICommand>();
    }
 else     if (qName.equals("cleanup-commands")) {
      cleanupCommands=new ArrayList<CLICommand>();
    }
 else     if (qName.equals("comparators")) {
      testComparators=new ArrayList<ComparatorData>();
    }
 else     if (qName.equals("comparator")) {
      comparatorData=new ComparatorData();
      comparatorData.setExitCode(-1);
    }
    charString="";
  }
  @Override public void endElement(  String uri,  String localName,  String qName) throws SAXException {
    if (qName.equals("description")) {
      td.setTestDesc(charString);
    }
 else     if (qName.equals("windows")) {
      runOnWindows=Boolean.parseBoolean(charString);
    }
 else     if (qName.equals("test-commands")) {
      td.setTestCommands(testCommands);
      testCommands=null;
    }
 else     if (qName.equals("cleanup-commands")) {
      td.setCleanupCommands(cleanupCommands);
      cleanupCommands=null;
    }
 else     if (qName.equals("command")) {
      if (testCommands != null) {
        testCommands.add(new CLITestCmd(charString,new CLICommandFS()));
      }
 else       if (cleanupCommands != null) {
        cleanupCommands.add(new CLITestCmd(charString,new CLICommandFS()));
      }
    }
 else     if (qName.equals("comparators")) {
      td.setComparatorData(testComparators);
    }
 else     if (qName.equals("comparator")) {
      testComparators.add(comparatorData);
    }
 else     if (qName.equals("type")) {
      comparatorData.setComparatorType(charString);
    }
 else     if (qName.equals("expected-output")) {
      comparatorData.setExpectedOutput(charString);
    }
 else     if (qName.equals("expected-exit-code")) {
      comparatorData.setExitCode(Integer.valueOf(charString));
    }
 else     if (qName.equals("test")) {
      if (!Shell.WINDOWS || runOnWindows) {
        testsFromConfigFile.add(td);
      }
      td=null;
      runOnWindows=true;
    }
 else     if (qName.equals("mode")) {
      testMode=charString;
      if (!testMode.equals(TESTMODE_NOCOMPARE) && !testMode.equals(TESTMODE_TEST)) {
        testMode=TESTMODE_TEST;
      }
    }
  }
  @Override public void characters(  char[] ch,  int start,  int length) throws SAXException {
    String s=new String(ch,start,length);
    charString+=s;
  }
}
