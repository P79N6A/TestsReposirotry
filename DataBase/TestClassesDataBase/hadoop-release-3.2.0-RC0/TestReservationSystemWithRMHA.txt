public class TestReservationSystemWithRMHA extends RMHATestBase {
  @Override public void setup() throws Exception {
    CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
    ReservationSystemTestUtil.setupQueueConfiguration(conf);
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    conf.setBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,true);
    configuration=conf;
    super.setup();
  }
  @Test public void testSubmitReservationAndCheckAfterFailover() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    explicitFailover();
    rm2.registerNode("127.0.0.1:1",102400,100);
    RMState state=rm2.getRMContext().getStateStore().loadState();
    Map<ReservationId,ReservationAllocationStateProto> reservationStateMap=state.getReservationState().get(ReservationSystemTestUtil.reservationQ);
    Assert.assertNotNull(reservationStateMap);
    Assert.assertNotNull(reservationStateMap.get(reservationID));
  }
  @Test public void testUpdateReservationAndCheckAfterFailover() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    long newDeadline=reservationDefinition.getDeadline() + 100;
    reservationDefinition.setDeadline(newDeadline);
    ReservationUpdateRequest updateRequest=ReservationUpdateRequest.newInstance(reservationDefinition,reservationID);
    rm1.updateReservationState(updateRequest);
    explicitFailover();
    rm2.registerNode("127.0.0.1:1",102400,100);
    RMState state=rm2.getRMContext().getStateStore().loadState();
    Map<ReservationId,ReservationAllocationStateProto> reservationStateMap=state.getReservationState().get(ReservationSystemTestUtil.reservationQ);
    Assert.assertNotNull(reservationStateMap);
    ReservationAllocationStateProto reservationState=reservationStateMap.get(reservationID);
    Assert.assertEquals(newDeadline,reservationState.getReservationDefinition().getDeadline());
  }
  @Test public void testDeleteReservationAndCheckAfterFailover() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    ReservationDeleteRequest deleteRequest=ReservationDeleteRequest.newInstance(reservationID);
    clientService.deleteReservation(deleteRequest);
    explicitFailover();
    rm2.registerNode("127.0.0.1:1",102400,100);
    RMState state=rm2.getRMContext().getStateStore().loadState();
    Assert.assertNull(state.getReservationState().get(ReservationSystemTestUtil.reservationQ));
  }
  private void addNodeCapacityToPlan(  MockRM rm,  int memory,  int vCores){
    try {
      rm.registerNode("127.0.0.1:1",memory,vCores);
      int attempts=10;
      do {
        rm1.drainEvents();
        rm.getRMContext().getReservationSystem().synchronizePlan(ReservationSystemTestUtil.reservationQ,false);
        if (rm.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ).getTotalCapacity().getMemorySize() > 0) {
          break;
        }
        LOG.info("Waiting for node capacity to be added to plan");
        Thread.sleep(100);
      }
 while (attempts-- > 0);
      if (attempts <= 0) {
        Assert.fail("Exhausted attempts in checking if node capacity was " + "added to the plan");
      }
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
  }
  private ReservationSubmissionRequest createReservationSubmissionRequest(  ReservationId reservationId){
    Clock clock=new UTCClock();
    long arrival=clock.getTime();
    long duration=60000;
    long deadline=(long)(arrival + duration + 1500);
    return ReservationSystemTestUtil.createSimpleReservationRequest(reservationId,4,arrival,deadline,duration);
  }
  private void validateReservation(  Plan plan,  ReservationId resId,  ReservationDefinition rDef){
    ReservationAllocation reservation=plan.getReservationById(resId);
    Assert.assertNotNull(reservation);
    Assert.assertEquals(rDef.getDeadline(),reservation.getReservationDefinition().getDeadline());
  }
  @Test public void testSubmitReservationFailoverAndDelete() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    explicitFailover();
    addNodeCapacityToPlan(rm2,102400,100);
    Plan plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,reservationID,reservationDefinition);
    ReservationDeleteRequest deleteRequest=ReservationDeleteRequest.newInstance(reservationID);
    ReservationDeleteResponse deleteResponse=null;
    clientService=rm2.getClientRMService();
    try {
      deleteResponse=clientService.deleteReservation(deleteRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(deleteResponse);
    Assert.assertNull(plan.getReservationById(reservationID));
  }
  @Test public void testFailoverAndSubmitReservation() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    explicitFailover();
    addNodeCapacityToPlan(rm2,102400,100);
    ClientRMService clientService=rm2.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    Plan plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,reservationID,reservationDefinition);
  }
  @Test public void testSubmitReservationFailoverAndUpdate() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    explicitFailover();
    addNodeCapacityToPlan(rm2,102400,100);
    Plan plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,reservationID,reservationDefinition);
    long newDeadline=reservationDefinition.getDeadline() + 100;
    reservationDefinition.setDeadline(newDeadline);
    ReservationUpdateRequest updateRequest=ReservationUpdateRequest.newInstance(reservationDefinition,reservationID);
    ReservationUpdateResponse updateResponse=null;
    clientService=rm2.getClientRMService();
    try {
      updateResponse=clientService.updateReservation(updateRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(updateResponse);
    validateReservation(plan,reservationID,reservationDefinition);
  }
  @Test public void testSubmitUpdateReservationFailoverAndDelete() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId reservationID=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(reservationID);
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(reservationID);
    LOG.info("Submit reservation response: " + reservationID);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    Plan plan=rm1.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,reservationID,reservationDefinition);
    long newDeadline=reservationDefinition.getDeadline() + 100;
    reservationDefinition.setDeadline(newDeadline);
    ReservationUpdateRequest updateRequest=ReservationUpdateRequest.newInstance(reservationDefinition,reservationID);
    ReservationUpdateResponse updateResponse=null;
    try {
      updateResponse=clientService.updateReservation(updateRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(updateResponse);
    validateReservation(plan,reservationID,reservationDefinition);
    explicitFailover();
    addNodeCapacityToPlan(rm2,102400,100);
    plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,reservationID,reservationDefinition);
    ReservationDeleteRequest deleteRequest=ReservationDeleteRequest.newInstance(reservationID);
    ReservationDeleteResponse deleteResponse=null;
    clientService=rm2.getClientRMService();
    try {
      deleteResponse=clientService.deleteReservation(deleteRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(deleteResponse);
    Assert.assertNull(plan.getReservationById(reservationID));
  }
  @Test public void testReservationResizeAfterFailover() throws Exception {
    startRMs();
    addNodeCapacityToPlan(rm1,102400,100);
    ClientRMService clientService=rm1.getClientRMService();
    ReservationId resID1=getNewReservation(clientService).getReservationId();
    ReservationSubmissionRequest request=createReservationSubmissionRequest(resID1);
    ReservationDefinition reservationDefinition=request.getReservationDefinition();
    ReservationSubmissionResponse response=null;
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(resID1);
    LOG.info("Submit reservation response: " + resID1);
    ReservationId resID2=getNewReservation(clientService).getReservationId();
    request.setReservationId(resID2);
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(resID2);
    LOG.info("Submit reservation response: " + resID2);
    ReservationId resID3=getNewReservation(clientService).getReservationId();
    request.setReservationId(resID3);
    try {
      response=clientService.submitReservation(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertNotNull(resID3);
    LOG.info("Submit reservation response: " + resID3);
    waitForReservationActivation(rm1,resID1,ReservationSystemTestUtil.reservationQ);
    Plan plan=rm1.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,resID1,reservationDefinition);
    validateReservation(plan,resID2,reservationDefinition);
    validateReservation(plan,resID3,reservationDefinition);
    ResourceScheduler scheduler=rm1.getResourceScheduler();
    QueueInfo resQ1=scheduler.getQueueInfo(resID1.toString(),false,false);
    Assert.assertEquals(0.05,resQ1.getCapacity(),0.001f);
    QueueInfo resQ2=scheduler.getQueueInfo(resID2.toString(),false,false);
    Assert.assertEquals(0.05,resQ2.getCapacity(),0.001f);
    QueueInfo resQ3=scheduler.getQueueInfo(resID3.toString(),false,false);
    Assert.assertEquals(0.05,resQ3.getCapacity(),0.001f);
    explicitFailover();
    addNodeCapacityToPlan(rm2,5120,5);
    plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
    validateReservation(plan,resID1,reservationDefinition);
    validateReservation(plan,resID3,reservationDefinition);
    scheduler=rm2.getResourceScheduler();
    resQ1=scheduler.getQueueInfo(resID1.toString(),false,false);
    Assert.assertEquals(1f / 3f,resQ1.getCapacity(),0.001f);
    resQ2=scheduler.getQueueInfo(resID2.toString(),false,false);
    Assert.assertEquals(1f / 3f,resQ2.getCapacity(),0.001f);
    resQ3=scheduler.getQueueInfo(resID3.toString(),false,false);
    Assert.assertEquals(1f / 3f,resQ3.getCapacity(),0.001f);
  }
  private void waitForReservationActivation(  MockRM rm,  ReservationId reservationId,  String planName){
    try {
      int attempts=20;
      do {
        rm.getRMContext().getReservationSystem().synchronizePlan(planName,false);
        if (rm.getResourceScheduler().getQueueInfo(reservationId.toString(),false,false).getCapacity() > 0f) {
          break;
        }
        LOG.info("Waiting for reservation to be active");
        Thread.sleep(100);
      }
 while (attempts-- > 0);
      if (attempts <= 0) {
        Assert.fail("Exceeded attempts in waiting for reservation to be active");
      }
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
  }
  private GetNewReservationResponse getNewReservation(  ClientRMService clientRMService){
    GetNewReservationRequest newReservationRequest=GetNewReservationRequest.newInstance();
    GetNewReservationResponse getNewReservationResponse=null;
    try {
      getNewReservationResponse=clientRMService.getNewReservation(newReservationRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    return getNewReservationResponse;
  }
}
