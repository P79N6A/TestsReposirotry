/** 
 * A  {@link Reducer} implementation that checks the progress on every callto  {@link Reducer#reduce(Object,Iterator,OutputCollector,Reporter)}.
 */
@SuppressWarnings("deprecation") static class ProgressTestingReducer extends MapReduceBase implements Reducer<Text,Text,Text,Text> {
  private int recordCount=0;
  private Reporter reporter=null;
  private final float REDUCE_PROGRESS_RANGE=1.0f / 3;
  private final float SHUFFLE_PROGRESS_RANGE=1 - REDUCE_PROGRESS_RANGE;
  @Override public void configure(  JobConf job){
    super.configure(job);
  }
  @Override public void reduce(  Text key,  Iterator<Text> values,  OutputCollector<Text,Text> output,  Reporter reporter) throws IOException {
    float reducePhaseProgress=((float)++recordCount) / INPUT_LINES;
    float weightedReducePhaseProgress=reducePhaseProgress * REDUCE_PROGRESS_RANGE;
    assertEquals("Invalid progress in reduce",SHUFFLE_PROGRESS_RANGE + weightedReducePhaseProgress,reporter.getProgress(),0.02f);
    this.reporter=reporter;
  }
  @Override public void close() throws IOException {
    super.close();
    assertEquals("Invalid progress in reduce cleanup",1.0f,reporter.getProgress(),0f);
  }
}
