/** 
 * Test class for DataNodeVolumeMetrics.
 */
public class TestDataNodeVolumeMetrics {
  private static final Logger LOG=LoggerFactory.getLogger(TestDataNodeVolumeMetrics.class);
  private static final int BLOCK_SIZE=1024;
  private static final short REPL=1;
  private static final int NUM_DATANODES=1;
  @Rule public Timeout timeout=new Timeout(300000);
  @Test public void testVolumeMetrics() throws Exception {
    MiniDFSCluster cluster=setupClusterForVolumeMetrics();
    try {
      FileSystem fs=cluster.getFileSystem();
      final Path fileName=new Path("/test.dat");
      final long fileLen=Integer.MAX_VALUE + 1L;
      DFSTestUtil.createFile(fs,fileName,false,BLOCK_SIZE,fileLen,fs.getDefaultBlockSize(fileName),REPL,1L,true);
      try (FSDataOutputStream out=fs.append(fileName)){
        out.writeBytes("hello world");
        ((DFSOutputStream)out.getWrappedStream()).hsync();
      }
       verifyDataNodeVolumeMetrics(fs,cluster,fileName);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  @Test public void testVolumeMetricsWithVolumeDepartureArrival() throws Exception {
    MiniDFSCluster cluster=setupClusterForVolumeMetrics();
    try {
      FileSystem fs=cluster.getFileSystem();
      final Path fileName=new Path("/test.dat");
      final long fileLen=Integer.MAX_VALUE + 1L;
      DFSTestUtil.createFile(fs,fileName,false,BLOCK_SIZE,fileLen,fs.getDefaultBlockSize(fileName),REPL,1L,true);
      try (FSDataOutputStream out=fs.append(fileName)){
        out.writeBytes("hello world");
        ((DFSOutputStream)out.getWrappedStream()).hsync();
      }
       ArrayList<DataNode> dns=cluster.getDataNodes();
      assertTrue("DN1 should be up",dns.get(0).isDatanodeUp());
      final File dn1Vol2=cluster.getInstanceStorageDir(0,1);
      DataNodeTestUtils.injectDataDirFailure(dn1Vol2);
      verifyDataNodeVolumeMetrics(fs,cluster,fileName);
      DataNodeTestUtils.restoreDataDirFromFailure(dn1Vol2);
      DataNodeTestUtils.reconfigureDataNode(dns.get(0),dn1Vol2);
      verifyDataNodeVolumeMetrics(fs,cluster,fileName);
    }
  finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
  private MiniDFSCluster setupClusterForVolumeMetrics() throws IOException {
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFSConfigKeys.DFS_DATANODE_FILEIO_PROFILING_SAMPLING_PERCENTAGE_KEY,100);
    SimulatedFSDataset.setFactory(conf);
    return new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).storageTypes(new StorageType[]{StorageType.RAM_DISK,StorageType.DISK}).storagesPerDatanode(2).build();
  }
  private void verifyDataNodeVolumeMetrics(  final FileSystem fs,  final MiniDFSCluster cluster,  final Path fileName) throws IOException {
    List<DataNode> datanodes=cluster.getDataNodes();
    DataNode datanode=datanodes.get(0);
    final ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,fileName);
    final FsVolumeSpi volume=datanode.getFSDataset().getVolume(block);
    DataNodeVolumeMetrics metrics=volume.getMetrics();
    MetricsRecordBuilder rb=getMetrics(volume.getMetrics().name());
    assertCounter("TotalDataFileIos",metrics.getTotalDataFileIos(),rb);
    LOG.info("TotalMetadataOperations : " + metrics.getTotalMetadataOperations());
    LOG.info("TotalDataFileIos : " + metrics.getTotalDataFileIos());
    LOG.info("TotalFileIoErrors : " + metrics.getTotalFileIoErrors());
    LOG.info("MetadataOperationSampleCount : " + metrics.getMetadataOperationSampleCount());
    LOG.info("MetadataOperationMean : " + metrics.getMetadataOperationMean());
    LOG.info("MetadataFileIoStdDev : " + metrics.getMetadataOperationStdDev());
    LOG.info("DataFileIoSampleCount : " + metrics.getDataFileIoSampleCount());
    LOG.info("DataFileIoMean : " + metrics.getDataFileIoMean());
    LOG.info("DataFileIoStdDev : " + metrics.getDataFileIoStdDev());
    LOG.info("flushIoSampleCount : " + metrics.getFlushIoSampleCount());
    LOG.info("flushIoMean : " + metrics.getFlushIoMean());
    LOG.info("flushIoStdDev : " + metrics.getFlushIoStdDev());
    LOG.info("syncIoSampleCount : " + metrics.getSyncIoSampleCount());
    LOG.info("syncIoMean : " + metrics.getSyncIoMean());
    LOG.info("syncIoStdDev : " + metrics.getSyncIoStdDev());
    LOG.info("readIoSampleCount : " + metrics.getReadIoMean());
    LOG.info("readIoMean : " + metrics.getReadIoMean());
    LOG.info("readIoStdDev : " + metrics.getReadIoStdDev());
    LOG.info("writeIoSampleCount : " + metrics.getWriteIoSampleCount());
    LOG.info("writeIoMean : " + metrics.getWriteIoMean());
    LOG.info("writeIoStdDev : " + metrics.getWriteIoStdDev());
    LOG.info("fileIoErrorSampleCount : " + metrics.getFileIoErrorSampleCount());
    LOG.info("fileIoErrorMean : " + metrics.getFileIoErrorMean());
    LOG.info("fileIoErrorStdDev : " + metrics.getFileIoErrorStdDev());
  }
}
