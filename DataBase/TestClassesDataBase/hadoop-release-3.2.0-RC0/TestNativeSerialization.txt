@SuppressWarnings({"rawtypes"}) public class TestNativeSerialization {
  @Test public void testRegisterAndGet() throws IOException {
    final NativeSerialization serialization=NativeSerialization.getInstance();
    serialization.reset();
    serialization.register(WritableKey.class.getName(),ComparableKeySerializer.class);
    INativeSerializer serializer=serialization.getSerializer(WritableKey.class);
    Assert.assertEquals(ComparableKeySerializer.class.getName(),serializer.getClass().getName());
    serializer=serialization.getSerializer(WritableValue.class);
    Assert.assertEquals(DefaultSerializer.class.getName(),serializer.getClass().getName());
    boolean ioExceptionThrown=false;
    try {
      serializer=serialization.getSerializer(NonWritableValue.class);
    }
 catch (    final IOException e) {
      ioExceptionThrown=true;
    }
    Assert.assertTrue(ioExceptionThrown);
  }
public static class WritableKey implements Writable {
    private int value;
    public WritableKey(    int a){
      this.value=a;
    }
    public int getLength(){
      return 4;
    }
    public int getValue(){
      return value;
    }
    public void setValue(    int v){
      this.value=v;
    }
    @Override public void write(    DataOutput out) throws IOException {
    }
    @Override public void readFields(    DataInput in) throws IOException {
    }
  }
public static class WritableValue implements Writable {
    @Override public void write(    DataOutput out) throws IOException {
    }
    @Override public void readFields(    DataInput in) throws IOException {
    }
  }
public static class NonWritableValue {
  }
public static class ComparableKeySerializer implements INativeComparable, INativeSerializer<WritableKey> {
    @Override public int getLength(    WritableKey w) throws IOException {
      return w.getLength();
    }
    @Override public void serialize(    WritableKey w,    DataOutput out) throws IOException {
      out.writeInt(w.getValue());
    }
    @Override public void deserialize(    DataInput in,    int length,    WritableKey w) throws IOException {
      w.setValue(in.readInt());
    }
  }
}
