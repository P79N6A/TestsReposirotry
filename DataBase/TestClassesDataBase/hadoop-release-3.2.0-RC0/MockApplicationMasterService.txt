/** 
 * Mocked ApplicationMasterService in RM.
 */
public static class MockApplicationMasterService implements ApplicationMasterProtocol {
  private boolean failover=false;
  private boolean throwAlreadyRegister=false;
  private int responseIdReset=-1;
  private List<ResourceRequest> lastAsk;
  private List<ContainerId> lastRelease;
  private List<String> lastBlacklistAdditions;
  private List<String> lastBlacklistRemovals;
  @Override public RegisterApplicationMasterResponse registerApplicationMaster(  RegisterApplicationMasterRequest request) throws YarnException, IOException {
    if (this.throwAlreadyRegister) {
      this.throwAlreadyRegister=false;
      throw new InvalidApplicationMasterRequestException(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE + "appId");
    }
    return null;
  }
  @Override public FinishApplicationMasterResponse finishApplicationMaster(  FinishApplicationMasterRequest request) throws YarnException, IOException {
    if (this.failover) {
      this.failover=false;
      throw new ApplicationMasterNotRegisteredException("Mock RM restarted");
    }
    return null;
  }
  @Override public AllocateResponse allocate(  AllocateRequest request) throws YarnException, IOException {
    if (this.failover) {
      this.failover=false;
      throw new ApplicationMasterNotRegisteredException("Mock RM restarted");
    }
    if (this.responseIdReset != -1) {
      String errorMessage=AMRMClientUtils.assembleInvalidResponseIdExceptionMessage(null,this.responseIdReset,request.getResponseId());
      this.responseIdReset=-1;
      throw new InvalidApplicationMasterRequestException(errorMessage);
    }
    this.lastAsk=request.getAskList();
    this.lastRelease=request.getReleaseList();
    this.lastBlacklistAdditions=request.getResourceBlacklistRequest().getBlacklistAdditions();
    this.lastBlacklistRemovals=request.getResourceBlacklistRequest().getBlacklistRemovals();
    return AllocateResponse.newInstance(request.getResponseId() + 1,null,null,new ArrayList<NodeReport>(),Resource.newInstance(0,0),null,0,null,null);
  }
  public void setFailoverFlag(){
    this.failover=true;
  }
  public void setThrowAlreadyRegister(){
    this.throwAlreadyRegister=true;
  }
  public void setResponseIdReset(  int expectedResponseId){
    this.responseIdReset=expectedResponseId;
  }
}
