/** 
 * Test class for CS metrics.
 */
public class TestCapacitySchedulerMetrics {
  private MockRM rm;
  @Test public void testCSMetrics() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
    conf.setBoolean(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE,true);
    RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
    mgr.init(conf);
    rm=new MockRM(conf){
      @Override public RMNodeLabelsManager createNodeLabelManager(){
        return mgr;
      }
    }
;
    rm.getRMContext().setNodeLabelManager(mgr);
    rm.start();
    MockNM nm1=rm.registerNode("host1:1234",2048);
    MockNM nm2=rm.registerNode("host2:1234",2048);
    nm1.nodeHeartbeat(true);
    nm2.nodeHeartbeat(true);
    CapacitySchedulerMetrics csMetrics=CapacitySchedulerMetrics.getMetrics();
    Assert.assertNotNull(csMetrics);
    try {
      GenericTestUtils.waitFor(() -> csMetrics.getNumOfNodeUpdate() == 2,100,3000);
    }
 catch (    TimeoutException e) {
      Assert.fail("CS metrics not updated on node-update events.");
    }
    Assert.assertEquals(0,csMetrics.getNumOfAllocates());
    Assert.assertEquals(0,csMetrics.getNumOfCommitSuccess());
    RMApp rmApp=rm.submitApp(1024,"app","user",null,false,"default",1,null,null,false);
    MockAM am=MockRM.launchAMWhenAsyncSchedulingEnabled(rmApp,rm);
    am.registerAppAttempt();
    am.allocate("*",1024,1,new ArrayList<>());
    nm1.nodeHeartbeat(true);
    nm2.nodeHeartbeat(true);
    try {
      GenericTestUtils.waitFor(() -> csMetrics.getNumOfNodeUpdate() == 4,100,3000);
    }
 catch (    TimeoutException e) {
      Assert.fail("CS metrics not updated on node-update events.");
    }
    Assert.assertTrue(csMetrics.getNumOfAllocates() > 0);
    Assert.assertEquals(2,csMetrics.getNumOfCommitSuccess());
  }
  @After public void tearDown(){
    if (rm != null) {
      rm.stop();
    }
  }
}
