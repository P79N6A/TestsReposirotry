public class TestApplyingStoragePolicy {
  private static final short REPL=1;
  private static final int SIZE=128;
  private static Configuration conf;
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem fs;
  @Before public void clusterSetUp() throws IOException {
    conf=new HdfsConfiguration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPL).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
  }
  @After public void clusterShutdown() throws IOException {
    if (fs != null) {
      fs.close();
      fs=null;
    }
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  @Test public void testStoragePolicyByDefault() throws Exception {
    final Path foo=new Path("/foo");
    final Path bar=new Path(foo,"bar");
    final Path wow=new Path(bar,"wow");
    final Path fooz=new Path(bar,"/fooz");
    DFSTestUtil.createFile(fs,wow,SIZE,REPL,0);
    final BlockStoragePolicySuite suite=BlockStoragePolicySuite.createDefaultSuite();
    final BlockStoragePolicy hot=suite.getPolicy("HOT");
    assertEquals(fs.getStoragePolicy(foo),hot);
    assertEquals(fs.getStoragePolicy(bar),hot);
    assertEquals(fs.getStoragePolicy(wow),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
  }
  @Test public void testSetAndUnsetStoragePolicy() throws Exception {
    final Path foo=new Path("/foo");
    final Path bar=new Path(foo,"bar");
    final Path wow=new Path(bar,"wow");
    final Path fooz=new Path(bar,"/fooz");
    DFSTestUtil.createFile(fs,wow,SIZE,REPL,0);
    final BlockStoragePolicySuite suite=BlockStoragePolicySuite.createDefaultSuite();
    final BlockStoragePolicy warm=suite.getPolicy("WARM");
    final BlockStoragePolicy cold=suite.getPolicy("COLD");
    final BlockStoragePolicy hot=suite.getPolicy("HOT");
    fs.setStoragePolicy(foo,warm.getName());
    fs.setStoragePolicy(bar,cold.getName());
    fs.setStoragePolicy(wow,hot.getName());
    try {
      fs.setStoragePolicy(fooz,warm.getName());
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    assertEquals(fs.getStoragePolicy(foo),warm);
    assertEquals(fs.getStoragePolicy(bar),cold);
    assertEquals(fs.getStoragePolicy(wow),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    fs.unsetStoragePolicy(foo);
    fs.unsetStoragePolicy(bar);
    fs.unsetStoragePolicy(wow);
    try {
      fs.unsetStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    assertEquals(fs.getStoragePolicy(foo),hot);
    assertEquals(fs.getStoragePolicy(bar),hot);
    assertEquals(fs.getStoragePolicy(wow),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
  }
  @Test public void testNestedStoragePolicy() throws Exception {
    final Path foo=new Path("/foo");
    final Path bar=new Path(foo,"bar");
    final Path wow=new Path(bar,"wow");
    final Path fooz=new Path("/foos");
    DFSTestUtil.createFile(fs,wow,SIZE,REPL,0);
    final BlockStoragePolicySuite suite=BlockStoragePolicySuite.createDefaultSuite();
    final BlockStoragePolicy warm=suite.getPolicy("WARM");
    final BlockStoragePolicy cold=suite.getPolicy("COLD");
    final BlockStoragePolicy hot=suite.getPolicy("HOT");
    fs.setStoragePolicy(foo,warm.getName());
    fs.setStoragePolicy(bar,cold.getName());
    fs.setStoragePolicy(wow,hot.getName());
    try {
      fs.setStoragePolicy(fooz,warm.getName());
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    assertEquals(fs.getStoragePolicy(foo),warm);
    assertEquals(fs.getStoragePolicy(bar),cold);
    assertEquals(fs.getStoragePolicy(wow),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    fs.unsetStoragePolicy(wow);
    assertEquals(fs.getStoragePolicy(wow),cold);
    fs.unsetStoragePolicy(bar);
    assertEquals(fs.getStoragePolicy(bar),warm);
    fs.unsetStoragePolicy(foo);
    assertEquals(fs.getStoragePolicy(foo),hot);
    try {
      fs.unsetStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    assertEquals(fs.getStoragePolicy(foo),hot);
    assertEquals(fs.getStoragePolicy(bar),hot);
    assertEquals(fs.getStoragePolicy(wow),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
  }
  @Test public void testSetAndGetStoragePolicy() throws IOException {
    final Path foo=new Path("/foo");
    final Path bar=new Path(foo,"bar");
    final Path fooz=new Path("/fooz");
    DFSTestUtil.createFile(fs,bar,SIZE,REPL,0);
    final BlockStoragePolicySuite suite=BlockStoragePolicySuite.createDefaultSuite();
    final BlockStoragePolicy warm=suite.getPolicy("WARM");
    final BlockStoragePolicy cold=suite.getPolicy("COLD");
    final BlockStoragePolicy hot=suite.getPolicy("HOT");
    assertEquals(fs.getStoragePolicy(foo),hot);
    assertEquals(fs.getStoragePolicy(bar),hot);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    fs.setStoragePolicy(foo,warm.getName());
    fs.setStoragePolicy(bar,cold.getName());
    try {
      fs.setStoragePolicy(fooz,warm.getName());
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    assertEquals(fs.getStoragePolicy(foo),warm);
    assertEquals(fs.getStoragePolicy(bar),cold);
    try {
      fs.getStoragePolicy(fooz);
    }
 catch (    Exception e) {
      assertTrue(e instanceof FileNotFoundException);
    }
  }
}
