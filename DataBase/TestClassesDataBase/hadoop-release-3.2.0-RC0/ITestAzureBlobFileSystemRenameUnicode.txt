/** 
 * Parameterized test of rename operations of unicode paths.
 */
@RunWith(Parameterized.class) public class ITestAzureBlobFileSystemRenameUnicode extends AbstractAbfsIntegrationTest {
  @Parameterized.Parameter public String srcDir;
  @Parameterized.Parameter(1) public String destDir;
  @Parameterized.Parameter(2) public String filename;
  @Parameterized.Parameters public static Iterable<Object[]> params(){
    return Arrays.asList(new Object[][]{{"/src","/dest","filename"},{"/%2c%26","/abcÖ⇒123","%2c%27"},{"/ÖáΠ⇒","/abcÖáΠ⇒123","中文"},{"/A +B","/B+ C","C +D"},{"/A~`!@#$%^&*()-_+={};:'>,<B","/B~`!@#$%^&*()-_+={};:'>,<C","C~`!@#$%^&*()-_+={};:'>,<D"}});
  }
  public ITestAzureBlobFileSystemRenameUnicode() throws Exception {
  }
  /** 
 * Known issue: ListStatus operation to folders/files whose name contains '?' will fail. This is because Auto rest client didn't encode '?' in the uri query parameters
 */
  @Test public void testRenameFileUsingUnicode() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path folderPath1=new Path(srcDir);
    assertMkdirs(fs,folderPath1);
    assertIsDirectory(fs,folderPath1);
    Path filePath=new Path(folderPath1 + "/" + filename);
    touch(filePath);
    assertIsFile(fs,filePath);
    Path folderPath2=new Path(destDir);
    assertRenameOutcome(fs,folderPath1,folderPath2,true);
    assertPathDoesNotExist(fs,"renamed",folderPath1);
    assertIsDirectory(fs,folderPath2);
    assertPathExists(fs,"renamed file",new Path(folderPath2 + "/" + filename));
    FileStatus[] fileStatus=fs.listStatus(folderPath2);
    assertNotNull(fileStatus);
    assertTrue("Empty listing returned from listStatus(\"" + folderPath2 + "\")",fileStatus.length > 0);
    assertEquals(fileStatus[0].getPath().getName(),filename);
  }
}
