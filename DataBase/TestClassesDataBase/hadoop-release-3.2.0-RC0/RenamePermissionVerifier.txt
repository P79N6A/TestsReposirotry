private class RenamePermissionVerifier extends PermissionVerifier {
  private Path dst;
  private short dstAncestorPermission;
  private short dstParentPermission;
  void set(  Path src,  short srcAncestorPermission,  short srcParentPermission,  Path dst,  short dstAncestorPermission,  short dstParentPermission){
    super.set(src,srcAncestorPermission,srcParentPermission,NULL_MASK);
    this.dst=dst;
    this.dstAncestorPermission=dstAncestorPermission;
    this.dstParentPermission=dstParentPermission;
  }
  @Override void setOpPermission(){
    opParentPermission=SEARCH_MASK | WRITE_MASK;
  }
  @Override void call() throws IOException {
    fs.rename(path,dst);
  }
  @Override protected boolean expectPermissionDeny(){
    return super.expectPermissionDeny() || (requiredParentPermission & dstParentPermission) != requiredParentPermission || (requiredAncestorPermission & dstAncestorPermission) != requiredAncestorPermission;
  }
  @Override protected void logPermissions(){
    super.logPermissions();
    LOG.info("dst ancestor permission: " + Integer.toOctalString(dstAncestorPermission));
    LOG.info("dst parent permission: " + Integer.toOctalString(dstParentPermission));
  }
}
