public class TestRPCUtil {
  @Test public void testUnknownExceptionUnwrapping(){
    Class<? extends Throwable> exception=YarnException.class;
    String className="UnknownException.class";
    verifyRemoteExceptionUnwrapping(exception,className);
  }
  @Test public void testRemoteIOExceptionUnwrapping(){
    Class<? extends Throwable> exception=IOException.class;
    verifyRemoteExceptionUnwrapping(exception,exception.getName());
  }
  @Test public void testRemoteIOExceptionDerivativeUnwrapping(){
    Class<? extends Throwable> exception=FileNotFoundException.class;
    verifyRemoteExceptionUnwrapping(exception,exception.getName());
  }
  @Test public void testRemoteYarnExceptionUnwrapping(){
    Class<? extends Throwable> exception=YarnException.class;
    verifyRemoteExceptionUnwrapping(exception,exception.getName());
  }
  @Test public void testRemoteYarnExceptionDerivativeUnwrapping(){
    Class<? extends Throwable> exception=YarnTestException.class;
    verifyRemoteExceptionUnwrapping(exception,exception.getName());
  }
  @Test public void testRemoteRuntimeExceptionUnwrapping(){
    Class<? extends Throwable> exception=NullPointerException.class;
    verifyRemoteExceptionUnwrapping(exception,exception.getName());
  }
  @Test public void testUnexpectedRemoteExceptionUnwrapping(){
    Class<? extends Throwable> exception=Exception.class;
    verifyRemoteExceptionUnwrapping(RemoteException.class,exception.getName());
  }
  @Test public void testRemoteYarnExceptionWithoutStringConstructor(){
    Class<? extends Throwable> exception=YarnTestExceptionNoConstructor.class;
    verifyRemoteExceptionUnwrapping(RemoteException.class,exception.getName());
  }
  @Test public void testRPCServiceExceptionUnwrapping(){
    String message="ServiceExceptionMessage";
    ServiceException se=new ServiceException(message);
    Throwable t=null;
    try {
      RPCUtil.unwrapAndThrowException(se);
    }
 catch (    Throwable thrown) {
      t=thrown;
    }
    Assert.assertTrue(IOException.class.isInstance(t));
    Assert.assertTrue(t.getMessage().contains(message));
  }
  @Test public void testRPCIOExceptionUnwrapping(){
    String message="DirectIOExceptionMessage";
    IOException ioException=new FileNotFoundException(message);
    ServiceException se=new ServiceException(ioException);
    Throwable t=null;
    try {
      RPCUtil.unwrapAndThrowException(se);
    }
 catch (    Throwable thrown) {
      t=thrown;
    }
    Assert.assertTrue(FileNotFoundException.class.isInstance(t));
    Assert.assertTrue(t.getMessage().contains(message));
  }
  @Test public void testRPCRuntimeExceptionUnwrapping(){
    String message="RPCRuntimeExceptionUnwrapping";
    RuntimeException re=new NullPointerException(message);
    ServiceException se=new ServiceException(re);
    Throwable t=null;
    try {
      RPCUtil.unwrapAndThrowException(se);
    }
 catch (    Throwable thrown) {
      t=thrown;
    }
    Assert.assertTrue(NullPointerException.class.isInstance(t));
    Assert.assertTrue(t.getMessage().contains(message));
  }
  private void verifyRemoteExceptionUnwrapping(  Class<? extends Throwable> expectedLocalException,  String realExceptionClassName){
    String message=realExceptionClassName + "Message";
    RemoteException re=new RemoteException(realExceptionClassName,message);
    ServiceException se=new ServiceException(re);
    Throwable t=null;
    try {
      RPCUtil.unwrapAndThrowException(se);
    }
 catch (    Throwable thrown) {
      t=thrown;
    }
    Assert.assertTrue("Expected exception [" + expectedLocalException + "] but found "+ t,expectedLocalException.isInstance(t));
    Assert.assertTrue("Expected message [" + message + "] but found "+ t.getMessage(),t.getMessage().contains(message));
  }
private static class YarnTestException extends YarnException {
    private static final long serialVersionUID=1L;
    @SuppressWarnings("unused") public YarnTestException(    String message){
      super(message);
    }
  }
private static class YarnTestExceptionNoConstructor extends YarnException {
    private static final long serialVersionUID=1L;
  }
}
