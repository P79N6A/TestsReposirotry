/** 
 * Helper class to do diffs of metrics.
 */
public static final class MetricDiff {
  private final S3AFileSystem fs;
  private final Statistic statistic;
  private long startingValue;
  /** 
 * Constructor. Invokes  {@link #reset()} so it is immediately capable of measuring thedifference in metric values.
 * @param fs the filesystem to monitor
 * @param statistic the statistic to monitor.
 */
  public MetricDiff(  S3AFileSystem fs,  Statistic statistic){
    this.fs=fs;
    this.statistic=statistic;
    reset();
  }
  /** 
 * Reset the starting value to the current value. Diffs will be against this new value.
 */
  public void reset(){
    startingValue=currentValue();
  }
  /** 
 * Get the current value of the metric.
 * @return the latest value.
 */
  public long currentValue(){
    return fs.getInstrumentation().getCounterValue(statistic);
  }
  /** 
 * Get the difference between the the current value and {@link #startingValue}.
 * @return the difference.
 */
  public long diff(){
    return currentValue() - startingValue;
  }
  @Override public String toString(){
    long c=currentValue();
    final StringBuilder sb=new StringBuilder(statistic.getSymbol());
    sb.append(" starting=").append(startingValue);
    sb.append(" current=").append(c);
    sb.append(" diff=").append(c - startingValue);
    return sb.toString();
  }
  /** 
 * Assert that the value of  {@link #diff()} matches that expected.
 * @param message message to print; metric name is appended
 * @param expected expected value.
 */
  public void assertDiffEquals(  String message,  long expected){
    Assert.assertEquals(message + ": " + statistic.getSymbol(),expected,diff());
  }
  /** 
 * Assert that the value of  {@link #diff()} matches that expected.
 * @param expected expected value.
 */
  public void assertDiffEquals(  long expected){
    assertDiffEquals("Count of " + this,expected);
  }
  /** 
 * Assert that the value of  {@link #diff()} matches that of anotherinstance.
 * @param that the other metric diff instance.
 */
  public void assertDiffEquals(  MetricDiff that){
    Assert.assertEquals(this.toString() + " != " + that,this.diff(),that.diff());
  }
  /** 
 * Comparator for assertions.
 * @param that other metric diff
 * @return true if the value is {@code ==} the other's
 */
  public boolean diffEquals(  MetricDiff that){
    return this.diff() == that.diff();
  }
  /** 
 * Comparator for assertions.
 * @param that other metric diff
 * @return true if the value is {@code <} the other's
 */
  public boolean diffLessThan(  MetricDiff that){
    return this.diff() < that.diff();
  }
  /** 
 * Comparator for assertions.
 * @param that other metric diff
 * @return true if the value is {@code <=} the other's
 */
  public boolean diffLessThanOrEquals(  MetricDiff that){
    return this.diff() <= that.diff();
  }
  /** 
 * Get the statistic.
 * @return the statistic
 */
  public Statistic getStatistic(){
    return statistic;
  }
  /** 
 * Get the starting value; that set in the last  {@link #reset()}.
 * @return the starting value for diffs.
 */
  public long getStartingValue(){
    return startingValue;
  }
}
