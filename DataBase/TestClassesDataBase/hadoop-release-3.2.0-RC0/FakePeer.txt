private static class FakePeer implements Peer {
  private boolean closed=false;
  private final boolean hasDomain;
  private final DatanodeID dnId;
  public FakePeer(  DatanodeID dnId,  boolean hasDomain){
    this.dnId=dnId;
    this.hasDomain=hasDomain;
  }
  @Override public ReadableByteChannel getInputStreamChannel(){
    throw new UnsupportedOperationException();
  }
  @Override public void setReadTimeout(  int timeoutMs) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public int getReceiveBufferSize() throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public boolean getTcpNoDelay() throws IOException {
    return false;
  }
  @Override public void setWriteTimeout(  int timeoutMs) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public boolean isClosed(){
    return closed;
  }
  @Override public void close() throws IOException {
    closed=true;
  }
  @Override public String getRemoteAddressString(){
    return dnId.getInfoAddr();
  }
  @Override public String getLocalAddressString(){
    return "127.0.0.1:123";
  }
  @Override public InputStream getInputStream() throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public OutputStream getOutputStream() throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public boolean isLocal(){
    return true;
  }
  @Override public String toString(){
    return "FakePeer(dnId=" + dnId + ")";
  }
  @Override public DomainSocket getDomainSocket(){
    if (!hasDomain)     return null;
    return Mockito.mock(DomainSocket.class,new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        throw new RuntimeException("injected fault.");
      }
    }
);
  }
  @Override public boolean equals(  Object o){
    if (!(o instanceof FakePeer))     return false;
    FakePeer other=(FakePeer)o;
    return hasDomain == other.hasDomain && dnId.equals(other.dnId);
  }
  @Override public int hashCode(){
    return dnId.hashCode() ^ (hasDomain ? 1 : 0);
  }
  @Override public boolean hasSecureChannel(){
    return false;
  }
}
