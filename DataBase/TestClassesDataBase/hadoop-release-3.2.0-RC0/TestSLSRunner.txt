/** 
 * This test performs simple runs of the SLS with different trace types and schedulers.
 */
@RunWith(value=Parameterized.class) @NotThreadSafe public class TestSLSRunner extends BaseSLSRunnerTest {
  @Parameters(name="Testing with: {1}, {0}, (nodeFile {3})") public static Collection<Object[]> data(){
    String capScheduler=CapacityScheduler.class.getCanonicalName();
    String fairScheduler=FairScheduler.class.getCanonicalName();
    String slsTraceFile="src/test/resources/inputsls.json";
    String rumenTraceFile="src/main/data/2jobs2min-rumen-jh.json";
    String synthTraceFile="src/test/resources/syn.json";
    String nodeFile="src/test/resources/nodes.json";
    return Arrays.asList(new Object[][]{{capScheduler,"OLD_RUMEN",rumenTraceFile,nodeFile},{capScheduler,"OLD_SLS",slsTraceFile,nodeFile},{capScheduler,"SYNTH",synthTraceFile,null},{capScheduler,"RUMEN",rumenTraceFile,null},{capScheduler,"SLS",slsTraceFile,null},{capScheduler,"SYNTH",synthTraceFile,nodeFile},{capScheduler,"RUMEN",rumenTraceFile,nodeFile},{capScheduler,"SLS",slsTraceFile,nodeFile},{fairScheduler,"SYNTH",synthTraceFile,nodeFile},{fairScheduler,"RUMEN",rumenTraceFile,nodeFile},{fairScheduler,"SLS",slsTraceFile,nodeFile}});
  }
  @Before public void setup(){
    ongoingInvariantFile="src/test/resources/ongoing-invariants.txt";
    exitInvariantFile="src/test/resources/exit-invariants.txt";
  }
  @Test(timeout=90000) @SuppressWarnings("all") public void testSimulatorRunning() throws Exception {
    Configuration conf=new Configuration(false);
    long timeTillShutdownInsec=20L;
    runSLS(conf,timeTillShutdownInsec);
  }
}
