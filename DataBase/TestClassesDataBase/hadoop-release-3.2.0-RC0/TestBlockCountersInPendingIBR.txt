/** 
 * Test counters for number of blocks in pending IBR.
 */
public class TestBlockCountersInPendingIBR {
  @Test public void testBlockCounters() throws Exception {
    final Configuration conf=new HdfsConfiguration();
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10800000L);
    conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1080L);
    final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    final DatanodeProtocolClientSideTranslatorPB spy=InternalDataNodeTestUtils.spyOnBposToNN(cluster.getDataNodes().get(0),cluster.getNameNode());
    final DataNode datanode=cluster.getDataNodes().get(0);
    Mockito.verify(spy,timeout(60000).times(0)).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
    final BPServiceActor actor=datanode.getAllBpOs().get(0).getBPServiceActors().get(0);
    final FsDatasetSpi<?> dataset=datanode.getFSDataset();
    final DatanodeStorage storage;
    try (FsDatasetSpi.FsVolumeReferences volumes=dataset.getFsVolumeReferences()){
      storage=dataset.getStorage(volumes.get(0).getStorageID());
    }
     ReceivedDeletedBlockInfo rdbi=null;
    rdbi=new ReceivedDeletedBlockInfo(new Block(5678,512,1000),BlockStatus.RECEIVING_BLOCK,null);
    actor.getIbrManager().addRDBI(rdbi,storage);
    rdbi=new ReceivedDeletedBlockInfo(new Block(5679,512,1000),BlockStatus.RECEIVED_BLOCK,null);
    actor.getIbrManager().addRDBI(rdbi,storage);
    rdbi=new ReceivedDeletedBlockInfo(new Block(5680,512,1000),BlockStatus.DELETED_BLOCK,null);
    actor.getIbrManager().addRDBI(rdbi,storage);
    verifyBlockCounters(datanode,3,1,1,1);
    datanode.triggerBlockReport(new BlockReportOptions.Factory().setIncremental(true).build());
    Mockito.verify(spy,timeout(60000).times(1)).blockReceivedAndDeleted(any(DatanodeRegistration.class),anyString(),any(StorageReceivedDeletedBlocks[].class));
    verifyBlockCounters(datanode,0,0,0,0);
    cluster.shutdown();
  }
  private void verifyBlockCounters(  final DataNode datanode,  final long blocksInPendingIBR,  final long blocksReceivingInPendingIBR,  final long blocksReceivedInPendingIBR,  final long blocksDeletedInPendingIBR){
    final MetricsRecordBuilder m=MetricsAsserts.getMetrics(datanode.getMetrics().name());
    MetricsAsserts.assertGauge("BlocksInPendingIBR",blocksInPendingIBR,m);
    MetricsAsserts.assertGauge("BlocksReceivingInPendingIBR",blocksReceivingInPendingIBR,m);
    MetricsAsserts.assertGauge("BlocksReceivedInPendingIBR",blocksReceivedInPendingIBR,m);
    MetricsAsserts.assertGauge("BlocksDeletedInPendingIBR",blocksDeletedInPendingIBR,m);
  }
}
