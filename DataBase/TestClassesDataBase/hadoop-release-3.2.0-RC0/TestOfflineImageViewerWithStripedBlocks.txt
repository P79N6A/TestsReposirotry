public class TestOfflineImageViewerWithStripedBlocks {
  private final ErasureCodingPolicy ecPolicy=StripedFileTestUtil.getDefaultECPolicy();
  private int dataBlocks=ecPolicy.getNumDataUnits();
  private int parityBlocks=ecPolicy.getNumParityUnits();
  private static MiniDFSCluster cluster;
  private static DistributedFileSystem fs;
  private final int cellSize=ecPolicy.getCellSize();
  private final int stripesPerBlock=3;
  private final int blockSize=cellSize * stripesPerBlock;
  @Before public void setup() throws IOException {
    int numDNs=dataBlocks + parityBlocks + 2;
    Configuration conf=new Configuration();
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).build();
    cluster.waitActive();
    cluster.getFileSystem().getClient().setErasureCodingPolicy("/",StripedFileTestUtil.getDefaultECPolicy().getName());
    fs=cluster.getFileSystem();
    fs.enableErasureCodingPolicy(StripedFileTestUtil.getDefaultECPolicy().getName());
    Path eczone=new Path("/eczone");
    fs.mkdirs(eczone);
  }
  @After public void tearDown(){
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Test(timeout=60000) public void testFileEqualToOneStripe() throws Exception {
    int numBytes=cellSize;
    testFileSize(numBytes);
  }
  @Test(timeout=60000) public void testFileLessThanOneStripe() throws Exception {
    int numBytes=cellSize - 100;
    testFileSize(numBytes);
  }
  @Test(timeout=60000) public void testFileHavingMultipleBlocks() throws Exception {
    int numBytes=blockSize * 3;
    testFileSize(numBytes);
  }
  @Test(timeout=60000) public void testFileLargerThanABlockGroup1() throws IOException {
    testFileSize(blockSize * dataBlocks + cellSize + 123);
  }
  @Test(timeout=60000) public void testFileLargerThanABlockGroup2() throws IOException {
    testFileSize(blockSize * dataBlocks * 3 + cellSize * dataBlocks + cellSize + 123);
  }
  @Test(timeout=60000) public void testFileFullBlockGroup() throws IOException {
    testFileSize(blockSize * dataBlocks);
  }
  @Test(timeout=60000) public void testFileMoreThanOneStripe() throws Exception {
    int numBytes=blockSize + blockSize / 2;
    testFileSize(numBytes);
  }
  private void testFileSize(  int numBytes) throws IOException, UnresolvedLinkException, SnapshotAccessControlException {
    fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    File orgFsimage=null;
    Path file=new Path("/eczone/striped");
    FSDataOutputStream out=fs.create(file,true);
    byte[] bytes=DFSTestUtil.generateSequentialBytes(0,numBytes);
    out.write(bytes);
    out.close();
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER,false);
    fs.saveNamespace();
    orgFsimage=FSImageTestUtil.findLatestImageFile(FSImageTestUtil.getFSImage(cluster.getNameNode()).getStorage().getStorageDir(0));
    if (orgFsimage == null) {
      throw new RuntimeException("Didn't generate or can't find fsimage");
    }
    FSImageLoader loader=FSImageLoader.load(orgFsimage.getAbsolutePath());
    String fileStatus=loader.getFileStatus("/eczone/striped");
    long expectedFileSize=bytes.length;
    FSDirectory fsdir=cluster.getNamesystem().getFSDirectory();
    INodeFile fileNode=fsdir.getINode4Write(file.toString()).asFile();
    assertEquals(StripedFileTestUtil.getDefaultECPolicy().getId(),fileNode.getErasureCodingPolicyID());
    assertTrue("Invalid block size",fileNode.getBlocks().length > 0);
    long actualFileSize=0;
    for (    BlockInfo blockInfo : fileNode.getBlocks()) {
      assertTrue("Didn't find block striped information",blockInfo instanceof BlockInfoStriped);
      actualFileSize+=blockInfo.getNumBytes();
    }
    assertEquals("Wrongly computed file size contains striped blocks",expectedFileSize,actualFileSize);
    String EXPECTED_FILE_SIZE="\"length\":" + String.valueOf(expectedFileSize);
    assertTrue("Wrongly computed file size contains striped blocks, file status:" + fileStatus + ". Expected file size is : "+ EXPECTED_FILE_SIZE,fileStatus.contains(EXPECTED_FILE_SIZE));
  }
}
