public class TestNameNodeReconfigure {
  public static final Logger LOG=LoggerFactory.getLogger(TestNameNodeReconfigure.class);
  private MiniDFSCluster cluster;
  private final int customizedBlockInvalidateLimit=500;
  @Before public void setUp() throws IOException {
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFS_BLOCK_INVALIDATE_LIMIT_KEY,customizedBlockInvalidateLimit);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
  }
  @Test public void testReconfigureCallerContextEnabled() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final FSNamesystem nameSystem=nameNode.getNamesystem();
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"text");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,false);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"true");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,true);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,"false");
    verifyReconfigureCallerContextEnabled(nameNode,nameSystem,false);
    nameNode.reconfigureProperty(HADOOP_CALLER_CONTEXT_ENABLED_KEY,null);
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",false,nameSystem.getCallerContextEnabled());
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",null,nameNode.getConf().get(HADOOP_CALLER_CONTEXT_ENABLED_KEY));
  }
  void verifyReconfigureCallerContextEnabled(  final NameNode nameNode,  final FSNamesystem nameSystem,  boolean expected){
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",expected,nameNode.getNamesystem().getCallerContextEnabled());
    assertEquals(HADOOP_CALLER_CONTEXT_ENABLED_KEY + " has wrong value",expected,nameNode.getConf().getBoolean(HADOOP_CALLER_CONTEXT_ENABLED_KEY,HADOOP_CALLER_CONTEXT_ENABLED_DEFAULT));
  }
  /** 
 * Test to reconfigure enable/disable IPC backoff
 */
  @Test public void testReconfigureIPCBackoff() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    NameNodeRpcServer nnrs=(NameNodeRpcServer)nameNode.getRpcServer();
    String ipcClientRPCBackoffEnable=NameNode.buildBackoffEnableKey(nnrs.getClientRpcServer().getPort());
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,false);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,"true");
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,true);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,"false");
    verifyReconfigureIPCBackoff(nameNode,nnrs,ipcClientRPCBackoffEnable,false);
    nameNode.reconfigureProperty(ipcClientRPCBackoffEnable,null);
    assertEquals(ipcClientRPCBackoffEnable + " has wrong value",false,nnrs.getClientRpcServer().isClientBackoffEnabled());
    assertEquals(ipcClientRPCBackoffEnable + " has wrong value",null,nameNode.getConf().get(ipcClientRPCBackoffEnable));
  }
  void verifyReconfigureIPCBackoff(  final NameNode nameNode,  final NameNodeRpcServer nnrs,  String property,  boolean expected){
    assertEquals(property + " has wrong value",expected,nnrs.getClientRpcServer().isClientBackoffEnabled());
    assertEquals(property + " has wrong value",expected,nameNode.getConf().getBoolean(property,IPC_BACKOFF_ENABLE_DEFAULT));
  }
  /** 
 * Test to reconfigure interval of heart beat check and re-check.
 */
  @Test public void testReconfigureHearbeatCheck() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final DatanodeManager datanodeManager=nameNode.namesystem.getBlockManager().getDatanodeManager();
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"" + 6);
    nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,"" + (10 * 60 * 1000));
    try {
      nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"text");
      fail("ReconfigurationException expected");
    }
 catch (    ReconfigurationException expected) {
      assertTrue(expected.getCause() instanceof NumberFormatException);
    }
    try {
      nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,"text");
      fail("ReconfigurationException expected");
    }
 catch (    ReconfigurationException expected) {
      assertTrue(expected.getCause() instanceof NumberFormatException);
    }
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",6,nameNode.getConf().getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",6,datanodeManager.getHeartbeatInterval());
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",10 * 60 * 1000,nameNode.getConf().getInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT));
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",10 * 60 * 1000,datanodeManager.getHeartbeatRecheckInterval());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,"1m");
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",60,nameNode.getConf().getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",60,datanodeManager.getHeartbeatInterval());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,null);
    nameNode.reconfigureProperty(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,null);
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",null,nameNode.getConf().get(DFS_HEARTBEAT_INTERVAL_KEY));
    assertEquals(DFS_HEARTBEAT_INTERVAL_KEY + " has wrong value",DFS_HEARTBEAT_INTERVAL_DEFAULT,datanodeManager.getHeartbeatInterval());
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",null,nameNode.getConf().get(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY));
    assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " has wrong value",DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT,datanodeManager.getHeartbeatRecheckInterval());
  }
  /** 
 * Tests enable/disable Storage Policy Satisfier dynamically when "dfs.storage.policy.enabled" feature is disabled.
 * @throws ReconfigurationException
 * @throws IOException
 */
  @Test(timeout=30000) public void testReconfigureSPSWithStoragePolicyDisabled() throws ReconfigurationException, IOException {
    cluster.shutdown();
    Configuration conf=new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY,false);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    final NameNode nameNode=cluster.getNameNode();
    verifySPSEnabled(nameNode,DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE,false);
    nameNode.reconfigureProperty(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.EXTERNAL.toString());
    assertNull("SPS shouldn't start as " + DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY + " is disabled",nameNode.getNamesystem().getBlockManager().getSPSManager());
    verifySPSEnabled(nameNode,DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.EXTERNAL,false);
    assertEquals(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY + " has wrong value",StoragePolicySatisfierMode.EXTERNAL.toString(),nameNode.getConf().get(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,DFS_STORAGE_POLICY_SATISFIER_MODE_DEFAULT));
  }
  /** 
 * Tests enable/disable Storage Policy Satisfier dynamically.
 */
  @Test(timeout=30000) public void testReconfigureStoragePolicySatisfierEnabled() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    verifySPSEnabled(nameNode,DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE,false);
    try {
      nameNode.reconfigureProperty(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,"text");
      fail("ReconfigurationException expected");
    }
 catch (    ReconfigurationException e) {
      GenericTestUtils.assertExceptionContains("For enabling or disabling storage policy satisfier, must " + "pass either internal/external/none string value only",e.getCause());
    }
    nameNode.reconfigureProperty(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE.toString());
    verifySPSEnabled(nameNode,DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE,false);
    nameNode.reconfigureProperty(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.EXTERNAL.toString());
    assertEquals(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY + " has wrong value",false,nameNode.getNamesystem().getBlockManager().getSPSManager().isSatisfierRunning());
    assertEquals(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY + " has wrong value",StoragePolicySatisfierMode.EXTERNAL.toString(),nameNode.getConf().get(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,DFS_STORAGE_POLICY_SATISFIER_MODE_DEFAULT));
  }
  /** 
 * Test to satisfy storage policy after disabled storage policy satisfier.
 */
  @Test(timeout=30000) public void testSatisfyStoragePolicyAfterSatisfierDisabled() throws ReconfigurationException, IOException {
    final NameNode nameNode=cluster.getNameNode();
    nameNode.reconfigureProperty(DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE.toString());
    verifySPSEnabled(nameNode,DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE,false);
    Path filePath=new Path("/testSPS");
    DistributedFileSystem fileSystem=cluster.getFileSystem();
    fileSystem.create(filePath);
    fileSystem.setStoragePolicy(filePath,"COLD");
    try {
      fileSystem.satisfyStoragePolicy(filePath);
      fail("Expected to fail, as storage policy feature has disabled.");
    }
 catch (    RemoteException e) {
      GenericTestUtils.assertExceptionContains("Cannot request to satisfy storage policy " + "when storage policy satisfier feature has been disabled" + " by admin. Seek for an admin help to enable it "+ "or use Mover tool.",e);
    }
  }
  void verifySPSEnabled(  final NameNode nameNode,  String property,  StoragePolicySatisfierMode expected,  boolean isSatisfierRunning){
    StoragePolicySatisfyManager spsMgr=nameNode.getNamesystem().getBlockManager().getSPSManager();
    boolean isSPSRunning=spsMgr != null ? spsMgr.isSatisfierRunning() : false;
    assertEquals(property + " has wrong value",isSPSRunning,isSPSRunning);
    String actual=nameNode.getConf().get(property,DFS_STORAGE_POLICY_SATISFIER_MODE_DEFAULT);
    assertEquals(property + " has wrong value",expected,StoragePolicySatisfierMode.fromString(actual));
  }
  @Test public void testBlockInvalidateLimitAfterReconfigured() throws ReconfigurationException {
    final NameNode nameNode=cluster.getNameNode();
    final DatanodeManager datanodeManager=nameNode.namesystem.getBlockManager().getDatanodeManager();
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not correctly set",customizedBlockInvalidateLimit,datanodeManager.getBlockInvalidateLimit());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,Integer.toString(6));
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not honored after reconfiguration",customizedBlockInvalidateLimit,datanodeManager.getBlockInvalidateLimit());
    nameNode.reconfigureProperty(DFS_HEARTBEAT_INTERVAL_KEY,Integer.toString(50));
    assertEquals(DFS_BLOCK_INVALIDATE_LIMIT_KEY + " is not reconfigured correctly",1000,datanodeManager.getBlockInvalidateLimit());
  }
  @After public void shutDown() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
