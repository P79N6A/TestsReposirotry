private class MyResourceTracker3 implements ResourceTracker {
  public NodeAction heartBeatNodeAction=NodeAction.NORMAL;
  public NodeAction registerNodeAction=NodeAction.NORMAL;
  private Map<ApplicationId,List<Long>> keepAliveRequests=new HashMap<ApplicationId,List<Long>>();
  private ApplicationId appId=BuilderUtils.newApplicationId(1,1);
  private final Context context;
  MyResourceTracker3(  Context context){
    this.context=context;
  }
  @Override public RegisterNodeManagerResponse registerNodeManager(  RegisterNodeManagerRequest request) throws YarnException, IOException {
    RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
    response.setNodeAction(registerNodeAction);
    response.setContainerTokenMasterKey(createMasterKey());
    response.setNMTokenMasterKey(createMasterKey());
    return response;
  }
  @Override public NodeHeartbeatResponse nodeHeartbeat(  NodeHeartbeatRequest request) throws YarnException, IOException {
    LOG.info("Got heartBeatId: [" + heartBeatID + "]");
    NodeStatus nodeStatus=request.getNodeStatus();
    nodeStatus.setResponseId(heartBeatID++);
    NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,heartBeatNodeAction,null,null,null,null,1000L);
    if (nodeStatus.getKeepAliveApplications() != null && nodeStatus.getKeepAliveApplications().size() > 0) {
      for (      ApplicationId appId : nodeStatus.getKeepAliveApplications()) {
        List<Long> list=keepAliveRequests.get(appId);
        if (list == null) {
          list=new LinkedList<Long>();
          keepAliveRequests.put(appId,list);
        }
        list.add(System.currentTimeMillis());
      }
    }
    if (heartBeatID == 2) {
      LOG.info("Sending FINISH_APP for application: [" + appId + "]");
      this.context.getApplications().put(appId,mock(Application.class));
      nhResponse.addAllApplicationsToCleanup(Collections.singletonList(appId));
    }
    return nhResponse;
  }
  @Override public UnRegisterNodeManagerResponse unRegisterNodeManager(  UnRegisterNodeManagerRequest request) throws YarnException, IOException {
    return recordFactory.newRecordInstance(UnRegisterNodeManagerResponse.class);
  }
}
