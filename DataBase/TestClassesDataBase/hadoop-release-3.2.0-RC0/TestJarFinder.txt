public class TestJarFinder {
  @Test public void testJar() throws Exception {
    String jar=JarFinder.getJar(LogFactory.class);
    Assert.assertTrue(new File(jar).exists());
  }
  private static void delete(  File file) throws IOException {
    if (file.getAbsolutePath().length() < 5) {
      throw new IllegalArgumentException(MessageFormat.format("Path [{0}] is too short, not deleting",file.getAbsolutePath()));
    }
    if (file.exists()) {
      if (file.isDirectory()) {
        File[] children=file.listFiles();
        if (children != null) {
          for (          File child : children) {
            delete(child);
          }
        }
      }
      if (!file.delete()) {
        throw new RuntimeException(MessageFormat.format("Could not delete path [{0}]",file.getAbsolutePath()));
      }
    }
  }
  @Test public void testExpandedClasspath() throws Exception {
    String jar=JarFinder.getJar(TestJarFinder.class);
    Assert.assertTrue(new File(jar).exists());
  }
  @Test public void testExistingManifest() throws Exception {
    File dir=GenericTestUtils.getTestDir(TestJarFinder.class.getName() + "-testExistingManifest");
    delete(dir);
    dir.mkdirs();
    File metaInfDir=new File(dir,"META-INF");
    metaInfDir.mkdirs();
    File manifestFile=new File(metaInfDir,"MANIFEST.MF");
    Manifest manifest=new Manifest();
    OutputStream os=new FileOutputStream(manifestFile);
    manifest.write(os);
    os.close();
    File propsFile=new File(dir,"props.properties");
    Writer writer=new FileWriter(propsFile);
    new Properties().store(writer,"");
    writer.close();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    JarOutputStream zos=new JarOutputStream(baos);
    JarFinder.jarDir(dir,"",zos);
    JarInputStream jis=new JarInputStream(new ByteArrayInputStream(baos.toByteArray()));
    Assert.assertNotNull(jis.getManifest());
    jis.close();
  }
  @Test public void testNoManifest() throws Exception {
    File dir=GenericTestUtils.getTestDir(TestJarFinder.class.getName() + "-testNoManifest");
    delete(dir);
    dir.mkdirs();
    File propsFile=new File(dir,"props.properties");
    Writer writer=new FileWriter(propsFile);
    new Properties().store(writer,"");
    writer.close();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    JarOutputStream zos=new JarOutputStream(baos);
    JarFinder.jarDir(dir,"",zos);
    JarInputStream jis=new JarInputStream(new ByteArrayInputStream(baos.toByteArray()));
    Assert.assertNotNull(jis.getManifest());
    jis.close();
  }
}
