class RMService extends AbstractService implements ApplicationClientProtocol {
  private String clientServiceBindAddress;
  InetSocketAddress clientBindAddress;
  private Server server;
  public RMService(  String name){
    super(name);
  }
  @Override protected void serviceInit(  Configuration conf) throws Exception {
    clientServiceBindAddress=RMADDRESS;
    clientBindAddress=NetUtils.createSocketAddr(clientServiceBindAddress);
    super.serviceInit(conf);
  }
  @Override protected void serviceStart() throws Exception {
    YarnRPC rpc=YarnRPC.create(getConfig());
    Configuration clientServerConf=new Configuration(getConfig());
    this.server=rpc.getServer(ApplicationClientProtocol.class,this,clientBindAddress,clientServerConf,null,1);
    this.server.start();
    super.serviceStart();
  }
  @Override public GetNewApplicationResponse getNewApplication(  GetNewApplicationRequest request) throws IOException {
    return null;
  }
  @Override public GetApplicationReportResponse getApplicationReport(  GetApplicationReportRequest request) throws IOException {
    ApplicationId applicationId=request.getApplicationId();
    ApplicationReport application=recordFactory.newRecordInstance(ApplicationReport.class);
    application.setApplicationId(applicationId);
    application.setFinalApplicationStatus(FinalApplicationStatus.UNDEFINED);
    if (amRunning) {
      application.setYarnApplicationState(YarnApplicationState.RUNNING);
    }
 else     if (amRestarting) {
      application.setYarnApplicationState(YarnApplicationState.SUBMITTED);
    }
 else {
      application.setYarnApplicationState(YarnApplicationState.FINISHED);
      application.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);
    }
    String[] split=AMHOSTADDRESS.split(":");
    application.setHost(split[0]);
    application.setRpcPort(Integer.parseInt(split[1]));
    application.setUser("TestClientRedirect-user");
    application.setName("N/A");
    application.setQueue("N/A");
    application.setStartTime(0);
    application.setFinishTime(0);
    application.setTrackingUrl("N/A");
    application.setDiagnostics("N/A");
    GetApplicationReportResponse response=recordFactory.newRecordInstance(GetApplicationReportResponse.class);
    response.setApplicationReport(application);
    return response;
  }
  @Override public SubmitApplicationResponse submitApplication(  SubmitApplicationRequest request) throws IOException {
    throw new IOException("Test");
  }
  @Override public FailApplicationAttemptResponse failApplicationAttempt(  FailApplicationAttemptRequest request) throws IOException {
    return recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);
  }
  @Override public KillApplicationResponse forceKillApplication(  KillApplicationRequest request) throws IOException {
    return KillApplicationResponse.newInstance(true);
  }
  @Override public GetClusterMetricsResponse getClusterMetrics(  GetClusterMetricsRequest request) throws IOException {
    return null;
  }
  @Override public GetApplicationsResponse getApplications(  GetApplicationsRequest request) throws IOException {
    return null;
  }
  @Override public GetClusterNodesResponse getClusterNodes(  GetClusterNodesRequest request) throws IOException {
    return null;
  }
  @Override public GetQueueInfoResponse getQueueInfo(  GetQueueInfoRequest request) throws IOException {
    return null;
  }
  @Override public GetQueueUserAclsInfoResponse getQueueUserAcls(  GetQueueUserAclsInfoRequest request) throws IOException {
    return null;
  }
  @Override public GetDelegationTokenResponse getDelegationToken(  GetDelegationTokenRequest request) throws IOException {
    return null;
  }
  @Override public RenewDelegationTokenResponse renewDelegationToken(  RenewDelegationTokenRequest request) throws IOException {
    return null;
  }
  @Override public CancelDelegationTokenResponse cancelDelegationToken(  CancelDelegationTokenRequest request) throws IOException {
    return null;
  }
  @Override public MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(  MoveApplicationAcrossQueuesRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetApplicationAttemptReportResponse getApplicationAttemptReport(  GetApplicationAttemptReportRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetApplicationAttemptsResponse getApplicationAttempts(  GetApplicationAttemptsRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetContainerReportResponse getContainerReport(  GetContainerReportRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetContainersResponse getContainers(  GetContainersRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetNewReservationResponse getNewReservation(  GetNewReservationRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ReservationSubmissionResponse submitReservation(  ReservationSubmissionRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ReservationUpdateResponse updateReservation(  ReservationUpdateRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ReservationDeleteResponse deleteReservation(  ReservationDeleteRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public ReservationListResponse listReservations(  ReservationListRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetNodesToLabelsResponse getNodeToLabels(  GetNodesToLabelsRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetClusterNodeLabelsResponse getClusterNodeLabels(  GetClusterNodeLabelsRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetLabelsToNodesResponse getLabelsToNodes(  GetLabelsToNodesRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public UpdateApplicationPriorityResponse updateApplicationPriority(  UpdateApplicationPriorityRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public SignalContainerResponse signalToContainer(  SignalContainerRequest request) throws IOException {
    return null;
  }
  @Override public UpdateApplicationTimeoutsResponse updateApplicationTimeouts(  UpdateApplicationTimeoutsRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetAllResourceProfilesResponse getResourceProfiles(  GetAllResourceProfilesRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetResourceProfileResponse getResourceProfile(  GetResourceProfileRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetAllResourceTypeInfoResponse getResourceTypeInfo(  GetAllResourceTypeInfoRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetAttributesToNodesResponse getAttributesToNodes(  GetAttributesToNodesRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetClusterNodeAttributesResponse getClusterNodeAttributes(  GetClusterNodeAttributesRequest request) throws YarnException, IOException {
    return null;
  }
  @Override public GetNodesToAttributesResponse getNodesToAttributes(  GetNodesToAttributesRequest request) throws YarnException, IOException {
    return null;
  }
}
