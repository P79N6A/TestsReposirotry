/** 
 * Test listStatus operation.
 */
public class ITestAzureBlobFileSystemListStatus extends AbstractAbfsIntegrationTest {
  private static final int TEST_FILES_NUMBER=6000;
  public ITestAzureBlobFileSystemListStatus() throws Exception {
    super();
  }
  @Test public void testListPath() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    final List<Future<Void>> tasks=new ArrayList<>();
    ExecutorService es=Executors.newFixedThreadPool(10);
    for (int i=0; i < TEST_FILES_NUMBER; i++) {
      final Path fileName=new Path("/test" + i);
      Callable<Void> callable=new Callable<Void>(){
        @Override public Void call() throws Exception {
          touch(fileName);
          return null;
        }
      }
;
      tasks.add(es.submit(callable));
    }
    for (    Future<Void> task : tasks) {
      task.get();
    }
    es.shutdownNow();
    FileStatus[] files=fs.listStatus(new Path("/"));
    assertEquals(TEST_FILES_NUMBER,files.length);
  }
  /** 
 * Creates a file, verifies that listStatus returns it, even while the file is still open for writing.
 */
  @Test public void testListFileVsListDir() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path path=new Path("/testFile");
    try (FSDataOutputStream ignored=fs.create(path)){
      FileStatus[] testFiles=fs.listStatus(path);
      assertEquals("length of test files",1,testFiles.length);
      FileStatus status=testFiles[0];
      assertIsFileReference(status);
    }
   }
  @Test public void testListFileVsListDir2() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    fs.mkdirs(new Path("/testFolder"));
    fs.mkdirs(new Path("/testFolder/testFolder2"));
    fs.mkdirs(new Path("/testFolder/testFolder2/testFolder3"));
    Path testFile0Path=new Path("/testFolder/testFolder2/testFolder3/testFile");
    ContractTestUtils.touch(fs,testFile0Path);
    FileStatus[] testFiles=fs.listStatus(testFile0Path);
    assertEquals("Wrong listing size of file " + testFile0Path,1,testFiles.length);
    FileStatus file0=testFiles[0];
    assertEquals("Wrong path for " + file0,new Path(getTestUrl(),"/testFolder/testFolder2/testFolder3/testFile"),file0.getPath());
    assertIsFileReference(file0);
  }
  @Test(expected=FileNotFoundException.class) public void testListNonExistentDir() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    fs.listStatus(new Path("/testFile/"));
  }
  @Test public void testListFiles() throws Exception {
    final AzureBlobFileSystem fs=getFileSystem();
    Path testDir=new Path("/test");
    fs.mkdirs(testDir);
    FileStatus[] fileStatuses=fs.listStatus(new Path("/"));
    assertEquals(1,fileStatuses.length);
    fs.mkdirs(new Path("/test/sub"));
    fileStatuses=fs.listStatus(testDir);
    assertEquals(1,fileStatuses.length);
    assertEquals("sub",fileStatuses[0].getPath().getName());
    assertIsDirectoryReference(fileStatuses[0]);
    Path childF=fs.makeQualified(new Path("/test/f"));
    touch(childF);
    fileStatuses=fs.listStatus(testDir);
    assertEquals(2,fileStatuses.length);
    final FileStatus childStatus=fileStatuses[0];
    assertEquals(childF,childStatus.getPath());
    assertEquals("f",childStatus.getPath().getName());
    assertIsFileReference(childStatus);
    assertEquals(0,childStatus.getLen());
    final FileStatus status1=fileStatuses[1];
    assertEquals("sub",status1.getPath().getName());
    assertIsDirectoryReference(status1);
    LocatedFileStatus locatedChildStatus=fs.listFiles(childF,false).next();
    assertIsFileReference(locatedChildStatus);
    fs.delete(testDir,true);
    intercept(FileNotFoundException.class,() -> fs.listFiles(childF,false).next());
    assertEquals("Path mismatch of " + locatedChildStatus,childF,locatedChildStatus.getPath());
    assertEquals("locatedstatus.equals(status)",locatedChildStatus,childStatus);
    assertEquals("status.equals(locatedstatus)",childStatus,locatedChildStatus);
  }
  private void assertIsDirectoryReference(  FileStatus status){
    assertTrue("Not a directory: " + status,status.isDirectory());
    assertFalse("Not a directory: " + status,status.isFile());
    assertEquals(0,status.getLen());
  }
  private void assertIsFileReference(  FileStatus status){
    assertFalse("Not a file: " + status,status.isDirectory());
    assertTrue("Not a file: " + status,status.isFile());
  }
}
