public class TestFairOrderingPolicy {
  final static int GB=1024;
  @Test public void testSimpleComparison(){
    FairOrderingPolicy<MockSchedulableEntity> policy=new FairOrderingPolicy<MockSchedulableEntity>();
    MockSchedulableEntity r1=new MockSchedulableEntity();
    MockSchedulableEntity r2=new MockSchedulableEntity();
    Assert.assertTrue(policy.getComparator().compare(r1,r2) == 0);
    r1.setUsed(Resources.createResource(1,0));
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(r1.getSchedulingResourceUsage());
    Assert.assertTrue(policy.getComparator().compare(r1,r2) > 0);
  }
  @Test public void testSizeBasedWeight(){
    FairOrderingPolicy<MockSchedulableEntity> policy=new FairOrderingPolicy<MockSchedulableEntity>();
    policy.setSizeBasedWeight(true);
    MockSchedulableEntity r1=new MockSchedulableEntity();
    MockSchedulableEntity r2=new MockSchedulableEntity();
    Assert.assertTrue(policy.getComparator().compare(r1,r2) == 0);
    r1.setUsed(Resources.createResource(4 * GB));
    r2.setUsed(Resources.createResource(4 * GB));
    r1.setPending(Resources.createResource(4 * GB));
    r2.setPending(Resources.createResource(4 * GB));
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(r1.getSchedulingResourceUsage());
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(r2.getSchedulingResourceUsage());
    Assert.assertTrue(policy.getComparator().compare(r1,r2) == 0);
    r2.setUsed(Resources.createResource(5 * GB));
    r2.setPending(Resources.createResource(5 * GB));
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(r2.getSchedulingResourceUsage());
    Assert.assertTrue(policy.getComparator().compare(r1,r2) < 0);
    r2.setPending(Resources.createResource(100 * GB));
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(r2.getSchedulingResourceUsage());
    Assert.assertTrue(policy.getComparator().compare(r1,r2) > 0);
  }
  @Test public void testIterators(){
    OrderingPolicy<MockSchedulableEntity> schedOrder=new FairOrderingPolicy<MockSchedulableEntity>();
    MockSchedulableEntity msp1=new MockSchedulableEntity();
    MockSchedulableEntity msp2=new MockSchedulableEntity();
    MockSchedulableEntity msp3=new MockSchedulableEntity();
    msp1.setId("1");
    msp2.setId("2");
    msp3.setId("3");
    msp1.setUsed(Resources.createResource(3));
    msp2.setUsed(Resources.createResource(2));
    msp3.setUsed(Resources.createResource(1));
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(msp1.getSchedulingResourceUsage());
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(msp2.getSchedulingResourceUsage());
    AbstractComparatorOrderingPolicy.updateSchedulingResourceUsage(msp2.getSchedulingResourceUsage());
    schedOrder.addSchedulableEntity(msp1);
    schedOrder.addSchedulableEntity(msp2);
    schedOrder.addSchedulableEntity(msp3);
    checkIds(schedOrder.getAssignmentIterator(),new String[]{"3","2","1"});
    checkIds(schedOrder.getPreemptionIterator(),new String[]{"1","2","3"});
    msp2.setUsed(Resources.createResource(6));
    checkIds(schedOrder.getAssignmentIterator(),new String[]{"3","2","1"});
    checkIds(schedOrder.getPreemptionIterator(),new String[]{"1","2","3"});
    schedOrder.containerAllocated(msp2,null);
    checkIds(schedOrder.getAssignmentIterator(),new String[]{"3","1","2"});
    checkIds(schedOrder.getPreemptionIterator(),new String[]{"2","1","3"});
  }
  @Test public void testSizeBasedWeightNotAffectAppActivation() throws Exception {
    CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
    String queuePath=CapacitySchedulerConfiguration.ROOT + ".default";
    csConf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getCanonicalName());
    csConf.setOrderingPolicy(queuePath,CapacitySchedulerConfiguration.FAIR_APP_ORDERING_POLICY);
    csConf.setOrderingPolicyParameter(queuePath,FairOrderingPolicy.ENABLE_SIZE_BASED_WEIGHT,"true");
    csConf.setMaximumApplicationMasterResourcePerQueuePercent(queuePath,0.1f);
    MockRM rm=new MockRM(csConf);
    rm.start();
    CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
    LeafQueue lq=(LeafQueue)cs.getQueue("default");
    OrderingPolicy<FiCaSchedulerApp> policy=lq.getOrderingPolicy();
    Assert.assertTrue(policy instanceof FairOrderingPolicy);
    Assert.assertTrue(((FairOrderingPolicy<FiCaSchedulerApp>)policy).getSizeBasedWeight());
    rm.registerNode("h1:1234",10 * GB);
    rm.submitApp(1 * GB,"app","user",null,"default");
    rm.submitApp(1 * GB,"app","user",null,"default");
    rm.submitApp(1 * GB,"app","user",null,"default");
    rm.submitApp(1 * GB,"app","user",null,"default");
    Assert.assertEquals(1,lq.getNumActiveApplications());
    Assert.assertEquals(3,lq.getNumPendingApplications());
    cs.handle(new NodeUpdateSchedulerEvent(rm.getRMContext().getRMNodes().get(NodeId.newInstance("h1",1234))));
    Assert.assertEquals(1,lq.getNumActiveApplications());
    Assert.assertEquals(3,lq.getNumPendingApplications());
  }
  public void checkIds(  Iterator<MockSchedulableEntity> si,  String[] ids){
    for (int i=0; i < ids.length; i++) {
      Assert.assertEquals(si.next().getId(),ids[i]);
    }
  }
}
