/** 
 * Test for building / resolving components of type SERVICE.
 */
public class TestBuildExternalComponents {
  protected Configuration conf=new YarnConfiguration();
  private File basedir;
  private static void checkComponentNames(  List<Component> components,  Set<String> expectedComponents){
    Assert.assertEquals(expectedComponents.size(),components.size());
    for (    Component comp : components) {
      Assert.assertTrue(expectedComponents.contains(comp.getName()));
    }
  }
  private void buildAndCheckComponents(  String appName,  String appDef,  SliderFileSystem sfs,  Set<String> names) throws Throwable {
    AppAdminClient client=AppAdminClient.createAppAdminClient(AppAdminClient.UNIT_TEST_TYPE,conf);
    client.actionSave(ExampleAppJson.resourceName(appDef),null,null,null);
    List<Component> components=ServiceApiUtil.getComponents(sfs,appName);
    checkComponentNames(components,names);
  }
  @Before public void setup() throws IOException {
    basedir=new File("target","apps");
    if (basedir.exists()) {
      FileUtils.deleteDirectory(basedir);
    }
 else {
      basedir.mkdirs();
    }
    conf.set(YARN_SERVICE_BASE_PATH,basedir.getAbsolutePath());
  }
  @After public void tearDown() throws IOException {
    if (basedir != null) {
      FileUtils.deleteDirectory(basedir);
    }
  }
  @Test public void testExternalComponentBuild() throws Throwable {
    SliderFileSystem sfs=new SliderFileSystem(conf);
    Set<String> nameSet=new HashSet<>();
    nameSet.add("simple");
    nameSet.add("master");
    nameSet.add("worker");
    buildAndCheckComponents("app-1",ExampleAppJson.APP_JSON,sfs,nameSet);
    buildAndCheckComponents("external-0",ExampleAppJson.EXTERNAL_JSON_0,sfs,nameSet);
    nameSet.add("other");
    buildAndCheckComponents("external-1",ExampleAppJson.EXTERNAL_JSON_1,sfs,nameSet);
    nameSet.add("another");
    buildAndCheckComponents("external-2",ExampleAppJson.EXTERNAL_JSON_2,sfs,nameSet);
  }
}
