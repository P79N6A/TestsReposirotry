/** 
 * Tests for create(): performance and/or load testing.
 */
public class ITestS3ACreatePerformance extends S3AScaleTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(ITestS3ADirectoryPerformance.class);
  private Path basePath;
  private int basePathDepth;
  private static final int PATH_DEPTH=10;
  @Override public void setup() throws Exception {
    super.setup();
    basePath=getTestPath();
    basePathDepth=basePath.depth();
  }
  /** 
 * Test rate at which we can create deeply-nested files from a single thread.
 * @throws Exception
 */
  @Test public void testDeepSequentialCreate() throws Exception {
    long numOperations=getOperationCount();
    S3AFileSystem fs=getFileSystem();
    NanoTimer timer=new NanoTimer();
    for (int i=0; i < numOperations; i++) {
      Path p=getPathIteration(i,PATH_DEPTH);
      OutputStream out=fs.create(p);
      out.write(40);
      out.close();
    }
    timer.end("Time to create %d files of depth %d",getOperationCount(),PATH_DEPTH);
    LOG.info("Time per create: {} msec",timer.nanosPerOperation(numOperations) / 1000);
  }
  private Path getPathIteration(  long iter,  int totalDepth) throws Exception {
    assertTrue("Test path too long, increase PATH_DEPTH in test.",totalDepth > basePathDepth);
    int neededDirs=totalDepth - basePathDepth - 1;
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < neededDirs; i++) {
      sb.append("iter-").append(iter);
      sb.append("-dir-").append(i);
      sb.append("/");
    }
    sb.append("file").append(iter);
    return new Path(basePath,sb.toString());
  }
}
