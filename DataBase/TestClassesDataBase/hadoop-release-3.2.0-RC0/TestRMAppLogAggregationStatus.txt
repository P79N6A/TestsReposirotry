public class TestRMAppLogAggregationStatus {
  private RMContext rmContext;
  private YarnScheduler scheduler;
  private SchedulerEventType eventType;
  private ApplicationId appId;
private final class TestSchedulerEventDispatcher implements EventHandler<SchedulerEvent> {
    @Override public void handle(    SchedulerEvent event){
      scheduler.handle(event);
    }
  }
  @Before public void setUp() throws Exception {
    InlineDispatcher rmDispatcher=new InlineDispatcher();
    rmContext=new RMContextImpl(rmDispatcher,null,null,null,null,null,null,null,null);
    rmContext.setSystemMetricsPublisher(mock(SystemMetricsPublisher.class));
    rmContext.setRMApplicationHistoryWriter(mock(RMApplicationHistoryWriter.class));
    rmContext.setRMTimelineCollectorManager(mock(RMTimelineCollectorManager.class));
    scheduler=mock(YarnScheduler.class);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        final SchedulerEvent event=(SchedulerEvent)(invocation.getArguments()[0]);
        eventType=event.getType();
        if (eventType == SchedulerEventType.NODE_UPDATE) {
        }
        return null;
      }
    }
).when(scheduler).handle(any(SchedulerEvent.class));
    rmDispatcher.register(SchedulerEventType.class,new TestSchedulerEventDispatcher());
    appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
  }
  @After public void tearDown() throws Exception {
  }
  @Test public void testLogAggregationStatus() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
    conf.setLong(YarnConfiguration.LOG_AGGREGATION_STATUS_TIME_OUT_MS,1500);
    RMApp rmApp=createRMApp(conf);
    this.rmContext.getRMApps().put(appId,rmApp);
    rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.START));
    rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.APP_NEW_SAVED));
    rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.APP_ACCEPTED));
    NodeId nodeId1=NodeId.newInstance("localhost",1234);
    Resource capability=Resource.newInstance(4096,4);
    RMNodeImpl node1=new RMNodeImpl(nodeId1,rmContext,null,0,0,null,capability,null);
    node1.handle(new RMNodeStartedEvent(nodeId1,null,null));
    rmApp.handle(new RMAppRunningOnNodeEvent(this.appId,nodeId1));
    NodeId nodeId2=NodeId.newInstance("localhost",2345);
    RMNodeImpl node2=new RMNodeImpl(nodeId2,rmContext,null,0,0,null,capability,null);
    node2.handle(new RMNodeStartedEvent(node2.getNodeID(),null,null));
    rmApp.handle(new RMAppRunningOnNodeEvent(this.appId,nodeId2));
    Map<NodeId,LogAggregationReport> logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertEquals(2,logAggregationStatus.size());
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
    for (    Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
      Assert.assertEquals(LogAggregationStatus.NOT_START,report.getValue().getLogAggregationStatus());
    }
    List<LogAggregationReport> node1ReportForApp=new ArrayList<LogAggregationReport>();
    String messageForNode1_1="node1 logAggregation status updated at " + System.currentTimeMillis();
    LogAggregationReport report1=LogAggregationReport.newInstance(appId,LogAggregationStatus.RUNNING,messageForNode1_1);
    node1ReportForApp.add(report1);
    NodeStatus nodeStatus1=NodeStatus.newInstance(node1.getNodeID(),0,new ArrayList<ContainerStatus>(),null,NodeHealthStatus.newInstance(true,null,0),null,null,null);
    node1.handle(new RMNodeStatusEvent(node1.getNodeID(),nodeStatus1,node1ReportForApp));
    List<LogAggregationReport> node2ReportForApp=new ArrayList<LogAggregationReport>();
    String messageForNode2_1="node2 logAggregation status updated at " + System.currentTimeMillis();
    LogAggregationReport report2=LogAggregationReport.newInstance(appId,LogAggregationStatus.RUNNING,messageForNode2_1);
    node2ReportForApp.add(report2);
    NodeStatus nodeStatus2=NodeStatus.newInstance(node2.getNodeID(),0,new ArrayList<ContainerStatus>(),null,NodeHealthStatus.newInstance(true,null,0),null,null,null);
    node2.handle(new RMNodeStatusEvent(node2.getNodeID(),nodeStatus2,node2ReportForApp));
    logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertEquals(2,logAggregationStatus.size());
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
    for (    Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
      if (report.getKey().equals(node1.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
        Assert.assertEquals(messageForNode1_1,report.getValue().getDiagnosticMessage());
      }
 else       if (report.getKey().equals(node2.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
        Assert.assertEquals(messageForNode2_1,report.getValue().getDiagnosticMessage());
      }
 else {
        Assert.fail("should not contain log aggregation report for other nodes");
      }
    }
    List<LogAggregationReport> node1ReportForApp2=new ArrayList<LogAggregationReport>();
    String messageForNode1_2="node1 logAggregation status updated at " + System.currentTimeMillis();
    LogAggregationReport report1_2=LogAggregationReport.newInstance(appId,LogAggregationStatus.RUNNING,messageForNode1_2);
    node1ReportForApp2.add(report1_2);
    node1.handle(new RMNodeStatusEvent(node1.getNodeID(),nodeStatus1,node1ReportForApp2));
    logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertEquals(2,logAggregationStatus.size());
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
    for (    Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
      if (report.getKey().equals(node1.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
        Assert.assertEquals(messageForNode1_1 + "\n" + messageForNode1_2,report.getValue().getDiagnosticMessage());
      }
 else       if (report.getKey().equals(node2.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
        Assert.assertEquals(messageForNode2_1,report.getValue().getDiagnosticMessage());
      }
 else {
        Assert.fail("should not contain log aggregation report for other nodes");
      }
    }
    rmApp.handle(new RMAppEvent(appId,RMAppEventType.KILL));
    rmApp.handle(new RMAppEvent(appId,RMAppEventType.ATTEMPT_KILLED));
    rmApp.handle(new RMAppEvent(appId,RMAppEventType.APP_UPDATE_SAVED));
    Assert.assertEquals(RMAppState.KILLED,rmApp.getState());
    Thread.sleep(1500);
    logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertEquals(2,logAggregationStatus.size());
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
    for (    Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
      Assert.assertEquals(LogAggregationStatus.TIME_OUT,report.getValue().getLogAggregationStatus());
    }
    List<LogAggregationReport> node1ReportForApp3=new ArrayList<LogAggregationReport>();
    LogAggregationReport report1_3;
    for (int i=0; i < 10; i++) {
      report1_3=LogAggregationReport.newInstance(appId,LogAggregationStatus.RUNNING,"test_message_" + i);
      node1ReportForApp3.add(report1_3);
    }
    node1ReportForApp3.add(LogAggregationReport.newInstance(appId,LogAggregationStatus.SUCCEEDED,""));
    node1.handle(new RMNodeStatusEvent(node1.getNodeID(),nodeStatus1,node1ReportForApp3));
    logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertEquals(2,logAggregationStatus.size());
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
    Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
    for (    Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
      if (report.getKey().equals(node1.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.SUCCEEDED,report.getValue().getLogAggregationStatus());
        StringBuilder builder=new StringBuilder();
        for (int i=0; i < 9; i++) {
          builder.append("test_message_" + i);
          builder.append("\n");
        }
        builder.append("test_message_" + 9);
        Assert.assertEquals(builder.toString(),report.getValue().getDiagnosticMessage());
      }
 else       if (report.getKey().equals(node2.getNodeID())) {
        Assert.assertEquals(LogAggregationStatus.TIME_OUT,report.getValue().getLogAggregationStatus());
      }
 else {
        Assert.fail("should not contain log aggregation report for other nodes");
      }
    }
    List<LogAggregationReport> node2ReportForApp2=new ArrayList<LogAggregationReport>();
    LogAggregationReport report2_2=LogAggregationReport.newInstance(appId,LogAggregationStatus.RUNNING_WITH_FAILURE,"Fail_Message");
    LogAggregationReport report2_3=LogAggregationReport.newInstance(appId,LogAggregationStatus.FAILED,"");
    node2ReportForApp2.add(report2_2);
    node2ReportForApp2.add(report2_3);
    node2.handle(new RMNodeStatusEvent(node2.getNodeID(),nodeStatus2,node2ReportForApp2));
    Assert.assertEquals(LogAggregationStatus.FAILED,rmApp.getLogAggregationStatusForAppReport());
    logAggregationStatus=rmApp.getLogAggregationReportsForApp();
    Assert.assertTrue(logAggregationStatus.size() == 1);
    Assert.assertTrue(logAggregationStatus.containsKey(node2.getNodeID()));
    Assert.assertTrue(!logAggregationStatus.containsKey(node1.getNodeID()));
    Assert.assertEquals("Fail_Message",((RMAppImpl)rmApp).getLogAggregationFailureMessagesForNM(nodeId2));
  }
  @Test(timeout=10000) public void testGetLogAggregationStatusForAppReport(){
    YarnConfiguration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,false);
    RMAppImpl rmApp=(RMAppImpl)createRMApp(conf);
    Assert.assertEquals(LogAggregationStatus.DISABLED,rmApp.getLogAggregationStatusForAppReport());
    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
    rmApp=(RMAppImpl)createRMApp(conf);
    Assert.assertEquals(LogAggregationStatus.NOT_START,rmApp.getLogAggregationStatusForAppReport());
    NodeId nodeId1=NodeId.newInstance("localhost",1111);
    NodeId nodeId2=NodeId.newInstance("localhost",2222);
    NodeId nodeId3=NodeId.newInstance("localhost",3333);
    NodeId nodeId4=NodeId.newInstance("localhost",4444);
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    Assert.assertEquals(LogAggregationStatus.NOT_START,rmApp.getLogAggregationStatusForAppReport());
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    Assert.assertEquals(LogAggregationStatus.RUNNING,rmApp.getLogAggregationStatusForAppReport());
    rmApp.handle(new RMAppEvent(rmApp.getApplicationId(),RMAppEventType.KILL));
    Assert.assertTrue(RMAppImpl.isAppInFinalState(rmApp));
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.TIME_OUT,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    Assert.assertEquals(LogAggregationStatus.TIME_OUT,rmApp.getLogAggregationStatusForAppReport());
    rmApp=(RMAppImpl)createRMApp(conf);
    rmApp.handle(new RMAppEvent(rmApp.getApplicationId(),RMAppEventType.KILL));
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    Assert.assertEquals(LogAggregationStatus.SUCCEEDED,rmApp.getLogAggregationStatusForAppReport());
    rmApp=(RMAppImpl)createRMApp(conf);
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    Assert.assertEquals(LogAggregationStatus.RUNNING,rmApp.getLogAggregationStatusForAppReport());
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING_WITH_FAILURE,""));
    Assert.assertEquals(LogAggregationStatus.RUNNING_WITH_FAILURE,rmApp.getLogAggregationStatusForAppReport());
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.NOT_START,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.RUNNING,""));
    Assert.assertEquals(LogAggregationStatus.RUNNING_WITH_FAILURE,rmApp.getLogAggregationStatusForAppReport());
    rmApp.handle(new RMAppEvent(rmApp.getApplicationId(),RMAppEventType.KILL));
    Assert.assertTrue(RMAppImpl.isAppInFinalState(rmApp));
    rmApp.aggregateLogReport(nodeId1,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.SUCCEEDED,""));
    rmApp.aggregateLogReport(nodeId2,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.TIME_OUT,""));
    rmApp.aggregateLogReport(nodeId3,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.FAILED,""));
    rmApp.aggregateLogReport(nodeId4,LogAggregationReport.newInstance(rmApp.getApplicationId(),LogAggregationStatus.FAILED,""));
    Assert.assertEquals(LogAggregationStatus.FAILED,rmApp.getLogAggregationStatusForAppReport());
  }
  private RMApp createRMApp(  Configuration conf){
    ApplicationSubmissionContext submissionContext=ApplicationSubmissionContext.newInstance(appId,"test","default",Priority.newInstance(0),mock(ContainerLaunchContext.class),false,true,2,Resource.newInstance(10,2),"test");
    return new RMAppImpl(this.appId,this.rmContext,conf,"test","test","default",submissionContext,scheduler,this.rmContext.getApplicationMasterService(),System.currentTimeMillis(),"test",null,null);
  }
}
