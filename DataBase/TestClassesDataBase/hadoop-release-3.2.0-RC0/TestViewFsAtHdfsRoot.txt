/** 
 * Make sure that ViewFs works when the root of an FS is mounted to a ViewFs mount point.
 */
public class TestViewFsAtHdfsRoot extends ViewFsBaseTest {
  private static MiniDFSCluster cluster;
  private static final HdfsConfiguration CONF=new HdfsConfiguration();
  private static FileContext fc;
  @Override protected FileContextTestHelper createFileContextHelper(){
    return new FileContextTestHelper("/tmp/TestViewFsAtHdfsRoot");
  }
  @BeforeClass public static void clusterSetupAtBegining() throws IOException, LoginException, URISyntaxException {
    SupportsBlocks=true;
    CONF.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
    cluster.waitClusterUp();
    fc=FileContext.getFileContext(cluster.getURI(0),CONF);
  }
  @AfterClass public static void ClusterShutdownAtEnd() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  @Override @Before public void setUp() throws Exception {
    fcTarget=fc;
    super.setUp();
  }
  /** 
 * Override this so that we don't set the targetTestRoot to any path under the root of the FS, and so that we don't try to delete the test dir, but rather only its contents.
 */
  @Override void initializeTargetTestRoot() throws IOException {
    targetTestRoot=fc.makeQualified(new Path("/"));
    RemoteIterator<FileStatus> dirContents=fc.listStatus(targetTestRoot);
    while (dirContents.hasNext()) {
      fc.delete(dirContents.next().getPath(),true);
    }
  }
  /** 
 * This overrides the default implementation since hdfs does have delegation tokens.
 */
  @Override int getExpectedDelegationTokenCount(){
    return 8;
  }
}
