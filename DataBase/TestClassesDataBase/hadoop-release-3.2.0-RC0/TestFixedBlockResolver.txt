/** 
 * Validate fixed-size block partitioning.
 */
public class TestFixedBlockResolver {
  @Rule public TestName name=new TestName();
  private final FixedBlockResolver blockId=new FixedBlockResolver();
  @Before public void setup(){
    Configuration conf=new Configuration(false);
    conf.setLong(FixedBlockResolver.BLOCKSIZE,512L * (1L << 20));
    conf.setLong(FixedBlockResolver.START_BLOCK,512L * (1L << 20));
    blockId.setConf(conf);
    System.out.println(name.getMethodName());
  }
  @Test public void testExactBlock() throws Exception {
    FileStatus f=file(512,256);
    int nblocks=0;
    for (    BlockProto b : blockId.resolve(f)) {
      ++nblocks;
      assertEquals(512L * (1L << 20),b.getNumBytes());
    }
    assertEquals(1,nblocks);
    FileStatus g=file(1024,256);
    nblocks=0;
    for (    BlockProto b : blockId.resolve(g)) {
      ++nblocks;
      assertEquals(512L * (1L << 20),b.getNumBytes());
    }
    assertEquals(2,nblocks);
    FileStatus h=file(5120,256);
    nblocks=0;
    for (    BlockProto b : blockId.resolve(h)) {
      ++nblocks;
      assertEquals(512L * (1L << 20),b.getNumBytes());
    }
    assertEquals(10,nblocks);
  }
  @Test public void testEmpty() throws Exception {
    FileStatus f=file(0,100);
    Iterator<BlockProto> b=blockId.resolve(f).iterator();
    assertTrue(b.hasNext());
    assertEquals(0,b.next().getNumBytes());
    assertFalse(b.hasNext());
  }
  @Test public void testRandomFile() throws Exception {
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("seed: " + seed);
    r.setSeed(seed);
    int len=r.nextInt(4096) + 512;
    int blk=r.nextInt(len - 128) + 128;
    FileStatus s=file(len,blk);
    long nbytes=0;
    for (    BlockProto b : blockId.resolve(s)) {
      nbytes+=b.getNumBytes();
      assertTrue(512L * (1L << 20) >= b.getNumBytes());
    }
    assertEquals(s.getLen(),nbytes);
  }
  FileStatus file(  long lenMB,  long blocksizeMB){
    Path p=new Path("foo://bar:4344/baz/dingo");
    return new FileStatus(lenMB * (1 << 20),false,1,blocksizeMB * (1 << 20),0L,0L,null,"hadoop","hadoop",p);
  }
}
