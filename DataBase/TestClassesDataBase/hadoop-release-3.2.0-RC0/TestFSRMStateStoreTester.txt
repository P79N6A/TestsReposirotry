class TestFSRMStateStoreTester implements RMStateStoreHelper {
  Path workingDirPathURI;
  TestFileSystemRMStore store;
  MiniDFSCluster cluster;
  boolean adminCheckEnable;
class TestFileSystemRMStore extends FileSystemRMStateStore {
    TestFileSystemRMStore(    Configuration conf) throws Exception {
      init(conf);
      Assert.assertNull(fs);
      assertTrue(workingDirPathURI.equals(fsWorkingPath));
      dispatcher.disableExitOnDispatchException();
      start();
      Assert.assertNotNull(fs);
    }
    public Path getVersionNode(){
      return new Path(new Path(workingDirPathURI,ROOT_DIR_NAME),VERSION_NODE);
    }
    public Version getCurrentVersion(){
      return CURRENT_VERSION_INFO;
    }
    public Path getAppDir(    String appId){
      Path rootDir=new Path(workingDirPathURI,ROOT_DIR_NAME);
      Path appRootDir=new Path(rootDir,RM_APP_ROOT);
      Path appDir=new Path(appRootDir,appId);
      return appDir;
    }
    public Path getAttemptDir(    String appId,    String attemptId){
      Path appDir=getAppDir(appId);
      Path attemptDir=new Path(appDir,attemptId);
      return attemptDir;
    }
  }
  public TestFSRMStateStoreTester(  MiniDFSCluster cluster,  boolean adminCheckEnable) throws Exception {
    Path workingDirPath=new Path("/yarn/Test");
    this.adminCheckEnable=adminCheckEnable;
    this.cluster=cluster;
    FileSystem fs=cluster.getFileSystem();
    fs.mkdirs(workingDirPath);
    Path clusterURI=new Path(cluster.getURI());
    workingDirPathURI=new Path(clusterURI,workingDirPath);
    fs.close();
  }
  @Override public RMStateStore getRMStateStore() throws Exception {
    YarnConfiguration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.FS_RM_STATE_STORE_URI,workingDirPathURI.toString());
    conf.setInt(YarnConfiguration.FS_RM_STATE_STORE_NUM_RETRIES,8);
    conf.setLong(YarnConfiguration.FS_RM_STATE_STORE_RETRY_INTERVAL_MS,900L);
    conf.setLong(YarnConfiguration.RM_EPOCH,epoch);
    conf.setLong(YarnConfiguration.RM_EPOCH_RANGE,getEpochRange());
    if (adminCheckEnable) {
      conf.setBoolean(YarnConfiguration.YARN_INTERMEDIATE_DATA_ENCRYPTION,true);
    }
    this.store=new TestFileSystemRMStore(conf);
    Assert.assertEquals(store.getNumRetries(),8);
    Assert.assertEquals(store.getRetryInterval(),900L);
    Assert.assertTrue(store.fs.getConf() == store.fsConf);
    FileSystem previousFs=store.fs;
    store.startInternal();
    Assert.assertTrue(store.fs != previousFs);
    Assert.assertTrue(store.fs.getConf() == store.fsConf);
    return store;
  }
  @Override public boolean isFinalStateValid() throws Exception {
    FileSystem fs=cluster.getFileSystem();
    FileStatus[] files=fs.listStatus(workingDirPathURI);
    return files.length == 1;
  }
  @Override public void writeVersion(  Version version) throws Exception {
    store.updateFile(store.getVersionNode(),((VersionPBImpl)version).getProto().toByteArray(),false);
  }
  @Override public Version getCurrentVersion() throws Exception {
    return store.getCurrentVersion();
  }
  public boolean appExists(  RMApp app) throws IOException {
    FileSystem fs=cluster.getFileSystem();
    Path nodePath=store.getAppDir(app.getApplicationId().toString());
    return fs.exists(nodePath);
  }
  public boolean attemptExists(  RMAppAttempt attempt) throws IOException {
    FileSystem fs=cluster.getFileSystem();
    ApplicationAttemptId attemptId=attempt.getAppAttemptId();
    Path nodePath=store.getAttemptDir(attemptId.getApplicationId().toString(),attemptId.toString());
    return fs.exists(nodePath);
  }
}
