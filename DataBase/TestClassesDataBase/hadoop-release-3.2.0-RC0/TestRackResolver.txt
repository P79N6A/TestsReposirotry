public class TestRackResolver {
  private static Log LOG=LogFactory.getLog(TestRackResolver.class);
  private static final String invalidHost="invalidHost";
public static final class MyResolver implements DNSToSwitchMapping {
    int numHost1=0;
    public static String resolvedHost1="host1";
    @Override public List<String> resolve(    List<String> hostList){
      Assert.assertTrue("hostList size is " + hostList.size(),hostList.size() <= 1);
      List<String> returnList=new ArrayList<String>();
      if (hostList.isEmpty()) {
        return returnList;
      }
      if (hostList.get(0).equals(invalidHost)) {
        return null;
      }
      LOG.info("Received resolve request for " + hostList.get(0));
      if (hostList.get(0).equals("host1") || hostList.get(0).equals(resolvedHost1)) {
        numHost1++;
        returnList.add("/rack1");
      }
      Assert.assertTrue(numHost1 <= 1);
      return returnList;
    }
    @Override public void reloadCachedMappings(){
    }
    @Override public void reloadCachedMappings(    List<String> names){
    }
  }
  @Test public void testCaching(){
    Configuration conf=new Configuration();
    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,MyResolver.class,DNSToSwitchMapping.class);
    RackResolver.init(conf);
    try {
      InetAddress iaddr=InetAddress.getByName("host1");
      MyResolver.resolvedHost1=iaddr.getHostAddress();
    }
 catch (    UnknownHostException e) {
    }
    Node node=RackResolver.resolve("host1");
    Assert.assertEquals("/rack1",node.getNetworkLocation());
    node=RackResolver.resolve("host1");
    Assert.assertEquals("/rack1",node.getNetworkLocation());
    node=RackResolver.resolve(invalidHost);
    Assert.assertEquals(NetworkTopology.DEFAULT_RACK,node.getNetworkLocation());
  }
}
