/** 
 * Test for  {@link NameCache} class
 */
public class TestNameCache {
  @Test public void testDictionary() throws Exception {
    NameCache<String> cache=new NameCache<String>(2);
    String[] matching={"part1","part10000000","fileabc","abc","filepart"};
    String[] notMatching={"spart1","apart","abcd","def"};
    for (    String s : matching) {
      cache.put(s);
      assertTrue(s == cache.put(s));
    }
    for (    String s : notMatching) {
      cache.put(s);
    }
    cache.initialized();
    for (    String s : matching) {
      verifyNameReuse(cache,s,true);
    }
    assertEquals(matching.length,cache.size());
    for (    String s : notMatching) {
      verifyNameReuse(cache,s,false);
    }
    cache.reset();
    cache.initialized();
    for (    String s : matching) {
      verifyNameReuse(cache,s,false);
    }
    for (    String s : notMatching) {
      verifyNameReuse(cache,s,false);
    }
  }
  private void verifyNameReuse(  NameCache<String> cache,  String s,  boolean reused){
    cache.put(s);
    int lookupCount=cache.getLookupCount();
    if (reused) {
      assertNotNull(cache.put(s));
      assertEquals(lookupCount + 1,cache.getLookupCount());
    }
 else {
      assertNull(cache.put(s));
      assertEquals(lookupCount,cache.getLookupCount());
    }
  }
}
