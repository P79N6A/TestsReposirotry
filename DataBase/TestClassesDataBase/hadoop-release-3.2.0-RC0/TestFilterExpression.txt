public class TestFilterExpression {
  private Expression expr;
  private FilterExpression test;
  @Rule public Timeout globalTimeout=new Timeout(10000);
  @Before public void setup(){
    expr=mock(Expression.class);
    test=new FilterExpression(expr){
    }
;
  }
  @Test public void expression() throws IOException {
    assertEquals(expr,test.expression);
  }
  @Test public void setOptions() throws IOException {
    FindOptions options=mock(FindOptions.class);
    test.setOptions(options);
    verify(expr).setOptions(options);
    verifyNoMoreInteractions(expr);
  }
  @Test public void apply() throws IOException {
    PathData item=mock(PathData.class);
    when(expr.apply(item,-1)).thenReturn(Result.PASS).thenReturn(Result.FAIL);
    assertEquals(Result.PASS,test.apply(item,-1));
    assertEquals(Result.FAIL,test.apply(item,-1));
    verify(expr,times(2)).apply(item,-1);
    verifyNoMoreInteractions(expr);
  }
  @Test public void finish() throws IOException {
    test.finish();
    verify(expr).finish();
    verifyNoMoreInteractions(expr);
  }
  @Test public void getUsage(){
    String[] usage=new String[]{"Usage 1","Usage 2","Usage 3"};
    when(expr.getUsage()).thenReturn(usage);
    assertArrayEquals(usage,test.getUsage());
    verify(expr).getUsage();
    verifyNoMoreInteractions(expr);
  }
  @Test public void getHelp(){
    String[] help=new String[]{"Help 1","Help 2","Help 3"};
    when(expr.getHelp()).thenReturn(help);
    assertArrayEquals(help,test.getHelp());
    verify(expr).getHelp();
    verifyNoMoreInteractions(expr);
  }
  @Test public void isAction(){
    when(expr.isAction()).thenReturn(true).thenReturn(false);
    assertTrue(test.isAction());
    assertFalse(test.isAction());
    verify(expr,times(2)).isAction();
    verifyNoMoreInteractions(expr);
  }
  @Test public void isOperator(){
    when(expr.isAction()).thenReturn(true).thenReturn(false);
    assertTrue(test.isAction());
    assertFalse(test.isAction());
    verify(expr,times(2)).isAction();
    verifyNoMoreInteractions(expr);
  }
  @Test public void getPrecedence(){
    int precedence=12345;
    when(expr.getPrecedence()).thenReturn(precedence);
    assertEquals(precedence,test.getPrecedence());
    verify(expr).getPrecedence();
    verifyNoMoreInteractions(expr);
  }
  @Test public void addChildren(){
    @SuppressWarnings("unchecked") Deque<Expression> expressions=mock(Deque.class);
    test.addChildren(expressions);
    verify(expr).addChildren(expressions);
    verifyNoMoreInteractions(expr);
  }
  @Test public void addArguments(){
    @SuppressWarnings("unchecked") Deque<String> args=mock(Deque.class);
    test.addArguments(args);
    verify(expr).addArguments(args);
    verifyNoMoreInteractions(expr);
  }
}
