public class TestProportionalCapacityPreemptionPolicyPreemptToBalance extends ProportionalCapacityPreemptionPolicyMockFramework {
  @Test public void testPreemptionToBalanceDisabled() throws IOException {
    String labelsConfig="=100,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100 100 100 100]);" + "-a(=[30 100 10 30]);" + "-b(=[30 100 40 30]);"+ "-c(=[30 100 50 30]);"+ "-d(=[10 100 0 0])";
    String appsConfig="a\t(1,1,n1,,10,false);" + "b\t(1,1,n1,,40,false);" + "c\t(1,1,n1,,50,false)";
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(5)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(15)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    assertEquals(30,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getMemorySize());
    assertEquals(35,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getMemorySize());
    assertEquals(35,policy.getQueuePartitions().get("c").get("").getIdealAssigned().getMemorySize());
  }
  @Test public void testPreemptionToBalanceEnabled() throws IOException {
    String labelsConfig="=100,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100 100 100 100]);" + "-a(=[30 100 10 30]);" + "-b(=[30 100 40 30]);"+ "-c(=[30 100 50 30]);"+ "-d(=[10 100 0 0])";
    String appsConfig="a\t(1,1,n1,,10,false);" + "b\t(1,1,n1,,40,false);" + "c\t(1,1,n1,,50,false)";
    boolean isPreemptionToBalanceEnabled=true;
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_TO_BALANCE_QUEUES_BEYOND_GUARANTEED,isPreemptionToBalanceEnabled);
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(7)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    verify(mDisp,times(17)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    assertEquals(33,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getMemorySize());
    assertEquals(33,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getMemorySize());
    assertEquals(33,policy.getQueuePartitions().get("c").get("").getIdealAssigned().getMemorySize());
  }
  @Test public void testPreemptionToBalanceUsedPlusPendingLessThanGuaranteed() throws IOException {
    String labelsConfig="=100,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100 100 100 100]);" + "-a(=[30 100 10 6]);" + "-b(=[30 100 40 30]);"+ "-c(=[30 100 50 30]);"+ "-d(=[10 100 0 0])";
    String appsConfig="a\t(1,1,n1,,10,false);" + "b\t(1,1,n1,,40,false);" + "c\t(1,1,n1,,50,false)";
    boolean isPreemptionToBalanceEnabled=true;
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_TO_BALANCE_QUEUES_BEYOND_GUARANTEED,isPreemptionToBalanceEnabled);
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
    policy.editSchedule();
    verify(mDisp,times(8)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
    assertEquals(16,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getMemorySize());
    assertEquals(42,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getMemorySize());
    assertEquals(42,policy.getQueuePartitions().get("c").get("").getIdealAssigned().getMemorySize());
  }
  @Test public void testPreemptionToBalanceWithVcoreResource() throws IOException {
    Logger.getRootLogger().setLevel(Level.DEBUG);
    String labelsConfig="=100:100,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100:100 100:100 100:100 120:140]);" + "-a(=[60:60 100:100 40:40 70:40]);" + "-b(=[40:40 100:100 60:60 50:100])";
    String appsConfig="a\t(1,1:1,n1,,40,false);" + "b\t(1,1:1,n1,,60,false)";
    boolean isPreemptionToBalanceEnabled=true;
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_TO_BALANCE_QUEUES_BEYOND_GUARANTEED,isPreemptionToBalanceEnabled);
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig,true);
    policy.editSchedule();
    verify(mDisp,times(21)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    assertEquals(60,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getMemorySize());
    assertEquals(60,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getVirtualCores());
    assertEquals(40,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getMemorySize());
    assertEquals(40,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getVirtualCores());
  }
  @Test public void testPreemptionToBalanceWithConfiguredTimeout() throws IOException {
    Logger.getRootLogger().setLevel(Level.DEBUG);
    String labelsConfig="=100:100,true";
    String nodesConfig="n1=";
    String queuesConfig="root(=[100:100 100:100 100:100 120:140]);" + "-a(=[60:60 100:100 40:40 70:40]);" + "-b(=[40:40 100:100 60:60 50:100])";
    String appsConfig="a\t(1,1:1,n1,,40,false);" + "b\t(1,1:1,n1,,60,false)";
    boolean isPreemptionToBalanceEnabled=true;
    conf.setBoolean(CapacitySchedulerConfiguration.PREEMPTION_TO_BALANCE_QUEUES_BEYOND_GUARANTEED,isPreemptionToBalanceEnabled);
    final long FB_MAX_BEFORE_KILL=60 * 1000;
    conf.setLong(CapacitySchedulerConfiguration.MAX_WAIT_BEFORE_KILL_FOR_QUEUE_BALANCE_PREEMPTION,FB_MAX_BEFORE_KILL);
    buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig,true);
    policy.editSchedule();
    Map<PreemptionCandidatesSelector,Map<ApplicationAttemptId,Set<RMContainer>>> pcps=policy.getToPreemptCandidatesPerSelector();
    String FIFO_CANDIDATE_SELECTOR="FifoCandidatesSelector";
    boolean hasFifoSelector=false;
    for (    Map.Entry<PreemptionCandidatesSelector,Map<ApplicationAttemptId,Set<RMContainer>>> pc : pcps.entrySet()) {
      if (pc.getKey().getClass().getSimpleName().equals(FIFO_CANDIDATE_SELECTOR)) {
        FifoCandidatesSelector pcs=(FifoCandidatesSelector)pc.getKey();
        if (pcs.getAllowQueuesBalanceAfterAllQueuesSatisfied() == true) {
          hasFifoSelector=true;
          assertEquals(pcs.getMaximumKillWaitTimeMs(),FB_MAX_BEFORE_KILL);
        }
      }
    }
    assertEquals(hasFifoSelector,true);
    verify(mDisp,times(21)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
    assertEquals(60,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getMemorySize());
    assertEquals(60,policy.getQueuePartitions().get("a").get("").getIdealAssigned().getVirtualCores());
    assertEquals(40,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getMemorySize());
    assertEquals(40,policy.getQueuePartitions().get("b").get("").getIdealAssigned().getVirtualCores());
  }
}
