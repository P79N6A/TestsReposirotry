/** 
 * Test that  {@link NameNodeUtils#getClientNamenodeAddress}  correctlycomputes the client address for WebHDFS redirects for different combinations of HA, federated and single NN setups.
 */
public class TestClientNameNodeAddress {
  public static final Logger LOG=LoggerFactory.getLogger(TestClientNameNodeAddress.class);
  @Rule public Timeout globalTimeout=new Timeout(300000);
  @Test public void testSimpleConfig(){
    final Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs://host1:100");
    assertThat(NameNodeUtils.getClientNamenodeAddress(conf,null),is("host1:100"));
  }
  @Test public void testSimpleWithoutPort(){
    final Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs://host1");
    assertNull(NameNodeUtils.getClientNamenodeAddress(conf,null));
  }
  @Test public void testWithNoDefaultFs(){
    final Configuration conf=new HdfsConfiguration();
    assertNull(NameNodeUtils.getClientNamenodeAddress(conf,null));
  }
  @Test public void testWithNoHost(){
    final Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs:///");
    assertNull(NameNodeUtils.getClientNamenodeAddress(conf,null));
  }
  @Test public void testFederationWithHa(){
    final Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs://ns1");
    conf.set(DFS_NAMESERVICES,"ns1,ns2");
    conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn1,nn2");
    conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns2","nn1,nn2");
    assertThat(NameNodeUtils.getClientNamenodeAddress(conf,"ns1"),is("ns1"));
    assertThat(NameNodeUtils.getClientNamenodeAddress(conf,"ns2"),is("ns2"));
  }
  @Test public void testFederationWithoutHa(){
    final Configuration conf=new HdfsConfiguration();
    conf.set(FS_DEFAULT_NAME_KEY,"hdfs://host1:100");
    conf.set(DFS_NAMESERVICES,"ns1,ns2");
    conf.set(DFS_NAMENODE_RPC_ADDRESS_KEY + ".ns1","host1:100");
    conf.set(DFS_NAMENODE_RPC_ADDRESS_KEY + ".ns2","host2:200");
    assertThat(NameNodeUtils.getClientNamenodeAddress(conf,"ns1"),is("host1:100"));
    assertThat(NameNodeUtils.getClientNamenodeAddress(conf,"ns2"),is("host2:200"));
  }
}
