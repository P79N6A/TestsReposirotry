/** 
 * The class representing a node in  {@link TestDirectoryTree}. <br> This contains: <ul> <li>Two children representing the two snapshottable directories</li> <li>A list of files for testing, so that we can check snapshots after file creation/deletion/modification.</li> <li>A list of non-snapshottable directories, to test snapshots with directory creation/deletion. Note that this is needed because the deletion of a snapshottale directory with snapshots is not allowed.</li> </ul>
 */
static class Node {
  /** 
 * The level of this node in the directory tree 
 */
  final int level;
  /** 
 * Children 
 */
  Node leftChild;
  Node rightChild;
  /** 
 * Parent node of the node 
 */
  final Node parent;
  /** 
 * File path of the node 
 */
  final Path nodePath;
  /** 
 * The file path list for testing snapshots before/after file creation/deletion/modification
 */
  ArrayList<Path> fileList;
  /** 
 * Each time for testing snapshots with file creation, since we do not want to insert new files into the fileList, we always create the file that was deleted last time. Thus we record the index for deleted file in the fileList, and roll the file modification forward in the list.
 */
  int nullFileIndex=0;
  /** 
 * A list of non-snapshottable directories for testing snapshots with directory creation/deletion
 */
  final ArrayList<Node> nonSnapshotChildren;
  Node(  Path path,  int level,  Node parent,  FileSystem fs) throws Exception {
    this.nodePath=path;
    this.level=level;
    this.parent=parent;
    this.nonSnapshotChildren=new ArrayList<Node>();
    fs.mkdirs(nodePath);
  }
  /** 
 * Create files and add them in the fileList. Initially the last element in the fileList is set to null (where we start file creation).
 */
  void initFileList(  FileSystem fs,  String namePrefix,  long fileLen,  short replication,  long seed,  int numFiles) throws Exception {
    fileList=new ArrayList<Path>(numFiles);
    for (int i=0; i < numFiles; i++) {
      Path file=new Path(nodePath,namePrefix + "-f" + i);
      fileList.add(file);
      if (i < numFiles - 1) {
        DFSTestUtil.createFile(fs,file,fileLen,replication,seed);
      }
    }
    nullFileIndex=numFiles - 1;
  }
  @Override public boolean equals(  Object o){
    if (o != null && o instanceof Node) {
      Node node=(Node)o;
      return node.nodePath.equals(nodePath);
    }
    return false;
  }
  @Override public int hashCode(){
    return nodePath.hashCode();
  }
}
