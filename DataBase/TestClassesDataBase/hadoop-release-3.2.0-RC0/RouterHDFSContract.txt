/** 
 * The contract of Router-based Federated HDFS.
 */
public class RouterHDFSContract extends HDFSContract {
  public static final int BLOCK_SIZE=AbstractFSContractTestBase.TEST_FILE_LEN;
  private static MiniRouterDFSCluster cluster;
  public RouterHDFSContract(  Configuration conf){
    super(conf);
  }
  public static void createCluster() throws IOException {
    try {
      cluster=new MiniRouterDFSCluster(true,2);
      cluster.startCluster();
      cluster.startRouters();
      cluster.registerNamenodes();
      cluster.waitNamenodeRegistration();
      cluster.installMockLocations();
      if (cluster.isHighAvailability()) {
        for (        String ns : cluster.getNameservices()) {
          cluster.switchToActive(ns,NAMENODES[0]);
          cluster.switchToStandby(ns,NAMENODES[1]);
        }
      }
      cluster.waitActiveNamespaces();
    }
 catch (    Exception e) {
      destroyCluster();
      throw new IOException("Cannot start federated cluster",e);
    }
  }
  public static void destroyCluster() throws IOException {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  public static MiniDFSCluster getCluster(){
    return cluster.getCluster();
  }
  public static FileSystem getFileSystem() throws IOException {
    Assert.assertNotNull("cluster not created",cluster);
    return cluster.getRandomRouter().getFileSystem();
  }
  @Override public FileSystem getTestFileSystem() throws IOException {
    return getFileSystem();
  }
}
