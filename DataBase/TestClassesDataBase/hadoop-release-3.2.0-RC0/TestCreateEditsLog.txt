/** 
 * Tests the CreateEditsLog utility.
 */
public class TestCreateEditsLog {
  private static final File HDFS_DIR=new File(MiniDFSCluster.getBaseDirectory()).getAbsoluteFile();
  private static final File TEST_DIR=GenericTestUtils.getTestDir("TestCreateEditsLog");
  private MiniDFSCluster cluster;
  @Before public void setUp() throws Exception {
    deleteIfExists(HDFS_DIR);
    deleteIfExists(TEST_DIR);
  }
  @After public void tearDown(){
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    deleteIfExists(HDFS_DIR);
    deleteIfExists(TEST_DIR);
  }
  /** 
 * Tests that an edits log created using CreateEditsLog is valid and can be loaded successfully by a namenode.
 */
  @Test(timeout=60000) public void testCanLoadCreatedEditsLog() throws Exception {
    HdfsConfiguration conf=new HdfsConfiguration();
    File nameDir=new File(HDFS_DIR,"name");
    conf.set(DFS_NAMENODE_NAME_DIR_KEY,Util.fileAsURI(nameDir).toString());
    DFSTestUtil.formatNameNode(conf);
    CreateEditsLog.main(new String[]{"-f","1000","0","1","-d",TEST_DIR.getAbsolutePath()});
    Path editsWildcard=new Path(TEST_DIR.getAbsolutePath(),"*");
    FileContext localFc=FileContext.getLocalFSFileContext();
    for (    FileStatus edits : localFc.util().globStatus(editsWildcard)) {
      Path src=edits.getPath();
      Path dst=new Path(new File(nameDir,"current").getAbsolutePath(),src.getName());
      localFc.rename(src,dst);
    }
    cluster=new MiniDFSCluster.Builder(conf).format(false).manageNameDfsDirs(false).waitSafeMode(false).build();
    cluster.waitClusterUp();
  }
  /** 
 * Fully delete the given directory if it exists.
 * @param file File to delete
 */
  private static void deleteIfExists(  File file){
    if (file.exists() && !FileUtil.fullyDelete(file)) {
      fail("Could not delete  '" + file + "'");
    }
  }
}
