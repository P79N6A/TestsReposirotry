/** 
 * This is a base class to ease the implementation of SLS-based tests.
 */
@RunWith(value=Parameterized.class) @NotThreadSafe @SuppressWarnings("VisibilityModifier") public abstract class BaseSLSRunnerTest {
  @Parameter(value=0) public String schedulerType;
  @Parameter(value=1) public String traceType;
  @Parameter(value=2) public String traceLocation;
  @Parameter(value=3) public String nodeFile;
  protected SLSRunner sls;
  protected String ongoingInvariantFile;
  protected String exitInvariantFile;
  @Before public abstract void setup();
  @After public void tearDown() throws InterruptedException {
    sls.stop();
  }
  public void runSLS(  Configuration conf,  long timeout) throws Exception {
    File tempDir=new File("target",UUID.randomUUID().toString());
    final List<Throwable> exceptionList=Collections.synchronizedList(new ArrayList<Throwable>());
    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        e.printStackTrace();
        exceptionList.add(e);
      }
    }
);
    File slsOutputDir=new File(tempDir.getAbsolutePath() + "/slsoutput/");
    String[] args;
switch (traceType) {
case "OLD_SLS":
      args=new String[]{"-inputsls",traceLocation,"-output",slsOutputDir.getAbsolutePath()};
    break;
case "OLD_RUMEN":
  args=new String[]{"-inputrumen",traceLocation,"-output",slsOutputDir.getAbsolutePath()};
break;
default :
args=new String[]{"-tracetype",traceType,"-tracelocation",traceLocation,"-output",slsOutputDir.getAbsolutePath()};
}
if (nodeFile != null) {
args=ArrayUtils.addAll(args,new String[]{"-nodes",nodeFile});
}
conf.set(YarnConfiguration.RM_SCHEDULER,schedulerType);
if (ongoingInvariantFile != null) {
conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,MetricsInvariantChecker.class.getCanonicalName());
conf.set(MetricsInvariantChecker.INVARIANTS_FILE,ongoingInvariantFile);
conf.setBoolean(MetricsInvariantChecker.THROW_ON_VIOLATION,true);
}
sls=new SLSRunner(conf);
sls.run(args);
while (timeout >= 0) {
Thread.sleep(1000);
if (!exceptionList.isEmpty()) {
sls.stop();
Assert.fail("TestSLSRunner catched exception from child thread " + "(TaskRunner.TaskDefinition): " + exceptionList);
break;
}
timeout--;
}
shutdownHookInvariantCheck();
}
/** 
 * Checks exit invariants (e.g., number of apps submitted, completed, etc.).
 */
private void shutdownHookInvariantCheck(){
if (exitInvariantFile != null) {
MetricsInvariantChecker ic=new MetricsInvariantChecker();
Configuration conf=new Configuration();
conf.set(MetricsInvariantChecker.INVARIANTS_FILE,exitInvariantFile);
conf.setBoolean(MetricsInvariantChecker.THROW_ON_VIOLATION,true);
ic.init(conf,null,null);
ic.editSchedule();
}
}
}
