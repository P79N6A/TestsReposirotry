public class TestTimelineClientForATS1_5 {
  protected static Log LOG=LogFactory.getLog(TestTimelineClientForATS1_5.class);
  private TimelineClientImpl client;
  private static FileContext localFS;
  private static File localActiveDir;
  private TimelineWriter spyTimelineWriter;
  private UserGroupInformation authUgi;
  @Before public void setup() throws Exception {
    localFS=FileContext.getLocalFSFileContext();
    localActiveDir=new File("target",this.getClass().getSimpleName() + "-activeDir").getAbsoluteFile();
    localFS.delete(new Path(localActiveDir.getAbsolutePath()),true);
    localActiveDir.mkdir();
    LOG.info("Created activeDir in " + localActiveDir.getAbsolutePath());
    authUgi=UserGroupInformation.getCurrentUser();
  }
  private YarnConfiguration getConfigurations(){
    YarnConfiguration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,1.5f);
    conf.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR,localActiveDir.getAbsolutePath());
    conf.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES,"summary_type");
    return conf;
  }
  @After public void tearDown() throws Exception {
    if (client != null) {
      client.stop();
    }
    localFS.delete(new Path(localActiveDir.getAbsolutePath()),true);
  }
  @Test public void testPostEntities() throws Exception {
    client=createTimelineClient(getConfigurations());
    verifyForPostEntities(false);
  }
  @Test public void testPostEntitiesToKeepUnderUserDir() throws Exception {
    YarnConfiguration conf=getConfigurations();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR,true);
    client=createTimelineClient(conf);
    verifyForPostEntities(true);
  }
  private void verifyForPostEntities(  boolean storeInsideUserDir){
    ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
    TimelineEntityGroupId groupId=TimelineEntityGroupId.newInstance(appId,"1");
    TimelineEntityGroupId groupId2=TimelineEntityGroupId.newInstance(appId,"2");
    TimelineEntity[] entities=new TimelineEntity[2];
    entities[0]=generateEntity("entity_type");
    entities[1]=generateEntity("summary_type");
    try {
      client.putEntities(null,null,entities);
      verify(spyTimelineWriter,times(1)).putEntities(entities);
      reset(spyTimelineWriter);
      ApplicationAttemptId attemptId1=ApplicationAttemptId.newInstance(appId,1);
      client.putEntities(attemptId1,null,entities);
      TimelineEntity[] entityTDB=new TimelineEntity[1];
      entityTDB[0]=entities[0];
      verify(spyTimelineWriter,times(1)).putEntities(entityTDB);
      Assert.assertTrue(localFS.util().exists(new Path(getAppAttemptDir(attemptId1,storeInsideUserDir),"summarylog-" + attemptId1.toString())));
      reset(spyTimelineWriter);
      ApplicationAttemptId attemptId2=ApplicationAttemptId.newInstance(appId,2);
      client.putEntities(attemptId2,groupId,entities);
      client.putEntities(attemptId2,groupId2,entities);
      verify(spyTimelineWriter,times(0)).putEntities(any(TimelineEntity[].class));
      Assert.assertTrue(localFS.util().exists(new Path(getAppAttemptDir(attemptId2,storeInsideUserDir),"summarylog-" + attemptId2.toString())));
      Assert.assertTrue(localFS.util().exists(new Path(getAppAttemptDir(attemptId2,storeInsideUserDir),"entitylog-" + groupId.toString())));
      Assert.assertTrue(localFS.util().exists(new Path(getAppAttemptDir(attemptId2,storeInsideUserDir),"entitylog-" + groupId2.toString())));
      reset(spyTimelineWriter);
    }
 catch (    Exception e) {
      Assert.fail("Exception is not expected. " + e);
    }
  }
  @Test public void testPutDomain(){
    client=createTimelineClient(getConfigurations());
    verifyForPutDomain(false);
  }
  @Test public void testPutDomainToKeepUnderUserDir(){
    YarnConfiguration conf=getConfigurations();
    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR,true);
    client=createTimelineClient(conf);
    verifyForPutDomain(true);
  }
  private void verifyForPutDomain(  boolean storeInsideUserDir){
    ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
    ApplicationAttemptId attemptId1=ApplicationAttemptId.newInstance(appId,1);
    try {
      TimelineDomain domain=generateDomain();
      client.putDomain(null,domain);
      verify(spyTimelineWriter,times(1)).putDomain(domain);
      reset(spyTimelineWriter);
      client.putDomain(attemptId1,domain);
      verify(spyTimelineWriter,times(0)).putDomain(domain);
      Assert.assertTrue(localFS.util().exists(new Path(getAppAttemptDir(attemptId1,storeInsideUserDir),"domainlog-" + attemptId1.toString())));
      reset(spyTimelineWriter);
    }
 catch (    Exception e) {
      Assert.fail("Exception is not expected." + e);
    }
  }
  private Path getAppAttemptDir(  ApplicationAttemptId appAttemptId,  boolean storeInsideUserDir){
    Path userDir=getUserDir(appAttemptId,storeInsideUserDir);
    Path appDir=new Path(userDir,appAttemptId.getApplicationId().toString());
    Path attemptDir=new Path(appDir,appAttemptId.toString());
    return attemptDir;
  }
  private Path getUserDir(  ApplicationAttemptId appAttemptId,  boolean storeInsideUserDir){
    if (!storeInsideUserDir) {
      return new Path(localActiveDir.getAbsolutePath());
    }
    Path userDir=new Path(localActiveDir.getAbsolutePath(),authUgi.getShortUserName());
    return userDir;
  }
  private static TimelineEntity generateEntity(  String type){
    TimelineEntity entity=new TimelineEntity();
    entity.setEntityId("entity id");
    entity.setEntityType(type);
    entity.setStartTime(System.currentTimeMillis());
    return entity;
  }
  private static TimelineDomain generateDomain(){
    TimelineDomain domain=new TimelineDomain();
    domain.setId("namesapce id");
    domain.setDescription("domain description");
    domain.setOwner("domain owner");
    domain.setReaders("domain_reader");
    domain.setWriters("domain_writer");
    domain.setCreatedTime(0L);
    domain.setModifiedTime(1L);
    return domain;
  }
  private TimelineClientImpl createTimelineClient(  YarnConfiguration conf){
    TimelineClientImpl client=new TimelineClientImpl(){
      @Override protected TimelineWriter createTimelineWriter(      Configuration conf,      UserGroupInformation authUgi,      Client client,      URI resURI) throws IOException {
        TimelineWriter timelineWriter=new FileSystemTimelineWriter(conf,authUgi,client,resURI){
          public ClientResponse doPostingObject(          Object object,          String path){
            ClientResponse response=mock(ClientResponse.class);
            when(response.getStatusInfo()).thenReturn(ClientResponse.Status.OK);
            return response;
          }
        }
;
        spyTimelineWriter=spy(timelineWriter);
        return spyTimelineWriter;
      }
    }
;
    client.init(conf);
    client.start();
    return client;
  }
}
