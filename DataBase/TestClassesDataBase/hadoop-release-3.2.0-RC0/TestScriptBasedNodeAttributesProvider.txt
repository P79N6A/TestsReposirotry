/** 
 * Test cases for script based node attributes provider.
 */
public class TestScriptBasedNodeAttributesProvider {
  private static File testRootDir=new File("target",TestScriptBasedNodeAttributesProvider.class.getName() + "-localDir").getAbsoluteFile();
  private final File nodeAttributeScript=new File(testRootDir,Shell.appendScriptExtension("attributeScript"));
  private ScriptBasedNodeAttributesProvider nodeAttributesProvider;
  @Before public void setup(){
    testRootDir.mkdirs();
    nodeAttributesProvider=new ScriptBasedNodeAttributesProvider();
  }
  @After public void tearDown() throws Exception {
    if (testRootDir.exists()) {
      FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()),true);
    }
    if (nodeAttributesProvider != null) {
      nodeAttributesProvider.stop();
    }
  }
  private Configuration getConfForNodeAttributeScript(){
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH,nodeAttributeScript.getAbsolutePath());
    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS,1000);
    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS,1000);
    return conf;
  }
  private void writeNodeAttributeScriptFile(  String scriptStr,  boolean setExecutable) throws IOException {
    PrintWriter pw=null;
    try {
      FileUtil.setWritable(nodeAttributeScript,true);
      FileUtil.setReadable(nodeAttributeScript,true);
      pw=new PrintWriter(new FileOutputStream(nodeAttributeScript));
      pw.println(scriptStr);
      pw.flush();
    }
 catch (    Exception e) {
      e.printStackTrace();
      Assert.fail();
    }
 finally {
      if (null != pw) {
        pw.close();
      }
    }
    FileUtil.setExecutable(nodeAttributeScript,setExecutable);
  }
  @Test public void testNodeAttributeScriptProvider() throws IOException, InterruptedException {
    String simpleScript="echo NODE_ATTRIBUTE:host,STRING,host1234\n " + "echo NODE_ATTRIBUTE:os,STRING,redhat_6_3\n " + "echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1";
    writeNodeAttributeScriptFile(simpleScript,true);
    nodeAttributesProvider.init(getConfForNodeAttributeScript());
    nodeAttributesProvider.start();
    try {
      GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 3,500,3000);
    }
 catch (    TimeoutException e) {
      Assert.fail("Expecting node attributes size is 3, but got " + nodeAttributesProvider.getDescriptors().size());
    }
    Iterator<NodeAttribute> it=nodeAttributesProvider.getDescriptors().iterator();
    while (it.hasNext()) {
      NodeAttribute att=it.next();
switch (att.getAttributeKey().getAttributeName()) {
case "host":
        Assert.assertEquals(NodeAttributeType.STRING,att.getAttributeType());
      Assert.assertEquals("host1234",att.getAttributeValue());
    break;
case "os":
  Assert.assertEquals(NodeAttributeType.STRING,att.getAttributeType());
Assert.assertEquals("redhat_6_3",att.getAttributeValue());
break;
case "ip":
Assert.assertEquals(NodeAttributeType.STRING,att.getAttributeType());
Assert.assertEquals("10.0.0.1",att.getAttributeValue());
break;
default :
Assert.fail("Unexpected attribute name " + att.getAttributeKey().getAttributeName());
break;
}
}
}
@Test public void testInvalidScriptOutput() throws IOException, InterruptedException {
String scriptContent="echo host,STRING,host1234";
writeNodeAttributeScriptFile(scriptContent,true);
nodeAttributesProvider.init(getConfForNodeAttributeScript());
nodeAttributesProvider.start();
try {
GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 1,500,3000);
Assert.fail("This test should timeout because the provide is unable" + " to parse any attributes from the script output.");
}
 catch (TimeoutException e) {
Assert.assertEquals(0,nodeAttributesProvider.getDescriptors().size());
}
}
@Test public void testMalformedScriptOutput() throws Exception {
String scriptContent="echo NODE_ATTRIBUTE:host,STRING,host1234,a_extra_column";
writeNodeAttributeScriptFile(scriptContent,true);
nodeAttributesProvider.init(getConfForNodeAttributeScript());
nodeAttributesProvider.start();
try {
GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 1,500,3000);
Assert.fail("This test should timeout because the provide is unable" + " to parse any attributes from the script output.");
}
 catch (TimeoutException e) {
Assert.assertEquals(0,nodeAttributesProvider.getDescriptors().size());
}
}
@Test public void testFetchInterval() throws Exception {
String simpleScript="echo NODE_ATTRIBUTE:pid,STRING,$$";
writeNodeAttributeScriptFile(simpleScript,true);
nodeAttributesProvider.init(getConfForNodeAttributeScript());
nodeAttributesProvider.start();
Set<String> resultSet=new HashSet<>();
GenericTestUtils.waitFor(() -> {
Set<NodeAttribute> attributes=nodeAttributesProvider.getDescriptors();
if (attributes != null) {
Assert.assertEquals(1,attributes.size());
resultSet.add(attributes.iterator().next().getAttributeValue());
return resultSet.size() > 1;
}
 else {
return false;
}
}
,500,3000);
}
@Test public void testNodeAttributesValidation() throws Exception {
String scriptContent="echo NODE_ATTRIBUTE:host,STRING,host1234\n " + "echo NODE_ATTRIBUTE:host,STRING,host2345\n " + "echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1";
writeNodeAttributeScriptFile(scriptContent,true);
nodeAttributesProvider.init(getConfForNodeAttributeScript());
nodeAttributesProvider.start();
try {
GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 3,500,3000);
Assert.fail("This test should timeout because the provide is unable" + " to parse any attributes from the script output.");
}
 catch (TimeoutException e) {
Assert.assertEquals(0,nodeAttributesProvider.getDescriptors().size());
}
}
}
