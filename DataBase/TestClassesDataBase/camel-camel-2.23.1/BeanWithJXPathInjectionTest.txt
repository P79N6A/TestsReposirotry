/** 
 * @version 
 */
public class BeanWithJXPathInjectionTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BeanWithJXPathInjectionTest.class);
  @Test public void testSendMessage() throws Exception {
    template.sendBody("direct:in",new PersonBean("James","London"));
    MyBean myBean=context.getRegistry().lookupByNameAndType("myBean",MyBean.class);
    assertEquals("bean foo: " + myBean,"James",myBean.getName());
    assertNotNull("Should pass body as well",myBean.getBody());
  }
  @Test public void testSendNullMessage() throws Exception {
    template.sendBody("direct:in",new PersonBean(null,"London"));
    MyBean myBean=context.getRegistry().lookupByNameAndType("myBean",MyBean.class);
    assertEquals("bean foo: " + myBean,null,myBean.getName());
    assertNotNull("Should pass body as well",myBean.getBody());
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",new MyBean());
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:in").bean("myBean");
      }
    }
;
  }
public static final class MyBean {
    private PersonBean body;
    private String name;
    @Override public String toString(){
      return "MyBean[foo: " + name + " body: "+ body+ "]";
    }
    public void read(    PersonBean body,    @JXPath("in/body/name") String name){
      this.body=body;
      this.name=name;
      LOG.info("read() method called on " + this);
    }
    public PersonBean getBody(){
      return body;
    }
    public String getName(){
      return name;
    }
  }
}
