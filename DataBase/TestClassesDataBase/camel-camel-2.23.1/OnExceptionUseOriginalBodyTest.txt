/** 
 * Unit test for useOriginalBody option on DeadLetterChannel
 * @version 
 */
public class OnExceptionUseOriginalBodyTest extends ContextTestSupport {
  @Test public void testUseOriginalBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:a");
    dead.expectedBodiesReceived("Hello");
    template.sendBody("direct:a","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDoNotUseOriginalBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:dead");
    dead.expectedBodiesReceived("Hello World");
    template.sendBody("direct:b","Hello");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).redeliveryDelay(0));
        onException(IllegalArgumentException.class).maximumRedeliveries(2).useOriginalMessage().handled(true).to("mock:a");
        from("direct:a").setBody(body().append(" World")).process(new MyThrowProcessor(false));
        from("direct:b").setBody(body().append(" World")).process(new MyThrowProcessor(true));
      }
    }
;
  }
public static class MyThrowProcessor implements Processor {
    private boolean camelException;
    public MyThrowProcessor(){
    }
    public MyThrowProcessor(    boolean camelException){
      this.camelException=camelException;
    }
    public void process(    Exchange exchange) throws Exception {
      assertEquals("Hello World",exchange.getIn().getBody(String.class));
      if (camelException) {
        throw new CamelExchangeException("I cannot do it",exchange);
      }
 else {
        throw new IllegalArgumentException("Forced");
      }
    }
    public boolean isCamelException(){
      return camelException;
    }
    public void setCamelException(    boolean camelException){
      this.camelException=camelException;
    }
  }
}
