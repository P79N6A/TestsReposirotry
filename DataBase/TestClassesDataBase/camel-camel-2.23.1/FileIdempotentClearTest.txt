/** 
 * @version 
 */
public class FileIdempotentClearTest extends ContextTestSupport {
  private File store=new File("target/idempotentfilestore.dat");
  private IdempotentRepository<String> repo;
  @Override @Before public void setUp() throws Exception {
    if (store.exists()) {
      store.delete();
    }
    repo=FileIdempotentRepository.fileIdempotentRepository(store);
    super.setUp();
  }
  @Test public void testClear() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Foo","Bar");
    template.sendBodyAndHeader("direct:start","Foo","messageId","A");
    template.sendBodyAndHeader("direct:start","Camel rocks","messageId","A");
    template.sendBodyAndHeader("direct:start","Bar","messageId","B");
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("Camel rocks");
    repo.clear();
    assertFalse(repo.contains("A"));
    assertFalse(repo.contains("B"));
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").idempotentConsumer(header("messageId"),repo).to("mock:result");
      }
    }
;
  }
}
