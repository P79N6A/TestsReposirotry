public class SshShellOutputStringHelperTest extends Assert {
  @Test public void testBeforeLast(){
    assertEquals("Hello ",SshShellOutputStringHelper.beforeLast("Hello World","World"));
    assertEquals("Hello World ",SshShellOutputStringHelper.beforeLast("Hello World World","World"));
    assertEquals("Hello ",SshShellOutputStringHelper.beforeLast("Hello World Again","World"));
    assertEquals(null,SshShellOutputStringHelper.beforeLast("Hello Again","Foo"));
    assertTrue(SshShellOutputStringHelper.beforeLast("mykey:ignore:hello",":","mykey:ignore"::equals).orElse(false));
    assertFalse(SshShellOutputStringHelper.beforeLast("ignore:ignore:world",":","mykey"::equals).orElse(false));
  }
  @Test public void testBetweenBeforeLast(){
    assertEquals("foo bar' how are",SshShellOutputStringHelper.betweenBeforeLast("Hello 'foo bar' how are' you","'","'"));
    assertEquals("foo bar",SshShellOutputStringHelper.betweenBeforeLast("Hello ${foo bar} how are you","${","}"));
    assertEquals(null,SshShellOutputStringHelper.betweenBeforeLast("Hello ${foo bar} how are you","'","'"));
    assertTrue(SshShellOutputStringHelper.betweenBeforeLast("begin:mykey:end:end","begin:",":end","mykey:end"::equals).orElse(false));
    assertFalse(SshShellOutputStringHelper.betweenBeforeLast("begin:ignore:end:end","begin:",":end","mykey"::equals).orElse(false));
  }
}
