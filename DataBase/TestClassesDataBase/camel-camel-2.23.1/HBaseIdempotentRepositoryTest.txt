public class HBaseIdempotentRepositoryTest extends CamelHBaseTestSupport {
  IdempotentRepository<Object> repository;
  private String key01="123";
  private String key02="456";
  @Before public void setUp() throws Exception {
    if (systemReady) {
      try {
        hbaseUtil.createTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE),HBaseHelper.getHBaseFieldAsBytes(INFO_FAMILY));
      }
 catch (      TableExistsException ex) {
      }
      this.repository=new HBaseIdempotentRepository(hbaseUtil.getConfiguration(),PERSON_TABLE,INFO_FAMILY,"mycolumn");
      super.setUp();
    }
  }
  @After public void tearDown() throws Exception {
    if (systemReady) {
      hbaseUtil.deleteTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE));
      super.setUp();
    }
  }
  @Test public void testAdd() throws Exception {
    if (systemReady) {
      assertTrue(repository.add(key01));
      assertTrue(repository.contains(key01));
      assertTrue(repository.add(key02));
      assertTrue(repository.contains(key02));
      assertFalse(repository.add(key01));
    }
  }
  @Test public void testContains() throws Exception {
    if (systemReady) {
      assertFalse(repository.contains(key01));
      assertTrue(repository.add(key01));
      assertTrue(repository.contains(key01));
    }
  }
  @Test public void testRemove() throws Exception {
    if (systemReady) {
      assertTrue(repository.add(key01));
      assertTrue(repository.contains(key01));
      assertTrue(repository.remove(key01));
      assertFalse(repository.remove(key02));
    }
  }
  @Test public void testClear() throws Exception {
    if (systemReady) {
      assertTrue(repository.add(key01));
      assertTrue(repository.add(key02));
      assertTrue(repository.contains(key01));
      assertTrue(repository.contains(key02));
      repository.clear();
      assertFalse(repository.contains(key01));
      assertFalse(repository.contains(key02));
    }
  }
  @Test public void testConfirm() throws Exception {
    if (systemReady) {
      assertTrue(repository.confirm(key01));
    }
  }
  @Test public void testRepositoryInRoute() throws Exception {
    if (systemReady) {
      MockEndpoint mock=(MockEndpoint)context.getEndpoint("mock:out");
      mock.expectedBodiesReceived("a","b");
      template.sendBodyAndHeader("direct:in","a","messageId",key01);
      template.sendBodyAndHeader("direct:in","b","messageId",key02);
      template.sendBodyAndHeader("direct:in","c","messageId",key01);
      assertMockEndpointsSatisfied();
    }
  }
  @Override public CamelContext createCamelContext() throws Exception {
    return new DefaultCamelContext(createRegistry());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").idempotentConsumer(header("messageId"),repository).to("mock:out");
      }
    }
;
  }
}
