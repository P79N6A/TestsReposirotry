private static class InMemoryServiceRegistry extends AbstractServiceRegistry {
  private final ConcurrentMap<String,ServiceDefinition> definitions;
  public InMemoryServiceRegistry(){
    super(UUID.randomUUID().toString());
    this.definitions=new ConcurrentHashMap<>();
  }
  @Override public void register(  ServiceDefinition definition){
    Objects.requireNonNull(definition.getId(),"ServiceDefinition ID");
    Objects.requireNonNull(definition.getName(),"ServiceDefinition Name");
    definitions.put(definition.getId(),definition);
  }
  @Override public void deregister(  ServiceDefinition definition){
    Objects.requireNonNull(definition.getId(),"ServiceDefinition ID");
    Objects.requireNonNull(definition.getName(),"ServiceDefinition Name");
    definitions.remove(definition.getId());
  }
  @Override protected void doStart() throws Exception {
  }
  @Override protected void doStop() throws Exception {
    definitions.clear();
  }
  Map<String,ServiceDefinition> getDefinitions(){
    return Collections.unmodifiableMap(definitions);
  }
}
