public class DisruptorWaitForTaskCompleteOnCompletionTest extends CamelTestSupport {
  private static String done="";
  @Test public void testAlways() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Forced",e.getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
    assertEquals("CCCCA",done);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:start").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            exchange.addOnCompletion(new SynchronizationAdapter(){
              @Override public void onDone(              final Exchange exchange){
                done+="A";
              }
            }
);
          }
        }
).to("disruptor:foo?waitForTaskToComplete=Always").process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            done+="B";
          }
        }
).to("mock:result");
        from("disruptor:foo").errorHandler(noErrorHandler()).process(new Processor(){
          @Override public void process(          final Exchange exchange) throws Exception {
            done=done + "C";
          }
        }
).throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
