/** 
 * Unit test for idempotent repository.
 */
public class MailIdempotentRepositoryTest extends CamelTestSupport {
  private MemoryIdempotentRepository myRepo=new MemoryIdempotentRepository();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRepo",myRepo);
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    prepareMailbox();
    super.setUp();
  }
  @Test public void testIdempotent() throws Exception {
    assertEquals(0,myRepo.getCacheSize());
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(5);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    Thread.sleep(500);
    assertEquals(0,Mailbox.get("jones@localhost").getNewMessageCount());
    assertEquals(0,myRepo.getCacheSize());
  }
  private void prepareMailbox() throws Exception {
    Mailbox.clearAll();
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("pop3");
    store.connect("localhost",25,"jones","secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    Message[] messages=new Message[5];
    for (int i=0; i < 5; i++) {
      messages[i]=new MimeMessage(sender.getSession());
      messages[i].setText("Message " + i);
      messages[i].setHeader("Message-ID","myuid-" + i);
    }
    folder.appendMessages(messages);
    folder.close(true);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("imap://jones@localhost?password=secret&idempotentRepository=#myRepo&consumer.initialDelay=100&consumer.delay=100").routeId("foo").noAutoStartup().to("mock:result");
      }
    }
;
  }
}
