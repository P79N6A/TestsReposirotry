public class HystrixManagementTest extends CamelTestSupport {
  private HystrixEventStreamService stream=new HystrixEventStreamService();
  @Override protected boolean useJmx(){
    return true;
  }
  protected MBeanServer getMBeanServer(){
    return context.getManagementStrategy().getManagementAgent().getMBeanServer();
  }
  @Test public void testHystrix() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    MBeanServer mbeanServer=getMBeanServer();
    String name=context.getManagementName();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=" + name + ",type=processors,name=\"myHystrix\"");
    String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
    assertEquals("start",routeId);
    String commandKey=(String)mbeanServer.getAttribute(on,"HystrixCommandKey");
    assertEquals("myHystrix",commandKey);
    String groupKey=(String)mbeanServer.getAttribute(on,"HystrixGroupKey");
    assertEquals("CamelHystrix",groupKey);
    Thread.sleep(1000);
    Long totalRequests=(Long)mbeanServer.getAttribute(on,"HystrixTotalRequests");
    assertEquals(1,totalRequests.longValue());
    Long errorCount=(Long)mbeanServer.getAttribute(on,"HystrixErrorCount");
    assertEquals(0,errorCount.longValue());
    Boolean open=(Boolean)mbeanServer.getAttribute(on,"CircuitBreakerOpen");
    assertEquals(false,open.booleanValue());
    Thread.sleep(1000);
    String latest=stream.oldestMetricsAsJSon();
    log.info("Oldest json stream: {}",latest);
    Stream<String> jsons=stream.streamMetrics();
    jsons.forEach(s -> {
      log.info("JSon: {}",s);
    }
);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        stream.setQueueSize(10);
        stream.setDelay(100);
        context.addService(stream);
        from("direct:start").routeId("start").hystrix().id("myHystrix").to("direct:foo").onFallback().transform().constant("Fallback message").end().to("mock:result");
        from("direct:foo").transform().constant("Bye World");
      }
    }
;
  }
}
