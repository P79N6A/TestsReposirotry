@RunWith(Arquillian.class) public class NamedCamelContextTest {
  @Named @Produces @ApplicationScoped private CamelContext emptyNamedFieldContext=new DefaultCamelContext();
  @Produces @ApplicationScoped @Named("named-field-context") private CamelContext namedFieldContext=new DefaultCamelContext();
  @Named @Produces @ApplicationScoped private CamelContext getEmptyNamedGetterContext(){
    return new DefaultCamelContext();
  }
  @Named @Produces @ApplicationScoped private CamelContext getEmptyNamedMethodContext(){
    return new DefaultCamelContext();
  }
  @Produces @ApplicationScoped @Named("named-getter-context") private CamelContext getNamedGetterContext(){
    return new DefaultCamelContext();
  }
  @Produces @ApplicationScoped @Named("named-method-context") private CamelContext getNamedMethodContext(){
    return new DefaultCamelContext();
  }
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test public void verifyCamelContexts(  Instance<CamelContext> contexts){
    assertThat(contexts,containsInAnyOrder(hasProperty("name",equalTo("emptyNamedFieldContext")),hasProperty("name",equalTo("emptyNamedGetterContext")),hasProperty("name",equalTo("emptyNamedMethodContext")),hasProperty("name",equalTo("named-field-context")),hasProperty("name",equalTo("named-getter-context")),hasProperty("name",equalTo("named-method-context")),hasProperty("name",equalTo("emptyNamedBeanContext")),hasProperty("name",equalTo("named-bean-context"))));
  }
@Named @ApplicationScoped static class EmptyNamedBeanContext extends DefaultCamelContext {
  }
@ApplicationScoped @Named("named-bean-context") static class NamedBeanContext extends DefaultCamelContext {
  }
}
