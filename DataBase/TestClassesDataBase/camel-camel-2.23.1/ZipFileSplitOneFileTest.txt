public class ZipFileSplitOneFileTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/zip-unmarshal");
    super.setUp();
  }
  @Test public void testZipFileUnmarshal() throws Exception {
    getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.FILE_NAME_ONLY,"test.zip");
    getMockEndpoint("mock:end").expectedBodiesReceived("Hello World");
    createZipFile("Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        ZipFileDataFormat zf=new ZipFileDataFormat();
        zf.setUsingIterator(true);
        from("file://target/zip-unmarshal?noop=true&include=.*zip").to("mock:input").unmarshal(zf).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end();
      }
    }
;
  }
  private void createZipFile(  String content) throws IOException {
    String basePath="target" + File.separator + "zip-unmarshal"+ File.separator;
    File file=new File(basePath + "test.txt");
    file.getParentFile().mkdirs();
    try (FileWriter fw=new FileWriter(file);FileOutputStream fos=new FileOutputStream(basePath + "test.zip");ZipOutputStream zos=new ZipOutputStream(fos);FileInputStream fis=new FileInputStream(basePath + "test.txt")){
      fw.write(content);
      fw.close();
      ZipEntry entry=new ZipEntry("test.txt");
      zos.putNextEntry(entry);
      int len;
      byte[] buffer=new byte[1024];
      while ((len=fis.read(buffer)) > 0) {
        zos.write(buffer,0,len);
      }
      zos.closeEntry();
    }
   }
}
