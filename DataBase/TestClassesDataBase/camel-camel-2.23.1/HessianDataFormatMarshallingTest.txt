/** 
 * Test for  {@link HessianDataFormat}.
 */
public class HessianDataFormatMarshallingTest extends CamelTestSupport {
  @Test public void testMarshalAndUnmarshalNull() throws Exception {
    testMarshalAndUnmarshal(null);
  }
  @Test public void testMarshalAndUnmarshalBoolean() throws Exception {
    testMarshalAndUnmarshal(Boolean.TRUE);
  }
  @Test public void testMarshalAndUnmarshalString() throws Exception {
    testMarshalAndUnmarshal("This is a string");
  }
  @Test public void testMarshalAndUnmarshalInteger() throws Exception {
    testMarshalAndUnmarshal(42);
  }
  @Test public void testMarshalAndUnmarshalLong() throws Exception {
    testMarshalAndUnmarshal(100_000_000_000_000L);
  }
  @Test public void testMarshalAndUnmarshalDouble() throws Exception {
    testMarshalAndUnmarshal(6.022e23);
  }
  @Test public void testMarshalAndUnmarshalDate() throws Exception {
    testMarshalAndUnmarshal(new Date());
  }
  @Test public void testMarshalAndUnmarshalArray() throws Exception {
    testMarshalAndUnmarshal(new String[]{"one","two","three"});
  }
  @Test public void testMarshalAndUnmarshalList() throws Exception {
    testMarshalAndUnmarshal(Arrays.asList("one","two","three"));
  }
  @Test public void testMarshalAndUnmarshalMap() throws Exception {
    final Map<Integer,String> map=new HashMap<>();
    map.put(1,"one");
    map.put(2,"two");
    map.put(3,"three");
    testMarshalAndUnmarshal(map);
  }
  @Test public void testMarshalAndUnmarshalObject() throws Exception {
    final TestObject object=new TestObject();
    object.setBool(true);
    object.setIntNumber(42);
    object.setFloatNumber(3.14159f);
    object.setCharacter('Z');
    object.setText("random text");
    testMarshalAndUnmarshal(object);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        final HessianDataFormat format=new HessianDataFormat();
        from("direct:in").marshal(format);
        from("direct:back").unmarshal(format).to("mock:reverse");
      }
    }
;
  }
  private void testMarshalAndUnmarshal(  final Object object) throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    if (object == null) {
      mock.message(0).body().isNull();
    }
 else {
      mock.message(0).body().isNotNull();
      mock.message(0).body().isEqualTo(object);
    }
    final Object marshalled=template.requestBody("direct:in",object);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
}
