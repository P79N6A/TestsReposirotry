/** 
 * @version 
 */
public class RemoveEventNotifierTest extends ContextTestSupport {
  private static List<EventObject> events=new ArrayList<>();
  private EventNotifier notifier;
  @Override @Before public void setUp() throws Exception {
    events.clear();
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext(createRegistry());
    notifier=new EventNotifierSupport(){
      public void notify(      EventObject event) throws Exception {
        events.add(event);
      }
      public boolean isEnabled(      EventObject event){
        return true;
      }
      @Override protected void doStart() throws Exception {
      }
      @Override protected void doStop() throws Exception {
      }
    }
;
    context.getManagementStrategy().addEventNotifier(notifier);
    return context;
  }
  @Test public void testRemove() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(12,events.size());
    context.getManagementStrategy().removeEventNotifier(notifier);
    resetMocks();
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Bye World");
    assertMockEndpointsSatisfied();
    assertEquals(12,events.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
      }
    }
;
  }
}
