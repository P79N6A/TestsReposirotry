/** 
 */
public class SplitSubUnitOfWorkTest extends ContextTestSupport {
  private static int counter;
  @Test public void testOK() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:a").expectedBodiesReceived("Tiger,Camel");
    getMockEndpoint("mock:b").expectedBodiesReceived("Tiger","Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Tiger,Camel");
    getMockEndpoint("mock:line").expectedBodiesReceived("Tiger","Camel");
    template.sendBody("direct:start","Tiger,Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testError() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedBodiesReceived("Tiger,Donkey,Camel");
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedBodiesReceived("Tiger","Donkey","Camel");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:line").expectedBodiesReceived("Tiger","Camel");
    template.sendBody("direct:start","Tiger,Donkey,Camel");
    assertMockEndpointsSatisfied();
    assertEquals(4,counter);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:start").to("mock:a").split(body().tokenize(",")).shareUnitOfWork().to("mock:b").to("direct:line").end().to("mock:result");
        from("direct:line").to("log:line").process(new MyProcessor()).to("mock:line");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if (body.contains("Donkey")) {
        counter++;
        throw new IllegalArgumentException("Donkey not allowed");
      }
    }
  }
}
