public class IsUseAdviceWithJUnit4Test extends CamelTestSupport {
  private String providerEndPointURI="http4://fakeeeeWebsite.com:80";
  private String timerEndPointURI="timer://myTimer";
  private String mockEndPointURI="mock:myMock";
  private String directEndPointURI="direct:myDirect";
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(timerEndPointURI).to(providerEndPointURI).to(mockEndPointURI);
      }
    }
;
  }
  @Test public void testIsUseAdviceWith() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      public void configure() throws Exception {
        replaceFromWith(directEndPointURI);
        interceptSendToEndpoint(providerEndPointURI).to("mock:intercepted").skipSendToOriginalEndpoint();
      }
    }
);
    context.start();
    getMockEndpoint(mockEndPointURI).expectedBodiesReceived("a trigger");
    getMockEndpoint("mock:intercepted").expectedBodiesReceived("a trigger");
    template.sendBody(directEndPointURI,"a trigger");
    assertMockEndpointsSatisfied();
    assertNotNull(context.hasEndpoint(directEndPointURI));
    assertNotNull(context.hasEndpoint(mockEndPointURI));
  }
  @Override public boolean isUseAdviceWith(){
    return true;
  }
  @Override public boolean isUseRouteBuilder(){
    return true;
  }
}
