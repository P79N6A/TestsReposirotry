public class BeanInjectRouteBuilderTest extends ContextTestSupport {
  @BeanInject private FooBar foo;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new FooBar());
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    DefaultCamelBeanPostProcessor post=new DefaultCamelBeanPostProcessor(context);
    post.postProcessBeforeInitialization(this,"MyRoute");
    post.postProcessAfterInitialization(this,"MyRoute");
    return context;
  }
  @Test public void testBeanInject() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String out=foo.hello(exchange.getIn().getBody(String.class));
            exchange.getIn().setBody(out);
          }
        }
).to("mock:result");
      }
    }
;
  }
}
