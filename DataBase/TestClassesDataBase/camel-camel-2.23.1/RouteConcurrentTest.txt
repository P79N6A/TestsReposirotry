public class RouteConcurrentTest extends CamelOpenTracingTestSupport {
  private static SpanTestData[] testdata={new SpanTestData().setLabel("seda:foo client").setUri("seda://foo").setOperation("foo").setKind(Tags.SPAN_KIND_CLIENT),new SpanTestData().setLabel("seda:bar client").setUri("seda://bar").setOperation("bar").setKind(Tags.SPAN_KIND_CLIENT).setParentId(2),new SpanTestData().setLabel("seda:foo server").setUri("seda://foo?concurrentConsumers=5").setOperation("foo").setKind(Tags.SPAN_KIND_SERVER).setParentId(0),new SpanTestData().setLabel("seda:bar server").setUri("seda://bar?concurrentConsumers=5").setOperation("bar").setKind(Tags.SPAN_KIND_SERVER).setParentId(1)};
  public RouteConcurrentTest(){
    super(testdata);
  }
  @Test public void testSingleInvocationsOfRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(2).create();
    template.sendBody("seda:foo","Hello World");
    assertTrue(notify.matches(30,TimeUnit.SECONDS));
    verify();
  }
  @Test public void testConcurrentInvocationsOfRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(10).create();
    for (int i=0; i < 5; i++) {
      template.sendBody("seda:foo","Hello World");
    }
    assertTrue(notify.matches(30,TimeUnit.SECONDS));
    verifyTraceSpanNumbers(5,testdata.length);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?concurrentConsumers=5").routeId("foo").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).to("seda:bar");
        from("seda:bar?concurrentConsumers=5").routeId("bar").log("routing at ${routeId}").delay(simple("${random(0,500)}"));
      }
    }
;
  }
}
