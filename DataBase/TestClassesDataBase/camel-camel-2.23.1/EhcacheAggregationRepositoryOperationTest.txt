public class EhcacheAggregationRepositoryOperationTest extends EhcacheTestSupport {
  private EhcacheAggregationRepository aggregationRepository;
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    aggregationRepository=createAggregateRepository();
    aggregationRepository.start();
  }
  @Override @After public void tearDown() throws Exception {
    aggregationRepository.stop();
    super.tearDown();
  }
  private boolean exists(  String key){
    DefaultExchangeHolder holder=aggregationRepository.getCache().get(key);
    if (holder == null) {
      return false;
    }
    return true;
  }
  @Test public void testAdd(){
    String key="Add";
    assertFalse(exists(key));
    Exchange exchange=new DefaultExchange(context());
    aggregationRepository.add(context(),key,exchange);
    assertTrue(exists(key));
  }
  @Test public void testGetExists(){
    String key="Get_Exists";
    Exchange exchange=new DefaultExchange(context());
    aggregationRepository.add(context(),key,exchange);
    assertTrue(exists(key));
    Exchange exchange2=aggregationRepository.get(context(),key);
    assertNotNull(exchange2);
    assertEquals(exchange.getExchangeId(),exchange2.getExchangeId());
  }
  @Test public void testGetNotExists(){
    String key="Get_NotExists";
    assertFalse(exists(key));
    Exchange exchange2=aggregationRepository.get(context(),key);
    assertNull(exchange2);
  }
  @Test public void testRemoveExists(){
    String key="Remove_Exists";
    Exchange exchange=new DefaultExchange(context());
    aggregationRepository.add(context(),key,exchange);
    assertTrue(exists(key));
    aggregationRepository.remove(context(),key,exchange);
    assertFalse(exists(key));
  }
  @Test public void testRemoveNotExists(){
    String key="RemoveNotExists";
    Exchange exchange=new DefaultExchange(context());
    assertFalse(exists(key));
    aggregationRepository.remove(context(),key,exchange);
    assertFalse(exists(key));
  }
  @Test public void testGetKeys(){
    String[] keys={"GetKeys1","GetKeys2"};
    addExchanges(keys);
    Set<String> keySet=aggregationRepository.getKeys();
    for (    String key : keys) {
      assertTrue(keySet.contains(key));
    }
  }
  @Test public void testConfirmExist(){
    for (int i=1; i < 4; i++) {
      String key="Confirm_" + i;
      Exchange exchange=new DefaultExchange(context());
      exchange.setExchangeId("Exchange_" + i);
      aggregationRepository.add(context(),key,exchange);
      assertTrue(exists(key));
    }
    aggregationRepository.confirm(context(),"Confirm_2");
    assertTrue(exists("Confirm_1"));
    assertFalse(exists("Confirm_2"));
    assertTrue(exists("Confirm_3"));
  }
  @Test public void testConfirmNotExist(){
    String[] keys=new String[3];
    for (int i=1; i < 4; i++) {
      keys[i - 1]="Confirm" + i;
    }
    addExchanges(keys);
    for (    String key : keys) {
      assertTrue(exists(key));
    }
    aggregationRepository.confirm(context(),"Exchange-Confirm5");
    for (    String key : keys) {
      assertTrue(exists(key));
    }
  }
  private void addExchanges(  String... keys){
    for (    String key : keys) {
      Exchange exchange=new DefaultExchange(context());
      exchange.setExchangeId("Exchange-" + key);
      aggregationRepository.add(context(),key,exchange);
    }
  }
  @Test public void testScan(){
    String[] keys={"Scan1","Scan2"};
    addExchanges(keys);
    Set<String> exchangeIdSet=aggregationRepository.scan(context());
    for (    String key : keys) {
      assertTrue(exchangeIdSet.contains(key));
    }
  }
  @Test public void testRecover(){
    String[] keys={"Recover1","Recover2"};
    addExchanges(keys);
    Exchange exchange2=aggregationRepository.recover(context(),"Recover2");
    Exchange exchange3=aggregationRepository.recover(context(),"Recover3");
    assertNotNull(exchange2);
    assertNull(exchange3);
  }
}
