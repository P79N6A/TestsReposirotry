/** 
 * @version 
 */
public class AsyncEndpointEventNotifierSendingTest extends ContextTestSupport {
  private final List<EventObject> events=new ArrayList<>();
  @Test public void testAsyncEndpointEventNotifier() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertEquals(8,events.size());
    assertIsInstanceOf(ExchangeSendingEvent.class,events.get(0));
    assertIsInstanceOf(ExchangeSendingEvent.class,events.get(1));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(2));
    assertIsInstanceOf(ExchangeSendingEvent.class,events.get(3));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(4));
    assertIsInstanceOf(ExchangeSendingEvent.class,events.get(5));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(6));
    assertIsInstanceOf(ExchangeSentEvent.class,events.get(7));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    DefaultCamelContext context=new DefaultCamelContext(createRegistry());
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      public void notify(      EventObject event) throws Exception {
        events.add(event);
      }
      public boolean isEnabled(      EventObject event){
        return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent;
      }
      @Override protected void doStart() throws Exception {
      }
      @Override protected void doStop() throws Exception {
      }
    }
);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("async:bye:camel?delay=250").to("mock:result");
      }
    }
;
  }
}
