public class GuiceyJUnit4 extends BlockJUnit4ClassRunner {
  protected static InjectorManager manager=new InjectorManager();
  public GuiceyJUnit4(  Class<?> aClass) throws InitializationError {
    super(aClass);
  }
  @Override protected Statement withBeforeClasses(  Statement statement){
    final Statement parent=super.withBeforeClasses(statement);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        manager.beforeClasses();
        parent.evaluate();
      }
    }
;
  }
  @Override protected Statement withAfterClasses(  Statement statement){
    final Statement parent=super.withAfterClasses(statement);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        parent.evaluate();
        manager.afterClasses();
      }
    }
;
  }
  @Override protected Statement withBefores(  FrameworkMethod frameworkMethod,  final Object test,  Statement statement){
    final Statement parent=super.withBefores(frameworkMethod,test,statement);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        manager.beforeTest(test);
        parent.evaluate();
      }
    }
;
  }
  @Override protected Statement withAfters(  FrameworkMethod frameworkMethod,  final Object test,  Statement statement){
    final Statement parent=super.withBefores(frameworkMethod,test,statement);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        parent.evaluate();
        manager.afterTest(test);
      }
    }
;
  }
  @Override public void run(  RunNotifier runNotifier){
    super.run(runNotifier);
  }
}
