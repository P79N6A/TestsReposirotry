/** 
 * Testing monitoring items over multiple connections
 */
public class MonitorItemMultiConnectionsCertTest extends AbstractMiloServerTest {
  private static final String DIRECT_START_1="direct:start1";
  private static final String MILO_SERVER_ITEM_1="milo-server:myitem1";
  private static final String MILO_CLIENT_ITEM_C1_1="milo-client:tcp://foo:bar@localhost:@@port@@?node=" + NodeIds.nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1") + "&keyStoreUrl=file:src/test/resources/cert/cert.p12&keyStorePassword=pwd1&keyPassword=pwd1"+ "&discoveryEndpointSuffix=/discovery&overrideHost=true";
  private static final String MILO_CLIENT_ITEM_C2_1="milo-client:tcp://foo:bar2@localhost:@@port@@?node=" + NodeIds.nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1") + "&discoveryEndpointSuffix=/discovery&overrideHost=true";
  private static final String MILO_CLIENT_ITEM_C3_1="milo-client:tcp://foo:bar@localhost:@@port@@?clientId=1&node=" + NodeIds.nodeValue(MiloServerComponent.DEFAULT_NAMESPACE_URI,"items-myitem1") + "&discoveryEndpointSuffix=/discovery&overrideHost=true";
  private static final String MOCK_TEST_1="mock:test1";
  private static final String MOCK_TEST_2="mock:test2";
  private static final String MOCK_TEST_3="mock:test3";
  @EndpointInject(uri=MOCK_TEST_1) protected MockEndpoint test1Endpoint;
  @EndpointInject(uri=MOCK_TEST_2) protected MockEndpoint test2Endpoint;
  @EndpointInject(uri=MOCK_TEST_3) protected MockEndpoint test3Endpoint;
  @Produce(uri=DIRECT_START_1) protected ProducerTemplate producer1;
  @Override protected void configureMiloServer(  final MiloServerComponent server) throws Exception {
    super.configureMiloServer(server);
    final Path baseDir=Paths.get("target/testing/cert/default");
    final Path trusted=baseDir.resolve("trusted");
    Files.createDirectories(trusted);
    Files.copy(Paths.get("src/test/resources/cert/certificate.der"),trusted.resolve("certificate.der"),REPLACE_EXISTING);
    server.setServerCertificate(loadDefaultTestKey());
    server.setDefaultCertificateValidator(baseDir.toFile());
    server.setSecurityPolicies(EnumSet.of(SecurityPolicy.Basic256Sha256));
    server.setUsernameSecurityPolicyUri(SecurityPolicy.Basic256Sha256);
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(DIRECT_START_1).to(MILO_SERVER_ITEM_1);
        from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1);
        from(resolve(MILO_CLIENT_ITEM_C2_1)).to(MOCK_TEST_2);
        from(resolve(MILO_CLIENT_ITEM_C3_1)).to(MOCK_TEST_3);
      }
    }
;
  }
  /** 
 * Monitor multiple connections, but only one has the correct credentials
 */
  @Test public void testMonitorItem1() throws Exception {
    this.test1Endpoint.setExpectedCount(1);
    this.test1Endpoint.setSleepForEmptyTest(5_000);
    this.test2Endpoint.setExpectedCount(0);
    this.test2Endpoint.setSleepForEmptyTest(5_000);
    this.test3Endpoint.setExpectedCount(0);
    this.test3Endpoint.setSleepForEmptyTest(5_000);
    this.producer1.sendBody("Foo");
    assertMockEndpointsSatisfied();
  }
}
