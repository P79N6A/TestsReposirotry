/** 
 * @version 
 */
public class RecipientListErrorHandlingIssueTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/recipientlist?password=denied";
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testUsingInterceptor() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:error");
        interceptSendToEndpoint("(ftp|direct):.*").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String target=exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT,String.class);
            exchange.getIn().setHeader("target",target);
          }
        }
);
        from("direct:start").recipientList(header("foo"));
        from("direct:foo").setBody(constant("Bye World")).to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:error").message(0).header("target").isEqualTo(getFtpUrl());
    String foo="direct:foo," + getFtpUrl();
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",foo);
    headers.put(Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Test public void testUsingExistingHeaders() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:error");
        from("direct:start").recipientList(header("foo"));
        from("direct:foo").setBody(constant("Bye World")).to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:foo").message(0).header(Exchange.TO_ENDPOINT).isEqualTo("mock://foo");
    getMockEndpoint("mock:error").expectedMessageCount(1);
    getMockEndpoint("mock:error").message(0).header(Exchange.FAILURE_ENDPOINT).isEqualTo(getFtpUrl());
    String foo="direct:foo," + getFtpUrl();
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",foo);
    headers.put(Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
}
