public class SelectCommandTest {
  private SelectCommand command;
  private AmazonSDBClientMock sdbClient;
  private SdbConfiguration configuration;
  private Exchange exchange;
  @Before public void setUp(){
    sdbClient=new AmazonSDBClientMock();
    configuration=new SdbConfiguration();
    configuration.setDomainName("DOMAIN1");
    configuration.setConsistentRead(Boolean.TRUE);
    exchange=new DefaultExchange(new DefaultCamelContext());
    command=new SelectCommand(sdbClient,configuration,exchange);
  }
  @SuppressWarnings("unchecked") @Test public void execute(){
    exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN,"TOKEN1");
    exchange.getIn().setHeader(SdbConstants.SELECT_EXPRESSION,"SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'");
    command.execute();
    assertEquals(Boolean.TRUE,sdbClient.selectRequest.getConsistentRead());
    assertEquals("TOKEN1",sdbClient.selectRequest.getNextToken());
    assertEquals("SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'",sdbClient.selectRequest.getSelectExpression());
    List<Item> items=exchange.getIn().getHeader(SdbConstants.ITEMS,List.class);
    assertEquals("TOKEN2",exchange.getIn().getHeader(SdbConstants.NEXT_TOKEN));
    assertEquals(2,items.size());
    assertEquals("ITEM1",items.get(0).getName());
    assertEquals("ITEM2",items.get(1).getName());
  }
  @Test public void determineSelectExpression(){
    assertNull(this.command.determineSelectExpression());
    exchange.getIn().setHeader(SdbConstants.SELECT_EXPRESSION,"SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'");
    assertEquals("SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'",this.command.determineSelectExpression());
  }
}
