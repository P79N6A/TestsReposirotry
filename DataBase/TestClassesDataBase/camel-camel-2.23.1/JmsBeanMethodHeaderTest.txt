/** 
 * Unit test for sending the bean method name as a key over the JMS wire, that we now support this.
 */
public class JmsBeanMethodHeaderTest extends CamelTestSupport {
  @Test public void testPlainHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("foo","yes");
    template.sendBodyAndHeader("direct:in","Hello World","foo","yes");
    mock.assertIsSatisfied();
  }
  @Test public void testUnderscoreHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("foo_bar","yes");
    template.sendBodyAndHeader("direct:in","Hello World","foo_bar","yes");
    mock.assertIsSatisfied();
  }
  @Test public void testUsingBeanNoJMS() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:approve");
    mock.expectedBodiesReceived("Yes");
    template.sendBodyAndHeader("direct:approve",ExchangePattern.InOut,"James",Exchange.BEAN_METHOD_NAME,"approveLoan");
    mock.assertIsSatisfied();
  }
  @Test public void testUsingBeanAndJMS() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:approve");
    mock.expectedBodiesReceived("Yes");
    template.sendBodyAndHeader("activemq:approve",ExchangePattern.InOut,"James",Exchange.BEAN_METHOD_NAME,"approveLoan");
    mock.assertIsSatisfied();
  }
  @Test public void testUsingJMStoJMStoBean() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:approve");
    mock.expectedBodiesReceived("No");
    template.sendBodyAndHeader("activemq:queue",ExchangePattern.InOut,"James",Exchange.BEAN_METHOD_NAME,"approveSuperLoan");
    mock.assertIsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry reg=super.createRegistry();
    reg.bind("approveService",new ApproveService());
    return reg;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").to("activemq:test.a");
        from("activemq:test.a").to("mock:result");
        from("activemq:queue").to("activemq:approve");
        from("activemq:approve").to("direct:approve");
        from("direct:approve").to("bean:approveService").to("mock:approve");
      }
    }
;
  }
public static class ApproveService {
    public void doSomeStuff(    String input){
    }
    public String approveLoan(    @Body String body){
      return "Yes";
    }
    public String approveSuperLoan(    @Body String body){
      return "No";
    }
  }
}
