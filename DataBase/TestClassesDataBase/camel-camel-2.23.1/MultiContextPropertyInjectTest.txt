@RunWith(Arquillian.class) public class MultiContextPropertyInjectTest {
  @Inject private CamelContext defaultCamelContext;
  @Inject @Uri("direct:in") private ProducerTemplate defaultInbound;
  @Inject @Uri("mock:out") private MockEndpoint defaultOutbound;
  @Inject @ContextName("first") private CamelContext firstCamelContext;
  @Inject @ContextName("first") @Uri("direct:in") private ProducerTemplate firstInbound;
  @Inject @ContextName("first") @Uri("mock:out") private MockEndpoint firstOutbound;
  @Inject @ContextName("second") private CamelContext secondCamelContext;
  @Inject @ContextName("second") @Uri("direct:in") private ProducerTemplate secondInbound;
  @Inject @ContextName("second") @Uri("mock:out") private MockEndpoint secondOutbound;
  @Produces @ApplicationScoped @Named("properties") private static PropertiesComponent configuration(){
    Properties properties=new Properties();
    properties.put("property","default");
    PropertiesComponent component=new PropertiesComponent();
    component.setInitialProperties(properties);
    return component;
  }
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class,PropertyInjectBean.class,FirstCamelContextBean.class,FirstCamelContextPropertyInjectBean.class,SecondCamelContextBean.class,SecondCamelContextPropertyInjectBean.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void configureCamelContexts() throws Exception {
    defaultCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:in").bean(PropertyInjectBean.class).to("mock:out");
      }
    }
);
    firstCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:in").bean(FirstCamelContextPropertyInjectBean.class).to("mock:out");
      }
    }
);
    secondCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:in").bean(SecondCamelContextPropertyInjectBean.class).to("mock:out");
      }
    }
);
    secondCamelContext.startAllRoutes();
  }
  @Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {
    defaultOutbound.expectedMessageCount(1);
    defaultOutbound.expectedBodiesReceived("test");
    defaultOutbound.expectedHeaderReceived("header","default");
    defaultInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,defaultOutbound);
  }
  @Test @InSequence(3) public void retrieveReferenceFromDefaultCamelContext(  PropertyInjectBean bean){
    assertThat(bean.getProperty(),is(equalTo("default")));
  }
  @Test @InSequence(4) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {
    firstOutbound.expectedMessageCount(1);
    firstOutbound.expectedBodiesReceived("test");
    firstOutbound.expectedHeaderReceived("header","default");
    firstInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,firstOutbound);
  }
  @Test @InSequence(5) public void retrieveReferenceFromFirstCamelContext(  FirstCamelContextPropertyInjectBean bean){
    assertThat(bean.getProperty(),is(equalTo("default")));
  }
  @Test @InSequence(6) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {
    secondOutbound.expectedMessageCount(1);
    secondOutbound.expectedBodiesReceived("test");
    secondOutbound.expectedHeaderReceived("header","default");
    secondInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,secondOutbound);
  }
  @Test @InSequence(7) public void retrieveReferenceFromSecondCamelContext(  SecondCamelContextPropertyInjectBean bean){
    assertThat(bean.getProperty(),is(equalTo("default")));
  }
}
