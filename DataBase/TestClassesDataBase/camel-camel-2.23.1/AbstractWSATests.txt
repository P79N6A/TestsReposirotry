/** 
 * Provides abstract test for WS-Addressing
 */
public abstract class AbstractWSATests extends CamelSpringTestSupport {
  protected WebServiceTemplate webServiceTemplate;
  protected OutputChannelReceiver response;
  protected OutputChannelReceiver newReply;
  protected StreamSource source;
  protected StreamResult result;
  private final String xmlBody="<GetQuote xmlns=\"http://www.webserviceX.NET/\"><symbol>GOOG</symbol></GetQuote>";
  private String requestInputAction;
  @Before public void setUp() throws Exception {
    super.setUp();
    webServiceTemplate=applicationContext.getBean("webServiceTemplate",WebServiceTemplate.class);
    newReply=getMandatoryBean(OutputChannelReceiver.class,"replyReceiver");
    response=getMandatoryBean(OutputChannelReceiver.class,"responseReceiver");
    source=new StreamSource(new StringReader(xmlBody));
    result=new StreamResult(new StringWriter());
    response.clear();
    newReply.clear();
    requestInputAction=null;
  }
  @After public void after() throws Exception {
    assertNotNull(result);
  }
  /** 
 * Creates WS-Addressing Action and ReplyTo param for request
 * @param action
 * @param replyTo
 * @return
 * @throws URISyntaxException
 */
  protected final ActionCallback actionAndReplyTo(  String action,  String replyTo) throws URISyntaxException {
    requestInputAction=action;
    ActionCallback requestCallback=new ActionCallback(action);
    if (replyTo != null) {
      requestCallback.setReplyTo(new EndpointReference(new URI(replyTo)));
    }
    return requestCallback;
  }
  /** 
 * Creates WS-Addressing Action param for request
 * @param action
 * @param replyTo
 * @return
 * @throws URISyntaxException
 */
  protected final ActionCallback action(  String action) throws URISyntaxException {
    return actionAndReplyTo(action,null);
  }
  /** 
 * Creates WS-Addressing To and ReplyTo param for request
 * @param action
 * @param replyTo
 * @return
 * @throws URISyntaxException
 */
  protected final ActionCallback toAndReplyTo(  String to,  String replyTo) throws URISyntaxException {
    requestInputAction="http://doesn-not-matter.com";
    ActionCallback requestCallback=new ActionCallback(new URI(requestInputAction),new Addressing10(),new URI(to));
    if (replyTo != null) {
      requestCallback.setReplyTo(new EndpointReference(new URI(replyTo)));
    }
    return requestCallback;
  }
  /** 
 * Creates WS-Addressing To param for request
 * @param action
 * @param replyTo
 * @return
 * @throws URISyntaxException
 */
  protected final ActionCallback to(  String to) throws URISyntaxException {
    return toAndReplyTo(to,null);
  }
  /** 
 * Construct a default action for the response message from the input message using the default response action suffix.
 * @return
 * @throws URISyntaxException
 */
  protected URI getDefaultResponseAction() throws URISyntaxException {
    return new URI(requestInputAction + "Response");
  }
  /** 
 * Only response is allow using a brand new channel
 * @return
 */
  protected final MessageAddressingProperties newChannelParams(){
    assertNotNull(newReply);
    assertNotNull(newReply.getMessageContext());
    SoapMessage request=(SoapMessage)newReply.getMessageContext().getRequest();
    assertNotNull(request);
    MessageAddressingProperties wsaProperties=TestUtil.getWSAProperties(request);
    assertNotNull(wsaProperties);
    assertNotNull(wsaProperties.getTo());
    return wsaProperties;
  }
  /** 
 * Only response is allow using same channel
 * @return
 */
  protected final MessageAddressingProperties sameChannelParams(){
    assertNull(newReply.getMessageContext());
    assertNotNull(response);
    assertNotNull(response.getMessageContext());
    SoapMessage soapResponse=(SoapMessage)response.getMessageContext().getResponse();
    assertNotNull(soapResponse);
    MessageAddressingProperties wsaProperties=TestUtil.getWSAProperties(soapResponse);
    assertNotNull(wsaProperties);
    return wsaProperties;
  }
  /** 
 * Provides such an ActionCallback that sets the WS-Addressing param replyTo or doesn't set WS-Addressing param replyTo. In other words it cause response to be return using new or same channel as the request.
 * @param action
 * @return
 * @throws URISyntaxException
 */
  abstract ActionCallback channelIn(  String action) throws URISyntaxException ;
  /** 
 * Provide corresponding results based on channel input. These two abstract methods (channelIn and channelOut)are bind together tighly.
 * @return
 */
  abstract MessageAddressingProperties channelOut();
}
