public class UndertowWsTwoRoutesTest extends BaseUndertowTest {
  @Test public void testWSHttpCallEcho() throws Exception {
{
      final List<String> received=new ArrayList<>();
      final CountDownLatch latch=new CountDownLatch(1);
      final AsyncHttpClient c=new DefaultAsyncHttpClient();
      final WebSocket websocket=c.prepareGet("ws://localhost:" + getPort() + "/bar").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){
        @Override public void onTextFrame(        String message,        boolean finalFragment,        int rsv){
          received.add(message);
          log.info("received --> " + message);
          latch.countDown();
        }
        @Override public void onOpen(        WebSocket websocket){
        }
        @Override public void onClose(        WebSocket websocket,        int code,        String reason){
        }
        @Override public void onError(        Throwable t){
          t.printStackTrace();
        }
      }
).build()).get();
      websocket.sendTextFrame("Beer");
      assertTrue(latch.await(10,TimeUnit.SECONDS));
      assertEquals(1,received.size());
      assertEquals("The bar has Beer",received.get(0));
      websocket.sendCloseFrame();
      c.close();
    }
{
      final List<String> received=new ArrayList<>();
      final CountDownLatch latch=new CountDownLatch(1);
      final AsyncHttpClient c=new DefaultAsyncHttpClient();
      final WebSocket websocket=c.prepareGet("ws://localhost:" + getPort() + "/pub").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){
        @Override public void onTextFrame(        String message,        boolean finalFragment,        int rsv){
          received.add(message);
          log.info("received --> " + message);
          latch.countDown();
        }
        @Override public void onOpen(        WebSocket websocket){
        }
        @Override public void onClose(        WebSocket websocket,        int code,        String reason){
        }
        @Override public void onError(        Throwable t){
          t.printStackTrace();
        }
      }
).build()).get();
      websocket.sendTextFrame("wine");
      assertTrue(latch.await(10,TimeUnit.SECONDS));
      assertEquals(1,received.size());
      assertEquals("The pub has wine",received.get(0));
      websocket.sendCloseFrame();
      c.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        int port=getPort();
        from("undertow:ws://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("undertow:ws://localhost:" + port + "/bar");
        from("undertow:ws://localhost:" + port + "/pub").log(">>> Message received from PUB WebSocket Client : ${body}").transform().simple("The pub has ${body}").to("undertow:ws://localhost:" + port + "/pub");
      }
    }
;
  }
}
