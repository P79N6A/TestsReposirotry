/** 
 * @version
 */
@Ignore("We cannot run this test as default port 80 is not allows on most boxes") public class HttpDefaultPortNumberTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void testHttpConnectionWithTwoRoutesAndOneWithDefaultPort() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search");
        from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search");
      }
    }
);
    context.start();
    Exchange exchange=template.request("direct:start",null);
    assertRefused(exchange,":80");
  }
  @Test public void testHttpConnectionWithTwoRoutesAndAllPortsSpecified() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + ":80/search");
        from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search");
      }
    }
);
    context.start();
    Exchange exchange=template.request("direct:start",null);
    assertRefused(exchange,":80");
  }
  @Test public void testHttpConnectionRefusedStoppedServer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search");
        from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search");
      }
    }
);
    context.start();
    localServer.stop();
    Exchange exchange=template.request("direct:start",null);
    assertRefused(exchange,":80");
  }
  @Test public void testHttpConnectionRefusedRunningServer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search");
      }
    }
);
    context.start();
    Exchange exchange=template.request("direct:start",null);
    assertRefused(exchange,":80");
  }
  @Override public boolean isUseRouteBuilder(){
    return true;
  }
  private void assertRefused(  Exchange exchange,  String portExt){
    Map<String,Object> headers=exchange.getOut().getHeaders();
    assertNull(headers.get(Exchange.HTTP_RESPONSE_CODE));
    assertIsInstanceOf(HttpHostConnectException.class,exchange.getException());
    assertEquals("Connection to http://127.0.0.1" + portExt + " refused",exchange.getException().getMessage());
  }
}
