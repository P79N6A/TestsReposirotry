/** 
 * @version 
 */
public class AggregatorConcurrencyTest extends ContextTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(AggregatorConcurrencyTest.class);
  private static final AtomicInteger COUNTER=new AtomicInteger(0);
  private static final AtomicInteger SUM=new AtomicInteger(0);
  private final int size=100;
  private final String uri="direct:start";
  @Test public void testAggregateConcurrency() throws Exception {
    int total=0;
    ExecutorService service=Executors.newFixedThreadPool(20);
    List<Callable<Object>> tasks=new ArrayList<>();
    for (int i=0; i < size; i++) {
      final int count=i;
      total+=i;
      tasks.add(new Callable<Object>(){
        public Object call() throws Exception {
          template.sendBodyAndHeader(uri,"Hello World","index",count);
          return null;
        }
      }
);
    }
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived(total);
    mock.expectedHeaderReceived("total",total);
    mock.expectedPropertyReceived(Exchange.AGGREGATED_SIZE,size);
    service.invokeAll(tasks);
    assertMockEndpointsSatisfied();
    assertEquals(100,COUNTER.get());
    service.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(uri).aggregate(constant(true),new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            Exchange answer=oldExchange != null ? oldExchange : newExchange;
            COUNTER.getAndIncrement();
            Integer newIndex=newExchange.getIn().getHeader("index",Integer.class);
            int total=SUM.addAndGet(newIndex);
            answer.getIn().setHeader("total",total);
            LOG.debug("Index: {}. Total so far: {}",newIndex,total);
            return answer;
          }
        }
).completionTimeout(60000).completionPredicate(property(Exchange.AGGREGATED_SIZE).isEqualTo(100)).to("direct:foo");
        from("direct:foo").setBody().header("total").to("mock:result");
      }
    }
;
  }
}
