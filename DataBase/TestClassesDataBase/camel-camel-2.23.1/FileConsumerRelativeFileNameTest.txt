/** 
 * @version 
 */
public class FileConsumerRelativeFileNameTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filename-consumer");
    super.setUp();
  }
  @Test public void testValidFilenameOnExchange() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.allMessages().header(Exchange.FILE_NAME).isNotNull();
    template.sendBodyAndHeader("file:target/filename-consumer","Hello World",Exchange.FILE_NAME,"target/filename-consumer-hello.txt");
    template.sendBodyAndHeader("file:target/filename-consumer","Bye World",Exchange.FILE_NAME,"target/filename-consumer-bye.txt");
    context.startAllRoutes();
    assertMockEndpointsSatisfied();
    assertDirectoryEquals("target/filename-consumer-bye.txt",mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_NAME,String.class));
    assertDirectoryEquals("target/filename-consumer-hello.txt",mock.getReceivedExchanges().get(1).getIn().getHeader(Exchange.FILE_NAME,String.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/filename-consumer?initialDelay=0&delay=10&recursive=true&sortBy=file:name").noAutoStartup().to("mock:result");
      }
    }
;
  }
}
