public class FileConcurrentWriteAppendSameFileTest extends ContextTestSupport {
  private final int size=100;
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/concurrent");
    super.setUp();
  }
  @Test public void testConcurrentAppend() throws Exception {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < size; i++) {
      sb.append("Line " + i + LS);
    }
    template.sendBodyAndHeader("file:target/concurrent",sb.toString(),Exchange.FILE_NAME,"input.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(size);
    mock.expectsNoDuplicates(body());
    mock.setResultWaitTime(30000);
    Thread.sleep(500);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    String txt=context.getTypeConverter().convertTo(String.class,new File("target/concurrent/outbox/result.txt"));
    assertNotNull(txt);
    String[] lines=txt.split(LS);
    assertEquals("Should be " + size + " lines",size,lines.length);
    Set<String> rows=new LinkedHashSet<>(Arrays.asList(lines));
    assertEquals("Should be " + size + " unique lines",size,rows.size());
    log.info(txt);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/concurrent?initialDelay=0&delay=10").routeId("foo").noAutoStartup().split(body().tokenize(LS)).parallelProcessing().streaming().setBody(body().append(":Status=OK").append(LS)).to("file:target/concurrent/outbox?fileExist=Append&fileName=result.txt").to("mock:result").end();
      }
    }
;
  }
}
