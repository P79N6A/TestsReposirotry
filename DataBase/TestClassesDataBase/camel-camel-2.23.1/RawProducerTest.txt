@RunWith(MockitoJUnitRunner.class) public class RawProducerTest extends SplunkMockTestSupport {
  private static final String PAYLOAD="{foo:1, bar:2}";
  @EndpointInject(uri="splunk://stream") protected SplunkEndpoint streamEndpoint;
  @EndpointInject(uri="splunk://submit") protected SplunkEndpoint submitEndpoint;
  @EndpointInject(uri="splunk://tcp") protected SplunkEndpoint tcpEndpoint;
  @Mock private TcpInput input;
  @Mock private Index index;
  @Mock private IndexCollection indexColl;
  @Mock private InputCollection inputCollection;
  @Before public void setup() throws IOException {
    when(service.getIndexes()).thenReturn(indexColl);
    when(service.getInputs()).thenReturn(inputCollection);
    when(input.attach()).thenReturn(socket);
    when(inputCollection.get(anyString())).thenReturn(input);
    when(indexColl.get(anyString())).thenReturn(index);
    when(index.attach(isA(Args.class))).thenReturn(socket);
    when(socket.getOutputStream()).thenReturn(System.out);
  }
  @Test public void testStreamWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:stream-result");
    mock.setExpectedMessageCount(1);
    mock.expectedBodiesReceived(PAYLOAD);
    template.sendBody("direct:stream",PAYLOAD);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSubmitWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:submitresult");
    mock.setExpectedMessageCount(1);
    mock.expectedBodiesReceived(PAYLOAD);
    template.sendBody("direct:submit",PAYLOAD);
    assertMockEndpointsSatisfied();
  }
  @Test public void testTcpWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tcpresult");
    mock.setExpectedMessageCount(1);
    mock.expectedBodiesReceived(PAYLOAD);
    template.sendBody("direct:tcp",PAYLOAD);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:stream").to("splunk://stream?username=foo&password=bar&index=myindex&sourceType=SourceType&source=Source&raw=true").to("mock:stream-result");
        from("direct:submit").to("splunk://submit?username=foo&password=bar&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:submitresult");
        from("direct:tcp").to("splunk://tcp?username=foo&password=bar&tcpReceiverPort=2222&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:tcpresult");
      }
    }
;
  }
}
