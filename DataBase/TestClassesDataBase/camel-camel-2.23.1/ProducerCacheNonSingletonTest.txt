public class ProducerCacheNonSingletonTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testNonSingleton() throws Exception {
    context.addComponent("dummy",new MyDummyComponent());
    ProducerCache cache=new ProducerCache(this,context);
    cache.start();
    Endpoint endpoint=context.getEndpoint("dummy:foo");
    DefaultProducer producer=(DefaultProducer)cache.acquireProducer(endpoint);
    assertNotNull(producer);
    assertTrue("Should be started",producer.getStatus().isStarted());
    Object found=context.hasService(MyDummyProducer.class);
    assertNull("Should not store producer on CamelContext",found);
    cache.releaseProducer(endpoint,producer);
    assertTrue("Should be stopped",producer.getStatus().isStopped());
    cache.stop();
  }
public class MyDummyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyDummyEndpoint();
    }
  }
public class MyDummyEndpoint extends DefaultEndpoint {
    @Override public Producer createProducer() throws Exception {
      return new MyDummyProducer(this);
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    @Override public boolean isSingleton(){
      return false;
    }
    @Override protected String createEndpointUri(){
      return "dummy://foo";
    }
  }
private class MyDummyProducer extends DefaultProducer {
    public MyDummyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    @Override public void process(    Exchange exchange) throws Exception {
    }
  }
}
