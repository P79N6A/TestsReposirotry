/** 
 * @version 
 */
public class NagiosTest extends CamelTestSupport {
  @Mock protected static PassiveCheckSender nagiosPassiveCheckSender;
  protected boolean canRun;
  @BeforeClass public static void setSender(){
    nagiosPassiveCheckSender=Mockito.mock(NagiosPassiveCheckSender.class);
  }
  @Before @Override public void setUp() throws Exception {
    canRun=true;
    super.setUp();
  }
  @Test public void testSendToNagios() throws Exception {
    if (!canRun) {
      return;
    }
    MessagePayload expectedPayload=new MessagePayload("localhost",Level.OK,context.getName(),"Hello Nagios");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.allMessages().body().isInstanceOf(String.class);
    mock.expectedBodiesReceived("Hello Nagios");
    template.sendBody("direct:start","Hello Nagios");
    assertMockEndpointsSatisfied();
    verify(nagiosPassiveCheckSender,times(1)).send(expectedPayload);
  }
  @Test public void testSendTwoToNagios() throws Exception {
    if (!canRun) {
      return;
    }
    MessagePayload expectedPayload1=new MessagePayload("localhost",Level.OK,context.getName(),"Hello Nagios");
    MessagePayload expectedPayload2=new MessagePayload("localhost",Level.OK,context.getName(),"Bye Nagios");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.allMessages().body().isInstanceOf(String.class);
    mock.expectedBodiesReceived("Hello Nagios","Bye Nagios");
    template.sendBody("direct:start","Hello Nagios");
    template.sendBody("direct:start","Bye Nagios");
    assertMockEndpointsSatisfied();
    verify(nagiosPassiveCheckSender).send(expectedPayload1);
    verify(nagiosPassiveCheckSender).send(expectedPayload2);
  }
  @Test public void testSendToNagiosWarn() throws Exception {
    if (!canRun) {
      return;
    }
    MessagePayload expectedPayload1=new MessagePayload("localhost",Level.WARNING,context.getName(),"Hello Nagios");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello Nagios");
    template.sendBodyAndHeader("direct:start","Hello Nagios",NagiosConstants.LEVEL,Level.WARNING);
    assertMockEndpointsSatisfied();
    verify(nagiosPassiveCheckSender).send(expectedPayload1);
  }
  @Test public void testSendToNagiosWarnAsText() throws Exception {
    if (!canRun) {
      return;
    }
    MessagePayload expectedPayload1=new MessagePayload("localhost",Level.WARNING,context.getName(),"Hello Nagios");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello Nagios");
    template.sendBodyAndHeader("direct:start","Hello Nagios",NagiosConstants.LEVEL,"WARNING");
    assertMockEndpointsSatisfied();
    verify(nagiosPassiveCheckSender).send(expectedPayload1);
  }
  @Test public void testSendToNagiosMultiHeaders() throws Exception {
    if (!canRun) {
      return;
    }
    MessagePayload expectedPayload1=new MessagePayload("myHost",Level.CRITICAL,"myService","Hello Nagios");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello Nagios");
    Map<String,Object> headers=new HashMap<>();
    headers.put(NagiosConstants.LEVEL,"CRITICAL");
    headers.put(NagiosConstants.HOST_NAME,"myHost");
    headers.put(NagiosConstants.SERVICE_NAME,"myService");
    template.sendBodyAndHeaders("direct:start","Hello Nagios",headers);
    assertMockEndpointsSatisfied();
    verify(nagiosPassiveCheckSender).send(expectedPayload1);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        String uri="nagios:127.0.0.1:25664?password=secret";
        NagiosComponent nagiosComponent=new NagiosComponent();
        nagiosComponent.setCamelContext(context);
        NagiosEndpoint nagiosEndpoint=(NagiosEndpoint)nagiosComponent.createEndpoint(uri);
        nagiosEndpoint.setSender(nagiosPassiveCheckSender);
        nagiosEndpoint.createProducer();
        from("direct:start").to(nagiosEndpoint).to("mock:result");
      }
    }
;
  }
}
