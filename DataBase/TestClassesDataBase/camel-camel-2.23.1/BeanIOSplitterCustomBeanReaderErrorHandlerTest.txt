public class BeanIOSplitterCustomBeanReaderErrorHandlerTest extends CamelTestSupport {
  private static final String FIXED_DATA="Joe,Smith,Developer,75000,10012009" + LS + "Jane,Doe,Architect,80000,01152008"+ LS+ "Jon,Anderson,Manager,85000,03182007"+ LS;
  private static final String FIXED_FAIL_DATA="Joe,Smith,Developer,75000,10012009" + LS + "Jane,Doe,Architect,80000,01152008"+ LS+ "Jon,Anderson,Manager,XXX,03182007"+ LS;
  @Test public void testSplit() throws Exception {
    List<Employee> employees=getEmployees();
    MockEndpoint mock=getMockEndpoint("mock:beanio-unmarshal");
    mock.expectedBodiesReceived(employees);
    template.sendBody("direct:unmarshal",FIXED_DATA);
    mock.assertIsSatisfied();
  }
  @Test public void testSplitFail() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:beanio-unmarshal");
    mock.expectedMessageCount(3);
    mock.message(0).body().isInstanceOf(Employee.class);
    mock.message(1).body().isInstanceOf(Employee.class);
    mock.message(2).body().isInstanceOf(MyErrorDto.class);
    template.sendBody("direct:unmarshal",FIXED_FAIL_DATA);
    mock.assertIsSatisfied();
    assertEquals("employee",mock.getReceivedExchanges().get(2).getIn().getBody(MyErrorDto.class).getRecord());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        BeanIOSplitter splitter=new BeanIOSplitter();
        splitter.setMapping("org/apache/camel/dataformat/beanio/mappings.xml");
        splitter.setStreamName("employeeFile");
        splitter.setBeanReaderErrorHandlerType(MyErrorHandler.class);
        from("direct:unmarshal").split(splitter).streaming().to("log:line").to("mock:beanio-unmarshal");
      }
    }
;
  }
  private List<Employee> getEmployees() throws ParseException {
    List<Employee> employees=new ArrayList<>();
    Employee one=new Employee();
    one.setFirstName("Joe");
    one.setLastName("Smith");
    one.setTitle("Developer");
    one.setSalary(75000);
    one.setHireDate(new SimpleDateFormat("MMddyyyy").parse("10012009"));
    employees.add(one);
    Employee two=new Employee();
    two.setFirstName("Jane");
    two.setLastName("Doe");
    two.setTitle("Architect");
    two.setSalary(80000);
    two.setHireDate(new SimpleDateFormat("MMddyyyy").parse("01152008"));
    employees.add(two);
    Employee three=new Employee();
    three.setFirstName("Jon");
    three.setLastName("Anderson");
    three.setTitle("Manager");
    three.setSalary(85000);
    three.setHireDate(new SimpleDateFormat("MMddyyyy").parse("03182007"));
    employees.add(three);
    return employees;
  }
}
