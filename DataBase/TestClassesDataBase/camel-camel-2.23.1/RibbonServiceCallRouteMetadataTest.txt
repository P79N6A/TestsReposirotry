public class RibbonServiceCallRouteMetadataTest extends CamelTestSupport {
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:app1").expectedMessageCount(1);
    getMockEndpoint("mock:app2").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(2);
    String out=template.requestBody("direct:start",null,String.class);
    String out2=template.requestBody("direct:start",null,String.class);
    assertEquals("app2",out);
    assertEquals("app1",out2);
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        StaticServiceDiscovery servers=new StaticServiceDiscovery();
        servers.addServer(DefaultServiceDefinition.builder().withName("myService").withHost("localhost").withPort(9090).addMeta("contextPath","app1").build());
        servers.addServer(DefaultServiceDefinition.builder().withName("myService").withHost("localhost").withPort(9090).addMeta("contextPath","app2").build());
        RibbonConfiguration configuration=new RibbonConfiguration();
        RibbonServiceLoadBalancer loadBalancer=new RibbonServiceLoadBalancer(configuration);
        from("direct:start").serviceCall().name("myService").expression().simple("jetty:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/${header.CamelServiceCallServiceMeta[contextPath]}").loadBalancer(loadBalancer).serviceDiscovery(servers).end().to("mock:result");
        from("jetty:http://localhost:9090/app1").to("mock:app1").transform().constant("app1");
        from("jetty:http://localhost:9090/app2").to("mock:app2").transform().constant("app2");
      }
    }
;
  }
}
