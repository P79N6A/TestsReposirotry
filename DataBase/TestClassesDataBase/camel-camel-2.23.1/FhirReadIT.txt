/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirRead} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirReadIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirReadIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirReadApiMethod.class).getName();
  @Test public void testResourceById() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.id",patient.getIdElement());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_ID",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByLongId() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.longId",Long.valueOf(patient.getIdElement().getIdPart()));
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_LONG_ID",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByStringId() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.stringId",patient.getIdElement().getIdPart());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByIdAndStringResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceClass","Patient");
    headers.put("CamelFhir.id",patient.getIdElement());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_ID_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByLongIdAndStringResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.longId",Long.valueOf(patient.getIdElement().getIdPart()));
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByStringIdAndStringResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.stringId",patient.getIdElement().getIdPart());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByStringIdAndVersion() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.stringId",patient.getIdElement().getIdPart());
    headers.put("CamelFhir.version",patient.getIdElement().getVersionIdPart());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_VERSION",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByStringIdAndVersionWithResourceClass() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceClass","Patient");
    headers.put("CamelFhir.stringId",patient.getIdElement().getIdPart());
    headers.put("CamelFhir.version",patient.getIdElement().getVersionIdPart());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByiUrl() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.iUrl",new IdType(this.patient.getId()));
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_IURL",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByUrl() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resource",Patient.class);
    headers.put("CamelFhir.url",this.patient.getId());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_URL",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByStringUrlAndStringResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceClass","Patient");
    headers.put("CamelFhir.iUrl",new IdType(this.patient.getId()));
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByUrlAndStringResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceClass","Patient");
    headers.put("CamelFhir.url",this.patient.getId());
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  @Test public void testResourceByUrlAndStringResourcePrettyPrint() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.resourceClass","Patient");
    headers.put("CamelFhir.url",this.patient.getId());
    headers.put(ExtraParameters.PRETTY_PRINT.getHeaderName(),Boolean.TRUE);
    Patient result=requestBodyAndHeaders("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE",null,headers);
    assertValidResponse(result);
  }
  private void assertValidResponse(  Patient result){
    LOG.debug("response: " + result);
    assertNotNull("resourceByUrl result",result);
    assertEquals("Freeman",result.getName().get(0).getFamily());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_LONG_ID").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_STRING_ID_AND_VERSION").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById");
        from("direct://RESOURCE_BY_IURL").to("fhir://" + PATH_PREFIX + "/resourceByUrl");
        from("direct://RESOURCE_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceByUrl");
        from("direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl");
        from("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl");
      }
    }
;
  }
}
