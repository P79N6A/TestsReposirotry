/** 
 * @version
 */
public class RestletProducerBinaryStreamTest extends RestletTestSupport {
  @Test public void shouldHandleBinaryOctetStream() throws Exception {
    Exchange response=template.request("restlet:http://localhost:" + portNum + "/application/octet-stream?streamRepresentation=true",null);
    assertThat(response.getOut().getHeader(CONTENT_TYPE,String.class),equalTo("application/octet-stream"));
    assertThat(response.getOut().getBody(byte[].class),equalTo(getAllBytes()));
  }
  @Test public void shouldHandleBinaryAudioMpeg() throws Exception {
    Exchange response=template.request("restlet:http://localhost:" + portNum + "/audio/mpeg?streamRepresentation=true",null);
    assertThat(response.getOut().getHeader(CONTENT_TYPE,String.class),equalTo("audio/mpeg"));
    assertThat(response.getOut().getBody(byte[].class),equalTo(getAllBytes()));
  }
  @Test public void shouldAutoClose() throws Exception {
    Exchange response=template.request("restlet:http://localhost:" + portNum + "/application/octet-stream?streamRepresentation=true&autoCloseStream=true",null);
    assertThat(response.getOut().getHeader(CONTENT_TYPE,String.class),equalTo("application/octet-stream"));
    InputStream is=(InputStream)response.getOut().getBody();
    assertNotNull(is);
    try {
      is.read();
      fail("Should be closed");
    }
 catch (    IOException e) {
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("restlet:http://localhost:" + portNum + "/application/octet-stream").setHeader(CONTENT_TYPE,constant(APPLICATION_OCTET_STREAM)).setBody(constant(new ByteArrayInputStream(getAllBytes())));
        from("restlet:http://localhost:" + portNum + "/audio/mpeg").setHeader(CONTENT_TYPE,constant(AUDIO_MPEG)).setBody(constant(new ByteArrayInputStream(getAllBytes())));
      }
    }
;
  }
  private static byte[] getAllBytes(){
    byte[] data=new byte[256];
    for (int i=0; i < 256; i++) {
      data[i]=(byte)(Byte.MIN_VALUE + i);
    }
    return data;
  }
}
