public class PollEnrichFileDefaultAggregationStrategyTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/enrich");
    deleteDirectory("target/enrichdata");
    super.setUp();
  }
  @Test public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {
    getMockEndpoint("mock:start").expectedBodiesReceived("Start");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Big file");
    mock.expectedFileExists("target/enrich/.done/AAA.fin");
    mock.expectedFileExists("target/enrichdata/.done/AAA.dat");
    template.sendBodyAndHeader("file://target/enrich","Start",Exchange.FILE_NAME,"AAA.fin");
    log.info("Sleeping for 0.25 sec before writing enrichdata file");
    Thread.sleep(250);
    template.sendBodyAndHeader("file://target/enrichdata","Big file",Exchange.FILE_NAME,"AAA.dat");
    log.info("... write done");
    assertMockEndpointsSatisfied();
    assertFileDoesNotExists("target/enrichdata/AAA.dat.camelLock");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/enrich?initialDelay=0&delay=10&move=.done").to("mock:start").pollEnrich("file://target/enrichdata?initialDelay=0&delay=10&readLock=markerFile&move=.done",10000).to("mock:result");
      }
    }
;
  }
  private static void assertFileDoesNotExists(  String filename){
    File file=new File(filename);
    assertFalse("File " + filename + " should not exist, it should have been deleted after being processed",file.exists());
  }
}
