public class LanguageServiceTest extends ContextTestSupport {
  private MyLanguage my=new MyLanguage();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("my",my);
    return jndi;
  }
  @Test public void testLanguageService() throws Exception {
    MyLanguage myl=(MyLanguage)context.resolveLanguage("my");
    assertNotNull(myl);
    assertEquals("Started",myl.getState());
    assertEquals(2,context.getLanguageNames().size());
    MyLanguage myl2=(MyLanguage)context.resolveLanguage("my");
    assertNotNull(myl2);
    assertSame(myl,myl2);
    assertEquals("Started",myl2.getState());
    assertEquals(2,context.getLanguageNames().size());
    context.stop();
    assertEquals("Stopped",myl.getState());
    assertTrue(context.getLanguageNames().isEmpty());
  }
  @Test public void testNonSingletonLanguage() throws Exception {
    Language tol=context.resolveLanguage("tokenize");
    assertNotNull(tol);
    assertEquals(2,context.getLanguageNames().size());
    Language tol2=context.resolveLanguage("tokenize");
    assertNotNull(tol2);
    assertNotSame(tol,tol2);
    assertEquals(2,context.getLanguageNames().size());
    context.stop();
    assertTrue(context.getLanguageNames().isEmpty());
  }
public class MyLanguage extends ServiceSupport implements Language, IsSingleton {
    private String state;
    @Override public Predicate createPredicate(    String expression){
      return PredicateBuilder.constant(true);
    }
    @Override public Expression createExpression(    String expression){
      return ExpressionBuilder.constantExpression(expression);
    }
    public String getState(){
      return state;
    }
    @Override protected void doStart() throws Exception {
      state="Started";
    }
    @Override protected void doStop() throws Exception {
      state="Stopped";
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
}
