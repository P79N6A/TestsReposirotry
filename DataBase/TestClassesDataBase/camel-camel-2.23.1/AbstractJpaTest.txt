/** 
 * @version 
 */
public abstract class AbstractJpaTest extends CamelTestSupport {
  protected ApplicationContext applicationContext;
  protected TransactionTemplate transactionTemplate;
  protected EntityManager entityManager;
  @Before public void setUp() throws Exception {
    super.setUp();
    EntityManagerFactory entityManagerFactory=applicationContext.getBean("entityManagerFactory",EntityManagerFactory.class);
    transactionTemplate=applicationContext.getBean("transactionTemplate",TransactionTemplate.class);
    entityManager=entityManagerFactory.createEntityManager();
    cleanupRepository();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    if (entityManager != null) {
      entityManager.close();
    }
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    applicationContext=new ClassPathXmlApplicationContext(routeXml());
    return SpringCamelContext.springCamelContext(applicationContext);
  }
  protected void cleanupRepository(){
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus arg0){
        entityManager.joinTransaction();
        List<?> list=entityManager.createQuery(selectAllString()).getResultList();
        for (        Object item : list) {
          entityManager.remove(item);
        }
        entityManager.flush();
        return Boolean.TRUE;
      }
    }
);
  }
  protected void assertEntityInDB(  int size) throws Exception {
    assertEntityInDB(size,SendEmail.class);
  }
  protected void assertEntityInDB(  int size,  Class entityType){
    List<?> results=entityManager.createQuery("select o from " + entityType.getName() + " o").getResultList();
    assertEquals(size,results.size());
    assertIsInstanceOf(entityType,results.get(0));
  }
  protected void saveEntityInDB(  final Object entity){
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus status){
        entityManager.joinTransaction();
        entityManager.persist(entity);
        entityManager.flush();
        return null;
      }
    }
);
  }
  protected abstract String routeXml();
  protected abstract String selectAllString();
}
