public class MongoDbReadPreferenceOptionTest extends AbstractMongoDbTest {
  private MongoDbEndpoint endpoint;
  @Test public void testInvalidReadPreferenceOptionValue() throws Exception {
    try {
      createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=foo");
      fail("Should have thrown exception");
    }
 catch (    IllegalArgumentException iae) {
      assertTrue(iae.getMessage(),iae.getMessage().endsWith("No match for read preference of foo"));
    }
  }
  @Test public void testNoReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}");
    assertNull(endpoint.getReadPreference());
    assertSame(ReadPreference.primary(),endpoint.getMongoConnection().getReadPreference());
  }
  @Test public void testPrimaryReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=primary");
    assertSame(ReadPreference.primary(),endpoint.getReadPreference());
    assertSame(ReadPreference.primary(),endpoint.getMongoConnection().getReadPreference());
  }
  @Test public void testPrimaryPreferredReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=primaryPreferred");
    assertSame(ReadPreference.primaryPreferred(),endpoint.getReadPreference());
    assertSame(ReadPreference.primaryPreferred(),endpoint.getMongoConnection().getReadPreference());
  }
  @Test public void testSecondaryReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=secondary");
    assertSame(ReadPreference.secondary(),endpoint.getReadPreference());
    assertSame(ReadPreference.secondary(),endpoint.getMongoConnection().getReadPreference());
  }
  @Test public void testSecondaryPreferredReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=secondaryPreferred");
    assertSame(ReadPreference.secondaryPreferred(),endpoint.getReadPreference());
    assertSame(ReadPreference.secondaryPreferred(),endpoint.getMongoConnection().getReadPreference());
  }
  @Test public void testNearestReadPreferenceOptionValue() throws Exception {
    endpoint=createMongoDbEndpoint("mongodb:myDb?database={{mongodb.testDb}}&readPreference=nearest");
    assertSame(ReadPreference.nearest(),endpoint.getReadPreference());
    assertSame(ReadPreference.nearest(),endpoint.getMongoConnection().getReadPreference());
  }
  private MongoDbEndpoint createMongoDbEndpoint(  String uri) throws Exception {
    Endpoint endpoint=context().getComponent("mongodb").createEndpoint(uri);
    endpoint.start();
    return (MongoDbEndpoint)endpoint;
  }
}
