public class KafkaConsumerOffsetRepositoryResumeTest extends BaseEmbeddedKafkaTest {
  private static final String TOPIC="offset-resume";
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  private org.apache.kafka.clients.producer.KafkaProducer<String,String> producer;
  private MemoryStateRepository stateRepository;
  @Override protected void doPreSetup() throws Exception {
    Properties props=getDefaultProperties();
    producer=new org.apache.kafka.clients.producer.KafkaProducer<>(props);
    kafkaBroker.createTopic(TOPIC,2);
    for (int i=0; i < 10; i++) {
      producer.send(new ProducerRecord<>(TOPIC,i % 2,"key","message-" + i));
    }
    stateRepository=new MemoryStateRepository();
    stateRepository.setState(TOPIC + "/0","2");
    stateRepository.setState(TOPIC + "/1","3");
  }
  @After public void after(){
    if (producer != null) {
      producer.close();
    }
    stateRepository=null;
  }
  /** 
 * Given an offset repository with values When consuming with this repository Then we're consuming from the saved offsets
 */
  @Test public void shouldResumeFromAnyParticularOffset() throws InterruptedException {
    result.expectedMessageCount(3);
    result.expectedBodiesReceivedInAnyOrder("message-6","message-8","message-9");
    result.assertIsSatisfied(3000);
    assertEquals("partition-0","4",stateRepository.getState(TOPIC + "/0"));
    assertEquals("partition-1","4",stateRepository.getState(TOPIC + "/1"));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("offset",stateRepository);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("kafka:" + TOPIC + "?groupId=A"+ "&autoOffsetReset=earliest"+ "&consumersCount=2"+ "&offsetRepository=#offset").to("mock:result");
      }
    }
;
  }
}
