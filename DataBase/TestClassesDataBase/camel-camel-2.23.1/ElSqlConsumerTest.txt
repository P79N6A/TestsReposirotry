/** 
 */
public class ElSqlConsumerTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    jndi.bind("dataSource",db);
    return jndi;
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testConsume() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(3);
    assertMockEndpointsSatisfied();
    List<Exchange> exchanges=mock.getReceivedExchanges();
    assertTrue(exchanges.size() >= 3);
    assertEquals(1,exchanges.get(0).getIn().getBody(Map.class).get("ID"));
    assertEquals("Camel",exchanges.get(0).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(2,exchanges.get(1).getIn().getBody(Map.class).get("ID"));
    assertEquals("AMQ",exchanges.get(1).getIn().getBody(Map.class).get("PROJECT"));
    assertEquals(3,exchanges.get(2).getIn().getBody(Map.class).get("ID"));
    assertEquals("Linux",exchanges.get(2).getIn().getBody(Map.class).get("PROJECT"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("elsql:allProjects:elsql/projects.elsql?dataSource=#dataSource").to("mock:result");
      }
    }
;
  }
}
