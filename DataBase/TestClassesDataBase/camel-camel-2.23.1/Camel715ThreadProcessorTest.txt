/** 
 * An old unit test from CAMEL-715 which reproduced a problem which we don't have anymore in Camel threads EIP and the routing engine.
 */
public class Camel715ThreadProcessorTest extends Assert {
  private static final int ITERS=50000;
class SendingProcessor implements Processor {
    int iterationNumber;
    public SendingProcessor(    int iter){
      iterationNumber=iter;
    }
    public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      in.setBody("a");
      exchange.setProperty("iterationNumber",iterationNumber);
    }
  }
  @Test public void testThreadProcessor() throws Exception {
    CamelContext context=new DefaultCamelContext();
    final CountDownLatch latch=new CountDownLatch(ITERS);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").threads(4).to("mock:input").process(new Processor(){
          public void process(          Exchange ex) throws Exception {
            latch.countDown();
          }
        }
);
      }
    }
);
    MockEndpoint mock=context.getEndpoint("mock:input",MockEndpoint.class);
    mock.expectedMessageCount(ITERS);
    final ProducerTemplate template=context.createProducerTemplate();
    final Endpoint e=context.getEndpoint("direct:a");
    context.start();
    for (int i=0; i < ITERS; i++) {
      template.send(e,new SendingProcessor(i));
    }
    MockEndpoint.assertIsSatisfied(30,TimeUnit.SECONDS);
    latch.await(30,TimeUnit.SECONDS);
    for (int i=0; i < ITERS; i++) {
      Integer number=mock.getReceivedExchanges().get(i).getProperty("iterationNumber",Integer.class);
      assertNotNull(number);
      assertEquals(i,number.intValue());
    }
    context.stop();
  }
}
