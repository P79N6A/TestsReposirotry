public class ZipFileMultipleFilesSplitterTest extends ZipSplitterRouteTest {
  static final String PROCESSED_FILES_HEADER_NAME="processedFiles";
  @Test public void testSplitter() throws InterruptedException {
    MockEndpoint processZipEntry=getMockEndpoint("mock:processZipEntry");
    MockEndpoint splitResult=getMockEndpoint("mock:splitResult");
    processZipEntry.expectedBodiesReceivedInAnyOrder("chau","hi","hola","another_chiau","another_hi");
    splitResult.expectedBodiesReceivedInAnyOrder("chiau.txt","hi.txt","hola.txt","directoryOne/another_chiau.txt","directoryOne/another_hi.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        ZipFileDataFormat zipFile=new ZipFileDataFormat();
        zipFile.setUsingIterator(true);
        from("file:src/test/resources/org/apache/camel/dataformat/zipfile/data/?consumer.delay=1000&noop=true").unmarshal(zipFile).split(body(Iterator.class)).streaming().aggregationStrategy(updateHeader()).convertBodyTo(String.class).to("mock:processZipEntry").end().log("Done processing big file: ${header.CamelFileName}").setBody().header(PROCESSED_FILES_HEADER_NAME).split().body().to("mock:splitResult");
      }
    }
;
  }
  private AggregationStrategy updateHeader(){
    return new AggregationStrategy(){
      @Override public Exchange aggregate(      Exchange oldExchange,      Exchange newExchange){
        if (oldExchange != null) {
          String processedFiles=oldExchange.getIn().getHeader(PROCESSED_FILES_HEADER_NAME,String.class);
          if (processedFiles == null) {
            processedFiles=oldExchange.getIn().getHeader("zipFileName",String.class);
          }
          processedFiles=processedFiles + "," + newExchange.getIn().getHeader("zipFileName",String.class);
          newExchange.getIn().setHeader(PROCESSED_FILES_HEADER_NAME,processedFiles);
        }
        return newExchange;
      }
    }
;
  }
}
