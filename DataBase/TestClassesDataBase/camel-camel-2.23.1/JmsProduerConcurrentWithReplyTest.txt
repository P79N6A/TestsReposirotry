/** 
 * @version 
 */
public class JmsProduerConcurrentWithReplyTest extends CamelTestSupport {
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(200,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").expectsNoDuplicates(body());
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    final List<Future<String>> futures=new ArrayList<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<String> out=executor.submit(new Callable<String>(){
        public String call() throws Exception {
          return template.requestBody("direct:start","Message " + index,String.class);
        }
      }
);
      futures.add(out);
    }
    assertMockEndpointsSatisfied();
    for (int i=0; i < futures.size(); i++) {
      Object out=futures.get(i).get();
      assertEquals("Bye Message " + i,out);
    }
    executor.shutdownNow();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("jms",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("jms:queue:foo");
        from("jms:queue:foo?concurrentConsumers=5").transform(simple("Bye ${in.body}")).to("mock:result");
      }
    }
;
  }
}
