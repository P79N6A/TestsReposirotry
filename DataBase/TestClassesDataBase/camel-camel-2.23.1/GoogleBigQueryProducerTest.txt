public class GoogleBigQueryProducerTest extends BaseBigQueryTest {
  @Test public void sendMessage() throws Exception {
    producer.process(createExchangeWithBody(new HashMap<>()));
    ArgumentCaptor<TableDataInsertAllRequest> dataCaptor=ArgumentCaptor.forClass(TableDataInsertAllRequest.class);
    verify(tabledataMock).insertAll(eq(projectId),eq(datasetId),eq(tableId),dataCaptor.capture());
    List<TableDataInsertAllRequest> requests=dataCaptor.getAllValues();
    assertEquals(1,requests.size());
    assertEquals(1,requests.get(0).getRows().size());
    assertNull(requests.get(0).getRows().get(0).getInsertId());
  }
  @Test public void sendMessageWithTableId() throws Exception {
    Exchange exchange=createExchangeWithBody(new HashMap<>());
    exchange.getIn().setHeader(GoogleBigQueryConstants.TABLE_ID,"exchange_table_id");
    producer.process(exchange);
    ArgumentCaptor<TableDataInsertAllRequest> dataCaptor=ArgumentCaptor.forClass(TableDataInsertAllRequest.class);
    verify(tabledataMock).insertAll(eq(projectId),eq(datasetId),eq("exchange_table_id"),dataCaptor.capture());
    List<TableDataInsertAllRequest> requests=dataCaptor.getAllValues();
    assertEquals(1,requests.size());
    assertEquals(1,requests.get(0).getRows().size());
    assertNull(requests.get(0).getRows().get(0).getInsertId());
  }
  @Test public void useAsInsertIdConfig() throws Exception {
    configuration.setUseAsInsertId("row1");
    Map<String,String> object=new HashMap<>();
    object.put("row1","value1");
    producer.process(createExchangeWithBody(object));
    ArgumentCaptor<TableDataInsertAllRequest> dataCaptor=ArgumentCaptor.forClass(TableDataInsertAllRequest.class);
    verify(tabledataMock).insertAll(eq(projectId),eq(datasetId),eq(tableId),dataCaptor.capture());
    List<TableDataInsertAllRequest> requests=dataCaptor.getAllValues();
    assertEquals(1,requests.size());
    assertEquals(1,requests.get(0).getRows().size());
    assertEquals("value1",requests.get(0).getRows().get(0).getInsertId());
  }
  @Test public void listOfMessages() throws Exception {
    List<Map<String,String>> messages=new ArrayList<>();
    messages.add(new HashMap<>());
    messages.add(new HashMap<>());
    producer.process(createExchangeWithBody(messages));
    ArgumentCaptor<TableDataInsertAllRequest> dataCaptor=ArgumentCaptor.forClass(TableDataInsertAllRequest.class);
    verify(tabledataMock).insertAll(eq(projectId),eq(datasetId),eq(tableId),dataCaptor.capture());
    List<TableDataInsertAllRequest> requests=dataCaptor.getAllValues();
    assertEquals(1,requests.size());
    assertEquals(2,requests.get(0).getRows().size());
  }
}
