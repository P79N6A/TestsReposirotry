public class StompConsumerTest extends StompBaseTest {
  @Test public void testConsume() throws Exception {
    if (!canTest()) {
      return;
    }
    context.addRoutes(createRouteBuilder());
    context.start();
    Stomp stomp=createStompClient();
    final BlockingConnection producerConnection=stomp.connectBlocking();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(numberOfMessages);
    for (int i=0; i < numberOfMessages; i++) {
      StompFrame frame=new StompFrame(SEND);
      frame.addHeader(DESTINATION,StompFrame.encodeHeader("test"));
      frame.addHeader(MESSAGE_ID,StompFrame.encodeHeader("msg:" + i));
      frame.content(utf8("Important Message " + i));
      producerConnection.send(frame);
    }
    mock.await(5,TimeUnit.SECONDS);
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("stomp:test").transform(body().convertToString()).to("mock:result");
      }
    }
;
  }
}
