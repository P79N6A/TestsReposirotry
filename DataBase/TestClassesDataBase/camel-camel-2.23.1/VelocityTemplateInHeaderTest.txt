/** 
 * @version 
 */
public class VelocityTemplateInHeaderTest extends CamelTestSupport {
  @Test public void testReceivesFooResponse() throws Exception {
    assertRespondsWith("cheese","foo","<hello>foo</hello>");
  }
  @Test public void testReceivesBarResponse() throws Exception {
    assertRespondsWith("cheese","bar","<hello>bar</hello>");
  }
  @Test public void testRespectHeaderNamesUpperCase() throws Exception {
    assertRespondsWith("Cheese","bar","<hello>bar</hello>");
  }
  @Test public void testRespectHeaderNamesCamelCase() throws Exception {
    assertRespondsWith("CorrelationID","bar","<hello>bar</hello>");
  }
  protected void assertRespondsWith(  final String headerName,  final String headerValue,  String expectedBody) throws InvalidPayloadException {
    Exchange response=template.request("direct:a",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        Message in=exchange.getIn();
        in.setHeader(VelocityConstants.VELOCITY_TEMPLATE,"<hello>${headers." + headerName + "}</hello>");
        in.setHeader(headerName,headerValue);
      }
    }
);
    assertOutMessageBodyEquals(response,expectedBody);
    Object template=response.getOut().getHeader(VelocityConstants.VELOCITY_TEMPLATE);
    assertNull("Template header should have been removed",template);
    Set<Entry<String,Object>> entrySet=response.getOut().getHeaders().entrySet();
    boolean keyFound=false;
    for (    Entry<String,Object> entry : entrySet) {
      if (entry.getKey().equals(headerName)) {
        keyFound=true;
      }
    }
    assertTrue("Header should been found",keyFound);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").to("velocity://dummy");
      }
    }
;
  }
}
