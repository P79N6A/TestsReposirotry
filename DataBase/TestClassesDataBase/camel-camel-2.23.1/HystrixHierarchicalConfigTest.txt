public class HystrixHierarchicalConfigTest {
  @Test public void testRegistryConfiguration() throws Exception {
    final SimpleRegistry registry=new SimpleRegistry();
    final CamelContext context=new DefaultCamelContext(registry);
    HystrixConfigurationDefinition def=new HystrixConfigurationDefinition();
    def.setGroupKey("global-group-key");
    def.setThreadPoolKey("global-thread-key");
    def.setCorePoolSize(10);
    HystrixConfigurationDefinition ref=new HystrixConfigurationDefinition();
    ref.setGroupKey("ref-group-key");
    ref.setCorePoolSize(5);
    registry.put(HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID,def);
    registry.put("ref-hystrix",ref);
    final HystrixProcessorFactory factory=new HystrixProcessorFactory();
    final HystrixConfigurationDefinition config=factory.buildHystrixConfiguration(context,new HystrixDefinition().hystrixConfiguration("ref-hystrix").hystrixConfiguration().groupKey("local-conf-group-key").requestLogEnabled(false).end());
    Assert.assertEquals("local-conf-group-key",config.getGroupKey());
    Assert.assertEquals("global-thread-key",config.getThreadPoolKey());
    Assert.assertEquals(new Integer(5),config.getCorePoolSize());
  }
  @Test public void testContextConfiguration() throws Exception {
    final CamelContext context=new DefaultCamelContext();
    HystrixConfigurationDefinition def=new HystrixConfigurationDefinition();
    def.setGroupKey("global-group-key");
    def.setThreadPoolKey("global-thread-key");
    def.setCorePoolSize(10);
    HystrixConfigurationDefinition ref=new HystrixConfigurationDefinition();
    ref.setGroupKey("ref-group-key");
    ref.setCorePoolSize(5);
    context.setHystrixConfiguration(def);
    context.addHystrixConfiguration("ref-hystrix",ref);
    final HystrixProcessorFactory factory=new HystrixProcessorFactory();
    final HystrixConfigurationDefinition config=factory.buildHystrixConfiguration(context,new HystrixDefinition().hystrixConfiguration("ref-hystrix").hystrixConfiguration().groupKey("local-conf-group-key").requestLogEnabled(false).end());
    Assert.assertEquals("local-conf-group-key",config.getGroupKey());
    Assert.assertEquals("global-thread-key",config.getThreadPoolKey());
    Assert.assertEquals(new Integer(5),config.getCorePoolSize());
  }
  @Test public void testMixedConfiguration() throws Exception {
    final SimpleRegistry registry=new SimpleRegistry();
    final CamelContext context=new DefaultCamelContext(registry);
    HystrixConfigurationDefinition def=new HystrixConfigurationDefinition();
    def.setGroupKey("global-group-key");
    def.setThreadPoolKey("global-thread-key");
    def.setCorePoolSize(10);
    HystrixConfigurationDefinition ref=new HystrixConfigurationDefinition();
    ref.setGroupKey("ref-group-key");
    ref.setCorePoolSize(5);
    HystrixConfigurationDefinition defReg=new HystrixConfigurationDefinition();
    defReg.setGroupKey("global-reg-group-key");
    defReg.setThreadPoolKey("global-reg-thread-key");
    defReg.setCorePoolSize(20);
    context.setHystrixConfiguration(def);
    registry.put(HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID,defReg);
    registry.put("ref-hystrix",ref);
    final HystrixProcessorFactory factory=new HystrixProcessorFactory();
    final HystrixConfigurationDefinition config=factory.buildHystrixConfiguration(context,new HystrixDefinition().hystrixConfiguration("ref-hystrix").hystrixConfiguration().groupKey("local-conf-group-key").requestLogEnabled(false).end());
    Assert.assertEquals("local-conf-group-key",config.getGroupKey());
    Assert.assertEquals("global-thread-key",config.getThreadPoolKey());
    Assert.assertEquals(new Integer(5),config.getCorePoolSize());
  }
}
