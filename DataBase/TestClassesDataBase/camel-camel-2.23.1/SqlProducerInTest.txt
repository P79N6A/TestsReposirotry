public class SqlProducerInTest extends CamelTestSupport {
  EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testQueryInArray() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    template.requestBodyAndHeader("direct:query","Hi there!","names",new String[]{"Camel","AMQ"});
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(2,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    row=(Map)list.get(1);
    assertEquals("AMQ",row.get("PROJECT"));
  }
  @Test public void testQueryInList() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    List<String> names=new ArrayList<>();
    names.add("Camel");
    names.add("AMQ");
    template.requestBodyAndHeader("direct:query","Hi there!","names",names);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(2,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    row=(Map)list.get(1);
    assertEquals("AMQ",row.get("PROJECT"));
  }
  @Test public void testQueryInString() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    template.requestBodyAndHeader("direct:query","Hi there!","names","Camel,AMQ");
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(2,list.size());
    Map row=(Map)list.get(0);
    assertEquals("Camel",row.get("PROJECT"));
    row=(Map)list.get(1);
    assertEquals("AMQ",row.get("PROJECT"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:query").to("sql:classpath:sql/selectProjectsIn.sql").to("log:query").to("mock:query");
      }
    }
;
  }
}
