public class KubernetesServiceAccountsProducerTest extends KubernetesTestSupport {
  @Rule public KubernetesServer server=new KubernetesServer();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("kubernetesClient",server.getClient());
    return registry;
  }
  @Test public void listTest() throws Exception {
    server.expect().withPath("/api/v1/serviceaccounts").andReturn(200,new ServiceAccountListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    List<ServiceAccount> result=template.requestBody("direct:list","",List.class);
    assertEquals(3,result.size());
  }
  @Test public void listByLabelsTest() throws Exception {
    server.expect().withPath("/api/v1/serviceaccounts?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200,new ServiceAccountListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    Exchange ex=template.request("direct:listByLabels",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Map<String,String> labels=new HashMap<>();
        labels.put("key1","value1");
        labels.put("key2","value2");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_ACCOUNTS_LABELS,labels);
      }
    }
);
    List<ServiceAccount> result=ex.getOut().getBody(List.class);
    assertEquals(3,result.size());
  }
  @Test public void createAndDeleteServiceAccount() throws Exception {
    ServiceAccount pod1=new ServiceAccountBuilder().withNewMetadata().withName("sa1").withNamespace("test").and().build();
    server.expect().withPath("/api/v1/namespaces/test/serviceaccounts/sa1").andReturn(200,pod1).once();
    Exchange ex=template.request("direct:delete",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_ACCOUNT_NAME,"sa1");
      }
    }
);
    boolean secDeleted=ex.getOut().getBody(Boolean.class);
    assertTrue(secDeleted);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").to("kubernetes-service-accounts:///?kubernetesClient=#kubernetesClient&operation=listServiceAccounts");
        from("direct:listByLabels").to("kubernetes-service-accounts:///?kubernetesClient=#kubernetesClient&operation=listServiceAccountsByLabels");
        from("direct:delete").to("kubernetes-service-accounts:///?kubernetesClient=#kubernetesClient&operation=deleteServiceAccount");
      }
    }
;
  }
}
