public class RssEntrySortTest extends CamelTestSupport {
  @Test public void testSortedEntries() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:sorted");
    mock.expectsAscending(ExpressionBuilder.beanExpression("myBean","getPubDate"));
    mock.expectedMessageCount(10);
    mock.setResultWaitTime(15000L);
    mock.assertIsSatisfied();
  }
  @Test public void testUnSortedEntries() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unsorted");
    mock.expectsAscending(ExpressionBuilder.beanExpression("myBean","getPubDate"));
    mock.expectedMessageCount(10);
    mock.setResultWaitTime(2000L);
    mock.assertIsNotSatisfied(2000L);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext jndi=new JndiContext();
    jndi.bind("myBean",new MyBean());
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("rss:file:src/test/data/rss20.xml?splitEntries=true&sortEntries=true&consumer.delay=50").to("mock:sorted");
        from("rss:file:src/test/data/rss20.xml?splitEntries=true&sortEntries=false&consumer.delay=50").to("mock:unsorted");
      }
    }
;
  }
public static class MyBean {
    public Date getPubDate(    @Body Object body){
      SyndFeed feed=(SyndFeed)body;
      SyndEntry syndEntry=(SyndEntry)feed.getEntries().get(0);
      Date date=syndEntry.getUpdatedDate();
      if (date == null) {
        date=syndEntry.getPublishedDate();
      }
      return date;
    }
  }
}
