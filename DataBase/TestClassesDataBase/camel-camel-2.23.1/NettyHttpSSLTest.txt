public class NettyHttpSSLTest extends BaseNettyTest {
  private static final String NULL_VALUE_MARKER=CamelTestSupport.class.getCanonicalName();
  protected Properties originalValues=new Properties();
  @Override @Before public void setUp() throws Exception {
    URL trustStoreUrl=this.getClass().getClassLoader().getResource("jsse/localhost.ks");
    setSystemProp("javax.net.ssl.trustStore",trustStoreUrl.toURI().getPath());
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    restoreSystemProperties();
    super.tearDown();
  }
  protected void setSystemProp(  String key,  String value){
    String originalValue=System.setProperty(key,value);
    originalValues.put(key,originalValue != null ? originalValue : NULL_VALUE_MARKER);
  }
  protected void restoreSystemProperties(){
    for (    Object key : originalValues.keySet()) {
      Object value=originalValues.get(key);
      if (NULL_VALUE_MARKER.equals(value)) {
        System.clearProperty((String)key);
      }
 else {
        System.setProperty((String)key,(String)value);
      }
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testSSLInOutWithNettyConsumer() throws Exception {
    if (isJavaVendor("ibm")) {
      return;
    }
    getMockEndpoint("mock:input").expectedBodiesReceived("Hello World");
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from("netty4-http:https://localhost:{{port}}?ssl=true&passphrase=changeit&keyStoreResource=jsse/localhost.ks&trustStoreResource=jsse/localhost.ks").to("mock:input").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            SSLSession session=exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION,SSLSession.class);
            if (session != null) {
              exchange.getOut().setBody("Bye World");
            }
 else {
              exchange.getOut().setBody("Cannot start conversion without SSLSession");
            }
          }
        }
);
      }
    }
);
    context.start();
    String out=template.requestBody("https://localhost:{{port}}","Hello World",String.class);
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
}
