public class RoasterSimpleRouteBuilderConfigureTest {
  private static final Logger LOG=LoggerFactory.getLogger(RoasterSimpleRouteBuilderConfigureTest.class);
  @Test public void parse() throws Exception {
    JavaClassSource clazz=(JavaClassSource)Roaster.parse(new File("src/test/java/org/apache/camel/parser/java/MySimpleRouteBuilder.java"));
    MethodSource<JavaClassSource> method=clazz.getMethod("configure");
    List<ParserResult> list=CamelJavaParserHelper.parseCamelSimpleExpressions(method);
    for (    ParserResult simple : list) {
      LOG.info("Simple: " + simple.getElement());
      LOG.info("  Line: " + findLineNumber(simple.getPosition()));
    }
    Assert.assertEquals("${body} > 100",list.get(0).getElement());
    Assert.assertEquals(true,list.get(0).getPredicate());
    Assert.assertEquals(27,findLineNumber(list.get(0).getPosition()));
    Assert.assertEquals("${body} > 200",list.get(1).getElement());
    Assert.assertEquals(true,list.get(1).getPredicate());
    Assert.assertEquals(30,findLineNumber(list.get(1).getPosition()));
  }
  public static int findLineNumber(  int pos) throws Exception {
    int lines=0;
    int current=0;
    File file=new File("src/test/java/org/apache/camel/parser/java/MySimpleRouteBuilder.java");
    try (BufferedReader br=new BufferedReader(new FileReader(file))){
      String line;
      while ((line=br.readLine()) != null) {
        lines++;
        current+=line.length();
        if (current > pos) {
          return lines;
        }
      }
    }
     return -1;
  }
}
