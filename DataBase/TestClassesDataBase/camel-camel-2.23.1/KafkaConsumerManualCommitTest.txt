@Ignore public class KafkaConsumerManualCommitTest extends BaseEmbeddedKafkaTest {
  public static final String TOPIC="test";
  @EndpointInject(uri="kafka:" + TOPIC + "?groupId=group1&sessionTimeoutMs=30000&autoCommitEnable=false&allowManualCommit=true&interceptorClasses=org.apache.camel.component.kafka.MockConsumerInterceptor") private Endpoint from;
  @EndpointInject(uri="mock:result") private MockEndpoint to;
  private org.apache.kafka.clients.producer.KafkaProducer<String,String> producer;
  @Before public void before(){
    Properties props=getDefaultProperties();
    producer=new org.apache.kafka.clients.producer.KafkaProducer<>(props);
  }
  @After public void after(){
    if (producer != null) {
      producer.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(from).routeId("foo").to(to).process(e -> {
          KafkaManualCommit manual=e.getIn().getHeader(KafkaConstants.MANUAL_COMMIT,KafkaManualCommit.class);
          assertNotNull(manual);
          manual.commitSync();
        }
);
      }
    }
;
  }
  @Test public void kafkaManualCommit() throws InterruptedException, IOException {
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder("message-0","message-1","message-2","message-3","message-4");
    to.allMessages().header(KafkaConstants.LAST_RECORD_BEFORE_COMMIT).isNotNull();
    for (int k=0; k < 5; k++) {
      String msg="message-" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      producer.send(data);
    }
    to.assertIsSatisfied(3000);
    assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count());
  }
}
