/** 
 * Tests that a file move can occur on the server even if the remote stream was only partially read.
 * @version 
 */
public class SftpSimpleConsumeStreamingPartialReadTest extends SftpServerTestSupport {
  @Test public void testSftpSimpleConsume() throws Exception {
    if (!canTest()) {
      return;
    }
    String expected="Hello World";
    template.sendBodyAndHeader("file://" + FTP_ROOT_DIR,expected,Exchange.FILE_NAME,"hello.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedHeaderReceived(Exchange.FILE_NAME,"hello.txt");
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    GenericFile<?> remoteFile1=(GenericFile<?>)mock.getExchanges().get(0).getIn().getBody();
    assertTrue(remoteFile1.getBody() instanceof InputStream);
    Thread.sleep(2000);
    File resultFile=new File(FTP_ROOT_DIR + File.separator + "failed","hello.txt");
    assertTrue(resultFile.exists());
    assertFalse(resultFile.isDirectory());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sftp://localhost:" + getPort() + "/"+ FTP_ROOT_DIR+ "?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true"+ "&move=done&moveFailed=failed").routeId("foo").noAutoStartup().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.getIn().getBody(InputStream.class).read();
          }
        }
).to("mock:result").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            throw new Exception("INTENTIONAL ERROR");
          }
        }
);
      }
    }
;
  }
}
