public class StubConsumerTest extends ContextTestSupport {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:InOnly").setExchangePattern(ExchangePattern.InOnly).to("stub:foo").to("mock:result");
        from("direct:InOut").setExchangePattern(ExchangePattern.InOut).to("stub:foo").to("mock:result");
        from("stub:foo").transform().constant("Bye World");
      }
    }
;
  }
  final void test(  ExchangePattern mep) throws InterruptedException {
    if (mep == ExchangePattern.InOut) {
      getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    }
 else {
      getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    }
    getMockEndpoint("mock:result").setExpectedMessageCount(1);
    template.sendBody("direct:" + mep.name(),"Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOnly() throws InterruptedException {
    test(ExchangePattern.InOnly);
  }
  @Test public void testInOut() throws InterruptedException {
    test(ExchangePattern.InOut);
  }
}
