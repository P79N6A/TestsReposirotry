/** 
 * Unit test for intercepting sending to endpoint with dynamic endpoints and uri matching
 * @version 
 */
public class InterceptSendToEndpointDynamicTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/foo");
    deleteDirectory("target/bar");
    deleteDirectory("target/cheese");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testSendToWildcard() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour");
        from("direct:first").to("file://foo").to("file://bar").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedMessageCount(2);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:first","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendToWildcardHeaderUri() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour");
        from("direct:first").to("file://foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedMessageCount(1);
    getMockEndpoint("mock:detour").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT,"file://foo");
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:first","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendToRegex() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("file://target/(foo|bar)").skipSendToOriginalEndpoint().to("mock:detour");
        from("direct:first").to("file://target/foo").to("file://target/bar").to("file://target/cheese").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedMessageCount(2);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedFileExists("target/cheese/cheese.txt");
    template.sendBodyAndHeader("direct:first","Hello World",Exchange.FILE_NAME,"cheese.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendToDynamicEndpoint() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("file:*").to("mock:detour");
        from("direct:first").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            template.sendBodyAndHeader("file://target/foo","Hello Foo",Exchange.FILE_NAME,"foo.txt");
          }
        }
).to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedBodiesReceived("Hello Foo");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedFileExists("target/foo/foo.txt");
    template.sendBody("direct:first","Hello World");
    assertMockEndpointsSatisfied();
  }
}
