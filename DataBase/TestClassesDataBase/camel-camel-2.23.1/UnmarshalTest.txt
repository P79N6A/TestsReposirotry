public class UnmarshalTest {
  private static final String PAYLOAD="<m:buyStocks xmlns:m=\"http://services.samples/xsd\"><order><symbol>IBM</symbol><buyerID>cmueller</buyerID><price>140.34</price><volume>2000</volume>" + "</order></m:buyStocks>";
  private XmlBeansDataFormat dataFormat;
  private Exchange exchange;
  @Before public void setUp(){
    this.dataFormat=new XmlBeansDataFormat();
    this.exchange=new DefaultExchange(new DefaultCamelContext());
  }
  @Test public void unmarshal() throws Exception {
    Object result=dataFormat.unmarshal(exchange,new ByteArrayInputStream(PAYLOAD.getBytes()));
    assertBuyStocks(result);
  }
  @Test public void unmarshalConcurrent() throws Exception {
    ExecutorService executor=Executors.newFixedThreadPool(10);
    final CountDownLatch latch=new CountDownLatch(100);
    for (int i=0; i < 100; i++) {
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          Object result=dataFormat.unmarshal(exchange,new ByteArrayInputStream(PAYLOAD.getBytes()));
          assertBuyStocks(result);
          latch.countDown();
          return null;
        }
      }
);
    }
    assertTrue(latch.await(10,TimeUnit.SECONDS));
  }
  private void assertBuyStocks(  Object result){
    BuyStocks buyStocks=((BuyStocksDocument)result).getBuyStocks();
    assertEquals(1,buyStocks.getOrderArray().length);
    assertEquals("IBM",buyStocks.getOrderArray(0).getSymbol());
    assertEquals("cmueller",buyStocks.getOrderArray(0).getBuyerID());
    assertEquals(140.34,buyStocks.getOrderArray(0).getPrice(),0);
    assertEquals(2000,buyStocks.getOrderArray(0).getVolume());
  }
}
