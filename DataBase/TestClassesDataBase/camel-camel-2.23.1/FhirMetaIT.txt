/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirMeta} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirMetaIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirMetaIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirMetaApiMethod.class).getName();
  @Test public void testAdd() throws Exception {
    Meta meta=fhirClient.meta().get(Meta.class).fromResource(this.patient.getIdElement()).execute();
    assertEquals(0,meta.getTag().size());
    Meta inMeta=new Meta();
    inMeta.addTag().setSystem("urn:system1").setCode("urn:code1");
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.meta",inMeta);
    headers.put("CamelFhir.id",this.patient.getIdElement());
    IBaseMetaType result=requestBodyAndHeaders("direct://ADD",null,headers);
    LOG.debug("add: " + result);
    assertNotNull("add result",result);
    assertEquals(1,result.getTag().size());
  }
  @Test public void testDelete() throws Exception {
    Meta meta=fhirClient.meta().get(Meta.class).fromResource(this.patient.getIdElement()).execute();
    assertEquals(0,meta.getTag().size());
    Meta inMeta=new Meta();
    inMeta.addTag().setSystem("urn:system1").setCode("urn:code1");
    meta=fhirClient.meta().add().onResource(this.patient.getIdElement()).meta(inMeta).execute();
    assertEquals(1,meta.getTag().size());
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.meta",meta);
    headers.put("CamelFhir.id",this.patient.getIdElement());
    IBaseMetaType result=requestBodyAndHeaders("direct://DELETE",null,headers);
    LOG.debug("delete: " + result);
    assertNotNull("delete result",result);
    assertEquals(0,result.getTag().size());
  }
  @Test public void testGetFromResource() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.metaType",Meta.class);
    headers.put("CamelFhir.id",this.patient.getIdElement());
    IBaseMetaType result=requestBodyAndHeaders("direct://GET_FROM_RESOURCE",null,headers);
    LOG.debug("getFromResource: " + result);
    assertNotNull("getFromResource result",result);
    assertEquals(0,result.getTag().size());
  }
  @Test public void testGetFromServer() throws Exception {
    IBaseMetaType result=requestBody("direct://GET_FROM_SERVER",Meta.class);
    assertNotNull("getFromServer result",result);
    LOG.debug("getFromServer: " + result);
  }
  @Test public void testGetFromType() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.metaType",Meta.class);
    headers.put("CamelFhir.theResourceName","Patient");
    IBaseMetaType result=requestBodyAndHeaders("direct://GET_FROM_TYPE",null,headers);
    LOG.debug("getFromType: " + result);
    assertNotNull("getFromType result",result);
  }
  @Test public void testGetFromTypePreferResponseType() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.metaType",Meta.class);
    headers.put("CamelFhir.theResourceName","Patient");
    headers.put(ExtraParameters.PREFER_RESPONSE_TYPE.getHeaderName(),Patient.class);
    Meta result=requestBodyAndHeaders("direct://GET_FROM_TYPE",null,headers);
    LOG.debug("getFromType: " + result);
    assertNotNull("getFromType result",result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADD").to("fhir://" + PATH_PREFIX + "/add");
        from("direct://DELETE").to("fhir://" + PATH_PREFIX + "/delete");
        from("direct://GET_FROM_RESOURCE").to("fhir://" + PATH_PREFIX + "/getFromResource");
        from("direct://GET_FROM_SERVER").to("fhir://" + PATH_PREFIX + "/getFromServer?inBody=metaType");
        from("direct://GET_FROM_TYPE").to("fhir://" + PATH_PREFIX + "/getFromType");
      }
    }
;
  }
}
