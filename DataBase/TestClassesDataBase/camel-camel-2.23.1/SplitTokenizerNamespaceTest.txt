public class SplitTokenizerNamespaceTest extends ContextTestSupport {
  @Test public void testSplitTokenizerWithImplicitNamespaces() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Claus</ns1:person>","<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">James</ns1:person>","<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Willem</ns1:person>","<ns2:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Rich</ns2:person>");
    template.sendBody("direct:noPrefix",getXmlBody());
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitTokenizerWithExplicitNamespaces() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceived("<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Claus</ns1:person>","<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">James</ns1:person>","<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Willem</ns1:person>");
    template.sendBody("direct:explicitPrefix",getXmlBody());
    assertMockEndpointsSatisfied();
  }
  protected String getXmlBody(){
    StringBuilder sb=new StringBuilder("<?xml version=\"1.0\"?>\n");
    sb.append("<ns1:persons xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">\n");
    sb.append("  <ns1:person>Claus</ns1:person>\n");
    sb.append("  <ns1:person>James</ns1:person>\n");
    sb.append("  <ns1:person>Willem</ns1:person>\n");
    sb.append("  <ns2:person>Rich</ns2:person>\n");
    sb.append("</ns1:persons>");
    return sb.toString();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:noPrefix").split().tokenizeXML("person","persons").to("mock:split");
        from("direct:explicitPrefix").split().tokenizeXML("ns1:person","ns1:persons").to("mock:split");
      }
    }
;
  }
}
