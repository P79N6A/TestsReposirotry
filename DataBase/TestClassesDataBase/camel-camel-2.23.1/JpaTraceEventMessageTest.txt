/** 
 * @version 
 */
public class JpaTraceEventMessageTest extends CamelTestSupport {
  protected static final String SELECT_ALL_STRING="select x from " + JpaTraceEventMessage.class.getName() + " x";
  protected ApplicationContext applicationContext;
  protected TransactionTemplate transactionTemplate;
  protected EntityManager entityManager;
  @Before public void setUp() throws Exception {
    super.setUp();
    EntityManagerFactory entityManagerFactory=applicationContext.getBean("entityManagerFactory",EntityManagerFactory.class);
    transactionTemplate=applicationContext.getBean("transactionTemplate",TransactionTemplate.class);
    entityManager=entityManagerFactory.createEntityManager();
    cleanupRepository();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    entityManager.close();
  }
  @Test public void testSendTraceMessage() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEntityInDB();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/processor/interceptor/springJpaTraveEvent.xml");
    return SpringCamelContext.springCamelContext(applicationContext);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new SpringRouteBuilder(){
      public void configure(){
        Tracer tracer=new Tracer();
        tracer.setDestinationUri("jpa://" + JpaTraceEventMessage.class.getName() + "?persistenceUnit=trace");
        tracer.setUseJpa(true);
        getContext().addInterceptStrategy(tracer);
        from("direct:start").routeId("foo").to("mock:result");
      }
    }
;
  }
  private void assertEntityInDB() throws Exception {
    List<?> list=entityManager.createQuery(SELECT_ALL_STRING).getResultList();
    assertEquals(1,list.size());
    JpaTraceEventMessage db=(JpaTraceEventMessage)list.get(0);
    assertNotNull(db.getId());
    assertEquals("direct://start",db.getFromEndpointUri());
    assertEquals("mock://result",db.getToNode());
    assertEquals("foo",db.getRouteId());
  }
  protected void cleanupRepository(){
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus arg0){
        entityManager.joinTransaction();
        List<?> list=entityManager.createQuery(SELECT_ALL_STRING).getResultList();
        for (        Object item : list) {
          entityManager.remove(item);
        }
        entityManager.flush();
        return Boolean.TRUE;
      }
    }
);
  }
}
