public class JsonToXmlAttributesTest extends AbstractJsonTestSupport {
  @Test public void shouldCreateAttribute(){
    InputStream inStream=getClass().getResourceAsStream("jsonToXmlAttributesMessage.json");
    String in=context.getTypeConverter().convertTo(String.class,inStream);
    String xml=template.requestBody("direct:unmarshal",in,String.class);
    assertTrue(xml.contains(" b=\"2\""));
  }
  @Test public void shouldCreateOnlyOneAttribute(){
    InputStream inStream=getClass().getResourceAsStream("jsonToXmlAttributesMessage.json");
    String in=context.getTypeConverter().convertTo(String.class,inStream);
    String xml=template.requestBody("direct:unmarshal",in,String.class);
    assertFalse(xml.contains("a="));
  }
  @Test public void shouldCreateElementWithAttribute() throws ParserConfigurationException, IOException, SAXException {
    InputStream inStream=getClass().getResourceAsStream("jsonToXmlElementWithAttributeMessage.json");
    String in=context.getTypeConverter().convertTo(String.class,inStream);
    String xml=template.requestBody("direct:unmarshal",in,String.class);
    Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(xml.getBytes()));
    NodeList nodeList=document.getDocumentElement().getElementsByTagName("element");
    assertEquals(1,nodeList.getLength());
    Element element=(Element)nodeList.item(0);
    assertEquals("elementContent",element.getTextContent());
    assertEquals("attributeValue",element.getAttribute("attribute"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:unmarshal").unmarshal().xmljson().to("mock:xml");
      }
    }
;
  }
}
