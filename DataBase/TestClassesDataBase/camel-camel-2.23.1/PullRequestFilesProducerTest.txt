public class PullRequestFilesProducerTest extends GitHubComponentTestBase {
  protected static final Logger LOG=LoggerFactory.getLogger(PullRequestFilesProducerTest.class);
  private int latestPullRequestNumber;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("github",new GitHubComponent());
        from("direct:validPullRequest").process(new MockPullFilesProducerProcessor()).to("github://pullRequestFiles?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo");
      }
    }
;
  }
  @Test public void testPullRequestFilesProducer() throws Exception {
    PullRequest pullRequest=pullRequestService.addPullRequest("testPullRequestFilesProducer");
    latestPullRequestNumber=pullRequest.getNumber();
    CommitFile file=new CommitFile();
    file.setFilename("testfile");
    List<CommitFile> commitFiles=new ArrayList<>();
    commitFiles.add(file);
    pullRequestService.setFiles(latestPullRequestNumber,commitFiles);
    Endpoint filesProducerEndpoint=getMandatoryEndpoint("direct:validPullRequest");
    Exchange exchange=filesProducerEndpoint.createExchange();
    Exchange resp=template.send(filesProducerEndpoint,exchange);
    assertEquals(resp.getOut().getBody(),commitFiles);
  }
public class MockPullFilesProducerProcessor implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Message in=exchange.getIn();
      Map<String,Object> headers=in.getHeaders();
      headers.put(GitHubConstants.GITHUB_PULLREQUEST,latestPullRequestNumber);
    }
  }
}
