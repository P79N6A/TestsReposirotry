public class S3BatchConsumerMaxMessagesPerPollTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mock;
  @Test public void receiveBatch() throws Exception {
    mock.expectedMessageCount(20);
    assertMockEndpointsSatisfied();
    mock.message(0).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(1);
    mock.message(1).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(2);
    mock.message(2).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(3);
    mock.message(3).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(4);
    mock.message(4).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(5);
    mock.message(5).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(6);
    mock.message(6).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(7);
    mock.message(7).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(8);
    mock.message(8).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(9);
    mock.message(9).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(10);
    mock.message(10).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(11);
    mock.message(11).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(12);
    mock.message(12).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(13);
    mock.message(13).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(14);
    mock.message(14).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(15);
    mock.message(15).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(16);
    mock.message(16).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(17);
    mock.message(17).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(18);
    mock.message(18).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(19);
    mock.message(19).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(20);
    mock.message(0).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(1).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(2).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(3).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(4).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(5).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(6).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(7).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(8).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(9).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(10).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(11).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(12).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(13).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(14).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(15).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(16).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(17).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(18).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false);
    mock.message(19).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(true);
    mock.expectedPropertyReceived(Exchange.BATCH_SIZE,20);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    AmazonS3ClientMock clientMock=new AmazonS3ClientMock();
    for (int counter=0; counter < 20; counter++) {
      S3Object s3Object=new S3Object();
      s3Object.setBucketName("mycamelbucket");
      s3Object.setKey("counter-" + counter);
      clientMock.objects.add(s3Object);
    }
    registry.bind("amazonS3Client",clientMock);
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&delay=5000&maxMessagesPerPoll=0").to("mock:result");
      }
    }
;
  }
}
