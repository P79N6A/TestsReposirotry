/** 
 * @version 
 */
public class IdempotentConsumerNoMessageIdTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testNoMessageId() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result");
      }
    }
);
    context.start();
    resultEndpoint.expectedBodiesReceived("one","two");
    getMockEndpoint("mock:dead").expectedBodiesReceived("Hello World");
    sendMessage("1","one");
    template.sendBody("direct:start","Hello World");
    sendMessage("2","two");
    sendMessage("1","one");
    assertMockEndpointsSatisfied();
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
  }
}
