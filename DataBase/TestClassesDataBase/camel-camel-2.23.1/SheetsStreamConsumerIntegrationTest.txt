public class SheetsStreamConsumerIntegrationTest extends AbstractGoogleSheetsStreamTestSupport {
  private String range="A1:B2";
  @Test public void testConsumeValueRange() throws Exception {
    Spreadsheet testSheet=getSpreadsheetWithTestData();
    context().addRoutes(createGoogleStreamRouteBuilder(testSheet.getSpreadsheetId()));
    context().startRoute("google-stream-test");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getReceivedExchanges().get(0);
    Assert.assertTrue(exchange.getIn().getHeaders().containsKey(SPREADSHEET_ID));
    Assert.assertTrue(exchange.getIn().getHeaders().containsKey(RANGE));
    Assert.assertTrue(exchange.getIn().getHeaders().containsKey(MAJOR_DIMENSION));
    Assert.assertEquals(testSheet.getSpreadsheetId(),exchange.getIn().getHeaders().get(SPREADSHEET_ID));
    Assert.assertEquals(TEST_SHEET + "!" + range,exchange.getIn().getHeaders().get(RANGE));
    Assert.assertEquals("ROWS",exchange.getIn().getHeaders().get(MAJOR_DIMENSION));
    ValueRange values=(ValueRange)exchange.getIn().getBody();
    Assert.assertEquals(2L,values.getValues().size());
    Assert.assertEquals("a1",values.getValues().get(0).get(0));
    Assert.assertEquals("b1",values.getValues().get(0).get(1));
    Assert.assertEquals("a2",values.getValues().get(1).get(0));
    Assert.assertEquals("b2",values.getValues().get(1).get(1));
  }
  private RouteBuilder createGoogleStreamRouteBuilder(  String spreadsheetId) throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("google-sheets-stream://data?spreadsheetId=" + spreadsheetId + "&range="+ range+ "&delay=2000&maxResults=5").routeId("google-stream-test").to("mock:result");
      }
    }
;
  }
}
