public class CustomHeadersMapFactoryRouteTest extends ContextTestSupport {
  private HeadersMapFactory custom=new CustomHeadersMapFactory();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.setHeadersMapFactory(custom);
    return context;
  }
  @Test public void testCustomHeaders() throws Exception {
    getMockEndpoint("mock:result").expectedHeaderReceived("foo",123);
    getMockEndpoint("mock:result").expectedHeaderReceived("FOO",456);
    getMockEndpoint("mock:result").expectedHeaderReceived("Bar","yes");
    Map<String,Object> headers=new HashMap<>();
    headers.put("foo",123);
    headers.put("FOO",456);
    headers.put("Bar","yes");
    template.sendBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
    assertSame(custom,context.getHeadersMapFactory());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:result");
      }
    }
;
  }
private static class CustomHeadersMapFactory implements HeadersMapFactory {
    @Override public Map<String,Object> newMap(){
      return new HashMap<>();
    }
    @Override public Map<String,Object> newMap(    Map<String,Object> map){
      return new HashMap<>(map);
    }
    @Override public boolean isInstanceOf(    Map<String,Object> map){
      return map instanceof HashMap;
    }
    @Override public boolean isCaseInsensitive(){
      return false;
    }
  }
}
