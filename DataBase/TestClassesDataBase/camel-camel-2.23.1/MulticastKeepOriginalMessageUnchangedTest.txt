/** 
 * @version 
 */
public class MulticastKeepOriginalMessageUnchangedTest extends ContextTestSupport {
  @Test public void testUnchanged() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").message(0).header("foo").isNull();
    getMockEndpoint("mock:a").message(0).header("bar").isEqualTo("no");
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").message(0).header("foo").isNull();
    getMockEndpoint("mock:result").message(0).header("bar").isEqualTo("no");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Foo was here Hello World");
    getMockEndpoint("mock:foo").expectedHeaderReceived("foo","yes");
    getMockEndpoint("mock:foo").message(0).header("bar").isNull();
    template.sendBody("direct:a","Hello World");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").setHeader("bar",constant("no")).to("mock:a").multicast(AggregationStrategies.useOriginal()).to("direct:foo").end().to("mock:result");
        from("direct:foo").setHeader("foo",constant("yes")).removeHeader("bar").transform().simple("Foo was here ${body}").to("mock:foo");
      }
    }
;
  }
}
