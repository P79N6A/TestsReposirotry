/** 
 * @version 
 */
public class HeaderFilterStrategyComponentTest extends Assert {
private static class MyComponent extends HeaderFilterStrategyComponent {
    MyComponent(    Class<? extends Endpoint> endpointClass){
      super(endpointClass);
    }
    protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return null;
    }
  }
private static class MyEndpoint extends DefaultEndpoint implements HeaderFilterStrategyAware {
    private HeaderFilterStrategy strategy;
    public HeaderFilterStrategy getHeaderFilterStrategy(){
      return strategy;
    }
    public void setHeaderFilterStrategy(    HeaderFilterStrategy strategy){
      this.strategy=strategy;
    }
    public Producer createProducer() throws Exception {
      return null;
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    public boolean isSingleton(){
      return true;
    }
  }
  @Test public void testHeaderFilterStrategyComponent(){
    MyComponent comp=new MyComponent(MyEndpoint.class);
    assertNull(comp.getHeaderFilterStrategy());
    HeaderFilterStrategy strategy=new DefaultHeaderFilterStrategy();
    comp.setHeaderFilterStrategy(strategy);
    assertSame(strategy,comp.getHeaderFilterStrategy());
  }
  @Test public void testHeaderFilterStrategyAware(){
    MyComponent comp=new MyComponent(MyEndpoint.class);
    assertNull(comp.getHeaderFilterStrategy());
    HeaderFilterStrategy strategy=new DefaultHeaderFilterStrategy();
    comp.setHeaderFilterStrategy(strategy);
    MyEndpoint my=new MyEndpoint();
    comp.setEndpointHeaderFilterStrategy(my);
    assertSame(strategy,my.getHeaderFilterStrategy());
    assertSame(strategy,comp.getHeaderFilterStrategy());
  }
}
