/** 
 * @version 
 */
public class MulticastParallelAllTimeoutAwareTest extends ContextTestSupport {
  private volatile Exchange receivedExchange;
  private volatile int receivedIndex;
  private volatile int receivedTotal;
  private volatile long receivedTimeout;
  @Test public void testMulticastParallelAllTimeoutAware() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("AllTimeout");
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
    assertNotNull(receivedExchange);
    assertEquals(2,receivedIndex);
    assertEquals(3,receivedTotal);
    assertEquals(500,receivedTimeout);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(500).to("direct:a","direct:b","direct:c").end().to("mock:result");
        from("direct:a").delay(1000).setBody(constant("A"));
        from("direct:b").delay(2000).setBody(constant("B"));
        from("direct:c").delay(1500).setBody(constant("C"));
      }
    }
;
  }
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
    public void timeout(    Exchange oldExchange,    int index,    int total,    long timeout){
      receivedExchange=oldExchange;
      receivedIndex=index;
      receivedTotal=total;
      receivedTimeout=timeout;
      oldExchange.getIn().setBody("AllTimeout");
    }
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      return oldExchange;
    }
  }
}
