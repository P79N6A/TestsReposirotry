public class RoutingSlipWithExceptionTest extends ContextTestSupport {
  protected static final String ANSWER="answer";
  protected static final String ROUTING_SLIP_HEADER="destinations";
  protected MyBean myBean=new MyBean();
  private MockEndpoint endEndpoint;
  private MockEndpoint exceptionEndpoint;
  private MockEndpoint exceptionSettingEndpoint;
  private MockEndpoint aEndpoint;
  @Test public void testNoException() throws Exception {
    endEndpoint.expectedMessageCount(1);
    exceptionEndpoint.expectedMessageCount(0);
    aEndpoint.expectedMessageCount(1);
    sendRoutingSlipWithNoExceptionThrowingComponent();
    assertEndpointsSatisfied();
  }
  @Test public void testWithExceptionThrowingComponentFirstInList() throws Exception {
    endEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    aEndpoint.expectedMessageCount(0);
    sendRoutingSlipWithExceptionThrowingComponentFirstInList();
    assertEndpointsSatisfied();
  }
  @Test public void testWithExceptionThrowingComponentSecondInList() throws Exception {
    endEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    aEndpoint.expectedMessageCount(1);
    sendRoutingSlipWithExceptionThrowingComponentSecondInList();
    assertEndpointsSatisfied();
  }
  @Test public void testWithExceptionSettingComponentFirstInList() throws Exception {
    endEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    aEndpoint.expectedMessageCount(0);
    sendRoutingSlipWithExceptionSettingComponentFirstInList();
    assertEndpointsSatisfied();
  }
  @Test public void testWithExceptionSettingComponentSecondInList() throws Exception {
    endEndpoint.expectedMessageCount(0);
    exceptionEndpoint.expectedMessageCount(1);
    aEndpoint.expectedMessageCount(1);
    sendRoutingSlipWithExceptionSettingComponentSecondInList();
    assertEndpointsSatisfied();
  }
  private void assertEndpointsSatisfied() throws InterruptedException {
    MockEndpoint.assertIsSatisfied(5,TimeUnit.SECONDS,endEndpoint,exceptionEndpoint,aEndpoint);
  }
  protected void sendRoutingSlipWithExceptionThrowingComponentFirstInList(){
    template.sendBodyAndHeader("direct:start",ANSWER,ROUTING_SLIP_HEADER,"bean:myBean?method=throwException,mock:a");
  }
  protected void sendRoutingSlipWithExceptionThrowingComponentSecondInList(){
    template.sendBodyAndHeader("direct:start",ANSWER,ROUTING_SLIP_HEADER,"mock:a,bean:myBean?method=throwException");
  }
  protected void sendRoutingSlipWithNoExceptionThrowingComponent(){
    template.sendBodyAndHeader("direct:start",ANSWER,ROUTING_SLIP_HEADER,"mock:a");
  }
  protected void sendRoutingSlipWithExceptionSettingComponentFirstInList(){
    template.sendBodyAndHeader("direct:start",ANSWER,ROUTING_SLIP_HEADER,"mock:exceptionSetting,mock:a");
  }
  protected void sendRoutingSlipWithExceptionSettingComponentSecondInList(){
    template.sendBodyAndHeader("direct:start",ANSWER,ROUTING_SLIP_HEADER,"mock:a,mock:exceptionSetting");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    endEndpoint=resolveMandatoryEndpoint("mock:noexception",MockEndpoint.class);
    exceptionEndpoint=resolveMandatoryEndpoint("mock:exception",MockEndpoint.class);
    exceptionSettingEndpoint=resolveMandatoryEndpoint("mock:exceptionSetting",MockEndpoint.class);
    aEndpoint=resolveMandatoryEndpoint("mock:a",MockEndpoint.class);
    exceptionSettingEndpoint.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setException(new Exception("Throw me!"));
      }
    }
);
    Object lookedUpBean=context.getRegistry().lookupByName("myBean");
    assertSame("Lookup of 'myBean' should return same object!",myBean,lookedUpBean);
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @SuppressWarnings("deprecation") public void configure(){
        from("direct:start").doTry().routingSlip(ROUTING_SLIP_HEADER).to("mock:noexception").doCatch(Exception.class).to("mock:exception");
      }
    }
;
  }
public static class MyBean {
    public MyBean(){
    }
    public void throwException() throws Exception {
      throw new Exception("Throw me!");
    }
  }
}
