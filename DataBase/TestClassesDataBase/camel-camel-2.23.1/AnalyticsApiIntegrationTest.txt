/** 
 * Integration test for Salesforce analytics API endpoints. 
 */
@RunWith(Theories.class) public class AnalyticsApiIntegrationTest extends AbstractSalesforceTestBase {
  private static final Logger LOG=LoggerFactory.getLogger(AnalyticsApiIntegrationTest.class);
  private static final int RETRY_DELAY=5000;
  private static final int REPORT_RESULT_RETRIES=5;
  private static final String[] REPORT_OPTIONS=new String[]{SalesforceReportResultsToListConverter.INCLUDE_HEADERS,SalesforceReportResultsToListConverter.INCLUDE_DETAILS,SalesforceReportResultsToListConverter.INCLUDE_SUMMARY};
  private static final int NUM_OPTIONS=REPORT_OPTIONS.length;
  private static final int[] POWERS=new int[]{4,2,1};
  private static final String TEST_REPORT_NAME="Test_Report";
  private boolean bodyMetadata;
  /** 
 * Get test report developer names as data points.
 * @return test report developer names in test-salesforce-login.properties
 * @throws Exception
 */
  @DataPoints public static String[] getTestReportDeveloperNames() throws Exception {
    return new String[]{TEST_REPORT_NAME};
  }
  @Test public void testGetRecentReports() throws Exception {
    final List recentReports=template().requestBody("direct:getRecentReports",null,List.class);
    assertNotNull("getRecentReports",recentReports);
    assertFalse("getRecentReports empty",recentReports.isEmpty());
    LOG.debug("getRecentReports: {}",recentReports);
  }
  @Theory public void testReport(  String reportName) throws Exception {
    log.info("Testing report {}...",reportName);
    final QueryRecordsReport reports=template().requestBody("direct:queryReport","SELECT Id FROM Report WHERE DeveloperName='" + reportName + "'",QueryRecordsReport.class);
    assertNotNull("query",reports);
    final List<Report> reportsRecords=reports.getRecords();
    assertFalse("Report not found",reportsRecords.isEmpty());
    final String testReportId=reportsRecords.get(0).getId();
    assertNotNull(testReportId);
    final ReportDescription reportDescription=template().requestBody("direct:getReportDescription",testReportId,ReportDescription.class);
    assertNotNull("getReportDescriptions",reportDescription);
    LOG.debug("getReportDescriptions: {}",reportDescription);
    final ReportMetadata testReportMetadata=reportDescription.getReportMetadata();
    SyncReportResults reportResults=template().requestBodyAndHeader("direct:executeSyncReport",testReportId,SalesforceEndpointConfig.INCLUDE_DETAILS,Boolean.TRUE,SyncReportResults.class);
    assertNotNull("executeSyncReport",reportResults);
    LOG.debug("executeSyncReport: {}",reportResults);
    final Map<String,Object> headers=new HashMap<>();
    headers.put(SalesforceEndpointConfig.INCLUDE_DETAILS,Boolean.FALSE);
    Object body;
    if (!bodyMetadata) {
      headers.put(SalesforceEndpointConfig.REPORT_METADATA,testReportMetadata);
      body=testReportId;
    }
 else {
      body=testReportMetadata;
    }
    reportResults=template().requestBodyAndHeaders("direct:executeSyncReport",body,headers,SyncReportResults.class);
    assertNotNull("executeSyncReport with metadata",reportResults);
    LOG.debug("executeSyncReport with metadata: {}",reportResults);
    ReportInstance reportInstance=template().requestBodyAndHeader("direct:executeAsyncReport",testReportId,SalesforceEndpointConfig.INCLUDE_DETAILS,true,ReportInstance.class);
    assertNotNull("executeAsyncReport",reportInstance);
    LOG.debug("executeAsyncReport: {}",reportInstance);
    headers.clear();
    headers.put(SalesforceEndpointConfig.INCLUDE_DETAILS,"true");
    if (!bodyMetadata) {
      headers.put(SalesforceEndpointConfig.REPORT_METADATA,testReportMetadata);
      body=testReportId;
      bodyMetadata=true;
    }
 else {
      body=testReportMetadata;
      bodyMetadata=false;
    }
    reportInstance=template().requestBodyAndHeaders("direct:executeAsyncReport",body,headers,ReportInstance.class);
    assertNotNull("executeAsyncReport with metadata",reportInstance);
    LOG.debug("executeAsyncReport with metadata: {}",reportInstance);
    final String testReportInstanceId=reportInstance.getId();
    final List reportInstances=template().requestBody("direct:getReportInstances",testReportId,List.class);
    assertNotNull("getReportInstances",reportInstances);
    assertFalse("getReportInstances empty",reportInstances.isEmpty());
    LOG.debug("getReportInstances: {}",reportInstances);
    boolean done=false;
    int tries=0;
    AsyncReportResults asyncReportResults=null;
    while (!done) {
      asyncReportResults=template().requestBodyAndHeader("direct:getReportResults",testReportId,SalesforceEndpointConfig.INSTANCE_ID,testReportInstanceId,AsyncReportResults.class);
      done=asyncReportResults != null && (asyncReportResults.getAttributes().getStatus() == ReportStatusEnum.Success || asyncReportResults.getAttributes().getStatus() == ReportStatusEnum.Error);
      if (!done) {
        Thread.sleep(RETRY_DELAY);
        if (++tries > REPORT_RESULT_RETRIES) {
          final long retrySeconds=TimeUnit.SECONDS.convert(tries * RETRY_DELAY,TimeUnit.MILLISECONDS);
          fail("Async report result not available in " + retrySeconds + " seconds");
        }
      }
    }
    assertNotNull("getReportResults",asyncReportResults);
    assertEquals("getReportResults status",ReportStatusEnum.Success,asyncReportResults.getAttributes().getStatus());
    LOG.debug("getReportResults: {}",asyncReportResults);
    String convertResults=template.requestBody("direct:convertResults",asyncReportResults,String.class);
    assertNotNull("default convertResults",convertResults);
    LOG.debug("Default options",convertResults);
    LOG.debug("{}",convertResults);
    final boolean[] values=new boolean[NUM_OPTIONS];
    final int nIterations=(int)Math.pow(2,NUM_OPTIONS);
    for (int i=0; i < nIterations; i++) {
      for (int j=0; j < NUM_OPTIONS; j++) {
        if (i % POWERS[j] == 0) {
          values[j]=!values[j];
        }
      }
      log.debug("Options {} = {}",REPORT_OPTIONS,values);
      headers.clear();
      for (int j=0; j < REPORT_OPTIONS.length; j++) {
        headers.put(REPORT_OPTIONS[j],values[j]);
      }
      convertResults=template.requestBodyAndHeaders("direct:convertResults",asyncReportResults,headers,String.class);
      assertNotNull("convertResults",convertResults);
      LOG.debug("{}",convertResults);
    }
  }
  @Override protected RouteBuilder doCreateRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:queryReport").to("salesforce:query?sObjectClass=" + QueryRecordsReport.class.getName());
        from("direct:getRecentReports").to("salesforce:getRecentReports");
        from("direct:getReportDescription").to("salesforce:getReportDescription");
        from("direct:executeSyncReport").to("salesforce:executeSyncReport");
        from("direct:executeAsyncReport").to("salesforce:executeAsyncReport?includeDetails=true");
        from("direct:getReportInstances").to("salesforce:getReportInstances");
        from("direct:getReportResults").to("salesforce:getReportResults");
        CsvDataFormat csv=new CsvDataFormat(CSVFormat.EXCEL);
        from("direct:convertResults").convertBodyTo(List.class).marshal(csv);
      }
    }
;
  }
}
