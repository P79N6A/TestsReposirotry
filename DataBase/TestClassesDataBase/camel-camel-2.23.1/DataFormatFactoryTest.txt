public class DataFormatFactoryTest extends ContextTestSupport {
  private static final DataFormat STRING_DF=new StringDataFormat("US-ASCII");
  private static final DataFormatFactory STRING_DFF=() -> new StringDataFormat("UTF-8");
  private static final DataFormat SERIALIZATION_DF=new SerializationDataFormat();
  @Test public void testDataFormatResolveOrCreate() throws Exception {
    assertSame(STRING_DF,context.resolveDataFormat("string"));
    assertNotSame(STRING_DF,context.createDataFormat("string"));
    assertNotSame(context.createDataFormat("string"),context.createDataFormat("string"));
    assertSame(SERIALIZATION_DF,context.resolveDataFormat("serialization"));
    assertNotSame(SERIALIZATION_DF,context.createDataFormat("serialization"));
    assertNotSame(context.createDataFormat("serialization"),context.createDataFormat("serialization"));
    assertEquals("US-ASCII",((StringDataFormat)context.resolveDataFormat("string")).getCharset());
    assertEquals("UTF-8",((StringDataFormat)context.createDataFormat("string")).getCharset());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("string-dataformat",STRING_DF);
    registry.bind("string-dataformat-factory",STRING_DFF);
    registry.bind("serialization",SERIALIZATION_DF);
    return registry;
  }
}
