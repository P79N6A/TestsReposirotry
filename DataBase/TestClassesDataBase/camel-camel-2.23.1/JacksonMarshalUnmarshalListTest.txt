public class JacksonMarshalUnmarshalListTest extends CamelTestSupport {
  @Test public void testUnmarshalListPojo() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:reversePojo");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(List.class);
    String json="[{\"name\":\"Camel\"}, {\"name\":\"World\"}]";
    template.sendBody("direct:backPojo",json);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertNotNull(list);
    assertEquals(2,list.size());
    TestPojo pojo=(TestPojo)list.get(0);
    assertEquals("Camel",pojo.getName());
    pojo=(TestPojo)list.get(1);
    assertEquals("World",pojo.getName());
  }
  @Test public void testUnmarshalListPojoOneElement() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:reversePojo");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(List.class);
    String json="[{\"name\":\"Camel\"}]";
    template.sendBody("direct:backPojo",json);
    assertMockEndpointsSatisfied();
    List list=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertNotNull(list);
    assertEquals(1,list.size());
    TestPojo pojo=(TestPojo)list.get(0);
    assertEquals("Camel",pojo.getName());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        JacksonDataFormat format=new JacksonDataFormat(TestPojo.class);
        format.useList();
        from("direct:backPojo").unmarshal(format).to("mock:reversePojo");
      }
    }
;
  }
}
