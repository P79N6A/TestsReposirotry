/** 
 * @version 
 */
public class MockAsBeanTest extends ContextTestSupport {
  @SuppressWarnings("deprecation") private MockEndpoint foo=new MockEndpoint("mock:foo");
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",foo);
    return jndi;
  }
  @Test public void testMockAsBeanWithWhenAnyExchangeReceived() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    foo.whenAnyExchangeReceived(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        String in=exchange.getIn().getBody(String.class);
        exchange.getIn().setBody("Bye " + in);
      }
    }
);
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean("foo").to("mock:result");
      }
    }
;
  }
  @Test public void testMockAsBeanWithReplyBody() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    foo.returnReplyBody(ExpressionBuilder.simpleExpression("Bye ${body}"));
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMockAsBeanWithReplyHeader() throws Exception {
    getMockEndpoint("mock:result").expectedHeaderReceived("myHeader","Bye World");
    foo.returnReplyHeader("myHeader",ExpressionBuilder.simpleExpression("Bye ${body}"));
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
}
