public class PubsubEndpointTest extends PubsubTestSupport {
  private static final String TEST_SUBSCRIPTION_NAME="test-sub-name";
  private static final String SUBSCRIPTION_URI=TEST_SUBSCRIPTION_NAME + "?ackMode=NONE" + "&concurrentConsumers=5"+ "&maxMessagesPerPoll=2";
  @EndpointInject(uri="google-pubsub://{{project.id}}:" + SUBSCRIPTION_URI) private Endpoint from;
  @EndpointInject(uri="direct:to") private Endpoint to;
  @Test public void testEndpointConfiguration() throws Exception {
    Endpoint endpoint=context.hasEndpoint(String.format("google-pubsub:%s:%s:1",PROJECT_ID,SUBSCRIPTION_URI));
    assertNotNull(String.format("Endpoint 'google-pubsub:%s:%s' is not found in Camel Context",PROJECT_ID,SUBSCRIPTION_URI),endpoint);
    assertTrue(endpoint instanceof GooglePubsubEndpoint);
    GooglePubsubEndpoint pubsubEndpoint=(GooglePubsubEndpoint)endpoint;
    assertEquals(ExchangePattern.InOnly,pubsubEndpoint.createExchange().getPattern());
    assertEquals("google-pubsub",pubsubEndpoint.getEndpointConfiguration().getParameter(EndpointConfiguration.URI_SCHEME));
    assertEquals("google-pubsub://" + PROJECT_ID + ":"+ SUBSCRIPTION_URI,pubsubEndpoint.getEndpointUri());
    assertEquals(PROJECT_ID,pubsubEndpoint.getProjectId());
    assertEquals(TEST_SUBSCRIPTION_NAME,pubsubEndpoint.getDestinationName());
    assertEquals(new Integer(5),pubsubEndpoint.getConcurrentConsumers());
    assertEquals(new Integer(2),pubsubEndpoint.getMaxMessagesPerPoll());
    assertEquals(GooglePubsubConstants.AckMode.NONE,pubsubEndpoint.getAckMode());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(from).to(to);
      }
    }
;
  }
}
