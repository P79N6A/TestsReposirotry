/** 
 */
public class SimpleLanguageBeanFunctionMethodValueWithCommaTest extends ContextTestSupport {
  @Test public void testSingle() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBody("direct:single","Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDouble() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBody("direct:double","Camel");
    assertMockEndpointsSatisfied();
  }
  @Test public void testHeader() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:header","Camel","myHeader","e,f");
    assertMockEndpointsSatisfied();
  }
  @Test public void testCron() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBody("direct:cron",new MyCronBody("SomeID","0 0 10,11,12 * * ?"));
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyBean());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:single").choice().when().simple("${bean:foo?method=bar(${body}, 'a,b')}").to("mock:result").otherwise().to("mock:other");
        from("direct:double").choice().when().simple("${bean:foo?method=bar(${body}, \"a,b\")}").to("mock:result").otherwise().to("mock:other");
        from("direct:header").choice().when().simple("${bean:foo?method=bar(${body}, ${header.myHeader})}").to("mock:result").otherwise().to("mock:other");
        from("direct:cron").choice().when().simple("${bean:foo?method=bar(${body.id}, ${body.cron})}").to("mock:result").otherwise().to("mock:other");
      }
    }
;
  }
public static class MyBean {
    public boolean bar(    String body,    String extra){
      return extra.contains(",");
    }
  }
public static class MyCronBody {
    private String id;
    private String cron;
    public MyCronBody(    String id,    String cron){
      this.id=id;
      this.cron=cron;
    }
    public String getId(){
      return id;
    }
    public String getCron(){
      return cron;
    }
  }
}
