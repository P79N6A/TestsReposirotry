@RunWith(MockitoJUnitRunner.class) public class ConsumerTest extends SplunkMockTestSupport {
  @Mock JobCollection jobCollection;
  @Mock Job jobMock;
  @Test public void testSearch() throws Exception {
    MockEndpoint searchMock=getMockEndpoint("mock:search-result");
    searchMock.expectedMessageCount(3);
    searchMock.expectedPropertyReceived(Exchange.BATCH_SIZE,3);
    when(service.getJobs()).thenReturn(jobCollection);
    when(jobCollection.create(anyString(),any())).thenReturn(jobMock);
    when(jobMock.isDone()).thenReturn(Boolean.TRUE);
    InputStream stream=ConsumerTest.class.getResourceAsStream("/resultsreader_test_data.json");
    when(jobMock.getResults(any())).thenReturn(stream);
    assertMockEndpointsSatisfied();
    SplunkEvent recieved=searchMock.getReceivedExchanges().get(0).getIn().getBody(SplunkEvent.class);
    assertNotNull(recieved);
    Map<String,String> data=recieved.getEventData();
    assertEquals("indexertpool",data.get("name"));
    assertEquals(true,searchMock.getReceivedExchanges().get(2).getProperty(Exchange.BATCH_COMPLETE,Boolean.class));
    stream.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("splunk://normal?delay=5s&username=foo&password=bar&initEarliestTime=-10s&latestTime=now&search=search index=myindex&sourceType=testSource").to("mock:search-result");
      }
    }
;
  }
}
