/** 
 * Unit test for the idempotentKey option.
 */
public class FileConsumerIdempotentKeyNameAndSizeTest extends FileConsumerIdempotentTest {
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/idempotent/?idempotent=true&idempotentKey=${file:onlyname}-${file:size}&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
  @Test public void testIdempotentDiffSize() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    mock.reset();
    mock.expectedBodiesReceived("Bye World");
    template.sendBodyAndHeader("file://target/idempotent","Bye World",Exchange.FILE_NAME,"report.txt");
    assertMockEndpointsSatisfied();
  }
}
