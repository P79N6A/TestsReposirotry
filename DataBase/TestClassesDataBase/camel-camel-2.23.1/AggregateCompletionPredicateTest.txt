/** 
 * @version 
 */
public class AggregateCompletionPredicateTest extends ContextTestSupport {
  @Test public void testCompletionPredicateBeforeTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("A+B+C+END");
    mock.setResultWaitTime(10000);
    template.sendBodyAndHeader("direct:start","A","id","foo");
    template.sendBodyAndHeader("direct:start","B","id","foo");
    template.sendBodyAndHeader("direct:start","C","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMultipleCompletionPredicateBeforeTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("A+B+C+END","D+E+END","F+G+H+I+END");
    template.sendBodyAndHeader("direct:start","A","id","foo");
    template.sendBodyAndHeader("direct:start","B","id","foo");
    template.sendBodyAndHeader("direct:start","C","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    template.sendBodyAndHeader("direct:start","D","id","foo");
    template.sendBodyAndHeader("direct:start","E","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    template.sendBodyAndHeader("direct:start","F","id","foo");
    template.sendBodyAndHeader("direct:start","G","id","foo");
    template.sendBodyAndHeader("direct:start","H","id","foo");
    template.sendBodyAndHeader("direct:start","I","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    assertMockEndpointsSatisfied();
  }
  @Test public void testCompletionPredicateBeforeTimeoutTwoGroups() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("A+B+C+END","1+2+3+4+END");
    mock.setResultWaitTime(10000);
    template.sendBodyAndHeader("direct:start","A","id","foo");
    template.sendBodyAndHeader("direct:start","1","id","bar");
    template.sendBodyAndHeader("direct:start","2","id","bar");
    template.sendBodyAndHeader("direct:start","B","id","foo");
    template.sendBodyAndHeader("direct:start","C","id","foo");
    template.sendBodyAndHeader("direct:start","3","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    template.sendBodyAndHeader("direct:start","4","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","bar");
    assertMockEndpointsSatisfied();
  }
  @Test public void testMultipleCompletionPredicateBeforeTimeoutTwoGroups() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("A+B+C+END","1+2+3+4+END","5+6+END","D+E+END","7+8+END","F+G+H+I+END");
    template.sendBodyAndHeader("direct:start","A","id","foo");
    template.sendBodyAndHeader("direct:start","B","id","foo");
    template.sendBodyAndHeader("direct:start","C","id","foo");
    template.sendBodyAndHeader("direct:start","1","id","bar");
    template.sendBodyAndHeader("direct:start","2","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    template.sendBodyAndHeader("direct:start","D","id","foo");
    template.sendBodyAndHeader("direct:start","3","id","bar");
    template.sendBodyAndHeader("direct:start","4","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","bar");
    template.sendBodyAndHeader("direct:start","5","id","bar");
    template.sendBodyAndHeader("direct:start","6","id","bar");
    template.sendBodyAndHeader("direct:start","E","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    template.sendBodyAndHeader("direct:start","F","id","foo");
    template.sendBodyAndHeader("direct:start","7","id","bar");
    template.sendBodyAndHeader("direct:start","G","id","foo");
    template.sendBodyAndHeader("direct:start","H","id","foo");
    template.sendBodyAndHeader("direct:start","8","id","bar");
    template.sendBodyAndHeader("direct:start","END","id","bar");
    template.sendBodyAndHeader("direct:start","I","id","foo");
    template.sendBodyAndHeader("direct:start","END","id","foo");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new BodyInAggregatingStrategy()).completionPredicate(body().contains("END")).completionTimeout(20000).to("mock:aggregated");
      }
    }
;
  }
}
