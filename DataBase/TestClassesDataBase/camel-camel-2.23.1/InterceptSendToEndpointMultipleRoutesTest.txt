/** 
 * Unit test for intercepting sending to endpoint with multiple routes
 */
public class InterceptSendToEndpointMultipleRoutesTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testInterceptEndpoint() throws Exception {
    context.addRoutes(new MyBaseRoute(){
      @Override public void configure() throws Exception {
        super.configure();
        from("direct:a").to("seda:a").to("mock:result");
      }
    }
);
    context.addRoutes(new MyBaseRoute(){
      @Override public void configure() throws Exception {
        super.configure();
        from("direct:b").to("seda:b").to("mock:result");
      }
    }
);
    context.addRoutes(new MyBaseRoute(){
      @Override public void configure() throws Exception {
        super.configure();
        from("direct:c").to("seda:c").to("mock:c").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:detour").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:c").expectedBodiesReceived("C");
    template.sendBody("direct:a","A");
    template.sendBody("direct:b","B");
    template.sendBody("direct:c","C");
    assertMockEndpointsSatisfied();
  }
private abstract class MyBaseRoute extends RouteBuilder {
    @Override public void configure() throws Exception {
      interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().to("mock:detour");
    }
  }
}
