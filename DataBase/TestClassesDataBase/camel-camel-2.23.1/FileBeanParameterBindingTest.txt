/** 
 * @version 
 */
public class FileBeanParameterBindingTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/foo");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyFooBean());
    return jndi;
  }
  @Test public void testFileToBean() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/foo","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/foo").to("bean:foo?method=before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setHeader("bar",123);
          }
        }
).to("bean:foo?method=after").to("mock:result");
      }
    }
;
  }
public static class MyFooBean {
    public void before(    @Header("bar") Integer bar,    @Header(Exchange.FILE_NAME) String name){
      assertNull("There should be no bar",bar);
      assertEquals("hello.txt",name);
    }
    public void after(    @Header("bar") Integer bar,    @Header(Exchange.FILE_NAME) String name){
      assertNotNull("There should be bar",bar);
      assertEquals(123,bar.intValue());
      assertEquals("hello.txt",name);
    }
  }
}
