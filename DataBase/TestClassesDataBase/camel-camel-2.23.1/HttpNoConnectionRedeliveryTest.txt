/** 
 * @version
 */
public class HttpNoConnectionRedeliveryTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Test public void httpConnectionOk() throws Exception {
    Exchange exchange=template.request("direct:start",null);
    assertExchange(exchange);
  }
  @Test public void httpConnectionNotOk() throws Exception {
    localServer.stop();
    localServer.awaitTermination(5000,TimeUnit.MILLISECONDS);
    Exchange exchange=template.request("direct:start",null);
    assertTrue(exchange.isFailed());
    ConnectException cause=assertIsInstanceOf(ConnectException.class,exchange.getException());
    assertTrue(cause.getMessage().contains("failed"));
    assertEquals(true,exchange.getIn().getHeader(Exchange.REDELIVERED));
    assertEquals(4,exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").onException(ConnectException.class).maximumRedeliveries(4).backOffMultiplier(2).redeliveryDelay(100).maximumRedeliveryDelay(5000).useExponentialBackOff().end().to("http4://" + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/search");
      }
    }
;
  }
}
