@Ignore("Must be manually tested. Provide your own accessKey and secretKey and also create a SWF domain in advance") public class CamelSWFEndToEndTest extends CamelTestSupport {
  protected String options="accessKey=XXX" + "&secretKey=YYY" + "&domainName=ZZZ"+ "&activityList=swf-alist"+ "&workflowList=swf-wlist"+ "&clientConfiguration.endpoint=swf.eu-west-1.amazonaws.com"+ "&version=1.0";
  @EndpointInject(uri="mock:starter") private MockEndpoint starter;
  @EndpointInject(uri="mock:decider") private MockEndpoint decider;
  @EndpointInject(uri="mock:worker") private MockEndpoint worker;
  @Test public void consumerReceivedPreAndPostEntryCreatedEventNotifications() throws Exception {
    starter.expectedMessageCount(1);
    decider.expectedMinimumMessageCount(1);
    worker.expectedMessageCount(2);
    template.requestBody("direct:start","Hello world!");
    assertIsSatisfied(context);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("aws-swf://activity?" + options + "&eventName=processActivities").log("FOUND ACTIVITY TASK ${body}").setBody(constant("1")).to("mock:worker");
        from("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("FOUND WORKFLOW TASK ${body}").filter(header(SWFConstants.ACTION).isEqualTo(SWFConstants.EXECUTE_ACTION)).to("aws-swf://activity?" + options + "&eventName=processActivities").setBody(constant("Message two")).to("aws-swf://activity?" + options + "&eventName=processActivities").log("SENT ACTIVITY TASK ${body}").to("mock:decider");
        from("direct:start").to("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("SENT WORKFLOW TASK ${body}").to("mock:starter");
      }
    }
;
  }
}
