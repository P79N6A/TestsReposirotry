public class BoonDataFormatTest extends CamelTestSupport {
  @Test public void testMarshalAndUnmarshalMap() throws Exception {
    Map<String,String> in=new LinkedHashMap<>();
    in.put("name","Camel");
    MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Map.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:in",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"name\":\"Camel\"}",marshalledAsString);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalPojo() throws Exception {
    TestPojo in=new TestPojo();
    in.setName("Camel");
    MockEndpoint mock=getMockEndpoint("mock:reversePojo");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(TestPojo.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:inPojo",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"name\":\"Camel\"}",marshalledAsString);
    template.sendBody("direct:backPojo",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalList() throws Exception {
    List<String> in=new ArrayList<>();
    in.add("Karaf");
    in.add("Camel");
    in.add("Servicemix");
    MockEndpoint mock=getMockEndpoint("mock:reverseList");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(List.class);
    mock.message(0).body().isEqualTo(in);
    Object marshalled=template.requestBody("direct:inList",in);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("[\"Karaf\",\"Camel\",\"Servicemix\"]",marshalledAsString);
    template.sendBody("direct:backList",marshalled);
    mock.assertIsSatisfied();
  }
  @Test public void testMarshalAndUnmarshalPojoMap() throws Exception {
    TestPojo in=new TestPojo();
    in.setName("Camel");
    Map<String,TestPojo> map=new LinkedHashMap<>();
    map.put("test1",in);
    map.put("test2",in);
    MockEndpoint mock=getMockEndpoint("mock:reversePojosMap");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Map.class);
    Object marshalled=template.requestBody("direct:inPojosMap",map);
    String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
    assertEquals("{\"test1\":{\"name\":\"Camel\"},\"test2\":{\"name\":\"Camel\"}}",marshalledAsString);
    template.sendBody("direct:backPojosMap",marshalled);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        BoonDataFormat format=new BoonDataFormat();
        from("direct:in").marshal(format);
        from("direct:back").unmarshal(format).to("mock:reverse");
        BoonDataFormat formatPojo=new BoonDataFormat(TestPojo.class);
        from("direct:inPojo").marshal(formatPojo);
        from("direct:backPojo").unmarshal(formatPojo).to("mock:reversePojo");
        BoonDataFormat formatList=new BoonDataFormat();
        formatList.setUseList(true);
        from("direct:inList").marshal(formatList);
        from("direct:backList").unmarshal(formatList).to("mock:reverseList");
        BoonDataFormat formatPojoMaps=new BoonDataFormat();
        from("direct:inPojosMap").marshal(formatPojoMaps);
        from("direct:backPojosMap").unmarshal(formatPojoMaps).to("mock:reversePojosMap");
      }
    }
;
  }
}
