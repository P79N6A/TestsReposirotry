public class AggregratedJmsRouteTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(AggregratedJmsRouteTest.class);
  private String timeOutEndpointUri="jms:queue:test.a";
  private String multicastEndpointUri="jms:queue:multicast";
  @Test public void testJmsBatchTimeoutExpiryWithAggregrationDelay() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.setSleepForEmptyTest(3000);
    resultEndpoint.expectedMessageCount(1);
    for (int i=1; i <= 2; i++) {
      String body="message:" + i;
      sendExchange(timeOutEndpointUri,body);
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testJmsMulticastAndAggregration() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:reply",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(2);
    for (int i=1; i <= 2; i++) {
      String body="message:" + i;
      sendExchange(multicastEndpointUri,body);
    }
    resultEndpoint.assertIsSatisfied(8000);
  }
  protected void sendExchange(  String uri,  final Object expectedBody){
    template.sendBodyAndHeader(uri,expectedBody,"cheese",123);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("jms",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(timeOutEndpointUri).to("jms:queue:test.b");
        from("jms:queue:test.b").aggregate(header("cheese"),new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            try {
              Thread.sleep(2000);
            }
 catch (            InterruptedException e) {
              LOG.error("aggregration delay sleep inturrepted",e);
              fail("aggregration delay sleep inturrepted");
            }
            return newExchange;
          }
        }
).completionTimeout(2000L).to("mock:result");
        from(multicastEndpointUri).to("jms:queue:point1","jms:queue:point2","jms:queue:point3");
        from("jms:queue:point1").process(new MyProcessor()).to("jms:queue:reply");
        from("jms:queue:point2").process(new MyProcessor()).to("jms:queue:reply");
        from("jms:queue:point3").process(new MyProcessor()).to("jms:queue:reply");
        from("jms:queue:reply").aggregate(header("cheese"),new UseLatestAggregationStrategy()).completionSize(3).to("mock:reply");
      }
    }
;
  }
private static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      LOG.info("get the exchange here " + exchange);
    }
  }
}
