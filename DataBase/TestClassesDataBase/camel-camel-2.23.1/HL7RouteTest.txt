/** 
 * Unit test for HL7 routing.
 */
public class HL7RouteTest extends HL7TestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    HL7MLLPCodec codec=new HL7MLLPCodec();
    codec.setCharset("iso-8859-1");
    jndi.bind("hl7codec",codec);
    MyHL7BusinessLogic logic=new MyHL7BusinessLogic();
    jndi.bind("hl7service",logic);
    return jndi;
  }
  @Test public void testSendA19() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:a19");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Message.class);
    String line1="MSH|^~\\&|MYSENDER|MYSENDERAPP|MYCLIENT|MYCLIENTAPP|200612211200||QRY^A19|1234|P|2.4";
    String line2="QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||";
    StringBuilder in=new StringBuilder();
    in.append(line1);
    in.append("\r");
    in.append(line2);
    String out=template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec",in.toString(),String.class);
    String[] lines=out.split("\r");
    assertEquals("MSH|^~\\&|MYSENDER||||200701011539||ADR^A19||||123",lines[0]);
    assertEquals("MSA|AA|123",lines[1]);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendA01() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:a01");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Message.class);
    String line1="MSH|^~\\&|MYSENDER|MYSENDERAPP|MYCLIENT|MYCLIENTAPP|200612211200||ADT^A01|123|P|2.4";
    String line2="PID|||123456||Doe^John";
    StringBuilder in=new StringBuilder();
    in.append(line1);
    in.append("\r");
    in.append(line2);
    String out=template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec",in.toString(),String.class);
    String[] lines=out.split("\r");
    assertEquals("MSH|^~\\&|MYSENDER||||200701011539||ADT^A01||||123",lines[0]);
    assertEquals("PID|||123||Doe^John",lines[1]);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendUnknown() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:unknown");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Message.class);
    String line1="MSH|^~\\&|MYSENDER|MYSENDERAPP|MYCLIENT|MYCLIENTAPP|200612211200||ADT^A02|1234|P|2.4";
    String line2="PID|||123456||Doe^John";
    StringBuilder in=new StringBuilder();
    in.append(line1);
    in.append("\r");
    in.append(line2);
    template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec",in.toString());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        DataFormat hl7=new HL7DataFormat();
        from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").unmarshal(hl7).choice().when(header("CamelHL7TriggerEvent").isEqualTo("A19")).bean("hl7service","handleA19").to("mock:a19").when(header("CamelHL7TriggerEvent").isEqualTo("A01")).to("mock:a01").bean("hl7service","handleA01").to("mock:a19").otherwise().to("mock:unknown").end().marshal(hl7);
      }
    }
;
  }
public class MyHL7BusinessLogic {
    public Message handleA19(    Message msg) throws Exception {
      assertTrue(msg instanceof QRY_A19);
      return createADR19Message();
    }
    public Message handleA01(    Message msg) throws Exception {
      assertTrue(msg instanceof ADT_A01);
      return createADT01Message(((ADT_A01)msg).getMSH().getMessageControlID().getValue());
    }
  }
  private static Message createADR19Message() throws Exception {
    ADR_A19 adr=new ADR_A19();
    MSH mshSegment=adr.getMSH();
    mshSegment.getFieldSeparator().setValue("|");
    mshSegment.getEncodingCharacters().setValue("^~\\&");
    mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue("200701011539");
    mshSegment.getSendingApplication().getNamespaceID().setValue("MYSENDER");
    mshSegment.getSequenceNumber().setValue("123");
    mshSegment.getMessageType().getMessageType().setValue("ADR");
    mshSegment.getMessageType().getTriggerEvent().setValue("A19");
    MSA msa=adr.getMSA();
    msa.getAcknowledgementCode().setValue("AA");
    msa.getMessageControlID().setValue("123");
    QRD qrd=adr.getQRD();
    qrd.getQueryDateTime().getTimeOfAnEvent().setValue("20080805120000");
    return adr.getMessage();
  }
  private static Message createADT01Message(  String msgId) throws Exception {
    ADT_A01 adt=new ADT_A01();
    MSH mshSegment=adt.getMSH();
    mshSegment.getFieldSeparator().setValue("|");
    mshSegment.getEncodingCharacters().setValue("^~\\&");
    mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue("200701011539");
    mshSegment.getSendingApplication().getNamespaceID().setValue("MYSENDER");
    mshSegment.getSequenceNumber().setValue("123");
    mshSegment.getMessageType().getMessageType().setValue("ADT");
    mshSegment.getMessageType().getTriggerEvent().setValue("A01");
    PID pid=adt.getPID();
    pid.getPatientName(0).getFamilyName().getSurname().setValue("Doe");
    pid.getPatientName(0).getGivenName().setValue("John");
    pid.getPatientIdentifierList(0).getID().setValue(msgId);
    return adt;
  }
}
