/** 
 * @version 
 */
public class CustomParameterMappingStrategyTest extends ContextTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("foo",new MyFooBean());
    jndi.bind(BeanConstants.BEAN_PARAMETER_MAPPING_STRATEGY,new MyCustomStrategy());
    return jndi;
  }
  @Test public void testExchange() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("You said: Hello Claus");
    template.sendBody("direct:a","Claus");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").bean("foo").to("mock:result");
      }
    }
;
  }
public static class MyFooBean {
    public String cheese(    String body){
      return "You said: " + body;
    }
  }
public static class MyCustomStrategy implements ParameterMappingStrategy {
    public Expression getDefaultParameterTypeExpression(    Class<?> parameterType){
      if (String.class.isAssignableFrom(parameterType)) {
        return new ExpressionAdapter(){
          @Override public Object evaluate(          Exchange exchange){
            return "Hello " + exchange.getIn().getBody(String.class);
          }
        }
;
      }
      return null;
    }
  }
}
