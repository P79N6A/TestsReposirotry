public class RestUndertowHttpPostXmlJaxbPojoTest extends BaseUndertowTest {
  @Test public void testPostJaxbPojo() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserJaxbPojo.class);
    String body="<user name=\"Donald Duck\" id=\"123\"></user>";
    template.sendBodyAndHeader("undertow:http://localhost:{{port}}/users/new",body,Exchange.CONTENT_TYPE,"text/xml");
    assertMockEndpointsSatisfied();
    UserJaxbPojo user=mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class);
    assertNotNull(user);
    assertEquals(123,user.getId());
    assertEquals("Donald Duck",user.getName());
  }
  @Test public void testPostJaxbPojoNoContentType() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserJaxbPojo.class);
    String body="<user name=\"Donald Duck\" id=\"456\"></user>";
    template.sendBody("undertow:http://localhost:" + getPort() + "/users/new",body);
    assertMockEndpointsSatisfied();
    UserJaxbPojo user=mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class);
    assertNotNull(user);
    assertEquals(456,user.getId());
    assertEquals("Donald Duck",user.getName());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("undertow").host("localhost").port(getPort()).bindingMode(RestBindingMode.auto);
        rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input");
      }
    }
;
  }
}
