public class ShiroOverJmsTest extends CamelTestSupport {
  private byte[] passPhrase={(byte)0x08,(byte)0x09,(byte)0x0A,(byte)0x0B,(byte)0x0C,(byte)0x0D,(byte)0x0E,(byte)0x0F,(byte)0x10,(byte)0x11,(byte)0x12,(byte)0x13,(byte)0x14,(byte)0x15,(byte)0x16,(byte)0x17};
  @Test public void testShiroOverJms() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    Map<String,Object> headers=new HashMap<>();
    headers.put(ShiroSecurityConstants.SHIRO_SECURITY_USERNAME,"ringo");
    headers.put(ShiroSecurityConstants.SHIRO_SECURITY_PASSWORD,"starr");
    template.requestBodyAndHeaders("direct:start","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent amq=jmsComponentAutoAcknowledge(connectionFactory);
    amq.setCamelContext(context);
    answer.bind("jms",amq);
    return answer;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        final ShiroSecurityPolicy securityPolicy=new ShiroSecurityPolicy("src/test/resources/securityconfig.ini",passPhrase);
        securityPolicy.setBase64(true);
        errorHandler(deadLetterChannel("mock:error"));
        from("direct:start").policy(securityPolicy).to("jms:queue:foo").to("mock:result");
        from("jms:queue:foo").to("log:foo?showHeaders=true").policy(securityPolicy).to("mock:foo").transform().constant("Bye World");
      }
    }
;
  }
}
