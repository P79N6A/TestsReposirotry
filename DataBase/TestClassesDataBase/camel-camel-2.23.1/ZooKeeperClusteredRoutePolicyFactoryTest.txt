public final class ZooKeeperClusteredRoutePolicyFactoryTest {
  private static final int PORT=AvailablePortFinder.getNextAvailable();
  private static final Logger LOGGER=LoggerFactory.getLogger(ZooKeeperClusteredRoutePolicyFactoryTest.class);
  private static final List<String> CLIENTS=IntStream.range(0,3).mapToObj(Integer::toString).collect(Collectors.toList());
  private static final List<String> RESULTS=new ArrayList<>();
  private static final ScheduledExecutorService SCHEDULER=Executors.newScheduledThreadPool(CLIENTS.size() * 2);
  private static final CountDownLatch LATCH=new CountDownLatch(CLIENTS.size());
  @Test public void test() throws Exception {
    TestZookeeperServer server=null;
    try {
      server=new TestZookeeperServer(PORT,true);
      ZooKeeperTestSupport.waitForServerUp("localhost:" + PORT,1000);
      for (      String id : CLIENTS) {
        SCHEDULER.submit(() -> run(id));
      }
      LATCH.await(1,TimeUnit.MINUTES);
      SCHEDULER.shutdownNow();
      Assert.assertEquals(CLIENTS.size(),RESULTS.size());
      Assert.assertTrue(RESULTS.containsAll(CLIENTS));
    }
  finally {
      if (server != null) {
        server.shutdown();
      }
    }
  }
  private static void run(  String id){
    try {
      int events=ThreadLocalRandom.current().nextInt(2,6);
      CountDownLatch contextLatch=new CountDownLatch(events);
      ZooKeeperClusterService service=new ZooKeeperClusterService();
      service.setId("node-" + id);
      service.setNodes("localhost:" + PORT);
      service.setBasePath("/camel");
      DefaultCamelContext context=new DefaultCamelContext();
      context.disableJMX();
      context.setName("context-" + id);
      context.addService(service);
      context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("timer:zookeeper?delay=1s&period=1s").routeId("route-" + id).log("From ${routeId}").process(e -> contextLatch.countDown());
        }
      }
);
      Thread.sleep(ThreadLocalRandom.current().nextInt(500));
      context.start();
      contextLatch.await();
      LOGGER.debug("Shutting down node {}",id);
      RESULTS.add(id);
      context.stop();
      LATCH.countDown();
    }
 catch (    Exception e) {
      LOGGER.warn("",e);
    }
  }
}
