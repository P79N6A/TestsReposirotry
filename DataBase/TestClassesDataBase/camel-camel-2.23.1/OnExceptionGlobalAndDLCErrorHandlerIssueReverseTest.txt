/** 
 * @version 
 */
public class OnExceptionGlobalAndDLCErrorHandlerIssueReverseTest extends ContextTestSupport {
  @Test public void testNoOnGlobalException() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:global").expectedMessageCount(1);
    getMockEndpoint("mock:local").expectedMessageCount(0);
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOnRouteException() throws Exception {
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:global").expectedMessageCount(0);
    getMockEndpoint("mock:local").expectedMessageCount(1);
    template.sendBody("direct:bar","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        onException(Exception.class).handled(true).to("mock:global");
        from("direct:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Damn"));
        from("direct:bar").routeId("bar").onException(IllegalArgumentException.class).handled(true).to("mock:local").end().to("mock:bar").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
}
