/** 
 * Unit test for overridden methods in an inheritance.
 */
public class BeanInfoInheritanceTest extends ContextTestSupport {
  @Test public void testInheritance() throws Exception {
    BeanInfo beanInfo=new BeanInfo(context,Y.class);
    DefaultExchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new Request());
    try {
      MethodInvocation mi=beanInfo.createInvocation(null,exchange);
      assertNotNull(mi);
      assertEquals("process",mi.getMethod().getName());
      assertEquals("Y",mi.getMethod().getDeclaringClass().getSimpleName());
    }
 catch (    AmbiguousMethodCallException e) {
      fail("This should not be ambiguous!");
    }
  }
  @Test public void testNoInheritance() throws Exception {
    BeanInfo beanInfo=new BeanInfo(context,A.class);
    DefaultExchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new Request());
    try {
      MethodInvocation mi=beanInfo.createInvocation(null,exchange);
      assertNotNull(mi);
      assertEquals("process",mi.getMethod().getName());
      assertEquals("A",mi.getMethod().getDeclaringClass().getSimpleName());
    }
 catch (    AmbiguousMethodCallException e) {
      fail("This should not be ambiguous!");
    }
  }
  @Test public void testInheritanceAndOverload() throws Exception {
    BeanInfo beanInfo=new BeanInfo(context,Z.class);
    DefaultExchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(new Request());
    try {
      beanInfo.createInvocation(null,exchange);
      fail("This should be ambiguous!");
    }
 catch (    AmbiguousMethodCallException e) {
    }
  }
public static class Request {
    int x;
  }
public static class X {
    public int process(    Request request){
      return 0;
    }
  }
public static class Y extends X {
    public int process(    Request request){
      return 1;
    }
    public int compute(    String body){
      return 2;
    }
  }
public static class Z extends Y {
    public int compute(    Request request){
      return 2;
    }
    public int process(    Request request,    String body){
      return 3;
    }
  }
public static class A {
    public void doSomething(    String body){
    }
    public int process(    Request request){
      return 0;
    }
  }
}
