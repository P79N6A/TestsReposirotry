/** 
 * Unit test that we can produce JMS message from files
 */
public class ApnsProducerTest extends CamelTestSupport {
  private static final String FAKE_TOKEN="19308314834701ACD8313AEBD92AEFDE192120371FE13982392831701318B943";
  private ApnsServerStub server;
  @Before public void startup(){
    server=ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT,TestConstants.TEST_FEEDBACK_PORT);
  }
  @After public void stop(){
    server.stop();
  }
  @Test(timeout=5000) public void testProducer() throws Exception {
    String message="Hello World";
    String messagePayload=APNS.newPayload().alertBody(message).build();
    EnhancedApnsNotification apnsNotification=new EnhancedApnsNotification(1,EnhancedApnsNotification.MAXIMUM_EXPIRY,FAKE_TOKEN,messagePayload);
    server.stopAt(apnsNotification.length());
    template.sendBody("direct:test",message);
    server.getMessages().acquire();
    assertArrayEquals(apnsNotification.marshall(),server.getReceived().toByteArray());
  }
  @Test(timeout=5000) public void testProducerWithApnsNotification() throws InterruptedException {
    String message="Hello World";
    String messagePayload=APNS.newPayload().alertBody(message).build();
    final EnhancedApnsNotification apnsNotification=new EnhancedApnsNotification(14,EnhancedApnsNotification.MAXIMUM_EXPIRY,FAKE_TOKEN,messagePayload);
    server.stopAt(apnsNotification.length());
    template.sendBody("direct:testWithApnsNotification",apnsNotification);
    server.getMessages().acquire();
    assertArrayEquals(apnsNotification.marshall(),server.getReceived().toByteArray());
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ApnsServiceFactory apnsServiceFactory=ApnsUtils.createDefaultTestConfiguration(camelContext);
    ApnsService apnsService=apnsServiceFactory.getApnsService();
    ApnsComponent apnsComponent=new ApnsComponent(apnsService);
    camelContext.addComponent("apns",apnsComponent);
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:test").setHeader(ApnsConstants.HEADER_TOKENS,constant(FAKE_TOKEN)).to("apns:notify");
        from("direct:testWithApnsNotification").setHeader(ApnsConstants.HEADER_MESSAGE_TYPE,constant(MessageType.APNS_NOTIFICATION.name())).to("apns:notify");
      }
    }
;
  }
}
