/** 
 * Advice with tests
 */
public class AdviceWithTypeTest extends ContextTestSupport {
  @Test public void testUnknownType() throws Exception {
    try {
      context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
        @Override public void configure() throws Exception {
          weaveByType(SplitDefinition.class).replace().to("mock:xxx");
        }
      }
);
      fail("Should hve thrown exception");
    }
 catch (    IllegalArgumentException e) {
      assertTrue(e.getMessage(),e.getMessage().startsWith("There are no outputs which matches: SplitDefinition in the route"));
    }
  }
  @Test public void testReplace() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveByType(LogDefinition.class).replace().multicast().to("mock:a").to("mock:b");
      }
    }
);
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRemove() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveByType(TransformDefinition.class).remove();
      }
    }
);
    getMockEndpoint("mock:result").expectedBodiesReceived("World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBefore() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveByType(ToDefinition.class).before().transform(constant("Bye World"));
      }
    }
);
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAfter() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveByType(ToDefinition.class).after().transform(constant("Bye World"));
      }
    }
);
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    Object out=template.requestBody("direct:start","World");
    assertEquals("Bye World",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").transform(simple("Hello ${body}")).log("Got ${body}").to("mock:result");
      }
    }
;
  }
}
