public class LevelDBAggregateSerializedHeadersTest extends CamelTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(LevelDBAggregateSerializedHeadersTest.class);
  private static final int SIZE=500;
  private LevelDBAggregationRepository repo;
  @Before @Override public void setUp() throws Exception {
    deleteDirectory("target/data");
    repo=new LevelDBAggregationRepository("repo1","target/data/leveldb.dat");
    repo.setAllowSerializedHeaders(true);
    super.setUp();
  }
  @Test public void testLoadTestLevelDBAggregate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.setResultWaitTime(50 * 1000);
    LOG.info("Staring to send " + SIZE + " messages.");
    for (int i=0; i < SIZE; i++) {
      final int value=1;
      HeaderDto headerDto=new HeaderDto("test","company",1);
      char id='A';
      LOG.debug("Sending {} with id {}",value,id);
      Map<String,Object> headers=new HashMap<>();
      headers.put("id",headerDto);
      template.sendBodyAndHeaders("seda:start?size=" + SIZE,value,headers);
    }
    LOG.info("Sending all " + SIZE + " message done. Now waiting for aggregation to complete.");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:start?size=" + SIZE).to("log:input?groupSize=500").aggregate(header("id"),new MyAggregationStrategy()).aggregationRepository(repo).completionSize(SIZE).to("log:output?showHeaders=true").to("mock:result").end();
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      Integer body1=oldExchange.getIn().getBody(Integer.class);
      Integer body2=newExchange.getIn().getBody(Integer.class);
      int sum=body1 + body2;
      oldExchange.getIn().setBody(sum);
      return oldExchange;
    }
  }
}
