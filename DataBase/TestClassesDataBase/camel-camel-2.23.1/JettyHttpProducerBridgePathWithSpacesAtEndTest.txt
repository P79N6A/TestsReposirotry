/** 
 * As  {@link JettyHttpProducerBridgePathWithSpacesTest} but content path ends with a space
 */
public class JettyHttpProducerBridgePathWithSpacesAtEndTest extends BaseJettyTest {
  private int port1;
  private int port2;
  @Test public void testProxy() throws Exception {
    Thread.sleep(2000);
    String reply=template.requestBody("jetty:http://127.0.0.1:" + port1 + "/foo ","World",String.class);
    assertEquals("Bye World",reply);
    String reply2=template.requestBody("jetty:http://127.0.0.1:" + port1 + "/foo /bar baz","Camel",String.class);
    assertEquals("Bye Camel",reply2);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        port1=getPort();
        port2=getNextPort();
        from("jetty:http://127.0.0.1:" + port1 + "/foo ?matchOnUriPrefix=true").to("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?bridgeEndpoint=true&throwExceptionOnFailure=false");
        from("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?matchOnUriPrefix=true").transform().simple("Bye ${body}");
      }
    }
;
  }
}
