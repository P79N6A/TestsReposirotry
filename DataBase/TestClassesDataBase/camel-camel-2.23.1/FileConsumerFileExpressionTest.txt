/** 
 * Unit test for expression option for file consumer.
 */
public class FileConsumerFileExpressionTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/filelanguage");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("counter",new MyGuidGenerator());
    return jndi;
  }
  @Test public void testConsumeFileBasedOnBeanName() throws Exception {
    template.sendBodyAndHeader("file://target/filelanguage/bean","Hello World",Exchange.FILE_NAME,"122.txt");
    template.sendBodyAndHeader("file://target/filelanguage/bean","Goodday World",Exchange.FILE_NAME,"123.txt");
    template.sendBodyAndHeader("file://target/filelanguage/bean","Bye World",Exchange.FILE_NAME,"124.txt");
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/bean/" + "?initialDelay=0&delay=10&fileName=${bean:counter.next}.txt&delete=true").to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Goodday World");
    context.start();
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumeFileBasedOnDatePattern() throws Exception {
    template.sendBodyAndHeader("file://target/filelanguage/date","Bye World",Exchange.FILE_NAME,"myfile-20081128.txt");
    template.sendBodyAndHeader("file://target/filelanguage/date","Hello World",Exchange.FILE_NAME,"myfile-20081129.txt");
    template.sendBodyAndHeader("file://target/filelanguage/date","Goodday World",Exchange.FILE_NAME,simple("myfile-${date:now:yyyyMMdd}.txt"));
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/filelanguage/date/" + "?initialDelay=0&delay=10&fileName=myfile-${date:now:yyyyMMdd}.txt").convertBodyTo(String.class).to("mock:result");
      }
    }
);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Goodday World");
    context.start();
    assertMockEndpointsSatisfied();
  }
public class MyGuidGenerator {
    public String next(){
      return "123";
    }
  }
}
