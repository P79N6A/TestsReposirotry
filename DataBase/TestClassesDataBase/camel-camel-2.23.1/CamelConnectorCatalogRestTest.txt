public class CamelConnectorCatalogRestTest {
  private Server server;
  private CamelConnectorCatalogRest catalog;
  private int port;
  @Before public void setup(){
    catalog=new CamelConnectorCatalogRest();
    port=AvailablePortFinder.getNextAvailable(9000);
    JAXRSServerFactoryBean sf=new JAXRSServerFactoryBean();
    sf.setResourceClasses(CamelConnectorCatalogRest.class);
    sf.setResourceProvider(CamelConnectorCatalogRest.class,new SingletonResourceProvider(catalog));
    sf.setProvider(JacksonJsonProvider.class);
    sf.setAddress("http://localhost:" + port);
    server=sf.create();
    server.start();
  }
  @After public void stop(){
    if (server != null) {
      server.stop();
    }
  }
  @Test public void testEmptyFindConnectors() throws Exception {
    given().baseUri("http://localhost:" + port).accept("application/json").when().get("/camel-connector-catalog/findConnector?latestVersionOnly=false").then().body(Matchers.hasToString("[]"));
  }
  @Test public void testFindConnectors() throws Exception {
    catalog.getCatalog().addConnector("org.apache.camel","myfoo-connector","2.19.0","MyFoo","my-foo","org.myfoo.connector.MyFooComponent","Something cool","foo,timer",null,null,null);
    given().baseUri("http://localhost:" + port).accept("application/json").when().get("/camel-connector-catalog/findConnector?latestVersionOnly=false").then().body(Matchers.containsString("MyFoo"));
  }
}
