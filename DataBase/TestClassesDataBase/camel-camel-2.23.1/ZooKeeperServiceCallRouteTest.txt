public class ZooKeeperServiceCallRouteTest extends CamelTestSupport {
  private static final int SERVER_PORT=AvailablePortFinder.getNextAvailable();
  private static final String SERVICE_NAME="http-service";
  private static final int SERVICE_COUNT=5;
  private static final String SERVICE_PATH="/camel";
  private ZooKeeperTestSupport.TestZookeeperServer server;
  private CuratorFramework curator;
  private ServiceDiscovery<ZooKeeperServiceDiscovery.MetaData> discovery;
  private List<ServiceInstance<ZooKeeperServiceDiscovery.MetaData>> instances;
  private List<String> expectedBodies;
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    server=new ZooKeeperTestSupport.TestZookeeperServer(SERVER_PORT,true);
    ZooKeeperTestSupport.waitForServerUp("127.0.0.1:" + SERVER_PORT,1000);
    curator=CuratorFrameworkFactory.builder().connectString("127.0.0.1:" + SERVER_PORT).retryPolicy(new ExponentialBackoffRetry(1000,3)).build();
    discovery=ServiceDiscoveryBuilder.builder(ZooKeeperServiceDiscovery.MetaData.class).client(curator).basePath(SERVICE_PATH).serializer(new JsonInstanceSerializer<>(ZooKeeperServiceDiscovery.MetaData.class)).build();
    curator.start();
    discovery.start();
    instances=new ArrayList<>(SERVICE_COUNT);
    expectedBodies=new ArrayList<>(SERVICE_COUNT);
    for (int i=0; i < SERVICE_COUNT; i++) {
      ServiceInstance<ZooKeeperServiceDiscovery.MetaData> instance=ServiceInstance.<ZooKeeperServiceDiscovery.MetaData>builder().address("127.0.0.1").port(AvailablePortFinder.getNextAvailable()).name(SERVICE_NAME).id("service-" + i).build();
      discovery.registerService(instance);
      instances.add(instance);
      expectedBodies.add("ping on " + instance.getPort());
    }
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    for (    ServiceInstance<ZooKeeperServiceDiscovery.MetaData> instace : instances) {
      try {
        discovery.unregisterService(instace);
      }
 catch (      Exception e) {
      }
    }
    CloseableUtils.closeQuietly(discovery);
    CloseableUtils.closeQuietly(curator);
    server.shutdown();
  }
  @Test public void testServiceCall() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(SERVICE_COUNT);
    getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder(expectedBodies);
    instances.forEach(r -> template.sendBody("direct:start","ping"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").serviceCall().name(SERVICE_NAME).component("jetty").defaultLoadBalancer().zookeeperServiceDiscovery("127.0.0.1:" + SERVER_PORT,SERVICE_PATH).end().to("log:org.apache.camel.component.zookeeper.cloud?level=INFO&showAll=true&multiline=true").to("mock:result");
        instances.forEach(r -> fromF("jetty:http://%s:%d",r.getAddress(),r.getPort()).transform().simple("${in.body} on " + r.getPort()));
      }
    }
;
  }
}
