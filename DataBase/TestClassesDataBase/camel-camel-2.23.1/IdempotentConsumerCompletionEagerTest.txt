/** 
 * @version 
 */
public class IdempotentConsumerCompletionEagerTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  protected MockEndpoint a;
  protected MockEndpoint b;
  protected MockEndpoint dead;
  protected IdempotentRepository<String> repo;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testCompletionEager() throws Exception {
    repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").idempotentConsumer(header("messageId"),repo).completionEager(true).to("log:a","mock:a").to("log:b","mock:b").end().filter(simple("${header.messageId} == '2'")).throwException(new IllegalArgumentException("Forced")).end().to("log:result","mock:result");
      }
    }
);
    context.start();
    a.expectedBodiesReceived("one","two","three");
    b.expectedBodiesReceived("one","two","three");
    dead.expectedBodiesReceived("two","two");
    resultEndpoint.expectedBodiesReceived("one","one","one","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  @Test public void testNotCompletionEager() throws Exception {
    repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").idempotentConsumer(header("messageId"),repo).completionEager(false).to("log:a","mock:a").to("log:b","mock:b").end().filter(simple("${header.messageId} == '2'")).throwException(new IllegalArgumentException("Forced")).end().to("log:result","mock:result");
      }
    }
);
    context.start();
    a.expectedBodiesReceived("one","two","two","three");
    b.expectedBodiesReceived("one","two","two","three");
    dead.expectedBodiesReceived("two","two");
    resultEndpoint.expectedBodiesReceived("one","one","one","three");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("2","two");
    sendMessage("1","one");
    sendMessage("3","three");
    assertMockEndpointsSatisfied();
  }
  protected void sendMessage(  final Object messageId,  final Object body){
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("messageId",messageId);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start");
    resultEndpoint=getMockEndpoint("mock:result");
    a=getMockEndpoint("mock:a");
    b=getMockEndpoint("mock:b");
    dead=getMockEndpoint("mock:dead");
  }
}
