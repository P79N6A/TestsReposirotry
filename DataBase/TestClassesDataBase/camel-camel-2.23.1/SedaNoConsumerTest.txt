/** 
 * @version 
 */
public class SedaNoConsumerTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  public void testInOnly() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:foo?timeout=1000");
      }
    }
);
    context.start();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(1).create();
    template.sendBody("direct:start","Hello World");
    notify.matches(2,TimeUnit.SECONDS);
  }
  public void testInOut() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:foo?timeout=1000");
      }
    }
);
    context.start();
    try {
      template.requestBody("direct:start","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(ExchangeTimedOutException.class,e.getCause());
    }
  }
  @Test public void testFailIfNoConsumer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:foo?failIfNoConsumers=true");
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(SedaConsumerNotAvailableException.class,e.getCause());
    }
  }
  @Test public void testFailIfNoConsuemerAndMultipleConsumerSetting() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?failIfNoConsumers=true&multipleConsumers=true").to("mock:foo");
        from("seda:foo?failIfNoConsumers=true&multipleConsumers=true").to("mock:bar");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFailIfNoConsumesrAfterConsumersLeave() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?failIfNoConsumers=true").routeId("stopThisRoute").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo?failIfNoConsumers=true","Hello World");
    assertMockEndpointsSatisfied();
    context.stopRoute("stopThisRoute");
    TimeUnit.MILLISECONDS.sleep(100);
    try {
      template.sendBody("seda:foo?failIfNoConsumers=true","Hello World");
      fail("Should throw an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(SedaConsumerNotAvailableException.class,e.getCause());
    }
  }
  @Test public void testFailIfNoConsumersWithValidConsumer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").to("seda:foo?failIfNoConsumers=true");
        from("seda:foo").to("mock:foo");
      }
    }
);
    context.start();
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    template.sendBody("direct:in","Hello World");
    assertMockEndpointsSatisfied();
  }
}
