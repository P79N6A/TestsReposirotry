/** 
 * This unit test verifies a single route can service multiple templates.
 * @version 
 */
public class RestletMultiUriTemplatesEndpointTest extends RestletTestSupport {
  @Override protected JndiRegistry createRegistry() throws Exception {
    List<String> list=new ArrayList<>();
    list.add("/users/{username}");
    list.add("/atom/collection/{id}/component/{cid}");
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("uriTemplates",list);
    return jndi;
  }
  @Test public void testPostUserUriPattern() throws Exception {
    HttpResponse response=doExecute(new HttpPost("http://localhost:" + portNum + "/users/homer"));
    assertHttpResponse(response,200,"text/plain","POST homer");
  }
  @Test public void testGetAtomUriPattern() throws Exception {
    HttpResponse response=doExecute(new HttpGet("http://localhost:" + portNum + "/atom/collection/foo/component/bar"));
    assertHttpResponse(response,200,"text/plain","GET foo bar");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("restlet:http://localhost:" + portNum + "?restletMethods=post,get&restletUriPatterns=#uriTemplates").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String uri=exchange.getIn().getHeader(Exchange.HTTP_URI,String.class);
            String out=exchange.getIn().getHeader(Exchange.HTTP_METHOD,String.class);
            if (("http://localhost:" + portNum + "/users/homer").equals(uri)) {
              exchange.getOut().setBody(out + " " + exchange.getIn().getHeader("username",String.class));
            }
 else             if (("http://localhost:" + portNum + "/atom/collection/foo/component/bar").equals(uri)) {
              exchange.getOut().setBody(out + " " + exchange.getIn().getHeader("id",String.class)+ " "+ exchange.getIn().getHeader("cid",String.class));
            }
          }
        }
);
      }
    }
;
  }
}
