@RunWith(MockitoJUnitRunner.class) public class CometBindingTest {
  private static final Object FOO=new Object();
  private static final Long THIRTY_FOUR=Long.valueOf(34L);
  private static final Double TWO_POINT_ONE=Double.valueOf(2.1);
  private static final Integer EIGHT=new Integer(8);
  private static final String HELLO="hello";
  private static final String FOO_ATTR_NAME="foo";
  private static final String LONG_ATTR_NAME="long";
  private static final String DOUBLE_ATTR_NAME="double";
  private static final String INTEGER_ATTR_NAME="integer";
  private static final String STRING_ATTR_NAME="string";
  private static final String BOOLEAN_ATT_NAME="boolean";
  private CometdBinding testObj;
  @Mock private BayeuxServerImpl bayeux;
  @Mock private ServerSession remote;
  @Mock private ServerMessage cometdMessage;
  private final CamelContext camelContext=new DefaultCamelContext();
  @Before public void before(){
    testObj=new CometdBinding(bayeux);
    Set<String> attributeNames=new HashSet<>(Arrays.asList(STRING_ATTR_NAME,INTEGER_ATTR_NAME,LONG_ATTR_NAME,DOUBLE_ATTR_NAME,FOO_ATTR_NAME,BOOLEAN_ATT_NAME));
    when(remote.getAttributeNames()).thenReturn(attributeNames);
    when(remote.getAttribute(STRING_ATTR_NAME)).thenReturn(HELLO);
    when(remote.getAttribute(INTEGER_ATTR_NAME)).thenReturn(EIGHT);
    when(remote.getAttribute(LONG_ATTR_NAME)).thenReturn(THIRTY_FOUR);
    when(remote.getAttribute(DOUBLE_ATTR_NAME)).thenReturn(TWO_POINT_ONE);
    when(remote.getAttribute(FOO_ATTR_NAME)).thenReturn(FOO);
    when(remote.getAttribute(BOOLEAN_ATT_NAME)).thenReturn(Boolean.TRUE);
  }
  @Test public void testBindingTransfersSessionAttributtes(){
    testObj=new CometdBinding(bayeux,true);
    Message result=testObj.createCamelMessage(camelContext,remote,cometdMessage,null);
    assertEquals(6,result.getHeaders().size());
    assertEquals(HELLO,result.getHeader(STRING_ATTR_NAME));
    assertEquals(EIGHT,result.getHeader(INTEGER_ATTR_NAME));
    assertEquals(THIRTY_FOUR,result.getHeader(LONG_ATTR_NAME));
    assertEquals(TWO_POINT_ONE,result.getHeader(DOUBLE_ATTR_NAME));
    assertEquals(null,result.getHeader(FOO_ATTR_NAME));
    assertTrue((Boolean)result.getHeader(BOOLEAN_ATT_NAME));
  }
  @Test public void testBindingHonorsFlagForSessionAttributtes(){
    Message result=testObj.createCamelMessage(camelContext,remote,cometdMessage,null);
    assertEquals(1,result.getHeaders().size());
    assertEquals(null,result.getHeader(STRING_ATTR_NAME));
    assertEquals(null,result.getHeader(INTEGER_ATTR_NAME));
    assertEquals(null,result.getHeader(LONG_ATTR_NAME));
    assertEquals(null,result.getHeader(FOO_ATTR_NAME));
    assertEquals(null,result.getHeader(DOUBLE_ATTR_NAME));
    assertEquals(null,result.getHeader(BOOLEAN_ATT_NAME));
  }
  @Test public void testSubscriptionHeadersPassed(){
    String expectedSubscriptionInfo="subscriptionInfo";
    when(cometdMessage.get(CometdBinding.COMETD_SUBSCRIPTION_HEADER_NAME)).thenReturn(expectedSubscriptionInfo);
    Message result=testObj.createCamelMessage(camelContext,remote,cometdMessage,null);
    assertEquals(2,result.getHeaders().size());
    assertEquals(expectedSubscriptionInfo,result.getHeader(CometdBinding.COMETD_SUBSCRIPTION_HEADER_NAME));
  }
}
