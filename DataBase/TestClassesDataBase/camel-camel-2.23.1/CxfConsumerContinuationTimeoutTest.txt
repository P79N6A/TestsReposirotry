public class CxfConsumerContinuationTimeoutTest extends CamelTestSupport {
  private static final String ECHO_METHOD="ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\"";
  private static final String ECHO_RESPONSE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>"+ "</ns1:echoResponse></soap:Body></soap:Envelope>";
  private static final String ECHO_BOOLEAN_RESPONSE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echoBooleanResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">true</return>"+ "</ns1:echoBooleanResponse></soap:Body></soap:Envelope>";
  protected final String simpleEndpointAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/test";
  protected final String simpleEndpointURI="cxf://" + simpleEndpointAddress + "?serviceClass=org.apache.camel.component.cxf.HelloService";
  protected ExecutorService pool;
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        pool=context.getExecutorServiceManager().newSingleThreadExecutor(this,"MyPool");
        from("direct:start").setBody(constant("Sensitive Data")).to(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=MESSAGE");
        from(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=MESSAGE").process(new AsyncProcessor(){
          @Override public void process(          Exchange exchange) throws Exception {
            AsyncProcessorHelper.process(this,exchange);
          }
          @Override public boolean process(          Exchange exchange,          AsyncCallback asyncCallback){
            Message in=exchange.getIn();
            Object value=in.getHeader("Content-Length");
            assertNull("The Content-Length header should be removed",value);
            String request=in.getBody(String.class);
            String priority=in.getHeader("priority","fast",String.class);
            if ("slow".equalsIgnoreCase(priority)) {
              pool.submit(() -> {
                try {
                  log.info("Sleeping for 10 seconds to simulate slow response");
                  Thread.sleep(10000);
                }
 catch (                InterruptedException e) {
                }
 finally {
                  asyncCallback.done(false);
                }
              }
);
              return false;
            }
 else {
              if (request.indexOf(ECHO_METHOD) > 0) {
                exchange.getOut().setBody(ECHO_RESPONSE);
              }
 else {
                exchange.getOut().setBody(ECHO_BOOLEAN_RESPONSE);
              }
            }
            asyncCallback.done(true);
            return true;
          }
        }
);
      }
    }
;
  }
  @Test public void testNoTimeout() throws Exception {
    Object out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals(ECHO_BOOLEAN_RESPONSE,out);
  }
  @Test public void testTimeout() throws Exception {
    String out=template.requestBodyAndHeader("direct:start","Bye World","priority","slow",String.class);
    assertTrue(out.contains("The OUT message was not received within: 5000 millis."));
  }
}
