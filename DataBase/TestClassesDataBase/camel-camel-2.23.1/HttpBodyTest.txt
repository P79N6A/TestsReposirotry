/** 
 * @version 
 */
public class HttpBodyTest extends BaseHttpTest {
  private String protocolString="http4://";
  private String charset="ISO-8859-1";
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    Map<String,String> expectedHeaders=new HashMap<>();
    expectedHeaders.put("Content-Type","image/jpeg");
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/post",new BasicValidationHandler("POST",null,getBody(),getExpectedContent())).registerHandler("/post1",new HeaderValidationHandler("POST",null,null,getExpectedContent(),expectedHeaders)).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  public String getProtocolString(){
    return protocolString;
  }
  public void setProtocolString(  String protocol){
    protocolString=protocol;
  }
  @Test public void httpPostWithStringBody() throws Exception {
    Exchange exchange=template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/post",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setProperty(Exchange.CHARSET_NAME,charset);
        exchange.getIn().setBody(getBody());
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void httpPostWithByteArrayBody() throws Exception {
    Exchange exchange=template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/post",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(getBody().getBytes(charset));
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void httpPostWithInputStreamBody() throws Exception {
    Exchange exchange=template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/post",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(new ByteArrayInputStream(getBody().getBytes(charset)));
      }
    }
);
    assertExchange(exchange);
  }
  @Test public void httpPostWithImage() throws Exception {
    Exchange exchange=template.send(getProtocolString() + localServer.getInetAddress().getHostName() + ":"+ localServer.getLocalPort()+ "/post1",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(new File("src/test/data/logo.jpeg"));
        exchange.getIn().setHeader("Content-Type","image/jpeg");
      }
    }
);
    assertExchange(exchange);
  }
  protected String getBody(){
    return "hl=de&q=camel+rocks";
  }
}
