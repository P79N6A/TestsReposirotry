@RunWith(FrameworkRunner.class) @CreateLdapServer(transports={@CreateTransport(protocol="LDAP")}) public class LdifRouteTest extends AbstractLdapTestUnit {
  private static final String LDAP_CONN_NAME="conn";
  private static final String ENDPOINT_LDIF="ldif:" + LDAP_CONN_NAME;
  private static final String ENDPOINT_START="direct:start";
  private static final SearchControls SEARCH_CONTROLS=new SearchControls(SearchControls.SUBTREE_SCOPE,0,0,null,true,true);
  private CamelContext camel;
  private ProducerTemplate template;
  private LdapContext ldapContext;
  @Before public void setup() throws Exception {
    ldapContext=getWiredContext(ldapServer);
    SimpleRegistry reg=new SimpleRegistry();
    reg.put(LDAP_CONN_NAME,getWiredConnection(ldapServer));
    camel=new DefaultCamelContext(reg);
    template=camel.createProducerTemplate();
  }
  @After public void tearDown() throws Exception {
    camel.stop();
  }
  @Test public void addOne() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/AddOne.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(2));
    assertThat(ldifResults.get(0),equalTo("success"));
    assertThat(ldifResults.get(1),equalTo("success"));
    SearchResult sr;
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertNotNull(searchResults);
    sr=searchResults.next();
    assertNotNull(sr);
    assertThat("uid=test1,ou=test,ou=system",equalTo(sr.getName()));
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @Test public void addOneInline() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/AddOne.ldif");
    exchange.getIn().setBody(readUrl(loc));
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(2));
    assertThat(ldifResults.get(0),equalTo("success"));
    assertThat(ldifResults.get(1),equalTo("success"));
    SearchResult sr;
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertNotNull(searchResults);
    sr=searchResults.next();
    assertNotNull(sr);
    assertThat("uid=test1,ou=test,ou=system",equalTo(sr.getName()));
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @Test @ApplyLdifFiles({"org/apache/camel/component/ldif/DeleteOneSetup.ldif"}) public void deleteOne() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/DeleteOne.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(1));
    assertThat(ldifResults.get(0),equalTo("success"));
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @Test @ApplyLdifFiles({"org/apache/camel/component/ldif/AddDuplicateSetup.ldif"}) public void addDuplicate() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/AddDuplicate.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(1));
    assertThat(ldifResults.get(0),not(equalTo("success")));
  }
  @Test @ApplyLdifFiles({"org/apache/camel/component/ldif/ModifySetup.ldif"}) public void modify() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/Modify.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(1));
    assertThat(ldifResults.get(0),equalTo("success"));
    SearchResult sr;
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertNotNull(searchResults);
    sr=searchResults.next();
    assertNotNull(sr);
    assertThat("uid=test4,ou=test,ou=system",equalTo(sr.getName()));
    Attributes attribs=sr.getAttributes();
    assertNotNull(attribs);
    Attribute attrib=attribs.get("sn");
    assertNotNull(attribs);
    assertThat(1,equalTo(attrib.size()));
    assertThat("5",equalTo(attrib.get(0).toString()));
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @Test @ApplyLdifFiles({"org/apache/camel/component/ldif/ModRdnSetup.ldif"}) public void modRdn() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/ModRdn.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(1));
    assertThat(ldifResults.get(0),equalTo("success"));
    SearchResult sr;
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertNotNull(searchResults);
    sr=searchResults.next();
    assertNotNull(sr);
    assertThat("uid=test6,ou=test,ou=system",equalTo(sr.getName()));
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @Test @ApplyLdifFiles({"org/apache/camel/component/ldif/ModDnSetup.ldif"}) public void modDn() throws Exception {
    camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
    camel.start();
    Endpoint endpoint=camel.getEndpoint(ENDPOINT_START);
    Exchange exchange=endpoint.createExchange();
    URL loc=this.getClass().getResource("/org/apache/camel/component/ldif/ModDn.ldif");
    exchange.getIn().setBody(loc.toString());
    Exchange out=template.send(endpoint,exchange);
    List<String> ldifResults=defaultLdapModuleOutAssertions(out);
    assertThat(ldifResults,notNullValue());
    assertThat(ldifResults.size(),equalTo(1));
    assertThat(ldifResults.get(0),equalTo("success"));
    SearchResult sr;
    NamingEnumeration<SearchResult> searchResults=ldapContext.search("","(uid=test*)",SEARCH_CONTROLS);
    assertNotNull(searchResults);
    sr=searchResults.next();
    assertNotNull(sr);
    assertThat("uid=test7,ou=testnew,ou=system",equalTo(sr.getName()));
    assertThat(false,equalTo(searchResults.hasMore()));
  }
  @SuppressWarnings("unchecked") private List<String> defaultLdapModuleOutAssertions(  Exchange out){
    assertNotNull(out);
    assertNotNull(out.getOut());
    List<String> data=out.getOut().getBody(List.class);
    assertNotNull("out body could not be converted to a List - was: " + out.getOut().getBody(),data);
    return data;
  }
  protected RouteBuilder createRouteBuilder(  final String ldapEndpointUrl) throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(ENDPOINT_START).to(ldapEndpointUrl);
      }
    }
;
  }
  /** 
 * Read the contents of a URL into a String
 * @param in
 * @return
 * @throws IOException
 */
  private String readUrl(  URL in) throws IOException {
    BufferedReader br=new BufferedReader(new InputStreamReader(in.openStream()));
    StringBuffer buf=new StringBuffer();
    String s;
    while (null != (s=br.readLine())) {
      buf.append(s);
      buf.append('\n');
    }
    return buf.toString();
  }
}
