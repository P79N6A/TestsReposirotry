public class ConsulTestSupport extends ContainerAwareTestSupport {
  public static final String CONTAINER_IMAGE="consul:1.0.7";
  public static final String CONTAINER_NAME="consul";
  public static final String KV_PREFIX="/camel";
  @Rule public final TestName testName=new TestName();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    ConsulComponent component=new ConsulComponent();
    component.setUrl(consulUrl());
    registry.bind("consul",component);
    return registry;
  }
  protected Consul getConsul(){
    return Consul.builder().withUrl(consulUrl()).build();
  }
  protected KeyValueClient getKeyValueClient(){
    return getConsul().keyValueClient();
  }
  protected String generateRandomString(){
    return UUID.randomUUID().toString();
  }
  protected String[] generateRandomArrayOfStrings(  int size){
    String[] array=new String[size];
    Arrays.setAll(array,i -> generateRandomString());
    return array;
  }
  protected List<String> generateRandomListOfStrings(  int size){
    return Arrays.asList(generateRandomArrayOfStrings(size));
  }
  protected String generateKey(){
    return KV_PREFIX + "/" + testName.getMethodName()+ "/"+ generateRandomString();
  }
  protected String consulUrl(){
    return String.format("http://%s:%d",getContainerHost(CONTAINER_NAME),getContainerPort(CONTAINER_NAME,Consul.DEFAULT_HTTP_PORT));
  }
  @Override protected GenericContainer<?> createContainer(){
    return consulContainer();
  }
  public static GenericContainer consulContainer(){
    return new GenericContainer(CONTAINER_IMAGE).withNetworkAliases(CONTAINER_NAME).withExposedPorts(Consul.DEFAULT_HTTP_PORT).waitingFor(Wait.forLogMessageContaining("Synced node info",1)).withCommand("agent","-dev","-server","-bootstrap","-client","0.0.0.0","-log-level","trace");
  }
}
