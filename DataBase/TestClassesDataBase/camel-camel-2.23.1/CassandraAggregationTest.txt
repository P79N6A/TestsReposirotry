/** 
 * Unite test for  {@link CassandraAggregationRepository}
 */
public class CassandraAggregationTest extends CamelTestSupport {
  private Cluster cluster;
  private CassandraAggregationRepository aggregationRepository;
  public static boolean canTest(){
    return System.getenv("BUILD_ID") == null;
  }
  @Override protected void doPreSetup() throws Exception {
    if (canTest()) {
      CassandraUnitUtils.startEmbeddedCassandra();
      cluster=CassandraUnitUtils.cassandraCluster();
      Session rootSession=cluster.connect();
      CassandraUnitUtils.loadCQLDataSet(rootSession,"NamedAggregationDataSet.cql");
      rootSession.close();
      aggregationRepository=new NamedCassandraAggregationRepository(cluster,CassandraUnitUtils.KEYSPACE,"ID");
      aggregationRepository.setTable("NAMED_CAMEL_AGGREGATION");
      aggregationRepository.start();
    }
    super.doPreSetup();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    if (canTest()) {
      aggregationRepository.stop();
      cluster.close();
      try {
        CassandraUnitUtils.cleanEmbeddedCassandra();
      }
 catch (      Throwable e) {
      }
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        AggregationStrategy aggregationStrategy=new AggregationStrategy(){
          @Override public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String oldBody=oldExchange.getIn().getBody(String.class);
            String newBody=newExchange.getIn().getBody(String.class);
            oldExchange.getIn().setBody(oldBody + "," + newBody);
            return oldExchange;
          }
        }
;
        from("direct:input").aggregate(header("aggregationId"),aggregationStrategy).completionSize(3).completionTimeout(3000L).aggregationRepository(aggregationRepository).to("mock:output");
      }
    }
;
  }
  private void send(  String aggregationId,  String body){
    super.template.sendBodyAndHeader("direct:input",body,"aggregationId",aggregationId);
  }
  @Test public void testAggregationRoute() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint mockOutput=getMockEndpoint("mock:output");
    mockOutput.expectedMessageCount(2);
    mockOutput.expectedBodiesReceivedInAnyOrder("A,C,E","B,D");
    send("1","A");
    send("2","B");
    send("1","C");
    send("2","D");
    send("1","E");
    mockOutput.assertIsSatisfied(4000L);
  }
}
