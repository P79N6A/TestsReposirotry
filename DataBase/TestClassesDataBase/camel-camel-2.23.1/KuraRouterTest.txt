public class KuraRouterTest extends Assert {
  TestKuraRouter router=new TestKuraRouter();
  BundleContext bundleContext=mock(BundleContext.class,RETURNS_DEEP_STUBS);
  ConfigurationAdmin configurationAdmin=mock(ConfigurationAdmin.class);
  Configuration configuration=mock(Configuration.class);
  @Before public void before() throws Exception {
    given(bundleContext.getBundle().getVersion().toString()).willReturn("version");
    given(bundleContext.getBundle().getSymbolicName()).willReturn("symbolic_name");
    given(bundleContext.getService(any(ServiceReference.class))).willReturn(configurationAdmin);
    router.start(bundleContext);
  }
  @After public void after() throws Exception {
    router.stop(bundleContext);
  }
  @Test public void shouldCloseCamelContext() throws Exception {
    router.stop(bundleContext);
    Assert.assertEquals(ServiceStatus.Stopped,router.camelContext.getStatus());
  }
  @Test public void shouldStartCamelContext() throws Exception {
    String message="foo";
    MockEndpoint mockEndpoint=router.camelContext.getEndpoint("mock:test",MockEndpoint.class);
    mockEndpoint.expectedBodiesReceived(message);
    router.producerTemplate.sendBody("direct:start",message);
    mockEndpoint.assertIsSatisfied();
  }
  @Test public void shouldCreateConsumerTemplate() throws Exception {
    assertNotNull(router.consumerTemplate);
  }
  @Test public void shouldReturnNoService(){
    given(bundleContext.getServiceReference(any(String.class))).willReturn(null);
    assertNull(router.service(ConfigurationAdmin.class));
  }
  @Test public void shouldReturnService(){
    assertNotNull(router.service(ConfigurationAdmin.class));
  }
  @Test(expected=IllegalStateException.class) public void shouldValidateLackOfService(){
    given(bundleContext.getServiceReference(any(String.class))).willReturn(null);
    router.requiredService(ConfigurationAdmin.class);
  }
  @Test public void shouldLoadXmlRoutes() throws Exception {
    given(configurationAdmin.getConfiguration(anyString())).willReturn(configuration);
    Dictionary<String,Object> properties=new Hashtable<>();
    String routeDefinition=IOUtils.toString(getClass().getResource("/route.xml"),StandardCharsets.UTF_8);
    properties.put("kura.camel.symbolic_name.route",routeDefinition);
    given(configuration.getProperties()).willReturn(properties);
    router.start(router.bundleContext);
    assertNotNull(router.camelContext.getRouteDefinition("loaded"));
  }
static class TestKuraRouter extends KuraRouter {
    @Override public void configure() throws Exception {
      from("direct:start").to("mock:test");
    }
    @Override protected CamelContext createCamelContext(){
      return new DefaultCamelContext();
    }
  }
}
