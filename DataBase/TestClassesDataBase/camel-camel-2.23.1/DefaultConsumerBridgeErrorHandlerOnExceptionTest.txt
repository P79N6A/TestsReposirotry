/** 
 */
public class DefaultConsumerBridgeErrorHandlerOnExceptionTest extends ContextTestSupport {
  protected final CountDownLatch latch=new CountDownLatch(1);
  @Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World","Hello World");
    getMockEndpoint("mock:a").expectedBodiesReceived("Cannot process");
    getMockEndpoint("mock:b").expectedBodiesReceived("Cannot process");
    getMockEndpoint("mock:dead").expectedBodiesReceived("Cannot process");
    latch.countDown();
    assertMockEndpointsSatisfied();
    Exception cause=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
    assertNotNull(cause);
    assertEquals("Simulated",cause.getMessage());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().addComponent("my",new MyComponent());
        onException(Exception.class).handled(true).to("mock:a").to("direct:error").to("mock:dead");
        from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result");
        from("direct:error").to("mock:b").log("Error happened due ${exception.message}");
      }
    }
;
  }
public class MyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      return new MyEndpoint(uri,this);
    }
  }
public class MyEndpoint extends DefaultEndpoint {
    public MyEndpoint(    String endpointUri,    Component component){
      super(endpointUri,component);
    }
    @Override public Producer createProducer() throws Exception {
      return null;
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      Consumer answer=new MyConsumer(this,processor);
      configureConsumer(answer);
      return answer;
    }
    @Override public boolean isSingleton(){
      return true;
    }
  }
public class MyConsumer extends DefaultConsumer {
    private int invoked;
    public MyConsumer(    Endpoint endpoint,    Processor processor){
      super(endpoint,processor);
    }
    public void doSomething() throws Exception {
      try {
        if (invoked++ == 0) {
          throw new IllegalArgumentException("Simulated");
        }
        Exchange exchange=getEndpoint().createExchange();
        exchange.getIn().setBody("Hello World");
        getProcessor().process(exchange);
      }
 catch (      Exception e) {
        getExceptionHandler().handleException("Cannot process",e);
      }
    }
    @Override protected void doStart() throws Exception {
      super.doStart();
      Thread thread=new Thread(){
        @Override public void run(){
          try {
            latch.await(5,TimeUnit.SECONDS);
            doSomething();
            doSomething();
            doSomething();
          }
 catch (          Exception e) {
          }
        }
      }
;
      thread.start();
    }
  }
}
