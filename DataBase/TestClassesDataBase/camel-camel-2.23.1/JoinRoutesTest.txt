/** 
 * @version 
 */
public class JoinRoutesTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Test public void testMessagesThroughDifferentRoutes() throws Exception {
    resultEndpoint.expectedBodiesReceived("one","two","three");
    sendMessage("bar","one");
    sendMessage("cheese","two");
    sendMessage("somethingUndefined","three");
    resultEndpoint.assertIsSatisfied();
  }
  protected void sendMessage(  final Object headerValue,  final Object body) throws Exception {
    template.send(startEndpoint,new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody(body);
        in.setHeader("foo",headerValue);
      }
    }
);
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:a");
    resultEndpoint=getMockEndpoint("mock:result");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        context.setTracing(true);
        from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d");
        from("direct:b").to("mock:result");
        from("direct:c").to("mock:result");
        from("direct:d").to("mock:result");
      }
    }
;
  }
}
