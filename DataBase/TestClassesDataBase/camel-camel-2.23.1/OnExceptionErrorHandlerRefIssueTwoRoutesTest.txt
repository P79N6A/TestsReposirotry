/** 
 */
public class OnExceptionErrorHandlerRefIssueTwoRoutesTest extends ContextTestSupport {
  @Test public void testOnExceptionErrorHandlerRef() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOnExceptionErrorHandlerRefFoo() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(0);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:foo","Hello Foo");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myDLC",new DeadLetterChannelBuilder("mock:dead"));
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(new ErrorHandlerBuilderRef("myDLC"));
        from("direct:foo").to("mock:foo").throwException(new IllegalArgumentException("Damn Foo"));
        from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:a").throwException(new IllegalArgumentException("Damn"));
      }
    }
;
  }
}
