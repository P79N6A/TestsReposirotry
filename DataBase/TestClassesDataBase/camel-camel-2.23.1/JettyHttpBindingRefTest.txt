/** 
 * Unit test for jetty http binding ref option.
 */
public class JettyHttpBindingRefTest extends BaseJettyTest {
  @Test public void testDefaultJettyHttpBinding() throws Exception {
    Object out=template.requestBody("jetty:http://localhost:{{port}}/myapp/myservice?jettyHttpBindingRef=default","Hello World");
    assertEquals("Bye World",context.getTypeConverter().convertTo(String.class,out));
    try {
      template.requestBody("jetty:http://localhost:{{port}}/myapp/myotherservice","Hello World");
      fail();
    }
 catch (    CamelExecutionException e) {
      assertNotNull(e.getCause());
      assertTrue(e.getCause() instanceof HttpOperationFailedException);
      assertFalse("Not exactly the message the server returned.".equals(((HttpOperationFailedException)e.getCause()).getResponseBody()));
    }
  }
  @Test public void testCustomJettyHttpBinding() throws Exception {
    Object out=template.requestBody("jetty:http://localhost:{{port}}/myapp/myotherservice?jettyHttpBindingRef=myownbinder","Hello World");
    assertEquals("Not exactly the message the server returned.",context.getTypeConverter().convertTo(String.class,out));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("default",new DefaultJettyHttpBinding());
    jndi.bind("myownbinder",new MyJettyHttpBinding());
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(noErrorHandler());
        from("jetty:http://localhost:{{port}}/myapp/myservice").transform().constant("Bye World");
        from("jetty:http://localhost:{{port}}/myapp/myotherservice").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new IllegalStateException("Not implemented");
          }
        }
);
      }
    }
;
  }
public class MyJettyHttpBinding extends DefaultJettyHttpBinding {
    @Override protected void populateResponse(    Exchange exchange,    JettyContentExchange httpExchange,    Message in,    HeaderFilterStrategy strategy,    int responseCode) throws IOException {
      Message answer=exchange.getOut();
      answer.setHeaders(in.getHeaders());
      answer.setHeader(Exchange.HTTP_RESPONSE_CODE,responseCode);
      answer.setBody("Not exactly the message the server returned.");
    }
  }
}
