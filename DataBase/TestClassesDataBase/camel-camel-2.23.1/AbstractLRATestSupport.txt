/** 
 * Base class for LRA based tests.
 */
public abstract class AbstractLRATestSupport extends CamelTestSupport {
  private Integer serverPort;
  private int activeLRAs;
  @Before public void getActiveLRAs() throws IOException {
    this.activeLRAs=getNumberOfActiveLRAs();
  }
  @After public void checkActiveLRAs() throws IOException {
    Assert.assertEquals("Some LRA have been left pending",activeLRAs,getNumberOfActiveLRAs());
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addService(createLRASagaService());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().port(getServerPort());
      }
    }
);
    return context;
  }
  protected LRASagaService createLRASagaService(){
    LRASagaService sagaService=new LRASagaService();
    sagaService.setCoordinatorUrl(getCoordinatorURL());
    sagaService.setLocalParticipantUrl("http://localhost:" + getServerPort());
    return sagaService;
  }
  protected int getNumberOfActiveLRAs() throws IOException {
    Client client=ClientBuilder.newClient();
    Response response=client.target(getCoordinatorURL() + "/lra-coordinator").request().accept("application/json").get();
    ObjectMapper mapper=new ObjectMapper();
    JsonNode lras=mapper.readTree(InputStream.class.cast(response.getEntity()));
    return lras.size();
  }
  private String getCoordinatorURL(){
    String url=System.getenv("LRA_COORDINATOR_URL");
    if (url == null) {
      throw new IllegalStateException("Cannot run test: environment variable LRA_COORDINATOR_URL is missing");
    }
    return url;
  }
  protected int getServerPort(){
    if (serverPort == null) {
      serverPort=AvailablePortFinder.getNextAvailable();
    }
    return serverPort;
  }
}
