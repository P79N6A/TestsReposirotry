public class RouteboxDispatchMapTest extends RouteboxDemoTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(RouteboxSedaTest.class);
  private ProducerTemplate template;
  private String routeboxUri="routebox:multipleRoutes?innerRegistry=#registry&routeBuilders=#routes&dispatchMap=#map";
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=new JndiRegistry(createJndiContext());
    List<RouteBuilder> routes=new ArrayList<>();
    routes.add(new SimpleRouteBuilder());
    registry.bind("registry",createInnerRegistry());
    registry.bind("routes",routes);
    Map<String,String> map=new HashMap<>();
    map.put("addToCatalog","seda:addToCatalog");
    map.put("findBook","seda:findBook");
    registry.bind("map",map);
    return registry;
  }
  private JndiRegistry createInnerRegistry() throws Exception {
    JndiRegistry innerRegistry=new JndiRegistry(createJndiContext());
    BookCatalog catalogBean=new BookCatalog();
    innerRegistry.bind("library",catalogBean);
    return innerRegistry;
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testRouteboxUsingDispatchMap() throws Exception {
    template=new DefaultProducerTemplate(context);
    template.start();
    context.addRoutes(new RouteBuilder(){
      public void configure(){
        from(routeboxUri).to("log:Routes operation performed?showAll=true");
      }
    }
);
    context.start();
    LOG.debug("Beginning Test ---> testRouteboxUsingDispatchMap()");
    Book book=new Book("Sir Arthur Conan Doyle","The Adventures of Sherlock Holmes");
    String response=sendAddToCatalogRequest(template,routeboxUri,"addToCatalog",book);
    assertEquals("Book with Author " + book.getAuthor() + " and title "+ book.getTitle()+ " added to Catalog",response);
    book=sendFindBookRequest(template,routeboxUri,"findBook","Sir Arthur Conan Doyle");
    LOG.debug("Received book with author {} and title {}",book.getAuthor(),book.getTitle());
    assertEquals("The Adventures of Sherlock Holmes",book.getTitle());
    LOG.debug("Completed Test ---> testRouteboxUsingDispatchMap()");
    context.stop();
  }
}
