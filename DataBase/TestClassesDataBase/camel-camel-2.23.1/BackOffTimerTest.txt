public class BackOffTimerTest {
  @Test public void testBackOffTimer() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    final AtomicInteger counter=new AtomicInteger(0);
    final ScheduledExecutorService executor=Executors.newScheduledThreadPool(3);
    final BackOff backOff=BackOff.builder().delay(100).build();
    final BackOffTimer timer=new BackOffTimer(executor);
    BackOffTimer.Task task=timer.schedule(backOff,context -> {
      Assert.assertEquals(counter.incrementAndGet(),context.getCurrentAttempts());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100 * counter.get(),context.getCurrentElapsedTime());
      return counter.get() < 5;
    }
);
    task.whenComplete((context,throwable) -> {
      Assert.assertEquals(5,counter.get());
      latch.countDown();
    }
);
    latch.await(5,TimeUnit.SECONDS);
    executor.shutdownNow();
  }
  @Test public void testBackOffTimerWithMaxAttempts() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    final AtomicInteger counter=new AtomicInteger(0);
    final ScheduledExecutorService executor=Executors.newScheduledThreadPool(3);
    final BackOff backOff=BackOff.builder().delay(100).maxAttempts(5L).build();
    final BackOffTimer timer=new BackOffTimer(executor);
    BackOffTimer.Task task=timer.schedule(backOff,context -> {
      Assert.assertEquals(counter.incrementAndGet(),context.getCurrentAttempts());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100 * counter.get(),context.getCurrentElapsedTime());
      return true;
    }
);
    task.whenComplete((context,throwable) -> {
      Assert.assertEquals(5,counter.get());
      Assert.assertEquals(BackOffTimer.Task.Status.Exhausted,context.getStatus());
      latch.countDown();
    }
);
    latch.await(5,TimeUnit.SECONDS);
    executor.shutdownNow();
  }
  @Test public void testBackOffTimerWithMaxElapsedTime() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    final AtomicInteger counter=new AtomicInteger(0);
    final ScheduledExecutorService executor=Executors.newScheduledThreadPool(3);
    final BackOff backOff=BackOff.builder().delay(100).maxElapsedTime(400).build();
    final BackOffTimer timer=new BackOffTimer(executor);
    BackOffTimer.Task task=timer.schedule(backOff,context -> {
      Assert.assertEquals(counter.incrementAndGet(),context.getCurrentAttempts());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100,context.getCurrentDelay());
      Assert.assertEquals(100 * counter.get(),context.getCurrentElapsedTime());
      return true;
    }
);
    task.whenComplete((context,throwable) -> {
      Assert.assertTrue(counter.get() <= 5);
      Assert.assertEquals(BackOffTimer.Task.Status.Exhausted,context.getStatus());
      latch.countDown();
    }
);
    latch.await(5,TimeUnit.SECONDS);
    executor.shutdownNow();
  }
  @Test public void testBackOffTimerStop() throws Exception {
    final CountDownLatch latch=new CountDownLatch(5);
    final AtomicBoolean done=new AtomicBoolean(false);
    final ScheduledExecutorService executor=Executors.newScheduledThreadPool(3);
    final BackOff backOff=BackOff.builder().delay(100).build();
    final BackOffTimer timer=new BackOffTimer(executor);
    BackOffTimer.Task task=timer.schedule(backOff,context -> {
      Assert.assertEquals(BackOffTimer.Task.Status.Active,context.getStatus());
      latch.countDown();
      return false;
    }
);
    task.whenComplete((context,throwable) -> {
      Assert.assertEquals(BackOffTimer.Task.Status.Inactive,context.getStatus());
      done.set(true);
    }
);
    latch.await(2,TimeUnit.SECONDS);
    task.cancel();
    Assert.assertTrue(done.get());
    executor.shutdownNow();
  }
}
