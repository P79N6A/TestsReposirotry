public class RouteAwareRouteTest extends ContextTestSupport {
  @Test public void testRouteAware() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("foo");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("foo").process(new MyProcessor()).to("mock:result");
      }
    }
;
  }
private static final class MyProcessor extends ServiceSupport implements Processor, RouteAware {
    private Route route;
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody(route.getId());
    }
    @Override public void setRoute(    Route route){
      this.route=route;
    }
    @Override public Route getRoute(){
      return route;
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
