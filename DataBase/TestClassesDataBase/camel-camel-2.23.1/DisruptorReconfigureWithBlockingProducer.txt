/** 
 * @version
 */
public class DisruptorReconfigureWithBlockingProducer extends CamelTestSupport {
  @Test public void testDisruptorReconfigureWithBlockingProducer() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(20);
    getMockEndpoint("mock:b").expectedMinimumMessageCount(10);
    long beforeStart=System.currentTimeMillis();
    ProducerThread producerThread=new ProducerThread();
    producerThread.start();
    assertTrue(producerThread.awaitFullBufferProduced());
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo?multipleConsumers=true&size=8").id("testRoute").to("mock:b");
      }
    }
);
    assertTrue("Reconfigure of Disruptor blocked",(System.currentTimeMillis() - beforeStart) < 2000);
    assertTrue(producerThread.checkResult());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("disruptor:foo?multipleConsumers=true&size=8").delay(200).to("mock:a");
      }
    }
;
  }
private class ProducerThread extends Thread {
    private final CountDownLatch startedLatch=new CountDownLatch(1);
    private final CountDownLatch resultLatch=new CountDownLatch(1);
    private Exception exception;
    @Override public void run(){
      for (int i=0; i < 8; i++) {
        template.sendBody("disruptor:foo","Message");
      }
      startedLatch.countDown();
      try {
        for (int i=0; i < 12; i++) {
          template.sendBody("disruptor:foo","Message");
        }
      }
 catch (      Exception e) {
        exception=e;
      }
      resultLatch.countDown();
    }
    public boolean awaitFullBufferProduced() throws InterruptedException {
      return startedLatch.await(5,TimeUnit.SECONDS);
    }
    public boolean checkResult() throws Exception {
      if (exception != null) {
        throw exception;
      }
      boolean result=resultLatch.await(5,TimeUnit.SECONDS);
      if (exception != null) {
        throw exception;
      }
      return result;
    }
  }
}
