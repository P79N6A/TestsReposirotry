/** 
 * @version
 */
public class HttpStreamCacheFileStopIssueTest extends BaseJettyTest {
  private String body="12345678901234567890123456789012345678901234567890";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/cachedir");
    createDirectory("target/cachedir");
    super.setUp();
  }
  @Test public void testStreamCacheToFileShouldBeDeletedInCaseOfStop() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(0);
    String out=template.requestBody("direct:start","Hello World",String.class);
    assertEquals(body,out);
    File file=new File("target/cachedir");
    String[] files=file.list();
    assertEquals("There should be no files",0,files.length);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getProperties().put(CachedOutputStream.TEMP_DIR,"target/cachedir");
        context.getProperties().put(CachedOutputStream.THRESHOLD,"16");
        context.setStreamCaching(true);
        from("direct:start").to("http://localhost:{{port}}/myserver").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            File file=new File("target/cachedir");
            String[] files=file.list();
            assertTrue("There should be a temp cache file",files.length > 0);
          }
        }
).convertBodyTo(String.class).stop().to("mock:result");
        from("jetty://http://localhost:{{port}}/myserver").transform().constant(body);
      }
    }
;
  }
}
