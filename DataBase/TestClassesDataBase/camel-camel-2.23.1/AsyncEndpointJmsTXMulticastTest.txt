/** 
 * @version 
 */
public class AsyncEndpointJmsTXMulticastTest extends CamelSpringTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/jms/tx/JmsTransacted-context.xml");
  }
  @Test public void testAsyncEndpointOK() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    template.sendBody("activemq:queue:inbox","Hello Camel");
    assertMockEndpointsSatisfied();
    assertTrue("Should use same threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("activemq:queue:inbox").transacted().to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
            assertTrue("Exchange should be transacted",exchange.isTransacted());
          }
        }
).multicast().to("direct:foo");
        from("direct:foo").to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
            assertTrue("Exchange should be transacted",exchange.isTransacted());
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
}
