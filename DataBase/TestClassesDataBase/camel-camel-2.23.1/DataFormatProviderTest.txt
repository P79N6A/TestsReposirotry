public class DataFormatProviderTest extends Assert {
  @Test public void testIsReadableWriteableSpecificMatch(){
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat("text/plain",new TestDataFormat());
    assertTrue(p.isReadable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
    assertTrue(p.isWriteable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
  }
  @Test public void testIsReadableWriteableComplexSubMatch(){
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat("text/plain",new TestDataFormat());
    assertTrue(p.isReadable(Book.class,Book.class,new Annotation[]{},MediaType.valueOf("text/plain+v2")));
    assertTrue(p.isWriteable(Book.class,Book.class,new Annotation[]{},MediaType.valueOf("text/plain+v2")));
  }
  @Test public void testIsReadableWriteableStarMatch(){
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat(new TestDataFormat());
    assertTrue(p.isReadable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
    assertTrue(p.isWriteable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
  }
  @Test public void testNotReadableWriteable(){
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat("application/json",new TestDataFormat());
    assertFalse(p.isReadable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
    assertFalse(p.isWriteable(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE));
  }
  @Test public void testReadFrom() throws Exception {
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat("text/plain",new TestDataFormat());
    ByteArrayInputStream bis=new ByteArrayInputStream("dataformat".getBytes());
    Book b=p.readFrom(Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE,new MetadataMap<String,String>(),bis);
    assertEquals("dataformat",b.getName());
  }
  @Test public void testWriteTo() throws Exception {
    DataFormatProvider<Book> p=new DataFormatProvider<>();
    p.setFormat("text/plain",new TestDataFormat());
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    p.writeTo(new Book("dataformat"),Book.class,Book.class,new Annotation[]{},MediaType.TEXT_PLAIN_TYPE,new MetadataMap<String,Object>(),bos);
    assertEquals("dataformat",bos.toString());
  }
private static class Book {
    private String name;
    @SuppressWarnings("unused") Book(){
    }
    Book(    String name){
      this.name=name;
    }
    public String getName(){
      return name;
    }
    @SuppressWarnings("unused") public void setName(    String name){
      this.name=name;
    }
  }
private static class TestDataFormat extends ServiceSupport implements DataFormat {
    @Override public void marshal(    Exchange ex,    Object obj,    OutputStream os) throws Exception {
      os.write(((Book)obj).getName().getBytes());
      os.flush();
    }
    @Override public Object unmarshal(    Exchange ex,    InputStream is) throws Exception {
      return new Book(IOUtils.readStringFromStream(is));
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
