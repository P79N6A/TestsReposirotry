public class LumberjackDisconnectionTest extends CamelTestSupport {
  private static int port;
  @BeforeClass public static void beforeClass(){
    port=AvailablePortFinder.getNextAvailable();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("lumberjack:0.0.0.0:" + port).process(new ErrorProcessor()).to("mock:output");
      }
    }
;
  }
  @Test public void shouldDisconnectUponError() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:output");
    mock.expectedMessageCount(3);
    mock.allMessages().body().isInstanceOf(Map.class);
    List<Integer> responses=LumberjackUtil.sendMessages(port,null);
    mock.assertIsSatisfied();
    assertCollectionSize(responses,0);
  }
  /** 
 * This processor throws an exception as the fourth message received.
 */
private static final class ErrorProcessor implements Processor {
    int count;
    @Override public void process(    Exchange exchange) throws Exception {
      count++;
      if (count == 4) {
        throw new RuntimeException("Ooops");
      }
    }
  }
}
