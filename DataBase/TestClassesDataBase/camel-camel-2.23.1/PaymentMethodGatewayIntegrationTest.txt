public class PaymentMethodGatewayIntegrationTest extends AbstractBraintreeTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(PaymentMethodGatewayIntegrationTest.class);
  private static final String PATH_PREFIX=getApiNameAsString(PaymentMethodGatewayApiMethod.class);
  private BraintreeGateway gateway;
  private Customer customer;
  private final List<String> paymentMethodsTokens;
  public PaymentMethodGatewayIntegrationTest(){
    this.customer=null;
    this.gateway=null;
    this.paymentMethodsTokens=new LinkedList<>();
  }
  @Override protected void doPostSetup() throws Exception {
    this.gateway=getGateway();
    this.customer=gateway.customer().create(new CustomerRequest().firstName("user").lastName(UUID.randomUUID().toString())).getTarget();
    if (customer != null) {
      LOG.info("Customer created - id={}",this.customer.getId());
    }
  }
  @Override @After public void tearDown() throws Exception {
    if (this.gateway != null) {
      for (      String token : this.paymentMethodsTokens) {
        if (this.gateway.paymentMethod().delete(token).isSuccess()) {
          LOG.info("PaymentMethod deleted - token={}",token);
        }
 else {
          LOG.warn("Unable to delete PaymentMethod - token={}",token);
        }
      }
      this.paymentMethodsTokens.clear();
      if (this.gateway.customer().delete(this.customer.getId()).isSuccess()) {
        LOG.info("Customer deleted - id={}",this.customer.getId());
      }
 else {
        LOG.warn("Unable to delete customer - id={}",this.customer.getId());
      }
    }
  }
  private PaymentMethod createPaymentMethod(){
    Result<? extends PaymentMethod> result=this.gateway.paymentMethod().create(new PaymentMethodRequest().customerId(this.customer.getId()).paymentMethodNonce("fake-valid-payroll-nonce"));
    assertNotNull("create result",result);
    assertTrue(result.isSuccess());
    LOG.info("PaymentMethod created - token={}",result.getTarget().getToken());
    return result.getTarget();
  }
  @Test public void testCreate() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final Result<PaymentMethod> result=requestBody("direct://CREATE",new PaymentMethodRequest().customerId(this.customer.getId()).paymentMethodNonce("fake-valid-payroll-nonce"),Result.class);
    assertNotNull("create result",result);
    assertTrue(result.isSuccess());
    LOG.info("PaymentMethod created - token={}",result.getTarget().getToken());
    this.paymentMethodsTokens.add(result.getTarget().getToken());
  }
  @Test public void testDelete() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final PaymentMethod paymentMethod=createPaymentMethod();
    final Result<PaymentMethod> deleteResult=requestBody("direct://DELETE",paymentMethod.getToken(),Result.class);
    assertNotNull("create result",deleteResult);
    assertTrue(deleteResult.isSuccess());
    LOG.info("PaymentMethod deleted - token={}",paymentMethod.getToken());
  }
  @Test public void testFind() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final PaymentMethod paymentMethod=createPaymentMethod();
    this.paymentMethodsTokens.add(paymentMethod.getToken());
    final PaymentMethod method=requestBody("direct://FIND",paymentMethod.getToken(),PaymentMethod.class);
    assertNotNull("find result",method);
    LOG.info("PaymentMethod found - token={}",method.getToken());
  }
  @Test public void testUpdate() throws Exception {
    assertNotNull("BraintreeGateway can't be null",this.gateway);
    assertNotNull("Customer can't be null",this.customer);
    final PaymentMethod paymentMethod=createPaymentMethod();
    this.paymentMethodsTokens.add(paymentMethod.getToken());
    final Result<PaymentMethod> result=requestBodyAndHeaders("direct://UPDATE",null,new BraintreeHeaderBuilder().add("token",paymentMethod.getToken()).add("request",new PaymentMethodRequest().billingAddress().company("Apache").streetAddress("100 Maple Lane").done()).build(),Result.class);
    assertNotNull("update result",result);
    assertTrue(result.isSuccess());
    LOG.info("PaymentMethod updated - token={}",result.getTarget().getToken());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request");
        from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete?inBody=token");
        from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=token");
        from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update");
      }
    }
;
  }
}
