/** 
 * Test class for  {@link BoxTasksManager}APIs.
 */
public class BoxTasksManagerIntegrationTest extends AbstractBoxTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(BoxTasksManagerIntegrationTest.class);
  private static final String PATH_PREFIX=BoxApiCollection.getCollection().getApiName(BoxTasksManagerApiMethod.class).getName();
  private static final String CAMEL_TEST_FILE="/CamelTestFile.txt";
  private static final String CAMEL_TEST_FILE_NAME="CamelTestFile.txt";
  private static final String CAMEL_TEST_MESSAGE="Camel Test Message";
  private static final long TEN_MINUTES_IN_MILLIS=600000;
  private BoxTask testTask;
  @Test public void testAddAssignmentToTask() throws Exception {
    com.box.sdk.BoxTask result=null;
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.taskId",testTask.getID());
    headers.put("CamelBox.assignTo",getCurrentUser());
    result=requestBodyAndHeaders("direct://ADDASSIGNMENTTOTASK",null,headers);
    assertNotNull("addAssignmentToTask result",result);
    LOG.debug("addAssignmentToTask: " + result);
  }
  @Test public void testAddFileTask() throws Exception {
    com.box.sdk.BoxTask result=null;
    try {
      final Map<String,Object> headers=new HashMap<>();
      headers.put("CamelBox.fileId",testFile.getID());
      headers.put("CamelBox.action",BoxTask.Action.REVIEW);
      Date now=new Date();
      Date dueAt=new Date(now.getTime() + TEN_MINUTES_IN_MILLIS);
      headers.put("CamelBox.dueAt",dueAt);
      headers.put("CamelBox.message",CAMEL_TEST_MESSAGE);
      result=requestBodyAndHeaders("direct://ADDFILETASK",null,headers);
      assertNotNull("addFileTask result",result);
      LOG.debug("addFileTask: " + result);
    }
  finally {
      if (result != null) {
        try {
          result.delete();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  @Test public void testDeleteTask() throws Exception {
    requestBody("direct://DELETETASK",testTask.getID());
    List<BoxTask.Info> tasks=testFile.getTasks();
    boolean exists=tasks.size() != 0;
    assertEquals("deleteTask task still exists.",false,exists);
  }
  @Ignore @Test public void testDeleteTaskAssignment() throws Exception {
    BoxTaskAssignment.Info info=testTask.addAssignment(getCurrentUser());
    requestBody("direct://DELETETASKASSIGNMENT",info.getID());
    List<BoxTaskAssignment.Info> assignments=testTask.getAssignments();
    boolean exists=assignments.size() != 0;
    assertEquals("deleteTaskAssignment assignment still exists.",false,exists);
  }
  @Test public void testGetFileTasks() throws Exception {
    @SuppressWarnings("rawtypes") final java.util.List result=requestBody("direct://GETFILETASKS",testFile.getID());
    assertNotNull("getFileTasks result",result);
    LOG.debug("getFileTasks: " + result);
  }
  @Ignore @Test public void testGetTaskAssignmentInfo() throws Exception {
    BoxTaskAssignment.Info info=testTask.addAssignment(getCurrentUser());
    com.box.sdk.BoxTaskAssignment.Info result=null;
    try {
      result=requestBody("direct://GETTASKASSIGNMENTINFO",info.getID());
      assertNotNull("getTaskAssignmentInfo result",result);
      LOG.debug("getTaskAssignmentInfo: " + result);
    }
  finally {
      if (result != null) {
        try {
          ((BoxTaskAssignment)result.getResource()).delete();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  @Test public void testGetTaskAssignments() throws Exception {
    @SuppressWarnings("rawtypes") final java.util.List result=requestBody("direct://GETTASKASSIGNMENTS",testTask.getID());
    assertNotNull("getTaskAssignments result",result);
    LOG.debug("getTaskAssignments: " + result);
  }
  @Test public void testGetTaskInfo() throws Exception {
    final com.box.sdk.BoxTask.Info result=requestBody("direct://GETTASKINFO",testTask.getID());
    assertNotNull("getTaskInfo result",result);
    LOG.debug("getTaskInfo: " + result);
  }
  @Ignore @Test public void testUpdateTaskInfo() throws Exception {
    BoxTask.Info info=testTask.getInfo();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelBox.taskId",testTask.getID());
    headers.put("CamelBox.info",info);
    final com.box.sdk.BoxTask result=requestBodyAndHeaders("direct://UPDATETASKINFO",null,headers);
    assertNotNull("updateTaskInfo result",result);
    LOG.debug("updateTaskInfo: " + result);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADDASSIGNMENTTOTASK").to("box://" + PATH_PREFIX + "/addAssignmentToTask");
        from("direct://ADDFILETASK").to("box://" + PATH_PREFIX + "/addFileTask");
        from("direct://DELETETASK").to("box://" + PATH_PREFIX + "/deleteTask?inBody=taskId");
        from("direct://DELETETASKASSIGNMENT").to("box://" + PATH_PREFIX + "/deleteTaskAssignment?inBody=taskAssignmentId");
        from("direct://GETFILETASKS").to("box://" + PATH_PREFIX + "/getFileTasks?inBody=fileId");
        from("direct://GETTASKASSIGNMENTINFO").to("box://" + PATH_PREFIX + "/getTaskAssignmentInfo?inBody=taskAssignmentId");
        from("direct://GETTASKASSIGNMENTS").to("box://" + PATH_PREFIX + "/getTaskAssignments?inBody=taskId");
        from("direct://GETTASKINFO").to("box://" + PATH_PREFIX + "/getTaskInfo?inBody=taskId");
        from("direct://UPDATETASKINFO").to("box://" + PATH_PREFIX + "/updateTaskInfo");
      }
    }
;
  }
  @Before public void setupTest() throws Exception {
    createTestFile();
    createTestTask();
  }
  @After public void teardownTest(){
    deleteTestTask();
    deleteTestFile();
  }
  public BoxAPIConnection getConnection(){
    BoxEndpoint endpoint=(BoxEndpoint)context().getEndpoint("box://" + PATH_PREFIX + "/addAssignmentToTask");
    return endpoint.getBoxConnection();
  }
  private void createTestTask(){
    Date now=new Date();
    Date dueAt=new Date(now.getTime() + TEN_MINUTES_IN_MILLIS);
    testTask=testFile.addTask(Action.REVIEW,CAMEL_TEST_MESSAGE,dueAt).getResource();
  }
  private void deleteTestTask(){
    try {
      testTask.delete();
    }
 catch (    Throwable t) {
    }
    testTask=null;
  }
  private void createTestFile() throws FileNotFoundException {
    BoxFolder rootFolder=BoxFolder.getRootFolder(getConnection());
    InputStream stream=getClass().getResourceAsStream(CAMEL_TEST_FILE);
    testFile=rootFolder.uploadFile(stream,CAMEL_TEST_FILE_NAME).getResource();
  }
  private BoxUser getCurrentUser(){
    return BoxUser.getCurrentUser(getConnection());
  }
}
