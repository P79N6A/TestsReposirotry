public class JdbcParameterizedQueryTest extends AbstractJdbcTestSupport {
  @Test public void testParameterizedQueryNoNames() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    Map<String,Object> jdbcParams=new HashMap<>();
    jdbcParams.put("name","jstrachan");
    template.sendBodyAndHeaders("direct:start","select * from customer where id = 'cust1' and name = ? order by ID",jdbcParams);
    assertMockEndpointsSatisfied();
    List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
    assertEquals(1,received.size());
    Map<?,?> row=assertIsInstanceOf(Map.class,received.get(0));
    assertEquals("jstrachan",row.get("NAME"));
  }
  @Test public void testParameterizedQuery() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    Map<String,Object> jdbcParams=new HashMap<>();
    jdbcParams.put("name","jstrachan");
    jdbcParams.put("id","cust1");
    template.sendBodyAndHeaders("direct:start","select * from customer where id = :?id and name = :?name order by ID",jdbcParams);
    assertMockEndpointsSatisfied();
    List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
    assertEquals(1,received.size());
    Map<?,?> row=assertIsInstanceOf(Map.class,received.get(0));
    assertEquals("jstrachan",row.get("NAME"));
  }
  @Test public void testParameterizedQueryJdbcHeader() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    Map<String,Object> jdbcParams=new HashMap<>();
    jdbcParams.put("id","cust1");
    jdbcParams.put("name","jstrachan");
    Map<String,Object> headers=new HashMap<>();
    headers.put("id","cust2");
    headers.put(JdbcConstants.JDBC_PARAMETERS,jdbcParams);
    template.sendBodyAndHeaders("direct:start","select * from customer where id = :?id and name = :?name order by ID",headers);
    assertMockEndpointsSatisfied();
    List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
    assertEquals(1,received.size());
    Map<?,?> row=assertIsInstanceOf(Map.class,received.get(0));
    assertEquals("jstrachan",row.get("NAME"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().setUseBreadcrumb(false);
        getContext().getComponent("jdbc",JdbcComponent.class).setDataSource(db);
        from("direct:start").to("jdbc:testdb?useHeadersAsParameters=true").to("mock:result");
      }
    }
;
  }
}
