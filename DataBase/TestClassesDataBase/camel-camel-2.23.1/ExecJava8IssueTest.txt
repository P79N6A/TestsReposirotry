/** 
 * Test to duplicate issues with Camel's exec command in Java 8 on Unix This issue appears to be caused by a race condition, so this test does not always fail
 */
public class ExecJava8IssueTest extends Assert {
  private File tempDir;
  private final String tempDirName=name();
  private final String tempFileName=name();
  @Before public void setUp(){
    tempDir=new File("target",tempDirName);
    if (!(tempDir.mkdir())) {
      fail("Couldn't create temp dir for test");
    }
  }
  @After public void tearDown() throws Exception {
    FileUtils.deleteDirectory(tempDir);
  }
  @Test public void test() throws Exception {
    if (!OS.isFamilyUnix()) {
      System.err.println("The test 'CamelExecTest' does not support the following OS : " + System.getProperty("os.name"));
      return;
    }
    String tempFilePath=tempDir.getAbsolutePath() + "/" + tempFileName;
    final File script=File.createTempFile("script",".sh",tempDir);
    writeScript(script);
    final String exec="bash?args=" + script.getAbsolutePath() + " "+ tempFilePath+ "&outFile="+ tempFilePath;
    DefaultCamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:source").to("file:" + tempDir.getAbsolutePath() + "?fileName="+ tempFileName).to("exec:" + exec).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String output=exchange.getIn().getBody(String.class);
            assertEquals("hello world\n",output);
          }
        }
);
      }
    }
);
    context.start();
    ProducerTemplate pt=context.createProducerTemplate();
    String payload="hello";
    pt.sendBody("direct:source",payload);
  }
  /** 
 * Creates a script which will append " world" to a file
 */
  private void writeScript(  File script) throws IOException {
    try (FileWriter fw=new FileWriter(script);PrintWriter pw=new PrintWriter(fw)){
      String s="echo \" world\" >> $1";
      pw.print(s);
    }
   }
  /** 
 * Returns a random UUID
 */
  private String name(){
    return UUID.randomUUID().toString();
  }
}
