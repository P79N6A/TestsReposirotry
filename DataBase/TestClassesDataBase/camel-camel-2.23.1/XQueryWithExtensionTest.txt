/** 
 * @version
 */
public class XQueryWithExtensionTest extends CamelTestSupport {
  private Configuration conf;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    conf=new Configuration();
    conf.registerExtensionFunction(new SimpleExtension());
    jndi.bind("saxonConf",conf);
    return jndi;
  }
  @Test public void testWithExtension() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("<transformed extension-function-render=\"arg1[test]\"/>");
    template.sendBody("direct:start","<body>test</body>");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("xquery:org/apache/camel/component/xquery/transformWithExtension.xquery?configuration=#saxonConf").to("mock:result");
      }
    }
;
  }
  /** 
 * This is a very simple example of a saxon extension function. We will use this for testing purposes. <p/> Example: <code>efx:simple('some text')</code> will be rendered to <code>arg1[some text]</code> and returned in the XQuery response.
 */
public static final class SimpleExtension extends ExtensionFunctionDefinition {
    private static final long serialVersionUID=1L;
    @Override public SequenceType[] getArgumentTypes(){
      return new SequenceType[]{SequenceType.SINGLE_STRING};
    }
    @Override public SequenceType getResultType(    SequenceType[] suppliedArgumentTypes){
      return SequenceType.SINGLE_STRING;
    }
    @Override public StructuredQName getFunctionQName(){
      return new StructuredQName("efx","http://test/saxon/ext","simple");
    }
    @Override public ExtensionFunctionCall makeCallExpression(){
      return new ExtensionFunctionCall(){
        private static final long serialVersionUID=1L;
        @Override public Sequence call(        XPathContext xPathContext,        Sequence[] sequences) throws XPathException {
          Item arg1=sequences[0].head();
          String arg1Val=arg1.getStringValue();
          return new StringValue("arg1[" + arg1Val + "]");
        }
      }
;
    }
  }
}
