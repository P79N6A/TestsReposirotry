/** 
 * @version
 */
public class ServiceSupportTest extends TestSupport {
private static class MyService extends ServiceSupport {
    protected void doStart() throws Exception {
    }
    protected void doStop() throws Exception {
    }
  }
  @Test public void testServiceSupport() throws Exception {
    MyService service=new MyService();
    service.start();
    assertEquals(true,service.isStarted());
    assertEquals(false,service.isStarting());
    assertEquals(false,service.isStopped());
    assertEquals(false,service.isStopping());
    service.stop();
    assertEquals(true,service.isStopped());
    assertEquals(false,service.isStopping());
    assertEquals(false,service.isStarted());
    assertEquals(false,service.isStarting());
  }
  @Test public void testServiceSupportIsRunAllowed() throws Exception {
    MyService service=new MyService();
    assertEquals(false,service.isRunAllowed());
    service.start();
    assertEquals(true,service.isRunAllowed());
    service.suspend();
    assertEquals(true,service.isRunAllowed());
    service.resume();
    assertEquals(true,service.isRunAllowed());
    service.stop();
    assertEquals(false,service.isRunAllowed());
    service.shutdown();
    assertEquals(false,service.isRunAllowed());
  }
private static class MyShutdownService extends ServiceSupport {
    private boolean shutdown;
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
    @Override protected void doShutdown() throws Exception {
      shutdown=true;
    }
    public boolean isShutdown(){
      return shutdown;
    }
  }
  @Test public void testServiceSupportShutdown() throws Exception {
    MyShutdownService service=new MyShutdownService();
    service.start();
    assertEquals(true,service.isStarted());
    assertEquals(false,service.isStarting());
    assertEquals(false,service.isStopped());
    assertEquals(false,service.isStopping());
    assertEquals(false,service.isShutdown());
    service.shutdown();
    assertEquals(true,service.isStopped());
    assertEquals(false,service.isStopping());
    assertEquals(false,service.isStarted());
    assertEquals(false,service.isStarting());
    assertEquals(true,service.isShutdown());
  }
  @Test public void testExceptionOnStart() throws Exception {
    ServiceSupportTestExOnStart service=new ServiceSupportTestExOnStart();
    assertEquals(false,service.isStopped());
    try {
      service.start();
      fail("RuntimeException expected");
    }
 catch (    RuntimeException e) {
      assertEquals(true,service.isStopped());
      assertEquals(false,service.isStopping());
      assertEquals(false,service.isStarted());
      assertEquals(false,service.isStarting());
    }
  }
public static class ServiceSupportTestExOnStart extends ServiceSupport {
    public ServiceSupportTestExOnStart(){
      stopped.set(false);
    }
    @Override protected void doStart() throws Exception {
      throw new RuntimeException("This service throws an exception when starting");
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
