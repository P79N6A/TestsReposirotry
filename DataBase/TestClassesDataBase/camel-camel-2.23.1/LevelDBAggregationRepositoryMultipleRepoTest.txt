public class LevelDBAggregationRepositoryMultipleRepoTest extends CamelTestSupport {
  private LevelDBFile levelDBFile;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    deleteDirectory("target/data");
    File file=new File("target/data/leveldb.dat");
    levelDBFile=new LevelDBFile();
    levelDBFile.setFile(file);
    levelDBFile.start();
  }
  @Override @After public void tearDown() throws Exception {
    levelDBFile.stop();
    super.tearDown();
  }
  @Test public void testMultipeRepo(){
    LevelDBAggregationRepository repo1=new LevelDBAggregationRepository();
    repo1.setLevelDBFile(levelDBFile);
    repo1.setRepositoryName("repo1");
    repo1.setReturnOldExchange(true);
    LevelDBAggregationRepository repo2=new LevelDBAggregationRepository();
    repo2.setLevelDBFile(levelDBFile);
    repo2.setRepositoryName("repo2");
    repo2.setReturnOldExchange(true);
    Exchange actual=repo1.get(context,"missing");
    assertEquals(null,actual);
    actual=repo2.get(context,"missing");
    assertEquals(null,actual);
    Exchange exchange1=new DefaultExchange(context);
    exchange1.getIn().setBody("counter:1");
    actual=repo1.add(context,"foo",exchange1);
    assertEquals(null,actual);
    actual=repo1.get(context,"foo");
    assertEquals("counter:1",actual.getIn().getBody());
    assertEquals(null,repo2.get(context,"foo"));
    Exchange exchange2=new DefaultExchange(context);
    exchange2.getIn().setBody("counter:2");
    actual=repo1.add(context,"foo",exchange2);
    assertEquals("counter:1",actual.getIn().getBody());
    Exchange exchange3=new DefaultExchange(context);
    exchange3.getIn().setBody("Hello World");
    actual=repo2.add(context,"bar",exchange3);
    assertEquals(null,actual);
    assertEquals(null,repo1.get(context,"bar"));
    actual=repo1.get(context,"foo");
    assertEquals("counter:2",actual.getIn().getBody());
    assertEquals(null,repo2.get(context,"foo"));
    actual=repo2.get(context,"bar");
    assertEquals("Hello World",actual.getIn().getBody());
    assertEquals(null,repo1.get(context,"bar"));
  }
  @Test public void testMultipeRepoSameKeyDifferentContent(){
    LevelDBAggregationRepository repo1=new LevelDBAggregationRepository();
    repo1.setLevelDBFile(levelDBFile);
    repo1.setRepositoryName("repo1");
    LevelDBAggregationRepository repo2=new LevelDBAggregationRepository();
    repo2.setLevelDBFile(levelDBFile);
    repo2.setRepositoryName("repo2");
    Exchange exchange1=new DefaultExchange(context);
    exchange1.getIn().setBody("Hello World");
    repo1.add(context,"foo",exchange1);
    Exchange exchange2=new DefaultExchange(context);
    exchange2.getIn().setBody("Bye World");
    repo2.add(context,"foo",exchange2);
    Exchange actual=repo1.get(context,"foo");
    assertEquals("Hello World",actual.getIn().getBody());
    actual=repo2.get(context,"foo");
    assertEquals("Bye World",actual.getIn().getBody());
  }
}
