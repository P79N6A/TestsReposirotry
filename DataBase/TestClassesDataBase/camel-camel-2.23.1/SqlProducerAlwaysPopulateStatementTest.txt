/** 
 * @version 
 */
public class SqlProducerAlwaysPopulateStatementTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  private SqlPrepareStatementStrategy strategy;
  private volatile boolean invoked;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build();
    strategy=new DefaultSqlPrepareStatementStrategy(){
      @Override public void populateStatement(      PreparedStatement ps,      Iterator<?> iterator,      int expectedParams) throws SQLException {
        invoked=true;
        super.populateStatement(ps,iterator,expectedParams);
      }
    }
;
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myStrategy",strategy);
    return jndi;
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testAlwaysPopulate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start",null);
    mock.assertIsSatisfied();
    List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
    assertEquals(2,received.size());
    Map<?,?> row=assertIsInstanceOf(Map.class,received.get(0));
    assertEquals("Camel",row.get("PROJECT"));
    row=assertIsInstanceOf(Map.class,received.get(1));
    assertEquals("AMQ",row.get("PROJECT"));
    assertTrue("Should always populate",invoked);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:start").to("sql:select * from projects where license = 'ASF' order by id?alwaysPopulateStatement=true&prepareStatementStrategy=#myStrategy&consumer.initialDelay=0&consumer.delay=50").to("mock:result");
      }
    }
;
  }
}
