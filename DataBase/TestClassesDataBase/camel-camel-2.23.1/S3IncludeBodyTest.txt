/** 
 * Test to verify that the body is not retrieved when the includeBody option is false
 */
public class S3IncludeBodyTest extends CamelTestSupport {
  @Test public void testConsumePrefixedMessages() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    assertMockEndpointsSatisfied();
    assertNull("Expected body to be empty",mock.getExchanges().get(0).getIn().getBody(String.class));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("amazonS3Client",new DummyAmazonS3Client());
    return registry;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&delay=50" + "&maxMessagesPerPoll=5&prefix=confidential&includeBody=false").to("mock:result");
      }
    }
;
  }
class DummyAmazonS3Client extends AmazonS3Client {
    private AtomicInteger requestCount=new AtomicInteger(0);
    DummyAmazonS3Client(){
      super(new BasicAWSCredentials("myAccessKey","mySecretKey"));
    }
    @Override public ObjectListing listObjects(    ListObjectsRequest request) throws AmazonClientException, AmazonServiceException {
      int currentRequestCount=requestCount.incrementAndGet();
      assertEquals("mycamelbucket",request.getBucketName());
      if (currentRequestCount == 2) {
        assertEquals("confidential",request.getPrefix());
      }
      ObjectListing response=new ObjectListing();
      response.setBucketName(request.getBucketName());
      response.setPrefix(request.getPrefix());
      S3ObjectSummary s3ObjectSummary=new S3ObjectSummary();
      s3ObjectSummary.setBucketName(request.getBucketName());
      s3ObjectSummary.setKey("key");
      response.getObjectSummaries().add(s3ObjectSummary);
      return response;
    }
    @Override public S3Object getObject(    String bucketName,    String key) throws AmazonClientException, AmazonServiceException {
      assertEquals("mycamelbucket",bucketName);
      assertEquals("key",key);
      S3Object s3Object=new S3Object();
      s3Object.setBucketName(bucketName);
      s3Object.setKey(key);
      try {
        s3Object.setObjectContent(new StringInputStream("Camel rocks!"));
      }
 catch (      UnsupportedEncodingException e) {
      }
      return s3Object;
    }
    @Override public void deleteObject(    String bucketName,    String key) throws AmazonClientException, AmazonServiceException {
    }
  }
}
