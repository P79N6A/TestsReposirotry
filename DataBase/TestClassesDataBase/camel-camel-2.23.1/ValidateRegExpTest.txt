/** 
 * @version 
 */
public class ValidateRegExpTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint resultEndpoint;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    startEndpoint=resolveMandatoryEndpoint("direct:start",Endpoint.class);
    resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
  }
  @Test public void testSendMatchingMessage() throws Exception {
    resultEndpoint.expectedMessageCount(1);
    template.sendBody(startEndpoint,"01.01.2010");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendNotMatchingMessage() throws Exception {
    resultEndpoint.expectedMessageCount(0);
    try {
      template.sendBody(startEndpoint,"1.1.2010");
      fail("CamelExecutionException expected");
    }
 catch (    CamelExecutionException e) {
      PredicateValidationException cause=assertIsInstanceOf(PredicateValidationException.class,e.getCause());
      assertTrue("Get a wrong exception message",cause.getMessage().startsWith("Validation failed for Predicate"));
      assertTrue(cause.getMessage().contains("^\\d{2}\\.\\d{2}\\.\\d{4}$"));
      String body=cause.getExchange().getIn().getBody(String.class);
      assertEquals("1.1.2010",body);
    }
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").validate(bodyAs(String.class).regex("^\\d{2}\\.\\d{2}\\.\\d{4}$")).to("mock:result");
      }
    }
;
  }
}
