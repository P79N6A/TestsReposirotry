/** 
 */
public class FileConsumeAlterFileNameHeaderIssueTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/files");
    super.setUp();
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testConsumeAndDeleteRemoveAllHeaders() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/files?initialDelay=0&delay=10&delete=true").removeHeaders("*").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/files","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    assertFalse("Headers should have been removed",mock.getExchanges().get(0).getIn().hasHeaders());
    assertFalse("File should been deleted",new File("target/files/hello.txt").exists());
  }
  @Test public void testConsumeAndDeleteChangeFileHeader() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/files?initialDelay=0&delay=10&delete=true").setHeader(Exchange.FILE_NAME,constant("bye.txt")).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived(Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader("file://target/files","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    assertFalse("File should been deleted",new File("target/files/hello.txt").exists());
  }
  @Test public void testConsumeAndMoveRemoveAllHeaders() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/files?initialDelay=0&delay=10").removeHeaders("*").to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file://target/files","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    assertFalse("Headers should have been removed",mock.getExchanges().get(0).getIn().hasHeaders());
    assertTrue("File should been moved",new File("target/files/.camel/hello.txt").exists());
  }
  @Test public void testConsumeAndMoveChangeFileHeader() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/files?initialDelay=0&delay=10").setHeader(Exchange.FILE_NAME,constant("bye.txt")).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived(Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader("file://target/files","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    assertTrue("File should been moved",new File("target/files/.camel/hello.txt").exists());
  }
}
