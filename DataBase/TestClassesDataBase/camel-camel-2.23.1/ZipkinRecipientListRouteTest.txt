public class ZipkinRecipientListRouteTest extends CamelTestSupport {
  private ZipkinTracer zipkin;
  protected void setSpanReporter(  ZipkinTracer zipkin){
    zipkin.setSpanReporter(Reporter.NOOP);
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    zipkin=new ZipkinTracer();
    zipkin.addClientServiceMapping("seda:a","a");
    zipkin.addClientServiceMapping("seda:b","b");
    zipkin.addClientServiceMapping("seda:c","c");
    zipkin.addServerServiceMapping("seda:a","a");
    zipkin.addServerServiceMapping("seda:b","b");
    zipkin.addServerServiceMapping("seda:c","c");
    setSpanReporter(zipkin);
    zipkin.init(context);
    return context;
  }
  @Test public void testZipkinRoute() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(1).create();
    template.requestBody("direct:start","Hello World");
    assertTrue(notify.matches(30,TimeUnit.SECONDS));
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("seda:a").routeId("start");
        from("seda:a").routeId("a").log("routing at ${routeId}").recipientList(constant("seda:b,seda:c")).log("End of routing");
        from("seda:b").routeId("b").log("routing at ${routeId}").delay(simple("${random(1000,2000)}"));
        from("seda:c").routeId("c").log("routing at ${routeId}").delay(simple("${random(0,100)}"));
      }
    }
;
  }
}
