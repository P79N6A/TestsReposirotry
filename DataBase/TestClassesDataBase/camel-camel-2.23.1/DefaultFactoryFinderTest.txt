public class DefaultFactoryFinderTest {
public static class TestImplA implements TestType {
  }
public static class TestImplB implements TestType {
  }
public interface TestType {
  }
  private static final String TEST_RESOURCE_PATH="/org/apache/camel/impl/";
  final DefaultFactoryFinder factoryFinder=new DefaultFactoryFinder(new DefaultClassResolver(),TEST_RESOURCE_PATH);
  @Test public void shouldComplainIfClassResolverCannotResolveClass() throws IOException {
    final ClassResolver classResolver=mock(ClassResolver.class);
    final String properties="class=" + TestImplA.class.getName();
    when(classResolver.loadResourceAsStream("/org/apache/camel/impl/TestImplA")).thenReturn(new ByteArrayInputStream(properties.getBytes()));
    when(classResolver.resolveClass(TestImplA.class.getName())).thenReturn(null);
    final DefaultFactoryFinder factoryFinder=new DefaultFactoryFinder(classResolver,TEST_RESOURCE_PATH);
    try {
      factoryFinder.findClass("TestImplA",null);
      fail("Should have thrown ClassNotFoundException");
    }
 catch (    final ClassNotFoundException e) {
      assertEquals(TestImplA.class.getName(),e.getMessage());
    }
  }
  @Test public void shouldComplainIfInstanceTypeIsNotAsExpected() throws ClassNotFoundException, IOException {
    final Injector injector=mock(Injector.class);
    final TestImplA expected=new TestImplA();
    when(injector.newInstance(TestImplA.class)).thenReturn(expected);
    try {
      factoryFinder.newInstances("TestImplA",injector,TestImplB.class);
      fail("ClassCastException should have been thrown");
    }
 catch (    final ClassCastException e) {
      final String message=e.getMessage();
      assertThat(message,matchesPattern("Not instanceof org\\.apache\\.camel\\.impl\\.DefaultFactoryFinderTest\\$TestImplB " + "value: org\\.apache\\.camel\\.impl\\.DefaultFactoryFinderTest\\$TestImplA.*"));
    }
  }
  @Test public void shouldComplainIfUnableToCreateNewInstances() throws ClassNotFoundException, IOException {
    try {
      factoryFinder.newInstance("TestImplX");
      fail("NoFactoryAvailableException should have been thrown");
    }
 catch (    final NoFactoryAvailableException e) {
      assertEquals("Could not find factory class for resource: TestImplX",e.getMessage());
    }
  }
  @Test public void shouldComplainNoClassKeyInPropertyFile() throws ClassNotFoundException {
    try {
      factoryFinder.findClass("TestImplNoProperty");
      fail("NoFactoryAvailableException should have been thrown");
    }
 catch (    final IOException e) {
      assertEquals("Expected property is missing: class",e.getMessage());
    }
  }
  @Test public void shouldCreateNewInstances() throws ClassNotFoundException, IOException {
    final Object instance=factoryFinder.newInstance("TestImplA");
    assertThat(instance,instanceOf(TestImplA.class));
  }
  @Test public void shouldCreateNewInstancesWithInjector() throws ClassNotFoundException, IOException {
    final Injector injector=mock(Injector.class);
    final TestImplA expected=new TestImplA();
    when(injector.newInstance(TestImplA.class)).thenReturn(expected);
    final List<TestType> instances=factoryFinder.newInstances("TestImplA",injector,TestType.class);
    assertEquals(1,instances.size());
    assertThat(instances,hasItem(expected));
    assertSame(expected,instances.get(0));
  }
  @Test public void shouldFindSingleClass() throws ClassNotFoundException, IOException {
    final Class<?> clazz=factoryFinder.findClass("TestImplA");
    assertEquals(TestImplA.class,clazz);
  }
  @Test public void shouldFindSingleClassFromClassMap() throws ClassNotFoundException, IOException {
    final DefaultFactoryFinder factoryFinder=new DefaultFactoryFinder(null,null);
    factoryFinder.addToClassMap("prefixkey",() -> TestImplA.class);
    final Class<?> clazz=factoryFinder.findClass("key","prefix");
    assertEquals(TestImplA.class,clazz);
  }
  @Test public void shouldFindSingleClassWithPropertyPrefix() throws ClassNotFoundException, IOException {
    final Class<?> clazz=factoryFinder.findClass("TestImplA","prefix.");
    assertEquals(TestImplA.class,clazz);
  }
  @Test public void shouldFindSingleClassWithPropertyPrefixAndExpectedType() throws ClassNotFoundException, IOException {
    final Class<?> clazz=factoryFinder.findClass("TestImplA","prefix.",TestType.class);
    assertEquals(TestImplA.class,clazz);
  }
  URL urlFor(  final Class<?> clazz){
    final String resourceName=clazz.getPackage().getName().replace('.','/') + "/" + clazz.getSimpleName()+ ".properties";
    final ClassLoader classLoader=clazz.getClassLoader();
    return classLoader.getResource(resourceName);
  }
}
