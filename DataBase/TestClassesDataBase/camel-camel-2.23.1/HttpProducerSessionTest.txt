public class HttpProducerSessionTest extends CamelTestSupport {
  private static volatile int port;
  private static Server localServer;
  @BeforeClass public static void initServer() throws Exception {
    port=AvailablePortFinder.getNextAvailable(24000);
    localServer=new Server(new InetSocketAddress("127.0.0.1",port));
    ContextHandler contextHandler=new ContextHandler();
    contextHandler.setContextPath("/session");
    SessionHandler sessionHandler=new SessionHandler();
    sessionHandler.setHandler(new SessionReflectionHandler());
    contextHandler.setHandler(sessionHandler);
    localServer.setHandler(contextHandler);
    localServer.start();
  }
  @AfterClass public static void shutdownServer() throws Exception {
    localServer.stop();
  }
  @Test public void testNoSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("New New World","New New World");
    template.sendBody("direct:start","World");
    template.sendBody("direct:start","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInstanceSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Old New World","Old Old World");
    template.sendBody("direct:instance","World");
    template.sendBody("direct:instance","World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testExchangeSession() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Old New World","Old New World");
    template.sendBody("direct:exchange","World");
    template.sendBody("direct:exchange","World");
    assertMockEndpointsSatisfied();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndiRegistry=super.createRegistry();
    jndiRegistry.bind("instanceCookieHandler",new InstanceCookieHandler());
    jndiRegistry.bind("exchangeCookieHandler",new ExchangeCookieHandler());
    jndiRegistry.bind("noopCookieStore",new NoopCookieStore());
    return jndiRegistry;
  }
  private String getTestServerEndpointSessionUrl(){
    return "http4://127.0.0.1:" + port + "/session/";
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to(getTestServerEndpointSessionUrl() + "?cookieStore=#noopCookieStore").to(getTestServerEndpointSessionUrl() + "?cookieStore=#noopCookieStore").to("mock:result");
        from("direct:instance").to(getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to(getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("mock:result");
        from("direct:exchange").to(getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to(getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("mock:result");
      }
    }
;
  }
}
