/** 
 * Test for situation where the two end bytes are split across different byte buffers.
 */
public class HL7MLLPCodecBoundaryTest extends HL7TestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    HL7MLLPCodec codec=new HL7MLLPCodec();
    codec.setCharset("iso-8859-1");
    jndi.bind("hl7codec",codec);
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().getBody(MDM_T02.class);
          }
        }
).to("mock:result");
      }
    }
;
  }
  @Test public void testSendHL7Message() throws Exception {
    BufferedReader in=IOHelper.buffered(new InputStreamReader(getClass().getResourceAsStream("/mdm_t02-1022.txt")));
    String line="";
    String message="";
    while (line != null) {
      if ((line=in.readLine()) != null) {
        message+=line + "\r";
      }
    }
    message=message.substring(0,message.length() - 1);
    assertEquals(1022,message.length());
    MockEndpoint mockEndpoint=getMockEndpoint("mock:result");
    mockEndpoint.expectedMessageCount(1);
    template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec",message);
    mockEndpoint.assertIsSatisfied();
  }
}
