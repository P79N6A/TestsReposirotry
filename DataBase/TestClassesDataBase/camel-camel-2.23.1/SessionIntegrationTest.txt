/** 
 */
public class SessionIntegrationTest extends Assert implements SalesforceSession.SalesforceSessionListener {
  private static final Logger LOG=LoggerFactory.getLogger(SessionIntegrationTest.class);
  private static final int TIMEOUT=60000;
  private boolean onLoginTriggered;
  private boolean onLogoutTriggered;
  @Test public void testLogin() throws Exception {
    final SslContextFactory sslContextFactory=new SslContextFactory();
    sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext(new DefaultCamelContext()));
    final SalesforceHttpClient httpClient=new SalesforceHttpClient(sslContextFactory);
    httpClient.setConnectTimeout(TIMEOUT);
    final SalesforceSession session=new SalesforceSession(new DefaultCamelContext(),httpClient,TIMEOUT,LoginConfigHelper.getLoginConfig());
    session.addListener(this);
    httpClient.setSession(session);
    httpClient.start();
    try {
      String loginToken=session.login(session.getAccessToken());
      LOG.info("First token " + loginToken);
      assertTrue("SalesforceSessionListener onLogin NOT called",onLoginTriggered);
      onLoginTriggered=false;
      loginToken=session.login(loginToken);
      LOG.info("Refreshed token " + loginToken);
      assertTrue("SalesforceSessionListener onLogout NOT called",onLogoutTriggered);
      assertTrue("SalesforceSessionListener onLogin NOT called",onLoginTriggered);
    }
  finally {
      session.logout();
    }
  }
  @Override public void onLogin(  String accessToken,  String instanceUrl){
    onLoginTriggered=true;
  }
  @Override public void onLogout(){
    onLogoutTriggered=true;
  }
}
