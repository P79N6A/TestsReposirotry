public class InfinispanConsumerEntryUpdatedTest extends InfinispanTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint mockResult;
  @Test public void consumerReceivedPreAndPostEntryUpdateEventNotifications() throws Exception {
    currentCache().put(KEY_ONE,VALUE_ONE);
    mockResult.expectedMessageCount(2);
    mockResult.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_MODIFIED");
    mockResult.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(true);
    mockResult.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull();
    mockResult.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE);
    mockResult.message(1).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_MODIFIED");
    mockResult.message(1).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false);
    mockResult.message(1).outHeader(InfinispanConstants.CACHE_NAME).isNotNull();
    mockResult.message(1).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE);
    currentCache().replace(KEY_ONE,VALUE_TWO);
    mockResult.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("infinispan?cacheContainer=#cacheContainer&sync=false&eventTypes=CACHE_ENTRY_MODIFIED").to("mock:result");
      }
    }
;
  }
}
