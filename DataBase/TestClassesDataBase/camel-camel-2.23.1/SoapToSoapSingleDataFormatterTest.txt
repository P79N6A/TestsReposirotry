public class SoapToSoapSingleDataFormatterTest extends CamelTestSupport {
  private static SoapJaxbDataFormat soapjaxbModel;
  private static Map<String,String> namespacePrefixMap;
  @BeforeClass public static void setup(){
    namespacePrefixMap=new HashMap<>();
    namespacePrefixMap.put("http://schemas.xmlsoap.org/soap/envelope/","soap");
    namespacePrefixMap.put("http://www.w3.org/2001/XMLSchema","xsd");
    namespacePrefixMap.put("http://www.w3.org/2001/XMLSchema-instance","xsi");
    namespacePrefixMap.put("http://www.example.com/contact","cont");
    namespacePrefixMap.put("http://www.example.com/soapheaders","custom");
    soapjaxbModel=new SoapJaxbDataFormat("com.example.contact:com.example.soapheaders");
    soapjaxbModel.setNamespacePrefix(namespacePrefixMap);
    soapjaxbModel.setPrettyPrint(true);
    soapjaxbModel.setIgnoreUnmarshalledHeaders(false);
    soapjaxbModel.setIgnoreJAXBElement(false);
    soapjaxbModel.setElementNameStrategy(new TypeNameStrategy());
  }
  @AfterClass public static void teardown(){
    soapjaxbModel=null;
    namespacePrefixMap=null;
  }
  @Test public void testSoapMarshal() throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:end");
    endpoint.setExpectedMessageCount(1);
    template.sendBody("direct:start",createRequest());
    assertMockEndpointsSatisfied();
    Exchange result=endpoint.assertExchangeReceived(0);
    byte[] body=(byte[])result.getIn().getBody();
    InputStream stream=new ByteArrayInputStream(body);
    SOAPMessage request=MessageFactory.newInstance().createMessage(null,stream);
    assertTrue("Expected headers",null != request.getSOAPHeader() && request.getSOAPHeader().extractAllHeaderElements().hasNext());
  }
  private InputStream createRequest() throws Exception {
    InputStream stream=this.getClass().getResourceAsStream("SoapMarshalHeadersTest.xml");
    return stream;
  }
  @Override protected RouteBuilder createRouteBuilder(){
    context.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS,"0");
    context.setTracing(true);
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").unmarshal(soapjaxbModel).marshal(soapjaxbModel).to("mock:end");
      }
    }
;
  }
}
