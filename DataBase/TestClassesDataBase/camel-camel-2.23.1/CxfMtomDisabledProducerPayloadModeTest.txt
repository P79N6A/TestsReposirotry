/** 
 * Unit test for exercising SOAP with Attachment (SwA) feature of a CxfProducer in PAYLOAD mode.   That is, testing attachment with MTOM optimization off.
 * @version 
 */
@ContextConfiguration public class CxfMtomDisabledProducerPayloadModeTest extends CxfMtomProducerPayloadModeTest {
  @Override protected boolean isMtomEnabled(){
    return false;
  }
  @Override protected Object getServiceImpl(){
    return new MyHelloImpl();
  }
  @Override @Test public void testProducer() throws Exception {
    if (MtomTestHelper.isAwtHeadless(logger,null)) {
      return;
    }
    Exchange exchange=context.createProducerTemplate().send("direct:testEndpoint",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        List<Source> elements=new ArrayList<>();
        elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.MTOM_DISABLED_REQ_MESSAGE)).getDocumentElement()));
        CxfPayload<SoapHeader> body=new CxfPayload<>(new ArrayList<SoapHeader>(),elements,null);
        exchange.getIn().setBody(body);
        exchange.getIn().addAttachment(MtomTestHelper.REQ_PHOTO_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA,"application/octet-stream")));
        exchange.getIn().addAttachment(MtomTestHelper.REQ_IMAGE_CID,new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg,"image/jpeg")));
      }
    }
);
    CxfPayload<?> out=exchange.getOut().getBody(CxfPayload.class);
    Assert.assertEquals(1,out.getBody().size());
    DataHandler dr=exchange.getOut().getAttachment(MtomTestHelper.RESP_PHOTO_CID);
    Assert.assertEquals("application/octet-stream",dr.getContentType());
    MtomTestHelper.assertEquals(MtomTestHelper.RESP_PHOTO_DATA,IOUtils.readBytesFromStream(dr.getInputStream()));
    dr=exchange.getOut().getAttachment(MtomTestHelper.RESP_IMAGE_CID);
    Assert.assertEquals("image/jpeg",dr.getContentType());
    BufferedImage image=ImageIO.read(dr.getInputStream());
    Assert.assertEquals(560,image.getWidth());
    Assert.assertEquals(300,image.getHeight());
  }
public static class MyHelloImpl extends HelloImpl implements Hello {
    @Resource WebServiceContext ctx;
    @Override public void detail(    Holder<byte[]> photo,    Holder<Image> image){
      Map<String,DataHandler> map=CastUtils.cast((Map<?,?>)ctx.getMessageContext().get(MessageContext.INBOUND_MESSAGE_ATTACHMENTS));
      Assert.assertEquals(2,map.size());
      DataHandler dh=map.get(MtomTestHelper.REQ_PHOTO_CID);
      Assert.assertEquals("application/octet-stream",dh.getContentType());
      byte[] bytes=null;
      try {
        bytes=IOUtils.readBytesFromStream(dh.getInputStream());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      MtomTestHelper.assertEquals(bytes,MtomTestHelper.REQ_PHOTO_DATA);
      dh=map.get(MtomTestHelper.REQ_IMAGE_CID);
      Assert.assertEquals("image/jpeg",dh.getContentType());
      BufferedImage bufferedImage=null;
      try {
        bufferedImage=ImageIO.read(dh.getInputStream());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      Assert.assertNotNull(bufferedImage);
      Assert.assertEquals(41,bufferedImage.getWidth());
      Assert.assertEquals(39,bufferedImage.getHeight());
      map=CastUtils.cast((Map<?,?>)ctx.getMessageContext().get(MessageContext.OUTBOUND_MESSAGE_ATTACHMENTS));
      try {
        DataSource ds=new AttachmentDataSource("image/jpeg",getClass().getResourceAsStream("/Splash.jpg"));
        map.put(MtomTestHelper.RESP_IMAGE_CID,new DataHandler(ds));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        DataSource ds=new AttachmentDataSource("application/octet-stream",new ByteArrayInputStream(MtomTestHelper.RESP_PHOTO_DATA));
        map.put(MtomTestHelper.RESP_PHOTO_CID,new DataHandler(ds));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}
