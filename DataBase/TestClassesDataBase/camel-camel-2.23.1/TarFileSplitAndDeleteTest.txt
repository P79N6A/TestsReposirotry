public class TarFileSplitAndDeleteTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/testDeleteTarFileWhenUnmarshalWithDataFormat");
    deleteDirectory("target/testDeleteTarFileWhenUnmarshalWithSplitter");
    super.setUp();
  }
  @Test public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).from("file://target/" + "testDeleteTarFileWhenUnmarshalWithDataFormat").whenDone(1).create();
    getMockEndpoint("mock:end").expectedMessageCount(3);
    String tarFile=createTarFile("testDeleteTarFileWhenUnmarshalWithDataFormat");
    assertMockEndpointsSatisfied();
    notify.matchesMockWaitTime();
    assertFalse("File should been deleted",new File(tarFile).exists());
  }
  @Test public void testDeleteTarFileWhenUnmarshalWithSplitter() throws Exception {
    NotifyBuilder notify=new NotifyBuilder(context).from("file://target/" + "testDeleteTarFileWhenUnmarshalWithSplitter").whenDone(1).create();
    getMockEndpoint("mock:end").expectedMessageCount(3);
    String tarFile=createTarFile("testDeleteTarFileWhenUnmarshalWithSplitter");
    assertMockEndpointsSatisfied();
    notify.matchesMockWaitTime();
    assertFalse("File should been deleted",new File(tarFile).exists());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        TarFileDataFormat dataFormat=new TarFileDataFormat();
        dataFormat.setUsingIterator(true);
        from("file://target/testDeleteTarFileWhenUnmarshalWithDataFormat?delete=true").unmarshal(dataFormat).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end();
        from("file://target/testDeleteTarFileWhenUnmarshalWithSplitter?delete=true").split(new TarSplitter()).streaming().convertBodyTo(String.class).to("mock:end").end();
      }
    }
;
  }
  private String createTarFile(  String folder) throws IOException {
    Path source=Paths.get("src/test/resources/data/tarfile3.tar");
    Path target=Paths.get("target" + File.separator + folder+ File.separator+ "data.tar");
    target.toFile().getParentFile().mkdirs();
    Path copy=Files.copy(source,target,StandardCopyOption.REPLACE_EXISTING);
    return copy.toAbsolutePath().toString();
  }
}
