public class InfinispanLocalAggregationRepositoryTest extends CamelTestSupport {
  private static final String MOCK_GOTCHA="mock:gotcha";
  private static final String DIRECT_ONE="direct:one";
  @EndpointInject(uri=MOCK_GOTCHA) private MockEndpoint mock;
  @Produce(uri=DIRECT_ONE) private ProducerTemplate produceOne;
  @Test public void checkAggregationFromOneRoute() throws Exception {
    Configuration conf=new ConfigurationBuilder().build();
    final InfinispanLocalAggregationRepository repoOne=new InfinispanLocalAggregationRepository();
    repoOne.setConfiguration(conf);
    final int completionSize=4;
    final String correlator="CORRELATOR";
    RouteBuilder rbOne=new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(DIRECT_ONE).routeId("AggregatingRouteOne").aggregate(header(correlator)).aggregationRepository(repoOne).aggregationStrategy(new SumOfIntsAggregationStrategy()).completionSize(completionSize).to(MOCK_GOTCHA);
      }
    }
;
    context().addRoutes(rbOne);
    context().start();
    mock.expectedMessageCount(2);
    mock.expectedBodiesReceived(1 + 3 + 4+ 5,6 + 7 + 20+ 21);
    produceOne.sendBodyAndHeader(1,correlator,correlator);
    produceOne.sendBodyAndHeader(3,correlator,correlator);
    produceOne.sendBodyAndHeader(4,correlator,correlator);
    produceOne.sendBodyAndHeader(5,correlator,correlator);
    produceOne.sendBodyAndHeader(6,correlator,correlator);
    produceOne.sendBodyAndHeader(7,correlator,correlator);
    produceOne.sendBodyAndHeader(20,correlator,correlator);
    produceOne.sendBodyAndHeader(21,correlator,correlator);
    mock.assertIsSatisfied();
  }
class SumOfIntsAggregationStrategy implements AggregationStrategy {
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
 else {
        Integer n=newExchange.getIn().getBody(Integer.class);
        Integer o=oldExchange.getIn().getBody(Integer.class);
        Integer v=(o == null ? 0 : o) + (n == null ? 0 : n);
        oldExchange.getIn().setBody(v,Integer.class);
        return oldExchange;
      }
    }
  }
}
