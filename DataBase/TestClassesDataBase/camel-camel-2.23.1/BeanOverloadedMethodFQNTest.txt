/** 
 */
public class BeanOverloadedMethodFQNTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testOrderNoFQN() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(MyOrder)").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("OK");
    template.sendBody("direct:start",new MyOrder());
    assertMockEndpointsSatisfied();
  }
  @Test public void testOrderNoFQNUnknown() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(Unknown)").to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start",new MyOrder());
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      NoTypeConversionAvailableException cause=assertIsInstanceOf(NoTypeConversionAvailableException.class,e.getCause().getCause());
      assertEquals("Unknown",cause.getValue());
    }
  }
  @Test public void testOrderNoFQNBoolean() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(MyOrder,Boolean)").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("OK;GOLD");
    template.sendBody("direct:start",new MyOrder());
    assertMockEndpointsSatisfied();
  }
  @Test public void testOrderFQN() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(org.apache.camel.component.bean.BeanOverloadedMethodFQNTest$MyOrder)").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("OK");
    template.sendBody("direct:start",new MyOrder());
    assertMockEndpointsSatisfied();
  }
  @Test public void testOrderFQNUnknown() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(org.apache.camel.component.bean.BeanOverloadedMethodFQNTest$Unknown)").to("mock:result");
      }
    }
);
    context.start();
    try {
      template.sendBody("direct:start",new MyOrder());
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      NoTypeConversionAvailableException cause=assertIsInstanceOf(NoTypeConversionAvailableException.class,e.getCause().getCause());
      assertEquals("org.apache.camel.component.bean.BeanOverloadedMethodFQNTest$Unknown",cause.getValue());
    }
  }
  @Test public void testOrderFQNBoolean() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").bean(MyBean.class,"order(org.apache.camel.component.bean.BeanOverloadedMethodFQNTest$MyOrder,Boolean)").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:result").expectedBodiesReceived("OK;GOLD");
    template.sendBody("direct:start",new MyOrder());
    assertMockEndpointsSatisfied();
  }
public static final class MyOrder {
  }
public static final class MyBean {
    public String order(    MyOrder order){
      return "OK";
    }
    public String order(    MyOrder order,    Boolean gold){
      return "OK;GOLD";
    }
  }
}
