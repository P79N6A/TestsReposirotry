public class CamelTestSupportTest extends CamelTestSupport {
  private volatile boolean called;
  @Override @Before public void setUp() throws Exception {
    called=false;
    replaceRouteFromWith("routeId","direct:start");
    super.setUp();
  }
  @Test public void replacesFromEndpoint() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test(expected=NoSuchEndpointException.class) public void exceptionThrownWhenEndpointNotFoundAndNoCreate(){
    getMockEndpoint("mock:bogus",false);
  }
  @Test(expected=NoSuchEndpointException.class) public void exceptionThrownWhenEndpointNotAMockEndpoint(){
    getMockEndpoint("direct:something",false);
  }
  @Test public void autoCreateNoneExisting(){
    MockEndpoint mock=getMockEndpoint("mock:bogus2",true);
    assertNotNull(mock);
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    called=true;
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("beer","yes");
    return jndi;
  }
  @Test public void testCreateRegistry(){
    assertTrue("Should call createRegistry",called);
    assertEquals("yes",context.getRegistry().lookupByName("beer"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:something").id("routeId").to("mock:result");
      }
    }
;
  }
}
