/** 
 * @version 
 */
@Deprecated @Ignore public class AsyncTraceHandlerTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Test public void testAsyncTraceHandler() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext contextLocal=super.createCamelContext();
    Tracer tracer=(Tracer)contextLocal.getDefaultTracer();
    tracer.setEnabled(true);
    tracer.getTraceHandlers().clear();
    tracer.getTraceHandlers().add(new MyTraceHandler());
    tracer.setTraceOutExchanges(true);
    return contextLocal;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").tracing().to("log:before").to("async:bye:camel").id("async").to("log:after").to("mock:result");
      }
    }
;
  }
private static class MyTraceHandler implements TraceEventHandler {
    @Override public void traceExchange(    ProcessorDefinition<?> node,    Processor target,    TraceInterceptor traceInterceptor,    Exchange exchange) throws Exception {
    }
    @Override public Object traceExchangeIn(    ProcessorDefinition<?> node,    Processor target,    TraceInterceptor traceInterceptor,    Exchange exchange) throws Exception {
      if (node.getId().equals("async")) {
        beforeThreadName=Thread.currentThread().getName();
      }
      return null;
    }
    @Override public void traceExchangeOut(    ProcessorDefinition<?> node,    Processor target,    TraceInterceptor traceInterceptor,    Exchange exchange,    Object traceState) throws Exception {
      if (node.getId().equals("async")) {
        afterThreadName=Thread.currentThread().getName();
      }
    }
  }
}
