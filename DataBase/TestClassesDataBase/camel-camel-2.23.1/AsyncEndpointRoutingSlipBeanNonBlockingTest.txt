/** 
 * @version 
 */
public class AsyncEndpointRoutingSlipBeanNonBlockingTest extends ContextTestSupport {
  private AsyncCallback innerCallback;
  private Exchange innerExchange;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyRoutingSlipBean());
    return jndi;
  }
  @Test public void testAsyncEndpointDontBlock() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    Endpoint startEndpoint=context.getEndpoint("direct:start");
    SendProcessor asyncSender=new SendProcessor(startEndpoint);
    ServiceHelper.startService(asyncSender);
    ExecutorService executorService=context.getExecutorServiceManager().newSingleThreadExecutor(this,"test");
    try {
      Future<Boolean> asyncFuture=executorService.submit(new ExchangeSubmitter(startEndpoint,asyncSender));
      Assert.assertFalse(asyncFuture.get(5,TimeUnit.SECONDS));
      innerExchange.getOut().setBody("Bye Camel");
      innerCallback.done(false);
      assertMockEndpointsSatisfied();
    }
  finally {
      executorService.shutdown();
      ServiceHelper.stopAndShutdownService(asyncSender);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("bean:myBean");
        from("direct:asyncRoute").process(new MyAsyncProcessor());
      }
    }
;
  }
public static class MyRoutingSlipBean {
    @RoutingSlip public String doSomething(){
      return "direct:asyncRoute,mock:result";
    }
  }
private static class ExchangeSubmitter implements Callable<Boolean> {
    private final Endpoint startEndpoint;
    private final SendProcessor asyncSender;
    ExchangeSubmitter(    Endpoint startEndpoint,    SendProcessor asyncSender){
      this.startEndpoint=startEndpoint;
      this.asyncSender=asyncSender;
    }
    @Override public Boolean call() throws Exception {
      Exchange exchange=startEndpoint.createExchange(ExchangePattern.InOut);
      exchange.getIn().setBody("Hello Camel");
      return asyncSender.process(exchange,new AsyncCallback(){
        @Override public void done(        boolean doneSync){
          Assert.assertFalse(doneSync);
        }
      }
);
    }
  }
private class MyAsyncProcessor implements AsyncProcessor {
    @Override public boolean process(    Exchange exchange,    AsyncCallback callback){
      innerCallback=callback;
      innerExchange=exchange;
      return false;
    }
    @Override public void process(    Exchange exchange) throws Exception {
      AsyncProcessorHelper.process(this,exchange);
    }
  }
}
