@RunWith(MockitoJUnitRunner.class) public class AtmosComponentTest {
  private static final String FAKE_REMOTE_PATH="/remote";
  private static final String FAKE_SECRET="fake-secret";
  private static final String FAKE_TOKEN="fake-token";
  private static final String FAKE_URI="http://fake/uri";
  @Mock private CamelContext context;
  @Test public void testComponentOptions() throws Exception {
    AtmosComponent component=new AtmosComponent(context);
    component.setFullTokenId(FAKE_TOKEN);
    component.setSecretKey(FAKE_SECRET);
    component.setSslValidation(false);
    component.setUri(FAKE_URI);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("remotePath",FAKE_REMOTE_PATH);
    AtmosEndpoint endpoint=component.createEndpoint("atmos://foo?remotePath=/remote","foo/get",parameters);
    AtmosConfiguration configuration=endpoint.getConfiguration();
    assertEquals(FAKE_TOKEN,configuration.getFullTokenId());
    assertEquals(FAKE_SECRET,configuration.getSecretKey());
    assertEquals(false,configuration.isEnableSslValidation());
    assertEquals(FAKE_URI,configuration.getUri());
  }
  @Test public void testUriParamsOverrideComponentOptions() throws Exception {
    AtmosComponent component=new AtmosComponent(context);
    component.setFullTokenId("fakeTokenToBeOverridden");
    component.setSecretKey("fakeSecretToBeOverridden");
    component.setSslValidation(true);
    component.setUri("http://fake/uri/to/be/overridden");
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("remotePath",FAKE_REMOTE_PATH);
    parameters.put("fullTokenId",FAKE_TOKEN);
    parameters.put("secretKey",FAKE_SECRET);
    parameters.put("enableSslValidation",false);
    parameters.put("uri",FAKE_URI);
    String uri=URISupport.appendParametersToURI("atmos://foo",parameters);
    AtmosEndpoint endpoint=component.createEndpoint(uri,"foo/get",parameters);
    AtmosConfiguration configuration=endpoint.getConfiguration();
    assertEquals(FAKE_TOKEN,configuration.getFullTokenId());
    assertEquals(FAKE_SECRET,configuration.getSecretKey());
    assertEquals(false,configuration.isEnableSslValidation());
    assertEquals(FAKE_URI,configuration.getUri());
  }
}
