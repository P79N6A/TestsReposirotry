/** 
 * @version 
 */
public class HawtDBGrowIssueTest extends CamelTestSupport {
  private HawtDBCamelCodec codec=new HawtDBCamelCodec();
  private HawtDBFile hawtDBFile;
  private final int size=1024;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    deleteDirectory("target/data");
    File file=new File("target/data/hawtdb.dat");
    hawtDBFile=new HawtDBFile();
    hawtDBFile.setFile(file);
    hawtDBFile.setMappingSegementSize(16 * 1024);
    hawtDBFile.setMaxFileSize(1024 * 1024);
    hawtDBFile.start();
  }
  @Override @After public void tearDown() throws Exception {
    hawtDBFile.stop();
    super.tearDown();
  }
  @Test public void testGrowIssue() throws Exception {
    StringBuilder sb=new StringBuilder(size);
    for (int i=0; i < 1024; i++) {
      sb.append("X");
    }
    final Buffer key=codec.marshallKey("foo");
    for (int i=0; i < size; i++) {
      final Buffer data=codec.marshallKey(i + "-" + sb.toString());
      log.debug("Updating " + i);
      hawtDBFile.execute(new Work<Object>(){
        public Object execute(        Transaction tx){
          SortedIndex<Buffer,Buffer> index=hawtDBFile.getRepositoryIndex(tx,"repo",true);
          return index.put(key,data);
        }
      }
);
    }
    Buffer out=hawtDBFile.execute(new Work<Buffer>(){
      public Buffer execute(      Transaction tx){
        SortedIndex<Buffer,Buffer> index=hawtDBFile.getRepositoryIndex(tx,"repo",true);
        return index.get(key);
      }
    }
);
    String data=codec.unmarshallKey(out);
    log.info(data);
    assertTrue("Should be 1023",data.startsWith("1023"));
    assertEquals(1029,data.length());
  }
}
