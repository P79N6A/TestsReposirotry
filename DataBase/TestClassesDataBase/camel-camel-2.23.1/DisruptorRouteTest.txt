/** 
 * @version
 */
public class DisruptorRouteTest extends TestSupport {
  @Test public void testDisruptorQueue() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    final CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("disruptor:test.a").to("disruptor:test.b");
        from("disruptor:test.b").process(new Processor(){
          @Override public void process(          final Exchange e){
            log.debug("Received exchange: " + e.getIn());
            latch.countDown();
          }
        }
);
      }
    }
);
    context.start();
    final Endpoint endpoint=context.getEndpoint("disruptor:test.a");
    final Exchange exchange=endpoint.createExchange();
    exchange.getIn().setHeader("cheese",123);
    final Producer producer=endpoint.createProducer();
    producer.process(exchange);
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    context.stop();
  }
  @Test public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {
    final CountDownLatch latch=new CountDownLatch(1);
    final CamelContext context=new DefaultCamelContext();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("disruptor:test.a").to("disruptor:test.b");
        from("disruptor:test.b").process(new Processor(){
          @Override public void process(          final Exchange e){
            log.debug("Received exchange: " + e.getIn());
            latch.countDown();
          }
        }
);
      }
    }
);
    context.start();
    final Endpoint endpoint=context.getEndpoint("disruptor:test.a");
    final Exchange exchange=endpoint.createExchange();
    exchange.getIn().setHeader("cheese",123);
    final Producer producer=endpoint.createProducer();
    producer.process(exchange);
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    context.stop();
  }
}
