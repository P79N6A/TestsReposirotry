public class ComponentVerifierTest extends Assert {
  @Test public void testGetErrorDetails(){
    VerificationError error=ResultErrorBuilder.withCodeAndDescription(VerificationError.asCode("test_code"),"test error desc").detail(VerificationError.asAttribute("test_attr_1"),"test_detail_1").detail(VerificationError.HttpAttribute.HTTP_CODE,"test_detail_2").build();
    Assert.assertEquals("test_detail_1",error.getDetail(VerificationError.asAttribute("test_attr_1")));
    Assert.assertEquals("test_detail_1",error.getDetail("test_attr_1"));
    Assert.assertEquals("test_detail_2",error.getDetail(VerificationError.HttpAttribute.HTTP_CODE));
    Assert.assertNull(error.getDetail(VerificationError.HttpAttribute.HTTP_TEXT));
    Assert.assertNull(error.getDetail(VerificationError.asAttribute("test_attr_non_existant")));
  }
  @Test public void testNullCode(){
    try {
      VerificationError.asCode(null);
      fail("Code must not be null");
    }
 catch (    IllegalArgumentException exp) {
      Assert.assertTrue(exp.getMessage().contains("null"));
    }
  }
  @Test public void testNullAttribute(){
    try {
      VerificationError.asAttribute(null);
      fail("Attribute must not be null");
    }
 catch (    IllegalArgumentException exp) {
      Assert.assertTrue(exp.getMessage().contains("null"));
    }
  }
  @Test public void testScopeFromString(){
    Assert.assertEquals(ComponentVerifier.Scope.PARAMETERS,ComponentVerifier.Scope.fromString("PaRaMeTeRS"));
    try {
      ComponentVerifier.Scope.fromString("unknown");
      fail();
    }
 catch (    IllegalArgumentException exp) {
    }
  }
}
