/** 
 * @version 
 */
public class SplitterThrowExceptionInExpressionTest extends ContextTestSupport {
  @Test public void testSplitterAndVerifyMock() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:error2").expectedMessageCount(1);
    getMockEndpoint("mock:split").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(ExpressionEvaluationException.class).handled(true).to("mock://error");
        from("direct://start").onException(ExpressionEvaluationException.class).handled(true).to("mock://error2").end().split(new MyExpression()).to("mock://split").end().to("log:result");
      }
    }
;
  }
private static class MyExpression implements Expression {
    public <T>T evaluate(    Exchange exchange,    Class<T> type){
      throw new ExpressionEvaluationException(null,exchange,null);
    }
  }
}
