/** 
 * Unit test for the file filter option using directories
 */
public class FileConsumerDirectoryFilterTest extends ContextTestSupport {
  private final String fileUrl="file://target/directoryfilter/?recursive=true&filter=#myFilter&initialDelay=0&delay=10";
  private final Set<String> names=new TreeSet<>();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myFilter",new MyDirectoryFilter<>());
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/directoryfilter");
    super.setUp();
  }
  @Test public void testFilterFilesWithARegularFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/directoryfilter/skipDir/","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    template.sendBodyAndHeader("file:target/directoryfilter/skipDir2/","This is a file to be filtered",Exchange.FILE_NAME,"skipme.txt");
    template.sendBodyAndHeader("file:target/directoryfilter/okDir/","Hello World",Exchange.FILE_NAME,"hello.txt");
    mock.assertIsSatisfied();
    assertEquals(4,names.size());
    List<String> list=new ArrayList<>(names);
    list.sort(null);
    assertEquals("okDir",list.get(0));
    assertTrue(list.get(0),list.get(1).equals("okDir/hello.txt") || list.get(1).equals("okDir\\hello.txt"));
    assertEquals("skipDir",list.get(2));
    assertEquals("skipDir2",list.get(3));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
public class MyDirectoryFilter<T> implements GenericFileFilter<T> {
    public boolean accept(    GenericFile<T> file){
      names.add(file.getFileName());
      if (file.isDirectory() && file.getFileName().startsWith("skip")) {
        return false;
      }
      return true;
    }
  }
}
