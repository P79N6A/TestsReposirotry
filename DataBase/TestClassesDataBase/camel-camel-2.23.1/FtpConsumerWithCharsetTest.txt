public class FtpConsumerWithCharsetTest extends FtpServerTestSupport {
  private final String payload="\u00e6\u00f8\u00e5 \u00a9";
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/upload?password=admin&charset=iso-8859-1";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    byte[] iso=payload.getBytes("iso-8859-1");
    byte[] utf=payload.getBytes("utf-8");
    log.debug("iso: {}",new String(iso,Charset.forName("iso-8859-1")));
    log.debug("utf: {}",new String(utf,Charset.forName("utf-8")));
    for (    byte b : iso) {
      log.debug("iso byte: {}",b);
    }
    for (    byte b : utf) {
      log.debug("utf byte: {}",b);
    }
    prepareFtpServer();
    File file=new File(FTP_ROOT_DIR + "/upload/iso.txt");
    assertTrue("The uploaded file should exists",file.exists());
    InputStream fis=IOHelper.buffered(new FileInputStream(file));
    byte[] buffer=new byte[100];
    int len=fis.read(buffer);
    assertTrue("Should read data: " + len,len != -1);
    byte[] data=new byte[len];
    System.arraycopy(buffer,0,data,0,len);
    fis.close();
    assertEquals(5,data.length);
    assertEquals(-26,data[0]);
    assertEquals(-8,data[1]);
    assertEquals(-27,data[2]);
    assertEquals(32,data[3]);
    assertEquals(-87,data[4]);
  }
  @Test public void testConsumerWithCharset() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(payload);
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    RemoteFile<?> file=(RemoteFile<?>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
    assertNotNull(file);
    assertEquals("iso-8859-1",file.getCharset());
    byte[] data=exchange.getIn().getBody(String.class).getBytes("UTF-8");
    assertEquals(9,data.length);
    assertEquals(-61,data[0]);
    assertEquals(-90,data[1]);
    assertEquals(-61,data[2]);
    assertEquals(-72,data[3]);
    assertEquals(-61,data[4]);
    assertEquals(-91,data[5]);
    assertEquals(32,data[6]);
    assertEquals(-62,data[7]);
    assertEquals(-87,data[8]);
  }
  private void prepareFtpServer() throws Exception {
    sendFile(getFtpUrl(),payload,"iso.txt");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(getFtpUrl()).to("mock:result");
      }
    }
;
  }
}
