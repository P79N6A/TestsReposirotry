/** 
 * @version 
 */
public class DefaultExchangeTest extends ExchangeTestSupport {
  @Test public void testBody() throws Exception {
    assertNotNull(exchange.getIn().getBody());
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getBody());
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getBody(String.class));
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getMandatoryBody());
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getMandatoryBody(String.class));
  }
  @Test public void testMandatoryBody() throws Exception {
    assertNotNull(exchange.getIn().getBody());
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getBody());
    try {
      assertEquals(null,exchange.getIn().getBody(Integer.class));
      fail("Should have thrown a TypeConversionException");
    }
 catch (    TypeConversionException e) {
    }
    assertEquals("<hello id='m123'>world!</hello>",exchange.getIn().getMandatoryBody());
    try {
      exchange.getIn().getMandatoryBody(Integer.class);
      fail("Should have thrown an InvalidPayloadException");
    }
 catch (    InvalidPayloadException e) {
    }
  }
  @Test public void testExceptionAsType() throws Exception {
    exchange.setException(ObjectHelper.wrapRuntimeCamelException(new ConnectException("Cannot connect to remote server")));
    ConnectException ce=exchange.getException(ConnectException.class);
    assertNotNull(ce);
    assertEquals("Cannot connect to remote server",ce.getMessage());
    IOException ie=exchange.getException(IOException.class);
    assertNotNull(ie);
    assertEquals("Cannot connect to remote server",ie.getMessage());
    Exception e=exchange.getException(Exception.class);
    assertNotNull(e);
    assertEquals("Cannot connect to remote server",e.getMessage());
    RuntimeCamelException rce=exchange.getException(RuntimeCamelException.class);
    assertNotNull(rce);
    assertNotSame("Cannot connect to remote server",rce.getMessage());
    assertEquals("Cannot connect to remote server",rce.getCause().getMessage());
  }
  @Test public void testHeader() throws Exception {
    assertNotNull(exchange.getIn().getHeaders());
    assertEquals(123,exchange.getIn().getHeader("bar"));
    assertEquals(new Integer(123),exchange.getIn().getHeader("bar",Integer.class));
    assertEquals("123",exchange.getIn().getHeader("bar",String.class));
    assertEquals(123,exchange.getIn().getHeader("bar",234));
    assertEquals(123,exchange.getIn().getHeader("bar",() -> 456));
    assertEquals(456,exchange.getIn().getHeader("baz",() -> 456));
    assertEquals(123,exchange.getIn().getHeader("bar",234));
    assertEquals(new Integer(123),exchange.getIn().getHeader("bar",234,Integer.class));
    assertEquals("123",exchange.getIn().getHeader("bar","234",String.class));
    assertEquals("123",exchange.getIn().getHeader("bar",() -> "456",String.class));
    assertEquals("456",exchange.getIn().getHeader("baz",() -> "456",String.class));
    assertEquals(234,exchange.getIn().getHeader("cheese",234));
    assertEquals("234",exchange.getIn().getHeader("cheese",234,String.class));
    assertEquals("456",exchange.getIn().getHeader("cheese",() -> 456,String.class));
  }
  @Test public void testProperty() throws Exception {
    exchange.removeProperty("foobar");
    assertFalse(exchange.hasProperties());
    exchange.setProperty("fruit","apple");
    assertTrue(exchange.hasProperties());
    assertEquals("apple",exchange.getProperty("fruit"));
    assertEquals(null,exchange.getProperty("beer"));
    assertEquals(null,exchange.getProperty("beer",String.class));
    assertEquals(Boolean.FALSE,exchange.getProperty("beer",boolean.class));
    assertEquals(null,exchange.getProperty("beer",Boolean.class));
    assertEquals("apple",exchange.getProperty("fruit",String.class));
    assertEquals("apple",exchange.getProperty("fruit","banana",String.class));
    assertEquals("banana",exchange.getProperty("beer","banana"));
    assertEquals("banana",exchange.getProperty("beer","banana",String.class));
  }
  @Test public void testRemoveProperties() throws Exception {
    exchange.removeProperty("foobar");
    assertFalse(exchange.hasProperties());
    exchange.setProperty("fruit","apple");
    exchange.setProperty("fruit1","banana");
    exchange.setProperty("zone","Africa");
    assertTrue(exchange.hasProperties());
    assertEquals("apple",exchange.getProperty("fruit"));
    assertEquals("banana",exchange.getProperty("fruit1"));
    assertEquals("Africa",exchange.getProperty("zone"));
    exchange.removeProperties("fr*");
    assertTrue(exchange.hasProperties());
    assertEquals(exchange.getProperties().size(),1);
    assertEquals(null,exchange.getProperty("fruit",String.class));
    assertEquals(null,exchange.getProperty("fruit1",String.class));
    assertEquals("Africa",exchange.getProperty("zone",String.class));
  }
  @Test public void testRemoveAllProperties() throws Exception {
    exchange.removeProperty("foobar");
    assertFalse(exchange.hasProperties());
    exchange.setProperty("fruit","apple");
    exchange.setProperty("fruit1","banana");
    exchange.setProperty("zone","Africa");
    assertTrue(exchange.hasProperties());
    exchange.removeProperties("*");
    assertFalse(exchange.hasProperties());
    assertEquals(exchange.getProperties().size(),0);
  }
  @Test public void testRemovePropertiesWithExclusion() throws Exception {
    exchange.removeProperty("foobar");
    assertFalse(exchange.hasProperties());
    exchange.setProperty("fruit","apple");
    exchange.setProperty("fruit1","banana");
    exchange.setProperty("fruit2","peach");
    exchange.setProperty("zone","Africa");
    assertTrue(exchange.hasProperties());
    assertEquals("apple",exchange.getProperty("fruit"));
    assertEquals("banana",exchange.getProperty("fruit1"));
    assertEquals("peach",exchange.getProperty("fruit2"));
    assertEquals("Africa",exchange.getProperty("zone"));
    exchange.removeProperties("fr*","fruit1","fruit2");
    assertTrue(exchange.hasProperties());
    assertEquals(exchange.getProperties().size(),3);
    assertEquals(null,exchange.getProperty("fruit",String.class));
    assertEquals("banana",exchange.getProperty("fruit1",String.class));
    assertEquals("peach",exchange.getProperty("fruit2",String.class));
    assertEquals("Africa",exchange.getProperty("zone",String.class));
  }
  @Test public void testRemovePropertiesPatternWithAllExcluded() throws Exception {
    exchange.removeProperty("foobar");
    assertFalse(exchange.hasProperties());
    exchange.setProperty("fruit","apple");
    exchange.setProperty("fruit1","banana");
    exchange.setProperty("fruit2","peach");
    exchange.setProperty("zone","Africa");
    assertTrue(exchange.hasProperties());
    assertEquals("apple",exchange.getProperty("fruit"));
    assertEquals("banana",exchange.getProperty("fruit1"));
    assertEquals("peach",exchange.getProperty("fruit2"));
    assertEquals("Africa",exchange.getProperty("zone"));
    exchange.removeProperties("fr*","fruit","fruit1","fruit2","zone");
    assertTrue(exchange.hasProperties());
    assertEquals(exchange.getProperties().size(),4);
    assertEquals("apple",exchange.getProperty("fruit",String.class));
    assertEquals("banana",exchange.getProperty("fruit1",String.class));
    assertEquals("peach",exchange.getProperty("fruit2",String.class));
    assertEquals("Africa",exchange.getProperty("zone",String.class));
  }
  @Test public void testInType() throws Exception {
    exchange.setIn(new MyMessage());
    MyMessage my=exchange.getIn(MyMessage.class);
    assertNotNull(my);
  }
  @Test public void testOutType() throws Exception {
    exchange.setOut(new MyMessage());
    MyMessage my=exchange.getOut(MyMessage.class);
    assertNotNull(my);
  }
  @Test public void testCopy(){
    DefaultExchange sourceExchange=new DefaultExchange(context);
    MyMessage sourceIn=new MyMessage();
    sourceExchange.setIn(sourceIn);
    Exchange destExchange=sourceExchange.copy();
    Message destIn=destExchange.getIn();
    assertEquals("Dest message should be of the same type as source message",sourceIn.getClass(),destIn.getClass());
  }
  @Test public void testFaultCopy(){
    testFaultCopy(false);
  }
  @Test public void testFaultSafeCopy(){
    testFaultCopy(true);
  }
  private void testFaultCopy(  boolean safe){
    DefaultExchange sourceExchange=new DefaultExchange(context);
    MyMessage source=new MyMessage();
    source.setFault(true);
    sourceExchange.setIn(source);
    sourceExchange.setOut(source);
    Exchange destExchange=sourceExchange.copy(safe);
    assertEquals("Fault property was not copied to IN message",sourceExchange.getIn().isFault(),destExchange.getIn().isFault());
    assertEquals("Fault property was not copied to OUT message",sourceExchange.getOut().isFault(),destExchange.getOut().isFault());
  }
public static class MyMessage extends DefaultMessage {
    @Override public MyMessage newInstance(){
      return new MyMessage();
    }
  }
}
