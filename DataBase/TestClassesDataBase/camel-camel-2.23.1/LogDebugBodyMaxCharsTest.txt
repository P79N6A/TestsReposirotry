/** 
 * @version 
 */
public class LogDebugBodyMaxCharsTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS,"20");
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("logFormatter",new TraceExchangeFormatter());
    return jndi;
  }
  @Test public void testLogBodyMaxLengthTest() throws Exception {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < 1000; i++) {
      int value=i % 10;
      sb.append(value);
    }
    String body=sb.toString();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
    TraceExchangeFormatter myFormatter=context.getRegistry().lookupByNameAndType("logFormatter",TraceExchangeFormatter.class);
    String msg=myFormatter.getMessage();
    assertTrue(msg.endsWith("Body: 01234567890123456789... [Body clipped after 20 chars, total length is 1000]]"));
    assertNotSame("clipped log and real body should not be the same",msg,mock.getReceivedExchanges().get(0).getIn().getBody(String.class));
  }
  @Test public void testNotClipped() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","1234567890");
    assertMockEndpointsSatisfied();
    TraceExchangeFormatter myFormatter=context.getRegistry().lookupByNameAndType("logFormatter",TraceExchangeFormatter.class);
    String msg=myFormatter.getMessage();
    assertTrue(msg.endsWith("Body: 1234567890]"));
    assertNotSame("clipped log and real body should not be the same",msg,mock.getReceivedExchanges().get(0).getIn().getBody(String.class));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("mock:result");
      }
    }
;
  }
}
