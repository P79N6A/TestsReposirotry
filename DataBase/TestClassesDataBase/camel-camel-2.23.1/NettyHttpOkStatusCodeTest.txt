public class NettyHttpOkStatusCodeTest extends BaseNettyTest {
  @Test public void testNoOk() throws Exception {
    byte[] data="Hello World".getBytes();
    try {
      template.requestBody("netty4-http:http://localhost:{{port}}/test?okStatusCodeRange=200-200",data,String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      NettyHttpOperationFailedException cause=assertIsInstanceOf(NettyHttpOperationFailedException.class,e.getCause());
      assertEquals(209,cause.getStatusCode());
      String body=cause.getContentAsString();
      assertEquals("Not allowed",body);
    }
  }
  @Test public void testNoOkComplexRange() throws Exception {
    byte[] data="Hello World".getBytes();
    try {
      template.requestBody("netty4-http:http://localhost:{{port}}/test?okStatusCodeRange=200-204,301",data,String.class);
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      NettyHttpOperationFailedException cause=assertIsInstanceOf(NettyHttpOperationFailedException.class,e.getCause());
      assertEquals(209,cause.getStatusCode());
      String body=cause.getContentAsString();
      assertEquals("Not allowed",body);
    }
  }
  @Test public void testOk() throws Exception {
    byte[] data="Hello World".getBytes();
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/test?okStatusCodeRange=200-209",data,String.class);
    assertEquals("Not allowed",out);
  }
  @Test public void testOkComplexRange() throws Exception {
    byte[] data="Hello World".getBytes();
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/test?okStatusCodeRange=200-204,209,301-304",data,String.class);
    assertEquals("Not allowed",out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/test").setHeader(Exchange.HTTP_RESPONSE_CODE,constant(209)).transform().constant("Not allowed");
      }
    }
;
  }
}
