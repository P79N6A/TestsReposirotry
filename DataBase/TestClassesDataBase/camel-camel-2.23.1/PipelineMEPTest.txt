/** 
 * Unit test for pipeline keeping the MEP (CAMEL-1233)
 * @version 
 */
public class PipelineMEPTest extends ContextTestSupport {
  @Test public void testInOnly() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(3);
    Exchange exchange=context.getEndpoint("direct:a").createExchange(ExchangePattern.InOnly);
    exchange.getIn().setBody(1);
    Exchange out=template.send("direct:a",exchange);
    assertNotNull(out);
    assertEquals(ExchangePattern.InOnly,out.getPattern());
    assertMockEndpointsSatisfied();
    assertEquals(ExchangePattern.InOnly,mock.getExchanges().get(0).getPattern());
  }
  @Test public void testInOut() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived(3);
    Exchange exchange=context.getEndpoint("direct:a").createExchange(ExchangePattern.InOut);
    exchange.getIn().setBody(1);
    Exchange out=template.send("direct:a",exchange);
    assertNotNull(out);
    assertEquals(ExchangePattern.InOut,out.getPattern());
    assertMockEndpointsSatisfied();
    assertEquals(ExchangePattern.InOut,mock.getExchanges().get(0).getPattern());
  }
  protected RouteBuilder createRouteBuilder(){
    final Processor inProcessor=new Processor(){
      public void process(      Exchange exchange){
        Integer number=exchange.getIn().getBody(Integer.class);
        if (number == null) {
          number=0;
        }
        number=number + 1;
        exchange.getIn().setBody(number);
      }
    }
;
    final Processor outProcessor=new Processor(){
      public void process(      Exchange exchange){
        Integer number=exchange.getIn().getBody(Integer.class);
        if (number == null) {
          number=0;
        }
        number=number + 1;
        exchange.getOut().setBody(number);
      }
    }
;
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").process(outProcessor).pipeline("log:x","log:y").process(inProcessor).to("mock:result");
      }
    }
;
  }
}
