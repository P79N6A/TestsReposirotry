/** 
 * @version 
 */
public class RestRestletBindingInJaxbOutStringWithXmlTest extends RestletTestSupport {
  @Test public void testBindingMode() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:input");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(UserJaxbPojo.class);
    String body="<user name=\"Donald Duck\" id=\"123\"></user>";
    String reply=template.requestBody("http://localhost:" + portNum + "/users/new",body,String.class);
    assertEquals("<message>Thanks for calling us</message>",reply);
    assertMockEndpointsSatisfied();
    UserJaxbPojo user=mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class);
    assertNotNull(user);
    assertEquals(123,user.getId());
    assertEquals("Donald Duck",user.getName());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.auto).dataFormatProperty("xml.out.mustBeJAXBElement","false");
        rest("/users/").post("new").consumes("application/xml").produces("application/xml").type(UserJaxbPojo.class).route().to("mock:input").transform().constant("<message>Thanks for calling us</message>");
      }
    }
;
  }
}
