/** 
 */
public class RetryWhilePredicateExpressionIssueTest extends ContextTestSupport {
  @Test public void testRetryWhilePredicate() throws Exception {
    MyCoolDude dude=new MyCoolDude();
    template.sendBodyAndHeader("direct:start",dude,"foo",123);
    assertEquals(3 + 1,dude.getCounter());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IllegalArgumentException.class).handled(true).redeliveryDelay(0).retryWhile(new Predicate(){
          @Override public boolean matches(          Exchange exchange){
            Predicate predicate=and(simple("${body.areWeCool} == 'no'"),isNotNull(header("foo")));
            boolean answer=predicate.matches(exchange);
            return answer;
          }
        }
);
        from("direct:start").throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
public static class MyCoolDude {
    private int counter;
    public String areWeCool(){
      if (counter++ < 3) {
        return "no";
      }
 else {
        return "yes";
      }
    }
    public int getCounter(){
      return counter;
    }
  }
}
