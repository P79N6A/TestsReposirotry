/** 
 * @version 
 */
public class AdviceWithRoutePolicyTest extends ContextTestSupport {
  @Test public void testOk() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").message(0).header("MyRoutePolicy").isEqualTo(true);
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").message(0).header("MyRoutePolicy").isEqualTo(true);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAdviceRoutePolicyRemoved() throws Exception {
    RouteDefinition route=context.getRouteDefinitions().get(0);
    route.adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        getOriginalRoute().setRoutePolicies(null);
      }
    }
);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").message(0).header("MyRoutePolicy").isNull();
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").message(0).header("MyRoutePolicy").isNull();
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routePolicy(new MyRoutePolicy()).to("mock:foo").to("mock:bar");
      }
    }
;
  }
private class MyRoutePolicy extends RoutePolicySupport {
    @Override public void onExchangeBegin(    Route route,    Exchange exchange){
      exchange.getIn().setHeader("MyRoutePolicy",true);
    }
  }
}
