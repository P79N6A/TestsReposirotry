/** 
 * @version 
 */
public class LogInputStreamTest extends ContextTestSupport {
  @Test public void testA() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:a");
    mock.expectedBodiesReceived("Hello World");
    InputStream is=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:a",is);
    assertMockEndpointsSatisfied();
  }
  @Test public void testB() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:b");
    mock.expectedMessageCount(1);
    mock.message(0).body().convertToString().isEqualTo("Hello World");
    InputStream is=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:b",is);
    assertMockEndpointsSatisfied();
  }
  @Test public void testC() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:c");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    InputStream is=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:c",is);
    assertMockEndpointsSatisfied();
  }
  @Test public void testD() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:d");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    InputStream is=new ByteArrayInputStream("Hello World".getBytes());
    template.sendBody("direct:d",is);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:a").to("log:a").to("mock:a");
        from("direct:b").to("log:b?showStreams=true").to("mock:b");
        from("direct:c").streamCaching().to("log:c").to("mock:c");
        from("direct:d").streamCaching().to("log:d?showStreams=true").to("mock:d");
      }
    }
;
  }
}
