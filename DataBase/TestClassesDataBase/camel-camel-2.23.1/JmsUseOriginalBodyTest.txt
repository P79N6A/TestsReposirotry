/** 
 * Unit test for useOriginalBody unit test
 */
public class JmsUseOriginalBodyTest extends CamelTestSupport {
  @Test public void testUseOriginalBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:a");
    dead.expectedBodiesReceived("Hello");
    template.sendBody("activemq:queue:a","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDoNotUseOriginalBody() throws Exception {
    MockEndpoint dead=getMockEndpoint("mock:b");
    dead.expectedBodiesReceived("Hello World");
    template.sendBody("activemq:queue:b","Hello");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:a").onException(IllegalArgumentException.class).handled(true).useOriginalMessage().maximumRedeliveries(2).to("mock:a").end().setBody(body().append(" World")).process(new MyThrowProcessor());
        from("activemq:queue:b").onException(IllegalArgumentException.class).handled(true).maximumRedeliveries(2).to("mock:b").end().setBody(body().append(" World")).process(new MyThrowProcessor());
      }
    }
;
  }
public static class MyThrowProcessor implements Processor {
    public MyThrowProcessor(){
    }
    public void process(    Exchange exchange) throws Exception {
      assertEquals("Hello World",exchange.getIn().getBody(String.class));
      throw new IllegalArgumentException("Forced");
    }
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
}
