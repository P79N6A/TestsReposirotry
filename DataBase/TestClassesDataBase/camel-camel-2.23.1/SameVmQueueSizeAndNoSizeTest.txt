/** 
 */
public class SameVmQueueSizeAndNoSizeTest extends ContextTestSupport {
  @Test public void testSameQueue() throws Exception {
    for (int i=0; i < 100; i++) {
      template.sendBody("vm:foo","" + i);
    }
    try {
      template.sendBody("vm:foo","Should be full now");
      fail("Should fail");
    }
 catch (    CamelExecutionException e) {
      IllegalStateException ise=assertIsInstanceOf(IllegalStateException.class,e.getCause());
      if (!isJavaVendor("ibm")) {
        assertEquals("Queue full",ise.getMessage());
      }
    }
  }
  @Test public void testSameQueueDifferentSize() throws Exception {
    try {
      template.sendBody("vm:foo?size=200","Should fail");
      fail("Should fail");
    }
 catch (    ResolveEndpointFailedException e) {
      IllegalArgumentException ise=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Cannot use existing queue vm://foo as the existing queue size 100 does not match given queue size 200",ise.getMessage());
    }
  }
  @Test public void testSameQueueDifferentSizeBar() throws Exception {
    try {
      template.sendBody("vm:bar?size=200","Should fail");
      fail("Should fail");
    }
 catch (    ResolveEndpointFailedException e) {
      IllegalArgumentException ise=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertEquals("Cannot use existing queue vm://bar as the existing queue size " + SedaConstants.QUEUE_SIZE + " does not match given queue size 200",ise.getMessage());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("vm:foo?size=100").routeId("foo").noAutoStartup().to("mock:foo");
        from("vm:bar").routeId("bar").noAutoStartup().to("mock:bar");
      }
    }
;
  }
}
