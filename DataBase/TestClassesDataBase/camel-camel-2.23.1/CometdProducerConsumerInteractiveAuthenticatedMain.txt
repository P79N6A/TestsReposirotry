@Ignore("Run this test manually") public class CometdProducerConsumerInteractiveAuthenticatedMain {
  private static final String URI="cometd://127.0.0.1:9091/channel/test?baseResource=file:./src/test/resources/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2";
  private static final String URIS="cometds://127.0.0.1:9443/channel/test?baseResource=file:./src/test/resources/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2";
  private CamelContext context;
  private String pwd="changeit";
  public static void main(  String[] args) throws Exception {
    CometdProducerConsumerInteractiveAuthenticatedMain me=new CometdProducerConsumerInteractiveAuthenticatedMain();
    me.testCometdProducerConsumerInteractive();
  }
  public void testCometdProducerConsumerInteractive() throws Exception {
    context=new DefaultCamelContext();
    context.addRoutes(createRouteBuilder());
    context.start();
  }
  private RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        CometdComponent component=(CometdComponent)context.getComponent("cometds");
        component.setSslPassword(pwd);
        component.setSslKeyPassword(pwd);
        CometdComponent component2=(CometdComponent)context.getComponent("cometd");
        BayeuxAuthenticator bayeuxAuthenticator=new BayeuxAuthenticator();
        component2.setSecurityPolicy(bayeuxAuthenticator);
        component2.addExtension(bayeuxAuthenticator);
        File file=new File("./src/test/resources/jsse/localhost.ks");
        URI keyStoreUrl=file.toURI();
        component.setSslKeystore(keyStoreUrl.getPath());
        from("stream:in").to(URI).to(URIS);
      }
    }
;
  }
  /** 
 * Custom SecurityPolicy, see http://cometd.org/documentation/howtos/authentication for details
 */
public static final class BayeuxAuthenticator extends DefaultSecurityPolicy implements BayeuxServer.Extension, ServerSession.RemoveListener {
    private String user="changeit";
    private String pwd="changeit";
    @Override public boolean canHandshake(    BayeuxServer server,    ServerSession session,    ServerMessage message){
      if (session.isLocalSession()) {
        return true;
      }
      Map<String,Object> ext=message.getExt();
      if (ext == null) {
        return false;
      }
      @SuppressWarnings("unchecked") Map<String,Object> authentication=(Map<String,Object>)ext.get("authentication");
      if (authentication == null) {
        return false;
      }
      Object authenticationData=verify(authentication);
      if (authenticationData == null) {
        return false;
      }
      session.addListener(this);
      return true;
    }
    private Object verify(    Map<String,Object> authentication){
      if (!user.equals(authentication.get("user"))) {
        return null;
      }
      if (!pwd.equals(authentication.get("credentials"))) {
        return null;
      }
      return "OK";
    }
    public boolean sendMeta(    ServerSession to,    ServerMessage.Mutable message){
      if (Channel.META_HANDSHAKE.equals(message.getChannel())) {
        if (!message.isSuccessful()) {
          Map<String,Object> advice=message.getAdvice(true);
          advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_HANDSHAKE_VALUE);
          Map<String,Object> ext=message.getExt(true);
          Map<String,Object> authentication=new HashMap<>();
          ext.put("authentication",authentication);
          authentication.put("failed",true);
          authentication.put("failureReason","invalid_credentials");
        }
      }
      return true;
    }
    public void removed(    ServerSession session,    boolean timeout){
    }
    public boolean rcv(    ServerSession from,    ServerMessage.Mutable message){
      return true;
    }
    public boolean rcvMeta(    ServerSession from,    ServerMessage.Mutable message){
      return true;
    }
    public boolean send(    ServerSession from,    ServerSession to,    ServerMessage.Mutable message){
      return true;
    }
  }
}
