/** 
 * @version 
 */
public class InterceptorStrategyNotOrderedTest extends ContextTestSupport {
  @Test public void testInterceptorStrategyNotOrdered() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedHeaderReceived("order","foobar");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addInterceptStrategy(new FooInterceptStrategy());
        context.addInterceptStrategy(new BarInterceptStrategy());
        from("direct:start").to("mock:result");
      }
    }
;
  }
private static class FooInterceptStrategy implements InterceptStrategy {
    public Processor wrapProcessorInInterceptors(    CamelContext context,    ProcessorDefinition<?> definition,    final Processor target,    Processor nextTarget) throws Exception {
      Processor answer=new Processor(){
        public void process(        Exchange exchange) throws Exception {
          String order=exchange.getIn().getHeader("order","",String.class);
          order=order + "foo";
          exchange.getIn().setHeader("order",order);
          target.process(exchange);
        }
      }
;
      return answer;
    }
  }
private static class BarInterceptStrategy implements InterceptStrategy {
    public Processor wrapProcessorInInterceptors(    CamelContext context,    ProcessorDefinition<?> definition,    final Processor target,    Processor nextTarget) throws Exception {
      Processor answer=new Processor(){
        public void process(        Exchange exchange) throws Exception {
          String order=exchange.getIn().getHeader("order","",String.class);
          order=order + "bar";
          exchange.getIn().setHeader("order",order);
          target.process(exchange);
        }
      }
;
      return answer;
    }
  }
}
