/** 
 * @version 
 */
public class SplitterParallelStopOnExceptionWithOnExceptionTest extends ContextTestSupport {
  @Test public void testSplitStopOnExceptionOk() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:split");
    mock.expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
    getMockEndpoint("mock:handled").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World,Bye World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitStopOnExceptionStop1() throws Exception {
    getMockEndpoint("mock:split").expectedMinimumMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    String out=template.requestBody("direct:start","Kaboom,Hello World,Bye World",String.class);
    assertEquals("Damn Forced",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitStopOnExceptionStop2() throws Exception {
    getMockEndpoint("mock:split").expectedMinimumMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    String out=template.requestBody("direct:start","Hello World,Kaboom,Bye World",String.class);
    assertEquals("Damn Forced",out);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitStopOnExceptionStop3() throws Exception {
    getMockEndpoint("mock:split").expectedMinimumMessageCount(0);
    getMockEndpoint("mock:handled").expectedMessageCount(1);
    String out=template.requestBody("direct:start","Hello World,Bye World,Kaboom",String.class);
    assertEquals("Damn Forced",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}"));
        from("direct:start").split(body().tokenize(",")).stopOnException().parallelProcessing().process(new MyProcessor()).to("mock:split");
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Kaboom".equals(body)) {
        throw new IllegalArgumentException("Forced");
      }
    }
  }
}
