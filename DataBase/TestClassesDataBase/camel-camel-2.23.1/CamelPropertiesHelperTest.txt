@RunWith(SpringRunner.class) @DirtiesContext @SpringBootApplication @SpringBootTest(classes={CamelPropertiesHelperTest.TestConfiguration.class}) public class CamelPropertiesHelperTest {
  @Autowired ApplicationContext context;
  @Autowired CamelContext camelContext;
@Configuration static class TestConfiguration {
    @Bean(name="myCoolOption") MyOption myCoolBean(){
      return new MyOption();
    }
  }
static class MyOption {
  }
static class MyClass {
    private int id;
    private String name;
    private MyOption option;
    public int getId(){
      return id;
    }
    public void setId(    int id){
      this.id=id;
    }
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
    public MyOption getOption(){
      return option;
    }
    public void setOption(    MyOption option){
      this.option=option;
    }
  }
  @Test public void testSetCamelProperties() throws Exception {
    MyClass target=new MyClass();
    Map<String,Object> map=new HashMap<>();
    map.put("id","123");
    map.put("name","Donald Duck");
    map.put("option","myCoolOption");
    CamelPropertiesHelper.setCamelProperties(camelContext,target,map,true);
    Assert.assertEquals("Should configure all options",0,map.size());
    Assert.assertEquals(123,target.getId());
    Assert.assertEquals("Donald Duck",target.getName());
    Assert.assertSame(context.getBean("myCoolOption"),target.getOption());
  }
  @Test public void testSetCamelPropertiesReference() throws Exception {
    MyClass target=new MyClass();
    Map<String,Object> map=new HashMap<>();
    map.put("id","123");
    map.put("name","Donald Duck");
    map.put("option","#myCoolOption");
    CamelPropertiesHelper.setCamelProperties(camelContext,target,map,true);
    Assert.assertEquals("Should configure all options",0,map.size());
    Assert.assertEquals(123,target.getId());
    Assert.assertEquals("Donald Duck",target.getName());
    Assert.assertSame(context.getBean("myCoolOption"),target.getOption());
  }
  @Test public void testSetCamelPropertiesUnknownOption() throws Exception {
    MyClass target=new MyClass();
    Map<String,Object> map=new LinkedHashMap<>();
    map.put("id","123");
    map.put("name","Donald Duck");
    map.put("option","#myCoolOption");
    map.put("unknown","foo");
    try {
      CamelPropertiesHelper.setCamelProperties(camelContext,target,map,true);
      Assert.fail("Should have thrown exception");
    }
 catch (    IllegalArgumentException e) {
      Assert.assertTrue(e.getMessage().startsWith("Cannot configure option [unknown] with value [foo]"));
    }
    Assert.assertEquals("Should configure the three first options",1,map.size());
    Assert.assertEquals(123,target.getId());
    Assert.assertEquals("Donald Duck",target.getName());
    Assert.assertSame(context.getBean("myCoolOption"),target.getOption());
  }
  @Test public void testSetCamelPropertiesUnknownOptionIgnore() throws Exception {
    MyClass target=new MyClass();
    Map<String,Object> map=new LinkedHashMap<>();
    map.put("id","123");
    map.put("name","Donald Duck");
    map.put("option","#myCoolOption");
    map.put("unknown","foo");
    CamelPropertiesHelper.setCamelProperties(camelContext,target,map,false);
    Assert.assertEquals("Should configure the three first options",1,map.size());
    Assert.assertEquals(123,target.getId());
    Assert.assertEquals("Donald Duck",target.getName());
    Assert.assertSame(context.getBean("myCoolOption"),target.getOption());
  }
}
