/** 
 * @version 
 */
public class JpaProducerPassingEntityManagerTest extends AbstractJpaTest {
  protected static final String SELECT_ALL_STRING="select x from " + SendEmail.class.getName() + " x";
  @Test public void testRouteJpa() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    context.startRoute("foo");
    JpaEndpoint jpa=context.getEndpoint("jpa://" + SendEmail.class.getName(),JpaEndpoint.class);
    EntityManagerFactory emf=jpa.getEntityManagerFactory();
    EntityManager entityManager=emf.createEntityManager();
    template.sendBody("direct:start",new SendEmail("foo@beer.org"));
    Exchange exchange=mock.getReceivedExchanges().get(0);
    SendEmail persistedEntity=exchange.getIn().getBody(SendEmail.class);
    SendEmail emfindEntity=entityManager.find(SendEmail.class,persistedEntity.getId());
    assertNotSame(emfindEntity,persistedEntity);
    entityManager.close();
    mock.reset();
    entityManager=emf.createEntityManager();
    template.sendBodyAndHeader("direct:start",new SendEmail("bar@beer.org"),JpaConstants.ENTITY_MANAGER,entityManager);
    exchange=mock.getReceivedExchanges().get(0);
    persistedEntity=exchange.getIn().getBody(SendEmail.class);
    emfindEntity=entityManager.find(SendEmail.class,persistedEntity.getId());
    assertSame(emfindEntity,persistedEntity);
    entityManager.close();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new SpringRouteBuilder(){
      public void configure(){
        from("direct:start").id("foo").to("jpa://" + SendEmail.class.getName() + "?usePassedInEntityManager=true").to("mock:result");
      }
    }
;
  }
  @Override protected String routeXml(){
    return "org/apache/camel/processor/jpa/springJpaRouteTest.xml";
  }
  @Override protected String selectAllString(){
    return SELECT_ALL_STRING;
  }
}
