/** 
 * @version 
 */
public class FileLanguageCBRTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/cbr");
    super.setUp();
  }
  @Test public void testTxt() throws Exception {
    getMockEndpoint("mock:txt").expectedMessageCount(1);
    getMockEndpoint("mock:dat").expectedMessageCount(0);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBodyAndHeader("file://target/cbr","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testDat() throws Exception {
    getMockEndpoint("mock:txt").expectedMessageCount(0);
    getMockEndpoint("mock:dat").expectedMessageCount(1);
    getMockEndpoint("mock:other").expectedMessageCount(0);
    template.sendBodyAndHeader("file://target/cbr","Bye World",Exchange.FILE_NAME,"bye.dat");
    assertMockEndpointsSatisfied();
  }
  @Test public void testOther() throws Exception {
    getMockEndpoint("mock:txt").expectedMessageCount(0);
    getMockEndpoint("mock:dat").expectedMessageCount(0);
    getMockEndpoint("mock:other").expectedMessageCount(1);
    template.sendBodyAndHeader("file://target/cbr","Hi World",Exchange.FILE_NAME,"hi.foo");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file://target/cbr?delete=true&initialDelay=0&delay=10").convertBodyTo(String.class).choice().when().simple("${file:ext} == 'txt'").to("mock:txt").when().simple("${file:ext} == 'dat'").to("mock:dat").otherwise().to("mock:other");
      }
    }
;
  }
}
