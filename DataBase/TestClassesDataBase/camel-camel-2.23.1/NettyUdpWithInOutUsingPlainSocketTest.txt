/** 
 * @version 
 */
public class NettyUdpWithInOutUsingPlainSocketTest extends BaseNettyTest {
  private static final Logger LOG=LoggerFactory.getLogger(NettyUdpWithInOutUsingPlainSocketTest.class);
  @Test public void testSendAndReceiveOnce() throws Exception {
    String out=sendAndReceiveUdpMessages("World");
    assertNotNull("should receive data",out);
    assertEquals("Hello World\n",out);
  }
  private String sendAndReceiveUdpMessages(  String input) throws Exception {
    DatagramSocket socket=new DatagramSocket();
    InetAddress address=InetAddress.getByName("127.0.0.1");
    byte[] data=(input + "\n").getBytes();
    DatagramPacket packet=new DatagramPacket(data,data.length,address,getPort());
    LOG.debug("+++ Sending data +++");
    socket.send(packet);
    Thread.sleep(1000);
    byte[] buf=new byte[128];
    DatagramPacket receive=new DatagramPacket(buf,buf.length,address,getPort());
    LOG.debug("+++ Receiving data +++");
    socket.receive(receive);
    socket.close();
    return new String(receive.getData(),0,receive.getLength());
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("netty4:udp://127.0.0.1:{{port}}?textline=true&sync=true").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String s=exchange.getIn().getBody(String.class);
            LOG.debug("Server got: " + s);
            exchange.getOut().setBody("Hello " + s);
            assertNotNull("The remote address header should not be Null",exchange.getIn().getHeader(NettyConstants.NETTY_REMOTE_ADDRESS));
          }
        }
);
      }
    }
;
  }
}
