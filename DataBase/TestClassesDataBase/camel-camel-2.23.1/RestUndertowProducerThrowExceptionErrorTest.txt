public class RestUndertowProducerThrowExceptionErrorTest extends BaseUndertowTest {
  @Test public void testUndertowProducerOk() throws Exception {
    String out=fluentTemplate.withHeader("id","123").to("direct:start").request(String.class);
    assertEquals("123;Donald Duck",out);
  }
  @Test public void testUndertowProducerFail() throws Exception {
    Exchange out=fluentTemplate.withHeader("id","777").to("direct:start").request(Exchange.class);
    assertNotNull(out);
    assertFalse("Should not have thrown exception",out.isFailed());
    assertEquals(500,out.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        restConfiguration().component("undertow").host("localhost").port(getPort()).endpointProperty("throwExceptionOnFailure","false");
        from("direct:start").to("rest:get:users/{id}/basic");
        rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String id=exchange.getIn().getHeader("id",String.class);
            if ("777".equals(id)) {
              throw new IllegalArgumentException("Bad id number");
            }
            exchange.getOut().setBody(id + ";Donald Duck");
          }
        }
);
      }
    }
;
  }
}
