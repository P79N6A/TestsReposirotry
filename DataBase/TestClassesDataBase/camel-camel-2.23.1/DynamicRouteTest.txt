public class DynamicRouteTest extends CamelTestSupport {
  @Test public void testDynamicRouteWithJms() throws Exception {
    String response=template.requestBody("jms:queue:request?replyTo=bar","foo",String.class);
    assertEquals("response is foo",response);
    response=template.requestBody("jms:queue:request","bar",String.class);
    assertEquals("response is bar",response);
  }
  @Test public void testDynamicRouteWithDirect() throws Exception {
    String response=template.requestBody("direct:start","foo",String.class);
    assertEquals("response is foo",response);
    response=template.requestBody("direct:start","bar",String.class);
    assertEquals("response is bar",response);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("jms:queue:request").dynamicRouter().method(MyDynamicRouter.class,"route");
        from("direct:start").dynamicRouter(method(new MyDynamicRouter()));
      }
    }
;
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent amq=jmsComponentAutoAcknowledge(connectionFactory);
    amq.setCamelContext(context);
    answer.bind("jms",amq);
    answer.bind("myBean",new MyBean());
    return answer;
  }
public static class MyBean {
    public String foo(){
      return "response is foo";
    }
    public String bar(){
      return "response is bar";
    }
  }
public static class MyDynamicRouter {
    public String route(    String methodName,    @Header(Exchange.SLIP_ENDPOINT) String previous){
      if (previous != null && previous.startsWith("bean://myBean?method")) {
        return null;
      }
 else {
        return "bean:myBean?method=" + methodName;
      }
    }
  }
}
