/** 
 * Unit test for using our own aggregation strategy.
 */
public class CustomAggregationStrategyTest extends ContextTestSupport {
  @Test public void testCustomAggregationStrategy() throws Exception {
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceivedInAnyOrder("200","150");
    template.sendBodyAndHeader("direct:start","100","id","1");
    template.sendBodyAndHeader("direct:start","150","id","2");
    template.sendBodyAndHeader("direct:start","130","id","2");
    template.sendBodyAndHeader("direct:start","200","id","1");
    template.sendBodyAndHeader("direct:start","190","id","1");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").aggregate(new MyAggregationStrategy()).header("id").completionTimeout(1000L).to("mock:result");
      }
    }
;
  }
private static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      int oldPrice=oldExchange.getIn().getBody(Integer.class);
      int newPrice=newExchange.getIn().getBody(Integer.class);
      return newPrice > oldPrice ? newExchange : oldExchange;
    }
  }
}
