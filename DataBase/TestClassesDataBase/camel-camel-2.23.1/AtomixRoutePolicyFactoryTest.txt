public final class AtomixRoutePolicyFactoryTest {
  private static final Logger LOGGER=LoggerFactory.getLogger(AtomixRoutePolicyFactoryTest.class);
  private final List<Address> addresses=Arrays.asList(new Address("127.0.0.1",AvailablePortFinder.getNextAvailable()),new Address("127.0.0.1",AvailablePortFinder.getNextAvailable()),new Address("127.0.0.1",AvailablePortFinder.getNextAvailable()));
  private final Set<Address> results=new HashSet<>();
  private final ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(addresses.size());
  private final CountDownLatch latch=new CountDownLatch(addresses.size());
  @Test public void test() throws Exception {
    for (    Address address : addresses) {
      scheduler.submit(() -> run(address));
    }
    latch.await(1,TimeUnit.MINUTES);
    scheduler.shutdownNow();
    Assert.assertEquals(addresses.size(),results.size());
    Assert.assertTrue(results.containsAll(addresses));
  }
  private void run(  Address address){
    try {
      int events=ThreadLocalRandom.current().nextInt(2,6);
      CountDownLatch contextLatch=new CountDownLatch(events);
      AtomixClusterService service=new AtomixClusterService();
      service.setId("node-" + address.port());
      service.setStorageLevel(StorageLevel.MEMORY);
      service.setAddress(address);
      service.setNodes(addresses);
      DefaultCamelContext context=new DefaultCamelContext();
      context.disableJMX();
      context.setName("context-" + address.port());
      context.addService(service);
      context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns"));
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("timer:atomix?delay=1s&period=1s").routeId("route-" + address.port()).log("From ${routeId}").process(e -> contextLatch.countDown());
        }
      }
);
      Thread.sleep(ThreadLocalRandom.current().nextInt(500));
      context.start();
      contextLatch.await();
      LOGGER.debug("Shutting down node {}",address);
      results.add(address);
      context.stop();
      latch.countDown();
    }
 catch (    Exception e) {
      LOGGER.warn("",e);
    }
  }
}
