public abstract class AbstractMongoDbTest extends CamelTestSupport {
  protected static MongoClient mongo;
  protected static MongoDatabase db;
  protected static MongoCollection<BasicDBObject> testCollection;
  protected static MongoCollection<BasicDBObject> dynamicCollection;
  protected static String dbName="test";
  protected static String testCollectionName;
  protected static String dynamicCollectionName;
  protected ApplicationContext applicationContext;
  @Override public void doPostSetup(){
    mongo=applicationContext.getBean(MongoClient.class);
    db=mongo.getDatabase(dbName);
    testCollectionName="camelTest";
    testCollection=db.getCollection(testCollectionName,BasicDBObject.class);
    testCollection.drop();
    testCollection=db.getCollection(testCollectionName,BasicDBObject.class);
    dynamicCollectionName=testCollectionName.concat("Dynamic");
    dynamicCollection=db.getCollection(dynamicCollectionName,BasicDBObject.class);
    dynamicCollection.drop();
    dynamicCollection=db.getCollection(dynamicCollectionName,BasicDBObject.class);
  }
  @Override @After public void tearDown() throws Exception {
    testCollection.drop();
    dynamicCollection.drop();
    super.tearDown();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    applicationContext=new AnnotationConfigApplicationContext(EmbedMongoConfiguration.class);
    CamelContext ctx=SpringCamelContext.springCamelContext(applicationContext);
    PropertiesComponent pc=new PropertiesComponent("classpath:mongodb.test.properties");
    ctx.addComponent("properties",pc);
    return ctx;
  }
  protected void pumpDataIntoTestCollection(){
    String[] scientists={"Einstein","Darwin","Copernicus","Pasteur","Curie","Faraday","Newton","Bohr","Galilei","Maxwell"};
    for (int i=1; i <= 1000; i++) {
      int index=i % scientists.length;
      Formatter f=new Formatter();
      String doc=f.format("{\"_id\":\"%d\", \"scientist\":\"%s\", \"fixedField\": \"fixedValue\"}",i,scientists[index]).toString();
      IOHelper.close(f);
      testCollection.insertOne((BasicDBObject)JSON.parse(doc));
    }
    assertEquals("Data pumping of 1000 entries did not complete entirely",1000L,testCollection.count());
  }
  protected CamelMongoDbException extractAndAssertCamelMongoDbException(  Object result,  String message){
    assertTrue("Result is not an Exception",result instanceof Throwable);
    assertTrue("Result is not an CamelExecutionException",result instanceof CamelExecutionException);
    Throwable exc=((CamelExecutionException)result).getCause();
    assertTrue("Result is not an CamelMongoDbException",exc instanceof CamelMongoDbException);
    CamelMongoDbException camelExc=ObjectHelper.cast(CamelMongoDbException.class,exc);
    if (message != null) {
      assertTrue("CamelMongoDbException doesn't contain desired message string",camelExc.getMessage().contains(message));
    }
    return camelExc;
  }
}
