/** 
 * @version 
 */
public class EventNotifierExchangeSentParallelTest extends EventNotifierExchangeSentTest {
  @Test public void testExchangeSentRecipient() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:foo","Hello World","foo","direct:cool,direct:start");
    assertMockEndpointsSatisfied();
    assertTrue(oneExchangeDone.matchesMockWaitTime());
    context.stop();
    assertTrue("Should be 11 or more, was: " + events.size(),events.size() >= 11);
    int sent=0;
    int sending=0;
    for (    EventObject event : events) {
      if (event instanceof ExchangeSendingEvent) {
        sending++;
      }
 else {
        sent++;
      }
    }
    assertTrue("There should be 5 or more, was " + sending,sending >= 5);
    assertTrue("There should be 5 or more, was " + sent,sent >= 5);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:foo").to("direct:bar").to("mock:result");
        from("direct:bar").delay(500);
        from("direct:foo").recipientList(header("foo")).parallelProcessing();
        from("direct:cool").delay(1000);
        from("direct:tap").wireTap("log:foo").to("mock:result");
      }
    }
;
  }
}
