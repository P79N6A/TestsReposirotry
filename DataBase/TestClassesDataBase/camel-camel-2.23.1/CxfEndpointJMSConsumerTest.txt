public class CxfEndpointJMSConsumerTest extends CamelTestSupport {
  protected AbstractXmlApplicationContext applicationContext;
  @Before public void setUp() throws Exception {
    applicationContext=createApplicationContext();
    super.setUp();
    assertNotNull("Should have created a valid spring context",applicationContext);
  }
  @After public void tearDown() throws Exception {
    IOHelper.close(applicationContext);
    super.tearDown();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    return SpringCamelContext.springCamelContext(applicationContext);
  }
  protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jms/camel-context.xml");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("cxf:bean:jmsEndpoint").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String me=exchange.getIn().getBody(String.class);
            exchange.getOut().setBody("Hello " + me);
          }
        }
);
      }
    }
;
  }
  @Test public void testInvocation(){
    String address="jms:jndi:dynamicQueues/test.cxf.jmstransport.queue" + "?jndiInitialContextFactory" + "=org.apache.activemq.jndi.ActiveMQInitialContextFactory"+ "&jndiConnectionFactoryName=ConnectionFactory&jndiURL="+ "vm://localhost";
    JaxWsProxyFactoryBean factory=new JaxWsProxyFactoryBean();
    factory.setServiceClass(Greeter.class);
    factory.setAddress(address);
    Greeter greeter=factory.create(Greeter.class);
    String response=greeter.greetMe("Willem");
    assertEquals("Get a wrong response","Hello Willem",response);
  }
}
