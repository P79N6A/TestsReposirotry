@DirtiesContext @RunWith(SpringRunner.class) @EnableAutoConfiguration @SpringBootTest(classes=SpringTypeConverterTest.SpringTypeConversionConfiguration.class) public class SpringTypeConverterTest {
  @Autowired @Qualifier("camelSpringConversionService") ConversionService conversionService;
  @Autowired @Qualifier("camelSpringTypeConverter") SpringTypeConverter converter;
  @Test public void testConversionService(){
    Collection<?> source=Arrays.asList(new Person("Name",30));
    Assert.assertFalse(conversionService.canConvert(Person.class,String.class));
    Assert.assertTrue(conversionService.canConvert(source.getClass(),String.class));
    try {
      conversionService.convert(source,String.class);
    }
 catch (    ConversionFailedException e) {
      Assert.assertTrue(e.getCause() instanceof ConverterNotFoundException);
    }
    Assert.assertNull(converter.convertTo(String.class,source));
  }
public static class Person {
    private String name;
    private int age;
    public Person(    String name,    int age){
      this.name=name;
      this.age=age;
    }
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
    public int getAge(){
      return age;
    }
    public void setAge(    int age){
      this.age=age;
    }
    @Override public String toString(){
      return "Person{" + "name='" + name + '\''+ ", age="+ age+ '}';
    }
  }
@Configuration public static class SpringTypeConversionConfiguration {
    @Bean ConversionService camelSpringConversionService(    ApplicationContext applicationContext){
      DefaultConversionService service=new DefaultConversionService();
      for (      Converter converter : applicationContext.getBeansOfType(Converter.class).values()) {
        service.addConverter(converter);
      }
      return service;
    }
    @Bean SpringTypeConverter camelSpringTypeConverter(    List<ConversionService> conversionServices){
      return new SpringTypeConverter(conversionServices);
    }
  }
}
