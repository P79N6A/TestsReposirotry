/** 
 * @version 
 */
public class StartupListenerTest extends ContextTestSupport {
  private MyStartupListener my=new MyStartupListener();
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addStartupListener(my);
    return context;
  }
private static class MyStartupListener implements StartupListener {
    private int invoked;
    private boolean alreadyStarted;
    public void onCamelContextStarted(    CamelContext context,    boolean alreadyStarted) throws Exception {
      invoked++;
      this.alreadyStarted=alreadyStarted;
      if (alreadyStarted) {
        assertTrue(context.getRouteStatus("foo").isStarted());
      }
 else {
        assertTrue(context.getRouteStatus("foo").isStopped());
      }
    }
    public int getInvoked(){
      return invoked;
    }
    public boolean isAlreadyStarted(){
      return alreadyStarted;
    }
  }
  @Test public void testStartupListenerComponent() throws Exception {
    assertTrue(context.getRouteStatus("foo").isStarted());
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1,my.getInvoked());
    assertFalse(my.isAlreadyStarted());
  }
  @Test public void testStartupListenerComponentAlreadyStarted() throws Exception {
    assertTrue(context.getRouteStatus("foo").isStarted());
    MyStartupListener other=new MyStartupListener();
    context.addStartupListener(other);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:foo","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(1,other.getInvoked());
    assertTrue(other.isAlreadyStarted());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").routeId("foo").to("mock:result");
      }
    }
;
  }
}
