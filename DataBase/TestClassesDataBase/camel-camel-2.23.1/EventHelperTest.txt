public class EventHelperTest {
  @Test public void testStartStopEventsReceived() throws Exception {
    MyEventNotifier en1=new MyEventNotifier();
    MyEventNotifier en2=new MyEventNotifier();
    CamelContext camelContext=new DefaultCamelContext();
    camelContext.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").routeId("route-1").to("mock:end");
      }
    }
);
    camelContext.getManagementStrategy().addEventNotifier(en1);
    camelContext.getManagementStrategy().addEventNotifier(en2);
    camelContext.start();
    camelContext.stop();
    assertEquals(1,en1.routeStartedEvent.get());
    assertEquals(1,en1.routeStoppedEvent.get());
    assertEquals(1,en1.camelContextStoppingEvent.get());
    assertEquals(1,en2.routeStartedEvent.get());
    assertEquals(1,en2.routeStoppedEvent.get());
    assertEquals(1,en2.camelContextStoppingEvent.get());
  }
  @Test public void testStartStopEventsReceivedWhenTheFirstOneIgnoreTheseEvents() throws Exception {
    MyEventNotifier en1=new MyEventNotifier();
    en1.setIgnoreRouteEvents(true);
    en1.setIgnoreCamelContextEvents(true);
    MyEventNotifier en2=new MyEventNotifier();
    CamelContext camelContext=new DefaultCamelContext();
    camelContext.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").routeId("route-1").to("mock:end");
      }
    }
);
    camelContext.getManagementStrategy().addEventNotifier(en1);
    camelContext.getManagementStrategy().addEventNotifier(en2);
    camelContext.start();
    camelContext.stop();
    assertEquals(0,en1.routeStartedEvent.get());
    assertEquals(0,en1.routeStoppedEvent.get());
    assertEquals(0,en1.camelContextStoppingEvent.get());
    assertEquals(1,en2.routeStartedEvent.get());
    assertEquals(1,en2.routeStoppedEvent.get());
    assertEquals(1,en2.camelContextStoppingEvent.get());
  }
  @Test public void testStartStopEventsReceivedWhenTheSecondOneIgnoreTheseEvents() throws Exception {
    MyEventNotifier en1=new MyEventNotifier();
    MyEventNotifier en2=new MyEventNotifier();
    en2.setIgnoreRouteEvents(true);
    en2.setIgnoreCamelContextEvents(true);
    CamelContext camelContext=new DefaultCamelContext();
    camelContext.addRoutes(new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:start").routeId("route-1").to("mock:end");
      }
    }
);
    camelContext.getManagementStrategy().addEventNotifier(en1);
    camelContext.getManagementStrategy().addEventNotifier(en2);
    camelContext.start();
    camelContext.stop();
    assertEquals(1,en1.routeStartedEvent.get());
    assertEquals(1,en1.routeStoppedEvent.get());
    assertEquals(1,en1.camelContextStoppingEvent.get());
    assertEquals(0,en2.routeStartedEvent.get());
    assertEquals(0,en2.routeStoppedEvent.get());
    assertEquals(0,en2.camelContextStoppingEvent.get());
  }
static class MyEventNotifier extends EventNotifierSupport {
    AtomicInteger routeStartedEvent=new AtomicInteger();
    AtomicInteger routeStoppedEvent=new AtomicInteger();
    AtomicInteger camelContextStoppingEvent=new AtomicInteger();
    @Override public void notify(    EventObject event) throws Exception {
      if (event instanceof RouteStartedEvent) {
        routeStartedEvent.incrementAndGet();
      }
 else       if (event instanceof RouteStoppedEvent) {
        routeStoppedEvent.incrementAndGet();
      }
 else       if (event instanceof CamelContextStoppingEvent) {
        camelContextStoppingEvent.incrementAndGet();
      }
    }
    @Override public boolean isEnabled(    EventObject event){
      return true;
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
