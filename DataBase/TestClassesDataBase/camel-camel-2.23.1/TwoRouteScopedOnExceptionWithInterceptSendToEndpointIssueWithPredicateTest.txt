/** 
 * Based on user forum issue
 * @version 
 */
public class TwoRouteScopedOnExceptionWithInterceptSendToEndpointIssueWithPredicateTest extends ContextTestSupport {
  private final AtomicInteger invoked=new AtomicInteger();
  @Test public void testIssue() throws Exception {
    final Predicate fail=PredicateBuilder.or(header(Exchange.REDELIVERY_COUNTER).isNull(),header(Exchange.REDELIVERY_COUNTER).isLessThan(5));
    RouteDefinition route=context.getRouteDefinitions().get(0);
    route.adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            invoked.incrementAndGet();
            if (fail.matches(exchange)) {
              throw new ConnectException("Forced");
            }
          }
        }
).to("mock:ok");
      }
    }
);
    getMockEndpoint("mock:global").expectedMessageCount(0);
    getMockEndpoint("mock:ok").expectedMessageCount(1);
    getMockEndpoint("mock:exhausted").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(6,invoked.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:global").maximumRedeliveries(2).redeliveryDelay(500));
        from("direct:start").onException(ConnectException.class).maximumRedeliveries(5).redeliveryDelay(0).logRetryAttempted(true).retryAttemptedLogLevel(LoggingLevel.WARN).to("mock:exhausted").end().to("seda:foo");
        from("direct:start2").onException(ConnectException.class).maximumRedeliveries(3).redeliveryDelay(0).logRetryAttempted(true).retryAttemptedLogLevel(LoggingLevel.ERROR).to("mock:exhausted2").end().to("seda:foo2");
      }
    }
;
  }
}
