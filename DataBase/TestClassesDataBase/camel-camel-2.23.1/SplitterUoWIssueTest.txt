/** 
 * @version 
 */
public class SplitterUoWIssueTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/splitter");
    super.setUp();
  }
  @Test public void testSplitterUoWIssue() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("A","B","C","D","E");
    getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E");
    template.sendBodyAndHeader("file:target/splitter","A,B,C,D,E",Exchange.FILE_NAME,"splitme.txt");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitterTwoFilesUoWIssue() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("A","B","C","D","E","F","G","H","I");
    getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E","F,G,H,I");
    template.sendBodyAndHeader("file:target/splitter","A,B,C,D,E",Exchange.FILE_NAME,"a.txt");
    template.sendBodyAndHeader("file:target/splitter","F,G,H,I",Exchange.FILE_NAME,"b.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/splitter?initialDelay=0&delay=10&delete=true&sortBy=file:name").split(body().tokenize(",")).to("seda:queue").end().log("End of file ${file:name}").to("mock:result");
        from("seda:queue").log("Token: ${body}").to("mock:foo");
      }
    }
;
  }
}
