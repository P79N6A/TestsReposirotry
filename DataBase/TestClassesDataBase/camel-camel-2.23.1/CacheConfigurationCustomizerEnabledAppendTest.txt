@RunWith(SpringRunner.class) @DirtiesContext @SpringBootApplication @SpringBootTest(classes={CacheConfigurationCustomizerEnabledAppendTest.TestConfiguration.class},properties={"debug=false","camel.component.customizer.enabled=false","camel.component.ehcache.customizer.enabled=true","camel.component.ehcache.customizer.cache-configuration.enabled=true","camel.component.ehcache.customizer.cache-configuration.mode=APPEND"}) public class CacheConfigurationCustomizerEnabledAppendTest {
  private static final String CACHE_CONFIG_ID=UUID.randomUUID().toString();
  @Autowired Map<String,CacheConfiguration<?,?>> configurations;
  @Autowired EhcacheComponent component;
  @Test public void testComponentConfiguration() throws Exception {
    Assert.assertNotNull(configurations);
    Assert.assertEquals(2,configurations.size());
    Assert.assertNotNull(component);
    Assert.assertNotNull(component.getCachesConfigurations());
    Assert.assertEquals(3,component.getCachesConfigurations().size());
    Assert.assertTrue(component.getCachesConfigurations().containsKey("myConfig1"));
    Assert.assertTrue(component.getCachesConfigurations().containsKey("myConfig2"));
    Assert.assertTrue(component.getCachesConfigurations().containsKey(CACHE_CONFIG_ID));
  }
@Configuration static class TestConfiguration {
    @Order(Ordered.HIGHEST_PRECEDENCE) @Bean public ComponentCustomizer<EhcacheComponent> customizer(){
      return new ComponentCustomizer<EhcacheComponent>(){
        @Override public void customize(        EhcacheComponent component){
          component.addCachesConfigurations(Collections.singletonMap(CACHE_CONFIG_ID,CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class,String.class,ResourcePoolsBuilder.newResourcePoolsBuilder().heap(2100,EntryUnit.ENTRIES).offheap(2,MemoryUnit.MB)).build()));
        }
      }
;
    }
    @Bean public CacheConfiguration<?,?> myConfig1(){
      return CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class,String.class,ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100,EntryUnit.ENTRIES).offheap(1,MemoryUnit.MB)).build();
    }
    @Bean public CacheConfiguration<?,?> myConfig2(){
      return CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class,String.class,ResourcePoolsBuilder.newResourcePoolsBuilder().heap(2100,EntryUnit.ENTRIES).offheap(2,MemoryUnit.MB)).build();
    }
  }
}
