public class MinaClientModeTcpTextlineDelimiterTest extends BaseMinaTest {
  @Test public void testMinaRoute() throws Exception {
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    Object body="Hello there!";
    endpoint.expectedBodiesReceived(body);
    Server server=new Server(getPort());
    server.startup();
    context.startRoute("minaRoute");
    endpoint.assertIsSatisfied();
    server.shutdown();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(String.format("mina:tcp://127.0.0.1:%1$s?sync=false&textline=true&textlineDelimiter=UNIX&clientMode=true",getPort())).id("minaRoute").noAutoStartup().to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true");
      }
    }
;
  }
private class Server {
    private final int port;
    private IoAcceptor acceptor;
    Server(    int port){
      this.port=port;
    }
    public void startup() throws Exception {
      acceptor=new SocketAcceptor();
      TextLineCodecFactory codecFactory=new TextLineCodecFactory(Charset.forName("UTF-8"),LineDelimiter.UNIX);
      acceptor.getFilterChain().addLast("codec",new ProtocolCodecFilter(codecFactory));
      acceptor.bind(new InetSocketAddress("127.0.0.1",port),new ServerHandler());
    }
    public void shutdown() throws Exception {
      acceptor.unbindAll();
    }
  }
private class ServerHandler extends IoHandlerAdapter {
    public void sessionOpened(    IoSession session) throws Exception {
      session.write("Hello there!\n");
      session.close();
    }
  }
}
