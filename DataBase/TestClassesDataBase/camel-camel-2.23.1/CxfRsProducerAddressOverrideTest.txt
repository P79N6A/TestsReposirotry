public class CxfRsProducerAddressOverrideTest extends CamelSpringTestSupport {
  private static int port1=CXFTestSupport.getPort1();
  private static int port2=CXFTestSupport.getPort("CxfRsProducerAddressOverrideTest.jetty");
  public int getPort1(){
    return port1;
  }
  public int getPort2(){
    return port2;
  }
  @Override protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerAddressOverride.xml");
  }
  protected void setupDestinationURL(  Message inMessage){
    inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL,"http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest");
  }
  @Test public void testGetCustomerWithSyncProxyAPIByOverrideDest(){
    Exchange exchange=template.send("direct://proxy",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"getCustomer");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.FALSE);
        inMessage.setBody("123");
        setupDestinationURL(inMessage);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
  }
  @Test public void testGetCustomerWithSyncHttpAPIByOverrideDest(){
    Exchange exchange=template.send("direct://http",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        setupDestinationURL(inMessage);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
  }
  @Test public void testGetCustomerWithAsyncProxyAPIByOverrideDest(){
    Exchange exchange=template.send("cxfrs:bean:rsClientProxy",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.OPERATION_NAME,"getCustomer");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.FALSE);
        inMessage.setBody("123");
        setupDestinationURL(inMessage);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null ",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
  }
  @Test public void testGetCustomerWithAsyncHttpAPIByOverrideDest(){
    Exchange exchange=template.send("cxfrs:bean:rsClientHttp",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.setPattern(ExchangePattern.InOut);
        Message inMessage=exchange.getIn();
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
        inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
        inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
        setupDestinationURL(inMessage);
      }
    }
);
    Customer response=(Customer)exchange.getOut().getBody();
    assertNotNull("The response should not be null",response);
    assertEquals("Get a wrong customer id ",123,response.getId());
    assertEquals("Get a wrong customer name","John",response.getName());
  }
  @Test public void testAddressMultiOverride(){
    Exchange exchange=template.send("direct://http",new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest"));
    Customer response=exchange.getOut().getBody(Customer.class);
    assertNotNull("The response should not be null ",response);
    exchange=template.send("direct://http",new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerNonExistingAddressOverrideTest"));
    exchange=template.send("direct://http",new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest"));
    response=exchange.getOut().getBody(Customer.class);
    assertNotNull("The response should not be null ",response);
  }
class SendProcessor implements Processor {
    private String address;
    public SendProcessor(    String address){
      this.address=address;
    }
    public void process(    Exchange exchange) throws Exception {
      exchange.setPattern(ExchangePattern.InOut);
      Message inMessage=exchange.getIn();
      inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API,Boolean.TRUE);
      inMessage.setHeader(Exchange.HTTP_METHOD,"GET");
      inMessage.setHeader(Exchange.HTTP_PATH,"/customerservice/customers/123");
      inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Customer.class);
      inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL,address);
    }
  }
}
