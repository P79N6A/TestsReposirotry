public class CacheRoutesManagementTest extends BaseCacheTest {
  private static final String CACHE_URI="cache:foo?cacheManagerFactory=#cacheManagerFactory";
  private static final String ROUTE1_ID="TEST_ROUTE_1";
  private static final String ROUTE2_ID="TEST_ROUTE_2";
  @EndpointInject(uri=CACHE_URI) protected CacheEndpoint cacheEndpoint;
  @Produce(uri="direct:route1") protected ProducerTemplate producerTemplate1;
  @Produce(uri="direct:route2") protected ProducerTemplate producerTemplate2;
  private TestingCacheManagerFactory cmfRef=new TestingCacheManagerFactory();
  private Processor templateProcessor=new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.setProperty(Exchange.CHARSET_NAME,"UTF-8");
      Message in=exchange.getIn();
      in.setBody("Hello World");
    }
  }
;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("cacheManagerFactory",cmfRef);
    return jndi;
  }
  @Override public RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:add1").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_ADD)).setHeader(CacheConstants.CACHE_KEY,constant("foo")).to(CACHE_URI).setId(ROUTE1_ID);
        from("direct:add2").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_ADD)).setHeader(CacheConstants.CACHE_KEY,constant("foo")).to(CACHE_URI).setId(ROUTE2_ID);
      }
    }
;
  }
  @Test public void testConfig() throws Exception {
    producerTemplate1.send(templateProcessor);
    producerTemplate2.send(templateProcessor);
    template.sendBody("direct:add1","Hello World");
    template.sendBody("direct:add2","Hello World");
    CacheManager cacheManager=cmfRef.getCacheManager();
    assertNotNull("CacheManager initialized",cacheManager);
    Cache cache=cmfRef.getCacheManager().getCache("foo");
    assertEquals("Is cache still alive",Status.STATUS_ALIVE,cache.getStatus());
    context.stopRoute(ROUTE1_ID);
    assertEquals("Is cache still alive",Status.STATUS_ALIVE,cache.getStatus());
    context.stop();
    assertEquals("Is cache still alive",Status.STATUS_SHUTDOWN,cache.getStatus());
  }
public class TestingCacheManagerFactory extends CacheManagerFactory {
    private CacheManager cacheManager;
    @Override protected synchronized CacheManager createCacheManagerInstance(){
      if (cacheManager == null) {
        cacheManager=CacheManager.create();
      }
      return cacheManager;
    }
    public CacheManager getCacheManager(){
      return cacheManager;
    }
  }
}
