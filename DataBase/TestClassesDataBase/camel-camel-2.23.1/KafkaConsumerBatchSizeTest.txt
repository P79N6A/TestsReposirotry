public class KafkaConsumerBatchSizeTest extends BaseEmbeddedKafkaTest {
  public static final String TOPIC="test";
  @EndpointInject(uri="kafka:" + TOPIC + "?autoOffsetReset=earliest"+ "&autoCommitEnable=false"+ "&consumerStreams=10") private Endpoint from;
  @EndpointInject(uri="mock:result") private MockEndpoint to;
  private org.apache.kafka.clients.producer.KafkaProducer<String,String> producer;
  @Before public void before(){
    Properties props=getDefaultProperties();
    producer=new org.apache.kafka.clients.producer.KafkaProducer<>(props);
  }
  @After public void after(){
    if (producer != null) {
      producer.close();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(from).routeId("foo").to(to).setId("First");
      }
    }
;
  }
  @Test public void kafkaMessagesIsConsumedByCamel() throws Exception {
    to.expectedBodiesReceivedInAnyOrder("m1","m2");
    for (int k=1; k <= 2; k++) {
      String msg="m" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      producer.send(data);
    }
    to.assertIsSatisfied();
    to.reset();
    to.expectedBodiesReceivedInAnyOrder("m3","m4","m5","m6","m7","m8","m9","m10");
    context.stopRoute("foo");
    context.startRoute("foo");
    for (int k=3; k <= 10; k++) {
      String msg="m" + k;
      ProducerRecord<String,String> data=new ProducerRecord<>(TOPIC,"1",msg);
      producer.send(data);
    }
    to.assertIsSatisfied();
  }
}
