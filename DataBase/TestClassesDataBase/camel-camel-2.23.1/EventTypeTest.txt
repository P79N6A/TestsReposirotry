public class EventTypeTest extends CamelTestSupport {
  @Test public void testOnCompleteHeaderForwarded() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:numbers?forwardOnComplete=true").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    Subscriber<Integer> numbers=CamelReactiveStreams.get(context).streamSubscriber("numbers",Integer.class);
    context.start();
    Flowable.<Integer>empty().subscribe(numbers);
    MockEndpoint endpoint=getMockEndpoint("mock:endpoint");
    endpoint.expectedMessageCount(1);
    endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE,"onComplete");
    endpoint.expectedBodiesReceived(new Object[]{null});
    endpoint.assertIsSatisfied();
  }
  @Test public void testOnCompleteHeaderNotForwarded() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:numbers").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    Subscriber<Integer> numbers=CamelReactiveStreams.get(context).streamSubscriber("numbers",Integer.class);
    context.start();
    Flowable.<Integer>empty().subscribe(numbers);
    MockEndpoint endpoint=getMockEndpoint("mock:endpoint");
    endpoint.expectedMessageCount(0);
    endpoint.assertIsSatisfied(200);
  }
  @Test public void testOnNextHeaderForwarded() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:numbers").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    Subscriber<Integer> numbers=CamelReactiveStreams.get(context).streamSubscriber("numbers",Integer.class);
    context.start();
    Flowable.just(1).subscribe(numbers);
    MockEndpoint endpoint=getMockEndpoint("mock:endpoint");
    endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE,"onNext");
    endpoint.expectedMessageCount(1);
    endpoint.assertIsSatisfied();
    Exchange ex=endpoint.getExchanges().get(0);
    assertEquals(1,ex.getIn().getBody());
  }
  @Test public void testOnErrorHeaderForwarded() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:numbers?forwardOnError=true").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    Subscriber<Integer> numbers=CamelReactiveStreams.get(context).streamSubscriber("numbers",Integer.class);
    context.start();
    RuntimeException ex=new RuntimeException("1");
    Flowable.just(1).map(n -> {
      if (n == 1) {
        throw ex;
      }
      return n;
    }
).subscribe(numbers);
    MockEndpoint endpoint=getMockEndpoint("mock:endpoint");
    endpoint.expectedMessageCount(1);
    endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE,"onError");
    endpoint.assertIsSatisfied();
    Exchange exch=endpoint.getExchanges().get(0);
    assertEquals(ex,exch.getIn().getBody());
  }
  @Test public void testOnErrorHeaderNotForwarded() throws Exception {
    new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("reactive-streams:numbers").to("mock:endpoint");
      }
    }
.addRoutesToCamelContext(context);
    Subscriber<Integer> numbers=CamelReactiveStreams.get(context).streamSubscriber("numbers",Integer.class);
    context.start();
    RuntimeException ex=new RuntimeException("1");
    Flowable.just(1).map(n -> {
      if (n == 1) {
        throw ex;
      }
      return n;
    }
).subscribe(numbers);
    MockEndpoint endpoint=getMockEndpoint("mock:endpoint");
    endpoint.expectedMessageCount(0);
    endpoint.assertIsSatisfied(200);
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
