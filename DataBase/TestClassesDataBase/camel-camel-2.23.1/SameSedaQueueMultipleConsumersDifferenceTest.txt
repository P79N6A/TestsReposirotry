/** 
 */
public class SameSedaQueueMultipleConsumersDifferenceTest extends ContextTestSupport {
  @Test public void testSameOptions() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo?multipleConsumers=true","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSameOptionsProducerStillOkay() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    template.sendBody("seda:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAddConsumer() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("seda:foo").routeId("fail").to("mock:fail");
        }
      }
);
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertEquals("fail",e.getRouteId());
      assertEquals("Cannot use existing queue seda://foo as the existing queue multiple consumers true does not match given multiple consumers false",e.getCause().getMessage());
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?multipleConsumers=true").routeId("foo").to("mock:foo");
        from("seda:foo?multipleConsumers=true").routeId("bar").to("mock:bar");
      }
    }
;
  }
}
