/** 
 * @version 
 */
public class JmsHeaderFilteringTest extends CamelTestSupport {
  private static final String IN_FILTER_PATTERN="(org_apache_camel)[_|a-z|A-Z|0-9]*(test)[_|a-z|A-Z|0-9]*";
  private final String componentName="jms";
  private final String testQueueEndpointA=componentName + ":queue:test.a";
  private final String testQueueEndpointB=componentName + ":queue:test.b";
  private final String assertionReceiver="mock:errors";
  private CountDownLatch latch=new CountDownLatch(2);
  @Test public void testHeaderFilters() throws Exception {
    MockEndpoint errors=this.resolveMandatoryEndpoint(assertionReceiver,MockEndpoint.class);
    errors.expectedMessageCount(0);
    template.send(testQueueEndpointA,ExchangePattern.InOnly,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader("org.apache.camel.jms",10000);
        exchange.getIn().setHeader("org.apache.camel.test.jms",20000);
        exchange.getIn().setHeader("testheader",1020);
        exchange.getIn().setHeader("anotherheader",1030);
        exchange.getIn().setHeader("JMSXAppID","myApp");
      }
    }
);
    assertTrue(latch.await(2,TimeUnit.SECONDS));
    errors.assertIsSatisfied();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent(componentName,jmsComponentAutoAcknowledge(connectionFactory));
    JmsComponent component=camelContext.getComponent(componentName,JmsComponent.class);
    JmsHeaderFilterStrategy filter=new JmsHeaderFilterStrategy();
    filter.getInFilter().add("testheader");
    filter.getOutFilter().add("anotherheader");
    filter.setInFilterPattern(IN_FILTER_PATTERN);
    component.setHeaderFilterStrategy(filter);
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        onException(AssertionError.class).to(assertionReceiver);
        from(testQueueEndpointA).process(new OutHeaderChecker()).to(testQueueEndpointB);
        from(testQueueEndpointB).process(new InHeaderChecker());
      }
    }
;
  }
class OutHeaderChecker implements Processor {
    public void process(    Exchange exchange) throws Exception {
      JmsMessage message=exchange.getIn(JmsMessage.class);
      assertEquals(1020,message.getJmsMessage().getObjectProperty("testheader"));
      assertNull(message.getJmsMessage().getObjectProperty("anotherheader"));
      assertEquals(10000,message.getJmsMessage().getObjectProperty("org_DOT_apache_DOT_camel_DOT_jms"));
      assertEquals(20000,message.getJmsMessage().getObjectProperty("org_DOT_apache_DOT_camel_DOT_test_DOT_jms"));
      assertNull(message.getJmsMessage().getStringProperty("JMSXAppID"));
      latch.countDown();
    }
  }
class InHeaderChecker implements Processor {
    public void process(    Exchange exchange) throws Exception {
      assertNull(exchange.getIn().getHeader("testheader"));
      assertNull(exchange.getIn().getHeader("anotherheader"));
      assertEquals(10000,exchange.getIn().getHeader("org.apache.camel.jms"));
      assertNull(exchange.getIn().getHeader("org_DOT_apache_DOT_camel_DOT_test_DOT_jms"));
      assertNull(exchange.getIn().getHeader("JMSXAppID"));
      latch.countDown();
    }
  }
}
