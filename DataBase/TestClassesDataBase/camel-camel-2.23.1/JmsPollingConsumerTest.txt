/** 
 * @version 
 */
public class JmsPollingConsumerTest extends CamelTestSupport {
  @Test public void testJmsPollingConsumerWait() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Claus");
    Executors.newSingleThreadExecutor().execute(new Runnable(){
      public void run(){
        String body=consumer.receiveBody("activemq:queue.start",String.class);
        template.sendBody("activemq:queue.foo",body + " Claus");
      }
    }
);
    Thread.sleep(500);
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testJmsPollingConsumerNoWait() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Claus");
    Executors.newSingleThreadExecutor().execute(new Runnable(){
      public void run(){
        String body=consumer.receiveBodyNoWait("activemq:queue.start",String.class);
        assertNull("Should be null",body);
        template.sendBody("activemq:queue.foo","Hello Claus");
      }
    }
);
    Thread.sleep(500);
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testJmsPollingConsumerLowTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Claus");
    Executors.newSingleThreadExecutor().execute(new Runnable(){
      public void run(){
        String body=consumer.receiveBody("activemq:queue.start",100,String.class);
        assertNull("Should be null",body);
        template.sendBody("activemq:queue.foo","Hello Claus");
      }
    }
);
    Thread.sleep(500);
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  @Test public void testJmsPollingConsumerHighTimeout() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Hello Claus");
    Executors.newSingleThreadExecutor().execute(new Runnable(){
      public void run(){
        String body=consumer.receiveBody("activemq:queue.start",3000,String.class);
        template.sendBody("activemq:queue.foo",body + " Claus");
      }
    }
);
    Thread.sleep(500);
    template.sendBody("direct:start","Hello");
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("activemq:queue.start");
        from("activemq:queue.foo").to("mock:result");
      }
    }
;
  }
}
