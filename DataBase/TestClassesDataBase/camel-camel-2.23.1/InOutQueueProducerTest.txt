public class InOutQueueProducerTest extends JmsTestSupport {
  private static final String TEST_DESTINATION_NAME="in.out.queue.producer.test";
  public InOutQueueProducerTest(){
  }
  @Override protected boolean useJmx(){
    return false;
  }
  @Test public void testInOutQueueProducer() throws Exception {
    MessageConsumer mc=createQueueConsumer(TEST_DESTINATION_NAME + ".request");
    assertNotNull(mc);
    final String requestText="Hello World!";
    final String responseText="How are you";
    mc.setMessageListener(new MyMessageListener(requestText,responseText));
    Object responseObject=template.requestBody("direct:start",requestText);
    assertNotNull(responseObject);
    assertTrue(responseObject instanceof String);
    assertEquals(responseText,responseObject);
    mc.close();
  }
  @Test public void testInOutQueueProducerWithCorrelationId() throws Exception {
    MessageConsumer mc=createQueueConsumer(TEST_DESTINATION_NAME + ".request");
    assertNotNull(mc);
    final String requestText="Hello World!";
    final String responseText="How are you";
    mc.setMessageListener(new MyMessageListener(requestText,responseText));
    final String correlationId=UUID.randomUUID().toString().replace("-","");
    Exchange exchange=template.request("direct:start",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getOut().setBody(requestText);
        exchange.getOut().setHeader("JMSCorrelationID",correlationId);
      }
    }
);
    assertNotNull(exchange);
    assertTrue(exchange.getIn().getBody() instanceof String);
    assertEquals(responseText,exchange.getIn().getBody());
    assertEquals(correlationId,exchange.getIn().getHeader("JMSCorrelationID",String.class));
    mc.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("log:" + TEST_DESTINATION_NAME + ".in.log.1?showBody=true").inOut("sjms:queue:" + TEST_DESTINATION_NAME + ".request"+ "?namedReplyTo="+ TEST_DESTINATION_NAME+ ".response").to("log:" + TEST_DESTINATION_NAME + ".out.log.1?showBody=true");
      }
    }
;
  }
protected class MyMessageListener implements MessageListener {
    private String requestText;
    private String responseText;
    public MyMessageListener(    String request,    String response){
      this.requestText=request;
      this.responseText=response;
    }
    @Override public void onMessage(    Message message){
      try {
        TextMessage request=(TextMessage)message;
        assertNotNull(request);
        String text=request.getText();
        assertEquals(requestText,text);
        TextMessage response=getSession().createTextMessage();
        response.setText(responseText);
        response.setJMSCorrelationID(request.getJMSCorrelationID());
        MessageProducer mp=getSession().createProducer(message.getJMSReplyTo());
        mp.send(response);
        mp.close();
      }
 catch (      JMSException e) {
        fail(e.getLocalizedMessage());
      }
    }
  }
}
