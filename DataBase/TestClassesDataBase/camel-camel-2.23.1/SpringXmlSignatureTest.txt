public class SpringXmlSignatureTest extends XmlSignatureTest {
  private static KeyPair rsaPair;
  protected CamelContext createCamelContext() throws Exception {
    rsaPair=getKeyPair("RSA",1024);
    return SpringCamelContext.springCamelContext("/org/apache/camel/component/xmlsecurity/SpringXmlSignatureTests.xml");
  }
  public static KeyAccessor getDsaKeyAccessor(){
    return getKeyAccessor(getKeyPair("DSA",1024).getPrivate());
  }
  public static KeyAccessor getRsaKeyAccessor(){
    return getKeyAccessor(rsaPair.getPrivate());
  }
  public static KeySelector getDsaKeySelector(){
    return KeySelector.singletonKeySelector(getKeyPair("DSA",1024).getPublic());
  }
  public static KeySelector getRsaKeySelector(){
    return KeySelector.singletonKeySelector(rsaPair.getPublic());
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    return super.createRegistry();
  }
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{};
  }
  @Override XmlSignerEndpoint getDetachedSignerEndpoint(){
    XmlSignerEndpoint endpoint=(XmlSignerEndpoint)context().getEndpoint("xmlsecurity:sign:detached?keyAccessor=#accessorRsa&xpathsToIdAttributes=#xpathsToIdAttributes&" + "schemaResourceUri=org/apache/camel/component/xmlsecurity/Test.xsd&signatureId=&clearHeaders=false");
    return endpoint;
  }
  @Override XmlSignerEndpoint getSignatureEncpointForSignException(){
    XmlSignerEndpoint endpoint=(XmlSignerEndpoint)context().getEndpoint("xmlsecurity:sign:signexceptioninvalidkey?keyAccessor=#accessorRsa");
    return endpoint;
  }
  @Override String getVerifierEndpointURIEnveloped(){
    return "xmlsecurity:verify:enveloped?keySelector=#selectorRsa";
  }
  @Override String getSignerEndpointURIEnveloped(){
    return "xmlsecurity:sign:enveloped?keyAccessor=#accessorRsa&parentLocalName=root&parentNamespace=http://test/test";
  }
  @Override String getVerifierEndpointURIEnveloping(){
    return "xmlsecurity:verify:enveloping?keySelector=#selectorRsa";
  }
  @Override String getSignerEndpointURIEnveloping(){
    return "xmlsecurity:sign:enveloping?keyAccessor=#accessorRsa";
  }
  @Test public void xades() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    sendBody("direct:xades",payload);
    assertMockEndpointsSatisfied();
    Message message=getMessage(mock);
    byte[] body=message.getBody(byte[].class);
    Document doc=XmlSignatureHelper.newDocumentBuilder(true).parse(new ByteArrayInputStream(body));
    Map<String,String> prefix2Ns=XAdESSignaturePropertiesTest.getPrefix2NamespaceMap();
    prefix2Ns.put("t","http://test.com/");
    XAdESSignaturePropertiesTest.checkXpath(doc,"/ds:Signature/ds:Object/etsi:QualifyingProperties/etsi:SignedProperties/etsi:SignedSignatureProperties/etsi:SignerRole/etsi:ClaimedRoles/etsi:ClaimedRole/t:test",prefix2Ns,"test");
  }
}
