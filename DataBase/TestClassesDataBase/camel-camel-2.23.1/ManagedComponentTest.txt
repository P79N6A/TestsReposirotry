public class ManagedComponentTest extends ManagementTestSupport {
  private static final String[] VERIFY_SIGNATURE=new String[]{"java.lang.String","java.util.Map"};
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addComponent("my-verifiable-component",new MyVerifiableComponent());
    context.addComponent("direct",new DirectComponent());
    return context;
  }
  @Test public void testVerifySupported() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on;
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"my-verifiable-component\"");
    assertTrue(mbeanServer.isRegistered(on));
    assertTrue(invoke(mbeanServer,on,"isVerifySupported"));
    on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"direct\"");
    assertTrue(mbeanServer.isRegistered(on));
    assertFalse(invoke(mbeanServer,on,"isVerifySupported"));
  }
  @Test public void testVerify() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"my-verifiable-component\"");
    assertTrue(mbeanServer.isRegistered(on));
    assertTrue(invoke(mbeanServer,on,"isVerifySupported"));
    ComponentVerifier.Result res;
    res=invoke(mbeanServer,on,"verify",new Object[]{"connectivity",Collections.emptyMap()},VERIFY_SIGNATURE);
    assertEquals(ComponentVerifier.Result.Status.OK,res.getStatus());
    assertEquals(ComponentVerifier.Scope.CONNECTIVITY,res.getScope());
    res=invoke(mbeanServer,on,"verify",new Object[]{"ConnEctivIty",Collections.emptyMap()},VERIFY_SIGNATURE);
    assertEquals(ComponentVerifier.Result.Status.OK,res.getStatus());
    assertEquals(ComponentVerifier.Scope.CONNECTIVITY,res.getScope());
    res=invoke(mbeanServer,on,"verify",new Object[]{"PARAMETERS",Collections.emptyMap()},VERIFY_SIGNATURE);
    assertEquals(ComponentVerifier.Result.Status.OK,res.getStatus());
    assertEquals(ComponentVerifier.Scope.PARAMETERS,res.getScope());
  }
private static class MyVerifiableComponent extends DefaultComponent implements VerifiableComponent {
    @Override public ComponentVerifier getVerifier(){
      return new DefaultComponentVerifierExtension("my-verifiable-component",getCamelContext()){
        @Override protected Result verifyConnectivity(        Map<String,Object> parameters){
          return ResultBuilder.withStatusAndScope(Result.Status.OK,Scope.CONNECTIVITY).build();
        }
        @Override protected Result verifyParameters(        Map<String,Object> parameters){
          return ResultBuilder.withStatusAndScope(Result.Status.OK,Scope.PARAMETERS).build();
        }
      }
;
    }
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      throw new UnsupportedOperationException();
    }
  }
}
