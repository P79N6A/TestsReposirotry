public class MinaManyUDPMessagesTest extends CamelTestSupport {
  private static int serverPort;
  private final int messageCount=100;
  private final String message="<165>Aug  4 05:34:00 mymachine myproc[10]: %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK #\n" + "         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n" + "         Conveyer1=OK, Conveyer2=OK # %%";
  @BeforeClass public static void initPort(){
    serverPort=AvailablePortFinder.getNextAvailable();
  }
  @Test public void testSendingManyMessages() throws Exception, InterruptedException {
    MockEndpoint stop1=getMockEndpoint("mock:stop1");
    MockEndpoint stop2=getMockEndpoint("mock:stop2");
    stop2.expectedMessageCount(messageCount);
    stop1.expectedMessageCount(messageCount);
    DatagramSocket socket=new DatagramSocket();
    try {
      InetAddress address=InetAddress.getByName("127.0.0.1");
      for (int i=0; i < messageCount; i++) {
        byte[] data=message.getBytes();
        DatagramPacket packet=new DatagramPacket(data,data.length,address,serverPort);
        socket.send(packet);
        Thread.sleep(100);
      }
    }
  finally {
      socket.close();
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        DataFormat syslogDataFormat=new SyslogDataFormat();
        from("mina2:udp://127.0.0.1:" + serverPort).unmarshal(syslogDataFormat).process(new Processor(){
          public void process(          Exchange ex){
            assertTrue(ex.getIn().getBody() instanceof SyslogMessage);
          }
        }
).to("mock:stop1").marshal(syslogDataFormat).to("mock:stop2");
      }
    }
;
  }
}
