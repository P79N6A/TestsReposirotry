/** 
 * @version 
 */
public class ManagedRegisterRouteTest extends ManagementTestSupport {
  @Test public void testRoutes() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    String uri=(String)mbeanServer.getAttribute(on,"EndpointUri");
    assertEquals("direct://start",uri);
    String id=(String)mbeanServer.getAttribute(on,"RouteId");
    assertEquals("myRoute",id);
    String group=(String)mbeanServer.getAttribute(on,"RouteGroup");
    assertEquals("myGroup",group);
    String desc=(String)mbeanServer.getAttribute(on,"Description");
    assertEquals("my cool route",desc);
    Integer val=(Integer)mbeanServer.getAttribute(on,"InflightExchanges");
    assertEquals(0,val.intValue());
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
    context.stopRoute(context.getRouteDefinitions().get(0));
    registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be stopped",ServiceStatus.Stopped.name(),state);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("myRoute").routeGroup("myGroup").description("my cool route").to("log:foo").to("mock:result");
      }
    }
;
  }
}
