public class AggregatorLockingTest extends ContextTestSupport {
  private final CountDownLatch latch=new CountDownLatch(2);
  @Test public void testAggregationWithoutParallelNorOptimisticShouldNotLockDownstreamProcessors() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("a","b");
    template.sendBodyAndHeader("seda:a","a","myId",1);
    template.sendBodyAndHeader("seda:a","b","myId",2);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:a?concurrentConsumers=2").aggregate(header("myId"),new UseLatestAggregationStrategy()).completionSize(1).log("Before await with thread: ${threadName} and body: ${body}").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            latch.countDown();
            if (!latch.await(5,TimeUnit.SECONDS)) {
              throw new RuntimeException("Took too long; assume threads are blocked and fail test");
            }
          }
        }
).log("After await with thread: ${threadName} and body: ${body}").to("mock:result");
      }
    }
;
  }
}
