/** 
 * Unit test for writing done files
 */
public class FilerProducerDoneFileNameRouteTest extends ContextTestSupport {
  private Properties myProp=new Properties();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myProp",myProp);
    return jndi;
  }
  @Test public void testProducerPlaceholderPrefixDoneFileName() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    assertTrue(oneExchangeDone.matches(5,TimeUnit.SECONDS));
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/done-hello.txt");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        myProp.put("myDir","target/done");
        PropertiesComponent pc=context.getComponent("properties",PropertiesComponent.class);
        pc.setLocation("ref:myProp");
        from("direct:start").to("file:{{myDir}}?doneFileName=done-${file:name}").to("mock:result");
      }
    }
;
  }
}
