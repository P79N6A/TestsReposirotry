/** 
 * Unit test for writing done files
 */
public class FilerProducerDoneFileNameTest extends ContextTestSupport {
  private Properties myProp=new Properties();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myProp",myProp);
    return jndi;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    PropertiesComponent pc=context.getComponent("properties",PropertiesComponent.class);
    pc.setLocation("ref:myProp");
    return context;
  }
  @Test public void testProducerConstantDoneFileName() throws Exception {
    template.sendBodyAndHeader("file:target/done?doneFileName=done","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/done");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Test public void testProducerPrefixDoneFileName() throws Exception {
    template.sendBodyAndHeader("file:target/done?doneFileName=done-${file:name}","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/done-hello.txt");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Test public void testProducerExtDoneFileName() throws Exception {
    template.sendBodyAndHeader("file:target/done?doneFileName=${file:name}.done","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/hello.txt.done");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Test public void testProducerReplaceExtDoneFileName() throws Exception {
    template.sendBodyAndHeader("file:target/done?doneFileName=${file:name.noext}.done","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/hello.done");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Test public void testProducerInvalidDoneFileName() throws Exception {
    try {
      template.sendBodyAndHeader("file:target/done?doneFileName=${file:parent}/foo","Hello World",Exchange.FILE_NAME,"hello.txt");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      ExpressionIllegalSyntaxException cause=assertIsInstanceOf(ExpressionIllegalSyntaxException.class,e.getCause());
      assertTrue(cause.getMessage(),cause.getMessage().endsWith("Cannot resolve reminder: ${file:parent}/foo"));
    }
  }
  @Test public void testProducerEmptyDoneFileName() throws Exception {
    try {
      template.sendBodyAndHeader("file:target/done?doneFileName=","Hello World",Exchange.FILE_NAME,"hello.txt");
      fail("Should have thrown exception");
    }
 catch (    CamelExecutionException e) {
      IllegalArgumentException cause=assertIsInstanceOf(IllegalArgumentException.class,e.getCause());
      assertTrue(cause.getMessage(),cause.getMessage().startsWith("doneFileName must be specified and not empty"));
    }
  }
  @Test public void testProducerPlaceholderPrefixDoneFileName() throws Exception {
    myProp.put("myDir","target/done");
    template.sendBodyAndHeader("file:{{myDir}}?doneFileName=done-${file:name}","Hello World",Exchange.FILE_NAME,"hello.txt");
    File file=new File("target/done/hello.txt");
    assertEquals("File should exists",true,file.exists());
    File done=new File("target/done/done-hello.txt");
    assertEquals("Done file should exists",true,done.exists());
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
