public class MQTTConsumerWildcardTopicsTest extends MQTTBaseTest {
  private static final String[] PUBLISH_TOPICS={TEST_TOPIC,TEST_TOPIC_2,"base","base/foo","base/foo/bar","base/bat/data/baz/splat"};
  @Test public void testConsumeMultipleTopicsWithWildcards() throws Exception {
    MQTT mqtt=new MQTT();
    mqtt.setHost(MQTTTestSupport.getHostForMQTTEndpoint());
    BlockingConnection publisherConnection=mqtt.blockingConnection();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(numberOfMessages * (PUBLISH_TOPICS.length - 1));
    publisherConnection.connect();
    String payload;
    for (    String topic : PUBLISH_TOPICS) {
      for (int i=0; i < numberOfMessages; i++) {
        payload="Topic " + topic + ", Message "+ i;
        publisherConnection.publish(topic,payload.getBytes(),QoS.AT_LEAST_ONCE,false);
      }
    }
    mock.await(5,TimeUnit.SECONDS);
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("mqtt:bar?subscribeTopicNames=" + TEST_TOPICS_WITH_WILDCARDS + "&host="+ MQTTTestSupport.getHostForMQTTEndpoint()).transform(body().convertToString()).to("mock:result");
      }
    }
;
  }
}
