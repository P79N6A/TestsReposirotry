/** 
 * @version 
 */
public class MulticastAggregationStrategyThrowExceptionTest extends ContextTestSupport {
  @Test public void testThrowException() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead"));
        from("direct:start").multicast(new MyAggregateBean()).shareUnitOfWork().to("direct:a").to("direct:b").end();
        from("direct:a").to("mock:a");
        from("direct:b").to("mock:b");
      }
    }
;
  }
public static class MyAggregateBean implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange != null) {
        throw new IllegalArgumentException("Forced");
      }
      return newExchange;
    }
  }
}
