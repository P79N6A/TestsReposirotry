/** 
 * Test for  {@link HessianDataFormat}.
 */
public class HessianDataFormatWhitelistingTest extends CamelTestSupport {
  @Test public void testMarshalAndUnmarshalObject() throws Exception {
    final TestObject object=new TestObject();
    object.setBool(true);
    object.setIntNumber(42);
    object.setFloatNumber(3.14159f);
    object.setCharacter('Z');
    object.setText("random text");
    testMarshalAndUnmarshalFailed(object);
    final AnotherObject diffObject=new AnotherObject();
    object.setBool(true);
    object.setIntNumber(45);
    testMarshalAndUnmarshalSuccess(diffObject);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        final HessianDataFormat format=new HessianDataFormat();
        format.setWhitelistEnabled(true);
        format.setDeniedUnmarshallObjects("org.apache.camel.dataformat.hessian.TestObject");
        format.setAllowedUnmarshallObjects("org.apache.camel.dataformat.hessian.AnotherObject");
        from("direct:in").marshal(format);
        from("direct:back").unmarshal(format).to("mock:reverse");
      }
    }
;
  }
  private void testMarshalAndUnmarshalFailed(  final Object object) throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(1);
    if (object == null) {
      mock.message(0).body().isNull();
    }
 else {
      mock.message(0).body().isNotNull();
      mock.message(0).body().isNotEqualTo(object);
    }
    final Object marshalled=template.requestBody("direct:in",object);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
  private void testMarshalAndUnmarshalSuccess(  final Object object) throws Exception {
    final MockEndpoint mock=getMockEndpoint("mock:reverse");
    mock.expectedMessageCount(2);
    if (object == null) {
      mock.message(1).body().isNull();
    }
 else {
      mock.message(1).body().isNotNull();
      mock.message(1).body().isEqualTo(object);
    }
    final Object marshalled=template.requestBody("direct:in",object);
    template.sendBody("direct:back",marshalled);
    mock.assertIsSatisfied();
  }
}
