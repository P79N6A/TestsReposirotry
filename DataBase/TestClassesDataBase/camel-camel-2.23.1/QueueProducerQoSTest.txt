public class QueueProducerQoSTest extends JmsTestSupport {
  private static final String TEST_INONLY_DESTINATION_NAME="queue.producer.test.qos.inonly";
  private static final String TEST_INOUT_DESTINATION_NAME="queue.producer.test.qos.inout";
  private static final String EXPIRED_MESSAGE_ROUTE_ID="expiredAdvisoryRoute";
  private static final String MOCK_EXPIRED_ADVISORY="mock:expiredAdvisory";
  @EndpointInject(uri=MOCK_EXPIRED_ADVISORY) MockEndpoint mockExpiredAdvisory;
  @Test public void testInOutQueueProducerTTL() throws Exception {
    mockExpiredAdvisory.expectedMessageCount(1);
    String endpoint=String.format("sjms:queue:%s?ttl=1000&exchangePattern=InOut&responseTimeOut=500",TEST_INOUT_DESTINATION_NAME);
    try {
      template.requestBody(endpoint,"test message");
      fail("we aren't expecting any consumers, so should not succeed");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
    DestinationViewMBean queue=getQueueMBean(TEST_INOUT_DESTINATION_NAME);
    assertEquals("There were unexpected messages left in the queue: " + TEST_INOUT_DESTINATION_NAME,0,queue.getQueueSize());
  }
  @Test public void testInOnlyQueueProducerTTL() throws Exception {
    mockExpiredAdvisory.expectedMessageCount(1);
    String endpoint=String.format("sjms:queue:%s?ttl=1000",TEST_INONLY_DESTINATION_NAME);
    template.sendBody(endpoint,"test message");
    assertMockEndpointsSatisfied();
    DestinationViewMBean queue=getQueueMBean(TEST_INONLY_DESTINATION_NAME);
    assertEquals("There were unexpected messages left in the queue: " + TEST_INONLY_DESTINATION_NAME,0,queue.getQueueSize());
  }
  @Override protected void configureBroker(  BrokerService broker) throws Exception {
    broker.setUseJmx(true);
    broker.setPersistent(true);
    broker.setDataDirectory("target/activemq-data");
    broker.deleteAllMessages();
    broker.setAdvisorySupport(true);
    broker.addConnector(brokerUri);
    ActiveMQQueue queueName=new ActiveMQQueue(">");
    PolicyEntry entry=new PolicyEntry();
    entry.setDestination(queueName);
    entry.setExpireMessagesPeriod(1000);
    PolicyMap policyMap=new PolicyMap();
    policyMap.put(queueName,entry);
    broker.setDestinationPolicy(policyMap);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("sjms:topic:ActiveMQ.Advisory.Expired.Queue.>").routeId(EXPIRED_MESSAGE_ROUTE_ID).to(MOCK_EXPIRED_ADVISORY);
      }
    }
;
  }
}
