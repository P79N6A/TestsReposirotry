public class SpringComponentScanTest extends ContextTestSupport {
  private AbstractApplicationContext applicationContext;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    if (context != null) {
      context.stop();
    }
    applicationContext=new ClassPathXmlApplicationContext("org/apache/camel/spring/config/scan/componentScan.xml");
    context=applicationContext.getBean("camelScan",ModelCamelContext.class);
    template=context.createProducerTemplate();
  }
  @Override @After public void tearDown() throws Exception {
    IOHelper.close(applicationContext);
    super.tearDown();
  }
  @Test public void testExcludedRoute() throws InterruptedException {
    assertEquals(1,context.getRoutes().size());
    MockEndpoint mock=getMockEndpoint("mock:definitelyShouldNeverReceiveExchange");
    mock.expectedMessageCount(0);
    sendBody("seda:shouldNeverRecieveExchange","dropped like a hot rock");
    mock.await(500,TimeUnit.MILLISECONDS);
    mock.assertIsSatisfied();
  }
  @Test public void testSpringComponentScanFeature() throws InterruptedException {
    template.sendBody("direct:start","request");
    MockEndpoint mock=getMockEndpoint("mock:end");
    mock.expectedMessageCount(1);
    mock.assertIsSatisfied();
  }
}
