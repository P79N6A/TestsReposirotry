/** 
 * @version 
 */
public class BeanWithHeadersAndBodyInject3Test extends ContextTestSupport {
  private MyBean myBean=new MyBean();
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("bean:myBean?method=doSomething").to("mock:finish");
      }
    }
;
  }
  @Test public void testInOnly() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:finish");
    end.expectedBodiesReceived("Hello!");
    end.message(0).header("out").isNull();
    sendBody("direct:start","Test Input");
    assertMockEndpointsSatisfied();
    assertNotNull(end.getExchanges().get(0).getIn().getBody());
    assertEquals("Hello!",end.getExchanges().get(0).getIn().getBody());
  }
  @Test public void testInOut() throws Exception {
    MockEndpoint end=getMockEndpoint("mock:finish");
    end.expectedBodiesReceived("Hello!");
    end.expectedHeaderReceived("out",123);
    String out=template.requestBody("direct:start","Test Input",String.class);
    assertEquals("Hello!",out);
    assertMockEndpointsSatisfied();
    assertNotNull(end.getExchanges().get(0).getIn().getBody());
    assertEquals("Hello!",end.getExchanges().get(0).getIn().getBody());
    assertEquals(123,end.getExchanges().get(0).getIn().getHeader("out"));
  }
  @Override protected Context createJndiContext() throws Exception {
    JndiContext answer=new JndiContext();
    answer.bind("myBean",myBean);
    return answer;
  }
public static class MyBean {
    public String doSomething(    @Body String body,    @Headers Map<?,?> headers,    @OutHeaders Map<String,Object> outHeaders){
      if (outHeaders != null) {
        outHeaders.put("out",123);
      }
      return "Hello!";
    }
  }
}
