/** 
 * @version 
 */
public class FtpSimpleConsumeStreamingWithMultipleFilesTest extends FtpServerTestSupport {
  @Test public void testFtpSimpleConsumeAbsolute() throws Exception {
    if (!canTest()) {
      return;
    }
    String expected="Hello World";
    String expected2="Goodbye World";
    String path=FTP_ROOT_DIR + "/tmp/mytemp";
    template.sendBodyAndHeader("file:" + path,expected,Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file:" + path,expected2,Exchange.FILE_NAME,"goodbye.txt");
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.expectedBodiesReceivedInAnyOrder(expected,expected2);
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    GenericFile<?> remoteFile1=mock.getExchanges().get(0).getIn().getBody(GenericFile.class);
    GenericFile<?> remoteFile2=mock.getExchanges().get(1).getIn().getBody(GenericFile.class);
    assertTrue(remoteFile1.getBody() instanceof InputStream);
    assertTrue(remoteFile2.getBody() instanceof InputStream);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("ftp://localhost:" + getPort() + "/tmp/mytemp?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true").routeId("foo").noAutoStartup().to("mock:result");
      }
    }
;
  }
}
