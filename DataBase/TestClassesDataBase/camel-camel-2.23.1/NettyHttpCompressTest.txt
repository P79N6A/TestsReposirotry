public class NettyHttpCompressTest extends BaseNettyTest {
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    List<ChannelHandler> decoders=new ArrayList<>();
    decoders.add(new HttpContentDecompressor());
    registry.bind("myDecoders",decoders);
    return registry;
  }
  @Test public void testContentType() throws Exception {
    byte[] data="Hello World".getBytes(Charset.forName("UTF-8"));
    Map<String,Object> headers=new HashMap<>();
    headers.put("content-type","text/plain; charset=\"UTF-8\"");
    headers.put("Accept-Encoding","compress, gzip");
    String out=template.requestBodyAndHeaders("netty4-http:http://localhost:{{port}}/foo?decoders=#myDecoders",data,headers,String.class);
    assertEquals("Bye World",out.trim());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://0.0.0.0:{{port}}/foo?compression=true").transform().constant("Bye World").setHeader("content-type").constant("text/plain; charset=\"UTF-8\"");
      }
    }
;
  }
}
