/** 
 * @version 
 */
public class TypeConverterRegistryTest extends Assert {
  @Test public void testDefaultTypeConverterRegistry(){
    DefaultCamelContext ctx=new DefaultCamelContext();
    assertNotNull(ctx.getTypeConverterRegistry());
    TypeConverter tc=ctx.getTypeConverterRegistry().lookup(InputStream.class,File.class);
    assertNotNull(tc);
  }
  @Test public void testAddTypeConverter(){
    DefaultCamelContext context=new DefaultCamelContext();
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
    MyOrder order=context.getTypeConverter().convertTo(MyOrder.class,"123");
    assertNotNull(order);
    assertEquals(123,order.getId());
  }
  @Test public void testAddDuplicateTypeConverter(){
    DefaultCamelContext context=new DefaultCamelContext();
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
  }
  @Test public void testAddDuplicateTypeConverterIgnore(){
    DefaultCamelContext context=new DefaultCamelContext();
    context.getTypeConverterRegistry().setTypeConverterExists(TypeConverterExists.Ignore);
    context.getTypeConverterRegistry().setTypeConverterExistsLoggingLevel(LoggingLevel.INFO);
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
  }
  @Test public void testAddDuplicateTypeConverterFail(){
    DefaultCamelContext context=new DefaultCamelContext();
    context.getTypeConverterRegistry().setTypeConverterExists(TypeConverterExists.Fail);
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
    try {
      context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
      fail("Should have thrown exception");
    }
 catch (    TypeConverterExistsException e) {
    }
  }
  @Test public void testRemoveTypeConverter(){
    DefaultCamelContext context=new DefaultCamelContext();
    context.getTypeConverterRegistry().addTypeConverter(MyOrder.class,String.class,new MyOrderTypeConverter());
    MyOrder order=context.getTypeConverter().convertTo(MyOrder.class,"123");
    assertNotNull(order);
    assertEquals(123,order.getId());
    boolean removed=context.getTypeConverterRegistry().removeTypeConverter(MyOrder.class,String.class);
    assertTrue("Type converter should be removed",removed);
    order=context.getTypeConverter().convertTo(MyOrder.class,"123");
    assertNull("Type converter should be removed",order);
  }
private static class MyOrder {
    private int id;
    public int getId(){
      return id;
    }
    public void setId(    int id){
      this.id=id;
    }
  }
private static class MyOrderTypeConverter extends TypeConverterSupport {
    @SuppressWarnings("unchecked") public <T>T convertTo(    Class<T> type,    Exchange exchange,    Object value){
      MyOrder order=new MyOrder();
      order.setId(Integer.parseInt(value.toString()));
      return (T)order;
    }
  }
}
