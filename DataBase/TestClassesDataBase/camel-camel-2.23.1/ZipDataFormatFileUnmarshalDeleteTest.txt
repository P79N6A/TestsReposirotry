/** 
 * @version 
 */
public class ZipDataFormatFileUnmarshalDeleteTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/zip");
    super.setUp();
  }
  @Test public void testZipFileUnmarshalDelete() throws Exception {
    NotifyBuilder event=event().whenDone(2).create();
    getMockEndpoint("mock:result").expectedBodiesReceived("Hello World");
    template.sendBodyAndHeader("file:target/zip","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    event.matchesMockWaitTime();
    File in=new File("target/zip/hello.txt");
    assertFalse("Should have been deleted " + in,in.exists());
    File out=new File("target/zip/out/hello.txt.zip");
    assertFalse("Should have been deleted " + out,out.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/zip?initialDelay=0&delay=10&delete=true").marshal().zip().to("file:target/zip/out?fileName=${file:name}.zip");
        from("file:target/zip/out?initialDelay=0&delay=10&delete=true").unmarshal().zip().to("mock:result");
      }
    }
;
  }
}
