/** 
 * @version 
 */
public class BatchResequencerWithDuplicateTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testBatchResequencerAllowDuplicate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").resequence(header("id")).allowDuplicates().to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("1A","1B","2C","2D","2E","2F","3G","4H");
    template.sendBodyAndHeader("direct:start","1A","id","1");
    template.sendBodyAndHeader("direct:start","2C","id","2");
    template.sendBodyAndHeader("direct:start","2D","id","2");
    template.sendBodyAndHeader("direct:start","4H","id","4");
    template.sendBodyAndHeader("direct:start","1B","id","1");
    template.sendBodyAndHeader("direct:start","2E","id","2");
    template.sendBodyAndHeader("direct:start","3G","id","3");
    template.sendBodyAndHeader("direct:start","2F","id","2");
    assertMockEndpointsSatisfied();
  }
  @Test public void testBatchResequencerNoDuplicate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").resequence(header("id")).to("mock:result");
      }
    }
);
    context.start();
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("A","C","E","F");
    template.sendBodyAndHeader("direct:start","A","id","1");
    template.sendBodyAndHeader("direct:start","C","id","2");
    template.sendBodyAndHeader("direct:start","D","id","2");
    template.sendBodyAndHeader("direct:start","F","id","4");
    template.sendBodyAndHeader("direct:start","B","id","1");
    template.sendBodyAndHeader("direct:start","E","id","3");
    assertMockEndpointsSatisfied();
  }
}
