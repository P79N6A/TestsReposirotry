public class JsonRestProcessorTest {
static class TestObject extends AbstractDTOBase {
    private ZonedDateTime creationDate;
    public ZonedDateTime getCreationDate(){
      return creationDate;
    }
    public void setCreationDate(    final ZonedDateTime creationDate){
      this.creationDate=creationDate;
    }
  }
  @Test public void byDefaultItShouldNotSerializeNullValues() throws SalesforceException, IOException {
    final SalesforceComponent salesforce=new SalesforceComponent();
    final SalesforceEndpointConfig configuration=new SalesforceEndpointConfig();
    final SalesforceEndpoint endpoint=new SalesforceEndpoint("",salesforce,configuration,OperationName.UPDATE_SOBJECT,"");
    final JsonRestProcessor jsonProcessor=new JsonRestProcessor(endpoint);
    final Message in=new DefaultMessage(new DefaultCamelContext());
    try (InputStream stream=jsonProcessor.getRequestStream(in,new TestObject());InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8)){
      final String json=IOUtils.toString(reader);
      assertThat(json).isEqualTo("{}");
    }
   }
  @Test public void getRequestStream() throws Exception {
    final SalesforceComponent comp=new SalesforceComponent();
    final SalesforceEndpointConfig conf=new SalesforceEndpointConfig();
    final OperationName op=OperationName.CREATE_BATCH;
    final SalesforceEndpoint endpoint=new SalesforceEndpoint("",comp,conf,op,"");
    final JsonRestProcessor jsonRestProcessor=new JsonRestProcessor(endpoint);
    final DefaultCamelContext context=new DefaultCamelContext();
    final Exchange exchange=new DefaultExchange(context,ExchangePattern.InOut);
    final TestObject doc=new TestObject();
    doc.setCreationDate(ZonedDateTime.of(1717,1,2,3,4,5,6,ZoneId.systemDefault()));
    exchange.getIn().setBody(doc);
    try (InputStream stream=jsonRestProcessor.getRequestStream(exchange);InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8)){
      final String result=IOUtils.toString(reader);
      assertThat(result.length()).isLessThanOrEqualTo(48);
    }
   }
  @Test public void shouldSerializeNullValuesViaEndpointConfiguration() throws SalesforceException, IOException {
    final SalesforceComponent salesforce=new SalesforceComponent();
    final SalesforceEndpointConfig configuration=new SalesforceEndpointConfig();
    configuration.setSerializeNulls(true);
    final SalesforceEndpoint endpoint=new SalesforceEndpoint("",salesforce,configuration,OperationName.UPDATE_SOBJECT,"");
    final JsonRestProcessor jsonProcessor=new JsonRestProcessor(endpoint);
    final Message in=new DefaultMessage(new DefaultCamelContext());
    try (InputStream stream=jsonProcessor.getRequestStream(in,new TestObject());InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8)){
      final String json=IOUtils.toString(reader);
      assertThat(json).isEqualTo("{\"creationDate\":null}");
    }
   }
  @Test public void shouldSerializeNullValuesViaHeaderConfiguration() throws SalesforceException, IOException {
    final SalesforceComponent salesforce=new SalesforceComponent();
    final SalesforceEndpointConfig configuration=new SalesforceEndpointConfig();
    final SalesforceEndpoint endpoint=new SalesforceEndpoint("",salesforce,configuration,OperationName.UPDATE_SOBJECT,"");
    final JsonRestProcessor jsonProcessor=new JsonRestProcessor(endpoint);
    final Message in=new DefaultMessage(new DefaultCamelContext());
    in.setHeader(SalesforceEndpointConfig.SERIALIZE_NULLS,true);
    try (InputStream stream=jsonProcessor.getRequestStream(in,new TestObject());InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8)){
      final String json=IOUtils.toString(reader);
      assertThat(json).isEqualTo("{\"creationDate\":null}");
    }
   }
}
