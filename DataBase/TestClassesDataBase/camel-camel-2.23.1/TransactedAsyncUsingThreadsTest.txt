/** 
 * @version 
 */
public class TransactedAsyncUsingThreadsTest extends CamelSpringTestSupport {
  private static int counter;
  private static String thread1;
  private static String thread2;
  protected ClassPathXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/TransactedAsyncUsingThreadsTest.xml");
  }
  @Before public void init(){
    counter=0;
    thread1="";
    thread2="";
  }
  @Test public void testConsumeAsyncOK() throws Exception {
    counter=1;
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:async").expectedMessageCount(1);
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals("Should use a same thread when doing transacted async routing",thread1,thread2);
  }
  @Test public void testConsumeAsyncFail() throws Exception {
    counter=0;
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:async").expectedMessageCount(2);
    getMockEndpoint("mock:async").message(0).header("JMSRedelivered").isEqualTo(false);
    getMockEndpoint("mock:async").message(1).header("JMSRedelivered").isEqualTo(true);
    template.sendBody("activemq:queue:foo","Bye World");
    assertMockEndpointsSatisfied();
    assertEquals("Should use a same thread when doing transacted async routing",thread1,thread2);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            thread1=Thread.currentThread().getName();
          }
        }
).transacted().threads(5).to("mock:async").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            thread2=Thread.currentThread().getName();
            if (counter++ == 0) {
              throw new IllegalAccessException("Damn");
            }
          }
        }
).to("mock:result");
      }
    }
;
  }
}
