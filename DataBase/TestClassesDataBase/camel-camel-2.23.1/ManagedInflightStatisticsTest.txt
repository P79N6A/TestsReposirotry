/** 
 * @version
 */
public class ManagedInflightStatisticsTest extends ManagementTestSupport {
  @Test public void testOldestInflight() throws Exception {
    if (isPlatform("aix")) {
      return;
    }
    MBeanServer mbeanServer=getMBeanServer();
    Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
    assertEquals(1,set.size());
    ObjectName on=set.iterator().next();
    Long inflight=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
    assertEquals(0,inflight.longValue());
    Long ts=(Long)mbeanServer.getAttribute(on,"OldestInflightDuration");
    assertNull(ts);
    String id=(String)mbeanServer.getAttribute(on,"OldestInflightExchangeId");
    assertNull(id);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(2);
    CountDownLatch latch1=new CountDownLatch(1);
    CountDownLatch latch2=new CountDownLatch(1);
    template.asyncSendBody("direct:start",latch1);
    Thread.sleep(250);
    template.asyncSendBody("direct:start",latch2);
    await().atMost(2,TimeUnit.SECONDS).until(() -> {
      Long num=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
      return num != null && num == 2;
    }
);
    inflight=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
    assertEquals(2,inflight.longValue());
    ts=(Long)mbeanServer.getAttribute(on,"OldestInflightDuration");
    assertNotNull(ts);
    id=(String)mbeanServer.getAttribute(on,"OldestInflightExchangeId");
    assertNotNull(id);
    log.info("Oldest Exchange id: {}, duration: {}",id,ts);
    latch1.countDown();
    Thread.sleep(200);
    Long ts2=(Long)mbeanServer.getAttribute(on,"OldestInflightDuration");
    assertNotNull(ts2);
    String id2=(String)mbeanServer.getAttribute(on,"OldestInflightExchangeId");
    assertNotNull(id2);
    log.info("Oldest Exchange id: {}, duration: {}",id2,ts2);
    assertTrue(!id2.equals(id));
    assertTrue(!Objects.equals(ts2,ts));
    latch2.countDown();
    await().atMost(2,TimeUnit.SECONDS).until(() -> {
      Long num=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
      return num != null && num == 0;
    }
);
    assertMockEndpointsSatisfied();
    inflight=(Long)mbeanServer.getAttribute(on,"ExchangesInflight");
    assertEquals(0,inflight.longValue());
    ts=(Long)mbeanServer.getAttribute(on,"OldestInflightDuration");
    assertNull(ts);
    id=(String)mbeanServer.getAttribute(on,"OldestInflightExchangeId");
    assertNull(id);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            CountDownLatch latch=(CountDownLatch)exchange.getIn().getBody();
            latch.await(10,TimeUnit.SECONDS);
          }
        }
).to("mock:result").id("mock");
      }
    }
;
  }
}
