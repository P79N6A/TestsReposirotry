public class LimitsTest {
  @Test public void shouldBeKnownIfDefined(){
    assertFalse("Known usage must not declare itself as unknown",new Usage(1,2).isUnknown());
  }
  @Test public void shouldDeserializeFromSalesforceGeneratedJSON() throws JsonProcessingException, IOException {
    final ObjectMapper mapper=JsonUtils.createObjectMapper();
    final Object read=mapper.readerFor(Limits.class).readValue(LimitsTest.class.getResource("/org/apache/camel/component/salesforce/api/dto/limits.json"));
    assertThat("Limits should be parsed from JSON",read,instanceOf(Limits.class));
    final Limits limits=(Limits)read;
    final Usage dailyApiRequests=limits.getDailyApiRequests();
    assertFalse("Should have some usage present",dailyApiRequests.isUnknown());
    assertFalse("Per application usage should be present",dailyApiRequests.getPerApplicationUsage().isEmpty());
    assertNotNull("'Camel Salesman' application usage should be present",dailyApiRequests.forApplication("Camel Salesman"));
  }
  @Test public void shouldDeserializeWithUnsupportedKeys() throws JsonProcessingException, IOException {
    final ObjectMapper mapper=JsonUtils.createObjectMapper();
    final Limits withUnsupported=mapper.readerFor(Limits.class).readValue("{\"Camel-NotSupportedKey\": {\"Max\": 200,\"Remaining\": 200}}");
    assertNotNull(withUnsupported);
    assertNotNull(withUnsupported.forOperation("Camel-NotSupportedKey"));
  }
  @Test public void shouldSupportGettingAllDefinedUsages() throws IntrospectionException {
    final BeanInfo beanInfo=Introspector.getBeanInfo(Limits.class);
    final PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors();
    final Set<String> found=new HashSet<>();
    for (    final PropertyDescriptor descriptor : propertyDescriptors) {
      found.add(descriptor.getName());
    }
    final Set<String> defined=Arrays.stream(Limits.Operation.values()).map(Limits.Operation::name).map(Introspector::decapitalize).collect(Collectors.toSet());
    defined.removeAll(found);
    assertThat("All operations declared in Operation enum should have it's corresponding getter",defined,is(Collections.emptySet()));
  }
  @Test public void usageShouldBeUnknownIfUnknown(){
    assertTrue("Unknown usage must declare itself as such",Usage.UNKNOWN.isUnknown());
  }
}
