public class MllpTcpServerConsumerBlueprintTest extends CamelBlueprintTestSupport {
  static final String RECEIVED_URI="mock://received";
  static final String MLLP_HOST="localhost";
  @Rule public MllpClientResource mllpClient=new MllpClientResource();
  @EndpointInject(uri=RECEIVED_URI) MockEndpoint received;
  @Override protected void addServicesOnStartup(  Map<String,KeyValueHolder<Object,Dictionary>> services){
    ComponentResolver testResolver=new DefaultComponentResolver();
    services.put(ComponentResolver.class.getName(),asService(testResolver,"component","mllp"));
  }
  @Override protected String getBlueprintDescriptor(){
    return "OSGI-INF/blueprint/mllp-tcp-server-consumer-test.xml";
  }
  @Override protected Properties useOverridePropertiesWithPropertiesComponent(){
    mllpClient.setMllpHost(MLLP_HOST);
    mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable());
    Properties props=new Properties();
    props.setProperty("RECEIVED_URI",RECEIVED_URI);
    props.setProperty("mllp.host",mllpClient.getMllpHost());
    props.setProperty("mllp.port",Integer.toString(mllpClient.getMllpPort()));
    return props;
  }
  @Test public void testReceiveMultipleMessages() throws Exception {
    int sendMessageCount=5;
    received.expectedMinimumMessageCount(5);
    mllpClient.connect();
    for (int i=1; i <= sendMessageCount; ++i) {
      mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(i));
    }
    mllpClient.close();
    assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  }
}
