public class AmbiguousMethodCallExceptionSimplifiedTest extends ContextTestSupport {
public interface InterfaceSize {
    int size();
  }
public abstract static class AbstractClassSize {
    public abstract int size();
  }
public static class SuperClazz extends AbstractClassSize implements InterfaceSize {
    public int size(){
      return 1;
    }
  }
public static class Clazz extends SuperClazz {
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:in").choice().when(simple("${headers.bean.size} != 0")).to("mock:out");
      }
    }
;
  }
  @Test public void testAmbiguousMethodCallException() throws Exception {
    MockEndpoint out=getMockEndpoint("mock:out");
    out.expectedMessageCount(1);
    ExchangeBuilder exchangeBuilder=new ExchangeBuilder(context).withHeader("bean",new Clazz());
    template.send("direct:in",exchangeBuilder.build());
    out.assertIsSatisfied();
  }
}
