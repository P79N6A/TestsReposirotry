/** 
 */
public class RecipientListUseOriginalMessageEndpointExceptionIssueTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/inbox");
    deleteDirectory("target/outbox");
    super.setUp();
  }
  @Test public void testRecipientListUseOriginalMessageIssue() throws Exception {
    getMockEndpoint("mock:throwException").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new Exception("Exception raised");
      }
    }
);
    getMockEndpoint("mock:error").expectedMinimumMessageCount(1);
    getMockEndpoint("mock:error").expectedFileExists("target/outbox/hello.txt","A");
    template.sendBodyAndHeader("file:target/inbox","A",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(Exception.class).handled(true).useOriginalMessage().to("file://target/outbox").to("mock:error");
        from("file://target/inbox?initialDelay=0&delay=10").transform(constant("B")).setHeader("path",constant("mock:throwException")).recipientList(header("path")).shareUnitOfWork();
      }
    }
;
  }
}
