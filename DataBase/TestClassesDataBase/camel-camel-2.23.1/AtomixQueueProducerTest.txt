public class AtomixQueueProducerTest extends AtomixClientTestSupport {
  private static final String QUEUE_NAME=UUID.randomUUID().toString();
  private DistributedQueue<Object> queue;
  @EndpointInject(uri="direct:start") private FluentProducerTemplate fluent;
  @Override protected Map<String,Component> createComponents(){
    AtomixQueueComponent component=new AtomixQueueComponent();
    component.setNodes(Collections.singletonList(getReplicaAddress()));
    return Collections.singletonMap("atomix-queue",component);
  }
  @Override protected void doPreSetup() throws Exception {
    super.doPreSetup();
    queue=getClient().getQueue(QUEUE_NAME).join();
  }
  @Override @After public void tearDown() throws Exception {
    queue.close();
    super.tearDown();
  }
  @Test public void testAdd() throws Exception {
    final String val1=context().getUuidGenerator().generateUuid();
    final String val2=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.ADD).withBody(val1).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(queue.contains(val1).join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.ADD).withBody(val2).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(queue.contains(val2).join());
  }
  @Test public void testOfferPeekAndPoll() throws Exception {
    final String val=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.OFFER).withBody(val).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(queue.contains(val).join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.PEEK).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(queue.contains(val).join());
    assertEquals(val,result.getBody());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.POLL).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(queue.contains(val).join());
    assertEquals(val,result.getBody());
  }
  @Test public void testSizeClearIsEmpty() throws Exception {
    final String val1=context().getUuidGenerator().generateUuid();
    final String val2=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.SIZE).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(0,result.getBody(Integer.class).intValue());
    assertEquals(queue.size().join(),result.getBody(Integer.class));
    queue.add(val1).join();
    queue.add(val2).join();
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.SIZE).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(queue.size().join(),result.getBody(Integer.class));
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.IS_EMPTY).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(result.getBody(Boolean.class));
    assertFalse(queue.isEmpty().join());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.CLEAR).request(Message.class);
    assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertEquals(0,queue.size().join().intValue());
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.IS_EMPTY).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertTrue(queue.isEmpty().join());
  }
  @Test public void testContains() throws Exception {
    final String val=context().getUuidGenerator().generateUuid();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.CONTAINS).withBody(val).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(result.getBody(Boolean.class));
    assertFalse(queue.contains(val).join());
    queue.add(val);
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.CONTAINS).withBody(val).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertTrue(result.getBody(Boolean.class));
    assertTrue(queue.contains(val).join());
  }
  @Test public void testRemove() throws Exception {
    final String val1=context().getUuidGenerator().generateUuid();
    final String val2=context().getUuidGenerator().generateUuid();
    queue.add(val1).join();
    queue.add(val2).join();
    Message result;
    result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixQueue.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_VALUE,val1).request(Message.class);
    assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
    assertFalse(queue.contains(val1).join());
    assertTrue(queue.contains(val2).join());
  }
  @Override protected RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").toF("atomix-queue:%s",QUEUE_NAME);
      }
    }
;
  }
}
