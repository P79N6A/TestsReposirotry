/** 
 * Easier transaction configuration as we do not have to setup a transaction error handler
 */
public class SpringTransactionalClientDataSourceTransactedTest extends SpringTestSupport {
  protected JdbcTemplate jdbc;
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/springTransactionalClientDataSource.xml");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    final DataSource ds=getMandatoryBean(DataSource.class,"dataSource");
    jdbc=new JdbcTemplate(ds);
  }
  @Test public void testTransactionSuccess() throws Exception {
    template.sendBody("direct:okay","Hello World");
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",3,count);
  }
  @Test public void testTransactionRollback() throws Exception {
    try {
      template.sendBody("direct:fail","Hello World");
      fail("Should have thrown exception");
    }
 catch (    RuntimeCamelException e) {
      assertIsInstanceOf(RuntimeCamelException.class,e.getCause());
      assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
      assertEquals("We don't have Donkeys, only Camels",e.getCause().getCause().getMessage());
    }
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
  }
}
