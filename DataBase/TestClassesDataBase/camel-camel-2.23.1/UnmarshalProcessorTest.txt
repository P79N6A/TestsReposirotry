public class UnmarshalProcessorTest extends TestSupport {
  @Test public void testDataFormatReturnsSameExchange() throws Exception {
    Exchange exchange=createExchangeWithBody(new DefaultCamelContext(),"body");
    Processor processor=new UnmarshalProcessor(new MyDataFormat(exchange));
    processor.process(exchange);
    assertEquals("UnmarshalProcessor did not copy OUT from IN message","body",exchange.getOut().getBody());
  }
  @Test public void testDataFormatReturnsAnotherExchange() throws Exception {
    CamelContext context=new DefaultCamelContext();
    Exchange exchange=createExchangeWithBody(context,"body");
    Exchange exchange2=createExchangeWithBody(context,"body2");
    Processor processor=new UnmarshalProcessor(new MyDataFormat(exchange2));
    processor.process(exchange);
    Exception e=exchange.getException();
    assertNotNull(e);
    assertEquals("The returned exchange " + exchange2 + " is not the same as "+ exchange+ " provided to the DataFormat",e.getMessage());
  }
  @Test public void testDataFormatReturnsMessage() throws Exception {
    Exchange exchange=createExchangeWithBody(new DefaultCamelContext(),"body");
    Message out=new DefaultMessage(exchange.getContext());
    out.setBody(new Object());
    Processor processor=new UnmarshalProcessor(new MyDataFormat(out));
    processor.process(exchange);
    assertSame("UnmarshalProcessor did not make use of the returned OUT message",out,exchange.getOut());
    assertSame("UnmarshalProcessor did change the body bound to the OUT message",out.getBody(),exchange.getOut().getBody());
  }
  @Test public void testDataFormatReturnsBody() throws Exception {
    Exchange exchange=createExchangeWithBody(new DefaultCamelContext(),"body");
    Object unmarshalled=new Object();
    Processor processor=new UnmarshalProcessor(new MyDataFormat(unmarshalled));
    processor.process(exchange);
    assertSame("UnmarshalProcessor did not make use of the returned object being returned while unmarshalling",unmarshalled,exchange.getOut().getBody());
  }
private static class MyDataFormat extends ServiceSupport implements DataFormat {
    private final Object object;
    MyDataFormat(    Exchange exchange){
      object=exchange;
    }
    MyDataFormat(    Message message){
      object=message;
    }
    MyDataFormat(    Object unmarshalled){
      object=unmarshalled;
    }
    @Override public void marshal(    Exchange exchange,    Object graph,    OutputStream stream) throws Exception {
      throw new IllegalAccessException("This method is not expected to be used by UnmarshalProcessor");
    }
    @Override public Object unmarshal(    Exchange exchange,    InputStream stream) throws Exception {
      return object;
    }
    @Override protected void doStart() throws Exception {
    }
    @Override protected void doStop() throws Exception {
    }
  }
}
