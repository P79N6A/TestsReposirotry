@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes=SpringBatchJobRegistryTest.ContextConfig.class,loader=CamelSpringDelegatingTestContextLoader.class) public class SpringBatchJobRegistryTest extends AbstractJUnit4SpringContextTests {
  @EndpointInject(uri="mock:output") MockEndpoint outputEndpoint;
  @EndpointInject(uri="mock:jobExecutionEventsQueue") MockEndpoint jobExecutionEventsQueueEndpoint;
  @Autowired ProducerTemplate template;
  @Autowired ConsumerTemplate consumer;
  String[] inputMessages=new String[]{"foo","bar","baz",null};
  @Before public void setUp() throws Exception {
    for (    String message : inputMessages) {
      template.sendBody("seda:inputQueue",message);
    }
  }
  @DirtiesContext @Test public void testJobRegistry() throws InterruptedException {
    outputEndpoint.expectedBodiesReceived("Echo foo","Echo bar","Echo baz");
    template.sendBody("direct:start","Start batch!");
    outputEndpoint.assertIsSatisfied();
  }
@Configuration @Import(value=BatchConfig.class) public static class ContextConfig extends SingleRouteCamelConfiguration {
    @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure(){
          from("direct:start").to("spring-batch:echoJob?jobRegistry=#jobRegistry");
          from("direct:processor").setExchangePattern(ExchangePattern.InOut).setBody(simple("Echo ${body}"));
        }
      }
;
    }
  }
@EnableBatchProcessing(modular=true) public static class BatchConfig {
    @Bean public ApplicationContextFactory testJobs(){
      return new GenericApplicationContextFactory(ChildBatchConfig.class);
    }
  }
@Configuration public static class ChildBatchConfig {
    @Autowired JobBuilderFactory jobs;
    @Autowired StepBuilderFactory steps;
    @Autowired ConsumerTemplate consumerTemplate;
    @Autowired ProducerTemplate producerTemplate;
    @Bean protected ItemReader<Object> reader() throws Exception {
      return new CamelItemReader<>(consumerTemplate,"seda:inputQueue");
    }
    @Bean protected ItemWriter<Object> writer() throws Exception {
      return new CamelItemWriter<>(producerTemplate,"mock:output");
    }
    @Bean protected ItemProcessor<Object,Object> processor() throws Exception {
      return new CamelItemProcessor<>(producerTemplate,"direct:processor");
    }
    @Bean protected JobExecutionListener jobExecutionListener() throws Exception {
      return new CamelJobExecutionListener(producerTemplate,"mock:jobExecutionEventsQueue");
    }
    @Bean public Job echoJob() throws Exception {
      return this.jobs.get("echoJob").start(echoStep()).build();
    }
    @Bean protected Step echoStep() throws Exception {
      return this.steps.get("echoStep").chunk(3).reader(reader()).processor(processor()).writer(writer()).build();
    }
  }
}
