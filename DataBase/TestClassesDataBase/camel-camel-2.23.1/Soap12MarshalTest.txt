/** 
 */
public class Soap12MarshalTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce(uri="direct:start") protected ProducerTemplate producer;
  /** 
 * Test Soap marshalling by sending a GetCustomerByName object and checking against a xml file.
 * @throws java.io.IOException
 * @throws InterruptedException
 */
  @Test public void testMarshalNormalObject() throws IOException, InterruptedException {
    InputStream in=this.getClass().getResourceAsStream("SoapMarshalTestExpectedResult.xml");
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.expectedBodiesReceived(TestUtil.readStream(in));
    GetCustomersByName request=new GetCustomersByName();
    request.setName("Smith");
    producer.sendBody(request);
    resultEndpoint.assertIsSatisfied();
  }
  /** 
 * Test Soap marshalling by sending a NoSuchCustomerException object and checking against a xml file. We expect to receive a SOAP fault here that contains a NoSuchCustomer object as detail.
 * @throws java.io.IOException
 * @throws InterruptedException
 */
  @Test public void testMarshalException() throws IOException, InterruptedException {
    resultEndpoint.expectedMessageCount(1);
    resultEndpoint.message(0).body(String.class).contains("<ns2:Envelope xmlns:ns2=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ns3=\"http://customerservice.example.com/\">");
    resultEndpoint.message(0).body(String.class).contains("<ns2:Fault>");
    resultEndpoint.message(0).body(String.class).contains("<ns2:Value>ns2:Receiver</ns2:Value>");
    resultEndpoint.message(0).body(String.class).contains("<ns2:Text xml:lang=\"en\">No customer found</ns2:Text>");
    resultEndpoint.message(0).body(String.class).contains("<customerId>None</customerId>");
    resultEndpoint.message(0).body(String.class).contains("</ns2:Fault>");
    NoSuchCustomer noSuchCustomer=new NoSuchCustomer();
    noSuchCustomer.setCustomerId("None");
    NoSuchCustomerException exception=new NoSuchCustomerException("No customer found",noSuchCustomer);
    producer.sendBodyAndHeader(null,Exchange.EXCEPTION_CAUGHT,exception);
    resultEndpoint.assertIsSatisfied();
  }
  /** 
 * Create data format by using the constructor
 */
  protected SoapJaxbDataFormat createDataFormat(){
    String jaxbPackage=GetCustomersByName.class.getPackage().getName();
    ElementNameStrategy elStrat=new TypeNameStrategy();
    SoapJaxbDataFormat answer=new SoapJaxbDataFormat(jaxbPackage,elStrat);
    answer.setVersion("1.2");
    return answer;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        SoapJaxbDataFormat df=createDataFormat();
        from("direct:start").marshal(df).to("mock:result");
      }
    }
;
  }
}
