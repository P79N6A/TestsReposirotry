public class CassandraComponentConsumerTest extends BaseCassandraTest {
  private static final String CQL="select login, first_name, last_name from camel_user";
  @Rule public CassandraCQLUnit cassandra=CassandraUnitUtils.cassandraCQLUnit();
  @Test public void testConsumeAll() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:resultAll");
    mock.expectedMinimumMessageCount(1);
    mock.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Object body=exchange.getIn().getBody();
        assertTrue(body instanceof List);
      }
    }
);
    mock.await(1,TimeUnit.SECONDS);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumeUnprepared() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:resultUnprepared");
    mock.expectedMinimumMessageCount(1);
    mock.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Object body=exchange.getIn().getBody();
        assertTrue(body instanceof List);
      }
    }
);
    mock.await(1,TimeUnit.SECONDS);
    assertMockEndpointsSatisfied();
  }
  @Test public void testConsumeOne() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint mock=getMockEndpoint("mock:resultOne");
    mock.expectedMinimumMessageCount(1);
    mock.whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        Object body=exchange.getIn().getBody();
        assertTrue(body instanceof Row);
      }
    }
);
    mock.await(1,TimeUnit.SECONDS);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("cql://localhost/camel_ks?cql=" + CQL).to("mock:resultAll");
        from("cql://localhost/camel_ks?cql=" + CQL + "&prepareStatements=false").to("mock:resultUnprepared");
        from("cql://localhost/camel_ks?cql=" + CQL + "&resultSetConversionStrategy=ONE").to("mock:resultOne");
      }
    }
;
  }
}
