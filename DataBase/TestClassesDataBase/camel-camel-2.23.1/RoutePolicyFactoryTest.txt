public class RoutePolicyFactoryTest extends ContextTestSupport {
  @Test public void testRoutePolicyFactory() throws Exception {
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedHeaderReceived("RoutePolicy","foo-route");
    getMockEndpoint("mock:bar").expectedHeaderReceived("RoutePolicy","bar-route");
    template.sendBody("direct:foo","Hello Foo");
    template.sendBody("direct:bar","Hello Bar");
    assertMockEndpointsSatisfied();
  }
public static final class MyRoutePolicyFactory implements RoutePolicyFactory {
    public MyRoutePolicyFactory(){
    }
    @Override public RoutePolicy createRoutePolicy(    CamelContext camelContext,    String routeId,    RouteDefinition route){
      return new MyRoutePolicy(routeId);
    }
  }
private static final class MyRoutePolicy extends RoutePolicySupport {
    private final String routeId;
    private MyRoutePolicy(    String routeId){
      this.routeId=routeId;
    }
    public String getRouteId(){
      return routeId;
    }
    @Override public void onExchangeBegin(    Route route,    Exchange exchange){
      exchange.getIn().setHeader("RoutePolicy",routeId);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addRoutePolicyFactory(new MyRoutePolicyFactory());
        from("direct:foo").routeId("foo-route").to("mock:foo");
        from("direct:bar").routeId("bar-route").to("mock:bar");
      }
    }
;
  }
}
