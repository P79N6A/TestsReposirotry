@RunWith(MockitoJUnitRunner.class) public class NonXmlFilterReaderTest {
  private NonXmlFilterReader nonXmlFilterReader;
  @Mock private NonXmlCharFilterer nonXmlCharFiltererMock;
  @Mock private Reader readerMock;
  @Before public void setUp(){
    nonXmlFilterReader=new NonXmlFilterReader(readerMock);
    nonXmlFilterReader.nonXmlCharFilterer=nonXmlCharFiltererMock;
  }
  @Test public void testRead() throws IOException {
    char[] buffer=new char[10];
    when(readerMock.read(same(buffer),eq(3),eq(5))).thenAnswer(new Answer<Integer>(){
      public Integer answer(      InvocationOnMock invocation) throws Throwable {
        try (ConstantReader reader=new ConstantReader(new char[]{'a','b','c'})){
          Object[] args=invocation.getArguments();
          return reader.read((char[])args[0],(Integer)args[1],(Integer)args[2]);
        }
       }
    }
);
    int result=nonXmlFilterReader.read(buffer,3,5);
    verify(readerMock).read(same(buffer),eq(3),eq(5));
    verify(nonXmlCharFiltererMock).filter(same(buffer),eq(3),eq(3));
    assertEquals("Unexpected number of chars read",3,result);
    assertArrayEquals("Wrong buffer contents",new char[]{0,0,0,'a','b','c',0,0,0,0},buffer);
  }
  @Test public void testReadEOS() throws IOException {
    char[] buffer=new char[10];
    when(readerMock.read(any(char[].class),anyInt(),anyInt())).thenReturn(-1);
    int result=nonXmlFilterReader.read(buffer,3,5);
    assertEquals("Unexpected number of chars read",-1,result);
    assertArrayEquals("Buffer should not have been affected",new char[]{0,0,0,0,0,0,0,0,0,0},buffer);
  }
static class ConstantReader extends Reader {
    private char[] constant;
    ConstantReader(    char[] constant){
      this.constant=constant;
    }
    @Override public void close() throws IOException {
    }
    @Override public int read(    char[] cbuf,    int off,    int len) throws IOException {
      int length=Math.min(len,constant.length);
      System.arraycopy(constant,0,cbuf,off,length);
      return length;
    }
  }
}
