public class SqlConsumerMaxMessagesPerPollTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase4.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void maxMessagesPerPoll() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    assertMockEndpointsSatisfied();
    List<Exchange> exchanges=mock.getReceivedExchanges();
    assertBodyMapValue(1,"ID",exchanges.get(0));
    assertBodyMapValue("Camel","PROJECT",exchanges.get(0));
    assertProperty(0,"CamelBatchIndex",exchanges.get(0));
    assertProperty(2,"CamelBatchSize",exchanges.get(0));
    assertProperty(Boolean.FALSE,"CamelBatchComplete",exchanges.get(0));
    assertBodyMapValue(2,"ID",exchanges.get(1));
    assertBodyMapValue("AMQ","PROJECT",exchanges.get(1));
    assertProperty(1,"CamelBatchIndex",exchanges.get(1));
    assertProperty(2,"CamelBatchSize",exchanges.get(1));
    assertProperty(Boolean.TRUE,"CamelBatchComplete",exchanges.get(1));
    assertBodyMapValue(3,"ID",exchanges.get(2));
    assertBodyMapValue("Linux","PROJECT",exchanges.get(2));
    assertProperty(0,"CamelBatchIndex",exchanges.get(2));
    assertProperty(1,"CamelBatchSize",exchanges.get(2));
    assertProperty(Boolean.TRUE,"CamelBatchComplete",exchanges.get(2));
  }
  private void assertProperty(  Object value,  String propertyName,  Exchange exchange){
    assertEquals(value,exchange.getProperty(propertyName));
  }
  private void assertBodyMapValue(  Object value,  String key,  Exchange exchange){
    assertEquals(value,exchange.getIn().getBody(Map.class).get(key));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        getContext().setTracing(true);
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("sql:select * from projects where processed = false order by id?maxMessagesPerPoll=2&consumer.initialDelay=0&consumer.delay=50").to("mock:result").to("sql:update projects set processed = true where id = :#id");
      }
    }
;
  }
}
