/** 
 */
public class FtpXQueryTest extends CamelTestSupport {
  protected static int ftpPort;
  protected FtpServer ftpServer;
  private String ftp="ftp:localhost:" + ftpPort + "/myapp?password=admin&username=admin";
  @BeforeClass public static void initPort() throws Exception {
    ftpPort=AvailablePortFinder.getNextAvailable(20127);
  }
  @Test public void testXQueryFromFtp() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:davsclaus");
    mock.expectedMessageCount(1);
    mock.message(0).body(String.class).contains("Hello World");
    MockEndpoint other=getMockEndpoint("mock:other");
    other.expectedMessageCount(1);
    other.message(0).body(String.class).contains("Bye World");
    template.sendBodyAndHeader(ftp,"<mail from=\"davsclaus@apache.org\"><subject>Hey</subject><body>Hello World!</body></mail>",Exchange.FILE_NAME,"claus.xml");
    template.sendBodyAndHeader(ftp,"<mail from=\"janstey@apache.org\"><subject>Hey</subject><body>Bye World!</body></mail>",Exchange.FILE_NAME,"janstey.xml");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(ftp).choice().when().xquery("/mail/@from = 'davsclaus@apache.org'").to("mock:davsclaus").otherwise().to("mock:other");
      }
    }
;
  }
  public void setUp() throws Exception {
    super.setUp();
    initFtpServer();
    ftpServer.start();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    ftpServer.stop();
    ftpServer=null;
  }
  protected void initFtpServer() throws Exception {
    FtpServerFactory serverFactory=new FtpServerFactory();
    File file=new File("src/test/resources/users.properties");
    UserManager uman=new PropertiesUserManager(new ClearTextPasswordEncryptor(),file,"admin");
    serverFactory.setUserManager(uman);
    NativeFileSystemFactory fsf=new NativeFileSystemFactory();
    fsf.setCreateHome(true);
    serverFactory.setFileSystem(fsf);
    ListenerFactory factory=new ListenerFactory();
    factory.setPort(ftpPort);
    serverFactory.addListener("default",factory.createListener());
    ftpServer=serverFactory.createServer();
  }
}
