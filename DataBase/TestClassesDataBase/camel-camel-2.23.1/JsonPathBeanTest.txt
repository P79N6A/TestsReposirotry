public class JsonPathBeanTest extends CamelTestSupport {
  @Test public void testFullName() throws Exception {
    String json="{\"person\" : {\"firstname\" : \"foo\", \"middlename\" : \"foo2\", \"lastname\" : \"bar\"}}";
    getMockEndpoint("mock:result").expectedBodiesReceived("foo foo2 bar");
    template.sendBody("direct:start",json);
    assertMockEndpointsSatisfied();
  }
  @Test public void testFullNameTwo() throws Exception {
    String json="{\"person\" : {\"firstname\" : \"foo\", \"middlename\" : \"foo2\", \"lastname\" : \"bar\"}}";
    String json2="{\"person\" : {\"firstname\" : \"bar\", \"middlename\" : \"bar2\", \"lastname\" : \"foo\"}}";
    getMockEndpoint("mock:result").expectedBodiesReceived("foo foo2 bar","bar bar2 foo");
    template.sendBody("direct:start",json);
    template.sendBody("direct:start",json2);
    assertMockEndpointsSatisfied();
  }
  @Test public void testFirstAndLastName() throws Exception {
    String json="{\"person\" : {\"firstname\" : \"foo\", \"lastname\" : \"bar\"}}";
    getMockEndpoint("mock:result").expectedBodiesReceived("foo bar");
    template.sendBody("direct:start",json);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:start").bean(FullNameBean.class).to("mock:result");
      }
    }
;
  }
protected static class FullNameBean {
    public static String getName(    @JsonPath("person.firstname") String first,    @JsonPath(value="person.middlename",options=Option.SUPPRESS_EXCEPTIONS) String middle,    @JsonPath("person.lastname") String last){
      if (middle != null) {
        return first + " " + middle+ " "+ last;
      }
      return first + " " + last;
    }
  }
}
