public class CxfRsStreamCacheTest extends CamelTestSupport {
  private static final String PUT_REQUEST="<Customer><name>Mary</name><id>123</id></Customer>";
  private static final String CONTEXT="/CxfRsStreamCacheTest";
  private static final String CXT=CXFTestSupport.getPort1() + CONTEXT;
  private static final String RESPONSE="<pong xmlns=\"test/service\"/>";
  private String cxfRsEndpointUri="cxfrs://http://localhost:" + CXT + "/rest?synchronous="+ isSynchronous()+ "&dataFormat=PAYLOAD&resourceClasses=org.apache.camel.component.cxf.jaxrs.testbean.CustomerService";
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().setStreamCaching(true);
        getContext().getStreamCachingStrategy().setSpoolThreshold(1L);
        errorHandler(noErrorHandler());
        from(cxfRsEndpointUri).convertBodyTo(Customer.class).to("mock:result").process(exchange -> {
          CachedOutputStream cos=new CachedOutputStream(exchange);
          cos.write(RESPONSE.getBytes("UTF-8"));
          cos.close();
          exchange.getOut().setBody(cos.newStreamCache());
          exchange.addOnCompletion(new Synchronization(){
            @Override public void onComplete(            Exchange exchange){
              template.sendBody("mock:onComplete","");
            }
            @Override public void onFailure(            Exchange exchange){
            }
          }
);
        }
);
      }
    }
;
  }
  @Test public void testPutConsumer() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.message(0).body().isInstanceOf(Customer.class);
    MockEndpoint onComplete=getMockEndpoint("mock:onComplete");
    onComplete.expectedMessageCount(1);
    HttpPut put=new HttpPut("http://localhost:" + CXT + "/rest/customerservice/customers");
    StringEntity entity=new StringEntity(PUT_REQUEST,"ISO-8859-1");
    entity.setContentType("text/xml; charset=ISO-8859-1");
    put.addHeader("test","header1;header2");
    put.setEntity(entity);
    CloseableHttpClient httpclient=HttpClientBuilder.create().build();
    try {
      HttpResponse response=httpclient.execute(put);
      assertEquals(200,response.getStatusLine().getStatusCode());
      assertEquals(RESPONSE,EntityUtils.toString(response.getEntity()));
    }
  finally {
      httpclient.close();
    }
    mock.assertIsSatisfied();
    onComplete.assertIsSatisfied();
  }
  protected boolean isSynchronous(){
    return false;
  }
}
