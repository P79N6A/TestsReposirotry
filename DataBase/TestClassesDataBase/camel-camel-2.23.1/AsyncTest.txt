public class AsyncTest extends BigQueryTestSupport {
  private static final String TABLE_ID="asynctest";
  @EndpointInject(uri="direct:in") private Endpoint directIn;
  @EndpointInject(uri="google-bigquery:{{project.id}}:{{bigquery.datasetId}}:" + TABLE_ID) private Endpoint bigqueryEndpoint;
  @EndpointInject(uri="mock:sendResult") private MockEndpoint sendResult;
  @Produce(uri="direct:in") private ProducerTemplate producer;
  @Before public void init() throws Exception {
    createBqTable(TABLE_ID);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from(directIn).to("seda:seda");
        from("seda:seda").routeId("Async").inOnly(bigqueryEndpoint).log(LoggingLevel.INFO,"To sendresult").to(sendResult);
      }
    }
;
  }
  @Test public void sendAsync() throws Exception {
    List<Map> objects=new ArrayList<>();
    for (int i=0; i < 5; i++) {
      Exchange exchange=new DefaultExchange(context);
      String uuidCol1=UUID.randomUUID().toString();
      String uuidCol2=UUID.randomUUID().toString();
      Map<String,String> object=new HashMap<>();
      object.put("col1",uuidCol1);
      object.put("col2",uuidCol2);
      objects.add(object);
      exchange.getIn().setBody(object);
      producer.send(exchange);
    }
    sendResult.expectedMessageCount(5);
    sendResult.assertIsSatisfied(4000);
    for (    Map object : objects) {
      assertRowExist(TABLE_ID,object);
    }
  }
}
