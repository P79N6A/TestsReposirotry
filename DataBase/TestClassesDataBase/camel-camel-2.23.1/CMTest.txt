@RunWith(CamelSpringJUnit4ClassRunner.class) @ContextConfiguration(classes={CamelTestConfiguration.class},loader=CamelSpringDelegatingTestContextLoader.class) public class CMTest extends AbstractJUnit4SpringContextTests {
  @Autowired private CamelContext camelContext;
  private SecureRandom random=new SecureRandom();
  private final PhoneNumberUtil pnu=PhoneNumberUtil.getInstance();
  private String validNumber;
  @Produce(uri="direct:sms") private CMProxy cmProxy;
  @EndpointInject(uri="mock:test") private MockEndpoint mock;
  @Before public void beforeTest() throws Exception {
    mock.reset();
    camelContext.startRoute(CamelTestConfiguration.SIMPLE_ROUTE_ID);
    validNumber=pnu.format(pnu.getExampleNumber("ES"),PhoneNumberFormat.E164);
  }
  @After public void afterTest(){
    try {
      camelContext.stopRoute(CamelTestConfiguration.SIMPLE_ROUTE_ID);
    }
 catch (    Exception e) {
      logger.error("Exception trying to stop de routes",e);
    }
  }
  @Test(expected=ResolveEndpointFailedException.class) public void testNotRequiredProductToken() throws Throwable {
    try {
      String schemedUri="cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&testConnectionOnStartup=true";
      camelContext.getEndpoint(schemedUri).start();
    }
 catch (    Throwable t) {
      throw t.getCause();
    }
  }
  @Test(expected=ResolveEndpointFailedException.class) public void testNotRequiredDefaultFrom() throws Throwable {
    try {
      String schemedUri="cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&testConnectionOnStartup=true";
      camelContext.getEndpoint(schemedUri).start();
    }
 catch (    Throwable t) {
      throw t.getCause();
    }
  }
  @Test(expected=HostUnavailableException.class) public void testHostUnavailableException() throws Throwable {
    String schemedUri="cm-sms://dummy.sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&productToken=ea723fd7-da81-4826-89bc-fa7144e71c40&testConnectionOnStartup=true";
    Service service=camelContext.getEndpoint(schemedUri).createProducer();
    service.start();
  }
  @Test(expected=ResolveEndpointFailedException.class) public void testInvalidHostDuplicateScheme() throws Throwable {
    try {
      String schemedUri="cm-sms://https://demo.com";
      camelContext.getEndpoint(schemedUri);
    }
 catch (    Throwable t) {
      throw t.getCause();
    }
  }
  @Test(expected=RuntimeException.class) public void testNullPayload() throws Throwable {
    cmProxy.send(null);
  }
  @Test(expected=NoAccountFoundForProductTokenException.class) public void testAsPartOfARoute() throws Exception {
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    cmProxy.send(smsMessage);
  }
  @Test(expected=NoAccountFoundForProductTokenException.class) public void testNoAccountFoundForProductTokenException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new NoAccountFoundForProductTokenExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateGSM0338Message(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=CMResponseException.class) public void testCMResponseException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new CMResponseExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=InsufficientBalanceException.class) public void testInsufficientBalanceException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new InsufficientBalanceExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateGSM0338Message(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=InvalidMSISDNException.class) public void testInvalidMSISDNException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new InvalidMSISDNExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=InvalidProductTokenException.class) public void testInvalidProductTokenException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new InvalidProductTokenExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=NoMessageException.class) public void testNoMessageException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new NoMessageExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateGSM0338Message(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=NotPhoneNumberFoundException.class) public void testNotPhoneNumberFoundException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new NotPhoneNumberFoundExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=UnknownErrorException.class) public void testUnknownErrorException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new UnknownErrorExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateGSM0338Message(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=UnroutableMessageException.class) public void testUnroutableMessageException() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    CMProducer producer=endpoint.createProducer();
    producer.setSender(new UnroutableMessageExceptionSender());
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateUnicodeMessage(),validNumber,null);
    send(producer,smsMessage);
  }
  @Test(expected=UnsupportedOperationException.class) public void testCMEndpointIsForProducing() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    endpoint.createConsumer(null);
  }
  @Test public void testCMEndpointGetHost() throws Exception {
    CMEndpoint endpoint=(CMEndpoint)camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri());
    Assert.isTrue(endpoint.getHost().equals(applicationContext.getEnvironment().getRequiredProperty("cm.url")));
  }
  @Test(expected=InvalidPayloadRuntimeException.class) public void testSendInvalidPayload() throws Exception {
    final SMSMessage smsMessage=new SMSMessage(generateIdAsString(),generateGSM0338Message(),null,null);
    cmProxy.send(smsMessage);
  }
  private String generateUnicodeMessage(){
    String ch="\uF400";
    return generateRandomLengthMessageByChar(ch);
  }
  private String generateGSM0338Message(){
    String ch="a";
    return generateRandomLengthMessageByChar(ch);
  }
  private String generateRandomLengthMessageByChar(  String ch){
    int msgLength=(int)(Math.random() * 2000);
    StringBuffer message=new StringBuffer();
    for (int index=0; index < msgLength; index++) {
      message.append(ch);
    }
    return message.toString();
  }
  private String generateIdAsString(){
    return new BigInteger(130,random).toString(32);
  }
  private static void send(  CMProducer producer,  SMSMessage smsMessage) throws Exception {
    Exchange exchange=producer.getEndpoint().createExchange();
    exchange.getIn().setBody(smsMessage);
    producer.process(exchange);
  }
}
