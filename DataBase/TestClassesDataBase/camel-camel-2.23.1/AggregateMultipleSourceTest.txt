/** 
 * @version 
 */
public class AggregateMultipleSourceTest extends ContextTestSupport {
  @Test public void testAggregateMultipleSourceTest() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.expectsNoDuplicates(body());
    for (int i=0; i < 40; i++) {
      if (i % 2 == 0) {
        template.sendBodyAndHeader("seda:foo","" + i,"type","A");
      }
 else       if (i % 5 == 0) {
        template.sendBodyAndHeader("seda:bar","" + i,"type","A");
      }
 else {
        template.sendBodyAndHeader("seda:baz","" + i,"type","A");
      }
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").to("direct:aggregate");
        from("seda:bar").to("direct:aggregate");
        from("seda:baz").to("direct:aggregate");
        from("direct:aggregate").aggregate(header("type"),new MyAggregationStrategy()).completionSize(25).completionTimeout(500).completionTimeoutCheckerInterval(10).to("mock:result").end();
      }
    }
;
  }
private static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body=oldExchange.getIn().getBody(String.class);
      String newBody=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body + newBody);
      return oldExchange;
    }
  }
}
