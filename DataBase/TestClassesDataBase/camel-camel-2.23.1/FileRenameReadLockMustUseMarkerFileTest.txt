/** 
 * @version 
 */
public class FileRenameReadLockMustUseMarkerFileTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/rename");
    super.setUp();
  }
  @Test public void testCamelLockFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Bye World");
    mock.message(0).header(Exchange.FILE_NAME).isEqualTo("bye.txt");
    template.sendBodyAndHeader("file:target/rename","Bye World",Exchange.FILE_NAME,"bye.txt");
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    assertTrue(oneExchangeDone.matchesMockWaitTime());
    File lock=new File("target/rename/bye.txt" + FileComponent.DEFAULT_LOCK_FILE_POSTFIX);
    assertFalse("Lock file should not exist: " + lock,lock.exists());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/rename?readLock=rename&initialDelay=0&delay=10").routeId("foo").noAutoStartup().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String name=exchange.getIn().getHeader(Exchange.FILE_PATH) + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;
            File lock=new File(name);
            assertTrue("Lock file should exist: " + name,lock.exists());
          }
        }
).convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
