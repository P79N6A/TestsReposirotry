/** 
 * @version 
 */
public class MulticastTest extends ContextTestSupport {
  protected Endpoint startEndpoint;
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Test public void testSendingAMessageUsingMulticastReceivesItsOwnExchange() throws Exception {
    x.expectedBodiesReceived("input+output");
    y.expectedBodiesReceived("input+output");
    z.expectedBodiesReceived("input+output");
    template.send("direct:a",new Processor(){
      public void process(      Exchange exchange){
        Message in=exchange.getIn();
        in.setBody("input");
        in.setHeader("foo","bar");
      }
    }
);
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    final Processor processor=new AppendingProcessor();
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").multicast().to("direct:x","direct:y","direct:z");
        from("direct:x").process(processor).to("mock:x");
        from("direct:y").process(processor).to("mock:y");
        from("direct:z").process(processor).to("mock:z");
      }
    }
;
  }
}
