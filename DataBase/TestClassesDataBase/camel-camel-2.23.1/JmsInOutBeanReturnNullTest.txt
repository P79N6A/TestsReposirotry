/** 
 */
public class JmsInOutBeanReturnNullTest extends CamelTestSupport {
  @Test public void testReturnBean() throws Exception {
    MyBean out=template.requestBody("activemq:queue:foo","Camel",MyBean.class);
    assertNotNull(out);
    assertEquals("Camel",out.getName());
  }
  @Test public void testReturnNull() throws Exception {
    Object out=template.requestBody("activemq:queue:foo","foo");
    assertNull(out);
  }
  @Test public void testReturnNullMyBean() throws Exception {
    MyBean out=template.requestBody("activemq:queue:foo","foo",MyBean.class);
    assertNull(out);
  }
  @Test public void testReturnNullExchange() throws Exception {
    Exchange reply=template.request("activemq:queue:foo",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("foo");
      }
    }
);
    assertNotNull(reply);
    assertTrue(reply.hasOut());
    Message out=reply.getOut();
    assertNotNull(out);
    Object body=out.getBody();
    assertNull("Should be a null body",body);
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").bean(JmsInOutBeanReturnNullTest.class,"doSomething");
      }
    }
;
  }
  public MyBean doSomething(  String body){
    if ("foo".equals(body)) {
      return null;
    }
 else {
      return new MyBean(body);
    }
  }
public static final class MyBean implements Serializable {
    private static final long serialVersionUID=1L;
    public String name;
    public MyBean(    String name){
      this.name=name;
    }
    public String getName(){
      return name;
    }
  }
}
