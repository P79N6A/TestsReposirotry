@RunWith(MockitoJUnitRunner.class) public class ProducerTest extends SplunkMockTestSupport {
  @EndpointInject(uri="splunk://stream") protected SplunkEndpoint streamEndpoint;
  @EndpointInject(uri="splunk://submit") protected SplunkEndpoint submitEndpoint;
  @EndpointInject(uri="splunk://tcp") protected SplunkEndpoint tcpEndpoint;
  @Mock private TcpInput input;
  @Mock private Index index;
  @Mock private IndexCollection indexColl;
  @Mock private InputCollection inputCollection;
  @Before public void setup() throws IOException {
    when(service.getIndexes()).thenReturn(indexColl);
    when(service.getInputs()).thenReturn(inputCollection);
    when(input.attach()).thenReturn(socket);
    when(inputCollection.get(anyString())).thenReturn(input);
    when(indexColl.get(anyString())).thenReturn(index);
    when(index.attach(isA(Args.class))).thenReturn(socket);
    when(socket.getOutputStream()).thenReturn(System.out);
  }
  @Test public void testStreamWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:stream-result");
    mock.setExpectedMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key11","value1");
    splunkEvent.addPair("key22","value2");
    splunkEvent.addPair("key33","value3");
    template.sendBody("direct:stream",splunkEvent);
    assertMockEndpointsSatisfied();
    Producer streamProducer=streamEndpoint.createProducer();
    assertIsInstanceOf(StreamDataWriter.class,((SplunkProducer)streamProducer).getDataWriter());
  }
  @Test public void testSubmitWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:submitresult");
    mock.setExpectedMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key1","value1");
    splunkEvent.addPair("key2","value2");
    splunkEvent.addPair("key3","value1");
    template.sendBody("direct:submit",splunkEvent);
    assertMockEndpointsSatisfied();
    Producer submitProducer=submitEndpoint.createProducer();
    assertIsInstanceOf(SubmitDataWriter.class,((SplunkProducer)submitProducer).getDataWriter());
  }
  @Test public void testTcpWriter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:tcpresult");
    mock.setExpectedMessageCount(1);
    SplunkEvent splunkEvent=new SplunkEvent();
    splunkEvent.addPair("key1","value1");
    splunkEvent.addPair("key2","value2");
    splunkEvent.addPair("key3","value3");
    template.sendBody("direct:tcp",splunkEvent);
    assertMockEndpointsSatisfied();
    Producer tcpProducer=tcpEndpoint.createProducer();
    assertIsInstanceOf(TcpDataWriter.class,((SplunkProducer)tcpProducer).getDataWriter());
  }
  @Test(expected=CamelExecutionException.class) public void testBodyWithoutRawOption() throws Exception {
    template.sendBody("direct:tcp","foobar");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:stream").to("splunk://stream?username=foo&password=bar&index=myindex&sourceType=StreamSourceType&source=StreamSource").to("mock:stream-result");
        from("direct:submit").to("splunk://submit?username=foo&password=bar&index=myindex&sourceType=testSource&source=test").to("mock:submitresult");
        from("direct:tcp").to("splunk://tcp?username=foo&password=bar&tcpReceiverPort=2222&index=myindex&sourceType=testSource&source=test").to("mock:tcpresult");
      }
    }
;
  }
}
