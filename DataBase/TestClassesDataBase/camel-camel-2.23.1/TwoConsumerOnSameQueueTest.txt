public class TwoConsumerOnSameQueueTest extends CamelTestSupport {
  @Test public void testTwoConsumerOnSameQueue() throws Exception {
    sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert();
  }
  @Test public void testStopAndStartOneRoute() throws Exception {
    sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert();
    context.stopRoute("a");
    resetMocks();
    getMockEndpoint("mock:a").expectedMessageCount(0);
    getMockEndpoint("mock:b").expectedBodiesReceived("Bye World","Bye World");
    template.sendBody("activemq:queue:foo","Bye World");
    template.sendBody("activemq:queue:foo","Bye World");
    assertMockEndpointsSatisfied();
    context.startRoute("a");
    resetMocks();
    sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert();
  }
  @Test public void testRemoveOneRoute() throws Exception {
    sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert();
    context.stopRoute("a");
    assertTrue(context.removeRoute("a"));
    resetMocks();
    getMockEndpoint("mock:a").expectedMessageCount(0);
    getMockEndpoint("mock:b").expectedBodiesReceived("Bye World","Bye World");
    template.sendBody("activemq:queue:foo","Bye World");
    template.sendBody("activemq:queue:foo","Bye World");
    assertMockEndpointsSatisfied();
  }
  private void sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert() throws InterruptedException {
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:b").expectedBodiesReceived("Hello World");
    template.sendBody("activemq:queue:foo","Hello World");
    template.sendBody("activemq:queue:foo","Hello World");
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createPersistentConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:foo").routeId("a").to("log:a","mock:a");
        from("activemq:queue:foo").routeId("b").to("log:b","mock:b");
      }
    }
;
  }
}
