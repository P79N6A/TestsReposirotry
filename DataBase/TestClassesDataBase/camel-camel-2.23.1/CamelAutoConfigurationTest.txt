@DirtiesContext @RunWith(SpringRunner.class) @EnableAutoConfiguration @SpringBootTest(classes={CamelAutoConfigurationTest.TestConfig.class,CamelAutoConfigurationTest.class,RouteConfigWithCamelContextInjected.class},properties={"camel.springboot.consumerTemplateCacheSize=100","camel.springboot.jmxEnabled=true","camel.springboot.name=customName","camel.springboot.typeConversion=true","camel.springboot.threadNamePattern=customThreadName #counter#"}) public class CamelAutoConfigurationTest extends Assert {
  @Autowired CamelContext camelContext;
  @Autowired CamelContextConfiguration camelContextConfiguration;
  @Autowired ProducerTemplate producerTemplate;
  @Autowired ConsumerTemplate consumerTemplate;
  @Autowired TypeConverter typeConverter;
  @EndpointInject(uri="mock:xmlAutoLoading") MockEndpoint xmlAutoLoadingMock;
  @Test public void shouldCreateCamelContext(){
    assertNotNull(camelContext);
  }
  @Test public void shouldDetectRoutes(){
    Route route=camelContext.getRoute(TestConfig.ROUTE_ID);
    assertNotNull(route);
  }
  @Test public void shouldLoadProducerTemplate(){
    assertNotNull(producerTemplate);
  }
  @Test public void shouldLoadConsumerTemplate(){
    assertNotNull(consumerTemplate);
  }
  @Test public void shouldLoadConsumerTemplateWithSizeFromProperties(){
    assertEquals(100,consumerTemplate.getMaximumCacheSize());
  }
  @Test public void shouldSendAndReceiveMessageWithTemplates(){
    String message="message";
    String seda="seda:test";
    producerTemplate.sendBody(seda,message);
    String receivedBody=consumerTemplate.receiveBody(seda,String.class);
    assertEquals(message,receivedBody);
  }
  @Test public void shouldLoadTypeConverters(){
    Long hundred=100L;
    Long convertedLong=typeConverter.convertTo(Long.class,hundred.toString());
    assertEquals(hundred,convertedLong);
  }
  @Test public void shouldCallCamelContextConfiguration(){
    verify(camelContextConfiguration).beforeApplicationStart(camelContext);
    verify(camelContextConfiguration).afterApplicationStart(camelContext);
  }
  @Test public void shouldChangeContextNameViaConfigurationCallback(){
    assertEquals("customName",camelContext.getName());
    assertEquals(camelContext.getName(),camelContext.getManagementName());
  }
  @Test public void shouldStartRoute(){
    String message="msg";
    producerTemplate.sendBody("seda:test",message);
    String receivedMessage=consumerTemplate.receiveBody("seda:test",String.class);
    assertEquals(message,receivedMessage);
  }
  @Test public void shouldLoadXmlRoutes() throws InterruptedException {
    String message="msg";
    xmlAutoLoadingMock.expectedBodiesReceived(message);
    producerTemplate.sendBody("direct:xmlAutoLoading",message);
    xmlAutoLoadingMock.assertIsSatisfied();
  }
  @Test public void shouldChangeThreadNamePattern(){
    assertEquals(camelContext.getExecutorServiceManager().getThreadNamePattern(),"customThreadName #counter#");
  }
  @Test public void shouldComposeRegistries(){
    final Registry registry=camelContext.getRegistry();
    Assertions.assertThat(registry.lookupByName("bean")).isEqualTo(Ordered.HIGHEST_PRECEDENCE);
  }
@Configuration public static class TestConfig {
    static final String ROUTE_ID="testRoute";
    @Bean RouteBuilder routeBuilder(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:test").routeId(ROUTE_ID).to("mock:test");
        }
      }
;
    }
    @Bean CamelContextConfiguration camelContextConfiguration(){
      return mock(CamelContextConfiguration.class);
    }
    @Bean Registry customRegistry1(){
      return mockRegistryWithBeanValueAndOrder(Ordered.LOWEST_PRECEDENCE);
    }
    @Bean Registry customRegistry2(){
      return mockRegistryWithBeanValueAndOrder(Ordered.HIGHEST_PRECEDENCE);
    }
    private Registry mockRegistryWithBeanValueAndOrder(    int value){
      final Registry registry=mock(Registry.class,withSettings().extraInterfaces(Ordered.class));
      when(registry.lookupByName("bean")).thenReturn(value);
      when(((Ordered)registry).getOrder()).thenReturn(value);
      return registry;
    }
  }
}
