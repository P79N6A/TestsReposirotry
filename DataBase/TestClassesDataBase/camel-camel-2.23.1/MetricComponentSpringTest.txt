@RunWith(CamelSpringRunner.class) @ContextConfiguration(classes={MetricComponentSpringTest.TestConfig.class},loader=CamelSpringDelegatingTestContextLoader.class) @MockEndpoints public class MetricComponentSpringTest {
  @EndpointInject(uri="mock:out") private MockEndpoint endpoint;
  @Produce(uri="direct:in") private ProducerTemplate producer;
@Configuration public static class TestConfig extends SingleRouteCamelConfiguration {
    @Bean @Override public RouteBuilder route(){
      return new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:in").to("metrics:counter:A?increment=512").to("mock:out");
        }
      }
;
    }
    @Bean(name=MetricsComponent.METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry(){
      return Mockito.mock(MetricRegistry.class);
    }
  }
  @Test public void testMetricsRegistryFromCamelRegistry() throws Exception {
    MetricRegistry mockRegistry=endpoint.getCamelContext().getRegistry().lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME,MetricRegistry.class);
    Counter mockCounter=Mockito.mock(Counter.class);
    InOrder inOrder=Mockito.inOrder(mockRegistry,mockCounter);
    when(mockRegistry.counter("A")).thenReturn(mockCounter);
    endpoint.expectedMessageCount(1);
    producer.sendBody(new Object());
    endpoint.assertIsSatisfied();
    inOrder.verify(mockRegistry,times(1)).counter("A");
    inOrder.verify(mockCounter,times(1)).inc(512L);
    inOrder.verifyNoMoreInteractions();
  }
}
