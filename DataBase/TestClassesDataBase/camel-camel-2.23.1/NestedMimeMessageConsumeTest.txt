public class NestedMimeMessageConsumeTest extends CamelTestSupport {
  @Test public void testNestedMultipart() throws Exception {
    Mailbox.clearAll();
    MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
    resultEndpoint.expectedMinimumMessageCount(1);
    prepareMailbox("james3");
    resultEndpoint.assertIsSatisfied();
    Exchange exchange=resultEndpoint.getReceivedExchanges().get(0);
    String text=exchange.getIn().getBody(String.class);
    assertThat(text,containsString("Test with bold face, pictures and attachments"));
    assertEquals("text/plain; charset=us-ascii",exchange.getIn().getHeader("Content-Type"));
    Set<String> attachmentNames=exchange.getIn().getAttachmentNames();
    assertNotNull("attachments got lost",attachmentNames);
    assertEquals(2,attachmentNames.size());
    for (    String s : attachmentNames) {
      Attachment att=exchange.getIn().getAttachmentObject(s);
      DataHandler dh=att.getDataHandler();
      Object content=dh.getContent();
      assertNotNull("Content should not be empty",content);
      assertThat(dh.getName(),anyOf(equalTo("image001.png"),equalTo("test.txt")));
    }
  }
  private void prepareMailbox(  String user) throws MessagingException {
    JavaMailSender sender=new DefaultJavaMailSender();
    Store store=sender.getSession().getStore("pop3");
    store.connect("localhost",25,user,"secret");
    Folder folder=store.getFolder("INBOX");
    folder.open(Folder.READ_WRITE);
    folder.expunge();
    InputStream is=getClass().getResourceAsStream("/nested-multipart.elm");
    Message hurzMsg=new MimeMessage(sender.getSession(),is);
    Message[] messages=new Message[]{hurzMsg};
    folder.appendMessages(messages);
    folder.close(true);
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("pop3://james3@localhost?consumer.initialDelay=100&consumer.delay=100").removeHeader("to").to("smtp://james4@localhost");
        from("pop3://james4@localhost?consumer.initialDelay=200&consumer.delay=100").convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
