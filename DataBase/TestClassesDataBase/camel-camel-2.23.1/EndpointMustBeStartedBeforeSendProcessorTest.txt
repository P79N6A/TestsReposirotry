/** 
 * @version 
 */
public class EndpointMustBeStartedBeforeSendProcessorTest extends ContextTestSupport {
  private MyEndpoint myendpoint;
  private volatile String order="";
  @Test public void testEndpointMustBeStartedBeforeProducer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        myendpoint=new MyEndpoint("myendpoint",context);
        from("direct:start").to(myendpoint);
      }
    }
);
    context.start();
    assertEquals("EndpointProducer",order);
  }
  @Test public void testEndpointMustBeStartedBeforeConsumer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        myendpoint=new MyEndpoint("myendpoint",context);
        from(myendpoint).to("mock:result");
      }
    }
);
    context.start();
    assertEquals("EndpointConsumer",order);
  }
  @Test public void testEndpointMustBeStartedBeforeConsumerAndProducer() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        myendpoint=new MyEndpoint("myendpoint",context);
        from(myendpoint).to("mock:result").to(myendpoint);
      }
    }
);
    context.start();
    assertEquals("EndpointProducerConsumer",order);
  }
  @Test public void testEndpointStartedOnceAndOnlyStoppedOnShutdown() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        myendpoint=new MyEndpoint("myendpoint",context);
        from(myendpoint).routeId("foo").to("mock:result").to(myendpoint);
      }
    }
);
    context.start();
    assertEquals("EndpointProducerConsumer",order);
    order="";
    context.stopRoute("foo");
    assertEquals("StopConsumerStopProducer",order);
    order="";
    context.startRoute("foo");
    assertEquals("ProducerConsumer",order);
    order="";
    context.stop();
    assertEquals("StopConsumerStopProducerStopEndpoint",order);
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
private final class MyEndpoint extends DefaultEndpoint {
    private MyEndpoint(    String endpointUri,    CamelContext camelContext){
      setCamelContext(camelContext);
      setEndpointUri(endpointUri);
    }
    public Producer createProducer() throws Exception {
      return new MyProducer(this);
    }
    public Consumer createConsumer(    Processor processor) throws Exception {
      return new MyConsumer(this,null);
    }
    public boolean isSingleton(){
      return true;
    }
    @Override public void doStart() throws Exception {
      order+="Endpoint";
    }
    @Override protected void doStop() throws Exception {
      order+="StopEndpoint";
    }
  }
private class MyProducer extends DefaultProducer {
    MyProducer(    Endpoint endpoint){
      super(endpoint);
    }
    public void process(    Exchange exchange) throws Exception {
    }
    @Override protected void doStart() throws Exception {
      order+="Producer";
    }
    @Override protected void doStop() throws Exception {
      order+="StopProducer";
    }
  }
private class MyConsumer extends DefaultConsumer {
    MyConsumer(    Endpoint endpoint,    Processor processor){
      super(endpoint,processor);
    }
    @Override protected void doStart() throws Exception {
      order+="Consumer";
    }
    @Override protected void doStop() throws Exception {
      order+="StopConsumer";
    }
  }
}
