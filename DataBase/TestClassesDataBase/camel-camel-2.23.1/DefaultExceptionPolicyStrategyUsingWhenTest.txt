/** 
 * Unit test for the when expression on the exception type.
 */
public class DefaultExceptionPolicyStrategyUsingWhenTest extends ContextTestSupport {
  private static final String ERROR_QUEUE="mock:error";
  private static final String ERROR_USER_QUEUE="mock:usererror";
public static class MyUserException extends Exception {
    private static final long serialVersionUID=1L;
    public MyUserException(    String message){
      super(message);
    }
  }
  @Test public void testNoWhen() throws Exception {
    MockEndpoint mock=getMockEndpoint(ERROR_QUEUE);
    mock.expectedMessageCount(1);
    try {
      template.sendBody("direct:a","Hello Camel");
      fail("Should have thrown an Exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testWithWhen() throws Exception {
    MockEndpoint mock=getMockEndpoint(ERROR_USER_QUEUE);
    mock.expectedMessageCount(1);
    try {
      template.sendBodyAndHeader("direct:a","Hello Camel","user","admin");
      fail("Should have thrown an Exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
        onException(MyUserException.class).onWhen(header("user").isNotNull()).maximumRedeliveries(1).redeliveryDelay(0).to(ERROR_USER_QUEUE);
        onException(MyUserException.class).maximumRedeliveries(2).redeliveryDelay(0).to(ERROR_QUEUE);
        from("direct:a").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String s=exchange.getIn().getBody(String.class);
            if ("Hello Camel".equals(s)) {
              throw new MyUserException("Forced for testing");
            }
            exchange.getOut().setBody("Hello World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
