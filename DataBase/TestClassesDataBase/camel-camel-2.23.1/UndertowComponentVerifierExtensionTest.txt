public class UndertowComponentVerifierExtensionTest extends BaseUndertowTest {
  @Test public void testParameters() throws Exception {
    Component component=context().getComponent("undertow");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpURI","http://localhost:" + getPort());
    parameters.put("tcpNoDelay","true");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingParameters() throws Exception {
    Component component=context().getComponent("undertow");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("tcpNoDelay","true");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("httpURI"));
  }
  @Test public void testConnectivity() throws Exception {
    Component component=context().getComponent("undertow");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpURI","http://localhost:" + getPort());
    parameters.put("tcpNoDelay","true");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityError() throws Exception {
    Component component=context().getComponent("undertow");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpURI","http://no-host:" + getPort());
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,error.getCode());
    Assert.assertTrue(error.getDetail(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof UnresolvedAddressException);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("undertow:http://localhost:{{port}}").process(e -> e.getOut().setBody("ok"));
      }
    }
;
  }
}
