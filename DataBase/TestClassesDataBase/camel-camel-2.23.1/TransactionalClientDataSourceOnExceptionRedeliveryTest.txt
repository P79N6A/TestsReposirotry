/** 
 * @version 
 */
public class TransactionalClientDataSourceOnExceptionRedeliveryTest extends TransactionalClientDataSourceTest {
  @Test public void testTransactionRollbackWithExchange() throws Exception {
    Exchange out=template.send("direct:fail",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("Hello World");
      }
    }
);
    int count=jdbc.queryForObject("select count(*) from books",Integer.class);
    assertEquals("Number of books",1,count);
    assertNotNull(out);
    Exception e=out.getException();
    assertIsInstanceOf(RuntimeCamelException.class,e);
    assertTrue(e.getCause() instanceof IllegalArgumentException);
    assertEquals("We don't have Donkeys, only Camels",e.getCause().getMessage());
    assertEquals(true,out.getIn().getHeader(Exchange.REDELIVERED));
    assertEquals(3,out.getIn().getHeader(Exchange.REDELIVERY_COUNTER));
    assertEquals(true,out.getProperty(Exchange.FAILURE_HANDLED));
    assertEquals(false,out.getProperty(Exchange.ERRORHANDLER_HANDLED));
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new SpringRouteBuilder(){
      public void configure() throws Exception {
        onException(IllegalArgumentException.class).maximumRedeliveries(3);
        from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService");
        from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService");
      }
    }
;
  }
}
