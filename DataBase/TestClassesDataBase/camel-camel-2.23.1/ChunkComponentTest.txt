/** 
 * Unit test for  {@link ChunkComponent} and {@link ChunkEndpoint}
 */
public class ChunkComponentTest extends CamelTestSupport {
  @EndpointInject(uri="mock:endSimple") protected MockEndpoint endSimpleMock;
  @Produce(uri="direct:startSimple") protected ProducerTemplate startSimpleProducerTemplate;
  /** 
 * Test without Resource URI header defined
 */
  @Test public void testChunk() throws Exception {
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.expectedBodiesReceived("Earth to Andrew. Come in, Andrew.\n");
    startSimpleProducerTemplate.sendBodyAndHeader("The Body","name","Andrew");
    assertMockEndpointsSatisfied();
  }
  /** 
 * Test using Resource URI header
 */
  @Test public void testChunkWithResourceUriHeader() throws Exception {
    Exchange exchange=createExchangeWithBody("The Body");
    exchange.getIn().setHeader("name","Andrew");
    exchange.getIn().setHeader(ChunkConstants.CHUNK_RESOURCE_URI,"hello");
    endSimpleMock.expectedMessageCount(1);
    endSimpleMock.expectedBodiesReceived("Earth to Andrew. Come in, Andrew.\n");
    startSimpleProducerTemplate.send(exchange);
    assertMockEndpointsSatisfied();
  }
  /** 
 * Performance test
 */
  @Test public void testChunkPerformance() throws Exception {
    int messageCount=10000;
    endSimpleMock.expectedMessageCount(messageCount);
    StopWatch stopwatch=new StopWatch(true);
    for (int i=0; i < messageCount; i++) {
      startSimpleProducerTemplate.sendBodyAndHeader("The Body","name","Andrew");
    }
    assertMockEndpointsSatisfied();
    LoggerFactory.getLogger(getClass()).info("Chunk performance: " + stopwatch.stop() + "ms for "+ messageCount+ " messages");
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct:startSimple").to("chunk://file").to("mock:endSimple");
      }
    }
;
  }
}
