/** 
 * Tests the WaitStrategy and ClaimStrategy configuration of the disruptor component
 */
@RunWith(value=Parameterized.class) public class DisruptorWaitClaimStrategyComponentTest extends CamelTestSupport {
  private static final Integer VALUE=Integer.valueOf(42);
  @EndpointInject(uri="mock:result") protected MockEndpoint resultEndpoint;
  @Produce protected ProducerTemplate template;
  private final String producerType;
  private final String waitStrategy;
  private String disruptorUri;
  public DisruptorWaitClaimStrategyComponentTest(  final String waitStrategy,  final String producerType){
    this.waitStrategy=waitStrategy;
    this.producerType=producerType;
  }
  @Parameters public static Collection<String[]> strategies(){
    final List<String[]> strategies=new ArrayList<>();
    for (    final DisruptorWaitStrategy waitStrategy : DisruptorWaitStrategy.values()) {
      for (      final DisruptorProducerType producerType : DisruptorProducerType.values()) {
        strategies.add(new String[]{waitStrategy.name(),producerType.name()});
      }
    }
    return strategies;
  }
  @Test public void testProduce() throws InterruptedException {
    resultEndpoint.expectedBodiesReceived(VALUE);
    resultEndpoint.setExpectedMessageCount(1);
    template.asyncSendBody(disruptorUri,VALUE);
    resultEndpoint.await(5,TimeUnit.SECONDS);
    resultEndpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    disruptorUri="disruptor:test?waitStrategy=" + waitStrategy + "&producerType="+ producerType;
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from(disruptorUri).to("mock:result");
      }
    }
;
  }
}
