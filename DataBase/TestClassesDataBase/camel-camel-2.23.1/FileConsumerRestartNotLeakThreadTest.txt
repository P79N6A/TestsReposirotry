public class FileConsumerRestartNotLeakThreadTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/leak");
    super.setUp();
  }
  @Test public void testLeak() throws Exception {
    int before=Thread.activeCount();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/leak","Hello World",Exchange.FILE_NAME,"hello.txt");
    assertMockEndpointsSatisfied();
    for (int i=0; i < 50; i++) {
      context.stopRoute("foo");
      context.startRoute("foo");
    }
    resetMocks();
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/leak","Bye World",Exchange.FILE_NAME,"bye.txt");
    assertMockEndpointsSatisfied();
    int active=Thread.activeCount() - before;
    log.info("Active threads after restarts: {}",active);
    assertTrue("There should not be so many active threads, was " + active,active < 10);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/leak").routeId("foo").to("mock:foo");
      }
    }
;
  }
}
