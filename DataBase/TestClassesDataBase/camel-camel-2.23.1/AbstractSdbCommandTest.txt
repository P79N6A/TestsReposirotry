public class AbstractSdbCommandTest {
  private AbstractSdbCommand command;
  private AmazonSimpleDB sdbClient;
  private SdbConfiguration configuration;
  private Exchange exchange;
  @Before public void setUp(){
    sdbClient=new AmazonSDBClientMock();
    configuration=new SdbConfiguration();
    configuration.setDomainName("DOMAIN1");
    configuration.setConsistentRead(Boolean.TRUE);
    exchange=new DefaultExchange(new DefaultCamelContext());
    this.command=new AbstractSdbCommand(sdbClient,configuration,exchange){
      @Override public void execute(){
      }
    }
;
  }
  @Test public void determineDomainName(){
    assertEquals("DOMAIN1",this.command.determineDomainName());
    exchange.getIn().setHeader(SdbConstants.DOMAIN_NAME,"DOMAIN2");
    assertEquals("DOMAIN2",this.command.determineDomainName());
  }
  @Test public void determineItemName(){
    try {
      this.command.determineItemName();
      fail("IllegalArgumentException expected");
    }
 catch (    IllegalArgumentException e) {
      assertEquals("AWS SDB Item Name header is missing.",e.getMessage());
    }
    exchange.getIn().setHeader(SdbConstants.ITEM_NAME,"ITEM1");
    assertEquals("ITEM1",this.command.determineItemName());
  }
  @Test public void determineConsistentRead(){
    assertEquals(Boolean.TRUE,this.command.determineConsistentRead());
    exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ,Boolean.FALSE);
    assertEquals(Boolean.FALSE,this.command.determineConsistentRead());
  }
  @Test public void determineUpdateCondition(){
    assertNull(this.command.determineUpdateCondition());
    UpdateCondition condition=new UpdateCondition("Key1","Value1",true);
    exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION,condition);
    assertSame(condition,this.command.determineUpdateCondition());
  }
  @Test public void determineNextToken(){
    assertNull(this.command.determineNextToken());
    exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN,"Token1");
    assertEquals("Token1",this.command.determineNextToken());
  }
}
