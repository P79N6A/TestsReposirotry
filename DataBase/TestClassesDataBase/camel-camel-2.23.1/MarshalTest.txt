public class MarshalTest {
  private XmlBeansDataFormat dataFormat;
  private Exchange exchange;
  @Before public void setUp(){
    this.dataFormat=new XmlBeansDataFormat();
    this.exchange=new DefaultExchange(new DefaultCamelContext());
  }
  @Test public void marshal() throws Exception {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    dataFormat.marshal(exchange,createBuyStocksDocument(),outputStream);
    assertBuyStocksXml(new String(outputStream.toByteArray()));
  }
  @Test public void marshalConcurrent() throws Exception {
    ExecutorService executor=Executors.newFixedThreadPool(10);
    final CountDownLatch latch=new CountDownLatch(100);
    for (int i=0; i < 100; i++) {
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
          dataFormat.marshal(exchange,createBuyStocksDocument(),outputStream);
          assertBuyStocksXml(new String(outputStream.toByteArray()));
          latch.countDown();
          return null;
        }
      }
);
    }
    assertTrue(latch.await(10,TimeUnit.SECONDS));
  }
  private void assertBuyStocksXml(  String result){
    assertTrue(result.contains("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
    assertTrue(result.contains("<xsd:buyStocks xmlns:xsd=\"http://services.samples/xsd\">"));
    assertTrue(result.contains("<order>"));
    assertTrue(result.contains("<symbol>IBM</symbol>"));
    assertTrue(result.contains("<buyerID>cmueller</buyerID>"));
    assertTrue(result.contains("<price>140.34</price>"));
    assertTrue(result.contains("volume>2000</volume>"));
    assertTrue(result.contains("</order>"));
    assertTrue(result.contains("</xsd:buyStocks>"));
  }
  private BuyStocksDocument createBuyStocksDocument(){
    BuyStocksDocument document=BuyStocksDocument.Factory.newInstance();
    BuyStocks payload=document.addNewBuyStocks();
    Order order=payload.addNewOrder();
    order.setSymbol("IBM");
    order.setBuyerID("cmueller");
    order.setPrice(140.34);
    order.setVolume(2000);
    return document;
  }
}
