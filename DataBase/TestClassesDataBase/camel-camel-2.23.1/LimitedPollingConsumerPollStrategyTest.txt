public class LimitedPollingConsumerPollStrategyTest extends ContextTestSupport {
  private LimitedPollingConsumerPollStrategy strategy;
  @Test public void testLimitedPollingConsumerPollStrategy() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(3);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    consumer.start();
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    consumer.stop();
  }
  @Test public void testLimitAtTwoLimitedPollingConsumerPollStrategy() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(2);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    consumer.start();
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    consumer.stop();
  }
  @Test public void testLimitedPollingConsumerPollStrategySuccess() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(3);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    consumer.start();
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.setExceptionToThrowOnPoll(null);
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.stop();
  }
  @Test public void testLimitedPollingConsumerPollStrategySuccessThenFail() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(3);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    consumer.start();
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.setExceptionToThrowOnPoll(null);
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.setExceptionToThrowOnPoll(expectedException);
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    consumer.stop();
  }
  @Test public void testTwoConsumersLimitedPollingConsumerPollStrategy() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(3);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    MockScheduledPollConsumer consumer2=new MockScheduledPollConsumer(endpoint,null);
    consumer2.setPollStrategy(strategy);
    consumer.start();
    consumer2.start();
    consumer.run();
    consumer2.run();
    assertTrue("Should still be started",consumer.isStarted());
    assertTrue("Should still be started",consumer2.isStarted());
    consumer.run();
    consumer2.run();
    assertTrue("Should still be started",consumer.isStarted());
    assertTrue("Should still be started",consumer2.isStarted());
    consumer.run();
    consumer2.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    assertTrue("Should still be started",consumer2.isStarted());
    consumer.stop();
    consumer2.stop();
  }
  @Test public void testRestartManuallyLimitedPollingConsumerPollStrategy() throws Exception {
    Exception expectedException=new Exception("Hello");
    strategy=new LimitedPollingConsumerPollStrategy();
    strategy.setLimit(3);
    final Endpoint endpoint=getMockEndpoint("mock:foo");
    MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(endpoint,expectedException);
    consumer.setPollStrategy(strategy);
    consumer.start();
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    ServiceHelper.resumeService(consumer);
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should be suspended",consumer.isSuspended());
    ServiceHelper.resumeService(consumer);
    consumer.setExceptionToThrowOnPoll(null);
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.run();
    assertTrue("Should still be started",consumer.isStarted());
    consumer.stop();
  }
}
