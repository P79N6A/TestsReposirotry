/** 
 * Testing the hystrix mapping
 */
@RunWith(SpringRunner.class) @SpringBootApplication @DirtiesContext @ContextConfiguration(classes=HystrixMappingAutoConfigurationTest.class) @SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT) public class HystrixMappingAutoConfigurationTest {
  private static final Logger LOG=LoggerFactory.getLogger(HystrixMappingAutoConfigurationTest.class);
  @Value("${local.server.port}") private int serverPort;
  @Test public void testHystrixServletMapping() throws Exception {
    CountDownLatch pingFound=new CountDownLatch(1);
    Consumer<String> consumer=s -> {
      if (s != null && s.toLowerCase().contains("ping")) {
        pingFound.countDown();
      }
    }
;
    URL hystrix=new URL("http://localhost:" + serverPort + "/hystrix.stream");
    try (InputStream stream=consume(hystrix,consumer)){
      assertTrue(pingFound.await(5,TimeUnit.SECONDS));
    }
   }
  private InputStream consume(  URL url,  final Consumer<String> consumer) throws IOException {
    final InputStream stream=url.openConnection().getInputStream();
    new Thread(){
      @Override public void run(){
        try (BufferedReader reader=new BufferedReader(new InputStreamReader(stream))){
          String line;
          while ((line=reader.readLine()) != null) {
            consumer.accept(line);
          }
        }
 catch (        IOException ex) {
          LOG.error("Consumer thread is terminating",ex);
        }
      }
    }
.start();
    return stream;
  }
}
