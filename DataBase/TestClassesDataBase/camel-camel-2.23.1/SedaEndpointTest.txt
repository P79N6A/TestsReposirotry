/** 
 * @version 
 */
public class SedaEndpointTest extends ContextTestSupport {
  private BlockingQueue<Exchange> queue=new ArrayBlockingQueue<>(1000);
  @Test public void testSedaEndpointUnboundedQueue() throws Exception {
    BlockingQueue<Exchange> unbounded=new LinkedBlockingQueue<>();
    SedaEndpoint seda=new SedaEndpoint("seda://foo",context.getComponent("seda"),unbounded);
    assertNotNull(seda);
    assertEquals(Integer.MAX_VALUE,seda.getSize());
    assertSame(unbounded,seda.getQueue());
    assertEquals(1,seda.getConcurrentConsumers());
    Producer prod=seda.createProducer();
    seda.onStarted((SedaProducer)prod);
    assertEquals(1,seda.getProducers().size());
    Consumer cons=seda.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    seda.onStarted((SedaConsumer)cons);
    assertEquals(1,seda.getConsumers().size());
    assertEquals(0,seda.getExchanges().size());
  }
  @Test public void testSedaEndpoint() throws Exception {
    SedaEndpoint seda=new SedaEndpoint("seda://foo",context.getComponent("seda"),queue);
    assertNotNull(seda);
    assertEquals(1000,seda.getSize());
    assertSame(queue,seda.getQueue());
    assertEquals(1,seda.getConcurrentConsumers());
    Producer prod=seda.createProducer();
    seda.onStarted((SedaProducer)prod);
    assertEquals(1,seda.getProducers().size());
    Consumer cons=seda.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    seda.onStarted((SedaConsumer)cons);
    assertEquals(1,seda.getConsumers().size());
    assertEquals(0,seda.getExchanges().size());
  }
  @Test public void testSedaEndpointTwo() throws Exception {
    SedaEndpoint seda=new SedaEndpoint("seda://foo",context.getComponent("seda"),queue,2);
    assertNotNull(seda);
    assertEquals(1000,seda.getSize());
    assertSame(queue,seda.getQueue());
    assertEquals(2,seda.getConcurrentConsumers());
    Producer prod=seda.createProducer();
    seda.onStarted((SedaProducer)prod);
    assertEquals(1,seda.getProducers().size());
    Consumer cons=seda.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    seda.onStarted((SedaConsumer)cons);
    assertEquals(1,seda.getConsumers().size());
    assertEquals(0,seda.getExchanges().size());
  }
  @Test public void testSedaEndpointSetQueue() throws Exception {
    SedaEndpoint seda=new SedaEndpoint();
    assertNotNull(seda);
    seda.setCamelContext(context);
    seda.setEndpointUriIfNotSpecified("seda://bar");
    assertNotNull(seda.getQueue());
    seda.setQueue(new ArrayBlockingQueue<Exchange>(1000));
    seda.setConcurrentConsumers(2);
    assertEquals(1000,seda.getSize());
    assertNotSame(queue,seda.getQueue());
    assertEquals(2,seda.getConcurrentConsumers());
    Producer prod=seda.createProducer();
    seda.onStarted((SedaProducer)prod);
    assertEquals(1,seda.getProducers().size());
    Consumer cons=seda.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    seda.onStarted((SedaConsumer)cons);
    assertEquals(1,seda.getConsumers().size());
    assertEquals(0,seda.getExchanges().size());
  }
  @Test public void testSedaConsumer() throws Exception {
    SedaEndpoint seda=context.getEndpoint("seda://foo",SedaEndpoint.class);
    Consumer consumer=seda.createConsumer(new Processor(){
      public void process(      Exchange exchange) throws Exception {
      }
    }
);
    assertSame(seda,consumer.getEndpoint());
    assertNotNull(consumer.toString());
  }
  @Test public void testSedaDefaultValue() throws Exception {
    SedaComponent sedaComponent=new SedaComponent();
    sedaComponent.setQueueSize(300);
    sedaComponent.setConcurrentConsumers(3);
    context.addComponent("seda",sedaComponent);
    SedaEndpoint seda=context.getEndpoint("seda://foo",SedaEndpoint.class);
    assertEquals(300,seda.getSize());
    assertEquals(3,seda.getConcurrentConsumers());
  }
}
