@RunWith(SpringRunner.class) @DirtiesContext @SpringBootApplication @SpringBootTest(classes={RemoteCacheManagerCustomizerOverrideTest.TestConfiguration.class},properties={"debug=false","infinispan.embedded.enabled=false","infinispan.remote.enabled=false","camel.component.infinispan.customizer.embedded-cache-manager.enabled=false","camel.component.infinispan.customizer.embedded-cache-manager.override=false","camel.component.infinispan.customizer.remote-cache-manager.enabled=true","camel.component.infinispan.customizer.remote-cache-manager.override=true"}) public class RemoteCacheManagerCustomizerOverrideTest {
  private static final RemoteCacheManager CACHE_MANAGER=CacheManagerCustomizerTestSupport.newRemoteCacheManagerInstance();
  @Autowired RemoteCacheManager cacheManager;
  @Autowired InfinispanComponent component;
  @Test public void testComponentConfiguration() throws Exception {
    Assert.assertNotNull(cacheManager);
    Assert.assertNotNull(component);
    Assert.assertNotNull(component.getCacheContainer());
    Assert.assertEquals(cacheManager,component.getCacheContainer());
  }
@Configuration @AutoConfigureAfter(CamelAutoConfiguration.class) @AutoConfigureBefore(InfinispanComponentAutoConfiguration.class) public static class TestConfiguration {
    @Order(Ordered.HIGHEST_PRECEDENCE) @Bean public ComponentCustomizer<InfinispanComponent> customizer(){
      return new ComponentCustomizer<InfinispanComponent>(){
        @Override public void customize(        InfinispanComponent component){
          component.setCacheContainer(CACHE_MANAGER);
        }
      }
;
    }
    @Bean public RemoteCacheManager remoteCacheManagerInstance(){
      return CacheManagerCustomizerTestSupport.newRemoteCacheManagerInstance();
    }
  }
}
