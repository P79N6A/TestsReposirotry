/** 
 * Unit test for the retry until predicate
 */
public class DefaultErrorHandlerRetryWhileTest extends ContextTestSupport {
  private static int invoked;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myRetryHandler",new MyRetryBean());
    return jndi;
  }
  @Test public void testRetryUntil() throws Exception {
    Object out=template.requestBody("direct:start","Hello World");
    assertEquals("Bye World",out);
    assertEquals(3,invoked);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(defaultErrorHandler().redeliveryDelay(0).retryWhile(method("myRetryHandler")));
        from("direct:start").process(new MyProcessor());
      }
    }
;
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      if (invoked < 3) {
        throw new MyFunctionalException("Sorry you cannot do this");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
public static class MyRetryBean {
    public boolean retry(){
      invoked++;
      return true;
    }
  }
}
