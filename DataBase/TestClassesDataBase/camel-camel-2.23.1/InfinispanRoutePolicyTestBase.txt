abstract class InfinispanRoutePolicyTestBase {
  private static final String CACHE_NAME="camel-route-policy";
  private static final String CACHE_KEY="route-policy";
  protected abstract BasicCacheContainer createCacheManager() throws Exception ;
  @Test public void testLeadership() throws Exception {
    BasicCacheContainer cacheManager=createCacheManager();
    InfinispanRoutePolicy policy1=InfinispanRoutePolicy.withManager(cacheManager);
    policy1.setLockMapName(CACHE_NAME);
    policy1.setLockKey(CACHE_KEY);
    policy1.setLockValue("route1");
    InfinispanRoutePolicy policy2=InfinispanRoutePolicy.withManager(cacheManager);
    policy2.setLockMapName(CACHE_NAME);
    policy2.setLockKey(CACHE_KEY);
    policy2.setLockValue("route2");
    CamelContext context=new DefaultCamelContext();
    try {
      context=new DefaultCamelContext();
      context.start();
      context.addRouteDefinition(RouteDefinition.fromUri("direct:r1").routePolicy(policy1).to("mock:p1"));
      for (int i=0; i < 10 && !policy1.isLeader(); i++) {
        Thread.sleep(250);
      }
      context.addRouteDefinition(RouteDefinition.fromUri("direct:r2").routePolicy(policy2).to("mock:p2"));
      Assert.assertTrue(policy1.isLeader());
      Assert.assertFalse(policy2.isLeader());
      policy1.shutdown();
      for (int i=0; i < 10 && !policy2.isLeader(); i++) {
        Thread.sleep(250);
      }
      Assert.assertFalse(policy1.isLeader());
      Assert.assertTrue(policy2.isLeader());
    }
  finally {
      ServiceHelper.stopService(context);
      if (cacheManager != null) {
        cacheManager.stop();
      }
    }
  }
}
