public class DropboxProducerGetSingleTest extends DropboxTestSupport {
  public static final String FILE_NAME="myFile.txt";
  public static final String CONTENT="Hi camels";
  @Before public void createFile() throws IOException {
    createFile(FILE_NAME,CONTENT);
  }
  @Test public void testCamelDropbox() throws Exception {
    test("direct:start");
  }
  @Test public void testCamelDropboxWithOptionInHeader() throws Exception {
    test("direct:start2");
  }
  private void test(  String endpoint) throws InterruptedException {
    template.sendBody(endpoint,null);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(1);
    mock.message(0).header(DropboxResultHeader.DOWNLOADED_FILE.name()).contains(String.format("%s/%s",workdir,FILE_NAME));
    mock.message(0).body(String.class).isEqualTo(CONTENT);
    mock.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").to("dropbox://get?accessToken={{accessToken}}&remotePath=" + workdir + "/"+ FILE_NAME).to("mock:result");
        from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH,constant(workdir + "/" + FILE_NAME)).to("dropbox://get?accessToken={{accessToken}}").to("mock:result");
      }
    }
;
  }
}
