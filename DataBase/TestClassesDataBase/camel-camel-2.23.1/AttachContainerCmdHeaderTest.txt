/** 
 * Validates Attach Container Request headers are applied properly
 */
public class AttachContainerCmdHeaderTest extends BaseDockerHeaderTest<AttachContainerCmd> {
  @Mock private AttachContainerCmd mockObject;
  @Mock private AttachContainerResultCallback callback;
  @Test public void attachContainerHeaderTest(){
    String containerId="9c09acd48a25";
    boolean stdOut=true;
    boolean stdErr=true;
    boolean followStream=false;
    boolean logs=true;
    boolean timestamps=true;
    Map<String,Object> headers=getDefaultParameters();
    headers.put(DockerConstants.DOCKER_CONTAINER_ID,containerId);
    headers.put(DockerConstants.DOCKER_FOLLOW_STREAM,followStream);
    headers.put(DockerConstants.DOCKER_STD_OUT,stdOut);
    headers.put(DockerConstants.DOCKER_STD_ERR,stdErr);
    headers.put(DockerConstants.DOCKER_TIMESTAMPS,timestamps);
    headers.put(DockerConstants.DOCKER_LOGS,logs);
    template.sendBodyAndHeaders("direct:in","",headers);
    Mockito.verify(dockerClient,Mockito.times(1)).attachContainerCmd(containerId);
    Mockito.verify(mockObject,Mockito.times(1)).withFollowStream(eq(followStream));
    Mockito.verify(mockObject,Mockito.times(1)).withLogs(eq(logs));
    Mockito.verify(mockObject,Mockito.times(1)).withStdErr(eq(stdErr));
    Mockito.verify(mockObject,Mockito.times(1)).withStdOut(eq(stdOut));
    Mockito.verify(mockObject,Mockito.times(1)).withTimestamps(eq(timestamps));
  }
  @Override protected void setupMocks(){
    Mockito.when(dockerClient.attachContainerCmd(anyString())).thenReturn(mockObject);
    Mockito.when(mockObject.exec(any())).thenReturn(callback);
    try {
      Mockito.when(callback.awaitCompletion()).thenReturn(callback);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  @Override protected DockerOperation getOperation(){
    return DockerOperation.ATTACH_CONTAINER;
  }
}
