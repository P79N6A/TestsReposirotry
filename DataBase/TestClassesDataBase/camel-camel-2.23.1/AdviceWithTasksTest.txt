/** 
 * Advice with tests
 */
public class AdviceWithTasksTest extends ContextTestSupport {
  @Test public void testUnknownId() throws Exception {
    try {
      context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
        @Override public void configure() throws Exception {
          weaveById("xxx").replace().to("mock:xxx");
        }
      }
);
      fail("Should hve thrown exception");
    }
 catch (    IllegalArgumentException e) {
      assertTrue(e.getMessage(),e.getMessage().startsWith("There are no outputs which matches: xxx in the route"));
    }
  }
  @Test public void testReplace() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveById("bar").replace().multicast().to("mock:a").to("mock:b");
      }
    }
);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:bar").expectedMessageCount(0);
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testRemove() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveById("bar").remove();
      }
    }
);
    getMockEndpoint("mock:foo").expectedMessageCount(1);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertTrue("Should have removed mock:bar endpoint",context.hasEndpoint("mock:bar") == null);
  }
  @Test public void testBefore() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveById("bar").before().to("mock:a").transform(constant("Bye World"));
      }
    }
);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAfter() throws Exception {
    context.getRouteDefinitions().get(0).adviceWith(context,new AdviceWithRouteBuilder(){
      @Override public void configure() throws Exception {
        weaveById("bar").after().to("mock:a").transform(constant("Bye World"));
      }
    }
);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("mock:foo").to("mock:bar").id("bar").to("mock:result");
      }
    }
;
  }
}
