/** 
 * @version 
 */
public class EventNotifierServiceStoppingFailedEventTest extends ContextTestSupport {
  private static List<EventObject> events=new ArrayList<>();
  private static String stopOrder;
  @Override @Before public void setUp() throws Exception {
    events.clear();
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext context=super.createCamelContext();
    context.addService(new MyService("A",false));
    context.addService(new MyService("B",true));
    context.addService(new MyService("C",false));
    context.getManagementStrategy().addEventNotifier(new EventNotifierSupport(){
      public void notify(      EventObject event) throws Exception {
        events.add(event);
      }
      public boolean isEnabled(      EventObject event){
        return true;
      }
      @Override protected void doStart() throws Exception {
      }
      @Override protected void doStop() throws Exception {
      }
    }
);
    return context;
  }
  @Test public void testStopWithFailure() throws Exception {
    stopOrder="";
    context.stop();
    assertEquals("CBA",stopOrder);
    assertEquals(5,events.size());
    assertIsInstanceOf(CamelContextStartingEvent.class,events.get(0));
    assertIsInstanceOf(CamelContextStartedEvent.class,events.get(1));
    assertIsInstanceOf(CamelContextStoppingEvent.class,events.get(2));
    ServiceStopFailureEvent event=assertIsInstanceOf(ServiceStopFailureEvent.class,events.get(3));
    assertIsInstanceOf(CamelContextStoppedEvent.class,events.get(4));
    assertEquals("Fail B",event.getCause().getMessage());
    assertEquals("Failure to stop service: B due to Fail B",event.toString());
  }
private static final class MyService implements Service {
    private String name;
    private boolean fail;
    private MyService(    String name,    boolean fail){
      this.name=name;
      this.fail=fail;
    }
    public void start() throws Exception {
    }
    public void stop() throws Exception {
      stopOrder=stopOrder + name;
      if (fail) {
        throw new IllegalArgumentException("Fail " + name);
      }
    }
    @Override public String toString(){
      return name;
    }
  }
}
