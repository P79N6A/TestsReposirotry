public class HttpProxyMojoIntegrationTest extends CamelSalesforceMojoIntegrationTest {
  private static final String HTTP_PROXY_PASSWORD="camel-user-password";
  private static final String HTTP_PROXY_REALM="proxy-realm";
  private static final String HTTP_PROXY_USER_NAME="camel-user";
  private int httpProxyPort;
  private HttpProxyServer proxy;
  @Before public void startProxy(){
    httpProxyPort=AvailablePortFinder.getNextAvailable();
    proxy=DefaultHttpProxyServer.bootstrap().withPort(httpProxyPort).withProxyAuthenticator(new ProxyAuthenticator(){
      @Override public String getRealm(){
        return HTTP_PROXY_REALM;
      }
      @Override public boolean authenticate(      String userName,      String password){
        return HTTP_PROXY_USER_NAME.equals(userName) && HTTP_PROXY_PASSWORD.equals(password);
      }
    }
).start();
  }
  @After public void stopProxy(){
    proxy.stop();
  }
  @Override protected GenerateMojo createMojo() throws IOException {
    final GenerateMojo mojo=super.createMojo();
    mojo.httpProxyHost="localhost";
    mojo.httpProxyPort=httpProxyPort;
    mojo.httpProxyUsername=HTTP_PROXY_USER_NAME;
    mojo.httpProxyPassword=HTTP_PROXY_PASSWORD;
    mojo.httpProxyRealm=HTTP_PROXY_REALM;
    mojo.isHttpProxySecure=false;
    mojo.httpProxyAuthUri=String.format("http://localhost:%s",httpProxyPort);
    mojo.httpClientProperties=new HashMap<>();
    mojo.httpClientProperties.put("timeout","60000");
    mojo.httpClientProperties.put("removeIdleDestinations","true");
    return mojo;
  }
}
