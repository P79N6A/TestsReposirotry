/** 
 * This not only set SimpleTrigger as a timer endpoint in a route, and also test the trigger.XXX properties setter.
 * @version 
 */
public class QuartzSimpleRouteTest extends BaseQuartzTest {
  @Test public void testQuartzCronRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(3);
    assertMockEndpointsSatisfied();
    Trigger trigger=mock.getReceivedExchanges().get(0).getIn().getHeader("trigger",Trigger.class);
    Assert.assertThat(trigger instanceof SimpleTrigger,CoreMatchers.is(true));
    JobDetail detail=mock.getReceivedExchanges().get(0).getIn().getHeader("jobDetail",JobDetail.class);
    Assert.assertThat(detail.getJobClass().equals(CamelJob.class),CoreMatchers.is(true));
    Assert.assertThat(detail.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE).equals("simple"),CoreMatchers.is(true));
    Assert.assertThat(detail.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_COUNTER).equals(-1),CoreMatchers.is(true));
    Assert.assertThat(detail.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_INTERVAL).equals(2000L),CoreMatchers.is(true));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("quartz2://myGroup/myTimerName?trigger.repeatInterval=2000&trigger.repeatCount=-1").to("mock:result");
      }
    }
;
  }
}
