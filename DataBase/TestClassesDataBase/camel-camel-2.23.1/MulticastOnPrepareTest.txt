/** 
 */
public class MulticastOnPrepareTest extends ContextTestSupport {
  @Test public void testMulticastOnPrepare() throws Exception {
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:a").message(0).body(String.class).isEqualTo("1 Tony the Tiger");
    getMockEndpoint("mock:b").expectedMessageCount(1);
    getMockEndpoint("mock:b").message(0).body(String.class).isEqualTo("1 Tiger");
    template.sendBody("direct:start",new Animal(1,"Tiger"));
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").multicast().onPrepare(new AnimalDeepClonePrepare()).to("direct:a").to("direct:b");
        from("direct:a").process(new ProcessorA()).to("mock:a");
        from("direct:b").process(new ProcessorB()).to("mock:b");
      }
    }
;
  }
public static class ProcessorA implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Animal body=exchange.getIn().getBody(Animal.class);
      assertEquals(1,body.getId());
      assertEquals("Tiger",body.getName());
      body.setName("Tony the Tiger");
    }
  }
public static class ProcessorB implements Processor {
    @Override public void process(    Exchange exchange) throws Exception {
      Animal body=exchange.getIn().getBody(Animal.class);
      assertEquals(1,body.getId());
      assertEquals("Tiger",body.getName());
    }
  }
}
