/** 
 * Jms with JDBC idempotent consumer test.
 */
public class FromJmsToJdbcIdempotentConsumerToJmsTest extends CamelSpringTestSupport {
  protected JdbcTemplate jdbcTemplate;
  protected DataSource dataSource;
  @Override protected AbstractApplicationContext createApplicationContext(){
    ITestSupport.getPort2();
    return new ClassPathXmlApplicationContext("org/apache/camel/itest/sql/FromJmsToJdbcIdempotentConsumerToJmsTest.xml");
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    dataSource=context.getRegistry().lookupByNameAndType(getDatasourceName(),DataSource.class);
    jdbcTemplate=new JdbcTemplate(dataSource);
    jdbcTemplate.afterPropertiesSet();
    getMockEndpoint("mock:a").setResultWaitTime(30000);
    getMockEndpoint("mock:b").setResultWaitTime(30000);
  }
  protected String getDatasourceName(){
    return "myNonXADataSource";
  }
  @Test public void testJmsToJdbcJmsCommit() throws Exception {
    checkInitialState();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(1).create();
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedMessageCount(1);
    template.sendBodyAndHeader("activemq2:queue:inbox","A","uid",123);
    assertMockEndpointsSatisfied();
    assertTrue("Should complete 1 message",notify.matchesMockWaitTime());
    assertEquals(new Integer(1),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    Object out=consumer.receiveBody("activemq2:queue:outbox",3000);
    assertEquals("DONE-A",out);
  }
  @Ignore("see the TODO below") @Test public void testJmsToJdbcJmsRollbackAtA() throws Exception {
    checkInitialState();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(7).create();
    getMockEndpoint("mock:a").expectedMessageCount(7);
    getMockEndpoint("mock:a").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new ConnectException("Forced cannot connect to database");
      }
    }
);
    getMockEndpoint("mock:b").expectedMessageCount(0);
    template.sendBodyAndHeader("activemq2:queue:inbox","A","uid",123);
    assertMockEndpointsSatisfied();
    assertTrue("Should complete 7 message",notify.matchesMockWaitTime());
    assertEquals(new Integer(0),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    assertNull(consumer.receiveBody("activemq2:queue:outbox",3000));
    assertEquals("A",consumer.receiveBody("activemq2:queue:ActiveMQ.DLQ",3000));
  }
  @Ignore("see the TODO below") @Test public void testJmsToJdbcJmsRollbackAtB() throws Exception {
    checkInitialState();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(7).create();
    getMockEndpoint("mock:a").expectedMessageCount(7);
    getMockEndpoint("mock:b").expectedMessageCount(7);
    getMockEndpoint("mock:b").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        throw new ConnectException("Forced cannot send to AMQ queue");
      }
    }
);
    template.sendBodyAndHeader("activemq2:queue:inbox","B","uid",456);
    assertMockEndpointsSatisfied();
    assertTrue("Should complete 7 messages",notify.matchesMockWaitTime());
    assertEquals(new Integer(0),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    assertNull(consumer.receiveBody("activemq2:queue:outbox",3000));
    assertEquals("B",consumer.receiveBody("activemq2:queue:ActiveMQ.DLQ",3000));
  }
  @Test public void testFilterIdempotent() throws Exception {
    checkInitialState();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(3).create();
    getMockEndpoint("mock:a").expectedMessageCount(3);
    getMockEndpoint("mock:b").expectedMessageCount(2);
    template.sendBodyAndHeader("activemq2:queue:inbox","D","uid",111);
    template.sendBodyAndHeader("activemq2:queue:inbox","E","uid",222);
    template.sendBodyAndHeader("activemq2:queue:inbox","D","uid",111);
    assertMockEndpointsSatisfied();
    assertTrue("Should complete 3 messages",notify.matchesMockWaitTime());
    assertEquals(new Integer(2),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    assertEquals("DONE-D",consumer.receiveBody("activemq2:queue:outbox",3000));
    assertEquals("DONE-E",consumer.receiveBody("activemq2:queue:outbox",3000));
  }
  @Test public void testRetryAfterException() throws Exception {
    checkInitialState();
    final AtomicInteger counter=new AtomicInteger();
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(4).create();
    getMockEndpoint("mock:a").expectedMessageCount(4);
    getMockEndpoint("mock:b").expectedMessageCount(4);
    getMockEndpoint("mock:b").whenAnyExchangeReceived(new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        if (counter.getAndIncrement() == 1) {
          throw new ConnectException("Forced cannot send to AMQ queue");
        }
      }
    }
);
    template.sendBodyAndHeader("activemq2:queue:inbox","D","uid",111);
    template.sendBodyAndHeader("activemq2:queue:inbox","E","uid",222);
    template.sendBodyAndHeader("activemq2:queue:inbox","F","uid",333);
    assertMockEndpointsSatisfied();
    assertTrue("Should complete 4 messages",notify.matchesMockWaitTime());
    assertEquals(new Integer(3),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    assertEquals("DONE-D",consumer.receiveBody("activemq2:queue:outbox",3000));
    assertEquals("DONE-E",consumer.receiveBody("activemq2:queue:outbox",3000));
    assertEquals("DONE-F",consumer.receiveBody("activemq2:queue:outbox",3000));
  }
  protected void checkInitialState(){
    assertEquals(new Integer(0),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
    assertNull(consumer.receiveBody("activemq2:queue:outbox",2000));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        IdempotentRepository<?> repository=context.getRegistry().lookupByNameAndType("messageIdRepository",IdempotentRepository.class);
        from("activemq2:queue:inbox").transacted("required").to("mock:a").idempotentConsumer(header("uid"),repository).to("mock:b").transform(simple("DONE-${body}")).to("activemq2:queue:outbox");
      }
    }
;
  }
}
