/** 
 * @version 
 */
public class SplitterWithMulticastTest extends ContextTestSupport {
  @Test public void testSplitterWithMulticast() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C");
    getMockEndpoint("mock:result").allMessages().header("bar").isNull();
    getMockEndpoint("mock:result").allMessages().header("foo").isNull();
    getMockEndpoint("mock:split").expectedBodiesReceived("A","B","C");
    getMockEndpoint("mock:split").expectedHeaderReceived("bar",123);
    getMockEndpoint("mock:split").allMessages().header("foo").isNull();
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).multicast().setHeader("foo",constant("ABC")).setHeader("bar",constant(123)).end().to("log:split?showHeaders=true","mock:split").end().to("log:result?showHeaders=true","mock:result");
      }
    }
;
  }
}
