public class JGroupsClusterTest extends Assert {
  String master;
  int nominationCount;
  String jgroupsEndpoint=format("jgroups:%s?enableViewMessages=true",randomUUID());
  DefaultCamelContext firstCamelContext;
  DefaultCamelContext secondCamelContext;
class Builder extends RouteBuilder {
    @Override public void configure() throws Exception {
      from(jgroupsEndpoint).filter(dropNonCoordinatorViews()).process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          String camelContextName=exchange.getContext().getName();
          if (!camelContextName.equals(master)) {
            master=camelContextName;
            nominationCount++;
          }
        }
      }
);
    }
  }
  @Before public void setUp() throws Exception {
    firstCamelContext=new DefaultCamelContext();
    firstCamelContext.setName("firstNode");
    firstCamelContext.addRoutes(new Builder());
    secondCamelContext=new DefaultCamelContext();
    secondCamelContext.setName("secondNode");
    secondCamelContext.addRoutes(new Builder());
  }
  @Test public void shouldElectSecondNode() throws Exception {
    firstCamelContext.start();
    String firstMaster=master;
    secondCamelContext.start();
    firstCamelContext.stop();
    String secondMaster=master;
    secondCamelContext.stop();
    assertEquals(firstCamelContext.getName(),firstMaster);
    assertEquals(secondCamelContext.getName(),secondMaster);
    assertEquals(2,nominationCount);
  }
  @Test public void shouldKeepMaster() throws Exception {
    firstCamelContext.start();
    String firstMaster=master;
    secondCamelContext.start();
    secondCamelContext.stop();
    String secondMaster=master;
    firstCamelContext.stop();
    assertEquals(firstCamelContext.getName(),firstMaster);
    assertEquals(firstCamelContext.getName(),secondMaster);
    assertEquals(1,nominationCount);
  }
  @Test public void shouldElectSecondNodeAndReturnToFirst() throws Exception {
    firstCamelContext.start();
    String firstMaster=master;
    secondCamelContext.start();
    firstCamelContext.stop();
    String secondMaster=master;
    firstCamelContext.start();
    String masterAfterRestartOfFirstNode=master;
    secondCamelContext.stop();
    String finalMaster=master;
    firstCamelContext.stop();
    assertEquals(firstCamelContext.getName(),firstMaster);
    assertEquals(secondCamelContext.getName(),secondMaster);
    assertEquals(secondCamelContext.getName(),masterAfterRestartOfFirstNode);
    assertEquals(firstCamelContext.getName(),finalMaster);
    assertEquals(3,nominationCount);
  }
}
