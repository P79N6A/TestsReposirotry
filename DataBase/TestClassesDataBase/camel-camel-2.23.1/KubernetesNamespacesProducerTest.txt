public class KubernetesNamespacesProducerTest extends KubernetesTestSupport {
  @Rule public KubernetesServer server=new KubernetesServer();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=super.createRegistry();
    registry.bind("kubernetesClient",server.getClient());
    return registry;
  }
  @Test public void listTest() throws Exception {
    server.expect().withPath("/api/v1/namespaces").andReturn(200,new NamespaceListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once();
    List<Namespace> result=template.requestBody("direct:list","",List.class);
    assertEquals(3,result.size());
  }
  @Test public void getNamespace() throws Exception {
    ObjectMeta meta=new ObjectMeta();
    meta.setName("test");
    server.expect().withPath("/api/v1/namespaces/test").andReturn(200,new NamespaceBuilder().withMetadata(meta).build()).once();
    Exchange ex=template.request("direct:getNs",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
      }
    }
);
    Namespace ns=ex.getOut().getBody(Namespace.class);
    assertEquals(ns.getMetadata().getName(),"test");
  }
  @Test public void createAndDeleteNamespace() throws Exception {
    Namespace ns1=new NamespaceBuilder().withNewMetadata().withName("ns1").endMetadata().build();
    server.expect().withPath("/api/v1/namespaces/ns1").andReturn(200,ns1).once();
    Exchange ex=template.request("direct:deleteNamespace",new Processor(){
      @Override public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"ns1");
      }
    }
);
    boolean nsDeleted=ex.getOut().getBody(Boolean.class);
    assertTrue(nsDeleted);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:list").to("kubernetes-namespaces:///?kubernetesClient=#kubernetesClient&operation=listNamespaces");
        from("direct:getNs").to("kubernetes-namespaces:///?kubernetesClient=#kubernetesClient&operation=getNamespace");
        from("direct:deleteNamespace").to("kubernetes-namespaces:///?kubernetesClient=#kubernetesClient&operation=deleteNamespace");
      }
    }
;
  }
}
