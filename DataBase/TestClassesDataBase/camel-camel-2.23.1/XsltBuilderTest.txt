/** 
 * @version 
 */
public class XsltBuilderTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/xslt");
    createDirectory("target/xslt");
    super.setUp();
  }
  @Test public void testXsltUrl() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltTransformerUrl() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=new XsltBuilder();
    builder.setTransformerURL(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltFile() throws Exception {
    File styleSheet=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltTransformerFile() throws Exception {
    File styleSheet=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    XsltBuilder builder=new XsltBuilder();
    builder.setTransformerFile(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltInputStream() throws Exception {
    File styleSheet=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(Files.newInputStream(Paths.get(styleSheet.getAbsolutePath())));
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltTransformerInputStream() throws Exception {
    File styleSheet=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    XsltBuilder builder=new XsltBuilder();
    builder.setTransformerInputStream(Files.newInputStream(Paths.get(styleSheet.getAbsolutePath())));
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltSource() throws Exception {
    File file=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    Source styleSheet=new SAXSource(new InputSource(Files.newInputStream(Paths.get(file.getAbsolutePath()))));
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltTemplates() throws Exception {
    File file=new File("src/test/resources/org/apache/camel/builder/xml/example.xsl");
    Source source=new SAXSource(new InputSource(Files.newInputStream(Paths.get(file.getAbsolutePath()))));
    XmlConverter converter=new XmlConverter();
    Templates styleSheet=converter.getTransformerFactory().newTemplates(source);
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltOutputString() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet).outputString();
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertIsInstanceOf(String.class,exchange.getOut().getBody());
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltOutputBytes() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet).outputBytes();
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertIsInstanceOf(byte[].class,exchange.getOut().getBody());
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody(String.class));
  }
  @Test public void testXsltOutputDOM() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet).outputDOM();
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertIsInstanceOf(Document.class,exchange.getOut().getBody());
    assertEquals("<goodbye>world!</goodbye>",exchange.getOut().getBody(String.class));
  }
  @Test public void testXsltOutputFile() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet).outputFile();
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    exchange.getIn().setHeader(Exchange.XSLT_FILE_NAME,"target/xslt/xsltout.xml");
    builder.process(exchange);
    assertIsInstanceOf(File.class,exchange.getOut().getBody());
    File file=new File("target/xslt/xsltout.xml");
    assertTrue("Output file should exist",file.exists());
    String body=exchange.getOut().getBody(String.class);
    assertTrue(body.endsWith("<goodbye>world!</goodbye>"));
  }
  @Test public void testXsltOutputFileDelete() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet).outputFile().deleteOutputFile();
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    exchange.getIn().setHeader(Exchange.XSLT_FILE_NAME,"target/xslt/xsltout.xml");
    builder.process(exchange);
    assertIsInstanceOf(File.class,exchange.getOut().getBody());
    File file=new File("target/xslt/xsltout.xml");
    assertTrue("Output file should exist",file.exists());
    String body=exchange.getOut().getBody(String.class);
    assertTrue(body.endsWith("<goodbye>world!</goodbye>"));
    List<Synchronization> onCompletions=exchange.handoverCompletions();
    UnitOfWorkHelper.doneSynchronizations(exchange,onCompletions,log);
    assertFalse("Output file should be deleted",file.exists());
  }
  @Test public void testXsltSetConverter() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    XmlConverter converter=new XmlConverter();
    builder.setConverter(converter);
    assertSame(converter,builder.getConverter());
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody());
  }
  @Test public void testXsltResultHandler() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    assertNotNull(builder.getResultHandlerFactory());
    builder.outputBytes();
    assertIsInstanceOf(StreamResultHandlerFactory.class,builder.getResultHandlerFactory());
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody("<hello>world!</hello>");
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>",exchange.getOut().getBody(String.class));
  }
  @Test public void testNullBodyDefault() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(null);
    try {
      builder.process(exchange);
      fail("Should thrown an exception");
    }
 catch (    ExpectedBodyTypeException e) {
    }
  }
  @Test public void testFailNullBody() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    builder.setFailOnNullBody(true);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(null);
    try {
      builder.process(exchange);
      fail("Should thrown an exception");
    }
 catch (    ExpectedBodyTypeException e) {
    }
  }
  @Test public void testNotFailNullBody() throws Exception {
    URL styleSheet=getClass().getResource("example.xsl");
    XsltBuilder builder=XsltBuilder.xslt(styleSheet);
    builder.setFailOnNullBody(false);
    Exchange exchange=new DefaultExchange(context);
    exchange.getIn().setBody(null);
    builder.process(exchange);
    assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye/>",exchange.getOut().getBody(String.class));
  }
}
