/** 
 * @version 
 */
public class EnricherRouteNumberOfProcessorTest extends ContextTestSupport {
  private static volatile boolean failed;
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testOneProcesssor() throws Exception {
    failed=false;
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").enrich("direct:enrich",new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String body=newExchange.getIn().getBody(String.class);
            assertNotNull(body);
            return newExchange;
          }
        }
).to("mock:foo").end().to("mock:result");
        from("direct:enrich").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertFalse("Should not have out",failed);
            String s=exchange.getIn().getBody(String.class);
            exchange.getIn().setBody("Hi " + s);
          }
        }
);
      }
    }
);
    context.start();
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hi Claus");
    getMockEndpoint("mock:foo").expectedHeaderReceived("id",1);
    template.requestBodyAndHeader("direct:start","Claus","id",1);
    assertMockEndpointsSatisfied();
  }
  @Test public void testThreeProcesssors() throws Exception {
    failed=false;
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").enrich("direct:enrich",new AggregationStrategy(){
          public Exchange aggregate(          Exchange oldExchange,          Exchange newExchange){
            if (oldExchange == null) {
              return newExchange;
            }
            String body=newExchange.getIn().getBody(String.class);
            assertNotNull(body);
            return newExchange;
          }
        }
).to("mock:foo").end().to("mock:result");
        from("direct:enrich").pipeline("log:a","log:b").to("log:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            assertFalse("Should not have out",failed);
            String s=exchange.getIn().getBody(String.class);
            exchange.getIn().setBody("Hi " + s);
          }
        }
);
      }
    }
);
    context.start();
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hi Claus");
    getMockEndpoint("mock:foo").expectedHeaderReceived("id",1);
    template.requestBodyAndHeader("direct:start","Claus","id",1);
    assertMockEndpointsSatisfied();
  }
}
