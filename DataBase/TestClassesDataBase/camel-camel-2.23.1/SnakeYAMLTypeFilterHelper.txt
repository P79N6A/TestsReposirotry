public final class SnakeYAMLTypeFilterHelper {
  private SnakeYAMLTypeFilterHelper(){
  }
  static void testSafeConstructor(  ProducerTemplate template) throws Exception {
    try {
      template.sendBody("direct:safe-constructor","!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
      fail("As SnakeYAML uses SafeConstructor, custom types should not be allowed");
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ConstructorException);
    }
  }
  static void testTypeConstructor(  ProducerTemplate template) throws Exception {
    Object result=template.requestBody("direct:type-constructor","!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
    assertNotNull(result);
    assertTrue(result instanceof TestPojo);
    try {
      template.sendBody("direct:type-constructor","!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
      fail("As SnakeYAML filters class is can unmarshall, UnsafePojo should not be allowed");
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ConstructorException);
      assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
    }
  }
  static void testTypeConstructorFromDefinition(  ProducerTemplate template) throws Exception {
    Object result;
    result=template.requestBody("direct:type-constructor-strdef","!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
    assertNotNull(result);
    assertTrue(result instanceof TestPojo);
    result=template.requestBody("direct:type-constructor-strdef","!!org.apache.camel.component.snakeyaml.model.RexPojo {name: Camel}");
    assertNotNull(result);
    assertTrue(result instanceof RexPojo);
    try {
      template.sendBody("direct:type-constructor-strdef","!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
      fail("As SnakeYAML filters class is can unmarshall, UnsafePojo should not be allowed");
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ConstructorException);
      assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
    }
  }
  static void testAllowAllConstructor(  ProducerTemplate template) throws Exception {
    Object testPojo=template.requestBody("direct:all-constructor","!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
    assertNotNull(testPojo);
    assertTrue(testPojo instanceof TestPojo);
    Object unsafePojo=template.requestBody("direct:all-constructor","!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
    assertNotNull(unsafePojo);
    assertTrue(unsafePojo instanceof UnsafePojo);
  }
}
