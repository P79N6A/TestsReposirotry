public class NettySharedHttpServerTest extends BaseNettyTest {
  private NettySharedHttpServer nettySharedHttpServer;
  @Override protected JndiRegistry createRegistry() throws Exception {
    nettySharedHttpServer=new DefaultNettySharedHttpServer();
    nettySharedHttpServer.setClassResolver(new DefaultClassResolver(context));
    NettySharedHttpServerBootstrapConfiguration configuration=new NettySharedHttpServerBootstrapConfiguration();
    configuration.setPort(getPort());
    configuration.setHost("localhost");
    configuration.setBacklog(20);
    configuration.setKeepAlive(true);
    configuration.setCompression(true);
    nettySharedHttpServer.setNettyServerBootstrapConfiguration(configuration);
    nettySharedHttpServer.start();
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myNettyServer",nettySharedHttpServer);
    return jndi;
  }
  @Override @After public void tearDown() throws Exception {
    nettySharedHttpServer.stop();
    super.tearDown();
  }
  @Test public void testTwoRoutes() throws Exception {
    getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello Camel");
    String out=template.requestBody("netty4-http:http://localhost:{{port}}/foo","Hello World",String.class);
    assertEquals("Bye World",out);
    out=template.requestBody("netty4-http:http://localhost:{{port}}/bar","Hello Camel",String.class);
    assertEquals("Bye Camel",out);
    assertEquals(2,nettySharedHttpServer.getConsumersSize());
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4-http:http://localhost/foo?nettySharedHttpServer=#myNettyServer").log("Foo route using thread ${threadName}").to("mock:foo").transform().constant("Bye World");
        from("netty4-http:http://localhost/bar?nettySharedHttpServer=#myNettyServer").log("Bar route using thread ${threadName}").to("mock:bar").transform().constant("Bye Camel");
      }
    }
;
  }
}
