public class CsvUnmarshalTwoCsvDataFormatConcurrentTest extends CamelTestSupport {
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @EndpointInject(uri="mock:result2") private MockEndpoint result2;
  @Test public void testCsvUnMarshal() throws Exception {
    result.expectedMessageCount(1);
    result2.expectedMessageCount(1);
    sendAndVerify("|",result);
    resetMocks();
    result.expectedMessageCount(1);
    result2.expectedMessageCount(1);
    sendAndVerify(";",result2);
  }
  private void sendAndVerify(  String delimiter,  MockEndpoint mock) throws InterruptedException {
    template.sendBody("direct:start","123" + delimiter + "Camel in Action"+ delimiter+ "1\n124"+ delimiter+ "ActiveMQ in Action"+ delimiter+ "2");
    assertMockEndpointsSatisfied();
    @SuppressWarnings("unchecked") List<List<String>> body=mock.getReceivedExchanges().get(0).getIn().getBody(List.class);
    assertEquals(2,body.size());
    assertEquals("123",body.get(0).get(0));
    assertEquals("Camel in Action",body.get(0).get(1));
    assertEquals("1",body.get(0).get(2));
    assertEquals("124",body.get(1).get(0));
    assertEquals("ActiveMQ in Action",body.get(1).get(1));
    assertEquals("2",body.get(1).get(2));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        CsvDataFormat csv=new CsvDataFormat().setDelimiter('|');
        CsvDataFormat csv2=new CsvDataFormat().setDelimiter(';');
        from("direct:start").multicast().parallelProcessing().to("direct:csv","direct:csv2");
        from("direct:csv").unmarshal(csv).to("mock:result");
        from("direct:csv2").unmarshal(csv2).to("mock:result2");
      }
    }
;
  }
}
