/** 
 * Testing CAMEL-3139
 * @version 
 */
public class AggregateNewExchangeAndConfirmTest extends ContextTestSupport {
  private MyRepo repo=new MyRepo();
  @Test public void testAggregateNewExchangeAndConfirm() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:aggregated");
    mock.expectedBodiesReceived("ABC");
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    assertMockEndpointsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).until(() -> repo.getId() != null);
    assertEquals(mock.getReceivedExchanges().get(0).getExchangeId(),repo.getId());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyNewExchangeAggregationStrategy()).aggregationRepository(repo).completionSize(3).to("mock:aggregated");
      }
    }
;
  }
private class MyNewExchangeAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      String body="";
      if (oldExchange != null) {
        body=oldExchange.getIn().getBody(String.class);
      }
      body+=newExchange.getIn().getBody(String.class);
      newExchange.getIn().setBody(body);
      return newExchange;
    }
  }
private class MyRepo extends MemoryAggregationRepository {
    private String id;
    @Override public void confirm(    CamelContext camelContext,    String exchangeId){
      log.info("Confirmed id: " + exchangeId);
      this.id=exchangeId;
    }
    public String getId(){
      return id;
    }
  }
}
