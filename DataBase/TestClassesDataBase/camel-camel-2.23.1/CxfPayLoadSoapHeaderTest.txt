public class CxfPayLoadSoapHeaderTest extends CxfPayLoadSoapHeaderTestAbstract {
  private final QName serviceName=new QName("http://camel.apache.org/pizza","PizzaService");
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(getRouterEndpointURI()).process(new Processor(){
          @SuppressWarnings("unchecked") public void process(          Exchange exchange) throws Exception {
            CxfPayload<SoapHeader> payload=exchange.getIn().getBody(CxfPayload.class);
            List<Source> elements=payload.getBodySources();
            assertNotNull("We should get the elements here",elements);
            assertEquals("Get the wrong elements size",1,elements.size());
            Element el=new XmlConverter().toDOMElement(elements.get(0));
            elements.set(0,new DOMSource(el));
            assertEquals("Get the wrong namespace URI","http://camel.apache.org/pizza/types",el.getNamespaceURI());
            List<SoapHeader> headers=payload.getHeaders();
            assertNotNull("We should get the headers here",headers);
            assertEquals("Get the wrong headers size",headers.size(),1);
            assertEquals("Get the wrong namespace URI",((Element)(headers.get(0).getObject())).getNamespaceURI(),"http://camel.apache.org/pizza/types");
            headers=exchange.getIn().getHeader(Header.HEADER_LIST,List.class);
            assertNotNull("We should get the headers here",headers);
            assertEquals("Get the wrong headers size",headers.size(),1);
            assertEquals("Get the wrong namespace URI",((Element)(headers.get(0).getObject())).getNamespaceURI(),"http://camel.apache.org/pizza/types");
          }
        }
).to(getServiceEndpointURI());
      }
    }
;
  }
  @Test public void testPizzaService(){
    Pizza port=getPort();
    OrderPizzaType req=new OrderPizzaType();
    ToppingsListType t=new ToppingsListType();
    t.getTopping().add("test");
    req.setToppings(t);
    CallerIDHeaderType header=new CallerIDHeaderType();
    header.setName("Willem");
    header.setPhoneNumber("108");
    OrderPizzaResponseType res=port.orderPizza(req,header);
    assertEquals(208,res.getMinutesUntilReady());
  }
  private Pizza getPort(){
    URL wsdl=getClass().getResource("/pizza_service.wsdl");
    assertNotNull("WSDL is null",wsdl);
    PizzaService service=new PizzaService(wsdl,serviceName);
    assertNotNull("Service is null ",service);
    Pizza pizza=service.getPizzaPort();
    ((BindingProvider)pizza).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,"http://localhost:" + port1 + "/"+ getClass().getSimpleName()+ "/pizza_service/services/PizzaService");
    return pizza;
  }
}
