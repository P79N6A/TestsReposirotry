/** 
 * @version 
 */
public class DynamicRouterExchangePropertiesTest extends ContextTestSupport {
  private static List<String> bodies=new ArrayList<>();
  @Test public void testDynamicRouter() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:a").expectedPropertyReceived("invoked",1);
    getMockEndpoint("mock:b").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:b").expectedPropertyReceived("invoked",2);
    getMockEndpoint("mock:c").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:c").expectedPropertyReceived("invoked",2);
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:foo").expectedPropertyReceived("invoked",3);
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").expectedPropertyReceived("invoked",4);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertEquals(5,bodies.size());
    assertEquals("Hello World",bodies.get(0));
    assertEquals("Hello World",bodies.get(1));
    assertEquals("Hello World",bodies.get(2));
    assertEquals("Bye World",bodies.get(3));
    assertEquals("Bye World",bodies.get(4));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").dynamicRouter(method(DynamicRouterExchangePropertiesTest.class,"slip"));
        from("direct:foo").transform(constant("Bye World")).to("mock:foo");
      }
    }
;
  }
  /** 
 * Use this method to compute dynamic where we should route next.
 * @param body the message body
 * @param properties the exchange properties where we can store state between invocations
 * @return endpoints to go, or <tt>null</tt> to indicate the end
 */
  public String slip(  String body,  @ExchangeProperties Map<String,Object> properties){
    bodies.add(body);
    int invoked=0;
    Object current=properties.get("invoked");
    if (current != null) {
      invoked=Integer.valueOf(current.toString());
    }
    invoked++;
    properties.put("invoked",invoked);
    if (invoked == 1) {
      return "mock:a";
    }
 else     if (invoked == 2) {
      return "mock:b,mock:c";
    }
 else     if (invoked == 3) {
      return "direct:foo";
    }
 else     if (invoked == 4) {
      return "mock:result";
    }
    return null;
  }
}
