private class GroupCondition implements GroupListener<NodeState> {
  private CountDownLatch connected=new CountDownLatch(1);
  private CountDownLatch master=new CountDownLatch(1);
  private CountDownLatch disconnected=new CountDownLatch(1);
  @Override public void groupEvent(  Group<NodeState> group,  GroupEvent event){
switch (event) {
case CONNECTED:
case CHANGED:
      connected.countDown();
    if (group.isMaster()) {
      master.countDown();
    }
  break;
case DISCONNECTED:
disconnected.countDown();
break;
default :
}
}
public boolean waitForConnected(long time,TimeUnit timeUnit) throws InterruptedException {
return connected.await(time,timeUnit);
}
public boolean waitForDisconnected(long time,TimeUnit timeUnit) throws InterruptedException {
return disconnected.await(time,timeUnit);
}
public boolean waitForMaster(long time,TimeUnit timeUnit) throws InterruptedException {
return master.await(time,timeUnit);
}
}
