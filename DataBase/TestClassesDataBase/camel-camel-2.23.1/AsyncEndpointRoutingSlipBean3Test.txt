/** 
 * @version 
 */
public class AsyncEndpointRoutingSlipBean3Test extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myBean",new MyRoutingSlipBean());
    return jndi;
  }
  @Test public void testAsyncEndpoint() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).bean("myBean");
        from("direct:foo").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
            String body=exchange.getIn().getBody(String.class);
            assertEquals("Hi World",body);
            exchange.getOut().setBody("Bye Camel");
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
public static class MyRoutingSlipBean {
    @RoutingSlip public String doSomething(){
      return "async:hi:world,direct:foo";
    }
  }
}
