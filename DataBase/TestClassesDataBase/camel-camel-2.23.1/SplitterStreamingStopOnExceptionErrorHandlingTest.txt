/** 
 * @version 
 */
public class SplitterStreamingStopOnExceptionErrorHandlingTest extends ContextTestSupport {
  @Test public void testSplitterStreamingNoError() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("A","B","C","D","E");
    getMockEndpoint("mock:b").expectedBodiesReceived("A","B","C","D","E");
    getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E");
    template.sendBody("direct:start","A,B,C,D,E");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitterStreamingWithError() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("A","B","Kaboom");
    getMockEndpoint("mock:b").expectedBodiesReceived("A","B");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    try {
      template.sendBody("direct:start","A,B,Kaboom,D,E");
      fail("Should have thrown an exception");
    }
 catch (    CamelExecutionException e) {
      assertIsInstanceOf(IllegalArgumentException.class,e.getCause().getCause());
      assertEquals("Cannot do this",e.getCause().getCause().getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).streaming().stopOnException().to("mock:a").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if ("Kaboom".equals(body)) {
              throw new IllegalArgumentException("Cannot do this");
            }
          }
        }
).to("mock:b").end().to("mock:result");
      }
    }
;
  }
}
