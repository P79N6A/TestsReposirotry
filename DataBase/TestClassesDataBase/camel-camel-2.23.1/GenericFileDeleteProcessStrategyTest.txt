/** 
 * Unit test about retrying deleting processed file, that can be a bit more tricky on some OS as java.io.delete can return wrong answer
 * @version 
 */
public class GenericFileDeleteProcessStrategyTest extends ContextTestSupport {
  private static int existsCounter;
  private static int deleteCounter;
private static class MyGenericFileOperations implements GenericFileOperations<Object> {
    public void setEndpoint(    GenericFileEndpoint<Object> endpoint){
    }
    public boolean deleteFile(    String name) throws GenericFileOperationFailedException {
      deleteCounter++;
      return false;
    }
    public boolean existsFile(    String name) throws GenericFileOperationFailedException {
      existsCounter++;
      if (FileUtil.normalizePath("target/foo/boom.txt").equals(name)) {
        return true;
      }
      return existsCounter <= 1;
    }
    public boolean renameFile(    String from,    String to) throws GenericFileOperationFailedException {
      return false;
    }
    public boolean buildDirectory(    String directory,    boolean absolute) throws GenericFileOperationFailedException {
      return false;
    }
    public boolean retrieveFile(    String name,    Exchange exchange,    long size) throws GenericFileOperationFailedException {
      return false;
    }
    public void releaseRetrievedFileResources(    Exchange exchange) throws GenericFileOperationFailedException {
    }
    public boolean storeFile(    String name,    Exchange exchange,    long size) throws GenericFileOperationFailedException {
      return false;
    }
    public String getCurrentDirectory() throws GenericFileOperationFailedException {
      return null;
    }
    public void changeCurrentDirectory(    String path) throws GenericFileOperationFailedException {
    }
    public void changeToParentDirectory() throws GenericFileOperationFailedException {
    }
    public List<Object> listFiles() throws GenericFileOperationFailedException {
      return null;
    }
    public List<Object> listFiles(    String path) throws GenericFileOperationFailedException {
      return null;
    }
  }
  @Test public void testTroubleDeletingFile() throws Exception {
    deleteCounter=0;
    existsCounter=0;
    @SuppressWarnings("unchecked") GenericFileEndpoint<Object> endpoint=context.getEndpoint("file://target/foo",GenericFileEndpoint.class);
    Exchange exchange=endpoint.createExchange();
    GenericFile<Object> file=new GenericFile<>();
    file.setAbsoluteFilePath("target/foo/me.txt");
    GenericFileDeleteProcessStrategy<Object> strategy=new GenericFileDeleteProcessStrategy<>();
    strategy.commit(new MyGenericFileOperations(),endpoint,exchange,file);
    assertEquals("Should have tried to delete file 2 times",2,deleteCounter);
    assertEquals("Should have tried to delete file 2 times",2,existsCounter);
  }
  @Test public void testCannotDeleteFile() throws Exception {
    deleteCounter=0;
    existsCounter=0;
    @SuppressWarnings("unchecked") GenericFileEndpoint<Object> endpoint=context.getEndpoint("file://target/foo",GenericFileEndpoint.class);
    Exchange exchange=endpoint.createExchange();
    GenericFile<Object> file=new GenericFile<>();
    file.setAbsoluteFilePath("target/foo/boom.txt");
    GenericFileDeleteProcessStrategy<Object> strategy=new GenericFileDeleteProcessStrategy<>();
    try {
      strategy.commit(new MyGenericFileOperations(),endpoint,exchange,file);
      fail("Should have thrown an exception");
    }
 catch (    GenericFileOperationFailedException e) {
    }
    assertEquals("Should have tried to delete file 3 times",3,deleteCounter);
    assertEquals("Should have tried to delete file 3 times",3,existsCounter);
  }
}
