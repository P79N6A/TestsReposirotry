@Ignore("Flaky on CI server due DB issue") public class SpringQuartzPersistentStoreRestartAppChangeOptionsTest extends TestSupport {
  private static AbstractXmlApplicationContext db;
  private AbstractXmlApplicationContext app;
  private AbstractXmlApplicationContext app2;
  private AbstractXmlApplicationContext app3;
  @BeforeClass public static void prepareDB(){
    db=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzConsumerClusteredAppDatabase.xml");
    db.start();
  }
  @AfterClass public static void shutdownDB(){
    db.close();
  }
  @After public void closeApps(){
    IOHelper.close(app3,app2,app);
  }
  @Test public void testRestartAppChangeCronExpression() throws Exception {
    app=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");
    app.start();
    CamelContext camel=app.getBean("camelContext",CamelContext.class);
    assertNotNull(camel);
    String cronExpression=((CronTrigger)getTrigger(camel,"quartzRoute")).getCronExpression();
    app.stop();
    log.info("Restarting ...");
    log.info("Restarting ...");
    log.info("Restarting ...");
    app2=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest2.xml");
    app2.start();
    CamelContext camel2=app2.getBean("camelContext",CamelContext.class);
    assertNotNull(camel2);
    String cronExpression2=((CronTrigger)getTrigger(camel2,"quartzRoute")).getCronExpression();
    app2.stop();
    assertNotEquals(cronExpression,cronExpression2);
    app3=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest3.xml");
    app3.start();
    CamelContext camel3=app3.getBean("camelContext3",CamelContext.class);
    assertNotNull(camel3);
    String cronExpression3=((CronTrigger)getTrigger(camel3,"quartzRoute")).getCronExpression();
    app3.stop();
    assertEquals(cronExpression2,cronExpression3);
  }
  @Test public void testRestartAppChangeTriggerOptions() throws Exception {
    AbstractXmlApplicationContext app=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml");
    app.start();
    CamelContext camel=app.getBean("camelContext",CamelContext.class);
    assertNotNull(camel);
    SimpleTrigger trigger=(SimpleTrigger)getTrigger(camel,"quartzRoute");
    long repeatInterval=trigger.getRepeatInterval();
    app.stop();
    log.info("Restarting ...");
    log.info("Restarting ...");
    log.info("Restarting ...");
    AbstractXmlApplicationContext app2=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml");
    app2.start();
    CamelContext camel2=app2.getBean("camelContext",CamelContext.class);
    assertNotNull(camel2);
    SimpleTrigger trigger2=(SimpleTrigger)getTrigger(camel2,"quartzRoute");
    long repeatInterval2=trigger2.getRepeatInterval();
    app2.stop();
    IOHelper.close(app2,app);
    assertNotEquals(repeatInterval,repeatInterval2);
  }
  @Test public void testRestartAppChangeTriggerType() throws Exception {
    app=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml");
    app.start();
    CamelContext camel=app.getBean("camelContext",CamelContext.class);
    assertNotNull(camel);
    assertTrue(getTrigger(camel,"quartzRoute") instanceof CronTrigger);
    app.stop();
    log.info("Restarting ...");
    log.info("Restarting ...");
    log.info("Restarting ...");
    AbstractXmlApplicationContext app2=new ClassPathXmlApplicationContext("org/apache/camel/component/quartz/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml");
    app2.start();
    CamelContext camel2=app2.getBean("camelContext",CamelContext.class);
    assertNotNull(camel2);
    assertTrue(getTrigger(camel2,"quartzRoute") instanceof SimpleTrigger);
    app2.stop();
    IOHelper.close(app2,app);
  }
  private Trigger getTrigger(  CamelContext camel,  String routeId) throws SchedulerException {
    QuartzEndpoint endpoint=(QuartzEndpoint)(camel.getRoute(routeId).getEndpoint());
    QuartzComponent component=endpoint.getComponent();
    Scheduler scheduler=component.getScheduler();
    return scheduler.getTrigger(endpoint.getTrigger().getName(),endpoint.getTrigger().getGroup());
  }
}
