@ContextConfiguration public class BindyDatePatternCsvUnmarshallTest extends AbstractJUnit4SpringContextTests {
  private static final String URI_MOCK_RESULT="mock:result";
  private static final String URI_DIRECT_START="direct:start";
  @Produce(uri=URI_DIRECT_START) private ProducerTemplate template;
  @EndpointInject(uri=URI_MOCK_RESULT) private MockEndpoint result;
  private String expected;
  @Test @DirtiesContext public void testUnMarshallMessage() throws Exception {
    expected="10,Christian,Mueller,12-24-2013,12-26-2015,01-06-2016 12:14:49,13:15:01,broken";
    result.expectedBodiesReceived(expected + "\r\n");
    template.sendBody(expected);
    result.assertIsSatisfied();
  }
public static class ContextConfig extends RouteBuilder {
    BindyCsvDataFormat camelDataFormat=new BindyCsvDataFormat(Order.class);
    public void configure(){
      from(URI_DIRECT_START).unmarshal(camelDataFormat).marshal(camelDataFormat).convertBodyTo(String.class).to(URI_MOCK_RESULT);
    }
  }
@CsvRecord(separator=",") @FormatFactories({OrderNumberFormatFactory.class}) public static class Order {
    @DataField(pos=1) private OrderNumber orderNr;
    @DataField(pos=2) private String firstName;
    @DataField(pos=3) private String lastName;
    @DataField(pos=4,pattern="MM-dd-yyyy") private Date orderDate;
    @DataField(pos=5,pattern="MM-dd-yyyy") private LocalDate deliveryDate;
    @DataField(pos=6,pattern="MM-dd-yyyy HH:mm:ss") private LocalDateTime returnedDateTime;
    @DataField(pos=7,pattern="HH:mm:ss") private LocalTime receivedTime;
    @DataField(pos=8) private ReturnReason returnReason;
    public OrderNumber getOrderNr(){
      return orderNr;
    }
    public void setOrderNr(    OrderNumber orderNr){
      this.orderNr=orderNr;
    }
    public String getFirstName(){
      return firstName;
    }
    public void setFirstName(    String firstName){
      this.firstName=firstName;
    }
    public String getLastName(){
      return lastName;
    }
    public void setLastName(    String lastName){
      this.lastName=lastName;
    }
    public Date getOrderDate(){
      return orderDate;
    }
    public void setOrderDate(    Date orderDate){
      this.orderDate=orderDate;
    }
    @Override public String toString(){
      return "Model : " + Order.class.getName() + " : "+ this.orderNr+ ", "+ this.firstName+ ", "+ this.lastName+ ", "+ String.valueOf(this.orderDate);
    }
    public LocalDate getDeliveryDate(){
      return deliveryDate;
    }
    public void setDeliveryDate(    LocalDate deliveryDate){
      this.deliveryDate=deliveryDate;
    }
    public LocalDateTime getReturnedDateTime(){
      return returnedDateTime;
    }
    public void setReturnedDateTime(    LocalDateTime returnedDateTime){
      this.returnedDateTime=returnedDateTime;
    }
    public LocalTime getReceivedTime(){
      return receivedTime;
    }
    public void setReceivedTime(    LocalTime receivedTime){
      this.receivedTime=receivedTime;
    }
    public ReturnReason getReturnReason(){
      return returnReason;
    }
    public void setReturnReason(    ReturnReason returnReason){
      this.returnReason=returnReason;
    }
  }
  public enum ReturnReason {  broken,   other}
public static class OrderNumber {
    private int orderNr;
    public static OrderNumber ofString(    String orderNumber){
      OrderNumber result=new OrderNumber();
      result.orderNr=Integer.valueOf(orderNumber);
      return result;
    }
  }
public static class OrderNumberFormatFactory extends AbstractFormatFactory {
{
      supportedClasses.add(OrderNumber.class);
    }
    @Override public Format<?> build(    FormattingOptions formattingOptions){
      return new Format<OrderNumber>(){
        @Override public String format(        OrderNumber object) throws Exception {
          return String.valueOf(object.orderNr);
        }
        @Override public OrderNumber parse(        String string) throws Exception {
          return OrderNumber.ofString(string);
        }
      }
;
    }
  }
}
