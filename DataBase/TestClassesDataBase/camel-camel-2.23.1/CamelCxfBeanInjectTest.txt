@RunWith(PaxExam.class) @Ignore("Flaky on CI server") public class CamelCxfBeanInjectTest extends AbstractFeatureTest {
  private static final int PORT=AvailablePortFinder.getNextAvailable(30000);
  private static final String ENDPOINT_ADDRESS=String.format("http://localhost:%s/CamelCxfBeanInjectTest/router",PORT);
  @Before public void installBlueprintXML() throws Exception {
    URL url=ObjectHelper.loadResourceAsURL("org/apache/camel/itest/cxf/CamelCxfBeanInjectTest.xml",CamelCxfBeanInjectTest.class.getClassLoader());
    Bundle bundle=installBlueprintAsBundle("CamelCxfBeanInjectTest",url,false,b -> {
      ((TinyBundle)b).add(BeanInjectRouteBuilder.class,InnerClassStrategy.NONE).add(SimpleService.class,InnerClassStrategy.NONE).add(SimpleBean.class,InnerClassStrategy.NONE).set(Constants.DYNAMICIMPORT_PACKAGE,"*");
    }
);
    Properties props=new Properties();
    props.put("router.address",ENDPOINT_ADDRESS);
    props.put("router.port",Integer.toString(PORT));
    overridePropertiesWithConfigAdmin("my-placeholders",props);
    bundle.start();
  }
  @Configuration public Option[] configure(){
    return configure("camel-test-karaf","camel-cxf");
  }
  @Test public void testReverseProxy(){
    SimpleService client=createClient();
    setHttpHeaders(client,"X-Forwarded-Proto","https");
    String result=client.op("test");
    Assert.assertEquals("Scheme should be set to 'https'","scheme: https, x-forwarded-proto: https",result);
  }
  private void setHttpHeaders(  SimpleService client,  String header,  String value){
    Map<String,List<String>> headers=new HashMap<>();
    headers.put(header,Arrays.asList(value));
    ClientProxy.getClient(client).getRequestContext().put(Message.PROTOCOL_HEADERS,headers);
  }
  private SimpleService createClient(){
    ClientProxyFactoryBean factory=new ClientProxyFactoryBean();
    factory.setAddress(ENDPOINT_ADDRESS);
    factory.setServiceClass(SimpleService.class);
    factory.setBus(BusFactory.getDefaultBus());
    return (SimpleService)factory.create();
  }
}
