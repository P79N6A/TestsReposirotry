public class CxfConsumerMessageTest extends CamelTestSupport {
  private static final String TEST_MESSAGE="Hello World!";
  private static final String ECHO_METHOD="ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\"";
  private static final String ECHO_RESPONSE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>"+ "</ns1:echoResponse></soap:Body></soap:Envelope>";
  private static final String ECHO_BOOLEAN_RESPONSE="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echoBooleanResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">true</return>"+ "</ns1:echoBooleanResponse></soap:Body></soap:Envelope>";
  protected final String simpleEndpointAddress="http://localhost:" + CXFTestSupport.getPort1() + "/"+ getClass().getSimpleName()+ "/test";
  protected final String simpleEndpointURI="cxf://" + simpleEndpointAddress + "?serviceClass=org.apache.camel.component.cxf.HelloService";
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(simpleEndpointURI + "&dataFormat=MESSAGE").process(new Processor(){
          public void process(          final Exchange exchange){
            Message in=exchange.getIn();
            Object value=in.getHeader("Content-Length");
            assertNull("The Content-Length header should be removed",value);
            String request=in.getBody(String.class);
            if (request.indexOf(ECHO_METHOD) > 0) {
              exchange.getOut().setBody(ECHO_RESPONSE);
            }
 else {
              exchange.getOut().setBody(ECHO_BOOLEAN_RESPONSE);
            }
          }
        }
);
      }
    }
;
  }
  @Test public void testInvokingServiceFromClient() throws Exception {
    ClientProxyFactoryBean proxyFactory=new ClientProxyFactoryBean();
    ClientFactoryBean clientBean=proxyFactory.getClientFactoryBean();
    clientBean.setAddress(simpleEndpointAddress);
    clientBean.setServiceClass(HelloService.class);
    clientBean.setBus(BusFactory.getDefaultBus());
    HelloService client=(HelloService)proxyFactory.create();
    String result=client.echo(TEST_MESSAGE);
    assertEquals("We should get the echo string result from router",result,"echo " + TEST_MESSAGE);
    Boolean bool=client.echoBoolean(Boolean.TRUE);
    assertNotNull("The result should not be null",bool);
    assertEquals("We should get the echo boolean result from router ",bool.toString(),"true");
  }
}
