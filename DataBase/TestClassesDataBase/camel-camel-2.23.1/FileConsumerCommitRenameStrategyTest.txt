/** 
 * Unit test for the FileRenameStrategy using move options
 */
public class FileConsumerCommitRenameStrategyTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/done");
    deleteDirectory("target/reports");
    super.setUp();
  }
  @Test public void testRenameSuccess() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:report");
    mock.expectedBodiesReceived("Hello Paris");
    mock.expectedFileExists("target/done/paris.txt","Hello Paris");
    template.sendBodyAndHeader("file:target/reports","Hello Paris",Exchange.FILE_NAME,"paris.txt");
    mock.assertIsSatisfied();
  }
  @Test public void testRenameFileExists() throws Exception {
    File file=new File("target/done");
    file.mkdirs();
    FileWriter fw=new FileWriter("target/done/london.txt");
    try {
      fw.write("I was there once in London");
      fw.flush();
    }
  finally {
      fw.close();
    }
    MockEndpoint mock=getMockEndpoint("mock:report");
    mock.expectedBodiesReceived("Hello London");
    template.sendBodyAndHeader("file:target/reports","Hello London",Exchange.FILE_NAME,"london.txt");
    mock.assertIsSatisfied();
    oneExchangeDone.matchesMockWaitTime();
    String content=IOConverter.toString(new File("target/done/london.txt"),null);
    assertEquals("The file should have been renamed replacing any existing files","Hello London",content);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/reports?move=../done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:report");
      }
    }
;
  }
}
