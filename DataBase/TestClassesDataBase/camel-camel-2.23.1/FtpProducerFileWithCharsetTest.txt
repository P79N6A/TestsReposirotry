public class FtpProducerFileWithCharsetTest extends FtpServerTestSupport {
  private String payload="\u00e6\u00f8\u00e5 \u00a9";
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/upload?charset=iso-8859-1&password=admin";
  }
  @Override @Before public void setUp() throws Exception {
    byte[] utf=payload.getBytes("utf-8");
    byte[] iso=payload.getBytes("iso-8859-1");
    log.debug("utf: {}",new String(utf,Charset.forName("utf-8")));
    log.debug("iso: {}",new String(iso,Charset.forName("iso-8859-1")));
    for (    byte b : utf) {
      log.debug("utf byte: {}",b);
    }
    for (    byte b : iso) {
      log.debug("iso byte: {}",b);
    }
    super.setUp();
  }
  @Test public void testProducerWithCharset() throws Exception {
    sendFile(getFtpUrl(),payload,"charset/iso.txt");
    File file=new File(FTP_ROOT_DIR + "/upload/charset/iso.txt");
    assertTrue("The uploaded file should exists",file.exists());
    String fileContent=new String(IOConverter.toByteArray(file),"iso-8859-1");
    assertEquals(fileContent,payload);
    InputStream fis=IOHelper.buffered(new FileInputStream(file));
    byte[] buffer=new byte[100];
    int len=fis.read(buffer);
    assertTrue("Should read data: " + len,len != -1);
    byte[] data=new byte[len];
    System.arraycopy(buffer,0,data,0,len);
    fis.close();
    assertEquals(5,data.length);
    assertEquals(-26,data[0]);
    assertEquals(-8,data[1]);
    assertEquals(-27,data[2]);
    assertEquals(32,data[3]);
    assertEquals(-87,data[4]);
  }
}
