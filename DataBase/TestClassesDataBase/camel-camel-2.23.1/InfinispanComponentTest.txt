public class InfinispanComponentTest extends InfinispanTestSupport {
  private final String cacheName=UUID.randomUUID().toString();
  @Test public void consumerReceivedEntryCreatedEventNotifications() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(2);
    namedCache(cacheName).put(KEY_ONE,VALUE_ONE);
    assertMockEndpointsSatisfied();
  }
  @Test public void producerPublishesKeyAndValue() throws Exception {
    fluentTemplate().to("direct:start").withHeader(InfinispanConstants.KEY,KEY_ONE).withHeader(InfinispanConstants.VALUE,VALUE_ONE).send();
    assertThat(namedCache(cacheName).get(KEY_ONE).toString(),is(VALUE_ONE));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        fromF("infinispan:%s?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED",cacheName).to("mock:result");
        from("direct:start").toF("infinispan:%s?cacheContainer=#cacheContainer",cacheName);
      }
    }
;
  }
}
