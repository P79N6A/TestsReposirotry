/** 
 * Unit test to verify that we can have multiple recipients in To, CC and BCC
 */
public class MailMultipleRecipientsTest extends CamelTestSupport {
  @Test public void testSendWithMultipleRecipientsInHeader() throws Exception {
    Mailbox.clearAll();
    Map<String,Object> headers=new HashMap<>();
    headers.put("to","claus@localhost, willem@localhost ; hadrian@localhost, \"Snell, Tracy\" <tracy@localhost>");
    headers.put("cc","james@localhost");
    assertMailbox("claus");
    assertMailbox("willem");
    assertMailbox("hadrian");
    assertMailbox("tracy");
    template.sendBodyAndHeaders("smtp://localhost","Hello World",headers);
    assertMockEndpointsSatisfied();
  }
  @Test public void testSendWithMultipleRecipientsPreConfigured() throws Exception {
    Mailbox.clearAll();
    assertMailbox("claus");
    assertMailbox("willem");
    template.sendBody("smtp://localhost?to=claus@localhost,willem@localhost&cc=james@localhost","Hello World");
    assertMockEndpointsSatisfied();
  }
  private void assertMailbox(  String name) throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:" + name);
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World");
    mock.expectedHeaderReceived("cc","james@localhost");
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("pop3://claus@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:claus");
        from("pop3://willem@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:willem");
        from("pop3://hadrian@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:hadrian");
        from("pop3://tracy@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:tracy");
      }
    }
;
  }
}
