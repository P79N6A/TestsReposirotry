public class ConsumeChildrenTest extends ZooKeeperTestSupport {
  @Override protected RouteBuilder[] createRouteBuilders() throws Exception {
    return new RouteBuilder[]{new RouteBuilder(){
      public void configure() throws Exception {
        from("zookeeper://localhost:" + getServerPort() + "/grimm?repeat=true&listChildren=true").sort(body(),new NaturalSortComparator(Order.Descending)).to("mock:zookeeper-data");
      }
    }
};
  }
  @Test public void shouldAwaitCreationAndGetDataNotification() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:zookeeper-data");
    mock.expectedMessageCount(5);
    client.createPersistent("/grimm","parent");
    client.create("/grimm/hansel","child");
    client.create("/grimm/gretel","child");
    client.delete("/grimm/hansel");
    client.delete("/grimm/gretel");
    assertMockEndpointsSatisfied();
    validateExchangesContainListings(mock,createChildListing(),createChildListing("hansel"),createChildListing("hansel","gretel"),createChildListing("gretel"),createChildListing());
  }
  private void validateExchangesContainListings(  MockEndpoint mock,  List<?>... expected) throws CamelExchangeException, NoSuchHeaderException {
    int index=0;
    for (    Exchange received : mock.getReceivedExchanges()) {
      Watcher.Event.EventType expectedEvent;
      if (index == 0) {
        expectedEvent=Watcher.Event.EventType.NodeCreated;
      }
 else {
        expectedEvent=Watcher.Event.EventType.NodeChildrenChanged;
      }
      List<?> actual=received.getIn().getMandatoryBody(List.class);
      assertEquals(expected[index++],actual);
      assertEquals(expectedEvent,ExchangeHelper.getMandatoryHeader(received,ZooKeeperMessage.ZOOKEEPER_EVENT_TYPE,Watcher.Event.EventType.class));
      validateChildrenCountChangesEachTime(mock);
    }
  }
  protected void validateChildrenCountChangesEachTime(  MockEndpoint mock){
    int lastChildCount=-1;
    List<Exchange> received=mock.getReceivedExchanges();
    for (int x=0; x < received.size(); x++) {
      Message zkm=mock.getReceivedExchanges().get(x).getIn();
      int childCount=((Stat)zkm.getHeader(ZooKeeperMessage.ZOOKEEPER_STATISTICS)).getNumChildren();
      assertNotSame("Num of children did not change",lastChildCount,childCount);
      lastChildCount=childCount;
    }
  }
}
