/** 
 * Test to verify: 1.  The JMX consumer can actively connect (via polling) to a JMX server that is not listening  for connections when the route is started 2.  The JMX consumer can detect a lost JMX connection, and will reconnect to the JMX server when the server is listening for connections again on the configured port
 */
public class JMXRobustRemoteConnectionTest extends SimpleBeanFixture {
  JMXServiceURL url;
  JMXConnectorServer connector;
  Registry registry;
  int port;
  @Before @Override public void setUp() throws Exception {
    port=AvailablePortFinder.getNextAvailable(39000);
    url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:" + port + "/"+ DOMAIN);
    initContext();
    startContext();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    connector.stop();
  }
  @Override protected void initServer() throws Exception {
    if (registry == null) {
      registry=LocateRegistry.createRegistry(port);
    }
    server=MBeanServerFactory.createMBeanServer(DOMAIN);
    connector=JMXConnectorServerFactory.newJMXConnectorServer(url,Collections.<String,Object>emptyMap(),server);
    connector.start();
  }
  @Override protected JMXUriBuilder buildFromURI(){
    String uri=url.toString();
    return super.buildFromURI().withServerName(uri).withTestConnectionOnStartup(false).withReconnectDelay(1).withReconnectOnConnectionFailure(true);
  }
  @Test public void testRobustConnection() throws Exception {
    try {
      getSimpleMXBean().touch();
      fail("The mxbean should not be available.");
    }
 catch (    Exception e) {
      assertTrue(e instanceof java.lang.IllegalArgumentException);
      assertTrue(e.getMessage().equals("Null connection"));
    }
    initServer();
    initBean();
    Thread.sleep(2000);
    getSimpleMXBean().touch();
    getMockFixture().waitForMessages();
    getMockFixture().assertMessageReceived(new File("src/test/resources/consumer-test/touched.xml"));
    connector.stop();
    Thread.sleep(2000);
    getMockFixture().resetMockEndpoint();
    getMockFixture().getMockEndpoint().setExpectedMessageCount(1);
    getSimpleMXBean().touch();
    getMockFixture().getMockEndpoint().assertIsNotSatisfied();
    initServer();
    initBean();
    Thread.sleep(2000);
    getSimpleMXBean().touch();
    getMockFixture().waitForMessages();
    getMockFixture().assertMessageReceived(new File("src/test/resources/consumer-test/touched.xml"));
  }
}
