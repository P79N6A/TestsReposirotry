public class NettySuspendResumeTest extends BaseNettyTest {
  @Test public void testSuspendResume() throws Exception {
    getMockEndpoint("mock:result").expectedBodiesReceived("Camel","Again");
    String out=template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true","Camel",String.class);
    assertEquals("Bye Camel",out);
    context.suspendRoute("foo");
    try {
      template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true","World",String.class);
      fail("Should not allow connecting as its suspended");
    }
 catch (    Exception e) {
    }
    context.resumeRoute("foo");
    out=template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true","Again",String.class);
    assertEquals("Bye Again",out);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("netty4:tcp://localhost:{{port}}?sync=true").routeId("foo").to("log:result").to("mock:result").transform(body().prepend("Bye "));
      }
    }
;
  }
}
