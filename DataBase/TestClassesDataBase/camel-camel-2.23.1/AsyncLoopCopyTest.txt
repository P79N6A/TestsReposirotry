/** 
 * @version 
 */
public class AsyncLoopCopyTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  @Test public void testAsyncLoopCopy() throws Exception {
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:loopIterationStart").expectedBodiesReceived("Hello Camel","Hello Camel");
    getMockEndpoint("mock:loopIterationEnd").expectedBodiesReceived("Bye Camel","Bye Camel");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBodyAndHeader("direct:start","Hello Camel","NumberIterations",2,String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).loop(header("NumberIterations")).copy().to("mock:loopIterationStart").to("async:bye:camel").to("mock:loopIterationEnd").end().process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:result");
      }
    }
;
  }
}
