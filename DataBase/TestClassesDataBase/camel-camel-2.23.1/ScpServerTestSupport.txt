public abstract class ScpServerTestSupport extends CamelTestSupport {
  protected static final Logger LOG=LoggerFactory.getLogger(ScpServerTestSupport.class);
  protected static final String SCP_ROOT_DIR="target/test-classes/scp";
  protected static final String KNOWN_HOSTS="known_hosts";
  protected static int port;
  private boolean acceptLocalhostConnections=true;
  private String knownHostsFile;
  private boolean setupComplete;
  private SshServer sshd;
  protected ScpServerTestSupport(){
    this(true);
  }
  protected ScpServerTestSupport(  boolean acceptLocalhostConnections){
    this.acceptLocalhostConnections=acceptLocalhostConnections;
  }
  protected int getPort(){
    return port;
  }
  protected SshServer getSshd(){
    return sshd;
  }
  @BeforeClass public static void initPort() throws Exception {
    port=AvailablePortFinder.getNextAvailable(21000);
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory(getScpPath());
    createDirectory(getScpPath());
    setupComplete=startSshd();
    setupKnownHosts();
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    if (sshd != null) {
      try {
        sshd.stop(true);
        sshd=null;
      }
 catch (      Exception e) {
      }
    }
    deleteDirectory(getScpPath());
  }
  protected final String getScpPath(){
    return SCP_ROOT_DIR + "/" + getClass().getSimpleName();
  }
  protected String getScpUri(){
    return "scp://localhost:" + getPort() + "/"+ getScpPath();
  }
  protected boolean startSshd(){
    sshd=SshServer.setUpDefaultServer();
    sshd.setPort(getPort());
    sshd.setKeyPairProvider(new FileKeyPairProvider(Paths.get("src/test/resources/hostkey.pem")));
    sshd.setSubsystemFactories(Arrays.asList(new SftpSubsystemFactory()));
    sshd.setCommandFactory(new ScpCommandFactory());
    sshd.setPasswordAuthenticator(new PasswordAuthenticator(){
      @Override public boolean authenticate(      String username,      String password,      ServerSession session){
        return username != null && username.equals(password);
      }
    }
);
    sshd.setPublickeyAuthenticator(new PublickeyAuthenticator(){
      @Override public boolean authenticate(      String username,      PublicKey key,      ServerSession session){
        return true;
      }
    }
);
    try {
      sshd.start();
      return true;
    }
 catch (    IOException e) {
      LOG.info("Failed to start ssh server.",e);
    }
    return false;
  }
  protected void setupKnownHosts(){
    knownHostsFile=SCP_ROOT_DIR + "/" + KNOWN_HOSTS;
    if (!acceptLocalhostConnections) {
      return;
    }
    JSch jsch=new JSch();
    try {
      LOG.debug("Using '{}' for known hosts.",knownHostsFile);
      jsch.setKnownHosts(knownHostsFile);
      Session s=jsch.getSession("admin","localhost",getPort());
      s.setConfig("StrictHostKeyChecking","ask");
      s.setConfig("HashKnownHosts","no");
      s.setUserInfo(new UserInfo(){
        @Override public String getPassphrase(){
          return null;
        }
        @Override public String getPassword(){
          return "admin";
        }
        @Override public boolean promptPassword(        String message){
          return true;
        }
        @Override public boolean promptPassphrase(        String message){
          return false;
        }
        @Override public boolean promptYesNo(        String message){
          return true;
        }
        @Override public void showMessage(        String message){
        }
      }
);
      s.connect();
      s.disconnect();
    }
 catch (    JSchException e) {
      LOG.info("Could not add [localhost] to known hosts",e);
    }
  }
  public String getKnownHostsFile(){
    return knownHostsFile;
  }
  public boolean isSetupComplete(){
    return setupComplete;
  }
  protected static void traceSecurityProviders(){
    for (    Provider p : Security.getProviders()) {
      for (      Service s : p.getServices()) {
        LOG.trace("Security provider {} for '{}' algorithm",s.getClassName(),s.getAlgorithm());
      }
    }
  }
}
