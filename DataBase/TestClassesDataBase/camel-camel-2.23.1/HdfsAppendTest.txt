@Ignore("Must run manual") public class HdfsAppendTest extends CamelTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    Configuration conf=new Configuration();
    Path file=new Path("hdfs://localhost:9000/tmp/test/test-camel-simple-write-file1");
    FileSystem fs=FileSystem.get(file.toUri(),conf);
    FSDataOutputStream out=fs.create(file);
    for (int i=0; i < 10; ++i) {
      out.write("PIPPO".getBytes("UTF-8"));
      out.flush();
    }
    out.close();
  }
  @Test public void testAppend() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start1").to("hdfs://localhost:9000/tmp/test/test-camel-simple-write-file1?append=true&fileSystemType=HDFS");
      }
    }
);
    startCamelContext();
    for (int i=0; i < 10; ++i) {
      template.sendBody("direct:start1","PIPPO");
    }
    Configuration conf=new Configuration();
    Path file=new Path("hdfs://localhost:9000/tmp/test/test-camel-simple-write-file1");
    FileSystem fs=FileSystem.get(file.toUri(),conf);
    FSDataInputStream in=fs.open(file);
    byte[] buffer=new byte[5];
    int ret=0;
    for (int i=0; i < 20; ++i) {
      ret=in.read(buffer);
    }
    ret=in.read(buffer);
    assertEquals(-1,ret);
    in.close();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    Thread.sleep(250);
    Configuration conf=new Configuration();
    Path dir=new Path("hdfs://localhost:9000/tmp/test");
    FileSystem fs=FileSystem.get(dir.toUri(),conf);
    fs.delete(dir,true);
  }
}
