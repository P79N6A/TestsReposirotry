public class ThreadsInvalidConfigTest extends ContextTestSupport {
  ThreadPoolProfile threadPoolProfile=new ThreadPoolProfile("poll");
  @Test public void testCreateRouteIfNoInvalidOptions() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
        from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).to("mock:test");
      }
    }
);
  }
  @Test public void testFailIfThreadNameAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).threadName("foo").to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("ThreadName"));
      return;
    }
    fail();
  }
  @Test public void testPassIfThreadNameWithoutExecutorServiceRef() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
        from("direct:start").threads().threadName("foo").to("mock:test");
      }
    }
);
  }
  @Test public void testFailIfPoolSizeAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).poolSize(1).to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("PoolSize"));
      return;
    }
    fail();
  }
  @Test public void testFailIfMaxPoolSizeAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).maxPoolSize(1).to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("MaxPoolSize"));
      return;
    }
    fail();
  }
  @Test public void testFailIfKeepAliveTimeAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).keepAliveTime(1).to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("KeepAliveTime"));
      return;
    }
    fail();
  }
  @Test public void testFailIfMaxQueueSizeAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).maxQueueSize(1).to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("MaxQueueSize"));
      return;
    }
    fail();
  }
  @Test public void testFailIfRejectedPolicyAndExecutorServiceRef() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          context.getExecutorServiceManager().registerThreadPoolProfile(threadPoolProfile);
          from("direct:start").threads().executorServiceRef(threadPoolProfile.getId()).rejectedPolicy(Abort).to("mock:test");
        }
      }
);
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getCause().getMessage().startsWith("RejectedPolicy"));
      return;
    }
    fail();
  }
}
