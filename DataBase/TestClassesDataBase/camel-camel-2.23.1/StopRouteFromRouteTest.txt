/** 
 */
public class StopRouteFromRouteTest extends Assert {
  final CountDownLatch latch=new CountDownLatch(1);
  @Test public void testStopRouteFromRoute() throws Exception {
    CamelContext context=new DefaultCamelContext();
    context.addRoutes(createMyRoutes());
    context.start();
    assertTrue("Route myRoute should be started",context.getRouteStatus("myRoute").isStarted());
    assertTrue("Route bar should be started",context.getRouteStatus("bar").isStarted());
    MockEndpoint start=context.getEndpoint("mock:start",MockEndpoint.class);
    start.expectedMessageCount(1);
    MockEndpoint done=context.getEndpoint("mock:done",MockEndpoint.class);
    done.expectedMessageCount(1);
    ProducerTemplate template=context.createProducerTemplate();
    template.sendBody("direct:start","Hello Camel");
    latch.await(5,TimeUnit.SECONDS);
    assertTrue("Route myRoute should be stopped",context.getRouteStatus("myRoute").isStopped());
    assertTrue("Route bar should be started",context.getRouteStatus("bar").isStarted());
    context.stop();
    start.assertIsSatisfied();
    done.assertIsSatisfied();
  }
  public RouteBuilder createMyRoutes() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("myRoute").to("mock:start").process(new Processor(){
          Thread stop;
          @Override public void process(          final Exchange exchange) throws Exception {
            if (stop == null) {
              stop=new Thread(){
                @Override public void run(){
                  try {
                    exchange.getContext().stopRoute("myRoute");
                  }
 catch (                  Exception e) {
                  }
 finally {
                    latch.countDown();
                  }
                }
              }
;
            }
            stop.start();
          }
        }
).to("mock:done");
        from("direct:bar").routeId("bar").to("mock:bar");
      }
    }
;
  }
}
