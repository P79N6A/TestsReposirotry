/** 
 * @version 
 */
public class CharlesSplitUseBeanAsErrorHandlerIssueTest extends ContextTestSupport {
  private static String logged;
  @Test public void testSplitBeanErrorHandlerOK() throws Exception {
    MockEndpoint split=getMockEndpoint("mock:split");
    MockEndpoint ile=getMockEndpoint("mock:ile");
    MockEndpoint exception=getMockEndpoint("mock:exception");
    split.expectedBodiesReceived("A","B","C");
    ile.expectedMessageCount(0);
    exception.expectedMessageCount(0);
    template.sendBody("direct:start","A,B,C");
    assertMockEndpointsSatisfied();
  }
  @Test public void testSplitBeanErrorHandlerHandled() throws Exception {
    MockEndpoint split=getMockEndpoint("mock:split");
    MockEndpoint ile=getMockEndpoint("mock:ile");
    MockEndpoint exception=getMockEndpoint("mock:exception");
    split.expectedBodiesReceived("A","B","C");
    ile.expectedBodiesReceived("Handled Forced Cause by Damn ILE");
    exception.expectedMessageCount(0);
    template.sendBody("direct:start","A,B,Forced,C");
    assertMockEndpointsSatisfied();
    assertEquals("Forced",logged);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body().tokenize(",")).stopOnException().doTry().process(new MyProcessor()).to("mock:split").doCatch(IllegalArgumentException.class).bean(new MyLoggerBean()).bean(new MyErrorHandlerBean()).to("mock:ile").doCatch(Exception.class).to("mock:exception").rollback().end();
      }
    }
;
  }
public static class MyLoggerBean {
    public void logError(    String body){
      logged=body;
    }
  }
public static class MyErrorHandlerBean {
    public String handleError(    String body,    @ExchangeException Exception e){
      return "Handled " + body + " Cause by "+ e.getMessage();
    }
  }
public static class MyProcessor implements Processor {
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      if ("Forced".equals(body)) {
        throw new IllegalArgumentException("Damn ILE");
      }
 else       if ("Kaboom".equals(body)) {
        throw new Exception("Kaboom");
      }
    }
  }
}
