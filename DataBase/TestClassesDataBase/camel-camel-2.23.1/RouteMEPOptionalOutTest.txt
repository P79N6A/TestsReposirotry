/** 
 * Unit test for in optional out
 */
public class RouteMEPOptionalOutTest extends ContextTestSupport {
  @Test public void testHasOut(){
    Object out=template.requestBody("direct:start","Hi");
    assertEquals("Bye World",out);
  }
  @Test public void testHasNotOutForInOptionalOut(){
    Object out=template.sendBody("direct:noout",ExchangePattern.InOptionalOut,"Hi");
    assertEquals(null,out);
  }
  @Test public void testHasNotOutForInOut(){
    Object out=template.sendBody("direct:noout",ExchangePattern.InOut,"Hi");
    assertEquals(null,out);
  }
  @Test public void testHasNotOutForInOnly(){
    Object out=template.sendBody("direct:noout",ExchangePattern.InOnly,"Hi");
    assertEquals(null,out);
  }
  @Test public void testInOnly(){
    Object out=template.sendBody("direct:inonly",ExchangePattern.InOnly,"Hi");
    assertEquals(null,out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getOut().setBody("Bye World");
          }
        }
);
        from("direct:noout").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("Hello World");
          }
        }
);
        from("direct:inonly").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            exchange.getIn().setBody("Hello World");
          }
        }
);
      }
    }
;
  }
}
