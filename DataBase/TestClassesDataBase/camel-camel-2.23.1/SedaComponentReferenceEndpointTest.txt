/** 
 */
public class SedaComponentReferenceEndpointTest extends ContextTestSupport {
  @Test public void testSedaComponentReference() throws Exception {
    SedaComponent seda=context.getComponent("seda",SedaComponent.class);
    String key=seda.getQueueKey("seda://foo");
    assertEquals(1,seda.getQueues().get(key).getCount());
    assertEquals(2,numberOfReferences(seda));
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo?blockWhenFull=true").routeId("foo2").to("mock:foo2");
      }
    }
);
    assertEquals(2,seda.getQueues().get(key).getCount());
    assertEquals(3,numberOfReferences(seda));
    context.stopRoute("foo");
    context.removeRoute("foo");
    assertEquals(1,seda.getQueues().get(key).getCount());
    assertEquals(2,numberOfReferences(seda));
    context.stopRoute("foo2");
    context.removeRoute("foo2");
    assertNull(seda.getQueues().get(key));
    assertEquals(1,numberOfReferences(seda));
    key=seda.getQueueKey("seda://bar");
    assertEquals(1,seda.getQueues().get(key).getCount());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("seda:foo").routeId("foo").to("mock:foo");
        from("seda:bar").routeId("bar").to("mock:bar");
      }
    }
;
  }
  private int numberOfReferences(  SedaComponent seda){
    int num=0;
    Iterator<QueueReference> it=seda.getQueues().values().iterator();
    while (it.hasNext()) {
      num+=it.next().getCount();
    }
    return num;
  }
}
