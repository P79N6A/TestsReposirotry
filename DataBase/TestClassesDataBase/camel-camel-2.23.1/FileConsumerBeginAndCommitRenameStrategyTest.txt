/** 
 * Unit test for the FileRenameStrategy using preMove and move options
 */
public class FileConsumerBeginAndCommitRenameStrategyTest extends ContextTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/inprogress");
    deleteDirectory("target/done");
    deleteDirectory("target/reports");
    super.setUp();
  }
  @Test public void testRenameSuccess() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:report");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello Paris");
    mock.expectedFileExists("target/done/paris.txt","Hello Paris");
    template.sendBodyAndHeader("file:target/reports","Hello Paris",Exchange.FILE_NAME,"paris.txt");
    mock.assertIsSatisfied();
  }
  @Test public void testIllegalOptions() throws Exception {
    try {
      context.getEndpoint("file://target?move=../done/${file:name}&delete=true").createConsumer(new Processor(){
        public void process(        Exchange exchange) throws Exception {
        }
      }
);
      fail("Should have thrown an exception");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      context.getEndpoint("file://target?move=${file:name.noext}.bak&delete=true").createConsumer(new Processor(){
        public void process(        Exchange exchange) throws Exception {
        }
      }
);
      fail("Should have thrown an exception");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("file://target/reports?preMove=../inprogress/${file:name}&move=../done/${file:name}&initialDelay=0&delay=10").process(new Processor(){
          @SuppressWarnings("unchecked") public void process(          Exchange exchange) throws Exception {
            GenericFile<File> file=(GenericFile<File>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
            assertNotNull(file);
            assertTrue(file.getRelativeFilePath().indexOf("inprogress") > -1);
          }
        }
).to("mock:report");
      }
    }
;
  }
}
