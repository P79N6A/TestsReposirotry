/** 
 */
public class SplitTwoSubUnitOfWorkTest extends ContextTestSupport {
  private static int counter;
  @Test public void testOK() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedBodiesReceived("Tiger","Camel");
    getMockEndpoint("mock:c").expectedBodiesReceived("Elephant","Lion");
    getMockEndpoint("mock:result").expectedMessageCount(1);
    getMockEndpoint("mock:line").expectedBodiesReceived("Tiger","Camel","Elephant","Lion");
    MyBody body=new MyBody("Tiger,Camel","Elephant,Lion");
    template.sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
  }
  @Test public void testError() throws Exception {
    counter=0;
    getMockEndpoint("mock:dead").expectedMessageCount(1);
    getMockEndpoint("mock:dead").message(0).body().isInstanceOf(MyBody.class);
    getMockEndpoint("mock:a").expectedMessageCount(1);
    getMockEndpoint("mock:b").expectedBodiesReceived("Tiger","Camel");
    getMockEndpoint("mock:c").expectedBodiesReceived("Elephant","Donkey");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:line").expectedBodiesReceived("Tiger","Camel","Elephant");
    MyBody body=new MyBody("Tiger,Camel","Elephant,Donkey");
    template.sendBody("direct:start",body);
    assertMockEndpointsSatisfied();
    assertEquals(4,counter);
    MyBody dead=getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getIn().getBody(MyBody.class);
    assertSame("Should be original message in DLC",body,dead);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:start").to("mock:a").split(simple("${body.foo}")).shareUnitOfWork().to("mock:b").to("direct:line").end().split(simple("${body.bar}")).shareUnitOfWork().to("mock:c").to("direct:line").end().to("mock:result");
        from("direct:line").to("log:line").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            if (body.contains("Donkey")) {
              counter++;
              throw new IllegalArgumentException("Donkey not allowed");
            }
          }
        }
).to("mock:line");
      }
    }
;
  }
public static final class MyBody {
    private String foo;
    private String bar;
    private MyBody(    String foo,    String bar){
      this.foo=foo;
      this.bar=bar;
    }
    public String getFoo(){
      return foo;
    }
    public String getBar(){
      return bar;
    }
  }
}
