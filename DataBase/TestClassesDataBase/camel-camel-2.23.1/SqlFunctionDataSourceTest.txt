public class SqlFunctionDataSourceTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/storedProcedureTest.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void shouldExecuteStoredProcedure() throws InterruptedException {
    MockEndpoint mock=getMockEndpoint("mock:query");
    mock.expectedMessageCount(1);
    Map<String,Object> headers=new HashMap<>();
    headers.put("num1",1);
    headers.put("num2",2);
    template.requestBodyAndHeaders("direct:query",null,headers);
    assertMockEndpointsSatisfied();
    Exchange exchange=mock.getExchanges().get(0);
    assertEquals(Integer.valueOf(-1),exchange.getIn().getBody(Map.class).get("resultofsub"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        getContext().getComponent("sql-stored",SqlStoredComponent.class).setDataSource(db);
        from("direct:query").to("sql-stored:SUBNUMBERS_FUNCTION(OUT INTEGER resultofsub, INTEGER ${header.num1},INTEGER ${header.num2})?function=true").to("mock:query");
      }
    }
;
  }
}
