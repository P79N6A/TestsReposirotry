/** 
 * @version 
 */
public class MockEndpointTimeClauseTest extends ContextTestSupport {
  @Test public void testReceivedTimestamp() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.message(0).exchangeProperty(Exchange.CREATED_TIMESTAMP).isNotNull();
    mock.message(0).exchangeProperty(Exchange.CREATED_TIMESTAMP).isInstanceOf(Date.class);
    mock.message(0).exchangeProperty(Exchange.RECEIVED_TIMESTAMP).isNotNull();
    mock.message(0).exchangeProperty(Exchange.RECEIVED_TIMESTAMP).isInstanceOf(Date.class);
    template.sendBody("direct:a","A");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAssertPeriod() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.setAssertPeriod(10);
    template.sendBody("direct:a","A");
    assertMockEndpointsSatisfied();
  }
  @Test public void testAssertPeriodNot() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.setAssertPeriod(10);
    template.sendBody("direct:a","A");
    template.sendBody("direct:a","B");
    mock.assertIsNotSatisfied();
  }
  @Test public void testAssertPeriodSecondMessageArrives() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    mock.setAssertPeriod(250);
    template.sendBody("direct:a","A");
    ExecutorService executor=Executors.newSingleThreadExecutor();
    executor.execute(new Runnable(){
      public void run(){
        try {
          Thread.sleep(50);
        }
 catch (        Exception e) {
        }
        if (isStarted(template)) {
          template.sendBody("direct:a","B");
        }
      }
    }
);
    try {
      mock.assertIsSatisfied();
      fail("Should have thrown an exception");
    }
 catch (    AssertionError e) {
      assertEquals("mock://result Received message count. Expected: <1> but was: <2>",e.getMessage());
    }
    executor.shutdownNow();
  }
  @Test public void testNoAssertPeriodSecondMessageArrives() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:a","A");
    final CountDownLatch latch=new CountDownLatch(1);
    ExecutorService executor=Executors.newSingleThreadExecutor();
    executor.execute(new Runnable(){
      public void run(){
        try {
          latch.await();
          if (isStarted(template)) {
            template.sendBody("direct:a","B");
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    assertMockEndpointsSatisfied();
    latch.countDown();
    executor.shutdownNow();
  }
  @Test public void testArrivesBeforeNext() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(0).arrives().noLaterThan(1).seconds().beforeNext();
    template.sendBody("direct:a","A");
    Thread.sleep(50);
    template.sendBody("direct:a","B");
    assertMockEndpointsSatisfied();
  }
  @Test public void testArrivesAfterPrevious() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(1).arrives().noLaterThan(1).seconds().afterPrevious();
    template.sendBody("direct:a","A");
    Thread.sleep(50);
    template.sendBody("direct:a","B");
    assertMockEndpointsSatisfied();
  }
  @Test public void testArrivesBeforeAndAfter() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(3);
    mock.message(1).arrives().noLaterThan(250).millis().afterPrevious();
    mock.message(1).arrives().noLaterThan(250).millis().beforeNext();
    template.sendBody("direct:a","A");
    Thread.sleep(50);
    template.sendBody("direct:a","B");
    Thread.sleep(50);
    template.sendBody("direct:a","C");
    assertMockEndpointsSatisfied();
  }
  @Test public void testArrivesWithinAfterPrevious() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(1).arrives().between(10,500).millis().afterPrevious();
    template.sendBody("direct:a","A");
    Thread.sleep(50);
    template.sendBody("direct:a","B");
    assertMockEndpointsSatisfied();
  }
  @Test public void testArrivesWithinBeforeNext() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(2);
    mock.message(0).arrives().between(10,500).millis().beforeNext();
    template.sendBody("direct:a","A");
    Thread.sleep(50);
    template.sendBody("direct:a","B");
    assertMockEndpointsSatisfied();
  }
  @Test public void testArrivesAllMessages() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(5);
    mock.allMessages().arrives().noLaterThan(1).seconds().beforeNext();
    template.sendBody("direct:a","A");
    template.sendBody("direct:a","B");
    Thread.sleep(50);
    template.sendBody("direct:a","C");
    Thread.sleep(50);
    template.sendBody("direct:a","D");
    Thread.sleep(50);
    template.sendBody("direct:a","E");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:a").to("mock:result");
      }
    }
;
  }
  private boolean isStarted(  Service service){
    if (service instanceof StatefulService) {
      return ((StatefulService)service).isStarted();
    }
    return true;
  }
}
