public class HttpComponentVerifierExtensionTest extends BaseHttpTest {
  private static final String AUTH_USERNAME="camel";
  private static final String AUTH_PASSWORD="password";
  private static final int PORT=AvailablePortFinder.getNextAvailable();
  private Server localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=new Server(PORT);
    localServer.setHandler(handlers(contextHandler("/basic",new BasicValidationHandler("GET",null,null,getExpectedContent()))));
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  protected String getLocalServerUri(  String contextPath) throws Exception {
    return new StringBuilder().append("http://").append("localhost").append(":").append(PORT).append(contextPath != null ? contextPath : "").toString();
  }
  @Test public void testParameters() throws Exception {
    Component component=context().getComponent("http");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/basic"));
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingMandatoryParameters() throws Exception {
    Component component=context().getComponent("http");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER,error.getCode());
    Assert.assertTrue(error.getParameterKeys().contains("httpUri"));
  }
  @Test public void testConnectivity() throws Exception {
    Component component=context().getComponent("http");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri",getLocalServerUri("/basic"));
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testConnectivityWithWrongUri() throws Exception {
    Component component=context().getComponent("http");
    ComponentVerifierExtension verifier=component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new);
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("httpUri","http://www.not-existing-uri.unknown");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    ComponentVerifierExtension.VerificationError error=result.getErrors().get(0);
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION,error.getCode());
    Assert.assertTrue(error.getParameterKeys().contains("httpUri"));
  }
}
