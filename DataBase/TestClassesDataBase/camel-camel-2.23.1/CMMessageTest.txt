@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes={ValidatorConfiguration.class}) public class CMMessageTest extends AbstractJUnit4SpringContextTests {
  private final PhoneNumberUtil pnu=PhoneNumberUtil.getInstance();
  private String validNumber;
  @Before public void beforeTest() throws Exception {
    validNumber=pnu.format(pnu.getExampleNumber("ES"),PhoneNumberFormat.E164);
  }
  @Test public void testGSM338AndLTMAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_GSM_MESSAGE_LENGTH; index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 1);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndEQMAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_GSM_MESSAGE_LENGTH; index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 1);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndGTMAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_GSM_MESSAGE_LENGTH + 1; index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndLT2MAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART - 1); index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndEQ2MAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART); index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndGT2MAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART + 1); index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 3);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndEQ8MAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (8 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART); index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 8);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testGSM338AndGT8MAXGSMMESSAGELENGTH() throws Exception {
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (8 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART + 1); index++) {
      message.append("a");
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 8);
    Assert.isTrue(!cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndLTMAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_UNICODE_MESSAGE_LENGTH; index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 1);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndEQMAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_UNICODE_MESSAGE_LENGTH; index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 1);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndGTMAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < CMConstants.MAX_UNICODE_MESSAGE_LENGTH + 1; index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndLT2MAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART - 1); index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndEQ2MAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART); index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 2);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndGT2MAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (2 * CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART + 1); index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 3);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndEQ8MAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (8 * CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART); index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 8);
    Assert.isTrue(cmMessage.isUnicode());
  }
  @Test public void testUnicodeAndGT8MAXGSMMESSAGELENGTH() throws Exception {
    String ch="\uF400";
    StringBuffer message=new StringBuffer();
    for (int index=0; index < (8 * CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART + 1); index++) {
      message.append(ch);
    }
    final CMMessage cmMessage=new CMMessage(validNumber,message.toString());
    cmMessage.setUnicodeAndMultipart(CMConstants.DEFAULT_MULTIPARTS);
    Assert.isTrue(cmMessage.getMultiparts() == 8);
    Assert.isTrue(cmMessage.isUnicode());
  }
}
