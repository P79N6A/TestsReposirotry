public class IgniteSetTest extends AbstractIgniteTest {
  @Override protected String getScheme(){
    return "ignite-set";
  }
  @Override protected AbstractIgniteComponent createComponent(){
    return IgniteSetComponent.fromConfiguration(createConfiguration());
  }
  @Test public void testOperations(){
    boolean result=template.requestBody("ignite-set:abc?operation=ADD","hello",boolean.class);
    assert_().that(result).isTrue();
    assert_().that(ignite().set("abc",new CollectionConfiguration()).contains("hello")).isTrue();
    result=template.requestBody("ignite-set:abc?operation=CONTAINS","hello",boolean.class);
    assert_().that(result).isTrue();
    assert_().that(ignite().set("abc",new CollectionConfiguration()).contains("hello")).isTrue();
    result=template.requestBody("ignite-set:abc?operation=REMOVE","hello",boolean.class);
    assert_().that(result).isTrue();
    assert_().that(ignite().set("abc",new CollectionConfiguration()).contains("hello")).isFalse();
    result=template.requestBody("ignite-set:abc?operation=CONTAINS","hello",boolean.class);
    assert_().that(result).isFalse();
  }
  @Test @SuppressWarnings("unchecked") public void testOperations2(){
    for (int i=0; i < 100; i++) {
      template.requestBody("ignite-set:abc?operation=ADD","hello" + i);
    }
    int size=template.requestBody("ignite-set:abc?operation=SIZE","hello",int.class);
    assert_().that(size).isEqualTo(100);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(100);
    List<String> toRetain=Lists.newArrayList();
    for (int i=0; i < 50; i++) {
      toRetain.add("hello" + i);
    }
    boolean retained=template.requestBodyAndHeader("ignite-set:abc?operation=CLEAR",toRetain,IgniteConstants.IGNITE_SETS_OPERATION,IgniteSetOperation.RETAIN_ALL,boolean.class);
    assert_().that(retained).isTrue();
    size=template.requestBody("ignite-set:abc?operation=SIZE","hello",int.class);
    assert_().that(size).isEqualTo(50);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(50);
    Iterator<String> iterator=template.requestBody("ignite-set:abc?operation=ITERATOR","hello",Iterator.class);
    assert_().that(Iterators.toArray(iterator,String.class)).asList().containsExactlyElementsIn(toRetain);
    String[] array=template.requestBody("ignite-set:abc?operation=ARRAY","hello",String[].class);
    assert_().that(array).asList().containsExactlyElementsIn(toRetain);
    Object result=template.requestBody("ignite-set:abc?operation=CLEAR","hello",String.class);
    assert_().that(result).isEqualTo("hello");
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(0);
    size=template.requestBody("ignite-set:abc?operation=SIZE","hello",int.class);
    assert_().that(size).isEqualTo(0);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(0);
  }
  @Test public void testRetainSingle(){
    for (int i=0; i < 100; i++) {
      template.requestBody("ignite-set:abc?operation=ADD","hello" + i);
    }
    boolean retained=template.requestBody("ignite-set:abc?operation=RETAIN_ALL","hello10",boolean.class);
    assert_().that(retained).isTrue();
    String[] array=template.requestBody("ignite-set:abc?operation=ARRAY","hello",String[].class);
    assert_().that(array).asList().containsExactly("hello10");
  }
  @Test public void testCollectionsAsCacheObject(){
    for (int i=0; i < 100; i++) {
      template.requestBody("ignite-set:abc?operation=ADD","hello" + i);
    }
    Set<String> toAdd=Sets.newHashSet("hello101","hello102","hello103");
    template.requestBody("ignite-set:abc?operation=ADD&treatCollectionsAsCacheObjects=true",toAdd);
    int size=template.requestBody("ignite-set:abc?operation=SIZE","hello",int.class);
    assert_().that(size).isEqualTo(101);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(101);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).contains(toAdd)).isTrue();
    boolean contains=template.requestBody("ignite-set:abc?operation=CONTAINS&treatCollectionsAsCacheObjects=true",toAdd,boolean.class);
    assert_().that(contains).isTrue();
    template.requestBody("ignite-set:abc?operation=REMOVE&treatCollectionsAsCacheObjects=true",toAdd);
    size=template.requestBody("ignite-set:abc?operation=SIZE","hello",int.class);
    assert_().that(size).isEqualTo(100);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).size()).isEqualTo(100);
    assert_().that(ignite().set("abc",new CollectionConfiguration()).contains(toAdd)).isFalse();
  }
  @Test public void testWithConfiguration(){
    CollectionConfiguration configuration=new CollectionConfiguration();
    configuration.setCacheMode(CacheMode.PARTITIONED);
    context.getRegistry(JndiRegistry.class).bind("config",configuration);
    IgniteSetEndpoint igniteEndpoint=context.getEndpoint("ignite-" + "set:abc?operation=ADD&configuration=#config",IgniteSetEndpoint.class);
    template.requestBody(igniteEndpoint,"hello");
    assert_().that(ignite().set("abc",configuration).size()).isEqualTo(1);
    assert_().that(igniteEndpoint.getConfiguration()).isEqualTo(configuration);
  }
  @Override public boolean isCreateCamelContextPerClass(){
    return true;
  }
  @After public void deleteSets(){
    for (    String setName : ImmutableSet.<String>of("abc")) {
      ignite().set(setName,new CollectionConfiguration()).close();
    }
  }
}
