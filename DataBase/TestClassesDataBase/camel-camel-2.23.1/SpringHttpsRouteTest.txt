@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={"/org/apache/camel/component/jetty/jetty-https.xml"}) public class SpringHttpsRouteTest {
  private static final String NULL_VALUE_MARKER=CamelTestSupport.class.getCanonicalName();
  protected String expectedBody="<hello>world!</hello>";
  protected String pwd="changeit";
  protected Properties originalValues=new Properties();
  protected transient Logger log=LoggerFactory.getLogger(TestSupport.class);
  @EndpointInject(uri="mock:a") MockEndpoint mockEndpoint;
  @Produce private ProducerTemplate template;
  private Integer port;
  @Before public void setUp() throws Exception {
    URL trustStoreUrl=Thread.currentThread().getContextClassLoader().getResource("jsse/localhost.ks");
    setSystemProp("javax.net.ssl.trustStore",trustStoreUrl.getPath());
  }
  @After public void tearDown() throws Exception {
    restoreSystemProperties();
  }
  private void setSystemProp(  String key,  String value){
    String originalValue=System.setProperty(key,value);
    originalValues.put(key,originalValue != null ? originalValue : NULL_VALUE_MARKER);
  }
  private void restoreSystemProperties(){
    for (    Object key : originalValues.keySet()) {
      Object value=originalValues.get(key);
      if (NULL_VALUE_MARKER.equals(value)) {
        System.clearProperty((String)key);
      }
 else {
        System.setProperty((String)key,(String)value);
      }
    }
  }
  @Test public void testEndpoint() throws Exception {
    mockEndpoint.reset();
    mockEndpoint.expectedBodiesReceived(expectedBody);
    template.sendBodyAndHeader("https://localhost:" + port + "/test",expectedBody,"Content-Type","application/xml");
    mockEndpoint.assertIsSatisfied();
    List<Exchange> list=mockEndpoint.getReceivedExchanges();
    Exchange exchange=list.get(0);
    Assert.assertNotNull("exchange",exchange);
    Message in=exchange.getIn();
    assertNotNull("in",in);
    Map<String,Object> headers=in.getHeaders();
    log.info("Headers: " + headers);
    assertTrue("Should be more than one header but was: " + headers,headers.size() > 0);
  }
  @Test public void testEndpointWithoutHttps(){
    mockEndpoint.reset();
    try {
      template.sendBodyAndHeader("http://localhost:" + port + "/test",expectedBody,"Content-Type","application/xml");
      fail("expect exception on access to https endpoint via http");
    }
 catch (    RuntimeCamelException expected) {
    }
    assertTrue("mock endpoint was not called",mockEndpoint.getExchanges().isEmpty());
  }
  public Integer getPort(){
    return port;
  }
  @Resource(name="dynaPort") public void setPort(  Integer port){
    this.port=port;
  }
}
