/** 
 * Test class for  {@link org.apache.camel.component.fhir.api.FhirLoadPage} APIs.The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirLoadPageIT extends AbstractFhirTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(FhirLoadPageIT.class);
  private static final String PATH_PREFIX=FhirApiCollection.getCollection().getApiName(FhirLoadPageApiMethod.class).getName();
  @Test public void testByUrl() throws Exception {
    String url="Patient?_count=2";
    Bundle bundle=this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_NEXT));
    String nextPageLink=bundle.getLink("next").getUrl();
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelFhir.url",nextPageLink);
    headers.put("CamelFhir.returnType",Bundle.class);
    IBaseBundle result=requestBodyAndHeaders("direct://BY_URL",null,headers);
    LOG.debug("byUrl: " + result);
    assertNotNull("byUrl result",result);
  }
  @Test public void testNext() throws Exception {
    String url="Patient?_count=2";
    Bundle bundle=this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_NEXT));
    Bundle result=requestBody("direct://NEXT",bundle);
    assertNotNull("next result",result);
    LOG.debug("next: " + result);
  }
  @Test public void testPrevious() throws Exception {
    String url="Patient?_count=2";
    Bundle bundle=this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_NEXT));
    String nextPageLink=bundle.getLink("next").getUrl();
    bundle=this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_PREV));
    Bundle result=requestBody("direct://PREVIOUS",bundle);
    LOG.debug("previous: " + result);
    assertNotNull("previous result",result);
  }
  @Test public void testPreviousWithEncodingEnum() throws Exception {
    String url="Patient?_count=2";
    Bundle bundle=this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_NEXT));
    String nextPageLink=bundle.getLink("next").getUrl();
    bundle=this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();
    assertNotNull(bundle.getLink(Bundle.LINK_PREV));
    Map<String,Object> headers=new HashMap<>();
    headers.put(ExtraParameters.ENCODING_ENUM.getHeaderName(),EncodingEnum.XML);
    Bundle result=requestBodyAndHeaders("direct://PREVIOUS",bundle,headers);
    LOG.debug("previous: " + result);
    assertNotNull("previous result",result);
  }
  @Before public void populateServer(){
    List<IBaseResource> input=new ArrayList<>();
    Patient p1=new Patient();
    p1.addName().setFamily("PATIENT1");
    input.add(p1);
    Patient p2=new Patient();
    p2.addName().setFamily("PATIENT2");
    input.add(p2);
    input.add(new Patient().addName(new HumanName().setFamily("PATIENT3")));
    List<IBaseResource> response=fhirClient.transaction().withResources(input).encodedJson().execute();
    assertEquals(3,response.size());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://BY_URL").to("fhir://" + PATH_PREFIX + "/byUrl");
        from("direct://NEXT").to("fhir://" + PATH_PREFIX + "/next?inBody=bundle");
        from("direct://PREVIOUS").to("fhir://" + PATH_PREFIX + "/previous?inBody=bundle");
      }
    }
;
  }
}
