/** 
 */
public class FileProducerMoveExistingStrategyTest extends ContextTestSupport {
  private MyStrategy myStrategy=new MyStrategy();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file");
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myStrategy",myStrategy);
    return jndi;
  }
  @Test public void testExistingFileExists() throws Exception {
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy","Hello World",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy","Bye Existing World 1",Exchange.FILE_NAME,"hello.txt");
    template.sendBodyAndHeader("file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy","Bye Existing World 2",Exchange.FILE_NAME,"hello.txt");
    assertFileExists("target/file/hello.txt");
    assertEquals("Bye Existing World 2",context.getTypeConverter().convertTo(String.class,new File("target/file/hello.txt")));
    assertFileExists("target/file/renamed-hello2.txt");
    assertEquals("Bye Existing World 1",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello2.txt")));
    assertFileExists("target/file/renamed-hello1.txt");
    assertEquals("Hello World",context.getTypeConverter().convertTo(String.class,new File("target/file/renamed-hello1.txt")));
  }
private static class MyStrategy implements FileMoveExistingStrategy {
    private static final Logger LOG=LoggerFactory.getLogger(FileMoveExistingStrategy.class);
    private int counter;
    @Override public boolean moveExistingFile(    GenericFileEndpoint endpoint,    GenericFileOperations operations,    String fileName) throws GenericFileOperationFailedException {
      Exchange dummy=endpoint.createExchange();
      String parent=FileUtil.onlyPath(fileName);
      String onlyName=FileUtil.stripPath(fileName);
      dummy.getIn().setHeader(Exchange.FILE_NAME,fileName);
      dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY,onlyName);
      dummy.getIn().setHeader(Exchange.FILE_PARENT,parent);
      String to=endpoint.getMoveExisting().evaluate(dummy,String.class);
      counter++;
      String fileNameWithoutExtension=to.substring(0,to.lastIndexOf('.')) + "" + counter;
      to=fileNameWithoutExtension + to.substring(to.lastIndexOf('.'),to.length());
      to=FileUtil.normalizePath(to);
      if (ObjectHelper.isEmpty(to)) {
        throw new GenericFileOperationFailedException("moveExisting evaluated as empty String, cannot move existing file: " + fileName);
      }
      File toFile=new File(to);
      String directory=toFile.getParent();
      boolean absolute=FileUtil.isAbsolute(toFile);
      if (directory != null) {
        if (!operations.buildDirectory(directory,absolute)) {
          LOG.debug("Cannot build directory [{}] (could be because of denied permissions)",directory);
        }
      }
      if (operations.existsFile(to)) {
        if (endpoint.isEagerDeleteTargetFile()) {
          LOG.trace("Deleting existing file: {}",to);
          if (!operations.deleteFile(to)) {
            throw new GenericFileOperationFailedException("Cannot delete file: " + to);
          }
        }
 else {
          throw new GenericFileOperationFailedException("Cannot moved existing file from: " + fileName + " to: "+ to+ " as there already exists a file: "+ to);
        }
      }
      LOG.trace("Moving existing file: {} to: {}",fileName,to);
      if (!operations.renameFile(fileName,to)) {
        throw new GenericFileOperationFailedException("Cannot rename file from: " + fileName + " to: "+ to);
      }
      return true;
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
