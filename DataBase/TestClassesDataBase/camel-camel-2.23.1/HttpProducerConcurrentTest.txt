/** 
 * HTTP producer concurrent test.
 * @version 
 */
public class HttpProducerConcurrentTest extends BaseJettyTest {
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").assertNoDuplicates(body());
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    Map<Integer,Future<String>> responses=new HashMap<>();
    for (int i=0; i < files; i++) {
      final int index=i;
      Future<String> out=executor.submit(new Callable<String>(){
        public String call() throws Exception {
          return template.requestBody("http://localhost:{{port}}/echo","" + index,String.class);
        }
      }
);
      responses.put(index,out);
    }
    assertMockEndpointsSatisfied();
    assertEquals(files,responses.size());
    Set<String> unique=new HashSet<>();
    for (    Future<String> future : responses.values()) {
      unique.add(future.get());
    }
    assertEquals("Should be " + files + " unique responses",files,unique.size());
    executor.shutdownNow();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("jetty:http://localhost:{{port}}/echo").transform(body().append(body())).to("mock:result");
      }
    }
;
  }
}
