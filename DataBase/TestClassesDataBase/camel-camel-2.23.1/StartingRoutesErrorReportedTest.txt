/** 
 * @version 
 */
public class StartingRoutesErrorReportedTest extends ContextTestSupport {
  @Test public void testInvalidFrom() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start?foo=bar").routeId("route1").to("mock:result");
        }
      }
);
      context.start();
      fail();
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getMessage().startsWith("Failed to create route route1: Route(route1)[[From[direct:start?foo=bar]] -> [To[mock:resul... because of"));
    }
  }
  @Test public void testInvalidTo() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").routeId("route2").to("direct:result?foo=bar");
        }
      }
);
      context.start();
      fail();
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route(route2)[[From[direct:start]] -> [To[direct:result?foo=... because of"));
    }
  }
  @Test public void testMaskPassword() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("stub:foo?password=secret&beer=yes").routeId("route2").to("direct:result?foo=bar");
        }
      }
);
      context.start();
      fail();
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route(route2)[[From[stub:foo?password=xxxxxx&beer=yes]] -> [... because of"));
    }
  }
  @Test public void testInvalidBean() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").routeId("route3").to("mock:foo").bean("");
        }
      }
);
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route(route3)[[From[direct:start]] -> [To[mock:foo], Bean[re... because of"));
    }
  }
  @Test public void testUnavailableDataFormatOnClasspath() throws Exception {
    try {
      context.addRoutes(new RouteBuilder(){
        @Override public void configure() throws Exception {
          from("direct:start").routeId("route3").unmarshal().jaxb().log("Will never get here");
        }
      }
);
      context.start();
      fail("Should have thrown exception");
    }
 catch (    FailedToCreateRouteException e) {
      assertTrue(e.getMessage().contains("Ensure that the data format is valid and the associated Camel component is present on the classpath"));
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
}
