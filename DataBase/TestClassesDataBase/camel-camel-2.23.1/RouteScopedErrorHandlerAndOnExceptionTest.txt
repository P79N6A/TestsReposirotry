/** 
 * Based on user forum issue
 * @version 
 */
public class RouteScopedErrorHandlerAndOnExceptionTest extends ContextTestSupport {
  @Test public void testOnException() throws Exception {
    RouteDefinition route=context.getRouteDefinitions().get(0);
    route.adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().throwException(new ConnectException("Forced"));
      }
    }
);
    getMockEndpoint("mock:local").expectedMessageCount(0);
    getMockEndpoint("mock:seda").expectedMessageCount(0);
    getMockEndpoint("mock:exhausted").expectedMessageCount(1);
    try {
      template.sendBody("direct:start","Hello World");
      fail("Should thrown an exception");
    }
 catch (    CamelExecutionException e) {
      ConnectException cause=assertIsInstanceOf(ConnectException.class,e.getCause());
      assertEquals("Forced",cause.getMessage());
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testErrorHandler() throws Exception {
    RouteDefinition route=context.getRouteDefinitions().get(0);
    route.adviceWith(context,new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().throwException(new FileNotFoundException("Forced"));
      }
    }
);
    getMockEndpoint("mock:local").expectedMessageCount(1);
    getMockEndpoint("mock:seda").expectedMessageCount(0);
    getMockEndpoint("mock:exhausted").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").errorHandler(deadLetterChannel("mock:local").maximumRedeliveries(2).redeliveryDelay(0)).onException(ConnectException.class).maximumRedeliveries(5).redeliveryDelay(0).logRetryAttempted(true).retryAttemptedLogLevel(LoggingLevel.WARN).to("mock:exhausted").end().to("seda:foo");
      }
    }
;
  }
}
