/** 
 * @version 
 */
public class CafeRouteBuilderTest extends CamelTestSupport {
  protected TestWaiter waiter=new TestWaiter();
  protected TestDrinkRouter driverRouter=new TestDrinkRouter();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("drinkRouter",driverRouter);
    jndi.bind("orderSplitter",new OrderSplitter());
    jndi.bind("barista",new Barista());
    jndi.bind("waiter",waiter);
    jndi.bind("aggregatorStrategy",new CafeAggregationStrategy());
    return jndi;
  }
  @Test public void testSplitter() throws InterruptedException {
    MockEndpoint coldDrinks=context.getEndpoint("mock:coldDrinks",MockEndpoint.class);
    MockEndpoint hotDrinks=context.getEndpoint("mock:hotDrinks",MockEndpoint.class);
    Order order=new Order(1);
    order.addItem(DrinkType.ESPRESSO,2,true);
    order.addItem(DrinkType.CAPPUCCINO,2,false);
    coldDrinks.expectedBodiesReceived(new OrderItem(order,DrinkType.ESPRESSO,2,true));
    hotDrinks.expectedBodiesReceived(new OrderItem(order,DrinkType.CAPPUCCINO,2,false));
    template.sendBody("direct:cafe",order);
    assertMockEndpointsSatisfied();
  }
  @Test public void testCafeRoute() throws Exception {
    driverRouter.setTestModel(false);
    List<Drink> drinks=new ArrayList<>();
    Order order=new Order(2);
    order.addItem(DrinkType.ESPRESSO,2,true);
    order.addItem(DrinkType.CAPPUCCINO,4,false);
    order.addItem(DrinkType.LATTE,4,false);
    order.addItem(DrinkType.MOCHA,2,false);
    drinks.add(new Drink(2,DrinkType.ESPRESSO,true,2));
    drinks.add(new Drink(2,DrinkType.CAPPUCCINO,false,4));
    drinks.add(new Drink(2,DrinkType.LATTE,false,4));
    drinks.add(new Drink(2,DrinkType.MOCHA,false,2));
    waiter.setVerfiyDrinks(drinks);
    template.sendBody("direct:cafe",order);
    Thread.sleep(10000);
    waiter.verifyDrinks();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new CafeRouteBuilder();
  }
}
