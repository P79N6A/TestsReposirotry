public class CqlSpanDecoratorTest {
  @Test public void testPreCqlFromUri(){
    String cql="select%20*%20from%20users";
    String keyspace="test";
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Exchange exchange=Mockito.mock(Exchange.class);
    Message message=Mockito.mock(Message.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("cql://host1,host2:8080/" + keyspace + "?cql="+ cql+ "&consistencyLevel=quorum");
    Mockito.when(exchange.getIn()).thenReturn(message);
    SpanDecorator decorator=new CqlSpanDecorator();
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,exchange,endpoint);
    assertEquals(CqlSpanDecorator.CASSANDRA_DB_TYPE,span.tags().get(Tags.DB_TYPE.getKey()));
    assertEquals(cql,span.tags().get(Tags.DB_STATEMENT.getKey()));
    assertEquals(keyspace,span.tags().get(Tags.DB_INSTANCE.getKey()));
  }
  @Test public void testPreCqlFromHeader(){
    String cql="select * from users";
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Exchange exchange=Mockito.mock(Exchange.class);
    Message message=Mockito.mock(Message.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("cql://host1,host2?consistencyLevel=quorum");
    Mockito.when(exchange.getIn()).thenReturn(message);
    Mockito.when(message.getHeader(CqlSpanDecorator.CAMEL_CQL_QUERY)).thenReturn(cql);
    SpanDecorator decorator=new CqlSpanDecorator();
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,exchange,endpoint);
    assertEquals(CqlSpanDecorator.CASSANDRA_DB_TYPE,span.tags().get(Tags.DB_TYPE.getKey()));
    assertEquals(cql,span.tags().get(Tags.DB_STATEMENT.getKey()));
    assertNull(span.tags().get(Tags.DB_INSTANCE.getKey()));
  }
}
