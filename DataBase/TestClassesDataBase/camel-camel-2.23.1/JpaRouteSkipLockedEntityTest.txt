/** 
 * @version
 */
@Ignore("Need the fix of OPENJPA-2461") public class JpaRouteSkipLockedEntityTest extends AbstractJpaTest {
  protected static final String SELECT_ALL_STRING="select x from " + VersionedItem.class.getName() + " x";
  private int count;
  private final ReentrantLock lock=new ReentrantLock();
  private Condition cond1=lock.newCondition();
  @Test public void testRouteJpa() throws Exception {
    MockEndpoint mock1=getMockEndpoint("mock:result1");
    mock1.expectedMessageCount(2);
    MockEndpoint mock2=getMockEndpoint("mock:result2");
    mock2.expectedMessageCount(2);
    template.sendBody("jpa://" + VersionedItem.class.getName(),new VersionedItem("one"));
    template.sendBody("jpa://" + VersionedItem.class.getName(),new VersionedItem("two"));
    template.sendBody("jpa://" + VersionedItem.class.getName(),new VersionedItem("three"));
    template.sendBody("jpa://" + VersionedItem.class.getName(),new VersionedItem("four"));
    this.context.startRoute("second");
    this.context.startRoute("first");
    assertMockEndpointsSatisfied();
    this.context.stopRoute("first");
    this.context.stopRoute("second");
    setLockTimeout(60);
    List<?> list=entityManager.createQuery(selectAllString()).getResultList();
    assertEquals(0,list.size());
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new SpringRouteBuilder(){
      @Override public void configure(){
        String options="?consumer.skipLockedEntity=true";
        from("jpa://" + VersionedItem.class.getName() + options).routeId("first").autoStartup(false).bean(new WaitLatch()).log("route1: ${body}").to("mock:result1");
        from("jpa2://select" + options + "&consumer.query=select s from VersionedItem s").routeId("second").autoStartup(false).bean(new WaitLatch()).log("route2: ${body}").to("mock:result2");
      }
    }
;
  }
  @Override protected String routeXml(){
    return "org/apache/camel/processor/jpa/springJpaRouteSkipLockedTest.xml";
  }
  @Override protected String selectAllString(){
    return SELECT_ALL_STRING;
  }
public class WaitLatch {
    public void onMessage(    VersionedItem body) throws Exception {
      lock.lock();
      try {
        count++;
        cond1.signal();
        if (count != 4) {
          cond1.await();
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    setLockTimeout(0);
  }
  public void setLockTimeout(  int timeout) throws SQLException {
    entityManager.getTransaction().begin();
    Connection connection=entityManager.unwrap(java.sql.Connection.class);
    connection.createStatement().execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.locks.waitTimeout', '" + timeout + "')");
    entityManager.getTransaction().commit();
  }
}
