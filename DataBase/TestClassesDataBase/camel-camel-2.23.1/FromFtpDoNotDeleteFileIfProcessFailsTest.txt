/** 
 * @version 
 */
public class FromFtpDoNotDeleteFileIfProcessFailsTest extends FtpServerTestSupport {
  private String getFtpUrl(){
    return "ftp://admin@localhost:" + getPort() + "/deletefile/?password=admin&delete=true";
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    prepareFtpServer();
  }
  @Test public void testPollFileAndShouldNotBeDeleted() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:error");
    mock.expectedMessageCount(1);
    mock.expectedBodiesReceived("Hello World this file will NOT be deleted");
    mock.assertIsSatisfied();
    Thread.sleep(200);
    File file=new File(FTP_ROOT_DIR + "/deletefile/hello.txt");
    assertTrue("The file should NOT have been deleted",file.exists());
  }
  private void prepareFtpServer() throws Exception {
    Endpoint endpoint=context.getEndpoint(getFtpUrl());
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setBody("Hello World this file will NOT be deleted");
    exchange.getIn().setHeader(Exchange.FILE_NAME,"hello.txt");
    Producer producer=endpoint.createProducer();
    producer.start();
    producer.process(exchange);
    producer.stop();
    File file=new File(FTP_ROOT_DIR + "/deletefile/hello.txt");
    assertTrue("The file should exists",file.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        onException(IllegalArgumentException.class).maximumRedeliveries(2).redeliveryDelay(0).to("mock:error");
        from(getFtpUrl()).process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new IllegalArgumentException("Forced by unittest");
          }
        }
);
      }
    }
;
  }
}
