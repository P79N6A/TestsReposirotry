/** 
 * Test behavior in the component for initializing an endpoint. Not much here beyond checking that the code for the required and mutually exclusive params is working.
 */
public class JMXComponentTest {
  DefaultCamelContext context=new DefaultCamelContext();
  @Test public void withObjectProperties() throws Exception {
    JMXEndpoint ep=context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.propOne=prop1&key.propTwo=prop2",JMXEndpoint.class);
    assertNotNull(ep);
    Map<String,String> props=ep.getObjectProperties();
    assertEquals(2,props.size());
    assertEquals("prop1",props.get("propOne"));
    assertEquals("prop2",props.get("propTwo"));
    assertNull(ep.getObjectName());
  }
  @Test public void withObjectName() throws Exception {
    JMXEndpoint ep=context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName",JMXEndpoint.class);
    assertNotNull(ep);
    assertEquals("theObjectName",ep.getObjectName());
    Map<String,String> props=ep.getObjectProperties();
    assertNull(props);
  }
  @Test public void withObjectNameAndObjectProperties() throws Exception {
    try {
      context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&key.propOne=prop1");
      fail("expected exception");
    }
 catch (    ResolveEndpointFailedException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
    }
  }
  @Test public void withoutDomain() throws Exception {
    try {
      context.getEndpoint("jmx:platform?objectName=theObjectName");
      fail("missing domain should have caused failure");
    }
 catch (    ResolveEndpointFailedException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
    }
  }
  @Test public void withoutObjectNameAndObjectProperties() throws Exception {
    try {
      context.getEndpoint("jmx:platform?objectDomain=theObjectDomain");
      fail("missing name should have caused failure");
    }
 catch (    ResolveEndpointFailedException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
    }
  }
}
