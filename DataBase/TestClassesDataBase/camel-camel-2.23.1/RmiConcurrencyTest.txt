/** 
 * @version 
 */
public class RmiConcurrencyTest extends RmiRouteTestSupport {
  protected int getStartPort(){
    return 37500;
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    if (classPathHasSpaces()) {
      return null;
    }
    LocateRegistry.createRegistry(getPort());
    JndiRegistry context=super.createRegistry();
    context.bind("echo",new EchoService());
    return context;
  }
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    if (classPathHasSpaces()) {
      return;
    }
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").assertNoDuplicates(body());
    getMockEndpoint("mock:result").message(0).body().contains("Echo");
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          template.sendBody("direct:echo","" + index);
          return null;
        }
      }
);
    }
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        RmiEndpoint echo=(RmiEndpoint)endpoint("rmi://localhost:" + getPort() + "/echo");
        echo.setRemoteInterfaces(IEcho.class);
        from(echo).to("bean:echo");
        from("direct:echo").toF("rmi://localhost:%s/echo?method=echo",getPort()).to("mock:result");
      }
    }
;
  }
}
