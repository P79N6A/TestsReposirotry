/** 
 * Small unit test which verifies ical data format.
 */
public class ICalDataFormatTest extends CamelTestSupport {
  private java.util.TimeZone defaultTimeZone;
  @Override @Before public void setUp() throws Exception {
    defaultTimeZone=java.util.TimeZone.getDefault();
    java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone("America/New_York"));
    super.setUp();
  }
  @Override @After public void tearDown() throws Exception {
    java.util.TimeZone.setDefault(defaultTimeZone);
    super.tearDown();
  }
  @Test public void testUnmarshal() throws Exception {
    InputStream stream=IOConverter.toInputStream(new File("src/test/resources/data.ics"));
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    endpoint.expectedBodiesReceived(createTestCalendar());
    template.sendBody("direct:unmarshal",stream);
    endpoint.assertIsSatisfied();
  }
  @Test public void testMarshal() throws Exception {
    Calendar testCalendar=createTestCalendar();
    MockEndpoint endpoint=getMockEndpoint("mock:result");
    endpoint.expectedBodiesReceived(testCalendar.toString());
    template.sendBody("direct:marshal",testCalendar);
    endpoint.assertIsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:unmarshal").unmarshal("ical").to("mock:result");
        from("direct:marshal").marshal("ical").to("mock:result");
      }
    }
;
  }
  /** 
 * Creates test calendar instance.
 * @return ICal calendar object.
 */
  protected Calendar createTestCalendar() throws ParseException {
    TimeZoneRegistry registry=TimeZoneRegistryFactory.getInstance().createRegistry();
    TimeZone timezone=registry.getTimeZone("America/New_York");
    VTimeZone tz=timezone.getVTimeZone();
    java.util.Calendar startDate=new GregorianCalendar();
    startDate.setTimeZone(timezone);
    startDate.set(java.util.Calendar.MONTH,java.util.Calendar.APRIL);
    startDate.set(java.util.Calendar.DAY_OF_MONTH,1);
    startDate.set(java.util.Calendar.YEAR,2013);
    startDate.set(java.util.Calendar.HOUR_OF_DAY,17);
    startDate.set(java.util.Calendar.MINUTE,0);
    startDate.set(java.util.Calendar.SECOND,0);
    java.util.Calendar endDate=new GregorianCalendar();
    endDate.setTimeZone(timezone);
    endDate.set(java.util.Calendar.MONTH,java.util.Calendar.APRIL);
    endDate.set(java.util.Calendar.DAY_OF_MONTH,1);
    endDate.set(java.util.Calendar.YEAR,2013);
    endDate.set(java.util.Calendar.HOUR_OF_DAY,21);
    endDate.set(java.util.Calendar.MINUTE,0);
    endDate.set(java.util.Calendar.SECOND,0);
    PropertyList propertyList=new PropertyList();
    propertyList.add(new DtStamp("20130324T180000Z"));
    propertyList.add(new DtStart(new DateTime(startDate.getTime())));
    propertyList.add(new DtEnd(new DateTime(endDate.getTime())));
    propertyList.add(new Summary("Progress Meeting"));
    VEvent meeting=new VEvent(propertyList);
    meeting.getProperties().add(tz.getTimeZoneId());
    meeting.getProperties().add(new Uid("00000000"));
    Attendee dev1=new Attendee(URI.create("mailto:dev1@mycompany.com"));
    dev1.getParameters().add(Role.REQ_PARTICIPANT);
    dev1.getParameters().add(new Cn("Developer 1"));
    meeting.getProperties().add(dev1);
    Attendee dev2=new Attendee(URI.create("mailto:dev2@mycompany.com"));
    dev2.getParameters().add(Role.OPT_PARTICIPANT);
    dev2.getParameters().add(new Cn("Developer 2"));
    meeting.getProperties().add(dev2);
    net.fortuna.ical4j.model.Calendar icsCalendar=new net.fortuna.ical4j.model.Calendar();
    icsCalendar.getProperties().add(Version.VERSION_2_0);
    icsCalendar.getProperties().add(new ProdId("-//Events Calendar//iCal4j 1.0//EN"));
    icsCalendar.getProperties().add(CalScale.GREGORIAN);
    icsCalendar.getComponents().add(meeting);
    return icsCalendar;
  }
}
