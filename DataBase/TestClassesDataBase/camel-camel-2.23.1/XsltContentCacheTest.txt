/** 
 */
public class XsltContentCacheTest extends ContextTestSupport {
  private static final String ORIGINAL_XSL="<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">" + "<xsl:template match=\"/\"><goodbye><xsl:value-of select=\"/hello\"/></goodbye></xsl:template>" + "</xsl:stylesheet>";
  private static final String NEW_XSL="<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">" + "<xsl:template match=\"/\"><goodnight><xsl:value-of select=\"/hello\"/></goodnight></xsl:template>" + "</xsl:stylesheet>";
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",ORIGINAL_XSL,Exchange.FILE_NAME,"hello.xsl");
    super.startCamelContext();
  }
  @Override public boolean useJmx(){
    return true;
  }
  @Override protected void startCamelContext() throws Exception {
  }
  @Test public void testNotCached() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:a","<hello>world!</hello>");
    mock.assertIsSatisfied();
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",NEW_XSL,Exchange.FILE_NAME,"hello.xsl");
    mock.reset();
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodnight>world!</goodnight>");
    template.sendBody("direct:a","<hello>world!</hello>");
    mock.assertIsSatisfied();
  }
  @Test public void testCached() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:b","<hello>world!</hello>");
    mock.assertIsSatisfied();
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",NEW_XSL,Exchange.FILE_NAME,"hello.xsl");
    mock.reset();
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:b","<hello>world!</hello>");
    mock.assertIsSatisfied();
  }
  @Test public void testCachedIsDefault() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:c","<hello>world!</hello>");
    mock.assertIsSatisfied();
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",NEW_XSL,Exchange.FILE_NAME,"hello.xsl");
    mock.reset();
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:c","<hello>world!</hello>");
    mock.assertIsSatisfied();
  }
  @Test public void testClearCachedStylesheetViaJmx() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:b","<hello>world!</hello>");
    mock.assertIsSatisfied();
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",NEW_XSL,Exchange.FILE_NAME,"hello.xsl");
    mock.reset();
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>");
    template.sendBody("direct:b","<hello>world!</hello>");
    mock.assertIsSatisfied();
    MBeanServer mbeanServer=context.getManagementStrategy().getManagementAgent().getMBeanServer();
    Set<ObjectName> objNameSet=mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,name=\"xslt:*contentCache=true*\",*"),null);
    ObjectName managedObjName=new ArrayList<>(objNameSet).get(0);
    mbeanServer.invoke(managedObjName,"clearCachedStylesheet",null,null);
    template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override",NEW_XSL,Exchange.FILE_NAME,"hello.xsl");
    mock.reset();
    mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodnight>world!</goodnight>");
    template.sendBody("direct:b","<hello>world!</hello>");
    mock.assertIsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:a").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=false").to("mock:result");
        from("direct:b").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=true").to("mock:result");
        from("direct:c").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string").to("mock:result");
      }
    }
;
  }
}
