public class RestCamelComponentVerifierTest extends BaseHttpTest {
  private HttpServer localServer;
  @Before @Override public void setUp() throws Exception {
    localServer=ServerBootstrap.bootstrap().setHttpProcessor(getHttpProcessor()).registerHandler("/verify",new BasicValidationHandler("GET",null,null,getExpectedContent())).create();
    localServer.start();
    super.setUp();
  }
  @After @Override public void tearDown() throws Exception {
    super.tearDown();
    if (localServer != null) {
      localServer.stop();
    }
  }
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  private HttpProcessor getHttpProcessor(){
    return new ImmutableHttpProcessor(Arrays.asList(new RequestBasicAuth()),Arrays.asList(new ResponseContent(),new ResponseBasicUnauthorized()));
  }
  protected String getLocalServerUri(  String contextPath){
    return new StringBuilder().append("http://").append(localServer.getInetAddress().getHostName()).append(":").append(localServer.getLocalPort()).append(contextPath != null ? contextPath.startsWith("/") ? contextPath : "/" + contextPath : "").toString();
  }
  @Test public void testParameters() throws Exception {
    RestComponent component=context().getComponent("rest",RestComponent.class);
    ComponentVerifierExtension verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","http4");
    parameters.put("host","http://localhost:" + localServer.getLocalPort());
    parameters.put("path","verify");
    parameters.put("method","get");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
  @Test public void testMissingRestParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifierExtension verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","http4");
    parameters.put("host","http://localhost:" + localServer.getLocalPort());
    parameters.put("path","verify");
    parameters.put("copyHeaders",false);
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("method"));
  }
  @Test public void testWrongComponentParameters() throws Exception {
    RestComponent component=context.getComponent("rest",RestComponent.class);
    ComponentVerifierExtension verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","http4");
    parameters.put("host","http://localhost:" + localServer.getLocalPort());
    parameters.put("path","verify");
    parameters.put("method","get");
    parameters.put("nonExistingOption",true);
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR,result.getStatus());
    Assert.assertEquals(1,result.getErrors().size());
    Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.UNKNOWN_PARAMETER,result.getErrors().get(0).getCode());
    Assert.assertEquals(1,result.getErrors().get(0).getParameterKeys().size());
    Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("nonExistingOption"));
  }
  @Test public void testConnectivity() throws Exception {
    RestComponent component=context().getComponent("rest",RestComponent.class);
    ComponentVerifierExtension verifier=component.getVerifier();
    Map<String,Object> parameters=new HashMap<>();
    parameters.put("componentName","http4");
    parameters.put("host","http://localhost:" + localServer.getLocalPort());
    parameters.put("path","verify");
    parameters.put("method","get");
    ComponentVerifierExtension.Result result=verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY,parameters);
    Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK,result.getStatus());
  }
}
