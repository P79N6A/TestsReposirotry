/** 
 * @version 
 */
public class SqlProducerInsertNullTest extends CamelTestSupport {
  private EmbeddedDatabase db;
  @Before public void setUp() throws Exception {
    db=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase2.sql").build();
    super.setUp();
  }
  @After public void tearDown() throws Exception {
    super.tearDown();
    db.shutdown();
  }
  @Test public void testInsertNull() throws Exception {
    Map<String,Object> map=new HashMap<>();
    map.put("id",4);
    map.put("project","Foo");
    map.put("lic","ASF");
    map.put("description",null);
    template.sendBody("direct:insert",map);
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","Foo");
    mock.assertIsSatisfied();
    List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
    assertEquals(1,received.size());
    Map<?,?> row=assertIsInstanceOf(Map.class,received.get(0));
    assertEquals("Foo",row.get("project"));
    assertEquals("ASF",row.get("license"));
    assertEquals(null,row.get("description"));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
        from("direct:insert").to("sql:insert into projects (id, project, license, description) values (:#id, :#project, :#lic, :#description)");
        from("direct:start").to("sql:select * from projects where project = #").to("mock:result");
      }
    }
;
  }
}
