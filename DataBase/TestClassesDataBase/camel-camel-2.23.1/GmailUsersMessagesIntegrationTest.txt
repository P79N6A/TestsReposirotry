/** 
 * Test class for  {@link com.google.api.services.gmail.Gmail$Users$Messages}APIs.
 */
public class GmailUsersMessagesIntegrationTest extends AbstractGoogleMailTestSupport {
  public static final String CURRENT_USERID="me";
  private static final Logger LOG=LoggerFactory.getLogger(GmailUsersMessagesIntegrationTest.class);
  private static final String PATH_PREFIX=GoogleMailApiCollection.getCollection().getApiName(GmailUsersMessagesApiMethod.class).getName();
  @Test public void testMessages() throws Exception {
    Message testEmail=createTestEmail();
    Map<String,Object> headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.content",testEmail);
    com.google.api.services.gmail.model.Message result=requestBodyAndHeaders("direct://SEND",null,headers);
    assertNotNull("send result",result);
    String testEmailId=result.getId();
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.q","subject:\"Hello from camel-google-mail\"");
    ListMessagesResponse listOfMessages=requestBody("direct://LIST",CURRENT_USERID);
    assertTrue(idInList(testEmailId,listOfMessages));
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.id",testEmailId);
    requestBodyAndHeaders("direct://TRASH",null,headers);
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.q","subject:\"Hello from camel-google-mail\"");
    listOfMessages=requestBody("direct://LIST",CURRENT_USERID);
    assertFalse(idInList(testEmailId,listOfMessages));
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.id",testEmailId);
    requestBodyAndHeaders("direct://UNTRASH",null,headers);
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.q","subject:\"Hello from camel-google-mail\"");
    listOfMessages=requestBody("direct://LIST",CURRENT_USERID);
    assertTrue(idInList(testEmailId,listOfMessages));
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.userId",CURRENT_USERID);
    headers.put("CamelGoogleMail.id",testEmailId);
    requestBodyAndHeaders("direct://DELETE",null,headers);
    headers=new HashMap<>();
    headers.put("CamelGoogleMail.q","subject:\"Hello from camel-google-mail\"");
    listOfMessages=requestBody("direct://LIST",CURRENT_USERID);
    assertFalse(idInList(testEmailId,listOfMessages));
  }
  private boolean idInList(  String testEmailId,  ListMessagesResponse listOfMessages){
    assertNotNull("list result",listOfMessages);
    assertTrue(!listOfMessages.getMessages().isEmpty());
    boolean foundMessage=false;
    for (    Message m : listOfMessages.getMessages()) {
      if (testEmailId.equals(m.getId())) {
        return true;
      }
    }
    return false;
  }
  private Message createTestEmail() throws MessagingException, IOException {
    com.google.api.services.gmail.model.Profile profile=requestBody("google-mail://users/getProfile?inBody=userId",CURRENT_USERID);
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    MimeMessage mm=new MimeMessage(session);
    mm.addRecipients(javax.mail.Message.RecipientType.TO,profile.getEmailAddress());
    mm.setSubject("Hello from camel-google-mail");
    mm.setContent("Camel rocks!","text/plain");
    Message createMessageWithEmail=createMessageWithEmail(mm);
    return createMessageWithEmail;
  }
  private MimeMessage toMimeMessage(  Message message) throws MessagingException {
    byte[] emailBytes=Base64.decodeBase64(message.getRaw());
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    return new MimeMessage(session,new ByteArrayInputStream(emailBytes));
  }
  private Message createMessageWithEmail(  MimeMessage email) throws MessagingException, IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    email.writeTo(baos);
    String encodedEmail=Base64.encodeBase64URLSafeString(baos.toByteArray());
    Message message=new Message();
    message.setRaw(encodedEmail);
    return message;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("direct://ATTACHMENTS").to("google-mail://" + PATH_PREFIX + "/attachments");
        from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete");
        from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get");
        from("direct://GMAILIMPORT").to("google-mail://" + PATH_PREFIX + "/gmailImport");
        from("direct://GMAILIMPORT_1").to("google-mail://" + PATH_PREFIX + "/gmailImport");
        from("direct://INSERT").to("google-mail://" + PATH_PREFIX + "/insert");
        from("direct://INSERT_1").to("google-mail://" + PATH_PREFIX + "/insert");
        from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId");
        from("direct://MODIFY").to("google-mail://" + PATH_PREFIX + "/modify");
        from("direct://SEND").to("google-mail://" + PATH_PREFIX + "/send");
        from("direct://SEND_1").to("google-mail://" + PATH_PREFIX + "/send");
        from("direct://TRASH").to("google-mail://" + PATH_PREFIX + "/trash");
        from("direct://UNTRASH").to("google-mail://" + PATH_PREFIX + "/untrash");
      }
    }
;
  }
}
