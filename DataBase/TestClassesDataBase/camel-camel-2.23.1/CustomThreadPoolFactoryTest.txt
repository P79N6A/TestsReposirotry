/** 
 * @version 
 */
@ContextConfiguration public class CustomThreadPoolFactoryTest extends SpringRunWithTestSupport {
  @Autowired protected CamelContext context;
  @Test public void testCustomThreadPoolFactory() throws Exception {
    context.getExecutorServiceManager().newSingleThreadExecutor(this,"foo");
    MyCustomThreadPoolFactory factory=assertIsInstanceOf(MyCustomThreadPoolFactory.class,context.getExecutorServiceManager().getThreadPoolFactory());
    assertTrue("Should use custom thread pool factory",factory.isInvoked());
  }
public static class MyCustomThreadPoolFactory extends DefaultThreadPoolFactory {
    private volatile boolean invoked;
    @Override public ExecutorService newCachedThreadPool(    ThreadFactory threadFactory){
      invoked=true;
      return super.newCachedThreadPool(threadFactory);
    }
    @Override public ExecutorService newThreadPool(    int corePoolSize,    int maxPoolSize,    long keepAliveTime,    TimeUnit timeUnit,    int maxQueueSize,    boolean allowCoreThreadTimeOut,    RejectedExecutionHandler rejectedExecutionHandler,    ThreadFactory threadFactory) throws IllegalArgumentException {
      invoked=true;
      return super.newThreadPool(corePoolSize,maxPoolSize,keepAliveTime,timeUnit,maxQueueSize,allowCoreThreadTimeOut,rejectedExecutionHandler,threadFactory);
    }
    public boolean isInvoked(){
      return invoked;
    }
  }
}
