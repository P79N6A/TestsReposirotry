public class JdbcAggregateNotLostTest extends AbstractJdbcAggregationTestSupport {
  @Test public void testJdbcAggregateNotLost() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("ABCDE");
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","A","id",123);
    template.sendBodyAndHeader("direct:start","B","id",123);
    template.sendBodyAndHeader("direct:start","C","id",123);
    template.sendBodyAndHeader("direct:start","D","id",123);
    template.sendBodyAndHeader("direct:start","E","id",123);
    assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
    String exchangeId=getMockEndpoint("mock:aggregated").getReceivedExchanges().get(0).getExchangeId();
    Exchange completed=repo.recover(context,exchangeId);
    assertNotNull(completed);
    assertEquals(exchangeId,completed.getExchangeId());
    assertEquals("ABCDE",completed.getIn().getBody());
    assertEquals(123,completed.getIn().getHeader("id"));
    assertEquals("size",completed.getProperty(Exchange.AGGREGATED_COMPLETED_BY));
    assertEquals(5,completed.getProperty(Exchange.AGGREGATED_SIZE));
    assertEquals("123",completed.getProperty(Exchange.AGGREGATED_CORRELATION_KEY));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end();
      }
    }
;
  }
}
