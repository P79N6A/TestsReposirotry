/** 
 */
public class CustomAggregationStrategyServiceTest extends ContextTestSupport {
  private MyCustomStrategy strategy=new MyCustomStrategy();
  @Test public void testCustomAggregationStrategy() throws Exception {
    assertTrue("Should be started",strategy.start);
    assertFalse("Should not be stopped",strategy.stop);
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","100","id","1");
    template.sendBodyAndHeader("direct:start","150","id","1");
    template.sendBodyAndHeader("direct:start","130","id","1");
    assertMockEndpointsSatisfied();
    context.stop();
    assertFalse("Should not be started",strategy.start);
    assertTrue("Should be stopped",strategy.stop);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(strategy).header("id").completionSize(3).to("mock:result");
      }
    }
;
  }
public final class MyCustomStrategy extends ServiceSupport implements AggregationStrategy {
    public boolean stop;
    public boolean start;
    @Override public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      return newExchange;
    }
    @Override protected void doStart() throws Exception {
      start=true;
      stop=false;
    }
    @Override protected void doStop() throws Exception {
      stop=true;
      start=false;
    }
  }
}
