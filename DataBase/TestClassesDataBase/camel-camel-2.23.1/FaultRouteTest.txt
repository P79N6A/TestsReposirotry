/** 
 * @version 
 */
public class FaultRouteTest extends ContextTestSupport {
  protected MockEndpoint a;
  protected MockEndpoint b;
  protected MockEndpoint c;
  protected MockEndpoint err;
  @Test public void testWithOut() throws Exception {
    a.whenExchangeReceived(1,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getOut().setBody("out");
      }
    }
);
    a.expectedMessageCount(1);
    b.expectedBodiesReceived("out");
    template.sendBody("direct:start","in");
    assertMockEndpointsSatisfied();
  }
  @Test public void testWithFault() throws Exception {
    a.whenExchangeReceived(1,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getOut().setFault(true);
        exchange.getOut().setBody("fault");
      }
    }
);
    a.expectedMessageCount(1);
    b.expectedMessageCount(0);
    Exchange response=template.request("direct:start",new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody("in");
      }
    }
);
    assertMockEndpointsSatisfied();
    assertFalse("Fault should be removed",response.hasOut());
    assertNotNull("Should have exception",response.getException());
    assertEquals("fault",response.getException().getMessage());
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    a=resolveMandatoryEndpoint("mock:a",MockEndpoint.class);
    b=resolveMandatoryEndpoint("mock:b",MockEndpoint.class);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        getContext().addInterceptStrategy(new HandleFault());
        from("direct:start").to("mock:a").to("mock:b");
      }
    }
;
  }
}
