/** 
 */
public class RedeliverToSubRouteTest extends ContextTestSupport {
  @Test public void testRedeliverToSubRoute() throws Exception {
    getMockEndpoint("mock:a").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:b").expectedBodiesReceived("Hello World","Hello World","Hello World");
    getMockEndpoint("mock:c").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        onException(IOException.class).maximumRedeliveries(2).redeliveryDelay(0);
        from("direct:start").to("mock:a").to("direct:sub").to("mock:c");
        from("direct:sub").errorHandler(noErrorHandler()).to("mock:b").process(new MyProcessor());
      }
    }
;
  }
public static class MyProcessor implements Processor {
    private int counter;
    @Override public void process(    Exchange exchange) throws Exception {
      if (counter++ < 2) {
        throw new IOException("Forced");
      }
      exchange.getIn().setBody("Bye World");
    }
  }
}
