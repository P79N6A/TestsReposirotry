public class DelegateEndpointQuartzTest extends CamelTestSupport {
  @Test public void testQuartzCronRoute() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMinimumMessageCount(3);
    assertMockEndpointsSatisfied();
    JobDetail job=mock.getReceivedExchanges().get(0).getIn().getHeader("jobDetail",JobDetail.class);
    assertNotNull(job);
    assertEquals("cron",job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE));
    assertEquals("0/2 * * * * ?",job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION));
  }
  @Override protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("my:quartz://myGroup/myTimerName?cron=0/2+*+*+*+*+?").to("mock:result");
      }
    }
;
  }
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry=new JndiRegistry(createJndiContext());
    registry.bind("my",new MyComponent());
    return registry;
  }
class MyComponent extends DefaultComponent {
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map<String,Object> parameters) throws Exception {
      String childUri=remaining;
      if (parameters != null && parameters.size() > 0) {
        childUri=childUri + "?" + URISupport.createQueryString(parameters);
      }
      parameters.clear();
      Endpoint childEndpoint=context.getEndpoint(childUri);
      return new MyEndpoint(uri,childEndpoint);
    }
  }
class MyEndpoint extends DefaultEndpoint implements DelegateEndpoint {
    private final Endpoint childEndpoint;
    MyEndpoint(    String uri,    Endpoint childEndpoint){
      super(uri);
      this.childEndpoint=childEndpoint;
    }
    @Override public Producer createProducer() throws Exception {
      return childEndpoint.createProducer();
    }
    @Override public Consumer createConsumer(    Processor processor) throws Exception {
      return childEndpoint.createConsumer(processor);
    }
    @Override public boolean isSingleton(){
      return false;
    }
    @Override public Endpoint getEndpoint(){
      return childEndpoint;
    }
    @Override protected String createEndpointUri(){
      return "my:" + childEndpoint.getEndpointUri();
    }
  }
}
