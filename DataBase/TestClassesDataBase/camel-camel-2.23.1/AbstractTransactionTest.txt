/** 
 * Test case derived from: http://camel.apache.org/transactional-client.html and Martin Krasser's sample: http://www.nabble.com/JMS-Transactions---How-To-td15168958s22882.html#a15198803
 */
public abstract class AbstractTransactionTest extends CamelSpringTestSupport {
  @After public void tearDown() throws Exception {
    super.tearDown();
    setCamelContextService(null);
    context=null;
    template=null;
  }
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/component/jms/tx/JavaDSLTransactionTest.xml");
  }
  protected void assertResult() throws InterruptedException {
    NotifyBuilder notify=new NotifyBuilder(context).whenDone(2).create();
    template.sendBody("activemq:queue:foo","blah");
    notify.matchesMockWaitTime();
    assertTrue("Expected only 2 calls to process() (1 failure, 1 success) but encountered " + getConditionalExceptionProcessor().getCount() + ".",getConditionalExceptionProcessor().getCount() == 2);
  }
  protected ConditionalExceptionProcessor getConditionalExceptionProcessor(){
    Route route=context.getRoutes().get(0);
    assertNotNull(route);
    return getConditionalExceptionProcessor(route);
  }
  /** 
 * By default routes should be wrapped in the  {@link DeadLetterChannel} solets unwrap that and return the actual processor
 */
  protected ConditionalExceptionProcessor getConditionalExceptionProcessor(  Route route){
    EventDrivenConsumerRoute consumerRoute=assertIsInstanceOf(EventDrivenConsumerRoute.class,route);
    Processor processor=findProcessorByClass(consumerRoute.getProcessor(),ConditionalExceptionProcessor.class);
    return assertIsInstanceOf(ConditionalExceptionProcessor.class,processor);
  }
  protected Processor findProcessorByClass(  Processor processor,  Class<?> findClass){
    while (true) {
      processor=unwrapDeadLetter(processor);
      if (processor instanceof Channel) {
        processor=((Channel)processor).getNextProcessor();
      }
 else       if (processor instanceof DelegateProcessor) {
        processor=((DelegateProcessor)processor).getProcessor();
      }
 else       if (processor instanceof Pipeline) {
        for (        Processor p : ((Pipeline)processor).getProcessors()) {
          p=findProcessorByClass(p,findClass);
          if (p != null && p.getClass().isAssignableFrom(findClass)) {
            processor=p;
            return processor;
          }
        }
      }
 else {
        return processor;
      }
    }
  }
  private Processor unwrapDeadLetter(  Processor processor){
    while (true) {
      if (processor instanceof Channel) {
        processor=((Channel)processor).getNextProcessor();
      }
 else       if (processor instanceof DeadLetterChannel) {
        processor=((DeadLetterChannel)processor).getOutput();
      }
 else       if (processor instanceof DefaultErrorHandler) {
        processor=((DefaultErrorHandler)processor).getOutput();
      }
 else       if (processor instanceof TransactionErrorHandler) {
        processor=((TransactionErrorHandler)processor).getOutput();
      }
 else {
        return processor;
      }
    }
  }
}
