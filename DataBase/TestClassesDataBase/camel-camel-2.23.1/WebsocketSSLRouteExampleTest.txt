public class WebsocketSSLRouteExampleTest extends CamelTestSupport {
  private static final String NULL_VALUE_MARKER=CamelTestSupport.class.getCanonicalName();
  private static List<String> received=new ArrayList<>();
  private static CountDownLatch latch=new CountDownLatch(10);
  protected Properties originalValues=new Properties();
  protected String pwd="changeit";
  protected int port;
  @Override @Before public void setUp() throws Exception {
    port=AvailablePortFinder.getNextAvailable(16200);
    super.setUp();
    URL trustStoreUrl=this.getClass().getClassLoader().getResource("jsse/localhost.ks");
    setSystemProp("javax.net.ssl.trustStore",trustStoreUrl.toURI().getPath());
  }
  protected void setSystemProp(  String key,  String value){
    String originalValue=System.setProperty(key,value);
    originalValues.put(key,originalValue != null ? originalValue : NULL_VALUE_MARKER);
  }
  protected AsyncHttpClient createAsyncHttpSSLClient() throws IOException, GeneralSecurityException {
    AsyncHttpClient c;
    AsyncHttpClientConfig config;
    DefaultAsyncHttpClientConfig.Builder builder=new DefaultAsyncHttpClientConfig.Builder();
    SSLContext sslContext=new SSLContextParameters().createSSLContext(context());
    JdkSslContext ssl=new JdkSslContext(sslContext,true,ClientAuth.REQUIRE);
    builder.setSslContext(ssl);
    builder.setAcceptAnyCertificate(true);
    config=builder.build();
    c=new DefaultAsyncHttpClient(config);
    return c;
  }
  protected SSLContextParameters defineSSLContextParameters(){
    KeyStoreParameters ksp=new KeyStoreParameters();
    ksp.setResource("jsse/localhost.ks");
    ksp.setPassword(pwd);
    KeyManagersParameters kmp=new KeyManagersParameters();
    kmp.setKeyPassword(pwd);
    kmp.setKeyStore(ksp);
    TrustManagersParameters tmp=new TrustManagersParameters();
    tmp.setKeyStore(ksp);
    SSLContextServerParameters scsp=new SSLContextServerParameters();
    SSLContextParameters sslContextParameters=new SSLContextParameters();
    sslContextParameters.setKeyManagers(kmp);
    sslContextParameters.setTrustManagers(tmp);
    sslContextParameters.setServerParameters(scsp);
    return sslContextParameters;
  }
  @Test public void testWSHttpCall() throws Exception {
    AsyncHttpClient c=createAsyncHttpSSLClient();
    WebSocket websocket=c.prepareGet("wss://127.0.0.1:" + port + "/test").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener(){
      @Override public void onMessage(      String message){
        received.add(message);
        log.info("received --> " + message);
        latch.countDown();
      }
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket){
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
      }
    }
).build()).get();
    getMockEndpoint("mock:client").expectedBodiesReceived("Hello from WS client");
    websocket.sendMessage("Hello from WS client");
    assertTrue(latch.await(10,TimeUnit.SECONDS));
    assertMockEndpointsSatisfied();
    assertEquals(10,received.size());
    for (int i=0; i < 10; i++) {
      assertEquals(">> Welcome on board!",received.get(i));
    }
    websocket.close();
    c.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        WebsocketComponent websocketComponent=(WebsocketComponent)context.getComponent("websocket");
        websocketComponent.setSslContextParameters(defineSSLContextParameters());
        websocketComponent.setPort(port);
        websocketComponent.setMinThreads(1);
        websocketComponent.setMaxThreads(25);
        from("websocket://test").log(">>> Message received from WebSocket Client : ${body}").to("mock:client").loop(10).setBody().constant(">> Welcome on board!").to("websocket://test");
      }
    }
;
  }
}
