public class CamelSpringCloudServiceRegistryTest {
  @Test public void testAutoConfiguration(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class,CamelCloudAutoConfiguration.class,CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","ribbon.eureka.enabled=false","ribbon.enabled=false").run(context -> {
      assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class);
      assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class);
      assertThat(context).hasSingleBean(org.apache.camel.cloud.ServiceRegistry.class);
      assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).isInstanceOf(CamelSpringCloudServiceRegistry.class);
      assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).hasFieldOrPropertyWithValue("nativeServiceRegistry",context.getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class));
    }
);
  }
  @Test public void testDisabledCamelCloud(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class,CamelCloudAutoConfiguration.class,CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","ribbon.eureka.enabled=false","ribbon.enabled=false","camel.cloud.enabled=false").run(context -> {
      assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class);
      assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class);
      assertThat(context).doesNotHaveBean(org.apache.camel.cloud.ServiceRegistry.class);
    }
);
  }
  @Test public void testDisabledCamelServiceRegistry(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class,CamelCloudAutoConfiguration.class,CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","ribbon.eureka.enabled=false","ribbon.enabled=false","camel.cloud.enabled=true","camel.cloud.service-registry.enabled=false").run(context -> {
      assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class);
      assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class);
      assertThat(context).doesNotHaveBean(org.apache.camel.cloud.ServiceRegistry.class);
    }
);
  }
  @Test public void testEnabledCamelServiceRegistry(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class,CamelCloudAutoConfiguration.class,CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","ribbon.eureka.enabled=false","ribbon.enabled=false","camel.cloud.enabled=false","camel.cloud.service-registry.enabled=true").run(context -> {
      assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class);
      assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class);
      assertThat(context).hasSingleBean(org.apache.camel.cloud.ServiceRegistry.class);
      assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).isInstanceOf(CamelSpringCloudServiceRegistry.class);
      assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).hasFieldOrPropertyWithValue("nativeServiceRegistry",context.getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class));
    }
);
  }
  @Test public void testServiceRegistry(){
    new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class,CamelCloudAutoConfiguration.class,CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off","ribbon.eureka.enabled=false","ribbon.enabled=false").run(context -> {
      CamelSpringCloudServiceRegistry camelRgistry=context.getBean(CamelSpringCloudServiceRegistry.class);
      final String serviceName="my-.service";
      final String serviceId=UUID.randomUUID().toString();
      final int port=ThreadLocalRandom.current().nextInt();
      camelRgistry.register(DefaultServiceDefinition.builder().withHost("localhost").withPort(port).withName(serviceName).withId(serviceId).build());
      MyServiceRegistry cloudRegistry=camelRgistry.getNativeServiceRegistry(MyServiceRegistry.class);
      assertThat(cloudRegistry.registrations).hasSize(1);
      assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("serviceId",serviceName);
      assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("host","localhost");
      assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("port",port);
    }
);
  }
@Configuration public static class TestConfiguration {
    @Bean public org.springframework.cloud.client.serviceregistry.ServiceRegistry<MyServiceRegistration> myServiceRegistry(){
      return new MyServiceRegistry();
    }
    @Bean public Converter<ServiceDefinition,MyServiceRegistration> definitionToRegistration(){
      return new Converter<ServiceDefinition,MyServiceRegistration>(){
        @Override public MyServiceRegistration convert(        ServiceDefinition source){
          return new MyServiceRegistration(source.getName(),source.getHost(),source.getPort());
        }
      }
;
    }
  }
public static class MyServiceRegistry implements org.springframework.cloud.client.serviceregistry.ServiceRegistry<MyServiceRegistration> {
    List<MyServiceRegistration> registrations;
    public MyServiceRegistry(){
      this.registrations=new ArrayList<>();
    }
    @Override public void register(    MyServiceRegistration registration){
      this.registrations.add(registration);
    }
    @Override public void deregister(    MyServiceRegistration registration){
      this.registrations.remove(registration);
    }
    @Override public void close(){
      this.registrations.clear();
    }
    @Override public void setStatus(    MyServiceRegistration registration,    String status){
      throw new UnsupportedOperationException();
    }
    @Override public Object getStatus(    MyServiceRegistration registration){
      throw new UnsupportedOperationException();
    }
  }
public static class MyServiceRegistration extends DefaultServiceInstance implements Registration {
    public MyServiceRegistration(    String serviceId,    String host,    int port){
      super(serviceId,host,port,false,Collections.emptyMap());
    }
  }
}
