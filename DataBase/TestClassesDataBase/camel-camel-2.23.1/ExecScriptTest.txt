/** 
 * Test executing a OS script. Use only manually, see the TODO
 */
@ContextConfiguration public class ExecScriptTest extends AbstractJUnit4SpringContextTests {
  @Produce(uri="direct:input") private ProducerTemplate producerTemplate;
  /** 
 * TODO <b>the test is ignored for now to prevent accidental build failures.</b> Java 1.5 does not offer a method to check if a file is executable there is only a canRead method, which is not enough to guarantee that the script can be executed. <br>
 * @throws Exception
 */
  @Test @DirtiesContext @Ignore public void testExecuteScript() throws Exception {
    File scriptFile=getExecScriptFileOrNull("exec-test-script");
    if (scriptFile != null) {
      String classpathArg=getClasspathArg();
      Exchange exchange=executeScript(scriptFile,NO_TIMEOUT,classpathArg,PRINT_IN_STDOUT);
      if (exchange != null) {
        String out=exchange.getIn().getBody(String.class);
        String err=(String)exchange.getIn().getHeader(EXEC_STDERR);
        assertNotNull(out);
        assertTrue(out.contains(PRINT_IN_STDOUT));
        assertNull(err);
      }
    }
 else {
      String os=System.getProperty("os.name");
      logger.warn("Executing batch scripts is not tested on " + os);
    }
  }
  private Exchange executeScript(  final File scriptFile,  long timeout,  String... args){
    StringBuilder argsBuilder=new StringBuilder();
    for (    String arg : args) {
      argsBuilder.append(arg + " ");
    }
    final String whiteSpaceSeparatedArgs=argsBuilder.toString().trim();
    return producerTemplate.send(new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(PRINT_IN_STDOUT);
        exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT,NO_TIMEOUT);
        exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE,scriptFile.getAbsolutePath());
        exchange.getIn().setHeader(EXEC_COMMAND_ARGS,whiteSpaceSeparatedArgs);
      }
    }
);
  }
  private String getClasspathArg(){
    String classpath=System.getProperty("java.class.path");
    if (OS.isFamilyWindows()) {
      classpath="\"\"" + classpath + "\"\"";
    }
 else {
      classpath="\"" + classpath + "\"";
    }
    return classpath;
  }
  private File getExecScriptFileOrNull(  String scriptNameBase){
    String resource=null;
    if (OS.isFamilyWindows()) {
      resource=scriptNameBase + ".bat";
    }
 else     if (OS.isFamilyUnix()) {
      resource=scriptNameBase + ".sh";
    }
    File resourceFile=getClasspathResourceFileOrNull(resource);
    if (resourceFile != null && !resourceFile.canRead()) {
      logger.warn("The resource  " + resourceFile.getAbsolutePath() + " is not readable!");
      return null;
    }
    return resourceFile;
  }
}
