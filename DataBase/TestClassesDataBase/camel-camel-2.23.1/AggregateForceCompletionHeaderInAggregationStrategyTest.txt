/** 
 * To test CAMEL-10474
 */
public class AggregateForceCompletionHeaderInAggregationStrategyTest extends ContextTestSupport {
  @Test public void testCompletePreviousOnNewGroup() throws Exception {
    getMockEndpoint("mock:aggregated").expectedBodiesReceived("AAA","BB");
    template.sendBody("direct:start","A,A,A,B,B");
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").split(body()).to("log:input?showAll=true").aggregate(simple("${body}"),new MyAggregationStrategy()).completionPredicate(exchangeProperty(Exchange.SPLIT_COMPLETE)).to("log:aggregated","mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        newExchange.setProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS,true);
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      oldExchange.setProperty(Exchange.SPLIT_COMPLETE,newExchange.getProperty(Exchange.SPLIT_COMPLETE));
      return oldExchange;
    }
  }
}
