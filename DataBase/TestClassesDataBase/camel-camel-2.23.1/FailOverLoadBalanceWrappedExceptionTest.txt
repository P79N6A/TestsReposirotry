public class FailOverLoadBalanceWrappedExceptionTest extends ContextTestSupport {
  protected MockEndpoint x;
  protected MockEndpoint y;
  protected MockEndpoint z;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    x=getMockEndpoint("mock:x");
    y=getMockEndpoint("mock:y");
    z=getMockEndpoint("mock:z");
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("direct:start").loadBalance().failover(IOException.class).to("direct:x","direct:y","direct:z");
        from("direct:x").to("mock:x").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new CamelExchangeException("foo",exchange,new SocketException("Forced"));
          }
        }
);
        from("direct:y").to("mock:y").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            throw new IOException("Forced");
          }
        }
);
        from("direct:z").to("mock:z");
      }
    }
;
  }
  @Test public void testWrappedException() throws Exception {
    x.expectedMessageCount(1);
    y.expectedMessageCount(1);
    z.expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
}
