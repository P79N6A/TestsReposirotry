/** 
 * Tests for the  class.
 */
public class MllpCommitErrorAcknowledgementExceptionTest extends MllpExceptionTestSupport {
  MllpCommitErrorAcknowledgementException instance;
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorOne() throws Exception {
    instance=new MllpCommitErrorAcknowledgementException(HL7_MESSAGE_BYTES,HL7_ACKNOWLEDGEMENT_BYTES);
    assertTrue(instance.getMessage().startsWith(MllpCommitErrorAcknowledgementException.EXCEPTION_MESSAGE));
    assertNull(instance.getCause());
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.getHl7MessageBytes());
    assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES,instance.getHl7AcknowledgementBytes());
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testConstructorTwo() throws Exception {
    instance=new MllpCommitErrorAcknowledgementException(HL7_MESSAGE_BYTES,HL7_ACKNOWLEDGEMENT_BYTES,CAUSE);
    assertTrue(instance.getMessage().startsWith(MllpCommitErrorAcknowledgementException.EXCEPTION_MESSAGE));
    assertSame(CAUSE,instance.getCause());
    assertArrayEquals(HL7_MESSAGE_BYTES,instance.getHl7MessageBytes());
    assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES,instance.getHl7AcknowledgementBytes());
  }
  /** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
  @Test public void testGetAcknowledgmentType() throws Exception {
    instance=new MllpCommitErrorAcknowledgementException(HL7_MESSAGE_BYTES,HL7_ACKNOWLEDGEMENT_BYTES);
    assertEquals("CE",instance.getAcknowledgmentType());
  }
}
