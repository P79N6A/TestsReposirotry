/** 
 * Unit test for intercepting sending to endpoint
 * @version 
 */
public class InterceptSendToEndpointTest extends ContextTestSupport {
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Test public void testInterceptEndpoint() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        interceptSendToEndpoint("mock:foo").to("mock:detour").transform(constant("Bye World"));
        from("direct:first").to("mock:bar").to("mock:foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:detour").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:first","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptEndpointWithPredicate() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("mock:foo").when(body().isEqualTo("Hello World")).to("mock:detour").transform(constant("Bye World"));
        from("direct:second").to("mock:bar").to("mock:foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World","Hi");
    getMockEndpoint("mock:detour").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World","Hi");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World","Hi");
    template.sendBody("direct:second","Hello World");
    template.sendBody("direct:second","Hi");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptEndpointStop() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.setTracing(true);
        interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().transform(constant("Bye World")).to("mock:detour");
        from("direct:third").to("mock:bar").to("mock:foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:detour").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:third","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptEndpointDirectly() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:start").to("mock:detour").transform(constant("Bye World"));
        from("direct:start").to("mock:foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:foo").expectedBodiesReceived("Bye World");
    getMockEndpoint("mock:result").expectedBodiesReceived("Bye World");
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptEndpointWithStop() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:start").to("mock:detour").stop();
        from("direct:start").to("mock:foo").to("mock:result");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour").expectedMessageCount(1);
    getMockEndpoint("mock:foo").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInterceptEndpointOnce() throws Exception {
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        interceptSendToEndpoint("direct:intercept1").to("mock:detour1");
        interceptSendToEndpoint("direct:intercept2").to("mock:detour2");
        from("direct:input1").to("direct:intercept1");
        from("direct:input2").to("direct:intercept2");
        from("direct:intercept1").to("log:1");
        from("direct:intercept2").to("log:2");
      }
    }
);
    context.start();
    getMockEndpoint("mock:detour1").expectedBodiesReceived("Hello World");
    getMockEndpoint("mock:detour2").expectedBodiesReceived("Hello World");
    template.sendBody("direct:input1","Hello World");
    template.sendBody("direct:input2","Hello World");
    assertMockEndpointsSatisfied();
  }
}
