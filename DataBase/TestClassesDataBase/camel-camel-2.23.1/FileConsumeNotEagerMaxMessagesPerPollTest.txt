/** 
 * Unit test for max messages per poll
 */
public class FileConsumeNotEagerMaxMessagesPerPollTest extends ContextTestSupport {
  private String fileUrl="file://target/poll/?initialDelay=0&delay=10&" + "maxMessagesPerPoll=2&eagerMaxMessagesPerPoll=false&sortBy=file:name";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/poll");
    super.setUp();
  }
  @Test public void testMaxMessagesPerPoll() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("AAA","BBB");
    template.sendBodyAndHeader(fileUrl,"CCC",Exchange.FILE_NAME,"ccc.txt");
    template.sendBodyAndHeader(fileUrl,"AAA",Exchange.FILE_NAME,"aaa.txt");
    template.sendBodyAndHeader(fileUrl,"BBB",Exchange.FILE_NAME,"bbb.txt");
    context.startRoute("foo");
    mock.expectedPropertyReceived(Exchange.BATCH_SIZE,2);
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedBodiesReceived("CCC");
    mock.expectedPropertyReceived(Exchange.BATCH_SIZE,1);
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
