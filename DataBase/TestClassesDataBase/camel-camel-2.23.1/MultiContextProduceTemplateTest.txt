@RunWith(Arquillian.class) public class MultiContextProduceTemplateTest {
  @Inject private CamelContext defaultCamelContext;
  @Inject @Uri("direct:inbound") private ProducerTemplate defaultInbound;
  @Inject @Uri("mock:outbound") private MockEndpoint defaultOutbound;
  @Inject @ContextName("first") private CamelContext firstCamelContext;
  @Inject @ContextName("first") @Uri("direct:inbound") private ProducerTemplate firstInbound;
  @Inject @ContextName("first") @Uri("mock:outbound") private MockEndpoint firstOutbound;
  @Inject @ContextName("second") private CamelContext secondCamelContext;
  @Inject @ContextName("second") @Uri("direct:inbound") private ProducerTemplate secondInbound;
  @Inject @ContextName("second") @Uri("mock:outbound") private MockEndpoint secondOutbound;
  @Deployment public static Archive<?> deployment(){
    return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class,ProduceTemplateBean.class,FirstCamelContextBean.class,FirstCamelContextProduceTemplateBean.class,SecondCamelContextBean.class,SecondCamelContextProduceTemplateBean.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml");
  }
  @Test @InSequence(1) public void configureCamelContexts() throws Exception {
    defaultCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:inbound").bean(ProduceTemplateBean.class);
      }
    }
);
    firstCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:inbound").bean(FirstCamelContextProduceTemplateBean.class);
      }
    }
);
    secondCamelContext.addRoutes(new RouteBuilder(){
      @Override public void configure(){
        from("direct:inbound").bean(SecondCamelContextProduceTemplateBean.class);
      }
    }
);
    secondCamelContext.startAllRoutes();
  }
  @Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {
    defaultOutbound.expectedMessageCount(1);
    defaultOutbound.expectedBodiesReceived("test-processed");
    defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi"));
    defaultInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,defaultOutbound);
  }
  @Test @InSequence(3) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {
    firstOutbound.expectedMessageCount(1);
    firstOutbound.expectedBodiesReceived("test-first");
    firstOutbound.message(0).exchange().matches(fromCamelContext("first"));
    firstInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,firstOutbound);
  }
  @Test @InSequence(4) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {
    secondOutbound.expectedMessageCount(1);
    secondOutbound.expectedBodiesReceived("test-second");
    secondOutbound.message(0).exchange().matches(fromCamelContext("second"));
    secondInbound.sendBody("test");
    assertIsSatisfied(2L,TimeUnit.SECONDS,secondOutbound);
  }
}
