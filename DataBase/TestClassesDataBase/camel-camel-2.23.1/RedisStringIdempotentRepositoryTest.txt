@RunWith(MockitoJUnitRunner.class) public class RedisStringIdempotentRepositoryTest {
  private static final String REPOSITORY="testRepository";
  private static final String KEY="KEY";
  @Mock private RedisTemplate<String,String> redisTemplate;
  @Mock private RedisConnectionFactory redisConnectionFactory;
  @Mock private RedisConnection redisConnection;
  @Mock private RedisOperations<String,String> redisOperations;
  @Mock private ValueOperations<String,String> valueOperations;
  private RedisStringIdempotentRepository idempotentRepository;
  @Before public void setUp() throws Exception {
    when(redisTemplate.opsForValue()).thenReturn(valueOperations);
    when(valueOperations.getOperations()).thenReturn(redisOperations);
    idempotentRepository=new RedisStringIdempotentRepository(redisTemplate,REPOSITORY);
    idempotentRepository.setExpiry(1000L);
  }
  @Test public void shouldAddKey(){
    idempotentRepository.add(KEY);
    verify(valueOperations).setIfAbsent(idempotentRepository.createRedisKey(KEY),KEY);
    verify(redisOperations).expire(idempotentRepository.createRedisKey(KEY),1000L,TimeUnit.SECONDS);
  }
  @Test public void shoulCheckForMembers(){
    idempotentRepository.contains(KEY);
    verify(valueOperations).get(idempotentRepository.createRedisKey(KEY));
  }
  @Test public void shouldReturnProcessorName(){
    String processorName=idempotentRepository.getProcessorName();
    assertEquals(REPOSITORY,processorName);
  }
}
