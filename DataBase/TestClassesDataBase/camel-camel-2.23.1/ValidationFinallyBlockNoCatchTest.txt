/** 
 * No catch blocks but handle all should work
 */
public class ValidationFinallyBlockNoCatchTest extends ContextTestSupport {
  protected Processor validator=new MyValidator();
  protected MockEndpoint validEndpoint;
  protected MockEndpoint allEndpoint;
  protected MockEndpoint deadEndpoint;
  @Test public void testValidMessage() throws Exception {
    validEndpoint.expectedMessageCount(1);
    allEndpoint.expectedMessageCount(1);
    template.sendBodyAndHeader("direct:start","<valid/>","foo","bar");
    assertMockEndpointsSatisfied();
  }
  @Test public void testInvalidMessage() throws Exception {
    validEndpoint.expectedMessageCount(0);
    allEndpoint.expectedMessageCount(1);
    deadEndpoint.expectedMessageCount(0);
    try {
      template.sendBodyAndHeader("direct:start","<invalid/>","foo","notMatchedHeaderValue");
      fail("Should have thrown an exception");
    }
 catch (    Exception e) {
    }
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    validEndpoint=resolveMandatoryEndpoint("mock:valid",MockEndpoint.class);
    allEndpoint=resolveMandatoryEndpoint("mock:all",MockEndpoint.class);
    deadEndpoint=resolveMandatoryEndpoint("mock:dead",MockEndpoint.class);
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:dead").redeliveryDelay(0).maximumRedeliveries(3).logStackTrace(false));
        from("direct:start").doTry().process(validator).to("mock:valid").doFinally().to("mock:all");
      }
    }
;
  }
}
