public class MultiPartFormWithCustomFilterTest extends BaseJettyTest {
private static class MyMultipartFilter extends MultiPartFilter {
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      ((HttpServletResponse)response).addHeader("MyMultipartFilter","true");
      super.doFilter(request,response,chain);
    }
  }
  @Test public void testSendMultiPartForm() throws Exception {
    HttpClient httpclient=new HttpClient();
    File file=new File("src/main/resources/META-INF/NOTICE.txt");
    PostMethod httppost=new PostMethod("http://localhost:" + getPort() + "/test");
    Part[] parts={new StringPart("comment","A binary file of some kind"),new FilePart(file.getName(),file)};
    MultipartRequestEntity reqEntity=new MultipartRequestEntity(parts,httppost.getParams());
    httppost.setRequestEntity(reqEntity);
    int status=httpclient.executeMethod(httppost);
    assertEquals("Get a wrong response status",200,status);
    String result=httppost.getResponseBodyAsString();
    assertEquals("Get a wrong result","A binary file of some kind",result);
    assertNotNull("Did not use custom multipart filter",httppost.getResponseHeader("MyMultipartFilter"));
  }
  @Test public void testSendMultiPartFormOverrideEnableMultpartFilterFalse() throws Exception {
    HttpClient httpclient=new HttpClient();
    File file=new File("src/main/resources/META-INF/NOTICE.txt");
    PostMethod httppost=new PostMethod("http://localhost:" + getPort() + "/test2");
    Part[] parts={new StringPart("comment","A binary file of some kind"),new FilePart(file.getName(),file)};
    MultipartRequestEntity reqEntity=new MultipartRequestEntity(parts,httppost.getParams());
    httppost.setRequestEntity(reqEntity);
    int status=httpclient.executeMethod(httppost);
    assertEquals("Get a wrong response status",200,status);
    assertNotNull("Did not use custom multipart filter",httppost.getResponseHeader("MyMultipartFilter"));
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myMultipartFilter",new MyMultipartFilter());
    return jndi;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        getContext().getProperties().put("CamelJettyTempDir","target");
        from("jetty://http://localhost:{{port}}/test?multipartFilterRef=myMultipartFilter").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            assertEquals("Get a wrong attachement size",2,in.getAttachments().size());
            DataHandler data=in.getAttachment("NOTICE.txt");
            assertNotNull("Should get the DataHandle NOTICE.txt",data);
            assertEquals("Got the wrong name","NOTICE.txt",data.getName());
            assertTrue("We should get the data from the DataHandle",data.getDataSource().getInputStream().available() > 0);
            exchange.getOut().setBody(in.getHeader("comment"));
          }
        }
);
        from("jetty://http://localhost:{{port}}/test2?multipartFilterRef=myMultipartFilter&enableMultipartFilter=false").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            assertEquals("Get a wrong attachement size",2,in.getAttachments().size());
            DataHandler data=in.getAttachment("NOTICE.txt");
            assertNotNull("Should get the DataHandle NOTICE.txt",data);
            exchange.getOut().setBody(in.getHeader("comment"));
          }
        }
);
      }
    }
;
  }
}
