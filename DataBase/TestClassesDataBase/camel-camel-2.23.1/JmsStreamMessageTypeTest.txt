public class JmsStreamMessageTypeTest extends CamelTestSupport {
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/stream");
    super.setUp();
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    JmsComponent jms=jmsComponentAutoAcknowledge(connectionFactory);
    jms.setStreamMessageTypeEnabled(true);
    camelContext.addComponent("jms",jms);
    return camelContext;
  }
  @Test public void testStreamType() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    FileUtil.copyFile(new File("src/test/data/message1.xml"),new File("target/stream/in/message1.xml"));
    assertMockEndpointsSatisfied();
    Object body=getMockEndpoint("mock:result").getReceivedExchanges().get(0).getIn().getBody();
    StreamMessageInputStream is=assertIsInstanceOf(StreamMessageInputStream.class,body);
    assertEquals(0,is.available());
    String srcContent=context.getTypeConverter().mandatoryConvertTo(String.class,new File("src/test/data/message1.xml"));
    String dstContent=context.getTypeConverter().mandatoryConvertTo(String.class,new File("target/stream/out/message1.xml"));
    assertEquals("both the source and destination files should have the same content",srcContent,dstContent);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/stream/in").to("jms:queue:foo");
        from("jms:queue:foo").to("file:target/stream/out").to("mock:result");
      }
    }
;
  }
}
