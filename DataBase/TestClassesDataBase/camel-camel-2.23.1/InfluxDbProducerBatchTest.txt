public class InfluxDbProducerBatchTest extends AbstractInfluxDbTest {
  @EndpointInject(uri="mock:test") MockEndpoint successEndpoint;
  @EndpointInject(uri="mock:error") MockEndpoint errorEndpoint;
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0));
        from("direct:test").to("influxdb:influxDbBean?batch=true").to("mock:test");
      }
    }
;
  }
  @Before public void resetEndpoints(){
    errorEndpoint.reset();
    successEndpoint.reset();
  }
  @Test public void writeBatchPoints() throws InterruptedException {
    errorEndpoint.expectedMessageCount(0);
    successEndpoint.expectedMessageCount(1);
    BatchPoints batchPoints=createBatchPoints();
    sendBody("direct:test",batchPoints);
    errorEndpoint.assertIsSatisfied();
    successEndpoint.assertIsSatisfied();
  }
  private BatchPoints createBatchPoints(){
    BatchPoints batchPoints=BatchPoints.database("myTestTimeSeries").build();
    Point point1=Point.measurement("cpu").time(System.currentTimeMillis(),TimeUnit.MILLISECONDS).addField("idle",90L).addField("user",9L).addField("system",1L).build();
    Point point2=Point.measurement("disk").time(System.currentTimeMillis(),TimeUnit.MILLISECONDS).addField("used",8L).addField("free",1L).build();
    batchPoints.point(point1);
    batchPoints.point(point2);
    return batchPoints;
  }
}
