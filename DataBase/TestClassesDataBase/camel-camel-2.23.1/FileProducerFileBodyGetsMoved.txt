/** 
 * Checks that body of type  {@link java.io.File} is simply moved avoidingcopying using IO streams.
 */
public class FileProducerFileBodyGetsMoved extends ContextTestSupport {
  @Before @Override public void setUp() throws Exception {
    deleteDirectory("target/filemove");
    super.setUp();
  }
  @Test public void testStoreFileExchangeBodyIsFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedFileExists("target/filemove/testStoreFile");
    mock.expectedMessageCount(1);
    File temporaryFile=File.createTempFile("camel","test");
    template.requestBodyAndHeader("direct:in",temporaryFile,Exchange.FILE_LOCAL_WORK_PATH,temporaryFile);
    mock.assertIsSatisfied();
    assertFalse("Temporary body file should have been moved, not copied",temporaryFile.exists());
  }
  @Test public void testStoreFileExchangeBodyIsWrappedFile() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedFileExists("target/filemove/testStoreFile");
    mock.expectedMessageCount(1);
    File temporaryFile=File.createTempFile("camel","test");
    GenericFile<File> body=new GenericFile<>();
    body.setFile(temporaryFile);
    template.requestBodyAndHeader("direct:in",temporaryFile,Exchange.FILE_LOCAL_WORK_PATH,temporaryFile);
    mock.assertIsSatisfied();
    assertFalse("Temporary body file should have been moved, not copied",temporaryFile.exists());
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:in").to("file://target/filemove/?fileName=testStoreFile").to("mock:result");
      }
    }
;
  }
}
