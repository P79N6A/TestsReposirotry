/** 
 */
public class AggregateControllerTest extends ContextTestSupport {
  private AggregateController controller;
  public AggregateController getAggregateController(){
    if (controller == null) {
      controller=new DefaultAggregateController();
    }
    return controller;
  }
  @Test public void testForceCompletionOfAll() throws Exception {
    getMockEndpoint("mock:aggregated").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","test1","id","1");
    template.sendBodyAndHeader("direct:start","test2","id","2");
    template.sendBodyAndHeader("direct:start","test3","id","1");
    template.sendBodyAndHeader("direct:start","test4","id","2");
    assertMockEndpointsSatisfied();
    getMockEndpoint("mock:aggregated").expectedMessageCount(2);
    getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3","test2test4");
    getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY,"force");
    int groups=getAggregateController().forceCompletionOfAllGroups();
    assertEquals(2,groups);
    assertMockEndpointsSatisfied();
  }
  @Test public void testForceCompletionOfGroup() throws Exception {
    getMockEndpoint("mock:aggregated").expectedMessageCount(0);
    template.sendBodyAndHeader("direct:start","test1","id","1");
    template.sendBodyAndHeader("direct:start","test2","id","2");
    template.sendBodyAndHeader("direct:start","test3","id","1");
    template.sendBodyAndHeader("direct:start","test4","id","2");
    assertMockEndpointsSatisfied();
    getMockEndpoint("mock:aggregated").expectedMessageCount(1);
    getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3");
    getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY,"force");
    int groups=getAggregateController().forceCompletionOfGroup("1");
    assertEquals(1,groups);
    assertMockEndpointsSatisfied();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").aggregate(header("id"),new MyAggregationStrategy()).aggregateController(getAggregateController()).completionSize(10).to("mock:aggregated");
      }
    }
;
  }
public static class MyAggregationStrategy implements AggregationStrategy {
    public Exchange aggregate(    Exchange oldExchange,    Exchange newExchange){
      if (oldExchange == null) {
        return newExchange;
      }
      String body1=oldExchange.getIn().getBody(String.class);
      String body2=newExchange.getIn().getBody(String.class);
      oldExchange.getIn().setBody(body1 + body2);
      return oldExchange;
    }
  }
}
