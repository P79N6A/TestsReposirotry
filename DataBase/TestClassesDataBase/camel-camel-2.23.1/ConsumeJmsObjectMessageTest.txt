/** 
 * @version 
 */
public class ConsumeJmsObjectMessageTest extends CamelTestSupport {
  protected JmsTemplate jmsTemplate;
  private MockEndpoint endpoint;
  @Test public void testConsumeObjectMessage() throws Exception {
    endpoint.expectedMessageCount(1);
    jmsTemplate.setPubSubDomain(false);
    jmsTemplate.send("test.object",new MessageCreator(){
      public Message createMessage(      Session session) throws JMSException {
        ObjectMessage msg=session.createObjectMessage();
        MyUser user=new MyUser();
        user.setName("Claus");
        msg.setObject(user);
        return msg;
      }
    }
);
    endpoint.assertIsSatisfied();
    assertCorrectObjectReceived();
  }
  @Test public void testSendBytesMessage() throws Exception {
    endpoint.expectedMessageCount(1);
    MyUser user=new MyUser();
    user.setName("Claus");
    template.sendBody("direct:test",user);
    endpoint.assertIsSatisfied();
    assertCorrectObjectReceived();
  }
  protected void assertCorrectObjectReceived(){
    Exchange exchange=endpoint.getReceivedExchanges().get(0);
    assertNotNull(ExchangeHelper.getBinding(exchange,JmsBinding.class));
    JmsMessage in=(JmsMessage)exchange.getIn();
    assertNotNull(in);
    assertIsInstanceOf(ObjectMessage.class,in.getJmsMessage());
    MyUser user=exchange.getIn().getBody(MyUser.class);
    assertEquals("Claus",user.getName());
  }
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    endpoint=getMockEndpoint("mock:result");
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    jmsTemplate=new JmsTemplate(connectionFactory);
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("activemq:test.object").to("mock:result");
        from("direct:test").to("activemq:test.object");
      }
    }
;
  }
public static class MyUser implements Serializable {
    private static final long serialVersionUID=1L;
    private String name;
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
  }
}
