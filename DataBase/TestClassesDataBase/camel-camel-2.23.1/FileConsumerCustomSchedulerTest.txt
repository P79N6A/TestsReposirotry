public class FileConsumerCustomSchedulerTest extends ContextTestSupport {
  private MyScheduler scheduler=new MyScheduler();
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myScheduler",scheduler);
    return jndi;
  }
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/file/custom");
    super.setUp();
  }
  @Test public void testCustomScheduler() throws Exception {
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBodyAndHeader("file:target/file/custom","Hello World",Exchange.FILE_NAME,"hello.txt");
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
    assertEquals(1,scheduler.getCounter());
    assertEquals("bar",scheduler.getFoo());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("file:target/file/custom?scheduler=#myScheduler&scheduler.foo=bar&initialDelay=0&delay=10").routeId("foo").noAutoStartup().to("mock:result");
      }
    }
;
  }
private static final class MyScheduler implements ScheduledPollConsumerScheduler {
    private CamelContext camelContext;
    private Timer timer;
    private TimerTask timerTask;
    private volatile int counter;
    private String foo;
    @Override public void onInit(    Consumer consumer){
    }
    @Override public void scheduleTask(    final Runnable task){
      this.timerTask=new TimerTask(){
        @Override public void run(){
          counter++;
          task.run();
        }
      }
;
    }
    @Override public void unscheduleTask(){
    }
    public int getCounter(){
      return counter;
    }
    public String getFoo(){
      return foo;
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
    @Override public void startScheduler(){
      timer=new Timer();
      timer.schedule(timerTask,10);
    }
    @Override public boolean isSchedulerStarted(){
      return true;
    }
    @Override public void setCamelContext(    CamelContext camelContext){
      this.camelContext=camelContext;
    }
    @Override public CamelContext getCamelContext(){
      return camelContext;
    }
    @Override public void shutdown() throws Exception {
      timerTask.cancel();
    }
    @Override public void start() throws Exception {
    }
    @Override public void stop() throws Exception {
    }
  }
}
