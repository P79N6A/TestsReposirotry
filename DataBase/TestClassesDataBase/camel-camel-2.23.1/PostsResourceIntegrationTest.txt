/** 
 * Test class for  {@link org.apache.camel.component.linkedin.api.PostsResource} APIs.
 */
public class PostsResourceIntegrationTest extends AbstractLinkedInTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(PostsResourceIntegrationTest.class);
  private static final String PATH_PREFIX="comments";
  @Ignore @Test public void testAddComment() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.comment",null);
    requestBodyAndHeaders("direct://ADDCOMMENT",null,headers);
  }
  @Ignore @Test public void testFlagCategory() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.postcategorycode",null);
    requestBodyAndHeaders("direct://FLAGCATEGORY",null,headers);
  }
  @Ignore @Test public void testFollowPost() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.isfollowing",null);
    requestBodyAndHeaders("direct://FOLLOWPOST",null,headers);
  }
  @Ignore @Test public void testGetPost() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.count",null);
    headers.put("CamelLinkedIn.start",null);
    headers.put("CamelLinkedIn.fields",null);
    final org.apache.camel.component.linkedin.api.model.Post result=requestBodyAndHeaders("direct://GETPOST",null,headers);
    assertNotNull("getPost result",result);
    LOG.debug("getPost: " + result);
  }
  @Ignore @Test public void testGetPostComments() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.count",null);
    headers.put("CamelLinkedIn.start",null);
    headers.put("CamelLinkedIn.fields",null);
    final org.apache.camel.component.linkedin.api.model.Comments result=requestBodyAndHeaders("direct://GETPOSTCOMMENTS",null,headers);
    assertNotNull("getPostComments result",result);
    LOG.debug("getPostComments: " + result);
  }
  @Ignore @Test public void testLikePost() throws Exception {
    final Map<String,Object> headers=new HashMap<>();
    headers.put("CamelLinkedIn.post_id",null);
    headers.put("CamelLinkedIn.isliked",null);
    requestBodyAndHeaders("direct://LIKEPOST",null,headers);
  }
  @Ignore @Test public void testRemovePost() throws Exception {
    requestBody("direct://REMOVEPOST",null);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        from("direct://ADDCOMMENT").to("linkedin://" + PATH_PREFIX + "/addComment");
        from("direct://FLAGCATEGORY").to("linkedin://" + PATH_PREFIX + "/flagCategory");
        from("direct://FOLLOWPOST").to("linkedin://" + PATH_PREFIX + "/followPost");
        from("direct://GETPOST").to("linkedin://" + PATH_PREFIX + "/getPost");
        from("direct://GETPOSTCOMMENTS").to("linkedin://" + PATH_PREFIX + "/getPostComments");
        from("direct://LIKEPOST").to("linkedin://" + PATH_PREFIX + "/likePost");
        from("direct://REMOVEPOST").to("linkedin://" + PATH_PREFIX + "/removePost?inBody=post_id");
      }
    }
;
  }
}
