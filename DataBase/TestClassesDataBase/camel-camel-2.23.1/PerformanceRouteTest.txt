/** 
 * @version 
 */
@Ignore public class PerformanceRouteTest extends CamelTestSupport {
  private int size=200;
  @Test public void testPerformance() throws Exception {
    if (!canRunOnThisPlatform()) {
      return;
    }
    long start=System.currentTimeMillis();
    getMockEndpoint("mock:audit").expectedMessageCount(size);
    getMockEndpoint("mock:audit").expectsNoDuplicates().body();
    getMockEndpoint("mock:gold").expectedMinimumMessageCount((size / 2) - (size / 10));
    getMockEndpoint("mock:silver").expectedMinimumMessageCount(size / 10);
    for (int i=0; i < size; i++) {
      String type;
      if (i % 10 == 0) {
        type="silver";
      }
 else       if (i % 2 == 0) {
        type="gold";
      }
 else {
        type="bronze";
      }
      template.sendBodyAndHeader("activemq:queue:inbox","Message " + i,"type",type);
    }
    assertMockEndpointsSatisfied();
    long delta=System.currentTimeMillis() - start;
    log.info("RoutePerformanceTest: Sent: " + size + " Took: "+ delta+ " ms");
  }
  private boolean canRunOnThisPlatform(){
    String os=System.getProperty("os.name");
    return !os.toLowerCase().contains("hp-ux");
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("activemq:queue:inbox?concurrentConsumers=10").to("activemq:topic:audit").choice().when(header("type").isEqualTo("gold")).to("direct:gold").when(header("type").isEqualTo("silver")).to("direct:silver").otherwise().to("direct:bronze").end();
        from("direct:gold").to("mock:gold");
        from("direct:silver").to("mock:silver");
        from("direct:bronze").to("mock:bronze");
        from("activemq:topic:audit").to("mock:audit");
      }
    }
;
  }
}
