/** 
 * Mail producer concurrent test.
 * @version 
 */
public class MailProducerConcurrentTest extends CamelTestSupport {
  @Test public void testNoConcurrentProducers() throws Exception {
    doSendMessages(1,1);
  }
  @Test public void testConcurrentProducers() throws Exception {
    doSendMessages(10,5);
  }
  private void doSendMessages(  int files,  int poolSize) throws Exception {
    Mailbox.clearAll();
    NotifyBuilder builder=new NotifyBuilder(context).whenDone(files).create();
    getMockEndpoint("mock:result").expectedMessageCount(files);
    getMockEndpoint("mock:result").expectsNoDuplicates(body());
    final CountDownLatch latch=new CountDownLatch(files);
    ExecutorService executor=Executors.newFixedThreadPool(poolSize);
    for (int i=0; i < files; i++) {
      final int index=i;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          template.sendBodyAndHeader("direct:start","Message " + index,"To","someone@localhost");
          latch.countDown();
          return null;
        }
      }
);
    }
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertMockEndpointsSatisfied();
    assertTrue(builder.matchesMockWaitTime());
    Mailbox box=Mailbox.get("someone@localhost");
    assertEquals(files,box.size());
    Set<Object> bodies=new HashSet<>();
    for (int i=0; i < files; i++) {
      bodies.add(box.get(i).getContent());
    }
    assertEquals("There should be " + files + " unique mails",files,bodies.size());
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("smtp://camel@localhost","mock:result");
      }
    }
;
  }
}
