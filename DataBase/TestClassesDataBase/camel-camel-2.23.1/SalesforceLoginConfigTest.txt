public class SalesforceLoginConfigTest {
  final SalesforceLoginConfig jwt;
  final SalesforceLoginConfig refreshToken;
  final SalesforceLoginConfig usernamePassword;
  public SalesforceLoginConfigTest(){
    usernamePassword=new SalesforceLoginConfig();
    usernamePassword.setUserName("userName");
    usernamePassword.setPassword("password");
    usernamePassword.setClientId("clientId");
    usernamePassword.setClientSecret("clientSecret");
    refreshToken=new SalesforceLoginConfig();
    refreshToken.setUserName("userName");
    refreshToken.setRefreshToken("refreshToken");
    refreshToken.setClientId("clientId");
    refreshToken.setClientSecret("clientSecret");
    jwt=new SalesforceLoginConfig();
    jwt.setUserName("userName");
    final KeyStoreParameters keystore=new KeyStoreParameters();
    keystore.setResource("keystore.jks");
    jwt.setKeystore(keystore);
    jwt.setClientId("clientId");
  }
  @Test public void shouldDetermineProperAuthenticationType(){
    assertEquals(AuthenticationType.USERNAME_PASSWORD,usernamePassword.getType());
    assertEquals(AuthenticationType.REFRESH_TOKEN,refreshToken.getType());
    assertEquals(AuthenticationType.JWT,jwt.getType());
  }
  @Test public void shouldJwtParameters(){
    jwt.validate();
  }
  @Test public void shouldValidateRefreshTokenParameters(){
    refreshToken.validate();
  }
  @Test public void shouldValidateUsernamePasswordParameters(){
    usernamePassword.validate();
  }
}
