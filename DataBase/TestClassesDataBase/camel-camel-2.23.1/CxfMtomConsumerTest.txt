public class CxfMtomConsumerTest extends CamelTestSupport {
  protected static final String MTOM_ENDPOINT_ADDRESS="http://localhost:" + CXFTestSupport.getPort1() + "/CxfMtomConsumerTest/jaxws-mtom/hello";
  protected static final String MTOM_ENDPOINT_URI="cxf://" + MTOM_ENDPOINT_ADDRESS + "?serviceClass=org.apache.camel.cxf.mtom_feature.Hello";
  private final QName serviceName=new QName("http://apache.org/camel/cxf/mtom_feature","HelloService");
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from(MTOM_ENDPOINT_URI).process(new Processor(){
          @SuppressWarnings("unchecked") public void process(          final Exchange exchange) throws Exception {
            Message in=exchange.getIn();
            assertEquals("We should not get any attachements here.",0,in.getAttachments().size());
            assertEquals("Get a wrong Content-Type header","application/xop+xml",in.getHeader("Content-Type"));
            List<?> parameter=in.getBody(List.class);
            Holder<byte[]> photo=(Holder<byte[]>)parameter.get(0);
            assertNotNull("The photo should not be null",photo.value);
            assertEquals("Should get the right request",new String(photo.value,"UTF-8"),"RequestFromCXF");
            photo.value="ResponseFromCamel".getBytes("UTF-8");
            Holder<Image> image=(Holder<Image>)parameter.get(1);
            assertNotNull("We should get the image here",image.value);
            exchange.getOut().setBody(new Object[]{null,photo,image});
          }
        }
);
      }
    }
;
  }
  private Hello getPort(){
    URL wsdl=getClass().getResource("/mtom.wsdl");
    assertNotNull("WSDL is null",wsdl);
    HelloService service=new HelloService(wsdl,serviceName);
    assertNotNull("Service is null ",service);
    Hello port=service.getHelloPort();
    ((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,MTOM_ENDPOINT_ADDRESS);
    return port;
  }
  protected Image getImage(  String name) throws Exception {
    return ImageIO.read(getClass().getResource(name));
  }
  @Test public void testInvokingService() throws Exception {
    if (MtomTestHelper.isAwtHeadless(null,log)) {
      return;
    }
    Holder<byte[]> photo=new Holder<>("RequestFromCXF".getBytes("UTF-8"));
    Holder<Image> image=new Holder<>(getImage("/java.jpg"));
    Hello port=getPort();
    SOAPBinding binding=(SOAPBinding)((BindingProvider)port).getBinding();
    binding.setMTOMEnabled(true);
    port.detail(photo,image);
    assertEquals("ResponseFromCamel",new String(photo.value,"UTF-8"));
    assertNotNull(image.value);
  }
}
