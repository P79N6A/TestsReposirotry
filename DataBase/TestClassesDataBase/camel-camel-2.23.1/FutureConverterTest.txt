/** 
 * @version 
 */
public class FutureConverterTest extends ContextTestSupport {
  @Test public void testConvertFuture(){
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    String out=context.getTypeConverter().convertTo(String.class,future);
    assertEquals("Bye World",out);
  }
  @Test public void testConvertMandatoryFuture() throws Exception {
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    String out=context.getTypeConverter().mandatoryConvertTo(String.class,future);
    assertEquals("Bye World",out);
  }
  @Test public void testConvertMandatoryFutureWithExchange() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    String out=context.getTypeConverter().mandatoryConvertTo(String.class,exchange,future);
    assertEquals("Bye World",out);
  }
  @Test public void testConvertMandatoryFutureWithExchangeFailed() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    try {
      context.getTypeConverter().mandatoryConvertTo(Timestamp.class,exchange,future);
      fail("Should have thrown an exception");
    }
 catch (    NoTypeConversionAvailableException e) {
    }
  }
  @Test public void testConvertFutureWithExchangeFailed() throws Exception {
    Exchange exchange=new DefaultExchange(context);
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    Timestamp out=context.getTypeConverter().convertTo(Timestamp.class,exchange,future);
    assertNull(out);
  }
  @Test public void testConvertFutureCancelled(){
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    future.cancel(true);
    Object out=context.getTypeConverter().convertTo(String.class,future);
    assertNull(out);
  }
  @Test public void testConvertFutureCancelledThenOkay(){
    Future<?> future=template.asyncRequestBody("direct:foo","Hello World");
    future.cancel(true);
    Object out=context.getTypeConverter().convertTo(String.class,future);
    assertNull(out);
    future=template.asyncRequestBody("direct:foo","Hello World");
    out=context.getTypeConverter().convertTo(String.class,future);
    assertEquals("Bye World",out);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:foo").delay(10).transform(constant("Bye World"));
      }
    }
;
  }
}
