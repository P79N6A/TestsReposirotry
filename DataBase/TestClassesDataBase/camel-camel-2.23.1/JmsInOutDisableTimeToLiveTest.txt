/** 
 * @version
 */
public class JmsInOutDisableTimeToLiveTest extends CamelTestSupport {
  private String urlTimeout="activemq:queue.in?requestTimeout=2000";
  private String urlTimeToLiveDisabled="activemq:queue.in?requestTimeout=2000&disableTimeToLive=true";
  @Test public void testInOutExpired() throws Exception {
    MyCoolBean cool=new MyCoolBean();
    cool.setProducer(template);
    cool.setConsumer(consumer);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:end").expectedMessageCount(0);
    try {
      template.requestBody("direct:timeout","World 1");
      fail("Should not get here, timeout expected");
    }
 catch (    CamelExecutionException e) {
      cool.someBusinessLogic();
    }
    assertMockEndpointsSatisfied();
  }
  @Test public void testInOutDisableTimeToLive() throws Exception {
    MyCoolBean cool=new MyCoolBean();
    cool.setProducer(template);
    cool.setConsumer(consumer);
    getMockEndpoint("mock:result").expectedMessageCount(0);
    getMockEndpoint("mock:end").expectedBodiesReceived("Hello World 2");
    try {
      template.requestBody("direct:disable","World 2");
      fail("Should not get here, timeout expected");
    }
 catch (    CamelExecutionException e) {
      cool.someBusinessLogic();
    }
    assertMockEndpointsSatisfied();
  }
  protected CamelContext createCamelContext() throws Exception {
    CamelContext camelContext=super.createCamelContext();
    ConnectionFactory connectionFactory=CamelJmsTestHelper.createConnectionFactory();
    camelContext.addComponent("activemq",jmsComponentAutoAcknowledge(connectionFactory));
    return camelContext;
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("direct:timeout").to(urlTimeout).to("mock:result");
        from("direct:disable").to(urlTimeToLiveDisabled).to("mock:result");
        from("activemq:queue.out").to("mock:end");
      }
    }
;
  }
public static class MyCoolBean {
    private int count;
    private ConsumerTemplate consumer;
    private ProducerTemplate producer;
    public void setConsumer(    ConsumerTemplate consumer){
      this.consumer=consumer;
    }
    public void setProducer(    ProducerTemplate producer){
      this.producer=producer;
    }
    public void someBusinessLogic(){
      while (true) {
        String msg=consumer.receiveBody("activemq:queue.in",2000,String.class);
        if (msg == null) {
          break;
        }
        msg="Hello " + msg;
        producer.sendBodyAndHeader("activemq:queue.out",msg,"number",count++);
      }
    }
  }
}
