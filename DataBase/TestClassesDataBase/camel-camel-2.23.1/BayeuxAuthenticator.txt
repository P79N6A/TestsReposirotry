/** 
 * Custom SecurityPolicy, see http://cometd.org/documentation/howtos/authentication for details
 */
public static final class BayeuxAuthenticator extends DefaultSecurityPolicy implements BayeuxServer.Extension, ServerSession.RemoveListener {
  private String user="changeit";
  private String pwd="changeit";
  @Override public boolean canHandshake(  BayeuxServer server,  ServerSession session,  ServerMessage message){
    if (session.isLocalSession()) {
      return true;
    }
    Map<String,Object> ext=message.getExt();
    if (ext == null) {
      return false;
    }
    @SuppressWarnings("unchecked") Map<String,Object> authentication=(Map<String,Object>)ext.get("authentication");
    if (authentication == null) {
      return false;
    }
    Object authenticationData=verify(authentication);
    if (authenticationData == null) {
      return false;
    }
    session.addListener(this);
    return true;
  }
  private Object verify(  Map<String,Object> authentication){
    if (!user.equals(authentication.get("user"))) {
      return null;
    }
    if (!pwd.equals(authentication.get("credentials"))) {
      return null;
    }
    return "OK";
  }
  public boolean sendMeta(  ServerSession to,  ServerMessage.Mutable message){
    if (Channel.META_HANDSHAKE.equals(message.getChannel())) {
      if (!message.isSuccessful()) {
        Map<String,Object> advice=message.getAdvice(true);
        advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_HANDSHAKE_VALUE);
        Map<String,Object> ext=message.getExt(true);
        Map<String,Object> authentication=new HashMap<>();
        ext.put("authentication",authentication);
        authentication.put("failed",true);
        authentication.put("failureReason","invalid_credentials");
      }
    }
    return true;
  }
  public void removed(  ServerSession session,  boolean timeout){
  }
  public boolean rcv(  ServerSession from,  ServerMessage.Mutable message){
    return true;
  }
  public boolean rcvMeta(  ServerSession from,  ServerMessage.Mutable message){
    return true;
  }
  public boolean send(  ServerSession from,  ServerSession to,  ServerMessage.Mutable message){
    return true;
  }
}
