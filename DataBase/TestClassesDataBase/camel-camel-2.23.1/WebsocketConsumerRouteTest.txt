public class WebsocketConsumerRouteTest extends CamelTestSupport {
  protected int port;
  @Override @Before public void setUp() throws Exception {
    port=AvailablePortFinder.getNextAvailable(16200);
    super.setUp();
  }
  @Test public void testWSHttpCall() throws Exception {
    AsyncHttpClient c=new DefaultAsyncHttpClient();
    WebSocket websocket=c.prepareGet("ws://127.0.0.1:" + port + "/echo").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket){
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
      }
    }
).build()).get();
    MockEndpoint result=getMockEndpoint("mock:result");
    result.expectedBodiesReceived("Test");
    websocket.sendMessage("Test");
    result.assertIsSatisfied();
    websocket.close();
    c.close();
  }
  @Test public void testWSBytesHttpCall() throws Exception {
    AsyncHttpClient c=new DefaultAsyncHttpClient();
    WebSocket websocket=c.prepareGet("ws://127.0.0.1:" + port + "/echo").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){
      @Override public void onOpen(      WebSocket websocket){
      }
      @Override public void onClose(      WebSocket websocket){
      }
      @Override public void onError(      Throwable t){
        t.printStackTrace();
      }
    }
).build()).get();
    MockEndpoint result=getMockEndpoint("mock:result");
    final byte[] testmessage="Test".getBytes("utf-8");
    result.expectedBodiesReceived(testmessage);
    websocket.sendMessage(testmessage);
    result.assertIsSatisfied();
    websocket.close();
    c.close();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure(){
        WebsocketComponent websocketComponent=(WebsocketComponent)context.getComponent("websocket");
        websocketComponent.setPort(port);
        websocketComponent.setMaxThreads(25);
        websocketComponent.setMinThreads(1);
        from("websocket://echo").log(">>> Message received from WebSocket Client : ${body}").to("mock:result");
      }
    }
;
  }
}
