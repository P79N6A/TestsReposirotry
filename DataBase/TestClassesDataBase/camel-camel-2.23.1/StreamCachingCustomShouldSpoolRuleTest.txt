public class StreamCachingCustomShouldSpoolRuleTest extends ContextTestSupport {
  private MyCustomSpoolRule spoolRule=new MyCustomSpoolRule();
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/cachedir");
    super.setUp();
  }
  @Test public void testByteArrayInputStream() throws Exception {
    getMockEndpoint("mock:english").expectedBodiesReceived("<hello/>");
    getMockEndpoint("mock:dutch").expectedBodiesReceived("<hallo/>");
    getMockEndpoint("mock:german").expectedBodiesReceived("<hallo/>");
    getMockEndpoint("mock:french").expectedBodiesReceived("<hellos/>");
    template.sendBody("direct:a",new MyInputStream(new ByteArrayInputStream("<hello/>".getBytes())));
    spoolRule.setSpool(true);
    template.sendBody("direct:a",new MyInputStream(new ByteArrayInputStream("<hallo/>".getBytes())));
    template.sendBody("direct:a",new MyInputStream(new ByteArrayInputStream("<hellos/>".getBytes())));
    assertMockEndpointsSatisfied();
  }
private final class MyInputStream extends FilterInputStream {
    private MyInputStream(    InputStream in){
      super(in);
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir");
        context.getStreamCachingStrategy().addSpoolRule(spoolRule);
        context.getStreamCachingStrategy().setAnySpoolRules(true);
        context.setStreamCaching(true);
        from("direct:a").choice().when(xpath("//hello")).to("mock:english").when(xpath("//hallo")).to("mock:dutch","mock:german").otherwise().to("mock:french").end().process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            if (spoolRule.isSpool()) {
              String[] names=new File("target/cachedir").list();
              assertEquals("There should be a cached spool file",1,names.length);
            }
          }
        }
);
      }
    }
;
  }
private static final class MyCustomSpoolRule implements StreamCachingStrategy.SpoolRule {
    private volatile boolean spool;
    @Override public boolean shouldSpoolCache(    long length){
      return spool;
    }
    public boolean isSpool(){
      return spool;
    }
    public void setSpool(    boolean spool){
      this.spool=spool;
    }
    @Override public String toString(){
      return "MyCustomSpoolRule";
    }
  }
}
