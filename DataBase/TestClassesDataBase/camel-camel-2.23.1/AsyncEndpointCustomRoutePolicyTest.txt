/** 
 * @version 
 */
public class AsyncEndpointCustomRoutePolicyTest extends ContextTestSupport {
  private static String beforeThreadName;
  private static String afterThreadName;
  private final MyCustomRoutePolicy policy=new MyCustomRoutePolicy();
private static class MyCustomRoutePolicy extends RoutePolicySupport {
    private volatile int invoked;
    private volatile AtomicBoolean stopped=new AtomicBoolean();
    @Override public void onExchangeDone(    Route route,    Exchange exchange){
      invoked++;
      if (invoked >= 2) {
        try {
          stopped.set(true);
          stopConsumer(route.getConsumer());
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
    public boolean isStopped(){
      return stopped.get();
    }
  }
  @Test public void testAsyncEndpoint() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye Camel");
    getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel");
    getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel");
    String reply=template.requestBody("direct:start","Hello Camel",String.class);
    assertEquals("Bye Camel",reply);
    assertMockEndpointsSatisfied();
    assertFalse("Should use different threads",beforeThreadName.equalsIgnoreCase(afterThreadName));
    mock.reset();
    mock.expectedMessageCount(1);
    template.sendBody("direct:start","stop");
    mock.assertIsSatisfied();
    await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> assertTrue("Should be stopped",policy.isStopped()));
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        context.addComponent("async",new MyAsyncComponent());
        from("direct:start").routeId("foo").routePolicy(policy).to("mock:before").to("log:before").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            beforeThreadName=Thread.currentThread().getName();
          }
        }
).to("async:bye:camel").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            afterThreadName=Thread.currentThread().getName();
          }
        }
).to("log:after").to("mock:after").to("mock:result");
      }
    }
;
  }
}
