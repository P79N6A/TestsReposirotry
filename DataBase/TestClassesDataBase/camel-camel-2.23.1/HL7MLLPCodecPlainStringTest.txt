/** 
 * Unit test to demonstrate the HL7MLLPCodec is message format agnostic (don't require the HAPI library). The message format can be java.lang.String.
 */
public class HL7MLLPCodecPlainStringTest extends HL7TestSupport {
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    HL7MLLPCodec codec=new HL7MLLPCodec();
    codec.setCharset("iso-8859-1");
    jndi.bind("hl7codec",codec);
    return jndi;
  }
  @Test public void testPlainString() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceived("Bye World");
    Object out=template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec","Hello World",String.class);
    assertMockEndpointsSatisfied();
    assertEquals("Bye World",out);
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor(){
          public void process(          Exchange exchange) throws Exception {
            String body=exchange.getIn().getBody(String.class);
            assertEquals("Hello World",body);
            exchange.getOut().setBody("Bye World");
          }
        }
).to("mock:result");
      }
    }
;
  }
}
