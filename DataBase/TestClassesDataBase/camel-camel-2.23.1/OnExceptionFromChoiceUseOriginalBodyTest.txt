/** 
 * Unit test for CAMEL-1188
 */
public class OnExceptionFromChoiceUseOriginalBodyTest extends ContextTestSupport {
  private MyServiceBean myServiceBean;
  @Test public void testNoErrorWhen() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:func").expectedMessageCount(0);
    getMockEndpoint("mock:tech").expectedMessageCount(0);
    getMockEndpoint("mock:otherwise").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:when");
    mock.expectedMessageCount(1);
    template.sendBody("direct:route","<order><type>myType</type><user>James</user></order>");
    assertMockEndpointsSatisfied();
  }
  @Test public void testFunctionalError() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:tech").expectedMessageCount(0);
    getMockEndpoint("mock:when").expectedMessageCount(0);
    getMockEndpoint("mock:otherwise").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:func");
    mock.expectedBodiesReceived("Func");
    template.sendBody("direct:func","Func");
    assertMockEndpointsSatisfied();
  }
  @Test public void testTechnicalError() throws Exception {
    getMockEndpoint("mock:error").expectedMessageCount(0);
    getMockEndpoint("mock:func").expectedMessageCount(0);
    getMockEndpoint("mock:when").expectedMessageCount(0);
    getMockEndpoint("mock:otherwise").expectedMessageCount(0);
    MockEndpoint mock=getMockEndpoint("mock:tech");
    mock.expectedBodiesReceived("Tech");
    template.sendBody("direct:tech","Tech");
    assertMockEndpointsSatisfied();
  }
  @Override @Before public void setUp() throws Exception {
    myServiceBean=new MyServiceBean();
    super.setUp();
  }
  @Override protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry jndi=super.createRegistry();
    jndi.bind("myServiceBean",myServiceBean);
    return jndi;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:error"));
        onException(MyTechnicalException.class).useOriginalMessage().maximumRedeliveries(0).handled(true).to("mock:tech");
        onException(MyFunctionalException.class).useOriginalMessage().maximumRedeliveries(0).handled(true).to("mock:func");
        from("direct:tech").setBody(constant("<order><type>myType</type><user>Tech</user></order>")).to("direct:route");
        from("direct:func").setBody(constant("<order><type>myType</type><user>Func</user></order>")).to("direct:route");
        from("direct:route").choice().when(method("myServiceBean").isEqualTo("James")).to("mock:when").otherwise().to("mock:otherwise");
      }
    }
;
  }
}
