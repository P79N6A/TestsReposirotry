public class JdbcAggregateLoadConcurrentTest extends AbstractJdbcAggregationTestSupport {
  private static final Logger LOG=LoggerFactory.getLogger(JdbcAggregateLoadConcurrentTest.class);
  private static final char[] KEYS=new char[]{'A','B','C','D','E','F','G','H','I','J'};
  private static final int SIZE=500;
  @Test public void testLoadTestJdbcAggregate() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedMessageCount(10);
    mock.setResultWaitTime(50 * 1000);
    ExecutorService executor=Executors.newFixedThreadPool(10);
    LOG.info("Staring to send " + SIZE + " messages.");
    for (int i=0; i < SIZE; i++) {
      final int value=1;
      final int key=i % 10;
      executor.submit(new Callable<Object>(){
        public Object call() throws Exception {
          char id=KEYS[key];
          LOG.debug("Sending {} with id {}",value,id);
          template.sendBodyAndHeader("direct:start",value,"id","" + id);
          Thread.sleep(3);
          return null;
        }
      }
);
    }
    LOG.info("Sending all " + SIZE + " message done. Now waiting for aggregation to complete.");
    assertMockEndpointsSatisfied();
    executor.shutdownNow();
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").to("log:input?groupSize=500").aggregate(header("id"),new MyAggregationStrategy()).aggregationRepository(repo).completionSize(SIZE / 10).to("log:output?showHeaders=true").to("mock:result").end();
      }
    }
;
  }
}
