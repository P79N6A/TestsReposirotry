/** 
 * Unite test for  {@link CassandraIdempotentRepository}
 */
public class CassandraIdempotentTest extends BaseCassandraTest {
  private Cluster cluster;
  private CassandraIdempotentRepository idempotentRepository;
  @Override protected void doPreSetup() throws Exception {
    if (canTest()) {
      cluster=CassandraUnitUtils.cassandraCluster();
      Session rootSession=cluster.connect();
      CassandraUnitUtils.loadCQLDataSet(rootSession,"NamedIdempotentDataSet.cql");
      rootSession.close();
      idempotentRepository=new NamedCassandraIdempotentRepository(cluster,CassandraUnitUtils.KEYSPACE,"ID");
      idempotentRepository.setTable("NAMED_CAMEL_IDEMPOTENT");
      idempotentRepository.start();
    }
    super.doPreSetup();
  }
  @Override @After public void tearDown() throws Exception {
    super.tearDown();
    if (canTest()) {
      idempotentRepository.stop();
    }
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:input").idempotentConsumer(header("idempotentId"),idempotentRepository).to("mock:output");
      }
    }
;
  }
  private void send(  String idempotentId,  String body){
    super.template.sendBodyAndHeader("direct:input",body,"idempotentId",idempotentId);
  }
  @Test public void testIdempotentRoute() throws Exception {
    if (!canTest()) {
      return;
    }
    MockEndpoint mockOutput=getMockEndpoint("mock:output");
    mockOutput.expectedMessageCount(2);
    mockOutput.expectedBodiesReceivedInAnyOrder("A","B");
    send("1","A");
    send("2","B");
    send("1","A");
    send("2","B");
    send("1","A");
    mockOutput.assertIsSatisfied();
  }
}
