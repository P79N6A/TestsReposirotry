public class ConsulServiceCallWithRegistrationTest extends ConsulTestSupport {
  private static final String SERVICE_HOST="localhost";
  @Override public boolean isUseRouteBuilder(){
    return false;
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    ConsulServiceRegistry registry=new ConsulServiceRegistry();
    registry.setId(context.getUuidGenerator().generateUuid());
    registry.setCamelContext(context());
    registry.setUrl(consulUrl());
    registry.setServiceHost(SERVICE_HOST);
    registry.setOverrideServiceHost(true);
    context.addService(registry,true,false);
    return context;
  }
  @Test public void testServiceCallSuccess() throws Exception {
    final int port=SocketUtils.findAvailableTcpPort();
    final String serviceId=UUID.randomUUID().toString();
    final String serviceName=UUID.randomUUID().toString();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").serviceCall().name(serviceName).component("jetty").defaultLoadBalancer().consulServiceDiscovery().url(consulUrl()).end().end().log("${body}");
        fromF("undertow:http://%s:%d/service/path",SERVICE_HOST,port).routeId(serviceId).routeGroup(serviceName).routePolicy(new ServiceRegistrationRoutePolicy()).transform().simple("${in.body} on " + port);
      }
    }
);
    context.start();
    assertEquals("ping on " + port,template.requestBody("direct:start","ping",String.class));
  }
  @Test(expected=CamelExecutionException.class) public void testServiceCallFailure() throws Exception {
    final int port=SocketUtils.findAvailableTcpPort();
    final String serviceId=UUID.randomUUID().toString();
    final String serviceName=UUID.randomUUID().toString();
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").serviceCall().name(serviceName + "/bad/path").component("jetty").defaultLoadBalancer().consulServiceDiscovery().url(consulUrl()).end().end().log("${body}");
        fromF("undertow:http://%s:%d/service/path",SERVICE_HOST,port).routeId(serviceId).routeGroup(serviceName).routePolicy(new ServiceRegistrationRoutePolicy()).transform().simple("${in.body} on " + port);
      }
    }
);
    context.start();
    template.requestBody("direct:start","ping",String.class);
    fail("Should have failed");
  }
}
