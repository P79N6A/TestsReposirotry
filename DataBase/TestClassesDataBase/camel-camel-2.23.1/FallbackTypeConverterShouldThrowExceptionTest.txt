public class FallbackTypeConverterShouldThrowExceptionTest extends CamelTestSupport {
  private final AtomicInteger failed=new AtomicInteger();
  private final AtomicInteger failed2=new AtomicInteger();
  @Test public void testJaxbModel() throws Exception {
    Object foo=new Foo();
    getMockEndpoint("mock:a").expectedBodiesReceived(foo);
    getMockEndpoint("mock:b").expectedBodiesReceived(foo);
    template.sendBody("direct:a",foo);
    assertMockEndpointsSatisfied();
    assertEquals(0,failed.get());
    assertEquals(0,failed2.get());
  }
  @Test public void testNoneJaxbModel() throws Exception {
    Object camel="Camel";
    getMockEndpoint("mock:a").expectedBodiesReceived(camel);
    getMockEndpoint("mock:b").expectedBodiesReceived(camel);
    template.sendBody("direct:a",camel);
    assertMockEndpointsSatisfied();
    assertEquals(1,failed.get());
    assertEquals(0,failed2.get());
  }
  @Test public void testAnotherJaxbModel() throws Exception {
    Object bar=new Bar();
    getMockEndpoint("mock:a").expectedBodiesReceived(bar);
    getMockEndpoint("mock:b").expectedBodiesReceived(bar);
    template.sendBody("direct:a",bar);
    assertMockEndpointsSatisfied();
    assertEquals(1,failed.get());
    assertEquals(0,failed2.get());
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(context){
      @Override public void configure() throws Exception {
        from("direct:a").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            try {
              exchange.getIn().getBody(Foo.class);
            }
 catch (            TypeConversionException e) {
              failed.incrementAndGet();
            }
          }
        }
).to("mock:a").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            try {
              exchange.getIn().getBody(List.class);
            }
 catch (            TypeConversionException e) {
              failed2.incrementAndGet();
            }
          }
        }
).to("mock:b");
      }
    }
;
  }
}
