/** 
 * @version 
 */
public class SedaWaitForTaskNewerOnCompletionTest extends ContextTestSupport {
  private static String done="";
  private final CountDownLatch latch=new CountDownLatch(1);
  @Test public void testNever() throws Exception {
    getMockEndpoint("mock:dead").expectedMessageCount(0);
    getMockEndpoint("mock:result").expectedMessageCount(1);
    template.sendBody("direct:start","Hello World");
    assertMockEndpointsSatisfied();
    assertTrue(latch.await(5,TimeUnit.SECONDS));
    assertEquals("BCA",done);
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure() throws Exception {
        errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(3).redeliveryDelay(0));
        from("direct:start").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            exchange.addOnCompletion(new SynchronizationAdapter(){
              @Override public void onDone(              Exchange exchange){
                done=done + "A";
                latch.countDown();
              }
            }
);
          }
        }
).to("seda:foo?waitForTaskToComplete=Never").process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            done=done + "B";
          }
        }
).to("mock:result");
        from("seda:foo").errorHandler(noErrorHandler()).delay(1000).process(new Processor(){
          @Override public void process(          Exchange exchange) throws Exception {
            done=done + "C";
          }
        }
).throwException(new IllegalArgumentException("Forced"));
      }
    }
;
  }
}
