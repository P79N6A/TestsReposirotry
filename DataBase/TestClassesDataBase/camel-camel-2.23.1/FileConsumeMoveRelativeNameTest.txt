/** 
 * Unit test for consuming multiple directories.
 */
public class FileConsumeMoveRelativeNameTest extends ContextTestSupport {
  private String fileUrl="file://target/multidir/?initialDelay=0&delay=10&recursive=true&move=.done/${file:name}.old";
  @Override @Before public void setUp() throws Exception {
    deleteDirectory("target/multidir");
    super.setUp();
  }
  @Test public void testMultiDir() throws Exception {
    MockEndpoint mock=getMockEndpoint("mock:result");
    mock.expectedBodiesReceivedInAnyOrder("Bye World","Hello World","Goodday World");
    mock.expectedFileExists("target/multidir/.done/bye.txt.old");
    mock.expectedFileExists("target/multidir/.done/sub/hello.txt.old");
    mock.expectedFileExists("target/multidir/.done/sub/sub2/goodday.txt.old");
    template.sendBodyAndHeader(fileUrl,"Bye World",Exchange.FILE_NAME,"bye.txt");
    template.sendBodyAndHeader(fileUrl,"Hello World",Exchange.FILE_NAME,"sub/hello.txt");
    template.sendBodyAndHeader(fileUrl,"Goodday World",Exchange.FILE_NAME,"sub/sub2/goodday.txt");
    context.startRoute("foo");
    assertMockEndpointsSatisfied();
  }
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      public void configure() throws Exception {
        from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result");
      }
    }
;
  }
}
