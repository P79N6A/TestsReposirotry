/** 
 * @version 
 */
public class ThrottlerAsyncDelayedTest extends ContextTestSupport {
  private static final int INTERVAL=500;
  protected int messageCount=9;
  @Test public void testSendLotsOfMessages() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(messageCount);
    for (int i=0; i < messageCount; i++) {
      template.sendBody("seda:a","<message>" + i + "</message>");
    }
    resultEndpoint.assertIsSatisfied();
  }
  @Test public void testSendLotsOfMessagesSimultaneously() throws Exception {
    MockEndpoint resultEndpoint=resolveMandatoryEndpoint("mock:result",MockEndpoint.class);
    resultEndpoint.expectedMessageCount(messageCount);
    ExecutorService executor=Executors.newFixedThreadPool(messageCount);
    for (int i=0; i < messageCount; i++) {
      executor.execute(new Runnable(){
        public void run(){
          template.sendBody("direct:a","<message>payload</message>");
        }
      }
);
    }
    resultEndpoint.assertIsSatisfied();
    context.stop();
    executor.shutdownNow();
  }
  protected RouteBuilder createRouteBuilder(){
    return new RouteBuilder(){
      public void configure(){
        from("seda:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result","mock:result");
        from("direct:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result","mock:result");
      }
    }
;
  }
}
