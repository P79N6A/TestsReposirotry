public class SpringCamelContextThreadPoolProfilesTest extends SpringTestSupport {
  protected AbstractXmlApplicationContext createApplicationContext(){
    return new ClassPathXmlApplicationContext("org/apache/camel/spring/config/SpringCamelContextThreadPoolProfilesTest.xml");
  }
  @Test public void testLowProfile() throws Exception {
    CamelContext context=getMandatoryBean(CamelContext.class,"camel-C");
    ThreadPoolProfile profile=context.getExecutorServiceManager().getThreadPoolProfile("low");
    assertEquals(1,profile.getPoolSize().intValue());
    assertEquals(5,profile.getMaxPoolSize().intValue());
    assertEquals(null,profile.getKeepAliveTime());
    assertEquals(null,profile.getMaxQueueSize());
    assertEquals(null,profile.getRejectedPolicy());
    ExecutorService executor=context.getExecutorServiceManager().newThreadPool(this,"MyLow","low");
    ThreadPoolExecutor tp=assertIsInstanceOf(ThreadPoolExecutor.class,executor);
    assertEquals(1,tp.getCorePoolSize());
    assertEquals(5,tp.getMaximumPoolSize());
    assertEquals(60,tp.getKeepAliveTime(TimeUnit.SECONDS));
    assertEquals("CallerRuns",tp.getRejectedExecutionHandler().toString());
  }
  @Test public void testBigProfile() throws Exception {
    CamelContext context=getMandatoryBean(CamelContext.class,"camel-C");
    ThreadPoolProfile profile=context.getExecutorServiceManager().getThreadPoolProfile("big");
    assertEquals(50,profile.getPoolSize().intValue());
    assertEquals(100,profile.getMaxPoolSize().intValue());
    assertEquals(ThreadPoolRejectedPolicy.DiscardOldest,profile.getRejectedPolicy());
    assertEquals(null,profile.getKeepAliveTime());
    assertEquals(null,profile.getMaxQueueSize());
    ExecutorService executor=context.getExecutorServiceManager().newThreadPool(this,"MyBig","big");
    ThreadPoolExecutor tp=assertIsInstanceOf(ThreadPoolExecutor.class,executor);
    assertEquals(50,tp.getCorePoolSize());
    assertEquals(100,tp.getMaximumPoolSize());
    assertEquals(60,tp.getKeepAliveTime(TimeUnit.SECONDS));
    assertEquals("DiscardOldest",tp.getRejectedExecutionHandler().toString());
  }
}
