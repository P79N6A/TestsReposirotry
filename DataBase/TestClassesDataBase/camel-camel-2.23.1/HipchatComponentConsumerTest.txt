public class HipchatComponentConsumerTest extends CamelTestSupport {
  private CloseableHttpResponse closeableHttpResponse=mock(CloseableHttpResponse.class);
  @EndpointInject(uri="hipchat:http:api.hipchat.com?authToken=anything&consumeUsers=@AUser") private ProducerTemplate template;
  @EndpointInject(uri="mock:result") private MockEndpoint result;
  @Test public void sendInOnly() throws Exception {
    result.expectedMessageCount(1);
    String expectedResponse="{\n" + "  \"items\" : [\n" + "    {\n"+ "      \"date\" : \"2015-01-19T22:07:11.030740+00:00\",\n"+ "      \"from\" : {\n"+ "        \"id\" : 1647095,\n"+ "        \"links\" : {\n"+ "          \"self\" : \"https://api.hipchat.com/v2/user/1647095\"\n"+ "        },\n"+ "        \"mention_name\" : \"notifier\",\n"+ "        \"name\" : \"Message Notifier\"\n"+ "      },\n"+ "      \"id\" : \"6567c6f7-7c1b-43cf-bed0-792b1d092919\",\n"+ "      \"mentions\" : [ ],\n"+ "      \"message\" : \"Unit test Alert\",\n"+ "      \"type\" : \"message\"\n"+ "    }\n"+ "  ],\n"+ "  \"links\" : {\n"+ "    \"self\" : \"https://api.hipchat.com/v2/user/%40ShreyasPurohit/history/latest\"\n"+ "  },\n"+ "  \"maxResults\" : 1,\n"+ "  \"startIndex\" : 0\n"+ "}";
    HttpEntity mockHttpEntity=mock(HttpEntity.class);
    when(mockHttpEntity.getContent()).thenReturn(new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8)));
    when(closeableHttpResponse.getEntity()).thenReturn(mockHttpEntity);
    when(closeableHttpResponse.getStatusLine()).thenReturn(new BasicStatusLine(new ProtocolVersion("HTTP",1,1),200,""));
    assertMockEndpointsSatisfied();
    assertCommonResultExchange(result.getExchanges().get(0));
  }
  @Test public void sendInOnlyMultipleUsers() throws Exception {
    result.expectedMessageCount(1);
    String expectedResponse="{\n" + "  \"items\" : [\n" + "    {\n"+ "      \"date\" : \"2015-01-19T22:07:11.030740+00:00\",\n"+ "      \"from\" : {\n"+ "        \"id\" : 1647095,\n"+ "        \"links\" : {\n"+ "          \"self\" : \"https://api.hipchat.com/v2/user/1647095\"\n"+ "        },\n"+ "        \"mention_name\" : \"notifier\",\n"+ "        \"name\" : \"Message Notifier\"\n"+ "      },\n"+ "      \"id\" : \"6567c6f7-7c1b-43cf-bed0-792b1d092919\",\n"+ "      \"mentions\" : [ ],\n"+ "      \"message\" : \"Unit test Alert\",\n"+ "      \"type\" : \"message\"\n"+ "    }\n"+ "  ],\n"+ "  \"links\" : {\n"+ "    \"self\" : \"https://api.hipchat.com/v2/user/%40ShreyasPurohit/history/latest\"\n"+ "  },\n"+ "  \"maxResults\" : 1,\n"+ "  \"startIndex\" : 0\n"+ "}";
    HttpEntity mockHttpEntity=mock(HttpEntity.class);
    when(mockHttpEntity.getContent()).thenReturn(new ByteArrayInputStream(expectedResponse.getBytes(StandardCharsets.UTF_8)));
    when(closeableHttpResponse.getEntity()).thenReturn(mockHttpEntity);
    when(closeableHttpResponse.getStatusLine()).thenReturn(new BasicStatusLine(new ProtocolVersion("HTTP",1,1),200,""));
    assertMockEndpointsSatisfied();
    assertCommonResultExchange(result.getExchanges().get(0));
  }
  @Test public void sendInOnlyNoResponse() throws Exception {
    result.expectedMessageCount(0);
    HttpEntity mockHttpEntity=mock(HttpEntity.class);
    when(mockHttpEntity.getContent()).thenReturn(null);
    when(closeableHttpResponse.getEntity()).thenReturn(mockHttpEntity);
    when(closeableHttpResponse.getStatusLine()).thenReturn(new BasicStatusLine(new ProtocolVersion("HTTP",1,1),200,""));
    assertMockEndpointsSatisfied();
  }
  private void assertCommonResultExchange(  Exchange resultExchange){
    assertIsInstanceOf(String.class,resultExchange.getIn().getBody());
    assertEquals("Unit test Alert",resultExchange.getIn().getBody(String.class));
    assertEquals("@AUser",resultExchange.getIn().getHeader(HipchatConstants.FROM_USER));
    assertEquals("2015-01-19T22:07:11.030740+00:00",resultExchange.getIn().getHeader(HipchatConstants.MESSAGE_DATE));
    assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.FROM_USER_RESPONSE_STATUS));
  }
  @Override protected CamelContext createCamelContext() throws Exception {
    final CamelContext context=super.createCamelContext();
    HipchatComponent component=new HipchatComponent(context){
      @Override protected HipchatEndpoint getHipchatEndpoint(      String uri){
        return new HipchatEPSuccessTestSupport(uri,this,null,closeableHttpResponse);
      }
    }
;
    context.addComponent("hipchat",component);
    return context;
  }
  @Override protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder(){
      @Override public void configure(){
        from("hipchat:http://api.hipchat.com?authToken=anything&consumeUsers=@AUser").to("mock:result");
      }
    }
;
  }
}
