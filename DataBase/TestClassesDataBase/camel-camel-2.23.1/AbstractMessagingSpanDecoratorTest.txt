public class AbstractMessagingSpanDecoratorTest {
  @Test public void testOperationName(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("jms://MyQueue?hello=world");
    SpanDecorator decorator=new AbstractMessagingSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
    }
;
    assertEquals("MyQueue",decorator.getOperationName(null,endpoint));
  }
  @Test public void testPreMessageBusDestination(){
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("jms://MyQueue?hello=world");
    SpanDecorator decorator=new AbstractMessagingSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
    }
;
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,null,endpoint);
    assertEquals("MyQueue",span.tags().get(Tags.MESSAGE_BUS_DESTINATION.getKey()));
  }
  @Test public void testPreMessageId(){
    String messageId="abcd";
    Endpoint endpoint=Mockito.mock(Endpoint.class);
    Exchange exchange=Mockito.mock(Exchange.class);
    Mockito.when(endpoint.getEndpointUri()).thenReturn("test");
    SpanDecorator decorator=new AbstractMessagingSpanDecorator(){
      @Override public String getComponent(){
        return null;
      }
      @Override public String getMessageId(      Exchange exchange){
        return messageId;
      }
    }
;
    MockTracer tracer=new MockTracer();
    MockSpan span=tracer.buildSpan("TestSpan").start();
    decorator.pre(span,exchange,endpoint);
    assertEquals(messageId,span.tags().get(AbstractMessagingSpanDecorator.MESSAGE_BUS_ID));
  }
}
